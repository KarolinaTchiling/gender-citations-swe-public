FN Clarivate Analytics Web of Science
VR 1.0
PT J
AU Cheeseman, L
   Parkinson, MJ
   Clebsch, S
   Kogias, M
   Drossopoulou, S
   Chisnall, D
   Wrigstad, T
   Liétar, P
AF Cheeseman, Luke
   Parkinson, Matthew J.
   Clebsch, Sylvan
   Kogias, Marios
   Drossopoulou, Sophia
   Chisnall, David
   Wrigstad, Tobias
   Lietar, Paul
TI When Concurrency Matters: Behaviour-Oriented Concurrency
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE actors
AB Expressing parallelism and coordination is central for modern concurrent programming. Many mechanisms exist for expressing both parallelism and coordination. However, the design decisions for these two mechanisms are tightly intertwined. We believe that the interdependence of these two mechanisms should be recognised and achieved through a single, powerful primitive. We are not the first to realise this: the prime example is actor model programming, where parallelism arises through fine-grained decomposition of a program's state into actors that are able to execute independently in parallel. However, actor model programming has a serious pain point: updating multiple actors as a single atomic operation is a challenging task.
   We address this pain point by introducing a new concurrency paradigm: Behaviour-Oriented Concurrency (BoC). In BoC, we are revisiting the fundamental concept of a behaviour to provide a more transactional concurrency model. BoC enables asynchronously creating atomic and ordered units of work with exclusive access to a collection of independent resources.
   In this paper, we describe BoC informally in terms of examples, which demonstrate the advantages of exclusive access to several independent resources, as well as the need for ordering. We define it through a formal model. We demonstrate its practicality by implementing a C++ runtime. We argue its applicability through the Savina benchmark suite: benchmarks in this suite can be more compactly represented using BoC in place of Actors, and we observe comparable, if not better, performance.
C1 [Cheeseman, Luke; Kogias, Marios; Drossopoulou, Sophia; Lietar, Paul] Imperial Coll London, London, England.
   [Parkinson, Matthew J.; Clebsch, Sylvan] Microsoft Azure Res, Cambridge, England.
   [Kogias, Marios] Microsoft Res, Cambridge, England.
   [Chisnall, David] Microsoft, Cambridge, England.
   [Wrigstad, Tobias] Uppsala Univ, Uppsala, Sweden.
C3 Imperial College London; Microsoft; Microsoft; Uppsala University
RP Cheeseman, L (corresponding author), Imperial Coll London, London, England.
EM luke.cheeseman12@imperial.ac.uk; mattpark@microsoft.com;
   sylvan.clebsch@microsoft.com; m.kogias@imperial.ac.uk;
   s.drossopoulou@imperial.ac.uk; David.Chisnall@cl.cam.ac.uk;
   tobias.wrigstad@it.uu.se; paul.lietar13@imperial.ac.uk
OI Parkinson, Matthew John/0009-0004-3937-1260; Wrigstad,
   Tobias/0000-0002-4269-5408; Clebsch, Sylvan/0009-0004-4049-134X; Kogias,
   Marios/0009-0006-7034-5284
FU EPSRC; Swedish Research Council [2020-05346]; Swedish Research Council
   [2020-05346] Funding Source: Swedish Research Council
FX We thank the EPSRC for financial support of some aspects of this work.
   This work was partially supported by a grant from the Swedish Research
   Council (2020-05346). We thank Sean Allen, Wes Filardo, Adrien Ghosn,
   James Noble and the anonymous reviewers for OOPSLA-22, PLDI-23 and
   OOPLSA-23 for many interesting questions and feedback. We are deeply
   grateful to Elisa Gonzalez Boix for acting as our shepherd, and for
   giving us prompt, insightful and extensive feedback.
CR Abadi DJ, 2018, COMMUN ACM, V61, P78, DOI 10.1145/3181853
   Agha G., 1986, ACTORS MODEL CONCURR, DOI DOI 10.7551/MITPRESS/1086.001.0001
   akka, Transactors
   Amdahl G.M., 1967, AFIPS 1967 SPRING JO, P483
   Arvidsson E, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3622846
   Benton N, 2002, LECT NOTES COMPUT SC, V2374, P415
   Bergman K., 2008, DEFENSE ADV RES PROJ, V15, P181
   Bernstein PA, 2018, PROC INT CONF DATA, P13, DOI 10.1109/ICDE.2018.00010
   Blessing S, 2019, PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL (AGERE '19), P41, DOI 10.1145/3358499.3361224
   Blessing S, 2017, PROCEEDINGS OF THE 7TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL (AGERE'17), P1, DOI 10.1145/3141834.3141835
   Bocchino RL, 2009, ACM SIGPLAN NOTICES, V44, P97, DOI 10.1145/1639949.1640097
   Budimlic Z, 2010, SCI PROGRAMMING-NETH, V18, P203, DOI 10.3233/SPR-2011-0305
   Cave V., 2011, P 9 INT C PRINCIPLES, P51, DOI [10.1145/2093157.2093165, DOI 10.1145/2093157.2093165]
   Cheeseman Luke, 2023, When Concurrency Matters: Behaviour Oriented Concurrency, DOI [10.5281/zenodo.8320212, DOI 10.5281/ZENODO.8320212]
   Clarke D, 2003, LECT NOTES COMPUT SC, V2743, P176
   Clebsch S., 2015, P 5 INT WORKSHOP PRO, P1, DOI DOI 10.1145/2824815.2824816
   Clebsch S, 2018, Ph. D. Dissertation. Ph. D. thesis
   Conchon S., 1999, First International Symposium on Agent Systems and Applications/Third International Symposium on (Cat No.PR00340), P22, DOI 10.1109/ASAMA.1999.805390
   De Koster Joeri, 2015, Ph. D. Dissertation. PhD thesis,
   De Koster Joeri., 2012, Second Edition on Programming Systems, Languages and Applications Based on Actors, Agents, and Decentralized Control Abstractions, AGERE! '12, P11, DOI [10.1145/2414639.2414644, DOI 10.1145/2414639.2414644]
   Developers AkkaSite, Akka repo
   Developers CAFSite, CAF repo
   Developers PonySite, Pony Github Repo
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Dolby J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160913
   ESWARAN KP, 1976, COMMUN ACM, V19, P624, DOI 10.1145/360363.360369
   Field J, 2005, ACM SIGPLAN NOTICES, V40, P195, DOI 10.1145/1047659.1040322
   Fournet C., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P372, DOI 10.1145/237721.237805
   Fournet C, 2002, LECT NOTES COMPUT SC, V2395, P268
   Gelashvili R, 2022, Arxiv, DOI [arXiv:2203.06871, DOI 10.48550/ARXIV.2203.06871]
   Gonnord L, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3564529
   Gordon CS, 2012, ACM SIGPLAN NOTICES, V47, P21, DOI 10.1145/2398857.2384619
   Haller P, 2009, THEOR COMPUT SCI, V410, P202, DOI 10.1016/j.tcs.2008.09.019
   Harris Tim., 2005, PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, P48, DOI DOI 10.1145/1065944.1065952
   HAVENDER JW, 1968, IBM SYST J, V7, P74, DOI 10.1147/sj.72.0074
   Herlihy M, 2003, P 22 ANN S PRINCIPLE, P92
   Hewitt C., 1973, PROC 3 INT JOINT C A, P235, DOI 10.1145/359545.359563
   Hiesgen R, 2016, COMPANION PROCEEDINGS OF THE 2016 ACM SIGPLAN INTERNATIONAL CONFERENCE ON SYSTEMS, PROGRAMMING, LANGUAGES AND APPLICATIONS: SOFTWARE FOR HUMANITY (SPLASH COMPANION'16), P31, DOI 10.1145/2984043.2989218
   Huang YH, 2020, PROC VLDB ENDOW, V13, P629, DOI 10.14778/3377369.3377373
   Imam S.M., 2014, P 4 INT WORKSH PROGR, P67, DOI [10.1145/2687357.2687368, DOI 10.1145/2687357.2687368]
   Kegel D., 2014, The C10K problem
   Koskinen E, 2008, SPAA'08: PROCEEDINGS OF THE TWENTIETH ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P160
   Kraft P, 2022, PROCEEDINGS OF THE 19TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI '22), P1059
   Liu TP, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P327
   Matveev Alexander, 2012, Towards a fully pessimistic stm model, DOI [10.1145/2486159.2486166, DOI 10.1145/2486159.2486166]
   McCool M, 2012, STRUCTURED PARALLEL PROGRAMMING: PATTERNS FOR EFFICIENT COMPUTATION, P1, DOI 10.1016/B978-0-12-415993-8.00001-3
   MELLORCRUMMEY JM, 1991, ACM T COMPUT SYST, V9, P21, DOI 10.1145/103727.103729
   Moore KF, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P51, DOI 10.1145/1328438.1328448
   Murray DG, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P439, DOI 10.1145/2517349.2522738
   Ni Y, 2007, PROCEEDINGS OF THE 2007 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING PPOPP'07, P68, DOI 10.1145/1229428.1229442
   Plociniczak H, 2010, LECT NOTES COMPUT SC, V6116, P61, DOI 10.1007/978-3-642-13414-2_5
   Qin D, 2021, PROCEEDINGS OF THE 28TH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, SOSP 2021, P180, DOI 10.1145/3477132.3483591
   Sang B, 2016, MIDDLEWARE '16: PROCEEDINGS OF THE 17TH INTERNATIONAL MIDDLEWARE CONFERENCE, DOI 10.1145/2988336.2988352
   Sang B, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428266
   Shirako J, 2008, ICS'08: PROCEEDINGS OF THE 2008 ACM INTERNATIONAL CONFERENCE ON SUPERCOMPUTING, P277
   Swalens J, 2021, ACM T PROGR LANG SYS, V42, DOI 10.1145/3427201
   Tasharofi S, 2013, LECT NOTES COMPUT SC, V7920, P302, DOI 10.1007/978-3-642-39038-8_13
   Varela C, 2001, ACM SIGPLAN NOTICES, V36, P20, DOI 10.1145/583960.583964
   Vaziri M, 2006, ACM SIGPLAN NOTICES, V41, P334, DOI 10.1145/1111320.1111067
   WALKER DW, 1994, PARALLEL COMPUT, V20, P657, DOI 10.1016/0167-8191(94)90033-7
   Welc A, 2008, SPAA'08: PROCEEDINGS OF THE TWENTIETH ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P285
   WhatsApp, 2012, 1 million is so 2011
NR 62
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 276
DI 10.1145/3622852
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100056
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Paulino, H
   Matos, AA
   Cederquist, J
   Giunti, M
   Matos, J
   Ravara, A
AF Paulino, Herve
   Matos, Ana Almeida
   Cederquist, Jan
   Giunti, Marco
   Matos, Joao
   Ravara, Antonio
TI AtomiS: Data-Centric Synchronization Made Practical
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Concurrency; Data-Centric; Programming Model; Inference and Synthesis
ID INFERENCE
AB Data-Centric Synchronization (DCS) shifts the reasoning about concurrency restrictions from control structures to data declaration. It is a high-level declarative approach that abstracts away from the actual concurrency control mechanism(s) in use. Despite its advantages, the practical use of DCS is hindered by the fact that it may require many annotations and/or multiple implementations of the same method to cope with differently qualified parameters.
   To overcome these limitations, in this paper we present AtomiS, a new DCS approach that requires only qualifying types of parameters and return values in interface definitions, and of fields in class definitions. The latter may also be abstracted away in type parameters, rendering class implementations virtually annotationfree. From this high level specification, a static analysis infers the atomicity constraints that are local to each method, considering valid only the method variants that are consistent with the specification, and performs code generation for all valid variants of each method. The generated code is then the target for automatic injection of concurrency control primitives that are responsible for ensuring the absence of data-races, atomicity-violations and deadlocks.
   We provide a Java implementation and showcase the applicability of AtomiS in real-life code. For the benchmarks analysed, AtomiS requires fewer annotations than the original number of regions requiring locks, as well as fewer annotations than Atomic Sets (a reference DCS proposal).
C1 [Paulino, Herve; Giunti, Marco; Ravara, Antonio] NOVA Univ Lisbon, Dept Comp Sci, NOVA LINCS, Caparica, Portugal.
   [Paulino, Herve; Ravara, Antonio] NOVA Univ Lisbon, FCT NOVA, Caparica, Portugal.
   [Matos, Ana Almeida; Cederquist, Jan] Inst Telecomunicacoes, SQIG, Aveiro, Portugal.
   [Matos, Ana Almeida; Cederquist, Jan] Univ Lisbon, Dept Comp Sci & Engn & IST, Lisbon, Portugal.
   [Matos, Joao] Univ Lisbon, Dept Comp Sci, IST, Lisbon, Portugal.
C3 Universidade Nova de Lisboa; Universidade Nova de Lisboa; Universidade
   de Aveiro; Universidade de Lisboa; Universidade de Lisboa
RP Paulino, H (corresponding author), NOVA Univ Lisbon, Dept Comp Sci, NOVA LINCS, Caparica, Portugal.; Paulino, H (corresponding author), NOVA Univ Lisbon, FCT NOVA, Caparica, Portugal.
EM herve.paulino@fct.unl.pt
RI Giunti, Marco/KIH-6588-2024; Ravara, Antonio/G-1667-2016; Paulino,
   Herve/A-7016-2010
OI Giunti, Marco/0000-0002-7582-0308; Ravara, Antonio/0000-0001-8074-0380;
   Paulino, Herve/0000-0001-7958-9740
FU FCT.IP [PTDC/CCI-COM/32166/2017, UIDB/04516/2020]; EU [101093006];
   Horizon Europe - Pillar II [101093006] Funding Source: Horizon Europe -
   Pillar II
FX This work was partially funded by project DeDuCe
   (PTDC/CCI-COM/32166/2017), NOVA LINCS (UIDB/04516/2020) and Instituto de
   Telecomunicacoes (UIDB/50008/2020), with the financial support of
   FCT.IP, as well as by the EU Horizon Europe under Grant Agreement
   no.101093006 (TaRDIS).
CR Abadi M, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1889997.1889999
   [Anonymous], 2005, E~ective C++: 55 Speci~c Ways to Improve Your Programs and Designs
   Artho C, 2003, SOFTW TEST VERIF REL, V13, P207, DOI 10.1002/stvr.281
   Asadollah SA, 2017, J INTERNET SERV APPL, V8, DOI 10.1186/s13174-017-0055-2
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Castegren E, 2018, APPL COMPUT REV, V18, P47, DOI 10.1145/3307624.3307629
   Ceze L, 2007, INT S HIGH PERF COMP, P133
   Ceze Luis, 2008, P 2008 ACM SIGPLAN W, P6, DOI [10.1145/1353522, DOI 10.1145/1353522, 10.1145/1353522.1353525, DOI 10.1145/1353522.1353525]
   Cherem S, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P304, DOI 10.1145/1375581.1375619
   Chin B, 2006, LECT NOTES COMPUT SC, V3924, P264
   Contemplate Ltd, 2014, ThreadSafe
   Cui WD, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P17
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dinges Peter, 2013, ACM SIGPLAN SIGSOFT, P1, DOI [10.1145/2462029.2462030, DOI 10.1145/2462029.2462030]
   Dolby J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160913
   Emmi M, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P291
   Engler Dawson., 2003, Proceedings of the Nineteenth ACM Symposium on Operating Systems Principles, SOSP '03, P237, DOI DOI 10.1145/945445.945468
   Facebook Inc, 2013, A tool to detect bugs in Java and C/C++/Objective-C code before it ships
   Flanagan C, 2004, ACM SIGPLAN NOTICES, V39, P256, DOI 10.1145/982962.964023
   Foster Je ~rey S., 1999, C PROGRAMMING LANGUA, P192
   Foster JS, 2006, ACM T PROGR LANG SYS, V28, P1035, DOI 10.1145/1186632.1186635
   Green~eldboyce David, 2007, P 22 ANN ACM SIGPLAN, P321, DOI 10.1145
   Hicks Michael, 2006, P 1 ACM SIGPLAN WORK
   Huang Wei., 2012, 19 INT WORKSH FDN OB
   ISO, ISO/IEC 14882:2011 2011. C++ 11 standard
   Kraska T, 2009, PROC VLDB ENDOW, V2
   Kumar V, 2016, 2016 IEEE CONFERENCE ON WIRELESS SENSORS (ICWISE), P7, DOI 10.1109/ICWISE.2016.8187754
   LEVESON NG, 1993, COMPUTER, V26, P18, DOI 10.1109/MC.1993.274940
   Li Cheng, 2014, 2014 USENIX Annual Technical Conference (USENIX ATC 14), P281
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Lu S, 2006, ACM SIGPLAN NOTICES, V41, P37, DOI 10.1145/1168918.1168864
   Marino D, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P322, DOI 10.1109/ICSE.2013.6606578
   McCloskey B, 2006, ACM SIGPLAN NOTICES, V41, P346, DOI 10.1145/1111320.1111068
   Morrisett J. Gregory., 2006, P 33 ACM SIGPLAN SIG
   Neves D, 2022, 37TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P1268, DOI 10.1145/3477314.3507120
   OpenJDK, 2004, java.util.Collections.
   Osera PM, 2019, TYDE '19: PROCEEDINGS OF THE 4TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT, P64, DOI 10.1145/3331554.3342608
   Paulino H., 2016, Proceedings of the 31st Annual ACM Symposium on Applied Computing, P1806, DOI [10.1145/2851613.2851734, DOI 10.1145/2851613.2851734]
   Paulino H, 2023, Arxiv, DOI [arXiv:2309.05483, 10.48550/arXiv.2309.05483, DOI 10.48550/ARXIV.2309.05483]
   Poulsen K., 2004, TRACKING BLACKOUT BU
   Roemer J, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P747, DOI 10.1145/3385412.3385993
   Sadiq A, 2020, J SYST SOFTWARE, V159, DOI 10.1016/j.jss.2019.110450
   Schneider FT, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P181
   Shavit N., 1995, Proceedings of the Fourteenth Annual ACM Symposium on Principles of Distributed Computing, P204, DOI 10.1145/224964.224987
   Sutter Herb., 2004, C++ Coding Standards: 101 Rules, Guidelines, and Best Practices (C++ in Depth Series
   Vaziri M, 2006, ACM SIGPLAN NOTICES, V41, P334, DOI 10.1145/1111320.1111067
   Vaziri M, 2010, LECT NOTES COMPUT SC, V6183, P304, DOI 10.1007/978-3-642-14107-2_15
   Xiong Weiwei, 2010, P 9 USENIX C OP SYST, P163
   Yanovski J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473597
   Zaza Nosheen, 2016, 1 WORKSH PROGR MOD L, P3, DOI DOI 10.1145/2957319.2957377
   Zhang T, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P149, DOI 10.1145/3037697.3037708
NR 51
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 226
DI 10.1145/3622801
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100006
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Vindum, SF
   Birkedal, L
AF Vindum, Simon Friis
   Birkedal, Lars
TI Spirea: A Mechanized Concurrent Separation Logic for Weak Persistent
   Memory
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE weak memory; persistent memory; non-volatile memory; persistency;
   program verification; program logic; Iris
ID PROGRAM LOGIC
AB Weak persistent memory (a.k.a. non-volatile memory) is an emerging technology that offers fast byte-addressable durable main memory. A wealth of algorithms and libraries has been developed to explore this exciting technology. As noted by others, this has led to a significant verification gap. Towards closing this gap, we present Spirea, the first concurrent separation logic for verification of programs under a weak persistent memory model. Spirea is based on the Iris and Perennial verification frameworks, and by combining features from these logics with novel techniques it supports high-level modular reasoning about crash-safe and thread-safe programs and libraries. Spirea is fully mechanized in the Coq proof assistant and allows for interactive development of proofs with the Iris Proof Mode. We use Spirea to verify several challenging examples with modular specifications. We show how our logic can verify thread-safety and crash-safety of non-blocking durable data structures with null-recovery, in particular the Treiber stack and the Michael-Scott queue adapted to persistent memory. This is the first time durable data structures have been verified with a program logic.
C1 [Vindum, Simon Friis; Birkedal, Lars] Aarhus Univ, Dept Comp Sci, Aarhus, Denmark.
C3 Aarhus University
RP Vindum, SF (corresponding author), Aarhus Univ, Dept Comp Sci, Aarhus, Denmark.
EM vindum@cs.au.dk; birkedal@cs.au.dk
OI Birkedal, Lars/0000-0003-1320-0098
FU Villum Investigator grant [25804]; Center for Basic Research in Program
   Verification (CPV), from the VILLUM Foundation; European Union (ERC,
   CHORDS) [101096090]
FX We thank Hoang-Hai Dang for helpful conversations. We thank the
   anonymous reviewers for their comments that helped improve the
   presentation in the paper. We thank Amin Timany for useful suggestions
   during the mechanization effort. This work was supported in part by a
   Villum Investigator grant (no. 25804), Center for Basic Research in
   Program Verification (CPV), from the VILLUM Foundation. This work was
   co-funded by the European Union (ERC, CHORDS, 101096090). Views and
   opinions expressed are however those of the author(s) only and do not
   necessarily reflect those of the European Union or the European Research
   Council. Neither the European Union nor the granting authority can be
   held responsible for them.
CR Bila EV, 2022, LECT NOTES COMPUT SC, V13240, P234, DOI 10.1007/978-3-030-99336-8_9
   Birkedal Lars, 2020, Lecture Notes on Iris: Higher-Order Concurrent Separation Logic
   Cai WT, 2020, PROCEEDINGS OF THE 25TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '20), P421, DOI [10.1145/3332466.3374502, 10.1145/3381898.3397212]
   Cai Wentao, 2021, 35 INT S DISTRIBUTED, V14, P1, DOI [10.4230/LIPIcs.DISC.2021.14, DOI 10.4230/LIPICS.DISC.2021.14]
   Chajed T, 2021, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '21), P423
   Chajed T, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P243, DOI 10.1145/3341301.3359632
   Chajed Tej, 2022, Ph. D. Dissertation
   Chen Haogang., 2016, 2016 USENIX Annual Technical Conference, USENIX ATC 2016, Denver, CO, USA, June 22-24
   Chen YM, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P1077, DOI 10.1145/3373376.3378515
   Cho K, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P16, DOI 10.1145/3453483.3454027
   Dang HH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371102
   Doko M, 2016, LECT NOTES COMPUT SC, V9583, P413, DOI 10.1007/978-3-662-49122-5_20
   Friedman M, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P377, DOI 10.1145/3385412.3386031
   Friedman M, 2018, ACM SIGPLAN NOTICES, V53, P28, DOI 10.1145/3200691.3178490
   Georg JS, 2020, PROCEEDINGS OF THE 2020 USENIX ANNUAL TECHNICAL CONFERENCE, P859
   Dang HH, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P792, DOI 10.1145/3519939.3523451
   Izraelevitz Joseph, 2016, Distributed Computing. 30th International Symposium, DISC 2016. Proceedings: LNCS 9888, P313, DOI 10.1007/978-3-662-53426-7_23
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Kaiser Jan-Oliver, 2017, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, DOI [10.4230/LIPIcs.ECOOP.2017.17, DOI 10.4230/LIPICS.ECOOP.2017.17]
   Kaiyrakhmet O, 2019, PROCEEDINGS OF THE 17TH USENIX CONFERENCE ON FILE AND STORAGE TECHNOLOGIES, P191
   Khyzha A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434328
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Mével G, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473571
   Pelley S, 2014, CONF PROC INT SYMP C, P265, DOI 10.1109/ISCA.2014.6853222
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360561
   Raad A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371079
   Raad A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428219
   Ramalhete Pedro, 2021, PPoPP '21: Proceedings of the 26th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, P1, DOI 10.1145/3437801.3441586
   Schwalb D., 2015, P ADMS VLDB, V15, P61
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Vafeiadis V, 2013, ACM SIGPLAN NOTICES, V48, P867, DOI [10.1145/2544173.2509532, 10.1145/2509136.2509532]
   Vindum Simon Friis, 2023, Spirea: A Mechanized Concurrent Separation Logic for Weak Persistent Memory (Extended With Appendix)
   Vindum Simon Friis, 2023, OOPSLA23, DOI [10.5281/zenodo.8314888, DOI 10.5281/ZENODO.8314888]
   Volos Haris, 2011, SIGPLAN Notices, V46, P91, DOI 10.1145/1961296.1950379
NR 34
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 244
DI 10.1145/3622820
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100024
OA gold
DA 2024-07-18
ER

PT J
AU Avanzini, M
   Moser, G
   Schaper, M
AF Avanzini, Martin
   Moser, Georg
   Schaper, Michael
TI Automated Expected Value Analysis of Recursive Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programming; expected value analysis; weakest
   pre-expectation semantics; automation
AB In this work, we study the fully automated inference of expected result values of probabilistic programs in the presence of natural programming constructs such as procedures, local variables and recursion. While crucial, capturing these constructs becomes highly non-trivial. The key contribution is the definition of a term representation, denoted as infer[center dot], translating a pre-expectation semantics into first-order constraints, susceptible to automation via standard methods. A crucial step is the use of logical variables, inspired by previous work on Hoare logics for recursive programs. Noteworthy, our methodology is not restricted to tail-recursion, which could unarguably be replaced by iteration and wouldn't need additional insights. We have implemented this analysis in our prototype ev-imp. We provide ample experimental evidence of the prototype's algorithmic expressibility.
C1 [Avanzini, Martin] INRIA Sophia Antipolis Mediterranee, Route Lucioles BP 93, Valbonne, France.
   [Moser, Georg] Univ Innsbruck, Innsbruck, Austria.
   [Schaper, Michael] Build Informed, Innsbruck, Austria.
C3 University of Innsbruck
RP Avanzini, M (corresponding author), INRIA Sophia Antipolis Mediterranee, Route Lucioles BP 93, Valbonne, France.
EM avanzini@inria.fr; georg.moser@uibk.ac.at; mschaper@posteo.net
RI Moser, Georg/GSJ-3089-2022
OI Moser, Georg/0000-0001-9240-6128
FU INRIA Associate Team TC(Pro)3; ANR Project PPS: "Probabilistic Program
   Semantics"
FX We would like the thank the annoymous reviewers for their work and
   invaluable suggestions, which greatly improved our presentation. This
   work is partly supported by the INRIA Associate Team TC(Pro)<SUP>3</SUP>
   and by the ANR Project PPS: "Probabilistic Program Semantics".
CR Agrawal S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158122
   Avanzini Martin, 2023, Zenodo, DOI 10.5281/ZENODO.7801911
   Avanzini M, 2023, Arxiv, DOI arXiv:2304.01284
   Avanzini M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473592
   Avanzini M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428240
   Avanzini M, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785725
   Bao JL, 2022, LECT NOTES COMPUT SC, V13371, P33, DOI 10.1007/978-3-031-13185-1_3
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Batz K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290347
   Bournez O, 2005, LECT NOTES COMPUT SC, V3467, P323
   Celiku O, 2005, LECT NOTES COMPUT SC, V3582, P107
   Chakarov A, 2014, LECT NOTES COMPUT SC, V8723, P85, DOI 10.1007/978-3-319-10936-7_6
   Contejean E, 2005, J AUTOM REASONING, V34, P325, DOI 10.1007/s10817-005-9022-x
   Cormen T. H., 2009, Introduction to Algorithms, VSecond
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Distefano D, 2019, COMMUN ACM, V62, P62, DOI 10.1145/3338112
   Eberl M, 2020, J AUTOM REASONING, V64, P879, DOI 10.1007/s10817-020-09545-0
   Flajolet, 1996, INTRO ANAL ALGORITHM
   Friedman Daniel P., 2008, Essentials of Programming Languages
   Fuhs C, 2007, LECT NOTES COMPUT SC, V4501, P340
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   Graham R. L, 1994, CONCRETE MATH FDN CO, V2nd
   Gretz F, 2014, PERFORM EVALUATION, V73, P110, DOI 10.1016/j.peva.2013.11.004
   HANDELMAN D, 1988, PAC J MATH, V132, P35, DOI 10.2140/pjm.1988.132.35
   Handley Martin A. T., 2020, Proceedings of the ACM on Programming Languages, V4, DOI 10.1145/3371092
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hoffmann Jan, 2011, THESIS LUDWIG MAXIMI
   Kaminski BL, 2018, J ACM, V65, DOI 10.1145/3208102
   Kaminski BL, 2017, IEEE S LOG
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   Kaminski BL, 2015, LECT NOTES COMPUT SC, V9234, P307, DOI 10.1007/978-3-662-48057-1_24
   Katoen JP, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P31, DOI 10.1145/2933575.2934574
   Katoen JP, 2010, LECT NOTES COMPUT SC, V6337, P390, DOI 10.1007/978-3-642-15769-1_24
   Kleymann T., 1999, Formal Aspects of Computing, V11, P541, DOI 10.1007/s001650050057
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Leutgeb L, 2022, LECT NOTES COMPUT SC, V13372, P70, DOI 10.1007/978-3-031-13188-2_4
   Leutgeb L, 2021, LECT NOTES COMPUT SC, V12760, P99, DOI 10.1007/978-3-030-81688-9_5
   McIver A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158121
   McIver Annabelle., 2005, MG COMP SCI
   Mitzenmacher Michael, 2017, PROBABILITY COMPUTIN
   Nielson F., 1999, Principles of Program Analysis
   NIELSON HR, 1987, SCI COMPUT PROGRAM, V9, P107, DOI 10.1016/0167-6423(87)90029-3
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   Sebastiani R, 2020, J AUTOM REASONING, V64, P423, DOI 10.1007/s10817-018-09508-6
   Sinn M, 2014, LECT NOTES COMPUT SC, V8559, P745, DOI 10.1007/978-3-319-08867-9_50
   Takisaka T, 2018, LECT NOTES COMPUT SC, V11138, P476, DOI 10.1007/978-3-030-01090-4_28
   Ngo VC, 2018, ACM SIGPLAN NOTICES, V53, P496, DOI [10.1145/3192366.3192394, 10.1145/3296979.3192394]
   Vasilenko E, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547643
   Vazou N., 2016, Liquid Haskell: Haskell as a Theorem Prover
   Wang D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408992
   Wang D, 2018, ACM SIGPLAN NOTICES, V53, P513, DOI 10.1145/3192366.3192408
   Wang PX, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P204, DOI 10.1145/3314221.3314581
   Wechler W., 1992, EATCS MONOGRAPHS THE, V25
   Winskel G., 1993, The Formal Semantics of Programming Languages
NR 56
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 149
DI 10.1145/3591263
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900045
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Tao, Z
   Nawas, S
   Mitchell, J
   Thakur, AV
AF Tao, Zhe
   Nawas, Stephanie
   Mitchell, Jacqueline
   Thakur, Aditya V.
TI Architecture-Preserving Provable Repair of Deep Neural Networks
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Deep Neural Networks; Repair; Bug fixing; Synthesis
AB Deep neural networks (DNNs) are becoming increasingly important components of software, and are considered the state-of-the-art solution for a number of problems, such as image recognition. However, DNNs are far from infallible, and incorrect behavior of DNNs can have disastrous real-world consequences. This paper addresses the problem of architecture-preserving V-polytope provable repair of DNNs. A V-polytope defines a convex bounded polytope using its vertex representation. V-polytope provable repair guarantees that the repaired DNN satisfies the given specification on the infinite set of points in the given V-polytope. An architecture-preserving repair only modifies the parameters of the DNN, without modifying its architecture. The repair has the flexibility to modify multiple layers of the DNN, and runs in polynomial time. It supports DNNs with activation functions that have some linear pieces, as well as fully-connected, convolutional, pooling and residual layers. To the best our knowledge, this is the first provable repair approach that has all of these features. We implement our approach in a tool called APRNN. Using MNIST, ImageNet, and ACAS Xu DNNs, we show that it has better efficiency, scalability, and generalization compared to PRDNN and REASSURE, prior provable repair methods that are not architecture preserving.
C1 [Tao, Zhe; Nawas, Stephanie; Mitchell, Jacqueline; Thakur, Aditya V.] Univ Calif Davis, Comp Sci, Davis, CA 95616 USA.
C3 University of California System; University of California Davis
RP Tao, Z (corresponding author), Univ Calif Davis, Comp Sci, Davis, CA 95616 USA.
EM zhetao@ucdavis.edu; snawas@ucdavis.edu; jlmitchell@ucdavis.edu;
   avthakur@ucdavis.edu
RI Thakur, Aditya/AAZ-1336-2021
OI Tao, Zhe/0000-0002-4047-699X
FU NSF [CCF-2048123]; DOE [DE-SC0022285]; U.S. Department of Energy (DOE)
   [DE-SC0022285] Funding Source: U.S. Department of Energy (DOE)
FX We would like to thank the anonymous reviewers as well as our shepherd
   Gagandeep Singh for their feedback and suggestions, which have greatly
   improved the quality of the paper. This work is supported in part by NSF
   grant CCF-2048123 and DOE Award DE-SC0022285.
CR Bremner D., 1997, Proceedings of the Thirteenth Annual Symposium on Computational Geometry, P49, DOI 10.1145/262839.262861
   Julian KD, 2018, Arxiv, DOI arXiv:1810.04240
   De Palma A., 2021, 9 INT C LEARNING REP
   Deng J., 2012, Imagenet large scale visual recognition competition 2012 (ILSVRC2012)
   Devlin J, 2019, 2019 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES (NAACL HLT 2019), VOL. 1, P4171
   Dhariwal P., 2020, Advances in neural information processing systems
   Dosovitskiy Alexey, 2020, ABS201011929 CORR
   Ferrari C., 2022, 10 INT C LEARNING RE
   Fu Feisi., 2023, REASSURE
   Fu Feisi., 2022, 10 INT C LEARNING RE
   Goldberger B., 2020, EPIC SERIES COMPUTIN, P260
   Goodfellow I, 2016, ADAPT COMPUT MACH LE, P1
   Gurobi Optimization LLC, 2023, Gurobi optimizer reference manual
   He KM, 2016, PROC CVPR IEEE, P770, DOI 10.1109/CVPR.2016.90
   Hendrycks D, 2021, Arxiv, DOI arXiv:1907.07174
   Hendrycks Dan, 2019, ARXIV190312261
   Howard A, 2019, IEEE I CONF COMP VIS, P1314, DOI 10.1109/ICCV.2019.00140
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Kemker R, 2018, AAAI CONF ARTIF INTE, P3390
   Khachiyan Leonid Genrikhovich, 1979, DOKL AKAD NAUK+, V244
   Krizhevsky A, 2017, COMMUN ACM, V60, P84, DOI 10.1145/3065386
   Lahav Ori, 2021, 2021 Formal Methods in Computer Aided Design (FMCAD), P183, DOI 10.34727/2021/isbn.978-3-85448-046-4_27
   Leino K, 2021, PR MACH LEARN RES, V139
   Liu YH, 2019, Arxiv, DOI arXiv:1907.11692
   Maliar L, 2021, J MONETARY ECON, V122, P76, DOI 10.1016/j.jmoneco.2021.07.004
   Mirman Matthew, 2018, INT C MACH LEARN, P3575
   Mitchell Eric, 2022, PMLR, P15817
   Mitchell Eric., 2022, INT C LEARNING REPRE
   Mu NR, 2019, Arxiv, DOI arXiv:1906.02337
   Müller MN, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498704
   Iandola FN, 2016, Arxiv, DOI arXiv:1602.07360
   Ouyang L., 2022, Training language models to follow instructions with human feedback
   Paszke A, 2019, ADV NEUR IN, V32
   Simonyan K, 2015, Arxiv, DOI arXiv:1409.1556
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Singh G, 2018, ADV NEUR IN, V31
   Singh Gagandeep, 2019, ETH ROBUSTNESS ANALY
   Sinitsin Anton, 2020, 8 INT C LEARNING REP
   Soenksen LR, 2021, SCI TRANSL MED, V13, DOI 10.1126/scitranslmed.abb3652
   Sotoudeh Matthew, 2021, Tools and Algorithms for the Construction and Analysis of Systems. 27th International Conference, TACAS 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12652), P281, DOI 10.1007/978-3-030-72013-1_15
   Sotoudeh M., 2019, NEURIPS 2019 WORKSH
   Sotoudeh M, 2023, INT J SOFTW TOOLS TE, V25, P145, DOI 10.1007/s10009-023-00695-1
   Sotoudeh M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P588, DOI 10.1145/3453483.3454064
   Sotoudeh Matthew, 2021, PRDNN
   Stevens R., 2020, AI for Science
   Tao Zhe, 2023, Zenodo, DOI 10.5281/ZENODO.7807290
   Tao Z, 2023, Arxiv, DOI [arXiv:2304.03496, DOI 10.48550/ARXIV.2304.03496]
   Usman M, 2021, LECT NOTES COMPUT SC, V12759, P3, DOI 10.1007/978-3-030-81685-8_1
   Wang J, 2017, IEEE INFOCOM SER
   Xu K., 2021, 9 INT C LEARNING REP
   Xuankang Lin, 2020, 2020 Formal Methods in Computer Aided Design (FMCAD), P148, DOI 10.34727/2020/isbn.978-3-85448-042-6_22
NR 51
TC 0
Z9 1
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 124
DI 10.1145/3591238
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900020
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Yuan, YW
   Radhakrishna, A
   Samanta, R
AF Yuan, Yongwei
   Radhakrishna, Arjun
   Samanta, Roopsha
TI Trace-Guided Inductive Synthesis of Recursive Functional Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Recursive Functional Programs
ID FRAMEWORK
AB We propose a novel trace-guided approach to tackle the challenges of ambiguity and generalization in synthesis of recursive functional programs from input-output examples. Our approach augments the search space of programs with recursion traces consisting of recursive subcalls of the programs. Our method is based on a new version space algebra (VSA) for succinct representation and efficient manipulation of pairs of recursion traces and programs that are consistent with each other. We have implemented this approach in a tool called SyRup and evaluated it on benchmarks from prior work. Our evaluation demonstrates that SyRup not only requires fewer examples to achieve a certain success rate than existing synthesizers, but is also less sensitive to the quality of the examples.
C1 [Yuan, Yongwei; Samanta, Roopsha] Purdue Univ, W Lafayette, IN 47907 USA.
   [Radhakrishna, Arjun] Microsoft, Redmond, WA USA.
C3 Purdue University System; Purdue University; Microsoft
RP Yuan, YW (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM yuan311@purdue.edu; arradha@microsoft.com; roopsha@purdue.edu
OI Radhakrishna, Arjun/0000-0002-5559-5932; Yuan,
   Yongwei/0000-0002-2619-2288; Samanta, Roopsha/0009-0000-2456-217X
FU National Science Foundation [1846327]
FX We thank our anonymous reviewers and our shepherd, Hila Peleg, for their
   helpful feedback, and Patrick LaFontaine for his detailed comments on
   the initial draft of the paper. We thank Anders Miltner and Justin Lubin
   for answering our many questions about BURST and SMYTH. This research
   was partially supported by the National Science Foundation under Grant
   No. 1846327. Any opinions, findings, and conclusions or recommendations
   expressed in this material are those of the author and do not
   necessarily reflect the views of the National Science Foundation.
CR Albarghouthi Aws, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P934, DOI 10.1007/978-3-642-39799-8_67
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, LECT NOTES COMPUT SC, V9207, P163, DOI 10.1007/978-3-319-21668-3_10
   Barman S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P339
   Barowy DW, 2015, ACM SIGPLAN NOTICES, V50, P218, DOI [10.1145/2813885.2737952, 10.1145/2737924.2737952]
   Bornholt J, 2016, ACM SIGPLAN NOTICES, V51, P775, DOI 10.1145/2914770.2837666
   Chugh R, 2016, ACM SIGPLAN NOTICES, V51, P341, DOI [10.1145/2980983.2908103, 10.1145/2908080.2908103]
   Coquand T., 1994, Types for Proofs and Programs. International Workshop TYPES '93. Selected Papers, P62
   DOWNEY PJ, 1980, J ACM, V27, P758, DOI 10.1145/322217.322228
   Ellis K, 2017, PROCEEDINGS OF THE TWENTY-SIXTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P1638
   Farzan A, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P244, DOI 10.1145/3519939.3523726
   Farzan A, 2021, LECT NOTES COMPUT SC, V12759, P832, DOI 10.1007/978-3-030-81685-8_39
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   FLOYD RW, 1967, J ACM, V14, P636, DOI 10.1145/321420.321422
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Hofmann M, 2010, PEPM '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P29, DOI 10.1145/1706356.1706364
   Itzhaky S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P944, DOI 10.1145/3453483.3454087
   Ji RY, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485544
   Kneuss E, 2013, ACM SIGPLAN NOTICES, V48, P407, DOI [10.1145/2509136.2509555, 10.1145/2544173.2509555]
   Koppel J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547622
   Kuncak V, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P316, DOI 10.1145/1806596.1806632
   Lau T, 2003, MACH LEARN, V53, P111, DOI 10.1023/A:1025671410623
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Lee W, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571263
   Lee W, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434335
   Lubin J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408991
   Miltner A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498682
   MITCHELL TM, 1982, ARTIF INTELL, V18, P203, DOI 10.1016/0004-3702(82)90040-6
   Omar C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290327
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Padhi S, 2019, LECT NOTES COMPUT SC, V11561, P315, DOI 10.1007/978-3-030-25540-4_17
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Shi KS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290386
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2980983.2908102, 10.1145/2908080.2908102]
   SUMMERS PD, 1977, J ACM, V24, P161, DOI 10.1145/321992.322002
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
   Wang XY, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133886
   Wang XY, 2016, ACM SIGPLAN NOTICES, V51, P195, DOI 10.1145/3022671.2984030
   Wang YP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276525
   Yuan Yongwei, 2023, Zenodo, DOI 10.5281/ZENODO.7812616
NR 42
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 141
DI 10.1145/3591255
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900037
OA gold
DA 2024-07-18
ER

PT J
AU Shapira, Y
   Avneri, E
   Drachsler-Cohen, D
AF Shapira, Yuval
   Avneri, Eran
   Drachsler-Cohen, Dana
TI Deep Learning Robustness Verification for Few-Pixel A∼acks
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Neural network veri similar to cation; L-0 adversarial example attacks
ID BOUNDS
AB While successful, neural networks have been shown to be vulnerable to adversarial example attacks. In !0 adversarial attacks, also known as few-pixel attacks, the attacker picks C pixels from the image and arbitrarily perturbs them. To understand the robustness level of a network to these attacks, it is required to check the robustness of the network to perturbations of every set of C pixels. Since the number of sets is exponentially large, existing robustness veriers, which can reason about a single set of pixels at a time, are impractical for !0 robustness verication. We introduce Calzone, an !0 robustness verier for neural networks. To the best of our knowledge, Calzone is therst to provide a sound and complete analysis for !0 adversarial attacks. Calzone builds on the following observation: if a classier is robust to any perturbation of a set of : pixels, for : > C, then it is robust to any perturbation of its subsets of size C. Thus, to reduce the verication time, Calzone predicts the largest : that can be proven robust, via dynamic programming and sampling. It then relies on covering designs to compute a covering of the image with sets of size :. For each set in the covering, Calzone submits its corresponding box neighborhood to an existing ! 8 robustness veri similar to er. If a set's neighborhood is not robust, Calzone repeats this process and covers this set with sets of size : ' < :. We evaluate Calzone on several datasets and networks, for C = 5. Typically, Calzone veri similar to es !0 robustness within few minutes. On our most challenging instances (e.g., C = 5), Calzone completes within few hours. We compare to a MILP baseline and show that it does not scale already for C = 3 [GRRAPHICS]
C1 [Shapira, Yuval; Avneri, Eran; Drachsler-Cohen, Dana] Technion, Haifa, Israel.
C3 Technion Israel Institute of Technology
RP Shapira, Y (corresponding author), Technion, Haifa, Israel.
EM shapirayuval@campus.technion.ac.il; eran.avneri@campus.technion.ac.il;
   ddana@ee.technion.ac.il
FU Israel Science Foundation [2605/20]
FX We thank Roey Shafran and Naor Wiesel for insightful discussions and the
   anonymous reviewers for their insightful feedback. This research was
   supported by the Israel Science Foundation (grant No. 2605/20).
CR Alatalo Janne, 2022, NETYS, DOI [10.1007/978-3-031-17436-0_20, DOI 10.1007/978-3-031-17436-0_20]
   Bafna Mitali, 2018, Advances in Neural Information Processing Systems, V31, P10096
   Balunovic M., 2019, ADV NEURAL INFORM PR, P15313
   Bluskov I, 1998, J COMB DES, V6, P21, DOI 10.1002/(SICI)1520-6610(1998)6:1<21::AID-JCD2>3.0.CO;2-Y
   Bojchevski Aleksandar, 2020, INT C MACH LEARN, P1003
   Bunel R, 2020, J MACH LEARN RES, V21
   Bunel R, 2018, ADV NEUR IN, V31
   Carlini N, 2017, P IEEE S SECUR PRIV, P39, DOI 10.1109/SP.2017.49
   CHAN AH, 1981, IEEE T INFORM THEORY, V27, P643, DOI 10.1109/TIT.1981.1056392
   Chaoning Zhang, 2020, 2020 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). Proceedings, P14509, DOI 10.1109/CVPR42600.2020.01453
   Cheng CH, 2017, LECT NOTES COMPUT SC, V10482, P251, DOI 10.1007/978-3-319-68167-2_18
   Cohen J, 2019, PR MACH LEARN RES, V97
   Crescenzi P, 2004, DISCRETE APPL MATH, V144, P281, DOI 10.1016/j.dam.2003.11.006
   Croce F, 2019, IEEE I CONF COMP VIS, P4723, DOI 10.1109/ICCV.2019.00482
   Dathathri Sumanth, 2020, ARXIV201011645
   De Palma A, 2021, Arxiv, DOI arXiv:2104.06718
   Dutta S, 2018, LECT NOTES COMPUT SC, V10811, P121, DOI 10.1007/978-3-319-77935-5_9
   Dvijotham KD, 2020, INT C LEARN REPR
   Ehlers R, 2017, LECT NOTES COMPUT SC, V10482, P269, DOI 10.1007/978-3-319-68167-2_19
   Elboher YY, 2020, LECT NOTES COMPUT SC, V12224, P43, DOI 10.1007/978-3-030-53288-8_3
   Etzion T., 1995, Designs, Codes and Cryptography, V5, P217, DOI 10.1007/BF01388385
   Fazlyab Mahyar, 2019, Advances in Neural Information Processing Systems, V32, P11423
   Gehr T, 2018, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2018.00058
   Goodfellow I.J., 2015, PROC 3 INT C LEARN R
   Gordon D., 1995, J. COMBIN. DESIGNS, V3, P269
   Gordon Dan M, 2010, JOLLA COVERING REPOS
   Gordon DM, 1996, J COMB THEORY A, V75, P270, DOI 10.1006/jcta.1996.0077
   Haoze Wu, 2020, 2020 Formal Methods in Computer Aided Design (FMCAD), P128, DOI 10.34727/2020/isbn.978-3-85448-042-6_20
   Henriksen Patrick, 2021, P 30 INT JOINT C ART, P2549, DOI [DOI 10.24963/IJCAI.2021/351, 10.24963/ijcai.2021/ 351]
   Tran HD, 2020, LECT NOTES COMPUT SC, V12224, P18, DOI 10.1007/978-3-030-53288-8_2
   Horsley D, 2018, J COMB DES, V26, P369, DOI 10.1002/jcd.21591
   Horsley D, 2017, COMBINATORICA, V37, P673, DOI 10.1007/s00493-016-3326-9
   Jere M, 2020, Arxiv, DOI arXiv:1912.02316
   Jia Jinyuan, 2022, 10 INT C LEARNING RE
   Kabaha A, 2022, LECT NOTES COMPUT SC, V13790, P299, DOI 10.1007/978-3-031-22308-2_14
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Kurakin Alexey, 2017, INT C LEARN REPR
   Lee G.-H., 2019, ADV NEURAL INFORM PR, V32, P4911
   Levine A, 2020, AAAI CONF ARTIF INTE, V34, P4585
   Li PC, 2000, UTILITAS MATHEMATICA, V58, P45
   Madry A., 2018, ARXIV
   Modas A, 2019, PROC CVPR IEEE, P9079, DOI 10.1109/CVPR.2019.00930
   Mohapatra J, 2020, PROC CVPR IEEE, P241, DOI 10.1109/CVPR42600.2020.00032
   Muller Christoph, 2021, P MACHINE LEARNING S, V3
   Nguyen-Son HQ, 2021, IEEE IJCNN, DOI 10.1109/IJCNN52387.2021.9534332
   Pomponi Jary, 2022, IJCNN 2022, P1, DOI [10.1109/IJCNN55064.2022.9892966, DOI 10.1109/IJCNN55064.2022.9892966]
   Pulina L, 2012, AI COMMUN, V25, P117, DOI 10.3233/AIC-2012-0525
   Pulina Luca, 2010, 22 INT C, DOI [10.1007/978-3-642-14295-6_24, DOI 10.1007/978-3-642-14295-6_24]
   Quan W, 2021, PROC SPIE, V11755, DOI 10.1117/12.2581377
   Raghunathan A, 2018, ADV NEUR IN, V31
   Ruan WJ, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P5944
   Ryou W, 2021, LECT NOTES COMPUT SC, V12759, P225, DOI 10.1007/978-3-030-81685-8_10
   SCHONHEIM J, 1964, PAC J MATH, V14, P1405, DOI 10.2140/pjm.1964.14.1405
   Schott L, 2019, 7 INT C LEARNING REP, P1
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Singla S., 2020, INT C MACH LEARN, P8981
   Su JW, 2019, IEEE T EVOLUT COMPUT, V23, P828, DOI 10.1109/TEVC.2019.2890858
   Szegedy Christian, 2014, INT C LEARN REPR INT
   Tjeng V, 2019, ICLR
   Todorov DT, 1985, THESIS U SOFIA
   Ugare S, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527319
   Vargas Danilo Vasconcellos, 2020, P WORKSHOP ARTI CIAL, V2640
   Wang BH, 2021, KDD '21: PROCEEDINGS OF THE 27TH ACM SIGKDD CONFERENCE ON KNOWLEDGE DISCOVERY & DATA MINING, P1645, DOI 10.1145/3447548.3467295
   Wang SQ, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P1599
   Wang Shiqi, 2021, NeurIPS
   Xiao Kai Yuanqing, 2019, 7 INT C LEARNING REP
   Yu XY, 2019, IEEE T NEUR NET LEAR, V30, P2805, DOI 10.1109/TNNLS.2018.2886017
   Zhang DH, 2020, Arxiv, DOI arXiv:2002.09169
NR 68
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586042
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600017
OA gold
DA 2024-07-18
ER

PT J
AU Chitre, K
   Kedia, P
   Purandare, R
AF Chitre, Khushboo
   Kedia, Piyus
   Purandare, Rahul
TI The Road Not Taken: Exploring Alias Analysis Based Optimizations Missed
   by the Compiler
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE LLVM; alias analysis; dynamic checks; loop-versioning; optimizations
AB Context-sensitive inter-procedural alias analyses are more precise than intra-procedural alias analyses. However, context-sensitive inter-procedural alias analyses are not scalable. As a consequence, most of the production compilers sacrifice precision for scalability and implement intra-procedural alias analysis. The alias analysis is used by many compiler optimizations, including loop transformations. Due to the imprecision of alias analysis, the program's performance may suffer, especially in the presence of loops.
   Previous work proposed a general approach based on code-versioning with dynamic checks to disambiguate pointers at runtime. However, the overhead of dynamic checks in this approach is O(log n.), which is substantially high to enable interesting optimizations. Other suggested approaches, e.g., polyhedral and symbolic range analysis, have O(1) overheads, but they only work for loops with certain constraints. The production compilers, such as LLVM and GCC, use scalar evolution analysis to compute an O(1) range check for loops to resolve memory dependencies at runtime. However, this approach also can only be applied to loops with certain constraints.
   In this work, we present our tool, Scout, that can disambiguate two pointers at runtime using single memory access. Scout is based on the key idea to constrain the allocation size and alignment during memory allocations. Scout can also disambiguate array accesses within a loop for which the existing O(1) range checks technique cannot be applied. In addition, Scout uses feedback from static optimizations to reduce the number of dynamic checks needed for optimizations.
   Our technique enabled new opportunities for loop-invariant code motion, dead store elimination, loop-vectorization, and load elimination in an already optimized code. Our performance improvements are up to 51.11% for Polybench and up to 0.89% for CPU SPEC 2017 suites. The geometric means for our allocator's CPU and memory overheads for CPU SPEC 2017 benchmarks are 1.05%, and 7.47%, respectively. For Polybench benchmarks, the geometric mean of CPU and memory overheads are 0.21% and 0.13%, respectively.
C1 [Chitre, Khushboo; Kedia, Piyus] IIIT Delhi, Comp Sci & Engn, Okhla Phase 3, New Delhi 110020, India.
   [Purandare, Rahul] Univ Nebraskas Lincoln, Sch Comp, 256 Avery Hall, Lincoln, NE 68588 USA.
C3 Indraprastha Institute of Information Technology Delhi
RP Chitre, K (corresponding author), IIIT Delhi, Comp Sci & Engn, Okhla Phase 3, New Delhi 110020, India.
EM khushbooc@iiitd.ac.in; piyus@iiitd.ac.in; rahul@unl.edu
OI Chitre, Khushboo/0000-0001-6950-1055; Purandare,
   Rahul/0000-0001-8677-0601
FU TCS Foundation
FX We would like to thank the anonymous reviewers for their valuable
   feedback, that helped improve the presentation of the paper. The first
   author would like to acknowledge TCS Foundation for supporting her
   research through the TCS Research Scholar Program.
CR Alves P, 2015, ACM SIGPLAN NOTICES, V50, P589, DOI 10.1145/2814270.2814285
   Andersen Lars Ole, 2005, Program Analysis and Specialization for the C Programming Language
   [Anonymous], 2016, Intel 64 and ia-32 architectures software developer's manual, V2b
   [Anonymous], 2019, Restrict Keyword in LLVM
   [Anonymous], 2022, Runtime Checks of Pointers
   [Anonymous], 2022, Intrinsic Functions
   [Anonymous], 2022, noalias' and 'alias.scope' Metadata
   [Anonymous], 2021, CPU SPEC 2017 benchmark suite
   Berndl M, 2003, ACM SIGPLAN NOTICES, V38, P103, DOI 10.1145/780822.781144
   Bondhugula U, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P101, DOI 10.1145/1375581.1375595
   Bucek J, 2018, COMPANION OF THE 2018 ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING (ICPE '18), P41, DOI 10.1145/3185768.3185771
   Chen T, 2004, LECT NOTES COMPUT SC, V2985, P57
   Chitre Khushboo, 2022, Zenodo, DOI 10.5281/ZENODO.7089827
   Chow F, 1997, ACM SIGPLAN NOTICES, V32, P273, DOI 10.1145/258916.258940
   COOPER KD, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P49, DOI 10.1145/75277.75282
   Da Silva J, 2006, ACM SIGPLAN NOTICES, V41, P416, DOI 10.1145/1168918.1168908
   Diwan A, 1998, ACM SIGPLAN NOTICES, V33, P106, DOI 10.1145/277652.277670
   Doerfert J, 2017, INT SYM CODE GENER, P292, DOI 10.1109/CGO.2017.7863748
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P313, DOI 10.1007/BF01407835
   Fernández M, 2002, 2002 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P222, DOI 10.1109/PACT.2002.1106020
   Hardekopf B, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P290, DOI 10.1145/1250734.1250767
   Hardekopf B, 2011, INT SYM CODE GENER, P289, DOI 10.1109/CGO.2011.5764696
   Hardekopf B, 2009, ACM SIGPLAN NOTICES, V44, P226, DOI 10.1145/1594834.1480911
   Hind M, 1999, ACM T PROGR LANG SYS, V21, P848, DOI 10.1145/325478.325519
   HUANG AS, 1994, CONF PROC INT SYMP C, P200
   Jaiswal S, 2018, Arxiv, DOI arXiv:1802.00932
   Karrenberg R, 2011, INT SYM CODE GENER, P141, DOI 10.1109/CGO.2011.5764682
   LANDI W., 1992, Lett. Program. Lang. Syst, V1, P4, DOI [10.1145/161494.161501, DOI 10.1145/161494.161501]
   Lattner C, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P278, DOI 10.1145/1250734.1250766
   Lin J, 2003, ACM SIGPLAN NOTICES, V38, P289, DOI 10.1145/780822.781164
   Lvin VB, 2008, ACM SIGPLAN NOTICES, V43, P115, DOI 10.1145/1353536.1346296
   Naishlos D., 2004, P 2004 GCC DEV SUMM, P105
   Nazaré H, 2014, ACM SIGPLAN NOTICES, V49, P791, DOI [10.1145/2714064.2660205, 10.1145/2660193.2660205]
   Paisante V, 2016, INT SYM CODE GENER, P171, DOI 10.1145/2854038.2854050
   Pearce DJ, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1290520.1290524
   RAMALINGAM G, 1994, ACM T PROGR LANG SYS, V16, P1467, DOI 10.1145/186025.186041
   Rugina R, 2000, ACM SIGPLAN NOTICES, V35, P182, DOI 10.1145/358438.349325
   Sampaio Diogo N., 2017, P INT C SUP ICS 17, DOI [10.1145/3079079.3079098, DOI 10.1145/3079079.3079098]
   Scout Artifact Github Repository, 2022, About us
   Shapiro M., 1997, Static Analysis. 4th International Symposium, SAS '97 Proceedings, P16, DOI 10.1007/BFb0032731
   Campos VHS, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P163, DOI 10.1145/2892208.2892225
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Surendran Rishi, 2014, Inter-iteration Scalar Replacement Using Array SSA Form
   Van Engelen R., 2000, Technical Report
   van Engelen R. A., 2001, Compiler Construction. 10th International Conference, CC 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2027), P118
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   Zheng X, 2008, ACM SIGPLAN NOTICES, V43, P197, DOI 10.1145/1328897.1328464
   Zhu JW, 2005, DES AUT CON, P831, DOI 10.1109/DAC.2005.193930
NR 48
TC 3
Z9 3
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 153
DI 10.1145/3563316
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200030
OA gold
DA 2024-07-18
ER

PT J
AU Dalvandi, S
   Dongol, B
AF Dalvandi, Sadegh
   Dongol, Brijesh
TI Implementing and Verifying Release-Acquire Transactional Memory in C11
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Weak Memory; Transactional Memory; C11; Verification; Refinement
ID LINEARIZABILITY
AB Transactional memory (TM) is an intensively studied synchronisation paradigm with many proposed implementations in software and hardware, and combinations thereof. However, TM under relaxed memory, e.g., C11 (the 2011 C/C++ standard) is still poorly understood, lacking rigorous foundations that support verifiable implementations. This paper addresses this gap by developing TMS2-RA, a relaxed operational TM specification. We integrate TMS2-RA with RC11 (the repaired C11 memory model that disallows load-buffering) to provide a formal semantics for TM libraries and their clients. We develop a logic, TARO, for verifying client programs that use TMS2-RA for synchronisation. We also show how TMS2-RA can be implemented by a C11 library, TML-RA, that uses relaxed and release-acquire atomics, yet guarantees the synchronisation properties required by TMS2-RA. We benchmark TML-RA and show that it outperforms its sequentially consistent counterpart in the STAMP benchmarks. Finally, we use a simulation-based verification technique to prove correctness of TML-RA. Our entire development is supported by the Isabelle/HOL proof assistant.
C1 [Dalvandi, Sadegh; Dongol, Brijesh] Univ Surrey, Guildford, Surrey, England.
C3 University of Surrey
RP Dalvandi, S (corresponding author), Univ Surrey, Guildford, Surrey, England.
EM m.dalvandi@surrey.ac.uk; b.dongol@surrey.ac.uk
OI Dongol, Brijesh/0000-0003-0446-3507
FU EPSRC [EP/R025134/2, EP/V038915/1, EP/R032556/1]; ARC [DP190102142];
   VeTSS
FX The authors would also like to thank the Eleni Vafeiadi Bila and
   anonymous referees for their valuable comments and helpful suggestions.
   Dalvandi and Dongol are supported by EPSRC Grant EP/R032556/1. Dongol is
   additionally supported by EPSRC Grant EP/V038915/1, EPSRC Grant
   EP/R025134/2, ARC Grant DP190102142 and VeTSS.
CR Abdulla PA, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1117, DOI 10.1145/3314221.3314649
   Alglave J, 2017, ACM SIGPLAN NOTICES, V52, P3, DOI 10.1145/3093333.3009883
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Armstrong Alasdair, 2017, Formal Techniques for Distributed Objects, Components and Systems. 37th IFIP WG 6.1 International Conference, FORTE 2017, held as part of the 12th International Federated Conference on Distributed Computing Techniques, DisCoTec 2017. Proceedings: LNCS 10321, P33, DOI 10.1007/978-3-319-60225-7_3
   Armstrong Alasdair, 2017, Formal Techniques for Distributed Objects, Components and Systems. 37th IFIP WG 6.1 International Conference, FORTE 2017, held as part of the 12th International Federated Conference on Distributed Computing Techniques, DisCoTec 2017. Proceedings: LNCS 10321, P50, DOI 10.1007/978-3-319-60225-7_4
   Assa G., 2021, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V30, P1
   Assa G, 2020, PROCEEDINGS OF THE 25TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '20), P405, DOI 10.1145/3332466.3374514
   Attiya H, 2018, J ACM, V65, DOI 10.1145/3131360
   Batty M, 2016, ACM SIGPLAN NOTICES, V51, P634, DOI 10.1145/2914770.2837637
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Beillahi SM, 2021, LOG METH COMPUT SCI, V17, DOI 10.23638/LMCS-17(1:12)2021
   Beillahi SM, 2021, LECT NOTES COMPUT SC, V12648, P87, DOI 10.1007/978-3-030-72019-3_4
   Bila EV, 2022, LECT NOTES COMPUT SC, V13240, P234, DOI 10.1007/978-3-030-99336-8_9
   Böhme S, 2010, LECT NOTES ARTIF INT, V6173, P107, DOI 10.1007/978-3-642-14203-1_9
   Bronson NG, 2010, PODC 2010: PROCEEDINGS OF THE 2010 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P6, DOI 10.1145/1835698.1835703
   Chi Cao Minh, 2008, 2008 IEEE International Symposium on Workload Characterization (IISWC), P35, DOI 10.1109/IISWC.2008.4636089
   Chong N, 2018, ACM SIGPLAN NOTICES, V53, P211, DOI 10.1145/3192366.3192373
   cppreference.com, 2022, std::atomic_compare_exchange
   Dalessandro L, 2010, LECT NOTES COMPUT SC, V6272, P2, DOI 10.1007/978-3-642-15291-7_2
   Dalvandi S., 2020, Dagstuhl Artifacts Ser., V6, p15:1, DOI [10.4230/DARTS.6.2.15, DOI 10.4230/DARTS.6.2.15]
   Dalvandi S., arXiv, DOI [10.48550/ARXIV.2208.00315, DOI 10.48550/ARXIV.2208.00315]
   Dalvandi Sadegh, 2022, Zenodo, DOI 10.5281/ZENODO.6899919
   Dalvandi S, 2022, J AUTOM REASONING, V66, P141, DOI 10.1007/s10817-021-09610-2
   Dalvandi Sadegh, 2020, ECOOP, V166, DOI [DOI 10.4230/LIPICS.ECOOP.2020, 10.4230/LIPIcs.ECOOP.2020.]
   de Roever Willem-Paul, 1998, Data Refinement Model-Oriented Proof methods and their Comparison
   Derrick J, 2018, FORM ASP COMPUT, V30, P597, DOI 10.1007/s00165-017-0433-3
   Dice D, 2006, LECT NOTES COMPUT SC, V4167, P194
   Doherty S., 2016, Schloss Dagstuhl-LeibnizZentrum fuer Informatik, V35, P1
   Doherty S, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P355, DOI 10.1145/3293883.3295702
   Doherty S, 2018, LECT NOTES COMPUT SC, V11023, P110, DOI 10.1007/978-3-319-98938-9_7
   Doherty S, 2013, FORM ASP COMPUT, V25, P769, DOI 10.1007/s00165-012-0225-8
   Doko M, 2017, LECT NOTES COMPUT SC, V10201, P448, DOI 10.1007/978-3-662-54434-1_17
   Dolan S, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P242, DOI 10.1145/3192366.3192421
   Dongol B., 2018, POPL, V18, P1
   Dongol B, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P82, DOI 10.1145/3293883.3295708
   Dongol B, 2018, LECT NOTES COMPUT SC, V10747, P183, DOI 10.1007/978-3-319-73721-8_9
   Dongol B, 2016, LECT NOTES COMPUT SC, V10009, P261, DOI 10.1007/978-3-319-47846-3_17
   Emmi M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290373
   Gotsman A, 2011, LECT NOTES COMPUT SC, V6756, P453, DOI 10.1007/978-3-642-22012-8_36
   Guerraoui R., 2010, Principles of Transactional Memory
   He MD, 2016, EUROMICRO WORKSHOP P, P520, DOI 10.1109/PDP.2016.103
   HERLIHY M, 1993, CONF PROC INT SYMP C, P289, DOI 10.1145/173682.165164
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Dang HH, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P792, DOI 10.1145/3519939.3523451
   Jagadeesan R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428262
   Kaiser Jan-Oliver, 2017, EUR C OBJ OR PROGR E, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.17, 10.4230/LIPIcs.ECOOP.2017]
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Khyzha A, 2022, LECT NOTES COMPUT SC, V13240, P262, DOI 10.1007/978-3-030-99336-8_10
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   Krishna S, 2020, LECT NOTES COMPUT SC, V12075, P280, DOI 10.1007/978-3-030-44914-8_11
   Lahav O, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485475
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lahav O, 2015, LECT NOTES COMPUT SC, V9135, P311, DOI 10.1007/978-3-662-47666-6_25
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lee SH, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P362, DOI 10.1145/3385412.3386010
   Lesani M., 2012, WTTM
   Lesani M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527324
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Margalit R, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434285
   Matveev A, 2015, ACM SIGPLAN NOTICES, V50, P59, DOI [10.1145/10.1145/2694344.2694393, 10.1145/2775054.2694393]
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Paviotti M, 2020, LECT NOTES COMPUT SC, V12075, P599, DOI 10.1007/978-3-030-44914-8_22
   Podkopaev A, 2016, Arxiv, DOI arXiv:1606.01400
   Raad Azalea, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P940, DOI 10.1007/978-3-319-89884-1_33
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290381
   Raad A, 2019, LECT NOTES COMPUT SC, V11388, P1, DOI 10.1007/978-3-030-11245-5_1
   Rodriguez Matthew, 2020, PODC '20. Proceedings of the 39th Symposium on Principles of Distributed Computing, P224, DOI 10.1145/3382734.3405746
   Scargall S., 2020, Programming Persistent Memory: A Comprehensive Guide for Developers, DOI [10.1007/978-1-4842-4932-1_8, DOI 10.1007/978-1-4842-4932-1_8]
   Sela G, 2021, PROCEEDINGS OF THE 2021 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC '21), P561, DOI 10.1145/3465084.3467944
   Shavit N, 1997, DISTRIB COMPUT, V10, P99, DOI 10.1007/s004460050028
   Spear M., 2020, Technical Report
   Summers AJ, 2018, LECT NOTES COMPUT SC, V10805, P190, DOI 10.1007/978-3-319-89960-2_11
   Svendsen Kasper, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P357, DOI 10.1007/978-3-319-89884-1_13
   Tassarotti J, 2015, ACM SIGPLAN NOTICES, V50, P110, DOI [10.1145/2737924.2737992, 10.1145/2813885.2737992]
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Vafeiadis V, 2013, ACM SIGPLAN NOTICES, V48, P867, DOI [10.1145/2544173.2509532, 10.1145/2509136.2509532]
   Wright D, 2021, LECT NOTES COMPUT SC, V13047, P237, DOI 10.1007/978-3-030-90870-6_13
   Xiong S., 2020, 34 EUROPEAN C OBJECT, V21, P1, DOI 10.4230/LIPIcs.ECOOP.2020.21
   Zardoshti P, 2019, ACM T ARCHIT CODE OP, V16, DOI 10.1145/3328796
NR 79
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 189
DI 10.1145/3563352
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200066
OA gold
DA 2024-07-18
ER

PT J
AU Li, LY
   Voichick, F
   Hietala, K
   Peng, YX
   Wu, XD
   Hicks, M
AF Li, Liyi
   Voichick, Finn
   Hietala, Kesha
   Peng, Yuxiang
   Wu, Xiaodi
   Hicks, Michael
TI Verified Compilation of Quantum Oracles
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Quantum Oracle; Programming Language Design; Type System; Compiler
   Verification
ID FOURIER-TRANSFORM; ALGORITHM
AB Quantum algorithms often apply classical operations, such as arithmetic or predicate checks, over a quantum superposition of classical data; these so-called oracles are often the largest components of a quantum program. To ease the construction of efficient, correct oracle functions, this paper presents VQO, a high-assurance framework implemented with the Coq proof assistant. The core of VQO is OQASM, the oracle quantum assembly language. OQASM operations move qubits between two different bases via the quantum Fourier transform, thus admitting important optimizations, but without inducing entanglement and the exponential blowup that comes with it. OQASM's design enabled us to prove correct VQO's compilers-from a simple imperative language called OQIMP to OQASM, and from OQASM to sqir, a general-purpose quantum assembly language-and allowed us to efficiently test properties of OQASM programs using the QuickChick property-based testing framework. We have used VQO to implement a variety of arithmetic and geometric operators that are building blocks for important oracles, including those used in Shor's and Grover's algorithms. We found that VQO's QFT-based arithmetic oracles require fewer qubits, sometimes substantially fewer, than those constructed using "classical" gates; VQO's versions of the latter were nevertheless on par with or better than (in terms of both qubit and gate counts) oracles produced by Quipper, a state-of-the-art but unverified quantum programming platform.
C1 [Li, Liyi; Voichick, Finn; Hietala, Kesha; Peng, Yuxiang; Wu, Xiaodi; Hicks, Michael] Univ Maryland, College Pk, MD 20742 USA.
   [Hicks, Michael] Amazon, Seattle, WA USA.
C3 University System of Maryland; University of Maryland College Park;
   Amazon.com
RP Li, LY (corresponding author), Univ Maryland, College Pk, MD 20742 USA.
EM liyili2@umd.edu; finn@umd.edu; kesha@cs.umd.edu; ypeng15@umd.edu;
   xwu@cs.umd.edu; mwh@cs.umd.edu
RI Peng, YuXiang/ADP-1617-2022
OI Voichick, Finn/0000-0002-1913-4178; Hietala, Kesha/0000-0002-2724-0974;
   Wu, Xiaodi/0000-0001-8877-9802; Peng, Yuxiang/0000-0003-0592-7131;
   Hicks, Michael/0000-0002-2759-9223; Li, Liyi/0000-0001-8184-0244
FU U.S. Department of Energy, Office of Science, Office of Advanced
   Scientific Computing Research, Quantum Testbed Pathfinder Program
   [DE-SC0019040]; Air Force Office of Scientific Research [FA95502110051,
   FA95502110209]
FX We thank Leonidas Lampropoulos for helping us with effective use of
   QuickChick, and Aaron Green and Robert Rand for helpful comments and
   contributions during the development of this work. This material is
   based upon work supported by the U.S. Department of Energy, Office of
   Science, Office of Advanced Scientific Computing Research, Quantum
   Testbed Pathfinder Program under Award Number DE-SC0019040, and the Air
   Force Office of Scientific Research under Grant No. FA95502110051 and
   FA95502110209.
CR Abhari Ali, 2012, Scaffold: quantum programming language
   Amy M, 2017, LECT NOTES COMPUT SC, V10427, P3, DOI 10.1007/978-3-319-63390-9_1
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Barenco A, 1996, PHYS REV A, V54, P139, DOI 10.1103/PhysRevA.54.139
   Beauregard S, 2003, QUANTUM INF COMPUT, V3, P175
   Bernstein D.J., 2008, Workshop Record of SASC 2008-The State of the Art of Stream Ciphers, P273
   Bernstein DJ, 2010, LECT NOTES COMPUT SC, V6061, P73, DOI 10.1007/978-3-642-12929-2_6
   Bichsel B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P286, DOI 10.1145/3385412.3386007
   Burgholzer L, 2021, Arxiv, DOI [arXiv:2105.07045, DOI 10.48550/ARXIV.2105.07045]
   Chareton C, 2021, LECT NOTES COMPUT SC, V12648, P148, DOI 10.1007/978-3-030-72019-3_6
   Childs AM, 2010, COMMUN MATH PHYS, V294, P581, DOI 10.1007/s00220-009-0930-1
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Cross A., 2018, APS MARCH M ABSTRACT, V63, pL58
   Draper T.G., 2000, ARXIV
   FEYNMAN RP, 1982, INT J THEOR PHYS, V21, P467, DOI 10.1007/BF02650179
   Gidney C, 2021, QUANTUM-AUSTRIA, V5, DOI 10.22331/q-2021-04-15-433
   Google Quantum AI, 2019, Cirq: An Open Source Framework for Programming Quantum Computers
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Grover LK, 1997, PHYS REV LETT, V79, P325, DOI 10.1103/PhysRevLett.79.325
   Hales L, 2000, ANN IEEE SYMP FOUND, P515, DOI 10.1109/SFCS.2000.892139
   Hietala K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434318
   Hietala Kesha, 2021, 12 INT C INTERACTIVE, V21, P1, DOI [DOI 10.4230/LIPICS.ITP, 10.4230/LIPIcs. ITP.2021.21, DOI 10.4230/LIPICS.ITP.2021.21, 10.4230/LIPIcs.ITP.2021.21]
   Langley A., 2016, Tech. Rep. RFC 7905, DOI [DOI 10.17487/RFC7905, 10.17487/RFC7905]
   Li LY, 2022, Arxiv, DOI [arXiv:2112.06700, 10.48550/ARXIV.2112.06700, DOI 10.48550/ARXIV.2112.06700]
   Li Liyi, 2022, Zenodo, DOI 10.5281/ZENODO.7068972
   Litteken A, 2020, QUANTUM SCI TECHNOL, V5, DOI 10.1088/2058-9565/ab8c2c
   Markov IL, 2012, QUANTUM INF COMPUT, V12, P361
   Microsoft, 2017, The Q# Programming Language
   Nam Y, 2020, NPJ QUANTUM INFORM, V6, DOI 10.1038/s41534-020-0257-5
   Nielsen M. A, 2011, Quantum Computation and Quantum Information: 10th Anniversary Edition
   Paradis A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P222, DOI 10.1145/3453483.3454040
   Paraskevopoulou Z, 2015, LECT NOTES COMPUT SC, V9236, P325, DOI 10.1007/978-3-319-22102-1_22
   Peng Yuxiang., 2022, A Formally Certified End-to-End Implementation of Shor's Factorization Algorithm, DOI [10.48550/ARXIV.2204.07112, DOI 10.48550/ARXIV.2204.07112]
   Rand R, 2019, ELECTRON P THEOR COM, P299, DOI 10.4204/EPTCS.287.17
   Rand Robert, 2018, Ph. D. Dissertation
   Rescorla E., 2018, RFC 8446, DOI [10.17487/RFC8446, DOI 10.17487/RFC8446]
   Rigetti Computing, 2019, The @rigetti optimizing Quil compiler
   Rigetti Computing, 2021, PyQuil: Quantum programming in Python
   Shi YN, 2020, Arxiv, DOI arXiv:1908.08963
   SHOR PW, 1994, AN S FDN CO, P124
   Somma Rolando, 2020, Scientific American
   Cross AW, 2017, Arxiv, DOI arXiv:1707.03429
   Wilkins Angela, 2021, The Way I See It: The State of Quantum Computing
   Xiaoning Bian, 2020, Compile Quipper quantum circuit to OpenQasm 2.0 program
NR 45
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 146
DI 10.1145/3563309
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200023
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Li, JL
   Lattuada, A
   Zhou, Y
   Cameron, J
   Howell, J
   Parno, B
   Hawblitzel, C
AF Li, Jialin
   Lattuada, Andrea
   Zhou, Yi
   Cameron, Jonathan
   Howell, Jon
   Parno, Bryan
   Hawblitzel, Chris
TI Linear Types for Large-Scale Systems Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE linear types; systems verification
AB Reasoning about memory aliasing and mutation in software verification is a hard problem. This is especially true for systems using SMT-based automated theorem provers. Memory reasoning in SMT verification typically requires a nontrivial amount of manual effort to specify heap invariants, as well as extensive alias reasoning from the SMT solver. In this paper, we present a hybrid approach that combines linear types with SMT-based verification for memory reasoning. We integrate linear types into Dafny, a verification language with an SMT backend, and show that the two approaches complement each other. By separating memory reasoning from verification conditions, linear types reduce the SMT solving time. At the same time, the expressiveness of SMT queries extends the flexibility of the linear type system. In particular, it allows our linear type system to easily and correctly mix linear and nonlinear data in novel ways, encapsulating linear data inside nonlinear data and vice-versa. We formalize the core of our extensions, prove soundness, and provide algorithms for linear type checking. We evaluate our approach by converting the implementation of a verified storage system (similar to 24K lines of code and proof) written in Dafny, to use our extended Dafny. The resulting system uses linear types for 91% of the code and SMT-based heap reasoning for the remaining 9%. We show that the converted system has 28% fewer lines of proofs and 30% shorter verification time overall. We discuss the development overhead in the original system due to SMT-based heap reasoning and highlight the improved developer experience when using linear types.
C1 [Li, Jialin] Univ Washington, Seattle, WA 98195 USA.
   [Lattuada, Andrea] Swiss Fed Inst Technol, Zurich, Switzerland.
   [Zhou, Yi; Cameron, Jonathan; Parno, Bryan] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Howell, Jon] VMware Res, Palo Alto, CA USA.
   [Hawblitzel, Chris] Microsoft Res, Redmond, WA USA.
C3 University of Washington; University of Washington Seattle; Swiss
   Federal Institutes of Technology Domain; ETH Zurich; Carnegie Mellon
   University; VMware, Inc.; Microsoft
RP Li, JL (corresponding author), Univ Washington, Seattle, WA 98195 USA.
OI Howell, Jon/0000-0002-1781-2473; Parno, Bryan/0000-0002-9113-1684; Zhou,
   Yi/0000-0001-7597-1176; Lattuada, Andrea/0000-0002-9303-452X;
   Hawblitzel, Chris/0000-0002-5676-0362; Li, Jialin/0000-0002-2117-1947
FU National Science Foundation [DGE-1762114]; Google Faculty Fellowship;
   Alfred P. Sloan Foundation; Intel Corporation; Google PhD Fellowship
FX We would like to thank Oded Padon and the anonymous reviewers for many
   suggestions that improved the paper. This work is partially supported by
   the National Science Foundation grant DGE-1762114. Work at CMU was
   supported, in part, by a gift from VMware, a Google Faculty Fellowship,
   the Alfred P. Sloan Foundation, and the Intel Corporation. Andrea
   Lattuada is supported by a Google PhD Fellowship.
CR Amani Sidney, 2016, P ACM C ARCH SUPP PR
   Astrauskas V, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360573
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Bender Michael A, 2015, USENIX, V40, P22
   Berdine Josh., 2011, C COMP AID VER CAV
   Bhardwaj A, 2021, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '21), P295
   Boos K, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P1
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Fluet M, 2006, LECT NOTES COMPUT SC, V3924, P7
   Fromherz Aymeric, STEEL PROOF ORIENTED
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Hance T, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P99
   Hance Travis, 2020, VERIBETRKV OSDI2020
   Hawblitzel C., 2014, 11 USENIX S OPERATIN
   Hawblitzel C, 2015, LECT NOTES COMPUT SC, V9207, P449, DOI 10.1007/978-3-319-21668-3_26
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Kassios IT, 2006, LECT NOTES COMPUT SC, V4085, P268
   Klabnik S., 2018, The Rust Programming Language
   Klein G, 2014, ACM T COMPUT SYST, V32, DOI 10.1145/2560537
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Narayanan V, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P21
   Patterson Daniel, 2019, ABS190300982 CORR, DOI [10.48550/ARXIV.1903.00982, DOI 10.48550/ARXIV.1903.00982]
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Swamy N, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409003
   Tofte Mads, 1994, P 21 ACM SIGPLAN SIG, P188, DOI DOI 10.1145/174675.177855
   Wadler Philip, 1990, P IFIP TC 2WORKING C
   Walker D, 2001, ACM SIGPLAN NOTICES, V36, P181, DOI 10.1145/507669.507658
   Yanovski J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473597
NR 33
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 69
DI 10.1145/3527313
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300005
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Ikebuchi, M
   Erbsen, A
   Chlipala, A
AF Ikebuchi, Mirai
   Erbsen, Andres
   Chlipala, Adam
TI Certifying Derivation of State Machines from Coroutines
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE coroutines; interaction trees; proof assistants; program derivation;
   nested state machines; cryptographic protocols
AB One of the biggest implementation challenges in security-critical network protocols is nested state machines. In practice today, state machines are either implemented manually at a low level, risking bugs easily missed in audits; or are written using higher-level abstractions like threads, depending on runtime systems that may sacrifice performance or compatibility with the ABIs of important platforms (e.g., resource-constrained IoT systems). We present a compiler-based technique allowing the best of both worlds, coding protocols in a natural high-level form, using freer monads to represent nested coroutines, which are then compiled automatically to lower-level code with explicit state. In fact, our compiler is implemented as a tactic in the Coq proof assistant, structuring compilation as search for an equivalence proof for source and target programs. As such, it is straightforwardly (and soundly) extensible with new hints, for instance regarding new data structures that may be used for efficient lookup of coroutines. As a case study, we implemented a core of TLS sufficient for use with popular Web browsers, and our experiments show that the extracted Haskell code achieves reasonable performance.
C1 [Ikebuchi, Mirai] Natl Inst Informat, Tokyo, Japan.
   [Erbsen, Andres; Chlipala, Adam] MIT CSAIL, Cambridge, MA USA.
C3 Research Organization of Information & Systems (ROIS); National
   Institute of Informatics (NII) - Japan; Massachusetts Institute of
   Technology (MIT)
RP Ikebuchi, M (corresponding author), Natl Inst Informat, Tokyo, Japan.
EM ikebuchi@nii.ac.jp; andreser@mit.edu; adamc@csail.mit
FU National Science Foundation Expedition on the Science of Deep
   Specification [CCF-1521584]
FX This work was supported in part within the National Science Foundation
   Expedition on the Science of Deep Specification (award CCF-1521584), in
   addition to gifts from AmazonWeb Services, Google, and the Tezos
   Foundation.
CR Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Belson B, 2019, ACM T EMBED COMPUT S, V18, DOI 10.1145/3319618
   Bendersky Eli., 2009, COROUTINES ALTERNATI
   Beringer L, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P207
   Beurdouche B, 2015, P IEEE S SECUR PRIV, P535, DOI 10.1109/SP.2015.39
   Blanchet B, 2006, P IEEE S SECUR PRIV, P140, DOI 10.1109/SP.2006.1
   Chlipala Adam., 2021, P ICFP
   De Moura AL, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1462166.1462167
   de Ruiter J, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P193
   Delaware B, 2015, ACM SIGPLAN NOTICES, V50, P689, DOI [10.1145/2775051.2677006, 10.1145/2676726.2677006]
   Delaware Benjamin, 2019, P ICFP
   Engelschall R. S., 2000, P ANN C USENIX ANN T, P20
   Erbsen A, 2019, P IEEE S SECUR PRIV, P1202, DOI 10.1109/SP.2019.00005
   James Roshan P, 2011, 1 INT WORKSH THEOR P
   Kaloper-Mersinjak D, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P223
   Kawahara Satoru, 2020, TRENDS FUNCTIONAL PR, P158
   Kikuchi Masashi, 2014, I DISCOVERED CCS INJ
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Koh N, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P234, DOI 10.1145/3293880.3294106
   Langley Adam, 2014, EARLY CHANGECIPHERSP
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   MANDRY T., 2019, How Rust optimizes async/await I
   Nishanov Gor., 2018, N4760 WORKING DRAFT
   Petcher Adam, 2015, Principles of Security and Trust. 4th International Conference, POST 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9036, P53, DOI 10.1007/978-3-662-46666-7_4
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   Pit-Claudel Clement, 2020, 10 INT JOINT C AUTOM, V2167, P119, DOI [10.1007/978-3-030-51054-1_7, DOI 10.1007/978-3-030-51054-1_7]
   Plotkin G, 2008, IEEE S LOG, P118, DOI 10.1109/LICS.2008.45
   Prokopec A., 2018, PROC 32 EUR C OBJECT, P1, DOI [10.4230/LIPIcs.ECOOP.2018.3, DOI 10.4230/LIPICS.ECOOP.2018.3]
   Protzenko J, 2020, P IEEE S SECUR PRIV, P983, DOI 10.1109/SP40000.2020.00114
   Reinking A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P96, DOI 10.1145/3453483.3454032
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Smith Richard, 2019, COROUTINES LANGUAGE
   Ullrich Sebastian., 2020, INT S IMPL APPL FUNC
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Yadav Tarun, 2019, SECURITY COMPUTING C, P348
   Ye KQ, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2007, DOI 10.1145/3133956.3133974
   Zhang Hengchu., 2021, 12 INT C INTERACTIVE, V193, p32:1, DOI DOI 10.4230/LIPICS.ITP.2021.32
NR 37
TC 1
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 24
DI 10.1145/3498685
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900025
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Brown, MD
   Pruett, M
   Bigelow, R
   Mururu, G
   Pande, S
AF Brown, Michael D.
   Pruett, Matthew
   Bigelow, Robert
   Mururu, Girish
   Pande, Santosh
TI Not So Fast: Understanding and Mitigating Negative Impacts of Compiler
   Optimizations on Code Reuse Gadget Sets
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Compilers; Code generation; Code optimization; Computer security;
   Software security; Code reuse attacks; Code reuse gadgets; Binary
   recompilation
AB Despite extensive testing and correctness certification of their functional semantics, a number of compiler optimizations have been shown to violate security guarantees implemented in source code. While prior work has shed light on how such optimizations may introduce semantic security weaknesses into programs, there remains a significant knowledge gap concerning the impacts of compiler optimizations on non-semantic properties with security implications. In particular, little is currently known about how code generation and optimization decisions made by the compiler affect the availability and utility of reusable code segments called gadgets required for implementing code reuse attack methods such as return-oriented programming.
   In this paper, we bridge this gap through a study of the impacts of compiler optimization on code reuse gadget sets. We analyze and compare 1,187 variants of 20 different benchmark programs built with two production compilers (GCC and Clang) to determine how their optimization behaviors affect the code reuse gadget sets present in program variants with respect to both quantitative and qualitative metrics. Our study exposes an important and unexpected problem; compiler optimizations introduce new gadgets at a high rate and produce code containing gadget sets that are generally more useful to an attacker than those in unoptimized code. Using differential binary analysis, we identify several undesirable behaviors at the root of this phenomenon. In turn, we propose and evaluate several strategies to mitigate these behaviors. In particular, we show that post-production binary recompilation can effectively mitigate these behaviors with negligible performance impacts, resulting in optimized code with significantly smaller and less useful gadget sets.
C1 [Brown, Michael D.; Bigelow, Robert; Mururu, Girish; Pande, Santosh] Georgia Inst Technol, Sch Comp Sci, Atlanta, GA 30332 USA.
   [Pruett, Matthew] Georgia Inst Technol, Sch Elect & Comp Engn, Atlanta, GA 30332 USA.
C3 University System of Georgia; Georgia Institute of Technology;
   University System of Georgia; Georgia Institute of Technology
RP Brown, MD (corresponding author), Georgia Inst Technol, Sch Comp Sci, Atlanta, GA 30332 USA.
EM mbrown337@gatech.edu; matthew.pruett@gtri.gatech.edu;
   rbigelow3@gatech.edu; girishmururu@gatech.edu;
   santosh.pande@cc.gatech.edu
OI Brown, Michael/0000-0002-5289-0856; Pande, Santosh/0000-0001-6723-8062
CR ABADI M, 2005, ACM T INFORM SYST SE, V5, P340, DOI [DOI 10.1145/1609956.1609960, DOI 10.1145/1102120.1102165]
   Angelini M., 2018, IEEE SYM VIS CYB SEC, P1, DOI [10.1109/VIZSEC, 10.1109/VIZSEC.2018.8709204]
   Quach A, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P869
   [Anonymous], 2012, P 6 USENIX C OFFENSI
   [Anonymous], 2016, ESSOS 2016, DOI DOI 10.1007/978-3-319-30806-7_10
   Belleville N, 2019, ACM T ARCHIT CODE OP, V15, DOI 10.1145/3281662
   Besson F, 2018, PLAS'18: PROCEEDINGS OF THE 13TH WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY, P29, DOI 10.1145/3264820.3264822
   Bletsch T., 2011, P 6 ACM S INF COMP C, P30
   Bletsch T, 2011, 27TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2011), P353, DOI 10.1145/2076732.2076783
   Brown M.D., 2019, 12 USENIX WORKSHOP C
   Brown Michael D., 2021, PACMPL OOPSLA, V21, DOI [10.5281/zenodo.5424844, DOI 10.5281/ZENODO.5424844]
   Brown Michael D., 2021, COMPILER OPTIMIZATIO
   Brown Michael D., 2021, GSA GADGET CRITERIA
   Brown Michael D., 2020, GADGETSETANALYZER
   Carlini N, 2014, PROCEEDINGS OF THE 23RD USENIX SECURITY SYMPOSIUM, P385
   Carlini N, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P161
   Checkoway S, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P559, DOI 10.1145/1866307.1866370
   Chen P, 2009, LECT NOTES COMPUT SC, V5905, P163, DOI 10.1007/978-3-642-10772-6_13
   Conti M, 2015, CCS'15: PROCEEDINGS OF THE 22ND ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P952, DOI 10.1145/2810103.2813671
   D'Silva V, 2015, 2015 IEEE SECURITY AND PRIVACY WORKSHOPS (SPW), P73, DOI 10.1109/SPW.2015.33
   Davi L, 2014, PROCEEDINGS OF THE 23RD USENIX SECURITY SYMPOSIUM, P401
   Davi Lucas., 2011, P 6 ACM S INFORM COM, P40, DOI DOI 10.1145/1966913.1966920
   Davi Lucas., 2009, Proceedings of the 2009 ACM Workshop on Scalable Trusted Computing, STC '09, P49
   Deng CQ, 2018, FORM METHOD SYST DES, V53, P166, DOI 10.1007/s10703-017-0313-8
   Deng CQ, 2017, LECT NOTES COMPUT SC, V10422, P88, DOI 10.1007/978-3-319-66706-5_5
   Evans I, 2015, CCS'15: PROCEEDINGS OF THE 22ND ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P901, DOI 10.1145/2810103.2813646
   Follner A., 2016, SECURITY TRUST MANAG
   Grant B, 1999, ACM SIGPLAN NOTICES, V34, P293, DOI 10.1145/301631.301683
   Hawkins B, 2016, INT SYM CODE GENER, P261, DOI 10.1145/2854038.2854062
   Hex Rays, 2020, Ida pro
   Kayaalp M, 2012, CONF PROC INT SYMP C, P94, DOI 10.1109/ISCA.2012.6237009
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lee H, 2006, SOFTWARE PRACT EXPER, V36, P835, DOI [10.1002/spe.718, 10.1002/spc.718]
   Li JK, 2010, EUROSYS'10: PROCEEDINGS OF THE EUROSYS 2010 CONFERENCE, P195
   Lim JP, 2017, PROCEEDINGS OF THE 2017 WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS' 17), P37, DOI 10.1145/3139337.3139343
   McFarling S., 1986, 13th Annual International Symposium on Computer Architecture (Cat. No.86CH2291-3), P396
   Muntean P, 2019, 35TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSA), P584, DOI 10.1145/3359789.3359806
   Onarlioglu K, 2010, 26TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2010), P49
   PaX, 2020, ADDR SPAC LAYOUT RAN
   Porter C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P164, DOI 10.1145/3385412.3386017
   Proy J, 2017, ACM T ARCHIT CODE OP, V14, DOI 10.1145/3141234
   Sadeghi A, 2018, J COMPUT VIROL HACKI, V14, P139, DOI 10.1007/s11416-017-0299-1
   Salwan Jonathan, 2020, ROPGADGET GADGETS FI
   Schwartz E.J., 2011, USENIX Security Symposium, P25
   Shacham H, 2007, CCS'07: PROCEEDINGS OF THE 14TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P552
   Simon L, 2018, 2018 3RD IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P 2018), P1, DOI 10.1109/EuroSP.2018.00009
   van der Veen V, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1675, DOI 10.1145/3133956.3134026
   Williams-King D, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P133, DOI 10.1145/3373376.3378470
   Yang ZM, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P1025
   Yao F, 2013, 2013 IEEE 31ST INTERNATIONAL CONFERENCE ON COMPUTER DESIGN (ICCD), P467, DOI 10.1109/ICCD.2013.6657084
   Zhang M, 2013, 22 USENIX SEC S USEN, P337, DOI [10.5555/2534766.2534796, DOI 10.1145/2818000.2818016]
   zynamics, 2020, ZYN BINDIFF
NR 52
TC 7
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 154
DI 10.1145/3485531
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200057
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU De Porre, K
   Ferreira, C
   Preguiça, N
   Boix, EG
AF De Porre, Kevin
   Ferreira, Carla
   Preguica, Nuno
   Boix, Elisa Gonzalez
TI ECROs: Building Global Scale Systems from Sequential Code
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE replication; data structures; eventual consistency
AB To ease the development of geo-distributed applications, replicated data types (RDTs) offer a familiar programming interface while ensuring state convergence, low latency, and high availability. However, RDTs are still designed exclusively by experts using ad-hoc solutions that are error-prone and result in brittle systems. Recent works statically detect conflicting operations on existing data types and coordinate those at runtime to guarantee convergence and preserve application invariants. However, these approaches are too conservative, imposing coordination on a large number of operations. In this work, we propose a principled approach to design and implement efficient RDTs taking into account application invariants. Developers extend sequential data types with a distributed specification, which together form an RDT. We statically analyze the specification to detect conflicts and unravel their cause. This information is then used at runtime to serialize concurrent operations safely and efficiently. Our approach derives a correct RDT from any sequential data type without changes to the data type's implementation and with minimal coordination. We implement our approach in Scala and develop an extensive portfolio of RDTs. The evaluation shows that our approach provides performance similar to conflict-free replicated data types for commutative operations, and considerably improves the performance of non-commutative operations, compared to existing solutions.
C1 [De Porre, Kevin; Boix, Elisa Gonzalez] Vrije Univ Brussel, Pleinlaan 2, B-1050 Brussels, Belgium.
   [Ferreira, Carla; Preguica, Nuno] NOVA Sch Sci & Technol, Caparica, Portugal.
C3 Vrije Universiteit Brussel
RP De Porre, K (corresponding author), Vrije Univ Brussel, Pleinlaan 2, B-1050 Brussels, Belgium.
EM kevin.de.porre@vub.be; carla.ferreira@fct.unl.pt;
   nuno.preguica@fct.unl.pt; egonzale@vub.be
RI Ferreira, Carla/A-7015-2010; Preguica, Nuno/B-5106-2012
OI Preguica, Nuno/0000-0002-1513-1527; Ferreira, Carla/0000-0003-3680-7634;
   Gonzalez Boix, Elisa/0000-0002-9966-6421; De Porre,
   Kevin/0000-0001-5469-1001
FU SB Fellowship of the Research Foundation -Flanders [1S98519N]; Fundacao
   para a Ciencia e a Tecnologia -Portugal (FCT/MCTES) [UIDB/04516/2020,
   PTDC/CCI-INF/32081/2017,
   LISBOA-01-0145-FEDER-032662/PTDC/CCI-INF/32662/2017]; Fundação para a
   Ciência e a Tecnologia [UIDB/04516/2020, PTDC/CCI-INF/32081/2017]
   Funding Source: FCT
FX We would like to thank Matteo Marra, Jim Bauwens, and the anonymous
   reviewers for their comments which helped improve the paper. Kevin De
   Porre is funded by an SB Fellowship of the Research Foundation
   -Flanders. Project number: 1S98519N. This work was partially supported
   by Fundacao para a Ciencia e a Tecnologia -Portugal (FCT/MCTES) under
   grants UIDB/04516/2020, PTDC/CCI-INF/32081/2017, and
   LISBOA-01-0145-FEDER-032662/PTDC/CCI-INF/32662/2017.
CR Almeida Paulo Sergio, 2015, Networked Systems. Third International Conference, NETYS 2015. Revised Selected Papers: LNCS 9466, P62, DOI 10.1007/978-3-319-26850-7_5
   [Anonymous], 2009, RUBIS RICE U BIDDING
   Bailis P, 2014, PROC VLDB ENDOW, V8, P185, DOI 10.14778/2735508.2735509
   Balegas V, 2018, PROC VLDB ENDOW, V12, P404, DOI 10.14778/3297753.3297760
   Balegas Valter, 2015, Proceedings of the Tenth European Conference on Computer Systems, DOI [10.1145/2741948.2741972, DOI 10.1145/2741948.2741972]
   Baquero Carlos, 2017, ARXIV PREPRINT ARXIV
   BREWER EA, 2000, PODC, V7, DOI [10.1145/343477.343502, DOI 10.1145/343477.343502]
   Brewer E, 2012, COMPUTER, V45, P23, DOI 10.1109/MC.2012.37
   Burckhardt S, 2012, LECT NOTES COMPUT SC, V7313, P283, DOI 10.1007/978-3-642-31057-7_14
   De Porre K., 2019, Proceedings of the 4th ACM SIGPLAN International Workshop on Meta-Programming Techniques and Reflection, P21, DOI DOI 10.1145/3358502.3361271
   De Porre K, 2020, J PARALLEL DISTR COM, V144, P109, DOI 10.1016/j.jpdc.2020.05.010
   De Porre K, 2019, LECT NOTES COMPUT SC, V11534, P36, DOI 10.1007/978-3-030-22496-7_3
   De Porre Kevin, 2021, ECROS BUILDING GLOBA
   Dimitrov D, 2014, ACM SIGPLAN NOTICES, V49, P305, DOI [10.1145/2594291.2594322, 10.1145/2666356.2594322]
   Gotsman A, 2016, ACM SIGPLAN NOTICES, V51, P371, DOI 10.1145/2914770.2837625
   Guerraoui R, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P169
   Holt B, 2016, PROCEEDINGS OF THE SEVENTH ACM SYMPOSIUM ON CLOUD COMPUTING (SOCC 2016), P279, DOI 10.1145/2987550.2987559
   Houshmand F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290387
   Kaki G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276534
   Kaki G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360580
   Kermarrec A.-M., 2001, PODC 2001 P 20 ANN A, P210
   Kleppmann M, 2017, IEEE T PARALL DISTR, V28, P2733, DOI 10.1109/TPDS.2017.2697382
   Kleppmann Martin, 2015, ABS150905393 ARXIV
   Köhler M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428256
   Kulkarni M, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P542
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Li C, 2018, PROCEEDINGS OF THE 2018 USENIX ANNUAL TECHNICAL CONFERENCE, P359
   Li Cheng, 2012, 10 USENIX S OP SYST, P265
   Li Cheng, 2014, 2014 USENIX Annual Technical Conference (USENIX ATC 14), P281
   Li X, 2020, LECT NOTES COMPUT SC, V12224, P324, DOI 10.1007/978-3-030-53288-8_16
   Meiklejohn C, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P184, DOI 10.1145/2790449.2790525
   Milano M, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P226, DOI 10.1145/3192366.3192375
   Milano Matthew, 2019, SCHLOSS DAGSTUHL LEI, V11, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Myter F, 2018, ONWARD!'18: PROCEEDINGS OF THE 2018 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE, P88, DOI 10.1145/3276954.3276957
   Nair SS, 2020, LECT NOTES COMPUT SC, V12075, P544, DOI 10.1007/978-3-030-44914-8_20
   Pearce David J., 2007, Journal of Experimental Algorithmics, V11, P1, DOI DOI 10.1145/1187436.1210590
   Ponge J, 2014, AVOIDING BENCHMARKIN
   Shapiro M, 2011, LECT NOTES COMPUT SC, V6976, P386, DOI 10.1007/978-3-642-24550-3_29
   Shapiro Marc, 2011, Research Report RR- 7506
   Sivaramakrishnan KC, 2015, ACM SIGPLAN NOTICES, V50, P413, DOI [10.1145/2813885.2737981, 10.1145/2737924.2737981]
   Soethout T, 2019, PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL (AGERE '19), P21, DOI 10.1145/3358499.3361222
   Terry D. B., 1995, Operating Systems Review, V29, P172, DOI 10.1145/224057.224070
   Vogels W, 2009, COMMUN ACM, V52, P40, DOI 10.1145/1435417.1435432
   Wang C, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P980, DOI 10.1145/3314221.3314617
   Weidner M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408976
   Zaza Nosheen, 2016, 1 WORKSH PROGR MOD L, V3, DOI [10.1145/2957319.2957377, DOI 10.1145/2957319.2957377]
   Zhao X, 2020, J LOG ALGEBR METHODS, V114, DOI 10.1016/j.jlamp.2020.100561
   Zhao X, 2018, AGERE'18: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL, P23, DOI 10.1145/3281366.3281372
NR 48
TC 4
Z9 4
U1 1
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 107
DI 10.1145/3485484
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200011
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Arora, J
   Westrick, S
   Acar, UA
AF Arora, Jatin
   Westrick, Sam
   Acar, Umut A.
TI Provably Space-Efficient Parallel Functional Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE disentanglement; functional programming; memory management; parallel
   computing
ID MEMORY MANAGEMENT; TIME; IMPLEMENTATION; CILK
AB Because of its many desirable properties, such as its ability to control effects and thus potentially disastrous race conditions, functional programming offers a viable approach to programming modern multicore computers. Over the past decade several parallel functional languages, typically based on dialects of ML and Haskell, have been developed. These languages, however, have traditionally underperformed procedural languages (such as C and Java). The primary reason for this is their hunger for memory, which only grows with parallelism, causing traditional memory management techniques to buckle under increased demand for memory. Recent work opened a new angle of attack on this problem by identifying a memory property of determinacy-race-free parallel programs, called disentanglement, which limits the knowledge of concurrent computations about each other's memory allocations. The work has showed some promise in delivering good time scalability.
   In this paper, we present provably space-efficient automatic memory management techniques for determinacy-race-free functional parallel programs, allowing both pure and imperative programs where memory may be destructively updated. We prove that for a program with sequential live memory of R*, any P-processor garbage-collected parallel run requires at most O(R* . P) memory. We also prove a work bound of O(W + R* . P) for P-processor executions, accounting also for the cost of garbage collection. To achieve these results, we integrate thread scheduling with memory management. The idea is to coordinate memory allocation and garbage collection with thread scheduling decisions so that each processor can allocate memory without synchronization and independently collect a portion of memory by consulting a collection policy, which we formulate. The collection policy is fully distributed and does not require communicating with other processors. We show that the approach is practical by implementing it as an extension to the MPL compiler for Parallel ML. Our experimental results confirm our theoretical bounds and show that the techniques perform and scale well.
C1 [Arora, Jatin; Westrick, Sam; Acar, Umut A.] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Arora, J (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM jatina@andrew.cmu.edu; swestric@cs.cmu.edu; umut@cs.cmu.edu
OI Arora, Jatin/0000-0001-8302-6844; Westrick, Sam/0000-0003-2848-9808
FU National Science Foundation [CCF1408940, CCF-1901381]
FX This work was partially supported by the National Science Foundation
   under grant numbers CCF1408940 and CCF-1901381. We also thank our
   shepherd, Simon Peyton Jones, for making numerous suggestions to improve
   the paper.
CR Acar UA, 2002, THEOR COMPUT SYST, V35, P321, DOI 10.1007/s00224-002-1057-3
   Acar UA, 2018, ACM SIGPLAN NOTICES, V53, P769, DOI [10.1145/3192366.3192391, 10.1145/3296979.3192391]
   Acar UA, 2016, J FUNCT PROGRAM, V26, DOI 10.1017/S0956796816000101
   Acar UA, 2013, ACM SIGPLAN NOTICES, V48, P219, DOI 10.1145/2517327.2442538
   Acar Umut A., 2015, SUMMIT ADV PROGRAMMI
   Acar Umut A., 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236790
   Adve S, 2010, COMMUN ACM, V53, P84, DOI 10.1145/1839676.1839697
   Agarwal S, 2007, SPAA'07: PROCEEDINGS OF THE NINETEENTH ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P229
   Allen T. R., 1987, Proceedings of the 1987 International Conference on Parallel Processing, P721
   ALPERN B, 1990, ANN IEEE SYMP FOUND, P600
   Anderson TA, 2010, ACM SIGPLAN NOTICES, V45, P21
   [Anonymous], 1998, SIGPLAN Fortran Forum, DOI [10.1145/289918.289920, DOI 10.1145/289918.289920]
   [Anonymous], 2011, FINAGLE PROTOCOL AGN
   [Anonymous], 2002, P 3 INT S MEM MAN BE, DOI [DOI 10.1145/512429.512439, 10.1145/512429.512439]
   [Anonymous], 2012, SC'12: Proceedings of the International Conference on High Performance Computing, Networking, Storage and Analysis, DOI DOI 10.1109/SC.2012.71
   [Anonymous], 2011, Intel threading building blocks tutorial
   [Anonymous], 2009, P 1 USENIX C HOT TOP
   Appel A. W., 1996, Journal of Functional Programming, V6, P47, DOI 10.1017/S095679680000157X
   Appel Andrew W, 1995, 1995 C FUNCT PROGR C
   APPEL AW, 1989, SOFTWARE PRACT EXPER, V19, P171, DOI 10.1002/spe.4380190206
   Arora N. S., 1998, SPAA '98. Tenth Annual ACM Symposium on Parallel Algorithms and Architectures, P119, DOI 10.1145/277651.277678
   Arora NS, 2001, THEOR COMPUT SYST, V34, P115, DOI 10.1007/s00224-001-0004-z
   Auhagen Sven., 2011, Proceedings of the 2011 ACM SIGPLAN Workshop on Memory Systems Performance and Correctness, MSPC '11, P51
   Avidan S, 2007, ACM T GRAPHIC, V26, DOI 10.1145/1239451.1239461
   Belloch G., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P226, DOI 10.1145/224164.224210
   Bizjak A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290378
   Blelloch G. E., 1997, SPAA '97. 9th Annual ACM Symposium on Parallel Algorithms and Architectures, P12, DOI 10.1145/258492.258494
   Blelloch GE, 1996, COMMUN ACM, V39, P85, DOI 10.1145/227234.227246
   BLELLOCH GE, 1994, J PARALLEL DISTR COM, V21, P4, DOI 10.1006/jpdc.1994.1038
   Blelloch GE, 1999, J ACM, V46, P281, DOI 10.1145/301970.301974
   Blelloch GE, 1999, ACM SIGPLAN NOTICES, V34, P104, DOI 10.1145/301631.301648
   Blelloch GE, 1996, ACM SIGPLAN NOTICES, V31, P213, DOI 10.1145/232629.232650
   Blelloch GE, 2012, ACM SIGPLAN NOTICES, V47, P181, DOI 10.1145/2370036.2145840
   Blelloch GE, 2011, SPAA 11: PROCEEDINGS OF THE TWENTY-THIRD ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P355
   Blelloch GE, 2010, SPAA '10: PROCEEDINGS OF THE TWENTY-SECOND ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P189
   Blelloch GuyE., 2004, SPAA
   Blumofe R. D., 1999, Journal of the ACM, V46, P720, DOI [10.1109/SFCS.1994.365680, 10.1145/324133.324234]
   Blumofe RD, 1998, SIAM J COMPUT, V27, P202, DOI 10.1137/S0097539793259471
   Blumofe RD, 1996, J PARALLEL DISTR COM, V37, P55, DOI 10.1006/jpdc.1996.0107
   BLUMOFE RD, 1995, SIGPLAN NOTICES, V30, P207
   Bocchino RL, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P535, DOI 10.1145/1926385.1926447
   Bocchino RL, 2009, ACM SIGPLAN NOTICES, V44, P97, DOI 10.1145/1639949.1640097
   Boehm Hans-Juergen, 2011, 3 USENIX WORKSH HOT
   BRENT RP, 1974, J ACM, V21, P201, DOI 10.1145/321812.321815
   Chakrabarti D, 2004, SIAM PROC S, P442
   Chakravarty M., 2007, PROC WORKSHOP DECLAR, P10
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   Cheng Guang-Ien, 1998, P 10 ACM S PAR ALG A
   Cheng P, 2001, ACM SIGPLAN NOTICES, V36, P125, DOI 10.1145/381694.378823
   Chowdhury RA, 2008, SPAA'08: PROCEEDINGS OF THE TWENTIETH ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P207
   CULLER DE, 1993, SUPERCOMP PROC, P262
   Doligez D., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P113, DOI 10.1145/158511.158611
   Doligez D., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P70, DOI 10.1145/174675.174673
   EAGER DL, 1989, IEEE T COMPUT, V38, P408, DOI 10.1109/12.21127
   EMRATH PA, 1989, PROCEEDINGS : SUPERCOMPUTING 89, P580, DOI 10.1145/76263.76329
   Fatahalian K., 2006, SC 06, P83
   Feng M, 1999, THEOR COMPUT SYST, V32, P301, DOI 10.1007/s002240000120
   Flanagan C, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1377492.1377495
   Flanagan C, 2009, ACM SIGPLAN NOTICES, V44, P121, DOI 10.1145/1543135.1542490
   Fluet M, 2006, LECT NOTES COMPUT SC, V3924, P7
   FLUET M., 2011, J FUNCT PROGRAM, V20, P1
   Fluet M, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P241
   Frigo M, 1998, ACM SIGPLAN NOTICES, V33, P212, DOI 10.1145/277652.277725
   Frigo M, 2009, SPAA'09: PROCEEDINGS OF THE TWENTY-FIRST ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P79
   Gibbons Phillip B, 2008, INT C FUNCT PROGR
   Gifford DK, 1986, P 1986 ACM C LISP FU, P28, DOI DOI 10.1145/319838.319848
   Goncalves Marcelo J. R., 1995, THESIS PRINCETON U
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Guatto Adrien, 2018, ACM SIGPLAN Notices, V53, P81, DOI 10.1145/3200691.3178494
   Halstead R.H., 1984, P 1984 ACM S LISP FU, P9
   Hammond K, 2011, LECT NOTES COMPUT SC, V6652, P201, DOI 10.1007/978-3-642-21338-0_17
   HANSON DR, 1990, SOFTWARE PRACT EXPER, V20, P5, DOI 10.1002/spe.4380200104
   Harper Robert., P 14 ACM SIGPLAN INT
   Imam Shams., 2014, P 2014 INT C PRINCIP, P75
   Intel Corp, 2017, INT XEON PROC E7 V4
   Intel Corporation, 2009, 322581001US INT CORP
   Intel Corporation, 2009, INT THREAD BUILD BLO
   Jagannathan, 2014, J FUNCTIONAL PROGRAM, P1
   Jones R., 2011, GARBAGE COLLECTION H
   Jones SP, 2008, LECT NOTES COMPUT SC, V5356, P138
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Keller G, 2010, ACM SIGPLAN NOTICES, V45, P261, DOI 10.1145/1932681.1863582
   Kulkarni M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P211, DOI 10.1145/1250734.1250759
   Kuper L, 2014, ACM SIGPLAN NOTICES, V49, P2, DOI 10.1145/2666356.2594312
   Kuper L, 2014, ACM SIGPLAN NOTICES, V49, P257, DOI 10.1145/2535838.2535842
   Kuper Lindsey, 2013, P 2 ACM SIGPLAN WORK, P71, DOI 10.1145/2502323.2502326
   LAUNCHBURY J, 1994, SIGPLAN NOTICES, V29, P24, DOI 10.1145/773473.178246
   Le M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P230, DOI 10.1145/2784731.2784736
   Lea Doug, 2000, JAVA, P36
   Lee I-Ting Angelina, 2015, ACM Transactions on Parallel Computing, V2, p17:1, DOI DOI 10.1145/2809808
   Leijen D, 2009, ACM SIGPLAN NOTICES, V44, P227, DOI 10.1145/1639949.1640106
   Li P, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P107
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Marlow S, 2011, ACM SIGPLAN NOTICES, V46, P71, DOI 10.1145/2096148.2034685
   MELLORCRUMMEY J, 1991, SUPERCOMPUTING 91, P24
   Mingdong Feng, 1997, SPAA '97. 9th Annual ACM Symposium on Parallel Algorithms and Architectures, P1, DOI 10.1145/258492.258493
   Muller S.K., 2016, P 28 ACM S PARALLELI, P71, DOI DOI 10.1145/2935764.2935793
   Muller SK, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P577, DOI 10.1145/3385412.3386013
   Muller SK, 2017, ACM SIGPLAN NOTICES, V52, P677, DOI [10.1145/3062341.3062370, 10.1145/3140587.3062370]
   Narlikar GJ, 1999, ACM T PROGR LANG SYS, V21, P138, DOI 10.1145/314602.314607
   Netzer Robert H. B., 1992, ACM Letters on Programming Languages and Systems, V1, P74
   NIKHIL A, 1989, ACM T PROGR LANG SYS, V11, P598, DOI 10.1145/69558.69562
   Ohori Atsushi, 2018, Making SML# a General-purpose High-performance Language
   OpenMP 5.0, 2018, 50 OPENMP
   Park S, 2008, ACM T PROGR LANG SYS, V31, DOI 10.1145/1452044.1452048
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   Pingali K, 2011, ACM SIGPLAN NOTICES, V46, P12, DOI 10.1145/1993316.1993501
   Pizlo F, 2008, ACM SIGPLAN NOTICES, V43, P33, DOI 10.1145/1379022.1375587
   Raghunathan R, 2016, ACM SIGPLAN NOTICES, V51, P392, DOI 10.1145/3022670.2951935
   Rajan V.T, 2003, 30 ANN ACM S PRINC P
   Raman R, 2012, ACM SIGPLAN NOTICES, V47, P531, DOI [10.1145/2345156.2254127, 10.1145/2345156.1993502]
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Reynolds John C., 1978, POPL, P39
   Robinson Dan., 2017, DATA CTR DYNAMIC MAY
   Rosendahl M., 1989, FPCA 89, P144, DOI DOI 10.1145/99370.99381
   ROSS DT, 1967, COMMUN ACM, V10, P481, DOI 10.1145/363534.363546
   Rust Team, 2019, RUST LANG
   SANDS D, 1990, LECT NOTES COMPUT SC, V432, P361
   Sands David., 1990, THESIS U LONDON IMPE
   Sansom P. M., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P355, DOI 10.1145/199448.199531
   Schwartz, 1975, COMPUT LANG, V2, P161
   Shun JL, 2013, ACM SIGPLAN NOTICES, V48, P135, DOI 10.1145/2517327.2442530
   Shun Julian, 2012, ACM Symposium on Parallelism in Algorithms and Architectures (SPAA), P68
   Sieczkowski Filip, P 21 ACM SIGPLAN INT, P18
   Sivaramakrishnan KC, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408995
   Sodani Avinash, 2015, 2015 IEEE Hot Chips 27 Symposium (HCS), DOI 10.1109/HOTCHIPS.2015.7477467
   Spoonhower, 2009, THESIS
   Spoonhower D, 2009, SPAA'09: PROCEEDINGS OF THE TWENTY-FIRST ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P91
   Steele G. L.  Jr., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P472, DOI 10.1145/174675.178068
   STEELE GL, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P218, DOI 10.1145/96709.96731
   Terauchi T, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1353445.1353449
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Tzannes A, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629643
   Utterback R., 2016, P 28 ACM S PARALLELI, P83
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   Walker David., 2001, P 1 WORKSH SEM PROGR
   Westrick S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371115
   Yelick K, 1998, CONCURRENCY-PRACT EX, V10, P825, DOI 10.1002/(SICI)1096-9128(199809/11)10:11/13<825::AID-CPE383>3.0.CO;2-H
   Ziarek L, 2011, ACM SIGPLAN NOTICES, V46, P628, DOI 10.1145/1993316.1993572
NR 141
TC 11
Z9 13
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 18
DI 10.1145/3434299
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100018
OA gold
DA 2024-07-18
ER

PT J
AU Spies, S
   Krishnaswami, N
   Dreyer, D
AF Spies, Simon
   Krishnaswami, Neel
   Dreyer, Derek
TI Transfinite Step-Indexing for Termination
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE termination; transfinite step-indexing; higher-order state; linear
   types; ordinals; channels; asynchronous computation; asynchronous
   programming; logical relations
AB Step-indexed logical relations are an extremely useful technique for building operational-semantics-based models and program logics for realistic, richly-typed programming languages. They have proven to be indispensable for modeling features like higher-order state, which many languages support but which were difficult to accommodate using traditional denotational models. However, the conventional wisdom is that, because they only support reasoning about finite traces of computation, (unary) step-indexed models are only good for proving safety properties like "well-typed programs don't go wrongz. There has consequently been very little work on using step-indexing to establish liveness properties, in particular termination.
   In this paper, we show that step-indexing can in fact be used to prove termination of well-typed programs-even in the presence of dynamically-allocated, shared, mutable, higher-order state-so long as one's type system enforces disciplined use of such state. Specifically, we consider a language with asynchronous channels, inspired by promises in JavaScript, in which higher-order state is used to implement communication, and linearity is used to ensure termination. The key to our approach is to generalize from natural number step-indexing to transfinite step-indexing, which enables us to compute termination bounds for program expressions in a compositional way. Although transfinite step-indexing has been proposed previously, we are the first to apply this technique to reasoning about termination in the presence of higher-order state.
C1 [Spies, Simon; Dreyer, Derek] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Spies, Simon] Saarland Univ, Saarland Informat Campus, Saarbrucken, Germany.
   [Spies, Simon; Krishnaswami, Neel] Univ Cambridge, Cambridge, England.
C3 Saarland University; University of Cambridge
RP Spies, S (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.; Spies, S (corresponding author), Saarland Univ, Saarland Informat Campus, Saarbrucken, Germany.; Spies, S (corresponding author), Univ Cambridge, Cambridge, England.
EM spies@mpi-sws.org; nk480@cl.cam.ac.uk; dreyer@mpi-sws.org
FU European Research Council (ERC) Consolidator Grant; European Union
   [683289]
FX This research was supported in part by a European Research Council (ERC)
   Consolidator Grant for the project "RustBeltz, funded under the European
   Union's Horizon 2020 Framework Programme (grant agreement no. 683289).
CR AHMED A, 2005, P 10 ACM SIGPLAN INT, P78, DOI DOI 10.1145/1086365.1086376
   Ahmed A, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709094
   Ahmed Amal J., 2004, Ph. D. Dissertation
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Bahr P, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341713
   Birkedal L, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:4)2013
   Bizjak Ales, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P108, DOI 10.1007/978-3-319-08918-8_8
   Boudol G, 2010, INFORM COMPUT, V208, P716, DOI 10.1016/j.ic.2009.06.007
   Brunel Alois, 2012, AS S PROGR LANG SYST, P264, DOI [10.1007/978-3-642-35182-2_19, DOI 10.1007/978-3-642-35182-2_19]
   Cave A, 2014, ACM SIGPLAN NOTICES, V49, P361, DOI 10.1145/2535838.2535881
   Claessen K., 1999, Journal of Functional Programming, V9, P313, DOI 10.1017/S0956796899003342
   Dockins R, 2012, ELECTRON NOTES THEOR, V286, P139, DOI 10.1016/j.entcs.2012.08.010
   Dockins Robert, 2010, DAGST SEM P SCHL DAG
   Dreyer D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:16)2011
   Dreyer D, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P185, DOI 10.1145/1706299.1706323
   Friedman D. P., 1976, Proceedings of the 1976 International Conference on Parallel Processing, P263
   Girard J.-Y., 1995, Logic and Computational Complexity. International Workshop LCC '94. Selected Papers, P145
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   Greg Morrisett, TYPED LAMBDA CALCULI, P293, DOI [10.1007/ 11417170_22, DOI 10.1007/11417170_22]
   Hessenberg G., 1906, Grundbegriffe der Mengenlehre, Vi
   Jeffrey Alan., 2012, Proceedings of the sixth workshop on Programming languages meets program verification, P49
   Jeltsch W., 2013, Proceedings of the 7th workshop on Programming languages meets program verification, P69
   Jeltsch W, 2012, ELECTRON NOTES THEOR, V286, P229, DOI 10.1016/j.entcs.2012.08.015
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Krishnaswami NR, 2013, ACM SIGPLAN NOTICES, V48, P221, DOI [10.1145/2544174.2500588, 10.1145/2500365.2500588]
   Krishnaswami NR, 2012, ACM SIGPLAN NOTICES, V47, P41, DOI 10.1145/2398856.2364536
   Krishnaswami NR, 2011, IEEE S LOG, P257, DOI 10.1109/LICS.2011.38
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Madet A, 2011, LECT NOTES COMPUT SC, V6690, P138, DOI 10.1007/978-3-642-21691-6_13
   Pinto PD, 2016, LECT NOTES COMPUT SC, V9632, P176, DOI 10.1007/978-3-662-49498-1_8
   Pottier Francois, 2019, LECT NOTES COMPUT SC PROGR LANG SYST 28, P3, DOI [10.1007/978-3-030-17184-1_1, DOI 10.1007/978-3-030-17184-1_1]
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Spies Simon, TRANFINITE STEP INDE
   Svendsen K, 2016, LECT NOTES COMPUT SC, V9632, P727, DOI 10.1007/978-3-662-49498-1_28
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P343, DOI 10.1145/2480359.2429111
   Yoshida N, 2004, INFORM COMPUT, V191, P145, DOI 10.1016/j.ic.2003.08.004
NR 40
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 13
DI 10.1145/3434294
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100013
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Holtzen, S
   Van den Broeck, G
   Millstein, T
AF Holtzen, Steven
   Van den Broeck, Guy
   Millstein, Todd
TI Scaling Exact Inference for Discrete Probabilistic Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Probabilistic programming
AB Probabilistic programming languages (PPLs) are an expressive means of representing and reasoning about probabilistic models. The computational challenge of probabilistic inference remains the primary roadblock for applying PPLs in practice. Inference is fundamentally hard, so there is no one-size-fits all solution. In this work, we target scalable inference for an important class of probabilistic programs: those whose probability distributions are discrete. Discrete distributions are common in many fields, including text analysis, network verification, artificial intelligence, and graph analysis, but they prove to be challenging for existing PPLs.
   We develop a domain-specific probabilistic programming language called Dice that features a new approach to exact discrete probabilistic program inference. Dice exploits program structure in order to factorize inference, enabling us to perform exact inference on probabilistic programs with hundreds of thousands of random variables. Our key technical contribution is a new reduction from discrete probabilistic programs to weighted model counting (WMC). This reduction separates the structure of the distribution from its parameters, enabling logical reasoning tools to exploit that structure for probabilistic inference. We (1) show how to compositionally reduce Dice inference to WMC, (2) prove this compilation correct with respect to a denotational semantics, (3) empirically demonstrate the performance benefits over prior approaches, and (4) analyze the types of structure that allow Dice to scale to large probabilistic programs.
C1 [Holtzen, Steven; Van den Broeck, Guy; Millstein, Todd] Univ Calif Los Angeles, Los Angeles, CA 90095 USA.
C3 University of California System; University of California Los Angeles
RP Holtzen, S (corresponding author), Univ Calif Los Angeles, Los Angeles, CA 90095 USA.
EM sholtzen@cs.ucla.edu; guyvdb@cs.ucla.edu; todd@cs.ucla.edu
FU NSF [IIS-1943641, IIS-1956441, CCF-1837129]; DARPA [N66001-17-2-4032];
   Sloan Fellowship
FX This work is partially supported by NSF grants #IIS-1943641,
   #IIS-1956441, #CCF-1837129, DARPA grant #N66001-17-2-4032, a Sloan
   Fellowship, and gifts by Intel and Facebook research. The authors would
   like to thank Jon Aytac and Philip Johnson-Freyd for feedback on paper
   drafts.
CR Abramson B, 1996, INT J FORECASTING, V12, P57, DOI 10.1016/0169-2070(95)00664-8
   ANDREASSEN S, 1989, COMPUTER AIDED ELECT, P255, DOI DOI 10.1016/0924-980X(95)00252-G
   [Anonymous], 2017, P ACM PROGRAM LANG, DOI DOI 10.1145/3133904
   [Anonymous], 2013, Advances in Neural Information Processing Systems
   [Anonymous], 2009, Advances in Neural Information Processing Systems
   Bahar RI, 1997, FORM METHOD SYST DES, V10, P171, DOI 10.1023/A:1008699807402
   Beinlich I. A., 1989, AIME 89. Second European Conference on Artificial Intelligence in Medicine Proceedings, P247
   Belle V, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P2770
   Biere A, 2009, FRONT ARTIF INTEL AP, V185, P457, DOI 10.3233/978-1-58603-929-5-457
   Binder J, 1997, MACH LEARN, V29, P213, DOI 10.1023/A:1007421730016
   Bingham E, 2019, J MACH LEARN RES, V20
   Borgström J, 2011, LECT NOTES COMPUT SC, V6602, P77, DOI 10.1007/978-3-642-19718-5_5
   Bornholt J, 2014, ACM SIGPLAN NOTICES, V49, P51, DOI 10.1145/2541940.2541958
   Boutilier C, 1996, UNCERTAINTY IN ARTIFICIAL INTELLIGENCE, P115
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   Chaganty Arun, 2013, ARTIFICIAL INTELLIGE
   Chavira M, 2006, INT J APPROX REASON, V42, P4, DOI 10.1016/j.ijar.2005.10.001
   Chavira M, 2008, ARTIF INTELL, V172, P772, DOI 10.1016/j.artint.2007.11.002
   Chavira M, 2005, 19TH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI-05), P1306
   Chistikov Dmitry, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P320, DOI 10.1007/978-3-662-46681-0_26
   Claret Guillaume., 2013, Foundations of Software Engineering, P92, DOI DOI 10.1145/2491411.2491423
   Clarke EM, 1999, MODEL CHECKING, P1
   Cousot P, 2012, LECT NOTES COMPUT SC, V7211, P169, DOI 10.1007/978-3-642-28869-2_9
   Cusumano-Towner M, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P571, DOI [10.1145/3296979.3192399, 10.1145/3192366.3192399]
   Darwiche A, 2002, J ARTIF INTELL RES, V17, P229, DOI 10.1613/jair.989
   Darwiche A., 2011, IJCAI, DOI DOI 10.5591/978-1-57735-516-8/IJCAI11-143
   Darwiche A., 2009, MODELING REASONING B, V543, P569, DOI 10.1017/CBO9780511811357
   De Raedt L, 2007, 20TH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P2468
   Dehnert C, 2017, LECT NOTES COMPUT SC, V10427, P592, DOI 10.1007/978-3-319-63390-9_31
   Dillon J. V., 2017, TensorFlow distributions
   Dos Martires PZ, 2019, AAAI CONF ARTIF INTE, P7825
   Fierens D, 2015, THEOR PRACT LOG PROG, V15, P358, DOI 10.1017/S1471068414000076
   Filieri A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P622, DOI 10.1109/ICSE.2013.6606608
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Gehr T, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P586, DOI [10.1145/3192366.3192400, 10.1145/3296979.3192400]
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   Geldenhuys Jaco, 2012, P 2012 INT S SOFTWAR, P166, DOI DOI 10.1145/2338965.2336773
   Gogate V, 2011, ARTIF INTELL, V175, P694, DOI 10.1016/j.artint.2010.10.009
   Goodman N. D., 2014, DESIGN IMPLEMENTATIO
   Goodman ND., 2008, UAI, P220
   Gorinova Maria I., 2020, P MACHINE LEARNING R, P3648
   Gram-Hansen Bradley, 2018, ARXIV PREPRINT ARXIV
   Henri Johan, 2009, COMPUTATIONAL COMPLE
   Hoffman MD, 2014, J MACH LEARN RES, V15, P1593
   Holtzen Steven, 2020, Proceedings of the ACM on Programming Languages, V4, DOI 10.1145/3428208
   Holtzen S, 2018, PR MACH LEARN RES, V80
   Huang D, 2016, LECT NOTES COMPUT SC, V9632, P337, DOI 10.1007/978-3-662-49498-1_14
   Hur C., 2015, LIPIcs, V45, P475, DOI [DOI 10.4230/LIPICS.FSTTCS.2015.475, 10.4230 /LIPIcs .FSTTCS .2015 .475]
   Jensen F.V., 1989, EXPERT SYSTEM CONTRO
   Jhala R, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592438
   Jordan MI, 1999, MACH LEARN, V37, P183, DOI 10.1023/A:1007665907178
   Koller D., 2009, Probabilistic graphical models: principles and techniques
   Korb KB., 2010, COM SCI DAT
   Kucukelbir A, 2017, J MACH LEARN RES, V18, P1
   Kucukelbir A, 2015, ADV NEUR IN, V28
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Littman ML, 1998, J ARTIF INTELL RES, V9, P1
   Mansinghka VK, 2018, ACM SIGPLAN NOTICES, V53, P603, DOI [10.1145/3192366.3192409, 10.1145/3296979.3192409]
   Meinel C., 1998, ALGORITHMS DATA STRU, DOI [10.1007/978-3-642-58940-9, DOI 10.1007/978-3-642-58940-9]
   Menezes A. J., 1996, HDB APPL CRYPTOGRAPH, V1st
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Nori Aditya V, 2014, AAAI
   Obermeyer Fritz, 2019, TENSOR VARIABLE ELIM, P4871
   Onisko A., 2003, PROBABILISTIC CAUSAL
   Pearl J., 1988, PROBABILISTIC REASON
   Pfeffer A, 2018, PR MACH LEARN RES, V84
   Pfeffer Avi, 1993, INTRO STAT RELATIONA, V2007, P399
   Pfeffer Avi., 2007, A general importance sampling algorithm for probabilistic programs
   Pfeffer Avi, 2009, 137 CHARL RIV AN TEC
   Riguzzi F, 2011, THEOR PRACT LOG PROG, V11, P433, DOI 10.1017/S147106841100010X
   Saad Feras., 2016, Advances in Neural Information Processing Systems (NIPS)
   Sang T., 2005, P 10 NAT C ART INT 1, P475
   Sankaranarayanan S, 2013, ACM SIGPLAN NOTICES, V48, P447, DOI 10.1145/2499370.2462179
   Schiffman E, 2014, J ORAL FACIAL PAIN H, V28, P6, DOI 10.11607/jop.1151
   Scutari M., 2014, BAYESIAN NETWORKS EX, DOI [10.1111/biom.12369, DOI 10.1111/BIOM.12369]
   Somenzi Fabio, CUDD BDD PACK
   van de Meent Jan-Willem, 2015, AISTATS
   Van den Broeck Guy, 2017, QUERY PROCESSING PRO, DOI [10.1561/1900000052, DOI 10.1561/1900000052]
   Vazquez-Chanlatte M, 2020, LECT NOTES COMPUT SC, V12225, P255, DOI 10.1007/978-3-030-53291-8_15
   Vlasselaer J., 2015, P 24 INT JOINT C ART, DOI DOI 10.1016/J.IJAR.2016.06.009
   Wang D, 2018, ACM SIGPLAN NOTICES, V53, P513, DOI 10.1145/3192366.3192408
   Wingate David, 2013, Automated variational inference in probabilistic programming
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
   Zeng Z., 2020, P 35 C UNCERTAINTY A, P175
   Zhou Yuan, 2020, INT C MACH LEARN
NR 86
TC 22
Z9 22
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 140
DI 10.1145/3428208
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900017
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Pailoor, S
   Wang, XY
   Shacham, H
   Dillig, I
AF Pailoor, Shankara
   Wang, Xinyu
   Shacham, Hovav
   Dillig, Isil
TI Automated Policy Synthesis for System Call Sandboxing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Security; Sandboxing; Abstract Interpretation; Program Synthesis
ID INTERPROCEDURAL ANALYSIS; STATIC ANALYSIS; ACCURATE
AB System call whitelisting is a powerful sandboxing approach that can significantly reduce the capabilities of an attacker if an application is compromised. Given a policy that specifies which system calls can be invoked with what arguments, a sandboxing framework terminates any execution that violates the policy. While this mechanism greatly reduces the attack surface of a system, manually constructing these policies is time-consuming and error-prone. As a result, many applications -including those that take untrusted user input- opt not to use a system call sandbox.
   Motivated by this problem, we propose a technique for automatically constructing system call whitelisting policies for a given application and policy DSL. Our method combines static code analysis and program synthesis to construct sound and precise policies that never erroneously terminate the application, while restricting the program's system call usage as much as possible. We have implemented our approach in a tool called ABHAYA and experimentally evaluate it 674 Linux and OpenBSD applications by automatically synthesizing Seccomp-bpf and Pledge policies. Our experimental results indicate that ABHAYA can efficiently generate useful and precise sandboxes for real-world applications.
C1 [Pailoor, Shankara; Shacham, Hovav; Dillig, Isil] Univ Texas Austin, Austin, TX 78712 USA.
   [Wang, Xinyu] Univ Michigan, Ann Arbor, MI 48109 USA.
C3 University of Texas System; University of Texas Austin; University of
   Michigan System; University of Michigan
RP Pailoor, S (corresponding author), Univ Texas Austin, Austin, TX 78712 USA.
EM spailoor@cs.utexas.edu; xwangsd@umichigan.edu; hovav@cs.utexas.edu;
   isil@cs.utexas.edu
OI Wang, Xinyu/0000-0002-1836-0202
FU National Science Foundation [CNS-1908304, CCF-1811865, CNS-1514435]; US
   Air Force; DARPA [FA8750-20-C-0208]; AFRL/RIKE
FX We thanks our anonymous reviewers and members of the UToPiA group for
   their helpful feedback. We also thank Jorge Navas from SRI for his very
   helpful and prompt assistance with Crab-LLVM. This material is based
   upon work supported by the National Science Foundation under Grant Nos.
   CNS-1908304, CCF-1811865, and CNS-1514435, the US Air Force, AFRL/RIKE
   and DARPA under Contract No. FA8750-20-C-0208, along with gifts from
   Google, Mozilla, and Qualcomm. Any opinions, findings, and conclusions
   or recommendations expressed in this material are those of the author
   and do not necessarily reflect the views of the National Science
   Foundation, US Air Force, AFRL/RIKE, DARPA, Google, Mozilla, and
   Qualcomm.
CR Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Bartel A, 2014, IEEE T SOFTWARE ENG, V40, P617, DOI 10.1109/TSE.2014.2322867
   Bartel A, 2012, IEEE INT CONF AUTOM, P274, DOI 10.1145/2351676.2351722
   Blanchet B, 2002, LECT NOTES COMPUT SC, V2566, P85
   Bornholt J, 2016, ACM SIGPLAN NOTICES, V51, P775, DOI 10.1145/2914770.2837666
   Cousot P, 2011, LECT NOTES COMPUT SC, V6604, P456, DOI 10.1007/978-3-642-19805-2_31
   Das M, 2002, ACM SIGPLAN NOTICES, V37, P57, DOI 10.1145/543552.512538
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Feautrier P., 1988, Conference Proceedings. 1988 International Conference on Supercomputing, P429, DOI 10.1145/55364.55406
   Felt AP, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P627
   Gange G, 2016, LECT NOTES COMPUT SC, V9583, P85, DOI 10.1007/978-3-662-49122-5_4
   Geay E, 2009, PROC INT CONF SOFTW, P177, DOI 10.1109/ICSE.2009.5070519
   Giffin Jonathon T., 2004, P NDSS 2004
   Gurfinkel A, 2017, LECT NOTES COMPUT SC, V10422, P148, DOI 10.1007/978-3-319-66706-5_8
   Gurfinkel A, 2015, LECT NOTES COMPUT SC, V9206, P343, DOI 10.1007/978-3-319-21690-4_20
   Jake Edge, 2015, SECCOMP OVERVIEW
   Jamrozik K, 2016, PROC INT CONF SOFTW, P37, DOI 10.1145/2884781.2884782
   Koved Larry, 2002, ACM OOPSLA
   Krohn Maxwell., 2005, HOTOS'05, P21
   Lam LC, 2006, I C DEPEND SYS NETWO, P413
   Lam LC, 2004, LECT NOTES COMPUT SC, V3224, P1
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lattner C, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P278, DOI 10.1145/1250734.1250766
   Lauren Samuel., 2017, Proceedings of the 18th International Conference on Computer Systems and Technologies, P141
   Mangal R, 2014, LECT NOTES COMPUT SC, V8410, P513
   McCarty Bill., 2004, SELINUX NSAS OPEN SO
   Murray Alex, 2019, APPARMOR
   Mutz D., 2006, ACM Transactions on Information and Systems Security, V9, P61, DOI 10.1145/1127345.1127348
   Naumovich Gleb., 2004, SIGSOFT SOFTW ENG NO, V29, P1, DOI DOI 10.1145/1022494.1022530
   Pal Neeraj, 2018, Pledge: OpenBSD's defensive approach to OS Security
   Pistoia M, 2005, LECT NOTES COMPUT SC, V3586, P362
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Pottier FN, 2001, LECT NOTES COMPUT SC, V2028, P30
   Provos N, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE 12TH USENIX SECURITY SYMPOSIUM, P257
   Provos N., 2003, P 12 C USENIX SEC S, V12, P16
   Rakamaric Z, 2014, LECT NOTES COMPUT SC, V8559, P106, DOI 10.1007/978-3-319-08867-9_7
   Rakamaric Z, 2009, LECT NOTES COMPUT SC, V5403, P290, DOI 10.1007/978-3-540-93900-9_24
   SALTZER JH, 1975, P IEEE, V63, P1278, DOI 10.1109/PROC.1975.9939
   Sankaranarayanan S, 2006, LECT NOTES COMPUT SC, V4134, P3
   Smalley Steven, 2002, CONFIGURING SELINUX, P7
   Solar-Lezama A, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P167, DOI 10.1145/1250734.1250754
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Solar-Lezama Armando, 2008, THESIS
   Venet A, 2004, LECT NOTES COMPUT SC, V3148, P149
   Wagner D, 2001, P IEEE S SECUR PRIV, P156, DOI 10.1109/SECPRI.2001.924296
   Wan ZY, 2019, EMPIR SOFTW ENG, V24, P4034, DOI 10.1007/s10664-019-09737-2
   Wan ZY, 2017, IEEE INT CONF SOFTW, P92, DOI 10.1109/ICST.2017.16
   Zalewski Michal, 2014, CVE20148485
   Zhang X, 2014, ACM SIGPLAN NOTICES, V49, P249, DOI [10.1145/2666356.2594328, 10.1145/2594291.2594328]
NR 49
TC 13
Z9 13
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 135
DI 10.1145/3428203
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900012
OA gold
DA 2024-07-18
ER

PT J
AU Barbarossa, D
   Manzonetto, G
AF Barbarossa, Davide
   Manzonetto, Giulio
TI Taylor Subsumes Scott, Berry, Kahn and Plotkin
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Lambda calculus; Taylor expansion; Bohm trees; Linear Logic
ID MODELS; SEMANTICS
AB The speculative ambition of replacing the old theory of program approximation based on syntactic continuity with the theory of resource consumption based on Taylor expansion and originating from the differential lambda-calculus is nowadays at hand. Using this resource sensitive theory, we provide simple proofs of important results in lambda-calculus that are usually demonstrated by exploiting Scott's continuity, Berry's stability or Kahn and Plotkin's sequentiality theory. A paradigmatic example is given by the Perpendicular Lines Lemma for the Bohm tree semantics, which is proved here simply by induction, but relying on the main properties of resource approximants: strong normalization, confluence and linearity.
C1 [Barbarossa, Davide; Manzonetto, Giulio] Univ Paris 13, Lab Informat Paris Nord, CNRS UMR 7030, Sorbonne Paris Cite, 99 Av JB Clement, F-93430 Villetaneuse, France.
C3 Universite Paris 13
RP Barbarossa, D (corresponding author), Univ Paris 13, Lab Informat Paris Nord, CNRS UMR 7030, Sorbonne Paris Cite, 99 Av JB Clement, F-93430 Villetaneuse, France.
EM barbarossa@lipn.univ-paris13.fr; manzonetto@lipn.univ-paris13.fr
OI Manzonetto, Giulio/0000-0003-1448-9014; BARBAROSSA,
   DAVIDE/0000-0003-4608-8282
CR Accattoli B, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236789
   Accattoli B, 2018, ELECTRON NOTES THEOR, V338, P23, DOI 10.1016/j.entcs.2018.10.003
   [Anonymous], 1972, Toposes, algebraic geometry and logic, DOI DOI 10.1007/BFB0073967
   [Anonymous], 1984, Studies in Logic
   Barbarossa Davide, 2019, 3 INT WORKSH TRENDS
   Barendregt Henk P., 1977, Studies in Logic and the Foundations of Mathematics, V90, P1091, DOI [10.1016/s0049-237x(08)71129-7, DOI 10.1016/S0049-237X(08)71129-7]
   Baydin AG, 2018, J MACH LEARN RES, V18
   Berry Gerard., 1978, Proceedings of the Fifth Colloquium on Automata, Languages and Programming, P72
   Blute RF, 2006, MATH STRUCT COMP SCI, V16, P1049, DOI 10.1017/S0960129506005676
   Blute RF, 2009, THEOR APPL CATEG, V22, P622
   Boudol Gerard, 1993, Lecture Notes in Computer Science, V715, P1, DOI DOI 10.1007/3-540-57208-2
   Bucciarelli A, 2012, ANN PURE APPL LOGIC, V163, P918, DOI 10.1016/j.apal.2011.09.008
   Cockett JRB, 2019, MATH STRUCT COMP SCI, V29, P243, DOI 10.1017/S0960129518000014
   Cockett JRB, 2014, APPL CATEGOR STRUCT, V22, P331, DOI 10.1007/s10485-013-9312-0
   Dal Lago U, 2012, RAIRO-THEOR INF APPL, V46, P413, DOI 10.1051/ita/2012012
   Dal Lago Ugo, 2019, LIPIcs, V131, DOI [10.4230/LIPIcs.FSCD.2019.13, DOI 10.4230/LIPICS.FSCD.2019.13]
   De Carvalho D, 2018, MATH STRUCT COMP SCI, V28, P1169, DOI 10.1017/S0960129516000396
   Ehrhard T, 2006, THEOR COMPUT SCI, V364, P166, DOI 10.1016/j.tcs.2006.08.003
   Ehrhard T., 2002, Mathematical Structures in Computer Science, V12, P579, DOI 10.1017/S0960129502003729
   Ehrhard T, 2003, THEOR COMPUT SCI, V309, P1, DOI 10.1016/S0304-3975(03)00392-X
   Ehrhard T., 2012, LIPIcs, P259, DOI DOI 10.4230/LIPICS.CSL
   Ehrhard T, 2008, THEOR COMPUT SCI, V403, P347, DOI 10.1016/j.tcs.2008.06.001
   Ehrhard T, 2006, LECT NOTES COMPUT SC, V3988, P186, DOI 10.1007/11780342_20
   Ehrhard T, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(1:3)2019
   Ehrhard T, 2018, MATH STRUCT COMP SCI, V28, P995, DOI 10.1017/S0960129516000372
   Ehrhard T, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P174, DOI 10.1145/2967973.2968608
   Endrullis J, 2008, LECT NOTES COMPUT SC, V5117, P425, DOI 10.1007/978-3-540-70590-1_29
   Fiege S, 2018, OPTIM METHOD SOFTW, V33, P1073, DOI 10.1080/10556788.2017.1333613
   Fiore M, 2008, J LOND MATH SOC, V77, P203, DOI 10.1112/jlms/jdm096
   Goubault-Larrecq J, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785809
   Griewank A, 2018, OPTIM METHOD SOFTW, V33, P1089, DOI 10.1080/10556788.2017.1378653
   Guerrieri G, 2019, ELECTRON P THEOR COM, P15, DOI 10.4204/EPTCS.292.2
   HYLAND M, 1976, J LOND MATH SOC, V12, P361
   Jacobs B., 1997, Bulletin of the European Association for Theoretical Computer Science, P222
   Kahn Gilles, 1978, 333 INRIALABORIA
   Kerinec Emma, 2018, LOGICAL METHODS COMP
   Kozen D, 2017, MATH STRUCT COMP SCI, V27, P1132, DOI 10.1017/S0960129515000493
   Kuper J., 1995, Rewriting Techniques and Applications. 6th International Conference, RTA-95. Proceedings, P271
   Laird J, 2013, IEEE S LOG, P301, DOI 10.1109/LICS.2013.36
   Lassen S. B., 1999, Electronic Notes in Theoretical Computer Science, V20, DOI 10.1016/S1571-0661(04)80083-5
   Leventis T, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P649, DOI 10.1145/3209108.3209126
   Levy P. B., 2006, Higher-Order and Symbolic Computation, V19, P377, DOI 10.1007/s10990-006-0480-6
   Lusin S, 2004, J LOGIC COMPUT, V14, P373, DOI 10.1093/logcom/14.3.373
   Manzonetto G, 2014, ELECTRON NOTES THEOR, V308, P245, DOI 10.1016/j.entcs.2014.10.014
   Manzonetto G, 2009, LECT NOTES COMPUT SC, V5734, P574, DOI 10.1007/978-3-642-03816-7_49
   Nederpelt R.P., 1994, Selected Papers in Automath, V133
   Pagani M, 2014, ACM SIGPLAN NOTICES, V49, P647, DOI 10.1145/2535838.2535879
   Paolini L, 2017, MATH STRUCT COMP SCI, V27, P626, DOI 10.1017/S0960129515000316
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   PLOTKIN GD, 1974, J SYMBOLIC LOGIC, V39, P313, DOI 10.2307/2272645
   Statman Richard, 1999, J FUNCT PROGRAM, V9, P565
   Takahashi M., 1994, Logic, language and computation. Festschrift in honor of Satoru Takasu, P117, DOI 10.1007/BFb0032397
   Tsukada T, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P889, DOI 10.1145/3209108.3209157
   VANDAALEN DT, 1980, THESIS TU EINDHOVEN
   Vaux L, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(3:9)2019
   Vaux L, 2009, MATH STRUCT COMP SCI, V19, P1029, DOI 10.1017/S0960129509990089
   Wadsworth C. P., 1976, SIAM Journal on Computing, V5, P488, DOI 10.1137/0205036
   Walter SF, 2013, J COMPUT SCI-NETH, V4, P334, DOI 10.1016/j.jocs.2011.10.007
NR 58
TC 4
Z9 4
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 1
DI 10.1145/3371069
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400002
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Qu, WH
   Gaboardi, M
   Garg, D
AF Qu, Weihao
   Gaboardi, Marco
   Garg, Deepak
TI Relational Cost Analysis for Functional-Imperative Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE relational type systems; refinement types; type-and-effect systems
AB Relational cost analysis aims at formally establishing bounds on the difference in the evaluation costs of two programs. As a particular case, one can also use relational cost analysis to establish bounds on the difference in the evaluation cost of the same program on two different inputs. One way to perform relational cost analysis is to use a relational type-and-effect system that supports reasoning about relations between two executions of two programs.
   Building on this basic idea, we present a type-and-effect system, called ARel, for reasoning about the relative cost of array-manipulating, higher-order functional-imperative programs. The key ingredient of our approach is a new lightweight type refinement discipline that we use to track relations (differences) between two mutable arrays. This discipline combined with Hoare-style triples built into the types allows us to express and establish precise relative costs of several interesting programs which imperatively update their data. We have implemented ARel using ideas from bidirectional type checking.
C1 [Qu, Weihao; Gaboardi, Marco] Univ Buffalo SUNY, Buffalo, NY 14260 USA.
   [Garg, Deepak] MPI SWS, Saarbrucken, Germany.
C3 State University of New York (SUNY) System; State University of New York
   (SUNY) Buffalo
RP Qu, WH (corresponding author), Univ Buffalo SUNY, Buffalo, NY 14260 USA.
EM weihaoqu@buffalo.edu; gaboardi@buffalo.edu; dg@mpi-sws.org
RI Gaboardi, Marco/JPX-6816-2023
FU National Science Foundation [1718220]; Direct For Computer & Info Scie &
   Enginr; Division of Computing and Communication Foundations [1718220]
   Funding Source: National Science Foundation
FX This work is in part supported by the National Science Foundation under
   Grant No. 1718220.
CR Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Ahmed A, 2009, ACM SIGPLAN NOTICES, V44, P340, DOI 10.1145/1594834.1480925
   Ahmed Amal, 2004, SEMANTICS TYPES MUTA
   [Anonymous], 2010, Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research FOSER
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Atkey R, 2010, LECT NOTES COMPUT SC, V6012, P85, DOI 10.1007/978-3-642-11957-6_6
   Avanzini M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110287
   Barthe G, 2015, ACM SIGPLAN NOTICES, V50, P55, DOI [10.1145/2775051.2677000, 10.1145/10.1145/2676726.2677000]
   Barthe G, 2014, ACM SIGPLAN NOTICES, V49, P193, DOI 10.1145/2535838.2535847
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Benton N, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P188, DOI 10.1145/2967973.2968602
   Benton N, 2014, ACM SIGPLAN NOTICES, V49, P619, DOI 10.1145/2535838.2535869
   Bobot Francois, 2008, The Alt-Ergo automated theorem prover
   Brockschmidt Marc, 2014, TOOLS ALGORITHMS CON, V8413, P140
   Carbonneaux Q, 2015, ACM SIGPLAN NOTICES, V50, P467, DOI [10.1145/2813885.2737955, 10.1145/2737924.2737955]
   Charguéraud A, 2015, LECT NOTES COMPUT SC, V9236, P137, DOI 10.1007/978-3-319-22102-1_9
   Çiçek E, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P533, DOI 10.1145/3314221.3314603
   Çiçek E, 2017, ACM SIGPLAN NOTICES, V52, P316, DOI 10.1145/3093333.3009858
   Çiçek E, 2016, ACM SIGPLAN NOTICES, V51, P132, DOI 10.1145/3022670.2951950
   COOLEY JW, 1965, MATH COMPUT, V19, P297, DOI 10.2307/2003354
   Dal Lago U, 2011, IEEE S LOG, P133, DOI 10.1109/LICS.2011.22
   Danielsson NA, 2008, ACM SIGPLAN NOTICES, V43, P133, DOI 10.1145/1328897.1328457
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Gaboardi Marco, 2013, P POPL 2013, P357, DOI DOI 10.1145/2480359.2429113
   Grobauer B, 2001, ACM SIGPLAN NOTICES, V36, P253, DOI 10.1145/507669.507666
   Hermenegildo MV, 2005, SCI COMPUT PROGRAM, V58, P115, DOI 10.1016/j.scico.2005.02.006
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Hoffmann Jan, COMPUTER AIDED VERIF
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Lichtman Benjamin, 2017, 2 INT C FORM STRUCT
   Nanevski A, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2491522.2491523
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   Neis G, 2011, J FUNCT PROGRAM, V21, P497, DOI 10.1017/S0956796811000165
   Ngo Van Chan, 2017, 2017 IEEE S SEC PRIV
   Nielson F, 1999, LECT NOTES COMPUT SC, V1710, P114
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Radicek I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158124
   Reistad B., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P65, DOI 10.1145/182409.182439
   Sinn M, 2014, LECT NOTES COMPUT SC, V8559, P745, DOI 10.1007/978-3-319-08867-9_50
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P343, DOI 10.1145/2480359.2429111
   Unno H, 2017, LECT NOTES COMPUT SC, V10427, P571, DOI 10.1007/978-3-319-63390-9_30
   Wang P, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133903
   Zhang DF, 2015, ACM SIGPLAN NOTICES, V50, P503, DOI 10.1145/2694344.2694372
NR 43
TC 5
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 92
DI 10.1145/3341696
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900015
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Chakraborty, S
   Vafeiadis, V
AF Chakraborty, Soham
   Vafeiadis, Viktor
TI Grounding Thin-Air Reads with Event Structures
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Weak memory consistency; concurrency; promising semantics; C/C++11
AB The key challenge in defining the concurrency semantics of a programming language is how to enable the most efficient compilation to existing hardware architectures, and yet forbid programs from reading thin-air values, i.e., ones that do not appear in the program. At POPL'17, Kang et al. achieved a major breakthrough by introducing the 'promising' semantics that came with results showing that it was a good candidate solution to the problem. Unfortunately, however, the promising semantics is rather complicated, and due to its complexity it contains some flaws and limitations that are very hard to address.
   In response, we present an alternative solution to this problem based on event structures. We show that it is indeed a solution by establishing the standard results about the semantics (DRF theorems, implementation and optimization correctness) as well as a formal connection to the semantics of Kang et al. Further, we show that it is easier to adapt, by extending the semantics to cover features (such as SC accesses) that are not supported by Kang et al. and to rule out some dubious behaviors admitted by the promising semantics.
C1 [Chakraborty, Soham; Vafeiadis, Viktor] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
RP Chakraborty, S (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
EM sohachak@mpi-sws.org; viktor@mpi-sws.org
RI Vafeiadis, Viktor/B-5809-2014
OI Vafeiadis, Viktor/0000-0001-8436-0334
CR Abdulla PA, 2017, ACTA INFORM, V54, P789, DOI 10.1007/s00236-016-0275-0
   Abdulla PA, 2016, LECT NOTES COMPUT SC, V9780, P134, DOI 10.1007/978-3-319-41540-6_8
   Alglave J, 2018, ACM SIGPLAN NOTICES, V53, P405, DOI [10.1145/3296957.3177156, 10.1145/3173162.3177156]
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   [Anonymous], 2011, ISO/IEC 9899.
   [Anonymous], 1990, P ISCA, DOI DOI 10.1145/325164.325100
   [Anonymous], 2011, ISO/IEC 14882.
   Batty M, 2015, LECT NOTES COMPUT SC, V9032, P283, DOI 10.1007/978-3-662-46669-8_12
   Batty M, 2013, ACM SIGPLAN NOTICES, V48, P235, DOI 10.1145/2480359.2429099
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Boehm H.-J., 2014, MSPC, p7:1, DOI DOI 10.1145/2618128.2618134
   Chakraborty S, 2017, INT SYM CODE GENER, P100, DOI 10.1109/CGO.2017.7863732
   Chakraborty Soham., 2018, TECHNICAL APPENDIX
   Doko M, 2017, LECT NOTES COMPUT SC, V10201, P448, DOI 10.1007/978-3-662-54434-1_17
   Doko M, 2016, LECT NOTES COMPUT SC, V9583, P413, DOI 10.1007/978-3-662-49122-5_20
   Jeffrey A, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P759, DOI 10.1145/2933575.2934536
   Kaiser Jan-Oliver, 2017, ECOOP 2017 LIPICS, V74, DOI [10.4230/LIPIcs.ECOOP.2017, DOI 10.4230/LIPICS.ECOOP.2017]
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lahav O, 2016, LECT NOTES COMPUT SC, V9995, P479, DOI 10.1007/978-3-319-48989-6_29
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Manson Jeremy., 2004, CAUSALITY TEST CASES
   Norris B, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2806886
   Ou PZ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276506
   Pichon-Pharabod J, 2016, ACM SIGPLAN NOTICES, V51, P622, DOI 10.1145/2914770.2837616
   Podkopaev A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290382
   Podkopaev Anton, 2017, 31 EUR C OBJ OR PROG, V22, P28, DOI [10.4230/LIPIcs.ECOOP.2017.22, DOI 10.4230/LIPICS.ECOOP.2017.22]
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Sevcík J, 2008, LECT NOTES COMPUT SC, V5142, P27, DOI 10.1007/978-3-540-70592-5_3
   Sevcík J, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P306
   Svendsen Kasper, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P357, DOI 10.1007/978-3-319-89884-1_13
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Vafeiadis V, 2015, ACM SIGPLAN NOTICES, V50, P209, DOI [10.1145/2676726.2676995, 10.1145/2775051.2676995]
   Vafeiadis V, 2013, ACM SIGPLAN NOTICES, V48, P867, DOI [10.1145/2544173.2509532, 10.1145/2509136.2509532]
   Winskel G., 1987, LECT NOTES COMPUT SC, V255, P325
NR 37
TC 33
Z9 34
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 70
DI 10.1145/3290383
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300070
OA gold
DA 2024-07-18
ER

PT J
AU Späth, J
   Ali, K
   Bodden, E
AF Spath, Johannes
   Ali, Karim
   Bodden, Eric
TI Context-, Flow-, and Field-Sensitive Data-Flow Analysis using
   Synchronized Pushdown Systems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE static analysis; data-flow; aliasing; access paths; pushdown system
ID POINTS-TO ANALYSIS
AB Precise static analyses are context-, field- and flow-sensitive. Context- and field-sensitivity are both expressible as context-free language (CFL) reachability problems. Solving both CH, problems along the same data-flow path is undecidable, which is why most flow-sensitive data-flow analyses over-approximate field-sensitivity through k-limited access-path, or through access graphs. Unfortunately, as our experience and this paper show, both representations do not scale very well when used to analyze programs with recursive data structures.
   Any single CFL-reachability problem is efficiently solvable, by means of a pushdown system. This work thus introduces the concept of synchronized pushdown systems (SPDS). SPDS encode both procedure calls/returns and field stores/loads as separate but "synchronized" CFL reachability problems. An SPDS solves both individual problems precisely, and approximation occurs only in corner cases that are apparently rare in practice: at statements where both problems are satisfied but not along the same data-flow path.
   SPDS are also efficient: formal complexity analysis shows that SPDS shift the complexity from vertical bar F vertical bar(3k) under k-limiting to vertical bar S vertical bar vertical bar F vertical bar(2), where F is the set of fields and S the set of statements involved in a data-flow. Our evaluation using DaCapo shows this shift to pay off in practice: SPDS are almost as efficient as k-limiting with k = 1 although their precision equals k = infinity. For a typestate analysis SPDS accelerate the analysis up to 83x for data-flows of objects that involve many field accesses but span rather few methods.
   We conclude that SPDS can provide high precision and further improve scalability, in particularly when used in analyses that expose rather local data flows.
C1 [Spath, Johannes; Bodden, Eric] Fraunhofer IEM, Paderborn, Germany.
   [Ali, Karim] Univ Alberta, Edmonton, AB, Canada.
   [Bodden, Eric] Univ Paderborn, Heinz Nixdorf Inst, Paderborn, Germany.
C3 University of Alberta; University of Paderborn
RP Späth, J (corresponding author), Fraunhofer IEM, Paderborn, Germany.
EM johannes.spaeth@iem.fraunhofer.de; karim.ali@ualberta.ca;
   eric.bodden@uni-paderborn.de
RI Bodden, Eric/AAE-1365-2021
OI Bodden, Eric/0000-0003-3470-3647
FU Fraunhofer Attract grant; Heinz Nixdorf Foundation; National Sciences
   and Engineering Research Council of Canada
FX This research was supported by a Fraunhofer Attract grant as well as the
   Heinz Nixdorf Foundation. This material is also based upon work
   supported by the National Sciences and Engineering Research Council of
   Canada.
CR [Anonymous], 2000, LNCS, DOI [10.1007/10722167_20, DOI 10.1007/1072216720]
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Balatsouras George, 2017, P 6 ACM SIGPLAN INT, P7, DOI [10.1145/3088515.3088517, DOI 10.1145/3088515.3088517]
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bodden Eric., 2018, SOAP INT WORKSH STAT, P84
   Bodden Eric, 2012, P ACM SIGPLAN INT WO, P3, DOI DOI 10.1145/2259051.2259052
   Bouajjani A, 1997, LECT NOTES COMPUT SC, V1243, P135
   Chatterjee K, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158118
   Cheng BC, 2000, ACM SIGPLAN NOTICES, V35, P57, DOI 10.1145/358438.349311
   De A, 2012, LECT NOTES COMPUT SC, V7313, P665, DOI 10.1007/978-3-642-31057-7_29
   DEUTSCH A, 1994, SIGPLAN NOTICES, V29, P230, DOI 10.1145/773473.178263
   Earl Christopher, 2012, ABS120718132012 CORR
   Feng Y, 2015, LECT NOTES COMPUT SC, V9458, P465, DOI 10.1007/978-3-319-26529-2_25
   Fink SJ, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348255
   Finkel A., 1997, Electronic Notes in Theoretical Computer Science, V9, DOI 10.1016/S1571-0661(05)80426-8
   Geffken M, 2014, LECT NOTES COMPUT SC, V8687, P188
   Gilray T, 2016, ACM SIGPLAN NOTICES, V51, P691, DOI 10.1145/2914770.2837631
   Grech Neville, 2017, OBJECT ORIENTED PROG
   Hauzar D, 2014, ELECTRON PROC THEOR, P56, DOI 10.4204/EPTCS.150.6
   Hovemeyer David., 2004, ACM Conference on Object-Oriented Programming Systems, Lan-guages, and Applications, OOPSLA '04, P132
   Kahlon V, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P13, DOI 10.1145/1595696.1595701
   Kanvar V, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2931098
   Karkare B, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1286821.1286829
   Kastrinis G, 2018, CC'18: PROCEEDINGS OF THE 27TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P48, DOI 10.1145/3178372.3179519
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   Kruger Stefan, 2018, EUR C OBJ OR PROGR E, V10, P1
   Lal A, 2005, LECT NOTES COMPUT SC, V3576, P434
   Lal A, 2008, LECT NOTES COMPUT SC, V5079, P93
   Lal A, 2006, LECT NOTES COMPUT SC, V4144, P343, DOI 10.1007/11817963_32
   Lam P, 2011, CET US COMP INF WORK
   Lerch J, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P98, DOI 10.1145/2635868.2635878
   Lerch J, 2015, IEEE INT CONF AUTOM, P619, DOI 10.1109/ASE.2015.9
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Livshits VB, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 14TH USENIX SECURITY SYMPOSIUM, P271
   Martin M, 2005, ACM SIGPLAN NOTICES, V40, P365, DOI 10.1145/1103845.1094840
   Might M, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P305, DOI 10.1145/1806596.1806631
   Naeem NA, 2010, LECT NOTES COMPUT SC, V6011, P124, DOI 10.1007/978-3-642-11970-5_8
   Nanda MG, 2009, PROC INT CONF SOFTW, P133, DOI 10.1109/ICSE.2009.5070515
   Padhye Rohan., 2013, P 2 ACM SIGPLAN INT, P31
   Reps T, 2005, SCI COMPUT PROGRAM, V58, P206, DOI 10.1016/j.scico.2005.02.009
   Reps T, 2003, LECT NOTES COMPUT SC, V2694, P189
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T, 2000, ACM T PROGR LANG SYS, V22, P162, DOI 10.1145/345099.345137
   Reps T, 2007, LECT NOTES COMPUT SC, V4855, P23
   Reps T, 2016, ACM SIGPLAN NOTICES, V51, P663, DOI 10.1145/2914770.2837659
   Sagiv M, 1996, THEOR COMPUT SCI, V167, P131, DOI 10.1016/0304-3975(96)00072-2
   Spath Johannes, 2017, OBJECT ORIENTED PROG
   Spath Johannes, 2016, 30 EUR C OBJ OR PROG, V22, P1, DOI [10.4230/LIPIcs.ECOOP.2016.22, DOI 10.4230/LIPICS.ECOOP.2016.22]
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan Manu, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P196, DOI 10.1007/978-3-642-36946-9_8
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Tripp O, 2013, LECT NOTES COMPUT SC, V7793, P210, DOI 10.1007/978-3-642-37057-1_15
   Tripp O, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P87, DOI 10.1145/1542476.1542486
   Vardoulakis D, 2010, LECT NOTES COMPUT SC, V6012, P570, DOI 10.1007/978-3-642-11957-6_30
   Xu GQ, 2009, LECT NOTES COMPUT SC, V5653, P98
   Yan Dacong, 2011, P 2011 INT S SOFTW T, P155, DOI [10.1145/2001420.2001440, DOI 10.1145/2001420.2001440]
   Zhang QR, 2013, ACM SIGPLAN NOTICES, V48, P435, DOI 10.1145/2499370.2462159
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P344, DOI 10.1145/3093333.3009848
NR 59
TC 47
Z9 50
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 48
DI 10.1145/3290361
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300048
OA gold
DA 2024-07-18
ER

PT J
AU Prinz, J
   Lampropoulos, L
AF Prinz, Jacob
   Lampropoulos, Leonidas
TI Merging Inductive Relations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE inductive relations; merging; QuickChick
AB Inductive relations offer a powerful and expressive way of writing program specifications while facilitating compositional reasoning. Their widespread use by proof assistant users has made them a particularly attractive target for proof engineering tools such as QuickChick, a property-based testing tool for Coq which can automatically derive generators for values satisfying an inductive relation. However, while such generators are generally efficient, there is an infrequent yet seemingly inevitable situation where their performance greatly degrades: when multiple inductive relations constrain the same piece of data. In this paper, we introduce an algorithm for merging two such inductively defined properties that share an index. The algorithm finds shared structure between the two relations, and creates a single merged relation that is provably equivalent to the conjunction of the two. We demonstrate, through a series of case studies, that the merged relations can improve the performance of automatic generation by orders of magnitude, as well as simplify mechanized proofs by getting rid of the need for nested induction and tedious low-level book-keeping.
C1 [Prinz, Jacob; Lampropoulos, Leonidas] Univ Maryland, College Pk, MD 20742 USA.
C3 University System of Maryland; University of Maryland College Park
RP Prinz, J (corresponding author), Univ Maryland, College Pk, MD 20742 USA.
EM jacobeliasprinz@gmail.com; leonidas@umd.edu
OI Lampropoulos, Leonidas/0000-0003-0269-9815
FU NSF [2145649, 2107206]
FX We thank Zoe Paraskevopoulou, Alex Kavvos, Antal Spector-Zabusky, and
   the anonymous reviewers for their helpful comments. This work was
   supported by NSF award #2107206, Efficient and Trustworthy Proof
   Engineering, and NSF award #2145649, CAREER: Fuzzing Formal
   Specifications (any opinions, findings and conclusions or
   recommendations expressed in this material are those of the authors and
   do not necessarily reflect the views of the NSF).
CR Appel Andrew W., 2022, SOFTWARE FDN, V3
   Bulwahn Lukas, 2012, Certified Programs and Proofs. Second International Conference (CPP 2012). Proceedings, P92, DOI 10.1007/978-3-642-35308-6_10
   Bulwahn L, 2012, LECT NOTES COMPUT SC, V7180, P153, DOI 10.1007/978-3-642-28717-6_14
   Chamarthi HR, 2011, ELECTRON PROC THEOR, P4, DOI 10.4204/EPTCS.70.1
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Claessen K, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000143
   Dagand PE, 2014, J FUNCT PROGRAM, V24, P316, DOI 10.1017/S0956796814000069
   Eastlund Carl., 2009, ACL2
   Fetscher B, 2015, LECT NOTES COMPUT SC, V9032, P383, DOI 10.1007/978-3-662-46669-8_16
   Hritcu C, 2016, J FUNCT PROGRAM, V26, DOI 10.1017/S0956796816000058
   Hughes J, 2020, LECT NOTES COMPUT SC, V12053, P58, DOI 10.1007/978-3-030-47147-7_4
   IPBES, 2019, Summary for policymakers of the global assessment report on biodiversity and ecosystem services of the Intergovernmental Science-Policy Platform on Biodiversity and Ecosystem Services, DOI [https://doi.org/10.5281/zenodo.2616458, DOI 10.5281/ZENODO.2616458, 10.5281/ZENODO.2616458]
   Ko HS, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000307
   Ko HS, 2011, WGP 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P13
   Lampropoulos L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158133
   Lampropoulos L, 2017, ACM SIGPLAN NOTICES, V52, P114, DOI 10.1145/3093333.3009868
   Lampropoulos Leonidas, 2018, Ph. D. Dissertation
   Lampropoulos Leonidas, 2018, ELECT TXB
   Leonidas Lampropoulos, 2023, QUICKCHICK 2 0 REL
   Lindblad F., 2007, TRENDS FUNCTIONAL PR, P105
   Midtgaard J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110259
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   Palka M.H., 2011, Proceeding of the 6th international workshop on Automation of software test, AST '11, P91, DOI 10.1145/1982595.1982615
   Paraskevopoulou Z, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P966, DOI 10.1145/3519939.3523707
   Pierce Benjamin C., 2018, Electronic textbook
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   The Coq Development Team, 2023, Zenodo, DOI 10.5281/ZENODO.1003420
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
NR 29
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 178
DI 10.1145/3591292
PG 20
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900074
OA gold
DA 2024-07-18
ER

PT J
AU Yoon, Y
   Lee, W
   Yi, K
AF Yoon, Yongho
   Lee, Woosuk
   Yi, Kwangkeun
TI Inductive Program Synthesis via Iterative Forward-Backward Abstract
   Interpretation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Programming by Example; Abstract Interpretation
ID STATIC ANALYSIS
AB A key challenge in example-based program synthesis is the gigantic search space of programs. To address this challenge, various work proposed to use abstract interpretation to prune the search space. However, most of existing approaches have focused only on forward abstract interpretation, and thus cannot fully exploit the power of abstract interpretation. In this paper, we propose a novel approach to inductive program synthesis via iterative forward-backward abstract interpretation. The forward abstract interpretation computes possible outputs of a program given inputs, while the backward abstract interpretation computes possible inputs of a program given outputs. By iteratively performing the two abstract interpretations in an alternating fashion, we can effectively determine if any completion of each partial program as a candidate can satisfy the input-output examples. We apply our approach to a standard formulation, syntax-guided synthesis (SyGuS), thereby supporting a wide range of inductive synthesis tasks. We have implemented our approach and evaluated it on a set of benchmarks from the prior work. The experimental results show that our approach significantly outperforms the state-of-the-art approaches thanks to the sophisticated abstract interpretation techniques.
C1 [Yoon, Yongho; Yi, Kwangkeun] Seoul Natl Univ, Dept Comp Sci & Engn, Seoul, South Korea.
   [Lee, Woosuk] Hanyang Univ, Dept Comp Sci & Engn, Seoul, South Korea.
C3 Seoul National University (SNU); Hanyang University
RP Yoon, Y (corresponding author), Seoul Natl Univ, Dept Comp Sci & Engn, Seoul, South Korea.
EM yhyoon@ropas.snu.ac.kr; woosuk@hanyang.ac.kr; kwang@ropas.snu.ac.kr
OI Lee, Woosuk/0000-0002-1884-619X; Yoon, Yongho/0009-0005-4962-0416
FU IITP [2022-0-00995]; NRF [2020R1C1C1014518, 2021R1A5A1021944]; Supreme
   Prosecutors' Office of the Republic of Korea - Ministry of Science and
   ICT [0536-20220043]; BK21 FOUR Intelligence Computing (Dept. of CSE,
   SNU) - Korea government (MSIT) [4199990214639]; Sparrow Co., Ltd.;
   Samsung Electronics Co., Ltd. [IO220411-09496-01]; Greenlabs
   [0536-20220078]; Cryptolab [0536-20220081]
FX We thank the reviewers for insightful comments. This work was supported
   by IITP (2022-0-00995), NRF (2020R1C1C1014518, 2021R1A5A1021944),
   Supreme Prosecutors' Office of the Republic of Korea grant funded by
   Ministry of Science and ICT(0536-20220043), BK21 FOUR Intelligence
   Computing (Dept. of CSE, SNU) (4199990214639) grant funded by the Korea
   government (MSIT), Sparrow Co., Ltd., Samsung Electronics Co., Ltd.
   (IO220411-09496-01), Greenlabs (0536-20220078), and Cryptolab
   (0536-20220081).
CR Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 2020, SYGUS COMP
   Barke S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428295
   Barrett Clark W., 2010, P 8 INT WORKSH SAT M
   Blazytko T, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P643
   Costantini G, 2011, LECT NOTES COMPUT SC, V6991, P505, DOI 10.1007/978-3-642-24559-6_34
   COUSOT P, 1992, J LOGIC PROGRAM, V13, P103, DOI 10.1016/0743-1066(92)90030-7
   Cousot P., 1999, Automated Software Engineering, V6, P69, DOI 10.1023/A:1008649901864
   Cousot P., 2021, Principles of Abstract Interpretation
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1978, METHODES ITERATIVES
   David Robin, 2020, P 2020 WORKSHOP BINA
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dimovski AS, 2020, LECT NOTES COMPUT SC, V12076, P182, DOI 10.1007/978-3-030-45234-6_9
   Doh KG, 2009, LECT NOTES COMPUT SC, V5673, P256
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Gange G, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2651360
   GRANGER P, 1992, LECT NOTES COMPUT SC, V652, P68
   GRANGER P, 1989, INT J COMPUT MATH, V30, P165, DOI 10.1080/00207168908803778
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Guo Z, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371080
   Hu QHP, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1128, DOI 10.1145/3385412.3385979
   Inala JP, 2016, LECT NOTES COMPUT SC, V9710, P302, DOI 10.1007/978-3-319-40970-2_19
   Kafle B, 2015, PROCEEDINGS OF THE 2015 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'15), P85, DOI 10.1145/2678015.2682544
   Kanagasabapathi Somasundaram, 2020, COMPUT SCI, V21
   Kim SW, 2011, LECT NOTES COMPUT SC, V6538, P294, DOI 10.1007/978-3-642-18275-4_21
   Kini D, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P776
   Lakhdar-Chaouch L, 2011, LECT NOTES COMPUT SC, V6996, P492, DOI 10.1007/978-3-642-24372-1_38
   Lee D, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P503, DOI 10.1145/3385412.3385996
   Lee W, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434335
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   Massé D, 2001, LECT NOTES COMPUT SC, V2053, P103
   Menguy G, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2513, DOI 10.1145/3460120.3485250
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Mine Antoine, 2012, WING 12 4 INT WORKSH, P16
   Mukherjee M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428245
   Pailoor S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P574, DOI 10.1145/3453483.3454063
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Regehr J, 2006, ACM SIGPLAN NOTICES, V41, P34, DOI 10.1145/1134650.1134657
   Rival X, 2005, LECT NOTES COMPUT SC, V3672, P303
   Rival Xavier, 2020, INTRO STAT ANAL ABST
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Sharma T, 2017, LECT NOTES COMPUT SC, V10145, P500, DOI 10.1007/978-3-319-52234-0_27
   Simon A, 2007, LECT NOTES COMPUT SC, V4634, P121
   Singh G, 2017, ACM SIGPLAN NOTICES, V52, P46, DOI 10.1145/3093333.3009885
   Singh Rishabh, 2011, FSE, P289, DOI DOI 10.1145/2025113.2025153
   So S, 2017, LECT NOTES COMPUT SC, V10422, P364, DOI 10.1007/978-3-319-66706-5_18
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Vechev M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P327, DOI 10.1145/1706299.1706338
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
   Wang XY, 2018, LECT NOTES COMPUT SC, V10981, P407, DOI 10.1007/978-3-319-96145-3_22
   Warren H., 2012, Hacker's delight, V2nd
   Yin BH, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2019), P162, DOI 10.1109/ICSE-Companion.2019.00067
   Yin BH, 2019, LECT NOTES COMPUT SC, V11822, P247, DOI 10.1007/978-3-030-32304-2_13
   Yoon Yongho, 2023, Zenodo, DOI 10.5281/ZENODO.7816533
NR 57
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 174
DI 10.1145/3591288
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900070
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Le Glaunec, A
   Kong, LK
   Mamouras, K
AF Le Glaunec, Alexis
   Kong, Lingkun
   Mamouras, Konstantinos
TI Regular Expression Matching using Bit Vector Automata
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE regex; automata theory; bounded repetition; counter automata
ID EFFICIENT; ARCHITECTURE; DERIVATIVES
AB Regular expressions (regexes) are ubiquitous in modern software. There is a variety of implementation techniques for regex matching, which can be roughly categorized as (1) relying on backtracking search, or (2) being based on finite-state automata. The implementations that use backtracking are often chosen due to their ability to support advanced pattern-matching constructs. Unfortunately, they are known to suffer from severe performance problems. For some regular expressions, the running time for matching can be exponential in the size of the input text. In order to provide stronger guarantees of matching efficiency, automata-based regex matching is the preferred choice. However, even these regex engines may exhibit severe performance degradation for some patterns. The main reason for this is that regexes used in practice are not exclusively built from the classical regular constructs, i.e., concatenation, nondeterministic choice and Kleene's star. They involve additional constructs that provide succinctness and convenience of expression. The most common such construct is bounded repetition (also called counting), which describes the repetition of the pattern a fixed number of times. In this paper, we propose a new algorithm for the efficient matching of regular expressions that involve bounded repetition. Our algorithms are based on a new model of automata, which we call nondeterministic bit vector automata (NBVA). This model is chosen to be expressively equivalent to nondeterministic counter automata with bounded counters, a very natural model for expressing patterns with bounded repetition. We show that there is a class of regular expressions with bounded repetition that can be matched in time that is independent from the repetition bounds. Our algorithms are general enough to cover the vast majority of challenging bounded repetitions that arise in practice. We provide an implementation of our approach in a regex engine, which we call BVA-Scan. We compare BVA-Scan against state-of-the-art regex engines on several real datasets.
C1 [Le Glaunec, Alexis; Kong, Lingkun; Mamouras, Konstantinos] Rice Univ, Dept Comp Sci, Houston, TX 77251 USA.
C3 Rice University
RP Le Glaunec, A (corresponding author), Rice Univ, Dept Comp Sci, Houston, TX 77251 USA.
EM alexis.leglaunec@rice.edu; klk@rice.edu; mamouras@rice.edu
OI Kong, Lingkun/0000-0003-0672-2998; Le Glaunec,
   Alexis/0000-0002-5444-5924; Mamouras, Konstantinos/0000-0003-1209-7738
FU US National Science Foundation [CCF 2008096]; Rice University Faculty
   Initiative Fund
FX We would like to thank the anonymous reviewers for their constructive
   comments. This research was supported in part by the US National Science
   Foundation award CCF 2008096 and the Rice University Faculty Initiative
   Fund.
CR AHO AV, 1975, COMMUN ACM, V18, P333, DOI 10.1145/360825.360855
   [Anonymous], 2021, CSA AUT LIB
   [Anonymous], 2022, GNU AWK
   [Anonymous], 1972, IEEE 13 ANN S SWITCH, DOI [10.1109/SWAT.1972.29, DOI 10.1109/SWAT.1972.29]
   [Anonymous], 2022, AP SPAMASSASSIN
   [Anonymous], 2022, POS SYNT PCRE
   [Anonymous], 1973, P 5 S THEOR COMP, DOI [10.1145/800125.804029, DOI 10.1145/800125.804029]
   [Anonymous], 1961, Surveys, DOI [10.1070/RM1961v016n05ABEH004112, DOI 10.1070/RM1961V016N05ABEH004112]
   Antimirov V, 1996, THEOR COMPUT SCI, V155, P291, DOI 10.1016/0304-3975(95)00182-4
   Backreferences, 2022, BACK REF PCRE
   BAEZAYATES R, 1992, COMMUN ACM, V35, P74, DOI 10.1145/135239.135243
   Barringer H, 2004, LECT NOTES COMPUT SC, V2937, P44
   Bartocci Ezio, 2018, Lectures on Runtime. Verification Introductory and Advanced Topics. LNCS 10457, P135, DOI 10.1007/978-3-319-75632-5_5
   Becchi Michela, 2008, P 2008 ACM C EM NETW, P25, DOI [10.1145/1544012.1544037, DOI 10.1145/1544012.1544037]
   Bispo J, 2006, 2006 IEEE INTERNATIONAL CONFERENCE ON FIELD PROGRAMMABLE TECHNOLOGY, PROCEEDINGS, P119, DOI 10.1109/FPT.2006.270302
   Bo C, 2018, INT S HIGH PERF COMP, P737, DOI 10.1109/HPCA.2018.00068
   BOYER RS, 1977, COMMUN ACM, V20, P762, DOI 10.1145/359842.359859
   Brodie BC, 2006, CONF PROC INT SYMP C, P191, DOI 10.1145/1150019.1136500
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Chattopadhyay A, 2020, LECT NOTES COMPUT SC, V12399, P383, DOI 10.1007/978-3-030-60508-7_21
   ClamAV, 2023, CLAMAV OP SOURC ANT
   Commentz-Walter B., 1979, Automata, Languages and Programming, P118
   Davis JC, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P1256, DOI 10.1145/3338906.3342509
   Dlugosch P, 2014, IEEE T PARALL DISTR, V25, P3088, DOI 10.1109/TPDS.2014.8
   Fang Yu, 2006, ACM/IEEE Symposium on Architectures for Networking and Communications Systems (ANCS 2006), P93, DOI 10.1109/ANCS.2006.4579527
   Gelade W, 2009, LECT NOTES COMPUT SC, V5734, P369, DOI 10.1007/978-3-642-03816-7_32
   GNU Grep, 2022, GNU GREP GLOB REG EX
   Goyvaerts Jan, 2021, RUNAWAY REGULAR EXPR
   Hazel Philip, 2022, PCRE2 PERL COMPATIBL
   Holík L, 2019, LECT NOTES COMPUT SC, V11893, P468, DOI 10.1007/978-3-030-34175-6_24
   Hovland D, 2009, LECT NOTES COMPUT SC, V5684, P231, DOI 10.1007/978-3-642-03466-4_15
   KARP RM, 1987, IBM J RES DEV, V31, P249, DOI 10.1147/rd.312.0249
   Knuth D. E., 1977, SIAM Journal on Computing, V6, P323, DOI 10.1137/0206024
   Kong LK, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P733, DOI 10.1145/3519939.3523456
   Mamouras Konstantinos, 2021, Tools and Algorithms for the Construction and Analysis of Systems. 27th International Conference, TACAS 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12651), P330, DOI 10.1007/978-3-030-72016-2_18
   Mamouras K, 2021, LECT NOTES COMPUT SC, V12974, P142, DOI 10.1007/978-3-030-88494-9_8
   Mamouras K, 2020, IEEE T COMPUT AID D, V39, P3868, DOI 10.1109/TCAD.2020.3013053
   Meyer A. R., 1971, Conference record 1971 12th annual symposium on switching and automata theory, P188
   RE2, 2023, RE2: Google's regular expression library
   RegexLib, 2023, REG EXPR LIB
   Roesch M, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE THIRTEENTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XIII), P229
   Roy I, 2016, IEEE ACM T COMPUT BI, V13, P99, DOI 10.1109/TCBB.2015.2430313
   Saarikivi O, 2019, LECT NOTES COMPUT SC, V11427, P372, DOI 10.1007/978-3-030-17462-0_24
   Sigrist CJA, 2010, NUCLEIC ACIDS RES, V38, pD161, DOI 10.1093/nar/gkp885
   Smith R, 2008, P IEEE S SECUR PRIV, P187, DOI 10.1109/SP.2008.14
   Snort, 2023, SNORT NETW INTR DET
   Suricata, 2023, SUR OP SOURC INTR DE
   THOMPSON K, 1968, COMMUN ACM, V11, P419, DOI 10.1145/363347.363387
   Turonová L, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428286
   Wang X, 2019, PROCEEDINGS OF THE 16TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P631
NR 50
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586044
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600019
OA gold
DA 2024-07-18
ER

PT J
AU Al Thokair, M
   Zhang, MJ
   Mathur, U
   Viswanathan, M
AF Al Thokair, Mosaad
   Zhang, Minjian
   Mathur, Umang
   Viswanathan, Mahesh
TI Dynamic Race Detection with O(1) Samples
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Concurrency; Shared memory; Dynamic program analysis; Property testing;
   Happens-before race detection
ID SOUND; SOFTWARE; TIME
AB Happens before-based dynamic analysis is the go-to technique for detecting data races in large scale software projects due to the absence of false positive reports. However, such analyses are expensive since they employ expensive vector clock updates at each event, rendering them usable only for in-house testing. In this paper, we present a sampling-based, randomized race detector that processes only constantly many events of the input trace even in the worst case. This is the first sub-linear time (i.e., running in o (n) time where = is the length of the trace) dynamic race detection algorithm; previous sampling based approaches like Pacer run in linear time (i.e., o (n)). Our algorithm is a property tester for HB-race detection - it is sound in that it never reports any false positive, and on traces that are far, with respect to hamming distance, from any race-free trace, the algorithm detects an HB-race with high probability. Our experimental evaluation of the algorithm and its comparison with state-of-the-art deterministic and sampling based race detectors shows that the algorithm does indeed have significantly low running time, and detects races quite often.
C1 [Al Thokair, Mosaad; Zhang, Minjian; Viswanathan, Mahesh] Univ Illinois, Urbana, IL 61801 USA.
   [Mathur, Umang] Natl Univ Singapore, Singapore, Singapore.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   National University of Singapore
RP Al Thokair, M (corresponding author), Univ Illinois, Urbana, IL 61801 USA.
EM mosaada2@illinois.edu; minjian2@illinois.edu; umathur@comp.nus.edu.sg;
   vmahesh@illinois.edu
OI Mathur, Umang/0000-0002-7610-0660
CR Abadi M, 2006, ACM T PROGR LANG SYS, V28, P207, DOI 10.1145/1119479.1119480
   Advanced Simulation and Computing LLNL, CORAL BENCHM
   Advanced Simulation and Computing LLNL, 2022, CORAL BENCHM
   Adve S, 2010, COMMUN ACM, V53, P84, DOI 10.1145/1839676.1839697
   Agrawal K, 2018, SODA'18: PROCEEDINGS OF THE TWENTY-NINTH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P156
   Alon N, 2001, SIAM J COMPUT, V30, P1842, DOI 10.1137/S0097539700366528
   [Anonymous], 2000, Programming Language Design and Implementation, DOI [DOI 10.1145/358438.349328, 10.1145/349299.349328]
   [Anonymous], 2007, P THE 6 JOINT M EUR
   [Anonymous], 2021, INTEL INSPECTOR
   [Anonymous], 2023, PROC ACM PROGRAM LAN, V7, DOI [10.1145/3276515, DOI 10.1145/3276515]
   BAILEY DH, 1991, SUPERCOMPUTING 91, P158
   Biswas S, 2017, CC'17: PROCEEDINGS OF THE 26TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P11, DOI 10.1145/3033019.3033020
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Blackshear S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276514
   Boehm HJ, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P68, DOI 10.1145/1375581.1375591
   Boehm Hans-Juergen, 2011, 3 USENIX WORKSH HOT
   Bond MD, 2013, ACM SIGPLAN NOTICES, V48, P693, DOI [10.1145/2509136.2509519, 10.1145/2544173.2509519]
   Bond MD, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P255, DOI 10.1145/1806596.1806626
   Burckhardt S, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P167
   Chen DJ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P15, DOI 10.1145/3236024.3236077
   Cheng G.-I., 1998, SPAA '98. Tenth Annual ACM Symposium on Parallel Algorithms and Architectures, P298, DOI 10.1145/277651.277696
   Choi JD, 2002, ACM SIGPLAN NOTICES, V37, P258, DOI 10.1145/543552.512560
   Devietti J, 2012, CONF PROC INT SYMP C, P201, DOI 10.1109/ISCA.2012.6237018
   Dimitrov D, 2015, SPAA'15: PROCEEDINGS OF THE 27TH ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P101, DOI 10.1145/2755573.2755601
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Dorta AJ, 2005, 13TH EUROMICRO CONFERENCE ON PARALLEL, DISTRIBUTED AND NETWORK-BASED PROCESSING, PROCEEDINGS, P244, DOI 10.1109/EMPDP.2005.41
   Elmas T, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P245, DOI 10.1145/1250734.1250762
   Erickson John., 2010, OSDI, P151
   Farzan A, 2009, LECT NOTES COMPUT SC, V5643, P248, DOI 10.1007/978-3-642-02658-4_21
   FIDGE C, 1991, COMPUTER, V24, P28, DOI 10.1109/2.84874
   Flanagan C, 2013, LECT NOTES COMPUT SC, V7920, P255, DOI 10.1007/978-3-642-39038-8_11
   Flanagan C, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1377492.1377495
   Flanagan C, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P121, DOI 10.1145/1542476.1542490
   Flann C., 2010, Addressing global change: a new agenda for botanic gardens. Fourth Global Botanic Gardens Congress, Dublin, Irish Republic, 13-18 June 2010, P1, DOI 10.1145/1806672.1806674
   Goldreich O., 2017, Introduction to Property Testing, DOI DOI 10.1017/9781108135252
   Havelund K, 2000, LECT NOTES COMPUT SC, V1885, P245
   Huang J, 2014, ACM SIGPLAN NOTICES, V49, P337, DOI [10.1145/2666356.2594315, 10.1145/2594291.2594315]
   Itzkovitz A, 1999, J PARALLEL DISTR COM, V59, P180, DOI 10.1006/jpdc.1999.1574
   Jeong DR, 2019, P IEEE S SECUR PRIV, P754, DOI 10.1109/SP.2019.00017
   Kahlon V, 2005, LECT NOTES COMPUT SC, V3576, P505
   Kasikci B, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P406, DOI 10.1145/2517349.2522736
   Kini D, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P26, DOI 10.1145/3236024.3236025
   Kini D, 2017, ACM SIGPLAN NOTICES, V52, P157, DOI [10.1145/3062341.3062374, 10.1145/3140587.3062374]
   Kulkarni Rucha, 2021, 32 INT C CONC THEOR, V16, P1
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Liao CH, 2017, SC'17: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, DOI 10.1145/3126908.3126958
   LLNL, 2022, ECP PROX APPL
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Marino D, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P134, DOI 10.1145/1542476.1542491
   Mathur U, 2022, ASPLOS '22: PROCEEDINGS OF THE 27TH ACM INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P710, DOI 10.1145/3503222.3507734
   Mathur U, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276515
   Mathur U, 2020, IEEE S LOG, P713, DOI 10.1145/3373718.3394783
   Mathur U, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434317
   Mathur U, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P183, DOI 10.1145/3373376.3378475
   Mattern F., 1989, Parallel and Distributed Algorithms. Proceedings of the International Workshop, P215
   Mingdong Feng, 1997, SPAA '97. 9th Annual ACM Symposium on Parallel Algorithms and Architectures, P1, DOI 10.1145/258492.258493
   Mühlenfeld A, 2007, PROCEEDINGS OF THE 2007 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING PPOPP'07, P142
   Mukherjee S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428298
   Musuvathi M., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, P267
   Musuvathi M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P446, DOI 10.1145/1250734.1250785
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Narayanasamy S, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P22, DOI 10.1145/1250734.1250738
   O'Callahan R., 2003, SIGPLAN Notices, V38, P166, DOI 10.1145/966049.781528
   Pavlogiannis A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371085
   Pozniansky E, 2003, ACM SIGPLAN NOTICES, V38, P178, DOI 10.1145/966049.781529
   Raman R, 2012, ACM SIGPLAN NOTICES, V47, P531, DOI [10.1145/2345156.2254127, 10.1145/2345156.1993502]
   Rhodes D, 2017, ACM SIGPLAN NOTICES, V52, P141, DOI [10.1145/3140587.3062350, 10.1145/3062341.3062350]
   Roemer J, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P747, DOI 10.1145/3385412.3385993
   Roemer J, 2018, ACM SIGPLAN NOTICES, V53, P374, DOI [10.1145/3296979.3192385, 10.1145/3192366.3192385]
   Sandia National Laboratories, 2022, MANT PROJ
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   Schmitz Adrian, 2020, EUROPAR 2019 PARALLE
   Sen K, 2005, LECT NOTES COMPUT SC, V3535, P211
   Sen K, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P11, DOI 10.1145/1375581.1375584
   Serebryany K., 2012, Dynamic race detection with the LLVM compiler, V7186, P110, DOI 10.1007/978-3-642-29860-8
   Serebryany Konstantin, 2009, Proceedings of the Workshop on Binary Instrumentation and Applications, WBIA'09, P62, DOI DOI 10.1145/1791194.1791203
   Sevcík J, 2008, LECT NOTES COMPUT SC, V5142, P27, DOI 10.1007/978-3-540-70592-5_3
   Sevcík J, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P306
   Smaragdakis Y, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P387
   Smith L. A., 2001, P 2001 ACMIEEE C SUP, P8, DOI [10.1145/582034.582042, DOI 10.1145/582034.582042]
   Sorrentino Francesco, 2010, P 18 ACM SIGSOFT INT, P37, DOI DOI 10.1145/1882291.1882300
   Surendran R, 2016, LECT NOTES COMPUT SC, V10012, P368, DOI 10.1007/978-3-319-46982-9_23
   Thomson P., 2016, ACM Transactions on Parallel Computing, V2, P1, DOI DOI 10.1145/2858651
   von Praun C, 2003, ACM SIGPLAN NOTICES, V38, P115, DOI 10.1145/780822.781145
   Weiyu Luo, 2021, ASPLOS 2021: Proceedings of the 26th International Conference on Architectural Support for Programming Languages and Operating Systems, P630, DOI 10.1145/3445814.3446711
   Wood BP, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133893
   Xu M, 2020, P IEEE S SECUR PRIV, P1643, DOI 10.1109/SP40000.2020.00078
   Zhivich M, 2009, IEEE SECUR PRIV, V7, P87, DOI 10.1109/MSP.2009.56
NR 88
TC 2
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571238
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500045
OA gold
DA 2024-07-18
ER

PT J
AU Bowers, M
   Olausson, TX
   Wong, L
   Grand, G
   Tenenbaum, JB
   Ellis, K
   Solar-Lezama, A
AF Bowers, Matthew
   Olausson, Theo X.
   Wong, Lionel
   Grand, Gabriel
   Tenenbaum, Joshua B.
   Ellis, Kevin
   Solar-Lezama, Armando
TI Top-Down Synthesis for Library Learning
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Library Learning; Abstraction Learning
ID UNIFICATION; MOTIFS
AB This paper introduces corpus-guided top-down synthesis as a mechanism for synthesizing library functions that capture common functionality from a corpus of programs in a domain specific language (DSL). The algorithm builds abstractions directly from initial DSL primitives, using syntactic pattern matching of intermediate abstractions to intelligently prune the search space and guide the algorithmtowards abstractions thatmaximally capture shared structures in the corpus. We present an implementation of the approach in a tool called Stitch and evaluate it against the state-of-the-art deductive library learning algorithm from DreamCoder. Our evaluation shows that Stitch is 3-4 orders of magnitude faster and uses 2 orders of magnitude less memory while maintaining comparable or better library quality (as measured by compressivity). We also demonstrate Stitch's scalability on corpora containing hundreds of complex programs that are intractable with prior deductive approaches and show empirically that it is robust to terminating the search procedure early-further allowing it to scale to challenging datasets by means of early stopping.
C1 [Bowers, Matthew; Olausson, Theo X.; Wong, Lionel; Grand, Gabriel; Tenenbaum, Joshua B.; Solar-Lezama, Armando] MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
   [Ellis, Kevin] Cornell Univ, Ithaca, NY USA.
C3 Massachusetts Institute of Technology (MIT); Cornell University
RP Bowers, M (corresponding author), MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
EM mlbowers@mit.edu; theoxo@mit.edu; zyzzyva@mit.edu; grandg@mit.edu
OI Tenenbaum, Joshua/0000-0002-1925-2035; Solar Lezama,
   Armando/0000-0001-7604-8252; Olausson, Theo/0000-0001-6653-2227
FU National Science Foundation (NSF) Graduate Research Fellowship
   [2141064]; Defense Advanced Research Projects Agency (DARPA) under the
   SDCPS [FA8750-20-C-0542]; Herbert E. Grier (1933) Fellowship; Dorothy J.
   Grier Fund Fellowship; AFOSR [FA9550-19-1-0269]; MIT Quest for
   Intelligence; MIT-IBM Watson AI Lab; ONR Science of AI; DARPA Machine
   Common Sense; MIT Presidential Fellowship; NSF [1918839]; Direct For
   Computer & Info Scie & Enginr; Division of Computing and Communication
   Foundations [1918839] Funding Source: National Science Foundation
FX We thank A. Lew and J. Andreas for helpful discussions, and J. Feser and
   I. Kuraj for feedback on the manuscript. M.B. and G.G are supported by
   the National Science Foundation (NSF) Graduate Research Fellowship under
   Grant No. 2141064. M.B. is also supported by the Defense Advanced
   Research Projects Agency (DARPA) under the SDCPS Contract
   FA8750-20-C-0542. T.X.O. is supported by Herbert E. Grier (1933) and
   Dorothy J. Grier Fund Fellowship. L.W. and J.B.T. are supported by AFOSR
   under grant number FA9550-19-1-0269, the MIT Quest for Intelligence, the
   MIT-IBM Watson AI Lab, ONR Science of AI, and DARPA Machine Common
   Sense. G.G. is also supported by the MIT Presidential Fellowship. A.S.
   is supported by the NSF under Grant No. 1918839. Any opinions, findings,
   and conclusions or recommendations expressed in this material are those
   of the author(s) and do not necessarily reflect the views of sponsors.
CR ABADI M, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P31, DOI 10.1145/96709.96712
   Allamanis M, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3212695
   Allamanis M, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P472, DOI 10.1145/2635868.2635901
   Balog M, 2017, Arxiv, DOI arXiv:1611.01989
   Bowers Matthew, 2022, Zenodo, DOI 10.5281/ZENODO.7151663
   BRUIJN NGD, 1972, P K NED AKAD A MATH, V75, P381
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   Cao D, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571207
   Chen QC, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P487, DOI 10.1145/3385412.3385988
   Chen X., 2018, INT C LEARNING REPRE
   Chlipala A., 2017, 2 SUMMIT ADV PROGRAM
   Chu G, 2015, CONSTRAINTS, V20, P155, DOI 10.1007/s10601-014-9173-7
   Cropper A, 2019, Arxiv, DOI arXiv:1904.08993
   Dechter Eyal, 2013, P INT JOINT C ARTIFI
   DOWEK G, 1995, IEEE S LOG, P366, DOI 10.1109/LICS.1995.523271
   Dowek G., 1996, Proceedings of the Joint International Conference and Symposium on Logic Programming, P259
   Ellis K, 2020, Arxiv, DOI [arXiv:2006.08381, DOI 10.48550/ARXIV.2006.08381]
   Ellis K, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P835, DOI 10.1145/3453483.3454080
   Ellis Kevin M, 2018, Library learning for neurally-guided bayesian program induction
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Ganin Yaroslav, 2018, INT C MACHINE LEARNI, P1666, DOI DOI 10.48550/ARXIV.1804.01118
   Gulwani S, 2015, COMMUN ACM, V58, P90, DOI 10.1145/2736282
   HART PE, 1968, IEEE T SYST SCI CYB, VSSC4, P100, DOI 10.1109/TSSC.1968.300136
   Henderson R.J., 2013, Cumulative learning in the lambda calculus
   Huet G. P., 1975, Theoretical Computer Science, V1, P27, DOI 10.1016/0304-3975(75)90011-0
   Hwang I, 2011, Arxiv, DOI arXiv:1110.5667
   IBARAKI T, 1977, J ACM, V24, P264, DOI 10.1145/322003.322010
   Iyer S, 2019, Arxiv, DOI arXiv:1904.09086
   JOHNSSON T, 1985, LECT NOTES COMPUT SC, V201, P190
   Jones RK, 2021, ACM T GRAPHIC, V40, DOI 10.1145/3450626.3459821
   Koukoutos M, 2017, Arxiv, DOI arXiv:1707.04148
   Kuramochi M, 2001, 2001 IEEE INTERNATIONAL CONFERENCE ON DATA MINING, PROCEEDINGS, P313, DOI 10.1109/ICDM.2001.989534
   Kuramochi M, 2004, SIAM PROC S, P345
   LAND AH, 1960, ECONOMETRICA, V28, P497, DOI 10.2307/1910129
   Lau T, 2003, MACH LEARN, V53, P111, DOI 10.1023/A:1025671410623
   Lázaro-Gredilla M, 2019, SCI ROBOT, V4, DOI 10.1126/scirobotics.aav3150
   Lee M, 2017, ACM SIGPLAN NOTICES, V52, P70, DOI [10.1145/3093335.2993244, 10.1145/2993236.2993244]
   Liang P., 2010, P 27 INT C INT C MAC, P639
   Lin DH, 2014, FRONT ARTIF INTEL AP, V263, P525, DOI 10.3233/978-1-61499-419-0-525
   Manna Z., 1980, ACM Transactions on Programming Languages and Systems, V2, P90, DOI 10.1145/357084.357090
   MILLER D, 1992, J SYMB COMPUT, V14, P321, DOI 10.1016/0747-7171(92)90011-R
   Miller D., 1991, Journal of Logic and Computation, V1, P497, DOI 10.1093/logcom/1.4.497
   Milo R, 2002, SCIENCE, V298, P824, DOI 10.1126/science.298.5594.824
   Mitchell Tom M, 1977, P 5 INT JOINT C ART, V1, P305
   Morrison DR, 2016, DISCRETE OPTIM, V19, P79, DOI 10.1016/j.disopt.2016.01.005
   Nye M., 2021, INT C LEARNING REPRE
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Schreiber F, 2005, LECT NOTES COMPUT SC, V3737, P89
   Shah Ameesh, 2020, Advances in neural information processing systems, V33, P4940
   SHANNON CE, 1948, BELL SYST TECH J, V27, P379, DOI 10.1002/j.1538-7305.1948.tb01338.x
   Shin Eui Chul, 2019, Advances in Neural Information Processing Systems, V32
   Skolem T., 1920, Logisch-kombinatorische untersuchungen uber die erfullbarkeit oder bewiesbarkeit mathematischer satze nebst einem theorem uber dichte mengen
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Wong C, 2021, PR MACH LEARN RES, V139
   Wong Catherine, 2022, IDENTIFYING CONCEP
NR 57
TC 7
Z9 8
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571234
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500041
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Das, A
   Wang, D
   Hoffmann, J
AF Das, Ankush
   Wang, Di
   Hoffmann, Jan
TI Probabilistic Resource-Aware Session Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Session Types; Resource Analysis; Probabilistic Concurrency; Nested
   Multiverse Semantics
ID TERMINATION; SEMANTICS; PROGRAMS; CALCULUS
AB Session types guarantee that message-passing processes adhere to predefined communication protocols. Prior work on session types has focused on deterministic languages but many message-passing systems, such as Markov chains and randomized distributed algorithms, are probabilistic. To implement and analyze such systems, this article develops the meta theory of probabilistic session types with an application focus on automatic expected resource analysis. Probabilistic session types describe probability distributions over messages and are a conservative extension of intuitionistic (binary) session types. To send on a probabilistic channel, processes have to utilize internal randomness from a probabilistic branching or external randomness from receiving on a probabilistic channel. The analysis for expected resource bounds is smoothly integrated with the type system and is a variant of automatic amortized resource analysis. Type inference relies on linear constraint solving to automatically derive symbolic bounds for various cost metrics. The technical contributions include the meta theory that is based on a novel nested multiverse semantics and a typereconstruction algorithm that allows flexible mixing of different sources of randomness without burdening the programmer with complex type annotations. The type system has been implemented in the language NomosPro with linear-time type checking. Experiments demonstrate that NomosPro is applicable in different domains such as cost analysis of randomized distributed algorithms, analysis of Markov chains, probabilistic analysis of amortized data structures and digital contracts. NomosPro is also shown to be scalable by (i) implementing two broadcast and a bounded retransmission protocol where messages are dropped with a fixed probability, and (ii) verifying the limiting distribution of a Markov chain with 64 states and 420 transitions.
C1 [Das, Ankush] Amazon, Seattle, WA 98109 USA.
   [Wang, Di; Hoffmann, Jan] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Amazon.com; Carnegie Mellon University
RP Das, A (corresponding author), Amazon, Seattle, WA 98109 USA.
EM daankus@amazon.com; diw3@alumni.cmu.edu; jhoffmann@cmu.edu
OI Hoffmann, Jan/0000-0001-8326-0788; Wang, Di/0000-0002-2418-7987
FU DARPA under AA Contract [FA8750-18-C-0092]; National Science Foundation
   [1801369, 1845514, 2007784]; Division Of Computer and Network Systems;
   Direct For Computer & Info Scie & Enginr [1801369] Funding Source:
   National Science Foundation; Division of Computing and Communication
   Foundations; Direct For Computer & Info Scie & Enginr [1845514, 2007784]
   Funding Source: National Science Foundation
FX This article is based on research supported by DARPA under AA Contract
   FA8750-18-C-0092 and by the National Science Foundation under awards
   1801369, 1845514, and 2007784. Any opinions, findings, and conclusions
   contained in this document are those of the authors and do not
   necessarily reflect the views of the sponsoring organizations.
CR Aman B, 2019, ELECTRON P THEOR COM, P92, DOI 10.4204/EPTCS.303.7
   Andova S., 1999, Formal Methods for Real-Time and Probabilistic Systems. 5th International AMAST Workshop, ARTS'99. Proceedings, P111
   [Anonymous], 1976, Algorithms and Complexity: New Directions and Recent Results
   [Anonymous], 2004, Electr. Notes Theor. Comp. Sci.
   [Anonymous], 1993, LNCS
   Avanzini M, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785725
   Balzer S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110281
   BERGSTRA JA, 1984, INFORM CONTROL, V60, P109, DOI 10.1016/S0019-9958(84)80025-X
   Bertrand Nathalie, 2019, LIPICS, V33, P1, DOI [10.4230/LIPIcs.CONCUR.2019.33, DOI 10.4230/LIPICS.CONCUR.2019.33]
   Borgström J, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI [10.1145/2951913.2951942, 10.1145/3022670.2951942]
   BRACHA G, 1987, INFORM COMPUT, V75, P130, DOI 10.1016/0890-5401(87)90054-X
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Chaum D., 1988, Journal of Cryptology, V1, P65, DOI 10.1007/BF00206326
   Clp team, 2022, COIN OR LIN PROGR SO
   Das Ankush, 2020, PPDP '20: Proceedings of the 22nd International Symposium on Principles and Practice of Declarative Programming, DOI 10.1145/3414080.3414087
   Das A, 2020, Arxiv, DOI arXiv:2011.09037
   Das A, 2021, LECT NOTES COMPUT SC, V12648, P178, DOI 10.1007/978-3-030-72019-3_7
   Das A, 2021, P IEEE COMPUT SECUR, P109, DOI 10.1109/CSF51468.2021.00004
   Das A, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P305, DOI 10.1145/3209108.3209146
   Das Ankush, 2020, 5 INT C FORMAL STRUC, V33, P1
   Das Ankush, 2020, 31 INT C CONCURRENCY, V13, P1, DOI 10.4230
   Das Ankush, 2022, PROBABILISTIC RESOUR, DOI [10.5281/zenodo.7147007, DOI 10.5281/ZENODO.7147007]
   Dehnert C, 2017, LECT NOTES COMPUT SC, V10427, P592, DOI 10.1007/978-3-319-63390-9_31
   Fioriti LMF, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI 10.1145/2676726.2677001
   Forejt V, 2011, LECT NOTES COMPUT SC, V6659, P53, DOI 10.1007/978-3-642-21455-4_3
   Foster N, 2016, LECT NOTES COMPUT SC, V9632, P282, DOI 10.1007/978-3-662-49498-1_12
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gehr T, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P586, DOI [10.1145/3192366.3192400, 10.1145/3296979.3192400]
   Girard J. Y., 1987, TAPSOFT '87. Proceedings of the International Joint Conference on Theory and Practice of Software Development, P52
   Hansson H., 1994, Formal Aspects of Computing, V6, P512, DOI 10.1007/BF01211866
   Hansson H.A., 1994, Time and Probability in Formal Design of Distributed Systems
   HART S, 1983, ACM T PROGR LANG SYS, V5, P356, DOI 10.1145/2166.357214
   Herescu OM, 2000, LECT NOTES COMPUT SC, V1784, P146
   Hillston J., 1996, A Compositional Approach to Performance Modelling
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Horne Ross, 2019, 4 INT C FORMAL STRUC, DOI [10.4230/LIPIcs.FSCD.2019.23, DOI 10.4230/LIPICS.FSCD.2019.23]
   Inverso Omar, 2020, 31 INT C CONCURRENCY, V14, P1
   ITAI A, 1990, INFORM COMPUT, V88, P60, DOI 10.1016/0890-5401(90)90004-2
   Jones C., 1989, THESIS U EDINBURGH
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   Knoth T, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P253, DOI 10.1145/3314221.3314602
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Kura S, 2019, LECT NOTES COMPUT SC, V11428, P135, DOI 10.1007/978-3-030-17465-1_8
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Kwiatkowska M, 2007, LECT NOTES COMPUT SC, V4486, P220
   Kwiatkowska M, 2007, INFORM COMPUT, V205, P1027, DOI 10.1016/j.ic.2007.01.004
   Mislove M., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P350
   Ngo Van Chan, 2018, PROG LANG DESIGN IMP, V2018, DOI [10.1145/3192366.3192394, DOI 10.1145/3192366.3192394]
   Norman G, 2007, INT CONF QUANT EVAL, P169, DOI 10.1109/QEST.2007.31
   Norman Gethin, 2004, ANALYSING RANDOMIZED, P384, DOI [10.1007/978-3-540-24611-4_11, DOI 10.1007/978-3-540-24611-4_11]
   Page L., 1999, PAGERANK CITATION RA
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Smolka S, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P190, DOI 10.1145/3314221.3314639
   SRIKANTH TK, 1987, DISTRIB COMPUT, V2, P80, DOI 10.1007/BF01667080
   TARJAN RE, 1985, SIAM J ALGEBRA DISCR, V6, P306, DOI 10.1137/0606031
   Tassarotti J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290377
   Tassarotti J, 2018, LECT NOTES COMPUT SC, V10895, P560, DOI 10.1007/978-3-319-94821-8_33
   Tix R, 2009, ELECTRON NOTES THEOR, V222, P3, DOI 10.1016/j.entcs.2009.01.002
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   Varacca D, 2006, MATH STRUCT COMP SCI, V16, P87, DOI 10.1017/S0960129505005074
   Varacca D, 2002, IEEE S LOG, P299, DOI 10.1109/LICS.2002.1029838
   Varacca D, 2007, ELECTRON NOTES THEOR, V190, P147, DOI 10.1016/j.entcs.2007.07.009
   Varacca Daniele, 2003, THESIS U AARHUS
   Wang D, 2019, ELECTRON NOTES THEOR, V347, P303, DOI 10.1016/j.entcs.2019.09.016
   Wang Di, 2020, RAISING EXPECTATIONS
   Wang PX, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P204, DOI 10.1145/3314221.3314581
NR 70
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571259
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500066
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Leijen, D
   Lorenzen, A
AF Leijen, Daan
   Lorenzen, Anton
TI Tail Recursion Modulo Context: An Equational Approach
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Tail Recursion Modulo Cons; Equational Reasoning; Non-Linear Control
AB The tail-recursion modulo cons transformation can rewrite functions that are not quite tail-recursive into a tail-recursive form that can be executed efficiently. In this article we generalize tail recursion modulo cons (TRMc) to modulo contexts (TRMC), and calculate a general TRMC algorithm from its specification. We can instantiate our general algorithm by providing an implementation of application and composition on abstract contexts, and showing that our context laws hold. We provide some known instantiations of TRMC, namely modulo evaluation contexts (CPS), and associative operations, and further instantiations not so commonly associated with TRMC, such as defunctionalized evaluation contexts, monoids, semirings, exponents, and cons products. We study the modulo cons instantiation in particular and prove that an instantiation using Minamide's hole calculus is sound. We also calculate a second instantiation in terms of the Perceus heap semantics to precisely reason about the soundness of in-place update. While all previous approaches to TRMc fail in the presence of non-linear control (for example induced by call/cc, shift/reset or algebraic effect handlers), we can elegantly extend the heap semantics to a hybrid approach which dynamically adapts to non-linear control flow. We have a full implementation of hybrid TRMc in the Koka language and our benchmark shows the TRMc transformed functions are always as fast or faster than using manual alternatives.
C1 [Leijen, Daan] Microsoft Res, Redmond, WA 98052 USA.
   [Lorenzen, Anton] Univ Edinburgh, Sch Informat, Edinburgh, Midlothian, Scotland.
C3 Microsoft; University of Edinburgh
RP Leijen, D (corresponding author), Microsoft Res, Redmond, WA 98052 USA.
EM daan@microsoft.com; anton.lorenzen@ed.ac.uk
OI Lorenzen, Anton/0000-0003-3538-9688; Leijen, Daan/0000-0003-1027-5430
CR Appel Andrew W., 1991, COMPILING CONTINUATI, DOI [10.1017/CBO9780511609619, DOI 10.1017/CBO9780511609619]
   Bell JM, 1997, ACM SIGPLAN NOTICES, V32, P25, DOI 10.1145/258949.258953
   BIRD RS, 1984, ACM T PROGR LANG SYS, V6, P487, DOI 10.1145/1780.1781
   Bloch Joshua, 2008, JAVA SERIES, V2nd, DOI [10.5555/1377533, DOI 10.5555/1377533]
   Bour Frederic, 2021, TAIL MODULO CONS JOU
   Chung-chieh Shan, 2007, Higher-Order and Symbolic Computation, V20, P371, DOI 10.1007/s10990-007-9010-4
   CLARK KL, 1977, P IFIP 77, P939
   Danvy O, 2002, ACM SIGPLAN NOTICES, V37, P230, DOI 10.1145/583852.581500
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Danvy Olivier, 2001, Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming. PPDP'01, P162, DOI DOI 10.1145/773184.773202
   Didrich K., 1994, Programming Languages and System Architectures. International Conference Proceedings, P228
   Dolan Stephen, 2015, OCAML WORKSH
   Doligez D., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P113, DOI 10.1145/158511.158611
   Dvorak Zdenek, 2004, GCC DEVELOPERSSUMMIT, P25
   Engels Jeroen, 2022, TAIL RECURSION MODUL
   Friedman Daniel P., 1975, UNWINDING STYLIZED R, V19
   Gibbons Jeremy, 2021, ART SCI ENG PROGRAM, V6, P2
   Harper Robert, 2012, 15 150 EQUATIONAL RE
   Hindley J., 1986, INTRO COMBINATORS LA, DOI [10.1017/CBO9780511809835, DOI 10.1017/CBO9780511809835]
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Hutton Graham, 2021, ITS EASY 1 2 3
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Leijen Daan, 2021, The Koka Language
   Leijen Daan, 2022, TR202218 MSR
   Lorenzen A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547634
   Meertens L., 1986, Mathematics and Computer Science. Proceedings of the CWI Symposium, P289
   Minamide Y., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P75, DOI 10.1145/268946.268953
   Minamide Y., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P271, DOI 10.1145/237721.237791
   Moine Alexandre, 2023, P 50 ACM SIGACT SIGP, P1
   Ningning Xie, 2021, Proceedings of the ACM on Programming Languages, V5, DOI 10.1145/3473576
   Okasaki Chris, 1999, Purely functional data structures, DOI DOI 10.1017/CBO9780511530104
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Pottier F, 2004, ACM SIGPLAN NOTICES, V39, P89, DOI 10.1145/982962.964009
   Pottier F, 2013, ACM SIGPLAN NOTICES, V48, P173, DOI [10.1145/2544174.2500598, 10.1145/2500365.2500598]
   Reinking A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P96, DOI 10.1145/3453483.3454032
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Reynolds John C., 1972, P ACM ANN C ACM 72 N, V2, P717, DOI [10.1145/800194.805852, DOI 10.1145/800194.805852]
   Risch Tore, 1973, REMREC A PROGRAM AUT
   Schulte Wolfram, 1992, Declarative Programming, Sasbachwalden 1991, P239, DOI [10.1007/978-1-4471-3794-8_16, DOI 10.1007/978-1-4471-3794-8_16]
   Sitaram D., 1990, LISP and Symbolic Computation, V3, P67, DOI 10.1007/BF01806126
   Sobel Jonathan, 1998, P 3 ACM S, P251, DOI [10.1145/289423.289452, DOI 10.1145/289423.289452]
   Tolmach A., 1998, Journal of Functional Programming, V8, P367, DOI 10.1017/S0956796898003086
   Ullrich S, 2019, PROCEEDINGS OF THE 31ST SYMPOSIUM ON IMPLEMENTATION AND APPLICATION OF FUNCTIONAL LANGUAGES, IFL 2019, DOI 10.1145/3412932.3412935
   Wadler Philip., 1984, LFP 84 P 1984 ACM S, P45, DOI DOI 10.1145/800055.802020
   WAND M, 1980, J ACM, V27, P164, DOI 10.1145/322169.322183
   WAND M, 1978, COMPUT LANG, V3, P241, DOI 10.1016/0096-0551(78)90042-5
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Xie Ningning, 2020, P 13 ACM SIGPLAN INT, P95, DOI [10.1145/3406088.3409022, DOI 10.1145/3406088.3409022]
NR 52
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571233
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500040
OA gold
DA 2024-07-18
ER

PT J
AU Poulsen, CB
   Van der Rest, C
AF Poulsen, Casper Bach
   Van der Rest, Cas
TI Hefty Algebras
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Algebraic Effects; Modularity; Reuse; Agda; Dependent Types
ID HANDLERS
AB Algebraic effects and handlers is an increasingly popular approach to programming with effects. An attraction of the approach is its modularity: effectful programs are written against an interface of declared operations, which allows the implementation of these operations to be defined and refined without changing or recompiling programs written against the interface. However, higher-order operations (i.e., operations that take computations as arguments) break this modularity. While it is possible to encode higher-order operations by elaborating them into more primitive algebraic effects and handlers, such elaborations are typically not modular. In particular, operations defined by elaboration are typically not a part of any effect interface, so we cannot define and refine their implementation without changing or recompiling programs. To resolve this problem, a recent line of research focuses on developing new and improved effect handlers. In this paper we present a (surprisingly) simple alternative solution to the modularity problem with higher-order operations: we modularize the previously non-modular elaborations commonly used to encode higher-order operations. Our solution is as expressive as the state of the art in effects and handlers.
C1 [Poulsen, Casper Bach; Van der Rest, Cas] Delft Univ Technol, Delft, Netherlands.
C3 Delft University of Technology
RP Poulsen, CB (corresponding author), Delft Univ Technol, Delft, Netherlands.
EM c.b.poulsen@tudelft.nl; c.r.vanderrest@tudelft.nl
FU  [VI.Veni.192.259]
FX We thank the anonymous reviewers for their comments which helped improve
   the exposition of the paper. Furthermore, we thank Nicolas Wu, Andrew
   Tolmach, Peter Mosses, and Jaro Reinders for feedback on earlier drafts.
   This research was partially funded by the NWO VENI Composable and
   Safe-by-Construction Programming Language Definitions project
   (VI.Veni.192.259).
CR Abbott M, 2005, THEOR COMPUT SCI, V342, P3, DOI 10.1016/j.tcs.2005.06.002
   Abbott M, 2003, LECT NOTES COMPUT SC, V2620, P23
   [Anonymous], 1986, Denotational Semantics: A Methodology for Language Development
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   [Anonymous], 1991, Basic Category Theory for Computer Scientists
   Arbib MA, 1975, ARROWS STRUCTURES FU
   Awodey S., 2010, Category Theory
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Biernacki D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158096
   Bird R., 1999, Formal Aspects of Computing, V11, P200, DOI 10.1007/s001650050047
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2500365.2500581, 10.1145/2544174.2500581]
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Castagna Giuseppe, 2017, P 44 ACM SIGPLAN S P, DOI [10.1145/3009837, DOI 10.1145/3009837]
   Cenciarelli Pietro., 1993, SYNTACTIC APPROACH M
   Claessen K., 1999, Journal of Functional Programming, V9, P313, DOI 10.1017/S0956796899003342
   Delaware B, 2013, ACM SIGPLAN NOTICES, V48, P207, DOI 10.1145/2480359.2429094
   Filinski A., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P175, DOI 10.1145/292540.292557
   Fiore M, 2014, IEEE S LOG, DOI 10.1145/2603088.2603163
   Hancock P., 2000, Computer Science Logic. 14th International Workshop, CSL 2000. Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.1862), P317
   Jaskelioff M, 2011, LECT NOTES COMPUT SC, V5836, P233, DOI 10.1007/978-3-642-24452-0_13
   Jones M. P., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P97
   Jones M. P., 1993, YALEUDCSRR1004
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Levy P. B., 2006, Higher-Order and Symbolic Computation, V19, P377, DOI 10.1007/s10990-006-0480-6
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Martin-Lof P., 1984, Intuitionistic type theory
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Moggi E., 1989, Tech. Rep. ECS-LFCS-90-113
   Morris JG, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290325
   Morrisett Greg., 2013, ACM SIGPLAN INT C FU, DOI [10.1145/2500365, DOI 10.1145/2500365]
   Mosses PD, 2004, J LOGIC ALGEBR PROGR, V60-1, P195, DOI 10.1016/j.jlap.2004.03.008
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Piróg M, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P809, DOI 10.1145/3209108.3209166
   Piróg M, 2014, ELECTRON NOTES THEOR, V308, P273, DOI 10.1016/j.entcs.2014.10.015
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Poulsen Casper Bach, 2022, Zenodo, DOI 10.5281/ZENODO.7315899
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Rosu G, 2010, J LOGIC ALGEBR PROGR, V79, P397, DOI 10.1016/j.jlap.2010.03.012
   Schrijvers T, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '19), P98, DOI 10.1145/3331545.3342595
   Schrijvers T, 2014, PPDP'14: PROCEEDINGS OF THE 16TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P259, DOI 10.1145/2643135.2643145
   Sculthorpe N, 2016, ELECTRON P THEOR COM, P63, DOI 10.4204/EPTCS.212.5
   Sheng Liang, 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P333, DOI 10.1145/199448.199528
   Steele G. L.  Jr., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P472, DOI 10.1145/174675.178068
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   Thielecke Hayo., 1997, CATEGORICAL STRUCTUR
   van den Berg B, 2021, LECT NOTES COMPUT SC, V13008, P182, DOI 10.1007/978-3-030-89051-3_11
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Yang ZX, 2022, LECT NOTES COMPUT SC, V13240, P462, DOI 10.1007/978-3-030-99336-8_17
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
NR 57
TC 2
Z9 2
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571255
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500062
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Singh, AK
   Lahav, O
AF Singh, Abhishek Kr
   Lahav, Ori
TI An Operational Approach to Library Abstraction under Relaxed Memory
   Concurrency
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Relaxed memory consistency; Concurrent objects; Linearizability; Library
   abstraction
ID LINEARIZABILITY
AB Concurrent data structures and synchronization mechanisms implemented by expert developers are indispensable for modular software development. In this paper, we address the fundamental problem of library abstraction under weak memory concurrency, and identify a general library correctness condition allowing clients of the library to reason about program behaviors using the specification code, which is often much simpler than the concrete implementation. We target (a fragment of) the RC11 memory model, and develop an equivalent operational presentation that exposes knowledge propagation between threads, and is suffciently expressive to capture library behaviors as totally ordered operational execution traces. We further introduce novel access modes to the language that allow intricate specifications accounting for library internal synchronization that is not exposed to the client, as well as the library's demands on external synchronization by the client. We illustrate applications of our approach in several examples of different natures.
C1 [Singh, Abhishek Kr; Lahav, Ori] Tel Aviv Univ, Tel Aviv, Israel.
C3 Tel Aviv University
RP Singh, AK (corresponding author), Tel Aviv Univ, Tel Aviv, Israel.
EM abhishek.uor@gmail.com; orilahav@tau.ac.il
OI Lahav, Ori/0000-0003-4305-6998; Singh, Abhishek Kr/0000-0002-2760-5419
FU European Research Council (ERC) under the European Union [851811];
   Israel Science Foundation [1566/18, 814/22]; European Research Council
   (ERC) [851811] Funding Source: European Research Council (ERC)
FX We thank the anonymous reviewers for their valuable feedback. This work
   was supported by the European Research Council (ERC) under the European
   Union's Horizon 2020 research and innovation programme (grant agreement
   no. 851811) and the Israel Science Foundation (grant numbers 1566/18 and
   814/22).
CR Alglave J, 2018, ACM SIGPLAN NOTICES, V53, P405, DOI [10.1145/3296957.3177156, 10.1145/3173162.3177156]
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Batty M, 2015, LECT NOTES COMPUT SC, V9032, P283, DOI 10.1007/978-3-662-46669-8_12
   Batty M, 2013, ACM SIGPLAN NOTICES, V48, P235, DOI 10.1145/2480359.2429099
   Beillahi SM, 2021, LOG METH COMPUT SCI, V17, DOI 10.23638/LMCS-17(1:12)2021
   Birkedal Lars, 2021, Proceedings of the ACM on Programming Languages, V5, DOI 10.1145/3473586
   Boehm H.-J., 2014, MSPC, p7:1, DOI DOI 10.1145/2618128.2618134
   Bouajjani A, 2018, LECT NOTES COMPUT SC, V10982, P336, DOI 10.1007/978-3-319-96142-2_21
   Bouajjani A, 2015, ACM SIGPLAN NOTICES, V50, P651, DOI [10.1145/2775051.2677002, 10.1145/2676726.2677002]
   Burckhardt S, 2012, LECT NOTES COMPUT SC, V7211, P87, DOI 10.1007/978-3-642-28869-2_5
   Cho M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P867, DOI 10.1145/3453483.3454082
   Dalvandi Sadegh, 2021, PPoPP '21: Proceedings of the 26th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, P451, DOI 10.1145/3437801.3441619
   Dalvandi Sadegh, 2021, ARXIV
   Desnoyers M, 2012, IEEE T PARALL DISTR, V23, P375, DOI 10.1109/TPDS.2011.159
   Doherty S, 2018, LECT NOTES COMPUT SC, V11023, P110, DOI 10.1007/978-3-319-98938-9_7
   Dolan S, 2018, ACM SIGPLAN NOTICES, V53, P242, DOI [10.1145/3192366.3192421, 10.1145/3296979.3192421]
   Dongol B, 2018, LECT NOTES COMPUT SC, V10747, P183, DOI 10.1007/978-3-319-73721-8_9
   Emmi M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290373
   Enea C, 2016, LECT NOTES COMPUT SC, V9636, P497, DOI 10.1007/978-3-662-49674-9_29
   Filipovic I, 2010, THEOR COMPUT SCI, V411, P4379, DOI 10.1016/j.tcs.2010.09.021
   Gibson-Robinson T., 2014, Lecture Notes in Computer Science, V8413, P187
   Gotsman A, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(3:12)2013
   Gotsman A, 2013, LECT NOTES COMPUT SC, V7792, P249, DOI 10.1007/978-3-642-37036-6_15
   Gotsman A, 2011, LECT NOTES COMPUT SC, V6756, P453, DOI 10.1007/978-3-642-22012-8_36
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Dang HH, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P792, DOI 10.1145/3519939.3523451
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Jung Ralf, 2019, IRIS WORKSHOP
   Kaiser Jan-Oliver, 2017, ECOOP, DOI [10.4230/LIPIcs.ECOOP.2017.17, DOI 10.4230/LIPICS.ECOOP.2017.17]
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Khyzha A, 2022, LECT NOTES COMPUT SC, V13240, P262, DOI 10.1007/978-3-030-99336-8_10
   Khyzha A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434328
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Krishna S, 2020, LECT NOTES COMPUT SC, V12075, P280, DOI 10.1007/978-3-030-44914-8_11
   Lahav O, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P126, DOI 10.1145/3314221.3314604
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lahav O, 2016, ACM SIGPLAN NOTICES, V51, P649, DOI 10.1145/2914770.2837643
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lowe Gavin, 2017, CONCURRENCY SECURITY, P162, DOI [DOI 10.1007/978-3-319-51046, 10.1007/978-3-319-51046-0_9, DOI 10.1007/978-3-319-51046-0_9]
   McKenney Paul E., 2004, PhD thesis
   Mével G, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473571
   Ou PZ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276506
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290381
   Sarkar S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P175
   Singh Abhishek Kr, 2022, OPERATIONAL APPROACH
   Smith G, 2020, FORM ASP COMPUT, V32, P1, DOI 10.1007/s00165-019-00499-8
   Weiyu Luo, 2021, ASPLOS 2021: Proceedings of the 26th International Conference on Architectural Support for Programming Languages and Operating Systems, P630, DOI 10.1145/3445814.3446711
NR 49
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571246
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500053
OA gold
DA 2024-07-18
ER

PT J
AU Valliappan, N
   Ruch, F
   Cortiñas, CT
AF Valliappan, Nachiappan
   Ruch, Fabian
   Cortinas, Carlos Tome
TI Normalization for Fitch-Style Modal Calculi
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Fitch-style lambda calculi; Possible-world semantics; Normalization by
   Evaluation
AB Fitch-style modal lambda calculi enable programming with necessity modalities in a typed lambda calculus by extending the typing context with a delimiting operator that is denoted by a lock. The addition of locks simplifies the formulation of typing rules for calculi that incorporate different modal axioms, but each variant demands different, tedious and seemingly ad hoc syntactic lemmas to prove normalization. In this work, we take a semantic approach to normalization, called normalization by evaluation (NbE), by leveraging the possible-world semantics of Fitch-style calculi to yield a more modular approach to normalization. We show that NbE models can be constructed for calculi that incorporate the K, T and 4 axioms of modal logic, as suitable instantiations of the possible-world semantics. In addition to existing results that handle beta-equivalence, our normalization result also considers eta-equivalence for these calculi. Our key results have been mechanized in the proof assistant Agda. Finally, we showcase several consequences of normalization for proving meta-theoretic properties of Fitch-style calculi as well as programming-language applications based on different interpretations of the necessity modality.
C1 [Valliappan, Nachiappan; Cortinas, Carlos Tome] Chalmers Univ Technol, Gothenburg, Sweden.
C3 Chalmers University of Technology
RP Valliappan, N (corresponding author), Chalmers Univ Technol, Gothenburg, Sweden.
EM nacval@chalmers.se; carlos.tome@chalmers.se
OI Tome Cortinas, Carlos/0000-0001-5069-6577; Valliappan,
   Nachiappan/0000-0002-9358-3852; Ruch, Fabian/0000-0003-4662-6511
FU Swedish Foundation for Strategic Research (SSF) [RIT17-0023R,
   RIT17-0011]; Swedish Foundation for Strategic Research (SSF)
   [RIT17-0011] Funding Source: Swedish Foundation for Strategic Research
   (SSF)
FX We would like to thank Andreas Abel, Thierry Coquand, and Graham Leigh
   for their feedback on earlier versions of this work. We would also like
   to thank the anonymous referees of both the paper and the artifact for
   their valuable comments and helpful suggestions. This work is supported
   by the Swedish Foundation for Strategic Research (SSF) under the
   projects Octopi (Ref. RIT17-0023R) and WebSec (Ref. RIT17-0011).
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Abel A, 2019, PROCEEDINGS OF THE 21ST INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2019), DOI 10.1145/3354166.3354168
   Abel Andreas, AGDA 2 VERSION 2 6 2
   Ahman D, 2013, ELECTRON NOTES THEOR, V298, P51, DOI 10.1016/j.entcs.2013.09.007
   Altenkirch T, 2004, LECT NOTES COMPUT SC, V2998, P260
   Altenkirch T, 2001, IEEE S LOG, P303, DOI 10.1109/LICS.2001.932506
   [Anonymous], 1993, Prentice Hall international series in computer science
   Augustsson Lennart, 1990, HASKELL
   BERGER U, 1991, SIXTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P203
   Boi M., 1984, Studia Logica, V43, P217, DOI [10.1007/BF02429840, DOI 10.1007/BF02429840]
   Borghuis Valentijn Anton Johan, 1994, THESIS TU EINDHOVEN
   Choudhury V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408993
   Clouston R, 2018, LECT NOTES COMPUT SC, V10803, P258, DOI 10.1007/978-3-319-89366-2_14
   Coquand C., 2002, Higher-Order and Symbolic Computation, V15, P57, DOI 10.1023/A:1019964114625
   Cortiñas CT, 2019, PROCEEDINGS OF THE 14TH ACM SIGSAC WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS '19), P61, DOI 10.1145/3338504.3357342
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   Davies R., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P258, DOI 10.1145/237721.237788
   EWALD WB, 1986, J SYMBOLIC LOGIC, V51, P166, DOI 10.2307/2273953
   Filinski A, 2001, LECT NOTES COMPUT SC, V2044, P151
   Fischer-Servi G., 1981, Studies in the Philosophy of Science, V47, P59
   Freeman Phil, 2013, PURESCRIPT
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Gratzer D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341711
   Gratzer D, 2020, IEEE S LOG, P492, DOI 10.1145/3373718.3394736
   Gratzer Daniel, 2021, ARXIV
   Hu Z., 2022, ENERGETIC VARIATIONA
   Jay C. B., 1995, Journal of Functional Programming, V5, P135, DOI 10.1017/S0956796800001301
   Kavvos GA, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(3:10)2020
   Lindley S, 2007, LECT NOTES COMPUT SC, V4583, P255
   Martini S, 1996, APPL LOG SER, V2, P213
   Milner R., 1990, The Definition of Standard ML
   Miyamoto Kenji., 2004, WORKSHOP FDN COMPUTE, P187
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   Plotkin G., 1986, Theoretical Aspects of Reasoning about Knowledge, P399
   Russo A, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P13
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Shikuma N, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(3:10)2008
   Simpson A., 1994, The proof theory and semantics of intuitionistic modal logic
   Valliappan N, 2021, HASKELL '21: PROCEEDINGS OF THE 14TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL, P56, DOI 10.1145/3471874.3472983
   YALLOP J, 2018, PROC ACM PROGRAM LAN, DOI [10.1145/3236795, DOI 10.1145/3236795]
NR 42
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 118
DI 10.1145/3547649
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000029
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Ferles, K
   Sepanski, B
   Krishnan, R
   Bornholt, J
   Dillig, I
AF Ferles, Kostas
   Sepanski, Benjamin
   Krishnan, Rahul
   Bornholt, James
   Dillig, Isil
TI Synthesizing Fine-Grained Synchronization Protocols for Implicit
   Monitors
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE implicit signal monitors; fine-grained locking; concurrent programming;
   symbolic reasoning; verification conditions; monitor invariant
AB A monitor is a widely-used concurrent programming abstraction that encapsulates all shared state between threads. Monitors can be classified as being either implicit or explicit depending on the primitives they provide. Implicit monitors are much easier to program but typically not as efficient. To address this gap, there has been recent research on automatically synthesizing explicit-signal monitors from an implicit specification, but prior work does not exploit all paralellization opportunities due to the use of a single lock for the entire monitor. This paper presents a new technique for synthesizing fine-grained explicit-synchronization protocols from implicit monitors. Our method is based on two key innovations: First, we present a new static analysis for inferring safe interleavings that allow violating mutual exclusion of monitor operations without changing its semantics. Second, we use the results of this static analysis to generate a MaxSAT instance whose models correspond to correct-by-construction synchronization protocols. We have implemented our approach in a tool called CORTADO and evaluate it on monitors that contain parallelization opportunities. Our evaluation shows that CORTADO can synthesize synchronization policies that are competitive with, or even better than, expert-written ones on these benchmarks.
C1 [Ferles, Kostas; Sepanski, Benjamin; Krishnan, Rahul; Bornholt, James; Dillig, Isil] Univ Texas Austin, Comp Sci Dept, Austin, TX 78712 USA.
C3 University of Texas System; University of Texas Austin
RP Ferles, K (corresponding author), Univ Texas Austin, Comp Sci Dept, Austin, TX 78712 USA.
EM kferles@cs.utexas.edu; ben_sepanski@utexas.edu; rahulk@cs.utexas.edu;
   bornholt@cs.utexas.edu; isil@cs.utexas.edu
OI Krishnan, Rahul/0000-0003-0230-5185; Sepanski,
   Benjamin/0000-0002-4924-3009; Ferles, Kostas/0000-0002-8370-5465;
   Dillig, Isil/0000-0001-8006-1230
FU National Science Foundation [CCF-1918889, CCF-1811865]; U.S. Department
   of Energy, Office of Science, Office of Advanced Scientific Computing
   Research, Department of Energy Computational Science Graduate Fellowship
   [SC0021110]
FX We would like to thank the anonymous reviewers, Shankara Pailoor, and
   Benjamin Mariano for their insightful feedback. This material is based
   upon work supported by the National Science Foundation under Grant
   Numbers CCF-1918889 and #CCF-1811865, the U.S. Department of Energy,
   Office of Science, Office of Advanced Scientific Computing Research,
   Department of Energy Computational Science Graduate Fellowship under
   Award Number SC0021110, and a gift from Relational AI.
CR ALON N, 1986, COMBINATORICA, V6, P201, DOI 10.1007/BF02579381
   [Anonymous], 1973, Operating System Principles
   Birrell Andrew D, 1989, INTRO PROGRAMMING TH
   BUHR PA, 1995, ACM COMPUT SURV, V27, P63, DOI 10.1145/214037.214100
   Cherem S, 2008, ACM SIGPLAN NOTICES, V43, P304, DOI 10.1145/1379022.1375619
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Emmi Michael, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P291, DOI 10.1145/1190216.1190260
   Ferles K, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P120, DOI 10.1145/3192366.3192395
   Ferles Kostas, ARXIV220300783 COMPU
   GitHub, 2022, GITHUB REST API
   Golan-Gueta G, 2011, ACM SIGPLAN NOTICES, V46, P225, DOI 10.1145/2076021.2048086
   Halpert Richard L., 2007, P 16 INT C PAR ARCH
   Hicks Michael, 2006, ON LIN P 1 ACM SIGPL
   Hoare C. A. R., 1971, OP SYST TU BELF SPRI, P231
   HOARE CAR, 1974, COMMUN ACM, V17, P549, DOI 10.1145/355620.361161
   Hung WL, 2013, ACM SIGPLAN NOTICES, V48, P253, DOI 10.1145/2499370.2462175
   LAMPSON BW, 1980, COMMUN ACM, V23, P105, DOI 10.1145/358818.358824
   LANDI W, 1992, SIGPLAN NOTICES, V27, P235, DOI 10.1145/143103.143137
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   McCloskey B, 2006, ACM SIGPLAN NOTICES, V41, P346, DOI 10.1145/1111320.1111068
   Michael TS, 2006, DISCRETE APPL MATH, V154, P1309, DOI 10.1016/j.dam.2006.01.004
   Shipilev Aleksey, 2021, OPENJDK JMH
   Vallee-Rai R., 1999, Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'99, page, P13
NR 23
TC 0
Z9 0
U1 1
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 67
DI 10.1145/3527311
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300003
OA gold
DA 2024-07-18
ER

PT J
AU Machiry, A
   Kastner, J
   McCutchen, M
   Eline, A
   Headley, K
   Hicks, M
AF Machiry, Aravind
   Kastner, John
   McCutchen, Matt
   Eline, Aaron
   Headley, Kyle
   Hicks, Michael
TI C to Checked C by 3C
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Checked C; Spatial Safety Prevention; Source Rewriter
AB Owing to the continued use of C (and C++), spatial safety violations (e.g., buffer overflows) still constitute one of today's most dangerous and prevalent security vulnerabilities. To combat these violations, Checked C extends C with bounds-enforced checked pointer types. Checked C is essentially a gradually typed spatially safe C-checked pointers are backwards-binary compatible with legacy pointers, and the language allows them to be added piecemeal, rather than necessarily all at once, so that safety retrofitting can be incremental.
   This paper presents a semi-automated process for porting a legacy C program to Checked C. The process centers on 3C, a static analysis-based annotation tool. 3C employs two novel static analysis algorithms-typ3c and boun3c-to annotate legacy pointers as checked pointers, and to infer array bounds annotations for pointers that need them. 3C performs a root cause analysis to direct a human developer to code that should be refactored; once done, 3C can be re-run to infer further annotations (and updated root causes). Experiments on 11 programs totaling 319KLoC show 3C to be effective at inferring checked pointer types, and experience with previously and newly ported code finds 3C works well when combined with human-driven refactoring.
C1 [Machiry, Aravind] Purdue Univ, W Lafayette, IN 47907 USA.
   [Machiry, Aravind; Kastner, John; McCutchen, Matt; Eline, Aaron; Headley, Kyle; Hicks, Michael] Amazon, Seattle, WA USA.
C3 Purdue University System; Purdue University; Amazon.com
RP Machiry, A (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM amachiry@purdue.edu; jkastner@amazon.com; matmccut@anriazon.com;
   aeline@amazon.com; khead@amazon.com; mwhicks@amazon.com
OI Machiry, Aravind Kumar/0000-0001-5124-6818; Kastner,
   John/0000-0002-1273-5990; Hicks, Michael/0000-0002-2759-9223; McCutchen,
   Matt/0000-0003-4814-5148
CR [Anonymous], 2021, C RUST TRANSLATION R
   Bingham NH, 1996, STAT PROBABIL LETT, V27, P131, DOI 10.1016/0167-7152(95)00054-2
   BlueHat, 2019, MEMORY CORRUPTION IS
   BOEHM HJ, 1988, SOFTWARE PRACT EXPER, V18, P807, DOI 10.1002/spe.4380180902
   Checked C Specification, 2016, CHECKED C
   Clang repo, 2022, CHECKED C PROJECT CO
   Condit J, 2007, LECT NOTES COMPUT SC, V4421, P520
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   CVE Trends, 2021, CVE TRENDS
   Duan JH, 2020, 2020 IEEE SECURE DEVELOPMENT (SECDEV 2020), P15, DOI 10.1109/SecDev45635.2020.00018
   Duck GJ, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P132, DOI 10.1145/2892208.2892212
   Elliott AS, 2018, 2018 IEEE CYBERSECURITY DEVELOPMENT CONFERENCE (SECDEV 2018), P53, DOI 10.1109/SecDev.2018.00015
   Emre M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485498
   Foster JS, 2006, ACM T PROGR LANG SYS, V28, P1035, DOI 10.1145/1186632.1186635
   Foster JS, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/543552.512531
   Gange G, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2651360
   Greenman Ben., 2018, PACMPL 2.ICFP, V71, P1
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   Kendall S.C., 1983, Proceedings of the USENIX Summer Conference, P5
   Larson Per, 2018, RUSTCONF 2018 TALK
   Li Liyi, 2022, P COMP SEC FDN S CSF
   Machiry Aravind, 2022, ARXIV PREPRINT ARXIV
   Microsoft, 2019, BENCHMARKS EVALUATIN
   Migeed Zeina., 2020, P 2020 ACM SIGACT SI
   MITRE, 2022, 2021 CWE Top 25 Most Dangerous Software Weaknesses
   Nagarakatte S, 2010, ACM SIGPLAN NOTICES, V45, P31
   Nagarakatte Santosh, 2009, P 2009 ACM SIGPLAN C
   Necula GC, 2005, ACM T PROGR LANG SYS, V27, P477, DOI 10.1145/1065887.1065892
   Pereira F, 2013, INT WORKSHOP PATTERN, P1, DOI 10.1109/PRNI.2013.10
   Phipps-Costin Luna, 2021, P 2021 ACM PROGRAMMI
   Pratikakis P, 2006, LECT NOTES COMPUT SC, V4134, P88
   Pratikakis P, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1889997.1890000
   Rastogi A, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P481
   Redini N, 2019, LECT NOTES COMPUT SC, V11543, P482, DOI 10.1007/978-3-030-22038-9_23
   Rehof J, 1999, SCI COMPUT PROGRAM, V35, P191, DOI 10.1016/S0167-6423(99)00011-8
   Rodrigues M, 2019, INT SYM CODE GENER, P136, DOI [10.1109/CGO.2019.8661178, 10.1109/cgo.2019.8661178]
   Ruef Andrew, 2019, Principles of Security and Trust. 8th International Conference, POST 2019. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2019. Proceedings: Lecture Notes in Computer Science (11426), P76, DOI 10.1007/978-3-030-17138-4_4
   Rust Community, 2021, RUST PROGR LANG
   Serebryany Konstantin, 2012, USENIX, P309
   Shankar U, 2001, USENIX ASSOCIATION PROCEEDINGS OF THE 10TH USENIX SECURITY SYMPOSIUM, P201
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy G, 2008, P 2008 S DYN LANG DL
   Song D, 2019, P IEEE S SECUR PRIV, P1275, DOI 10.1109/SP.2019.00010
   STEFFEN JL, 1992, SOFTWARE PRACT EXPER, V22, P305, DOI 10.1002/spe.4380220403
   Szekeres Laszlo, 2013, P 2013 IEEE S SECURI
   Tobin-Hochstadt Sam, 2017, SNAPL, V17, P1, DOI [DOI 10.4230/LIPICS.SNAPL.2017.17, 10.4230/LIPIcs.SNAPL.2017.17]
   Vakilian M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P234, DOI 10.1109/ICSE.2015.44
   Zeng Anna, 2018, IDENTIFYING BARRIERS
   Zhou F, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P45
   Zhou Jie., PLDI 2021 STUD RES C
NR 50
TC 5
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 78
DI 10.1145/3527322
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300014
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Shaikhha, A
   Huot, M
   Smith, J
   Olteanu, D
AF Shaikhha, Amir
   Huot, Mathieu
   Smith, Jaclyn
   Olteanu, Dan
TI Functional Collection Programming with Semi-ring Dictionaries
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Semi-Ring Dictionary; Sparse Linear Algebra; Nested Relational Algebra
ID ALGEBRA
AB This paper introduces semi-ring dictionaries, a powerful class of compositional and purely functional collections that subsume other collection types such as sets, multisets, arrays, vectors, and matrices. We developed SDQL, a statically typed language that can express relational algebra with aggregations, linear algebra, and functional collections over data such as relations and matrices using semi-ring dictionaries. Furthermore, thanks to the algebraic structure behind these dictionaries, SDQL unifies a wide range of optimizations commonly used in databases (DB) and linear algebra (LA). As a result, SDQL enables efficient processing of hybrid DB and LA workloads, by putting together optimizations that are otherwise confined to either DB systems or LA frameworks. We show experimentally that a handful of DB and LA workloads can take advantage of the SDQL language and optimizations. SDQL can be competitive with or outperforms a host of systems that are state of the art in their own domain: in-memory DB systems Typer and Tectorwise for (flat, not nested) relational data; SciPy for LA workloads; sparse tensor compiler taco; the Trance nested relational engine; and the in-database machine learning engines LMFAO and Morpheus for hybrid DB/LA workloads over relational data.
C1 [Shaikhha, Amir] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
   [Huot, Mathieu; Smith, Jaclyn] Univ Oxford, Oxford, England.
   [Olteanu, Dan] Univ Zurich, Zurich, Switzerland.
C3 University of Edinburgh; University of Oxford; University of Zurich
RP Shaikhha, A (corresponding author), Univ Edinburgh, Edinburgh, Midlothian, Scotland.
RI Shaikhha, Amir/JXL-7753-2024
OI Smith, Jaclyn/0000-0001-8498-8949; Huot, Mathieu/0000-0002-5294-9088
FU European Union [682588]; EPSRC [EP/T022124/1]; Huawei; EPSRC
   [EP/T022124/1] Funding Source: UKRI
FX This project has received funding from the European Union's Horizon 2020
   research and innovation programme under grant agreement No 682588. The
   authors also acknowledge the EPSRC grant EP/T022124/1 (QUINTON) and
   Huawei for their support of the distributed data management and
   processing laboratory at the University of Edinburgh.
CR Abadi Martin, 2016, P 12 USENIX C OPERAT
   Aji SM, 2000, IEEE T INFORM THEORY, V46, P325, DOI 10.1109/18.825794
   Amsterdamer Yael, 2011, PODS, P153, DOI DOI 10.1145/1989284.1989302
   Ankner J, 2013, ACM SIGPLAN NOTICES, V48, P1, DOI 10.1145/2502323.2502325
   [Anonymous], 2013, ACM SIGPLAN NOTICES, V48, P101, DOI 10.1145/2500365.2500613
   [Anonymous], 2006, SIGMOD C
   [Anonymous], 1990, P 1990 ACM C LISP FU, p61s78
   [Anonymous], 2017, P CIDR
   [Anonymous], 2012, IEEE Data Eng. Bull.
   [Anonymous], 2005, Catalyzing Inquiry at the Interface of Computing and Biology
   Armbrust M, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1383, DOI 10.1145/2723372.2742797
   Arun Kumar Side Li, 2019, MORPHEUSPY
   Axelsson Emil, 2011, Implementation and Application of Functional Languages. 22nd International Symposium, IFL 2010. Revised Selected Papers, P121, DOI 10.1007/978-3-642-24276-2_8
   BACKHOUSE RC, 1975, J I MATH APPL, V15, P161
   Bader Brett W, 2008, SIAM J SCI COMPUT, V30
   Bischl B, 2016, J MACH LEARN RES, V17
   Boncz Peter, 2014, TPCH ANALYZED HIDDEN, p61s76
   Boski M, 2017, 2017 10TH INTERNATIONAL WORKSHOP ON MULTIDIMENSIONAL (ND) SYSTEMS (NDS)
   Breazu-Tannen Val, 1991, LOGICAL COMPUTATIONA
   Breazu-Tannen Val, 1992, Naturally embedded query languages.
   Brijder R, 2019, ACM T DATABASE SYST, V44, DOI 10.1145/3331445
   BUNEMAN P, 1995, THEOR COMPUT SCI, V149, P3, DOI 10.1016/0304-3975(95)00024-Q
   Carlson A, 2010, AAAI CONF ARTIF INTE, P1306
   Chalmers ZR, 2017, GENOME MED, V9, DOI 10.1186/s13073-017-0424-2
   Chen LJ, 2017, PROC VLDB ENDOW, V10, P1214, DOI 10.14778/3137628.3137633
   Cheney J, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1027, DOI 10.1145/2588555.2612186
   Chiw C, 2012, ACM SIGPLAN NOTICES, V47, P111, DOI 10.1145/2345156.2254079
   Chou Stephen, 2018, P ACM PROGRAM LANG, DOI DOI 10.1145/3276493
   Chu S, 2017, ACM SIGPLAN NOTICES, V52, P510, DOI [10.1145/3062341.3062348, 10.1145/3140587.3062348]
   Claessen Koen., 2012, P 7 WORKSHOP DECLARA, P21, DOI [10.1145/2103736.2103740, DOI 10.1145/2103736.2103740]
   CODD EF, 1970, COMMUN ACM, V13, P377, DOI 10.1145/357980.358007
   Conrad Keith, 2018, NOTES COURSE
   Cooper E, 2007, LECT NOTES COMPUT SC, V4709, P266
   Cormen T.H., 2009, INTRO ALGORITHMS
   Corporacion Favorita, 2017, Corp. Favorita Grocery Sales Forecasting: Can you accurately predict sales for a large grocery chain?
   Coutts Duncan, 2007, ICFP 07
   Crotty Andrew., 2015, CIDR
   Emoto K, 2012, FORM ASP COMPUT, V24, P623, DOI 10.1007/s00165-012-0241-8
   Fancello L, 2019, J IMMUNOTHER CANCER, V7, DOI 10.1186/s40425-019-0647-4
   Fegaras L, 2000, ACM T DATABASE SYST, V25, P457, DOI 10.1145/377674.377676
   Feng X., 2012, SIGMOD, P325, DOI 10.1145/2213836.2213874
   Fink Robert, 2012, AGGREGATION PROBABIL, V5
   Geerts F, 2021, SIGMOD REC, V50, P6, DOI 10.1145/3503780.3503782
   Gibbons J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236781
   Gill A., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P223, DOI 10.1145/165180.165214
   Gondran M, 2008, OPER RES COMPUT SCI, V41, P1
   Graefe G., 1994, IEEE T KNOWL DATA EN, V6
   Green Todd J., 2007, PODS, DOI DOI 10.1145/1265530.1265535
   Grelck C, 2006, INT J PARALLEL PROG, V34, P383, DOI 10.1007/S10766-006-0018-x
   Grust T, 1999, J INTELL INF SYST, V12, P191, DOI 10.1023/A:1008705026446
   Grust T, 2010, PROC VLDB ENDOW, V3, P162, DOI 10.14778/1920841.1920866
   Hail Team, 2020, HAIL 0 2
   Hellerstein JM, 2012, PROC VLDB ENDOW, V5, P1700, DOI 10.14778/2367502.2367510
   Henriksen T, 2017, ACM SIGPLAN NOTICES, V52, P556, DOI [10.1145/3140587.3062354, 10.1145/3062341.3062354]
   Hutchison Dylan, 2017, P 4 ACM SIGMOD WORKS
   Iverson Kenneth E, 1962, Proceedings of the May 1-3, 1962, spring joint computer conference, P345, DOI DOI 10.1145/1460833.1460872
   Jananthan H, 2017, IEEE INT CONF BIG DA, P3180, DOI 10.1109/BigData.2017.8258298
   Jones S.P., 2001, HASK WORKSH, V1, P203
   Jones SP, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P61
   Jonnalagedda Manohar, 2015, P 6 ACM SIGPLAN S SC, P41, DOI DOI 10.1145/2774975.2774981
   Karanasos K., 2020, CIDR
   Karpathiotakis M., 2015, P 7 BIENN C INN DAT
   Karvounarakis G, 2012, SIGMOD REC, V41, P5
   Keller G, 2010, ACM SIGPLAN NOTICES, V45, P261, DOI 10.1145/1932681.1863582
   Kepner J, 2011, SOFTW ENVIRON TOOLS, V22, P1, DOI 10.1137/1.9780898719918
   Kepner J., 2016, 2016 IEEE HIGH PERF, P1
   Kersten T, 2018, PROC VLDB ENDOW, V11, P2209, DOI 10.14778/3275366.3275370
   Khamis M. A., 2018, P 2 WORKSH DAT MAN E
   Khamis MA, 2018, PODS'18: PROCEEDINGS OF THE 37TH ACM SIGMOD-SIGACT-SIGAI SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P325, DOI 10.1145/3196959.3196960
   Khamis MA, 2016, PODS'16: PROCEEDINGS OF THE 35TH ACM SIGMOD-SIGACT-SIGAI SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P13, DOI 10.1145/2902251.2902280
   Kiselyov O., 2018, Foundations and Trends in Programming Languages, V5, P1, DOI [DOI 10.1561/2500000038, /10.1561/2500000038]
   Kiselyov O, 2017, ACM SIGPLAN NOTICES, V52, P285, DOI 10.1145/3093333.3009880
   Kjolstad F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133901
   Koch C, 2016, PODS'16: PROCEEDINGS OF THE 35TH ACM SIGMOD-SIGACT-SIGAI SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P75, DOI 10.1145/2902251.2902286
   Koch C, 2014, VLDB J, V23, P253, DOI 10.1007/s00778-013-0348-4
   Krikellas Konstantinos, 2010, ICDE
   Kumar Arun, 2019, MORPHEUSPY S
   Kunft A, 2019, PROC VLDB ENDOW, V12, P1553, DOI 10.14778/3342263.3342633
   Lehmann D. J., 1977, Theoretical Computer Science, V4, P59, DOI 10.1016/0304-3975(77)90056-1
   Li SD, 2019, INT CONF MANAGE DATA, P1571, DOI 10.1145/3299869.3319878
   Libkin L, 1997, J COMPUT SYST SCI, V55, P241, DOI 10.1006/jcss.1997.1523
   Limsoon Wong, 2000, Journal of Functional Programming, V10, P19, DOI 10.1017/S0956796899003585
   Mainland G, 2013, ACM SIGPLAN NOTICES, V48, P37, DOI [10.1145/2500365.2500601, 10.1145/2544174.2500601]
   Masseroli Marco, 2015, BIOINFORMATICS, V31, p1881s1888
   Moerkotte G, 2011, PROC VLDB ENDOW, V4, P843
   Mohri M., 2002, Journal of Automata, Languages and Combinatorics, V7, P321
   Nagel F, 2014, PROC VLDB ENDOW, V7, P1095, DOI 10.14778/2732977.2732984
   Neumann Thomas, 2011, PVLDB, V4
   Nikolic M, 2018, INT CONF MANAGE DATA, P365, DOI 10.1145/3183713.3183758
   Olteanu D, 2016, SIGMOD REC, V45, P5, DOI 10.1145/3003665.3003667
   Pedregosa F, 2011, J. Mach. Learn. Res., V12, P2825
   Puschel Markus, 2005, P IEEE, V93
   Qin Chengjie, 2015, DANAC, P1
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Ramakrishnan R., 2000, Database Management Systems
   ROTH MA, 1988, ACM T DATABASE SYST, V13, P389, DOI 10.1145/49346.49347
   Schleich M, 2019, INT CONF MANAGE DATA, P1642, DOI 10.1145/3299869.3324961
   Schleich M, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P3, DOI 10.1145/2882903.2882939
   Shaikhha A, 2021, PROC VLDB ENDOW, V14, P2831, DOI 10.14778/3476311.3476356
   Shaikhha A, 2020, INT SYM CODE GENER, P145, DOI 10.1145/3368826.3377923
   Shaikhha A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341701
   Shaikhha A, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1907, DOI 10.1145/2882903.2915244
   Shaikhha A, 2018, ACM T DATABASE SYST, V43, DOI 10.1145/3183653
   Shaikhha A, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000102
   Shaikhha A, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON FUNCTIONAL HIGH-PERFORMANCE COMPUTING (FHPC '17), P12, DOI 10.1145/3122948.3122949
   Shaikhha Amir, 2019, P 33 EUR C OBJ OR PR
   Smith J, 2020, PROC VLDB ENDOW, V14, P445, DOI 10.14778/3430915.3430933
   Smith S, 2015, INT PARALL DISTRIB P, P61, DOI 10.1109/IPDPS.2015.27
   Spampinato DG, 2018, INT SYM CODE GENER, P327, DOI 10.1145/3168812
   Spampinato DG, 2016, INT SYM CODE GENER, P117, DOI 10.1145/2854038.2854060
   Steuwer M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P205, DOI 10.1145/2784731.2784754
   Sudmant PH, 2015, NATURE, V526, P75, DOI 10.1038/nature15394
   Sujeeth A.K., 2011, ICML
   Svenningsson J, 2002, ACM SIGPLAN NOTICES, V37, P124, DOI 10.1145/583852.581491
   Svensson BJ, 2014, FHPC'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN WORKSHOP ON FUNCTIONAL HIGH-PERFORMANCE COMPUTING, P43, DOI 10.1145/2636228.2636231
   Tahboub RY, 2018, INT CONF MANAGE DATA, P307, DOI 10.1145/3183713.3196893
   Takano A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P306, DOI 10.1145/224164.224221
   TARJAN RE, 1981, J ACM, V28, P577, DOI 10.1145/322261.322272
   Trinder Phil, 1992, P 3 DBPL WORKSH DBPL, P55
   Valiant Leslie G, 1975, J COMPUT SYST SCI, V10
   Vasilache Nicolas., 2018, Technical report
   Veldhuizen T.L., 2014, Icdt, P96
   Viglas Stratis, 2014, IEEE DATA ENG B, V37, p12s21
   Voss K., 2017, F1000 Research, V6, P1379, DOI [DOI 10.7490/F1000RESEARCH.1114631.1, 10.7490/f1000research.1114631.1]
   WADLER P, 1988, LECT NOTES COMPUT SC, V300, P344
   Xiong JX, 2001, ACM SIGPLAN NOTICES, V36, P298, DOI 10.1145/381694.378860
   Yan W. P., 1994, Proceedings. The 10th International Conference Data Engineering (Cat. No.94CH3383-7), P89, DOI 10.1109/ICDE.1994.283001
   Yu Y, 2021, ARXIV PREPRINT ARXIV
   Zukowski Marcin, 2005, IEEE Data Eng. Bull., V28, P17
NR 129
TC 9
Z9 9
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 89
DI 10.1145/3527333
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300025
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Govind, VKH
   Shoham, S
   Gurfinkel, A
AF Govind, Hari V. K.
   Shoham, Sharon
   Gurfinkel, Arie
TI Solving Constrained Horn Clauses Modulo Algebraic Data Types and
   Recursive Functions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Formal verification; Algebraic Data Types; Recursive Functions; Model
   Checking
AB This work addresses the problem of verifying imperative programs that manipulate data structures, e.g., Rust programs. Data structures are usually modeled by Algebraic Data Types (ADTs) in verification conditions. Inductive invariants of such programs often require recursively defined functions (RDFs) to represent abstractions of data structures. From the logic perspective, this reduces to solving Constrained Horn Clauses (CHCs) modulo both ADT and RDF. The underlying logic with RDFs is undecidable. Thus, even verifying a candidate inductive invariant is undecidable. Similarly, IC3-based algorithms for solving CHCs lose their progress guarantee: they may not find counterexamples when the program is unsafe.
   We propose a novel IC3-inspired algorithm Racer for solving CHCs modulo ADT and RDF (i.e., automatically synthesizing inductive invariants, as opposed to only verifying them as is done in deductive verification). Racer ensures progress despite the undecidability of the underlying theory, and is guaranteed to terminate with a counterexample for unsafe programs. It works with a general class of RDFs over ADTs called catamorphisms. The key idea is to represent catamorphisms as both CHCs, via relationification, and RDFs, using novel abstractions. Encoding catamorphisms as CHCs allows learning inductive properties of catamorphisms, as well as preserving unsatisfiabilty of the original CHCs despite the use of RDF abstractions, whereas encoding catamorphisms as RDFs allows unfolding the recursive definition, and relying on it in solutions. Abstractions ensure that the underlying theory remains decidable. We implement our approach in Z3 and show that it works well in practice.
C1 [Govind, Hari V. K.; Gurfinkel, Arie] Univ Waterloo, Dept Elect & Comp Engn, Waterloo, ON, Canada.
   [Shoham, Sharon] Tel Aviv Univ, Tel Aviv, Israel.
C3 University of Waterloo; Tel Aviv University
RP Govind, VKH (corresponding author), Univ Waterloo, Dept Elect & Comp Engn, Waterloo, ON, Canada.
EM hgvk94@gmail.com; sharon.shoham@gmail.com; arie.gurfinkel@uwaterloo.ca
OI Gurfinkel, Arie/0000-0002-5964-6792; V K, Hari/0000-0002-2789-5997
FU European Research Council under the European Union [759102-SVIS]; United
   States-Israel Binational Science Foundation (BSF) [2016260]; Israeli
   Science Foundation (ISF) [1810/18]; Natural Sciences and Engineering
   Research Council of Canada (NSERC); MathWorks Inc.; Division Of Ocean
   Sciences; Directorate For Geosciences [2016260] Funding Source: National
   Science Foundation
FX The research leading to these results has received funding from the
   European Research Council under the European Union's Horizon 2020
   research and innovation programme (grant agreement No [759102-SVIS]).
   This research was partially supported by the United States-Israel
   Binational Science Foundation (BSF) grant No. 2016260, and the Israeli
   Science Foundation (ISF) grant No. 1810/18. We acknowledge the support
   of the Natural Sciences and Engineering Research Council of Canada
   (NSERC) and MathWorks Inc.
CR Alberti Francesco, 2012, LECT NOTES COMPUTER, V7180, p46s61, DOI [10.1007/978- 3- 642- 28717- 6_7, DOI 10.1007/978-3-642-28717-6_7]
   Amin Nada, 2014, Tests and Proofs. 8th International Conference (TAP 2014). Held as Part of STAF 2014. Proceedings: LNCS 8570, P20, DOI 10.1007/978-3-319-09099-3_2
   [Anonymous], 2007, Journal on Satisfiability, Boolean Modeling and Computation
   Barrett C, 2017, The SMT-LIB Standard: Version 2.6
   Bjorner N, 2015, LECT NOTES COMPUT SC, V9300, P24, DOI 10.1007/978-3-319-23534-9_2
   Bjorner Nikolaj, 2015, LPAR, V35, P15, DOI DOI 10.29007/VV21
   Bjurner Nikolaj., 1999, THESIS STANFORD U ST
   Bueno D, 2019, LECT NOTES COMPUT SC, V11388, P363, DOI 10.1007/978-3-030-11245-5_17
   Champion A, 2018, LECT NOTES COMPUT SC, V10805, P365, DOI 10.1007/978-3-319-89960-2_20
   De Angelis E, 2020, LECT NOTES COMPUT SC, V12166, P83, DOI 10.1007/978-3-030-51074-9_6
   De Angelis E, 2018, THEOR PRACT LOG PROG, V18, P452, DOI 10.1017/S1471068418000157
   Fedyukovich G, 2020, FORM METHOD SYST DES, V56, P154, DOI 10.1007/s10703-020-00349-x
   Fedyukovich G, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P100, DOI 10.23919/FMCAD.2017.8102247
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Flanagan C, 2001, INFORM PROCESS LETT, V77, P97, DOI 10.1016/S0020-0190(00)00196-4
   Garg P, 2016, ACM SIGPLAN NOTICES, V51, P499, DOI 10.1145/2914770.2837664
   Grebenshchikov S, 2012, ACM SIGPLAN NOTICES, V47, P405, DOI 10.1145/2345156.2254112
   Hoder Krystof, 2012, LNCS, P157, DOI [10.1007/978-3-642-31612-8_13, DOI 10.1007/978-3-642-31612-8_13, DOI 10.1007/978-3-642-31612-813]
   Hojjat H, 2018, PROCEEDINGS OF THE 2018 18TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P158
   Komuravelli A, 2016, FORM METHOD SYST DES, V48, P175, DOI 10.1007/s10703-016-0249-4
   Kostyukov Y, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P451, DOI 10.1145/3453483.3454055
   Leino KRM, 2012, LECT NOTES COMPUT SC, V7148, P315, DOI 10.1007/978-3-642-27940-9_21
   Löding C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158098
   Matsushita Y, 2020, LECT NOTES COMPUT SC, V12075, P484, DOI 10.1007/978-3-030-44914-8_18
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   OPPEN DC, 1980, J ACM, V27, P403, DOI 10.1145/322203.322204
   Reger G, 2019, LECT NOTES ARTIF INT, V11716, P477, DOI 10.1007/978-3-030-29436-6_28
   Reynolds A, 2015, LECT NOTES COMPUT SC, V8931, P80
   Rosén D, 2015, LECT NOTES COMPUT SC, V9450, P219, DOI 10.1007/978-3-662-48899-7_16
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Suter P, 2011, LECT NOTES COMPUT SC, V6887, P298, DOI 10.1007/978-3-642-23702-7_23
   Suter P, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P199, DOI 10.1145/1706299.1706325
   Pham TH, 2016, J AUTOM REASONING, V57, P281, DOI 10.1007/s10817-016-9368-2
   Zhang T, 2004, LECT NOTES ARTIF INT, V3097, P152
   Zhang T, 2006, INFORM COMPUT, V204, P1526, DOI 10.1016/j.ic.2006.03.004
   Zhu H, 2018, ACM SIGPLAN NOTICES, V53, P707, DOI [10.1145/3192366.3192416, 10.1145/3296979.3192416]
NR 36
TC 7
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 60
DI 10.1145/3498722
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900061
OA gold
DA 2024-07-18
ER

PT J
AU Kolosick, M
   Narayan, S
   Johnson, E
   Watt, C
   LeMay, M
   Garg, D
   Jhala, R
   Stefan, D
AF Kolosick, Matthew
   Narayan, Shravan
   Johnson, Evan
   Watt, Conrad
   LeMay, Michael
   Garg, Deepak
   Jhala, Ranjit
   Stefan, Deian
TI Isolation without Taxation Near-Zero-Cost Transitions for WebAssembly
   and SFI
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE software fault isolation; sandboxing; WebAssembly; verification
AB Software sandboxing or software-based fault isolation (SFI) is a lightweight approach to building secure systems out of untrusted components. Mozilla, for example, uses SFI to harden the Firefox browser by sandboxing third-party libraries, and companies like Fastly and Cloudflare use SFI to safely co-locate untrusted tenants on their edge clouds. While there have been significant efforts to optimize and verify SFI enforcement, context switching in SFI systems remains largely unexplored: almost all SFI systems use heavyweight transitions that are not only error-prone but incur significant performance overhead from saving, clearing, and restoring registers when context switching. We identify a set of zero-cost conditions that characterize when sandboxed code has sufficient structured to guarantee security via lightweight zero-cost transitions (simple function calls). We modify the Lucet Wasm compiler and its runtime to use zero-cost transitions, eliminating the undue performance tax on systems that rely on Lucet for sandboxing (e.g., we speed up image and font rendering in Firefox by up to 29.7% and 10% respectively). To remove the Lucet compiler and its correct implementation of the Wasm specification from the trusted computing base, we (1) develop a static binary verifier, VeriZero, which (in seconds) checks that binaries produced by Lucet satisfy our zero-cost conditions, and (2) prove the soundness of VeriZero by developing a logical relation that captures when a compiled Wasm function is semantically well-behaved with respect to our zero-cost conditions. Finally, we show that our model is useful beyondWasm by describing a new, purpose-built SFI system, SegmentZero32, that uses x86 segmentation and LLVM with mostly off-the-shelf passes to enforce our zero-cost conditions; our prototype performs on-par with the state-of-the-art Native Client SFI system.
C1 [Kolosick, Matthew; Narayan, Shravan; Johnson, Evan; Jhala, Ranjit; Stefan, Deian] Univ Calif San Diego, La Jolla, CA 92093 USA.
   [Watt, Conrad] Univ Cambridge, Cambridge, England.
   [LeMay, Michael] Intel Labs, Santa Clara, CA USA.
   [Garg, Deepak] Max Planck Inst Software Syst, Kaiserslautern, Germany.
C3 University of California System; University of California San Diego;
   University of Cambridge; Intel Corporation; Max Planck Society
RP Kolosick, M (corresponding author), Univ Calif San Diego, La Jolla, CA 92093 USA.
EM mkolosick@eng.ucsd.edu; srn002@eng.ucsd.edu; e5johnso@eng.ucsd.edu;
   conrad.watt@cl.cam.ac.uk; michael.lemay@intel.com; dg@mpi-sws.org;
   rjhala@eng.ucsd.edu; deian@cs.ucsd.edu
RI Johnson, Evan/AAC-1053-2021
FU NSF [CNS-1514435, CNS-2120642, CCF-1918573, CAREER CNS-2048262]; CONIX
   Research Center, one of six centers in JUMP, a Semiconductor Research
   Corporation (SRC) program - DARPA; EPSRC [EP/K008528/1]; Google PhD
   Fellowship in Programming Technology and Software Engineering;
   Peterhouse, University of Cambridge
FX We thank the reviewers for their suggestions and insightful comments.
   Many thanks to Bobby Holley, Mike Hommey, Chris Fallin, Tom Ritter, Till
   Schneidereit, Andy Wortman, and Alon Zakai for fruitful discussions. We
   thank Chris Fallin, Pat Hickey, and Andy Wortman for working with us to
   integrate VeriZero into the Lucet compiler. This work was supported in
   part by gifts from Cisco, Fastly, Google, and Intel; by the NSF under
   Grant Number CNS-1514435, CNS-2120642, CCF-1918573, CAREER CNS-2048262;
   and, by the CONIX Research Center, one of six centers in JUMP, a
   Semiconductor Research Corporation (SRC) program sponsored by DARPA.
   Conrad Watt was supported by the EPSRC grant REMS: Rigorous Engineering
   for Mainstream Systems (EP/K008528/1), a Google PhD Fellowship in
   Programming Technology and Software Engineering, and a Research
   Fellowship from Peterhouse, University of Cambridge.
CR Adl-Tabatabai, 1996, P ACM SIGPLAN 96 C P, DOI DOI 10.1145/231379.231402
   Aiken Mark, 2006, P 2006 WORKSH MEM SY
   ALDER F, 2020, ACSAC 20 ANN COMP SE, DOI DOI 10.1145/3427228.3427270
   [Anonymous], 2010, NACL ISSUE 775
   Ansel Jason, 2011, P 32 ACM SIGPLAN C P, DOI DOI 10.1145/1993498
   Bartel Alexandre, 2018, Phrack
   Belay Adam, 2012, P 10 USENIX C OP SYS
   Besson F, 2018, LECT NOTES COMPUT SC, V11002, P166, DOI 10.1007/978-3-319-99725-4_12
   Besson Frederic, 2019, LECT NOTES COMPUTER, V11423, DOI DOI 10.1007/978-3-030-17184
   Bittau Andrea, 2008, 5 USENIX S NETW SYST
   Bosamiya, 2020, WEBASSEMBLY INTERMED
   Burow N, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3054924
   Bytecode Alliance, 2020, WEBASSEMBLY MICRO RU
   Castro M, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P45
   Chen YH, 2016, P IEEE S SECUR PRIV, P56, DOI 10.1109/SP.2016.12
   Chromium Team, 2020, MEM SAF
   Erlingsson U, 2006, Usenix Association 7th Usenix Symposium on Operating Systems Design and Implementation, P75
   Fahndrich M., 2006, Operating Systems Review, V40, P177, DOI 10.1145/1218063.1217953
   Ford B, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 4TH USENIX CONFERENCE ON FILE AND STORAGE TECHNOLOGIES, P295
   Ford B., 2008, 2008 USENIX ANN TECH
   Froyd Nathan, 2020, SECURING FIREFOX WEB
   Gadepalli PK, 2020, PROCEEDINGS OF THE 2020 21ST INTERNATIONAL MIDDLEWARE CONFERENCE (MIDDLEWARE '20), P265, DOI 10.1145/3423211.3425680
   Google Project Zero 2021, INTR IN THE WILD SER
   Goonasekera N, 2015, SOFTWARE PRACT EXPER, V45, P1597, DOI 10.1002/spe.2294
   Grimmer, 2015, WORKSH PROGR LANG AN
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   Hansen Lars T, 2019, CRANELIFT PERFORMANC
   Hedayati M, 2019, PROCEEDINGS OF THE 2019 USENIX ANNUAL TECHNICAL CONFERENCE, P489
   HERDER JN, 2009, P 2009 IEEE IFIP INT, DOI DOI 10.1109/DSN.2009.5270357
   Hunt, 2007, SIGOPS OPERATING SYS, V41
   Intel, 2020, Intel 64 and IA-32 Architectures Software Developer's Manual
   Jangda A, 2019, PROCEEDINGS OF THE 2019 USENIX ANNUAL TECHNICAL CONFERENCE, P107
   Java Platform, JAVA PLATFORM STANDA
   Johnson, 2021, UPDATE VERIWASM VERS
   Johnson Evan, NETWORK DISTRIBUTED
   Karger, 1989, P 3 INT C ARCH SUPP
   Kolosick Matthew, 2021, ARXIV210500033CSCR
   Kroll JA, 2014, P IEEE CSFW, P18, DOI 10.1109/CSF.2014.10
   Kuznetsov Volodymyr, 2014, 11 USENIX S OP SYST
   Litton J, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P49
   Lu H.J., 2018, System V application binary interface
   Lu Zhao, 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P289
   Lucco, 1995, WWW
   Maffeis S, 2010, P IEEE S SECUR PRIV, P125, DOI 10.1109/SP.2010.16
   Matos AA, 2005, 18TH IEEE COMPUTER SECURITY FOUNDATIONS WORKSHOP, PROCEEDINGS, P226, DOI 10.1109/CSFW.2005.21
   McCamant S, 2006, USENIX ASSOCIATION PROCEEDINGS OF THE 15TH USENIX SECURITY SYMPOSIUM, P209
   McMullen Tyler, 2020, THINK FAST TIME DISC
   Mettler, 2010, NETWORK DISTRIBUTED
   Miller M.S., 2008, Technical Report
   Miller Matt, 2019, Trends and challenges in the vulnerability mitigation landscape
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Morrisett G, 2002, J FUNCT PROGRAM, V12, P43, DOI 10.1017/S0956796801004178
   Morrisett G, 2012, ACM SIGPLAN NOTICES, V47, P395, DOI 10.1145/2345156.2254111
   Morrisett Greg, 1999, ACM SIGPLAN WORKSH C
   Mozilla, 2021, FIREFOX PUBLIC DATA
   Narayan, 2019, ARXIV191202285CSCR
   Narayan Shravan, 2020, 29 USENIX SEC S USEN
   Native Client team, 2009, NAT CLIENT SEC CONT
   Niu B, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1317, DOI 10.1145/2660267.2660281
   Payer M, 2011, ACM SIGPLAN NOTICES, V46, P157, DOI 10.1145/2007477.1952703
   Qiang WZ, 2017, 2017 19TH IEEE INTERNATIONAL CONFERENCE ON HIGH PERFORMANCE COMPUTING AND COMMUNICATIONS (HPCC) / 2017 15TH IEEE INTERNATIONAL CONFERENCE ON SMART CITY (SMARTCITY) / 2017 3RD IEEE INTERNATIONAL CONFERENCE ON DATA SCIENCE AND SYSTEMS (DSS), P34, DOI 10.1109/HPCC-SmartCity-DSS.2017.5
   Schrammel David, 2020, 29 USENIX SEC S USEN
   Sehr David, 2010, 19 USENIX SEC S WASH, p1s12
   Seltzer MI, 1996, PROCEEDINGS OF THE SECOND SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '96), P213, DOI 10.1145/248155.238779
   Siefers J, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P201, DOI 10.1145/1866307.1866331
   Skorstengaard L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290332
   Tan Gang, 2017, Principles and Implementation Techniques of Software-Based Fault Isolation
   The LLVM Foundation, 2021, CONTR FLOW INT CLANG
   The LLVM Foundation, 2018, AUT VAR IN
   The LLVM Foundation, 2021, SAFESTACK CLANG 12 D
   Tice C, 2014, PROCEEDINGS OF THE 23RD USENIX SECURITY SYMPOSIUM, P941
   Tsariounov, 2021, SHIELDING LINUX RESO
   Vahldiek-Oberwagner A, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1221
   Varda Kenton, 2018, WebAssembly on Cloudflare workers
   Wahbe R., 1993, Operating Systems Review, V27, P203, DOI 10.1145/173668.168635
   Watson RNM, 2015, P IEEE S SECUR PRIV, P20, DOI 10.1109/SP.2015.9
   Watt C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360559
   WebAssembly Community Group, 2021, EXC HANDL
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
   Yee B, 2009, P IEEE S SECUR PRIV, P79, DOI 10.1109/SP.2009.25
   Zakai Alon, 2020, WasmBoxC: Simple, Easy, and Fast VM-less Sandboxing
   Zeng B, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P29
   Zhou Y, 2014, ASIAPAC SIGN INFO PR
NR 83
TC 3
Z9 3
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 27
DI 10.1145/3498688
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900028
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Atkinson, E
   Baudart, G
   Mandel, L
   Yuan, C
   Carbin, M
AF Atkinson, Eric
   Baudart, Guillaume
   Mandel, Louis
   Yuan, Charles
   Carbin, Michael
TI Statically Bounded-Memory Delayed Sampling for Probabilistic Streams
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Probabilistic programming; reactive programming; streaming inference;
   semantics; program analysis
AB Probabilistic programming languages aid developers performing Bayesian inference. These languages provide programming constructs and tools for probabilistic modeling and automated inference. Prior work introduced a probabilistic programming language, ProbZelus, to extend probabilistic programming functionality to unbounded streams of data. This work demonstrated that the delayed sampling inference algorithm could be extended to work in a streaming context. ProbZelus showed that while delayed sampling could be effectively deployed on some programs, depending on the probabilistic model under consideration, delayed sampling is not guaranteed to use a bounded amount of memory over the course of the execution of the program.
   In this paper, we the present conditions on a probabilistic program's execution under which delayed sampling will execute in bounded memory. The two conditions are dataflow properties of the core operations of delayed sampling: the m-consumed property and the unseparated paths property. A program executes in bounded memory under delayed sampling if, and only if, it satisfies the m-consumed and unseparated paths properties. We propose a static analysis that abstracts over these properties to soundly ensure that any program that passes the analysis satisfies these properties, and thus executes in bounded memory under delayed sampling.
C1 [Atkinson, Eric; Yuan, Charles; Carbin, Michael] MIT, Cambridge, MA 02139 USA.
   [Baudart, Guillaume] PSL Univ, INRIA, Ecole Normale Super, Paris, France.
   [Mandel, Louis] MIT, IBM Watson AI Lab, IBM Res, Cambridge, MA USA.
C3 Massachusetts Institute of Technology (MIT); Inria; Universite PSL;
   Ecole Normale Superieure (ENS); Massachusetts Institute of Technology
   (MIT); International Business Machines (IBM)
RP Atkinson, E (corresponding author), MIT, Cambridge, MA 02139 USA.
RI Yuan, Charles/KLY-8817-2024
OI Yuan, Charles/0000-0002-4918-4467
FU MIT-IBM Watson AI Lab; Office of Naval Research [ONR N00014-17-1-2699]
FX We would like to thank Cambridge Yang, Alex Renda, Jesse Michel, and Ben
   Sherman, who all provided feedback on drafts of this paper. This work
   was supported in part by the MIT-IBM Watson AI Lab and the Office of
   Naval Research (ONR N00014-17-1-2699). Any opinions, findings, and
   conclusions or recommendations expressed in this material are those of
   the authors and do not necessarily reflect the views of the Office of
   Naval Research.
CR [Anonymous], 2007, Statistical Relational Learning
   [Anonymous], 2013, MATH CONTROL THEORY
   Atkinson Eric, 2018, VERIFYING HANDCODED
   Atkinson Eric, 2021, STATICALLY BOUNDED M
   Baudart G, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P898, DOI 10.1145/3385412.3386009
   BAUM LE, 1966, ANN MATH STAT, V37, P1554, DOI 10.1214/aoms/1177699147
   Baydin AG, 2019, PROCEEDINGS OF SC19: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, DOI 10.1145/3295500.3356180
   Bingham E, 2019, J MACH LEARN RES, V20
   Broderick T, 2013, NIPS, P1727
   Colaco Jean-Louis, 2017, TASE, p1s11
   Cusumano-Towner MF, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P221, DOI 10.1145/3314221.3314642
   Del Moral P, 2006, J R STAT SOC B, V68, P411, DOI 10.1111/j.1467-9868.2006.00553.x
   Doucet A., 2000, Proceedings of the Sixteenth conference on Uncertainty in artificial intelligence, P176
   Fink D., 1997, COMPENDIUM CONJUGATE
   Ge Hong, 2018, INT C ART INT STAT
   Gelman A, 2015, J EDUC BEHAV STAT, V40, P530, DOI 10.3102/1076998615606113
   Goodman N. D., 2014, DESIGN IMPLEMENTATIO
   Goodman ND., 2008, UAI, P220
   Gordon AD, 2014, ACM SIGPLAN NOTICES, V49, P321, DOI 10.1145/2535838.2535850
   Gupta V, 1997, LECT NOTES COMPUT SC, V1243, P243
   Huang D, 2017, ACM SIGPLAN NOTICES, V52, P111, DOI [10.1145/3140587.3062375, 10.1145/3062341.3062375]
   Kalman R E., 1960, J BASIC ENG, V82, P35, DOI DOI 10.1115/1.3662552
   Koller D., 2009, Probabilistic graphical models: principles and techniques
   Liu JS, 1998, J AM STAT ASSOC, V93, P1032, DOI 10.2307/2669847
   Lunden Daniel., 2017, THESIS KTH ROYAL I T
   Mansingkha Vikash, 2018, C PROGRAMMING LANGUA
   MEALY GH, 1955, AT&T TECH J, V34, P1045, DOI 10.1002/j.1538-7305.1955.tb03788.x
   Minka T., 2001, P 17 C UNC ART INT, P362
   Murray LM, 2018, PR MACH LEARN RES, V84
   Murray LM, 2018, ANNU REV CONTROL, V46, P29, DOI 10.1016/j.arcontrol.2018.10.013
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Ngo Van Chan, 2018, C PROGRAMMING LANGUA
   Nori AV, 2015, ACM SIGPLAN NOTICES, V50, P208, DOI [10.1145/2737924.2737982, 10.1145/2813885.2737982]
   Pfeffer Avi, 2009, Figaro: An object-oriented probabilistic programming language, V137, P96
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   Tran DA, 2017, 2017 IEEE 28TH ANNUAL INTERNATIONAL SYMPOSIUM ON PERSONAL, INDOOR, AND MOBILE RADIO COMMUNICATIONS (PIMRC), DOI 10.1109/PIMRC.2017.8292622
NR 36
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 115
DI 10.1145/3485492
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200019
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Stucki, S
   Giarrusso, PG
AF Stucki, Sandro
   Giarrusso, Paolo G.
TI A Theory of Higher-Order Subtyping with Type Intervals
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Scala; higher-kinded types; subtyping; type intervals; bounded
   polymorphism; bounded type operators; singleton kinds; dependent kinds;
   hereditary substitution
ID PURE TYPE SYSTEMS
AB The calculus of Dependent Object Types (DOT) has enabled a more principled and robust implementation of Scala, but its support for type-level computation has proven insufficient. As a remedy, we propose F..(omega), a rigorous theoretical foundation for Scala's higher-kinded types. F..(omega) extends F-<..(omega) with interval kinds, which afford a unified treatment of important type- and kind-level abstraction mechanisms found in Scala, such as bounded quantification, bounded operator abstractions, translucent type definitions and first-class subtyping constraints. The result is a flexible and general theory of higher-order subtyping. We prove type and kind safety of F..(omega), as well as weak normalization of types and undecidability of subtyping. All our proofs are mechanized in Agda using a fully syntactic approach based on hereditary substitution.
C1 [Stucki, Sandro] Chalmers Univ Technol, Comp Sci & Engn, Gothenburg, Sweden.
   [Giarrusso, Paolo G.] Bedrock Syst Inc, Berlin, Germany.
C3 Chalmers University of Technology
RP Stucki, S (corresponding author), Chalmers Univ Technol, Comp Sci & Engn, Gothenburg, Sweden.
EM sandros@chalmers.se; p.giarrusso@gmail.com
OI Stucki, Sandro/0000-0001-5608-8273
FU European Research Council (ERC) [587327]; Swedish Research Council (VR)
   [2015-04154, 2018-04230]; Swedish Research Council [2015-04154,
   2018-04230] Funding Source: Swedish Research Council
FX We owe special thanks to Guillaume Martres for many discussions about
   this work, for his patience in answering our questions about the Scala 3
   type checker, and for his striking ability to produce counterexamples to
   type system drafts. For insightful discussions and feedback on earlier
   versions of this work we thank Andreas Abel, Nada Amin, Jesper Cockx,
   Martin Odersky and Francois Pottier. We thank the anonymous reviewers
   for their helpful comments and suggestions. This paper is based upon
   work supported by the European Research Council (ERC) under Grant 587327
   DOPPLER and by the Swedish Research Council (VR) under Grants 2015-04154
   PolUser and 2018-04230 Perspex.
CR Abel A, 2008, MATH STRUCT COMP SCI, V18, P797, DOI 10.1017/S0960129508006853
   Abel A, 2008, LECT NOTES COMPUT SC, V5213, P446, DOI 10.1007/978-3-540-87531-4_32
   Adams R, 2006, J FUNCT PROGRAM, V16, P219, DOI 10.1017/S0956796805005770
   Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   Amin N, 2014, ACM SIGPLAN NOTICES, V49, P233, DOI [10.1145/2660193.2660216, 10.1145/2714064.2660216]
   Amin Nada, 2016, THESIS ECOLE POLYTEC, DOI [10.5075/epfl-thesis-7156, DOI 10.5075/EPFL-THESIS-7156]
   [Anonymous], 1992, Handbook of Logic in Computer Science
   Aspinall D, 2001, THEOR COMPUT SCI, V266, P273, DOI 10.1016/S0304-3975(00)00175-4
   Cardelli L., 1991, Journal of Functional Programming, V1, P417, DOI 10.1017/S0956796800000198
   Cardelli L., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P70, DOI 10.1145/73560.73566
   CARDELLI L, 1991, LECT NOTES COMPUT SC, V526, P750
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   Cardelli Luca, 1990, NOTES F UNPUB
   Castellan Simon, 2015, LIPICS, V38, P138, DOI 10
   Compagnoni A, 2003, INFORM COMPUT, V184, P242, DOI 10.1016/S0890-5401(03)00062-2
   Compagnoni A, 1999, LECT NOTES COMPUT SC, V1683, P420
   Compagnoni AB, 1995, LECT NOTES COMPUT SC, V933, P46, DOI 10.1007/BFb0022246
   Crary K, 1997, ACM SIGPLAN NOTICES, V32, P125, DOI 10.1145/258949.258961
   Crary Karl, 2009, 4 INT WKSH LOG FRAM, P21
   Cretin Julien, 2014, P JOINT M 23 EACSL A, DOI [10.1145/2603088.2603128, DOI 10.1145/2603088.2603128]
   Curien Pierre-Louis, 1992, MATH STRUCT COMP SCI, V2, p55S91, DOI DOI 10.1017/S0960129500001134
   Giarrusso G., 2020, PACMPL, V4, DOI [10.1145/3408996, DOI 10.1145/3408996]
   Girard J.-Y., 1972, THESIS U PARIS
   Harper R., 2005, ACM Transactions on Computational Logic, V6, P61, DOI 10.1145/1042038.1042041
   Harper R., 1994, PRINCIPLES PROGRAMMI, P123, DOI [DOI 10.1145/174675.176927, 10.1145/174675.176927]
   Harper R, 2007, J FUNCT PROGRAM, V17, P613, DOI 10.1017/S0956796807006430
   Jason Z., 2019, PACMPL, V4
   Keller C, 2010, MSFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON MATHEMATICALLY STRUCTURED FUNCTIONAL PROGRAMMING, P3
   Lee Daniel K., 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P173, DOI 10.1145/1190216.1190245
   Moors A, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P423
   Nordstrom Bengt, 1990, PROGRAMMING MARTINLO, V200
   Norell Ulf, 2007, PRACTICAL PROGRAMMIN
   Odersky M, 2016, SCALA'16: PROCEEDINGS OF THE 2016 7TH ACM SIGPLAN SYMPOSIUM ON SCALA, P51, DOI 10.1145/2998392.2998400
   Parreaux L, 2019, SCALA'19: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P12, DOI 10.1145/3337932.3338813
   Pierce B, 1997, THEOR COMPUT SCI, V176, P235, DOI 10.1016/S0304-3975(96)00096-5
   Pierce B. C., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P305, DOI 10.1145/143165.143228
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Piessens Frank, P INT WORKSH FDN OBJ, P1
   Rapoport M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360571
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Scherer G, 2015, LECT NOTES COMPUT SC, V9032, P685, DOI 10.1007/978-3-662-46669-8_28
   Stone C. A., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P214, DOI 10.1145/325694.325724
   Stucki Sandro, 2017, THESIS ECOLE POLYTEC, DOI [10.5075/epflthesis-8014, DOI 10.5075/EPFLTHESIS-8014]
   Stucki Sandro, 2021, THEORY HIGHER ORDER, DOI [10.5281/zenodo.4775731, DOI 10.5281/ZENODO.4775731]
   The Dotty Team, 2020, SCALA 3 S NEXT GENER
   Watkins K, 2004, ANN NY ACAD SCI, V3085, P355
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Yang YP, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133871
   Zwanenburg J, 1999, LECT NOTES COMPUT SC, V1581, P381
NR 49
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 69
DI 10.1145/3473574
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800009
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Ghosh, R
   Hsieh, C
   Misailovic, S
   Mitra, S
AF Ghosh, Ritwika
   Hsieh, Chiao
   Misailovic, Sasa
   Mitra, Sayan
TI <i>Koord</i>: A Language for Programming and Verifying Distributed
   Robotics Application
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Distributed Robotics; Programming Language for Robotics
ID SHARED-MEMORY
AB A robot's code needs to sense the environment, control the hardware, and communicate with other robots. Current programming languages do not provide suitable abstractions that are independent of hardware platforms. Currently, developing robot applications requires detailed knowledge of signal processing, control, path planning, network protocols, and various platform-specific details. Further, porting applications across hardware platforms remains tedious.
   We present Koord a domain specific language for distributed robotics which abstracts platform-specific functions for sensing, communication, and low-level control. Koord makes the platform-independent control and coordination code portable and modularly verifiable. Koord raises the level of abstraction in programming by providing distributed shared memory for coordination and port interfaces for sensing and control. We have developed the formal executable semantics of Koord in the K framework. With this symbolic execution engine, we can identify assumptions (proof obligations) needed for gaining high assurance from Koord applications.
   We illustrate the power of Koord through three applications: formation flight, distributed delivery, and distributed mapping. We also use the three applications to demonstrate how platform-independent proof obligations can be discharged using the Koord Prover while platform-specific proof obligations can be checked by verifying the obligations using physics-based models and hybrid verification tools.
C1 [Ghosh, Ritwika; Hsieh, Chiao; Misailovic, Sasa; Mitra, Sayan] Univ Illinois, Urbana, IL 61801 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign
RP Ghosh, R (corresponding author), Univ Illinois, Urbana, IL 61801 USA.
EM rghosh9@illinois.edu; chsieh16@illinois.edu; misailo@illinois.edu;
   mitras@illinois.edu
OI Mitra, Sayan/0000-0002-6672-8470; Hsieh, Chiao/0000-0001-8339-9915
FU National Science Foundation under the Division of Computer and Network
   Systems (CNS) [1629949, 1544901]; Computing and Communication
   Foundations (CCF) [1846354]; Direct For Computer & Info Scie & Enginr;
   Division Of Computer and Network Systems [1629949, 1544901] Funding
   Source: National Science Foundation
FX The authors were supported in part by research grants from the National
   Science Foundation under the Division of Computer and Network Systems
   (CNS) (award number 1629949 and 1544901) and Computing and Communication
   Foundations (CCF) (award number 1846354).
CR Adve SV, 1996, COMPUTER, V29, P66, DOI 10.1109/2.546611
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Attiya H., 2004, Distributed computing: fundamentals, simulations, and advanced topics, V19
   Bak Stanley., 2017, P 20 INT C HYBR, P173, DOI [10.1145/3049797.3049808, DOI 10.1145/3049797.3054973]
   Blanco-Claraco Jose Luis, 2009, THESIS U MALAGA MALA
   Blender Timo, 2016, IEEE IND ELEC, P6879, DOI 10.1109/IECON.2016.7793638
   Bohrer B, 2018, ACM SIGPLAN NOTICES, V53, P617, DOI [10.1145/3192366.3192406, 10.1145/3296979.3192406]
   Campusano M, 2017, SCI COMPUT PROGRAM, V133, P1, DOI 10.1016/j.scico.2016.06.002
   Chen Xin, 2013, DOI 10.1007/978-3-642-39799-8_18
   Cheung Shun Yan., 1995, PERFORMANCE BARRIER, V6, P890, DOI [10.1109/71.406967, DOI 10.1109/71.406967]
   DeCandia Giuseppe, 2007, Operating Systems Review, V41, P205, DOI 10.1145/1323293.1294281
   Desai A, 2013, ACM SIGPLAN NOTICES, V48, P321, DOI 10.1145/2499370.2462184
   Dillig I, 2011, ACM SIGPLAN NOTICES, V46, P567, DOI 10.1145/1993316.1993565
   Dragoi C, 2016, ACM SIGPLAN NOTICES, V51, P400, DOI [10.1145/2837614.2837650, 10.1145/2914770.2837650]
   Duggirala P.S., 2013, EMSOFT
   Fan CC, 2018, IEEE DES TEST, V35, P31, DOI 10.1109/MDAT.2018.2799804
   Fan Chuchu, 2017, DOI 10.1007/978-3-319-63387-9_22
   Frehse G., 2011, COMPUTER AIDED VERIF, P379, DOI [DOI 10.1007/978-3-642-22110-1, 10.1007/978-3-642-22110-1_30]
   GAUTHIER D, 1987, IEEE T ROBOTIC AUTOM, V3, P493, DOI 10.1109/JRA.1987.1087141
   Gerla M, 2014, 2014 IEEE WORLD FORUM ON INTERNET OF THINGS (WF-IOT), P241, DOI 10.1109/WF-IoT.2014.6803166
   Ghosh Ritwika, 2018, P 2018 WORKSH ADV TO, P41, DOI [10.1145/3231104.3231958, DOI 10.1145/3231104.3231958]
   Ghosh Ritwika., 2020, THESIS U ILLINOIS UR
   Ghosh S., 2014, Distributed systems: an algorithmic approach
   Guo G, 2012, IEEE T VEH TECHNOL, V61, P2901, DOI 10.1109/TVT.2012.2203362
   HENSGEN D, 1988, INT J PARALLEL PROG, V17, P1, DOI 10.1007/BF01379320
   Henzinger Thomas A., 1995, INPROCEEDINGSOFTHEAC, DOI 10.1145/225058.225162
   Karaman S., 2017, INTEGR STEM EDU CONF
   Kvasnica M, 2004, LECT NOTES COMPUT SC, V2993, P448
   Lakshman Avinash, 2010, Operating Systems Review, V44, P35, DOI 10.1145/1773912.1773922
   LaValle S.M., 1998, RAPIDLY EXPLORING RA, V129, P98
   Leonidas Rigas., 2011, SOSP 11 P 23 ACM S, P143, DOI 10.1145/2043556.2043571
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Meyer Johannes, 2012
   Milicevic Aleksandar., 2015, REACT LANGUAGE ROBOT
   Mitra Sayan, 2020, P6654, DOI 10.1109/ICRA40945.2020.9196513
   Mitra Sayan, 2020, TACAS, P173
   Mosterman PJ, 2014, COMPUT SCI ENG, V16, P90, DOI 10.1109/MCSE.2014.58
   Murali A., 2019, ARXIV190608236
   NITZBERG B, 1991, COMPUTER, V24, P52, DOI 10.1109/2.84877
   Nordmann Arne, 2014, DOI 10.1007/978-3-319-11900-7_17
   Pickem D., 2017, DOI 10.1109/ICRA.2017.7989200
   Pinciroli C., 2016, 2016 IEEERSJ INT C, DOI 10.1109/IROS.2016.7759558
   Pires JN, 2000, ROBOT CIM-INT MANUF, V16, P29, DOI 10.1016/S0736-5845(99)00039-3
   Platzer A., 2018, Logical Foundations of Cyber-Physical Systems, DOI DOI 10.1007/978-3-319-63588-0
   Protic J., 1997, DISTRIBUTED SHARED M, V1st
   Quigley Morgan, 2009
   Rosu G, 2014, ELECTRON NOTES THEOR, V304, P3, DOI 10.1016/j.entcs.2014.05.002
   Russo G, 2011, PHYS REV E, V84, DOI 10.1103/PhysRevE.84.041929
   Seshia Sanjit A., 2017, DOI 10.1145/3055004.3055022
   Shamshiri RR, 2018, INT J AGR BIOL ENG, V11, P1, DOI 10.25165/j.ijabe.20181104.4278
   St-Onge David, 2017, ARXIV171008843
   Thrun Sebastian., 2003, EXPLORING ARTIFICIAL, P1
   Williams BC, 2003, P IEEE, V91, P212, DOI 10.1109/JPROC.2002.805828
   Yorsh Greta, 2008, POPL08 P 35 ANN ACM, P221, DOI 10.1145/13284381328467
NR 54
TC 8
Z9 11
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 232
DI 10.1145/3428300
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900109
OA gold
DA 2024-07-18
ER

PT J
AU Le, TC
   Antonopoulos, T
   Fathololumi, P
   Koskinen, E
   Nguyen, T
AF Le, Ton Chanh
   Antonopoulos, Timos
   Fathololumi, Parisa
   Koskinen, Eric
   Nguyen, ThanhVu
TI DynamiTe: Dynamic Termination and Non-termination Proofs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE dynamic analysis; termination; non-termination
ID POLYNOMIAL INVARIANTS; ABSTRACT DOMAIN; GENERATION
AB There is growing interest in termination reasoning for nonlinear programs and, meanwhile, recent dynamic strategies have shown they are able to infer invariants for such challenging programs. These advances led us to hypothesize that perhaps such dynamic strategies for nonlinear invariants could be adapted to learn recurrent sets (for non-termination) and/or ranking functions (for termination).
   In this paper, we exploit dynamic analysis and draw termination and non-termination as well as static and dynamic strategies closer together in order to tackle nonlinear programs. For termination, our algorithm infers ranking functions from concrete transitive closures, and, for non-termination, the algorithm iteratively collects executions and dynamically learns conditions to refine recurrent sets. Finally, we describe an integrated algorithm that allows these algorithms to mutually inform each other, taking counterexamples from a failed validation in one endeavor and crossing both the static/dynamic and termination/non-termination lines, to create new execution samples for the other one.
   We have implemented these algorithms in a new tool called DynamiTe. For nonlinear programs, there are currently no SV-COMP termination benchmarks so we created new sets of 38 terminating and 39 non-terminating programs. Our empirical evaluation shows that we can effectively guess (and sometimes even validate) ranking functions and recurrent sets for programs with nonlinear behaviors. Furthermore, we show that counterexamples from one failed validation can be used to generate executions for a dynamic analysis of the opposite property. Although we are focused on nonlinear programs, as a point of comparison, we compare DynamiTe's performance on linear programs with that of the state-of-the-art tool, Ultimate. Although DynamiTe is an order of magnitude slower it is nonetheless somewhat competitive and sometimes finds ranking functions where Ultimate was unable to. Ultimate cannot, however, handle the nonlinear programs in our new benchmark suite.
C1 [Le, Ton Chanh; Fathololumi, Parisa; Koskinen, Eric] Stevens Inst Technol, Hoboken, NJ 07030 USA.
   [Antonopoulos, Timos] Yale Univ, New Haven, CT 06520 USA.
   [Nguyen, ThanhVu] Univ Nebraska, Lincoln, NE 68583 USA.
C3 Stevens Institute of Technology; Yale University; University of Nebraska
   System; University of Nebraska Lincoln
RP Le, TC (corresponding author), Stevens Inst Technol, Hoboken, NJ 07030 USA.
EM letonchanh@gmail.com; timos.antonopoulos@yale.edu; pfatholo@stevens.edu;
   eric.koskinen@stevens.edu; tnguyen@cse.unl.edu
RI Le, Ton Chanh/AAB-4349-2021
OI Nguyen, ThanhVu/0000-0002-4255-4592
FU Office of Naval Research [N00014-17-1-2787]; National Science Foundation
   [CCF-1948536]; Army Research Office [W911NF-19-1-0054]
FX We thank the anonymous reviewers for the helpful feedback. Timos
   Antonopoulos and Eric Koskinen are supported by the Office of Naval
   Research under Grant N00014-17-1-2787. ThanhVu Nguyen is supported by
   the National Science Foundation under Grant CCF-1948536 and the Army
   Research Office under Grant W911NF-19-1-0054.
CR [Anonymous], 2020, SV COMP BENCHMARK NL
   AProVE, 2020, APROVE AUT PROGR VER
   Babic D, 2007, SEFM 2007: FIFTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P93, DOI 10.1109/SEFM.2007.25
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Beyer Dirk, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12079), P347, DOI 10.1007/978-3-030-45237-7_21
   Beyer Dirk, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P184, DOI 10.1007/978-3-642-22110-1_16
   Blanchet B, 2003, ACM SIGPLAN NOTICES, V38, P196, DOI 10.1145/780822.781153
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3576, P491
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3580, P1349
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3385, P113
   Brockschmidt Marc., 2020, T2 TEMPORAL LOGIC PR
   Burnim J, 2009, PROC INT CONF SOFTW, P463, DOI 10.1109/ICSE.2009.5070545
   Chen H.-Y., 2014, International Conference on Tools and Algorithms for the Construction and Analysis of Systems, P156
   Cook B, 2008, LECT NOTES COMPUT SC, V5123, P328
   Cook B, 2006, ACM SIGPLAN NOTICES, V41, P415, DOI 10.1145/1133981.1134029
   Cook B, 2014, 2014 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P67, DOI 10.1109/FMCAD.2014.6987597
   Cook B, 2011, COMMUN ACM, V54, P88, DOI 10.1145/1941487.1941509
   Cousot P, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P245
   CPAChecker, 2020, CPACHECKER CONF SOFT
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dietsch D, 2015, LECT NOTES COMPUT SC, V9206, P49, DOI 10.1007/978-3-319-21690-4_4
   DynamiTe, 2020, SUPPL MAT
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Feret J, 2004, LECT NOTES COMPUT SC, V2986, P33
   Frohn F, 2019, 2019 FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P221, DOI [10.23919/FMCAD.2019.8894271, 10.23919/fmcad.2019.8894271]
   FuncTion, 2020, FUNCTION ABSTR DOM F
   Garg P, 2014, LECT NOTES COMPUT SC, V8559, P69, DOI 10.1007/978-3-319-08867-9_5
   Giesl J, 2014, LECT NOTES ARTIF INT, V8562, P184, DOI 10.1007/978-3-319-08587-6_13
   Giesl R, 2004, LECT NOTES COMPUT SC, V3091, P210
   Gulavani LS, 2008, LECT NOTES COMPUT SC, V5123, P370
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Gulwani S, 2009, LECT NOTES COMPUT SC, V5643, P51, DOI 10.1007/978-3-642-02658-4_7
   Gupta AK, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P147, DOI 10.1145/1328438.1328459
   Gurfinkel A, 2015, LECT NOTES COMPUT SC, V9206, P343, DOI 10.1007/978-3-319-21690-4_20
   Harris WR, 2010, LECT NOTES COMPUT SC, V6337, P304, DOI 10.1007/978-3-642-15769-1_19
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6461, P172, DOI 10.1007/978-3-642-17164-2_13
   Hoffmann J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P357, DOI 10.1145/1926385.1926427
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6012, P287, DOI 10.1007/978-3-642-11957-6_16
   Le TC, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P788, DOI 10.1145/3314221.3314634
   Le TC, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI [10.1145/2813885.2737993, 10.1145/2737924.2737993]
   Le TC, 2014, LECT NOTES COMPUT SC, V8829, P267, DOI 10.1007/978-3-319-11737-9_18
   Le Ton Chanh, 2020, ARXIV201005747CSPL
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   Nguyen PC, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P845, DOI 10.1145/3314221.3314643
   Nori Aditya V., 2013, ESECSIGSOFT FSE, P246, DOI 10.1145/2491411
   O'Hearn PW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371078
   Padhi S, 2016, ACM SIGPLAN NOTICES, V51, P42, DOI [10.1145/2908080.2908099, 10.1145/2980983.2908099]
   Podelski A, 2004, IEEE S LOG, P32, DOI 10.1109/LICS.2004.1319598
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   Rodríguez-Carbonell E, 2007, SCI COMPUT PROGRAM, V64, P54, DOI 10.1016/j.scico.2006.03.003
   Rodríguez-Carbonell E, 2007, J SYMB COMPUT, V42, P443, DOI 10.1016/j.jsc.2007.01.002
   Sharma R, 2013, LECT NOTES COMPUT SC, V7792, P574, DOI 10.1007/978-3-642-37036-6_31
   Siegel SF, 2015, PROCEEDINGS OF SC15: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, DOI 10.1145/2807591.2807635
   Nguyen TV, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P608, DOI 10.1145/2568225.2568275
   Nguyen T, 2017, IEEE INT CONF AUTOM, P804
   Nguyen T, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P605, DOI 10.1145/3106237.3106281
   Nguyen T, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2556782
   Nguyen T, 2012, PROC INT CONF SOFTW, P683, DOI 10.1109/ICSE.2012.6227149
   Ultimate, 2020, ULT AUT
   Urban Caterina, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P464, DOI 10.1007/978-3-662-46681-0_46
   Urban C, 2014, LECT NOTES COMPUT SC, V8410, P412
   Urban Caterina., 2013, 13 INT WORKSHOP TERM, P69
   Wang P, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133903
   Yao JN, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P106, DOI 10.1145/3385412.3385986
NR 66
TC 11
Z9 11
U1 1
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 189
DI 10.1145/3428257
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900066
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Moller, A
   Nielsen, BB
   Torp, MT
AF Moller, Anders
   Nielsen, Benjamin Barslev
   Torp, Martin Toldam
TI Detecting Locations in JavaScript Programs Affected by Breaking Library
   Changes
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE software evolution; software maintenance; breaking changes
AB JavaScript libraries are widely used and evolve rapidly. When adapting client code to non-backwards compatible changes in libraries, a major challenge is how to locate affected API uses in client code, which is currently a difficult manual task. In this paper we address this challenge by introducing a simple pattern language for expressing API access points and a pattern-matching tool based on lightweight static analysis.
   Experimental evaluation on 15 popular npm packages shows that typical breaking changes are easy to express as patterns. Running the static analysis on 265 clients of these packages shows that it is accurate and efficient: it reveals usages of breaking APIs with only 14% false positives and no false negatives, and takes less than a second per client on average. In addition, the analysis is able to report its confidence, which makes it easier to identify the false positives. These results suggest that the approach, despite its simplicity, can reduce the manual effort of the client developers.
C1 [Moller, Anders; Nielsen, Benjamin Barslev; Torp, Martin Toldam] Aarhus Univ, Aarhus, Denmark.
C3 Aarhus University
RP Moller, A (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM amoeller@cs.au.dk; barslev@cs.au.dk; torp@cs.au.dk
RI Möller, Andrea/GNP-5183-2022
OI Möller, Andrea/0000-0002-2345-1299
FU European Research Council (ERC) under the European Union's Horizon 2020
   research and innovation program [647544]
FX This work was supported by the European Research Council (ERC) under the
   European Union's Horizon 2020 research and innovation program (grant
   agreement No 647544).
CR Brito A, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P255, DOI 10.1109/SANER.2018.8330214
   Chow KS, 1996, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P359, DOI 10.1109/ICSM.1996.565039
   Dagenais B, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000799.2000805
   Derr E, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2187, DOI 10.1145/3133956.3134059
   Dig D, 2006, J SOFTW MAINT EVOL-R, V18, P83, DOI 10.1002/smr.328
   Fazzini M, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P204, DOI 10.1145/3293882.3330571
   Feldthaus A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P752, DOI 10.1109/ICSE.2013.6606621
   Feldthaus A, 2013, ACM SIGPLAN NOTICES, V48, P323, DOI [10.1145/2544173.2509520, 10.1145/2509136.2509520]
   Hoan AN, 2010, ACM SIGPLAN NOTICES, V45, P302, DOI 10.1145/1932682.1869486
   Kang H. J., 2019, SER LIPICS, V134
   Koçi R, 2019, IEEE INT ENTERP DIST, P243, DOI 10.1109/EDOC.2019.00037
   Kristensen EK, 2019, PROC INT CONF SOFTW, P83, DOI 10.1109/ICSE.2019.00026
   Li L, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P153, DOI 10.1145/3213846.3213857
   Mezzetti G., 2018, 32 EUR C OBJ OR PROG
   Mitropoulos Dimitris, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P126, DOI 10.1109/MSR.2019.00029
   Muller A, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P409, DOI 10.1145/3338906.3338940
   Padioleau Y., 2006, P 3 WORKSHOP PROGRAM, P10, DOI DOI 10.1145/1215995
   Padioleau Y, 2008, EUROSYS'08: PROCEEDINGS OF THE EUROSYS 2008 CONFERENCE, P247, DOI 10.1145/1357010.1352618
   Stein Benno, 2019, PACMPL, V140
   Zerouali Ahmed, 2019, J SOFTW-EVOL PROC, V31, P8
   Zhang ZX, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P81, DOI [10.1109/SANER48275.2020.9054800, 10.1109/saner48275.2020.9054800]
   Zimmermann M, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P995
NR 22
TC 5
Z9 7
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 187
DI 10.1145/3428255
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900064
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Raad, A
   Lahav, O
   Vafeiadis, V
AF Raad, Azalea
   Lahav, Ori
   Vafeiadis, Viktor
TI Persistent Owicki-Gries Reasoning A Program Logic for Reasoning about
   Persistent Programs on Intel-x86
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE non-volatile memory; program logic; x86-ISO; consistency; persistency
AB The advent of non-volatile memory (NVM) technologies is expected to transform how software systems are structured fundamentally, making the task of correct programming significantly harder. This is because ensuring that memory stores persist in the correct order is challenging, and requires low-level programming to flush the cache at appropriate points. This has in turn resulted in a noticeable verification gap.
   To address this, we study the verification of NVM programs, and present Persistent Owicki-Gries (POG), the first program logic for reasoning about such programs. We prove the soundness of POG over the recent Intel-x86 model, which formalises the out-of-order persistence of memory stores and the semantics of the Intel cache line flush instructions. We then use POG to verify several programs that interact with NVM.
C1 [Raad, Azalea; Vafeiadis, Viktor] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Raad, Azalea] Imperial Coll London, South Kensington Campus, London, England.
   [Lahav, Ori] Tel Aviv Univ, Sch Comp Sci, IL-69978 Tel Aviv, Israel.
C3 Imperial College London; Tel Aviv University
RP Raad, A (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.; Raad, A (corresponding author), Imperial Coll London, South Kensington Campus, London, England.
EM azalea@imperial.ac.uk; orilahav@tau.ac.il; viktor@mpi-sws.org
RI Vafeiadis, Viktor/B-5809-2014
OI Vafeiadis, Viktor/0000-0001-8436-0334; Lahav, Ori/0000-0003-4305-6998
FU European Research Council (ERC) Consolidator Grant for the project
   lRustBeltz, under the European Union Horizon 2020 Framework Programme
   [683289]; Israel Science Foundation [5166651]; Len Blavatnik Family
   foundation; Blavatnik Family foundation; Alon Young Faculty Fellowship
FX We thank the OOPSLA 2020 reviewers for their valuable feedback. Azalea
   Raad was supported in part by a European Research Council (ERC)
   Consolidator Grant for the project lRustBeltz, under the European Union
   Horizon 2020 Framework Programme (grant agreement number 683289). Ori
   Lahav was supported by the Israel Science Foundation (grant number
   5166651), by Len Blavatnik and the Blavatnik Family foundation, and by
   the Alon Young Faculty Fellowship.
CR Abdulla Parosh Aziz, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P353, DOI 10.1007/978-3-662-46681-0_28
   Arm Limited, 2020, Arm Architecture Reference Manual: Armv8
   Chen HG, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P18, DOI 10.1145/2815400.2815402
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Condit J, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P133
   Derrick John, 2019, Formal Methods - The Next 30 Years. Third World Congress, FM 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11800), P179, DOI 10.1007/978-3-030-30942-8_12
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Friedman M, 2018, ACM SIGPLAN NOTICES, V53, P28, DOI 10.1145/3200691.3178490
   Gogte V, 2020, ANN I S COM, P652, DOI 10.1109/ISCA45697.2020.00060
   Gogte V, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P46, DOI 10.1145/3192366.3192367
   Huang SY, 2016, ACM SIGPLAN NOTICES, V51, P447, DOI 10.1145/3022671.2984025
   Intel, 2019, 3D XPOINT
   Intel, 2019, INT 64 IA 32 ARCH SO
   Intel, 2015, Persistent Memory Programming
   Izraelevitz Joseph, 2016, Distributed Computing. 30th International Symposium, DISC 2016. Proceedings: LNCS 9888, P313, DOI 10.1007/978-3-662-53426-7_23
   Izraelevitz J., 2019, BASIC PERFORMANCE ME
   Jacobs B, 2011, ACM SIGPLAN NOTICES, V46, P271, DOI 10.1145/1925844.1926417
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Joshi A, 2015, PROCEEDINGS OF THE 48TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO-48), P660, DOI 10.1145/2830772.2830805
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kaiser Jan-Oliver, 2017, EUR C OBJ OR PROGR E, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.17, 10.4230/LIPIcs.ECOOP.2017]
   Kawahara T, 2012, MICROELECTRON RELIAB, V52, P613, DOI 10.1016/j.microrel.2011.09.028
   Kokologiannakis M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360599
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   Kolli A, 2017, 44TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA 2017), P481, DOI [10.1145/3079856.3080229, 10.1145/3140659.3080229]
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lahav O, 2015, LECT NOTES COMPUT SC, V9135, P311, DOI 10.1007/978-3-662-47666-6_25
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lee BC, 2009, CONF PROC INT SYMP C, P2, DOI 10.1145/1555815.1555758
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   Nawab Faisal, 2017, 31 INT S DISTR COMP, V37, P1
   Ntzik G, 2015, LECT NOTES COMPUT SC, V9458, P169, DOI 10.1007/978-3-319-26529-2_10
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Pelley S, 2014, CONF PROC INT SYMP C, P265, DOI 10.1109/ISCA.2014.6853222
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360561
   Raad A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371079
   Raad A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276507
   Raad A, 2015, LECT NOTES COMPUT SC, V9032, P710, DOI 10.1007/978-3-662-46669-8_29
   Saidi Ali, 2016, 49 ANN IEEE ACM INT
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   Sieczkowski F, 2015, LECT NOTES COMPUT SC, V9032, P736, DOI 10.1007/978-3-662-46669-8_30
   Strukov DB, 2008, NATURE, V453, P80, DOI 10.1038/nature06932
   Svendsen Kasper, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P357, DOI 10.1007/978-3-319-89884-1_13
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Vafeiadis V, 2013, ACM SIGPLAN NOTICES, V48, P867, DOI [10.1145/2544173.2509532, 10.1145/2509136.2509532]
   Zuriel Y, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360554
NR 47
TC 7
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 151
DI 10.1145/3428219
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900028
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Sui, YL
   Cheng, X
   Zhang, GQ
   Wang, HY
AF Sui, Yulei
   Cheng, Xiao
   Zhang, Guanqin
   Wang, Haoyu
TI Flow2Vec: Value-Flow-Based Precise Code Embedding
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Flow2Vec; code embedding; value-flows; asymmetric transitivity
ID GRAPH
AB Code embedding, as an emerging paradigm for source code analysis, has attracted much attention over the past few years. It aims to represent code semantics through distributed vector representations, which can be used to support a variety of program analysis tasks (e.g., code sununarization and semantic labeling). However, existing code embedding approaches are intraprocedural, alias-unaware and ignoring the asymmetric transitivity of directed graphs abstracted from source code, thus they are still ineffective in preserving the structural information of code.
   This paper presents FLow2VEc, a new code embedding approach that precisely preserves interprocedural program dependence (a.k.a value-flows). By approximating the high-order proximity, i.e., the asymmetric transitivity of value-flows, Flow2VEc embeds control-flows and alias-aware data-flows of a program in a low-dimensional vector space. Our value-flow embedding is formulated as matrix multiplication to preserve context-sensitive transitivity through CFL reachability by filtering out infeasible value-flow paths.
   We have evaluated FLow2VEc using 32 popular open-source projects. Results from our experiments show that F1.ow2VEc successfully boosts the performance of two recent code embedding approaches conE2vEc and coDE2sEQ for two client applications, i.e., code classification and code summarization. For code classification, FLOW2VEC improves CODE2VEC with an average increase of 21.2%, 20.1% and 20.7% in precision, recall and F1, respectively. For code summarization, FLOW2VEC outperforms CODE2SEQ by an average of 13.2%, 18.8% and 16.0% in precision, recall and F1, respectively.
C1 [Sui, Yulei; Zhang, Guanqin] Univ Technol Sydney, 15 Broadway,POB 123, Sydney, NSW, Australia.
   [Cheng, Xiao; Wang, Haoyu] Beijing Univ Posts & Telecommun, 10,Xitucheng Rd, Beijing 100876, Peoples R China.
C3 University of Technology Sydney; Beijing University of Posts &
   Telecommunications
RP Sui, YL (corresponding author), Univ Technol Sydney, 15 Broadway,POB 123, Sydney, NSW, Australia.
EM yulei.sui@uts.edu.au; jackiecheng@bupt.edu.cn;
   13426770@student.uts.edu.au; haoyuwang@bupt.edu.cn
RI Wang, Haoyu/AAC-8649-2019; zhang, guanqin/GRJ-7814-2022; Sui,
   Yulei/AAL-5915-2020
OI Wang, Haoyu/0000-0002-2124-3453; Sui, Yulei/0000-0002-9510-6574; Cheng,
   Xiao/0000-0001-5456-3827
FU Australian Research Grants [DP200101328]
FX We would like to thank the anonymous reviewers for their helpful
   comments. This research is supported by Australian Research Grants
   DP200101328.
CR Acharya M, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P746, DOI 10.1145/1985793.1985898
   Allamanis M, 2016, PR MACH LEARN RES, V48
   Allamanis M, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P38, DOI 10.1145/2786805.2786849
   Alon U., 2019, 7 INT C LEARNING REP
   Alon U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290353
   Alon U, 2018, ACM SIGPLAN NOTICES, V53, P404, DOI [10.1145/3192366.3192412, 10.1145/3296979.3192412]
   Andersen Lars Ole, 1994, THESIS U COPHENHAGEN
   Balatsouras George, 2016, SAS 16
   Barbar Mohamad, 2020, ECOOP 20
   Belkin M, 2002, ADV NEUR IN, V14, P585
   Ben-Nun T., 2018, CoRR, Vabs/1802.09941
   Bodik R., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P237, DOI 10.1145/268946.268966
   Brockschmidt Marc, 2018, Learning to represent programs with graphs
   Cai HY, 2018, IEEE T KNOWL DATA EN, V30, P1616, DOI 10.1109/TKDE.2018.2807452
   Canfora Gerardo, 2005, METRICS 05, p9D
   Chen XY, 2018, 32 C NEURAL INFORM P, V31
   Choi Jong-Deok, 1991, POPL 91
   Chow Fred, 1996, CC 96
   Cui P, 2019, IEEE T KNOWL DATA EN, V31, P833, DOI 10.1109/TKDE.2018.2849727
   De Lathauwer L, 2000, SIAM J MATRIX ANAL A, V21, P1253, DOI 10.1137/S0895479896305696
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Frantzeskou G, 2008, J SYST SOFTWARE, V81, P447, DOI 10.1016/j.jss.2007.03.004
   GALLAGHER KB, 1991, IEEE T SOFTWARE ENG, V17, P751, DOI 10.1109/32.83912
   Grover A, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P855, DOI 10.1145/2939672.2939754
   Hardekopf B, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P290, DOI 10.1145/1250734.1250767
   Hardekopf B, 2011, INT SYM CODE GENER, P289, DOI 10.1109/CGO.2011.5764696
   Hindle A, 2012, PROC INT CONF SOFTW, P837, DOI 10.1109/ICSE.2012.6227135
   Hochstenbach M E, 2009, LINEAR ALGEBRA APPL, V431, P3
   Hu X, 2018, INT C PROGRAM COMPRE, P200, DOI 10.1145/3196321.3196334
   Iyer S, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P2073
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Katz L., 1953, Psychometrika, V18, P39, DOI [10.1007/BF02289026, DOI 10.1007/BF02289026]
   Kingma D. P., 2014, arXiv
   Kodumal J, 2004, ACM SIGPLAN NOTICES, V39, P207, DOI 10.1145/996893.996867
   Kovalenko Vladimir, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P13, DOI 10.1109/MSR.2019.00013
   Kuck David J, 1981, POPL 81
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lei YX, 2019, LECT NOTES COMPUT SC, V11822, P27, DOI 10.1007/978-3-030-32304-2_3
   Lhoták O, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1926385.1926389
   Li L, 2011, PROCEEDINGS OF THE 8TH INTERNATIONAL SYMPOSIUM ON COMPUTER SCIENCE IN SPORT (IACSS2011), P343
   Li Z, 2018, 25TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2018), DOI 10.14722/ndss.2018.23158
   Lian DF, 2018, KDD'18: PROCEEDINGS OF THE 24TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY & DATA MINING, P1744, DOI 10.1145/3219819.3220034
   Livshits V. B., 2003, Software Engineering Notes, V28, P317, DOI 10.1145/949952.940114
   Luong M.-T., 2015, P 2015 C EMPIRICAL M, DOI DOI 10.18653/V1/D15-1166
   Maddison CJ, 2014, PR MACH LEARN RES, V32, P649
   Mikolov T., 2013, ADV NEURAL INFORM PR, V26, P3111, DOI DOI 10.5555/2999792.2999959
   Ou MD, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1105, DOI 10.1145/2939672.2939751
   Perozzi B, 2014, PROCEEDINGS OF THE 20TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING (KDD'14), P701, DOI 10.1145/2623330.2623732
   Pradel Michael, 2018, P ACM PROGRAMMING LA, V2, p1S25
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2594291.2594321, 10.1145/2666356.2594321]
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Rilling J, 2003, PROG COMPREHEN, P115
   Sajnani H, 2016, PROC INT CONF SOFTW, P1157, DOI 10.1145/2884781.2884877
   Sen P, 2008, AI MAG, V29, P93, DOI 10.1609/aimag.v29i3.2157
   Shi QK, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P693, DOI 10.1145/3192366.3192418
   Shi Y, 2010, ACM SIGPLAN NOTICES, V45, P160, DOI 10.1145/1932682.1869474
   Song HH, 2009, IMC'09: PROCEEDINGS OF THE 2009 ACM SIGCOMM INTERNET MEASUREMENT CONFERENCE, P322
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Sui YL, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P265, DOI 10.1145/2892208.2892235
   Sun JK, 2019, AAAI CONF ARTIF INTE, P265
   Tai KS, 2015, PROCEEDINGS OF THE 53RD ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS AND THE 7TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING, VOL 1, P1556
   Tang J, 2015, PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON WORLD WIDE WEB (WWW 2015), P1067, DOI 10.1145/2736277.2741093
   Ugurel S, 2002, P 8 ACM SIGKDD INT C, P632, DOI DOI 10.1145/775047.775141
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   XiaoWang Peng Cui, 2017, AAAI 17
   Xu K, 2015, PR MACH LEARN RES, V37, P2048
   Zhang J, 2019, PROC INT CONF SOFTW, P783, DOI 10.1109/ICSE.2019.00086
   Zhang ZW, 2018, KDD'18: PROCEEDINGS OF THE 24TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY & DATA MINING, P2778, DOI 10.1145/3219819.3219969
   Zhao G, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P141, DOI 10.1145/3236024.3236068
   ZhenWang Jianwen Zhang, 2014, AAAI 14
   Zhou Yaqin, 2019, NEURIPS 19
NR 71
TC 51
Z9 56
U1 0
U2 12
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 233
DI 10.1145/3428301
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900110
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Wang, Y
   Wang, K
   Gao, FJ
   Wang, LZ
AF Wang, Yu
   Wang, Ke
   Gao, Fengjuan
   Wang, Linzhang
TI Learning Semantic Program Embeddings with Graph Interval Neural Network
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program embeddings; Control-flow graphs; Intervals; Graph neural
   networks; Null pointer dereference detection
AB Learning distributed representations of source code has been a challenging task for machine learning models. Earlier works treated programs as text so that natural language methods can be readily applied. Unfortunately, such approaches do not capitalize on the rich structural information possessed by source code. Of late, Graph Neural Network (GNN) was proposed to learn embeddings of programs from their graph representations. Due to the homogeneous (i.e. do not take advantage of the program-specific graph characteristics) and expensive (i.e. require heavy information exchange among nodes in the graph) message-passing procedure, GNN can suffer from precision issues, especially when dealing with programs rendered into large graphs. In this paper, we present a new graph neural architecture, called Graph Interval Neural Network (GINN), to tackle the weaknesses of the existing GNN. Unlike the standard GNN, GINN generalizes from a curated graph representation obtained through an abstraction method designed to aid models to learn. In particular, GINN focuses exclusively on intervals (generally manifested in looping construct) for mining the feature representation of a program, furthermore, GINN operates on a hierarchy of intervals for scaling the learning to large graphs.
   We evaluate GINN for two popular downstream applications: variable misuse prediction and method name prediction. Results show in both cases GINN outperforms the state-of-the-art models by a comfortable margin. We have also created a neural bug detector based on GINN to catch null pointer deference bugs in Java code. While learning from the same 9,000 methods extracted from 64 projects, GINN-based bug detector significantly outperforms GNN-based bug detector on 13 unseen test projects. Next, we deploy our trained GINN-based bug detector and Facebook Infer, arguably the state-of-the-art static analysis tool, to scan the codebase of 20 highly starred projects on GitHub. Through our manual inspection, we confirm 38 bugs out of 102 warnings raised by GINN-based bug detector compared to 34 bugs out of 129 warnings for Facebook Infer. We have reported 38 bugs GINN caught to developers, among which 11 have been fixed and 12 have been confirmed (fix pending). GINN has shown to be a general, powerful deep neural network for learning precise, semantic program embeddings.
C1 [Wang, Yu; Gao, Fengjuan; Wang, Linzhang] Nanjing Univ, Dept Comp Sci & Technol, State Key Lab Novel Software Technol, Nanjing 210023, Jiangsu, Peoples R China.
   [Wang, Ke] Visa Res, Secur Cryptog & Blockchain, Palo Alto, CA USA.
C3 Nanjing University
RP Wang, Y (corresponding author), Nanjing Univ, Dept Comp Sci & Technol, State Key Lab Novel Software Technol, Nanjing 210023, Jiangsu, Peoples R China.
EM yuwang_cs@smail.nju.edu.cn; kewang@visa.com; fjgao@smail.nju.edu.cn;
   lzwang@nju.edu.cn
RI Gao, Fengjuan/AAJ-9728-2020
FU National Key RD Program [2017YFA0700604]; National Natural Science
   Foundation of China [62032010]; Postgraduate Research & Practice
   Innovation Program of Jiangsu Province
FX We thank the reviewers for their insightful comments. This work was
   supported by the National Key R&D Program (No. 2017YFA0700604), the
   National Natural Science Foundation of China under Grant No.62032010,
   and partially supported by Postgraduate Research & Practice Innovation
   Program of Jiangsu Province.
CR Allamams M, 2019, PROCEEDINGS OF THE 2019 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD!' 19), P143, DOI 10.1145/3359591.3359735
   Allamanis M., 2018, INT C LEARN REPR ICL
   Alon U., 2019, 7 INT C LEARNING REP
   Alon U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290353
   [Anonymous], 1970, ACM SIGPLAN NOTICES, DOI DOI 10.1145/390013.808479
   [Anonymous], 2018, P ACM PROGR LANG OOP
   [Anonymous], 2015, Advances in neural information processing systems
   [Anonymous], 2018, Advances in Neural Information Processing Systems
   Bahdanau D, 2016, Arxiv, DOI [arXiv:1409.0473, 10.48550/arXiv.1409.0473]
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Calcagno C, 2015, LECT NOTES COMPUT SC, V9058, P3, DOI 10.1007/978-3-319-17524-9_1
   Chen K., 2013, EFFICIENT ESTIMATION, P2
   Cho Kyunghyun., 2014, P 2014 C EMP METH NA
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Devlin J, 2014, PROCEEDINGS OF THE 52ND ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P1370
   Dinella Elizabeth, 2020, INT C LEARNING REPRE
   Fernandes P, 2019, 7 INT C LEARNING REP
   Gilmer J, 2017, PR MACH LEARN RES, V70
   Gori M, 2005, IEEE IJCNN, P729
   Gupta R, 2017, AAAI CONF ARTIF INTE, P1345
   Hellendoorn V.J., 2019, INT C LEARN REPR
   Hindle A, 2012, PROC INT CONF SOFTW, P837, DOI 10.1109/ICSE.2012.6227135
   Hochreiter S, 1997, NEURAL COMPUT, V9, P1735, DOI [10.1162/neco.1997.9.1.1, 10.1007/978-3-642-24797-2]
   Jiang LX, 2007, PROC INT CONF SOFTW, P96
   Just R, 2014, P 2014 INT S SOFTW T, P437, DOI DOI 10.1145/2610384.2628055
   KeWang Mihai, 2019, ARXIV PREPRINT ARXIV
   Li Y., 2016, ICLR, P1, DOI DOI 10.48550/ARXIV.1511.05493
   Maddison CJ, 2014, PR MACH LEARN RES, V32, P649
   Nguyen T.T., 2013, P 2013 9 JOINT M FDN, P532, DOI DOI 10.1145/2491411.2491458
   Pawlak Renaud, 2015, SOFTWARE PRACT EXPER
   Pu YW, 2016, COMPANION PROCEEDINGS OF THE 2016 ACM SIGPLAN INTERNATIONAL CONFERENCE ON SYSTEMS, PROGRAMMING, LANGUAGES AND APPLICATIONS: SOFTWARE FOR HUMANITY (SPLASH COMPANION'16), P39, DOI 10.1145/2984043.2989222
   Raychev Veselin, 2016, ACM SIGPLAN Notices, V51, P731, DOI 10.1145/3022671.2984041
   Saha RK, 2018, IEEE WORK CONF MIN S, P10, DOI 10.1145/3196398.3196473
   Svozil D, 1997, CHEMOMETR INTELL LAB, V39, P43, DOI 10.1016/S0169-7439(97)00061-0
   Tomassi DA, 2019, PROC INT CONF SOFTW, P339, DOI 10.1109/ICSE.2019.00048
   Vasic M., 2019, Neural program repair by jointly learning to localize and repair
   Vaswani A, 2017, ADV NEUR IN, V30
   Wang K., 2019, ARXIV PREPRINT ARXIV
   Wang K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P121, DOI 10.1145/3385412.3385999
   Wang Ke, 2018, INT C LEARN REPR 201
   Wang S, 2016, PROC INT CONF SOFTW, P297, DOI 10.1145/2884781.2884804
   Wei Jiayi, 2020, 8 INT C LEARNING REP
   Weiser M., 1981, 5th International Conference on Software Engineering, P439
   Ye X, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P689, DOI 10.1145/2635868.2635874
NR 44
TC 32
Z9 32
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 137
DI 10.1145/3428205
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900014
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Arntzenius, M
   Krishnaswami, N
AF Arntzenius, Michael
   Krishnaswami, Neel
TI Seminaive Evaluation for a Higher-Order Functional Language
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Datafun; Datalog; functional languages; relational languages; seminaive
   evaluation; incremental computation
AB One of the workhorse techniques for implementing bottom-up Datalog engines is seminaive evaluation. This optimization improves the performance of Datalog's most distinctive feature: recursively defined predicates. These are computed iteratively, and under a naive evaluation strategy, each iteration recomputes all previous values. Seminaive evaluation computes a safe approximation of the difference between iterations. This can asymptotically improve the performance of Datalog queries.
   Seminaive evaluation is defined partly as a program transformation and partly as a modified iteration strategy, and takes advantage of the first-order nature of Datalog code. This paper extends the seminaive transformation to higher-order programs written in the Datafun language, which extends Datalog with features like first-class relations, higher-order functions, and datatypes like sum types.
C1 [Arntzenius, Michael] Univ Birmingham, Sch Comp Sci, Birmingham B15 2TT, W Midlands, England.
   [Krishnaswami, Neel] Univ Cambridge, Dept Comp Sci & Technol, Cambridge CB2 1TN, England.
C3 University of Birmingham; University of Cambridge
RP Arntzenius, M (corresponding author), Univ Birmingham, Sch Comp Sci, Birmingham B15 2TT, W Midlands, England.
EM daekharel@gmail.com; nk480@cl.cam.ac.uk
CR AFRATI F, 1993, J ACM, V40, P891, DOI 10.1145/153724.153752
   Alechina N., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P292
   Alvarez-Picallo M, 2019, LECT NOTES COMPUT SC, V11423, P525, DOI 10.1007/978-3-030-17184-1_19
   Alvaro P., 2011, CIDR, P249
   [Anonymous], 1985, P 5 ACM SIGACT SIGMO, DOI DOI 10.1145/6012.15399
   Aref M, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1371, DOI 10.1145/2723372.2742796
   Arntzenius M., 2017, STATIC DIFFERENTIATI
   Arntzenius M, 2016, ACM SIGPLAN NOTICES, V51, P214, DOI 10.1145/3022670.2951948
   Bancilhon Francois., 1986, KNOWLEDGE BASE MANAG, P165, DOI [10.1007/978-1-4612-4980-1_17, DOI 10.1007/978-1-4612-4980-1_17]
   Becker MY, 2010, J COMPUT SECUR, V18, P619, DOI 10.3233/JCS-2009-0364
   Blute RF, 2006, MATH STRUCT COMP SCI, V16, P1049, DOI 10.1017/S0960129506005676
   Cai YF, 2014, ACM SIGPLAN NOTICES, V49, P145, DOI 10.1145/2666356.2594304
   Ceri S., 1989, IEEE Transactions on Knowledge and Data Engineering, V1, P146, DOI 10.1109/69.43410
   Dantsin E, 2001, ACM COMPUT SURV, V33, P374, DOI 10.1145/502807.502810
   de Moor O, 2008, LECT NOTES COMPUT SC, V5235, P78, DOI 10.1007/978-3-540-88643-3_3
   Ehrhard T, 2003, THEOR COMPUT SCI, V309, P1, DOI 10.1016/S0304-3975(03)00392-X
   Fourtounis George, 2019, V109
   Giarrusso PG, 2019, LECT NOTES COMPUT SC, V11423, P553, DOI 10.1007/978-3-030-17184-1_20
   Hickey Rich, 2012, DATOMIC FULLY T CLOU
   Hofmann M, 1998, LECT NOTES COMPUT SC, V1414, P275, DOI 10.1007/BFb0028020
   Jordan H, 2016, LECT NOTES COMPUT SC, V9780, P422, DOI 10.1007/978-3-319-41540-6_23
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   Schäfer M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P145, DOI 10.1145/1706299.1706317
   Smaragdakis Yannis, 2015, POINT ANAL NOW FDN T
   Wadler Philip, 1992, MATH STRUCTURES COMP, V2, P461, DOI [DOI 10.1017/S0960129500001560, DOI 10.1016/0304-3975(75)90017-1]
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   Whaley John, 2007, THESIS STADFORD U
NR 28
TC 6
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 22
DI 10.1145/3371090
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400023
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Farzan, A
   Vandikas, A
AF Farzan, Azadeh
   Vandikas, Anthony
TI Reductions for Safety Proofs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Concurrency; Automated Verification; Reductions; Automata
AB Program reductions are used widely to simplify reasoning about the correctness of concurrent and distributed programs. In this paper, we propose a general approach to proof simplification of concurrent programs based on exploring generic classes of reductions. We introduce two classes of sound program reductions, study their theoretical properties, show how they can be effectively used in algorithmic verification, and demonstrate that they are very effective in producing proofs of a diverse class of programs without targeting specific syntactic properties of these programs. The most novel contribution of this paper is the introduction of the concept of context in the definition of program reductions. We demonstrate how commutativity of program steps in some program contexts can be used to define a generic class of sound reductions which can be used to automatically produce proofs for programs whose complete Floyd-Hoare style proofs are theoretically beyond the reach of automated verification technology of today.
C1 [Farzan, Azadeh; Vandikas, Anthony] Univ Toronto, Toronto, ON, Canada.
C3 University of Toronto
RP Farzan, A (corresponding author), Univ Toronto, Toronto, ON, Canada.
FU National Science and Engineering Research Council of Canada (NSERC)
FX This material is based upon work supported by National Science and
   Engineering Research Council of Canada (NSERC) Discovery Grant and
   Discovery Accelerated Supplement Award.
CR Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Abdulla PA, 2017, J ACM, V64, DOI 10.1145/3073408
   Baader Franz., 2001, P LECT NOTES COMPUTE, V2083
   Barthe Gilles, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P200, DOI 10.1007/978-3-642-21437-0_17
   BjornWachter Daniel Kroening, 2013, FORMAL METHODS COMPU
   Bojanczyk M, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(3:4)2014
   Cassez Franck., 2015, P LECT NOTES COMPUTE, V9450
   De Wulf M, 2006, LECT NOTES COMPUT SC, V4144, P17, DOI 10.1007/11817963_5
   Desai Ankush, 2014, P 2014 ACM INT C OBJ
   Diekert V., 1995, BOOK TRACES
   Diekert Volker, 1997, HDB FORMAL LANGUAGES, V3
   Elmas Tayfun, 2009, POPL, p2S15, DOI [10.1145/1480881.1480885, DOI 10.1145/1480881.1480885]
   Farzan A, 2019, LNCS, DOI [DOI 10.1007/978-3-030-25540-4_11, DOI 10.1007/978-3-030-25540-4, 10.1007/978-3-030-25540-4_11]
   Farzan Azadeh, 2013, 40 ANN ACM SIGPLAN S
   Farzan Azadeh, 2019, ARXIV191014619
   Farzan Azadeh, 2015, P 42 ANN ACM SIGPLAN
   Flanagan C, 2005, IEEE T SOFTWARE ENG, V31, P275, DOI 10.1109/TSE.2005.47
   Flanagan C, 2003, ACM SIGPLAN NOTICES, V38, P338, DOI 10.1145/780822.781169
   Genest B, 2007, FUND INFORM, V80, P147
   Gleissenthall KV, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290372
   Godefroid P., 1996, Lecture Notes in Computer Science, V1032
   Godefroid Patrice., 1993, P LECT NOTES COMPUTE, V697
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Hawblitzel C, 2015, LECT NOTES COMPUT SC, V9207, P449, DOI 10.1007/978-3-319-21668-3_26
   Heizmann Matthias., 2009, P LECT NOTES COMPUTE, V5673
   KATZ S, 1992, THEOR COMPUT SCI, V101, P337, DOI 10.1016/0304-3975(92)90054-J
   Kragl Bernhard, 2018, CONCUR, DOI [10.4230/LIPIcs.CONCUR.2018.21, DOI 10.4230/LIPICS.CONCUR.2018.21]
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sassone Vladimiro., 1993, P LECT NOTES COMPUTE, V711
   Sousa Marcelo, 2016, ACM SIGPLAN Notices, V51, P57, DOI 10.1145/2980983.2908092
   Sousa Marcelo, 2014, ACM SIGPLAN C PROGR
   Wang C, 2008, LECT NOTES COMPUT SC, V4963, P382, DOI 10.1007/978-3-540-78800-3_29
   Wang Chao., 2009, P 7 JOINT M EUR SOFT, p23S32
NR 35
TC 8
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 13
DI 10.1145/3371081
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400014
OA gold
DA 2024-07-18
ER

PT J
AU Forster, Y
   Kunze, F
   Roth, M
AF Forster, Yannick
   Kunze, Fabian
   Roth, Marc
TI The Weak Call-by-Value λ-Calculus Is Reasonable for Both Time and Space
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE invariance thesis; lambda calculus; weak call-by-value reduction; time
   and space complexity; abstract machines
AB We study the weak call-by-value lambda-calculus as a model for computational complexity theory and establish the natural measures for time and space the number of beta-reduction steps and the size of the largest term in a computation - as reasonable measures with respect to the invariance thesis of Slot and van Emde Boas from 1984. More precisely, we show that, using those measures, Turing machines and the weak call-by-value lambda-calculus can simulate each other within a polynomial overhead in time and a constant factor overhead in space for all computations terminating in (encodings of) "true" or "false". The simulation yields that standard complexity classes like P, NP, PSPACE, or EX.F' can be defined solely in terms of the lambda-calculus, but does not cover sublinear time or space.
   Note that our measures still have the well-known size explosion property, where the space measure of a computation can be exponentially bigger than its time measure. However, our result implies that this exponential gap disappears once complexity classes are considered instead of concrete computations.
   We consider this result a first step towards a solution for the long-standing open problem of whether the natural measures for time and space of the lambda-calculus are reasonable. Our proof for the weak call-by-value lambda-calculus is the first proof of reasonability (including both time and space) for a functional language based on natural measures and enables the formal verification of complexity-theoretic proofs concerning complexity classes, both on paper and in proof assistants.
   The proof idea relies on a hybrid of two simulation strategies of reductions in the weak call-by-value lambda-calculus by Turing machines, both of which are insufficient if taken alone. The first strategy is the most naive one in the sense that a reduction sequence is simulated precisely as given by the reduction rules; in particular, all substitutions are executed immediately. This simulation runs within a constant overhead in space, but the overhead in time might be exponential. The second strategy is heap-based and relies on structure sharing, similar to existing compilers of eager functional languages. This strategy only has a polynomial overhead in time, but the space consumption might require an additional factor of log n, which is essentially due to the size of the pointers required for this strategy. Our main contribution is the construction and verification of a space-aware interleaving of the two strategies, which is shown to yield both a constant overhead in space and a polynomial overhead in time.
C1 [Forster, Yannick; Kunze, Fabian; Roth, Marc] Saarland Univ, Saarland Informat Campus, Saarbrucken, Germany.
   [Roth, Marc] Saarland Univ, M2CI, Saarbrucken, Germany.
   [Roth, Marc] Univ Oxford, Oxford, England.
C3 Saarland University; Saarland University; University of Oxford
RP Forster, Y (corresponding author), Saarland Univ, Saarland Informat Campus, Saarbrucken, Germany.
EM forster@ps.uni-saarland.de; kunze@ps.uni-saarla.nd.de;
   marc.roth@merton.ox.ac.uk
OI Forster, Yannick/0000-0002-8676-9819
CR Accattoli B, 2018, ELECTRON NOTES THEOR, V338, P23, DOI 10.1016/j.entcs.2018.10.003
   Accattoli B, 2017, LECT NOTES COMPUT SC, V10522, P1, DOI 10.1007/978-3-319-68972-2_1
   Accattoli B, 2017, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.235.1
   Accattoli B, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(1:4)2016
   Accattoli B, 2015, IEEE S LOG, P141, DOI 10.1109/LICS.2015.23
   Accattoli Beniamino, 2012, LIPIcs, V15, P22, DOI [10.4230, DOI 10.4230/LIPICS.RTA]
   Accattoli Ugo., 2017, ABS171110078 CORR
   Asperti A., 2002, ACM Transactions on Computational Logic, V3, P137, DOI 10.1145/504077.504081
   Asperti A, 2015, THEOR COMPUT SCI, V603, P23, DOI 10.1016/j.tcs.2015.07.013
   Belloch G., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P226, DOI 10.1145/224164.224210
   Dal Lago U, 2008, THEOR COMPUT SCI, V398, P32, DOI 10.1016/j.tcs.2008.01.044
   Dal Lago Ugo, 2010, PROGRAMMING LANGUAGE, DOI [10.1007/978-3-642-11957-6_12, DOI 10.1007/978-3-642-11957-6_12]
   De Bruijn Nicolaas Govert., 1972, INDAGATIONES MATH, V75
   Dershowitz Nachum, 2015, LOGICAL METHODS COMP
   Forster Y, 2017, LECT NOTES COMPUT SC, V10499, P189, DOI 10.1007/978-3-319-66107-0_13
   Forster Yannick, 2019, VERIFIED PROGRAMMING
   Forster Yannick, 2017, WORKSH SYNT SEM LOW
   Gaboardi M, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P121, DOI 10.1145/1328438.1328456
   Kunze F, 2018, LECT NOTES COMPUT SC, V11275, P264, DOI 10.1007/978-3-030-02768-1_15
   Lawall JL, 1996, ACM SIGPLAN NOTICES, V31, P92, DOI 10.1145/232629.232639
   Norrish M., 2011, INTERACTIVE THEOREM, V6898, P297, DOI DOI 10.1007/978-3-642-22863-6_22
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Sansom Patrick M, 1995, POPL 95 22 ACM SIGPL, DOI [10.1145/199448.199531, DOI 10.1145/199448.199531]
   Schopp Ulrich, 2006, COMP SCI LOG 20 INT, DOI [10.1007/11874683_40, DOI 10.1007/11874683_40]
   Slot Cees F., 1984, P 16 ANN ACM S THEOR, P391, DOI [10.1145/800057.808705, DOI 10.1145/800057.808705]
   Spoonhower D, 2010, J FUNCT PROGRAM, V20, P417, DOI 10.1017/S0956796810000146
NR 26
TC 5
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 27
DI 10.1145/3371095
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400028
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Kokologiannakis, M
   Raad, A
   Vafeiadis, V
AF Kokologiannakis, Michalis
   Raad, Azalea
   Vafeiadis, Viktor
TI Effective Lock Handling in Stateless Model Checking
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Model checking; mutual exclusion locks; weak memory models
ID PROGRAMS
AB Stateless Model Checking (SMC) is a verification technique for concurrent programs that checks for safety violations by exploring all possible thread interleavings. SMC is usually coupled with Partial Order Reduction (POR), which exploits the independence of instructions to avoid redundant explorations when an equivalent one has already been considered. While effective POR techniques have been developed for many different memory models, they are only able to exploit independence at the instruction level, which makes them unsuitable for programs with coarse-grained synchronization mechanisms such as locks.
   We present a lock-aware POR algorithm, LAPOR, that exploits independence at both instruction and critical section levels. This enables LAPOR to explore exponentially fewer interleavings than the state-of-the-art techniques for programs that use locks conservatively. Our algorithm is sound, complete, and optimal, and can be used for verifying programs under several different memory models. We implement LAPOR in a tool and show that it can be exponentially faster than the state-of-the-art model checkers.
C1 [Kokologiannakis, Michalis; Raad, Azalea; Vafeiadis, Viktor] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
RP Kokologiannakis, M (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
EM michalis@mpi-sws.org; azalea@mpi-sws.org; viktor@nipi-sws.org
RI Vafeiadis, Viktor/B-5809-2014
OI Vafeiadis, Viktor/0000-0001-8436-0334; Kokologiannakis,
   Michalis/0000-0002-7905-9739
FU European Research Council (ERC) Consolidator Grant for the project
   "RustBelt", under the European Union Horizon 2020 Framework Programme
   [683289]
FX We thank the OOPSLA'19 reviewers for their valuable feedback. The second
   author was supported in part by a European Research Council (ERC)
   Consolidator Grant for the project "RustBelt", under the European Union
   Horizon 2020 Framework Programme (grant agreement number 683289).
CR Abdulla Parosh Aziz, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P353, DOI 10.1007/978-3-662-46681-0_28
   Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Abdulla PA, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276505
   Abdulla PA, 2016, LECT NOTES COMPUT SC, V9780, P134, DOI 10.1007/978-3-319-41540-6_8
   Albert E, 2018, LECT NOTES COMPUT SC, V10982, P392, DOI 10.1007/978-3-319-96142-2_24
   Alglave Jade, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P141, DOI 10.1007/978-3-642-39799-8_9
   [Anonymous], 2008, OSDI 2008
   Aronis S, 2018, LECT NOTES COMPUT SC, V10806, P229, DOI 10.1007/978-3-319-89963-3_14
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Chalupa Marek, 2017, PROC ACM PROGRAM LAN
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Godefroid P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P174, DOI 10.1145/263699.263717
   Huang J, 2015, ACM SIGPLAN NOTICES, V50, P165, DOI [10.1145/2737924.2737975, 10.1145/2813885.2737975]
   Huang SY, 2016, ACM SIGPLAN NOTICES, V51, P447, DOI 10.1145/3022671.2984025
   Kini D, 2017, ACM SIGPLAN NOTICES, V52, P157, DOI [10.1145/3062341.3062374, 10.1145/3140587.3062374]
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lahav O, 2015, LECT NOTES COMPUT SC, V9135, P311, DOI 10.1007/978-3-662-47666-6_25
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   MAZURKIEWICZ A, 1987, LECT NOTES COMPUT SC, V255, P279
   Norris B, 2013, ACM SIGPLAN NOTICES, V48, P131, DOI [10.1145/2509136.2509514, 10.1145/2544173.2509514]
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   PAPADIMITRIOU CH, 1979, J ACM, V26, P631, DOI 10.1145/322154.322158
   Rodriguez C., 2015, CONCUR LIPICS, V42, P456, DOI 10.4230/LIPIcs.CONCUR.2015.456
   Roemer J, 2018, ACM SIGPLAN NOTICES, V53, P374, DOI [10.1145/3296979.3192385, 10.1145/3192366.3192385]
   SHASHA D, 1988, ACM T PROGR LANG SYS, V10, P282, DOI 10.1145/42190.42277
   Smaragdakis Y, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P387
   SPARC International Inc, 1994, SPARC ARCHITECTURE M
   SV-COMP, 2019, Competition on Software Verification (SV-COMP)
   Zhang NL, 2015, ACM SIGPLAN NOTICES, V50, P250, DOI [10.1145/2813885.2737956, 10.1145/2737924.2737956]
NR 31
TC 14
Z9 14
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 173
DI 10.1145/3360599
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500058
OA Green Submitted, gold, Green Published
DA 2024-07-18
ER

PT J
AU Bahr, P
   Graulund, CU
   Mogelberg, RE
AF Bahr, Patrick
   Graulund, Christian Uldal
   Mogelberg, Rasmus Ejlers
TI Simply RaTT: A Fitch-Style Modal Calculus for Reactive Programming
   without Space Leaks
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Functional reactive programming; Modal types; Synchronous data flow
   languages; Type systems; Garbage collection
AB Functional reactive programming (FRP) is a paradigm for programming with signals and events, allowing the user to describe reactive programs on a high level of abstraction. For this to make sense, an FRP language must ensure that all programs are causal, and can be implemented without introducing space leaks and time leaks. To this end, some FRP languages do not give direct access to signals, but just to signal functions.
   Recently, modal types have been suggested as an alternative approach to ensuring causality in FRP languages in the synchronous case, giving direct access to the signal and event abstractions. This paper presents Simply RaTT: a new modal calculus for reactive programming. Unlike prior calculi, Simply RaTT uses a Fitch-style approach to modal types, which simplifies the type system and makes programs more concise. Echoing a previous result by Krishnaswami for a different language, we devise an operational semantics that safely executes Simply RaTT programs without space leaks.
   We also identify a source of time leaks present in other modal FRP languages: The unfolding of fixed points in delayed computations. The Fitch-style presentation allows an easy way to rules out these leaks, which appears not to be possible in the more traditional dual context approach.
C1 [Bahr, Patrick; Graulund, Christian Uldal; Mogelberg, Rasmus Ejlers] IT Univ Copenhagen, Copenhagen, Denmark.
C3 IT University Copenhagen
RP Bahr, P (corresponding author), IT Univ Copenhagen, Copenhagen, Denmark.
EM paba@itu.dk; cgra@itu.dk; mogel@itu.dk
OI Mogelberg, Rasmus Ejlers/0000-0003-0386-4376; Bahr,
   Patrick/0000-0003-1600-8261
FU VILLUM FONDEN [13156]
FX This work was supported by a research grant (13156) from VILLUM FONDEN.
CR [Anonymous], 1952, Symbolic logic: An introduction
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Bahr P, 2017, IEEE S LOG
   Barber A., 1996, ECSLFCS96347 U ED
   Birkedal L, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:1)2012
   Caspi Paul, 1987, P 14 ACM SIGACT SIGP, DOI [10.1145/41625.41641, DOI 10.1145/41625.41641]
   Cave A, 2014, ACM SIGPLAN NOTICES, V49, P361, DOI 10.1145/2535838.2535881
   Clouston Ranald, 2018, LECT NOTES COMPUTER, V10803, DOI DOI 10.1007/978-3-319-89366-2_14
   Clouston Ranald, 2018, ABS180405236 CORR
   Elliott C, 1997, ACM SIGPLAN NOTICES, V32, P263, DOI 10.1145/258949.258973
   Elliott M., 2009, HASK P 2009 ACM, p25S36, DOI 10.1145/1596638.1596643
   Esterel Technologies SA, 2019, SCI BACKGR
   Esterel Technologies SA, 2019, SUCC STOR
   Guatto Adrien, 2018, LICS18 P 33 ANN ACM, DOI DOI 10.1145/3209108.3209148
   Jahier Pascal Raymond Erwan, 2019, LUSTRE V6 REFERENCE
   Jeffrey A, 2014, IEEE S LOG, DOI 10.1145/2603088.2603106
   Jeffrey Alan, 2012, P 6 WORKSH PROGR LAN, p49S60, DOI [10.1145/2103776.2103783, DOI 10.1145/2103776.2103783]
   Jeltsch Wolfgang, 2013, P 7 WORKSH PROGR LAN, p69S78, DOI [10.1145/2428116.2428128, DOI 10.1145/2428116.2428128]
   Krishnaswami NR, 2013, ACM SIGPLAN NOTICES, V48, P221, DOI [10.1145/2544174.2500588, 10.1145/2500365.2500588]
   Krishnaswami Neelakantan R., 2011, IEEE S LOG, DOI [10.1109/LICS.2011.38, DOI 10.1109/LICS.2011.38]
   Krishnaswami Neelakantan R., 2012, POPL 12 P 39 ANN, p45S58, DOI 10.1145/2103656.2103665
   Mannaa Bassel, 2018, 3 INT C FORM STRUCT, V23, p1S23
   Martin-Lof P., 1984, INTUITIONISTIC TYPE, V9
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Nakano Hiroshi, 2000, IEEE S LOG, DOI 10.1109/LICS.2000.855774
   Nilsson Henrik, 2002, P 2002 ACM SIGPLAN W, P51, DOI 10.1145/581690.581695
   Pnueli Amir, 1977, FDN COMPUTER SCI 197, p46S57, DOI 10.1109/SFCS.1977.32
   Pouzet M., 2006, Universite Paris-Sud, LRI, V1, P25
NR 28
TC 11
Z9 11
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 109
DI 10.1145/3341713
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900032
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Maillard, K
   Ahman, D
   Atkey, R
   Martínez, G
   Rivas, E
   Tanter, É
   Hritcu, C
AF Maillard, Kenji
   Ahman, Danel
   Atkey, Robert
   Martinez, Guido
   Rivas, Exequiel
   Tanter, Eric
   Hritcu, Catalan
TI Dijkstra Monads for All
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program verification; side-effects; monads; dependent types; foundations
AB This paper proposes a general semantic framework for verifying programs with arbitrary monadic side-effects using Dijkstra monads, which we define as monad-like structures indexed by a specification monad. We prove that any monad morphism between a computational monad and a specification monad gives rise to a Dijkstra monad, which provides great flexibility for obtaining Dijkstra monads tailored to the verification task at hand. We moreover show that a large variety of specification monads can be obtained by applying monad transformers to various base specification monads, including predicate transformers and Hoare-style pre-and postconditions. For defining correct monad transformers, we propose a language inspired by Moggi's monadic metalanguage that is parameterized by a dependent type theory. We also develop a notion of algebraic operations for Dijkstra monads, and start to investigate two ways of also accommodating effect handlers. We implement our framework in both Coq and F-star, and illustrate that it supports a wide variety of verification styles for effects such as exceptions, nondeterrninism, state, input-output, and general recursion.
C1 [Maillard, Kenji; Rivas, Exequiel; Tanter, Eric; Hritcu, Catalan] INRIA, Paris, France.
   [Maillard, Kenji] ENS, Paris, France.
   [Ahman, Danel] Univ Ljubljana, Fac Math & Phys, Ljubljana, Slovenia.
   [Atkey, Robert] Univ Strathclyde, Glasgow, Lanark, Scotland.
   [Martinez, Guido] CIFASIS CONICET, Rosario, Argentina.
   [Tanter, Eric] Univ Chile, Comp Sci Dept DCC, Santiago, Chile.
C3 Inria; Universite PSL; Ecole Normale Superieure (ENS); University of
   Ljubljana; University of Strathclyde; Consejo Nacional de
   Investigaciones Cientificas y Tecnicas (CONICET); Universidad de Chile
RP Maillard, K (corresponding author), INRIA, Paris, France.; Maillard, K (corresponding author), ENS, Paris, France.
OI Maillard, Kenji/0000-0001-5554-3203; Rivas,
   Exequiel/0000-0002-2114-624X; Ahman, Danel/0000-0001-6595-2756
FU ERC under ERC Starting Grant SECOMP [715753]; Microsoft Research-Inria
   Joint Centre; Air Force Office of Scientific Research
   [FA9550-17-1-0326]; European Research Council (ERC) [715753] Funding
   Source: European Research Council (ERC)
FX We thank Nikhil Swamy and the anonymous reviewers for their feedback.
   This work was, in part, supported by the ERC under ERC Starting Grant
   SECOMP (715753). Guido Martinez' work was done, in part, during an
   internship at Inria Paris funded by the Microsoft Research-Inria Joint
   Centre. This material is based upon work supported by the Air Force
   Office of Scientific Research under award number FA9550-17-1-0326.
CR Adamek J, 2012, LICS
   Ahman D., 2013, TYPES
   Ahman D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158095
   Ahman D, 2017, ACM SIGPLAN NOTICES, V52, P515, DOI 10.1145/3093333.3009878
   Delbianco GA, 2013, ACM SIGPLAN NOTICES, V48, P363, DOI [10.1145/2544174.2500593, 10.1145/2500365.2500593]
   Benton N, 2002, LECT NOTES COMPUT SC, V2395, P42
   Bowler N, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(3:22)2013
   Clairambault P, 2014, MATH STRUCT COMP SCI, V24, DOI 10.1017/S0960129513000881
   COQUAND T, 1990, LECT NOTES COMPUT SC, V417, P50
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Egger J, 2014, J LOGIC COMPUT, V24, P615, DOI 10.1093/logcom/exs025
   FLOYD RW, 1967, J ACM, V14, P636, DOI 10.1145/321420.321422
   Giry M, 1982, CATEGORICAL ASPECTS
   Hasuo I, 2015, THEOR COMPUT SCI, V604, P2, DOI 10.1016/j.tcs.2015.03.047
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hyland M, 2007, THEOR COMPUT SCI, V375, P20, DOI 10.1016/j.tcs.2006.12.026
   JACOBS B, 1993, THEOR COMPUT SCI, V107, P169, DOI 10.1016/0304-3975(93)90169-T
   Jacobs B, 2014, CMCS
   Jacobs B, 2015, THEOR COMPUT SCI, V604, P30, DOI 10.1016/j.tcs.2015.03.020
   Jaskelioff M, 2010, THEOR COMPUT SCI, V411, P4441, DOI 10.1016/j.tcs.2010.09.011
   Kaposi A., 2019, ARXIV190200297
   Katsumata S, 2014, ACM SIGPLAN NOTICES, V49, P633, DOI 10.1145/2535838.2535846
   Katsumata S, 2013, INFORM COMPUT, V222, P228, DOI 10.1016/j.ic.2012.10.014
   Leino K. R. M, 1994, PROCOMET
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Lindley S, 2005, TLCA
   Luth C., 2002, SIGPLAN Notices, V37, P133, DOI 10.1145/583852.581492
   Malecha G, 2011, J SYMB COMPUT, V46, P95, DOI 10.1016/j.jsc.2010.08.004
   Matache C, 2019, FOSSACS
   McBride C, 2015, LECT NOTES COMPUT SC, V9129, P257, DOI 10.1007/978-3-319-19797-5_13
   Moggi E., 1995, Fundamenta Informaticae, V22, P117
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Morgan Carroll, 1994, Programming from specifications
   Munch-Maccagnoni G, 2013, THESIS PARIS DIDEROT
   Nanevski A, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2491522.2491523
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   Nanevski A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P229
   OWICKI S, 1976, COMMUN ACM, V19, P279, DOI 10.1145/360051.360224
   Pitts A. M, 1991, 4 HIGH ORD WORKSH BA
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G. D, 2002, FOSSACS
   Plotkin G, 2008, IEEE S LOG, P118, DOI 10.1109/LICS.2008.45
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Protzenko Jonathan, 2019, EverCrypt cryptographic provider o~ers developers greater security assurances
   Rauch C, 2016, WADT
   Rustan K, 2005, INFORM PROCESS LETT, V93, P281, DOI 10.1016/j.ipl.2004.10.015
   Sekerinski E, 2012, DEPENDABILITY AND COMPUTER ENGINEERING: CONCEPTS FOR SOFTWARE-INTENSIVE SYSTEMS, P11, DOI 10.4018/978-1-60960-747-0.ch002
   Simpson Alex, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P300, DOI 10.1007/978-3-319-89884-1_11
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   Swierstra W, 2019, PREDICATE TRANSFORME
   Voorneveld N, 2019, MFPS
NR 52
TC 21
Z9 23
U1 2
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 104
DI 10.1145/3341708
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900027
OA Green Published, Green Accepted, gold
DA 2024-07-18
ER

PT J
AU Wang, D
   Hoffmann, J
AF Wang, Di
   Hoffmann, Jan
TI Type-Guided Worst-Case Input Generation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Resource bound analysis; worst-case analysis; type systems; amortized
   analysis; symbolic execution
AB This paper presents a novel technique for type-guided worst-case input generation for functional programs. The technique builds on automatic amortized resource analysis (AARA), a type-based technique for deriving symbolic bounds on the resource usage of functions. Worst-case input generation is performed by an algorithm that takes as input a function, its resource-annotated type derivation in AARA, and a skeleton that describes the shape and size of the input that is to be generated. If successful, the algorithm fills in integers, booleans, and data structures to produce a value of the shape given by the skeleton. The soundness theorem states that the generated value exhibits the highest cost among all arguments of the functions that have the shape of the skeleton. This cost corresponds exactly to the worst-case bound that is established by the type derivation. In this way, a successful completion of the algorithm proves that the bound is tight for inputs of the given shape. Correspondingly, a relative completeness theorem is proved to show that the algorithm succeeds if and only if the derived worst-case bound is tight. The theorem is relative because it depends on a decision procedure for constraint solving. The technical development is presented for a simple first-order language with linear resource bounds. However, the technique scales to and has been implemented for Resource Aware ML, an implementation of AARA for a fragment of OCaml with higher-order functions, user-defined data types, and types for polynomial bounds. Experiments demonstrate that the technique works effectively and can derive worst-case inputs with hundreds of integers for sorting algorithms, operations on search trees, and insertions into hash tables.
C1 [Wang, Di; Hoffmann, Jan] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Wang, D (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
RI wang, di/HKD-8820-2023
OI Hoffmann, Jan/0000-0001-8326-0788; Wang, Di/0000-0002-2418-7987
FU United States Air Force under DARPA AA Contract [FA8750-18-C-0092];
   United States Air Force under DARPA STAC Contract [FA8750-15-C-0082];
   National Science Foundation under SaTC Award [1801369]; National Science
   Foundation under SHF Award [1812876]; Direct For Computer & Info Scie &
   Enginr; Division Of Computer and Network Systems [1801369] Funding
   Source: National Science Foundation; Direct For Computer & Info Scie &
   Enginr; Division of Computing and Communication Foundations [1812876]
   Funding Source: National Science Foundation
FX This article is based on research supported by the United States Air
   Force under DARPA AA Contract FA8750-18-C-0092 and DARPA STAC Contract
   FA8750-15-C-0082, and by the National Science Foundation under SaTC
   Award 1801369 and SHF Award 1812876. Any opinions, findings, and
   conclusions contained in this document are those of the authors and do
   not necessarily reflect the views of the sponsoring organizations.
CR Albert E., 2011, J AUTOMATED REASONIN, V46
   Albert E., 2015, TOOLS ALGS CONSTRUCT
   Atkey R, 2010, LECT NOTES COMPUT SC, V6012, P85, DOI 10.1007/978-3-642-11957-6_6
   Avanzini M., 2013, INT C REWRITING TECH
   Avanzini M., 2015, INT C FUNCTIONAL PRO
   Blanc R., 2010, LOGIC PROG REASONING
   Brockschmidt M., 2014, TOOLS ALGS CONSTRUCT
   Burnim J, 2009, PROC INT CONF SOFTW, P463, DOI 10.1109/ICSE.2009.5070545
   Cadar C., 2008, OP SYST DESIGN IMPL OP SYST DESIGN IMPL
   Carbonneaux Q., 2017, COMPUTER AIDED VERIF
   Carbonneaux Q., 2015, PROG LANG DESIGN IMP
   Chandra S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P363, DOI 10.1145/1542476.1542517
   Chargueraud A., 2015, INTERACTIVE THEOREM
   Chipounov V, 2012, ACM T COMPUT SYST, V30, DOI 10.1145/2110356.2110358
   Cicek E., 2017, PRINC PROG LANG POPL
   Cicek E., 2015, EUROPEAN S PROGRAMMI
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Crary K., 2000, PRINC PROG LANG POPL
   Crosby S. A., 2003, USENIX SEC S USENIX
   Dal Lago U, 2011, IEEE S LOG, P133, DOI 10.1109/LICS.2011.22
   Danielsson NA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1328438.1328457
   Danner N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P140, DOI 10.1145/2784731.2784749
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dinges P., 2014, AUTOMATED SOFTW ENG
   Flores-Montoya A., 2014, ASIAN S PROG LANG SY
   Forrester J. E., 2000, USENIX WINDOWS SYST
   Frohn F., 2016, INT JOINT C AUTOMATE
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Godefroid P., 2008, Network and Dist. Syst. Security
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Gulwani S, 2009, LECT NOTES COMPUT SC, V5643, P51, DOI 10.1007/978-3-642-02658-4_7
   Harper R, 2016, Practical Foundations for Programming Languages
   Hoffmann J., 2010, EUROPEAN S PROGRAMMI
   Hoffmann J., 2017, PRINC PROG LANG POPL
   Hoffmann J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P357, DOI 10.1145/1926385.1926427
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hofmann M., 2015, INT C TYPED LAMBDA C
   Jost S., 2009, S FORM METH FM 09
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   Kincaid Z., 2017, PROG LANG DESIGN IMP
   Lago U. D., 2013, PRINC PROG LANG POPL
   Lampropoulos L., 2018, PRINC PROG LANG POPL
   Luckow K, 2017, IEEE INT CONF SOFTW, P58, DOI 10.1109/ICST.2017.13
   Ma K.-K., 2011, STATIC ANAL S SAS 11
   McIlroy M. D, 1999, J SOFTW PRACTICE EXP, V29
   Ngo V. C., 2017, S SEC PRIVACY SP 17
   Nipkow T, 2015, LECT NOTES COMPUT SC, V9236, P310, DOI 10.1007/978-3-319-22102-1_21
   Noller Y., 2018, INT S SOFTW TESTING
   Noschinski L., 2013, J AUTOMATED REASONIN, V51
   Petsios T, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2155, DOI 10.1145/3133956.3134073
   Runciman C, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P37
   Sen K., 2005, FOUND SOFTW ENG FSE
   Simoes H. R., 2012, INT C FUNCTIONAL PRO
   Sinn M., 2014, COMPUTER AIDED VERIF
   Tarjan R. E, 1985, SIAM J ALGEBRAIC DIS, V6
   Vasconcelos P. B, 2008, SPACE COST ANAL USIN
   Vasconcelos P. B., 2015, EUROPEAN S PROGRAMMI
   Walker D., 2002, Advanced Topics in Types and Programming Languages
   Wang D., 2018, TYPE GUIDED WORST CA
   Wang P., 2017, OBJECT ORIENTED PROG
   Website, 2015, SPACE TIME ANAL CYBE SPACE TIME ANAL CYBE
   Website, 2012, PHP PHP 5 CHANGELOG
   Website, 2011, CVE CVE 2011 4885
   Website, 2012, PHP 538 HASHTABLES D
   Xi H, 2002, J HIGHER ORDER SYMBO, V15
   Zhang YF, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P643, DOI 10.1109/ICSE.2015.80
   Zuleger F., 2011, STATIC ANAL S SAS 11
NR 67
TC 8
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 13
DI 10.1145/3290326
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300013
OA gold
DA 2024-07-18
ER

PT J
AU Chen, YF
   Chocholaty, D
   Havlena, V
   Holík, L
   Lengál, O
   Síc, J
AF Chen, Yu-Fang
   Chocholaty, David
   Havlena, Vojtech
   Holik, Lukas
   Lengal, Ondrej
   Sic, Juraj
TI Solving String Constraints with Lengths by Stabilization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE string constraints; stabilization; word equations; SMT solving; length
   constraints; regular languages
ID SMT SOLVER; REGULAR EXPRESSIONS; EQUATIONS
AB We present a new algorithm for solving string constraints. The algorithm builds upon a recent method for solving word equations and regular constraints that interprets string variables as languages rather than strings and, consequently, mitigates the combinatorial explosion that plagues other approaches. We extend the approach to handle linear integer arithmetic length constraints by combination with a known principle of equation alignment and splitting, and by extension to other common types of string constraints, yielding a fully-fledged string solver. The ability of the framework to handle unrestricted disequalities even extends one of the largest decidable classes of string constraints, the chain-free fragment. We integrate our algorithm into a DPLL-based SMT solver. The performance of our implementation is competitive and even significantly better than state-of-the-art string solvers on several established benchmarks obtained from applications in verification of string programs.
C1 [Chen, Yu-Fang] Acad Sinica, Inst Informat Sci, Taipei, Taiwan.
   [Chocholaty, David; Havlena, Vojtech; Holik, Lukas; Lengal, Ondrej; Sic, Juraj] Brno Univ Technol, Fac Informat Technol, Brno, Czech Republic.
C3 Academia Sinica - Taiwan; Brno University of Technology
RP Chen, YF (corresponding author), Acad Sinica, Inst Informat Sci, Taipei, Taiwan.
EM yfc@iis.sinica.edu.tw; xchoch08@stud.fit.vutbr.cz;
   ihavlena@fit.vutbr.cz; holik@fit.vutbr.cz; lengal@fit.vutbr.cz;
   sicjuraj@fit.vutbr.cz
OI Lengal, Ondrej/0000-0002-3038-5875; Sic, Juraj/0000-0001-7454-3751;
   Havlena, Vojtech/0000-0003-4375-7954; Chocholaty,
   David/0009-0006-5614-1592
FU Czech Ministry of Education, Youth and Sports of the ERC.CZ programme
   [LL1908]; Czech Science Foundation [GA23-07565S]; FIT BUT internal
   project [FIT-S-23-8151]; National Science and Technology Council, Taiwan
   [109-2628-E-001-001-MY3]
FX We thank the anonymous reviewers of the paper and the artifact on their
   comments on how to improve the quality of the paper (and the artifact)
   and we thank Michal Hecko for his help with the artifact's testing. This
   work was supported by the Czech Ministry of Education, Youth and Sports
   project LL1908 of the ERC.CZ programme, the Czech Science Foundation
   project GA23-07565S, the FIT BUT internal project FIT-S-23-8151, and the
   project 109-2628-E-001-001-MY3 from National Science and Technology
   Council, Taiwan.
CR Abdulla PA, 2021, LECT NOTES COMPUT SC, V13008, P305, DOI 10.1007/978-3-030-89051-3_17
   Abdulla PA, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P943, DOI 10.1145/3385412.3386034
   Abdulla PA, 2019, LECT NOTES COMPUT SC, V11781, P277, DOI 10.1007/978-3-030-31784-3_16
   Abdulla PA, 2017, ACM SIGPLAN NOTICES, V52, P602, DOI [10.1145/3062341.3062384, 10.1145/3140587.3062384]
   Abdulla PA, 2015, LECT NOTES COMPUT SC, V9206, P462, DOI 10.1007/978-3-319-21690-4_29
   Abdulla PA, 2014, LECT NOTES COMPUT SC, V8559, P150, DOI 10.1007/978-3-319-08867-9_10
   Alt L, 2022, LECT NOTES COMPUT SC, V13371, P325, DOI 10.1007/978-3-031-13185-1_16
   Amadini R, 2017, LECT NOTES COMPUT SC, V10416, P3, DOI 10.1007/978-3-319-66158-2_1
   [Anonymous], 2022, SMT-COMP'22
   Aydin A, 2015, LECT NOTES COMPUT SC, V9206, P255, DOI 10.1007/978-3-319-21690-4_15
   Backes J., 2018, 2018 FORMAL METHODS, P1, DOI DOI 10.23919/FMCAD.2018.8602994
   Ball T, 2015, NATO SCI PEAC SECUR, V40, P26, DOI 10.3233/978-1-61499-495-4-26
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Barceló P, 2017, ACM T COMPUT LOG, V18, DOI 10.1145/3070822
   Barrett C., 2016, The Satisfiability Modulo Theories Library (SMT-LIB)
   Barrett C, 2016, SYMPOSIUM AND BOOTCAMP ON THE SCIENCE OF SECURITY, P4, DOI 10.1145/2898375.2898393
   Berzish M., 2021, Z3str4: a solver for theories over strings
   Berzish M, 2023, THEOR COMPUT SCI, V943, P50, DOI 10.1016/j.tcs.2022.12.009
   Berzish M, 2021, LECT NOTES COMPUT SC, V12760, P289, DOI 10.1007/978-3-030-81688-9_14
   Berzish M, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P55, DOI 10.23919/FMCAD.2017.8102241
   Bjorner N, 2009, LECT NOTES COMPUT SC, V5505, P307, DOI 10.1007/978-3-642-00768-2_27
   Bjorner Nikolaj S, 2018, 2018 FORM METH COMP, P1, DOI [10.23919/FMCAD.2018.8602994, DOI 10.23919/FMCAD.2018.8602994]
   Blahoudek F, 2023, LECT NOTES COMPUT SC, V14000, P403, DOI 10.1007/978-3-031-27481-7_23
   Bultan Tevfik, ABC string solver
   Bustan D., 2003, ACM Transactions on Computational Logic, V4, P181, DOI 10.1145/635499.635502
   Chen T, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498707
   Chen TL, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290362
   Chen TL, 2020, LECT NOTES COMPUT SC, V12302, P325, DOI 10.1007/978-3-030-59152-6_18
   Chen T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158091
   Chen T, 2014, LECT NOTES COMPUT SC, V8631, P150, DOI 10.1007/978-3-319-11194-0_12
   Chen YF, 2023, J SYST SOFTWARE, V201, DOI 10.1016/j.jss.2023.111673
   Chen YF, 2020, LECT NOTES COMPUT SC, V12470, P343, DOI 10.1007/978-3-030-64437-6_18
   Chen Yu-Fang, 2023, Artifact for the OOPSLA'23 paper "Solving String Constraints with Lengths by Stabilization, DOI [10.5281/zenodo.8289595, DOI 10.5281/ZENODO.8289595]
   Christensen AS, 2003, LECT NOTES COMPUT SC, V2694, P1
   Cox A, 2017, Arxiv, DOI arXiv:1708.09073
   Day Joel D., 2019, Reachability Problems. 13th International Conference, RP 2019. Proceedings: Lecture Notes in Computer Science (LNCS 11674), P93, DOI 10.1007/978-3-030-30806-3_8
   Day J, 2018, Arxiv, DOI arXiv:1802.00523
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Diep B.P., 2018, 2018 FORM METH COMP, P1, DOI [DOI 10.23919/FMCAD.2018.8602997, 10.23919/FMCAD, DOI 10.23919/FMCAD]
   Esparza J., 1997, Fundamenta Informaticae, V31, P13
   Fiedor T, 2023, LECT NOTES ARTIF INT, V14132, P286, DOI 10.1007/978-3-031-38499-8_17
   Freydenberger Dominik D., 2021, SCHLOSS DAGSTUHL LEI, V130, P1, DOI [10.4230/LIPIcs.ICALP.2021.130, DOI 10.4230/LIPICS.ICALP.2021.130]
   Fu Xiang, 2010, P NASA C P, P67
   Ganesh Vijay, 2013, Hardware and Software: Verification and Testing. 8th International Haifa Verification Conference, HVC 2012 Revised Selected Papers. LNCS 7857, P209, DOI 10.1007/978-3-642-39611-3_21
   Guodong Li, 2013, Hardware and Software: Verification and Testing. 9th International Haifa Verification Conference, HVC 2013. Proceedings: LNCS 8244, P15, DOI 10.1007/978-3-319-03077-7_2
   Hadarean Liana, 2019, String Solving at Amazon
   Holík L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158092
   Hooimeijer P, 2012, AUTOMAT SOFTW ENG, V19, P531, DOI 10.1007/s10515-012-0111-x
   Hooimeijer Pieter, 2011, 20 USENIX SEC S SAN
   Jez A, 2016, J ACM, V63, DOI 10.1145/2743014
   Kiezun A, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2377656.2377662
   Liang TY, 2016, FORM METHOD SYST DES, V48, P206, DOI 10.1007/s10703-016-0247-6
   Liang TY, 2015, LECT NOTES ARTIF INT, V9322, P135, DOI 10.1007/978-3-319-24246-0_9
   Liang TY, 2014, LECT NOTES COMPUT SC, V8559, P646, DOI 10.1007/978-3-319-08867-9_43
   Lin AW, 2021, LOG METH COMPUT SCI, V17, DOI 10.46298/LMCS-17(4:4)2021
   Lin AW, 2016, ACM SIGPLAN NOTICES, V51, P123, DOI 10.1145/2914770.2837641
   MAKANIN GS, 1977, MATH USSR SB+, V32, P129, DOI 10.1070/SM1977v032n02ABEH002376
   Microsoft, 2020, Azure Resource Manager documentation
   Trinh MT, 2016, LECT NOTES COMPUT SC, V9779, P218, DOI 10.1007/978-3-319-41528-4_12
   Trinh MT, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1232, DOI 10.1145/2660267.2660372
   Mora F, 2021, LECT NOTES COMPUT SC, V13047, P389, DOI 10.1007/978-3-030-90870-6_21
   Nielsen J, 1918, MATH ANN, V78, P385
   Nieuwenhuis R, 2006, J ACM, V53, P937, DOI 10.1145/1217856.1217859
   Nötzli A, 2022, LECT NOTES COMPUT SC, V13372, P205, DOI 10.1007/978-3-031-13188-2_11
   OWASP, 2021, Top 10
   OWASP, 2013, Top 10
   OWASP, 2017, Top 10
   PARIKH RJ, 1966, J ACM, V13, P570, DOI 10.1145/321356.321364
   Plandowski W., 1999, Proceedings of the Thirty-First Annual ACM Symposium on Theory of Computing, P721, DOI 10.1145/301250.301443
   Le QL, 2018, LECT NOTES COMPUT SC, V11275, P350, DOI 10.1007/978-3-030-02768-1_19
   Reynolds Andrew, 2020, 2020 Formal Methods in Computer Aided Design (FMCAD), P225, DOI 10.34727/2020/isbn.978-3-85448-042-6_30
   Reynolds A, 2019, LECT NOTES COMPUT SC, V11562, P23, DOI 10.1007/978-3-030-25543-5_2
   Reynolds A, 2017, LECT NOTES COMPUT SC, V10427, P453, DOI 10.1007/978-3-319-63390-9_24
   Rungta N, 2022, LECT NOTES COMPUT SC, V13371, P3, DOI 10.1007/978-3-031-13185-1_1
   Saxena P, 2010, P IEEE S SECUR PRIV, P513, DOI 10.1109/SP.2010.38
   Saxena Prateek, 2023, Kaluza web site
   Scott JD, 2017, LECT NOTES COMPUT SC, V10335, P51, DOI 10.1007/978-3-319-59776-8_5
   SMTLib, 2023, ABOUT US
   Stanford C, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P620, DOI 10.1145/3453483.3454066
   Veanes M, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P137
   Wang HE, 2018, IEEE INT CONF AUTOM, P623, DOI 10.1145/3238147.3238189
   Wang HE, 2016, LECT NOTES COMPUT SC, V9779, P241, DOI 10.1007/978-3-319-41528-4_13
   Yu F, 2014, FORM METHOD SYST DES, V44, P44, DOI 10.1007/s10703-013-0189-1
   Yu F, 2011, INT J FOUND COMPUT S, V22, P1909, DOI 10.1142/S0129054111009112
   Yu F, 2010, LECT NOTES COMPUT SC, V6015, P154
   Zheng YH, 2015, LECT NOTES COMPUT SC, V9206, P235, DOI 10.1007/978-3-319-21690-4_14
   Zheng Yunhui, 2013, P 9 JOINT M FDN SOFT, P114, DOI [10.1145/2491411.2491456, DOI 10.1145/2491411.2491456]
   Zhu Qizhen, 2019, J. Inf. Process., V27, P810, DOI [10.2197/ipsjjip.27.810, DOI 10.2197/IPSJJIP.27.810]
NR 88
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 296
DI 10.1145/3622872
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100076
OA gold
DA 2024-07-18
ER

PT J
AU Bahr, P
   Mogelberg, RE
AF Bahr, Patrick
   Mogelberg, Rasmus Ejlers
TI Asynchronous Modal FRP
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Functional Reactive Programming; Modal Types; Linear Temporal Logic;
   Synchronous Data Flow Languages; Type Systems
ID SEMANTICS
AB Over the past decade, a number of languages for functional reactive programming (FRP) have been suggested, which use modal types to ensure properties like causality, productivity and lack of space leaks. So far, almost all of these languages have included a modal operator for delay on a global clock. For some applications, however, a global clock is unnatural and leads to leaky abstractions as well as inefficient implementations. While modal languages without a global clock have been proposed, no operational properties have been proved about them, yet.
   This paper proposes Async RaTT, a new modal language for asynchronous FRP, equipped with an operational semantics mapping complete programs to machines that take asynchronous input signals and produce output signals. The main novelty of Async RaTT is a new modality for asynchronous delay, allowing each output channel to be associated at runtime with the set of input channels it depends on, thus causing the machine to only compute new output when necessary. We prove a series of operational properties including causality, productivity and lack of space leaks. We also show that, although the set of input channels associated with an output channel can change during execution, upper bounds on these can be determined statically by the type system.
C1 [Bahr, Patrick; Mogelberg, Rasmus Ejlers] IT Univ Copenhagen, Copenhagen, Denmark.
C3 IT University Copenhagen
RP Bahr, P (corresponding author), IT Univ Copenhagen, Copenhagen, Denmark.
EM paba@itu.dk; mogel@itu.dk
OI Bahr, Patrick/0000-0003-1600-8261
FU Independent Research Fund Denmark [2032-00134B]
FX Mogelberg was supported by the Independent Research Fund Denmark grant
   number 2032-00134B.
CR Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Bärenz M, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P145, DOI 10.1145/3242744.3242757
   Bahr P, 2022, J FUNCT PROGRAM, V32, DOI 10.1017/S0956796822000132
   Bahr P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434283
   Bahr P, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341713
   BERRY G, 1985, LECT NOTES COMPUT SC, V197, P389
   Birkedal L, 2020, MATH STRUCT COMP SCI, V30, P118, DOI 10.1017/S0960129519000197
   Caspi P., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P178, DOI 10.1145/41625.41641
   Cave A, 2014, ACM SIGPLAN NOTICES, V49, P361, DOI 10.1145/2535838.2535881
   Clouston R, 2018, LECT NOTES COMPUT SC, V10803, P258, DOI 10.1007/978-3-319-89366-2_14
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   Elliott C, 1997, ACM SIGPLAN NOTICES, V32, P263, DOI 10.1145/258949.258973
   Elliott C, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P25
   Graulund CU, 2021, LECT NOTES COMPUT SC, V12650, P289, DOI 10.1007/978-3-030-71995-1_15
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Jeffrey A, 2014, IEEE S LOG, DOI 10.1145/2603088.2603106
   Jeffrey Alan., 2012, Proceedings of the sixth workshop on Programming languages meets program verification, P49
   Jeltsch W, 2012, ELECTRON NOTES THEOR, V286, P229, DOI 10.1016/j.entcs.2012.08.015
   Krishnaswami NR, 2013, ACM SIGPLAN NOTICES, V48, P221, DOI [10.1145/2544174.2500588, 10.1145/2500365.2500588]
   Krishnaswami NR, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P45
   Krishnaswami NR, 2011, IEEE S LOG, P257, DOI 10.1109/LICS.2011.38
   Nakano H, 2000, IEEE S LOG, P255, DOI 10.1109/LICS.2000.855774
   Nilsson H, 2002, P 2002 ACM SIGPLAN W, P51, DOI DOI 10.1145/581690.581695
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Pouzet M., 2006, Universite Paris-Sud, LRI, V1, P25
   van der Ploeg A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P302, DOI 10.1145/2784731.2784752
NR 26
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 205
DI 10.1145/3607847
PG 35
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900018
OA gold
DA 2024-07-18
ER

PT J
AU Hubers, A
   Morris, JG
AF Hubers, Alex
   Morris, J. Garrett
TI Generic Programming with Extensible Data Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE generic programming; extensible data types; row types; row polymorphism;
   qualified types
AB We present a novel approach to generic programming over extensible data types. Row types capture the structure of records and variants, and can be used to express record and variant subtyping, record extension, and modular composition of case branches. We extend row typing to capture generic programming over rows themselves, capturing patterns including lifting operations to records and variations from their component types, and the duality between cases blocks over variants and records of labeled functions, without placing specific requirements on the fields or constructors present in the records and variants. We formalize our approach in System R omega, an extension of F omega with row types, and give a denotational semantics for (stratified) R omega in Agda.
C1 [Hubers, Alex; Morris, J. Garrett] Univ Iowa, Dept Comp Sci, 14 MacLean Hall, Iowa City, IA 52240 USA.
C3 University of Iowa
RP Hubers, A (corresponding author), Univ Iowa, Dept Comp Sci, 14 MacLean Hall, Iowa City, IA 52240 USA.
EM alexander-hubers@uiowa.edu; garrett-morris@uiowa.edu
RI Morris, J. Garrett/AAI-5463-2020
OI Morris, J. Garrett/0000-0002-3992-1080
FU National Science Foundation [CCF-2044815]
FX We thank: James McKinna, for providing initial direction to our
   mechanization of Rl as well as general discussion of Rose; Christa
   Jenkins, for guidance in developing the mechanization; and, Fabian Ruch
   for extensive feedback on the final mechanization. This work was
   supported by the National Science Foundation under Grant No.
   CCF-2044815.
CR [Anonymous], 2005, Advanced Topics in Types and Programming Languages
   Bahr Patrick, 2014, P 10 ACM SIGPLAN WOR, P71
   Berthomieu Bernard, 1995, WORKSH TYP PROGR AN
   Blume M, 2006, ACM SIGPLAN NOTICES, V41, P239, DOI 10.1145/1160074.1159836
   Chlipala A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P10, DOI 10.1145/2784731.2784741
   Chlipala A, 2015, ACM SIGPLAN NOTICES, V50, P153, DOI [10.1145/2775051.2677004, 10.1145/2676726.2677004]
   Chlipala A, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P122, DOI 10.1145/1806596.1806612
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   Dunfield J, 2012, ACM SIGPLAN NOTICES, V47, P17, DOI 10.1145/2398856.2364534
   Gan E, 2015, ELECTRON P THEOR COM, P34, DOI 10.4204/EPTCS.176.4
   Garrigue Jacques, 1998, ML WORKSHOP
   Gaster B.R., 1996, Technical Report, Technical Report NOTTCS-TR-96-3
   Harper Robert, 1991, C RECORD 18 ANN ACM, P131, DOI [10.1145/99583.99603, DOI 10.1145/99583.99603]
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Hubers Alex, 2023, Generic Programming with Extensible Data Types; Or, Making Ad Hoc Extensible Data Types Less Ad Hoc-Artifact, DOI [10.5281/zenodo.8116889, DOI 10.5281/ZENODO.8116889]
   Ingle Apoorv, 2022, HASKELL 22 15 ACM SI, P95, DOI [10.1145/3546189.3549923, DOI 10.1145/3546189.3549923]
   Jones MP, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P87
   Jones Mark P, 2020, Proc. ACM Program. Lang. 4, POPL (2020), V40, P1
   Jones MarkP., 1994, Qualified Types: Theory and Practice
   Jones SP, 2006, ACM SIGPLAN NOTICES, V41, P50
   Kaposi A, 2019, LECT NOTES COMPUT SC, V11825, P329, DOI 10.1007/978-3-030-33636-3_12
   Keep AW, 2013, ACM SIGPLAN NOTICES, V48, P343, DOI [10.1145/2544174.2500618, 10.1145/2500365.2500618]
   Kiselyov Oleg, 2004, HASKELL 04, P96, DOI DOI 10.1145/1017472.1017488
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Leijen Daan, 2005, Trends in Functional Programming, V6, P179
   Leijen Daan, 2004, Technical Report UU-CS-2004-51
   LEIVANT D, 1991, INFORM COMPUT, V93, P93, DOI 10.1016/0890-5401(91)90053-5
   Lindley S, 2017, RIV PUBL SER AUTOMAT, P265
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Lindley Sam, 2012, TLDI, P91, DOI DOI 10.1145/2103786.2103798
   Makholm H, 2005, ACM SIGPLAN NOTICES, V40, P156, DOI 10.1145/1090189.1086386
   McBride C, 2010, WGP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P1
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Morris JG, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290325
   Morris JG, 2016, ACM SIGPLAN NOTICES, V51, P448, DOI 10.1145/3022670.2951925
   Morris JG, 2015, ACM SIGPLAN NOTICES, V50, P71, DOI 10.1145/2804302.2804320
   Oliveira BCDS, 2015, ACM SIGPLAN NOTICES, V50, P82, DOI 10.1145/2804302.2804315
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   REMY D, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P77, DOI 10.1145/75277.75284
   Remy D., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P166, DOI 10.1145/143165.143202
   Rioux N, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571211
   Sarkar D, 2004, ACM SIGPLAN NOTICES, V39, P201, DOI 10.1145/1016848.1016878
   Sulzmann Martin, 1997, YALEUDCSRR1128
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wadler Philip, 1998, The Expression Problem
   WAND M, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P92
   WAND M, 1991, INFORM COMPUT, V93, P1, DOI 10.1016/0890-5401(91)90050-C
   Wand M., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P37
NR 51
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 201
DI 10.1145/3607843
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900014
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Li, JM
   Ahmed, A
   Holtzen, S
AF Li, John M.
   Ahmed, Amal
   Holtzen, Steven
TI Lilac: A Modal Separation Logic for Conditional Probability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programming; separation logic
ID SEMANTICS; BI
AB We present Lilac, a separation logic for reasoning about probabilistic programs where separating conjunction captures probabilistic independence. Inspired by an analogy with mutable state where sampling corresponds to dynamic allocation, we show how probability spaces over a fixed, ambient sample space appear to be the natural analogue of heap fragments, and present a new combining operation on them such that probability spaces behave like heaps and measurability of random variables behaves like ownership. This combining operation forms the basis for our model of separation, and produces a logic with many pleasant properties. In particular, Lilac has a frame rule identical to the ordinary one, and naturally accommodates advanced features like continuous random variables and reasoning about quantitative properties of programs. Then we propose a new modality based on disintegration theory for reasoning about conditional probability. We show how the resulting modal logic validates examples from prior work, and give a formal verification of an intricate weighted sampling algorithm whose correctness depends crucially on conditional independence structure.(1)
C1 [Li, John M.; Ahmed, Amal; Holtzen, Steven] Northeastern Univ, Boston, MA 02115 USA.
C3 Northeastern University
RP Li, JM (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
EM li.john@northeastern.edu; a.ahmed@northeastern.edu;
   s.holtzen@northeastern.edu
OI Li, John/0000-0003-2130-5092; Holtzen, Steven/0000-0002-8190-5412;
   Ahmed, Amal/0000-0001-7424-572X
FU National Science Foundation [CCF-2220408]
FX We thank our shepherd, Joseph Tassarotti, and the anonymous reviewers
   for their careful feedback and suggestions. This work was supported by
   the National Science Foundation under Grant No. #CCF-2220408.
CR Bao JL, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470712
   Bao JL, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498719
   Barthe G., 2018, LECT NOTES COMPUTER, V10801, P117, DOI [10.1007/978-3-319-89884-15, DOI 10.1007/978-3-319-89884-1_5]
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371123
   Batz K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290347
   Biering B, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275499
   Bizjak A, 2015, LECT NOTES COMPUT SC, V9034, P279, DOI 10.1007/978-3-662-46678-0_18
   Chang JT, 1997, STAT NEERL, V51, P287, DOI 10.1111/1467-9574.00056
   Culpepper R, 2017, LECT NOTES COMPUT SC, V10201, P368, DOI 10.1007/978-3-662-54434-1_14
   Distefano D, 2019, COMMUN ACM, V62, P62, DOI 10.1145/3338112
   Efraimidis PS, 2006, INFORM PROCESS LETT, V97, P181, DOI 10.1016/j.ipl.2005.11.003
   Ershov MP, 1975, THEOR PROBAB APPL+, V19, P431, DOI DOI 10.1137/1119053
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   Fritz T, 2020, ADV MATH, V370, DOI 10.1016/j.aim.2020.107239
   Galmiche D, 2005, MATH STRUCT COMP SCI, V15, P1033, DOI 10.1017/S0960129505004858
   Gehr T, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P586, DOI [10.1145/3192366.3192400, 10.1145/3296979.3192400]
   Gretz F, 2014, PERFORM EVALUATION, V73, P110, DOI 10.1016/j.peva.2013.11.004
   Harel D., 2001, HDB PHILOS LOGIC, P99, DOI [DOI 10.1145/568438.568456, 10.1145/568438.568456]
   Heunen Chris, 2017, 2017 32nd Annual ACM/IEEE Symposium on Logic in Computer Science (LICS), DOI 10.1109/LICS.2017.8005137
   Holtzen S, 2021, LECT NOTES COMPUT SC, V12760, P577, DOI 10.1007/978-3-030-81688-9_27
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   KALLENBERG O., 2021, Probability Theory and Stochastic Modelling, V99, DOI DOI 10.1007/978-3-030-61871-1
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9826, P191, DOI 10.1007/978-3-319-43425-4_14
   Kozen Dexter, 1983, P ACM S THEORY COMPU, P291, DOI [10.1145/800061.808758, DOI 10.1145/800061.808758]
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Kripke Saul, 1972, Semantics of natural language, P763, DOI DOI 10.1007/978-94-010-2557-79
   Lee Edward Ashford, 2016, INTRO EMBEDDED SYSTE
   Li JM, 2023, Arxiv, DOI arXiv:2304.01339
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   O'Hearn PW, 2004, ACM SIGPLAN NOTICES, V39, P268, DOI [10.1145/982962.964024, 10.1145/1498926.1498929]
   OHearn Peter W, 2012, SOFTWARE SAFETY SECU, V33, P286, DOI [10.3233/978-1-61499-028-4-286, DOI 10.3233/978-1-61499-028-4-286]
   Olmedo F, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P672, DOI 10.1145/2933575.2935317
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Reynolds JC, 2009, NATO SCI PEAC SECUR, V22, P285, DOI 10.3233/978-1-58603-976-9-285
   Shan CC, 2017, ACM SIGPLAN NOTICES, V52, P130, DOI 10.1145/3093333.3009852
   Smolka S, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P190, DOI 10.1145/3314221.3314639
   Srivastava Sashi Mohan, 2008, COURSE BOREL SETS, V180, DOI [10.1007/b98956, DOI 10.1007/B98956]
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   Staton S, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P525, DOI 10.1145/2933575.2935313
   Staton Sam, 2020, FDN PROBABILISTIC PR, DOI DOI 10.1017/9781108770750.003
   Stein Dario Maximilian, 2021, Structural Foundations for Probabilistic Programming Languages
   Tao Terence, 2015, 254A NOTES 0 REV PRO
   Tassarotti J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290377
   Wand M, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236782
   Zhang YZ, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498677
   Zhou L, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470673
NR 47
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 112
DI 10.1145/3591226
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900008
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Park, J
   Youn, D
   Lee, K
   Ryu, S
AF Park, Jihyeok
   Youn, Dongjun
   Lee, Kanguk
   Ryu, Sukyoung
TI Feature-Sensitive Coverage for Conformance Testing of Programming
   Language Implementations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE mechanized specification; conformance test synthesis; coverage-guided
   fuzzing; feature-sensitive coverage
ID SEMANTICS
AB The conformance testing of programming language implementations is crucial to support correct and consistent execution environments. Because manually maintaining conformance tests for real-world programming languages is cumbersome and labor-intensive, researchers have presented various ways to make conformance tests effective and efficient. One such approach is to use graph coverage, one of the most widely-used coverage criteria, to generate tests that reach different parts of a mechanized language specification. Since mechanized specifications use functions or inductive definitions to describe the semantics of language features, traditional graph coverage criteria for software work as they are. However, they may not produce high-quality conformance tests because language implementations often have specialized execution paths for different features, even when their semantics descriptions use the same functions. Traditional graph coverage may not distinguish test requirements of such language features, which degrades the quality of conformance testing. Similarly, it may not distinguish test requirements of different parts of the same language feature when their semantics descriptions use the same functions.
   We present feature-sensitive (FS) coverage as a novel coverage criterion to generate high-quality conformance tests for language implementations. It is a general extension of graph coverage, refining conventional test requirements using the innermost enclosing language features. We also introduce feature-call-path-sensitive (FCPS) coverage, a variant of FS coverage, and extend both coverage criteria using the : -limiting approach. To evaluate the effectiveness of the new coverage criteria for language implementations, we apply them to a mechanized specification of JavaScript. We extend JEST, the state-of-the-art JavaScript conformance test synthesizer using coverage-guided mutational fuzzing, with various FS and FCPS coverage criteria. For the latest JavaScript language specification (ES13, 2022), our tool automatically synthesizes 237,981 conformance tests in 50 hours with five coverage criteria. We evaluated the conformance of eight mainstream JavaScript implementations (four engines and four transpilers) with the synthesized conformance tests and discovered bugs in all of them. The tool detected 143 distinct conformance bugs (42 in engines and 101 in transpilers), 85 of which were confirmed by the developers and 83 of which were newly discovered bugs.
C1 [Park, Jihyeok] Korea Univ, Seoul, South Korea.
   [Youn, Dongjun; Lee, Kanguk; Ryu, Sukyoung] Korea Adv Inst Sci & Technol, Daejeon, South Korea.
C3 Korea University; Korea Advanced Institute of Science & Technology
   (KAIST)
RP Park, J (corresponding author), Korea Univ, Seoul, South Korea.
EM jihyeok_park@korea.ac.kr; f52985@kaist.ac.kr; p51lee@kaist.ac.kr;
   sryu.cs@kaist.ac.kr
RI Park, Jihyeok/AGV-7207-2022; Ryu, Sukyoung/A-8543-2015
OI Park, Jihyeok/0000-0001-8387-1984; Youn, Dongjun/0000-0002-5766-2035;
   Ryu, Sukyoung/0000-0002-0019-9772
FU National Research Foundation of Korea (NRF) [2022R1A2C200366011,
   2021R1A5A1021944]; Institute for Information & communications Technology
   Promotion (IITP) - Korea government (MSIT) [2022-0-00460,
   2023-2020-0-01819]; Samsung Electronics Co., Ltd [G01210570]
FX This research was supported by National Research Foundation of Korea
   (NRF) (2022R1A2C200366011 and 2021R1A5A1021944), Institute for
   Information & communications Technology Promotion (IITP) grant funded by
   the Korea government (MSIT) (2022-0-00460 and 2023-2020-0-01819), and
   Samsung Electronics Co., Ltd (G01210570).
CR Ammann Paul, 2008, Introduction to software testing, V1st
   Artho C, 2017, IEEE INT CONF SOFTW, P288, DOI 10.1109/ICST.2017.33
   Bae S, 2017, FME WORKS FORM, P72, DOI 10.1109/FormaliSE.2017.10
   Bernhard Lukas, 2022, CCS '22: Proceedings of the 2022 ACM SIGSAC Conference on Computer and Communications Security, P351, DOI 10.1145/3548606.3560624
   Blazy S, 2009, J AUTOM REASONING, V43, P263, DOI 10.1007/s10817-009-9148-3
   Bodin M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290357
   Bogdanas D, 2015, ACM SIGPLAN NOTICES, V50, P445, DOI [10.1145/2775051.2676982, 10.1145/2676726.2676982]
   Charguéraud A, 2018, COMPANION PROCEEDINGS OF THE WORLD WIDE WEB CONFERENCE 2018 (WWW 2018), P691, DOI 10.1145/3184558.3185969
   Chen YT, 2019, PROC INT CONF SOFTW, P1257, DOI 10.1109/ICSE.2019.00127
   CHILENSKI JJ, 1994, SOFTWARE ENG J, V9, P193, DOI 10.1049/sej.1994.0025
   Cummins C, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P95, DOI 10.1145/3213846.3213848
   ECMA International, 2022, TEST262 CONF TEST SU
   ECMA International, 2022, ECMA262, V13th
   Greenberg M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371111
   Han H, 2019, 26TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2019), DOI 10.14722/ndss.2019.23263
   He XY, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2229, DOI 10.1145/3460120.3484823
   Herman P. M., 1976, Australian Computer Journal, V8, P92
   Jensen SH, 2009, LECT NOTES COMPUT SC, V5673, P238, DOI 10.1007/978-3-642-03237-0_17
   Jestfs, 2023, Zenodo, DOI 10.5281/ZENODO.7787547
   Kashyap V, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P121, DOI 10.1145/2635868.2635904
   Khayam Adam, 2022, P 24 INT S PRINCIPLE, DOI DOI 10.1145/3551357.3551381
   Laurent T, 2023, ACM T SOFTW ENG METH, V32, DOI 10.1145/3550270
   Lee Hongki, 2012, P 19 INT WORKSH FDN
   Lee S, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P2613
   Lehmann D, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P610, DOI 10.1145/3236024.3236037
   Li N, 2009, IEEE ICST WORKSHOP, P220, DOI 10.1109/ICSTW.2009.30
   Ma L, 2018, IEEE INT CONF AUTOM, P120, DOI 10.1145/3238147.3238202
   McKeeman William M., 1998, DIGIT TECH J, V10, P100
   Odena A, 2019, PR MACH LEARN RES, V97
   Ofenbeck G, 2016, SCALA'16: PROCEEDINGS OF THE 2016 7TH ACM SIGPLAN SYMPOSIUM ON SCALA, P21, DOI 10.1145/2998392.2998397
   Owens Scott., ESOP/ETAPS' 08, P1, DOI DOI 10.1007/978-3-540-78739-6_1
   Park D, 2015, ACM SIGPLAN NOTICES, V50, P346, DOI [10.1145/2813885.2737991, 10.1145/2737924.2737991]
   Park J, 2022, PROCEEDINGS OF THE 30TH ACM JOINT MEETING EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, ESEC/FSE 2022, P1022, DOI 10.1145/3540250.3549097
   Park J, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P606, DOI 10.1109/ASE51524.2021.9678781
   Park J, 2021, PROC INT CONF SOFTW, P13, DOI 10.1109/ICSE43902.2021.00015
   Park J, 2020, IEEE INT CONF AUTOM, P647, DOI 10.1145/3324884.3416632
   Park J, 2017, PROC IEEE ACM INT C, P59, DOI 10.1109/ICSE-C.2017.4
   Park S, 2020, P IEEE S SECUR PRIV, P1628, DOI 10.1109/SP40000.2020.00067
   Pei KX, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P1, DOI 10.1145/3132747.3132785
   Ramananandro Tahina, 2012, P 39 ANN ACM SIGPLAN, DOI [10.1145/2103656.2103718, DOI 10.1145/2103656.2103718]
   Rosu G, 2010, J LOGIC ALGEBR PROGR, V79, P397, DOI 10.1016/j.jlap.2010.03.012
   Santos JF, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290379
   Santos JF, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158138
   Schäfer M, 2013, ACM SIGPLAN NOTICES, V48, P165, DOI 10.1145/2499370.2462168
   Sewell P, 2010, J FUNCT PROGRAM, V20, P71, DOI 10.1017/S0956796809990293
   Sun YC, 2018, IEEE INT CONF AUTOM, P109, DOI 10.1145/3238147.3238172
   Dinh ST, 2021, 28TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2021), DOI 10.14722/ndss.2021.24224
   Tu Haoxin, 2022, IEEE T RELIAB, P1, DOI [10.1109/TR.2022.3171220, DOI 10.1109/TR.2022.3171220]
   Utting M., 2010, Practical model-based testing: a tools approach
   Veggalam S, 2016, LECT NOTES COMPUT SC, V9878, P581, DOI 10.1007/978-3-319-45744-4_29
   Wang JJ, 2019, PROC INT CONF SOFTW, P724, DOI 10.1109/ICSE.2019.00081
   Wang WE, 1997, EIGHTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P264, DOI 10.1109/ISSRE.1997.630875
   Xie XF, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P146, DOI 10.1145/3293882.3330579
   XMLTestSuite, 2011, EXTENSIBLE MARKUP LA
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Ye GX, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P435, DOI 10.1145/3453483.3454054
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Zalewski Michal, 2007, American fuzzy lop
NR 58
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 126
DI 10.1145/3591240
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900022
OA gold
DA 2024-07-18
ER

PT J
AU Yamazaki, T
   Nakamaru, T
   Shioya, R
   Ugawa, T
   Chiba, S
AF Yamazaki, Tetsuro
   Nakamaru, Tomoki
   Shioya, Ryota
   Ugawa, Tomoharu
   Chiba, Shigeru
TI Collecting Cyclic Garbage across Foreign Function Interfaces
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE garbage collection; memory management; FFI
AB A growing number of libraries written in managed languages, such as Python and JavaScript, are bringing about new demand for a foreign language interface (FFI) between two managed languages. Such an FFI allows a host-language program to seamlessly call a library function written in a foreign language and exchange objects. It is often implemented by a user-level library but such implementation cannot reclaim cyclic garbage, or a group of objects with circular references, across the language boundary. This paper proposes Refgraph GC, which enables FFI implementation that can reclaim cyclic garbage. Refgraph GC coordinates the garbage collectors of two languages and it needs to modify the managed runtime of one language only. It does not modify that of the other language. This paper discusses the soundness and completeness of the proposed algorithm and also shows the results of the experiments with our implementation of FFI with Refgraph GC. This FFI allows a Ruby program to access a JavaScript library.
C1 [Yamazaki, Tetsuro; Shioya, Ryota; Ugawa, Tomoharu; Chiba, Shigeru] Univ Tokyo, Grad Sch Info Sci & Tech, Tokyo, Japan.
   [Nakamaru, Tomoki] Univ Tokyo, Grad Sch Arts & Sci, Tokyo, Japan.
C3 University of Tokyo; University of Tokyo
RP Yamazaki, T (corresponding author), Univ Tokyo, Grad Sch Info Sci & Tech, Tokyo, Japan.
EM yamazaki@csg.ci.i.u-tokyo.ac.jp; nakamaru@graco.c.u-tokyo.ac.jp;
   shioya@ci.i.u-tokyo.ac.jp; ugawa@ci.i.u-tokyo.ac.jp; chiba@acm.org
OI Chiba, Shigeru/0000-0002-1058-5941; Shioya, Ryota/0000-0002-9309-5875;
   Ugawa, Tomoharu/0000-0002-3849-8639
FU JSPS KAKENHI [JP20H00578]
FX This work is partly supported by the JSPS KAKENHI Grant Number
   JP20H00578.
CR Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7811907
   Bacon D. F., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P207
   Barrett Carl Friedrich, 2016, 30 EUR C OBJ OR PROG, DOI [10.4230/LIPIcs.ECOOP.2016.3, DOI 10.4230/LIPICS.ECOOP.2016.3]
   BEVAN DI, 1987, LECT NOTES COMPUT SC, V259, P176
   BIRRELL AD, 1984, ACM T COMPUT SYST, V2, P39, DOI 10.1145/2080.357392
   Brandt SR, 2018, PROCEEDINGS OF THE 2018 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT (ISMM'18), P29, DOI 10.1145/3210563.3210572
   Chiba S., 1993, ECOOP '93 - Object-Oriented Programming. 7th European Conference Proceedings, P482
   COLLINS GE, 1960, COMMUN ACM, V3, P655, DOI 10.1145/367487.367501
   DECOUCHANT D, 1986, SIGPLAN NOTICES, V21, P444, DOI 10.1145/960112.28743
   Degenbaev U, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276521
   Degenbaev U, 2016, ACM SIGPLAN NOTICES, V51, P570, DOI [10.1145/2980983.2908106, 10.1145/2908080.2908106]
   Donnelly Kevin., 2006, ISMM '06 Proceedings of the 5th international symposium on Memory management, P126, DOI DOI 10.1145/1133956.1133974
   FOOTE B, 1989, SIGPLAN NOTICES, V24, P327, DOI 10.1145/74878.74911
   Grimmer M, 2016, ACM SIGPLAN NOTICES, V51, P78, DOI [10.1145/2816707.2816714, 10.1145/2936313.2816714]
   Hudson R. L., 1992, Memory Management. International Workshop IWMM 92. Proceedings, P388, DOI 10.1007/BFb0017203
   Jones R., 2011, GARBAGE COLLECTION H
   Kawachiya Kiyokuni, 2012, P 2012 ACM SIGPLAN X, DOI [10.1145/2246056.2246061, DOI 10.1145/2246056.2246061]
   LANG B, 1987, SIGPLAN NOTICES, V22, P253, DOI 10.1145/960114.29677
   Maes P., 1987, SIGPLAN Notices, V22, P147, DOI 10.1145/38807.38821
   Marr Stefan, 2017, ACM SIGPLAN Notices, V52, P120, DOI 10.1145/3093334.2989232
   MCCARTHY J, 1960, COMMUN ACM, V3, P184, DOI 10.1145/367177.367199
   MDN, 2020, FINALIZATIONREGISTRY
   Meyerovich LA, 2013, ACM SIGPLAN NOTICES, V48, P1, DOI 10.1145/2509136.2509515
   Sasada K, 2019, PROCEEDINGS OF THE 2019 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT (ISMM '19), P115, DOI 10.1145/3315573.3329986
   Shapiro M., 1986, 6th International Conference on Distributed Computing Systems Proceedings (Cat. No. 86CH2293-9), P198
   Smith B. C., 1984, P 11 ACM SIGACT SIGP, P23, DOI [DOI 10.1145/800017.800513, 10.1145/800017.800513]
   Ugawa T, 2014, ACM SIGPLAN NOTICES, V49, P59, DOI [10.1145/2775049.2602991, 10.1145/2602988.2602991]
   Ungar D., 1984, SIGPLAN Notices, V19, P157, DOI 10.1145/390011.808261
   WATSON P, 1987, LECT NOTES COMPUT SC, V259, P432
   Würthinger T, 2017, ACM SIGPLAN NOTICES, V52, P662, DOI [10.1145/3062341.3062381, 10.1145/3140587.3062381]
NR 30
TC 0
Z9 0
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 130
DI 10.1145/3591244
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900026
OA gold
DA 2024-07-18
ER

PT J
AU Gheri, L
   Yoshida, N
AF Gheri, Lorenzo
   Yoshida, Nobuko
TI Hybrid Multiparty Session Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE multiparty session types; compositionality; protocol design; concurrency
ID MACHINES
AB Multiparty session types (MPST) are a speci similar to cation and veri similar to cation framework for distributed messagepassing systems. The communication protocol of the system is speci similar to ed as a global type, from which a collection of local types (local process implementations) is obtained by endpoint projection. A global type is a single disciplining entity for the whole system, speci similar to ed by one designer that has full knowledge of the communication protocol. On the other hand, distributed systems are often described in terms of their components : a di similar to erent designer is in charge of providing a subprotocol for each component. The problem of modular speci similar to cation of global protocols has been addressed in the literature, but the state of the art focuses only on dual input/output compatibility. Our work overcomes this limitation. We propose the similar to rst MPST theory of multiparty compositionality for distributed protocol speci similar to cation that is semantics-preserving, allows the composition of two or more components, and retains full MPST expressiveness. We introduce hybrid types for describing subprotocols interacting with each other, de similar to ne a novel compatibility relation, explicitly describe an algorithm for composing multiple subprotocols into a well-formed global type, and prove that compositionality preserves projection, thus retaining semantic guarantees, such as liveness and deadlock freedom. Finally, we test our work against real-world case studies and we smoothly extend our novel compatibility to MPST with delegation and explicit connections.
C1 [Gheri, Lorenzo; Yoshida, Nobuko] Univ Oxford, Oxford, England.
C3 University of Oxford
RP Gheri, L (corresponding author), Univ Oxford, Oxford, England.
EM lorenzo.gheri@cs.ox.ac.uk; nobuko.yoshida@cs.ox.ac.uk
RI Yoshida, Nobuko/AAL-6082-2020
OI Yoshida, Nobuko/0000-0002-3925-8557; Gheri, Lorenzo/0000-0002-3191-7722
FU UKRI/EPSRC [EP/T006544/2, EP/K011715/1, EP/K034413/1, EP/L00058X/1,
   EP/N027833/2, EP/N028201/1, EP/T014709/2, EP/V000462/1, EP/X015955/1];
   EU HORIZON EUROPE Research and Innovation Programme [101093006];
   NCSC/EPSRC VeTSS; Horizon Europe - Pillar II [101093006] Funding Source:
   Horizon Europe - Pillar II
FX We thank the Reviewers for their careful reviews and suggestions. We
   thank Franco Barbanera, Mariangiola Dezani-Ciancaglini, Francisco
   Ferreira, and Franco Raimondi for the in-depth conversations and useful
   comments on the preliminary versions of the paper. This work is
   supported by UKRI/EPSRC, references: EP/T006544/2, EP/K011715/1,
   EP/K034413/1, EP/L00058X/1, EP/N027833/2, EP/N028201/1, EP/T014709/2,
   EP/V000462/1, EP/X015955/1, and NCSC/EPSRC VeTSS, and EU HORIZON EUROPE
   Research and Innovation Programme, grant agreement 101093006 (TaRDIS).
CR AGHA G, 1990, COMMUN ACM, V33, P125, DOI 10.1145/83880.84528
   Barbanera Franco, 2020, Leveraging Applications of Formal Methods, Verification and Validation. Verification. Principles. 9th International Symposium on Leveraging Applications of Formal Methods, ISoLA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12476), P39, DOI 10.1007/978-3-030-61362-4_3
   Barbanera Franco, 2020, Coordination Models and Languages. 22nd IFIP WG 6.1 International Conference, COORDINATION 2020. Held as Part of the 15th International Federated Conference on Distributed Computing Techniques, DisCoTec 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12134), P86, DOI 10.1007/978-3-030-50029-0_6
   Barbanera F, 2021, J LOG ALGEBR METHODS, V119, DOI 10.1016/j.jlamp.2020.100620
   Barbanera F, 2019, J LOG ALGEBR METHODS, V109, DOI 10.1016/j.jlamp.2019.07.004
   Barbanera F, 2018, ELECTRON P THEOR COM, P4, DOI 10.4204/EPTCS.279.4
   Bettini L, 2008, LECT NOTES COMPUT SC, V5201, P418, DOI 10.1007/978-3-540-85361-9_33
   Bocchi Laura, 2014, CONCUR 2014 - Concurrency Theory. 25th International Conference, CONCUR 2014. Proceedings: LNCS 8704, P419, DOI 10.1007/978-3-662-44584-6_29
   Caires L, 2009, LECT NOTES COMPUT SC, V5502, P285, DOI 10.1007/978-3-642-00590-9_21
   Carbone M, 2013, ACM SIGPLAN NOTICES, V48, P263, DOI 10.1145/2480359.2429101
   Carbone Marco, 2018, ARXIV, DOI [10.48550/ARXIV.1801.08107, DOI 10.48550/ARXIV.1801.08107]
   Castellani I, 2020, THEOR COMPUT SCI, V807, P128, DOI 10.1016/j.tcs.2019.09.027
   Castellani I, 2019, ACTA INFORM, V56, P553, DOI 10.1007/s00236-019-00332-y
   Castro David, 2019, Proceedings of the ACM on Programming Languages, V3, DOI 10.1145/3290342
   Castro-Perez D, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P237, DOI 10.1145/3453483.3454041
   Castro-Perez D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428223
   Cledou Guillermina, 2022, 36 EUROPEAN C OBJECT, V222
   Coppo M, 2015, LECT NOTES COMPUT SC, V9104, P146, DOI 10.1007/978-3-319-18941-3_4
   Cruz-Filipe Luis, 2021, P 12 INT C INTERACTI, DOI [DOI 10.4230/LIPICS.ITP.2021.15, 10.4230/LIPIcs., DOI 10.4230/LIPICS]
   Demangeon R, 2015, FORM METHOD SYST DES, V46, P197, DOI 10.1007/s10703-014-0218-8
   Demangeon R, 2012, LECT NOTES COMPUT SC, V7454, P272, DOI 10.1007/978-3-642-32940-1_20
   Deniélou PM, 2013, LECT NOTES COMPUT SC, V7966, P174, DOI 10.1007/978-3-642-39212-2_18
   Ethereum, 2022, INTRO SMART CONTR
   Gheri L, 2023, Arxiv, DOI [arXiv:2302.01979, 10.48550/ARXIV.2302.01979, DOI 10.48550/ARXIV.2302.01979]
   Gheri Lorenzo, 2022, 36 EUROPEAN C OBJECT, V222
   Hardt Dick, 2012, RFC 6749, DOI [DOI 10.17487/RFC6749, 10.17487/rfc6749]
   Harvey Paul, 2021, ECOOP LIPICS, V10, P1
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Honda K, 2011, LECT NOTES COMPUT SC, V6536, P55, DOI 10.1007/978-3-642-19056-8_4
   Horne R., 2020, LIPIcs, V171, P12
   Hu R, 2008, LECT NOTES COMPUT SC, V5142, P516, DOI 10.1007/978-3-540-70592-5_22
   Hu R, 2017, LECT NOTES COMPUT SC, V10202, P116, DOI 10.1007/978-3-662-54494-5_7
   Hu R, 2016, LECT NOTES COMPUT SC, V9633, P401, DOI 10.1007/978-3-662-49665-7_24
   Imai Keigo, 2020, 34 EUROPEAN C OBJECT, V9, P1
   Jacobs J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547638
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Lagaillardie Nicolas, 2022, 36 EUROPEAN C OBJECT, V4
   Lange J, 2019, LECT NOTES COMPUT SC, V11561, P97, DOI 10.1007/978-3-030-25540-4_6
   Lange J, 2015, ACM SIGPLAN NOTICES, V50, P221, DOI [10.1145/2775051.2676964, 10.1145/2676726.2676964]
   Lange J, 2012, LECT NOTES COMPUT SC, V7454, P225, DOI 10.1007/978-3-642-32940-1_17
   Massachusetts Institute of Technology MIT, 2022, Kerberos The Network Authentication Protocol
   Miu Anson, 2021, CC 2021: Proceedings of the 30th ACM SIGPLAN International Conference on Compiler Construction, P94, DOI 10.1145/3446804.3446854
   Montesi Fabrizio, 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P425, DOI 10.1007/978-3-642-40184-8_30
   Montesi F., 2013, THESIS
   Neykova R, 2018, CC'18: PROCEEDINGS OF THE 27TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P128, DOI 10.1145/3178372.3179495
   Neykova Rumyana, 2019, LNCS, V11665, P236, DOI [10.1007/978-3-030-21485-2_14, DOI 10.1007/978-3-030-21485-2_14]
   Object Management Group (OMG), 2022, BUSINESS PROCESS MOD
   Padovani L, 2014, LECT NOTES COMPUT SC, V8459, P147, DOI 10.1007/978-3-662-43376-8_10
   Savanovic Z, 2020, ELECTRON P THEOR COM, P3, DOI 10.4204/EPTCS.324.3
   Scalas A., 2017, 31stEuropeanConferenceonObject-OrientedProgramming, ECOOP 2017, June 19-23, 2017, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.24, 10.4230/LIPICS.ECOOP.2017.24, 10.4230/LIPIcs.ECOOP.2017.24]
   Scalas A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P502, DOI 10.1145/3314221.3322484
   Scalas A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290343
   Scalas Alceste, 2016, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, DOI [DOI 10.4230/LIPICS, DOI 10.4230/LIPICS.ECOOP.2016.21]
   Stolze C, 2021, LECT NOTES COMPUT SC, V13077, P44, DOI 10.1007/978-3-030-90636-8_3
   Tabareau Nicolas, 2014, MODULARITY, P193, DOI DOI 10.1145/2577080.2577085
   UNGAR D, 1987, SIGPLAN NOTICES, V22, P227, DOI 10.1145/38807.38828
   van Glabbeek R, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470531
   Viering M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485501
   Yonezawa A, 1986, OBJECT ORIENTED CONC
   Yoshida N., 2014, Trustworthy Global Computing. Ed. by, V8358, P22, DOI [10.1007/978-3-319-05119-2_3, DOI 10.1007/978-3-319-05119-2, 10.1007/978-3-319-05119-2]
   Yoshida N, 2021, LECT NOTES COMPUT SC, V12867, P18, DOI 10.1007/978-3-030-86593-1_2
   Yoshida N, 2020, LECT NOTES COMPUT SC, V11969, P73, DOI 10.1007/978-3-030-36987-3_5
   Zhou FY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428216
NR 65
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586031
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600006
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Chappe, N
   He, P
   Henrio, L
   Zakowski, Y
   Zdancewic, S
AF Chappe, Nicolas
   He, Paul
   Henrio, Ludovic
   Zakowski, Yannick
   Zdancewic, Steve
TI Choice Trees
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Nondeterminism; Formal Semantics; Interaction Trees; Concurrency
ID SEMANTICS
AB This paper introduces Choice Trees (CTrees), a monad for modeling nondeterministic, recursive, and impure programs in Coq. Inspired by Xia et al.'s ITrees, this novel data structure embeds computations into coinductive trees with three kind of nodes: external events, and two variants of nondeterministic branching. This apparent redundancy allows us to provide shallow embedding of denotational models with internal choice in the style of ccs, while recovering an inductive LTS view of the computation. CTrees inherit a vast collection of bisimulation and refinement tools, with respect to which we establish a rich equational theory. We connect CTrees to the ITrees infrastructure by showing how a monad morphism embedding the former into the latter permits to use CTrees to implement nondeterministic effects. We demonstrate the utility of CTrees by using them to model concurrency semantics in two case studies: ccs and cooperative multithreading.
C1 [Chappe, Nicolas; Henrio, Ludovic; Zakowski, Yannick] Univ Lyon, EnsL, UCBL, CNRS,Inria,LIP, F-69342 Lyon 07, France.
   [He, Paul; Zdancewic, Steve] Univ Penn, Philadelphia, PA 19104 USA.
C3 Ecole Normale Superieure de Lyon (ENS de LYON); Centre National de la
   Recherche Scientifique (CNRS); Inria; University of Pennsylvania
RP Chappe, N (corresponding author), Univ Lyon, EnsL, UCBL, CNRS,Inria,LIP, F-69342 Lyon 07, France.
EM chappe@ens-lyon.fr; paulhe@cis.upenn.edu; ludovic.henrio@cnrs.fr;
   yannick.zakowski@inria.fr; stevez@cis.upenn.edu
RI Zdancewic, Steve/JXL-6845-2024
OI Henrio, Ludovic/0000-0001-7137-3523; Zakowski,
   Yannick/0000-0003-4585-6470; Zdancewic, Steve/0000-0002-3516-1512
CR Abadi M, 2010, LOG METH COMPUT SCI, V6, DOI 10.2168/LMCS-6(4:2)2010
   Abramsky S., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P431, DOI 10.1109/LICS.1999.782638
   Alglave J, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3458926
   Alglave J, 2014, ACM SIGPLAN NOTICES, V49, P40, DOI [10.1145/2594291.2594347, 10.1145/2666356.2594347]
   Altenkirch T., 2017, LNCS, P534, DOI DOI 10.1007/978-3-662-54458-7_31
   Bergstra J.A., 2001, HDB PROCESS ALGEBRA, DOI [10.1016/B978-044482830-9/50038-2, DOI 10.1016/B978-044482830-9/50038-2]
   Brandauer S, 2015, LECT NOTES COMPUT SC, V9104, P1, DOI 10.1007/978-3-319-18941-3_1
   Brookes S., 2002, CONCUR 2002 - Concurrency Theory. 13th International Conference Proceedings (Lecture Notes in Computer Science Vol.2421), P466
   Capretta V, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:1)2005
   Castellan S, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(3:35)2017
   Chappe Nicolas, 2022, Zenodo, DOI 10.5281/ZENODO.7227966
   Chappe Nicolas., 2022, Choice trees: Representing nondeterministic, recursive, and impure programs in coq
   Crafa S, 2012, LECT NOTES COMPUT SC, V7213, P225, DOI 10.1007/978-3-642-28729-9_15
   Cristescu I, 2013, IEEE S LOG, P388, DOI 10.1109/LICS.2013.45
   Din C.C., 2022, arXiv
   Din CC, 2017, LECT NOTES ARTIF INT, V10501, P22, DOI 10.1007/978-3-319-66902-1_2
   Foster Simon, 2021, SCHLOSS DAGSTUHL LEI, V20, P1
   Harper R., 2016, Practical Foundations for Programming Languages, DOI DOI 10.1017/CBO9781316576892
   Henrio L, 2016, LECT NOTES COMPUT SC, V9688, P175, DOI 10.1007/978-3-319-39570-8_12
   Hur CK, 2013, ACM SIGPLAN NOTICES, V48, P193, DOI 10.1145/2480359.2429093
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Koenig J, 2020, IEEE S LOG, P633, DOI 10.1145/3373718.3394799
   Lampropoulos Leonidas, 2018, ELECT TXB
   Lee SH, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P362, DOI 10.1145/3385412.3386010
   Lenglet Serguei, 2018, P 7 ACM SIGPLAN INT, P252, DOI [10.1145/3167083, DOI 10.1145/3167083]
   Lesani M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527324
   Letan T, 2018, LECT NOTES COMPUT SC, V10951, P338, DOI 10.1007/978-3-319-95582-7_20
   Maillard K, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371072
   Melliès PA, 2007, LECT NOTES COMPUT SC, V4703, P395
   Meyer A.R., 1988, POPL, P229
   Milner R., 1989, Communication and concurrency
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Pons D, 2007, LECT NOTES COMPUT SC, V4807, P351
   Pous D, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P307, DOI 10.1145/2933575.2934564
   Pous Damien, 2022, COQ COINDUCTION LIB
   Rideau S, 2011, IEEE S LOG, P409, DOI 10.1109/LICS.2011.13
   Sangiorgi D., 1998, Mathematical Structures in Computer Science, V8, P447, DOI 10.1017/S0960129598002527
   Sangiorgi D., 2012, Advanced Topics in Bisimulation and Coinduction
   Sangiorgi Davide, 2001, C CALCULUS, V1
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Smyth M.B., 1976, MATH FDN COMPUTER SC, V4, DOI [10.1007/3-540-07854-1_226, DOI 10.1007/3-540-07854-1_226]
   The Coq Development Team, 2022, Zenodo
   Vale AO, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498703
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Yoon I, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547630
   Zakowski Y, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473572
   Zakowski Y, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P71, DOI 10.1145/3372885.3373813
NR 49
TC 5
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571254
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500061
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Susag, Z
   Lahiri, S
   Hsu, J
   Roy, S
AF Susag, Zachary
   Lahiri, Sumit
   Hsu, Justin
   Roy, Subhajit
TI Symbolic Execution for Randomized Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Probabilistic programming languages; symbolic execution; automated
   software verification
ID STATIC ANALYSIS
AB We propose a symbolic execution method for programs that can draw random samples. In contrast to existing work, our method can verify randomized programs with unknown inputs and can prove probabilistic properties that universally quantify over all possible inputs. Our technique augments standard symbolic execution with a new class of probabilistic symbolic variables, which represent the results of random draws, and computes symbolic expressions representing the probability of taking individual paths. We implement our method on top of the KLEE symbolic execution engine alongside multiple optimizations and use it to prove properties about probabilities and expected values for a range of challenging case studies written in C++, including Freivalds' algorithm, randomized quicksort, and a randomized property-testing algorithm for monotonicity. We evaluate our method against Psi, an exact probabilistic symbolic inference engine, and Storm, a probabilistic model checker, and show that our method significantly outperforms both tools.
C1 [Susag, Zachary; Hsu, Justin] Cornell Univ, Ithaca, NY 14853 USA.
   [Lahiri, Sumit; Roy, Subhajit] IIT Kanpur, Kanpur, India.
C3 Cornell University; Indian Institute of Technology System (IIT System);
   Indian Institute of Technology (IIT) - Kanpur
RP Susag, Z (corresponding author), Cornell Univ, Ithaca, NY 14853 USA.
EM zjs@cs.cornell.edu; sumitl@cse.iitk.ac.in; justin@cs.cornell.edu;
   subhajit@cse.iitk.ac.in
OI Hsu, Justin/0000-0002-8953-7060
FU National Science Foundation [1943130]; University of Wisconsins-Madison;
   Cornell University; TCS Research via the TCS Research Scholar Fellowship
   program
FX We thank the anonymous reviewers for their detailed feedback. Thiswork
   benefited from discussions with Dexter Kozen, Adrian Sampson, and
   Cornell PLDG. This work was partially supported by the National Science
   Foundation (Grant No. 1943130), the University of Wisconsins-Madison,
   and Cornell University. The second author is fully supported and the
   fourth author is partially supported by TCS Research via the TCS
   Research Scholar Fellowship program.
CR Albarghouthi A, 2018, Arxiv, DOI [arXiv:1804.04052, 10.1007/978-3-319-96145-3_18, DOI 10.1007/978-3-319-96145-3_18]
   Albarghouthi A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133904
   Albarghouthi A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158146
   [Anonymous], 2008, P OSDI
   Baier C, 1997, LECT NOTES COMPUT SC, V1256, P430
   Baier C, 2018, HDB MODEL CHECKING, P963, DOI [DOI 10.1007/978-3-319-10575-8, DOI 10.1007/978-3-319-10575-828, DOI 10.1007/978-3-319-10575-8_28]
   Bao JL, 2022, LECT NOTES COMPUT SC, V13371, P33, DOI 10.1007/978-3-031-13185-1_3
   Barrett C., 2016, The Satisfiability Modulo Theories Library (SMT-LIB)
   Barthe G, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434289
   Barthe Gilles, 2020, Foundations of Probabilistic Programming Languages, P145, DOI [10.1017/9781108770750.006, DOI 10.1017/9781108770750.006]
   Bartocci Ezio, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12078), P492, DOI 10.1007/978-3-030-45190-5_28
   Bartocci E, 2019, LECT NOTES COMPUT SC, V11781, P255, DOI 10.1007/978-3-030-31784-3_15
   Bessey A, 2010, COMMUN ACM, V53, P66, DOI 10.1145/1646353.1646374
   BLOOM BH, 1970, COMMUN ACM, V13, P422, DOI 10.1145/362686.362692
   Borges M, 2014, ACM SIGPLAN NOTICES, V49, P123, DOI [10.1145/2594291.2594329, 10.1145/2666356.2594329]
   Carbin M, 2012, ACM SIGPLAN NOTICES, V47, P169, DOI 10.1145/2345156.2254086
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chatterjee K, 2016, ACM SIGPLAN NOTICES, V51, P327, DOI 10.1145/2914770.2837639
   Chen BH, 2016, PROC INT CONF SOFTW, P49, DOI 10.1145/2884781.2884794
   Claret Guillaume., 2013, Foundations of Software Engineering, P92, DOI DOI 10.1145/2491411.2491423
   Cormode G, 2004, LECT NOTES COMPUT SC, V2976, P29, DOI 10.1007/978-3-540-24698-5_7
   Cousot P, 2012, LECT NOTES COMPUT SC, V7211, P169, DOI 10.1007/978-3-642-28869-2_9
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Farina GP, 2021, LECT NOTES COMPUT SC, V12648, P207, DOI 10.1007/978-3-030-72019-3_8
   Farina GP, 2019, PROCEEDINGS OF THE 21ST INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2019), DOI 10.1145/3354166.3354175
   Filieri A, 2015, IEEE INT CONF AUTOM, P703, DOI 10.1109/ASE.2015.78
   Filieri A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P622, DOI 10.1109/ICSE.2013.6606608
   Freivalds R., 1977, IFIP C
   Gehr T, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P883, DOI 10.1145/3385412.3386006
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   Geldenhuys Jaco, 2012, P 2012 INT S SOFTWAR, P166, DOI DOI 10.1145/2338965.2336773
   Goldreich O., 2017, Introduction to Property Testing, DOI DOI 10.1017/9781108135252
   Gretz Friedrich, 2013, Quantitative Evaluation of Systems. 10th International Conference, QEST 2013. Proceedings: LNCS 8054, P193, DOI 10.1007/978-3-642-40196-1_17
   Gretz F, 2014, PERFORM EVALUATION, V73, P110, DOI 10.1016/j.peva.2013.11.004
   Hensel C, 2022, INT J SOFTW TOOLS TE, V24, P589, DOI 10.1007/s10009-021-00633-z
   Hoare C.A.R., 1961, Communications of the ACM, V4, P321, DOI [DOI 10.1145/366622.366647, DOI 10.1145/366622.366644]
   Holtzen S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428208
   Joshi K, 2019, PROC INT CONF SOFTW, P608, DOI 10.1109/ICSE.2019.00071
   Kang Q, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P286, DOI 10.1145/3445814.3446764
   Kapus T, 2019, LECT NOTES COMPUT SC, V11823, P41, DOI 10.1007/978-3-030-31157-5_3
   Kiezun A, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2377656.2377662
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Moosbrugger M, 2021, LECT NOTES COMPUT SC, V12648, P491, DOI 10.1007/978-3-030-72019-3_18
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   Sampson A, 2014, ACM SIGPLAN NOTICES, V49, P112, DOI [10.1145/2666356.2594294, 10.1145/2594291.2594294]
   Sankaranarayanan S, 2013, ACM SIGPLAN NOTICES, V48, P447, DOI 10.1145/2499370.2462179
   Sasnauskas R, 2011, INT CON DISTR COMP S, P333, DOI 10.1109/ICDCS.2011.28
   Sasnauskas R, 2010, PROCEEDINGS OF THE 9TH ACM/IEEE INTERNATIONAL CONFERENCE ON INFORMATION PROCESSING IN SENSOR NETWORKS, P186, DOI 10.1145/1791212.1791235
   SELVIN S, 1975, AM STAT, V29, P67
   Smith C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290352
   Susag Z, 2022, Arxiv, DOI [arXiv:2209.08046, 10.48550/arXiv.2209.08046, DOI 10.48550/ARXIV.2209.08046]
   Susag Zachary, 2022, Artifact for Symbolic Execution for Randomized Programs, DOI [10.5281/zenodo.7061819, DOI 10.5281/ZENODO.7061819]
   VITTER JS, 1985, ACM T MATH SOFTWARE, V11, P37, DOI 10.1145/3147.3165
   Wang D, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P559, DOI 10.1145/3453483.3454062
   Wang D, 2018, ACM SIGPLAN NOTICES, V53, P513, DOI 10.1145/3192366.3192408
NR 56
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 181
DI 10.1145/3563344
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200058
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Maillard, K
   Lennon-Bertrand, M
   Tabareau, N
   Tanter, É
AF Maillard, Kenji
   Lennon-Bertrand, Meven
   Tabareau, Nicolas
   Tanter, Eric
TI A Reasonably Gradual Type Theory
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Gradual typing; proof assistants; dependent types
AB Gradualizing the Calculus of Inductive Constructions (CIC) involves dealing with subtle tensions between normalization, graduality, and conservativity with respect to CIC. Recently, GCIC has been proposed as a parametrized gradual type theory that admits three variants, each sacrificing one of these properties. For devising a gradual proof assistant based on CIC, normalization and conservativity with respect to CIC are key, but the tension with graduality needs to be addressed. Additionally, several challenges remain: (1) The presence of two wildcard terms at any type-the error and unknown terms-enables trivial proofs of any theorem, jeopardizing the use of a gradual type theory in a proof assistant; (2) Supporting general indexed inductive families, most prominently equality, is an open problem; (3) Theoretical accounts of gradual typing and graduality so far do not support handling type mismatches detected during reduction; (4) Precision and graduality are external notions not amenable to reasoning within a gradual type theory. All these issues manifest primally in CastCIC, the cast calculus used to define GCIC. In this work, we present an extension of CastCIC called GRIP. GRIP is a reasonably gradual type theory that addresses the issues above, featuring internal precision and general exception handling. GRIP features an impure (gradual) sort of types inhabited by errors and unknown terms, and a pure (non-gradual) sort of strict propositions for consistent reasoning about gradual terms. By adopting a novel interpretation of the unknown term that carefully accounts for universe levels, GRIP satisfies graduality for a large and well-defined class of terms, in addition to being normalizing and a conservative extension of CIC. Internal precision supports reasoning about graduality within GRIP itself, for instance to characterize gradual exception-handling terms, and supports gradual subset types. We develop the metatheory of GRIP using a model formalized in Coq, and provide a prototype implementation of GRIP in Agda.
C1 [Maillard, Kenji; Lennon-Bertrand, Meven; Tabareau, Nicolas] INRIA, Gallinette Project, Nantes, France.
   [Tanter, Eric] Univ Chile, PLEIAD Lab, Comp Sci Dept DCC, Santiago, Chile.
C3 Inria; Universidad de Chile
RP Maillard, K (corresponding author), INRIA, Gallinette Project, Nantes, France.
EM kenji.maillard@inria.fr; meven.lennon-bertrand@inria.fr;
   nicolas.tabareau@inria.fr; etanter@dcc.uchile.cl
RI ; Tanter, Eric/A-7955-2008
OI Lennon-Bertrand, Meven/0000-0002-7079-8826; Tanter,
   Eric/0000-0002-7359-890X; tabareau, nicolas/0000-0003-3366-2273
FU CONICYT FONDECYT Regular Project [1190058]; Inria Equipe Associee GECO
FX *This work is partially funded by CONICYT FONDECYT Regular Project
   1190058 and Inria Equipe Associee GECO.
CR Eisenberg RA, 2017, Arxiv, DOI arXiv:1610.07978
   Abel A, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:29)2012
   Altenkirch T, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S095679681500009X
   Altenkirch T, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P57, DOI 10.1145/1292597.1292608
   Bernardy JP, 2012, J FUNCT PROGRAM, V22, P107, DOI 10.1017/S0956796812000056
   Bodik Rastislav, 2016, P 43 ACM SIGPLANSIGA, DOI [10.1145/2837614, DOI 10.1145/2837614]
   Boulier S, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P182, DOI 10.1145/3018610.3018620
   Casinghino C, 2014, ACM SIGPLAN NOTICES, V49, P33, DOI 10.1145/2535838.2535883
   Claessen Koen., 2000, Proceedings of the fifth ACM SIGPLAN international conference on Functional programming - ICFP'00, P268, DOI [10.1145/351240.351266, DOI 10.1145/351240.351266]
   Cohen C, 2017, J APPL LOG-IFCOLOG, V4, P3127
   Coq Development Team, 2020, COQ PROOF ASSISTANT
   Dagand PÉ, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000011
   Eremondi J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547627
   Eremondi J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341692
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Gilbert G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290316
   Hermanns Holger, 2020, LICS 20 35 ANN ACM I, DOI [10.1145/3373718, DOI 10.1145/3373718]
   Hugunin Jasper, 2020, LIPICS, V188, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Kimmell Garrin., 2012, PLPV 12 P 6 WORKSHOP, DOI DOI 10.1145/2103776.2103780
   Knowles K, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667051
   Lawvere Bill, 1970, P AMS S PURE MATH, V17, P1
   Lehmann N, 2017, ACM SIGPLAN NOTICES, V52, P775, DOI 10.1145/3093333.3009856
   Lennon-Bertrand M, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3495528
   Martin-Lof P., 1971, INTUITIONISTIC THEOR
   New Max S., 2018, Proceedings of the ACM on Programming Languages, V2, DOI 10.1145/3236768
   Nikhil Swamy, 2016, BODIK MAJUMDAR 2016, P256, DOI [10.1145/2837614, DOI 10.1145/2837614]
   Osera Peter-Michael., PLPV 12 P 6 WORKSHOP, DOI [DOI 10.1145/2103776.2103779, 10.1145/2103776.2103779.]
   Ou XM, 2004, INT FED INFO PROC, V155, P437
   Pédrot PM, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371126
   Pédrot PM, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341712
   Pédrot PM, 2017, IEEE S LOG, DOI 10.1109/LICS.2017.8005113
   Pedrot Pierre-Marie, 2018, LECT NOTES COMPUTER, V10801, P245, DOI [10.1007/978-3-319-89884-1_9, DOI 10.1007/978-3-319-89884-1_9]
   Pujet L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498693
   Riehl Emily, 2017, Higher Structures, V1, P147, DOI [10.1007/s42001-017-0005-6, DOI 10.1007/S42001-017-0005-6]
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Sattler C, 2020, IEEE S LOG, P807, DOI 10.1145/3373718.3394759
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Siek Jeremy G., 2006, P SCHEM FUNCT PROGR, P81
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P
   Stump Aaron., 2010, P WORKSHOP PARTIALIT, P76, DOI [10.29007/3w36, DOI 10.29007/3W36]
   TAKAHASHI M, 1995, INFORM COMPUT, V118, P120, DOI 10.1006/inco.1995.1057
   Tanter É, 2016, ACM SIGPLAN NOTICES, V51, P26, DOI [10.1145/2816707.2816710, 10.1145/2936313.2816710]
   Vezzosi A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341691
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Weaver Matthew Z., 2020, CONSTRUCTIVE MODEL D, P915, DOI [10.1145/3373718.3394794, DOI 10.1145/3373718.3394794]
   Xi HW, 1998, ACM SIGPLAN NOTICES, V33, P249, DOI 10.1145/277652.277732
NR 46
TC 2
Z9 2
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 124
DI 10.1145/3547655
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000035
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Wang, YT
   Zhang, L
   Shao, Z
   Koenig, J
AF Wang, Yuting
   Zhang, Ling
   Shao, Zhong
   Koenig, Jeremie
TI Verified Compilation of C Programs with a Nominal Memory Model
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Memory Models; Nominal Techniques; Verified Compilation
ID GAME SEMANTICS; ABSTRACTION
AB Memory models play an important role in verified compilation of imperative programming languages. A representative one is the block-based memory model of CompCertDthe state-of-the-art verified C compiler. Despite its success, the abstraction over memory space provided by CompCert's memory model is still primitive and inflexible. In essence, it uses a fixed representation for identifying memory blocks in a global memory space and uses a globally shared state for distinguishing between used and unused blocks. Therefore, any reasoning about memory must work uniformly for the global memory; it is impossible to individually reason about different sub-regions of memory (i.e., the stack and global definitions). This not only incurs unnecessary complexity in compiler verification, but also poses significant difficulty for supporting verified compilation of open or concurrent programs which need to work with contextual memory, as manifested in many previous extensions of CompCert.
   To remove the above limitations, we propose an enhancement to the block-based memory model based on nominal techniques; we call it the nominal memory model. By adopting the key concepts of nominal techniques such as atomic names and supports to model the memory space, we are able to 1) generalize the representation of memory blocks to any types satisfying the properties of atomic names and 2) remove the global constraints for managing memory blocks, enabling flexible memory structures for open and concurrent programs.
   To demonstrate the effectiveness of the nominal memory model, we develop a series of extensions of CompCert based on it. These extensions show that the nominal memory model 1) supports a general framework for verified compilation of C programs, 2) enables intuitive reasoning of compiler transformations on partial memory; and 3) enables modular reasoning about programs working with contextual memory. We also demonstrate that these extensions require limited changes to the original CompCert, making the verification techniques based on the nominal memory model easy to adopt.
C1 [Wang, Yuting; Zhang, Ling] Shanghai Jiao Tong Univ, John Hoperoft Ctr Comp Sci, Shanghai, Peoples R China.
   [Shao, Zhong; Koenig, Jeremie] Yale Univ, New Haven, CT USA.
C3 Shanghai Jiao Tong University; Yale University
RP Wang, YT (corresponding author), Shanghai Jiao Tong Univ, John Hoperoft Ctr Comp Sci, Shanghai, Peoples R China.
EM yuting.wang@sjtu.edu.cn; ling.zhang@sjtu.edu.cn; zhong.shao@yale.edu;
   jeremie.koenig@yale.edu
OI Koenig, Jeremie/0000-0002-3168-5925; Shao, Zhong/0000-0001-8184-7649;
   Zhang, Ling/0000-0001-7190-6983; Wang, Yuting/0000-0003-3990-2418
FU National Natural Science Foundation of China (NSFC) [62002217]; Natural
   Science Foundation of the United States (NSF) [1521523, 1763399,
   2019285, 2118851]; NSF [1521523, 1763399]; Direct For Computer & Info
   Scie & Enginr; Division of Computing and Communication Foundations
   [2118851, 1763399] Funding Source: National Science Foundation
FX We would like to thank the anonymous referees for their helpful feedback
   which improved this paper significantly. This research is based on work
   supported in part by the National Natural Science Foundation of China
   (NSFC) under Grant No. 62002217, and by the Natural Science Foundation
   of the United States (NSF) under Grant No. 1521523, 1763399, 2019285,
   and 2118851. The third author is a co-founder of and has an equity
   interest in CertiK Global Ltd. CertiK has licensed Yale University's
   intellectual property, which is related to the NSF grants 1521523 and
   1763399. Any opinions, findings, and conclusions or recommendations
   expressed in this material are those of the authors and do not
   necessarily reflect the views of the funding agencies.
CR Abramsky S, 2004, IEEE S LOG, P150, DOI 10.1109/LICS.2004.1319609
   Amadio RM, 2014, LECT NOTES COMPUT SC, V8552, P1, DOI 10.1007/978-3-319-12466-7_1
   Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Besson F, 2017, LECT NOTES COMPUT SC, V10499, P81, DOI 10.1007/978-3-319-66107-0_6
   Carbonneaux Q, 2014, ACM SIGPLAN NOTICES, V49, P270, DOI [10.1145/2594291.2594301, 10.1145/2666356.2594301]
   Gabbay M. J., 2002, Formal Aspects of Computing, V13, P341, DOI 10.1007/s001650200016
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Jiang HR, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P111, DOI 10.1145/3314221.3314595
   Kang J, 2016, ACM SIGPLAN NOTICES, V51, P178, DOI 10.1145/2914770.2837642
   Koenig J, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1095, DOI 10.1145/3453483.3454097
   Laird J, 2006, LECT NOTES COMPUT SC, V4337, P417
   Laird J, 2004, LECT NOTES COMPUT SC, V2987, P289
   Leroy X., 2005, COMPCERT VERIFIED CO
   Leroy X, 2008, J AUTOM REASONING, V41, P1, DOI 10.1007/s10817-008-9099-0
   Leroy Xavier, 2012, Research Report RR-7987
   Mullen E, 2016, ACM SIGPLAN NOTICES, V51, P448, DOI [10.1145/2980983.2908109, 10.1145/2908080.2908109]
   Murawski AS, 2015, FOUND TRENDS PROGRAM, V2, P192
   Murawski AS, 2021, J ACM, V68, DOI 10.1145/3428676
   Murawski AS, 2014, ACM SIGPLAN NOTICES, V49, P517, DOI 10.1145/2535838
   Murawski AS, 2011, IEEE S LOG, P75, DOI 10.1109/LICS.2011.31
   Pitts A., 2016, ACM SIGLOG News, V3, P57, DOI DOI 10.1145/2893582.2893594
   Pitts AM, 2013, CAM T THEOR, V57, P1, DOI 10.1017/CBO9781139084673
   Ramananandro T, 2015, CPP'15: PROCEEDINGS OF THE 2015 ACM CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P3, DOI 10.1145/2676724.2693167
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Sevcík J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P43, DOI 10.1145/1926385.1926393
   Song Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371091
   Stewart G, 2015, ACM SIGPLAN NOTICES, V50, P275, DOI [10.1145/2676726.2676985, 10.1145/2775051.2676985]
   Tuch H, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P97
   Urban C, 2005, LECT NOTES ARTIF INT, V3632, P38
   Urban C, 2006, LECT NOTES ARTIF INT, V4130, P498
   Wang YT, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290375
   Wang YT, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428265
NR 33
TC 2
Z9 2
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 25
DI 10.1145/3498686
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900026
OA gold
DA 2024-07-18
ER

PT J
AU Al Awar, N
   Jain, K
   Rossbach, CJ
   Gligoric, M
AF Al Awar, Nader
   Jain, Kush
   Rossbach, Christopher J.
   Gligoric, Milos
TI Programming and Execution Models for Parallel Bounded Exhaustive Testing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Bounded exhaustive testing; Test generation; Parallel programming
AB Bounded-exhaustive testing (BET), which exercises a program under test for all inputs up to some bounds, is an effective method for detecting software bugs. Systematic property-based testing is a BET approach where developers write test generation programs that describe properties of test inputs. Hybrid test generation programs offer the most expressive way to write desired properties by freely combining declarative filters and imperative generators. However, exploring hybrid test generation programs, to obtain test inputs, is both computationally demanding and challenging to parallelize. We present the first programming and execution models, dubbed Tempo, for parallel exploration of hybrid test generation programs. We describe two different strategies for mapping the computation to parallel hardware and implement them both for GPUs and CPUs. We evaluated Tempo by generating instances of various data structures commonly used for benchmarking in the BET domain. Additionally, we generated CUDA programs to stress test CUDA compilers, finding four bugs confirmed by the developers.
C1 [Al Awar, Nader; Jain, Kush; Rossbach, Christopher J.; Gligoric, Milos] Univ Texas Austin, Austin, TX 78712 USA.
   [Rossbach, Christopher J.] Katana Graph, Austin, TX 78712 USA.
C3 University of Texas System; University of Texas Austin
RP Al Awar, N (corresponding author), Univ Texas Austin, Austin, TX 78712 USA.
EM nader.alawar@utexas.edu; kjain14@utexas.edu; rossbach@cs.utexas.edu;
   gligoric@utexas.edu
OI Rossbach, Christopher/0000-0003-0329-3657
FU Google Research Scholar Award; US National Science Foundation
   [CCF-1652517, CCF-1704790, CCF-2107291, CNS-1846169, CNS-2006943]
FX We thank the anonymous reviewers for their comments. We thank Ahmet
   Celik, Darko Marinov, Pengyu Nie, Zhiqiang Zang, Yuki Liu, Jiyang Zhang,
   Steven Zhu, Joseph Ryan, and Aleksandar Milicevic for their feedback on
   this work. This work was partially supported by a Google Research
   Scholar Award and the US National Science Foundation under Grant Nos.
   CCF-1652517, CCF-1704790, CCF-2107291, CNS-1846169, and CNS-2006943.
CR Bauer M, 2012, INT CONF HIGH PERFOR
   Boyapati C., 2002, Software Engineering Notes, V27, P123, DOI 10.1145/566171.566191
   Celik A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360603
   Celik Ahmet, 2017, P ACM PROGRAM LANG, V94, DOI DOI 10.1145/3133918
   Chen JJ, 2020, ACM COMPUT SURV, V53, DOI 10.1145/3363562
   Chikin A, 2019, IEEE SYM PARA DISTR, P353, DOI 10.1109/IPDPSW.2019.00068
   clangCUDAWebPage, 2020, NVCC
   clangWebPage, 2020, CLANG C LANGUAGE FAM
   Clark JE, 2018, PSYCHOL MED, V48, P2277, DOI 10.1017/S0033291718000430
   constexpr, 2020, CONST SPEC
   CUDADocs, 2020, CUDA C PROGRAMMING G
   CUDAWebPage, 2020, CUDA ZON
   Daniel B., 2007, P THE 6 JOINT M EURO, P185, DOI 10.1145/1287624.1287651
   Dewey K, 2015, IEEE INT CONF AUTOM, P482, DOI 10.1109/ASE.2015.65
   Dewey K, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P32, DOI 10.1109/ICSE.2015.26
   Ellison C, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P533
   Franco J, 2017, PROCEEDINGS OF THE 2017 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD!'17), P148, DOI 10.1145/3133850.3133861
   Galeotti Juan P., 2010, Proceedings of the Nineteenth International Symposium on Software Testing and Analysis, ISSTA 2010, Trento, Italy, July 12-16, 2010, P25, DOI [DOI 10.1145/1831708.1831712, 10.1145/1831708.1831712]
   gccWebPage, 2020, GCC GNU COMP COLL
   Gligoric M., 2010, P 32 ACM IEEE INT C, P225, DOI 10.1145/1806799.1806835
   Jackson D, 1996, IEEE T SOFTWARE ENG, V22, P484, DOI 10.1145/226295.226322
   Kapus T, 2017, IEEE INT CONF AUTOM, P590, DOI 10.1109/ASE.2017.8115669
   Kuraj I, 2015, ACM SIGPLAN NOTICES, V50, P37, DOI [10.1145/2814270.2814323, 10.1145/2858965.2814323]
   Lidbury C, 2015, ACM SIGPLAN NOTICES, V50, P65, DOI [10.1145/2737924.2737986, 10.1145/2813885.2737986]
   Majeti D, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P240, DOI 10.1145/2892208.2892210
   McKeeman William M., 1998, DIGIT TECH J, V10, P100
   Meseguer J, 2013, INFORM COMPUT, V231, P38, DOI 10.1016/j.ic.2013.08.004
   Misailovic S., 2007, P FSE ACM, P135
   nsightWebPage, 2020, NSIGHT COMP CLI
   nvccWebPage, 2019, NVCC
   OpenMPIWebPage, 2020, OPENMPI HIGH PERF ME
   OpenMPWebPage, 2020, OPENMP
   operator precedence, 2020, C OP PREC
   Peleg H, 2018, LECT NOTES COMPUT SC, V10747, P406, DOI 10.1007/978-3-319-73721-8_19
   Ringer T, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133915
   Rosner N, 2014, ACM SIGPLAN NOTICES, V49, P655, DOI [10.1145/2714064.2660232, 10.1145/2660193.2660232]
   Selakovic M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276531
   Sharma Rohan, 2010, Proceedings of the IEEE Third International Conference on Software Testing Verification and Validation - Workshops (ICSTW 2010), P337, DOI 10.1109/ICSTW.2010.7
   Sharma R, 2011, LECT NOTES COMPUT SC, V6603, P262, DOI 10.1007/978-3-642-19811-3_19
   Tomb A, 2020, 2020 IEEE SECURE DEVELOPMENT (SECDEV 2020), P33, DOI 10.1109/SecDev45635.2020.00021
   Visser W., 2006, P ACM SIGSOFT INT S, P37
   Xie T, 2005, LECT NOTES COMPUT SC, V3440, P365
   Yaneva V, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P35, DOI 10.1145/3092703.3092720
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zeller A., 2019, The fuzzing book
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P347, DOI [10.1145/3062341.3062379, 10.1145/3140587.3062379]
NR 46
TC 1
Z9 2
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 166
DI 10.1145/3485543
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200068
OA gold
DA 2024-07-18
ER

PT J
AU Rahmani, K
   Raza, M
   Gulwani, S
   Le, V
   Morris, D
   Radhakrishna, A
   Soares, G
   Tiwari, A
AF Rahmani, Kia
   Raza, Mohammad
   Gulwani, Sumit
   Le, Vu
   Morris, Daniel
   Radhakrishna, Arjun
   Soares, Gustavo
   Tiwari, Ashish
TI Multi-modal Program Inference: A Marriage of Pre-trained Language Models
   and Component-Based Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Inference; Natural Language Models; GPT-3
AB Multi-modal program synthesis refers to the task of synthesizing programs (code) from their specification given in different forms, such as a combination of natural language and examples. Examples provide a precise but incomplete specification, and natural language provides an ambiguous but more "complete" task description. Machine-learned pre-trained models (PTMs) are adept at handling ambiguous natural language, but struggle with generating syntactically and semantically precise code. Program synthesis techniques can generate correct code, often even from incomplete but precise specifications, such as examples, but they are unable to work with the ambiguity of natural languages. We present an approach that combines PTMs with component-based synthesis (CBS): PTMs are used to generate candidates programs from the natural language description of the task, which are then used to guide the CBS procedure to find the program that matches the precise examples-based specification. We use our combination approach to instantiate multi-modal synthesis systems for two programming domains: the domain of regular expressions and the domain of CSS selectors. Our evaluation demonstrates the effectiveness of our domain-agnostic approach in comparison to a state-of-the-art specialized system, and the generality of our approach in providing multi-modal program synthesis from natural language and examples in different programming domains.
C1 [Rahmani, Kia] Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
   [Raza, Mohammad; Gulwani, Sumit; Le, Vu; Morris, Daniel; Radhakrishna, Arjun; Soares, Gustavo; Tiwari, Ashish] Microsoft, Redmond, WA USA.
C3 Purdue University System; Purdue University; Microsoft
RP Rahmani, K (corresponding author), Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
EM rahmank@purdue.edu; moraza@microsoft.com; sumitg@microsoft.com;
   levu@microsoft.com; Daniel.Morris@microsoft.com; arradha@microsoft.com;
   Gustavo.Soares@microsoft.com; astiwar@microsoft.com
RI Rahmani, Kia/HTO-1338-2023
OI Radhakrishna, Arjun/0000-0002-5559-5932
CR Agrawal R., 1993, SIGMOD Record, V22, P207, DOI 10.1145/170036.170072
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, LECT NOTES COMPUT SC, V9207, P163, DOI 10.1007/978-3-319-21668-3_10
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   ANGLUIN D, 1978, INFORM CONTROL, V39, P337, DOI 10.1016/S0019-9958(78)90683-6
   ANGLUIN D, 1987, INFORM COMPUT, V75, P87, DOI 10.1016/0890-5401(87)90052-6
   Black P.E., 1999, DICT ALGORITHMS DATA
   Brown T., 2020, P ADV NEUR INF PROC, V33, P1877
   Chen M., 2021, arXiv
   Chen QC, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P487, DOI 10.1145/3385412.3385988
   Chen YJ, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P602, DOI 10.1145/3338906.3338951
   Devlin J., 2018, BERT PRE TRAINING DE
   Drachsler-Cohen D, 2017, LECT NOTES COMPUT SC, V10426, P254, DOI 10.1007/978-3-319-63387-9_13
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Gulwani S, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P803, DOI 10.1145/2588555.2612177
   Gulwani S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P62
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Hendrycks Dan, 2021, ABS210509938 CORR
   Huang KJ, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1159, DOI 10.1145/3385412.3386027
   Huang Po-Sen, 2018, P C N AM CHAPT ASS C, P732, DOI [DOI 10.18653/V1/N18-2115, 10.18653/v1/n18]
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Kushman Nate, 2013, P 2013 C N AM CHAPTE, P826
   Le V., 2013, MobiSys '13, P193
   Lee M, 2017, ACM SIGPLAN NOTICES, V52, P70, DOI [10.1145/3093335.2993244, 10.1145/2993236.2993244]
   Li Yeting, 2020, ABS201215489 CORR
   Lin XV, 2018, PROCEEDINGS OF THE ELEVENTH INTERNATIONAL CONFERENCE ON LANGUAGE RESOURCES AND EVALUATION (LREC 2018), P3107
   Locascio N., 2016, P 2016 C EMPIRICAL M, P1918
   Manshadi Mehdi, 2013, P AAAI C ART INT, V27
   Meyes R., 2019, ABS190108644 ARXIV, P3
   Nowozin Sebastian, 2017, INT C LEARN REPR
   OpenAI, 2021, GPT 3 POW NEXT GEN A
   Pan R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360565
   Pei J., 2000, P 2000 ACM SIGMOD IN, V4, P21
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Rahmani K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485535
   Raza M, 2020, SIGMOD'20: PROCEEDINGS OF THE 2020 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1967, DOI 10.1145/3318464.3380608
   Raza M, 2017, AAAI CONF ARTIF INTE, P882
   Raza M, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P792
   Solarlezama Armando, 2008, PROGRAM SYNTHESIS SK
   SPARCKJONES K, 1972, J DOC, V28, P11, DOI 10.1108/eb026526
   Srivastava S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P313, DOI 10.1145/1706299.1706337
   W3C, 2020, CSS SNAPSH 2020
   Wang Bailin, 2020, ACL, P7567
   Yaghmazadeh N, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133887
   Zhong Zexuan, 2018, EMNLP
NR 46
TC 11
Z9 11
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 158
DI 10.1145/3485535
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200061
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Krauter, N
   Raaf, P
   Braam, P
   Salkhordeh, R
   Erdweg, S
   Brinkmann, A
AF Krauter, Nicolas
   Raaf, Patrick
   Braam, Peter
   Salkhordeh, Reza
   Erdweg, Sebastian
   Brinkmann, Andre
TI Persistent Software Transactional Memory in Haskell
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE persistent transaction support; non-volatile heap
AB Emerging persistent memory in commodity hardware allows byte-granular accesses to persistent state at memory speeds. However, to prevent inconsistent state in persistent memory due to unexpected system failures, different write-semantics are required compared to volatile memory. Transaction-based library solutions for persistent memory facilitate the atomic modification of persistent data in languages where memory is explicitly managed by the programmer, such as C/C++. For languages that provide extended capabilities like automatic memory management, a more native integration into the language is needed to maintain the high level of memory abstraction. It is shown in this paper how persistent software transactional memory (PSTM) can be tightly integrated into the runtime system of Haskell to atomically manage values of persistent transactional data types. PSTM has a clear interface and semantics extending that of software transactional memory (STM). Its integration with the language's memory management retains features like garbage collection and allocation strategies, and is fully compatible with Haskell's lazy execution model. Our PSTM implementation demonstrates competitive performance with low level libraries and trivial portability of existing STM libraries to PSTM. The implementation allows further interesting use cases, such as persistent memoization and persistent Haskell expressions.
C1 [Krauter, Nicolas; Raaf, Patrick; Salkhordeh, Reza; Erdweg, Sebastian; Brinkmann, Andre] Johannes Gutenberg Univ Mainz, Mainz, Germany.
   [Braam, Peter] Univ Oxford, Oxford, England.
C3 Johannes Gutenberg University of Mainz; University of Oxford
RP Krauter, N (corresponding author), Johannes Gutenberg Univ Mainz, Mainz, Germany.
EM n.krauter@uni-mainz.de; raaf@uni-mainz.de; peter@braam.io;
   rsalkhor@uni-mainz.de; erdweg@uni-mainz.de; brinkmann@uni-mainz.de
RI Brinkmann, André/H-9888-2016
OI Raaf, Patrick/0000-0002-1002-9734; Salkhordeh, Reza/0000-0003-3786-7102;
   Erdweg, Sebastian/0000-0002-1974-5956
CR ABADI M, 1991, ACM T PROGR LANG SYS, V13, P237, DOI 10.1145/103135.103138
   Agacan Omer S., 2020, PROBLEM ADDING FUNCT
   [Anonymous], 1959, Proceedings of the Western Joint Computer Conference, DOI [10.1145/1457838.1457895, DOI 10.1145/1457838.1457895]
   [Anonymous], 1993, P 1992 GLASG WORKSH
   Atkinson M., 1982, SIGPLAN Notices, V17, P24, DOI 10.1145/988376.988378
   Atkinson M.P., 1995, VLDB J, V4, P319
   ATKINSON MP, 1983, COMPUT J, V26, P360, DOI 10.1093/comjnl/26.4.360
   Avni H, 2016, PROC VLDB ENDOW, V10, P409
   Berthold Jost, 2010, LECT NOTES COMPUTER, V6647, P38, DOI [10.1007/978-3-642-24276-2_3, DOI 10.1007/978-3-642-24276-2_3]
   Bläser L, 2007, LECT NOTES COMPUT SC, V4807, P71
   Breuer PT, 2003, LECT NOTES COMPUT SC, V2885, P599
   Cheney J., 2002, P 2002 ACM SIGPLAN W, P90, DOI DOI 10.1145/581690.581698
   Chi Cao Minh, 2008, 2008 IEEE International Symposium on Workload Characterization (IISWC), P35, DOI 10.1109/IISWC.2008.4636089
   Chiusano Paul, 2020, UNISON REDUCES ECOSY
   Coburn J, 2011, ACM SIGPLAN NOTICES, V46, P105, DOI [10.1145/1961295.1950380, 10.1145/1961296.1950380]
   Conal Elliot, 2008, ELEGANT MEMOIZATION
   Connor Richard C. H, 1991, THESIS U ST ANDREWS
   Corona Alberto G, 2017, TCACHE T CACHE USER
   Correia A, 2018, SPAA'18: PROCEEDINGS OF THE 30TH ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P271, DOI 10.1145/3210377.3210392
   Dulloor Subramanya R., 2014, P EUR C COMP SYST EU, P1, DOI [10.1145/2592798.2592814, DOI 10.1145/2592798.2592814]
   Felber P, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P237, DOI 10.1145/1345206.1345241
   Freitas RF, 2008, IBM J RES DEV, V52, P439, DOI 10.1147/rd.524.0439
   Gamari B., 2020, P 2020 ACM SIGPLAN I, P87
   Gamari Ben, 2019, COMPACT NFDATA SUPPO
   GHC Team, 2020, BLOCK ALL
   GHC Team, 2020, GHC COMM LAYOUT HEAP
   Gottschlich JustinE., 2007, LCSD '07: Proceedings of the 2007 Symposium on Library-Centric Software Design, P52
   Hady FT, 2017, P IEEE, V105, P1822, DOI 10.1109/JPROC.2017.2731776
   HAERDER T, 1983, COMPUT SURV, V15, P287, DOI 10.1145/289.291
   Harper Robert, 1985, TOPICS INFORM SYSTEM, P21
   Harris Tim., 2005, PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, P48, DOI DOI 10.1145/1065944.1065952
   HERLIHY M, 1993, CONF PROC INT SYMP C, P289, DOI 10.1145/173682.165164
   Herlihy M, 2003, P 22 ANN S PRINCIPLE, P92
   Hosking AL, 1999, PROCEEDINGS OF THE TWENTY-FIFTH INTERNATIONAL CONFERENCE ON VERY LARGE DATA BASES, P587
   Hudak Paul, 1992, ACM SIGPLAN NOTICES, V27, P5
   Izraelevitz J., 2019, BASIC PERFORMANCE ME
   Jones S. P., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P295, DOI 10.1145/237721.237794
   Kemper A., 1993, Proceedings. Ninth International Conference on Data Engineering (Cat. No.92CH3258-1), P155, DOI 10.1109/ICDE.1993.344067
   Kultursay Emre, 2013, IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS 2013), P256
   Liu MX, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P329, DOI 10.1145/3037697.3037714
   Mäsker M, 2019, INT CONF MANAGE DATA, P1207, DOI 10.1145/3299869.3319870
   Marlow S, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P11
   Marquez Alonso, 2000, LECT NOTES COMPUTER, V2135, DOI DOI 10.1007/3
   MCNALLY DJ, 1991, SIGPLAN NOTICES, V26, P43, DOI 10.1145/122501.122504
   Min Wu, 2020, IH&MMSec '20: Proceedings of the 2020 ACM Workshop on Information Hiding and Multimedia Security, DOI 10.1145/3369412.3396882
   Morrison R., 1999, ESPRIT BAS RES SER, P98, DOI 10.1007/978-3-642-59623-0_6
   Moti Nafiseh, 2021, SC '21: Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis, DOI 10.1145/3458817.3476180
   Nalli Sanketh, 2018, GCC PORT TM SYSTEM M
   Palmer Luke, 2013, DATA MEMOCOMBINATORS
   Parkin SSP, 2008, SCIENCE, V320, P190, DOI 10.1126/science.1145799
   Peyton Jones S. L., 1992, Journal of Functional Programming, V2, P127, DOI 10.1017/S0956796800000319
   Quintela J, 2001, LECT NOTES COMPUT SC, V2178, P657
   Ramalhete P, 2019, I C DEPEND SYS NETWO, P151, DOI 10.1109/DSN.2019.00028
   Rao Dulloor Subramanya, 2014, 9 EUR C 2014 EUROSYS, V15
   Raoux S, 2008, IBM J RES DEV, V52, P465, DOI 10.1147/rd.524.0465
   Robinson Peter, 2019, CONCURRENT HASHTABLE
   Rudoff Andy, 2017, LOGIN USENIX MAG, V42, P2
   Saha B., 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P187, DOI 10.1145/1122971.1123001
   Shull T, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P316, DOI 10.1145/3314221.3314608
   Strachey C., 2000, Higher-Order and Symbolic Computation, V13, P11, DOI 10.1023/A:1010000313106
   TENNENT RD, 1977, ACTA INFORM, V8, P97, DOI 10.1007/BF00289243
   Ueno Katsuhiro, 2016, P 21 ACM SIGPLAN INT, P421, DOI [10.1145/2951913.2951944, DOI 10.1145/2951913.2951944]
   Volos H, 2011, ACM SIGPLAN NOTICES, V46, P91, DOI [10.1145/1961296.1950379, 10.1145/1961295.1950379]
   Weiland M, 2019, PROCEEDINGS OF SC19: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, DOI 10.1145/3295500.3356159
   Wu MY, 2018, ACM SIGPLAN NOTICES, V53, P70, DOI [10.1145/3173162.3173201, 10.1145/3296957.3173201]
   Xu J, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P478, DOI 10.1145/3132747.3132761
   Xu J, 2016, 14TH USENIX CONFERENCE ON FILE AND STORAGE TECHNOLOGIES (FAST '16), P323
   Yang EZ, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P362, DOI 10.1145/2784731.2784735
   Yates R, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P94, DOI 10.1145/3293883.3295711
   Yates R, 2017, ACM SIGPLAN NOTICES, V52, P186, DOI 10.1145/3156695.3122972
NR 70
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 63
DI 10.1145/3473568
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800003
OA gold
DA 2024-07-18
ER

PT J
AU Dal Lago, U
   Faggian, C
   Della Rocca, SR
AF Dal Lago, Ugo
   Faggian, Claudia
   Della Rocca, Simona Ronchi
TI Intersection Types and (Positive) Almost-Sure Termination
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE almost-sure termination; expected time; type systems; intersection types
ID MODEL-CHECKING; SEMANTICS; COMPLETENESS; CALCULUS
AB Randomised higher-order computation can be seen as being captured by a lambda-calculus endowed with a single algebraic operation, namely a construct for binary probabilistic choice. What matters about such computations is the probability of obtaining any given result, rather than the possibility or the necessity of obtaining it, like in (non)deterministic computation. Termination, arguably the simplest kind of reachability problem, can be spelled out in at least two ways, depending on whether it talks about the probability of convergence or about the expected evaluation time, the second one providing a stronger guarantee. In this paper, we show that intersection types are capable of precisely characterizing both notions of termination inside a single system of types: the probability of convergence of any lambda-term can be underapproximated by its type, while the underlying derivation's weight gives a lower bound to the term's expected number of steps to normal form. Noticeably, both approximations are tight-not only soundness but also completeness holds. The crucial ingredient is non-idempotency, without which it would be impossible to reason on the expected number of reduction steps which are necessary to completely evaluate any term. Besides, the kind of approximation we obtain is proved to be optimal recursion theoretically: no recursively enumerable formal system can do better than that.
C1 [Dal Lago, Ugo] Univ Bologna, Bologna, Italy.
   [Faggian, Claudia] Univ Paris, CNRS, IRIF, Paris, France.
   [Della Rocca, Simona Ronchi] Univ Turin, Turin, Italy.
C3 University of Bologna; Universite Paris Cite; Centre National de la
   Recherche Scientifique (CNRS); University of Turin
RP Dal Lago, U (corresponding author), Univ Bologna, Bologna, Italy.
EM ugo.dallago@unibo.it; claudia.faggian@irif.fr; ronchi@di.unito.it
RI Dal Lago, Ugo/K-9621-2015
OI Dal Lago, Ugo/0000-0001-9200-070X
FU ANR PRC project PPS [ANR-19-CE48-0014]; ERC Consolidator Grant DIAPASoN
   [818616]; MIUR PRIN ASPRA [201784YSZ5]; European Research Council (ERC)
   [818616] Funding Source: European Research Council (ERC); Agence
   Nationale de la Recherche (ANR) [ANR-19-CE48-0014] Funding Source:
   Agence Nationale de la Recherche (ANR)
FX This work was partially supported by ANR PRC project PPS
   (ANR-19-CE48-0014), by ERC Consolidator Grant DIAPASoN (818616), and by
   MIUR PRIN ASPRA (201784YSZ5).
CR ACCATTOLI B, 2018, P ICFP 2018 2 ICFP 2, DOI [10.1145/3236789, DOI 10.1145/3236789]
   Accattoli B, 2019, LECT NOTES COMPUT SC, V11423, P410
   Accattoli Ugo., 2017, ABS171110078 CORR
   [Anonymous], 1989, Studies in Logic and the Foundations of Mathematics
   [Anonymous], 1980, HB CURRY ESSAYS COMB
   [Anonymous], 1979, Wiley Series in Probability and Mathematical Statistics
   Avanzini M, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785725
   Avanzini M, 2020, SCI COMPUT PROGRAM, V185, DOI 10.1016/j.scico.2019.102338
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Bernadet A, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:3)2013
   Bizjak A, 2015, LECT NOTES COMPUT SC, V9034, P279, DOI 10.1007/978-3-662-46678-0_18
   Bremaud P., 2017, DISCRETE PROBABILITY, DOI DOI 10.1007/978-3-319-43476-6
   Breuvart F, 2018, PPDP'18: PROCEEDINGS OF THE 20TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, DOI 10.1145/3236950.3236968
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Coppo M., 1980, Notre Dame Journal of Formal Logic, V21, P685, DOI 10.1305/ndjfl/1093883253
   COPPO M, 1987, INFORM COMPUT, V72, P85, DOI 10.1016/0890-5401(87)90042-3
   COPPO M, 1981, Z MATH LOGIK, V27, P45, DOI 10.1002/malq.19810270205
   Coppo M., 1978, Archiv fur Mathematische Logik und Grundlagenforschung, V19, P139, DOI 10.1007/BF02011875
   Cousot P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P316, DOI 10.1145/263699.263744
   Dal Lago U, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3293605
   Dal Lago U, 2014, ACM SIGPLAN NOTICES, V49, P297, DOI 10.1145/2535838.2535872
   Dal Lago U, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:11)2012
   Dal Lago U, 2012, RAIRO-THEOR INF APPL, V46, P413, DOI 10.1051/ita/2012012
   De Carvalho D, 2018, MATH STRUCT COMP SCI, V28, P1169, DOI 10.1017/S0960129516000396
   De Leeuw, 1956, AUTOMATA STUDIES, V34
   DELIGUORO U, 1995, INFORM COMPUT, V122, P149, DOI 10.1006/inco.1995.1145
   DELIGUORO U, 2001, LNCS, V2044
   Della Rocca Ugo., 2020, 2010126892020 CORR
   Ehrhard T, 2014, ACM SIGPLAN NOTICES, V49, P309, DOI 10.1145/2535838.2535865
   Etessami K, 2009, J ACM, V56, DOI 10.1145/1462153.1462154
   Fioriti LMF, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI 10.1145/2676726.2677001
   Gardner P., 1994, Theoretical Aspects of Computer Software. International Symposium TACS '94 Proceedings, P555
   Garnier Olivier., 2006, REWRITING TECHNIQUES, DOI 10.1007/11805618_27
   GILL J, 1977, SIAM J COMPUT, V6, P675, DOI 10.1137/0206049
   Girard Jean-Yves., 1971, P 2 SCANDINAVIAN LOG, V63, P63
   GOLDWASSER S, 1984, J COMPUT SYST SCI, V28, P270, DOI 10.1016/0022-0000(84)90070-9
   Goodman Noah, 2008, UAI, DOI [10.5555/2969033.2969207, DOI 10.5555/2969033.2969207]
   Goubault-Larrecq J, 2015, J LOG ALGEBR METHODS, V84, P155, DOI 10.1016/j.jlamp.2014.09.003
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Jones C., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P186, DOI 10.1109/LICS.1989.39173
   Jung A., 1998, Electronic Notes in Theoretical Computer Science, V13, DOI 10.1016/S1571-0661(05)80216-6
   Kaminski BL, 2019, ACTA INFORM, V56, P255, DOI 10.1007/s00236-018-0321-1
   Kaminski BL, 2018, J ACM, V65, DOI 10.1145/3208102
   Kfoury A. J., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P161, DOI 10.1145/292540.292556
   Kfoury AJ, 2000, J LOGIC COMPUT, V10, P411, DOI 10.1093/logcom/10.3.411
   Kfoury Sebastien., 2004, LNCS, V2986, DOI 10.1007/978-3-540-24725-8_21
   Kobayashi N, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785679
   Kobayashi N, 2009, IEEE S LOG, P179, DOI 10.1109/LICS.2009.29
   Kobayashi N, 2009, ACM SIGPLAN NOTICES, V44, P416, DOI 10.1145/1594834.1480933
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   McIver Annabelle., 2005, MG COMP SCI
   MOLLER NEERGAARD P., 2004, P 9 ACM SIGPLAN INT, P138, DOI DOI 10.1145/1016850.1016871
   Monniaux David., 2001, P SAS 2001, DOI 10.1145/360204.360211
   Motwani R., 1995, RANDOMIZED ALGORITHM, DOI DOI 10.1017/CBO9780511814075
   Ong CHL, 2006, IEEE S LOG, P81, DOI 10.1109/LICS.2006.38
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Piperno Mariangiola., 1993, P MFCS 1993, DOI 10.1007/3-540-57182-5_32
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Pottinger Garrell., 1980, HB CURRY ESSAYS COMB
   Puterman ML., 2014, MARKOV DECISION PROC, DOI DOI 10.1002/9780470316887
   RABIN MO, 1963, INFORM CONTROL, V6, P230, DOI 10.1016/S0019-9958(63)90290-0
   Saheb-Djahromi, 1978, LNCS, V64, DOI 10.1007/3-504-08921-7_92
   SANTOS ES, 1969, P AM MATH SOC, V22, P704, DOI 10.2307/2037463
   Tolpin D, 2015, LECT NOTES ARTIF INT, V9286, P308, DOI 10.1007/978-3-319-23461-8_36
   Urzyczyn Pawel., 1989, LECT CURRY HOWARD IS, DOI [10.1016/S0049-237X(06)80005-4, DOI 10.1016/S0049-237X(06)80005-4]
   van Bakel S, 2013, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.121.1
   Ngo VC, 2018, ACM SIGPLAN NOTICES, V53, P496, DOI [10.1145/3192366.3192394, 10.1145/3296979.3192394]
   Venneri Betti, 1980, HB CURRY ESSAYS COMB
NR 68
TC 10
Z9 10
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 32
DI 10.1145/3434313
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100032
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Jones, E
   Ramsay, S
AF Jones, Eddie
   Ramsay, Steven
TI Intensional Datatype Refinement With Application to Scalable
   Verification of Pattern-Match Safety
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE higher-order program verification; refinement types
ID CONSTRAINTS; CHECKING
AB The pattern-match safety problem is to verify that a given functional program will never crash due to non-exhaustive patterns in its function definitions. We present a refinement type system that can be used to solve this problem. The system extends ML-style type systems with algebraic datatypes by a limited form of structural subtyping and environment-level intersection. We describe a fully automatic, sound and complete type inference procedure for this system which, under reasonable assumptions, is worst-case linear-time in the program size. Compositionality is essential to obtaining this complexity guarantee. A prototype implementation for Haskell is able to analyse a selection of packages from the Hackage database in a few hundred milliseconds.
C1 [Jones, Eddie; Ramsay, Steven] Univ Bristol, Dept Comp Sci, Bristol, Avon, England.
C3 University of Bristol
RP Jones, E (corresponding author), Univ Bristol, Dept Comp Sci, Bristol, Avon, England.
OI Ramsay, Steven/0000-0002-0825-8386; Jones, Eddie/0000-0003-1762-5405
FU Engineering and Physical Sciences Research Council [EP/T006579/1];
   National Centre for Cyber Security via the UK Research Institute in
   Verified Trustworthy Software Systems; EPSRC [EP/T006595/1] Funding
   Source: UKRI
FX We gratefully acknowledge the support of the Engineering and Physical
   Sciences Research Council (EP/T006579/1) and the National Centre for
   Cyber Security via the UK Research Institute in Verified Trustworthy
   Software Systems. We thank our colleague Matthew Pickering for a lot of
   good Haskell advice and for helping us safely navigate the interior of
   the Glasgow Haskell Compiler.
CR Aiken A., 1999, Higher-Order and Symbolic Computation, V12, P237, DOI 10.1023/A:1010056315933
   Aiken A, 1999, SCI COMPUT PROGRAM, V35, P79, DOI 10.1016/S0167-6423(99)00007-6
   Aiken A., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P31, DOI 10.1145/165180.165188
   AIKEN A, 1992, PROCEEDINGS OF THE SEVENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P329, DOI 10.1109/LICS.1992.185545
   Aiken A., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P163, DOI 10.1145/174675.177847
   AMADIO RM, 1993, ACM T PROGR LANG SYS, V15, P575, DOI 10.1145/155183.155231
   BACHMAIR L, 1993, IEEE S LOG, P75
   Burn Toby Cathcart, 2017, PACMPL, V2, DOI [10.1145/3158099, DOI 10.1145/3158099]
   Castagna G, 2016, ACM SIGPLAN NOTICES, V51, P378, DOI 10.1145/3022670.2951928
   Castagna G, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P94
   Dolan S, 2017, ACM SIGPLAN NOTICES, V52, P60, DOI 10.1145/3093333.3009882
   Dunfield J, 2017, LECT NOTES COMPUT SC, V10201, P476, DOI 10.1007/978-3-662-54434-1_18
   Dunfield J, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P21, DOI 10.1145/1292597.1292602
   Eremondi Joseph, 2019, LECT NOTES COMPUTER, V12053, P121, DOI [10.1007/978-3-030-47147-7_6, DOI 10.1007/978-3-030-47147-7_6]
   Fahndrich M, 1998, ACM SIGPLAN NOTICES, V33, P85, DOI 10.1145/277652.277667
   Fahndrich Manuel, 1996, 1 WORKSH SET CONSTR
   Flanagan C, 1999, ACM T PROGR LANG SYS, V21, P370, DOI 10.1145/316686.316703
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Garrigue Jacques, 2002, INT WORKSH FDN OBJ O
   Graf S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408989
   Gustavsson J, 2001, LECT NOTES COMPUT SC, V2053, P63
   Harrison J, 2009, Handbook of Practical Logic and Automated Reasoning
   Heintze N., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P306, DOI 10.1145/182409.182495
   Heintze Nevin Charles, 1992, THESIS
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Kobayashi Naoki, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P711, DOI 10.1007/978-3-319-89884-1_25
   Kobayashi N, 2013, J ACM, V60, DOI 10.1145/2487241.2487246
   Kobayashi N, 2009, IEEE S LOG, P179, DOI 10.1109/LICS.2009.29
   Kozen D., 1995, Mathematical Structures in Computer Science, V5, P113, DOI 10.1017/S0960129500000657
   Maranget L, 2007, J FUNCT PROGRAM, V17, P387, DOI 10.1017/S0956796807006223
   Mitchell N, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P49
   My Hoang, 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P176, DOI 10.1145/199448.199481
   Nguyen PC, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P139, DOI 10.1145/2628136.2628156
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Ong CHL, 2006, IEEE S LOG, P81, DOI 10.1109/LICS.2006.38
   Ong CHL, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P587, DOI 10.1145/1926385.1926453
   Pickering M, 2016, ACM SIGPLAN NOTICES, V51, P80, DOI 10.1145/3241625.2976013
   Pottier F., 2000, Nordic Journal of Computing, V7, P312
   Pottier F, 2001, INFORM COMPUT, V170, P153, DOI 10.1006/inco.2000.2963
   Pottier Francois, 1998, RR3483 INRIA
   Rehof J., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P278, DOI 10.1145/263699.263738
   Rehof J, 1999, SCI COMPUT PROGRAM, V35, P191, DOI 10.1016/S0167-6423(99)00011-8
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Su Z., 2000, Proceedings of the 27th ACM SIGPLAN-SIGACT symposium on Principles of programming languages (POPL), P81, DOI [10.1145/325694.325706, DOI 10.1145/325694.325706]
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Terauchi T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1706299.1706315
   Trifonov V., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P349
   Unno H, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P277, DOI 10.1145/1599410.1599445
   Vazou N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P48, DOI 10.1145/2784731.2784745
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Viswanathan M, 2004, LECT NOTES COMPUT SC, V3170, P512
   Vytiniotis D, 2013, ACM SIGPLAN NOTICES, V48, P431, DOI 10.1145/2480359.2429121
   Xu DN, 2009, ACM SIGPLAN NOTICES, V44, P41, DOI 10.1145/1594834.1480889
NR 53
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 55
DI 10.1145/3434336
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100055
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Li, YB
   Zhang, QR
   Reps, T
AF Li, Yuanbo
   Zhang, Qirun
   Reps, Thomas
TI On the Complexity of Bidirected Interleaved Dyck-Reachability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Formal Language Graph Reachability; Interleaved-Dyck Language; Static
   Analysis; Complexity
ID POINTS-TO ANALYSIS; CFL-REACHABILITY
AB Many program analyses need to reason about pairs of matching actions, such as call/return, lock/unlock, or set-field/get-field. The family of Dyck languages {D-k}, where D-k has k kinds of parenthesis pairs, can be used to model matching actions as balanced parentheses. Consequently, many program-analysis problems can be formulated as Dyck-reachability problems on edge-labeled digraphs. Interleaved Dyck-reachability (InterDyck-reachability), denoted by D-k circle dot D-k-reachability, is a natural extension of Dyck-reachability that allows one to formulate program-analysis problems that involve multiple kinds of matching-action pairs. Unfortunately, the general InterDyck-reachability problem is undecidable.
   In this paper, we study variants of InterDyck-reachability on bidirected graphs, where for each edge < p, q > labeled by an open parenthesis "(a", there is an edge < q, p > labeled by the corresponding close parenthesis ")a", and vice versa. Language-reachability on a bidirected graph has proven to be useful both (i) in its own right, as a way to formalize many program-analysis problems, such as pointer analysis, and (ii) as a relaxation method that uses a fast algorithm to over-approximate language-reachability on a directed graph. However, unlike its directed counterpart, the complexity of bidirected InterDyck-reachability still remains open.
   We establish the first decidable variant (i.e., D-1 circle dot D-1-reachability) of bidirected InterDyck-reachability. In D-1 circle dot D-1-reachability, each of the two Dyck languages is restricted to have only a single kind of parenthesis pair. In particular, we show that the bidirected D-1 circle dot D-1-reachability problem is in PTIME. We also show that when one extends each Dyck language to involve.. different kinds of parentheses (i.e., D-k circle dot D-k-reachability with k >= 2), the problem is NP-hard (and therefore much harder).
   We have implemented the polynomial-time algorithm for bidirected D-1 circle dot D-1-reachability D-1 circle dot D-1-reachability provides a new over-approximation method for bidirected D-k circle dot D-k-reachability in the sense that D-1 circle dot D-1-reachability can first be relaxed to bidirected D-1 circle dot D-1-reachability, and then the resulting bidirected D-1 circle dot D-1-reachability problem is solved precisely. We compare this D-1 circle dot D-1-reachability-based approach against another known over-approximating D-k circle dot D-k-reachability algorithm. Surprisingly, we found that the over-approximation approach based on bidirected D-1 circle dot D-1-reachability computes more precise solutions, even though the D-1 circle dot D-1 formalism is inherently less expressive than the D-k circle dot D-k formalism.
C1 [Li, Yuanbo; Zhang, Qirun] Georgia Inst Technol, Sch Comp Sci, 266 Ferst Dr NW, Atlanta, GA 30332 USA.
   [Reps, Thomas] Univ Wisconsin, Comp Sci Dept, 1210 West Dayton St, Madison, WI 53706 USA.
C3 University System of Georgia; Georgia Institute of Technology;
   University of Wisconsin System; University of Wisconsin Madison
RP Li, YB (corresponding author), Georgia Inst Technol, Sch Comp Sci, 266 Ferst Dr NW, Atlanta, GA 30332 USA.
EM yuanboli@gatech.edu; grzhang@gatech.edu; reps@cs.wisc.edu
OI Zhang, Qirun/0000-0001-5367-9377
FU United States National Science Foundation (NSF) [1917924, 1420866]; ONR
   [N00014-17-1-2889, N00014-19-1-2318]; Direct For Computer & Info Scie &
   Enginr; Division of Computing and Communication Foundations [1917924]
   Funding Source: National Science Foundation; Direct For Computer & Info
   Scie & Enginr; Division of Computing and Communication Foundations
   [1420866] Funding Source: National Science Foundation
FX We would like to thank the anonymous POPL reviewers for valuable
   feedback on earlier drafts of this paper, which helped improve its
   presentation. This work was supported in part by the United States
   National Science Foundation (NSF) under Grants No. 1917924 and No.
   1420866; by a gift from Rajiv and Ritu Batra; by ONR under grants
   N00014-17-1-2889 and N00014-19-1-2318. Any opinions, findings,
   conclusions, or recommendations expressed in this publication are those
   of the authors, and do not necessarily reflect the views of the
   sponsoring agencies.
CR Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Chatterjee Krishnendu, 2018, P ACM PROGR LANG P ACM PROGR LANG, V30, P1
   Chaudhuri S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P159, DOI 10.1145/1328438.1328460
   Cheng BC, 2000, ACM SIGPLAN NOTICES, V35, P57, DOI 10.1145/358438.349311
   Gabow H. N., 1976, IEEE Transactions on Software Engineering, VSE-2, P227, DOI 10.1109/TSE.1976.233819
   Huang W., 2015, P 2015 INT S SOFTWAR, P106, DOI 10.1145/2771783.2771803
   Kahlon V, 2009, IEEE S LOG, P27, DOI 10.1109/LICS.2009.45
   Kodumal J, 2004, ACM SIGPLAN NOTICES, V39, P207, DOI 10.1145/996893.996867
   Kovác J, 2014, J COMPUT BIOL, V21, P1, DOI 10.1089/cmb.2013.0004
   Li YB, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P780, DOI 10.1145/3385412.3386021
   Madhusudan P, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P283, DOI 10.1145/1926385.1926419
   Qadeer S, 2005, LECT NOTES COMPUT SC, V3440, P93
   Ramalingam G, 2000, ACM T PROGR LANG SYS, V22, P416, DOI 10.1145/349214.349241
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Reps T, 2000, ACM T PROGR LANG SYS, V22, P162, DOI 10.1145/345099.345137
   Späth J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290361
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Xu GQ, 2009, LECT NOTES COMPUT SC, V5653, P98
   Yan Dacong, P 20 INT S SOFTW TES P 20 INT S SOFTW TES, P155
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P344, DOI 10.1145/3093333.3009848
NR 22
TC 8
Z9 8
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 59
DI 10.1145/3434340
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100059
OA gold
DA 2024-07-18
ER

PT J
AU Newcomb, JL
   Adams, A
   Johnson, S
   Bodik, R
   Kamil, S
AF Newcomb, Julie L.
   Adams, Andrew
   Johnson, Steven
   Bodik, Rastislav
   Kamil, Shoaib
TI Verifying and Improving Halide's Term Rewriting System with Program
   Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE term rewriting system; verification; synthesis
AB Halide is a domain-specific language for high-performance image processing and tensor computations, widely adopted in industry. Internally, the Halide compiler relies on a term rewriting system to prove properties of code required for efficient and correct compilation. This rewrite system is a collection of handwritten transformation rules that incrementally rewrite expressions into simpler forms; the system requires high performance in both time and memory usage to keep compile times low, while operating over the undecidable theory of integers. In this work, we apply formal techniques to prove the correctness of existing rewrite rules and provide a guarantee of termination. Then, we build an automatic program synthesis system in order to craft new, provably correct rules from failure cases where the compiler was unable to prove properties. We identify and fix 4 incorrect rules as well as 8 rules which could give rise to infinite rewriting loops. We demonstrate that the synthesizer can produce better rules than hand-authored ones in five bug fixes, and describe four cases in which it has served as an assistant to a human compiler engineer. We further show that it can proactively improve weaknesses in the compiler by synthesizing a large number of rules without human supervision and showing that the enhanced ruleset lowers peak memory usage of compiled code without appreciably increasing compilation times.
C1 [Newcomb, Julie L.; Bodik, Rastislav] Univ Washington, Seattle, WA 98195 USA.
   [Adams, Andrew; Kamil, Shoaib] Adobe Res, San Jose, CA USA.
   [Johnson, Steven] Google, Mountain View, CA 94043 USA.
C3 University of Washington; University of Washington Seattle; Adobe
   Systems Inc.; Google Incorporated
RP Newcomb, JL (corresponding author), Univ Washington, Seattle, WA 98195 USA.
EM newcombj@cs.washington.edu; andrew.b.adams@gmail.com; srj@google.com;
   bodik@cs.washington.edu; kamil@adobe.com
OI Adams, Andrew/0000-0002-6766-670X
FU CONIX Research Center, one of six centers in JUMP, a Semiconductor
   Research Corporation (SRC) program - DARPA
FX This work was supported in part by the CONIX Research Center, one of six
   centers in JUMP, a Semiconductor Research Corporation (SRC) program
   sponsored by DARPA.
CR Adams A, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3306346.3322967
   Astorga A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P775, DOI 10.1145/3314221.3314641
   Baader F., 1999, Term Rewriting and All that, P223
   BOUTE RT, 1992, ACM T PROGR LANG SYS, V14, P127, DOI 10.1145/128861.128862
   Butler E, 2018, LECT NOTES COMPUT SC, V10747, P138, DOI 10.1007/978-3-319-73721-8_7
   Butler Eric, 2017, P 12 INT C FDN DIG G, P10
   Cimatti A, 2013, LECT NOTES COMPUT SC, V7795, P93
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Gorn S., 1967, PROC APRIL 18 201967, P213, DOI 10.1145/1465482.1465513
   Hagedorn Bastian, 2020, P ACM PROGR LANG, V4, P1
   Jovanovic D, 2017, LECT NOTES COMPUT SC, V10145, P330, DOI 10.1007/978-3-319-52234-0_18
   Knuth D.E., 1983, Simple Word Problems in Universal Algebras, P342, DOI DOI 10.1007/978-3-642-81955-1_23
   Lee DongKwon, 2020, P 41 ACM SIGPLAN C P
   Lopes NP, 2014, LECT NOTES COMPUT SC, V8318, P203, DOI 10.1007/978-3-642-54013-4_12
   Lopes Nuno P., 2015, P 36 ACM SIGPLAN C P, P22, DOI [DOI 10.1145/2813885.2737965, 10.1145/2737924.2737965, DOI 10.1145/2737924.2737965]
   Massalin H., 1987, Proceedings of the Second International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS II) (Cat. No.87CH2440-6), P122
   Menendez D, 2017, ACM SIGPLAN NOTICES, V52, P49, DOI [10.1145/3140587.3062372, 10.1145/3062341.3062372]
   Nelson C.G., 1980, THESIS
   Panchekha P, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI 10.1145/2737924.2737959
   Phothilimthana PM, 2016, ACM SIGPLAN NOTICES, V51, P297, DOI 10.1145/2954679.2872387
   Phothilimthana Phitchaya Mangpo, ACM SIGARCH COMPUTER, V44, P297
   Reinking Alex, 2019, THESIS U CALIFORNIA
   Sasnauskas R., 2017, abs/1711.04422
   Schkufza E, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI 10.1145/2499368.2451150
   Singh R, 2016, PROCEEDINGS OF THE 2016 16TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2016), P185, DOI 10.1109/FMCAD.2016.7886678
   Solar-Lezama A, 2009, LECT NOTES COMPUT SC, V5904, P4, DOI 10.1007/978-3-642-10672-9_3
   The Coq Development Team, 2019, COQ REF MAN VERS 8 1
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
NR 31
TC 8
Z9 10
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 166
DI 10.1145/3428234
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900043
OA gold
DA 2024-07-18
ER

PT J
AU Darragh, P
   Adams, MD
AF Darragh, Pierce
   Adams, Michael D.
TI Parsing with Zippers (Functional Pearl)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Parsing; Derivatives; Zippers; Parsing with Derivatives
ID DERIVATIVES
AB Parsing with Derivatives (PwD) is an elegant approach to parsing context-free grammars (CFGs). It takes the equational theory behind Brzozowski's derivative for regular expressions and augments that theory with laziness, memoization, and fixed points. The result is a simple parser for arbitrary CFGs. Although recent work improved the performance of PwD, it remains inefficient due to the algorithm repeatedly traversing some parts of the grammar.
   In this functional pearl, we show how to avoid this inefficiency by suspending the state of the traversal in a zipper. When subsequent derivatives are taken, we can resume the traversal from where we left off without retraversing already traversed parts of the grammar.
   However, the original zipper is designed for use with trees, and we want to parse CFGs. CFGs can include shared regions, cycles, and choices between alternates, which makes them incompatible with the traditional tree model for zippers. This paper develops a generalization of zippers to properly handle these additional features. Just as PwD generalized Brzozowski's derivatives from regular expressions to CFGs, we generalize Huet's zippers from trees to CFGs.
   The resulting parsing algorithm is concise and efficient: it takes only 31 lines of OCaml code to implement the derivative function but performs 6,500 times faster than the original PwD and 3.24 times faster than the optimized implementation of PwD.
C1 [Darragh, Pierce] Univ Utah, Sch Comp, 50 S Cent Campus Dr,Room 3190, Salt Lake City, UT 84112 USA.
   [Adams, Michael D.] Univ Michigan, Comp Sci & Engn Elect Engn & Comp Sci, Coll Engn, Bob & Betty Beyster Bldg,2260 Hayward St, Ann Arbor, MI 48109 USA.
C3 Utah System of Higher Education; University of Utah; University of
   Michigan System; University of Michigan
RP Darragh, P (corresponding author), Univ Utah, Sch Comp, 50 S Cent Campus Dr,Room 3190, Salt Lake City, UT 84112 USA.
OI Darragh, Pierce/0000-0002-6490-3466
CR Adams MD, 2016, ACM SIGPLAN NOTICES, V51, P224, DOI [10.1145/2908080.2908128, 10.1145/2980983.2908128]
   [Anonymous], 2015, Python Language Reference
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Danielsson NA, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P285
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   Edelmann R, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1036, DOI 10.1145/3385412.3385992
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   Jane Street, 2014, CORE BENCH
   JOHNSON M, 1995, COMPUT LINGUIST, V21, P405
   Leroy Xavier, 2020, OCAML SYSTEM RELEASE
   Mcbride C, 2001, DERIVATIVE REGULAR T
   McBride C, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P287, DOI 10.1145/1328438.1328474
   Might M, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P189
   Onzon Emmanuel, 2012, DYPGEN SELF EXTENSIB
   Owens S, 2009, J FUNCT PROGRAM, V19, P173, DOI 10.1017/S0956796808007090
   Pottier Francois, 2019, MENHIR
   Python Software Foundation, 2015, PYTH 3 4 3 PYTH 3 4 3
   Scott E, 2013, SCI COMPUT PROGRAM, V78, P1828, DOI 10.1016/j.scico.2012.03.005
   Scott E, 2010, ELECTRON NOTES THEOR, V253, P177, DOI 10.1016/j.entcs.2010.08.041
NR 19
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 108
DI 10.1145/3408990
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700022
OA gold
DA 2024-07-18
ER

PT J
AU Knoth, T
   Wang, D
   Reynolds, A
   Hoffmann, J
   Polikarpova, N
AF Knoth, Tristan
   Wang, Di
   Reynolds, Adam
   Hoffmann, Jan
   Polikarpova, Nadia
TI Liquid Resource Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Automated amortized resource analysis; Refinement types
AB This article presents liquid resource types, a technique for automatically verifying the resource consumption of functional programs. Existing resource analysis techniques trade automation for flexibility automated techniques are restricted to relatively constrained families of resource bounds, while more expressive proof techniques admitting value-dependent bounds rely on handwritten proofs. Liquid resource types combine the best of these approaches, using logical refinements to automatically prove precise bounds on a program's resource consumption. The type system augments refinement types with potential annotations to conduct an amortized resource analysis. Importantly, users can annotate data structure declarations to indicate how potential is allocated within the type, allowing the system to express bounds with polynomials and exponentials, as well as more precise expressions depending on program values. We prove the soundness of the type system, provide a library of flexible and reusable data structures for conducting resource analysis, and use our prototype implementation to automatically verify resource bounds that previously required a manual proof.
C1 [Knoth, Tristan; Reynolds, Adam; Polikarpova, Nadia] Univ Calif San Diego, San Diego, CA 92103 USA.
   [Wang, Di; Hoffmann, Jan] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 University of California System; University of California San Diego;
   Carnegie Mellon University
RP Knoth, T (corresponding author), Univ Calif San Diego, San Diego, CA 92103 USA.
EM tknoth@ucsd.edu; diw3@cs.cmu.edu; acreynol@ucsd.edu; jhoffmann@cmu.edu;
   npolikarpova@ucsd.edu
RI wang, di/HKD-8820-2023
OI Hoffmann, Jan/0000-0001-8326-0788; Wang, Di/0000-0002-2418-7987
FU DARPA [FA8750-18-C-0092]; National Science Foundation [1801369, 1845514,
   1812876, 1814358, 2007784]; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [1812876, 2007784,
   1814358] Funding Source: National Science Foundation; Division of
   Computing and Communication Foundations; Direct For Computer & Info Scie
   & Enginr [1845514] Funding Source: National Science Foundation
FX This article is based on research supported by DARPA under AA Contract
   FA8750-18-C-0092 and by the National Science Foundation under SaTC Award
   1801369, CAREER Award 1845514, and SHF Awards 1812876, 1814358, and
   2007784. Any opinions, findings, and conclusions contained in this
   document are those of the authors and do not necessarily reflect the
   views of the sponsoring organizations.
CR Albert E., 2015, In Tools and Algs. for the Construct. and Anal. of Syst. (TACAS'15)
   Albert E, 2011, J AUTOM REASONING, V46, P161, DOI 10.1007/s10817-010-9174-1
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Augusteijn L, 1999, LECT NOTES COMPUT SC, V1608, P1
   Avanzini M., 2013, 24 INT C REWR TECHN
   Brockschmidt Marc, 2014, TOOLS ALGORITHMS CON, V8413, P140
   Brunel A, 2014, LECT NOTES COMPUT SC, V8410, P351
   Cicek E., 2017, PRINC PROG LANG POPL
   Çiçek E, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P533, DOI 10.1145/3314221.3314603
   Danielsson NA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1328438.1328457
   Danner N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P140, DOI 10.1145/2784731.2784749
   Denney Ewen, 1999, THESIS U EDINBURGH
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Ghica DR, 2014, LECT NOTES COMPUT SC, V8410, P331
   GIRARD JY, 1992, THEOR COMPUT SCI, V97, P1, DOI 10.1016/0304-3975(92)90386-T
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Gulwani S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P375, DOI 10.1145/1542476.1542518
   Handley MAT, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371092
   Harper R, 2016, Practical Foundations for Programming Languages
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Hoffmann J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P357, DOI 10.1145/1926385.1926427
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6012, P287, DOI 10.1007/978-3-642-11957-6_16
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hofmann M., 2015, P 13 TLCA, V38, P241
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   Kincaid Z., 2019, Princ. of Prog. Lang. (POPL'19)
   Kincaid Z., 2017, PLDI
   Knoth T, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P253, DOI 10.1145/3314221.3314602
   Knoth Tristan., 2020, Liquid resource types (extended version)
   Lago U. D., 2011, LOGIC COMPUTER SCI L
   Noschinski L, 2013, J AUTOM REASONING, V51, P27, DOI 10.1007/s10817-013-9277-6
   Orchard D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341714
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Radicek I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158124
   Reynolds A, 2019, FORM METHOD SYST DES, V55, P73, DOI 10.1007/s10703-017-0270-2
   Rondon Patrick, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P744, DOI 10.1007/978-3-642-31424-7_59
   Rondon PM, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1379022.1375602
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   Sinn M, 2014, LECT NOTES COMPUT SC, V8559, P745, DOI 10.1007/978-3-319-08867-9_50
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   TARJAN RE, 1985, SIAM J ALGEBRA DISCR, V6, P306, DOI 10.1137/0606031
   Vazou N, 2013, LECT NOTES COMPUT SC, V7792, P209, DOI 10.1007/978-3-642-37036-6_13
   Walker D., 2002, Advanced Topics in Types and Programming Languages
   Wang P, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133903
   WEGBREIT B, 1975, COMMUN ACM, V18, P528, DOI 10.1145/361002.361016
   Zuleger F., 2011, STATIC ANAL S SAS 11
NR 47
TC 5
Z9 5
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 106
DI 10.1145/3408988
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700020
OA gold
DA 2024-07-18
ER

PT J
AU Sivaramakrishnan, KC
   Dolan, S
   White, L
   Jaffer, S
   Kelly, T
   Sahoo, A
   Parimala, S
   Dhiman, A
   Madhavapeddy, A
AF Sivaramakrishnan, K. C.
   Dolan, Stephen
   White, Leo
   Jaffer, Sadiq
   Kelly, Tom
   Sahoo, Anmol
   Parimala, Sudha
   Dhiman, Atul
   Madhavapeddy, Anil
TI Retrofitting parallelism onto OCaml
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrent garbage collection; backwards compatibility
ID GARBAGE COLLECTION; EXERCISE
AB OCaml is an industrial-strength, multi-paradigm programming language, widely used in industry and academia. OCaml is also one of the few modern managed system programming languages to lack support for shared memory parallel progranuning. This paper describes the design, a full-fledged implementation and evaluation of a mostly-concurrent garbage collector (GC) for the multicore extension of the OCaml programming language. Given that we propose to add parallelism to a widely used programming language with millions of lines of existing code, we face the challenge of maintaining backwards compatibility-not just in terms of the language features but also the performance of single-threaded code running with the new GC. To this end, the paper presents a series of novel techniques and demonstrates that the new GC strikes a balance between performance and feature backwards compatibility for sequential programs and scales admirably on modern multicore processors.
C1 [Sivaramakrishnan, K. C.; Sahoo, Anmol; Parimala, Sudha; Dhiman, Atul] IIT Madras, Madras, Tamil Nadu, India.
   [Dolan, Stephen; Jaffer, Sadiq; Kelly, Tom; Madhavapeddy, Anil] OCaml Labs, Cambridge, England.
   [White, Leo] Jane St, London, England.
   [Jaffer, Sadiq] Opsian, Cardiff, Wales.
   [Madhavapeddy, Anil] Univ Cambridge, Comp Lab, Cambridge, England.
   [Sivaramakrishnan, K. C.] Indian Inst Technol, Dept Comp Sci & Engn, Chennai, Tamil Nadu, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Madras; University of Cambridge; Indian Institute of
   Technology System (IIT System); Indian Institute of Technology (IIT) -
   Madras
RP Sivaramakrishnan, KC (corresponding author), IIT Madras, Madras, Tamil Nadu, India.; Sivaramakrishnan, KC (corresponding author), Indian Inst Technol, Dept Comp Sci & Engn, Chennai, Tamil Nadu, India.
RI Taheri, Zahra/AAA-6362-2022
OI Taheri, Zahra/0000-0001-8636-2798; Madhavapeddy,
   Anil/0000-0001-8954-2428; Sivaramakrishnan, KC/0000-0002-3491-1780
FU Royal Commission; Darwin College Research Fellowships; Jane Street;
   Tezos Foundation
FX We thank the anonymous reviewers, Francois Pottier, Pierre Chambart, Jon
   Harrop, Josh Berdine, Sam Goldman, and Guillaume Munch-Maccagnoni for
   their feedback on earlier drafts of the paper, Xavier Leroy and Damien
   Doligez and the core OCaml development team for their comments on the
   design of the Multicore OCaml GC. Portions of this research was funded
   via a Royal Commission for the Exhibition of 1851 and Darwin College
   Research Fellowships, and by grants from Jane Street and the Tezos
   Foundation.
CR Anderson TA, 2010, ACM SIGPLAN NOTICES, V45, P21
   [Anonymous], 2002, P 3 INT S MEM MAN BE, DOI [DOI 10.1145/512429.512439, 10.1145/512429.512439]
   [Anonymous], 2013, Real World OCaml: Functional programming for the masses
   Appel A. W., 1990, LISP and Symbolic Computation, V3, P343, DOI 10.1007/BF01807697
   Auhagen Sven., 2011, Proceedings of the 2011 ACM SIGPLAN Workshop on Memory Systems Performance and Correctness, MSPC '11, P51
   Bobot Francois, 2014, OCAML US DEV WORKSH
   Chandrasekaran Sivaramakrishnan Krishnamoorthy, 2018, DAGSTUHL REPORTS, V8, P104, DOI [10.4230/DagRep.8.4.104, DOI 10.4230/DAGREP.8.4.104]
   Click Cliff, 2005, P 1 ACMUSENIX INT C, P46, DOI [DOI 10.1145/1064979.1064988EVENT-PLACE:CHICAGO,IL,USA, 10.1145/1064979.1064988, DOI 10.1145/1064979.1064988]
   DIJKSTRA EW, 1978, COMMUN ACM, V21, P966, DOI 10.1145/359642.359655
   Dolan S, 2018, ACM SIGPLAN NOTICES, V53, P242, DOI [10.1145/3192366.3192421, 10.1145/3296979.3192421]
   Dolan S, 2018, LECT NOTES COMPUT SC, V10788, P98, DOI 10.1007/978-3-319-89719-6_6
   Doligez D., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P113, DOI 10.1145/158511.158611
   Doligez Damien, 1989, MEMOIRE DEA
   Doligez Damien, 2019, NEW ALLOCATOR OCAML
   Feeley M., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P179, DOI 10.1145/165180.165205
   Flood Christine H., 2016, P 13 INT C PRINC PRA, DOI DOI 10.1145/2972206.2972210
   Fluet M, 2010, J FUNCT PROGRAM, V20, P537, DOI 10.1017/S0956796810000201
   Gamari B., 2020, P 2020 ACM SIGPLAN I, P87
   Gammie P, 2015, ACM SIGPLAN NOTICES, V50, P99, DOI [10.1145/2737924.2738006, 10.1145/2813885.2738006]
   GoWriteBarrier, 2015, GO WRIT BARR
   GRIES D, 1977, COMMUN ACM, V20, P921, DOI 10.1145/359897.359903
   Guatto Adrien, 2018, ACM SIGPLAN Notices, V53, P81, DOI 10.1145/3200691.3178494
   Hayes B, 1997, ACM SIGPLAN NOTICES, V32, P176, DOI 10.1145/263700.263733
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Huelsbergen Lorenz., 1998, SIGPLAN Not, V34, P166, DOI DOI 10.1145/286860.286878
   Jones R., 2011, GARBAGE COLLECTION H
   Leroy X., 1990, 117 INRIA
   Madhavapeddy A, 2013, ACM SIGPLAN NOTICES, V48, P461, DOI 10.1145/2499368.2451167
   Marlow S, 2011, ACM SIGPLAN NOTICES, V46, P71, DOI 10.1145/2096148.2034685
   Marlow S, 2009, ACM SIGPLAN NOTICES, V44, P65, DOI 10.1145/1631687.1596563
   OCamlCAPI, 2019, INT C OCAML
   Raghunathan R, 2016, ACM SIGPLAN NOTICES, V51, P392, DOI 10.1145/3022670.2951935
   ReasonML, 2019, REASONML NEW SYNT TO
   Reppy J. H., 1993, Functional programming, concurrency, simulation and automated reasoning. International lecture series 1991-1992, P165
   Schneider Scott., 2006, ISMM, P84, DOI [DOI 10.1145/1133956.1133968, DOI 10.1145/1218063.1217938]
   Sivaramakrishnan KC, 2014, J FUNCT PROGRAM, V24, P613, DOI 10.1017/S0956796814000161
   Sivaramakrishnan KC, 2012, ACM SIGPLAN NOTICES, V47, P49, DOI 10.1145/2426642.2259005
   Sivaramakrishnan KC, 2020, ABS200411663 ARXIV
   SLEATOR DD, 1985, J ACM, V32, P652, DOI 10.1145/3828.3835
   STANDISH TA, 1980, DATA STRUCTURE TECHN
   Steele Jr Guy Lewis, 1977, DATA REPRESENTATIONS
   Swaine J, 2010, ACM SIGPLAN NOTICES, V45, P583, DOI 10.1145/1932682.1869507
   Tene G, 2011, ACM SIGPLAN NOTICES, V46, P79, DOI 10.1145/2076022.1993491
   Tew Kevin, 2011, P 7 S DYN LANG DLS 1, p85s96, DOI [10.1145/2047849.2047860, DOI 10.1145/2047849.2047860]
   Ueno K, 2016, ACM SIGPLAN NOTICES, V51, P421, DOI 10.1145/3022670.2951944
   Vechev MT, 2005, LECT NOTES COMPUT SC, V3586, P577
   Westrick S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371115
   YUASA T, 1990, J SYST SOFTWARE, V11, P181, DOI 10.1016/0164-1212(90)90084-Y
NR 48
TC 12
Z9 12
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 113
DI 10.1145/3408995
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700027
OA Green Submitted, gold, Green Published
DA 2024-07-18
ER

PT J
AU Barthe, G
   Hsu, J
   Liao, K
AF Barthe, Gilles
   Hsu, Justin
   Liao, Kevin
TI A Probabilistic Separation Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic independence; separation logic; verified cryptography
ID SIMULATION; SEMANTICS; RESOURCES
AB Probabilistic independence is a useful concept for describing the result of random sampling-a basic operation in all probabilistic languages-and for reasoning about groups of random variables. Nevertheless, existing verification methods handle independence poorly, if at all. We propose a probabilistic separation logic PSL, where separation models probabilistic independence. We first give a new, probabilistic model of the logic of bunched implications (BI). We then build a program logic based on these assertions, and prove soundness of the proof system. We demonstrate our logic by verifying information-theoretic security of cryptographic constructions for several well-known tasks, including private information retrieval, oblivious transfer, secure multi-party addition, and simple oblivious RAM. Our proofs reason purely in terms of high-level properties, like independence and uniformity.
C1 [Barthe, Gilles; Liao, Kevin] MPI Secur & Privacy, Bochum, Germany.
   [Barthe, Gilles] IMDEA Software Inst, Madrid, Spain.
   [Hsu, Justin] Univ Wisconsin Madison, Madison, WI USA.
   [Liao, Kevin] Univ Illinois, Urbana, IL USA.
C3 IMDEA Software Institute; University of Wisconsin System; University of
   Wisconsin Madison; University of Illinois System; University of Illinois
   Urbana-Champaign
RP Barthe, G (corresponding author), MPI Secur & Privacy, Bochum, Germany.; Barthe, G (corresponding author), IMDEA Software Inst, Madrid, Spain.
OI Hsu, Justin/0000-0002-8953-7060
FU Office of Naval Research [N00014-12-1-0914, N00014-15-1-2750,
   N00014-19-1-2292]; University of Wisconsin; Facebook TAV grant; Max
   Planck Institute for Software-Systems; NSF Graduate Research Fellowship
FX We thank the anonymous reviewers and our shepherd Ohad Kammar for their
   close reading and useful suggestions. The present work was sparked
   during a workshop at McGill University's Bellairs Research Institute.
   This work was also partially supported by Office of Naval Research under
   projects N00014-12-1-0914, N00014-15-1-2750, and N00014-19-1-2292, the
   University of Wisconsin, a Facebook TAV grant, an NSF Graduate Research
   Fellowship, and the Max Planck Institute for Software-Systems for
   hosting some of the authors.
CR Ackerman Nathanael L., 2019, IEEE S LOG COMP SCI
   [Anonymous], 1987, PROC 19 ANN ACM S TH
   [Anonymous], 2002, APPL LOG SER
   Barthe G., 2017, LPAR-21. 21st International Conference on Logic for Programming, V46, P385, DOI DOI 10.29007/VZ48
   Barthe G., 2018, LECT NOTES COMPUTER, V10801, P117, DOI [10.1007/978-3-319-89884-15, DOI 10.1007/978-3-319-89884-1_5]
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371123
   Barthe G, 2015, LECT NOTES COMPUT SC, V9056, P457, DOI 10.1007/978-3-662-46800-5_18
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Barthe Gilles, 2016, INT C AUT LANG PROGR, V107, DOI [10.4230/LIPIcs.ICALP.2016.107, DOI 10.4230/LIPICS.ICALP.2016.107]
   Batz K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290347
   Brookes S, 2007, THEOR COMPUT SCI, V375, P227, DOI 10.1016/j.tcs.2006.12.034
   Chan T.-H Hubert, 2018, Advances in Cryptology - ASIACRYPT 2018. 24th International Conference on the Theory and Application of Cryptology and Information Security. Proceedings: Lecture Notes in Computer Science (LNCS 11274), P158, DOI 10.1007/978-3-030-03332-3_7
   Chor B, 1995, AN S FDN CO, P41, DOI 10.1109/SFCS.1995.492461
   Chung K.-M., 2013, IACR Cryptology ePrint Archive, V2013, P243
   Cramer R, 2015, SECURE MULTIPARTY CO
   Darais David, 2020, Proceedings of the ACM on Programming Languages, V4, DOI 10.1145/3371118
   Docherty S., 2019, Bunched Logics: A Uniform Approach
   Ehrhard T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158147
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   Galmiche D, 2005, MATH STRUCT COMP SCI, V15, P1033, DOI 10.1017/S0960129505004858
   Gentry Craig, 2013, Privacy Enhancing Technologies.13th International Symposium, PETS 2013. Proceedings: LNCS 7981, P1, DOI 10.1007/978-3-642-39077-7_1
   Goldreich O, 1996, J ACM, V43, P431, DOI 10.1145/233551.233553
   Goldreich Oded, 1987, Proceedings of the 19th Annual ACM Symposium on Theory of Computing. STOC'87, P182, DOI DOI 10.1145/28395.28416
   Hoang Viet Tung, 2015, IACR CRYPTOLOGY EPRI, V2015, P624
   Impagliazzo R., 1990, Advances in Cryptology - CRYPTO '88. Proceedings, P8
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Katz J., 2014, INTRO MODERN CRYPTOG
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Lindell Y, 2017, INFORM SEC CRYPT TEX, P277, DOI 10.1007/978-3-319-57048-8_6
   Lozes Etienne, 2010, FCS PRIVMOD ED
   Micciancio Daniele., 1997, STOC 97, P456
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   Naor Moni, 2001, P 33 ANN ACM S THEOR, P492, DOI DOI 10.1145/380752.380844
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   Pym D. J., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P183, DOI 10.1109/LICS.1999.782614
   Pym DJ, 2004, THEOR COMPUT SCI, V315, P257, DOI 10.1016/j.tcs.2003.11.020
   Rabin MO, 2005, Cryptology ePrint Archive, P187
   Reynolds John C, 2008, An Introduction to Separation Logic
   Rivest R. L, 1999, Unconditionally secure commitment and oblivious transfer schemes using private channels and a trusted initializer
   SAHEBDJAHROMI N, 1980, THEOR COMPUT SCI, V12, P19, DOI 10.1016/0304-3975(80)90003-1
   Shi E, 2011, LECT NOTES COMPUT SC, V7073, P197, DOI 10.1007/978-3-642-25385-0_11
   Simpson A, 2018, ELECTRON NOTES THEOR, V336, P281, DOI 10.1016/j.entcs.2018.03.028
   Smith G, 2003, P IEEE CSFW, P3, DOI 10.1109/CSFW.2003.1212701
   Staton Sam, 2018, INT C AUT LANG PROGR, V141, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Stefanov Emil., 2013, ACM CCS, DOI DOI 10.1145/2508859.2516660
   Tassarotti J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290377
   Vákár M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290349
   Wang XS, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P215, DOI 10.1145/2660267.2660314
   Yang Hongseok, 2001, THESIS CHAMPAIGN IL
   Yao A. C., 1986, 27th Annual Symposium on Foundations of Computer Science (Cat. No.86CH2354-9), P162, DOI 10.1109/SFCS.1986.25
NR 53
TC 11
Z9 12
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 55
DI 10.1145/3371123
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400056
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Hu, JZS
   Lhoták, O
AF Hu, Jason Z. S.
   Lhotak, Ondrej
TI Undecidability of <i>D</i><sub>&lt;:</sub> and Its Decidable Fragments
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE D-<:; Dependent Object Types; Undecidability; Algorithmic Typing
AB Dependent Object Types (DOT) is a calculus with path dependent types, intersection types, and object self-references, which serves as the core calculus of Scala 3. Although the calculus has been proven sound, it remains open whether type checking in DOT is decidable. In this paper, we establish undecidability proofs of type checking and subtyping of D-<:, a syntactic subset of DOT. It turns out that even for D-<:, undecidability is surprisingly difficult to show, as evidenced by counterexamples for past attempts. To prove undecidability, we discover an equivalent definition of the D-<: subtyping rules in normal form. Besides being easier to reason about, this definition makes the phenomenon of subtyping reflection explicit as a single inference rule. After removing this rule, we discover two decidable fragments of D-<: subtyping and identify algorithms to decide them. We prove soundness and completeness of the algorithms with respect to the fragments, and we prove that the algorithms terminate. Our proofs are mechanized in a combination of Coq and Agda.
C1 [Hu, Jason Z. S.] McGill Univ, Sch Comp Sci, 3480 Univ St, Montreal, PQ H3A 0E9, Canada.
   [Lhotak, Ondrej] Univ Waterloo, Cheriton Sch Comp Sci, 200 Univ Ave West, Waterloo, ON N2L 3G1, Canada.
C3 McGill University; University of Waterloo
RP Hu, JZS (corresponding author), McGill Univ, Sch Comp Sci, 3480 Univ St, Montreal, PQ H3A 0E9, Canada.
EM zhong.s.hu@mail.mcgill.ca; olhotak@uwaterloo.ca
RI Hu, Jason Z.S./AAS-8728-2021
OI Hu, Jason Z.S./0000-0001-6710-6262
FU Natural Sciences and Engineering Research Council of Canada
FX We are grateful to anonymous reviewers for their constructive comments.
   This research was supported by the Natural Sciences and Engineering
   Research Council of Canada.
CR Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   Amin N., 2012, FOOL
   Amin N, 2017, ACM SIGPLAN NOTICES, V52, P666, DOI 10.1145/3093333.3009866
   Amin N, 2014, ACM SIGPLAN NOTICES, V49, P233, DOI [10.1145/2660193.2660216, 10.1145/2714064.2660216]
   Aspinall D, 2001, THEOR COMPUT SCI, V266, P273, DOI 10.1016/S0304-3975(00)00175-4
   BARENDREGT H, 1985, STUDIES LOGIC FDN MA, V103
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   CARDELLI L, 1994, INFORM COMPUT, V109, P4, DOI 10.1006/inco.1994.1013
   Chlipala Adam., 2017, Certified Programming with Dependent Types
   Coq Development Team, 2018, **DATA OBJECT**, DOI 10.5281/zenodo.1219885
   CURIEN PL, 1990, LECT NOTES COMPUT SC, V431, P132
   Forster Y, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P104, DOI 10.1145/3293880.3294096
   Forster Y, 2018, LECT NOTES COMPUT SC, V10895, P253, DOI 10.1007/978-3-319-94821-8_15
   Forster Y, 2017, LECT NOTES COMPUT SC, V10499, P189, DOI 10.1007/978-3-319-66107-0_13
   Greenman B, 2014, ACM SIGPLAN NOTICES, V49, P89, DOI [10.1145/2594291.2594308, 10.1145/2666356.2594308]
   Grigore R, 2017, ACM SIGPLAN NOTICES, V52, P73, DOI 10.1145/3093333.3009871
   Hu Zhong Sheng, 2019, THESIS U WATERLOO
   Kennedy Andrew, 2007, INT WORKSH FDN DEV O
   Mackay J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371134
   Martin F., 1997, INTRO AUDIOLOGY, V6th
   Nieto A, 2017, SCALA'17: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P2, DOI 10.1145/3136000.3136003
   Odersky M., 2003, LECT NOTES COMPUTER, DOI DOI 10.1007/978-3-540-45070-2
   Pfenning F, 2000, INFORM COMPUT, V157, P84, DOI 10.1006/inco.1999.2832
   PIERCE B, 1991, THESIS CARNEGIE MELL
   Pierce B. C., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P305, DOI 10.1145/143165.143228
   Pierce Benjamin C., 1997, 492 IND U COMP SCI D
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pierce Benjamin C., 2004, Advanced Topics in Types and Programming Languages
   Rapoport M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133870
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Wehr Stefan., 2009, Programming Languages and Systems, DOI DOI 10.1007/978-3-642-10672-9_10
NR 31
TC 4
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 9
DI 10.1145/3371077
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400010
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Padhye, R
   Lemieux, C
   Sen, K
   Simon, L
   Vijayakumar, H
AF Padhye, Rohan
   Lemieux, Caroline
   Sen, Koushik
   Simon, Laurent
   Vijayakumar, Hayawardh
TI FUZZFACTORY: Domain-Specific Fuzzing with Waypoints
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE fuzz testing; domain-specific fuzzing; frameworks; waypoints
AB Coverage-guided fuzz testing has gained prominence as a highly effective method of finding security vulnerabilities such as buffer overflows in programs that parse binary data. Recently, researchers have introduced various specializations to the coverage-guided fuzzing algorithm for different domain-specific testing goals, such as finding performance bottlenecks, generating valid inputs, handling magic-byte comparisons, etc. Each such solution can require non-trivial implementation effort and produces a distinct variant of a fuzzing tool. We observe that many of these domain-specific solutions follow a common solution pattern. In this paper, we present FuzzFactory, a framework for developing domain-specific fuzzing applications without requiring changes to mutation and search heuristics. FuzzFactory allows users to specify the collection of dynamic domain-specific feedback during test execution, as well as how such feedback should be aggregated. FuzzFactory uses this information to selectively save intermediate inputs, called waypoints, to augment coverage-guided fuzzing. Such waypoints always make progress towards domain-specific multi-dimensional objectives. We instantiate six domain-specific fuzzing applications using FuzzFactory: three re-implementations of prior work and three novel solutions, and evaluate their effectiveness on benchmarks from Google's fuzzer test suite. We also show how multiple domains can be composed to perform better than the sum of their parts. For example, we combine domain-specific feedback about strict equality comparisons and dynamic memory allocations, to enable the automatic generation of LZ4 bombs and PNG bombs.
C1 [Padhye, Rohan; Lemieux, Caroline; Sen, Koushik] Univ Calif Berkeley, Berkeley, CA 94720 USA.
   [Simon, Laurent; Vijayakumar, Hayawardh] Samsung Res Amer, San Francisco, CA USA.
C3 University of California System; University of California Berkeley;
   Samsung
RP Padhye, R (corresponding author), Univ Calif Berkeley, Berkeley, CA 94720 USA.
EM rohanpadhye@cs.berkeley.edu; clemieux@cs.berkeley.edu;
   ksen@cs.berkeley.edu; l.simon@samsung.com; h.vijayakuma@samsung.com
OI Padhye, Rohan/0000-0003-4939-033X
FU NSF [CCF-1409872, CNS-1817122]; AWS Cloud Credits for Research program
FX We thank the anonymous reviewers for their insightful feedback, which
   helped us improve the paper. This research is supported in part by gifts
   from Samsung, Facebook, and Futurewei, by NSF grants CCF-1409872 and
   CNS-1817122, and by the AWS Cloud Credits for Research program.
CR [Anonymous], 2019, P ACM PROGRAM LANG, V3, DOI [10.1145/3293882.3330576, DOI 10.1145/3293882.3330576]
   Aschermann C, 2019, 26TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2019), DOI 10.14722/ndss.2019.23412
   Böhme M, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2329, DOI 10.1145/3133956.3134020
   Bohme Marcel, 2016, ACM SIGSAC C COMP CO
   Chen P, 2018, P IEEE S SECUR PRIV, P711, DOI 10.1109/SP.2018.00046
   Chen YL, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1967
   Coppik Nicolas, 2019, 2019 12 IEEE C SOFTW, p48S58
   Google, SET TESTS FUZZ ENG
   Google, 2019, CONT FUZZ OP SOURC S
   Laeufer K, 2018, ICCAD-IEEE ACM INT, DOI 10.1145/3240765.3240842
   LafIntel, 2016, CIRC FUZZ ROADBL COM
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lemieux C, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P254, DOI 10.1145/3213846.3213874
   Lemieux C, 2018, IEEE INT CONF AUTOM, P475, DOI 10.1145/3238147.3238176
   Li YK, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P627, DOI 10.1145/3106237.3106295
   Luk CK, 2005, ACM SIGPLAN NOTICES, V40, P190, DOI 10.1145/1064978.1065034
   Manes V. J., 2018, CoRR
   Nilizadeh S, 2019, PROC INT CONF SOFTW, P176, DOI 10.1109/ICSE.2019.00034
   Ognawala S, 2018, 33RD ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P1475, DOI 10.1145/3167132.3167289
   Padhye R, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P329, DOI 10.1145/3293882.3330576
   Padhye R, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P398, DOI 10.1145/3293882.3339002
   Padhye Rohan, P 41 INT C SOFTW COM
   Peng H, 2018, P IEEE S SECUR PRIV, P697, DOI 10.1109/SP.2018.00056
   Petsios T, 2017, P IEEE S SECUR PRIV, P615, DOI 10.1109/SP.2017.27
   Petsios T, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2155, DOI 10.1145/3133956.3134073
   Pham Van-Thuan, 2018, ABS181109447 CORR
   Rawat S, 2017, 24TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2017), DOI 10.14722/ndss.2017.23404
   Serebryany K, 2017, STRUCTURE AWARE FUZZ
   Stallman Richard M., 2009, Using The Gnu Compiler Collection: A Gnu Manual For Gcc Version 4.3.3
   Stephens N, 2016, 23RD ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2016), DOI 10.14722/ndss.2016.23368
   Wang JJ, 2019, PROC INT CONF SOFTW, P724, DOI 10.1109/ICSE.2019.00081
   Yun I, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P745
   Zalewski M, 2014, American fuzzy lop
   Zalewski Michal, 2017, AM FUZZY LOP TECHNIC
NR 34
TC 32
Z9 35
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 174
DI 10.1145/3360600
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500059
OA gold
DA 2024-07-18
ER

PT J
AU Bodin, M
   Gardner, P
   Jensen, T
   Schmitt, A
AF Bodin, Martin
   Gardner, Philippa
   Jensen, Thomas
   Schmitt, Alan
TI Skeletal Semantics and Their Interpretations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE programming language; semantics; abstract interpretation
AB The development of mechanised language specification based on structured operational semantics, with applications to verified compilers and sound program analysis, requires huge effort. General theory and frameworks have been proposed to help with this effort. However, none of this work provides a systematic way of developing concrete and abstract semantics, connected together by a general consistency result. We introduce a skeletal semantics of a language, where each skeleton describes the complete semantic behaviour of a language construct. We define a general notion of interpretation, which provides a systematic and language-independent way of deriving semantic judgements from the skeletal semantics. We explore four generic interpretations: a simple well-formedness interpretation; a concrete interpretation; an abstract interpretation; and a constraint generator for flow-sensitive analysis. We prove general consistency results between interpretations, depending only on simple language-dependent lemmas. We illustrate our ideas using a simple WHILE language.
C1 [Bodin, Martin; Gardner, Philippa] Imperial Coll London, London, England.
   [Jensen, Thomas; Schmitt, Alan] Univ Rennes, INRIA, IRISA, Rennes, France.
C3 Imperial College London; Universite de Rennes; Inria
RP Bodin, M (corresponding author), Imperial Coll London, London, England.
RI Bodin, Martin/KGL-8386-2024
OI Bodin, Martin/0000-0003-3588-3782
FU ANR [AJACS ANR-14-CE28-0008, CISC ANR-17-CE25-0014-01]; EPSRC
   [EP/K008528/1]; SPF [EP/R034567/1] Funding Source: UKRI
FX This research has been partially supported by the ANR projects AJACS
   ANR-14-CE28-0008 and CISC ANR-17-CE25-0014-01. Bodin and Gardner were
   partially supported by the EPSRC programme grant `REMS: Rigorous
   Engineering of Mainstream Systems', EP/K008528/1.
CR [Anonymous], 1981, Technical Report DAIMI FN-19
   Blazy S, 2009, J AUTOM REASONING, V43, P263, DOI 10.1007/s10817-009-9148-3
   Bodin M, 2014, ACM SIGPLAN NOTICES, V49, P87, DOI 10.1145/2535838.2535876
   Cachera D, 2005, THEOR COMPUT SCI, V342, P56, DOI 10.1016/j.tcs.2005.06.004
   Charguéraud A, 2013, LECT NOTES COMPUT SC, V7792, P41, DOI 10.1007/978-3-642-37036-6_3
   Churchill M, 2015, LECT NOTES COMPUT SC, V8989, P132, DOI 10.1007/978-3-662-46734-3_4
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick., 1999, NATO ASI SERIES, VF
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Dreyer Derek, 2017, JFP UNPUB
   ECMA, 2018, ECMA SCRIPT 2018 LAN
   Gardner P, 2012, ACM SIGPLAN NOTICES, V47, P31, DOI 10.1145/2103621.2103663
   Harper R., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P194
   Jourdan JH, 2015, ACM SIGPLAN NOTICES, V50, P247, DOI [10.1145/2775051.2676966, 10.1145/2676726.2676966]
   Keidel S, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236767
   Klein G, 2003, THEOR COMPUT SCI, V298, P583, DOI 10.1016/S0304-3975(02)00869-1
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Li Liyi., 2018, IsaK: A Complete Semantics of K
   Midtgaard J, 2008, LECT NOTES COMPUT SC, V5079, P347
   Mosses P.D., 1992, ACTION SEMANTICS
   Mulligan DP, 2014, ACM SIGPLAN NOTICES, V49, P175, DOI 10.1145/2692915.2628143
   Nielson F., 1999, Principles of Program Analysis
   Norrish Michael, 1998, UCAMCLTR453
   Owens S, 2008, LECT NOTES COMPUT SC, V4960, P1
   PALSBERG J, 1995, ACM T PROGR LANG SYS, V17, P47, DOI 10.1145/200994.201001
   Pfenning F., 1999, Automated Deduction - CADE-16. 16th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.1632), P202
   Rosu G, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(4:28)2017
   Rosu G, 2010, J LOGIC ALGEBR PROGR, V79, P397, DOI 10.1016/j.jlap.2010.03.012
   Schmidt, P 5 LOMAPS WORKSH AN, V1192, P76
   Schmidt David A, 1997, BRICS REPORT SERIES, V4, P2
   Schmidt Dieter, 1995, P1
   Schmitt Martin., 2015, P 2015 ACM C CERT PR, p29S40
   Sewell P, 2010, J FUNCT PROGRAM, V20, P71, DOI 10.1017/S0956796809990293
   Stefanescu A, 2016, ACM SIGPLAN NOTICES, V51, P74, DOI [10.1145/2983990.2984027, 10.1145/3022671.2984027]
   Taly Ankur, 2008, LNCS, V5356
   Turi D, 1997, IEEE S LOG, P280, DOI 10.1109/LICS.1997.614955
   UUSTALU T, 2013, P 6 WORKSH PROGR LAN, V137, DOI DOI 10.4204/EPTCS.137.6
   Van Horn D, 2011, COMMUN ACM, V54, P101, DOI 10.1145/1995376.1995400
   Van Horn D, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
NR 40
TC 9
Z9 9
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 44
DI 10.1145/3290357
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300044
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Gorogiannis, N
   O'Hearn, PW
   Sergey, I
AF Gorogiannis, Nikos
   O'Hearn, Peter W.
   Sergey, Ilya
TI A True Positives Theorem for a Static Race Detector
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Concurrency; Static Analysis; Race Freedom; Abstract Interpretation
AB RACERD is a static race detector that has been proven to be effective in engineering practice: it has seen thousands of data races fixed by developers before reaching production, and has supported the migration of Facebook's Android app rendering infrastructure from a single-threaded to a multi-threaded architecture. We prove a True Positives Theorem stating that, under certain assumptions, an ideali ed theoretical version of the analysis never reports a false positive. We also provide an empirical evaluation of an implementation of this analysis, versus the original RACERD.
   The theorem was motivated in the first case by the desire to understand the observation from production that RACERD was providing remarkably accurate signal to developers, and then the theorem guided further analyzer design decisions. Technically, our result can be seen as saying that the analysis computes an under-approximation of an over-approximation, which is the reverse of the more usual (over of under) situation in static analysis. Until now, static analyzers that are effective in practice but unsound have often been regarded as ad hoc; in contrast, we suggest that, in the future, theorems of this variety might be generally useful in understanding, justifying and designing effective static analyses for bug catching.
C1 [Gorogiannis, Nikos; O'Hearn, Peter W.] Facebook, London, England.
   [Gorogiannis, Nikos] Middlesex Univ London, London, England.
   [O'Hearn, Peter W.] UCL, London, England.
   [Sergey, Ilya] Yale NUS Coll, Singapore, Singapore.
   [Sergey, Ilya] Natl Univ Singapore, Singapore, Singapore.
C3 Facebook Inc; Middlesex University; University of London; University
   College London; Yale NUS College; National University of Singapore
RP Gorogiannis, N (corresponding author), Facebook, London, England.; Gorogiannis, N (corresponding author), Middlesex Univ London, London, England.
EM nikosgorogiannis@fb.com; peteroh@fb.com; ilya.sergey@yale-nus.edu.sg
RI Gorogiannis, Nikos/C-2163-2008
OI Gkorogiannis, Kyriakos Nikolaos/0000-0001-8660-6609; Sergey,
   Ilya/0000-0003-4250-5392
FU EPSRC [EP/R006865/1] Funding Source: UKRI
CR [Anonymous], 1978, ANALYSE SEMANTIQUE P
   Atkey Robert., 2015, ELECT COMMUN EASST, V72, DOI DOI 10.14279/TUJ.ECEASST.72.1025
   Blackshear S., 2018, P ACM PROGRAM LANG, DOI DOI 10.1145/3276514
   Brookes Stephen, 2007, TH COMP SCI, V375, P1
   Cadar C, 2013, COMMUN ACM, V56, P82, DOI 10.1145/2408776.2408795
   Chou Andy, 2014, POPL 14 POPL 14
   Christakis M, 2015, LECT NOTES COMPUT SC, V8931, P336
   Clarke D, 2002, ACM SIGPLAN NOTICES, V37, P292, DOI 10.1145/583854.582447
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Flanagan C, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P121, DOI 10.1145/1542476.1542490
   Flanagan C, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P293, DOI 10.1145/1375581.1375618
   Giacobazzi R, 2015, ACM SIGPLAN NOTICES, V50, P261, DOI [10.1145/2775051.2676987, 10.1145/2676726.2676987]
   Goetz B, 2006, JAVA CONCURRENCY PRA
   Gorogiannis Nikos, 2018, 181103503 CORR 181103503 CORR, V1811
   Herlihy M., 2008, ART MULTIPROCESSOR P
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Livshits B, 2015, COMMUN ACM, V58, P44, DOI 10.1145/2644805
   Mansky W, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P151, DOI 10.1145/3018610.3018611
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Naik M, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P327
   Oh H, 2014, ACM SIGPLAN NOTICES, V49, P475, DOI [10.1145/2594291.2594318, 10.1145/2666356.2594318]
   Raghothaman M, 2018, ACM SIGPLAN NOTICES, V53, P722, DOI [10.1145/3192366.3192417, 10.1145/3296979.3192417]
   Ranzato F, 2013, LECT NOTES COMPUT SC, V7737, P15
   Sadowski Caitlin, 2008, WORKSH MECH MET WORKSH MECH MET
   Serebryany Konstantin, 2009, Proceedings of the Workshop on Binary Instrumentation and Applications, WBIA'09, P62, DOI DOI 10.1145/1791194.1791203
   TENNENT RD, 1977, ACTA INFORM, V8, P97, DOI 10.1007/BF00289243
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P343, DOI 10.1145/2480359.2429111
   Wilcox JR, 2018, ACM SIGPLAN NOTICES, V53, P354, DOI 10.1145/3200691.3178514
   Yang HS, 2002, LECT NOTES COMPUT SC, V2303, P402
NR 32
TC 11
Z9 11
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 57
DI 10.1145/3290370
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300057
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Memarian, K
   Gomes, VBF
   Davis, B
   Kell, S
   Richardson, A
   Watson, RNM
   Sewell, P
AF Memarian, Kayvan
   Gomes, Victor B. F.
   Davis, Brooks
   Kell, Stephen
   Richardson, Alexander
   Watson, Robert N. M.
   Sewell, Peter
TI Exploring C Semantics and Pointer Provenance
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE C
AB The semantics of pointers and memory objects in C has been a vexed question for many years. C values cannot be treated as either purely abstract or purely concrete entities: the language exposes their representations, but compiler optimisations rely on analyses that reason about provenance and initialisation status, not just runtime representations. The ISO WG14 standard leaves much of this unclear, and in some respects differs with de facto standard usage D which itself is difficult to investigate.
   In this paper we explore the possible source-language semantics for memory objects and pointers, in ISO C and in C as it is used and implemented in practice, focussing especially on pointer provenance. We aim to, as far as possible, reconcile the ISO C standard, mainstream compiler behaviour, and the semantics relied on by the corpus of existing C code. We present two coherent proposals, tracking provenance via integers and not; both address many design questions. We highlight some pros and cons and open questions, and illustrate the discussion with a library of test cases. We make our semantics executable as a test oracle, integrating it with the Cerberus semantics for much of the rest of C, which we have made substantially more complete and robust, and equipped with a web-interface GUI. This allows us to experimentally assess our proposals on those test cases. To assess their viability with respect to larger bodies of C code, we analyse the changes required and the resulting behaviour for a port of FreeBSD to CHERI, a research architecture supporting hardware capabilities, which (roughly speaking) traps on the memory safety violations which our proposals deem undefined behaviour. We also develop a new runtime instrumentation tool to detect possible provenance violations in normal C code, and apply it to some of the SPEC benchmarks. We compare our proposal with a source-language variant of the twin-allocation LLVM semantics proposal of Lee et al. Finally, we describe ongoing interactions with WG14, exploring how our proposals could be incorporated into the ISO standard.
C1 [Memarian, Kayvan; Gomes, Victor B. F.; Kell, Stephen; Richardson, Alexander; Watson, Robert N. M.; Sewell, Peter] Univ Cambridge, Cambridge, England.
   [Davis, Brooks] SRI Int, 333 Ravenswood Ave, Menlo Pk, CA 94025 USA.
C3 University of Cambridge; SRI International
RP Memarian, K (corresponding author), Univ Cambridge, Cambridge, England.
RI Davis, Brooks/HZL-3687-2023
OI Richardson, Alexander/0000-0002-6372-217X
FU EPSRC [EP/K008528/1]; ARM iCASE award; ERC [ELVER 789108]; Defense
   Advanced Research Projects Agency (DARPA); Air Force Research Laboratory
   (AFRL) [FA8750-10-C-0237, HR0011-18-C-0016]; EPSRC [EP/K008528/1]
   Funding Source: UKRI
FX This work was partially supported by EPSRC grant EP/K008528/1 (REMS), an
   ARM iCASE award, and ERC Advanced Grant ELVER 789108. This work is part
   of the CTSRD and ECATS projects sponsored by the Defense Advanced
   Research Projects Agency (DARPA) and the Air Force Research Laboratory
   (AFRL), under contracts FA8750-10-C-0237 and HR0011-18-C-0016. The
   views, opinions, and/or findings contained in this paper are those of
   the authors and should not be interpreted as representing the official
   views or policies, either expressed or implied, of the Department of
   Defense or the U.S. Government.
CR [Anonymous], 2012, RR7987 INRIA
   Batty M, 2015, LECT NOTES COMPUT SC, V9032, P283, DOI 10.1007/978-3-662-46669-8_12
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Besson F, 2017, LECT NOTES COMPUT SC, V10499, P81, DOI 10.1007/978-3-319-66107-0_6
   Besson F, 2015, LECT NOTES COMPUT SC, V9236, P67, DOI 10.1007/978-3-319-22102-1_5
   Besson Frederic, 2014, P PROGR LANG SYST 12, DOI [10.1007/978-3-319-12736-1_24, DOI 10.1007/978-3-319-12736-1_24]
   Boehm HJ, 2008, ACM SIGPLAN NOTICES, V43, P68, DOI 10.1145/1379022.1375591
   Chisnall D., 2016, C memory object and value semantics: the space of de facto and ISO standard
   Chisnall D, 2015, ACM SIGPLAN NOTICES, V50, P117, DOI [10.1145/2694344.2694367, 10.1145/2775054.2694367]
   Cohen E, 2009, ELECTRON NOTES THEOR, V254, P85, DOI 10.1016/j.entcs.2009.09.061
   Cook Jeffrey, 1994, 517D TRUST INF SYST
   Cuoq P, 2017, LECT NOTES COMPUT SC, V10145, P14, DOI 10.1007/978-3-319-52234-0_2
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Ellison C, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P533
   FSF, GNU COMPILER COLLECT
   FSF, 2018, USING GNU COMPILER C
   glibc, 2018, MEMCP
   Godbolt Matt, 2017, Compiler Explorer
   Gurevich Y., 1993, Computer Science Logic. 6th Workshop, CSL '92, P274
   Guth D, 2016, LECT NOTES COMPUT SC, V9779, P447, DOI 10.1007/978-3-319-41528-4_24
   Hathhorn C, 2015, ACM SIGPLAN NOTICES, V50, P336, DOI [10.1145/2813885.2737979, 10.1145/2737924.2737979]
   Huang Chin, 2018, CPROTO
   Jones Derek, 1992, APPL POSIX 1 CONFORM
   Jones Derek M, 2009, NEW C STANDARD EC CU
   Jourdan JH, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/3064848
   Kang J, 2015, ACM SIGPLAN NOTICES, V50, P326, DOI [10.1145/2737924.2738005, 10.1145/2813885.2738005]
   KCC, 2018, EX TEST SUIT
   Kell Stephen, 2015, P 2015 OOPSLA COMP O, P224
   Krebbers and Wiedijk, 2012, N1637 SUBTL ANSI ISO
   Krebbers Robbert, 2014, Interactive Theorem Proving. 5th International Conference, ITP 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8558, P543, DOI 10.1007/978-3-319-08970-6_36
   Krebbers R, 2015, CPP'15: PROCEEDINGS OF THE 2015 ACM CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P15, DOI 10.1145/2676724.2693571
   Krebbers R, 2014, ACM SIGPLAN NOTICES, V49, P101, DOI 10.1145/2535838.2535878
   Krebbers R, 2013, LECT NOTES COMPUT SC, V8307, P50, DOI 10.1007/978-3-319-03545-1_4
   Krebbers R, 2013, LECT NOTES COMPUT SC, V7794, P257, DOI 10.1007/978-3-642-37075-5_17
   Krebbers Robbert, 2015, THESIS RADBOUD U NIJ THESIS RADBOUD U NIJ
   Kroening Daniel, 2014, TOOLS ALGORITHMS CON, P389, DOI [10.1007/978-3-642-54862-8_26, DOI 10.1007/978-3-642-54862-8_26]
   Lee J, 2017, ACM SIGPLAN NOTICES, V52, P633, DOI [10.1145/3140587.3062343, 10.1145/3062341.3062343]
   Lee Juneyoung, 2018, P 2018 ACM SIGPLAN I
   Leroy X, 2008, J AUTOM REASONING, V41, P1, DOI 10.1007/s10817-008-9099-0
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Leroy Xavier, 2018, COMPCERT 3 4
   Memarian Kayvan, 2016, PLDI 2016
   Memarian Kayvan, SC22WG14N2015 ISO
   Memarian Kayvan, 2018, N2263 CLARIFYING POI
   Memarian Kayvan, 2016, CLARIFYING POINTER P
   Mulligan DP, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P175, DOI 10.1145/2628136.2628143
   Nagarakatte S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P245, DOI 10.1145/1542476.1542504
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   Nethercote N, 2007, VEE'07: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON VIRTUAL EXECUTION ENVIRONMENTS, P65
   Norrish M, 1999, LECT NOTES COMPUT SC, V1576, P147
   Norrish Michael, 1998, UCAMCLTR453
   Papaspyrou Nikolaos S., 1998, A Formal Semantics for the C Programming Language
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Regehr J, 2012, ACM SIGPLAN NOTICES, V47, P335, DOI 10.1145/2345156.2254104
   Runtime Verification Inc, 2017, RV MATCH
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Shiraishi S, 2015, 2015 IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING WORKSHOPS (ISSREW), P12, DOI 10.1109/ISSREW.2015.7392027
   TrustInSoft, 2017, TIS INT
   Tuch Harvey, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P97, DOI 10.1145/1190216.1190234
   Watson RNM, 2015, P IEEE S SECUR PRIV, P20, DOI 10.1109/SP.2015.9
   Watson Robert N. M., 2018, UCAMCLTR927
   WG14, 2004, DEF REP 260
   WG14, 2011, 9899201X WG14 ISOIEC
   WG14, 2017, JTC1SC22WG14C
   Woodruff J, 2014, CONF PROC INT SYMP C, P457, DOI 10.1109/ISCA.2014.6853201
NR 65
TC 21
Z9 25
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 67
DI 10.1145/3290380
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300067
OA gold, Green Accepted, Green Published
DA 2024-07-18
ER

PT J
AU Omar, C
   Voysey, I
   Chugh, R
   Hammer, MA
AF Omar, Cyrus
   Voysey, Ian
   Chugh, Ravi
   Hammer, Matthew A.
TI Live Functional Programming with Typed Holes
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE live programming; gradual typing; contextual modal type theory; typed
   holes; structured editing
AB Live programming environments aim to provide programmers (and sometimes audiences) with continuous feedback about a program's dynamic behavior as it is being edited. The problem is that programming languages typically assign dynamic meaning only to programs that are complete, i.e. syntactically well-formed and free of type errors. Consequently, live feedback presented to the programmer exhibits temporal or perceptive gaps.
   This paper confronts this "gap problem" from type-theoretic first principles by developing a dynamic semantics for incomplete functional programs, starting from the static semantics for incomplete functional programs developed in recent work on Hazelnut. We model incomplete functional programs as expressions with holes, with empty holes standing for missing expressions or types, and non-empty holes operating as membranes around static and dynamic type inconsistencies. Rather than aborting when evaluation encounters any of these holes as in some existing systems, evaluation proceeds around holes, tracking the closure around each hole instance as it flows through the remainder of the program. Editor services can use the information in these hole closures to help the programmer develop and confirm their mental model of the behavior of the complete portions of the program as they decide how to 1111 the remaining holes. Hole closures also enable a fill-and-resume operation that avoids the need to restart evaluation after edits that amount to hole filling. Formally, the semantics borrows machinery from both gradual type theory (which supplies the basis for handling unfilled type holes) and contextual modal type theory (which supplies a logical basis for hole closures), combining these and developing additional machinery necessary to continue evaluation past holes while maintaining type safety. We have mechanized the metatheory of the core calculus, called Hazelnut Live, using the Agda proof assistant.
   We have also implemented these ideas into the Hazel programming environment. The implementation inserts holes automatically, following the Hazelnut edit action calculus, to guarantee that every editor state has some (possibly incomplete) type. Taken together with this paper's type safety property, the result is a proof-of-concept live programming environment where rich dynamic feedback is truly available without gaps, i.e. for every reachable editor state.
C1 [Omar, Cyrus; Chugh, Ravi] Univ Chicago, Chicago, IL 60637 USA.
   [Voysey, Ian] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Hammer, Matthew A.] Univ Colorado, Boulder, CO 80309 USA.
C3 University of Chicago; Carnegie Mellon University; University of
   Colorado System; University of Colorado Boulder
RP Omar, C (corresponding author), Univ Chicago, Chicago, IL 60637 USA.
EM comar@cs.uchicago.edu; iev@cs.cmu.edu; rchugh@cs.uchicago.edu;
   matthew.hammer@colorado.edu
RI Omar, Cyrus/JXM-9227-2024
OI Voysey, Ian/0000-0002-6041-2010
FU National Science Foundation [CCF-1619282, SHF-1814900, SHF-1817145];
   AFRL [FA8750-16-2-0042]; DARPA [FA8750-16-2-0042]
FX We thank Brigitte Pientka, Jonathan Aldrich, Joshua Sunshine, Michael
   Hilton, Claire LeGoues, Conor McBride, the participants of the PL
   reading group at UChicago, the participants of the LIVE 2017 and Off the
   Beaten Track (OBT) 2017 workshops, and the anonymous referees for their
   insights and feedback on various iterations of thiswork. This material
   was supported by a gift from Facebook, from the National Science
   Foundation under grant numbers CCF-1619282, SHF-1814900 and SHF-1817145,
   and from AFRL and DARPA under agreement #FA8750-16-2-0042. The U.S.
   Government is authorized to reproduce and distribute reprints for
   Governmental purposes notwithstanding any copyright notation thereon.
   Any opinions, findings, and conclusions or recommendations expressed in
   this material are those of the authors and do not necessarily reflect
   the views of Facebook, NSF, DARPA, AFRL or the U.S. Government.
CR Abadi M., 1991, Journal of Functional Programming, V1, P375, DOI 10.1017/S0956796800000186
   ABEL A, 2010, INT WORKSH LOG FRAM, DOI DOI 10.4204/EPTCS.34.3
   Abramsky S., 1990, LAZY LAMBDA CALCULUS, P65
   Aho A. V., 1972, SIAM Journal on Computing, V1, P305, DOI 10.1137/0201022
   Alkemade Thijs, 2014, LANGUAGE OPTIONS GLA
   AMORIM LED, 2016, INT C SOFTW LANG ENG, DOI DOI 10.1145/2997364.2997374
   Anand, 2018, INT C COMP SCI SOFTW
   [Anonymous], 1971, The Psychology of Computer Programming
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Awodey S, 2012, IEEE S LOG, P95, DOI 10.1109/LICS.2012.21
   AYDEMIR BE, 2005, INT C THEOR PROV HIG, DOI DOI 10.1007/11541868_4
   Baldoni R, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3182657
   BARENDREGT HP, 1984, STUDIES LOGIC, V103
   Bayne M, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P521, DOI 10.1145/1985793.1985864
   BOLINGBROKE MC, 2010, S HASKELL, DOI DOI 10.1145/1863523.1863540
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Burnett MM, 1998, 1998 IEEE SYMPOSIUM ON VISUAL LANGUAGES, PROCEEDINGS, P126, DOI 10.1109/VL.1998.706155
   Charles, 1991, THESIS
   CHEN S, 2014, PRINCIPLES PROGRAMMI, DOI DOI 10.1145/2535838.2535863
   Chen S, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S095679681700020X
   Christiansen DavidRaymond., 2013, Bidirectional typing rules: A tutorial
   Chuchem Yair, 2016, PROJECT LAMDU
   CHUGH R, 2016, PROGRAMMING LANGUAGE, DOI DOI 10.1145/2908080.2908103
   Cimini M, 2016, ACM SIGPLAN NOTICES, V51, P443, DOI 10.1145/2914770.2837632
   CURIEN PL, 1991, THEOR COMPUT SCI, V82, P389, DOI 10.1016/0304-3975(91)90230-Y
   Czaplicki Evan, 2018, INTRO ELM
   Czaplicki Evan, 2012, THESIS HARVARD U
   DALVES C, 2017, INT WORKSH TRENDS FU, DOI DOI 10.4204/EPTCS.270.2
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   de Groote P, 2002, INFORM COMPUT, V178, P441, DOI 10.1006/inco.2002.3147
   Devriese D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158126
   DUNFIELD J, 2013, INT C FUNCT PROGR IC, DOI DOI 10.1145/2500365.2500582
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   FERREIRA F, 2014, S PRINC PRACT DECL P, DOI DOI 10.1145/2643135.2643153
   Fitzgerald S, 2008, COMPUT SCI EDUC, V18, P93, DOI 10.1080/08993400802114508
   Flutter Developers, 2017, TECHN OV FLUTT
   Foster Jeffrey S, 2012, INT C VER SOFTW THEO, DOI [10.1007/978-3-642-27705-4_22, DOI 10.1007/978-3-642-27705-4_22]
   Foster Jeffrey S, 2014, PROGRAMMING LANGUAGE, DOI [10.1145/25942912594324, DOI 10.1145/25942912594324]
   FRANKLE J, 2016, PRINCIPLES PROGRAMMI, DOI DOI 10.1145/2837614.2837629
   GARCIA R, 2013, INT C FUNCT PROGR IC, DOI DOI 10.1145/2500365.2500603
   Garcia Ronald., 2015, Principles of Programming Languages (POPL), DOI [DOI 10.1145/2676726.2676992, 10.1145/2676726.2676992]
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Graham S. L., 1979, SIGPLAN Notices, V14, P168, DOI 10.1145/872732.806967
   Guo Philip J., 2013, P 44 ACM TECHN S COM, P579
   Hammer, 2018, ARXIV EPRINTS
   Hammer Matthew A., 2017, PRINCIPLES PROGRAMMI
   Harper, 2005, INT WORKSH TYP LANG, DOI DOI 10.1145/1040294.1040301
   Harper R, 2000, FOUNDAT COMPUT, P341
   Harper R, 2016, Practical Foundations for Programming Languages
   HEMPEL B, 2016, S US INT SOFTW TECH, DOI DOI 10.1145/2984511.2984575
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Hicks M, 2005, ACM T PROGR LANG SYS, V27, P1049, DOI 10.1145/381694.378798
   Hritcu C, 2013, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2013.10
   Igarashi Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110284
   Jojgov Gueorgui I, 2002, INT WORKSH COMP SCI, DOI [10.1007/3-540-45793-3_36, DOI 10.1007/3-540-45793-3_36]
   Jones, 2017, EDIT CODE CONTINUE D
   Kahn Gilles, 1977, Information Processing, P993
   Kato, 2013, PROGRAMMING LANGUAGE, DOI [10.1145/2462156.2462170, DOI 10.1145/2462156.2462170]
   Kats LCL, 2009, ACM SIGPLAN NOTICES, V44, P445, DOI 10.1145/1639949.1640122
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   KORKUT J, 2018, INT WORKSHOP TYPE DR, DOI DOI 10.1145/3240719.3241791
   Lerner BS., 2006, Proceedings of the ACM Workshop on ML, 2006, Portland, Oregon, USA, September 16, 2006, P63, DOI DOI 10.1145/1159876
   Levy J.-J., 1999, Foundations of Software Technology and Theoretical Computer Science. 19th Conference. Proceedings (Lecture Notes in Computer Science Vol.1738), P181
   Magnusson, 1995, THESIS CHALMERS I TE
   Maranget, 2005, LECT NOTES COMPUTER, V3838, p70S87, DOI [10.1007/11601548_7, DOI 10.1007/11601548_7]
   McBride Conor, 2000, THESIS U EDINBURG
   McCauley R, 2008, COMPUT SCI EDUC, V18, P67, DOI 10.1080/08993400802114581
   McDirmid S, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P623
   Muller, 2014, IEEE S VIS LANG HUM, DOI [10.1109/VLHCC.2014, DOI 10.1109/VLHCC.2014]
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   NELSON GL, 2017, C INT COMP ED RES IC, DOI DOI 10.1145/3105726.3106178
   Ningning Xie, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P3, DOI 10.1007/978-3-319-89884-1_1
   Norell U., 2007, THESIS DEP COMPUTER
   Norell Ulf, 2009, P 4 INT WORKSHOP TYP, P1, DOI DOI 10.1145/1481861.1481862
   ODERSKY M, 2001, PRINCIPLES PROGRAMMI, DOI DOI 10.1145/360204.360207
   Omar Cyrus, 2017, LIPIcs, V71, DOI [DOI 10.4230/LIPICS.SNAPL.2017.11, 10.4230/LIPICS.SNAPL.2017.11]
   Pavlinovic Z, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P412, DOI 10.1145/2784731.2784765
   Perera R, 2012, ACM SIGPLAN NOTICES, V47, P365, DOI 10.1145/2398856.2364579
   Pérez F, 2007, COMPUT SCI ENG, V9, P21, DOI 10.1109/MCSE.2007.53
   PIENTKA B, 2015, INT C AUT DED, DOI DOI 10.1007/978-3-319-21401-6_18
   Pientka B, 2010, LECT NOTES COMPUT SC, V6009, P1, DOI 10.1007/978-3-642-12251-4_1
   Pientka Brigitte, 2008, P ACM SIGPLAN S PRIN, P163, DOI [10.1145/1389449.1389469, DOI 10.1145/1389449.1389469]
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Rein Patrick, 2019, Programming Journal, V3, P1, DOI DOI 10.22152/PROGRAMMING-JOURNAL.ORG/2019/3/1
   Resnick M, 2009, COMMUN ACM, V52, P60, DOI 10.1145/1592761.1592779
   Ricciotti W, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110258
   Rinard Martin C, 2012, DESIGN AUTOMATION C, DOI [10.1145/2228360.2228526, DOI 10.1145/2228360.2228526]
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   SIEK JG, 2010, PRINCIPLES PROGRAMMI, DOI DOI 10.1145/1706299.1706342
   SOLARLEZAMA A, 2009, AS PROGR LANG SYST A, DOI DOI 10.1007/978-3-642-10672-9_3
   Srivastava S., 2013, STTT, V15, P497, DOI DOI 10.1007/S10009-012-0223-4
   Stoyle G, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1255450.1255455
   Sulír M, 2018, INT C PROGRAM COMPRE, P344, DOI 10.1145/3196321.3196364
   Takikawa Asumu., 2015, Proc. European Conference on Object-Oriented Programming, P4
   Tanimoto S. L., 1990, Journal of Visual Languages and Computing, V1, P127, DOI 10.1016/S1045-926X(05)80012-6
   Tanimoto SL, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON LIVE PROGRAMMING (LIVE), P31, DOI 10.1109/LIVE.2013.6617346
   Tanter Eric, 2017, PRINCIPLES PROGRAMMI
   Tolmach A., 1995, Journal of Functional Programming, V5, P155, DOI 10.1017/S0956796800001313
   URBAN C, 2007, C AUT DED CADE, DOI DOI 10.1007/978-3-540-73595-3_4
   Victor, 2012, CAN U SOFTW ENG C CU
   Voelter M, 2014, LECT NOTES COMPUT SC, V8706, P41, DOI 10.1007/978-3-319-11245-9_3
   Voelter Markus., 2012, PROC C SYSTEMS PROGR, P121, DOI DOI 10.1145/2384716.2384767
   von Henke F., 1998, AUTOMATED DEDUCTION, VI
   VYTINIOTIS D, 2012, ICFP, V47, P341, DOI DOI 10.1145/2364527.2364554
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Wakeling D, 2007, J FUNCT PROGRAM, V17, P131, DOI 10.1017/S0956796806006186
   Weimer Westley, 2016, INT C FUNCT PROGR IC, DOI [10.1145/2951913, DOI 10.1145/2951913]
   Weintrop D, 2018, PROCEEDINGS OF THE 2018 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI 2018), DOI 10.1145/3173574.3173940
   Whitington John, 2017, 6 S LANGUAGES APPL T, DOI [10.4230/OASIcs.SLATE.2017.7, DOI 10.4230/OASICS.SLATE.2017.7]
   Wilensky, 2015, INT C INT DES CHILDR, DOI [10.1145/2771839, DOI 10.1145/2771839]
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Yoon Y, 2014, S VIS LANG HUM CEN C, P101, DOI 10.1109/VLHCC.2014.6883030
   Zhang DF, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/3121137
NR 119
TC 27
Z9 28
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 14
DI 10.1145/3290327
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300014
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Bhanuka, I
   Parreaux, L
   Binder, D
   Brachthäuser, JI
AF Bhanuka, Ishan
   Parreaux, Lionel
   Binder, David
   Brachthaeuser, Jonathan Immanuel
TI Getting into the Flow: Towards Better Type Error Messages for
   Constraint-Based Type Inference
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type inference; error messages; subtyping; data flow; constraint solving
AB Creating good type error messages for constraint-based type inference systems is difficult. Typical type error messages reflect implementation details of the underlying constraint-solving algorithms rather than the specific factors leading to type mismatches. We propose using subtyping constraints that capture data flow to classify and explain type errors. Our algorithm explains type errors as faulty data flows, which programmers are already used to reasoning about, and illustrates these data flows as sequences of relevant program locations. We show that our ideas and algorithm are not limited to languages with subtyping, as they can be readily integrated with Hindley-Milner type inference. In addition to these core contributions, we present the results of a user study to evaluate the quality of our messages compared to other implementations. While the quantitative evaluation does not show that flow-based messages improve the localization or understanding of the causes of type errors, the qualitative evaluation suggests a real need and demand for flow-based messages.
C1 [Bhanuka, Ishan; Parreaux, Lionel] HKUST, Hong Kong, Peoples R China.
   [Binder, David; Brachthaeuser, Jonathan Immanuel] Univ Tubingen, Tubingen, Germany.
C3 Hong Kong University of Science & Technology; Eberhard Karls University
   of Tubingen
RP Bhanuka, I (corresponding author), HKUST, Hong Kong, Peoples R China.
OI Brachthauser, Jonathan Immanuel/0000-0001-9128-0391; Binder,
   David/0000-0003-1272-0972; Parreaux, Lionel/0000-0002-8805-0728
CR Bastiaan Heeren, 2005, Ph. D. Dissertation, P26
   Becker BA, 2019, PROCEEDINGS OF THE WORKING GROUP REPORTS ON INNOVATION AND TECHNOLOGY IN COMPUTER SCIENCE EDUCATION (ITICSE-WGR '19), P177, DOI 10.1145/3344429.3372508
   Bhanuka Ishan, 2023, Getting Into The Flow: Towards Better Type Error Messages for Constraint-Based Type Inference, DOI [10.5281/zenodo.8332129, DOI 10.5281/ZENODO.8332129]
   Dolan S, 2017, ACM SIGPLAN NOTICES, V52, P60, DOI 10.1145/3093333.3009882
   Dolan Stephen, 2017, Algebraic Subtyping: Distinguished Dissertation 2017, DOI [10.5555/3180976, DOI 10.5555/3180976]
   DUBOULAY B, 1981, INT J MAN MACH STUD, V14, P237, DOI 10.1016/S0020-7373(81)80056-9
   DUNN OJ, 1964, TECHNOMETRICS, V6, P241, DOI 10.2307/1266041
   Feigenspan J., 2012, 2012 IEEE 20th International Conference on Program Comprehension, P73
   Gast H., 2004, Implementation and Application of Functional Languages. 16th International Workshop, IFL 2004. Revised Selected Papers (Lecture Notes in Computer Science Vol. 3474), P72
   Geng CQ, 2022, LECT NOTES COMPUT SC, V13658, P196, DOI 10.1007/978-3-031-21037-2_10
   Heeren B., 2003, Proceedings of the ACM SIGPLAN Workshop on Haskell, Haskell 2003, Uppsala, Sweden, August 28, 2003, P62, DOI [DOI 10.1145/871895.871902, 10.1145/871895.871902]
   Henninger F, 2022, BEHAV RES METHODS, V54, P556, DOI 10.3758/s13428-019-01283-5
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Kochhar Pavneet Singh, 2016, 25 INT S SOFTWARE TE, P165, DOI 10.1145/2931037.2931051
   KRUSKAL WH, 1952, J AM STAT ASSOC, V47, P583, DOI 10.1080/01621459.1952.10483441
   Le Botlan D, 2003, ACM SIGPLAN NOTICES, V38, P27, DOI 10.1145/944746.944709
   Loncaric C, 2016, ACM SIGPLAN NOTICES, V51, P781, DOI 10.1145/3022671.2983994
   Marceau G, 2011, SIGCSE 11: PROCEEDINGS OF THE 42ND ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P499
   Marceau Guillaume., 2011, Proceedings of the 10th SIGPLAN symposium on New ideas, new paradigms, and reflections on programming and software, ONWARD '11, P3
   Neubauer M, 2003, ACM SIGPLAN NOTICES, V38, P15, DOI 10.1145/944746.944708
   Parreaux L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563304
   Parreaux L, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409006
   Remy D., 1993, Extension of ML type system with a sorted equation theory on types
   Seidel EL, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3138818
   Shevchenko Y, 2022, BEHAV RES METHODS, V54, P3118, DOI 10.3758/s13428-021-01776-2
   Vytiniotis D, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P39
   Wand Mitchell, 1986, POPL, P38, DOI [DOI 10.1145/512644.512648, 10.1145/512644.512648]
   Wrenn J, 2017, PROCEEDINGS OF THE 2017 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD!'17), P134, DOI 10.1145/3133850.3133862
   Zhang DF, 2014, ACM SIGPLAN NOTICES, V49, P569, DOI 10.1145/2535838.2535870
NR 29
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 237
DI 10.1145/3622812
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100017
OA gold
DA 2024-07-18
ER

PT J
AU Rossberg, A
AF Rossberg, Andreas
TI Mutually Iso-Recursive Subtyping
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type systems; recursive types; subtyping; higher-order subtyping
AB Iso-recursive types are often taken as a type-theoretic model for type recursion as present in many programming languages, e.g., classes in object-oriented languages or algebraic datatypes in functional languages. Their main advantage over an equi-recursive semantics is that they are simpler and algorithmically less expensive, which is an important consideration when the cost of type checking matters, such as for intermediate or low-level code representations, virtual machines, or runtime casts. However, a closer look reveals that iso-recursion cannot, in its standard form, efficiently express essential type system features like mutual recursion or non-uniform recursion. While it has been folklore that mutual recursion and non-uniform type parameterisation can nicely be handled by generalising to higher kinds, this encoding breaks down when combined with subtyping: the classic "Amber" rule for subtyping iso-recursive types is too weak to express mutual recursion without falling back to encodings of quadratic size.
   We present a foundational core calculus of iso-recursive types with declared subtyping that can express both inter- and intra-recursion subtyping without such blowup, including subtyping between constructors of higher or mixed kind. In a second step, we identify a syntactic fragment of this general calculus that allows for more eficient type checking without "deep" substitutions, by observing that higher-kinded iso-recursive types can be inserted to "guard" against unwanted V -reductions. This fragment closely resembles the structure of typical nominal subtype systems, but without requiring nominal semantics. It has been used as the basis for a proposed extension of WebAssembly with recursive types.
EM rossberg@mpi-sws.org
OI Rossberg, Andreas/0000-0003-3137-3160
CR Abadi M, 1996, IEEE S LOG, P242, DOI 10.1109/LICS.1996.561324
   Abadi M., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P396, DOI 10.1145/237721.237809
   Abel A, 2008, LECT NOTES COMPUT SC, V5213, P446, DOI 10.1007/978-3-540-87531-4_32
   Abel A, 2009, J FUNCT PROGRAM, V19, P287, DOI 10.1017/S0956796809007266
   AMADIO RM, 1993, ACM T PROGR LANG SYS, V15, P575, DOI 10.1145/155183.155231
   [Anonymous], 1993, Principles of Programming Languages (POPL)
   Baldan P, 1999, INFORM COMPUT, V153, P173, DOI 10.1006/inco.1999.2802
   Brandt M., 1998, Fundamenta Informaticae, V33, P309
   Bruce KB, 1999, INFORM COMPUT, V155, P108, DOI 10.1006/inco.1999.2829
   Canning Peter, 1989, C FUNCT PROGR LANG C, P273, DOI [10.1145/99370.99392, DOI 10.1145/99370.99392]
   CARDELLI L, 1986, LECT NOTES COMPUT SC, V242, P21
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   Cardelli L., 1994, THEORETICAL ASPECTS, P373
   Compagnoni AB, 1995, LECT NOTES COMPUT SC, V933, P46, DOI 10.1007/BFb0022246
   COOK WR, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P125, DOI 10.1145/96709.96721
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P50, DOI 10.1145/301631.301641
   Ducournau R, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1922649.1922655
   Gapeyev V, 2002, J FUNCT PROGRAM, V12, P511, DOI 10.1017/S0956796802004318
   Ghelli G, 1997, INFORM COMPUT, V139, P39, DOI 10.1006/inco.1997.2662
   Glew Neal, 2012, Subtyping for F-Bounded Quanti~ers and Equirecursive Types, P66
   Glew Neal, 2000, Object-oriented Programming, Systems, Languages and Applications (OOPSLA), P311
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   Harper R, 2000, FOUNDAT COMPUT, P341
   Hosoya Haruo, 1998, Datatypes and Subtyping
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Ligatti J, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/2994596
   Lindley Sam, 2022, Stack Switching Proposal for WebAssembly
   Martres Guillaume, 2022, Ph. D. Dissertation
   Okasaki C, 1999, ACM SIGPLAN NOTICES, V34, P28, DOI 10.1145/317765.317781
   Phipps-Costin Luna, 2023, Object-oriented Programming, Systems, Languages and Applications (OOPSLA)
   Pierce B, 1997, THEOR COMPUT SCI, V176, P235, DOI 10.1016/S0304-3975(96)00096-5
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Rossberg Andreas, 2023, Mutually Iso-recursive Subtyping (Expanded)
   Rossberg Andreas, 2022, GC Proposal for WebAssembly
   Steffen Martin, 1997, Ph. D. Dissertation
   Watkins K, 2004, ANN NY ACAD SCI, V3085, P355
   Zhou YD, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3549537
NR 38
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 234
DI 10.1145/3622809
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100014
OA gold
DA 2024-07-18
ER

PT J
AU Sano, C
   Kavanagh, R
   Pientka, B
AF Sano, Chuta
   Kavanagh, Ryan
   Pientka, Brigitte
TI Mechanizing Session-Types using a Structural View: Enforcing Linearity
   without Linearity
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE linear logic; concurrency; session types; verification; logical
   framework
ID FRAMEWORK; PI
AB Session types employ a linear type system that ensures that communication channels cannot be implicitly copied or discarded. As a result, many mechanizations of these systems require modeling channel contexts and carefully ensuring that they treat channels linearly. We demonstrate a technique that localizes linearity conditions as additional predicates embedded within type judgments, which allows us to use structural typing contexts instead of linear ones. This technique is especially relevant when leveraging (weak) higher-order abstract syntax to handle channel mobility and the intricate binding structures that arise in sessiontyped systems.
   Following this approach, we mechanize a session-typed system based on classical linear logic and its type preservation proof in the proof assistant Beluga, which uses the logical framework LF as its encoding language. We also prove adequacy for our encoding. This shows the tractability and effectiveness of our approach in modelling substructural systems such as session-typed languages.
C1 [Sano, Chuta; Kavanagh, Ryan; Pientka, Brigitte] McGill Univ, Sch Comp Sci, 3480 Rue Univ, Montreal, PQ H3A 0E9, Canada.
C3 McGill University
RP Sano, C (corresponding author), McGill Univ, Sch Comp Sci, 3480 Rue Univ, Montreal, PQ H3A 0E9, Canada.
EM chuta.sano@mail.mcgill.ca; rkavanagh@cs.mcgill.ca; bpientka@cs.mcgill.ca
OI Pientka, Brigitte/0000-0002-2549-4276; Kavanagh,
   Ryan/0000-0001-9497-4276
FU Natural Sciences and Engineering Research Council of Canada; Fonds de
   recherche du Quebec -Nature et Technologies [253521]; Tomlinson Doctoral
   Fellowship
FX This work was funded by the Natural Sciences and Engineering Research
   Council of Canada (grant number 206263), Fonds de recherche du Quebec
   -Nature et Technologies (grant number 253521), a Tomlinson Doctoral
   Fellowship awarded to the first author, and Postdoctoral Fellowship from
   Natural Sciences and Engineering Research Council of Canada awarded to
   the second author.
CR Balzer S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110281
   Castro-Perez David, 2020, TACAS, DOI [DOI 10.1007/978-3-030-45237-7, 10.1007/978-3-030-45237-7_17, DOI 10.1007/978-3-030-45237-7_17]
   Cave A, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P413
   Cervesato Iliano, 2002, Technical Report CMU-CS-02-102
   Chlipala A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Crary K, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P131
   Despeyroux J., 2000, Theoretical Computer Science. Exploring New Frontiers of Theoretical Informatics. International Conference IFIP TCS 2000. Proceedings (Lecture Notes in Computer Science Vol.1872), P425
   Despeyroux J., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P124, DOI 10.1007/BFb0014049
   Felty A, 2021, MATH STRUCT COMP SCI, V31, P312, DOI 10.1017/S0960129521000323
   Felty Amy P, 2019, FSCD LIPICS, V131
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Gay Simon J, 2001, INT C THEOR PROV HIG
   Georges AL, 2017, LECT NOTES COMPUT SC, V10201, P530, DOI 10.1007/978-3-662-54434-1_20
   Harper Robert, 2009, POPL Tutorial: Mechanizing Metatheory with LF and Twelf
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Jacobs J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498662
   Milner R., 1980, Lecture Notes in Computer Science, V92, DOI DOI 10.1007/3-540-10235-3
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Pientka B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P371, DOI 10.1145/1328438.1328483
   Pientka B, 2010, LECT NOTES ARTIF INT, V6173, P15
   Pientka Brigitte, 2008, P ACM SIGPLAN S PRIN, P163, DOI [10.1145/1389449.1389469, DOI 10.1145/1389449.1389469]
   Rocha P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473584
   Rockl C., 2001, Foundations of Software Science and Computation Structures. 4th International Conference, FOSSACS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2030), P364
   Sano Chuta, 2023, Mechanizing Session-Types Using a Structural View, DOI [10.5281/zenodo.8329645, DOI 10.5281/ZENODO.8329645]
   Sano Chuta, 2023, arXiv
   Schack-Nielsen A, 2008, LECT NOTES ARTIF INT, V5195, P320, DOI 10.1007/978-3-540-71070-7_28
   Thiemann P, 2019, PROCEEDINGS OF THE 21ST INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2019), DOI 10.1145/3354166.3354184
   Tiu A, 2010, ACM T COMPUT LOG, V11, DOI 10.1145/1656242.1656248
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
   Zalakain U, 2021, LECT NOTES COMPUT SC, V12719, P157, DOI 10.1007/978-3-030-78089-0_9
   Zalakain Uma, 2019, Masters Thesis
NR 35
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 235
DI 10.1145/3622810
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100015
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Tang, WH
   Hillerström, D
   Mckinna, J
   Steuwer, M
   Dardha, O
   Fu, RX
   Lindley, S
AF Tang, Wenhao
   Hillerstroem, Daniel
   Mckinna, James
   Steuwer, Michel
   Dardha, Ornela
   Fu, Rongxiao
   Lindley, Sam
TI Structural Subtyping as Parametric Polymorphism
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE row types; subtyping; polymorphism; expressiveness
ID INTERSECTION; INFERENCE
AB Structural subtyping and parametric polymorphism provide similar flexibility and reusability to programmers. For example, both features enable the programmer to provide a wider record as an argument to a function that expects a narrower one. However, the means by which they do so differs substantially, and the precise details of the relationship between them exists, at best, as folklore in literature.
   In this paper, we systematically study the relative expressive power of structural subtyping and parametric polymorphism. We focus our investigation on establishing the extent to which parametric polymorphism, in the form of row and presence polymorphism, can encode structural subtyping for variant and record types. We base our study on various Church-style lambda-calculi extended with records and variants, different forms of structural subtyping, and row and presence polymorphism.
   We characterise expressiveness by exhibiting compositional translations between calculi. For each translation we prove a type preservation and operational correspondence result. We also prove a number of non-existence results. By imposing restrictions on both source and target types, we reveal further subtleties in the expressiveness landscape, the restrictions enabling otherwise impossible translations to be defined. More specifically, we prove that full subtyping cannot be encoded via polymorphism, but we show that several restricted forms of subtyping can be encoded via particular forms of polymorphism.
C1 [Tang, Wenhao; Steuwer, Michel; Fu, Rongxiao; Lindley, Sam] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
   [Hillerstroem, Daniel] Huawei Zurich Res Ctr, Zurich, Switzerland.
   [Mckinna, James] Heriot Watt Univ, Edinburgh, Midlothian, Scotland.
   [Steuwer, Michel] Tech Univ Berlin, Berlin, Germany.
   [Dardha, Ornela] Univ Glasgow, Glasgow, Lanark, Scotland.
C3 University of Edinburgh; Heriot Watt University; Technical University of
   Berlin; University of Glasgow
RP Tang, WH (corresponding author), Univ Edinburgh, Edinburgh, Midlothian, Scotland.
EM wenhao.tang@ed.ac.uk; daniel.hillerstrom@ed.ac.uk; j.mckinna@hw.ac.uk;
   michel.steuwer@tu-berlin.de; ornela.dardha@glasgow.ac.uk;
   s1742701@sms.ed.ac.uk; sam.lindley@ed.ac.uk
OI Tang, Wenhao/0009-0000-6589-3821; Lindley, Sam/0000-0002-1360-4714;
   Dardha, Ornela/0000-0001-9927-7875; Hillerstrom,
   Daniel/0000-0003-4730-9315; Steuwer, Michel/0000-0001-5048-0741
FU UKRI Future Leaders Fellowship "Effect Handler Oriented Programming"
   [MR/T043830/1]; ERC [682315]
FX This work was supported by the UKRI Future Leaders Fellowship "Effect
   Handler Oriented Programming" (reference number MR/T043830/1) and ERC
   Consolidator Grant no. 682315 (Skye).
CR Alpuim J, 2017, LECT NOTES COMPUT SC, V10201, P1, DOI 10.1007/978-3-662-54434-1_1
   Birtwistle Graham M., 1979, Simula Begin. Studentlitteratur (Lund, Sweden)
   Blume M, 2006, ACM SIGPLAN NOTICES, V41, P239, DOI 10.1145/1160074.1159836
   BREAZUTANNEN V, 1991, INFORM COMPUT, V93, P172, DOI 10.1016/0890-5401(91)90055-7
   BREAZUTANNEN V, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P44, DOI 10.1145/91556.91590
   CARDELLI L, 1984, LECT NOTES COMPUT SC, V173, P51
   Cardelli L., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P70, DOI 10.1145/73560.73566
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   CARDELLI L, 1994, INFORM COMPUT, V109, P4, DOI 10.1006/inco.1994.1013
   Cardelli Luca., 1991, Mathematical structures in computer science, V1, P3, DOI DOI 10.1017/S0960129500000049
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Dolan S, 2017, ACM SIGPLAN NOTICES, V52, P60, DOI 10.1145/3093333.3009882
   Dolan Stephen, 2016, Ph. D. Dissertation
   Dunfield J, 2014, J FUNCT PROGRAM, V24, P133, DOI 10.1017/S0956796813000270
   Emrich F, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P423, DOI 10.1145/3385412.3386003
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   Gaster Benedict R, 1996, Technical Report. Technical Report NOTTCS-TR-96-3
   Gaster Benedict R, 1998, Ph. D. Dissertation
   Girard Jean-Yves, 1972, Ph. D. Dissertation
   Harper Robert William, 1990, Extensible records without subsumption, DOI [10.1184/R1/6605507.v1, DOI 10.1184/R1/6605507.V1]
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Leijen D., 2005, P 2005 S TRENDS FUNC
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Morris JG, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290325
   Oliveira BCDS, 2016, ACM SIGPLAN NOTICES, V51, P364, DOI 10.1145/3022670.2951945
   Parreaux L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563304
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pottier F, 2001, INFORM COMPUT, V170, P153, DOI 10.1006/inco.2000.2963
   Pottier Francois, 1998, Research Report RR-3483
   Pottier Francois, 2004, Advanced Topics in Types and Programming Languages, P460, DOI [10.7551/mitpress/1104.003.0016, DOI 10.7551/MITPRESS/1104.003.0016]
   REMY D, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P77, DOI 10.1145/75277.75284
   Remy Didier., 1994, THEORETICAL ASPECTS, P67
   Reynolds J. C., 1974, Programming Symposium, P408
   Reynolds JohnC., 1980, Lecture Notes in Computer Science, P211, DOI 10.1007/3-540-10250-7_24
   Trifonov V., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P349
   Wand M., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P37
   Xie Ningning, 2020, 34 EUR C OBJ OR PROG, V166, DOI [10.4230/LIPIcs.ECOOP.2020.27, DOI 10.4230/LIPICS.ECOOP.2020.27]
   Xu H, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571224
NR 39
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 260
DI 10.1145/3622836
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100040
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Thy, S
   Costea, A
   Gopinathan, K
   Sergey, I
AF Thy, Sewen
   Costea, Andreea
   Gopinathan, Kiran
   Sergey, Ilya
TI Adventure of a Lifetime: Extract Method Refactoring for Rust
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Rust; automated code refactoring; program repair
ID OWNERSHIP
AB We present a design and implementation of the automated "Extract Method" refactoring for Rust programs. Even though Extract Method is one of the most well-studied and widely used in practice automated refactorings, featured in all major IDEs for all popular programming languages, implementing it soundly for Rust is surprisingly non-trivial due to the restrictions of the Rust's ownership and lifetime-based type system.
   In this work, we provide a systematic decomposition of the Extract Method refactoring for Rust programs into a series of program transformations, each concerned with satisfying a particular aspect of Rust type safety, eventually producing a well-typed Rust program. Our key discovery is the formulation of Extract Method as a composition of naive function hoisting and a series of automated program repair procedures that progressively make the resulting program "more well-typed" by relying on the corresponding repair oracles. Those oracles include a novel static intra-procedural ownership analysis that infers correct sharing annotations for the extracted function's parameters, and the lifetime checker of rustc, Rust's reference compiler.
   We implemented our approach in a tool called REM-an automated Extract Method refactoring built on top of IntelliJ IDEA plugin for Rust. Our extensive evaluation on a corpus of changes in five popular Rust projects shows that REM (a) can extract a larger class of feature-rich code fragments into semantically correct functions than other existing refactoring tools, (b) can reproduce method extractions performed manually by human developers in the past, and (c) is efficient enough to be used in interactive development.
C1 [Thy, Sewen] Yale NUS Coll, Singapore, Singapore.
   [Costea, Andreea; Gopinathan, Kiran; Sergey, Ilya] Natl Univ Singapore, Singapore, Singapore.
C3 Yale NUS College; National University of Singapore
RP Thy, S (corresponding author), Yale NUS Coll, Singapore, Singapore.
EM s.thy@u.yale-nus.edu.sg; andreeac@comp.nus.edu.sg;
   kirang@comp.nus.edu.sg; ilya@nus.edu.sg
OI Gopinathan, Kiran/0000-0002-1877-9871; Sergey, Ilya/0000-0003-4250-5392;
   Costea, Andreea/0000-0002-9089-9392
FU Singapore Ministry of Education (MoE) Tier 3 grant "Automated Program
   Repair" [MOE-MOET32021-0001]
FX We thank Vitaly Bragilevsky, Matthew Flatt, Son Ho, and Alex Potanin for
   their feedback on drafts of this paper. We also thank the OOPSLA'23 PC
   and AEC reviewers for their constructive and insightful comments. This
   work was partially supported by a Singapore Ministry of Education (MoE)
   Tier 3 grant "Automated Program Repair" MOE-MOET32021-0001.
CR Andersen L. O., 1994, Ph.D. thesis
   Ayooluwa Isaiah, 2020, Rewriting the GNU Coreutils in Rust
   Balaban I, 2005, ACM SIGPLAN NOTICES, V40, P265, DOI 10.1145/1103845.1094832
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Boyland John., 2001, ECOOP'Ol - Object-Oriented Programming, 15th European Conference, number 2072 in Lecture Notes in Computer Science, P2, DOI [10.1007/3-540-45337-7_2, DOI 10.1007/3-540-45337-7_2]
   Clarke Dave, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P15, DOI 10.1007/978-3-642-36946-9_3
   Clarke D, 2003, LECT NOTES COMPUT SC, V2743, P176
   Clarke D, 2002, ACM SIGPLAN NOTICES, V37, P292, DOI 10.1145/583854.582447
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Emre M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485498
   Fowler M., 1999, Refactoring: Improving the Design of Existing Code
   Fuhrer Robert M., 2004, OOPSLA Companion, P8, DOI [10.1145/1028664.1028669, DOI 10.1145/1028664.1028669]
   Griswold William G., 1992, Program Restructuring as an Aid to Software Maintenance
   Huang W, 2012, LECT NOTES COMPUT SC, V7313, P181, DOI 10.1007/978-3-642-31057-7_9
   Huang W, 2012, ACM SIGPLAN NOTICES, V47, P879, DOI 10.1145/2398857.2384680
   Immunant Inc, 2022, c2rust
   Jemerov Dmitry, 2008, 2 ACM WORKSH REF TOO, P13, DOI [10.1145/1636642.1636655, DOI 10.1145/1636642.1636655]
   Juillerat Nicolas, 2007, Improving Method Extraction: A Novel Approach to Data Flow Analysis Using Boolean Flags and Expressions, P48
   Kegel H, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P431, DOI 10.1145/1368088.1368147
   Kiezun A, 2007, PROC INT CONF SOFTW, P437
   Kniesel G, 2004, SCI COMPUT PROGRAM, V52, P9, DOI 10.1016/j.scico.2004.03.002
   Le Goues C, 2021, IEEE SOFTWARE, V38, P22, DOI 10.1109/MS.2021.3072577
   Li HQ, 2005, ELECTRON NOTES THEOR, V141, P29, DOI 10.1016/j.entcs.2005.02.053
   Li HQ, 2012, LECT NOTES COMPUT SC, V7212, P501, DOI 10.1007/978-3-642-28872-2_34
   Ma KK, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P423
   Matsakis Nicholas D., 2017, The Rust RFC Book: Non-Lexical Lifetimes
   Matsakis Nicholas D., 2017, The Rust RFC Book: Statements and expressions
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Microsoft, 2023, Refactoring in Visual Studio Code.
   Murphy-Hill E, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P421, DOI 10.1145/1368088.1368146
   Negara S, 2013, LECT NOTES COMPUT SC, V7920, P552, DOI 10.1007/978-3-642-39038-8_23
   Opdyke William F., 1991, Ph. D. Dissertation.
   Qin BQ, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P763, DOI 10.1145/3385412.3386036
   Ringdal Per Ove, 2020, Master's thesis.
   Roberts D., 1997, Theory and Practice of Object Systems, V3, P253, DOI 10.1002/(SICI)1096-9942(1997)3:4<253::AID-TAPO3>3.0.CO;2-T
   Roberts D., 1999, Ph. D. Dissertation
   Rowe RNS, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P950, DOI 10.1145/3314221.3314600
   Sam Garming, 2017, P AUSTR COMP SCI WEE, V14, P1, DOI [10.1145/3014812.3014826, DOI 10.1145/3014812.3014826]
   Schäfer M, 2010, ACM SIGPLAN NOTICES, V45, P286, DOI 10.1145/1932682.1869485
   Schafer Max, 2010, Ph. D. Dissertation.
   Sergey I, 2012, LECT NOTES COMPUT SC, V7211, P579, DOI 10.1007/978-3-642-28869-2_29
   Sergey Ilya, 2010, CW Reports CW 577.
   Steimann F, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3156016
   Steimann F, 2009, LECT NOTES COMPUT SC, V5653, P419, DOI 10.1007/978-3-642-03013-0_19
   The Rust Reference, 2023, Lifetime Elision.
   The Rust Team, 2017, The Rust programming language.
   Thy Sewen, 2023, Zenodo, DOI 10.5281/ZENODO.8124395
   Tip F, 2003, ACM SIGPLAN NOTICES, V38, P13, DOI 10.1145/949343.949308
   Tip F, 2007, LECT NOTES COMPUT SC, V4634, P1
   Vakilian M, 2009, IEEE INT CONF AUTOM, P421, DOI 10.1109/ASE.2009.68
NR 50
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 245
DI 10.1145/3622821
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100025
OA gold
DA 2024-07-18
ER

PT J
AU Zhou, CJ
   Zhang, Q
   Guo, LH
   Wang, MZ
   Jiang, Y
   Liao, Q
   Wu, ZY
   Li, SS
   Gu, B
AF Zhou, Chijin
   Zhang, Quan
   Guo, Lihua
   Wang, Mingzhe
   Jiang, Yu
   Liao, Qing
   Wu, Zhiyong
   Li, Shanshan
   Gu, Bin
TI Towards Better Semantics Exploration for Browser Fuzzing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Browser Security; Semantics-Aware Fuzzing; Context-Sensitive Grammar
AB Web browsers exhibit rich semantics that enable a plethora of web-based functionalities. However, these intricate semantics present significant challenges for the implementation and testing of browsers. For example, fuzzing, a widely adopted testing technique, typically relies on handwritten context-free grammars (CFGs) for automatically generating inputs. However, these CFGs fall short in adequately modeling the complex semantics of browsers, resulting in generated inputs that cover only a portion of the semantics and are prone to semantic errors. In this paper, we present SaGe, an automated method that enhances browser fuzzing through the use of production-context sensitive grammars (PCSGs) incorporating semantic information. Our approach begins by extracting a rudimentary CFG from W3C standards and iteratively enhancing it to create a PCSG. The resulting PCSG enables our fuzzer to generate inputs that explore a broader range of browser semantics with a higher proportion of semantically-correct inputs. To evaluate the efficacy of SaGe, we conducted 24-hour fuzzing campaigns on mainstream browsers, including Chrome, Safari, and Firefox. Our approach demonstrated better performance compared to existing browser fuzzers, with a 6.03%-277.80% improvement in edge coverage, a 3.56%-161.71% boost in semantic correctness rate, twice the number of bugs discovered. Moreover, we identified 62 bugs across the three browsers, with 40 confirmed and 10 assigned CVEs.
C1 [Zhou, Chijin; Zhang, Quan; Guo, Lihua; Wang, Mingzhe; Jiang, Yu] Tsinghua Univ, BNRist, Beijing, Peoples R China.
   [Liao, Qing] Harbin Inst Technol, Shenzhen, Peoples R China.
   [Wu, Zhiyong; Li, Shanshan] Natl Univ Def Technol, Changsha, Peoples R China.
   [Gu, Bin] Beijing Inst Control Engn, Beijing, Peoples R China.
C3 Tsinghua University; Harbin Institute of Technology; National University
   of Defense Technology - China
RP Jiang, Y (corresponding author), Tsinghua Univ, BNRist, Beijing, Peoples R China.; Gu, B (corresponding author), Beijing Inst Control Engn, Beijing, Peoples R China.
RI Zhou, Chijin/AAR-7635-2021
OI Zhou, Chijin/0000-0002-6446-247X; Wang, Mingzhe/0000-0002-2153-6766;
   guo, lihua/0000-0002-4336-7190; Jiang, Yu/0000-0003-0955-503X
FU National Key Research and Development Project [2022YFB3104000,
   2021QY0604]; NSFC Program [62022046, 92167101, U1911401, 62021002,
   U20A6003]
FX We would like to thank the anonymous reviewers for their valuable
   comments and input to improve our paper. This research is sponsored in
   part by the National Key Research and Development Project (No.
   2022YFB3104000, No2021QY0604) and NSFC Program (No. 62022046,
   92167101,U1911401, 62021002, U20A6003).
CR Aschermann C, 2019, 26TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2019), DOI 10.14722/ndss.2019.23412
   Bastani O, 2017, ACM SIGPLAN NOTICES, V52, P95, DOI [10.1145/3062341.3062349, 10.1145/3140587.3062349]
   Bernhard Lukas, 2022, CCS '22: Proceedings of the 2022 ACM SIGSAC Conference on Computer and Communications Security, P351, DOI 10.1145/3548606.3560624
   Blazytko T, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1985
   Chen YL, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1967
   csstree, 2022, CSSTree A tool set for CSS including fast detailed parser, walker, generator and lexer based on W3C specs and browser implementations
   Godefroid P, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P206, DOI 10.1145/1375581.1375607
   Google, 2019, ClusterFuzz
   Google, 2017, Domato: A DOM fuzzer
   Gopinath R, 2021, PROC INT CONF SOFTW, P699, DOI 10.1109/ICSE43902.2021.00070
   Gross Samuel, 2023, 30 ANN NETW DISTR SY
   Han H, 2019, 26TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2019), DOI 10.14722/ndss.2019.23263
   Havrikov N, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P189, DOI 10.1109/ASE.2019.00027
   Nguyen HL, 2022, PROC INT CONF SOFTW, P249, DOI 10.1145/3510003.3510182
   Igalia, 2021, WPE powers hundreds of millions of embedded devices
   Liang J, 2022, P IEEE S SECUR PRIV, P1, DOI [10.1109/SP46214.2022.9833594, 10.1109/SP46214.2022.00010]
   Liu JW, 2023, PROCEEDINGS OF THE 28TH ACM INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, VOL 2, ASPLOS 2023, P530, DOI 10.1145/3575693.3575707
   Livinskii V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428264
   llvm, 2022, Clang 13 documentation: SANITIZERCOVERAGE
   Mathis B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P548, DOI 10.1145/3314221.3314651
   Mozilla, 2015, dharma: Generation based, context free grammar fuzzer
   Mozilla, 2005, MDN Web Docs
   mozilla, 2021, Web APIs
   Nagy S, 2019, P IEEE S SECUR PRIV, P787, DOI 10.1109/SP.2019.00069
   Cardona PAN, 2015, CUAD ACT, P154
   Padhye R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360600
   Padhye R, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P329, DOI 10.1145/3293882.3330576
   Park J, 2021, PROC INT CONF SOFTW, P13, DOI 10.1109/ICSE43902.2021.00015
   Park S, 2020, P IEEE S SECUR PRIV, P1628, DOI 10.1109/SP40000.2020.00067
   Rigger M, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P667
   Serebryany K., 2012, USENIX ATC 2012, P309
   Srivastava P, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P244, DOI 10.1145/3460319.3464814
   Sun H, 2021, PROCEEDINGS OF THE 28TH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, SOSP 2021, P344, DOI 10.1145/3477132.3483547
   Dinh ST, 2021, 28TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2021), DOI 10.14722/ndss.2021.24224
   W3C, 2022, WebIDL Level 1
   W3C, 2022, W3C Standards
   W3C, 2022, Webref Machine readable references of terms defined in web browser specifications
   Wang JJ, 2017, P IEEE S SECUR PRIV, P579, DOI 10.1109/SP.2017.23
   Wang JJ, 2019, PROC INT CONF SOFTW, P724, DOI 10.1109/ICSE.2019.00081
   Wang MZ, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P1010, DOI 10.1145/3519939.3523428
   Wang MZ, 2021, PROCEEDINGS OF THE 2021 USENIX ANNUAL TECHNICAL CONFERENCE, P147
   Wang MZ, 2021, 2021 IEEE/ACM 43RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2021), P328, DOI 10.1109/ICSE-SEIP52600.2021.00042
   Wu Zhiyong, 2022, ISSTA 22 31TH ACM SI
   Xu W, 2020, CCS '20: PROCEEDINGS OF THE 2020 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P971, DOI 10.1145/3372297.3423340
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Ye GX, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P435, DOI 10.1145/3453483.3454054
   Yin PC, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P440, DOI 10.18653/v1/P17-1041
   Yongheng Chen, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P642, DOI 10.1109/SP40001.2021.00071
   Zalewski M., 2013, American fuzzy lop
   Zhang J, 2019, PROC INT CONF SOFTW, P783, DOI 10.1109/ICSE.2019.00086
   Zhong R, 2020, CCS '20: PROCEEDINGS OF THE 2020 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P955, DOI 10.1145/3372297.3417260
   Zhou CJ, 2022, PROCEEDINGS OF THE 30TH ACM JOINT MEETING EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, ESEC/FSE 2022, P1135, DOI 10.1145/3540250.3549107
   Zhou CJ, 2020, IEEE INT CONF AUTOM, P858, DOI 10.1145/3324884.3416572
   Zhou Chijin, 2023, Zenodo, DOI [10.5281/zenodo.8328742, DOI 10.5281/ZENODO.8328742]
NR 54
TC 0
Z9 0
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 243
DI 10.1145/3622819
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100023
OA gold
DA 2024-07-18
ER

PT J
AU Liu, YY
   Weirich, S
AF Liu, Yiyun
   Weirich, Stephanie
TI Dependently-Typed Programming with Logical Equality Reflection
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Modes; Haskell; Dependent Types; Equality Reflection
ID IRRELEVANCE
AB In dependently-typed functional programming languages that allow general recursion, programs used as proofs must be evaluated to retain type soundness. As a result, programmers must make a trade-off between performance and safety. To address this problem, we propose System DE, an explicitly-typed, moded core calculus that supports termination tracking and equality reflection. Programmers can write inductive proofs about potentially diverging programs in a logical sublanguage and reflect those proofs to the type checker, while knowing that such proofs will be erased by the compiler before execution. A key feature of System DE is its use of modes for both termination and relevance tracking, which not only simplifies the design but also leaves it open for future extension. System DE is suitable for use in the Glasgow Haskell Compiler, but could serve as the basis for any general purpose dependently-typed language.
C1 [Liu, Yiyun; Weirich, Stephanie] Univ Penn, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Liu, YY (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM liuyiyun@seas.upenn.edu; sweirich@seas.upenn.edu
OI Liu, Yiyun/0009-0006-8717-2498; Weirich, Stephanie/0000-0002-6756-9168
FU National Science Foundation [2006535]
FX The authors would like to thank the anonymous reviewers for their
   comments and suggestions. This work was supported by the National
   Science Foundation under Grant No. 2006535.
CR Abel A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408972
   Abel A, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:29)2012
   Adams R, 2006, J FUNCT PROGRAM, V16, P219, DOI 10.1017/S0956796805005770
   Agda Development Team, 2023, Agda
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Barras B, 2008, LECT NOTES COMPUT SC, V4962, P365, DOI 10.1007/978-3-540-78499-9_26
   Bove A, 2005, MATH STRUCT COMP SCI, V15, P671, DOI 10.1017/S0960129505004822
   Brady Edwin C., 2021, 35 EUROPEAN C OBJECT, V9, DOI 10.4230/LIPIcs. ECOOP.2021.9
   Breitner J, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000150
   Capretta V, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:1)2005
   Cardelli Luca., 1986, Technical Report 10
   Casinghino Chris, 2014, Combining Proofs and Programs
   Choudhury P, 2022, LECT NOTES COMPUT SC, V13240, P403, DOI 10.1007/978-3-030-99336-8_15
   Christiansen DT, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341704
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   Constable RobertL., 1987, Partial objects in constructive type theory
   COQUAND T, 1990, LECT NOTES COMPUT SC, V417, P50
   Eisenberg Richard, 2016, Ph. D. Dissertation
   Eisenberg RA, 2017, ACM SIGPLAN NOTICES, V52, P525, DOI [10.1145/3062341.3062357, 10.1145/3140587.3062357]
   GHC Development Team, 2023, The Glasgow Haskell Compiler.
   Gundry Adam, 2013, Ph. D. Dissertation, DOI [10.48730/jt3g-ws74, DOI 10.48730/JT3G-WS74]
   Kiselyov Oleg, 2004, HASKELL 04, P96, DOI DOI 10.1145/1017472.1017488
   Liu Yiyun, 2023, Artifact associated with Dependently-Typed Programming with Logical Equality Reflection, DOI [10.1145/3580401, DOI 10.1145/3580401]
   Martin-Lof P., 1975, STUDIES LOGIC FDN MA, V80, P73
   Martin-Lof Per., 1983, WORKSHOP SEMANTICS P
   MARTINLOF P, 1990, LECT NOTES COMPUT SC, V417, P146
   Mishra-Linger N, 2008, LECT NOTES COMPUT SC, V4962, P350, DOI 10.1007/978-3-540-78499-9_25
   PALMGREN E, 1993, INFORM COMPUT, V106, P26, DOI 10.1006/inco.1993.1048
   Pfenning F, 2001, IEEE S LOG, P221, DOI 10.1109/LICS.2001.932499
   Sewell P, 2010, J FUNCT PROGRAM, V20, P71, DOI 10.1017/S0956796809990293
   Siles V, 2012, J FUNCT PROGRAM, V22, P153, DOI 10.1017/S0956796812000044
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   The Coq Development Team, 2019, Zenodo, DOI 10.5281/ZENODO.3476303
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158141
   Vazou Niki, 2016, Liquid Haskell: Haskell as a Theorem Prover
   Weirich S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110275
   Weirich S, 2013, ACM SIGPLAN NOTICES, V48, P275, DOI [10.1145/2544174.2500599, 10.1145/2500365.2500599]
   Wright Robert, 2022, Idris2-Table: evaluating dependently-typed tables with the Brown Benchmark for Table Types
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
NR 41
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 210
DI 10.1145/3607852
PG 37
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900023
OA gold
DA 2024-07-18
ER

PT J
AU Lutze, M
   Madsen, M
   Schuster, P
   Brachthäuser, JI
AF Lutze, Matthew
   Madsen, Magnus
   Schuster, Philipp
   Brachthaeuser, Jonathan Immanuel
TI With or Without You: Programming with Effect Exclusion
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE polymorphic types and effects; effect exclusion; without construct
AB Type and effect systems have been successfully used to statically reason about effects in many different domains, including region-based memory management, exceptions, and algebraic effects and handlers. Such systems' soundness is often stated in terms of the absence of effects. Yet, existing systems only admit indirect reasoning about the absence of effects. This is further complicated by effect polymorphism which allows function signatures to abstract over arbitrary, unknown sets of effects.
   We present a new type and effect system with effect polymorphism as well as union, intersection, and complement effects. The effect system allows us to express effect exclusion as a new class of effect polymorphic functions: those that permit any effects except those in a specific set. This way, we equip programmers with the means to directly reason about the absence of effects. Our type and effect system builds on the Hindley-Milner type system, supports effect polymorphism, and preserves principal types modulo Boolean equivalence. In addition, a suitable extension of Algorithm W with Boolean unification on the algebra of sets enables complete type and effect inference. We formalize these notions in the lambda(C) calculus. We prove the standard progress and preservation theorems as well as a non-standard effect safety theorem: no excluded effect is ever performed.
   We implement the type and effect system as an extension of the Flix programming language. We conduct a case study of open source projects identifying 59 program fragments that require effect exclusion for correctness. To demonstrate the usefulness of the proposed type and effect system, we recast these program fragments into our extension of Flix.
C1 [Lutze, Matthew; Madsen, Magnus] Aarhus Univ, Dept Comp Sci, Aarhus, Denmark.
   [Schuster, Philipp; Brachthaeuser, Jonathan Immanuel] Univ Tubingen, Dept Comp Sci, Tubingen, Germany.
C3 Aarhus University; Eberhard Karls University of Tubingen
RP Lutze, M (corresponding author), Aarhus Univ, Dept Comp Sci, Aarhus, Denmark.
EM mlutze@cs.au.dk; magnusm@cs.au.dk; philipp.schuster@uni-tuebingen.de;
   jonathan.brachthaeuser@uni-tuebingen.de
OI Lutze, Matthew/0000-0002-2904-5099; Schuster,
   Philipp/0000-0001-8011-0506; Brachthauser, Jonathan
   Immanuel/0000-0001-9128-0391; Madsen, Magnus/0000-0002-7510-8724
FU Deutsche Forschungsgemeinschaft (DFG - German Research Foundation)
   [DFG-448316946]
FX The work on this project was supported by the Deutsche
   Forschungsgemeinschaft (DFG - German Research Foundation), project
   number DFG-448316946.
CR [Anonymous], 1974, Boolean functions and equations
   Baader F, 1998, INFORM PROCESS LETT, V67, P215, DOI 10.1016/S0020-0190(98)00106-9
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Boole G., 1847, The mathematical analysis of logic
   BOUDET A, 1989, J SYMB COMPUT, V8, P449, DOI 10.1016/S0747-7171(89)80054-9
   Brachthäuser JI, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527320
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   BUTTNER W, 1987, J SYMB COMPUT, V4, P191, DOI 10.1016/S0747-7171(87)80065-2
   Convent L, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000039
   Damas Luis, 1984, Ph. D. Dissertation
   de Vries E, 2008, LECT NOTES COMPUT SC, V5083, P201, DOI 10.1007/978-3-540-85373-2_12
   Fournet Cedric., 2002, POPL 02, P307
   Gosling James, 1996, The Java Language Specification
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Kammar O, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000320
   Kennedy Andrew J., 1996, Technical Report
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Leijen Daan, 2014, arXiv, DOI [10.48550/ARXIV.1406.2061, DOI 10.48550/ARXIV.1406.2061]
   Leroy X, 2000, ACM T PROGR LANG SYS, V22, P340, DOI 10.1145/349214.349230
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Lowenheim Leopold, 1908, Uber das Auflosungsproblem im logischen Klassenkalkul
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Madsen M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485487
   Madsen M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428222
   MARTIN U, 1989, J SYMB COMPUT, V7, P275, DOI 10.1016/S0747-7171(89)80013-6
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Nielson Flemming, 2015, Principles of Program Analysis, DOI [10.1007/978-3-662-03811-6, DOI 10.1007/978-3-662-03811-6]
   Pottier F, 2005, ACM T PROGR LANG SYS, V27, P344, DOI 10.1145/1057387.1057392
   Remy D., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P166, DOI 10.1145/143165.143202
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Wallach DS, 2000, ACM T SOFTW ENG METH, V9, P341, DOI 10.1145/363516.363520
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Zhang YZ, 2016, ACM SIGPLAN NOTICES, V51, P281, DOI [10.1145/2908080.2908086, 10.1145/2980983.2908086]
NR 36
TC 2
Z9 2
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 204
DI 10.1145/3607846
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900017
OA gold
DA 2024-07-18
ER

PT J
AU Wang, B
   Kolluri, A
   Nikolic, I
   Baluta, T
   Saxena, P
AF Wang, Bo
   Kolluri, Aashish
   Nikolic, Ivica
   Baluta, Teodora
   Saxena, Prateek
TI User-Customizable Transpilation of Scripting Languages
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Translation; Program Synthesis
AB A transpiler converts code from one programming language to another. Many practical uses of transpilers require the user to be able to guide or customize the program produced from a given input program. This customizability is important for satisfying many application-specific goals for the produced code such as ensuring performance, readability, ease of exposition or maintainability, compatibility with external environment or analysis tools, and so on. Conventional transpilers are deterministic rule-driven systems often written without offering customizability per user and per program. Recent advances in transpilers based on neural networks offer some customizability to users, e.g. through interactive prompts, but they are still difficult to precisely control the production of a desired output. Both conventional and neural transpilation also suffer from the "last mile" problem: they produce correct code on average, i.e., on most parts of a given program, but not necessarily for all parts of it. We propose a new transpilation approach that offers fine-grained customizability and reusability of transpilation rules created by others, without burdening the user to understand the global semantics of the given source program. Our approach is mostly automatic and incremental, i.e., constructs translation rules needed to transpile the given program as per the user's guidance piece-by-piece. Users can rely on existing transpilation rules to translate most of the program correctly while focusing their effort locally, only on parts that are incorrect or need customization. This improves the correctness of the end result. We implement the transpiler as a tool called DuoGlot, which translates Python to Javascript programs, and evaluate it on the popular GeeksforGeeks benchmarks. DuoGlot achieves 90% translation accuracy and so it outperforms all existing translators (both handcrafted and neural-based), while it produces readable code. We evaluate DuoGlot on two additional benchmarks, containing more challenging and longer programs, and similarly observe improved accuracy compared to the other transpilers.
C1 [Wang, Bo; Kolluri, Aashish; Nikolic, Ivica; Baluta, Teodora; Saxena, Prateek] Natl Univ Singapore, Singapore, Singapore.
C3 National University of Singapore
RP Wang, B (corresponding author), Natl Univ Singapore, Singapore, Singapore.
EM bo_wang@u.nus.edu; aashishk@u.nus.edu; inikolic@nus.edu.sg;
   teodora.baluta@umus.edu; prateeks@comp.nus.edu.sg
OI Kolluri, Aashish/0000-0003-1792-4448; Baluta,
   Teodora/0000-0003-3655-9810; Wang, Bo/0000-0003-1444-0237
FU Ministry of Education in Singapore [251RES2023, MOE-T2EP20220-0014];
   Google PhD Fellowship
FX We thank the anonymous reviewers of this work. This research is
   supported by grants given by the Ministry of Education in Singapore:
   Tier 1 grant 251RES2023 and Tier 2 grant MOE-T2EP20220-0014. Teodora
   Baluta is supported by Google PhD Fellowship. Any opinions, findings,
   and conclusions or recommendations expressed in this material are those
   of the authors only.
CR Alkhatib G., 1992, Journal of Software Maintenance: Research and Practice, V4, P83, DOI 10.1002/smr.4360040203
   Nguyen AT, 2015, IEEE INT CONF AUTOM, P585, DOI 10.1109/ASE.2015.74
   Artzi Shay., 2010, P 32 ACMIEEE INT C S, P265
   Bader J, 2018, LECT NOTES COMPUT SC, V10747, P25, DOI 10.1007/978-3-319-73721-8_2
   Behnel S, 2011, COMPUT SCI ENG, V13, P31, DOI 10.1109/MCSE.2010.118
   Bierman G, 2014, LECT NOTES COMPUT SC, V8586, P257
   BoWang Aashish Kolluri, 2023, DUOGLOT USER CUSTOMI, DOI [10.5281/zenodo.7709003, DOI 10.5281/ZENODO.7709003]
   Brown T., 2020, P ADV NEUR INF PROC, V33, P1877
   Brunsfeld Max, 2018, ATOM UNDERSTANDS YOU
   Burnham Trevor, 2015, COFFEESCRIPT ACCELER
   Buse R.P., 2008, Proceedings of the 2008 International Symposium on Software Testing and Analysis, P121
   Chen Mark, 2021, arXiv, DOI DOI 10.48550/ARXIV.2107.03374
   Chen XY, 2018, 32 C NEURAL INFORM P, V31
   Collard ML, 2013, PROC IEEE INT CONF S, P516, DOI 10.1109/ICSM.2013.85
   Comon H., 2007, TREE AUTOMATA TECHNI
   Cordy JR, 2006, SCI COMPUT PROGRAM, V61, P190, DOI 10.1016/j.scico.2006.04.002
   Fard AM, 2017, IEEE INT CONF SOFTW, P230, DOI 10.1109/ICST.2017.28
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Gong L, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P357, DOI 10.1145/2786805.2786831
   Google, 2021, TENSORFLOW 1 X VS TE
   Graehl J, 2008, COMPUT LINGUIST, V34, P391, DOI 10.1162/coli.2008.07-051-R2-03-57
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Hongyu Zhai, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P116, DOI 10.1109/MSR.2019.00027
   Irrera Anna, 2017, BANKS SCRAMBL FIX OL
   Ivankovic M, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P955, DOI 10.1145/3338906.3340459
   Kamil S, 2016, ACM SIGPLAN NOTICES, V51, P711, DOI [10.1145/2980983.2908117, 10.1145/2908080.2908117]
   Karaivanov S., 2014, P 2014 ACM INT S NEW, P173, DOI 10.1145/2661136.2661148
   Koeninger Cody, 2020, CLOUDFLARE WORKERS A
   LEVENSHT.VI, 1965, DOKL AKAD NAUK SSSR+, V163, P845
   Mariano B, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527315
   McDowell Gayle Laakmann, 2015, Cracking the Coding Interview: 189 Programming Questions and Solutions
   MetaResearch, 2022, GEEKSFORGEEKS BENCHM
   Miltner A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360569
   Nguyen A.T., 2013, P 2013 9 JOINT M FDN, P651
   Ocariza FS, 2016, SOFTW TEST VERIF REL, V26, P69, DOI 10.1002/stvr.1576
   Pasternak E, 2017, 2017 IEEE BLOCKS AND BEYOND WORKSHOP (B&B), P21, DOI 10.1109/BLOCKS.2017.8120404
   Pawlik M, 2016, INFORM SYST, V56, P157, DOI 10.1016/j.is.2015.08.004
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Roziere B., 2021, arXiv
   Roziere Baptiste, 2020, processing systems, V33, P20601
   RWellin Paul, 2005, INTRO PROGRAMMING MA, DOI [10.1017/CBO9780511801303, DOI 10.1017/CBO9780511801303]
   Shen SQ, 2021, ASIA CCS'21: PROCEEDINGS OF THE 2021 ACM ASIA CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P537, DOI 10.1145/3433210.3437528
   Sipser M., 1996, ACM Sigact News, V27, P27, DOI 10.1145/230514.571645
   Terekhov AA, 2000, IEEE SOFTWARE, V17, P111, DOI 10.1109/52.895180
   Nguyen TD, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P756, DOI 10.1145/2889160.2892661
   van Rossum Guido, 2020, PEP 617 NEW PEG PARS
   van Rossum Guido, 2009, WHATS NEW PYTHON 3 0
   Wang Bo, 2023, DUOGLOT USER CUSTOMI
   Weinberg Gerald M, 1971, The psychology of computer programming, V29
NR 50
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586034
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600009
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Ye, WJ
   Toro, M
   Olmedo, F
AF Ye, Wenjia
   Toro, Matias
   Olmedo, Federico
TI Gradual Probabilistic Lambda Calculus
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Type Systems; Gradual Typing; Probabilistic Lambda Calculus
AB Probabilistic programming languages have recently gained a lot of attention, in particular due to their applications in domains such as machine learning and di similar to erential privacy. To establish invariants of interest, many such languages include some form of static checking in the form of type systems. However, adopting such a type discipline can be cumbersome or overly conservative. Gradual typing addresses this problem by supporting a smooth transition between static and dynamic checking, and has been successfully applied for languages with di similar to erent constructs and type abstractions. Nevertheless, its bene similar to ts have never been explored in the context of probabilistic languages. In this work, we present and formalize GPLC, a gradual source probabilistic lambda calculus. GPLC includes a binary probabilistic choice operator and allows programmers to gradually introduce/remove static type -and probability- annotations. The static semantics of GPLC heavily relies on the notion of probabilistic couplings, as required for de similar to ning several relations, such as consistency, precision, and consistent transitivity. The dynamic semantics of GPLC is given via elaboration to the target language TPLC, which features a distribution-based semantics interpreting programs as probability distributions over similar to nal values. Regarding the language metatheory, we establish that TPLC-and therefore also GPLC- is type safe and satis similar to es two of the so-called re similar to ned criteria for gradual languages, namely, that it is a conservative extension of a fully static variant and that it satis similar to es the gradual guarantee, behaving smoothly with respect to type precision.
C1 [Ye, Wenjia] Univ Hong Kong, Hong Kong, Peoples R China.
   [Toro, Matias; Olmedo, Federico] Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Beauchef 851, Santiago, Chile.
C3 University of Hong Kong; Universidad de Chile
RP Ye, WJ (corresponding author), Univ Hong Kong, Hong Kong, Peoples R China.
EM yewenjia@connect.hku.hk; mtoro@dcc.uchile.cl; folmedo@dcc.uchile.cl
OI Olmedo, Federico/0000-0003-0217-6483; Toro, Matias/0000-0002-5315-0198
CR Avanzini M, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785725
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Castagna G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110285
   Castagna G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290329
   Claret Guillaume., 2013, Foundations of Software Engineering, P92, DOI DOI 10.1145/2491411.2491423
   Dal Lago U, 2011, Arxiv, DOI arXiv:1104.0195
   Dal Lago U, 2012, RAIRO-THEOR INF APPL, V46, P413, DOI 10.1051/ita/2012012
   Dal Lago Ugo, 2017, ACM T PROGR LANG SYS, V41, P1
   Danos V, 2011, INFORM COMPUT, V209, P966, DOI 10.1016/j.ic.2011.02.001
   de Amorim AA, 2020, IEEE S LOG, P116, DOI 10.1145/3373718.3394778
   Deng YX, 2011, Arxiv, DOI arXiv:1103.4577
   Disney Tim, 2011, INT WORKSHOP SCRIPTS
   Dwork C, 2013, FOUND TRENDS THEOR C, V9, P211, DOI 10.1561/0400000042
   Ehrhard T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158147
   Fennell L, 2013, P IEEE CSFW, P224, DOI 10.1109/CSF.2013.22
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia R, 2013, ACM SIGPLAN NOTICES, V48, P417, DOI [10.1145/2544174.2500603, 10.1145/2500365.2500603]
   Ghahramani Z, 2015, NATURE, V521, P452, DOI 10.1038/nature14541
   GOLDWASSER S, 1984, J COMPUT SYST SCI, V28, P270, DOI 10.1016/0022-0000(84)90070-9
   Goodman N. D., 2014, DESIGN IMPLEMENTATIO
   Goodman ND., 2008, UAI, P220
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Herman D., 2007, TRENDS FUNCTIONAL PR
   Huang Xuejing, 2020, ECOOP
   Jafery Khurram A., 2017, SUMS UNCERTAINTY REF, P804
   JONES C, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P186
   Kiselyov O, 2016, LECT NOTES COMPUT SC, V10017, P357, DOI 10.1007/978-3-319-47958-3_19
   Lehmann N, 2017, ACM SIGPLAN NOTICES, V52, P775, DOI 10.1145/3093333.3009856
   Lennon-Bertrand M, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3495528
   Malewski S, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485503
   Motwani Rajeev, 1995, RANDOMIZED ALGORITHM
   New MS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290328
   Pfeffer A, 2011, LECT NOTES ARTIF INT, V6489, P2, DOI 10.1007/978-3-642-21295-6_2
   Phipps-Costin L, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485488
   POPL, 2019, P 46 ACM SIGPLAN SIG
   POPL, 2017, P 44 ACM SIGPLAN SIG
   Ramsey N, 2002, ACM SIGPLAN NOTICES, V37, P154, DOI 10.1145/565816.503288
   Reed J, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P157
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   Saheb-Djahromi N., 1978, Mathematical Foundations of Computer Science 1978, P442
   Schwerter FB, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000162
   Segala R., 1995, Nordic Journal of Computing, V2, P250
   Siek J, 2015, ACM SIGPLAN NOTICES, V50, P425, DOI [10.1145/2737924.2737968, 10.1145/2813885.2737968]
   Siek J, 2009, LECT NOTES COMPUT SC, V5502, P17, DOI 10.1007/978-3-642-00590-9_2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Siek Jeremy G., LEIBNIZ INT P INFORM, V32, P274
   Takikawa A, 2012, ACM SIGPLAN NOTICES, V47, P793, DOI 10.1145/2398857.2384674
   Toro M, 2020, SCI COMPUT PROGRAM, V197, DOI 10.1016/j.scico.2020.102496
   Toro M, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3229061
   Toro M, 2017, LECT NOTES COMPUT SC, V10422, P382, DOI 10.1007/978-3-319-66706-5_19
   Tran Dustin, 2017, 5 INT C LEARNING REP
   Le TA, 2017, PR MACH LEARN RES, V54, P1338
   van de Meent Jan-Willem, 2018, arXiv, DOI DOI 10.48550/ARXIV.1809.10756
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Ye Wenjia, 2021, ECOOP
NR 58
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586036
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600011
OA gold
DA 2024-07-18
ER

PT J
AU Abreu, P
   Delaware, B
   Hubers, A
   Jenkins, C
   Morris, JG
   Stump, A
AF Abreu, Pedro
   Delaware, Benjamin
   Hubers, Alex
   Jenkins, Christa
   Morris, J. Garrett
   Stump, Aaron
TI A Type-Based Approach to Divide-and-Conquer Recursion in Coq
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Divide-and-conquer recursion; strong functional programming; wellfounded
   recursion
ID INDUCTIVE TYPES; CALCULUS
AB This paper proposes a new approach to writing and verifying divide-and-conquer programs in Coq. Extending the rich line of previous work on algebraic approaches to recursion schemes, we present an algebraic approach to divide-and-conquer recursion: recursions are represented as a form of algebra, and from outer recursions, one may initiate inner recursions that can construct data upon which the outer recursions may legally recurse. Termination is enforced entirely by the typing discipline of our recursion schemes. Despite this, our approach requires little from the underlying type system, and can be implemented in System F-omega plus a limited form of positive-recursive types. Our implementation of the method in Coq does not rely on structural recursion or on dependent types. The method is demonstrated on several examples, including mergesort, quicksort, Harper's regular-expression matcher, and others. An indexed version is also derived, implementing a form of divide-and-conquer induction that can be used to reason about functions defined via our method.
C1 [Abreu, Pedro; Delaware, Benjamin] Purdue Univ, W Lafayette, IN 47907 USA.
   [Hubers, Alex; Jenkins, Christa; Morris, J. Garrett; Stump, Aaron] Univ Iowa, Iowa City, IA USA.
C3 Purdue University System; Purdue University; University of Iowa
RP Abreu, P (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM pdacost@purdue.edu; bendy@purdue.edu; alexander-hubers@uiowa.edu;
   cwjnkins@uiowa.edu; garrett-morris@uiowa.edu; aaron-stump@uiowa.edu
RI Morris, J. Garrett/AAI-5463-2020
OI Morris, J. Garrett/0000-0002-3992-1080; Hubers,
   Alex/0000-0002-6237-3326; Delaware, Benjamin/0000-0002-1016-6261
FU Purdue Graduate School
FX We thank the anonymous reviewers for their helpful criticism, which
   greatly improved this paper. Thanks also to Denis Firsov for early
   discussions on the idea of divide-and-conquer recursion based on
   lambda-encodings. We thank Robert Dickerson and Qianchuan Ye for their
   assistance in preparing the accompanying artifact, and Eric Bond for his
   feedback on the final version of this paper. This material is based upon
   work partially supported by the Purdue Graduate School under a Summer
   Research Grant.
CR Abreu Pedro, 2023, ZENODO, DOI [10.5281/zenodo.7305612, DOI 10.5281/ZENODO.7305612]
   Affeldt Reynald, 2021, LEIBNIZ INT P INFORM, V188, DOI [10.4230/LIPIcs.TYPES.2020.2, DOI 10.4230/LIPICS.TYPES.2020.2]
   Ahn KY, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P234
   [Anonymous], 2009, Handbook of Data Compression
   Atkey Robert, 2012, COMPUTER SCI LOGIC C, V16, P46
   Barthe G, 2004, MATH STRUCT COMP SCI, V14, P97, DOI 10.1017/S0960129503004122
   Barthe G, 2006, LECT NOTES COMPUT SC, V3945, P114
   BELL JL, 1993, J PHILOS LOGIC, V22, P1, DOI 10.1007/BF01049178
   Bernardy JP, 2011, LECT NOTES COMPUT SC, V6604, P108, DOI 10.1007/978-3-642-19805-2_8
   Biendarra J, 2017, LECT NOTES ARTIF INT, V10483, P3, DOI 10.1007/978-3-319-66167-4_1
   Bird Richard, 1997, Algebra of Programming
   Blanqui F, 2005, FUND INFORM, V65, P61
   Bove A, 2005, MATH STRUCT COMP SCI, V15, P671, DOI 10.1017/S0960129505004822
   Bove A, 2016, MATH STRUCT COMP SCI, V26, P38, DOI 10.1017/S0960129514000115
   Breitner J, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796820000283
   Chan JAT, 2021, Arxiv, DOI arXiv:1912.05601
   Charguéraud A, 2010, LECT NOTES COMPUT SC, V6172, P195, DOI 10.1007/978-3-642-14052-5_15
   Chargueraud Arthur, 2021, TLC COQ LIB
   Claret Guillaume, 2021, COQ OCAML
   Cockett Robin, 1992, INT M CATEGORY THEOR
   Copello E, 2014, LECT NOTES COMPUT SC, V8771, P62, DOI 10.1007/978-3-319-11863-5_5
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   COQUAND T, 1990, LECT NOTES COMPUT SC, V417, P50
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Delaware B, 2013, ACM SIGPLAN NOTICES, V48, P319, DOI [10.1145/2500365.2500587, 10.1145/2544174.2500587]
   Delaware B, 2013, ACM SIGPLAN NOTICES, V48, P207, DOI 10.1145/2480359.2429094
   Firsov D, 2018, LECT NOTES COMPUT SC, V10895, P235, DOI 10.1007/978-3-319-94821-8_14
   Firsov Denis., 2018, Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs, CPP 2018, page, P215, DOI [10.1145/3167087, DOI 10.1145/3167087]
   Gilbert G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290316
   Hagino T., 1987, PhD thesis
   Harper R., 1999, Journal of Functional Programming, V9, P463, DOI 10.1017/S0956796899003378
   Hongwei Xi, 2002, Higher-Order and Symbolic Computation, V15, P91, DOI 10.1023/A:1019916231463
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Korkut Joomy, 2016, INTRINSIC VERI UNPUB
   Krauss A, 2010, J AUTOM REASONING, V44, P303, DOI 10.1007/s10817-009-9157-2
   Krstic S, 2003, LECT NOTES COMPUT SC, V2758, P253
   Matthes R, 2009, J FUNCT PROGRAM, V19, P439, DOI 10.1017/S095679680900731X
   Matthews J, 1999, LECT NOTES COMPUT SC, V1690, P73
   McBride C., 2002, Types for Proofs and Programs. International Workshop, TYPES 2000. Selected Papers (Lecture Notes in Computer Science Vol.2277), P197
   MENDLER NP, 1991, ANN PURE APPL LOGIC, V51, P159, DOI 10.1016/0168-0072(91)90069-X
   Mitchell Neil, 2021, DATA LIST EXTRA
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   Owens Scott, 2008, Higher-Order and Symbolic Computation, V21, P377, DOI 10.1007/s10990-008-9038-0
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sozeau M, 2007, LECT NOTES COMPUT SC, V4502, P237
   Sozeau M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341690
   Sozeau M, 2020, J AUTOM REASONING, V64, P947, DOI 10.1007/s10817-019-09540-0
   Standard library Coq, 2009, SORT MERG V
   Stump A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409004
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   The Agda development team, 2016, AGD
   The Coq development team, 2016, COQ PROOF ASS REF MA
   Traytel D, 2012, IEEE S LOG, P596, DOI 10.1109/LICS.2012.75
   Turner DA, 1995, LECT NOTES COMPUT SC, V1022, P1
   Uustalu T., 1999, Nordic Journal of Computing, V6, P343
   Uustalu T, 2011, ELECTRON NOTES THEOR, V229, P135, DOI 10.1016/j.entcs.2011.02.020
   Ye Qianchuan, 2022, 8 INT WORKSHOP COQ P
NR 57
TC 0
Z9 1
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
AR 3
DI 10.1145/3571196
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500003
OA gold
DA 2024-07-18
ER

PT J
AU Gancher, J
   Sojakova, K
   Fan, X
   Shi, E
   Morrisett, G
AF Gancher, Joshua
   Sojakova, Kristina
   Fan, Xiong
   Shi, Elaine
   Morrisett, Greg
TI A Core Calculus for Equational Proofs of Cryptographic Protocols
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE cryptographic protocols; equational reasoning; observational equivalence
ID SECURITY
AB Many proofs of interactive cryptographic protocols (e.g., as in Universal Composability) operate by proving the protocol at hand to be observationally equivalent to an idealized specification. While pervasive, formal tool support for observational equivalence of cryptographic protocols is still a nascent area of research. Current mechanization efforts tend to either focus on diff-equivalence, which establishes observational equivalence between protocols with identical control structures, or require an explicit witness for the observational equivalence in the form of a bisimulation relation.
   Our goal is to simplify proofs for cryptographic protocols by introducing a core calculus, IPDL, for cryptographic observational equivalences. Via IPDL, we aim to address a number of theoretical issues for cryptographic proofs in a simple manner, including probabilistic behaviors, distributed message-passing, and resource-bounded adversaries and simulators. We demonstrate IPDL on a number of case studies, including a distributed coin toss protocol, Oblivious Transfer, and the GMW multi-party computation protocol. All proofs of case studies are mechanized via an embedding of IPDL into the Coq proof assistant.
C1 [Gancher, Joshua; Shi, Elaine] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Sojakova, Kristina] INRIA, Le Chesnay Rocquencourt, France.
   [Fan, Xiong] Rutgers State Univ, Piscataway, NJ USA.
   [Morrisett, Greg] Cornell Univ, Ithaca, NY 14853 USA.
C3 Carnegie Mellon University; Inria; Rutgers University System; Rutgers
   University New Brunswick; Cornell University
RP Gancher, J (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
OI Sojakova, Kristina/0000-0003-4880-1416
FU National Science Foundation [1704788, 1801369]; ANR TECAP
   [ANR-17-CE39-0004-03]; Packard Fellowship; ONR YIP award; NGI Assure
   Fund; European Commission's Next Generation Internet programme, under
   the aegis of DG Communications Networks, Content and Technology
   [957073]; Agence Nationale de la Recherche (ANR) [ANR-17-CE39-0004]
   Funding Source: Agence Nationale de la Recherche (ANR); H2020 -
   Industrial Leadership [957073] Funding Source: H2020 - Industrial
   Leadership; Division Of Computer and Network Systems; Direct For
   Computer & Info Scie & Enginr [1704788] Funding Source: National Science
   Foundation
FX This material is based upon work supported by the National Science
   Foundation under Grants No. 1704788 and No. 1801369. This work was
   partly supported by ANR TECAP (decision number ANR-17-CE39-0004-03).
   This work was also supported by a Packard Fellowship and an ONR YIP
   award. This project was partially funded through the NGI Assure Fund, a
   fund established by NLnet with financial support from the European
   Commission's Next Generation Internet programme, under the aegis of DG
   Communications Networks, Content and Technology under grant agreement No
   957073.
CR Abadi M, 2002, J CRYPTOL, V15, P103, DOI 10.1007/s00145-001-0014-7
   Backes M, 2007, INFORM COMPUT, V205, P1685, DOI 10.1016/j.ic.2007.05.002
   Backes Michael., 2012, P 2012 ACM C COMPUTE, P699
   Baelde D., 2021, SP 2021 42 IEEE S SE
   Bana G, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P609, DOI 10.1145/2660267.2660276
   Barbosa Manuel, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P777, DOI 10.1109/SP40001.2021.00008
   Barbosa M, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2541, DOI 10.1145/3460120.3484548
   Barthe G, 2015, CCS'15: PROCEEDINGS OF THE 22ND ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1156, DOI 10.1145/2810103.2813697
   Barthe G, 2011, LECT NOTES COMPUT SC, V6841, P71, DOI 10.1007/978-3-642-22792-9_5
   Beaver D, 1995, LECT NOTES COMPUT SC, V963, P97
   Bhargavan K., 2021, EUROS P 2021 6 IEEE
   Blanchet Bruno, 2014, Foundations of Security Analysis and Design VII. FOSAD 2012/2013 Tutorial Lectures: LNCS 8604, P54, DOI 10.1007/978-3-319-10082-1_3
   Blanchet B, 2006, P IEEE S SECUR PRIV, P140, DOI 10.1109/SP.2006.1
   Blum M., 1982, Digest of Papers Spring COMPCON 82. High Technology in the Information Industry, P133, DOI 10.1145/1008908.1008911
   Butler D, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P229, DOI 10.1145/3372885.3373815
   Canetti R, 2001, ANN IEEE SYMP FOUND, P136, DOI 10.1109/sfcs.2001.959888
   Canetti R, 2019, P IEEE COMPUT SECUR, P167, DOI 10.1109/CSF.2019.00019
   Castro M, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE THIRD SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '99), P173, DOI 10.1145/571637.571640
   Cortier V, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P63
   Cremers CJF, 2008, LECT NOTES COMPUT SC, V5123, P414
   DOLEV D, 1983, IEEE T INFORM THEORY, V29, P198, DOI 10.1109/TIT.1983.1056650
   Eldefrawy K, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P851, DOI 10.1145/3319535.3354205
   Firsov D, 2022, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP '22), P166, DOI 10.1145/3497775.3503693
   Gancher Joshua, 2022, CORE CALCULUS EQUATI
   Hirsch AK, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498684
   Liao K, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P640, DOI 10.1145/3314221.3314607
   Lindell Y, 2021, COMMUN ACM, V64, P86, DOI 10.1145/3387108
   Lochbihler A, 2019, P IEEE COMPUT SECUR, P152, DOI 10.1109/CSF.2019.00018
   Lochbihler Andreas, 2018, 2018941 CRYPT EPR AR
   Lowe G., 1996, Tools and Algorithms for the Construction and Analysis of Systems. Second International Workshop, TACAS '96. Proceedings, P147
   Mahboubi Assia, 2021, Mathematical Components, DOI DOI 10.5281/ZENODO.4457887
   Maurer U, 2012, LECT NOTES COMPUT SC, V6993, P33, DOI 10.1007/978-3-642-27375-9_3
   Meier Simon, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P696, DOI 10.1007/978-3-642-39799-8_48
   Micali S., 1987, ACM S THEOR COMP, P218, DOI [10.1145/28395.28420, DOI 10.1145/28395.28420]
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Naor M., 1999, Proceedings of the Thirty-First Annual ACM Symposium on Theory of Computing, P245, DOI 10.1145/301250.301312
   Petcher Adam, 2015, Principles of Security and Trust. 4th International Conference, POST 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9036, P53, DOI 10.1007/978-3-662-46666-7_4
   Schneider S, 1996, P IEEE S SECUR PRIV, P174, DOI 10.1109/SECPRI.1996.502680
NR 38
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571223
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500030
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Pujet, L
   Tabareau, N
AF Pujet, Loic
   Tabareau, Nicolas
TI Impredicative Observational Equality
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type theory; dependent types; rewriting theory; confluence; termination
AB In dependent type theory, impredicativity is a powerful logical principle that allows the definition of propositions that quantify over arbitrarily large types, potentially resulting in self-referential propositions. Impredicativity can provide a system with increased logical strength and flexibility, but in counterpart it comes with multiple incompatibility results. In particular, Abel and Coquand showed that adding definitional uniqueness of identity proofs (UIP) to the main proof assistants that support impredicative propositions (Coq and Lean) breaks the normalization procedure, and thus the type-checking algorithm. However, it was not known whether this stems from a fundamental incompatibility between UIP and impredicativity or if a more suitable algorithm could decide type-checking for a type theory that supports both. In this paper, we design a theory that handles both UIP and impredicativity by extending the recently introduced observational type theory TTobs with an impredicative universe of definitionally proof-irrelevant types, as initially proposed in the seminal work on observational equality of Altenkirch et al. We prove decidability of conversion for the resulting system, that we call CCobs, by harnessing proof-irrelevance to avoid computing with impredicative proof terms. Additionally, we prove normalization for CCobs in plain Martin-Lof type theory, thereby showing that adding proof-irrelevant impredicativity does not increase the computational content of the theory.
C1 [Pujet, Loic; Tabareau, Nicolas] INRIA, Gallinette Project Team, Nantes, France.
C3 Inria
RP Pujet, L (corresponding author), INRIA, Gallinette Project Team, Nantes, France.
OI Pujet, Loic/0000-0002-2070-051X; tabareau, nicolas/0000-0003-3366-2273
CR Abel A, 2005, LECT NOTES COMPUT SC, V3461, P23
   Abel A, 2007, ELECTRON NOTES THEOR, V173, P17, DOI 10.1016/j.entcs.2007.02.025
   Abel A, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(2:14)2020
   Abel A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158111
   Allais Guillaume, 2013, P 2013 ACM SIGPLAN W, P13, DOI [10.1145/2502409.2502411, DOI 10.1145/2502409.2502411]
   Altenkirch T., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P412, DOI 10.1109/LICS.1999.782636
   Altenkirch T, 2019, LECT NOTES COMPUT SC, V11825, P155, DOI 10.1007/978-3-030-33636-3_7
   Altenkirch T, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P57, DOI 10.1145/1292597.1292608
   [Anonymous], 1992, Handbook of Logic in Computer Science
   Cohen C., 2018, LEIBNIZ INT P INFORM, DOI [DOI 10.4230/LIPICS.TYPES.2015.5, 10.4230/LIPIcs]
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Forster Yannick, 2021, 29 EACSL ANN C COMPU, V183, DOI [10.4230/LIPIcs.CSL.2021.21, DOI 10.4230/LIPICS.CSL.2021.21]
   Gilbert G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290316
   Girard J.-Y., 1972, PhD thesis
   Gratzer D, 2022, Arxiv, DOI arXiv:2202.05529
   Hancock P, 2013, LECT NOTES COMPUT SC, V7941, P156, DOI 10.1007/978-3-642-38946-7_13
   Hofmann M., 1995, THESIS U EDINBURGH
   Hur CK, 2013, ACM SIGPLAN NOTICES, V48, P193, DOI 10.1145/2480359.2429093
   Hurkens A. J. C., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P266, DOI 10.1007/BFb0014058
   Martin-Lof P., 1975, STUDIES LOGIC FDN MA, V80, P73
   Pujet L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498693
   Sterling J., 2019, 4 INT C FORMAL STRUC, V31, P1
   Werner Benjamin, 1994, THESES
NR 23
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
AR 74
DI 10.1145/3571739
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500074
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Smeding, TJ
   Vákár, MIL
AF Smeding, Tom J.
   Vakar, Matthijs I. L.
TI Efficient Dual-Numbers Reverse AD viaWell-Known Program Transformations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE automatic differentiation; source transformation; functional programming
AB Where dual-numbers forward-mode automatic differentiation (AD) pairs each scalar value with its tangent value, dual-numbers reverse-mode AD attempts to achieve reverse AD using a similarly simple idea: by pairing each scalar value with a backpropagator function. Its correctness and efficiency on higher-order input languages have been analysed by Brunel, Mazza and Pagani, but this analysis used a custom operational semantics for which it is unclear whether it can be implemented efficiently. We take inspiration from their use of linear factoring to optimise dual-numbers reverse-mode AD to an algorithm that has the correct complexity and enjoys an efficient implementation in a standard functional language with support for mutable arrays, such as Haskell. Aside from the linear factoring ingredient, our optimisation steps consist of well-known ideas from the functional programming community. We demonstrate the use of our technique by providing a practical implementation that differentiates most of Haskell98.
C1 [Smeding, Tom J.; Vakar, Matthijs I. L.] Univ Utrecht, Dept Informat & Comp Sci, Utrecht, Netherlands.
C3 Utrecht University
RP Smeding, TJ (corresponding author), Univ Utrecht, Dept Informat & Comp Sci, Utrecht, Netherlands.
EM t.j.smeding@uu.nl; m.i.l.vakar@uu.nl
OI Smeding, Tom/0000-0002-4986-6820; Vakar, Matthijs/0000-0003-4603-0523
CR Abadi M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371106
   Baydin AG, 2018, J MACH LEARN RES, V18
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Brunel A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371132
   De Vilhena PE, 2023, Arxiv, DOI arXiv:2112.07292
   Elliott C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236765
   Griewank A, 2008, OTHER TITL APPL MATH, V105, P1, DOI 10.1137/1.9780898717761
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Huot M, 2020, LECT NOTES COMPUT SC, V12077, P319, DOI 10.1007/978-3-030-45231-5_17
   Kmett E., 2021, AD AUTOMATIC DIFFERE
   Krawiec F, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498710
   LAUNCHBURY J, 1994, SIGPLAN NOTICES, V29, P24, DOI 10.1145/773473.178246
   Linnainmaa S., 1970, The representation of the cumulative rounding error of an algorithm as a taylor expansion of the local rounding errors
   Margossian CC, 2019, WIRES DATA MIN KNOWL, V9, DOI 10.1002/widm.1305
   Mazza D, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434309
   Nunes FL, 2024, Arxiv, DOI arXiv:2210.07724
   Nunes Fernando Lucatelli, 2022, ARXIV
   Nunes Fernando Lucatelli, 2021, arXiv
   Paszke A, 2021, Arxiv, DOI arXiv:2104.05372
   Paszke Adam, 2017, NIPS 2017 WORKSH AUT
   Pearlmutter BA, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330018
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P363, DOI 10.1023/A:1010027404223
   Schenck R, 2022, Arxiv, DOI arXiv:2202.10297
   Shaikhha A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341701
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Sigal J, 2021, Arxiv, DOI arXiv:2101.08095
   Smeding Tom, 2022, Zenodo, DOI 10.5281/ZENODO.7130343
   Smeding TJ, 2024, Arxiv, DOI arXiv:2207.03418
   Speelpenning B., 1980, COMPILING FAST PARTI, DOI DOI 10.2172/5254402
   Vákár M, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3527634
   Vákár M, 2021, LECT NOTES COMPUT SC, V12648, P607, DOI 10.1007/978-3-030-72019-3_22
   Vytiniotis Dimitrios, 2019, NEURIPS WORKSHOP PRO
   Wang Fei, 2018, 6 INT C LEARNING REP
   WENGERT RE, 1964, COMMUN ACM, V7, P463, DOI 10.1145/355586.364791
NR 34
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571247
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500054
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Meyer, R
   Wies, T
   Wolff, S
AF Meyer, Roland
   Wies, Thomas
   Wolff, Sebastian
TI A Concurrent Program Logic with a Future and History
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Linearizability; Non-blocking Data Structures; Harris Set
ID LINEARIZABILITY; ABSTRACTION
AB Verifying fine-grained optimistic concurrent programs remains an open problem. Modern program logics provide abstraction mechanisms and compositional reasoning principles to deal with the inherent complexity. However, their use is mostly confined to pencil-and-paper or mechanized proofs. We devise a new separation logic geared towards the lacking automation. While local reasoning is known to be crucial for automation, we are the first to show how to retain this locality for (i) reasoning about inductive properties without the need for ghost code, and (ii) reasoning about computation histories in hindsight. We implemented our new logic in a tool and used it to automatically verify challenging concurrent search structures that require inductive properties and hindsight reasoning, such as the Harris set.
C1 [Meyer, Roland] TU Braunschweig, Braunschweig, Germany.
   [Wies, Thomas; Wolff, Sebastian] NYU, New York, NY USA.
C3 Braunschweig University of Technology; New York University
RP Meyer, R (corresponding author), TU Braunschweig, Braunschweig, Germany.
EM roland.meyer@tu-bs.de; wies@cs.nyu.edu; sebastian.wolff@cs.nyu.edu
OI Wolff, Sebastian/0000-0002-3974-7713; Wies, Thomas/0000-0003-4051-5968
FU National Science Foundation [1815633]; Simons Foundation [855328]
FX This work is funded in parts by the National Science Foundation under
   grant 1815633. The third author is supported by a Junior Fellowship from
   the Simons Foundation (855328, SW).
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Abdulla Parosh Aziz, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P442, DOI 10.1007/978-3-319-89884-1_16
   Abdulla PA, 2013, LECT NOTES COMPUT SC, V7795, P324, DOI 10.1007/978-3-642-36742-7_23
   [Anonymous], 1995, Temporal verification of reactive systems-safety
   Bell CJ, 2010, LECT NOTES COMPUT SC, V6337, P151, DOI 10.1007/978-3-642-15769-1_10
   Bouajjani A, 2017, LECT NOTES COMPUT SC, V10427, P542, DOI 10.1007/978-3-319-63390-9_28
   Bouajjani A, 2015, LECT NOTES COMPUT SC, V9135, P95, DOI 10.1007/978-3-662-47666-6_8
   Bouajjani A, 2013, LECT NOTES COMPUT SC, V7792, P290, DOI 10.1007/978-3-642-37036-6_17
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Crain T, 2016, PARALLEL PROCESS LET, V26, DOI 10.1142/S0129626416500158
   Crain T, 2013, LECT NOTES COMPUT SC, V8097, P229, DOI 10.1007/978-3-642-40047-6_25
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Delbianco German Andres, 2017, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V74, DOI [10.4230/LIPIcs.ECOOP.2017.8, DOI 10.4230/LIPICS.ECOOP.2017.8]
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Dinsdale-Young T, 2017, LECT NOTES COMPUT SC, V10201, P420, DOI 10.1007/978-3-662-54434-1_16
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Elmas T, 2010, LECT NOTES COMPUT SC, V6015, P296, DOI 10.1007/978-3-642-12002-2_25
   Feldman YMY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428196
   Feldman Yotam M. Y., 2018, LIPIcs, V121, P231, DOI [10.4230/LIPIcs.DISC.2018.23, DOI 10.4230/LIPICS.DISC.2018.23]
   Feng XY, 2009, ACM SIGPLAN NOTICES, V44, P315, DOI 10.1145/1594834.1480922
   Fraser Keir, 2004, Practical lock-freedom
   Fu M, 2010, LECT NOTES COMPUT SC, V6269, P388, DOI 10.1007/978-3-642-15375-4_27
   Gotsman A, 2013, LECT NOTES COMPUT SC, V7792, P249, DOI 10.1007/978-3-642-37036-6_15
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Harris Timothy L., 2001, DISC LNCS, P300, DOI DOI 10.1007/3-540-45414-4_21
   Heller S, 2006, LECT NOTES COMPUT SC, V3974, P3
   Hemed N, 2015, LECT NOTES COMPUT SC, V9363, P371, DOI 10.1007/978-3-662-48653-5_25
   Henzinger TA, 2003, LECT NOTES COMPUT SC, V2725, P262
   Herlihy M., 2008, The Art of Multiprocessor Programming
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Itzhaky S, 2014, ACM SIGPLAN NOTICES, V49, P385, DOI 10.1145/2535838.2535854
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kragl B, 2020, LECT NOTES COMPUT SC, V12224, P275, DOI 10.1007/978-3-030-53288-8_14
   Krishna S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P181, DOI 10.1145/3385412.3386029
   Krishna S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158125
   Krishna S, 2020, LECT NOTES COMPUT SC, V12075, P308, DOI 10.1007/978-3-030-44914-8_12
   Lev-Ari K, 2015, LECT NOTES COMPUT SC, V9363, P356, DOI 10.1007/978-3-662-48653-5_24
   Levandoski JJ, 2013, PROC INT CONF DATA, P302, DOI 10.1109/ICDE.2013.6544834
   Liang HJ, 2013, ACM SIGPLAN NOTICES, V48, P459, DOI 10.1145/2499370.2462189
   Meyer R, 2022, Arxiv, DOI [arXiv:2207.02355, 10.48550/arXiv.2207.02355, DOI 10.48550/ARXIV.2207.02355]
   Meyer Roland, 2022, Zenodo, DOI 10.5281/ZENODO.7080459
   Meyer R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371136
   Meyer R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290371
   Michael M. M., 2002, P 14 ANN ACM S PAR A, P73, DOI DOI 10.1145/564870.564881
   Mulder I, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P809, DOI 10.1145/3519939.3523432
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2010, PODC 2010: PROCEEDINGS OF THE 2010 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P85, DOI 10.1145/1835698.1835722
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Parkinson Matthew, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P297, DOI 10.1145/1190216.1190261
   Patel N, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485490
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Rival X, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275501
   Schneider F.B., 1997, On concurrent programming, DOI [DOI 10.1007/978-1-4612-1830-2, 10. 1007/978-1-4612-1830-2]
   Sergey I, 2015, LECT NOTES COMPUT SC, V9032, P333, DOI 10.1007/978-3-662-46669-8_14
   SHASHA D, 1988, ACM T DATABASE SYST, V13, P53, DOI 10.1145/42201.42204
   Ter-Gabrielyan A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360547
   Vafeiadis V., 2008, Ph. D. Dissertation
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   Vafeiadis V, 2010, LECT NOTES COMPUT SC, V6174, P450, DOI 10.1007/978-3-642-14295-6_40
   Vafeiadis V, 2010, LECT NOTES COMPUT SC, V5944, P345, DOI 10.1007/978-3-642-11319-2_25
   Vafeiadis V, 2009, LECT NOTES COMPUT SC, V5403, P335, DOI 10.1007/978-3-540-93900-9_27
   Vechev M, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P125, DOI 10.1145/1375581.1375598
   Windsor M, 2017, LECT NOTES COMPUT SC, V10426, P544, DOI 10.1007/978-3-319-63387-9_27
   Wolf FA, 2021, LECT NOTES COMPUT SC, V13047, P407, DOI 10.1007/978-3-030-90870-6_22
   Yang H, 2008, LECT NOTES COMPUT SC, V5123, P385
   Zhu H, 2015, LECT NOTES COMPUT SC, V9207, P3, DOI 10.1007/978-3-319-21668-3_1
NR 71
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 174
DI 10.1145/3563337
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200051
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Materzok, M
AF Materzok, Marek
TI Generating Circuits with Generators
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE hardware description languages; circuit synthesis; generators
AB The most widely used languages and methods used for designing digital hardware fall into two rough categories. One of them, register transfer level (RTL), requires specifying each and every component in the designed circuit. This gives the designer full control, but burdens the designer with many trivial details. The other, the high-level synthesis (HLS) method, allows the designer to abstract the details of hardware away and focus on the problem being solved. This method however cannot be used for a class of hardware design problems because the circuit's clock is also abstracted away.
   We present YieldFSM, a hardware description language that uses the generator abstraction to represent clock-level timing in a digital circuit. It represents a middle ground between the RTL and HLS approaches: the abstraction level is higher than in RTL, but thanks to explicit information about clock-level timing, it can be used in applications where RTL is traditionally used. We also present the YieldFSM compiler, which uses methods developed by the functional programming community - including continuation-passsing style translation and defunctionalization - to translate YieldFSM programs to Mealy machines. It is implemented using Template Haskell and the Clash functional hardware description language. We show that this approach leads to short and conceptually simple hardware descriptions.
C1 [Materzok, Marek] Univ Wroclaw, Fac Math & Comp Sci, Ul Joliot Curie 15, PL-50383 Wroclaw, Poland.
C3 University of Wroclaw
RP Materzok, M (corresponding author), Univ Wroclaw, Fac Math & Comp Sci, Ul Joliot Curie 15, PL-50383 Wroclaw, Poland.
EM marek.materzok@uwr.edu.pl
OI Materzok, Marek/0000-0002-0908-4859
CR [Anonymous], 2018, IEEE, DOI DOI 10.1109/IEEESTD.2018.8299595
   [Anonymous], 2013, Queue, DOI [DOI 10.1145/2436696.2443836, 10.1145/2436696.2443836]
   Baaij Christiaan, 2014, Trends in Functional Programming. 14th International Symposium, TFP 2013. Revised Selected Papers: LNCS 8322, P17, DOI 10.1007/978-3-642-45340-3_2
   Baaij C, 2010, 13TH EUROMICRO CONFERENCE ON DIGITAL SYSTEM DESIGN: ARCHITECTURES, METHODS AND TOOLS, P714, DOI 10.1109/DSD.2010.21
   Bachrach J, 2012, DES AUT CON, P1212
   Bell JM, 1997, ACM SIGPLAN NOTICES, V32, P25, DOI 10.1145/258949.258953
   Biernacki Dariusz., 2020, P 47 ANN ACM S PRINC
   Canis A, 2011, FPGA 11: PROCEEDINGS OF THE 2011 ACM/SIGDA INTERNATIONAL SYMPOSIUM ON FIELD PROGRAMMABLE GATE ARRAYS, P33
   Clerc Xavier, 2018, HARDC
   DIJKSTRA EW, 1968, COMMUN ACM, V11, P147, DOI 10.1145/362929.362947
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   GORDON M, 1995, IEEE S LOG, P136, DOI 10.1109/LICS.1995.523251
   Greengard S, 2020, COMMUN ACM, V63, P30, DOI 10.1145/3386377
   Hennessy JL, 2019, COMMUN ACM, V62, P48, DOI 10.1145/3282307
   Hitachi, 1998, HD44780U
   HOARE CAR, 1975, INT J COMPUT INF SCI, V4, P105, DOI 10.1007/BF00976239
   Hudak P., 1996, ACM COMPUT SURV, V28, P196, DOI [10.1145/242224.242477, DOI 10.1145/242224.242477]
   IEEE, 2019, IEEE Std 1076-2019, DOI [10.1109/IEEESTD.2019.8938196, DOI 10.1109/IEEESTD.2019.8938196]
   Jesse op den Brouw, 2012, SIMPLE HD44780 DRIVE
   JOHNSSON T, 1985, LECT NOTES COMPUT SC, V201, P190
   LISKOV B, 1977, COMMUN ACM, V20, P564, DOI 10.1145/359763.359789
   Lowe-Power J, 2019, WCAE'19: PROCEEDINGS OF THE WORKSHOP ON COMPUTER ARCHITECTURE EDUCATION, DOI 10.1145/3338698.3338892
   Mainland GB, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P73
   Materzok Marek, 2022, REPR PACK ART GEN CI, DOI [10.5281/zenodo.6874025, DOI 10.5281/ZENODO.6874025]
   MEALY GH, 1955, AT&T TECH J, V34, P1045, DOI 10.1002/j.1538-7305.1955.tb03788.x
   Mills Don, 1999, 9 ANN SYNOPSYS EPIC
   Moore E.F., 1956, Automata studies, P129
   Najd S, 2016, PEPM'16: PROCEEDINGS OF THE 2016 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P25, DOI 10.1145/2847538.2847541
   Nakata K, 2010, ELECTRON PROC THEOR, P57, DOI 10.4204/EPTCS.32.5
   Papon Charles., 2017, FREE OPEN SOURCE SOF
   Pilato C, 2013, I C FIELD PROG LOGIC
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Plotkin Gordon, 2004, Electronic Notes in Theoretical Computer Science, V73, P149, DOI DOI 10.1016/J.ENTCS.2004.08.008
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Sarkar S, 2009, IEEE DES TEST COMPUT, V26, P34, DOI 10.1109/MDT.2009.84
   Schemenauer Neil, 2001, PEP, P255
   Shacham O, 2010, IEEE MICRO, V30, P9, DOI 10.1109/MM.2010.81
   Shahzad D, 2019, IEEE W CONTR MODEL, DOI [10.1109/FCCM.2019.00010, 10.1109/compel.2019.8769700]
   Truong Lenny, 2019, 3 SUMM ADV PROGR LAN, V136, P1, DOI 10.4230/LIPIcs.SNAPL.2019.7
   Waterman A., 2019, RISC V INSTRUCTION S
   Zekany Stephen A., 2021, SIGCSE '21: Proceedings of the 52nd ACM Technical Symposium on Computer Science Education, P1096, DOI 10.1145/3408877.3432472
NR 41
TC 1
Z9 1
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 92
DI 10.1145/3549821
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000003
OA gold
DA 2024-07-18
ER

PT J
AU Labrada, E
   Toro, M
   Tanter, É
   Devriese, D
AF Labrada, Elizabeth
   Toro, Matias
   Tanter, Eric
   Devriese, Dominique
TI Plausible Sealing for Gradual Parametricity
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Gradual typing; polymorphism; parametricity
AB Graduality and parametricity have proven to be extremely challenging notions to bring together. Intuitively, enforcing parametricity gradually requires possibly sealing values in order to detect violations of uniform behavior. Toro et al. (2019) argue that the two notions are incompatible in the context of System F, where sealing is transparently driven by potentially imprecise type information, while New et al. (2020) reconcile both properties at the cost of abandoning the syntax of System F and requiring user-provided sealing annotations that are not subject to graduality guarantees. Furthermore, all current proposals rely on a global form of dynamic sealing in order to enforce parametric behavior at runtime, which weakens parametric reasoning and breaks equivalences in the static language. Based on the observation that the tension between graduality and parametricity comes from the early commitment to seal values based on type information, we propose plausible sealing as a new intermediate language mechanism that allows postponing such decisions to runtime. We propose an intermediate language for gradual parametricity, Funky, which supports plausible sealing in a simplified setting where polymorphism is restricted to instantiations with base and variable types. We prove that Funky satisfies both parametricity and graduality, mechanizing key lemmas in Agda. Additionally, we avoid global dynamic sealing and instead propose a novel lexically-scoped form of sealing realized using a representation of evidence inspired by the category of spans. As a consequence, Funky satisfies a standard formulation of parametricity that does not break System F equivalences. In order to show the practicality of plausible sealing, we describe a translation from Funk, a source language without explicit sealing, to Funky, that takes care of inserting plausible sealing forms. We establish graduality of Funk, subject to a restriction on type applications, and explain the source-level parametric reasoning it supports. Finally, we provide an interactive prototype along with illustrative examples both novel and from the literature.
C1 [Labrada, Elizabeth; Toro, Matias; Tanter, Eric] Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Beauchef 851, Santiago, Chile.
   [Devriese, Dominique] Katholieke Univ Leuven, Imec DistriNet, Leuven, Belgium.
   [Labrada, Elizabeth] Vrije Univ Brussel, Brussels, Belgium.
   [Labrada, Elizabeth] Katholieke Univ Leuven, Leuven, Belgium.
C3 Universidad de Chile; KU Leuven; Vrije Universiteit Brussel; KU Leuven
RP Labrada, E (corresponding author), Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Beauchef 851, Santiago, Chile.
EM elabrada@dcc.uchile.cl; mtoro@dcc.uchile.cl; etanter@dcc.uchile.cl;
   dominique.devriese@kuleuven.be
RI Devriese, Dominique/C-5493-2014; Tanter, Eric/A-7955-2008
OI Devriese, Dominique/0000-0002-3862-6856; Tanter,
   Eric/0000-0002-7359-890X; Toro, Matias/0000-0002-5315-0198
FU ANID FONDECYT, Chile [1190058, 3200583]
FX Research conducted while Elizabeth was affiliated with Vrije
   Universiteit Brussel and KU Leuven, Belgium. This work is partially
   funded by ANID FONDECYT projects 1190058 and 3200583, Chile.
CR Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   Ahmed Amal, 2006, LECT NOTES COMPUTER, V3924, p69s83
   Ahmed Amal, 2017, SEE ICFP 2017 2017, V39, p1s39:28
   Ahmed Amal, 2004, SEMANTICS TYPES MUTA
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Bodik Rastislav, 2016, P 43 ACM SIGPLAN SIG
   Cimini Matteo, 2016, GRADUALIZER METHODOL
   Devriese D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158126
   Garcia Ronald, 2016, ABSTRACTING GRADUAL
   Girard J.-Y., 1972, INTERPRETATION FONCT
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   ICFP, 2017, ABOUT AS
   Igarashi Yuu, 2017, SEE ICFP 2017 2017, V40, P29
   Jacobs Koen, 2021, POPL 2021, V7, P30
   Lehmann Nico, 2017, ACM SIGPLAN Notices, V52, P775, DOI 10.1145/3093333.3009856
   Matthews J, 2008, LECT NOTES COMPUT SC, V4960, P16
   MORRIS JH, 1973, COMMUN ACM, V16, P15, DOI 10.1145/361932.361937
   New MS, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236768
   New MS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371114
   Ningning Xie, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P3, DOI 10.1007/978-3-319-89884-1_1
   nLab contributors, 2021, PULLBACK
   nLab contributors, 2021, SPAN
   Pierce B., 2000, Relating cryptography and polymorphism
   POPL, 2021, ABOUT AS
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Reynolds J. C., 1974, Programming Symposium, P408
   Schwerter FB, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434342
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Sumii E, 2004, ACM SIGPLAN NOTICES, V39, P161, DOI 10.1145/982962.964015
   Toro M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290330
   Toro M, 2020, SCI COMPUT PROGRAM, V197, DOI 10.1016/j.scico.2020.102496
   Toro M, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3229061
NR 34
TC 3
Z9 3
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 70
DI 10.1145/3527314
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300006
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Yan, P
   Jiang, HR
   Yu, NK
AF Yan, Peng
   Jiang, Hanru
   Yu, Nengkun
TI On Incorrectness Logic for Quantum Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Incorrectness Logic; Quantum Programming Languages; Projective Quantum
   Predicates
AB Bug-catching is important for developing quantum programs. Motivated by the incorrectness logic for classical programs, we propose an incorrectness logic towards a logical foundation for static bug-catching in quantum programming. The validity of formulas in this logic is dual to that of quantum Hoare logics. We justify the formulation of validity by an intuitive explanation from a reachability point of view and a comparison against several alternative formulations. Compared with existing works focusing on dynamic analysis, our logic provides sound and complete arguments. We further demonstrate the usefulness of the logic by reasoning several examples, including Grover's search, quantum teleportation, and a repeat-until-success program. We also automate the reasoning procedure by a prototyped static analyzer built on top of the logic rules.
C1 [Yan, Peng; Yu, Nengkun] Univ Technol Sydney, Ctr Quantum Software & Informat, Sydney, NSW, Australia.
   [Jiang, Hanru] Yanqi Lake Beijing Inst Math Sci & Applicat, Beijing, Peoples R China.
C3 University of Technology Sydney; Yanqi Lake Beijing Institute of
   Mathematical Sciences & Applications
RP Yu, NK (corresponding author), Univ Technol Sydney, Ctr Quantum Software & Informat, Sydney, NSW, Australia.
EM pengyan.edu@gmail.com; hanru@bimsa.cn; nengkunyu@gmail.com
RI yu, nengkun/HTP-0286-2023; Yan, Peng/HJA-6167-2022
OI Yan, Peng/0000-0003-2930-7447; Yu, Nengkun/0000-0003-1188-3032; Jiang,
   Hanru/0000-0002-5965-1209
FU ARC Discovery Program [DP210102449]; ARC DECRA [DE180100156]
FX We thank the anonymous referees for their suggestions and comments on
   earlier versions of this paper. This work is supported by ARC Discovery
   Program (#DP210102449) and ARC DECRA (#DE180100156).
CR Abhari Ali, 2012, Scaffold: quantum programming language
   Aleksandrowicz G., 2019, QISKIT OPEN SOURCE F, DOI [DOI 10.5281/ZENODO.2562111, 10.5281/zenodo.2562111]
   Arute F, 2019, NATURE, V574, P505, DOI 10.1038/s41586-019-1666-5
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371089
   Birkhoff G, 1936, ANN MATH, V37, P823, DOI 10.2307/1968621
   Blackshear S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276514
   Bocharov A, 2015, PHYS REV LETT, V114, DOI 10.1103/PhysRevLett.114.080502
   Cirq Developers, 2021, CIRQ, DOI DOI 10.5281/ZENODO.5182845
   Cross A, 2022, ACM T QUANTUM COMPUT, V3, DOI 10.1145/3505636
   D'Hondt E, 2006, MATH STRUCT COMP SCI, V16, P429, DOI 10.1017/S0960129506005251
   Distefano D, 2019, COMMUN ACM, V62, P62, DOI 10.1145/3338112
   Gorogiannis N, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290370
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Huang YP, 2019, PROCEEDINGS OF THE 2019 46TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA '19), P541, DOI 10.1145/3307650.3322213
   Huang Yipeng, OPENACCESS SERIES IN, V4, p1s4
   Hung SH, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290344
   JavadiAbhari A, 2015, PARALLEL COMPUT, V45, P2, DOI 10.1016/j.parco.2014.12.001
   Kakutani Y, 2009, LECT NOTES COMPUT SC, V5913, P79, DOI 10.1007/978-3-642-10622-4_7
   Li GS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428218
   Li YJ, 2014, PHYS REV A, V89, DOI 10.1103/PhysRevA.89.042338
   Liu J, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P1017, DOI 10.1145/3373376.3378488
   Mingsheng Ying., 2016, FDN QUANTUM PROGRAMM, V1st, DOI [10.1016/C2014-0-02660-3, DOI 10.1016/C2014-0-02660-3]
   O'Hearn PW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371078
   Paetznick A, 2014, QUANTUM INF COMPUT, V14, P1277
   Paykin J, 2017, ACM SIGPLAN NOTICES, V52, P846, DOI 10.1145/3093333.3009894
   Perdrix S, 2008, LECT NOTES COMPUT SC, V5079, P270
   Perdrix S, 2008, ELECTRON NOTES THEOR, V192, P71, DOI 10.1016/j.entcs.2008.10.028
   Raad A, 2020, LECT NOTES COMPUT SC, V12225, P225, DOI 10.1007/978-3-030-53291-8_14
   Rand R, 2018, ELECTRON P THEOR COM, P119, DOI 10.4204/EPTCS.266.8
   Selinger P, 2004, MATH STRUCT COMP SCI, V14, P527, DOI 10.1017/S0960129504004256
   Smith R.S., 2016, arXiv
   Svore K, 2018, RWDSL2018: PROCEEDINGS OF THE REAL WORLD DOMAIN SPECIFIC LANGUAGES WORKSHOP 2018, DOI 10.1145/3183895.3183901
   Tao Runzhou, 2021, P 42 ACM SIGPLAN INT, P48, DOI [10.1145/3453483.3454029, DOI 10.1145/3453483.3454029]
   Unruh D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290346
   Yan Peng, 2022, INCORRECTNESS LOGIC
   Ying MS, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2049706.2049708
   Ying Mingsheng, 2009, PREDICATE TRANSFORME, P311, DOI [10.1017/CBO9781139193313.009, DOI 10.1017/CBO9781139193313.009]
   Yu NK, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P542, DOI 10.1145/3453483.3454061
   Yu NK, 2012, LECT NOTES COMPUT SC, V7454, P69, DOI 10.1007/978-3-642-32940-1_7
   Yu Nengkun., 2019, QUANTUM TEMPORAL LOG, DOI [10.48550/arXiv.1908.00158, DOI 10.48550/ARXIV.1908.00158]
   Zhong HS, 2020, SCIENCE, V370, P1460, DOI 10.1126/science.abe8770
   Zhou L, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470673
   Zhou L, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1149, DOI 10.1145/3314221.3314584
NR 44
TC 8
Z9 8
U1 2
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 72
DI 10.1145/3527316
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300008
OA gold
DA 2024-07-18
ER

PT J
AU Patel, N
   Krishna, S
   Shasha, D
   Wies, T
AF Patel, Nisarg
   Krishna, Siddharth
   Shasha, Dennis
   Wies, Thomas
TI Verifying Concurrent Multicopy Search Structures
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE template-based verification; concurrent data structures; log-structured
   merge trees; flow framework; separation logic
ID LINEARIZABILITY
AB Multicopy search structures such as log-structured merge (LSM) trees are optimized for high insert/update/delete (collectively known as upsert) performance. In such data structures, an upsert on key k, which adds (k, v) where v can be a value or a tombstone, is added to the root node even if k is already present in other nodes. Thus there may be multiple copies of.. in the search structure. A search on.. aims to return the value associated with the most recent upsert. We present a general framework for verifying linearizability of concurrent multicopy search structures that abstracts from the underlying representation of the data structure in memory, enabling proof-reuse across diverse implementations. Based on our framework, we propose template algorithms for (a) LSM structures forming arbitrary directed acyclic graphs and (b) differential file structures, and formally verify these templates in the concurrent separation logic Iris. We also instantiate the LSM template to obtain the first verified concurrent in-memory LSM tree implementation.
C1 [Patel, Nisarg; Shasha, Dennis; Wies, Thomas] NYU, New York, NY 10003 USA.
   [Krishna, Siddharth] Microsoft Res, Cambridge, England.
C3 New York University; Microsoft
RP Patel, N (corresponding author), NYU, New York, NY 10003 USA.
EM nisarg@nyu.edu; siddharth@cs.nyu.edu; shasha@cims.nyu.edu;
   wies@cs.nyu.edu
FU National Science Foundation [1925605, 1815633, 1934388, 1840761,
   1339362]; NYU WIRELESS; New York University Abu Dhabi Center for
   Interacting Urban Networks (CITIES); Direct For Biological Sciences;
   Division Of Integrative Organismal Systems [1339362, 1934388] Funding
   Source: National Science Foundation; Direct For Computer & Info Scie &
   Enginr; Division of Computing and Communication Foundations [1815633]
   Funding Source: National Science Foundation; Division Of Integrative
   Organismal Systems; Direct For Biological Sciences [1840761] Funding
   Source: National Science Foundation
FX This work is funded in parts by the National Science Foundation under
   grants 1925605, 1815633, 1934388, 1840761, and 1339362. Further funding
   came from NYU WIRELESS and from the New York University Abu Dhabi Center
   for Interacting Urban Networks (CITIES). We thank Elizabeth Dietrich and
   Raphael Sofaer for their help on mechanizing the proofs of the
   differential file template. We also extend our gratitude to the
   anonymous reviewers of OOPSLA'21 whose questions helped us clarify the
   presentation. We would also like to thank the reviewers of the book
   [Krishna et al. 2021], specifically Maurice Herlihy, Eddie Kohler,
   Robbert Krebbers, K. Rustan M. Leino, and Peter Muller, for their
   suggestions to improve the presentation.
CR Abadi M., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P165, DOI 10.1109/LICS.1988.5115
   Abdulla PA, 2013, LECT NOTES COMPUT SC, V7795, P324, DOI 10.1007/978-3-642-36742-7_23
   Abdulla Parosh Aziz, 2018, LECT NOTES COMPUTER, V10801
   Amit D, 2007, LECT NOTES COMPUT SC, V4590, P477
   [Anonymous], 2011, LEVELED COMPACTION A
   Apache, 2021, Cassandra.
   Arbel M, 2014, PROCEEDINGS OF THE 2014 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC'14), P196, DOI 10.1145/2611462.2611471
   Banerjee A, 2016, LIPICS
   Bornholt J, 2016, ACM SIGPLAN NOTICES, V51, P83, DOI 10.1145/2954679.2872406
   Bouajjani A, 2017, LECT NOTES COMPUT SC, V10427, P542, DOI 10.1007/978-3-319-63390-9_28
   Bouajjani A, 2015, LECT NOTES COMPUT SC, V9135, P95, DOI 10.1007/978-3-662-47666-6_8
   Bouajjani A, 2013, LECT NOTES COMPUT SC, V7792, P290, DOI 10.1007/978-3-642-37036-6_17
   Cerny P, 2010, LECT NOTES COMPUT SC, V6174, P465, DOI 10.1007/978-3-642-14295-6_41
   Chen HG, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P270, DOI 10.1145/3132747.3132776
   Chen HG, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P18, DOI 10.1145/2815400.2815402
   Chordia S, 2013, LECT NOTES COMPUT SC, V8205, P164, DOI 10.1007/978-3-642-41527-2_12
   Dayan N, 2018, INT CONF MANAGE DATA, P505, DOI 10.1145/3183713.3196927
   Delbianco German Andres, 2017, LIPICS, V74, DOI DOI 10.4230/LIPICS
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Drachsler-Cohen D, 2018, ACM SIGPLAN NOTICES, V53, P207, DOI 10.1145/3200691.3178503
   Dragoi Cezara, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P174, DOI 10.1007/978-3-642-39799-8_11
   Elmas T, 2010, LECT NOTES COMPUT SC, V6015, P296, DOI 10.1007/978-3-642-12002-2_25
   Fahndrich Manuel, 2003, P 1 INT WORKSH AL CO
   Feldman YMY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428196
   Feldman Yotam M. Y., 2018, LIPIcs, V121, P231, DOI [10.4230/LIPIcs.DISC.2018.23, DOI 10.4230/LIPICS.DISC.2018.23]
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Frumin Dan, LMCS, V17, DOI [10.46298/lmcs-17(3:9)2021, DOI 10.46298/LMCS-17(3:9)2021]
   Fu M, 2010, LECT NOTES COMPUT SC, V6269, P388, DOI 10.1007/978-3-642-15375-4_27
   Gardner P, 2014, ELECTRON NOTES THEOR, V308, P147, DOI 10.1016/j.entcs.2014.10.009
   Google, 2021, GOOGL DEV
   Gotsman A, 2013, LECT NOTES COMPUT SC, V7792, P249, DOI 10.1007/978-3-642-37036-6_15
   Henzinger Thomas A., 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P242, DOI 10.1007/978-3-642-40184-8_18
   HERLIHY MP, 1988, LECT NOTES COMPUT SC, V293, P379
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Jacobs B, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P271, DOI 10.1145/1926385.1926417
   Jensen JB, 2012, LECT NOTES COMPUT SC, V7211, P377, DOI 10.1007/978-3-642-28869-2_19
   Jones C. B., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P321
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kaki G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158115
   Khyzha A, 2017, LECT NOTES COMPUT SC, V10201, P639, DOI 10.1007/978-3-662-54434-1_24
   Kragl B, 2020, LECT NOTES COMPUT SC, V12224, P275, DOI 10.1007/978-3-030-53288-8_14
   Kragl B, 2018, LECT NOTES COMPUT SC, V10981, P79, DOI 10.1007/978-3-319-96145-3_5
   Krebbers R, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236772
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krishna S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P181, DOI 10.1145/3385412.3386029
   Krishna S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158125
   Krishna S, 2020, LECT NOTES COMPUT SC, V12075, P308, DOI 10.1007/978-3-030-44914-8_12
   Krishna Siddharth, 2021, AUTOMATED VERIFICATI, DOI DOI 10.2200/S01089ED1V01Y202104CSL013
   Lesani M, 2014, LECT NOTES COMPUT SC, V8559, P550, DOI 10.1007/978-3-319-08867-9_37
   Levandoski JJ, 2013, PROC INT CONF DATA, P302, DOI 10.1109/ICDE.2013.6544834
   Liang HJ, 2013, ACM SIGPLAN NOTICES, V48, P459, DOI 10.1145/2499370.2462189
   Luo C, 2020, VLDB J, V29, P393, DOI 10.1007/s00778-019-00555-y
   O'Hearn PW, 2010, PODC 2010: PROCEEDINGS OF THE 2010 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P85, DOI 10.1145/1835698.1835722
   ONeil P, 1996, ACTA INFORM, V33, P351, DOI 10.1007/s002360050048
   Patel Nisarg, 2021, ABS210905631 CORR
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Piskac T., 2014, LNCS, P124, DOI DOI 10.1007/978-3-642-54862-8_9
   Raad A, 2015, LECT NOTES COMPUT SC, V9032, P710, DOI 10.1007/978-3-662-46669-8_29
   Raju P, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P497, DOI 10.1145/3132747.3132765
   Ridge T, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P38, DOI 10.1145/2815400.2815411
   Sears Russell, 2012, P ACM SIGMOD INT C M, P217
   Sergey I, 2015, LECT NOTES COMPUT SC, V9032, P333, DOI 10.1007/978-3-662-46669-8_14
   Sergey I, 2015, ACM SIGPLAN NOTICES, V50, P77, DOI [10.1145/2813885.2737964, 10.1145/2737924.2737964]
   Severance D. G., 1976, ACM Transactions on Database Systems, V1, P256, DOI 10.1145/320473.320484
   Sezgin A, 2010, LECT NOTES COMPUT SC, V6217, P25, DOI 10.1007/978-3-642-15057-9_2
   SHASHA D, 1988, ACM T DATABASE SYST, V13, P53, DOI 10.1145/42201.42204
   Sigurbjarnarson H, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P1
   Thonangi R, 2017, PROC INT CONF DATA, P683, DOI 10.1109/ICDE.2017.121
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P343, DOI 10.1145/2480359.2429111
   Vafeiadis V., 2008, Ph. D. Dissertation
   Vafeiadis V, 2009, LECT NOTES COMPUT SC, V5403, P335, DOI 10.1007/978-3-540-93900-9_27
   Wang C, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P980, DOI 10.1145/3314221.3314617
   Wu XN, 2015, METHODS MOL BIOL, V1306, P71, DOI 10.1007/978-1-4939-2648-0_5
   Xiong Shale, 2020, ECOOP 20, V166, p21: 1, DOI DOI 10.4230/LIPICS.ECOOP.2020.21
   Zhu H, 2015, LECT NOTES COMPUT SC, V9207, P3, DOI 10.1007/978-3-319-21668-3_1
   Zipeng Zhang, 2012, Theory and Applications of Models of Computation. Proceedings 9th Annual Conference, TAMC 2012, P61, DOI 10.1007/978-3-642-29952-0_12
NR 78
TC 2
Z9 2
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 113
DI 10.1145/3485490
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200017
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Eisenberg, RA
   Duboc, G
   Weirich, S
   Lee, D
AF Eisenberg, Richard A.
   Duboc, Guillaume
   Weirich, Stephanie
   Lee, Daniel
TI An Existential Crisis Resolved Type Inference for First-Class
   Existential Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE persistent transaction support; non-volatile heap
ID ABSTRACT TYPES
AB Emerging persistent memory in commodity hardware allows byte-granular accesses to persistent state at memory speeds. However, to prevent inconsistent state in persistent memory due to unexpected system failures, different write-semantics are required compared to volatile memory. Transaction-based library solutions for persistent memory facilitate the atomic modification of persistent data in languages where memory is explicitly managed by the programmer, such as C/C++. For languages that provide extended capabilities like automatic memory management, a more native integration into the language is needed to maintain the high level of memory abstraction. It is shown in this paper how persistent software transactional memory (PSTM) can be tightly integrated into the runtime system of Haskell to atomically manage values of persistent transactional data types. PSTM has a clear interface and semantics extending that of software transactional memory (STM). Its integration with the language's memory management retains features like garbage collection and allocation strategies, and is fully compatible with Haskell's lazy execution model. Our PSTM implementation demonstrates competitive performance with low level libraries and trivial portability of existing STM libraries to PSTM. The implementation allows further interesting use cases, such as persistent memoization and persistent Haskell expressions.
C1 [Eisenberg, Richard A.; Duboc, Guillaume] Tweag, 207 Rue Bercy, F-75012 Paris, France.
   [Duboc, Guillaume] ENS Lyon, Lyon, France.
   [Weirich, Stephanie; Lee, Daniel] Univ Penn, 3330 Walnut St, Philadelphia, PA 19104 USA.
C3 Ecole Normale Superieure de Lyon (ENS de LYON); University of
   Pennsylvania
RP Eisenberg, RA (corresponding author), Tweag, 207 Rue Bercy, F-75012 Paris, France.
EM rae@richarde.dev; guillaume.duboc@ens-lyon.fr; sweirich@seas.upenn.edu;
   laniel@seas.upenn.edu
OI Eisenberg, Richard/0000-0002-7669-9781; Weirich,
   Stephanie/0000-0002-6756-9168
FU National Science Foundation [1703835, 1704041]; Direct For Computer &
   Info Scie & Enginr; Division of Computing and Communication Foundations
   [1703835] Funding Source: National Science Foundation; Division of
   Computing and Communication Foundations; Direct For Computer & Info Scie
   & Enginr [1704041] Funding Source: National Science Foundation
FX The authors thank Neel Krishnaswami and Simon Peyton Jones for their
   collaboration and review, along with our anonymous reviewers. This
   material is based upon work supported by the National Science Foundation
   under Grant No. 1703835 and Grant No. 1704041. Any opinions, findings,
   and conclusions or recommendations expressed in this material are those
   of the authors and do not necessarily reflect the views of the National
   Science Foundation.
CR [Anonymous], 2005, ADV TOPICS TYPES PRO
   Augustsson, 1994, HASKELL B USERS MANU
   Bottu GJ, 2021, HASKELL '21: PROCEEDINGS OF THE 14TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL, P85, DOI 10.1145/3471874.3472985
   CARDELLI L, 1990, IFIP TC2 WORK C PROG
   Carlsson, 1999, EXERCISE DEPENDENT T
   Crary K, 2017, ACM SIGPLAN NOTICES, V52, P100, DOI 10.1145/3093333.3009892
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Despeyroux, 1986, C LISP FUNCT PROGR C
   Dijkstra Atze, 2005, THESIS U UTRECHT
   DUNFIELD J, 2013, INT C FUNCT PROGR IC
   Dunfield J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290322
   Eisenberg Richard A., 2020, Haskell '20. Proceedings of the 13th ACM SIGPLAN International Symposium on Haskell, P39, DOI 10.1145/3406088.3409015
   EISENBERG RA, 2012, ACM SIGPLAN HASK S
   Eisenberg RA, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P94, DOI 10.1145/3242744.3242753
   Eisenberg Richard A., 2016, THESIS U PENNSYLVANI
   Girard Jean-Yves, 1972, These d'etat, P7
   Gundry Adam, 2013, Ph. D. Dissertation
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   Hawblitzel, 2008, MSRTR2008184
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Howard William A., 1969, The formulae-as-types notion of construction
   JONES MP, 1992, P 4 EUR S PROGR ESOP
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Laufer K., 1996, Journal of Functional Programming, V6, P485, DOI 10.1017/S0956796800001817
   LAUFER K, 1994, ACM T PROGR LANG SYS, V16, P1411, DOI 10.1145/186025.186031
   LEBOTLAN D, 2003, INT C FUNCT PROGR
   Leijen, 2006, 1 CLASS POLYMO UNPUB
   MacQueen DavidB., 1986, P 13 ACM SIGPLAN S P, P277, DOI DOI 10.1145/512644.512670
   Martin-Lof P., 1975, STUDIES LOGIC FDN MA, V80, P73
   McBride, 2014, P 19 ACM SIGPLAN INT
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   Monnier S, 2010, PLPV'10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P1, DOI 10.1145/1707790.1707792
   Montagu B, 2009, ACM SIGPLAN NOTICES, V44, P354, DOI 10.1145/1594834.1480926
   Nakazawa K, 2008, LECT NOTES COMPUT SC, V5213, P478, DOI 10.1007/978-3-540-87531-4_34
   Odersky Martin., 1996, Proceedings of the 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL'96, page, P54
   Perry Nigel, 1991, THESIS U LONDON
   PFENNING F, 1989, LECT NOTES COMPUT SC, V352, P345
   PFENNING F, 1991, SIXTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P74
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pottier Francois., 2005, ADV TOPICS TYPES PRO, P387
   Reynolds J. C., 1974, Programming Symposium, P408
   Rossberg A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P35, DOI 10.1145/2784731.2784738
   Rossberg A, 2014, J FUNCT PROGRAM, V24, P529, DOI 10.1017/S0956796814000264
   Serrano A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408971
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Tatsuta, 2009, P 15 AUSTR S COMP AU, P63
   VAZOU N, 2014, INT C FUNCT PROGR GO
   Weirich S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110275
   Weirich Stephanie, 2018, HASKELL EXCHANGE KEY
   XI H, 2003, PRINCIPLES PROGRAMMI
NR 51
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 64
DI 10.1145/3473569
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800004
OA gold
DA 2024-07-18
ER

PT J
AU Kim, J
   Hu, QHP
   D'Antoni, L
   Reps, T
AF Kim, Jinwoo
   Hu, Qinheping
   D'Antoni, Loris
   Reps, Thomas
TI Semantics-Guided Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Semantics-Guided Synthesis (SemGuS); Unrealizability
AB This paper develops a new framework for program synthesis, called semantics-guided synthesis (SemGuS), that allows a user to provide both the syntax and the semantics for the constructs in the language. SemGuS accepts a recursively defined big-step semantics, which allows it, for example, to be used to specify and solve synthesis problems over an imperative programming language that may contain loops with unbounded behavior. The customizable nature of SemGuS also allows synthesis problems to be defined over a non-standard semantics, such as an abstract semantics. In addition to the SemGuS framework, we develop an algorithm for solving SemGuS problems that is capable of both synthesizing programs and proving unrealizability, by encoding a SemGuS problem as a proof search over Constrained Horn Clauses: in particular, our approach is the first that we are aware of that can prove unrealizabilty for synthesis problems that involve imperative programs with unbounded loops, over an infinite syntactic search space. We implemented the technique in a tool called MESSY, and applied it to SyGuS problems (i.e., over expressions), synthesis problems over an imperative programming language, and synthesis problems over regular expressions.
C1 [Kim, Jinwoo; Hu, Qinheping; D'Antoni, Loris; Reps, Thomas] Univ Wisconsin Madison, Madison, WI 53706 USA.
C3 University of Wisconsin System; University of Wisconsin Madison
RP Kim, J (corresponding author), Univ Wisconsin Madison, Madison, WI 53706 USA.
EM pl@cs.wisc.edu; qhu28@wisc.edu; loris@cs.wisc.edu; reps@cs.wisc.edu
FU ONR [N00014-17-1-2889, N00014-19-1-2318]; NSF [1420866, 1763871,
   1750965]; Wisconsin Alumni Research Foundation; Facebook fellowship;
   Korea Foundation for Advanced Studies; Direct For Computer & Info Scie &
   Enginr; Division Of Computer and Network Systems [1763871] Funding
   Source: National Science Foundation; Direct For Computer & Info Scie &
   Enginr; Division of Computing and Communication Foundations [1750965]
   Funding Source: National Science Foundation; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1420866] Funding Source: National Science Foundation
FX Supported, in part, by a gift from Rajiv and Ritu Batra; by ONR under
   grants N00014-17-1-2889 and N00014-19-1-2318; by NSF under grants
   1420866, 1763871, and 1750965; by the Wisconsin Alumni Research
   Foundation; by a Facebook fellowship; and by a grant from the Korea
   Foundation for Advanced Studies. We also thank our shepherd, Nadia
   Polikarpova, for making numerous suggestions to improve the paper.
   Opinions, findings, or conclusions expressed in this publication are
   those of the authors, and do not necessarily reflect the views of the
   sponsoring agencies.
CR Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Alur Rajeev, 2017, ARXIV PREPRINT ARXIV
   [Anonymous], 2013, Tech. Rep. MSR-TR-2013-6
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Blanc Regis, 2013, Logic for Programming, Artificial Intelligence and Reasoning. 19th International Conference, LPAR-19, Proceedings: LNCS 8312, P173, DOI 10.1007/978-3-642-45221-5_13
   Clarke E., 2003, Proceedings 2003. Design Automation Conference (IEEE Cat. No.03CH37451), P368
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P317, DOI 10.1145/1925844.1926423
   Hu QHP, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1128, DOI 10.1145/3385412.3385979
   Hu QP, 2018, LECT NOTES COMPUT SC, V10981, P386, DOI 10.1007/978-3-319-96145-3_21
   Johnson StephenC., 1975, YACC YET ANOTHER COM, V32
   Kim J., 2020, ARXIV PREPRINT ARXIV
   Komuravelli A, 2016, FORM METHOD SYST DES, V48, P175, DOI 10.1007/s10703-016-0249-4
   Lavrac N., 1994, Inductive Logic Programming: Techniques and Applications, P146
   Lee Mina, 2016, P 15 ACM SIGPLAN INT, P70, DOI 10.1145'2993236.2993244
   MUGGLETON S, 1990, NEW GENERAT COMPUT, V8, P295
   Pan Rong, 2019, P ACM PROGRAMMING LA, V3, P1
   Phothilimthana PM, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P65, DOI 10.1145/3297858.3304059
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   QUINLAN JR, 1990, MACH LEARN, V5, P239, DOI 10.1007/BF00117105
   Reynolds A, 2015, LECT NOTES COMPUT SC, V9207, P198, DOI 10.1007/978-3-319-21668-3_12
   Reynolds Andrew, 2019, ARXIV PREPRINT ARXIV
   So S, 2017, LECT NOTES COMPUT SC, V10422, P364, DOI 10.1007/978-3-319-66706-5_18
   Solar-Lezama Armando, 2013, International Journal on Software Tools for Technology Transfer, V15, P475, DOI 10.1007/s10009-012-0249-7
   Srivastava S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P313, DOI 10.1145/1706299.1706337
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Wang XY, 2018, LECT NOTES COMPUT SC, V10981, P407, DOI 10.1007/978-3-319-96145-3_22
   Wang Xinyu, 2018, PACMPL, V63
   Wang Xinyu, 2017, Proceedings of the ACM on Programming Languages, V2, P1
NR 32
TC 10
Z9 11
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 30
DI 10.1145/3434311
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100030
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Banerjee, S
   Devecsery, D
   Chen, PM
   Narayanasamy, S
AF Banerjee, Subarno
   Devecsery, David
   Chen, Peter M.
   Narayanasamy, Satish
TI Sound Garbage Collection for C using Pointer Provenance
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Garbage Collector Safety; Pointer Provenance; Optimistic Hybrid Analysis
ID EFFICIENT; LANGUAGE
AB Garbage collection (GC) support for unmanaged languages can reduce programming burden in reasoning about liveness of dynamic objects. It also avoids temporal memory safety violations and memory leaks. Sound GC for weakly-typed languages such as C/C++, however, remains an unsolved problem. Current value-based GC solutions examine values of memory locations to discover the pointers, and the objects they point to. The approach is inherently unsound in the presence of arbitrary type casts and pointer manipulations, which are legal in C/C++. Such language features are regularly used, especially in low-level systems code.
   In this paper, we propose Dynamic Pointer Provenance Tracking to realize sound GC. We observe that pointers cannot be created out-of-thin-air, and they must have provenance to at least one valid allocation. Therefore, by tracking pointer provenance from the source (e.g., malloc) through both explicit data-flow and implicit control-flow, our GC has sound and precise information to compute the set of all reachable objects at any program state. We discuss several static analysis optimizations, that can be employed during compilation aided with profiling, to significantly reduce the overhead of dynamic provenance tracking from nearly 8x to 16% for well-behaved programs that adhere to the C standards. Pointer provenance based sound GC invocation is also 13% faster and reclaims 6:< more memory on average, compared to an unsound value-based GC.
C1 [Banerjee, Subarno; Chen, Peter M.; Narayanasamy, Satish] Univ Michigan, Ann Arbor, MI 48109 USA.
   [Devecsery, David] Georgia Inst Technol, Atlanta, GA 30332 USA.
C3 University of Michigan System; University of Michigan; University System
   of Georgia; Georgia Institute of Technology
RP Banerjee, S (corresponding author), Univ Michigan, Ann Arbor, MI 48109 USA.
EM subarno@umich.edu; ddevec@gatech.edu; pmchen@umich.edu;
   nsatish@umich.edu
RI Banerjee, Subarno/AGR-9569-2022
OI Banerjee, Subarno/0000-0001-5449-2264; Narayanasamy,
   Satish/0000-0001-5016-1214
FU National Science Foundation [SHF-1703931]
FX We thank the anonymous reviewers for their thoughtful comments. This
   work was supported by the National Science Foundation under grant
   SHF-1703931. The views and conclusions contained in this paper are
   solely those of the authors.
CR Akritidis P., 2009, P 18 C USENIX SEC S, V10, P51
   Alpern B., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P1, DOI 10.1145/73560.73561
   [Anonymous], 2004, MEMORY EFFICIENT DOU
   [Anonymous], 2010, P ACM IEEE 32 INT C, DOI DOI 10.1145/1806799.1806874
   [Anonymous], 1990, P ISCA, DOI DOI 10.1145/325164.325100
   [Anonymous], 2006, P 2006 INT C COMP AR, DOI DOI 10.1145/1176760.1176767
   [Anonymous], 2006, COMPILERS PRINCIPLES
   Austin Thomas H., 2009, P ACM SIGPLAN 4 WORK, P113, DOI DOI 10.1145/1554339.1554353
   AUSTIN TM, 1994, SIGPLAN NOTICES, V29, P290, DOI 10.1145/773473.178446
   Bacon D. F., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P207
   Bacon DF, 2001, ACM SIGPLAN NOTICES, V36, P92, DOI 10.1145/381694.378819
   Baker H. G.  Jr., 1977, SIGPLAN Notices, V12, P55, DOI 10.1145/872734.806932
   Baker J, 2007, LECT NOTES COMPUT SC, V4420, P64
   Banerjee S, 2019, P IEEE S SECUR PRIV, P490, DOI 10.1109/SP.2019.00043
   Bartlett Joel F, 1989, TN12 W RES LAB DIG E
   Bartlett Joel F, 1988, COMPACTING GARBAGE C, V1, P3, DOI [10.1145/1317224.1317225, DOI 10.1145/1317224.1317225]
   Berger ED, 2006, ACM SIGPLAN NOTICES, V41, P158, DOI 10.1145/1133981.1134000
   Blackburn SM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P22, DOI 10.1145/1375581.1375586
   Bodik R, 2000, ACM SIGPLAN NOTICES, V35, P321, DOI 10.1145/358438.349342
   Boehm H. J., 1991, SIGPLAN Notices, V26, P157, DOI 10.1145/113446.113459
   Boehm Hans-Juergen, 1992, J C LANGUAGE TRANSLA, V4, P126
   Boehm Hans-Juergen, 1996, P ACM SIGPLAN 96 C P, p89S98, DOI [10.1145/231379.231394, DOI 10.1145/231379.231394]
   BOEHM HJ, 1993, SIGPLAN NOTICES, V28, P197, DOI 10.1145/173262.155109
   Boehm HJ, 2004, ACM SIGPLAN NOTICES, V39, P490, DOI 10.1145/989393.989442
   Bond MD, 2006, ACM SIGPLAN NOTICES, V41, P61, DOI 10.1145/1168918.1168866
   Burrows M, 2003, LECT NOTES COMPUT SC, V2622, P90
   Caballero J, 2016, ACM COMPUT SURV, V48, DOI 10.1145/2896499
   Caballero Juan, 2012, P 2012 INT S SOFTW T, P133
   Chilimbi TM, 2004, ACM SIGPLAN NOTICES, V39, P156, DOI 10.1145/1037187.1024412
   Chisnall D, 2015, ACM SIGPLAN NOTICES, V50, P117, DOI [10.1145/2694344.2694367, 10.1145/2775054.2694367]
   Chugh R, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P316, DOI 10.1145/1375581.1375620
   Clause J., 2007, P 2007 INT S SOFTW T, DOI [10.1145/1273463.1273490, DOI 10.1145/1273463.1273490]
   COHEN J, 1981, COMPUT SURV, V13, P341, DOI 10.1145/356850.356854
   COLLINS GE, 1960, COMMUN ACM, V3, P655, DOI 10.1145/367487.367501
   Davis B, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P379, DOI 10.1145/3297858.3304042
   DEUTSCH LP, 1976, COMMUN ACM, V19, P522, DOI 10.1145/360336.360345
   Devecsery D, 2018, ACM SIGPLAN NOTICES, V53, P348, DOI [10.1145/3296957.3177153, 10.1145/3173162.3177153]
   DFSan, CLANG DATAFLOWSANITI
   Dhurjati D, 2003, ACM SIGPLAN NOTICES, V38, P69, DOI 10.1145/780731.780743
   Dhurjati D, 2006, I C DEPEND SYS NETWO, P269, DOI 10.1109/DSN.2006.31
   Ding C, 2003, ACM SIGPLAN NOTICES, V38, P1, DOI 10.1145/773039.773040
   Dor N, 1998, ACM SIGPLAN NOTICES, V33, P27, DOI 10.1145/277633.277637
   Edelson Daniel Ross., 1990, UCSCCRL9019
   EDELSON DR, 1991, USENIX C++ CONFERENCE PROCEEDINGS, P85
   Elliott AS, 2018, 2018 IEEE CYBERSECURITY DEVELOPMENT CONFERENCE (SECDEV 2018), P53, DOI 10.1109/SecDev.2018.00015
   ElWazeer K, 2013, ACM SIGPLAN NOTICES, V48, P51, DOI 10.1145/2499370.2462165
   Endo T., 1997, Supercomputing, ACM/IEEE 1997 Conference, P48
   Enger-Dean Laura., 2011, MSPC, P22, DOI DOI 10.1145/1988915.1988922
   Evans D, 1996, ACM SIGPLAN NOTICES, V31, P44, DOI 10.1145/249069.231389
   HASTINGS R, 1991, PROCEEDINGS OF THE WINTER 1992 USENIX CONFERENCE, P125
   Heine DL, 2003, ACM SIGPLAN NOTICES, V38, P168, DOI 10.1145/780822.781150
   Henderson Fergus., 2002, P 3 INT S MEMORY MAN, P150, DOI [DOI 10.1145/512429.512449, 10.1145/773039.512449]
   Henderson Fergus., 1995, P ILPSAAZ95 POSTC WO
   Henning J. L., 2006, SIGARCH COMPUT ARCHI, V34, P1, DOI [DOI 10.1145/1186736.1186737, 10.1145/1186736.1186737]
   Hirzel M, 2002, ACM T PROGR LANG SYS, V24, P593, DOI 10.1145/586088.586089
   Hosking A.L., 2006, Proceedings of the 5th International Symposium on Memory Management, ISMM 2006, Ottawa, Ontario, Canada, June 10-11, 2006, P40, DOI [10.1145/1133956.1133963, DOI 10.1145/1133956.1133963]
   ISO, 2018, PROGRAMMING LANGUAGE
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   Jones Richard W. M., 1997, LINKOPING ELECT ARTI, V2, p13S26
   Jones SP, 1999, LECT NOTES COMPUT SC, V1702, P1
   Jump Maria, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P31, DOI 10.1145/1190216.1190224
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lee JongHyup, 2011, NDSS
   LINS RD, 1992, INFORM PROCESS LETT, V44, P215, DOI 10.1016/0020-0190(92)90088-D
   May Yip G., 1991, 918 W RES LAB DIG EQ
   Memarian K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290380
   Memarian K, 2016, ACM SIGPLAN NOTICES, V51, P1, DOI [10.1145/2908080.2908081, 10.1145/2980983.2908081]
   Microsoft, 2004, MAN EXT C
   Nagarakatte S, 2010, ACM SIGPLAN NOTICES, V45, P31
   Nagarakatte S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P245, DOI 10.1145/1542476.1542504
   Necula GC, 2002, ACM SIGPLAN NOTICES, V37, P128, DOI 10.1145/565816.503286
   Newsome J., 2005, NDSS, V5, P3
   Novark G, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P397, DOI 10.1145/1542476.1542521
   Oleksenko O, 2018, P ACM MEAS ANAL COMP, V2, DOI 10.1145/3224423
   Peyton Jones S. L., 1993, Joint Framework for Information Technology. JFIT Technical Conference Digest, P249
   Rafkind J, 2009, ISMM'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P39
   Rudafshani M, 2017, SOFTWARE PRACT EXPER, V47, P97, DOI 10.1002/spe.2406
   Ruwase O, 2004, P NETW DISTR SYST SE
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Schreiner Wolfgang., 1996, 969 RISCLINZ
   Schwartz EJ, 2010, P IEEE S SECUR PRIV, P317, DOI 10.1109/SP.2010.26
   Shahriyar R, 2014, ACM SIGPLAN NOTICES, V49, P121, DOI [10.1145/2660193.2660198, 10.1145/2714064.2660198]
   Shahriyar R, 2013, ACM SIGPLAN NOTICES, V48, P93, DOI [10.1145/2509136.2509527, 10.1145/2544173.2509527]
   Shahriyar Rifat., 2012, Proceedings of the 2012 international symposium on Memory Management, P73, DOI [DOI 10.1145/2258996.2259008, DOI 10.1145/2426642.2259008]
   Simpson MS, 2013, SOFTWARE PRACT EXPER, V43, P93, DOI 10.1002/spe.2105
   SLEATOR DD, 1985, J ACM, V32, P652, DOI 10.1145/3828.3835
   Smith F., 1999, SIGPLAN Notices, V34, P68, DOI 10.1145/301589.286868
   Sparud J., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P117, DOI 10.1145/165180.165196
   Tarditi D., 1992, ACM Letters on Programming Languages and Systems, V1, P161, DOI 10.1145/151333.151343
   UNGAR D, 1984, SIGPLAN NOTICES, V19, P157
   Vilk J, 2018, ACM SIGPLAN NOTICES, V53, P15, DOI [10.1145/3192366.3192376, 10.1145/3296979.3192376]
   Xu GQ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P270
   Zhang T, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P631, DOI 10.1145/3297858.3304017
NR 93
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 176
DI 10.1145/3428244
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900053
OA gold
DA 2024-07-18
ER

PT J
AU Gupta, S
   Rose, A
   Bansal, S
AF Gupta, Shubhani
   Rose, Abhishek
   Bansal, Sorav
TI Counterexample-Guided Correlation Algorithm for Translation Validation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Translation Validation; Certified Compilation; Automatic Verification;
   Equivalence Checking
AB Automatic translation validation across the unoptimized intermediate representation (IR) of the original source code and the optimized executable assembly code is a desirable capability, and has the potential to compete with existing approaches to verified compilation such as CompCert. A difficult subproblem is the automatic identification of the correlations across the transitions between the two programs' respective locations. We present a counterexample-guided algorithm to identify these correlations in a robust and scalable manner. Our algorithm has both theoretical and empirical advantages over prior work in this problem space.
C1 [Gupta, Shubhani; Rose, Abhishek; Bansal, Sorav] IIT Delhi, New Delhi, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Delhi
RP Gupta, S (corresponding author), IIT Delhi, New Delhi, India.
EM shubhani@cse.iitd.ac.in; abhishek.rose@cse.iitd.ac.in;
   sbansal@iitd.ac.in
CR [Anonymous], 1971, IJCAI
   [Anonymous], 2006, COMPILERS PRINCIPLES
   Barrett C, 2005, LECT NOTES COMPUT SC, V3576, P291
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Besson Frederic, 2014, Programming Languages and Systems. 12th Asian Symposium (APLAS 2014), Proceedings: LNCS 8858, P449, DOI 10.1007/978-3-319-12736-1_24
   Chen Z, 2017, I S WORKL CHAR PROC, P219, DOI 10.1109/IISWC.2017.8167779
   Churchill B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1027, DOI 10.1145/3314221.3314596
   Dahiya M., 2017, Hardware and Software: Verification and Testing: 13th International Haifa Verification Conference, HVC 2017, Haifa, Israel, November 13-15, 2017, Proceedings 13, P19
   Dahiya M, 2017, LECT NOTES COMPUT SC, V10695, P127, DOI 10.1007/978-3-319-71237-6_7
   Debray S., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P12, DOI 10.1145/268946.268948
   Felsing D, 2014, P 29 ACM IEEE INT C, P349, DOI [10.1145/2642937.2642987, DOI 10.1145/2642937.2642987]
   Flanagan C., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P500
   Gupta S, 2018, LECT NOTES COMPUT SC, V10929, P365, DOI 10.1007/978-3-319-94144-8_22
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   ISO, 2011, 98992011 ISOAEC, P683
   Kanade Aditya, 2009, SOFTW PRACT EXPER, V39, DOI [10.1002/spe.v39:6, DOI 10.1002/SPE.V39:6]
   Kiefer M, 2018, J AUTOM REASONING, V60, P337, DOI 10.1007/s10817-017-9433-5
   Kundu S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P327, DOI 10.1145/1542476.1542513
   Lahiri Shuvendu K., 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P712, DOI 10.1007/978-3-642-31424-7_54
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leung A, 2015, 2015 ACM/IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR CODESIGN (MEMOCODE), P42, DOI 10.1109/MEMCOD.2015.7340466
   Lopes NP, 2016, INT J SOFTW TOOLS TE, V18, P359, DOI 10.1007/s10009-015-0366-1
   Maleki S., 2011, Proceedings 2011 International Conference on Parallel Architectures and Compilation Techniques (PACT), P372, DOI 10.1109/PACT.2011.68
   Müller-Olm M, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275504
   Namjoshi KS, 2013, LECT NOTES COMPUT SC, V7935, P304, DOI 10.1007/978-3-642-38856-9_17
   Necula G. C., 2000, SIGPLAN Notices, V35, P83, DOI 10.1145/358438.349314
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Poetzsch-Heffter A, 2005, ELECTRON NOTES THEOR, V132, P37, DOI 10.1016/j.entcs.2005.03.023
   Sharma R, 2013, ACM SIGPLAN NOTICES, V48, P391, DOI [10.1145/2544173.2509509, 10.1145/2509136.2509509]
   Stepp Michael, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P737, DOI 10.1007/978-3-642-22110-1_59
   Strichman O, 2008, LECT NOTES COMPUT SC, V4171, P496
   Tate R, 2009, ACM SIGPLAN NOTICES, V44, P264, DOI 10.1145/1594834.1480915
   Tristan JB, 2011, ACM SIGPLAN NOTICES, V46, P295, DOI 10.1145/1993316.1993533
   Zaks A, 2008, LECT NOTES COMPUT SC, V5014, P35, DOI 10.1007/978-3-540-68237-0_5
   Zuck L, 2005, FORM METHOD SYST DES, V27, P335, DOI 10.1007/s10703-005-3402-z
   Zuck L, 2003, J UNIVERS COMPUT SCI, V9, P223
NR 36
TC 9
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 221
DI 10.1145/3428289
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900098
OA gold
DA 2024-07-18
ER

PT J
AU Meuli, G
   Soeken, M
   Roetteler, M
   Haener, T
AF Meuli, Giulia
   Soeken, Mathias
   Roetteler, Martin
   Haener, Thomas
TI Enabling Accuracy-Aware Quantum Compilers using Symbolic Resource
   Estimation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantum computing; quantum programming; quantum algorithms;
   approximation errors; resource estimation
ID COMPUTATION; ALGORITHM
AB Approximation errors must be taken into account when compiling quantum programs into a low-level gate set. We present a methodology that tracks such errors automatically and then optimizes accuracy parameters to guarantee a specified overall accuracy while aiming to minimize the implementation cost in terms of quantum gates. The core idea of our approach is to extract functions that specify the optimization problem directly from the high-level description of the quantum program. Then, custom compiler passes optimize these functions, turning them into (near-)symbolic expressions for (1) the total error and (2) the implementation cost (e.g., total quantum gate count). All unspecified parameters of the quantum program will show up as variables in these expressions, including accuracy parameters. After solving the corresponding optimization problem, a circuit can be instantiated from the found solution. We develop two prototype implementations, one in C++ based on Clang/LLVM, and another using the Q# compiler infrastructure. We benchmark our prototypes on typical quantum computing programs, including the quantum Fourier transform, quantum phase estimation, and Shor's algorithm.
C1 [Meuli, Giulia] Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
   [Soeken, Mathias; Haener, Thomas] Microsoft, Zurich, Switzerland.
   [Roetteler, Martin] Microsoft, Redmond, WA USA.
C3 Swiss Federal Institutes of Technology Domain; Ecole Polytechnique
   Federale de Lausanne; Microsoft
RP Meuli, G (corresponding author), Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
EM giulia.meuli@epfl.ch; masoeken@microsoft.com; martinro@microsoft.com;
   thhaner@microsoft.com
RI Soeken, Mathias/M-2666-2013
OI Roetteler, Martin/0000-0003-0234-2496
CR Aleksandrowicz G., 2019, Qiskit: an open-source framework for quantum computing, V16
   Amy M, 2017, LECT NOTES COMPUT SC, V10427, P3, DOI 10.1007/978-3-319-63390-9_1
   Amy M, 2013, IEEE T COMPUT AID D, V32, P818, DOI 10.1109/TCAD.2013.2244643
   [Anonymous], 2000, QUANTPH0008033 ARXIV
   Avgerinos T, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1083, DOI 10.1145/2568225.2568293
   Babbush R, 2018, QUANTUM SCI TECHNOL, V3, DOI 10.1088/2058-9565/aa9463
   Beauregard S, 2003, QUANTUM INF COMPUT, V3, P175
   Bennett CH, 2014, THEOR COMPUT SCI, V560, P7, DOI 10.1016/j.tcs.2014.05.025
   Bernstein E, 1997, SIAM J COMPUT, V26, P1411, DOI 10.1137/S0097539796300921
   Boldo S, 2009, IEEE T COMPUT, V58, P220, DOI 10.1109/TC.2008.200
   Bravyi S, 2005, PHYS REV A, V71, DOI 10.1103/PhysRevA.71.022316
   Campbell ET, 2017, PHYS REV A, V95, DOI 10.1103/PhysRevA.95.022316
   Conway J. H., 1996, BOOK NUMBERS
   Coppersmith Don, 2002, ARXIVQUANTPH0201067Q
   Darulova E, 2014, ACM SIGPLAN NOTICES, V49, P235, DOI 10.1145/2535838.2535874
   Fowler AG, 2012, PHYS REV A, V86, DOI 10.1103/PhysRevA.86.032324
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Haner Thomas, 2018, ARXIV180702336QUANTP
   Havlícek V, 2019, NATURE, V567, P209, DOI 10.1038/s41586-019-0980-2
   Hung SH, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290344
   JavadiAbhari A., 2014, Proceedings of the 11th ACM Conference on Computing Frontiers, page, P1, DOI DOI 10.1145/2597917
   Kitaev AY, 1995, ARXIV PREPRINT ARXIV
   Kliuchnikov V, 2013, QUANTUM INF COMPUT, V13, P607
   Knill E., 1996, Los Alamos Technical Report LA-UR-96-2724, DOI [DOI 10.2172/366453, 10.2172/366453]
   Low GH, 2019, QUANTUM-AUSTRIA, V3, DOI 10.22331/q-2019-07-12-163
   McArdle S, 2020, REV MOD PHYS, V92, DOI 10.1103/RevModPhys.92.015003
   Nielsen M. A., 2010, QUANTUM COMPUTATION, DOI [10.1017/cbo9780511976667, DOI 10.1017/CBO9780511976667]
   Paetznick A, 2014, QUANTUM INF COMPUT, V14, P1277
   Panchekha P, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI 10.1145/2737924.2737959
   Paykin J, 2017, ACM SIGPLAN NOTICES, V52, P846, DOI 10.1145/3093333.3009894
   Pirandola S, 2020, ADV OPT PHOTONICS, V12, P1012, DOI 10.1364/AOP.361502
   Poulin D, 2015, QUANTUM INF COMPUT, V15, P361
   Reiher M, 2017, P NATL ACAD SCI USA, V114, P7555, DOI 10.1073/pnas.1619152114
   Ross NJ, 2016, QUANTUM INF COMPUT, V16, P901
   Scherer A, 2017, QUANTUM INF PROCESS, V16, DOI 10.1007/s11128-016-1495-5
   SHOR PW, 1994, AN S FDN CO, P124
   Smith Jonathan M., 2014, ARXIV14120625
   Steiger DS, 2018, QUANTUM-AUSTRIA, V2, DOI 10.22331/q-2018-01-31-49
   Suchara M, 2013, 2013 IEEE 31ST INTERNATIONAL CONFERENCE ON COMPUTER DESIGN (ICCD), P419, DOI 10.1109/ICCD.2013.6657074
   Svore K, 2018, RWDSL2018: PROCEEDINGS OF THE REAL WORLD DOMAIN SPECIFIC LANGUAGES WORKSHOP 2018, DOI 10.1145/3183895.3183901
   Watrous J., 2009, Theory Comput, V5, P217, DOI [DOI 10.4086/TOC.2009.V005A011, 10.4086/toc.2009.v005a011]
   Wolfram Research Inc., 2019, Mathematica. version 12.0
   Ying MS, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2049706.2049708
NR 43
TC 5
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 130
DI 10.1145/3428198
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900007
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Westrick, S
   Yadav, R
   Fluet, M
   Acar, UA
AF Westrick, Sam
   Yadav, Rohan
   Fluet, Matthew
   Acar, Umut A.
TI Disentanglement in Nested-Parallel Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE disentanglement; data race; parallel computing; memory management;
   functional programming
ID RACES; CILK
AB Nested parallelism has proved to be a popular approach for programming the rapidly expanding range of multicore computers. It allows programmers to express parallelism at a high level and relies on a run-time system and a scheduler to deliver efficiency and scalability. As a result, many programming languages and extensions that support nested parallelism have been developed, including in C/C++, Java, Haskell, and ML. Yet, writing efficient and scalable nested parallel programs remains challenging, primarily due to difficult concurrency bugs arising from destructive updates or effects. For decades, researchers have argued that functional programming can simplify writing parallel programs by allowing more control over effects but functional programs continue to underperform in comparison to parallel programs written in lower-level languages. The fundamental difficulty with functional languages is that they have high demand for memory, and this demand only grows with parallelism.
   In this paper, we identify a memory property, called disentanglement, of nested-parallel programs, and propose memory management techniques for improved efficiency and scalability. Disentanglement allows for (destructive) effects as long as concurrently executing threads do not gain knowledge of the memory objects allocated by each other. We formally define disentanglement by considering an ML-like higher-order language with mutable references and presenting a dynamic semantics for it that enables reasoning about computation graphs of nested parallel programs. Based on this graph semantics, we formalize a classic correctness property-determinacy race freedom and prove that it implies disentanglement. This establishes that disentanglement applies to a relatively broad class of parallel programs. We then propose memory management techniques for nested-parallel programs that take advantage of disentanglement for improved efficiency and scalability. We show that these techniques are practical by extending the MLton compiler for Standard ML to support this form of nested parallelism. Our empirical evaluation shows that our techniques are efficient and scale well.
C1 [Westrick, Sam; Yadav, Rohan; Acar, Umut A.] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Fluet, Matthew] Rochester Inst Technol, Rochester, NY 14623 USA.
C3 Carnegie Mellon University; Rochester Institute of Technology
RP Westrick, S (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM swestric@cs.cmu.edu; rohany@alumni.cmu.edu; mtf@cs.rit.edu;
   umut@cs.cmu.edu
OI Yadav, Rohan/0000-0003-0746-066X; Westrick, Sam/0000-0003-2848-9808
FU National Science Foundation [CCF-1408940, CCF-1408981]
FX This work was partially supported by the National Science Foundation
   under grant numbers CCF-1408940 and CCF-1408981.
CR Aamir SA, 2016, PROC EUR SOLID-STATE, P71
   Acar UA, 2002, THEOR COMPUT SYST, V35, P321, DOI 10.1007/s00224-002-1057-3
   Acar UA, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P214, DOI 10.1145/3293883.3295725
   Acar UA, 2018, ACM SIGPLAN NOTICES, V53, P769, DOI [10.1145/3192366.3192391, 10.1145/3296979.3192391]
   Acar UA, 2018, ACM SIGPLAN NOTICES, V53, P381, DOI 10.1145/3200691.3178516
   Acar UA, 2016, J FUNCT PROGRAM, V26, DOI 10.1017/S0956796816000101
   Acar UA, 2013, ACM SIGPLAN NOTICES, V48, P219, DOI 10.1145/2517327.2442538
   Acar Umut A., 2015, SUMMIT ADV PROGRAMMI
   Acar Umut A., 2015, ACM IEEE C HIGH PERF
   Adve S, 2010, COMMUN ACM, V53, P84, DOI 10.1145/1839676.1839697
   Allen T. R., 1987, Proceedings of the 1987 International Conference on Parallel Processing, P721
   ALPERN B, 1990, ANN IEEE SYMP FOUND, P600
   ANDERSON TA, 2010, P 9 INT S MEM MAN IS, V45, P21
   [Anonymous], 1998, SIGPLAN Fortran Forum, DOI [10.1145/289918.289920, DOI 10.1145/289918.289920]
   [Anonymous], 2002, P 3 INT S MEM MAN BE, DOI [DOI 10.1145/512429.512439, 10.1145/512429.512439]
   [Anonymous], 2012, SC'12: Proceedings of the International Conference on High Performance Computing, Networking, Storage and Analysis, DOI DOI 10.1109/SC.2012.71
   [Anonymous], 2013, OPENMP APPL PROGR IN
   [Anonymous], 2011, Intel threading building blocks tutorial
   [Anonymous], 2009, P 1 USENIX C HOT TOP
   Appel A. W., 1996, Journal of Functional Programming, V6, P47, DOI 10.1017/S095679680000157X
   APPEL AW, 1989, SOFTWARE PRACT EXPER, V19, P171, DOI 10.1002/spe.4380190206
   Arora NS, 2001, THEOR COMPUT SYST, V34, P115, DOI 10.1007/s00224-001-0004-z
   Auhagen Sven., 2011, Proceedings of the 2011 ACM SIGPLAN Workshop on Memory Systems Performance and Correctness, MSPC '11, P51
   Balzer S, 2019, LECT NOTES COMPUT SC, V11423, P611, DOI 10.1007/978-3-030-17184-1_22
   Bizjak A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290378
   Blelloch G. E., 1997, SPAA '97. 9th Annual ACM Symposium on Parallel Algorithms and Architectures, P12, DOI 10.1145/258492.258494
   Blelloch GE, 1996, COMMUN ACM, V39, P85, DOI 10.1145/227234.227246
   BLELLOCH GE, 1994, J PARALLEL DISTR COM, V21, P4, DOI 10.1006/jpdc.1994.1038
   BLELLOCH GE, 2012, P 17 ACM SIGPL S, V47, P181, DOI DOI 10.1145/2370036.2145840
   Blelloch GE, 2008, PROCEEDINGS OF THE NINETEENTH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P501
   Blelloch GE, 2011, SPAA 11: PROCEEDINGS OF THE TWENTY-THIRD ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P355
   Blelloch GuyE., 2004, SPAA
   Blumofe R. D., 1999, Journal of the ACM, V46, P720, DOI [10.1109/SFCS.1994.365680, 10.1145/324133.324234]
   Blumofe RD, 1998, SIAM J COMPUT, V27, P202, DOI 10.1137/S0097539793259471
   Blumofe RD, 1996, J PARALLEL DISTR COM, V37, P55, DOI 10.1006/jpdc.1996.0107
   BLUMOFE RD, 1995, SIGPLAN NOTICES, V30, P207
   Bocchino RL, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P535, DOI 10.1145/1926385.1926447
   Bocchino RL, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P97
   Boehm Hans-Juergen, 2011, 3 USENIX WORKSH HOT
   Chakravarty M., 2007, PROC WORKSHOP DECLAR, P10
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   CHENEY CJ, 1970, COMMUN ACM, V13, P677, DOI 10.1145/362790.362798
   Cheng Guang-Ien, 1998, P 10 ACM S PAR ALG A
   CULLER DE, 1993, SUPERCOMP PROC, P262
   Doligez D., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P113, DOI 10.1145/158511.158611
   Doligez D., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P70, DOI 10.1145/174675.174673
   Elsman Martin, 2001, STACK MACHINE REGION
   EMRATH PA, 1991, SUPERCOMPUTING 91, P580
   Emrath PerryA., 1988, Proceedings of the 1988 ACM SIGPLAN and SIGOPS Workshop on Parallel and Distributed Debugging, PADD '88, P89
   Fatahalian K., 2006, SC 06, P83
   Feng M, 1999, THEOR COMPUT SYST, V32, P301, DOI 10.1007/s002240000120
   Flanagan C, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1377492.1377495
   Flanagan C, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P121, DOI 10.1145/1542476.1542490
   Fluet M, 2006, LECT NOTES COMPUT SC, V3924, P7
   FLUET M., 2011, J FUNCT PROGRAM, V20, P1
   Fluet Matthew, 2008, ACM SIGPLAN INT C FU
   Fluet Matthew., 2007, Proceedings of the 2007 Workshop on Declarative Aspects of Multicore Programming, DAMP '07, P37
   Frigo M, 1998, ACM SIGPLAN NOTICES, V33, P212, DOI 10.1145/277652.277725
   Frigo M, 2009, SPAA'09: PROCEEDINGS OF THE TWENTY-FIRST ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P79
   Gifford DK, 1986, P 1986 ACM C LISP FU, P28, DOI DOI 10.1145/319838.319848
   Goncalves Marcelo J. R, 1995, RECORD 1995 C FUNCTI
   Goncalves Marcelo J. R., 1995, THESIS
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Guatto Adrien, 2018, ACM SIGPLAN Notices, V53, P81, DOI 10.1145/3200691.3178494
   Halstead R.H., 1984, P 1984 ACM S LISP FU, P9
   Hammond K, 2011, LECT NOTES COMPUT SC, V6652, P201, DOI 10.1007/978-3-642-21338-0_17
   HANSON DR, 1990, SOFTWARE PRACT EXPER, V20, P5, DOI 10.1002/spe.4380200104
   Imam Shams., 2014, P 2014 INT C PRINCIP, P75
   Intel Corp, 2017, INT XEON PROC E7 V4
   Intel Corporation, 2009, 322581001US INT CORP
   Intel Corporation, 2009, INT R THREAD BUILD B
   Jagannathan, 2014, J FUNCTIONAL PROGRAM, P1
   JONES PEYTON., 2008, FSTTCS, P383
   Jones R., 2011, GARBAGE COLLECTION H
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung S, 2008, J MICROBIOL, V46, P12, DOI 10.1007/s12275-007-0190-8
   Keller G, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P261
   Kulkarni M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P211, DOI 10.1145/1250734.1250759
   Kuper L, 2014, ACM SIGPLAN NOTICES, V49, P2, DOI 10.1145/2666356.2594312
   Kuper L, 2014, ACM SIGPLAN NOTICES, V49, P257, DOI 10.1145/2535838.2535842
   Kuper Lindsey, 2013, P 2 ACM SIGPLAN WORK, P71, DOI 10.1145/2502323.2502326
   Kwak H., WWW'10, DOI DOI 10.1145/1772690.1772751
   LAUNCHBURY J, 1994, SIGPLAN NOTICES, V29, P24, DOI 10.1145/773473.178246
   Le M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P230, DOI 10.1145/2784731.2784736
   Lea Doug, 2000, JAVA, P36
   Leijen D, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P227
   Li P, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P107
   Lieberman Henry, 1981, 569A AI MIT
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Marlow Simon, 2011, Lecture Notes in Computer Science, V7241, P339
   MELLORCRUMMEY J, 1991, SUPERCOMPUTING 91, P24
   Mingdong Feng, 1997, SPAA '97. 9th Annual ACM Symposium on Parallel Algorithms and Architectures, P1, DOI 10.1145/258492.258493
   Muller SK, 2017, ACM SIGPLAN NOTICES, V52, P677, DOI [10.1145/3062341.3062370, 10.1145/3140587.3062370]
   Muller Stefan K., 2018, P 14 ACM SIGPLAN INT
   Narlikar G. J., 1999, SPAA'99. Eleventh Annual ACM Sympsoium on Parallel Algorithms and Architectures, P83, DOI 10.1145/305619.305629
   Netzer Robert H. B., 1992, ACM Letters on Programming Languages and Systems, V1, P74
   NIKHIL A, 1989, ACM T PROGR LANG SYS, V11, P598, DOI 10.1145/69558.69562
   Ohori Atsushi, 2018, Making SML# a General-purpose High-performance Language
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   Pingali K, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P12
   Raghunathan R, 2016, ACM SIGPLAN NOTICES, V51, P392, DOI 10.1145/3022670.2951935
   Raman Raghavan., 2012, Proceedings of the Thirty-third ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI '12, P531, DOI DOI 10.1145/2254064.2254127
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Reynolds John C., 1978, POPL, P39
   Robinson Dan., 2017, DATA CTR DYNAMIC MAY
   ROSS DT, 1967, COMMUN ACM, V10, P481, DOI 10.1145/363534.363546
   Rust Team, 2019, RUST LANG
   Schwartz, 1975, COMPUT LANG, V2, P161
   Shun Julian, 2012, ACM Symposium on Parallelism in Algorithms and Architectures (SPAA), P68
   Sivaramakrishnan KC, 2017, DEEP DIVE MULT UNPUB
   Sodani Avinash, 2015, 2015 IEEE Hot Chips 27 Symposium (HCS), DOI 10.1109/HOTCHIPS.2015.7477467
   SPACE, 2001, P 2 WORKSH SEM PROGR
   Spoonhower, 2009, THESIS
   Steele G. L.  Jr., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P472, DOI 10.1145/174675.178068
   STEELE GL, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P218, DOI 10.1145/96709.96731
   TARJAN RE, 1975, J ACM, V22, P215, DOI 10.1145/321879.321884
   Terauchi T, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1353445.1353449
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   UNGAR D, 1984, SIGPLAN NOTICES, V19, P157
   Utterback R., 2016, P 28 ACM S PARALLELI, P83
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   Walker David, 2001, LINEAR TYPES REGIONS
   Yelick K, 1998, CONCURRENCY-PRACT EX, V10, P825, DOI 10.1002/(SICI)1096-9128(199809/11)10:11/13<825::AID-CPE383>3.0.CO;2-H
   Ziarek L, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P628
NR 126
TC 17
Z9 19
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 47
DI 10.1145/3371115
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400048
OA gold
DA 2024-07-18
ER

PT J
AU Ozkan, BK
   Majumdar, R
   Oraee, S
AF Ozkan, Burcu Kulahcioglu
   Majumdar, Rupak
   Oraee, Simin
TI Trace Aware Random Testing for Distributed Systems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE distributed systems; random testing; hitting families; partial order
   reduction
AB Distributed and concurrent applications often have subtle bugs that only get exposed under specific schedules. While these schedules may be found by systematic model checking techniques, in practice, model checkers do not scale to large systems. On the other hand, naive random exploration techniques often require a very large number of runs to find the specific interactions needed to expose a bug. In recent years, several random testing algorithms have been proposed that, on the one hand, exploit state-space reduction strategies from model checking and, on the other, provide guarantees on the probability of hitting bugs of certain kinds.
   These existing techniques exploit two orthogonal strategies to reduce the state space: partial-order reduction and bug depth. Testing algorithms based on partial order techniques, such as RAPOS or POS, ensure nonredundant exploration of independent interleavings among system events by imposing an equivalence relation on schedules and ideally exploring only one schedule from each equivalence class. Techniques based on bug depth, such as PCT, exploit the empirical observation that many bugs are exposed by the clever scheduling of a small number of key events. They bias the sample space of schedules to only cover all executions of small depth, rather than the much larger space of all schedules. At this point, there is no random testing algorithm that combines the power of both approaches.
   In this paper, we provide such an algorithm. Our algorithm, trace-aware PCT (taPCT), extends and unifies 180 several different algorithms in the random testing literature. It samples the space of low-depth executions by constructing a schedule online, while taking dependencies among events into account. Moreover, the algorithm comes with a theoretical guarantee on the probability of sampling a trace of low depth-the probability grows exponentially with the depth but only polynomially with the number of racy events explored. We further show that the guarantee is optimal among a large class of techniques.
   We empirically compare our algorithm with several state-of-the-art random testing approaches for concur- rent software on two large-scale distributed systems, Zookeeper and Cassandra, and show that our approach is effective in uncovering subtle bugs and usually outperforms related random testing algorithms.
C1 [Ozkan, Burcu Kulahcioglu; Majumdar, Rupak; Oraee, Simin] Max Planck Inst Software Syst MPI SWS, Paul Ehrlich Str 26, D-67663 Kaiserslautern, Rheinland Pfalz, Germany.
C3 Max Planck Society
RP Ozkan, BK (corresponding author), Max Planck Inst Software Syst MPI SWS, Paul Ehrlich Str 26, D-67663 Kaiserslautern, Rheinland Pfalz, Germany.
EM burcu@mpi-sws.org; rupak@mpi-sws.org; siminoraee@mpi-sws.org
OI Kulahcioglu Ozkan, Burcu/0000-0002-7038-165X
FU Deutsche Forschungsgemeinschaft (DFG) [389792660, TRR 248]; European
   Research Council [610150]
FX This research was funded in part by the Deutsche Forschungsgemeinschaft
   (DFG) grant 389792660 as part of TRR 248 (see
   https://perspicuous-computing.science) and by the European Research
   Council Grant Agreement No. 610150 (ERC Synergy Grant ImPACT
   (http://www.impact-erc.eu/)).We thank Ritabrata Ray for useful
   discussions.
CR Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Abdulla PA, 2017, J ACM, V64, DOI 10.1145/3073408
   Agarwal A, 2007, DISTRIB COMPUT, V19, P163, DOI 10.1007/s00446-006-0004-y
   AGHA G, 1985, LECT NOTES COMPUT SC, V206, P19
   Albert E, 2017, LECT NOTES COMPUT SC, V10426, P526, DOI 10.1007/978-3-319-63387-9_26
   [Anonymous], 1996, LECT NOTES COMPUTER, DOI DOI 10.1007/3-540-60761-7
   Arenas M, 2019, PROCEEDINGS OF THE 38TH ACM SIGMOD-SIGACT-SIGAI SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS (PODS '19), P59, DOI 10.1145/3294052.3319704
   Arora S, 2009, COMPUTATIONAL COMPLEXITY: A MODERN APPROACH, P1, DOI 10.1017/CBO9780511804090
   Bouajjani Ahmed, 2012, TOOLS ALGORITHMS CON, DOI [10.1007/978-3-642-28756-5_31, DOI 10.1007/978-3-642-28756-5_31]
   Burckhardt S, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P167
   Cartier P., 1969, LECT NOTES MATH
   Chalupa M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158119
   Chistikov D, 2016, LECT NOTES COMPUT SC, V9780, P157, DOI 10.1007/978-3-319-41540-6_9
   Coons KE, 2013, ACM SIGPLAN NOTICES, V48, P833, DOI [10.1145/2544173.2509556, 10.1145/2509136.2509556]
   Deligiannis P, 2016, 14TH USENIX CONFERENCE ON FILE AND STORAGE TECHNOLOGIES (FAST '16), P249
   Desai A, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P73, DOI 10.1145/2786805.2786861
   Diekert V., 1995, BOOK TRACES
   Emmi M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P411, DOI 10.1145/1926385.1926432
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Godefroid P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P174, DOI 10.1145/263699.263717
   Gore V, 1997, INFORM COMPUT, V134, P59, DOI 10.1006/inco.1997.2621
   Hewitt C., 1973, PROC 3 INT JOINT C A, P235, DOI 10.1145/359545.359563
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Junqueira FP, 2011, I C DEPEND SYS NETWO, P245, DOI 10.1109/DSN.2011.5958223
   Killian Charles Edwin, 2007, 4 S NETW SYST DES IM 4 S NETW SYST DES IM
   Kingsbury Kyle, 2018, JEPSEN
   Leesatapornwongsa T, 2016, ACM SIGPLAN NOTICES, V51, P517, DOI 10.1145/2954679.2872374
   Leesatapornwongsa Tanakorn, 2014, P 11 USENIX S OPERAT, P399
   Leners JB, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P279
   Liu HP, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P677, DOI 10.1145/3037697.3037735
   Long Y, 2016, PROCEEDINGS OF THE 15TH INTERNATIONAL CONFERENCE ON MODULARITY (MODULARITY'16), P54, DOI 10.1145/2889443.2889444
   Lucia Brandon, 2009, Proceedings of the 2009 42nd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO 2009), P553, DOI 10.1145/1669112.1669181
   Lukman JF, 2019, PROCEEDINGS OF THE FOURTEENTH EUROSYS CONFERENCE 2019 (EUROSYS '19), DOI 10.1145/3302424.3303986
   Majumdar R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158134
   Musuvathi M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P446, DOI 10.1145/1250734.1250785
   Nagarakatte S, 2012, ACM SIGPLAN NOTICES, V47, P543, DOI 10.1145/2345156.2254128
   Ozkan Burcu Kulahcioglu, 2018, P ACM PROGRAM LANG, DOI DOI 10.1145/3276530
   Qadeer S, 2005, LECT NOTES COMPUT SC, V3440, P93
   Sen K., 2007, P 22 IEEE ACM INT C, P323, DOI [DOI 10.1145/1321631.1321679, 10.1145/1321631.1321679]
   Simsa Jiri, 2011, Model Checking Software. Proceedings 18th International SPIN Workshop, P188, DOI 10.1007/978-3-642-22306-8_14
   Tasharofi Samira, 2012, Formal Techniques for Distributed Systems. Joint 14th IFIP WG 6.1 International Conference, FMOODS 2012 and 32nd IFIP WG 6.1 International Conference, FORTE 2012, P219, DOI 10.1007/978-3-642-30793-5_14
   Tasharofi S, 2013, IEEE INT CONF AUTOM, P114, DOI 10.1109/ASE.2013.6693072
   Thomson P, 2014, ACM SIGPLAN NOTICES, V49, P15, DOI [10.1145/2692916.2555260, 10.1145/2555243.2555260]
   Yang JL, 2009, 2009 INTERNATIONAL FORUM ON COMPUTER SCIENCE-TECHNOLOGY AND APPLICATIONS, VOL 2, PROCEEDINGS, P213, DOI 10.1109/IFCSTA.2009.173
   Yuan XH, 2018, LECT NOTES COMPUT SC, V10982, P317, DOI 10.1007/978-3-319-96142-2_20
NR 45
TC 8
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 180
DI 10.1145/3360606
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500065
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Sjöberg, V
   Sang, YY
   Weng, SC
   Shao, Z
AF Sjoberg, Vilhelm
   Sang, Yuyang
   Weng, Shu-chun
   Shao, Zhong
TI DeepSEA: A Language for Certified System Software
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE verification; layered specification; refinement; certified software
AB Writing certifiably correct system software is still very labor-intensive, and current programming languages are not well suited for the task. Proof assistants work best on programs written in a high-level functional style, while operating systems need low-level control over the hardware. We present DeepSEA, a language which provides support for layered specification and abstraction refinement, effect encapsulation and composition, and full equational reasoning. A single DeepSEA program is automatically compiled into a certified "layer" consisting of a C program (which is then compiled into assembly by CompCert), a low-level functional Coq specification, and a formal (Coq) proof that the C program satisfies the specification. Multiple layers can be composed and interleaved with manual proofs to ascribe a high-level specification to a program by stepwise refinement. We evaluate the language by using it to reimplement two existing verified programs: a SHA-256 hash function and an OS kernel page table manager. This new style of programming language design can directly support the development of correct-by-construction system software.
C1 [Sjoberg, Vilhelm] CertiK, Cambridge, MA 02139 USA.
   [Sjoberg, Vilhelm; Sang, Yuyang; Weng, Shu-chun; Shao, Zhong] Yale Univ, New Haven, CT 06520 USA.
C3 Yale University
RP Sjöberg, V (corresponding author), CertiK, Cambridge, MA 02139 USA.; Sjöberg, V (corresponding author), Yale Univ, New Haven, CT 06520 USA.
EM vilhelm.sjoberg@yale.edu; yuyang.sang@yale.edu; scweng@gmail.com;
   zhong.shao@yale.edu
OI Shao, Zhong/0000-0001-8184-7649
FU NSF [1521523, 1715154, 1763399]; DARPA [FA8750-15-C-0082]; Direct For
   Computer & Info Scie & Enginr; Division Of Computer and Network Systems
   [1715154] Funding Source: National Science Foundation
FX We would like to thank anonymous referees for helpful feedback that
   improved this paper significantly. This research is based on work
   supported in part by NSF grants 1521523, 1715154, and 1763399 and DARPA
   grant FA8750-15-C-0082. The U.S. Government is authorized to reproduce
   and distribute reprints for Governmental purposes notwithstanding any
   copyright notation thereon. The views and conclusions contained herein
   are those of the authors and should not be interpreted as necessarily
   representing the official policies or endorsements, either expressed or
   implied, of DARPA or the U.S. Government.
CR Amani S, 2016, ACM SIGPLAN NOTICES, V51, P175, DOI 10.1145/2954679.2872404
   Anand Abhishek, 2017, INT WORKSH COQ PROGR
   Appel AW, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2701415
   Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Apple, 2015, SWIFT PROGR LANG
   Bershad B. N., 1995, Operating Systems Review, V29, P267, DOI 10.1145/224057.224077
   Blain Levy P., 1999, Typed Lambda Calculi and Applications. 4th International Conference, TLCA'99. Proceedings, P228
   Blanchard Allan, 2015, Formal Methods for Industrial Critical Systems. 20th International Workshop, FMICS 2015. Proceedings: LNCS 9128, P15, DOI 10.1007/978-3-319-19458-5_2
   Blanchard A, 2018, LECT NOTES COMPUT SC, V10811, P37, DOI 10.1007/978-3-319-77935-5_3
   Blazy S, 2009, J AUTOM REASONING, V43, P263, DOI 10.1007/s10817-009-9148-3
   Chlipala A, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P234
   Costanzo D, 2016, ACM SIGPLAN NOTICES, V51, P648, DOI [10.1145/2908080.2908100, 10.1145/2980983.2908100]
   Delaware B, 2015, ACM SIGPLAN NOTICES, V50, P689, DOI [10.1145/2775051.2677006, 10.1145/2676726.2677006]
   Gay Olivier., 2005, SOFTWARE IMPLEMENTAT
   Gosling James, 1996, The Java Language Specification
   Greenaway David, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P99, DOI 10.1007/978-3-642-32347-8_8
   Greenaway D, 2014, ACM SIGPLAN NOTICES, V49, P429, DOI [10.1145/2594291.2594296, 10.1145/2666356.2594296]
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Guéneau A, 2017, LECT NOTES COMPUT SC, V10201, P584, DOI 10.1007/978-3-662-54434-1_22
   Hoare C. A. R., 1974, Computer systems reliability: internation state of the art report, P505
   Hunt Galen C., 2007, Operating Systems Review, V41, P37, DOI 10.1145/1243418.1243424
   Kirchner F, 2015, FORM ASP COMPUT, V27, P573, DOI 10.1007/s00165-014-0326-7
   Klein G, 2014, ACM T COMPUT SYST, V32, DOI 10.1145/2560537
   Kuncak V, 2012, COMMUN ACM, V55, P103, DOI 10.1145/2076450.2076472
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   MacQueen D.B., 1984, LISP FUNCTIONAL PROG, P198
   Mangano Frederic, 2016, CRISIS 2016 11 INT C
   MANNA Z, 1971, COMMUN ACM, V14, P151, DOI 10.1145/362566.362568
   Microsoft Corp, 2001, C LANG SPEC 2001 DRA
   Mitchell James G, 1979, CSL793 XER PARC
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Nelson Greg., 1991, SYSTEMS PROGRAMMING
   O'Connor L, 2016, ACM SIGPLAN NOTICES, V51, P89, DOI 10.1145/3022670.2951940
   Odersky Martin, 2005, IC200464 EC POL FED
   Protzenko J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110261
   Schirmer N, 2006, VERIFICATION SEQUENT
   Solar-Lezama A., 2008, THESIS U CALIFORNIA
   Srivastava S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P313, DOI 10.1145/1706299.1706337
   Tan YK, 2016, ACM SIGPLAN NOTICES, V51, P60, DOI 10.1145/3022670.2951924
   The Coq development team, 2014, COQ PROOF ASSISTANT
   The Kestrel Institute, 2015, SPECW SYST
   The Rust Team, 2015, RUST PROGR LANG
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
NR 46
TC 6
Z9 7
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 136
DI 10.1145/3360562
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500021
OA gold
DA 2024-07-18
ER

PT J
AU Shaikhha, A
   Fitzgibbon, A
   Vytiniotis, D
   Jones, SP
AF Shaikhha, Amir
   Fitzgibbon, Andrew
   Vytiniotis, Dimitrios
   Jones, Simon Peyton
TI Efficient Differentiable Programming in a Functional Array-Processing
   Language
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Linear Algebra; Differentiable Programming; Optimising Compilers; Loop
   Fusion; Code Motion
ID AUTOMATIC DIFFERENTIATION; FUSION
AB We present a system for the automatic differentiation (AD) of a higher-order functional array-processing language. The core functional language underlying this system simultaneously supports both source-to-source forward-mode AD and global optimisations such as loop transformations. In combination, gradient computation with forward-mode AD can be as efficient as reverse mode, and that the Jacobian matrices required for numerical algorithms such as Gauss-Newton and Levenberg-Marquardt can be efficiently computed.
C1 [Shaikhha, Amir] Univ Oxford, Oxford, England.
   [Fitzgibbon, Andrew; Jones, Simon Peyton] Microsoft Res, Cambridge, England.
   [Vytiniotis, Dimitrios] DeepMind, London, England.
C3 University of Oxford; Microsoft
RP Shaikhha, A (corresponding author), Univ Oxford, Oxford, England.
EM amir.shaikhha@cs.ox.ac.uk; awf@microsoft.com; dvytin@google.com;
   simonpj@microsoft.com
RI Fitzgibbon, Andrew/JFL-0330-2023; Shaikhha, Amir/JXL-7753-2024
FU EPFL
FX The first author was partially supported by EPFL and a Google Ph.D.
   Fellowship during the preparation of this paper.
CR Abadi Martin, 2016, arXiv
   Agarwal S, 2010, LECT NOTES COMPUT SC, V6312, P29, DOI 10.1007/978-3-642-15552-9_3
   Agichtein E., 2006, Proceedings of the Twenty-Ninth Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, P3, DOI 10.1145/1148170.1148175
   Ankner J, 2013, ACM SIGPLAN NOTICES, V48, P1, DOI 10.1145/2502323.2502325
   [Anonymous], 2005, Perturbation confusion and referential transparency
   Bergstra J., 2010, Proc. Python Sci. Comput. Conf., V1, P3
   Berry MW, 2007, COMPUT STAT DATA AN, V52, P155, DOI 10.1016/j.csda.2006.11.006
   Bischof C, 1996, IEEE COMPUT SCI ENG, V3, P18, DOI 10.1109/99.537089
   Bischof CH, 2002, SCAM 2002: SECOND IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS MANIPULATION, PROCEEDINGS, P65, DOI 10.1109/SCAM.2002.1134106
   Chiw C, 2012, ACM SIGPLAN NOTICES, V47, P111, DOI 10.1145/2345156.2254079
   Claessen Koen., 2012, P 7 WORKSHOP DECLARA, P21, DOI [10.1145/2103736.2103740, DOI 10.1145/2103736.2103740]
   CLICK C, 1995, SIGPLAN NOTICES, V30, P246, DOI 10.1145/223428.207154
   Coutts Duncan, 2007, ICFP 07
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   de Mesmay Frederic., 2009, International Conference on Machine Learning (ICML), P729
   Elliott C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236765
   Elliott CM, 2009, ACM SIGPLAN NOTICES, V44, P191, DOI 10.1145/1631687.1596579
   FLANAGAN C, 1993, ACM SIGPLAN NOTICES, V28
   Forth SA, 2006, ACM T MATH SOFTWARE, V32, P195, DOI 10.1145/1141885.1141888
   Gibbons J, 2006, LECT NOTES COMPUT SC, V4014, P162, DOI 10.1007/11783596_12
   Gill A., 1993, SHORT CUT DEFORESTAT, P223
   Grelck C, 2006, INT J PARALLEL PROG, V34, P383, DOI 10.1007/S10766-006-0018-x
   Guenter B, 2007, ACM T GRAPHIC, V26, DOI 10.1145/1239451.1239559
   Hascoet L, 2013, ACM T MATH SOFTWARE, V39, DOI 10.1145/2450153.2450158
   Henriksen T, 2017, ACM SIGPLAN NOTICES, V52, P556, DOI [10.1145/3140587.3062354, 10.1145/3062341.3062354]
   HIVERT F, 2004, SEM LOTHAR COMBIN, V51
   Hogan RJ, 2014, ACM T MATH SOFTWARE, V40, DOI 10.1145/2560359
   Hudak P., 1996, ACM COMPUT SURV, V28, P196, DOI [10.1145/242224.242477, DOI 10.1145/242224.242477]
   Hutton G., 1999, Journal of Functional Programming, V9, P355, DOI 10.1017/S0956796899003500
   Iverson Kenneth E, 1962, Proceedings of the May 1-3, 1962, spring joint computer conference, P345, DOI DOI 10.1145/1460833.1460872
   Jones S.P., 2001, HASK WORKSH, V1, P203
   Karczmarczuk J, 1999, ACM SIGPLAN NOTICES, V34, P195, DOI 10.1145/291251.289442
   Khan KA, 2015, OPTIM METHOD SOFTW, V30, P1185, DOI 10.1080/10556788.2015.1025400
   Kiselyov O, 2017, ACM SIGPLAN NOTICES, V52, P285, DOI 10.1145/3093333.3009880
   Leary C., 2017, TensorFlow Dev Summit
   Levenberg Kenneth, 1944, Q APPL MATH, V2
   Levenstein, 2018, ARXIV PREPRINT ARXIV
   Liu C., 2010, P 19 INT C WORLD WID, P681, DOI [10.1145/1772690.1772760, DOI 10.1145/1772690.1772760]
   Maclaurin D., 2015, ICML 2015 AUTOML WOR, V238, P5
   MARQUARDT DW, 1963, J SOC IND APPL MATH, V11, P431, DOI 10.1137/0111030
   MatthewJWeinstein Anil V, 2016, ACM T MATH SOFTW, V2016
   Mendoza Marcelo, 2004, EDBT
   More, 1978, NUMERICAL ANAL
   Narayanan SHK, 2010, PROCEDIA COMPUT SCI, V1, P1839, DOI 10.1016/j.procs.2010.04.206
   Niener, 2016, ARXIV PREPRINT ARXIV
   Norvig P, 1992, Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp
   Parreaux L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158101
   Parreaux L, 2017, PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'17), P131, DOI 10.1145/3136040.3136043
   Paszke Adam, 2017, NIPS 2017 WORKSH AUT
   PEARLMUTTER BA, 2007, ACM SIGPLAN NOTICES, V42
   Pearlmutter BA, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330018
   Püschel M, 2005, P IEEE, V93, P232, DOI 10.1109/JPROC.2004.840306
   Puschel Markus, 2016, CGO 16
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Revels J., 2016, ARXIV
   Rompf, 2018, ADV NEURAL INFORM PR, P10200
   ROMPF T, 2010, 9 INT C GEN PROGR CO
   Rompf T, 2013, ACM SIGPLAN NOTICES, V48, P497, DOI 10.1145/2480359.2429128
   Shaikhha A, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000102
   Shaikhha A, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON FUNCTIONAL HIGH-PERFORMANCE COMPUTING (FHPC '17), P12, DOI 10.1145/3122948.3122949
   Shaikhha Amir, 2019, P 33 EUR C OBJ OR PR
   Siskind, 2015, ARXIV PREPRINT ARXIV
   Siskind Jeffrey Mark, 2008, Higher-Order and Symbolic Computation, V21, P361, DOI 10.1007/s10990-008-9037-1
   Sra Suvrit., 2006, Nonnegative matrix approximation: Algorithms and applications
   Steuwer M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P205, DOI 10.1145/2784731.2784754
   Stucki, 2015, P 6 ACM SIGPLAN S SC, P41, DOI DOI 10.1145/2774975.2774981
   Sujeeth A.K., 2011, ICML
   Svenningsson J, 2002, ACM SIGPLAN NOTICES, V37, P124, DOI 10.1145/583852.581491
   Svensson BJ, 2014, FHPC'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN WORKSHOP ON FUNCTIONAL HIGH-PERFORMANCE COMPUTING, P43, DOI 10.1145/2636228.2636231
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   Triggs B., 2000, Vision Algorithms: Theory and Practice. International Workshop on Vision Algorithms. Proceedings (Lecture Notes in Computer Science Vol. 1883), P298
   WADLER P, 1988, LECT NOTES COMPUT SC, V300, P344
   Wen JR, 2002, ACM T INFORM SYST, V20, P59, DOI 10.1145/503104.503108
   Zach C, 2014, LECT NOTES COMPUT SC, V8693, P772, DOI 10.1007/978-3-319-10602-1_50
NR 74
TC 26
Z9 26
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 97
DI 10.1145/3341701
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900020
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Sherman, B
   Michel, J
   Carbin, M
AF Sherman, Benjamin
   Michel, Jesse
   Carbin, Michael
TI Sound and Robust Solid Modeling via Exact Real Arithmetic and Continuity
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Constructive Analysis; Synthetic Topology
ID ALGORITHMS
AB Algorithms for solid modeling, i.e., Computer-Aided Design (CAD) and computer graphics, are often specified on real numbers and then implemented with finite-precision arithmetic, such as floating-point. The result is that these implementations do not soundly compute the results that are expected from their specifications.
   We present a new library, StoneWorks, that provides sound and robust solid modeling primitives. We implement StoneWorks in MarshallB, a pure functional programming language for exact real arithmetic in which types denote topological spaces and functions denote continuous maps, ensuring that all programs are sound and robust. We developed MarshallB as an extension of the Marshall language.
   We also define a new shape representation, compact representation (K-rep), that enables constructions such as Minkowski sum and analyses such as Hausdorff distance that are not possible with traditional representations. K-rep is a nondeterminism monad for describing all the points in a shape.
   With our library, language, and representation together, we show that short StoneWorks programs can specify and execute sound and robust solid modeling algorithms and tasks.
C1 [Sherman, Benjamin; Michel, Jesse; Carbin, Michael] MIT, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Sherman, B (corresponding author), MIT, Cambridge, MA 02139 USA.
EM sherman@csail.mit.edu; jmmichel@mit.edu; mcarbin@csail.mit.edu
FU Office of Naval Research [ONR N00014-17-1-2699]
FX We thank Eric Atkinson, Thomas Bourgeat, Tej Chajed, and Alexander Renda
   for their feedback on earlier drafts. We thank Elijah Miller and David
   Kaufman for productive discussions about solid modeling. This work was
   supported by the Office of Naval Research (ONR N00014-17-1-2699).
CR [Anonymous], 1989, Topology via logic
   Bauer A, 2009, MATH STRUCT COMP SCI, V19, P757, DOI 10.1017/S0960129509007695
   Bauer Andrej, 2008, INT C COMP COMPL AN INT C COMP COMPL AN
   Blau Taylor, 2018, P ACM PROGR LANG, V2, P1, DOI DOI 10.1145/3236794
   Brönnimann H, 2001, DISCRETE APPL MATH, V109, P25, DOI 10.1016/S0166-218X(00)00231-6
   Burnikel Christoph, 1995, S COMP GEOM S COMP GEOM
   de Brecht Matthew, 2017, ARXIV PREPRINT ARXIV
   Edalat A, 2002, THEOR COMPUT SCI, V284, P319, DOI 10.1016/S0304-3975(01)00091-3
   Elliott Conal, 2017, ICFP
   Escardo Martin, 2009, INTERSECTIONS COMPAC
   Escardo Martin, 2010, WORKSH MATH STRUCT F WORKSH MATH STRUCT F
   Fabri A, 2000, SOFTWARE PRACT EXPER, V30, P1167, DOI 10.1002/1097-024X(200009)30:11<1167::AID-SPE337>3.0.CO;2-B
   FANG SF, 1993, COMPUT AIDED DESIGN, V25, P567, DOI 10.1016/0010-4485(93)90072-V
   Florez Jorge, 2007, INT C PAR PROC APPL INT C PAR PROC APPL
   Fortune S., 1996, Applied Computational Geometry. Towards Geometric Engineering. FCRC'96 Workshop, WACG'96. Selected Papers, P9, DOI 10.1007/BFb0014476
   Gao SC, 2012, IEEE S LOG, P305, DOI 10.1109/LICS.2012.41
   GUIBAS L, 1989, PROCEEDINGS OF THE FIFTH ANNUAL SYMPOSIUM ON COMPUTATIONAL GEOMETRY, P208
   Guibas L. J., 1996, Applied Computational Geometry. Towards Geometric Engineering. FCRC'96 Workshop, WACG'96. Selected Papers, P15, DOI 10.1007/BFb0014477
   Hoffmann C. M., 1996, Applied Computational Geometry. Towards Geometric Engineering. FCRC'96 Workshop, WACG'96. Selected Papers, P1, DOI 10.1007/BFb0014475
   Hoffmann Christoph M, 1988, S COMP GEOM S COMP GEOM
   Hu CY, 1996, COMPUT AIDED DESIGN, V28, P807, DOI 10.1016/0010-4485(96)00013-9
   Johnstone Peter T, 1982, CONTINUOUS LATTICES, V27, P162
   Lin L, 2011, DISCRETE COMPUT GEOM, V45, P760, DOI 10.1007/s00454-011-9345-9
   Plantinga Simon, 2004, EUR ACM SIGGRAPH S G EUR ACM SIGGRAPH S G
   Requicha AA, 1977, Constructive solid geometry
   Sanjuan-Estrada JF, 2003, XVI BRAZILIAN SYMPOSIUM ON COMPUTER GRAPHICS AND IMAGE PROCESSING, PROCEEDINGS, P35, DOI 10.1109/SIBGRA.2003.1240989
   Schirra Stefan, 1998, ROBUSTNESS PRECISION
   Sharma V., 2017, HDB DISCRETE COMPUTA, P1189, DOI DOI 10.1201/9781315119601
   Sherman Benjamin, 2018, LICS
   Simpson AK, 1998, LECT NOTES COMPUT SC, V1450, P456, DOI 10.1007/BFb0055795
   SNYDER JM, 1992, COMP GRAPH, V26, P121, DOI 10.1145/142920.134024
   Snyder John M, GENERATIVE MODELING
   Taylor P, 2010, J LOG ANAL, V2, DOI 10.4115/jla.2010.2.5
   Taylor P, 2006, LOG METH COMPUT SCI, V2, DOI 10.2168/LMCS-2(1:1)2006
   Taylor Paul, 2019, LOCAL COMPACTNESS BA
   Yap CK, 1997, COMP GEOM-THEOR APPL, V7, P3, DOI 10.1016/0925-7721(95)00040-2
NR 36
TC 2
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 99
DI 10.1145/3341703
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900022
OA gold
DA 2024-07-18
ER

PT J
AU Vezzosi, A
   Mörtberg, A
   Abel, A
AF Vezzosi, Andrea
   Mortberg, Anders
   Abel, Andreas
TI Cubical Agda: A Dependently Typed Programming Language with Univalence
   and Higher Inductive Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Cubical Type Theory; Univalence; Higher Inductive Types; Dependent
   Pattern Matching
AB Proof assistants based on dependent type theory provide expressive languages for both programming and proving within the same system. However, all of the major implementations lack powerful extensionality principles for reasoning about equality, such as function and propositional extensionality. These principles are typically added axiomatically which disrupts the constructive properties of these systems. Cubical type theory provides a solution by giving computational meaning to Homotopy Type Theory and Univalent Foundations, in particular to the univalence axiom and higher inductive types. This paper describes an extension of the dependently typed functional programming language Agda with cubical primitives, making it into a full-blown proof assistant with native support for univalence and a general schema of higher inductive types. These new primitives make function and propositional extensionality as well as quotient types directly definable with computational content. Additionally, thanks also to copatterns, bisimilarity is equivalent to equality for coinductive types. This extends Agda with support for a wide range of extensionality principles, without sacrificing type checking and constructivity.
C1 [Vezzosi, Andrea] IT Univ Copenhagen, Rued Langgaards Vej 7, DK-2300 Copenhagen, Denmark.
   [Mortberg, Anders] Stockholm Univ, Dept Math, Kraftriket Hus 6, S-10691 Stockholm, Sweden.
   [Mortberg, Anders] Carnegie Mellon Univ, Sch Comp Sci, Pittsburgh, PA 15213 USA.
   [Abel, Andreas] Chalmers & Gothenburg Univ, Dept Comp Sci & Engn, Rannvagen 6b, S-41296 Gothenburg, Sweden.
C3 IT University Copenhagen; Stockholm University; Carnegie Mellon
   University
RP Vezzosi, A (corresponding author), IT Univ Copenhagen, Rued Langgaards Vej 7, DK-2300 Copenhagen, Denmark.
EM avez@itu.dk; anders.mortberg@math.su.se; andreas.abel@gu.se
OI Vezzosi, Andrea/0000-0001-9570-9407
CR Abel A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158111
   Abel A, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2480359.2429075
   Agda development team, 2018, AGD 2 5 4 2 DOC
   Ahrens Benedikt, 2015, ABS150402949 CORR
   Altenkirch T, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P57, DOI 10.1145/1292597.1292608
   Altenkirch Thorsten, 2006, OBSERVATIONAL UNPUB
   Angiuli C., 2019, SYNTAX MODELS CARTES
   Angiuli C, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000198
   Angiuli Carlo, 2018, LIPIcs, V119, DOI DOI 10.4230/LIPICS.CSL.2018.6
   Angiuli Carlo, 2017, ARXIV171201800V1
   Annenkov Danil, 2017, 2 LEVEL TYPE THEORY
   [Anonymous], 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236787
   Bickford Mark, 2018, ABS180606114 CORR
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Brunerie Guillaume, 2016, THESIS U NICE
   Cavallo E, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290314
   Chu S, 2017, ACM SIGPLAN NOTICES, V52, P510, DOI [10.1145/3062341.3062348, 10.1145/3140587.3062348]
   Cockx J, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236770
   Cohen C, 2013, LECT NOTES COMPUT SC, V8307, P147, DOI 10.1007/978-3-319-03545-1_10
   Cohen Cyril, 2015, CUBICALTT
   Cohen Cyril, 2018, 21 INT C TYP PROOFS, V69
   Coquand T., 2019, HOMOTOPY CANONICITY, V11, P1
   Coquand T, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P255, DOI 10.1145/3209108.3209197
   Coquand T, 2013, INDAGAT MATH NEW SER, V24, P1105, DOI 10.1016/j.indag.2013.09.002
   de Moura Leonardo, 2015, AUTOMATED DEDUCTION
   Huber S, 2017, DOC LABOR
   Huber Simon, 2016, ARXIV160704156
   Kapulkin Chris, 2012, ARXIV12112851V4
   Licata DR, 2015, IEEE S LOG, P92, DOI 10.1109/LICS.2015.19
   Licata DR, 2013, IEEE S LOG, P223, DOI 10.1109/LICS.2013.28
   LOPS18 Daniel R., 2018, 3 INT C FORMAL STRUC, p22:1, DOI [10.4230/LIPIcs.FSCD.2018.22, DOI 10.4230/LIPICS.FSCD.2018.22]
   Lumsdaine Peter LeFanu, 2017, ARXIV170507088
   Martin-Lof P., 1975, LOGIC C 73, P73
   McBride C, 2009, LECT NOTES COMPUT SC, V5728, P113, DOI 10.1007/978-3-642-03741-2_9
   Orton Ian, 2016, LIPICS, V62
   Riehl Emily, 2017, Higher Structures, V1, P147, DOI [10.1007/s42001-017-0005-6, DOI 10.1007/S42001-017-0005-6]
   Sojakova K, 2016, ACM T COMPUT LOG, V17, DOI 10.1145/2992783
   Sterling Jonathan, 2019, CUBICAL SYNTAX REFLE
   The Coq Development Team, 2019, The Coq Proof Assistant, version 8.9.0, DOI 10.5281/zenodo.2554024
   The RedPRL Development Team, 2018, REDTT PROOF ASS
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   Vezzosi Andrea, 2017, STREAMS CUBICAL TYPE
   Voevodsky V., 2013, A simple type system with two identity types
   Voevodsky V, 2015, MATH STRUCT COMP SCI, V25, P1278, DOI 10.1017/S0960129514000577
NR 44
TC 38
Z9 40
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 87
DI 10.1145/3341691
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900010
OA gold
DA 2024-07-18
ER

PT J
AU Yallop, J
   White, L
AF Yallop, Jeremy
   White, Leo
TI Lambda: The Ultimate Sublanguage (Experience Report)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE education; pedagogy; types; functional programming; lambda calculus;
   mental models; sublanguages
AB We describe our experience teaching an advanced typed functional programming course based around the use of System F omega as a programming language.
C1 [Yallop, Jeremy] Univ Cambridge, Dept Comp Sci & Technol, Cambridge, England.
   [White, Leo] Jane St Capital, London, England.
C3 University of Cambridge
RP Yallop, J (corresponding author), Univ Cambridge, Dept Comp Sci & Technol, Cambridge, England.
EM yallop@cl.cam.ac.uk; leo@lpw25.net
CR Altenkirch Thorsten., 2005, WHY DEPENDENT TYPES
   [Anonymous], 1998, Purely Functional Data Structures
   Atkey Robert, 2012, COMPUTER SCI LOGIC C, V16, P46
   Baars A. I., 2002, SIGPLAN Notices, V37, P157, DOI 10.1145/583852.581494
   Bird R., 1998, Mathematics of Program Construction. 4th International Conference, MPC'98. Proceedings, P52, DOI 10.1007/BFb0054285
   Bird R. S., 1999, Journal of Functional Programming, V9, P77, DOI 10.1017/S0956796899003366
   Brown M, 2017, ACM SIGPLAN NOTICES, V52, P415, DOI 10.1145/3093333.3009853
   Brusilovsky P., 1994, Proceedings of Ed-Media 94 World Conference on Educational Multimedia and Hypermedia, Vancouver, 25-30 June
   Cardelli Luca, 1989, FORM DESCR PROGR CON, P431
   Carette J, 2016, LECT NOTES COMPUT SC, V9632, P123, DOI 10.1007/978-3-662-49498-1_6
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Conal Elliott, 2009, 200901 LAMBDAPIX
   Davies R, 1996, IEEE S LOG, P184, DOI 10.1109/LICS.1996.561317
   Dolan S., 2015, OCAML WORKSHOP
   Eisenberg RA, 2012, ACM SIGPLAN NOTICES, V47, P117, DOI 10.1145/2430532.2364522
   Elsman M, 2004, LECT NOTES COMPUT SC, V3057, P224
   Felleisen M, 2004, J FUNCT PROGRAM, V14, P365, DOI 10.1017/S0956796804005076
   Garrigue J, 2004, LECT NOTES COMPUT SC, V2998, P196
   Garrigue J, 1999, INFORM COMPUT, V155, P134, DOI 10.1006/inco.1999.2830
   Garrigue J, 2017, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.241.2
   Garrigue Jacques, 2013, 11 AS S PROGR LANG S
   Garrigue Jacques, 2013, OCAML M SEPT 2013
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   Heeren Bastiaan, 2003, P ACM SIGPLAN HASK W, V62
   HENGLEIN F, 1993, ACM T PROGR LANG SYS, V15, P253, DOI 10.1145/169701.169692
   Hinze R., 2000, Journal of Functional Programming, V10, P327, DOI 10.1017/S0956796800003713
   Hinze R., 1999, Discrete Mathematics & Theoretical Computer Science, V3
   Johann P, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P297, DOI 10.1145/1328438.1328475
   Jones M. P., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P52, DOI 10.1145/165180.165190
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Kameyama Y, 2008, PEPM'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PARTIAL EVALUATION AND SEMANTICS-BASED PROGRAM MANIPULATION, P147, DOI 10.1145/1328408.1328430
   Kiselyov O, 2007, ELECTRON NOTES THEOR, V174, P79, DOI 10.1016/j.entcs.2006.10.039
   Kiselyov O, 2017, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.241.1
   Kiselyov O, 2014, LECT NOTES COMPUT SC, V8475, P86, DOI 10.1007/978-3-319-07151-0_6
   Kiselyov Oleg, 2016, MODULAR COMPOSABLE T
   Lindley S, 2013, ACM SIGPLAN NOTICES, V48, P81, DOI 10.1145/2503778.2503786
   Lindley Sam, 2012, P 8 ACM SIGPLAN WORK, P45, DOI [10.1145/2364394.2364402, DOI 10.1145/2364394.2364402]
   Marceau Guillaume., 2011, Proceedings of the 10th SIGPLAN symposium on New ideas, new paradigms, and reflections on programming and software, ONWARD '11, P3
   Michaelson G., 2011, INTRO FUNCTIONAL PRO
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Nordstrom B., 1990, Programming in Martin-Lof's Type Theory
   Pagan F. G., 1980, SIGPLAN Notices, V15, P72, DOI 10.1145/947680.947687
   Pasalic Emir, 2004, THESIS
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pottier F, 2006, ELECTRON NOTES THEOR, V148, P155, DOI 10.1016/j.entcs.2005.11.044
   Pottier F, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P203, DOI 10.1145/2628136.2628145
   Rossberg A, 2014, J FUNCT PROGRAM, V24, P529, DOI 10.1017/S0956796814000264
   Sheard Tim., 2005, HASKELL 05, P74, DOI [DOI 10.1145/1088348.1088356, 10.1145/1088348.1088356]
   Siek J, 2005, ACM SIGPLAN NOTICES, V40, P73, DOI 10.1145/1064978.1065021
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Thompson S., 1991, Type Theory and Functional Programming
   Turner DA, 2004, J UNIVERS COMPUT SCI, V10, P751
   Vaugon Benoit, 2013, OCAML US DEV WORKSH
   Vouillon J, 2014, SOFTWARE PRACT EXPER, V44, P951, DOI 10.1002/spe.2187
   Vytiniotis D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P295
   Wadler P, 2003, INFORM COMPUT, V186, P260, DOI 10.1016/S0890-5401(03)00141-X
   Wadler P, 2015, COMMUN ACM, V58, P75, DOI 10.1145/2699407
   Weirich S, 2004, J FUNCT PROGRAM, V14, P681, DOI 10.1017/S0956796804005179
   WELLS JB, 1994, IEEE S LOG, P176
   White L, 2015, ELECTRON P THEOR COM, P22, DOI 10.4204/EPTCS.198.2
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
   Yallop J, 2010, ACM SIGPLAN WORKSH M
   Yallop J, 2019, ELECTRON P THEOR COM, P74, DOI 10.4204/EPTCS.294.4
   Yallop J, 2018, SCI COMPUT PROGRAM, V164, P82, DOI 10.1016/j.scico.2017.04.002
   Yallop J, 2014, LECT NOTES COMPUT SC, V8475, P119, DOI 10.1007/978-3-319-07151-0_8
   Yallop Jeremy, 2017, P ML FAM OCAML US DE, V241, DOI [10.4204/EPTCS.241, DOI 10.4204/EPTCS.241]
NR 68
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 116
DI 10.1145/3342713
PG 17
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900039
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Zhang, HC
   Roth, E
   Haeberlen, A
   Pierce, BC
   Roth, A
AF Zhang, Hengchu
   Roth, Edo
   Haeberlen, Andreas
   Pierce, Benjamin C.
   Roth, Aaron
TI Fuzzi: A Three-Level Logic for Differential Privacy
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Differential privacy; typechecking; static analysis; apRHL; Fuzz; Fuzzi
AB Curators of sensitive datasets sometimes need to know whether queries against the data are differentially private.Two sorts of logics have been proposed for checking this property: (1) type systems and other static analyses, which fully automate straightforward reasoning with concepts like "program sensitivity" and "privacy loss," and (2) full-blown program logics such as apRHL (an approximate, probabilistic, relational Hoare logic),which support more flexible reasoning about subtle privacy-preserving algorithmic techniques but offer only minimal automation.
   We propose a three-level logic for differential privacy in an imperative setting and present a prototype implementation called Fuzzi. Fuzzi's lowest level is a general-purpose logic; its middle level is apRHL; and its top level is a novel sensitivity logic adapted from the linear-logic-inspired type system of Fuzz, a differentially private functional language.The key novelty is a high degree of integration between the sensitivity logic and the two lower-level logics: the judgments and proofs of the sensitivity logic can be easily translated into apRHL; conversely, privacy properties of key algorithmic building blocks can be proved manually in apRHI., and the base logic, then packaged up as typing rules that can be applied by a checker for the sensitivity logic to automatically construct privacy proofs for composite programs of arbitrary size.
   We demonstrate Fuzzi's utility by implementing four different private machine-learning algorithms and showing that Fuzzi's checker is able to derive tight sensitivity bounds.
C1 [Zhang, Hengchu; Roth, Edo; Haeberlen, Andreas; Pierce, Benjamin C.; Roth, Aaron] Univ Penn, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Zhang, HC (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM hengchu@seas.upenn.edu; edoroth@seas.upenn.edu; ahae@cis.upenn.edu;
   bcpierce@cis.upenn.edu; aaroth@cis.upenn.edu
OI Roth, Aaron/0000-0002-0586-0515
FU National Science Foundation [CNS-1065060, CNS-1513694]
FX We are grateful to Justin Hsu, David Darais, and Penn PLClub for their
   comments, and we thank the anonymous ICFP reviewers for their detailed
   and helpful feedback. This work was supported in part by the National
   Science Foundation under grants CNS-1065060 and CNS-1513694.
CR Abadi M, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P308, DOI 10.1145/2976749.2978318
   Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Albarghouthi A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158146
   [Anonymous], 2017, UCI MACHINE LEARNING
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Apple, 2017, APPL DIFF PRIV WHIT
   Bahr P, 2011, WGP 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P83
   Barthe G, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P749, DOI 10.1145/2933575.2934554
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Brendan McMahan H., 2018, INT C LEARNING REPRE
   Chan THH, 2011, ACM T INFORM SYST SE, V14, DOI 10.1145/2043621.2043626
   Chen Yan, 2015, ARXIV150807306
   Dajani A.N., 2017, The modernization of statistical disclosure limitation at the U . S . Census Bureau
   Ding ZY, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P475, DOI 10.1145/3243734.3243818
   Dwork C, 2006, LECT NOTES COMPUT SC, V3876, P265, DOI 10.1007/11681878_14
   Dwork C, 2013, FOUND TRENDS THEOR C, V9, P211, DOI 10.1561/0400000042
   Dwork C, 2010, ANN IEEE SYMP FOUND, P51, DOI 10.1109/FOCS.2010.12
   Erlingsson U, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1054, DOI 10.1145/2660267.2660348
   Fisher RA, 1936, ANN EUGENIC, V7, P179, DOI 10.1111/j.1469-1809.1936.tb02137.x
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Gaboardi M., 2016, ABS160904340 CORR
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Haeberlen A., 2011, P 20 USENIX SEC S US
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hsu Justin, 2018, COMMUNICATION
   Johnson N, 2018, PROC VLDB ENDOW, V11, P526, DOI 10.1145/3177732.3177733
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Lecun Y, 1998, P IEEE, V86, P2278, DOI 10.1109/5.726791
   LeCun Y., 2010, MNIST HANDWRITTEN DI
   Lyu Min, 2016, ABS160301699 CORR
   McSherry F, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P19
   McSherry F, 2009, KDD-09: 15TH ACM SIGKDD CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P627
   Microsoft, 2017, COLL TEL DAT PRIV
   Mironov I, 2012, CCS, P650, DOI [DOI 10.1145/2382196.2382264, DOI 10.1145/2382196]
   Narayan Arjun, 2012, OSDI, P149
   Oliphant T. E., 2015, Guide to NumPy, V2nd
   Papernot N., 2016, INT C LEARN REPR
   Reed J, 2010, ACM SIGPLAN NOTICES, V45, P157, DOI 10.1145/1932681.1863568
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rogers Ryan M, 2016, ADV NEURAL INFORM PR, V29
   Sato T, 2016, ELECTRON NOTES THEOR, V325, P277, DOI 10.1016/j.entcs.2016.09.043
   Sato Tetsuya, 2019, ABS171009010 CORR
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   The Coq Development Team, 2022, COQ PROOF ASSISTANT
   The EasyCrypt Development Team, 2018, EASYCRYPT REF MAN VE
   Winograd-Cort D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110254
   Zhang D., 2018, SIGMOD
   Zhang D, 2017, ACM SIGPLAN NOTICES, V52, P888, DOI 10.1145/3093333.3009884
NR 49
TC 8
Z9 10
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 93
DI 10.1145/3341697
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900016
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Chen, QL
   Zhang, NR
   Wang, JP
   Tan, T
   Xu, C
   Ma, XX
   Li, Y
AF Chen, Qinlin
   Zhang, Nairen
   Wang, Jinpeng
   Tan, Tian
   Xu, Chang
   Ma, Xiaoxing
   Li, Yue
TI The Essence of Verilog
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Verilog; Semantics; Hardware Description Languages; Core Languages
ID SEMANTICS
AB With the increasing need to apply modern software techniques to hardware design, Verilog, the most popular Hardware Description Language (HDL), plays an infrastructure role. However, Verilog has several semantic pitfalls that often confuse software and hardware developers. Although prior research on formal semantics for Verilog exists, it is not comprehensive and has not fully addressed these issues. In this work, we present a novel scheme inspired by previous work on defining core languages for software languages like JavaScript and Python. Specifically, we define the formal semantics of Verilog using a core language called lambda(V), which captures the essence of Verilog using as few language structures as possible. lambda(V) not only covers the most complete set of language features to date, but also addresses the aforementioned pitfalls. We implemented lambda(V) with about 27,000 lines of Java code, and comprehensively tested its totality and conformance with Verilog. As a reliable reference semantics, lambda(V) can detect semantic bugs in real-world Verilog simulators and expose ambiguities in Verilog's standard specification. Moreover, as a useful core language, lambda(V) has the potential to facilitate the development of tools such as a state-space explorer and a concolic execution tool for Verilog.
C1 [Chen, Qinlin; Zhang, Nairen; Wang, Jinpeng; Tan, Tian; Xu, Chang; Ma, Xiaoxing; Li, Yue] Nanjing Univ, State Key Lab Novel Software Technol, Nanjing, Peoples R China.
C3 Nanjing University
RP Tan, T; Li, Y (corresponding author), Nanjing Univ, State Key Lab Novel Software Technol, Nanjing, Peoples R China.
EM qinlinchen@smail.nju.edu.cn; nairen@smail.nju.edu.cn;
   jpwang@smail.nju.edu.cn; tiantan@nju.edu.cn; changxu@nju.edu.cn;
   xxm@nju.edu.cn; yueli@nju.edu.cn
RI Zhou, Xinyi/KGM-6689-2024; Li, Yang/KFB-5350-2024; liu,
   xinyi/KFB-4466-2024
OI Zhang, Nairen/0009-0004-3737-8768; Xu, Chang/0000-0002-6299-4704; Li,
   Yue/0009-0009-1285-2298
FU Natural Science Foundation of China [62025202, 62002157, 61932021];
   Leading-edge Technology Program of Jiangsu Natural Science Foundation
   [BK20202001]; Fundamental Research Funds for the Central Universities of
   China [020214380102, 020214912220]; Collaborative Innovation Center of
   Novel Software Technology and Industrialization, Jiangsu, China
FX We thank the anonymous reviewers for their helpful comments. Thiswork
   was supported by the Natural Science Foundation of China under Grant
   Nos. 62025202, 62002157 and 61932021, the Leading-edge Technology
   Program of Jiangsu Natural Science Foundation under Grant No.
   BK20202001, and the Fundamental Research Funds for the Central
   Universities of China under Grant Nos. 020214380102 and 020214912220.
   The authors would also like to thank the support from the Collaborative
   Innovation Center of Novel Software Technology and Industrialization,
   Jiangsu, China.
CR Ahmed A, 2018, DES AUT TEST EUROPE, P1538, DOI 10.23919/DATE.2018.8342260
   [Anonymous], 2006, IEEE Standard for Verilog Hardware Description Language, P1, DOI [DOI 10.1109/IEEESTD.2006.99495, DOI 10.1109/IEEESTD.2006.243731]
   Bachrach J, 2012, DES AUT CON, P1212
   Balkind J, 2016, ACM SIGPLAN NOTICES, V51, P217, DOI 10.1145/2954679.2872414
   Beamer S, 2020, DES AUT CON, DOI 10.1109/dac18072.2020.9218632
   Chen Qinlin, 2023, The Essence of Verilog: A Tractable and Tested Operational Semantics for Verilog, DOI [10.5281/zenodo.8321324, DOI 10.5281/ZENODO.8321324]
   Chen Qinlin, 2023, The Essence of Verilog: A Tractable and Tested Operational Semantics for Verilog (Artifact), DOI [10.5281/zenodo.8320642, DOI 10.5281/ZENODO.8320642]
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dimitrov J, 2001, APSEC 2001: EIGHTH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P161, DOI 10.1109/APSEC.2001.991473
   Fiskio-Lasseter John, 1999, Electronic Notes in Theoretical Computer Science, V26, P34, DOI [10.1016/S1571- 0661(05)80282-8, DOI 10.1016/S1571-0661(05)80282-8]
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Golson Steve, 2016, Language wars in the 21st century: verilog versus vhdl-revisited
   GORDON M, 1995, IEEE S LOG, P136, DOI 10.1109/LICS.1995.523251
   Gordon MJC, 2002, COMPUT J, V45, P27, DOI 10.1093/comjnl/45.1.27
   Grimm T, 2018, ELECTRONICS-SWITZ, V7, DOI 10.3390/electronics7060081
   Guha A, 2010, LECT NOTES COMPUT SC, V6183, P126, DOI 10.1007/978-3-642-14107-2_7
   He JF, 2000, PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON PARALLEL AND DISTRIBUTED PROCESSING TECHNIQUES AND APPLICATIONS, VOLS I-V, P203
   He JF, 2000, ICECS 2000: 7TH IEEE INTERNATIONAL CONFERENCE ON ELECTRONICS, CIRCUITS & SYSTEMS, VOLS I AND II, P412, DOI 10.1109/ICECS.2000.911568
   Herklotz Y, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485494
   Izraelevitz A, 2017, ICCAD-IEEE ACM INT, P209, DOI 10.1109/ICCAD.2017.8203780
   Kaufmann M., 2013, Computer-aided reasoning: ACL2 case studies, V4
   Krishnamurthi S, 2015, PROCEEDINGS OF THE 2015 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'15), P1, DOI 10.1145/2678015.2678016
   Krishnamurthi Shriram, 2019, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V136, DOI [10.4230/LIPIcs.SNAPL.2019.9, DOI 10.4230/LIPICS.SNAPL.2019.9]
   Lööw A, 2022, P ACM IEEE INT CONF, DOI 10.1109/MEMOCODE57689.2022.9954591
   Lööw A, 2019, FME WORKS FORM, P99, DOI 10.1109/FormaliSE.2019.00020
   Meng XY, 2022, IEEE T COMPUT AID D, V41, P466, DOI 10.1109/TCAD.2021.3066560
   Meredith Patrick, 2010, 2010 8th IEEE/ACM International Conference on Formal Methods and Models for Codesign (MEMOCODE 2010), P179, DOI 10.1109/MEMCOD.2010.5558634
   Meseguer J, 2007, THEOR COMPUT SCI, V373, P213, DOI 10.1016/j.tcs.2006.12.018
   Parr T, 2013, DEFINITIVE ANTLR 4 R, P1
   Politz JG, 2013, ACM SIGPLAN NOTICES, V48, P1, DOI 10.1145/2480360.2384579
   Politz Joe Gibbs, 2013, P 2013 ACM SIGPLAN I, P217, DOI DOI 10.1145/2509136.2509536
   Schuiki F, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P258, DOI 10.1145/3385412.3386024
   Snyder Wilson, 2023, about us
   Snyder Wilson, 2023, vppreproc
   Truong L., 2019, P 2019 SUMMIT ADV PR, P7, DOI [10.4230/LIPICS.SNAPL.2019.7, DOI 10.4230/LIPICS.SNAPL.2019.7]
   Vafeiadis V, 2015, ACM SIGPLAN NOTICES, V50, P209, DOI [10.1145/2676726.2676995, 10.1145/2775051.2676995]
   Williams Stephen, 2023, Icarus Verilog.
   Witharana H, 2022, ACM COMPUT SURV, V54, DOI 10.1145/3510578
   Zhu H, 2000, P INT C SOFTW THEOR, P421
   Zhu HBA, 2008, INNOV SYST SOFTW ENG, V4, P341, DOI 10.1007/s11334-008-0069-9
NR 40
TC 1
Z9 1
U1 3
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 230
DI 10.1145/3622805
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100010
OA gold
DA 2024-07-18
ER

PT J
AU Meyer, R
   Wies, T
   Wolff, S
AF Meyer, Roland
   Wies, Thomas
   Wolff, Sebastian
TI Embedding Hindsight Reasoning in Separation Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Hindsight; Linearizability; Logical Ordering Tree
ID LINEARIZABILITY
AB Automatically proving linearizability of concurrent data structures remains a key challenge for verification. We present temporal interpolation as a new proof principle to guide automated proof search using hindsight arguments within concurrent separation logic. Temporal interpolation offers an easy-to-automate alternative to prophecy variables and has the advantage of structuring proofs into easy-to-discharge hypotheses. Additionally, we advance hindsight theory by integrating it into a program logic, bringing formal rigor and complementary proof machinery. We substantiate the usefulness of temporal interpolation by implementing it in a tool and using it to automatically verify the Logical Ordering tree. The proof is challenging due to future-dependent linearization points and complex structure overlays. It is the first formal proof of this data structure. Interestingly, our formalization revealed an unknown bug and an existing informal proof as erroneous.
C1 [Meyer, Roland] TU Braunschweig, Braunschweig, Germany.
   [Wies, Thomas; Wolff, Sebastian] NewYork Univ, New York, NY USA.
C3 Braunschweig University of Technology
RP Meyer, R (corresponding author), TU Braunschweig, Braunschweig, Germany.
EM roland.meyer@tu-bs.de; wies@cs.nyu.edu; sebastian.wolff@cs.nyu.edu
OI Wolff, Sebastian/0000-0002-3974-7713; Wies, Thomas/0000-0003-4051-5968
FU National Science Foundation [1815633]; Amazon Research Award; Simons
   Foundation [855328]
FX This work is funded in parts by the National Science Foundation under
   grant 1815633 and by an Amazon Research Award. The third author is
   supported by a Junior Fellowship from the Simons Foundation (855328,
   SW).
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   [Anonymous], 1995, Temporal verification of reactive systems-safety
   Bell CJ, 2010, LECT NOTES COMPUT SC, V6337, P151, DOI 10.1007/978-3-642-15769-1_10
   Berdine J, 2008, LECT NOTES COMPUT SC, V5123, P399
   Bouajjani A, 2017, LECT NOTES COMPUT SC, V10427, P542, DOI 10.1007/978-3-319-63390-9_28
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Delbianco German Andres, 2017, LIPICS, V74, DOI DOI 10.4230/LIPICS
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Drachsler D, 2014, ACM SIGPLAN NOTICES, V49, P343, DOI [10.1145/2555243.2555269, 10.1145/2692916.2555269]
   Elmas T, 2010, LECT NOTES COMPUT SC, V6015, P296, DOI 10.1007/978-3-642-12002-2_25
   Feldman YMY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428196
   Feldman Yotam M. Y., 2018, LIPIcs, V121, P231, DOI [10.4230/LIPIcs.DISC.2018.23, DOI 10.4230/LIPICS.DISC.2018.23]
   Fu M, 2010, LECT NOTES COMPUT SC, V6269, P388, DOI 10.1007/978-3-642-15375-4_27
   Gotsman A, 2013, LECT NOTES COMPUT SC, V7792, P249, DOI 10.1007/978-3-642-37036-6_15
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Hemed N, 2015, LECT NOTES COMPUT SC, V9363, P371, DOI 10.1007/978-3-662-48653-5_25
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Krishna S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P181, DOI 10.1145/3385412.3386029
   Krishna S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158125
   Krishna S, 2020, LECT NOTES COMPUT SC, V12075, P308, DOI 10.1007/978-3-030-44914-8_12
   Krishna Siddharth, 2021, AUTOMATED VERIFICATI, DOI DOI 10.2200/S01089ED1V01Y202104CSL013
   Lev-Ari K, 2015, LECT NOTES COMPUT SC, V9363, P356, DOI 10.1007/978-3-662-48653-5_24
   Liang HJ, 2013, ACM SIGPLAN NOTICES, V48, P459, DOI 10.1145/2499370.2462189
   Meyer Roland, 2023, Zenodo, DOI 10.5281/ZENODO.7829982
   Meyer R, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563337
   Meyer Roland, 2022, ARXIV, DOI [10.48550/arXiv.2209.13692, DOI 10.48550/ARXIV.2209.13692]
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2010, PODC 2010: PROCEEDINGS OF THE 2010 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P85, DOI 10.1145/1835698.1835722
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Parkinson Matthew, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P297, DOI 10.1145/1190216.1190261
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Schellhorn Gerhard, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P243, DOI 10.1007/978-3-642-31424-7_21
   Schneider F.B., 1997, On concurrent programming, DOI [DOI 10.1007/978-1-4612-1830-2, 10. 1007/978-1-4612-1830-2]
   Sergey I, 2015, LECT NOTES COMPUT SC, V9032, P333, DOI 10.1007/978-3-662-46669-8_14
   SHASHA D, 1988, ACM T DATABASE SYST, V13, P53, DOI 10.1145/42201.42204
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P343, DOI 10.1145/2480359.2429111
   Vafeiadis V., 2008, Ph. D. Dissertation
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   Vindum SF, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P76, DOI 10.1145/3437992.3439930
   Zhu H, 2015, LECT NOTES COMPUT SC, V9207, P3, DOI 10.1007/978-3-319-21668-3_1
   Zipeng Zhang, 2012, Theory and Applications of Models of Computation. Proceedings 9th Annual Conference, TAMC 2012, P61, DOI 10.1007/978-3-642-29952-0_12
NR 46
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 182
DI 10.1145/3591296
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900078
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Zhang, JL
   Morrisett, G
   Tan, G
AF Zhang, Jialun
   Morrisett, Greg
   Tan, Gang
TI Interval Parsing Grammars for File Format Parsing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE File Formats; Context-sensitive Grammars
ID LANGUAGE
AB File formats specify how data is encoded for persistent storage. They cannot be formalized as context-free grammars since their specifications include context-sensitive patterns such as the random access pattern and the type-length-value pattern. We propose a new grammar mechanism called Interval Parsing Grammars (IPGs) for file format specifications. An IPG attaches to every nonterminal/terminal an interval, which specifies the range of input the nonterminal/terminal consumes. By connecting intervals and attributes, the contextsensitive patterns in file formats can be well handled. In this paper, we formalize IPGs' syntax as well as its semantics, and its semantics naturally leads to a parser generator that generates a recursive-descent parser from an IPG. In general, IPGs are declarative, modular, and enable termination checking. We have used IPGs to specify a number of file formats including ZIP, ELF, GIF, PE, and part of PDF; we have also evaluated the performance of the generated parsers.
C1 [Zhang, Jialun; Tan, Gang] Penn State Univ, University Pk, PA 16802 USA.
   [Morrisett, Greg] Cornell Univ, Ithaca, NY USA.
C3 Pennsylvania Commonwealth System of Higher Education (PCSHE);
   Pennsylvania State University; Pennsylvania State University -
   University Park; Cornell University
RP Zhang, JL (corresponding author), Penn State Univ, University Pk, PA 16802 USA.
EM jjz5354@psu.edu; jgm19@cornell.edu; gtan@psu.edu
OI Tan, Gang/0000-0001-6109-6091
FU DARPA [HR0011-19-C-0073]; NSF [FMiTF-1918396]
FX We thank anonymous reviewers and our shepherd, Francois Gauthier, for
   in-depth comments on earlier versions of the paper. Also, we would like
   to thank the artifact evaluation committee for numerous comments that
   greatly improved the artifact. This research is supported by DARPA under
   Grant No. HR0011-19-C-0073 and NSF under Grant No. FMiTF-1918396.
CR Adobe, 2008, DOC MAN PORT DOC 493
   Back G, 2002, LECT NOTES COMPUT SC, V2487, P66
   Bangert Julian, 2014, 11 USENIX S OPERATIN, P615
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   ELF, 1995, EX LINK FORM ELF SPE
   Fisher K, 2006, ACM SIGPLAN NOTICES, V41, P2, DOI 10.1145/1111320.1111039
   Fisher K, 2005, ACM SIGPLAN NOTICES, V40, P295, DOI 10.1145/1064978.1065046
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Hmelnov A, 2018, 2018 IVANNIKOV ISPRAS OPEN CONFERENCE (ISPRAS), P23, DOI 10.1109/ISPRAS.2018.00011
   Jana S, 2012, P IEEE S SECUR PRIV, P80, DOI 10.1109/SP.2012.15
   Jim T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P417, DOI 10.1145/1706299.1706347
   Johnson D. B., 1975, SIAM Journal on Computing, V4, P77, DOI 10.1137/0204007
   Kaitai, 2015, US
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Kumar Ashish, 2023, 9 WORKSHOP LANGUAGE
   Lucas ZS, 2021, 2021 IEEE SYMPOSIUM ON SECURITY AND PRIVACY WORKSHOPS (SPW 2021), P128, DOI 10.1109/SPW53761.2021.00026
   Mundkur P, 2020, 2020 IEEE SYMPOSIUM ON SECURITY AND PRIVACY WORKSHOPS (SPW 2020), P300, DOI 10.1109/SPW50608.2020.00064
   Cardona PAN, 2015, CUAD ACT, P154
   Parr T, 2014, ACM SIGPLAN NOTICES, V49, P579, DOI [10.1145/2714064.2660202, 10.1145/2660193.2660202]
   Ramananandro T, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1465
   Underwood William, 2012, International Journal of Digital Curation, V7, P95, DOI DOI 10.2218/IJDC.V7I1.217
   W3C, 2018, Scalable Vector Graphics (SVG) 2
   Zhang Jialun, 2023, Zenodo, DOI 10.5281/ZENODO.7811236
   Zhang JL, 2023, Arxiv, DOI arXiv:2304.04859
NR 24
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 150
DI 10.1145/3591264
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900046
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Jochems, J
   Jones, E
   Ramsay, S
AF Jochems, Jerome
   Jones, Eddie
   Ramsay, Steven
TI Higher-Order MSL Horn Constraints
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE higher-order program verification; constraint-based program analysis
ID MODEL-CHECKING; CALCULUS; AUTOMATA
AB The monadic shallow linear (MSL) class is a decidable fragment of first-order Horn clauses that was discovered and rediscovered around the turn of the century, with applications in static analysis and verification. We propose a new class of higher-order Horn constraints which extend MSL to higher-order logic and develop a resolution-based decision procedure. Higher-order MSL Horn constraints can quite naturally capture the complex patterns of call and return that are possible in higher-order programs, which make them well suited to higher-order program verification. In fact, we show that the higher-order MSL satisfiability problem and the HORS model checking problem are interreducible, so that higher-order MSL can be seen as a constraint-based approach to higher-order model checking. Finally, we describe an implementation of our decision procedure and its application to verified socket programming.
C1 [Jochems, Jerome; Jones, Eddie; Ramsay, Steven] Univ Bristol, Dept Comp Sci, Bristol, Avon, England.
C3 University of Bristol
RP Jochems, J (corresponding author), Univ Bristol, Dept Comp Sci, Bristol, Avon, England.
EM jerome.jochems@bristol.ac.uk; ej16147@bristol.ac.uk;
   steven.ramsay@bristol.ac.uk
OI Ramsay, Steven/0000-0002-0825-8386; Jones, Eddie/0000-0003-1762-5405
FU Engineering and Physical Sciences Research Council [EP/T006595/1];
   National Centre for Cyber Security via the UK Research Institute in
   Verified Trustworthy Software Systems; EPSRC [EP/T006579/1,
   EP/T006595/1] Funding Source: UKRI
FX We gratefully acknowledge the support of the Engineering and Physical
   Sciences Research Council (EP/T006595/1) and the National Centre for
   Cyber Security via the UK Research Institute in Verified Trustworthy
   Software Systems. We are also very grateful for the help of the
   reviewers in making the paper more clear and accurate, and for
   suggesting related work.
CR Aiken A, 1999, SCI COMPUT PROGRAM, V35, P79, DOI 10.1016/S0167-6423(99)00007-6
   BACHMAIR L, 1993, IEEE S LOG, P75
   Broadbent Christopher H., 2013, LIPICS, V23, P129, DOI DOI 10.4230/LIPICS.CSL.2013.129
   Bruse F, 2021, FUND INFORM, V178, P1, DOI 10.3233/FI-2021-1996
   Burn TC, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470527
   Burn TC, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158099
   Charalambidis A, 2019, THEOR PRACT LOG PROG, V19, P925, DOI 10.1017/S1471068419000279
   Clairambault P, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158127
   Cook B, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P265
   Farka Frantisek, 2020, THESIS HERIOT WATT U
   Fruhwirth T., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P300, DOI 10.1109/LICS.1991.151654
   Fu P, 2017, FORM ASP COMPUT, V29, P453, DOI 10.1007/s00165-016-0403-1
   Fu P, 2015, LECT NOTES COMPUT SC, V9527, P91, DOI 10.1007/978-3-319-27436-2_6
   Goubault-Larrecq J, 2005, INFORM PROCESS LETT, V95, P401, DOI 10.1016/j.ipl.2005.04.007
   Goubault-Larrecq J, 2002, LECT NOTES COMPUT SC, V2471, P473
   Grebenshchikov S, 2012, ACM SIGPLAN NOTICES, V47, P405, DOI 10.1145/2345156.2254112
   Hague M, 2008, IEEE S LOG, P452, DOI 10.1109/LICS.2008.34
   Haskell.org, 2013, IT I O PROBL LAZ IO
   Hosoi Y, 2019, LECT NOTES COMPUT SC, V11893, P136, DOI 10.1007/978-3-030-34175-6_8
   Howard William, 1980, HB CURRY ESSAYS COMB
   Jerome Jochems, 2020, THESIS OXFORD U UK
   Jhala Ranjit, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P470, DOI 10.1007/978-3-642-22110-1_38
   Jochems J, 2022, Arxiv, DOI [arXiv:2210.14649, 10.48550/ARXIV.2210.14649, DOI 10.48550/ARXIV.2210.14649]
   Kobayashi N, 2021, Arxiv, DOI [arXiv:2109.04629, 10.4204/EPTCS.344.1, DOI 10.4204/EPTCS.344.1]
   Kobayashi N, 2013, J ACM, V60, DOI 10.1145/2487241.2487246
   Kobayashi N, 2009, IEEE S LOG, P179, DOI 10.1109/LICS.2009.29
   Kobayashi N, 2009, ACM SIGPLAN NOTICES, V44, P416, DOI 10.1145/1594834.1480933
   MILLER D, 1991, ANN PURE APPL LOGIC, V51, P125, DOI 10.1016/0168-0072(91)90068-W
   Miller D., 2012, Programming with Higher-Order Logic, V1st ed., DOI DOI 10.1017/CBO9781139021326
   Mokhov A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341694
   MULLER DE, 1987, THEOR COMPUT SCI, V54, P267, DOI 10.1016/0304-3975(87)90133-2
   Nagaya T, 2002, INFORM COMPUT, V178, P499, DOI 10.1006/inco.2002.3157
   Neatherway RP, 2012, ACM SIGPLAN NOTICES, V47, P353, DOI 10.1145/2398856.2364578
   Nielson F, 2002, LECT NOTES COMPUT SC, V2477, P20
   Ong CHL, 2006, IEEE S LOG, P81, DOI 10.1109/LICS.2006.38
   Ong CHL, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785784
   Peng Fu, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P126, DOI 10.1007/978-3-319-29604-3_9
   Ramsay SJ, 2014, ACM SIGPLAN NOTICES, V49, P61, DOI 10.1145/2535838.2535873
   Rehof J, 2011, LECT NOTES COMPUT SC, V6690, P169, DOI 10.1007/978-3-642-21691-6_15
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Salvati S, 2016, MATH STRUCT COMP SCI, V26, P1304, DOI 10.1017/S0960129514000590
   Terao Taku, 2014, Programming Languages and Systems. 12th Asian Symposium (APLAS 2014), Proceedings: LNCS 8858, P354, DOI 10.1007/978-3-319-12736-1_19
   Terauchi T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1706299.1706315
   Teucke A, 2017, LECT NOTES ARTIF INT, V10395, P202, DOI 10.1007/978-3-319-63046-5_13
   Unno H, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P277, DOI 10.1145/1599410.1599445
   Vazou N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P48, DOI 10.1145/2784731.2784745
   Vazou N, 2013, LECT NOTES COMPUT SC, V7792, P209, DOI 10.1007/978-3-642-37036-6_13
   Viswanathan M, 2004, LECT NOTES COMPUT SC, V3170, P512
   Weidenbach C., 1999, Automated Deduction - CADE-16. 16th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.1632), P314
   Zhu H, 2013, LECT NOTES COMPUT SC, V7737, P295
NR 50
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571262
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500069
OA gold, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Lu, SR
   Bodík, R
AF Lu, Sirui
   Bodik, Rastislav
TI Grisette: Symbolic Compilation as a Functional Programming Library
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Symbolic Compilation; State Merging
ID EFFICIENT; EXECUTION; SOLVER
AB The development of constraint solvers simplified automated reasoning about programs and shifted the engineering burden to implementing symbolic compilation tools that translate programs into efficiently solvable constraints. We describe Grisette, a reusable symbolic evaluation framework for implementing domain-specific symbolic compilers. Grisette evaluates all execution paths and merges their states into a normal form that avoids making guards mutually exclusive. This ordered-guards representation reduces the constraint size 5-fold and the solving time more than 2-fold. Grisette is designed entirely as a library, which sidesteps the complications of lifting the host language into the symbolic domain. Grisette is purely functional, enabling memoization of symbolic compilation as well as monadic integration with host libraries. Grisette is statically typed, which allows catching programming errors at compile time rather than delaying their detection to the constraint solver. We implemented Grisette in Haskell and evaluated it on benchmarks that stress both the symbolic evaluation and constraint solving.
C1 [Lu, Sirui] Univ Washington, Paul G Allen Sch, Seattle, WA 98195 USA.
   [Bodik, Rastislav] Google Res, Mountain View, CA USA.
C3 University of Washington; University of Washington Seattle; Google
   Incorporated
RP Lu, SR (corresponding author), Univ Washington, Paul G Allen Sch, Seattle, WA 98195 USA.
EM siruilu@uw.edu; rastislavb@google.com
OI Lu, Sirui/0000-0003-2757-7603
FU National Science Foundation (NSF) [2132318, 2122950, 2029457, 1936731,
   1918027, 1924435]; Intel [1723352]; National Science Foundation
   [1723352]; CONIX Research Center, one of six centers in JUMP, a
   Semiconductor Research Corporation (SRC) program - DARPA [CMU
   1042741-394324 AM01]; DARPA [FA8750-16-2-0032]; Direct For Computer &
   Info Scie & Enginr; Division of Computing and Communication Foundations
   [1918027, 1723352, 2122950] Funding Source: National Science Foundation;
   Direct For Computer & Info Scie & Enginr; Div Of Information &
   Intelligent Systems [1924435] Funding Source: National Science
   Foundation; Dir for Tech, Innovation, & Partnerships; Innovation and
   Technology Ecosystems [2132318, 2029457] Funding Source: National
   Science Foundation; Office of Integrative Activities; Office Of The
   Director [1936731] Funding Source: National Science Foundation
FX We thank the anonymous reviewers for a careful assessment of the work
   and very useful comments. This work has been supported in part by the
   National Science Foundation (NSF) awards No. 2132318, 2122950, 2029457,
   1936731, 1918027, 1924435, the Intel and National Science Foundation
   joint research center for Computer Assisted Programming for
   Heterogeneous Architectures (CAPA) under Grant No. 1723352, the CONIX
   Research Center, one of six centers in JUMP, a Semiconductor Research
   Corporation (SRC) program sponsored by DARPA CMU 1042741-394324 AM01, a
   grant DARPA FA8750-16-2-0032, as well as gifts from Adobe, Facebook,
   Google, Intel, and Qualcomm.
CR Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   [Anonymous], 2013, P 2013 9 JOINT M FDN, DOI [10.1145/2491411.2491447, DOI 10.1145/2491411.2491447]
   [Anonymous], 2012, P ACM SIGSOFT 20 INT, DOI DOI 10.1145/2393596.2393667
   Asanovic Krste, 2014, Instruction sets should be free: the case for risc-v. Tech. Rep. UCB/EECS-2014-146
   Avgerinos T, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1083, DOI 10.1145/2568225.2568293
   Baldoni R, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3182657
   Barnett Mike., 2004, SPEC PROGRAMMING SYS, P49, DOI [10.1007/978-3-540-30569-9_3, DOI 10.1007/978-3-540-30569-9_3]
   Blanc Regis., 2013, VERIFICATION TRANSLA
   Bornholt J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276519
   Bornholt J, 2016, ACM SIGPLAN NOTICES, V51, P83, DOI 10.1145/2954679.2872406
   Boyer R. S., 1975, SIGPLAN Notices, V10, P234, DOI 10.1145/390016.808445
   BRUIJN NGD, 1972, P K NED AKAD A MATH, V75, P381
   Brummayer R, 2009, LECT NOTES COMPUT SC, V5505, P174, DOI 10.1007/978-3-642-00768-2_16
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Cadar C, 2008, ACM T INFORM SYST SE, V12, DOI 10.1145/1455518.1455522
   Chandra K, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158150
   Chu S., 2017, P CIDR
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Darais D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110256
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   De Moura L, 2011, COMMUN ACM, V54, P69, DOI 10.1145/1995376.1995394
   Dennis Greg, 2006, ISSTA, P109, DOI [10.1145/1146238.1146251, DOI 10.1145/1146238.1146251]
   Dolby Julian, 2007, P 6 JOINT M EUR SOFT, P195
   Elliott C, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110271
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Godefroid P, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P47
   Hallahan WT, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '19), P44, DOI 10.1145/3331545.3342590
   Hallahan WT, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P411, DOI 10.1145/3314221.3314618
   Hansen T, 2009, LECT NOTES COMPUT SC, V5779, P76, DOI 10.1007/978-3-642-04694-0_6
   Havelund K., 2000, Int. J. Softw. Tools Technol. Transfer, V2, P366, DOI [DOI 10.1007/S100090050043, 10.1007/s100090050043]
   Hermaszewski Joe, 2021, VECTOR SIZED
   James Cornelius King, 1969, THESIS
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   King J. C., 1975, Programming Methodology, P278, DOI 10.1145/390016.808444
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Kiselyov O, 2013, ACM SIGPLAN NOTICES, V48, P59, DOI 10.1145/2503778.2503791
   Kiselyov Oleg, 2013, EFFICIENT SET MONAD
   Köksal AS, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P151
   Kuznetsov V, 2012, ACM SIGPLAN NOTICES, V47, P193, DOI 10.1145/2345156.2254088
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Leino KRM, 2010, LECT NOTES COMPUT SC, V6015, P312, DOI 10.1007/978-3-642-12002-2_26
   Mechtaev S, 2016, PROC INT CONF SOFTW, P691, DOI 10.1145/2884781.2884807
   Mensing A D., 2019, Proceedings of the 4th ACM SIGPLAN International Workshop on Meta-Programming Techniques and Reflection, P11, DOI [DOI 10.1145/3358502.3361269, 10.1145/3358502.3361269]
   Nelson L, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P225, DOI 10.1145/3341301.3359641
   Porncharoenwase S, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498709
   Rudell R.L., 1986, Multiple-Valued Logic Minimization for PLA Synthesis
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sculthorpe N, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2544174.2500602
   Sen K, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P842, DOI 10.1145/2786805.2786830
   Sharma V, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P123, DOI 10.1145/3368089.3409734
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Sinha N, 2008, 2008 FORMAL METHODS IN COMPUTER-AIDED DESIGN, P144
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Solarlezama Armando, 2008, PROGRAM SYNTHESIS SK
   Stewart Don, 2021, BYTESTRING
   TOFTE M, 1990, INFORM COMPUT, V89, P1, DOI 10.1016/0890-5401(90)90018-D
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Torlak Emina, 2013, P 2013 ACM INT S NEW, P135, DOI DOI 10.1145/2509578.2509586
   Torlak Emina., 2016, UNSOUND BEHAV
   Torlak Emina., 2021, USE EARLY RETURN ROS
   Torlak Emina, 2022, DEBUGGING ROSETTE GU
   Uhler Richard, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P678, DOI 10.1007/978-3-642-39799-8_45
   Uhler R, 2014, ACM SIGPLAN NOTICES, V49, P157, DOI [10.1145/2660193.2660208, 10.1145/2714064.2660208]
   Wei GN, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428232
   Willsey M, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P183, DOI 10.1145/3297858.3304027
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Wu N, 2015, LECT NOTES COMPUT SC, V9129, P302, DOI 10.1007/978-3-319-19797-5_15
   Wu Nicolas, 2022, FUSED EFFECTS
   Xie Yichen., 2005, ACM SIGPLAN NOTICES, P351, DOI DOI 10.1145/1047659.1040334
NR 70
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571209
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500016
OA gold
DA 2024-07-18
ER

PT J
AU Michael, AE
   Gollamudi, A
   Bosamiya, J
   Johnson, E
   Denlinger, A
   Disselkoen, C
   Watt, C
   Parno, B
   Patrignani, M
   Vassena, M
   Stefan, D
AF Michael, Alexandra E.
   Gollamudi, Anitha
   Bosamiya, Jay
   Johnson, Evan
   Denlinger, Aidan
   Disselkoen, Craig
   Watt, Conrad
   Parno, Bryan
   Patrignani, Marco
   Vassena, Marco
   Stefan, Deian
TI MSWasm: Soundly Enforcing Memory-Safe Execution of Unsafe Code
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE WebAssembly; Memory-safety; Semantics; Secure Compilation
AB Most programs compiled to WebAssembly (Wasm) today are written in unsafe languages like C and C++. Unfortunately, memory-unsafe C code remains unsafe when compiled to Wasm-and attackers can exploit buffer overflows and use-after-frees in Wasm almost as easily as they can on native platforms. MemorySafe WebAssembly (MSWasm) proposes to extend Wasm with language-level memory-safety abstractions to precisely address this problem. In this paper, we build on the original MSWasm position paper to realize this vision. We give a precise and formal semantics of MSWasm, and prove that well-typed MSWasm programs are, by construction, robustly memory safe. To this end, we develop a novel, language-independent memorysafety property based on colored memory locations and pointers. This property also lets us reason about the security guarantees of a formal C-to-MSWasm compiler-and prove that it always produces memory-safe programs (and preserves the semantics of safe programs). We use these formal results to then guide several implementations: Two compilers of MSWasm to native code, and a C-to-MSWasm compiler (that extends Clang). Our MSWasm compilers support different enforcement mechanisms, allowing developers to make security-performance trade-offs according to their needs. Our evaluation shows that on the PolyBenchC suite, the overhead of enforcing memory safety in software ranges from 22% (enforcing spatial safety alone) to 198% (enforcing full memory safety), and 51.7% when using hardware memory capabilities for spatial safety and pointer integrity.
   More importantly, MSWasm's design makes it easy to swap between enforcement mechanisms; as fast (especially hardware-based) enforcement techniques become available, MSWasm will be able to take advantage of these advances almost for free.
C1 [Michael, Alexandra E.; Johnson, Evan; Denlinger, Aidan; Disselkoen, Craig; Stefan, Deian] UCSD, La Jolla, CA 92093 USA.
   [Michael, Alexandra E.] Univ Washington, Seattle, WA 98195 USA.
   [Gollamudi, Anitha] Univ Massachusetts Lowell, Lowell, MA USA.
   [Bosamiya, Jay; Parno, Bryan] CMU, Pittsburgh, PA USA.
   [Johnson, Evan] Arm Ltd, San Jose, CA USA.
   [Watt, Conrad] Univ Cambridge, Cambridge, England.
   [Patrignani, Marco] Univ Trento, Trento, Italy.
   [Vassena, Marco] Univ Utrecht, Utrecht, Netherlands.
C3 University of California System; University of California San Diego;
   University of Washington; University of Washington Seattle; University
   of Massachusetts System; University of Massachusetts Lowell; Carnegie
   Mellon University; University of Cambridge; University of Trento;
   Utrecht University
RP Michael, AE (corresponding author), UCSD, La Jolla, CA 92093 USA.; Michael, AE (corresponding author), Univ Washington, Seattle, WA 98195 USA.
RI Johnson, Evan/AAC-1053-2021
OI Michael, Alexandra/0000-0002-0305-5424; Gollamudi,
   Anitha/0000-0002-0861-1418; Vassena, Marco/0000-0002-4795-0236;
   Disselkoen, Craig/0000-0003-4358-2963; Bosamiya,
   Jay/0000-0002-5596-6828; Patrignani, Marco/0000-0003-3411-9678; Watt,
   Conrad/0000-0002-0596-877X; Parno, Bryan/0000-0002-9113-1684
CR Abate C, 2019, P IEEE COMPUT SECUR, P256, DOI 10.1109/CSF.2019.00025
   Akritidis Periklis, 2009, USENIX SEC S, V10
   [Anonymous], 2014, WHAT IS MEMORY SAFET
   [Anonymous], 1996, Phrack Magazine
   ARM, 2022, ARM MOR PROGR
   Arm, 2019, CISC VIS NETW IND GL
   AUSTIN TM, 1994, SIGPLAN NOTICES, V29, P290, DOI 10.1145/773473.178446
   Bosamiya Jay., 2022, USENIX SECURITY S
   CTSRD-CHERI, 2022, CHERI LLVM COMP INFR
   Dang THY, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P815
   de Amorim AA, 2018, LECT NOTES COMPUT SC, V10804, P79, DOI 10.1007/978-3-319-89722-6_4
   de Amorim AA, 2015, P IEEE S SECUR PRIV, P813, DOI 10.1109/SP.2015.55
   Devietti J, 2008, ACM SIGPLAN NOTICES, V43, P103, DOI 10.1145/1353536.1346295
   Disselkoen C, 2019, PROCEEDINGS OF THE 8TH INTERNATIONAL WORKSHOP ON HARDWARE AND ARCHITECTURAL SUPPORT FOR SECURITY AND PRIVACY, HASP '19, DOI 10.1145/3337167.3337171
   Filardo NW, 2020, P IEEE S SECUR PRIV, P608, DOI 10.1109/SP40000.2020.00098
   Gadepalli Phani Kishore, 2020, P 21 INT MIDDLEWARE
   Grisenthwaite Richard, 2019, SUPP UK BEC LEAD GLO
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   Haller Istvan, 2016, C COMP COMM SEC ACM
   Hilbig A., 2021, EMPIRICAL STUDY REAL
   Jangda A, 2019, PROCEEDINGS OF THE 2019 USENIX ANNUAL TECHNICAL CONFERENCE, P107
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   Kroes T, 2018, EUROSYS '18: PROCEEDINGS OF THE THIRTEENTH EUROSYS CONFERENCE, DOI 10.1145/3190508.3190553
   Kwon Albert., 2013, P 2013 ACM SIGSAC C
   Lee B, 2015, 22ND ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2015), DOI 10.14722/ndss.2015.23238
   Lehmann D, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P217
   LeMay Michael, 2021, IEEE ACM INT S MICRO
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Liljestrand H, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P177
   McMullen Tyler, 2020, LUCET COMPILER RUNTI
   Memarian K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290380
   Memarian K, 2016, ACM SIGPLAN NOTICES, V51, P1, DOI [10.1145/2908080.2908081, 10.1145/2980983.2908081]
   MSWasm, MEM SAF WEBASSEMBLY
   MSWasm, 2023, REPR PACK MSWASM SOU, DOI [10.1145/3554344, DOI 10.1145/3554344]
   Nagarakatte S, 2010, ACM SIGPLAN NOTICES, V45, P31
   Nagarakatte S, 2009, ACM SIGPLAN NOTICES, V44, P245, DOI 10.1145/1543135.1542504
   Narayan S, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P699
   Necula GC, 2005, ACM T PROGR LANG SYS, V27, P477, DOI 10.1145/1065887.1065892
   Oleksenko Oleksii, 2018, ACM SIGMETRICS Performance Evaluation Review, V46, P111, DOI 10.1145/3292040.3219662
   Oracle, 2021, TRUFFL LANG IMPL FRA
   Oracle, 2021, GraalVM
   Parkinson Matthew, 2017, MSRTR201732 NET MICR
   Patil H, 1997, SOFTWARE PRACT EXPER, V27, P87, DOI 10.1002/(SICI)1097-024X(199701)27:1<87::AID-SPE78>3.0.CO;2-P
   Peach G, 2020, IEEE T COMPUT AID D, V39, P3492, DOI 10.1109/TCAD.2020.3012647
   Pouchet Louis-Noel, 2011, POLYBENCH C POLYHEDR
   Prokopec A., 2019, Announcing GraalWasm-a WebAssembly engine in GraalVM
   Ruef Andrew, 2019, Principles of Security and Trust. 8th International Conference, POST 2019. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2019. Proceedings: Lecture Notes in Computer Science (11426), P76, DOI 10.1007/978-3-030-17138-4_4
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   Szekeres L, 2013, P IEEE S SECUR PRIV, P48, DOI 10.1109/SP.2013.13
   Tan Gang, 2017, Privacy and Security, V1, P137
   Wahbe R., 1993, Operating Systems Review, V27, P203, DOI 10.1145/173668.168635
   Watson RNM, 2015, P IEEE S SECUR PRIV, P20, DOI 10.1109/SP.2015.9
   WebAssembly, WEBASSEMBLY SYST INT
   Wei Xu, 2004, Software Engineering Notes, V29, P117, DOI 10.1145/1041685.1029913
   Xia HY, 2019, MICRO'52: THE 52ND ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, P545, DOI 10.1145/3352460.3358288
NR 55
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571208
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500015
OA gold, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Chou, S
   Amarasinghe, S
AF Chou, Stephen
   Amarasinghe, Saman
TI Compilation of Dynamic Sparse Tensor Algebra
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE dynamic sparse tensors; sparse tensor formats; pointer-based data
   structures; sparse tensor algebra; sparse tensor algebra compilation;
   node schema language
ID FRAMEWORK
AB Many applications, from social network graph analytics to control flow analysis, compute on sparse data that evolves over the course of program execution. Such data can be represented as dynamic sparse tensors and efficiently stored in formats (data layouts) that utilize pointer-based data structures like block linked lists, binary search trees, B-trees, and C-trees among others. These specialized formats support fast in-place modification and are thus better suited than traditional, array-based data structures like CSR for storing dynamic sparse tensors. However, different dynamic sparse tensor formats have distinct benefits and drawbacks, and performing different computations on tensors that are stored in different formats can require vastly dissimilar code that are not straightforward to correctly implement and optimize.
   This paper shows how a compiler can generate efficient code to compute tensor algebra operations on dynamic sparse tensors that may be stored in a wide range of disparate formats. We propose a language for precisely specifying recursive, pointer-based data structures, and we show how this language can express many different dynamic data structures, including all the ones named above as well as many more. We then describe how, given high-level specifications of such dynamic data structures, a compiler can emit code to efficiently access and compute on dynamic sparse tensors that are stored in the aforementioned data structures.
   We evaluate our technique and find it generates efficient dynamic sparse tensor algebra kernels that have performance comparable to, if not better than, state-of-the-art libraries and frameworks such as PAM, Aspen, STINGER, and Terrace. At the same time, our technique supports a wider range of tensor algebra operations-such as those that simultaneously compute with static and dynamic sparse tensors-than Aspen, STINGER, and Terrace, while also achieving significantly better performance than PAM for those same operations.
C1 [Chou, Stephen; Amarasinghe, Saman] MIT CSAIL, 32-G778,32 Vassar St, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Chou, S (corresponding author), MIT CSAIL, 32-G778,32 Vassar St, Cambridge, MA 02139 USA.
EM s3chou@csail.mit.edu; saman@csail.mit.edu
OI Amarasinghe, Saman/0000-0002-7231-7643; /0000-0002-5048-7131
FU Application Driving Architectures (ADA) Research Center, a JUMP Center -
   SRC; DARPA [HR0011-18-3-0007, HR0011-20-9-0017]; U.S. Department of
   Energy, Office of Science, Office of Advanced Scientific Computing
   Research [DE-SC0008923, DE-SC0018121]
FX We thank the anonymous reviewers for their helpful reviews and
   suggestions. This work was supported by the Application Driving
   Architectures (ADA) Research Center, a JUMP Center co-sponsored by SRC
   and DARPA; the U.S. Department of Energy, Office of Science, Office of
   Advanced Scientific Computing Research under Award Numbers DE-SC0008923
   and DE-SC0018121; and DARPA under Awards HR0011-18-3-0007 and
   HR0011-20-9-0017. Any opinions, findings, and conclusions or
   recommendations expressed in this material are those of the authors and
   do not necessarily reflect the views of the aforementioned funding
   agencies.
CR Aart JC Bik, 1996, Ph. D. Dissertation
   Acer S, 2016, PARALLEL COMPUT, V59, P71, DOI 10.1016/j.parco.2016.10.001
   Arnold G, 2010, ACM SIGPLAN NOTICES, V45, P249, DOI 10.1145/1932681.1863581
   Awad MA, 2020, INT PARALL DISTRIB P, P739, DOI 10.1109/IPDPS47924.2020.00081
   Azad A, 2017, INT PARALL DISTRIB P, P688, DOI 10.1109/IPDPS.2017.76
   Bell N., 2008, NVIDIA Technical Report NVR-2008-004
   Bik A. J., 1993, P 7 INT C SUP, P416
   Bik A. J. C., 1994, Languages and Compilers for Parallel Computing. 6th International Workshop Proceedings, P57
   Bik A, 2022, ACM T ARCHIT CODE OP, V19, DOI 10.1145/3544559
   Busato F, 2018, IEEE HIGH PERF EXTR
   Cheng Raymond, 2012, P 7 ACM EUR C COMP S, P85, DOI 10.1145/2168836.2168846
   Chou S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P823, DOI 10.1145/3385412.3385963
   Chou S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276493
   Cormen T. H., 2009, Introduction to Algorithms, VSecond
   Davis TA, 2011, ACM T MATH SOFTWARE, V38, DOI 10.1145/2049662.2049670
   Dhulipala L, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P918, DOI 10.1145/3314221.3314598
   Ediger D, 2012, IEEE HIGH PERF EXTR
   Guennebaud G., 2010, Eigen
   Hawkins P, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P38
   Henry R, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485505
   Hong CW, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P300, DOI 10.1145/3293883.3295712
   intel, 2020, Intel oneAPI Math Kernel Library
   Jiajia Li, 2018, SC18: International Conference for High Performance Computing, Networking, Storage and Analysis. Proceedings, P238, DOI 10.1109/SC.2018.00022
   King J, 2016, LECT NOTES COMPUT SC, V9697, P61, DOI 10.1007/978-3-319-41321-1_4
   Kjolstad F, 2019, INT SYM CODE GENER, P180, DOI [10.1109/cgo.2019.8661185, 10.1109/CGO.2019.8661185]
   Kjolstad F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133901
   Kneuss E, 2013, ACM SIGPLAN NOTICES, V48, P407, DOI [10.1145/2509136.2509555, 10.1145/2544173.2509555]
   Kotlyar V., 1997, Euro-Par '97 Parallel Processing. Third International Euro-Par Conference. Proceedings, P318
   Kotlyar Vladimir, 1999, Ph. D. Dissertation.
   Kumar P, 2019, PROCEEDINGS OF THE 17TH USENIX CONFERENCE ON FILE AND STORAGE TECHNOLOGIES, P249
   Kurilova D, 2014, ACM SIGPLAN NOTICES, V49, P155, DOI [10.1145/2637365.2517225, 10.1145/2517208.2517225]
   Lechman T. J., 1986, Proceedings of Very Large Data Bases. Twelfth International Conference on Very Large Data Bases, P294
   Liu WF, 2015, PROCEEDINGS OF THE 29TH ACM INTERNATIONAL CONFERENCE ON SUPERCOMPUTING (ICS'15), P339, DOI 10.1145/2751205.2751209
   Macko P, 2015, PROC INT CONF DATA, P363, DOI 10.1109/ICDE.2015.7113298
   Mattson T, 2013, IEEE HIGH PERF EXTR
   Monakov A, 2010, LECT NOTES COMPUT SC, V5952, P111, DOI 10.1007/978-3-642-11515-8_10
   Page L., 1999, PAGERANK CITATION RA
   Pandey P, 2021, INT CONF MANAGE DATA, P1372, DOI 10.1145/3448016.3457313
   Park J, 2017, Arxiv, DOI arXiv:1608.01409
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Pugh W, 1999, LECT NOTES COMPUT SC, V1656, P213, DOI 10.1007/3-540-48319-5_14
   Qiu XK, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133889
   Rajbhandari S, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P267, DOI 10.1145/3037697.3037745
   Rayside D, 2013, ACM SIGPLAN NOTICES, V48, P31, DOI 10.1145/2480361.2371407
   Saad Yousef., 2003, Iterative Methods for Sparse Linear Systems
   Sengupta D, 2017, LECT NOTES COMPUT SC, V10266, P97, DOI 10.1007/978-3-319-58667-0_6
   Sha M, 2017, PROC VLDB ENDOW, V11, P107, DOI 10.14778/3151113.3151122
   Shun JL, 2013, ACM SIGPLAN NOTICES, V48, P135, DOI 10.1145/2517327.2442530
   Singh Rishabh, 2011, FSE, P289, DOI DOI 10.1145/2025113.2025153
   Smith S, 2015, INT PARALL DISTRIB P, P61, DOI 10.1109/IPDPS.2015.27
   Smith SC, 2015, WILSON-JOHNSON CORRESPONDENCE, 1964-69, P1
   Stodghill P. V., 1997, A relational approach to the automatic generation of sequential sparse matrix codes
   Sun YH, 2018, ACM SIGPLAN NOTICES, V53, P290, DOI 10.1145/3200691.3178509
   Tian RQ, 2021, Arxiv, DOI [arXiv:2102.05187, 10.48550/ARXIV.2102.05187, DOI 10.48550/ARXIV.2102.05187]
   Venkat A, 2015, ACM SIGPLAN NOTICES, V50, P521, DOI [10.1145/2813885.2738003, 10.1145/2737924.2738003]
   Winter M, 2017, IEEE HIGH PERF EXTR
   Xie BW, 2018, INT SYM CODE GENER, P149, DOI 10.1145/3168818
   Zhang YM, 2017, IEEE INT CONF BIG DA, P293, DOI 10.1109/BigData.2017.8257937
NR 58
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 175
DI 10.1145/3563338
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200052
OA gold
DA 2024-07-18
ER

PT J
AU Zhao, ZH
   Beillahi, SM
   Song, R
   Cai, YX
   Veneris, A
   Long, F
AF Zhao, Zihan
   Beillahi, Sidi Mohamed
   Song, Ryan
   Cai, Yuxi
   Veneris, Andreas
   Long, Fan
TI SigVM: Enabling Event-Driven Execution for Truly Decentralized Smart
   Contracts
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Blockchain; Smart Contracts; Event-Driven; Virtual Machine
AB This paper presents SigVM, the first blockchain virtual machine that extends EVM to support an event-driven execution model, enabling developers to build truly decentralized smart contracts. Contracts in SigVM can emit signal events, on which other contracts can listen. Once an event is triggered, corresponding handler functions are automatically executed as signal transactions. We build an end-to-end blockchain platform SigChain and a contract language compiler SigSolid to realize the potential of SigVM. Experimental results show that our benchmark applications can be reimplemented with SigVM in a truly decentralized way, eliminating the dependency on centralized and unreliable mechanisms like off-chain relay servers. The development effort of reimplementing these contracts with SigVM is small, i.e., we modified on average 3.17% of the contract code. The runtime and the gas overhead of SigVM on these contracts is negligible.
C1 [Zhao, Zihan; Beillahi, Sidi Mohamed; Song, Ryan; Cai, Yuxi; Veneris, Andreas; Long, Fan] Univ Toronto, Toronto, ON, Canada.
C3 University of Toronto
RP Zhao, ZH (corresponding author), Univ Toronto, Toronto, ON, Canada.
EM simon.zhao@mail.utoronto.ca; sm.beillahi@utoronto.ca;
   r.song@mail.utoronto.ca; yuxijune.cai@mail.utoronto.ca;
   veneris@eecg.utoronto.ca; fanl@cs.toronto.edu
OI Long, Fan/0000-0001-7973-1188; Veneris, Andreas/0000-0002-6309-8821
CR Antonopoulos A. M., 2017, Mastering Bitcoin: Programming the Open Blockchain, V2nd
   Bhargavan K, 2016, PROCEEDINGS OF THE 2016 ACM WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS'16), P91, DOI 10.1145/2993600.2993611
   Blackshear Sam, 2020, Move: A Language With Programmable Resources
   Buterin V., 2014, CISC VIS NETW IND GL, V3, P1, DOI DOI 10.1145/2939672.2939785
   Buterin Vitalik, 2015, EIP-20: ERC-20 Token Standard," Ethereum Improvement Proposals.
   Buterin Vitalik, 2019, Fee Market Change for ETH 1.0 Chain
   ChainLink, 2020, ChainLink: Using Price Feeds
   Coblenz M, 2019, Arxiv, DOI arXiv:1909.03523
   Conflux Network, 2021, Conflux-Rust
   Das A, 2021, P IEEE COMPUT SECUR, P109, DOI 10.1109/CSF51468.2021.00004
   Denoeud Corentin., 2020, What Is A Transaction Relayer And How Does It Work?
   Ethereum, 2020, The Solidity Contract-Oriented Programming Language
   Etherscan, 2021, The Ethereum Blockchain Explorer
   Hildenbrandt E, 2018, P IEEE COMPUT SECUR, P204, DOI 10.1109/CSF.2018.00022
   Kalra S, 2018, 25TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2018), DOI 10.14722/ndss.2018.23082
   Leshner Robert, 2019, White Paper
   Li A, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P438, DOI 10.1145/3385412.3385982
   Li C, 2020, 2020 IEEE 13TH INTERNATIONAL CONFERENCE ON WEB SERVICES (ICWS 2020), P9, DOI 10.1109/ICWS49710.2020.00009
   Li CX, 2020, PROCEEDINGS OF THE 2020 USENIX ANNUAL TECHNICAL CONFERENCE, P515
   Luu L, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P254, DOI 10.1145/2976749.2978309
   nernity dev team, 2020, The Sophia Language
   Nikolic I, 2018, 34TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2018), P653, DOI 10.1145/3274694.3274743
   O'Connor R, 2017, PROCEEDINGS OF THE 2017 WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS' 17), P107, DOI 10.1145/3139337.3139340
   OCamlPRO, 2020, Liquidity Documentation
   Oved Michael, 2017, Swap: A Peer-to-Peer Protocol for Trading Ethereum Tokens
   Permenev A, 2020, P IEEE S SECUR PRIV, P1661, DOI 10.1109/SP40000.2020.00024
   Peterson Jack, 2019, Augur: a decentralized oracle and prediction market platform (v2. 0)
   Planet Ethereum, 2018, Ethbase
   provable.xyz, 2019, Provable: Ethereum Quick Start
   RChain Cooperative, 2019, Rholang
   Sekniqi Kevin, 2020, Avalanche Platform
   Sergey I, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360611
   Sjöberg V, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360562
   The Maker Foundation, 2019, The Maker Protocol: MakerDAO's Multi-Collateral Dai (MCD) System
   The Maker Foundation, 2020, The Market Collapse of March 12-13, 2020: How It Impacted MakerDAO
   The Near Foundation, 2021, The NEAR White Paper
   Vyper Team, 2020, Vyper
   Zhao Zihan, 2022, Zenodo, DOI 10.5281/ZENODO.6885003
   Zhao ZH, 2021, Arxiv, DOI arXiv:2102.10784
NR 39
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 149
DI 10.1145/3563312
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200026
OA gold
DA 2024-07-18
ER

PT J
AU Zhu, FM
   Sammler, M
   Lepigre, R
   Dreyer, D
   Garg, D
AF Zhu, Fengmin
   Sammler, Michael
   Lepigre, Rodolphe
   Dreyer, Derek
   Garg, Deepak
TI BFF: Foundational and Automated Verification of Bitfield-Manipulating
   Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE bitfield manipulation; bit vectors; C programming language; refinement
   types; proof automation; Coq; Iris
AB Low-level systems code often needs to interact with data, such as page table entries or network packet headers, in which multiple pieces of information are packaged together as bitfield components of a single machine integer and accessed via bitfield manipulations (e.g., shifts and masking). Most existing approaches to verifying such code employ SMT solvers, instantiated with theories for bit vector reasoning: these provide a powerful hammer, but also significantly increase the trusted computing base of the verification toolchain.
   In this work, we propose an alternative approach to the verification of bitfield-manipulating systems code, which we call BFF. Building on the RefinedC framework, BFF is not only highly automated (as SMT-based approaches are) but also foundationalDi.e., it produces a machine-checked proof of program correctness against a formal semantics for C programs, fully mechanized in Coq. Unlike SMT-based approaches, we do not try to solve the general problem of arbitrary bit vector reasoning, but rather observe that real systems code typically accesses bitfields using simple, well-understood programming patterns: the layout of a bit vector is known up front, and its bitfields are accessed in predictable ways through a handful of bitwise operations involving bit masks. Correspondingly, we center our approach around the concept of a structured bit vector-i.e., a bit vector with a known bitfield layout-which we use to drive simple and predictable automation. We validate the BFF approach by verifying a range of bitfield-manipulating C functions drawn from real systems code, including page table manipulation code from the Linux kernel and the pKVM hypervisor.
C1 [Zhu, Fengmin; Sammler, Michael; Lepigre, Rodolphe; Dreyer, Derek; Garg, Deepak] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
RP Zhu, FM (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
EM paulzhu@mpi-sws.org; msammler@mpi-sws.org; lepigre@mpi-sws.org;
   dreyer@mpi-sws.org; dg@mpi-sws.org
OI Dreyer, Derek/0000-0002-3884-6867; Zhu, Fengmin/0000-0003-4219-0837
FU European Research Council (ERC) under the European Union [683289];
   Google PhD Fellowship; Android Security's ASPIRE program; Google
   Research
FX This research was supported in part by a European Research Council (ERC)
   Consolidator Grant for the project "RustBelt", funded under the European
   Union's Horizon 2020 Framework Programme (grant agreement no. 683289),
   in part by a Google PhD Fellowship (Sammler), and in part by awards from
   Android Security's ASPIRE program and from Google Research.
CR Ahmed A, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709094
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Barrett Clark, 2010, P 8 INT WORKSH SAT M
   Bohme Sascha, 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P183
   Bouton T, 2009, LECT NOTES ARTIF INT, V5663, P151, DOI 10.1007/978-3-642-02959-2_12
   Brummayer R, 2009, LECT NOTES COMPUT SC, V5505, P174, DOI 10.1007/978-3-642-00768-2_16
   Cimatti A, 2013, LECT NOTES COMPUT SC, V7795, P93
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Moura Leonardo Mendonca, 2008, CEUR Workshop Proceedings, V418
   Deacon Will, 2020, Virtualization for the Masses: Exposing KVM on Android
   Dross Claire, 2015, Ph. D. Dissertation
   Dutertre B, 2006, TOOL PAPER
   Edge Jake, 2020, KVM for Android
   Ekici B, 2017, LECT NOTES COMPUT SC, V10427, P126, DOI 10.1007/978-3-319-63390-9_7
   Jhala Ranjit, 2006, SIGSOFT FSE, P128, DOI [10.1145/1181775.1181791, DOI 10.1145/1181775.1181791]
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Lepigre R, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498681
   Lochbihler A, 2018, LECT NOTES COMPUT SC, V10895, P388, DOI 10.1007/978-3-319-94821-8_23
   Mansur MN, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P701, DOI 10.1145/3368089.3409763
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Park J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485529
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   Shi XM, 2021, LECT NOTES COMPUT SC, V12760, P149, DOI 10.1007/978-3-030-81688-9_7
   Stump A, 2013, FORM METHOD SYST DES, V42, P91, DOI 10.1007/s10703-012-0163-3
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Swords S, 2011, ELECTRON PROC THEOR, P84, DOI 10.4204/EPTCS.70.7
   The Coqutil Team, 2022, coqutil
   The Tokei Team, 2022, Tokei
   Winterer D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428261
   Winterer D, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P718, DOI 10.1145/3385412.3385985
   Zhu Fengmin, 2022, BFF: Foundational and Automated Verification of Bitfield-Manipulating Programs (Artifact), DOI [10.5281/zenodo.7079022Repository:https://plv.mpisws.org/refinedc/bff, DOI 10.5281/ZENODO.7079022REPOSITORY:HTTPS://PLV.MPISWS.ORG/REFINEDC/BFF]
NR 33
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 182
DI 10.1145/3563345
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200059
OA gold
DA 2024-07-18
ER

PT J
AU Feldman, YMY
   Sagiv, M
   Shoham, S
   Wilcox, JR
AF Feldman, Yotam M. Y.
   Sagiv, Mooly
   Shoham, Sharon
   Wilcox, James R.
TI Property-Directed Reachability as Abstract Interpretation in the
   Monotone Theory
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE invariant inference; property-directed reachability; abstract
   interpretation; monotone theory; reachability diameter
AB Inferring inductive invariants is one of the main challenges of formal verification. The theory of abstract interpretation provides a rich framework to devise invariant inference algorithms. One of the latest breakthroughs in invariant inference is property-directed reachability (PDR), but the research community views PDR and abstract interpretation as mostly unrelated techniques.
   This paper shows that, surprisingly, propositional PDR can be formulated as an abstract interpretation algorithm in a logical domain. More precisely, we define a version of PDR, called Lambda-PDR, in which all generalizations of counterexamples are used to strengthen a frame. In this way, there is no need to refine frames after their creation, because all the possible supporting facts are included in advance. We analyze this algorithm using notions from Bshouty's monotone theory, originally developed in the context of exact learning. We show that there is an inherent overapproximation between the algorithm's frames that is related to the monotone theory. We then define a new abstract domain in which the best abstract transformer performs this overapproximation, and show that it captures the invariant inference process, i.e., Lambda-PDR corresponds to Kleene iterations with the best transformer in this abstract domain. We provide some sufficient conditions for when this process converges in a small number of iterations, with sometimes an exponential gap from the number of iterations required for naive exact forward reachability. These results provide a firm theoretical foundation for the benefits of how PDR tackles forward reachability.
C1 [Feldman, Yotam M. Y.; Sagiv, Mooly; Shoham, Sharon] Tel Aviv Univ, Tel Aviv, Israel.
   [Wilcox, James R.] Certora, San Francisco, CA USA.
C3 Tel Aviv University
RP Feldman, YMY (corresponding author), Tel Aviv Univ, Tel Aviv, Israel.
EM yotam.feldinan@gmail.com; msagiv@acm.org; sharon.shoham@gmail.com;
   james@certora.com
OI Feldman, Yotam/0000-0001-6922-0982
FU European Research Council under the European Union [759102-SVIS]; United
   States-Israel Binational Science Foundation (BSF) [2016260]; Israeli
   Science Foundation (ISF) [1810/18]; Division Of Ocean Sciences;
   Directorate For Geosciences [2016260] Funding Source: National Science
   Foundation
FX We thank our shepherd and the anonymous reviewers for comments which
   improved the paper. We thank Mohammad Abdulaziz, Aman Goel, Alexander
   Ivrii, Noam Parzanchevski, Hila Peleg, and Noam Rinetzky for insightful
   discussions and comments. The research leading to these results has
   received funding from the European Research Council under the European
   Union's Horizon 2020 research and innovation programme (grant agreement
   No [759102-SVIS]). This research was partially supported by the United
   States-Israel Binational Science Foundation (BSF) grant No. 2016260, and
   the Israeli Science Foundation (ISF) grant No. 1810/18.
CR Abdulaziz M, 2018, J AUTOM REASONING, V61, P485, DOI 10.1007/s10817-018-9450-z
   Abdulla PA, 2009, INT J FOUND COMPUT S, V20, P779, DOI 10.1142/S0129054109006887
   Albarghouthi Aws, 2012, LECT NOTES COMPUTER, V7358
   Baumgartner Jason, 2002, P LECT NOTES COMPUTE, V2404, DOI [10.1007/3-540- 45657-0_12, DOI 10.1007/3-540-45657-0_12]
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Biere A., 1999, Proceedings 1999 Design Automation Conference (Cat. No. 99CH36361), P317, DOI 10.1109/DAC.1999.781333
   Bjurner Nikolaj, 2013, LPAR 2013
   Bradley AR, 2011, LECT NOTES COMPUT SC, V6538, P70, DOI 10.1007/978-3-642-18275-4_7
   BSHOUTY NH, 1995, INFORM COMPUT, V123, P146, DOI 10.1006/inco.1995.1164
   Chen Yu-Fang, 2010, COMPUTER AIDED VERIF, DOI [10.1007/978-3-642- 14295-6_44, DOI 10.1007/978-3-642-14295-6_44]
   Chockler Hana, 2012, HARDWARE SOFTWARE VE, DOI [10.1007/978-3-642- 39611-3_12, DOI 10.1007/978-3-642-39611-3_12]
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Cousot P., 1979, S PRINC PROG LANG
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   D'Silva V, 2008, IEEE T COMPUT AID D, V27, P1165, DOI 10.1109/TCAD.2008.923410
   Dams D, 1997, ACM T PROGR LANG SYS, V19, P253, DOI 10.1145/244795.244800
   Een N., 2011, 2011 Formal Methods in Computer-Aided Design (FMCAD), P125
   Ezudheen P, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276501
   Fecher Harald, 2007, P LECT NOTES COMPUTE, V4349, DOI [10.1007/978- 3- 540-69738- 1_12, DOI 10.1007/978-3-540-69738-1_12]
   Feldman YMY, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434296
   Feldman YMY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371073
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P191, DOI 10.1145/565816.503291
   Flanagan Cormac, 2001, FME 2001 FORMAL METH
   Garg P, 2016, ACM SIGPLAN NOTICES, V51, P499, DOI 10.1145/2914770.2837664
   Garg P, 2014, LECT NOTES COMPUT SC, V8559, P69, DOI 10.1007/978-3-319-08867-9_5
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Gulwani S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P235, DOI 10.1145/1328438.1328468
   Gurfinkel A, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P148, DOI 10.23919/FMCAD.2017.8102253
   Gurfinkel A, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P338, DOI 10.1145/2950290.2950330
   Hastad J., 1986, P 18 ANN ACM S THEOR, P6
   Hemaspaandra E, 2010, THEOR COMPUT SCI, V411, P783, DOI 10.1016/j.tcs.2009.10.015
   Ivrii A, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P65, DOI 10.1109/FMCAD.2015.7542254
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Jha S, 2017, ACTA INFORM, V54, P693, DOI 10.1007/s00236-017-0294-5
   Jung Y, 2015, MATH STRUCT COMP SCI, V25, P892, DOI 10.1017/S0960129513000078
   Koenig JR, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P703, DOI 10.1145/3385412.3386018
   Konnov I, 2017, ACM SIGPLAN NOTICES, V52, P719, DOI 10.1145/3093333.3009860
   Konnov Igor, 2014, P LECT NOTES COMPUTE, V8704, DOI 10
   Kroening Daniel, 2003, P LECT NOTES COMPUTE, V2575
   Lahiri SK, 2009, LECT NOTES ARTIF INT, V5663, P214, DOI 10.1007/978-3-642-02959-2_18
   Larsen K. G., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P108, DOI 10.1109/LICS.1990.113738
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   McMillan KL, 2003, LECT NOTES COMPUT SC, V2725, P1
   Neider D, 2020, J AUTOM REASONING, V64, P1523, DOI 10.1007/s10817-020-09570-z
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P217, DOI 10.1145/2914770.2837640
   Queille JP, 2008, LECT NOTES COMPUT SC, V5000, P216
   Quine WV, 1954, BOL SOC MAT MEX, V10, p64s70
   Rinetzky Noam, 2016, P LECT NOTES COMPUTE, V9583, DOI [10.1007/978- 3- 662, DOI 10.1007/978-3-662]
   Rintanen Jussi, 2013, IJCAI 2013
   Rival Xavier, 2020, Introduction to static analysis: an abstract interpretation perspective
   Sagiv Mooly, 2022, PROPERTY DIRECTED RE
   Schaefer M., 2002, SIGACT News, V33
   Seufert Tobias, 2017, METHODEN BESCHREIBUN
   Sharma R, 2016, FORM METHOD SYST DES, V48, P235, DOI 10.1007/s10703-016-0248-5
   Sharma Rahul., 2012, CAV VOLUME 7358 LNCS, V7358, P71, DOI 10.1007/978- 3- 642-31424- 7_11
   Sharma Rahul, 2013, PROGRAMMING LANGUAGE, DOI [10.1007/978, DOI 10.1007/978]
   Sharma Rahul, 2013, STAT AN 20 INT S SAS
   Sheeran M, 2000, LECT NOTES COMPUT SC, V1954, P108
   Umans C, 2001, J COMPUT SYST SCI, V63, P597, DOI 10.1006/jcss.2001.1775
   Urban Caterina, 2015, THESIS ECOLE NORMALE
   Wiedemann Douglas H, 1987, THESIS U WATERLOO
NR 61
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 15
DI 10.1145/3498676
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900016
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Honoré, W
   Kim, J
   Shin, JY
   Shao, Z
AF Honore, Wolf
   Kim, Jieung
   Shin, Ji-Yong
   Shao, Zhong
TI Much ADO about Failures: A Fault-Aware Model for Compositional
   Verification of Strongly Consistent Distributed Systems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE distributed systems; formal verification; proof assistants; Coq
ID ABSTRACTION
AB Despite recent advances, guaranteeing the correctness of large-scale distributed applications without compromising performance remains a challenging problem. Network and node failures are inevitable and, for some applications, careful control over how they are handled is essential. Unfortunately, existing approaches either completely hide these failures behind an atomic state machine replication (SMR) interface, or expose all of the network-level details, sacrificing atomicity. We propose a novel, compositional, atomic distributed object (ADO) model for strongly consistent distributed systems that combines the best of both options. The object-oriented API abstracts over protocol-specific details and decouples high-level correctness reasoning from implementation choices. At the same time, it intentionally exposes an abstract view of certain key distributed failure cases, thus allowing for more fine-grained control over them than SMR-like models. We demonstrate that proving properties even of composite distributed systems can be straightforward with our Coq verification framework, ADVERT, thanks to the ADO model. We also show that a variety of common protocols including multi-Paxos and Chain Replication refine the ADO semantics, which allows one to freely choose among them for an application's implementation without modifying ADO-level correctness proofs.
C1 [Honore, Wolf; Kim, Jieung; Shao, Zhong] Yale Univ, New Haven, CT 06520 USA.
   [Shin, Ji-Yong] Northeastern Univ, Boston, MA 02115 USA.
C3 Yale University; Northeastern University
RP Honoré, W (corresponding author), Yale Univ, New Haven, CT 06520 USA.
EM wolf.honore@yale.edu; jieungkim@google.com; j.shin@northeastern.edu;
   zhong.shao@yale.edu
OI Kim, Jieung/0000-0001-7581-041X; Honore, Wolf/0000-0001-8524-1978; Shin,
   Ji Yong/0000-0002-1595-4849; Shao, Zhong/0000-0001-8184-7649
CR Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Balakrishnan Mahesh, 2012, P 9 S NETW SYST DES
   Boichat R., 2003, SIGACT News, V34, P47, DOI 10.1145/637437.637447
   Burrows M, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P335
   Castro P, 2019, COMMUN ACM, V62, P44, DOI 10.1145/3368454
   Chajed T, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P307
   Chang F, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P205
   Dean J, 2009, DESIGNS LESSONS ADVI
   Felber P, 2001, SIXTH INTERNATIONAL WORKSHOP ON OBJECT-ORIENTED REAL-TIME DEPENDABLE SYSTEMS, PROCEEDINGS, P153, DOI 10.1109/WORDS.2001.945126
   Filipovic I, 2010, THEOR COMPUT SCI, V411, P4379, DOI 10.1016/j.tcs.2010.09.021
   Fonseca P, 2017, PROCEEDINGS OF THE TWELFTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS 2017), P328, DOI 10.1145/3064176.3064163
   Gafni E, 2003, DISTRIB COMPUT, V16, P1, DOI [10.1007/s00446-002-0070-8, 10.1007/S00446-002-0070-8]
   Gill P, 2011, ACM SIGCOMM COMP COM, V41, P350, DOI 10.1145/2043164.2018477
   Gleissenthall KV, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290372
   Gray J, 2006, ACM T DATABASE SYST, V31, P133, DOI 10.1145/1132863.1132867
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Guerraoui R, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P175, DOI 10.1145/1345206.1345233
   Gunawi H. S., 2014, P ACM S CLOUD COMP S, P1
   Hawblitzel C., 2014, 11 USENIX S OPERATIN
   Hawblitzel C, 2015, LECT NOTES COMPUT SC, V9207, P449, DOI 10.1007/978-3-319-21668-3_26
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Hongjin Liang, 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P227, DOI 10.1007/978-3-642-40184-8_17
   Honore Wolf, YALEDCSTR1557
   Izraelevitz Joseph, 2016, Distributed Computing. 30th International Symposium, DISC 2016. Proceedings: LNCS 9888, P313, DOI 10.1007/978-3-662-53426-7_23
   Killalea T, 2016, COMMUN ACM, V59, P42, DOI 10.1145/2948985
   Koskinen E, 2015, ACM SIGPLAN NOTICES, V50, P186, DOI [10.1145/2813885.2737995, 10.1145/2737924.2737995]
   Kragl B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P227, DOI 10.1145/3385412.3385980
   Krogh-Jespersen M, 2020, LECT NOTES COMPUT SC, V12075, P336, DOI 10.1007/978-3-030-44914-8_13
   Lamport L., 2001, SIGACT News, V32, P51
   Lamport L, 2006, DISTRIB COMPUT, V19, P79, DOI 10.1007/s00446-006-0005-x
   Lamport L, 2009, PODC'09: PROCEEDINGS OF THE 2009 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P312, DOI 10.1145/1582716.1582783
   Lamport Leslie, 2005, Generalized Consensus and Paxos
   Lampson Butler., 2001, P 20 ANN ACM S PRINC, P13, DOI DOI 10.1145/383962.383969
   Leroy X., COMPCERT VERIFIED CO
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Ma HJ, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P370, DOI 10.1145/3341301.3359651
   MacCormick J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P105
   Mazurkiewicz Antoni, 1995, INTRO TRACE THEORY, P3, DOI [10.1142/9789814261456_0001, DOI 10.1142/9789814261456_0001]
   Meza J, 2018, IMC'18: PROCEEDINGS OF THE INTERNET MEASUREMENT CONFERENCE, P393, DOI 10.1145/3278532.3278566
   Moraru I, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P358, DOI 10.1145/2517349.2517350
   Nightingale Edmund B, 2005, ACM Trans. Comput. Syst, V39, P191, DOI DOI 10.1145/1189256.1189258
   Ongaro Diego, 2014, 2014 USENIX ANN TECH, P305, DOI DOI 10.1007/0-387-34805-0_21
   Padon O, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3140568
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Ramalingam G, 2013, ACM SIGPLAN NOTICES, V48, P249, DOI 10.1145/2480359.2429100
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Rystsov Denis, 2018, ABS180207000 CORR
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   SCHNEIDER FB, 1990, COMPUT SURV, V22, P299, DOI 10.1145/98163.98167
   Sergey I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158116
   Shin JY, 2019, PROCEEDINGS OF THE 2019 TENTH ACM SYMPOSIUM ON CLOUD COMPUTING (SOCC '19), P299, DOI 10.1145/3357223.3362739
   Sjöberg V, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360562
   Tanenbaum Andrew S., 2006, DISTRIBUTED SYSTEMS, V2nd, DOI [10.5555/1202502, DOI 10.5555/1202502]
   Taube M, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P662, DOI 10.1145/3192366.3192414
   Terrace Jeff, 2009, P USENIX ATC, P11
   The AWS Team, 2011, SUMMARY AMAZON EC2 A
   The Coq Development Team, 1999, COQ PROOF ASSISTANT
   Treynor Ben, 2011, TODAYS OUTAGE SEVERA
   van Renesse R, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P91
   van Renesse R, 2015, ACM COMPUT SURV, V47, DOI 10.1145/2673577
   Waldo Jim., 1994, NOTE DISTRIBUTED COM, DOI DOI 10.5555/974938
   Wang C, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P980, DOI 10.1145/3314221.3314617
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Wollrath A, 1996, COMPUT SYST, V9, P265
   Woos D, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P154, DOI 10.1145/2854065.2854081
   Zhang I, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P263, DOI 10.1145/2815400.2815404
NR 68
TC 2
Z9 3
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 97
DI 10.1145/3485474
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200001
OA gold
DA 2024-07-18
ER

PT J
AU Park, J
   Winterer, D
   Zhang, CY
   Su, ZD
AF Park, Jiwon
   Winterer, Dominik
   Zhang, Chengyu
   Su, Zhendong
TI Generative Type-Aware Mutation for Testing SMT Solvers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE SMT solvers; Fuzz testing; Generative type-aware mutation
AB We propose Generative Type-Aware Mutation, an effective approach for testing SMT solvers. The key idea is to realize generation through the mutation of expressions rooted with parametric operators from the SMT-LIB specification. Generative Type-Aware Mutation is a hybrid of mutation-based and grammar-based fuzzing and features an infinite mutation space-overcoming a major limitation of OpFuzz, the state-of-the-art fuzzer for SMT solvers. We have realized Generative Type-Aware Mutation in a practical SMT solver bug hunting tool, TypeFuzz. During our testing period with TypeFuzz, we reported over 237 bugs in the state-of-the-art SMT solvers Z3 and CVC4. Among these, 189 bugs were confirmed and 176 bugs were fixed. Most notably, we found 18 soundness bugs in CVC4's default mode alone. Several of them were two years latent (7/18). CVC4 has been proved to be a very stable SMT solver and has resisted several fuzzing campaigns.
C1 [Park, Jiwon] Ecole Polytech, LIX, Palaiseau, France.
   [Winterer, Dominik; Su, Zhendong] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
   [Zhang, Chengyu] East China Normal Univ, Software Engn Inst, Shanghai, Peoples R China.
C3 Institut Polytechnique de Paris; Ecole Polytechnique; Swiss Federal
   Institutes of Technology Domain; ETH Zurich; East China Normal
   University
RP Park, J (corresponding author), Ecole Polytech, LIX, Palaiseau, France.
EM jiwon.park@polytechnique.edu; dominik.winterer@inf.ethz.ch;
   dale.chengyu.zhang@gmail.com; zhendong.su@inf.ethz.ch
OI Zhang, Chengyu/0000-0002-7285-289X
FU NSFC [61632005, 61532019]
FX We thank the anonymous SPLASH/OOPSLA reviewers for their valuable
   feedback. Our special thanks go to the Z3 and CVC4 developers,
   especially Nikolaj Bjurner, Andrew Reynolds, Haniel Barbosa, Andres
   Notzli for useful information and for addressing our bug reports.
   Chengyu Zhang was partially supported by the NSFC Projects No. 61632005
   and No. 61532019.
CR Amalfitano D, 2015, 2ND ACM INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS MOBILESOFT 2015, P33, DOI 10.1109/MobileSoft.2015.11
   [Anonymous], American Fuzzy Lop
   Aschermann C, 2019, 26TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2019), DOI 10.14722/ndss.2019.23412
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Barrett Clark, 2019, The Satisfiability Modulo Theories Library (SMT-LIB)
   Barrett Clark, 2010, P 8 INT WORKSH SAT M
   Blotsky D, 2018, LECT NOTES COMPUT SC, V10982, P45, DOI 10.1007/978-3-319-96142-2_6
   Brummayer R., 2009, Proceedings of the 7th International Workshop on Satisfiability Modulo Theories, P1, DOI [10.1145/1670412.1670413, DOI 10.1145/1670412.1670413]
   Brummayer R, 2009, LECT NOTES COMPUT SC, V5505, P174, DOI 10.1007/978-3-642-00768-2_16
   Bugariu A, 2020, PROC INT CONF SOFTW, P1459, DOI 10.1145/3377811.3380398
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DeLine Robert., 2005, BOOGIEPL TYPED PROCE
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Gereon Kremer, PYDELTA DELTA DEBUGG
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Godefroid P, 2017, IEEE INT CONF AUTOM, P50, DOI 10.1109/ASE.2017.8115618
   HANFORD KV, 1970, IBM SYST J, V9, P242, DOI 10.1147/sj.94.0242
   Lampropoulos L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360607
   Livinskii V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428264
   Mansur MN, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P701, DOI 10.1145/3368089.3409763
   Niemetz Aina., 2017, Proceedings of the 15th International Workshop on Satisfiability Modulo Theories, SMT 2017), affiliated with the 29th International Conference on Computer Aided Verification, CAV 2017, Heidelberg, Germany, July 24-28, 2017, P10
   Pham V, 2021, IEEE T SOFTWARE ENG, V47, P1980, DOI 10.1109/TSE.2019.2941681
   Regehr J, 2012, ACM SIGPLAN NOTICES, V47, P335, DOI 10.1145/2345156.2254104
   Rigger M, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P667
   Solar-Lezama Armando, 2008, PROGRAM SYNTHESIS SK, DOI [10.5555/1714168, DOI 10.5555/1714168]
   The International SMT Competition, 2021, SMT COMP
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Wang JJ, 2019, PROC INT CONF SOFTW, P724, DOI 10.1109/ICSE.2019.00081
   Winterer D, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P718, DOI 10.1145/3385412.3385985
   Winterer Dominik, YINYANG FUZZER SMT S
   Winterer Dominik, OOPSLA 20, DOI [10.1145/3428261, DOI 10.1145/3428261]
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P347, DOI [10.1145/3062341.3062379, 10.1145/3140587.3062379]
NR 34
TC 13
Z9 13
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 152
DI 10.1145/3485529
PG 19
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200055
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Chlipala, A
AF Chlipala, Adam
TI Skipping the Binder Bureaucracy with Mixed Embeddings in a Semantics
   Course (Functional Pearl)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE formal verification; proof assistants; mechanized semantics; binder
   encoding
ID CALCULUS
AB Rigorous reasoning about programs calls for some amount of bureaucracy in managing details like variable binding, but, in guiding students through big ideas in semantics, we might hope to minimize the overhead. We describe our experiment introducing a range of such ideas, using the Coq proof assistant, without any explicit representation of variables, instead using a higher-order syntax encoding that we dub lmixed embeddingz: it is neither the fully explicit syntax of deep embeddings nor the syntax-free programming of shallow embeddings. Marquee examples include different takes on concurrency reasoning, including in the traditions of model checking (partial-order reduction), program logics (concurrent separation logic), and type checking (session types) s all presented without any side conditions on variables.
C1 [Chlipala, Adam] MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Chlipala, A (corresponding author), MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
EM adamc@csail.mit.edu
CR [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 1996, LECT NOTES COMPUTER, DOI DOI 10.1007/3-540-60761-7
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   BARENDREGT H, 1985, STUDIES LOGIC FDN MA, V103
   BOULTON R, 1992, IFIP TRANS A, V10, P129
   BRUIJN NGD, 1972, P K NED AKAD A MATH, V75, P381
   Chen HG, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P18, DOI 10.1145/2815400.2815402
   Chlipala A, 2008, ACM SIGPLAN NOTICES, V43, P143, DOI 10.1145/1411203.1411226
   Chlipala A, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P79
   Gordon A. D., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P136, DOI 10.1145/165180.165199
   Harper R., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P194
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honsell F, 2001, LECT NOTES COMPUT SC, V2076, P963
   Honsell F, 2001, THEOR COMPUT SCI, V253, P239, DOI 10.1016/S0304-3975(00)00095-5
   Milner R, 1982, CALCULUS COMMUNICATI
   Nanevski A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P229
   Nipkow T., 2014, CONCRETE SEMANTICS I, DOI [DOI 10.1007/978-3-319-10542-0, 10.1007/ 978-3-319-10542-0]
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Pierce Benjamin C, 2018, PROGRAMMING LANGUAGE
   Pitts AM, 2003, INFORM COMPUT, V186, P165, DOI 10.1016/S0890-5401(03)00138-X
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sergey Ilya, 2014, PROGRAMS PROOFS MECH, DOI [10.5281/zenodo.4996239, DOI 10.5281/ZENODO.4996239]
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
NR 27
TC 3
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 94
DI 10.1145/3473599
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800034
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Watanabe, Y
   Gopinathan, K
   Pîrlea, G
   Polikarpova, N
   Sergey, I
AF Watanabe, Yasunari
   Gopinathan, Kiran
   Pirlea, George
   Polikarpova, Nadia
   Sergey, Ilya
TI Certifying the Synthesis of Heap-Manipulating Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Separation Logic; Proof Assistants; Mechanised Proofs
ID IMPLEMENTATION
AB Automated deductive program synthesis promises to generate executable programs from concise specifications, along with proofs of correctness that can be independently verified using third-party tools. However, an attempt to exercise this promise using existing proof-certification frameworks reveals significant discrepancies in how proof derivations are structured for two different purposes: program synthesis and program verification. These discrepancies make it difficult to use certified verifiers to validate synthesis results, forcing one to write an ad-hoc translation procedure from synthesis proofs to correctness proofs for each verification backend.
   In this work, we address this challenge in the context of the synthesis and verification of heap-manipulating programs. We present a technique for principled translation of deductive synthesis derivations (a.k.a. source proofs) into deductive target proofs about the synthesised programs in the logics of interactive program verifiers. We showcase our technique by implementing three different certifiers for programs generated via SuSLik, a Separation Logic-based tool for automated synthesis of programs with pointers, in foundational verification frameworks embedded in Coq: Hoare Type Theory (HTT), IRIS, and Verified Software Toolchain (VST), producing concise and efficient machine-checkable proofs for characteristic synthesis benchmarks.
C1 [Watanabe, Yasunari; Sergey, Ilya] Yale NUS Coll, Singapore, Singapore.
   [Watanabe, Yasunari; Gopinathan, Kiran; Pirlea, George; Sergey, Ilya] Natl Univ Singapore, Singapore, Singapore.
   [Polikarpova, Nadia] Univ Calif San Diego, La Jolla, CA 92093 USA.
C3 Yale NUS College; National University of Singapore; University of
   California System; University of California San Diego
RP Watanabe, Y (corresponding author), Yale NUS Coll, Singapore, Singapore.; Watanabe, Y (corresponding author), Natl Univ Singapore, Singapore, Singapore.
EM yasunari@u.yale-nus.edu.sg; kirang@comp.nus.edu.sg;
   gpirlea@comp.nus.edu.sg; npolikarpova@eng.ucsd.edu;
   ilya.sergey@yale-nus.edu.sg
OI Sergey, Ilya/0000-0003-4250-5392; Pirlea, George/0009-0008-5378-2815
FU National Science Foundation [1911149]; Singapore MoE Tier 1 Grant
   [IG18-SG102]; Grant of Singapore NRF National Satellite of Excellence in
   Trustworthy Software Systems (NSoE-TSS); Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1911149] Funding Source: National Science Foundation
FX This research was supported by the National Science Foundation under
   Grant No. 1911149, by Singapore MoE Tier 1 Grant No. IG18-SG102, and by
   the Grant of Singapore NRF National Satellite of Excellence in
   Trustworthy Software Systems (NSoE-TSS).
CR [Anonymous], 2017, SCHLOSS DAGSTUHL LEI, DOI DOI 10.4230/LIPICS.SNAPL
   Appel A.W., 2014, Program logics for certified compilers
   Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Appel AW, 2001, IEEE S LOG, P247, DOI 10.1109/LICS.2001.932501
   Barthe G, 2013, MATH STRUCT COMP SCI, V23, P1032, DOI 10.1017/S0960129512000850
   Berdine J, 2005, LECT NOTES COMPUT SC, V3780, P52
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Besson F, 2006, THEOR COMPUT SCI, V364, P273, DOI 10.1016/j.tcs.2006.08.012
   Besson Frederic, 2020, MICROMEGA SOLVERS AR
   Cao QX, 2018, J AUTOM REASONING, V61, P367, DOI 10.1007/s10817-018-9457-5
   Chargueraud Arthur, 2020, P ACM PROGRAM LANG, V116, P116, DOI [10.1145/3408998, DOI 10.1145/3408998]
   Chen JA, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P412, DOI 10.1145/1806596.1806643
   Chin Wei-Ngan., 2011, Proceedings of the ACM International Conference on Object-Oriented Programming Systems Languages and Applications, P9
   Chlipala A, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P234
   Coen C. S., 2004, Types for Proofs and Programs. International Workshop, TYPES 2004. Revised Selected Papers (Lecture Notes in Computer Science Vol. 3839), P98
   Czajka L, 2018, J AUTOM REASONING, V61, P423, DOI 10.1007/s10817-018-9458-4
   Delahaye D, 2000, LECT NOTES ARTIF INT, V1955, P85, DOI 10.1007/3-540-44404-1_7
   Delaware B, 2015, ACM SIGPLAN NOTICES, V50, P689, DOI [10.1145/2775051.2677006, 10.1145/2676726.2677006]
   Ekici B, 2017, LECT NOTES COMPUT SC, V10427, P126, DOI 10.1007/978-3-319-63390-9_7
   Eran Yahav, 2020, SYNTHESIZER IS COMPI
   Gonthier G., 2009, 6455 MICR RES INR JO
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   HE J, 1986, LECT NOTES COMPUT SC, V213, P187
   Henzinger T. A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P526
   Itzhaky S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P944, DOI 10.1145/3453483.3454087
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung Ralf, 2020, THESIS SAARLAND U
   Kneuss E, 2013, ACM SIGPLAN NOTICES, V48, P407, DOI [10.1145/2509136.2509555, 10.1145/2544173.2509555]
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Mahboubi A, 2013, LECT NOTES COMPUT SC, V7998, P19, DOI 10.1007/978-3-642-39634-2_5
   Mahboubi Assia, 2021, MATH COMPONENTS, DOI [10.5281/zenodo.4457887, DOI 10.5281/ZENODO.4457887]
   Manna Z., 1980, ACM Transactions on Programming Languages and Systems, V2, P90, DOI 10.1145/357084.357090
   Martelli A., 1973, Proceedings of the 3rd International Joint Conference on Artificial Intelligence. IJCAI'73, P1
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Nanevski A, 2008, ACM SIGPLAN NOTICES, V43, P229, DOI 10.1145/1411203.1411237
   Nanevski A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P261, DOI 10.1145/1706299.1706331
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Necula GC, 1996, PROCEEDINGS OF THE SECOND SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '96), P229, DOI 10.1145/248155.238781
   Necula GC, 1998, ACM SIGPLAN NOTICES, V33, P333, DOI 10.1145/277652.277752
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   Pit-Claudel C, 2020, LECT NOTES COMPUT SC, V12167, P119, DOI 10.1007/978-3-030-51054-1_7
   Polikarpova N, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290385
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rowe RNS, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P53, DOI 10.1145/3018610.3018623
   Sergey Ilya, 2014, PROGR PROOFS MECH MA, DOI [10.5281/zenodo.4996238, DOI 10.5281/ZENODO.4996238]
   Skalka C, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P1115, DOI 10.1145/3319535.3363214
   Sozeau M, 2009, J FORMALIZ REASON, V2, P41
   Watanabe Yasunari, 2021, THESIS NATL U SINGAP
   YasunariWatanabe Kiran Gopinathan, 2021, CERTIFIED SUSLIK ICF, DOI [10.5281/zenodo.5005829, DOI 10.5281/ZENODO.5005829]
NR 54
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 84
DI 10.1145/3473589
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800024
OA gold
DA 2024-07-18
ER

PT J
AU Flückiger, O
   Chari, G
   Yee, MH
   Jecmen, J
   Hain, J
   Vitek, J
AF Fluckiger, Olivier
   Chari, Guido
   Yee, Ming-Ho
   Jecmen, Jan
   Hain, Jakob
   Vitek, Jan
TI Contextual Dispatch for Function Specialization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE virtual machine; specialization; customization; splitting; speculation
AB In order to generate efficient code, dynamic language compilers often need information, such as dynamic types, not readily available in the program source. Leveraging a mixture of static and dynamic information, these compilers speculate on the missing information. Within one compilation unit, they specialize the generated code to the previously observed behaviors, betting that past is prologue. When speculation fails, the execution must jump back to unoptimized code. In this paper, we propose an approach to further the specialization, by disentangling classes of behaviors into separate optimization units. With contextual dispatch, functions are versioned and each version is compiled under different assumptions. When a function is invoked, the implementation dispatches to a version optimized under assumptions matching the dynamic context of the call. As a proof-of-concept, we describe a compiler for the R language which uses this approach. Our implementation is, on average, 1.7x faster than the GNU R reference implementation. We evaluate contextual dispatch on a set of benchmarks and measure additional speedup, on top of traditional speculation with deoptimization techniques. In this setting contextual dispatch improves the performance of 18 out of 46 programs in our benchmark suite.
C1 [Fluckiger, Olivier; Yee, Ming-Ho; Hain, Jakob; Vitek, Jan] Northeastern Univ, Boston, MA 02115 USA.
   [Chari, Guido] ASAPP INC, Buenos Aires, DF, Argentina.
   [Jecmen, Jan; Vitek, Jan] Czech Tech Univ, Prague, Czech Republic.
C3 Northeastern University; Czech Technical University Prague
RP Flückiger, O (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
RI ; Vitek, Jan/J-9051-2014
OI Yee, Ming-Ho/0000-0002-8008-8481; Vitek, Jan/0000-0003-4052-3458;
   Fluckiger, Olivier/0000-0003-0512-9607
FU Office of Naval Research (ONR) [503353]; National Science Foundation
   [1759736, 1925644, 1618732]; Czech Ministry of Education, Youth and
   Sports from the Czech Operational Programme Research, Development, and
   Education [CZ.02.1.01/0.0/0.0/15_003/0000421]; European Research Council
   (ERC) under the European Union [695412]; Direct For Biological Sciences;
   Div Of Biological Infrastructure [1759736] Funding Source: National
   Science Foundation; Direct For Computer & Info Scie & Enginr; Division
   Of Computer and Network Systems [1925644] Funding Source: National
   Science Foundation; Direct For Computer & Info Scie & Enginr; Division
   of Computing and Communication Foundations [1618732] Funding Source:
   National Science Foundation
FX We greatly thank all the people contributing to R over the years.
   Special thanks to Petr Maj for starting the project and always
   satisfying our hunger for more CPU cores. We thank the anonymous
   reviewers, for their insightful comments and suggestions to improve this
   paper. This work has received funding from the Office of Naval Research
   (ONR) award 503353, the National Science Foundation awards 1759736,
   1925644 and 1618732, the Czech Ministry of Education, Youth and Sports
   from the Czech Operational Programme Research, Development, and
   Education, under grant agreement No. CZ.02.1.01/0.0/0.0/15_003/0000421,
   and the European Research Council (ERC) under the European Union's
   Horizon 2020 research and innovation programme, under grant agreement
   No. 695412.
CR Ap AA, 2017, INTERNATIONAL CONFERENCE ON EMBEDDED COMPUTER SYSTEMS: ARCHITECTURES, MODELING, AND SIMULATION (SAMOS 2017), P163
   Barrett E, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133876
   Bezanson J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276490
   Cartwright Robert, 1998, C OBJ OR PROGR SYST, DOI [10.1145/286942.286958, DOI 10.1145/286942.286958]
   CHAMBERS C, 1989, SIGPLAN NOTICES, V24, P146, DOI 10.1145/74818.74831
   Chevalier-Boisvert Maxime., EUROPEAN C OBJECT OR, DOI DOI 10.4230/LIPICS.ECOOP.2015.101
   COOPER KD, 1993, COMPUT LANG, V19, P105, DOI 10.1016/0096-0551(93)90005-L
   Dean J., 1995, SIGPLAN Notices, V30, P93, DOI 10.1145/223428.207119
   Dragos Iulian., WORKSHOP IMPLEMENTAT, DOI DOI 10.1145/1565824.1565830
   Flückiger O, 2019, PROCEEDINGS OF THE 15TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES (DLS '19), P55, DOI 10.1145/3359619.3359744
   Flückiger O, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158137
   Fluckiger Olivier, 2020, ARTIFACT LCONTEXTUAL, DOI [10.5281/zenodo.3973073, DOI 10.5281/ZENODO.3973073]
   Gal A, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P465, DOI 10.1145/1542476.1542528
   Gouy Isaac., 2020, The Computer Language Benchmarks Game
   Hackett B, 2012, ACM SIGPLAN NOTICES, V47, P239, DOI 10.1145/2345156.2254094
   Hall M. M., 1991, THESIS
   HOLZLE U, 1992, SIGPLAN NOTICES, V27, P32, DOI 10.1145/143103.143114
   Holzle Urs., EUROPEAN C OBJECT OR, DOI [10.1007/BFb0057013, DOI 10.1007/BFB0057013]
   Hosking Antony L, 1990, INT WORKSH PERS OBJ
   Kalibera Toms., C VIRTUAL EXECUTION, DOI DOI 10.1145/2576195.2576205
   Kennedy A, 2001, ACM SIGPLAN NOTICES, V36, P1, DOI 10.1145/381694.378797
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Leisch F, 2006, COMPUT STAT DATA AN, V51, P526, DOI 10.1016/j.csda.2005.10.006
   Liu L, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P16, DOI 10.1145/3314221.3314611
   Marr Stefan, 2017, ACM SIGPLAN Notices, V52, P120, DOI 10.1145/3093334.2989232
   Marr Stefan, 2018, REBENCH EXECUTE DOCU, DOI [10.5281/zenodo.1311762, DOI 10.5281/ZENODO.1311762]
   Morandat F, 2012, LECT NOTES COMPUT SC, V7313, P104, DOI 10.1007/978-3-642-31057-7_6
   Paleczny Michael, 2001, S JAV VIRT MACH RES
   Plevyak John., INT WORKSHOP LANGUAG, DOI DOI 10.1007/BFB0014224
   Poesia Gabriel, 2020, Proceedings of the ACM on Programming Languages, V4, DOI 10.1145/3428235
   Pournelle G. H., 1953, Journal of Mammalogy, V34, P133, DOI 10.1890/0012-9658(2002)083[1421:SDEOLC]2.0.CO;2
   Santos H.N., 2013, P 2013 IEEEACM INT S, P1, DOI [10.1109/CGO.2013.6495006, DOI 10.1109/CGO.2013.6495006]
   SCHEIFLER RW, 1977, COMMUN ACM, V20, P647, DOI 10.1145/359810.359830
   Stadler Lukas, 2017, ACM SIGPLAN Notices, V52, P84, DOI 10.1145/3093334.2989236
   Talbot J, 2012, INT CONFER PARA, P43
   Tierney Luke., 2019, BYTE CODE COMPILER R
   Whaley John., 1999, DYNAMIC OPTIMIZATION
NR 37
TC 4
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 220
DI 10.1145/3428288
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900097
OA gold
DA 2024-07-18
ER

PT J
AU Sang, B
   Eugster, P
   Petri, G
   Ravi, S
   Roman, PL
AF Sang, Bo
   Eugster, Patrick
   Petri, Gustavo
   Ravi, Srivatsan
   Roman, Pierre-Louis
TI Scalable and Serializable Networked Multi-actor Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE actor; distribution; scalability; serializability
ID MODEL
AB A major challenge in writing applications that execute across hosts, such as distributed online services, is to reconcile (a) parallelism (i.e., allowing components to execute independently on disjoint tasks), and (b) cooperation (i.e., allowing components to work together on common tasks). A good compromise between the two is vital to scalability, a core concern in distributed networked applications.
   The actor model of computation is a widely promoted progranuning model for distributed applications, as actors can execute in individual threads (parallelism) across different hosts and interact via asynchronous message passing (collaboration). However, this makes it hard for programmers to reason about combinations of messages as opposed to individual messages, which is essential in many scenarios.
   This paper presents a pragmatic variant of the actor model in which messages can be grouped into units that are executed in a serializable manner, whilst still retaining a high degree of parallelism. In short, our model is based on an orchestration of actors along a directed acyclic graph that supports efficient decentralized synchronization among actors based on their actual interaction. We present the implementation of this model, based on a dynamic DAG-inducing referencing discipline. in the actor-based programming language AEON. We argue serializability and the absence of deadlocks in our model, and demonstrate its scalability and usability through extensive evaluation and case studies of wide-ranging applications.
C1 [Sang, Bo; Eugster, Patrick] Purdue Univ, W Lafayette, IN 47907 USA.
   [Eugster, Patrick; Roman, Pierre-Louis] USI Lugano, Lugano, Switzerland.
   [Eugster, Patrick] Tech Univ Darmstadt, Darmstadt, Germany.
   [Petri, Gustavo] ARM Res Cambridge, Cambridge, England.
   [Ravi, Srivatsan] Univ Southern Calif, Los Angeles, CA 90089 USA.
C3 Purdue University System; Purdue University; Universita della Svizzera
   Italiana; Technical University of Darmstadt; University of Southern
   California
RP Sang, B (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM bsang@purdue.edu; eugstp@usi.ch; gustavo.petri@arm.com;
   srivatsr@usc.edu; romanp@usi.ch
OI , srivatsan/0000-0002-2965-3940; Roman, Pierre-Louis/0000-0001-5741-1490
FU NSF [1618923]; ERC [617805]; DFG [1053]; SNSF [192121]; AWS Credits in
   Research; Division Of Computer and Network Systems; Direct For Computer
   & Info Scie & Enginr [1618923] Funding Source: National Science
   Foundation; European Research Council (ERC) [617805] Funding Source:
   European Research Council (ERC)
FX We thank the reviewers for their invaluable feedback. This work was
   supported by NSF grant #1618923, ERC grant #617805, DFG center #1053,
   SNSF grant #192121, and AWS Credits in Research.
CR AGHA G, 1990, COMMUN ACM, V33, P125, DOI 10.1145/83880.84528
   Aguilera MK, 2008, PROC VLDB ENDOW, V1, P598
   [Anonymous], 1987, Concurrency Control and Recovery in Database Systems
   Aumayr D, 2019, PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON MANAGED PROGRAMMING LANGUAGES AND RUNTIMES (MPLR '19), P157, DOI 10.1145/3357390.3361019
   Blessing S, 2017, PROCEEDINGS OF THE 7TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL (AGERE'17), P1, DOI 10.1145/3141834.3141835
   Boyapati Chandrasekhar, 2003, THESIS MIT
   Castegren Elias, 2016, 30 EUR C OBJ OR PROG, V5, P1, DOI [DOI 10.4230/LIPICS.ECOOP.2016.5, 10.4230/LI PIcs.ECOOP.2016.5]
   Chang F, 2008, ACM T COMPUT SYST, V26, DOI 10.1145/1365815.1365816
   Charousset D, 2016, COMPUT LANG SYST STR, V45, P105, DOI 10.1016/j.cl.2016.01.002
   Chuang Wei-Chiu, 2013, ACM S CLOUD COMP SOC
   Clebsch S., 2015, P 5 INT WORKSHOP PRO, P1, DOI DOI 10.1145/2824815.2824816
   Clebsch S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133896
   Cooper Brian F., 2010, P 1 ACM S CLOUD COMP, P143, DOI [DOI 10.1145/1807128.1807152, 10.1145/1807128.1807152]
   De Koster J, 2015, SCI COMPUT PROGRAM, V98, P140, DOI 10.1016/j.scico.2014.02.008
   Dean J, 2008, COMMUN ACM, V51, P107, DOI 10.1145/1327452.1327492
   Desai A, 2013, ACM SIGPLAN NOTICES, V48, P321, DOI 10.1145/2499370.2462184
   Dinges Peter, 2012, Coordination Models and Languages. Proceedings 14th International Conference, COORDINATION 2012, P89, DOI 10.1007/978-3-642-30829-1_7
   Duarte C. H. C., 1999, Mathematical Structures in Computer Science, V9, P227, DOI 10.1017/S0960129599002765
   Ellen F, 2010, PODC 2010: PROCEEDINGS OF THE 2010 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P131, DOI 10.1145/1835698.1835736
   Escriva R., 2015, ABS150907815 CORR
   Escriva R, 2016, 13TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI '16), P469
   Field J, 2005, ACM SIGPLAN NOTICES, V40, P195, DOI 10.1145/1047659.1040322
   Frulund Svend, 1996, COORDINATING DISTRIB
   Geller A., 2011, Proceedings of the 2nd ACM Symposium on Cloud Computing, ser. SOCC'11, Cascais, P16, DOI [DOI 10.1145/2038916.2038932, 10.1145/2038916.2038932]
   Golan-Gueta G, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P225
   Haller P, 2010, LECT NOTES COMPUT SC, V6183, P354
   Haller P, 2009, THEOR COMPUT SCI, V410, P202, DOI 10.1016/j.tcs.2008.09.019
   Herlihy M, 2005, LECT NOTES COMPUT SC, V3724, P324, DOI 10.1007/11561927_24
   Hewitt C., 1973, PROC 3 INT JOINT C A, P235, DOI 10.1145/359545.359563
   HyperDex Warp, 2020, GYPERDEX WARP
   Imam S.M., 2014, P 4 INT WORKSH PROGR, P67, DOI [10.1145/2687357.2687368, DOI 10.1145/2687357.2687368]
   Kotselidis Christos, 2008, 2008 37th International Conference on Parallel Processing (ICPP), P51, DOI 10.1109/ICPP.2008.59
   Kurnia IlhamW., 2012, Proceedings of the 2nd Edition on Programming Systems, Languages and Applications Based on Actors, Agents, and Decentralized Control Abstractions, AGERE!'12, P47
   Lakshman Avinash, 2010, Operating Systems Review, V44, P35, DOI 10.1145/1773912.1773922
   Lea D, 2005, SCI COMPUT PROGRAM, V58, P293, DOI 10.1016/j.scico.2005.03.007
   Microsoft, 2020, WHO IS US ORL
   Microsoft, 2020, AS AG LIB
   Newell A, 2016, PROCEEDINGS OF THE ELEVENTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS, (EUROSYS 2016), DOI 10.1145/2901318.2901343
   Neykova R, 2014, LECT NOTES COMPUT SC, V8459, P131, DOI 10.1007/978-3-662-43376-8_9
   ONeil P, 1996, ACTA INFORM, V33, P351, DOI 10.1007/s002360050048
   PAPADIMITRIOU CH, 1979, J ACM, V26, P631, DOI 10.1145/322154.322158
   Poetzsch-Heffter Arnd., 2011, International Conference on Formal Verification of Object-Oriented Software, FoVeOOS'11, P289
   Red Hat, 2020, JBOSS MIDDL
   Sang B, 2020, PROCEEDINGS OF THE FIFTEENTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS'20), DOI 10.1145/3342195.3387553
   Sang B, 2016, MIDDLEWARE '16: PROCEEDINGS OF THE 17TH INTERNATIONAL MIDDLEWARE CONFERENCE, DOI 10.1145/2988336.2988352
   Summers AJ, 2016, LECT NOTES COMPUT SC, V9632, P699, DOI 10.1007/978-3-662-49498-1_27
   Swalens J, 2018, AGERE'18: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL, P33, DOI 10.1145/3281366.3281373
   Tu S, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P18, DOI 10.1145/2517349.2522713
   Varela C, 1999, LECT NOTES COMPUT SC, V1594, P166
   Wu XB, 2016, PROCEEDINGS OF THE ELEVENTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS, (EUROSYS 2016), DOI 10.1145/2901318.2901332
NR 50
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 198
DI 10.1145/3428266
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900075
OA gold
DA 2024-07-18
ER

PT J
AU Surbatovich, M
   Lucia, B
   Jia, LM
AF Surbatovich, Milijana
   Lucia, Brandon
   Jia, Limin
TI Towards a Forma Foundation of Intermittent Computing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE intermittent computing; operational semantics
ID ARCHITECTURE
AB Intermittently powered devices enable new applications in harsh or inaccessible environments, such as space or in-body implants, but also introduce problems in programmability and correctness. Researchers have developed programming models to ensure that programs make progress and do not produce erroneous results due to memory inconsistencies caused by intermittent executions. As the technology has matured, more and more features are added to intermittently powered devices, such as I/O. Prior work has shown that all existing intermittent execution models have problems with repeated device or sensor inputs (RIO). RIOs could leave intermittent executions in an inconsistent state. Such problems and the proliferation of existing intermittent execution models necessitate a formal foundation for intermittent computing.
   In this paper, we formalize intermittent execution models, their correctness properties with respect to memory consistency and inputs, and identify the invariants needed to prove systems correct. We prove equivalence between several existing intermittent systems. To address RIO problems, we define an algorithm for identifying variables affected by RIOs that need to be restored after reboot and prove the algorithm correct. Finally, we implement the algorithm in a novel intermittent runtime system that is correct with respect to input operations and evaluate its performance.
C1 [Surbatovich, Milijana; Lucia, Brandon; Jia, Limin] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Surbatovich, M (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM milijans@andrew.cmu.edu; blucia@cmu.edu; liminjia@cmu.edu
RI Li, Jiaxi/HTS-3430-2023; li, jia/GVT-7587-2022
OI Li, Jiaxi/0000-0002-8197-8590; Surbatovich,
   Milijana/0009-0004-6948-6683; Jia, Limin/0000-0002-8160-349X
FU National Science Foundation [2007998]; National Science Foundation
   CAREER Award [1751029]; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [2007998] Funding
   Source: National Science Foundation; Direct For Computer & Info Scie &
   Enginr; Division of Computing and Communication Foundations [1751029]
   Funding Source: National Science Foundation
FX We thank the anonymous reviewers for their feedback, and members of the
   Abstract Research Lab for their insightful comments on initial drafts.
   This work was generously funded through National Science Foundation
   Award 2007998 and National Science Foundation CAREER Award 1751029.
CR [Anonymous], 2015, Proteus Digital Health
   Arreola AR, 2018, SENSORS-BASEL, V18, DOI 10.3390/s18010172
   Balsamo D, 2016, IEEE T COMPUT AID D, V35, P1968, DOI 10.1109/TCAD.2016.2547919
   Balsamo D, 2015, IEEE EMBED SYST LETT, V7, P15, DOI 10.1109/LES.2014.2371494
   Ben-David N, 2019, SPAA'19: PROCEEDINGS OF THE 31ST ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURESS, 2019, P253, DOI 10.1145/3323165.3323187
   Berthou G, 2017, 2017 GLOBAL INTERNET OF THINGS SUMMIT (GIOTS 2017), P189
   Blelloch GE, 2018, SPAA'18: PROCEEDINGS OF THE 30TH ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P247, DOI 10.1145/3210377.3210381
   Bornholt James, 2016, ACM SIGPLAN Notices, V51, P83, DOI 10.1145/2954679.2872406
   Chakrabarti DR, 2014, ACM SIGPLAN NOTICES, V49, P433, DOI [10.1145/2660193.2660224, 10.1145/2714064.2660224]
   Chen HG, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P18, DOI 10.1145/2815400.2815402
   Coburn J, 2011, ACM SIGPLAN NOTICES, V46, P105, DOI [10.1145/1961295.1950380, 10.1145/1961296.1950380]
   Colin A, 2018, ACM SIGPLAN NOTICES, V53, P767, DOI [10.1145/3296957.3173210, 10.1145/3173162.3173210]
   Colin A, 2016, ACM SIGPLAN NOTICES, V51, P514, DOI 10.1145/3022671.2983995
   Colin Alexei, 2018, P 27 INT C COMP CONS, DOI DOI 10.1145/3178372.3179525
   Colin Alexei, 2016, P 21 INT C ARCHI ASP, DOI 10.1145/2872362
   Dahiya M, 2018, LECT NOTES COMPUT SC, V10747, P161, DOI 10.1007/978-3-319-73721-8_8
   De Kruijf Marc., 2013, P 2013 IEEE ACM INT, DOI 10.1109/CGO.2013.6495002
   de Kruijf Marc A., 2012, P 33 ACM SIGPLAN C P, DOI DOI 10.1145/2254064.2254120
   de Winkel J, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P53, DOI 10.1145/3373376.3378464
   Denby B, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P939, DOI 10.1145/3373376.3378473
   Ernst G, 2016, LECT NOTES COMPUT SC, V9593, P73, DOI 10.1007/978-3-319-29613-5_5
   Fraternali Francesco, 2018, P 5 C SYST BUILT ENV, DOI [10.1145/3276774.3282823, DOI 10.1145/3276774.3282823]
   Ganesan K, 2019, INT S HIGH PERF COMP, P211, DOI 10.1109/HPCA.2019.00039
   Genç K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P59, DOI 10.1145/3385412.3385991
   Gobieski G, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P199, DOI 10.1145/3297858.3304011
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Hester J, 2017, PROCEEDINGS OF THE 15TH ACM CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS (SENSYS'17), DOI 10.1145/3131672.3131673
   Hester J, 2017, PROCEEDINGS OF THE 15TH ACM CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS (SENSYS'17), DOI 10.1145/3131672.3131674
   Hester J, 2016, ACM T EMBED COMPUT S, V15, DOI 10.1145/2903140
   Hicks M, 2017, 44TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA 2017), P228, DOI 10.1145/3079856.3080238
   Izraelevitz Joseph, 2016, Distributed Computing. 30th International Symposium, DISC 2016. Proceedings: LNCS 9888, P313, DOI 10.1007/978-3-662-53426-7_23
   Izraelevitz J, 2016, ACM SIGPLAN NOTICES, V51, P427, DOI 10.1145/2954679.2872410
   Jackson N, 2019, IPSN '19: PROCEEDINGS OF THE 2019 INTERNATIONAL CONFERENCE ON INFORMATION PROCESSING IN SENSOR NETWORKS, P193, DOI 10.1145/3302506.3310400
   Jayakumar H, 2014, I CONF VLSI DESIGN, P330, DOI 10.1109/VLSID.2014.63
   Joshi R, 2007, FORM ASP COMPUT, V19, P269, DOI 10.1007/s00165-006-0022-3
   Kang Chih-Kai, 2018, P INT S LOW POW EL D
   Kortbeek V, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P85, DOI 10.1145/3373376.3378476
   Koskinen E, 2016, ACM SIGPLAN NOTICES, V51, P97, DOI 10.1145/2914770.2837648
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Liu QR, 2018, 2018 51ST ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO), P258, DOI 10.1109/MICRO.2018.00029
   Lucia B, 2015, ACM SIGPLAN NOTICES, V50, P575, DOI [10.1145/2737924.2737978, 10.1145/2813885.2737978]
   Ma KS, 2017, 50TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO), P204, DOI 10.1145/3123939.3124533
   Ma KS, 2015, INT S HIGH PERF COMP, P526, DOI 10.1109/HPCA.2015.7056060
   Ma KS, 2015, IEEE MICRO, V35, P32, DOI 10.1109/MM.2015.88
   Maeng K, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P129
   Maeng K, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1101, DOI 10.1145/3314221.3314613
   Maeng K, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133920
   Maeng Kiwan, 2019, ARXIVCSDC190906951
   Maioli Andrea, 2019, P 20 ACM SIGPLAN SIG, P203, DOI [10.1145/3316482.3326346, DOI 10.1145/3316482.3326346]
   Mirhoseini A, 2013, INT CONF PERVAS COMP, P216, DOI 10.1109/PerCom.2013.6526735
   Narayanan D., 2012, P 17 INT C ARCH SUPP, V40, P401
   Nardello M, 2019, PROCEEDINGS OF THE 7TH INTERNATIONAL WORKSHOP ON ENERGY HARVESTING & ENERGY-NEUTRAL SENSING SYSTEMS (ENSSYS'19), P8, DOI 10.1145/3362053.3363491
   Ntzik Gian, 2015, PROGRAMMING LANGUAGE, DOI [10.1007/978-3-319-26529-2_10, DOI 10.1007/978-3-319-26529-2_10]
   Pelley S, 2015, IEEE MICRO, V35, P125, DOI 10.1109/MM.2015.46
   Pelley S, 2014, CONF PROC INT SYMP C, P265, DOI 10.1109/ISCA.2014.6853222
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360561
   Raad A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371079
   Raad A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276507
   Ramalingam Ganesan, 2013, FAULT TOLERANCE VIA, DOI [10.1145/2429069.2429100, DOI 10.1145/2429069.2429100]
   Ransford B., 2011, P 16 INT C ARCH SUPP, P159, DOI [DOI 10.1145/1961296.1950386, 10.1145/1950365.1950386, DOI 10.1145/1950365.1950386]
   Ruppel E, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1085, DOI 10.1145/3314221.3314583
   San Miguel J, 2018, IEEE COMPUT ARCHIT L, V17, P76, DOI 10.1109/LCA.2017.2777834
   Schellhorn Gerhard, 2014, P 4 INT C ABSTR STAT, DOI [10.1007/978-3-662-43652-3_2, DOI 10.1007/978-3-662-43652-3_2]
   Sigurbjarnarson Helgi., 2016, 12 USENIX S OP SYST
   Surbatovich M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360609
   TI Inc, 2020, OV MSP430FRXX FRAM
   TI Inc, 2020, TIRTOS REAL TIM OP S
   Van der Woude J, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P17
   Volos Haris, 2011, SIGPLAN Notices, V46, P91, DOI 10.1145/1961296.1950379
   Yildirim KS, 2018, SENSYS'18: PROCEEDINGS OF THE 16TH CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS, P41, DOI 10.1145/3274783.3274837
   Zac Manchester, 2015, KICKSAT
   Zhang Hong, 2011, Proceedings 5th International Workshop on Science and Applications of SAR Polarimetry and Polarimetric Interferometry (PollinSAR 2011)
NR 72
TC 16
Z9 16
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 163
DI 10.1145/3428231
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900040
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Wise, J
   Bader, J
   Wong, C
   Aldrich, J
   Tanter, É
   Sunshine, J
AF Wise, Jenna
   Bader, Johannes
   Wong, Cameron
   Aldrich, Jonathan
   Tanter, Eric
   Sunshine, Joshua
TI Gradual Verification of Recursive Heap Data Structures
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE gradual verification; separation logic; implicit dynamic frames;
   recursive predicates
AB Current static verification techniques do not provide good support for incrementality, making it difficult for developers to focus on specifying and verifying the properties and components that are most important. Dynamic verification approaches support incrementality, but cannot provide static guarantees. To bridge this gap, prior work proposed gradual verification, which supports incrementality by allowing every assertion to be complete, partial, or omitted, and provides sound verification that smoothly scales from dynamic to static checking. The prior approach to gradual verification, however, was limited to programs without recursive data structures. This paper extends gradual verification to programs that manipulate recursive, mutable data structures on the heap. We address several technical challenges, such as semantically connecting iso- and equi-recursive interpretations of abstract predicates, and supporting gradual verification of heap ownership. This work thus lays the foundation for future tools that work on realistic programs and support verification within an engineering process in which cost-benefit trade-offs can be made.
C1 [Wise, Jenna; Aldrich, Jonathan; Sunshine, Joshua] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Tanter, Eric] Univ Chile, Comp Sci Dept DCC, Santiago, Chile.
C3 Carnegie Mellon University; Universidad de Chile
RP Wise, J (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM jlwise@andrew.cmu.edu; johannes-bader@hotmail.de; cam@camdar.io;
   jonathan.aldrich@cs.cmu.edu; etanter@dcc.uchile.cl; sunshine@cs.cmu.edu
OI Aldrich, Jonathan/0000-0003-0631-5591; Sunshine,
   Joshua/0000-0002-9672-5297; DiVincenzo, Jenna/0000-0003-3029-2617
FU Facebook Testing and Verification research award; National Science
   Foundation [CCF-1901033, DGE1745016]; ANID FONDECYT [1190058];
   Millennium Science Initiative Program [ICN17_002]
FX This material is based upon work supported by a Facebook Testing and
   Verification research award and the National Science Foundation under
   Grant No. CCF-1901033 and Grant No. DGE1745016. E. Tanter is partially
   funded by the ANID FONDECYT Regular Project 1190058 and the Millennium
   Science Initiative Program: code ICN17_002. Any opinions, findings, and
   conclusions or recommendations expressed in this material are those of
   the authors and do not necessarily reflect the views of the National
   Science Foundation, Facebook, ANID, or the Millennium Science
   Initiative.
CR Bader J, 2018, LECT NOTES COMPUT SC, V10747, P25, DOI 10.1007/978-3-319-73721-8_2
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Distefano D, 2008, ACM SIGPLAN NOTICES, V43, P213, DOI 10.1145/1449955.1449782
   Furia CA, 2010, LECT NOTES COMPUT SC, V6300, P277, DOI 10.1007/978-3-642-15025-8_15
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Lehmann N, 2017, ACM SIGPLAN NOTICES, V52, P775, DOI 10.1145/3093333.3009856
   Leino KRM, 2009, LECT NOTES COMPUT SC, V5705, P195, DOI 10.1007/978-3-642-03829-7_7
   Lucio P, 2017, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.237.1
   Nguyen HH, 2008, LECT NOTES COMPUT SC, V4905, P203, DOI 10.1007/978-3-540-78163-9_19
   Parkinson M, 2005, ACM SIGPLAN NOTICES, V40, P247, DOI 10.1145/1047659.1040326
   Petiot Guillaume, 2014, STADY DEEP INTEGRATI
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sergey I, 2012, LECT NOTES COMPUT SC, V7211, P579, DOI 10.1007/978-3-642-28869-2_29
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Smans J, 2009, LECT NOTES COMPUT SC, V5653, P148, DOI 10.1007/978-3-642-03013-0_8
   Summers AJ, 2013, LECT NOTES COMPUT SC, V7920, P129, DOI 10.1007/978-3-642-39038-8_6
   Wise Jenna, 2020, GRADUAL VERIFICATION, DOI [10.5281/zenodo.4085932, DOI 10.5281/ZENODO.4085932]
   Wolff R, 2011, LECT NOTES COMPUT SC, V6813, P459, DOI 10.1007/978-3-642-22655-7_22
NR 22
TC 2
Z9 2
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 228
DI 10.1145/3428296
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900105
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Yu, QS
   He, F
   Wang, BY
AF Yu, Qianshan
   He, Fei
   Wang, Bow-Yaw
TI Incremental Predicate Analysis for Regression Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Software verification; predicate analysis; change impact analysis;
   incremental verification
ID IMPACT ANALYSIS; MODEL; EFFICIENT
AB Software products are evolving during their life cycles. Ideally, every revision need be formally verified to ensure software quality. Yet repeated formal verification requires significant computing resources. Verifying each and every revision can be very challenging. It is desirable to ameliorate regression verification for practical purposes. In this paper, we regard predicate analysis as a process of assertion annotation. Assertion annotations can be used as a certificate for the verification results. It is thus a waste of resources to throw them away after each verification. We propose to reuse the previously-yielded assertion annotation in regression verification. A light-weight impact-analysis technique is proposed to analyze the reusability of assertions. A novel assertion strengthening technique is furthermore developed to improve reusability of annotation. With these techniques, we present an incremental predicate analysis technique for regression verification. Correctness of our incremental technique is formally proved. We performed comprehensive experiments on revisions of Linux kernel device drivers. Our technique outperforms the state-of-the-art program verification tool CPAchecker by getting 2.8x speedup in total time and solving additional 393 tasks.
C1 [Yu, Qianshan; He, Fei] Tsinghua Univ, Sch Software, Beijing, Peoples R China.
   [Yu, Qianshan; He, Fei] MoE, Key Lab Informat Syst Secur, Beijing, Peoples R China.
   [He, Fei; Wang, Bow-Yaw] Beijing Natl Res Ctr Informat Sci & Technol, Beijing, Peoples R China.
C3 Tsinghua University
RP Yu, QS (corresponding author), Tsinghua Univ, Sch Software, Beijing, Peoples R China.; Yu, QS (corresponding author), MoE, Key Lab Informat Syst Secur, Beijing, Peoples R China.
EM yqs17@mails.tsinghua.edu.cn; hefei@tsinghua.edu.cn;
   bywang@iis.sinaca.edu.tw
OI He, Fei/0000-0002-4266-875X; Yu, Qianshan/0000-0003-4584-6125
FU NSF of China [61672310, 62072267]; National Key R&D Program of China
   [2018YFB1308601]; Guangdong Science and Technology Department
   [2018B010107004]
FX This work was partially funded by the NSF of China (No. 61672310 and No.
   62072267), the National Key R&D Program of China (No. 2018YFB1308601),
   and the Guangdong Science and Technology Department (No.
   2018B010107004).
CR Andronick J, 2012, PROC INT CONF SOFTW, P1002, DOI 10.1109/ICSE.2012.6227120
   Antoniol G., 2000, Proceedings of the Fourth European Conference on Software Maintenance and Reengineering, P227, DOI 10.1109/CSMR.2000.827331
   Apiwattanapong T, 2005, PROC INT CONF SOFTW, P432
   Aquino Andrea., 2015, Proceedings of the 2015 International Symposium on Software Testing and Analysis, P305
   Arnold Robert S., 1996, SOFTWARE CHANGE IMPA
   Ball T, 2001, LECT NOTES COMPUT SC, V2102, P260
   Ball T, 2001, ACM SIGPLAN NOTICES, V36, P203, DOI 10.1145/381694.378846
   Barrett C., 2010, P 8 INT WORKSHOP SAT, V13, P14
   Beyer Dirk, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P184, DOI 10.1007/978-3-642-22110-1_16
   Beyer D., 2010, 2010 Formal Methods in Computer-Aided Design (FMCAD 2010), P189
   Beyer D., 2013, ESEC FSE, P389, DOI [10.1145/2491411.2491429, DOI 10.1145/2491411.2491429]
   Beyer D, 2008, LECT NOTES COMPUT SC, V5123, P304
   Beyer D, 2007, LECT NOTES COMPUT SC, V4590, P504
   Breech B, 2004, PROC IEEE INT CONF S, P453, DOI 10.1109/ICSM.2004.1357834
   Chaki S, 2012, LECT NOTES COMPUT SC, V7148, P119, DOI 10.1007/978-3-642-27940-9_9
   Chaumun MA, 2002, SCI COMPUT PROGRAM, V45, P155, DOI 10.1016/S0167-6423(02)00058-8
   Cimatti A, 2008, LECT NOTES COMPUT SC, V4963, P397, DOI 10.1007/978-3-540-78800-3_30
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   D'Silva V, 2008, IEEE T COMPUT AID D, V27, P1165, DOI 10.1109/TCAD.2008.923410
   Das S., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P160
   Fedyukovich G, 2016, LECT NOTES COMPUT SC, V9780, P433, DOI 10.1007/978-3-319-41540-6_24
   Fedyukovich G, 2014, LECT NOTES COMPUT SC, V8430, P300, DOI 10.1007/978-3-319-06200-6_25
   Fedyukovich G, 2013, LECT NOTES COMPUT SC, V7795, P292, DOI 10.1007/978-3-642-36742-7_21
   GALLAGHER KB, 1991, IEEE T SOFTWARE ENG, V17, P751, DOI 10.1109/32.83912
   Godefroid P, 2011, LECT NOTES COMPUT SC, V6887, P112, DOI 10.1007/978-3-642-23702-7_12
   Godlin B, 2009, DES AUT CON, P466
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   He F, 2016, LECT NOTES COMPUT SC, V9779, P310, DOI 10.1007/978-3-319-41528-4_17
   Henzinger TA, 2004, ACM SIGPLAN NOTICES, V39, P232, DOI 10.1145/982962.964021
   Henzinger TA, 2003, LECT NOTES COMPUT SC, V2648, P235
   Henzinger TA, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/565816.503279
   Henzinger Thomas A., 2003, EXTREME MODEL CHECKI, P332, DOI [10.1007/978-3-540-39910-0_16, DOI 10.1007/978-3-540-39910-0_16]
   Jia Xiangyang, 2015, P 2015 INT S SOFTWAR, P177
   Khoroshilov A, 2010, LECT NOTES COMPUT SC, V5947, P165, DOI 10.1007/978-3-642-11486-1_14
   Klebanov V, 2018, FORM METHOD SYST DES, V52, P229, DOI 10.1007/s10703-017-0293-8
   Lahiri ShuvenduK., 2013, ACM SIGSOFT S FDN SO, P345, DOI DOI 10.1145/2491411.2491452
   Lehman M. M., 1985, Program Evolution: Processes of Software Change
   Lehman MM, 1997, FOURTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P20, DOI 10.1109/METRIC.1997.637156
   Lehman MM, 1998, PROC IEEE INT CONF S, P208, DOI 10.1109/ICSM.1998.738510
   Mandrykin MU, 2012, PROGRAM COMPUT SOFT+, V38, P245, DOI 10.1134/S0361768812050039
   McMillan KL, 2006, LECT NOTES COMPUT SC, V4144, P123
   Melnik S, 2002, PROC INT CONF DATA, P117, DOI 10.1109/ICDE.2002.994702
   Nielson Flemming, 2015, Principles of Program Analysis, DOI [10.1007/978-3-662-03811-6, DOI 10.1007/978-3-662-03811-6]
   Orso A., 2003, Software Engineering Notes, V28, P128, DOI 10.1145/949952.940089
   Parker David, 2012, Proceedings. Lecture Notes in Computer Science, P248, DOI [10.1007/978-3-642-31759-0_19, DOI 10.1007/978-3-642-31759-0_19, DOI 10.1007/978-3-642-31759-019]
   Rothenberg BC, 2018, LECT NOTES COMPUT SC, V11002, P364, DOI 10.1007/978-3-319-99725-4_22
   Ryder BG, 2001, ACM SIGPLAN NOTICES, P46
   Sery O, 2012, PROCEEDINGS OF THE 12TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2012), P114
   Turski WM, 1996, IEEE T SOFTWARE ENG, V22, P599, DOI 10.1109/32.536959
   Visser W, 2012, P FSE, P58, DOI DOI 10.1145/2393596.2393665
   Wonisch Daniel, 2012, P INT C FORM ENG MET, P332
   Yang GW, 2014, ACM T SOFTW ENG METH, V24, DOI 10.1145/2629536
   Yang GW, 2009, PROC IEEE INT CONF S, P115, DOI 10.1109/ICSM.2009.5306334
NR 54
TC 1
Z9 1
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 184
DI 10.1145/3428252
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900061
OA gold
DA 2024-07-18
ER

PT J
AU Hickey, R
AF Hickey, Rich
TI A History of Clojure
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Clojure; Lisp
AB Clojure was designed to be a general-purpose, practical functional language, suitable for use by professionals wherever its host language, e.g., Java, would be. Initially designed in 2005 and released in 2007, Clojure is a dialect of Lisp, but is not a direct descendant of any prior Lisp. It complements programming with pure functions of immutable data with concurrency-safe state management constructs that support writing correct multithreaded programs without the complexity of mutex locks.
   Clojure is intentionally hosted, in that it compiles to and runs on the runtime of another language, such as the JVM. This is more than an implementation strategy; numerous features ensure that programs written in Clojure can leverage and interoperate with the libraries of the host language directly and efficiently. In spite of combining two (at the time) rather unpopular ideas, functional programming and Lisp, Clojure has since seen adoption in industries as diverse as finance, climate science, retail, databases, analytics, publishing, healthcare, advertising and genomics, and by consultancies and startups worldwide, much to the career-altering surprise of its author.
   Most of the ideas in Clojure were not novel, but their combination puts Clojure in a unique spot in language design (functional, hosted, Lisp). This paper recounts the motivation behind the initial development of Clojure and the rationale for various design decisions and language constructs. It then covers its evolution subsequent to release and adoption.
C1 [Hickey, Rich] Cognitect Inc, Durham, NC 27701 USA.
RP Hickey, R (corresponding author), Cognitect Inc, Durham, NC 27701 USA.
EM richhickey@gmail.com
CR Anglican, 2020, ANGL WEB SIT
   [Anonymous], 1999, PURELY FUNCTIONAL DA
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], Hercules
   Bagwell P., 2001, ES GRANDS CHAMPS, V1195
   Bagwell Philip, 2011, RRB TREES EFFICIENT, P16
   Baker H. G., 1993, OOPS Messenger, V4, P2
   BERNSTEIN PA, 1983, ACM T DATABASE SYST, V8, P465, DOI 10.1145/319996.319998
   Bird R., 1988, LECT CONSTRUCTIVE FU
   Bonnaire-Sergeant A, 2016, LECT NOTES COMPUT SC, V9632, P68, DOI 10.1007/978-3-662-49498-1_4
   Click Cliff, 2002, P 2002 JOINT ACMISCO, P96, DOI DOI 10.1145/583810.583821
   clojure.org, 2019, CO US CLOJ
   clojure.org, 2020, CLOJ SUCC STOR
   clojurebridge.org, 2020, CLOJUREBRIDGE
   ClojureIRC, 2008, CLOJ IRC LOG
   ClojureTV, 2019, CLOJURETV NA
   Crim Robert, 2016, FUNDING CIRCLE LENDI
   diab0lic, 2018, CLOJ NETFL
   DRISCOLL JR, 1989, J COMPUT SYST SCI, V38, P86, DOI 10.1016/0022-0000(89)90034-2
   edn, 2014, EDN SPEC
   edn, 2019, EDN IMPL
   Ernst M., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P186, DOI 10.1007/BFb0054092
   Gabriel R. P., 1988, LISP and Symbolic Computation, V1, P81, DOI 10.1007/BF01806178
   Gabriel Richard P, 1987, ANSI X3J13 DOCUMENT, P87
   Ges Igor, 2018, CLOJURE VS SEPSIS PA
   Graham Paul, 2003, LISP ESSAYS
   Gray Jim, 1992, TRANSACTION PROCESSI
   Halloway S., 2009, Programming Clojure
   Harris Tim., 2005, PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, P48, DOI DOI 10.1145/1065944.1065952
   Hickey Rich, 2003, DOTLISP LISP DIALECT
   Hickey Rich, 1996, C GEMS, P515
   Hickey Rich, 2004, JFLI JAVA FOREIGN LA
   Hickey Rich, 2005, FOIL FOREIGN OBJECT
   Hickey Rich, 2011, SIMPLE MADE EASY
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   International E, 2017, JAVASCRIPT OBJECT NO
   Kohlbecker Eugene., 1986, P 1986 ACM C LISP FU, P151
   Lindholm T., 1999, JAVA TM VIRTUAL MACH, V2nd
   Linus Bjornstam, 2019, SRFI 171 TRANSDUCERS
   Marcar Anthony, 2015, CLOJURE SCALE
   McGranaghan M, 2011, IEEE INTERNET COMPUT, V15, P97, DOI 10.1109/MIC.2011.148
   Moseley B., 2006, SOFTWARE PRACTICE AD
   Perlis Alan J, 1982, ACM Sigplan Notices, V17, P7, DOI DOI 10.1145/947955.1083808
   Puente Juan Pedro Bolivar, 2015, TRANSDUCERS CLOJURE
   Small Christopher, 2018, CLOJURE CYBERPUNK FR
   Stack Overflow, 2019, DEV SURVEY RESULTS 2
   Steele G. L.  Jr., 1999, Higher-Order and Symbolic Computation, V12, P221, DOI 10.1023/A:1010085415024
   Steele Guy., 1996, HIST PROGRAMMING LAN, P233
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   Steele Jr Guy Lewis, 1978, REVISED REPORT SCHEM
   Tolpin David, 2016, P 28 IMPL APPL FUNCT, DOI DOI 10.1145/3064899.3064910
   W3C, 2014, RDF 1 1 XML SYNT
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wible Edward, 2018, BUILD BANK NUBANK ED
NR 54
TC 12
Z9 12
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 71
DI 10.1145/3386321
PG 46
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900004
OA gold
DA 2024-07-18
ER

PT J
AU Biswas, R
   Enea, C
AF Biswas, Ranadeep
   Enea, Constantin
TI On the Complexity of Checking Transactional Consistency
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE transactional databases; consistency; axiomatic specifications; testing
AB Transactions simplify concurrent programming by enabling computations on shared data that are isolated from other concurrent computations and are resilient to failures. Modern databases provide different consistency models for transactions corresponding to different tradeoffs between consistency and availability. In this work, we investigate the problem of checking whether a given execution of a transactional database adheres to some consistency model. We show that consistency models like read committed, read atomic, and causal consistency are polynomial-time checkable while prefix consistency and snapshot isolation are NP-complete in general. These results complement a previous NP-completeness result concerning serializability. Moreover, in the context of NP-complete consistency models, we devise algorithms that are polynomial time assuming that certain parameters in the input executions, e.g., the number of sessions, are fixed. We evaluate the scalability of these algorithms in the context of several production databases.
C1 [Biswas, Ranadeep; Enea, Constantin] Univ Paris, IRIF, CNRS, F-75013 Paris, France.
C3 Universite Paris Cite; Centre National de la Recherche Scientifique
   (CNRS)
RP Biswas, R (corresponding author), Univ Paris, IRIF, CNRS, F-75013 Paris, France.
EM ranadeep@irif.fr; cenea@irif.fr
FU European Research Council (ERC) under the European Union's Horizon 2020
   research and innovation programme [678177]
FX This work is supported in part by the European Research Council (ERC)
   under the European Union's Horizon 2020 research and innovation
   programme (grant agreement No 678177).
CR Abdulla Parosh Aziz, 2019, OPTIMAL STATELESS MO
   [Anonymous], 2013, K KINGSBURY
   [Anonymous], 2015, K KINGSBURY
   Berenson H., 1995, SIGMOD Record, V24, P1, DOI 10.1145/568271.223785
   Biswas Ranadeep, 2019, ARXIV190804509
   Bouajjani A, 2017, ACM SIGPLAN NOTICES, V52, P626, DOI 10.1145/3093333.3009888
   Burckhardt S., 2015, 29th European Conference on Object-Oriented Programming (ECOOP 2015), volume 37 of Leibniz International Proceedings in Informatics (LIPIcs), P568
   Burckhardt S, 2014, ACM SIGPLAN NOTICES, V49, P271, DOI 10.1145/2535838.2535848
   Cerone Andrea, 2015, CONCUR, P58
   Chalupa M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158119
   Eén N, 2004, LECT NOTES COMPUT SC, V2919, P502, DOI 10.1007/978-3-540-24605-3_37
   Emmi M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158113
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Gibbons PB, 1997, SIAM J COMPUT, V26, P1208, DOI 10.1137/S0097539794279614
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   MAZURKIEWICZ A, 1987, LECT NOTES COMPUT SC, V255, P279
   Ozkan BK, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276530
   PAPADIMITRIOU CH, 1979, J ACM, V26, P631, DOI 10.1145/322154.322158
   Terry D. B., 1994, Proceedings of the Third International Conference on Parallel and Distributed Information Systems (Cat. No.94TH0668-4), P140, DOI 10.1109/PDIS.1994.331722
   Wolper Pierre., 1986, POPL, V86, P184
NR 20
TC 14
Z9 14
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 165
DI 10.1145/3360591
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500050
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Celik, A
   Nie, PY
   Rossbach, CJ
   Gligoric, M
AF Celik, Ahmet
   Nie, Pengyu
   Rossbach, Christopher J.
   Gligoric, Milos
TI Design, Implementation, and Application of GPU-Based Java Bytecode
   Interpreters
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Java bytecode interpreter; Graphics Processing Unit; Sequence-based test
   generation; Shape matching; Complete matching
AB We present the design and implementation of GVM, the first system for executing Java bytecode entirely on GPUs. GVM is ideal for applications that execute a large number of short-living tasks, which share a significant fraction of their codebase and have similar execution time. GVM uses novel algorithms, scheduling, and data layout techniques to adapt to the massively parallel programming and execution model of GPUs.
   We apply GVM to generate and execute tests for Java projects. First, we implement a sequence-based test generation on top of GVM and design novel algorithms to avoid redundant test sequences. Second, we use GVM to execute randomly generated test cases. We evaluate GVM by comparing it with two existing Java bytecode interpreters (Oracle JVM and Java Pathfinder), as well as with the Oracle JVM with just-in-time (JIT) compiler, which has been engineered and optimized for over twenty years. Our evaluation shows that sequence-based test generation on GVM outperforms both Java Pathfinder and Oracle JVM interpreter. Additionally, our results show that GVM performs as well as running our parallel sequence-based test generation algorithm using JVM with JIT with many CPU threads. Furthermore, our evaluation on several classes from open-source projects shows that executing randomly generated tests on GVM outperforms sequential execution on JVM interpreter and JVM with JIT.
C1 [Celik, Ahmet; Nie, Pengyu; Rossbach, Christopher J.; Gligoric, Milos] Univ Texas Austin, Austin, TX 78712 USA.
   [Rossbach, Christopher J.] VMware Res, Austin, TX 78712 USA.
C3 University of Texas System; University of Texas Austin; VMware, Inc.
RP Celik, A (corresponding author), Univ Texas Austin, Austin, TX 78712 USA.
EM ahmetcelik@utexas.edu; pynie@utexas.edu; rossbach@cs.utexas.edu;
   gligoric@utexas.edu
RI Nie, Pengyu/HIK-2527-2022; celik, Ahmet/IAP-5710-2023
OI Nie, Pengyu/0000-0003-1529-3216; 
FU US National Science Foundation [CCF-1652517, CCF-1704790, CNS-1846169]
FX We thank the anonymous reviewers for their comments. We thank Kush Jain,
   Joshua Landgraf, Darko Marinov, Karl Palmskog, Marinela Parovic,
   Zhiqiang Zang, and Chenguang Zhu for their feedback on this work. This
   work was partially supported by the US National Science Foundation under
   Grant Nos. CCF-1652517, CCF-1704790, and CNS-1846169.
CR Akram S, 2016, ACM T ARCHIT CODE OP, V13, DOI 10.1145/2875424
   Amazon, 2018, AM EC2 EL GPUS
   Anand Saswat, 2007, INT C TOOLS ALG CONS
   [Anonymous], UCBEECS2010124
   Ausavarungnirun R., 2018, P INT C ARCH SUPP PR
   Ausavarungnirun R, 2017, 50TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO), P136, DOI 10.1145/3123939.3123975
   Azure, 2018, AZ WIND VM SIZ GPU
   Baghdadi R, 2015, INT CONFER PARA, P138, DOI 10.1109/PACT.2015.17
   Bauer M, 2012, INT CONF HIGH PERFOR
   Bispo Joao, 2015, S APPL COMP
   Blythe D, 2006, ACM T GRAPHIC, V25, P724, DOI 10.1145/1141911.1141947
   Bogdanas D, 2015, ACM SIGPLAN NOTICES, V50, P445, DOI [10.1145/2775051.2676982, 10.1145/2676726.2676982]
   Brown Kevin J., 2011, PACT, DOI DOI 10.1109/PACT.2011.15
   Celik Ahmet, 2017, P ACM PROGRAM LANG, V94, DOI DOI 10.1145/3133918
   Chakravarty M. M., 2011, P 6 WORKSH DECL ASP, P3, DOI DOI 10.1145/1926354.1926358
   DeVito Zachary, 2011, INT C HIGH PERF COMP, V9, P12
   Dubach Christophe, 2012, C PROGRAMMING LANGUA, p1S12
   Ellison C, 2012, ACM SIGPLAN NOTICES, V47, P533, DOI 10.1145/2103621.2103719
   Farooqui Naila, 2014, INT C TIM RES OP SYS, p5S5
   Godefroid P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P174, DOI 10.1145/263699.263717
   Google, 2018, GRAPH PROC UN GPU LE
   Gregory Kate., 2012, C++ AMP: Accelerated Massive Parallelism with Microsoft Visual C++ . Developer Reference
   Hayashi Akihiro, 2013, INT C PRINC PRACT PR
   Hormati AH, 2009, INT CONFER PARA, P214, DOI 10.1109/PACT.2009.39
   Nguyen HV, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P907, DOI 10.1145/2568225.2568300
   Java GPU, 2019, JAV GPU COD ARCH
   Java Pathfinder, 2019, JAV PATHF HOM PAG
   JCuda, 2018, JAV BIND CUDA
   Jikes RVM, 2019, JIK RVM HOM PAG
   Kerr Andrew, 2009, INT S WORKL CHAR, p3S12
   Khronos, 2019, OPENCL OV
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Klöckner A, 2012, PARALLEL COMPUT, V38, P157, DOI 10.1016/j.parco.2011.09.001
   Kuraj Ivan, 2015, C OBJ OR PROGR SYST, p37S56
   Lee VW, 2010, CONF PROC INT SYMP C, P451, DOI 10.1145/1816038.1816021
   Maas Martin, 2012, INT S MEM MAN, p25S36
   Musuvathi M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P446, DOI 10.1145/1250734.1250785
   NVIDIA, 2019, CUDA ZON
   Oracle, 2019, 318 JEP OR
   Oracle, 2019, JAV SE GLANC
   Oracle, 2019, OPENJDK PROJ SUM
   Oracle, 2019, JNI APIS DEV GUID
   Pacheco C, 2007, PROC INT CONF SOFTW, P75
   Palkar Shoumik, 2018, PROC VLDB ENDOW, V11
   Power J, 2014, INT S HIGH PERF COMP, P568, DOI 10.1109/HPCA.2014.6835965
   Pradel M, 2012, ACM SIGPLAN NOTICES, V47, P521, DOI 10.1145/2345156.2254126
   Prasad A, 2011, ACM SIGPLAN NOTICES, V46, P152, DOI 10.1145/1993316.1993517
   Pratt-Szeliga Philip C., 2012, INT C HIGH PERF COMP
   Ragan-Kelley J, 2018, COMMUN ACM, V61, P106, DOI 10.1145/3150211
   Rossbach CJ, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P49, DOI 10.1145/2517349.2522715
   Rossbach CJ, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P233
   Sharma Rohan, 2011, TESTING CONTAINER CL
   Thies W, 2002, LECT NOTES COMPUT SC, V2304, P179
   Tian Xinmin, 2017, WORKSH LLVM COMP INF
   Vesely J, 2016, INT SYM PERFORM ANAL, P161, DOI 10.1109/ISPASS.2016.7482091
   Visser W., 2003, Automated Software Engineering, V10, P203, DOI 10.1023/A:1022920129859
   Visser Willem, 2006, INT S SOFTW TEST AN, p37S48
   Vorontsov Mikhail, 2019, JAVA PERFORMANCE TUN
   Weinsberg Yaron, 2008, INT C ARCH SUPP PROG
   Wijs A, 2016, LECT NOTES COMPUT SC, V9995, P694, DOI 10.1007/978-3-319-48989-6_42
   Wijs Anton, 2014, INT C TOOLS ALG CONS
   Yan YH, 2009, LECT NOTES COMPUT SC, V5704, P887
   Yaneva Vanya, 2017, INT S SOFTW TEST AN, p35S45
   Zaremba Wojciech, 2012, WORKSH GEN PURP PROC
NR 65
TC 2
Z9 2
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 177
DI 10.1145/3360603
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500062
OA gold
DA 2024-07-18
ER

PT J
AU Tosch, E
   Bakshy, E
   Berger, ED
   Jensen, DD
   Moss, JEB
AF Tosch, Emma
   Bakshy, Eytan
   Berger, Emery D.
   Jensen, David D.
   Moss, J. Eliot B.
TI PLANALYZER: Assessing Threats to the Validity of Online Experiments
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Experimental Design; Threats to Validity; Online Experiments
AB Online experiments have become a ubiquitous aspect of design and engineering processes within Internet firms. As the scale of experiments has grown, so has the complexity of their design and implementation. In response, firms have developed software frameworks for designing and deploying online experiments. Ensuring that experiments in these frameworks are correctly designed and that their results are trustworthy-referred to as internal validity-can be difficult. Currently, verifying internal validity requires manual inspection by someone with substantial expertise in experimental design.
   We present the first approach for statically checking the internal validity of online experiments. Our checks are based on well-known problems that arise in experimental design and causal inference. Our analyses target PLANOUT, a widely deployed, open-source experimentation framework that uses a domain-specific language to specify and run complex experiments. We have built a tool called PLANALYZER that checks PLANOUT programs for a variety of threats to internal validity, including failures of randomization, treatment assignment, and causal sufficiency. PLANALYZER uses its analyses to automatically generate contrasts, a key type of information required to perform valid statistical analyses over the results of these experiments. We demonstrate PLANALYZER's utility on a corpus of PLANOUT scripts deployed in production at Facebook, and we evaluate its ability to identify threats to validity on a mutated subset of this corpus. PLANALYZER has both precision and recall of 92% on the mutated corpus, and 82% of the contrasts it generates match hand-specified data.
C1 [Tosch, Emma; Berger, Emery D.; Jensen, David D.; Moss, J. Eliot B.] Univ Massachusetts, CICS, 140 Governors Dr, Amherst, MA 01002 USA.
   [Bakshy, Eytan] Facebook Inc, 1 Hacker Way, Menlo Pk, CA 94025 USA.
C3 University of Massachusetts System; University of Massachusetts Amherst;
   Facebook Inc
RP Tosch, E (corresponding author), Univ Massachusetts, CICS, 140 Governors Dr, Amherst, MA 01002 USA.
EM etosch@cs.umass.edu; ebakshy@fb.com; emery@cs.umass.edu;
   jensen@cs.umass.edu; moss@cs.umass.edu
OI Jensen, David/0000-0001-5653-3349
FU United States Air Force [FA8750-17-C-0120]
FX This material is partially based upon work supported by the United
   States Air Force under Contract No, FA8750-17-C-0120. We thank Facebook,
   Inc. for providing the PlanOut corpus and additional funding. Any
   opinions, findings and conclusions or recommendations expressed in this
   material are those of the author(s) and do not necessarily reflect the
   views of the United States Air Force, nor Facebook, Inc. Additionally,
   we thank KDL members Kaleigh Clary, Amanda Gentzel, and Reilly Grant, as
   well as Sam Baxter, Javier Burroni, John Foley, Cibele Freire, and Bobby
   Powers for comments, feedback, and suggestions throughout the various
   incarnations of this work. We thank Dean Eckles for early feedback on
   this work. Finally, we thank our OOPSLA reviewers, whose detailed
   comments substantially improved the clarity of this paper.
CR Ahler Douglas J, 2019, ANN M MIDW POL SCI
   Aho A.V., 1986, COMPILERS PRINCIPLES
   American Cancer Society, 2019, COMM IS BREAST CANC
   Martinez-Gonzalez MA, 2014, CURR OPIN LIPIDOL, V25, P20, DOI 10.1097/MOL.0000000000000044
   Angrist JD, 1996, J AM STAT ASSOC, V91, P444, DOI 10.2307/2291629
   [Anonymous], 2019, Key statistics for breast cancer
   [Anonymous], 2018, REFACTORING IMPROVIN
   Bakshy E, 2014, WWW'14: PROCEEDINGS OF THE 23RD INTERNATIONAL CONFERENCE ON WORLD WIDE WEB, P283, DOI 10.1145/2566486.2567967
   Bareinboim E., 2015, CAUSAL INFERENCE BIG
   Barowy DW, 2017, PROCEEDINGS OF THE 2017 ACM SIGCHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'17), P2347, DOI 10.1145/3025453.3026025
   Barowy DW, 2012, ACM SIGPLAN NOTICES, V47, P639, DOI 10.1145/2398857.2384663
   Blackburn SM, 2008, COMMUN ACM, V51, P83, DOI 10.1145/1378704.1378723
   Campbell, 2002, EXPT QUASIEXPERIMENT
   Crook T, 2009, KDD-09: 15TH ACM SIGKDD CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1105
   Cunha J, 2012, S VIS LANG HUM CEN C, P243, DOI 10.1109/VLHCC.2012.6344535
   Cunha J, 2012, LECT NOTES COMPUT SC, V7336, P202, DOI 10.1007/978-3-642-31128-4_15
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   Estruch R, 2013, NEW ENGL J MED, V368, P1279, DOI 10.1056/NEJMoa1200303
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Fisher RA, 1936, BMJ-BRIT MED J, V1936, P554
   Fredrikson Matthew., 2014, Proceedings of the Joint Meeting of the Twenty-Third EACSL Annual Conference on Computer Science Logic (CSL) and the Twenty-Ninth Annual ACM/IEEE Symposium on Logic in Computer Science (LICS), P42
   Futamura Y., 1999, Higher-Order and Symbolic Computation, V12, P381, DOI 10.1023/A:1010095604496
   GELMAN A, 1990, AM J POLIT SCI, V34, P1142, DOI 10.2307/2111475
   Gerber A., 2012, FIELD EXPT DESIGN AN
   Goodman ND., 2008, UAI, P220
   Gordon AD, 2014, ACM SIGPLAN NOTICES, V49, P321, DOI 10.1145/2535838.2535850
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Grömping U, 2014, J STAT SOFTW, V56, P1
   Gronmping Ulrike, 2017, CRAN TASK VIEW DESIG
   Hermans F, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P7, DOI 10.1109/ICSE.2015.129
   Hermans F, 2015, EMPIR SOFTW ENG, V20, P549, DOI 10.1007/s10664-013-9296-2
   Hermans F, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P409, DOI 10.1109/ICSM.2012.6405300
   Hernan M.A., 2016, Causal Inference
   Jensen DavidD., 2008, KDD '08, P372, DOI DOI 10.1145/1401890.1401938
   Kohavi R, 2013, 19TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING (KDD'13), P1168
   Kohavi R, 2009, DATA MIN KNOWL DISC, V18, P140, DOI 10.1007/s10618-008-0114-1
   Kohavi Ron., 2015, Encyclopedia of Machine Learning and Data Mining
   Krishnan SS, 2013, IEEE ACM T NETWORK, V21, P2001, DOI 10.1109/TNET.2013.2281542
   Little RJ, 2000, ANNU REV PUBL HEALTH, V21, P121, DOI 10.1146/annurev.publhealth.21.1.121
   Livshits Benjamin, 2014, MSRTR2014145
   McCook A., 2018, ERRORS TRIGGER RETRA
   Minka Tom, 2009, Advances in Neural Information Processing Systems, P1073
   Morgan SL, 2015, ANAL METHOD SOC RES, P1
   Muchnick S., 1997, ADV COMPILER DESIGN
   Murphy SA, 2003, J R STAT SOC B, V65, P331, DOI 10.1111/1467-9868.00389
   Panko R. R., 1998, Journal of End User Computing, V10, P15
   Parkes David C, 2012, 4 WORKSH HUM COMP HC
   Pearl J, 2009, CAUSALITY, DOI DOI 10.1017/CBO9780511803161
   Pfeffer Avi, 2016, Practical probabilistic programming
   Rubin DB, 2005, J AM STAT ASSOC, V100, P322, DOI 10.1198/016214504000001880
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Sall John, 1989, JMP DESIGN EXPT
   Scheines Richard, 2003, AM ED RES ASS
   Schiffman E, 2014, J ORAL FACIAL PAIN H, V28, P6, DOI 10.11607/jop.1151
   Sekhon J. S., 2008, The Oxford Handbook of Political Methodology, V2, P1, DOI [DOI 10.1093/OXFORDHB/9780199286546.003.0011, 10.1093/oxfordhb/9780199286546.003.0011]
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Sherman A, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND SYMPOSIUM ON NETWORKED SYSTEMS DESIGN & IMPLEMENTATION (NSDI '05), P245
   Shin Jaeho, 2013, 3X DATA MANAGEMENT S
   Signorello Lisa B, 2002, Am J Ther, V9, P199, DOI 10.1097/00045391-200205000-00005
   Spangler S, 2014, PROCEEDINGS OF THE 20TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING (KDD'14), P1877, DOI 10.1145/2623330.2623667
   Spivak DI, 2012, PLOS ONE, V7, DOI 10.1371/journal.pone.0024274
   Spivak DI, 2014, CATEGORY THEORY FOR THE SCIENCES, P1
   Splawa Neyman J., 1990, STAT SCI, V5, P465
   Sybrandt J, 2017, KDD'17: PROCEEDINGS OF THE 23RD ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1633, DOI 10.1145/3097983.3098057
   Tang CQ, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P328, DOI 10.1145/2815400.2815401
   Tang D., 2010, P 16 ACM SIGKDD INT, P17, DOI [DOI 10.1145/1835804.1835810, 10.1145/1835804.1835810]
   Tikka S, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i12
   Tosch E, 2014, ACM SIGPLAN NOTICES, V49, P197, DOI [10.1145/2660193.2660206, 10.1145/2714064.2660206]
   Ulrike Gronmping, 2016, FRF2 FRACT FACT DES
   Valiant L. G., 1979, Theoretical Computer Science, V8, P189, DOI 10.1016/0304-3975(79)90044-6
   Wang W, 2015, INT J FORECASTING, V31, P980, DOI 10.1016/j.ijforecast.2014.06.001
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
NR 75
TC 1
Z9 3
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 182
DI 10.1145/3360608
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500067
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Gratzer, D
   Sterling, J
   Birkedal, L
AF Gratzer, Daniel
   Sterling, Jonathan
   Birkedal, Lars
TI Implementing a Modal Dependent Type Theory
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Modal types; dependent types; normalization by evaluation; type-checking
AB Modalities are everywhere in programming and mathematics! Despite this, however, there are still significant technical challenges in formulating a core dependent type theory with modalities. We present a dependent type theory MLTT(sic) supporting the connectives of standard Martin-Lof Type Theory as well as an S4-style necessity operator. MLTT(sic) supports a smooth interaction between modal and dependent types and provides a common basis for the use of modalities in programming and in synthetic mathematics. We design and prove the soundness and completeness of a type checking algorithm for MLTT(sic), using a novel extension of normalization by evaluation. We have also implemented our algorithm in a prototype proof assistant for MLTT(sic), demonstrating the ease of applying our techniques.
C1 [Gratzer, Daniel; Birkedal, Lars] Aarhus Univ, Comp Sci, Aabogade 34, DK-8200 Aarhus N, Denmark.
   [Sterling, Jonathan] Carnegie Mellon Univ, Comp Sci Dept, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
C3 Aarhus University; Carnegie Mellon University
RP Gratzer, D (corresponding author), Aarhus Univ, Comp Sci, Aabogade 34, DK-8200 Aarhus N, Denmark.
EM gratzer@cs.au.dk; jmsterli@cs.cmu.edu; birkedal@cs.au.dk
OI Gratzer, Daniel/0000-0003-1944-0789; Sterling,
   Jonathan/0000-0002-0585-5564
FU Air Force Office of Scientific Research through MURI [FA9550-15-1-0053];
   ModuRes Sapere Aude Advanced Grant from The Danish Council for
   Independent Research for the Natural Sciences (FNU); VILLUM FONDEN
   [12386]
FX The authors gratefully acknowledge the support of the Air Force Office
   of Scientific Research through MURI grant FA9550-15-1-0053. Any
   opinions, findings and conclusions or recommendations expressed in this
   material are those of the authors and do not necessarily reflect the
   views of the AFOSR. This research was supported in part by the ModuRes
   Sapere Aude Advanced Grant from The Danish Council for Independent
   Research for the Natural Sciences (FNU) and in part by a research grant
   (12386, Guarded Homotopy Type Theory) from VILLUM FONDEN.
CR Abadi Martin, 1999, POPL 99 P 26 ACM SIG, P147, DOI [10.1145/292540.292555, DOI 10.1145/292540.292555]
   Abel A, 2007, ELECTRON NOTES THEOR, V173, P17, DOI 10.1016/j.entcs.2007.02.025
   Abel A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110277
   Abel A, 2009, LECT NOTES COMPUT SC, V5608, P5, DOI 10.1007/978-3-642-02273-9_3
   Abel Andreas, 2009, 2009 WORKSH NORM EV 2009 WORKSH NORM EV
   Allen Stuart Frazier, 1987, NONTYPE THEORETIC SE
   Altenkirch Thorsten, 1995, LNCS
   Angiuli Carlo, 2019, THESIS CARNEGIE MELL THESIS CARNEGIE MELL
   Angiuli Carlo, 2019, CARTESIAN CUBICAL TY
   Bahr P, 2017, IEEE S LOG
   Berger Ulrich, 1991, 6 ANN IEEE S LOG, P203, DOI 10.1109/LICS.1991.151645
   Birkedal Lars, 2016, 25 EACSL ANN C COMP 25 EACSL ANN C COMP, V62
   Birkedal Lars, 2011, IEEE S LOG, p55S64, DOI DOI 10.1109/LICS.2011.16
   Bizjak A, 2018, ELECTRON NOTES THEOR, V336, P57, DOI 10.1016/j.entcs.2018.03.016
   Bizjak A, 2015, ELECTRON NOTES THEOR, V319, P83, DOI 10.1016/j.entcs.2015.12.007
   Bizjak Ales, 2016, LECT NOTES COMPUT SC, DOI DOI 10.1007/978-3-662-49630-5_2
   Bock Peter Brottveit, 2015, CONTEXTUAL LOGICAL F, V9450, P402, DOI [10.1007/978-3-662-48899-7_28, DOI 10.1007/978-3-662-48899-7_28]
   Boespflug M, 2011, ELECTRON PROC THEOR, P29, DOI 10.4204/EPTCS.71.3
   Borghuis V. A. J., 1994, Coming to terms with modal logic: on the interpretation of modalities in typed lambda-calculus, DOI [10.6100/IR427575, DOI 10.6100/IR427575]
   Clouston R, 2015, LECT NOTES COMPUT SC, V9034, P407, DOI 10.1007/978-3-662-46678-0_26
   Clouston Ranald, 2018, LECT NOTES COMPUTER, DOI DOI 10.1007/978-3-319-89366-2_14
   Clouston Ranald, 2018, MODAL DEPENDENT TYPE
   Coq Development Team, 2016, COQ PROOF ASS REF MA
   Coquand T, 1996, SCI COMPUT PROGRAM, V26, P167, DOI 10.1016/0167-6423(95)00021-6
   Coquand Thierry, 2018, CANONICITY NORMALIZA
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   Epstein Jeff, 2011, HASKELL CLOUD
   Fiore Marcelo, 2002, PROC PPDP 02, p26S37, DOI 10.1145/571157.571161
   FREYD P, 1991, LECT NOTES MATH, V1488, P95
   Granstrom Johan G., 2013, TREATISE INTUITIONIS
   Guatto Adrien, 2018, DOI 10.1145/3209108.3209148
   Harper R, 2007, J FUNCT PROGRAM, V17, P613, DOI 10.1017/S0956796807006430
   Kavvos GA, 2017, IEEE S LOG
   Krebbers Robbert, 2017
   Lawvere F. William, 1992, GRUNDL KOMM, P14
   Lawvere F. William, 2007, THEOR APPL CATEG, V19
   Licata Daniel R., 2017, LIPIcs, V84, DOI [10.4230/LIPIcs.FSCD.2017.25, DOI 10.4230/LIPICS.FSCD.2017.25]
   Licata Daniel R., 2018, LIPICS, DOI 10.4230/LIPIcs.FSCD.2018.22
   Mannaa Bassel, 2018, 3 INT C FORM STRUCT, V23, p1S23
   Martin-Lof P., 1992, SUBSTITUTION CALCULU
   Martin-Lof P., 1996, Nordic J. Philosophical Logic, V1, P11
   Martin-Lof Per, 1975, STUDIES LOGIC FDN MA, V80, P73, DOI 10.1016/S0049-237X(08)71945-1
   Martini Simone, 1996, COMPUTATIONAL INTERP, DOI [10.1007/978-94-017-2798-3_12, DOI 10.1007/978-94-017-2798-3_12]
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Murphy Tom, 2004, P 19 IEEE S LOG COMP P 19 IEEE S LOG COMP
   Murphy Tom, 2008, Modal Types for Mobile Code
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   Pientka B, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785683
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Prawitz Dag, 1967, J SYMBOLIC LOGIC, V32, P255
   Schreiber U, 2014, ELECTRON P THEOR COM, P109, DOI 10.4204/EPTCS.158.8
   Schreiber Urs, 2013, ARXIV13107930 ARXIV13107930
   Schroeder-Heister P., 1987, STRUCTURAL FRAMEWORK
   Shulman M, 2018, MATH STRUCT COMP SCI, V28, P856, DOI 10.1017/S0960129517000147
   Streicher Thomas, 1998, PREL P APPSEM WORKSH PREL P APPSEM WORKSH
   The Agda Development Team, 2018, AGD FLAT AGD FLAT
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   Wieczorek Pawel, 2018, P 7 ACM SIGPLAN INT, DOI [10.1145/3167091, DOI 10.1145/3167091]
NR 60
TC 13
Z9 15
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 107
DI 10.1145/3341711
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900030
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Muller, SK
   Westrick, S
   Acar, UA
AF Muller, Stefan K.
   Westrick, Sam
   Acar, Umut A.
TI Fairness in Responsive Parallelism
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Parallelism; Concurrency; Priorities; Cost Semantics; Fairness;
   Starvation
ID THREAD-LEVEL PARALLELISM; IMPLEMENTATION; EFFICIENCY
AB Research on parallel computing has historically revolved around compute-intensive applications drawn from traditional areas such as high-performance computing. With the growing availability and usage of multicore chips, applications of parallel computing now include interactive parallel applications that mix compute-intensive tasks with interaction, e.g., with the user or more generally with the external world. Recent theoretical work on responsive parallelism presents abstract cost models and type systems for ensuring and reasoning about responsiveness and throughput of such interactive parallel programs.
   In this paper, we extend prior work by considering a crucial metric: fairness. To express rich interactive parallel programs, we allow programmers to assign priorities to threads and instruct the scheduler to obey a notion of fairness. We then propose the fairly prompt scheduling principle for executing such programs; the principle specifies the schedule for multithreaded programs on multiple processors. For such schedules, we prove theoretical bounds on the execution and response times of jobs of various priorities. In particular, we bound the amount, i.e., stretch, by which a low-priority job can be delayed by higher-priority work. We also present an algorithm designed to approximate the fairly prompt scheduling principle on multicore computers, implement the algorithm by extending the Standard ML language, and present an empirical evaluation.
C1 [Muller, Stefan K.; Westrick, Sam; Acar, Umut A.] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Acar, Umut A.] INRIA, Paris, France.
C3 Carnegie Mellon University; Inria
RP Muller, SK (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM smuller@cs.cmu.edu; swestric@cs.cmu.edu; umut@cs.cmu.edu
OI Westrick, Sam/0000-0003-2848-9808
FU National Science Foundation
FX This research was partially funded by the National Science Foundation.
   The authors would like to thank Samuel Yeom, Peter Elliott and the
   anonymous reviewers for their helpful feedback.
CR Acar UA, 2002, THEOR COMPUT SYST, V35, P321, DOI 10.1007/s00224-002-1057-3
   Acar UA, 2018, ACM SIGPLAN NOTICES, V53, P769, DOI [10.1145/3192366.3192391, 10.1145/3296979.3192391]
   Acar UA, 2016, J FUNCT PROGRAM, V26, DOI 10.1017/S0956796816000101
   Acar UA, 2013, ACM SIGPLAN NOTICES, V48, P219, DOI 10.1145/2517327.2442538
   Agrawal K, 2014, PROCEEDINGS OF THE 26TH ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES (SPAA'14), P84, DOI 10.1145/2612669.2612688
   [Anonymous], 2011, Intel threading building blocks tutorial
   [Anonymous], 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08
   Arora NS, 2001, THEOR COMPUT SYST, V34, P115, DOI 10.1007/s00224-001-0004-z
   Baumann A, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P29
   Blake G, 2010, CONF PROC INT SYMP C, P302, DOI 10.1145/1816038.1816000
   Blelloch G.E., 2004, ACM symposium on Parallelism in algorithms and architectures, P235
   BLELLOCH GE, 1994, J PARALLEL DISTR COM, V21, P4, DOI 10.1006/jpdc.1994.1038
   Blelloch GE, 1999, J ACM, V46, P281, DOI 10.1145/301970.301974
   Blelloch GE, 2011, SPAA 11: PROCEEDINGS OF THE TWENTY-THIRD ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P355
   Blelloch Guy E., 2010, P 22 ANN ACM S PAR A, DOI [10.1145/1810479.1810519, DOI 10.1145/1810479.1810519]
   Blumofe RD, 1998, SIAM J COMPUT, V27, P202, DOI 10.1137/S0097539793259471
   Blumofe RD, 1999, J ACM, V46, P720, DOI 10.1145/324133.324234
   Blumofe RD, 1996, J PARALLEL DISTR COM, V37, P55, DOI 10.1006/jpdc.1996.0107
   BRENT RP, 1974, J ACM, V21, P201, DOI 10.1145/321812.321815
   Burton F.W., 1981, P 1981 C FUNCTIONAL, P187
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   Chowdhury RA, 2008, SPAA'08: PROCEEDINGS OF THE TWENTIETH ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P207
   DEMERS A, 1989, COMP COMM R, V19, P1, DOI 10.1145/75247.75248
   EAGER DL, 1989, IEEE T COMPUT, V38, P408, DOI 10.1109/12.21127
   Flautner K, 2000, ACM SIGPLAN NOTICES, V35, P129, DOI 10.1145/384264.379233
   Fluet M, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P119
   Fluet Matthew, 2011, J FUNCT PROGRAM, V20, P1
   Francez, 1986, FAIRNESS
   Frigo M, 1998, ACM SIGPLAN NOTICES, V33, P212, DOI 10.1145/277652.277725
   Gao C, 2014, INT SYM PERFORM ANAL, P126, DOI 10.1109/ISPASS.2014.6844468
   Goyal P, 1996, PROCEEDINGS OF THE SECOND SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '96), P107, DOI 10.1145/248155.238766
   Greiner J, 1999, ACM T PROGR LANG SYS, V21, P240, DOI 10.1145/316686.316690
   Guatto Adrien, 2018, ACM SIGPLAN Notices, V53, P81, DOI 10.1145/3200691.3178494
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Harchol-Balter Mor, 2013, Performance modeling and design of computer systems: queueing theory in action
   Hauser C., 1993, Operating Systems Review, V27, P94, DOI 10.1145/173668.168627
   Imam S, 2015, LECT NOTES COMPUT SC, V9233, P222, DOI 10.1007/978-3-662-48096-0_18
   Imam Shams., 2014, P 2014 INT C PRINCIP, P75
   Keller G, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P261
   Knepper RA, 2010, IEEE INT CONF ROBOT, P1985, DOI 10.1109/ROBOT.2010.5509669
   Kuper L, 2014, ACM SIGPLAN NOTICES, V49, P2, DOI 10.1145/2666356.2594312
   LaValle S.M., 1998, RAPIDLY EXPLORING RA, V129, P98
   Lea Doug, 2000, JAVA, P36
   Leijen D, 2009, ACM SIGPLAN NOTICES, V44, P227, DOI 10.1145/1639949.1640106
   Li J, 2017, REAL-TIME SYST, V53, P760, DOI 10.1007/s11241-017-9281-8
   Li J, 2016, PROCEEDINGS OF 2016 IEEE REAL-TIME SYSTEMS SYMPOSIUM (RTSS), P203, DOI [10.1109/RTSS.2016.028, 10.1109/RTSS.2016.27]
   Li J, 2014, EUROMICRO, P85, DOI 10.1109/ECRTS.2014.23
   Mattheis Sebastian, 2012, Architecture of Computing Systems - ARCS 2012. Proceedings 25th International Conference, P172, DOI 10.1007/978-3-642-28293-5_15
   Muller S.K., 2016, P 28 ACM S PARALLELI, P71, DOI DOI 10.1145/2935764.2935793
   Muller SK, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236790
   Muller SK, 2017, ACM SIGPLAN NOTICES, V52, P677, DOI [10.1145/3062341.3062370, 10.1145/3140587.3062370]
   Narlikar GJ, 1999, ACM T PROGR LANG SYS, V21, P138, DOI 10.1145/314602.314607
   Nieh J., 1994, Network and Operating System Support for Digital Audio and Video. 4th International Workshop, NOSSDAV '93. Proceedings, P41
   Olivier S, 2007, LECT NOTES COMPUT SC, V4382, P235, DOI 10.1007/978-3-540-72521-3_18
   Raghunathan R, 2016, ACM SIGPLAN NOTICES, V51, P392, DOI 10.1145/3022670.2951935
   Saifullah A, 2014, IEEE T PARALL DISTR, V25, P3242, DOI 10.1109/TPDS.2013.2297919
   Saifullah A, 2013, REAL-TIME SYST, V49, P404, DOI 10.1007/s11241-012-9166-9
   Silberschatz A., 2009, OPERATING SYSTEM CON
   Sivaramakrishnan K. C., 2014, J FUNCTIONAL PROGRAM, P1
   Spoonhower Daniel, 2009, Ph. D. Dissertation
   Sturtevant NR, 2012, IEEE T COMP INTEL AI, V4, P144, DOI 10.1109/TCIAIG.2012.2197681
   Tardieu O, 2014, ACM SIGPLAN NOTICES, V49, P53, DOI [10.1145/2692916.2555245, 10.1145/10.1145/2555243.2555245]
   The Go Authors, 2018, GO PROGR LANG SPEC
   ULLMAN JD, 1975, J COMPUT SYST SCI, V10, P384, DOI 10.1016/S0022-0000(75)80008-0
   WALDSPURGER CA, 1994, OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI), P1
   Wimmer M, 2014, ACM SIGPLAN NOTICES, V49, P379, DOI [10.1145/2692916.2555278, 10.1145/2555243.2555278]
   Wimmer M, 2013, ACM SIGPLAN NOTICES, V48, P315, DOI 10.1145/2517327.2442562
NR 67
TC 7
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 31
DI 10.1145/3341685
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900004
OA gold
DA 2024-07-18
ER

PT J
AU Kokke, W
   Montesi, F
   Peressotti, M
AF Kokke, Wen
   Montesi, Fabrizio
   Peressotti, Marco
TI Better Late Than Never A Fully-Abstract Semantics for Classical
   Processes
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Behavioural Theory; Curry-I toward correspondence; Deadlock-freedom
AB We present Hypersequent Classical Processes (HCP), a revised interpretation of the "Proofs as Processes" correspondence between linear logic and the pi-calculus initially proposed by Abramsky [1994], and later developed by Bellin and Scott [1994], Caires and Pfenning [2010], and Wadler [2014], among others. HCP mends the discrepancies between linear logic and the syntax and observable semantics of parallel composition in the pi-calculus, by conservatively extending linear logic to hyperenvironments (collections of environments, inspired by the hypersequents by Avron [1991]). Separation of environments in hyperenvironments is internalised by circle times and corresponds to parallel process behaviour. Thanks to this property, for the first time we are able to extract a labelled transition system (Its) semantics from proof rewritings. Leveraging the information on parallelism at the level of types, we obtain a logical reconstruction of the delayed actions that Merro and Sangiorgi [2004] formulated to model non-blocking I/O in the pi-calculus. We define a denotational semantics for processes based on Brzozowski derivatives, and uncover that non-interference in HCP corresponds to Fubini's theorem of double antiderivation. Having an Its allows us to validate HCP using the standard toolbox of behavioural theory. We instantiate bisimilarity and barbed congruence for HCP, and obtain a full abstraction result: bisimilarity, denotational equivalence, and barbed congruence coincide.
C1 [Kokke, Wen] Univ Edinburgh, Lab Fdn Comp Sci, 10 Crichton St, Edinburgh EH8 9AB, Midlothian, Scotland.
   [Montesi, Fabrizio; Peressotti, Marco] Univ Southern Denmark, Dept Math & Comp Sci, Campusvej 55, DK-5230 Odense, Denmark.
C3 University of Edinburgh; University of Southern Denmark
RP Kokke, W (corresponding author), Univ Edinburgh, Lab Fdn Comp Sci, 10 Crichton St, Edinburgh EH8 9AB, Midlothian, Scotland.
EM wen.kokke@ed.ac.uk; fmontesi@imada.sdu.dk; peressotti@imada.sdu.dk
RI Peressotti, Marco/ABD-8202-2020; Montesi, Fabrizio/AAE-3306-2022
OI Peressotti, Marco/0000-0002-0243-0480; Montesi,
   Fabrizio/0000-0003-4666-901X
FU Independent Research Fund Denmark [DFF-7014-00041]; Engineering and
   Physical Sciences Research Council [EP/L01503X/1]; EPSRC [EP/K034413/1]
   Funding Source: UKRI
FX We are grateful to P. Wadler, S. Lindley, and the anonymous reviewers
   for their comments.This work was partially supported by the Independent
   Research Fund Denmark, grant no. DFF-7014-00041, and the Engineering and
   Physical Sciences Research Council, grant no. EP/L01503X/1.
CR Abramsky Samson, 1994, THEOR COMPUT SCI, V135, p5S9
   Atkey Robert, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P32, DOI 10.1007/978-3-319-30936-1_2
   Atkey R, 2017, LECT NOTES COMPUT SC, V10201, P56, DOI 10.1007/978-3-662-54434-1_3
   Avron A., 1991, Annals of Mathematics and Artificial Intelligence, V4, P225, DOI 10.1007/BF01531058
   Barr M, 1996, J PURE APPL ALGEBRA, V111, P1, DOI 10.1016/0022-4049(95)00040-2
   Barr M., 1991, MATH STRUCTURES COMP, V1, P159, DOI [DOI 10.1017/S0960129500001274, 10.1017/S0960129500001274]
   BELLIN G, 1994, THEOR COMPUT SCI, V135, P11, DOI 10.1016/0304-3975(94)00104-9
   Bonchi F, 2014, ACM T COMPUT LOG, V15, DOI 10.1145/2490818
   Brengos T, 2015, J LOG ALGEBR METHODS, V84, P826, DOI 10.1016/j.jlamp.2015.09.002
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Caires L, 2017, LECT NOTES COMPUT SC, V10201, P229, DOI 10.1007/978-3-662-54434-1_9
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Carbone M, 2017, ACTA INFORM, V54, P243, DOI 10.1007/s00236-016-0285-y
   Carbone Marco, 2016, CONCUR LIPICS, V59
   Dardha O, 2018, LECT NOTES COMPUT SC, V10803, P91, DOI 10.1007/978-3-319-89366-2_5
   DeYoung Henry, 2012, CSL LIPICS, V16, P228, DOI [10.4230/LIPIcs.CSL.2012.228, DOI 10.4230/LIPICS.CSL.2012.228]
   Fubini Guido, 1907, Rend. Accad. Naz. Lincei, V16, P608
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Honda K, 1998, LNCS, V1381, P22, DOI DOI 10.1007/BFB0053567
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Kouzapas D, 2017, ACTA INFORM, V54, P271, DOI 10.1007/s00236-016-0289-7
   Lindley S., 2016, ICFP
   Merro M, 2004, MATH STRUCT COMP SCI, V14, P715, DOI 10.1017/S0960129504004323
   Milner R., 1989, Communication and concurrency
   Montesi Fabrizio, 2018, ABS180202917 CORR ABS180202917 CORR
   Morris James H., 1968, THESIS THESIS
   Pérez JA, 2014, INFORM COMPUT, V239, P254, DOI 10.1016/j.ic.2014.08.001
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Sangiogi D., 1993, TAPSOFT '93: Theory and Practice of Software Development. 4th International Joint Conference CAAP/FASE Proceedings, P151
   Sangiorgi D, 1996, THEOR COMPUT SCI, V167, P235, DOI 10.1016/0304-3975(96)00075-8
   Sangiorgi D, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1889997.1890002
   Sangiorgi Davide, 2001, PI CALCULUS THEORY M PI CALCULUS THEORY M
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   Vasconcelos VT, 2012, INFORM COMPUT, V217, P52, DOI 10.1016/j.ic.2012.05.002
   Wadler P, 2014, J FUNCT PROGRAM, V24, P384, DOI 10.1017/S095679681400001X
   Yoshida N, 2007, J LOGIC ALGEBR PROGR, V72, P207, DOI 10.1016/j.jlap.2007.02.011
NR 37
TC 16
Z9 17
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 24
DI 10.1145/3290337
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300024
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Skorstengaard, L
   Devriese, D
   Birkedal, L
AF Skorstengaard, Lau
   Devriese, Dominique
   Birkedal, Lars
TI STKTOKENS: Enforcing Well-Bracketed Control Flow and Stack Encapsulation
   Using Linear Capabilities
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE fully abstract compilation; secure compilation; capability machines;
   linear capabilities; well-bracketed control flow; stack frame
   encapsulation; fully abstract overlay semantics
AB We propose and study STKTOKENS: a new calling convention that provably enforces well-bracketed control flow and local state encapsulation on a capability machine. The calling convention is based on linear capabilities: a type of capabilities that are prevented from being duplicated by the hardware. In addition to designing and formalizing this new calling convention, we also contribute a new way to formalize and prove that it effectively enforces well-bracketed control flow and local state encapsulation using what we call a fully abstract overlay semantics.
C1 [Skorstengaard, Lau; Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
   [Devriese, Dominique] Vrije Univ Brussel, Brussels, Belgium.
C3 Aarhus University; Vrije Universiteit Brussel
RP Skorstengaard, L (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM lask@cs.au.dk; dominique.devriese@vub.be; birkedal@cs.au.dk
RI Devriese, Dominique/C-5493-2014
OI Devriese, Dominique/0000-0002-3862-6856
FU ModuRes Sapere Aude Advanced Grant from The Danish Council for
   Independent Research for the Natural Sciences (FNU); Research Foundation
   Flanders (FWO); Cost Action EUTypes [CA15123]
FX This research was supported in part by the ModuRes Sapere Aude Advanced
   Grant from The Danish Council for Independent Research for the Natural
   Sciences (FNU) and by Cost Action CA15123 EUTypes. Dominique Devriese
   held a Postdoctoral Fellowship from the Research Foundation Flanders
   (FWO) during most of this research.
CR Abadi M, 2005, LECT NOTES COMPUT SC, V3785, P111
   Abadi M., 1999, Secure Internet programming. Security issues for mobile and distributed objects, P19
   Abadi M, 2005, P 12 ACM C COMP COMM, DOI [10.1145/1102120.1102165, DOI 10.1145/1102120.1102165]
   Abate C, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P1351, DOI 10.1145/3243734.3243745
   [Anonymous], 2015, USENIX SECURITY
   [Anonymous], 1984, Capability-Based Computer Systems
   Birkedal L, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1926385.1926401
   Birkedal Lars, 2014, TASTE CATEGORICAL LO
   DENNIS JB, 1966, COMMUN ACM, V9, P143, DOI 10.1145/365230.365252
   Devriese D, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(4:2)2017
   Evans I, 2015, CCS'15: PROCEEDINGS OF THE 22ND ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P901, DOI 10.1145/2810103.2813646
   Juglaret Y., 2016, CSF
   New MS, 2016, ACM SIGPLAN NOTICES, V51, P103, DOI 10.1145/3022670.2951941
   Patrignani Marco., 2017, COMPUTER SECURITY FD
   Patrignani Marco., 2016, COMPUTER SECURITY FD
   Skorstengaard Lau, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P475, DOI 10.1007/978-3-319-89884-1_17
   Skorstengaard Lau, STKTOKENS ENFORCING
   Szabo N., 1997, First Monday, V2
   Szabo Nick., 2004, SCARCE OBJECTS
   Watson RNM, 2016, IEEE MICRO, V36, P38, DOI 10.1109/MM.2016.84
   Watson RNM, 2015, P IEEE S SECUR PRIV, P20, DOI 10.1109/SP.2015.9
   Watson Robert N. M., 2018, UCAMCLTR927
   Watson Robert N. M, 2015, UCAMCLTR876 UCAMCLTR876
   Watson Robert NM., 2012, WORKSH RUNT ENV SYST WORKSH RUNT ENV SYST
   Woodruff J, 2014, CONF PROC INT SYMP C, P457, DOI 10.1109/ISCA.2014.6853201
NR 25
TC 23
Z9 23
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 19
DI 10.1145/3290332
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300019
OA Green Published, Green Accepted, gold
DA 2024-07-18
ER

PT J
AU Touzeau, V
   Maïza, C
   Monniaux, D
   Reineke, J
AF Touzeau, Valentin
   Maiza, Claire
   Monniaux, David
   Reineke, Jan
TI Fast and Exact Analysis for LRU Caches
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE LRU; Cache Analysis; Abstract Interpretation
AB For applications in worst-case execution time analysis and in security, it is desirable to statically classify memory accesses into those that result in cache hits, and those that result in cache misses. Among cache replacement policies, the least recently used (LRU) policy has been studied the most and is considered to be the most predictable.
   The state-of-the-art in LRIJ cache analysis presents a tradeoff between precision and analysis efficiency: The classical approach to analyzing programs running on LRIJ caches, an abstract interpretation based on a range abstraction, is very fast but can be imprecise. An exact analysis was recently presented, but, as a last resort, it calls a model checker, which is expensive.
   In this paper, we develop an analysis based on abstract interpretation that comes close to the efficiency of the classical approach, while achieving exact classification of all memory accesses as the model-checking approach. Compared with the model-checking approach we observe speedups of several orders of magnitude. As a secondary contribution we show that LRIJ cache analysis problems are in general NP-complete.
C1 [Touzeau, Valentin] Univ Grenoble Alpes, VERIMAG, 700 Ave Cent, F-38401 St Martin Dheres, France.
   [Maiza, Claire] Grenoble INP, VERIMAG, 700 Ave Cent, F-38401 St Martin Dheres, France.
   [Monniaux, David] CNRS, VERIMAG, 700 Ave Cent, F-38401 St Martin Dheres, France.
   [Reineke, Jan] Saarland Univ, Saarland Informat Campus, Saarbrucken, Germany.
C3 Communaute Universite Grenoble Alpes; Institut National Polytechnique de
   Grenoble; Universite Grenoble Alpes (UGA); Centre National de la
   Recherche Scientifique (CNRS); Communaute Universite Grenoble Alpes;
   Institut National Polytechnique de Grenoble; Universite Grenoble Alpes
   (UGA); Centre National de la Recherche Scientifique (CNRS); Communaute
   Universite Grenoble Alpes; Institut National Polytechnique de Grenoble;
   Universite Grenoble Alpes (UGA); Centre National de la Recherche
   Scientifique (CNRS); Saarland University
RP Touzeau, V (corresponding author), Univ Grenoble Alpes, VERIMAG, 700 Ave Cent, F-38401 St Martin Dheres, France.
EM Valentin.Touzeau@univ-grenoble-alpes.fr;
   Claire.Maiza@univ-grenoble-alpes.fr;
   David.Monniaux@univ-grenoble-alpes.fr; reineke@cs.uni-saarland.de
OI Monniaux, David/0000-0001-7671-6126
FU European Research Council under the European Union's Seventh Framework
   Programme (FP/2007-2013)/ERC Grant [306595]; Deutsche
   Forschungsgemeinschaft, project PEP: Precise and Efficient Prediction of
   Good Worst-case Performance for Contemporary and Future Architectures;
   European Research Council (ERC) [306595] Funding Source: European
   Research Council (ERC)
FX This work was partially supported by the European Research Council under
   the European Union's Seventh Framework Programme (FP/2007-2013)/ERC
   Grant Agreement nr. 306595
   (https://cordis.europa.eu/project/rcn/105808_en.html) lSTATORz and by
   the Deutsche Forschungsgemeinschaft as part of the project PEP: Precise
   and Efficient Prediction of Good Worst-case Performance for Contemporary
   and Future Architectures.
CR Advanced Micro Devices, 2017, ZIP PUBL, V55723
   [Anonymous], 1978, ANALYSE SEMANTIQUE P
   Ballabriga Clement, 2010, P LECT NOTES COMPUTE
   Bao WL, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158120
   Bernstein D. J., 2005, CACHE TIMING ATTACKS
   Beyls K, 2005, J SYST ARCHITECT, V51, P223, DOI 10.1016/j.sysarc.2004.09.004
   Butler Jon T., 2014, APPL ZERO SUPPRESSED
   CaBcaval C., 2003, P 17 ANN INT C SUP S, P150
   CHATTERJEE S, 2001, P ACM SIGPLAN 01 C P, P286
   Chattopadhyay S, 2013, REAL-TIME SYST, V49, P517, DOI 10.1007/s11241-013-9178-0
   Chu DH, 2016, IEEE REAL TIME
   De Wulf M, 2006, LECT NOTES COMPUT SC, V4144, P17, DOI 10.1007/11817963_5
   De Wulf M, 2008, LECT NOTES COMPUT SC, V5311, P240, DOI 10.1007/978-3-540-88387-6_21
   Doychev G, 2017, ACM SIGPLAN NOTICES, V52, P406, DOI [10.1145/3140587.3062388, 10.1145/3062341.3062388]
   Doychev G, 2015, ACM T INFORM SYST SE, V18, DOI 10.1145/2756550
   Falk Heiko, 2016, 16 INT WORKSH WORST, DOI [10.4230/OASIcs.WCET.2016.2, DOI 10.4230/OASICS.WCET.2016.2]
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P389, DOI 10.1007/BF01379404
   Ferdinand C, 1999, REAL-TIME SYST, V17, P131, DOI 10.1023/A:1008186323068
   Ghosh S, 1999, ACM T PROGR LANG SYS, V21, P703, DOI 10.1145/325478.325479
   Grund D, 2010, EUROMICRO, P155, DOI 10.1109/ECRTS.2010.8
   Grund D, 2009, LECT NOTES COMPUT SC, V5673, P120, DOI 10.1007/978-3-642-03237-0_10
   Grund Daniel, P 10 INT WORKSH WORS, P28
   Guan N, 2014, ACM T EMBED COMPUT S, V13, DOI 10.1145/2584655
   Guan N, 2013, DES AUT TEST EUROPE, P296
   Heckmann Reinhold, 2014, WORST CASE EXECUTION
   Intel Corporation, 2016, 248966033 INT CORP
   Knuth Donald, 2011, ART COMPUTER PROGRAM, V53
   Kocher P, 2019, P IEEE S SECUR PRIV, P1, DOI 10.1109/SP.2019.00002
   Lim A. W., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P201, DOI 10.1145/263699.263719
   Lipp M, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P973
   Liu FF, 2015, P IEEE S SECUR PRIV, P605, DOI 10.1109/SP.2015.43
   Lundqvist T., 1999, Proceedings 20th IEEE Real-Time Systems Symposium (Cat. No.99CB37054), P12, DOI 10.1109/REAL.1999.818824
   Lv M., 2016, Leibniz Transactions on Embedded Systems, V3, P05, DOI DOI 10.4230/LITESV003-I001-A005
   Minato S.-I., 2001, International Journal on Software Tools for Technology Transfer, V3, P156, DOI 10.1007/s100090100038
   Mowery K., 2012, 2012 ACM Cloud Computing Security Workshop, P19
   Mueller F., 1995, Proceedings of the 28th Annual Simulation Symposium (Cat. No.95TH8049), P105, DOI 10.1109/SIMSYM.1995.393589
   Reineke J, 2007, REAL-TIME SYST, V37, P99, DOI 10.1007/s11241-007-9032-3
   Reineke Jan., 2006, 6th International Workshop on Worst-Case Execution Time Analysis (WCET'06), volume 4 of Ope-nAccess Series in Informatics (OASIcs)
   Somenzi F., 2001, International Journal on Software Tools for Technology Transfer, V3, P171, DOI 10.1007/s100090100042
   Touzeau V, 2017, LECT NOTES COMPUT SC, V10427, P22, DOI 10.1007/978-3-319-63390-9_2
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
   Yarom Y, 2017, J CRYPTOGR ENG, V7, P99, DOI 10.1007/s13389-017-0152-y
NR 42
TC 11
Z9 11
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 54
DI 10.1145/3290367
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300054
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Guéneau, A
   Hostert, J
   Spies, S
   Sammler, M
   Birkedal, L
   Dreyer, D
AF Gueneau, Armael
   Hostert, Johannes
   Spies, Simon
   Sammler, Michael
   Birkedal, Lars
   Dreyer, Derek
TI Melocoton: A Program Logic for Verified Interoperability Between OCaml
   and C
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE foreign-function interfaces; OCaml; C; program logics; multi-language
   semantics; garbage collection; separation logic; angelic
   non-determinism; transfinite step-indexing; Iris; Coq
ID LANGUAGE
AB In recent years, there has been tremendous progress on developing program logics for verifying the correctness of programs in a rich and diverse array of languages. Thus far, however, such logics have assumed that programs are written entirely in a single programming language. In practice, this assumption rarely holds since programs are often composed of components written in different programming languages, which interact with one another via some kind of foreign function interface (FFI). In this paper, we take the first steps towards the goal of developing program logics for multi-language verification. Specifically, we present Melocoton, a multi-language program verification system for reasoning about OCaml, C, and their interactions through the OCaml FFI. Melocoton consists of the first formal semantics of (a large subset of) the OCaml FFI-previously only described in prose in the OCaml manual-as well as the first program logic to reason about the interactions of program components written in OCaml and C. Melocoton is fully mechanized in Coq on top of the Iris separation logic framework.
C1 [Gueneau, Armael] Univ Paris Saclay, ENS Paris Saclay, CNRS, Inria,Lab Methodes Formelles, F-91190 Gif Sur Yvette, France.
   [Hostert, Johannes] Saarland Univ, Saarbrucken, Germany.
   [Hostert, Johannes; Spies, Simon; Dreyer, Derek] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
C3 Inria; Centre National de la Recherche Scientifique (CNRS); Universite
   Paris Saclay; Universite Paris Cite; Saarland University; Aarhus
   University
RP Guéneau, A (corresponding author), Univ Paris Saclay, ENS Paris Saclay, CNRS, Inria,Lab Methodes Formelles, F-91190 Gif Sur Yvette, France.
EM armael.gueneau@inria.fr; jhostert@mpi-sws.org; spies@mpi-sws.org;
   msammler@mpi-sws.org; birkedal@cs.au.dk; dreyer@mpi-sws.org
OI Birkedal, Lars/0000-0003-1320-0098; Hostert,
   Johannes/0000-0001-5038-8283; Spies, Simon/0000-0001-5424-9002; Gueneau,
   Armael/0000-0003-3072-4045; Dreyer, Derek/0000-0002-3884-6867
FU Villum Investigator grant, Center for Basic Research in Program
   Verification (CPV), from the VILLUM Foundation [25804]; Google PhD
   Fellowships
FX We would like to thank Jacques-Henri Jourdan for many insightful
   discussions, and the anonymous reviewers for their helpful feedback.
   This work was supported in part by a Villum Investigator grant (no.
   25804), Center for Basic Research in Program Verification (CPV), from
   the VILLUM Foundation and in part by Google PhD Fellowships for the
   third and fourth authors.
CR [Anonymous], 2023, The OCaml manual-Chapter 22: Interfacing C with OCaml
   [Anonymous], 2023, The Snappy compression library
   [Anonymous], 2023, The OCaml Bigarray library
   Cao QX, 2018, J AUTOM REASONING, V61, P367, DOI 10.1007/s10817-018-9457-5
   Cheung L, 2022, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP '22), P13, DOI 10.1145/3497775.3503686
   de Vilhena PE, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434314
   Furr M, 2005, ACM SIGPLAN NOTICES, V40, P62, DOI 10.1145/1064978.1065019
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gueneau Armael, 2023, Melocoton: A Program Logic for Verified Interoperability Between OCaml and C (Coq development), DOI [10.5281/zenodo.8331210, DOI 10.5281/ZENODO.8331210]
   Hur CK, 2012, ACM SIGPLAN NOTICES, V47, P59, DOI 10.1145/2103621.2103666
   Hur CK, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1926385.1926402
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Koenig J, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1095, DOI 10.1145/3453483.3454097
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Martin CE, 2007, SCI COMPUT PROGRAM, V65, P140, DOI 10.1016/j.scico.2006.01.007
   Mates P, 2019, PROCEEDINGS OF THE 21ST INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2019), DOI 10.1145/3354166.3354181
   Matsushita Y, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P841, DOI 10.1145/3519939.3523704
   Matthews Jacob, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P3, DOI 10.1145/1190216.1190220
   Mével G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408978
   Moine A, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571218
   Munch-Maccagnoni Guillaume, 2022, ML FAM WORKSH BEN MO
   Neis G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P166, DOI 10.1145/2784731.2784764
   O'connor L, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S095679682100023X
   O'Connor L, 2016, ACM SIGPLAN NOTICES, V51, P89, DOI 10.1145/3022670.2951940
   Patterson D, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P609, DOI 10.1145/3519939.3523703
   Patterson D, 2017, ACM SIGPLAN NOTICES, V52, P495, DOI [10.1145/3062341.3062347, 10.1145/3140587.3062347]
   Perconti JT, 2014, LECT NOTES COMPUT SC, V8410, P128
   Pit-Claudel C, 2020, LECT NOTES COMPUT SC, V12167, P119, DOI 10.1007/978-3-030-51054-1_7
   Rao Xiaojia, 2023, P 44 ACM SIGPLAN INT
   Rewitzky I, 2003, LECT NOTES COMPUT SC, V2929, P256
   Sammler M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571220
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   Song Y, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571232
   Song Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371091
   Spies S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P80, DOI 10.1145/3453483.3454031
   Stewart G, 2015, ACM SIGPLAN NOTICES, V50, P275, DOI [10.1145/2676726.2676985, 10.1145/2775051.2676985]
   Timany Amin, 2022, A Logical Approach to Type Soundness
   Wang P, 2014, ACM SIGPLAN NOTICES, V49, P675, DOI [10.1145/2660193.2660201, 10.1145/2714064.2660201]
   Wang SY, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360597
NR 41
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 247
DI 10.1145/3622823
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100027
OA gold
DA 2024-07-18
ER

PT J
AU Bahr, P
   Hutton, G
AF Bahr, Patrick
   Hutton, Graham
TI Calculating Compilers for Concurrency
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program calculation; concurrency; choice trees; codensity monad
AB Choice trees have recently been introduced as a general structure for defining the semantics of programming languages with a wide variety of features and effects. In this article we focus on concurrent languages, and show how a codensity version of choice trees allows the semantics for such languages to be systematically transformed into compilers using equational reasoning techniques. The codensity construction is the key ingredient that enables a high-level, algebraic approach. As a case study, we calculate a compiler for a concurrent lambda calculus with channel-based communication.
C1 [Bahr, Patrick] IT Univ Copenhagen, Copenhagen, Denmark.
   [Hutton, Graham] Univ Nottingham, Nottingham, England.
C3 IT University Copenhagen; University of Nottingham
RP Bahr, P (corresponding author), IT Univ Copenhagen, Copenhagen, Denmark.
OI Bahr, Patrick/0000-0003-1600-8261; Hutton, Graham/0000-0001-9584-5150
CR Ager M.S., 2003, RS0314 BRICS U AARH
   Ager Mads Sig, 2003, P INT C PRINCIPLES P
   Bahr P, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547624
   Bahr P, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000209
   Bahr P, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000180
   Bahr Patrick, 2023, Supplementary Material for "Calculating Compilers for Concurrency", DOI [10.5281/zenodo.8124116, DOI 10.5281/ZENODO.8124116]
   Bizjak Ales, 2016, Foundations of Software Science and Computation Structures., V1, P2
   Capretta V, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:1)2005
   Chappe N, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571254
   Chlipala A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P93, DOI 10.1145/1706299.1706312
   Claessen K, 2004, J FUNCT PROGRAM, V14, P741, DOI 10.1017/S0956796804005192
   Danielsson NA, 2012, ACM SIGPLAN NOTICES, V47, P127, DOI 10.1145/2398856.2364546
   DeepSpec, 2023, The Science of Deep Specification
   Dreyer Derek, 2017, P S PRINCIPLES PROGR
   Gibbons Jeremy, 2021, ART SCI ENG PROGRAM, V6, P2
   Hinze Ralf, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P324, DOI 10.1007/978-3-642-31113-0_16
   Jones S. P., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P295, DOI 10.1145/237721.237794
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Kristensen Magnus, 2022, P S LOGIC COMPUTER S
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Patterson D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341689
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Rivas E, 2018, SCI COMPUT PROGRAM, V152, P70, DOI 10.1016/j.scico.2017.09.007
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Veltri N, 2023, J LOG ALGEBR METHODS, V131, DOI 10.1016/j.jlamp.2022.100846
   Voigtländer J, 2008, LECT NOTES COMPUT SC, V5133, P388
   Wand M., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P120, DOI 10.1145/224164.224193
   WAND M, 1982, ACM T PROGR LANG SYS, V4, P496, DOI 10.1145/357172.357179
   Wand Mitchell, 1982, P S PRINCIPLES PROGR
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Yoon I, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547630
   Zakowski Y, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P71, DOI 10.1145/3372885.3373813
NR 34
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 213
DI 10.1145/3607855
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900026
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Fowler, S
   Attard, DP
   Sowul, F
   Gay, SJ
   Trinder, P
AF Fowler, Simon
   Attard, Duncan Paul
   Sowul, Franciszek
   Gay, Simon J.
   Trinder, Phil
TI Special Delivery Programming with Mailbox Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE mailbox types; quasi-linear types; actor languages
ID LANGUAGE
AB The asynchronous and unidirectional communication model supported by mailboxes is a key reason for the success of actor languages like Erlang and Elixir for implementing reliable and scalable distributed systems. While many actors may send messages to some actor, only the actor may (selectively) receive from its mailbox. Although actors eliminate many of the issues stemming from shared memory concurrency, they remain vulnerable to communication errors such as protocol violations and deadlocks.
   Mailbox types are a novel behavioural type system for mailboxes first introduced for a process calculus by de'Liguoro and Padovani in 2018, which capture the contents of a mailbox as a commutative regular expression. Due to aliasing and nested evaluation contexts, moving from a process calculus to a programming language is challenging. This paper presents Pat, the first programming language design incorporating mailbox types, and describes an algorithmic type system. We make essential use of quasi-linear typing to tame some of the complexity introduced by aliasing. Our algorithmic type system is necessarily co-contextual, achieved through a novel use of backwards bidirectional typing, and we prove it sound and complete with respect to our declarative type system. We implement a prototype type checker, and use it to demonstrate the expressiveness of Pat on a factory automation case study and a series of examples from the Savina actor benchmark suite.
C1 [Fowler, Simon; Attard, Duncan Paul; Sowul, Franciszek; Gay, Simon J.; Trinder, Phil] Univ Glasgow, Glasgow, Lanark, Scotland.
C3 University of Glasgow
RP Fowler, S (corresponding author), Univ Glasgow, Glasgow, Lanark, Scotland.
EM simon.fowler@glasgow.ac.uk; duncan.attard@glasgow.ac.uk;
   2482997S@student.gla.ac.uk; simon.gay@glasgow.ac.uk;
   phil.trinder@glasgow.ac.uk
OI Attard, Duncan Paul/0000-0002-2448-5394; Fowler,
   Simon/0000-0001-5143-5475; Trinder, Phil/0000-0003-0190-7010
FU EPSRC [EP/T014628/1]; EPSRC [EP/T014628/1] Funding Source: UKRI
FX We thank the anonymous ICFP reviewers and Artifact Evaluation Committee,
   as well as our STARDUST colleagues for their helpful comments. Thanks
   also to Roland Kuhn for discussion of the case study. This work was
   supported by EPSRC Grant EP/T014628/1 (STARDUST).
CR Ahmed A, 2007, FUND INFORM, V77, P397
   Almeida B, 2022, INFORM COMPUT, V289, DOI 10.1016/j.ic.2022.104948
   Amadio RM, 1998, THEOR COMPUT SCI, V195, P291, DOI 10.1016/S0304-3975(97)00223-5
   Ancona D, 2016, FOUND TRENDS PROGRAM, V3, pI, DOI 10.1561/2500000031
   Bagherzadeh M, 2017, PROCEEDINGS OF THE 7TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL (AGERE'17), P21, DOI 10.1145/3141834.3141837
   Bollig Benedikt, 2013, Developments in Language Theory. 17th International Conference, DLT 2013. Proceedings: LNCS 7907, P118, DOI 10.1007/978-3-642-38771-5_12
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Chaudhuri A, 2009, ACM SIGPLAN NOTICES, V44, P269, DOI 10.1145/1631687.1596589
   Christakis M, 2011, LECT NOTES COMPUT SC, V6539, P5, DOI 10.1007/978-3-642-18378-2_3
   Ciccone L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498666
   Crafa S, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/3064849
   de Boer FS, 2007, LECT NOTES COMPUT SC, V4421, P316
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   deLiguoro Ugo, 2018, LEIBNIZ INT P INFORM, V109, DOI [10.4230/LIPIcs.ECOOP.2018.15, DOI 10.4230/LIPICS.ECOOP.2018.15]
   Dunfield J, 2021, ACM COMPUT SURV, V54, DOI 10.1145/3450952
   Ennals R, 2004, LECT NOTES COMPUT SC, V2986, P204
   Erdweg S, 2015, ACM SIGPLAN NOTICES, V50, P880, DOI [10.1145/2814270.2814277, 10.1145/2858965.2814277]
   Fournet C., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P372, DOI 10.1145/237721.237805
   Fowler S, 2023, Arxiv, DOI arXiv:2306.12935
   Fowler S, 2023, LOG METH COMPUT SCI, V19, DOI 10.46298/LMCS-19(3:3)2023
   Fowler S, 2016, ELECTRON P THEOR COM, P36, DOI 10.4204/EPTCS.223.3
   Fowler Simon, 2023, Artifact for "Special Delivery: Programming with Mailbox Types", DOI [10.5281/zenodo.8126809, DOI 10.5281/ZENODO.8126809]
   Fowler Simon, 2017, ECOOP LIPICS, V11, P1, DOI [10.4230/LIPIcs.ECOOP.2017.11, DOI 10.4230/LIPICS.ECOOP.2017.11]
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Gerbo R, 2019, ELECTRON P THEOR COM, P24, DOI 10.4204/EPTCS.291.3
   GINSBURG S, 1966, PAC J MATH, V16, P285, DOI 10.2140/pjm.1966.16.285
   Harrison Joseph R., 2018, P 17 ACM SIGPLAN INT, P37, DOI [10.1145/3239332.3242765, DOI 10.1145/3239332.3242765]
   Harvey Paul, 2021, ECOOP LIPICS, V10, P1
   He J., 2014, Proceedings of the Fifth Annual Scala Workshop, P23, DOI DOI 10.1145/2637647.2637651
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Hopkins M. W., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P394, DOI 10.1109/LICS.1999.782634
   Hu R, 2008, LECT NOTES COMPUT SC, V5142, P516, DOI 10.1007/978-3-540-70592-5_22
   Hu R, 2017, LECT NOTES COMPUT SC, V10202, P116, DOI 10.1007/978-3-662-54494-5_7
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   Imam S.M., 2014, P 4 INT WORKSH PROGR, P67, DOI [10.1145/2687357.2687368, DOI 10.1145/2687357.2687368]
   Juric S., 2019, Elixir in Action
   Kamburjan E, 2016, LECT NOTES COMPUT SC, V10009, P296, DOI 10.1007/978-3-319-47846-3_19
   Kobayashi N., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P29, DOI 10.1145/292540.292546
   Kuci Edlira, 2017, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V18, P1
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Lindley S, 2015, LECT NOTES COMPUT SC, V9032, P560, DOI 10.1007/978-3-662-46669-8_23
   McBride C, 2018, ELECTRON P THEOR COM, P53, DOI 10.4204/EPTCS.275.6
   Mostrous D, 2011, LECT NOTES COMPUT SC, V6721, P95, DOI 10.1007/978-3-642-21464-6_7
   Neykova R, 2017, CC'17: PROCEEDINGS OF THE 26TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P98, DOI 10.1145/3033019.3033031
   Neykova R, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(1:17)2017
   Osvald L, 2016, ACM SIGPLAN NOTICES, V51, P234, DOI 10.1145/3022671.2984009
   Padovani L, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3229062
   Padovani L, 2018, J LOG ALGEBR METHODS, V100, P16, DOI 10.1016/j.jlamp.2018.06.001
   Padovani L, 2014, LECT NOTES COMPUT SC, V8412, P88
   Padovani Luca, 2018, Mailbox Calculus Checker
   Padovani Luca., 2018, Art Sci. Eng. Program., DOI [DOI 10.22152/PROGRAMMING-JOURNAL.ORG/2018/2/15, 10.22152/programmingjournal.org/2018/2/15, DOI 10.22152/PROGRAMMINGJOURNAL.ORG/2018/2/15]
   PARIKH RJ, 1966, J ACM, V13, P570, DOI 10.1145/321356.321364
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pitts AM, 1998, LECT NOTES COMPUT SC, V1443, P309, DOI 10.1007/BFb0055063
   Rouvoet A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434303
   Scalas A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P502, DOI 10.1145/3314221.3322484
   Tabone Gerard, 2021, AGERE 2021: Proceedings of the 11th ACM SIGPLAN International Workshop on Programming Based on Actors, Agents, and Decentralized Control, P12, DOI 10.1145/3486601.3486708
   Tabone G, 2022, ELECTRON P THEOR COM, P17, DOI 10.4204/EPTCS.365.2
   Takeuchi K., 1994, PARLE '94. Parallel Architectures and Languages Europe. 6th International PARLE Conference Proceedings, P398
   Tasharofi S, 2013, LECT NOTES COMPUT SC, V7920, P302, DOI 10.1007/978-3-642-39038-8_13
   Trinder P, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/3107937
   Vasconcelos VT, 2012, INFORM COMPUT, V217, P52, DOI 10.1016/j.ic.2012.05.002
   Wadler P, 2014, J FUNCT PROGRAM, V24, P384, DOI 10.1017/S095679681400001X
   Zeilberger Noam, 2015, TALK TYPES
NR 66
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 191
DI 10.1145/3607832
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900004
OA gold, Green Accepted
DA 2024-07-18
ER

PT J
AU Blaudeau, C
   Liu, FY
AF Blaudeau, Clement
   Liu, Fengyun
TI A Conceptual Framework for Safe Object Initialization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE initialization; safety; typing; mechanization; local reasoning;
   definitional interpreter; Coq
AB An object under initialization does not fulfill its class specification yet and can be unsafe to use as it may have uninitialized fields. It can sometimes be useful to call methods on such a partially initialized object in order to compute a complex initial value, or to let the object escape its constructor in order to create mutually recursive objects. However, inadvertent usage of uninitialized fields can lead to run-time crashes. Those subtle programming errors are not statically detected by most modern compilers.
   While many other features of object-oriented programming languages have been thoroughly studied over the years, object initialization lacks a simple, systematic, and principled treatment. Building on the insights of previous work, we identify a set of four core principles for safe initialization: monotonicity, authority, stackability, and scopability. We capture the essence of the principles with a minimal calculus, Celsius, and show that the principles give rise to a practical initialization system that strikes a balance between expressiveness and simplicity. The meta-theory of the system is entirely mechanized using the Coq proof assistant. We believe that our approach based on well-identified core principles sheds new light on the underlying mechanisms ensuring safety and could serve as a basis for language design when faced with similar challenges.
C1 [Blaudeau, Clement] Cambium, Inria, 2 Rue Simone Iff, F-75589 Paris, France.
   [Blaudeau, Clement] Univ Paris Cite, F-75000 Paris, France.
   [Liu, Fengyun] Oracle Labs, Lausanne, Switzerland.
C3 Inria; Universite Paris Cite
RP Blaudeau, C (corresponding author), Cambium, Inria, 2 Rue Simone Iff, F-75589 Paris, France.; Blaudeau, C (corresponding author), Univ Paris Cite, F-75000 Paris, France.
EM clement.blaudeau@inria.fr; fengyun.liu@oracle.com
OI Blaudeau, Clement/0000-0002-6333-6092
CR Abel Nieto, 2020, 34 EUR C OBJ OR PROG, V166, DOI [10.4230/LIPIcs.ECOOP.2020.25, DOI 10.4230/LIPICS.ECOOP.2020.25]
   Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   Amin N, 2017, ACM SIGPLAN NOTICES, V52, P666, DOI 10.1145/3093333.3009866
   Blaudeau Clement, 2022, Zenodo, DOI 10.5281/ZENODO.7079830
   Cremet V, 2008, J OBJECT TECHNOL, V7, P25, DOI 10.5381/jot.2008.7.5.a2
   Delaware B, 2011, ACM SIGPLAN NOTICES, V46, P595, DOI 10.1145/2076021.2048113
   Fähndrich M, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P337
   Fähndrich M, 2003, ACM SIGPLAN NOTICES, V38, P302, DOI 10.1145/949343.949332
   Fahndrich Manuel, 2003, Heap Monotonic Typestate
   Gosling J., 2015, JAVA LANGUAGE SPECIF
   Hirschowitz Tom, 2003, Higher-Order and Symbolic Computation, V22, P3
   Kabir I, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428276
   Liu FY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428243
   Liu Fengyun, 2021, P 12 ACM SIGPLAN INT, P33, DOI [10.1145/3486610.3486895, DOI 10.1145/3486610.3486895]
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Mackay Julian, 2012, FTfJP@ECOOP
   Miller M.S., 2006, Robust Composition: Towards a Unified Approach to Access Control and Concurrency Control
   Odersky Martin, 2019, Scala Language Specification
   Popeea C, 2008, PEPM'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PARTIAL EVALUATION AND SEMANTICS-BASED PROGRAM MANIPULATION, P177, DOI 10.1145/1328408.1328434
   Qi X, 2009, ACM SIGPLAN NOTICES, V44, P53, DOI 10.1145/1594834.1480890
   Reynaud A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434326
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Servetto Marco, 2013, ECOOP
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Summers AJ, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P1013
   Summers Alexander J, 2010, Technical Report 716
   Syme D, 2006, ELECTRON NOTES THEOR, V148, P3, DOI 10.1016/j.entcs.2005.11.038
   Zibin Y, 2012, LECT NOTES COMPUT SC, V7313, P207, DOI 10.1007/978-3-642-31057-7_10
NR 28
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 151
DI 10.1145/3563314
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200028
OA gold
DA 2024-07-18
ER

PT J
AU Laurel, J
   Yang, R
   Ugare, S
   Nagel, R
   Singh, G
   Misailovic, S
AF Laurel, Jacob
   Yang, Rem
   Ugare, Shubham
   Nagel, Robert
   Singh, Gagandeep
   Misailovic, Sasa
TI A General Construction for Abstract Interpretation of Higher-Order
   Automatic Differentiation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Abstract Interpretation; Differentiable Programming
AB We present a novel, general construction to abstractly interpret higher-order automatic differentiation (AD). Our construction allows one to instantiate an abstract interpreter for computing derivatives up to a chosen order. Furthermore, since our construction reduces the problem of abstractly reasoning about derivatives to abstractly reasoning about real-valued straight-line programs, it can be instantiated with almost any numerical abstract domain, both relational and non-relational. We formally establish the soundness of this construction.
   We implement our technique by instantiating our construction with both the non-relational interval domain and the relational zonotope domain to compute both first and higher-order derivatives. In the latter case, we are the first to apply a relational domain to automatic differentiation for abstracting higher-order derivatives, and hence we are also the first abstract interpretation work to track correlations across not only different variables, but different orders of derivatives.
   We evaluate these instantiations on multiple case studies, namely robustly explaining a neural network and more precisely computing a neural network's Lipschitz constant. For robust interpretation, first and second derivatives computed via zonotope AD are up to 4.76x and 6.98x more precise, respectively, compared to interval AD. For Lipschitz certification, we obtain bounds that are up to 11,850x more precise with zonotopes, compared to the state-of-the-art interval-based tool.
C1 [Laurel, Jacob; Yang, Rem; Ugare, Shubham; Nagel, Robert; Misailovic, Sasa] Univ Illinois, Champaign, IL USA.
   [Singh, Gagandeep] Univ Illinois, VMware Res, Champaign, IL USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   VMware, Inc.; University of Illinois System; University of Illinois
   Urbana-Champaign
RP Laurel, J (corresponding author), Univ Illinois, Champaign, IL USA.
EM jlaurel2@illinois.edu; remyang2@illinois.edu; sugare2@illinois.edu;
   rjnagel2@illinois.edu; ggnds@illinois.edu; misailo@illinois.edu
OI Laurel, Jacob/0000-0002-4065-4063; Yang, Rem/0000-0001-9693-6820; Singh,
   Gagandeep/0000-0002-9299-2961; Ugare, Shubham/0000-0002-9088-887X
FU NSF [CCF-1846354, CCF-1956374, CCF-2008883, CNS-2148583]; USDA NIFA; AG
   NIFA [2021-67021-33449]; Sloan UCEM Graduate Scholarship
FX We thank the anonymous reviewers for their comments. This research was
   supported in part by NSF Grants No. CCF-1846354, CCF-1956374,
   CCF-2008883, CNS-2148583, USDA NIFA Grant No. AG NIFA 2021-67021-33449,
   a gift from Facebook, and a Sloan UCEM Graduate Scholarship.
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   Albarghouthi Aws, 2021, Programming Languages
   Alvarez-Melis David, 2018, P 32 INT C NEUR INF
   Ancona Marco, 2018, INT C LEARNING REPRE
   Bendtsen C., 1996, FADBAD, a Flexible C++ Package for Automatic Differentiation
   Bettencourt J., 2019, Taylor-mode automatic differentiation for higher-order derivatives in JAX
   Cousot P, 1977, P 4 ACM SIGACT SIGPL
   Cousot P, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290355
   Deussen Jens, 2021, Ph. D. Dissertation
   Di Bruno Faa, 1857, Quarterly J. Pure Appl. Math, V1857
   Di Gianantonio Pietro, 2013, INT C FDN SOFTW SCI
   Fel T, 2023, Arxiv, DOI [arXiv:2202.07728, DOI 10.48550/ARXIV.2202.07728]
   Fike J., 2011, The Development of Hyper-dual Numbers for Exact Secondderivative Calculations
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Fryazinov Oleg, 2010, Comput. Graph., V34, P6
   Ghorbal K, 2009, LECT NOTES COMPUT SC, V5643, P627, DOI 10.1007/978-3-642-02658-4_47
   Griewank A, 2000, MATH COMPUT, V69, P1117, DOI 10.1090/S0025-5718-00-01120-0
   Griewank A, 2008, OTHER TITL APPL MATH, V105, P1
   He H., 2019, The state of machine learning frameworks in 2019
   Hu Yuanming, 2020, INT C LEARN REPR
   Huckelheim Jan, 2018, INT STAT AN S
   Huot M, 2022, Arxiv, DOI arXiv:2101.06757
   Immler Fabian, 2018, Ph. D. Dissertation
   Janizek JD, 2021, J MACH LEARN RES, V22
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   Jordan M., 2021, P MACHINE LEARNING R, P5118
   Karczmarczuk Jerzy, 2001, Higher-order and symbolic computation
   Krawiec F, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498710
   Laurel J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498718
   Laurel Jacob, 2022, Appendix to A General Construction for Abstract Interpretation of Higher-Order Automatic Differentiation
   Laurel Jacob, 2022, Artifact for A General Construction for Abstract Interpretation of Higher -Order Automatic Differentiation, DOI [10.1145/3554329, DOI 10.1145/3554329]
   LeCun Y., 2010, MNIST HANDWRITTEN DI
   Li TM, 2018, ACM T GRAPHIC, V37, DOI 10.1145/3197517.3201383
   Mangal R, 2020, LECT NOTES COMPUT SC, V12389, P274, DOI 10.1007/978-3-030-65474-0_13
   Miné A, 2006, LECT NOTES COMPUT SC, V3855, P348
   Paszke A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473593
   Paterson Colin, 2021, INT C COMP SAF REL S
   Pearlmutter BA, 2007, ACM SIGPLAN NOTICES, V42, P155, DOI 10.1145/1190215.1190242
   Reps T, 2016, LECT NOTES COMPUT SC, V9583, P3, DOI 10.1007/978-3-662-49122-5_1
   Ryou W, 2021, LECT NOTES COMPUT SC, V12759, P225, DOI 10.1007/978-3-030-81685-8_10
   Sherman B, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434284
   Shi Z, 2019, INT C LEARN REPR
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Singh G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158143
   Singh G, 2018, ADV NEUR IN, V31
   Singh G, 2017, ACM SIGPLAN NOTICES, V52, P46, DOI 10.1145/3093333.3009885
   Sotoudeh M, 2020, LECT NOTES COMPUT SC, V12389, P65, DOI 10.1007/978-3-030-65474-0_4
   Stauning O, 1997, Automatic validation of numerical solutions
   Stolfi Jorge, 2003, Trends in Computational and Applied Mathematics, V4
   Vassiliadis V, 2016, INT SYM CODE GENER, P182, DOI 10.1145/2854038.2854058
   Walther A, 2012, CH CRC COMP SCI SER, P181
   Yang RM, 2022, Arxiv, DOI arXiv:2207.11177
NR 52
TC 1
Z9 1
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 161
DI 10.1145/3563324
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200038
OA gold
DA 2024-07-18
ER

PT J
AU Muduli, SK
   Roy, S
AF Muduli, Sujit Kumar
   Roy, Subhajit
TI Satisfiability Modulo Fuzzing: A Synergistic Combination of SMT Solving
   and Fuzzing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE SMT; Fuzzing; Closed-Box Function; Conflict-Driven Fuzz Loop
AB Programming languages and software engineering tools routinely encounter components that are difficult to reason on via formal techniques or whose formal semantics are not even available-third-party libraries, inline assembly code, SIMD instructions, system calls, calls to machine learning models, etc. However, often access to these components is available as input-output oracles-interfaces are available to query these components on certain inputs to receive the respective outputs. We refer to such functions as closed-box functions. Regular SMT solvers are unable to handle such closed-box functions.
   We propose SADHAK, a solver for SMT theories modulo closed-box functions. Our core idea is to use a synergistic combination of a fuzzer to reason on closed-box functions and an SMT engine to solve the constraints pertaining to the SMT theories. The fuzz and the SMT engines attempt to converge to a model by exchanging a rich set of interface constraints that are relevant and interpretable by them. Our implementation, SADHAK, demonstrates a significant advantage over the only other solver that is capable of handling such closed-box constraints: SADHAK solves 36.45% more benchmarks than the best-performing mode of this state-of-the-art solver and has 5.72x better PAR-2 score; on the benchmarks that are solved by both tools, SADHAK is (on an average) 14.62x faster.
C1 [Muduli, Sujit Kumar; Roy, Subhajit] Indian Inst Technol, Kanpur, Uttar Pradesh, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Kanpur
RP Muduli, SK (corresponding author), Indian Inst Technol, Kanpur, Uttar Pradesh, India.
EM smuduli@cse.iitk.ac.in; subhajit@cse.iitk.ac.in
OI Muduli, Sujit/0000-0002-3506-6742
CR Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 2015, SMTCOMP SMTLib2 benchmarks
   [Anonymous], 2019, Benchmarks for SyGuS Competition
   Argyros G, 2016, P IEEE S SECUR PRIV, P91, DOI 10.1109/SP.2016.14
   Balyo Marijn J.H., 2017, P SAT COMP 2017 SOLV
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Barrett C., 2010, P 8 INT WORKSHOP SAT, V13, P14
   Borzacchiello L, 2021, PROC INT CONF SOFTW, P711, DOI 10.1109/ICSE43902.2021.00071
   Cadar C., 2008, OSDI, V8, P209, DOI DOI 10.5555/1855741.1855756
   Das A, 2017, LECT NOTES COMPUT SC, V10482, P25, DOI 10.1007/978-3-319-68167-2_2
   Das A, 2015, LECT NOTES COMPUT SC, V9206, P324, DOI 10.1007/978-3-319-21690-4_19
   Dinges P, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P425, DOI 10.1145/2635868.2635889
   Fioraldi Andrea, 2020, 14 USENIX WORKSHOP O
   Ganzinger H, 2004, LECT NOTES COMPUT SC, V3114, P175, DOI 10.1007/978-3-540-27813-9_14
   Garg A, 2015, LECT NOTES COMPUT SC, V9291, P109, DOI 10.1007/978-3-662-48288-9_7
   github, 2021, ESBMC
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Godefroid P, 2011, ACM SIGPLAN NOTICES, V46, P258, DOI 10.1145/1993316.1993529
   Golia P., 2021, P IJCAI 21, P1894, DOI [10.24963/ijcai.2021/261, DOI 10.24963/IJCAI.2021/261MAINTRACK]
   Golia P, 2021, ICCAD-IEEE ACM INT, DOI 10.1109/ICCAD51958.2021.9643583
   Golia P, 2020, LECT NOTES COMPUT SC, V12225, P611, DOI 10.1007/978-3-030-53291-8_31
   Google Inc, 2020, HonggFuzz: Security oriented software fuzzer. Supports evolutionary, feedback-driven fuzzing based on code coverage (SW and HW based)
   Gulwani S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P62
   Joshi S, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P19
   Kalita PK, 2022, Form Comp Aid Design, V3, P304, DOI 10.34727/2022/isbn.978-3-85448-053-2_37
   Kroening Daniel, 2014, TOOLS ALGORITHMS CON, P389, DOI [10.1007/978-3-642-54862-8_26, DOI 10.1007/978-3-642-54862-8_26]
   Laeufer K, 2018, ICCAD-IEEE ACM INT, DOI 10.1145/3240765.3240842
   Lahiri Shuvendu K., 2020, 2020 Formal Methods in Computer Aided Design (FMCAD), P169, DOI 10.34727/2020/isbn.978-3-85448-042-6_24
   Lahiri S, 2022, PROCEEDINGS OF THE 31ST ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, ISSTA 2022, P352, DOI 10.1145/3533767.3534381
   Le Goues C, 2019, COMMUN ACM, V62, P56, DOI 10.1145/3318162
   Leino KRM., 2008, manuscript KRML, V178, P9
   Lemieux C, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P254, DOI 10.1145/3213846.3213874
   Leung A, 2015, ACM SIGPLAN NOTICES, V50, P565, DOI [10.1145/2813885.2738002, 10.1145/2737924.2738002]
   Liew D, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P521, DOI 10.1145/3338906.3338921
   Mechtaev S, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P389, DOI 10.1145/3236024.3236049
   Muduli Sujit Kumar, 2022, Zenodo, DOI 10.5281/ZENODO.7066264
   Muduli SK, 2020, ICCAD-IEEE ACM INT, DOI 10.1145/3400302.3415709
   Nelson G., 1979, ACM Transactions on Programming Languages and Systems, V1, P245, DOI 10.1145/357073.357079
   Nieuwenhuis R, 2006, J ACM, V53, P937, DOI 10.1145/1217856.1217859
   Nilizadeh S, 2019, PROC INT CONF SOFTW, P176, DOI 10.1109/ICSE.2019.00034
   Padhye R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360600
   Pandey A, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P228, DOI 10.1145/3293882.3330554
   Pasareanu C.S., 2011, Proceedings of the 2011 International Symposium on Software Testing and Analysis, ISSTA '11, P34, DOI DOI 10.1145/2001420.2001425
   Polgreen E, 2022, LECT NOTES COMPUT SC, V13182, P263, DOI 10.1007/978-3-030-94583-1_13
   Polikarpova N, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290385
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Roy Subhajit, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P852, DOI 10.1109/SP40001.2021.00060
   Roy S, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P224, DOI 10.1145/3236024.3236084
   Roy S, 2013, LECT NOTES COMPUT SC, V7935, P126, DOI 10.1007/978-3-642-38856-9_9
   Serebryany Kostya, 2015, LIBFUZZER LIBFUZZER
   Singal D, 2018, EPIC SERIES COMPUTIN, P637, DOI DOI 10.29007/2NDP
   Solar-Lezama A, 2005, ACM SIGPLAN NOTICES, V40, P281, DOI 10.1145/1064978.1065045
   Solar-Lezama Armando, 2013, International Journal on Software Tools for Technology Transfer, V15, P475, DOI 10.1007/s10009-012-0249-7
   Takhar G, 2022, LECT NOTES COMPUT SC, V13243, P3, DOI 10.1007/978-3-030-99524-9_1
   Torlak Emina, 2013, P 2013 ACM INT S NEW, P135, DOI DOI 10.1145/2509578.2509586
   Verma A, 2020, INT SYM CODE GENER, P68, DOI 10.1145/3368826.3377910
   Verma S, 2021, FORM METHOD SYST DES, V58, P399, DOI 10.1007/s10703-021-00387-z
   Verma S, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P163, DOI 10.1145/3106237.3106263
   Wang YX, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P393, DOI 10.1145/3460120.3484781
   Zalewski Michal, 2019, American fuzzy lop
NR 60
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 169
DI 10.1145/3563332
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200046
OA gold
DA 2024-07-18
ER

PT J
AU Sun, YZ
   Dhandhania, U
   Oliveira, BCDS
AF Sun, Yaozhu
   Dhandhania, Utkarsh
   Oliveira, Bruno C. D. S.
TI Compositional Embeddings of Domain-Specific Languages
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Compositional Programming; Extensible Typesetting
ID GENERICS
AB A common approach to defining domain-specific languages (DSLs) is via a direct embedding into a host language. There are several well-known techniques to do such embeddings, including shallow and deep embeddings. However, such embeddings come with various trade-offs in existing programming languages. Owing to such trade-offs, many embedded DSLs end up using a mix of approaches in practice, requiring a substantial amount of code, as well as some advanced coding techniques.
   In this paper, we show that the recently proposed Compositional Programming paradigm and the CP language provide improved support for embedded DSLs. In CP we obtain a new form of embedding, which we call a compositional embedding, that has most of the advantages of both shallow and deep embeddings. On the one hand, compositional embeddings enable various forms of linguistic reuse that are characteristic of shallow embeddings, including the ability to reuse host-language optimizations in the DSL and add new DSL constructs easily. On the other hand, similarly to deep embeddings, compositional embeddings support definitions by pattern matching or dynamic dispatching (including dependent interpretations, transformations, and optimizations) over the abstract syntax of the DSL and have the ability to add new interpretations. We illustrate an instance of compositional embeddings with a DSL for document authoring called EXT. The DSL is highly flexible and extensible, allowing users to create various non-trivial extensions easily. For instance, EXT supports various extensions that enable the production of wiki-like documents, LATEX documents, vector graphics or charts. The viability of compositional embeddings for EXT is evaluated with three applications.
C1 [Sun, Yaozhu; Dhandhania, Utkarsh; Oliveira, Bruno C. D. S.] Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China.
C3 University of Hong Kong
RP Sun, YZ (corresponding author), Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China.
EM yzsun@cs.hku.hk; ud99@connect.hku.hk; bruno@cs.hku.hk
CR Allen Dean, 2002, Textile Markup Language Documentation
   Apel Sven, 2013, Feature-Oriented Software Product Lines-Concepts and Implementation, DOI DOI 10.1007/978-3-642-37521-7
   Ballantyne M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428297
   Bi X, 2019, LECT NOTES COMPUT SC, V11423, P381, DOI 10.1007/978-3-030-17184-1_14
   Bi Xuan, 2018, ECOOP, DOI [10.4230/LIPIcs.ECOOP.2018.22, DOI 10.4230/LIPICS.ECOOP.2018.22]
   Bi Xuan, 2018, ECOOP, DOI [10.4230/LIPIcs.ECOOP.2018.9, DOI 10.4230/LIPICS.ECOOP.2018.9]
   BOULTON R, 1992, IFIP TRANS A, V10, P129
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   Dunfield J, 2014, J FUNCT PROGRAM, V24, P133, DOI 10.1017/S0956796813000270
   Efftinge Sven, 2006, Technical Report
   Emir B, 2007, LECT NOTES COMPUT SC, V4609, P273
   Erdweg S, 2015, COMPUT LANG SYST STR, V44, P24, DOI 10.1016/j.cl.2015.08.007
   Ernst E, 2006, ACM SIGPLAN NOTICES, V41, P270, DOI 10.1145/1111320.1111062
   Ernst E., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P303
   Flatt M, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P109
   Flatt Matthew, 2009, Low Level Scribble API: Structures And Processing
   Fowler M, 2005, Language workbenches: The killer-app for domain specific languages?
   Fowler Martin, 2005, A Language Workbench in Action-MPS
   Gallesio E, 2005, J FUNCT PROGRAM, V15, P751, DOI 10.1017/S0956796805005575
   Gamma Erich, 1995, DESIGN PATTERNS ELEM
   Gibbons J, 2014, ACM SIGPLAN NOTICES, V49, P339, DOI 10.1145/2628136.2628138
   Gill A, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P117
   Goodger David, 2002, reStructuredText: Markup Syntax and Parser Component of Docutils
   Haeri Seyed Hossein, 2019, ICTAC, DOI [10.1007/978-3-030-32505-3_20, DOI 10.1007/978-3-030-32505-3_20]
   Haeri Seyed Hossein, 2016, SCSS, DOI [10.29007/xlbn, DOI 10.29007/XLBN]
   Hinze R, 2006, J FUNCT PROGRAM, V16, P451, DOI 10.1017/S0956796806006022
   Hofer C, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P137
   Hofer Christian, 2010, GPCE, DOI [10.1145/1868294.1868307, DOI 10.1145/1868294.1868307]
   Hudak P, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P134, DOI 10.1109/ICSR.1998.685738
   Hughes John, 1995, LNCS, V925, P53
   Jones Simon L. Peyton, 2006, P 11 ACM SIGPLAN INT, P50, DOI [DOI 10.1145/1160074.1159811, 10.1145/1159803.1159811, DOI 10.1145/1159803.1159811]
   Jovanovic V, 2015, ACM SIGPLAN NOTICES, V50, P73, DOI 10.1145/2658761.2658771
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Kiselyov O, 2011, ELECTRON PROC THEOR, P210, DOI 10.4204/EPTCS.66.11
   Kiselyov Oleg, 2012, Generic and Indexed Programming, P130, DOI DOI 10.1007/978-3-642-32202-0_3
   Krahn Holger, 2010, International Journal on Software Tools for Technology Transfer, V12, P353, DOI 10.1007/s10009-010-0142-1
   Krishnamurthi Shriram, 2001, Ph. D. Dissertation
   Leijen Daan, 2001, Technical Report
   MacFarlane John, 2014, CommonMark Spec
   MADSEN OL, 1989, SIGPLAN NOTICES, V24, P397, DOI 10.1145/74878.74919
   MediaWiki, 2003, Wikitext
   MediaWiki, 2011, Parsoid
   Oliveira B.C.D.S., 2013, P ACM SIGPLAN 2013 W, P87, DOI DOI 10.1145/2426890.2426909
   Oliveira BCDS, 2016, ACM SIGPLAN NOTICES, V51, P364, DOI 10.1145/3022670.2951945
   Oliveira BCDS, 2013, LECT NOTES COMPUT SC, V7920, P27, DOI 10.1007/978-3-642-39038-8_2
   Oliveira BCDS, 2012, LECT NOTES COMPUT SC, V7313, P2, DOI 10.1007/978-3-642-31057-7_2
   Oliveira BCDS, 2007, TR FUNCT PROGRAM, V7, P199
   Oliveira Bruno C. d. S., 2009, ECOOP, DOI [10.1007/978-3-642-03013-0_13, DOI 10.1007/978-3-642-03013-0_13]
   Rompf T, 2011, ACM SIGPLAN NOTICES, V46, P127, DOI 10.1145/1942788.1868314
   Rompf Tiark, 2012, High. Order Symb. Comput., V25, P165, DOI [10.1007/s10990-013-9096-9, 10.1007/s10990-013-9096-, DOI 10.1007/S10990-013-9096]
   Scherr Maximilian, 2014, ECOOP, DOI [10.1007/978-3-662-44202-9_16, DOI 10.1007/978-3-662-44202-9_16]
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Svenningsson J, 2015, COMPUT LANG SYST STR, V44, P143, DOI 10.1016/j.cl.2015.07.003
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Wadler P., 1998, JAVA GENERICITY MAIL
   Wadler Philip, 2003, The Fun of Programming, DOI [10.1007/978-1-349-91518-7_11, DOI 10.1007/978-1-349-91518-7_11]
   Zhang WX, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3460228
   Zhang WX, 2020, SCI COMPUT PROGRAM, V193, DOI 10.1016/j.scico.2020.102449
   Zhang Weixin, 2017, ECOOP, DOI [10.4230/LIPIcs.ECOOP.2017.29, DOI 10.4230/LIPICS.ECOOP.2017.29]
   Zhang Weixin, 2019, Art Sci. Eng. Program., V3, P3, DOI [10.22152/programmingjournal.org/2019/3/10, DOI 10.22152/PROGRAMMINGJOURNAL.ORG/2019/3/10]
NR 62
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 131
DI 10.1145/3563294
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200008
OA gold
DA 2024-07-18
ER

PT J
AU Quiring, B
   Reppy, J
   Shivers, O
AF Quiring, Benjamin
   Reppy, John
   Shivers, Olin
TI Analyzing Binding Extent in 3CPS
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Compilers; Intermediate Representation; Higher-Order Flow Analysis;
   Continuation-Passing Style
AB To date, the most effective approach to compiling strict, higher-order functional languages (such as OCaml, Scheme, and SML) has been to use whole-program techniques to convert the program to a first-order monomorphic representation that can be optimized using traditional compilation techniques. This approach, popularized by MLton, has limitations, however. We are interested in exploring a different approach to compiling such languages, one that preserves the higher-order and polymorphic character of the program throughout optimization. To enable such an approach, we must have effective analyses that both provide precise information about higher-order programs and that scale to larger units of compilation. This paper describes one such analysis for determining the extent of variable bindings. We classify the extent of variables as either register (only one binding instance can be live at any time), stack (the lifetimes of binding instances obey a LIFO order), or heap (binding lifetimes are arbitrary). These extents naturally connect variables to the machine resources required to represent them. We believe that precise information about binding extents will enable efficient management of environments, which is a key problem in the efficient compilation of higher-order programs.
   At the core of the paper is the 3CPS intermediate representation, which is a factored CPS-based intermediate representation (IR) that statically marks variables to indicate their binding extent. We formally specify the management of this binding structure by means of a small-step operational semantics and define a static analysis that determines the extents of the variables in a program. We evaluate our analysis using a standard suite of SML benchmark programs. Our implementation gets surprisingly high yield and exhibits scalable performance. While this paper uses a CPS-based IR, the algorithm and results are easily transferable to other lambda-calculus IRs, such as ANF.
C1 [Quiring, Benjamin] Univ Maryland, Dept Comp Sci, 8125 Paint Branch Dr, College Pk, MD 20742 USA.
   [Reppy, John] Univ Chicago, Dept Comp Sci, 5730 S Ellis Ave, Chicago, IL 60615 USA.
   [Shivers, Olin] Northeastern Univ, Khoury Coll Comp Sci, 440 Huntington Ave, Boston, MA 02115 USA.
C3 University System of Maryland; University of Maryland College Park;
   University of Chicago; Northeastern University
RP Quiring, B (corresponding author), Univ Maryland, Dept Comp Sci, 8125 Paint Branch Dr, College Pk, MD 20742 USA.
EM bquiring@umd.edu; jhr@cs.chicago.edu; shivers@ccs.neu.edu
OI Reppy, John/0000-0002-5881-298X
FU National Science Foundation [212537, 2212538]
FX This material is based upon work partially supported by the National
   Science Foundation under grant numbers 212537 and 2212538. The details
   of the extent-tracking flow analysis have their roots in a semester-long
   reading group on higher-order flow analysis to which Mitchell Wand lent
   his insight and horsepower.
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   [Anonymous], 1984, LISP and Functional Programming
   Appel Andrew W., 1988, CSTR16888 PRINC U DE
   Appel Andrew W., 1992, COMPILING CONTINUATI
   Blanchet B., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P25, DOI 10.1145/268946.268949
   Cejtin H, 2000, LECT NOTES COMPUT SC, V1782, P56
   Chailloux Emmanuel, 1996, J FUNCT PROGRAM, V6, P621, DOI [10.1017/S0956796800001891, DOI 10.1017/S0956796800001891]
   Clinger William D., 2017, LARCENY PROJECT
   Cong YY, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341643
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Danvy Olivier, 1992, MATH STRUCT COMP SCI, V2, P361, DOI [10.1017/S0960129500001535, DOI 10.1017/S0960129500001535]
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Gilray T, 2016, ACM SIGPLAN NOTICES, V51, P691, DOI 10.1145/2914770.2837631
   Johnson JI, 2014, J FUNCT PROGRAM, V24, P218, DOI 10.1017/S0956796814000100
   Kennedy A, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P177
   KRANZ D. A., 1988, 632 YAL U COMP SCI D
   Kranz David, 1986, P 1986 S COMPILER CO, V21, P219
   Le Fessant F, 2001, ACM SIGPLAN NOTICES, V36, P26, DOI 10.1145/507669.507641
   Maurer L, 2017, ACM SIGPLAN NOTICES, V52, P482, DOI [10.1145/3062341.3062380, 10.1145/3140587.3062380]
   Might M., 2006, P 11 ACM SIGPLAN INT, P13, DOI DOI 10.1016/J.TCS.2006.12.031
   Mohnen M., 1995, Static Analysis. Second International Symposium, SAS'95. Proceedings, P261
   PARK YG, 1992, SIGPLAN NOTICES, V27, P116, DOI 10.1145/143103.143125
   Quiring B, 2021, PROCEEDINGS OF THE 2021 33RD SYMPOSIUM ON IMPLEMENTATION AND APPLICATION OF FUNCTIONAL LANGUAGES, IFL 2021, P20, DOI 10.1145/3544885.3544889
   Reynolds John C., 1972, P ACM ANN C ACM 72 N, V2, P717, DOI [10.1145/800194.805852, DOI 10.1145/800194.805852]
   Serrano M, 1996, ACM SIGPLAN NOTICES, V31, P50, DOI 10.1145/232629.232635
   Serrano M., 1995, Proceedings of the 1995 ACM Symposium on Applied Computing, SAC '95, P118
   Shao Z, 2000, ACM T PROGR LANG SYS, V22, P129, DOI 10.1145/345099.345125
   Shirley Peter, 2020, Ray Tracing in One Weekend
   Shivers Olin, 1991, CMUCS91145 SCH COMP
   SISKIND J. M., 1999, 99190R NEC RES I INC
   Tolmach Andrew, 1998, J FUNCT PROGRAM, V8, P367, DOI [10.1017/S0956796898003086, DOI 10.1017/S0956796898003086]
   Vardoulakis D., 2012, THESIS NE U
   Vardoulakis D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:3)2011
   Weeks S., 2006, P ACM WORKSHOP ML 20, P1, DOI [10.1145/1159876.1159877, DOI 10.1145/1159876.1159877]
NR 34
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 114
DI 10.1145/3547645
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000025
OA gold
DA 2024-07-18
ER

PT J
AU Ugare, S
   Singh, G
   Misailovic, S
AF Ugare, Shubham
   Singh, Gagandeep
   Misailovic, Sasa
TI Proof Transfer for Fast Certification of Multiple Approximate Neural
   Networks
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Verification; Approximation; Robustness; Deep Neural Networks
AB Developers of machine learning applications often apply post-training neural network optimizations, such as quantization and pruning, that approximate a neural network to speed up inference and reduce energy consumption, while maintaining high accuracy and robustness. Despite a recent surge in techniques for the robustness verification of neural networks, a major limitation of almost all state-of-the-art approaches is that the verification needs to be run from scratch every time the network is even slightly modified. Running precise end-to-end verification from scratch for every new network is expensive and impractical in many 75 scenarios that use or compare multiple approximate network versions, and the robustness of all the networks needs to be verified efficiently.
   We present FANC, the first general technique for transferring proofs between a given network and its multiple approximate versions without compromising verifier precision. To reuse the proofs obtained when verifying the original network, FANC generates a set of templates - connected symbolic shapes at intermediate layers of the original network - that capture the proof of the property to be verified. We present novel algorithms for generating and transforming templates that generalize to abroad range of approximate networks and reduce the verification cost. We present a comprehensive evaluation demonstrating the effectiveness of our approach. We consider a diverse set of networks obtained by applying popular approximation techniques such as quantization and pruning on fully-connected and convolutional architectures and verify their robustness against different adversarial attacks such as adversarial patches, L-0, rotation and brightening. Our results indicate that FANC can significantly speed up verification with state-of-the-art verifier, DeepZ by up to 4.1x.
C1 [Ugare, Shubham; Singh, Gagandeep; Misailovic, Sasa] Univ Illinois, Champaign, IL 61820 USA.
   [Singh, Gagandeep] VMware Res, Palo Alto, CA USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   VMware, Inc.
RP Singh, G (corresponding author), Univ Illinois, Champaign, IL 61820 USA.
OI Singh, Gagandeep/0000-0002-9299-2961; Ugare, Shubham/0000-0002-9088-887X
FU NSF [CCF1846354, CCF-1956374, CCF-2008883]; USDA NIFA [NIFA-2024827]
FX We thank the anonymous reviewers for their comments. This research was
   supported in part by NSF Grants No. CCF1846354, CCF-1956374,
   CCF-2008883, USDA NIFA Grant No. NIFA-2024827 and a gift from Facebook.
CR Amato F, 2013, J APPL BIOMED, V11, P47, DOI 10.2478/v10136-012-0031-x
   Anderson G, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P731, DOI 10.1145/3314221.3314614
   Anderson R, 2020, MATH PROGRAM, V183, P3, DOI 10.1007/s10107-020-01474-5
   [Anonymous], 2018, P INT C LEARN REPR I
   Ashok P, 2020, LECT NOTES COMPUT SC, V12302, P92, DOI 10.1007/978-3-030-59152-6_5
   Balunovic M., 2019, ADV NEURAL INFORM PR, P15313
   Baluta Teodora, 2021 IEEE ACM 43 INT, P312
   Bastani O, 2016, ADV NEUR IN, V29
   Blalock Davis W., 2020, P MACH LEARN SYST AU
   Bojarski M., 2016, ARXIV PREPRINT ARXIV
   Bunel R, 2020, J MACH LEARN RES, V21
   Carlini N, 2017, P IEEE S SECUR PRIV, P39, DOI 10.1109/SP.2017.49
   Cheng Chih-Hong, 2020, ARXIV201005689 CSLG
   Chiang P. -y., 2020, INT C LEARN REPR
   Cohen J, 2019, PR MACH LEARN RES, V97
   Ehlers R, 2017, LECT NOTES COMPUT SC, V10482, P269, DOI 10.1007/978-3-319-68167-2_19
   Figurnov M., 2016, ADV NEURAL INFORM PR, V29, P947
   Franco J, 2021, PHYSIOTHER THEOR PR, V37, P1419, DOI 10.1080/09593985.2019.1709234
   Gehr T, 2018, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2018.00058
   Gholami Amir, 2021, ABS210313630 CORR
   Goodfellow I. J., 2015, 3 INT C LEARNING REP
   Tran HD, 2020, LECT NOTES COMPUT SC, V12224, P18, DOI 10.1007/978-3-030-53288-8_2
   ISO, 2021, ASS ROB NEUR NETW ST
   Jacob B, 2018, PROC CVPR IEEE, P2704, DOI 10.1109/CVPR.2018.00286
   Julian K.D., 2018, ABS181004240 CORR
   Katz G, 2019, LECT NOTES COMPUT SC, V11561, P443, DOI 10.1007/978-3-030-25540-4_26
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Laurel Jacob, 2022, PROC ACM PROGRAM LAN, V6, P1, DOI DOI 10.1145/3498718
   Lecuyer M, 2019, P IEEE S SECUR PRIV, P656, DOI 10.1109/SP.2019.00044
   Lu Jingyue, 2020, INT C LEARN REPR
   Mine Antoine, 2001, WORKING C REVERSE EN
   Paulsen B, 2020, PROC INT CONF SOFTW, P714, DOI 10.1145/3377811.3380337
   Paulsen Brandon, 2020, INT C AUT SOFTW ENG
   Pei KX, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P1, DOI 10.1145/3132747.3132785
   Rabanser S, 2019, ADV NEUR IN, V32
   Salman H, 2019, 33 C NEURAL INFORM P, V32
   Salman H., 2019, ADV NEURAL INFORM PR, V32, P9832
   Sharif Hashim, 2021, PPoPP '21: Proceedings of the 26th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, P262, DOI 10.1145/3437801.3446108
   Singh G., 2019, P 32 INT C NEUR INF, P15098
   Singh G, 2018, ADV NEUR IN, V31
   Singh G, 2017, ACM SIGPLAN NOTICES, V52, P46, DOI 10.1145/3093333.3009885
   Singh Gagandeep, 2018, ERAN
   Singh Gagandeep, 2019, INT C LEARN REPR
   Singh Gagandeep, 2019, P ACM PROGR LANG POP
   Sprecher Christian, 2021, ARXIV210900542 CSLG
   Szegedy C, 2014, INT C LEARN REPR
   TFLite, 2017, TF LIT POSTTR QUANT
   Tjandraatmadja Christian, 2020, NEURIPS20
   Tjeng V., 2019, INT C LEARNING REPRE
   Tjeng Vincent, 2017, ARXIV171107356
   Wang S., 2021, ARXIV PREPRINT ARXIV, V2101.08765
   Wang SQ, 2018, ADV NEUR IN, V31
   Wang Shiqi, 27th USENIX Security Symposium (USENIX Security 18), P1599
   Weng TW, 2018, PR MACH LEARN RES, V80
   Xu Kaidi, 2020, ADV NEURAL INFORM PR, V33
   Zhang H, 2018, ADV NEUR IN, V31
NR 56
TC 1
Z9 1
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 75
DI 10.1145/3527319
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300011
OA gold
DA 2024-07-18
ER

PT J
AU Chen, T
   Flores-Lamas, A
   Hague, M
   Han, ZL
   Hu, DH
   Kan, SL
   Lin, AW
   Rümmer, P
   Wu, ZL
AF Chen, Taolue
   Flores-Lamas, Alejandro
   Hague, Matthew
   Han, Zhilei
   Hu, Denghang
   Kan, Shuanglong
   Lin, Anthony W.
   Rummer, Philipp
   Wu, Zhilin
TI Solving String Constraints with Regex-Dependent Functions through
   Transducers with Priorities and Variables
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE String Constraint Solving; Regular Expressions; Transducers; Symbolic
   Execution
AB Regular expressions are a classical concept in formal language theory. Regular expressions in programming languages (RegEx) such as JavaScript, feature non-standard semantics of operators (e.g. greedy/lazy Kleene star), as well as additional features such as capturing groups and references. While symbolic execution of programs containing RegExes appeals to string solvers natively supporting important features of RegEx, such a string solver is hitherto missing. In this paper, we propose the first string theory and string solver that natively provides such support. The key idea of our string solver is to introduce a new automata model, called prioritized streaming string transducers (PSST), to formalize the semantics of RegEx-dependent string functions. PSSTs combine priorities, which have previously been introduced in prioritized finite-state automata to capture greedy/lazy semantics, with string variables as in streaming string transducers to model capturing groups. We validate the consistency of the formal semantics with the actual JavaScript semantics by extensive experiments. Furthermore, to solve the string constraints, we show that PSSTs enjoy nice closure and algorithmic properties, in particular, the regularity-preserving property (i.e., pre-images of regular constraints under PSSTs are regular), and introduce a sound sequent calculus that exploits these properties and performs propagation of regular constraints by means of taking post-images or pre-images. Although the satisfiability of the string constraint language is generally undecidable, we show that our approach is complete for the so-called straightline fragment. We evaluate the performance of our string solver on over 195 000 string constraints generated from an open-source RegEx library. The experimental results show the efficacy of our approach, drastically improving the existing methods (via symbolic execution) in both precision and efficiency.
C1 [Chen, Taolue] Birkbeck Univ London, Dept Comp Sci, Malet St, London, England.
   [Flores-Lamas, Alejandro; Hague, Matthew] Royal Holloway Univ London, Dept Comp Sci, Egham Hill, Egham TW20 0EX, Surrey, England.
   [Han, Zhilei] Tsinghua Univ, Sch Software, Beijing, Peoples R China.
   [Hu, Denghang; Wu, Zhilin] Chinese Acad Sci, Inst Software, State Key Lab Comp Sci, Beijing, Peoples R China.
   [Hu, Denghang; Wu, Zhilin] Univ Chinese Acad Sci, Beijing, Peoples R China.
   [Kan, Shuanglong; Lin, Anthony W.] Univ Kaiserslautern, Kaiserslautern, Germany.
   [Lin, Anthony W.] Max Planck Inst, Kaiserslautern, Germany.
   [Rummer, Philipp] Uppsala Univ, Dept Informat Technol, Box 337, SE-75105 Uppsala, Sweden.
C3 University of London; Birkbeck University London; University of London;
   Royal Holloway University London; Tsinghua University; Chinese Academy
   of Sciences; Institute of Software, CAS; Chinese Academy of Sciences;
   University of Chinese Academy of Sciences, CAS; University of
   Kaiserslautern; Max Planck Society; Uppsala University
RP Chen, T (corresponding author), Birkbeck Univ London, Dept Comp Sci, Malet St, London, England.
EM t.chen@bbk.ac.uk; Alejandro.Flores-Lamas@rhul.ac.uk;
   matthew.hague@rhul.ac.uk; hzl21@mails.tsinghua.edu.cn;
   hudenghang15@mails.ucas.ac.cn; shuanglong@cs.uni-kl.de;
   lin@cs.uni-kl.de; philipp.ruemmer@it.uu.se; wuzl@ios.ac.cn
OI Chen, Taolue/0000-0002-5993-1665; Flores-Lamas,
   Alejandro/0000-0002-9637-2049; Hague, Matthew/0000-0003-4913-3800; Han,
   Zhilei/0000-0001-9171-4997; wu, zhi lin/0000-0003-0899-628X; Lin,
   Anthony Widjaja/0000-0003-4715-5096
FU Birkbeck BEI School [ARTEFACT]; National Natural Science Foundation of
   China [61872340, 62072309]; State Key Laboratory of Novel Software
   Technology, Nanjing University [KFKT2018A16]; Engineering and Physical
   Sciences Research Council [EP/T00021X/1]; European Research Council
   (ERC) under the European Union [759969]; Swedish Research Council (VR)
   [2018-04727]; Swedish Foundation for Strategic Research (SSF)
   [RIT17-0011]; Wallenberg project UPDATE; Microsoft and Amazon Web
   Services; Vinnova [2018-04727] Funding Source: Vinnova; EPSRC
   [EP/T00021X/1, EP/P00430X/2, EP/P00430X/1] Funding Source: UKRI; Swedish
   Research Council [2018-04727] Funding Source: Swedish Research Council
FX We thank Johannes Kinder and anonymous referees for their helpful
   feedback. T. Chen is supported by Birkbeck BEI School under Grant No.
   ARTEFACT, National Natural Science Foundation of China under Grant No.
   62072309, The State Key Laboratory of Novel Software Technology, Nanjing
   University under Grant No. KFKT2018A16. M. Hague and A. Flores-Lamas are
   supported by the Engineering and Physical Sciences Research Council
   under Grant No. EP/T00021X/1 S. Kan and A. Lin is supported by the
   European Research Council (ERC) under the European Union's Horizon 2020
   research and innovation programme (grant agreement no 759969). P. Rummer
   is supported by the Swedish Research Council (VR) under grant
   2018-04727, by the Swedish Foundation for Strategic Research (SSF) under
   the project WebSec (Ref. RIT17-0011), by the Wallenberg project UPDATE,
   and by grants from Microsoft and Amazon Web Services. Z. Wu is supported
   by the National Natural Science Foundation of China under Grant No.
   61872340.
CR Abdulla PA, 2019, LECT NOTES COMPUT SC, V11781, P277, DOI 10.1007/978-3-030-31784-3_16
   Abdulla PA, 2017, ACM SIGPLAN NOTICES, V52, P602, DOI [10.1145/3062341.3062384, 10.1145/3140587.3062384]
   Abdulla PA, 2014, LECT NOTES COMPUT SC, V8559, P150, DOI 10.1007/978-3-319-08867-9_10
   Alur R, 2010, LEIBNIZ INT PR INFOR, V8, P1, DOI 10.4230/LIPIcs.FSTTCS.2010.1
   Alur R, 2011, LECT NOTES COMPUT SC, V6756, P1, DOI 10.1007/978-3-642-22012-8_1
   Amadini R, 2019, LECT NOTES COMPUT SC, V11494, P1, DOI 10.1007/978-3-030-19212-9_1
   Amadini R, 2017, LECT NOTES COMPUT SC, V10416, P3, DOI 10.1007/978-3-319-66158-2_1
   Amadini Roberto, 2020, ARXIV200202376
   Berglund M, 2017, THEOR COMPUT SCI, V679, P69, DOI 10.1016/j.tcs.2016.09.006
   Berglund M, 2014, ELECTRON PROC THEOR, P109, DOI 10.4204/EPTCS.151.7
   Berglund Martin, 2017, P PRAG STRING C 2017, P30
   Berzish M, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P55, DOI 10.23919/FMCAD.2017.8102241
   Berzish Murphy, 2021, Z3STR4 SOLVER THEORI
   Bultan Tevfik, 2015, ABC STRING SOLVER
   Campeanu C., 2003, International Journal of Foundations of Computer Science, V14, P1007, DOI 10.1142/S012905410300214X
   Carle B, 2009, LECT NOTES COMPUT SC, V5457, P279, DOI 10.1007/978-3-642-00982-2_24
   Carton O, 2006, RAIRO-THEOR INF APPL, V40, P255, DOI 10.1051/ita:2006005
   CHANDRA AK, 1981, J ACM, V28, P114, DOI 10.1145/322234.322243
   Chen TL, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290362
   Chen T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158091
   Chen Taolue, 2021, ARXIV211104298
   Cox Arlen, 2017, ARXIV170809073CSLO
   Davis JC, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P443, DOI 10.1145/3338906.3338909
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Diep B.P., 2018, 2018 FORM METH COMP, P1, DOI [DOI 10.23919/FMCAD.2018.8602997, 10.23919/FMCAD, DOI 10.23919/FMCAD]
   Diep Bui and contributors, 2019, Z3 TRAU
   ENGELFRIET J, 1991, INFORM COMPUT, V95, P21, DOI 10.1016/0890-5401(91)90015-T
   Freydenberger DD, 2019, J COMPUT SYST SCI, V105, P1, DOI 10.1016/j.jcss.2019.04.001
   Freydenberger DD, 2013, THEOR COMPUT SYST, V53, P159, DOI 10.1007/s00224-012-9389-0
   Ganesh Vijay, 2013, Hardware and Software: Verification and Testing. 8th International Haifa Verification Conference, HVC 2012 Revised Selected Papers. LNCS 7857, P209, DOI 10.1007/978-3-642-39611-3_21
   Ganesh V., 2016, ARXIV
   Gentzen G, 1935, MATH Z, V39, P176, DOI 10.1007/BF01201353
   Harrison J, 2009, HANDBOOK OF PRACTICAL LOGIC AND AUTOMATED REASONING, P1
   Holík L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158092
   Hooimeijer Pieter, 2011, 20 USENIX SEC S SAN
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Kiezun A, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2377656.2377662
   Liang TY, 2014, LECT NOTES COMPUT SC, V8559, P646, DOI 10.1007/978-3-319-08867-9_43
   Lin AW, 2016, ACM SIGPLAN NOTICES, V51, P123, DOI 10.1145/2914770.2837641
   Loring B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P425, DOI 10.1145/3314221.3314645
   Loring B, 2017, SPIN'17: PROCEEDINGS OF THE 24TH ACM SIGSOFT INTERNATIONAL SPIN SYMPOSIUM ON MODEL CHECKING OF SOFTWARE, P196, DOI 10.1145/3092282.3092295
   Masilov A. N., 1976, PROBL PEREDACHI INF, V12, P55
   Michael LG, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P415, DOI 10.1109/ASE.2019.00047
   Trinh MT, 2016, LECT NOTES COMPUT SC, V9779, P218, DOI 10.1007/978-3-319-41528-4_12
   Trinh MT, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1232, DOI 10.1145/2660267.2660372
   Nieuwenhuis R, 2006, J ACM, V53, P937, DOI 10.1145/1217856.1217859
   Le QL, 2018, LECT NOTES COMPUT SC, V11275, P350, DOI 10.1007/978-3-030-02768-1_19
   Saxena P, 2010, P IEEE S SECUR PRIV, P513, DOI 10.1109/SP.2010.38
   Schmid ML, 2016, INFORM COMPUT, V249, P1, DOI 10.1016/j.ic.2016.02.003
   Scott JD, 2017, LECT NOTES COMPUT SC, V10335, P51, DOI 10.1007/978-3-319-59776-8_5
   Staicu CA, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P361
   Szabo M. E., 1969, The collected papers of Gerhard Gentzen
   THOMPSON K, 1968, COMMUN ACM, V11, P419, DOI 10.1145/363347.363387
   Wang HE, 2018, IEEE INT CONF AUTOM, P623, DOI 10.1145/3238147.3238189
   Wang HE, 2016, LECT NOTES COMPUT SC, V9779, P241, DOI 10.1007/978-3-319-41528-4_13
   Yu F, 2014, FORM METHOD SYST DES, V44, P44, DOI 10.1007/s10703-013-0189-1
   Yu F, 2010, LECT NOTES COMPUT SC, V6015, P154
   Zheng YH, 2015, LECT NOTES COMPUT SC, V9206, P235, DOI 10.1007/978-3-319-21690-4_14
   Zheng Yunhui, 2013, P 9 JOINT M FDN SOFT, P114, DOI [10.1145/2491411.2491456, DOI 10.1145/2491411.2491456]
   Zhu Qizhen, 2019, J. Inf. Process., V27, P810, DOI [10.2197/ipsjjip.27.810, DOI 10.2197/IPSJJIP.27.810]
NR 60
TC 9
Z9 9
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 45
DI 10.1145/3498707
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900046
OA Green Accepted, Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Loehr, D
   Walker, D
AF Loehr, Devon
   Walker, David
TI Safe, Modular Packet Pipeline Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Network programming languages; P4; PISA; type and effect systems
AB The P4 language and programmable switch hardware, like the Intel Tofino, have made it possible for network engineers to write new programs that customize operation of computer networks, thereby improving performance, fault-tolerance, energy use, and security. Unfortunately, possible does not mean easyDthere are many implicit constraints that programmers must obey if they wish their programs to compile to specialized networking hardware. In particular, all computations on the same switch must access data structures in a consistent order, or it will not be possible to lay that data out along the switch's packet-processing pipeline. In this paper, we define Lucid 2.0, a new language and type system that guarantees programs access data in a consistent order and hence are pipeline-safe. Lucid 2.0 builds on top of the original Lucid language, which is also pipeline-safe, but lacks the features needed for modular construction of data structure libraries. Hence, Lucid 2.0 adds (1) polymorphism and ordering constraints for code reuse; (2) abstract, hierarchical pipeline locations and data types to support information hiding; (3) compile-time constructors, vectors and loops to allow for construction of flexible data structures; and (4) type inference to lessen the burden of program annotations. We develop the meta-theory of Lucid 2.0, prove soundness, and show how to encode constraint checking as an SMT problem. We demonstrate the utility of Lucid 2.0 by developing a suite of useful networking libraries and applications that exploit our new language features, including Bloom filters, sketches, cuckoo hash tables, distributed firewalls, DNS reflection defenses, network address translators (NATs) and a probabilistic traffic monitoring service.
C1 [Loehr, Devon; Walker, David] Princeton Univ, Princeton, NJ 08544 USA.
C3 Princeton University
RP Loehr, D (corresponding author), Princeton Univ, Princeton, NJ 08544 USA.
EM dloehr@princeton.edu; dpw@cs.princeton.edu
OI Walker, David/0000-0003-3681-149X
FU National Science Foundation [FMitF-1837030, CNS-1703493]
FX This material is based upon work supported by the National Science
   Foundation under Grant No. FMitF-1837030
   (https://www.nsf.gov/awardsearch/showAward?AWD_ID=1837030) and Grant No.
   CNS-1703493
   (https://www.nsf.gov/awardsearch/showAward?AWD_ID=1703493).Any opinions,
   findings, and conclusions or recommendations expressed in this material
   are those of the author and do not necessarily reflect the views of the
   National Science Foundation.
CR Alizadeh M, 2014, ACM SIGCOMM COMP COM, V44, P503, DOI 10.1145/2740070.2626316
   Anderson CJ, 2014, ACM SIGPLAN NOTICES, V49, P113, DOI 10.1145/2535838.2535862
   [Anonymous], 2014, P 11 USENIX C NETW S
   Baldi Mario, 2020, PENSANDO ANNOUNCES P
   Bosshart P, 2014, ACM SIGCOMM COMP COM, V44, P87, DOI 10.1145/2656877.2656890
   Bosshart P, 2013, ACM SIGCOMM COMP COM, V43, P99, DOI 10.1145/2534169.2486011
   Bradley AR, 2006, LECT NOTES COMPUT SC, V3855, P427
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DeLine Rob, 1999, INT C TYP LAMBD CALC, DOI [10.1016/S1571- 0661(04)80088-4, DOI 10.1016/S1571-0661(04)80088-4]
   Ebeling C., 1996, Field-Programmable Logic. Smart Applications, New Paradigms and Compilers. 6th International Workshop on Field-Programmable Logic and Applications, FPL '96 Proceedings, P126
   Foster N, 2011, ACM SIGPLAN NOTICES, V46, P279, DOI 10.1145/2034574.2034812
   Gao JQ, 2020, SIGCOMM '20: PROCEEDINGS OF THE 2020 ANNUAL CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION ON THE APPLICATIONS, TECHNOLOGIES, ARCHITECTURES, AND PROTOCOLS FOR COMPUTER COMMUNICATION, DOI 10.1145/3387514.3405879
   Gifford DK, 1986, P 1986 ACM C LISP FU, P28, DOI DOI 10.1145/319838.319848
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Hogan Mary, 2020, HotNets '20: Proceedings of the 19th Workshop on Hot Topics in Networks, P168, DOI 10.1145/3422604.3425933
   Hsu KF, 2020, PROCEEDINGS OF THE 17TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P701
   Igarashi A, 2005, ACM T PROGR LANG SYS, V27, P264, DOI 10.1145/1057387.1057390
   Intel, 2020, INT TOF 2
   Jeyakumar V, 2014, ACM SIGCOMM COMP COM, V44, P3, DOI 10.1145/2740070.2626292
   Kalkunte M., 2019, Broadcom's new Trident 4 and Jericho 2 switch devices offer programmability at scale
   Katta N, 2016, SYMPOSIUM ON SOFTWARE DEFINED NETWORKING (SDN) RESEARCH (SOSR'16), DOI 10.1145/2890955.2890968
   Liu Z., 2021, USENIX SEC S
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Pierce, 2005, ADV TOPICS TYPES PRO
   Polakow J, 1999, LECT NOTES COMPUT SC, V1581, P295
   Polakow Jeff., 1999, 15th Conference on Mathematical Foundations of Programming Semantics, V20, P449, DOI DOI 10.1016/S1571-0661(04)80088-4
   Reich J., 2013, TECHNICAL REPROT USE, P30
   Schlesinger C, 2014, ACM SIGPLAN NOTICES, V49, P11, DOI 10.1145/2692915.2628157
   Shah Rinku, 2020, SOSR '20: Proceedings of the Symposium on SDN Research, P83, DOI 10.1145/3373360.3380839
   Sivaraman A, 2016, PROCEEDINGS OF THE 2016 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '16), P15, DOI 10.1145/2934872.2934900
   Sonchack J, 2021, SIGCOMM '21: PROCEEDINGS OF THE 2021 ACM SIGCOMM 2021 CONFERENCE, P731, DOI 10.1145/3452296.3472903
   Sonchack J, 2018, PROCEEDINGS OF THE 2018 USENIX ANNUAL TECHNICAL CONFERENCE, P823
   Tofte M, 1998, ACM T PROGR LANG SYS, V20, P724, DOI 10.1145/291891.291894
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Voellmy A, 2013, ACM SIGCOMM COMP COM, V43, P87, DOI 10.1145/2534169.2486030
   Xiangyu Gao, 2020, SIGCOMM '20: Proceedings of the Annual Conference of the ACM Special Interest Group on Data Communication on the applications, technologies, architectures, and protocols for computer communication, P44, DOI 10.1145/3387514.3405852
NR 36
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 38
DI 10.1145/3498699
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900039
OA gold
DA 2024-07-18
ER

PT J
AU Niu, Y
   Sterling, J
   Grodin, H
   Harper, R
AF Niu, Yue
   Sterling, Jonathan
   Grodin, Harrison
   Harper, Robert
TI A Cost-Aware Logical Framework
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE algorithm analysis; cost models; phase distinction; noninterference;
   intensional property; behavioral verification; equational reasoning;
   modal type theory; mechanized proof; proof assistants; recurrence
   relations; amortized analysis; parallel algorithms
ID IMPLEMENTATION
AB We present calf, a cost-aware logical framework for studying quantitative aspects of functional programs. Taking inspiration from recent work that reconstructs traditional aspects of programming languages in terms of a modal account of phase distinctions, we argue that the cost structure of programs motivates a phase distinction between intension and extension. Armed with this technology, we contribute a synthetic account of cost structure as a computational effect in which cost-aware programs enjoy an internal noninterference property: input/output behavior cannot depend on cost. As a full-spectrum dependent type theory, calf presents a unified language for programming and specification of both cost and behavior that can be integrated smoothly with existing mathematical libraries available in type theoretic proof assistants.
   We evaluate calf as a general framework for cost analysis by implementing two fundamental techniques for algorithm analysis: the method of recurrence relations and physicist's method for amortized analysis. We deploy these techniques on a variety of case studies: we prove a tight, closed bound for Euclid's algorithm, verify the amortized complexity of batched queues, and derive tight, closed bounds for the sequential and parallel complexity of merge sort, all fully mechanized in the Agda proof assistant. Lastly we substantiate the soundness of quantitative reasoning in calf by means of a model construction.
C1 [Niu, Yue; Grodin, Harrison; Harper, Robert] Carnegie Mellon Univ, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
   [Sterling, Jonathan] Aarhus Univ, Aabogade 34, DK-8000 Aarhus C, Denmark.
C3 Carnegie Mellon University; Aarhus University
RP Niu, Y (corresponding author), Carnegie Mellon Univ, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
EM yuen@andrew.cmu.edu; jsterling@cs.au.dk; hgrodin@andrew.cmu.edu;
   rwh@cs.cmu.edu
RI Harper, Robert/HLH-3752-2023
OI Harper, Robert/0000-0002-9400-2941; Sterling,
   Jonathan/0000-0002-0585-5564; Grodin, Harrison/0000-0002-0947-3520; Niu,
   Yue/0000-0003-4888-6042
FU AFOSR [MURI FA9550-15-1-0053, FA9550-19-1-0216, FA9550-21-0009];
   National Science Foundation [CCF-1901381]; AFRL through the NDSEG
   fellowship
FX This work was supported in part by AFOSR under grants MURI
   FA9550-15-1-0053, FA9550-19-1-0216, and FA9550-21-0009, in part by the
   National Science Foundation under award number CCF-1901381, and by AFRL
   through the NDSEG fellowship. Any opinions, findings and conclusions or
   recommendations expressed in this material are those of the authors and
   do not necessarily reflect the views of the AFOSR, NSF, or AFRL.
CR Acar Umut A., 2019, ALGORITHMS PARALLEL
   Altenkirch T, 2016, ACM SIGPLAN NOTICES, V51, P18, DOI 10.1145/2914770.2837638
   Altenkirch Thorsten, 2016, 1 INT C FORM STRUCT, V6, p1s6
   Anel I., 2021, New Spaces in Mathematics: Formal and Conceptual Re~ections, P155, DOI [DOI 10.1017/9781108854429.007, 10.1017/9781108854429.007]
   [Anonymous], 1998, Purely Functional Data Structures
   Atkey R, 2010, LECT NOTES COMPUT SC, V6012, P85, DOI 10.1007/978-3-642-11957-6_6
   Belloch G., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P226, DOI 10.1145/224164.224210
   Birkedal L, 2011, IEEE S LOG, P55, DOI 10.1109/LICS.2011.16
   Bizjak A, 2016, LECT NOTES COMPUT SC, V9634, P20, DOI 10.1007/978-3-662-49630-5_2
   Blelloch GE, 1996, ACM SIGPLAN NOTICES, V31, P213, DOI 10.1145/232629.232650
   Bove A, 2005, MATH STRUCT COMP SCI, V15, P671, DOI 10.1017/S0960129505004822
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   BURTON FW, 1982, INFORM PROCESS LETT, V14, P205, DOI 10.1016/0020-0190(82)90015-1
   Buzzard K, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P299, DOI 10.1145/3372885.3373830
   Capretta V, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:1)2005
   Chlipala Adam., 2017, Certified Programming with Dependent Types
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   CONSTABLE RL, 1984, ACM T PROGR LANG SYS, V6, P94, DOI 10.1145/357233.357238
   Constable Robert L., 2002, COMPUT COMPLEX, P164, DOI DOI 10.1017/9781316755983.009
   Coq Development Team, 2016, COQ PROOF ASS REF MA
   Coquand T, 2019, THEOR COMPUT SCI, V777, P184, DOI 10.1016/j.tcs.2019.01.015
   Cormen T.H., 2009, INTRO ALGORITHMS
   Crary K., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P184, DOI 10.1145/325694.325716
   Danielsson NA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1328438.1328457
   Danner N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P140, DOI 10.1145/2784731.2784749
   Das A, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P305, DOI 10.1145/3209108.3209146
   Das Ankush, 2020, ABS201213129 CORR
   Das Ankush, P INT C FUNCT PROGR
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   Fiore Marcelo P., 2021, ARXIV210102994CSLO
   Gonthier G., 2008, NOT AMS, V55, P1382
   Gratzer Daniel., 2020, ARXIV201210783CSLO
   Greiner J, 1999, ACM T PROGR LANG SYS, V21, P240, DOI 10.1145/316686.316690
   Gries David, 1987, Monographs in Computer Science
   Han JM, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P353, DOI 10.1145/3372885.3373826
   Handley MAT, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371092
   HARPER R, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P341, DOI 10.1145/96709.96744
   Harper Robert, 2018, PFPL SUPPLEMENT TYPE
   Hoffmann Jan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P781, DOI 10.1007/978-3-642-31424-7_64
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hofmann M, 2000, LECT NOTES COMPUT SC, V1782, P165
   HOOD R, 1981, INFORM PROCESS LETT, V13, P50, DOI 10.1016/0020-0190(81)90030-2
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kavvos GA, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371083
   Kavvos GA, 2017, IEEE S LOG
   Kavvos G. A., 2017, ARXIV171209302
   Kleene SC, 1943, T AM MATH SOC, V53, P41, DOI 10.2307/1990131
   LAWVERE FW, 1963, P NATL ACAD SCI USA, V50, P869, DOI 10.1073/pnas.50.5.869
   Lee Daniel K., 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P173, DOI 10.1145/1190216.1190245
   Levy P. B., 2006, Higher-Order and Symbolic Computation, V19, P377, DOI 10.1007/s10990-006-0480-6
   Levy Paul Blain, 2004, SER SEMANTICS STRUCT, V2
   Mével G, 2019, LECT NOTES COMPUT SC, V11423, P3, DOI 10.1007/978-3-030-17184-1_1
   Nipkow Tobias, 2021, FUNCTIONAL ALGORITHM
   Niu Yue, 2022, agda-calf, DOI [10.1145/3462303, DOI 10.1145/3462303]
   Niu Yue., 2020, ARXIV201103660CSPL
   Norell U., 2009, P 4 INT WORKSH TYP L, P1
   Paviotti M, 2015, ELECTRON NOTES THEOR, V319, P333, DOI 10.1016/j.entcs.2015.12.020
   Pédrot PM, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371126
   Pfenning F, 2001, IEEE S LOG, P221, DOI 10.1109/LICS.2001.932499
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Rajani V, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434308
   Rijke E, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:2)2020
   Schultz Patrick, 2019, PROGR COMPUTER SCI A, V29, DOI DOI 10.1007/978-3-030-00704-1
   Spoonhower D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P253
   Sterling J, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470719
   Sterling J, 2021, J ACM, V68, DOI 10.1145/3474834
   Stump A., 2016, VERIFIED FUNCTIONAL
   TARJAN RE, 1985, SIAM J ALGEBRA DISCR, V6, P306, DOI 10.1137/0606031
   Uemura Taichi, 2019, ARXIV190404097MATHCT
   Ullrich S., 2016, THESIS KARLSRUHER I
   Wang P, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133903
NR 73
TC 4
Z9 4
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 9
DI 10.1145/3498670
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900010
OA Green Submitted, gold, Green Published
DA 2024-07-18
ER

PT J
AU Raad, A
   Maranget, L
   Vafeiadis, V
AF Raad, Azalea
   Maranget, Luc
   Vafeiadis, Viktor
TI Extending Intel-x86 Consistency and Persistency
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE weak memory; memory consistency; memory persistency; non-volatile
   memory; Intel-x86; non-temporal accesses; memory types; cacheability
ID MEMORY; CONCURRENCY; SEMANTICS
AB Existing semantic formalisations of the Intel-x86 architecture cover only a small fragment of its available features that are relevant for the consistency semantics of multi-threaded programs as well as the persistency semantics of programs interfacing with non-volatile memory.
   We extend these formalisations to cover: (1) non-temporal writes, which provide higher performance and are used to ensure that updates are flushed to memory; (2) reads and writes to other Intel-x86 memory types, namely uncacheable, write-combined, and write-through; as well as (3) the interaction between these features. We develop our formal model in both operational and declarative styles, and prove that the two characterisations are equivalent. We have empirically validated our formalisation of the consistency semantics of these additional features and their subtle interactions by extensive testing on different Intel-x86 implementations.
C1 [Raad, Azalea] Imperial Coll London, London, England.
   [Maranget, Luc] INRIA, Rocquencourt, France.
   [Vafeiadis, Viktor] MPI SWS, Saarbrucken, Germany.
C3 Imperial College London; Inria
RP Raad, A (corresponding author), Imperial Coll London, London, England.
EM azalea@imperial.ac.uk; luc.maranget@inria.fr; viktor@mpi-sws.org
RI ; Vafeiadis, Viktor/B-5809-2014
OI Maranget, Luc/0000-0001-5312-7759; Vafeiadis, Viktor/0000-0001-8436-0334
FU UKRI Future Leaders Fellowship [MR/V024299/1]; European Research Council
   (ERC) Consolidator Grant for the project lPERSISTz under the European
   Union's Horizon 2020 research and innovation programme [101003349]; FLF
   [MR/V024299/1] Funding Source: UKRI
FX We would like to thank the anonymous reviewers for their feedback. This
   work was supported in part by a UKRI Future Leaders Fellowship [grant
   number MR/V024299/1], and by a European Research Council (ERC)
   Consolidator Grant for the project lPERSISTz under the European Union's
   Horizon 2020 research and innovation programme (grant agreement No.
   101003349).
CR Abdulla Parosh Aziz, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P353, DOI 10.1007/978-3-662-46681-0_28
   Abdulla PA, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434337
   Abdulla PA, 2015, LECT NOTES COMPUT SC, V9032, P308, DOI 10.1007/978-3-662-46669-8_13
   Alglave J, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3458926
   Alglave J, 2018, ACM SIGPLAN NOTICES, V53, P405, DOI [10.1145/3296957.3177156, 10.1145/3173162.3177156]
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Alglave Jade, 2011, DIY7 TOOL SUITE SOFT
   Alshboul M, 2021, INT S HIGH PERF COMP, P111, DOI 10.1109/HPCA51647.2021.00019
   [Anonymous], 2019, GitHub
   [Anonymous], 2021, SPDK
   [Anonymous], 2021, DML
   [Anonymous], 2008, LWN
   [Anonymous], 2021, DPDK
   [Anonymous], 2016, LWN
   [Anonymous], 2021, RUST
   [Anonymous], 2021, GITHUB
   [Anonymous], 2021, INTEL X86 INTERACTIO
   [Anonymous], 2007, LWN
   Avni H, 2015, LECT NOTES COMPUT SC, V9363, P617, DOI 10.1007/978-3-662-48653-5_41
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Bender J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360568
   Bouajjani A, 2013, LECT NOTES COMPUT SC, V7792, P533, DOI 10.1007/978-3-642-37036-6_29
   Chakraborty S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290383
   Cho Kyeongmin, P 42 ACM SIGPLAN INT, P16, DOI [10.1145/3453483, DOI 10.1145/3453483]
   Condit J, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P133
   Dalvandi Sadegh, 2020, ECOOP, V166, DOI [DOI 10.4230/LIPICS.ECOOP.2020, 10.4230/LIPIcs.ECOOP.2020.]
   Doko M, 2017, LECT NOTES COMPUT SC, V10201, P448, DOI 10.1007/978-3-662-54434-1_17
   Doko M, 2016, LECT NOTES COMPUT SC, V9583, P413, DOI 10.1007/978-3-662-49122-5_20
   Flur S, 2016, ACM SIGPLAN NOTICES, V51, P608, DOI 10.1145/2914770.2837615
   Gogte V, 2020, ANN I S COM, P652, DOI 10.1109/ISCA45697.2020.00060
   Gogte V, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P46, DOI 10.1145/3192366.3192367
   Intel, 2021, INT 64 IA 32 ARCH SO
   Intel, 2019, INT 64 IA 32 ARCH SO
   Intel, 2015, Persistent Memory Programming
   Jain AK, 2018, ANN IEEE SYM FIELD P, P173, DOI 10.1109/FCCM.2018.00035
   Kaiser Jan-Oliver, 2017, EUR C OBJ OR PROGR E, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.17, 10.4230/LIPIcs.ECOOP.2017]
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Khyzha A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434328
   Kokologiannakis M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434324
   Kokologiannakis M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360599
   Kokologiannakis M, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P1157, DOI 10.1145/3373376.3378480
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   Kolli A, 2017, 44TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA 2017), P481, DOI [10.1145/3079856.3080229, 10.1145/3140659.3080229]
   Kolli A, 2016, ACM SIGPLAN NOTICES, V51, P399, DOI 10.1145/2954679.2872381
   Lahav O, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P211, DOI 10.1145/3385412.3385966
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lahav O, 2016, ACM SIGPLAN NOTICES, V51, P649, DOI 10.1145/2914770.2837643
   Lahav O, 2015, LECT NOTES COMPUT SC, V9135, P311, DOI 10.1007/978-3-662-47666-6_25
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lee SH, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P362, DOI 10.1145/3385412.3386010
   Mador-Haim Sela, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P495, DOI 10.1007/978-3-642-31424-7_36
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Moiseenko Evgenii, 2020, DAGSTUHL ARTIFACTS S, V6, DOI [10.4230/DARTS.6.2.4, DOI 10.4230/DARTS.6.2.4]
   Nienhuis K, 2016, ACM SIGPLAN NOTICES, V51, P111, DOI 10.1145/3022671.2983997
   Pichon-Pharabod J, 2016, ACM SIGPLAN NOTICES, V51, P622, DOI 10.1145/2914770.2837616
   Podkopaev A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290382
   Podkopaev Anton, 2017, 31 EUR C OBJ OR PROG, V22, P28, DOI [10.4230/LIPIcs.ECOOP.2017.22, DOI 10.4230/LIPICS.ECOOP.2017.22]
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360561
   Raad A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371079
   Raad A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428219
   Raad A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276507
   Raad Azalea, 2022, X86 64 MEMORY TYPE T
   Raad Azalea, 2022, TECHNICAL APPENDIX
   Sarkar S, 2011, ACM SIGPLAN NOTICES, V46, P175, DOI 10.1145/1993316.1993520
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   SHASHA D, 1988, ACM T PROGR LANG SYS, V10, P282, DOI 10.1145/42190.42277
   Shu HP, 2018, IEEE NON-VOLATILE ME, P61, DOI 10.1109/NVMSA.2018.00015
   Tavakkol Arash, 2018, ARXIV181009360
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Vafeiadis V, 2013, ACM SIGPLAN NOTICES, V48, P867, DOI [10.1145/2544173.2509532, 10.1145/2509136.2509532]
NR 71
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 22
DI 10.1145/3498683
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900023
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Iorga, D
   Donaldson, AF
   Sorensen, T
   Wickerson, J
AF Iorga, Dan
   Donaldson, Alastair F.
   Sorensen, Tyler
   Wickerson, John
TI The Semantics of Shared Memory in Intel CPU/FPGA Systems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE CPU/FPGA; Core Cache Interface (CCI-P); memory model
ID COMPUTER
AB Heterogeneous CPU/FPGA devices, in which a CPU and an FPGA can execute together while sharing memory, are becoming popular in several computing sectors. In this paper, we study the shared-memory semantics of these devices, with a view to providing a firm foundation for reasoning about the programs that run on them. Our focus is on Intel platforms that combine an Intel FPGA with a multicore Xeon CPU. We describe the weak-memory behaviours that are allowed (and observable) on these devices when CPU threads and an FPGA thread access common memory locations in a fine-grained manner through multiple channels. Some of these behaviours are familiar from well-studied CPU and GPU concurrency; others are weaker still. We encode these behaviours in two formal memory models: one operational, one axiomatic. We develop executable implementations of both models, using the CBMC bounded model-checking tool for our operational model and the Alloy modelling language for our axiomatic model. Using these, we cross-check our models against each other via a translator that converts Alloy-generated executions into queries for the CBMC model. We also validate our models against actual hardware by translating 583 Alloy-generated executions into litmus tests that we run on CPU/FPGA devices; when doing this, we avoid the prohibitive cost of synthesising a hardware design per litmus test by creating our own 'litmus-test processor' in hardware. We expect that our models will be useful for low-level programmers, compiler writers, and designers of analysis tools. Indeed, as a demonstration of the utility of our work, we use our operational model to reason about a producer/consumer buffer implemented across the CPU and the FPGA. When the buffer uses insufficient synchronisation s a situation that our model is able to detect s we observe that its performance improves at the cost of occasional data corruption.
C1 [Iorga, Dan; Donaldson, Alastair F.] Imperial Coll London, Dept Comp, London SW7 2AZ, England.
   [Wickerson, John] Imperial Coll London, Dept Elect & Elect Engn, London SW7 2AZ, England.
   [Sorensen, Tyler] Univ Calif Santa Cruz, Dept Comp Sci & Engn, Santa Cruz, CA 95064 USA.
C3 Imperial College London; Imperial College London; University of
   California System; University of California Santa Cruz
RP Iorga, D (corresponding author), Imperial Coll London, Dept Comp, London SW7 2AZ, England.
EM d.iorga17@imperial.ac.uk; donaldson@imperial.ac.uk;
   tyler.sorensen@ucsc.edu; j.wickerson@imperial.ac.uk
OI Iorga, Dan/0000-0002-2313-7910; Sorensen, Tyler/0000-0003-1646-7935;
   Wickerson, John/0000-0001-6735-5533
FU EPSRC via the IRIS Programme Grant [EP/R006865/1]; HiPEDS Doctoral
   Training Centre [EP/L016796/1]
FX We thank Michael Adler for many valuable discussions. We are grateful to
   Intel Labs for giving us access to an X+F test machine. Our work was
   financially supported by the EPSRC via the IRIS Programme Grant
   (EP/R006865/1) and the HiPEDS Doctoral Training Centre (EP/L016796/1).
CR Abeydeera M, 2016, IEEE T CIRC SYST VID, V26, P236, DOI 10.1109/TCSVT.2015.2469113
   Alglave J, 2015, ACM SIGPLAN NOTICES, V50, P577, DOI [10.1145/2775054.2694391, 10.1145/2694344.2694391]
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Alglave J, 2011, LECT NOTES COMPUT SC, V6605, P41, DOI 10.1007/978-3-642-19835-9_5
   Bechtel MG, 2019, IEEE REAL TIME, P357, DOI 10.1109/RTAS.2019.00037
   Choi YK, 2019, ACM T RECONFIG TECHN, V12, DOI 10.1145/3294054
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Dobai R, 2013, 2013 NASA/ESA CONFERENCE ON ADAPTIVE HARDWARE AND SYSTEMS (AHS), P164, DOI 10.1109/AHS.2013.6604241
   Farooqui N, 2016, ACM SIGPLAN NOTICES, V51, P363, DOI 10.1145/2851141.2851194
   Guo C, 2019, IEEE INT CONF ASAP, P91, DOI 10.1109/ASAP.2019.00-24
   Guo KY, 2018, IEEE T COMPUT AID D, V37, P35, DOI 10.1109/TCAD.2017.2705069
   Hennessy JL, 2019, COMMUN ACM, V62, P48, DOI 10.1145/3282307
   Hower DR, 2014, ACM SIGPLAN NOTICES, V49, P427, DOI 10.1145/2541940.2541981
   Huang BY, 2019, ACM T DES AUTOMAT EL, V24, DOI 10.1145/3282444
   Intel, 2019, INT ACC STACK INT XE
   Intel, 2021, INT AC COMP ENV
   Iorga Dan, The semantics of Shared Memory in Intel CPU/ FPGA, DOI 10.5281/zenodo.5468873
   Iorga Dan, 2020, IEEE REAL TIME, DOI [10.1109/RTAS48715.2020.000-6, DOI 10.1109/RTAS48715.2020.000-6]
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Kirkham J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428294
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lustig D, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P257, DOI 10.1145/3297858.3304043
   Lustig D, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P661, DOI 10.1145/3037697.3037723
   Lustig D, 2015, 2015 ACM/IEEE 42ND ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA), P388, DOI 10.1145/2749469.2750378
   Meng Y, 2020, ANN IEEE SYM FIELD P, P19, DOI 10.1109/FCCM48280.2020.00012
   Moss DJM, 2018, PROCEEDINGS OF THE 2018 ACM/SIGDA INTERNATIONAL SYMPOSIUM ON FIELD-PROGRAMMABLE GATE ARRAYS (FPGA'18), P107, DOI 10.1145/3174243.3174258
   Oliver N., 2011, Proceedings of the 2011 International Conference on Reconfigurable Computing and FPGAs (ReConFig 2011), P80, DOI 10.1109/ReConFig.2011.4
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Pulte C, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1, DOI 10.1145/3314221.3314624
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Radojkovic P, 2012, ACM T ARCHIT CODE OP, V8, DOI 10.1145/2086696.2086713
   Ramanathan N, 2016, PROCEEDINGS OF THE 2016 ACM/SIGDA INTERNATIONAL SYMPOSIUM ON FIELD-PROGRAMMABLE GATE ARRAYS (FPGA'16), P48, DOI 10.1145/2847263.2847343
   Rinard Martin C, 2012, RACES SPLASH
   Rupp K., 2015, 40 YEARS MICROPROCES
   Sarkar S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P175
   Sorensen T, 2016, ACM SIGPLAN NOTICES, V51, P39, DOI 10.1145/3022671.2984032
   Sorensen T, 2016, ACM SIGPLAN NOTICES, V51, P100, DOI [10.1145/2980983.2908114, 10.1145/2908080.2908114]
   Stuecheli J, 2015, IBM J RES DEV, V59, DOI 10.1147/JRD.2014.2380198
   Tzeng Stanley, 2010, P C HIGH PERF GRAPH, P29
   Winterstein F, 2017, 2017 INTERNATIONAL CONFERENCE ON FIELD PROGRAMMABLE TECHNOLOGY (ICFPT), P104, DOI 10.1109/FPT.2017.8280127
   Xilinx, 2018, ACC DNNS XIL ALV ACC
   Yang HJ, 2014, ANN IEEE SYM FIELD P, P117, DOI 10.1109/FCCM.2014.43
   Yu Wang, 2019, 2019 IEEE 27th Annual International Symposium on Field-Programmable Custom Computing Machines (FCCM), P136, DOI 10.1109/FCCM.2019.00028
   Zhang C, 2016, IEEE SYM PARA DISTR, P148, DOI 10.1109/IPDPSW.2016.117
   Zhang Hongce, 2018, 2018 FORM METH COMP, p1s10, DOI [10.23919/FMCAD.2018, DOI 10.23919/FMCAD.2018]
   Zhou SJ, 2017, INT SYM COMP ARCHIT, P137, DOI 10.1109/SBAC-PAD.2017.25
NR 46
TC 8
Z9 8
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 120
DI 10.1145/3485497
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200024
OA gold
DA 2024-07-18
ER

PT J
AU Vu, ST
   Cohen, A
   De Grandmaison, A
   Guillon, C
   Heydemann, K
AF Son Tuan Vu
   Cohen, Albert
   De Grandmaison, Arnaud
   Guillon, Christophe
   Heydemann, Karine
TI Reconciling Optimization with Secure Compilation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compilation; security; optimization; debugging; LLVM
AB Software protections against side-channel and physical attacks are essential to the development of secure applications. Such protections are meaningful at machine code or micro-architectural level, but they typically do not carry observable semantics at source level. This renders them susceptible to miscompilation, and security engineers embed input/output side-effects to prevent optimizing compilers from altering them. Yet these side-effects are error-prone and compiler-dependent. The current practice involves analyzing the generated machine code to make sure security or privacy properties are still enforced. These side-effects may also be too expensive in fine-grained protections such as control-flow integrity. We introduce observations of the program state that are intrinsic to the correct execution of security protections, along with means to specify and preserve observations across the compilation flow. Such observations complement the input/output semantics-preservation contract of compilers. We introduce an opacification mechanism to preserve and enforce a partial ordering of observations. This approach is compatible with a production compiler and does not incur any modification to its optimization passes. We validate the effectiveness and performance of our approach on a range of benchmarks, expressing the secure compilation of these applications in terms of observations to be made at specific program points.
C1 [Son Tuan Vu; Heydemann, Karine] Sorbonne Univ, CNRS, LIP6, 4 Pl Jussieu, F-75252 Paris, France.
   [Cohen, Albert] Google, Paris, France.
   [De Grandmaison, Arnaud] Arm, Paris, France.
   [Guillon, Christophe] STMicroelectronics, Grenoble, France.
C3 Centre National de la Recherche Scientifique (CNRS); Sorbonne
   Universite; Google Incorporated; STMicroelectronics
RP Vu, ST (corresponding author), Sorbonne Univ, CNRS, LIP6, 4 Pl Jussieu, F-75252 Paris, France.
EM son-tuan.vu@lip6.fr; albertcohen@google.com;
   arnaud.degrandmaison@arm.com; christophe.guillon@st.com;
   karine.heydemann@lip6.fr
OI Cohen, Albert/0000-0002-8866-5343
CR Abadi M, 1998, LECT NOTES COMPUT SC, V1443, P868, DOI 10.1007/BFb0055109
   Abadi M, 2005, P 12 ACM C COMP COMM, DOI [10.1145/1102120.1102165, DOI 10.1145/1102120.1102165]
   Abadi M, 2012, ACM T INFORM SYST SE, V15, DOI 10.1145/2240276.2240279
   Abate C, 2019, P IEEE COMPUT SECUR, P256, DOI 10.1109/CSF.2019.00025
   Abate Carmine, 2018, ABS180704603 CORR
   aiT, 2003, AIT
   Balakrishnan G, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1749608.1749612
   BAREL H, 2004, 2004100 CRYPT EPRINT
   Barry T, 2016, PROCEEDINGS OF THE THIRD WORKSHOP ON CRYPTOGRAPHY AND SECURITY IN COMPUTING SYSTEMS (CS2 2016), P1, DOI 10.1145/2858930.2858931
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371075
   Baudin Patrick, 2008, ACSL ANSI ISO C SPEC
   Bayrak AG, 2013, LECT NOTES COMPUT SC, V8086, P293, DOI 10.1007/978-3-642-40349-1_17
   Bendersky Eli, 2011, PYELFTOOLS PYTHON LI
   Berthomé P, 2012, 2012 SEVENTH INTERNATIONAL CONFERENCE ON AVAILABILITY, RELIABILITY AND SECURITY (ARES), P224, DOI 10.1109/ARES.2012.79
   Bréjon JB, 2016, PROCEEDINGS OF THE SIXTH WORKSHOP ON CRYPTOGRAPHY AND SECURITY IN COMPUTING SYSTEMS CS2 2019, P13, DOI 10.1145/3304080.3304083
   Burow N, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3054924
   Chlipala A, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P54, DOI 10.1145/1250734.1250742
   Cuoq Pascal, 2012, Software Engineering and Formal Methods. Proceedings of the 10th International Conference, SEFM 2012, P233, DOI 10.1007/978-3-642-33826-7_16
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   D'Silva V, 2015, 2015 IEEE SECURITY AND PRIVACY WORKSHOPS (SPW), P73, DOI 10.1109/SPW.2015.33
   Daan Sprenkels, 2020, SID CHANN RES VAL
   Devriese D, 2016, ACM SIGPLAN NOTICES, V51, P164, DOI 10.1145/2914770.2837618
   Dureuil Louis, 2016, Computer Safety, Reliability and Security. 35th International Conference, SAFECOMP 2016. Proceedings: LNCS 9922, P3, DOI 10.1007/978-3-319-45477-1_1
   DWARF, 2017, DWARF DEB INF FORM S
   Eder K, 2016, MICROPROCESS MICROSY, V47, P278, DOI 10.1016/j.micpro.2016.07.003
   Eldib H, 2014, LECT NOTES COMPUT SC, V8559, P114, DOI 10.1007/978-3-319-08867-9_8
   Gorla D, 2016, MATH STRUCT COMP SCI, V26, P639, DOI 10.1017/S0960129514000279
   Herbst C, 2006, LECT NOTES COMPUT SC, V3989, P239
   Hillebold C., 2014, Compiler-assisted integrity against fault injection attacks
   Ishai Y, 2003, LECT NOTES COMPUT SC, V2729, P463, DOI 10.1007/978-3-540-45146-4_27
   ISO, 2011, C11 ISO
   Lalande JF, 2014, LECT NOTES COMPUT SC, V8713, P200, DOI 10.1007/978-3-319-11212-1_12
   Levin I., 2007, BYTE ORIENTED AES 25
   Li HongChao Li HongChao, 2014, The Proceedings of Symposium of Energy Grass Development Strategy in 2014, Guangxi, China, 29-31 December, 2014, P97
   Moro N, 2013, 2013 10TH WORKSHOP ON FAULT DIAGNOSIS AND TOLERANCE IN CRYPTOGRAPHY (FDTC 2013), P77, DOI 10.1109/FDTC.2013.9
   Patrignani M, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2699503
   Percival Colin, 2014, ZERO BUFFER
   Proy J, 2017, ACM T ARCHIT CODE OP, V14, DOI 10.1145/3141234
   Rigger M, 2018, ACM SIGPLAN NOTICES, V53, P84, DOI [10.1145/3296975.3186418, 10.1145/3186411.3186418]
   Rivain M, 2010, LECT NOTES COMPUT SC, V6225, P413, DOI 10.1007/978-3-642-15031-9_28
   Schommer Bernhard, 2018, WCET 2018 18 INT WOR, V63, DOI [DOI 10.4230/OASICS.WCET.2018.8, 10.4230/ OASIcs. WCET. 2018.8]
   Shoshitaishvili Y, 2016, P IEEE S SECUR PRIV, P138, DOI 10.1109/SP.2016.17
   Simon L, 2018, 2018 3RD IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P 2018), P1, DOI 10.1109/EuroSP.2018.00009
   Stallman Richard M., 2009, Using The Gnu Compiler Collection: A Gnu Manual For Gcc Version 4.3.3
   The LLVM Foundation, 2019, LLVM LANG REF MAN
   The OpenSSL Project, 2003, OPENSSL OPEN SOURCE
   Vu ST, 2020, PROCEEDINGS OF THE 29TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '20), P14, DOI 10.1145/3377555.3377897
   Witteman Marc, 2018, SECURE APPL PROGR PR
   Yang ZM, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P1025
   Yarom Y, 2017, J CRYPTOGR ENG, V7, P99, DOI 10.1007/s13389-017-0152-y
NR 50
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 142
DI 10.1145/3485519
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200045
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Feldman, YMY
   Sagiv, M
   Shoham, S
   Wilcox, JR
AF Feldman, Yotam M. Y.
   Sagiv, Mooly
   Shoham, Sharon
   Wilcox, James R.
TI Learning the Boundary of Inductive Invariants
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE invariant inference; complexity; exact learning; interpolation; Hamming
   geometry
ID ALGORITHMS
AB We study the complexity of invariant inference and its connections to exact concept learning. We define a condition on invariants and their geometry, called the fence condition, which permits applying theoretical results from exact concept learning to answer open problems in invariant inference theory. The condition requires the invariant's boundary-the states whose Hamming distance from the invariant is one-to be backwards reachable from the bad states in a small number of steps. Using this condition, we obtain the first polynomial complexity result for an interpolation-based invariant inference algorithm, efficiently inferring monotone DNF invariants with access to a SAT solver as an oracle. We further harness Bshouty's seminal result in concept learning to efficiently infer invariants of a larger syntactic class of invariants beyond monotone DNF. Lastly, we consider the robustness of inference under program transformations. We show that some simple transformations preserve the fence condition, and that it is sensitive to more complex transformations.
C1 [Feldman, Yotam M. Y.; Sagiv, Mooly; Shoham, Sharon] Tel Aviv Univ, Tel Aviv, Israel.
   [Wilcox, James R.] Certora, Princeton, NJ USA.
C3 Tel Aviv University
RP Feldman, YMY (corresponding author), Tel Aviv Univ, Tel Aviv, Israel.
EM yotam.feldman@gmail.com; msagiv@acm.org; sharon.shoham@gmail.com;
   james@certora.com
OI Feldman, Yotam/0000-0001-6922-0982
FU European Research Council under the European Union's Horizon 2020
   research and innovation programme [759102-SVIS]; Blavatnik
   Interdisciplinary Cyber Research Center, Tel Aviv University, Pazy
   Foundation [347853669]; United States-Israel Binational Science
   Foundation (BSF) [2016260]; Israeli Science Foundation (ISF) [1810/18]
FX We thank our shepherd and the anonymous reviewers for comments which
   improved the paper. We thank Kalev Alpernas, Nader Bshouty, Shachar
   Itzhaky, Neil Immerman, Kenneth McMillan, Yishay Mansour, and Oded Padon
   for insightful discussions, and Sivan Gershon-Feldman for help with Fig.
   2. The research leading to these results has received funding from the
   European Research Council under the European Union's Horizon 2020
   research and innovation programme (grant agreement No [759102-SVIS]).
   This research was partially supported by the Blavatnik Interdisciplinary
   Cyber Research Center, Tel Aviv University, Pazy Foundation grant No.
   347853669, the United States-Israel Binational Science Foundation (BSF)
   grant No. 2016260, and the Israeli Science Foundation (ISF) grant No.
   1810/18.
CR Abouzied Azza, 2013, P 32 ACM SIGMOD SIGA, P49, DOI 10.1145
   AIZENSTEIN H, 1995, MACH LEARN, V19, P183, DOI 10.1007/BF00996269
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   ANGLUIN D, 1993, J ACM, V40, P185, DOI 10.1145/138027.138061
   Angluin D., 1988, Machine Learning, V2, P319, DOI 10.1007/BF00116828
   [Anonymous], 1957, J. Symb. Log., DOI DOI 10.2307/2963593
   [Anonymous], 2011, ENCY MATH ITS APPL
   [Anonymous], 2013, Proceedings of the 25th International Conference on Computer Aided Verification, CAV'13, DOI 10.1007/978-3-642-39799-8
   Arias Marta., 2004, THESIS TUFTS U MEDFO THESIS TUFTS U MEDFO
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Bjorner N., 2013, Proceedings of the International Conference on Logic for Programming, Artificial Intelligence and Reasoning, P35
   Borralleras C, 2017, LECT NOTES COMPUT SC, V10205, P99, DOI 10.1007/978-3-662-54577-5_6
   Bradley AR, 2011, LECT NOTES COMPUT SC, V6538, P70, DOI 10.1007/978-3-642-18275-4_7
   Bshouty NH, 2018, THEOR COMPUT SCI, V733, P4, DOI 10.1016/j.tcs.2018.04.034
   BSHOUTY NH, 1995, INFORM COMPUT, V123, P146, DOI 10.1006/inco.1995.1164
   Bshouty NH, 1997, COMPUT COMPLEX, V6, P174, DOI 10.1007/BF01262930
   CHANDRA AK, 1978, DISCRETE MATH, V24, P7, DOI 10.1016/0012-365X(78)90168-1
   Chen YF, 2010, LECT NOTES COMPUT SC, V6174, P511, DOI 10.1007/978-3-642-14295-6_44
   Chockler Hana, 2012, HARDWARE SOFTWARE VE, DOI [10.1007/978-3-642- 39611-3_12, DOI 10.1007/978-3-642-39611-3_12]
   Cimatti A, 2010, ACM T COMPUT LOG, V12, DOI 10.1145/1838552.1838559
   Cyphert J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290358
   Dillig I, 2013, ACM SIGPLAN NOTICES, V48, P443, DOI [10.1145/2509136.2509511, 10.1145/2544173.2509511]
   Drews S, 2016, LECT NOTES COMPUT SC, V9780, P210, DOI 10.1007/978-3-319-41540-6_12
   Een N., 2011, 2011 Formal Methods in Computer-Aided Design (FMCAD), P125
   Fedyukovich G, 2018, LECT NOTES COMPUT SC, V10805, P251, DOI 10.1007/978-3-319-89960-2_14
   Feldman YMY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371073
   Feldman YMY, 2019, LECT NOTES COMPUT SC, V11562, P405, DOI 10.1007/978-3-030-25543-5_23
   Feldman Yotam M. Y., ABS200809909 CORR ABS200809909 CORR
   Filliâtre JC, 2016, FORM METHOD SYST DES, V48, P152, DOI 10.1007/s10703-016-0243-x
   Flanagan C., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P500
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P191, DOI 10.1145/565816.503291
   Garg P, 2016, ACM SIGPLAN NOTICES, V51, P499, DOI 10.1145/2914770.2837664
   Garg P, 2014, LECT NOTES COMPUT SC, V8559, P69, DOI 10.1007/978-3-319-08867-9_5
   Giacobazzi R, 2015, ACM SIGPLAN NOTICES, V50, P261, DOI [10.1145/2775051.2676987, 10.1145/2676726.2676987]
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Gurfinkel A, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P338, DOI 10.1145/2950290.2950330
   Itzhaky S, 2014, LECT NOTES COMPUT SC, V8559, P35
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Jung Y, 2015, MATH STRUCT COMP SCI, V25, P892, DOI 10.1017/S0960129513000078
   Karbyshev A, 2017, J ACM, V64, DOI 10.1145/3022187
   Karpenkov EG, 2016, LECT NOTES COMPUT SC, V9583, P127, DOI 10.1007/978-3-662-49122-5_6
   Koenig JR, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P703, DOI 10.1145/3385412.3386018
   Lahiri SK, 2009, LECT NOTES ARTIF INT, V5663, P214, DOI 10.1007/978-3-642-02959-2_18
   Leino KRM, 2016, LECT NOTES COMPUT SC, V9779, P361, DOI 10.1007/978-3-319-41528-4_20
   Logozzo F, 2014, ACM SIGPLAN NOTICES, V49, P294, DOI [10.1145/2594291.2594326, 10.1145/2666356.2594326]
   McMillan K. L., 2011, 2011 Formal Methods in Computer-Aided Design (FMCAD), P19
   McMillan K.L., 2018, Handbook of Model Checking, P421, DOI [DOI 10.1007/978-3-319-10575-8_14, 10.1007/978-3-319-10575-8, DOI 10.1007/978-3-319-10575-8]
   McMillan KL, 2006, LECT NOTES COMPUT SC, V4144, P123
   McMillan KL, 2005, THEOR COMPUT SCI, V345, P101, DOI 10.1016/j.tcs.2005.07.003
   McMillan KL, 2003, LECT NOTES COMPUT SC, V2725, P1
   Namjoshi KS, 2007, LECT NOTES COMPUT SC, V4349, P299
   ODonnell R, 2014, ANAL BOOLEAN FUNCTIO, DOI DOI 10.1017/CBO9781139814782
   Quinlan J. R., 1986, Machine Learning, V1, P81, DOI 10.1007/BF00116251
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   Sharma Rahul, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P71, DOI 10.1007/978-3-642-31424-7_11
   Sharma Rahul, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P703, DOI 10.1007/978-3-642-22110-1_57
   Sharma R, 2016, FORM METHOD SYST DES, V48, P235, DOI 10.1007/s10703-016-0248-5
   Sharma R, 2013, LECT NOTES COMPUT SC, V7935, P388, DOI 10.1007/978-3-642-38856-9_21
   Sharma R, 2013, LECT NOTES COMPUT SC, V7792, P574, DOI 10.1007/978-3-642-37036-6_31
   Sloan RH, 2008, SIAM J DISCRETE MATH, V21, P987, DOI 10.1137/050632026
   Srivastava Saurabh, 2013, International Journal on Software Tools for Technology Transfer, V15, P497, DOI 10.1007/s10009-012-0223-4
   VALIANT LG, 1984, COMMUN ACM, V27, P1134, DOI 10.1145/1968.1972
   Vizel Y, 2015, LECT NOTES COMPUT SC, V9206, P641, DOI 10.1007/978-3-319-21690-4_43
   Vizel Y, 2015, FORM METHOD SYST DES, V47, P51, DOI 10.1007/s10703-015-0224-5
   Wiedemann Douglas H, 1987, THESIS U WATERLOO
NR 65
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 15
DI 10.1145/3434296
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100015
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Mathiasen, AA
   Pavlogiannis, A
AF Mathiasen, Anders Alnor
   Pavlogiannis, Andreas
TI The Fine-Grained and Parallel Complexity of Andersen's Pointer Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE static pointer analysis; inclusion-based pointer analysis; fine-grained
   complexity; Dyck reachability
ID TO ANALYSIS; ELIMINATION; LINES
AB Pointer analysis is one of the fundamental problems in static program analysis. Given a set of pointers, the task is to produce a useful over-approximation of the memory locations that each pointer may point-to at runtime. The most common formulation is Andersen's Pointer Analysis (APA), defined as an inclusion-based set of n pointer constraints over a set of n pointers. Scalability is extremely important, as points-to information is a prerequisite to many other components in the static-analysis pipeline. Existing algorithms solve APA in O (n(2) . m) time, while it has been conjectured that the problem has no truly sub-cubic algorithm, with a proof so far having remained elusive. It is also well-known that APA can be solved in O (n(2)) time under certain sparsity conditions that hold naturally in some settings. Besides these simple bounds, the complexity of the problem has remained poorly understood.
   In this work we draw a rich fine-grained and parallel complexity landscape of APA, and present upper and lower bounds. First, we establish an O (n(3)) upper-bound for general APA, improving over O (n(2) . m) as n = O (m). Second, we show that even on-demand APA ("may a specific pointer n point to a specific location b?") has an Omega(n(3)) (combinatorial) lower bound under standard complexity-theoretic hypotheses. This formally establishes the long-conjectured lcubic bottleneckz of APA, and shows that our O (n(3))-time algorithm is optimal. Third, we show that under mild restrictions, APA is solvable in (O) over tilde (n(omega)) time, where omega < 2.373 is the matrix-multiplication exponent. It is believed that omega = 2 + o (1), in which case this bound becomes quadratic. Fourth, we show that even under such restrictions, even the on-demand problem has an Omega(n(2)) lower bound under standard complexity-theoretic hypotheses, and hence our algorithm is optimal when omega = 2 + o (1). Fifth, we study the parallelizability of APA and establish lower and upper bounds: (i) in general, the problem is P-complete and hence unlikely parallelizable, whereas (ii) under mild restrictions, the problem is parallelizable. Our theoretical treatment formalizes several insights that can lead to practical improvements in the future.
C1 [Mathiasen, Anders Alnor; Pavlogiannis, Andreas] Aarhus Univ, Aabogade 34, DK-8200 Aarhus, Denmark.
C3 Aarhus University
RP Mathiasen, AA (corresponding author), Aarhus Univ, Aabogade 34, DK-8200 Aarhus, Denmark.
EM au611509@uni.au.dk; pavlogiannis@cs.au.dk
RI Pavlogiannis, Andreas/X-6831-2018
OI Pavlogiannis, Andreas/0000-0002-8943-0722
CR Abboud A, 2014, ANN IEEE SYMP FOUND, P434, DOI 10.1109/FOCS.2014.53
   Aiken Alexander, 1997, FLOW INSENSITIVE POI
   Alon N, 1997, J COMPUT SYST SCI, V54, P255, DOI 10.1006/jcss.1997.1388
   [Anonymous], 1994, Program analysis and specialization for the C programming language
   Bansal N, 2009, ANN IEEE SYMP FOUND, P745, DOI 10.1109/FOCS.2009.76
   Berndl M, 2003, ACM SIGPLAN NOTICES, V38, P103, DOI 10.1145/780822.781144
   Blackshear S, 2011, LECT NOTES COMPUT SC, V6887, P60, DOI 10.1007/978-3-642-23702-7_9
   Blass T, 2019, PROCEEDINGS OF THE 28TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '19), P122, DOI 10.1145/3302516.3307352
   BODDY M, 1991, PROCEEDINGS : NINTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE, VOLS 1 AND 2, P738
   Bradford Phillip G., 2018, ARXIVCSDS180205239
   Chakaravarthy VT, 2003, ACM SIGPLAN NOTICES, V38, P115, DOI 10.1145/640128.604142
   Chatterjee K, 2015, ACM SIGPLAN NOTICES, V50, P539, DOI [10.1145/2775051.2676968, 10.1145/2676726.2676968]
   Chatterjee Krishnendu, 2016, 41 INT S MATH FDN CO, V58, P1
   Chatterjee Krishnendu, 2018, P ACM PROGRAM LANG
   Das M, 2000, ACM SIGPLAN NOTICES, V35, P35, DOI 10.1145/358438.349309
   Das Manuvir, 2001, STATIC ANAL, V5
   Dave N, 2007, MEMOCODE'07: FIFTH ACM & IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR CO-DESIGN, PROCEEDINGS, P97, DOI 10.1109/MEMCOD.2007.371239
   DELEAGE JL, 1986, THEOR COMPUT SCI, V47, P335, DOI 10.1016/0304-3975(86)90158-1
   Dietrich J, 2015, ACM SIGPLAN NOTICES, V50, P535, DOI [10.1145/2858965.2814307, 10.1145/2814270.2814307]
   Fahndrich M, 1998, ACM SIGPLAN NOTICES, V33, P85, DOI 10.1145/277652.277667
   Ghiya R, 2001, ACM SIGPLAN NOTICES, V36, P47, DOI 10.1145/381694.378806
   Greenlaw Raymond., 1995, Limits to Parallel Computation: P-Completeness Theory, DOI DOI 10.1093/OSO/9780195085914.001.0001
   Hardekopf B, 2007, ACM SIGPLAN NOTICES, V42, P290, DOI 10.1145/1273442.1250767
   Hardekopf B, 2011, INT SYM CODE GENER, P289, DOI 10.1109/CGO.2011.5764696
   Heintze N, 2001, ACM SIGPLAN NOTICES, V36, P254, DOI 10.1145/381694.378855
   Heintze N, 2001, ACM SIGPLAN NOTICES, V36, P24, DOI 10.1145/381694.378802
   Heintze N, 1997, IEEE S LOG, P342, DOI 10.1109/LICS.1997.614960
   Heintze Nevin Charles, 1992, THESIS US
   Hind M, 2001, ACM SIGPLAN NOTICES, P54
   Hirzel M, 2004, LECT NOTES COMPUT SC, V3086, P96
   Horwitz S, 1997, ACM T PROGR LANG SYS, V19, P1, DOI 10.1145/239912.239913
   Huang Jianyu., 2016, Proceedings_of_the_International_Conference_for_High_Performance_Computing, Networking,_Storage_and_Analysis, page, P59
   Huss-Lederman S., 1996, SUPERCOMPUTING 96, P32, DOI [DOI 10.1145/369028.369096, 10.1145/369028.369096]
   Jang Dongseok., 2009, Proceedings of the 2009 ACM Symposium on Applied Computing, SAC '09, P1930
   Kaporin I, 1999, NUMER LINEAR ALGEBR, V6, P687, DOI 10.1002/(SICI)1099-1506(199912)6:8<687::AID-NLA177>3.0.CO;2-I
   Kodumal J, 2004, ACM SIGPLAN NOTICES, V39, P207, DOI 10.1145/996893.996867
   LADERMAN J, 1992, LINEAR ALGEBRA APPL, V162, P557, DOI 10.1016/0024-3795(92)90393-O
   Landi W., 1991, POPL
   LeGall F., 2014, P INT S SYMB ALG COM, P296, DOI 10.1145/2608628.2608664
   Lhotak O., 2003, P 12 INT C COMPILER
   Lu Y, 2013, LECT NOTES COMPUT SC, V7791, P61, DOI 10.1007/978-3-642-37051-9_4
   Lyde S, 2016, ACM SIGPLAN NOTICES, V51, P54, DOI [10.1145/2816707.2816712, 10.1145/2936313.2816712]
   Mathiasen Anders Alnor, 2020, ARXIVCSPL200601491
   McAllester D, 1999, LECT NOTES COMPUT SC, V1694, P312
   Melski D, 2000, THEOR COMPUT SCI, V248, P29, DOI 10.1016/S0304-3975(00)00049-9
   Méndez-Lojo M, 2012, ACM SIGPLAN NOTICES, V47, P107, DOI 10.1145/2370036.2145831
   Méndez-Lojo M, 2010, ACM SIGPLAN NOTICES, V45, P428, DOI 10.1145/1932682.1869495
   Muller Anders, 2018, STATIC PROGRAM ANAL
   Munro I., 1971, Information Processing Letters, V1, P56, DOI 10.1016/0020-0190(71)90006-8
   Papadimitriou C., 1993, COMPUT COMPLEX, V1st
   Pearce DJ, 2004, SOFTWARE QUAL J, V12, P311, DOI 10.1023/B:SQJO.0000039791.93071.a2
   Pek Edgar, 2014, P 3 ACM SIGPLAN INT, P1, DOI 10.1145/2614628.2614632
   RAMALINGAM G, 1994, ACM T PROGR LANG SYS, V16, P1467, DOI 10.1145/186025.186041
   Reps T, 1996, ACTA INFORM, V33, P739, DOI 10.1007/s002360050068
   Rountev A, 2000, ACM SIGPLAN NOTICES, V35, P47, DOI 10.1145/358438.349310
   Shapiro M., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P1, DOI 10.1145/263699.263703
   Smaragdakis Y., 2015, FDN TRENDS PROGRAM L, V2, P1, DOI DOI 10.1561/2500000014
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan M, 2009, LECT NOTES COMPUT SC, V5673, P205, DOI 10.1007/978-3-642-03237-0_15
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   STRASSEN V, 1969, NUMER MATH, V13, P354, DOI 10.1007/BF02165411
   Su Y, 2014, PROC INT CONF PARAL, P451, DOI 10.1109/ICPP.2014.54
   Su Z., 2000, Proceedings of the 27th ACM SIGPLAN-SIGACT symposium on Principles of programming languages (POPL), P81, DOI [10.1145/325694.325706, DOI 10.1145/325694.325706]
   Sui YL, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P460, DOI 10.1145/2950290.2950296
   Vallee-Rai R., 1999, CASCON 99 P
   Vedurada J, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P936, DOI 10.1109/ASE.2019.00091
   Wang K, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P389, DOI 10.1145/3037697.3037744
   Whaley J, 2002, LECT NOTES COMPUT SC, V2477, P180
   Williams R, 2005, THEOR COMPUT SCI, V348, P357, DOI 10.1016/j.tcs.2005.09.023
   Williams VV, 2018, J ACM, V65, DOI [10.1145/318693, 10.1145/3186893]
   Williams Virginia Vassilevska, 2019, SOME FINE GRAINED QU
   Xu GQ, 2009, LECT NOTES COMPUT SC, V5653, P98
   Zhang Q., 2020, ARXIV PREPRINT ARXIV
   Zhang Qirun, 2013, FAST ALGORITHMS DYCK
   Zheng X, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P197, DOI 10.1145/1328438.1328464
NR 75
TC 8
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 34
DI 10.1145/3434315
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100034
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Sabok, M
   Staton, S
   Stein, D
   Wolman, M
AF Sabok, Marcin
   Staton, Sam
   Stein, Dario
   Wolman, Michael
TI Probabilistic Programming Semantics for Name Generation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programming; name generation; nu-calculus; quasi-Borel
   spaces; standard Borel spaces; descriptive set theory; Borel on Borel;
   denotational semantics; synthetic probability theory
AB We make a formal analogy between random sampling and fresh name generation. We show that quasi-Borel spaces, a model for probabilistic programming, can soundly interpret the nu-calculus, a calculus for name generation. Moreover, we prove that this semantics is fully abstract up to first-order types. This is surprising for an 'off-the-shelf' model, and requires a novel analysis of probability distributions on function spaces. Our tools are diverse and include descriptive set theory and normal forms for the nu-calculus.
C1 [Sabok, Marcin; Wolman, Michael] McGill Univ, Dept Math & Stat, Montreal, PQ, Canada.
   [Staton, Sam; Stein, Dario] Univ Oxford, Dept Comp Sci, Oxford, England.
C3 McGill University; University of Oxford
RP Sabok, M (corresponding author), McGill Univ, Dept Math & Stat, Montreal, PQ, Canada.
EM sabok@mcgill.ca; staton@cs.ox.ac.uk; stein@cs.ox.ac.uk;
   michael.wolman@mail.mcgill.ca
FU EPSRC [EP/N509711/1]; Royal Society University Research Fellowship,
   FRQNT [290736]; NSERC [RGPIN-2020-05445]; NSERC Discovery Accelerator
   Supplement [RGPAS-2020-00097]; NCN [2018/30/M/ST1/00668]
FX We thank Alexander Kechris for a first proof of the privacy equation; we
   have independently developed a different proof based on Borel
   inseparability (g4.1). We also thank Ohad Kammar for many insightful
   comments on an early draft of this work. The work has had three starting
   points: one in discussions with Alex Simpson in 2013; one in discussions
   with Cameron Freer and Dan Roy in 2016; and the last following
   discussions with Ohad Kammar and Prakash Panangaden in 2019. We also
   thank Tobias Fritz, Mathieu Huot and Sean Moss for helpful discussions.
   It has been helpful to present preliminary versions of this work at the
   LAFI and PPS workshops. This work is supported by EPSRC Grant No.
   EP/N509711/1, a Royal Society University Research Fellowship, FRQNT
   Grant No. 290736, NSERC Discovery Grant No. RGPIN-2020-05445, NSERC
   Discovery Accelerator Supplement No. RGPAS-2020-00097 and NCN Grant
   Harmonia No. 2018/30/M/ST1/00668.
CR Abramsky S, 2004, IEEE S LOG, P150, DOI 10.1109/LICS.2004.1319609
   [Anonymous], 1994, 363 U CAMBR COMP LAB
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 1998, A course on Borel sets
   Aumann Robert J., 1961, ILLINOIS J MATH, V5
   Bacci Giorgio, 2018, P LICS 2018
   Benton Nick, 2008, MSRTR2008129
   Dahlqvist Fredrik, 2020, P ACM PROGR LANG
   Dal Lago Ugo, 2019, P LICS 2019
   Dal Lago Ugo, 2019, ELECT NOTES THEORET, V347
   Ehrhard T, 2014, ACM SIGPLAN NOTICES, V49, P309, DOI 10.1145/2535838.2535865
   Ehrhard Thomas, 2018, P POPL 2018
   Escardó M, 2009, ELECTRON NOTES THEOR, V249, P219, DOI 10.1016/j.entcs.2009.07.092
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   Fritz T, 2020, ADV MATH, V370, DOI 10.1016/j.aim.2020.107239
   Gehr T., 2020, P PLDI 2020
   Heunen Chris, 2017, IEEE S LOG, P1, DOI 10.1109/LICS.2017.8005137
   Huang Daniel, 2018, ARXIV180607966
   Jeffrey A., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P56, DOI 10.1109/LICS.1999.782586
   Jung Paul, 2020, ANN H LEBESGUE
   Kallenberg O., 2002, Foundations of modern probability
   Kammar O, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P349
   Kechris Alexander, 1987, Classical Descriptive Set Theory
   Kock Anders, 2011, THEOR APPL CATEG, V26
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Laird James, 2004, P FOSSACS 2004
   Lambek Joachim, 1988, Introduction to Higher Order Categorical Logic, V7
   Lew Alexander K., 2019, P ACM PROGR LANG
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Murawski Andrzej S., 2016, FDN TRENDS PROGRAM L
   Murray LM, 2018, ANNU REV CONTROL, V46, P29, DOI 10.1016/j.arcontrol.2018.10.013
   Nori AV, 2014, AAAI CONF ARTIF INTE, P2476
   Odersky M., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P48, DOI 10.1145/174675.175187
   Orbanz Peter, 2015, IEEE T PATTERN ANAL, V2015
   Paquet Hugo, 2018, P MFPS 2018
   Parzygnat A.J., 2020, ARXIV200108375
   Patterson Evan, 2020, THESIS STANFORD U DE
   Pitts AM, 2013, CAM T THEOR, V57, P1, DOI 10.1017/CBO9781139084673
   Pitts Andrew M., 1993, LECT NOTES COMPUTER
   Plotkin Gordon, 1973, Lambda-definability and logical relations
   Pollard D., 2001, USERS GUIDE MEASURE
   Sato T, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290351
   Scibior Adam, 2017, P ACM PROGR LANG, V2
   Shan CC, 2017, ACM SIGPLAN NOTICES, V52, P130, DOI 10.1145/3093333.3009852
   Shiebler D, 2020, PROC ACT 2020
   Simpson Alex, 2017, P CALCO 2017
   Stark Ian, 1996, LISP SYMB COMPUT, V9
   Staton S., 2017, P PPS 2017
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   Staton S, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P525, DOI 10.1145/2933575.2935313
   Staton S, 2010, LECT NOTES COMPUT SC, V6014, P48, DOI 10.1007/978-3-642-12032-9_5
   Staton Sam, 2018, P ICALP 2018
   Sumii Eijiro, 2003, J COMPUT SECUR, V11
   Tenenbaum Josh, 2008, ICML
   Tzevelekos Nikos, 2008, THESIS OXFORD U COMP
   van de Meent J., 2018, ABS180910756 CORR
   Vandenbroucke Alexander, 2020, P POPL 2020
   Zhang Yu, 2003, P CSL 2003
NR 58
TC 4
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 11
DI 10.1145/3434292
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100011
OA Green Submitted, gold, Green Published
DA 2024-07-18
ER

PT J
AU Bembenek, A
   Greenberg, M
   Chong, S
AF Bembenek, Aaron
   Greenberg, Michael
   Chong, Stephen
TI Formulog: Datalog for SMT-Based Static Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Datalog; SMT solving
ID SOFTWARE MODEL CHECKING; SYMBOLIC EXECUTION; PROGRAM
AB Satisfiability modulo theories (SMT) solving has become a critical part of many static analyses, including symbolic execution, refinement type checking, and model checking. We propose Formulog, a domain-specific language that makes it possible to write a range of SMT-based static analyses in a way that is both close to their formal specifications and amenable to high-level optimizations and efficient evaluation.
   Formulog extends the logic programming language Datalog with a first-order functional language and mechanisms for representing and reasoning about SMT formulas; a novel type system supports the construction of expressive formulas, while ensuring that neither normal evaluation nor SMT solving goes wrong. Our case studies demonstrate that a range of SMT-based analyses can naturally and concisely be encoded in Formulog, and that thanks to this encoding high-level Datalog-style optimizations can be automatically and advantageously applied to these analyses.
C1 [Bembenek, Aaron; Chong, Stephen] Harvard Univ, Cambridge, MA 02138 USA.
   [Greenberg, Michael] Pomona Coll, Claremont, CA 91711 USA.
C3 Harvard University; Claremont Colleges; Pomona College
RP Bembenek, A (corresponding author), Harvard Univ, Cambridge, MA 02138 USA.
EM bembenek@g.harvard.edu; michael@cs.pomona.edu; chong@seas.harvard.edu
OI Greenberg, Michael/0000-0003-0014-7670; Bembenek,
   Aaron/0000-0002-3677-701X
FU Defense Advanced Research Projects Agency (DARPA) [FA8750-19-C-0004]
FX This material is based upon work supported by the Defense Advanced
   Research Projects Agency (DARPA) under Contract No. FA8750-19-C-0004.
   Any opinions, findings and conclusions or recommendations expressed in
   this material are those of the author(s) and do not necessarily reflect
   the views of the Defense Advanced Research Projects Agency (DARPA). We
   thank Arlen Cox, Scott Moore, the Harvard PL group, and anonymous
   reviewers for thoughtful feedback on earlier drafts.
CR Aiken A, 2007, PASTE'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN- SIGSOFT WORKSHOP ON PROGRAM ANALYSIS FOR SOFTWARE TOOLS & ENGINEERING, P43, DOI 10.1145/1251535.1251543
   Albarghouthi A, 2017, LECT NOTES COMPUT SC, V10416, P689, DOI 10.1007/978-3-319-66158-2_44
   [Anonymous], 1985, P 5 ACM SIGACT SIGMO, DOI DOI 10.1145/6012.15399
   Antoy S, 2010, COMMUN ACM, V53, P74, DOI 10.1145/1721654.1721675
   Apt K. R., 1988, FDN DEDUCTIVE DATABA, P89, DOI DOI 10.1016/B978-0-934613-40-8.50006-3
   Aref M, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1371, DOI 10.1145/2723372.2742796
   Arntzenius M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371090
   Arntzenius M, 2016, ACM SIGPLAN NOTICES, V51, P214, DOI 10.1145/3022670.2951948
   Avgustinov Pavel., 2016, 30th European Conference on Object-Oriented Programming, ECOOP 2016, July 18-22, 2016, Rome, Italy, p2:1, DOI DOI 10.4230/LIPICS.ECOOP.2016.2
   Bancilhon Francois., 1986, KNOWLEDGE BASE MANAG, P165, DOI [10.1007/978-1-4612-4980-1_17, DOI 10.1007/978-1-4612-4980-1_17]
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Barrett C., 2016, The Satisfiability Modulo Theories Library (SMT-LIB)
   BEERI C, 1991, J LOGIC PROGRAM, V10, P255, DOI 10.1016/0743-1066(91)90038-Q
   Bembenek Aaron, 2020, ARXIV200908361 CS PL
   Bierman GM, 2012, J FUNCT PROGRAM, V22, P31, DOI 10.1017/S0956796812000032
   Bjorner N, 2015, LECT NOTES COMPUT SC, V9300, P24, DOI 10.1007/978-3-319-23534-9_2
   Bravenboer M, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P243
   Brewka G, 2011, COMMUN ACM, V54, P92, DOI 10.1145/2043174.2043195
   Cadar C., 2008, OSDI, V8, P209, DOI DOI 10.5555/1855741.1855756
   Cadar C, 2013, COMMUN ACM, V56, P82, DOI 10.1145/2408776.2408795
   Carlsson M, 2012, THEOR PRACT LOG PROG, V12, P35, DOI 10.1017/S1471068411000482
   Cimatti Alessandro, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P277, DOI 10.1007/978-3-642-31424-7_23
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Codish M, 2008, THEOR PRACT LOG PROG, V8, P121, DOI 10.1017/S1471068407003146
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Craig W., 1957, J SYMBOLIC LOGIC, V22, P269
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Delzanno G, 1999, LECT NOTES COMPUT SC, V1579, P223
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Dutertre B, 2014, LECT NOTES COMPUT SC, V8559, P737, DOI 10.1007/978-3-319-08867-9_49
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Feng Y, 2015, LECT NOTES COMPUT SC, V9458, P465, DOI 10.1007/978-3-319-26529-2_25
   Flanagan C, 2004, SCI COMPUT PROGRAM, V50, P253, DOI 10.1016/j.scico.2004.01.006
   Flores-Montoya A, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P1075
   Fribourg L, 1997, LECT NOTES COMPUT SC, V1207, P20
   Gallaire H., 1978, LOGIC DATA BASES
   Gelfound M., 1988, Logic Programming: Proceedings of the Fifth International Conference and Symposium, P1070
   Grebenshchikov S, 2012, ACM SIGPLAN NOTICES, V47, P405, DOI 10.1145/2345156.2254112
   Grech N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276486
   Grech N, 2019, PROC INT CONF SOFTW, P1176, DOI 10.1109/ICSE.2019.00120
   Green TJ, 2012, FOUND TRENDS DATABAS, V5, P105, DOI 10.1561/1900000017
   Guarnieri S., 2009, USENIX SECURITY, V10, P78
   Gupta A., 1993, SIGMOD Record, V22, P157, DOI 10.1145/170036.170066
   Gurfinkel A, 2015, LECT NOTES COMPUT SC, V9206, P343, DOI 10.1007/978-3-319-21690-4_20
   Hackett Brian, 2010, THESIS STANFORD U
   Henzinger TA, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/565816.503279
   Hoder Krystof, 2011, INT C COMP AID VER, P457
   Hoder Krystof, 2012, LNCS, P157, DOI [10.1007/978-3-642-31612-8_13, DOI 10.1007/978-3-642-31612-8_13, DOI 10.1007/978-3-642-31612-813]
   Jaffar J., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P111, DOI 10.1145/41625.41635
   JAFFAR J, 1994, J LOGIC PROGRAM, V20, P503, DOI 10.1016/0743-1066(94)90033-7
   Jordan H, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P327, DOI 10.1145/3293883.3295719
   Jordan H, 2016, LECT NOTES COMPUT SC, V9780, P422, DOI 10.1007/978-3-319-41540-6_23
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Köksal AS, 2011, LECT NOTES ARTIF INT, V6803, P400, DOI 10.1007/978-3-642-22438-6_30
   KOWALSKI R, 1979, COMMUN ACM, V22, P424, DOI 10.1145/359131.359136
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   Livshits VB, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 14TH USENIX SECURITY SYMPOSIUM, P271
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   McMillan KL, 2006, LECT NOTES COMPUT SC, V4144, P123
   Miller D., 1987, Proceedings of the 1987 Symposium on Logic Programming (Cat. No.87CH2472-9), P379
   Naik Mayur., 2011, Chord: A program analysis platform for Java
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Podelski A, 2007, LECT NOTES COMPUT SC, V4354, P245
   Przymusinski T. C., 1988, F DEDUCTIVE DATABASE, P193
   Raghothaman Mukund, 2019, P ACM PROGR LANG POP, V4, P1
   Reps T. W., 1995, Applications of Logic Databases, P163
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Scholz B, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P196, DOI 10.1145/2892208.2892226
   Smaragdakis Y, 2011, LECT NOTES COMPUT SC, V6702, P245
   Szabó T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276509
   Torlak Emina, 2013, P 2013 ACM INT S NEW, P135, DOI DOI 10.1145/2509578.2509586
   Tsankov P, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P67, DOI 10.1145/3243734.3243780
   Uhler Richard, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P678, DOI 10.1007/978-3-642-39799-8_45
   van Antwerpen H, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276484
   VANGELDER A, 1989, J LOGIC PROGRAM, V6, P109, DOI 10.1016/0743-1066(89)90032-0
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Whaley J, 2005, LECT NOTES COMPUT SC, V3780, P97
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
NR 80
TC 13
Z9 16
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 141
DI 10.1145/3428209
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900018
OA gold
DA 2024-07-18
ER

PT J
AU Liu, YY
   Parker, J
   Redmond, P
   Kuper, L
   Hicks, M
   Vazou, N
AF Liu, Yiyun
   Parker, James
   Redmond, Patrick
   Kuper, Lindsey
   Hicks, Michael
   Vazou, Niki
TI Verifying Replicated Data Types with Typeclass Refinements in Liquid
   Haskell
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE replicated data types; CRDTs; typeclasses; refinement types; Liquid
   Haskell
ID VERIFICATION; TOOL
AB This paper presents an extension to Liquid Haskell that facilitates stating and semi-automatically proving properties of typeclasses. Liquid Haskell augments Haskell with refinement types-our work allows such types to be attached to typeclass method declarations, and ensures that instance implementations respect these types. The engineering of this extension is a modular interaction between GHC, the Glasgow Haskell Compiler, and Liquid Haskell's core proof infrastructure. The design sheds light on the interplay between modular proofs and typeclass resolution, which in Haskell is coherent by default (meaning that resolution always selects the same implementation for a particular instantiating type), but in other dependently typed languages is not.
   We demonstrate the utility of our extension by using Liquid Haskell to modularly verify that 34 instances satisfy the laws of five standard typeclasses.
   More substantially, we implement a framework for programming distributed applications based on replicated data types (RDTs). We define a typeclass whose Liquid Haskell type captures the mathematical properties RDTs should satisfy; prove in Liquid Haskell that these properties are sufficient to ensure that replicas' states converge despite out-of-order update delivery; implement (and prove correct) several instances of our RDT typeclass; and use them to build two realistic applications, a multi-user calendar event planner and a collaborative text editor.
C1 [Liu, Yiyun; Parker, James; Hicks, Michael] Univ Maryland, College Pk, MD 20742 USA.
   [Redmond, Patrick; Kuper, Lindsey] Univ Calif Santa Cruz, Santa Cruz, CA USA.
   [Vazou, Niki] IMDEA Software Inst, Madrid, Spain.
C3 University System of Maryland; University of Maryland College Park;
   University of California System; University of California Santa Cruz;
   IMDEA Software Institute
RP Liu, YY (corresponding author), Univ Maryland, College Pk, MD 20742 USA.
OI Vazou, Niki/0000-0003-0732-5476; Redmond, Patrick/0000-0001-5702-0860;
   Kuper, Lindsey/0000-0002-1374-7715; Hicks, Michael/0000-0002-2759-9223
FU National Science Foundation [CNS-1563722, CNS-1801545]; Defense Advanced
   Research Projects Agency (DARPA) [FA8750-16-C-0022]; Comunidad de Madrid
   BLOQUESCM [S2018/TCS-4339]; Attraction de Talento [2019-T2/TIC-13455]
FX We thank Jose Calderon for connecting the UCSC and the UMD/IMDEA teams.
   This material is based upon work supported by the National Science
   Foundation under Grant Nos. CNS-1563722 and CNS-1801545; by the Defense
   Advanced Research Projects Agency (DARPA) under Contract No
   FA8750-16-C-0022; by Comunidad de Madrid BLOQUESCM project No
   S2018/TCS-4339 and Attraction de Talento No 2019-T2/TIC-13455; and by
   gifts from Google and Amazon Web Services. Any opinions, findings,
   conclusions or recommendations expressed in this material are those of
   the authors and do not necessarily reflect the views of the sponsoring
   organizations.
CR Ahmed-Nacer Mehdi, 2011, P 11 ACM S DOC ENG M, DOI [10.1145/2034691.2034717, DOI 10.1145/2034691.2034717]
   Arvidsson Andreas., 2016, International Symposium on Trends in Functional Programming, P61
   Attiya H, 2016, PROCEEDINGS OF THE 2016 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC'16), P259, DOI 10.1145/2933057.2933090
   Barnett M, 2005, LECT NOTES COMPUT SC, V3362, P49
   Barrett C., 2010, P 8 INT WORKSHOP SAT, V13, P14
   BIRMAN K, 1991, ACM T COMPUT SYST, V9, P272, DOI 10.1145/128738.128742
   Bottu Gert-Jan, 2019, P ACM PROGRAM LANG
   Burckhardt S, 2014, ACM SIGPLAN NOTICES, V49, P271, DOI 10.1145/2535838.2535848
   Claessen K, 2011, ACM SIGPLAN NOTICES, V46, P53, DOI 10.1145/1988042.1988046
   Claessen Koen, 2012, ATx/WInG@ IJCAR, P16, DOI [10.29007/3qwr, DOI 10.29007/3QWR]
   Constable Robert L, 1987, PARTIAL OBJECT CONST
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Devriese D, 2011, ACM SIGPLAN NOTICES, V46, P143, DOI 10.1145/2034574.2034796
   Dotty Development Team, 2020, DOTT DOC
   Dreyer D, 2007, ACM SIGPLAN NOTICES, V42, P63, DOI 10.1145/1190215.1190229
   Eisenberg Richard, 2016, Ph. D. Dissertation
   Eisenberg RA, 2012, ACM SIGPLAN NOTICES, V47, P117, DOI 10.1145/2430532.2364522
   Elliott C, 1997, ACM SIGPLAN NOTICES, V32, P263, DOI 10.1145/258949.258973
   Farmer A, 2015, ACM SIGPLAN NOTICES, V50, P23, DOI 10.1145/2804302.2804303
   Fidge CJ, 1988, P AUSTR COMP SCI C, V10, P56
   Freeman Phil., 2017, PURESCRIPT EXAMPLE, DOI [10.1145/2887747.2804303, DOI 10.1145/2887747.2804303]
   GHC, 2020, GHC GLASG HASK COMP
   Gomes VBF, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133933
   Gotsman A, 2016, ACM SIGPLAN NOTICES, V51, P371, DOI 10.1145/2914770.2837625
   Grishchenko V., 2010, P 6 INT S WIK OP COL, DOI DOI 10.1145/1832772.1832777
   GUTTAG JV, 1985, IEEE SOFTWARE, V2, P24, DOI 10.1109/MS.1985.231756
   Haftmann Florian, 2006, INT WORKSH TYP PROOF
   Houshmand F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290387
   Jeuring Johan, 2012, P 2012 HASK S
   Kleppmann M, 2017, IEEE T PARALL DISTR, V28, P2733, DOI 10.1109/TPDS.2017.2697382
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lampropoulos Leonidas, 2018, QuickChick: Property-Based Testing in Coq
   Leino KRM, 2016, LECT NOTES COMPUT SC, V9779, P361, DOI 10.1007/978-3-319-41528-4_20
   MacQueen D.B., 1984, LISP FUNCTIONAL PROG, P198
   Martínez G, 2019, LECT NOTES COMPUT SC, V11423, P30, DOI 10.1007/978-3-030-17184-1_2
   Mattern Friedemann, 1994, P WORKSH PAR DISTR A, P123
   McBride C, 2002, J FUNCT PROGRAM, V12, P375, DOI 10.1017/S0956796802004355
   Nagar K, 2019, LECT NOTES COMPUT SC, V11562, P459, DOI 10.1007/978-3-030-25543-5_26
   Nair SS, 2020, LECT NOTES COMPUT SC, V12075, P544, DOI 10.1007/978-3-030-44914-8_20
   Najafzadeh M, 2016, PROCEEDINGS OF THE 2ND WORKSHOP ON THE PRINCIPLES AND PRACTICE OF CONSISTENCY FOR DISTRIBUTED DATA, PAPOC 2016, DOI [10.1145/2911151.2911160, 10.1109/CPE-POWERENG50821.2021.9501173]
   Odersky Martin, 2017, P ACM PROGR LANG 2 P
   Oster G., 2006, CSCW 06 P 2006 20 AN, P259, DOI DOI 10.1145/1180875.1180916
   Parker J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290388
   Preguiça N, 2009, INT CON DISTR COMP S, P395, DOI 10.1109/ICDCS.2009.20
   Roh HG, 2011, J PARALLEL DISTR COM, V71, P354, DOI 10.1016/j.jpdc.2010.12.006
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Rushby J, 1998, IEEE T SOFTWARE ENG, V24, P709, DOI 10.1109/32.713327
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Scott RG, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '19), P15, DOI 10.1145/3331545.3342591
   Shapiro M., 2011, COMPREHENSIVE STUDY
   Shapiro Marc, STABILIZATION SAFETY, P386
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Sivaramakrishnan KC, 2015, ACM SIGPLAN NOTICES, V50, P413, DOI [10.1145/2813885.2737981, 10.1145/2737924.2737981]
   Sonnex W, 2012, LECT NOTES COMPUT SC, V7214, P407, DOI 10.1007/978-3-642-28756-5_28
   Sozeau M, 2008, LECT NOTES COMPUT SC, V5170, P278, DOI 10.1007/978-3-540-71067-7_23
   Spector-Zabusky A., 2018, P 7 ACM SIGPLAN INT, P14, DOI [10.1145/3167092, DOI 10.1145/3167092]
   Stroustrup B., 1989, Computing Systems, V2, P367
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Team Mozilla Research, 2017, RUST PROGR LANG
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158141
   Vazou N, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P132, DOI 10.1145/3242744.3242756
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Vytiniotis D, 2013, ACM SIGPLAN NOTICES, V48, P431, DOI 10.1145/2480359.2429121
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Weirich S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341705
   Weiss S, 2009, INT CON DISTR COMP S, P404, DOI 10.1109/ICDCS.2009.75
   Xi HW, 1998, ACM SIGPLAN NOTICES, V33, P249, DOI 10.1145/277652.277732
   Xie NN, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371121
   Zeller P, 2014, LECT NOTES COMPUT SC, V8461, P33, DOI 10.1007/978-3-662-43613-4_3
NR 70
TC 6
Z9 7
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 216
DI 10.1145/3428284
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900093
OA gold
DA 2024-07-18
ER

PT J
AU Peleg, H
   Gabay, R
   Itzhaky, S
   Yahav, E
AF Peleg, Hila
   Gabay, Roi
   Itzhaky, Shachar
   Yahav, Eran
TI Programming with a Read-Eval-Synth Loop
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; read-eval-print loops; specification predicates
AB A frequent programming pattern for small tasks, especially expressions, is to repeatedly evaluate the program on an input as its editing progresses. The Read-Eval-Print Loop (REPL) interaction model has been a successful model for this programming pattern. We present the new notion of Read-Eval-Synth Loop (RESL) that extends REPL by providing in-place synthesis on parts of the expression marked by the user. RESL eases programming by synthesizing parts of a required solution. The underlying synthesizer relies on a partial solution from the programmer and a few examples.
   RESL hinges on bottom-up synthesis with general predicates and sketching, generalizing programming by example. To make RESL practical, we present a formal framework that extends observational equivalence to non-example specifications.
   We evaluate RESL by conducting a controlled within-subjects user-study on 19 programmers from 8 companies, where programmers are asked to solve a small but challenging set of competitive programming problems. We find that programmers using REM, solve these problems with far less need to edit the code themselves and by browsing documentation far less. In addition, they are less likely to leave a task unfinished and more likely to be correct.
C1 [Peleg, Hila] Univ Calif San Diego, La Jolla, CA 92093 USA.
   [Gabay, Roi; Itzhaky, Shachar; Yahav, Eran] Technion, Haifa, Israel.
C3 University of California System; University of California San Diego;
   Technion Israel Institute of Technology
RP Peleg, H (corresponding author), Univ Calif San Diego, La Jolla, CA 92093 USA.
EM hpeleg@ucsd.edu; roigby@gmail.com; shachari@cs.technion.ac.il;
   yahave@cs.technion.ac.il
FU Israel Science Foundation [243/19, 2740/19]; BSF [2018675]; National
   Science Foundation [1911149]; Division of Computing and Communication
   Foundations; Direct For Computer & Info Scie & Enginr [1911149] Funding
   Source: National Science Foundation
FX 1 This work was supported by Israel Science Foundation grants 243/19 and
   2740/19, BSF grant no. 2018675, and by the National Science Foundation
   under Grant 1911149.
CR Albarghouthi Aws, 2013, INT C COMPUTER AIDED, P934
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 2019, Advances in Neural Information Processing Systems
   Bornholt J, 2016, ACM SIGPLAN NOTICES, V51, P775, DOI 10.1145/2914770.2837666
   Burckhardt S, 2013, ACM SIGPLAN NOTICES, V48, P95, DOI 10.1145/2499370.2462170
   Chasins S, 2017, LECT NOTES COMPUT SC, V10426, P279, DOI 10.1007/978-3-319-63387-9_14
   Chasins S, 2016, ELECTRON P THEOR COM, P3, DOI 10.4204/EPTCS.229.3
   Chasins SE, 2018, UIST 2018: PROCEEDINGS OF THE 31ST ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P963, DOI 10.1145/3242587.3242661
   Chugh R, 2016, ACM SIGPLAN NOTICES, V51, P341, DOI [10.1145/2980983.2908103, 10.1145/2908080.2908103]
   Farzan A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P610, DOI 10.1145/3314221.3314612
   Feldman MQ, 2019, SPLASH-E'19: PROCEEDINGS OF THE 2019 ACM SIGPLAN SYMPOSIUM ON SPLASH-E, P13, DOI 10.1145/3358711.3361626
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Ferdowsifard Kasra, 2020, IN PRESS
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Galenson J, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P653, DOI 10.1145/2568225.2568250
   Gazzola L, 2019, IEEE T SOFTWARE ENG, V45, P34, DOI 10.1109/TSE.2017.2755013
   Gulwani S., 2016, Verification and Synthesis of Correct and Secure Systems
   Gulwani S, 2012, INT SYMP SYMB NUMERI, P8, DOI 10.1109/SYNASC.2012.69
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Guo Zheng, 2019, P ACM PROGR LANG POP, V4, p1S28
   Hempel B, 2019, PROCEEDINGS OF THE 32ND ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY (UIST 2019), P281, DOI 10.1145/3332165.3347925
   Hua JR, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P12, DOI 10.1145/3180155.3180245
   Hua JR, 2017, SPIN'17: PROCEEDINGS OF THE 24TH ACM SIGSOFT INTERNATIONAL SPIN SYMPOSIUM ON MODEL CHECKING OF SOFTWARE, P162, DOI 10.1145/3092282.3092285
   Itzhaky S, 2016, ACM SIGPLAN NOTICES, V51, P145, DOI 10.1145/3022671.2983993
   Kaiyuan Wang, 2018, Abstract State Machines, Alloy, B, TLA, VDM, and Z. 6th International Conference, ABZ 2018. Proceedings: LNCS 10817, P121, DOI 10.1007/978-3-319-91271-4_9
   Kneuss E, 2015, LECT NOTES COMPUT SC, V9207, P217, DOI 10.1007/978-3-319-21668-3_13
   Le XBD, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P376, DOI 10.1145/3092703.3098225
   Le XBD, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P593, DOI 10.1145/3106237.3106309
   Lerner S, 2020, PROCEEDINGS OF THE 2020 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'20), DOI 10.1145/3313831.3376494
   Long F, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P166, DOI 10.1145/2786805.2786811
   Lubin J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408991
   Mayer M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276497
   Mechtaev S, 2016, PROC INT CONF SOFTW, P691, DOI 10.1145/2884781.2884807
   Omar C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290327
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Oulasvirta A, 2006, INT J HUM-COMPUT ST, V64, P941, DOI 10.1016/j.ijhcs.2006.04.006
   Padhi S, 2019, LECT NOTES COMPUT SC, V11561, P315, DOI 10.1007/978-3-030-25540-4_17
   Peleg H, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1114, DOI 10.1145/3180155.3180189
   Peleg H, 2018, LECT NOTES COMPUT SC, V10747, P382, DOI 10.1007/978-3-319-73721-8_18
   Polikarpova N, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290385
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Smith C, 2019, LECT NOTES COMPUT SC, V11388, P24, DOI 10.1007/978-3-030-11245-5_2
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2980983.2908102, 10.1145/2908080.2908102]
   Solar-Lezama A, 2008, ACM SIGPLAN NOTICES, V43, P136, DOI 10.1145/1379022.1375599
   Solarlezama Armando, 2008, PROGRAM SYNTHESIS SK
   Srivastava Saurabh, 2013, International Journal on Software Tools for Technology Transfer, V15, P497, DOI 10.1007/s10009-012-0223-4
   Srivastava S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P313, DOI 10.1145/1706299.1706337
   Suzuki R., 2017, Proceedings of the 2017 CHI Conference Extended Abstracts on Human Factors in Computing Systems pp, P2951, DOI DOI 10.1145/3027063.3053187
   Udupa A, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2499370.2462174
   van Tonder R, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P151, DOI 10.1145/3180155.3180250
   VanLehn K., 2006, International journal of artificial intelligence in education, V16, P227
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang X., 2017, P ACM PROGRAM LANG, DOI [10.1145/3158151, DOI 10.1145/3158151]
   Wang XY, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133886
   WIRTH N, 1971, COMMUN ACM, V14, P221, DOI 10.1145/362575.362577
   Xiong YF, 2017, PROC INT CONF SOFTW, P416, DOI 10.1109/ICSE.2017.45
   Yaghmazadeh N, 2018, PROC VLDB ENDOW, V11, P580, DOI 10.1145/3177732.3177735
NR 58
TC 7
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 159
DI 10.1145/3428227
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900036
OA gold
DA 2024-07-18
ER

PT J
AU Yefet, N
   Alon, U
   Yahav, E
AF Yefet, Noam
   Alon, Uri
   Yahav, Eran
TI Adversarial Examples for Models of Code
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Adversarial Attacks; Targeted Attacks; Neural Models of Code
AB Neural models of code have shown impressive results when performing tasks such as predicting method names and identifying certain kinds of bugs. We show that these models are vulnerable to adversarial examples, and introduce a novel approach for attacking trained models of code using adversarial examples. The main idea of our approach is to force a given trained model to make an incorrect prediction, as specified by the adversary, by introducing small perturbations that do not change the program's semantics, thereby creating an adversarial example. To find such perturbations, we present a new technique for Discrete Adversarial Manipulation of Programs (DAMP). DAMP works by deriving the desired prediction with respect to the model's inputs, while holding the model weights constant, and following the gradients to slightly modify the input code.
   We show that our DAMP attack is effective across three neural architectures: CODE2VEC, GGNN, and CNN-FILM, in both Java and C#. Our evaluations demonstrate that DAMP has up to 89% success rate in changing a prediction to the adversary's choice (a targeted attack) and a success rate of up to 94% in changing a given prediction to any incorrect prediction (a non-targeted attack). To defend a model against such attacks, we empirically examine a variety of possible defenses and discuss their trade-offs. We show that some of these defenses can dramatically drop the success rate of the attacker, with a minor penalty of 2% relative degradation in accuracy when they are not performing under attack.
C1 [Yefet, Noam; Alon, Uri; Yahav, Eran] Technion, Haifa, Israel.
C3 Technion Israel Institute of Technology
RP Yefet, N (corresponding author), Technion, Haifa, Israel.
EM snyefet@cs.technion.ac.il; urialon@cs.technion.ac.il;
   yahave@cs.technion.ac.il
FU Israel Ministry of Science and Technology [3-9779]
FX The research leading to these results has received funding from the
   Israel Ministry of Science and Technology, grant no. 3-9779.
CR Allamanis M., 2018, INT C LEARN REPR ICL
   Allamanis M, 2016, PR MACH LEARN RES, V48
   Alon U., INT C LEARN REPR
   Alon U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290353
   Alon U, 2018, ACM SIGPLAN NOTICES, V53, P404, DOI [10.1145/3192366.3192412, 10.1145/3296979.3192412]
   Alon Uri, 2019, ARXIV PREPRINT ARXIV
   Alzantot M, 2018, ARXIV180407998
   Alzantot Moustafa, 2018, NIPS 2017 Machine Deception Workshop
   Nguyen A, 2015, PROC CVPR IEEE, P427, DOI 10.1109/CVPR.2015.7298640
   Arp Daniel, 2014, DREBIN EFFECTIVE EXP
   Balunovic Mislav, 2019, ADV NEURAL INFORM PR
   Bavishi Rohan, 2018, ARXIV PREPRINT ARXIV
   Belinkov Y., 2017, ARXIV171102173CSCL
   Bengio S, 2016, ARXIV
   Bielik P, 2016, PR MACH LEARN RES, V48
   Bielik Pavol, 2020, ARXIVABS200204694
   Brockschmidt M., 2019, ICLR
   Brockschmidt M, 2019, 25TH AMERICAS CONFERENCE ON INFORMATION SYSTEMS (AMCIS 2019)
   Brown, 2017, ADVERSARIAL PATCH
   Cambronero J, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P964, DOI 10.1145/3338906.3340458
   Carlini N, 2018, 2018 IEEE SYMPOSIUM ON SECURITY AND PRIVACY WORKSHOPS (SPW 2018), P1, DOI 10.1109/SPW.2018.00009
   Cauchy Augustin, METHODE GENERALE RES
   Cho K., 2014, PROCS C EMPIRICAL ME, P1724, DOI DOI 10.3115/V1/D14-1179
   David Yaniv, 2019, ARXIV PREPRINT ARXIV
   Ebrahimi Javid., 2017, Hotflip: White-box adversarial examples for text classification
   Fernandes P, 2019, 7 INT C LEARNING REP
   Goodfellow I. J., 2015, 3 INT C LEARNING REP
   Goodfellow I, 2020, COMMUN ACM, V63, P139, DOI 10.1145/3422622
   He KM, 2016, PROC CVPR IEEE, P770, DOI 10.1109/CVPR.2016.90
   Hochreiter S, 1997, NEURAL COMPUT, V9, P1735, DOI [10.1162/neco.1997.9.1.1, 10.1007/978-3-642-24797-2]
   Hosseini H, 2017, 2017 16TH IEEE INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA), P352, DOI 10.1109/ICMLA.2017.0-136
   Iyer S, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P2073
   KELLEY HJ, 1960, ARSJ-AM ROCKET SOC J, V30, P947, DOI 10.2514/8.5282
   Kolosnjaji B, 2018, EUR SIGNAL PR CONF, P533, DOI 10.23919/EUSIPCO.2018.8553214
   Kreuk F., 2018, P NEURIPS 2018 WORKS
   Krizhevsky A, 2017, COMMUN ACM, V60, P84, DOI 10.1145/3065386
   Li Y., 2016, ICLR, P1, DOI DOI 10.48550/ARXIV.1511.05493
   Liu J, 2019, PROCEEDINGS OF THE 3RD ACM SIGPLAN INTERNATIONAL WORKSHOP ON MACHINE LEARNING AND PROGRAMMING LANGUAGES (MAPL '19), P29, DOI [10.1145/3315508.3329975, 10.1007/978-981-13-3756-7_2]
   Lu Yanxin, 2017, CORRABS170509042
   Mikolov T, 2010, 11TH ANNUAL CONFERENCE OF THE INTERNATIONAL SPEECH COMMUNICATION ASSOCIATION 2010 (INTERSPEECH 2010), VOLS 1-2, P1045
   Mirza M., 2014, ARXIV PREPRINT ARXIV, P2672, DOI 10.48550/arXiv.1411.1784
   Moosavi-Dezfooli SM, 2016, PROC CVPR IEEE, P2574, DOI 10.1109/CVPR.2016.282
   Murali Vijayaraghavan, 2017, ABS170305698 CORR
   Nesterov Y., 2013, INTRO LECT CONVEX OP, V87
   Papernot N, 2017, PROCEEDINGS OF THE 2017 ACM ASIA CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (ASIA CCS'17), P506, DOI 10.1145/3052973.3053009
   Papernot N, 2016, 1ST IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY, P372, DOI 10.1109/EuroSP.2016.36
   Pradel M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276517
   Pruthi Danish, 2019, Combating Adversarial Misspellings with Robust Word Recognition
   Rabin Md Rafiqul Islam, 2019, ASE LATE BREAKING RE
   Ramakrishnan Goutham, 2020, ABS200203043 CORR
   Raychev V, 2015, ACM SIGPLAN NOTICES, V50, P111, DOI [10.1145/2775051.2677009, 10.1145/2676726.2677009]
   Rice A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133928
   Rosenberg I, 2018, LECT NOTES COMPUT SC, V11050, P490, DOI 10.1007/978-3-030-00470-5_23
   Sachdev S, 2018, MAPL'18: PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON MACHINE LEARNING AND PROGRAMMING LANGUAGES, P31, DOI 10.1145/3211346.3211353
   Saxe J, 2015, 2015 10TH INTERNATIONAL CONFERENCE ON MALICIOUS AND UNWANTED SOFTWARE (MALWARE), P11, DOI 10.1109/MALWARE.2015.7413680
   Scarselli F, 2009, IEEE T NEURAL NETWOR, V20, P61, DOI 10.1109/TNN.2008.2005605
   Scott Andrew, 2019, ARXIV PREPRINT ARXIV
   Simonyan K, 2015, Arxiv, DOI arXiv:1409.1556
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Suciu Octavian, 2019, 2019 IEEE SEC PRIV W, p8S14
   Szegedy C, 2014, Arxiv, DOI [arXiv:1312.6199, DOI 10.1109/CVPR.2015.7298594]
   Szegedy C, 2015, PROC CVPR IEEE, P1, DOI 10.1109/CVPR.2015.7298594
   Taori Rohan, 2019, 2019 IEEE SEC PRIV W, p15S20
   Wallace E, 2020, PROCEEDINGS OF THE 2020 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP), P5531
   Wang QL, 2017, KDD'17: PROCEEDINGS OF THE 23RD ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1145, DOI 10.1145/3097983.3098158
   Yang W, 2017, ANN COMPUT SECURITY, P288, DOI 10.1145/3134600.3134642
NR 66
TC 59
Z9 62
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 162
DI 10.1145/3428230
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900039
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Licker, N
   Jones, TM
AF Licker, Nandor
   Jones, Timothy M.
TI Duplo: A Framework for OCaml Post-Link Optimisation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE OCami; C; post-link; optimisation; inlining; LLVM
AB We present a novel framework, Duplo, for the low-level post-link optimisation of OCaml programs, achieving a speedup of 7% and a reduction of at least 15% of the code size of widely-used OCaml applications. Unlike existing post-link optimisers, which typically operate on target-specific machine code, our framework operates on a Low-Level Intermediate Representation (LLIR) capable of representing both the OCaml programs and any C dependencies they invoke through the foreign-function interface (FFI). LLIR is analysed, transformed and lowered to machine code by our post-link optimiser, LLIR-OPT Most importantly, LLIR allows the optimiser to cross the OCaml-C language boundary, mitigating the overhead incurred by the FFI and enabling analyses and transformations in a previously unavailable context. The optimised IR is then lowered to amd64 machine code through the existing target-specific code generator of LLVM, modified to handle garbage collection just as effectively as the native OCaml backend. We equip our optimiser with a suite of SSA-based transformations and points-to analyses capable of capturing the semantics and representing the memory models of both languages, along with a cross-language inliner to embed C methods into OCaml callers. We evaluate the gains of our framework, which can be attributed to both our optimiser and the more sophisticated amd64 backend of LLVM, on a wide-range of widely-used OCami applications, as well as an existing suite of microand macro-benchmarks used to track the performance of the OCaml compiler.
C1 [Licker, Nandor; Jones, Timothy M.] Univ Cambridge, Cambridge, England.
C3 University of Cambridge
RP Licker, N (corresponding author), Univ Cambridge, Cambridge, England.
EM nl364@cl.cam.ac.uk; tmj32@cl.cam.ac.uk
FU Cambridge Trust; Engineering and Physical Sciences Research Council
   (EPSRC) [EP/P020011/1]; EPSRC [EP/P020011/1] Funding Source: UKRI
FX We thank the ICFP reviewers for their valuable feedback. We thank Lukasz
   Dudziak for testing the accompanying artefact. This work was supported
   by the Cambridge Trust and the Engineering and Physical Sciences
   Research Council (EPSRC) through grant reference EP/P020011/1.
CR Andersen L. O., 1994, Ph.D. thesis
   [Anonymous], 2012, 232712012E ISO
   [Anonymous], 1999, ISO/IEC 9899:1999
   [Anonymous], 2014, The Java Virtual Machine Specification, Java SE 8 Edition
   Appel AW, 1998, ACM SIGPLAN NOTICES, V33, P17, DOI 10.1145/278283.278285
   Boissinot B, 2008, INT SYM CODE GENER, P35
   Bruening D, 2003, INT SYM CODE GENER, P265, DOI 10.1109/CGO.2003.1191551
   Chambart Pierre, 2016, PR 608 WHOLE PROGRAM
   Felker Rich, 2019, MUSL C STANDARD LIB
   Furr M, 2005, ACM SIGPLAN NOTICES, V40, P62, DOI 10.1145/1064978.1065019
   Guo BL, 2005, INT SYM CODE GENER, P291
   Hardekopf B, 2007, LECT NOTES COMPUT SC, V4634, P265
   Hardekopf B, 2007, ACM SIGPLAN NOTICES, V42, P290, DOI 10.1145/1273442.1250767
   Havlak P, 1997, ACM T PROGR LANG SYS, V19, P557, DOI 10.1145/262004.262005
   Johnson NP, 2017, INT SYM CODE GENER, P148, DOI 10.1109/CGO.2017.7863736
   Khedker UP, 2012, LECT NOTES COMPUT SC, V7460, P265, DOI 10.1007/978-3-642-33125-1_19
   Lattner C., 2008, BSD C, V5
   LATTNER C., 2003, Data structure analysis: A fast and scalable context-sensitive heap analysis
   Lattner Chris, 2020, GARBAGE COLLECTION S
   Lattner Chris, 2020, WRITING LLVM BACKEND
   Leroy X., 2014, The ocaml system release 4.02, P54
   Leroy Xavier, 2009, GOOGLE SUMMER CODE P
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Mozilla, 2019, CLOS GAP CROSS LANG
   Mytkowicz T, 2009, ACM SIGPLAN NOTICES, V44, P265, DOI 10.1145/1508284.1508275
   Nuutila Esko, 1993, HELSINGIN TEKNILLINE
   Panchenko M, 2019, INT SYM CODE GENER, P2, DOI [10.5281/zenodo.2542117, 10.1109/CGO.2019.8661201]
   Pearce DJ, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1290520.1290524
   Peyton Simon L., 1992, J FUNCT PROGRAM, V2, P127
   Pottier Francois., 2016, MENHIR REFERENCE MAN
   Schwarz B., 2001, PROC 2001 WORKSHOP B
   Simmons Brandon, 2019, GHC LLVM LTO EXPT SC
   Sivaramakrishnan KC, 2020, ARXIV ABS200411663 2
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Sui YL, 2018, ACM T EMBED COMPUT S, V17, DOI 10.1145/3168364
   Tagliavini G, 2018, DES AUT TEST EUROPE, P1051, DOI 10.23919/DATE.2018.8342167
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Terei DA, 2010, ACM SIGPLAN NOTICES, V45, P109, DOI 10.1145/2088456.1863538
   Vouillon J, 2014, SOFTWARE PRACT EXPER, V44, P951, DOI 10.1002/spe.2187
   Weeks Stephen, 2006, ML, V6, p1S1
   WEGMAN MN, 1991, ACM T PROGR LANG SYS, V13, P181, DOI 10.1145/103135.103136
   Wilhelm R, 2000, LECT NOTES COMPUT SC, V1781, P1
   Yallop Jeremy, 2016, INT S FUNCT LOG PROG
NR 43
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 98
DI 10.1145/3408980
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700012
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Solomon, C
   Harvey, B
   Kahn, K
   Lieberman, H
   Miller, ML
   Minsky, M
   Papert, A
   Silverman, B
AF Solomon, Cynthia
   Harvey, Brian
   Kahn, Ken
   Lieberman, Henry
   Miller, Mark L.
   Minsky, Margaret
   Papert, Artemis
   Silverman, Brian
TI History of Logo
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Logo; Lisp; Constructionism; Constructivism; turtle geometry;
   Education-Interactive learning environments; History of
   computingsHistory of programming languages; Computing educations-
   Computational thinking; Computing education programsDComputer science
   education; Informal education; Computing literacy; K-12 education (ages
   5-18); Software notations and tools- General programming languages;
   Imperative languages; Functional languages; Language featuressControl
   structures; Data types and structures; Recursion; Procedures; functions
   and subroutines; Theory of computations-Models of
   computation-computabilitys-; Lambda calculus; Recursive functions;
   Interactive computation.
AB Logo is more than a programming language. It is a learning environment where children explore mathematical ideas and create projects of their own design. Logo, the first programming language explicitly designed for children, was invented by Seymour Papert, Wallace Feurzeig, Daniel Bobrow, and Cynthia Solomon in 1966 at Bolt, Beranek and Newman, Inc. (BBN).
   Logo's design drew upon two theoretical frameworks: Jean Piaget's constructivism and Marvin Minsky's artificial intelligence research at MIT. One of Logo's foundational ideas was that children should have a powerful programming environment. Early Lisp served as a model with its symbolic computation, recursive functions, operations on linked lists, and dynamic scoping of variables.
   Logo became a symbol for change in elementary mathematics education and in the nature of school itself. The search for harnessing the computer's potential to provide new ways of teaching and learning became a central focus and guiding principle in Logo language development. It encompassed a widening scope that included natural language, music, graphics, animation, story telling, turtle geometry, robots, and other physical devices.
C1 [Solomon, Cynthia] Cynthia Solomon Consulting, 14E Kenneson Rd, Somerville, MA 02145 USA.
   [Harvey, Brian] Univ Calif Berkeley, 784 Soda Hall 1776, Berkeley, CA 94720 USA.
   [Kahn, Ken] Univ Oxford, 15 Norham Gardens, Oxford OX2 6PY, England.
   [Lieberman, Henry] MIT, Comp Sci & Artificial Intelligence Lab CSAIL, 32 Vassar St G475, Cambridge, MA 02139 USA.
   [Miller, Mark L.] Learningtech Org, 751 Laurel St 411, San Carlos, CA 94070 USA.
   [Minsky, Margaret] New York Univ Shanghai, 1555 Century Ave, Shanghai 200122, Peoples R China.
   [Silverman, Brian] Playful Invent Co, Montreal, PQ, Canada.
C3 University of California System; University of California Berkeley;
   University of Oxford; Massachusetts Institute of Technology (MIT); NYU
   Shanghai
RP Solomon, C (corresponding author), Cynthia Solomon Consulting, 14E Kenneson Rd, Somerville, MA 02145 USA.
EM cynthia.solomon@gmail.com; bh@berkeley.edu; toontalk@gmail.com;
   lieber@media.mit.edu; mlmiller@learningtech.org;
   margaret.minsky@gmail.com; artemis@turtleart.org;
   brians@playfulinvention.com
OI Miller, Mark/0000-0003-4866-7915
CR Abelson H., 1980, Turtle geometry: The computer as a medium for exploring mathematics
   Abelson Harold., 1982, Apple Logo
   Abelson HaroldGerald Jay Sussman Julie Sussman., 1984, STRUCTURE INTERPRETA
   Agalianos Angelos S., 1997, THESIS U LONDON I ED
   Allen John R, 1984, THINKING TLCLOGO GRA
   [Anonymous], 1963, CAMBR C SCH MATH GOA
   [Anonymous], 1982, Autocad
   [Anonymous], 1989, HYPERSTUDIO
   [Anonymous], 1988, COMPUTER ENV CHILDRE
   [Anonymous], 1996, WINDOWS MATH MEANING, DOI DOI 10.1007/978-94-009-1696-8
   Apple, 1993, APPLESCRIPT
   Baecker R., 1975, SIGCSE Bulletin, V7, P158, DOI 10.1145/953064.811152
   Banos Arnaud, 2015, Agent-based spatial simulation with NetLogo, V1
   Begel Andrew, 1996, LogoBlocks: A Graphical Programming Language for Interacting with the World
   Beland Christopher, 2000, LEGO MINDSTORMS STRU
   Berger Anne R., 1988, PC LOGO TUTORIAL
   Birch Alison., 1986, LOGO PROJECT BOOK EX
   Bird Steven, 2013, EDGY
   Blaho Andrej, P IFIP TC3 WG3 5 INT, P153
   Blaho Andrej, 1993, P 4 EUROLOGO C ATH S, P1
   Blaho Andrej, 2001, P EUR 2001 OEST COMP, P55
   Blaho Andrej, 2000, INFORMATYKA SZKOLE
   Boecker Heinz-Dieter, 1991, INTERACTIVE PROBLEM
   Bonta Paula, 2010, P CONSTR 2010 C PAR
   Boytchev P., 2014, LOGO TREE PROJECT
   Byte, 1982, BYT MAG LOG ISS, V7
   Byte, 1976, COV CONT
   Chakraborty A., 1999, LOGO: A Project History
   CLAYSON J, 1988, VISUAL MODELING LOGO
   CLEMENTS DH, 1984, J EDUC PSYCHOL, V76, P1051, DOI 10.1037/0022-0663.76.6.1051
   Collins A., 1975, Representation and understanding: Studies in cognitive science, DOI DOI 10.1016/B978-0-12-108550-6.50018-5
   Constructionism, 2010, P CONSTR 2010 C PAR
   Constructionism, 2012, P CONSTR 2012 C ATH
   Constructionism, 2016, P CONSTR 2016 C BANG
   Constructionism, 2018, P CONSTR 2018 C VILN
   Constructionism, 2014, P CONSTR 2014 C VIEN
   Coral, 1986, OBJ LOG
   Costanzo David., 2005, FMSLOGO
   Cuoco Albert, 1990, INVESTIGATIONS ALGEB
   DISESSA AA, 1986, COMMUN ACM, V29, P859, DOI 10.1145/6592.6595
   Drescher Gary, 1987, ARTIFICIAL INTELLIGE, DOI [10.1145/2048147.2048218, DOI 10.1145/2048147.2048218]
   EISENSTADT M, 1988, J LOGIC PROGRAM, V5, P277, DOI 10.1016/0743-1066(88)90001-5
   Eurologo, 2001, P EUR 2001 C OEST CO
   Eurologo, 1997, P EUR 1997 C BUD
   Eurologo, 2007, P EUR 2007 C BRAT
   Eurologo, 2005, P EUR 2005 C WARS
   Feurzeig W, 2006, IEEE ANN HIST COMPUT, V28, P18, DOI 10.1109/MAHC.2006.8
   Feurzeig Wally, 1984, DIGITAL DELI 1984
   Fraser N, 2015, 2015 IEEE BLOCKS AND BEYOND WORKSHOP (BLOCKS AND BEYOND), P49, DOI 10.1109/BLOCKS.2015.7369000
   Free Software Foundation, 1985, EM
   Friendly Michael, 1988, ADV LOG
   Garcia Daniel D., 2012, ACM INROADS, V3, DOI 10.1145/2189835.2189853
   Garcia Daniel D., 2019, BEAUTY JOY COMPUTING
   Goldenberg E.P., 1987, Exploring language with Logo
   GOLDSTEIN IP, 1975, ARTIF INTELL, V6, P249, DOI 10.1016/0004-3702(75)90003-X
   Goldstein Ira., 1973, 7 MIT LOG GROUP, DOI [10.5281/zenodo.3719335, DOI 10.5281/ZENODO.3719335]
   Harel I., 1990, Constructionist learning: A 5th anniversary collection of papers reflecting research reports, projects in progress, and essays by the Epistemology and Learning Group
   Harvey B., 1997, COMPUTER SCI LOGO ST
   Harvey B., 2010, CONSTRUCTIONISM 2010
   Harvey Brian., 1988, BERKELEY LOGO
   Harvey Brian., 2019, WHY DO WE HAVE LEARN
   Harvey Brian., 1991, COMPUTING TEACHER
   Hewitt C., 1973, PROC 3 INT JOINT C A, P235, DOI 10.1145/359545.359563
   Hillis W.Daniel., 1986, CONNECTION MACHINE
   Howe J., 1978, SIGCUE Bulletin, V12, P2, DOI 10.1145/963847.963848
   Hoyles C., 1992, Learning mathematics and logo
   INRP, 1981, PRAT ACT INF ENF
   Jean-Jacques Rousseau, 1762, EMILE ED
   Kahn K. M., 1990, Proceedings of the 1990 IEEE Workshop on Visual Languages (Cat. No.90TH0330-1), P7, DOI 10.1109/WVL.1990.128375
   Kahn K, 2011, TECHNOL KNOWL LEARN, V16, P3, DOI 10.1007/s10758-011-9175-0
   Kahn K, 2007, INFORM EDUC, V6, P307
   Kahn Ken, 1979, 482B MIT AI LAB
   Kahn Ken., 1975, 46 MIT LOG GROUP
   Kahn Kenneth, 1976, P ACM SIGGRAPH WORKS, P75, DOI [10.1145/1024273.1024278, DOI 10.1145/1024273.1024278]
   Kahn Kenneth., 1977, MACHINE INTELLIGENCE, V8
   Kahn Kenneth, 2001, EUROLOGO 2001
   Kahn KM, 1979, THESIS MIT
   Kalas Ivan, 1994, INFORM TECHNOLOGIES, P222
   Kay Alan., 2013, Afterword: What Is a Dynabook?
   Koschitz D., 2012, P 15 TH INT C GEOMET, P380
   Kynigos Chronis, 2000, E SLATE
   Lang Christophe, 2016, AGENT BASED SPATIAL, V2
   Lawler R.W., 1987, Artificial Intelligence and Education: Learning environments and tutoring systems, V1
   Ledeczi Akos, 2016, NETSBLOX
   Levy S., 1984, HACKERS HEROES COMPU
   Lewis Philip G., 1990, APPROACHING PRECALCU
   LIEBERMAN H, 1986, SIGPLAN NOTICES, V21, P214, DOI 10.1145/960112.28718
   Lieberman H., 1995, Human Factors in Computing Systems. CHI'95 Conference Proceedings, P480
   Logo Exchange, 1999, LOG EXCH
   Logo Foundation, 2020, LOG HIST
   Logo Foundation, 2001, LOG FDN
   Maloney John, 2004, P 2 INT C I EL EL EN
   Mayr-Stalder Andrea., 2016, TURTLESTITCH
   McCulloch WS, 2016, EMBODIMENTS OF MIND, P19
   Micheler Andreas., 2004, AUCBLOGO
   Miller Mark L., 1977, IJCAI 77, V2, P773
   MILLER ML, 1979, INT J MAN MACH STUD, V11, P79, DOI 10.1016/S0020-7373(79)80006-1
   Mills George., 2016, MSWLOGO
   Minsky M, 2019, INVENTIVE MINDS: MARVIN MINSKY ON EDUCATION, P1
   Minsky M., 1969, PERCEPTRONS INTRO CO
   Minsky Marvin, 2019, INVENTIVE MINDS
   MIT Scheller Teacher Education Program, 2019, STARLOGO NOV
   Monig Jens, 2020, SNAP 5 0
   Mor Yishay, 2004, IN PRESS, V20
   Morgado Leonel Caseiro, 2015, THESIS U TRAS OS MON
   Newell A., 1972, HUMAN PROBLEM SOLVIN, V104
   Nickerson R., 2011, CULTURE INNOVATION I
   Noss R., 1997, EDUC STUD MATH, V33, P203
   O'Shea T., 1983, Learning and Teaching with Computers:Artificial Intelligence in Education
   OSullivan D, 2013, SPATIAL SIMULATION: EXPLORING PATTERN AND PROCESS, P1
   Papert Fonseca, 1999, LOGO PHILOS IMPLEMEN
   Papert S., 1972, Programmed Learning and Educational Technology, V9, P245
   Papert S., 1994, The children's machine: Rethinking school in the age of the computer
   Papert S., 1996, CONNECTED FAMILY BRI
   Papert S., 1972, International Journal of Mathematics Education, Science Technology, V3, P249, DOI [10.1080/0020739700030306, DOI 10.1080/0020739700030306, https://doi.org/10.1080/0020739700030306]
   Papert S., 1999, Time Magazine
   Papert S., 1980, MINDSTORMS CHILDREN
   Papert SA., 1971, Studying the Novice Programmer, P3
   Papert Seymour., 1988, Constructivism in the computer age, P3
   Papert Seymour, 1979, ARTIFICIAL INTELLIGE
   Papert Seymour, 1978, 484 ART INT
   Pasternak E, 2017, 2017 IEEE BLOCKS AND BEYOND WORKSHOP (B&B), P21, DOI 10.1109/BLOCKS.2017.8120404
   Pea R.D., 1985, CHILDREN MICROCOMPUT, P193
   Pea R.D., 1983, Logo programming and problem solving
   Perlman Radia., 1974, 9 MIT
   Perlman Radia, 1976, 360 MIG AI LAB
   Piaget Jean., 1971, INTRO GENETIC EPISTE
   Playful Invention Company, 2014, PICOCRICKET
   Railsback Steven F, 2019, AGENT BASED INDIVIDU
   Raymond Eric, 1996, HACKERS DICT, VThird
   Resnick M, 1996, J LEARN SCI, V5, P1, DOI 10.1207/s15327809jls0501_1
   Resnick Mitchel, 1994, Turtles, Termites and Traffic Jams: Explorations in Massively Parallel Microworlds
   Roque R., 2009, E-Learning and Digital Media, V6, P71, DOI [DOI 10.2304/ELEA.2009.6.1.71, 10.2304/elea.2009.6.1.71]
   Rosenbaum Eric, 2011, BEETLEBLOCKS
   Saraswat Vijay A., 1993, Concurrent Constraint Programming
   Schopenhauer A., 2010, On Vision and Colors
   Sewell D., 1990, New tools for new minds: A cognitive perspective on the use of computers with young children
   Seymour Papert., 1986, CONSTRUCTIONISM NEW
   Shalit A., 1996, The Dylan reference manual: the definitive guide to the new object-oriented dynamic language
   Sherin B.L., 1993, Interactive Learning Environments, V3, P91
   Slany W, 2012, S VIS LANG HUM CEN C, P265, DOI 10.1109/VLHCC.2012.6344546
   Slany Wolfgang, 2018, CONSTRUCTIONISM 2018, P104
   Solomon Cynthia, 1986, LOGOWORKS CHALLENGIN
   Solomon Cynthia J., 1983, INTRO COMPUTER PROGR
   Steele G.L., 1977, Proceedings of the 1977 Annual ACM Conference, P153
   Sussman Gerald J., 1973, 297 MIT AI LAB
   Sylla Fatimata Seye., 1985, COMPUTERS LITERACY S
   Terrapin, 2020, TERR LOG MAN
   Terrapin, 2020, TERR LOG
   THORNBURG DD, 1986, TURTLE GRAPHICS FURT
   TURKLE S, 1990, SIGNS, V16, P128, DOI 10.1086/494648
   Valente Jose., 2020, COMMUNICATION
   WATT D, 1983, LEARNING LOGO
   Watt Daniel, 1986, TEACHING LOGO
   Wilensky Uri, 2015, An introduction to agentbased modeling, and engineered complex systems with NetLogo
   Wolber David, 2015, GetMobile: Mobile Comp. and Comm., V18, p53S58, DOI DOI 10.1145/2721914.2721935
   Yazdani M., 1984, New horizons in educational computing
   Yazdani Masoud, 1991, PRINCIPLES CASE STUD, V2
NR 158
TC 26
Z9 28
U1 7
U2 28
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 79
DI 10.1145/3386329
PG 66
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900012
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Barthe, G
   Blazy, S
   Grégoire, B
   Hutin, R
   Laporte, V
   Pichardie, D
   Trieu, A
AF Barthe, Gilles
   Blazy, Sandrine
   Gregoire, Benjamin
   Hutin, Remi
   Laporte, Vincent
   Pichardie, David
   Trieu, Alix
TI Formal Verification of a Constant-Time Preserving C Compiler
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE verified compilation; CompCert compiler; timing side-channels
ID COMPILATION
AB Timing side-channels are arguably one of the main sources of vulnerabilities in cryptographic implementations. One effective mitigation against timing side-channels is to write programs that do not perform secret-dependent branches and memory accesses. This mitigation, known as "cryptographic constant-time", is adopted by several popular cryptographic libraries.
   This paper focuses on compilation of cryptographic constant-time programs, and more specifically on the following question: is the code generated by a realistic compiler for a constant-time source program itself provably constant-time? Surprisingly, we answer the question positively for a mildly modified version of the CompCert compiler, a formally verified and moderately optimizing compiler for C. Concretely, we modify the CompCert compiler to eliminate sources of potential leakage. Then, we instrument the operational semantics of CompCert intermediate languages so as to be able to capture cryptographic constant-time. Finally, we prove that the modified CompCert compiler preserves constant-time. Our mechanization maximizes reuse of the CompCert correctness proof, through the use of new proof techniques for proving preservation of constant-time. These techniques achieve complementary trade-offs between generality and tractability of proof effort, and are of independent interest.
C1 [Barthe, Gilles] MPI Secur & Privacy, Bochum, Germany.
   [Barthe, Gilles] IMDEA Software Inst, Madrid, Spain.
   [Blazy, Sandrine; Hutin, Remi; Pichardie, David] Univ Rennes, IRISA, CNRS, INRIA, Rennes, France.
   [Gregoire, Benjamin; Laporte, Vincent] INRIA, Sophia Antipolis, France.
   [Trieu, Alix] Aarhus Univ, Aarhus, Denmark.
C3 IMDEA Software Institute; Universite de Rennes; Inria; Centre National
   de la Recherche Scientifique (CNRS); Inria; Aarhus University
RP Barthe, G (corresponding author), MPI Secur & Privacy, Bochum, Germany.; Barthe, G (corresponding author), IMDEA Software Inst, Madrid, Spain.
EM gbarthe@mpi-sp.org; sandrine.blazy@irisa.fr; benjamin.gregoire@inria.fr;
   remi.hutin@ens-rennes.fr; vincent.laporte@inria.fr;
   david.pichardie@ens-rennes.fr; alix.trieu@cs.au.dk
OI Blazy, Sandrine/0000-0002-0189-0223; Trieu, Alix/0000-0002-8239-8125
FU DFF project from The Danish Council for Independent Research for the
   Natural Sciences (FNU) [6108-00363]; Office of Naval Research
   [N0001412-1-0914, N00014-15-1-2750, N00014-19-1-2292]; European Research
   Council (ERC) Consolidator Grant for the project lVESTAz under the
   European Union's Horizon 2020 Framework Programme [772568]; European
   Research Council (ERC) [772568] Funding Source: European Research
   Council (ERC)
FX This work is supported by DFF project 6108-00363 from The Danish Council
   for Independent Research for the Natural Sciences (FNU); by the Office
   of Naval Research under projects N0001412-1-0914, N00014-15-1-2750 and
   N00014-19-1-2292; and by a European Research Council (ERC) Consolidator
   Grant for the project lVESTAz, funded under the European Union's Horizon
   2020 Framework Programme (grant agreement no. 772568). The selection
   operation presented in Section 4.2.1 was discussed with Xavier Leroy who
   integrated it into CompCert version 3.6.
CR Abate Carmine, 2018, COMPUTER SECURITY FD
   Albrecht MR, 2016, LECT NOTES COMPUT SC, V9665, P622, DOI 10.1007/978-3-662-49890-3_24
   AlFardan NJ, 2013, P IEEE S SECUR PRIV, P526, DOI 10.1109/SP.2013.42
   Almeida JB, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1807, DOI 10.1145/3133956.3134078
   Almeida JB, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P53
   Almeida Jose Bacelar, 2019, ABS190404606 CORR
   Andrysco M, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P1369, DOI 10.1145/3243734.3243766
   Andrysco M, 2015, P IEEE S SECUR PRIV, P623, DOI 10.1109/SP.2015.44
   APPEL A, 2011, PROGRAMMING LANGUAGE, DOI DOI 10.1007/978-3-642-19718-5_1
   Appel AW, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2701415
   Appel Andrew W., 2014, PROGRAM LOGICS FOR C
   ARM, 2016, MBED TLS
   Barthe G, 2006, P IEEE S SECUR PRIV, P230, DOI 10.1109/SP.2006.13
   Barthe G, 2018, P IEEE COMPUT SECUR, P328, DOI 10.1109/CSF.2018.00031
   Barthe G, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1267, DOI 10.1145/2660267.2660283
   Beringer L, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P207
   Bernstein Daniel J., 2012, Progress in Cryptology - LATINCRYPT 2012. Proceedings of the 2nd International Conference on Cryptology and Information Security in Latin America, P159, DOI 10.1007/978-3-642-33481-8_9
   Bernstein DJ, 2006, LECT NOTES COMPUT SC, V3958, P207
   Besson Frederic, 2019, CSF
   Blazy S, 2006, LECT NOTES COMPUT SC, V4085, P460
   Blazy S, 2019, J COMPUT SECUR, V27, P137, DOI 10.3233/JCS-181136
   Cauligi S, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P174, DOI 10.1145/3314221.3314605
   Chen J., INT C PROGRAMMING LA, DOI DOI 10.1145/1806596.1806643
   Del Tedesco F, 2016, P IEEE CSFW, P401, DOI 10.1109/CSF.2016.35
   Inria, 2019, COQ PROOF ASS REF MA
   Jourdan JH, 2015, ACM SIGPLAN NOTICES, V50, P247, DOI [10.1145/2775051.2676966, 10.1145/2676726.2676966]
   Kang J, 2018, ACM SIGPLAN NOTICES, V53, P631, DOI 10.1145/3192366.3192377
   KASTNER D, 2018, ERTS2 2018 9 EUR C E, P1
   Kaufmann T, 2016, LECT NOTES COMPUT SC, V10052, P573, DOI 10.1007/978-3-319-48965-0_36
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Langley Adam, 2015, CURVE25519 DONNA
   Langley Adam, 2010, CTGRIND
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leroy X., 2016, ERTS 2016
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Leroy Xavier., 2014, Program Logics for Certified Compilers
   Liu C, 2013, P IEEE CSFW, P51, DOI 10.1109/CSF.2013.11
   Lööw A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1041, DOI 10.1145/3314221.3314622
   Molnar D., 2005, Information Security and Cryptology - ICISC 2005. 8th International Conference. Revised Selected Papers (Lecture Notes in Computer Science Vol. 3935), P156
   Murray T, 2016, P IEEE CSFW, P417, DOI 10.1109/CSF.2016.36
   OpenSSL, 2019, OPENSSL
   Owens S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110262
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Polikarpova Nadia, 2016, ABS160703445 CORR
   Protzenko J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110261
   Rodrigues B, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P110, DOI 10.1145/2892208.2892230
   Ronen E, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P1397, DOI 10.1145/3243734.3243775
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Sison Robert, 2019, LECT NOTES COMPUTER
   Tan YK, 2016, ACM SIGPLAN NOTICES, V51, P60, DOI 10.1145/3022670.2951924
   Ngo VC, 2017, P IEEE S SECUR PRIV, P710, DOI 10.1109/SP.2017.53
   von Gleissenthall Klaus, 2019, USENIX SEC S USENIX
   Wheeler D. J., 1994, TINY ENCRYPTION ALGO
   Wu M, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P15, DOI 10.1145/3213846.3213851
   Ye KQ, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2007, DOI 10.1145/3133956.3133974
   Zhao JZ, 2013, ACM SIGPLAN NOTICES, V48, P175, DOI 10.1145/2499370.2462164
   Zhao JZ, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P427
   Zinzindohoué JK, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1789, DOI 10.1145/3133956.3134043
NR 59
TC 35
Z9 37
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 7
DI 10.1145/3371075
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400008
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Bruni, R
   Giacobazzi, R
   Gori, R
   Garcia-Contreras, I
   Pavlovic, D
AF Bruni, Roberto
   Giacobazzi, Roberto
   Gori, Roberta
   Garcia-Contreras, Isabel
   Pavlovic, Dusko
TI Abstract Extensionality: On the Properties of Incomplete Abstract
   Interpretations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Abstract Interpretation; Extensionality; Intensionality; Obfuscation
AB In this paper we generalise the notion of extensional (functional) equivalence of programs to abstract equivalences induced by abstract interpretations. The standard notion of extensional equivalence is recovered as the special case, induced by the concrete interpretation. Some properties of the extensional equivalence, such as the one spelled out in Rice's theorem, lift to the abstract equivalences in suitably generalised forms. On the other hand, the generalised framework gives rise to interesting and important new properties, and allows refined, non-extensional analyses. In particular, since programs turn out to be extensionally equivalent if and only if they are equivalent just for the concrete interpretation, it follows that any non-trivial abstract interpretation uncovers some intensional aspect of programs. This striking result is also effective, in the sense that it allows constructing, for any non-trivial abstraction, a pair of programs that are extensionally equivalent, but have different abstract semantics. The construction is based on the fact that abstract interpretations are always sound, but that they can be made incomplete through suitable code transformations. To construct these transformations, we introduce a novel technique for building incompleteness cliques of extensionally equivalent yet abstractly distinguishable programs: They are built together with abstract interpretations that produce false alarms. While programs are forced into incompleteness cliques using both control-flow and data-flow transformations, the main result follows from limitations of data-flow transformations with respect to control-flow ones. A further consequence is that the class of incomplete programs for a non-trivial abstraction is Turing complete. The obtained results also shed a new light on the relation between the techniques of code obfuscation and the precision in program analysis.
C1 [Bruni, Roberto; Gori, Roberta] Univ Pisa, Pisa, Italy.
   [Giacobazzi, Roberto] Univ Verona, Verona, Italy.
   [Giacobazzi, Roberto; Garcia-Contreras, Isabel] IMDEA Software Inst, Madrid, Spain.
   [Garcia-Contreras, Isabel] Univ Politecn Madrid, Madrid, Spain.
   [Pavlovic, Dusko] Univ Hawaii, Honolulu, HI 96822 USA.
C3 University of Pisa; University of Verona; IMDEA Software Institute;
   Universidad Politecnica de Madrid; University of Hawaii System
RP Bruni, R (corresponding author), Univ Pisa, Pisa, Italy.
EM bruni@di.unipi.it; roberto.giacobazzi@univr.it; gori@di.unipi.it;
   isabel.garcia@imdea.org; dusko@hawaii.edu
RI Bruni, Roberto/O-8349-2015; BRUNI, ROBERTO/KBB-9626-2024
OI Garcia-Contreras, Isabel/0000-0001-6098-3895
FU Ministero dell'Universita e della Ricerca Scientifica of Italy
   [201784YSZ5]; Fondazione Cariverona, Bando Ricerca 2017; MINECO
   [TIN2015-67522-C3-1-R]; FPU [16/04811]; Madrid BLOQUES-CM program
   [P2018/TCS4339]; NSF; AFOSR
FX The authors would also like to thank the anonymous referees for their
   valuable comments and helpful suggestions. This work is supported by the
   Ministero dell'Universita e della Ricerca Scientifica of Italy under
   Grant No. 201784YSZ5, PRIN2017 s ASPRA, and by the Fondazione
   Cariverona, Bando Ricerca 2017, under Grant: ATEN. The work of I.
   Garcia-Contreras is partially supported by MINECO TIN2015-67522-C3-1-R
   TRACES project, FPU grant 16/04811, and the Madrid P2018/TCS4339
   BLOQUES-CM program. The work of D. Pavlovic is partially supported by
   NSF and AFOSR.
CR Abramsky S, 2014, OUTST CONTRIB LOGIC, V5, P121, DOI 10.1007/978-3-319-06025-5_5
   [Anonymous], 2009, Surreptitious Software: Obfuscation, Watermarking, and Tamperproofing for Software Protection: Obfuscation, Watermarking, and Tamperproofing for Software Protection
   Asperti A., 2008, POPL08 P 35 ANN ACM, P113, DOI 10.1145/1328438.1328455
   Barak B, 2012, J ACM, V59, DOI 10.1145/2160158.2160159
   Ben-Amram AM, 2000, ACTA INFORM, V37, P83, DOI 10.1007/s002360000038
   Bruni R, 2018, FORM ASP COMPUT, V30, P685, DOI 10.1007/s00165-018-0462-6
   Cousot P., 1979, P S PRINC PROGR LANG, DOI 10.1145/567752
   Cousot P., 2014, JOINT M 23 EACSL ANN, V2, P1, DOI [10.1145/2603088.2603165, DOI 10.1145/2603088.2603165]
   Cousot P., 2018, LECT NOTES COMPUT SC, V10982, P75, DOI DOI 10.1007/978-3-319-96142-2_8
   Cousot R., 1977, S PRINC PROGR LANG P, DOI 10.1145/512950.512973
   Dal Lago U., 2011, LECT NOTES COMPUTER, V7388
   Dalla Preda M, 2009, J COMPUT SECUR, V17, P855, DOI 10.3233/JCS-2009-0345
   Drape S, 2007, LECT NOTES COMPUT SC, V4779, P299
   Futamura Y., 1999, Higher-Order and Symbolic Computation, V12, P381, DOI 10.1023/A:1010095604496
   Giacobazzi R, 2000, J ACM, V47, P361, DOI 10.1145/333979.333989
   Giacobazzi R., 2012, P ACM SIGPLAN S PART, P63, DOI [10.1145/2103746.2103761, DOI 10.1145/2103746.2103761]
   Giacobazzi R., 2012, LECT NOTES COMPUT SC, V7460, P129, DOI 10.1007/978-3-642-33125-1_11
   Giacobazzi R., 2008, SEFM 2008 6 IEEE, p7S20, DOI [10.1109/SEFM.2008.41, DOI 10.1109/SEFM.2008.41]
   Giacobazzi R, 2016, MATH STRUCT COMP SCI, V26, P658, DOI 10.1017/S0960129514000358
   Giacobazzi R, 2015, ACM SIGPLAN NOTICES, V50, P261, DOI [10.1145/2775051.2676987, 10.1145/2676726.2676987]
   Jones ND, 2004, SCI COMPUT PROGRAM, V52, P307, DOI 10.1016/j.scico.2004.03.010
   Kavvos G. A., 2017, LECT NOTES COMPUT SC, V10203, P550, DOI [10.1007/978-3-662-54458-7_32, DOI 10.1007/978-3-662-54458-7_32]
   Laviron V, 2009, LECT NOTES COMPUT SC, V5904, P343, DOI 10.1007/978-3-642-10672-9_24
   Majumdar A, 2006, LECT NOTES COMPUT SC, V4332, P353
   Partush N., 2013, LECT NOTES COMPUT SC, V7935, P238, DOI 10.1007/978-3-642-38856-9_14
   RICE HG, 1953, T AM MATH SOC, V74, P358, DOI 10.2307/1990888
   Rogers Hartley., 1992, Theory of Recursive Functions and Effective Computability
   Thomborson C. D., 1998, P 25 ACM SIGPLAN SIG, DOI 10.1145/268946.268962
   Venet A., 1996, P LECT NOTES COMPUTE, V1145, DOI [10.1007/3-540-61739-6_53, DOI 10.1007/3-540-61739-6_53]
   Winskel G., 1993, The Formal Semantics of Programming Languages
NR 30
TC 11
Z9 11
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 28
DI 10.1145/3371096
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400029
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Handley, MAT
   Vazou, N
   Hutton, G
AF Handley, Martin A. T.
   Vazou, Niki
   Hutton, Graham
TI Liquidate Your Assets Reasoning about Resource Usage in Liquid Haskell
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE refinement types; resource analysis; static verification
AB Liquid Haskell is an extension to the type system of Haskell that supports formal reasoning about program correctness by encoding logical properties as refinement types. In this article, we show how Liquid Haskell can also be used to reason about program efficiency in the same setting. We use the system's existing verification machinery to ensure that the results of our cost analysis are valid, together with custom invariants for particular program contexts to ensure that the results of our analysis are precise. To illustrate our approach, we analyse the efficiency of a wide range of popular data structures and algorithms, and in doing so, explore various notions of resource usage. Our experience is that reasoning about efficiency in Liquid Haskell is often just as simple as reasoning about correctness, and that the two can naturally be combined.
C1 [Handley, Martin A. T.; Hutton, Graham] Univ Nottingham, Nottingham, England.
   [Vazou, Niki] IMDEA Software Inst, Madrid, Spain.
C3 University of Nottingham; IMDEA Software Institute
RP Handley, MAT (corresponding author), Univ Nottingham, Nottingham, England.
FU Engineering and Physical Sciences Research Council (EPSRC)
   [EP/P00587X/1]; Comunidad de Madrid as part of the program
   [S2018/TCS-4339]; EIE Funds of the European Union; EPSRC [EP/P00587X/1]
   Funding Source: UKRI
FX We thank Rustan Leino for the discussion on the initial idea of our
   system and the anonymous reviewers for the useful comments and
   suggestions. This work was funded by the Engineering and Physical
   Sciences Research Council (EPSRC) grant EP/P00587X/1, Mind the Gap:
   Unified Reasoning About Program Correctness and Efficiency, and by
   Comunidad de Madrid as part of the program S2018/TCS-4339 (BLOQUESCM),
   which is co-funded by EIE Funds of the European Union.
CR Aguirre A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110265
   [Anonymous], 1999, PURELY FUNCTIONAL DA
   Aspinall D, 2007, THEOR COMPUT SCI, V389, P411, DOI 10.1016/j.tcs.2007.09.003
   Atkey R, 2010, LECT NOTES COMPUT SC, V6012, P85, DOI 10.1007/978-3-642-11957-6_6
   Bertot Yves, 2013, Interactive theorem proving and program development: Coq'Art: the calculus of inductive constructions
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   Cicek E., 2017, PRINC PROG LANG POPL
   Cicek Ezgi, 2019, PLDI
   Cicek Ezgi, 2018, THESIS SAARLAND U SA
   Crary Karl., 2000, POPL 2000 P 27 ACM S, P184
   Danielsson NA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1328438.1328457
   Handley Martin A.T, 2019, GITHUB REPOSITORY RT
   Hoffmann Jan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P781, DOI 10.1007/978-3-642-31424-7_64
   Hoffmann J, 2015, LECT NOTES COMPUT SC, V9032, P132, DOI 10.1007/978-3-662-46669-8_6
   Hoffmann J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P357, DOI 10.1145/1926385.1926427
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Jin GL, 2012, ACM SIGPLAN NOTICES, V47, P77, DOI 10.1145/2345156.2254075
   Jost S, 2017, J AUTOM REASONING, V59, P87, DOI 10.1007/s10817-016-9398-9
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   Madhavan R, 2017, ACM SIGPLAN NOTICES, V52, P330, DOI 10.1145/3093333.3009874
   McCarthy Jay, 2017, SCI COMPUT PROGRAM
   Moran A., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P43, DOI 10.1145/292540.292547
   Norell Ulf., 2008, Revised Lectures, P230
   Radicek I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158124
   Sands David, 1995, POPL
   Vasconcelos Pedro, 2008, Ph.D. Dissertation
   Vasconcelos Pedro B., 2003, IFL
   Vazou N., 2016, THESIS UC SAN DIEGO
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Vazou N, 2013, LECT NOTES COMPUT SC, V7792, P209, DOI 10.1007/978-3-642-37036-6_13
   Vazou Niki, 2018, HASK S
   Vazou Niki, 2017, REFINEMENT REFLECTIO
   Wang Peng, 2017, OOPSLA
NR 35
TC 11
Z9 11
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 24
DI 10.1145/3371092
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400025
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Greenman, B
   Felleisen, M
   Dimoulas, C
AF Greenman, Ben
   Felleisen, Matthias
   Dimoulas, Christos
TI Complete Monitors for Gradual Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE complete monitoring; blame soundness; blame completeness
ID CONTRACTS; SEMANTICS; BLAME
AB In the context of gradual typing, type soundness guarantees the safety of typed code. When untyped code fails to respect types, a runtime check finds the discrepancy. As for untyped code, type soundness makes no promises; it does not protect untyped code from mistakes in type specifications and unwarranted blame.
   To address the asymmetry, this paper adapts complete monitoring from the contract world to gradual typing. Complete monitoring strengthens plain soundness into a guarantee that catches problems with faulty type specifications. Furthermore, a semantics that satisfies complete monitoring can easily pinpoint the conflict between a type specification and a value. For gradual typing systems that fail complete monitoring, the technical framework provides a source-of-truth to assess the quality of blame.
C1 [Greenman, Ben; Felleisen, Matthias] Northwestern Univ, PLT, Boston, MA 02115 USA.
   [Dimoulas, Christos] Northwestern Univ, PLT, Evanston, IL USA.
C3 Northwestern University; Northwestern University
RP Greenman, B (corresponding author), Northwestern Univ, PLT, Boston, MA 02115 USA.
EM benjaminlgreenman@gmail.com; matthias@ccs.neu.edu;
   chrdimo@northwestern.edu
RI Dimoulas, Christos/P-7100-2018; Greenman, Ben/GYV-4666-2022
OI Greenman, Ben/0000-0001-7078-9287; Dimoulas,
   Christos/0000-0002-9338-7034
FU NSF [CCF 1518844, CCF 1763922]
FX We thank Michael M. Vitousek for conversations about Transient and its
   type soundness; Amal Ahmed, Michael Ballantyne, Stephen Chang, and Max
   S. New for conversations about complete monitoring; and the anonymous
   OOPSLA reviewers for their questions, comments, and proofreading. This
   work was partially supported by NSF grants CCF 1518844 and CCF 1763922.
CR Allende Esteban., 2013, Proc. Dynamic Languages Symposium, P27, DOI DOI 10.1145/2508168.2508171
   Barendregt H. P., 1981, LAMBDA CALCULUS ITS
   Bierman G, 2014, LECT NOTES COMPUT SC, V8586, P257
   Blume M, 2006, J FUNCT PROGRAM, V16, P375, DOI 10.1017/S0956796806005971
   Bonnaire-Sergeant A, 2016, LECT NOTES COMPUT SC, V9632, P68, DOI 10.1007/978-3-662-49498-1_4
   Castagna G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110285
   Chaudhuri A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133872
   Chen Sheng, 2019, SNAPL, V2
   Chung Benjamin W., 2018, ECOOP, V12
   Cimini M, 2017, ACM SIGPLAN NOTICES, V52, P789, DOI 10.1145/3093333.3009863
   Dimoulas C, 2012, LECT NOTES COMPUT SC, V7211, P214, DOI 10.1007/978-3-642-28869-2_11
   Dimoulas C, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P215, DOI 10.1145/1926385.1926410
   Feldthaus A, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2660193.2660215
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Greenberg M, 2015, ACM SIGPLAN NOTICES, V50, P181, DOI [10.1145/2775051.2676967, 10.1145/2676726.2676967]
   Greenberg M, 2012, J FUNCT PROGRAM, V22, P225, DOI 10.1017/S0956796812000135
   Greenman B, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000217
   Greenman Ben, 2018, P ACM PROGR LANG, V2, DOI DOI 10.1145/3236766
   Greenman Ben, NUCCIS2019001
   Grossman D, 2000, ACM T PROGR LANG SYS, V22, P1037, DOI 10.1145/371880.371887
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Hinze R, 2006, LECT NOTES COMPUT SC, V3945, P208
   Maidl AM, 2016, ACM SIGPLAN NOTICES, V51, P13, DOI [10.1145/2816707.2816709, 10.1145/2936313.2816709]
   Matthews J, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1498926.1498930
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Moore S, 2016, ACM SIGPLAN NOTICES, V51, P214, DOI 10.1145/3022671.2984021
   Muehlboeck F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133880
   New Max S., 2018, Proceedings of the ACM on Programming Languages, V2, DOI 10.1145/3236768
   New MS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290328
   Rastogi A, 2015, ACM SIGPLAN NOTICES, V50, P167, DOI [10.1145/2775051.2676971, 10.1145/2676726.2676971]
   Richards G., 2015, P ECOOP
   Richards G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133879
   Roberts Richard, 2019, ECOOP, V15
   Siek J, 2015, ACM SIGPLAN NOTICES, V50, P425, DOI [10.1145/2737924.2737968, 10.1145/2813885.2737968]
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   Siek Jeremy G., SNAPL, P274
   St-Amour V, 2013, ACM SIGPLAN NOTICES, V48, P351, DOI [10.1145/2544174.2500616, 10.1145/2500365.2500616]
   Swords Cameron, 2018, JFP, V28, P1
   Takikawa A, 2013, LECT NOTES COMPUT SC, V7792, P229, DOI 10.1007/978-3-642-37036-6_14
   Takikawa A, 2012, ACM SIGPLAN NOTICES, V47, P793, DOI 10.1145/2398857.2384674
   Takikawa Asumu, 2015, ECOOP, P4
   THATTE SR, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P367, DOI 10.1145/96709.96747
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tobin-Hochstadt S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P117
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Tobin-Hochstadt Sam, 2017, SNAPL, V17
   Vitousek MM, 2017, ACM SIGPLAN NOTICES, V52, P762, DOI 10.1145/3093333.3009849
   Vitousek Michael M., 2019, Ph. D. Dissertation
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Wadler Philip, 2015, SNAPL, P309
   Waye L, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110280
   Wrigstad T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P377, DOI 10.1145/1706299.1706343
NR 53
TC 9
Z9 10
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 122
DI 10.1145/3360548
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500007
OA gold
DA 2024-07-18
ER

PT J
AU Raad, A
   Wickerson, J
   Vafeiadis, V
AF Raad, Azalea
   Wickerson, John
   Vafeiadis, Viktor
TI Weak Persistency Semantics from the Ground Up Formalising the
   Persistency Semantics of ARMv8 and Transactional Models
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE weak memory; memory persistency; non-volatile memory; ARMv8
ID MEMORY; SYSTEM; X86
AB Emerging non-volatile memory (NVM) technologies promise the durability of disks with the performance of volatile memory (RAM). To describe the persistency guarantees of NVM, several memory persistency models have been proposed in the literature. However, the formal persistency semantics of mainstream hardware is unexplored to date. To close this gap, we present a formal declarative framework for describing concurrency models in the NVM context, and then develop the PARMv8 persistency model as an instance of our framework, formalising the persistency semantics of the ARMv8 architecture for the first time. To facilitate correct persistent programming, we study transactions as a simple abstraction for concurrency and persistency control. We thus develop the PSER (persistent serialisability) persistency model, formalising transactional semantics in the NVM context for the first time, and demonstrate that PSER correctly compiles to PARMv8. This then enables programmers to write correct, concurrent and persistent programs, without having to understand the low-level architecture-specific persistency semantics of the underlying hardware.
C1 [Raad, Azalea; Vafeiadis, Viktor] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Wickerson, John] Imperial Coll London, 180 Queens Gate, London, England.
C3 Imperial College London
RP Raad, A (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
EM azalea@mpi-sws.org; j.wickerson@imperial.ac.uk; viktor@mpi-sws.org
RI Vafeiadis, Viktor/B-5809-2014
OI Vafeiadis, Viktor/0000-0001-8436-0334
FU European Research Council (ERC) Consolidator Grant for the project
   lRustBeltz, under the European Union Horizon 2020 Framework Programme
   [683289]; EPSRC [EP/R006865/1]; EPSRC [EP/R006865/1] Funding Source:
   UKRI
FX We thank the OOPSLA'19 reviewers for their valuable feedback. We thank
   William Wang for his insightful feedback and helpful discussions. The
   first author was supported in part by a European Research Council (ERC)
   Consolidator Grant for the project lRustBeltz, under the European Union
   Horizon 2020 Framework Programme (grant agreement number 683289). The
   second author was supported in part by the EPSRC grant EP/R006865/1.
CR Alglave J, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/2994593
   Alglave J, 2015, ACM SIGPLAN NOTICES, V50, P577, DOI [10.1145/2775054.2694391, 10.1145/2694344.2694391]
   Alglave J, 2011, LECT NOTES COMPUT SC, V6605, P41, DOI 10.1007/978-3-642-19835-9_5
   Arm Limited, 2020, Arm Architecture Reference Manual: Armv8
   Avni H, 2015, LECT NOTES COMPUT SC, V9363, P617, DOI 10.1007/978-3-662-48653-5_41
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Boehm HJ, 2016, ACM SIGPLAN NOTICES, V51, P55, DOI [10.1145/2926697.2926704, 10.1145/3241624.2926704]
   Bornholt J, 2016, ACM SIGPLAN NOTICES, V51, P83, DOI 10.1145/2954679.2872406
   Chakrabarti DR, 2014, ACM SIGPLAN NOTICES, V49, P433, DOI [10.1145/2660193.2660224, 10.1145/2714064.2660224]
   Chatzistergiou A, 2015, PROC VLDB ENDOW, V8, P497, DOI 10.14778/2735479.2735483
   Chong N, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P211, DOI [10.1145/3192366.3192373, 10.1145/3296979.3192373]
   Coburn J, 2011, ACM SIGPLAN NOTICES, V46, P105, DOI [10.1145/1961295.1950380, 10.1145/1961296.1950380]
   Condit J, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P133
   Cooper Harold, 2008, PERSISTENT COLLECTIO
   Douglas Niall., 2018, P1026R0 CALL DATA PE
   GHARACHORLOO K, 1990, 17TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P15, DOI 10.1109/ISCA.1990.134503
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Intel, 2014, INTEL ARCH INSTR SET
   Intel, 2019, INT 64 IA 32 ARCH SO
   Intel, 2015, Persistent Memory Programming
   ITRS, 2011, PROCESS INTEGRATION
   Izraelevitz Joseph, 2016, Distributed Computing. 30th International Symposium, DISC 2016. Proceedings: LNCS 9888, P313, DOI 10.1007/978-3-662-53426-7_23
   Izraelevitz J, 2016, ACM SIGPLAN NOTICES, V51, P427, DOI 10.1145/2954679.2872410
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Jain AK, 2018, ANN IEEE SYM FIELD P, P173, DOI 10.1109/FCCM.2018.00035
   Jishen Zhao, 2013, 2013 46th Annual IEEE/ACM International Symposium on Microarchitecture (MICRO). Proceedings, P421, DOI 10.1145/2540708.2540744
   Joshi A, 2015, PROCEEDINGS OF THE 48TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO-48), P660, DOI 10.1145/2830772.2830805
   Kawahara T, 2012, MICROELECTRON RELIAB, V52, P613, DOI 10.1016/j.microrel.2011.09.028
   Kolli A., 2016, 49 ANN IEEEACM INT S, P1
   Kolli A, 2017, 44TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA 2017), P481, DOI [10.1145/3079856.3080229, 10.1145/3140659.3080229]
   Kolli A, 2016, ACM SIGPLAN NOTICES, V51, P399, DOI 10.1145/2954679.2872381
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lee BC, 2009, CONF PROC INT SYMP C, P2, DOI 10.1145/1555815.1555758
   Liu SH, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P411, DOI 10.1145/3297858.3304015
   Lustig D, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P661, DOI 10.1145/3037697.3037723
   Nawab Faisal, 2017, 31 INT S DISTR COMP, V37, P1
   PAPADIMITRIOU CH, 1979, J ACM, V26, P631, DOI 10.1145/322154.322158
   PCJ, 2016, PERSISTENT COLLECTIO
   Pelley S, 2014, CONF PROC INT SYMP C, P265, DOI 10.1109/ISCA.2014.6853222
   Podkopaev A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290382
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Raad Azalea, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P940, DOI 10.1007/978-3-319-89884-1_33
   Raad A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276507
   Raad A, 2019, LECT NOTES COMPUT SC, V11388, P1, DOI 10.1007/978-3-030-11245-5_1
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   Shu HP, 2018, IEEE NON-VOLATILE ME, P61, DOI 10.1109/NVMSA.2018.00015
   Strukov DB, 2008, NATURE, V453, P80, DOI 10.1038/nature06932
   Tavakkol Arash, 2018, ARXIV181009360
   Volos Haris, 2011, SIGPLAN Notices, V46, P91, DOI 10.1145/1961296.1950379
   Wang William, 2018, 39 ACM SIGPLAN C PRO, p46S61, DOI [10.1145/3192366.3192367, DOI 10.1145/3192366.3192367]
   Wickerson J, 2017, ACM SIGPLAN NOTICES, V52, P190, DOI 10.1145/3093333.3009838
   Wu Xiaojian., 2011, Proceedings of 2011 International Conference for High Performance Computing, Networking, Storage and Analysis (SC '11), p39:1
NR 53
TC 31
Z9 32
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 135
DI 10.1145/3360561
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500020
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Wei, GN
   Chen, YX
   Rompf, T
AF Wei, Guannan
   Chen, Yuxuan
   Rompf, Tiark
TI Staged Abstract Interpreters Fast and Modular Whole-Program Analysis via
   Meta-programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE multi-stage programming; abstract interpreters; control-flow analysis
ID 2-LEVEL SEMANTICS; FLOW-ANALYSIS
AB It is well known that a staged interpreter is a compiler: specializing an interpreter to a given program produces an equivalent executable that runs faster. This connection is known as the first Futamura projection. It is even more widely known that an abstract interpreter is a program analyzer: tweaking an interpreter to run on abstract domains produces a sound static analysis. What happens when we combine these two ideas, and apply specialization to an abstract interpreter?
   In this paper, we present a unifying framework that naturally extends the first Futamura projection from concrete interpreters to abstract interpreters. Our approach derives a sound staged abstract interpreter based on a generic interpreter with type-level binding-time abstractions and monadic abstractions. By using different instantiations of these abstractions, the generic interpreter can flexibly behave in one of four modes: as an unstaged concrete interpreter, a staged concrete interpreter, an unstaged abstract interpreter, or a staged abstract interpreter. As an example of abstraction without regret, the overhead of these abstraction layers is eliminated in the generated code after staging. We show that staging abstract interpreters is practical and useful to optimize static analysis, all while requiring less engineering effort and without compromising soundness. We conduct three case studies, including a comparison with Boucher and Feeley's abstract compilation, applications to various control-flow analyses, and a demonstration for modular analysis. We also empirically evaluate the effect of staging on the execution time. The experiment shows an order of magnitude speedup with staging for control-flow analyses.
C1 [Wei, Guannan; Chen, Yuxuan; Rompf, Tiark] Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Wei, GN (corresponding author), Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
EM guannanwei@purdue.edu; chen1797@purdue.edu; tiark@purdue.edu
RI Chen, Yuxuan/IWL-8267-2023
OI Wei, Guannan/0000-0002-3150-2033
FU NSF [1553471, 1564207, 1918483]; DOE [DE-SC0018050]; Division of
   Computing and Communication Foundations; Direct For Computer & Info Scie
   & Enginr [1918483] Funding Source: National Science Foundation
FX We thank the reviewers of PLDI '19 and OOPSLA '19, as well as James
   Decker, Guanhong Tao, Gregory Essertel, Fei Wang, Qianchuan Ye, Yapeng
   Ye, and Le Yu for their feedback on early drafts. We thank David Van
   Horn and David Darais for their encouragement on this work. This work
   was supported in part by NSF awards 1553471, 1564207, 1918483, DOE award
   DE-SC0018050, as well as gifts from Google, Facebook, and VMware.
CR Adams MD, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P483
   Ager Mads Sig, 2003, Proceedings of the 5th ACM SIGPLAN International Conference on Principles and Practice of Declaritive Programming, P8, DOI DOI 10.1145/888251.888254
   Aktemur B., 2013, Proceedings of the ACM SIGPLAN 2013 Workshop on Partial Evaluation and Program Manipulation, PEPM 2013, Rome, Italy, January 21-22, 2013, P147, DOI [DOI 10.1145/2426890.2426917, 10.1145/2426890.2426917]
   Amin N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158140
   Amtoft T., 1999, BRICS Report Series, V6
   [Anonymous], 1999, NATO ASI SERIES F
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Antoniadis Tony, 2017, P 6 ACM SIGPLAN INT, P25, DOI [DOI 10.1145/3088515.3088522, 10.1145/3088515.3088522]
   Ashley JM, 1998, ACM T PROGR LANG SYS, V20, P845, DOI 10.1145/291891.291898
   Ball Thomas, ASILOMAR CALIFORNIA, V32, P238, DOI [10.4230/LIPIcs.SNAPL.2015.238, DOI 10.4230/LIPICS.SNAPL.2015.238]
   Bergstrom L, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P81, DOI 10.1145/2628136.2628153
   Bolz C. F., 2009, ICOOOLPS, P18, DOI DOI 10.1145/1565824.1565827
   Boucher D., 1996, Compiler Construction. 6th International Conference, CC'96. Proceedings, P192
   Calcagno C, 2003, LECT NOTES COMPUT SC, V2830, P57
   Carette J, 2005, LECT NOTES COMPUT SC, V3676, P256
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Chiusano P., 2014, FUNCTIONAL PROGRAMMI
   Cousot P, 2002, LECT NOTES COMPUT SC, V2304, P159
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290355
   Damian D., 1999, Partial evaluation for program analysis
   Darais D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110256
   Darais D, 2016, ACM SIGPLAN NOTICES, V51, P311, DOI 10.1145/3022670.2951934
   Darais D, 2015, ACM SIGPLAN NOTICES, V50, P552, DOI [10.1145/2814270.2814308, 10.1145/2858965.2814308]
   Essertel GM, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P799
   Felleisen Mattias, 1987, P 14 ACM SIGACT SIGP, P314, DOI [10.1145/41625.41654, DOI 10.1145/41625.41654]
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Futamura Y., 1999, Higher-Order and Symbolic Computation, V12, P381, DOI 10.1023/A:1010095604496
   Futamura Y., 1971, Systems, Compurters, Controls, V25, P45
   Giacobazzi R, 2015, ACM SIGPLAN NOTICES, V50, P261, DOI [10.1145/2775051.2676987, 10.1145/2676726.2676987]
   Gilray T, 2016, ACM SIGPLAN NOTICES, V51, P407, DOI 10.1145/3022670.2951936
   Gilray T, 2016, ACM SIGPLAN NOTICES, V51, P691, DOI 10.1145/2914770.2837631
   Github Inc, 2019, SEMANTIC ANAL
   Gulwani S, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P281, DOI 10.1145/1375581.1375616
   Hardekopf B, 2011, INT SYM CODE GENER, P289, DOI 10.1109/CGO.2011.5764696
   Johnson JI, 2013, ACM SIGPLAN NOTICES, V48, P443, DOI [10.1145/2544174.2500604, 10.1145/2500365.2500604]
   Jones N. D., 1996, Partial Evaluation. International Seminar. Selected Papers, P216
   Jonnalagedda M, 2014, ACM SIGPLAN NOTICES, V49, P637, DOI [10.1145/2660193.2660241, 10.1145/2714064.2660241]
   Jordan H, 2016, LECT NOTES COMPUT SC, V9780, P422, DOI 10.1007/978-3-319-41540-6_23
   Kiselyov O, 2017, ACM SIGPLAN NOTICES, V52, P285, DOI 10.1145/3093333.3009880
   Kiselyov O, 2014, LECT NOTES COMPUT SC, V8475, P86, DOI 10.1007/978-3-319-07151-0_6
   Kiselyov Oleg, 2018, PROGRAMMING LANGUAGE, V5, P1, DOI [10.1561/2500000038, DOI 10.1561/2500000038]
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Marr S, 2015, ACM SIGPLAN NOTICES, V50, P821, DOI [10.1145/2814270.2814275, 10.1145/2858965.2814275]
   Midtgaard J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187672
   Might M, 2006, ACM SIGPLAN NOTICES, V41, P13, DOI 10.1145/1160074.1159807
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   NIELSON F, 1988, THEOR COMPUT SCI, V56, P59, DOI 10.1016/0304-3975(86)90006-X
   NIELSON F, 1989, THEOR COMPUT SCI, V69, P117, DOI 10.1016/0304-3975(89)90091-1
   Nielson  Flemming, 1992, 2 LEVEL FUNCTIONAL L
   Ofenbeck G, 2017, PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'17), P15, DOI 10.1145/3136040.3136060
   Olivier Danvy, 1991, CIS923 KANS STAT U
   Osheim E., 2019, Kind projector
   Poulsen Casper Bach, 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236767
   REPPY J., 2006, ML 06 NEW YORK SEPT, P74, DOI DOI 10.1145/1159876.1159888
   Rompf Tiark, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P318, DOI 10.1007/978-3-319-30936-1_17
   Rompf T, 2011, ACM SIGPLAN NOTICES, V46, P127, DOI 10.1145/1942788.1868314
   Rompf T, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P2, DOI 10.1145/2784731.2784760
   Rompf T, 2014, ACM SIGPLAN NOTICES, V49, P41, DOI [10.1145/2594291.2594316, 10.1145/2666356.2594316]
   Rompf Tiark., 2015, First Summit on Advances in Programming Languages | SNAPL 2015, volume 32 of Leibniz International Proceedings in Informatics (LIPIcs '15), P238, DOI DOI 10.4230/LIPICS.SNAPL.2015.238
   Rosendahl M, 2013, ELECTRON PROC THEOR, P84, DOI 10.4204/EPTCS.129.7
   Sergey I, 2013, ACM SIGPLAN NOTICES, V48, P399, DOI 10.1145/2499370.2491979
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Sheard T, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P81
   SHIVERS O, 1988, SIGPLAN NOTICES, V23, P164, DOI 10.1145/960116.54007
   SHIVERS O, 1991, SIGPLAN NOTICES, V26, P190, DOI 10.1145/115866.115884
   Singh G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158143
   Singh G, 2017, ACM SIGPLAN NOTICES, V52, P46, DOI 10.1145/3093333.3009885
   Smaragdakis Y., 2015, FDN TRENDS PROGRAM L, V2, P1, DOI DOI 10.1561/2500000014
   Sujeeth AK, 2014, ACM T EMBED COMPUT S, V13, DOI 10.1145/2584665
   Sujeeth AK, 2014, ACM SIGPLAN NOTICES, V49, P145, DOI [10.1145/2637365.2517220, 10.1145/2517208.2517220]
   Taha W., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P203, DOI 10.1145/258994.259019
   Taha W., 1999, THESIS OREGON GRADUA
   Tahboub RY, 2018, INT CONF MANAGE DATA, P307, DOI 10.1145/3183713.3196893
   Toman John, 2017, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V18, P1
   Van Horn D, 2012, J FUNCT PROGRAM, V22, P705, DOI 10.1017/S0956796812000238
   Van Horn D, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Van Horn D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P275
   Vardoulakis D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:3)2011
   Wei GN, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236800
   Yallop J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110273
NR 83
TC 9
Z9 10
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 126
DI 10.1145/3360552
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500011
OA gold
DA 2024-07-18
ER

PT J
AU Orchard, D
   Liepelt, VB
   Eades, H
AF Orchard, Dominic
   Liepelt, Vilem-Benjamin
   Eades, Harley I. I. I. I. I. I.
TI Quantitative Program Reasoning with Graded Modal Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE graded modal types; linear types; coeffects; implementation
AB In programming, some data acts as a resource (e.g., file handles, channels) subject to usage constraints. This poses a challenge to software correctness as most languages are agnostic to constraints on data. The approach of linear types provides a partial remedy, delineating data into resources to be used but never copied or discarded, and unconstrained values. Bounded Linear Logic provides a more fine-grained approach, quantifying non-linear use via an indexed-family of modalities. Recent work on coeffect types generalises this idea to graded comonads, providing type systems which can capture various program properties. Here, we propose the umbrella notion of graded modal types, encompassing coeffect types and dual notions of type-based effect reasoning via graded monads. In combination with linear and indexed types, we show that graded modal types provide an expressive type theory for quantitative program reasoning, advancing the reach of type systems to capture and verify a broader set of program properties. We demonstrate this approach via a type system embodied in a fully-fledged functional language called Granule, exploring various examples.
C1 [Orchard, Dominic; Liepelt, Vilem-Benjamin] Univ Kent, Sch Comp, Canterbury, Kent, England.
   [Eades, Harley I. I. I. I. I. I.] Augusta Univ, Sch Comp & Cyber Sci, Augusta, GA USA.
C3 University of Kent; University System of Georgia; Augusta University
RP Orchard, D (corresponding author), Univ Kent, Sch Comp, Canterbury, Kent, England.
FU EPSRC [EP/M026124/1]; EPSRC [EP/M026124/1] Funding Source: UKRI
FX We thank Frank Pfenning and the anonymous reviewers for their helpful
   comments; any remaining errors or infelicities are our own. Thanks to
   the many people who heard us talk about this work and gave useful
   feedback, especially the participants of TLLA 2017 where the kernel of
   the idea for this work was initially presented [Orchard and Liepelt
   2017]. The first author was supported in part by EPSRC project
   EP/M026124/1.
CR ABRAMSKY S, 1993, THEOR COMPUT SCI, V111, P3, DOI 10.1016/0304-3975(93)90181-R
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 1965, ACTA U STOCKHOLMIENS, DOI DOI 10.2307/2271676
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Arntzenius M, 2016, ACM SIGPLAN NOTICES, V51, P214, DOI 10.1145/3022670.2951948
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Barber A, 1996, DUAL INTUITIONISTIC
   Barrett C., 2010, P 8 INT WORKSHOP SAT, V13, P14
   Benton P. N., 1998, Journal of Functional Programming, V8, P177, DOI 10.1017/S0956796898002998
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Bierman G. M., 2000, Studia Logica, V65, P383, DOI 10.1023/A:1005291931660
   Breuvart Flavien, 2015, 24 EACSL ANN C COMP
   Brunel A, 2014, LECT NOTES COMPUT SC, V8410, P351
   BRUS TH, 1987, LECT NOTES COMPUT SC, V274, P364
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Cervesato I, 2002, INFORM COMPUT, V179, P19, DOI 10.1006/inco.2001.2951
   Dal Lago U, 2011, IEEE S LOG, P133, DOI 10.1109/LICS.2011.22
   Danielsson NA, 2008, ACM SIGPLAN NOTICES, V43, P133, DOI 10.1145/1328897.1328457
   de Amorim AA, 2017, ACM SIGPLAN NOTICES, V52, P545, DOI [10.1145/3093333.3009890, 10.1145/3009837.3009890]
   de Amorim Arthur Azevedo, 2014, S IMPL APPL FUNCT PR
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dunfield J, 2004, ACM SIGPLAN NOTICES, V39, P281, DOI 10.1145/982962.964025
   Dunfield J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290322
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   Fujii S, 2016, LECT NOTES COMPUT SC, V9634, P513, DOI 10.1007/978-3-662-49630-5_30
   Gaboardi M, 2016, ACM SIGPLAN NOTICES, V51, P476, DOI 10.1145/3022670.2951939
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Ghica DR, 2014, LECT NOTES COMPUT SC, V8410, P331
   GIRARD JY, 1992, THEOR COMPUT SCI, V97, P1, DOI 10.1016/0304-3975(92)90386-T
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Hodas Joshua S., 1994, Logic Programming in Intuitionistic Linear Logic: Theory, Design, and Implementation
   Iwama Futoshi, 2006, P 2006 ACM SIGPLAN W, P38, DOI DOI 10.1145/1111542.1111550
   Jones SP, 2006, ACM SIGPLAN NOTICES, V41, P50
   Katsumata SY, 2018, LECT NOTES COMPUT SC, V10803, P110, DOI 10.1007/978-3-319-89366-2_6
   Katsumata S, 2014, ACM SIGPLAN NOTICES, V49, P633, DOI 10.1145/2535838.2535846
   Krishnaswami NR, 2015, ACM SIGPLAN NOTICES, V50, P17, DOI [10.1145/2676726.2676969, 10.1145/2775051.2676969]
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Mazurak K, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P77
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   McBride Conor, LIST SUCCESSES CAN C, P207
   Milius Stefan, 2015, 6 C ALG COALG COMP S
   Morris JG, 2016, ACM SIGPLAN NOTICES, V51, P448, DOI 10.1145/3022670.2951925
   Mycroft A, 2016, LECT NOTES COMPUT SC, V9560, P1, DOI 10.1007/978-3-319-27810-0_1
   Orchard Dominic, 2017, WORKSH TRENDS LIN LO
   Orchard Dominic A., 2014, ABS14015391 CORR
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Petricek T, 2013, LECT NOTES COMPUT SC, V7966, P385, DOI 10.1007/978-3-642-39212-2_35
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   Pierce, 2005, ADV TOPICS TYPES PRO
   Polakow J, 2015, ACM SIGPLAN NOTICES, V50, P177, DOI 10.1145/2804302.2804309
   Smirnov A., 2008, J MATH SCI, V151, P3032, DOI DOI 10.1007/S10958-008-9013-7
   Terui K, 2001, IEEE S LOG, P209, DOI 10.1109/LICS.2001.932498
   Tov JA, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P447, DOI 10.1145/1926385.1926436
   Tov JA, 2010, LECT NOTES COMPUT SC, V6012, P550, DOI 10.1007/978-3-642-11957-6_29
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
   Wadler Philip, 1992, 8 INT WORKSH MATH FD
   Wadler Philip, 1993, MATH FDN PROGRAMMING, P513, DOI [10.1007/3-540-58027-1_24, DOI 10.1007/3-540-58027-1_24]
   Wood James., 2018, 3 WORKSH TYP DRIV DE
   Xi HW, 2004, ANN NY ACAD SCI, V3085, P394
   Yoshida N, 2007, ELECTRON NOTES THEOR, V171, P73, DOI 10.1016/j.entcs.2007.02.056
   Zhu DP, 2005, LECT NOTES COMPUT SC, V3350, P83
NR 62
TC 36
Z9 37
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 110
DI 10.1145/3341714
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900033
OA Green Accepted, gold
DA 2024-07-18
ER

PT J
AU Alur, R
   Mamouras, K
   Stanford, C
AF Alur, Rajeev
   Mamouras, Konstantinos
   Stanford, Caleb
TI Modular Quantitative Monitoring
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantitative monitoring; data stream processing; runtime verification
AB In real-time decision making and runtime monitoring applications, declarative languages are commonly used as they facilitate modular high-level specifications with the compiler guaranteeing evaluation over data streams in an efficient and incremental manner. We introduce the model of Data Transducers to allow modular compilation of queries over streaming data. A data transducer maintains a finite set of data variables and processes a sequence of tagged data values by updating its variables using an allowed set of operations. The model allows unambiguous nondeterminism, exponentially succinct control, and combining values from parallel threads of computation. The semantics of the model immediately suggests an efficient streaming algorithm for evaluation. The expressiveness of data transducers coincides with streamable regular transductions, a robust and streamable class of functions characterized by MSO-definable string-to-DAG transformations with no backward edges. We show that the novel features of data transducers, unlike previously studied transducers, make them as succinct as traditional imperative code for processing data streams, but the structuring of the transition function permits modular compilation. In particular, we show that operations such as parallel composition, union, prefix-sum, and quantitative analogs of combinators for unambiguous parsing, can be implemented by natural and succinct constructions on data transducers. To illustrate the benefits of such modularity in compilation, we define a new language for quantitative monitoring, QRE-Past, that integrates features of past-time temporal logic and quantitative regular expressions. While this combination allows a natural specification of a cardiac arrhythmia detection algorithm in QRE-Past, compilation of QRE-Past specifications into efficient monitors comes for free thanks to succinct constructions on data transducers.
C1 [Alur, Rajeev; Stanford, Caleb] Univ Penn, Comp & Informat Sci, Philadelphia, PA 19104 USA.
   [Mamouras, Konstantinos] Rice Univ, Comp Sci, Houston, TX 77251 USA.
C3 University of Pennsylvania; Rice University
RP Alur, R (corresponding author), Univ Penn, Comp & Informat Sci, Philadelphia, PA 19104 USA.
EM alur@cis.upenn.edu; mamouras@rice.edu; castan@cis.upenn.edu
OI Stanford, Caleb/0000-0002-8428-7736; Mamouras,
   Konstantinos/0000-0003-1209-7738
FU NSF [CCF 1763514]; Simons Investigator award
FX We thank the anonymous reviewers for their constructive criticism. This
   research was supported in part by NSF award CCF 1763514 and by a Simons
   Investigator award.
CR Abbas Houssam, 2018, P IEEE
   Alur R, 2016, LECT NOTES COMPUT SC, V9632, P15, DOI 10.1007/978-3-662-49498-1_2
   Alur R, 2013, IEEE S LOG, P13, DOI 10.1109/LICS.2013.65
   Alur R, 2010, LEIBNIZ INT PR INFOR, V8, P1, DOI 10.4230/LIPIcs.FSTTCS.2010.1
   Alur R, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P599, DOI 10.1145/1926385.1926454
   Alur Rajeev, 2012, 39 INT C AUT LANG PR 39 INT C AUT LANG PR
   Alur Rajeev, 2013, P 40 INT C AUT LANG P 40 INT C AUT LANG
   Alur Rajeev, 2017, P 44 INT C AUT LANG P 44 INT C AUT LANG
   Alur Rajeev, 2018, ARXIV180703865 ARXIV180703865
   Barringer Howard, 2004, INT WORKSH VER MOD C INT WORKSH VER MOD C
   Benveniste A, 2003, P IEEE, V91, P64, DOI 10.1109/JPROC.2002.805826
   Björklund H, 2010, THEOR COMPUT SCI, V411, P702, DOI 10.1016/j.tcs.2009.10.009
   Bojanczyk M, 2011, ACM T COMPUT LOG, V12, DOI 10.1145/1970398.1970403
   Bojanczyk Mikolaj, 2018, P 33 ANN ACM IEEE S P 33 ANN ACM IEEE S
   Bouyer P, 2003, INFORM COMPUT, V182, P137, DOI 10.1016/S0890-5401(03)00038-5
   Bozzelli L, 2016, THEOR COMPUT SCI, V631, P118, DOI 10.1016/j.tcs.2016.04.019
   CHANDRA AK, 1981, J ACM, V28, P114, DOI 10.1145/322234.322243
   Chatterjee K, 2015, IEEE S LOG, P725, DOI 10.1109/LICS.2015.72
   COURCELLE B, 1994, THEOR COMPUT SCI, V126, P53, DOI 10.1016/0304-3975(94)90268-2
   D'Angelo B, 2005, 12TH INTERNATIONAL SYMPOSIUM ON TEMPORAL REPRESENTATION AND REASONING, PROCEEDINGS, P166, DOI 10.1109/TIME.2005.26
   Demri S, 2009, ACM T COMPUT LOG, V10, DOI 10.1145/1507244.1507246
   Deshmukh JV, 2017, FORM METHOD SYST DES, V51, P5, DOI 10.1007/s10703-017-0286-7
   Droste M, 2009, MONOGR THEOR COMPUT, P1, DOI 10.1007/978-3-642-01492-5
   Engelfriet J, 1999, INFORM COMPUT, V154, P34, DOI 10.1006/inco.1999.2807
   FELLAH A, 1990, INT J COMPUT MATH, V35, P117, DOI 10.1080/00207169008803893
   Ferrére T, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P394, DOI 10.1145/3209108.3209194
   Finkbeiner Bernd, 2002, ELECTRON NOTES THEOR, V70, P4
   Havelund Klaus, 2004, INT J SOFTW TOOLS TE, V6, P2
   KAMINSKI M, 1994, THEOR COMPUT SCI, V134, P329, DOI 10.1016/0304-3975(94)90242-9
   Leucker M, 2009, J LOGIC ALGEBR PROGR, V78, P293, DOI 10.1016/j.jlap.2008.08.004
   Mamouras Konstantinos, 2017, P 38 C PROGR LANG DE P 38 C PROGR LANG DE
   Manna Z., 2012, The temporal logic of reactive and concurrent systems: Specification
   Muthukrishnan S, 2005, FOUND TRENDS THEOR C, V1, P1, DOI 10.1561/0400000002
   Neven Frank, 2004, ACM T COMPUTATIONAL, V5, P3
   Salomaa K, 2000, THEOR COMPUT SCI, V231, P1
   SCHUTZENBERGER MP, 1961, INFORM CONTROL, V4, P245, DOI 10.1016/S0019-9958(61)80020-X
   Thati P, 2005, ELECTRON NOTES THEOR, V113, P145, DOI 10.1016/j.entcs.2004.01.029
   Yuan YF, 2017, SIGCOMM '17: PROCEEDINGS OF THE 2017 CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION, P99, DOI 10.1145/3098822.3098830
   Zdarek Jan, 2016, HERZSCHRITTMACHERTHE, V27, P3
NR 39
TC 13
Z9 14
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 50
DI 10.1145/3290363
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300050
OA gold
DA 2024-07-18
ER

PT J
AU Kavvos, GA
AF Kavvos, G. A.
TI Modalities, Cohesion, and Information Flow
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE information flow; information flow control; type systems; modal type
   systems; cohesion; modal type theory; modalities; noninterference;
   category theory
AB It is informally understood that the purpose of modal type constructors in programming calculi is to control the flow of information between types. In order to lend rigorous support to this idea, we study the category of classified sets, a variant of a denotational semantics for information flow proposed by Abadi et al. We use classified sets to prove multiple noninterference theorems for modalities of a monadic and comonadic flavour. The common machinery behind our theorems stems from the the fact that classified sets are a (weak) model of Lawvere's theory of axiomatic cohesion. In the process, we show how cohesion can be used for reasoning about multi-modal settings. This leads to the conclusion that cohesion is a particularly useful setting for the study of both information flow, but also modalities in type theory and programming languages at large.
C1 [Kavvos, G. A.] Wesleyan Univ, Dept Math & Comp Sci, 265 Church St, Middletown, CT 06459 USA.
C3 Wesleyan University
RP Kavvos, GA (corresponding author), Wesleyan Univ, Dept Math & Comp Sci, 265 Church St, Middletown, CT 06459 USA.
EM gkavvos@wesleyan.edu
OI Kavvos, Alex/0000-0001-7953-7975
FU Air Force Office of Scientific Research [FA9550-16-1-0292]
FX This material is based upon work supported by the Air Force Office of
   Scientific Research under award number FA9550-16-1-0292. Any opinions,
   finding, and conclusions or recommendations expressed in this material
   are those of the author(s) and do not necessarily reflect the views of
   the United States Air Force.
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Abramsky S, 2011, LECT NOTES PHYS, V813, P3, DOI 10.1007/978-3-642-12821-9_1
   Awodey S., 2010, Category Theory
   Benton P. N., 1998, Journal of Functional Programming, V8, P177, DOI 10.1017/S0956796898002998
   Borceux Francis, 1994, Handbook of Categorical Algebra: Volume 2, Categories and Structures, V2, DOI DOI 10.1017/CBO9780511525865
   Bowman WJ, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P101, DOI 10.1145/2784731.2784733
   Brookes Stephen., 1992, Applications of Categories in Computer Science, DOI [10.1017/CBO9780511525902.003, DOI 10.1017/CBO9780511525902.003]
   Clouston R, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(3:7)2016
   Crole R. L., 1993, Categories for Types
   Curien PL, 2016, ACM SIGPLAN NOTICES, V51, P44, DOI 10.1145/2914770.2837652
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   Gaboardi M, 2016, ACM SIGPLAN NOTICES, V51, P476, DOI 10.1145/3022670.2951939
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Heintze N., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P365, DOI 10.1145/268946.268976
   Hermida C, 2014, ELECTRON NOTES THEOR, V303, P149, DOI 10.1016/j.entcs.2014.02.008
   Hofmann Martin, 1999, THESIS TU DARMSTADT
   Johnstone P., 2003, SKETCHES ELEPHANT TO
   Kavvos GA, 2017, IEEE S LOG
   Kavvos G. A., 2017, DUAL CONTEXT CALCULI
   Krishnaswami NR, 2013, ACM SIGPLAN NOTICES, V48, P221, DOI [10.1145/2544174.2500588, 10.1145/2500365.2500588]
   LaPadula L. J., 1996, Journal of Computer Security, V4, P239
   Lawvere FW, 2015, THEOR APPL CATEG, V30, P909
   Lawvere W., 2007, Theory, V19, P41
   Licata D. R., 2017, LEIBNIZ INT P INFORM, V25, P1
   Licata DR, 2016, LECT NOTES COMPUT SC, V9537, P219, DOI 10.1007/978-3-319-27683-0_16
   Mac Lane S., 1998, Graduate Texts in Mathematics, DOI DOI 10.1007/978-1-4757-4721-8
   Miyamoto Kenji., 2004, WORKSHOP FDN COMPUTE, P187
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Nuyts Andreas, 2017, P ACM PROGRAM LANG, DOI [10.1145/3110276, DOI 10.1145/3110276]
   Nuyts Andreas, 2018, LICS18 P 33 ANN ACM, DOI [10.1145/3209108.3209119, DOI 10.1145/3209108.3209119]
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Rajani Vineet, 2018, 31 IEEE S COMP SEC F
   Rushby John, 1986, BELL PADULA SECURITY, P1, DOI 10.1007/978-1-4419-5906-5_811
   Sabelfeld A., 2001, Higher-Order and Symbolic Computation, V14, P59, DOI 10.1023/A:1011553200337
   Shikuma Naokata, 2008, LOG METH COMPUT SCI, V4, P10, DOI [10.2168/LMCS-4(3:10)2008, DOI 10.2168/LMCS-4(3:10)2008]
   Shulman M, 2018, MATH STRUCT COMP SCI, V28, P856, DOI 10.1017/S0960129517000147
   Streicher Thomas., 2006, Domain-theoretic foundations of functional programming
   Tse S, 2004, ACM SIGPLAN NOTICES, V39, P115, DOI 10.1145/1016848.1016868
   Uustalu T, 2008, ELECTRON NOTES THEOR, V203, P263, DOI 10.1016/j.entcs.2008.05.029
NR 42
TC 9
Z9 12
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 20
DI 10.1145/3290333
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300020
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Singh, G
   Gehr, T
   Püschel, M
   Vechev, M
AF Singh, Gagandeep
   Gehr, Timon
   Puschel, Markus
   Vechev, Martin
TI An Abstract Domain for Certifying Neural Networks
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Abstract Interpretation; Deep Learning; Adversarial attacks
ID ROBUSTNESS
AB We present a novel method for scalable and precise certification of deep neural networks. The key technical insight behind our approach is a new abstract domain which combines floating point polyhedra with intervals and is equipped with abstract transformers specifically tailored to the setting of neural networks. Concretely, we introduce new transformers for affine transforms, the rectified linear unit (ReLU), sigmoid, tanh, and maxpool functions.
   We implemented our method in a system called DeepPoly and evaluated it extensively on a range of datasets, neural architectures (including defended networks), and specifications. Our experimental results indicate that DeepPoly is more precise than prior work while scaling to large networks.
   We also show how to combine DeepPoly with a form of abstraction refinement based on trace partitioning. This enables us to prove, for the first time, the robustness of the network when the input image is subjected to complex perturbations such as rotations that employ linear interpolation.
C1 [Singh, Gagandeep; Gehr, Timon; Puschel, Markus; Vechev, Martin] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich
RP Singh, G (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
EM gsingh@inf.ethz.ch; timon.gehr@inf.ethz.ch; pueschel@inf.ethz.ch;
   martin.vechev@inf.ethz.ch
OI Singh, Gagandeep/0000-0002-9299-2961
FU Swiss National Science Foundation (SNF) [163117]
FX We would like to thank the anonymous reviewers for their constructive
   feedback. This research was supported by the Swiss National Science
   Foundation (SNF) grant number 163117.
CR Amato F, 2013, J APPL BIOMED, V11, P47, DOI 10.2478/v10136-012-0031-x
   Nguyen A, 2015, PROC CVPR IEEE, P427, DOI 10.1109/CVPR.2015.7298640
   [Anonymous], 2017, ABS171107356 CORR
   [Anonymous], 2015, ABS151105122 CORR
   [Anonymous], 2016, P NEUR INF PROC SYST
   Bojarski Mariusz, 2016, arXiv
   Carlini N, 2017, P IEEE S SECUR PRIV, P39, DOI 10.1109/SP.2017.49
   Carlini Nicholas, 2017, ABS170910207 CORR ABS170910207 CORR
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Dong YP, 2018, PROC CVPR IEEE, P9185, DOI 10.1109/CVPR.2018.00957
   Dvijotham K, 2018, UNCERTAINTY IN ARTIFICIAL INTELLIGENCE, P550
   Ehlers R, 2017, LECT NOTES COMPUT SC, V10482, P269, DOI 10.1007/978-3-319-68167-2_19
   Gehr T, 2018, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2018.00058
   Ghorbal K, 2009, LECT NOTES COMPUT SC, V5643, P627, DOI 10.1007/978-3-642-02658-4_47
   Goodfellow Ian., 2015, STAT-US
   Grosse K, 2016, ABS160604435 CORR
   Gu Shixiang, 2014, ARXIV PREPRINT ARXIV
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Krizhevsky A., 2009, Tech. Rep.
   Lecun Y, 1998, P IEEE, V86, P2278, DOI 10.1109/5.726791
   Madry Aleksander, 2018, INT C LEARN REPR ICL
   Miné A, 2004, LECT NOTES COMPUT SC, V2986, P3
   Mirman Matthew, 2018, INT C MACH LEARN, P3575
   Pei KX, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P1, DOI 10.1145/3132747.3132785
   Pei Kexin, 2017, ABS171201785 CORR
   Raghunathan Aditi, 2018, P INT C MACH LEARN I P INT C MACH LEARN I
   Rival X, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275501
   Singh G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158143
   Singh G, 2017, ACM SIGPLAN NOTICES, V52, P46, DOI 10.1145/3093333.3009885
   Singh Gagandeep, 2018, P NEUR INF PROC SYST P NEUR INF PROC SYST
   Tabacof P, 2016, IEEE IJCNN, P426, DOI 10.1109/IJCNN.2016.7727230
   Wang SQ, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P1599
   Weng TW, 2018, PR MACH LEARN RES, V80
   Wong E, 2018, PR MACH LEARN RES, V80
NR 34
TC 277
Z9 305
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 41
DI 10.1145/3290354
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300041
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Sahebolamri, A
   Barrett, L
   Moore, S
   Micinski, K
AF Sahebolamri, Arash
   Barrett, Langston
   Moore, Scott
   Micinski, Kristopher
TI Bring Your Own Data Structures to Datalog
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Logic Programming; Datalog; Program Analysis; Static Analysis
ID LANGUAGE; POINTS
AB The restricted logic programming language Datalog has become a popular implementation target for deductive-analytic workloads including social-media analytics and program analysis. Modern Datalog engines compile Datalog rules to joins over explicit representations of relations-often B-trees or hash maps. While these modern engines have enabled high scalability in many application domains, they have a crucial weakness: achieving the desired algorithmic complexity may be impossible due to representation-imposed overhead of the engine's data structures. In this paper, we present the "Bring Your Own Data Structures" (BYODS) approach, in the form of a DSL embedded in Rust. Using BYODS, an engineer writes logical rules which are implicitly parametric on the concrete data structure representation; our implementation provides an interface to enable "bringing their own" data structures to represent relations, which harmoniously interact with code generated by our compiler (implemented as Rust procedural macros). We formalize the semantics of BYODS as an extension of Datalog's; our formalization captures the key properties demanded of data structures compatible with BYODS, including properties required for incrementalized (semi-naive) evaluation. We detail many applications of the BYODS approach, implementing analyses requiring specialized data structures for transitive and equivalence relations to scale, including an optimized version of the Rust borrow checker Polonius; highly-parallel PageRank made possible by lattices; and a large-scale analysis of LLVM utilizing index-sharing to scale. Our results show that BYODS offers both improved algorithmic scalability (reduced time and/or space complexity) and runtimes competitive with state-of-the-art parallelizing Datalog solvers.
C1 [Sahebolamri, Arash; Micinski, Kristopher] Syracuse Univ, Syracuse, NY 13244 USA.
   [Barrett, Langston; Moore, Scott] Galois, Portland, OR USA.
C3 Syracuse University
RP Sahebolamri, A (corresponding author), Syracuse Univ, Syracuse, NY 13244 USA.
EM asahebol@syr.edu; langston@galois.com; scott@galois.com;
   kkmicins@syr.edu
FU NSF PPoSS planning award [CCF-2217037]; Defense Advanced Research
   Projects Agency (DARPA) [N66001-21-C-4023]
FX This work was funded in part by NSF PPoSS planning award CCF-2217037.
   This material is based upon work supported by the Defense Advanced
   Research Projects Agency (DARPA) under Contract No. N66001-21-C-4023.
   Any opinions, findings and conclusions or recommendations expressed in
   this material are those of the author(s) and do not necessarily reflect
   the views of DARPA.
CR [Anonymous], 1994, Program Analysis and Specialization for the C Programming Language
   Antoniadis Tony, 2017, P 6 ACM SIGPLAN INT, P25, DOI [DOI 10.1145/3088515.3088522, 10.1145/3088515.3088522]
   Aref M, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1371, DOI 10.1145/2723372.2742796
   Arntzenius M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371090
   Arntzenius M, 2016, ACM SIGPLAN NOTICES, V51, P214, DOI 10.1145/3022670.2951948
   Balatsouras G, 2016, LECT NOTES COMPUT SC, V9837, P84, DOI 10.1007/978-3-662-53413-7_5
   Bancilhon F., 1986, SIGMOD Record, V15, P16, DOI 10.1145/16856.16859
   Bancilhon Francois., 1986, NAIVE EVALUATION REC, P165, DOI DOI 10.1007/978-1-4612-4980-1_17
   Bembenek A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428209
   Bravenboer M, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P243
   Ceri S., 1989, IEEE Transactions on Knowledge and Data Engineering, V1, P146, DOI 10.1109/69.43410
   GABOW HN, 1976, J ACM, V23, P221, DOI 10.1145/321941.321942
   GALIL Z, 1991, COMPUT SURV, V23, P319, DOI 10.1145/116873.116878
   GALLER BA, 1964, COMMUN ACM, V7, P301, DOI 10.1145/364099.364331
   Jordan H, 2022, CONCURR COMP-PRACT E, V34, DOI 10.1002/cpe.5643
   Jordan H, 2019, PROCEEDINGS OF THE TENTH INTERNATIONAL WORKSHOP ON PROGRAMMING MODELS AND APPLICATIONS FOR MULTICORES AND MANYCORES (PMAM 2019), P31, DOI 10.1145/3303084.3309490
   Jordan H, 2016, LECT NOTES COMPUT SC, V9780, P422, DOI 10.1007/978-3-319-41540-6_23
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Leskovec J., 2014, SNAP Datasets: Stanford large network dataset collection
   LLVM-Authors, 2023, Opaque Pointers-LLVM documentation
   Lopes Nuno., 2016, Automatically verifying reachability and well-formedness in p4 networks
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Matsakis Nicholas., 2023, Rust-Lang/polonius: Defines the Rust borrow checker
   Mazuran M, 2013, VLDB J, V22, P471, DOI 10.1007/s00778-012-0299-1
   McCarthy Jay., 2022, Datalog: Deductive Database Programming
   Nappa P, 2019, INT CONFER PARA, P82, DOI 10.1109/PACT.2019.00015
   Pacak A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428195
   Page L., 1999, PAGERANK CITATION RA
   Ross K. A., 1992, Proceedings of the Eleventh ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P114, DOI 10.1145/137097.137852
   Ryzhyk Leonid, 2019, Datalog
   Sahebolamri A, 2022, CC'22: PROCEEDINGS OF THE 31ST ACM SIGPLAN INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P77, DOI 10.1145/3497776.3517779
   Seo J, 2013, PROC VLDB ENDOW, V6, P1906, DOI 10.14778/2556549.2556572
   Shkapsky A, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1135, DOI 10.1145/2882903.2915229
   Shkapsky A, 2015, PROC INT CONF DATA, P867, DOI 10.1109/ICDE.2015.7113340
   Smaragdakis Yannis, 2010, Datalog Reloaded. First International Workshop, Datalog 2010. Revised Selected Papers, P245, DOI 10.1007/978-3-642-24206-9_14
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Subotic P, 2018, PROC VLDB ENDOW, V12, P141, DOI 10.14778/3282495.3282500
   Szabó T, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1, DOI 10.1145/3453483.3454026
   Tarski Alfred., 1955, A lattice-theoretical fixpoint theorem and its applications
   Tate R, 2009, ACM SIGPLAN NOTICES, V44, P264, DOI 10.1145/1594834.1480915
   van Tonder R, 2021, Arxiv, DOI arXiv:2112.12398
   Veldhuizen Todd L, 2014, INT C DAT THEOR
   Wang J, 2020, SIGMOD'20: PROCEEDINGS OF THE 2020 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P2673, DOI 10.1145/3318464.3384677
   Wang K, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P763
   Whaley J, 2005, LECT NOTES COMPUT SC, V3780, P97
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Wu JC, 2022, INT CONF MANAGE DATA, P1433, DOI 10.1145/3514221.3517853
   Zaniolo C, 2017, THEOR PRACT LOG PROG, V17, P1048, DOI 10.1017/S1471068417000436
   Zhang Eric., 2023, Datalog compiler embedded in Rust as a procedural macro
   Zhang YH, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591239
NR 51
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 264
DI 10.1145/3622840
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100044
OA gold
DA 2024-07-18
ER

PT J
AU Zakhour, G
   Weisenburger, P
   Salvaneschi, G
AF Zakhour, George
   Weisenburger, Pascal
   Salvaneschi, Guido
TI Type-Safe Dynamic Placement with First-Class Placed Values
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Distributed Programming; Multitier Programming; Placement Types; Scala;
   Dynamic Placement; Union Types
AB Several distributed programming language solutions have been proposed to reason about the placement of data, computations, and peers interaction. Such solutions include, among the others, multitier programming, choreographic programming and various approaches based on behavioral types. These methods statically ensure safety properties thanks to a complete knowledge about placement of data and computation at compile time. In distributed systems, however, dynamic placement of computation and data is crucial to enable performance optimizations, e.g., driven by data locality or in presence of a number of other constraints such as security and compliance regarding data storage location. Unfortunately, in existing programming languages, dynamic placement conflicts with static reasoning about distributed programs: the flexibility required by dynamic placement hinders statically tracking the location of data and computation.
   In this paper we present Dyno, a programming language that enables static reasoning about dynamic placement. Dyno features a type system where values are explicitly placed, but in contrast to existing approaches, placed values are also first class, ensuring that they can be passed around and referred to from other locations. Building on top of this mechanism, we provide a novel interpretation of dynamic placement as unions of placement types. We formalize type soundness, placement correctness (as part of type soundness) and architecture conformance. In case studies and benchmarks, our evaluation shows that Dyno enables static reasoning about programs even in presence of dynamic placement, ensuring type safety and placement correctness of programs at negligible performance cost. We reimplement an Android app with similar to 7 K LOC in Dyno, find a bug in the existing implementation, and show that the app's approach is representative of a common way to implement dynamic placement found in over 100 apps in a large open-source app store.
C1 [Zakhour, George; Weisenburger, Pascal; Salvaneschi, Guido] Univ St Gallen, Torstr 25, CH-9000 St Gallen, Switzerland.
C3 University of St Gallen
RP Zakhour, G (corresponding author), Univ St Gallen, Torstr 25, CH-9000 St Gallen, Switzerland.
EM george.zakhour@unisg.ch; pascal.weisenburger@unisg.ch;
   guido.salvaneschi@unisg.ch
OI Weisenburger, Pascal/0000-0003-1288-1485; Zakhour,
   George/0009-0000-5042-1207
FU Swiss National Science Foundation (SNSF) [200429]; Basic Research Fund
   of the University of St. Gallen (GFF) through the International
   Postdoctoral Fellowship (IPF) [1031569]
FX We would like to thank Lukas Lehmann for the implementation of the first
   prototype of this work and all reviewers of this paper for their
   comments and suggestions. This work is supported by the Swiss National
   Science Foundation (SNSF), grant 200429, and the Basic Research Fund of
   the University of St. Gallen (GFF) through the International
   Postdoctoral Fellowship (IPF) 1031569.
CR Amiri K, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE 2000 USENIX ANNUAL TECHNICAL CONFERENCE, P307
   AntennaPod Developers, 2011, AntennaPod-The Open Podcast Player
   Arani Z., 2020, Communications in Computer and Information Science, DOI DOI 10.1007/978-3-030-55814-7_20
   Audrito G., 2022, LEIBNIZ INT P INFORM, DOI DOI 10.4230/LIPICS.ECOOP.2022.20
   Audrito G, 2019, ACM T COMPUT LOG, V20, DOI 10.1145/3285956
   Baeten JCM, 2005, THEOR COMPUT SCI, V335, P131, DOI 10.1016/j.tcs.2004.07.036
   Balzer Stephanie, 2011, Ph. D. Dissertation, DOI [10.3929/ethza-007086593, DOI 10.3929/ETHZA-007086593]
   Chlipala A, 2015, ACM SIGPLAN NOTICES, V50, P153, DOI [10.1145/2775051.2677004, 10.1145/2676726.2677004]
   Clayman S, 2014, IEEE IFIP NETW OPER, DOI 10.1109/noms.2014.6838412
   Cooper E, 2007, LECT NOTES COMPUT SC, V4709, P266
   Cruz-Filipe L, 2016, LECT NOTES COMPUT SC, V9688, P114, DOI 10.1007/978-3-319-39570-8_8
   Dalla Preda M, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(2:1)2017
   Downing T., 1998, JAVA RMI REMOTE METH
   Giallorenzo S, 2023, Arxiv, DOI [arXiv:2005.09520, 10.48550/ARXIV.2005.09520]
   Giallorenzo Saverio, 2021, LEIBNIZ INT P INFORM, V194, DOI [10.4230/LIPIcs.ECOOP.2021.22, DOI 10.4230/LIPICS.ECOOP.2021.22]
   Gultnieks Ciaran., 2010, F-Droid-Free and Open Source Android App Repository
   Harkes D, 2014, LECT NOTES COMPUT SC, V8706, P241, DOI 10.1007/978-3-319-11245-9_14
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Karve A., 2006, Proceedings of the 15th International Conference on World Wide Web, P595, DOI 10.1145/1135777.1135865
   Kenler Emilien, 2015, MariaDB Essentials
   Lafuente AL, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(1:13)2017
   Lanese I, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P323, DOI 10.1109/SEFM.2008.11
   Lightbend Inc, 2020, Akka Scala Documentation, Release 2.4.20
   Liskov B., 1996, SIGMOD Record, V25, P318, DOI 10.1145/235968.233346
   Liskov B., 1995, THETA REFERENCE MANU
   Liu J, 2017, J COMPUT SECUR, V25, P367, DOI 10.3233/JCS-15805
   Liu J, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P321
   Macedo Tiago, 2011, Redis Cookbook: Practical Techniques for Fast Data Manipulation
   Mamei M, 2004, SECOND IEEE ANNUAL CONFERENCE ON PERVASIVE COMPUTING AND COMMUNICATIONS, PROCEEDINGS, P263, DOI 10.1109/PERCOM.2004.1276864
   Mastodon, 2016, Mastodon: Your selfhosted, globally interconnected microblogging community
   Miller H, 2014, LECT NOTES COMPUT SC, V8586, P308
   Montesi Fabrizio, 2014, Lecture Notes in Computer Science, P3, DOI [10.1007/978-3-319-33612-1_1, DOI 10.1007/978-3-319-33612-1_1]
   Murphy T, 2004, IEEE S LOG, P286, DOI 10.1109/LICS.2004.1319623
   Murphy T, 2008, LECT NOTES COMPUT SC, V4912, P108
   Philips Laure, 2018, Art Sci. Eng. Program., V2, DOI [10.22152/programmingjournal.org/2018/2/3, DOI 10.22152/PROGRAMMINGJOURNAL.ORG/2018/2/3]
   Philips Laure., 2014, Onward! 2014: Proceedings of the 2014 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming Software; 2014 Oct 20-24; Portland, OR, P69, DOI DOI 10.1145/2661136.2661146
   Radanne G, 2016, LECT NOTES COMPUT SC, V10017, P377, DOI 10.1007/978-3-319-47958-3_20
   Rajchenbach-Teller David., 2010, P OWASP APPSEC RES S
   Reynders Bob, 2020, The Art, Science, and Engineering of Programming, V4, DOI DOI 10.22152/PROGRAMMINGJOURNAL.ORG/2020/4/6
   Serrano M, 2016, ACM SIGPLAN NOTICES, V51, P180, DOI 10.1145/3022670.2951916
   Serrano Manuel, 2006, 21 ACM SIGPLAN C OBJ
   Shen G, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3607849
   Simpson A., 1994, The proof theory and semantics of intuitionistic modal logic
   Steimann Friedrich, 2015, LEIBNIZ INT P INFORM, V32, P294
   Steimann Friedrich, 2013, P 2013 ACM INT S NEW, P173, DOI [10.1145/2509578.2509582, DOI 10.1145/2509578.2509582]
   Teyeb H, 2017, INT J COOP INF SYST, V26, DOI 10.1142/S0218843017500010
   Viroli M, 2019, J LOG ALGEBR METHODS, V109, DOI 10.1016/j.jlamp.2019.100486
   Waldo J., 1994, NOTE DISTRIBUTED COM
   Weisenburger P, 2020, ACM COMPUT SURV, V53, DOI 10.1145/3397495
   Weisenburger P, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276499
   Weisenburger Pascal, 2019, LEIBNIZ INT P INFORM, V134, DOI [10.4230/LIPIcs.ECOOP.2019.3, DOI 10.4230/LIPICS.ECOOP.2019.3]
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Yang F, 2016, PROC VLDB ENDOW, V9, P420
   Zakhour George, 2023, Zenodo, DOI 10.5281/ZENODO.8148841
   Zdancewic S, 2002, ACM T COMPUT SYST, V20, P283, DOI 10.1145/566340.566343
   Zhou YL, 2005, PROC INT CONF DATA, P322
   Zulfa MI, 2020, INT J WEB INF SYST, V16, P545, DOI 10.1108/IJWIS-06-2020-0032
NR 57
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 297
DI 10.1145/3622873
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100077
OA gold
DA 2024-07-18
ER

PT J
AU Lu, KC
   Krishnamurthi, S
   Fisler, K
   Tshukudu, E
AF Lu, Kuang-Chen
   Krishnamurthi, Shriram
   Fisler, Kathi
   Tshukudu, Ethel
TI What Happens When Students Switch (Functional) Languages (Experience
   Report)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Programming language learning; Language transfer; Pyret; Python; Racket
AB When novice programming students already know one programming language and have to learn another, what issues do they run into? We specifically focus on one or both languages being functional, varying along two axes: syntax and semantics. We report on problems, especially persistent ones. This work can be of immediate value to educators and also sets up avenues for future research.
C1 [Lu, Kuang-Chen; Krishnamurthi, Shriram; Fisler, Kathi] Brown Univ, Dept Comp Sci, Providence, RI 02912 USA.
   [Tshukudu, Ethel] Univ Botswana, Gaborone, Botswana.
C3 Brown University; University of Botswana
RP Lu, KC (corresponding author), Brown Univ, Dept Comp Sci, Providence, RI 02912 USA.
EM kuang-chen_lu@brown.edu; shriram@brown.edu; kathryn_fisler@brown.edu;
   tshukudue@ub.ac.bw
OI Lu, Kuang-Chen/0000-0001-6502-9275; Krishnamurthi,
   Shriram/0000-0001-5184-1975; Tshukudu, Ethel/0000-0001-5626-5663
FU US NSF [2227863]
FX We are extremely grateful to our reviewers for their close reading and
   many questions and suggestions. We thank the US NSF for support under
   Grant No.: 2227863. The authors gratefully acknowledge Schloss Dagstuhl
   for Seminar 22302, through which the second and third authors first met
   the fourth. The idea for this paper came about over conversations during
   breaks at an outside table at the Schloss.
CR Bose DB, 2022, ACMSE 2022: PROCEEDINGS OF THE 2022 ACM SOUTHEAST CONFERENCE, P224, DOI 10.1145/3476883.3520205
   Denny P, 2022, PROCEEDINGS OF THE 53RD ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION (SIGCSE 2022), VOL 1, P948, DOI 10.1145/3478431.3499314
   Espinal A, 2023, COMPUT SCI EDUC, V33, P567, DOI 10.1080/08993408.2022.2079867
   Felleisen Matthias, 2018, How to design programs: an introduction to programming and computing
   Fisler K, 2017, PROCEEDINGS OF THE 2017 ACM SIGCSE TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION (SIGCSE'17), P213, DOI 10.1145/3017680.3017777
   Fisler Kathi, 2023, A Data-Centric Introduction to Computing
   Fowler M, 2022, COMPUT SCI EDUC, V32, P355, DOI 10.1080/08993408.2022.2079866
   Franklin Diana, 2016, 47 ACM TECHN S COMP, P217
   GENTNER D, 1983, COGNITIVE SCI, V7, P155, DOI 10.1207/s15516709cog0702_3
   GIBSON JJ, 1955, PSYCHOL REV, V62, P32, DOI 10.1037/h0048826
   Guth Dwight, 2013, Ph. D. Dissertation
   Kao Y, 2022, ACM T COMPUT EDUC, V22, DOI 10.1145/3487051
   Kessler C., 1986, HUM-COMPUT INTERACT, V2, P135, DOI DOI 10.1207/S15327051HCI0202_2
   Kölling M, 2015, PROCEEDINGS OF THE 10TH WORKSHOP IN PRIMARY AND SECONDARY COMPUTING EDUCATION, WIPSCE 2015, P29, DOI 10.1145/2818314.2818331
   Krishnamurthi S, 2020, COMMUN ACM, V63, P24, DOI 10.1145/3408056
   Krishnamurthi Shriram, 2001, Ph. D. Dissertation
   Lopez Mike, 2008, P 4 INT WORKSH COMP, P101, DOI 10.1145/1404520.1404531
   Maloney J., 2010, ACM T COMPUT EDUC, V10, P16, DOI DOI 10.1145/1868358.1868363
   Moors L, 2018, INT CONF TEACH LEARN, P57, DOI 10.1109/LaTICE.2018.000-5
   Pea R. D., 1986, Journal of Educational Computing Research, V2, P25, DOI 10.2190/689T-1R2A-X4W4-29J2
   Politz Joe Gibbs, 2013, P 2013 ACM SIGPLAN I, P217, DOI DOI 10.1145/2509136.2509536
   Posner GJ., 1982, SCI ED, V66, P211, DOI [10.1002/sce.3730660207, DOI 10.1002/SCE.3730660207]
   Powers K, 2007, SIGCSE 2007: PROCEEDINGS OF THE THIRTY-EIGHTH SIGCSE TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P213, DOI 10.1145/1227504.1227386
   Resnick M, 2009, COMMUN ACM, V52, P60, DOI 10.1145/1592761.1592779
   Richards KAR, 2018, J TEACH PHYS EDUC, V37, P225, DOI 10.1123/jtpe.2017-0084
   Santos IM, 2019, SPLASH-E'19: PROCEEDINGS OF THE 2019 ACM SIGPLAN SYMPOSIUM ON SPLASH-E, P36, DOI 10.1145/3358711.3361628
   Scholtz J., 1990, International Journal of Human-Computer Interaction, V2, P51, DOI 10.1080/10447319009525970
   Scholtz J., 1991, Proceedings of the Twenty-Fourth Annual Hawaii International Conference on System Sciences (Cat. No.91TH0350-9), P3, DOI 10.1109/HICSS.1991.183956
   SCHOLTZ J, 1993, INTERACT COMPUT, V5, P13, DOI 10.1016/0953-5438(93)90023-M
   Scholtz J., 1993, Empirical Studies of Programmers: Fifth Workshop, P187
   Schwartz DL, 2011, J EDUC PSYCHOL, V103, P759, DOI 10.1037/a0025140
   Shrestha N, 2020, PROC INT CONF SOFTW, P691, DOI 10.1145/3377811.3380352
   The Pyret Crew, The Pyret Programming Language
   Tshukudu Ethel, 2020, ICER '20. Proceedings of the 2020 ACM Conference on International Computing Education Research, P227, DOI 10.1145/3372782.3406270
   Tshukudu Ethel, 2020, UKICER '20: Proceedings of the United Kingdom & Ireland Computing Education Research Conference, P10, DOI 10.1145/3416465.3416475
   Tshukudu Ethel, 2020, ITiCSE '20: Proceedings of the 2020 ACM Conference on Innovation and Technology in Computer Science Education, P307, DOI 10.1145/3341525.3387406
   Tshukudu E, 2021, PROCEEDINGS OF 21ST KOLI CALLING CONFERENCE ON COMPUTING EDUCATION RESEARCH, KOLI CALLING 2021,, DOI 10.1145/3488042.3488050
   Tshukudu E, 2021, ICER 2021: PROCEEDINGS OF THE 17TH ACM CONFERENCE ON INTERNATIONAL COMPUTING EDUCATION RESEARCH, P294, DOI 10.1145/3446871.3469752
   Tshukudu E, 2019, ICER '19 - PROCEEDINGS OF THE 2019 ACM CONFERENCE ON INTERNATIONAL COMPUTING EDUCATION RESEARCH, P355, DOI 10.1145/3291279.3339437
   Tshukudu Ethel, 2022, Ph. D. Dissertation
   Walker K. P., 1996, Computer Science Education, V7, P1, DOI 10.1080/0899340960070101
   Weingartner KM, 2019, CONTEMP EDUC PSYCHOL, V58, P138, DOI 10.1016/j.cedpsych.2019.03.004
   Weintrop D, 2018, ICER'18: PROCEEDINGS OF THE 2018 ACM CONFERENCE ON INTERNATIONAL COMPUTING EDUCATION RESEARCH, P142, DOI 10.1145/3230977.3230988
   Weintrop D, 2019, COMPUT EDUC, V142, DOI 10.1016/j.compedu.2019.103646
   Weintrop D, 2019, COMMUN ACM, V62, P22, DOI 10.1145/3341221
   Wiedenbeck S, 1996, EMPIRICAL STUDIES OF PROGRAMMERS: SIXTH WORKSHOP, P233
   Wu Q., 1990, PROBLEM SOLVING TRAN
NR 47
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 215
DI 10.1145/3607857
PG 17
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900028
OA gold
DA 2024-07-18
ER

PT J
AU Lee, D
   Cho, M
   Kim, J
   Moon, S
   Song, Y
   Hur, CK
AF Lee, Dongjae
   Cho, Minki
   Kim, Jinwoo
   Moon, Soonwon
   Song, Youngju
   Hur, Chung-Kil
TI Fair Operational Semantics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Fairness; Fair Operational Semantics; Fairness Logic
ID CONCURRENT; LOGIC
AB Fairness properties, which state that a sequence of bad events cannot happen infinitely before a good event takes place, are often crucial in program verification. However, general methods for expressing and reasoning about various kinds of fairness properties are relatively underdeveloped compared to those for safety properties.
   This paper proposes FOS (Fair Operational Semantics), a theory capable of expressing arbitrary notions of fairness as an operational semantics and reasoning about these notions of fairness. In addition, FOS enables thread-local reasoning about fairness by providing thread-local simulation relations equipped with separation-logic-style resource algebras. We verify a ticket lock implementation and a client of the ticket lock under weak memory concurrency as an example, which requires reasoning about different notions of fairness including fairness of a scheduler, fairness of the ticket lock implementation, and even fairness of weak memory. The theory of FOS, as well as the examples in the paper, are fully formalized in Coq.
C1 [Lee, Dongjae; Cho, Minki; Kim, Jinwoo; Hur, Chung-Kil] Seoul Natl Univ, Seoul, South Korea.
   [Moon, Soonwon] Inha Univ, Incheon, South Korea.
   [Song, Youngju] MPI SWS, Saarbrucken, Germany.
C3 Seoul National University (SNU); Inha University
RP Lee, D (corresponding author), Seoul Natl Univ, Seoul, South Korea.
EM dongjae.lee@sf.snu.ac.kr; minki.cho@sf.snu.ac.kr;
   jinwoo.kim@sf.snu.ac.kr; damhiya@inha.edu; youngju@mpi-sws.org;
   gil.hur@sf.snu.ac.kr
OI Lee, Dongjae/0000-0003-2576-1220; Hur, Chung-Kil/0000-0002-1656-0913;
   Cho, Minki/0000-0002-6684-0921; Song, Youngju/0000-0001-7093-3824
FU Samsung Research Funding Center of Samsung Electronics [SRFC-IT2102-03]
FX Supported by Samsung Research Funding Center of Samsung Electronics
   under Project Number SRFC-IT2102-03. Chung-Kil Hur is the corresponding
   author. We thank Sung-Hwan Lee and Ori Lahav for feedback and initial
   discussions on this paper.
CR Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7711063
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Brookes S, 2007, THEOR COMPUT SCI, V375, P227, DOI 10.1016/j.tcs.2006.12.034
   Cho M, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P213, DOI 10.1145/3519939.3523718
   COURTOIS PJ, 1971, COMMUN ACM, V14, P667, DOI 10.1145/362759.362813
   D'Osualdo E, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3477082
   Gäher L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498689
   Gotsman A, 2011, LECT NOTES COMPUT SC, V6756, P453, DOI 10.1007/978-3-642-22012-8_36
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Herlihy M, 2011, LECT NOTES COMPUT SC, V7109, P313, DOI 10.1007/978-3-642-25873-2_22
   Hessenberg G., 1906, Grundbegriffe der Mengenlehre, Vi
   Hongjin Liang, 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P227, DOI 10.1007/978-3-642-40184-8_17
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Kesten Y, 1998, LECT NOTES COMPUT SC, V1443, P1, DOI 10.1007/BFb0055036
   Lahav O, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485475
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   LAMPORT L, 1977, IEEE T SOFTWARE ENG, V3, P125, DOI 10.1109/TSE.1977.229904
   Lee SH, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P362, DOI 10.1145/3385412.3386010
   Lehmann D., 1981, Automata, Languages and Programming. Eighth Colloquium, P264
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Liang HJ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158108
   Liang HJ, 2016, ACM SIGPLAN NOTICES, V51, P385, DOI 10.1145/2914770.2837635
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   OWICKI S, 1982, ACM T PROGR LANG SYS, V4, P455, DOI 10.1145/357172.357178
   Pinto PD, 2016, LECT NOTES COMPUT SC, V9632, P176, DOI 10.1007/978-3-662-49498-1_8
   Song Y, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571232
   Tassarotti J, 2017, LECT NOTES COMPUT SC, V10201, P909, DOI 10.1007/978-3-662-54434-1_34
   The Coq Development Team, 2021, The Coq Proof Assistant 8.13.2 Reference Manual
   Timany A, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P91, DOI 10.1145/3437992.3439931
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
NR 32
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 139
DI 10.1145/3591253
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900035
OA gold
DA 2024-07-18
ER

PT J
AU Ma, WJ
   Yang, SY
   Tan, T
   Ma, XX
   Xu, C
   Li, Y
AF Ma, Wenjie
   Yang, Shengyuan
   Tan, Tian
   Ma, Xiaoxing
   Xu, Chang
   Li, Yue
TI Context Sensitivity without Contexts
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Pointer Analysis; Alias Analysis; Context Sensitivity; Java
ID POINTS-TO ANALYSIS
AB Over the past decades, context sensitivity has been considered as one of the most effective ideas for improving the precision of pointer analysis for Java. Different from the extremely fast context-insensitivity approach, context sensitivity requires every program method to be analyzed under different contexts for separating the static abstractions of different dynamic instantiations of the method's variables and heap objects, and thus reducing spurious object flows introduced by method calls. However, despite great precision benefits, as each method is equivalently cloned and analyzed under each context, context sensitivity brings heavy efficiency costs. Recently, numerous selective context-sensitive approaches have been put forth for scaling pointer analysis to large and complex Java programs by applying contexts only to the selected methods while analyzing the remaining ones context-insensitively; however, because the selective approaches do not fundamentally alter the primary methodology of context sensitivity (and do not thus remove its efficiency bottleneck), they produce much improved but still limited results.
   In this work, we present a fundamentally different approach called Cut-Shortcut for fast and precise pointer analysis for Java. Its insight is simple: the main effect of cloning methods under different contexts is to filter spurious object flows that have been merged inside a callee method; from the view of a typical pointer flow graph (PFG), such effect can be simulated by cutting off (Cut) the edges that introduce precision loss to certain pointers and adding Shortcut edges directly from source pointers to the target ones circumventing the method on PFG. As a result, we can achieve the effect of context sensitivity without contexts. We identify three general program patterns and develop algorithms based on them to safely cut off and add shortcut edges on PFG, formalize them and formally prove the soundness. To comprehensively validate Cut-Shortcut's effectiveness, we implement two versions of Cut-Shortcut for two state-of-the-art pointer analysis frameworks for Java, one in Datalog for the declarative Doop and the other in Java for the imperative Tai-e, and we consider all the large and complex programs used in recent literatures that meet the experimental requirements. The evaluation results are extremely promising: Cut-Shortcut is even able to run faster than context insensitivity for most evaluated programs while obtaining high precision that is comparable to context sensitivity (if scalable) in both frameworks. This is for the first time that we have been able to achieve such a good efficiency and precision trade-off for those hard-to-analyze programs, and we hope Cut-Shortcut could offer new perspectives for developing more effective pointer analysis for Java in the future.
C1 [Ma, Wenjie; Yang, Shengyuan; Tan, Tian; Ma, Xiaoxing; Xu, Chang; Li, Yue] Nanjing Univ, State Key Lab Novel Software Technol, Nanjing, Peoples R China.
C3 Nanjing University
RP Ma, WJ (corresponding author), Nanjing Univ, State Key Lab Novel Software Technol, Nanjing, Peoples R China.
EM 191250103@smail.nju.edu.cn; mf21320184@smail.nju.edu.cn;
   tiantan@nju.edu.cn; xxm@nju.edu.cn; changxu@nju.edu.cn; yueli@nju.edu.cn
OI Tan, Tian/0009-0009-3792-1237; Xu, Chang/0000-0002-6299-4704; Li,
   Yue/0009-0009-1285-2298
FU Natural Science Foundation of China [62025202, 62002157, 61932021];
   Leading-edge Technology Program of Jiangsu Natural Science Foundation
   [BK20202001]; Collaborative Innovation Center of Novel Software
   Technology and Industrialization, Jiangsu, China
FX We thank our shepherd Alexey Loginov and anonymous reviewers for their
   helpful comments. This work was supported by the Natural Science
   Foundation of China under Grant Nos. 62025202, 62002157 and 61932021,
   and the Leading-edge Technology Program of Jiangsu Natural Science
   Foundation under Grant No. BK20202001. The authors would also like to
   thank the support from the Collaborative Innovation Center of Novel
   Software Technology and Industrialization, Jiangsu, China.
CR Andersen L. O., 1994, Ph.D. thesis
   Antoniadis A, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P794, DOI 10.1145/3385412.3386026
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Blanchet B, 2003, ACM SIGPLAN NOTICES, V38, P196, DOI 10.1145/780822.781153
   Bravenboer M, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P243
   Cai YD, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1126, DOI 10.1145/3453483.3454099
   Chandra S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P363, DOI 10.1145/1542476.1542517
   Chen YF, 2021, LECT NOTES COMPUT SC, V12913, P77, DOI 10.1007/978-3-030-88806-0_4
   De A, 2012, LECT NOTES COMPUT SC, V7313, P665, DOI 10.1007/978-3-642-31057-7_29
   DOOP, 2022, FRAM JAV POINT TAINT
   Fegade P, 2020, PROCEEDINGS OF THE 29TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '20), P39, DOI 10.1145/3377555.3377885
   Fink SJ, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348255
   Grech N, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133926
   Hassanshahi B., 2017, P 6 ACM SIGPLAN INT, P13
   He DJ, 2023, IEEE T SOFTWARE ENG, V49, P719, DOI 10.1109/TSE.2022.3162236
   He Dongjie, 35 EUR C OBJ OR PROG, V194, DOI [10.4230/LIPIcs.ECOOP.2021.16, DOI 10.4230/LIPICS.ECOOP.2021.16]
   Heo K, 2017, SOFTWARE PRACT EXPER, V47, P1677, DOI 10.1002/spe.2493
   Huang W., 2015, P 2015 INT S SOFTWAR, P106, DOI 10.1145/2771783.2771803
   Jeon M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498720
   Jeon M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276510
   Jeon M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428247
   Jeon M, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3293607
   Jeong S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133924
   Kanvar V, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2931098
   Kastrinis George., 2013, ACM SIGPLAN NOTICES, V48, P423, DOI [DOI 10.1145/2499370.2462191, 10.1145/2491956.2462191, DOI 10.1145/2491956.2462191]
   Lhoták O, 2006, LECT NOTES COMPUT SC, V3923, P47
   Li YB, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3492428
   Li YB, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P780, DOI 10.1145/3385412.3386021
   Li Y, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276511
   Li Y, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3381915
   Li Y, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P129, DOI 10.1145/3236024.3236041
   Li Yue, 2016, LIPICS, V15, P1, DOI [10.4230/LIPIcs.ECOOP.2016.15, DOI 10.4230/LIPICS.ECOOP.2016.15]
   Lu JB, 2021, ACM T SOFTW ENG METH, V30, DOI 10.1145/3450492
   Lu JB, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360574
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Milanova A., 2002, Software Engineering Notes, V27, P1, DOI 10.1145/566171.566174
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Oh H, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2821504
   Oh H, 2014, ACM SIGPLAN NOTICES, V49, P475, DOI [10.1145/2594291.2594318, 10.1145/2666356.2594318]
   Pradel M, 2012, PROC INT CONF SOFTW, P925, DOI 10.1109/ICSE.2012.6227127
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Rival X, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275501
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Shivers O. G., 1991, THESIS CARNEGIE MELL
   Shiyi WeiB.G. R., 2015, 29 EUROPEAN C OBJECT, P712
   Smaragdakis Y., 2015, FDN TRENDS PROGRAM L, V2, P1, DOI DOI 10.1561/2500000014
   Smaragdakis Y, 2014, ACM SIGPLAN NOTICES, V49, P485, DOI [10.1145/2666356.2594320, 10.1145/2594291.2594320]
   Smaragdakis Y, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P17, DOI 10.1145/1926385.1926390
   Spath Johannes, 2016, 30 EUR C OBJ OR PROG, V22, P1, DOI [10.4230/LIPIcs.ECOOP.2016.22, DOI 10.4230/LIPICS.ECOOP.2016.22]
   Sridharan Manu, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P196, DOI 10.1007/978-3-642-36946-9_8
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Sridharan M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P112, DOI 10.1145/1250734.1250748
   Tai-e, 2022, TAI E DEV FRIENDL ST
   Tan T, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485524
   Tan T, 2016, LECT NOTES COMPUT SC, V9837, P489, DOI 10.1007/978-3-662-53413-7_24
   Thakur M, 2020, PROCEEDINGS OF THE 29TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '20), P27, DOI 10.1145/3377555.3377902
   Thakur M, 2019, PROCEEDINGS OF THE 28TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '19), P135, DOI 10.1145/3302516.3307359
   Tonella Paolo, 2005, REVERSE ENG OBJECT O, DOI [10.1007/b102522, DOI 10.1007/B102522]
   WALA, 2006, WATS LIB AN
   Zhang QR, 2013, ACM SIGPLAN NOTICES, V48, P435, DOI 10.1145/2499370.2462159
   Zhang X, 2014, ACM SIGPLAN NOTICES, V49, P249, DOI [10.1145/2666356.2594328, 10.1145/2594291.2594328]
NR 62
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 128
DI 10.1145/3591242
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900024
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Zilberstein, N
   Dreyer, D
   Silva, A
AF Zilberstein, Noam
   Dreyer, Derek
   Silva, Alexandra
TI Outcome Logic: A Unifying Foundation for Correctness and Incorrectness
   Reasoning
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Logics; Hoare Logic; Incorrectness Reasoning
AB Program logics for bug-similar to nding (such as the recently introduced Incorrectness Logic) have framed correctness and incorrectness as dual concepts requiring di similar to erent logical foundations. In this paper, we argue that a single uni similar to ed theory can be used for both correctness and incorrectness reasoning. We present Outcome Logic (OL), a novel generalization of Hoare Logic that is both monadic (to capture computational e similar to ects) and monoidal (to reason about outcomes and reachability). OL expresses true positive bugs, while retaining correctness reasoning abilities as well. To formalize the applicability of OL to both correctness and incorrectness, we prove that any false OL speci similar to cation can be disproven in OL itself. We also use our framework to reason about new types of incorrectness in nondeterministic and probabilistic programs. Given these advances, we advocate for OL as a new foundational theory of correctness and incorrectness.
C1 [Zilberstein, Noam; Silva, Alexandra] Cornell Univ, Ithaca, NY 14853 USA.
   [Dreyer, Derek] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
C3 Cornell University
RP Zilberstein, N (corresponding author), Cornell Univ, Ithaca, NY 14853 USA.
EM noamz@cs.cornell.edu; dreyer@mpi-sws.org; alexandra.silva@cornell.edu
OI Zilberstein, Noam/0000-0001-6388-063X; Dreyer, Derek/0000-0002-3884-6867
FU Defense Advanced Research Projects Agency [HR001120C0107]
FX We thank Peter O'Hearn, Josh Berdine, Azalea Raad, Jules Villard, Quang
   Loc Le, and Julien Vanegue for their helpful feedback. This work has
   been supported in part by the Defense Advanced Research Projects Agency
   under Contract HR001120C0107.
CR [Anonymous], 1991, FDN COMPUTING SERIES
   APT KR, 1981, ACM T PROGR LANG SYS, V3, P431, DOI 10.1145/357146.357150
   Ascari F, 2022, LECT NOTES COMPUT SC, V13242, P21, DOI 10.1007/978-3-030-99253-8_2
   Barthe Gilles, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P117, DOI 10.1007/978-3-319-89884-1_5
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371123
   Batz K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290347
   Bruni R, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470608
   Bruni Roberto, 2023, J ACM, DOI [10.1145/3582267JustAccepted, DOI 10.1145/3582267JUSTACCEPTED]
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Calcagno C, 2011, J ACM, V58, DOI 10.1145/2049697.2049700
   Calcagno C, 2009, ACM SIGPLAN NOTICES, V44, P289, DOI 10.1145/1594834.1480917
   Dardinier T, 2024, Arxiv, DOI [arXiv:2301.10037, 10.48550/ARXIV.2301.10037, DOI 10.48550/ARXIV.2301.10037]
   de Vries E, 2011, LECT NOTES COMPUT SC, V7041, P155, DOI 10.1007/978-3-642-24690-6_12
   den Hartog Jerry, 2002, THESIS VRIJE U AMSTE
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Docherty Simon, 2019, Bunched Logics: A Uniform Approach
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   HOARE CAR, 1978, J ACM, V25, P461, DOI 10.1145/322077.322088
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kaminski Benjamin Lucien, 2019, DISSERTATION, DOI [10.18154/RWTH-2019-01829Vero~entlichtaufdemPublikationsserverderRWTHAachenUniversity, DOI 10.18154/RWTH-2019-01829VERO~ENTLICHTAUFDEMPUBLIKATIONSSERVERDERRWTHAACHENUNIVERSITY]
   Kearns M. J., 1994, An Introduction to Computational Learning Theory
   Kozen D., 1979, 20th Annual Symposium of Foundations of Computer Science, P101, DOI 10.1109/SFCS.1979.38
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Kozen Dexter, 1983, P ACM S THEORY COMPU, P291, DOI [10.1145/800061.808758, DOI 10.1145/800061.808758]
   Lüth C, 2002, ACM SIGPLAN NOTICES, V37, P133, DOI 10.1145/583852.581492
   Maksimovic P, 2023, Arxiv, DOI [arXiv:2208.07200, DOI 10.48550/ARXIV.2208.07200]
   Möller B, 2021, LECT NOTES COMPUT SC, V13027, P325, DOI 10.1007/978-3-030-88701-8_20
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371078
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   Le QL, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527325
   Raad A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498695
   Raad A, 2020, LECT NOTES COMPUT SC, V12225, P225, DOI 10.1007/978-3-030-53291-8_14
   Rand R, 2015, ELECTRON NOTES THEOR, V319, P351, DOI 10.1016/j.entcs.2015.12.021
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sheng Liang, 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P333, DOI 10.1145/199448.199528
   Tassarotti J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290377
   Yang Hongseok, 2001, THESIS US, DOI [10.5555/933728, DOI 10.5555/933728]
   Zhang C, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498690
   Zhang LP, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527331
   Zilberstein N, 2023, Arxiv, DOI [arXiv:2303.03111, 10.48550/arXiv.2303.03111, DOI 10.48550/ARXIV.2303.03111]
NR 46
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586045
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600020
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Cambronero, J
   Gulwani, S
   Le, V
   Perelman, D
   Radhakrishna, A
   Simon, C
   Tiwari, A
AF Cambronero, Jose
   Gulwani, Sumit
   Le, Vu
   Perelman, Daniel
   Radhakrishna, Arjun
   Simon, Clint
   Tiwari, Ashish
TI FlashFill<SUP>++</SUP>: Scaling Programming by Example by Cutting to the
   Chase
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE programming by example; domain-specific languages; string
   transformations
AB Programming-by-Examples (PBE) involves synthesizing an intended program from a small set of user-provided input-output examples. A key PBE strategy has been to restrict the search to a carefully designed small domain-specific language (DSL) with effectively-invertible (EI) operators at the top and effectively-enumerable (EE) operators at the bottom. This facilitates an effective combination of top-down synthesis strategy (which backpropagates outputs over various paths in the DSL using inverse functions) with a bottom-up synthesis strategy (which propagates inputs over various paths in the DSL). We address the problem of scaling synthesis to large DSLs with several non-EI/EE operators. This is motivated by the need to support a richer class of transformations and the need for readable code generation. We propose a novel solution strategy that relies on propagating fewer values and over fewer paths.
   Our first key idea is that of cut functions that prune the set of values being propagated by using knowledge of the sub-DSL on the other side. Cuts can be designed to preserve completeness of synthesis; however, DSL designers may use incomplete cuts to have finer control over the kind of programs synthesized. In either case, cuts make search feasible for non-EI/EE operators and effcient for deep DSLs. Our second key idea is that of guarded DSLs that allow a precedence on DSL operators, which dynamically controls exploration of various paths in the DSL. This makes search efficient over grammars with large fanouts without losing recall. It also makes ranking simpler yet more effective in learning an intended program from very few examples. Both cuts and precedence provide a mechanism to the DSL designer to restrict search to a reasonable, and possibly incomplete, space of programs.
   Using cuts and gDSLs, we have built FlashFill(++), an industrial-strength PBE engine for performing rich string transformations, including datetime and number manipulations. The FlashFill(++) gDSL is designed to enable readable code generation in different target languages including Excel's formula language, PowerFx, and Python. We show FlashFill(++) is more expressive, more performant, and generates better quality code than comparable existing PBE systems. FlashFill(++) is being deployed in several mass-market products ranging from spreadsheet software to notebooks and business intelligence applications, each with millions of users.
C1 [Cambronero, Jose; Gulwani, Sumit; Le, Vu; Perelman, Daniel; Radhakrishna, Arjun; Simon, Clint; Tiwari, Ashish] Microsoft, Redmond, WA 98052 USA.
C3 Microsoft
RP Cambronero, J (corresponding author), Microsoft, Redmond, WA 98052 USA.
EM jcambronero@microsoft.com; sumitg@microsoft.com; levu@microsoft.com;
   danpere@microsoft.com; arradha@microsoft.com; clint.simon@microsoft.com;
   astiwar@microsoft.com
OI Perelman, Daniel/0000-0002-0157-5506; Radhakrishna,
   Arjun/0000-0002-5559-5932; Gulwani, Sumit/0000-0002-9226-9634; Le,
   Vu/0000-0003-3727-3291
CR AASA A, 1995, THEOR COMPUT SCI, V142, P3, DOI 10.1016/0304-3975(95)90680-J
   Ahmad MB, 2018, INT CONF MANAGE DATA, P1205, DOI 10.1145/3183713.3196891
   AHO AV, 1975, COMMUN ACM, V18, P441, DOI 10.1145/360933.360969
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 2022, selenium
   Bardin Sebastien, 2008, International Journal on Software Tools for Technology Transfer, V10, P401, DOI 10.1007/s10009-008-0064-3
   Bechet D, 1997, LECT NOTES COMPUT SC, V1232, P230
   Boigelot B, 2003, THEOR COMPUT SCI, V309, P413, DOI 10.1016/S0304-3975(03)00314-1
   Chaudhuri S, 2021, FOUND TRENDS PROGRAM, V7, P158, DOI 10.1561/2500000049
   Chen Mark, 2021, arXiv, DOI DOI 10.48550/ARXIV.2107.03374
   Chen Xinyun, 2021, INT C MACHINE LEARNI, P1661
   Cropper A, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P6074
   Dershowitz Nachum, 1990, Handbook of Theoretical Computer Science, Volume B: Formal Models and Semantics, P243, DOI 10.1016/b978-0-444-88074-1.50011-1
   Devlin Jacob, 2017, ADV NEURAL INFORM PR, P2080
   Drosos I, 2020, PROCEEDINGS OF THE 2020 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'20)
   Earley J., 1975, Acta Informatica, V4, P183, DOI 10.1007/BF00288747
   Farzan A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P974, DOI 10.1145/3453483.3454089
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Finkel A., 1987, Automata, Languages and Programming. 14th International Colloquium Proceedings, P499
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Gao TY, 2021, 59TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS AND THE 11TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING (ACL-IJCNLP 2021), VOL 1, P3816
   Google, 2021, SPREADSHEETCODER
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gulwani S, 2016, NATO SCI PEAC SECUR, V45, P137, DOI 10.3233/978-1-61499-627-9-137
   Gulwani S, 2012, COMMUN ACM, V55, P97, DOI 10.1145/2240236.2240260
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P50, DOI 10.1145/1993316.1993505
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Guo Z, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371080
   HEERING J, 1989, SIGPLAN NOTICES, V24, P43, DOI 10.1145/71605.71607
   Huang KJ, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1159, DOI 10.1145/3385412.3386027
   Jeannet B, 2014, ACM SIGPLAN NOTICES, V49, P529, DOI 10.1145/2535838.2535843
   Kalyan Ashwin, 2018, 6 INT C LEARNING REP
   Karp R. M., 1969, J COMPUT SYST SCI, V3, P147, DOI DOI 10.1016/S0022-0000(69)80011-5
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Lee W, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434335
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   Liang P., 2010, P 27 INT C INT C MAC, P639
   Lukes D, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P651, DOI 10.1145/3468264.3468533
   Menon Aditya Krishna, 2013, INT C MACHINE LEARNI, P187
   Microsoft PROSE, 2022, PROSE PUBL BENCHM
   Miltner A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158089
   Natarajan N, 2019, AIStats
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Pan R, 2021, PROC INT CONF SOFTW, P785, DOI 10.1109/ICSE43902.2021.00077
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   PowerFx, 2021, POWERFX LOW COD PROG
   Rahmani K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485535
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Shrestha N, 2018, 2018 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING (VL/HCC), P177, DOI 10.1109/VLHCC.2018.8506508
   Singh R, 2015, LECT NOTES COMPUT SC, V9206, P398, DOI 10.1007/978-3-319-21690-4_23
   Smith Calvin, 2019, VMCAI
   Udupa A, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2499370.2462174
   van den Brand MGJ, 2002, LECT NOTES COMPUT SC, V2304, P143
   Verbruggen G, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485477
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
   Wang YP, 2020, PROC VLDB ENDOW, V13, P1006, DOI 10.14778/3384345.3384350
   Zhang T., 2020, P 33 ANN ACM S US IN, P627
   Zhang Tianyi, 2021, INTERPRETABLE PROGRA, DOI [10.1145/3411764.3445646, DOI 10.1145/3411764.3445646]
NR 61
TC 6
Z9 6
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571226
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500033
OA gold
DA 2024-07-18
ER

PT J
AU Kincaid, Z
   Koh, N
   Zhu, SW
AF Kincaid, Zachary
   Koh, Nicolas
   Zhu, Shaowei
TI When Less Is More: Consequence-Finding in aWeak Theory of Arithmetic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Decision procedures; theory of arithmetic; convex polyhedra; polynomial
   ideals; program analysis; nonlinear invariant generation
ID INVARIANTS; GENERATION; SEMANTICS
AB This paper presents a theory of non-linear integer/real arithmetic and algorithms for reasoning about this theory. The theory can be conceived of as an extension of linear integer/real arithmetic with a weaklyaxiomatized multiplication symbol, which retains many of the desirable algorithmic properties of linear arithmetic. In particular, we show that the conjunctive fragment of the theory can be effectively manipulated (analogously to the usual operations on convex polyhedra, the conjunctive fragment of linear arithmetic). As a result, we can solve the following consequence-finding problem: given a ground formula F, find the strongest conjunctive formula that is entailed by F. As an application of consequence-finding, we give a loop invariant generation algorithm that is monotone with respect to the theory and (in a sense) complete. Experiments show that the invariants generated from the consequences are effective for proving safety properties of programs that require non-linear reasoning.
C1 [Kincaid, Zachary; Koh, Nicolas; Zhu, Shaowei] Princeton Univ, Princeton, NJ 08544 USA.
C3 Princeton University
RP Kincaid, Z (corresponding author), Princeton Univ, Princeton, NJ 08544 USA.
EM zkincaid@cs.princeton.edu; ckoh@cs.princeton.edu;
   shaoweiz@cs.princeton.edu
OI Kincaid, Zachary/0000-0002-7294-9165
FU NSF [1942537]; ONR [N00014-19-1-2318]; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1942537] Funding Source: National Science Foundation
FX This work was supported in part by the NSF under grant number 1942537
   and by ONR under grant N00014-19-1-2318. Opinions, findings,
   conclusions, or recommendations expressed herein are those of the
   authors and do not necessarily reflect the views of the sponsoring
   agencies.
CR Ancourt C, 2010, ELECTRON NOTES THEOR, V267, P3, DOI 10.1016/j.entcs.2010.09.002
   [Anonymous], 1951, DECISION METHOD ELEM
   [Anonymous], 2006, USING ALGEBRAIC GEOM, DOI DOI 10.1007/B138611
   Bagnara R, 2005, LECT NOTES COMPUT SC, V3672, P19
   Barbosa Haniel, 2022, SMT COMP 2021
   Benoy F, 2005, THEOR PRACT LOG PROG, V5, P259, DOI 10.1017/S1471068404002261
   Berdine J, 2014, LECT NOTES ARTIF INT, V8562, P168, DOI 10.1007/978-3-319-08587-6_12
   Beyer D, 2022, LECT NOTES COMPUT SC, V13244, P375, DOI 10.1007/978-3-030-99527-0_20
   Bjorner N., 2015, TOOLS ALGORITHMS CON, P194
   Borralleras C, 2019, ACM T COMPUT LOG, V20, DOI 10.1145/3340923
   Borralleras C, 2009, LECT NOTES ARTIF INT, V5663, P294, DOI 10.1007/978-3-642-02959-2_23
   Bruns W, 2010, J ALGEBRA, V324, P1098, DOI 10.1016/j.jalgebra.2010.01.031
   Buchberger B., 1976, SIGSAM Bull., V10, P19, DOI [DOI 10.1145/1088216.1088219.487, 10.1145/ 1088216.1088219, DOI 10.1145/1088216.1088219]
   Chatterjee K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P672, DOI 10.1145/3385412.3385969
   Chvatal V., 1973, Discrete Mathematics, V4, P305, DOI 10.1016/0012-365X(73)90167-2
   Collins G. E., 1975, Automata Theory and Formal Language 2nd GI Conference, P134
   Colón MA, 2004, LECT NOTES COMPUT SC, V3148, P296
   Colón MA, 2003, LECT NOTES COMPUT SC, V2725, P420
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Cyphert J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290358
   Darke Priyanka, 2021, Tools and Algorithms for the Construction and Analysis of Systems. 27th International Conference, TACAS 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12652), P458, DOI 10.1007/978-3-030-72013-1_32
   Darke P, 2015, DES AUT TEST EUROPE, P1407
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Oliveira S, 2016, LECT NOTES COMPUT SC, V9938, P479, DOI 10.1007/978-3-319-46520-3_30
   Farzan A, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P57, DOI 10.1109/FMCAD.2015.7542253
   Feautrier P., 1996, Data Parallel Programming Model. Foundations, HPF Realization, and Scientific Applications, P79
   Fuhs C, 2007, LECT NOTES COMPUT SC, V4501, P340
   Ganzinger H, 2004, LECT NOTES COMPUT SC, V3114, P175, DOI 10.1007/978-3-540-27813-9_14
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Gulavani LS, 2008, LECT NOTES COMPUT SC, V5123, P370
   Hart William, 2021, FLINT FAST LIB NUMBE
   Hawblitzel C., 2014, 11 USENIX S OPERATIN
   Heizmann M, 2009, LECT NOTES COMPUT SC, V5673, P69, DOI 10.1007/978-3-642-03237-0_7
   Hrushovski E, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P530, DOI 10.1145/3209108.3209142
   Humenberger A, 2018, LECT NOTES COMPUT SC, V10747, P226, DOI 10.1007/978-3-319-73721-8_11
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   Jovanovic D., 2013, ACM Communications in Computer Algebra, V46, P104
   Jovanovic D, 2017, LECT NOTES COMPUT SC, V10145, P330, DOI 10.1007/978-3-319-52234-0_18
   Kincaid Z, 2021, LECT NOTES COMPUT SC, V12759, P46, DOI 10.1007/978-3-030-81685-8_3
   Kincaid Z, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158142
   Kincaid Zachary, 2022, ARXIV, DOI [10.48550/ARXIV.2211.04000, DOI 10.48550/ARXIV.2211.04000]
   Kincaid Zachary, 2022, ARTIFACT ARTICLE LES, DOI [10.5281/zenodo.7321183, DOI 10.5281/ZENODO.7321183]
   Kovács L, 2008, LECT NOTES COMPUT SC, V4963, P249, DOI 10.1007/978-3-540-78800-3_18
   Kremer G, 2020, J SYMB COMPUT, V100, P11, DOI 10.1016/j.jsc.2019.07.018
   Kremer G, 2016, LECT NOTES COMPUT SC, V9890, P315, DOI 10.1007/978-3-319-45641-6_21
   Krivine J.-L., 1964, J ANAL MATH, V12, P307
   Lengauer C., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P398
   Li Y, 2014, ACM SIGPLAN NOTICES, V49, P607, DOI 10.1145/2535838.2535857
   Marshall Murray, 2008, Math. Surveys and Monographs
   Müller-Olm M, 2004, ACM SIGPLAN NOTICES, V39, P330, DOI 10.1145/982962.964029
   Nelson G., 1979, ACM Transactions on Programming Languages and Systems, V1, P245, DOI 10.1145/357073.357079
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   PUTINAR M, 1993, INDIANA U MATH J, V42, P969, DOI 10.1512/iumj.1993.42.42045
   Reps T, 2004, LECT NOTES COMPUT SC, V2937, P252
   Rodriguez-Carbonell E, 2004, P ISSAC, P266, DOI DOI 10.1145/1005285.1005324
   Schrijver A., 1980, Combinatorica, V79, P291
   Schrijver Alexander, 1999, THEORY LINEAR INTEGE
   Sebastiani Roberto, 2012, Automated Reasoning. Proceedings 6th International Joint Conference, IJCAR 2012, P484, DOI 10.1007/978-3-642-31365-3_38
   SEIDENBERG A, 1954, ANN MATH, V60, P365, DOI 10.2307/1969640
   Sicun Gao, 2012, Automated Reasoning. Proceedings 6th International Joint Conference, IJCAR 2012, P286, DOI 10.1007/978-3-642-31365-3_23
   Thakur A, 2015, ELECTRON NOTES THEOR, V311, P15, DOI 10.1016/j.entcs.2015.02.003
   Thakur Aditya V., 2014, THESIS U WISCONSIN M
   Tinelli C, 2003, J AUTOM REASONING, V30, P1, DOI 10.1023/A:1022587501759
   Tiwari A, 2005, LECT NOTES COMPUT SC, V3634, P248, DOI 10.1007/11538363_18
   Tiwari A, 2014, LECT NOTES COMPUT SC, V8559, P729, DOI 10.1007/978-3-319-08867-9_48
   VANEMDEN MH, 1976, J ACM, V23, P733, DOI 10.1145/321978.321991
   Wendler Philipp, 2022, Zenodo, DOI 10.5281/ZENODO.6024083
   Zankl H, 2010, LECT NOTES ARTIF INT, V6355, P481, DOI 10.1007/978-3-642-17511-4_27
   Zhu SW, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1296, DOI 10.1145/3453483.3454110
NR 69
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571237
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500044
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Boruch-Gruszecki, A
   Wasko, R
   Xu, YC
   Parreaux, L
AF Boruch-Gruszecki, Aleksander
   Wasko, Radoslaw
   Xu, Yichen
   Parreaux, Lionel
TI A case for DOT: Theoretical Foundations for Objects with Pattern
   Matching and GADT-Style Reasoning
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE DOT; pattern matching; GADT; classes; type systems
AB Many programming languages in the OO tradition now support pattern matching in some form. Historical examples include Scala and Ceylon, with the more recent additions of Java, Kotlin, TypeScript, and Flow. But pattern matching on generic class hierarchies currently results in puzzling type errors in most of these languages. Yet this combination of features occurs naturally in many scenarios, such as when manipulating typed ASTs. To support it properly, compilers needs to implement a form of subtyping reconstruction: the ability to reconstruct subtyping information uncovered at runtime during pattern matching. We introduce cDOT, a new calculus in the family of Dependent Object Types (DOT) intended to serve as a formal foundation for subtyping reconstruction. Being descended from pDOT, itself a formal foundation for Scala, cDOT can be used to encode advanced object-oriented features such as generic inheritance, type constructor variance, F-bounded polymorphism, and first-class recursive modules. We demonstrate that subtyping reconstruction subsumes GADTs by encoding lambda(2,G mu), a classical constraint-based GADT calculus, into cDOT.
C1 [Boruch-Gruszecki, Aleksander] Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
   [Wasko, Radoslaw] Univ Warsaw, Warsaw, Poland.
   [Xu, Yichen] Beijing Univ Posts & Telecommun, Beijing, Peoples R China.
   [Parreaux, Lionel] HKUST, Hong Kong, Peoples R China.
C3 Swiss Federal Institutes of Technology Domain; Ecole Polytechnique
   Federale de Lausanne; University of Warsaw; Beijing University of Posts
   & Telecommunications; Hong Kong University of Science & Technology
RP Boruch-Gruszecki, A (corresponding author), Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
EM aleksander.boruch-gruszecki@epfl.ch; wasko.radek@gmail.com;
   yichen.xu@epfl.ch; parreaux@ust.hk
OI Xu, Yichen/0000-0003-2089-6767; Parreaux, Lionel/0000-0002-8805-0728;
   Boruch-Gruszecki, Aleksander/0000-0001-5769-6684
CR Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   Amin N, 2014, ACM SIGPLAN NOTICES, V49, P233, DOI [10.1145/2660193.2660216, 10.1145/2714064.2660216]
   Boruch-Gruszecki A, 2022, Arxiv, DOI [arXiv:2209.07427, 10.48550/arXiv.2209.07427, DOI 10.48550/ARXIV.2209.07427]
   Boruch-Gruszecki Aleksander, 2022, Zenodo, DOI 10.5281/ZENODO.7079463
   Boruch-Gruszecki Aleksander, 2017, Master's thesis, P27
   Boszormenyi Laszlo, 2012, Programming in Modula-3: an introduction in programming with style, P26
   Bracha G, 1998, ACM SIGPLAN NOTICES, V33, P183, DOI 10.1145/286942.286957
   Canning Peter, 1989, C FUNCT PROGR LANG C, P273, DOI [10.1145/99370.99392, DOI 10.1145/99370.99392]
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   Eisenberg Richard A., 2020, Haskell '20. Proceedings of the 13th ACM SIGPLAN International Symposium on Haskell, P39, DOI 10.1145/3406088.3409015
   Emile Lionel, 2020, Ph. D. Dissertation, P7, DOI [10.5075/epfl-thesis-10285, DOI 10.5075/EPFL-THESIS-10285]
   Emir B, 2007, LECT NOTES COMPUT SC, V4609, P273
   Emir B, 2006, LECT NOTES COMPUT SC, V4067, P279
   Garrigue Jacques, 2011, WORKSH ML, P27
   Giarrusso PG, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408996
   Giarrusso Paolo G., 2013, P 4 WORKSH SCAL SCAL, V5, P1, DOI [10.1145/2489837.2489842, DOI 10.1145/2489837.2489842]
   Grigore R, 2017, ACM SIGPLAN NOTICES, V52, P73, DOI 10.1145/3093333.3009871
   Harper R., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P130, DOI 10.1145/199448.199475
   Hu JZS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371077
   Inria CNRS and contributors, 2021, Extended pattern matching D Coq 8.13.2 documentation, P20
   Jones SP, 2006, ACM SIGPLAN NOTICES, V41, P50
   Karachalias G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P424, DOI 10.1145/2784731.2784748
   Kennedy A, 2005, ACM SIGPLAN NOTICES, V40, P21, DOI 10.1145/1103845.1094814
   Kennedy Andrew, 2007, INT WORKSH FDN DEV O, P24
   Maranget L, 2008, ML'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN WORKSHOP ON ML, P35
   Martres Guillaume, 2022, Ph. D. Dissertation, P2
   Mitchell JohnC., 1984, Proceedings of the 11th ACM SIGACTSIGPLAN symposium on Principles of programming languages, P175, DOI [10.1145/800017.800529, DOI 10.1145/800017.800529]
   Nordstrom Bengt, 1990, Programming in Martin-Lof's Type Theory, V200, P27
   Parnin C, 2013, EMPIR SOFTW ENG, V18, P1047, DOI 10.1007/s10664-012-9236-6
   Parreaux L, 2019, SCALA'19: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P12, DOI 10.1145/3337932.3338813
   Petrucciani Tommaso, 2019, Ph. D. Dissertation, P26
   Rapoport M, 2019, Arxiv, DOI arXiv:1904.07298
   Rapoport M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133870
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Scherer G, 2013, LECT NOTES COMPUT SC, V7792, P554, DOI 10.1007/978-3-642-37036-6_30
   Stolarek J, 2015, ACM SIGPLAN NOTICES, V50, P118, DOI 10.1145/2804302.2804314
   Stump Aaron, 2009, Higher-Order and Symbolic Computation, V22, P115, DOI 10.1007/s10990-007-9022-0
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Trifonov Valery, 2000, P 5 ACM SIGPLAN INT, P27, DOI [10.1145/351240.351248, DOI 10.1145/351240.351248]
   Wasko Radoslaw, 2021, Master's thesis, P20
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xi HW, 2003, ACM SIGPLAN NOTICES, V38, P224, DOI 10.1145/640128.604150
   Xu Yichen, 2021, P 12 ACM SIGPLAN INT, P22, DOI [10.1145/3486610.3486892, DOI 10.1145/3486610.3486892]
   Yallop J, 2019, ELECTRON P THEOR COM, P74, DOI 10.4204/EPTCS.294.4
NR 45
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 179
DI 10.1145/3563342
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200056
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Lei, YX
   Sui, YL
   Ding, S
   Zhang, QR
AF Lei, Yuxiang
   Sui, Yulei
   Ding, Shuo
   Zhang, Qirun
TI Taming Transitive Redundancy for Context-Free Language Reachability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE CFL-reachability; transitive relation; redundancy; performance
ID EQUIVALENT GRAPH; ALGORITHM
AB Given an edge-labeled graph, context-free language reachability (CFL-reachability) computes reachable node pairs by deriving new edges and adding them to the graph. The redundancy that limits the scalability of CFL-reachability manifests as redundant derivations, i.e., identical edges can be derived multiple times due to the many paths between two reachable nodes. We observe that most redundancy arises from the derivations involving transitive relations of reachable node pairs. Unfortunately, existing techniques for reducing redundancy in transitive-closure-based problems are either ineffective or inapplicable to identifying and eliminating redundant derivations during on-the-fly CFL-reachability solving.
   This paper proposes a scalable yet precision-preserving approach to all-pairs CFL-reachability analysis by taming its transitive redundancy. Our key insight is that transitive relations are intrinsically ordered, and utilizing the order for edge derivation can avoid most redundancy. To address the challenges in determining the derivation order from the dynamically changed graph during CFL-reachability solving, we introduce a hybrid graph representation by combining spanning trees and adjacency lists, together with a dynamic construction algorithm. Based on this representation, we propose a fast and effective partially ordered algorithm Pocr to boost the performance of CFL-reachability analysis by reducing its transitive redundancy during on-the-fly solving. Our experiments on context-sensitive value-flow analysis and field-sensitive alias analysis for C/C++ demonstrate the promising performance of Pocr. On average, Pocr eliminates 98.50% and 97.26% redundant derivations respectively for the value-flow and alias analysis, achieving speedups of 21.48x and 19.57x over the standard CFL-reachability algorithm. We also compare Pocr with two recent open-source tools, Graspan (a CFL-reachability solver) and Souffle (a Datalog engine). The results demonstrate that Pocr is over 3.67x faster than Graspan and Souffle on average for both value-flow analysis and alias analysis.
C1 [Lei, Yuxiang; Sui, Yulei] Univ Technol Sydney, Sydney, Australia.
   [Ding, Shuo; Zhang, Qirun] Georgia Inst Technol, Atlanta, GA USA.
C3 University of Technology Sydney; University System of Georgia; Georgia
   Institute of Technology
RP Lei, YX (corresponding author), Univ Technol Sydney, Sydney, Australia.
EM Yuxiang.Lei@student.uts.edu.au; Yulei.Sui@uts.edu.au; sding@gatech.edu;
   qrzhang@gatech.edu
RI Sui, Yulei/AAL-5915-2020
OI Sui, Yulei/0000-0002-9510-6574; Lei, Yuxiang/0000-0002-4484-8172; Zhang,
   Qirun/0000-0001-5367-9377
FU Australian Research Grants [DP200101328, DP210101348]; Amazon under an
   Amazon Research Award in automated reasoning; by the United States
   National Science Foundation (NSF) [1917924, 2114627]; Defense Advanced
   Research Projects Agency (DARPA) [N66001-21-C-4024]
FX We would like to thank the anonymous reviewers for valuable feedback on
   earlier drafts of this paper, which helped improve its presentation. We
   thank Camille Bossut for helpful comments. This research is supported by
   Australian Research Grants DP200101328 and DP210101348; by Amazon under
   an Amazon Research Award in automated reasoning; by the United States
   National Science Foundation (NSF) under grants No. 1917924 and No.
   2114627; and by the Defense Advanced Research Projects Agency (DARPA)
   under grant N66001-21-C-4024. Any opinions, findings, and conclusions or
   recommendations expressed in this publication are those of the authors
   and do not necessarily reflect the views of the above sponsoring
   entities.
CR Aho A. V., 1972, SIAM Journal on Computing, V1, P131, DOI 10.1137/0201008
   Alur R, 2005, ACM T PROGR LANG SYS, V27, P786, DOI 10.1145/1075382.1075387
   Bravenboer M, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P243
   Chatterjee K, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158118
   Chaudhuri S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P159, DOI 10.1145/1328438.1328460
   Gauwin O, 2020, Arxiv, DOI [arXiv:1907.09563, 10.48550/arXiv.1907.09563, DOI 10.48550/ARXIV.1907.09563]
   Hardekopf B, 2007, ACM SIGPLAN NOTICES, V42, P290, DOI 10.1145/1273442.1250767
   Heizmann M, 2017, LECT NOTES COMPUT SC, V10205, P461, DOI 10.1007/978-3-662-54577-5_27
   HSU HT, 1975, J ACM, V22, P11, DOI 10.1145/321864.321866
   ITALIANO GF, 1986, THEOR COMPUT SCI, V48, P273, DOI 10.1016/0304-3975(86)90098-8
   Jordan H, 2016, LECT NOTES COMPUT SC, V9780, P422, DOI 10.1007/978-3-319-41540-6_23
   Jordan Herbert, 2016, Souffle
   Kodumal J, 2004, ACM SIGPLAN NOTICES, V39, P207, DOI 10.1145/996893.996867
   Lei Yuxiang, 2022, Zenodo, DOI 10.5281/ZENODO.7066401
   Lei YX, 2019, LECT NOTES COMPUT SC, V11822, P27, DOI 10.1007/978-3-030-32304-2_3
   Li YB, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P780, DOI 10.1145/3385412.3386021
   Melski D, 2000, THEOR COMPUT SCI, V248, P29, DOI 10.1016/S0304-3975(00)00049-9
   MOYLES DM, 1969, J ACM, V16, P455, DOI 10.1145/321526.321534
   Naeem NA, 2008, ACM SIGPLAN NOTICES, V43, P347, DOI 10.1145/1449955.1449792
   Nappa P, 2019, INT CONFER PARA, P82, DOI 10.1109/PACT.2019.00015
   NUUTILA E, 1994, INFORM PROCESS LETT, V49, P9, DOI 10.1016/0020-0190(94)90047-7
   Pereira FMQ, 2009, INT SYM CODE GENER, P126, DOI 10.1109/CGO.2009.9
   Rehof J, 2001, ACM SIGPLAN NOTICES, V36, P54, DOI 10.1145/373243.360208
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T., 1995, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics- Based Program Manipulation. PEPM'95, P1, DOI 10.1145/215465.215466
   Reps T, 2000, ACM T PROGR LANG SYS, V22, P162, DOI 10.1145/345099.345137
   Rountev A, 2000, ACM SIGPLAN NOTICES, V35, P47, DOI 10.1145/358438.349310
   Su Y, 2014, PROC INT CONF PARAL, P451, DOI 10.1109/ICPP.2014.54
   Su Z., 2000, Proceedings of the 27th ACM SIGPLAN-SIGACT symposium on Principles of programming languages (POPL), P81, DOI [10.1145/325694.325706, DOI 10.1145/325694.325706]
   Sui YL, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P265, DOI 10.1145/2892208.2892235
   Sui YL, 2014, IEEE T SOFTWARE ENG, V40, P107, DOI 10.1109/TSE.2014.2302311
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Wang HJ, 2020, PROC INT CONF SOFTW, P999, DOI 10.1145/3377811.3380386
   Wang K, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P389, DOI 10.1145/3037697.3037744
   Wang Kai, 2020, Graspan-cpp
   Xu GQ, 2009, LECT NOTES COMPUT SC, V5653, P98
   Yuan H, 2009, LECT NOTES COMPUT SC, V5502, P175
   Zhang QR, 2013, ACM SIGPLAN NOTICES, V48, P435, DOI 10.1145/2499370.2462159
   Zheng X, 2008, ACM SIGPLAN NOTICES, V43, P197, DOI 10.1145/1328897.1328464
NR 39
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 180
DI 10.1145/3563343
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200057
OA gold
DA 2024-07-18
ER

PT J
AU Sivaraman, A
   Sanchez-Stern, A
   Chen, B
   Lerner, S
   Millstein, T
AF Sivaraman, Aishwarya
   Sanchez-Stern, Alex
   Chen, Bretton
   Lerner, Sorin
   Millstein, Todd
TI Data-Driven Lemma Synthesis for Interactive Proofs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Lemma Synthesis; Data-Driven Synthesis; Type-Directed Synthesis;
   Interactive Theorem Proving
AB Interactive proofs of theorems often require auxiliary helper lemmas to prove the desired theorem. Existing approaches for automatically synthesizing helper lemmas fall into two broad categories. Some approaches are goal-directed, producing lemmas specifically to help a user make progress from a given proof state, but they have limited expressiveness in terms of the lemmas that can be produced. Other approaches are highly expressive, able to generate arbitrary lemmas from a given grammar, but they are completely undirected and hence not amenable to interactive usage.
   In this paper, we develop an approach to lemma synthesis that is both goal-directed and expressive. The key novelty is a technique for reducing lemma synthesis to a data-driven program synthesis problem, whereby examples for synthesis are generated from the current proof state. We also describe a technique to systematically introduce new variables for lemma synthesis, as well as techniques for filtering and ranking candidate lemmas for presentation to the user. We implement these ideas in a tool called lfind, which can be run as a Coq tactic. In an evaluation on four benchmark suites, lfind produces useful lemmas in 68% of the cases where a human prover used a lemma to make progress. In these cases lfind synthesizes a lemma that either enables a fully automated proof of the original goal or that matches the human-provided lemma.
C1 [Sivaraman, Aishwarya; Chen, Bretton; Millstein, Todd] Univ Calif Los Angeles, Los Angeles, CA 90024 USA.
   [Sanchez-Stern, Alex] UMass Amherst, Amherst, MA USA.
C3 University of California System; University of California Los Angeles;
   University of Massachusetts System; University of Massachusetts Amherst
RP Sivaraman, A (corresponding author), Univ Calif Los Angeles, Los Angeles, CA 90024 USA.
EM dcssiva@cs.ucla.edu; sanchezstern@cs.umass.edu; bretton@g.ucla.edu;
   lerner@cs.ucsd.edu; todd@cs.ucla.edu
OI Lerner, Sorin/0000-0003-3957-0628; Millstein, Todd/0000-0002-2031-1514
FU DARPA [HR0011-22-9-0063]; NSF [CCF-1837129, CCF-2220891]; Google
   Research
FX The authors would like to thank Murali Ramanujam for helpful feedback on
   this research. This work is supported in part by DARPA grant
   HR0011-22-9-0063, NSF grants CCF-1837129 and CCF-2220891, and a PhD
   fellowship from Google Research.
CR Albarghouthi Aws, 2013, INT C COMPUTER AIDED, P934
   [Anonymous], 2003, Coq-of-Ocaml
   [Anonymous], 1995, Circuits
   Arias Emilio Jesus Gallego, 2020, SerAPI:Machine-Friendly, Data-Centric Serialization for Coq
   Astorga A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P775, DOI 10.1145/3314221.3314641
   Aubin R., 1976, Mechanising Structural Induction
   Bansal Kshitij, 2019, arXiv, DOI 10.48550/ARXIV.1904.03241
   Blanchette JC, 2011, LECT NOTES ARTIF INT, V6803, P116, DOI 10.1007/978-3-642-22438-6_11
   Boyer Robert S., 1979, ACM Monograph Series, V1979
   BUNDY A, 1993, ARTIF INTELL, V62, P185, DOI 10.1016/0004-3702(93)90079-Q
   Castaing Jacqueline., 1985, IJCAI
   Chamarthi HR, 2011, ELECTRON PROC THEOR, P4, DOI 10.4204/EPTCS.70.1
   Chlipala A, 2013, Certified programming with dependent types
   Claessen Koen, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P392, DOI 10.1007/978-3-642-38574-2_27
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Claessen K, 2010, LECT NOTES COMPUT SC, V6143, P6, DOI 10.1007/978-3-642-13977-2_3
   Czajka L, 2018, J AUTOM REASONING, V61, P423, DOI 10.1007/s10817-018-9458-4
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Dixon L, 2003, LECT NOTES ARTIF INT, V2741, P279
   Ernst MichaelD., 2000, DYNAMICALLY DISCOVER
   Ezudheen P, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276501
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Filliatre Jean-Christophe., 1997, Technical Report
   First Emily., 2020, Object-oriented Programming, Systems, Languages, and Applications
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   Garg P, 2016, ACM SIGPLAN NOTICES, V51, P499, DOI 10.1145/2914770.2837664
   Garg P, 2014, LECT NOTES COMPUT SC, V8559, P69, DOI 10.1007/978-3-319-08867-9_5
   Gauthier T, 2017, EPIC SERIES COMPUTIN, V46, P125, DOI DOI 10.29007/NTLB
   Heras Jonathan, 2013, Logic for Programming, Artificial Intelligence and Reasoning. 19th International Conference, LPAR-19, Proceedings: LNCS 8312, P389, DOI 10.1007/978-3-642-45221-5_27
   Hesketh Jane Thurmann, 1992, Ph. D. Dissertation
   Huang Daniel, 2019, ICLR
   Hummel B., 1990, Generation of induction axioms and generalisation
   Ireland A, 1996, J AUTOM REASONING, V16, P79, DOI 10.1007/BF00244460
   Johansson M., 2019, LECT NOTES COMPUTER, V11617, P125, DOI DOI 10.1007/978-3-030-23250-4_9
   Johansson M, 2014, LECT NOTES ARTIF INT, V8543, P108, DOI 10.1007/978-3-319-08434-3_9
   Johansson M, 2011, J AUTOM REASONING, V47, P251, DOI 10.1007/s10817-010-9193-y
   Johansson M, 2010, LECT NOTES ARTIF INT, V6463, P102, DOI 10.1007/978-3-642-17172-7_6
   Kaliszyk C, 2015, J AUTOM REASONING, V55, P245, DOI 10.1007/s10817-015-9330-8
   Kaliszyk C, 2015, MATH COMPUT SCI, V9, P5, DOI 10.1007/s11786-014-0182-0
   Kapur Deepak., 1996, Lecture Notes in Computer Science, P538
   Kaufmann M, 1997, IEEE T SOFTWARE ENG, V23, P203, DOI 10.1109/32.588534
   Lubin J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408991
   Miltner A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498682
   Miltner A, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1, DOI 10.1145/3385412.3385967
   Montano-Rivas O, 2012, EXPERT SYST APPL, V39, P1637, DOI 10.1016/j.eswa.2011.06.055
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Padhi S, 2016, ACM SIGPLAN NOTICES, V51, P42, DOI [10.1145/2908080.2908099, 10.1145/2980983.2908099]
   Paliwal A, 2020, AAAI CONF ARTIF INTE, V34, P2967
   Paraskevopoulou Z, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P966, DOI 10.1145/3519939.3523707
   Paraskevopoulou Z, 2015, LECT NOTES COMPUT SC, V9236, P325, DOI 10.1007/978-3-319-22102-1_22
   Paulson Lawrence C., 1993, arXiv
   Reynolds A, 2015, LECT NOTES COMPUT SC, V8931, P80
   Sanchez-Stern Alex, 2020, MAPL 2020: Proceedings of the 4th ACM SIGPLAN International Workshop on Machine Learning and Programming Languages, P1, DOI 10.1145/3394450.3397466
   Sekiyama T, 2017, Arxiv, DOI arXiv:1706.06462
   Solar-Lezama A, 2009, LECT NOTES COMPUT SC, V5904, P4, DOI 10.1007/978-3-642-10672-9_3
   Sonnex W, 2012, LECT NOTES COMPUT SC, V7214, P407, DOI 10.1007/978-3-642-28756-5_28
   Whalen D, 2016, Arxiv, DOI arXiv:1608.02644
   Yang KY, 2019, PR MACH LEARN RES, V97
   Yang WK, 2019, LECT NOTES COMPUT SC, V11802, P600, DOI 10.1007/978-3-030-30048-7_35
   Zhu H, 2018, ACM SIGPLAN NOTICES, V53, P707, DOI [10.1145/3192366.3192416, 10.1145/3296979.3192416]
NR 60
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 143
DI 10.1145/3563306
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200020
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Jacobs, K
   Devriese, D
   Timany, A
AF Jacobs, Koen
   Devriese, Dominique
   Timany, Amin
TI Purity of an ST Monad Full Abstraction by Semantically Typed
   Back-Translation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE ST monad; Functional Programming languages; Full Abstraction
AB In 1995, Launchbury and Peyton Jones extended Haskell with an ST monad that allows the programmer to use higher-order mutable state. They informally argued that these state computations were safely encapsulated, and as such, that the rich reasoning principles stemming from the purity of the language, were not threatened.
   In this paper, we give a formal account of the preservation of purity after adding an ST monad to a simply-typed call-by-value recursive lambda calculus. We state and prove full abstraction when embedding the pure language into its extension with ST; contextual equivalences from the pure language continue to hold in the presence of ST.
   Proving full abstraction of compilers is usually done by emulating or back-translating the target features (here: ST computations) into the source language, a well-known challenge in the secure compilation community. We employ a novel proof technique for proving our full abstraction result that allows us to use a semantically (but not syntactically) typed back-translation into an intermediate language. We believe that this technique provides additional insight into our proof and that it is of general interest to researchers studying programming languages and compilers using full abstraction.
   The results presented here are fully formalized in the Coq proof assistant using the Iris framework.
C1 [Jacobs, Koen; Devriese, Dominique] Katholieke Univ Leuven, Imec DistriNet, Leuven, Belgium.
   [Timany, Amin] Aarhus Univ, Aarhus, Denmark.
C3 KU Leuven; Aarhus University
RP Jacobs, K (corresponding author), Katholieke Univ Leuven, Imec DistriNet, Leuven, Belgium.
EM koen.jacobs@kuleuven.be; dominique.devriese@kuleuven.be; timany@cs.au.dk
RI Devriese, Dominique/C-5493-2014
OI Devriese, Dominique/0000-0002-3862-6856; Timany,
   Amin/0000-0002-2237-851X; Jacobs, Koen/0000-0002-1645-6876
FU Air Force Office of Scientific Research [FA9550-21-1-0054]; Internal
   Funds KU Leuven [C14/18/064]
FX This work was partially supported by the Air Force Office of Scientific
   Research under award number FA9550-21-1-0054 and by Internal Funds KU
   Leuven grant C14/18/064.
CR Abadi M., 1999, Secure Internet programming. Security issues for mobile and distributed objects, P19
   Abadi M, 1998, LECT NOTES COMPUT SC, V1543, P291
   Abate Carmine, 2019, 2019 IEEE 32 COMPUTE
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Devriese D, 2016, ACM SIGPLAN NOTICES, V51, P164, DOI 10.1145/2914770.2837618
   Hudak Paul, 2007, HIST PROGRAMMING LAN
   Jacobs K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434288
   Jacobs Koen, 2022, ARTIFACT PURITY ST M, DOI [10.5281/zenodo.6329773, DOI 10.5281/ZENODO.6329773]
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   LAUNCHBURY J, 1994, SIGPLAN NOTICES, V29, P24, DOI 10.1145/773473.178246
   Moggi E, 2001, J FUNCT PROGRAM, V11, P591, DOI 10.1017/S0956796801004154
   New MS, 2016, ACM SIGPLAN NOTICES, V51, P103, DOI 10.1145/3022670.2951941
   New Max S, 2018, P ACM PROGR LANG, DOI [10.1145/3236768, DOI 10.1145/3236768]
   Parrow J, 2008, ELECTRON NOTES THEOR, V209, P173, DOI 10.1016/j.entcs.2008.04.011
   Patrignani M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434302
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Patrignani Marco, 2020, ARXIV PREPRINT ARXIV
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Skorstengaard L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290332
   Timany A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158152
   Timany Amin, COQPL
   Wadler P., 1993, Program Design Calculi. Proceedings of the NATO Advanced Study Institute, P233
NR 22
TC 5
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 82
DI 10.1145/3527326
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300018
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Blanvillain, O
   Brachthäuser, JI
   Kjaer, M
   Odersky, M
AF Blanvillain, Olivier
   Brachthaeuser, Jonathan Immanuel
   Kjaer, Maxime
   Odersky, Martin
TI Type-Level Programming with Match Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Match types; Scala
AB Type-level programming is becoming more and more popular in the realm of functional programming. However, the combination of type-level programming and subtyping remains largely unexplored in practical programming languages. This paper presents match types, a type-level equivalent of pattern matching. Match types integrate seamlessly into programming languages with subtyping and, despite their simplicity, offer significant additional expressiveness. We formalize the feature of match types in a calculus based on System F-<: and prove its soundness. We practically evaluate our system by implementing match types in the Scala 3 reference compiler, thus making type-level programming readily available to a broad audience of programmers.
C1 [Blanvillain, Olivier; Kjaer, Maxime; Odersky, Martin] Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
   [Brachthaeuser, Jonathan Immanuel] Univ Tubingen, Tubingen, Germany.
C3 Swiss Federal Institutes of Technology Domain; Ecole Polytechnique
   Federale de Lausanne; Eberhard Karls University of Tubingen
RP Blanvillain, O (corresponding author), Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
EM olivier.blanvillain@epfl.ch; jonathan.brachthaeuser@uni-tuebingen.de;
   kjaer@alumni.epfl.ch; martin.odersky@epfl.ch
OI Brachthauser, Jonathan Immanuel/0000-0001-9128-0391
CR ABADI M, 1991, ACM T PROGR LANG SYS, V13, P237, DOI 10.1145/103135.103138
   Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   Aspinall D, 1995, LECT NOTES COMPUT SC, V933, P1, DOI 10.1007/BFb0022243
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   Barham P, 2019, PROCEEDINGS OF THE WORKSHOP ON HOT TOPICS IN OPERATING SYSTEMS (HOTOS '19), P177, DOI 10.1145/3317550.3321441
   Bierman G, 2014, LECT NOTES COMPUT SC, V8586, P257
   Blanvillain Olivier, Type-Level Programming with Match Types Artifact, DOI 10.5281/zenodo.5568850
   Blanvillain Olivier, 2016, FRAMELESS
   Blanvillain Olivier, 2021, TYPE LEVEL PROGRAMMI, P70
   CARDELLI L, 1994, INFORM COMPUT, V109, P4, DOI 10.1006/inco.1994.1013
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P241, DOI 10.1145/1090189.1086397
   Chen TF, 2017, SCALA'17: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P45, DOI 10.1145/3136000.3136001
   Courant Judicael., 2003, ELECTRON NOTES THEOR, V70, P53, DOI [10.1016/S1571-0661(04)80490-0, DOI 10.1016/S1571-0661(04)80490-0]
   Eisenberg RA, 2014, ACM SIGPLAN NOTICES, V49, P671, DOI 10.1145/2535838.2535856
   Eisenberg Richard A, 2016, Dependent types in haskell: Theory and practice
   Emir B, 2007, LECT NOTES COMPUT SC, V4609, P273
   Giarrusso PG, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408996
   Harper R., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P130, DOI 10.1145/199448.199475
   Harris CR, 2020, NATURE, V585, P357, DOI 10.1038/s41586-020-2649-2
   Huang Austin, 2021, HASKTORCH
   Hutchins DS, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P287, DOI 10.1145/1706299.1706334
   Kiselyov Oleg, 2004, HASKELL 04, P96, DOI DOI 10.1145/1017472.1017488
   Leontiev George, 2014, SIP 23 LIT BASED SIN
   Liu FY, 2016, SCALA'16: PROCEEDINGS OF THE 2016 7TH ACM SIGPLAN SYMPOSIUM ON SCALA, P61, DOI 10.1145/2998392.2998401
   Nieto Abel, 2020, LEIBNIZ INT P INFORM, V166
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rapoport M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133870
   Rush Alexander, 2019, TENSOR CONSIDERED HA
   Sabin Miles, 2011, M SABIN SHAPELESS OP
   Schinz Michel, 2005, Ph. D. Dissertation, DOI [10.5075/epfl-thesis-3302, DOI 10.5075/EPFL-THESIS-3302]
   Schrijvers T, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Sjoberg Vilhelm, 2015, THESIS U PENNSYLVANI
   Stone C. A., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P214, DOI 10.1145/325694.325724
   TypeScript development team, 2020, TYPESCRIPT HDB
   Weirich S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P227, DOI 10.1145/1926385.1926411
   Yang YP, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133871
   Zwanenburg J, 1999, LECT NOTES COMPUT SC, V1581, P381
NR 37
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 37
DI 10.1145/3498698
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900038
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Fiore, M
   Szamozvancev, D
AF Fiore, Marcelo
   Szamozvancev, Dmitrij
TI Formal Metatheory of Second-Order Abstract Syntax
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Agda; abstract syntax; language formalisation; category theory
AB Despite extensive research both on the theoretical and practical fronts, formalising, reasoning about, and implementing languages with variable binding is still a daunting endeavour - repetitive boilerplate and the overly complicated metatheory of capture-avoiding substitution often get in the way of progressing on to the actually interesting properties of a language. Existing developments offer some relief, however at the expense of inconvenient and error-prone term encodings and lack of formal foundations.
   We present a mathematically-inspired language-formalisation framework implemented in Agda. The system translates the description of a syntax signature with variable-binding operators into an intrinsicallyencoded, inductive data type equipped with syntactic operations such as weakening and substitution, along with their correctness properties. The generated metatheory further incorporates metavariables and their associated operation of metasubstitution, which enables second-order equational/rewriting reasoning. The underlying mathematical foundation of the framework - initial algebra semantics - derives compositional interpretations of languages into their models satisfying the semantic substitution lemma by construction.
C1 [Fiore, Marcelo; Szamozvancev, Dmitrij] Univ Cambridge, Dept Comp Sci & Technol, Cambridge, England.
C3 University of Cambridge
RP Fiore, M (corresponding author), Univ Cambridge, Dept Comp Sci & Technol, Cambridge, England.
EM marcelo.fiore@cst.cam.ac.uk; ds709@cst.cam.ac.uk
OI Fiore, Marcelo/0000-0001-8558-3492; Szamozvancev,
   Dmitrij/0000-0002-5436-6302
FU EPSRC [EP/R513180/1, EP/V002309/1]; EPSRC [EP/V002309/1] Funding Source:
   UKRI
FX Research partially supported by EPSRC grant EP/V002309/1.; Research
   supported by EPSRC grant EP/R513180/1.
CR ABADI M, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P31, DOI 10.1145/96709.96712
   Abel A, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000170
   Abel A, 2010, ELECTRON P THEOR COM, P14, DOI 10.4204/EPTCS.43.2
   Aczel Peter, 1978, Technical Report
   Allais G, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796820000076
   Allais G, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P195, DOI 10.1145/3018610.3018613
   Altenkirch T, 1999, LECT NOTES COMPUT SC, V1683, P453
   Altenkirch T, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S095679681500009X
   [Anonymous], 1999, The Coq Proof Assistant
   Arkor N, 2020, IEEE S LOG, P88, DOI 10.1145/3373718.3394771
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   Aydemir B, 2008, ACM SIGPLAN NOTICES, V43, P3, DOI 10.1145/1328897.1328443
   Barendregt Henk P., 1984, LAMBDA CALCULUS ITS, DOI [DOI 10.1016/C2009-0-14341-6, 10.1016/c2009- 0- 14341-6]
   BELLEGARDE F, 1994, SCI COMPUT PROGRAM, V23, P287, DOI 10.1016/0167-6423(94)00022-0
   Benton N, 2012, J AUTOM REASONING, V49, P141, DOI 10.1007/s10817-011-9219-0
   Bird R. S., 1999, Journal of Functional Programming, V9, P77, DOI 10.1017/S0956796899003366
   Blanchette JC, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290335
   Borthelle P, 2020, IEEE S LOG, P273, DOI 10.1145/3373718.3394738
   Charguéraud A, 2012, J AUTOM REASONING, V49, P363, DOI 10.1007/s10817-011-9225-2
   Chen XH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408970
   Chlipala A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Copello E, 2017, THEOR COMPUT SCI, V685, P65, DOI 10.1016/j.tcs.2016.08.025
   Day Brian, 1970, Lecture Notes in Math., V137, P1, DOI [10.1007/BFb0060438, DOI 10.1007/BFB0060438]
   Erdi Gergo, 2018, ARXIV180400119CSPL
   Fiore M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P193, DOI 10.1109/LICS.1999.782615
   Fiore M., 2006, STRUCTURE SUBSTITUTI
   Fiore M, 2008, IEEE S LOG, P57, DOI 10.1109/LICS.2008.38
   Fiore M, 2013, IEEE S LOG, DOI 10.1109/LICS.2013.59
   Fiore M, 2012, LECT NOTES COMPUT SC, V7392, P214, DOI 10.1007/978-3-642-31585-5_22
   Fiore M, 2010, LECT NOTES COMPUT SC, V6281, P368, DOI 10.1007/978-3-642-15155-2_33
   Fiore M, 2010, LECT NOTES COMPUT SC, V6247, P320, DOI 10.1007/978-3-642-15205-4_26
   Fiore Marcelo, 2017, 2 INT C FORMAL STRUC, V16, P1, DOI [DOI 10.4230/LIPICS.FSCD.2017, 10.4230/LIPIcs.FSCD.2017.16, DOI 10.4230/LIPICS.FSCD.2017.16]
   Gabbay M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P214, DOI 10.1109/LICS.1999.782617
   Goguen J.A, 1976, IBM Research Report 6487
   Hamana M, 2004, LECT NOTES COMPUT SC, V3302, P348
   Hofmann M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P204, DOI 10.1109/LICS.1999.782616
   Hu JZS, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P327, DOI 10.1145/3437992.3439922
   Hyland Martin, 2020, ARXIV200509559MATHCT
   Kaiser Jonas, 2018, P 7 ACM SIGPLAN INT, P293, DOI DOI 10.1145/3167098
   Keuchel S, 2016, LECT NOTES COMPUT SC, V9632, P419, DOI 10.1007/978-3-662-49498-1_17
   Kock A., 1971, J AUSTR MATH SOC, V12, P405, DOI DOI 10.1017/S1446788700010272
   Kokke W, 2020, SCI COMPUT PROGRAM, V194, DOI 10.1016/j.scico.2020.102440
   Lambek J, 1980, HB CURRY ESSAYS COMB, P375
   Lee G, 2012, LECT NOTES COMPUT SC, V7211, P436, DOI 10.1007/978-3-642-28869-2_22
   McBride Conor, 2004, P 2004 ACM SIGPLAN W, P1, DOI DOI 10.1145/1017472.1017477
   McBride Conor, 2005, TYP PRES REN SUBST
   Norell Ulf, 2009, P 4 INT WORKSHOP TYP, P1, DOI DOI 10.1145/1481861.1481862
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Pickering M, 2016, ACM SIGPLAN NOTICES, V51, P80, DOI 10.1145/3241625.2976013
   Pigozzi D., 1995, Studia Logica, V55, P129, DOI 10.1007/BF01053036
   Pitts Andrew M, 2019, INITIAL ALGEBRA STRI
   Plotkin GD, 2020, ELECTRON NOTES THEOR, V352, P211, DOI 10.1016/j.entcs.2020.09.011
   Polonowski E, 2013, LECT NOTES COMPUT SC, V7998, P402, DOI 10.1007/978-3-642-39634-2_29
   Shinwell MR, 2003, ACM SIGPLAN NOTICES, V38, P263, DOI 10.1145/944746.944729
   Stark K, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P166, DOI 10.1145/3293880.3294101
   Street R, 2013, J PURE APPL ALGEBRA, V217, P973, DOI 10.1016/j.jpaa.2012.09.020
   Sun Y, 1999, THEOR COMPUT SCI, V211, P189, DOI 10.1016/S0304-3975(97)00170-9
   Szlachányi K, 2012, ADV MATH, V231, P1694, DOI 10.1016/j.aim.2012.06.027
   Tanaka M., 2000, Mathematical Foundations of Computer Science 2000. 25th International Symposium, MFCS 2000. Proceedings. (Lecture Notes in Computer Science Vol.1893), P670
   Urban C, 2011, LECT NOTES COMPUT SC, V6602, P480, DOI 10.1007/978-3-642-19718-5_25
   Voevodsky Vladimir, 2014, UNIMATH A COMPUTERCH
   Vouillon J, 2012, J AUTOM REASONING, V49, P327, DOI 10.1007/s10817-011-9230-5
   Weirich S, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P333
NR 63
TC 5
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 53
DI 10.1145/3498715
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900054
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Fu, WL
   Krause, F
   Thiemann, P
AF Fu, Weili
   Krause, Fabian
   Thiemann, Peter
TI Label Dependent Lambda Calculus and Gradual Typing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE dependent types; subtyping; gradual type systems
ID PROGRAMS
AB Dependently-typed programming languages are gaining importance, because they can guarantee a wide range of properties at compile time. Their use in practice is often hampered because programmers have to provide very precise types. Gradual typing is a means to vary the level of typing precision between program fragments and to transition smoothly towards more precisely typed programs. The combination of gradual typing and dependent types seems promising to promote the widespread use of dependent types.
   We investigate a gradual version of a minimalist value-dependent lambda calculus. Compile-time calculations and thus dependencies are restricted to labels, drawn from a generic enumeration type. The calculus supports the usual Pi and Sigma types as well as singleton types and subtyping. It is sufficiently powerful to provide flexible encodings of variant and record types with first-class labels.
   We provide type checking algorithms for the underlying label-dependent lambda calculus and its gradual extension. The gradual type checker drives the translation into a cast calculus, which extends the original language. The cast calculus comes with several innovations: refined typing for casts in the presence of singletons, type reduction in casts, and fully dependent Sigma types. Besides standard metatheoretical results, we establish the gradual guarantee for the gradual language.
C1 [Fu, Weili; Krause, Fabian; Thiemann, Peter] Univ Freiburg, Freiburg, Germany.
C3 University of Freiburg
RP Fu, WL (corresponding author), Univ Freiburg, Freiburg, Germany.
EM weilifu@informatik.uni-freiburg.de;
   fabian.krause@students.uni-freiburg.de; thiemann@acm.org
OI Krause, Fabian/0000-0002-3204-6586
CR Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   Aspinall D, 1995, LECT NOTES COMPUT SC, V933, P1, DOI 10.1007/BFb0022243
   Aspinall D, 2001, THEOR COMPUT SCI, V266, P273, DOI 10.1016/S0304-3975(00)00175-4
   Schwerter FB, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283, DOI 10.1145/2628136.2628149
   Bertot Y., 2004, TEXT THEORET COMP S
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Casinghino C, 2014, ACM SIGPLAN NOTICES, V49, P33, DOI 10.1145/2535838.2535883
   Castagna G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110285
   Cimini M, 2016, ACM SIGPLAN NOTICES, V51, P443, DOI 10.1145/2914770.2837632
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Dagand PÉ, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000011
   de Muijnck-Hughes J, 2019, ELECTRON P THEOR COM, P47, DOI 10.4204/EPTCS.291.5
   Eremondi J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341692
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Igarashi A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110282
   Igarashi Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110284
   Jacobs K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434288
   Knowles K, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667051
   Krause Fabian, 2021, Artifact for Label Dependent Lambda Calculus and Gradual Typing, DOI 10.5281/zenodo.5497628
   Lehmann N, 2017, ACM SIGPLAN NOTICES, V52, P775, DOI 10.1145/3093333.3009856
   Lennon-Bertrand Meven, 2020, ABS201110618 CORR, V0618
   Martin-Lof P., 1984, Intuitionistic type theory
   New MS, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:7)2020
   New Max S, 2018, P ACM PROGR LANG, DOI [10.1145/3236768, DOI 10.1145/3236768]
   Nishimura S., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P266, DOI 10.1145/268946.268968
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   Ou XM, 2004, INT FED INFO PROC, V155, P437
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Siek J.G., 2008, Proceedings of the 2008 symposium on Dynamic languages, P7, DOI DOI 10.1145/1408681.1408688
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek J, 2015, ACM SIGPLAN NOTICES, V50, P425, DOI [10.1145/2737924.2737968, 10.1145/2813885.2737968]
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Sjoeberg V, 2012, ELECTRON PROC THEOR, P112, DOI 10.4204/EPTCS.76.9
   Stone Christopher., 2000, THESIS CMU
   Stone CA, 2006, ACM T COMPUT LOG, V7, P676, DOI 10.1145/1183278.1183281
   Swamy N, 2014, ACM SIGPLAN NOTICES, V49, P425, DOI 10.1145/2535838.2535889
   Swamy N, 2013, J FUNCT PROGRAM, V23, P402, DOI 10.1017/S0956796813000142
   Tanter É, 2016, ACM SIGPLAN NOTICES, V51, P26, DOI [10.1145/2816707.2816710, 10.1145/2936313.2816710]
   Thiemann P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371135
   Toro M, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3229061
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Weirich S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341705
NR 46
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 108
DI 10.1145/3485485
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200012
OA gold
DA 2024-07-18
ER

PT J
AU Roth, O
AF Roth, Ori
TI Study of the Subtyping Machine of Nominal Subtyping with Variance
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE subtyping; variance; metaprogramming; fluent API; DSL
AB This is a study of the computing power of the subtyping machine behind Kennedy and Pierce's nominal subtyping with variance. We depict the lattice of fragments of Kennedy and Pierce's type system and characterize their computing power in terms of regular, context-free, deterministic, and non-deterministic tree languages. Based on the theory, we present Treetop-a generator of C-# implementations of subtyping machines. The software artifact constitutes the first feasible (yet POC) fluent API generator to support context-free API protocols in a decidable type system fragment.
C1 [Roth, Ori] Technion IIT, Haifa, Israel.
C3 Technion Israel Institute of Technology
RP Roth, O (corresponding author), Technion IIT, Haifa, Israel.
EM soriroth@cs.technion.ac.il
OI Roth, Ori/0009-0002-1025-6707
CR [Anonymous], 1974, Proceedings of the 1974 ACM SIGFIDET (now SIGMOD) workshop on Data description, access and control, ACM, DOI DOI 10.1145/800296.811515
   ARNOLD K, 2006, JAVA PROGRAMMING LAN
   Barendregt H., 1991, Journal of Functional Programming, V1, P125
   Blum N, 1999, INFORM COMPUT, V150, P112, DOI 10.1006/inco.1998.2772
   Comon H., 2007, TREE AUTOMATA TECHNI
   Coplien J. O., 1996, C GEMS, P135
   Ferles Kostas, 2020, ARXIV201009652CSPL
   Fowler Martin, 2005, FluentInterface
   Gecseg Ferenc, 1997, TREE LANGUAGES, P1
   Gil Joseph, 2020, ARXIV PREPRINT ARXIV
   Gil Yossi, 2019, 33 EUROP C OO PROG E, V13, DOI [10.4230/LIPIcs.ECOOP.2019.13, DOI 10.4230/LIPICS.ECOOP.2019.13]
   Gil Yossi, 2016, 30 EUROP C OO PROG E, V56, DOI [10.4230/ LIPIcs.ECOOP.2016.10, DOI 10.4230/LIPICS.ECOOP.2016.10]
   Greenman B, 2014, ACM SIGPLAN NOTICES, V49, P89, DOI [10.1145/2594291.2594308, 10.1145/2666356.2594308]
   GREIBACH SA, 1965, J ACM, V12, P42, DOI 10.1145/321250.321254
   Grigore R, 2017, ACM SIGPLAN NOTICES, V52, P73, DOI 10.1145/3093333.3009871
   GUESSARIAN I, 1983, MATH SYST THEORY, V16, P237, DOI 10.1007/BF01744582
   Hejlsberg A., 2003, The C# Programming Language
   Hopcroft John E., 2007, INTRO AUTOMATA THEOR, V3rd
   Kennedy Andrew, 2007, Int. Work. Found. & Devel. OO Lang. (Nice, France) (FOOL/WOOD' 07)
   Nakamaru T, 2020, IEEE WORK CONF MIN S, P93, DOI 10.1145/3379597.3387441
   Nakamaru T, 2017, PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'17), P199, DOI [10.23919/ISPSD.2017.7988922, 10.1145/3136040.3136041]
   Nakamaru Tomoki, 2020, ART SCI ENG PROG, V4, DOI DOI 10.22152/PROGRAMMING-JOURNAL.ORG/2020/4/9
   Odersky M, 2004, TECHNICAL REPORT
   Osterholzer Johannes, 2018, THESIS TU DRESDEN
   Roth Ori, 2021, ARXIV210903950CSPL
   Roth Ori, 2021, Treetop: A Context-Free Fluent API Generator for C#, DOI [10.5281/zenodo.5091711, DOI 10.5281/ZENODO.5091711]
   VALIANT LG, 1975, J COMPUT SYST SCI, V10, P308, DOI 10.1016/S0022-0000(75)80046-8
   Viroli Mirko, 2000, DEISLIA00002 U BOL
   Xu H, 2010, LECT NOTES COMPUT SC, V6141, P192, DOI 10.1007/978-3-642-13953-6_11
   Yamazaki T, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360560
NR 30
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 137
DI 10.1145/3485514
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200040
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Yan, PB
   Murray, T
AF Yan, Pengbo
   Murray, Toby
TI SecRSL: Security Separation Logic for C11 Release-Acquire Concurrency
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Information-flow Security; Separation Logic; Weak Memory Consistency;
   Axiomatic Semantics
AB We present Security Relaxed Separation Logic (SecRSL), a separation logic for proving information-flow security of C11 programs in the Release-Acquire fragment with relaxed accesses. SecRSL is the first security logic that (1) supports weak-memory reasoning about programs in a high-level language; (2) inherits separation logic's virtues of compositional, local reasoning about (3) expressive security policies like value-dependent classification.
   SecRSL is also, to our knowledge, the first security logic developed over an axiomatic memory model. Thus we also present the first definitions of information-flow security for an axiomatic weak memory model, against which we prove SecRSL sound. SecRSL ensures that programs satisfy a constant-time security guarantee, while being free of undefined behaviour.
   We apply SecRSL to implement and verify the functional correctness and constant-time security of a range of concurrency primitives, including a spinlock module, a mixed-sensitivity mutex, and multiple synchronous channel implementations. Empirical performance evaluations of the latter demonstrate SecRSL's power to support the development of secure and performant concurrent C programs.
C1 [Yan, Pengbo; Murray, Toby] Univ Melbourne, Melbourne, Vic, Australia.
C3 University of Melbourne
RP Yan, PB (corresponding author), Univ Melbourne, Melbourne, Vic, Australia.
EM pengbo.yan@unimelb.edu.au; toby.murray@unimelb.edu.au
OI Murray, Toby/0000-0002-8271-0289; Yan, Pengbo/0000-0003-0396-8343
FU Commonwealth of Australia Defence Science and Technology Group, Next
   Generation Technologies Fund (NGTF)
FX We thank the anonymous reviewers for their insightful feedback on
   earlier drafts of this paper. This material is based upon work supported
   by the Commonwealth of Australia Defence Science and Technology Group,
   Next Generation Technologies Fund (NGTF).
CR Alglave Jade, 2009, P 4 WORKSH DECL ASP, P13, DOI DOI 10.1145/1481839.1481842
   Allen PG., 1991, IEEE COMP SEC FDN WO, p43s54
   Baldan P, 2018, THEOR COMPUT SCI, V706, P54, DOI 10.1016/j.tcs.2017.10.004
   Baldan Paolo., 2014, INT C APPL THEOR PET
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371075
   Barthe Gilles., 2017, P ACM PROGR LANG POP, V2, p1s29
   BATTY M. J., 2014, PhD thesis
   Batty M, 2016, ACM SIGPLAN NOTICES, V51, P634, DOI 10.1145/2914770.2837637
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Doko M, 2017, LECT NOTES COMPUT SC, V10201, P448, DOI 10.1007/978-3-662-54434-1_17
   Doko M, 2016, LECT NOTES COMPUT SC, V9583, P413, DOI 10.1007/978-3-662-49122-5_20
   Ernst G, 2019, LECT NOTES COMPUT SC, V11562, P208, DOI 10.1007/978-3-030-25543-5_13
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Frumin Dan., IEEE S SEC PRIV S P
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Honda K, 2000, LECT NOTES COMPUT SC, V1782, P180
   Karbyshev A, 2018, LECT NOTES COMPUT SC, V10804, P53, DOI 10.1007/978-3-319-89722-6_3
   Lourenço L, 2015, ACM SIGPLAN NOTICES, V50, P317, DOI [10.1145/2775051.2676994, 10.1145/2676726.2676994]
   Mador-Haim Sela, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P495, DOI 10.1007/978-3-642-31424-7_36
   Maillard Kenji., 2019, P ACM PROGR LANG POP, V4, p1s33
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Mantel H, 2014, P IEEE CSFW, P80, DOI 10.1109/CSF.2014.14
   Murray T, 2018, 2018 3RD IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P 2018), P16, DOI 10.1109/EuroSP.2018.00010
   Murray T, 2016, P IEEE CSFW, P417, DOI 10.1109/CSF.2016.36
   Murray T, 2009, ELECTRON NOTES THEOR, V250, P49, DOI 10.1016/j.entcs.2009.08.017
   Murray T, 2010, LECT NOTES COMPUT SC, V5983, P81
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   ROSCOE AW, 1995, P IEEE S SECUR PRIV, P114, DOI 10.1109/SECPRI.1995.398927
   Roscoe AW., 1994, EUR S RES COMP SEC E, p31s53
   Sarkar S, 2009, ACM SIGPLAN NOTICES, V44, P379, DOI 10.1145/1594834.1480929
   Schoepe D, 2020, P IEEE COMPUT SECUR, P79, DOI 10.1109/CSF49147.2020.00014
   Sevcik Jaroslav., 2016, C C 11 MAPPINGS PROC
   Sison R., 2019, LIPICS 141
   Smith Graeme, 2019, Formal Methods - The Next 30 Years. Third World Congress, FM 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11800), P539, DOI 10.1007/978-3-030-30942-8_32
   Terauchi T, 2008, CSF 2008: 21ST IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, PROCEEDINGS, P287, DOI 10.1109/CSF.2008.9
   Vafeiadis V, 2013, ACM SIGPLAN NOTICES, V48, P867, DOI [10.1145/2544173.2509532, 10.1145/2509136.2509532]
   Vafeiadis V, 2011, ELECTRON NOTES THEOR, V276, P335, DOI 10.1016/j.entcs.2011.09.029
   Vaughan JA, 2012, P IEEE CSFW, P19, DOI 10.1109/CSF.2012.20
   Yan Pengbo, 2021. SecRSL: Security Separation Logic for C11 ReleaseAcquire Concurrency-Coq Formalisation, DOI DOI 10.5281/ZENODO.5493554
   Yan Pengbo., ARXIV210903602CSCR
   Yang H, 2007, THEOR COMPUT SCI, V375, P308, DOI 10.1016/j.tcs.2006.12.036
   Zdancewic S, 2003, P IEEE CSFW, P29, DOI 10.1109/CSFW.2003.1212703
NR 43
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 99
DI 10.1145/3485476
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200003
OA gold
DA 2024-07-18
ER

PT J
AU Jacobs, J
AF Jacobs, Jules
TI Paradoxes of Probabilistic Programming And How to Condition on Events of
   Measure Zero with Infinitesimal Probabilities
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programming
AB Probabilistic programming languages allow programmers to write down conditional probability distributions that represent statistical and machine learning models as programs that use observe statements. These programs are run by accumulating likelihood at each observe statement, and using the likelihood to steer random choices and weigh results with inference algorithms such as importance sampling or MCMC. We argue that naive likelihood accumulation does not give desirable semantics and leads to paradoxes when an observe statement is used to condition on a measure-zero event, particularly when the observe statement is executed conditionally on random data. We show that the paradoxes disappear if we explicitly model measure-zero events as a limit of positive measure events, and that we can execute these type of probabilistic programs by accumulating infinitesimal probabilities rather than probability densities. Our extension improves probabilistic programming languages as an executable notation for probability distributions by making it more well-behaved and more expressive, by allowing the programmer to be explicit about which limit is intended when conditioning on an event of measure zero.
C1 [Jacobs, Jules] Radboud Univ Nijmegen, Nijmegen, Netherlands.
   [Jacobs, Jules] Delft Univ Technol, Delft, Netherlands.
C3 Radboud University Nijmegen; Delft University of Technology
RP Jacobs, J (corresponding author), Radboud Univ Nijmegen, Nijmegen, Netherlands.; Jacobs, J (corresponding author), Delft Univ Technol, Delft, Netherlands.
EM julesjacobs@gmail.com
OI Jacobs, Jules/0000-0003-1976-3182
CR Ackerman NL, 2017, MATH STRUCT COMP SCI, V27, P1287, DOI 10.1017/S0960129516000098
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   Chang JT, 1997, STAT NEERL, V51, P287, DOI 10.1111/1467-9574.00056
   Dahlqvist F, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371125
   Goodman Noah, 2008, UAI, DOI [10.5555/2969033.2969207, DOI 10.5555/2969033.2969207]
   Heunen Chris, 2017, 2017 32nd Annual ACM/IEEE Symposium on Logic in Computer Science (LICS), DOI 10.1109/LICS.2017.8005137
   Jacobs Jules, 2020, PARADOXES PROBABILIS, DOI [10.5281/zenodo.4075076, DOI 10.5281/ZENODO.4075076]
   Jaynes E. T., 2003, Probability Theory
   Paige B, 2014, ADV NEUR IN, V27
   Shan CC, 2017, ACM SIGPLAN NOTICES, V52, P130, DOI 10.1145/3093333.3009852
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   Tolpin D, 2015, LECT NOTES ARTIF INT, V9285, P311, DOI 10.1007/978-3-319-23525-7_19
   van de Meent J., 2018, ABS180910756 CORR
   von Neumann John, 1951, MONTE CARLO METHOD, V12
   Wood Frank, 2014, AISTATS 2014 JMLR P
   YiWu Siddharth Srivastava, 2018, P 35 INT C MACH LEAR P 35 INT C MACH LEAR, V80
NR 16
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 58
DI 10.1145/3434339
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100058
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Chen, XH
   Trinh, MT
   Rodrigues, N
   Peña, L
   Rosu, G
AF Chen, Xiaohong
   Trinh, Minh-Thai
   Rodrigues, Nishant
   Pena, Lucas
   Rosu, Grigore
TI Towards a Unified Proof Framework for Automated Fixpoint Reasoning using
   Matching Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE matching logic; automated reasoning; fixpoints; induction
ID VERIFICATION
AB Automation of fixpoint reasoning has been extensively studied for various mathematical structures, logical formalisms, and computational domains, resulting in specialized fixpoint provers for heaps, for streams, for term algebras, for temporal properties, for program correctness, and for many other formal systems and inductive and coinductive properties. However, in spite of great theoretical and practical interest, there is no unified framework for automated fixpoint reasoning. Although several attempts have been made, there is no evidence that such a unified framework is possible, or practical. In this paper, we propose a candidate based on matching logic, a formalism recently shown to theoretically unify the above mentioned formal systems. Unfortunately, the (KNASTER-TARSKI) proof rule of matching logic, which enables inductive reasoning, is not syntax-driven. Worse, it can be applied at any step during a proof, making automation seem hopeless. Inspired by recent advances in automation of inductive proofs in separation logic, we propose an alternative proof system for matching logic, which is amenable for automation. We then discuss our implementation of it, which although not superior to specialized state-of-the-art automated provers for specific domains, we believe brings some evidence and hope that a unified framework for automated reasoning is not out of reach.
C1 [Chen, Xiaohong; Rodrigues, Nishant; Pena, Lucas; Rosu, Grigore] Univ Illinois, Dept Comp Sci, 201 N Goodwin Ave, Urbana, IL 61801 USA.
   [Trinh, Minh-Thai] Illinois Singapore, Adv Digital Sci Ctr, 1 Create Way,Create Tower, Singapore 138602, Singapore.
C3 University of Illinois System; University of Illinois Urbana-Champaign
RP Chen, XH (corresponding author), Univ Illinois, Dept Comp Sci, 201 N Goodwin Ave, Urbana, IL 61801 USA.
EM xc3@illinois.edu; minthai.t@adsc-create.edu.sg; nishant2@illinois.edu;
   lpena7@illinois.edu; grosu@illinois.edu
RI Trinh, Minh-Thai/HTO-3686-2023
OI Trinh, Minh-Thai/0000-0002-5716-9400; Chen,
   Xiaohong/0000-0003-3208-4061; Rodrigues, Nishant/0000-0001-6253-9173
FU NSF [CNS 16-19275]; United States Air Force; DARPA [FA8750-18-C-0092];
   National Research Foundation, Prime Minister's Office, Singapore under
   its Campus for Research Excellence and Technological Enterprise (CREATE)
   programme
FX We warmly thank the anonymous OOPSLA reviewers and our shepherd. Their
   wit and dedication has helped us improve the presentation. This work was
   supported in part by NSF CNS 16-19275. This material is based upon work
   supported by the United States Air Force and DARPA under Contract No.
   FA8750-18-C-0092. This research is also partly supported by the National
   Research Foundation, Prime Minister's Office, Singapore under its Campus
   for Research Excellence and Technological Enterprise (CREATE) programme.
CR [Anonymous], 1992, Logics of Time and Computation
   [Anonymous], 1999, The Coq Proof Assistant
   [Anonymous], 2000, Log. J. IGPL, DOI [10.1093/jigpal/8.1.55, DOI 10.1093/JIGPAL/8.1.55]
   [Anonymous], 2001, MODAL LOGIC
   Baelde D, 2010, LECT NOTES ARTIF INT, V6173, P278, DOI 10.1007/978-3-642-14203-1_24
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Berdine J, 2005, LECT NOTES COMPUT SC, V3780, P52
   Berdine J, 2004, LECT NOTES COMPUT SC, V3328, P97
   Bjorner N, 2009, LECT NOTES COMPUT SC, V5643, P124, DOI 10.1007/978-3-642-02658-4_13
   Bogdanas D, 2015, ACM SIGPLAN NOTICES, V50, P445, DOI [10.1145/2775051.2676982, 10.1145/2676726.2676982]
   BOONE WW, 1958, P NATL ACAD SCI USA, V44, P1061, DOI 10.1073/pnas.44.10.1061
   Bouajjani A, 2009, LECT NOTES COMPUT SC, V5710, P178, DOI 10.1007/978-3-642-04081-8_13
   Brotherston J., 2012, Programming Languages and Systems, V7705, P350, DOI [10.1007/978-3-642-35182-225, 10.1007/978-3-642-35182-2_25]
   Brotherston J., 2014, P CSLLICS 2014
   Brotherston J, 2014, J ACM, V61, DOI 10.1145/2542667
   Brotherston J, 2011, LECT NOTES ARTIF INT, V6803, P131, DOI 10.1007/978-3-642-22438-6_12
   Chen Xiaohong, INITIAL ALGEBRA SEMA
   Chen XF, 2019, PROCESS SAF PROG, V38, DOI 10.1002/prs.12050
   Chin WN, 2012, SCI COMPUT PROGRAM, V77, P1006, DOI 10.1016/j.scico.2010.07.004
   Chu DH, 2015, ACM SIGPLAN NOTICES, V50, P457, DOI [10.1145/2813885.2737984, 10.1145/2737924.2737984]
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Enea C, 2017, FORM METHOD SYST DES, V51, P575, DOI 10.1007/s10703-017-0289-4
   Esik Z, 1997, THEOR COMPUT SCI, V177, P217, DOI 10.1016/S0304-3975(96)00240-X
   Gurevich Y., 1985, 26th Annual Symposium on Foundations of Computer Science (Cat. No.85CH2224-4), P346, DOI 10.1109/SFCS.1985.27
   Hathhorn C, 2015, ACM SIGPLAN NOTICES, V50, P336, DOI [10.1145/2813885.2737979, 10.1145/2737924.2737979]
   Hildenbrandt E, 2018, P IEEE COMPUT SECUR, P204, DOI 10.1109/CSF.2018.00022
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Iosif Radu, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P21, DOI 10.1007/978-3-642-38574-2_2
   Jacobs B, 2010, LECT NOTES COMPUT SC, V6461, P304, DOI 10.1007/978-3-642-17164-2_21
   Katelaan J, 2019, LECT NOTES COMPUT SC, V11428, P319, DOI 10.1007/978-3-030-17465-1_18
   Kovács L, 2017, ACM SIGPLAN NOTICES, V52, P260, DOI 10.1145/3093333.3009887
   KOZEN D, 1982, LECT NOTES COMPUT SC, V140, P348
   Lahiri SK, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P171, DOI 10.1145/1328438.1328461
   Leino KRM, 2014, LECT NOTES COMPUT SC, V8442, P382, DOI 10.1007/978-3-319-06410-9_27
   Löding C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158098
   Lucanu D, 2007, LECT NOTES COMPUT SC, V4624, P372
   Park D, 2015, ACM SIGPLAN NOTICES, V50, P346, DOI [10.1145/2813885.2737991, 10.1145/2737924.2737991]
   Pérez JAN, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P556
   Piskac Ruzica, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P773, DOI 10.1007/978-3-642-39799-8_54
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Rakamaric Z, 2007, LECT NOTES COMPUT SC, V4349, P106
   Rakamaric Zvonimir, P 5 INT S AUT TECHN, P237, DOI [10.1007/978-3-540-75596-8_18, DOI 10.1007/978-3-540-75596-8_18]
   Ranise S, 2006, I C SOFTW ENG FORM M, P206
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rosu G, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(4:28)2017
   Rosu G, 2013, IEEE S LOG, P358, DOI 10.1109/LICS.2013.42
   Sighireanu Mihaela, 2019, SL COMP COMPETITION, P116
   Stefanescu A, 2016, ACM SIGPLAN NOTICES, V51, P74, DOI [10.1145/2983990.2984027, 10.1145/3022671.2984027]
   Ta QT, 2019, FORM ASP COMPUT, V31, P207, DOI 10.1007/s00165-018-0471-5
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   The Isabelle development team, 2018, IS
   Unno H, 2017, LECT NOTES COMPUT SC, V10427, P571, DOI 10.1007/978-3-319-63390-9_30
   Xiaohong Chen, 2020, P 25 ACM SIGPLAN INT
NR 55
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 161
DI 10.1145/3428229
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900038
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Köhler, M
   Eskandani, N
   Weisenburger, P
   Margara, A
   Salvaneschi, G
AF Koehler, Mirko
   Eskandani, Nafise
   Weisenburger, Pascal
   Margara, Alessandro
   Salvaneschi, Guido
TI Rethinking Safe Consistency in Distributed Object-Oriented Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE replication; consistency; type systems; Java
AB Large scale distributed systems require to embrace the trade off between consistency and availability, accepting lower levels of consistency to guarantee higher availability. Existing programming languages are, however, agnostic to this compromise, resulting in consistency guarantees that are the same for the whole application and are implicitly adopted from the middleware or hardcoded in configuration files.
   In this paper, we propose to integrate availability in the design of an object-oriented language, allowing developers to specify different consistency and isolation constraints in the same application at the granularity of single objects. We investigate how availability levels interact with object structure and define a type system that preserves correct program behavior. Our evaluation shows that our solution performs efficiently and improves the design of distributed applications.
C1 [Koehler, Mirko; Eskandani, Nafise; Weisenburger, Pascal] Tech Univ Darmstadt, Darmstadt, Germany.
   [Margara, Alessandro] Politecn Milan, Milan, Italy.
   [Salvaneschi, Guido] Univ St Gallen, St Gallen, Switzerland.
C3 Technical University of Darmstadt; Polytechnic University of Milan;
   University of St Gallen
RP Köhler, M (corresponding author), Tech Univ Darmstadt, Darmstadt, Germany.
EM kohler@cs.tu-darmstadt.de; n.eskandani@cs.tu-darmstadt.de;
   weisenburger@cs.tu-darmstadt.de; alessandro.margara@polimi.it;
   guido.salvaneschi@unisg.ch
RI Margara, Alessandro/JVZ-4321-2024
OI Kohler, Mirko/0000-0001-5497-9785; Eskandani,
   Nafise/0000-0001-9761-6319; Salvaneschi, Guido/0000-0002-9324-8894;
   Weisenburger, Pascal/0000-0003-1288-1485
FU LOEWE initiative (Hesse, Germany) within the emergenCITY centre; German
   Research Foundation (DFG) [SA 2918/2-1, SA 2918/3-1]; Deutsche
   Forschungsgemeinschaft (DFG) [SFB 1119-236615297]
FX This work has been supported by the by the LOEWE initiative (Hesse,
   Germany) within the emergenCITY centre, by the German Research
   Foundation (DFG) within projects SA 2918/2-1 and SA 2918/3-1, and it has
   ben funded by the Deutsche Forschungsgemeinschaft (DFG) s SFB 1119 s
   236615297.
CR Adya A., 2000, Proceedings of 16th International Conference on Data Engineering (Cat. No.00CB37073), P67, DOI 10.1109/ICDE.2000.839388
   Akkoorath Deepthi Devaki, 2016, Technical Report
   Almeida PS, 2018, J PARALLEL DISTR COM, V111, P162, DOI 10.1016/j.jpdc.2017.08.003
   [Anonymous], 2007, VLDB
   Bailis P, 2013, PROC VLDB ENDOW, V7, P181, DOI 10.14778/2732232.2732237
   Balegas Valter, 2015, Proceedings of the Tenth European Conference on Computer Systems, DOI [10.1145/2741948.2741972, DOI 10.1145/2741948.2741972]
   Bernstein PA, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133931
   Brutschy L, 2017, ACM SIGPLAN NOTICES, V52, P458, DOI 10.1145/3093333.3009895
   Burckhardt S, 2014, ACM SIGPLAN NOTICES, V49, P271, DOI 10.1145/2535838.2535848
   Burckhardt S, 2012, LECT NOTES COMPUT SC, V7313, P283, DOI 10.1007/978-3-642-31057-7_14
   Collet R., 2007, THESIS
   Corbett JC, 2013, ACM T COMPUT SYST, V31, DOI 10.1145/2491245
   De Porre K, 2020, J PARALLEL DISTR COM, V144, P109, DOI 10.1016/j.jpdc.2020.05.010
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   Dolby J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160913
   ESWARAN KP, 1976, COMMUN ACM, V19, P624, DOI 10.1145/360363.360369
   Geller A., 2011, Proceedings of the 2nd ACM Symposium on Cloud Computing, ser. SOCC'11, Cascais, P16, DOI [DOI 10.1145/2038916.2038932, 10.1145/2038916.2038932]
   Guerraoui R, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P169
   Haifeng Yu, 2001, Operating Systems Review, V35, P29, DOI 10.1145/502059.502038
   Hicks B., 2006, PLAS 2006. Proceedings of the 2006 Programming Languages and Analysis for Security Workshop, P65, DOI 10.1145/1134744.1134757
   Holt B, 2016, PROCEEDINGS OF THE SEVENTH ACM SYMPOSIUM ON CLOUD COMPUTING (SOCC 2016), P279, DOI 10.1145/2987550.2987559
   Houshmand F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290387
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Kaki Gowtham, 2017, P 44 ACM SIGPLAN S P, P34, DOI [10.1145/3158115LeslieLamport, DOI 10.1145/3158115LESLIELAMPORT]
   Lamport L., 2001, SIGACT News, V32, P51
   Lebeck Niel., 2019, Hercules: A multi-view cache for real-time interactive apps
   Li C, 2018, PROCEEDINGS OF THE 2018 USENIX ANNUAL TECHNICAL CONFERENCE, P359
   Li Cheng, 2012, 10 USENIX S OP SYST, P265
   Li Cheng, 2014, 2014 USENIX Annual Technical Conference (USENIX ATC 14), P281
   Lopes P., 2018, Antidote SQL: SQL for Weakly Consistent Databases
   Magrino T, 2019, PROCEEDINGS OF THE FOURTEENTH EUROSYS CONFERENCE 2019 (EUROSYS '19), DOI 10.1145/3302424.3303987
   Milano M, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P226, DOI 10.1145/3192366.3192375
   Myter F, 2018, ONWARD!'18: PROCEEDINGS OF THE 2018 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE, P88, DOI 10.1145/3276954.3276957
   Nair SS, 2020, LECT NOTES COMPUT SC, V12075, P544, DOI 10.1007/978-3-030-44914-8_20
   Papi Matthew M., 2008, P 2008 INT S SOFTW T, P201, DOI DOI 10.1145/1390630.1390656
   Shah V, 2018, INT CONF MANAGE DATA, P259, DOI 10.1145/3183713.3183752
   Shapiro Marc, 2011, Research Report RR- 7506
   Sivaramakrishnan KC, 2015, ACM SIGPLAN NOTICES, V50, P413, DOI [10.1145/2813885.2737981, 10.1145/2737924.2737981]
   Terry DB, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P309, DOI 10.1145/2517349.2522731
   Thomson Alexander, 2012, P 2012 ACM SIGMOD IN, p1S12, DOI 10.1145/2213836
   Viotti P, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2926965
   Vogels W, 2009, COMMUN ACM, V52, P40, DOI 10.1145/1435417.1435432
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Zaza Nosheen, 2016, 1 WORKSH PROGR MOD L, V3, DOI [10.1145/2957319.2957377, DOI 10.1145/2957319.2957377]
   Zhao X, 2018, AGERE'18: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL, P23, DOI 10.1145/3281366.3281372
   Zhao Xin, 2021, ART SCI ENG PROGRAM, V5
NR 46
TC 4
Z9 4
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 188
DI 10.1145/3428256
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900065
OA gold
DA 2024-07-18
ER

PT J
AU Radanne, G
   Saffrich, H
   Thiemann, P
AF Radanne, Gabriel
   Saffrich, Hannes
   Thiemann, Peter
TI Kindly Bent to Free Us
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Functional programming; Linear types; Ownership; Type inference
ID INFERENCE
AB Systems programming often requires the manipulation of resources like file handles, network connections, or dynamically allocated memory. Programmers need to follow certain protocols to handle these resources correctly. Violating these protocols causes bugs ranging from type mismatches over data races to use-after-free errors and memory leaks. These bugs often lead to security vulnerabilities.
   While statically typed programming languages guarantee type soundness and memory safety by design, most of them do not address issues arising from improper handling of resources. An important step towards handling resources is the adoption of linear and affine types that enforce single-threaded resource usage. However, the few languages supporting such types require heavy type annotations.
   We present Affe, an extension of ML that manages linearity and affinity properties using kinds and constrained types. In addition Affe supports the exclusive and shared borrowing of affine resources, inspired by features of Rust. Moreover, Affe retains the defining features of the ML family: it is an impure, strict, functional expression language with complete principal type inference and type abstraction. Affe does not require any linearity annotations in expressions and supports common functional programming idioms.
C1 [Radanne, Gabriel] INRIA, Paris, France.
   [Saffrich, Hannes; Thiemann, Peter] Univ Freiburg, Freiburg, Germany.
C3 Inria; University of Freiburg
RP Radanne, G (corresponding author), INRIA, Paris, France.
EM gabriel.radanne@inria.fr; saffrich@informatik.uni-freiburg.de;
   thiemann@informatik.uni-freiburg.de
OI Radanne, Gabriel/0000-0002-2107-7678
FU German Research Council, DFG [TH 665/11-1]
FX This material is based upon work supported by the German Research
   Council, DFG, project reference number TH 665/11-1. We are indebted to
   the anonymous reviewers for their thoughtful and constructive comments.
CR Achten P., 1995, Journal of Functional Programming, V5, P81, DOI 10.1017/S0956796800001258
   Aldrich J., 2009, OOPSLA COMPANION, P1015, DOI DOI 10.1145/1639950
   Amin N, 2017, ACM SIGPLAN NOTICES, V52, P666, DOI 10.1145/3093333.3009866
   Bagwell P., 2001, IDEAL HASH TREES
   Balabonski T, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2837022
   Barendsen E, 1995, LECT NOTES COMPUT SC, V982, P189, DOI 10.1007/BFb0026821
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Boyland JT, 2005, ACM SIGPLAN NOTICES, V40, P283, DOI 10.1145/1047659.1040329
   Conchon S, 2007, ML'07: PROCEEDINGS OF THE 2007 WORKSHOP ON ML, P37
   DeLine R, 2001, ACM SIGPLAN NOTICES, V36, P59, DOI 10.1145/381694.378811
   Dolan Stephen, 2017, P S TRENDS FUNCT PRO, DOI DOI 10.1007/978-3-319-89719-6_6
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Hickey Rich, 2017, CLOJU REPERSISTENT H CLOJU REPERSISTENT H
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Lindley Sam, 2017, BEHAV TYPES THEORY T
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Matsuda Kazutaka, 2019, ABS1911002682019 COR ABS1911002682019 COR
   Mazurak K, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P77
   Morris JG, 2016, ACM SIGPLAN NOTICES, V51, P448, DOI 10.1145/3022670.2951925
   Odersky M., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P135, DOI 10.1145/224164.224195
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Owens S, 2016, LECT NOTES COMPUT SC, V9632, P589, DOI 10.1007/978-3-662-49498-1_23
   Padovani L, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000289
   Patterson D., 2019, ABS190300982 CORR
   Pottier F, 2002, ACM SIGPLAN NOTICES, V37, P319, DOI 10.1145/565816.503302
   Protzenko Jonathan, 2014, THESIS PARIS DIDEROT THESIS PARIS DIDEROT
   Puente Juan Pedro Bolivar, 2017, PACMPL 1 ICFP, DOI [10.1145/3110260, DOI 10.1145/3110260]
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Siek Jeremy, 2013, TYPE SAFETY 3 EASY L
   Simonet V, 2003, LECT NOTES COMPUT SC, V2895, P283
   Simonet V, 2003, ACM SIGPLAN NOTICES, V38, P39, DOI 10.1145/944746.944710
   Simonet V, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180476
   Skalka Christian, 2002, ELECT NOTES THEOR CO, V75, P61, DOI [10.1016/S1571-0661(04)80779-5, DOI 10.1016/S1571-0661(04)80779-5]
   Tov JA, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P447, DOI 10.1145/1926385.1926436
   Trifonov V., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P349
NR 38
TC 5
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 103
DI 10.1145/3408985
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700017
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Weidner, M
   Miller, H
   Meiklejohn, C
AF Weidner, Matthew
   Miller, Heather
   Meiklejohn, Christopher
TI Composing and Decomposing Op-Based CRDTs with Semidirect Products
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE CRDTs; Operational Transformation; Eventual Consistency
AB Operation-based Conflict-free Replicated Data Types (CRDTs) are eventually consistent replicated data types that automatically resolve conflicts between concurrent operations. Op-based CRDTs must be designed differently for each data type, and current designs use ad-hoc techniques to handle concurrent operations that do not naturally commute. We present a new construction, the semidirect product of op-based CRDTs, which combines the operations of two CRDTs into one while handling conflicts between their concurrent operations in a uniform way. We demonstrate the construction's utility by using it to construct novel CRDTs, as well as decomposing several existing CRDTs as semidirect products of simpler CRDTs. Although it reproduces common CRDT semantics, the semidirect product can be viewed as a restricted kind of operational transformation, thus forming a bridge between these two opposing techniques for constructing replicated data types.
C1 [Weidner, Matthew; Miller, Heather; Meiklejohn, Christopher] Carnegie Mellon Univ, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Weidner, M (corresponding author), Carnegie Mellon Univ, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
EM maweidne@andrew.cmu.edu; heather.miller@cs.cmu.edu;
   cmeiklej@andrew.cmu.edu
CR [Anonymous], 2004, ABSTRACT ALGEBRA
   [Anonymous], 2020, MIRAGEOS PROJ
   AntidoteDB, 2019, DAT ANT
   Baquero C., 2017, ABS171004469 CORR
   Baquero C, 2016, PROCEEDINGS OF THE 2ND WORKSHOP ON THE PRINCIPLES AND PRACTICE OF CONSISTENCY FOR DISTRIBUTED DATA, PAPOC 2016, DOI 10.1145/2911151.2911159
   Baquero Carlos., 2015, Composition of State-based CRDTs
   Basho, 2015, RIAK DAT
   Conway Neil, 2012, SOCC, DOI 10.1145/2391229.2391230
   De Porre K, 2019, PAPOC '19: PROCEEDINGS OF THE 6TH WORKSHOP ON PRINCIPLES AND PRACTICE OF CONSISTENCY FOR DISTRIBUTED DATA, DOI 10.1145/3301419.3323974
   Défago X, 2004, ACM COMPUT SURV, V36, P372, DOI 10.1145/1041680.1041682
   Fidge CJ, 1988, P AUSTR COMP SCI C, V10, P56
   Imine A, 2003, ECSCW 2003: PROCEEDINGS OF THE EIGHTH EUROPEAN CONFERENCE ON COMPUTER SUPPORTED COOPERATIVE WORK, P277
   Kaki G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360580
   Kleppmann Martin, 2018, ABS180504263 CORR
   Kleppmann Martin., 2016, ABS160803960 CORR
   Kuper Lindsey, 2013, P 2 ACM SIGPLAN WORK, P71, DOI 10.1145/2502323.2502326
   Leijnse A, 2019, PAPOC '19: PROCEEDINGS OF THE 6TH WORKSHOP ON PRINCIPLES AND PRACTICE OF CONSISTENCY FOR DISTRIBUTED DATA, DOI 10.1145/3301419.3323971
   Martins Rijo Andre dos Reis, 2018, THESIS U NOVA LISBOA
   Mattern F., 1989, Parallel and Distributed Algorithms. Proceedings of the International Workshop, P215
   Meiklejohn C, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P184, DOI 10.1145/2790449.2790525
   Preguiça N, 2009, INT CON DISTR COMP S, P395, DOI 10.1109/ICDCS.2009.20
   Preguica Nuno, 2018, CONFLICT FREE REPLIC, P1, DOI [10.1007/978-3-319-63962-8_185-1, DOI 10.1007/978-3-319-63962-8_185-1]
   Preguica Nuno M, 2018, ABS180610254 CORR
   Ressel M., 1996, CSCW 96 P ACM 1996 C, P288, DOI DOI 10.1145/240080.240305
   Rosenfeld A., 1968, INTRO ALGEBRAIC STRU
   Shapiro Marc, 2011, Research Report RR- 7506
   Weidner M, 2020, 7TH WORKSHOP ON PRINCIPLES AND PRACTICE OF CONSISTENCY FOR DISTRIBUTED DATA (PAPOC '20), DOI 10.1145/3380787.3393687
   Younes G, 2017, PROCEEDINGS OF THE 3RD INTERNATIONAL WORKSHOP ON PRINCIPLES AND PRACTICE OF CONSISTENCY FOR DISTRIBUTED DATA (PAPOC 17), DOI 10.1145/3064889.3064892
NR 28
TC 4
Z9 5
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 94
DI 10.1145/3408976
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700008
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Abdulla, PA
   Atig, MF
   Rezvan, R
AF Abdulla, Parosh Aziz
   Atig, Mohamed Faouzi
   Rezvan, Rojin
TI Parameterized Verification under TSO is PSPACE-Complete
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Model-Checking; Parameterized Verification; Weak Memory Models; Total
   Store Ordering
ID MODEL CHECKING; SYSTEMS; ABSTRACTION
AB We consider parameterized verification of concurrent programs under the Total Store Order (TSO) semantics. A program consists of a set of processes that share a set of variables on which they can perform read and write operations. We show that the reachability problem for a system consisting of an arbitrary number of identical processes is PSPACE-complete. We prove that the complexity is reduced to polynomial time if the processes are not allowed to read the initial values of the variables in the memory. When the processes are allowed to perform atomic read-modify-write operations, the reachability problem has a non-primitive recursive complexity.
C1 [Abdulla, Parosh Aziz; Atig, Mohamed Faouzi] Uppsala Univ, Uppsala, Sweden.
   [Rezvan, Rojin] Sharif Univ, Tehran, Iran.
C3 Uppsala University; Sharif University of Technology
RP Abdulla, PA (corresponding author), Uppsala Univ, Uppsala, Sweden.
EM parosh@it.uu.se; mohamed_faouzi.atig@it.uu.se; rojinrezvan@gmail.com
CR Abdulla Parosh Aziz, 2012, International Journal on Software Tools for Technology Transfer, V14, P109, DOI 10.1007/s10009-011-0216-8
   Abdulla PA, 2004, IEEE S LOG, P345, DOI 10.1109/LICS.2004.1319629
   Abdulla PA, 2003, THEOR COMPUT SCI, V290, P241, DOI 10.1016/S0304-3975(01)00330-9
   Abdulla P, 2016, INT J SOFTW TOOLS TE, V18, P495, DOI 10.1007/s10009-015-0406-x
   Abdulla PA, 2016, INT J SOFTW TOOLS TE, V18, P469, DOI 10.1007/s10009-016-0424-3
   Abdulla PA, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1117, DOI 10.1145/3314221.3314649
   Abdulla PA, 2018, LOG METH COMPUT SCI, V14, DOI 10.23638/LMCS-14(1:9)2018
   Abdulla PA, 2010, LECT NOTES COMPUT SC, V6269, P86, DOI 10.1007/978-3-642-15375-4_7
   Abdulla Parosh Aziz, 2018, 29 INT C CONC THEOR, V6, p1S6
   Abdulla Parosh Aziz, 2018, Handbook of Model Checking, P685, DOI [10.1007/978-3-319-10575-8\_21, DOI 10.1007/978-3-319-10575-8]
   [Anonymous], 1994, The SPARC Architecture Manual, Version 9
   APT KR, 1986, INFORM PROCESS LETT, V22, P307, DOI 10.1016/0020-0190(86)90071-2
   Atig MF, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P7, DOI 10.1145/1706299.1706303
   Bloem R., 2016, ACM SIGACT News, V47, P53, DOI 10.1145/2951860.2951873
   Boigelot Bernard, 2003, P LECT NOTES COMPUTE, V2725, DOI [10.1007/978-3-540-45069, DOI 10.1007/978-3-540-45069]
   Bouajjani Ahmed, 2012, International Journal on Software Tools for Technology Transfer, V14, P167, DOI 10.1007/s10009-011-0205-y
   Bouajjani Ahmed, 2013, P LECT NOTES COMPUTE, V7792, p533S553
   Burckhardt S, 2014, FOUND TRENDS PROGRAM, V1, P2
   CHENG A, 1995, THEOR COMPUT SCI, V147, P117, DOI 10.1016/0304-3975(94)00231-7
   Delzanno G, 2010, LECT NOTES COMPUT SC, V6269, P313, DOI 10.1007/978-3-642-15375-4_22
   Derevenetc Egor, 2015, THESIS U KAISERSLAUT
   Elver M, 2014, INT S HIGH PERF COMP, P165, DOI 10.1109/HPCA.2014.6835927
   Emerson E. Allen, 2000, 15 ANN IEEE S LOG CO, DOI [10.1109/LICS.2000.855761, DOI 10.1109/LICS.2000.855761]
   Emerson E. Allen, 2004, P LECT NOTES COMPUTE, V3210, DOI [10.1007/978-3-540-30124, DOI 10.1007/978-3-540-30124]
   Emerson E. Allen, 2003, CORRECT HARDWARE DES, V2860
   Esparza J., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P352, DOI 10.1109/LICS.1999.782630
   Esparza J, 2016, J ACM, V63, DOI 10.1145/2842603
   Fortin Marie, 2017, P LECT NOTES COMPU 2, V10427
   Ganty P, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160915
   Gastin Paul, 2010, P LECT NOTES COMPUTE, V6269, DOI [10.1007/978-3-642-15375-4, DOI 10.1007/978-3-642-15375-4]
   GERMAN SM, 1992, J ACM, V39, P675, DOI 10.1145/146637.146681
   Hague M, 2011, LEIBNIZ INT PR INFOR, V13, P457, DOI 10.4230/LIPIcs.FSTTCS.2011.457
   Kahlon V, 2008, IEEE S LOG, P181, DOI 10.1109/LICS.2008.37
   Kaiser Alexander, 2010, Computer Aided Verification. Proceedings 22nd International Conference, CAV 2010, P645, DOI 10.1007/978-3-642-14295-6_55
   Kesten Y, 2001, THEOR COMPUT SCI, V256, P93, DOI 10.1016/S0304-3975(00)00103-1
   La Torre Salvatore, 2015, 26 INT C CONC THEOR, V42, p72S84
   Lahav O, 2016, ACM SIGPLAN NOTICES, V51, P649, DOI 10.1145/2914770.2837643
   Muscholl Anca, 2017, P LECT NOTES COMPUTE, V10145, DOI [10.1007/978-3-319, DOI 10.1007/978-3-319]
   Namjoshi Kedar S., 2016, P LECT NOTES COMPUTE, V9636
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Ros Alberto, 2016, 2016 49th Annual IEEE/ACM International Symposium on Microarchitecture (MICRO), DOI 10.1109/MICRO.2016.7783736
   Sarkar S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P175
   Savitch W. J., 1970, Journal of computer and system sciences, V4, P177, DOI [DOI 10.1016/S0022-0000(70)80006-X, 10. 1016/S0022-0000(70)80006-X]
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
NR 44
TC 6
Z9 6
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 26
DI 10.1145/3371094
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400027
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Maillard, K
   Hritcu, C
   Rivas, E
   Van Muylder, A
AF Maillard, Kenji
   Hritcu, Catalin
   Rivas, Exequiel
   Van Muylder, Antoine
TI The Next 700 Relational Program Logics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program verification; relational program logics; side-effects; monads;
   state; I/O; nondeterrninism; probabilities; exceptions; dependent types;
   semantics; relative monads; foundations
ID INFORMATION-FLOW; DEPENDENT TYPES; SAFETY; VERIFICATION; MONADS; STATE
AB We propose the first framework for defining relational program logics for arbitrary monadic effects. The framework is embedded within a relational dependent type theory and is highly expressive. At the semantic level, we provide an algebraic presentation of relational specifications as a class of relative monads, and link computations and specifications by introducing relational effect observations, which map pairs of monadic computations to relational specifications in a way that respects the algebraic structure. For an arbitrary relational effect observation, we generically define the core of a sound relational program logic, and explain how to complete it to a full-fledged logic for the monadic effect at hand. We show that this generic framework can be used to define relational program logics for effects as diverse as state, input-output, nondeterminism, and discrete probabilities. We, moreover, show that by instantiating our framework with state and unbounded iteration we can embed a variant of Benton's Relational Hoare Logic, and also sketch how to reconstruct Relational Hoare Type Theory. Finally, we identify and overcome conceptual challenges that prevented previous relational program logics from properly dealing with control effects, and are the first to provide a relational program logic for exceptions.
C1 [Maillard, Kenji; Hritcu, Catalin; Rivas, Exequiel; Van Muylder, Antoine] Inria Paris, Paris, France.
   [Maillard, Kenji] ENS Paris, Paris, France.
   [Van Muylder, Antoine] Univ Paris, Paris, France.
C3 Universite PSL; Ecole Normale Superieure (ENS); Universite Paris Cite
RP Maillard, K (corresponding author), Inria Paris, Paris, France.; Maillard, K (corresponding author), ENS Paris, Paris, France.
RI Hritcu, Catalin/D-5964-2012
OI Maillard, Kenji/0000-0001-5554-3203; Rivas, Exequiel/0000-0002-2114-624X
FU European Research Council under ERC Starting Grant SECOMP [715753];
   Nomadic Labs via a grant on the lEvolution, Semantics, and Engineering
   of the F. Verification System
FX We thank Alejandro Aguirre, Danel Ahman, Robert Atkey, Gilles Barthe,
   Shin-ya Katsumata, Satoshi Kura, Guido Martinez, Ramkumar Ramachandra,
   Nikhil Swamy, Eric Tanter, and the anonymous reviewers for their helpful
   feedback. This work was, in part, supported by the European Research
   Council under ERC Starting Grant SECOMP (715753) and by Nomadic Labs via
   a grant on the lEvolution, Semantics, and Engineering of the F.
   Verification System.
CR Abate C, 2019, P IEEE COMPUT SECUR, P256, DOI 10.1109/CSF.2019.00025
   Aguirre A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110265
   Ahman D, 2017, ACM SIGPLAN NOTICES, V52, P515, DOI 10.1145/3093333.3009878
   Ahmed A, 2009, ACM SIGPLAN NOTICES, V44, P340, DOI 10.1145/1594834.1480925
   Altenkirch T, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:3)2015
   Delbianco GA, 2013, ACM SIGPLAN NOTICES, V48, P363, DOI [10.1145/2544174.2500593, 10.1145/2500365.2500593]
   Antonopoulos T, 2017, ACM SIGPLAN NOTICES, V52, P362, DOI [10.1145/3140587.3062378, 10.1145/3062341.3062378]
   Audebaud P, 2006, MATH PROGRAM CONSTRU
   Banerjee A, 2016, LIPICS
   Barthe G, 2013, FDN SECURITY ANAL DE
   Barthe G, 2019, VERIFYING RELATIONAL
   Barthe G, 2017, ACM SIGPLAN NOTICES, V52, P161, DOI 10.1145/3093333.3009896
   Barthe G, 2016, J LOG ALGEBR METHODS, V85, P847, DOI 10.1016/j.jlamp.2016.05.004
   Barthe G, 2015, LECT NOTES COMPUT SC, V9450, P387, DOI 10.1007/978-3-662-48899-7_27
   Barthe G, 2015, ACM SIGPLAN NOTICES, V50, P55, DOI [10.1145/2775051.2677000, 10.1145/10.1145/2676726.2677000]
   Barthe G, 2014, ACM SIGPLAN NOTICES, V49, P193, DOI 10.1145/2535838.2535847
   Barthe G, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2492061
   Barthe G, 2011, MATH STRUCT COMP SCI, V21, P1207, DOI 10.1017/S0960129511000193
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Basin D. A., 2017, IACR CRYPTOLOGY EPRI, V2017, P753
   Benton Nick, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P56, DOI 10.1007/978-3-319-30936-1_3
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Benton N, 2002, LECT NOTES COMPUT SC, V2395, P42
   Benton N, 2013, TLCA
   Benton N, 2014, ACM SIGPLAN NOTICES, V49, P619, DOI 10.1145/2535838.2535869
   Benton N, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P301, DOI 10.1145/1599410.1599447
   Berger C, 2012, J PURE APPL ALGEBRA, V216, P2029, DOI 10.1016/j.jpaa.2012.02.039
   Blanchet B, 2008, J LOGIC ALGEBR PROGR, V75, P3, DOI 10.1016/j.jlap.2007.06.002
   Boulier S, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P182, DOI 10.1145/3018610.3018620
   Bowler N, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(3:22)2013
   Carbin M, 2012, ACM SIGPLAN NOTICES, V47, P169, DOI 10.1145/2345156.2254086
   Casinghino C, 2014, ACM SIGPLAN NOTICES, V49, P33, DOI 10.1145/2535838.2535883
   Chadha R, 2016, ACM T COMPUT LOG, V17, DOI 10.1145/2926715
   Ciobâca S, 2016, FORM ASP COMPUT, V28, P469, DOI 10.1007/s00165-016-0361-7
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   DalLago Ugo, 2017, EFFECTFUL APPL BISIM
   Dreyer D, 2012, J FUNCT PROGRAM, V22, P477, DOI 10.1017/S095679681200024X
   Dreyer D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:16)2011
   Dreyer D, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P185, DOI 10.1145/1706299.1706323
   Eilers Marco, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P502, DOI 10.1007/978-3-319-89884-1_18
   Faissole F, 2017, PPS 2017 WORKSH PROG
   Farzan A, 2019, LNCS, DOI [DOI 10.1007/978-3-030-25540-4_11, DOI 10.1007/978-3-030-25540-4, 10.1007/978-3-030-25540-4_11]
   Führmann C, 2002, LECT NOTES COMPUT SC, V2303, P144
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Gavazzo F, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P452, DOI 10.1145/3209108.3209149
   Girka T, 2015, AUT TECHN VER AN 13
   Girka T, 2017, P 19 INT S PRINC PRA
   Giry M, 1982, CATEGORICAL ASPECTS
   Godlin B, 2010, TIME VERIFICATION ES
   Grimm N., 2018, P 7 ACM SIGPLAN INT, P130
   He SB, 2018, J AUTOM REASONING, V60, P23, DOI 10.1007/s10817-017-9421-9
   Hoffmann J., 2017, RELATIONAL COST ANAL
   Hur C, 2012, MARRIAGE BISIMULATIO
   Hur Chung-Kil, 2014, Technical Report. Technical Report MPI-SWS-2014-003
   Jacobs B, 2015, THEOR COMPUT SCI, V604, P30, DOI 10.1016/j.tcs.2015.03.020
   Kapulkin C, 2018, HOMOTOPICAL INVERSE
   Katsumata S, 2014, ACM SIGPLAN NOTICES, V49, P633, DOI 10.1145/2535838.2535846
   KELLY GM, 1982, BASIC CONCEPTS ENRIC
   Koutavas V, 2006, ACM SIGPLAN NOTICES, V41, P141, DOI 10.1145/1111320.1111050
   Kundu S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P327, DOI 10.1145/1542476.1542513
   Lahiri Shuvendu K., 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P712, DOI 10.1007/978-3-642-31424-7_54
   Lochbihler A, 2018, JAR
   Lucanu D, 2015, FORM ASP COMPUT, V27, P701, DOI 10.1007/s00165-014-0319-6
   Luth C, 2002, ICFP
   Maillard K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341708
   Mitchell J. C, 1986, POPL
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Nanevski A, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2491522.2491523
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   Nanevski A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P229
   Naumann DA, 2006, LECT NOTES COMPUT SC, V4189, P279
   Pedrot Pierre-Marie, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P245, DOI 10.1007/978-3-319-89884-1_9
   Petcher A, 2015, POST
   Plotkin G. D, 2002, FOSSACS
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Qu W, 2019, ICFP
   Radicek I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158124
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sangiorgi D, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1889997.1890002
   Sato T, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290351
   Shulman M, 2015, MATH STRUCT COMP SCI, V25, P1203, DOI 10.1017/S0960129514000565
   Sousa M, 2016, ACM SIGPLAN NOTICES, V51, P57, DOI 10.1145/2908080.2908092
   Street Ross, 1972, J. Pure Appl. Algebra, V2, P149, DOI [10.1016/0022-4049(72)90019-9, DOI 10.1016/0022-4049(7]
   Sumii E, 2009, CSL
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   Terauchi T, 2005, LECT NOTES COMPUT SC, V3672, P352
   Timany A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341709
   Timany A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158152
   Tonelli S, 2013, THESIS STOCKHOLM U
   Unruh D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290346
   Wang YP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158144
   Winograd-Cort D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110254
   Yang H, 2007, THEOR COMPUT SCI, V375, P308, DOI 10.1016/j.tcs.2006.12.036
   Yasuoka H, 2014, THEOR COMPUT SCI, V538, P167, DOI 10.1016/j.tcs.2013.07.031
   Zaks A, 2008, LECT NOTES COMPUT SC, V5014, P35, DOI 10.1007/978-3-540-68237-0_5
   Zeilberger N., 2009, The Logical Basis of Evaluation Order and Pattern-Matching
   Zhang D, 2017, ACM SIGPLAN NOTICES, V52, P888, DOI 10.1145/3093333.3009884
   Zhang Hengchu, 2019, CORR ABS190512594, V3
NR 99
TC 16
Z9 17
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 4
DI 10.1145/3371072
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400005
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Song, Y
   Cho, M
   Kim, D
   Kim, Y
   Kang, J
   Hur, CK
AF Song, Youngju
   Cho, Minki
   Kim, Dongjoo
   Kim, Yonghyun
   Kang, Jeehoon
   Hur, Chung-Kil
TI CompCertM: CompCert with C-Assembly Linking and Lightweight Modular
   Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Compositional Compiler Verification; CompCert; Multi-Language Linking
AB Supporting multi-language linking such as linking C and handwritten assembly modules in the verified compiler CompCert requires a more compositional verification technique than that used in CompCert just supporting separate compilation. The two extensions, CompCertX and Compositional CompCert, supporting multi-language linking take different approaches. The former simplifies the problem by imposing restrictions that the source modules should have no mutual dependence and be verified against certain well-behaved specifications. On the other hand, the latter develops a new verification technique that directly solves the problem but at the expense of significantly increasing the verification cost.
   In this paper, we develop a novel lightweight verification technique, called RUSC (Refinement Under Self-related Contexts), and demonstrate how RUSC can solve the problem without any restrictions but still with low verification overhead. For this, we develop CompCertM, a full extension of the latest version of CompCert supporting multi-language linking. Moreover, we demonstrate the power of RUSC as a program verification technique by modularly verifying interesting programs consisting of C and handwritten assembly against their mathematical specifications.
C1 [Song, Youngju; Cho, Minki; Kim, Dongjoo; Kim, Yonghyun; Hur, Chung-Kil] Seoul Natl Univ, Seoul, South Korea.
   [Kang, Jeehoon] Korea Adv Inst Sci & Technol, Daejeon, South Korea.
C3 Seoul National University (SNU); Korea Advanced Institute of Science &
   Technology (KAIST)
RP Song, Y (corresponding author), Seoul Natl Univ, Seoul, South Korea.
EM youngju.song@sf.snu.ac.kr; minki.cho@sf.snu.ac.kr;
   dongjoo.kim@sf.snu.ac.kr; yonghyun.kim@sf.snu.ac.kr;
   jeehoon.kang@kaist.ac.kr; gil.hur@sf.snu.ac.kr
RI Kang, Jeehoon/E-6130-2019
OI Kang, Jeehoon/0000-0002-2115-0871; Cho, Minki/0000-0002-6684-0921; Song,
   Youngju/0000-0001-7093-3824
FU Basic Science Research Program through the National Research Foundation
   of Korea (NRF) - Ministry of Science and ICT [2017R1A2B2007512]; KAIST
   new faculty fund [G04190021]
FX We thank anonymous reviewers for very helpful feedback and Sung-hwan Lee
   and Yeonwoo Kim for their contribution to early development. This work
   was supported in part by the Basic Science Research Program through the
   National Research Foundation of Korea (NRF) funded by the Ministry of
   Science and ICT (2017R1A2B2007512) and by a KAIST new faculty fund
   (Project No. G04190021).
CR Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Appel Andrew W, 2014, PROGRAM LOGICS CERTI, DOI DOI 10.1017/CBO9781107256552
   Beringer L, 2014, LECT NOTES COMPUT SC, V8410, P107
   Dreyer D, 2010, ACM SIGPLAN NOTICES, V45, P143, DOI 10.1145/1932681.1863566
   Gu Liang, 2011, P 2 ACM SIGOPS AS PA
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Hur Chung-Kil, 2012, P 39 ACM SIGPLAN SIG
   Jiang HR, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P111, DOI 10.1145/3314221.3314595
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Kang J, 2016, ACM SIGPLAN NOTICES, V51, P178, DOI 10.1145/2914770.2837642
   Kang J, 2015, ACM SIGPLAN NOTICES, V50, P326, DOI [10.1145/2737924.2738005, 10.1145/2813885.2738005]
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Neis G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P166, DOI 10.1145/2784731.2784764
   New MS, 2016, ACM SIGPLAN NOTICES, V51, P103, DOI 10.1145/3022670.2951941
   Patterson D, 2017, ACM SIGPLAN NOTICES, V52, P495, DOI [10.1145/3062341.3062347, 10.1145/3140587.3062347]
   Patterson Daniel, 2019, P 24 ACM SIGPLAN INT
   Perconti James T., 2014, P 23 EUR S PROGR ESO
   Scherer Gabriel, 2018, P EUR JOINT C THEOR
   Stewart G, 2015, ACM SIGPLAN NOTICES, V50, P275, DOI [10.1145/2676726.2676985, 10.1145/2775051.2676985]
   Stewart Gordon, 2015, THESIS PRINCETON U
   YutingWang Pierre Wilke, 2019, P 46 ACM SIGPLAN SIG
NR 23
TC 19
Z9 20
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 23
DI 10.1145/3371091
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400024
OA gold
DA 2024-07-18
ER

PT J
AU Vandenbroucke, A
   Schrijvers, T
AF Vandenbroucke, Alexander
   Schrijvers, Tom
TI PλωNK: Functional Probabilistic NetKAT
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Probabilistic Programming; Network Modelling; Quasi-Borel Spaces;
   omega-QBS; NetKAT
ID SEMANTIC-FOUNDATIONS
AB This work presents P lambda omega NK, a functional probabilistic network programming language that extends Probabilistic NetKAT (PNK). Like PNK, it enables probabilistic modelling of network behaviour, by providing probabilistic choice and infinite iteration (to simulate looping network packets). Yet, unlike PNK, it also offers abstraction and higher-order functions to make programming much more convenient.
   The formalisation of P lambda omega NK is challenging for two reasons: Firstly, network programming induces multiple side effects (in particular, parallelism and probabilistic choice) which need to be carefully controlled in a functional setting. Our system uses an explicit syntax for thunks and sequencing which makes the interplay of these effects explicit. Secondly, measure theory, the standard domain for formalisations of (continuous) probablistic languages, does not admit higher-order functions. We address this by leveraging omega-Quasi Borel Spaces (omega QBSes), a recent advancement in the domain theory of probabilistic programming languages.
   We believe that our work is not only useful for bringing abstraction to PNK, but that-as part of our contribution-we have developed the meta-theory for a probabilistic language that combines advanced features like higher-order functions, iteration and parallelism, which may inform similar meta-theoretic efforts.
C1 [Vandenbroucke, Alexander; Schrijvers, Tom] Katholieke Univ Leuven, Celestijnenlaan 200 A, B-3001 Leuven, Belgium.
C3 KU Leuven
RP Vandenbroucke, A (corresponding author), Katholieke Univ Leuven, Celestijnenlaan 200 A, B-3001 Leuven, Belgium.
EM alexander.vandenbroucke@kuleuven.be; tom.schrijvers@kuleuven.be
RI Schrijvers, Tom/A-6696-2016
OI Schrijvers, Tom/0000-0001-8771-5559
FU FWO [G095917N]
FX Alexander Vandenbroucke is an SB Fellow of the flemish Fund for
   Scientific Research(FWO), File No.: 1S68117N. This work is further
   supported by FWO Grant No. G095917N.
CR Aerts B, 2016, FRONT ARTIF INTEL AP, V285, P234, DOI 10.3233/978-1-61499-672-9-234
   Anderson CJ, 2014, ACM SIGPLAN NOTICES, V49, P113, DOI 10.1145/2535838.2535862
   Aumann Robert J., 1961, Illinois Journal of Mathematics, V5, P614
   Bacci G, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P669, DOI 10.1145/3209108.3209175
   Battenfeld I, 2007, ELECTRON NOTES THEOR, V172, P69, DOI 10.1016/j.entcs.2007.02.004
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   Cusumano-Towner MF, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P221, DOI 10.1145/3314221.3314642
   Danos V, 2011, INFORM COMPUT, V209, P966, DOI 10.1016/j.ic.2011.02.001
   Danvy Olivier, 2001, Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming. PPDP'01, P162, DOI DOI 10.1145/773184.773202
   De Maeyer D, 2013, MOL BIOSYST, V9, P1594, DOI 10.1039/c3mb25551d
   Ehrhard T, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(1:3)2019
   Fierens D, 2015, THEOR PRACT LOG PROG, V15, P358, DOI 10.1017/S1471068414000076
   Foster N, 2016, LECT NOTES COMPUT SC, V9632, P282, DOI 10.1007/978-3-662-49498-1_12
   Foster N, 2013, IEEE COMMUN MAG, V51, P128, DOI 10.1109/MCOM.2013.6461197
   Gacek A, 2008, LECT NOTES ARTIF INT, V5195, P154, DOI 10.1007/978-3-540-71070-7_13
   Ge H, 2018, PR MACH LEARN RES, V84
   Goodman ND, 2013, ACM SIGPLAN NOTICES, V48, P399, DOI 10.1145/2480359.2429117
   Goodman Noah D., 2012, ARXIV PREPRINT ARXIV
   Goubault-Larrecq J, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785809
   Goubault-Larrecq J, 2011, IEEE S LOG, P97, DOI 10.1109/LICS.2011.23
   Heunen C, 2017, IEEE S LOG
   JONES C, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P186
   Jung A., 1998, Electronic Notes in Theoretical Computer Science, V13, DOI 10.1016/S1571-0661(05)80216-6
   Kisa D, 2014, FOURTEENTH INTERNATIONAL CONFERENCE ON THE PRINCIPLES OF KNOWLEDGE REPRESENTATION AND REASONING, P558
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Levy P. B., 2001, Call-by-push-value
   Lu Anthony, 2016, THESIS MASSACHUSETTS
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Reich Joshua., 2013, Technical Report of USENIX
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P363, DOI 10.1023/A:1010027404223
   SAHEBDJAHROMI N, 1980, THEOR COMPUT SCI, V12, P19, DOI 10.1016/0304-3975(80)90003-1
   Scibior Adam, 2018, PROC ACM PROGRAM LAN, DOI DOI 10.1145/3236778
   Smolka S, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P190, DOI 10.1145/3314221.3314639
   Smolka S, 2017, ACM SIGPLAN NOTICES, V52, P557, DOI 10.1145/3093333.3009843
   Smolka S, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P328, DOI 10.1145/2784731.2784761
   Smolka Steffen, 2017, ABS170702772 CORR
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Vakar Matthijs, 2019, PACMPL 3 POPL 2019
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
NR 41
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 39
DI 10.1145/3371107
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400040
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Bader, J
   Scott, A
   Pradel, M
   Chandra, S
AF Bader, Johannes
   Scott, Andrew
   Pradel, Michael
   Chandra, Satish
TI Getafix: Learning to Fix Bugs Automatically
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Automated program repair; Patch generation; Code transform
AB Static analyzers help find bugs early by warning about recurring bug categories. While fixing these bugs still remains a mostly manual task in practice, we observe that fixes for a specific bug category often are repetitive. This paper addresses the problem of automatically fixing instances of common bugs by learning from past fixes. We present Getafix, an approach that produces human-like fixes while being fast enough to suggest fixes in time proportional to the amount of time needed to obtain static analysis results in the first place.
   Getafix is based on a novel hierarchical clustering algorithm that summarizes fix patterns into a hierarchy ranging from general to specific patterns. Instead of an expensive exploration of a potentially large space of candidate fixes, Getafix uses a simple yet effective ranking technique that uses the context of a code change to select the most appropriate fix for a given bug.
   Our evaluation applies Getafix to 1,268 bug fixes for six bug categories reported by popular static analyzers for Java, including null dereferences, incorrect API calls, and misuses of particular language constructs. The approach predicts exactly the human-written fix as the top-most suggestion between 12% and 91% of the time, depending on the bug category. The top-5 suggestions contain fixes for 526 of the 1,268 bugs. Moreover, we report on deploying the approach within Facebook, where it contributes to the reliability of software used by billions of people. To the best of our knowledge, Getafix is the first industrially-deployed automated bug-fixing tool that learns fix patterns from past, human-written fixes to produce human-like fixes.
C1 [Bader, Johannes; Scott, Andrew; Pradel, Michael; Chandra, Satish] Facebook, Menlo Pk, CA 94025 USA.
C3 Facebook Inc
RP Bader, J (corresponding author), Facebook, Menlo Pk, CA 94025 USA.
EM jobader@fb.com; andrewscott@fb.com; michael@binaervarianz.de;
   satch@fb.com
CR Aftandilian E., 2012, 2012 12th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2012), P14, DOI 10.1109/SCAM.2012.28
   Allamanis M, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3212695
   [Anonymous], 2017, ABS171011054 CORR
   Benzecri J-P., 1982, Cahiers de l'analyse des donnees, V7, P209
   Brown DB, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P511, DOI 10.1145/3106237.3106280
   Calcagno C, 2015, LECT NOTES COMPUT SC, V9058, P3, DOI 10.1007/978-3-319-17524-9_1
   Christakis M, 2016, IEEE INT CONF AUTOM, P332, DOI 10.1145/2970276.2970347
   Cornu B., 2015, ARXIV PREPRINT ARXIV
   Falleri Jean-Remy, 2014, P 29 ACM IEEE INT C, P313
   Gupta R, 2017, AAAI CONF ARTIF INTE, P1345
   Hua JR, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P12, DOI 10.1145/3180155.3180245
   Kim D, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P802, DOI 10.1109/ICSE.2013.6606626
   Kutsia T, 2014, J AUTOM REASONING, V52, P155, DOI 10.1007/s10817-013-9285-6
   Le Goues C, 2019, COMMUN ACM, V62, P56, DOI 10.1145/3318162
   Le Goues C, 2012, IEEE T SOFTWARE ENG, V38, P54, DOI 10.1109/TSE.2011.104
   Le XBD, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P213, DOI 10.1109/SANER.2016.76
   Long F, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P727, DOI 10.1145/3106237.3106253
   Long F, 2016, ACM SIGPLAN NOTICES, V51, P298, DOI 10.1145/2914770.2837617
   Marginean A, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2019), P269, DOI 10.1109/ICSE-SEIP.2019.00039
   Martinez M, 2012, Mining repair actions for guiding automated program fixing
   Martínez M, 2015, EMPIR SOFTW ENG, V20, P176, DOI 10.1007/s10664-013-9282-8
   Martinez Matias, 2018, ARXIVARXIV181008532
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Pradel Michael, 2018, ABS180511683 CORR
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Rolim Reudismam, 2018, ARXIV180303806
   Soto M, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P221, DOI 10.1109/SANER.2018.8330211
   Soto M, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P512, DOI [10.1145/2901739.2903495, 10.1109/MSR.2016.067]
   Wang K, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P481, DOI 10.1145/3192366.3192384
   Wen M, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/3180155.3180233
   Yin Pengcheng, 2018, 181013337 CORR
NR 31
TC 128
Z9 135
U1 0
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 159
DI 10.1145/3360585
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500044
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Kaki, G
   Priya, S
   Sivaramakrishnan, KC
   Jagannathan, S
AF Kaki, Gowtham
   Priya, Swarn
   Sivaramakrishnan, K. C.
   Jagannathan, Suresh
TI Mergeable Replicated Data Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Replication; Weak Consistency; CRDTs; Git; Version Control
AB Programming geo-replicated distributed systems is challenging given the complexity of reasoning about different evolving states on different replicas. Existing approaches to this problem impose significant burden on application developers to consider the effect of how operations performed on one replica are witnessed and applied on others. To alleviate these challenges, we present a fundamentally different approach to programming in the presence of replicated state. Our insight is based on the use of invertible relational specifications of an inductively-defined data type as a mechanism to capture salient aspects of the data type relevant to how its different instances can be safely merged in a replicated environment. Importantly, because these specifications only address a data type's (static) structural properties, their formulation does not require exposing low-level system-level details concerning asynchrony, replication, visibility, etc. As a consequence, our framework enables the correct-by-construction synthesis of rich merge functions over arbitrarily complex ( i.e., composable) data types. We show that the use of a rich relational specification language allows us to extract sufficient conditions to automatically derive merge functions that have meaningful non-trivial convergence properties. We incorporate these ideas in a tool called Quark, and demonstrate its utility via a detailed evaluation study on real-world benchmarks.
C1 [Kaki, Gowtham; Priya, Swarn; Jagannathan, Suresh] Purdue Univ, W Lafayette, IN 47907 USA.
   [Sivaramakrishnan, K. C.] IIT Madras, Chennai, Tamil Nadu, India.
C3 Purdue University System; Purdue University; Indian Institute of
   Technology System (IIT System); Indian Institute of Technology (IIT) -
   Madras
RP Kaki, G (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
OI Kaki, Gowtham/0000-0002-4189-3189
CR Alvaro P., 2011, CIDR, P249
   [Anonymous], 2000, ROBUST DISTRIBUTED S
   [Anonymous], 1998, Purely Functional Data Structures
   Bailis P., 2013, ACM SIGMOD International Conference on Management of Data, P761, DOI 10
   Bailis P, 2014, PROC VLDB ENDOW, V8, P185, DOI 10.14778/2735508.2735509
   Bailis P, 2013, PROC VLDB ENDOW, V7, P181, DOI 10.14778/2732232.2732237
   Balegas Valter, 2015, P 10 EUR C COMP SYST
   BOEHM HJ, 1995, SOFTWARE PRACT EXPER, V25, P1315, DOI 10.1002/spe.4380251203
   Bowen KennethA., 1979, Proceedings of the 1979 Annual Conference, ACM'79, P14, DOI [10.1145/800177.810020, DOI 10.1145/800177.810020]
   Brewer, 2013, MYTH ERIC BREWER WHY
   Burckhardt S., 2015, 29th European Conference on Object-Oriented Programming (ECOOP 2015), volume 37 of Leibniz International Proceedings in Informatics (LIPIcs), P568
   Burckhardt S, 2014, ACM SIGPLAN NOTICES, V49, P271, DOI 10.1145/2535838.2535848
   Burckhardt S, 2012, LECT NOTES COMPUT SC, V7313, P283, DOI 10.1007/978-3-642-31057-7_14
   Burckhardt S, 2010, ACM SIGPLAN NOTICES, V45, P691, DOI 10.1145/1932682.1869515
   Chang BYE, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P247, DOI 10.1145/1328438.1328469
   Crooks N, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1615, DOI 10.1145/2882903.2882951
   Erwig M, 2001, J FUNCT PROGRAM, V11, P467, DOI 10.1017/S0956796801004075
   Functional Graph, 2008, FUNCT GRAPH LIB FUNCT GRAPH LIB
   Gotsman A, 2016, ACM SIGPLAN NOTICES, V51, P371, DOI 10.1145/2914770.2837625
   Houshmand F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290387
   Jeannet B, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667050
   Kahrs S, 2001, J FUNCT PROGRAM, V11, P425
   Kaki G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158115
   Kaki G, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P311, DOI 10.1145/2628136.2628159
   Kaki Gowtham, 2019, 3 SUMM ADV PROGR LAN 3 SUMM ADV PROGR LAN, V136
   Lesani M, 2016, ACM SIGPLAN NOTICES, V51, P357, DOI 10.1145/2914770.2837622
   Li Cheng, 2012, 10 USENIX S OP SYST, P265
   Li Cheng, P 2014 USENIX C USEN, P281
   Li Cheng, 2014, 2014 USENIX Annual Technical Conference (USENIX ATC 14), P281
   Maier David., 2018, Declarative Logic Programming: Theory, Systems, and Applications, P3, DOI DOI 10.1145/3191315.3191317
   PPX, 2017, PPX EXT POINTS PPX EXT POINTS
   Preguiça N, 2009, INT CON DISTR COMP S, P395, DOI 10.1109/ICDCS.2009.20
   RUBiS, 2014, RICE U BIDD SYST RICE U BIDD SYST
   Shapiro M, 2011, LECT NOTES COMPUT SC, V6976, P386, DOI 10.1007/978-3-642-24550-3_29
   Sivaramakrishnan KC, 2015, ACM SIGPLAN NOTICES, V50, P413, DOI [10.1145/2813885.2737981, 10.1145/2737924.2737981]
   TPC, 2018, TPC BENCHM TPC BENCHM
   Twissandra, 2014, TWITT CLON CASS
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
NR 38
TC 12
Z9 15
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 154
DI 10.1145/3360580
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500039
OA gold
DA 2024-07-18
ER

PT J
AU Pan, R
   Hu, QHP
   Xu, GW
   D'Antoni, L
AF Pan, Rong
   Hu, Qinheping
   Xu, Gaowei
   D'Antoni, Loris
TI Automatic Repair of Regular Expressions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Repair; Regular Expressions; Program Synthesis
AB We introduce RFixer, a tool for repairing complex regular expressions using examples. Given an incorrect regular expression and sets of positive and negative examples, RFixer synthesizes the closest regular expression to the original one that is consistent with the examples. Automatically repairing regular expressions requires exploring a large search space because practical regular expressions: i) are large, ii) operate over very large alphabets e.g., UTF-16 and ASCII-and iii) employ complex constructs e.g., character classes and numerical quantifiers. RFixer's repair algorithm achieves scalability by taking advantage of structural properties of regular expressions to effectively prune the search space, and it employs satisfiability modulo theory solvers to efficiently and symbolically explore the sets of possible character classes and numerical quantifiers. RFixer could successfully compute minimal repairs for regular expressions collected from a variety of sources, whereas existing tools either failed to produce any repair or produced overly complex repairs.
C1 [Pan, Rong] Univ Texas Austin, Austin, TX 78712 USA.
   [Hu, Qinheping; Xu, Gaowei; D'Antoni, Loris] Univ Wisconsin, Dept Comp Sci, 1210 West Dayton St, Madison, WI 53706 USA.
C3 University of Texas System; University of Texas Austin; University of
   Wisconsin System; University of Wisconsin Madison
RP Pan, R (corresponding author), Univ Texas Austin, Austin, TX 78712 USA.
EM rpan@cs.utexas.edu
FU NSF [CNS-1763871, CCF-1750965, CCF-1744614, CCF-1704117]; UW-Madison
   OVRGE; WARF
FX We thank the anonymous reviewers for their feeback. This work was
   supported, in part, by NSF under grants CNS-1763871, CCF-1750965,
   CCF-1744614, and CCF-1704117; and by the UW-Madison OVRGE with funding
   from WARF.
CR Alquezar R., 1994, P ACL 02 WORKSH UNS, P291
   [Anonymous], 2009, The fourth paradigm: data-intensive scientific discovery
   Automata Tutor, 2015, DAT TOOL AUT TUT
   Bartoli A, 2016, IEEE T KNOWL DATA EN, V28, P1217, DOI 10.1109/TKDE.2016.2515587
   Bartoli A, 2014, COMPUTER, V47, P72, DOI 10.1109/MC.2014.344
   Bille P, 2005, THEOR COMPUT SCI, V337, P217, DOI 10.1016/j.tcs.2004.12.030
   Cochran RA, 2015, ACM SIGPLAN NOTICES, V50, P677, DOI [10.1145/2676726.2676973, 10.1145/2775051.2676973]
   COMPSCI, 194LEC016 COMPSCI
   D'Antoni L, 2015, ACM T COMPUT-HUM INT, V22, DOI 10.1145/2723163
   DAntoni Loris, 2015, B EATCS, V117
   Dupont P., 1996, Grammatical Inference: Learning Syntax from Sentences. Third International Colloquium, ICGI-96 Proceedings, P222, DOI 10.1007/BFb0033357
   Fernau H, 2005, LECT NOTES ARTIF INT, V3734, P297
   Galassi U, 2005, LECT NOTES ARTIF INT, V3607, P92
   GOLD EM, 1978, INFORM CONTROL, V37, P302, DOI 10.1016/S0019-9958(78)90562-4
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gulwani S, 2012, COMMUN ACM, V55, P97, DOI 10.1145/2240236.2240260
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Lee M, 2017, ACM SIGPLAN NOTICES, V52, P70, DOI [10.1145/3093335.2993244, 10.1145/2993236.2993244]
   Li Y., 2008, P C EMP METH NAT LAN, P21
   Rebele T, 2018, LECT NOTES ARTIF INT, V10938, P67, DOI 10.1007/978-3-319-93037-4_6
   RegExLib, 2017, REG EXPR LIB
   Singh R, 2016, ACM SIGPLAN NOTICES, V51, P343, DOI 10.1145/2914770.2837668
   THOMPSON K, 1968, COMMUN ACM, V11, P419, DOI 10.1145/363347.363387
   TUHKANEN P. KILPELAINEN AND R., 2003, P 8 S PROGR LANG SOF, P163
   Udupa A, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2499370.2462174
   Yannakakis M., 1991, P ACM S THEORY COMPU, P476
NR 26
TC 18
Z9 19
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 139
DI 10.1145/3360565
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500024
OA gold
DA 2024-07-18
ER

PT J
AU Chatterjee, K
   Goharshady, AK
   Okati, N
   Pavlogiannis, A
AF Chatterjee, Krishnendu
   Goharshady, Amir Kafshdar
   Okati, Nastaran
   Pavlogiannis, Andreas
TI Efficient Parameterized Algorithms for Data Packing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compilers; data packing; cache management; data locality
AB There is a huge gap between the speeds of modern caches and main memories, and therefore cache misses account for a considerable loss of efficiency in programs. The predominant technique to address this issue has been Data Packing: data elements that are frequently accessed within time proximity are packed into the same cache block, thereby minimizing accesses to the main memory. We consider the algorithmic problem of Data Packing on a two-level memory system. Given a reference sequence R of accesses to data elements, the task is to partition the elements into cache blocks such that the number of cache misses on R is minimized. The problem is notoriously difficult: it is NP-hard even when the cache has size 1, and is hard to approximate for any cache size larger than 4. Therefore, all existing techniques for Data Packing are based on heuristics and lack theoretical guarantees.
   In this work, we present the first positive theoretical results for Data Packing, along with new and stronger negative results. We consider the problem under the lens of the underlying access hypergraphs, which are hypergraphs of affinities between the data elements, where the order of an access hypergraph corresponds to the size of the affinity group. We study the problem parameterized by the treewidth of access hypergraphs, which is a standard notion in graph theory to measure the closeness of a graph to a tree. Our main results are as follows: we show that there is a number q* depending on the cache parameters such that (a) if the access hypergraph of order q* has constant treewidth, then there is a linear-time algorithm for Data Packing; (b) the Data Packing problem remains NP-hard even if the access hypergraph of order q* - 1 has constant treewidth. Thus, we establish a fine-grained dichotomy depending on a single parameter, namely, the highest order among access hypegraphs that have constant treewidth; and establish the optimal value q* of this parameter.
   Finally, we present an experimental evaluation of a prototype implementation of our algorithm. Our results demonstrate that, in practice, access hypergraphs of many commonly-used algorithms have small treewidth. We compare our approach with several state-of-the-art heuristic-based algorithms and show that our algorithm leads to significantly fewer cache-misses.
C1 [Chatterjee, Krishnendu; Goharshady, Amir Kafshdar] IST Austria, Klosterneuburg, Austria.
   [Okati, Nastaran] Ferdowsi Univ Mashhad, Mashhad, Razavi Khorasan, Iran.
   [Pavlogiannis, Andreas] EPFL, Zurich, Switzerland.
C3 Institute of Science & Technology - Austria; Ferdowsi University
   Mashhad; Swiss Federal Institutes of Technology Domain; Ecole
   Polytechnique Federale de Lausanne
RP Chatterjee, K (corresponding author), IST Austria, Klosterneuburg, Austria.
RI Pavlogiannis, Andreas/X-6831-2018
OI Pavlogiannis, Andreas/0000-0002-8943-0722; Kafshdar Goharshady,
   Amir/0000-0003-1702-6584
FU Vienna Science and Technology Fund (WWTF) [ICT15-003]; Austrian Science
   Fund (FWF) NFN Grant [S11407-N23]; ERC [279307]; IBM PhD Fellowship
   program; Austrian Science Fund (FWF) [J4220] Funding Source: Austrian
   Science Fund (FWF)
FX A full version of this paper is available at [Chatterjee et al. 2019]
   (https://repository.ist.ac.at/1056/).We are very thankful to the
   reviewers for their insightful comments. The research was partially
   supported by Vienna Science and Technology Fund (WWTF) Project
   ICT15-003, Austrian Science Fund (FWF) NFN Grant No S11407-N23
   (RiSE/SHiNE), ERC Starting Grant (279307: Graph Games), and the IBM PhD
   Fellowship program.
CR Abboud A., 2016, P 27 ANN ACM SIAM S, P377, DOI 10.1137/
   Bodlaender H. L., 1997, Mathematical Foundations of Computer Science 1997. 22nd International Symposium, MFCS'97 Proceedings, P19, DOI 10.1007/BFb0029946
   Bodlaender HL, 1998, THEOR COMPUT SCI, V209, P1, DOI 10.1016/S0304-3975(97)00228-4
   BODLAENDER HL, 1988, LECT NOTES COMPUT SC, V317, P105
   Bodlaender HL, 1996, SIAM J COMPUT, V25, P1305, DOI 10.1137/S0097539793251219
   BORODIN A, 1995, J COMPUT SYST SCI, V50, P244, DOI 10.1006/jcss.1995.1021
   Calder B, 1998, ACM SIGPLAN NOTICES, V33, P139, DOI 10.1145/291006.291036
   Chatterjee K, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3210257
   Chatterjee K, 2017, LECT NOTES COMPUT SC, V10482, P59, DOI 10.1007/978-3-319-68167-2_4
   Chatterjee K, 2015, LECT NOTES COMPUT SC, V9206, P140, DOI 10.1007/978-3-319-21690-4_9
   Chatterjee K, 2015, ACM SIGPLAN NOTICES, V50, P97, DOI [10.1145/2676726.2676979, 10.1145/2775051.2676979]
   Chatterjee Krishnendu, 2019, POPL, P1
   Cygan Marek, 2015, Parameterized Algorithms, V5
   Ding C, 1999, ACM SIGPLAN NOTICES, V34, P229, DOI 10.1145/301631.301670
   Fomin FV, 2017, PROCEEDINGS OF THE TWENTY-EIGHTH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P1419
   Gustedt J, 2002, LECT NOTES COMPUT SC, V2409, P86
   Han H, 2006, IEEE T PARALL DISTR, V17, P606, DOI 10.1109/TPDS.2006.88
   Lavaee R, 2016, ACM SIGPLAN NOTICES, V51, P232, DOI 10.1145/2914770.2837669
   Panagiotou K., 2006, STOC'06. Proceedings of the 38th Annual ACM Symposium on Theory of Computing, P487, DOI 10.1145/1132516.1132587
   Petrank E, 2002, ACM SIGPLAN NOTICES, V37, P101, DOI 10.1145/565816.503283
   ROBERTSON N, 1984, J COMB THEORY B, V36, P49, DOI 10.1016/0095-8956(84)90013-3
   ROBERTSON N, 1986, J ALGORITHM, V7, P309, DOI 10.1016/0196-6774(86)90023-4
   SLEATOR DD, 1985, COMMUN ACM, V28, P202, DOI 10.1145/2786.2793
   Thabit Khalid Omar, 1982, THESIS RICE U THESIS RICE U
   Thorup M, 1998, INFORM COMPUT, V142, P159, DOI 10.1006/inco.1997.2697
   van Dijk T., 2006, Computing treewidth with LibTW
   Wei Ding, 2014, ACM SIGMETRICS Performance Evaluation Review, V42, P477, DOI 10.1145/2591971.2591992
   Wulf W. A., 1995, Computer Architecture News, V23, P20, DOI 10.1145/216585.216588
   Zhang CL, 2006, ACM SIGPLAN NOTICES, V41, P16, DOI 10.1145/1111320.1111040
   Zhong YT, 2004, ACM SIGPLAN NOTICES, V39, P255, DOI 10.1145/996893.996872
NR 30
TC 7
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 53
DI 10.1145/3290366
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300053
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Dudenhefner, A
   Rehof, J
AF Dudenhefner, Andrej
   Rehof, Jakob
TI Principality and Approximation under Dimensional Bound
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Lambda Calculus; Type Theory; Approximation; Intersection Types;
   Inhabitation; Type Inference; Principal Type
AB We develop an algebraic and algorithmic theory of principality for the recently introduced framework of intersection type calculi with dimensional bound. The theory enables inference of principal type information under dimensional bound, it provides an algebraic and algorithmic theory of approximation of classical principal types in terms of computable bases of abstract vector spaces (more precisely, semimodules), and it shows a systematic connection of dimensional calculi to the theory of approximants. Finite, computable bases are shown to span standard principal typings of a given term for sufficiently high dimension, thereby providing an approximation to standard principality by type inference, and capturing it precisely for sufficiently large dimensional parameter. Subsidiary results include decidability of principal inhabitation for intersection types (given a type does there exist a normal form for which the type is principal?). Remarkably, combining bounded type inference with principal inhabitation allows us to compute approximate normal forms of arbitrary terms without using beta-reduction.
C1 [Dudenhefner, Andrej; Rehof, Jakob] TU Dortmund Univ, Dortmund, Germany.
C3 Dortmund University of Technology
RP Dudenhefner, A (corresponding author), TU Dortmund Univ, Dortmund, Germany.
EM andrej.dudenhefner@cs.tu-dortmund.de; jakob.rehof@cs.tu-dortmund.de
OI Dudenhefner, Andrej/0000-0003-1104-444X
CR Alpuim Joao, 2017, PROGRAMMING LANGUAGE, DOI [10.1007/978-3-662-54434-1_1, DOI 10.1007/978-3-662-54434-1_1]
   Artin M., 2011, ALGEBRA
   Barendregt H, 2013, PERSPECT LOGIC, P1, DOI 10.1017/CBO9781139032636
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Barendregt H., 2012, Studies in Logic and the Foundations of Mathematics, DOI DOI 10.2307/2274112
   Boudol G, 2008, THEOR COMPUT SCI, V398, P63, DOI 10.1016/j.tcs.2008.01.045
   Carlier S, 2012, FUND INFORM, V121, P43, DOI 10.3233/FI-2012-771
   Coppo M., 1980, Notre Dame Journal of Formal Logic, V21, P685, DOI 10.1305/ndjfl/1093883253
   COPPO M, 1995, INFORM COMPUT, V122, P70, DOI 10.1006/inco.1995.1141
   COPPO M, 1981, Z MATH LOGIK, V27, P45, DOI 10.1002/malq.19810270205
   COPPO M, 1980, HB CURRY ESSAYS COMB, P480
   Coppo Mario, 1979, SPRINGER LNCS, V71
   DELLAROCCA SR, 1988, THEOR COMPUT SCI, V59, P181, DOI 10.1016/0304-3975(88)90101-6
   DELLAROCCA SR, 1984, THEOR COMPUT SCI, V28, P151, DOI 10.1016/0304-3975(83)90069-5
   Dudder Boris, 2013, TYPED LAMBDA CALCULI, DOI [10.1007/978-3-642-38946-7_11, DOI 10.1007/978-3-642-38946-7_11]
   Dudenhefner A., 2017, P 2 INT C FORMAL STR, V84, DOI [10.4230/LIPIcs.FSCD.2017.15, DOI 10.4230/LIPICS.FSCD.2017.15]
   Dudenhefner A, 2017, ACM SIGPLAN NOTICES, V52, P653, DOI 10.1145/3093333.3009862
   Dudenhefner Andrej, 2017, LICS, P1, DOI DOI 10.1109/LICS.2017.8005127
   Ghica Dan R., 2014, PROGRAMMING LANGUAGE, DOI [10.1007/978-3-642-54833-8_18, DOI 10.1007/978-3-642-54833-8_18]
   Golan J.S., 2010, SEMIRINGS THEIR APPL, DOI [10.1007/978-94-015-9333-5, DOI 10.1007/978-94-015-9333-5]
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   Kfoury A. J., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P161, DOI 10.1145/292540.292556
   Kfoury AJ, 2004, THEOR COMPUT SCI, V311, P1, DOI 10.1016/j.tcs.2003.10.032
   KFOURY AJ, 1999, P 1999 INT C FUNCT P, P90, DOI DOI 10.1145/317636.317788
   Kurata T., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P297, DOI 10.1007/BFb0014060
   Leivant D., 1983, C REC 10 ANN ACM S P, P88, DOI [10.1145/567067.567077, DOI 10.1145/567067.567077]
   Liquori Luigi, 2018, ABS180309660 CORR
   McBride Conor, 2016, LNCS, P207, DOI DOI 10.1007/978-3-319-30936-1
   MINTS G, 1981, J SOVIET MATH, V15, P45
   MOLLER NEERGAARD P., 2004, P 9 ACM SIGPLAN INT, P138, DOI DOI 10.1145/1016850.1016871
   Pottinger Garrel, 1980, ESSAYS COMBINATORY L, P561
   Rehof Jakob, 2012, Logic and Program Semantics Essays. Dedicated to Dexter Kozen on the Occasion of His 60th Birthday, P256, DOI 10.1007/978-3-642-29485-3_16
   REYNOLDS JC, 1996, CMUCS96146
   Tsukada T, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P237, DOI 10.1145/2933575.2934553
   Urzyczyn P, 1999, J SYMBOLIC LOGIC, V64, P1195, DOI 10.2307/2586625
   van Bakel S., 1993, Journal of Logic and Computation, V3, P643, DOI 10.1093/logcom/3.6.643
   Van Bakel S, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1922649.1922657
   Wells SCJB, 2005, ELECTRON NOTES THEOR, V136, P173, DOI 10.1016/j.entcs.2005.03.026
NR 38
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 8
DI 10.1145/3290321
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300008
OA gold
DA 2024-07-18
ER

PT J
AU Fromherz, A
   Giannarakis, N
   Hawblitzel, C
   Parno, B
   Rastogi, A
   Swamy, N
AF Fromherz, Aymeric
   Giannarakis, Nick
   Hawblitzel, Chris
   Parno, Bryan
   Rastogi, Aseem
   Swamy, Nikhil
TI A Verified, Efficient Embedding of a Verifiable Assembly Language
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Assembly language; cryptography; domain-specific languages
ID VERIFICATION; SECURITY
AB High-performance cryptographic libraries often mix code written in a high-level language with code written in assembly. To support formally verifying the correctness and security of such hybrid programs, this paper presents an embedding of a subset of x64 assembly language in F* that allows efficient verification of both assembly and its interoperation with C code generated from F*. The key idea is to use the computational power of a dependent type system's type checker to run a verified verification-condition generator during type checking. This allows the embedding to customize the verification condition sent by the type checker to an SMT solver. By combining our proof-by-reflection style with SMT solving, we demonstrate improved automation for proving the correctness of assembly-language code. This approach has allowed us to complete the first-ever proof of correctness of an optimized implementation of AES-GCM, a cryptographic routine used by 90% of secure Internet traffic.
C1 [Fromherz, Aymeric; Parno, Bryan] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Giannarakis, Nick] Princeton Univ, Princeton, NJ 08544 USA.
   [Hawblitzel, Chris; Rastogi, Aseem; Swamy, Nikhil] Microsoft Res, Redmond, WA USA.
C3 Carnegie Mellon University; Princeton University; Microsoft
RP Fromherz, A (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM afromher@andrew.cmu.edu; nick.giannarakis@princeton.edu;
   Chris.Hawblitzel@microsoft.com; parno@cmu.edu; aseemr@microsoft.com;
   nswamy@microsoft.com
FU Department of the Navy, Office of Naval Research [N00014-18-1-2892];
   Alfred P. Sloan Foundation
FX Work at Carnegie Mellon University was supported in part by the
   Department of the Navy, Office of Naval Research under Grant No.
   N00014-18-1-2892, and a grant from the Alfred P. Sloan Foundation. Any
   opinions, findings, and conclusions or recommendations expressed in this
   material are those of the authors and do not necessarily reflect the
   views of these sponsors.
CR Aciicmez Onur, 2010, P INT C CRYPT HARDW
   Almeida Jose Bacelar, 2017, P ACM C COMP COMM SE, DOI [10.1145/3133956 3134078, DOI 10.1145/31339563134078]
   Amin Nada, 2017, P ACM C PRINC PROGR
   Andrysco Marc, 2015, P IEEE S SEC PRIV
   [Anonymous], 2001, FEDERAL INFORM PROCE
   [Anonymous], 2007, NIST Special Publication 1011-II-1.0.
   Barrett Clark, 2011, P C COMP AID VER CAV
   Bernstein DJ, 2005, LECT NOTES COMPUT SC, V3557, P32
   Bond B, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P917
   Brumley D, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE 12TH USENIX SECURITY SYMPOSIUM, P1
   Chlipala A, 2013, ACM SIGPLAN NOTICES, V48, P391, DOI [10.1145/2544174.2500592, 10.1145/2500365.2500592]
   Chlipala Adam, 2017, CERTIFIED PROGRAMMIN
   Coq Development Team, 2015, COQ PROOF ASSISTANT
   Costanzo D, 2016, ACM SIGPLAN NOTICES, V51, P648, DOI [10.1145/2908080.2908100, 10.1145/2980983.2908100]
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Erbsen A, 2019, P IEEE S SECUR PRIV, P1202, DOI 10.1109/SP.2019.00005
   Filliatre Jean-Christophe, 2011, DEDUCTIVE PROGRAM VE
   Gandolfi Karine, 2001, P INT C CRYPT HARDW
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Gordon M. J., 1989, CURRENT TRENDS HARDW, P387, DOI [DOI 10.1007/978-1-4612-3658-0_10, DOI 10.1007/978-1-4612-3658-010]
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Gueron Shay., 2012, Intel Advanced Encryption Standard (AES) New Instructions Set
   Heninger Nadia, 2010, P INT C CRYPTOGRAPHI
   Herms P, 2012, LECT NOTES COMPUT SC, V7152, P2, DOI 10.1007/978-3-642-27705-4_2
   HOMEIER PV, 1995, COMPUT J, V38, P131, DOI 10.1093/comjnl/38.2.131
   Kennedy Andrew, 2013, P S PRINC PRACT DECL
   Kocher P. C., 1996, Advances in Cryptology - CRYPTO'96. 16th Annual International Cryptology Conference. Proceedings, P104
   Leroy X., 2016, ERTS 2016 EMB REAL T
   Masti Ramya Jayaram, 2015, P USENIX SEC S
   McGrew DA, 2004, LECT NOTES COMPUT SC, V3348, P343
   Mozilla, 2018, MEASUREMENT DASHBOAR
   Myreen M.O., 2009, FORMAL VERIFICATION
   Myreen Magnus. O., 2013, INT C CERT PROGR PRO
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   OpenSSL, 2016, Chase overflow bit on x86 and ARM platforms
   OpenSSL, 2016, GitHub commit 4b8736a22-758c371bc2f8b3534dc0c274acf42c
   OpenSSL, 2016, GitHub commit bbe9769ba66ab2512678a87b0d9b266ba970db05
   Patterson D, 2017, ACM SIGPLAN NOTICES, V52, P495, DOI [10.1145/3062341.3062347, 10.1145/3140587.3062347]
   Percival C., 2005, Cache Missing for Fun and Profit
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Protzenko Jonathan, 2017, PACMPL 1 ICFP
   Ragland L. C., 1973, VERIFIED PROGRAM VER
   Rescorla E., 2018, RFC 8446, DOI [10.17487/RFC8446, DOI 10.17487/RFC8446]
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Strub PY, 2012, ACM SIGPLAN NOTICES, V47, P571, DOI 10.1145/2103621.2103723
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tsai MH, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1973, DOI 10.1145/3133956.3134076
   Zinzindohoue Jean Karim, 2017, P ACM C COMP COMM SE
NR 51
TC 15
Z9 17
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 63
DI 10.1145/3290376
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300063
OA gold
DA 2024-07-18
ER

PT J
AU Cai, YD
   Zhang, C
AF Cai, Yuandao
   Zhang, Charles
TI A Cocktail Approach to Practical Call Graph Construction
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Call graph construction; pointer analyses; indirect calls; function
   pointers
ID POINTS-TO ANALYSIS; SENSITIVITY; LINES; BUGS
AB After decades of research, constructing call graphs for modern C-based software remains either imprecise or inefficient when scaling up to the ever-growing complexity. The main culprit is the difficulty of resolving function pointers, as precise pointer analyses are cubic in nature and become exponential when considering calling contexts. This paper takes a practical stance by first conducting a comprehensive empirical study of function pointer manipulations in the wild. By investigating 5355 indirect calls in five popular open-source systems, we conclude that, instead of the past uniform treatments for function pointers, a cocktail approach can be more effective in "squeezing" the number of difficult pointers to a minimum using a potpourri of cheap methods. In particular, we decompose the costs of constructing highly precise call graphs of big code by tailoring several increasingly precise algorithms and synergizing them into a concerted workflow. As a result, many indirect calls can be precisely resolved in an efficient and principled fashion, thereby reducing the final, expensive refinements. This is, in spirit, similar to the well-known cocktail medical therapy. (1)
   The results are encouraging - our implemented prototype called Coral can achieve similar precision versus the previous field-, flow-, and context-sensitive Andersen-style call graph construction, yet scale up to millions of lines of code for the first time, to the best of our knowledge. Moreover, by evaluating the produced call graphs through the lens of downstream clients (i.e., use-after-free detection, thin slicing, and directed grey-box fuzzing), the results show that Coral can dramatically improve their effectiveness for better vulnerability hunting, understanding, and reproduction. More excitingly, we found twelve confirmed bugs (six impacted by indirect calls) in popular systems (e.g., MariaDB), spreading across multiple historical versions.
C1 [Cai, Yuandao; Zhang, Charles] Hong Kong Univ Sci & Technol, Hong Kong, Peoples R China.
C3 Hong Kong University of Science & Technology
RP Cai, YD (corresponding author), Hong Kong Univ Sci & Technol, Hong Kong, Peoples R China.
EM ycaibb@cse.ust.hk; charlesz@cse.ust.hk
FU Hong Kong Research Grant Council from the Hong Kong Research Grant
   Council [RGC16206517, ITS/440/18FP, PRP/004/21FX]; Innovation and
   Technology Commission, Ant Group
FX We thank the anonymous reviewers for their feedback. This work is
   supported by the RGC16206517, ITS/440/18FP and PRP/004/21FX grants from
   the Hong Kong Research Grant Council and the Innovation and Technology
   Commission, Ant Group, and the donations from Microsoft and Huawei.
CR Ali K, 2021, IEEE T SOFTWARE ENG, V47, P2644, DOI 10.1109/TSE.2019.2956925
   Ali K, 2015, ACM T SOFTW ENG METH, V25, DOI 10.1145/2824234
   Ali K, 2014, LECT NOTES COMPUT SC, V8586, P54
   Ali K, 2012, LECT NOTES COMPUT SC, V7313, P688, DOI 10.1007/978-3-642-31057-7_30
   Andersen L. O., 1994, PROGRAM ANAL SPECIAL
   [Anonymous], 2001, P 2001 ACM SIGPLAN S, DOI DOI 10.1145/379605.379665
   Antoniol G, 1999, PROCEEDINGS OF THE THIRD EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P51, DOI 10.1109/CSMR.1999.756682
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Atkinson DC, 2004, 11TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P326, DOI 10.1109/APSEC.2004.16
   Balakrishnan G, 2005, LECT NOTES COMPUT SC, V3443, P250, DOI 10.1007/978-3-540-31985-6_19
   Balakrishnan G, 2004, LECT NOTES COMPUT SC, V2985, P5
   Balatsouras G, 2016, LECT NOTES COMPUT SC, V9837, P84, DOI 10.1007/978-3-662-53413-7_5
   Barbar Mohamad, 2020, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, DOI [10.4230/LIPIcs.ECOOP.2020.24, DOI 10.4230/LIPICS.ECOOP.2020.24]
   Bauer M, 2022, PROCEEDINGS OF THE 38TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE, ACSAC 2022, P346, DOI 10.1145/3564625.3564627
   Bessey A, 2010, COMMUN ACM, V53, P66, DOI 10.1145/1646353.1646374
   Böhme M, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2329, DOI 10.1145/3133956.3134020
   Brown F, 2017, P IEEE S SECUR PRIV, P559, DOI 10.1109/SP.2017.68
   Burow N, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3054924
   Cai Yuandao, 2022, ESEC/FSE 2022: Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering, P784, DOI 10.1145/3540250.3549110
   Cai YD, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1126, DOI 10.1145/3453483.3454099
   Cai Yuandao, 2023, 32 USENIX SEC S USEN
   Cheng Ben-Chung, 1999, LCPC
   Chugh R, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P316, DOI 10.1145/1375581.1375620
   Embedded Artistry, 2021, The Problems with Global Variables.
   EvanLi, Top 100 Stars in C.
   Fan G, 2019, PROC INT CONF SOFTW, P72, DOI 10.1109/ICSE.2019.00025
   Fink Stephen., 2006, INT S SOFTWARE TESTI, P133, DOI DOI 10.1145/1146238.1146254
   Ge XY, 2016, 1ST IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY, P179, DOI 10.1109/EuroSP.2016.24
   Ghavamnia S, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P1749
   Hardekopf B, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P290, DOI 10.1145/1250734.1250767
   Hardekopf B, 2011, INT SYM CODE GENER, P289, DOI 10.1109/CGO.2011.5764696
   Hardekopf B, 2009, ACM SIGPLAN NOTICES, V44, P226, DOI 10.1145/1594834.1480911
   He Dongjie, 2022, LEIBNIZ INT P INFORM, V222
   He Dongjie, 35 EUR C OBJ OR PROG, V194, DOI [10.4230/LIPIcs.ECOOP.2021.16, DOI 10.4230/LIPICS.ECOOP.2021.16]
   Huang HQ, 2022, P IEEE S SECUR PRIV, P36, DOI [10.1109/SP46214.2022.00007, 10.1109/SP46214.2022.9833751]
   Inc, 2020 Synopsys
   Jang D, 2014, 21ST ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2014), DOI 10.14722/ndss.2014.23287
   Jeong S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133924
   Kahlon V, 2007, LECT NOTES COMPUT SC, V4590, P226
   Kahlon V, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P249, DOI 10.1145/1375581.1375613
   Khandaker M, 2019, 2019 4TH IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P), P95, DOI 10.1109/EuroSP.2019.00017
   Khandaker MR, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P195
   Kim SH, 2021, 28TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2021), DOI 10.14722/ndss.2021.24386
   Kuderski J, 2019, 2019 FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P37, DOI [10.23919/fmcad.2019.8894275, 10.23919/FMCAD.2019.8894275]
   Lattner C, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P278, DOI 10.1145/1250734.1250766
   Lhoták O, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1926385.1926389
   Li JK, 2018, IEEE T INF FOREN SEC, V13, P1535, DOI 10.1109/TIFS.2018.2797932
   Li L, 2013, PROCEEDINGS OF THE ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT (ISMM '13), P85
   Li L, 2011, PROCEEDINGS OF THE 8TH INTERNATIONAL SYMPOSIUM ON COMPUTER SCIENCE IN SPORT (IACSS2011), P343
   Li Y, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276511
   Li Y, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3381915
   Li Y, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P129, DOI 10.1145/3236024.3236041
   Liu BZ, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P725, DOI 10.1145/3453483.3454073
   Lu JB, 2021, LECT NOTES COMPUT SC, V12913, P261, DOI 10.1007/978-3-030-88806-0_13
   Lu JB, 2021, ACM T SOFTW ENG METH, V30, DOI 10.1145/3450492
   Lu JB, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360574
   Lu KJ, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P1867, DOI 10.1145/3319535.3354244
   Luo ST, 2022, IEEE T PARALL DISTR, V33, P3901, DOI 10.1109/TPDS.2022.3174631
   Ma WJ, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591242
   Milanova A., 2004, Automated Software Engineering, V11, P7, DOI 10.1023/B:AUSE.0000008666.56394.a1
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Milanova A., 2002, Software Engineering Notes, V27, P1, DOI 10.1145/566171.566174
   Mock M., 2002, Software Engineering Notes, V27, P71, DOI 10.1145/605466.605477
   Murphy G. C., 1998, ACM Transactions on Software Engineering and Methodology, V7, P158, DOI 10.1145/279310.279314
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Nielsen BB, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P29, DOI 10.1145/3460319.3464836
   Niu B, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1317, DOI 10.1145/2660267.2660281
   Niu B, 2014, ACM SIGPLAN NOTICES, V49, P577, DOI [10.1145/2594291.2594295, 10.1145/2666356.2594295]
   Park J, 2023, IEEE T SOFTWARE ENG, V49, P3089, DOI 10.1109/TSE.2023.3241639
   Pereira FMQ, 2009, INT SYM CODE GENER, P126, DOI 10.1109/CGO.2009.9
   Petrashko D, 2016, ACM SIGPLAN NOTICES, V51, P394, DOI 10.1145/3022671.2983991
   Ramanathan Murali Krishna, 2013, P 9 JOINT M EUR SOFT, DOI DOI 10.1145/2491411.2501854
   Reif M, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P474, DOI 10.1145/2950290.2950312
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Rubio-González C, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P270, DOI 10.1145/1542476.1542506
   Salis V, 2021, PROC INT CONF SOFTW, P1646, DOI 10.1109/ICSE43902.2021.00146
   Santhiar A, 2017, ACM SIGPLAN NOTICES, V52, P292, DOI [10.1145/3140587.3062361, 10.1145/3062341.3062361]
   Schubert Philipp., 2021, EUR C OBJ OR PROGR E
   Shah Anand, 1995, Rutgers University, DOI [10.7282/T3X92FRK, DOI 10.7282/T3X92FRK]
   Shi QK, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P693, DOI 10.1145/3192366.3192418
   Smaragdakis Y., 2015, FDN TRENDS PROGRAM L, V2, P1, DOI DOI 10.1561/2500000014
   Smaragdakis Y, 2014, ACM SIGPLAN NOTICES, V49, P485, DOI [10.1145/2666356.2594320, 10.1145/2594291.2594320]
   Sotiropoulos Thodoris, 2019, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V134, DOI DOI 10.4230/LIPICS.ECOOP.2019.8
   Spath J., 2016, PROC EUR C OBJECT OR, p22:1, DOI [10.4230/DARTS.2.1.12, DOI 10.4230/LIPICS.ECOOP.2016.22]
   Späth J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133923
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Sridharan M, 2009, LECT NOTES COMPUT SC, V5673, P205, DOI 10.1007/978-3-642-03237-0_15
   Sridharan M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P112, DOI 10.1145/1250734.1250748
   Sridharan Manu, EUR C OBJ OR PROGR E
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Sui YL, 2020, IEEE T SOFTWARE ENG, V46, P812, DOI 10.1109/TSE.2018.2869336
   Sui YL, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P460, DOI 10.1145/2950290.2950296
   Sui YL, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P265, DOI 10.1145/2892208.2892235
   Tan T, 2017, ACM SIGPLAN NOTICES, V52, P278, DOI [10.1145/3140587.3062360, 10.1145/3062341.3062360]
   Unkel C, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P183, DOI 10.1145/1328438.1328463
   Veileborg OH, 2022, IEEE INT CONF AUTOM, DOI 10.1145/3551349.3561154
   Voung J. W., 2007, P 6 JOINT M EUROPEAN, P205
   Wang HJ, 2020, PROC INT CONF SOFTW, P999, DOI 10.1145/3377811.3380386
   Wen C, 2022, PROC INT CONF SOFTW, P474, DOI 10.1145/3510003.3510178
   Wen C, 2020, PROC INT CONF SOFTW, P765, DOI 10.1145/3377811.3380396
   Xiao X, 2014, ACM SIGPLAN NOTICES, V49, P463, DOI [10.1145/2594291.2594314, 10.1145/2666356.2594314]
   Xu GQ, 2009, LECT NOTES COMPUT SC, V5653, P98
   Yan H, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P327, DOI 10.1145/3180155.3180178
   Ye S, 2014, LECT NOTES COMPUT SC, V8723, P319, DOI 10.1007/978-3-319-10936-7_20
   Yu HT, 2010, INT SYM CODE GENER, P218
   Zeng B, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P29
   Zeng DR, 2021, IEEE INT CONF TRUST, P810, DOI 10.1109/TrustCom53373.2021.00116
   Zhang S., 1996, SIGSOFT '96. Proceedings of the Fourth ACM SIGSOFT Symposium on the Foundations of Software Engineering, P81, DOI 10.1145/239098.239112
   Zhang T, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1205
   Zhang YM, 2021, 37TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE, ACSAC 2021, P311, DOI 10.1145/3485832.3485900
   Zheng X, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P197, DOI 10.1145/1328438.1328464
   Zuo ZQ, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P914, DOI 10.1145/3453483.3454085
NR 113
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 257
DI 10.1145/3622833
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100037
OA gold
DA 2024-07-18
ER

PT J
AU Meier, S
   Mover, S
   Kaki, G
   Chang, BYE
AF Meier, Shawn
   Mover, Sergio
   Kaki, Gowtham
   Chang, Bor-Yuh Evan
TI Historia: Refuting Callback Reachability with Message-History Logics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE event-driven frameworks; refuting callback reachability; callback
   control flow; framework modeling; goal-directed verification; backwards
   abstract interpretation; ordered linear logics; temporal logics; message
   history logics
AB This paper considers the callback reachability problem - determining if a callback can be called by an event-driven framework in an unexpected state. Event-driven programming frameworks are pervasive for creating user-interactive applications (apps) on just about every modern platform. Control flow between callbacks is determined by the framework and largely opaque to the programmer. This opacity of the callback control flow not only causes difficulty for the programmer but is also difficult for those developing static analysis. Previous static analysis techniques address this opacity either by assuming an arbitrary framework implementation or attempting to eagerly specify all possible callback control flow, but this is either too coarse to prove properties requiring callback-ordering constraints or too burdensome and tricky to get right. Instead, we present a middle way where the callback control flow can be gradually refined in a targeted manner to prove assertions of interest. The key insight to get this middle way is by reasoning about the history of method invocations at the boundary between app and framework code - enabling a decoupling of the specification of callback control flow from the analysis of app code. We call the sequence of such boundary-method invocations message histories and develop message-history logics to do this reasoning. In particular, we define the notion of an application-only transition system with boundary transitions, a message-history program logic for programs with such transitions, and a temporal specification logic for capturing callback control flow in a targeted and compositional manner. Then to utilize the logics in a goal-directed verifier, we define a way to combine after-the-fact an assertion about message histories with a specification of callback control flow. We implemented a prototype message history-based verifier called Historia and provide evidence that our approach is uniquely capable of distinguishing between buggy and fixed versions on challenging examples drawn from real-world issues and that our targeted specification approach enables proving the absence of multi-callback bug patterns in real-world open-source Android apps.
C1 [Meier, Shawn; Kaki, Gowtham; Chang, Bor-Yuh Evan] Univ Colorado, Boulder, CO 80309 USA.
   [Mover, Sergio] Inst Polytech Paris, CNRS, Ecole Polytech, LIX, Paris, France.
   [Chang, Bor-Yuh Evan] Amazon, Boulder, CO USA.
C3 University of Colorado System; University of Colorado Boulder; Centre
   National de la Recherche Scientifique (CNRS); Amazon.com
RP Meier, S (corresponding author), Univ Colorado, Boulder, CO 80309 USA.
EM shawn.meier@colorado.edu; sergio.mover@lix.polytechnique.fr;
   gowtham.kaki@colorado.edu; evan.chang@colorado.edu
OI Chang, Bor-Yuh Evan/0000-0002-1954-0774; Kaki,
   Gowtham/0000-0002-4189-3189
FU National Science Foundation [CCF-1619282, CCF-2008369]; AID/CIEDS
   project FARO
FX We sincerely thank the anonymous reviewers for their constructive
   reviews, suggestions, and guidance throughout the revision process. We
   also cannot thank enough the members of the University of Colorado
   Programming Languages and Verification Group (CUPLV) for the helpful
   comments and support through the course of this work. Specific thanks to
   Chi Huynh for helping with paper formatting and running experiments, as
   well as Benno Stein for thoughtful discussions on goal-directed
   verification. This research was supported in part by the National
   Science Foundation under grants CCF-1619282, CCF-2008369, and AID/CIEDS
   project FARO.
CR Ali K, 2013, LECT NOTES COMPUT SC, V7920, P378, DOI 10.1007/978-3-642-39038-8_16
   Ali K, 2012, LECT NOTES COMPUT SC, V7313, P688, DOI 10.1007/978-3-642-31057-7_30
   [Anonymous], 2022, The activity lifecycle
   [Anonymous], 2022, Class Index (API level 32)
   [Anonymous], 2020, Dispose loaders before setting controller to null
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Arzt S, 2016, PROC INT CONF SOFTW, P725, DOI 10.1145/2884781.2884816
   Blackshear S., 2015, SOAP, P19, DOI DOI 10.1145/2771284.2771288
   Blackshear S, 2015, ACM SIGPLAN NOTICES, V50, P163, DOI [10.1145/2814270.2814293, 10.1145/2858965.2814293]
   Blackshear S, 2013, ACM SIGPLAN NOTICES, V48, P275, DOI 10.1145/2499370.2462186
   Calcagno C, 2015, LECT NOTES COMPUT SC, V9058, P3, DOI 10.1007/978-3-319-17524-9_1
   Calcagno C, 2011, LECT NOTES COMPUT SC, V6617, P459, DOI 10.1007/978-3-642-20398-5_33
   Calzavara S, 2016, 1ST IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY, P47, DOI 10.1109/EuroSP.2016.16
   Cao Yinzhi, 2015, Network and Distributed System Security (NDSS)
   De Giacomo Giuseppe., International Joint Conference on Artificial Intelligence, IJCAI. IJCAI/AAAI, P854, DOI DOI 10.5555/2540128.2540252
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Distefano D, 2019, COMMUN ACM, V62, P62, DOI 10.1145/3338112
   F Droid, 2023, F Droid Free and Open Source Android App repository
   Fietz Martin, 2015, Feed Remover: Don't let the user cancel the ProgressDialog by mfietz-Pull Request #1306-AntennaPod/AntennaPod
   Fietz Martin, 2018, 2855 Cancel UI media info update when fragment is destroyed by mfietz Pull Request #2856 AntennaPod/AntennaPod
   Fietz Martin, 2016, Fix dismiss IllegalArgumentException
   Fietz Martin, 2018, Illegal State Exception after External Player Fragment was destroyed Issue #2855-AntennaPod/AntennaPod
   Fuchs Adam P., 2009, Technical Report CS-TR-4991
   Gordon MI, 2015, 22ND ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2015), DOI 10.14722/ndss.2015.23089
   Hu YJ, 2018, ACM SIGPLAN NOTICES, V53, P257, DOI [10.1145/3173162.3173173, 10.1145/3296957.3173173]
   Huang HX, 2018, IEEE INT CONF AUTOM, P532, DOI 10.1145/3238147.3238181
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Keahey K, 2020, PROCEEDINGS OF THE 2020 USENIX ANNUAL TECHNICAL CONFERENCE, P219
   Korovin K, 2013, LECT NOTES COMPUT SC, V8152, P214, DOI 10.1007/978-3-642-40885-4_15
   Liang S., 2013, Proceedings of the Third ACM workshop on Security and privacy in smartphones mobile devices, P21, DOI DOI 10.1145/2516760.2516769
   Lichtenstein O., 1985, Logics of Programs. Proceedings, P196
   Manna Z., 1992, The temporal logic of reactive and concurrent systems-specification, DOI DOI 10.1007/978-1-4612-0931-7
   Mariana Trench, 2022, ABOUT US
   Meier Shawn, 2021, Fix null pointer exception when exiting terminal
   Meier Shawn, 2023, Historia: Refuting Callback Reachability with Message History Logics (Artifact), DOI [10.5281/zenodo.8331516, DOI 10.5281/ZENODO.8331516]
   Meier Shawn, 2023, Historia: Refuting Callback Reachability with Message History Logics (Extended Version)
   Meier Shawn, 2019, EUR C OBJ OR PROGR E, V134, DOI [10.4230/LIPIcs.ECOOP.2019.1, DOI 10.4230/LIPICS.ECOOP.2019.1]
   Padon O, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3140568
   Pan LJ, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P952, DOI 10.1145/3368089.3409699
   Pan LJ, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P394, DOI 10.1145/3293882.3339001
   Payet É, 2014, PEPM '14: PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P121, DOI 10.1145/2543728.2543748
   Perez DD, 2021, IEEE T SOFTWARE ENG, V47, P379, DOI 10.1109/TSE.2019.2893207
   Piskac Ruzica, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P773, DOI 10.1007/978-3-642-39799-8_54
   Polakow J, 1999, LECT NOTES COMPUT SC, V1581, P295
   Polakow Jeff., 1999, 15th Conference on Mathematical Foundations of Programming Semantics, V20, P449, DOI DOI 10.1016/S1571-0661(04)80088-4
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rountev Atanas, 2014, P ANN IEEEACM INT S, P143
   Song F, 2016, INFORM COMPUT, V251, P104, DOI 10.1016/j.ic.2016.08.002
   Vallee-Rai Raja, 1999, P CASCON 1999
   Wang Yan, 2016, State of the Art in Program Analysis (SOAP), DOI [10.1145/2931021.2931026, DOI 10.1145/2931021.2931026]
   Wu DY, 2019, IEEE INT CONF SOFTW, P276, DOI 10.1109/ICST.2019.00035
   Yang SQ, 2018, AUTOMAT SOFTW ENG, V25, P833, DOI 10.1007/s10515-018-0237-6
NR 53
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 289
DI 10.1145/3622865
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100069
OA gold, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Varshosaz, M
   Ghaffari, M
   Johnsen, EB
   Wasowski, A
AF Varshosaz, Mahsa
   Ghaffari, Mohsen
   Johnsen, Einar Broch
   Wasowski, Andrzej
TI Formal Specification and Testing for Reinforcement Learning
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE specification-based testing; reinforcement learning; Scala
AB The development process for reinforcement learning applications is still exploratory rather than systematic. This exploratory nature reduces reuse of specifications between applications and increases the chances of introducing programming errors. This paper takes a step towards systematizing the development of reinforcement learning applications. We introduce a formal specification of reinforcement learning problems and algorithms, with a particular focus on temporal difference methods and their definitions in backup diagrams. We further develop a test harness for a large class of reinforcement learning applications based on temporal difference learning, including SARSA and Q-learning. The entire development is rooted in functional programming methods; starting with pure specifications and denotational semantics, ending with property-based testing and using compositional interpreters for a domain-specific term language as a test oracle for concrete implementations. We demonstrate the usefulness of this testing method on a number of examples, and evaluate with mutation testing. We show that our test suite is effective in killing mutants (90% mutants killed for 75% of subject agents). More importantly, almost half of all mutants are killed by generic write-once-use-everywhere tests that apply to any reinforcement learning problem modeled using our library, without any additional effort from the programmer.
C1 [Varshosaz, Mahsa; Ghaffari, Mohsen; Wasowski, Andrzej] IT Univ Copenhagen, Copenhagen, Denmark.
   [Johnsen, Einar Broch] Univ Oslo, Oslo, Norway.
C3 IT University Copenhagen; University of Oslo
RP Varshosaz, M (corresponding author), IT Univ Copenhagen, Copenhagen, Denmark.
EM mahv@itu.dk; mohg@itu.dk; einarj@ifi.uio.no; wasowski@itu.dk
OI Johnsen, Einar Broch/0000-0001-5382-3949; Wasowski,
   Andrzej/0000-0003-0532-2685; Ghaffari, Mohsen/0000-0002-1939-9053
FU DIREC (Digital Research Centre Denmark); Innovation Fund Denmark
FX Partially funded by DIREC (Digital Research Centre Denmark), a
   collaboration between the eight Danish universities and the Alexandra
   Institute supported by the Innovation Fund Denmark.
CR Abolfathi Elmira Amirloo, 2021, NEURIPS2019 WORKSHOP, DOI [10.48550/ARXIV.2101.02649, DOI 10.48550/ARXIV.2101.02649]
   Alshiekh M, 2018, AAAI CONF ARTIF INTE, P2669
   Alur R., 2022, Lecture Notes in Computer Science, P604
   Chakraborty J, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P429, DOI 10.1145/3468264.3468537
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   De Asis K, 2018, AAAI CONF ARTIF INTE, P2902
   Déletang G, 2021, Arxiv, DOI arXiv:2103.03938
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Dutta S, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P413, DOI 10.1145/3460319.3464844
   Fulton N, 2018, AAAI CONF ARTIF INTE, P6485
   Fulton N, 2019, LECT NOTES COMPUT SC, V11427, P413, DOI 10.1007/978-3-030-17462-0_28
   García J, 2015, J MACH LEARN RES, V16, P1437
   Gelman A., 2013, Bayesian Data Analysis, V3 ed
   Gelman A, 2013, BRIT J MATH STAT PSY, V66, P8, DOI 10.1111/j.2044-8317.2011.02037.x
   HAMLET RG, 1977, IEEE T SOFTWARE ENG, V3, P279, DOI 10.1109/TSE.1977.231145
   Hasanbeig M., 2018, arXiv
   Huang SY, 2017, Arxiv, DOI arXiv:1702.02284
   Ivanov R, 2020, PROCEEDINGS OF THE 23RD INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL (HSCC2020) (PART OF CPS-IOT WEEK), DOI 10.1145/3365365.3382216
   Jansen Nils, 2020, PROC 31 INT C CONCUR, V3, P1
   John Christopher, 1989, Learning from delayed rewards
   Jothimurugan K., 2021, ADV NEURAL INF PROCE, V34, P10026
   Jothimurugan K, 2022, LECT NOTES COMPUT SC, V13372, P343, DOI 10.1007/978-3-031-13188-2_17
   Jothimurugan K, 2021, PR MACH LEARN RES, V130
   Jothimurugan K, 2019, ADV NEUR IN, V32
   Junges S, 2016, LECT NOTES COMPUT SC, V9636, P130, DOI 10.1007/978-3-662-49674-9_8
   Kaelbling LP, 1996, J ARTIF INTELL RES, V4, P237, DOI 10.1613/jair.301
   Kruschke J., 2014, Doing Bayesian Data Analysis: A Tutorial with R, JAGS, and Stan, V2
   Lin YC, 2017, PROCEEDINGS OF THE TWENTY-SIXTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P3756
   Liu JR, 2022, IEEE INT CONF AUTOM, DOI 10.1145/3551349.3556962
   Lu Yuteng, 2021, Dependable Software Eng.. Theories, Tools, and Applications, V3071, P143, DOI 10. 1007/978-3-030-91265-9_8
   Luo QZ, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P643, DOI 10.1145/2635868.2635920
   McElreath R, 2016, TEXT STAT SCI, pXI
   Moore A. W., 1990, EFFICIENT MEMORY BAS
   Oikarinen T., 2021, Advances in Neural Information Processing Systems, V34, P26156
   Pang Q, 2022, PROCEEDINGS OF THE 31ST ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, ISSTA 2022, P378, DOI 10.1145/3533767.3534388
   Papadakis M, 2019, ADV COMPUT, V112, P275, DOI 10.1016/bs.adcom.2018.03.015
   Ramsey N, 2002, ACM SIGPLAN NOTICES, V37, P154, DOI 10.1145/565816.503288
   Riccio V, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P355, DOI 10.1109/ASE51524.2021.9678764
   Romdhana A, 2022, IEEE INT CONF SOFTW, P24, DOI 10.1109/ICST53961.2022.00013
   Ruderman Avraham, 2019, SAFE MACHINE LEARNIN
   Rummery Gavin A, 1994, On-line Q-Learning Using Connectionist Systems, V37
   Schulman J, 2017, Arxiv, DOI arXiv:1707.06347
   Su JZ, 2022, IEEE INT CONF AUTOM, DOI 10.1145/3551349.3560429
   Sun YC, 2018, IEEE INT CONF AUTOM, P109, DOI 10.1145/3238147.3238172
   Sutton R. S., 1988, Machine Learning, V3, P9, DOI 10.1007/BF00115009
   Sutton RS, 2018, ADAPT COMPUT MACH LE, P1
   Tappler Martin, 2022, Leveraging Applications of Formal Methods, Verification and Validation. Verification Principles: 11th International Symposium, ISoLA 2022, Proceedings. Lecture Notes in Computer Science (13701), P335, DOI 10.1007/978-3-031-19849-6_20
   Tappler M., 2022, P 31 INT JOINT C ART, P503, DOI [10.24963/ijcai, DOI 10.24963/IJCAI.2022/72]
   Tufano R, 2022, PROC INT CONF SOFTW, P2303, DOI 10.1145/3510003.3510625
   Turker UC, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P368, DOI 10.1109/ASE51524.2021.9678566
   van Seijen H, 2009, ADPRL: 2009 IEEE SYMPOSIUM ON ADAPTIVE DYNAMIC PROGRAMMING AND REINFORCEMENT LEARNING, P177
   Vardhan H, 2021, PROCEEDINGS OF 2021 6TH INTERNATIONAL CONFERENCE ON MACHINE LEARNING TECHNOLOGIES (ICMLT 2021), P34, DOI 10.1145/3468891.3468897
   Varshosaz Mahsa, 2023, Formal Specification and Testing for Reinforcement Learning, DOI [10.5281/zenodo.8083298, DOI 10.5281/ZENODO.8083298]
   Wu M, 2020, THEOR COMPUT SCI, V807, P298, DOI 10.1016/j.tcs.2019.05.046
   Zhang SH, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P555, DOI 10.1109/ASE51524.2021.9678832
   Zheng Y, 2021, PROC INT CONF SOFTW, P423, DOI 10.1109/ICSE43902.2021.00048
   Zolfagharian A, 2023, IEEE T SOFTWARE ENG, V49, P3715, DOI 10.1109/TSE.2023.3269804
NR 57
TC 0
Z9 0
U1 4
U2 7
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 193
DI 10.1145/3607835
PG 34
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900006
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Tassarotti, J
   Tristan, JB
AF Tassarotti, Joseph
   Tristan, Jean-Baptiste
TI Verified Density Compilation for a Probabilistic Programming Language
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compilers; probabilistic programming; formal verification
ID LAMBDA-CALCULUS
AB This paper presents ProbCompCert, a compiler for a subset of the Stan probabilistic programming language (PPL), in which several key compiler passes have been formally verified using the Coq proof assistant. Because of the probabilistic nature of PPLs, bugs in their compilers can be difficult to detect and fix, making verification an interesting possibility. However, proving correctness of PPL compilation requires new techniques because certain transformations performed by compilers for PPLs are quite different from other kinds of languages. This paper describes techniques for verifying such transformations and their application in ProbCompCert. In the course of verifying ProbCompCert, we found an error in the Stan language reference manual related to the semantics and implementation of a key language construct.
C1 [Tassarotti, Joseph] NYU, New York, NY USA.
   [Tristan, Jean-Baptiste] AWS, Boston, MA USA.
C3 New York University
RP Tassarotti, J (corresponding author), NYU, New York, NY USA.
EM jt4767@nyu.edu; trjohnb@amazon.com
FU National Science Foundation [2106559]
FX We thank the paper's shepherd, Yizhou Zhang, as well as the anonymous
   reviewers. The authors are also grateful to the anonymous PLDI artifact
   evaluators for their careful assessment and feedback on the artifact
   accompanying this paper. We would further like to thank Brian Ward, Bob
   Carpenter, Sam Stites, and Xavier Leroy for their help. This material is
   based upon work supported by the National Science Foundation under Grant
   No. 2106559.
CR Banerjee SS, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P515, DOI 10.1145/3297858.3304019
   Baudart G, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P898, DOI 10.1145/3385412.3386009
   Becker Matthew R., 2016, NUTS SAMPLER BROKEN
   Betancourt M, 2018, Arxiv, DOI [arXiv:1701.02434, DOI 10.48550/ARXIV.1701.02434, DOI 10.1017/CBO9780511470813.003.815,818, 10.48550/ARXIV.1701.02434]
   Bhat S, 2013, LECT NOTES COMPUT SC, V7795, P508, DOI 10.1007/978-3-642-36742-7_35
   Boldo S, 2015, MATH COMPUT SCI, V9, P41, DOI 10.1007/s11786-014-0181-1
   Borgström J, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI [10.1145/2951913.2951942, 10.1145/3022670.2951942]
   Borgström J, 2011, LECT NOTES COMPUT SC, V6602, P77, DOI 10.1007/978-3-642-19718-5_5
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   Culpepper R, 2017, LECT NOTES COMPUT SC, V10201, P368, DOI 10.1007/978-3-662-54434-1_14
   Cusumano-Towner MF, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P221, DOI 10.1145/3314221.3314642
   Dutta S, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P574, DOI 10.1145/3236024.3236057
   Eberl M, 2015, LECT NOTES COMPUT SC, V9032, P80, DOI 10.1007/978-3-662-46669-8_4
   Ehrhard T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158147
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   Gorinova MI, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290348
   Heunen Chris, 2017, 2017 32nd Annual ACM/IEEE Symposium on Logic in Computer Science (LICS), DOI 10.1109/LICS.2017.8005137
   Hoffman MD, 2014, J MACH LEARN RES, V15, P1593
   Huang D, 2017, ACM SIGPLAN NOTICES, V52, P111, DOI [10.1145/3140587.3062375, 10.1145/3062341.3062375]
   Huang D, 2016, LECT NOTES COMPUT SC, V9632, P337, DOI 10.1007/978-3-662-49498-1_14
   JONES C, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P186
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Lew AK, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371087
   Kazemi SM, 2016, FIFTEENTH INTERNATIONAL CONFERENCE ON THE PRINCIPLES OF KNOWLEDGE REPRESENTATION AND REASONING, P561
   ProbCompCert Development Team, 2023, PROBCOMPCERT GIT REP
   Ramsey N, 2002, ACM SIGPLAN NOTICES, V37, P154, DOI 10.1145/565816.503288
   Roberts GO, 1998, J APPL PROBAB, V35, P1
   Roualdes Edward, 2023, BRIDGESTAN EFFICIENT, DOI [10.5281/zenodo.7760173, DOI 10.5281/ZENODO.7760173]
   SAHEBDJAHROMI N, 1980, THEOR COMPUT SCI, V12, P19, DOI 10.1016/0304-3975(80)90003-1
   Scibior A., 2018, P ACM PROGRAMMING LA, V2, P1, DOI [10.1145/3236778, DOI 10.1145/3236778]
   Stan Development Team, 2023, STAN LANG REF MAN V
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   Tassarotti Joseph, 2023, Zenodo, DOI 10.5281/ZENODO.7709874
   Tristan JB, 2014, ADV NEUR IN, V27
   Wand M, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236782
   Wu Yi, 2016, IJCAI
NR 38
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 131
DI 10.1145/3591245
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900027
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Roth, O
   Gil, Y
AF Roth, Ori
   Gil, Yossi
TI Fluent APIs in Functional Languages*
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE fluent API; API protocols; embedded DSLs
ID TYPESTATE
AB API is an object-oriented pattern for elegant APIs and embedded DSLs. A smart fluent API can enforce the API protocol or DSL syntax at compile time. Since fluent API implementations typically rely on overloading function names, they are hard to realize in functional programming languages. This work shows how functional fluent APIs can be implemented in the absence of name overloading, by relying on parametric polymorphism and Hindley-Milner type inference. The implementation supports fluent API protocols in the regular- and deterministic context-free language classes, and even beyond.
C1 [Roth, Ori; Gil, Yossi] Technion, Haifa, Israel.
C3 Technion Israel Institute of Technology
RP Roth, O (corresponding author), Technion, Haifa, Israel.
EM soriroth@cs.technion.ac.il; yogi@cs.technion.ac.il
CR Aho AlfredV., 1977, Principles of Compiler Design
   Aldrich J., 2009, OOPSLA COMPANION, P1015, DOI DOI 10.1145/1639950
   Augustsson L, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P225
   Bodden Eric, 2012, International Journal on Software Tools for Technology Transfer, V14, P307, DOI 10.1007/s10009-010-0183-5
   Bourdoncle F., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P302, DOI 10.1145/263699.263743
   Bracker Jan, 2014, Practical Aspects of Declarative Languages. 16th International Symposium, PADL 2014. Proceedings: LNCS 8324, P65, DOI 10.1007/978-3-319-04132-2_5
   Calcagno C, 2003, LECT NOTES COMPUT SC, V2830, P57
   Czarnecki K, 2003, LECT NOTES COMPUT SC, V3016, P51
   Degen M, 2007, LECT NOTES COMPUT SC, V4609, P550
   DeLine Robert., 2001, Proceedings of the ACM SIGPLAN 2001 conference on Programming language design and implementation, P59, DOI DOI 10.1145/381694.378811
   Erdweg S, 2013, LECT NOTES COMPUT SC, V8225, P197, DOI 10.1007/978-3-319-02654-1_11
   Erdweg S, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P391
   Eysholdt M., 2010, P ACM INT C COMPANIO, P307, DOI DOI 10.1145/1869542.1869625
   Felleisen Matthias., 2015, 1st Summit on Advances in Programming Languages (SNAPL 2015), volume 32 of Leibniz International Proceedings in Informatics (LIPIcs), V32, P113, DOI DOI 10.4230/LIPICS.SNAPL.2015.113
   Ferles K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434298
   Field J, 2003, LECT NOTES COMPUT SC, V2694, P439
   Fink SJ, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348255
   Florijn G, 1995, LECT NOTES COMPUT SC, V952, P351
   Fowler M, 2005, Language workbenches: The killer-app for domain specific languages?
   Fowler Martin, 2005, FluentInterface
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Gil Yossi, 2019, 33 EUROP C OO PROG E, V13, DOI [10.4230/LIPIcs.ECOOP.2019.13, DOI 10.4230/LIPICS.ECOOP.2019.13]
   Gil Yossi, 2016, 30 EUROP C OO PROG E, V56, DOI [10.4230/ LIPIcs.ECOOP.2016.10, DOI 10.4230/LIPICS.ECOOP.2016.10]
   Gill A, 2014, COMMUN ACM, V57, P42, DOI 10.1145/2605205
   Harper Robert, 1986, Standard ml
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Hudak P, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P134, DOI 10.1109/ICSR.1998.685738
   Hutton G., 1998, Journal of Functional Programming, V8, P437, DOI 10.1017/S0956796898003050
   Kamin SN, 1997, PROCEEDINGS OF THE CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES, P297
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Kelly S, 1996, LECT NOTES COMPUT SC, V1080, P1
   Kennedy A., 1994, Programming Languages and Systems - ESOP '94. 5th European Symposium on Programming. Proceedings, P348
   Kiselyov O, 2014, LECT NOTES COMPUT SC, V8475, P86, DOI 10.1007/978-3-319-07151-0_6
   Kuncak V, 2002, ACM SIGPLAN NOTICES, V37, P17, DOI 10.1145/565816.503276
   Leijen D, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P109, DOI 10.1145/331963.331977
   Leijen Daan, 2001, UUCS200127 U UTR DEP
   MacQueen D.B., 1984, LISP FUNCTIONAL PROG, P198
   Mairson HG, 2004, J FUNCT PROGRAM, V14, P623, DOI 10.1017/S0956796804005131
   Nakamaru T, 2017, PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'17), P199, DOI [10.23919/ISPSD.2017.7988922, 10.1145/3136040.3136041]
   Neubauer M, 2002, ACM SIGPLAN NOTICES, V37, P233, DOI 10.1145/565816.503294
   Nystrom N, 2003, LECT NOTES COMPUT SC, V2622, P138
   Pradel M, 2012, PROC INT CONF SOFTW, P925, DOI 10.1109/ICSE.2012.6227127
   Roth O, 2023, Arxiv, DOI [arXiv:2211.01473, 10.48550/ARXIV.2211.01473, DOI 10.48550/ARXIV.2211.01473]
   Roth Ori, 2023, FLUNCT FUNCTIONAL FL, DOI [10.5281/zenodo.7723110, DOI 10.5281/ZENODO.7723110]
   Roth Ori, 2019, Dagstuhl Artifacts Series, V5, p12: 1, DOI [10.4230/DARTS.5.2.12, DOI 10.4230/DARTS.5.2.12]
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Sheard T, 1999, LECT NOTES COMPUT SC, V1608, P207
   Shields Mark, 2001, ELECTRON NOTES THEOR, V59, P89, DOI [10.1016/S1571-0661(05)80455-4BABEL'01, DOI 10.1016/S1571-0661(05)80455-4BABEL'01]
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Sunshine J, 2011, ACM SIGPLAN NOTICES, V46, P713, DOI 10.1145/2076021.2048122
   The Apache Software Foundation, 2023, DOMAIN SPECIFIC LANG
   Voelter M, 2012, PROC INT CONF SOFTW, P1449, DOI 10.1109/ICSE.2012.6227070
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Xu H, 2010, LECT NOTES COMPUT SC, V6141, P192, DOI 10.1007/978-3-642-13953-6_11
   Yamazaki Tetsuro, 2022, SLE 2022: Proceedings of the 15th ACM SIGPLAN International Conference on Software Language Engineering, P249, DOI 10.1145/3567512.3567533
   Yamazaki T, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360560
NR 56
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600032
DA 2024-07-18
ER

PT J
AU Wang, CL
   Lin, FZ
AF Wang, Chenglin
   Lin, Fangzhen
TI Solving Conditional Linear Recurrences for Program Verification: The
   Periodic Case
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Recurrence solving; invariant generation; loop summarization
AB In program verification, one method for reasoning about loops is to convert them into sets of recurrences, and then try to solve these recurrences by computing their closed-form solutions. While there are solvers for computing closed-form solutions to these recurrences, their capabilities are limited when the recurrences have conditional expressions, which arise when the body of a loop contains conditional statements. In this paper, we take a step towards solving these recurrences. Specifically, we consider what we call conditional linear recurrences and show that given such a recurrence and an initial value, if the index sequence generated by the recurrence on the initial value is what we call ultimately periodic, then it has a closed-form solution. However, checking whether such a sequence is ultimately periodic is undecidable so we propose a heuristic "generate and verify" algorithm for checking the ultimate periodicity of the sequence and computing closed-form solutions at the same time. We implemented a solver based on this algorithm, and our experiments show that a straightforward program verifier based on our solver and using the SMT solver Z3 is effective in verifying properties of many benchmark programs that contain conditional statements in their loops, and compares favorably to other recurrence-based verification tools. Finally, we also consider extending our results to computing closed-form solutions of recurrences with unknown initial values.
C1 [Wang, Chenglin; Lin, Fangzhen] Hong Kong Univ Sci & Technol, Hong Kong, Peoples R China.
C3 Hong Kong University of Science & Technology
RP Wang, CL (corresponding author), Hong Kong Univ Sci & Technol, Hong Kong, Peoples R China.
EM cwangci@cse.ust.hk; flin@cse.ust.hk
RI wang, chenglin/HZJ-8986-2023
OI Wang, Chenglin/0000-0002-1930-4771
CR [Anonymous], 2021, COMP 2021 10 INT COM
   Baldoni R, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3182657
   Beyer D, 2015, LECT NOTES COMPUT SC, V9206, P622, DOI 10.1007/978-3-319-21690-4_42
   Breck J, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P688, DOI 10.1145/3385412.3386035
   Cooper D. C., 1972, Machine intelligence 7, P91
   Cyphert J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290358
   Darke Priyanka, 2021, Tools and Algorithms for the Construction and Analysis of Systems. 27th International Conference, TACAS 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12652), P458, DOI 10.1007/978-3-030-72013-1_32
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dillig I, 2013, ACM SIGPLAN NOTICES, V48, P443, DOI [10.1145/2509136.2509511, 10.1145/2544173.2509511]
   Farzan A, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P57, DOI 10.1109/FMCAD.2015.7542253
   Gulwani S, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P292, DOI 10.1145/1806596.1806630
   Haase Christoph, 2014, Reachability Problems. 8th International Workshop, RP 2014. Proceedings: LNCS 8762, P112, DOI 10.1007/978-3-319-11439-2_9
   Horn R., 1985, Matrix Analysis, DOI [10.1017/CBO9780511810817, 10.1017/CBO9781139020411]
   Jeannet B, 2014, ACM SIGPLAN NOTICES, V49, P529, DOI 10.1145/2535838.2535843
   Karp R. M., 1969, J COMPUT SYST SCI, V3, P147, DOI DOI 10.1016/S0022-0000(69)80011-5
   Kincaid Z, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290368
   Kincaid Z, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158142
   Kincaid Z, 2017, ACM SIGPLAN NOTICES, V52, P248, DOI [10.1145/3062341.3062373, 10.1145/3140587.3062373]
   Kovács L, 2008, LECT NOTES COMPUT SC, V4963, P249, DOI 10.1007/978-3-540-78800-3_18
   Lin FZ, 2016, ARTIF INTELL, V235, P1, DOI 10.1016/j.artint.2016.01.014
   Manna Zohar, 1979, J SYMBOLIC LOGIC, V44, P1
   Meurer A, 2017, PEERJ COMPUT SCI, DOI 10.7717/peerj-cs.103
   Ouaknine J., 2012, INT WORKSH REACH PRO, P21, DOI [10.1007/978-3-642-33512-9_3, DOI 10.1007/978-3-642-33512-9_3]
   Petkovsek Marko, 1996, A = B
   Rajkhowa P, 2019, LECT NOTES COMPUT SC, V11429, P250, DOI 10.1007/978-3-030-17502-3_23
   Rajkhowa Pritom, 2019, THESIS, DOI [10.14711/thesis-991012758169203412, DOI 10.14711/THESIS-991012758169203412]
   Redfern Darren, 2012, MAPLE HDB MAPLE 5 RE
   Sharma Rahul, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P703, DOI 10.1007/978-3-642-22110-1_57
   Wang Chenglin, 2023, OOPSLA 2023 ARTIFACT, DOI [10.1145/3554354, DOI 10.1145/3554354]
   Wolfram Stephen, 1999, The MATHEMATICA® book, version 4
NR 30
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586028
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600003
OA gold
DA 2024-07-18
ER

PT J
AU Hou, KB
   Angiuli, C
   Mullanix, R
AF Hou (favonia), Kuen-Bang
   Angiuli, Carlo
   Mullanix, Reed
TI An Order-Theoretic Analysis of Universe Polymorphism
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type theory; universes; universe polymorphism
AB We present a novel formulation of universe polymorphism in dependent type theory in terms of monads on the category of strict partial orders, and a novel algebraic structure, displacement algebras, on top of which one can implement a generalized form of McBride's "crude but effective stratification" scheme for lightweight universe polymorphism. We give some examples of exotic but consistent universe hierarchies, and prove that every universe hierarchy in our sense can be embedded in a displacement algebra and hence implemented via our generalization of McBride's scheme. Many of our technical results are mechanized in Agda, and we have an OCaml library for universe levels based on displacement algebras, for use in proof assistant implementations.
C1 [Hou (favonia), Kuen-Bang; Mullanix, Reed] Univ Minnesota, Dept Comp Sci & Engn, Minneapolis, MN 55455 USA.
   [Angiuli, Carlo] Carnegie Mellon Univ, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
C3 University of Minnesota System; University of Minnesota Twin Cities;
   Carnegie Mellon University
RP Hou, KB (corresponding author), Univ Minnesota, Dept Comp Sci & Engn, Minneapolis, MN 55455 USA.
EM kbh@umn.edu; cangiuli@cs.cmu.edu; rmullani@umn.edu
OI Hou, Kuen-Bang/0000-0002-2310-3673; Angiuli, Carlo/0000-0002-9590-3303
FU U.S. Air Force Office of Scientific Research [FA9550-21-0009]
FX We thank Michael Shulman and Jonathan Sterling for helpful conversations
   about hierarchy theories. We thank Jad Ghalayini for suggesting fractal
   universe levels (Section 3.3.7) to us during WITS 2022 (Workshop on the
   Implementation of Type Systems), and Steve Awodey for suggesting
   integral universe levels (Example 2.3). This research was sponsored by
   the U.S. Air Force Office of Scientific Research under grant number
   FA9550-21-0009. Any opinions, findings and conclusions or
   recommendations expressed in this material are those of the authors and
   do not necessarily reflect the views of the AFOSR.
CR Angiuli C, 2018, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.274.1
   Annenkov Danil, 2017, arXiv
   Awodey S, 2018, MATH STRUCT COMP SCI, V28, P241, DOI 10.1017/S0960129516000268
   Bezem M, 2022, THEOR COMPUT SCI, V913, P1, DOI 10.1016/j.tcs.2022.01.017
   Bezem M, 2008, LECT NOTES ARTIF INT, V5330, P47, DOI 10.1007/978-3-540-89439-1_4
   Bezem Marc, 2022, TYPE THEORIES UNIVER
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Coquand T., 1986, Proceedings of the Symposium on Logic in Computer Science (Cat. No.86CH2321-8), P227
   Coquand T, 2019, THEOR COMPUT SCI, V777, P184, DOI 10.1016/j.tcs.2019.01.015
   Coquand Thierry, 2013, PRESHEAF MODEL TYPE
   Courant J., 2002, Theorem Proving in Higher Order Logics. 15th International Conference, TPHOLs 2002. Proceedings (Lecture Notes in Computer Science Vol.2410), P115
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Dybjer Peter, 1995, Lecture Notes in Computer Science, V1158, DOI [10.1007/3-540-61780-9\_66, DOI 10.1007/3-540-61780-9, 10.1007/3-540-61780-9_66, DOI 10.1007/3-540-61780]
   Gilbert G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290316
   Gratzer D, 2020, IEEE S LOG, P492, DOI 10.1145/3373718.3394736
   HARPER R, 1991, THEOR COMPUT SCI, V89, P107, DOI 10.1016/0304-3975(90)90108-T
   Huet Gerard, 1987, EXTENDING CALCULUS C
   Kovacs Andras, 2022, 30 EACSL ANN C COMPU, V28, P1
   Martin-Lof P., 1971, INTUITIONISTIC THEOR
   Martin-Lof P., 1975, STUDIES LOGIC FDN MA, V80, P73
   McBride Conor, 2002, CRUDE EFFECTIVE STRA
   McBride Conor, 2011, CRUDE EFFECTIVE STRA
   Newstead C., 2018, Algebraic Models of Dependent Type Theory
   Palmgren Erik, 1998, P ACM PROGRAM LANG, V7
   RedPRL Development Team, 2022, ALG
   RedPRL Development Team, 2022, MUG
   Setzer A, 2000, ARCH MATH LOGIC, V39, P155, DOI 10.1007/s001530050140
   Sozeau Matthieu, 2014, Interactive Theorem Proving. 5th International Conference, ITP 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8558, P499, DOI 10.1007/978-3-319-08970-6_32
   Takahashi Yuta, 2022, HIGHER ORDER UNIVERS
   The 1Lab Development Team, 2022, 1LAB
   The Agda Development Team, 2022, The Agda Programming Language
   The Coq development team, 2022, The Coq proof assistant
   The HELM Team, 2016, MAT
   The LEGO Team, 1999, LEGO PROOF ASS
   Ha T, 2018, J KNOT THEOR RAMIF, V27, DOI 10.1142/S0218216518410018
NR 35
TC 0
Z9 0
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571250
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500057
OA gold
DA 2024-07-18
ER

PT J
AU Kerinec, A
   Manzonetto, G
   Olimpieri, F
AF Kerinec, Axel
   Manzonetto, Giulio
   Olimpieri, Federico
TI Why Are Proofs Relevant in Proof-Relevant Models?*
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Distributors; Intersection Types; Lambda calculus; Approximation Theorem
ID TAYLOR EXPANSION; LAMBDA; FUNCTORS
AB Relational models of lambda-calculus can be presented as type systems, the relational interpretation of a lambda-term being given by the set of its typings. Within a distributors-induced bicategorical semantics generalizing the relational one, we identify the class of `categorified' graph models and show that they can be presented as type systems as well. We prove that all the models living in this class satisfy an Approximation Theorem stating that the interpretation of a program corresponds to the filtered colimit of the denotations of its approximants. As in the relational case, the quantitative nature of our models allows to prove this property via a simple induction, rather than using impredicative techniques. Unlike relational models, our 2-dimensional graph models are also proof-relevant in the sense that the interpretation of a lambda-term does not contain only its typings, but the whole type derivations. The additional information carried by a type derivation permits to reconstruct an approximant having the same type in the same environment. From this, we obtain the characterization of the theory induced by the categorified graph models as a simple corollary of the Approximation Theorem: two lambda -terms have isomorphic interpretations exactly when their Bohm trees coincide.
C1 [Kerinec, Axel; Manzonetto, Giulio] Univ Sorbonne Paris Nord, LIPN, CNRS UMR 7030, Paris, France.
   [Olimpieri, Federico] Univ Leeds, Sch Math, Leeds, W Yorkshire, England.
C3 University of Leeds
RP Kerinec, A (corresponding author), Univ Sorbonne Paris Nord, LIPN, CNRS UMR 7030, Paris, France.
EM kerinec@lipn.univ-paris13.fr; manzonetto@univ-paris13.fr;
   f.olimpieri@leeds.ac.uk
OI Manzonetto, Giulio/0000-0003-1448-9014; Kerinec,
   Axel/0000-0003-0920-8847
FU ANR PRC Project PPS; US Air Force Office for Scientific Research
   [FA9550-21-1-0007]
FX This work is partly supported by ANR PRC Project PPS and by the US Air
   Force Office for Scientific Research under award number
   FA9550-21-1-0007. We are grateful to the anonymous reviewers for their
   suggestions that allowed us to improve our presentation considerably.
CR ABRAMSKY S, 1991, ANN PURE APPL LOGIC, V51, P1, DOI 10.1016/0168-0072(91)90065-T
   [Anonymous], 1998, Domains and lambda-calculi
   [Anonymous], 1980, Bulletin of the Australian Mathematical Society, V22, P1, DOI [10.1017/S0004972700006353, DOI 10.1017/S0004972700006353]
   Barendregt H, 2013, PERSPECT LOGIC, P1, DOI 10.1017/CBO9781139032636
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Barendregt H.P., 1984, Studies in logic and the foundations of mathematics
   Barendregt Henk P., 1977, Studies in Logic and the Foundations of Mathematics, V90, P1091, DOI [10.1016/s0049-237x(08)71129-7, DOI 10.1016/S0049-237X(08)71129-7]
   Benabou J, 1973, DISTRIBUTEURS APRES
   Berline C, 2000, THEOR COMPUT SCI, V249, P81, DOI 10.1016/S0304-3975(00)00057-8
   Borceux F, 1994, Handbook of Categorical Algebra: Volume 1: Basic Category Theory. Encyclopedia of Mathematics and Its Applications, V1, DOI [DOI 10.1017/CBO9780511525858, 10.1017/ cbo9780511525858]
   Breuvart F, 2018, LOG METH COMPUT SCI, V14, DOI 10.23638/LMCS-14(3:2)2018
   Bucciarelli Antonio, 2014, Theoretical Computer Science. 8th IFIP TC 1/WG 2.2 International Conference, TCS 2014. Proceedings: LNCS 8705, P341, DOI 10.1007/978-3-662-44602-7_26
   Bucciarelli A, 2007, LECT NOTES COMPUT SC, V4646, P298
   Bucciarelli A, 2017, LOG J IGPL, V25, P431, DOI 10.1093/jigpal/jzx018
   COPPO M, 1987, INFORM COMPUT, V72, P85, DOI 10.1016/0890-5401(87)90042-3
   de Carvalho D, 2009, Arxiv, DOI arXiv:0905.4251
   De Carvalho D, 2018, MATH STRUCT COMP SCI, V28, P1169, DOI 10.1017/S0960129516000396
   de Carvalho Daniel, 2007, THESIS AIX MARSEILLE
   DELLAROCCA SR, 1982, INFORM CONTROL, V54, P201, DOI 10.1016/S0019-9958(82)80022-3
   Ehrhard T, 2003, THEOR COMPUT SCI, V309, P1, DOI 10.1016/S0304-3975(03)00392-X
   Ehrhard T., 2012, LIPIcs, P259, DOI DOI 10.4230/LIPICS.CSL
   Ehrhard T, 2008, THEOR COMPUT SCI, V403, P347, DOI 10.1016/j.tcs.2008.06.001
   Ehrhard T, 2006, LECT NOTES COMPUT SC, V3988, P186, DOI 10.1007/11780342_20
   Ehrhard T, 2016, LECT NOTES COMPUT SC, V9632, P202, DOI 10.1007/978-3-662-49498-1_9
   ENGELER E, 1981, ALGEBRA UNIV, V13, P389, DOI 10.1007/BF02483849
   Fiore M, 2008, J LOND MATH SOC, V77, P203, DOI 10.1112/jlms/jdm096
   Fiore M, 2018, SEL MATH-NEW SER, V24, P2791, DOI 10.1007/s00029-017-0361-3
   Fiore M, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785708
   Fiore M, 2020, IEEE S LOG, P425, DOI 10.1145/3373718.3394769
   Fosco Loregian, 2021, COEND CALCULUS, DOI [10.1017/9781108778657, DOI 10.1017/9781108778657]
   Galal Zeinab, 2020, 5 INT C FORMAL STRUC, V167, DOI [10.4230/LIPIcs..FSCD.2020.16, DOI 10.4230/LIPICS..FSCD.2020.16]
   Gambino N, 2017, MEM AM MATH SOC, V249, P1, DOI 10.1090/memo/1184
   GIRARD JY, 1988, ANN PURE APPL LOGIC, V37, P129, DOI 10.1016/0168-0072(88)90025-5
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Guerrieri Giulio, 2021, LEIBNIZ INT P INFORM, V183, DOI [10.4230/LIPIcs. CSL.2021.25, DOI 10.4230/LIPICS.CSL.2021.25]
   Hilken BP, 1996, THEOR COMPUT SCI, V170, P407
   Hyland JME, 2017, MATH STRUCT COMP SCI, V27, P762, DOI 10.1017/S0960129515000377
   HYLAND M, 1976, J LOND MATH SOC, V12, P361
   Hyland M, 2014, ELECTRON NOTES THEOR, V303, P59, DOI 10.1016/j.entcs.2014.02.004
   Hyland M, 2006, ELECTRON NOTES THEOR, V161, P43, DOI 10.1016/j.entcs.2006.04.024
   Intrigila B, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(1:6)2019
   Jacobs B., 1997, Bulletin of the European Association for Theoretical Computer Science, P222
   Johnson Niles, 2021, 2-Dimensional Categories, DOI [DOI 10.1093/OSO/9780198871378.001.0001, 10.1093/oso/ 9780198871378.001.0001]
   Joyal Andre, 1986, COMBINATOIRE ENUMERA, P126
   Karazeris Panagis, 2001, THEOR APPL CATEG, V9, P106
   Kelly M., 1982, Lecture Notes in Mathematics, V64
   Laird J, 2017, LECT NOTES COMPUT SC, V10203, P36, DOI 10.1007/978-3-662-54458-7_3
   Laird J, 2013, IEEE S LOG, P301, DOI 10.1109/LICS.2013.36
   Longo G., 1984, LOGIC C 82, P241, DOI DOI 10.1016/S0049-237X(08)71819-6
   Lusin S, 2004, J LOGIC COMPUT, V14, P373, DOI 10.1093/logcom/14.3.373
   Manzonetto G, 2014, ELECTRON NOTES THEOR, V308, P245, DOI 10.1016/j.entcs.2014.10.014
   Mazza D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158094
   Mazza Damiano, 2017, THESIS U SORBONNE PA
   Olimpieri F, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470617
   Olimpieri Federico, 2020, THESIS AIX MARSEILLE
   Ong C. L., 2017, LICS
   Paolini L, 2017, MATH STRUCT COMP SCI, V27, P626, DOI 10.1017/S0960129515000316
   Saville Philip, 2020, ARXIV
   Scott D., 1976, SIAM Journal on Computing, V5, P522, DOI 10.1137/0205037
   Seely R. A. G., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P65
   TAIT WW, 1966, B AM MATH SOC, V72, P980, DOI 10.1090/S0002-9904-1966-11611-7
   Tsukada T, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P889, DOI 10.1145/3209108.3209157
   Tsukada T, 2017, IEEE S LOG
   Van Bakel S, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1922649.1922657
   Wadsworth C. P., 1976, SIAM Journal on Computing, V5, P488, DOI 10.1137/0205036
NR 65
TC 4
Z9 4
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
AR 8
DI 10.1145/3571201
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500008
OA gold
DA 2024-07-18
ER

PT J
AU Dardinier, T
   Muller, P
   Summers, AJ
AF Dardinier, Thibault
   Muller, Peter
   Summers, Alexander J.
TI Fractional Resources in Unbounded Separation Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Fractional permissions; combinability; (co)inductive predicates; magic
   wands; automatic deductive verifiers
ID VERIFICATION
AB Many separation logics support fractional permissions to distinguish between read and write access to a heap location, for instance, to allow concurrent reads while enforcing exclusive writes. Fractional permissions extend to composite assertions such as (co)inductive predicates and magic wands by allowing those to be multiplied by a fraction. Typical separation logic proofs require that this multiplication has three key properties: it needs to distribute over assertions, it should permit fractions to be factored out from assertions, and two fractions of the same assertion should be combinable into one larger fraction.
   Existing formal semantics incorporating fractional assertions into a separation logic define multiplication semantically (via models), resulting in a semantics in which distributivity and combinability do not hold for key resource assertions such as magic wands, and fractions cannot be factored out from a separating conjunction. By contrast, existing automatic separation logic verifiers define multiplication syntactically, resulting in a different semantics for which it is unknown whether distributivity and combinability hold for all assertions.
   In this paper, we present a novel semantics for separation logic assertions that allows states to hold more than a full permission to a heap location during the evaluation of an assertion. By reimposing upper bounds on the permissions held per location at statement boundaries, we retain key properties of separation logic, in particular, the frame rule. Our assertion semantics unifies semantic and syntactic multiplication and thereby reconciles the discrepancy between separation logic theory and tools and enjoys distributivity, factorisability, and combinability. We have formalised our semantics and proved its properties in Isabelle/HOL.
C1 [Dardinier, Thibault; Muller, Peter] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
   [Summers, Alexander J.] Univ British Columbia, Dept Comp Sci, Vancouver, BC, Canada.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; University of
   British Columbia
RP Dardinier, T (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
EM thibault.dardinier@inf.ethz.ch; peter.mueller@inf.ethz.ch;
   alex.summers@ubc.ca
OI Dardinier, Thibault/0000-0003-2719-4856; Summers,
   Alexander/0000-0001-5554-9381
FU Swiss National Science Foundation (SNSF) [197065]
FX We thank Jerome Dohrau for noticing an interesting connection with the
   problem of inferring annotations, and Gaurav Parthasarathy for numerous
   helpful discussions about this work. This work was partially funded by
   the Swiss National Science Foundation (SNSF) under Grant No. 197065.
CR Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Astrauskas V, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360573
   Bell CJ, 2010, LECT NOTES COMPUT SC, V6337, P151, DOI 10.1007/978-3-642-15769-1_10
   Blom S, 2015, INT J SOFTW TOOLS TE, V17, P757, DOI 10.1007/s10009-015-0372-3
   Blom S, 2014, LECT NOTES COMPUT SC, V8442, P127, DOI 10.1007/978-3-319-06410-9_9
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Boyland JT, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1749608.1749611
   Brotherston James, 2020, COMPUTER AIDED VERIF
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Cao QX, 2019, Arxiv, DOI [arXiv:1909.08789, 10.48550/arXiv.1909.08789, DOI 10.48550/ARXIV.1909.08789]
   Chang BYE, 2008, ACM SIGPLAN NOTICES, V43, P247, DOI 10.1145/1328897.1328469
   COUSOT P, 1979, PAC J MATH, V82, P43, DOI 10.2140/pjm.1979.82.43
   Dardinier T, 2022, LECT NOTES COMPUT SC, V13372, P130, DOI 10.1007/978-3-031-13188-2_7
   Dardinier Thibault, 2022, Archive of Formal ProofsSeptember
   Dardinier Thibault, 2022, Fractional Resources in Unbounded Separation Logic (artifact)., DOI [10.5281/zenodo.7072457, DOI 10.5281/ZENODO.7072457]
   Dockins R, 2009, LECT NOTES COMPUT SC, V5904, P161, DOI 10.1007/978-3-642-10672-9_13
   Haack C, 2009, J OBJECT TECHNOL, V8, P55, DOI 10.5381/jot.2009.8.4.a3
   Hobor A, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(2:02)2012
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jacobs B, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P271, DOI 10.1145/1926385.1926417
   Jensen JB, 2011, J OBJECT TECHNOL, V10, DOI 10.5381/jot.2011.10.1.a2
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Krishnaswami NeelakantanR., 2006, SAVCBS 06, P83, DOI DOI 10.1145/1181195.1181213
   Le Xuan-Bach, 2018, EUR S PROGR ESOP AM
   Leino KRM, 2010, LECT NOTES COMPUT SC, V6012, P407, DOI 10.1007/978-3-642-11957-6_22
   Leino KRM, 2009, LECT NOTES COMPUT SC, V5705, P195, DOI 10.1007/978-3-642-03829-7_7
   Maeda Toshiyuki., 2011, Proceedings of the 7th ACM SIGPLAN Workshop on Types in Language Design and Implementation, TLDI'11, P29, DOI DOI 10.1145/1929553.1929559
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   O'Hearn PW, 2004, ACM SIGPLAN NOTICES, V39, P268, DOI [10.1145/982962.964024, 10.1145/1498926.1498929]
   Parkinson M, 2005, ACM SIGPLAN NOTICES, V40, P247, DOI 10.1145/1047659.1040326
   Parkinson Matthew, 2005, Ph.D. Dissertation.
   Penninckx W, 2015, LECT NOTES COMPUT SC, V9032, P158, DOI 10.1007/978-3-662-46669-8_7
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Schwerhoff Malte, 2015, LIPIcs, V37, P614
   Summers AJ, 2018, LECT NOTES COMPUT SC, V10805, P190, DOI 10.1007/978-3-319-89960-2_11
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Tuerk Thomas., 2010, VER SOFTW THEOR TOOL
   Vafeiadis V, 2011, ELECTRON NOTES THEOR, V276, P335, DOI 10.1016/j.entcs.2011.09.029
   Villard J, 2009, LECT NOTES COMPUT SC, V5904, P194, DOI 10.1007/978-3-642-10672-9_15
NR 43
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 163
DI 10.1145/3563326
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200040
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Goldstein, H
   Pierce, BC
AF Goldstein, Harrison
   Pierce, Benjamin C.
TI Parsing Randomness
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Random generation; Parsing; Property-based testing; Formal languages
AB Random data generators can be thought of as parsers of streams of randomness. This perspective on generators for random data structures is established folklore in the programming languages community, but it has never been formalized, nor have its consequences been deeply explored.
   We build on the idea of freer monads to develop free generators, which unify parsing and generation using a common structure that makes the relationship between the two concepts precise. Free generators lead naturally to a proof that a monadic generator can be factored into a parser plus a distribution over choice sequences. Free generators also support a notion of derivative, analogous to the familiar Brzozowski derivatives of formal languages, allowing analysis tools to lpreviewz the effect of a particular generator choice. This gives rise to a novel algorithm for generating data structures satisfying user-specified preconditions.
C1 [Goldstein, Harrison; Pierce, Benjamin C.] Univ Penn, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Goldstein, H (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM hgo@seas.upenn.edu; bcpierce@cis.upenn.edu
OI Pierce, Benjamin/0000-0001-7839-1636; Goldstein,
   Harrison/0000-0001-9631-1169
FU NSF [1421243, 1521523]
FX Thank you to John Hughes for his invaluable comments on an early draft
   of this work, and to Penn's PLClub for their continued support. This
   work was financially supported by NSF awards #1421243, Random Testing
   for Language Design and #1521523, Expeditions in Computing: The Science
   of Deep Specification.
CR BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Claessen K, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000143
   Dewey Kyle Thomas, 2017, Automated Black Box Generation of Structured Inputs for Use in Software Testing
   Dolan Stephen, 2017, OCAML WORKSH
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   Garnock-Jones T, 2018, Arxiv, DOI arXiv:1801.10490
   Godefroid P, 2017, IEEE INT CONF AUTOM, P50, DOI 10.1109/ASE.2017.8115618
   Goldstein Harrison, 2022, Zenodo, DOI 10.5281/ZENODO.7086231
   Goldstein Harrison, 2021, ICFP Student Research Competition
   Hughes J, 2007, LECT NOTES COMPUT SC, V4354, P1
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Lampropoulos L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158133
   Lampropoulos L, 2017, ACM SIGPLAN NOTICES, V52, P114, DOI 10.1145/3093333.3009868
   Leijen Daan, 2001, Technical Report
   LEVENSHT.VI, 1965, DOKL AKAD NAUK SSSR+, V163, P845
   Löscher A, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P46, DOI 10.1145/3092703.3092711
   MacIver David R., 2019, Journal of Open Source Software, V4, P1891, DOI DOI 10.21105/JOSS.01891
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Petricek Tomas, 2009, P ITAT
   Reddy S, 2020, PROC INT CONF SOFTW, P1410, DOI 10.1145/3377811.3380399
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
NR 22
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 128
DI 10.1145/3563291
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200005
OA gold
DA 2024-07-18
ER

PT J
AU Accattoli, B
   Dal Lago, U
   Vanoni, G
AF Accattoli, Beniamino
   Dal Lago, Ugo
   Vanoni, Gabriele
TI Multi Types and Reasonable Space
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE lambda calculus; intersection types; cost models; abstract machines;
   space complexity
ID INTERSECTION TYPES; SEMANTICS
AB Accattoli, Dal Lago, and Vanoni have recently proved that the space used by the Space KAM, a variant of the Krivine abstract machine, is a reasonable space cost model for the lambda-calculus accounting for logarithmic space, solving a longstanding open problem. In this paper, we provide a new system of multi types (a variant of intersection types) and extract from multi type derivations the space used by the Space KAM, capturing into a type system the space complexity of the abstract machine. Additionally, we show how to capture also the time of the Space KAM, which is a reasonable time cost model, via minor changes to the type system.
C1 [Accattoli, Beniamino] INRIA, LIX, Palaiseau, France.
   [Accattoli, Beniamino] Ecole Polytech, LIX, UMR 7161, Palaiseau, France.
   [Dal Lago, Ugo; Vanoni, Gabriele] Univ Bologna, Bologna, Italy.
   [Dal Lago, Ugo; Vanoni, Gabriele] Inria Sophia Antipolis, Valbonne, France.
C3 Institut Polytechnique de Paris; Ecole Polytechnique; Inria; Institut
   Polytechnique de Paris; Ecole Polytechnique; University of Bologna
RP Accattoli, B (corresponding author), INRIA, LIX, Palaiseau, France.; Accattoli, B (corresponding author), Ecole Polytech, LIX, UMR 7161, Palaiseau, France.
EM beniamino.accattoli@inria.fr; ugo.dallago@unibo.it;
   gabriele.vanoni2@unibo.it
RI ; Dal Lago, Ugo/K-9621-2015
OI Vanoni, Gabriele/0000-0001-8762-8674; Dal Lago, Ugo/0000-0001-9200-070X;
   Accattoli, Beniamino/0000-0003-4944-9944
CR Abramsky S, 2000, INFORM COMPUT, V163, P409, DOI [10.1006/inco.2000.2930, 10.1006/inco2000.2930]
   Accattoli Beniamino, 2020, PPDP '20: Proceedings of the 22nd International Symposium on Principles and Practice of Declarative Programming, DOI 10.1145/3414080.3414108
   Accattoli B, 2022, Arxiv, DOI [arXiv:2207.08795, 10.48550/arXiv.2207.08795, DOI 10.48550/ARXIV.2207.08795]
   Accattoli B, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470726
   Accattoli B, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236789
   Accattoli B, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434332
   Accattoli B, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S095679682000012X
   Accattoli B, 2019, LECT NOTES COMPUT SC, V11423, P410
   Accattoli B, 2018, LECT NOTES COMPUT SC, V11275, P45, DOI 10.1007/978-3-030-02768-1_3
   Accattoli B, 2018, ELECTRON NOTES THEOR, V338, P23, DOI 10.1016/j.entcs.2018.10.003
   Accattoli B, 2017, INFORM COMPUT, V255, P224, DOI 10.1016/j.ic.2017.01.003
   Accattoli B, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P363, DOI 10.1145/2628136.2628154
   Accattoli B, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(1:4)2016
   Accattoli Beniamino, 2022, LICS 22 37 ANN ACMIE, DOI [10.1145/3531130.3533362, DOI 10.1145/3531130.3533362]
   Alves Sandra, 2019, LIPICS, V175
   [Anonymous], 1990, Handbook of Theoretical Computer Science (Vol. A): Algorithms and Complexity
   Belloch G., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P226, DOI 10.1145/224164.224210
   Bernadet A, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:3)2013
   Bono V, 2020, IEEE S LOG, P7, DOI 10.1145/3373718.3394733
   Bucciarelli A, 2017, LOG J IGPL, V25, P431, DOI 10.1093/jigpal/jzx018
   Bucciarelli Antonio, 2020, Lecture Notes in Computer Science, V12073, P13, DOI [DOI 10.1007/978-3-030-59025, 10.1007/978-3-030-59025-3_2]
   Coppo M., 1978, Archiv fur Mathematische Logik und Grundlagenforschung, V19, P139, DOI 10.1007/BF02011875
   Dal Lago U, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434313
   Danos V, 1999, THEOR COMPUT SCI, V227, P79, DOI 10.1016/S0304-3975(99)00049-3
   Danos V, 1996, IEEE S LOG, P394
   de Carvalho D, 2011, THEOR COMPUT SCI, V412, P1884, DOI 10.1016/j.tcs.2010.12.017
   de Carvalho D., 2007, Semantiques de la logique lineaire et temps de calcul
   De Carvalho D, 2018, MATH STRUCT COMP SCI, V28, P1169, DOI 10.1017/S0960129516000396
   Dezani-Ciancaglini Mariangiola, 2018, LECT NOTES COMPUTER, P68, DOI DOI 10.1007/978-3-030-22348-9_6
   Forster Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371095
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Friedman Daniel P., 2007, Higher-Order and Symbolic Computation, V20, P271, DOI 10.1007/S10990-007-9014-0
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Girard Jean-Yves, 1989, STUDIES LOGIC FDN MA, V127, P221, DOI [10.1016/S0049-237X(08)70271-4, DOI 10.1016/S0049-237X(08)70271-4]
   Kesner D, 2020, IEEE S LOG, P619, DOI 10.1145/3373718.3394774
   Kesner D, 2021, LECT NOTES COMPUT SC, V12650, P344, DOI 10.1007/978-3-030-71995-1_18
   Kesner Delia, 2022, LIPICS, V27, P20, DOI [10.4230/LIPIcs.CSL.2022.27, DOI 10.4230/LIPICS.CSL.2022.27]
   Krivine Jean-Louis, 2007, Higher-Order and Symbolic Computation, V20, P199, DOI 10.1007/S10990-007-9018-9
   Lengrand S, 2004, INFORM COMPUT, V189, P17, DOI 10.1016/j.ic.2003.09.004
   Mackie I., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P198, DOI 10.1145/199448.199483
   MOLLER NEERGAARD P., 2004, P 9 ACM SIGPLAN INT, P138, DOI DOI 10.1145/1016850.1016871
   Pierce B. C., 1997, Mathematical Structures in Computer Science, V7, P129, DOI 10.1017/S096012959600223X
   Sands D, 2002, LECT NOTES COMPUT SC, V2566, P60
   Sestoft P., 1997, Journal of Functional Programming, V7, P231, DOI 10.1017/S0956796897002712
   SLOT C, 1988, INFORM COMPUT, V77, P93, DOI 10.1016/0890-5401(88)90052-1
   VANBAKEL S, 1992, THEOR COMPUT SCI, V102, P135, DOI 10.1016/0304-3975(92)90297-S
   Vial Pierre, 2017, P LICS, p1S12
   Wand Mitchell, 2007, Higher-Order and Symbolic Computation, V20, P231, DOI 10.1007/s10990-007-9019-8
NR 48
TC 1
Z9 1
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 119
DI 10.1145/3547650
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000030
OA gold
DA 2024-07-18
ER

PT J
AU Ramsey, N
AF Ramsey, Norman
TI Beyond Relooper: Recursive Translation of Unstructured Control Flow to
   Structured Control Flow (Functional Pearl)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE WebAssembly; control-flow analysis; dominator tree; reverse postorder
   numbering; Haskell
ID GRAPHS
AB In many compilers, control flow is represented using an arbitrary directed graph. But in some interesting target languages, including JavaScript and WebAssembly, intraprocedural control flow can be expressed only in structured ways, using loops, conditionals, and multilevel breaks or exits. As was shown by Peterson, Kasami, and Tokura in 1973, such structured control flow can be obtained by translating arbitrary control flow. The translation uses two standard analyses, but as published, it takes three passes-Dwhich may explain why it was overlooked by Emscripten, a popular compiler from C to JavaScript. By tweaking the analyses and by applying fundamental ideas from functional programming (recursive functions and immutable abstract-syntax trees), the translation, along with a couple of code improvements, can be implemented in a single pass. This new implementation is slated to be added to the Glasgow Haskell Compiler. Its single-pass translation, its immutable representation, and its use of dominator trees make it much easier to reason about than the original translation.
C1 [Ramsey, Norman] Tweag, Paris, France.
   [Ramsey, Norman] Tufts Univ, Medford, MA 02155 USA.
C3 Tufts University
RP Ramsey, N (corresponding author), Tweag, Paris, France.; Ramsey, N (corresponding author), Tufts Univ, Medford, MA 02155 USA.
CR [Anonymous], 1970, ACM SIGPLAN NOTICES, DOI DOI 10.1145/390013.808479
   BAKER BS, 1977, J ACM, V24, P98, DOI 10.1145/321992.321999
   Bytecode Alliance, 2022, CRAN COD GEN
   DAVIDSON JW, 1984, ACM T PROGR LANG SYS, V6, P505, DOI 10.1145/1780.1783
   Erwig M, 2001, J FUNCT PROGRAM, V11, P467, DOI 10.1017/S0956796801004075
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   Hecht M. S., 1972, SIAM Journal on Computing, V1, P188, DOI 10.1137/0201014
   Iozzelli Yuri., 2019, SOLVING STRUCTURED C
   Janssen J, 1997, ACM T PROGR LANG SYS, V19, P1031, DOI 10.1145/267959.269971
   Jones SP, 1999, LECT NOTES COMPUT SC, V1702, P1
   Lengauer T., 1979, ACM T PROGR LANG SYS, V1, P121, DOI 10.1145/357062.357071
   Cardona PAN, 2015, CUAD ACT, P154
   PETERSON WW, 1973, COMMUN ACM, V16, P503, DOI 10.1145/355609.362337
   Peyton Simon L., 1992, J FUNCT PROGRAM, V2, P127
   Ramsey Norman, 2022, Zenodo, DOI 10.5281/ZENODO.6727752
   Ramsey N, 2010, ACM SIGPLAN NOTICES, V45, P121, DOI 10.1145/2088456.1863539
   Ramsey Norman, 2005, ACM SIGPLAN WORKSHOP, P101
   Ramsey Norman, 2005, C LANGUAGE SPECIFICA
   RAMSHAW L, 1988, J ACM, V35, P893, DOI 10.1145/48014.48021
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Titzer Ben L., 2022, PACMPL, V6
   Zakai A., 2011, Proceedings of the ACM international conference companion on object oriented programming systems languages and applications companion, P301, DOI DOI 10.1145/2048147.2048224
NR 22
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 90
DI 10.1145/3547621
PG 22
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000001
OA gold
DA 2024-07-18
ER

PT J
AU Spiwack, A
   Kiss, C
   Bernardy, JP
   Wu, N
   Eisenberg, RA
AF Spiwack, Arnaud
   Kiss, Csongor
   Bernardy, Jean-Philippe
   Wu, Nicolas
   Eisenberg, Richard A.
TI Linearly Qualified Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE GHC; Haskell; linear logic; linear types; constraints; qualified types;
   inference
ID INFERENCE
AB A linear parameter must be consumed exactly once in the body of its function. When declaring resources such as file handles and manually managed memory as linear arguments, a linear type system can verify that these resources are used safely. However, writing code with explicit linear arguments requires bureaucracy. This paper presents linear constraints, a front-end feature for linear typing that decreases the bureaucracy of working with linear types. Linear constraints are implicit linear arguments that are filled in automatically by the compiler. We present linear constraints as a qualified type system, together with an inference algorithm which extends GHC's existing constraint solver algorithm. Soundness of linear constraints is ensured by the fact that they desugar into Linear Haskell.
C1 [Spiwack, Arnaud; Eisenberg, Richard A.] Tweag, Paris, France.
   [Kiss, Csongor; Wu, Nicolas] Imperial Coll London, London, England.
   [Bernardy, Jean-Philippe] Univ Gothenburg, Gothenburg, Sweden.
C3 Imperial College London; University of Gothenburg
RP Spiwack, A (corresponding author), Tweag, Paris, France.
EM arnaud.spiwack@tweag.io; csongor.kiss14@imperial.ac.uk;
   jean-philippe.bernardy@gu.se; n.wu@imperial.ac.uk; rae@richarde.dev
OI Bernardy, Jean-Philippe/0000-0002-8469-5617; Eisenberg,
   Richard/0000-0002-7669-9781; Spiwack, Arnaud/0000-0002-5985-2086; Wu,
   Nicolas/0000-0002-4161-985X
FU Swedish Research Council [2014-39]; Centre for Linguistic Theory and
   Studies in Probability (CLASP) in the Department of Philosophy,
   Linguistics, and Theory of Science at the University of Gothenburg;
   EPSRC [EP/S028129/1]; EPSRC [EP/S028129/1] Funding Source: UKRI
FX Jean-Philippe Bernardy is supported by grant 2014-39 from the Swedish
   Research Council, which funds the Centre for Linguistic Theory and
   Studies in Probability (CLASP) in the Department of Philosophy,
   Linguistics, and Theory of Science at the University of Gothenburg.
   Nicolas Wu is supported by EPSRC Grant EP/S028129/1.
CR Abel A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408972
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Bottu GJ, 2017, ACM SIGPLAN NOTICES, V52, P148, DOI 10.1145/3156695.3122967
   Cervesato I, 2000, THEOR COMPUT SCI, V232, P133, DOI 10.1016/S0304-3975(99)00173-5
   Crary K., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P262, DOI 10.1145/292540.292564
   Danos V., 1993, Computational Logic and Proof Theory. Third Kurt Godel Colloquium, KGC '93 Proceedings, P159, DOI 10.1007/BFb0022564
   DeLine R, 2001, ACM SIGPLAN NOTICES, V36, P59, DOI 10.1145/381694.378811
   Dominguez Facundo, 2020, SAFE MEMORY MANAGEME
   Eisenberg RA, 2016, LECT NOTES COMPUT SC, V9632, P229, DOI 10.1007/978-3-662-49498-1_10
   Eisenberg Richard A., 2021, PROC ACM PROGRAM LAN, V5
   Fluet M, 2006, LECT NOTES COMPUT SC, V3924, P7
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   Hodas Joshua S., 1994, Logic Programming in Intuitionistic Linear Logic: Theory, Design, and Implementation
   HODAS JS, 1994, INFORM COMPUT, V110, P327, DOI 10.1006/inco.1994.1036
   JONES MP, 1994, SCI COMPUT PROGRAM, V22, P231, DOI 10.1016/0167-6423(94)00005-0
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Kiss Csongor, 2022, PROTOTYPE IMPLEMENTA
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Matsuda K, 2020, LECT NOTES COMPUT SC, V12075, P456, DOI 10.1007/978-3-030-44914-8_17
   Miller D., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P98
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pottier F, 2013, ACM SIGPLAN NOTICES, V48, P173, DOI [10.1145/2544174.2500598, 10.1145/2500365.2500598]
   Pottier Francois, 2005, ESSENCE ML TYPE INFE
   Radanne G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408985
   Shulman M, 2022, Arxiv, DOI arXiv:1805.07518
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   Spiwack Arnaud, 2021, ARXIV
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Vytiniotis D, 2011, J FUNCT PROGRAM, V21, P333, DOI 10.1017/S0956796811000098
   Vytiniotis D, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P39
   Walker D., 2001, Types in Compilation. Third International Workshop, TIC 2000. Revised Selected Papers (Lecture Notes in Computer Science Vol.2071), P177
   Weirich S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110275
   Zhu DP, 2005, LECT NOTES COMPUT SC, V3350, P83
NR 34
TC 2
Z9 2
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 95
DI 10.1145/3547626
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000006
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Kammar, O
   Katsumata, SY
   Saville, P
AF Kammar, Ohad
   Katsumata, Shin-ya
   Saville, Philip
TI Fully Abstract Models for Effectful λ-Calculi via Category-Theoretic
   Logical Relations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE full abstraction; call-by-value; O'Hearn & Riecke; fibration; monad
ID DEFINABILITY; GAMES; SUMS
AB We present a construction which, under suitable assumptions, takes a model of Moggi's computational lambda-calculus with sum types, effect operations and primitives, and yields a model that is adequate and fully abstract. The construction, which uses the theory of fibrations, categorical glueing, inverted perpendicular inverted perpendicular-lifting, and inverted perpendicular inverted perpendicular-closure, takes inspiration from O'Hearn & Riecke's fully abstract model for PCF. Our construction can be applied in the category of sets and functions, as well as the category of diffeological spaces and smooth maps and the category of quasi-Borel spaces, which have been studied as semantics for differentiable and probabilistic programming.
C1 [Kammar, Ohad] Univ Edinburgh, Sch Informat, Edinburgh, Midlothian, Scotland.
   [Katsumata, Shin-ya] Natl Inst Informat, Tokyo, Japan.
   [Saville, Philip] Univ Oxford, Dept Comp Sci, Oxford, England.
C3 University of Edinburgh; Research Organization of Information & Systems
   (ROIS); National Institute of Informatics (NII) - Japan; University of
   Oxford
RP Kammar, O (corresponding author), Univ Edinburgh, Sch Informat, Edinburgh, Midlothian, Scotland.
EM ohad.kammar@ed.ac.uk; s-katsumata@nii.ac.jp; philip.saville@cs.ox.ac.uk
OI Kammar, Ohad/0000-0002-2071-0929
FU Air Force Office of Scientific Research [FA9550-21-1-0038]; Royal
   Society University Research Fellow Enhancement Award [RGF/EA/181059];
   JST ERATO HASUO Metamathematics for Systems Design Project [JPMJER1603]
FX PS was supported by the Air Force Office of Scientific Research under
   award number FA9550-21-1-0038. OK and PS were supported by Royal Society
   University Research Fellow Enhancement Award number RGF/EA/181059. SK
   was supported by JST ERATO HASUO Metamathematics for Systems Design
   Project (No. JPMJER1603).
CR Abramsky S, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P334, DOI 10.1109/LICS.1998.705669
   Abramsky S, 2000, INFORM COMPUT, V163, P409, DOI [10.1006/inco.2000.2930, 10.1006/inco2000.2930]
   ABRAMSKY S, 1994, J SYMBOLIC LOGIC, V59, P543, DOI 10.2307/2275407
   Adamek J., 2009, Abstract and Concrete Categories: The Joy of Cats
   ALIMOHAMED M, 1995, THEOR COMPUT SCI, V146, P5, DOI 10.1016/0304-3975(94)00283-O
   Borceux F, 1994, Handbook of Categorical Algebra: Volume 1: Basic Category Theory. Encyclopedia of Mathematics and Its Applications, V1, DOI [DOI 10.1017/CBO9780511525858, 10.1017/ cbo9780511525858]
   CARTWRIGHT R, 1994, INFORM COMPUT, V111, P297, DOI 10.1006/inco.1994.1047
   Clairambault P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371131
   Curien PL, 2007, ELECTRON NOTES THEOR, V172, P301, DOI 10.1016/j.entcs.2007.02.011
   de Liguoro U, 1996, PCF DEFINABILITY VIA
   Ehrhard T, 2014, ACM SIGPLAN NOTICES, V49, P309, DOI 10.1145/2535838.2535865
   Fiore M, 1999, LECT NOTES COMPUT SC, V1581, P147
   Fiore M., 1999, P 14 ANN IEEE S LOG, p193s
   Fiore M., 1996, B EATCS, V59
   Freyd P., 1972, Bull. Australian Math. Soc, V7, p1s76, DOI 10. 1017/s0004972700044828
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   Goubault-Larrecq J, 2004, LECT NOTES COMPUT SC, V3210, P400
   Goubault-Larrecq J, 2008, MATH STRUCT COMP SCI, V18, P1169, DOI 10.1017/S0960129508007172
   Hermida C. A., 1993, THESIS U EDINBURGH
   Heunen Chris, 2017, 2017 32nd Annual ACM/IEEE Symposium on Logic in Computer Science (LICS), DOI 10.1109/LICS.2017.8005137
   Huot Mathieu, 2020, Foundations of Software Science and Computation Structures. 23rd International Conference, FOSSACS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12077), P319, DOI 10.1007/978-3-030-45231-5_17
   Hyland JME, 2000, INFORM COMPUT, V163, P285, DOI [10.1006/inco.2000.2917, 10.1006/inco2000.2917]
   Iglesias-Zemmour Patrick, 2013, Diffeology
   JACOBS B, 1993, THEOR COMPUT SCI, V107, P169, DOI 10.1016/0304-3975(93)90169-T
   Jacobs B., 1999, Categorical logic and type theory
   Johnstone P. T., 2002, Sketches of an Elephant: A Topos Theory Compendium
   Jung A., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P245, DOI 10.1007/BFb0037110
   Kammar O, 2014, Ph. D. Dissertation
   Kammar O, 2018, ELECTRON NOTES THEOR, V341, P239, DOI 10.1016/j.entcs.2018.11.012
   Kammar O, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P349
   Katsumata S, 2013, INFORM COMPUT, V222, P228, DOI 10.1016/j.ic.2012.10.014
   Katsumata S, 2008, LECT NOTES COMPUT SC, V5213, P278, DOI 10.1007/978-3-540-87531-4_21
   Katsumata SY, 2005, LECT NOTES COMPUT SC, V3634, P87, DOI 10.1007/11538363_8
   KOCK A, 1972, ARCH MATH, V23, P113, DOI 10.1007/BF01304852
   Lasota S, 2007, LECT NOTES COMPUT SC, V4435, P223
   Lawvere F.W., 2006, Reprints in Theory and Applications of Categories, P1
   Loregian F, 2020, EXPO MATH, V38, P496, DOI 10.1016/j.exmath.2019.02.004
   MA QM, 1992, LECT NOTES COMPUT SC, V598, P1
   Marz M., 2000, ELECTRON NOTES THEOR, V35, P133, DOI [10.1016/s1571- 0661(05)80735-2, DOI 10.1016/S1571-0661(05)80735-2]
   Matache C., 2021, P 6 INT C FORM STRUC, DOI [10.4230/LIPIcs.FSCD.2021.25, DOI 10.4230/LIPICS.FSCD.2021.25]
   Milner R., 1977, Theoretical Computer Science, V4, P1, DOI 10.1016/0304-3975(77)90053-6
   Mitchell J. C., 1993, Computer Science Logic. 6th Workshop, CSL '92, P352
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Murawski AS, 2012, LECT NOTES COMPUT SC, V7392, P312, DOI 10.1007/978-3-642-31585-5_30
   OHEARN PW, 1995, INFORM COMPUT, V120, P107, DOI 10.1006/inco.1995.1103
   Pareigis B, 1977, PUBL MATH-DEBRECEN, V24
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Plotkin G. D., 1980, To H.B. Curry: Essays in Combinatory Logic, Lambda Calculus and Formalism
   Plotkin Gordon, 1973, Lambda-definability and logical relations
   Power J., 2000, Computer Science Logic. 14th International Workshop, CSL 2000. Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.1862), P497
   Riecke JG, 2002, INFORM COMPUT, V179, P296, DOI 10.1006/inco.2002.2957
   Scherer G, 2017, ACM SIGPLAN NOTICES, V52, P374, DOI 10.1145/3093333.3009901
   Scibior A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158148
   Souriau J.-M., 1980, Lecture Notes in Math., V836, P91
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   Staton S, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P525, DOI 10.1145/2933575.2935313
   Street Ross, 1972, J. Pure Appl. Algebra, V2, P149, DOI [10.1016/0022-4049(72)90019-9, DOI 10.1016/0022-4049(7]
NR 60
TC 1
Z9 1
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 44
DI 10.1145/3498705
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900045
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Kokologiannakis, M
   Marmanis, I
   Gladstein, V
   Vafeiadis, V
AF Kokologiannakis, Michalis
   Marmanis, Iason
   Gladstein, Vladimir
   Vafeiadis, Viktor
TI Truly Stateless, Optimal Dynamic Partial Order Reduction
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Model Checking; Dynamic Partial Order Reduction; Weak Memory Models
ID MODEL CHECKING
AB Dynamic partial order reduction (DPOR) verifies concurrent programs by exploring all their interleavings up to some equivalence relation, such as the Mazurkiewicz trace equivalence. Doing so involves a complex trade-off between space and time. Existing DPOR algorithms are either exploration-optimal (i.e., explore exactly only interleaving per equivalence class) but may use exponential memory in the size of the program, or maintain polynomial memory consumption but potentially explore exponentially many redundant interleavings.
   In this paper, we show that it is possible to have the best of both worlds: exploring exactly one interleaving per equivalence class with linear memory consumption. Our algorithm, TruSt, formalized in Coq, is applicable not only to sequential consistency, but also to any weak memory model that satisfies a few basic assumptions, including TSO, PSO, and RC11. In addition, TruSt is embarrassingly parallelizable: its different exploration options have no shared state, and can therefore be explored completely in parallel. Consequently, TruSt outperforms the state-of-the-art in terms of memory and/or time.
C1 [Kokologiannakis, Michalis; Marmanis, Iason; Gladstein, Vladimir; Vafeiadis, Viktor] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Gladstein, Vladimir] St Petersburg Univ, JetBrains Res, St Petersburg, Russia.
C3 Saint Petersburg State University
RP Kokologiannakis, M (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
EM michalis@mpi-sws.org; imarmanis@mpi-sws.org; vgladstein@mpi-sws.org;
   viktor@mpi-sws.org
RI ; Vafeiadis, Viktor/B-5809-2014
OI Kokologiannakis, Michalis/0000-0002-7905-9739; Vafeiadis,
   Viktor/0000-0001-8436-0334; Marmanis, Iason/0000-0001-5077-5275;
   Gladshtein, Vladimir/0000-0001-9233-3133
FU European Research Council (ERC) under the European Union [101003349];
   European Research Council (ERC) [101003349] Funding Source: European
   Research Council (ERC)
FX We thank the anonymous reviewers for their valuable feedback. This work
   was supported by a European Research Council (ERC) Consolidator Grant
   for the project lPERSISTz under the European Union's Horizon 2020
   research and innovation programme (grant agreement No. 101003349).
CR Abdulla Parosh Aziz, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P353, DOI 10.1007/978-3-662-46681-0_28
   Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Abdulla PA, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360576
   Abdulla PA, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276505
   Abdulla PA, 2017, J ACM, V64, DOI 10.1145/3073408
   Abdulla PA, 2016, LECT NOTES COMPUT SC, V9780, P134, DOI 10.1007/978-3-319-41540-6_8
   Agarwal P, 2021, LECT NOTES COMPUT SC, V12759, P341, DOI 10.1007/978-3-030-81685-8_16
   Albert E, 2018, LECT NOTES COMPUT SC, V10982, P392, DOI 10.1007/978-3-319-96142-2_24
   Albert E, 2017, LECT NOTES COMPUT SC, V10426, P526, DOI 10.1007/978-3-319-63387-9_26
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   [Anonymous], 2008, OSDI 2008
   Aronis S, 2018, LECT NOTES COMPUT SC, V10806, P229, DOI 10.1007/978-3-319-89963-3_14
   Biswas R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360591
   Bui TL, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485541
   Chalupa M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158119
   Chatterjee K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360550
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Godefroid P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P174, DOI 10.1145/263699.263717
   Godefroid P, 2005, FORM METHOD SYST DES, V26, P77, DOI 10.1007/s10703-005-1489-x
   Kokologiannakis M, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P1157, DOI 10.1145/3373376.3378480
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Kokologiannakis Michalis, 2022, TRULY STATELESS OPTI
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lahav O, 2015, LECT NOTES COMPUT SC, V9135, P311, DOI 10.1007/978-3-662-47666-6_25
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lång M, 2020, LECT NOTES COMPUT SC, V12302, P377, DOI 10.1007/978-3-030-59152-6_21
   MAZURKIEWICZ A, 1987, LECT NOTES COMPUT SC, V255, P279
   Nguyen HTT, 2018, LECT NOTES COMPUT SC, V10982, P354, DOI 10.1007/978-3-319-96142-2_22
   Norris B, 2013, ACM SIGPLAN NOTICES, V48, P131, DOI [10.1145/2509136.2509514, 10.1145/2544173.2509514]
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   SHASHA D, 1988, ACM T PROGR LANG SYS, V10, P282, DOI 10.1145/42190.42277
   SPARC International Inc, 1994, SPARC ARCHITECTURE M
   Zhang NL, 2015, ACM SIGPLAN NOTICES, V50, P250, DOI [10.1145/2813885.2737956, 10.1145/2737924.2737956]
NR 35
TC 11
Z9 11
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 49
DI 10.1145/3498711
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900050
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Madiot, JM
   Pottier, F
AF Madiot, Jean-Marie
   Pottier, Francois
TI A Separation Logic for Heap Space under Garbage Collection
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE separation logic; tracing garbage collection; live data; program
   verification
ID VERIFICATION; FRAMEWORK; CHECKING
AB We present SL lozenge, a Separation Logic that allows controlling the heap space consumption of a program in the presence of dynamic memory allocation and garbage collection. A user of the logic works with space credits, a resource that is consumed when an object is allocated and produced when a group of objects is logically deallocated, that is, when the user is able to prove that it has become unreachable and therefore can be collected. To prove such a fact, the user maintains pointed-by assertions that record the immediate predecessors of every object. Our calculus, SpaceLang, has mutable state, shared-memory concurrency, and code pointers. We prove that SL lozenge is sound and present several simple examples of its use.
C1 [Madiot, Jean-Marie; Pottier, Francois] INRIA, Paris, France.
C3 Inria
RP Madiot, JM (corresponding author), INRIA, Paris, France.
EM jean-marie.madiot@inria.fr; francois.pottier@inria.fr
OI Pottier, Francois/0000-0002-4069-1235
CR Albert E, 2013, SCI COMPUT PROGRAM, V78, P1427, DOI 10.1016/j.scico.2012.10.008
   Albert E, 2010, ACM SIGPLAN NOTICES, V45, P121
   Albert E, 2009, ISMM'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P129
   Albert E, 2007, ISMM'07: PROCEEDINGS OF THE 2007 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P105
   Aspinall D, 2003, J AUTOM REASONING, V31, P261, DOI 10.1023/B:JARS.0000021014.79255.33
   Aspinall D, 2002, LECT NOTES COMPUT SC, V2305, P36
   Aspinall D, 2007, THEOR COMPUT SCI, V389, P411, DOI 10.1016/j.tcs.2007.09.003
   Atkey R, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:17)2011
   Blelloch GE, 1996, ACM SIGPLAN NOTICES, V31, P213, DOI 10.1145/232629.232650
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Braberman V, 2006, J OBJECT TECHNOL, V5, P31, DOI 10.5381/jot.2006.5.5.a2
   Braberman V, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P141
   Carbonneaux Q, 2014, ACM SIGPLAN NOTICES, V49, P270, DOI [10.1145/2594291.2594301, 10.1145/2666356.2594301]
   Charguéraud A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408998
   CHENEY CJ, 1970, COMMUN ACM, V13, P677, DOI 10.1145/362790.362798
   Chin WN, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P151
   Chin WN, 2005, LECT NOTES COMPUT SC, V3672, P70
   COLLINS GE, 1960, COMMUN ACM, V3, P655, DOI 10.1145/367487.367501
   Ericsson AS, 2019, J AUTOM REASONING, V63, P463, DOI 10.1007/s10817-018-9487-z
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Garbervetsky D, 2011, CONCURR COMP-PRACT E, V23, P1665, DOI 10.1002/cpe.1656
   Gómez-Londoño A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428272
   Hawblitzel C, 2010, LOG METH COMPUT SCI, V6
   He GH, 2009, LECT NOTES COMPUT SC, V5799, P166
   Hoffmann Jan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P781, DOI 10.1007/978-3-642-31424-7_64
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Hofman M., 2000, Nordic Journal of Computing, V7, P258
   Hofmann M, 2006, LECT NOTES COMPUT SC, V3924, P22
   Hofmann M, 2003, INFORM COMPUT, V183, P57, DOI 10.1016/S0890-5401(03)00009-9
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hofmann M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P464, DOI 10.1109/LICS.1999.782641
   Hofmann M, 2013, LECT NOTES COMPUT SC, V7792, P593, DOI 10.1007/978-3-642-37036-6_32
   Hofmann M, 2009, LECT NOTES COMPUT SC, V5771, P317, DOI 10.1007/978-3-642-04027-6_24
   Hughes J, 1999, ACM SIGPLAN NOTICES, V34, P70, DOI 10.1145/317765.317785
   Hur CK, 2011, IEEE S LOG, P247, DOI 10.1109/LICS.2011.46
   Jost S, 2017, J AUTOM REASONING, V59, P87, DOI 10.1007/s10817-016-9398-9
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   Jost S, 2009, LECT NOTES COMPUT SC, V5850, P354, DOI 10.1007/978-3-642-05089-3_23
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Kahn DM, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473581
   Kassios IT, 2013, LECT NOTES COMPUT SC, V7792, P149, DOI 10.1007/978-3-642-37036-6_10
   Madiot Jean-Marie, 2021, **DATA OBJECT**, DOI 10.5281/zenodo.5549765
   McCreight A, 2007, ACM SIGPLAN NOTICES, V42, P468, DOI 10.1145/1273442.1250788
   McCreight A, 2010, ACM SIGPLAN NOTICES, V45, P273, DOI 10.1145/1932681.1863584
   Minamide Y., 1999, Electronic Notes in Theoretical Computer Science, V26, DOI 10.1016/S1571-0661(05)80286-5
   Morrisett G., 1995, P 7 INT C FUNCT PROG, P66, DOI DOI 10.1145/224164.224182
   Nguyen HH, 2007, LECT NOTES COMPUT SC, V4349, P251
   Niu Yue, 2018, LOGIC PROGRAMMING AR, V57, P543
   O'Hearn P, 2019, COMMUN ACM, V62, P86, DOI 10.1145/3211968
   OHearn Peter W., 2016, ACM SIGLOG NEWS, V3, P47, DOI DOI 10.1145/2984450.2984457
   Raad A, 2020, LECT NOTES COMPUT SC, V12225, P225, DOI 10.1007/978-3-030-53291-8_14
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Simoes H, 2012, ACM SIGPLAN NOTICES, V47, P165, DOI 10.1145/2398856.2364575
   Spoonhower D, 2010, J FUNCT PROGRAM, V20, P417, DOI 10.1017/S0956796810000146
   Tofte Mads, 1994, P 21 ACM SIGPLAN SIG, P188, DOI DOI 10.1145/174675.177855
   Unnikrishnan L, 2009, ISMM'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P139
   Vindum SF, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P76, DOI 10.1145/3437992.3439930
   Wang SY, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360597
NR 60
TC 5
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 11
DI 10.1145/3498672
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900012
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Zhang, C
   de Amorim, AA
   Gaboardi, M
AF Zhang, Cheng
   de Amorim, Arthur Azevedo
   Gaboardi, Marco
TI On Incorrectness Logic and Kleene Algebra with Top and Tests
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Reasoning; Incorrectness Logic; Hoare Logic; Kleene Algebra with
   Tests
ID COMPLETENESS
AB Kleene algebra with tests (KAT) is a foundational equational framework for reasoning about programs, which has found applications in program transformations, networking and compiler optimizations, among many other areas. In his seminal work, Kozen proved that KAT subsumes propositional Hoare logic, showing that one can reason about the (partial) correctness of while programs by means of the equational theory of KAT. In this work, we investigate the support that KAT provides for reasoning about incorrectness, instead, as embodied by O'Hearn's recently proposed incorrectness logic. We show that KAT cannot directly express incorrectness logic. The main reason for this limitation can be traced to the fact that KAT cannot express explicitly the notion of codomain, which is essential to express incorrectness triples. To address this issue, we study Kleene Algebra with Top and Tests (TopKAT), an extension of KAT with a top element. We show that TopKAT is powerful enough to express a codomain operation, to express incorrectness triples, and to prove all the rules of incorrectness logic sound. This shows that one can reason about the incorrectness of while-like programs by means of the equational theory of TopKAT.
C1 [Zhang, Cheng; de Amorim, Arthur Azevedo; Gaboardi, Marco] Boston Univ, Dept Comp Sci, Boston, MA 02215 USA.
C3 Boston University
RP Zhang, C (corresponding author), Boston Univ, Dept Comp Sci, Boston, MA 02215 USA.
EM czhang03@bu.edu; arthur.aa@gmall.com; gaboardi@bu.edu
RI Gaboardi, Marco/JPX-6816-2023
OI Zhang, Cheng/0000-0002-8197-6181
FU National Science Foundation [CNS 2040249, CNS 2040222]
FX This material is based upon work supported by the National Science
   Foundation under award No. CNS 2040249 and Grant No. CNS 2040222. Any
   opinions, findings, and conclusions or recommendations expressed in this
   material are those of the author and do not necessarily reflect the
   views of the National Science Foundation.
CR Anderson CJ, 2014, ACM SIGPLAN NOTICES, V49, P113, DOI 10.1145/2535838.2535862
   Andréka H, 2011, ALGEBR UNIV, V66, P7, DOI 10.1007/s00012-011-0142-3
   Angus Allegra, 2001, KLEENE ALGEBRA TESTS
   [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   Brunet P, 2014, LECT NOTES COMPUT SC, V8428, P101, DOI 10.1007/978-3-319-06251-8_7
   Cohen Ernie, 1999, COMPLEXITY KLEENE AL
   de Vries E, 2011, LECT NOTES COMPUT SC, V7041, P155, DOI 10.1007/978-3-642-24690-6_12
   Desharnais J., 2004, J RELATIONAL METHODS, V1, P93
   Desharnais J, 2006, ACM T COMPUT LOG, V7, P798, DOI 10.1145/1183278.1183285
   Fahrenberg Uli, 2021, ARXIV201104704CS
   FISCHER MJ, 1979, J COMPUT SYST SCI, V18, P194, DOI 10.1016/0022-0000(79)90046-1
   Gomes VBF, 2016, LECT NOTES COMPUT SC, V9995, P310, DOI 10.1007/978-3-319-48989-6_19
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   Kozen D, 1997, LECT NOTES COMPUT SC, V1258, P244
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Kozen Dexter, 2000, ACM Trans. Comput. Log., V1, P60, DOI DOI 10.1145/343369.343378
   Mad91 R.D., 1991, Studia Logica, V50, P421
   Mamouras K, 2017, LECT NOTES COMPUT SC, V10203, P88, DOI 10.1007/978-3-662-54458-7_6
   Möller B, 2021, LECT NOTES COMPUT SC, V13027, P325, DOI 10.1007/978-3-030-88701-8_20
   Murray Toby, 2020, ARCH FORMAL PROOFS
   O'Hearn PW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371078
   ODONNELL MJ, 1985, EQUATIONAL LOGIC PRO
   Pous D, 2013, LECT NOTES COMPUT SC, V7998, P180, DOI 10.1007/978-3-642-39634-2_15
   Pous Damien, 2016, AUTOMATA RELATION AL
   Pratt Vaughan R, 1980, PROC ACM S THEORY CO, P22, DOI [DOI 10.1145/800141.804649, 10.1145/800141.804649]
   Raad A, 2020, LECT NOTES COMPUT SC, V12225, P225, DOI 10.1007/978-3-030-53291-8_14
   Smolka S, 2017, ACM SIGPLAN NOTICES, V52, P557, DOI 10.1145/3093333.3009843
   Taylor Walter, 1979, UNIVERSAL ALGEBRA, Vsecond, P378
   Zhang Cheng, 2021, ARXIV210807707CSPL
NR 30
TC 10
Z9 15
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 29
DI 10.1145/3498690
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900030
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Bao, YY
   Wei, GN
   Bracevac, O
   Jiang, YX
   He, QY
   Rompf, T
AF Bao, Yuyan
   Wei, Guannan
   Bracevac, Oliver
   Jiang, Yuxuan
   He, Qiyang
   Rompf, Tiark
TI Reachability Types: Tracking Aliasing and Separation in Higher-Order
   Functional Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE reachability types; ownership types; aliasing; type systems; effect
   systems
ID LANGUAGE
AB Ownership type systems, based on the idea of enforcing unique access paths, have been primarily focused on objects and top-level classes. However, existing models do not as readily reflect the finer aspects of nested lexical scopes, capturing, or escaping closures in higher-order functional programming patterns, which are increasingly adopted even in mainstream object-oriented languages. We present a new type system, lambda*, which enables expressive ownership-style reasoning across higher-order functions. It tracks sharing and separation through reachability sets, and layers additional mechanisms for selectively enforcing uniqueness on top of it. Based on reachability sets, we extend the type system with an expressive flow-sensitive effect system, which enables flavors of move semantics and ownership transfer. In addition, we present several case studies and extensions, including applications to capabilities for algebraic effects, one-shot continuations, and safe parallelization.
C1 [Bao, Yuyan] Univ Waterloo, Waterloo, ON, Canada.
   [Wei, Guannan; Bracevac, Oliver; Jiang, Yuxuan; He, Qiyang; Rompf, Tiark] Purdue Univ, W Lafayette, IN 47907 USA.
C3 University of Waterloo; Purdue University System; Purdue University
RP Bao, YY (corresponding author), Univ Waterloo, Waterloo, ON, Canada.
EM yuyan.bao@uwaterloo.ca; guannanwei@purdue.edu; bracevac@purdue.edu;
   jiang700@purdue.edu; he615@purdue.edu; tiark@purdue.edu
RI Bao, Yuyan/S-1882-2019; Yuxuan, Jiang/GOV-6662-2022
OI Yuxuan, Jiang/0000-0003-1026-8038; Rompf, Tiark/0000-0002-2068-3238;
   Wei, Guannan/0000-0002-3150-2033; Bao, Yuyan/0000-0002-3832-3134;
   Bracevac, Oliver/0000-0003-3569-4869
FU NSF [1553471, 1564207, 1918483, 1910216]; NSERC [CRDPJ 543583-19]; DOE
   [DE-SC0018050]; Direct For Computer & Info Scie & Enginr; Div Of
   Information & Intelligent Systems [1910216] Funding Source: National
   Science Foundation; Division of Computing and Communication Foundations;
   Direct For Computer & Info Scie & Enginr [1918483] Funding Source:
   National Science Foundation
FX We thank James Noble and the anonymous reviewers for their insightful
   comments. We thank Colin Gordon for discussions on effect systems. We
   also thank Yushuo Xiao for contributions to prototype implementations.
   This work was supported in part by NSF awards 1553471, 1564207, 1918483,
   1910216, DOE award DE-SC0018050, and NSERC grant CRDPJ 543583-19.
CR Abadi M, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P63, DOI 10.1145/1328438.1328449
   Ahmed A, 2007, FUND INFORM, V77, P397
   Aiken A, 2003, ACM SIGPLAN NOTICES, V38, P129, DOI 10.1145/780822.781146
   Aldrich J., 2009, OOPSLA COMPANION, P1015, DOI DOI 10.1145/1639950
   Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   Amin N, 2017, ACM SIGPLAN NOTICES, V52, P666, DOI 10.1145/3093333.3009866
   BARENDREGT H, 1985, STUDIES LOGIC FDN MA, V103
   Barendsen E., 1996, Mathematical Structures in Computer Science, V6, P579
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Biernacki D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290319
   Biernacki D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371116
   Boruch-Gruszecki Aleksander, 2021, ARXIV210511896V1CSPL
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Boyland J., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P2
   Boyland J., 2003, LNCS, V2694, P55, DOI [10.1007/3-540-44898-54, DOI 10.1007/3-540-44898-54]
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Brachthäuser JI, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000027
   Brachthauser Jonathan Immanuel, 2020, P ACM PROGRAM LANG, DOI [10.1145/3408975, DOI 10.1145/3408975]
   Bright Walter, 2019, OWNERSHIP BORROWING
   Bruggeman C, 1996, ACM SIGPLAN NOTICES, V31, P99, DOI 10.1145/249069.231395
   CARDELLI L, 1991, LECT NOTES COMPUT SC, V526, P750
   Castegren Elias, 2016, 30 EUR C OBJ OR PROG, V5, P1, DOI [DOI 10.4230/LIPICS.ECOOP.2016.5, 10.4230/LI PIcs.ECOOP.2016.5]
   Charguéraud A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408998
   Cisco Systems Inc, 2017, CHEZ SCHEM VERS 9 US
   Clarke Dave, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P15, DOI 10.1007/978-3-642-36946-9_3
   Clarke D, 2002, ACM SIGPLAN NOTICES, V37, P292, DOI 10.1145/583854.582447
   Clarke D. G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P53
   Clarke D, 2008, LECT NOTES COMPUT SC, V5356, P139
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Clebsch S., 2015, P 5 INT WORKSHOP PRO, P1, DOI DOI 10.1145/2824815.2824816
   Clebsch Sylvan, 2015, ICOOOLPS 2015
   Cong YY, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341643
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Danvy Olivier, 1989, BRICS, V89
   de Vries Edsko, 2006, LECT NOTES COMPUTER, V4449, DOI [10.1007/978-3-540-74130-5_11, DOI 10.1007/978-3-540-74130-5_11]
   de Vries Edsko, 2007, LECT NOTES COMPUTER, V5083, DOI [10.1007/978-3-540-85373-2_12, DOI 10.1007/978-3-540-85373-2_12]
   DeLine R, 2001, ACM SIGPLAN NOTICES, V36, P59, DOI 10.1145/381694.378811
   Dietl W, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2049706.2049709
   Duba BruceF., 1991, J FUNCT PROGRAM, P163, DOI DOI 10.1145/99583.99608
   Felleisen M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P180, DOI 10.1145/73560.73576
   Gay D, 1998, ACM SIGPLAN NOTICES, V33, P313, DOI 10.1145/277652.277748
   Gifford DK, 1986, P 1986 ACM C LISP FU, P28, DOI DOI 10.1145/319838.319848
   Girard Jean-Yves., 1971, P 2 SCANDINAVIAN LOG, V63, P63
   Gordon C S., 2020, 34th European Conference on Object-Oriented Programming, ECOOP 2020, November 15-17, 2020, Berlin, Germany (Virtual Conference), V166, p10:1, DOI DOI 10.4230/LIPICS.ECOOP.2020.10
   Gordon CS, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3450272
   Gordon Colin S., 2020, LIPICS, V166, P1, DOI DOI 10.4230/LIPICS.ECOOP.2020.23
   Gordon ColinS., 2012, Proceedings of the 8th ACM SIGPLAN Workshop on Types in Language Design and Implementation, TLDI '12, P67, DOI [10.1145/2103786.2103796, DOI 10.1145/2103786.2103796]
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Haller P, 2016, ACM SIGPLAN NOTICES, V51, P272, DOI 10.1145/3022671.2984042
   Haller P, 2010, LECT NOTES COMPUT SC, V6183, P354
   Hillerstrom D., 2017, 2nd International Conference on Formal Structures for Computation and Deduction, FSCD 2017, September 3-9, 2017, V84, p18:1, DOI DOI 10.4230/LIPICS.FSCD.2017.18
   Hillerström D, 2018, LECT NOTES COMPUT SC, V11275, P415, DOI 10.1007/978-3-030-02768-1_22
   Hillerström D, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000040
   HOGG J, 1991, OOPSLA 91 CONFERENCE PROCEEDINGS : OBJECT-ORIENTED PROGRAMMING SYSTEMS, LANGUAGES, AND APPLICATIONS, P271, DOI 10.1145/118014.117975
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Ivaskovic A., FSCD, V167, p15:1, DOI DOI 10.4230/LIPICS.FSCD.2020.15
   Jung R, 2021, COMMUN ACM, V64, P144, DOI 10.1145/3418295
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Kabir I, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428276
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Klabnik S., 2019, RUST PROGRAMMING LAN
   Kogtenkov A, 2015, SCI COMPUT PROGRAM, V97, P163, DOI 10.1016/j.scico.2013.11.006
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krishnaswami Neelakantan, 2006, WORKSH SEM PROGR AN, V6, P73
   Krishnaswami Neelakantan R., 2009, TLDI, DOI [10.1145/1481861.1481874, DOI 10.1145/1481861.1481874]
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Liu FY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428243
   Lu Y, 2005, LECT NOTES COMPUT SC, V3586, P479
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Muller Peter, 2000, ECOOP WORKSH FORM TE
   Naden K, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P557
   Nielson F, 1999, LECT NOTES COMPUT SC, V1710, P114
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   Noble James, 2018, SPLASH
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn P, 2003, J FUNCT PROGRAM, V13, P747, DOI 10.1017/S0956796802004495
   O'Hearn PW, 1999, THEOR COMPUT SCI, V228, P211, DOI 10.1016/S0304-3975(98)00359-4
   Odersky M., 1991, P 18 ACM S PRINC PRO, P25, DOI DOI 10.1145/99583.99590
   Odersky M, 2014, COMMUN ACM, V57, P76, DOI 10.1145/2591013
   Osvald L, 2016, ACM SIGPLAN NOTICES, V51, P234, DOI 10.1145/3022671.2984009
   Pearce DJ, 2011, LECT NOTES COMPUT SC, V6601, P104, DOI 10.1007/978-3-642-19861-8_7
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T, 1997, LOGIC PROGRAMM, P5
   Reynolds J. C., 1974, Programming Symposium, P408
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   REYNOLDS JC, 1989, LECT NOTES COMPUT SC, V372, P704
   Reynolds John C., 1978, POPL, P39
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Rompf T, 2013, ACM SIGPLAN NOTICES, V48, P497, DOI 10.1145/2480359.2429128
   Rompf T, 2012, COMMUN ACM, V55, P121, DOI 10.1145/2184319.2184345
   Rompf T, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P317
   Rompf Tiark., 2015, First Summit on Advances in Programming Languages | SNAPL 2015, volume 32 of Leibniz International Proceedings in Informatics (LIPIcs '15), P238, DOI DOI 10.4230/LIPICS.SNAPL.2015.238
   Scherer Gabriel, 2013, Logic for Programming, Artificial Intelligence and Reasoning. 19th International Conference, LPAR-19, Proceedings: LNCS 8312, P710, DOI 10.1007/978-3-642-45221-5_47
   Sivaramakrishnan KC, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P206, DOI 10.1145/3453483.3454039
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   Steed George, 2016, THESIS IMPERIAL COLL
   Summers AJ, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P1013
   The Swift Developer Community, 2019, OWN MAN
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Turner D. N., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P1, DOI 10.1145/224164.224168
   Vardoulakis D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:3)2011
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
   Walker D, 2000, ACM T PROGR LANG SYS, V22, P701, DOI 10.1145/363911.363923
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xie NN, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408981
   Yasuoka H, 2009, LECT NOTES COMPUT SC, V5673, P36, DOI 10.1007/978-3-642-03237-0_5
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
   Zhao T, 2008, SCI COMPUT PROGRAM, V71, P213, DOI 10.1016/j.scico.2008.04.001
NR 113
TC 6
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 139
DI 10.1145/3485516
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200042
OA gold
DA 2024-07-18
ER

PT J
AU Bräm, C
   Eilers, M
   Müller, P
   Sierra, R
   Summers, AJ
AF Braem, Christian
   Eilers, Marco
   Mueller, Peter
   Sierra, Robin
   Summers, Alexander J.
TI Rich Specifications for Ethereum Smart Contract Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Ethereum; smart contracts; specification; software verification;
   resources
AB Smart contracts are programs that execute in blockchains such as Ethereum to manipulate digital assets. Since bugs in smart contracts may lead to substantial financial losses, there is considerable interest in formally proving their correctness. However, the specification and verification of smart contracts faces challenges that rarely arise in other application domains. Smart contracts frequently interact with unverified, potentially adversarial outside code, which substantially weakens the assumptions that formal analyses can (soundly) make. Moreover, the core functionality of smart contracts is to manipulate and transfer resources; describing this functionality concisely requires dedicated specification support. Current reasoning techniques do not fully address these challenges, being restricted in their scope or expressiveness (in particular, in the presence of re-entrant calls), and offering limited means of expressing the resource transfers a contract performs.
   In this paper, we present a novel specification methodology tailored to the domain of smart contracts. Our specifications and associated reasoning technique are the first to enable: (1) sound and precise reasoning in the presence of unverified code and arbitrary re-entrancy, (2) modular reasoning about collaborating smart contracts, and (3) domain-specific specifications for resources and resource transfers, expressing a contract's behaviour in intuitive and concise ways and excluding typical errors by default. We have implemented our approach in 2VYPER, an SMT-based automated verification tool for Ethereum smart contracts written in Vyper, and demonstrated its effectiveness for verifying strong correctness guarantees for real-world contracts.
C1 [Braem, Christian; Eilers, Marco; Mueller, Peter; Sierra, Robin] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
   [Summers, Alexander J.] Univ British Columbia, Dept Comp Sci, Vancouver, BC, Canada.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; University of
   British Columbia
RP Bräm, C (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
EM c.braem@gmx.ch; marco.eilers@inf.ethz.ch; peter.mueller@inf.ethz.ch;
   robin.sierra@outlook.com; alex.summers@ubc.ca
OI Eilers, Marco/0000-0003-4891-6950; Summers,
   Alexander/0000-0001-5554-9381
FU Swiss Stake GmbH
FX We gratefully acknowledge support from Swiss Stake GmbH.
CR Agten P, 2015, ACM SIGPLAN NOTICES, V50, P581, DOI [10.1145/2676726.2676972, 10.1145/2775051.2676972]
   Albert E, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428277
   Alt Leonardo, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Industrial Practice. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11247), P376, DOI 10.1007/978-3-030-03427-6_28
   [Anonymous], 2004, J. Obj. Technol., DOI [10.5381/jot.2004.3.6.a2, DOI 10.5381/JOT.2004.3.6.A2]
   [Anonymous], 2008, JML Reference Manual
   Arumugam Sivakumar, 2019, SERENUSCOIN CONTRACT
   Atzei N, 2017, LECT NOTES COMPUT SC, V10204, P164, DOI 10.1007/978-3-662-54455-6_8
   Blackshear Sam, 2019, MOVE LANGUAGE PROGRA
   Blockchains LLC, 2016, DECENTRALIZED AUTONO
   Bram Christian, 2021, Rich Specifications for Ethereum Smart Contract Verification (Artifact), DOI 10.5281/zenodo.5415274
   Bram Christian, 2021, ARXIV210410274
   Coblenz M, 2017, PROC IEEE ACM INT C, P97, DOI 10.1109/ICSE-C.2017.150
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Drossopoulou S, 2008, LECT NOTES COMPUT SC, V5142, P412, DOI 10.1007/978-3-540-70592-5_18
   Drossopoulou S, 2020, LECT NOTES COMPUT SC, V12076, P420, DOI 10.1007/978-3-030-45234-6_21
   Entriken William, 2018, ETHEREUM IMPROVEMENT, P721
   Ethereum, 2021, SOL EXAMPL
   Ethereum, 2021, VYP EX CONTR
   Ethereum, 2021, SOL DOC
   Ethereum, 2021, VYP DOC
   Feist J, 2019, 2019 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB 2019), P8, DOI 10.1109/WETSEB.2019.00008
   Grossman S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158136
   Gucluturk O. G., 2018, The DAO hack explained: Unfortunate take-off of smart contracts
   Hajdu A., 2019, P WORK C VER SOFTW T
   Hildenbrandt E, 2018, P IEEE COMPUT SECUR, P204, DOI 10.1109/CSF.2018.00022
   Hirai Yoichi, 2017, Financial Cryptography and Data Security. FC 2017 International Workshops WAHC, BITCOIN, VOTING, WTSC, and TA. Revised Selected Papers: LNCS 10323, P520, DOI 10.1007/978-3-319-70278-0_33
   Kalra S, 2018, 25TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2018), DOI 10.14722/ndss.2018.23082
   Kassios IT, 2006, LECT NOTES COMPUT SC, V4085, P268
   Lai EM, 2020, 2020 4TH INTERNATIONAL CONFERENCE ON CRYPTOGRAPHY, SECURITY AND PRIVACY (ICCSP 2020), P110, DOI 10.1145/3377644.3377650
   Leino KRM, 2004, LECT NOTES COMPUT SC, V3086, P491
   LISKOV B, 1993, SIGPLAN NOTICES, V28, P16, DOI 10.1145/167962.165863
   Luu L, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P254, DOI 10.1145/2976749.2978309
   Mavridou A, 2019, LECT NOTES COMPUT SC, V11598, P446, DOI 10.1007/978-3-030-32101-7_27
   McCall John, SE 0306 ACTORS
   Miller M. S., 2006, THESIS JOHNS HOPKINS
   Miller Mark Samuel, 2000, P 4 INT C FIN CRYPT, DOI [DOI 10.1007/3-540-45472-1_24, 10.1007/3- 540- 45472- 1_24]
   Minacori Vittorio, 2021, ERC 1363 PAYABLE TOK
   Minacori Vittorio, 2020, EIP 1363 ERC 1363 PA
   Mossberg M, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P1186, DOI 10.1109/ASE.2019.00133
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Muller Peter, 2002, LECT NOTES COMPUTER, V2262, DOI DOI 10.1007/3-540-45651-1
   Nelaturu K, 2020, 2020 IEEE INTERNATIONAL CONFERENCE ON BLOCKCHAIN AND CRYPTOCURRENCY (IEEE ICBC), DOI 10.1109/icbc48266.2020.9169428
   Nikolic I, 2018, 34TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2018), P653, DOI 10.1145/3274694.3274743
   Permenev A, 2020, P IEEE S SECUR PRIV, P1661, DOI 10.1109/SP40000.2020.00024
   Permenev Anton, 2019, VERX SMART CONTRACT
   Qinxiang Cao, 2020, Dependable Software Engineering. Theories, Tools, and Applications. 6th International Symposium, SETTA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12153), P17, DOI 10.1007/978-3-030-62822-2_2
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sergey I, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360611
   Tikhomirov S, 2018, 2018 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB), P9, DOI 10.1145/3194113.3194115
   Tsankov P, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P67, DOI 10.1145/3243734.3243780
   Uniswap, 2019, UNISW VERS 1
   Vogelsteller Fabian, 2015, EIP20ERC20, V20
   Wood G., 2014, Ethereum project yellow paper, V151, P1
   Zhong JE, 2020, LECT NOTES COMPUT SC, V12224, P137, DOI 10.1007/978-3-030-53288-8_7
NR 54
TC 6
Z9 6
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 146
DI 10.1145/3485523
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200049
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Gokhale, S
   Turcotte, A
   Tip, F
AF Gokhale, Satyajit
   Turcotte, Alexi
   Tip, Frank
TI Automatic Migration from Synchronous to Asynchronous JavaScript APIs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Refactoring; JavaScript; Static Analysis; Asynchronous Programming
AB The JavaScript ecosystem provides equivalent synchronous and asynchronous Application Programming Interfaces (APIs) for many commonly used I/O operations. Synchronous APIs involve straightforward sequential control flow that makes them easy to use and understand, but their "blocking" behavior may result in poor responsiveness or performance. Asynchronous APIs impose a higher syntactic burden that relies on callbacks, promises, and higher-order functions. On the other hand, their nonblocking behavior enables applications to scale better and remain responsive while I/O requests are being processed. While it is generally understood that asynchronous APIs have better performance characteristics, many applications still rely on synchronous APIs. In this paper, we present a refactoring technique for assisting programmers with the migration from synchronous to asynchronous APIs. The technique relies on static analysis to determine where calls to synchronous API functions can be replaced with their asynchronous counterparts, relying on JavaScript's async/await feature to minimize disruption to the source code. Since the static analysis is potentially unsound, the proposed refactorings are presented as suggestions that must be reviewed and confirmed by the programmer. The technique was implemented in a tool named Desynchronizer. In an empirical evaluation on 12 subject applications containing 316 synchronous API calls, Desynchronizer identified 256 of these as candidates for refactoring. Of these candidates, 244 were transformed successfully, and only 12 resulted in behavioral changes. Further inspection of these cases revealed that the majority of these issues can be attributed to unsoundness in the call graph.
C1 [Gokhale, Satyajit; Turcotte, Alexi; Tip, Frank] Northeastern Univ, Boston, MA 02115 USA.
C3 Northeastern University
RP Gokhale, S (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
EM gokhale.sa@northeastern.edu; turcotte.al@northeastern.edu;
   f.tip@northeastern.edu
CR [Anonymous], 2020, ECMASCRIPT 2020 LANG
   [Anonymous], 2021, MOCHA FUN SIMPLE FLE
   [Anonymous], 2021, JEST DELIGHTFUL JAVA
   [Anonymous], 2021, EXPRESS WEB FRAMEWOR
   Avgustinov Pavel., 2016, 30th European Conference on Object-Oriented Programming, ECOOP 2016, July 18-22, 2016, Rome, Italy, p2:1, DOI DOI 10.4230/LIPICS.ECOOP.2016.2
   BabelJS, 2021, BAB PARS DOC
   Dig D., 2009, Proceedings of the 24th ACM SIGPLAN Conference Companion on Object Oriented Programming Systems Languages and Applications, P793
   Dig D, 2009, PROC INT CONF SOFTW, P397, DOI 10.1109/ICSE.2009.5070539
   Feldthaus A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P752, DOI 10.1109/ICSE.2013.6606621
   Gallaba K, 2017, PROC IEEE INT CONF S, P353, DOI 10.1109/ICSME.2017.83
   Khatchadourian R, 2019, PROC INT CONF SOFTW, P619, DOI 10.1109/ICSE.2019.00072
   Lin Y, 2015, IEEE INT CONF AUTOM, P224, DOI 10.1109/ASE.2015.50
   Lin Y, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P341, DOI 10.1145/2635868.2635903
   Madsen M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133910
   Madsen M, 2015, ACM SIGPLAN NOTICES, V50, P505, DOI [10.1145/2858965.2814272, 10.1145/2814270.2814272]
   Okur S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1117, DOI 10.1145/2568225.2568309
   Okur S, 2014, LECT NOTES COMPUT SC, V8586, P515
   OpenJS Foundation, 2021, NOD JS
   Schäfer M, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P71, DOI 10.1145/1985793.1985804
   Schäfer M, 2010, LECT NOTES COMPUT SC, V6183, P225, DOI 10.1007/978-3-642-14107-2_11
   Song W., 2018, IEEE T SERV COMPUT, V2018, P1
   Wloka J, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P173, DOI 10.1145/1595696.1595723
   Yang Zhang, 2015, Algorithms and Architectures for Parallel Processing. 15th International Conference, ICA3PP 2015. Proceedings: LNCS 9530, P105, DOI 10.1007/978-3-319-27137-8_9
NR 23
TC 7
Z9 9
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 160
DI 10.1145/3485537
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200062
OA gold
DA 2024-07-18
ER

PT J
AU Benedikt, M
   Pradic, P
AF Benedikt, Michael
   Pradic, Pierre
TI Generating Collection Transformations from Proofs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE nested collections; synthesis; proofs
ID QUERY LANGUAGES; COMPLEXITY; ALGEBRA
AB Nested relations, built up from atomic types via product and set types, form a rich data model. Over the last decades the nested relational calculus, NRC, has emerged as a standard language for defining transformations on nested collections. NRC is a strongly-typed functional language which allows building up transformations using tupling and projections, a singleton-former, and a map operation that lifts transformations on tuples to transformations on sets.
   In this work we describe an alternative declarative method of describing transformations in logic. A formula with distinguished inputs and outputs gives an implicit definition if one can prove that for each input there is only one output that satisfies it. Our main result shows that one can synthesize transformations from proofs that a formula provides an implicit definition, where the proof is in an intuitionistic calculus that captures a natural style of reasoning about nested collections. Our polynomial time synthesis procedure is based on an analog of Craig's interpolation lemma, starting with a provable containment between terms representing nested collections and generating an NRC expression that interpolates between them.
   We further show that NRC expressions that implement an implicit definition can be found when there is a classical proof of functionality, not just when there is an intuitionistic one. That is, whenever a formula implicitly defines a transformation, there is an NRC expression that implements it.
C1 [Benedikt, Michael; Pradic, Pierre] Univ Oxford, Comp Sci Dept, Oxford, England.
C3 University of Oxford
RP Benedikt, M (corresponding author), Univ Oxford, Comp Sci Dept, Oxford, England.
FU EPSRC [EP/M005852/1]; EPSRC [EP/M005852/1, EP/T022124/1] Funding Source:
   UKRI
FX We are very grateful to Szymon Torunczyk, who outlined a route to show
   that implicitly definable transformations over nested relations can be
   defined via interpretations, in the process conjecturing a more general
   result concerning definability in multi-sorted logic. Szymon also helped
   in simplifying the mapping of NRC expressions to interpretations, a
   basic component in one of our characterizations. We also thank Ehud
   Hrushovski, who sketched a proof of the Beth-style result for
   multi-sorted logic that serves as another component. His proof proceeds
   along very similar lines to the one we present in this paper, but makes
   use of a prior Beth-style result in classical model theory [Makkai
   1964]. This work was funded by EPSRC grant EP/M005852/1.
CR ABITEBOUL S, 1986, J COMPUT SYST SCI, V33, P361, DOI 10.1016/0022-0000(86)90058-9
   Abiteboul S., 1995, VLDB J, V4, P727, DOI DOI 10.1007/BF01354881
   Afrati Foto, 2019, ANSWERING QUERIES US
   Andreka H., 2008, DEFINABILITY N UNPUB DEFINABILITY N UNPUB
   [Anonymous], 2001, CATEGORICAL LOGIC TY
   [Anonymous], 1993, ENCY MATH APPL, DOI DOI 10.1017/CBO9780511551574
   Benedikt M., 2016, Generating Plans from Proofs: The Interpolation-based Approach to Query Reformulation
   Benedikt M, 2009, ACM T DATABASE SYST, V34, DOI 10.1145/1620585.1620592
   Beth E. W, 1953, INDAGATIONES MATH, V15, P339
   Bojanczyk Mikolaj, 2018, LICS
   BUNEMAN P, 1995, THEOR COMPUT SCI, V149, P3, DOI 10.1016/0304-3975(95)00024-Q
   Cheney James, 2014, SIGMOD
   Colcombet T, 2007, LOG METH COMPUT SCI, V3
   Cooper E, 2009, LECT NOTES COMPUT SC, V5708, P36, DOI 10.1007/978-3-642-03793-1_3
   coq, 2020, COQ PROOF ASSISTANT
   Craig W., 1957, J SYMBOLIC LOGIC, V22, P269
   Fitting M, 1996, 1 ORDER LOGIC AUTOMA, V2nd, DOI DOI 10.1007/978-1-4612-2360-3
   GANDY RO, 1974, P S PURE MATH, V13, P103
   Gibbons Jeremy, 2018, PACMPL 2
   Gibbons Jeremy, 2016, LIST SUCCESSES CAN C
   Grust T, 2010, PROC VLDB ENDOW, V3, P162, DOI 10.14778/1920841.1920866
   Halevy AY, 2001, VLDB J, V10, P270, DOI 10.1007/s007780100054
   Hoder Krystof, 2010, INTERPOLATION SYMBOL
   HODGES W, 1990, ANN PURE APPL LOGIC, V46, P169, DOI 10.1016/0168-0072(90)90033-X
   Hu Qinheping, 2017, PLDI
   Jensen R. B., 1972, Annals of Mathematical Logic, V4, P229
   Koch C, 2006, ACM T DATABASE SYST, V31, P1215, DOI 10.1145/1189769.1189771
   Koch C, 2016, PODS'16: PROCEEDINGS OF THE 35TH ACM SIGMOD-SIGACT-SIGAI SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P75, DOI 10.1145/2902251.2902286
   Kolaitis Phokion G., 1990, PODS
   Makkai Michael, 1964, Acta Math. Ac. Sci. Hung., V15, P227
   McMillan KL, 2003, LECT NOTES COMPUT SC, V2725, P1
   Meijer E., 2006, SIGMOD
   Melnik S, 2011, COMMUN ACM, V54, P114, DOI 10.1145/1953122.1953148
   Mostowski Andrzej., 1949, Fundamenta Mathematicae, V36, P143
   Nash A, 2010, ACM T DATABASE SYST, V35, DOI 10.1145/1806907.1806913
   Otto M, 2000, B SYMB LOG, V6, P447, DOI 10.2307/420966
   PAREDAENS J, 1992, ACM T DATABASE SYST, V17, P65, DOI 10.1145/128765.128768
   Sazonov Vladimir Yu., 1985, VYCHISLITELNYE SISTE, V107, P30
   Segoufin Luc, 2005, PODS
   Srivastava Saurabh., 2011, PLDI
   Suciu Dan, 1995, Ph. D. Dissertation
   Toman David, 2011, Fundamentals of Physical Design and Query Compilation
   Ulrich A., 2019, THESIS U TUBINGEN GE
   Van den Bussche J, 2001, THEOR COMPUT SCI, V254, P363, DOI 10.1016/S0304-3975(99)00301-1
   Wong L, 1996, J COMPUT SYST SCI, V52, P495, DOI 10.1006/jcss.1996.0037
   Wong Limsoon, 1994, Ph. D. Dissertation
NR 46
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 14
DI 10.1145/3434295
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100014
OA gold, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Gutsfeld, JO
   Mueller-Olm, M
   Ohrem, C
AF Gutsfeld, Jens Oliver
   Mueller-Olm, Markus
   Ohrem, Christoph
TI Automata and Fixpoints for Asynchronous Hyperproperties
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Asynchronicity; Fixpoint calculus; Hyperproperties
ID COMPLEMENTATION
AB Hyperproperties have received increasing attention in the last decade due to their importance e.g. for security analyses. Past approaches have focussed on synchronous analyses, i.e. techniques in which different paths are compared lockstepwise. In this paper, we systematically study asynchronous analyses for hyperproperties by introducing both a novel automata model (Alternating Asynchronous Parity Automata) and the temporal fixpoint calculus H-mu, the first fixpoint calculus that can systematically express hyperproperties in an asynchronous manner and at the same time subsumes the existing logic HyperLTL. We show that the expressive power of both models coincides over fixed path assignments. The high expressive power of both models is evidenced by the fact that decision problems of interest are highly undecidable, i.e. not even arithmetical. As a remedy, we propose approximative analyses for both models that also induce natural decidable fragments.
C1 [Gutsfeld, Jens Oliver; Mueller-Olm, Markus; Ohrem, Christoph] Westfalische Wilhelms Univ Munster, Inst Informat, Einsteinstr 62, D-48149 Munster, North Rhine Wes, Germany.
C3 University of Munster
RP Gutsfeld, JO (corresponding author), Westfalische Wilhelms Univ Munster, Inst Informat, Einsteinstr 62, D-48149 Munster, North Rhine Wes, Germany.
EM jens.gutsfeld@uni-muenster.de; markus.mueller-olm@uni-muenster.de;
   christoph.ohrem@uni-muenster.de
OI Ohrem, Christoph/0009-0009-1813-4596
FU DFG project MoNaLog [MU 1508/3]
FX This work was partially funded by DFG project MoNaLog (MU 1508/3). We
   thank the reviewers for their helpful comments and Roland Meyer and
   Soren van der Wall for valuable discussions. We also thank Laura
   Bozzelli for providing us with an extended version of [Bozzelli 2007].
CR Andersen H. R., 1994, IDTR1994195 TU DENM, DOI 10.1.1.42.1859
   [Anonymous], 1974, THESIS MIT
   [Anonymous], 1986, P 13 ANN ACM S PRINC
   Atig MF, 2009, LECT NOTES COMPUT SC, V5505, P107, DOI 10.1007/978-3-642-00768-2_11
   Bansal Kshitij, 2013, Computer Science - Theory and Applications. 8th International Computer Science Symposium in Russia, CSR 2013. Proceedings: LNCS 7913, P405, DOI 10.1007/978-3-642-38536-0_35
   BOZZELLI L, 2015, INT C FDN SOFTW SCI
   Bozzelli L, 2007, LECT NOTES COMPUT SC, V4703, P476
   Clarkson B., 2014, INT C PRINC SEC TRUS, P265, DOI [10.1007/978-3-642-54792-8_15, DOI 10.1007/978-3-642-54792-8_15]
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   Coenen N, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785713
   COUSOT P, 1979, PAC J MATH, V82, P43, DOI 10.2140/pjm.1979.82.43
   Dax C, 2008, LECT NOTES ARTIF INT, V5330, P214, DOI 10.1007/978-3-540-89439-1_16
   Demri S, 2016, CAM T THEOR, V58, P1, DOI 10.1017/CBO9781139236119
   Durand-Gasselin A, 2015, LECT NOTES COMPUT SC, V9206, P67, DOI 10.1007/978-3-319-21690-4_5
   EMERSON EA, 1991, PROCEEDINGS - 32ND ANNUAL SYMPOSIUM ON FOUNDATIONS OF COMPUTER SCIENCE, P368, DOI 10.1109/SFCS.1991.185392
   Esparza J, 2016, J ACM, V63, DOI 10.1145/2842603
   Finkbeiner B., 2016, INT C CONCURRENCY TH, DOI [DOI 10.4230/LIPICS.CONCUR.2016.13, 10.4230/LIPIcs.CONCUR.2016.13]
   Finkbeiner B, 2020, ACTA INFORM, V57, P137, DOI 10.1007/s00236-019-00358-2
   Finkbeiner B, 2019, FORM METHOD SYST DES, V54, P336, DOI 10.1007/s10703-019-00334-z
   Finkbeiner B, 2015, LECT NOTES COMPUT SC, V9206, P30, DOI 10.1007/978-3-319-21690-4_3
   Finkbeiner Bernd, 2017, Bulletin of the EATCS, V123
   Finkel O, 2016, ANN PURE APPL LOGIC, V167, P1184, DOI 10.1016/j.apal.2016.05.005
   Finkel O, 2009, INFORM PROCESS LETT, V109, P1223, DOI 10.1016/j.ipl.2009.09.002
   Finkel Olivier, 2006, SPRINGER VERLAG LECT, DOI [10.1007/11672142_24, DOI 10.1007/11672142_24]
   Furia, 2014, ABS12064860 CORR
   Ganty P, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160915
   Ganty P, 2009, ACM SIGPLAN NOTICES, V44, P102, DOI 10.1145/1594834.1480895
   GEIDMANIS D, 1987, LECT NOTES COMPUT SC, V278, P150
   Ibarra OH, 2013, INT J FOUND COMPUT S, V24, P799, DOI 10.1142/S0129054113400194
   Kovacs, 2020, LIPICS, V171, P22
   Krebs Andreas, 2018, LIPIcs, V117
   Lange M, 2005, LECT NOTES COMPUT SC, V3385, P267
   Lange M, 2015, ELECTRON PROC THEOR, P105, DOI 10.4204/EPTCS.191.10
   MASTROENI I, 2017, P LECT NOTES COMPUTE, V422
   MASTROENI I, 2018, P LECT NOTES COMPUTE, V1002, DOI DOI 10.1007/978-3-319-99725-4_17
   Milushev D, 2013, LECT NOTES COMPUT SC, V8208, P247, DOI 10.1007/978-3-642-41488-6_17
   Muscholl A, 1996, THEOR COMPUT SCI, V169, P123, DOI 10.1016/S0304-3975(96)00117-X
   Ohrem Christoph, ARXIV201011605CSLO
   Otto M, 1999, THEOR COMPUT SCI, V224, P237, DOI 10.1016/S0304-3975(98)00314-4
   Peled D., 1996, Protocol Specification, Testing and Verification XV. Proceedings of the Fifteenth IFIP WG6.1 International Symposium on Protocol Specification, Testing and Verification, P315
   Qadeer S, 2005, LECT NOTES COMPUT SC, V3440, P93
   Qadeer S, 2008, LECT NOTES COMPUT SC, V5156, P3, DOI 10.1007/978-3-540-85114-1_2
   Rabe, 2016, THESIS SAARLAND U
   RABIN MO, 1959, IBM J RES DEV, V3, P114, DOI 10.1147/rd.32.0114
   SISTLA AP, 1983, THESIS CARNEGIE MELL
   Spelten A, 2011, ELECTRON PROC THEOR, P20, DOI 10.4204/EPTCS.73.5
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Vardi M. Y., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P250, DOI 10.1145/73560.73582
   ZIELONKA W, 1987, RAIRO-INF THEOR APPL, V21, P99, DOI 10.1051/ita/1987210200991
NR 49
TC 8
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 38
DI 10.1145/3434319
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100038
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Rajani, V
   Gaboardi, M
   Garg, D
   Hoffmann, J
AF Rajani, Vineet
   Gaboardi, Marco
   Garg, Deepak
   Hoffmann, Jan
TI A Unifying Type-Theory for Higher-Order (Amortized) Cost Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE amortized cost analysis; type theory; relative completeness
AB This paper presents lambda-amor, a new type-theoretic framework for amortized cost analysis of higher-order functional programs and shows that existing type systems for cost analysis can be embedded in it lambda-amor introduces a new modal type for representing potentials - costs that have been accounted for, but not yet incurred, which are central to amortized analysis. Additionally, lambda-amor relies on standard type-theoretic concepts like affineness, refinement types and an indexed cost monad lambda-amor is proved sound using a rather simple logical relation. We embed two existing type systems for cost analysis in lambda-amor showing that, despite its simplicity, lambda-amor can simulate cost analysis for different evaluation strategies (call-by-name and callby-value), in different styles (effect-based and coeffect-based), and with or without amortization. One of the embeddings also implies that lambda-amor is relatively complete for all terminating PCF programs.
C1 [Rajani, Vineet] Max Planck Inst Secur & Privacy, Bochum, Germany.
   [Gaboardi, Marco] Boston Univ, Boston, MA 02215 USA.
   [Garg, Deepak] Max Planck Inst Software Syst, Saarland Informat Campus, Saarbrucken, Germany.
   [Hoffmann, Jan] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Boston University; Max Planck Society; Carnegie Mellon University
RP Rajani, V (corresponding author), Max Planck Inst Secur & Privacy, Bochum, Germany.
EM vineet.rajani@csp.mpg.de; gaboardi@bu.edu; dg@mpi-sws.org;
   jhoffmann@cmu.edu
RI Gaboardi, Marco/JPX-6816-2023
OI Hoffmann, Jan/0000-0001-8326-0788; Rajani, Vineet/0000-0001-7701-8311
FU National Science Foundation [1718220, 1845803]; DARPA
   [FA8750-18-C-0092]; National Science Foundation under SaTC Award
   [1801369]; National Science Foundation under CAREER Award [1845514];
   National Science Foundation under SHF Awards [1812876, 2007784]; Direct
   For Computer & Info Scie & Enginr; Division Of Computer and Network
   Systems [1801369, 1845803] Funding Source: National Science Foundation;
   Division of Computing and Communication Foundations; Direct For Computer
   & Info Scie & Enginr [1718220, 1812876, 2007784] Funding Source:
   National Science Foundation
FX We thank our anonymous reviewers and our shepherd David Van Horn for
   their feedback. Vineet Rajani conducted most of this research while he
   was a graduate student at the Max Planck Institute for Software Systems
   and Saarland University. Marco Gaboardi was supported by the National
   Science Foundation under awards 1718220 and 1845803. Jan Hoffmann was
   supported by DARPA under AA Contract FA8750-18-C-0092 and by the
   National Science Foundation under SaTC Award 1801369, CAREER Award
   1845514, and SHF Awards 1812876 and 2007784. Any opinions, findings, and
   conclusions contained in this document are those of the authors and do
   not necessarily reflect the views of the sponsoring organizations.
CR Ahmed Amal J., 2004, Ph. D. Dissertation
   [Anonymous], 2001, J OPER RES SOC
   [Anonymous], 2011, LOG METH COMPUT SCI
   Atkey Robert, 2018, ANN ACM IEEE S LOG C ANN ACM IEEE S LOG C
   Avanzini Martin, 2017, P ACM PROGR LANG P ACM PROGR LANG
   Brunel Alois, 2014, P EUR S PROGR LANG S P EUR S PROGR LANG S
   Carbonneaux Q, 2015, ACM SIGPLAN NOTICES, V50, P467, DOI [10.1145/2813885.2737955, 10.1145/2737924.2737955]
   Charguéraud A, 2019, J AUTOM REASONING, V62, P331, DOI 10.1007/s10817-017-9431-7
   Cicek Ezgi, 2017, P ACM SIGPLAN SIGACT
   Crary Karl, 2000, P ACM SIGPLAN SIGACT
   Dal Lago Ugo, 2012, SCI COMPUT PROGRAM, V84
   Danielsson NA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1328438.1328457
   Danner N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P140, DOI 10.1145/2784731.2784749
   Gaboardi Marco, 2016, ACM SIGPLAN Notices, V51, P476, DOI 10.1145/3022670.2951939
   GIRARD JY, 1992, THEOR COMPUT SCI, V97, P1, DOI 10.1016/0304-3975(92)90386-T
   Handley Martin A. T., 2020, Proceedings of the ACM on Programming Languages, V4, DOI 10.1145/3371092
   Haslbeck MPL, 2018, LECT NOTES COMPUT SC, V10805, P155, DOI 10.1007/978-3-319-89960-2_9
   Hoffman Jan, 2011, THESIS LUDWIG MAXIMI THESIS LUDWIG MAXIMI
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Hoffmann J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P357, DOI 10.1145/1926385.1926427
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6012, P287, DOI 10.1007/978-3-642-11957-6_16
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Jost S, 2017, J AUTOM REASONING, V59, P87, DOI 10.1007/s10817-016-9398-9
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   Jost Steffen, 2009, P FORM METH P FORM METH
   Kavvos G. A., 2020, P ACM PROGR LANG P ACM PROGR LANG
   Knoth Tristan, 2019, P ACM SIGPLAN C PROG
   Krivine Jean-Louis, 2007, HIGHER ORDER SYMBOLI, V20, P3
   Madhavan Ravichandhran, 2017, P ACM SIGPLAN S PRIN
   McDermott D, 2018, OPEN COMPUT SCI, V8, P93, DOI 10.1515/comp-2018-0009
   Mével G, 2019, LECT NOTES COMPUT SC, V11423, P3, DOI 10.1007/978-3-030-17184-1_1
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Neis G, 2011, J FUNCT PROGRAM, V21, P497, DOI 10.1017/S0956796811000165
   Okasaki Chris, 1996, THESIS MELLON U
   Petricek T, 2013, LECT NOTES COMPUT SC, V7966, P385, DOI 10.1007/978-3-642-39212-2_35
   Petricek Tomas, 2014, P ACM SIGPLAN INT C
   Pym DJ, 2004, THEOR COMPUT SCI, V315, P257, DOI 10.1016/j.tcs.2003.11.020
   Tarjan Robert Endre, 1985, SIAM J ALG DISC METH, V6, P2
   Xi HW, 2007, J FUNCT PROGRAM, V17, P215, DOI 10.1017/S0956796806006216
NR 39
TC 10
Z9 11
U1 2
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 27
DI 10.1145/3434308
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100027
OA gold
DA 2024-07-18
ER

PT J
AU Kallas, K
   Niksic, F
   Stanford, C
   Alur, R
AF Kallas, Konstantinos
   Niksic, Filip
   Stanford, Caleb
   Alur, Rajeev
TI DiffStream: Differential Output Testing for Stream Processing Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE stream processing; differential testing; runtime verification
ID MAPREDUCE; FRAMEWORK
AB High performance architectures for processing distributed data streams, such as Plink, Spark Streaming, and Storm, are increasingly deployed in emerging data-driven computing systems. Exploiting the parallelism afforded by such platforms, while preserving the semantics of the desired computation, is prone to errors, and motivates the development of tools for specification, testing, and verification. We focus on the problem of differential output testing for distributed stream processing systems, that is, checking whether two implementations produce equivalent output streams in response to a given input stream. The notion of equivalence allows reordering of logically independent data items, and the main technical contribution of the paper is an optimal online algorithm for checking this equivalence. Our testing framework is implemented as a library called DiffStream in Flink. We present four case studies to illustrate how our framework can be used to (1) correctly identify bugs in a set of benchmark MapReduce programs, (2) facilitate the development of difficult-to-parallelize high performance applications, and (3) monitor an application for a long period of time with minimal performance overhead.
C1 [Kallas, Konstantinos; Niksic, Filip; Stanford, Caleb; Alur, Rajeev] Univ Penn, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Kallas, K (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM kallas@seas.upenn.edu; fniksic@seas.upenn.edu; castan@cis.upenn.edu;
   alur@cis.upenn.edu
OI Stanford, Caleb/0000-0002-8428-7736
FU NSF [CCF 1763514]
FX The authors would like to thank all the anonymous reviewers for their
   valuable comments and suggestions. This research was supported in part
   by NSF award CCF 1763514.
CR Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   [Anonymous], 1996, LECT NOTES COMPUTER, DOI DOI 10.1007/3-540-60761-7
   [Anonymous], 2009, P 7 ACM INT C EMB SO
   [Anonymous], 2007, ESEC FSE 2007, DOI DOI 10.1145/1287624.1287707
   [Anonymous], 2019, APACHE STORM
   Burckhardt S, 2014, ACM SIGPLAN NOTICES, V49, P271, DOI 10.1145/2535838.2535848
   Burckhardt S, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P330, DOI 10.1145/1806596.1806634
   Carbone P., 2015, IEEE DATA ENG B, V36, P28, DOI DOI 10.1109/IC2EW.2016.56
   Chand S, 2016, LECT NOTES COMPUT SC, V9995, P119, DOI 10.1007/978-3-319-48989-6_8
   Chen X, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON AUTOMATIC COMPUTING (ICAC), P145, DOI 10.1109/ICAC.2017.31
   Chen YF, 2016, LECT NOTES COMPUT SC, V9780, P91, DOI 10.1007/978-3-319-41540-6_6
   Chintapalli S, 2016, IEEE SYM PARA DISTR, P1789, DOI 10.1109/IPDPSW.2016.138
   Csallner C., 2011, SIGSOFT FSE 11 19 AC, P504
   Dean J, 2008, COMMUN ACM, V51, P107, DOI 10.1145/1327452.1327492
   Diekert V., 1995, BOOK TRACES, DOI [10.1142/2563, DOI 10.1142/2563]
   Gibbons P. B., 1992, Proceedings of the Fourth IEEE Symposium on Parallel and Distributed Processing (Cat. No.92TH0492-9), P317, DOI 10.1109/SPDP.1992.242728
   Gibbons PB, 1997, SIAM J COMPUT, V26, P1208, DOI 10.1137/S0097539794279614
   Groce A, 2007, PROC INT CONF SOFTW, P621
   Gulzar MA, 2016, PROC INT CONF SOFTW, P784, DOI 10.1145/2884781.2884813
   Havelund K., 2004, International Journal on Software Tools for Technology Transfer, V6, P158, DOI 10.1007/s10009-003-0117-6
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Holser Paul., 2013, JUNIT QUICKCHECK SOF
   Hosek P, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P612, DOI 10.1109/ICSE.2013.6606607
   JUnit, 2019, JUN TEST FRAM
   Kavulya Soila, 2010, Proceedings 2010 10th IEEE/ACM International Conference on Cluster, Cloud and Grid Computing (CCGrid), P94, DOI 10.1109/CCGRID.2010.112
   Kulkarni S, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P239, DOI 10.1145/2723372.2742788
   LEE EA, 1987, P IEEE, V75, P1235, DOI 10.1109/PROC.1987.13876
   Leucker M, 2009, J LOGIC ALGEBR PROGR, V78, P293, DOI 10.1016/j.jlap.2008.08.004
   Li SH, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P963, DOI 10.1109/ICSE.2013.6606646
   Liu C., 2014, Design,_Automation_and_Test_in_Europe _Conference_and_Exhibition_(DATE),_2014, P1, DOI DOI 10.7873/DATE.2014.108
   Lowe G, 2017, CONCURR COMP-PRACT E, V29, DOI 10.1002/cpe.3928
   Mamouras K, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P670, DOI 10.1145/3314221.3314580
   Marynowski Joao Eugenio, 2012, ARXIV PREPRINT ARXIV
   Maurer Matthew, 2012, 21 USENIX SECURITY S, P617
   MAZURKIEWICZ A, 1987, LECT NOTES COMPUT SC, V255, P279
   McKeeman William M., 1998, DIGIT TECH J, V10, P100
   Morán J, 2019, J SOFTW-EVOL PROC, V31, DOI 10.1002/smr.2120
   Netzer R. H. B., 1992, ACM Letters on Programming Languages and Systems, V1, P74, DOI 10.1145/130616.130623
   Netzer RobertHB., 1990, On the complexity of event ordering for shared-memory parallel program executions
   Noghabi SA, 2017, PROC VLDB ENDOW, V10, P1634, DOI 10.14778/3137765.3137770
   Olston C, 2011, PROC VLDB ENDOW, V4, P1237
   Olston C, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P245
   Ozkan BK, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276530
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Park C.-S., 2011, Proceedings of 2011 International Conference for High Performance Computing, Networking, Storage and Analysis, P51
   Peled Doron, 1994, COMPUTER AIDED VERIF, V818
   Raizman Alex., 2010, DBTest
   Raychev V, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P153, DOI 10.1145/2815400.2815418
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   Schneider S, 2015, IEEE T COMPUT, V64, P504, DOI 10.1109/TC.2013.221
   Schroeder B, 2010, IEEE T DEPEND SECURE, V7, P337, DOI 10.1109/TDSC.2009.4
   Sen K, 2008, ACM SIGPLAN NOTICES, V43, P11, DOI 10.1145/1379022.1375584
   Stack Overflow, 2020, QUEST TAGG APACH FLI
   Thies W, 2002, LECT NOTES COMPUT SC, V2304, P179
   Tucek J, 2009, ACM SIGPLAN NOTICES, V44, P193, DOI 10.1145/1508284.1508267
   Vianna A, 2019, INT SYMP EMP SOFTWAR, P271
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   WING JM, 1993, J PARALLEL DISTR COM, V17, P164, DOI 10.1006/jpdc.1993.1015
   Xiao T, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P44, DOI 10.1145/2591062.2591177
   Xu ZH, 2013, I S WORKL CHAR PROC, P87, DOI 10.1109/IISWC.2013.6704673
   Xu ZH, 2013, IEEE INT CONF AUTOM, P103, DOI 10.1109/ASE.2013.6693071
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
   Zaharia M, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P423, DOI 10.1145/2517349.2522737
   Zhou HC, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P17, DOI 10.1109/ICSE.2015.130
NR 65
TC 12
Z9 12
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 153
DI 10.1145/3428221
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900030
OA gold
DA 2024-07-18
ER

PT J
AU Nie, PY
   Parovic, M
   Zang, ZQ
   Khurshid, S
   Milicevic, A
   Gligoric, M
AF Nie, Pengyu
   Parovic, Marinela
   Zang, Zhiqiang
   Khurshid, Sarfraz
   Milicevic, Aleksandar
   Gligoric, Milos
TI Unifying Execution of Imperative Generators and Declarative
   Specifications
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Imperative generators; declarative specifications; Deuterium
ID VERIFICATION
AB We present DEUTERIUM-a framework for implementing Java methods as executable contracts. DEUTERIUM introduces a novel, type-safe way to write method contracts entirely in Java, as a combination of imperative generators and declarative specifications (written in a first-order relational logic with transitive closure). Existing approaches are typically based on encoding both the specification and the program heap into a constraint language, and then using an off-the-shelf constraint solver-without any additional guidance-to search for a new program heap that satisfies the specification. DEUTERIUM takes advantage of user-provided generators to prune the search space and reduce incurred overhead of constraint solving. DEUTERIUM supports two ways of solving declarative constraints: SAT-based and search-based with in-memory state exploration. We evaluate our approach on a suite of data structures, established as a standard benchmark by prior work. Furthermore, we use random and sequence-based test generation to create a new benchmark designed to mimic realistic execution scenarios. Our results show that generators improve the performance of executable contracts and that in-memory state exploration is the algorithm of choice when heap sizes are small.
C1 [Nie, Pengyu; Parovic, Marinela; Zang, Zhiqiang; Khurshid, Sarfraz; Gligoric, Milos] Univ Texas Austin, Austin, TX 78712 USA.
   [Milicevic, Aleksandar] Microsoft, Redmond, WA USA.
C3 University of Texas System; University of Texas Austin; Microsoft
RP Nie, PY (corresponding author), Univ Texas Austin, Austin, TX 78712 USA.
EM pynie@utexas.edu; marinelaparovic@gmail.com; zang@utexas.edu;
   khurshid@utexas.edu; almili@microsoft.com; gligoric@utexas.edu
RI Nie, Pengyu/HIK-2527-2022
OI Nie, Pengyu/0000-0003-1529-3216
FU US National Science Foundation [1652517]; Direct For Computer & Info
   Scie & Enginr; Division of Computing and Communication Foundations
   [1652517] Funding Source: National Science Foundation
FX We thank the anonymous reviewers for their comments. We also thank Ahmet
   Celik, Karl Palmskog, Nadia Polikarpova, and Chenguang Zhu for their
   feedback on this work. This work was partially supported by the US
   National Science Foundation under Grant No. 1652517.
CR Abbassi Ali., 2018, ASTRA EVALUATING TRA
   Abbassi Ali, 2019, ABS190605881 ARXIV ABS190605881 ARXIV
   [Anonymous], 2018, ARTIF INTELL REV
   [Anonymous], 2013, SIGADA ANN C HIGH IN
   [Anonymous], 2012, INT C GEN PROGR COMP
   [Anonymous], 1973, PROBLEMY PEREDACI IN
   BALL T, 2001, MSRTR200121 MICR RES
   Barnett M, 2005, LECT NOTES COMPUT SC, V3362, P49
   Barnett M, 2011, COMMUN ACM, V54, P81, DOI 10.1145/1953122.1953145
   Basel Y., 2004, THESIS MASSACHUSETTS THESIS MASSACHUSETTS
   Boyapati C., 2002, Software Engineering Notes, V27, P123, DOI 10.1145/566171.566191
   Bruneton Eric, 2002, P AD EXT COMP SYST
   Burdy L., 2005, International Journal on Software Tools for Technology Transfer, V7, P212, DOI 10.1007/s10009-004-0167-4
   Chalin Patrice, 2010, International Journal on Software Tools for Technology Transfer, V12, P429, DOI 10.1007/s10009-010-0164-8
   Chalin P, 2006, LECT NOTES COMPUT SC, V4111, P342
   Claessen K, 2014, LECT NOTES COMPUT SC, V8475, P18, DOI 10.1007/978-3-319-07151-0_2
   Cok DR, 2011, LECT NOTES COMPUT SC, V6617, P472, DOI 10.1007/978-3-642-20398-5_35
   Cook S. A., 1971, Proceedings of the 3rd annual ACM symposium on theory of computing, P151
   Daniel B., 2007, P THE 6 JOINT M EURO, P185, DOI 10.1145/1287624.1287651
   Fahndrich M., 2012, Proceedings 2012 2nd International Workshop on Developing Tools as Plug-ins (TOPI 2012), P43, DOI 10.1109/TOPI.2012.6229809
   Fahndrich M., 2010, S APPL COMP, P2103, DOI DOI 10.1145/1774088.1774531
   Fetscher B, 2015, LECT NOTES COMPUT SC, V9032, P383, DOI 10.1007/978-3-662-46669-8_16
   FUCHS NE, 1992, SOFTWARE ENG J, V7, P323, DOI 10.1049/sej.1992.0033
   Galeotti Juan P., 2010, Proceedings of the Nineteenth International Symposium on Software Testing and Analysis, ISSTA 2010, Trento, Italy, July 12-16, 2010, P25, DOI [DOI 10.1145/1831708.1831712, 10.1145/1831708.1831712]
   Gligoric M., 2010, P 32 ACM IEEE INT C, P225, DOI 10.1145/1806799.1806835
   HOARE CAR, 1987, COMPUTER, V20, P85, DOI 10.1109/MC.1987.1663697
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Kuleshov Eugene., 2007, Aspect-Oriented Software Development 2007
   Kuncak V, 2013, LECT NOTES COMPUT SC, V8174, P1, DOI 10.1007/978-3-642-40787-1_1
   Kuraj I, 2015, ACM SIGPLAN NOTICES, V50, P37, DOI [10.1145/2814270.2814323, 10.1145/2858965.2814323]
   Lampropoulos L, 2017, ACM SIGPLAN NOTICES, V52, P114, DOI 10.1145/3093333.3009868
   Liskov B., 2000, PROGRAM DEV JAVA ABS
   Lopez Gus, 1993, CONSTRAINT PROGRAMMI, P313
   Marinov D, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P22, DOI 10.1109/ASE.2001.989787
   Meng Baoluo., 2017, International Conference on Automated Deduction, P148, DOI DOI 10.1007/978-3-319-63046-5
   Milicevic A, 2014, LECT NOTES COMPUT SC, V8477, P56, DOI 10.1007/978-3-662-43652-3_5
   Milicevic A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P511, DOI 10.1145/1985793.1985863
   Near JP, 2010, LECT NOTES COMPUT SC, V5977, P118, DOI 10.1007/978-3-642-11811-1_10
   Oracle and/or its affiliates, 2020, JAV PLATF STAND ED 8 JAV PLATF STAND ED 8
   Pacheco C, 2007, PROC INT CONF SOFTW, P75
   Polikarpova N, 2013, LECT NOTES COMPUT SC, V8174, P251, DOI 10.1007/978-3-642-40787-1_15
   Rayside D., 2009, OOPSLA, P999
   Reichenbach C, 2012, LECT NOTES COMPUT SC, V7313, P53, DOI 10.1007/978-3-642-31057-7_4
   Rosner N, 2014, ACM SIGPLAN NOTICES, V49, P655, DOI [10.1145/2714064.2660232, 10.1145/2660193.2660232]
   Samimi H, 2010, LECT NOTES COMPUT SC, V6183, P552, DOI 10.1007/978-3-642-14107-2_26
   Samimi Hesam, 2013, P 2013 INT S SOFTWAR, P246
   Sharma R, 2011, LECT NOTES COMPUT SC, V6603, P262, DOI 10.1007/978-3-642-19811-3_19
   Sharma Rohan, 2011, PREDICATE COVERAGE
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Torlak Emina, 2013, P 2013 ACM INT S NEW, P135, DOI DOI 10.1145/2509578.2509586
   Tortak E, 2007, LECT NOTES COMPUT SC, V4424, P632
   Visser W, 2012, P FSE, P58, DOI DOI 10.1145/2393596.2393665
   Visser W., 2006, P ACM SIGSOFT INT S, P37
   Yessenov Kuat T., THESIS MASSACHUSETTS THESIS MASSACHUSETTS
   Yessenov Kuat T., 2009, JFORGE ECLIPSE PLUG
NR 55
TC 5
Z9 5
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 217
DI 10.1145/3428285
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900094
OA gold
DA 2024-07-18
ER

PT J
AU Wei, GN
   Bracevac, O
   Tan, SY
   Rompf, T
AF Wei, Guannan
   Bracevac, Oliver
   Tan, Shangyin
   Rompf, Tiark
TI Compiling Symbolic Execution with Staging and Algebraic Effects
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE symbolic execution; definitional interpreters; multi-stage programming;
   algebraic effects
ID 2-LEVEL SEMANTICS
AB Building effective symbolic execution engines poses challenges in multiple dimensions: an engine must correctly model the program semantics, provide flexibility in symbolic execution strategies, and execute them efficiently.
   This paper proposes a principled approach to building correct, flexible, and efficient symbolic execution engines, directly rooted in the semantics of the underlying language in terms of a high-level definitional interpreter. The definitional interpreter induces algebraic effects to abstract over semantic variants of symbolic execution, e.g., collecting path conditions as a state effect and path exploration as a nondeterminism effect. Different handlers of these effects give rise to different symbolic execution strategies, making execution strategies orthogonal to the symbolic execution semantics, thus improving flexibility. Furthermore, by annotating the symbolic definitional interpreter with binding-times and specialising it to the input program via the first Futamura projection, we obtain a "symbolic compiler", generating efficient instrumented code having the symbolic execution semantics. Our work reconciles the interpretation- and instrumentation-based approaches to building symbolic execution engines in a uniform framework.
   We illustrate our approach on a simple imperative language step-by-step and then scale up to a significant subset of LLVM IR. We also show effect handlers for common path selection strategies. Evaluating our prototype's performance shows speedups of 10 similar to 30x over the unstaged counterpart, and 2x over KLEE, a state-of-the-art symbolic interpreter for LLVM IR.
C1 [Wei, Guannan; Bracevac, Oliver; Tan, Shangyin; Rompf, Tiark] Purdue Univ, Dept Comp Sci, 610 Purdue Mall, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Wei, GN (corresponding author), Purdue Univ, Dept Comp Sci, 610 Purdue Mall, W Lafayette, IN 47907 USA.
EM guannanwei@purdue.edu; bracevac@purdue.edu; tan279@purdue.edu;
   tiark@purdue.edu
OI Wei, Guannan/0000-0002-3150-2033; Bracevac, Oliver/0000-0003-3569-4869;
   Rompf, Tiark/0000-0002-2068-3238
FU NSF [1553471, 1564207, 1918483, 1910216]; DOE [DE-SC0018050]; Direct For
   Computer & Info Scie & Enginr; Division of Computing and Communication
   Foundations [1918483] Funding Source: National Science Foundation; Div
   Of Information & Intelligent Systems; Direct For Computer & Info Scie &
   Enginr [1910216] Funding Source: National Science Foundation
FX We would like to thank our anonymous reviewers for their valuable
   feedback. We also thank James Decker and Fei Wang for proofreading the
   early drafts. This work was supported in part by NSF awards 1553471,
   1564207, 1918483, 1910216, DOE award DE-SC0018050, as well as gifts from
   Google, Facebook, and VMware.
CR Aktemur B., 2013, Proceedings of the ACM SIGPLAN 2013 Workshop on Partial Evaluation and Program Manipulation, PEPM 2013, Rome, Italy, January 21-22, 2013, P147, DOI [DOI 10.1145/2426890.2426917, 10.1145/2426890.2426917]
   Amin Nada, 2017, ACM SIGPLAN Notices, V52, P859, DOI 10.1145/3093333.3009867
   Amin N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158140
   Anand S, 2007, LECT NOTES COMPUT SC, V4424, P134
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   Baldoni R, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3182657
   Bawden A., 1999, Proceedings of the 1999 ACM SIGPLAN. Workshop on Partial Evaluation and Semantics-Based Program Manipulation (PEPM'99), P4
   Boucher D., 1996, Compiler Construction. 6th International Conference, CC'96. Proceedings, P192
   Boyer R. S., 1975, SIGPLAN Notices, V10, P234, DOI 10.1145/390016.808445
   Bracevac O, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236762
   Breazu-Tannen V., 1992, Database Theory - ICDT '92. 4th International Conference Proceedings, P140
   Bucur S, 2014, ACM SIGPLAN NOTICES, V49, P239, DOI 10.1145/2541940.2541977
   Burnim Jacob, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P443, DOI 10.1109/ASE.2008.69
   Burnim J., 2014, CREST: Concolic test generation tool for C
   Byrd WE, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110252
   Cadar C., 2008, OSDI, V8, P209, DOI DOI 10.5555/1855741.1855756
   Cadar C, 2013, COMMUN ACM, V56, P82, DOI 10.1145/2408776.2408795
   Cadar C, 2008, ACM T INFORM SYST SE, V12, DOI 10.1145/1455518.1455522
   Calcagno Cristiano, 2003, GPCE, V2830, p57S76
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Cartwright R., 1994, Theoretical Aspects of Computer Software. International Symposium TACS '94 Proceedings, P244
   Chandrasekaran Sivaramakrishnan Krishnamoorthy, 2018, Dagstuhl Reports, DOI [10.4230/DagRep.8.4.104, DOI 10.4230/DAGREP.8.4.104]
   Chipounov V, 2011, ACM SIGPLAN NOTICES, V46, P265, DOI [10.1145/1961296.1950396, 10.1145/1961295.1950396]
   CLICK C, 1995, SIGPLAN NOTICES, V30, P35, DOI 10.1145/202530.202534
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Darais D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110256
   Dolan S, 2018, LECT NOTES COMPUT SC, V10788, P98, DOI 10.1007/978-3-319-89719-6_6
   Essertel GM, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P799
   Felleisen M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P180, DOI 10.1145/73560.73576
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Flatt M, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P165
   Friedman D.P., 2018, The Reasoned Schemer, VSecond
   Friedman DanielP., 1984, P 1984 ACM C LISP FU, P348
   Futamura Y., 1999, Higher-Order and Symbolic Computation, V12, P381, DOI 10.1023/A:1010095604496
   Futamura Y., 1971, Systems, Compurters, Controls, V25, P45
   Ganesh V, 2007, LECT NOTES COMPUT SC, V4590, P519
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Hillerström D, 2018, LECT NOTES COMPUT SC, V11275, P415, DOI 10.1007/978-3-030-02768-1_22
   Hillerstrom Daniel, 2017, Formal Structures for Computation and Deduction (LIPIcs, V84
   Hofer C, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P137
   HOWDEN WE, 1977, IEEE T SOFTWARE ENG, V3, P266, DOI 10.1109/TSE.1977.231144
   Johnson JI, 2013, ACM SIGPLAN NOTICES, V48, P443, DOI [10.1145/2544174.2500604, 10.1145/2500365.2500604]
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kapus T, 2017, IEEE INT CONF AUTOM, P590, DOI 10.1109/ASE.2017.8115669
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Kiselyov O, 2014, LECT NOTES COMPUT SC, V8475, P86, DOI 10.1007/978-3-319-07151-0_6
   Kiselyov Oleg, 2018, PROGRAMMING LANGUAGE, V5, P1, DOI [10.1561/2500000038, DOI 10.1561/2500000038]
   Kleene S., 1938, J. Symb. Log., V3, P150, DOI [10.2307/2267778, DOI 10.2307/2267778]
   Klonatos Y, 2014, PROC VLDB ENDOW, V7, P853, DOI 10.14778/2732951.2732959
   Koppel J, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236771
   Kuznetsov V, 2012, ACM SIGPLAN NOTICES, V47, P193, DOI 10.1145/2345156.2254088
   Leijen D, 2017, PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE' 17), P16, DOI 10.1145/3122975.3122977
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Lilis Y, 2020, ACM COMPUT SURV, V52, DOI 10.1145/3354584
   Lindley Sam, 2014, P WORKSH GEN PROGR W
   Luk CK, 2005, ACM SIGPLAN NOTICES, V40, P190, DOI 10.1145/1064978.1065034
   Manzano Felipe Andres, 2010, SYMBOLIC MAZE
   Mensing A D., 2019, Proceedings of the 4th ACM SIGPLAN International Workshop on Meta-Programming Techniques and Reflection, P11, DOI [DOI 10.1145/3358502.3361269, 10.1145/3358502.3361269]
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   Nelson L, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P225, DOI 10.1145/3341301.3359641
   Nguyen PC, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158139
   Nguyen PC, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P139, DOI 10.1145/2628136.2628156
   NIELSON F, 1986, LECT NOTES COMPUT SC, V217, P192
   NIELSON F, 1988, THEOR COMPUT SCI, V56, P59, DOI 10.1016/0304-3975(86)90006-X
   NIELSON F, 1989, THEOR COMPUT SCI, V69, P117, DOI 10.1016/0304-3975(89)90091-1
   Nielson  Flemming, 1992, 2 LEVEL FUNCTIONAL L
   Nielson H. R., 2007, SEMANTICS APPL APPET
   Ofenbeck G, 2017, PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'17), P15, DOI 10.1145/3136040.3136060
   Ofenbeck G, 2014, ACM SIGPLAN NOTICES, V49, P125, DOI [10.1145/2517208.2517228, 10.1145/2637365.2517228]
   Pasareanu Corina S., 2010, P 25 IEEE ACM INT C, P179, DOI [10.1145/1858996.1859035, DOI 10.1145/1858996.1859035]
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   Pieters RUBENP, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000106
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Poeplau S, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P181
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Puente JPB, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110260
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Rompf Tiark, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P318, DOI 10.1007/978-3-319-30936-1_17
   Rompf T, 2011, ACM SIGPLAN NOTICES, V46, P127, DOI 10.1145/1942788.1868314
   Rompf T, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P2, DOI 10.1145/2784731.2784760
   Rompf T, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P317
   Rompf Tiark, 2012, High. Order Symb. Comput., V25, P165, DOI [10.1007/s10990-013-9096-9, 10.1007/s10990-013-9096-, DOI 10.1007/S10990-013-9096]
   Schwartz EJ, 2010, P IEEE S SECUR PRIV, P317, DOI 10.1109/SP.2010.26
   Sergey I, 2013, ACM SIGPLAN NOTICES, V48, P399, DOI 10.1145/2499370.2491979
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Siddiqui J., 2012, SAC '12 Proceedings of the 27th Annual ACM Symposium on Applied Computing, P1339, DOI DOI 10.1145/2245276.2231988
   Steele G. L.  Jr., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P472, DOI 10.1145/174675.178068
   Stojanov A, 2019, PROCEEDINGS OF THE 18TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE '19), P34, DOI 10.1145/3357765.3359514
   Stucki N, 2018, PROCEEDINGS OF THE 17TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'18), P14, DOI 10.1145/3278122.3278139
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Taha W., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P203, DOI 10.1145/258994.259019
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   Taha W., 1999, THESIS OREGON GRADUA
   Tahboub RY, 2020, SIGMOD'20: PROCEEDINGS OF THE 2020 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P2103, DOI 10.1145/3318464.3389701
   Tahboub RY, 2019, PROCEEDINGS OF THE 17TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DATABASE PROGRAMMING LANGUAGES (DBPL '19), P30, DOI 10.1145/3315507.3330200
   Tahboub RY, 2018, INT CONF MANAGE DATA, P307, DOI 10.1145/3183713.3196893
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Wei GN, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236800
   Wei GN, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360552
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Yang GW, 2019, ADV COMPUT, V113, P225, DOI 10.1016/bs.adcom.2018.10.002
   Zhang Z, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360563
NR 107
TC 7
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 164
DI 10.1145/3428232
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900041
OA gold
DA 2024-07-18
ER

PT J
AU Zhou, FY
   Ferreira, F
   Hu, R
   Neykova, R
   Yoshida, N
AF Zhou, Fangyi
   Ferreira, Francisco
   Hu, Raymond
   Neykova, Rumyana
   Yoshida, Nobuko
TI Statically Verified Refinements for Multiparty Protocols
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Multiparty Session Types (MPST); Refinement Types; Code Generation; F*;
   Distributed Programming
AB With distributed computing becoming ubiquitous in the modern era, safe distributed programming is an open challenge. To address this, multiparty session types (MPST) provide a typing discipline for message-passing concurrency, guaranteeing communication safety properties such as deadlock freedom.
   While originally MPST focus on the communication aspects, and employ a simple typing system for communication payloads, communication protocols in the real world usually contain constraints on the payload. We introduce refined multiparty session types (RMPST), an extension of MPST, that express data dependent protocols via refinement types on the data types.
   We provide an implementation of RMPST, in a toolchain called SESSION * , using SCRIBBLE, a toolchain for multiparty protocols, and targeting F*, a verification-oriented functional programming language. Users can describe a protocol in SCRIBBLE and implement the endpoints in F* using refinement-typed APIs generated from the protocol. The F* compiler can then statically verify the refinements. Moreover, we use a novel approach of callback-styled API generation, providing static linearity guarantees with the inversion of control. We evaluate our approach with real world examples and show that it has little overhead compared to a naive implementation, while guaranteeing safety properties from the underlying theory.
C1 [Zhou, Fangyi; Ferreira, Francisco; Yoshida, Nobuko] Imperial Coll London, London, England.
   [Hu, Raymond] Univ Hertfordshire, Hatfield, Herts, England.
   [Neykova, Rumyana] Brunel Univ London, London, England.
C3 Imperial College London; University of Hertfordshire; Brunel University
RP Zhou, FY (corresponding author), Imperial Coll London, London, England.
EM fangyi.zhou15@imperial.ac.uk; f.ferreira-ruiz@imperial.ac.uk;
   r.z.h.hu@herts.ac.uk; rumyana.neykova@brunel.ac.uk;
   n.yoshida@imperial.ac.uk
RI Yoshida, Nobuko/AAL-6082-2020
OI Yoshida, Nobuko/0000-0002-3925-8557; Zhou, Fangyi/0000-0002-8973-0821;
   Hu, Raymond/0000-0003-4361-6772
FU EPSRC [EP/T006544/1, EP/K011715/1, EP/K034413/1, EP/L00058X/1,
   EP/N027833/1, EP/N028201/1, EP/T014709/1, EP/V000462/1]; EPSRC
   [EP/N027833/1, EP/K011715/1, EP/T006544/1, EP/T014709/1] Funding Source:
   UKRI
FX We thank OOPSLA reviewers for their comments and suggestions, David
   Castro, Julia Gabet and Lorenzo Gheri for proofreading, and Wei Jiang
   and Qianyi Shu for testing the artifact. The work is supported by EPSRC
   EP/T006544/1, EP/K011715/1, EP/K034413/1, EP/L00058X/1, EP/N027833/1,
   EP/N028201/1, EP/T006544/1, EP/T014709/1 and EP/V000462/1, and
   NCSS/EPSRC VeTSS.
CR Abel A, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:29)2012
   Ancona D, 2016, FOUND TRENDS PROGRAM, V3, pI, DOI 10.1561/2500000031
   [Anonymous], 2015, SCRIBBLE DESCRIBING
   Bengtson J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890031
   Bhargavan K, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P445, DOI 10.1145/1706299.1706350
   Bhargavan K, 2009, PROCEEDINGS OF THE 22ND IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, P124, DOI 10.1109/CSF.2009.26
   Bierman GM, 2012, J FUNCT PROGRAM, V22, P31, DOI 10.1017/S0956796812000032
   Bocchi L, 2010, LECT NOTES COMPUT SC, V6269, P162, DOI 10.1007/978-3-642-15375-4_12
   Bocchi L, 2013, LECT NOTES COMPUT SC, V8358, P97, DOI 10.1007/978-3-642-41157-1_7
   BRAND D, 1983, J ACM, V30, P323, DOI 10.1145/322374.322380
   Castro David, 2019, Proceedings of the ACM on Programming Languages, V3, DOI 10.1145/3290342
   Das Ankush, 2020, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V13, P1, DOI [DOI 10.4230/LIPICS.CONCUR.2020.13, 10.4230/LIPIcs.CONCUR.2020.13]
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Muijnck-Hughes J, 2019, ELECTRON P THEOR COM, P47, DOI 10.4204/EPTCS.291.5
   Demangeon R, 2012, LECT NOTES COMPUT SC, V7454, P272, DOI 10.1007/978-3-642-32940-1_20
   Deniélou PM, 2013, LECT NOTES COMPUT SC, V7966, P174, DOI 10.1007/978-3-642-39212-2_18
   Deniélou PM, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:6)2012
   Fielding R., 2014, Technical Report RFC7230, DOI DOI 10.17487/RFC7230
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Gay S, 2017, RIV PUBL SER AUTOMAT, pXV
   Handley MAT, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371092
   Hinrichsen JK, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371074
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Hu R, 2008, LECT NOTES COMPUT SC, V5142, P516, DOI 10.1007/978-3-540-70592-5_22
   Hu R, 2017, RIV PUBL SER AUTOMAT, P287
   Hu R, 2016, LECT NOTES COMPUT SC, V9633, P401, DOI 10.1007/978-3-662-49665-7_24
   Igarashi A, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000169
   Imai K, 2019, SCI COMPUT PROGRAM, V172, P135, DOI 10.1016/j.scico.2018.08.005
   Imai Keigo, 2020, ECOOP 20
   Knoth T, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408988
   Lehmann Nico, 2017, ACM SIGPLAN Notices, V52, P775, DOI 10.1145/3093333.3009856
   Neykova R, 2018, CC'18: PROCEEDINGS OF THE 27TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P128, DOI 10.1145/3178372.3179495
   Neykova R, 2013, LECT NOTES COMPUT SC, V8174, P358, DOI 10.1007/978-3-642-40787-1_25
   Neykova Rumyana, 2019, FEATHERWEIGHT SCRIBB, P236, DOI [10.1007/978-3-030-21485-2, DOI 10.1007/978-3-030-21485-2]
   Ng N, 2015, LECT NOTES COMPUT SC, V9031, P212, DOI 10.1007/978-3-662-46663-6_11
   Orchard D, 2017, RIV PUBL SER AUTOMAT, P219
   Pfenning F, 2001, IEEE S LOG, P221, DOI 10.1109/LICS.2001.932499
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Polikarpova N, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408987
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Scalas A., 2017, 31stEuropeanConferenceonObject-OrientedProgramming, ECOOP 2017, June 19-23, 2017, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.24, 10.4230/LIPICS.ECOOP.2017.24, 10.4230/LIPIcs.ECOOP.2017.24]
   Schmid GS, 2016, SCALA'16: PROCEEDINGS OF THE 2016 7TH ACM SIGPLAN SYMPOSIUM ON SCALA, P31, DOI 10.1145/2998392.2998398
   Swamy N, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409003
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Thiemann P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371135
   Toninho B, 2017, J LOG ALGEBR METHODS, V90, P61, DOI 10.1016/j.jlamp.2016.11.005
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158141
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Zhou Fangyi, 2020, STATICALLY VERIFIED, DOI [10.5281/zenodo.3970760, DOI 10.5281/ZENODO.3970760]
NR 50
TC 14
Z9 15
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 148
DI 10.1145/3428216
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900025
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Giarrusso, PG
   Stefanesco, L
   Timany, A
   Birkedal, L
   Krebbers, R
AF Giarrusso, Paolo G.
   Stefanesco, Leo
   Timany, Amin
   Birkedal, Lars
   Krebbers, Robbert
TI Scala Step-by-Step Soundness for DOT with Step-Indexed Logical Relations
   in Iris
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE DOT; Scala; type soundness; data abstraction; step-indexing; logical
   relations; Iris; Coq
AB The metatheory of Scala's core type system - the Dependent Object Types (DOT) calculus - is hard to extend, like the meta theory of other type systems combining subtyping and dependent types. Soundness of important Scala features therefore remains an open problem in theory and in practice. To address some of these problems, we use a semantics-first approach to develop a logical relations model for a new version of DOT, called guarded DOT (gDOT). Our logical relations model makes use of an abstract form of step-indexing, as supported by the Iris framework, to model various forms of recursion in gDOT. To demonstrate the expressiveness of gDOT, we show that it handles Scala examples that could not be handled by previous versions of DOT, and prove using our logical relations model that gDOT provides the desired data abstraction. The gDOT type system, its semantic model, its soundness proofs, and all examples in the paper have been mechanized in Coq.
C1 [Giarrusso, Paolo G.; Krebbers, Robbert] Delft Univ Technol, Delft, Netherlands.
   [Stefanesco, Leo] Univ Paris, IRIF, Paris, France.
   [Stefanesco, Leo] CNRS, Paris, France.
   [Timany, Amin; Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
C3 Delft University of Technology; Universite Paris Cite; Centre National
   de la Recherche Scientifique (CNRS); Aarhus University
RP Giarrusso, PG (corresponding author), Delft Univ Technol, Delft, Netherlands.
OI Timany, Amin/0000-0002-2237-851X
FU Flemish research fund (FWO); Dutch Research Council (NWO)
   [016.Veni.192.259]; Villum Investigator grant [25804]; Center for Basic
   Research in Program Verification (CPV); VILLUM Foundation; ModuRes
   Sapere Aude Advanced Grant from The Danish Council for Independent
   Research for the Natural Sciences (FNU)
FX During this project Amin Timany was a postdoctoral fellow of the Flemish
   research fund (FWO) and worked at the imec-DistriNet research group at
   KU Leuven, Belgium. Robbert Krebbers was supported by the Dutch Research
   Council (NWO), project 016.Veni.192.259. This work was also supported by
   a Villum Investigator grant (no. 25804), Center for Basic Research in
   Program Verification (CPV), from the VILLUM Foundation and by the
   ModuRes Sapere Aude Advanced Grant from The Danish Council for
   Independent Research for the Natural Sciences (FNU).
CR Ahmed Amal J., 2004, Ph. D. Dissertation
   AMERICA P, 1989, J COMPUT SYST SCI, V39, P343, DOI 10.1016/0022-0000(89)90027-5
   Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   AMIN N, 2017, POPL 666S679
   Amin N., 2012, FOOL
   Amin Nada, 2016, THESIS EPFL
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   BIRKEDAL L, 2010, TCS, V411
   Birkedal L, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1926385.1926401
   Birkedal Lars, 2020, S P 21
   Brandt M., 1998, Fundamenta Informaticae, V33, P309
   Clarke Dave, 2007, P 6 INT C ASP OR SOF, P121
   CRARY K, 1999, PLDI
   Crary K, 2017, ACM SIGPLAN NOTICES, V52, P100, DOI 10.1145/3093333.3009892
   Cremet V, 2006, LECT NOTES COMPUT SC, V4162, P1
   Dreyer, 2020, CACM
   Dreyer Derek, 2018, PACMPL 2 ICFP 2018, V77, p1S77: 30
   Ernst E, 2006, ACM SIGPLAN NOTICES, V41, P270, DOI 10.1145/1111320.1111062
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Giarrusso Paolo G., 2019, CAN WE PROVE TYPE CO
   HARPER R, 1993, ACM T PROGR LANG SYS, V15, P211, DOI 10.1145/169701.169696
   Harper R., 1994, PRINCIPLES PROGRAMMI, P123, DOI [DOI 10.1145/174675.176927, 10.1145/174675.176927]
   Hu JZS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371077
   Hutchins DS, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P287, DOI 10.1145/1706299.1706334
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   KABIR I, 2018, SCALA ICFP, P40
   Kopylov A, 2003, IEEE S LOG, P86, DOI 10.1109/LICS.2003.1210048
   Krebbers, 2020, SCALA STEP BY STEP S, DOI [10.5281/zenodo.3926703, DOI 10.5281/ZENODO.3926703]
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krogh-Jespersen M, 2017, ACM SIGPLAN NOTICES, V52, P218, DOI 10.1145/3093333.3009877
   Lhotak Ondrej, 2016, MUTABLE WADLERFEST D
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Nakano H, 2000, IEEE S LOG, P255, DOI 10.1109/LICS.2000.855774
   Nieto A, 2017, SCALA'17: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P2, DOI 10.1145/3136000.3136003
   Odersky, 2016, DOT HIGHER KINDED TY
   Odersky M, 2016, SCALA'16: PROCEEDINGS OF THE 2016 7TH ACM SIGPLAN SYMPOSIUM ON SCALA, P51, DOI 10.1145/2998392.2998400
   Peng Fu, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P224, DOI 10.1007/978-3-319-08918-8_16
   Rapoport M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133870
   Rapoport M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360571
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Rompf Tiark, 2017, ECOOP LIPICS, V74
   Schäfer S, 2015, LECT NOTES COMPUT SC, V9236, P359, DOI 10.1007/978-3-319-22102-1_24
   Severi P, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(1:8)2019
   Stark K, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P166, DOI 10.1145/3293880.3294101
   Stucki, 2017, THESIS SCH COMP COMM, DOI [10.5075/epfl-thesis-8014, DOI 10.5075/EPFL-THESIS-8014]
   Stucki, 2016, DOT HIGHER KINDED TY
   Swasey D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133913
   Tassarotti J, 2017, LECT NOTES COMPUT SC, V10201, P909, DOI 10.1007/978-3-662-54434-1_34
   Timany A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158152
   Yang YP, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133871
NR 55
TC 7
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 114
DI 10.1145/3408996
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700028
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Rioux, N
   Zdancewic, S
AF Rioux, Nick
   Zdancewic, Steve
TI Computation Focusing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compiler verification; focusing; full abstraction; program equivalence;
   type systems
AB Focusing is a technique from proof theory that exploits type information to prune inessential nondeterminism from proof search procedures. Viewed through the lens of the Curry-I Toward correspondence, a focused typing derivation yields terms in normal form. This paper explores how to exploit focusing for reasoning about contextual equivalences and full abstraction. We present a focused polymorphic call-by-push-value calculus and prove a computational completeness result: for every well-typed term, there exists a focused term that is fiq-equivalent to it. This completeness result yields a powerful way to refine the context lemmas for establishing contextual equivalences, cutting down the set that must be considered to just focused contexts. The paper demonstrates the application of focusing to establish program equivalences, including free theorems. It also uses focusing to prove full abstraction of a translation of the pure, total call-by-push-value language into a language with divergence and simple effect types, yielding a novel solution to a simple-to-state, but hitherto difficult to solve problem.
C1 [Rioux, Nick; Zdancewic, Steve] Univ Penn, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Rioux, N (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM nrioux@cis.upenn.edu; stevez@cis.upenn.edu
RI Zdancewic, Steve/JXL-6845-2024
OI Rioux, Nicholas/0000-0001-5277-8920
FU National Science Foundation [1521539]; ONR [N00014-17-1-2930]; National
   Science Foundation Graduate Research Fellowship [1845298]; Direct For
   Education and Human Resources; Division Of Graduate Education [1845298]
   Funding Source: National Science Foundation
FX This work was funded by the National Science Foundation's Expedition in
   Computing The Science of Deep Specification award 1521539 with
   additional support by the ONR grant REVOLVER award N00014-17-1-2930. The
   first author is supported by a National Science Foundation Graduate
   Research Fellowship under Grant No. 1845298. Any opinions, findings, and
   conclusions or recommendations expressed in this material are those of
   the authors and do not necessarily reflect the views of the National
   Science Foundation or the ONR.
CR Abel A, 2019, PROCEEDINGS OF THE 21ST INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2019), DOI 10.1145/3354166.3354168
   Abel A, 2008, LECT NOTES ARTIF INT, V5330, P497, DOI 10.1007/978-3-540-89439-1_35
   ABRAMSKY S, 1993, INFORM COMPUT, V105, P159, DOI 10.1006/inco.1993.1044
   Abramsky S., 1990, LAZY LAMBDA CALCULUS, P65
   Ahmed A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P431
   Ahmed A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P157
   Andreoli J. M., 1992, Journal of Logic and Computation, V2, P297, DOI 10.1093/logcom/2.3.297
   Blain Levy P., 1999, Typed Lambda Calculi and Applications. 4th International Conference, TLCA'99. Proceedings, P228
   Brock-Nannestad T, 2010, LECT NOTES COMPUT SC, V6397, P157, DOI 10.1007/978-3-642-16242-8_12
   Chaudhuri K, 2008, J AUTOM REASONING, V40, P133, DOI 10.1007/s10817-007-9091-0
   Debakker J. W., 1969, THEORY PROGRAMS
   Eades III Harley D, 2010, INT WORKSH PROOF SEA, P10
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   Krishnaswami NR, 2009, ACM SIGPLAN NOTICES, V44, P366, DOI 10.1145/1594834.1480927
   Lassen S, 2005, IEEE S LOG, P345
   Lassen S. B., 1999, Electronic Notes in Theoretical Computer Science, V20, DOI 10.1016/S1571-0661(04)80083-5
   LEIVANT D, 1991, INFORM COMPUT, V93, P93, DOI 10.1016/0890-5401(91)90053-5
   Mason I., 1991, Journal of Functional Programming, V1, P287, DOI 10.1017/S0956796800000125
   Matthews J, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P3
   Milner R., 1977, Theoretical Computer Science, V4, P1, DOI 10.1016/0304-3975(77)90053-6
   Morris James Hiram, 1968, Ph.D. thesis
   New MS, 2016, ACM SIGPLAN NOTICES, V51, P103, DOI 10.1145/3022670.2951941
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   PFENNING F, 1995, IEEE S LOG, P156, DOI 10.1109/LICS.1995.523253
   Pitts Andrew, 2004, ADV TOPICS TYPES PRO
   Plotkin Gordon D, 1980, LAMBDA DEFINABILITY, P363
   Polikarpova N, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290385
   Rioux Nick, 2020, MSCIS2004 U PENNS DE
   Sangiorgi D, 2007, IEEE S LOG, P293, DOI 10.1109/LICS.2007.17
   Santo JE, 2017, ELECTRON NOTES THEOR, V332, P149, DOI 10.1016/j.entcs.2017.04.010
   Scherer G, 2017, ACM SIGPLAN NOTICES, V52, P374, DOI 10.1145/3093333.3009901
   Scherer G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P243, DOI 10.1145/2784731.2784757
   Simmons RJ, 2014, ACM T COMPUT LOG, V15, DOI 10.1145/2629678
   STATMAN R, 1985, INFORM CONTROL, V65, P85, DOI 10.1016/S0019-9958(85)80001-2
   Sumii E, 2005, ACM SIGPLAN NOTICES, V40, P63, DOI 10.1145/1047659.1040311
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Wadler Philip, 1989, P 4 INT S FUNCT PROG
   Zeilberger N, 2008, ANN PURE APPL LOGIC, V153, P66, DOI 10.1016/j.apal.2008.01.001
   Zeilberger N, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P359, DOI 10.1145/1328438.1328482
   Zhao JZ, 2010, LECT NOTES COMPUT SC, V6461, P344, DOI 10.1007/978-3-642-17164-2_24
NR 41
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 95
DI 10.1145/3408977
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700009
OA gold
DA 2024-07-18
ER

PT J
AU Sekiyama, T
   Tsukada, T
   Igarashi, A
AF Sekiyama, Taro
   Tsukada, Takeshi
   Igarashi, Atsushi
TI Signature Restriction for Polymorphic Algebraic Effects
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE polymorphic type assignment; polymorphic effects; algebraic effects and
   handlers
ID INFERENCE; ML
AB The naive combination of polymorphic effects and polymorphic type assignment has been well known to break type safety. Existing approaches to this problem are classified into two groups: one for restricting how effects are triggered and the other for restricting how they are implemented. This work explores a new approach to ensuring the safety of polymorphic effects in polymorphic type assignment. A novelty of our work lies in finding a restriction on effect interfaces. To formalize our idea, we employ algebraic effects and handlers, where an effect interface is given by a set of operations coupled with type signatures. We propose signature restriction, a new notion to restrict the type signatures of operations, and show that signature restriction is sufficient to ensure type safety of an effectful language equipped with unrestricted polymorphic type assignment. We also develop a type-and-effect system to enable the use of both operations that satisfy and do not satisfy the signature restriction in a single program.
C1 [Sekiyama, Taro] Natl Inst Informat, Tokyo, Japan.
   [Sekiyama, Taro] SOKENDAI, Hayama, Kanagawa, Japan.
   [Tsukada, Takeshi] Univ Tokyo, Tokyo, Japan.
   [Igarashi, Atsushi] Kyoto Univ, Kyoto, Japan.
C3 Research Organization of Information & Systems (ROIS); National
   Institute of Informatics (NII) - Japan; Graduate University for Advanced
   Studies - Japan; University of Tokyo; Kyoto University
RP Sekiyama, T (corresponding author), Natl Inst Informat, Tokyo, Japan.; Sekiyama, T (corresponding author), SOKENDAI, Hayama, Kanagawa, Japan.
EM tsekiyama@acm.org; tsukada@kb.is.s.u-tokyo.ac.jp;
   igarashi@kuis.kyoto-u.ac.jp
OI Igarashi, Atsushi/0000-0002-5143-9764; Sekiyama,
   Taro/0000-0001-9286-230X; Tsukada, Takeshi/0000-0002-2824-8708
FU ERATO HASUO Metamathematics for Systems Design Project [JPMJER1603];
   JSPS KAKENHI [JP19K20247, JP19K20211, JP15H05706]; JST
FX We would like to thank Yusuke Matsushita for a fruitful discussion at an
   early stage of the research and the anonymous reviewers of ICFP 2020 PC
   and AEC for their close reading and valuable comments. This work was
   supported in part by ERATO HASUO Metamathematics for Systems Design
   Project (No. JPMJER1603), JST and JSPS KAKENHI Grant Numbers JP19K20247
   (Sekiyama), JP19K20211 (Tsukada), and JP15H05706 (Igarashi).
CR Ahman Danel, 2017, THESIS U EDINBURGH
   Ahmed Amal, 2009, Proceedings of the 36th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2009, Savannah, GA, USA, January 21-23, 2009, P340, DOI DOI 10.1145/1594834.1480925
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   APPEL AW, 1991, LECT NOTES COMPUT SC, V528, P1
   Asai K, 2007, LECT NOTES COMPUT SC, V4807, P239
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Biernacki D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371116
   Casinghino C, 2014, ACM SIGPLAN NOTICES, V49, P33, DOI 10.1145/2535838.2535883
   Clinger William D., 1985, SCHEME HIGHER LEVEL, P237
   Cong Youyou, 2018, P ACM PROGR LANG, DOI [10.1145/3236764, DOI 10.1145/3236764]
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Dolan S, 2018, LECT NOTES COMPUT SC, V10788, P98, DOI 10.1007/978-3-319-89719-6_6
   Dreyer D, 2010, ACM SIGPLAN NOTICES, V45, P143, DOI 10.1145/1932681.1863566
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   Felleisen M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P180, DOI 10.1145/73560.73576
   Filinski A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P483, DOI 10.1145/1706299.1706354
   Forster Y, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000121
   Garrigue Jacques, 2004, LNCS
   Girard J.-Y., 1972, PhD thesis
   Gordon M. J., 1979, Edinburgh LCF
   Gunter C. A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P12, DOI 10.1145/224164.224173
   Harper R., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P206, DOI 10.1145/158511.158630
   Harper R., 1993, LISP and Symbolic Computation, V6, P361, DOI 10.1007/BF01019463
   Hoang M., 1993, Proceedings of Eighth Annual IEEE Symposium on Logic in Computer Science (Cat. No.93CH3328-2), P15, DOI 10.1109/LICS.1993.287604
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Kammar O, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000320
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Leivant D., 1983, C REC 10 ANN ACM S P, P88, DOI [10.1145/567067.567077, DOI 10.1145/567067.567077]
   Leroy Xavier., 1991, PROC 18 ACM SIGPLAN, P291
   Leroy Xavier, 2020, OCAML SYSTEM RELEASE
   Levy P. B., 2001, Call-by-push-value
   Lillibridge Mark, 1991, ML CALLCC IS UNSOUND
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Milner R., 1990, The Definition of Standard ML
   MITCHELL JC, 1988, INFORM COMPUT, V76, P211, DOI 10.1016/0890-5401(88)90009-0
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Pédrot PM, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371126
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   Pitts Andrew, 1998, Higher Order Operational Techniques in Semantics, P227
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Reynolds J. C., 1974, Programming Symposium, P408
   Sekiyama T, 2019, LECT NOTES COMPUT SC, V11423, P353, DOI 10.1007/978-3-030-17184-1_13
   Sekiyama T, 2017, ACM SIGPLAN NOTICES, V52, P530, DOI 10.1145/3093333.3009875
   SITARAM D, 1993, SIGPLAN NOTICES, V28, P147, DOI 10.1145/173262.155104
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   TOFTE M, 1990, INFORM COMPUT, V89, P1, DOI 10.1016/0890-5401(90)90018-D
   WELLS JB, 1994, IEEE S LOG, P176
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xi HW, 2007, J FUNCT PROGRAM, V17, P215, DOI 10.1017/S0956796806006216
NR 56
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 117
DI 10.1145/3408999
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700031
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Wang, S
   Zhang, CY
   Su, ZD
AF Wang, Shuai
   Zhang, Chengyu
   Su, Zhendong
TI Detecting Nondeterministic Payment Bugs in Ethereum Smart Contracts
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Analysis; Smart Contracts; Security; Blockchain
AB The term "smart contracts" has become ubiquitous to describe an enormous number of programs uploaded to the popular Ethereum blockchain system. Despite rapid growth of the smart contract ecosystem, errors and exploitations have been constantly reported from online contract systems, which has put financial stability at risk with losses totaling millions of US dollars. Most existing research focuses on pinpointing specific types of vulnerabilities using known patterns. However, due to the lack of awareness of the inherent nondeterminism in the Ethereum blockchain system and how it affects the funds transfer of smart contracts, there can be unknown vulnerabilities that may be exploited by attackers to access numerous online smart contracts.
   In this paper, we introduce a methodical approach to understanding the inherent nondeterminism in the Ethereum blockchain system and its (unwanted) influence on contract payments. We show that our new focus on nondeterminism-related smart contract payment bugs captures the root causes of many common vulnerabilities without relying on any known patterns and also encompasses recently disclosed issues that are not handled by existing research. To do so, we introduce techniques to systematically model components in the contract execution context and to expose various nondeterministic factors that are not yet fully understood. We further study how these nondeterministic factors impact contract funds transfer using information flow tracking. The technical challenge of detecting nondeterministic payments lies in discovering the contract global variables subtly affected by read-write hazards because of unpredictable transaction scheduling and external callee behavior. We show how to augment and instrument a contract program into a representation that simulates the execution of a large subset of the contract behavior. The instrumented code is then analyzed to flag nondeterministic global variables using off-the-shelf model checkers.
   We implement the proposed techniques as a practical tool named NPCHECKER (Nondeterministic Payment Checker) and evaluate it on 30K online contracts (3,075 distinct) collected from the Ethereum mainnet. NPCHECKER has successfully detected nondeterministic payments in 1,111 online contracts with reasonable cost. Further investigation reports high precision of NPCHECKER (only four false positives in a manual study of 50 contracts). We also show that NPCHECKER unveils contracts vulnerable to recently-disclosed attack vectors. NPCHECKER can identify all six new vulnerabilities or variants of common smart contract vulnerabilities that are missed by existing research relying on a "contract vulnerability checklist."
C1 [Wang, Shuai; Su, Zhendong] Hong Kong Univ Sci & Technol, Hong Kong, Peoples R China.
   [Zhang, Chengyu] East China Normal Univ, Shanghai, Peoples R China.
   [Su, Zhendong] Swiss Fed Inst Technol, Zurich, Switzerland.
C3 Hong Kong University of Science & Technology; East China Normal
   University; Swiss Federal Institutes of Technology Domain; ETH Zurich
RP Wang, S (corresponding author), Hong Kong Univ Sci & Technol, Hong Kong, Peoples R China.
EM shuaiw@cse.ust.hk; dale.chengyu.zhang@gmail.com; zhendong.su@inf.ethz.ch
RI Zhang, Chengyu/ABC-1220-2020
OI Su, Zhendong/0000-0002-2970-1391; Zhang, Chengyu/0000-0002-7285-289X
FU China Scholarship Council; NSFC [61572197, 61632005]
FX We thank the anonymous SPLASH/OOPSLA reviewers for their valuable
   feedback. Our special thanks go to the JEB3, Smack, and EVMJIT
   developers who provided us with much help, insight and advice. Chengyu
   Zhang was partially supported by the China Scholarship Council, and NSFC
   Projects No. 61572197 and No. 61632005.
CR Amani S, 2018, P 7 INT C CERT PROGR, P66, DOI DOI 10.1145/3167084
   [Anonymous], 2019, SECURIFY GIT ISSUES
   [Anonymous], 2019, PROVABLE PROVABLE RA
   [Anonymous], 2019, RANDAO: A DAO working as RNG of Ethereum
   [Anonymous], 2018, P 25 ANN NETW DISTR
   [Anonymous], 2018, KNOWN ATTACKS ETHERE
   Bhargavan K, 2016, PROCEEDINGS OF THE 2016 ACM WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS'16), P91, DOI 10.1145/2993600.2993611
   ChainSecurity, 2019, CONST EN NEW REENTR
   Code4Block, 2018, CVE LIST FOUND TEAM
   ConsenSys, 2018, MYTHR CLASS
   Feng Yu, 2019, ARXIVCSCR190206067
   Geth, 2018, GO ETHEREUM
   Grech N., 2018, P ACM PROGRAM LANG, V2, P1, DOI DOI 10.1145/3276486
   Grishchenko I, 2018, LECT NOTES COMPUT SC, V10804, P243, DOI 10.1007/978-3-319-89722-6_10
   Haran Arvind, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P451, DOI 10.1007/978-3-662-46681-0_42
   Hildenbrandt E, 2018, P IEEE COMPUT SECUR, P204, DOI 10.1109/CSF.2018.00022
   Hirai Yoichi, 2017, Financial Cryptography and Data Security. FC 2017 International Workshops WAHC, BITCOIN, VOTING, WTSC, and TA. Revised Selected Papers: LNCS 10323, P520, DOI 10.1007/978-3-319-70278-0_33
   Jiang B, 2018, IEEE INT CONF AUTOM, P259, DOI 10.1145/3238147.3238177
   Kolluri Aashish, 2018, ARXIVCSCR181011605
   Krupp J, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P1317
   Lahiri SK, 2009, LECT NOTES COMPUT SC, V5643, P509, DOI 10.1007/978-3-642-02658-4_38
   Luu L, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P254, DOI 10.1145/2976749.2978309
   Mavridou A, 2018, LECT NOTES COMPUT SC, V10804, P270, DOI 10.1007/978-3-319-89722-6_11
   Nakamoto S., 2008, DECENT BUS REV, V21260, DOI https://bitcoin.org/bitcoin.pdf
   Nikolic I, 2018, 34TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2018), P653, DOI 10.1145/3274694.3274743
   Perez Daniel, 2019, ARXIVCSCR190206710
   PNF, 2018, JEB DEC
   Qadeer S, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/996893.996845
   Rakamaric Z, 2014, LECT NOTES COMPUT SC, V8559, P106, DOI 10.1007/978-3-319-08867-9_7
   Rodler Michael, 2018, ABS181205934 CORR
   SECBIT, 2018, AW BUGG ERC20 TOK
   Sergey Ilya, 2017, Financial Cryptography and Data Security. FC 2017 International Workshops WAHC, BITCOIN, VOTING, WTSC, and TA. Revised Selected Papers: LNCS 10323, P478, DOI 10.1007/978-3-319-70278-0_30
   Siegel D., 2016, Understanding The DAO Attack
   Tsankov P, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P67, DOI 10.1145/3243734.3243780
   Wood G., 2014, Ethereum project yellow paper, V151, P1
NR 35
TC 40
Z9 42
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 189
DI 10.1145/3360615
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500074
OA gold
DA 2024-07-18
ER

PT J
AU Watt, C
   Rossberg, A
   Pichon-Pharabod, J
AF Watt, Conrad
   Rossberg, Andreas
   Pichon-Pharabod, Jean
TI Weakening WebAssembly
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Virtual machines; programming languages; assembly languages;
   just-in-time compilers; type systems
AB WebAssembly (Warm) is a safe, portable virtual instruction set that can be hosted in a wide range of environments, such as a Web browser. It is a low-level language whose instructions are intended to compile directly to bare hardware. While the initial version of Wasm focussed on single-threaded computation, a recent proposal extends it with low-level support for multiple threads and atomic instructions for synchronised access to shared memory. To support the correct compilation of concurrent programs, it is necessary to give a suitable specification of its memory model.
   Wasm's language definition is based on a fully formalised specification that carefully avoids undefined behaviour. We present a substantial extension to this semantics, incorporating a relaxed memory model, along with a few proposed operational extensions. Wasm's memory model is unique in that its linear address space can be dynamically grown during execution, while all accesses are bounds-checked. This leads to the novel problem of specifying how observations about the size of the memory can propagate between threads. We argue that, considering desirable compilation schemes, we cannot give a sequentially consistent semantics to memory growth.
   We show that our model guarantees Sequential Consistency of Data-Race-Free programs (SC-DRIF). However, because Wasm is to run on the Web, we must also consider interoperability of its model with that of JavaScript. We show, by counter-example, that JavaScript's memory model is not SC-DRF, in contrast to what is claimed in its specification. We propose two axiomatic conditions that should be added to the JavaScript model to correct this difference.
   We also describe a prototype SMT-based litmus tool which acts as an oracle for our axiomatic model, visualising its behaviours, including memory resizing.
C1 [Watt, Conrad; Pichon-Pharabod, Jean] Univ Cambridge, Cambridge, England.
   [Rossberg, Andreas] Dfin Stiftung, Berlin, Germany.
C3 University of Cambridge
RP Watt, C (corresponding author), Univ Cambridge, Cambridge, England.
EM conrad.watt@cl.cam.ac.uk; rossberg@mpi-sws.org; jean.pichon@cl.cam.ac.uk
FU EPSRC [EP/K008528/1]; Google PhD Fellowship in Programming Technology
   and Software Engineering; EPSRC DTP award [EP/N509620/1]; EPSRC
   [EP/K008528/1] Funding Source: UKRI
FX We thank Shu-yu Guo, Lars T Hansen, and Peter Sewell for their valuable
   feedback. We thank the members of the WebAssembly Community Group, the
   WebAssembly Working Group, and ECMA TC39 for useful discussions. This
   work was partly supported by the EPSRC Programme Grant REMS: Rigorous
   Engineering for Mainstream Systems (EP/K008528/1). The first author was
   supported by an EPSRC DTP award (EP/N509620/1), and a Google PhD
   Fellowship in Programming Technology and Software Engineering.
CR Alglave J, 2015, ACM SIGPLAN NOTICES, V50, P577, DOI [10.1145/2775054.2694391, 10.1145/2694344.2694391]
   Alglave Jade, 2009, P 4 WORKSH DECL ASP, P13, DOI DOI 10.1145/1481839.1481842
   [Anonymous], 1990, P ISCA, DOI DOI 10.1145/325164.325100
   [Anonymous], 2016, C C 11 MAPPINGS PROC
   BATTY M. J., 2014, PhD thesis
   Batty M, 2015, LECT NOTES COMPUT SC, V9032, P283, DOI 10.1007/978-3-662-46669-8_12
   Batty M, 2013, ACM SIGPLAN NOTICES, V48, P235, DOI 10.1145/2480359.2429099
   Batty M, 2012, ACM SIGPLAN NOTICES, V47, P509, DOI 10.1145/2103621.2103717
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Batty Mark, 2014, THIN AIR PROBLEM
   Boehm H.-J., 2014, MSPC, p7:1, DOI DOI 10.1145/2618128.2618134
   Boehm HJ, 2008, ACM SIGPLAN NOTICES, V43, P68, DOI 10.1145/1379022.1375591
   Boehm Hans-Juergen, 2011, 3 USENIX WORKSH HOT
   Boehm HJ, 2005, ACM SIGPLAN NOTICES, V40, P261, DOI 10.1145/1064978.1065042
   Cenciarelli P, 2007, LECT NOTES COMPUT SC, V4421, P331
   Dolan S, 2018, ACM SIGPLAN NOTICES, V53, P242, DOI [10.1145/3192366.3192421, 10.1145/3296979.3192421]
   ECMA International, 2018, ECMA SCRIPT 2018 LAN
   Flur S, 2017, ACM SIGPLAN NOTICES, V52, P429, DOI 10.1145/3093333.3009839
   Flur S, 2016, ACM SIGPLAN NOTICES, V51, P608, DOI 10.1145/2914770.2837615
   GHARACHORLOO K, 1992, J PARALLEL DISTR COM, V15, P399, DOI 10.1016/0743-7315(92)90052-O
   Gray KE, 2015, PROCEEDINGS OF THE 48TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO-48), P635, DOI 10.1145/2830772.2830775
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   Hansen Lars T., 2017, RESIZING DETAILS UND
   Herman David, 2014, ASM JS
   Higham L, 2006, LECT NOTES COMPUT SC, V4308, P58
   Howells David, 2019, LINUX KERNEL MEMORY
   Jylanki Jukka., 2015, EMSCRIPTEN GAINS EXP
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lochbihler A, 2018, J AUTOM REASONING, V61, P243, DOI 10.1007/s10817-018-9452-x
   Mador-Haim Sela, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P495, DOI 10.1007/978-3-642-31424-7_36
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Mattarei C, 2018, LECT NOTES COMPUT SC, V10806, P55, DOI 10.1007/978-3-319-89963-3_4
   McKenney Paul E., 2005, C STANDARDS COMMITTE
   Nienhuis K, 2016, ACM SIGPLAN NOTICES, V51, P111, DOI 10.1145/3022671.2983997
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Pichon-Pharabod J, 2016, ACM SIGPLAN NOTICES, V51, P622, DOI 10.1145/2914770.2837616
   Podkopaev A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290382
   Rossberg Andreas, 2019, GC EXTENSION
   Rossberg Andreas., 2018, REFERENCE TYPES PROP
   Sarkar S., 2012, Proceedings of the 33rd ACM SIGPLAN conference on Programming Language Design and Implementation, PLDI '12, P311, DOI [10.1145/2254064.2254102, DOI 10.1145/2254064.2254102]
   Sevcík J, 2008, LECT NOTES COMPUT SC, V5142, P27, DOI 10.1007/978-3-540-70592-5_3
   Sevcík J, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P306
   Smith Ben., 2019, THREADING PROPOSAL W
   Vafeiadis V, 2015, ACM SIGPLAN NOTICES, V50, P209, DOI [10.1145/2676726.2676995, 10.1145/2775051.2676995]
   Watt Conrad., 2018, Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs. CPP 2018, P53, DOI DOI 10.1145/3167082
   WebAssembly Working Group, 2019, WEBASSEMBLY SPEC
NR 48
TC 11
Z9 13
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 133
DI 10.1145/3360559
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500018
OA gold
DA 2024-07-18
ER

PT J
AU Algehed, M
   Bernardy, JP
AF Algehed, Maximilian
   Bernardy, Jean-Philippe
TI Simple Noninterference from Parametricity
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Security; Types; Parametricity; Noninterference
AB In this paper we revisit the connection between parametricity and noninterference. Our primary contribution is a proof of noninterference fora polyvariant variation of the Dependency Core Calculus of Abadi et al. in the Calculus of Constructions. The proof is modular: it leverages parametricity for the Calculus of Constructionsand the encoding of data abstraction using existential types This perspective gives rise to simple and understandable proofs of noninterference from parametricity. All our contributions have been mechanised in the Agda proof assistant.
C1 [Algehed, Maximilian] Chalmers Univ Technol, Dept Comp Sci & Engn, Gothenburg, Sweden.
   [Bernardy, Jean-Philippe] Univ Gothenburg, Dept Philosophy Linguist & Theory Sci, Gothenburg, Sweden.
C3 Chalmers University of Technology; University of Gothenburg
RP Algehed, M (corresponding author), Chalmers Univ Technol, Dept Comp Sci & Engn, Gothenburg, Sweden.
EM algehed@chalmers.se; jean-philippe.bernardy@gu.se
FU Wallenberg Artificial Intelligence, Autonomous Systems and Software
   Program (WASP) - Knut and Alice Wallenberg Foundation
FX We would like to thank the anonymous reviewers for their helpful and
   insightful comments. This work was supported by the Wallenberg
   Artificial Intelligence, Autonomous Systems and Software Program (WASP)
   funded by the Knut and Alice Wallenberg Foundation.
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Aguirre A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110265
   Algehed M, 2017, PROCEEDINGS OF THE 2017 WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS' 17), P77, DOI 10.1145/3139337.3139338
   Algehed M, 2018, PLAS'18: PROCEEDINGS OF THE 13TH WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY, P24, DOI 10.1145/3264820.3264823
   Barendregt H, 2013, PERSPECT LOGIC, P1, DOI 10.1017/CBO9781139032636
   Bernardy JP, 2012, J FUNCT PROGRAM, V22, P107, DOI 10.1017/S0956796812000056
   Bertot Yves, 2013, Interactive theorem proving and program development: Coq'Art: the calculus of inductive constructions
   Bowman WJ, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P101, DOI 10.1145/2784731.2784733
   Buiras P, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P289, DOI 10.1145/2784731.2784758
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Norell U., 2007, THESIS DEP COMPUTER
   Reynolds John C, 1983, TYPES ABSTRACTION PA
   Russo A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P280, DOI 10.1145/2784731.2784756
   Russo A, 2009, ACM SIGPLAN NOTICES, V44, P13, DOI 10.1145/1543134.1411289
   Shikuma N, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(3:10)2008
   Stefan D, 2011, ACM SIGPLAN NOTICES, V46, P95, DOI 10.1145/2096148.2034688
   Tse S, 2004, ACM SIGPLAN NOTICES, V39, P115, DOI 10.1145/1016848.1016868
   Vassena M, 2018, J LOG ALGEBR METHODS, V95, P148, DOI 10.1016/j.jlamp.2017.12.003
   Vassena M, 2016, PROCEEDINGS OF THE 2016 ACM WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS'16), P15, DOI 10.1145/2993600.2993608
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
NR 22
TC 7
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 89
DI 10.1145/3341693
PG 22
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900012
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Laurel, J
   Qian, SB
   Singh, G
   Misailovic, S
AF Laurel, Jacob
   Qian, Siyuan Brant
   Singh, Gagandeep
   Misailovic, Sasa
TI Synthesizing Precise Static Analyzers for Automatic Differentiation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Differentiable Programming; Abstract Interpretation
AB We present Pasado, a technique for synthesizing precise static analyzers for Automatic Differentiation. Our technique allows one to automatically construct a static analyzer specialized for the Chain Rule, Product Rule, and Quotient Rule computations for Automatic Differentiation in a way that abstracts all of the nonlinear operations of each respective rule simultaneously. By directly synthesizing an abstract transformer for the composite expressions of these 3 most common rules of AD, we are able to obtain significant precision improvement compared to prior works which compose standard abstract transformers together suboptimally. We prove our synthesized static analyzers sound and additionally demonstrate the generality of our approach by instantiating these AD static analyzers with different nonlinear functions, different abstract domains (both intervals and zonotopes) and both forward-mode and reverse-mode AD.
   We evaluate Pasado on multiple case studies, namely computing certified bounds on a neural network's local Lipschitz constant, soundly bounding the sensitivities of financial models, certifying monotonicity, and lastly, bounding sensitivities of the solutions of differential equations from climate science and chemistry for verified ranges of initial conditions and parameters. The local Lipschitz constants computed by Pasado on our largest CNN are up to 2750x more precise compared to the existing state-of-the-art zonotope analysis. Additionally, the bounds obtained on the sensitivities of the climate, chemical, and financial differential equation solutions are between 1.31 - 2.81x more precise (on average) compared to a state-of-the-art zonotope analysis.
C1 [Laurel, Jacob; Qian, Siyuan Brant; Singh, Gagandeep; Misailovic, Sasa] Univ Illinois, Champaign, IL 61820 USA.
   [Qian, Siyuan Brant] Zhejiang Univ, Hangzhou, Peoples R China.
   [Singh, Gagandeep] VMware Res, Palo Alto, CA USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   Zhejiang University; VMware, Inc.
RP Laurel, J (corresponding author), Univ Illinois, Champaign, IL 61820 USA.
EM jlaurel2@illinois.edu; siyuanq4@illinois.edu; ggnds@illinois.edu;
   misailo@illinois.edu
OI Qian, Siyuan/0009-0007-9574-8423; Laurel, Jacob/0000-0002-4065-4063;
   Singh, Gagandeep/0000-0002-9299-2961
FU NSF [CCF-1846354, CCF-1956374, CCF-2008883, CNS-2148583, CCF-2217144,
   CCF-2238079]; Google research scholar award; Sloan UCEM Graduate
   Scholarship
FX We thank the anonymous reviewers for their comments. This research was
   supported in part by NSF Grants No. CCF-1846354, CCF-1956374,
   CCF-2008883, CNS-2148583, CCF-2217144, and CCF-2238079, a gift from
   Meta, Google research scholar award, and a Sloan UCEM Graduate
   Scholarship.
CR Adje Assale., 2010, EUR S PROGR
   Bangaru SP, 2021, ACM T GRAPHIC, V40, DOI 10.1145/3450626.3459775
   Becker B., 1996, Adult, DOI DOI 10.24432/C5XW20
   Bendtsen C., 1996, FADBAD, a Flexible C++ Package for Automatic Differentiation
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Du TY, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P516, DOI 10.1145/3460120.3484538
   Fryazinov O, 2010, COMPUT GRAPH-UK, V34, P708, DOI 10.1016/j.cag.2010.07.003
   Ghorbal K, 2009, LECT NOTES COMPUT SC, V5643, P627, DOI 10.1007/978-3-642-02658-4_47
   Griewank A, 2008, OTHER TITL APPL MATH, V105, P1
   Gupta A, 2021, AAAI CONF ARTIF INTE, V35, P11536
   Helaire Thibault, 2021, affapy library
   Hovland Paul D, 2005, Journal of Physics: Conference Series
   Hückelheim J, 2022, PROC INT CONF PARAL, DOI 10.1145/3545008.3545089
   Hückelheim J, 2018, LECT NOTES COMPUT SC, V11002, P205, DOI 10.1007/978-3-319-99725-4_14
   Jordan M., 2021, P MACHINE LEARNING R, P5118
   Jordan M., 2020, NEURIPS
   Kaper H., 2013, MATH CLIMATE
   Karpathy Andrej., 2020, micrograd library
   Kitchin John, 2018, A differentiable ODE integrator for sensitivity analysis
   Ko CY, 2019, PR MACH LEARN RES, V97
   Kochdumper N, 2022, Arxiv, DOI arXiv:2207.02715
   Laurel J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563324
   Laurel J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498718
   Laurel Jacob, 2023, Appendix for Synthesizing Precise Static Analyzers for Automatic Differentiation
   Laurel Jacob, 2023, Artifact for Synthesizing Precise Static Analyzers for Automatic Differentiation, DOI [10.5281/zenodo.8332724, DOI 10.5281/ZENODO.8332724]
   Lerman Samuel, 2021, IEEECVF INT C COMPUT, P1224
   Ma YB, 2021, IEEE HIGH PERF EXTR, DOI 10.1109/HPEC49654.2021.9622796
   Mametjanov Azamat, 2012, Recent Advances in Algorithmic Differentiation
   Miné A, 2004, LECT NOTES COMPUT SC, V2986, P3
   Misra A, 2023, DES AUT TEST EUROPE, DOI 10.23919/DATE56975.2023.10137324
   Paszke A, 2019, ADV NEUR IN, V32
   Paulsen B, 2022, LECT NOTES COMPUT SC, V13243, P357, DOI 10.1007/978-3-030-99524-9_19
   Paulsen Brandon, 2022, INT C COMP AID VER
   Rosenberg Harrison., 2023, 32 USENIX SEC S USEN
   Ryou W, 2021, LECT NOTES COMPUT SC, V12759, P225, DOI 10.1007/978-3-030-81685-8_10
   Saltelli A, 2005, CHEM REV, V105, P2811, DOI 10.1021/cr040659d
   Shi Zhouxing, 2020, ICLR
   Shi Zifan, 2022, Advances in Neural Information Processing Systems, P2
   Singh G., 2019, Advances in Neural Information Processing Systems, V32
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Singh G, 2018, ADV NEUR IN, V31
   Singh G, 2017, ACM SIGPLAN NOTICES, V52, P46, DOI 10.1145/3093333.3009885
   Singh Gagandeep, 2019, INT C LEARN REPR
   Sivaraman Aishwarya., 2020, Neural Information Processing Systems
   Stolfi J., 1997, Self-Validated Numerical Methods and Applications; Monograph for the 21st Brazilian Mathematics Colloquium (CBM'97)
   Turner James Paul, 2020, Ph. D. Dissertation
   Vassiliadis V, 2016, INT SYM CODE GENER, P182, DOI 10.1145/2854038.2854058
   Walsh J., 2015, The UMAP Journal, V36, P325
   Wang Y, 2022, P AMER CONTR CONF, P1485, DOI 10.23919/ACC53348.2022.9867181
NR 50
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 291
DI 10.1145/3622867
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100071
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Linvill, K
   Kaki, G
   Wustrow, E
AF Linvill, Kirby
   Kaki, Gowtham
   Wustrow, Eric
TI Verifying Indistinguishability of Privacy-Preserving Protocols
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Protocol Verification; Indistinguishability; Privacy; Concurrency;
   Synchronization
ID SECURITY; IMPLEMENTATIONS; SHARE
AB Internet users rely on the protocols they use to protect their private information including their identity and the websites they visit. Formal verification of these protocols can detect subtle bugs that compromise these protections at design time, but is a challenging task as it involves probabilistic reasoning about random sampling, cryptographic primitives, and concurrent execution. Existing approaches either reason about symbolic models of the protocols that sacrifice precision for automation, or reason about more precise computational models that are harder to automate and require cryptographic expertise. In this paper we propose a novel approach to verifying privacy-preserving protocols that is more precise than symbolic models yet more accessible than computational models. Our approach permits direct-style proofs of privacy, as opposed to indirect game-based proofs in computational models, by formalizing privacy as indistinguishability of possible network traces induced by a protocol. We ease automation by leveraging insights from the distributed systems verification community to create sound synchronous models of concurrent protocols. Our verification framework is implemented in F* as a library we call WALDO. We describe two large case studies of using WALDO to verify indistinguishability; one on the Encrypted Client Hello (ECH) extension of the TLS protocol and another on a Private Information Retrieval (PIR) protocol. We uncover subtle flaws in the TLS ECH specification that were missed by other models.
C1 [Linvill, Kirby; Kaki, Gowtham; Wustrow, Eric] Univ Colorado, Boulder, CO 80309 USA.
C3 University of Colorado System; University of Colorado Boulder
RP Linvill, K (corresponding author), Univ Colorado, Boulder, CO 80309 USA.
EM kirby.linvill@colorado.edu; gowtham.kaki@colorado.edu;
   ewust@colorado.edu
OI Kaki, Gowtham/0000-0002-4189-3189
CR Abadi M, 1999, J ACM, V46, P749, DOI 10.1145/324133.324266
   AlFardan NJ, 2013, P IEEE S SECUR PRIV, P526, DOI 10.1109/SP.2013.42
   Almeida JB, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P63, DOI 10.1145/3319535.3354228
   Aviram N, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P689
   Backes M, 2002, LECT NOTES COMPUT SC, V2502, P1
   Barbosa Manuel, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P777, DOI 10.1109/SP40001.2021.00008
   Barthe G, 2011, LECT NOTES COMPUT SC, V6841, P71, DOI 10.1007/978-3-642-22792-9_5
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Basin D, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P1383, DOI 10.1145/3243734.3243846
   BEAVER D, 1990, LECT NOTES COMPUT SC, V415, P37
   Beimel A, 2012, ANN IEEE CONF COMPUT, P258, DOI 10.1109/CCC.2012.23
   Bertot Y., 2010, INTERACTIVE THEOREM
   Beurdouche B, 2017, COMMUN ACM, V60, P99, DOI 10.1145/3023357
   Bhargavan K, 2021, 2021 IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P 2021), P523, DOI 10.1109/EuroSP51992.2021.00042
   Bhargavan K, 2017, P IEEE S SECUR PRIV, P483, DOI 10.1109/SP.2017.26
   Bhargavan K, 2014, P IEEE S SECUR PRIV, P98, DOI 10.1109/SP.2014.14
   Bhargavan K, 2013, P IEEE S SECUR PRIV, P445, DOI 10.1109/SP.2013.37
   Bhargavan V., 2022, ACM SIGSAC C COMPUTC, P365, DOI DOI 10.1145/3548606.3559360
   Blanchet B, 2016, Foundations and Trends in Privacy and Security, V1, P1, DOI DOI 10.1561/3300000004
   Blanchet B, 2008, IEEE T DEPEND SECURE, V5, P193, DOI 10.1109/TDSC.2007.1005
   Broberg Niklas, 2013, Programming Languages and Systems. 11th Asian Symposium, APLAS 2013. Proceedings: LNCS 8301, P217, DOI 10.1007/978-3-319-03542-0_16
   Chai Z., 2019, USENIX WORKSH FREE O
   Chor B, 1998, J ACM, V45, P965, DOI 10.1145/293347.293350
   Cortier V, 2018, 2018 3RD IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P 2018), P430, DOI 10.1109/EuroSP.2018.00037
   Cortier V, 2017, J COMPUT SECUR, V25, P21, DOI 10.3233/JCS-15777
   Cremers C, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1773, DOI 10.1145/3133956.3134063
   Cremers C, 2016, P IEEE S SECUR PRIV, P470, DOI 10.1109/SP.2016.35
   Delignat-Lavaud A, 2017, P IEEE S SECUR PRIV, P463, DOI 10.1109/SP.2017.58
   Di Crescenzo G, 2000, LECT NOTES COMPUT SC, V1807, P122
   DOLEV D, 1983, IEEE T INFORM THEORY, V29, P198, DOI 10.1109/TIT.1983.1056650
   Fournet C, 2008, ACM SIGPLAN NOTICES, V43, P323, DOI 10.1145/1328897.1328478
   Gatlan Sergiu, 2019, Bleeping Computer,Feb
   Gertner Y., 1998, Proceedings of the Thirtieth Annual ACM Symposium on Theory of Computing, P151, DOI 10.1145/276698.276723
   Gibbons J, 2011, ACM SIGPLAN NOTICES, V46, P2, DOI 10.1145/2034574.2034777
   Girol G, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P1857
   Gleissenthall KV, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290372
   Gray J. W., 1992, Journal of Computer Security, V1, P255, DOI DOI 10.3233/JCS-1992-13-405
   Grimm N., 2018, P 7 ACM SIGPLAN INT, P130
   Ishai Y, 2005, LECT NOTES COMPUT SC, V3378, P445
   Kobeissi N, 2019, 2019 4TH IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P), P356, DOI 10.1109/EuroSP.2019.00034
   Kobeissi N, 2017, 2017 IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P), P435, DOI 10.1109/EuroSP.2017.38
   Kozyri Elisavet, 2022, Privacy and Security, V3, P1, DOI [10.1561/3300000008, DOI 10.1561/3300000008]
   Laud P, 2003, LECT NOTES COMPUT SC, V2618, P159
   Li P, 2010, THEOR COMPUT SCI, V411, P1974, DOI 10.1016/j.tcs.2010.01.025
   Lipp B, 2019, 2019 4TH IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P), P231, DOI 10.1109/EuroSP.2019.00026
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Meier Simon, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P696, DOI 10.1007/978-3-642-39799-8_48
   Moller Bodo, 2014, Security Advisory, V21, P34
   O'Neill K. R., 2006, 19th IEEE Computer Security Foundations Workshop
   Rescorla Eric., 2022, TLS Encrypted Client Hello
   Rizzo Juliano, 2012, EKOPARTY SEC C
   Sabelfeld A, 2005, 18TH IEEE COMPUTER SECURITY FOUNDATIONS WORKSHOP, PROCEEDINGS, P255, DOI 10.1109/CSFW.2005.15
   Schwartz B., 2021, Internet-Draft draft-ietf-dnsop-svcb-https-08
   SHAMIR A, 1979, COMMUN ACM, V22, P612, DOI 10.1145/359168.359176
   Smith Geoffrey., 2006, Proceedings of the Fourth ACM Workshop on Formal Methods in Security, FMSE'06, P33, DOI [10.1145/1180337.1180341, DOI 10.1145/1180337.1180341]
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   The Coq Development Team, 2023, Zenodo, DOI 10.5281/ZENODO.1003420
   U.S. CIO Council, 2016, About us
   Volpano D., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P268, DOI 10.1145/325694.325729
   Volpano D, 2000, P IEEE CSFW, P246, DOI 10.1109/CSFW.2000.856941
   W3C Technical Architecture Group, 2021, Web
   Waye L, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1893, DOI 10.1145/3133956.3134036
NR 62
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 273
DI 10.1145/3622849
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100053
OA gold
DA 2024-07-18
ER

PT J
AU Zhang, Q
   Zhou, CJ
   Xu, YW
   Yin, ZJ
   Wang, MZ
   Su, Z
   Sun, CN
   Jiang, Y
   Sun, JG
AF Zhang, Quan
   Zhou, Chijin
   Xu, Yiwen
   Yin, Zijing
   Wang, Mingzhe
   Su, Zhuo
   Sun, Chengnian
   Jiang, Yu
   Sun, Jiaguang
TI Building Dynamic System Call Sandbox with Partial Order Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE System Call Sandbox; Program Analysis; Attack Surface Reduction
AB Attack surface reduction is a security technique that secures the operating system by removing the unnecessary code or features of a program. By restricting the system calls that programs can use, the system call sandbox is able to reduce the exposed attack surface of the operating system and prevent attackers from damaging it through vulnerable programs. Ideally, programs should only retain access to system calls they require for normal execution. Many researchers focus on adopting static analysis to automatically restrict the system calls for each program. However, these methods do not adjust the restriction policy along with program execution. Thus, they need to permit all system calls required for program functionalities.
   We observe that some system calls, especially security-sensitive ones, are used a few times in certain stages of a program's execution and then never used again. This motivates us to minimize the set of required system calls dynamically. In this paper, we propose DYNBOX, which gradually disables access to unnecessary system calls throughout the program's execution. To accomplish this, we utilize partial order analysis to transform the program into a partially ordered graph, which enables efficient identification of the necessary system calls at any given point during program execution. Once a system call is no longer required by the program, DYNBOX can restrict it immediately. To evaluate DYNBOX, we applied it to seven widely-used programs with an average of 615 KLOC, including web servers and databases. With partial order analysis, DYNBOX restricts an average of 23.50, 16.86, and 15.89 more system calls than the state-of-the-art Chestnut, Temporal Specialization, and the configuration-aware sandbox, C2C, respectively. For mitigating malicious exploitations, on average, DYNBOX defeats 83.42% of 1726 exploitation payloads with only a 5.07% overhead.
C1 [Zhang, Quan; Zhou, Chijin; Xu, Yiwen; Yin, Zijing; Wang, Mingzhe; Su, Zhuo; Jiang, Yu; Sun, Jiaguang] Tsinghua Univ, Sch Software, BNRist, Beijing, Peoples R China.
   [Sun, Chengnian] Univ Waterloo, Cheriton Sch Comp Sci, Waterloo, ON, Canada.
C3 Tsinghua University; University of Waterloo
RP Jiang, Y (corresponding author), Tsinghua Univ, Sch Software, BNRist, Beijing, Peoples R China.
EM zhangq20@mails.tsinghua.edu.cn; tlock.chijin@gmail.com;
   xuyiwen14@gmail.com; Aurora@europe.com; wmzhere@gmail.com;
   suzcpp@gmail.com; cnsun@uwaterloo.ca; jiangyu198964@126.com;
   sthuse20@outlook.com
RI Zhou, Chijin/AAR-7635-2021
OI Zhou, Chijin/0000-0002-6446-247X; Jiang, Yu/0000-0003-0955-503X; Wang,
   Mingzhe/0000-0002-2153-6766; Sun, Chengnian/0000-0002-0862-2491
FU National Key Research and Development Project [2022YFB3104000,
   No2021QY0604]; NSFC Program [62022046, 92167101, U1911401, 62021002,
   U20A6003]
FX This research is sponsored in part by the National Key Research and
   Development Project (No. 2022YFB3104000, No2021QY0604) and NSFC Program
   (No. 62022046, 92167101, U1911401, 62021002, U20A6003).
CR Abadi M, 2009, ACM T INFORM SYST SE, V13, DOI 10.1145/1609956.1609960
   Agadakos I, 2019, 35TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSA), P70, DOI 10.1145/3359789.3359823
   Quach A, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P869
   [Anonymous], 2012, 21 USENIX SEC S USEN
   BENSOUSSAN A, 1972, COMMUN ACM, V15, P308, DOI 10.1145/355602.361306
   Canella C, 2021, PROCEEDINGS OF THE 2021 CLOUD COMPUTING SECURITY WORKSHOP, CCSW 2021, P139, DOI 10.1145/3474123.3486762
   DeMarinis K., 2020, P INT S RES ATT INTR, P459
   Ghavamnia Seyedhamed, 2022, CCS '22: Proceedings of the 2022 ACM SIGSAC Conference on Computer and Communications Security, P1243, DOI 10.1145/3548606.3559366
   Ghavamnia S, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P1749
   Goldberg Ian, 1996, P 6 USENIX SEC S SAN
   Hu XY, 2018, 2018 IEEE CYBERSECURITY DEVELOPMENT CONFERENCE (SECDEV 2018), P45, DOI 10.1109/SecDev.2018.00014
   JACHNER J, 1984, IEEE T SOFTWARE ENG, V10, P432, DOI 10.1109/TSE.1984.5010256
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Li YW, 2017, 2017 USENIX ANNUAL TECHNICAL CONFERENCE (USENIX ATC '17), P1
   LibSeccomp, 2023, libSeccomp
   Linux Kernel, 2022, Seccomp BPF
   LLVM, 2022, Link Time Optimization
   MCCANNE S, 1993, PROCEEDINGS OF THE WINTER 1993 USENIX CONFERENCE, P259
   Merkel D., 2014, LINUX J, V2014, P2, DOI DOI 10.5555/2600239.2600241
   MITRE, 2021, CVE-2021-41773
   MITRE, 2022, CVE
   MITRE, 2016, CVE-2016-0746
   Mulliner C., 2015, Breaking Payloads with Runtime Code Stripping and Image Freezing
   Nagarakatte S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P245, DOI 10.1145/1542476.1542504
   Narayan S, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P699
   Pailoor S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428203
   Pal Neeraj, 2018, Pledge: OpenBSD's defensive approach to OS Security
   Park S, 2019, PROCEEDINGS OF THE 2019 USENIX ANNUAL TECHNICAL CONFERENCE, P241
   Phoronix Test Suite, 2023, Phoronix Test Suite
   Provos Niels, 2003, P 12 USENIX SEC S WA
   Rajagopalan M, 2005, I C DEPEND SYS NETWO, P358, DOI 10.1109/DSN.2005.23
   Rapid7, 2022, Metasploit
   Reis C, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1661
   Schuster F, 2015, P IEEE S SECUR PRIV, P745, DOI 10.1109/SP.2015.51
   Sekar R., 2000, P NETW DISTR SYST SE
   Shacham H, 2007, CCS'07: PROCEEDINGS OF THE 14TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P552
   Shell Storm, 2022, Shell-storm
   Shoshitaishvili Y, 2016, P IEEE S SECUR PRIV, P138, DOI 10.1109/SP.2016.17
   Sui YL, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P265, DOI 10.1145/2892208.2892235
   Szekeres L, 2013, P IEEE S SECUR PRIV, P48, DOI 10.1109/SP.2013.13
   The Linux Documentation Project, 2023, Dynamic Loaded (DL) Libraries
   Wagner D, 2001, P IEEE S SECUR PRIV, P156, DOI 10.1109/SECPRI.2001.924296
   Younan Y, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187679
   Zalewski Michal., 2016, American Fuzzy Lop-Whitepaper
   Zeng Qiang, 2013, Tailored Application-specific System Call Tables
   Zhang Q, 2023, PROCEEDINGS OF THE 32ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, ISSTA 2023, P753, DOI 10.1145/3597926.3598093
   Zhang Q, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P127, DOI 10.1145/3460319.3464809
   Zhang Quan, 2023, DynBox
   Zhang Quan, 2023, Zenodo, DOI [10.5281/zenodo.8328524, DOI 10.5281/ZENODO.8328524]
   Zhou CJ, 2022, PROCEEDINGS OF THE 30TH ACM JOINT MEETING EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, ESEC/FSE 2022, P1135, DOI 10.1145/3540250.3549107
   Zhou CJ, 2023, P IEEE S SECUR PRIV, P2584, DOI 10.1109/SP46215.2023.10179372
NR 51
TC 0
Z9 0
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 266
DI 10.1145/3622842
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100046
OA gold
DA 2024-07-18
ER

PT J
AU Bertram, N
   Levinson, A
   Hsu, J
AF Bertram, Noah
   Levinson, Alex
   Hsu, Justin
TI Cutting the Cake: A Language for Fair Division
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Fair division; automated verification
AB The fair division literature in economics considers how to divide resources between multiple agents such that the allocation is envy-free: each agent receives their favorite piece. Researchers have developed a variety of fair division protocols for the most standard setting, where the agents want to split a single item, however, the protocols are highly intricate and the proofs of envy-freeness involve tedious case analysis. We propose Slice, a domain specific language for fair-division. Programs in our language can be converted to logical formulas encoding envy-freeness and other target properties. Then, the constraints can be dispatched to automated solvers. We prove that our constraint generation procedure is sound and complete. We also report on a prototype implementation of Slice, which we have used to automatically check envy-freeness for several protocols from the fair division literature.
C1 [Bertram, Noah; Hsu, Justin] Cornell Univ, Gates Hall, Ithaca, NY 14850 USA.
   [Levinson, Alex] Cornell Univ, Ithaca, NY USA.
C3 Cornell University; Cornell University
RP Bertram, N (corresponding author), Cornell Univ, Gates Hall, Ithaca, NY 14850 USA.
OI Hsu, Justin/0000-0002-8953-7060; Bertram, Noah/0000-0001-9842-7624
FU Cornell University; NSF [1943130]
FX We thank the anonymous reviewers and the shepherd for their close
   reading and helpful suggestions. This work benefited from several rounds
   of feedback from the PL Discussion Group (PLDG) at Cornell. This work
   was partially supported by Cornell University and the NSF (Award
   #1943130).
CR Aiken A, 1999, SCI COMPUT PROGRAM, V35, P79, DOI 10.1016/S0167-6423(99)00007-6
   Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7814374
   Aziz H, 2016, ACM S THEORY COMPUT, P454, DOI 10.1145/2897518.2897522
   Aziz H, 2016, ANN IEEE SYMP FOUND, P416, DOI 10.1109/FOCS.2016.52
   Bagnall A, 2017, J FORMALIZ REASON, V10, P67
   Bai W, 2014, LECT NOTES COMPUT SC, V8348, P23, DOI 10.1007/978-3-319-07602-7_4
   Balkanski E, 2014, AAAI CONF ARTIF INTE, P566
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Barthe G, 2015, ACM SIGPLAN NOTICES, V50, P55, DOI [10.1145/2775051.2677000, 10.1145/10.1145/2676726.2677000]
   Barthe Gilles., 2016, Conference on Web and Internet Economics (WINE), Montreal, Quebec (Lecture Notes in Computer Science), V10123, P273, DOI DOI 10.1007/978-3-662-54110-4_20
   Bertram N, 2023, Arxiv, DOI [arXiv:2304.04642, 10.48550/arXiv.2304.04642, DOI 10.48550/ARXIV.2304.04642]
   Brams Steven J, 2006, NOTICES AMS, V53, P1314
   Brƒnzei S, 2018, Arxiv, DOI arXiv:1705.02946
   Brânzei S, 2016, AAAI CONF ARTIF INTE, P411
   Caminati MarcoB., 2015, Proceedings of the Sixteenth ACM Conference on Economics and Computation, EC'15, P547, DOI [10.1145/2764468.2764511, DOI 10.1145/2764468.2764511]
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Merten Samuel, 2018, LECT NOTES COMPUTER, V10801, P561, DOI [10.1007/978-3-319-89884-1_20, DOI 10.1007/978-3-319-89884-1_20]
   Robertson J., 1998, CAKE CUTTING ALGORIT
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Segal-Halevi E, 2016, ACM T ALGORITHMS, V13, DOI 10.1145/2988232
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   Torlak Emina, 2013, P 2013 ACM INT S NEW, P135, DOI DOI 10.1145/2509578.2509586
   Woeginger GJ, 2007, DISCRETE OPTIM, V4, P213, DOI 10.1016/j.disopt.2006.07.003
NR 24
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 179
DI 10.1145/3591293
PG 22
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900075
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Chen, YF
   Chung, KM
   Lengál, O
   Lin, JA
   Tsai, WL
   Yen, DD
AF Chen, Yu-Fang
   Chung, Kai-Min
   Lengal, Ondrej
   Lin, Jyun-Ao
   Tsai, Wei-Lun
   Yen, Di-De
TI An Automata-Based Framework for Verification and Bug Hunting in Qantum
   Circuits
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantum circuits; tree automata; verification
ID EQUIVALENCE-CHECKING; QUANTUM; ALGORITHMS
AB We introduce a new paradigm for analysing and finding bugs in quantum circuits. In our approach, the problem is given by a triple {P} C {Q} and the question is whether, given a set P of quantum states on the input of a circuit C, the set of quantum states on the output is equal to (or included in) a set Q. While this is not suitable to specify, e.g., functional correctness of a quantum circuit, it is sufficient to detect many bugs in quantum circuits. We propose a technique based on tree automata to compactly represent sets of quantum states and develop transformers to implement the semantics of quantum gates over this representation. Our technique computes with an algebraic representation of quantum states, avoiding the inaccuracy of working with floating-point numbers. We implemented the proposed approach in a prototype tool and evaluated its performance against various benchmarks from the literature. The evaluation shows that our approach is quite scalable, e.g., we managed to verify a large circuit with 40 qubits and 141,527 gates, or catch bugs injected into a circuit with 320 qubits and 1,758 gates, where all tools we compared with failed. In addition, our work establishes a connection between quantum program verification and automata, opening new possibilities to exploit the richness of automata theory and automata-based verification in the world of quantum computing.
C1 [Chen, Yu-Fang; Chung, Kai-Min; Tsai, Wei-Lun] Acad Sinica, Inst Informat Sci, Taipei, Taiwan.
   [Lengal, Ondrej] Brno Univ Technol, Fac Informat Technol, Brno, Czech Republic.
   [Lin, Jyun-Ao] Acad Sinica, Taipei, Taiwan.
   Natl Taiwan Univ, Grad Inst Elect Engn, Taipei, Taiwan.
   [Yen, Di-De] Max Planck Inst Software Syst, Saarbrucken, Germany.
C3 Academia Sinica - Taiwan; Brno University of Technology; Academia Sinica
   - Taiwan; National Taiwan University; Max Planck Society
RP Chen, YF (corresponding author), Acad Sinica, Inst Informat Sci, Taipei, Taiwan.
EM yfc@iis.sinica.edu.tw; kmchung@iis.sinica.edu.tw; lengal@fit.vutbr.cz;
   jyalin@gmail.com; alan23273850@gmail.com; bottlebottle13@gmail.com
OI Yen, Di-De/0000-0003-0045-9594; Tsai, Wei-Lun/0009-0003-5832-0867;
   Lengal, Ondrej/0000-0002-3038-5875
FU Czech Ministry of Education, Youth and Sports of the ERC.CZ programme
   [LL1908]; Czech Science Foundation [GA23-07565S]; FIT BUT internal
   project [FIT-S-23-8151]; NSTC QC project [NSTC 111-2119-M-001-004-]
FX We thank the reviewers for their in-depth remarks that helped us improve
   the quality of the paper and the artifact committee members for their
   helpful suggestions about the artifact. This material is based on a work
   supported by the Czech Ministry of Education, Youth and Sports project
   LL1908 of the ERC.CZ programme; the Czech Science Foundation project
   GA23-07565S; the FIT BUT internal project FIT-S-23-8151; and the NSTC QC
   project under Grant no. NSTC 111-2119-M-001-004-.
CR Abdulla P. A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P555
   Abdulla PA, 2007, INT J FOUND COMPUT S, V18, P699, DOI 10.1142/S0129054107004929
   Abdulla ParoshA., 2008, International Conference on Tools and Algorithms for the Construction and Analysis of Systems, P93, DOI 10.1007/978- 3-540- 78800-3_8
   Aharonov D., 2003, arXiv, DOI [10.48550/arXiv.quantph/0301040, DOI 10.48550/ARXIV.QUANTPH/0301040]
   Altenkirch T, 2005, IEEE S LOG, P249
   Amy M, 2019, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.287.1
   Amy Matthew, 2019, Formal Methods in Quantum Circuit Design
   [Anonymous], 2000, Lecture Notes in Computer Science
   [Anonymous], 2022, QCEC REPOSITORY ISSU
   Anticoli L, 2016, LECT NOTES COMPUT SC, V9720, P213, DOI 10.1007/978-3-319-40578-0_16
   Arute F, 2019, NATURE, V574, P505, DOI 10.1038/s41586-019-1666-5
   Bernstein E., 1993, Proceedings of the Twenty-Fifth Annual ACM Symposium on the Theory of Computing, P11, DOI 10.1145/167088.167097
   Biamonte J, 2017, NATURE, V549, P195, DOI 10.1038/nature23474
   Bouajjani Ahmed, 2012, International Journal on Software Tools for Technology Transfer, V14, P167, DOI 10.1007/s10009-011-0205-y
   Boykin PO, 2000, INFORM PROCESS LETT, V75, P101, DOI 10.1016/S0020-0190(00)00084-3
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Burgholzer L, 2021, ASIA S PACIF DES AUT, P767, DOI 10.1145/3394885.3431590
   Burgholzer L, 2021, IEEE T COMPUT AID D, V40, P1810, DOI 10.1109/TCAD.2020.3032630
   Bustan D., 2003, ACM Transactions on Computational Logic, V4, P181, DOI 10.1145/635499.635502
   Cao YD, 2019, CHEM REV, V119, P10856, DOI 10.1021/acs.chemrev.8b00803
   Chareton C, 2021, LECT NOTES COMPUT SC, V12648, P148, DOI 10.1007/978-3-030-72019-3_6
   Chen TF, 2022, 2022 IEEE INTERNATIONAL CONFERENCE ON QUANTUM COMPUTING AND ENGINEERING (QCE 2022), P594, DOI 10.1109/QCE53715.2022.00082
   Chen Yu-Fang, 2023, Zenodo, DOI 10.5281/ZENODO.7811406
   Chen YF, 2023, Arxiv, DOI [arXiv:2301.07747, 10.48550/arxiv.2301.07747, DOI 10.48550/ARXIV.2301.07747]
   Chen YF, 2017, IEEE S LOG
   Chen YF, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P76, DOI 10.23919/FMCAD.2017.8102244
   Chen YF, 2016, PROC INT CONF SOFTW, P714, DOI 10.1145/2884781.2884860
   Ciliberto C, 2018, P ROY SOC A-MATH PHY, V474, DOI 10.1098/rspa.2017.0551
   Coecke B, 2011, NEW J PHYS, V13, DOI 10.1088/1367-2630/13/4/043016
   Comon H., 2007, TREE AUTOMATA TECHNI
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   D'Antoni L, 2017, LECT NOTES COMPUT SC, V10426, P47, DOI 10.1007/978-3-319-63387-9_3
   D'Antoni L, 2015, ACM T PROGR LANG SYS, V38, DOI 10.1145/2791292
   Dawson CM, 2006, QUANTUM INFORM COMPU, V6, P81
   Ettinger M, 2004, INFORM PROCESS LETT, V91, P43, DOI 10.1016/j.ipl.2004.01.024
   Fagan A, 2019, ELECTRON P THEOR COM, P85, DOI 10.4204/EPTCS.287.5
   Felt E., 1993, Proceedings EURO-DAC '93. European Design Automation Conference with EURO-VHDL '93 (Cat. No.93CH3352-2), P130, DOI 10.1109/EURDAC.1993.410627
   Feng Y, 2015, LECT NOTES COMPUT SC, V9109, P265, DOI 10.1007/978-3-319-19249-9_17
   Feng Y, 2013, J COMPUT SYST SCI, V79, P1181, DOI 10.1016/j.jcss.2013.04.002
   Feng Yuan, 2021, ACM T QUANTUM COMPUT, V2, P1, DOI 10.1145/3456877
   Feng Yuan, 2017, 28 INT C CONCURRENCY, DOI [10.4230/LIPIcs.CONCUR.2017.35, DOI 10.4230/LIPICS.CONCUR.2017.35]
   GMP, 2022, GNU MULT PREC ARITHM
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Hattori W, 2018, LECT NOTES COMPUT SC, V11106, P228, DOI 10.1007/978-3-319-99498-7_16
   Heizmann M, 2018, LECT NOTES COMPUT SC, V10806, P447, DOI 10.1007/978-3-319-89963-3_30
   Hietala K, 2019, Arxiv, DOI [arXiv:1904.06319, 10.48550/arXiv.1904.06319, DOI 10.48550/ARXIV.1904.06319]
   Itoko T, 2020, INTEGRATION, V70, P43, DOI 10.1016/j.vlsi.2019.10.004
   Janzing D, 2005, INT J QUANTUM INF, V3, P463, DOI 10.1142/S0219749905001067
   Lengál O, 2012, LECT NOTES COMPUT SC, V7214, P79, DOI 10.1007/978-3-642-28756-5_7
   Liu JY, 2019, LECT NOTES COMPUT SC, V11562, P187, DOI 10.1007/978-3-030-25543-5_12
   Livinskii V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428264
   Massey P, 2005, GECCO 2005: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOLS 1 AND 2, P1657
   Mateus Paulo, 2009, Temporal Logics for Reasoning about Quantum Systems, P389, DOI [10.1017/CBO9781139193313.011, DOI 10.1017/CBO9781139193313.011]
   Moll N, 2018, QUANTUM SCI TECHNOL, V3, DOI 10.1088/2058-9565/aab822
   Nam Y, 2018, NPJ QUANTUM INFORM, V4, DOI 10.1038/s41534-018-0072-4
   Neider Daniel, 2013, NASA Formal Methods. 5th International Symposium, NFM 2013. Proceedings, P16, DOI 10.1007/978-3-642-38088-4_2
   Nielsen M. A, 2011, Quantum Computation and Quantum Information: 10th Anniversary Edition
   Niemann P, 2016, IEEE T COMPUT AID D, V35, P86, DOI 10.1109/TCAD.2015.2459034
   Pednault E, 2020, Arxiv, DOI arXiv:1710.05867
   Peham Tom, 2022, ACMIEEE DAC, P517, DOI 10.1145/3489517.3530480
   Perdrix S, 2008, LECT NOTES COMPUT SC, V5079, P270
   Sainoladas V, 2008, LECT NOTES COMPUT SC, V5193, P720, DOI 10.1007/978-3-540-87744-8_60
   SHOR PW, 1994, AN S FDN CO, P124
   Soeken M, 2010, IEEE INT SYMP DESIGN, P341, DOI 10.1109/DDECS.2010.5491754
   Spector Lee, 2006, AUT QUANT COMP PROGR
   Treinish Matthew, 2023, Zenodo
   Tsai YH, 2021, DES AUT CON, P439, DOI 10.1109/DAC18074.2021.9586191
   Unruh D., 2019, 2019 34 ANN ACM IEEE, P1
   Viamontes GR, 2007, IEEE IC CAD, P69, DOI 10.1109/ICCAD.2007.4397246
   Viamontes GF, 2009, QUANTUM CIRCUIT SIMULATION, P1, DOI 10.1007/978-90-481-3065-8
   Wecker D, 2014, Arxiv, DOI arXiv:1402.4467
   Wei CY, 2022, PROCEEDINGS OF THE 59TH ACM/IEEE DESIGN AUTOMATION CONFERENCE, DAC 2022, P523, DOI 10.1145/3489517.3530481
   Wille R, 2019, DES AUT TEST EUROPE, P1234, DOI 10.23919/DATE.2019.8715261
   Wille R, 2008, INT SYM MVL, P220, DOI 10.1109/ISMVL.2008.43
   Xu M, 2022, THEOR COMPUT SCI, V913, P43, DOI 10.1016/j.tcs.2022.01.044
   Xu MK, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P625, DOI 10.1145/3519939.3523433
   Yamashita S, 2010, QUANTUM INF COMPUT, V10, P721
   Yan P, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527316
   Ying M., 2021, Model Checking Quantum Systems: Principles and Algorithms
   Ying MS, 2021, LECT NOTES COMPUT SC, V13047, P23, DOI 10.1007/978-3-030-90870-6_2
   Ying MS, 2014, ACM T COMPUT LOG, V15, DOI 10.1145/2629680
   Ying MS, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2049706.2049708
   Yu F, 2008, LECT NOTES COMPUT SC, V5156, P306
   Yu F, 2011, INT J FOUND COMPUT S, V22, P1909, DOI 10.1142/S0129054111009112
   Yu NK, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P542, DOI 10.1145/3453483.3454061
   Zhou L, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1149, DOI 10.1145/3314221.3314584
   Zulehner A., 2019, ICCAD-IEEE ACM INT, P1, DOI DOI 10.1109/iccad45719.2019.8942057
   Zulehner A, 2019, IEEE T COMPUT AID D, V38, P848, DOI 10.1109/TCAD.2018.2834427
NR 89
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 156
DI 10.1145/3591270
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900052
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Mangipudi, S
   Chuprikov, P
   Eugster, P
   Viering, M
   Savvides, S
AF Mangipudi, Shamiek
   Chuprikov, Pavel
   Eugster, Patrick
   Viering, Malte
   Savvides, Savvas
TI Generalized Policy-Based Noninterference for Efficient
   Confidentiality-Preservation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE language-based security; type system; noninterference; enclave; secure
   computing; homomorphic encryption
AB As more organizations are leveraging third-party cloud and edge data centers to process data efficiently, the issue of preserving data confidentiality becomes increasingly important. In response, numerous security mechanisms have been introduced and promoted in recent years including software-based ones such as homomorphic encryption, as well as hardware-based ones such as Intel SGX and AMD SEV. However these mechanisms vary in their security properties, performance characteristics, availability, and application modalities, making it hard for programmers to judiciously choose and correctly employ the right one for a given data query.
   This paper presents a mechanism-independent approach to distributed confidentiality-preserving data analytics. Our approach hinges on a core programming language which abstracts the intricacies of individual security mechanisms. Data is labeled using custom confidentiality levels arranged along a lattice in order to capture its exact confidentiality constraints. High-level mappings between available mechanisms and these labels are captured through a novel expressive form of security policy. Confidentiality is guaranteed through a type system based on a novel formulation of noninterference, generalized to support our security policy definition. Queries written in a largely security-agnostic subset of our language are transformed to the full language to automatically use mechanisms in an efficient, possibly combined manner, while provably preserving confidentiality in data queries end-to-end. We prototype our approach as an extension to the popular Apache Spark analytics engine, demonstrating the significant versatility and performance benefits of our approach over single hardwired mechanisms - including in existing systems - without compromising on confidentiality.
C1 [Mangipudi, Shamiek; Chuprikov, Pavel; Eugster, Patrick] Univ Svizzera Italiana USI, Lugano, Switzerland.
   [Viering, Malte] Tech Univ Darmstadt, Darmstadt, Germany.
   [Savvides, Savvas] Purdue Univ, W Lafayette, IN USA.
C3 Universita della Svizzera Italiana; Technical University of Darmstadt;
   Purdue University System; Purdue University
RP Mangipudi, S (corresponding author), Univ Svizzera Italiana USI, Lugano, Switzerland.
EM mangish@usi.ch; pavel.chuprikov@usi.ch; eugstp@usi.ch;
   viering@dsp.tu-darmstadt.de; savvas@purdue.edu
OI Chuprikov, Pavel/0000-0002-6673-1143; Mangipudi,
   Shamiek/0000-0002-9510-7665
FU Cisco Research University Funding [2853380]; Hasler Foundation [20053];
   Meta Security Research [474960397718052]
FX The authors would like to thank the anonymous reviewers for their
   valuable comments and helpful suggestions. The authors would like to
   thank Marc Arndt for his efforts during the initial stages of the
   project. This work is supported by Cisco Research University Funding
   under grant no. 2853380, Hasler Foundation under grant no. 20053, and
   Meta Security Research under grant (submission) no. 474960397718052.
CR Acay C, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P740, DOI 10.1145/3453483.3454074
   [Anonymous], 2012, P 9 USENIX C NETWORK
   [Anonymous], 2013, CIDR
   Armbrust M, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1383, DOI 10.1145/2723372.2742797
   Arnautov S, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P689
   Balliu M, 2016, CODASPY'16: PROCEEDINGS OF THE SIXTH ACM CONFERENCE ON DATA AND APPLICATION SECURITY AND PRIVACY, P307, DOI 10.1145/2857705.285771
   Baumann A, 2015, ACM T COMPUT SYST, V33, DOI 10.1145/2799647
   Cecchetti E, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1875, DOI 10.1145/3133956.3134054
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   Quoc DL, 2019, WEB CONFERENCE 2019: PROCEEDINGS OF THE WORLD WIDE WEB CONFERENCE (WWW 2019), P3564, DOI 10.1145/3308558.3314129
   Dong Yao, 2018, S BOOTCAMP HOT TOPIC, DOI [10.1145/3190619.3190638, DOI 10.1145/3190619.3190638]
   Dong Yao, 2016, C PRINCIPLES PRACTIC, DOI [10.1145/2972206.2972209, DOI 10.1145/2972206.2972209]
   Drucker N, 2017, PROCEEDINGS OF THE 2017 INTERNATIONAL WORKSHOP ON MANAGING INSIDER SECURITY THREATS (MIST'17), P85, DOI 10.1145/3139923.3139933
   Dwork C, 2013, FOUND TRENDS THEOR C, V9, P211, DOI 10.1561/0400000042
   ELGAMAL T, 1985, IEEE T INFORM THEORY, V31, P469, DOI 10.1109/TIT.1985.1057074
   Feldman Ariel J., 2010, P 9 S OP SYST DES IM
   Ferraiuolo A, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P287, DOI 10.1145/3132747.3132782
   Gentry C, 2009, ACM S THEORY COMPUT, P169, DOI 10.1145/1536414.1536440
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Goldreich Oded, 1987, Proceedings of the 19th Annual ACM Symposium on Theory of Computing. STOC'87, P182, DOI DOI 10.1145/28395.28416
   Gollamudi A, 2019, P IEEE COMPUT SECUR, P304, DOI 10.1109/CSF.2019.00028
   Gollamudi A, 2016, ACM SIGPLAN NOTICES, V51, P494, DOI 10.1145/3022671.2984002
   Gorrieri Roberto, 2011, Foundations of Security Analysis and Design VI. FOSAD Tutorial Lectures: LNCS 6858, P125, DOI 10.1007/978-3-642-23082-0_5
   Hawblitzel Chris, 2014, USENIX S OPERATING S
   Hirsch AK, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434316
   INTEL, 2016, INT SGX SDK
   Johnson Noah M., 2018, INT C VERY LARGE DAT, DOI [10.1145/3187009.3177733, DOI 10.1145/3187009.3177733]
   Lahiri Shuvendu K., 2012, INT C COMP AID VER C, DOI [10.1007/978-3-642-31424-7_54, DOI 10.1007/978-3-642-31424-7_54]
   LAMPORT L, 1982, ACM T PROGR LANG SYS, V4, P382, DOI 10.1145/357172.357176
   Li JY, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P121
   Lind J, 2017, 2017 USENIX ANNUAL TECHNICAL CONFERENCE (USENIX ATC '17), P285
   Liu J, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P321
   Lynbashevsky V, 2010, LECT NOTES COMPUT SC, V6110, P1, DOI 10.1145/2535925
   Mahajan P, 2011, ACM T COMPUT SYST, V29, DOI 10.1145/2063509.2063512
   Mangipudi Shamiek, 2023, GEN POLICY BASED NON
   Myers Andrew C, 2004, IEEE COMPUTER SECURI, DOI [10.1109/CSFW.2004.9, DOI 10.1109/CSFW.2004.9]
   Oak A, 2021, P IEEE COMPUT SECUR, P281, DOI 10.1109/CSF51468.2021.00037
   Open Enclave SDK, 2016, US
   Paillier P, 1999, LECT NOTES COMPUT SC, V1592, P223
   Papadimitriou A, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P587
   Parker J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290388
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Popa RA, 2012, COMMUN ACM, V55, P103, DOI 10.1145/2330667.2330691
   Pottier F, 2002, ACM SIGPLAN NOTICES, V37, P319, DOI 10.1145/565816.503302
   Pullicino K, 2014, Arxiv, DOI arXiv:1412.8639
   Roscoe AW, 1999, P IEEE CSFW, P228, DOI 10.1109/CSFW.1999.779776
   Roth E, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P196, DOI 10.1145/3341301.3359660
   Roth Edo, 2020, USENIX S OPERATING S
   Roy S., 2021, IEEE Symposium on Security and Privacy (SP), P1033, DOI DOI 10.1109/SP40001.2021.00060
   SANDHU RS, 1993, COMPUTER, V26, P9, DOI 10.1109/2.241422
   Savvides S, 2020, PROC VLDB ENDOW, V13, P1290, DOI 10.14778/3389133.3389144
   Savvides S, 2017, PROCEEDINGS OF THE 2017 SYMPOSIUM ON CLOUD COMPUTING (SOCC '17), P479, DOI 10.1145/3127479.3129256
   Schoepe D, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P25, DOI 10.1145/2628136.2628151
   Schuster F, 2015, P IEEE S SECUR PRIV, P38, DOI 10.1109/SP.2015.10
   Shen YR, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P955, DOI 10.1145/3373376.3378469
   Shinde S, 2017, 24TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2017), DOI 10.14722/ndss.2017.23500
   Sigurbjarnarson Helgi, 2018, USENIX S OPERATING S
   Silva R, 2017, INT CONF CLOUD COMP, P314, DOI 10.1109/CloudCom.2017.42
   Sinha R, 2015, CCS'15: PROCEEDINGS OF THE 22ND ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1169, DOI 10.1145/2810103.2813608
   Stephen J.J., 2014, Int. Conf. on Automated Software Engineering, P277, DOI DOI 10.1145/2642937.2643006
   Stephen Julian James, 2014, USENIX WORKSHOP HOT
   Tetali SD, 2013, ACM SIGPLAN NOTICES, V48, P271, DOI [10.1145/2544173.2509554, 10.1145/2509136.2509554]
   Tian HL, 2017, ACM INTERNATIONAL CONFERENCE ON COMPUTING FRONTIERS 2017, P35, DOI 10.1145/3075564.3075572
   Tople S., 2013, 2013 ACM SIGSAC Conference on Computer and Communications Security, CCS'13, P1297, DOI DOI 10.1145/2508859.2516666
   TPC, 1988, TPC H BENCHM
   Tsai CC, 2017, 2017 USENIX ANNUAL TECHNICAL CONFERENCE (USENIX ATC '17), P645
   Tu S, 2013, PROC VLDB ENDOW, V6, P289
   UC Berkley RISE Lab, 2021, MC2
   Zheng LT, 2003, P IEEE S SECUR PRIV, P236, DOI 10.1109/SECPRI.2003.1199340
   Zheng WT, 2017, PROCEEDINGS OF NSDI '17: 14TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P283
NR 71
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 117
DI 10.1145/3591231
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900013
OA gold
DA 2024-07-18
ER

PT J
AU Mulder, I
   Czajka, L
   Krebbers, R
AF Mulder, Ike
   Czajka, Lukasz
   Krebbers, Robbert
TI Beyond Backtracking: Connections in Fine-Grained Concurrent Separation
   Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Separation logic; disjunctions; backtracking; fine-grained concurrency;
   proof automation; Iris; Coq
ID VERIFICATION
AB Concurrent separation logic has been responsible for major advances in the formal verification of fine-grained concurrent algorithms and data structures such as locks, barriers, queues, and reference counters. The key ingredient of the verification of a fine-grained program is an invariant, which relates the physical data representation (on the heap) to a logical representation (in mathematics) and to the state of the threads (using a form of ghost state). An invariant is typically represented as a disjunction of logical states, but this disjunctive nature makes invariants a difficult target for automated verification. Current approaches roughly suffer from two problems. They use backtracking to introduce disjunctions in an uninformed manner, which can lead to unprovable goals if an appropriate case analysis has not been made before choosing the disjunct. Moreover, they eliminate disjunctions too eagerly, which can cause poor efficiency. While disjunctions are no problem for automated provers based on classical (i.e., non-separating) logic, the challenges with disjunctions are prominent in the study of proof automation for intuitionistic logic. We take inspiration from that area-specifically, based on ideas from connection calculus, we design a simple multi-succedent calculus for separation logic with disjunctions featuring a novel concept of a connection. While our calculus is not complete, it has the advantage that it can be extended with features of the state-of-the-art concurrent separation logic Iris (such as modalities, higher-order quantification, ghost state, and invariants), and can be implemented effectively in the Coq proof assistant with little need for backtracking. We evaluate the practicality on 24 challenging benchmarks, 14 of which we can verify fully automatically.
C1 [Mulder, Ike] Radboud Univ Nijmegen, Nijmegen, Netherlands.
   [Czajka, Lukasz] Tech Univ Dortmund, Dortmund, Germany.
   [Krebbers, Robbert] Radboud Univ Nijmegen, Nijmegen, Netherlands.
C3 Radboud University Nijmegen; Dortmund University of Technology; Radboud
   University Nijmegen
RP Mulder, I (corresponding author), Radboud Univ Nijmegen, Nijmegen, Netherlands.
EM me@ikemulder.nl; lukaszcz@mimuw.edu.pl; mail@robbertkrebbers.nl
OI Mulder, Ike/0000-0001-9926-9736
FU Dutch Research Council (NWO) [016]; Google Android Security's ASPIRE
   program
FX We thank the reviewers for their helpful feedback. This research was
   supported by the Dutch Research Council (NWO), project 016.Veni.192.259,
   and by generous awards from Google Android Security's ASPIRE program.
CR Andreoli J. M., 1992, Journal of Logic and Computation, V2, P297, DOI 10.1093/logcom/2.3.297
   Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7799173
   [Anonymous], 1986, Technical Report RJ 5118
   [Anonymous], 1990, AUTOMATED PROOF SEAR
   Berdine J, 2005, LECT NOTES COMPUT SC, V3780, P52
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Brookes S, 2007, THEOR COMPUT SCI, V375, P227, DOI 10.1016/j.tcs.2006.12.034
   Calcagno C, 2007, LECT NOTES COMPUT SC, V4634, P233
   Cao QX, 2017, LECT NOTES COMPUT SC, V10695, P190, DOI 10.1007/978-3-319-71237-6_10
   Cervesato I, 2000, THEOR COMPUT SCI, V232, P133, DOI 10.1016/S0304-3975(99)00173-5
   Chlipala A, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P234
   COURTOIS PJ, 1971, COMMUN ACM, V14, P667, DOI 10.1145/362759.362813
   Delahaye D, 2000, LECT NOTES ARTIF INT, V1955, P85, DOI 10.1007/3-540-44404-1_7
   Dinsdale-Young T, 2017, LECT NOTES COMPUT SC, V10201, P420, DOI 10.1007/978-3-662-54434-1_16
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Dragalin A. G., 1988, Mathematical Intuitionism: Introduction to Proof Theory
   Galmiche D., 2002, Automated Deduction - CADE-18. 18th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.2392), P111
   Galmiche Didier, 2018, ARQNL IJCAR, V2095, P49
   Gheorghiu A, 2021, LECT NOTES COMPUT SC, V12650, P247, DOI 10.1007/978-3-030-71995-1_13
   Harland J, 1997, LECT NOTES ARTIF INT, V1249, P222
   HODAS JS, 1991, SIXTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P32
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung Ralf, 2015, Iris: Monoids and Invariants as an Orthogonal Basis for Concurrent Reasoning (POPL), P637, DOI [10.1145/2676726.2676980, DOI 10.1145/2676726.2676980]
   Jung Ralf, 2016, Higher-Order Ghost State (ICFP), P256, DOI [10.1145/2951913.2951943, DOI 10.1145/2951913.2951943]
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krebbers Robbert, 2018, P ACM PROGR LANG, DOI [10.1145/3236772, DOI 10.1145/3236772]
   Krebbers Robbert, 2017, Interactive Proofs in Higher-Order Concurrent Separation Logic (POPL), P205, DOI [10.1145/3009837.3009855, DOI 10.1145/3009837.3009855]
   Lee W, 2014, ACM SIGPLAN NOTICES, V49, P477, DOI 10.1145/2535838.2535871
   Liang C, 2009, THEOR COMPUT SCI, V410, P4747, DOI 10.1016/j.tcs.2009.07.041
   Magnusson P., 1994, Proceedings Eighth International Parallel Processing Symposium (Cat. No.94TH0652-8), P165, DOI 10.1109/IPPS.1994.288305
   MELLORCRUMMEY JM, 1991, ACM T COMPUT SYST, V9, P21, DOI 10.1145/103727.103729
   Michael M. M., 1996, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, P267, DOI 10.1145/248052.248106
   MILLER D, 1991, ANN PURE APPL LOGIC, V51, P125, DOI 10.1016/0168-0072(91)90068-W
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Mulder I, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586043
   Mulder I, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P809, DOI 10.1145/3519939.3523432
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   Oortwijn W, 2020, LECT NOTES COMPUT SC, V11990, P401, DOI 10.1007/978-3-030-39322-9_19
   Otten J, 1995, LECT NOTES ARTIF INT, V918, P122
   Otten J, 2008, LECT NOTES ARTIF INT, V5195, P283, DOI 10.1007/978-3-540-71070-7_23
   PETERSON GL, 1981, INFORM PROCESS LETT, V12, P115, DOI 10.1016/0020-0190(81)90106-X
   Piskac R, 2014, LECT NOTES COMPUT SC, V8559, P711, DOI 10.1007/978-3-319-08867-9_47
   Piskac T., 2014, LNCS, P124, DOI DOI 10.1007/978-3-642-54862-8_9
   Pym David J., 2002, Applied Logic Series, V26
   Le QL, 2018, LECT NOTES COMPUT SC, V10805, P41, DOI 10.1007/978-3-319-89960-2_3
   Reynolds A, 2016, LECT NOTES COMPUT SC, V9938, P244, DOI 10.1007/978-3-319-46520-3_16
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rust Language, 2021, ARC STD SYNC RUST
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   Simmons RJ, 2014, ACM T COMPUT LOG, V15, DOI 10.1145/2629678
   Sozeau M, 2008, LECT NOTES COMPUT SC, V5170, P278, DOI 10.1007/978-3-540-71067-7_23
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Vafeiadis V., 2008, Ph. D. Dissertation
   Waaler Arild., 2001, Handbook of Automated Reasoning, P1487, DOI DOI 10.1016/B978-044450813-3/50024-2
   Windsor M, 2017, LECT NOTES COMPUT SC, V10426, P544, DOI 10.1007/978-3-319-63387-9_27
   Wolf FA, 2021, LECT NOTES COMPUT SC, V13047, P407, DOI 10.1007/978-3-030-90870-6_22
NR 60
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 161
DI 10.1145/3591275
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900057
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Sisco, ZD
   Balkind, J
   Sherwood, T
   Ben Hardekopf
AF Sisco, Zachary D.
   Balkind, Jonathan
   Sherwood, Timothy
   Ben Hardekopf
TI Loop Rerolling for Hardware Decompilation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE hardware decompilation; program synthesis; loop rerolling
AB We introduce the new problem of hardware decompilation. Analogous to software decompilation, hardware decompilation is about analyzing a low-level artifact-in this case a netlist, i.e., a graph of wires and logical gates representing a digital circuit-in order to recover higher-level programming abstractions, and using those abstractions to generate code written in a hardware description language (HDL). The overall problem of hardware decompilation requires a number of pieces. In this paper we focus on one specific piece of the puzzle: a technique we call hardware loop rerolling. Hardware loop rerolling leverages clone detection and program synthesis techniques to identify repeated logic in netlists (such as would be synthesized from loops in the original HDL code) and reroll them into syntactic loops in the recovered HDL code. We evaluate hardware loop rerolling for hardware decompilation over a set of hardware design benchmarks written in the PyRTL HDL and industry standard SystemVerilog. Our implementation identifies and rerolls loops in 52 out of 53 of the netlists in our benchmark suite, and we show three examples of how hardware decompilation can provide concrete benefits: transpilation between HDLs, faster simulation times over netlists (with mean speedup of 6x), and artifact compaction (39% smaller on average).
C1 [Sisco, Zachary D.; Balkind, Jonathan; Sherwood, Timothy; Ben Hardekopf] Univ Calif Santa Barbara, Santa Barbara, CA USA.
C3 University of California System; University of California Santa Barbara
RP Sisco, ZD (corresponding author), Univ Calif Santa Barbara, Santa Barbara, CA USA.
EM zsisco@ucsb.edu; jbalkind@ucsb.edu; sherwood@cs.ucsb.edu;
   benh@cs.ucsb.edu
OI Hardekopf, Ben/0009-0008-1199-6129; Sherwood,
   Timothy/0000-0002-6550-6075
FU National Science Foundation [2006542, 1763699, 1717779]
FX We thank the anonymous reviewers for a careful assessment of the work
   and helpful comments. We also thank Michael Christensen for help with
   the PyRTL compiler. This material is based upon work supported by the
   National Science Foundation under Grants No. 2006542, 1763699, 1717779.
CR Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7823993
   [Anonymous], 1992, Oct Tools Distribution, V2, P197
   Ardeshiricham A, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P1623, DOI 10.1145/3319535.3354246
   BAKER BS, 1995, SECOND WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P86, DOI 10.1109/WCRE.1995.514697
   Beamer S, 2020, IEEE MICRO, V40, P112, DOI 10.1109/MM.2020.2997639
   Becker A, 2014, DES AUT TEST EUROPE
   Bjesse P, 1999, ACM SIGPLAN NOTICES, V34, P174, DOI 10.1145/291251.289440
   Bogong Su, 1986, Proceedings of the 19th Annual Workshop on Microprogramming MICRO-19 (Cat. No.86CH2350-7), P94
   Bornholt J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276519
   Cakir B, 2018, ACM T DES AUTOMAT EL, V23, DOI 10.1145/3193121
   Clow J, 2017, I C FIELD PROG LOGIC
   Ganai Malay K., 2000, INT WORKSHOP LOGIC S
   Gascón A, 2014, 2014 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P83, DOI 10.1109/FMCAD.2014.6987599
   Ge Tianao, 2022, LCTES 2022: Proceedings of the 23rd ACM SIGPLAN/SIGBED International Conference on Languages, Compilers, and Tools for Embedded Systems, P99, DOI 10.1145/3519941.3535072
   Gill A, 2009, LECT NOTES COMPUT SC, V6041, P18
   Hu EW, 2016, STUD COMPUT INTELL, V614, P221, DOI 10.1007/978-3-319-23467-0_15
   Izraelevitz A, 2017, ICCAD-IEEE ACM INT, P209, DOI 10.1109/ICCAD.2017.8203780
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Kasai T., 2001, Combinatorial Pattern Matching. 12th Annual Symposium, CPM 2001. Proceedings (Lecture Notes in Computer Science Vol. 2089), P181
   Li WC, 2013, 2013 IEEE INTERNATIONAL SYMPOSIUM ON HARDWARE-ORIENTED SECURITY AND TRUST (HOST), P67, DOI 10.1109/HST.2013.6581568
   Meade T, 2016, IEEE INT SYMP CIRC S, P1334, DOI 10.1109/ISCAS.2016.7527495
   Meade T, 2016, ASIA S PACIF DES AUT, P655, DOI 10.1109/ASPDAC.2016.7428086
   Mycroft A., 2003, International Journal on Software Tools for Technology Transfer, V4, P271, DOI 10.1007/s10009-002-0086-1
   Nandi C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P31, DOI 10.1145/3385412.3386012
   O'Donnell J., 2002, PARALLEL DISTRIBUTED, P234, DOI [10.1109/IPDPS.2002.1016653, DOI 10.1109/IPDPS.2002.1016653]
   Portos J, 2019, CONFERENCE RECORD OF 2019 IEEE IAS PULP, PAPER AND FOREST INDUSTRIES CONFERENCE (PPFIC), DOI 10.1109/ppfic43189.2019.9052384
   Rocha RCO, 2022, INT SYM CODE GENER, P217, DOI 10.1109/CGO53902.2022.9741256
   Rubanov N, 2006, IEEE T COMPUT AID D, V25, P2353, DOI 10.1109/TCAD.2006.881335
   Shi YQ, 2010, IEEE INT SYMP CIRC S, P2610, DOI 10.1109/ISCAS.2010.5537093
   Snyder Wilson., 2021, Verilator
   Soeken M, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P152, DOI 10.1109/FMCAD.2015.7542265
   Solar-Lezama Armando, 2013, International Journal on Software Tools for Technology Transfer, V15, P475, DOI 10.1007/s10009-012-0249-7
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Stitt G, 2005, IEEE IC CAD, P547, DOI 10.1109/ICCAD.2005.1560127
   Stoye J, 2002, THEOR COMPUT SCI, V270, P843, DOI 10.1016/S0304-3975(01)00121-9
   Su B., 1984, Seventeenth Annual Microprogramming Workshop, MICRO 17 (Cat. No. 84CH2088-3), P78
   Subramanyan P, 2014, IEEE T EMERG TOP COM, V2, P63, DOI 10.1109/TETC.2013.2294918
   Tang Lingshu, 2019, BSG MICRODESIGNS
   Taylor MB, 2018, DES AUT CON, DOI 10.1145/3195970.3199848
   Wenchao Li, 2012, Proceedings 2012 IEEE International Symposium on Hardware-Oriented Security and Trust (HOST 2012), P83, DOI 10.1109/HST.2012.6224325
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Wolf C., 2016, Yosys open synthesis suite
   Zhang T, 2019, IEEE ACCESS, V7, P38379, DOI 10.1109/ACCESS.2019.2901949
NR 43
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 123
DI 10.1145/3591237
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900019
OA gold
DA 2024-07-18
ER

PT J
AU Feng, SH
   Chen, MS
   Su, H
   Kaminski, BL
   Katoen, JP
   Zhan, NJ
AF Feng, Shenghua
   Chen, Mingshuai
   Su, Han
   Kaminski, Benjamin Lucien
   Katoen, Joost-Pieter
   Zhan, Naijun
TI Lower Bounds for Possibly Divergent Probabilistic Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programs; quantitative verification; weakest
   preexpectations; lower bounds; almost-sure termination; uniform
   integrability
ID INVARIANT GENERATION; MODEL CHECKING; BISIMULATION; SEMANTICS
AB We present a new proof rule for verifying lower bounds on quantities of probabilistic programs. Our proof rule is not confined to almost-surely terminating programs - as is the case for existing rules - and can be used to establish non-trivial lower bounds on, e.g., termination probabilities and expected values, for possibly divergent probabilistic loops, e.g., the well-known three-dimensional random walk on a lattice.
C1 [Feng, Shenghua; Su, Han; Zhan, Naijun] Chinese Acad Sci, Univ Chinese Acad Sci, Inst Software, SKLCS, Beijing, Peoples R China.
   [Chen, Mingshuai] Zhejiang Univ, Hangzhou, Peoples R China.
   [Kaminski, Benjamin Lucien] Saarland Univ, Saarland Informat Campus, Saarbrucken, Germany.
   [Kaminski, Benjamin Lucien] UCL, London, England.
   [Katoen, Joost-Pieter] Rhein Westfal TH Aachen, Aachen, Germany.
C3 Chinese Academy of Sciences; Institute of Software, CAS; University of
   Chinese Academy of Sciences, CAS; Zhejiang University; Saarland
   University; University of London; University College London; RWTH Aachen
   University
RP Chen, MS (corresponding author), Zhejiang Univ, Hangzhou, Peoples R China.
EM fengsh@ios.ac.cn; m.chen@zju.edu.cn; suhan@ios.ac.cn;
   b.kaminski@ucl.ac.uk; katoen@cs.rwth-aachen.de; znj@ios.ac.cn
RI Chen, Mingshuai/AAF-3536-2020; Katoen, Joost-Pieter/O-3307-2018
OI Chen, Mingshuai/0000-0001-9663-7441; Katoen,
   Joost-Pieter/0000-0002-6143-1926; Kaminski, Benjamin
   Lucien/0000-0001-5185-2324; SU, Han/0000-0003-4260-8340; Zhan,
   Naijun/0000-0003-3298-3817
FU National Key R&D Program of China [2022YFA1005101]; NSFC [62192732,
   62032024]; CAS Project for Young Scientists in Basic Research
   [YSBR-040]; ZJU Education Foundation's Qizhen Talent program; ERC
   Advanced Project FRAPPANT [787914]; European Union [101008233]
FX This work has been partially funded by the National Key R&D Program of
   China under grant No. 2022YFA1005101, by the NSFC under grant No.
   62192732 and 62032024, by the CAS Project for Young Scientists in Basic
   Research under grant No. YSBR-040, by the ZJU Education Foundation's
   Qizhen Talent program, by the ERC Advanced Project FRAPPANT under grant
   No. 787914, and by the European Union's Horizon 2020 research and
   innovation programme under the Marie SklodowskaCurie grant agreement No.
   101008233. The authors would like to thank Kevin Batz, Tim Quatmann, and
   anonymous reviewers for the insightful discussions on the connection
   respectively to linvariants in weakest preexpectation reasoning, partial
   exploration in Markov models, and the space-restricting tactic in
   analyzing random walks.
CR Abraham Erika, 2014, Formal Methods for Executable Software Models. 14th International School on Formal Methods for the Design of Computer, Communication, and Software Systems, SFM 2014. Advanced Lectures: LNCS 8483, P65, DOI 10.1007/978-3-319-07317-0_3
   AGUIRRE A, 2021, P ACM PROGRAMMING LA, P1
   ASPNES J, 1990, J ALGORITHM, V11, P441, DOI 10.1016/0196-6774(90)90021-6
   Audebaud P, 2009, SCI COMPUT PROGRAM, V74, P568, DOI 10.1016/j.scico.2007.09.002
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Baier C, 2017, LECT NOTES COMPUT SC, V10426, P160, DOI 10.1007/978-3-319-63387-9_8
   Baldan P, 2021, LECT NOTES COMPUT SC, V12650, P62, DOI 10.1007/978-3-030-71995-1_4
   Bao JL, 2022, LECT NOTES COMPUT SC, V13371, P33, DOI 10.1007/978-3-031-13185-1_3
   Barthe Gilles, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P1, DOI 10.1007/978-3-642-31113-0_1
   Barthe G., 2020, Foundations of Probabilistic Programming
   Barthe G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158145
   Barthe G, 2016, LECT NOTES COMPUT SC, V9779, P43, DOI 10.1007/978-3-319-41528-4_3
   Barthe G, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2492061
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Bartocci E, 2019, LECT NOTES COMPUT SC, V11781, P255, DOI 10.1007/978-3-030-31784-3_15
   Bartocci E, 2011, LECT NOTES COMPUT SC, V6605, P326, DOI 10.1007/978-3-642-19835-9_30
   Batz K, 2021, LECT NOTES COMPUT SC, V12760, P524, DOI 10.1007/978-3-030-81688-9_25
   Batz K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434320
   Batz K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290347
   Batz Kevin, 2023, TACAS
   Bernoulli D, 1954, ECONOMETRICA, V22, P23, DOI 10.2307/1909829
   Bohnenkamp H, 2003, 2003 INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P531, DOI 10.1109/DSN.2003.1209963
   Brázdil T, 2014, LECT NOTES COMPUT SC, V8837, P98, DOI 10.1007/978-3-319-11936-6_8
   Carbin M, 2016, COMMUN ACM, V59, P83, DOI 10.1145/2958738
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chakarov A, 2014, LECT NOTES COMPUT SC, V8723, P85, DOI 10.1007/978-3-319-10936-7_6
   Chatterjee K, 2022, LECT NOTES COMPUT SC, V13371, P55, DOI 10.1007/978-3-031-13185-1_4
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Chatterjee K, 2016, ACM SIGPLAN NOTICES, V51, P327, DOI 10.1145/2914770.2837639
   Chatterjee Krishnendu, 2020, TERMINATION ANAL PRO, P221, DOI [10.1017/9781108770750.008, DOI 10.1017/9781108770750.008]
   Chen MS, 2022, LECT NOTES COMPUT SC, V13371, P79, DOI 10.1007/978-3-031-13185-1_5
   Chen YF, 2015, LECT NOTES COMPUT SC, V9206, P658, DOI 10.1007/978-3-319-21690-4_44
   Dahlqvist Fredrik, 2020, FDN PROBABILISTIC PR, P1
   Dehnert C, 2017, LECT NOTES COMPUT SC, V10427, P592, DOI 10.1007/978-3-319-63390-9_31
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Evans Owain, 2017, MODELING AGENTS PROB
   Feller W., 1950, INTRO PROBABILITY TH, VI
   Feng Shenghua, 2023, ARXIV
   Feng YJ, 2017, LECT NOTES COMPUT SC, V10482, P400, DOI 10.1007/978-3-319-68167-2_26
   Fioriti LMF, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI 10.1145/2676726.2677001
   Frohn F, 2016, LECT NOTES ARTIF INT, V9706, P550, DOI 10.1007/978-3-319-40229-1_37
   Frohn F, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3410331
   Fu HF, 2019, LECT NOTES COMPUT SC, V11388, P468, DOI 10.1007/978-3-030-11245-5_22
   Giesl J, 2019, LECT NOTES ARTIF INT, V11716, P269, DOI 10.1007/978-3-030-29436-6_16
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Hark M, 2021, Arxiv, DOI arXiv:1904.01117
   Hark M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371105
   Hartmanns A, 2020, LECT NOTES COMPUT SC, V12225, P488, DOI 10.1007/978-3-030-53291-8_26
   Hartmanns A, 2019, LECT NOTES COMPUT SC, V11427, P344, DOI 10.1007/978-3-030-17462-0_20
   Hehner ECR, 2011, FORM ASP COMPUT, V23, P391, DOI 10.1007/s00165-010-0157-0
   Hicks Michael, 2014, PROGRAMMING LANGUAGE
   Hong CD, 2019, LECT NOTES COMPUT SC, V11561, P455, DOI 10.1007/978-3-030-25540-4_27
   Jachymski J, 2000, B AUST MATH SOC, V61, P247, DOI 10.1017/S0004972700022243
   Jansen N, 2016, LECT NOTES COMPUT SC, V9938, P68, DOI 10.1007/978-3-319-46520-3_5
   Jones C., 1990, PhD thesis
   Kaminski BL, 2019, ACTA INFORM, V56, P255, DOI 10.1007/s00236-018-0321-1
   Kaminski BL, 2018, J ACM, V65, DOI 10.1145/3208102
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   Kaminski Benjamin Lucien, 2019, Advanced weakest precondition calculi for probabilistic programs
   Kaminski Benjamin Lucien, 2017, 32 ANN ACMIEEE S LOG, P1
   Katoen JP, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P31, DOI 10.1145/2933575.2934574
   Katoen JP, 2015, LECT NOTES COMPUT SC, V9360, P15, DOI 10.1007/978-3-319-23506-6_4
   Katoen JP, 2010, LECT NOTES COMPUT SC, V6337, P390, DOI 10.1007/978-3-642-15769-1_24
   Knaster B., 1928, Ann. Soc. Polon. Math., V6, P133
   Kobayashi N, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(4:2)2020
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Kozen Dexter, 1983, P ACM S THEORY COMPU, P291, DOI [10.1145/800061.808758, DOI 10.1145/800061.808758]
   Kwiatkowska M, 2003, IEEE S LOG, P351, DOI 10.1109/LICS.2003.1210075
   Kwiatkowska M, 2002, LECT NOTES COMPUT SC, V2324, P200
   LARSEN KG, 1991, INFORM COMPUT, V94, P1, DOI 10.1016/0890-5401(91)90030-6
   LASSEZ JL, 1982, INFORM PROCESS LETT, V14, P112, DOI 10.1016/0020-0190(82)90065-5
   McCrea W. H., 1940, P ROY SOC EDINB, V60, P281, DOI 10.1017/S0370164600020265
   McIver AK, 2001, THEOR COMPUT SCI, V266, P513, DOI 10.1016/S0304-3975(00)00208-5
   McIver A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158121
   McIver Annabelle., 2005, MG COMP SCI
   MONTROLL EW, 1956, J SOC IND APPL MATH, V4, P241, DOI 10.1137/0104014
   Moosbrugger M, 2021, LECT NOTES COMPUT SC, V13047, P667, DOI 10.1007/978-3-030-90870-6_36
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   Morgan Carroll, 1999, LOG J IGPL, V7, P779
   Murawski AS, 2005, LECT NOTES COMPUT SC, V3653, P156, DOI 10.1007/11539452_15
   Olmedo F, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3156018
   Olmedo F, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P672, DOI 10.1145/2933575.2935317
   PARK D, 1969, MACH INTELL, V5
   Polya Georg, 1921, MATH ANN, V84, P149, DOI [DOI 10.1007/BF01458701, 10.1007/BF01458701]
   Quatmann T, 2018, LECT NOTES COMPUT SC, V10981, P643, DOI 10.1007/978-3-319-96145-3_37
   Saheb-Djahromi N., 1978, Mathematical Foundations of Computer Science 1978, P442
   Sankaranarayanan Sriram, 2020, FDN PROBABILISTIC PR, P259
   SCHNEIDER M, 1993, COMPUT SURV, V25, P45, DOI 10.1145/151254.151256
   Shamsi SM, 2020, 2020 IEEE INTERNATIONAL CONFERENCE ON MULTISENSOR FUSION AND INTEGRATION FOR INTELLIGENT SYSTEMS (MFI), P32, DOI [10.1109/MFI49285.2020.9235230, 10.1109/mfi49285.2020.9235230]
   Szymczak Marcin, 2019, LNCS, V12154, P44
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Ngo VC, 2018, ACM SIGPLAN NOTICES, V53, P496, DOI [10.1145/3192366.3192394, 10.1145/3296979.3192394]
   van de Meent Jan-Willem, 2018, ARXIV
   Wang D, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P559, DOI 10.1145/3453483.3454062
   Wang JY, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1171, DOI 10.1145/3453483.3454102
   Wang PX, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P204, DOI 10.1145/3314221.3314581
   Wang PX, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371093
   Williams D., 1991, Probability with Martingales
   Ying MS, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2049706.2049708
NR 102
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586051
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600026
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Lin, ZY
   Chen, XH
   Trinh, MT
   Wang, J
   Rosu, G
AF Lin, Zhengyao
   Chen, Xiaohong
   Trinh, Minh-Thai
   Wang, John
   Rosu, Grigore
TI Generating Proof Certificates for a Language-Agnostic Deductive Program
   Verifier
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Verification; Reachability Logic; Matching Logic
ID FORMAL SEMANTICS; FRAMEWORK
AB Previous work on rewriting and reachability logic establishes a vision for a language-agnostic program verifier, which takes three inputs: a program, its formal specification, and the formal semantics of the programming language in which the program is written. The verifier then uses a language-agnostic verification algorithm to prove the program correct with respect to the specification and the formal language semantics. Such a complex verifier can easily have bugs. This paper proposes a method to certify the correctness of each successful verification run by generating a proof certificate. The proof certificate can be checked by a small proof checker. The preliminary experiments apply the method to generate proof certificates for program verification in an imperative language, a functional language, and an assembly language, showing that the proposed method is language-agnostic.
C1 [Lin, Zhengyao] Carnegie Mellon Univ, Comp Sci Dept, Pittsburgh, PA 15213 USA.
   [Chen, Xiaohong; Wang, John; Rosu, Grigore] Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA.
   [Trinh, Minh-Thai] Adv Digital Sci Ctr, Singapore, Singapore.
C3 Carnegie Mellon University; University of Illinois System; University of
   Illinois Urbana-Champaign
RP Lin, ZY (corresponding author), Carnegie Mellon Univ, Comp Sci Dept, Pittsburgh, PA 15213 USA.
EM zhengyal@cmu.edu; xc3@illinois.edu; trinhmt@illinois.edu;
   jzw2@illinois.edu; grosu@illinois.edu
RI Trinh, Minh-Thai/HTO-3686-2023
OI Trinh, Minh-Thai/0000-0002-5716-9400; Chen, Xiaohong/0000-0003-3208-4061
FU United States Air Force; DARPA [FA8750-18-C-0092]; IOHK
FX The work presented in this paper was supported in part by an IOHK grant
   and an Ethereum Foundation gift. This material is based upon work
   supported by the United States Air Force and DARPA under Contract No.
   FA8750-18-C-0092.
CR Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Barrett Clark, 2015, PROOFS SATISFIABILIT, P23
   Blazy S, 2009, J AUTOM REASONING, V43, P263, DOI 10.1007/s10817-009-9148-3
   Bogdanas D, 2015, ACM SIGPLAN NOTICES, V50, P445, DOI [10.1145/2775051.2676982, 10.1145/2676726.2676982]
   Carneiro Mario, 2020, Intelligent Computer Mathematics. 13th International Conference, CICM 2020. Proceedings. Lecture Notes in Artificial Intelligence. Subseries of Lecture Notes in Computer Science (LNAI 12236), P71, DOI 10.1007/978-3-030-53518-6_5
   Chen XH, 2021, LECT NOTES COMPUT SC, V12760, P477, DOI 10.1007/978-3-030-81688-9_23
   Chen XH, 2021, J LOG ALGEBR METHODS, V120, DOI 10.1016/j.jlamp.2021.100638
   Chen XH, 2019, IEEE S LOG
   Chen Xiaohong, 2020, P ACM SIGPLAN INT C, P1
   Chen Xiaohong, 2020, Technical Report
   Chen Xiaohong, 2019, MATCH LOG
   Coq Team, 2021, COQ GITHUB REP
   Coq Team, 2021, COQ PROOF ASSISTANT
   Dasgupta S, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1133, DOI 10.1145/3314221.3314601
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Ellison C, 2012, ACM SIGPLAN NOTICES, V47, P533, DOI 10.1145/2103621.2103719
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Garchery Q, 2021, ELECTRON P THEOR COM, P5, DOI 10.4204/EPTCS.336.2
   GOGUEN JA, 1977, J ACM, V24, P68, DOI 10.1145/321992.321997
   Guth D, 2016, LECT NOTES COMPUT SC, V9779, P447, DOI 10.1007/978-3-319-41528-4_24
   Guth Dwight, 2013, FORM SEM PYTH 3 3
   Guy RK., 2004, Unsolved Problems in Number Theory, V3, DOI [10.1007/978-0-387-26677-0, DOI 10.1007/978-0-387-26677-0]
   Harper Robert, 1986, Standard ml
   Hendrix Joseph D, 2008, THESIS U ILLINOIS UR
   Hildenbrandt E, 2018, P IEEE COMPUT SECUR, P204, DOI 10.1109/CSF.2018.00022
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Isabelle Team, 2021, ABOUT US
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   K Team, MATCH LOG PROOF CHEC
   K Team, 2022, K FRAM HASK BACK
   Kasampalis T, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P1004, DOI 10.1145/3445814.3446751
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy Xavier, 2020, COMPCERT VERIFIED CO
   Levien Raph, 2019, METAMATH VERIFIER PY
   Li Liyi, 2020, P 34 EUROPEAN C OBJE, P1, DOI [10.4230/LIPIcs.ECOOP.2020.7, DOI 10.4230/LIPICS.ECOOP.2020.7]
   Lin Zhengyao, 2022, Zenodo, DOI 10.5281/ZENODO.7503088
   Lin Zhengyao, 2022, K PROOF GENERATION T
   Luo QZ, 2014, LECT NOTES COMPUT SC, V8734, P285, DOI 10.1007/978-3-319-11164-3_24
   MEGILL DAVID WHEELER A, 2019, Metamath: A Computer Language for Mathematical Proofs
   Necula GC, 2000, LECT NOTES ARTIF INT, V1831, P25
   O'Rear Stefan, 2019, METAMATH VERIFIER RU
   Park D, 2015, ACM SIGPLAN NOTICES, V50, P346, DOI [10.1145/2813885.2737991, 10.1145/2737924.2737991]
   Parthasarathy G, 2021, LECT NOTES COMPUT SC, V12760, P704, DOI 10.1007/978-3-030-81688-9_33
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Rosu G., 2012, REACHABILITY LOGIC
   Rosu G, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(4:28)2017
   Rosu G, 2013, IEEE S LOG, P358, DOI 10.1109/LICS.2013.42
   Rosu Grigore, 2009, MATCHING LOGIC EXTEN
   Rtefanescu Andrei, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P425, DOI 10.1007/978-3-319-08918-8_29
   Shoenfield J.R., 1967, MATH LOGIC
   Slind K, 2008, LECT NOTES COMPUT SC, V5170, P28, DOI 10.1007/978-3-540-71067-7_6
   Stefanescu A, 2016, ACM SIGPLAN NOTICES, V51, P74, DOI [10.1145/2983990.2984027, 10.1145/3022671.2984027]
   Stump A, 2013, FORM METHOD SYST DES, V42, P91, DOI 10.1007/s10703-012-0163-3
   SV-COMP, 2021, BENCHM SV COMP
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Tukaani Team, 2021, XZ UT
   Wang John, 2022, METAMATH PROOF CHECK
   Wils S., 2021, ARXIV, DOI DOI 10.48550/ARXIV.2110.11034
NR 60
TC 1
Z9 1
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586029
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600004
OA gold
DA 2024-07-18
ER

PT J
AU Jacobs, J
   Wissmann, T
AF Jacobs, Jules
   Wissmann, Thorsten
TI Fast Coalgebraic Bisimilarity Minimization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Coalgebra; Partition Refinement; Monotone Neighbourhoods
ID BISIMULATION MINIMIZATION; SEMANTICS
AB Coalgebraic bisimilarity minimization generalizes classical automaton minimization to a large class of automata whose transition structure is specified by a functor, subsuming strong, weighted, and probabilistic bisimilarity. This offers the enticing possibility of turning bisimilarity minimization into an off-the-shelf technology, without having to develop a new algorithm for each new type of automaton. Unfortunately, there is no existing algorithm that is fully general, efficient, and able to handle large systems. We present a generic algorithm that minimizes coalgebras over an arbitrary functor in the category of sets as long as the action on morphisms is sufficiently computable. The functor makes at most O(m log n) calls to the functor-specific action, where m is the number of states and n is the number of transitions in the coalgebra. While more specialized algorithms can be asymptotically faster than our algorithm (usually by a factor of O( m/n)), our algorithm is especially well suited to efficient implementation, and our tool Boa often uses much less time and memory on existing benchmarks, and can handle larger automata, despite being more generic.
C1 [Jacobs, Jules; Wissmann, Thorsten] Radboud Univ Nijmegen, Nijmegen, Netherlands.
C3 Radboud University Nijmegen
RP Jacobs, J (corresponding author), Radboud Univ Nijmegen, Nijmegen, Netherlands.
OI Jacobs, Jules/0000-0003-1976-3182
FU NWO TOP project [612.001.852]
FX We thank Hans-Peter Deifel, Stefan Milius, Jurriaan Rot, Hubert Garavel,
   Sebastian Junges, Marck van der Vegt, Joost-Pieter Katoen, and Frits
   Vaandrager for helpful discussions and the anonymous referees for their
   valuable feedback for improving the paper. Thorsten Wi ss mann was
   supported by the NWO TOP project 612.001.852.
CR Aho AV., 1974, DESIGN ANAL COMPUTER
   [Anonymous], 1971, Theory of Machines and Computations, DOI DOI 10.1016/B978-0-12-417750-5.50022-1
   [Anonymous], 2001, THESIS
   [Anonymous], 2001, HDB PROCESS ALGEBRA, DOI DOI 10.1016/B978-044482830-9/50019-9
   [Anonymous], 2008, LIPICS
   [Anonymous], 1983, PROCS 2 ANN ACM S PR, DOI [10.1145/800221.806724, DOI 10.1145/800221.806724]
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Baier C, 2000, J COMPUT SYST SCI, V60, P187, DOI 10.1006/jcss.1999.1683
   Bartels F., 2003, Electronic Notes in Theoretical Computer Science, V82, DOI 10.1016/S1571-0661(04)80632-7
   Birkmann F, 2022, LECT NOTES COMPUT SC, V13244, P159, DOI 10.1007/978-3-030-99527-0_9
   Blom S., 2005, International Journal on Software Tools for Technology Transfer, V7, P280, DOI 10.1007/s10009-004-0185-2
   Bonchi F, 2013, ACM SIGPLAN NOTICES, V48, P457, DOI 10.1145/2480359.2429124
   Deifel Hans-Peter, 2019, Formal Methods - The Next 30 Years. Third World Congress, FM 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11800), P280, DOI 10.1007/978-3-030-30942-8_18
   Dorsch Ulrich, 2017, PROC 28 INT C CONCUR
   Dorsch Ulrich, 2019, CONCUR
   Garavel H., 2022, A Journey from Process Algebra via Timed Automata to Model Learning, P213, DOI DOI 10.1007/978-3-031-15629-813
   Groote JF, 2018, ALGORITHMS, V11, DOI 10.3390/a11090131
   GROOTE JF, 1990, LECT NOTES COMPUT SC, V443, P626
   Gumm H. P., 2001, Electronic Notes in Theoretical Computer Science, V44
   Hansen H.H., 2004, COALGEBRAIC METHODS, V106, P121, DOI [10.1016/j.entcs.2004.02.028, DOI 10.1016/J.ENTCS.2004.02.028]
   Hasuo I, 2007, LOG METH COMPUT SCI, V3, DOI 10.2168/LMCS-3(4:11)2007
   Högberg J, 2007, LECT NOTES COMPUT SC, V4588, P229
   Högberg J, 2009, THEOR COMPUT SCI, V410, P3539, DOI 10.1016/j.tcs.2009.03.022
   Jansen David N., 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12079), P3, DOI 10.1007/978-3-030-45237-7_1
   KANELLAKIS PC, 1990, INFORM COMPUT, V86, P43, DOI 10.1016/0890-5401(90)90025-D
   Katoen JP, 2007, LECT NOTES COMPUT SC, V4424, P87
   Klin B, 2009, LECT NOTES COMPUT SC, V5700, P121
   Konig Barbara, 2014, Theoretical Computer Science. 8th IFIP TC 1/WG 2.2 International Conference, TCS 2014. Proceedings: LNCS 8705, P311, DOI 10.1007/978-3-662-44602-7_24
   Kozen D, 2015, LECT NOTES COMPUT SC, V9135, P286, DOI 10.1007/978-3-662-47666-6_23
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   LARSEN KG, 1991, INFORM COMPUT, V94, P1, DOI 10.1016/0890-5401(91)90030-6
   May J, 2006, LECT NOTES COMPUT SC, V4094, P102
   Milius S., 2015, LIPICS, V35, P253, DOI DOI 10.4230/LIPICS.CALCO.2015.253
   Milius S, 2016, APPL CATEGOR STRUCT, V24, P663, DOI 10.1007/s10485-016-9457-8
   Milner R., 1980, Lecture Notes in Computer Science, V92, DOI DOI 10.1007/3-540-10235-3
   Moore E.F., 1956, Automata studies, P129
   PAIGE R, 1987, SIAM J COMPUT, V16, P973, DOI 10.1137/0216062
   Parikh R., 1985, Topics in the Theory of Computation. Selected Papers of the International Conference on `Foundations of Computation Theory', FCT '83, P111
   PELEG D, 1987, J ACM, V34, P450, DOI 10.1145/23005.23008
   Schröder L, 2017, LECT NOTES COMPUT SC, V10203, P124, DOI 10.1007/978-3-662-54458-7_8
   Silva A, 2011, ELECTRON NOTES THEOR, V276, P291, DOI 10.1016/j.entcs.2011.09.027
   Silva A, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(1:09)2013
   Valmari A, 2010, FUND INFORM, V105, P319, DOI 10.3233/FI-2010-369
   Valmari A, 2010, LECT NOTES COMPUT SC, V6015, P38, DOI 10.1007/978-3-642-12002-2_4
   Valmari A, 2009, LECT NOTES COMPUT SC, V5606, P123, DOI 10.1007/978-3-642-02424-5_9
   Winskel G., 1993, The Formal Semantics of Programming Languages
   Wissmann T, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:8)2020
   Wissmann Thorsten, 2023, COMPUTER SCI LOGIC C
   Wissmann Thorsten, 2022, BOA BINARY COALGEBRA, DOI [10.5281/zenodo.7150706Themostrecentversionisathttps://github.com/julesjacobs/boa, DOI 10.5281/ZENODO.7150706THEMOSTRECENTVERSIONISATHTTPS://GITHUB.COM/JULESJACOBS/BOA]
NR 49
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571245
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500052
OA gold, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Kim, J
   D'Antoni, L
   Reps, T
AF Kim, Jinwoo
   D'Antoni, Loris
   Reps, Thomas
TI Unrealizability Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Unrealizability Logic; Unrealizability; Program Synthesis
AB We consider the problem of establishing that a program-synthesis problem is unrealizable (i.e., has no solution in a given search space of programs). Prior work on unrealizability has developed some automatic techniques to establish that a problem is unrealizable; however, these techniques are all black-box, meaning that they conceal the reasoning behind why a synthesis problem is unrealizable.
   In this paper, we present a Hoare-style reasoning system, called unrealizability logic for establishing that a program-synthesis problem is unrealizable. To the best of our knowledge, unrealizability logic is the first proof system for overapproximating the execution of an infinite set of imperative programs. The logic provides a general, logical system for building checkable proofs about unrealizability. Similar to how Hoare logic distills the fundamental concepts behind algorithms and tools to prove the correctness of programs, unrealizability logic distills into a single logical system the fundamental concepts that were hidden within prior tools capable of establishing that a program-synthesis problem is unrealizable.
C1 [Kim, Jinwoo] Seoul Natl Univ, Seoul, South Korea.
   [D'Antoni, Loris; Reps, Thomas] Univ Wisconsin, Madison, WI USA.
C3 Seoul National University (SNU); University of Wisconsin System;
   University of Wisconsin Madison
RP Kim, J (corresponding author), Seoul Natl Univ, Seoul, South Korea.
EM pl@cs.wisc.edu; loris@cs.wisc.edu; reps@cs.wisc.edu
OI D'Antoni, Loris/0000-0001-9625-4037; Kim, Jinwoo/0000-0002-3897-1828
FU ONR [N00014-17-1-2889]; NSF [CCF-1750965, CCF-1763871, CCF-1918211,
   CCF-2023222, CCF-2211968, CCF-2212558]; Facebook Research Faculty
   Fellowship; Microsoft Research Faculty Fellowship; Korea Foundation of
   Advanced Studies
FX Supported, in part, by a gift from Rajiv and Ritu Batra; by ONR under
   grant N00014-17-1-2889; by NSF under grants CCF-{1750965, 1763871,
   1918211, 2023222, 2211968, 2212558}; by a Facebook Research Faculty
   Fellowship, by a Microsoft Research Faculty Fellowship, and a grant from
   the Korea Foundation of Advanced Studies. Any opinions, findings, and
   conclusions or recommendations expressed in this publication are those
   of the authors, and do not necessarily reflect the views of the
   sponsoring entities.
CR APT KR, 1981, ACM T PROGR LANG SYS, V3, P431, DOI 10.1145/357146.357150
   Apt KR, 2019, FORM ASP COMPUT, V31, P751, DOI 10.1007/s00165-019-00501-3
   Clarkson MR, 2008, CSF 2008: 21ST IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, PROCEEDINGS, P51, DOI 10.1109/CSF.2008.7
   Davis Martin, 1990, J SYMBOLIC LOGIC, V55, P1
   de Vries E, 2011, LECT NOTES COMPUT SC, V7041, P155, DOI 10.1007/978-3-642-24690-6_12
   Farzan A, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P244, DOI 10.1145/3519939.3523726
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hu QHP, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1128, DOI 10.1145/3385412.3385979
   Hu QP, 2019, LECT NOTES COMPUT SC, V11561, P335, DOI 10.1007/978-3-030-25540-4_18
   Hu QP, 2018, LECT NOTES COMPUT SC, V10981, P386, DOI 10.1007/978-3-319-96145-3_21
   Kamp M, 2021, LECT NOTES COMPUT SC, V12597, P353, DOI 10.1007/978-3-030-67067-2_16
   Kim J, 2023, Arxiv, DOI arXiv:2211.07117
   Kim J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434311
   Komuravelli A, 2016, FORM METHOD SYST DES, V48, P175, DOI 10.1007/s10703-016-0249-4
   McCarthy John, 1993, Program Verification: Fundamental Issues in Computer Science, P35
   Mechtaev S, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P389, DOI 10.1145/3236024.3236049
   MONCKE U, 1991, LECT NOTES COMPUT SC, V545, P151
   Nipkow T, 2002, LECT NOTES COMPUT SC, V2471, P103
   O'Hearn PW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371078
   Phothilimthana PM, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P65, DOI 10.1145/3297858.3304059
   Reynolds A, 2015, LECT NOTES COMPUT SC, V9207, P198, DOI 10.1007/978-3-319-21668-3_12
   Sousa M, 2016, ACM SIGPLAN NOTICES, V51, P57, DOI 10.1145/2908080.2908092
   von Oheimb D., 1999, Foundations of Software Technology and Theoretical Computer Science. 19th Conference. Proceedings (Lecture Notes in Computer Science Vol.1738), P168
NR 27
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571216
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500023
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Kokologiannakis, M
   Lahav, O
   Vafeiadis, V
AF Kokologiannakis, Michalis
   Lahav, Ori
   Vafeiadis, Viktor
TI Kater: AutomatingWeak Memory Model Metatheory and Consistency Checking
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Model Checking; Weak Memory Models; Kleene Algebra with Tests
ID C/C PLUS PLUS; KLEENE ALGEBRA
AB The metatheory of axiomatic weak memory models covers questions like the correctness of compilation mappings from one model to another and the correctness of local program transformations according to a given model-topics usually requiring lengthy human investigation. We show that these questions can be solved by answering a more basic question: "Given two memory models, is one weaker than the other?" Moreover, for a wide class of axiomatic memory models, we show that this basic question can be reduced to a language inclusion problem between regular languages, which is decidable.
   Similarly, implementing an efficient check for whether an execution graph is consistent according to a given memory model has required non-trivial manual effort. Again, we show that such efficient checks can be derived automatically for a wide class of axiomatic memory models, and that incremental consistency checks can be incorporated in GenMC, a state-of-the-art model checker for concurrent programs. As a result, we get the first time- and space-efficient bounded verifier taking the axiomatic memory model as an input parameter.
C1 [Kokologiannakis, Michalis; Vafeiadis, Viktor] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Lahav, Ori] Tel Aviv Univ, Tel Aviv, Israel.
C3 Tel Aviv University
RP Kokologiannakis, M (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
EM michalis@mpi-sws.org; orilahav@tau.ac.il; viktor@mpi-sws.org
RI ; Vafeiadis, Viktor/B-5809-2014
OI Kokologiannakis, Michalis/0000-0002-7905-9739; Lahav,
   Ori/0000-0003-4305-6998; Vafeiadis, Viktor/0000-0001-8436-0334
FU European Research Council (ERC) [101003349]; Israel Science Foundation
   [1566/18, 814/22]; European Union [851811]; European Research Council
   (ERC) [851811, 101003349] Funding Source: European Research Council
   (ERC)
FX We thank the anonymous reviewers for their valuable feedback. This work
   was supported by a European Research Council (ERC) Consolidator Grant
   for the project "PERSIST" and Starting Grant for the project "VAPLCS"
   under the European Union's Horizon 2020 research and innovation
   programme (grant agreement numbers 101003349 and 851811, respectively),
   and by the Israel Science Foundation (grant numbers 1566/18 and 814/22).
CR Abdulla Parosh Aziz, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P353, DOI 10.1007/978-3-662-46681-0_28
   Alglave J, 2018, ACM SIGPLAN NOTICES, V53, P405, DOI [10.1145/3296957.3177156, 10.1145/3173162.3177156]
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   [Anonymous], 1992, SPARC ARCHITECTURE M
   Batty M, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P509
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Bonchi F, 2013, ACM SIGPLAN NOTICES, V48, P457, DOI 10.1145/2480359.2429124
   Bornholt J, 2017, ACM SIGPLAN NOTICES, V52, P467, DOI [10.1145/3140587.3062353, 10.1145/3062341.3062353]
   Dolan S, 2018, ACM SIGPLAN NOTICES, V53, P242, DOI [10.1145/3192366.3192421, 10.1145/3296979.3192421]
   Flur S, 2017, ACM SIGPLAN NOTICES, V52, P429, DOI 10.1145/3093333.3009839
   Gavrilenko N, 2019, LECT NOTES COMPUT SC, V11561, P355, DOI 10.1007/978-3-030-25540-4_19
   He F, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1264, DOI 10.1145/3453483.3454108
   KAMEDA T, 1970, IEEE T COMPUT, VC 19, P617, DOI 10.1109/T-C.1970.222994
   Kokologiannakis M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498711
   Kokologiannakis M, 2021, LECT NOTES COMPUT SC, V12759, P427, DOI 10.1007/978-3-030-81685-8_20
   Kokologiannakis M, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P1157, DOI 10.1145/3373376.3378480
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Kozen D, 1997, LECT NOTES COMPUT SC, V1258, P244
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lahav O, 2016, LECT NOTES COMPUT SC, V9995, P479, DOI 10.1007/978-3-319-48989-6_29
   Lahav O, 2016, ACM SIGPLAN NOTICES, V51, P649, DOI 10.1145/2914770.2837643
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Mador-Haim S, 2011, DES AUT CON, P504
   Mador-Haim Sela, 2010, CAV 2010, DOI [10.1007/978-3-642-14295-6\_26, DOI 10.1007/978-3-642-14295-6]
   Norris B, 2013, ACM SIGPLAN NOTICES, V48, P131, DOI [10.1145/2509136.2509514, 10.1145/2544173.2509514]
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Podkopaev A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290382
   Pulte C, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1, DOI 10.1145/3314221.3314624
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Sarkar S, 2012, ACM SIGPLAN NOTICES, V47, P311, DOI 10.1145/2345156.2254102
   Sarkar S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P175
   SPARC International Inc, 1994, SPARC ARCHITECTURE M
   Torlak E, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P341, DOI 10.1145/1806596.1806635
   Vafeiadis V, 2015, ACM SIGPLAN NOTICES, V50, P209, DOI [10.1145/2676726.2676995, 10.1145/2775051.2676995]
   Wickerson J, 2017, ACM SIGPLAN NOTICES, V52, P190, DOI 10.1145/3093333.3009838
   Yuval Filmus, 2022, IS POWER REGULAR LAN
NR 38
TC 4
Z9 4
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571212
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500019
OA gold
DA 2024-07-18
ER

PT J
AU Chen, YJ
   Wang, YP
   Goyal, M
   Dong, J
   Feng, Y
   Dillig, I
AF Chen, Yanju
   Wang, Yuepeng
   Goyal, Maruth
   Dong, James
   Feng, Yu
   Dillig, Isil
TI Synthesis-Powered Optimization of Smart Contracts via Data Type
   Refactoring
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Smart Contract; Data Type Refactoring
ID SUPPORT
AB Since executing a smart contract on the Ethereum blockchain costs money (measured in gas), smart contract developers spend significant effort in reducing gas usage. In this paper, we propose a new technique for reducing the gas usage of smart contracts by changing the underlying data layout. Given a smart contract P and a type-level transformation, our method automatically synthesizes a new contract P' that is functionally equivalent to P. Our approach provides a convenient DSL for expressing data type refactorings and employs program synthesis to generate the new version of the contract. We have implemented our approach in a tool called Solidare and demonstrate its capabilities on real-world smart contracts from Etherscan and GasStation. In particular, we show that our approach is effective at automating the desired data layout transformation and that it is useful for reducing gas usage of smart contracts that use rich data structures.
C1 [Chen, Yanju; Feng, Yu] Univ Calif Santa Barbara, Santa Barbara, CA 93106 USA.
   [Wang, Yuepeng] Simon Fraser Univ, Burnaby, BC, Canada.
   [Goyal, Maruth; Dillig, Isil] Univ Texas Austin, Austin, TX USA.
   [Dong, James] Stanford Univ, Stanford, CA USA.
C3 University of California System; University of California Santa Barbara;
   Simon Fraser University; University of Texas System; University of Texas
   Austin; Stanford University
RP Chen, YJ (corresponding author), Univ Calif Santa Barbara, Santa Barbara, CA 93106 USA.
EM yanju@cs.ucsb.edu; yuepeng@sfu.ca; maruth@cs.utexas.edu;
   dongj@stanford.edu; yufeng@cs.ucsb.edu; isil@cs.utexas.edu
OI Dillig, Isil/0000-0001-8006-1230; Chen, Yanju/0000-0002-6494-3126; Feng,
   Yu/0000-0003-1000-1229; Wang, Yuepeng/0000-0003-3370-2431
FU NSF [CCF-1811865, CCF-1712067, SaTC-1908494]; NSERC Discovery Grant;
   DARPA [N66001-22-C-4028]; Google Faculty Research Award
FX We would like to thank Shankara Pailoor, Rong Pan, and the anonymous
   reviewers for their helpful comments on an earlier version of this
   paper. This material is based on research sponsored by NSF CCF-1811865,
   CCF-1712067, SaTC-1908494, NSERC Discovery Grant, DARPA
   N66001-22-C-4028, and Google Faculty Research Award.
CR Albert Elvira, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12079), P118, DOI 10.1007/978-3-030-45237-7_7
   Albert E, 2020, LECT NOTES COMPUT SC, V12224, P177, DOI 10.1007/978-3-030-53288-8_10
   Albert E, 2019, LECT NOTES COMPUT SC, V11847, P63, DOI 10.1007/978-3-030-35092-5_5
   [Anonymous], 2010, Journal on Satisfiability, Boolean Modeling and Computation, DOI DOI 10.3233/SAT190075
   Balaban I, 2005, ACM SIGPLAN NOTICES, V40, P265, DOI 10.1145/1103845.1094832
   Buterin V., 2014, CISC VIS NETW IND GL, V3, P1, DOI DOI 10.1145/2939672.2939785
   Calzavara S, 2020, P IEEE COMPUT SECUR, P107, DOI 10.1109/CSF49147.2020.00016
   Chen T, 2018, 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: NEW IDEAS AND EMERGING TECHNOLOGIES RESULTS (ICSE-NIER), P81, DOI 10.1145/3183399.3183420
   Chen T, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P442, DOI 10.1109/SANER.2017.7884650
   Curino C, 2013, VLDB J, V22, P73, DOI 10.1007/s00778-012-0302-x
   Das A, 2020, LECT NOTES COMPUT SC, V12389, P333, DOI 10.1007/978-3-030-65474-0_15
   Delaware B, 2015, ACM SIGPLAN NOTICES, V50, P689, DOI [10.1145/2775051.2677006, 10.1145/2676726.2677006]
   Dig D, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P441, DOI 10.1145/1368088.1368148
   Ethereum, 2022, Ethereum Virtual Machine
   Ethereum, 2022, ABOUT US
   ETHGasStation, 2022, About us
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feser J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428238
   Hawkins P, 2012, ACM SIGPLAN NOTICES, V47, P417, DOI [10.1145/2345156.2254114, 10.1145/2345156.1993504]
   Hawkins P, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P38
   Henkel J, 2005, PROC INT CONF SOFTW, P274
   Jiang B, 2018, IEEE INT CONF AUTOM, P259, DOI 10.1145/3238147.3238177
   Kalra S, 2018, 25TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2018), DOI 10.14722/ndss.2018.23082
   Ketkar A, 2019, PROC INT CONF SOFTW, P1142, DOI 10.1109/ICSE.2019.00117
   Li A, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P438, DOI 10.1145/3385412.3385982
   Li CM, 2009, FRONT ARTIF INTEL AP, V185, P613, DOI 10.3233/978-1-58603-929-5-613
   Lin SK, 2021, Arxiv, DOI arXiv:2103.02209
   Loncaric C, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P958, DOI 10.1145/3180155.3180211
   Luu L, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P254, DOI 10.1145/2976749.2978309
   Lynce Ines, 2004, On computing minimum unsatisfiable cores
   Mariano B, 2020, IEEE INT CONF AUTOM, P262, DOI 10.1145/3324884.3416626
   Marques-Silva J, 2009, FRONT ARTIF INTEL AP, V185, P131, DOI 10.3233/978-1-58603-929-5-131
   Mitchell J., 1991, ARTIF INTELL, P305, DOI [10.1016/b978-0-12-450010-5.50023-2, DOI 10.1016/B978-0-12-450010-5.50023-2]
   Nagele J, 2020, Arxiv, DOI arXiv:2005.05912
   Pailoor S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P574, DOI 10.1145/3453483.3454063
   Permenev A, 2020, P IEEE S SECUR PRIV, P1661, DOI 10.1109/SP40000.2020.00024
   Qiu XK, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133889
   Sergey I, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360611
   Solar-Lezama A, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P136, DOI 10.1145/1375581.1375599
   Steimann F, 2009, LECT NOTES COMPUT SC, V5653, P419, DOI 10.1007/978-3-642-03013-0_19
   Tip F, 2003, ACM SIGPLAN NOTICES, V38, P13, DOI 10.1145/949343.949308
   Tip F, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1961204.1961205
   Wang YP, 2020, PROC VLDB ENDOW, V13, P1006, DOI 10.14778/3384345.3384350
   Wang YP, 2020, LECT NOTES COMPUT SC, V12031, P87, DOI 10.1007/978-3-030-41600-3_7
   Wang YP, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P286, DOI 10.1145/3314221.3314588
   Wood G., 2014, Ethereum project yellow paper, V151, P1
NR 46
TC 2
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 145
DI 10.1145/3563308
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200022
OA gold
DA 2024-07-18
ER

PT J
AU Choudhury, P
AF Choudhury, Pritam
TI Monadic and Comonadic Aspects of Dependency Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Graded Type System; Eilenberg-Moore Algebra; Presence-Absence Test
ID NOTIONS
AB Dependency analysis is vital to several applications in computer science. It lies at the essence of secure information flow analysis, binding-time analysis, etc. Various calculi have been proposed in the literature for analysing individual dependencies. Abadi et. al., by extending Moggi's monadic metalanguage, unified several of these calculi into the Dependency Core Calculus (DCC). DCC has served as a foundational framework for dependency analysis for the last two decades. However, in spite of its success, DCC has its limitations. First, the monadic bind rule of the calculus is nonstandard and relies upon an auxiliary protection judgement. Second, being of a monadic nature, the calculus cannot capture dependency analyses that possess a comonadic nature, for example, the binding-time calculus, lambda degrees, of Davies. In this paper, we address these limitations by designing an alternative dependency calculus that is inspired by standard ideas from category theory. Our calculus is both monadic and comonadic in nature and subsumes both DCC and lambda degrees. Our construction explains the nonstandard bind rule and the protection judgement of DCC in terms of standard categorical concepts. It also leads to a novel technique for proving correctness of dependency analysis. We use this technique to present alternative proofs of correctness for DCC and lambda degrees.
C1 [Choudhury, Pritam] Univ Penn, Dept Comp & Informat Sci, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Choudhury, P (corresponding author), Univ Penn, Dept Comp & Informat Sci, Philadelphia, PA 19104 USA.
EM pritam@seas.upenn.edu
OI Choudhury, Pritam/0000-0003-0432-7820
FU National Science Foundation [2006535, 1703835]
FX I was supported by the National Science Foundation under Grant Nos.
   2006535 and 1703835.
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Algehed M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341693
   Algehed M, 2018, PLAS'18: PROCEEDINGS OF THE 13TH WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY, P24, DOI 10.1145/3264820.3264823
   Bowman WJ, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P101, DOI 10.1145/2784731.2784733
   BROOKE S, 1991, CONTEMPORARY BRITISH HISTORY 1931-1961, P1
   Brunel A, 2014, LECT NOTES COMPUT SC, V8410, P351
   Calcagno C, 2003, LECT NOTES COMPUT SC, V2830, P57
   Choudhury P, 2022, LECT NOTES COMPUT SC, V13240, P403, DOI 10.1007/978-3-030-99336-8_15
   Choudhury Pritam, 2022, arXiv, DOI [10.48550/ARXIV.2209.06334, DOI 10.48550/ARXIV.2209.06334]
   Davies R, 2017, J ACM, V64, DOI 10.1145/3011069
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   Eilenberg S., 1966, P C CATEGORICAL ALGE, P421
   Fujii S, 2019, Arxiv, DOI arXiv:1904.08083
   Ghica DR, 2014, LECT NOTES COMPUT SC, V8410, P331
   Gifford DK, 1986, P 1986 ACM C LISP FU, P28, DOI DOI 10.1145/319838.319848
   Gluck R, 1995, LECT NOTES COMPUT SC, V982, P259, DOI 10.1007/BFb0026825
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Gomard C. K., 1991, Journal of Functional Programming, V1, P21, DOI 10.1017/S0956796800000058
   Hatcliff J., 1997, Mathematical Structures in Computer Science, V7, P507, DOI 10.1017/S0960129597002405
   Heintze N., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P365, DOI 10.1145/268946.268976
   Jacobs B., 1999, Categorical logic and type theory
   Katsumata S, 2014, ACM SIGPLAN NOTICES, V49, P633, DOI 10.1145/2535838.2535846
   Kavvos GA, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290333
   KOCK A, 1970, ARCH MATH, V21, P1, DOI 10.1007/BF01220868
   KOCK A, 1972, ARCH MATH, V23, P113, DOI 10.1007/BF01304852
   Mac Lane, 1971, CATEGORIES WORKING M
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Palsberg J., 1995, Static Analysis. Second International Symposium, SAS'95. Proceedings, P314
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Petricek T, 2013, LECT NOTES COMPUT SC, V7966, P385, DOI 10.1007/978-3-642-39212-2_35
   Shikuma N, 2007, LECT NOTES COMPUT SC, V4435, P301
   Smith G, 2007, ADV INF SEC, P291
   TIP F, 1995, J PROGRAM LANG, V3, P121
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tse S, 2004, ACM SIGPLAN NOTICES, V39, P115, DOI 10.1145/1016848.1016868
   Uustalu T, 2008, ELECTRON NOTES THEOR, V203, P263, DOI 10.1016/j.entcs.2008.05.029
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Wadler P., 2003, ACM Transactions on Computational Logic, V4, P1, DOI 10.1145/601775.601776
   Yan Mei Tang, 1995, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics- Based Program Manipulation. PEPM'95, P45, DOI 10.1145/215465.215552
NR 40
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 172
DI 10.1145/3563335
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200049
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Mishra, A
   Jagannathan, S
AF Mishra, Ashish
   Jagannathan, Suresh
TI Specification-Guided Component-Based Synthesis from Effectful Libraries
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Component-based Synthesis; Type Specifications; Effects; Conflict-Driven
   Learning
ID PROGRAM SYNTHESIS
AB Component-based synthesis seeks to build programs using the APIs provided by a set of libraries. Oftentimes, these APIs have effects, which make it challenging to reason about the correctness of potential synthesis candidates. This is because changes to global state made by effectful library procedures affect how they may be composed together, yielding an intractably large search space that can confound typical enumerative synthesis techniques. If the nature of these effects are exposed as part of their specification, however, deductive synthesis approaches can be used to help guide the search for components. In this paper, we present a new specification-guided synthesis procedure that uses Hoare-style pre- and post-conditions to express fine-grained effects of potential library component candidates to drive a bi-directional synthesis search strategy. The procedure alternates between a forward search process that seeks to build larger terms given an existing context but which is otherwise unaware of the actual goal, alongside a backward search mechanism that seeks terms consistent with the desired goal but which is otherwise unaware of the context from which these terms must be synthesized. To further improve efficiency and scalability, we integrate a conflict-driven learning procedure into the synthesis algorithm that provides a semantic characterization of previously encountered unsuccessful search paths that is used to prune the space of possible candidates as synthesis proceeds. We have implemented our ideas in a tool called Cobalt and demonstrate its effectiveness on a number of challenging synthesis problems defined over OCaml libraries equipped with effectful specifications.
C1 [Mishra, Ashish; Jagannathan, Suresh] Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Mishra, A (corresponding author), Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
EM mishr115@purdue.edu; suresh@cs.purdue.edu
OI Mishra, Ashish/0000-0002-0513-3107
FU DARPA
FX We thank the anonymous reviewers for their detailed comments and
   suggestions. Funding for this work material is supported in part by
   DARPA, under the Safe Documents (SafeDocs) program.
CR Albarghouthi A, 2016, ACM SIGPLAN NOTICES, V51, P789, DOI 10.1145/2914770.2837628
   Appel Andrew, 2021, Software Foundations, V5
   Biere A, 2009, FRONT ARTIF INTEL AP, V185, P457, DOI 10.3233/978-1-58603-929-5-457
   Chargueraud Arthur, 2017, ML FAM WORKSH
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Delaware B, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341686
   Delaware B, 2015, ACM SIGPLAN NOTICES, V50, P689, DOI [10.1145/2775051.2677006, 10.1145/2676726.2677006]
   Dunfield J, 2021, ACM COMPUT SURV, V54, DOI 10.1145/3450952
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   Ganzinger H, 2004, LECT NOTES COMPUT SC, V3114, P175, DOI 10.1007/978-3-540-27813-9_14
   Guo Z, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371080
   Guria SN, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P344, DOI 10.1145/3453483.3454048
   Itzhaky S, 2021, LECT NOTES COMPUT SC, V12759, P110, DOI 10.1007/978-3-030-81685-8_5
   Itzhaky S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P944, DOI 10.1145/3453483.3454087
   Itzhaky Shachar, 2017, LIPIcs, V68
   James MB, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428273
   Jha Susmit, 2010, Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering-Volume 1. ICSE'10, V1, P215, DOI DOI 10.1145/1806799.1806833
   Jim T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P417, DOI 10.1145/1706299.1706347
   Kneuss E, 2013, ACM SIGPLAN NOTICES, V48, P407, DOI [10.1145/2509136.2509555, 10.1145/2544173.2509555]
   Leroy Xavier, 2022, Parsing with Ocamllex
   MCCARTHY JF, 1993, MANIPULATION OF GROUNDWATER COLLOIDS FOR ENVIRONMENTAL RESTORATION, P35
   Mishra A, 2022, Arxiv, DOI [arXiv:2209.02752, 10.48550/ARXIV.2209.02752, DOI 10.48550/ARXIV.2209.02752]
   Mishra Ashish, 2022, Zenodo, DOI 10.5281/ZENODO.7065694
   Nanevski A, 2006, ACM SIGPLAN NOTICES, V41, P62, DOI 10.1145/1160074.1159812
   Nanevski A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P229
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Piskac Ruzica, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P773, DOI 10.1007/978-3-642-39799-8_54
   Polikarpova N, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290385
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Qiu XK, 2013, ACM SIGPLAN NOTICES, V48, P231, DOI 10.1145/2499370.2462169
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sekiyama T, 2017, ACM SIGPLAN NOTICES, V52, P530, DOI 10.1145/3093333.3009875
   Shi KS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290386
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   Wadler P., 2003, ACM Transactions on Computational Logic, V4, P1, DOI 10.1145/601775.601776
   Wang CL, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371117
   Zhang LT, 2001, ICCAD 2001: IEEE/ACM INTERNATIONAL CONFERENCE ON COMPUTER AIDED DESIGN, DIGEST OF TECHNICAL PAPERS, P279, DOI 10.1109/ICCAD.2001.968634
   Zhou Z, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485493
NR 41
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 147
DI 10.1145/3563310
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200024
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Le, QL
   Raad, A
   Villard, J
   Berdine, J
   Dreyer, D
   O'Hearn, PW
AF Quang Loc Le
   Raad, Azalea
   Villard, Jules
   Berdine, Josh
   Dreyer, Derek
   O'Hearn, Peter W.
TI Finding Real Bugs in Big Programs with Incorrectness Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE bug catching; incorrectness proving; incorrectness logic;
   compositionality
AB Incorrectness Logic (IL) has recently been advanced as a logical theory for compositionally proving the presence of bugs-dual to Hoare Logic, which is used to compositionally prove their absence. Though IL was motivated in large part by the aim of providing a logical foundation for bug-catching program analyses, it has remained an open question: is IL useful only retrospectively (to explain existing analyses), or can it actually be useful in developing new analyses which can catch real bugs in big programs?
   In this work, we develop Pulse-X, a new, automatic program analysis for catching memory errors, based on ISL, a recent synthesis of IL and separation logic. Using Pulse-X, we have found 15 new real bugs in OpenSSL, which we have reported to OpenSSL maintainers and have since been fixed. In order not to be overwhelmed with potential but false error reports, we develop a compositional bug-reporting criterion based on a distinction between latent and manifest errors, which references the under-approximate ISL abstractions computed by Pulse-X, and we investigate the fix rate resulting from application of this criterion. Finally, to probe the potential practicality of our bug-finding method, we conduct a comparison to Infer, a widely used analyzer which has proven useful in industrial engineering practice.
C1 [Quang Loc Le; Raad, Azalea; O'Hearn, Peter W.] UCL, London, England.
   [Quang Loc Le; Raad, Azalea; Villard, Jules; Berdine, Josh; O'Hearn, Peter W.] Meta, London, England.
   [Dreyer, Derek] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
C3 University of London; University College London
RP Le, QL (corresponding author), UCL, London, England.; Le, QL (corresponding author), Meta, London, England.
EM loc.le@ucl.ac.uk; azalea.raad@imperial.ac.uk; jul@fb.com;
   josh@berdine.net; dreyer@mpi-sws.org; p.ohearn@ucl.ac.uk
OI Villard, Jules/0000-0001-8637-0712; Berdine, Josh/0000-0002-9691-1348;
   Le, Quang Loc/0000-0002-6220-7539; Dreyer, Derek/0000-0002-3884-6867
FU UK's Engineering and Physical Sciences Research Council (EPSRC)
   [EP/R006865/1]; European Research Council (ERC) [683289]; UKRI Future
   Leaders Fellowship [MR/V024299/1]; EPSRC [EP/R006865/1] Funding Source:
   UKRI; FLF [MR/V024299/1] Funding Source: UKRI
FX This research was supported in part by a UK's Engineering and Physical
   Sciences Research Council (EPSRC): Grant number EP/R006865/1, a UKRI
   Future Leaders Fellowship [grant no. MR/V024299/1], and a European
   Research Council (ERC) Consolidator Grant for the project lRustBeltz,
   funded under the European Union's Horizon 2020 Framework Programme
   (grant agreement no. 683289).
CR Asadi A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P772, DOI 10.1145/3453483.3454076
   Ball T, 2005, LECT NOTES COMPUT SC, V3576, P67
   Binkley D, 2015, IEEE INT WORK C SO, P1, DOI 10.1109/SCAM.2015.7335396
   Brown Fraser, 29 USENIX SEC 20, P199
   Calcagno C, 2011, J ACM, V58, DOI 10.1145/2049697.2049700
   Calcagno C, 2009, ACM SIGPLAN NOTICES, V44, P289, DOI 10.1145/1594834.1480917
   Das A, 2015, LECT NOTES COMPUT SC, V9206, P324, DOI 10.1007/978-3-319-21690-4_19
   de Vries E, 2011, LECT NOTES COMPUT SC, V7041, P155, DOI 10.1007/978-3-642-24690-6_12
   Dillig I, 2012, ACM SIGPLAN NOTICES, V47, P181, DOI [10.1145/2345156.2254087, 10.1145/2345156.1993565]
   Distefano D, 2006, LECT NOTES COMPUT SC, V3920, P287
   Distefano D, 2019, COMMUN ACM, V62, P62, DOI 10.1145/3338112
   Facebook AI, 2021, FAIRN FLOW
   Godefroid P., 2007, SIGPLAN Notices, V42, P47, DOI [10.1145/1190216.1190226, 10.1145/1190215.1190226]
   Godefroid P, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P43, DOI 10.1145/1706299.1706307
   Ispoglou KK, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P2271
   Jhala R, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592438
   Khurshid S, 2003, LECT NOTES COMPUT SC, V2619, P553
   Le QL, 2014, LECT NOTES COMPUT SC, V8559, P52, DOI 10.1007/978-3-319-08867-9_4
   Moller Bernhard, 2021, REL ALG METH COMP SC
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   O'Hearn PW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371078
   OHearn Peter W., 2015, US
   Pendergrass JA, 2013, J HOPKINS APL TECH D, V32, P499
   Pham LH, 2019, LECT NOTES COMPUT SC, V11781, P209, DOI 10.1007/978-3-030-31784-3_12
   Raad A, 2020, LECT NOTES COMPUT SC, V12225, P225, DOI 10.1007/978-3-030-53291-8_14
   Raad Azalea, 2022, ARTIFACT APPENDIX FI, DOI [10.5281/zenodo, DOI 10.5281/ZENODO]
   Ramos David A., 2015, 24 USENIX SECURITY S, p49s64
   Sadowski C, 2018, COMMUN ACM, V61, P58, DOI 10.1145/3188720
   Santos Jose Fragoso, 2020, PROGRAMMING LANGUAGE, DOI DOI 10.1145/3385412.3386014
NR 30
TC 14
Z9 14
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 81
DI 10.1145/3527325
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300017
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Karimov, T
   Lefaucheux, E
   Ouaknine, J
   Purser, D
   Varonka, A
   Whiteland, MA
   Worrell, J
AF Karimov, Toghrul
   Lefaucheux, Engel
   Ouaknine, Joel
   Purser, David
   Varonka, Anton
   Whiteland, Markus A.
   Worrell, James
TI What's Decidable about Linear Loops?
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE linear dynamical systems; MSO model checking; verification
ID TERMINATION PROOFS
AB We consider the MSO model-checking problem for simple linear loops, or equivalently discrete-time linear dynamical systems, with semialgebraic predicates (i.e., Boolean combinations of polynomial inequalities on the variables). We place no restrictions on the number of program variables, or equivalently the ambient dimension. We establish decidability of the model-checking problem provided that each semialgebraic predicate either has intrinsic dimension at most 1, or is contained within some three-dimensional subspace. We also note that lifting either of these restrictions and retaining decidability would necessarily require major breakthroughs in number theory.
C1 [Karimov, Toghrul; Lefaucheux, Engel; Ouaknine, Joel; Purser, David; Varonka, Anton; Whiteland, Markus A.] Max Planck Inst Software Syst, Saarland Informat Campus, Saarbrucken, Germany.
   [Varonka, Anton] Saarbrucken Grad Sch Comp Sci, Saarland Informat Campus, Saarbrucken, Germany.
   [Worrell, James] Univ Oxford, Dept Comp Sci, Oxford, England.
C3 Max Planck Society; University of Oxford
RP Karimov, T (corresponding author), Max Planck Inst Software Syst, Saarland Informat Campus, Saarbrucken, Germany.
RI Purser, David/JXM-6090-2024
OI Karimov, Toghrul/0000-0002-9405-2332; Whiteland,
   Markus/0000-0002-6006-9902; Lefaucheux, Engel/0000-0003-0875-300X;
   Varonka, Anton/0000-0001-5758-0657
FU DFG [389792660, TRR 248]; ERC [648701, ARTIST 101002685]; EPSRC
   Fellowship [EP/N008197/1]; WWTF [ICT19-018]; EPSRC [EP/N008197/1]
   Funding Source: UKRI; European Research Council (ERC) [648701] Funding
   Source: European Research Council (ERC)
FX This work was funded by DFG grant 389792660 as part of TRR 248 (see
   https://perspicuouscomputing.science).Joel Ouaknine was supported by ERC
   grant AVS-ISS (648701), and is also affiliated with Keble College,
   Oxford as emmy.network Fellow. James Worrell was supported by EPSRC
   Fellowship EP/N008197/1. Anton Varonka was supported by ERC Consolidator
   Grant ARTIST 101002685 and WWTF ICT19-018 grant ProbInG.
CR Agrawal M, 2015, J ACM, V62, DOI 10.1145/2629417
   Almagor S, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434329
   Almagor S, 2021, THEOR COMPUT SYST, V65, P638, DOI 10.1007/s00224-020-09976-7
   Almagor S, 2019, 36TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF COMPUTER SCIENCE (STACS 2019), DOI 10.4230/LIPIcs.STACS.2019.6
   Almagor Shaull, 2018, LIPIcs, V107, DOI [DOI 10.4230/LIPICS.ICALP.2018.114, 10.4230/LIPIcs.ICALP, DOI 10.4230/LIPICS.ICALP]
   Almagor Shaull, 2017, LIPICS, V80, DOI [10.4230/LIPIcs.ICALP.2017.24, DOI 10.4230/LIPICS.ICALP.2017.24]
   [Anonymous], 2003, Mathematical Surveys and Monographs
   Baier Christel, ORBIT PROBLEM PARAME, V28, DOI [10.4230/LIPIcs.CONCUR.2021.28, DOI 10.4230/LIPICS.CONCUR.2021.28]
   Ben-Amram AM, 2019, LECT NOTES COMPUT SC, V11822, P459, DOI 10.1007/978-3-030-32304-2_22
   Ben-Amram AM, 2017, LECT NOTES COMPUT SC, V10427, P601, DOI 10.1007/978-3-319-63390-9_32
   Ben-Amram AM, 2014, J ACM, V61, DOI 10.1145/2629488
   Ben-Amram AM, 2013, ACM SIGPLAN NOTICES, V48, P51, DOI 10.1145/2480359.2429078
   Bochnak J., 1998, ERGEBNISSE MATH IHRE, V36
   Boigelot B, 2003, THEOR COMPUT SCI, V309, P413, DOI 10.1016/S0304-3975(03)00314-1
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3653, P488, DOI 10.1007/11539452_37
   Braverman M, 2006, LECT NOTES COMPUT SC, V4144, P372, DOI 10.1007/11817963_34
   Cai YY, 2000, SIAM J COMPUT, V29, P1878, DOI 10.1137/S0097539794276853
   Chen HY, 2015, INT J SOFTW TOOLS TE, V17, P47, DOI 10.1007/s10009-013-0288-8
   Chonev V., 2015, P 26 ANN ACM SIAM S, P940
   Chonev V, 2016, J ACM, V63, DOI 10.1145/2857050
   Chonev V, 2013, STOC'13: PROCEEDINGS OF THE 2013 ACM SYMPOSIUM ON THEORY OF COMPUTING, P941
   Colon M. A., 2001, Tools and Algorithms for the Construction and Analysis of Systems. 7th International Conference, TACAS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2031), P67
   Colón MA, 2003, LECT NOTES COMPUT SC, V2725, P420
   Cook B, 2006, LECT NOTES COMPUT SC, V4144, P415, DOI 10.1007/11817963_37
   Cook B, 2006, ACM SIGPLAN NOTICES, V41, P415, DOI 10.1145/1133981.1134029
   Cousot P, 2005, LECT NOTES COMPUT SC, V3385, P1
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Fijalkow N, 2019, THEOR COMPUT SYST, V63, P1027, DOI 10.1007/s00224-019-09913-3
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Gupta AK, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P147, DOI 10.1145/1328438.1328459
   Halava V, 2006, DISCRETE APPL MATH, V154, P447, DOI 10.1016/j.dam.2005.10.009
   HANSEL G, 1985, LECT NOTES COMPUT SC, V194, P244
   Harrison MA., 1969, Lectures on Linear Sequential Machines
   Hosseini Mehran, 2019, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V132, DOI [10.4230/LIPIcs.ICALP.2019.118, DOI 10.4230/LIPICS.ICALP.2019.118]
   Jeannet B, 2014, ACM SIGPLAN NOTICES, V49, P529, DOI 10.1145/2535838.2535843
   Jhala R., 2018, HDB MODEL CHECKING, P447, DOI DOI 10.1007/978-3-319-10575-8_15
   KANNAN R, 1986, J ACM, V33, P808, DOI 10.1145/6490.6496
   Kannan Ravindran, 1980, PROC STOC, DOI DOI 10.1145/800141.804673
   Karimov Toghrul, 2020, SCHLOSS DAGSTUHL LEI, V54, p1s54:14, DOI DOI 10.4230/LIPICS.MFCS.2020.54
   Kauers M, 2011, TEXT MG SYMB COMPUT, P1, DOI 10.1007/978-3-7091-0445-3
   Kincaid Z, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290368
   Kincaid Z, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158142
   Laohakosol V, 2009, DISCRETE APPL MATH, V157, P3239, DOI 10.1016/j.dam.2009.06.021
   Lefaucheux E, 2021, LECT NOTES COMPUT SC, V12760, P172, DOI 10.1007/978-3-030-81688-9_8
   Leucker M, 2009, J LOGIC ALGEBR PROGR, V78, P293, DOI 10.1016/j.jlap.2008.08.004
   Markey N, 2003, LECT NOTES COMPUT SC, V2761, P251
   Masser D. W, 1988, NEW ADV TRANSCENDENC, P248, DOI DOI 10.1017/CBO9780511897184.016
   MIGNOTTE M, 1984, J REINE ANGEW MATH, V349, P63
   Mignotte Maurice, 1982, SOME USEFUL BOUNDS, P259, DOI [DOI 10.1007/978-3-7091-3406-1_16, 10.1007/978-3- 7091- 3406- 1_16]
   Muchnik A, 2003, THEOR COMPUT SCI, V304, P1, DOI 10.1016/S0304-3975(02)00847-2
   Ouaknine J, 2017, PROCEEDINGS OF THE 20TH INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL (PART OF CPS WEEK) (HSCC' 17), P11, DOI 10.1145/3049797.3054956
   Ouaknine J, 2014, LECT NOTES COMPUT SC, V8573, P330
   Ouaknine J, 2014, LECT NOTES COMPUT SC, V8573, P318
   Ouaknine Joel, 2015, ACM SIGLOG News, V2, P4
   Ouaknine OW14b Joel, 2014, P 25 ANN ACM SIAM S, P366
   Podelski A, 2004, IEEE S LOG, P32, DOI 10.1109/LICS.2004.1319598
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   Rodríguez-Carbonell E, 2007, J SYMB COMPUT, V42, P443, DOI 10.1016/j.jsc.2007.01.002
   Rodríguez-Carbonell E, 2004, LECT NOTES COMPUT SC, V3148, P280
   SEMENOV AL, 1983, MATH USSR IZV+, V47, P587
   Tarasov Sergey, 2011, Computer Science - Theory and Applications. Proceedings of the 6th International Computer Science Symposium in Russia, CSR 2011, P305, DOI 10.1007/978-3-642-20712-9_24
   Tiwari A, 2004, LECT NOTES COMPUT SC, V3114, P70
NR 62
TC 9
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 65
DI 10.1145/3498727
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900066
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Miltner, A
   Nuñez, AT
   Brendel, A
   Chaudhuri, S
   Dillig, I
AF Miltner, Anders
   Nunez, Adrian Trejo
   Brendel, Ana
   Chaudhuri, Swarat
   Dillig, Isil
TI Bottom-Up Synthesis of Recursive Functional Programs using Angelic
   Execution
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Angelic Execution; Logical Specifications
ID FRAMEWORK
AB We present a novel bottom-up method for the synthesis of functional recursive programs. While bottom-up synthesis techniques can work better than top-down methods in certain settings, there is no prior technique for synthesizing recursive programs from logical specifications in a purely bottom-up fashion. The main challenge is that effective bottom-up methods need to execute sub-expressions of the code being synthesized, but it is impossible to execute a recursive subexpression of a program that has not been fully constructed yet. In this paper, we address this challenge using the concept of angelic semantics. Specifically, our method finds a program that satisfies the specification under angelic semantics (we refer to this as angelic synthesis), analyzes the assumptions made during its angelic execution, uses this analysis to strengthen the specification, and finally reattempts synthesis with the strengthened specification. Our proposed angelic synthesis algorithm is based on version space learning and therefore deals effectively with many incremental synthesis calls made during the overall algorithm. We have implemented this approach in a prototype called Burst and evaluate it on synthesis problems from prior work. Our experiments show that Burst is able to synthesize a solution to 94% of the benchmarks in our benchmark suite, outperforming prior work.
C1 [Miltner, Anders; Nunez, Adrian Trejo; Brendel, Ana; Chaudhuri, Swarat; Dillig, Isil] UT Austin, Austin, TX 78712 USA.
C3 University of Texas System; University of Texas Austin
RP Miltner, A (corresponding author), UT Austin, Austin, TX 78712 USA.
EM amiltner@cs.utexas.edu; atrejo@cs.utexas.edu; anabrendel@utexas.edu;
   swarat@cs.utexas.edu; isil@cs.utexas.edu
OI Brendel, Ana/0000-0001-6188-9980; Trejo Nunez,
   Adrian/0000-0002-5658-9956; Dillig, Isil/0000-0001-8006-1230; Miltner,
   Anders/0000-0002-8338-4008
FU NSF Award [1762299, 1811865, 1918651]; DARPA [FA8750-20-C-0002,
   FA8750-20-C-0208]; US Air Force; Division of Computing and Communication
   Foundations; Direct For Computer & Info Scie & Enginr [1762299, 1918651,
   1811865] Funding Source: National Science Foundation
FX We thank our anonymous reviewers, our anonymous shepherd, Ben Mariano,
   and Todd Millstein for their helpful feedback. We thank Michael James,
   Tristan Knoth, and Nadia Polikarpova for their help with Synquid and the
   tooling surrounding it. This work is supported in part by NSF Award
   1762299, NSF Award 1811865, NSF Award 1918651, DARPA Contract
   FA8750-20-C-0208, and US Air Force and DARPA Contract FA8750-20-C-0002.
CR Albarghouthi Aws, 2013, INT C COMPUTER AIDED, P934
   Alur R, 2015, LECT NOTES COMPUT SC, V9207, P163, DOI 10.1007/978-3-319-21668-3_10
   Barowy DW, 2015, ACM SIGPLAN NOTICES, V50, P218, DOI [10.1145/2813885.2737952, 10.1145/2737924.2737952]
   Broy M., 1981, C TREES ALGEBRA PROG, P162, DOI [10.5555/648216.750907, DOI 10.5555/648216.750907]
   Comon H., 2008, TREE AUTOMATA TECHNI
   DOWNEY PJ, 1980, J ACM, V27, P758, DOI 10.1145/322217.322228
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Huang KJ, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1159, DOI 10.1145/3385412.3386027
   Itzhaky S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P944, DOI 10.1145/3453483.3454087
   Kitzelmann E, 2006, J MACH LEARN RES, V7, P429
   Kneuss E, 2013, ACM SIGPLAN NOTICES, V48, P407, DOI [10.1145/2509136.2509555, 10.1145/2544173.2509555]
   Lau Tessa., 2003, P 2 INT C KNOWLEDGE, P36, DOI [10.1145/945645.945654, DOI 10.1145/945645.945654]
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Lee W, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434335
   Long F, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P166, DOI 10.1145/2786805.2786811
   Lubin J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408991
   Madhusudan Parthasarathy., 2011, CSL, P428, DOI 10.4230/LIPIcs.CSL
   Mechtaev S, 2016, PROC INT CONF SOFTW, P691, DOI 10.1145/2884781.2884807
   Miltner Anders., 2022, P 49 ANN ACM SIGPLAN, V1, P31
   Odena Augustus., 2020, ARXIV PREPRINT ARXIV
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Shi KS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290386
   SUMMERS PD, 1977, J ACM, V24, P161, DOI 10.1145/321992.322002
   Udupa A, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2499370.2462174
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
   Wang XY, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133886
   Wang YP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276525
NR 33
TC 10
Z9 10
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 21
DI 10.1145/3498682
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900022
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Barbar, M
   Sui, YL
AF Barbar, Mohamad
   Sui, Yulei
TI Compacting Points-To Sets through Object Clustering
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE staged points-to analysis; points-to sets; bit-vectors; hierarchical
   clustering
AB Inclusion-based set constraint solving is the most popular technique for whole-program points-to analysis whereby an analysis is typically formulated as repeatedly resolving constraints between points-to sets of program variables. The set union operation is central to this process. The number of points-to sets can grow as analyses become more precise and input programs become larger, resulting in more time spent performing unions and more space used storing these points-to sets. Most existing approaches focus on improving scalability of precise points-to analyses from an algorithmic perspective and there has been less research into improving the data structures behind the analyses.
   Bit-vectors as one of the more popular data structures have been used in several mainstream analysis frameworks to represent points-to sets. To store memory objects in bit-vectors, objects need to mapped to integral identifiers. We observe that this object-to-identifier mapping is critical for a compact points-to set representation and the set union operation. If objects in the same points-to sets (co-pointees) are not given numerically close identifiers, points-to resolution can cost significantly more space and time. Without data on the unpredictable points-to relations which would be discovered by the analysis, an ideal mapping is extremely challenging.
   In this paper, we present a new approach to inclusion-based analysis by compacting points-to sets through object clustering. Inspired by recent staged analysis where an auxiliary analysis produces results approximating a more precise main analysis, we formulate points-to set compaction as an optimisation problem solved by integer programming using constraints generated from the auxiliary analysis's results in order to produce an effective mapping. We then develop a more approximate mapping, yet much more efficiently, using hierarchical clustering to compact bit-vectors. We also develop an improved representation of bit-vectors (called core bit-vectors) to fully take advantage of the newly produced mapping. Our approach requires no algorithmic change to the points-to analysis. We evaluate our object clustering on flow-sensitive points-to analysis using 8 open-source programs (>3.1 million lines of LLVM instructions) and our results show that our approach can successfully improve the analysis with an up to 1.83x speed up and an up to 4.05x reduction in memory usage.
C1 [Barbar, Mohamad; Sui, Yulei] Univ Technol Sydney, Sydney, NSW, Australia.
   [Barbar, Mohamad] CSIRO, Data61, Sydney, NSW, Australia.
C3 University of Technology Sydney; Commonwealth Scientific & Industrial
   Research Organisation (CSIRO)
RP Barbar, M (corresponding author), Univ Technol Sydney, Sydney, NSW, Australia.; Barbar, M (corresponding author), CSIRO, Data61, Sydney, NSW, Australia.
EM mohamad.barbar@student.uts.edu.au
RI Sui, Yulei/AAL-5915-2020
OI Sui, Yulei/0000-0002-9510-6574
FU CSIRO's Data61; Australian Research Grants [DP200101328, DP210101348]
FX We thank the anonymous reviewers for their reviews and suggestions andwe
   thank Joakim Skarding for his useful insights on optimisation and
   integer programming. For most of the duration of this project, the first
   author was supported by a PhD scholarship funded by CSIRO's Data61. This
   research is supported by Australian Research Grants DP200101328 and
   DP210101348.
CR Andersen L. O., 1994, Technical Report
   Balatsouras George, 2016, P STAT AN S SAS 16, DOI [10.1007/978-3-662-53413-7_5, DOI 10.1007/978-3-662-53413-7_5]
   Barbar M, 2021, INT SYM CODE GENER, P222, DOI 10.1109/CGO51591.2021.9370334
   Barbar Mohamad, 2021, **DATA OBJECT**, DOI 10.5281/zenodo.5507442
   Barbar Mohamad, 2020, 34 EUROPEAN C OBJECT, DOI DOI 10.4230/LIPICS.ECOOP.2020.24
   Berndl M, 2003, ACM SIGPLAN NOTICES, V38, P103, DOI 10.1145/780822.781144
   Bravenboer Martin, 2009, P 24 ACM SIGPLAN C O, P243, DOI [DOI 10.1145/1640089.1640108, 10.1145/1640089.1640108]
   Chow F., 1996, Compiler Construction. 6th International Conference, CC'96. Proceedings, P253
   Fahndrich M, 1998, ACM SIGPLAN NOTICES, V33, P85, DOI 10.1145/277652.277667
   Fink SJ, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348255
   Hardekopf B, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P290, DOI 10.1145/1250734.1250767
   Hardekopf B, 2011, INT SYM CODE GENER, P289, DOI 10.1109/CGO.2011.5764696
   Hardekopf B, 2009, ACM SIGPLAN NOTICES, V44, P226, DOI 10.1145/1594834.1480911
   Hardekopf Ben, INT STAT AN S SAS 07, P265, DOI [10.1007/978-3-540-74061-2_17, DOI 10.1007/978-3-540-74061-2_17]
   Heintze N, 2001, ACM SIGPLAN NOTICES, V36, P254, DOI 10.1145/381694.378855
   ISO/IEC, 2017, 148822017 ISOIEC
   Jaccard P., 1912, New Phytologist, V11, P37, DOI [10.1111/j.1469-8137.1912.tb05611.x, DOI 10.1111/J.1469-8137.1912.TB05611.X]
   Jeon M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276510
   Jeon M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428247
   Kuderski J, 2019, 2019 FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P37, DOI [10.23919/fmcad.2019.8894275, 10.23919/FMCAD.2019.8894275]
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lei YX, 2019, LECT NOTES COMPUT SC, V11822, P27, DOI 10.1007/978-3-030-32304-2_3
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Lhoták O, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1926385.1926389
   Liu BZ, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3293606
   Livshits B, 2015, COMMUN ACM, V58, P44, DOI 10.1145/2644805
   Méndez-Lojo M, 2010, ACM SIGPLAN NOTICES, V45, P428, DOI 10.1145/1932682.1869495
   Müllner D, 2013, J STAT SOFTW, V53, P1
   MURTAGH F, 1983, COMPUT J, V26, P354, DOI 10.1093/comjnl/26.4.354
   Oh H, 2012, ACM SIGPLAN NOTICES, V47, P229, DOI 10.1145/2345156.2254092
   Pearce DJ, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1290520.1290524
   Pearce DJ, 2003, THIRD IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION - PROCEEDINGS, P3, DOI 10.1109/SCAM.2003.1238026
   Pereira FMQ, 2009, INT SYM CODE GENER, P126, DOI 10.1109/CGO.2009.9
   Rokach L, 2005, DATA MINING AND KNOWLEDGE DISCOVERY HANDBOOK, P321, DOI 10.1007/0-387-25465-X_15
   Rountev A, 2000, ACM SIGPLAN NOTICES, V35, P47, DOI 10.1145/358438.349310
   Schubert PD, 2019, LECT NOTES COMPUT SC, V11428, P393, DOI 10.1007/978-3-030-17465-1_22
   SMARAGDAKIS Y, 2011, P 38 ANN ACM SIGPLAN, V38, P11, DOI DOI 10.1145/1926385.1926390
   Smaragdakis Y, 2013, ACM SIGPLAN NOTICES, V48, P253, DOI [10.1145/2509136.2509524, 10.1145/2544173.2509524]
   Sui YL, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P460, DOI 10.1145/2950290.2950296
   Sui YL, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P265, DOI 10.1145/2892208.2892235
   Sui Yulei, 2012, P INT S SOFTW TEST A, P254, DOI [DOI 10.1145/2338965.2336784, DOI 10.1145/04000800.2336784]
   Tavares A, 2014, LECT NOTES COMPUT SC, V8409, P18
   Toussi Hamid A, 2013, INT J COMPUTER THEOR, V5, P494, DOI [10.7763/IJCTE, DOI 10.7763/IJCTE]
   Whaley John, 2007, THESIS STANFORD U US
   WLLVM, 2021, WHOL PROGR LLVM GO
   Zhu JW, 2004, ACM SIGPLAN NOTICES, V39, P145, DOI 10.1145/996893.996860
NR 46
TC 4
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 159
DI 10.1145/3485547
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200071
OA gold
DA 2024-07-18
ER

PT J
AU Malewski, S
   Greenberg, M
   Tanter, É
AF Malewski, Stefan
   Greenberg, Michael
   Tanter, Eric
TI Gradually Structured Data
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE gradual typing; algebraic datatypes; semi-structured data
AB Dynamically-typed languages offer easy interaction with ad hoc data such as JSON and S-expressions; statically-typed languages offer powerful tools for working with structured data, notably algebraic datatypes, which are a core feature of typed languages both functional and otherwise. Gradual typing aims to reconcile dynamic and static typing smoothly. The gradual typing literature has extensively focused on the computational aspect of types, such as type safety, effects, noninterference, or parametricity, but the application of graduality to data structuring mechanisms has been much less explored. While row polymorphism and set-theoretic types have been studied in the context of gradual typing, algebraic datatypes in particular have not, which is surprising considering their wide use in practice. We develop, formalize, and prototype a novel approach to gradually structured data with algebraic datatypes. Gradually structured data bridges the gap between traditional algebraic datatypes and flexible data management mechanisms such as tagged data in dynamic languages, or polymorphic variants in OCaml. We illustrate the key ideas of gradual algebraic datatypes through the evolution of a small server application from dynamic to progressively more static checking, formalize a core functional language with gradually structured data, and establish its metatheory, including the gradual guarantees.
C1 [Malewski, Stefan; Tanter, Eric] Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Santiago, Chile.
   [Greenberg, Michael] Stevens Inst Technol, Hoboken, NJ 07030 USA.
   [Tanter, Eric] Univ Chile, Inst Milenio Fundamento Datos IMFD, Santiago, Chile.
   [Tanter, Eric] IMFD, Santiago, Chile.
C3 Universidad de Chile; Stevens Institute of Technology; Universidad de
   Chile
RP Malewski, S (corresponding author), Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Santiago, Chile.
OI Greenberg, Michael/0000-0003-0014-7670; Malewski,
   Mara/0000-0002-9187-0575
FU ANID FONDECYT Regular Project [1190058]; Millennium Science Initiative
   Program [ICN17_002]; Harvard University; ANID/Scholarship Program/Beca
   de doctorado nacional/2021 [21210982]
FX S. Malewski is funded by ANID/Scholarship Program/Beca de doctorado
   nacional/2021 -21210982. E. Tanter is partially funded by the ANID
   FONDECYT Regular Project 1190058 and the Millennium Science Initiative
   Program: code ICN17_002. M. Greenberg did some of this work while at
   Pomona College and with support from Harvard University.
CR Ahmed A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110283
   Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   Schwerter FB, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283, DOI 10.1145/2628136.2628149
   Bauman S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133878
   Benzaken V, 2003, ACM SIGPLAN NOTICES, V38, P51, DOI 10.1145/944746.944711
   Buneman P., 1997, Proceedings of the Sixteenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, PODS 1997, P117, DOI 10.1145/263661.263675
   Campos JR, 2019, PHARM DEV TECHNOL, V24, P616, DOI 10.1080/10837450.2018.1549075
   Castagna G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110285
   Castagna G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290329
   Czaplicki E, 2013, ACM SIGPLAN NOTICES, V48, P411, DOI 10.1145/2499370.2462161
   Fagan Mike, 1991, THESIS RICE U
   Felleisen Matthias, 1986, P IFIP TC 2WG22 WORK
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia R, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2676726.2676992, 10.1145/2775051.2676992]
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Garrigue Jacques., 1998, ML WORKSH BALT, V13, P7
   Godek Panicz Maciej, 2020, SRFI 200 PATTERN MAT
   Greenberg Michael, 2019, SNAPL, V136, P20, DOI DOI 10.4230/LIPICS.SNAPL.2019.6
   Greenman B, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000217
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Igarashi A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110282
   Igarashi Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110284
   Jafery KA, 2017, ACM SIGPLAN NOTICES, V52, P804, DOI 10.1145/3093333.3009865
   Kelsey R., 1999, SRFI 9: Defining Record Types
   Klabnik S., 2018, The Rust Programming Language
   Kuhlenschmidt A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P517, DOI 10.1145/3314221.3314627
   Lehmann N, 2017, ACM SIGPLAN NOTICES, V52, P775, DOI 10.1145/3093333.3009856
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Leroy Xavier, 2021, The OCaml system release 4.13: Documentation and user's manual
   New MS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371114
   Odersky Martin, 2006, 2006001 EPFL
   Oxford, 2021, OXFORD ADV LEARNERS
   Schwerter FB, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434342
   Schwerter FB, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000162
   Sekiyama Taro, 2020, WORKSH GRAD TYP WGT
   Sergey I, 2012, LECT NOTES COMPUT SC, V7211, P579, DOI 10.1007/978-3-642-28869-2_29
   Siek Jeremy G., 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P388, DOI 10.1007/978-3-319-30936-1_21
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   Siek JG, 2010, ACM SIGPLAN NOTICES, V45, P365, DOI 10.1145/1707801.1706342
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Takikawa A, 2012, ACM SIGPLAN NOTICES, V47, P793, DOI 10.1145/2398857.2384674
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tobin-Hochstadt Sam, 2014, TYPED RACKET REFEREN
   Toro M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290330
   Toro M, 2020, SCI COMPUT PROGRAM, V197, DOI 10.1016/j.scico.2020.102496
   Toro M, 2017, LECT NOTES COMPUT SC, V10422, P382, DOI 10.1007/978-3-319-66706-5_19
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276502
   WAND M, 1991, INFORM COMPUT, V93, P1, DOI 10.1016/0890-5401(91)90050-C
   Wand M., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P37
   Wolff R, 2011, LECT NOTES COMPUT SC, V6813, P459, DOI 10.1007/978-3-642-22655-7_22
   Zenger M, 2001, ACM SIGPLAN NOTICES, V36, P241, DOI 10.1145/507669.507665
NR 55
TC 4
Z9 4
U1 1
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 126
DI 10.1145/3485503
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200030
OA gold
DA 2024-07-18
ER

PT J
AU Wolff, F
   Bíly, A
   Matheja, C
   Müller, P
   Summers, AJ
AF Wolff, Fabian
   Bily, Aurel
   Matheja, Christoph
   Mueller, Peter
   Summers, Alexander J.
TI Modular Specification and Verification of Closures in Rust
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Rust; closures; higher-order functions; software verification
AB Closures are a language feature supported by many mainstream languages, combining the ability to package up references to code blocks with the possibility of capturing state from the environment of the closure's declaration. Closures are powerful, but complicate understanding and formal reasoning, especially when closure invocations may mutate objects reachable from the captured state or from closure arguments.
   This paper presents a novel technique for the modular specification and verification of closure-manipulating code in Rust. Our technique combines Rust's type system guarantees and novel specification features to enable formal verification of rich functional properties. It encodes higher-order concerns into a first-order logic, which enables automation via SMT solvers. Our technique is implemented as an extension of the deductive verifier Prusti, with which we have successfully verified many common idioms of closure usage.
C1 [Wolff, Fabian; Bily, Aurel; Matheja, Christoph; Mueller, Peter] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
   [Summers, Alexander J.] Univ British Columbia, Dept Comp Sci, Vancouver, BC, Canada.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; University of
   British Columbia
RP Wolff, F (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
EM fabian.wolff@alumni.ethz.ch; aurel.bily@inf.ethz.ch;
   cmatheja@inf.ethz.ch; peter.mueller@inf.ethz.ch; alex.summers@ubc.ca
RI Wolff, Fabian/JNS-5187-2023; Matheja, Christoph/HZK-7338-2023
OI Matheja, Christoph/0000-0001-9151-0441; Summers,
   Alexander/0000-0001-5554-9381; Bily, Aurel/0000-0002-9284-9161
FU AWS
FX We would like to thank the anonymous reviewers for their constructive
   feedback. We would also like to thank Jichun Wu for helping us collect
   data on the usage of Rust closures in practice. We thank Vytautas
   Astrauskas and Federico Poli for supporting us with the integration of
   our verification technique into the Prusti verifier. We acknowledge AWS
   for partially supporting our work.
CR [Anonymous], 2008, JML Reference Manual
   Astrauskas V, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360573
   Astrauskas V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428204
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Chargueraud A., 2008, PROC ACM SIGPLAN INT, P213, DOI DOI 10.1145/1411204.1411235
   Cohen Ernie, 2015, VERIFYING C PROGRAMS
   Darvas A, 2007, LECT NOTES COMPUT SC, V4422, P336
   de Moura L, 2007, LECT NOTES ARTIF INT, V4603, P183
   Dhara KK, 1996, PROC INT CONF SOFTW, P258, DOI 10.1109/ICSE.1996.493421
   Evans AN, 2020, PROC INT CONF SOFTW, P246
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Harel David, 2002, DYNAMIC LOGIC, P99, DOI DOI 10.1007/978-94-017-0456-4_2
   Honda Kohei, 2005, 20 ANN IEEE S LOG CO, DOI [10.1109/LICS.2005.5, DOI 10.1109/LICS.2005.5]
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Kanig J, 2009, ML'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN WORKSHOP ON ML, P39
   Kassios IT, 2006, LECT NOTES COMPUT SC, V4085, P268
   Kassios Ioannis T., 2010, SPECIFICATION VERIFI, DOI [10.3929/ETHZA-006843251, DOI 10.3929/ETHZA-006843251]
   Klabnik Steve, RUST PROGRAMMING LAN
   Krishnaswami Neelakantan R., 2012, THESIS CARNEGIE MELL, DOI [10.1184/R1/6724235.v1, DOI 10.1184/R1/6724235.V1]
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Leavens GT, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2766446
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Matsakis Nicholas D., 2013, CASE RECURRING CLOSU
   Mazinanian D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133909
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Nanevski A, 2008, ACM SIGPLAN NOTICES, V43, P229, DOI 10.1145/1411203.1411237
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   Nordio M, 2010, LECT NOTES COMPUT SC, V6141, P79, DOI 10.1007/978-3-642-13953-6_5
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2000, J ACM, V47, P167, DOI 10.1145/331605.331611
   Pereira M.J.P., 2018, THESIS U PARIS SACLA
   Régis-Gianas Y, 2008, LECT NOTES COMPUT SC, V5133, P305
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Shaner Steve M., 2007, OOPSLA ASS COMP MACH, DOI [10.1145/1297027.1297053, DOI 10.1145/1297027.1297053]
   Smans J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160911
   Smans J, 2010, LECT NOTES COMPUT SC, V6117, P170
   Soundarajan N, 2004, LECT NOTES COMPUT SC, V2635, P302
   Svendsen K, 2010, LECT NOTES COMPUT SC, V6183, P175, DOI 10.1007/978-3-642-14107-2_9
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   Wolf F., 2021, P ICC 2021 IEEE INT, P1
   Wolff Fabian, 2021, Modular Specification and Verification of Closures in Rust (artefact), DOI 10.5281/zenodo.5482557
   Wolff Fabian, 2020, THESIS ETH ZURICH, DOI [10.3929/ethz-b-000444764, DOI 10.3929/ETHZ-B-000444764]
   Yoshida N, 2007, LECT NOTES COMPUT SC, V4423, P361
NR 44
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 145
DI 10.1145/3485522
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200048
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Bahr, P
   Graulund, CU
   Mogelberg, RE
AF Bahr, Patrick
   Graulund, Christian Uldal
   Mogelberg, Rasmus Ejlers
TI Diamonds Are Not Forever
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Functional Reactive Programming; Modal Types; Linear Temporal Logic;
   Synchronous Data Flow Languages; Type Systems
ID MODEL
AB When designing languages for functional reactive programming (FRP) the main challenge is to provide the user with a simple, flexible interface for writing programs on a high level of abstraction while ensuring that all programs can be implemented efficiently in a low-level language. To meet this challenge, a new family of modal FRP languages has been proposed, in which variants of Nakano's guarded fixed point operator are used for writing recursive programs guaranteeing properties such as causality and productivity. As an apparent extension to this it has also been suggested to use Linear Temporal Logic (LTL) as a language for reactive programming through the Curry-Howard isomorphism, allowing properties such as termination, liveness and fairness to be encoded in types. However, these two ideas are in conflict with each other, since the fixed point operator introduces non-termination into the inductive types that are supposed to provide termination guarantees.
   In this paper we show that by regarding the modal time step operator of LTL a submodality of the one used for guarded recursion (rather than equating them), one can obtain a modal type system capable of expressing liveness properties while retaining the power of the guarded fixed point operator. We introduce the language Lively RaTT, a modal FRP language with a guarded fixed point operator and an 'until' type constructor as in LTL, and show how to program with events and fair streams. Using a step-indexed Kripke logical relation we prove operational properties of Lively RaTT including productivity and causality as well as the termination and liveness properties expected of types from LTL. Finally, we prove that the type system of Lively RaTT guarantees the absence of implicit space leaks.
C1 [Bahr, Patrick; Graulund, Christian Uldal; Mogelberg, Rasmus Ejlers] IT Univ Copenhagen, Copenhagen, Denmark.
C3 IT University Copenhagen
RP Bahr, P (corresponding author), IT Univ Copenhagen, Copenhagen, Denmark.
EM paba@itu.dk; cgra@itu.dk; mogel@itu.dk
OI Mogelberg, Rasmus Ejlers/0000-0003-0386-4376
FU VILLUM FONDEN [13156]
FX This work was supported by a research grant (13156) from VILLUM FONDEN.
CR Abel A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110277
   Abel A, 2013, ACM SIGPLAN NOTICES, V48, P185, DOI [10.1145/2500365.2500591, 10.1145/2544174.2500591]
   Appel AW, 2007, ACM SIGPLAN NOTICES, V42, P109, DOI 10.1145/1190215.1190235
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Atkey R, 2013, ACM SIGPLAN NOTICES, V48, P197, DOI [10.1145/2544174.2500597, 10.1145/2500365.2500597]
   Bahr P, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341713
   Bahr P, 2017, IEEE S LOG
   Birkedal L, 2019, J AUTOM REASONING, V63, P211, DOI 10.1007/s10817-018-9471-7
   Birkedal L, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:1)2012
   Bizjak Ales, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P108, DOI 10.1007/978-3-319-08918-8_8
   Bizjak A, 2016, LECT NOTES COMPUT SC, V9634, P20, DOI 10.1007/978-3-662-49630-5_2
   Cave A, 2014, ACM SIGPLAN NOTICES, V49, P361, DOI 10.1145/2535838.2535881
   Clouston R, 2018, LECT NOTES COMPUT SC, V10803, P258, DOI 10.1007/978-3-319-89366-2_14
   Clouston R, 2015, LECT NOTES COMPUT SC, V9034, P407, DOI 10.1007/978-3-662-46678-0_26
   Cloutier RM, 2018, ANXIETY STRESS COPIN, V31, P500, DOI 10.1080/10615806.2018.1498278
   Elliott C, 1997, ACM SIGPLAN NOTICES, V32, P263, DOI 10.1145/258949.258973
   Fitch Frederic Benton, 1952, SYMBOLIC LOGIC INTRO, DOI [10.2307/2266614, DOI 10.2307/2266614]
   Guatto A, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P482, DOI 10.1145/3209108.3209148
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Jeffrey A, 2014, IEEE S LOG, DOI 10.1145/2603088.2603106
   Jeffrey Alan., 2012, Proceedings of the sixth workshop on Programming languages meets program verification, P49
   Jeltsch W., 2013, Proceedings of the 7th workshop on Programming languages meets program verification, P69
   Jeltsch W, 2012, ELECTRON NOTES THEOR, V286, P229, DOI 10.1016/j.entcs.2012.08.015
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Krishnaswami NR, 2013, ACM SIGPLAN NOTICES, V48, P221, DOI [10.1145/2544174.2500588, 10.1145/2500365.2500588]
   Krishnaswami NR, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P45
   Krishnaswami NR, 2011, IEEE S LOG, P257, DOI 10.1109/LICS.2011.38
   Mac Lane S., 1992, SHEAVES GEOMETRY LOG, DOI DOI 10.1007/978-1-4612-0927-0
   Mogelberg RE, 2019, MATH STRUCT COMP SCI, V29, P465, DOI 10.1017/S0960129518000087
   Mogelberg RE, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290317
   Nakano H, 2000, IEEE S LOG, P255, DOI 10.1109/LICS.2000.855774
   Nilsson H, 2002, P 2002 ACM SIGPLAN W, P51, DOI DOI 10.1145/581690.581695
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Sacchini JL, 2013, IEEE S LOG, P233, DOI 10.1109/LICS.2013.29
   Svendsen K, 2016, LECT NOTES COMPUT SC, V9632, P727, DOI 10.1007/978-3-662-49498-1_28
   The Univalent Foundations Program, 2013, HOM TYPE THEORY UN F
   Veltri N, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P270, DOI 10.1145/3372885.3373814
NR 37
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 2
DI 10.1145/3434283
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100002
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Di Liberti, I
   Loregian, F
   Nester, C
   Sobocinski, P
AF Di Liberti, Ivan
   Loregian, Fosco
   Nester, Chad
   Sobocinski, Pawel
TI Functorial Semantics for Partial Theories
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Lawvere theory; categories of partial maps; syntax; semantics; variety
   theorem
ID CATEGORIES
AB We provide a Lawvere-style definition for partial theories, extending the classical notion of equational theory by allowing partially defined operations. As in the classical case, our definition is syntactic: we use an appropriate class of string diagrams as terms. This allows for equational reasoning about the class of models defined by a partial theory. We demonstrate the expressivity of such equational theories by considering a number of examples, including partial combinatory algebras and cartesian closed categories. Moreover, despite the increase in expressivity of the syntax we retain a well-behaved notion of semantics: we show that our categories of models are precisely locally finitely presentable categories, and that free models exist.
C1 [Di Liberti, Ivan] Czech Acad Sci, Inst Math, Prague, Czech Republic.
   [Loregian, Fosco; Nester, Chad; Sobocinski, Pawel] Tallinn Univ Technol, Dept Software Sci, Tallinn, Estonia.
C3 Czech Academy of Sciences; Institute of Mathematics of the Czech Academy
   of Sciences; Tallinn University of Technology
RP Di Liberti, I (corresponding author), Czech Acad Sci, Inst Math, Prague, Czech Republic.
EM diliberti.mathi@mail.com; fosco.loregian@taltech.ee;
   chad.nester@taltech.ee; pawel.sobocinski@taltech.ee
RI Loregian, Fosco/ABA-7816-2021; Di Liberti, Ivan/HII-2811-2022
OI Loregian, Fosco/0000-0003-3052-465X; Di Liberti,
   Ivan/0000-0003-1787-4858
FU Grant Agency of the Czech Republic [20-31529X, RVO: 67985840]; ESF
   [2014-2020.4.05.19-0001]
FX Di Liberti was supported by the Grant Agency of the Czech Republic
   project EXPRO 20-31529X and RVO: 67985840. Loregian, Nester and
   Sobocinski were supported by the ESF funded Estonian IT Academy research
   measure (project 2014-2020.4.05.19-0001).
CR Adámek J, 2003, ALGEBRA UNIV, V49, P35, DOI 10.1007/s000120300002
   Adamek J., 2011, CAMBRIDGE TRACTS MAT, V184, P1
   Adamek J., 1994, LMS LECT NOTE SERIES
   [Anonymous], 2002, Math. Surveys and Monographs, DOI DOI 10.1090/SURV/096
   Bethke I, 1988, THESIS U AMSTERDAM
   Birkhoff G, 1935, P CAMB PHILOS SOC, V31, P433, DOI 10.1017/S0305004100013463
   BLOOM SL, 1993, EATCS MONOGRAPHS THE
   Bonchi F., 2017, ARXIV PREPRINT ARXIV
   Bonchi F, 2018, J LOG ALGEBR METHODS, V95, P128, DOI 10.1016/j.jlamp.2017.12.002
   Borceux F., 1986, Cah. Topol. Geom. Differ. Categ., V27, P133
   CARBONI A, 1987, J PURE APPL ALGEBRA, V49, P11, DOI 10.1016/0022-4049(87)90121-6
   CARBONI A, 1991, J ALGEBRA, V136, P497, DOI 10.1016/0021-8693(91)90057-F
   Centazzo C., 2004, GEN ALGEBRAIC MODELS
   Centazzo Claudia, 2002, THEOR APPL CATEG, V10, P486
   Cheng E, 2020, COMPOSITIONALITY, V2, P1
   Cockett JRB, 2012, THEOR APPL CATEG, V26, P453
   Cockett JRB, 2008, ANN PURE APPL LOGIC, V156, P183, DOI 10.1016/j.apal.2008.04.005
   Cockett JRB, 2002, THEOR COMPUT SCI, V270, P223, DOI 10.1016/S0304-3975(00)00382-0
   Cockett R, 2007, MATH STRUCT COMP SCI, V17, P775, DOI 10.1017/S0960129507006056
   Coecke B, 2008, LECT NOTES COMPUT SC, V5126, P298, DOI 10.1007/978-3-540-70583-3_25
   CURIEN PL, 1989, INFORM COMPUT, V80, P50, DOI 10.1016/0890-5401(89)90023-0
   Dugger D, 2001, ADV MATH, V164, P177, DOI 10.1006/aima.2001.2015
   FOX T, 1976, COMMUN ALGEBRA, V4, P665, DOI 10.1080/00927877608822127
   FREYD P, 1966, COLLOQ MATH, V14, P89, DOI 10.4064/cm-14-1-89-106
   Freyd P., 1972, Bull. Australian Math. Soc, V7, p1s76, DOI 10. 1017/s0004972700044828
   Freyd P.J., 1990, Categories, Allegories
   Gabriel Peter., 1971, LOKAL PRASENTIERBARE
   Giles B, 2014, THESIS U CALGARY
   Hyland M, 2007, ELECTRON NOTES THEOR, V172, P437, DOI 10.1016/j.entcs.2007.02.019
   Kock Joachim, 2003, Frobenius Algebras and 2-D Topological Quantum Field Theories
   Lack S., 2004, Theory Appl. Categ., V13, P147
   LAWVERE FW, 1963, P NATL ACAD SCI USA, V50, P869, DOI 10.1073/pnas.50.5.869
   Linton F.E.J., 1966, P C CATEGORICAL ALGE, P84
   Loday J-L., 2012, Algebraic Operads
   MACLANE S, 1965, B AM MATH SOC, V71, P40, DOI 10.1090/S0002-9904-1965-11234-4
   Makkai MP89 Michael, 1989, Contemporary Mathematics, V104, DOI [10.1090/conm/104, DOI 10.1090/CONM/104]
   Palmgren E, 2007, ANN PURE APPL LOGIC, V145, P314, DOI 10.1016/j.apal.2006.10.001
   PALMGREN E, 2009, CONSTRUCTIVIST STRUC
   Pavlovic D, 2013, INFORM COMPUT, V226, P94, DOI 10.1016/j.ic.2013.03.007
   Power J, 2006, ELECTRON NOTES THEOR, V161, P59, DOI 10.1016/j.entcs.2006.04.025
   ROBINSON E, 1988, INFORM COMPUT, V79, P95, DOI 10.1016/0890-5401(88)90034-X
   Street Ross, 1972, J. Pure Appl. Algebra, V2, P149, DOI [10.1016/0022-4049(72)90019-9, DOI 10.1016/0022-4049(7]
NR 42
TC 4
Z9 4
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 57
DI 10.1145/3434338
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100057
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Gregersen, SO
   Bay, J
   Timany, A
   Birkedal, L
AF Gregersen, Simon Oddershede
   Bay, Johan
   Timany, Amin
   Birkedal, Lars
TI Mechanized Logical Relations for Termination-Insensitive Noninterference
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Logical Relations; Information-Flow Control; Program Logics; Iris
ID INFORMATION-FLOW INFERENCE; SEMANTICS
AB We present an expressive information-flow control type system with recursive types, existential types, label polymorphism, and impredicative type polymorphism for a higher-order programming language with higher-order state. We give a novel semantic model of this type system and show that well-typed programs satisfy termination-insensitive noninterference. Our semantic approach supports compositional integration of syntactically well-typed and syntactically ill-typed-but semantically sound-components, which we demonstrate through several interesting examples. We define our model using logical relations on top of the Iris program logic framework; to capture termination-insensitivity, we develop a novel language-agnostic theory of Modal Weakest Preconditions. We formalize all of our theory and examples in the Coq proof assistant.
C1 [Gregersen, Simon Oddershede; Bay, Johan; Timany, Amin; Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
C3 Aarhus University
RP Gregersen, SO (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM gregersen@cs.au.dk; bay@cs.au.dk; timany@cs.au.dk; birkedal@cs.au.dk
OI Birkedal, Lars/0000-0003-1320-0098; Gregesen, Simon/0000-0001-6045-5232;
   Timany, Amin/0000-0002-2237-851X
FU Villum Investigator grant [25804]; Center for Basic Research in Program
   Verification (CPV); VILLUM Foundation; Flemish research fund (FWO)
FX This work was supported in part by a Villum Investigator grant (no.
   25804), Center for Basic Research in Program Verification (CPV), from
   the VILLUM Foundation. Amin Timany was a postdoctoral fellow of the
   Flemish research fund (FWO) during parts of this project.
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   ABADI M, 2006, P 11 ACM SIGPLAN INT, P263
   Ahmed AJ, 2002, IEEE S LOG, P75, DOI 10.1109/LICS.2002.1029818
   Ahmed Amal J., 2004, Ph. D. Dissertation
   Algehed M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341693
   Algehed M, 2017, PROCEEDINGS OF THE 2017 WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS' 17), P77, DOI 10.1145/3139337.3139338
   [Anonymous], 2003, P 1 APPSEM 2 WORKSHO
   ARDEN O, 2016, IEEE 29 COMP SEC FDN
   Birkedal L, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1926385.1926401
   Birkedal Lars, 2019, ABS191000905 CORR
   Birkedal Lars, PRINCIPLES PROGRAMMI
   Birkedal Lars, 2017, Lecture Notes on Iris: Higher-Order Concurrent Separation Log
   Bowman WJ, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P101, DOI 10.1145/2784731.2784733
   Dreyer D, 2009, IEEE S LOG, P71, DOI 10.1109/LICS.2009.34
   Fennell L, 2013, P IEEE CSFW, P224, DOI 10.1109/CSF.2013.22
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Gregersen Simon, 2019, Principles of Security and Trust, P51, DOI [10.1007/978-3-030-17138-4_3, DOI 10.1007/978-3-030-17138-4_3]
   Heintze N., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P365, DOI 10.1145/268946.268976
   Hritcu Catalin, 2020, ABS200504722 CORR
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krebbers Robbert, 2018, PACMPL 2 ICFP, V77, p1s77:30, DOI [10.1145/3236772, DOI 10.1145/3236772]
   Li P., 2006, IEEE WORKSHOP COMPUT, P16
   Lourenço L, 2015, ACM SIGPLAN NOTICES, V50, P317, DOI [10.1145/2775051.2676994, 10.1145/2676726.2676994]
   Murray T, 2016, P IEEE CSFW, P417, DOI 10.1109/CSF.2016.36
   Myers A. C., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P228, DOI 10.1145/292540.292561
   Nanevski A, 2011, P IEEE S SECUR PRIV, P165, DOI 10.1109/SP.2011.12
   Pitts Andrew, 1998, Higher Order Operational Techniques in Semantics, P227
   Plotkin G., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P361, DOI 10.1007/BFb0037118
   Pottier F, 2003, ACM T PROGR LANG SYS, V25, P117, DOI 10.1145/596980.596983
   Pottier F, 2000, ACM SIGPLAN NOTICES, V35, P46, DOI 10.1145/357766.351245
   Rajani V, 2020, J COMPUT SECUR, V28, P129, DOI 10.3233/JCS-191382
   Russo A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P280, DOI 10.1145/2784731.2784756
   Russo A, 2009, ACM SIGPLAN NOTICES, V44, P13, DOI 10.1145/1543134.1411289
   Sabelfeld A., 2001, Higher-Order and Symbolic Computation, V14, P59, DOI 10.1023/A:1011553200337
   Sabelfeld A, 1999, LECT NOTES COMPUT SC, V1576, P40
   Simonet V., 2003, The Flow Caml system
   Timany A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341709
   Timany A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158152
   Tse S, 2004, ACM SIGPLAN NOTICES, V39, P115, DOI 10.1145/1016848.1016868
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Vassena M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290389
   Vassena M, 2018, J LOG ALGEBR METHODS, V95, P148, DOI 10.1016/j.jlamp.2017.12.003
   Zdancewic Stephan Arthur, 2002, THESIS CORNELL U US
   Zheng L, 2007, INT J INF SECUR, V6, P67, DOI 10.1007/s10207-007-0019-9
NR 48
TC 6
Z9 8
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 10
DI 10.1145/3434291
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100010
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Gulwani, S
   Le, V
   Radhakrishna, A
   Radicek, I
   Raza, M
AF Gulwani, Sumit
   Le, Vu
   Radhakrishna, Arjun
   Radicek, Ivan
   Raza, Mohammad
TI Structure Interpretation of Text Formats
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; data extraction; format diversity
ID LANGUAGE
AB Data repositories often consist of text files in a wide variety of standard formats, ad-hoc formats, as well as mixtures of formats where data in one format is embedded into a different format. It is therefore a significant challenge to parse these files into a structured tabular form, which is important to enable any downstream data processing.
   We present UNRAVEL, an extensible framework for structure interpretation of ad-hoc formats. UNRAVEL can automatically, with no user input, extract tabular data from a diverse range of standard, ad-hoc and mixed format files. The framework is also easily extensible to add support for previously unseen formats, and also supports interactivity from the user in terms of examples to guide the system when specialized data extraction is desired. Our key insight is to allow arbitrary combination of extraction and parsing techniques through a concept called partial structures. Partial structures act as a common language through which the file structure can be shared and refined by different techniques. This makes UNRAVEL more powerful than applying the individual techniques in parallel or sequentially. Further, with this rule-based extensible approach, we introduce the novel notion of re-interpretation where the variety of techniques supported by our system can be exploited to improve accuracy while optimizing for particular quality measures or restricted environments. On our benchmark of 617 text files gathered from a variety of sources, UNRAVEL is able to extract the intended table in many more cases compared to state-of-the-art techniques.
C1 [Gulwani, Sumit; Le, Vu; Radhakrishna, Arjun; Raza, Mohammad] Microsoft, Redmond, WA 98052 USA.
   [Radicek, Ivan] Microsoft, Graz, Austria.
C3 Microsoft
RP Gulwani, S (corresponding author), Microsoft, Redmond, WA 98052 USA.
EM sumitg@microsoft.com; levu@microsoft.com; arradha@microsoft.com;
   ivradice@microsoft.com; moraza@microsoft.com
OI Radhakrishna, Arjun/0000-0002-5559-5932
CR [Anonymous], 1993, Watch what I do: programming by demonstration
   Arasu A., 2003, P 2003 ACM SIGMOD IN, P337, DOI DOI 10.1145/872757.872799
   Chasins S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133875
   Chasins SE, 2018, UIST 2018: PROCEEDINGS OF THE 31ST ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P963, DOI 10.1145/3242587.3242661
   Cognos Analytics, 2019, COGN AN XML FIL FLAT
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Crescenzi V., 2001, Proceedings of the 27th International Conference on Very Large Data Bases, P109
   Daly M., 2006, P 2006 ACM SIGMOD IN, P727, DOI [10.1145/1142473.1142568, DOI 10.1145/1142473.1142568]
   Data Miner, 2019, DATA MINER EXTRACT D
   Du M, 2016, IEEE DATA MINING, P859, DOI [10.1109/ICDM.2016.0103, 10.1109/ICDM.2016.160]
   Fisher K, 2005, ACM SIGPLAN NOTICES, V40, P295, DOI 10.1145/1064978.1065046
   Fisher K, 2008, ACM SIGPLAN NOTICES, V43, P421, DOI 10.1145/1480828.1480841
   Fisher Kathleen, 2011, P 14 INT C DAT THEOR, P11, DOI [DOI 10.1145/1938551.1938556, 10.1145/1938551.1938556]
   Gao YH, 2018, INT CONF MANAGE DATA, P943, DOI 10.1145/3183713.3183746
   Gulhane P, 2011, PROC INT CONF DATA, P1209, DOI 10.1109/ICDE.2011.5767842
   Guo Philip J, 2011, P 24 ANN ACM S US IN, P65, DOI [10.1145/2047196.2047205, DOI 10.1145/2047196.2047205]
   Hamooni H, 2016, CIKM'16: PROCEEDINGS OF THE 2016 ACM CONFERENCE ON INFORMATION AND KNOWLEDGE MANAGEMENT, P1573, DOI 10.1145/2983323.2983358
   Kandel S, 2011, 29TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, P3363
   Kushmerick N, 1997, INT JOINT CONF ARTIF, P729
   Le Vu, 2014, FLASHEXTRACT FRAMEWO, P55
   Martins R, 2019, PROC VLDB ENDOW, V12, P1914, DOI 10.14778/3352063.3352098
   Mayer M, 2015, UIST'15: PROCEEDINGS OF THE 28TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P291, DOI 10.1145/2807442.2807459
   Microsoft, 2020, POW QUER FOR LANG
   Miller Robyn A, 2002, THESIS
   Nielandt J, 2016, EXPERT SYST APPL, V51, P259, DOI 10.1016/j.eswa.2015.12.040
   Padhi S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276520
   Peleg H, 2018, LECT NOTES COMPUT SC, V10747, P382, DOI 10.1007/978-3-319-73721-8_18
   Raman V., 2001, POTTERS WHEEL INTERA
   Raza M, 2017, AAAI CONF ARTIF INTE, P882
   Vaarandi R, 2015, INT CONF NETW SER, P1, DOI 10.1109/CNSM.2015.7367331
   Vechev M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P327, DOI 10.1145/1706299.1706338
   Wang YP, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P286, DOI 10.1145/3314221.3314588
   Xi QA, 2010, ACM SIGPLAN NOTICES, V45, P221, DOI 10.1145/1809028.1806622
   Zhu JM, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2019), P121, DOI 10.1109/ICSE-SEIP.2019.00021
NR 34
TC 0
Z9 0
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 212
DI 10.1145/3428280
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900089
OA gold
DA 2024-07-18
ER

PT J
AU Jagadeesan, R
   Jeffrey, A
   Riely, J
AF Jagadeesan, Radha
   Jeffrey, Alan
   Riely, James
TI Pomsets with Preconditions: A Simple Model of Relaxed Memory
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Concurrency; Relaxed Memory Models; Multi-Copy Atomicity; ARMv8;
   Pomsets; Preconditions; Temporal Safety Properties; Thin-Air Reads;
   Compiler Optimizations
ID COMPUTER
AB Relaxed memory models must simultaneously achieve efficient implementability and thread-compositional reasoning. Is that why they have become so complicated? We argue that the answer is no: It is possible to achieve these goals by combining an idea from the 60s (preconditions) with an idea from the 80s (pomsets), at least for x64 and ARMS. We show that the resulting model (1) supports compositional reasoning for temporal safety properties, (2) supports all expected sequential compiler optimizations, (3) satisfies the SC-DRF criterion, and (4) compiles to x64 and ARM8 microprocessors without requiring extra fences on relaxed accesses.
C1 [Jagadeesan, Radha; Riely, James] Depaul Univ, Chicago, IL 60604 USA.
   [Jeffrey, Alan] Mozilla Res, Chicago, IL USA.
   [Jeffrey, Alan] Servo Project, Chicago, IL USA.
C3 DePaul University
RP Jagadeesan, R (corresponding author), Depaul Univ, Chicago, IL 60604 USA.
OI Riely, James/0000-0002-8731-1463
CR ABADI M, 1993, ACM T PROGR LANG SYS, V15, P73, DOI 10.1145/151646.151649
   ADVE SV, 1993, IEEE T PARALL DISTR, V4, P613, DOI 10.1109/71.242161
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Alglave Jade, 2010, THESIS U PARIS 7 INR
   [Anonymous], 1984, Logics and Models of Concurrent Systems (NATO ASI Series, DOI [DOI 10.1007/978-3-642-82453-1_5, 10.1007/978-3-642-82453-1\5]
   [Anonymous], 1990, P ISCA, DOI DOI 10.1145/325164.325100
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 2004, CAUSALITY TEST CASES
   Batty M, 2017, PHILOS T R SOC A, V375, DOI 10.1098/rsta.2015.0406
   Batty M, 2016, ACM SIGPLAN NOTICES, V51, P634, DOI 10.1145/2914770.2837637
   Batty M, 2015, LECT NOTES COMPUT SC, V9032, P283, DOI 10.1007/978-3-662-46669-8_12
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Batty Mark, 2015, THESIS U CAMBRIDGE
   Boehm H.-J., 2014, MSPC, p7:1, DOI DOI 10.1145/2618128.2618134
   Boehm Hans-J., 2018, OUT THIN AIR REVISIT
   Boehm Hans-J., 2007, MEMORY MODEL RATIONA
   Brookes Stephen, 2016, DENOTATIONAL SEMANTI
   Castellan Simon, 2016, VINGT SEPTIEMES JOUR, P39
   Cenciarelli P, 2007, LECT NOTES COMPUT SC, V4421, P331
   Chakraborty S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290383
   Chakraborty S, 2017, INT SYM CODE GENER, P100, DOI 10.1109/CGO.2017.7863732
   Chakraborty Soham, 2018, PRIVATE CORRES
   Deacon Will, 2017, FORMAL MEMORY MODEL
   Demange Delphine, 2013, 40 ANN ACM SIGPLAN S, DOI [10.1145/2429069, DOI 10.1145/2429069]
   Disselkoen C, 2019, P IEEE S SECUR PRIV, P1238, DOI 10.1109/SP.2019.00047
   Dolan S, 2018, ACM SIGPLAN NOTICES, V53, P242, DOI [10.1145/3192366.3192421, 10.1145/3296979.3192421]
   Dongol B, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P82, DOI 10.1145/3293883.3295708
   ECMA International, 2019, ECMA SCRIPT 2019 LAN
   Flur S, 2017, ACM SIGPLAN NOTICES, V52, P429, DOI 10.1145/3093333.3009839
   Flur S, 2016, ACM SIGPLAN NOTICES, V51, P608, DOI 10.1145/2914770.2837615
   GISCHER JL, 1988, THEOR COMPUT SCI, V61, P199, DOI 10.1016/0304-3975(88)90124-7
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jade Alglave, 2019, THIS COMMIT ADDS ARM
   Jagadeesan R, 2010, LECT NOTES COMPUT SC, V6012, P307, DOI 10.1007/978-3-642-11957-6_17
   Jeffrey A, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(1:33)2019
   Jeffrey A, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P759, DOI 10.1145/2933575.2934536
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Kang Jeehoon, 2018, PRIVATE CORRES
   Kavanagh R, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(2:10)2019
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lahav O, 2016, LECT NOTES COMPUT SC, V9995, P479, DOI 10.1007/978-3-319-48989-6_29
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   LAMPORT L, 1986, DISTRIB COMPUT, V1, P77, DOI 10.1007/BF01786227
   Lichtenstein O., 1985, Logics of Programs. Proceedings, P196
   Lochbihler A, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2518191
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   McKenny Paul E., 2016, P0422 OUT OFTHIN AIR
   MISRA J, 1981, IEEE T SOFTWARE ENG, V7, P417, DOI 10.1109/TSE.1981.230844
   Moiseenko Evgenii, 2019, ABS191106567 CORR
   Morisset Robin, 2017, THESIS PSL RES U PAR
   Paviotti M, 2020, LECT NOTES COMPUT SC, V12075, P599, DOI 10.1007/978-3-030-44914-8_22
   Pichon-Pharabod J, 2016, ACM SIGPLAN NOTICES, V51, P622, DOI 10.1145/2914770.2837616
   Plotkin Gordon D., 1996, PARTIAL ORDER METHOD, V29
   Podkopaev A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290382
   Pugh W., 1999, Proceedings of the ACM 1999 Java Grande Conference, P89, DOI 10.1145/304065.304106
   Pulte C, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1, DOI 10.1145/3314221.3314624
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Saraswat V, 2007, PROCEEDINGS OF THE 2007 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING PPOPP'07, P161, DOI 10.1145/1229428.1229469
   Sevcik Jaroslav, 2008, THESIS U EDINBURGH
   Sevcik Jaroslav, 2011, PRIVATE CORRES
   Stark Eugene W., 1985, LECT NOTES COMPUTER, V206, DOI [10.1007/3-540-16042-6_21, DOI 10.1007/3-540-16042-6_21]
   Svendsen Kasper, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P357, DOI 10.1007/978-3-319-89884-1_13
   Vafeiadis V, 2015, ACM SIGPLAN NOTICES, V50, P209, DOI [10.1145/2676726.2676995, 10.1145/2775051.2676995]
   Watt C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360559
   Watt C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P346, DOI 10.1145/3385412.3385973
NR 65
TC 14
Z9 15
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 194
DI 10.1145/3428262
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900071
OA gold
DA 2024-07-18
ER

PT J
AU Mukherjee, S
   Deligiannis, P
   Biswas, A
   Lal, A
AF Mukherjee, Suvam
   Deligiannis, Pantazis
   Biswas, Arpita
   Lal, Akash
TI Learning-Based Controlled Concurrency Testing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Concurrency; Systematic Testing; Reinforcement Learning
AB Concurrency bugs are notoriously hard to detect and reproduce. Controlled concurrency testing (CCT) techniques aim to offer a solution, where a scheduler explores the space of possible interleavings of a concurrent program looking for bugs. Since the set of possible interleavings is typically very large, these schedulers employ heuristics that prioritize the search to "interesting" subspaces. However, current heuristics are typically tuned to specific bug patterns, which limits their effectiveness in practice.
   In this paper, we present QL, a learning-based CCT framework where the likelihood of an action being selected by the scheduler is influenced by earlier explorations. We leverage the classical Q-leaming algorithm to explore the space of possible interleavings, allowing the exploration to adapt to the program under test, unlike previous techniques. We have implemented and evaluated QL on a set of microbenchmarks, complex protocols, as well as production cloud services. In our experiments, we found QL to consistently outperform the state-of-the-art in CCT.
C1 [Mukherjee, Suvam; Lal, Akash] Microsoft Res, Bangalore, Karnataka, India.
   [Deligiannis, Pantazis] Microsoft Res, Redmond, WA USA.
   [Biswas, Arpita] Indian Inst Sci, Bangalore, Karnataka, India.
C3 Microsoft; Microsoft; Indian Institute of Science (IISC) - Bangalore
RP Mukherjee, S (corresponding author), Microsoft Res, Bangalore, Karnataka, India.
EM suvamm@outlook.com; pdeligia@microsoft.com; arpitab@iisc.ac.in;
   akashl@microsoft.com
RI lal, Akash/JLL-1244-2023
OI Deligiannis, Pantazis/0000-0001-7582-4520; Biswas,
   Arpita/0000-0002-5720-013X; Mukherjee, Suvam/0000-0002-9040-0053
CR Akka Raft, 2015, LEAD EL BUG AKK RAFT
   Andrews T, 2004, LECT NOTES COMPUT SC, V3114, P484
   [Anonymous], 1989, LEARNING DELAYED REW
   [Anonymous], 2012, SUMM AWS SERV EV US
   Barto Andrew G, 1991, CONNECTIONIST MODELS, p35S44
   Baskiotis N, 2007, 20TH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P2274
   BELLMAN R, 1954, B AM MATH SOC, V60, P503, DOI 10.1090/S0002-9904-1954-09848-8
   Beyer D, 2019, LECT NOTES COMPUT SC, V11429, P133, DOI 10.1007/978-3-030-17502-3_9
   Böttinger K, 2018, 2018 IEEE SYMPOSIUM ON SECURITY AND PRIVACY WORKSHOPS (SPW 2018), P116, DOI 10.1109/SPW.2018.00026
   Burckhardt S, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P167
   Cai QP, 2018, AAAI CONF ARTIF INTE, P957
   Cargill Tom, 2009, EXTREME PROGRAMMING
   Chalupa M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158119
   Cimatti A., 2000, Int. J. Softw. Tools for Technol. Transf. (STTT), V2, P410, DOI [DOI 10.1007/S100090050046, 10.1007/s100090050046]
   Clarke E., 1996, Computer Aided Verification. 8th International Conference, CAV '96. Proceedings, P419
   Deligiannis Pantazis, 2015, ACM SIGPLAN Notices, V50, P154, DOI 10.1145/2737924.2737996
   Deligiannis P, 2016, 14TH USENIX CONFERENCE ON FILE AND STORAGE TECHNOLOGIES (FAST '16), P249
   Deligiannis Pantazis, 2020, ABS200204903
   Desai A, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P73, DOI 10.1145/2786805.2786861
   Emmi M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P411, DOI 10.1145/1926385.1926432
   Eriksson A, 2003, IROS 2003: PROCEEDINGS OF THE 2003 IEEE/RSJ INTERNATIONAL CONFERENCE ON INTELLIGENT ROBOTS AND SYSTEMS, VOLS 1-4, P412
   Fernandez FC, 2018, PROCEEDINGS 3RD INTERNATIONAL CONFERENCE ON INFORMATION SYSTEMS AND COMPUTER SCIENCE (INCISCOS 2018), P301, DOI 10.1109/INCISCOS.2018.00050
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Godefroid P, 2005, FORM METHOD SYST DES, V26, P77, DOI 10.1007/s10703-005-1489-x
   Godefroid P, 2017, IEEE INT CONF AUTOM, P50, DOI 10.1109/ASE.2017.8115618
   Gray J., 1986, Proceedings Fifth Symposium on Reliability in Distributed Software and Database Systems (Cat. No.86CH2260-8), P3
   Heidrich-Meisner V., 2007, ESANN, P277
   Holzmann G, 2011, The SPIN Model Checker: Primer and Reference Manual
   Huang J, 2015, ACM SIGPLAN NOTICES, V50, P165, DOI [10.1145/2737924.2737975, 10.1145/2813885.2737975]
   Huang Shiyou, 2017, 31 EUR C OBJ OR PROG, DOI 10.4230/LIPIcs.ECOOP.2017.16
   Kanade Aditya, 2018, ARXIV180603806
   Khadilkar H, 2019, IEEE T INTELL TRANSP, V20, P727, DOI 10.1109/TITS.2018.2829165
   Kober J, 2013, INT J ROBOT RES, V32, P1238, DOI 10.1177/0278364913495721
   Lange S, 2012, IEEE IJCNN
   Leesatapornwongsa Tanakorn, 2014, P 11 USENIX S OPERAT, P399
   Levine S, 2016, J MACH LEARN RES, V17
   Li D, 2019, IEEE COMPUT INTELL M, V14, P83, DOI 10.1109/MCI.2019.2901089
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Mariani L., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P81, DOI 10.1109/ICST.2012.88
   MAZURKIEWICZ A, 1987, LECT NOTES COMPUT SC, V255, P279
   Mnih V, 2015, NATURE, V518, P529, DOI 10.1038/nature14236
   Mudduluru R, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P84, DOI 10.23919/FMCAD.2017.8102245
   Musuvathi M., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, P267
   Musuvathi M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P446, DOI 10.1145/1250734.1250785
   Musuvathi M, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P362, DOI 10.1145/1375581.1375625
   Neftci EO, 2019, NAT MACH INTELL, V1, P133, DOI 10.1038/s42256-019-0025-4
   OKelly M., 2018, Advances in Neural Information Processing Systems, V31, P9827
   Ongaro Diego, 2014, 2014 USENIX ANN TECH, P305, DOI DOI 10.1007/0-387-34805-0_21
   Ozkan Burcu Kulahcioglu, 2018, P ACM PROGRAM LANG, DOI DOI 10.1145/3276530
   P# Team, 2019, P FRAM RAP DEV REL A
   Peng J, 1996, MACH LEARN, V22, P283, DOI 10.1007/BF00114731
   Rummery G. A., 1994, CITESEER, V37
   Russell StuartJonathan., 2003, ARTIF INTELL, V2
   SATO M, 1988, IEEE T SYST MAN CYB, V18, P677, DOI 10.1109/21.21595
   She D., 2018, ARXIV PREPRINT ARXIV
   Shi JC, 2019, AAAI CONF ARTIF INTE, P4902
   Silver D, 2016, NATURE, V529, P484, DOI 10.1038/nature16961
   Simsa Jiri, 2011, Model Checking Software. Proceedings 18th International SPIN Workshop, P188, DOI 10.1007/978-3-642-22306-8_14
   Sutton RS, 2018, ADAPT COMPUT MACH LE, P1
   Szepesvari C., 2010, Synthesis lectures on artificial intelligence and machine learning, V4, P1
   Tassey G., 2002, EC IMPACTS INADEQUAT
   Tesauro Gerald, 1991, ADV NEURAL INFORM PR, V4, P259
   Thomson P., 2016, ACM Transactions on Parallel Computing, V2, P1, DOI DOI 10.1145/2858651
   Treynor Ben, 2014, GOOGLEBLOG S TODAYS
   Veanes M, 2006, LECT NOTES COMPUT SC, V4262, P240
   Vyukov Dmitry, 2010, BUG CONTEXT SWITCH B
   Watkins Christopher JCH, 1989, LEARNING DELAYED REW
   WATKINS CJCH, 1992, MACH LEARN, V8, P279, DOI 10.1007/BF00992698
   Wei H, 2018, KDD'18: PROCEEDINGS OF THE 24TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY & DATA MINING, P2496, DOI 10.1145/3219819.3220096
   Whitehead S., 1991, STUDY COOPERATIVE ME
   WHITEHEAD SD, 1991, MACHINE LEARNING, P363
   Yang JL, 2009, 2009 INTERNATIONAL FORUM ON COMPUTER SCIENCE-TECHNOLOGY AND APPLICATIONS, VOL 2, PROCEEDINGS, P213, DOI 10.1109/IFCSTA.2009.173
   Zheng Alice X., 2006, INT C MACH LEARN, P1105, DOI DOI 10.1145/1143844.1143983
   Zheng Alice X., 2003, ADV NEURAL INFORM PR, P603
   Zhou ZP, 2017, ACS CENTRAL SCI, V3, P1337, DOI 10.1021/acscentsci.7b00492
NR 75
TC 9
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 230
DI 10.1145/3428298
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900107
OA Green Submitted, gold, Green Accepted
DA 2024-07-18
ER

PT J
AU Schuster, P
   Brachthäuser, JI
   Ostermann, K
AF Schuster, Philipp
   Brachthaeuser, Jonathan Immanuel
   Ostermann, Klaus
TI Compiling Effect Handlers in Capability-Passing Style
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE algebraic effects; control effects; continuations; continuation-passing
   style; capability-passing style; lexically-scoped effect handlers;
   compilation
AB Effect handlers encourage programmers to abstract over repeated patterns of complex control flow. As of today, this abstraction comes at a significant price in performance. In this paper, we aim to achieve abstraction without regret for effect handlers.
   We present a language for effect handlers in capability-passing style (lambda(C)(ap)) and an implementation of this language as a translation to simply-typed lambda calculus in iterated continuation-passing style. A suite of benchmarks indicates that the novel combination of capability-passing style and iterated CPS enables significant speedups over existing languages with effect handlers or control operators. Our implementation technique is general and allows us to generate code in any language that supports first-class functions.
   We then identify a subset of programs for which we can further improve the performance and guarantee full elimination of the effect handler abstraction. To formally capture this subset, we refine lambda(Cap) to lambda(Cap) leap with a more restrictive type system. We present a type-directed translation for lambda(Cap) that inserts staging annotations and prove that no abstractions or applications related to effect handlers occur in the translated program. Using this second translation we observe additional speedups in some of the benchmarks.
C1 [Schuster, Philipp; Brachthaeuser, Jonathan Immanuel; Ostermann, Klaus] Univ Tubingen, Sand 13, D-72076 Tubingen, Germany.
C3 Eberhard Karls University of Tubingen
RP Schuster, P (corresponding author), Univ Tubingen, Sand 13, D-72076 Tubingen, Germany.
EM philipp.schuster@uni-tuebingen.de;
   jonathan.brachthaeuser@uni-tuebingen.de;
   klaus.ostermann@uni-tuebingen.de
OI Brachthauser, Jonathan Immanuel/0000-0001-9128-0391
CR Ahmed, 2018, PROGRAMMING LANGUAGE
   Alexandrescu A., 2010, The D Programming Language
   ANDERSON B, 2016, P 38 INT C SOFTW ENG, DOI DOI 10.1145/2889160.2889229
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   [Anonymous], 1992, Handbook of Logic in Computer Science
   Biernacki D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290319
   Biernacki D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371116
   Bracevac Oliver, 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236762
   Brachthäuser JI, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276481
   Brachthäuser JI, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000027
   Brachthäuser JI, 2017, SCALA'17: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P67, DOI 10.1145/3136000.3136007
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Cong YY, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341643
   Convent L, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000039
   Danvy O, 1996, ACM T PROGR LANG SYS, V18, P730, DOI 10.1145/236114.236119
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Danvy O., 1989, 8912 DIKU U COP
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   Dolan S., 2015, OCAML WORKSHOP
   Dolan Stephen, 2014, OCAML WORKSH
   Dybvig RK, 2006, ACM SIGPLAN NOTICES, V41, P1, DOI 10.1145/1160074.1159805
   Dyvbig RK, 2007, J FUNCT PROGRAM, V17, P687, DOI 10.1017/S0956796807006259
   Forster Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110257
   Hillerstrom D., 2017, 2nd International Conference on Formal Structures for Computation and Deduction, FSCD 2017, September 3-9, 2017, V84, p18:1, DOI DOI 10.4230/LIPICS.FSCD.2017.18
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Kammar O, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000320
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kennedy A, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P177
   Kiselyov O, 2018, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.285.2
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Leijen Daan, 2017, Programming Languages and Systems. 15th Asian Symposium, APLAS 2017. Proceedings: LNCS 10695, P339, DOI 10.1007/978-3-319-71237-6_17
   Leijen D, 2018, PROCEEDINGS OF THE 3RD ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE '18), P51, DOI 10.1145/3240719.3241789
   Leijen D, 2017, PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE' 17), P16, DOI 10.1145/3122975.3122977
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Leroy X., 2017, OCAML SYSTEM RELEASE
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Materzok Marek, 2012, Lecture Notes in Computer Science, V7705, P296, DOI [10.1007/978-3-642- 35182- 2_21, DOI 10.1007/978-3-642-35182-2_21]
   Maurer L, 2017, ACM SIGPLAN NOTICES, V52, P482, DOI [10.1145/3062341.3062380, 10.1145/3140587.3062380]
   Nielson F., 1996, Partial Evaluation. International Seminar. Selected Papers, P338
   Osvald L, 2016, ACM SIGPLAN NOTICES, V51, P234, DOI 10.1145/3022671.2984009
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Piróg M, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P809, DOI 10.1145/3209108.3209166
   PLOTKIN G, 2009, EUR S PROGR
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Pretnar Matija, 2017, Technical Report
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Schuster P, 2018, PROCEEDINGS OF THE 3RD ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE '18), P14, DOI 10.1145/3240719.3241788
   Stroustrup B., 1997, The C++ Programming Language
   Taha W., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P203, DOI 10.1145/258994.259019
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   White Leo, 2017, SPRINGER LNCS, V10788
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Wu N, 2015, LECT NOTES COMPUT SC, V9129, P302, DOI 10.1007/978-3-319-19797-5_15
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
NR 57
TC 9
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 93
DI 10.1145/3408975
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700007
OA gold
DA 2024-07-18
ER

PT J
AU Bansal, S
   Namjoshi, KS
   Sa'ar, Y
AF Bansal, Suguman
   Namjoshi, Kedar S.
   Sa'ar, Yaniv
TI Synthesis of Coordination Programs from Linear Temporal Specifications
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE coordination; synthesis; temporal logic
ID ALGORITHMS
AB This paper presents a method for synthesizing a reactive program to coordinate the actions of a group of other reactive programs so that the combined system satisfies a temporal specification of its desired long-term behavior. Traditionally, reactive synthesis has been applied to the construction of a stateful hardware circuit. This work is motivated by applications to other domains, such as the IoT (the Internet of Things) and robotics, where it is necessary to coordinate the actions of multiple sensors, devices, and robots to carry out a task. The mathematical model represents each agent as a process in Hoare's CSP model. Given a network of interacting agents, called an environment, and a temporal specification of long-term behavior, the synthesis method constructs a coordinator process (if one exists) that guides the actions of the environment agents so that the combined system is deadlock-free and satisfies the given specification. The main technical challenge is that a coordinator may have only partial information of the environment state, due to non-determinism within the environment and internal environment actions that are hidden from the coordinator. This is the first method to handle both sources of partial information and to do so for arbitrary linear temporal logic specifications. It is established that the coordination synthesis problem is PS PACE-hard in the size of the environment. A prototype implementation is able to synthesize compact solutions for a number of coordination problems.
C1 [Bansal, Suguman] Rice Univ, Houston, TX 77005 USA.
   [Namjoshi, Kedar S.] Nokia Bell Labs, Murray Hill, NJ 07974 USA.
   [Sa'ar, Yaniv] Nokia Bell Labs, IL-4464321 Kefar Sava, Israel.
C3 Rice University; Nokia Corporation; Nokia Bell Labs
RP Bansal, S (corresponding author), Rice Univ, Houston, TX 77005 USA.
EM suguman@rice.edu; kedar.namjoshi@nokia-bell-labs.com;
   yaniv.saar.mail@gmail.com
RI Bansal, Suguman/AAA-1867-2022
FU National Science Foundation [CCF-1563393]
FX We would like to thank the paper and artifact reviewers for helpful
   suggestions. This work was supported, in part, by the National Science
   Foundation under Grant No. CCF-1563393. Any opinions, findings, and
   conclusions or recommendations expressed are those of the author(s) and
   do not necessarily reflect the views of the National Science Foundation.
CR Alur R, 2016, LECT NOTES COMPUT SC, V9780, P251, DOI 10.1007/978-3-319-41540-6_14
   [Anonymous], 1962, Proc. Internat. Congr. Mathematicians (Stockholm)
   [Anonymous], 1986, Fairness
   [Anonymous], 1997, The Theory and Practice of Concurrency
   Babiak T, 2012, LECT NOTES COMPUT SC, V7214, P95, DOI 10.1007/978-3-642-28756-5_8
   Bansal S, 2018, LECT NOTES COMPUT SC, V10981, P367, DOI 10.1007/978-3-319-96145-3_20
   Bansal Suguman, 2019, ARXIV191103807
   Benes Nikola, 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P76, DOI 10.1007/978-3-642-40184-8_7
   Berardi D, 2003, LECT NOTES COMPUT SC, V2910, P43
   Bloem R, 2012, J COMPUT SYST SCI, V78, P911, DOI 10.1016/j.jcss.2011.08.007
   Bohy Aaron, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P652, DOI 10.1007/978-3-642-31424-7_45
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   BUCHI JR, 1969, T AM MATH SOC, V138, P295, DOI 10.2307/1994916
   Chatterjee K, 2007, LOG METH COMPUT SCI, V3, DOI 10.2168/LMCS-3(3:4)2007
   Church A., 1957, Summaries of the Summer Institute of Symbolic Logic, P3
   Ciolek D, 2017, IEEE T SOFTWARE ENG, V43, P19, DOI 10.1109/TSE.2016.2564959
   D'Ippolito N, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2430536.2430543
   Duret-Lutz A, 2016, LECT NOTES COMPUT SC, V9938, P122, DOI 10.1007/978-3-319-46520-3_8
   Ehlers R, 2011, LECT NOTES COMPUT SC, V6605, P272, DOI 10.1007/978-3-642-19835-9_25
   Ehlers R, 2010, LECT NOTES COMPUT SC, V6174, P365, DOI 10.1007/978-3-642-14295-6_33
   EMERSON EA, 1982, SCI COMPUT PROGRAM, V2, P241, DOI 10.1016/0167-6423(83)90017-5
   Faymonville P, 2017, LECT NOTES COMPUT SC, V10205, P354, DOI 10.1007/978-3-662-54577-5_20
   Faymonville P, 2017, LECT NOTES COMPUT SC, V10427, P325, DOI 10.1007/978-3-319-63390-9_17
   Filiot E, 2010, LECT NOTES COMPUT SC, V6252, P112
   Filiot E, 2009, LECT NOTES COMPUT SC, V5643, P263, DOI 10.1007/978-3-642-02658-4_22
   Finkbeiner Bernd, 2013, International Journal on Software Tools for Technology Transfer, V15, P519, DOI 10.1007/s10009-012-0228-z
   Gibson-Robinson T., 2014, Lecture Notes in Computer Science, V8413, P187
   Harris WR, 2011, ACM SIGPLAN NOTICES, V46, P317, DOI 10.1145/1993316.1993536
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Jobstmann B, 2006, PROCEEDINGS OF FORMAL METHODS IN COMPUTER AIDED DESIGN, P117
   Klein U, 2012, LECT NOTES COMPUT SC, V7148, P283, DOI 10.1007/978-3-642-27940-9_19
   Kress-Gazit H, 2010, IEEE INT CONF ROBOT, P3215, DOI 10.1109/ROBOT.2010.5509402
   Kupferman O, 2005, ANN IEEE SYMP FOUND, P531, DOI 10.1109/SFCS.2005.66
   Larsen K. G., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P108, DOI 10.1109/LICS.1990.113738
   Larsen U, 1988, Eur J Popul, V3, P203, DOI 10.1109/LICS.1988.5119
   Liu J, 2013, IEEE T AUTOMAT CONTR, V58, P1771, DOI 10.1109/TAC.2013.2246095
   Lustig Y, 2009, LECT NOTES COMPUT SC, V5504, P395
   Madhusudan P., 2001, THESIS U MADRAS
   Manna Z., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P1, DOI 10.1145/41625.41626
   Manna Zohar., 1981, Workshop on Logic of Programs, P253, DOI DOI 10.1007/BFB0025786
   Maoz Shahar, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P335, DOI 10.1007/978-3-642-33666-9_22
   Maoz S., 2011, INT C ASP OR SOFTW D
   Moarref S, 2018, LECT NOTES COMPUT SC, V11022, P71, DOI 10.1007/978-3-030-00151-3_5
   Piterman N, 2006, LECT NOTES COMPUT SC, V3855, P364
   PNUELI A, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P179, DOI 10.1145/75277.75293
   PNUELI A, 1989, LECT NOTES COMPUT SC, V372, P652
   Pnueli Amir, 2010, Computer Aided Verification. Proceedings 22nd International Conference, CAV 2010, P171, DOI 10.1007/978-3-642-14295-6_18
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   RABIN MO, 1969, T AM MATH SOC, V141, P1, DOI 10.2307/1995086
   RAMADGE PJG, 1989, P IEEE, V77, P81, DOI 10.1109/5.21072
   REIF JH, 1984, J COMPUT SYST SCI, V29, P274, DOI 10.1016/0022-0000(84)90034-5
   Schewe S, 2007, LECT NOTES COMPUT SC, V4762, P474
   Schewe S, 2007, LECT NOTES COMPUT SC, V4407, P127, DOI 10.1007/978-3-540-71410-1_10
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Soos M, 2009, LECT NOTES COMPUT SC, V5584, P244, DOI 10.1007/978-3-642-02777-2_24
   Thomas W, 2009, LECT NOTES COMPUT SC, V5504, P1
   Wolper P., 1982, Proc. 9th ACM Symp. on Principles of Programming Languages, P20
   WONGTOI H, 1991, LECT NOTES COMPUT SC, V531, P272, DOI 10.1007/BFb0023741
NR 58
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 54
DI 10.1145/3371122
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400055
OA gold
DA 2024-07-18
ER

PT J
AU Darais, D
   Sweet, I
   Liu, C
   Hicks, M
AF Darais, David
   Sweet, Ian
   Liu, Chang
   Hicks, Michael
TI A Language for Probabilistically Oblivious Computation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Oblivious Computation; Type Systems; Probability; Noninterference
ID SECURITY; NONINTERFERENCE
AB An oblivious computation is one that is free of direct and indirect information leaks, e.g., due to observable differences in timing and memory access patterns. This paper presents Aob'iv, a core language whose type system enforces obliviousness. Prior work on type-enforced oblivious computation has focused on deterministic programs. lambda(obliv) is new in its consideration of programs that implement probabilistic algorithms, such as those involved in cryptography. lambda(obliv) employs a substructural type system and a novel notion of probability region to ensure that information is not leaked via the observed distribution of visible events. Probability regions support reasoning about probabilistic correlation and independence between values, and our use of probability regions is motivated by a source of unsoundness that we discovered in the type system of ObliVM, a language for implementing state of the art oblivious algorithms. We prove that lambda(obliv)'s type system enforces obliviousness and show that it is expressive enough to typecheck advanced tree-based oblivious RAMS.
C1 [Darais, David] Univ Vermont, Burlington, VT 05405 USA.
   [Sweet, Ian; Hicks, Michael] Univ Maryland, College Pk, MD 20742 USA.
   [Liu, Chang] Citadel Secur, Chicago, IL USA.
C3 University of Vermont; University System of Maryland; University of
   Maryland College Park
RP Darais, D (corresponding author), Univ Vermont, Burlington, VT 05405 USA.
EM david.darais@uvm.edu; ins@cs.umd.edu; liuchang@eecs.berkeley.edu;
   mwh@cs.umd.edu
FU National Science Foundation [CNS-1563722, CNS-1314857, CNS-1111599,
   CCF-1901278]; DARPA [FA8750-15-2-0104, FA8750-16-C-0022]; ODNI/IARPA
   [2019-1902070008]
FX We thank Aseem Rastogi, Kesha Heitala, Joe Near, and the anonymous
   reviewers for comments on earlier drafts of this paper, and Elaine Shi
   for helpful discussions throughout our process. This material is based
   upon work supported by the National Science Foundation under Grant Nos.
   CNS-1563722, CNS-1314857, CNS-1111599 and CCF-1901278; by DARPA under
   contracts FA8750-15-2-0104 and FA8750-16-C-0022; and by ODNI/IARPA via
   2019-1902070008. Any opinions, findings, conclusions or recommendations
   expressed in this material are those of the author and do not
   necessarily reflect the views of the NSF, DARPA, ODNI, IARPA, or the
   U.S. Government.
CR Agat J., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P40, DOI 10.1145/325694.325702
   [Anonymous], 2013, CCS
   [Anonymous], 1987, PROC 19 ANN ACM S TH
   [Anonymous], 2006, ANN ASIAN COMP SCI C
   Askarov A, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P297, DOI 10.1145/1866307.1866341
   BAKER HG, 1992, SIGPLAN NOTICES, V27, P89, DOI 10.1145/142137.142162
   Barker T, 2016, ELECTRON NOTES THEOR, V325, P47, DOI 10.1016/j.entcs.2016.09.031
   Barthe G., 2017, LPAR-21. 21st International Conference on Logic for Programming, V46, P385, DOI DOI 10.29007/VZ48
   Barthe G., 2018, LECT NOTES COMPUTER, V10801, P117, DOI [10.1007/978-3-319-89884-15, DOI 10.1007/978-3-319-89884-1_5]
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371123
   Barthe G, 2017, ACM SIGPLAN NOTICES, V52, P161, DOI 10.1145/3093333.3009896
   Barthe G, 2015, ACM SIGPLAN NOTICES, V50, P55, DOI [10.1145/2775051.2677000, 10.1145/10.1145/2676726.2677000]
   Barthe G, 2014, ACM SIGPLAN NOTICES, V49, P193, DOI 10.1145/2535838.2535847
   Barthe G, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2492061
   Barthe G, 2010, ACM T INFORM SYST SE, V13, DOI 10.1145/1805974.1895977
   Blanton Marina., 2013, ASIA CCS
   Brumley D, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE 12TH USENIX SECURITY SYMPOSIUM, P1
   Chan T-H. Hubert, 2019, P 30 ANN ACM SIAM S
   Darais David, 2019, ABS171109305 CORR AR
   DOLEV D, 1983, IEEE T INFORM THEORY, V29, P198, DOI 10.1109/TIT.1983.1056650
   Edward Suh G., 2003, ICS
   EMAMI M, 1994, SIGPLAN NOTICES, V29, P242, DOI 10.1145/773473.178264
   Eppstein David., 2010, GIS
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Fletchter CW, 2014, INT S HIGH PERF COMP, P213, DOI 10.1109/HPCA.2014.6835932
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Goldreich O, 1996, J ACM, V43, P431, DOI 10.1145/233551.233553
   Goldreich Oded, 1987, Proceedings of the 19th Annual ACM Symposium on Theory of Computing. STOC'87, P182, DOI DOI 10.1145/28395.28416
   Hoekstra Matt, 2015, INTEL SGX DUMMIES IN
   Hsu Justin, 2017, THESIS U PENNSYLVANI
   Huang D, 2016, LECT NOTES COMPUT SC, V9632, P337, DOI 10.1007/978-3-662-49498-1_14
   Islam M. S., 2012, P NETW DISTR SYST SE, P1
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Kocher P, 2004, DES AUT CON, P753
   Kocher P. C., 1996, Advances in Cryptology - CRYPTO'96. 16th Annual International Cryptology Conference. Proceedings, P104
   Kocher Paul, 2019, IEEE S SEC PRIV S P
   Kopf Boris, 2013, FORMAL METHODS DYNAM
   Kozen D., 1979, 20th Annual Symposium of Foundations of Computer Science, P101, DOI 10.1109/SFCS.1979.38
   LAMPSON BW, 1973, COMMUN ACM, V16, P613, DOI 10.1145/362375.362389
   Lie D, 2000, ACM SIGPLAN NOTICES, V35, P168, DOI 10.1145/384264.379237
   Lipp M, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P973
   Liu C, 2015, P IEEE S SECUR PRIV, P359, DOI 10.1109/SP.2015.29
   Liu C, 2015, ACM SIGPLAN NOTICES, V50, P87, DOI 10.1145/2694344.2694385
   Liu C, 2013, P IEEE CSFW, P51, DOI 10.1109/CSF.2013.11
   Liu C, 2014, P IEEE S SECUR PRIV, P623, DOI 10.1109/SP.2014.46
   Liu I, 2012, PR IEEE COMP DESIGN, P87, DOI 10.1109/ICCD.2012.6378622
   Maas Martin, 2013, P 2013 ACM SIGSAC C, P311, DOI DOI 10.1145/2508859
   Molnar D, 2006, LECT NOTES COMPUT SC, V3935, P156
   Monniaux D, 2000, LECT NOTES COMPUT SC, V1824, P322
   Mu CY, 2009, ELECTRON NOTES THEOR, V253, P119, DOI 10.1016/j.entcs.2009.10.009
   Ngo TM, 2014, J COMPUT SECUR, V22, P269, DOI 10.3233/JCS-130492
   oblivm-www, 2019, OBLIVM OP SOURC REL
   Ohrimenko O, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P619
   Park S, 2008, ACM T PROGR LANG SYS, V31, DOI 10.1145/1452044.1452048
   Ramsey N, 2002, ACM SIGPLAN NOTICES, V37, P154, DOI 10.1145/565816.503288
   Rand R, 2015, ELECTRON NOTES THEOR, V319, P351, DOI 10.1016/j.entcs.2015.12.021
   Reed J, 2010, ACM SIGPLAN NOTICES, V45, P157, DOI 10.1145/1932681.1863568
   Ren Ling, 2013, ISCA
   Russo Alejandro, 2006, CSF W
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sabelfeld A, 2000, P IEEE CSFW, P200, DOI 10.1109/CSFW.2000.856937
   Sato T, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290351
   Scibior A, 2015, ACM SIGPLAN NOTICES, V50, P165, DOI 10.1145/2804302.2804317
   Shi E, 2011, LECT NOTES COMPUT SC, V7073, P197, DOI 10.1007/978-3-642-25385-0_11
   Smith C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290352
   Smith G, 2003, P IEEE CSFW, P3, DOI 10.1109/CSFW.2003.1212701
   Smith G, 2007, PLAS'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY, P67, DOI 10.1145/1255329.1255341
   Smith Geoffrey, 2006, WORKSH FORM METH SEC
   Van Bulck J, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P991
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Wang XS, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P215, DOI 10.1145/2660267.2660314
   Wang XS, 2015, CCS'15: PROCEEDINGS OF THE 22ND ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P850, DOI 10.1145/2810103.2813634
   Yao A. C., 1986, 27th Annual Symposium on Foundations of Computer Science (Cat. No.86CH2354-9), P162, DOI 10.1109/SFCS.1986.25
   Zahur S, 2013, P IEEE S SECUR PRIV, P493, DOI 10.1109/SP.2013.40
   Zhang D, 2017, ACM SIGPLAN NOTICES, V52, P888, DOI 10.1145/3093333.3009884
   Zhang DF, 2015, ACM SIGPLAN NOTICES, V50, P503, DOI 10.1145/2694344.2694372
   Zhang DF, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P563
   Zhang DF, 2012, ACM SIGPLAN NOTICES, V47, P99, DOI 10.1145/2345156.2254078
   Zhang Hengchu, 2019, CORR ABS190512594, V3
   Zhuang XT, 2004, ACM SIGPLAN NOTICES, V39, P72, DOI 10.1145/1037187.1024403
NR 82
TC 3
Z9 3
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 50
DI 10.1145/3371118
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400051
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Cambronero, JP
   Rinard, MC
AF Cambronero, Jose P.
   Rinard, Martin C.
TI AL: Autogenerating Supervised Learning Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE automated machine learning; program analysis for machine learning
AB We present AL, a novel automated machine learning system that learns to generate new supervised learning pipelines from an existing corpus of supervised learning programs. In contrast to existing automated machine learning tools, which typically implement a search over manually selected machine learning functions and classes, AL learns to identify the relevant classes in an API by analyzing dynamic program traces that use the target machine learning library. AL constructs a conditional probability model from these traces to estimate the likelihood of the generated supervised learning pipelines and uses this model to guide the search to generate pipelines for new datasets. Our evaluation shows that AL can produce successful pipelines for datasets that previous systems fail to process and produces pipelines with comparable predictive performance for datasets that previous systems process successfully.
C1 [Cambronero, Jose P.; Rinard, Martin C.] MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Cambronero, JP (corresponding author), MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
EM jcamsan@mit.edu; rinard@csail.mit.edu
FU DARPA [FA8650-15-C-7564, FA8750-14-2-0242]
FX We thank the reviewers for their helpful feedback and suggestions. This
   work was funded in part by DARPA grant FA8650-15-C-7564 and
   FA8750-14-2-0242.
CR Ali S, 2006, NEUROCOMPUTING, V70, P173, DOI 10.1016/j.neucom.2006.03.004
   Allamanis M, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P38, DOI 10.1145/2786805.2786849
   Autosklearn, 2017, GITH REP ISS 292
   BAUM LE, 1966, ANN MATH STAT, V37, P1554, DOI 10.1214/aoms/1177699147
   Borodin A, 2004, J ARTIF INTELL RES, V21, P579, DOI 10.1613/jair.1336
   Buitinck L, 2013, ECML PKDD WORKSH LAN, P108, DOI DOI 10.48550/ARXIV.1309.0238
   Chen TQ, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P785, DOI 10.1145/2939672.2939785
   de Sá AGC, 2017, LECT NOTES COMPUT SC, V10196, P246, DOI 10.1007/978-3-319-55696-3_16
   Elinder M, 2012, P NATL ACAD SCI USA, V109, P13220, DOI 10.1073/pnas.1207156109
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Feurer M., 2015, NIPS, P2962
   Giraud-Carrier C, 2004, MACH LEARN, V54, P187, DOI 10.1023/B:MACH.0000015878.60765.42
   Google, 2017, KAGGL WEBS
   Google, 2017, KAGGL WEBS
   Gu XD, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P631, DOI 10.1145/2950290.2950334
   Hindle A, 2012, PROC INT CONF SOFTW, P837, DOI 10.1109/ICSE.2012.6227135
   Hutter Frank, 2011, Learning and Intelligent Optimization. 5th International Conference, LION 5. Selected Papers, P507, DOI 10.1007/978-3-642-25566-3_40
   Kaggle, 2015, TIT MACH LEARN DIS S
   Kaggle, 2017, MET
   Kery MB, 2017, PROCEEDINGS OF THE 2017 ACM SIGCHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'17), P1265, DOI 10.1145/3025453.3025626
   Kotthoff L, 2017, J MACH LEARN RES, V18
   Lee Ceshine, 2017, MULTIPLE KAGGLE KERN
   Lin D., 1998, P AAAI 98 WORKSH LEA
   Lohr S, 2014, NEW YORK TIMES
   Mandelin D, 2005, ACM SIGPLAN NOTICES, V40, P48, DOI 10.1145/1064978.1065018
   McKinney W., 2010, P 9 PYTH SCI C, P51, DOI [DOI 10.25080/MAJORA-92BF1922-00A, 10.25080/majora-92bf1922-00a]
   Murali Vijayaraghavan, 2017, ABS170305698 CORR
   Murali Vijayaraghavan, 2018, INT C LEARN REPR
   Olson RS, 2017, BIODATA MIN, V10, DOI 10.1186/s13040-017-0154-4
   Olson RS, 2016, GECCO'16: PROCEEDINGS OF THE 2016 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P485, DOI 10.1145/2908812.2908918
   Paszke A., 2017, NIPS W
   RATCLIFF JW, 1988, DR DOBBS J, V13, P46
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2594291.2594321, 10.1145/2666356.2594321]
   Reif M, 2014, PATTERN ANAL APPL, V17, P83, DOI 10.1007/s10044-012-0280-z
   Rosenfeld R, 1996, COMPUT SPEECH LANG, V10, P187, DOI 10.1006/csla.1996.0011
   SALTON G, 1988, INFORM PROCESS MANAG, V24, P513, DOI 10.1016/0306-4573(88)90021-0
   Seabold S., 2010, P 9 PYTH SCI C, P57, DOI DOI 10.25080/MAJORA-92BF1922-011
   Shu C., 2017, 31 AAAI C ART INT
   Singh Rishabh, 2017, 2 SUMM ADV PROGR LAN
   Sparks ER, 2017, PROC INT CONF DATA, P535, DOI 10.1109/ICDE.2017.109
   Sun Zeyu, 2018, ARXIV PREPRINT ARXIV
   Tarca AL, 2007, PLOS COMPUT BIOL, V3, P953, DOI 10.1371/journal.pcbi.0030116
   TPOT, 2018, GITHUB REPOSITORY
   Tsoumakas G, 2011, J MACH LEARN RES, V12, P2411
   Tunguz Bojan, 2018, MULTIPLE KAGGLE KERN
   UCI, UCI SOLAR FLARE DATA
   Vanschoren Joaquin, 2013, SIGKDD Explorations, V15, P49, DOI DOI 10.1145/2641190.2641198
   White M, 2016, IEEE INT CONF AUTOM, P87, DOI 10.1145/2970276.2970326
   Witten IH, 2011, MOR KAUF D, P1
NR 50
TC 7
Z9 7
U1 3
U2 11
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 175
DI 10.1145/3360601
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500060
OA gold
DA 2024-07-18
ER

PT J
AU Wimmer, C
   Stancu, C
   Hofer, P
   Jovanovic, V
   Wögerer, P
   Kessler, PB
   Pliss, O
   Würthinger, T
AF Wimmer, Christian
   Stancu, Codrut
   Hofer, Peter
   Jovanovic, Vojin
   Woegerer, Paul
   Kessler, Peter B.
   Pliss, Oleg
   Wuerthinger, Thomas
TI Initialize Once, Start Fast: Application Initialization at Build Time
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compiler; ahead-of-time compilation; virtual machine; optimization;
   Java; Graal; GraalVM
AB Arbitrary program extension at run time in language-based VMs, e.g., Java's dynamic class loading, comes at a startup cost: high memory footprint and slow warmup. Cloud computing amplifies the startup overhead. Microservices and serverless cloud functions lead to small, self-contained applications that are started often. Slow startup and high memory footprint directly affect the cloud hosting costs, and slow startup can also break service-level agreements. Many applications are limited to a prescribed set of pre-tested classes, i.e., use a closed-world assumption at deployment time. For such Java applications, GraalVM Native Image offers fast startup and stable performance.
   GraalVM Native Image uses a novel iterative application of points-to analysis and heap snapshotting, followed by ahead-of-time compilation with an optimizing compiler. Initialization code can run at build time, i.e., executables can be tailored to a particular application configuration. Execution at run time starts with a pre-populated heap, leveraging copy-on-write memory sharing. We show that this approach improves the startup performance by up to two orders of magnitude compared to the Java HotSpot VM, while preserving peak performance. This allows Java applications to have a better startup performance than Go applications and the V8 JavaScript VM.
C1 [Wimmer, Christian; Stancu, Codrut; Kessler, Peter B.; Pliss, Oleg] Oracle Labs, Belmont, CA 94002 USA.
   [Hofer, Peter; Woegerer, Paul] Oracle Labs, Linz, Austria.
   [Jovanovic, Vojin; Wuerthinger, Thomas] Oracle Labs, Zurich, Switzerland.
C3 Oracle; Oracle
RP Wimmer, C (corresponding author), Oracle Labs, Belmont, CA 94002 USA.
EM christian.wimmer@oracle.com; codrut.stancu@oracle.com;
   peter.hofer@oracle.com; vojin.jovanovic@oracle.com;
   paul.woegerer@oracle.com; pkessler@amperecomputing.com;
   oleg.pliss@gmail.com; thomas.wuerthinger@oracle.com
FU Virtual Machine Research Group at Oracle Labs; Institute for System
   Software at the Johannes Kepler University Linz
FX We thank all members of the Virtual Machine Research Group at Oracle
   Labs and the Institute for System Software at the Johannes Kepler
   University Linz for their support and contributions. We especially thank
   Mario Wolczko for feedback on this paper.
CR AGESEN O, 1994, SIGPLAN NOTICES, V29, P355, DOI 10.1145/191081.191135
   Akkus IE, 2018, PROCEEDINGS OF THE 2018 USENIX ANNUAL TECHNICAL CONFERENCE, P923
   Alpern B, 2005, IBM SYST J, V44, P399, DOI 10.1147/sj.442.0399
   Alpern B, 1999, ACM SIGPLAN NOTICES, V34, P314, DOI 10.1145/320385.320418
   Amazon Web Services Inc., 2019, AWS LAMBDA
   Armbruster A, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1324969.1324974
   Aslam Faisal, 2010, DISTRIBUTED COMPUTIN, p15S30, DOI [10.1007/978-3-642-13651-1_2, DOI 10.1007/978-3-642-13651-1_2]
   Barrett E, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133876
   Bell Jonathan, 2018, P EUR C OBJ OR PROGR, V17, DOI 10.4230/LIPIcs.ECOOP.2018.17
   Bobrow D.G., 1969, BBN LISP SYSTEM REFE
   Bodden E, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P241, DOI 10.1145/1985793.1985827
   Bruno R, 2016, MIDDLEWARE '16: PROCEEDINGS OF THE 17TH INTERNATIONAL MIDDLEWARE CONFERENCE, DOI 10.1145/2988336.2988341
   Chambers JM, 2008, STAT COMPUT SER, P1
   Corrie Ben, 2006, JAVA TECHNOLOGY IBM
   CRIU, 2019, CHECKP REST US
   Czajkowski G, 2000, ACM SIGPLAN NOTICES, V35, P354, DOI 10.1145/354222.353195
   Czajkowski Grzegorz, 2002, P EUR C OBJ OR PROGR, DOI [10.1007/3-540-47993-7_7, DOI 10.1007/3-540-47993-7_7]
   D Language Foundation, 2019, PROGRAMMING LANGUAGE
   Dean Jeffrey, 1994, P ACM SIGPLAN WORKSH, p85S96
   Detlefs David, 2004, P 4 INT S MEM MAN VA, DOI [10.1145/1029873.1029879, DOI 10.1145/1029873.1029879]
   Dos Reis Gabriel, 2010, P ACM S APPL COMP, p2131S2136, DOI [10.1145/1774088, DOI 10.1145/1774088]
   Ehringer D., 2010, TECHN REPORT, V4, P72
   FALKOFF AD, 1973, IBM J RES DEV, V17, P324, DOI 10.1147/rd.174.0324
   FasterXML, 2019, JACKSON
   Frampton D., 2009, 2009 ACM International Conference on Virtual Execution Environments, P81, DOI [DOI 10.1145/1508293.1508305, 10.1145/1508293.1508305]
   Google, 2019, DART LANGUAGE
   Google, 2012, V8 JAVASCRIPT ENGINE
   Google, 2019, DART SNAPSHOT
   Google Cloud Platform, 2019, CLOUD FUNCT SERV ENV
   Guo Yang, 2015, CUSTOM STARTUP SNAPS
   Heiss Janice J., 2005, MULTITASKING VIRTUAL
   Hind M, 2001, ACM SIGPLAN NOTICES, P54
   HOLZLE U, 1992, SIGPLAN NOTICES, V27, P32, DOI 10.1145/143103.143114
   IBM, 2019, IBM Cloud Functions-Plataforma Functions-as-a-Service (FaaS) com base no Apache OpenWhisk
   Ingalls Daniel H. H., 1983, SMALLTALK 80 BITS HI, p9S28
   International Organization for Standards, 2017, 148822017 I ISO IEC
   Kawachiya K, 2007, VEE'07: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON VIRTUAL EXECUTION ENVIRONMENTS, P1
   Koch Stefan, 2017, NEW CTFE ENGINE
   Landman D, 2017, PROC INT CONF SOFTW, P507, DOI 10.1109/ICSE.2017.53
   Lion D, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P383
   Marquard Morten, 1992, PART EV OBJ OR IMPR
   Marquet Kevin, 2005, P INT C EMBEDD SOFTW, p63S70, DOI [10.1007/11599555_9, DOI 10.1007/11599555_9]
   Microsoft Azure, 2019, AZURE FUNCTIONS SERV
   Object Computing, 2019, MICRONAUT
   Oracle, 2019, GRAALVM
   Oracle, 2019, HELIDON
   Perf Wiki, 2019 PERF LINUX PROF
   Pilipenko Artur, 2018, P INT C MAN LANG RUN, V3, DOI [10.1145/3237009, DOI 10.1145/3237009]
   Pournelle G. H., 1953, Journal of Mammalogy, V34, P133, DOI 10.1890/0012-9658(2002)083[1421:SDEOLC]2.0.CO;2
   Prokopec A, 2019, INT SYM CODE GENER, P164, DOI [10.1109/CGO.2019.8661171, 10.5281/zenodo.2328430]
   Rashid R., 1987, Proceedings of the Second International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS II) (Cat. No.87CH2440-6), P31
   Rayside D, 2002, SCI COMPUT PROGRAM, V45, P245, DOI 10.1016/S0167-6423(02)00059-X
   RedHat, 2019, QUARKUS
   Rogers Ian, 2009, BEAUTIFUL ARCHITECTU
   Ryder BG, 2003, LECT NOTES COMPUT SC, V2622, P126
   Schultz UP, 2003, ACM T PROGR LANG SYS, V25, P452, DOI 10.1145/778559.778561
   Schultz UP, 2001, LECT NOTES COMPUT SC, V2053, P173
   Shali A, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P375
   Smaragdakis Y., 2015, FDN TRENDS PROGRAM L, V2, P1, DOI DOI 10.1561/2500000014
   Smith Shaun, 2018, ANNOUNCING ORACLE FU
   Sridharan Manu, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P196, DOI 10.1007/978-3-642-36946-9_8
   Stadler Lukas, 2014, P ANN IEEE ACM INT S, P165, DOI DOI 10.1145/2544137.2544157
   STEELE GL, 1993, SIGPLAN NOTICES, V28, P231, DOI 10.1145/155360.155373
   Sun Microsystems, 2004, CLASS DATA SHARING
   TEITELMAN W, 1974, INTERLISP REFERENCE
   Teoh H. S., 2017, COMPILE TIME VS COMP
   The Apache Software Foundation, 2019 AB APACHE HTTP
   Tip Frank, 1995, P ACM SIGPLAN C OBJ, DOI [10.1145/320384.320414, DOI 10.1145/320384.320414]
   Titzer BL, 2006, ACM SIGPLAN NOTICES, V41, P191, DOI 10.1145/1167515.1167489
   Titzer BL, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P352, DOI 10.1145/1250734.1250775
   Ungar D., 1995, SIGPLAN Notices, V30, P73, DOI 10.1145/217839.217845
   Wheeler J. G., 1981, APL Quote Quad, V12, P327, DOI 10.1145/390007.805382
   Wimmer C, 2017, CC'17: PROCEEDINGS OF THE 26TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P55, DOI 10.1145/3033019.3033025
   Wimmer C, 2013, ACM T ARCHIT CODE OP, V9, DOI 10.1145/2400682.2400689
   Würthinger T, 2017, ACM SIGPLAN NOTICES, V52, P662, DOI [10.1145/3062341.3062381, 10.1145/3140587.3062381]
NR 75
TC 26
Z9 28
U1 1
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 184
DI 10.1145/3360610
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500069
OA gold
DA 2024-07-18
ER

PT J
AU Van Strydonck, T
   Piessens, F
   Devriese, D
AF Van Strydonck, Thomas
   Piessens, Frank
   Devriese, Dominique
TI Linear Capabilities for Fully Abstract Compilation of
   Separation-Logic-Verified Code
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE fully abstract compilation; capabilities; verification; separation logic
AB Separation logic is a powerful program logic for the static modular verification of imperative programs. However, dynamic checking of separation logic contracts on the boundaries between verified and untrusted modules is hard, because it requires one to enforce (among other things) that outcalls from a verified to an untrusted module do not access memory resources currently owned by the verified module.
   This paper proposes an approach to dynamic contract checking by relying on support for capabilities, a well-studied form of unforgeable memory pointers that enables fine-grained, efficient memory access control. More specifically, we rely on a form of capabilities called linear capabilities for which the hardware enforces that they cannot be copied.
   We formalize our approach as a fully abstract compiler from a statically verified source language to an unverified target language with support for linear capabilities. The key insight behind our compiler is that memory resources described by spatial separation logic predicates can be represented at run time by linear capabilities. The compiler is separation-logic-proof-directed: it uses the separation logic proof of the source program to determine how memory accesses in the source program should be compiled to linear capability accesses in the target program.
   The full abstraction property of the compiler essentially guarantees that compiled verified modules can interact with untrusted target language modules as if they were compiled from verified code as well.
C1 [Van Strydonck, Thomas; Piessens, Frank] Katholieke Univ Leuven, Leuven, Belgium.
   [Devriese, Dominique] Vrije Univ Brussel, Brussels, Belgium.
C3 KU Leuven; Vrije Universiteit Brussel
RP Van Strydonck, T (corresponding author), Katholieke Univ Leuven, Leuven, Belgium.
EM thomas.vanstrydonck@cs.kuleuven.be; frank.piessens@cs.kuleuven.be;
   devriese@vub.be
RI Devriese, Dominique/C-5493-2014
OI Devriese, Dominique/0000-0002-3862-6856
FU Research Fund KU Leuven; Research Foundation -Flanders (FWO)
FX This research is partially funded by the Research Fund KU Leuven. Thomas
   Van Strydonck holds a PhD Fellowship of the Research Foundation
   -Flanders (FWO).
CR Abadi M., 1999, Secure Internet programming. Security issues for mobile and distributed objects, P19
   Abadi M, 2012, ACM T INFORM SYST SE, V15, DOI 10.1145/2240276.2240279
   Agten P, 2015, ACM SIGPLAN NOTICES, V50, P581, DOI [10.1145/2676726.2676972, 10.1145/2775051.2676972]
   [Anonymous], 2017, FORMAL REASONING PRO
   Bader J., 2018, VERIFICATION MODEL C
   Berdine J., 2011, LNCS, V6806, P178, DOI DOI 10.1007/978-3-642-22110-1
   Berdine J, 2007, LECT NOTES COMPUT SC, V4590, P178
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Calcagno C, 2015, LECT NOTES COMPUT SC, V9058, P3, DOI 10.1007/978-3-319-17524-9_1
   Chisnall D, 2015, ACM SIGPLAN NOTICES, V50, P117, DOI [10.1145/2694344.2694367, 10.1145/2775054.2694367]
   Costan Victor., 2016, IACR CRYPTOL EPRINT
   de Amorim AA, 2016, J COMPUT SECUR, V24, P689, DOI 10.3233/JCS-15784
   de Amorim AA, 2015, P IEEE S SECUR PRIV, P813, DOI 10.1109/SP.2015.55
   Devriese D, 2016, ACM SIGPLAN NOTICES, V51, P164, DOI 10.1145/2914770.2837618
   Dimoulas Christos, 2016, P 21 ACM SIGPLAN INT, DOI [10.1145/2951913.2951930, DOI 10.1145/2951913.2951930]
   Distefano D, 2006, LECT NOTES COMPUT SC, V3920, P287
   Fournet C, 2013, ACM SIGPLAN NOTICES, V48, P371, DOI 10.1145/2480359.2429114
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garg Deepak, 2017, ARXIV171007309
   Insolvibile Gianluca., 2003, GARBAGE COLLECTION C, V113, p7S
   Jacobs B, 2010, LECT NOTES COMPUT SC, V6461, P304, DOI 10.1007/978-3-642-17164-2_21
   Jacobs Bart., 2008, The VeriFast program verifier
   Levy Henry M, 1984, CAPABILITY BASED COM CAPABILITY BASED COM
   New MS, 2016, ACM SIGPLAN NOTICES, V51, P103, DOI 10.1145/3022670.2951941
   Nguyen HH, 2008, LECT NOTES COMPUT SC, V4905, P203, DOI 10.1007/978-3-540-78163-9_19
   Noorman Job, 2013, SANCUS LOW COST TRUS USENIX SEC S, P479
   OHearn PeterW., 2012, NATO Science for Peace and Security Series, V33, P286, DOI [10.3233/978-1-61499-028-4-286, DOI 10.3233/978-1-61499-028-4-286]
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Patrignani M, 2017, P IEEE CSFW, P392, DOI 10.1109/CSF.2017.13
   Patrignani M, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2699503
   Patrignani Marco., 2018, ROBUSTLY SAFE COMPIL
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Robert N, 2018, UCAMCLTR927
   Skorstengaard L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290332
   Strackx R, 2010, L N INST COMP SCI SO, V50, P344
   Swasey D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133913
   van Ginkel N, 2017, LECT NOTES COMPUT SC, V10695, P105, DOI 10.1007/978-3-319-71237-6_6
   Vogels F, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(3:19)2015
   Watson RNM, 2015, P IEEE S SECUR PRIV, P20, DOI 10.1109/SP.2015.9
NR 39
TC 12
Z9 12
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 84
DI 10.1145/3341688
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900007
OA Green Published, Green Accepted, gold
DA 2024-07-18
ER

PT J
AU Parker, J
   Vazou, N
   Hicks, M
AF Parker, James
   Vazou, Niki
   Hicks, Michael
TI LWeb: Information Flow Security or Multi-tier Web Applications
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE security; information flow control; metatheory; Liquid Haskell; Haskell
ID LANGUAGE
AB This paper presents LWeb, a framework for enforcing label-based, information flow policies in database-using web applications. In a nutshell, LWeb marries the LIO Haskell IFC enforcement library with the Yesod web programming framework. The implementation has two parts. First, we extract the core of LIO into a monad transformer (LMonad) and then apply it to Yesod's core monad. Second, we extend Yesod's table definition DSL and query functionality to permit defining and enforcing label-based policies on tables and enforcing them during query processing. LWeb's policy language is expressive, permitting dynamic per-table and per-row policies. We formalize the essence of LWeb in the lambda(Lweb) calculus and mechanize the proof of noninterference in Liquid Haskell. This mechanization constitutes the first metatheoretic proof carried out in Liquid Haskell. We also used LWeb to build a substantial web site hosting the Build it, Break it, Fix it security-oriented programming contest. The site involves 40 data tables and sophisticated policies. Compared to manually checking security policies, LWeb imposes a modest runtime overhead of between 2% to 21%. It reduces the trusted code base from the whole application to just 1% of the application code, and 21% of the code overall (when counting LWeb too).
C1 [Parker, James; Vazou, Niki; Hicks, Michael] Univ Maryland, Dept Comp Sci, College Pk, MD 20742 USA.
   [Vazou, Niki] IMDEA Software Inst, Madrid, Spain.
   [Vazou, Niki] Univ Maryland, College Pk, MD USA.
C3 University System of Maryland; University of Maryland College Park;
   IMDEA Software Institute; University System of Maryland; University of
   Maryland College Park
RP Parker, J (corresponding author), Univ Maryland, Dept Comp Sci, College Pk, MD 20742 USA.
FU National Science Foundation [CNS-1801545]; DARPA [FA8750-16-C-0022]
FX We would like to thank Alejandro Russo and the anonymous reviewers for
   helpful comments on a draft of this paper. This work was supported in
   part by the National Science Foundation under grant CNS-1801545 and by
   DARPA under contract FA8750-16-C-0022.
CR [Anonymous], 2012, OSDI
   [Anonymous], 2014, ICFP
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Austin T.H., 2013, PLAS
   Austin TH, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P165
   Bell D. E., 1973, Tech. Rep. 2547
   Buiras P, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P289, DOI 10.1145/2784731.2784758
   Buiras Pablo, 2017, CSF
   Chlipala A., 2010, OSDI
   Chong S, 2007, USENIX ASSOCIATION PROCEEDINGS OF THE 16TH USENIX SECURITY SYMPOSIUM, P1
   Chong Stephen, 2007, SOSP
   Chudnov A, 2015, CCS'15: PROCEEDINGS OF THE 22ND ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P629, DOI 10.1145/2810103.2813684
   Corcoran BJ, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P269
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   Efstathopoulos P., 2005, SOSP
   Esqueleto, 2018, ESQ TYP EDSL SQLQUIR ESQ TYP EDSL SQLQUIR
   Giffin D, 2017, J COMPUT SECUR, V25, P427, DOI 10.3233/JCS-15801
   Goguen J.A., 1982, S P
   Hammer C, 2009, INT J INF SECUR, V8, P399, DOI 10.1007/s10207-009-0086-1
   Hedin D, 2016, J COMPUT SECUR, V24, P181, DOI 10.3233/JCS-160544
   Heule Stefan., 2015, POST
   Johnson A, 2015, ACM SIGPLAN NOTICES, V50, P291, DOI [10.1145/2813885.2737957, 10.1145/2737924.2737957]
   King Dave, 2008, LECT NOTES COMPUTER, V5352
   Krohn M., 2007, SOSP
   Li P, 2010, THEOR COMPUT SCI, V411, P1974, DOI 10.1016/j.tcs.2010.01.025
   Lourenço L, 2015, ACM SIGPLAN NOTICES, V50, P317, DOI [10.1145/2775051.2676994, 10.1145/2676726.2676994]
   Lourenco Luisa, 2014, INT S TRUSTW GLOB CO INT S TRUSTW GLOB CO, V8358
   Mehta Aastha, 2017, USENIX SEC S
   Muthukumaran Divya, 2015, CCS
   Myers A. C., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P228, DOI 10.1145/292540.292561
   Nikhil Swamy, 2016, POPL
   Pottier F, 2003, ACM T PROGR LANG SYS, V25, P117, DOI 10.1145/596980.596983
   Roy I., 2009, PLDI
   Ruef Andrew, 2016, CCS
   Russo A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P280, DOI 10.1145/2784731.2784756
   Russo A, 2009, ACM SIGPLAN NOTICES, V44, P13, DOI 10.1145/1543134.1411289
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sabelfeld A, 2009, J COMPUT SECUR, V17, P517, DOI 10.3233/JCS-2009-0352
   Schoepe Daniel., 2014, ICFP
   Schultz D., 2013, EUROSYS
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Snoyman Michael, 2018, YES WEB FRAM HASK YES WEB FRAM HASK
   Stefan D, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000241
   Stefan Deian, 2011, HASK S HASK S
   Stefan Deian, 2012, NORDSEC
   Swamy N, 2008, P IEEE S SECUR PRIV, P369, DOI 10.1109/SP.2008.29
   Terei D, 2012, ACM SIGPLAN NOTICES, V47, P137, DOI 10.1145/2430532.2364524
   Tromer Eran., 2016, ASIA CCS
   Vassena M, 2016, PROCEEDINGS OF THE 2016 ACM WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS'16), P15, DOI 10.1145/2993600.2993608
   Vazou N, 2017, ACM SIGPLAN NOTICES, V52, P63, DOI 10.1145/3156695.3122963
   Vazou Niki, 2018, PACMPL, V2
   Waye Lucas, 2017, CCS
   Yang J, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P85
   Yang Jean, 2016, PLDI
   Zeldovich N, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P263
NR 56
TC 20
Z9 26
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 75
DI 10.1145/3290388
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300075
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Wang, YT
   Wilke, P
   Shao, Z
AF Wang, Yuting
   Wilke, Pierre
   Shao, Zhong
TI An Abstract Stack Based Approach to Verified Compositional Compilation
   to Machine Code
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE memory model; abstract stack; certified compilers; compositional
   compilation; machine code generation
AB A key ingredient contributing to the success of CompCert, the state-of-the-art verified compiler for C, is its block-based memory model, which is used uniformly for all of its languages and their verified compilation. However, CompCert's memory model lacks an explicit notion of stack. Its target assembly language represents the runtime stack as an unbounded list of memory blocks, making further compilation of CompCert assembly into more realistic machine code difficult since it is not possible to merge these blocks into a finite and continuous stack. Furthermore, various notions of verified compositional compilation rely on some kind of mechanism for protecting private stack data and enabling modification to the public stack-allocated data, which is lacking in the original CompCert. These problems have been investigated but not fully addressed before, in the sense that some advanced optimization passes that significantly change the ways stack blocks are (de-)allocated, such as tailcall recognition and inlining, are often omitted.
   We propose a lightweight and complete solution to the above problems. It is based on the enrichment of CompCert's memory model with an abstract stack that keeps track of the history of stack frames to bound the stack consumption and that enforces a uniform stack access policy by assigning fine-grained permissions to stack memory. Using this enriched memory model for all the languages of CompCert, we are able to reprove the correctness of the full compilation chain of CompCert, including all the optimization passes. In the end, we get Stack-Aware CompCert, a complete extension of CompCcrt that enforces the finiteness of the stack and fine-grained stack permissions.
   Based on Stack-Aware CompCert, we develop CompCertMC, the first extension of CompCert that compiles into a low-level language with flat memory spaces. Based on CompCertMC, we develop Stack-Aware CornpCertX, a complete extension of CompCert that supports a notion of compositional compilation that we call contextual compilation by exploiting the uniform stack access policy provided by the abstract stack.
C1 [Wang, Yuting; Wilke, Pierre; Shao, Zhong] Yale Univ, New Haven, CT 06520 USA.
   [Wilke, Pierre] Cent Supelec, Gif Sur Yvette, France.
C3 Yale University; Universite Paris Saclay
RP Wang, YT (corresponding author), Yale Univ, New Haven, CT 06520 USA.
EM yuting.wang@yale.edu; pierre.wilke@centralesupelec.fr;
   zhong.shao@yale.edu
OI Shao, Zhong/0000-0001-8184-7649; Wang, Yuting/0000-0003-3990-2418
FU NSF [1521523, 1715154, 1763399]; DARPA [FA8750-15-C-0082]
FX We would like to thank anonymous referees for helpful feedbacks that
   improved this paper significantly. This research is based on work
   supported in part by NSF grants 1521523, 1715154, and 1763399 and DARPA
   grant FA8750-15-C-0082. The U.S. Government is authorized to reproduce
   and distribute reprints for Governmental purposes notwithstanding any
   copyright notation thereon. The views and conclusions contained herein
   are those of the authors and should not be interpreted as necessarily
   representing the official policies or endorsements, either expressed or
   implied, of DARPA or the U.S. Government.
CR Amadio RM, 2014, LECT NOTES COMPUT SC, V8552, P1, DOI 10.1007/978-3-319-12466-7_1
   [Anonymous], 2012, RR7987 INRIA
   Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Asperti A, 2011, LECT NOTES ARTIF INT, V6803, P64, DOI 10.1007/978-3-642-22438-6_7
   Besson F, 2017, LECT NOTES COMPUT SC, V10499, P81, DOI 10.1007/978-3-319-66107-0_6
   Blazy Sandrine, 2006, P 14 INT C FORM METH P 14 INT C FORM METH
   Carbonneaux Q, 2014, ACM SIGPLAN NOTICES, V49, P270, DOI [10.1145/2594291.2594301, 10.1145/2666356.2594301]
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Gu Ronghui, 2014, YALEUDCSTR1500 YALEUDCSTR1500
   Kang J, 2016, ACM SIGPLAN NOTICES, V51, P178, DOI 10.1145/2914770.2837642
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X., COMPCERT VERIFIED CO
   Leroy X, 2008, J AUTOM REASONING, V41, P1, DOI 10.1007/s10817-008-9099-0
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Morrisett G, 2012, ACM SIGPLAN NOTICES, V47, P395, DOI 10.1145/2345156.2254111
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Sevcík J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P43, DOI 10.1145/1926385.1926393
   Stewart Gordon., 2015, THESIS PRINCETON U THESIS PRINCETON U
   Stewart Gordon, 2015, P 42 ACM S PRINC PRO P 42 ACM S PRINC PRO
   Tan G, 2018, J AUTOM REASONING, V60, P257, DOI 10.1007/s10817-017-9429-1
NR 23
TC 22
Z9 23
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 62
DI 10.1145/3290375
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300062
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Wang, SW
   Lin, B
   Sun, ZS
   Wen, M
   Liu, YP
   Lei, Y
   Mao, XG
AF Wang, Shangwen
   Lin, Bo
   Sun, Zhensu
   Wen, Ming
   Liu, Yepang
   Lei, Yan
   Mao, Xiaoguang
TI Two Birds with One Stone: Boosting Code Generation and Code Search via a
   Generative Adversarial Network
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Code Generation; Code Search; Generative Adversarial Network
AB Automatically transforming developers' natural language descriptions into source code has been a longstanding goal in software engineering research. Two types of approaches have been proposed in the literature to achieve this: code generation, which involves generating a new code snippet, and code search, which involves reusing existing code. However, despite existing efforts, the effectiveness of the state-of-the-art techniques remains limited. To seek for further advancement, our insight is that code generation and code search can help overcome the limitation of each other: the code generator can benefit from feedback on the quality of its generated code, which can be provided by the code searcher, while the code searcher can benefit from the additional training data augmented by the code generator to better understand code semantics. Drawing on this insight, we propose a novel approach that combines code generation and code search techniques using a generative adversarial network (GAN), enabling mutual improvement through the adversarial training. Specifically, we treat code generation and code search as the generator and discriminator in the GAN framework, respectively, and incorporate several customized designs for our tasks. We evaluate our approach in eight different settings, and consistently observe significant performance improvements for both code generation and code search. For instance, when using NatGen, a state-of-the-art code generator, as the generator and GraphCodeBERT, a state-of-the-art code searcher, as the discriminator, we achieve a 32% increase in CodeBLEU score for code generation, and a 12% increase in mean reciprocal rank for code search on a large-scale Python dataset, compared to their original performances.
C1 [Wang, Shangwen; Lin, Bo; Mao, Xiaoguang] Natl Univ Def Technol, Coll Comp, Key Lab Software Engn Complex Syst, Changsha, Peoples R China.
   [Sun, Zhensu] Singapore Management Univ, Singapore, Singapore.
   [Wen, Ming] Huazhong Univ Sci & Technol, Sch Cyber Sci & Engn, Wuhan, Peoples R China.
   [Liu, Yepang] Southern Univ Sci & Technol, Res Inst Trustworthy Autonoumous Syst, Dept Comp Sci & Engn, Shenzhen, Peoples R China.
   [Lei, Yan] Chongqing Univ, Chongqing, Peoples R China.
   [Wang, Shangwen] Southern Univ Sci & Technol, Shenzhen, Peoples R China.
C3 National University of Defense Technology - China; Singapore Management
   University; Huazhong University of Science & Technology; Southern
   University of Science & Technology; Chongqing University; Southern
   University of Science & Technology
RP Wen, M (corresponding author), Huazhong Univ Sci & Technol, Sch Cyber Sci & Engn, Wuhan, Peoples R China.; Liu, YP (corresponding author), Southern Univ Sci & Technol, Res Inst Trustworthy Autonoumous Syst, Dept Comp Sci & Engn, Shenzhen, Peoples R China.
EM wangshangwen13@nudt.edu.cn; linbo19@nudt.edu.cn; zhensuuu@gmail.com;
   mwenaa@hust.edu.cn; liuyp1@sustech.edu.cn; yanlei@cqu.edu.cn;
   xgmao@nudt.edu.cn
RI Wen, Ming/AEJ-8029-2022; Wang, Shangwen/IQW-8844-2023; Liu,
   Yepang/G-6183-2018
OI Wang, Shangwen/0000-0003-1469-2063; Liu, Yepang/0000-0001-8147-8126;
   Sun, Zhensu/0000-0001-5393-7858; Lin, Bo/0000-0001-5905-4677
FU National Key R&D Program of China [2022YFA1005101]; National Natural
   Science Foundation of China [61932021, 62002125, 62272072]; Young Elite
   Scientists Sponsorship Program by CAST [2021QNRC001]
FX This work is supported by the National Key R&D Program of China
   (No.2022YFA1005101), the National Natural Science Foundation of China
   No.61932021, No.62002125, and No.62272072, as well as the Young Elite
   Scientists Sponsorship Program by CAST (Grant No.2021QNRC001).
CR Allamanis M, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3212695
   Bao L, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P465, DOI 10.1109/ASE.2019.00051
   Barke S, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586030
   Bengio S, 2015, ADV NEUR IN, V28
   Brock A., 2019, INT C LEARN REPR
   Bui NDQ, 2021, SIGIR '21 - PROCEEDINGS OF THE 44TH INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL, P511, DOI 10.1145/3404835.3462840
   Bunel R., 2018, ARXIV180504276
   Cambronero J, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P964, DOI 10.1145/3338906.3340458
   Chakraborty Saikat, 2022, P 30 ACM JOINT M EUR
   Chen Mark, 2021, arXiv, DOI DOI 10.48550/ARXIV.2107.03374
   De Lange M, 2022, IEEE T PATTERN ANAL, V44, P3366, DOI 10.1109/TPAMI.2021.3057446
   Denton E, 2015, ADV NEUR IN, V28
   Devlin J, 2019, 2019 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES (NAACL HLT 2019), VOL. 1, P4171
   Di Grazia Luca, 2022, PREPRINT
   Dong L, 2018, PROCEEDINGS OF THE 56TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL), VOL 1, P731
   Eghbali A, 2022, PROC IEEE ACM INT C, P341, DOI [10.1109/ICSE-Companion55297.2022.9793747, 10.1145/3510454.3528648]
   Fan ZY, 2023, PROC INT CONF SOFTW, P1469, DOI 10.1109/ICSE48619.2023.00128
   Feng ZY, 2020, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2020, P1536
   Gao Shuzheng, 2023, 2023 IEEE ACM 45 INT
   Goodfellow I, 2020, COMMUN ACM, V63, P139, DOI 10.1145/3422622
   Gu XD, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P933, DOI 10.1145/3180155.3180167
   Guo D., 2021, ICLR
   HAREL D, 1990, IEEE T SOFTWARE ENG, V16, P403, DOI 10.1109/32.54292
   Hashimoto TB, 2018, ADV NEUR IN, V31
   Hayati SA, 2018, 2018 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2018), P925
   Hayes JH, 2006, EMPIR SOFTW ENG, V11, P493, DOI 10.1007/s10664-006-9025-1
   Husain H, 2020, Arxiv, DOI arXiv:1909.09436
   James MB, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428273
   Ko AJ, 2004, 2004 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN CENTRIC COMPUTING: PROCEEDINGS, P199
   Lei Y., 2023, 2023 IEEE ACM 31 INT
   Li J, 2023, PROC INT CONF SOFTW, P2124, DOI 10.1109/ICSE48619.2023.00179
   Li Jiwei, 2017, P 2017 C EMP METH NA, P2157, DOI DOI 10.18653/V1/D17-1230
   Li YJ, 2022, SCIENCE, V378, P1092, DOI 10.1126/science.abq1158
   Li ZZ, 2018, IEEE T PATTERN ANAL, V40, P2935, DOI 10.1109/TPAMI.2017.2773081
   Ling CY, 2020, INT C PROGRAM COMPRE, P48, DOI 10.1145/3387904.3389278
   Ling W, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P599
   Liu C, 2022, ACM COMPUT SURV, V54, DOI 10.1145/3480027
   Liu HY, 2020, INT J ENV RES PUB HE, V17, DOI 10.3390/ijerph17082800
   Lu S., 2021, 35 C NEUR INF PROC S
   Luan S., 2019, P ACM PROGRAMMING LA, V3, P1, DOI DOI 10.1145/3360578
   Lv F, 2015, IEEE INT CONF AUTOM, P260, DOI 10.1109/ASE.2015.42
   McMillan C, 2012, PROC INT CONF SOFTW, P848, DOI 10.1109/ICSE.2012.6227134
   McMillan C, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P111, DOI 10.1145/1985793.1985809
   Miltner A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360569
   Mirza M, 2014, Arxiv, DOI [arXiv:1411.1784, DOI 10.48550/ARXIV.1411.1784]
   Mohagheghi P, 2007, EMPIR SOFTW ENG, V12, P471, DOI 10.1007/s10664-007-9040-x
   Niu Changan, 2023, 2023 IEEE ACM 45 INT
   Niwattanakul Suphakit, 2013, IMECS 2013 Proceedings of International Multiconference of Engineers and Computer Scientists, P380
   Papineni K, 2002, 40TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE CONFERENCE, P311, DOI 10.3115/1073083.1073135
   Pearce H, 2022, P IEEE S SECUR PRIV, P754, DOI 10.1109/SP46214.2022.00057
   Pelsmaeker DAA, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527329
   Radford A., 2018, Improving language understanding by generative pre-training
   Radford A, 2016, Arxiv, DOI [arXiv:1511.06434, DOI 10.48550/ARXIV.1511.06434]
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2594291.2594321, 10.1145/2666356.2594321]
   Ren S, 2020, Arxiv, DOI [arXiv:2009.10297, 10.48550/arXiv.2009.10297]
   Sadowski C, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P191, DOI 10.1145/2786805.2786855
   Salimans T, 2016, ADV NEUR IN, V29
   Shi ES, 2023, Arxiv, DOI [arXiv:2204.03293, 10.48550/arXiv.2204.03293]
   Shin J, 2021, J INF PROCESS SYST, V17, P537
   Shuai J, 2020, INT C PROGRAM COMPRE, P196, DOI 10.1145/3387904.3389269
   Sun SH, 2018, PR MACH LEARN RES, V80
   Sun WS, 2022, PROC INT CONF SOFTW, P388, DOI 10.1145/3510003.3510140
   Sutton RS, 2000, ADV NEUR IN, V12, P1057
   Tulyakov S, 2018, PROC CVPR IEEE, P1526, DOI 10.1109/CVPR.2018.00165
   van der Maaten L, 2008, J MACH LEARN RES, V9, P2579
   Verbruggen G, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485477
   Wan Y, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P13, DOI 10.1109/ASE.2019.00012
   Wang Chaozheng, 2023, arXiv
   Wang H, 2019, 2019 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES (NAACL HLT 2019), VOL. 1, P796
   Wang SW, 2023, PROCEEDINGS OF THE 31ST ACM JOINT MEETING EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, ESEC/FSE 2023, P375, DOI 10.1145/3611643.3616323
   Wang Shangwen, 2023, Zenodo, DOI 10.5281/ZENODO.7824776
   Wang Y, 2021, 2021 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2021), P8696
   Wen FC, 2021, PROC INT CONF SOFTW, P138, DOI 10.1109/ICSE43902.2021.00025
   Whalen M. W., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P725, DOI 10.1109/ICSE.2000.870481
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
   Xia WH, 2023, IEEE T PATTERN ANAL, V45, P3121, DOI 10.1109/TPAMI.2022.3181070
   Xia X, 2017, EMPIR SOFTW ENG, V22, P3149, DOI 10.1007/s10664-017-9514-4
   Xu FF, 2022, ACM T SOFTW ENG METH, V31, DOI 10.1145/3487569
   Xu L, 2021, 2021 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2021), P342, DOI 10.1109/SANER50967.2021.00039
   Yao ZY, 2019, WEB CONFERENCE 2019: PROCEEDINGS OF THE WORLD WIDE WEB CONFERENCE (WWW 2019), P2203, DOI 10.1145/3308558.3313632
   Yin PC, 2018, CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2018): PROCEEDINGS OF SYSTEM DEMONSTRATIONS, P7
   Yin PC, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P440, DOI 10.18653/v1/P17-1041
   Yu LT, 2017, AAAI CONF ARTIF INTE, P2852
   Zeng Zhengran, 2022, P 31 ACM SIGSOFT INT
   Zhang W, 2019, 57TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2019), P4334
   Zhang YH, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563302
   Zhao JC, 2022, Arxiv, DOI arXiv:2201.08810
   Zhao TM, 2021, PROC INT CONF SOFTW, P748, DOI 10.1109/ICSE43902.2021.00074
   Zhu JY, 2017, IEEE I CONF COMP VIS, P2242, DOI 10.1109/ICCV.2017.244
NR 89
TC 1
Z9 1
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 239
DI 10.1145/3622815
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100019
OA gold
DA 2024-07-18
ER

PT J
AU Cascaval, D
   Bodik, R
   Schulz, A
AF Cascaval, Dan
   Bodik, Rastislav
   Schulz, Adriana
TI A Lineage-Based Referencing DSL for Computer-Aided DesignA Lineage-Based
   Referencing DSL for Computer-Aided Design
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE shape modeling; persistent naming; computer-aided design programs
AB 3D Computer-Aided Design (CAD) modeling is ubiquitous in mechanical engineering and design. Modern CAD models are programs that produce geometry and can be used to implement high-level geometric changes by modifying input parameters. While there has been a surge of recent interest in program-based tooling for the CAD domain, one fundamental problem remains unsolved. CAD programs pass geometric arguments to operations using references, which are queries that select elements from the constructed geometry according to programmer intent. The challenge is designing reference semantics that can express programmer intent across all geometric topologies achievable with model parameters, including topologies where the desired elements are not present. In current systems, both users and automated tools may create invalid models when parameters are changed, as references to geometric elements are lost or silently and arbitrarily switched. While existing CAD systems use heuristics to attempt to infer user intent in cases of this undefined behavior, this best-effort solution is not suitable for constructing automated tools to edit and optimize CAD programs. We analyze the failure modes of existing referencing schemes and formalize a set of criteria on which to evaluate solutions to the CAD referencing problem. In turn, we propose a domain-specific language that exposes references as a first-class language construct, using user-authored queries to introspect element history and define references safely over all paths. We give a semantics for fine-grained element lineage that can subsequently be queried; and show that our language meets the desired properties. Finally, we provide an implementation of a lineage-based referencing system in a 2.5D CAD kernel, demonstrating realistic referencing scenarios and illustrating how our system safely represents models that cause reference breakage in existing CAD systems.
C1 [Cascaval, Dan; Schulz, Adriana] Univ Washington, Seattle, WA 98195 USA.
   [Bodik, Rastislav] Google Res, New York, NY USA.
C3 University of Washington; University of Washington Seattle; Google
   Incorporated
RP Cascaval, D (corresponding author), Univ Washington, Seattle, WA 98195 USA.
EM cascaval@cs.washington.edu; rastislavb@google.com;
   adriana@cs.washington.edu
OI Cascaval, Dan/0000-0003-1242-2828
FU NSF [CCF-1723352, CCF-2219864, ITE-2132318, CCF-2122950, ITE-2029457,
   ITE-1936731, CCF-1918027, IIS-1924435, BSF-2020280]; Intel; NSF joint
   research center for Computer Assisted Programming for Heterogeneous
   Architectures [CAPA NSF CCF-1723352]; CONIX Research Center, one of six
   centers in JUMP, a Semiconductor Research Corporation (SRC) program -
   DARPA [CMU 1042741-394324 AM01]; DARPA [FA8750-16-2-0032]
FX We thank the reviewers for their helpful feedback, and Maneesh Agrawala
   for insightful discussions as the work developed. This work was
   supported by NSF CCF-2219864, and has been additionally supported in
   part by the NSF awards ITE-2132318, CCF-2122950, ITE-2029457,
   ITE-1936731, CCF-1918027, IIS-1924435, NSF BSF-2020280, the Intel and
   NSF joint research center for Computer Assisted Programming for
   Heterogeneous Architectures (CAPA NSF CCF-1723352), the CONIX Research
   Center, one of six centers in JUMP, a Semiconductor Research Corporation
   (SRC) program sponsored by DARPA CMU 1042741-394324 AM01, a grant DARPA
   FA8750-16-2-0032, as well as gifts from Adobe, Amazon, Meta, Google,
   Intel, and Qualcomm.
CR Alba Michael, 2018, WHATS DIFERENCE PARA
   [Anonymous], 2022, BLEND GEOM NOD
   Bidarra R., 2005, Computer-Aided Design and Applications, V2, P517
   Bidarra R, 2000, COMPUT AIDED DESIGN, V32, P201, DOI 10.1016/S0010-4485(99)00090-1
   Bodein Y, 2014, COMPUT IND, V65, P136, DOI 10.1016/j.compind.2013.08.004
   Brunelli Mark, 2014, PARAMETRIC VS DIRECT
   cadquery.readthedocs.io, 2019, CADQUERY INTR
   Camba Jorge Dorribo, 2016, PARAMETRIC CAD MODEL
   Cascaval Dan, 2021, ARXIV
   Cheon SU, 2012, J MECH SCI TECHNOL, V26, P3201, DOI 10.1007/s12206-012-0827-3
   Chugh R, 2016, ACM SIGPLAN NOTICES, V51, P341, DOI [10.1145/2980983.2908103, 10.1145/2908080.2908103]
   Dassault Systemes, 1982, CAT
   Dassault Systemes, 1995, SOLIDWORKS
   Du T, 2018, ACM T GRAPHIC, V37, DOI 10.1145/3272127.3275006
   Farjana SH, 2018, ALEX ENG J, V57, P2837, DOI 10.1016/j.aej.2018.01.007
   Findler RB, 2006, J FUNCT PROGRAM, V16, P583, DOI 10.1017/S0956796806006010
   Foley James D, 1996, 127 CONSTRUCTIVE SOL, P557
   Gaillard M, 2022, COMPUT GRAPH FORUM, V41, P289, DOI 10.1111/cgf.14475
   Gebhard Richard, 2013, TECHNICAL PRESENTATI
   Hafner C, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3355089.3356576
   Herron Michael, TOP 10 SECRETS CAD S
   Jones B, 2021, ACM T GRAPHIC, V40, DOI 10.1145/3478513.3480562
   Jones RK, 2021, ACM T GRAPHIC, V40, DOI 10.1145/3450626.3459821
   Jones RK, 2020, ACM T GRAPHIC, V39, DOI 10.1145/3414685.3417812
   Kintel Marius, 2010, OPENSCAD PROGRAM SOL
   Koch S, 2019, PROC CVPR IEEE, P9593, DOI 10.1109/CVPR.2019.00983
   Kösa T, 2010, PROCD SOC BEHV, V2, P1385, DOI 10.1016/j.sbspro.2010.03.204
   Landers Diane M, 2004, US Patent, Patent No. [6,775,581, 6775581]
   Mathur A, 2020, COMPUT GRAPH FORUM, V39, P408, DOI 10.1111/cgf.14046
   McNeel, 2007, GRASSHOPPER3D ALG MO
   Michel É, 2021, ACM T GRAPHIC, V40, DOI 10.1145/3450626.3459823
   Nandi C, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236794
   Nandi C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P31, DOI 10.1145/3385412.3386012
   OnShape, 2016, OFEATURESCRIPT
   OpenCascade, 1999, OPENCASCADE TECHN OC
   OpenCascade, 2022, TOP EXPL CLASS REF
   PTC, 2011, PTC CREO
   PTC, 2015, ONSHAPE
   Schulz A, 2018, ACM T GRAPHIC, V37, DOI 10.1145/3197517.3201385
   Schulz A, 2017, ACM T GRAPHIC, V36, DOI 10.1145/3072959.3073688
   SideFX, 1996, HOUD
   Siemens, 1985, PAR CAD KERN
   Siemens, 1973, SIEM NX
   Strater Jeff, 2016, SOLVED RE DIRECT VS
   Tran o'leary Jasper, 2021, UIST '21: The 34th Annual ACM Symposium on User Interface Software and Technology, P691, DOI 10.1145/3472749.3474779
   Willis KDD, 2021, Arxiv, DOI arXiv:2010.02392
   Wu Rundi, 2021, P IEEE CVF INT C COM, P6772
   Xu XH, 2021, Arxiv, DOI arXiv:2104.03900
   Yares Evan, 2013, FAILED PROMISE PAR 1
NR 49
TC 0
Z9 0
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 109
DI 10.1145/3591223
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900005
OA gold
DA 2024-07-18
ER

PT J
AU Ibn Ziad, MT
   Damani, S
   Jaleel, A
   Keckler, SW
   Stephenson, M
AF Ibn Ziad, Mohamed Tarek
   Damani, Sana
   Jaleel, Aamer
   Keckler, Stephen W.
   Stephenson, Mark
TI cuCatch: A Debugging Tool for Efficiently Catching Memory Safety
   Violations in CUDA Applications
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE memory safety; bug detection; GPU
AB CUDA, OpenCL, and OpenACC are the primary means of writing general-purpose software for NVIDIA GPUs, all of which are subject to the samewell-documented memory safety vulnerabilities currently plaguing software written in C and C++. One can argue that the GPU execution environment makes software development more error prone. Unlike C and C++, CUDA features multiple, distinct memory spaces to map to the GPU's unique memory hierarchy, and a typical CUDA program has thousands of concurrently executing threads. Furthermore, the CUDA platform has fewer guardrails than CPU platforms that have been forced to incrementally adjust to a barrage of security attacks. Unfortunately, the peculiarities of the GPU make it difficult to directly port memory safety solutions from the CPU space.
   This paper presents cuCatch, a new memory safety error detection tool designed specifically for the CUDA programming model. cuCatch combines optimized compiler instrumentation with driver support to implement a novel algorithm for catching spatial and temporal memory safety errors with low performance overheads. Our experimental results on a wide set of GPU applications show that cuCatch incurs a 19% runtime slowdown on average, which is orders of magnitude faster than state-of-the-art debugging tools on GPUs. Moreover, our quantitative evaluation demonstrates cuCatch's higher error detection coverage compared to prior memory safety tools. The combination of high error detection coverage and low runtime overheads makes cuCatch an ideal candidate for accelerating memory safety debugging for GPU applications.
C1 [Ibn Ziad, Mohamed Tarek; Jaleel, Aamer] NVIDIA, Westford, MA 01886 USA.
   [Damani, Sana] NVIDIA, Santa Clara, CA USA.
   [Keckler, Stephen W.; Stephenson, Mark] NVIDIA, Austin, TX USA.
C3 Nvidia Corporation
RP Ibn Ziad, MT (corresponding author), NVIDIA, Westford, MA 01886 USA.
EM mtarek@nvidia.com; sdamani@nvidia.com; ajaleel@nvidia.com;
   skeckler@nvidia.com; mstephenson@nvidia.com
RI Ibn Ziad, Mohamed Tarek/IZP-8901-2023
OI Ibn Ziad, Mohamed Tarek/0000-0001-6971-6996; Jaleel,
   Aamer/0000-0002-5709-2992
CR ARM, 2019, MEM TAGG EXT ENH MEM
   Bialek Joe, 2020, Technical Report
   Di B, 2021, IEEE T PARALL DISTR, V32, P1161, DOI 10.1109/TPDS.2020.3042965
   Di B, 2018, 27TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES (PACT 2018), DOI 10.1145/3243176.3243194
   Di B, 2016, LECT NOTES COMPUT SC, V9966, P103, DOI 10.1007/978-3-319-47099-3_9
   Erb C, 2018, IWOCL'18: PROCEEDINGS OF THE INTERNATIONAL WORKSHOP ON OPENCL, P45, DOI 10.1145/3204919.3204934
   Erb C, 2017, INT SYM CODE GENER, P61, DOI 10.1109/CGO.2017.7863729
   Google, 2019, 00DAY WILD
   Grauer-Gray Scott, 2012, 2012 INNOVATIVE PARA, P1, DOI [10.1 109/InPar.2012.6339595, DOI 10.1109/INPAR.2012.6339595]
   Harris Mark., 2013, Using Shared Memory in CUDA C/C++
   Ibn Ziad MT, 2021, CONF PROC INT SYMP C, P916, DOI 10.1109/ISCA52012.2021.00076
   Kamath AK, 2021, PROCEEDINGS OF THE 28TH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, SOSP 2021, P49, DOI 10.1145/3477132.3483545
   Kim Y, 2020, 2020 53RD ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO 2020), P1153, DOI 10.1109/MICRO50266.2020.00095
   Lee J, 2022, CONF PROC INT SYMP C, P27, DOI 10.1145/3470496.3527420
   Miele A, 2016, J COMPUT VIROL HACKI, V12, P113, DOI 10.1007/s11416-015-0251-1
   Miller Matt, 2019, Trends and challenges in the vulnerability mitigation landscape
   Nagarakatte S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P245, DOI 10.1145/1542476.1542504
   Nethercote N, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P89, DOI 10.1145/1250734.1250746
   Cardona PAN, 2015, CUAD ACT, P154
   NVIDIA, PAR THREAD EX ISA V1
   NVIDIA, 2022, COMP SAN V2022 2 1
   NVIDIA, 2022, RMM RAPIDS MEM MAN
   NVIDIA, 2023, CUDA C++ programming guide.
   NVIDIA, 2022, CUDA SAMPL
   NVIDIA, 2022, CUB COOP PRIM CUDA C
   NVIDIA, 2023, Nsight Compute
   NVIDIA, 2022, THRUST C PAR ALG LIB
   NVIDIA, 2022, CUDA MEMCHECK V11 8
   Oleksenko O, 2018, P ACM MEAS ANAL COMP, V2, DOI 10.1145/3224423
   Oracle, 2015, HARDW ASS CHECK US S
   Park SO, 2021, COMPUT SECUR, V102, DOI 10.1016/j.cose.2020.102115
   Parker SG, 2010, ACM T GRAPHIC, V29, DOI 10.1145/1778765.1778803
   Peng YF, 2018, ACM SIGPLAN NOTICES, V53, P390, DOI 10.1145/3192366.3192368
   Sakharnykh Nikolay, 2019, GTC 19 10 ANN GPU TE
   Sasaki H, 2019, MICRO'52: THE 52ND ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, P558, DOI 10.1145/3352460.3358299
   Serebryany Konstantin, 2012, USENIX, P309
   Sharifi R, 2020, ANN I S COM, P762, DOI 10.1109/ISCA45697.2020.00068
   Sinha K, 2018, CONF PROC INT SYMP C, P600, DOI 10.1109/ISCA.2018.00056
   Song D, 2019, P IEEE S SECUR PRIV, P1275, DOI 10.1109/SP.2019.00010
   Sundaram Arthy, 2021, PROGRAMMING E CIENTL
   Szekeres L, 2013, P IEEE S SECUR PRIV, P48, DOI 10.1109/SP.2013.13
   van der Veen Victor, 2012, Research in Attacks, Intrusions, and Defenses. Proceedings of the 15th International Symposium, RAID 2012, P86, DOI 10.1007/978-3-642-33338-5_5
   Villa O, 2019, MICRO'52: THE 52ND ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, P372, DOI 10.1145/3352460.3358307
   Watson RNM, 2015, P IEEE S SECUR PRIV, P20, DOI 10.1109/SP.2015.9
   Wu MY, 2020, PROC INT CONF SOFTW, P937, DOI 10.1145/3377811.3380358
   Xia HY, 2019, MICRO'52: THE 52ND ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, P545, DOI 10.1145/3352460.3358288
NR 46
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 111
DI 10.1145/3591225
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900007
OA gold
DA 2024-07-18
ER

PT J
AU Mulder, I
   Krebbers, R
AF Mulder, Ike
   Krebbers, Robbert
TI Proof Automation for Linearizability in Separation Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Separation logic; linearizability; fine-grained concurrency; refinement;
   logical atomicity; proof automation; Iris; Coq
AB Recent advances in concurrent separation logic enabled the formal verification of increasingly sophisticated fine-grained (i.e., lock-free) concurrent programs. For such programs, the golden standard of correctness is linearizability, which expresses that concurrent executions always behave as some valid sequence of sequential executions. Compositional approaches to linearizability (such as contextual refinement and logical atomicity) make it possible to prove linearizability of whole programs or compound data structures (e.g., a ticket lock) using proofs of linearizability of their individual components (e.g., a counter). While powerful, these approaches are also laborious-state-of-the-art tools such as Iris, FCSL, and Voila all require a form of interactive proof. This paper develops proof automation for contextual refinement and logical atomicity in Iris. The key ingredient of our proof automation is a collection of proof rules whose application is directed by both the program and the logical state. This gives rise to effective proof search strategies that can prove linearizability of simple examples fully automatically. For more complex examples, we ensure the proof automation cooperates well with interactive proof tactics by minimizing the use of backtracking. We implement our proof automation in Coq by extending and generalizing Diaframe, a proof automation extension for Iris. While the old version (Diaframe 1.0) was limited to ordinary Hoare triples, the new version (Diaframe 2.0) is extensible in its support for program verification styles: our proof search strategies for contextual refinement and logical atomicity are implemented as modules for Diaframe 2.0. We evaluate our proof automation on a set of existing benchmarks and novel proofs, showing that it provides significant reduction of proof work for both approaches to linearizability.
C1 [Mulder, Ike; Krebbers, Robbert] Radboud Univ Nijmegen, Nijmegen, Netherlands.
C3 Radboud University Nijmegen
RP Mulder, I (corresponding author), Radboud Univ Nijmegen, Nijmegen, Netherlands.
EM me@ikemulder.nl; mail@robbertkrebbers.nl
OI Mulder, Ike/0000-0001-9926-9736
FU Dutch Research Council (NWO) [016]; Google Android Security's ASPIRE
   program
FX We thank Jules Jacobs for useful discussions, and the anonymous
   reviewers for their helpful feedback. This research was supported by the
   Dutch Research Council (NWO), project 016.Veni.192.259, and by generous
   awards from Google Android Security's ASPIRE program.
CR [Anonymous], 1986, Technical Report RJ 5118
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   Appel AW, 2001, IEEE S LOG, P247, DOI 10.1109/LICS.2001.932501
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Besson Frederic., 2021, 12th International Conference on Interactive Theorem Proving (ITP 2021), V193, p9:1, DOI DOI 10.4230/LIPICS.ITP.2021.9
   Birkedal Lars, 2021, Proceedings of the ACM on Programming Languages, V5, DOI 10.1145/3473586
   Brotherston J, 2014, J ACM, V61, DOI 10.1145/2542667
   Burckhardt S, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P330, DOI 10.1145/1806596.1806634
   Carbonneaux Q, 2022, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP '22), P116, DOI 10.1145/3497775.3503681
   Chajed T, 2021, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '21), P423
   Czajka L, 2020, LECT NOTES COMPUT SC, V12167, P28, DOI 10.1007/978-3-030-51054-1_3
   da Rocha Pinto Pedro, 2016, THESIS IMPERIAL COLL, DOI [10.25560/47923, DOI 10.25560/47923]
   Delahaye D, 2000, LECT NOTES ARTIF INT, V1955, P85, DOI 10.1007/3-540-44404-1_7
   Dongol B, 2015, ACM COMPUT SURV, V48, DOI 10.1145/2796550
   Dreyer D, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P185, DOI 10.1145/1706299.1706323
   Eilers M, 2021, LECT NOTES COMPUT SC, V12759, P718, DOI 10.1007/978-3-030-81685-8_34
   Ekici B, 2017, LECT NOTES COMPUT SC, V10427, P126, DOI 10.1007/978-3-319-63390-9_7
   Filipovic I, 2010, THEOR COMPUT SCI, V411, P4379, DOI 10.1016/j.tcs.2010.09.021
   Frumin Dan, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P1416, DOI 10.1109/SP40001.2021.00003
   Frumin D, 2021, LOG METH COMPUT SCI, V17, DOI 10.46298/LMCS-17(3:9)2021
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Gäher L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498689
   Georges AL, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527318
   Gonthier G, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P163
   Gregersen SO, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434291
   Gu Ronghui, 2015, DEEP SPECIFICATIONS, P595, DOI [10.1145/2676726.2676975, DOI 10.1145/2676726.2676975]
   Harris TL, 2002, LECT NOTES COMPUT SC, V2508, P265
   Hawblitzel C, 2015, LECT NOTES COMPUT SC, V9207, P449, DOI 10.1007/978-3-319-21668-3_26
   Henzinger Thomas A., 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P242, DOI 10.1007/978-3-642-40184-8_18
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Dang HH, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P792, DOI 10.1145/3519939.3523451
   Jacobs B, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P271, DOI 10.1145/1926385.1926417
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung Ralf, 2019, IR WORKSH
   Jung Ralf, 2015, Iris: Monoids and Invariants as an Orthogonal Basis for Concurrent Reasoning (POPL), P637, DOI [10.1145/2676726.2676980, DOI 10.1145/2676726.2676980]
   Jung Ralf, 2016, Higher-Order Ghost State (ICFP), P256, DOI [10.1145/2951913.2951943, DOI 10.1145/2951913.2951943]
   Kim J, 2017, LECT NOTES COMPUT SC, V10695, P273, DOI 10.1007/978-3-319-71237-6_14
   Kragl Bernhard, 2021, 2021 Formal Methods in Computer Aided Design (FMCAD), P143, DOI 10.34727/2021/isbn.978-3-85448-046-4_23
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krebbers Robbert, 2018, P ACM PROGR LANG, DOI [10.1145/3236772, DOI 10.1145/3236772]
   Krebbers Robbert, 2017, Interactive Proofs in Higher-Order Concurrent Separation Logic (POPL), P205, DOI [10.1145/3009837.3009855, DOI 10.1145/3009837.3009855]
   Krishna S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P181, DOI 10.1145/3385412.3386029
   Krishna Siddharth, 2021, AUTOMATED VERIFICATI, DOI [10.1007/978-3-031-01806-0, DOI 10.1007/978-3-031-01806-0]
   Liang HJ, 2013, ACM SIGPLAN NOTICES, V48, P459, DOI 10.1145/2499370.2462189
   Mansky W, 2022, Arxiv, DOI [arXiv:2207.06574, 10.48550/arXiv.2207.06574, DOI 10.48550/ARXIV.2207.06574]
   Michael M. M., 1996, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, P267, DOI 10.1145/248052.248106
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Mulder I, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P809, DOI 10.1145/3519939.3523432
   Mulder Ike, 2023, ARTIFACT PROOF AUTOM, DOI [10.5281/zenodo.7712620, DOI 10.5281/ZENODO.7712620]
   Mulder Ike, 2023, BACKTRACKING CONNECT
   Nakano H, 2000, IEEE S LOG, P255, DOI 10.1109/LICS.2000.855774
   Nanevski A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360587
   Parkinson MJ, 2011, LECT NOTES COMPUT SC, V6602, P439, DOI 10.1007/978-3-642-19718-5_23
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Piskac T., 2014, LNCS, P124, DOI DOI 10.1007/978-3-642-54862-8_9
   Pitts Andrew M., 2005, Advanced Topics in Types and Programming Languages, P245
   Rustan K, 2010, USABLE AUTOACTIVE VE
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   Sergey Ilya, 2015, MECHANIZED VERIFICAT, P77, DOI [10.1145/2737924.2737964, DOI 10.1145/2737924.2737964]
   Sozeau M, 2008, LECT NOTES COMPUT SC, V5170, P278, DOI 10.1007/978-3-540-71067-7_23
   Spies S, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547631
   Spitters B, 2011, MATH STRUCT COMP SCI, V21, P795, DOI 10.1017/S0960129511000119
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Svendsen K, 2013, LECT NOTES COMPUT SC, V7792, P169, DOI 10.1007/978-3-642-37036-6_11
   Turon Aaron, 2013, UNIFYING REFINEMENT, P377, DOI [10.1145/2500365.2500600, DOI 10.1145/2500365.2500600]
   Vafeiadis V, 2010, LECT NOTES COMPUT SC, V6174, P450, DOI 10.1007/978-3-642-14295-6_40
   Vindum SF, 2022, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP '22), P100, DOI 10.1145/3497775.3503689
   Vindum SF, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P76, DOI 10.1145/3437992.3439930
   Wolf FA, 2021, LECT NOTES COMPUT SC, V13047, P407, DOI 10.1007/978-3-030-90870-6_22
   Zhu H, 2015, LECT NOTES COMPUT SC, V9207, P3, DOI 10.1007/978-3-319-21668-3_1
NR 72
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586043
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600018
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Cao, D
   Kunkel, R
   Nandi, C
   Willsey, M
   Tatlock, Z
   Polikarpova, N
AF Cao, David
   Kunkel, Rose
   Nandi, Chandrakana
   Willsey, Max
   Tatlock, Zachary
   Polikarpova, Nadia
TI babble: Learning Better Abstractions with E-Graphs and Anti-unification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE library learning; e-graphs; anti-unification
ID EQUALITY SATURATION
AB Library learning compresses a given corpus of programs by extracting common structure from the corpus into reusable library functions. Prior work on library learning suffers from two limitations that prevent it from scaling to larger, more complex inputs. First, it explores too many candidate library functions that are not useful for compression. Second, it is not robust to syntactic variation in the input.
   We propose library learning modulo theory (LLMT), a new library learning algorithm that additionally takes as input an equational theory for a given problem domain. LLMT uses e-graphs and equality saturation to compactly represent the space of programs equivalent modulo the theory, and uses a novel e-graph antiunification technique to find common patterns in the corpus more directly and efficiently.
   We implemented LLMT in a tool named babble. Our evaluation shows that babble achieves better compression orders of magnitude faster than the state of the art. We also provide a qualitative evaluation showing that babble learns reusable functions on inputs previously out of reach for library learning.
C1 [Cao, David; Kunkel, Rose; Polikarpova, Nadia] Univ Calif San Diego, San Diego, CA 92093 USA.
   [Nandi, Chandrakana] Certora Inc, Milpitas, CA USA.
   [Willsey, Max; Tatlock, Zachary] Univ Washington, Seattle, WA 98195 USA.
C3 University of California System; University of California San Diego;
   University of Washington; University of Washington Seattle
RP Cao, D (corresponding author), Univ Calif San Diego, San Diego, CA 92093 USA.
EM dmcao@ucsd.edu; rkunkel@eng.ucsd.edu; chandra@certora.com;
   mwillsey@cs.washington.edu; ztatlock@cs.washington.edu;
   npolikarpova@eng.ucsd.edu
OI Cao, David/0000-0002-6163-1821; Nandi, Chandrakana/0000-0001-8633-8413;
   Willsey, Max/0000-0001-8066-4218; Tatlock, Zachary/0000-0002-4731-0124;
   Kunkel, Rose/0000-0001-7432-8488
FU National Science Foundation [1911149, 1943623]; Division of Computing
   and Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1943623, 1911149] Funding Source: National Science Foundation
FX We are grateful to the anonymous reviewers for their insightful
   comments. We would like to thank Matthew Bowers for many helpful
   discussions and especially for publishing the DreamCoder compression
   benchmark: we know it was a lot of work to assemble! This work has been
   supported by the National Science Foundation under Grants No. 1911149
   and 1943623.
CR Bowers Matt, 2022, DREAMCODER COMPRESSI
   Bowers M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571234
   Bulychev PE, 2010, LECT NOTES COMPUT SC, V5947, P413, DOI 10.1007/978-3-642-11486-1_35
   Cao David, 2022, Zenodo, DOI 10.5281/ZENODO.7120897
   Cropper A, 2022, J ARTIF INTELL RES, V74, P765
   Dechter E., 2013, P 23 INT JOINT C ART, P1302
   Dong R, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P152, DOI 10.1145/3519939.3523711
   Dumancic S, 2021, AAAI CONF ARTIF INTE, V35, P7271
   Ellis K, 2018, Arxiv, DOI [arXiv:1707.09627, 10.48550/ARXIV.1707.09627]
   Ellis K, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P835, DOI 10.1145/3453483.3454080
   Iyer S, 2019, Arxiv, DOI arXiv:1904.09086
   Jones RK, 2021, ACM T GRAPHIC, V40, DOI 10.1145/3450626.3459821
   Lau T., 2001, Programming By Demonstration: A Machine Learning Approach
   Lazaro-Gredilla M, 2018, Arxiv, DOI [arXiv:1812.02788, 10.48550/ARXIV.1812.02788, DOI 10.48550/ARXIV.1812.02788]
   Meng N, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P502, DOI 10.1109/ICSE.2013.6606596
   Mitchell Tom Michael, 1977, IJCAI
   Nandi C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485496
   Nandi C, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236794
   Nandi C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P31, DOI 10.1145/3385412.3386012
   Panchekha P, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI 10.1145/2737924.2737959
   Plotkin G, 1970, Technical report
   Raza Mohammad, 2014, PROGRAMMING EXAMPLE
   Reynolds John C., 1969, TRANSFORMATIONAL SYS
   Rocha RCO, 2022, INT SYM CODE GENER, P217, DOI 10.1109/CGO53902.2022.9741256
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Sharma G, 2018, Arxiv, DOI [arXiv:1712.08290, 10.48550/ARXIV.1712.08290, DOI 10.48550/ARXIV.1712.08290]
   Shin Eui Chul, 2019, Advances in Neural Information Processing Systems, V32
   Singher E, 2021, LECT NOTES COMPUT SC, V12760, P125, DOI 10.1007/978-3-030-81688-9_6
   Stitt G, 2005, IEEE IC CAD, P547, DOI 10.1109/ICCAD.2005.1560127
   Su B., 1984, Seventeenth Annual Microprogramming Workshop, MICRO 17 (Cat. No. 84CH2088-3), P78
   Tate R, 2009, ACM SIGPLAN NOTICES, V44, P264, DOI 10.1145/1594834.1480915
   Tian YL, 2019, Arxiv, DOI arXiv:1901.02875
   VanHattum A, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P874, DOI 10.1145/3445814.3446707
   Wang Haoliang, 2021, P ANN M COGNITIVE SC, V43
   Wang YR, 2020, PROC VLDB ENDOW, V13, P1919, DOI 10.14778/3407790.3407799
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Wong C., 2022, P ANN M COGNITIVE SC
   Wong CTRE, 2022, Arxiv, DOI [arXiv:2106.11053, 10.48550/ARXIV.2106.11053, DOI 10.48550/ARXIV.2106.11053]
   Wu CM, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3355089.3356518
   Yang Yichen, 2021, P MACHINE LEARNING S, V3, P255
NR 40
TC 7
Z9 7
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571207
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500014
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Lee, W
   Rival, X
   Yang, H
AF Lee, Wonyeol
   Rival, Xavier
   Yang, Hongseok
TI Smoothness Analysis for Probabilistic Programs with Application to
   Optimised Variational Inference
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE smoothness; static analysis; probabilistic programming; variational
   inference
AB We present a static analysis for discovering differentiable or more generally smooth parts of a given probabilistic program, and show how the analysis can be used to improve the pathwise gradient estimator, one of the most popular methods for posterior inference and model learning. Our improvement increases the scope of the estimator from differentiable models to non-differentiable ones without requiring manual intervention of the user; the improved estimator automatically identifies differentiable parts of a given probabilistic program using our static analysis, and applies the pathwise gradient estimator to the identified parts while using a more general but less efficient estimator, called score estimator, for the rest of the program. Our analysis has a surprisingly subtle soundness argument, partly due to the misbehaviours of some target smoothness properties when viewed from the perspective of program analysis designers. For instance, some smoothness properties, such as partial differentiability and partial continuity, are not preserved by function composition, and this makes it difficult to analyse sequential composition soundly without heavily sacrificing precision. We formulate five assumptions on a target smoothness property, prove the soundness of our analysis under those assumptions, and showthat our leading examples satisfy these assumptions. We also showthat by using information from our analysis instantiated for differentiability, our improved gradient estimator satisfies an important differentiability requirement and thus computes the correct estimate on average (i.e., returns an unbiased estimate) under a regularity condition. Our experiments with representative probabilistic programs in the Pyro language show that our static analysis is capable of identifying smooth parts of those programs accurately, and making our improved pathwise gradient estimator exploit all the opportunities for high performance in those programs.
C1 [Lee, Wonyeol] Stanford Univ, Comp Sci, Stanford, CA 94305 USA.
   [Rival, Xavier] INRIA Paris, Paris, France.
   [Rival, Xavier] CNRS, ENS, Paris, France.
   [Rival, Xavier] PSL Univ, Paris, France.
   [Yang, Hongseok] Korea Adv Inst Sci & Technol, Sch Comp, Daejeon, South Korea.
   [Yang, Hongseok] Korea Adv Inst Sci & Technol, Kim Jaechul Grad Sch AI, Daejeon, South Korea.
   [Yang, Hongseok] Inst Basic Sci IBS, Discrete Math Grp, Daejeon, South Korea.
C3 Stanford University; Centre National de la Recherche Scientifique
   (CNRS); Universite PSL; Ecole Normale Superieure (ENS); Universite PSL;
   Korea Advanced Institute of Science & Technology (KAIST); Korea Advanced
   Institute of Science & Technology (KAIST); Institute for Basic Science -
   Korea (IBS)
RP Lee, W (corresponding author), Stanford Univ, Comp Sci, Stanford, CA 94305 USA.
EM wonyeol@cs.stanford.edu; rival@di.ens.fr; hongseok.yang@kaist.ac.kr
OI Lee, Wonyeol/0000-0003-0301-0872; Yang, Hongseok/0000-0003-1502-2942;
   Rival, Xavier/0000-0002-2875-6171
FU Samsung Scholarship; Engineering Research Center Program through the
   National Research Foundation of Korea (NRF) - Korean Government MSIT
   [NRF-2018R1A5A1059921]; Institute for Basic Science [IBS-R029-C1];
   French ANR VeriAMOS project
FX We thank Hangyeol Yu for helping us prove Theorems 4.2 and 4.5, and
   anonymous reviewers for giving constructive comments. Lee was supported
   by Samsung Scholarship. Yang was supported by the Engineering Research
   Center Program through the National Research Foundation of Korea (NRF)
   funded by the Korean Government MSIT (NRF-2018R1A5A1059921) and also by
   the Institute for Basic Science (IBS-R029-C1). Rival was supported by
   the French ANR VeriAMOS project.
CR [Anonymous], 2014, Infer.NET 2.6
   [Anonymous], 2011, Neural Information Processing Systems
   Arjovsky M, 2017, PR MACH LEARN RES, V70
   Barthe G, 2020, LECT NOTES COMPUT SC, V12075, P56, DOI 10.1007/978-3-030-44914-8_3
   Bingham E, 2019, J MACH LEARN RES, V20
   Blanchet B, 2003, ACM SIGPLAN NOTICES, V38, P196, DOI 10.1145/780822.781153
   Bogachev V. I., 2007, MEASURE THEORY, V2, DOI [10.1007/978-3-540-34514-5, DOI 10.1007/978-3-540-34514-5]
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   Chaganty Arun, 2013, Artificial Intelligence and Statistics, V31
   Chaudhuri S, 2012, COMMUN ACM, V55, P107, DOI [10.1145/2240236.2240262, 10.1145/2240230.2240282]
   Chaudhuri S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P57, DOI 10.1145/1706299.1706308
   Claret Guillaume., 2013, Foundations of Software Engineering, P92, DOI DOI 10.1145/2491411.2491423
   Clarkson MR, 2008, CSF 2008: 21ST IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, PROCEEDINGS, P51, DOI 10.1109/CSF.2008.7
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Eslami SMA, 2016, 30 C NEURAL INFORM P, V29
   Ge H, 2018, PR MACH LEARN RES, V84
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   github, 2019, WEBPPL
   Goodman ND., 2008, UAI, P220
   Gordon AD, 2014, ACM SIGPLAN NOTICES, V49, P321, DOI 10.1145/2535838.2535850
   Gorinova MI, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3490421
   Gorinova Maria I., 2020, P MACHINE LEARNING R, P3648
   Holtzen S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428208
   Kim Hyunjik, 2021, INT C MACHINE LEARNI, V139, P5562
   Kingma DP., 2014, C TRACK P
   Kucukelbir A, 2015, ADV NEUR IN, V28
   Laurel Jacob, 2022, PROC ACM PROGRAM LAN, V6, P1, DOI DOI 10.1145/3498718
   Lee J., 2012, Graduate Texts in Mathematics, DOI 10.1007/978-1-4419-9982-5
   Lee Wonyeol, 2022, Zenodo, DOI 10.5281/ZENODO.7246597
   Lee WY, 2022, Arxiv, DOI [arXiv:2208.10530, 10.48550/arXiv.2208.10530, DOI 10.48550/ARXIV.2208.10530]
   Lee W, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371084
   Lew AK, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371087
   Mangal R, 2020, LECT NOTES COMPUT SC, V12389, P274, DOI 10.1007/978-3-030-65474-0_13
   Mansinghka V, 2014, Arxiv, DOI arXiv:1404.0099
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Neal RM, 2011, CH CRC HANDB MOD STA, P113
   Nori AV, 2014, AAAI CONF ARTIF INTE, P2476
   Platzer A., 2018, Logical Foundations of Cyber-Physical Systems, DOI DOI 10.1007/978-3-319-63588-0
   Ranganath R, 2014, JMLR WORKSH CONF PRO, V33, P814
   Rezende DJ, 2014, PR MACH LEARN RES, V32, P1278
   Ritchie D, 2016, Arxiv, DOI [arXiv:1610.05735, DOI 10.48550/ARXIV.1610.05735]
   Ritchie D, 2016, JMLR WORKSH CONF PRO, V51, P28
   Salvatier J, 2016, PEERJ COMPUT SCI, DOI 10.7717/peerj-cs.55
   Schulman J, 2015, ADV NEUR IN, V28
   Siddharth N, 2017, ADV NEUR IN, V30
   Staton S, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P525, DOI 10.1145/2933575.2935313
   Tolpin David, 2016, P 28 IMPL APPL FUNCT, DOI DOI 10.1145/3064899.3064910
   Tran D, 2017, Arxiv, DOI arXiv:1610.09787
   Tran D, 2018, ADV NEUR IN, V31
   Uber AI Labs, 2022, PYR EX
   van de Meent Jan-Willem, 2018, arXiv, DOI DOI 10.48550/ARXIV.1809.10756
   Wang D, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P788, DOI 10.1145/3453483.3454077
   WILLIAMS RJ, 1992, MACH LEARN, V8, P229, DOI 10.1007/BF00992696
   Wingate D., 2011, P 14 INT C ART INT S, P770
   Wingate D, 2013, Arxiv, DOI [arXiv:1301.1299, DOI 10.48550/ARXIV.1301.1299]
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
   Xu CL, 2021, MOL SYST BIOL, V17, DOI 10.15252/msb.20209620
   Zhou Yuan, 2020, INT C MACHINE LEARNI, P11534
NR 59
TC 1
Z9 1
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571205
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500012
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Palmkvist, V
   Castegren, E
   Haller, P
   Broman, D
AF Palmkvist, Viktor
   Castegren, Elias
   Haller, Philipp
   Broman, David
TI Statically Resolvable Ambiguity
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Parser; Resolvable Ambiguity; Coq; OCaml
ID GRAMMARS
AB Traditionally, a grammar defining the syntax of a programming language is typically both context free and unambiguous. However, recent work suggests that an attractive alternative is to use ambiguous grammars, thus postponing the task of resolving the ambiguity to the end user. If all programs accepted by an ambiguous grammar can be rewritten unambiguously, then the parser for the grammar is said to be resolvably ambiguous. Guaranteeing resolvable ambiguity statically-for all programs-is hard, where previous work only solves it partially using techniques based on property-based testing. In this paper, we present the first efficient, practical, and proven correct solution to the statically resolvable ambiguity problem. Our approach introduces several key ideas, including splittable productions, operator sequences, and the concept of a grouper that works in tandem with a standard parser. We prove static resolvability using a Coq mechanization and demonstrate its efficiency and practical applicability by implementing and integrating resolvable ambiguity into an essential part of the standard OCaml parser.
C1 [Palmkvist, Viktor; Haller, Philipp; Broman, David] KTH Royal Inst Technol, Digital Futures & EECS, Stockholm, Sweden.
   [Castegren, Elias] Uppsala Univ, Uppsala, Sweden.
C3 Royal Institute of Technology; Uppsala University
RP Palmkvist, V (corresponding author), KTH Royal Inst Technol, Digital Futures & EECS, Stockholm, Sweden.
RI Haller, Philipp/GWZ-7695-2022; Castegren, Elias/HQZ-7912-2023
OI Haller, Philipp/0000-0002-2659-5271; Palmkvist,
   Viktor/0000-0003-0669-4085; Castegren, Elias/0000-0003-4918-6582
FU Swedish Foundation for Strategic Research [FFL15-0032]; Swedish
   Foundation for Strategic Research (SSF) [FFL15-0032] Funding Source:
   Swedish Foundation for Strategic Research (SSF)
FX We thank the reviewers for their excellent comments. This project is
   financially supported by the Swedish Foundation for Strategic Research
   (FFL15-0032).
CR AASA A, 1995, THEOR COMPUT SCI, V142, P3, DOI 10.1016/0304-3975(95)90680-J
   Afroozeh A, 2013, LECT NOTES COMPUT SC, V8225, P137, DOI 10.1007/978-3-319-02654-1_8
   Afroozeh Ali., 2015, PROC ACM INT S NEW I, DOI DOI 10.1145/2814228.2814242
   Amorim LED, 2020, LECT NOTES COMPUT SC, V12310, P1, DOI 10.1007/978-3-030-58768-0_1
   Axelsson R, 2008, LECT NOTES COMPUT SC, V5126, P410, DOI 10.1007/978-3-540-70583-3_34
   Basten Bas, 2011, THESIS U AMSTERDAM
   Brabrand C, 2007, LECT NOTES COMPUT SC, V4783, P214
   Broman D, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING (SLE '19), P55, DOI 10.1145/3357766.3359531
   CANTOR DG, 1962, J ACM, V9, P477, DOI 10.1145/321138.321145
   Chargueraud Arthur., 2022, TLC COQ LIB
   Cooper Keith, 2011, Engineering a compiler, Vsecond
   Danielsson NA, 2011, LECT NOTES COMPUT SC, V5836, P80, DOI 10.1007/978-3-642-24452-0_5
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   Erdweg S, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P391
   FLOYD RW, 1963, J ACM, V10, P316, DOI 10.1145/321172.321179
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   GINSBURG S, 1966, J ACM, V13, P62, DOI 10.1145/321312.321318
   Lang Bernard, 1974, P C AUT LANG PROGR, P255, DOI [10.1007/978-3-662-21545-6_18, DOI 10.1007/978-3-662-21545-6_18]
   Monnier Stefan, 2020, ART SCI ENG PROGRAM, V5, p1:1, DOI [10.22152/programming-journal.org/2021/5/1, DOI 10.22152/PROGRAMMING-JOURNAL.ORG/2021/5/1]
   Cardona PAN, 2015, CUAD ACT, P154
   Palmkvist Viktor, 2021, CC 2021: Proceedings of the 30th ACM SIGPLAN International Conference on Compiler Construction, P153, DOI 10.1145/3446804.3446846
   Palmkvist V, 2019, LECT NOTES COMPUT SC, V11372, P187, DOI 10.1007/978-3-030-05998-9_12
   Parr T, 2014, ACM SIGPLAN NOTICES, V49, P579, DOI [10.1145/2714064.2660202, 10.1145/2660193.2660202]
   Parr T, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P425
   Pottier Francois., 2005, MENHIR PARSER GENERA
   Schmitz S, 2007, LECT NOTES COMPUT SC, V4596, P692
   Scott E, 2010, ELECTRON NOTES THEOR, V253, P177, DOI 10.1016/j.entcs.2010.08.041
   Sudkamp Thomas A., 1997, Languages and Machines. An Introduction to the Theory of Computer Science
   The dafny-lang community, 2022, DAFN DOC
   Webber A.B., 2003, Modern programming languages
NR 30
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571251
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500058
OA Green Submitted, gold, Green Published
DA 2024-07-18
ER

PT J
AU Pitts, AM
AF Pitts, Andrew M.
TI Locally Nameless Sets
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE name binding; locally nameless; metatheory of syntax; cofinite
   quantification; category theory; initial algebra; Agda
ID LAMBDA-CALCULUS
AB This paper provides a new mathematical foundation for the locally nameless representation of syntax with binders, one informed by nominal techniques. It gives an equational axiomatization of two key locally nameless operations, "variable opening" and "variable closing" and shows that a lot of the locally nameless infrastructure can be defined from that in a syntax-independent way, including crucially a "shift" functor for name binding. That functor operates on a category whose objects we call locally nameless sets. Functors combining shift with sums and products have initial algebras that recover the usual locally nameless representation of syntax with binders in the finitary case. We demonstrate this by uniformly constructing such an initial locally nameless set for each instance of Plotkin's notion of binding signature. We also show by example that the shift functor is useful for locally nameless sets of a semantic rather than a syntactic character. The category of locally nameless sets is proved to be isomorphic to a known topos of finitely supported "-sets, where " is the full transformation monoid on a countably infinite set. A corollary of the proof is that several categories that have been used in the literature to model variable renaming operations on syntax with binders are all equivalent to each other and to the category of locally nameless sets.
C1 [Pitts, Andrew M.] Univ Cambridge, Dept Comp Sci & Technol, 15 JJ Thomson Ave, Cambridge CB3 0FD, England.
C3 University of Cambridge
RP Pitts, AM (corresponding author), Univ Cambridge, Dept Comp Sci & Technol, 15 JJ Thomson Ave, Cambridge CB3 0FD, England.
EM andrew.pitts@cl.cam.ac.uk
CR Adamek J., 1974, Comment. Math. Univ. Carol., V15, P589
   Agda, 2023, AGD WIK
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   BERGER U, 1991, SIXTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P203
   BRUIJN NGD, 1972, P K NED AKAD A MATH, V75, P381
   Charguéraud A, 2012, J AUTOM REASONING, V49, P363, DOI 10.1007/s10817-011-9225-2
   Cockx Jesper, 2021, BLOG POST NOV
   Coquand Thierry., 1992, P WORKSHOP TYPES PRO, P71
   Escot L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547644
   Fiore M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P193, DOI 10.1109/LICS.1999.782615
   Gabbay M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P214, DOI 10.1109/LICS.1999.782617
   Gabbay M. J., 2002, Formal Aspects of Computing, V13, P341, DOI 10.1007/s001650200016
   Gabbay MJ, 2008, LECT NOTES ARTIF INT, V5330, P158, DOI 10.1007/978-3-540-89439-1_11
   Ganyushkin O., 2009, ALGEBRA APPL, V9
   Hofmann M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P204, DOI 10.1109/LICS.1999.782616
   Iwahori N., 1974, Journal of Combinatorial Theory, Series A, V16, P147, DOI 10.1016/0097-3165(74)90040-5
   Johnstone P. T., 2002, SKETCHES ELEPHANT TO, V43
   Johnstone PeterT., 2002, OXFORD LOGIC GUIDES, V2
   JOHNSTONE PT, 1977, LONDON MATH SOC MONO, V10
   McKinna J, 1999, J AUTOM REASONING, V23, P373, DOI 10.1023/A:1006294005493
   Nordstrom B., 1990, Programming in Martin-Lof's Type Theory
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Pitts AM, 2013, CAM T THEOR, V57, P1, DOI 10.1017/CBO9781139084673
   Pitts A.M., 2015, 20 INT C TYPES PROOF, V39, P202
   Pitts AM, 2003, INFORM COMPUT, V186, P165, DOI 10.1016/S0890-5401(03)00138-X
   Pitts Andrew M, 2022, Zenodo, DOI 10.5281/ZENODO.7310633
   Pitts AM, 2006, J ACM, V53, P459, DOI 10.1145/1147954.1147961
   Plotkin Gordon, 1990, CSLI Lecture Notes, V22, P133
   Popescu A, 2022, LECT NOTES ARTIF INT, V13385, P618, DOI 10.1007/978-3-031-10769-6_36
   SCOTT DS, 1982, LECT NOTES COMPUT SC, V140, P577
   Staton Sam, 2007, Technical Report UCAM-CL-TR-688
   Sterling Jonathan, 2021, CMUCS21142
   Swan A, 2017, Arxiv, DOI arXiv:1702.01556
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   Urban C, 2005, LECT NOTES ARTIF INT, V3632, P38
   Urban C, 2004, THEOR COMPUT SCI, V323, P473, DOI 10.1016/j.tcs.2004.06.016
   Vezzosi A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341691
NR 38
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571210
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500017
OA gold
DA 2024-07-18
ER

PT J
AU Abuah, C
   Darais, D
   Near, JP
AF Abuah, Chike
   Darais, David
   Near, Joseph P.
TI SOLO: A Lightweight Static Analysis for Differential Privacy
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Differential privacy; verification; typechecking
AB Existing approaches for statically enforcing differential privacy in higher order languages use either linear or relational refinement types. A barrier to adoption for these approaches is the lack of support for expressing these "fancy types" in mainstream programming languages. For example, no mainstream language supports relational refinement types, and although Rust and modern versions of Haskell both employ some linear typing techniques, they are inadequate for embedding enforcement of differential privacy, which requires "full" linear types. We propose a new type system that enforces differential privacy, avoids the use of linear and relational refinement types, and can be easily embedded in richly typed programming languages like Haskell. We demonstrate such an embedding in Haskell, demonstrate its expressiveness on case studies, and prove soundness of our type-based enforcement of differential privacy.
C1 [Abuah, Chike; Near, Joseph P.] Univ Vermont, Burlington, VT 05405 USA.
   [Darais, David] Galois Inc, Portland, OR USA.
C3 University of Vermont; Galois, Inc.
RP Abuah, C (corresponding author), Univ Vermont, Burlington, VT 05405 USA.
EM cabuah@uvm.edu; darais@galois.com; jnear@uvm.edu
RI Abuah, Chiké/JWA-1851-2024
OI Abuah, Chike/0000-0003-1860-2360
FU DARPA [HR001120C0087]; National Science Foundation (NSF) [1901278];
   Department of Energy (DOE) [DE-SC0022396]; U.S. Department of Energy
   (DOE) [DE-SC0022396] Funding Source: U.S. Department of Energy (DOE)
FX This material is based upon work supported by DARPA under Contract No.
   HR001120C0087, National Science Foundation (NSF) under award 1901278,
   and Department of Energy (DOE) under award DE-SC0022396. Any opinions,
   findings and conclusions or recommendations expressed in this material
   are those of the author(s) and do not necessarily reflect the views of
   DARPA, NSF or DOE.
CR Abowd JM, 2018, KDD'18: PROCEEDINGS OF THE 24TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY & DATA MINING, P2867, DOI 10.1145/3219819.3226070
   Abuah Chike, 2021, arXiv
   Abuah Chike, 2021, P IEEE COMPUTER SEC
   Albarghouthi A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158146
   Amorim AAD, 2015, Arxiv, DOI arXiv:1503.04522
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   de Amorim AA, 2019, Arxiv, DOI arXiv:1807.05091
   Barthe G, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P749, DOI 10.1145/2933575.2934554
   Barthe G, 2015, ACM SIGPLAN NOTICES, V50, P55, DOI [10.1145/2775051.2677000, 10.1145/10.1145/2676726.2677000]
   Barthe G, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2492061
   Barthe G, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P97
   Bichsel B, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P508, DOI 10.1145/3243734.3243863
   Bowman WJ, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P101, DOI 10.1145/2784731.2784733
   Buiras P, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P289, DOI 10.1145/2784731.2784758
   Bun M, 2016, LECT NOTES COMPUT SC, V9985, P635, DOI 10.1007/978-3-662-53641-4_24
   Crockett E, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P1020, DOI 10.1145/3243734.3243828
   de Amorim AA, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785715
   Ding ZY, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P475, DOI 10.1145/3243734.3243818
   Dwork C, 2006, LECT NOTES COMPUT SC, V3876, P265, DOI 10.1007/11681878_14
   Dwork C, 2013, FOUND TRENDS THEOR C, V9, P211, DOI 10.1561/0400000042
   Ebadi H, 2015, Arxiv, DOI arXiv:1505.02642
   Ebadi H, 2015, ACM SIGPLAN NOTICES, V50, P69, DOI [10.1145/2676726.2677005, 10.1145/2775051.2677005]
   Erlingsson U, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1054, DOI 10.1145/2660267.2660348
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Grenade, 2020, Grenade Machine Learning Library
   Hardt M, 2010, ANN IEEE SYMP FOUND, P61, DOI 10.1109/FOCS.2010.85
   Hardt Moritz, 2012, Advances in Neural Information Processing Systems (NeuRIPS'12), V25, P2348
   Holohan N, 2019, Arxiv, DOI arXiv:1907.02444
   Katsumata S, 2014, ACM SIGPLAN NOTICES, V49, P633, DOI 10.1145/2535838.2535846
   Li L, 2014, Arxiv, DOI arXiv:1404.7431
   Li P., 2006, IEEE WORKSHOP COMPUT, P16
   Lobo-Vesga E, 2020, P IEEE S SECUR PRIV, P411, DOI 10.1109/SP40000.2020.00086
   Lyu M, 2017, PROC VLDB ENDOW, V10, P637, DOI 10.14778/3055330.3055331
   McSherry F, 2007, ANN IEEE SYMP FOUND, P94, DOI 10.1109/FOCS.2007.66
   McSherry F, 2010, ACM SIGCOMM COMP COM, V40, P123, DOI 10.1145/1851275.1851199
   McSherry F, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P19
   Mironov I, 2017, P IEEE CSFW, P263, DOI 10.1109/CSF.2017.11
   Munz R, 2018, LECT NOTES COMPUT SC, V10804, P278, DOI 10.1007/978-3-319-89722-6_12
   Myers A. C., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P228, DOI 10.1145/292540.292561
   Nayak Chaya, 2020, New privacy-protected facebook data for independent research on social media's impact on democracy
   Near JP, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360598
   Orchard D, 2014, Arxiv, DOI arXiv:1401.5391
   Orchard D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341714
   Orchard D, 2014, ACM SIGPLAN NOTICES, V49, P13, DOI [10.1145/2775050.2633368, 10.1145/2633357.2633368]
   Parker J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290388
   Petricek Tomas, 2017, Ph.D. Dissertation
   Reed J, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P157
   Russo A, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P13
   Sridharan M, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P1053
   Terei D, 2012, ACM SIGPLAN NOTICES, V47, P137, DOI 10.1145/2430532.2364524
   Toro M, 2021, Arxiv, DOI arXiv:2010.11342
   Tripp O, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P87, DOI 10.1145/1542476.1542486
   Wadler P., 2003, ACM Transactions on Computational Logic, V4, P1, DOI 10.1145/601775.601776
   Wang XR, 2008, ANN COMPUT SECURITY, P289, DOI 10.1109/ACSAC.2008.37
   Wang YX, 2020, CCS '20: PROCEEDINGS OF THE 2020 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P919, DOI 10.1145/3372297.3417282
   Wang YX, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P655, DOI 10.1145/3314221.3314619
   Wilson Royce J., 2020, Proceedings on Privacy Enhancing Technologies, V2020, P230, DOI 10.2478/popets-2020-0025
   Winograd-Cort D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110254
   Yang ZM, 2012, WOR CONG SOFTW ENG, P101, DOI 10.1109/WCSE.2012.26
   Zhang D, 2018, INT CONF MANAGE DATA, P115, DOI 10.1145/3183713.3196921
   Zhang D, 2017, ACM SIGPLAN NOTICES, V52, P888, DOI 10.1145/3093333.3009884
   Zhang HC, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341697
NR 62
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 150
DI 10.1145/3563313
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200027
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Ritter, F
   Hack, S
AF Ritter, Fabian
   Hack, Sebastian
TI AnICA: Analyzing Inconsistencies in Microarchitectural Code Analyzers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Throughput Prediction; Basic Blocks; Abstraction; Differential Testing
AB Microarchitectural code analyzers, i.e., tools that estimate the throughput of machine code basic blocks, are important utensils in the tool belt of performance engineers. Recent tools like llvm-mca, uiCA, and Ithemal use a variety of techniques and different models for their throughput predictions. When put to the test, it is common to see these state-of-the-art tools give very different results. These inconsistencies are either errors, or they point to different and rarely documented assumptions made by the tool designers.
   In this paper, we present AnICA, a tool taking inspiration from differential testing and abstract interpretation to systematically analyze inconsistencies among these code analyzers. Our evaluation shows that AnICA can summarize thousands of inconsistencies in a few dozen descriptions that directly lead to high-level insights into the different behavior of the tools. In several case studies, we further demonstrate how AnICA automatically finds and characterizes known and unknown bugs in llvm-mca, as well as a quirk in AMD's Zen microarchitectures.
C1 [Ritter, Fabian; Hack, Sebastian] Saarland Univ, Saarland Informat Campus, Saarbrucken, Germany.
C3 Saarland University
RP Ritter, F (corresponding author), Saarland Univ, Saarland Informat Campus, Saarbrucken, Germany.
EM ritter@cs.uni-saarland.de; hack@cs.uni-saarland.de
OI Ritter, Fabian/0000-0001-9227-0910; Hack, Sebastian/0000-0002-3387-2134
CR Abel A, 2022, Machine Learning for Computer Architecture and Systems 2022
   Abel A, 2022, PROCEEDINGS OF THE 36TH ACM INTERNATIONAL CONFERENCE ON SUPERCOMPUTING, ICS 2022, DOI 10.1145/3524059.3532396
   Abel A, 2020, INT SYM PERFORM ANAL, P34, DOI 10.1109/ISPASS48437.2020.00014
   Abel A, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P673, DOI 10.1145/3297858.3304062
   Abel Andreas, 2020, Ph. D. Dissertation
   AMD, 2017, Software Optimization Guide for AMD Family 17h Processors
   Binkert Nathan, 2011, Computer Architecture News, V39, P1, DOI 10.1145/2024716.2024718
   Bohm I., 2010, Proceedings of the 2010 International Conference on Embedded Computer Systems: Architectures, Modeling, and Simulation (IC-SAMOS 2010), P1, DOI 10.1109/ICSAMOS.2010.5642102
   Brubaker C, 2014, P IEEE S SECUR PRIV, P114, DOI 10.1109/SP.2014.15
   CHAITIN GJ, 1981, COMPUT LANG, V6, P47, DOI 10.1016/0096-0551(81)90048-5
   Charif-Rubial AS, 2014, INT C HIGH PERFORM
   Chatelet Guillaume, 2018, llvm-exegesis: Automatic Measurement of Instruction Latency/Uops
   Chen YS, 2019, I S WORKL CHAR PROC, P167, DOI 10.1109/IISWC47752.2019.9042166
   Chen YT, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P793, DOI 10.1145/2786805.2786835
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Derumigny N, 2022, INT SYM CODE GENER, P106, DOI 10.1109/CGO53902.2022.9741289
   Di Biagio A., 2018, llvm-mca: A Static Performance Analysis Tool
   Dutra R, 2019, 2019 FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P203, DOI [10.23919/FMCAD.2019.8894251, 10.23919/fmcad.2019.8894251]
   Google, 2018, EXEgesis: Automatic Measurement of Instruction Latency/Uops
   Intel, 2012, Intel Architecture Code Analyzer
   Jay N, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P84, DOI 10.1109/SANER.2018.8330199
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Laukemann J, 2018, PROCEEDINGS OF 2018 IEEE/ACM PERFORMANCE MODELING, BENCHMARKING AND SIMULATION OF HIGH PERFORMANCE COMPUTER SYSTEMS (PMBS 2018), P121, DOI [10.1109/PMBS.2018.8641578, 10.1109/PMBS.2018.00016]
   LLVM, 2021, LLVM 13 Scheduling Model for AMD Zen/Zen+ CPUs
   LLVM, 2021, llvm-mca-LLVM Machine Code Analyzer
   LLVM, 2021, llvm-exegesis-LLVM Machine Instruction Benchmark
   Manès VJM, 2021, IEEE T SOFTWARE ENG, V47, P2312, DOI 10.1109/TSE.2019.2946563
   McKeeman William M., 1998, DIGIT TECH J, V10, P100
   Mendis C., 2019, INT C MACHINE LEARNI, P4505
   Ofenbeck G, 2014, INT SYM PERFORM ANAL, P76, DOI 10.1109/ISPASS.2014.6844463
   Oleksenko Oleksii, 2021, arXiv
   Paleari Roberto, 2010, P 19 INT S SOFTW TES, P265, DOI [10.1145/1831708.1831741, DOI 10.1145/1831708.1831741]
   Parnin C., 2011, P 2011 INT S SOFTWAR, P199, DOI [10.1145/2001420.2001445, DOI 10.1145/2001420.2001445]
   Petsios T, 2017, P IEEE S SECUR PRIV, P615, DOI 10.1109/SP.2017.27
   Renda A, 2020, 2020 53RD ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO 2020), P442, DOI 10.1109/MICRO50266.2020.00045
   Ritter Fabian, 2022, Zenodo
   Ritter F, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P608, DOI 10.1145/3385412.3385995
   Williams S, 2009, COMMUN ACM, V52, P65, DOI 10.1145/1498765.1498785
   Woodruff W, 2021, 2021 IEEE SYMPOSIUM ON SECURITY AND PRIVACY WORKSHOPS (SPW 2021), P152, DOI 10.1109/SPW53761.2021.00029
NR 39
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 125
DI 10.1145/3563288
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200002
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Sun, Z
   Fan, H
   He, F
AF Sun, Zhihang
   Fan, Hongyu
   He, Fei
TI Consistency-Preserving Propagation for SMT Solving of Concurrent Program
   Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program verification; concurrent programs; memory model; satisfiability
   modulo theories
ID STATELESS MODEL CHECKING
AB The happens-before orders have been widely adopted to model thread interleaving behaviors of concurrent programs. A dedicated ordering theory solver, usually composed of theory propagation, consistency checking, and conflict clause generation, plays a central role in concurrent program verification. We propose a novel preventive reasoning approach that automatically preserves the ordering consistency and makes consistency checking and conflict clause generation omissible. We implement our approach in a prototype tool and conduct experiments on credible benchmarks; results reveal a significant improvement over existing state-of-the-art concurrent program verifiers.
C1 [Sun, Zhihang; Fan, Hongyu; He, Fei] Tsinghua Univ, Sch Software, Beijing, Peoples R China.
C3 Tsinghua University
RP Sun, Z (corresponding author), Tsinghua Univ, Sch Software, Beijing, Peoples R China.
EM sunzh20@mails.tsinghua.edu.cn; fhy18@mails.tsinghua.edu.cn
OI He, Fei/0000-0002-4266-875X; Fan, Hongyu/0000-0002-6135-7308
FU National Key Research and Development Program of China [2018YFB1308601];
   National Natural Science Foundation of China [62072267, 62021002]
FX This work was supported in part by the National Key Research and
   Development Program of China (No. 2018YFB1308601) and the National
   Natural Science Foundation of China (No. 62072267 and No. 62021002).
CR Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Abdulla PA, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360576
   Abdulla PA, 2017, ACTA INFORM, V54, P789, DOI 10.1007/s00236-016-0275-0
   Agarwal P, 2021, LECT NOTES COMPUT SC, V12759, P341, DOI 10.1007/978-3-030-81685-8_16
   Alglave Jade, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P141, DOI 10.1007/978-3-642-39799-8_9
   Alglave J, 2014, LECT NOTES COMPUT SC, V8559, P508, DOI 10.1007/978-3-319-08867-9_33
   Alglave J, 2012, FORM METHOD SYST DES, V40, P170, DOI 10.1007/s10703-011-0135-z
   [Anonymous], 1994, The SPARC Architecture Manual, Version 9
   Barrett C.W., 2018, Handbook of Model Checking, P305, DOI DOI 10.1007/978-3-319-10575-8_11
   Chalupa M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158119
   Clarke E, 2001, FORM METHOD SYST DES, V19, P7, DOI 10.1023/A:1011276507260
   Cordeiro L, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P331, DOI 10.1145/1985793.1985839
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   De Moura L, 2011, COMMUN ACM, V54, P69, DOI 10.1145/1995376.1995394
   Fan HY, 2022, PPOPP'22: PROCEEDINGS OF THE 27TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P163, DOI 10.1145/3503221.3508424
   Godefroid P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P174, DOI 10.1145/263699.263717
   Godefroid P, 1996, LECT NOTES COMPUT SC, V1032, P11
   Günther H, 2016, LECT NOTES COMPUT SC, V9636, P954, DOI 10.1007/978-3-662-49674-9_69
   Gupta A, 2015, ACM SIGPLAN NOTICES, V50, P433, DOI [10.1145/2676726.2677008, 10.1145/2775051.2677008]
   He F, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1264, DOI 10.1145/3453483.3454108
   Huang J, 2015, ACM SIGPLAN NOTICES, V50, P165, DOI [10.1145/2737924.2737975, 10.1145/2813885.2737975]
   Inverso O, 2015, IEEE INT CONF AUTOM, P807, DOI 10.1109/ASE.2015.108
   Inverso O, 2014, LECT NOTES COMPUT SC, V8559, P585, DOI 10.1007/978-3-319-08867-9_39
   Jhala Ranjit, 2018, Predicate Abstraction for Program Verification, P447, DOI [10.1007/978-3-319-10575-8_15, DOI 10.1007/978-3-319-10575-8_15]
   Kokologiannakis M, 2021, LECT NOTES COMPUT SC, V12759, P427, DOI 10.1007/978-3-030-81685-8_20
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Kroening Daniel, 2014, TOOLS ALGORITHMS CON, P389, DOI [10.1007/978-3-642-54862-8_26, DOI 10.1007/978-3-642-54862-8_26]
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   MAZURKIEWICZ A, 1987, LECT NOTES COMPUT SC, V255, P279
   Oberhauser J, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P530, DOI 10.1145/3445814.3446748
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Ponce-de-Leon Hernan, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12079), P378, DOI 10.1007/978-3-030-45237-7_24
   Sinha N, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P423, DOI 10.1145/1926385.1926433
   Tomasco E, 2016, PROCEEDINGS OF THE 2016 16TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2016), P193, DOI 10.1109/FMCAD.2016.7886679
   Wang C, 2009, LECT NOTES COMPUT SC, V5850, P256, DOI 10.1007/978-3-642-05089-3_17
   Yin LZ, 2018, IEEE INT CONF AUTOM, P645, DOI 10.1145/3238147.3238223
   Yin LZ, 2020, IEEE T SOFTWARE ENG, V46, P549, DOI 10.1109/TSE.2018.2864122
   Yin LZ, 2018, LECT NOTES COMPUT SC, V10806, P422, DOI 10.1007/978-3-319-89963-3_25
NR 38
TC 1
Z9 1
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 158
DI 10.1145/3563321
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200035
OA gold
DA 2024-07-18
ER

PT J
AU Wu, H
   Barrett, C
   Sharif, M
   Narodytska, N
   Singh, G
AF Wu, Haoze
   Barrett, Clark
   Sharif, Mahmood
   Narodytska, Nina
   Singh, Gagandeep
TI Scalable Verification of GNN-Based Job Schedulers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Formal Verification; Neural Networks; Graph Neural Networks; Cluster
   Scheduling; Abstract Interpretation; Forward-backward Analysis
AB Recently, Graph Neural Networks (GNNs) have been applied for scheduling jobs over clusters, achieving better performance than hand-crafted heuristics. Despite their impressive performance, concerns remain over whether these GNN-based job schedulers meet users' expectations about other important properties, such as strategy-proofness, sharing incentive, and stability. In this work, we consider formal verification of GNN-based job schedulers. We address several domain-specific challenges such as networks that are deeper and specifications that are richer than those encountered when verifying image and NLP classifiers. We develop vegas, the first general framework for verifying both single-step and multi-step properties of these schedulers based on carefully designed algorithms that combine abstractions, refinements, solvers, and proof transfer. Our experimental results show that vegas achieves significant speed-up when verifying important properties of a state-of-the-art GNN-based scheduler compared to previous methods.
C1 [Wu, Haoze; Barrett, Clark] Stanford Univ, Dept Comp Sci, Stanford, CA USA.
   [Sharif, Mahmood] Tel Aviv Univ, Sch Comp Sci, Tel Aviv, Israel.
   [Narodytska, Nina] VMware Res, Palo Alto, CA USA.
   [Singh, Gagandeep] Univ Illinois, Champaign, IL USA.
C3 Stanford University; Tel Aviv University; VMware, Inc.; University of
   Illinois System; University of Illinois Urbana-Champaign
RP Wu, H (corresponding author), Stanford Univ, Dept Comp Sci, Stanford, CA USA.
RI Sharif, Mahmood/AAU-4183-2020
OI Singh, Gagandeep/0000-0002-9299-2961; Sharif,
   Mahmood/0000-0001-7661-2220; Barrett, Clark/0000-0002-9522-3084; Wu,
   Haoze/0000-0002-5077-144X; Narodytska, Nina/0000-0002-5181-4560
FU NSF [2148583]; NSF-BSF [1814369]
FX We thank the anonymous reviewers for their constructive feedback, and
   Guy Katz for some early discussion on forward-backward analysis. This
   work was conducted while the first author was an intern at VMWare
   Research. It was also partially supported by NSF (RINGS #2148583 and
   NSF-BSF #1814369).
CR Vincent JA, 2021, Arxiv, DOI arXiv:2011.11609
   Aho A.V., 1986, COMPILERS PRINCIPLES
   Amir Guy, 2021, 2021 Formal Methods in Computer Aided Design (FMCAD), P193, DOI 10.34727/2021/isbn.978-3-85448-046-4_28
   Anderson G, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P731, DOI 10.1145/3314221.3314614
   Bak S, 2020, LECT NOTES COMPUT SC, V12224, P66, DOI 10.1007/978-3-030-53288-8_4
   Barroso Luiz Andre, 2009, The Datacenter as a Computer: An Introduction to the Design of Warehouse-Scale Machines, V4, P1, DOI [DOI 10.2200/S00516ED2V01Y201306CAC024, DOI 10.2200/S00193ED1V01Y200905CAC006]
   Bojchevski A, 2019, Arxiv, DOI arXiv:1910.14356
   Boopathy A, 2019, AAAI CONF ARTIF INTE, P3240
   Botoeva E, 2020, AAAI CONF ARTIF INTE, V34, P3291
   Bunel R, 2020, J MACH LEARN RES, V21
   Bunel R, 2018, ADV NEUR IN, V31
   Dai HJ, 2017, ADV NEUR IN, V30
   Dai HK, 2021, Arxiv, DOI arXiv:2109.14152
   De Palma A, 2024, Arxiv, DOI arXiv:2101.05844
   Defferrard M, 2016, ADV NEUR IN, V29
   Dutta S, 2018, LECT NOTES COMPUT SC, V10811, P121, DOI 10.1007/978-3-319-77935-5_9
   Duvenaudt D, 2015, ADV NEUR IN, V28
   Ehlers R, 2017, LECT NOTES COMPUT SC, V10482, P269, DOI 10.1007/978-3-319-68167-2_19
   Fischetti Matteo, 2017, arXiv
   Fout A, 2017, ADV NEUR IN, V30
   Fromherz A, 2021, Arxiv, DOI arXiv:2002.04742
   Gehr T, 2018, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2018.00058
   Ghodsi An, 2011, Computer Communication Review, V41, P507, DOI 10.1145/2018584.2018586
   Ghodsi Ali, 2013, Choosy: Max Min Fair Sharing for Datacenter Jobs with Constraints, DOI [10.1145/2465351.2465387, DOI 10.1145/2465351.2465387]
   Haoze Wu, 2020, 2020 Formal Methods in Computer Aided Design (FMCAD), P128, DOI 10.34727/2020/isbn.978-3-85448-042-6_20
   Henriksen Patrick, 2021, P 30 INT JOINT C ART, P2549, DOI [DOI 10.24963/IJCAI.2021/351, 10.24963/ijcai.2021/ 351]
   Tran HD, 2020, LECT NOTES COMPUT SC, V12224, P18, DOI 10.1007/978-3-030-53288-8_2
   Huang XW, 2017, LECT NOTES COMPUT SC, V10426, P3, DOI 10.1007/978-3-319-63387-9_1
   Huang ZY, 2018, ACM S THEORY COMPUT, P17, DOI 10.1145/3188745.3188858
   Kandasamy K, 2020, Arxiv, DOI arXiv:2012.08648
   Katz G, 2019, LECT NOTES COMPUT SC, V11561, P443, DOI 10.1007/978-3-030-25540-4_26
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Khedr H, 2021, Arxiv, DOI arXiv:2006.10864
   Kipf TN, 2017, INT C LEARN REPR
   LeCun Y., 2010, MNIST HANDWRITTEN DI
   Lu JY, 2019, Arxiv, DOI arXiv:1912.01329
   Lyu ZY, 2020, AAAI CONF ARTIF INTE, V34, P5037
   Mao HZ, 2019, SIGCOMM '19 - PROCEEDINGS OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION, P270, DOI 10.1145/3341302.3342080
   Muller Christoph, 2021, P MACHINE LEARNING S, V3
   Niepert M, 2016, PR MACH LEARN RES, V48
   Müller MN, 2022, Arxiv, DOI arXiv:2103.03638
   Park J, 2021, INT J PROD RES, V59, P3360, DOI 10.1080/00207543.2020.1870013
   Pengfei Yang, 2021, Tools and Algorithms for the Construction and Analysis of Systems. 27th International Conference, TACAS 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12651), P389, DOI 10.1007/978-3-030-72016-2_21
   Raghunathan A, 2018, Arxiv, DOI arXiv:1811.01057
   Ryou W, 2021, LECT NOTES COMPUT SC, V12759, P225, DOI 10.1007/978-3-030-81685-8_10
   Salman Hadi, 2019, Advances in Neural Information Processing Systems, V32
   Singh Gagandeep, 2017, ACM SIGPLAN Notices, V52, P46, DOI 10.1145/3093333.3009885
   Singh G, 2019, 33 C NEURAL INFORM P, V32
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Singh G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158143
   Singh G, 2018, ADV NEUR IN, V31
   Singh Gagandeep, 2019, INT C LEARN REPR
   Sun PH, 2020, PROCEEDINGS OF THE TWENTY-NINTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P3314
   Sun XW, 2019, PROCEEDINGS OF THE 2019 22ND ACM INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL (HSCC '19), P147, DOI 10.1145/3302504.3311802
   Szegedy C, 2014, Arxiv, DOI [arXiv:1312.6199, DOI 10.1109/CVPR.2015.7298594]
   Tjandraatmadja C., 2020, ADV NEURAL INFORM PR, V33, P21675
   Tjeng V, 2019, ICLR
   Urban C, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428253
   Wang BH, 2021, KDD '21: PROCEEDINGS OF THE 27TH ACM SIGKDD CONFERENCE ON KNOWLEDGE DISCOVERY & DATA MINING, P1645, DOI 10.1145/3447548.3467295
   Wang J, 2017, IEEE INFOCOM SER
   Wang S., 2021, arXiv
   Wang S, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P3762
   Wang SQ, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P1599
   Weng TW, 2018, PR MACH LEARN RES, V80
   Wong E, 2018, PR MACH LEARN RES, V80
   Wu Haoze, 2022, Zenodo, DOI 10.5281/ZENODO.7080246
   Wu HZ, 2022, LECT NOTES COMPUT SC, V13243, P143, DOI 10.1007/978-3-030-99524-9_8
   Wu ZH, 2021, IEEE T NEUR NET LEAR, V32, P4, DOI 10.1109/TNNLS.2020.2978386
   Xiang WM, 2018, IEEE T NEUR NET LEAR, V29, P5777, DOI 10.1109/TNNLS.2018.2808470
   Xu KD, 2021, Arxiv, DOI arXiv:2011.13824
   Ying R, 2018, KDD'18: PROCEEDINGS OF THE 24TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY & DATA MINING, P974, DOI 10.1145/3219819.3219890
   Zaharia M, 2010, EUROSYS'10: PROCEEDINGS OF THE EUROSYS 2010 CONFERENCE, P265
   Zelazny T, 2022, Arxiv, DOI arXiv:2208.07669
NR 73
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 162
DI 10.1145/3563325
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200039
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Hoang, T
   Trunov, A
   Lampropoulos, L
   Sergey, I
AF Hoang, Tram
   Trunov, Anton
   Lampropoulos, Leonidas
   Sergey, Ilya
TI Random Testing of a Higher-Order Blockchain Language (Experience Report)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE random testing; property-based testing; definitional interpreters;
   higher-order control-flow analysis; smart contracts; QuickChick; Scilla
AB We describe our experience of using property-based testing an approach for automatically generating random inputs to check executable program specifications-in a development of a higher-order smart contract language that powers a state-of-the-art blockchain with thousands of active daily users.
   We outline the process of integrating QuickChick a framework for property-based testing built on top of the Coq proof assistant into a real-world language implementation in OCaml. We discuss the challenges we have encountered when generating well-typed programs for a realistic higher-order smart contract language, which mixes purely functional and imperative computations and features runtime resource accounting. We describe the set of the language implementation properties that we tested, as well as the semantic harness required to enable their validation. The properties range from the standard type safety to the soundness of a control- and type-flow analysis used by the optimizing compiler. Finally, we present the list of bugs discovered and rediscovered with the help of QuickChick and discuss their severity and possible ramifications.
C1 [Hoang, Tram; Sergey, Ilya] Natl Univ Singapore, Singapore, Singapore.
   [Trunov, Anton] Zilliqa Res, Moscow, Russia.
   [Lampropoulos, Leonidas] Univ Maryland, College Pk, MD 20742 USA.
C3 National University of Singapore; University System of Maryland;
   University of Maryland College Park
RP Hoang, T (corresponding author), Natl Univ Singapore, Singapore, Singapore.
EM tram.hoang@u.yale-nus.edu.sg; anton@zilliqa.com; leonidas@umd.edu;
   ilya@nus.edu.sg
OI Trunov, Anton/0000-0003-0719-4744; Sergey, Ilya/0000-0003-4250-5392;
   Lampropoulos, Leonidas/0000-0003-0269-9815; , Tram/0000-0002-7933-4411
FU Singapore MoE Tier 1 [IG18-SG102]; NSF [2107206]; Division of Computing
   and Communication Foundations; Direct For Computer & Info Scie & Enginr
   [2107206] Funding Source: National Science Foundation
FX The work by Sergey was supported in part by Singapore MoE Tier 1 Grant
   No. IG18-SG102. The work by Lampropoulos was supported in part by NSF
   award #2107206 "Efficient and Trustworthy Proof Engineeringz. Any
   opinions, findings and conclusions or recommendations expressed in this
   material are those of the authors and do not necessarily reflect the
   views of the NSF.
CR [Anonymous], 1991, Ph.D. dissertation
   Blackshear Sam, 2019, Move: A Language With Programmable Resources
   Cecchetti Ethan, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P1249, DOI 10.1109/SP40001.2021.00084
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Claret Guillaume, 2021, COQ OF OCAML COMPILE
   Coblenz M, 2017, PROC IEEE ACM INT C, P97, DOI 10.1109/ICSE-C.2017.150
   Darais D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110256
   Das A, 2021, P IEEE COMPUT SECUR, P109, DOI 10.1109/CSF51468.2021.00004
   Emin Gun Sirer, 2016, Reentrancy Woes in Smart Contracts
   Ethereum Foundation, 2018, ERC20 TOK STAND
   Filinski A., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P446, DOI 10.1145/174675.178047
   Fluet Matthew., 2012, IFL, V8241, P122, DOI [10.1007/978-3-642-41582-1_8, DOI 10.1007/978-3-642-41582-1_8]
   Girard Jean-Yves, 1972, THESIS U PARIS 7 PAR
   Goldstein H, 2021, LECT NOTES COMPUT SC, V12648, P264, DOI 10.1007/978-3-030-72019-3_10
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   Hoang Tram, 2022, Zenodo
   Hritcu C, 2016, J FUNCT PROGRAM, V26, DOI 10.1017/S0956796816000058
   IOHK Foundation, 2019, PLUTUS FUNCTIONAL CO
   Klinger C, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P239, DOI 10.1145/3293882.3330553
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Lampropoulos L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360607
   Lampropoulos L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158133
   Lampropoulos Leonidas, 2018, Ph. D. Dissertation
   Lampropoulos Leonidas, 2018, QuickChick: Property-Based Testing in Coq, V4
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Löscher A, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P46, DOI 10.1145/3092703.3092711
   Madsen M, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P38, DOI 10.1145/3213846.3213847
   Midtgaard J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110259
   Midtgaard Jan, 2015, ICST, P1, DOI [10.1109/ICST.2015.7102603, DOI 10.1109/ICST.2015.7102603]
   Might M, 2010, LECT NOTES COMPUT SC, V6337, P407, DOI 10.1007/978-3-642-15769-1_25
   Nagaraj Vaivaswatha, 2020, ABS200805555 CORR
   Nielson Flemming, 2015, Principles of Program Analysis, DOI [10.1007/978-3-662-03811-6, DOI 10.1007/978-3-662-03811-6]
   Palka Michal H, 2011, P 6 INT WORKSH AUT S, P91, DOI DOI 10.1145/1982595.1982615
   Perez D, 2020, 27TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2020), DOI 10.14722/ndss.2020.24267
   Pirlea George, 2021, PLDI 2021: Proceedings of the 42nd SIGPLAN International Conference on Programming Language Design and Implementation, P1327, DOI 10.1145/3453483.3454112
   Reynolds J. C., 1974, Programming Symposium, P408
   Schrans Franklin, 2018, THESIS IMPERIAL COLL
   Sergey I, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360611
   Sergey I, 2013, ACM SIGPLAN NOTICES, V48, P399, DOI 10.1145/2499370.2491979
   Taneja J, 2020, INT SYM CODE GENER, P81, DOI 10.1145/3368826.3377927
   Tezos, 2018, MICHELSON LANGUAGE S
   Weeks Stephen, 2006, ML 06 P 2006 WORKSHO, P1
   Wood G., 2014, Ethereum project yellow paper, V151, P1
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
NR 44
TC 0
Z9 0
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 122
DI 10.1145/3547653
PG 16
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000033
OA gold
DA 2024-07-18
ER

PT J
AU Thomson, P
   Rix, R
   Wu, N
   Schrijvers, T
AF Thomson, Patrick
   Rix, Rob
   Wu, Nicolas
   Schrijvers, Tom
TI Fusing Industry and Academia at GitHub (Experience Report)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE effects; Haskell; data types; industry
AB GitHub hosts hundreds of millions of code repositories written in hundreds of different programming languages. In addition to its hosting services, GitHub provides data and insights into code, such as vulnerability analysis and code navigation, with which users can improve and understand their software development process. GitHub has built Semantic, a program analysis tool capable of parsing and extracting detailed information from source code. The development of Semantic has relied extensively on the functional programming literature; this paper describes how connections to academic research inspired and informed the development of an industrial-scale program analysis toolkit.
C1 [Thomson, Patrick] GitHub Inc, San Francisco, CA 94107 USA.
   [Rix, Rob] GitHub Inc, Winnipeg, MB, Canada.
   [Wu, Nicolas] Imperial Coll London, London, England.
   [Schrijvers, Tom] Katholieke Univ Leuven, Leuven, Belgium.
C3 Imperial College London; KU Leuven
RP Thomson, P (corresponding author), GitHub Inc, San Francisco, CA 94107 USA.
EM patrickt@github.com; robrix@github.com; n.wu@imperial.ac.uk;
   tom.schrijvers@kulueven.be
RI Schrijvers, Tom/A-6696-2016
OI Schrijvers, Tom/0000-0001-8771-5559; Wu, Nicolas/0000-0002-4161-985X;
   Thomson, Patrick/0000-0003-1026-9815; Rix, Rob/0000-0001-9824-0421
CR [Anonymous], 1986, Efficient parsing for natural language
   [Anonymous], 2014, THE SERVANT
   Bahr P, 2011, WGP 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P83
   Brunsfeld Max, 2018, TREE SITTERTREE SITT, DOI [10.5281/zenodo.5894991, DOI 10.5281/ZENODO.5894991]
   Carette J, 2007, LECT NOTES COMPUT SC, V4807, P222
   Creager Douglas, 2021, INTRO STACK GRAPHS G
   Darais D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110256
   Dev Allele, 2016, FREER SIMPLE
   Eisenberg RA, 2016, LECT NOTES COMPUT SC, V9632, P229, DOI 10.1007/978-3-662-49498-1_10
   Finis J, 2013, PROCEEDINGS OF THE 22ND ACM INTERNATIONAL CONFERENCE ON INFORMATION & KNOWLEDGE MANAGEMENT (CIKM'13), P339, DOI 10.1145/2505515.2505763
   Google, 2014, Kubernetes
   Haefliger S, 2008, MANAGE SCI, V54, P180, DOI 10.1287/mnsc.1070.0748
   Jones M. P., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P97
   Jones SP, 2002, J FUNCT PROGRAM, V12, P393, DOI 10.1017/S0956796802004331
   Lang Bernard, 1974, P C AUT LANG PROGR, P255, DOI [10.1007/978-3-662-21545-6_18, DOI 10.1007/978-3-662-21545-6_18]
   Magalhaes JP, 2010, ACM SIGPLAN NOTICES, V45, P37, DOI 10.1145/2088456.1863529
   Marlow S, 2014, ACM SIGPLAN NOTICES, V49, P325, DOI 10.1145/2692915.2628144
   Marlow Simon, 2015, FIGHTING SPAM HASKEL
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   Myers EW, 1986, ALGORITHMICA, V1, P251, DOI 10.1007/BF01840446
   Nadeem Ayman, 2020, CODEGEN SEMANTICS IM
   Pickering M., 2017, PROGRAMMING J, V1, DOI [DOI 10.22152/PROGRAMMING-JOURNAL.ORG/2017/1/7, DOI 10.22152/PROGRAMMINGJOURNAL.ORG/2017/1/7]
   Plotkin Gordon D., 2001, Electr. Notes Theor. Comput. Sci., V45, P332, DOI [10.1016/S1571-0661(04)80970-8, DOI 10.1016/S1571-0661(04)80970-8]
   Rix Rob, 2017, QUICKLY REV CHANGED
   Schrijvers T, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '19), P98, DOI 10.1145/3331545.3342595
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   van Antwerpen H, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276484
   Van Horn D, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Varda Kenton, 2008, Technical Report
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Wu N, 2015, LECT NOTES COMPUT SC, V9129, P302, DOI 10.1007/978-3-319-19797-5_15
NR 31
TC 1
Z9 1
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 108
DI 10.1145/3547639
PG 16
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000019
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Jeon, M
   Oh, H
AF Jeon, Minseok
   Oh, Hakjoo
TI Return of CFA: Call-Site Sensitivity Can Be Superior to Object
   Sensitivity Even for Object-Oriented Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Machine learning for program analysis; Pointer analysis; Context
   sensitivity
ID POINTS-TO ANALYSIS
AB In this paper, we challenge the commonly-accepted wisdom in static analysis that object sensitivity is superior to call-site sensitivity for object-oriented programs. In static analysis of object-oriented programs, object sensitivity has been established as the dominant flavor of context sensitivity thanks to its outstanding precision. On the other hand, call-site sensitivity has been regarded as unsuitable and its use in practice has been constantly discouraged for object-oriented programs. In this paper, however, we claim that call-site sensitivity is generally a superior context abstraction because it is practically possible to transform object sensitivity into more precise call-site sensitivity. Our key insight is that the previously known superiority of object sensitivity holds only in the traditional k-limited setting, where the analysis is enforced to keep the most recent k context elements. However, it no longer holds in a recently-proposed, more general setting with context tunneling. With context tunneling, where the analysis is free to choose an arbitrary k-length subsequence of context strings, we show that call-site sensitivity can simulate object sensitivity almost completely, but not vice versa. To support the claim, we present a technique, called Obj2Cfa, for transforming arbitrary context-tunneled object sensitivity into more precise, context-tunneled call-site-sensitivity. We implemented Obj2Cfa in Doop and used it to derive a new call-site-sensitive analysis from a state-of-the-art object-sensitive pointer analysis. Experimental results confirm that the resulting call-site sensitivity outperforms object sensitivity in precision and scalability for real-world Java programs. Remarkably, our results show that even 1-call-site sensitivity can be more precise than the conventional 3-object-sensitive analysis.
C1 [Jeon, Minseok; Oh, Hakjoo] Korea Univ, Dept Comp Sci & Engn, 145 Anam Ro, Seoul 02841, South Korea.
C3 Korea University
RP Oh, H (corresponding author), Korea Univ, Dept Comp Sci & Engn, 145 Anam Ro, Seoul 02841, South Korea.
EM minseok_jeon@korea.ac.kr; hakjoo_oh@korea.ac.kr
RI Jeon, Minseok/ISB-1622-2023
OI Jeon, Minseok/0000-0001-8320-8509
FU Samsung Research Funding & Incubation Center of Samsung Electronics
   [SRFC-IT1701-51]; Institute of Information & communications Technology
   Planning & Evaluation (IITP) - Korea government(MSIT) [2020-0-01337];
   MSIT(Ministry of Science and ICT), Korea, under the ICT Creative
   Consilience program [IITP-2021-2020-0-01819]; National Research
   Foundation of Korea(NRF) - Korea government(MSIT) [2021R1A5A1021944]
FX We thank the anonymous POPL reviewers for their constructive feedback.
   This work was supported by Samsung Research Funding & Incubation Center
   of Samsung Electronics under Project Number SRFC-IT1701-51. This work
   was partly supported by Institute of Information & communications
   Technology Planning & Evaluation (IITP) grant funded by the Korea
   government(MSIT) (No.2020-0-01337, (SW STAR LAB) Research on
   Highly-Practical Automated Software Repair) and by the MSIT(Ministry of
   Science and ICT), Korea, under the ICT Creative Consilience
   program(IITP-2021-2020-0-01819) supervised by the IITP(Institute for
   Information & communications Technology Planning & Evaluation), and by
   the National Research Foundation of Korea(NRF) grant funded by the Korea
   government(MSIT)(No. 2021R1A5A1021944).
CR Bielik P, 2017, LECT NOTES COMPUT SC, V10426, P233, DOI 10.1007/978-3-319-63387-9_12
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bravenboer Martin, 2009, P 24 ACM SIGPLAN C O, P243, DOI [DOI 10.1145/1640089.1640108, 10.1145/1640089.1640108]
   Dan AM, 2017, LECT NOTES COMPUT SC, V10427, P521, DOI 10.1007/978-3-319-63390-9_27
   Feng Y, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P576, DOI 10.1145/2635868.2635869
   Fink SJ, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348255
   Gordon MI, 2015, 22ND ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2015), DOI 10.14722/ndss.2015.23089
   Grigore R, 2016, ACM SIGPLAN NOTICES, V51, P485, DOI 10.1145/2914770.2837663
   He JX, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1112, DOI 10.1145/3385412.3386016
   Heo K, 2019, PROC INT CONF SOFTW, P94, DOI 10.1109/ICSE.2019.00027
   Heo K, 2017, PROC INT CONF SOFTW, P519, DOI 10.1109/ICSE.2017.54
   Jeon M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276510
   Jeon M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428247
   Jeon M, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3293607
   Jeong S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133924
   Kastrinis G, 2013, ACM SIGPLAN NOTICES, V48, P423, DOI 10.1145/2499370.2462191
   Khedker UP, 2008, LECT NOTES COMPUT SC, V4959, P213
   Khedker UP, 2012, LECT NOTES COMPUT SC, V7460, P265, DOI 10.1007/978-3-642-33125-1_19
   Lhoták O, 2006, LECT NOTES COMPUT SC, V3923, P47
   Lhoták O, 2008, ACM T SOFTW ENG METH, V18, DOI 10.1145/1391984.1391987
   Li Y, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276511
   Li Y, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3381915
   Li Y, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P129, DOI 10.1145/3236024.3236041
   Liang Donglin, 2005, ACM SIGSOFT SOFTWARE, P6, DOI 10.1145/1108792.1108797
   Liang P, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P590
   Liang P, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P31, DOI 10.1145/1926385.1926391
   Lu JB, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360574
   Might M, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P305, DOI 10.1145/1806596.1806631
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Oh H, 2015, ACM SIGPLAN NOTICES, V50, P572, DOI [10.1145/2858965.2814309, 10.1145/2814270.2814309]
   Oh H, 2014, ACM SIGPLAN NOTICES, V49, P475, DOI [10.1145/2594291.2594318, 10.1145/2666356.2594318]
   Pedregosa F, 2011, J. Mach. Learn. Res., V12, P2825
   Peleg H, 2016, LECT NOTES COMPUT SC, V9583, P185, DOI 10.1007/978-3-662-49122-5_9
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   SHIVERS O, 1988, SIGPLAN NOTICES, V23, P164, DOI 10.1145/960116.54007
   Shiyi WeiB.G. R., 2015, 29 EUROPEAN C OBJECT, P712
   Singh G, 2018, LECT NOTES COMPUT SC, V10981, P211, DOI 10.1007/978-3-319-96145-3_12
   Smaragdakis Y., 2015, FDN TRENDS PROGRAM L, V2, P1, DOI DOI 10.1561/2500000014
   Smaragdakis Y, 2014, ACM SIGPLAN NOTICES, V49, P485, DOI [10.1145/2666356.2594320, 10.1145/2594291.2594320]
   Smaragdakis Y, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P17, DOI 10.1145/1926385.1926390
   Spath J., 2016, PROC EUR C OBJECT OR, p22:1, DOI [10.4230/DARTS.2.1.12, DOI 10.4230/LIPICS.ECOOP.2016.22]
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Sridharan M, 2012, LECT NOTES COMPUT SC, V7313, P435, DOI 10.1007/978-3-642-31057-7_20
   Tan T, 2017, ACM SIGPLAN NOTICES, V52, P278, DOI [10.1145/3140587.3062360, 10.1145/3062341.3062360]
   Tan T, 2016, LECT NOTES COMPUT SC, V9837, P489, DOI 10.1007/978-3-662-53413-7_24
   Thakur M, 2019, PROCEEDINGS OF THE 28TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '19), P135, DOI 10.1145/3302516.3307359
   Thiessen R, 2017, ACM SIGPLAN NOTICES, V52, P263, DOI [10.1145/3140587.3062359, 10.1145/3062341.3062359]
   Tripp O, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P87, DOI 10.1145/1542476.1542486
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   Xu G., 2008, ISSTA'08, P225, DOI DOI 10.1145/1390630.1390658
   Xu GQ, 2009, LECT NOTES COMPUT SC, V5653, P98
   Xu XZ, 2019, PROC INT CONF SOFTW, P512, DOI 10.1109/ICSE.2019.00063
   Zhang X, 2014, ACM SIGPLAN NOTICES, V49, P239, DOI [10.1145/2594291.2594327, 10.1145/2666356.2594327]
NR 55
TC 7
Z9 7
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 58
DI 10.1145/3498720
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900059
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Kjelstrom, AH
   Pavlogiannis, A
AF Kjelstrom, Adam Husted
   Pavlogiannis, Andreas
TI The Decidability and Complexity of Interleaved Bidirected Dyck
   Reachability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE static analysis; CFL/Dyck reachability; bidirected graphs; complexity
ID POINTS-TO ANALYSIS; FLOW-ANALYSIS; ALGORITHMS
AB Dyck reachability is the standard formulation of a large domain of static analyses, as it achieves the sweet spot between precision and efficiency, and has thus been studied extensively. Interleaved Dyck reachability (denoted D-k circle dot D-k) uses two Dyck languages for increased precision (e.g., context and field sensitivity) but is well-known to be undecidable. As many static analyses yield a certain type of bidirected graphs, they give rise to interleaved bidirected Dyck reachability problems. Although these problems have seen numerous applications, their decidability and complexity has largely remained open. In a recent work, Li et al. made the first steps in this direction, showing that (i) D-1 circle dot D-1 reachability (i.e., when both Dyck languages are over a single parenthesis and act as counters) is computable in O(n(7)) time, while (ii) D-k circle dot D-k reachability is NP-hard. However, despite this recent progress, most natural questions about this intricate problem are open.
   In this work we address the decidability and complexity of all variants of interleaved bidirected Dyck reachability. First, we show that D-1 circle dot D-1 reachability can be computed in O(n(3) . alpha(n)) time, significantly improving over the existing O(n(7)) bound. Second, we show that D-k circle dot D-1 reachability (i.e., when one language acts as a counter) is decidable, in contrast to the non-bidirected case where decidability is open. We further consider D-k circle dot D-1 reachability where the counter remains linearly bounded. Our third result shows that this bounded variant can be solved in O(n(2) . alpha(n)) time, while our fourth result shows that the problem has a (conditional) quadratic lower bound, and thus our upper bound is essentially optimal. Fifth, we show that full D-k circle dot D-k reachability is undecidable. This improves the recent NP-hardness lower-bound, and shows that the problem is equivalent to the non-bidirected case. Our experiments on standard benchmarks show that the new algorithms are very fast in practice, offering many orders-of-magnitude speedups over previous methods.
C1 [Kjelstrom, Adam Husted; Pavlogiannis, Andreas] Aarhus Univ, Aarhus, Denmark.
C3 Aarhus University
RP Kjelstrom, AH (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM au640702@post.au.dk; pavlogiannis@cs.au.dk
RI Pavlogiannis, Andreas/X-6831-2018
OI Pavlogiannis, Andreas/0000-0002-8943-0722
CR Alur Rajeev, 2004, P 36 ANN ACM S THEOR, P202, DOI [10.1145/1007352.1007390, DOI 10.1145/1007352.1007390]
   [Anonymous], 2003, T. J. Watson Libraries for Analysis (WALA)
   Arnold Robert S., 1996, Software Change Impact Analysis
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bodden Eric, 2012, P ACM SIGPLAN INT WO, P3, DOI DOI 10.1145/2259051.2259052
   Bradford Phillip G., 2018, ARXIVCSDS180205239
   Chatterjee K, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158118
   Chatterjee K, 2020, LECT NOTES COMPUT SC, V12075, P112, DOI 10.1007/978-3-030-44914-8_5
   Chatterjee K, 2017, LECT NOTES COMPUT SC, V10201, P287, DOI 10.1007/978-3-662-54434-1_11
   Chatterjee K, 2015, ACM SIGPLAN NOTICES, V50, P97, DOI [10.1145/2676726.2676979, 10.1145/2775051.2676979]
   Chaudhuri S, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1328897.1328460
   Chistikov, 2021, ARXIVCSFL210213095
   DEUTSCH A, 1994, SIGPLAN NOTICES, V29, P230, DOI 10.1145/773473.178263
   Englert M, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P477, DOI 10.1145/2933575.2933577
   Ferles K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434298
   Ganardi Moses, 2021, ARXIVCSFL211003654
   Hansen JC, 2021, INFORM PROCESS LETT, V171, DOI 10.1016/j.ipl.2021.106135
   Heintze N, 1997, IEEE S LOG, P342, DOI 10.1109/LICS.1997.614960
   Huang W., 2015, P 2015 INT S SOFTWAR, P106, DOI 10.1145/2771783.2771803
   Kahlon V, 2008, IEEE S LOG, P181, DOI 10.1109/LICS.2008.37
   Kjelstrum, 2021, ARXIVCSPL211105923
   Lerch J, 2015, IEEE INT CONF AUTOM, P619, DOI 10.1109/ASE.2015.9
   Leroux Jerome, 2015, Reachability Problems. 9th International Workshop, RP 2015. Proceedings: LNCS 9328, P101, DOI 10.1007/978-3-319-24537-9_10
   Leroux J, 2015, LECT NOTES COMPUT SC, V9135, P324, DOI 10.1007/978-3-662-47666-6_26
   Lhoták O, 2006, LECT NOTES COMPUT SC, V3923, P47
   Li YB, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434340
   Li YB, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P780, DOI 10.1145/3385412.3386021
   Lu JB, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360574
   Madhusudan P, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P283, DOI 10.1145/1926385.1926419
   Mathiasen AA, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434315
   Milanova A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428246
   PIERRE L, 1992, THEOR COMPUT SCI, V95, P279, DOI 10.1016/0304-3975(92)90269-L
   Qadeer S, 2005, LECT NOTES COMPUT SC, V3440, P93
   Rehof J, 2001, ACM SIGPLAN NOTICES, V36, P54, DOI 10.1145/373243.360208
   Reps T., 1994, SIGSOFT Software Engineering Notes, V19, P11, DOI 10.1145/195274.195287
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T, 1997, LOGIC PROGRAMM, P5
   Reps T., 1995, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics- Based Program Manipulation. PEPM'95, P1, DOI 10.1145/215465.215466
   Reps T, 2000, ACM T PROGR LANG SYS, V22, P162, DOI 10.1145/345099.345137
   Schmitz Sylvain, 2019, Reachability Problems. 13th International Conference, RP 2019. Proceedings: Lecture Notes in Computer Science (LNCS 11674), P193, DOI 10.1007/978-3-030-30806-3_15
   Shang Lei, 2012, P 10 INT S CODE GENE, P264
   Shivers Olin Grigsby, 1991, Ph. D. Dissertation
   Späth J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290361
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Tang H, 2017, LECT NOTES COMPUT SC, V10201, P880, DOI 10.1007/978-3-662-54434-1_33
   VEDURADA J, 2019, P 34 IEEE ACM INT C
   Williams, 2019, SOME FINE GRAINED QU
   Williams R, 2005, THEOR COMPUT SCI, V348, P357, DOI 10.1016/j.tcs.2005.09.023
   Xu GQ, 2009, LECT NOTES COMPUT SC, V5653, P98
   Yan Dacong, 2011, P 2011 INT S SOFTW T, P155, DOI [10.1145/2001420.2001440, DOI 10.1145/2001420.2001440]
   YANNAKAKIS M, 1990, PROCEEDINGS OF THE NINTH ACM SIGACT-SIGMOD-SIGART SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P230, DOI 10.1145/298514.298576
   Yuan H, 2009, LECT NOTES COMPUT SC, V5502, P175
   Zhang QR, 2013, ACM SIGPLAN NOTICES, V48, P435, DOI 10.1145/2499370.2462159
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P344, DOI 10.1145/3093333.3009848
   Zheng X, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P197, DOI 10.1145/1328438.1328464
NR 56
TC 5
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 12
DI 10.1145/3498673
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900013
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Öhman, J
   Nanevski, A
AF Ohman, Joakim
   Nanevski, Aleksandar
TI Visibility Reasoning for Concurrent Snapshot Algorithms
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrent snapshots; visibility relations; linearizability
AB Visibility relations have been proposed by Henzinger et al. as an abstraction for proving linearizability of concurrent algorithms that obtains modular and reusable proofs. This is in contrast to the customary approach based on exhibiting the algorithm's linearization points. In this paper we apply visibility relations to develop modular proofs for three elegant concurrent snapshot algorithms of Jayanti. The proofs are divided by signatures into components of increasing level of abstraction; the components at higher abstraction levels are shared, i.e., they apply to all three algorithms simultaneously. Importantly, the interface properties mathematically capture Jayanti's original intuitions that have previously been given only informally.
C1 [Ohman, Joakim; Nanevski, Aleksandar] IMDEA Software Inst, Madrid, Spain.
   [Ohman, Joakim] Univ Politecn Madrid, Pozuelo De Alarcon, Spain.
C3 IMDEA Software Institute; Universidad Politecnica de Madrid
RP Öhman, J (corresponding author), IMDEA Software Inst, Madrid, Spain.; Öhman, J (corresponding author), Univ Politecn Madrid, Pozuelo De Alarcon, Spain.
EM joakim.ohman@imdea.org; aleks.nanevski@imdea.org
OI Ohman, Joakim/0000-0002-9284-3886; Nanevski,
   Aleksandar/0000-0002-4851-1075
FU Spanish MICINN project BOSCO [PGC2018-102210-B-I00]; European Research
   Council [ERC2016-COG-724464]
FX We thank the anonymous reviewers from the POPL'22 PC for their feedback.
   This research was partially supported by the Spanish MICINN project
   BOSCO (PGC2018-102210-B-I00) and the European Research Council project
   Mathador (ERC2016-COG-724464).
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   AFEK Y, 1993, J ACM, V40, P873, DOI 10.1145/153724.153741
   Bouajjani A, 2017, LECT NOTES COMPUT SC, V10427, P542, DOI 10.1007/978-3-319-63390-9_28
   Chakraborty S, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:20)2015
   Delbianco German Andres, 2017, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V74, DOI [10.4230/LIPIcs.ECOOP.2017.8, DOI 10.4230/LIPICS.ECOOP.2017.8]
   Dodds M, 2015, ACM SIGPLAN NOTICES, V50, P233, DOI [10.1145/2676726.2676963, 10.1145/2775051.2676963]
   Emmi M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290373
   Felsner Stefan, 1992, THESIS TU BERLIN
   Henzinger Thomas A., 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P242, DOI 10.1007/978-3-642-40184-8_18
   Herlihy M., 2008, The Art of Multiprocessor Programming
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Jacobs Bart., 2018, CW714 DEP COMP SCI K
   Jacobs Bart., 2018, JAYANTIS ALGORITHM U
   Jayanti P, 2005, INT CON DISTR COMP S, P59, DOI 10.1109/ICDCS.2005.29
   Jayanti P., 2005, P 37 ANN ACM S THEOR, P723, DOI 10.1145/1060590.1060697
   Jensen E. H., 1987, Technical Report. UCRL-97663
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Krishna S, 2020, LECT NOTES COMPUT SC, V12075, P280, DOI 10.1007/978-3-030-44914-8_11
   LYNCH N, 1995, INFORM COMPUT, V121, P214, DOI 10.1006/inco.1995.1134
   Petrank E, 2013, LECT NOTES COMPUT SC, V8205, P224, DOI 10.1007/978-3-642-41527-2_16
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290381
   Timnat Shahar., 2015, THESIS COMPUTER SCI
   Viotti P, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2926965
NR 23
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 33
DI 10.1145/3498694
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900034
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Ye, QC
   Delaware, B
AF Ye, Qianchuan
   Delaware, Benjamin
TI Oblivious Algebraic Data Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Dependent Types; Algebraic Data Types; Oblivious Computation;
   Multi-party Computation
AB Secure computation allows multiple parties to compute joint functions over private data without leaking any sensitive data, typically using powerful cryptographic techniques. Writing secure applications using these techniques directly can be challenging, resulting in the development of several programming languages and compilers that aim to make secure computation accessible. Unfortunately, many of these languages either lack or have limited support for rich recursive data structures, like trees. In this paper, we propose a novel representation of structured data types, which we call oblivious algebraic data types, and a language for writing secure computations using them. This language combines dependent types with constructs for oblivious computation, and provides a security-type system which ensures that adversaries can learn nothing more than the result of a computation. Using this language, authors can write a single function over private data, and then easily build an equivalent secure computation according to a desired public view of their data.
C1 [Ye, Qianchuan; Delaware, Benjamin] Purdue Univ, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Ye, QC (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM ye202@purdue.edu; bendy@purdue.edu
OI Ye, Qianchuan/0000-0002-5977-5236
FU National Science Foundation [CCF-1755880]; Office of the Director of
   National Intelligence (ODNI), Intelligence Advanced Research Projects
   Activity (IARPA) [2019-19020700004]; Purdue Graduate School
FX We thank Robert Dickerson, Pedro Abreu, Aaron Stump, and the anonymous
   reviewers for their detailed comments and suggestions. We also thank
   Kirshanthan Sundararajah, Milind Kulkarni, Chaitanya Koparkar, Michael
   Vollmer and Ryan Newton for their stimulating discussions. This material
   is based upon work partially supported by the National Science
   Foundation under Grant CCF-1755880, the Office of the Director of
   National Intelligence (ODNI), Intelligence Advanced Research Projects
   Activity (IARPA) under contract #2019-19020700004, and the Purdue
   Graduate School under a Summer Research Grant. Any opinions, findings,
   and conclusions or recommendations expressed in this material are those
   of the authors and do not necessarily reflect the views of the NSF,
   ODNI, IARPA, or Purdue. The U.S. Government is authorized to reproduce
   and distribute reprints for governmental purposes notwithstanding any
   copyright annotation therein.
CR Abate C, 2021, P IEEE COMPUT SECUR, P576, DOI 10.1109/CSF51468.2021.00048
   Acar A, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3214303
   Backes Michael, 2010, LEIBNIZ INT P INFORM, V8
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371075
   Barthe G, 2019, J AUTOM REASONING, V63, P1, DOI 10.1007/s10817-017-9441-5
   Barthe G, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1267, DOI 10.1145/2660267.2660283
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Barthe Gilles, 2011, LECT NOTES COMPUTER, p71s90
   Beimel Amos, 2011, Coding and Cryptology. Proceedings of the Third International Workshop, IWCC 2011, P11, DOI 10.1007/978-3-642-20901-7_2
   Cauligi S, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P174, DOI 10.1145/3314221.3314605
   Darais D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371118
   Evans David, 2018, FDN TRENDS PRIVACY S, V2, P70, DOI 10.1561/3300000019
   Gentry C, 2009, ACM S THEORY COMPUT, P169, DOI 10.1145/1536414.1536440
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Goldreich O, 1996, J ACM, V43, P431, DOI 10.1145/233551.233553
   Goldreich O., 2019, Providing Sound Foundations for Cryptography: On the Work of Shafi Goldwasser and Silvio Micali, P307, DOI DOI 10.1145/3335741.3335755
   Goldreich Oded, 1987, Proceedings of the 19th Annual ACM Symposium on Theory of Computing. STOC'87, P182, DOI DOI 10.1145/28395.28416
   Haagh H, 2018, P IEEE COMPUT SECUR, P119, DOI 10.1109/CSF.2018.00016
   Hastings M, 2019, P IEEE S SECUR PRIV, P1220, DOI 10.1109/SP.2019.00028
   Hazay C, 2010, INFORM SEC CRYPT TEX, P3, DOI 10.1007/978-3-642-14303-8
   Hoekstra Matthew E, 2015, Intel SGX for Dummies (Intel SGX Design Objectives)
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Kawaguchi M, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P304, DOI 10.1145/1542476.1542510
   Laud Peeter, 2015, Cryptology and Information Security Series, V13
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Liu C, 2015, P IEEE S SECUR PRIV, P359, DOI 10.1109/SP.2015.29
   Malkhi D, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE 13TH USENIX SECURITY SYMPOSIUM, P287
   Maurer U, 2006, DISCRETE APPL MATH, V154, P370, DOI 10.1016/j.dam.2005.03.020
   Nanevski A, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2491522.2491523
   Norell Ulf, AGD WIK
   Ohori A, 2007, ACM SIGPLAN NOTICES, V42, P143, DOI 10.1145/1190215.1190241
   Rastogi Aseem, 2019, Principles of Security and Trust. 8th International Conference, POST 2019. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2019. Proceedings: Lecture Notes in Computer Science (11426), P99, DOI 10.1007/978-3-030-17138-4_5
   Rastogi A, 2014, P IEEE S SECUR PRIV, P655, DOI 10.1109/SP.2014.48
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Sabelfeld A, 2004, LECT NOTES COMPUT SC, V3233, P174
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sjoberg Vilhelm, 2015, THESIS
   Sjoeberg V, 2012, ELECTRON PROC THEOR, P112, DOI 10.4204/EPTCS.76.9
   Sjöberg V, 2015, ACM SIGPLAN NOTICES, V50, P369, DOI 10.1145/2676726.2676974
   Stefanov Emil., 2013, CCS
   Sweet Ian, 2021, INF P WORKSH FDN COM
   The Coq Development Team, 2021, **DATA OBJECT**, DOI 10.5281/zenodo.4501022
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Wang XS, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P215, DOI 10.1145/2660267.2660314
   Yao A. C., 1982, 23rd Annual Symposium on Foundations of Computer Science, P160, DOI 10.1109/SFCS.1982.38
   Ye Qianchuan, 2021, **DATA OBJECT**, DOI 10. 5281/zenodo.5652106
   Zahur Samee, 2015, OBLIV C LANGUAGE EX
   Zdancewic Stephan Arthur, 2002, THESIS CORNELL U US
NR 48
TC 3
Z9 3
U1 2
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 51
DI 10.1145/3498713
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900052
OA gold
DA 2024-07-18
ER

PT J
AU Bartha, S
   Cheney, J
   Belle, V
AF Bartha, Sandor
   Cheney, James
   Belle, Vaishak
TI One Down, 699 to Go: or, Synthesising Compositional Desugarings
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Programming language semantics; testing; enumerative synthesis
ID OPERATIONAL SEMANTICS
AB Programming or scripting languages used in real-world systems are seldom designed with a formal semantics in mind from the outset. Therefore, developing well-founded analysis tools for these systems requires reverse-engineering a formal semantics as a first step. This can take months or years of effort.
   Can we (at least partially) automate this process? Though desirable, automatically reverse-engineering semantics rules from an implementation is very challenging, as found by Krishnamurthi, Lerner and Elberty. In this paper, we highlight that scaling methods with the size of the language is very difficult due to state space explosion, so we propose to learn semantics incrementally. We give a formalisation of Krishnamurthi et al.'s desugaring learning framework in order to clarify the assumptions necessary for an incremental learning algorithm to be feasible.
   We show that this reformulation allows us to extend the search space and express rules that Krishnamurthi et al. described as challenging, while still retaining feasibility. We evaluate enumerative synthesis as a baseline algorithm, and demonstrate that, with our reformulation of the problem, it is possible to learn correct desugaring rules for the example source and core languages proposed by Krishnamurthi et al., in most cases identical to the intended rules. In addition, with user guidance, our system was able to synthesize rules for desugaring list comprehensions and try/catch/finally constructs.
C1 [Bartha, Sandor; Cheney, James; Belle, Vaishak] Univ Edinburgh, 10 Crichton St, Edinburgh, Midlothian, Scotland.
   [Cheney, James; Belle, Vaishak] Alan Turing Inst, 96 Euston Rd, London, England.
C3 University of Edinburgh
RP Bartha, S (corresponding author), Univ Edinburgh, 10 Crichton St, Edinburgh, Midlothian, Scotland.
EM sandor.bartha@ed.ac.uk; jcheney@inf.ed.ac.uk; vaishak@ed.ac.uk
OI Bartha, Sandor/0009-0003-4285-3415; Belle, Vaishak/0000-0001-5573-8465
FU ERC Consolidator Grant Skye [682315]; ISCF Metrology Fellowship grant by
   the UK government's Department for Business, Energy and Industrial
   Strategy (BEIS); Royal Society University Research Fellowship; SPF
   [EP/V026607/1] Funding Source: UKRI; European Research Council (ERC)
   [682315] Funding Source: European Research Council (ERC)
FX We would like to thank the anonymous reviewers and our shepherd Shriram
   Krishnamurthi for helpful feedback and suggestions for improvement. We
   also thank the artifact evaluators and AEC chairs for allowing us to
   update our artifact submission to reflect the final version of the
   paper. This work was supported by ERC Consolidator Grant Skye (grant
   number 682315) and by an ISCF Metrology Fellowship grant provided by the
   UK government's Department for Business, Energy and Industrial Strategy
   (BEIS). Vaishak Belle was supported by a Royal Society University
   Research Fellowship.
CR Ahmad MB, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3355089.3356549
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Amin N, 2016, ACM SIGPLAN NOTICES, V51, P838, DOI 10.1145/3022671.2984004
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   [Anonymous], 2017, LECT NOTES COMPUT SC, DOI DOI 10.1007/978-3-662-54577-5_14
   Bartha Sandor, 2020, Inductive Local Programming. 29th International Conference (ILP 2019). Proceedings. Lecture Notes in Artificial Intelligence. Subseries of Lecture Notes in Computer Science (LNAI 11770), P16, DOI 10.1007/978-3-030-49210-6_2
   Bartha Sandor, 2021. Source code: Case studies of synthesising compositional desugarings, DOI 10.5281/zenodo.5475211
   Bartha Sandor, 2021, ARXIV210906114CSPL
   Comon H., 2007, TREE AUTOMATA TECHNI
   Duregård J, 2012, ACM SIGPLAN NOTICES, V47, P61, DOI 10.1145/2430532.2364515
   Felleisen Matthias, 2001, How to Design Programs
   Filaretti D, 2014, LECT NOTES COMPUT SC, V8586, P567
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   Guha A, 2010, LECT NOTES COMPUT SC, V6183, P126, DOI 10.1007/978-3-642-14107-2_7
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Kamil S, 2016, ACM SIGPLAN NOTICES, V51, P711, DOI [10.1145/2980983.2908117, 10.1145/2908080.2908117]
   Kern C., 1999, ACM Transactions on Design Automation of Electronic Systems, V4, P123, DOI 10.1145/307988.307989
   Krishnamurthi Shriram, 2019, SNAPL
   LANDIN PJ, 1966, COMMUN ACM, V9, P157, DOI 10.1145/365230.365257
   Li JW, 2015, ADV EDUC SCI, V9, P90
   Maffeis S, 2008, LECT NOTES COMPUT SC, V5356, P307
   Marlow S, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P65
   Meinke K., 1992, Handbook of Logic for Computer Science, VI, P189
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Morandat F, 2012, LECT NOTES COMPUT SC, V7313, P104, DOI 10.1007/978-3-642-31057-7_6
   Muggleton SH, 2014, MACH LEARN, V94, P25, DOI 10.1007/s10994-013-5358-3
   Nienhuis K, 2016, ACM SIGPLAN NOTICES, V51, P111, DOI 10.1145/3022671.2983997
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Pierce Benjamin C., 2010, SPIDER CALCULU UNPUB
   Politz Joe Gibbs, 2013, P 2013 ACM SIGPLAN I, P217, DOI DOI 10.1145/2509136.2509536
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Reynolds A, 2019, LECT NOTES COMPUT SC, V11562, P74, DOI 10.1007/978-3-030-25543-5_5
   Solar-Lezama A, 2005, ACM SIGPLAN NOTICES, V40, P281, DOI 10.1145/1064978.1065045
   Solar-Lezama Armando, 2013, International Journal on Software Tools for Technology Transfer, V15, P475, DOI 10.1007/s10009-012-0249-7
   Sperber Michael, 2010, REVISED 6 REPORT ALG, V1st
   Wadler Philip, 1992, MATH STRUCTURES COMP, V2, P461, DOI [DOI 10.1017/S0960129500001560, DOI 10.1016/0304-3975(75)90017-1]
NR 39
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 122
DI 10.1145/3485499
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200026
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Paraskevopoulou, Z
   Grover, A
AF Paraskevopoulou, Zoe
   Grover, Anvay
TI Compiling with Continuations, Correctly
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE continuation-passing style; compiler correctness; logical relations;
   simulations
AB In this paper we present a novel simulation relation for proving correctness of program transformations that combines syntactic simulations and logical relations. In particular, we establish a new kind of simulation diagram that uses a small-step or big-step semantics in the source language and an untyped, step-indexed logical relation in the target language. Our technique provides a practical solution for proving semantics preservation for transformations that do not preserve reductions in the source language. This is common when transformations generate new binder names, and hence alpha-conversion must be explicitly accounted for, or when transformations introduce administrative redexes. Our technique does not require reductions in the source language to correspond directly to reductions in the target language. Instead, we enforce a weaker notion of semantic preorder, which suffices to show that semantics are preserved for both whole-program and separate compilation. Because our logical relation is transitive, we can transition between intermediate program states in a small-step fashion and hence the shape of the proof resembles that of a simple small-step simulation.
   We use this technique to revisit the semantic correctness of a continuation-passing style (CPS) transformation and we demonstrate how it allows us to overcome well-known complications of this proof related to alpha-conversion and administrative reductions. In addition, by using a logical relation that is indexed by invariants that relate the resource consumption of two programs, we are able show that the transformation preserves diverging behaviors and that our CPS transformation asymptotically preserves the running time of the source program. Our results are formalized in the Coq proof assistant. Our continuation-passing style transformation is part of the CertiCoq compiler for Gallina, the specification language of Coq.
C1 [Paraskevopoulou, Zoe] Northeasten Univ, Boston, MA 02115 USA.
   [Grover, Anvay] Univ Wisconsin, Madison, WI 53706 USA.
C3 University of Wisconsin System; University of Wisconsin Madison
RP Paraskevopoulou, Z (corresponding author), Northeasten Univ, Boston, MA 02115 USA.
EM z.paraskevopoulou@northeastern.edu; anvayg@cs.wisc.edu
RI Paraskevopoulou, Zoe/IWM-1463-2023
FU National Science Foundation [CCF-1521602, 2030859]
FX This material is based upon work supported by the National Science
   Foundation under Grant No. CCF-1521602 and Grant No. 2030859 to the
   Computing Research Association for the CIFellows Project. We wish to
   thank Andrew W. Appel, John M. Li, Daniel Patterson, Andrew Wagner, and
   the anonymous reviewers for their feedback on various versions of this
   paper.
CR Acar UA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P309, DOI 10.1145/1328438.1328476
   Ahmed A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P431
   Anand Abhishek, 2017, INT WORKSH COQ PROGR
   [Anonymous], 2006, Lecture Notes in Computer Science, DOI 10.1007/116930246
   [Anonymous], 1992, Compiling with Continuations
   Appel A. W., 1997, Journal of Functional Programming, V7, P515, DOI 10.1017/S0956796897002839
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   Bélanger OS, 2017, PROCEEDINGS OF THE 19TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2017), P49, DOI 10.1145/3131851.3131859
   Bowman WJ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158110
   Chlipala A, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P54, DOI 10.1145/1250734.1250742
   Chlipala A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Danvy O, 2003, THEOR COMPUT SCI, V308, P239, DOI 10.1016/S0304-3975(02)00733-8
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   Dargaye Z, 2007, LECT NOTES ARTIF INT, V4790, P211, DOI 10.1007/978-3-540-75560-9_17
   Griffin T., 1990, P 17 ANN ACM S PRINC, DOI 10.1145/96709.96714
   Harper R., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P206, DOI 10.1145/158511.158630
   Kennedy A, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P177
   KRANZ D, 1986, SIGPLAN NOTICES, V21, P219, DOI 10.1145/13310.13333
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Minamide Y., 1999, Electronic Notes in Theoretical Computer Science, V26, DOI 10.1016/S1571-0661(05)80286-5
   Minamide Yasuhiko., 2003, Proceedings of the 2003 ACM SIGPLAN Workshop on Mechanized Reasoning About Languages with Variable Binding, P1
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Owens S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110262
   Owens S, 2016, LECT NOTES COMPUT SC, V9632, P589, DOI 10.1007/978-3-662-49498-1_23
   Paraskevopoulou Z, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341687
   Paraskevopoulou Zoe, 2021, **DATA OBJECT**, DOI 10.5281/zenodo.5504155
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Pottier Francois, 2017, REVISITING CPS TRANS
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   Steele Guy L, 1978, RABBIT COMPILER SCHE
   Tian YeHenry., 2006, Pro- ceedings of Twelfth Computing: The Australasian Theory Symposium, volume 51 of CRPIT, V51, P41
   Yamada U, 2018, LECT NOTES COMPUT SC, V11275, P375, DOI 10.1007/978-3-030-02768-1_20
NR 33
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 114
DI 10.1145/3485491
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200018
OA gold
DA 2024-07-18
ER

PT J
AU Pitchanathan, A
   Ulmann, C
   Weber, M
   Hoefler, T
   Grosser, T
AF Pitchanathan, Arjun
   Ulmann, Christian
   Weber, Michel
   Hoefler, Torsten
   Grosser, Tobias
TI FPL: Fast Presburger Arithmetic through Transprecision
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Presburger Arithmetic; Integer Sets; Transprecision; Polyhedral
   Compilation
AB Presburger arithmetic provides the mathematical core for the polyhedral compilation techniques that drive analytical cache models, loop optimization for ML and HPC, formal verification, and even hardware design. Polyhedral compilation is widely regarded as being slow due to the potentially high computational cost of the underlying Presburger libraries. Researchers typically use these libraries as powerful black-box tools, but the perceived internal complexity of these libraries, caused by the use of C as the implementation language and a focus on end-user-facing documentation, holds back broader performance-optimization efforts. With FPL, we introduce a new library for Presburger arithmetic built from the ground up in modern C++. We carefully document its internal algorithmic foundations, use lightweight C++ data structures to minimize memory management costs, and deploy transprecision computing across the entire library to effectively exploit machine integers and vector instructions. On a newly-developed comprehensive benchmark suite for Presburger arithmetic, we show a 5.4x speedup in total runtime over the state-of-the-art library isl in its default configuration and 3.6x over a variant of isl optimized with element-wise transprecision computing. We expect that the availability of a well-documented and fast Presburger library will accelerate the adoption of polyhedral compilation techniques in production compilers.
C1 [Pitchanathan, Arjun] IIIT Hyderabad, Hyderabad, India.
   [Ulmann, Christian; Weber, Michel; Hoefler, Torsten] Swiss Fed Inst Technol, Zurich, Switzerland.
   [Grosser, Tobias] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
C3 International Institute of Information Technology Hyderabad; Swiss
   Federal Institutes of Technology Domain; ETH Zurich; University of
   Edinburgh
RP Pitchanathan, A (corresponding author), IIIT Hyderabad, Hyderabad, India.
EM arjun.p@research.iiit.ac.in; christian.ulmann@inf.ethz.ch;
   michel.weber@inf.ethz.ch; torsten.hoefler@inf.ethz.ch;
   tobias.grosser@ed.ac.uk
RI Hoefler, Torsten/HKF-3023-2023; Hoefler, Torsten/AAB-7478-2022
OI Hoefler, Torsten/0000-0002-1333-9797; Grosser,
   Tobias/0000-0003-3874-6003
FU ARM Ltd.; Xilinx Inc.
FX This work has been supported by ARM Ltd. and Xilinx Inc., in the context
   of Polly Labs. We would also like to thank Kunwar Shaanjeet Singh Grover
   for contributing additional enhancements to the library.
CR [Anonymous], 2013, P ACMSIGDA INT S FIE, DOI [DOI 10.1145/2435264.2435273, 10.1145/2435264.2435273]
   Baghdadi R, 2019, INT SYM CODE GENER, P193, DOI [10.5281/zenodo.2375075, 10.1109/CGO.2019.8661197]
   Bagnara R, 2008, SCI COMPUT PROGRAM, V72, P3, DOI 10.1016/j.scico.2007.08.001
   Bazaraa MS., 1977, Linear programming and network flows
   Bondhugula U., 2007, PLUTO PRACTICAL FULL
   Chen TQ, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P579
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   FEAUTRIER P, 1988, RAIRO-RECH OPER, V22, P243
   Fouilhe Alexis, 2015, THESIS U GRENOBLE AL
   Grosser T, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428263
   Grosser T, 2012, PARALLEL PROCESS LET, V22, DOI 10.1142/S0129626412500107
   Grosser Tobias., 2016, Proceedings of the 2016 International Conference on Supercomputing, P1, DOI DOI 10.1145/2925426.2926286
   Gysi T, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P816, DOI 10.1145/3314221.3314606
   Haase Christoph, 2018, ACM SIGLOG News, V5, P67, DOI 10.1145/3242953.3242964
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   Kelly Wayne, 1996, OMEGA CALCULATOR LIB, V20742, P18
   King T, 2014, 2014 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P139, DOI 10.1109/FMCAD.2014.6987606
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lattner C, 2021, INT SYM CODE GENER, P2, DOI 10.1109/CGO51591.2021.9370308
   Loechner, 1999, POLYLIB LIB MANIPULA
   LOVASZ L, 1992, MATH OPER RES, V17, P751, DOI 10.1287/moor.17.3.751
   Meister Benoit., 2011, R-Stream Compiler, P1756, DOI [10.1007/978-0-387-09766-4_515, DOI 10.1007/978-0-387-09766-4_515]
   Namjoshi KS, 2016, LECT NOTES COMPUT SC, V9837, P383, DOI 10.1007/978-3-662-53413-7_19
   Nethercote N, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P89, DOI 10.1145/1250734.1250746
   Olivry A, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P808, DOI 10.1145/3385412.3385989
   Pitchanathan Arjun, 2021, REPLICATION PACKAGE, DOI [10.1145/3462302, DOI 10.1145/3462302]
   Pouchet Louis-Noel, 2012, Polybench: The polyhedral benchmark suite
   Schrijver A., 1998, THEORY LINEAR INTEGE
   SHAMIR R, 1987, MANAGE SCI, V33, P301, DOI 10.1287/mnsc.33.3.301
   Singh G, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2813885.2738000, 10.1145/2737924.2738000]
   Vasilache Nicolas., 2018, Technical report
   Verdoolaege S., 2015, INTEGER SET COALESCI
   Verdoolaege S, 2013, ACM T ARCHIT CODE OP, V9, DOI 10.1145/2400682.2400713
   Verdoolaege S, 2010, LECT NOTES COMPUT SC, V6327, P299, DOI 10.1007/978-3-642-15582-6_49
   Verdoolaege Sven., 2016, Presburger formulas and polyhedral compilation
NR 35
TC 4
Z9 4
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 162
DI 10.1145/3485539
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200064
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Almagor, S
   Karimov, T
   Kelmendi, E
   Ouaknine, J
   Worrell, J
AF Almagor, Shaull
   Karimov, Toghrul
   Kelmendi, Edon
   Ouaknine, Joel
   Worrell, James
TI Deciding ω-Regular Properties on Linear Recurrence Sequences
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE linear loops; linear recurrence sequences; omega-regular properties;
   almost periodic words
ID DECIDABILITY; ORDER; LOGIC
AB We consider the problem of deciding.. -regular properties on infinite traces produced by linear loops. Here we think of a given loop as producing a single infinite trace that encodes information about the signs of program variables at each time step. Formally, our main result is a procedure that inputs a prefix-independent omega-regular property and a sequence of numbers satisfying a linear recurrence, and determines whether the sign description of the sequence (obtained by replacing each positive entry with "+", each negative entry with "-", and each zero entry with "0") satisfies the given property. Our procedure requires that the recurrence be simple, i.e., that the update matrix of the underlying loop be diagonalisable. This assumption is instrumental in proving our key technical lemma: namely that the sign description of a simple linear recurrence sequence is almost periodic in the sense of Muchnik, Semenov, and Ushakov. To complement this lemma, we give an example of a linear recurrence sequence whose sign description fails to be almost periodic. Generalising from sign descriptions, we also consider the verification of properties involving semi-algebraic predicates on program variables.
C1 [Almagor, Shaull] Technion, Haifa, Israel.
   [Karimov, Toghrul; Ouaknine, Joel] Max Planck Inst Software Syst, Saarbrucken, Germany.
   [Kelmendi, Edon; Ouaknine, Joel; Worrell, James] Univ Oxford, Oxford, England.
C3 Technion Israel Institute of Technology; Max Planck Society; University
   of Oxford
RP Almagor, S (corresponding author), Technion, Haifa, Israel.
EM shaull@cs.technion.ac.il; toghs@mpi-sws.org; edon.kelmendi@cs.ox.ac.uk;
   joel@mpi-sws.org; jbw@cs.ox.ac.uk
OI Karimov, Toghrul/0000-0002-9405-2332
FU European Union's Horizon 2020 research and innovation programme under
   the Marie Sklodowska-Curie grant [837327]; ERC [648701]; DFG [389792660,
   TRR 248]; EPSRC Fellowship [EP/N008197/1]; European Research Council
   (ERC) [648701] Funding Source: European Research Council (ERC); Marie
   Curie Actions (MSCA) [837327] Funding Source: Marie Curie Actions
   (MSCA); EPSRC [EP/N008197/1] Funding Source: UKRI
FX Shaull Almagor has received funding from the European Union's Horizon
   2020 research and innovation programme under the Marie Sklodowska-Curie
   grant agreement No. 837327. Joel Ouaknine is supported by ERC grant
   AVS-ISS (648701) and DFG grant 389792660 as part of TRR 248 (see
   https://perspicuous-computing.science).James Worrell is supported by
   EPSRC Fellowship EP/N008197/1.
CR Agrawal M, 2015, J ACM, V62, DOI 10.1145/2629417
   Angluin D, 2021, INFORM COMPUT, V278, DOI 10.1016/j.ic.2020.104598
   [Anonymous], 1978, AUTOMATA THEORETIC A
   [Anonymous], 1951, DECISION METHOD ELEM
   BATEMAN PT, 1993, J SYMBOLIC LOGIC, V58, P672, DOI 10.2307/2275227
   Beauquier D, 2006, J LOGIC COMPUT, V16, P461, DOI 10.1093/logcom/ex1004
   Bell J. P., 2007, ISRAEL J MATH ISRAEL J MATH, V57
   Buchi J.R, 1962, Logic, Methodology and Philosophy of Science
   Carton O, 2002, INFORM COMPUT, V176, P51, DOI 10.1006/inco.2001.3139
   Cassels J.W.S., 1957, An Introduction to Diophantine Approximation
   ELGOT CC, 1966, J SYMBOLIC LOGIC, V31, P169, DOI 10.2307/2269808
   Everest G., 2003, RECURRENCE SEQUENCES, V104, DOI DOI 10.1090/SURV/104
   EVERTSE JH, 1984, COMPOS MATH, V53, P225
   Karimov Toghrul, 2020, 45 INT S MATH FDN CO 45 INT S MATH FDN CO
   Lang S., 1995, Introduction to Diophantine Approximations, Vsecond
   Masser David W, 1988, NEW ADV TRANSCENDENC
   MIGNOTTE M, 1984, J REINE ANGEW MATH, V349, P63
   Morse M, 1938, AM J MATH, V60, P815, DOI 10.2307/2371264
   Muchnik A, 2003, THEOR COMPUT SCI, V304, P1, DOI 10.1016/S0304-3975(02)00847-2
   Ouaknine J, 2014, LECT NOTES COMPUT SC, V8573, P318
   Ouaknine Joel, 2013, P 25 ANN ACM SIAM S P 25 ANN ACM SIAM S, DOI [10.1137/1.9781611973402.27, DOI 10.1137/1.9781611973402.27]
   Ouaknine Joel, 2014, LECT NOTES COMPUTER, V8573
   Perrin Dominique, 2004, INFINITE WORDS AUTOM, DOI [10.1016/s0079-8169(04)x8001-6, DOI 10.1016/S0079-8169(04)X8001-6]
   Rabinovich A, 2007, INFORM COMPUT, V205, P870, DOI 10.1016/j.ic.2006.12.004
   Semenov AlekseiLvovich., 1984, Mathematics of the USSR-Izvestiya, V22, P587, DOI 10.1070/IM1984v022n03ABEH001456
   SHAPIRO HN, 1959, COMMUN PUR APPL MATH, V12, P487, DOI 10.1002/cpa.3160120306
NR 26
TC 8
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 48
DI 10.1145/3434329
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100048
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Batz, K
   Kaminski, BL
   Katoen, JP
   Matheja, C
AF Batz, Kevin
   Kaminski, Benjamin Lucien
   Katoen, Joost-Pieter
   Matheja, Christoph
TI Relatively Complete Verification of Probabilistic Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programs; randomized algorithms; formal verification;
   quantitative verification; completeness; weakest precondition; weakest
   preexpectation
ID SOUNDNESS
AB We study a syntax for specifying quantitative "assertions"-functions mapping program states to numbers-for probabilistic program verification. We prove that our syntax is expressive in the following sense: Given any probabilistic program C, if a function f is expressible in our syntax, then the function mapping each initial state sigma to the expected value of f evaluated in the final states reached after termination of C on sigma (also called the weakest preexpectation wp[C] (f)) is also expressible in our syntax.
   As a consequence, we obtain a relatively complete verification system for reasoning about expected values and probabilities in the sense of Cook: Apart from proving a single inequality between two functions given by syntactic expressions in our language, given f, g, and C, we can check whether g <= wp[C] (f).
C1 [Batz, Kevin; Katoen, Joost-Pieter] Rhein Westfal TH Aachen, Aachen, Germany.
   [Kaminski, Benjamin Lucien] UCL, London, England.
   [Matheja, Christoph] Swiss Fed Inst Technol, Zurich, Switzerland.
C3 RWTH Aachen University; University of London; University College London;
   Swiss Federal Institutes of Technology Domain; ETH Zurich
RP Batz, K (corresponding author), Rhein Westfal TH Aachen, Aachen, Germany.
EM kevin.batz@cs.rwth-aachen.de; b.kaminski@ucl.ac.uk;
   katoen@cs.rwth-aachen.de; cmatheja@inf.ethz.ch
RI Matheja, Christoph/HZK-7338-2023; Katoen, Joost-Pieter/O-3307-2018
OI Matheja, Christoph/0000-0001-9151-0441; Katoen,
   Joost-Pieter/0000-0002-6143-1926; Kaminski, Benjamin
   Lucien/0000-0001-5185-2324; Batz, Kevin/0000-0001-8705-2564
FU ERC [787914]; European Research Council (ERC) [787914] Funding Source:
   European Research Council (ERC)
FX Batz and Katoen are supported by the ERC AdG 787914 FRAPPANT.
CR [Anonymous], 9 ACM SIGPLAN SIGACT
   Apt KR, 2019, FORM ASP COMPUT, V31, P751, DOI 10.1007/s00165-019-00501-3
   Batz Kevin, 2020, RELATIVELY COMPLETE
   Batz Kevin, 2019, P ACM PROGRAM LANG 3, V34, P1
   Bertrand J., 1849, TRAITE ARITHMETIQUE
   Bournez O, 2005, LECT NOTES COMPUT SC, V3467, P323
   Cantor G., 1877, J. Reine Angew. Math, V84, P242
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chatterjee K, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3174800
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Chatterjee K, 2016, ACM SIGPLAN NOTICES, V51, P327, DOI 10.1145/2914770.2837639
   COOK SA, 1978, SIAM J COMPUT, V7, P70, DOI 10.1137/0207005
   Cousot P, 2012, LECT NOTES COMPUT SC, V7211, P169, DOI 10.1007/978-3-642-28869-2_9
   Den Hartog J. I., 2002, International Journal of Foundations of Computer Science, V13, P315, DOI 10.1142/S012905410200114X
   Di Pierro A, 2016, LECT NOTES COMPUT SC, V9560, P111, DOI 10.1007/978-3-319-27810-0_6
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Feng YJ, 2017, LECT NOTES COMPUT SC, V10482, P400, DOI 10.1007/978-3-319-68167-2_26
   Fioriti LMF, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI 10.1145/2676726.2677001
   Flajolet P, 2011, PROCEEDINGS OF THE TWENTY-SECOND ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P172
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   Fu HF, 2019, LECT NOTES COMPUT SC, V11388, P468, DOI 10.1007/978-3-030-11245-5_22
   Godel K., 1931, Monatshefte fur Mathematik und Physik, V38, P173, DOI 10.1007/BF01700692
   Gretz F, 2014, PERFORM EVALUATION, V73, P110, DOI 10.1016/j.peva.2013.11.004
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Huang MZ, 2018, LECT NOTES COMPUT SC, V11275, P181, DOI 10.1007/978-3-030-02768-1_11
   Huang MN., 2019, Oxford Research Encyclopedia of Literature, P1
   Iverson K. E., 1962, A Programming Language
   Kaminski BL, 2019, ACTA INFORM, V56, P255, DOI 10.1007/s00236-018-0321-1
   Kaminski BL, 2018, J ACM, V65, DOI 10.1145/3208102
   Kaminski BL, 2017, IEEE S LOG
   Kaminski BL, 2015, LECT NOTES COMPUT SC, V9234, P307, DOI 10.1007/978-3-662-48057-1_24
   Kaminski Benjamin Lucien, 2019, ADV WEAKEST PRECONDI
   Katoen JP, 2010, LECT NOTES COMPUT SC, V6337, P390, DOI 10.1007/978-3-642-15769-1_24
   Kleene Stephen Cole, 1952, Introduction to Metamathematics, V483
   Kozen D, 2001, INFORM SCIENCES, V139, P187, DOI 10.1016/S0020-0255(01)00164-5
   Kozen D., 1979, 20th Annual Symposium of Foundations of Computer Science, P101, DOI 10.1109/SFCS.1979.38
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Kozen Dexter, 2000, ACM Trans. Comput. Log., V1, P60, DOI DOI 10.1145/343369.343378
   Kozen Dexter, 1983, P ACM S THEORY COMPU, P291, DOI [10.1145/800061.808758, DOI 10.1145/800061.808758]
   Loeckx J., 1984, FDN PROGRAM VERIFICA
   Loeckx Jacques, 1987, FDN PROGRAM VERIFICA, V2nd
   Luke Ong C.-H., 2019, ABS191012634 CORR
   Matheja Christoph., 2020, AUTOMATED REASONING, DOI DOI 10.18154/RWTH-2020-00940
   McIver Annabelle., 2005, MG COMP SCI
   McIver Annabelle, 2018, PACMPL 2 POPL, V33, P1
   Motwani Rajeev, 1999, ALGORITHMS THEORY CO, DOI DOI 10.1201/9781420049503-C16
   Ngo Van Chan, 2018, ACM SIGPLAN NOTICES, DOI [10.1145/3192366.3192394, DOI 10.1145/3192366.3192394]
   Olmedo F, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3156018
   Olmedo F, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P672, DOI 10.1145/2933575.2935317
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Robinson Rob49 J., 1949, The Journal of Symbolic Logic, V14, P98
   Tatsuta M, 2019, INFORM COMPUT, V267, P1, DOI 10.1016/j.ic.2019.03.002
   Tatsuta M, 2009, SEFM 2009: SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P179, DOI 10.1109/SEFM.2009.33
   Winskel G., 1993, The Formal Semantics of Programming Languages
NR 56
TC 10
Z9 10
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 39
DI 10.1145/3434320
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100039
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Vassena, M
   Disselkoen, C
   von Gleissenthall, K
   Cauligi, S
   Jhala, R
   Tullsen, D
   Stefan, D
AF Vassena, Marco
   Disselkoen, Craig
   von Gleissenthall, Klaus
   Cauligi, Sunjay
   Jhala, Ranjit
   Tullsen, Dean
   Stefan, Deian
TI Automatically Eliminating Speculative Leaks from Cryptographic Code with
   Blade
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Speculative execution; Spectre; Constant-time; Type system
AB We introduce Blade, a new approach to automatically and efficiently eliminate speculative leaks from cryptographic code. Blade is built on the insight that to stop leaks via speculative execution, it suffices to cut the dataflow from expressions that speculatively introduce secrets (sources) to those that leak them through the cache (sinks), rather than prohibit speculation altogether. We formalize this insight in a static type system that (1) types each expression as either transient, i.e., possibly containing speculative secrets or as being stable, and (2) prohibits speculative leaks by requiring that all sink expressions are stable. Blade relies on a new abstract primitive, protect, to halt speculation at fine granularity. We formalize and implement protect using existing architectural mechanisms, and show how Blade's type system can automatically synthesize a minimal number of protects to provably eliminate speculative leaks. We implement Blade in the Cranelift WebAssembly compiler and evaluate our approach by repairing several verified, yet vulnerableWebAssembly implementations of cryptographic primitives. We find that Blade can fix existing programs that leak via speculation automatically, without user intervention, and efficiently even when using fences to implement protect.
C1 [Vassena, Marco] CISPA Helmholtz Ctr Informat Secur, Saarbrucken, Germany.
   [Disselkoen, Craig; Cauligi, Sunjay; Jhala, Ranjit; Tullsen, Dean; Stefan, Deian] Univ Calif San Diego, San Diego, CA USA.
   [von Gleissenthall, Klaus] Vrije Univ Amsterdam, Amsterdam, Netherlands.
C3 University of California System; University of California San Diego;
   Vrije Universiteit Amsterdam
RP Vassena, M (corresponding author), CISPA Helmholtz Ctr Informat Secur, Saarbrucken, Germany.
EM marco.vassena@cispa.saarland; cdisselk@cs.ucsd.edu;
   k.freiherrvongleissenthal@vu.nl; scauligi@eng.ucsd.edu;
   jhala@cs.ucsd.edu; tullsen@cs.ucsd.edu; deian@cs.ucsd.edu
OI Tullsen, Dean/0000-0003-3174-9316
FU NSF [CNS-1514435, CCF-1918573]; ONR Grant [N000141512750]; German
   Federal Ministry of Education and Research (BMBF) through funding for
   the CISPAStanford Center for Cybersecurity; CONIX Research Center, one
   of six centers in JUMP, a Semiconductor Research Corporation (SRC)
   program - DARPA; U.S. Department of Defense (DOD) [N000141512750]
   Funding Source: U.S. Department of Defense (DOD)
FX We thank the reviewers and our shepherd Aseem Rastogi for their
   suggestions and insightful comments. Many thanks to Shravan Narayan,
   Ravi Sahita, and Anjo Vahldiek-Oberwagner for fruitful discussions. This
   work was supported in part by gifts from Fastly, Fujitsu, and Cisco; by
   the NSF under Grant Number CNS-1514435 and CCF-1918573; by ONR Grant
   N000141512750; by the German Federal Ministry of Education and Research
   (BMBF) through funding for the CISPAStanford Center for Cybersecurity;
   and, by the CONIX Research Center, one of six centers in JUMP, a
   Semiconductor Research Corporation (SRC) program sponsored by DARPA.
CR Aiken Alex, 1996, STATIC ANAL, P1
   Almeida JB, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1807, DOI 10.1145/3133956.3134078
   Almeida JB, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P53
   AMD, 2018, SOFTW TECHN MAN SPEC
   [Anonymous], 2018, J CRYPTOGR ENG, DOI DOI 10.1007/s13389-016-0141-6
   [Anonymous], 2010, FLOWS NETWORKS
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371075
   Bhattacharyya A, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P785, DOI 10.1145/3319535.3363194
   Bloem R, 2019, LECT NOTES COMPUT SC, V11781, P499, DOI 10.1007/978-3-030-31784-3_29
   Bytecode Alliance, 2020, CRAN COD GEN
   Canella C, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P249
   Carruth Chanandler, 2019, SPECULATIVE LOAD HAR
   Cauligi Sunjay, 2020, P ACM C PROGR LANG D
   Cauligi Sunjay, 2019, PROGRAMMING LANGUAGE
   Cheang Kevin, 2019, P COMP SEC FDN S CSF
   Disselkoen C, 2019, P IEEE S SECUR PRIV, P1238, DOI 10.1109/SP.2019.00047
   Donenfeld Daniel, 2020, MORE SPECTRE MITIGAT
   Google Security Blog, 2010, MIT SPECTR SIT IS CH
   Guanciale R, 2020, CCS '20: PROCEEDINGS OF THE 2020 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1853, DOI 10.1145/3372297.3417246
   Guarnieri Marco, 2020, P IEEE S SEC PRIV SS
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   Heisler Brook, 2020, CRITERION RS STAT DR
   Horn J., 2018, Speculative execution, variant 4: speculative store bypass
   Intel, 2018, RETP BRANCH TARG INJ
   Intel, 2018, Intel Analysis of Speculative Execution Side Channels
   Intel, 2020, OPT MIT APPR LOAD VA
   Kiriansky Vladimir, 2018, ABS180703757 CORR
   Kocher P, 2019, P IEEE S SECUR PRIV, P1, DOI 10.1109/SP.2019.00002
   Koruyeh Esmaeil Mohammadian, 2018, P 12 USENIX C OFF TE, P3
   Landauer J., 1993, 1993 Computer Security Foundations Workshop VI Proceedings (Cat. No.93TH0561-1), P65, DOI 10.1109/CSFW.1993.246638
   Lipp M, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P973
   Maisuradze G, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P2109, DOI 10.1145/3243734.3243761
   McMullen Tyler, 2020, LUCET COMPILER RUNTI
   Moghimi Daniel, 2020, 29 USENIX SEC S USEN
   Myers AC, 2004, P IEEE CSFW, P172, DOI 10.1109/CSFW.2004.1310740
   Nagarakatte S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P245, DOI 10.1145/1542476.1542504
   Nielson HR, 1998, LECT NOTES COMPUT SC, V1383, P109
   Osvik D. A., 2006, P 2006 CRYPT TRACK R
   Pardoe A, 2018, Spectre mitigations in MSVC
   Protzenko Jonathan, 2019, SECURITY PRIVACY
   Reis Charles, 2019, USENIX SEC S
   Schwarz Michael, 2020, P NETW DISTR SYST SE, DOI DOI 10.14722/NDSS.2020.24271
   Shanbhogue V, 2019, PROCEEDINGS OF THE 8TH INTERNATIONAL WORKSHOP ON HARDWARE AND ARCHITECTURAL SUPPORT FOR SECURITY AND PRIVACY, HASP '19, DOI 10.1145/3337167.3337175
   Taram M, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P395, DOI 10.1145/3297858.3304060
   Titzer Ben L., 2019, ABS190205178 CORR
   TKACHENKO V., 2018, 20 30 PERFORMANCE HI
   Tromer E, 2010, J CRYPTOL, V23, P37, DOI 10.1007/s00145-009-9049-y
   Van Bulck Jo, 2020, 41 IEEE S SEC PRIV S
   Vassena Marco, 2020, ABS200500294 CORR
   Venet A, 2004, ACM SIGPLAN NOTICES, V39, P231, DOI 10.1145/996893.996869
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Wang Guanhua, 2018, ABS180705843 CORR
   Watt C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290390
   Wu M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P802, DOI 10.1145/3314221.3314647
   Yan MJ, 2018, 2018 51ST ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO), P428, DOI 10.1109/MICRO.2018.00042
   Yarom Y, 2014, PROCEEDINGS OF THE 23RD USENIX SECURITY SYMPOSIUM, P719
   Yu JY, 2019, MICRO'52: THE 52ND ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, P954, DOI 10.1145/3352460.3358274
   Zinzindohoue Jean-Karim, 2017, ACM C COMP COMM SEC
NR 58
TC 15
Z9 16
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 49
DI 10.1145/3434330
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100049
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Lam, W
   Winter, S
   Wei, AJ
   Xie, T
   Marinov, D
   Bell, J
AF Lam, Wing
   Winter, Stefan
   Wei, Anjiang
   Xie, Tao
   Marinov, Darko
   Bell, Jonathan
TI A Large-Scale Longitudinal Study of Flaky Tests
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE flaky test; regression testing
AB Flaky tests are tests that can non-deterministically pass or fail for the same code version. These tests undermine regression testing efficiency, because developers cannot easily identify whether a test fails due to their recent changes or due to flakiness. Ideally, one would detect flaky tests right when flakiness is introduced, so that developers can then immediately remove the flakiness. Some software organizations, e.g., Mozilla and Netflix, run some tools-detectors-to detect flaky tests as soon as possible. However, detecting flaky tests is costly due to their inherent non-determinism, so even state-of-the-art detectors are often impractical to be used on all tests for each project change. To combat the high cost of applying detectors, these organizations typically run a detector solely on newly added or directly modified tests, i.e., not on unmodified tests or when other changes occur (including changes to the test suite, the code under test, and library dependencies). However, it is unclear how many flaky tests can be detected or missed by applying detectors in only these limited circumstances.
   To better understand this problem, we conduct a large-scale longitudinal study of flaky tests to determine when flaky tests become flaky and what changes cause them to become flaky. We apply two state-of-the-art detectors to 55 Java projects, identifying a total of 245 flaky tests that can be compiled and run in the code version where each test was added. We find that 75% of flaky tests (184 out of 245) are flaky when added, indicating substantial potential value for developers to run detectors specifically on newly added tests. However, running detectors solely on newly added tests would still miss detecting 25% of flaky tests. The percentage of flaky tests that can be detected does increase to 85% when detectors are run on newly added or directly modified tests. The remaining 15% of flaky tests become flaky due to other changes and can be detected only when detectors are always applied to all tests. Our study is the first to empirically evaluate when tests become flaky and to recommend guidelines for applying detectors in the future.
C1 [Lam, Wing; Marinov, Darko] Univ Illinois, Champaign, IL 61820 USA.
   [Winter, Stefan] Tech Univ Darmstadt, Darmstadt, Germany.
   [Wei, Anjiang] Peking Univ, Beijing, Peoples R China.
   [Xie, Tao] Peking Univ, Minist Educ, Key Lab High Confidence Software Technol, Beijing, Peoples R China.
   [Bell, Jonathan] Northeastern Univ, Boston, MA 02115 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   Technical University of Darmstadt; Peking University; Peking University;
   Northeastern University
RP Lam, W (corresponding author), Univ Illinois, Champaign, IL 61820 USA.
EM winglam2@illinois.edu; sw@cs.tu-darmstadt.de; weianjiang@pku.edu.cn;
   taoxie@pku.edu.cn; marinov@illinois.edu; bellj@gmu.edu
RI Winter, Stefan/AAN-1627-2020
OI Winter, Stefan/0000-0001-8244-995X; Xie, Tao/0000-0002-6731-216X
FU NSF [CNS-1564274, CCF-1763788, CCF-1763822, CCF-1816615, CCF-1844880]
FX We thank Pu Yi for helping us inspect specific flaky tests, and Reed Oei
   and August Shi for general discussions about flaky tests. This work was
   partially supported by NSF grant nos. CNS-1564274, CCF-1763788,
   CCF-1763822, CCF-1816615, and CCF-1844880. We acknowledge support for
   research on flaky tests from Facebook and Google.
CR [Anonymous], 2014, P 2014 INT S SOFTW T
   Astorga Angello, 2020, ISSRE
   AvoidingFlakeyTests, 2019, TOTT AV FLAK TESTS
   Bell J, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P799, DOI 10.1145/2635868.2666597
   Bell J, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P433, DOI 10.1145/3180155.3180164
   Bell J, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P550, DOI 10.1145/2568225.2568248
   Burckhardt S, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P167
   Coverity, 2014, STAT ANAL IND
   Croux C, 2010, STAT METHOD APPL-GER, V19, P497, DOI 10.1007/s10260-010-0142-z
   Eck M, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P830, DOI 10.1145/3338906.3338945
   Eloussi L., 2016, Flaky tests (and how to avoid them)
   FacebookFlakyTestCall, 2019, FAC TEST VER REQ PRO
   FlakinessDashboardHOWTO, 2020, FALK DASHB HOWTO
   FlakyTestFICWebsite, 2020, LARG SCAL LONG STUD
   Gambi A, 2018, IEEE INT CONF SOFTW, P1, DOI 10.1109/ICST.2018.00011
   Gao ZB, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P55, DOI 10.1109/ICSE.2015.28
   Gyori Alex., 2015, Proceedings of the 2015 International Symposium on Software Testing and Analysis, P223
   Harman M, 2018, IEEE INT WORK C SO, P1, DOI 10.1109/SCAM.2018.00009
   Harry Brian, 2019, WE APPROACH TESTING
   Herzig K, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P483, DOI 10.1109/ICSE.2015.66
   Huo C, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P621, DOI 10.1145/2635868.2635917
   Infer, 2020, INF STAT ANAL
   JavaModules, 2020, JAV PLATTF MOD SYST
   Jiang H, 2017, PROC INT CONF SOFTW, P712, DOI 10.1109/ICSE.2017.71
   Kowalczyk E, 2020, 2020 IEEE/ACM 42ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP), P110, DOI 10.1145/3377813.3381370
   Lam W, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P101, DOI 10.1145/3293882.3330570
   Lam W, 2019, IEEE INT CONF SOFTW, P312, DOI 10.1109/ICST.2019.00038
   Lam Wing, 2020, ICSE
   Larus Jim, 2004, IEEE SOFTWARE
   Liskov B., 2000, PROGRAM DEV JAVA ABS
   Luo QZ, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P643, DOI 10.1145/2635868.2635920
   Maven, 2020, MAVEN
   Memon A, 2017, 2017 IEEE/ACM 39TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE TRACK (ICSE-SEIP 2017), P233, DOI 10.1109/ICSE-SEIP.2017.16
   Micco John, 2020, CONTINUOUS INTEGRATI
   MozillaChaosMode, 2019, TEST VER
   Muslu Kivanc, 2015, ISSTA
   Muslu Kivanc, 2011, ESEC FSE
   NetflixAutomationTalk, 2017, NETFL AUT TALKS TEST
   Pengyu Nie, 2020, ISSTA '20: Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis, P249, DOI 10.1145/3395363.3397381
   Pinto G, 2020, IEEE WORK CONF MIN S, P492, DOI 10.1145/3379597.3387482
   Rahman MT, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P857, DOI 10.1145/3236024.3275529
   RSpecIssue635, 2020, RSPEC COR ISS
   Sadowski C, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P598, DOI 10.1109/ICSE.2015.76
   Saff D, 2003, ISSRE 2003: 14TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P281, DOI 10.1109/ISSRE.2003.1251050
   Shi A, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P545, DOI 10.1145/3338906.3338925
   Shi A, 2016, IEEE INT CONF SOFTW, P80, DOI 10.1109/ICST.2016.40
   Sudarshan P., 2012, No more flaky tests on the Go team
   Surefire, 2020, MAVEN SUREFIRE PLUGI
   Terragni V, 2020, 2020 IEEE/ACM 42ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: NEW IDEAS AND EMERGING RESULTS (ICSE-NIER 2020), P69, DOI 10.1145/3377816.3381742
   testrunner, 2020, TEST RES CHILL TEST
   Wohlin C., 2012, Experimentation in Software Engineering
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Zeller A, 1999, LECT NOTES COMPUT SC, V1687, P253, DOI 10.1145/318774.318946
   Ziftci C, 2017, 2017 IEEE/ACM 39TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE TRACK (ICSE-SEIP 2017), P113, DOI 10.1109/ICSE-SEIP.2017.13
NR 54
TC 25
Z9 25
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 202
DI 10.1145/3428270
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900079
OA gold
DA 2024-07-18
ER

PT J
AU Liu, MQ
   Rieg, L
   Shao, Z
   Gu, RH
   Costanzo, D
   Kim, JE
   Yoon, MK
AF Liu, Mengqi
   Rieg, Lionel
   Shao, Zhong
   Gu, Ronghui
   Costanzo, David
   Kim, Jung-Eun
   Yoon, Man-Ki
TI Virtual Timeline: A Formal Abstraction for Verifying Preemptive
   Schedulers with Temporal Isolation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE preemptive scheduler; fixed-priority scheduling; partitioned scheduling;
   temporal isolation; formal verification; mechanized proof
ID VERIFICATION
AB The reliability and security of safety-critical real-time systems are of utmost importance because the failure of these systems could incur severe consequences (e.g., loss of lives or failure of a mission). Such properties require strong isolation between components and they rely on enforcement mechanisms provided by the underlying operating system (OS) kernel. In addition to spatial isolation which is commonly provided by OS kernels to various extents, it also requires temporal isolation, that is, properties on the schedule of one component (e.g., schedulability) are independent of behaviors of other components. The strict isolation between components relies critically on algorithmic properties of the concrete implementation of the scheduler, such as timely provision of time slots, obliviousness to preemption, etc. However, existing work either only reasons about an abstract model of the scheduler, or proves properties of the scheduler implementation that are not rich enough to establish the isolation between different components.
   In this paper, we present a novel compositional framework for reasoning about algorithmic properties of the concrete implementation of preemptive schedulers. In particular, we use virtual timeline, a variant of the supply bound function used in real-time scheduling analysis, to specify and reason about the scheduling of each component in isolation. We show that the properties proved on this abstraction carry down to the generated assembly code of the OS kernel. Using this framework, we successfully verify a real-time OS kernel, which extends mCertiKOS, a single-processor non-preemptive kernel, with user-level preemption, a verified timer interrupt handler, and a verified real-time scheduler. We prove that in the absence of microarchitectural-level timing channels, this new kernel enjoys temporal and spatial isolation on top of the functional correctness guarantee. All the proofs are implemented in the Coq proof assistant.
C1 [Liu, Mengqi] Yale Univ, Dept Comp Sci, 51 Prospect St, New Haven, CT 06520 USA.
   [Rieg, Lionel] Univ Grenoble Alpes, CNRS, Grenoble INP, VERIMAG,Inst Engn, F-38000 Grenoble, France.
   [Rieg, Lionel; Shao, Zhong; Costanzo, David; Kim, Jung-Eun; Yoon, Man-Ki] Yale Univ, New Haven, CT 06520 USA.
   [Gu, Ronghui] Columbia Univ, New York, NY USA.
C3 Yale University; Communaute Universite Grenoble Alpes; Institut National
   Polytechnique de Grenoble; Universite Grenoble Alpes (UGA); Centre
   National de la Recherche Scientifique (CNRS); Yale University; Columbia
   University
RP Liu, MQ (corresponding author), Yale Univ, Dept Comp Sci, 51 Prospect St, New Haven, CT 06520 USA.
EM mengqi.liu@yale.edu; lionel.rieg@univ-grenoble-alpes.fr;
   zhong.shao@yale.edu; ronghui.gu@columbia.edu; david.costanzo@gmail.com;
   jung-eun.kim@yale.edu; man-ki.yoon@yale.edu
RI Liu, Meng/GRF-0962-2022
OI Shao, Zhong/0000-0001-8184-7649; Gu, Ronghui/0000-0002-6812-6182
FU NSF grants [1521523, 1715154, 1763399]; DARPA grants [FA8750-16-2-0274,
   FA8750-15-C-0082]; PEPS INS2I JCJC 2019 Vefose grant; Direct For
   Computer & Info Scie & Enginr; Division Of Computer and Network Systems
   [1715154] Funding Source: National Science Foundation; Direct For
   Computer & Info Scie & Enginr; Division of Computing and Communication
   Foundations [1763399, 1521523] Funding Source: National Science
   Foundation
FX We would like to thank anonymous referees for helpful feedbacks that
   improved this paper significantly. This research is based on work
   supported in part by NSF grants 1521523, 1715154, and 1763399 and DARPA
   grants FA8750-16-2-0274 and FA8750-15-C-0082. The second author has been
   partially supported by the PEPS INS2I JCJC 2019 Vefose grant. The U.S.
   Government is authorized to reproduce and distribute reprints for
   Governmental purposes notwithstanding any copyright notation thereon.
   The views and conclusions contained herein are those of the authors and
   should not be interpreted as necessarily representing the official
   policies or endorsements, either expressed or implied, of DARPA or the
   U.S. Government.
CR Andronick J, 2016, LECT NOTES COMPUT SC, V9807, P52, DOI 10.1007/978-3-319-43144-4_4
   Andronick J, 2015, ELECTRON P THEOR COM, P10, DOI 10.4204/EPTCS.196.2
   ARINC, 2015, 653 ARINC 1
   Blackham B., 2011, Proceedings of the 2011 IEEE 32nd Real-Time Systems Symposium (RTSS 2011), P339, DOI 10.1109/RTSS.2011.38
   Blazy S, 2006, LECT NOTES COMPUT SC, V4085, P460
   Cerqueira F, 2016, PROC EUROMICR, P273, DOI 10.1109/ECRTS.2016.28
   Chen H, 2016, ACM SIGPLAN NOTICES, V51, P431, DOI [10.1145/2908080.2908101, 10.1145/2980983.2908101]
   Costanzo D, 2016, ACM SIGPLAN NOTICES, V51, P648, DOI [10.1145/2908080.2908100, 10.1145/2980983.2908100]
   Davis RI, 2005, REAL TIM SYST SYMP P, P389
   Dutertre B, 2000, REAL TIM SYST SYMP P, P151, DOI 10.1109/REAL.2000.896005
   Ge Q, 2019, PROCEEDINGS OF THE FOURTEENTH EUROSYS CONFERENCE 2019 (EUROSYS '19), DOI 10.1145/3302424.3303976
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Guo XJ, 2019, LECT NOTES COMPUT SC, V11562, P496, DOI 10.1007/978-3-030-25543-5_28
   Jane W. S. W. L., 2000, REAL TIME SYSTEMS
   Kim JE, 2015, 21ST IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM (RTAS 2015), P221, DOI 10.1109/RTAS.2015.7108445
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Klein G, 2009, SADHANA-ACAD P ENG S, V34, P27, DOI 10.1007/s12046-009-0002-4
   Labrosse J, 1998, MICROC OS 2
   Labrosse Jean J., 2011, MICROC OS 3
   Lehoczky J., 1989, Proceedings. Real Time Systems Symposium (Cat. No.89CH2803-5), P166, DOI 10.1109/REAL.1989.63567
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Leroy Xavier., 2014, Program Logics for Certified Compilers
   LIU CL, 1973, J ACM, V20, P46, DOI 10.1145/321738.321743
   Lyons A, 2018, EUROSYS '18: PROCEEDINGS OF THE THIRTEENTH EUROSYS CONFERENCE, DOI 10.1145/3190508.3190539
   Murray T, 2013, P IEEE S SECUR PRIV, P415, DOI 10.1109/SP.2013.35
   Nelson L, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P252, DOI 10.1145/3132747.3132748
   Nemati H, 2015, LECT NOTES COMPUT SC, V8939, P578, DOI 10.1007/978-3-662-46078-8_48
   QNX, 2019, NEUTR RTOS
   Richards RJ, 2010, DESIGN AND VERIFICATION OF MICROPROCESSOR SYSTEMS FOR HIGH-ASSURANCE APPLICATIONS, P301, DOI 10.1007/978-1-4419-1539-9_10
   Sewell T, 2017, REAL-TIME SYST, V53, P812, DOI 10.1007/s11241-017-9286-3
   Sewell T, 2013, ACM SIGPLAN NOTICES, V48, P471, DOI 10.1145/2499370.2462183
   Sha L, 2016, COMPUTER, V49, P69, DOI 10.1109/MC.2016.271
   Sigurbjarnarson H, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P287
   Sisu Xi, 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P39
   Sprunt Brinkley, 1989, CMUSEI89TR011
   Wilding M, 1998, LECT NOTES COMPUT SC, V1427, P369, DOI 10.1007/BFb0028759
   Xingyuan Zhang, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P217, DOI 10.1007/978-3-642-32347-8_15
   Xu FW, 2016, LECT NOTES COMPUT SC, V9780, P59, DOI 10.1007/978-3-319-41540-6_4
   Zeldovich N, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P263
   Zhao YW, 2017, FRONT COMPUT SCI-CHI, V11, P585, DOI 10.1007/s11704-016-4226-2
NR 42
TC 10
Z9 11
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 20
DI 10.1145/3371088
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400021
OA gold
DA 2024-07-18
ER

PT J
AU Genç, K
   Roemer, J
   Xu, YF
   Bond, MD
AF Genc, Kaan
   Roemer, Jake
   Xu, Yufan
   Bond, Michael D.
TI Dependence-Aware, Unbounded Sound Predictive Race Detection
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE data race detection; dynamic predictive analysis
ID EFFICIENT; PRECISE; SOFTWARE; PROGRAMS; CHECKING; MODEL
AB Data races are a real problem for parallel software, yet hard to detect. Sound predictive analysis observes a program execution and detects data races that exist in some other, unobserved execution. However, existing predictive analyses miss races because they do not scale to full program executions or do not precisely incorporate data and control dependence.
   This paper introduces two novel, sound predictive approaches that incorporate data and control dependence and handle full program executions. An evaluation using real, large Java programs shows that these approaches detect more data races than the closest related approaches, thus advancing the state of the art in sound predictive race detection.
C1 [Genc, Kaan; Roemer, Jake; Xu, Yufan; Bond, Michael D.] Ohio State Univ, Columbus, OH 43210 USA.
C3 University System of Ohio; Ohio State University
RP Genç, K (corresponding author), Ohio State Univ, Columbus, OH 43210 USA.
EM genc.5@osu.edu; roemer.37@osu.edu; xu.2882@osu.edu;
   mikebond@cse.ohio-state.edu
OI Bond, Michael/0000-0002-8971-4944
FU National Science Foundation [CAREER-1253703, CCF-1421612, XPS-1629126]
FX This material is based upon work supported by the National Science
   Foundation under Grants CAREER-1253703, CCF-1421612, and XPS-1629126.
CR Abadi M, 2006, ACM T PROGR LANG SYS, V28, P207, DOI 10.1145/1119479.1119480
   Adve SV, 2010, COMMUN ACM, V53, P90, DOI 10.1145/1787234.1787255
   Ahn W., 2009, Proceedings of the 2009 42nd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO 2009), P133, DOI 10.1145/1669112.1669131
   [Anonymous], 2013, Runtime Verification, DOI DOI 10.1007/978-3-642
   [Anonymous], 2012, P 2012 ACM WORKSHOP, DOI DOI 10.1145/2414729.2414732
   [Anonymous], 2009, P 1 USENIX C HOT TOP
   Biswas S, 2017, CC'17: PROCEEDINGS OF THE 26TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P11, DOI 10.1145/3033019.3033020
   Biswas S, 2015, ACM SIGPLAN NOTICES, V50, P241, DOI [10.1145/2814270.2814292, 10.1145/2858965.2814292]
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Boehm H.-J., 2014, MSPC, p7:1, DOI DOI 10.1145/2618128.2618134
   Boehm HJ, 2008, ACM SIGPLAN NOTICES, V43, P68, DOI 10.1145/1379022.1375591
   Boehm HJ, 2012, COMMUN ACM, V55, P48, DOI 10.1145/2076450.2076465
   Boehm Hans-J., 2011, HOTPAR, P6
   Bond MD, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P255, DOI 10.1145/1806596.1806626
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Burckhardt S, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P167
   Burnim J., 2011, ISSTA, P122
   Cai Y, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P450, DOI 10.1145/2786805.2786839
   Cao M, 2016, ACM SIGPLAN NOTICES, V51, P99, DOI [10.1145/3241624.2926700, 10.1145/2926697.2926700]
   Chen F, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P221, DOI 10.1145/1368088.1368119
   Choi JD, 2002, ACM SIGPLAN NOTICES, V37, P258, DOI 10.1145/543552.512560
   Devietti J, 2012, CONF PROC INT SYMP C, P201, DOI 10.1109/ISCA.2012.6237018
   DINNING A, 1991, SIGPLAN NOTICES, V26, P85, DOI 10.1145/127695.122767
   Dolan S, 2018, ACM SIGPLAN NOTICES, V53, P242, DOI [10.1145/3192366.3192421, 10.1145/3296979.3192421]
   Effinger-Dean L, 2012, ACM SIGPLAN NOTICES, V47, P467, DOI 10.1145/2398857.2384650
   Elmas T, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P245, DOI 10.1145/1250734.1250762
   Engler D., 2003, Operating Systems Review, V37, P237, DOI 10.1145/1165389.945468
   Erickson J., 2010, OSDI, P1
   Eslamimehr M, 2014, ACM SIGPLAN NOTICES, V49, P301, DOI [10.1145/2692916.2555263, 10.1145/2555243.2555263]
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Flanagan C, 2007, SCI COMPUT PROGRAM, V64, P140, DOI 10.1016/j.scico.2006.03.006
   Flanagan C, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P244, DOI 10.1145/1806596.1806625
   Flanagan C, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P121, DOI 10.1145/1542476.1542490
   Flanagan Cormac, 2017, FASTRACK2 RACE DETEC
   Flanagan Cormac, PASTE, P1
   Genc Kaan, 2019, DEPENDENCE AWARE UNB, V3088
   Giffhorn D, 2008, EIGHTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P267, DOI 10.1109/SCAM.2008.17
   Henzinger TA, 2004, ACM SIGPLAN NOTICES, V39, P1, DOI 10.1145/996893.996844
   Huang J, 2016, ACM SIGPLAN NOTICES, V51, P462, DOI 10.1145/3022671.2984024
   Huang J, 2015, ACM SIGPLAN NOTICES, V50, P165, DOI [10.1145/2737924.2737975, 10.1145/2813885.2737975]
   Huang Shiyou, 2017, 31 EUR C OBJ OR PROG, DOI 10.4230/LIPIcs.ECOOP.2017.16
   Intel Corporation, 2016, INT INSP
   Kasikci B, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P406, DOI 10.1145/2517349.2522736
   Kasikci B, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2734118
   Kasikci B, 2012, ASPLOS XVII: SEVENTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P185
   Kini D, 2017, ACM SIGPLAN NOTICES, V52, P157, DOI [10.1145/3062341.3062374, 10.1145/3140587.3062374]
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lee D, 2012, ACM SIGPLAN NOTICES, V47, P463, DOI 10.1145/2345156.2254119
   LEVESON NG, 1993, COMPUTER, V26, P18, DOI 10.1109/MC.1993.274940
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Liu P., 2016, P 25 INT S SOFTW TES, P59, DOI [10.1145/2931037.2931046, DOI 10.1145/2931037.2931046]
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Lucia B, 2010, CONF PROC INT SYMP C, P210, DOI 10.1145/1816038.1815987
   Luo Peng., 2018, J. Supercomputing
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Marino D, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P199
   Marino D, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P351, DOI 10.1145/1806596.1806636
   Marino D, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P134, DOI 10.1145/1542476.1542491
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Mattern F., 1989, Parallel and Distributed Algorithms. Proceedings of the International Workshop, P215
   Musuvathi M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P446, DOI 10.1145/1250734.1250785
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Naik M, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P327
   Narayanasamy S, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P22, DOI 10.1145/1250734.1250738
   Nishiyama H., 2004, Virtual Machine Research and Technology Symposium, P127
   O'Callahan R., 2003, SIGPLAN Notices, V38, P166, DOI 10.1145/966049.781528
   Ouyang Jessica., 2013, HOTPAR
   Pavlogiannis A., 2019, ARXIV190108857
   PCWorld, 2012, NASD FACEB GLITCH CA
   Peng YF, 2017, 50TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO), P490, DOI 10.1145/3123939.3123946
   Pozniansky E, 2007, CONCURR COMP-PRACT E, V19, P327, DOI 10.1002/cpe.1064
   Pratikakis P, 2006, ACM SIGPLAN NOTICES, V41, P320, DOI 10.1145/1133981.1134019
   Rinard MC, 1998, ACM T PROGR LANG SYS, V20, P483, DOI 10.1145/291889.291893
   Roemer J, 2018, ACM SIGPLAN NOTICES, V53, P374, DOI [10.1145/3296979.3192385, 10.1145/3192366.3192385]
   Roemer Jake, 2019, ABS190708337 CORR, V8337
   Roemer Jake, 2019, ABS190500494 CORR, V0494
   Said M, 2011, LECT NOTES COMPUT SC, V6617, P313, DOI 10.1007/978-3-642-20398-5_23
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   Segulja C, 2015, 2015 ACM/IEEE 42ND ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA), P401, DOI 10.1145/2749469.2750395
   Sen K, 2008, ACM SIGPLAN NOTICES, V43, P11, DOI 10.1145/1379022.1375584
   Sengupta A, 2015, ACM SIGPLAN NOTICES, V50, P561, DOI [10.1145/2694344.2694379, 10.1145/2775054.2694379]
   Serebryany K., 2011, RV, P110, DOI [10.1007/978-3-642-29860-8_9, 10.1007/, DOI 10.1007/978-3-642-29860-8_9]
   Serebryany Konstantin, 2009, Proceedings of the Workshop on Binary Instrumentation and Applications, WBIA'09, P62, DOI DOI 10.1145/1791194.1791203
   Sevcík J, 2008, LECT NOTES COMPUT SC, V5142, P27, DOI 10.1007/978-3-540-70592-5_3
   Sheng TW, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P401, DOI 10.1145/1985793.1985848
   Singh A, 2012, CONF PROC INT SYMP C, P524, DOI 10.1109/ISCA.2012.6237045
   Singh A, 2011, ACM SIGPLAN NOTICES, V46, P53, DOI 10.1145/1961296.1950375
   Smaragdakis Y, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P387
   Sura Z., 2005, Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, PPoPP '05, P2, DOI DOI 10.1145/1065944.1065947
   U.S.sCanada Power System Outage Task Force, 2004, FIN REP AUG 14 BLACK
   Veeraraghavan K, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P369
   von Praun C, 2003, ACM SIGPLAN NOTICES, V38, P115, DOI 10.1145/780822.781145
   von Praun C, 2001, ACM SIGPLAN NOTICES, V36, P70, DOI 10.1145/504311.504288
   Voung J. W., 2007, P 6 JOINT M EUROPEAN, P205
   Wood BP, 2014, ACM SIGPLAN NOTICES, V49, P671, DOI 10.1145/2541940.2541955
   Yu Y., 2005, P 20 ACM S OP SYST P, P221
   Zhang T, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P149, DOI 10.1145/3037697.3037708
   Zhivich M, 2009, IEEE SECUR PRIV, V7, P87, DOI 10.1109/MSP.2009.56
   Zhou P, 2007, INT S HIGH PERF COMP, P121
NR 99
TC 11
Z9 11
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 179
DI 10.1145/3360605
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500064
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Konnov, I
   Kukovec, J
   Tran, TH
AF Konnov, Igor
   Kukovec, Jure
   Tran, Thanh-Hai
TI TLA+ Model Checking Made Symbolic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Model checking; TLA(+); SMT
ID CARDINALITIES; REDUCTION; TLA(+)
AB TLA(+) is a language for formal specification of all kinds of computer systems. System designers use this language to specify concurrent, distributed, and fault-tolerant protocols, which are traditionally presented in pseudo-code. TLA(+) is extremely concise yet expressive: The language primitives include Booleans, integers, functions, tuples, records, sequences, and sets thereof, which can be also nested. This is probably why the only model checker for TLA(+) (called TLC) relies on explicit enumeration of values and states.
   In this paper, we present APALACHE - a first symbolic model checker for TLA(+). Like TLC, it assumes that all specification parameters are fixed and all states are finite structures. Unlike TLC, APALACHE translates the underlying transition relation into quantifier-free SMT constraints, which allows us to exploit the power of SMT solvers. Designing this translation is the central challenge that we address in this paper. Our experiments show that APALACHE outperforms TLC on examples with large state spaces.
C1 [Konnov, Igor] Univ Lorraine, INRIA, LORIA, CNRS,VeriDis, 615 Rue Jardin Bot, F-54602 Nancy, France.
   [Kukovec, Jure; Tran, Thanh-Hai] TU Wien, Inst Log & Computat 192 4, Favoritenstr 9-11, A-1040 Vienna, Austria.
C3 Inria; Centre National de la Recherche Scientifique (CNRS); Universite
   de Lorraine; Technische Universitat Wien
RP Konnov, I (corresponding author), Univ Lorraine, INRIA, LORIA, CNRS,VeriDis, 615 Rue Jardin Bot, F-54602 Nancy, France.
EM igor.konnov@inria.fr; jkukovec@forsyte.at; tran@forsyte.at
RI Konnov, Igor V/M-2947-2013
OI Konnov, Igor/0000-0001-6629-3377
FU Vienna Science and Technology Fund (WWTF) through project APALACHE
   [ICT15-103]; Austrian Science Fund (FWF) [P27722]; Doctoral College
   LogiCS [W1255-N23]; CNRS; RENATER; Austrian Science Fund (FWF) [P27722]
   Funding Source: Austrian Science Fund (FWF)
FX Supported by the Vienna Science and Technology Fund (WWTF) through
   project APALACHE (ICT15-103) and the Austrian Science Fund (FWF) through
   project PRAVDA (P27722) and Doctoral College LogiCS (W1255-N23).
   Experiments presented in this paper were carried out using the Grid5000
   testbed, supported by a scientific interest group hosted by Inria and
   including CNRS, RENATER and several Universities as well as other
   organizations, see http://grid5000.fr.
CR Abbassi A, 2018, IEEE INT WORKSH MODE, P11, DOI 10.1109/MoDRE.2018.00008
   Alloy B, 2018, 6 INT ABZ C ASM ALL
   [Anonymous], 1990, SYSTEMATIC SOFTWARE
   [Anonymous], 2005, B BOOK ASSIGNING PRO
   Attiya H., 2004, Distributed computing: fundamentals, simulations, and advanced topics, V19
   Azmy N, 2018, SCI COMPUT PROGRAM, V158, P64, DOI 10.1016/j.scico.2017.08.003
   Ball T, 2001, ACM SIGPLAN NOTICES, V36, P203, DOI 10.1145/381694.378846
   Barnett M, 2005, LECT NOTES COMPUT SC, V3362, P49
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Barrett C., 2017, Technical Report
   Behm P, 1999, LECT NOTES COMPUT SC, V1708, P369
   Berkovits I, 2019, LECT NOTES COMPUT SC, V11562, P245, DOI 10.1007/978-3-030-25543-5_15
   Bertot Yves, 2013, Interactive theorem proving and program development: Coq'Art: the calculus of inductive constructions
   Blanchette JC, 2013, J AUTOM REASONING, V51, P109, DOI 10.1007/s10817-013-9278-5
   Carlsson M., 1988, SICSTUS PROLOG USERS, V3
   Cavada R, 2014, LECT NOTES COMPUT SC, V8559, P334, DOI 10.1007/978-3-319-08867-9_22
   Champion A, 2016, LECT NOTES COMPUT SC, V9780, P510, DOI 10.1007/978-3-319-41540-6_29
   Chaudhuri K, 2010, LECT NOTES COMPUT SC, V6255, P44, DOI 10.1007/978-3-642-14808-8_3
   Cimatti A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P359
   Clarke E, 2003, J ACM, V50, P752, DOI 10.1145/876638.876643
   Cohen E, 1998, LECT NOTES COMPUT SC, V1466, P317, DOI 10.1007/BFb0055631
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   Cristiá M, 2016, LECT NOTES COMPUT SC, V9779, P179, DOI 10.1007/978-3-319-41528-4_10
   Damian A, 2019, LECT NOTES COMPUT SC, V11562, P344, DOI 10.1007/978-3-030-25543-5_20
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Delzanno G, 2014, ELECTRON P THEOR COM, P131, DOI 10.4204/EPTCS.161.13
   Dragoi C, 2016, ACM SIGPLAN NOTICES, V51, P400, DOI [10.1145/2837614.2837650, 10.1145/2914770.2837650]
   Dragoi C, 2014, LECT NOTES COMPUT SC, V8318, P161, DOI 10.1007/978-3-642-54013-4_10
   Ekici B, 2017, LECT NOTES COMPUT SC, V10427, P126, DOI 10.1007/978-3-319-63390-9_7
   El Ghazi Aboubakr Achraf, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P133, DOI 10.1007/978-3-642-21437-0_12
   Farzan A, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P185, DOI 10.1145/2933575.2935310
   Gafni E, 2003, DISTRIB COMPUT, V16, P1, DOI [10.1007/s00446-002-0070-8, 10.1007/S00446-002-0070-8]
   Garland S. J., 1998, MITLCSTR762
   Gleissenthall KV, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290372
   Gleissenthall KV, 2016, ACM SIGPLAN NOTICES, V51, P599, DOI [10.1145/2908080.2908129, 10.1145/2980983.2908129]
   Gray J, 2006, ACM T DATABASE SYST, V31, P133, DOI 10.1145/1132863.1132867
   Guerraoui R, 2010, EUROSYS'10: PROCEEDINGS OF THE EUROSYS 2010 CONFERENCE, P363
   Gustafson Jason, 2019, KAFKA IMPROVEMENT PR
   Hansen Dominik, 2012, Integrated Formal Methods. Proceedings 9th International Conference, IFM 2012, P24, DOI 10.1007/978-3-642-30729-4_3
   Hawblitzel C, 2017, COMMUN ACM, V60, P83, DOI 10.1145/3068608
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Holzmann Gerard J., 2003, The SPIN Model Checker
   Howard Heidi, 2016, OPODIS, V25
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Konnov I, 2017, FORM METHOD SYST DES, V51, P270, DOI 10.1007/s10703-017-0297-4
   Konnov I, 2017, ACM SIGPLAN NOTICES, V52, P719, DOI 10.1145/3093333.3009860
   Konnov Igor, 2019, APALACHE MODEL CHECK
   Krings Sebastian, 2018, Abstract State Machines, Alloy, B, TLA, VDM, and Z. 6th International Conference, ABZ 2018. Proceedings: LNCS 10817, P71, DOI 10.1007/978-3-319-91271-4_6
   Kukovec Jure, 2018, Abstract State Machines, Alloy, B, TLA, VDM, and Z. 6th International Conference, ABZ 2018. Proceedings: LNCS 10817, P89, DOI 10.1007/978-3-319-91271-4_7
   Kuncak V, 2005, LECT NOTES ARTIF INT, V3632, P260
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   Lamport L., 2001, SIGACT News, V32, P51
   Lamport L., 2018, TLA 2 PRELIMINARY GU
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Lamport L, 2011, LECT NOTES COMPUT SC, V6950, P211, DOI 10.1007/978-3-642-24100-0_22
   Lampson Butler, 1979, Crash Recovery in a Distributed Data Storage System
   Leino KRM., 2008, manuscript KRML, V178, P9
   Leuschel Michael, 2008, International Journal on Software Tools for Technology Transfer, V10, P185, DOI 10.1007/s10009-007-0063-9
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   LYNCH NA, 1989, INFORM COMPUT, V82, P81, DOI 10.1016/0890-5401(89)90066-7
   Macedo N, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P373, DOI 10.1145/2950290.2950318
   Macedo Nuno, 2016, ARXIV PREPRINT ARXIV
   Maric O, 2017, LECT NOTES COMPUT SC, V10427, P217, DOI 10.1007/978-3-319-63390-9_12
   McMillan Kenneth L., 1993, SYMBOLIC MODEL CHECK, P61
   Meier Simon, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P696, DOI 10.1007/978-3-642-39799-8_48
   Meng BL, 2017, LECT NOTES ARTIF INT, V10395, P148, DOI 10.1007/978-3-319-63046-5_10
   Merz S, 2003, COMPUT INFORM, V22, P351
   Merz S, 2018, SCI COMPUT PROGRAM, V158, P3, DOI 10.1016/j.scico.2017.09.004
   Merz S, 2012, LECT NOTES COMPUT SC, V7180, P289, DOI 10.1007/978-3-642-28717-6_23
   Merz S, 2008, MONOGR THEOR COMPUT, P401, DOI 10.1007/978-3-540-74107-7_8
   Moraru I, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P358, DOI 10.1145/2517349.2517350
   Newcombe C, 2015, COMMUN ACM, V58, P66, DOI 10.1145/2699417
   Newcombe C, 2014, LECT NOTES COMPUT SC, V8477, P25, DOI 10.1007/978-3-662-43652-3_3
   Nipkow Tobias, 2002, ISABELLEHOL PROOF AS, V2283
   Ongaro Diego, 2014, PhD thesis
   Padon O, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3140568
   Paulson LC, 2007, LECT NOTES COMPUT SC, V4732, P232
   Plagge Daniel, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P372, DOI 10.1007/978-3-642-32759-9_31
   Rahli V, 2017, SCI COMPUT PROGRAM, V148, P26, DOI 10.1016/j.scico.2017.05.009
   Raynal M., 2010, COMMUNICATION AGREEM, DOI DOI 10.2200/S00236ED1V01Y201004DCT002
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sergey Ilya, 2018, POPL 2018, V2
   Spivey J.M., 1992, THE Z NOTATION
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Tinelli Cesare, 2018, LOG METH COMPUT SCI, V14
   TLAPlus, 2019, COLL TLA SPEC VAR CO
   Tortak E, 2007, LECT NOTES COMPUT SC, V4424, P632
   Wayne Hillel, 2018, PRACTICAL TLA
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Yessenov K, 2010, LECT NOTES COMPUT SC, V5944, P380, DOI 10.1007/978-3-642-11319-2_27
   Yu Y, 1999, LECT NOTES COMPUT SC, V1703, P54
   Zave P, 2015, FORM ASP COMPUT, V27, P239, DOI 10.1007/s00165-014-0302-2
   Zave P, 2012, ACM SIGCOMM COMP COM, V42, P50, DOI 10.1145/2185376.2185383
NR 94
TC 22
Z9 23
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 123
DI 10.1145/3360549
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500008
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Delaware, B
   Suriyakarn, S
   Pit-Claudel, C
   Ye, QCA
   Chlipala, A
AF Delaware, Benjamin
   Suriyakarn, Sorawit
   Pit-Claudel, Clement
   Ye, Qianchuan
   Chlipala, Adam
TI NARCISSUS: Correct-by-Construction Derivation of Decoders and Encoders
   from Binary Formats
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Deductive Synthesis; Parser Combinators; Program Synthesis;
   Serialization and Deserialization
AB It is a neat result from functional programming that libraries of parser combinatory can support rapid construction of decoders for quite a range of formats. With a little more work, the same combinator program can denote both a decoder and an encoder. Unfortunately, the real world is full of gnarly formats, as with the packet formats that make up the standard Internet protocol stack. Most past parser-combinator approaches cannot handle these formats, and the few exceptions require redundancy - one part of the natural grammar needs to be hand-translated into hints in multiple parts of a parser program. We show how to recover very natural and nonredundant format specifications, covering all popular network packet formats and generating both decoders and encoders automatically. The catch is that we use the Coq proof assistant to derive both kinds of artifacts using tactics, automatically, in a way that guarantees that they form inverses of each other. We used our approach to reimplement packet processing for a full Internet protocol stack, inserting our replacement into the OCaml-based MirageOS unikernel, resulting in minimal performance degradation.
C1 [Delaware, Benjamin; Ye, Qianchuan] Purdue Univ, W Lafayette, IN 47907 USA.
   [Suriyakarn, Sorawit] Band Protocol, Bangkok, Thailand.
   [Pit-Claudel, Clement; Chlipala, Adam] MIT CSAIL, Cambridge, MA USA.
C3 Purdue University System; Purdue University; Massachusetts Institute of
   Technology (MIT)
RP Delaware, B (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM bendy@purdue.edu; swit@bandprotocol.com; cpitcla@csail.mit.edu;
   ye202@purdue.edu; adamc@csail.mit
RI Pit-Claudel, Clément/HLP-4607-2023
OI Ye, Qianchuan/0000-0002-5977-5236; Pit-Claudel,
   Clement/0000-0002-1900-3901
FU NSF [CCF-1512611, CCF-1521584]; DARPA [FA8750-16-C-0007]
FX This work has been supported in part by NSF grants CCF-1512611 and
   CCF-1521584, and by DARPA under agreement number FA8750-16-C-0007. The
   U.S. Government is authorized to reproduce and distribute reprints for
   Governmental purposes notwithstanding any copyright notation thereon.
   The views and conclusions contained herein are those of the authors and
   should not be interpreted as necessarily representing the official
   policies or endorsements, either expressed or implied, of DARPA or the
   U.S. Government.
CR Alimarine A., 2005, P 2005 ACM SIGPLAN W, P86
   Amin Nada, 2017, ACM SIGPLAN Notices, V52, P859, DOI 10.1145/3093333.3009867
   [Anonymous], 2016, CVE20165080
   [Anonymous], 2012, INT C SOFTWARE ENG F
   [Anonymous], 2015, CVE20150618
   [Anonymous], 2013, CVE20131203
   [Anonymous], 2013, CVE20125965
   [Anonymous], 2017, SCHLOSS DAGSTUHL LEI, DOI DOI 10.4230/LIPICS.SNAPL
   Apache Software Foundation, 2016, AP AVR 1 8 0 DOC
   Back G, 2002, LECT NOTES COMPUT SC, V2487, P66
   Bangert Julian, 2014, 11 USENIX S OPERATIN, P615
   Barthwal A, 2009, LECT NOTES COMPUT SC, V5502, P160, DOI 10.1007/978-3-642-00590-9_12
   Bernardy JP, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(2:6)2016
   Bohannon A, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P407, DOI 10.1145/1328438.1328487
   Danielsson Nils Anders, 2013, P 2013 ACM SIGPLAN W, p1S12, DOI [10.1145/2502409.2502410, DOI 10.1145/2502409.2502410]
   Delaware B, 2015, ACM SIGPLAN NOTICES, V50, P689, DOI [10.1145/2775051.2677006, 10.1145/2676726.2677006]
   Dijkstra W, 1967, CONSTRUCTIVE APPROAC
   Dockins R, 2016, LECT NOTES COMPUT SC, V9971, P56, DOI 10.1007/978-3-319-48869-1_5
   Dubuisson O., 2001, ASN. 1: communication between heterogeneous systems
   Fisher K, 2006, ACM SIGPLAN NOTICES, V41, P2, DOI 10.1145/1111320.1111039
   Fisher K, 2005, ACM SIGPLAN NOTICES, V40, P295, DOI 10.1145/1064978.1065046
   Fonseca P, 2017, PROCEEDINGS OF THE TWELFTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS 2017), P328, DOI 10.1145/3064176.3064163
   Foster JN, 2008, ACM SIGPLAN NOTICES, V43, P383, DOI 10.1145/1411203.1411257
   Hardin Christopher S., 2013, CORE BENCH MICROBENC
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Itzhaky S, 2016, ACM SIGPLAN NOTICES, V51, P145, DOI 10.1145/3022671.2983993
   Johnson StephenC., 1979, YACC YET ANOTHER COM
   Jourdan JH, 2012, LECT NOTES COMPUT SC, V7211, P397, DOI 10.1007/978-3-642-28869-2_20
   Kennedy AJ, 2004, J FUNCT PROGRAM, V14, P727, DOI 10.1017/S0956796804005209
   Kneuss E, 2013, ACM SIGPLAN NOTICES, V48, P407, DOI [10.1145/2509136.2509555, 10.1145/2544173.2509555]
   Ko HS, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158129
   Ko HS, 2016, PEPM'16: PROCEEDINGS OF THE 2016 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P61, DOI 10.1145/2847538.2847544
   Koprowski A, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:18)2011
   Leijen Daan, 2001, Technical Report
   Madhavapeddy A, 2013, ACM SIGPLAN NOTICES, V48, P461, DOI 10.1145/2499368.2451167
   MANNA Z, 1979, IEEE T SOFTWARE ENG, V5, P294, DOI 10.1109/TSE.1979.234198
   Matsuda K, 2018, NEW GENERAT COMPUT, V36, P173, DOI 10.1007/s00354-018-0033-7
   McCann PJ, 2000, ACM SIGCOMM COMP COM, V30, P321, DOI 10.1145/347057.347563
   Miltner A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158089
   Mockapetris Paul, 1987, RFC 1035
   Morrisett G, 2012, ACM SIGPLAN NOTICES, V47, P395, DOI 10.1145/2345156.2254111
   Mu SC, 2004, LECT NOTES COMPUT SC, V3125, P289
   Pang R., 2006, IMC, P289
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   Pavlovic D, 2010, LECT NOTES COMPUT SC, V6120, P353, DOI 10.1007/978-3-642-13321-3_20
   Protzenko J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110261
   Rendel T, 2010, ACM SIGPLAN NOTICES, V45, P1
   Ridge Tom, 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P103
   Simmons Keith, 2016, CHEERIOS
   Smith D.R., 2008, SYNTHESIS PROPOSITIO
   Srinivas Y. V., 1995, Mathematics of Program Construction. Third International Conference, MPC '95 Proceedings, P399
   Srinivasan R., 1995, XDR: External Data Representation Standard. RFC 1832, DOI [10.17487/RFC1832, DOI 10.17487/RFC1832]
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Tan G, 2018, J AUTOM REASONING, V60, P257, DOI 10.1007/s10817-017-9429-1
   The Coq Development Team, 2018, The Coq ProofAssistant, version 8.7.2, DOI 10.5281/zenodo.1174360
   Tullsen M, 2018, LECT NOTES COMPUT SC, V10982, P413, DOI 10.1007/978-3-319-96142-2_25
   van Geest M, 2017, PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE' 17), P30, DOI 10.1145/3122975.3122979
   Varda Kenton, 2008, PROTOCOL BUFFERS
   Vytiniotis D, 2010, ACM SIGPLAN NOTICES, V45, P15, DOI 10.1145/1932681.1863548
   Ye QC, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P222, DOI 10.1145/3293880.3294105
NR 60
TC 16
Z9 17
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 82
DI 10.1145/3341686
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900005
OA gold
DA 2024-07-18
ER

PT J
AU Bonchi, F
   Holland, J
   Piedeleu, R
   Sobocinski, P
   Zanasi, F
AF Bonchi, Filippo
   Holland, Joshua
   Piedeleu, Robin
   Sobocinski, Pawel
   Zanasi, Fabio
TI Diagrammatic Algebra: From Linear to Concurrent Systems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE String Diagrams; props; Completeness; Petri Nets; Category Theory;
   Concurrency
AB We introduce the resource calculus, a string diagrammatic language for concurrent systems. Significantly, it uses the same syntax and operational semantics as the signal flow calculus - an algebraic formalism for signal flow graphs, which is a combinatorial model of computation of interest in control theory. Indeed, our approach stems from the simple but fruitful observation that, by replacing real numbers (modelling signals) with natural numbers (modelling resources) in the operational semantics, concurrent behaviour patterns emerge.
   The resource calculus is canonical: we equip it and its stateful extension with equational theories that characterise the underlying space of definable behaviours-a convex algebraic universe of additive relationsvia isomorphisms of categories. Finally, we demonstrate that our calculus is sufficiently expressive to capture behaviour definable by classical Petri nets.
C1 [Bonchi, Filippo] Univ Pisa, Pisa, Italy.
   [Holland, Joshua; Sobocinski, Pawel] Univ Southampton, Elect & Comp Sci, Southampton, Hants, England.
   [Piedeleu, Robin] Univ Oxford, Dept Comp Sci, Oxford, England.
   [Zanasi, Fabio] UCL, Dept Comp Sci, London, England.
C3 University of Pisa; University of Southampton; University of Oxford;
   University of London; University College London
RP Holland, J (corresponding author), Univ Southampton, Elect & Comp Sci, Southampton, Hants, England.
EM j.holland@soton.ac.uk; ps@ecs.soton.ac.uk; f.zanasi@ucl.a.c.uk
RI Bonchi, Filippo/E-7955-2018
OI Zanasi, Fabio/0000-0001-6457-1345
FU AFOSR; EPSRC [EP/R020604/1]; EPSRC [EP/R020604/1] Funding Source: UKRI
FX Partially supported by AFOSR.; Partially supported by EPSRC grant n.
   EP/R020604/1.
CR Abramsky S, 2014, ABS14014973 CORR
   [Anonymous], 1993, DECADE CONCURRENCY R, DOI DOI 10.1007/3-540-58043-3_25
   [Anonymous], 2014, P JOINT M 23 EACSL A
   Baez JC, 2015, THEOR APPL CATEG, V30, P836
   Baldan P, 2005, MATH STRUCT COMP SCI, V15, P1, DOI 10.1017/S0960129504004311
   Bonchi Filippo, 2014, CONCUR 2014 - Concurrency Theory. 25th International Conference, CONCUR 2014. Proceedings: LNCS 8704, P435, DOI 10.1007/978-3-662-44584-6_30
   Bonchi F, 2017, INFORM COMPUT, V252, P2, DOI 10.1016/j.ic.2016.03.002
   Bonchi F, 2017, J PURE APPL ALGEBRA, V221, P144, DOI 10.1016/j.jpaa.2016.06.002
   Bonchi F, 2015, ACM SIGPLAN NOTICES, V50, P515, DOI [10.1145/2775051.2676993, 10.1145/2676726.2676993]
   Bonchi Filippo, 2017, 28 INT C CONCURRENCY, DOI DOI 10.4230/LIPICS.CONCUR.2017.24
   Bruni R., 2001, RELMIS 2001
   Bruni R, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(3:16)2013
   Bruni R, 2011, LECT NOTES COMPUT SC, V6901, P312, DOI 10.1007/978-3-642-23217-6_21
   CARBONI A, 1987, J PURE APPL ALGEBRA, V49, P11, DOI 10.1016/0022-4049(87)90121-6
   Coecke B., 2017, PICTURING QUANTUM PR, DOI DOI 10.1017/9781316219317
   Coecke B, 2013, MATH STRUCT COMP SCI, V23, P555, DOI 10.1017/S0960129512000047
   Coecke B, 2011, NEW J PHYS, V13, DOI 10.1088/1367-2630/13/4/043016
   Coya B, 2017, THEOR APPL CATEG, V32, P380
   Dickson LE, 1913, AM J MATH, V35, P413, DOI 10.2307/2370405
   Fong B, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P495, DOI 10.1145/2933575.2934556
   Katis P, 1997, J PURE APPL ALGEBRA, V115, P141, DOI 10.1016/S0022-4049(96)00012-6
   Kock Joachim, 2003, Frobenius Algebras and 2-D Topological Quantum Field Theories
   Lack S., 2004, Theory Appl. Categ., V13, P147
   Mason Samuel J., 1953, FEEDBACK THEORY SOME
   Mazurkiewicz Antoni, 1987, LNCS, V340, P307, DOI [10.1007/3-540-50580-6_35, DOI 10.1007/3-540-50580-6_35]
   Nielsen M., 1995, CONCUR '95: Concurrency Theory. 6th International Conference. Proceedings, P175
   Pavlovic Dusko, 2017, ARXIV PREPRINT ARXIV
   Reisig W, 2009, LECT NOTES COMPUT SC, V5606, P23, DOI 10.1007/978-3-642-02424-5_4
   Selinger P, 2011, LECT NOTES PHYS, V813, P289, DOI 10.1007/978-3-642-12821-9_4
   Shannon C. E., 1942, THEORY DESIGN LINEAR
   VANGLABBEEK RJ, 1990, LECT NOTES COMPUT SC, V458, P278, DOI 10.1007/BFb0039066
   Willems JC, 2007, IEEE CONTR SYST MAG, V27, P46, DOI 10.1109/MCS.2007.906923
   Zanasi F., 2015, THESIS ECOLE NORMALE
   Zanasi F, 2016, ELECTRON NOTES THEOR, V325, P313, DOI 10.1016/j.entcs.2016.09.046
NR 34
TC 14
Z9 14
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 25
DI 10.1145/3290338
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300025
OA gold, Green Published, Green Accepted
DA 2024-07-18
ER

PT J
AU Meyer, R
   Wolff, S
AF Meyer, Roland
   Wolff, Sebastian
TI Decoupling Lock-Free Data Structures from Memory Reclamation for Static
   Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE static analysis; lock-free data structures; verification;
   linearizability; safe memory reclamation; memory management
AB Verification of concurrent data structures is one of the most challenging tasks in software verification. The topic has received considerable attention over the course of the last decade. Nevertheless, human-driven techniques remain cumbersome and notoriously difficult while automated approaches suffer from limited applicability. The main obstacle for automation is the complexity of concurrent data structures. This is particularly true in the absence of garbage collection. The intricacy of lock-free memory management paired with the complexity of concurrent data structures makes automated verification prohibitive.
   In this work we present a method for verifying concurrent data structures arid their memory management separately. We suggest two simpler verification tasks that imply the correctness of the data structure. The first task establishes an over-approximation of the reclamation behavior of the memory management. The second task exploits this over-approximation to verify the data structure without the need to consider the implementation of the memory management itself. To make the resulting verification tasks tractable for automated techniques, we establish a second result. We show that a verification tool needs to consider only executions where a single memory location is reused. We implemented our approach and were able to verify linearizability of Michael&Scott's queue and the DGLM queue for both hazard pointers and epoch-based reclamation. To the best of our knowledge, we are the first to verify such implementations fully automatically.
C1 [Meyer, Roland; Wolff, Sebastian] TU Braunschweig, Braunschweig, Germany.
C3 Braunschweig University of Technology
RP Meyer, R (corresponding author), TU Braunschweig, Braunschweig, Germany.
EM roland.meyer@tu-bs.de; sebastian.wolff@tu-bs.de
OI Wolff, Sebastian/0000-0002-3974-7713
CR Abdulla PA, 2016, LECT NOTES COMPUT SC, V9837, P61, DOI 10.1007/978-3-662-53413-7_4
   Abdulla PA, 2013, LECT NOTES COMPUT SC, V7795, P324, DOI 10.1007/978-3-642-36742-7_23
   Abdulla Parosh Aziz, 2017, STTT, V19, DOI DOI 10.1007/S10009-016-0415-4
   Aghazadeh Z, 2014, PROCEEDINGS OF THE 2014 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC'14), P385, DOI 10.1145/2611462.2611483
   Alglave Jade, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P141, DOI 10.1007/978-3-642-39799-8_9
   Alistarh D, 2015, SPAA'15: PROCEEDINGS OF THE 27TH ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P123, DOI 10.1145/2755573.2755600
   Alistarh Dan, 2014, EUROSYS, V25, DOI [10.1145/2592798, DOI 10.1145/2592798]
   Amit Daphna., 2007, CAV LNCS, V4590, DOI [10.1007/978-3-540-73368-3_49, DOI 10.1007/978-3-540-73368-3_49]
   [Anonymous], 2001, DISC
   Bäumler S, 2011, FORM ASP COMPUT, V23, P91, DOI 10.1007/s00165-009-0130-y
   Balmau Oana., 2016, P 28 ACM S PARALLELI, P349
   Berdine Josh., 2008, CAV LNCS, V5123, DOI [10.1007/978-3- 540-70545- 1_37, DOI 10.1007/978-3-540-70545-1_37]
   Braginsky A., 2013, P 25 ANN ACM S PAR A, P33
   Brown T, 2015, PODC'15: PROCEEDINGS OF THE 2015 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P261, DOI 10.1145/2767386.2767436
   Burckhardt S, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P330, DOI 10.1145/1806596.1806634
   Cerny P, 2010, LECT NOTES COMPUT SC, V6174, P465, DOI 10.1007/978-3-642-14295-6_41
   Cohen N, 2015, SPAA'15: PROCEEDINGS OF THE 27TH ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P254, DOI 10.1145/2755573.2755579
   Cohen N, 2015, ACM SIGPLAN NOTICES, V50, P260, DOI [10.1145/2814270.2814298, 10.1145/2858965.2814298]
   Colvin R, 2005, ELECTRON NOTES THEOR, V137, P93, DOI 10.1016/j.entcs.2005.04.026
   Colvin Robert., 2006, CAV LNCS, V4144, DOI [10.1007/11817963_44, DOI 10.1007/11817963_44]
   Delbianco German Andres, 2017, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V74, DOI [10.4230/LIPIcs.ECOOP.2017.8, DOI 10.4230/LIPICS.ECOOP.2017.8]
   Derrick J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1889997.1890001
   Desnoyers Mathieu, 2013, Operating Systems Review, V47, P51
   Detlefs David L, 2001, P 20 ANN ACM S PRINC, P190
   Dice D, 2016, ACM SIGPLAN NOTICES, V51, P36, DOI [10.1145/3241624.2926699, 10.1145/2926697.2926699]
   Dodds M, 2015, ACM SIGPLAN NOTICES, V50, P233, DOI [10.1145/2676726.2676963, 10.1145/2775051.2676963]
   Doherty S, 2004, LECT NOTES COMPUT SC, V3235, P97
   Doherty Simon, 2004, SPAA, DOI [10.1145/1007912.1007945, DOI 10.1145/1007912.1007945]
   Doherty Simon., 2009, LNCS, V5805, DOI [10.1007/978-3-642-04355-0_28, DOI 10.1007/978-3-642-04355-0_28]
   Dongol Brijesh., 2014, ABS14106268 CORR
   Dragojevic Aleksandar, 2011, PODC, DOI [10.1145/1993806.1993821, DOI 10.1145/1993806.1993821]
   Elmas Tayfun., 2010, TACAS LNCS, V6015, DOI [10.1007/978-3-642-12002-2_25, DOI 10.1007/978-3-642-12002-2_25]
   Emmi M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158113
   Emmi M, 2015, ACM SIGPLAN NOTICES, V50, P260, DOI [10.1145/2813885.2737983, 10.1145/2737924.2737983]
   Fraser Keir, 2004, Ph.D. Dissertation
   Fu M, 2010, LECT NOTES COMPUT SC, V6269, P388, DOI 10.1007/978-3-642-15375-4_27
   Gidenstam Anders., 2005, ISPAN, DOI [10.1109/ISPAN.2005.42, DOI 10.1109/ISPAN.2005.42]
   Gotsman A, 2013, LECT NOTES COMPUT SC, V7792, P249, DOI 10.1007/978-3-642-37036-6_15
   Groves Lindsay, 2007, ICECCS, DOI [10.1109/ICECCS.2007.39, DOI 10.1109/ICECCS.2007.39]
   Groves Lindsay., 2008, CATS CRPIT, V77
   HaosenWen Joseph Izraelevitz, 2018, PPOPP, p1S13, DOI [10.1145/3178487.3178488, DOI 10.1145/3178487.3178488]
   Haziza F, 2016, LECT NOTES COMPUT SC, V9583, P393, DOI 10.1007/978-3-662-49122-5_19
   Hemed N, 2015, LECT NOTES COMPUT SC, V9363, P371, DOI 10.1007/978-3-662-48653-5_25
   Henzinger Thomas A., 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P242, DOI 10.1007/978-3-642-40184-8_18
   Herlihy M, 2005, ACM T COMPUT SYST, V23, P146, DOI 10.1145/1062247.1062249
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Holík L, 2017, LECT NOTES COMPUT SC, V10422, P169, DOI 10.1007/978-3-319-66706-5_9
   Horn A, 2015, LECT NOTES COMPUT SC, V9039, P50, DOI 10.1007/978-3-319-19195-9_4
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Jonsson B, 2012, FORM ASP COMPUT, V24, P537, DOI 10.1007/s00165-012-0250-7
   Khyzha Artem, 2017, ESOP LNCS, V10201, DOI [10.1007/978-3-662-54434-1_24, DOI 10.1007/978-3-662-54434-1_24]
   Kokologiannakis M, 2017, SPIN'17: PROCEEDINGS OF THE 24TH ACM SIGSOFT INTERNATIONAL SPIN SYMPOSIUM ON MODEL CHECKING OF SOFTWARE, P172, DOI 10.1145/3092282.3092287
   Krishna S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158125
   Liang HJ, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2576235
   Liang Hongjin, 2012, POPL, DOI [10.1145/2103656.2103711, DOI 10.1145/2103656.2103711]
   Liang Hongjin, 2013, PLDI, DOI [10.1145/2462156.2462189, DOI 10.1145/2462156.2462189]
   Liang LL, 2018, DES AUT TEST EUROPE, P61, DOI 10.23919/DATE.2018.8341980
   Liu Y, 2013, IEEE T SOFTWARE ENG, V39, P1018, DOI 10.1109/TSE.2012.82
   Liu Y, 2009, LECT NOTES COMPUT SC, V5850, P321
   Lowe G, 2017, CONCURR COMP-PRACT E, V29, DOI 10.1002/cpe.3928
   McKenney P. E., 1998, PARALLEL DISTRIBUTED, V509518
   McKenney Paul E., 2004, PhD thesis
   Meyer Roland., 2018, ABS181010807 CORR
   Michael M., 1995, Correction of a Memory Management Method for Lock-Free Data Structures
   Michael M. M., 1996, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, P267, DOI 10.1145/248052.248106
   Michael Maged M., 2002, P 21 ANN S PRINC DIS, P21, DOI [10.1145/571825.571829, DOI 10.1145/571825.571829]
   O'Hearn PW, 2010, PODC 2010: PROCEEDINGS OF THE 2010 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P85, DOI 10.1145/1835698.1835722
   Parkinson Matthew J., 2007, POPL, DOI [10.1145/1190216.1190261, DOI 10.1145/1190216.1190261]
   Ramalhete P, 2017, PROCEEDINGS OF THE 29TH ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES (SPAA'17), P367, DOI 10.1145/3087556.3087588
   Schellhorn Gerhard., 2012, CAV LNCS, V7358, DOI [10.1007/978-3-642-31424-7_21, DOI 10.1007/978-3-642-31424-7_21]
   Segalov M, 2009, LECT NOTES COMPUT SC, V5904, P30, DOI 10.1007/978-3-642-10672-9_5
   Sergey I, 2015, LECT NOTES COMPUT SC, V9032, P333, DOI 10.1007/978-3-662-46669-8_14
   Sergey I, 2015, ACM SIGPLAN NOTICES, V50, P77, DOI [10.1145/2813885.2737964, 10.1145/2737924.2737964]
   Sethi Divjyot., 2013, LNCS, V7976, DOI [10.1007/978-3-642-39176-7_20, DOI 10.1007/978-3-642-39176-7_20]
   Tassarotti J, 2015, ACM SIGPLAN NOTICES, V50, P110, DOI [10.1145/2737924.2737992, 10.1145/2813885.2737992]
   Tofan Bogdan., 2011, LNCS, V6916, DOI [10.1007/978-3-642-23283-1_16, DOI 10.1007/978-3-642-23283-1_16]
   Travkin Oleg., 2013, LNCS, V8244, DOI [10.1007/978-3-319-03077-7_21, DOI 10.1007/978-3-319-03077-7_21]
   Treiber RK, 1986, 5118 RJ IBM
   Vafeiadis V, 2010, LECT NOTES COMPUT SC, V6174, P450, DOI 10.1007/978-3-642-14295-6_40
   Vafeiadis Viktor., LNCS, V5944, DOI [10.1007/978-3-642-11319-2_25, DOI 10.1007/978-3-642-11319-2_25]
   Vardi Moshe Y., 1987, LICS
   Vechev M, 2009, LECT NOTES COMPUT SC, V5578, P261, DOI 10.1007/978-3-642-02652-2_21
   Vechev M, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P125, DOI 10.1145/1375581.1375598
   Yang Albert Mingkun, 2017, ISMM, p14S24, DOI [10.1145/3092255.3092274, DOI 10.1145/3092255.3092274]
   Yang Xiaoxiao., 2017, ABS170106104 CORR
   Zhang SJ, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1185, DOI 10.1145/1985793.1986037
   Zhu H, 2015, LECT NOTES COMPUT SC, V9207, P3, DOI 10.1007/978-3-319-21668-3_1
NR 87
TC 8
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 58
DI 10.1145/3290371
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300058
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Toman, J
   Grossman, D
AF Toman, John
   Grossman, Dan
TI CONCERTO: A Framework for Combined Concrete and Abstract Interpretation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE abstract interpretation; state separation; reflection; framework-based
   applications; metaprogramming
ID MODEL
AB interpretation promises sound but computable static summarization of program behavior. However, modern software engineering practices pose significant challenges to this vision, specifically the extensive use of frameworks and complex libraries. Frameworks heavily use reflection, metaprogramming, and multiple layers of abstraction, all of which confound even state-of-the-art abstract interpreters. Sound but conservative analysis of frameworks is impractically imprecise, and unsoundly ignoring reflection and metaprogramming is untenable given the prevalence of these features. Manually modeling framework behaviors offers excellent precision, at the cost of immense effort by the tool designer.
   To overcome the above difficulties, we present CONCERTO, a system for analyzing framework-based applications by soundly combining concrete and abstract interpretation. CONCERTO analyzes framework implementations using concrete interpretation, and application code using abstract interpretation. This technique is possible in practice as framework implementations typically follow a single path of execution when provided a concrete, application-specific configuration file which is often available at analysis time. CONCERTO exploits this configuration information to precisely resolve reflection and other metaprogramming idioms during concrete execution. In contrast, application code may have infinitely many paths of execution, so CONCERTO switches to abstract interpretation to analyze application code. CONCERTO is an analysis framework, and can be instantiated with any abstract interpretation that satisfies a small set of preconditions. In addition, unlike manual modeling, CONCERTO is not specialized to any specific framework implementation. We have formalized our approach and proved several important properties including soundness and termination. In addition, we have implemented an initial proof of concept prototype of CONCERTO for a subset of Java, and found that our combined interpretation significantly improves analysis precision and performance.
C1 [Toman, John; Grossman, Dan] Univ Washington, Seattle, WA 98195 USA.
C3 University of Washington; University of Washington Seattle
RP Toman, J (corresponding author), Univ Washington, Seattle, WA 98195 USA.
EM jtoman@cs.washington.edu; djg@cs.washington.edu
FU DARPA [FA8750-16-2-0032]
FX We thank James Wilcox, Ben Hardekopf, Bill Harris, James Bornholt, and
   Jared Roesch for their comments on early drafts of this work. Thanks
   also to Pavel Panchekha for his insight on our proofs. Finally, we thank
   the anonymous reviewers, in particular our shepherd, for their comments
   and feedback on this work. This material is based upon work supported in
   part by DARPA under agreement number FA8750-16-2-0032.
CR [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Avgerinos T, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1083, DOI 10.1145/2568225.2568293
   Balzarotti D, 2008, P IEEE S SECUR PRIV, P387, DOI 10.1109/SP.2008.22
   Barros P, 2015, IEEE INT CONF AUTOM, P669, DOI 10.1109/ASE.2015.69
   Blackshear Sam, 2015, SOAP
   Bodden E, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P241, DOI 10.1145/1985793.1985827
   Bourdoncle F., 1993, FORMAL METHODS PROGR
   Brat Guillaume, 2000, WORKSH ADV VER
   Brauer Jorg, 2010, WORKSH SOFTW COMP
   Brown Matt., 2017, Proc. ACM Program. Lang, V2, P14
   Cadar C., 2008, Proc. USENIX OSDI
   Chipounov V, 2011, ACM SIGPLAN NOTICES, V46, P265, DOI [10.1145/1961296.1950396, 10.1145/1961295.1950396]
   Chugh R., 2009, PLDI
   COUSOT P, 1979, PAC J MATH, V82, P43, DOI 10.2140/pjm.1979.82.43
   COUSOT P, 1992, J LOGIC PROGRAM, V13, P103, DOI 10.1016/0743-1066(92)90030-7
   Cousot P., 2005, ESOP
   Cousot P., 1979, POPL
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1992, J LOGIC COMPUT, V2, P4
   Cousot Patrick, 1977, 88
   Cousot Radhia, 2006, ANN AS COMP SCI C
   Csallner C, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348254
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   DEUTSCH A, 1994, SIGPLAN NOTICES, V29, P230, DOI 10.1145/773473.178263
   Dufour Bruno, 2007, ISSTA
   Fahndrich Manuel, 2010, FORMAL VERIFICATION
   Ferrara P, 2010, LECT NOTES COMPUT SC, V6117, P186, DOI 10.1007/978-3-642-13464-7_15
   Ferrara Pietro., 2014, VMCAI
   Fink SJ, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348255
   Fowler M, 2004, INVERSION CONTROL CO
   Futamura Y., 1999, Higher-Order and Symbolic Computation, V12, P381, DOI 10.1023/A:1010095604496
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Grech Neville, 2017, P ACM PROGR LANG
   Jones Neil D., 1979, POPL
   KAM JB, 1977, ACTA INFORM, V7, P305, DOI 10.1007/BF00290339
   Kastrinis George, 2015, ASPLAS
   Ko Y, 2015, IEEE INT CONF AUTOM, P541, DOI 10.1109/ASE.2015.28
   Lam MonicaS., 2008, PARTIAL EVALUATION S
   Laviron V, 2009, LECT NOTES COMPUT SC, V5403, P229, DOI 10.1007/978-3-540-93900-9_20
   Li Y, 2015, LECT NOTES COMPUT SC, V9291, P162, DOI 10.1007/978-3-662-48288-9_10
   Logozzo F, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P184
   Mogensen Torben, 1995, S PART EV SEM BAS PR
   Nielson Flemming., 1985, 4th Hungarian Computer Science Conference, P211
   Ren BriannaM., 2016, PLDI
   Sen K, 2006, LECT NOTES COMPUT SC, V4144, P419
   Sen Koushik, 2005, ESEC FSE
   Sridharan M., 2011, OOPSLA
   Sullivan GT, 2001, LECT NOTES COMPUT SC, V2053, P238
   Sundaresan V, 2000, ACM SIGPLAN NOTICES, V35, P264, DOI 10.1145/354222.353189
   Tarski Alfred, 1955, PAC J MATH, V5, P2
   Toubhans Antoine., 2013, VMCAI
   Wei Shiyi, 2013, ISSTA
   Zanioli Matteo, 2012, S APPL COMP
NR 54
TC 5
Z9 6
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 43
DI 10.1145/3290356
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300043
OA gold
DA 2024-07-18
ER

PT J
AU Liu, JY
   Zhu, FM
   He, F
AF Liu, Jiangyi
   Zhu, Fengmin
   He, Fei
TI Automated Ambiguity Detection in Layout-Sensitive Grammars
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE layout-sensitive grammar; ambiguity; SMT; Coq
ID LANGUAGES
AB Layout-sensitive grammars have been adopted in many modern programming languages. In a serious language design phase, the specified syntax-typically a grammar-must be unambiguous. Although checking ambiguity is undecidable for context-free grammars and (trivially also) layout-sensitive grammars, ambiguity detection, on the other hand, is possible and can benefit language designers from exposing potential design flaws.
   In this paper, we tackle the ambiguity detection problem in layout-sensitive grammars. Inspired by a previous work on checking the bounded ambiguity of context-free grammars via SAT solving, we intensively extend their approach to support layout-sensitive grammars but via SMT solving to express the ordering and quantitative relations over line/column numbers. Our key novelty lies in a reachability condition, which takes the impact of layout constraints on ambiguity into careful account. With this condition in hand, we propose an equivalent ambiguity notion called local ambiguity for the convenience of SMT encoding. We translate local ambiguity into an SMT formula and developed a bounded ambiguity checker that automatically finds a shortest nonempty ambiguous sentence (if exists) for a user-input grammar. The soundness and completeness of our SMT encoding are mechanized in the Coq proof assistant. We conducted an evaluation on both grammar fragments and full grammars extracted from the language manuals of domain-specific languages like YAML as well as general-purpose languages like Python, which reveals the effectiveness of our approach.
C1 [Liu, Jiangyi; Zhu, Fengmin] Tsinghua Univ, Beijing, Peoples R China.
   [Zhu, Fengmin] CISPA Helmholtz Ctr Informat Secur, Saarbrucken, Germany.
   [He, Fei] Tsinghua Univ, Key Lab Informat Syst Secur, Minist Educ, Beijing, Peoples R China.
   [He, Fei] Beijing Natl Res Ctr Informat Sci & Technol, Beijing, Peoples R China.
C3 Tsinghua University; Tsinghua University
RP He, F (corresponding author), Tsinghua Univ, Key Lab Informat Syst Secur, Minist Educ, Beijing, Peoples R China.; He, F (corresponding author), Beijing Natl Res Ctr Informat Sci & Technol, Beijing, Peoples R China.
OI He, Fei/0000-0002-4266-875X; Liu, Jiangyi/0000-0001-6525-4659
FU National Natural Science Foundation of China [62072267, 62021002]
FX This work was supported in part by the National Natural Science
   Foundation of China (Grant No. 62072267 and Grant No. 62021002).
CR Adams MD, 2013, ACM SIGPLAN NOTICES, V48, P511, DOI 10.1145/2480359.2429129
   Afroozeh A, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P267, DOI 10.1145/2892208.2892234
   Afroozeh Ali., 2015, PROC ACM INT S NEW I, DOI DOI 10.1145/2814228.2814242
   Aho Alfred V., 1986, Addison Wesley, V7, P9
   Amorim LED, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING (SLE '18), P3, DOI 10.1145/3276604.3276607
   Axelsson R, 2008, LECT NOTES COMPUT SC, V5126, P410, DOI 10.1007/978-3-540-70583-3_34
   Bastani O, 2017, ACM SIGPLAN NOTICES, V52, P95, DOI [10.1145/3062341.3062349, 10.1145/3140587.3062349]
   Basten HJS, 2016, LECT NOTES COMPUT SC, V9840, P1, DOI 10.1007/978-3-662-53132-7_1
   Brachthäuser JI, 2016, ACM SIGPLAN NOTICES, V51, P588, DOI [10.1145/2983990.2984026, 10.1145/3022671.2984026]
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Chomsky Noam, 1959, Studies in Logic and the Foundations of Mathematics, V26, P118, DOI [10.1016/S0049-237X(09)70104-1, DOI 10.1016/S0049-237X(09)70104-1]
   css-tricks.com, 2012, Chris Coyier
   Erdweg Sebastian, 2013, Software Language Engineering, P244
   Evans Clark C, 2014, Yaml: Yaml ain't markup language
   Godefroid P, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P206, DOI 10.1145/1375581.1375607
   Gopinath R, 2021, PROC INT CONF SOFTW, P699, DOI 10.1109/ICSE43902.2021.00070
   Gruber John, 2012, Markdown: Syntax, P640
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Holler Christian, 2012, P 21 USENIX C SEC S, P445
   Hopcroft JE., 2008, Introduction to automata theory, languages, and computation
   Jim T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P417, DOI 10.1145/1706299.1706347
   Klint Paul, 1994, Tech. Rep. 126-1994, P1
   KNUTH DE, 1965, INFORM CONTROL, V8, P607, DOI 10.1016/S0019-9958(65)90426-2
   LANDIN PJ, 1966, COMMUN ACM, V9, P157, DOI 10.1145/365230.365257
   Lange Martin, 2009, Informatica Didactica., V8, P1
   Leung A, 2015, ACM SIGPLAN NOTICES, V50, P565, DOI [10.1145/2813885.2738002, 10.1145/2737924.2738002]
   Lindig C., 2005, AADEBUG, P3
   Madhavan R, 2015, ACM SIGPLAN NOTICES, V50, P183, DOI [10.1145/2814270.2814304, 10.1145/2858965.2814304]
   Majumdar Rupak, 2007, 22 IEEE ACM INT C AU, P134
   Marlow Simon, 2010, Haskell 2010 language report
   Mathis B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P548, DOI 10.1145/3314221.3314651
   Mernik M., 2003, PROC ACM S APPL COMP, P1063, DOI DOI 10.1145/952532.952740
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Steinhöfel D, 2022, PROCEEDINGS OF THE 30TH ACM JOINT MEETING EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, ESEC/FSE 2022, P583, DOI 10.1145/3540250.3549139
   Syme Don, 2010, The F# 2.0 language specification
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Thorup M, 1996, ACTA INFORM, V33, P511, DOI 10.1007/s002360050055
   vansRossum G., 2011, PYTHON LANGUAGE REFE
   Vasudevan N, 2013, LECT NOTES COMPUT SC, V8225, P157, DOI 10.1007/978-3-319-02654-1_9
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   YOUNGER DH, 1967, INFORM CONTROL, V10, P189, DOI 10.1016/S0019-9958(67)80007-X
   Zeller A., 2019, The fuzzing book
   Zhu Fengmin, 2023, Automated Ambiguity Detection in LayoutSensitive Grammars, DOI [10.5281/zenodo.8329981, DOI 10.5281/ZENODO.8329981]
   Zhu Fengmin, 2023, Automated Ambiguity Detection in LayoutSensitive Grammars
NR 44
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 262
DI 10.1145/3622838
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100042
OA gold
DA 2024-07-18
ER

PT J
AU Sieczkowski, F
   Pyzik, M
   Biernacki, D
AF Sieczkowski, Filip
   Pyzik, Mateusz
   Biernacki, Dariusz
TI A General Fine-Grained Reduction Theory for Effect Handlers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE algebraic effect; delimited continuation; reduction; normalization
ID UNTYPED NORMALIZATION
AB Effect handlers are a modern and increasingly popular approach to structuring computational effects in functional programming languages. However, while their traditional operational semantics is well-suited to implementation tasks, it is less ideal as a reduction theory. We therefore introduce a fine-grained reduction theory for deep effect handlers, inspired by our existing reduction theory for shift0, along with a standard reduction strategy. We relate this strategy to the traditional, non-local operational semantics via a simulation argument, and show that the reduction theory preserves observational equivalence with respect to the classical semantics of handlers, thus allowing its use as a rewriting theory for handler-equipped programming languages - this rewriting system mostly coincides with previously studied type-based optimisations. In the process, we establish theoretical properties of our reduction theory, including confluence and standardisation theorems, adapting and extending existing techniques. Finally, we demonstrate the utility of our semantics by providing the first normalisation-by-evaluation algorithm for effect handlers, and prove its soundness and completeness. Additionally, we establish non-expressibility of the lift operator, found in some effect-handler calculi, by the other constructs.
C1 [Sieczkowski, Filip] Heriot Watt Univ, Sch Math & Comp Sci, Lochside Walk, Edinburgh EH14 4AS, Midlothian, Scotland.
   [Pyzik, Mateusz; Biernacki, Dariusz] Univ Wroclaw, Inst Comp Sci, Joliot Curie 15, PL-50383 Wroclaw, Poland.
C3 Heriot Watt University; University of Wroclaw
RP Sieczkowski, F (corresponding author), Heriot Watt Univ, Sch Math & Comp Sci, Lochside Walk, Edinburgh EH14 4AS, Midlothian, Scotland.
EM f.sieczkowski@hw.ac.uk; mateusz.pyzik@cs.uni.wroc.pl;
   dabi@cs.uni.wroc.pl
OI Biernacki, Dariusz/0000-0002-1477-4635
FU National Science Centre of Poland [2019/33/B/ST6/00289]
FX We thank the anonymous reviewers for their valuable comments on the
   presentation of our results, and in particular on related work. Thanks
   are also due to James McKinna for valuable discussions, particularly on
   the standardisation theorem. This work was partially funded by the
   National Science Centre of Poland, under grant number
   2019/33/B/ST6/00289.
CR Abel Andreas, 2013, Habilitation thesis
   Aczel Peter, 1978, Technical Report
   Aehlig K, 2004, MATH STRUCT COMP SCI, V14, P587, DOI 10.1017/S096012950400427X
   Ager Mads Sig, 2003, P 5 ACM SIGPLAN INT, P8
   Ahman D, 2013, ELECTRON NOTES THEOR, V298, P51, DOI 10.1016/j.entcs.2013.09.007
   Barendregt H.P., 1985, STUDIES LOGIC FDN MA, V103
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Biernacka M, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:5)2005
   Biernacka M, 2020, LECT NOTES COMPUT SC, V12470, P147, DOI 10.1007/978-3-030-64437-6_8
   Biernacki D, 2021, PROCEEDINGS OF THE 23RD INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, PPDP 2021, DOI 10.1145/3479394.3479399
   Biernacki D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158096
   Biernacki D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290319
   Biernacki Dariusz, 2020, LIPIcs, V167, DOI DOI 10.4230/LIPICS.FSCD.2020.7
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Charatonik W., 2017, 2 INT C FORMAL STRUC, p10:1, DOI DOI 10.4230/LIPICS.FSCD.2017.10
   Convent L, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000039
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Danvy O., 2004, Tech. Rep. RS-04-26
   Dyvbig RK, 2007, J FUNCT PROGRAM, V17, P687, DOI 10.1017/S0956796807006259
   Felleisen M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P180, DOI 10.1145/73560.73576
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   Felleisen M., 1986, Proceedings of the Symposium on Logic in Computer Science (Cat. No.86CH2321-8), P131
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Felleisen Matthias, 1986, P IFIP TC 2WG22 WORK
   Filinski A, 2005, RAIRO-THEOR INF APPL, V39, P423, DOI 10.1051/ita:2005026
   García-Pérez A, 2014, SCI COMPUT PROGRAM, V95, P176, DOI 10.1016/j.scico.2014.05.011
   Grégoire B, 2002, ACM SIGPLAN NOTICES, V37, P235, DOI 10.1145/583852.581501
   Harper R., 1993, Journal of Functional Programming, V3, P465, DOI 10.1017/S095679680000085X
   Hillerström D, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000040
   KAHN G, 1987, LECT NOTES COMPUT SC, V247, P22
   Karachalias G, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485479
   Kiselyov O, 2007, LECT NOTES COMPUT SC, V4583, P223
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Materzok M, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P81
   Materzok Marek, 2013, LIPIcs, V23, P521, DOI [DOI 10.4230/LIPICS.CSL.2013, 10.4230/LIPIcs.CSL.2013.521, DOI 10.4230/LIPICS.CSL.2013.521]
   McKinna J, 1999, J AUTOM REASONING, V23, P373, DOI 10.1023/A:1006294005493
   McKinna James, 2022, Lecture Notes from the Scottish Programming Languages and Verification Summer School (SPLV 2022
   McLaughlin Craig, 2020, Ph. D. Dissertation, DOI [10.7488/era/537, DOI 10.7488/ERA/537]
   MITSCHKE G, 1979, Z MATH LOGIK, V25, P29, DOI 10.1002/malq.19790250104
   Pirog Maciej, 2019, FSCD SCHLOSS DAGSTUH, V30, P1, DOI 10.4230/LIPICS.FSCD.2019.30
   Plotkin Gordon, 2004, Electronic Notes in Theoretical Computer Science, V73, P149, DOI DOI 10.1016/J.ENTCS.2004.08.008
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P363, DOI 10.1023/A:1010027404223
   Reynolds J.C., 1998, Theories of Programming Languages
   Saleh Amr Hany, 2019, Ph. D. Dissertation. Arenberg Doctoral School
   Schuster P, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P566, DOI 10.1145/3519939.3523710
   Sieczkowski Filip, 2023, Zenodo, DOI 10.5281/ZENODO.7993545
   TAKAHASHI M, 1995, INFORM COMPUT, V118, P120, DOI 10.1006/inco.1995.1057
   van Raamsdonk F., 1993, Rewriting Techniques and Applications. 5th International Conference, RTA-93 Proceedings, P168
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
NR 52
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 206
DI 10.1145/3607848
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900019
OA gold
DA 2024-07-18
ER

PT J
AU Gopinathan, K
   Keoliya, M
   Sergey, I
AF Gopinathan, Kiran
   Keoliya, Mayank
   Sergey, Ilya
TI Mostly Automated Proof Repair for Verified Libraries
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE mechanised proofs; separation logic; proof repair; invariant inference
AB The cost of maintaining formally specified and verified software is widely considered prohibitively high due to the need to constantly keep code and the proofs of its correctness in sync-the problem known as proof repair. One of the main challenges in automated proof repair for evolving code is to infer invariants for a new version of a once verified program that are strong enough to establish its full functional correctness.
   In this work, we present the first proof repair methodology for higher-order imperative functions, whose initial versions were verified in the Coq proof assistant and whose specifications remained unchanged. Our proof repair procedure is based on the combination of dynamic program alignment, enumerative invariant synthesis, and a novel technique for efficiently pruning the space of invariant candidates, dubbed proof-driven testing, enabled by the constructive nature of Coq's proof certificates.
   We have implemented our approach in a mostly-automated proof repair tool called Sisyphus. Given an OCaml function verified in Coq and its unverified new version, Sisyphus produces a Coq proof for the new version, discharging most of the new proof goals automatically and suggesting high-confidence obligations for the programmer to prove for the cases when automation fails. We have evaluated Sisyphus on 10 OCaml programs taken from popular libraries, that manipulate arrays and mutable data structures, considering their verified original and unverified evolved versions. Sisyphus has managed to repair proofs for all those functions, suggesting correct invariants and generating a small number of easy-to-prove residual obligations.
C1 [Gopinathan, Kiran; Keoliya, Mayank; Sergey, Ilya] Natl Univ Singapore, Singapore, Singapore.
C3 National University of Singapore
RP Gopinathan, K (corresponding author), Natl Univ Singapore, Singapore, Singapore.
EM kirang@comp.nus.edu.sg; mayank@u.nus.edu; ilya@nus.edu.sg
OI Sergey, Ilya/0000-0003-4250-5392; Keoliya, Mayank/0009-0000-3820-2036;
   Gopinathan, Kiran/0000-0002-1877-9871
FU Singapore Ministry of Education (MoE) Tier 3 grant "Automated Program
   Repair" [MOE-MOET32021-0001, T1 251RES2108]
FX This work was partially supported by a Singapore Ministry of Education
   (MoE) Tier 3 grant "Automated Program Repair" MOE-MOET32021-0001 and
   Tier 1 grant T1 251RES2108.
CR Adams M, 2015, LECT NOTES COMPUT SC, V9509, P53, DOI 10.1007/978-3-662-49224-6_6
   Ahrendt W, 2016, LECT NOTES COMPUT SC, V10001, P415, DOI 10.1007/978-3-319-49812-6_12
   [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   [Anonymous], 2019, THESIS CHALMERS U TE
   Appel Andrew W., 2020, ISMM 2020: Proceedings of the 2020 ACM SIGPLAN International Symposium on Memory Management, P48, DOI 10.1145/3381898.3397211
   Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Bourke Timothy, 2012, 11th International Conference, AISC 2012 19th Symposium, Calculemus 2012. Proceedings 5th International Workshop, DML 2012. 11th International Conference, MKM 2012. Systems and Projects, Held as Part of CICM 2012, P32, DOI 10.1007/978-3-642-31374-5_3
   Brockschmidt M, 2017, LECT NOTES COMPUT SC, V10422, P66, DOI 10.1007/978-3-319-66706-5_4
   Charguéraud A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408998
   Chargueraud A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P418
   Chargueraud Arthur, 2017, ML FAMILY WORKSHOP
   Chen HG, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P18, DOI 10.1145/2815400.2815402
   Chlipala A, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P234
   Das S., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P160
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DeMillo RichardA., 1977, PRINCIPLES PROGRAMMI, P206
   Erbsen A, 2019, P IEEE S SECUR PRIV, P1202, DOI 10.1109/SP.2019.00005
   Ernst M. D., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P449, DOI 10.1109/ICSE.2000.870435
   Ernst M. D., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P213, DOI 10.1109/ICSE.1999.841011
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Flanagan C., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P500
   Gonthier G, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P163
   Gopinathan Kiran, 2023, Zenodo, DOI 10.5281/ZENODO.7703886
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Henzinger T. A., 2004, SIGPLAN Notices, V39, P232, DOI 10.1145/982962.964021
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Le TC, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P788, DOI 10.1145/3314221.3314634
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Letouzey P, 2008, LECT NOTES COMPUT SC, V5028, P359, DOI 10.1007/978-3-540-69407-6_39
   Magill Stephen, 2006, 3 WORKSH SEM PROGR A, V1, P5
   Matichuk D, 2012, ELECTRON P THEOR COM, P46, DOI 10.4204/EPTCS.102.6
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Mulder I, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P809, DOI 10.1145/3519939.3523432
   Nanevski A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P261, DOI 10.1145/1706299.1706331
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   Petiot G, 2014, IEEE INT WORK C SO, P105, DOI 10.1109/SCAM.2014.19
   Phan A, 2021, COMPUT HUM BEHAV REP, V3, DOI 10.1016/j.chbr.2021.100055
   Piskac T., 2014, LNCS, P124, DOI DOI 10.1007/978-3-642-54862-8_9
   Polikarpova N, 2018, FORM ASP COMPUT, V30, P495, DOI 10.1007/s00165-017-0435-1
   Qin SC, 2013, J SYMB COMPUT, V50, P386, DOI 10.1016/j.jsc.2012.08.007
   Rahli Vincent, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P619, DOI 10.1007/978-3-319-89884-1_22
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Ringer T., 2018, P 7 ACM SIGPLAN INT, P115, DOI [10.1145/3167094, DOI 10.1145/3167094]
   Ringer T, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P112, DOI 10.1145/3453483.3454033
   Ringer Talia., 10 INT C INTERACTIVE, V141, p26:1, DOI [DOI 10.4230/LIPICS.ITP.2019.26, 10.4230/LIPIcs.ITP.2019.26]
   Robert Valentin, 2018, THESIS U CALIFORNIA
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   Sergey I, 2015, ACM SIGPLAN NOTICES, V50, P77, DOI [10.1145/2813885.2737964, 10.1145/2737924.2737964]
   Si XJ, 2018, ADV NEUR IN, V31
   The Iris Project, 2022, IRIS HIGH ORD CONC S
   Timany A, 2015, LECT NOTES COMPUT SC, V9399, P608, DOI 10.1007/978-3-319-25150-9_36
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Woos D, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P154, DOI 10.1145/2854065.2854081
NR 59
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 107
DI 10.1145/3591221
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900003
OA gold
DA 2024-07-18
ER

PT J
AU Isemann, R
   Giuffrida, C
   Bos, H
   Van der Kouwe, E
   Von Gleissenthall, K
AF Isemann, Raphael
   Giuffrida, Cristiano
   Bos, Herbert
   Van der Kouwe, Erik
   Von Gleissenthall, Klaus
TI Don't Look UB: Exposing Sanitizer-Eliding Compiler Optimizations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Sanitizers; Fuzzing; Optimizations
AB Sanitizers are widely used compiler features that detect undefined behavior and resulting vulnerabilities by injecting runtime checks into programs. For better performance, sanitizers are often used in conjunction with optimization passes. But doing so combines two compiler features with conflicting objectives. While sanitizers want to expose undefined behavior, optimizers often exploit these same properties for performance. In this paper, we show that this clash can have serious consequences: optimizations can remove sanitizer failures, thereby hiding the presence of bugs or even introducing new ones.
   We present LookUB, a differential-testing based framework for finding optimizer transformations that elide sanitizer failures. We used our method to find 17 such sanitizer-eliding optimizations in Clang. Next, we used static analysis and fuzzing to search for bugs in open-source projects that were previously hidden due to sanitizer-eliding optimizations. This led us to discover 19 new bugs in Linux Containers, libmpeg2, NTFS-3G, and WINE. Finally, we present an effective mitigation strategy based on a custom Clang optimizer with an overhead increase of 4%.
C1 [Isemann, Raphael; Giuffrida, Cristiano; Bos, Herbert; Van der Kouwe, Erik; Von Gleissenthall, Klaus] Vrije Univ Amsterdam, NL-1081 HV Amsterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP Isemann, R (corresponding author), Vrije Univ Amsterdam, NL-1081 HV Amsterdam, Netherlands.
EM r.isemann@vu.nl; giuffrida@cs.vu.nl; herbertb@cs.vu.nl;
   vdkouwe@cs.vu.nl; k.freiherrvongleissenthal@vu.nl
RI Bos, Herbert/KGK-6775-2024
OI Giuffrida, Cristiano/0000-0002-8329-5929; v. Gleissenthall,
   Klaus/0000-0003-0826-4425; van der Kouwe, Erik/0000-0002-0312-9913; Bos,
   Herbert/0000-0001-6179-1510
FU EKZ through the AVR Memo project; Intel Corporation through the
   Allocamelus project; NWO
FX We thank the anonymous reviewers for their feedback. This work was
   supported by EKZ through the AVR Memo project, by Intel Corporation
   through the Allocamelus project, and by NWO through projects Theseus and
   INTERSECT.
CR Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7684001
   Di Luna GA, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P1034, DOI 10.1145/3445814.3446695
   Phan DL, 2018, IEEE ICST WORKSHOP, P40, DOI 10.1109/ICSTW.2018.00026
   Jeon Y, 2020, PROCEEDINGS OF THE 2020 USENIX ANNUAL TECHNICAL CONFERENCE, P249
   Jia Y, 2008, TACI PART 2008:TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P94, DOI 10.1109/TAIC-PART.2008.18
   Livinskii V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428264
   Nethercote N, 2007, ACM SIGPLAN NOTICES, V42, P89, DOI 10.1145/1273442.1250746
   Serebryany K., 2012, USENIX ATC 2012, P309
   Serebryany Kostya, 2017, OSS-Fuzz-Google's continuous fuzzing service for open source software
   Song D, 2019, P IEEE S SECUR PRIV, P1275, DOI 10.1109/SP.2019.00010
   Stepanov E, 2015, INT SYM CODE GENER, P46, DOI 10.1109/CGO.2015.7054186
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P216, DOI [10.1145/2666356.2594334, 10.1145/2594291.2594334]
   Wagner J, 2015, P IEEE S SECUR PRIV, P866, DOI 10.1109/SP.2015.58
   WANG X., 2012, P ASIA PACIFIC WORKS, P9, DOI DOI 10.1145/2349896.2349905
   Wang X, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P260, DOI 10.1145/2517349.2522728
   Wells Nicholas, 2000, Linux J.
   Wu Zekai, 2020, FINDING BUGS COMPILE
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zhang J, 2021, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '21), P479
   Zhang YC, 2022, PROCEEDINGS OF THE 31ST USENIX SECURITY SYMPOSIUM, P4345
NR 20
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 143
DI 10.1145/3591257
PG 21
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900039
OA gold
DA 2024-07-18
ER

PT J
AU Sewell, T
   Myreen, MO
   Tan, YK
   Kumar, R
   Mihajlovic, A
   Abrahamsson, O
   Owens, S
AF Sewell, Thomas
   Myreen, Magnus O.
   Tan, Yong Kiam
   Kumar, Ramana
   Mihajlovic, Alexander
   Abrahamsson, Oskar
   Owens, Scott
TI Cakes That Bake Cakes: Dynamic Computation in CakeML
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compiler verification; dynamic computation; interactive theorem proving
AB We have extended the verified CakeML compiler with a new language primitive, Eval, which permits evaluation of new CakeML syntax at runtime. This new implementation supports an ambitious form of compilation at runtime and dynamic execution, where the original and dynamically added code can share ( higher-order) values and recursively call each other. This is, to our knowledge, the first verified run-time environment capable of supporting a standard LCF-style theorem prover design. Modifying the modern CakeML compiler pipeline and proofs to support a dynamic computation semantics was an extensive project. We review the design decisions, proof techniques, and proof engineering lessons from the project, and highlight some unexpected complications.
C1 [Sewell, Thomas] Univ Cambridge, Cambridge, England.
   [Myreen, Magnus O.; Mihajlovic, Alexander; Abrahamsson, Oskar] Chalmers Univ Technol, Gothenburg, Sweden.
C3 University of Cambridge; Chalmers University of Technology
RP Sewell, T (corresponding author), Univ Cambridge, Cambridge, England.
EM tals4@cam.ac.uk; myreen@chalmers.se; yongkiat@alumni.cmu.edu;
   ramana@member.fsf.org; oskar8192@gmail.com
OI Tan, Yong Kiam/0000-0001-7033-2463
FU Swedish Foundation for Strategic Research; Swedish Research Council
   [2021-05165]; Trustworthy Systems; CSIRO's Data61; European Research
   Council (ERC) via the "ELVER" grant [789108]; Swedish Research Council
   [2021-05165] Funding Source: Swedish Research Council
FX We thank Rini Banerjee, Raj Troll, Peter Sewell, the PLDI anonymous
   reviewers, and our paper shepherd for their feedback on this paper. This
   work was supported by the Swedish Foundation for Strategic Research, by
   the Swedish Research Council (grant no. 2021-05165), by Trustworthy
   Systems and CSIRO's Data61, and by the European Research Council (ERC)
   via the "ELVER" grant (grant agreement no. 789108).
CR Abrahamsson Oskar, 2022, DROPS-IDN/v2/Document/10.4230/LIPIcs.ITP.2022.3, V3, P1, DOI DOI 10.4230/LIPICS.ITP.2022.3
   Barrière A, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571202
   Barrière A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434327
   Gordon M. J., 1979, Edinburgh LCF
   Gordon Michael J., 1978, P 5 ACM SIGACT SIGPL, P119, DOI DOI 10.1145/512760.512773
   Harrison J, 2009, LECT NOTES COMPUT SC, V5674, P60, DOI 10.1007/978-3-642-03359-9_4
   Hobor A, 2008, LECT NOTES COMPUT SC, V4960, P353
   Kang Jeehoon, 2016, LIGHTWEIGHT VERIFICA, P178, DOI [10.1145/2837614.2837642, DOI 10.1145/2837614.2837642]
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Martínez G, 2019, LECT NOTES COMPUT SC, V11423, P30, DOI 10.1007/978-3-030-17184-1_2
   Milner R., 1975, Logic Colloquium '73, V80, P157, DOI DOI 10.1016/S0049-237X(08)71948-7
   Myreen Magnus O., 2011, Interactive Theorem Proving. Proceedings Second International Conference, ITP 2011, P265, DOI 10.1007/978-3-642-22863-6_20
   Myreen M.O., 2021, LIPICS, V193
   Myreen MO, 2014, J FUNCT PROGRAM, V24, P284, DOI 10.1017/S0956796813000282
   Myreen MO, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P107, DOI 10.1145/1706299.1706313
   Neis G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P166, DOI 10.1145/2784731.2784764
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   Owens S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110262
   Owens S, 2016, LECT NOTES COMPUT SC, V9632, P589, DOI 10.1007/978-3-662-49498-1_23
   PAULSON L, 1983, SCI COMPUT PROGRAM, V3, P119, DOI 10.1016/0167-6423(83)90008-4
   Perconti JT, 2014, LECT NOTES COMPUT SC, V8410, P128
   Pohjola Johannes Aman, 2022, SCHLOSS DAGSTUHL LEI, V237, P1, DOI [10.4230/LIPIcs.ITP, DOI 10.4230/LIPICS.ITP]
   Sewell Thomas, 2023, Zenodo, DOI 10.5281/ZENODO.7813942
   Slind K, 2008, LECT NOTES COMPUT SC, V5170, P28, DOI 10.1007/978-3-540-71067-7_6
   Song Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371091
   Stewart Gordon, 2015, COMPOSITIONAL COMPCE, P275, DOI [10.1145/2676726.2676985, DOI 10.1145/2676726.2676985]
   Tan YK, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000229
   Wang Xi, 2014, JITK TRUSTWORTHY IN, P33
   Wang YT, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428265
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
NR 32
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 152
DI 10.1145/3591266
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900048
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Goncharov, S
   Milius, S
   Schröder, L
   Tsampas, S
   Urbat, H
AF Goncharov, Sergey
   Milius, Stefan
   Schroeder, Lutz
   Tsampas, Stelios
   Urbat, Henning
TI Towards a Higher-Order Mathematical Operational Semantics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE GSOS; Categorical semantics; Higher-order reasoning
ID LOGICAL RELATIONS; BISIMULATION; CONGRUENCE; CALCULUS
AB Compositionality proofs in higher-order languages are notoriously involved, and general semantic frameworks guaranteeing compositionality are hard to come by. In particular, Turi and Plotkin's bialgebraic abstract GSOS framework, which has been successfully applied to obtain off-the-shelf compositionality results for first-order languages, so far does not apply to higher-order languages. In the present work, we develop a theory of abstract GSOS specifications for higher-order languages, in effect transferring the core principles of Turi and Plotkin's framework to a higher-order setting. In our theory, the operational semantics of higher-order languages is represented by certain dinatural transformations that we term pointed higher-order GSOS laws. We give a general compositionality result that applies to all systems specified in this way and discuss how compositionality of the SKI calculus and the _-calculus w.r.t. a strong variant of Abramsky's applicative bisimilarity are obtained as instances.
C1 [Goncharov, Sergey; Milius, Stefan; Schroeder, Lutz; Tsampas, Stelios; Urbat, Henning] Friedrich Alexander Univ Erlangen Nurnberg, Erlangen, Germany.
C3 University of Erlangen Nuremberg
RP Goncharov, S (corresponding author), Friedrich Alexander Univ Erlangen Nurnberg, Erlangen, Germany.
EM sergey.goncharov@fau.de; stefan.milius@fau.de; lutz.schroeder@fau.de;
   stelios.tsampas@fau.de; henning.urbat@fau.de
OI Tsampas, Stelios/0000-0001-8981-2328; Goncharov,
   Sergey/0000-0001-6924-8766; Milius, Stefan/0000-0002-2021-1644; Urbat,
   Henning/0000-0002-3265-7168
CR Abate C, 2021, LECT NOTES COMPUT SC, V13008, P83, DOI 10.1007/978-3-030-89051-3_6
   ABRAMSKY S, 1993, INFORM COMPUT, V105, P159, DOI 10.1006/inco.1993.1044
   Abramsky S., 1990, LAZY LAMBDA CALCULUS, P65
   Adamek J., 2011, ALGEBRAIC THEORIES
   Arkor N, 2020, IEEE S LOG, P88, DOI 10.1145/3373718.3394771
   BARR M, 1970, MATH Z, V116, P307, DOI 10.1007/BF01111838
   Bartels F., 2004, THESIS VRIJE U AMSTE
   Bernstein KL, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P153, DOI 10.1109/LICS.1998.705652
   BLOOM B, 1995, THEOR COMPUT SCI, V146, P25, DOI 10.1016/0304-3975(94)00152-9
   BLOOM B, 1995, J ASSOC COMPUT MACH, V42, P232, DOI 10.1145/200836.200876
   Borthelle P, 2020, IEEE S LOG, P273, DOI 10.1145/3373718.3394738
   Curry HB, 1930, AM J MATH, V52, P509, DOI 10.2307/2370619
   Dal Lago U, 2017, P 32 ANN ACM IEEE S, P1
   Dreyer D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:16)2011
   Fiore M, 2001, IEEE S LOG, P93, DOI 10.1109/LICS.2001.932486
   Fiore M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P193, DOI 10.1109/LICS.1999.782615
   Fiore M, 2008, IEEE S LOG, P57, DOI 10.1109/LICS.2008.38
   Fiore M, 2006, IEEE S LOG, P49, DOI 10.1109/LICS.2006.7
   Goncharov Sergey, 2022, 7 INT C FORMAL STRUC, V228, DOI [10.4230/LIPIcs.FSCD. 2022.30, DOI 10.4230/LIPICS.FSCD.2022.30]
   Gordon Andrew D., 1999, HIGHER ORDER OPERATI
   Hermida C, 2014, ELECTRON NOTES THEOR, V303, P149, DOI 10.1016/j.entcs.2014.02.008
   Hirschowitz T, 2022, LOG METH COMPUT SCI, V18, DOI 10.46298/LMCS-18(3:37)2022
   Hirschowitz T, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290334
   HOWE DJ, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P198
   Howe DJ, 1996, INFORM COMPUT, V124, P103, DOI 10.1006/inco.1996.0008
   Klin B., 2015, 6 C ALGEBRA COALGEBR, P190, DOI DOI 10.4230/LIPICS.CALCO.2015.190
   Klin B, 2008, LECT NOTES COMPUT SC, V4962, P428, DOI 10.1007/978-3-540-78499-9_30
   Lassen S, 2005, IEEE S LOG, P345
   Mac Lane S., 1992, SHEAVES GEOMETRY LOG
   Miculan M, 2016, THEOR COMPUT SCI, V655, P135, DOI 10.1016/j.tcs.2016.01.012
   Milner R., 1989, Communication and concurrency
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Mousavi MR, 2007, ELECTRON NOTES THEOR, V175, P45, DOI 10.1016/j.entcs.2006.09.015
   OHEARN PW, 1995, INFORM COMPUT, V120, P107, DOI 10.1006/inco.1995.1103
   Pitts Andrew., 2011, HOWES METHOD HIGHER, DOI [10.1017/CBO9780511792588.006, DOI 10.1017/CBO9780511792588.006]
   Rutten JJMM, 2000, THEOR COMPUT SCI, V249, P3, DOI 10.1016/S0304-3975(00)00056-6
   SANGIORGI D, 1994, INFORM COMPUT, V111, P120, DOI 10.1006/inco.1994.1042
   Sangiorgi D, 1996, INFORM COMPUT, V131, P141, DOI 10.1006/inco.1996.0096
   Sangiorgi D, 2007, IEEE S LOG, P293, DOI 10.1109/LICS.2007.17
   Scott Dana., 1970, OUTL MATH THEOR COMP
   STATMAN R, 1985, INFORM CONTROL, V65, P85, DOI 10.1016/S0019-9958(85)80001-2
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Tsampas S, 2020, LECT NOTES COMPUT SC, V12094, P155, DOI 10.1007/978-3-030-57201-3_9
   Tsampas Stelios, 2021, 46 INT S MATH FDN CO, V88, P1
   Turi D, 1997, IEEE S LOG, P280, DOI 10.1109/LICS.1997.614955
   van Glabbeek RJ, 2011, THEOR COMPUT SCI, V412, P3283, DOI 10.1016/j.tcs.2011.02.036
   Watanabe H., 2002, ELECT NOTES THEOR CO, V65, P337, DOI DOI 10.1016/S1571-0661(04)80372-4
NR 47
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571215
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500022
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Lee, W
   Cho, H
AF Lee, Woosuk
   Cho, Hangyeol
TI Inductive Synthesis of Structurally Recursive Functional Programs from
   Non-recursive Expressions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Programming by Example; Recursive Functional Programs; Synthesis
AB We present a novel approach to synthesizing recursive functional programs from input-output examples. Synthesizing a recursive function is challenging because recursive subexpressions should be constructed while the target function has not been fully defined yet. We address this challenge by using a new technique we call block-based pruning. A block refers to a recursion- and conditional-free expression (i.e., straight-line code) that yields an output from a particular input. We first synthesize as many blocks as possible for each input-output example, and then we explore the space of recursive programs, pruning candidates that are inconsistent with the blocks. Our method is based on an efficient version space learning, thereby effectively dealing with a possibly enormous number of blocks. In addition, we present a method that uses sampled input-output behaviors of library functions to enable a goal-directed search for a recursive program using the library. We have implemented our approach in a system called Trio and evaluated it on synthesis tasks from prior work and on new tasks. Our experiments show that Trio outperforms prior work by synthesizing a solution to 98% of the benchmarks in our benchmark suite.
C1 [Lee, Woosuk; Cho, Hangyeol] Hanyang Univ, Dept Comp Sci & Engn, Seoul, South Korea.
C3 Hanyang University
RP Lee, W (corresponding author), Hanyang Univ, Dept Comp Sci & Engn, Seoul, South Korea.
EM woosuk@hanyang.ac.kr; pigon8@hanyang.ac.kr
RI Lee, Woosuk/ITV-2754-2023
OI Cho, Hangyeol/0000-0001-5869-9473; Lee, Woosuk/0000-0002-1884-619X
FU National Research Foundation of Korea (NRF) - Korea government (MSIT)
   [2020R1C1C1014518, 2021R1A5A1021944]; Institute for Information &
   Communications Technology Planning & Evaluation (IITP) - Korea
   government (MSIT) [2021-0-00758, 2022-0-00995]
FX We thank the reviewers for insightful comments. This work was supported
   by the National Research Foundation of Korea (NRF) grant funded by the
   Korea government (MSIT) (No. 2020R1C1C1014518, 2021R1A5A1021944) and
   Institute for Information & Communications Technology Planning &
   Evaluation (IITP) grant funded by the Korea government (MSIT) (No.
   2021-0-00758, 2022-0-00995).
CR Albarghouthi Aws, 2013, P 25 INT C COMPUTER
   Eguchi S, 2018, LECT NOTES COMPUT SC, V11275, P223, DOI 10.1007/978-3-030-02768-1_13
   Ellis K, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P835, DOI 10.1145/3453483.3454080
   Farzan A, 2021, LECT NOTES COMPUT SC, V12759, P832, DOI 10.1007/978-3-030-81685-8_39
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Itzhaky S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P944, DOI 10.1145/3453483.3454087
   Kini D, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P776
   Kitzelmann E, 2006, J MACH LEARN RES, V7, P429
   Kneuss E, 2013, ACM SIGPLAN NOTICES, V48, P407, DOI [10.1145/2509136.2509555, 10.1145/2544173.2509555]
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Lee W, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434335
   Lee Woosuk, 2022, ARTIFACT INDUCTIVE S, DOI [10.5281/zenodo.7320806, DOI 10.5281/ZENODO.7320806]
   Lubin J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408991
   Miltner A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498682
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Osera Peter-Michael., 2015, PROGRAM SYNTHESIS TY
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Summers P.D., 1986, Readings in artificial intelligence and software engineering, P309
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
NR 24
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571263
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500070
OA gold
DA 2024-07-18
ER

PT J
AU Chen, A
   Fathololumi, P
   Koskinen, E
   Pincus, J
AF Chen, Adam
   Fathololumi, Parisa
   Koskinen, Eric
   Pincus, Jared
TI Veracity: Declarative Multicore Programming with Commutativity
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE commutativity analysis; commutativity conditions; pre-condition
   synthesis; serializability; parallelization
ID SUPPORT
AB There is an ongoing effort to provide programming abstractions that ease the burden of exploiting multicore hardware. Many programming abstractions (e.g., concurrent objects, transactional memory, etc.) simplify matters, but still involve intricate engineering. We argue that some difficulty of multicore programming can be meliorated through a declarative programming style in which programmers directly express the independence of fragments of sequential programs.
   In our proposed paradigm, programmers write programs in a familiar, sequential manner, with the added ability to explicitly express the conditions under which code fragments sequentially commute. Putting such commutativity conditions into source code offers a new entry point for a compiler to exploit the known connection between commutativity and parallelism. We give a semantics for the programmer's sequential perspective and, under a correctness condition, find that a compiler-transformed parallel execution is equivalent to the sequential semantics. Serializability/linearizability are not the right fit for this condition, so we introduce scoped serializability and show how it can be enforced with lock synthesis techniques.
   We next describe a technique for automatically verifying and synthesizing commute conditions via a new reduction from our commute blocks to logical specifications, upon which symbolic commutativity reasoning can be performed. We implemented our work in a new language called Veracity, implemented in Multicore OCaml. We show that commutativity conditions can be automatically generated across a variety of new benchmark programs, confirm the expectation that concurrency speedups can be seen as the computation increases, and apply our work to a small in-memory filesystem and an adaptation of a crowdfund blockchain smart contract.
C1 [Chen, Adam; Fathololumi, Parisa; Koskinen, Eric; Pincus, Jared] Stevens Inst Technol, Hoboken, NJ 07030 USA.
C3 Stevens Institute of Technology
RP Chen, A (corresponding author), Stevens Inst Technol, Hoboken, NJ 07030 USA.
EM achen19@stevens.edu; pfathol1@stevens.edu; eric.koskinen@stevens.edu;
   jpincus@stevens.edu
OI Koskinen, Eric/0000-0001-7363-634X; Pincus, Jared/0000-0001-6708-5262;
   Chen, Adam/0000-0002-5159-6532; Fathololumi, Parisa/0000-0002-8602-2862
FU National Science Foundation [2008633]
FX We thank the anonymous reviewers for their valuable feedback and Maurice
   Herlihy for the suggestion of a smart contracts case study. This work
   was partially supported by the National Science Foundation award
   #2008633.
CR Aleen F, 2009, ACM SIGPLAN NOTICES, V44, P241, DOI 10.1145/1508284.1508273
   Allen Eric, 2005, Em: Sun Microsystems, V139, P140
   [Anonymous], 2014, Multicore OCaml
   Armstrong J, 1997, ACM SIGPLAN NOTICES, V32, P196, DOI 10.1145/258949.258967
   Bansal K, 2020, J AUTOM REASONING, V64, P1333, DOI 10.1007/s10817-020-09573-w
   Bansal K, 2018, LECT NOTES COMPUT SC, V10805, P115, DOI 10.1007/978-3-319-89960-2_7
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Barik Rajkishore, 2009, P 24 ACM SIGPLAN C C, P735
   Barrett C., 2010, P 8 INT WORKSHOP SAT, V13, P14
   BERNSTEIN AJ, 1966, IEEE TRANS ELECTRON, VEC15, P757, DOI 10.1109/PGEC.1966.264565
   Blume Bill, 1994, P 7 WORKSHOP LANGUAG, P141
   BLUME W, 1992, IEEE T PARALL DISTR, V3, P643, DOI 10.1109/71.180621
   Bocchino R.L., 2009, Proceedings of the 24th ACM SIGPLAN conference on Object oriented programming systems languages and applications, OOPSLA '09, P97, DOI [10.1145/1640089.1640097, DOI 10.1145/1640089.1640097]
   Bronson NG, 2010, PODC 2010: PROCEEDINGS OF THE 2010 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P6, DOI 10.1145/1835698.1835703
   Cerny Pavol, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P951, DOI 10.1007/978-3-642-39799-8_68
   CHATTERJEE A, 1989, PROCEEDINGS : SUPERCOMPUTING 89, P562, DOI 10.1145/76263.76326
   Chen AD, 2022, Arxiv, DOI [arXiv:2203.06229, 10.48550/ARXIV.2203.06229, DOI 10.48550/ARXIV.2203.06229]
   Chen Adam, 2022, PACMPL, V6, DOI [10.5281/zenodo.7058421FundedbyNSFGrant#2008633, DOI 10.5281/ZENODO.7058421FUNDEDBYNSFGRANT#2008633]
   Cherem S, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P304, DOI 10.1145/1375581.1375619
   Clements AT, 2015, ACM T COMPUT SYST, V32, DOI 10.1145/2699681
   Dickerson T, 2019, LECT NOTES COMPUT SC, V11893, P313, DOI 10.1007/978-3-030-34175-6_16
   Dickerson T, 2017, PROCEEDINGS OF THE ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC'17), P303, DOI 10.1145/3087801.3087835
   Dimitrov D, 2014, ACM SIGPLAN NOTICES, V49, P305, DOI [10.1145/2594291.2594322, 10.1145/2666356.2594322]
   Elmas T., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P507, DOI 10.1145/1810295.1810454
   Eqbal Rasha, 2014, Ph. D. Dissertation
   Ernst G., 2020, arXiv, DOI DOI 10.48550/ARXIV.2010.05812
   Ernst G, 2022, LECT NOTES COMPUT SC, V13182, P69, DOI 10.1007/978-3-030-94583-1_4
   Fan Bin, 2013, 10 USENIX S NETW SYS, P371
   Flanagan C, 2003, ACM SIGPLAN NOTICES, V38, P338, DOI 10.1145/780822.781169
   Gehr T, 2015, LECT NOTES COMPUT SC, V9206, P307, DOI 10.1007/978-3-319-21690-4_18
   Golan-Gueta G, 2015, ACM SIGPLAN NOTICES, V50, P31, DOI [10.1145/2858788.2688511, 10.1145/2688500.2688511]
   Grossman M, 2011, LECT NOTES COMPUT SC, V6548, P230, DOI 10.1007/978-3-642-19595-2_16
   Guerraoui R, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P175, DOI 10.1145/1345206.1345233
   Harris T, 2003, ACM SIGPLAN NOTICES, V38, P388, DOI 10.1145/949343.949340
   Hassan A, 2014, ACM SIGPLAN NOTICES, V49, P387, DOI [10.1145/2555243.2555283, 10.1145/2692916.2555283]
   HERLIHY M, 1993, CONF PROC INT SYMP C, P289, DOI 10.1145/173682.165164
   Herlihy M, 2003, P 22 ANN S PRINCIPLE, P92
   Herlihy Maurice, 2008, P 13 ACM SIGPLAN S P, DOI [10.1145/62678.62684, DOI 10.1145/62678.62684]
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Houshmand F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290387
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Kim D, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P528
   KORTH HF, 1983, J ACM, V30, P55, DOI 10.1145/322358.322363
   Koskinen E, 2021, LECT NOTES COMPUT SC, V12597, P81, DOI 10.1007/978-3-030-67067-2_5
   Kroening D, 2008, LECT NOTES COMPUT SC, V5311, P111, DOI 10.1007/978-3-540-88387-6_10
   Kulkarni M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P211, DOI 10.1145/1250734.1250759
   Kulkarni M, 2008, ACM SIGPLAN NOTICES, V43, P233, DOI 10.1145/1353536.1346311
   Kulkarni M, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P542
   Li XF, 2014, MPhil thesis, P1, DOI [10.1145/2592798.2592820, DOI 10.1145/2592798.2592820]
   Li Z., 1990, IEEE Transactions on Parallel and Distributed Systems, V1, P26, DOI 10.1109/71.80122
   libcuckoo, 2013, libcuckoo: A high-performance, concurrent hash table.
   Lindenmeier SM, 2007, 2007 2ND INTERNATIONAL ITG CONFERENCE ON ANTENNAS, P45, DOI 10.1109/INICA.2007.4353929
   LISKOV B, 1988, SIGPLAN NOTICES, V23, P260
   Liu YJ, 2014, PROCEEDINGS OF THE 2014 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC'14), P242, DOI 10.1145/2611462.2611495
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Najafzadeh M, 2016, PROCEEDINGS OF THE 2ND WORKSHOP ON THE PRINCIPLES AND PRACTICE OF CONSISTENCY FOR DISTRIBUTED DATA, PAPOC 2016, DOI [10.1145/2911151.2911160, 10.1109/CPE-POWERENG50821.2021.9501173]
   Ni Y, 2007, PROCEEDINGS OF THE 2007 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING PPOPP'07, P68, DOI 10.1145/1229428.1229442
   OHearn Peter W., 2016, ACM SIGLOG NEWS, V3, P47, DOI DOI 10.1145/2984450.2984457
   Orchard DA, 2010, DAMP'10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON DECLARATIVE ASPECTS OF MULTICORE PROGRAMMING, P15
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   PAPADIMITRIOU CH, 1979, J ACM, V26, P631, DOI 10.1145/322154.322158
   Pîrlea G, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1327, DOI 10.1145/3453483.3454112
   Prabhakar Raghu, 2011, Technical Report
   Prabhu P, 2011, ACM SIGPLAN NOTICES, V46, P1, DOI 10.1145/1993316.1993500
   Purcell C, 2005, LECT NOTES COMPUT SC, V3724, P108, DOI 10.1007/11561927_10
   Rinard MC, 1997, ACM T PROGR LANG SYS, V19, P942, DOI 10.1145/267959.269969
   Saha B., 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P187, DOI 10.1145/1122971.1123001
   Saraph Vikram, 2019, arXiv
   Servois, 2018, Servois: Synthesizing Commutativity Conditions
   Servois2, 2022, Servois2: An Extended Commutativity Condition Synthesizer.
   Silverman J, 2019, LECT NOTES COMPUT SC, V11562, P97, DOI 10.1007/978-3-030-25543-5_7
   Steele G. L.  Jr., 2005, PACT 2005. 14th International Conference on Parallel Architectures and Compilation Techniques
   Tran TH, 2021, IEEE T CIRCUITS-I, V68, P4245, DOI 10.1109/TCSI.2021.3102618
   Tripp O, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P207
   Vafeiadis V, 2010, LECT NOTES COMPUT SC, V6174, P450, DOI 10.1007/978-3-642-14295-6_40
   Vakilian M, 2009, IEEE INT CONF AUTOM, P421, DOI 10.1109/ASE.2009.68
   Various, 2007, P WORKSH DECL ASP MU, DOI [10.1145/1481839, DOI 10.1145/1481839]
   Vechev M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P327, DOI 10.1145/1706299.1706338
   WEIHL WE, 1988, IEEE T COMPUT, V37, P1488, DOI 10.1109/12.9728
   Weihl William E, 1983, P 2 ANN ACM S PRINC, P63, DOI [10.1145/800221.806710, DOI 10.1145/800221.806710]
   Xie XF, 2019, IEEE T SOFTWARE ENG, V45, P537, DOI 10.1109/TSE.2017.2788018
NR 81
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 186
DI 10.1145/3563349
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200063
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Ellis, S
   Zhu, S
   Yoshida, N
   Song, L
AF Ellis, Stephen
   Zhu, Shuofei
   Yoshida, Nobuko
   Song, Linhai
TI Generic Go to Go
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Generic types; Dictionary-passing translation; Correctness
AB Go is a popular statically-typed industrial programming language. To aid the type safe reuse of code, the recent Go release (Go 1.18) published early 2022 includes bounded parametric polymorphism via generic types. Go 1.18 implements generic types using a combination of monomorphisation and call-graph based dictionary-passing called hybrid. This hybrid approach can be viewed as an optimised form of monomorphisation that statically generates specialised methods and types based on possible instantiations. A monolithic dictionary supplements information lost during monomorphisation, and is structured according to the program's call graph. Unfortunately, the hybrid approach still suffers from code bloat, poor compilation speed, and limited code coverage.
   In this paper we propose and formalise a new non-specialising call-site based dictionary-passing translation. Our call-site based translation creates individual dictionaries for each type parameter, with dictionary construction occurring in place of instantiation, overcoming the limitations of hybrid. We prove it correct using a novel and general bisimulation up to technique. To better understand how different generics translation approaches work in practice, we benchmark five translators, Go 1.18, two existing monomorphisation translators, our dictionary-passing translator, and an erasure translator. Our findings reveal several suggestions for improvements for Go 1.18- specifically how to overcome the expressiveness limitations of generic Go and improve compile time and compiled code size performance of Go 1.18.
C1 [Ellis, Stephen; Yoshida, Nobuko] Univ Oxford, Oxford, England.
   [Zhu, Shuofei; Song, Linhai] Penn State Univ, University Pk, PA USA.
C3 University of Oxford; Pennsylvania Commonwealth System of Higher
   Education (PCSHE); Pennsylvania State University; Pennsylvania State
   University - University Park
RP Ellis, S (corresponding author), Univ Oxford, Oxford, England.
EM stephen.ellis@cs.ox.ac.uk; sfzhu@psu.edu; nobuko.yoshida@cs.ox.ac.uk;
   songlh@ist.psu.edu
OI Yoshida, Nobuko/0000-0002-3925-8557
FU EPSRC [EP/T006544/1, EP/K011715/1, EP/K034413/1, EP/L00058X/1,
   EP/N027833/1, EP/N028201/1, EP/T014709/1, EP/V000462/1, EP/X015955/1];
   Mozilla Research Award; NCSS/EPSRC VeTSS; Ethereum Grant
FX The authors wish to thank Ziheng Liu and Zi Yang for benchmark
   collection and initial paper discussion, and the anonymous reviewers for
   their invaluable comments and suggestions on the paper. This work was
   partially supported by EPSRC (EP/T006544/1, EP/K011715/1, EP/K034413/1,
   EP/L00058X/1, EP/N027833/1, EP/N028201/1, EP/T006544/1, EP/T014709/1,
   EP/V000462/1 and EP/X015955/1), NCSS/EPSRC VeTSS, a Mozilla Research
   Award, and an Ethereum Grant.
CR Agesen O., 1997, SIGPLAN Notices, V32, P49, DOI 10.1145/263700.263720
   Allen Eric., 2002, P IN C PRINC PRACT P, P19
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Bottu GJ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341695
   BROWNE MC, 1988, THEOR COMPUT SCI, V59, P115, DOI 10.1016/0304-3975(88)90098-9
   Canning Peter, 1989, C FUNCT PROGR LANG C, P273, DOI [10.1145/99370.99392, DOI 10.1145/99370.99392]
   Castanos J, 2012, ACM SIGPLAN NOTICES, V47, P195, DOI 10.1145/2398857.2384631
   Cox Russ., 2009, Go Data Structures: Interfaces
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P301, DOI 10.1145/291251.289459
   Dachuan Yu, 2004, Ph.D. Dissertation
   Docker, 2021, Docker-Build, Ship, and Run Any App, Anywhere
   Driesen K, 1996, ACM SIGPLAN NOTICES, V31, P306, DOI 10.1145/236338.236369
   Ellis Stephen, 2022, Technical Report, DOI [10.48550/ARXIV.2208.06810, DOI 10.48550/ARXIV.2208.06810]
   Ellis Stephen, 2022, Generic Go to Go: Dictionary-Passing, Monomorphisation, and Hybrid, DOI [10.5281/zenodo.7067362, DOI 10.5281/ZENODO.7067362]
   Ellis Stephen, 2022, fgg2go
   Free Software Foundation, 2021, objdump(1)-Linux manual page
   Gal A, 2009, ACM SIGPLAN NOTICES, V44, P465, DOI 10.1145/1543135.1542528
   gitchander, 2021, Permutation
   Griesemer Robert, 2020, Proceedings of the ACM on Programming Languages, V4, DOI 10.1145/3428217
   gRPC, 2021, A high performance, open-source universal RPC framework
   Hu Raymond., 2021, Mini prototype of FG/FGG/FGR in Go
   Hur Chung-Kil, 2014, Technical Report. Technical Report MPI-SWS-2014-003
   IEEE Spectrum, 2022, Top Programming Languages-IEEE Spectrum
   Igarashi A, 1999, ACM SIGPLAN NOTICES, V34, P132, DOI 10.1145/320385.320395
   Jones Cliff B, 1993, P INT JOINT C CAAP F, P136, DOI [10.1007/3-540-56610-4_61, DOI 10.1007/3-540-56610-4_61]
   Jones M. P., 1995, LISP and Symbolic Computation, V8, P229, DOI 10.1007/BF01019005
   Kennedy A, 2001, ACM SIGPLAN NOTICES, V36, P1, DOI 10.1145/381694.378797
   Kubernetes, 2021, Production-Grade Container Orchestration
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Merrick Alice., 2020, Go Developer Survey 2020 Results
   MILNER R, 1992, LECT NOTES COMPUT SC, V623, P685
   Odersky M, 2000, LECT NOTES COMPUT SC, V1766, P114
   Odersky M., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P146, DOI 10.1145/263699.263715
   Randall Keith, 2020, Generics implementation-Stenciling
   Randall Keith, 2022, Go 1.18 Implementation of Generics via Dictionaries and Gcshape Stenciling.
   Rey Clement, 2018, go-internals
   Salib M., 2004, Ph.D. thesis
   Solorzano JH, 1998, ACM SIGPLAN NOTICES, V33, P216, DOI 10.1145/286942.286959
   Stack Overflow, 2021, 2021 Developer Survey
   Stroustrup B., 1997, The C++ Programming Language
   Sulzmann M, 2021, LECT NOTES COMPUT SC, V13008, P102, DOI 10.1007/978-3-030-89051-3_7
   The Go Team, 2021, The Go Programming Language Specification-The Go Programming Language
   The Go Team, 2022, Go 1.18 Release Notes.
   The Go Team, 2021, The go2go playground
   Ureche V, 2013, ACM SIGPLAN NOTICES, V48, P73, DOI [10.1145/2509136.2509537, 10.1145/2544173.2509537]
   Viroli M, 2000, ACM SIGPLAN NOTICES, V35, P146, DOI 10.1145/354222.353182
   Yu DC, 2004, ACM SIGPLAN NOTICES, V39, P39, DOI 10.1145/982962.964005
NR 47
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 168
DI 10.1145/3563331
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200045
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Mackay, J
   Eisenbach, S
   Noble, J
   Drossopoulou, S
AF Mackay, Julian
   Eisenbach, Susan
   Noble, James
   Drossopoulou, Sophia
TI <i>Necessity</i> Specifications for Robustness
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Necessity; Necessary Conditions; Correctness; Verification
AB Robust modules guarantee to do only what they are supposed to do - even in the presence of untrusted, malicious clients, and considering not just the direct behaviour of individual methods, but also the emergent behaviour from calls to more than one method. Necessity is a language for specifying robustness, based on novel necessity operators capturing temporal implication, and a proof logic that derives explicit robustness specifications from functional specifications. Soundness and an exemplar proof are mechanised in Coq.
C1 [Mackay, Julian] Victoria Univ Wellington, Victoria, New Zealand.
   [Eisenbach, Susan; Drossopoulou, Sophia] Imperial Coll London, London, England.
   [Noble, James] Creat Res & Programming, 5 Fernlea Ave, Wellington 6012, New Zealand.
C3 Victoria University Wellington; Imperial College London
RP Mackay, J (corresponding author), Victoria Univ Wellington, Victoria, New Zealand.
EM julian.mackay@ecs.vuw.ac.nz; susan@imperial.ac.uk; kjx@acm.org;
   scd@imperial.ac.uk
OI Noble, James/0000-0001-9036-5692; Mackay, Julian/0000-0003-3098-3901;
   Drossopoulou, Sophia/0000-0002-1993-1142
FU Royal Society of New Zealand (Te Aparangi) Marsden Fund (Te Putea
   Rangahau a Marsden) [VUW1815]
FX We are especially grateful for the careful attention and judicious
   suggestions of the anonymous reviewers, which have significantly
   improved the paper. We are deeply grateful for feedback from and
   discussions with Dominiqie Devriese, Derek Dreyer, Lindsay Groves, Mark
   Harman, Chris Hawblitzel, Michael Jackson, Bart Jacobs, Shriram
   Krishnamurthi, Emil Klasen, Gary Leavens, Shupeng Loh, Mark Miller,
   Peter Mueller, Toby Murray, Nikolaos Papaspyrou, Matthew Ross Rachar,
   Franklin Shrans, Alexander J. Summers, and members of the WG2.3. This
   work is supported in part by the Royal Society of New Zealand (Te
   Aparangi) Marsden Fund (Te Putea Rangahau a Marsden) under grant VUW1815
   (www.royalsociety.org.nz/what-we- do/funds-and-opportunities/marsden/
   awarded-grants/marsden- fund-highlights/2018-marsden- fund-
   highlights/an-immune-system-forsoftware), and by gifts from the Ethereum
   Foundation, Meta, and Agoric.
CR Albert E, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428277
   Anevlavis T, 2022, ACM T COMPUT LOG, V23, DOI 10.1145/3491216
   Banerjee A, 2005, J ACM, V52, P894, DOI 10.1145/1101821.1101824
   Banerjee Anindya, 2005, LNCS, DOI [10.1007/11531142_17, DOI 10.1007/11531142_17]
   Birkedal Lars, 2021, PROC ACM PROGRAM LAN, DOI [10.1145/3473586, DOI 10.1145/3473586]
   BOKOWSKI B, 1999, OOPLSA, V34, P82, DOI DOI 10.1145/320385.320392
   Bräm C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485523
   Brauner Torben, 2022, STANFORD ENCY PHILOS
   Brotherston J, 2020, LECT NOTES COMPUT SC, V12225, P203, DOI 10.1007/978-3-030-53291-8_13
   Bugliesi M, 2011, 2011 IEEE 24TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P83, DOI 10.1109/CSF.2011.13
   Chlipala Adam., 2017, Certified Programming with Dependent Types
   Clarke D, 2002, ACM SIGPLAN NOTICES, V37, P292, DOI 10.1145/583854.582447
   Clarke D. G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P53
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Davis B, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P379, DOI 10.1145/3297858.3304042
   de Vries E, 2011, LECT NOTES COMPUT SC, V7041, P155, DOI 10.1007/978-3-642-24690-6_12
   Devriese D, 2016, 1ST IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY, P147, DOI 10.1109/EuroSP.2016.22
   DIMOULAS C, 2014, COMP SEC FDN S CSF, P3, DOI DOI 10.1109/CSF.2014.9
   Drossopoulou S, 2020, LECT NOTES COMPUT SC, V12076, P420, DOI 10.1007/978-3-030-45234-6_21
   Drossopoulou Sophia, 2014, CAPABILITY POLICY SP
   Drossopoulou Sophia, 2015, PLAS, DOI [10.1145/2786558.2786564, DOI 10.1145/2786558.2786564]
   Fournet C, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P31, DOI 10.1109/CSF.2007.7
   Gordon AD, 2001, P IEEE CSFW, P145, DOI 10.1109/CSFW.2001.930143
   Grossman S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158136
   Hatcliff J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187678
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Leavens G. T., 2007, JML REFERENCE MANUAL
   Leino KRM, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1488, DOI 10.1109/ICSE.2013.6606754
   LEINO KRM, 2004, ECOOP, V3086, P491, DOI DOI 10.1007/978-3-540-24851-4_22
   Lewis David, 1974, The Journal of Philosophy, V70, P556, DOI DOI 10.2307/2025310
   Mackay Julian, 2022, NECESSITY SPECIFICAT, DOI [10.5281/zenodo.7087932, DOI 10.5281/ZENODO.7087932]
   Maffeis S, 2010, P IEEE S SECUR PRIV, P125, DOI 10.1109/SP.2010.16
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Miller M. J., 2006, THESIS
   Miller Mark S., 2013, ESOP, DOI [10.1007/978-3- 642-37036- 6_1, DOI 10.1007/978-3-642-37036-6_1]
   Miller Mark Samuel, 2008, SAFE ACTIVE CONTENT
   Miller Mark Samuel, 2000, P 4 INT C FIN CRYPT, DOI [DOI 10.1007/3-540-45472-1_24, 10.1007/3- 540- 45472- 1_24]
   Miller Mark Samuel, 2011, COMMUNICATION
   Moore S, 2016, ACM SIGPLAN NOTICES, V51, P214, DOI 10.1145/3022671.2984021
   Murray Toby, 2013, INT C CERT PROGR PRO, DOI [10.1007/978- 3- 642- 35308- 6_12, DOI 10.1007/978-3-642-35308-6_12]
   Murray Toby, 2010, THESIS
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   Noble James, 2003, IWACO
   OHearn Peter W., 2019, P 9 ACM SIGPLAN INT, DOI [DOI 10.1145/3371078, 10 . 1145 / 3371078, 10.1145/3371078, DOI 10.1145/3394451.3401953]
   Patrignani M, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3436809
   Pearce DJ, 2015, SCI COMPUT PROGRAM, V113, P191, DOI 10.1016/j.scico.2015.09.006
   Permenev A, 2020, P IEEE S SECUR PRIV, P1661, DOI 10.1109/SP40000.2020.00024
   Raad A, 2020, LECT NOTES COMPUT SC, V12225, P225, DOI 10.1007/978-3-030-53291-8_14
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   RUSTAN K, 2007, ESOP, V4421, P80, DOI DOI 10.1007/978-3-540-71316-6_7
   Sammler M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371100
   Schaefer Ina, 2018, CONFIDENTIALITY BY C, P502, DOI [10.1007/978- 3- 030-03418- 4_30, DOI 10.1007/978-3-030-03418-4_30]
   Summers Alexander J., 2010, VMCAI, DOI [10.1007/978- 3- 642- 11319- 2_24, DOI 10.1007/978-3-642-11319-2_24]
   Swasey D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133913
   Van Strydonck Thomas, 2022, PROVING FULL SYSTEM
   ZDANCEWIC S, 2001, ESOP ESOP 01, V2028, P46, DOI DOI 10.1007/3-540-45309-1_4
NR 57
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 154
DI 10.1145/3563317
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200031
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Parreaux, L
   Chau, CY
AF Parreaux, Lionel
   Chau, Chun Yin
TI MLstruct: Principal Type Inference in a Boolean Algebra of Structural
   Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE principal type inference; union and intersection types; structural
   typing
ID INTERSECTION; POLYMORPHISM; MODEL
AB Intersection and union types are becoming more popular by the day, entering the mainstream in programming languages like TypeScript and Scala 3. Yet, no language so far has managed to combine these powerful types with principal polymorphic type inference. We present a solution to this problem in MLstruct, a language with subtyped records, equirecursive types, first-class unions and intersections, class-instance matching, and ML-style principal type inference. While MLstruct is mostly structurally typed, it contains a healthy sprinkle of nominality for classes, which gives it desirable semantics, enabling the expression of a powerful form of extensible variants that does not need row variables. Technically, we define the constructs of our language using conjunction, disjunction, and negation connectives, making sure they form a Boolean algebra, and we show that the addition of a few nonstandard subtyping rules gives us enough structure to derive a sound and complete type inference algorithm. With this work, we hope to foster the development of better type inference for present and future programming languages with expressive subtyping systems.
C1 [Parreaux, Lionel; Chau, Chun Yin] HKUST, Hong Kong, Peoples R China.
C3 Hong Kong University of Science & Technology
RP Parreaux, L (corresponding author), HKUST, Hong Kong, Peoples R China.
EM parreaux@ust.hk; cychauab@connect.ust.hk
OI Parreaux, Lionel/0000-0002-8805-0728; Chau, Chun Yin/0000-0003-0323-6644
CR Abadi M, 1996, IEEE S LOG, P242, DOI 10.1109/LICS.1996.561324
   Aiken A., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P31, DOI 10.1145/165180.165188
   Aiken A., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P163, DOI 10.1145/174675.177847
   Aiken Alexander, 1996, CP96 WORKSH SET CONS, P25
   Alpuim J, 2017, LECT NOTES COMPUT SC, V10201, P1, DOI 10.1007/978-3-662-54434-1_1
   AMADIO RM, 1993, ACM T PROGR LANG SYS, V15, P575, DOI 10.1145/155183.155231
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   BARBANERA F, 1995, INFORM COMPUT, V119, P202, DOI 10.1006/inco.1995.1086
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Binder David, 2022, P 7 ACM SIGPLAN INT, DOI [10.1145/3546196.3550163aNpage24, DOI 10.1145/3546196.3550163ANPAGE24]
   Brandt M, 1997, LECT NOTES COMPUT SC, V1210, P63
   Castagna G, 2022, Arxiv, DOI arXiv:1907.05590
   Castagna G, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498674
   Castagna G, 2016, ACM SIGPLAN NOTICES, V51, P378, DOI 10.1145/3022670.2951928
   Castagna Giuseppe, 2012, Object-Oriented Programming A Unified Foundation, P16
   Coppo M., 1980, Notre Dame Journal of Formal Logic, V21, P685, DOI 10.1305/ndjfl/1093883253
   Curtis Pavel, 1990, Ph.D. Dissertation
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Davies R, 2000, ACM SIGPLAN NOTICES, V35, P198, DOI 10.1145/357766.351259
   Dezani-Ciancaglini Van Bakel, 1998, Technical Report
   Dolan S, 2017, ACM SIGPLAN NOTICES, V52, P60, DOI 10.1145/3093333.3009882
   Dolan Stephen, 2017, Ph.D. Dissertation, P26
   Dunfield J, 2012, ACM SIGPLAN NOTICES, V47, P17, DOI 10.1145/2398856.2364534
   EIFRIG J, 1995, SIGPLAN NOTICES, V30, P169, DOI 10.1145/217839.217858
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Frisch A, 2002, IEEE S LOG, P137, DOI 10.1109/LICS.2002.1029823
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Fuh Y.-C., 1989, TAPSOFT '89. Proceedings of the International Joint Conference on Theory and Practice of Software Development. Vol.2: Advanced Seminar on Foundations of Innovative Software II and Colloquium on Current Issues in Programming Languages (CCIPL), P167
   FUH YC, 1990, THEOR COMPUT SCI, V73, P155, DOI 10.1016/0304-3975(90)90144-7
   Gapeyev V, 2002, J FUNCT PROGRAM, V12, P511, DOI 10.1017/S0956796802004318
   Garrigue Jacques, 1998, ML WORKSH, V13, P27
   Garrigue Jacques, 2001, APLAS, P329
   Gaster BenedictR., 1996, A polymorphic type system for extensible records and variants
   Ghilezan S., 1996, Notre Dame Journal of Formal Logic, V37, P44, DOI 10.1305/ndjfl/1040067315
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Hosoya H, 2005, ACM T PROGR LANG SYS, V27, P46, DOI 10.1145/1053468.1053470
   [黄相璇 Huang Xiangxuan], 2021, [高分子通报, Polymer Bulletin], P89
   Jim Trevor, 1999, Type Inference in Systems of Recursive Types With Subtyping, P25
   KOZEN D, 1994, J COMPUT SYST SCI, V49, P306, DOI 10.1016/S0022-0000(05)80051-0
   MACQUEEN D, 1986, INFORM CONTROL, V71, P95, DOI 10.1016/S0019-9958(86)80019-5
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Mitchell JohnC., 1984, Proceedings of the 11th ACM SIGACTSIGPLAN symposium on Principles of programming languages, P175, DOI [10.1145/800017.800529, DOI 10.1145/800017.800529]
   Morris James Hiram, 1969, Ph.D. Dissertation
   Muehlboeck F, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276482
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Ohori A, 1995, ACM T PROGR LANG SYS, V17, P844, DOI 10.1145/218570.218572
   Oliveira Bruno C. d. S., 2020, 34 EUR C OBJ OR PROG, V166, P1, DOI [10.4230/LIPIcs.ECOOP.2020.29 aNpage 11, DOI 10.4230/LIPICS.ECOOP.2020.29ANPAGE11]
   Palsberg J., 1997, Formal Aspects of Computing, V9, P49, DOI 10.1007/BF01212524
   Parreaux Lionel, 2022, Zenodo, DOI 10.5281/ZENODO.7121838
   Parreaux L, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409006
   Parreaux Lionel, 2022, Technical Report
   Pearce DJ, 2013, LECT NOTES COMPUT SC, V7737, P335
   Petrucciani Tommaso, 2019, Ph.D. Dissertation.
   Pierce Benjamin C, 1991, Ph.D. Dissertation.
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pottier F, 1996, ACM SIGPLAN NOTICES, V31, P122, DOI 10.1145/232629.232642
   Pottier F, 2003, IEEE S LOG, P331, DOI 10.1109/LICS.2003.1210073
   Pottier F, 1999, ACM SIGPLAN NOTICES, V34, P228, DOI 10.1145/291251.289448
   Pottier F, 2001, INFORM COMPUT, V170, P153, DOI 10.1006/inco.2000.2963
   Pottier Francois, 1998, Research Report RR-3483
   Rehman Baber, 2022, 36 EUR C OBJ OR PROG, V222, DOI [10.4230/LIPIcs.ECOOP.2022.25 aNpages 24 and 26, DOI 10.4230/LIPICS.ECOOP.2022.25ANPAGES24AND26]
   Remy Didier., 1994, THEORETICAL ASPECTS, P67
   Reynolds John C., 1997, Design of the Programming Language Forsythe, P173, DOI DOI 10.1007/978-1-4612-4118-8_9
   Simonet V, 2003, LECT NOTES COMPUT SC, V2895, P283
   SMITH GP, 1991, PROG OBES R, P25
   Stansifer R., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P88, DOI 10.1145/73560.73568
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Trifonov V., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P349
   White Leo, 2015, Row polymorphism, P27
NR 69
TC 8
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 141
DI 10.1145/3563304
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200018
OA gold
DA 2024-07-18
ER

PT J
AU Accattoli, B
   Guerrieri, G
AF Accattoli, Beniamino
   Guerrieri, Giulio
TI The Theory of Call-by-Value Solvability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE solvability; call-by-value; intersection types
ID LAMBDA-CALCULUS; DENOTATIONAL SEMANTICS; INTERSECTION TYPES; EXECUTION
   TIME; MODELS; ACCOUNT
AB The semantics of the untyped (call-by-name)lambda-calculus is a well developed field built around the concept of solvable terms, which are elegantly characterized in many different ways. In particular, unsolvable terms provide a consistent notion of meaningless term. The semantics of the untyped call-by-value lambda-calculus (CbV) is instead still in its infancy, because of some inherent difficulties but also because CbV solvable terms are less studied and understood than in call-by-name. On the one hand, we show that a carefully crafted presentation of CbV allows us to recover many of the properties that solvability has in call-by-name, in particular qualitative and quantitative characterizations via multi types. On the other hand, we stress that, in CbV, solvability plays a different role: identifying unsolvable terms as meaningless induces an inconsistent theory.
C1 [Accattoli, Beniamino] INRIA, Rocquencourt, France.
   [Accattoli, Beniamino] Ecole Polytech, LIX, UMR 7161, Paris, France.
   [Guerrieri, Giulio] Huawei, Cent Software Inst, Edinbugh Res Ctr, Edinburgh, Midlothian, Scotland.
C3 Inria; Huawei Technologies
RP Accattoli, B (corresponding author), INRIA, Rocquencourt, France.; Accattoli, B (corresponding author), Ecole Polytech, LIX, UMR 7161, Paris, France.
EM beniamino.accattoli@inria.fr; giulio.guerrieri@huawei.com
RI Guerrieri, Giulio/GZA-5767-2022
OI Guerrieri, Giulio/0000-0002-0469-4279; Accattoli,
   Beniamino/0000-0003-4944-9944
CR ABRAMSKY S, 1991, ANN PURE APPL LOGIC, V51, P1, DOI 10.1016/0168-0072(91)90065-T
   Accattoli B, 2023, Arxiv, DOI arXiv:2104.13979
   Accattoli B, 2022, Arxiv, DOI arXiv:2207.08697
   Accattoli B, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470726
   Accattoli B, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236789
   Accattoli B, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434332
   Accattoli B, 2019, PROCEEDINGS OF THE 21ST INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2019), DOI 10.1145/3354166.3354169
   Accattoli B, 2019, LECT NOTES COMPUT SC, V11423, P410
   Accattoli B, 2018, LECT NOTES COMPUT SC, V11275, P45, DOI 10.1007/978-3-030-02768-1_3
   Accattoli B, 2017, INFORM COMPUT, V255, P224, DOI 10.1016/j.ic.2017.01.003
   Accattoli B, 2016, LECT NOTES COMPUT SC, V10017, P206, DOI 10.1007/978-3-319-47958-3_12
   Accattoli B, 2015, THEOR COMPUT SCI, V606, P2, DOI 10.1016/j.tcs.2015.08.006
   Accattoli B, 2015, IEEE S LOG, P141, DOI 10.1109/LICS.2015.23
   Accattoli B, 2012, LECT NOTES COMPUT SC, V7294, P4, DOI 10.1007/978-3-642-29822-6_4
   Accattoli Beniamino, 2012, LIPIcs, V15, P22, DOI [10.4230, DOI 10.4230/LIPICS.RTA]
   Alves Sandra, 2019, LIPICS, V175
   [Anonymous], 1984, Studies in Logic
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Barendregt Hendrik Pieter, 1971, THESIS U UTRECHT
   Barendregt Hendrik Pieter, 1977, C INT LOGIQUE CLERMO, P209
   Bernadet A, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:3)2013
   Bucciarelli A, 2001, ANN PURE APPL LOGIC, V109, P205, DOI 10.1016/S0168-0072(00)00056-7
   Bucciarelli A, 2021, LOG METH COMPUT SCI, V17, DOI 10.23638/LMCS-17(1:7)2021
   Bucciarelli A, 2017, LOG J IGPL, V25, P431, DOI 10.1093/jigpal/jzx018
   Bucciarelli Antonio, 2020, Lecture Notes in Computer Science, V12073, P13, DOI [DOI 10.1007/978-3-030-59025, 10.1007/978-3-030-59025-3_2]
   Carraro A, 2014, LECT NOTES COMPUT SC, V8412, P103
   Coppo M., 1980, Notre Dame Journal of Formal Logic, V21, P685, DOI 10.1305/ndjfl/1093883253
   COPPO M, 1987, INFORM COMPUT, V72, P85, DOI 10.1016/0890-5401(87)90042-3
   Coppo M., 1978, Archiv fur Mathematische Logik und Grundlagenforschung, V19, P139, DOI 10.1007/BF02011875
   Curien PL, 2000, ACM SIGPLAN NOTICES, V35, P233, DOI 10.1145/357766.351262
   Dal Lago U, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434313
   de Carvalho D, 2011, THEOR COMPUT SCI, V412, P1884, DOI 10.1016/j.tcs.2010.12.017
   de Carvalho D., 2007, Semantiques de la logique lineaire et temps de calcul
   De Carvalho D, 2018, MATH STRUCT COMP SCI, V28, P1169, DOI 10.1017/S0960129516000396
   de Carvalho D, 2016, INFORM COMPUT, V248, P104, DOI 10.1016/j.ic.2015.12.010
   Dyckhoff R, 2007, J LOGIC COMPUT, V17, P1109, DOI 10.1093/logcom/exm037
   Egidi L., 1992, Fundamenta Informaticae, V16, P149
   Ehrhard T., 2012, LIPIcs, P259, DOI DOI 10.4230/LIPICS.CSL
   García-Pérez A, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(2:12)2016
   Gardner P., 1994, Theoretical Aspects of Computer Software. International Symposium TACS '94 Proceedings, P555
   Ghilezan S, 2001, J COMPUT SYST SCI, V62, P1, DOI 10.1006/jcss.2000.1703
   GIRARD JY, 1988, ANN PURE APPL LOGIC, V37, P129, DOI 10.1016/0168-0072(88)90025-5
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Grégoire B, 2002, ACM SIGPLAN NOTICES, V37, P235, DOI 10.1145/583852.581501
   Guerrieri G., 2015, 2 INT WORKSHOP REWRI, V46, P3
   Guerrieri G, 2019, ELECTRON P THEOR COM, P57, DOI 10.4204/EPTCS.293.5
   Guerrieri G, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(4:29)2017
   Guerrieri Giulio, 2015, LEIBNIZ INT P INFORM, V38, P211
   Herbelin H, 2009, LECT NOTES COMPUT SC, V5608, P142, DOI 10.1007/978-3-642-02273-9_12
   HINDLEY R, 1980, Z MATH LOGIK, V26, P289, DOI 10.1002/malq.19800261902
   HONSELL F, 1992, J COMPUT SYST SCI, V45, P49, DOI 10.1016/0022-0000(92)90040-P
   Kennaway Richard, 1999, J FUNCT LOGIC PROGRA, V1999, P1
   Kerinec Axel, 2021, LIPICS, V195, DOI [10.4230/LIPIcs.FSCD.2021.7, DOI 10.4230/LIPICS.FSCD.2021.7]
   Kesner D, 2020, IEEE S LOG, P619, DOI 10.1145/3373718.3394774
   Kesner D, 2021, LECT NOTES COMPUT SC, V12650, P344, DOI 10.1007/978-3-030-71995-1_18
   Kesner Delia, 2022, LIPICS, V27, P20, DOI [10.4230/LIPIcs.CSL.2022.27, DOI 10.4230/LIPICS.CSL.2022.27]
   Kfoury AJ, 2000, J LOGIC COMPUT, V10, P411, DOI 10.1093/logcom/10.3.411
   Krivine J., 1993, Ellis Horwood series in computers and their applications
   Lassen S, 2005, IEEE S LOG, P345
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   LONGO G, 1983, ANN PURE APPL LOGIC, V24, P153, DOI 10.1016/0168-0072(83)90030-1
   Manzonetto G, 2019, FUND INFORM, V170, P241, DOI 10.3233/FI-2019-1862
   Maraist J, 1999, THEOR COMPUT SCI, V228, P175, DOI 10.1016/S0304-3975(98)00358-2
   Mazza D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158094
   Moggi E., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P14, DOI 10.1109/LICS.1989.39155
   Moggi Eugenio, 1988, ECSLFCS8866
   MOLLER NEERGAARD P., 2004, P 9 ACM SIGPLAN INT, P138, DOI DOI 10.1145/1016850.1016871
   Paolini L, 1999, RAIRO-INF THEOR APPL, V33, P507, DOI 10.1051/ita:1999130
   Paolini L., 2001, ICTCS 2001, DOI DOI 10.1007/3-540-45446-2_5
   Pitts Andrew, 2012, CAMBRIDGE TRACTS THE, V52, P197
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   PLOTKIN GD, 1993, THEOR COMPUT SCI, V121, P351, DOI 10.1016/0304-3975(93)90094-A
   Pravato A., 1999, Mathematical Structures in Computer Science, V9, P617, DOI 10.1017/S0960129598002722
   Ronchi Della Rocca S., 2004, TEXTS TCS EATCS SERI
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Sabry A, 1997, ACM T PROGR LANG SYS, V19, P916, DOI 10.1145/267959.269968
   Santo Jose Espirito, 2020, LIPICS, V152, DOI [10.4230/LIPIcs.CSL.2020.35, DOI 10.4230/LIPICS.CSL.2020.35]
   Scott D.S., 1980, HB CURRY ESSAYS COMB, P403
   Takahashi M., 1994, Logic, language and computation. Festschrift in honor of Satoru Takasu, P117, DOI 10.1007/BFb0032397
   Wadsworth C. P., 1976, SIAM Journal on Computing, V5, P488, DOI 10.1137/0205036
   Wadsworth Christopher Peter, 1971, Ph.D. Dissertation
NR 81
TC 2
Z9 2
U1 2
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 121
DI 10.1145/3547652
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000032
OA gold
DA 2024-07-18
ER

PT J
AU Li, Y
   Weirich, S
AF Li, Yao
   Weirich, Stephanie
TI Program Adverbs and Tlon Embeddings
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE formal verification; mechanized reasoning; embedding
ID MONADS
AB Free monads (and their variants) have become a popular general-purpose tool for representing the semantics of effectful programs in proof assistants. These data structures support the compositional definition of semantics parameterized by uninterpreted events, while admitting a rich equational theory of equivalence. But monads are not the only way to structure effectful computation, why should we limit ourselves?
   In this paper, inspired by applicative functors, selective functors, and other structures, we define a collection of data structures and theories, which we call program adverbs, that capture a variety of computational patterns. Program adverbs are themselves composable, allowing them to be used to specify the semantics of languages with multiple computation patterns. We use program adverbs as the basis for a new class of semantic embeddings called Tlon embeddings. Compared with embeddings based on free monads, Tlon embeddings allow more flexibility in computational modeling of effects, while retaining more information about the program's syntactic structure.
C1 [Li, Yao] Portland State Univ, 1900 SW 4th Ave, Portland, OR 97201 USA.
   [Weirich, Stephanie] Univ Penn, 3330 Walnut St, Philadelphia, PA 19104 USA.
C3 Portland State University; University of Pennsylvania
RP Li, Y (corresponding author), Portland State Univ, 1900 SW 4th Ave, Portland, OR 97201 USA.
EM hnkfliyao@gmail.com; sweirich@cis.upenn.edu
RI Li, Yao/GXW-0420-2022
OI Weirich, Stephanie/0000-0002-6756-9168; Li, Yao/0000-0001-8720-883X
FU National Science Foundation [1521539, 1703835, 2006535]; Division of
   Computing and Communication Foundations; Direct For Computer & Info Scie
   & Enginr [1703835] Funding Source: National Science Foundation; Division
   of Computing and Communication Foundations; Direct For Computer & Info
   Scie & Enginr [1521539, 2006535] Funding Source: National Science
   Foundation
FX We thank the anonymous ICFP'22 reviewers, as well as the POPL'22 and
   ESOP'22 reviewers, whose valuable feedback helped improve this paper. We
   thank various researchers for their feedback during their discussions
   with the authors, including Stephanie Balzer, Conal Elliott, Yannick
   Forster, Paul He, Apoorv Ingle, Ende Jin, Konstantinos Kallas,
   Anastasiya Kravchuk-Kirilyuk, Andrey Mokhov, Benjamin C. Pierce, Nick
   Rioux, Andre Scedrov, Antal Spector-Zabusky, Caleb Stanford, Kathrin
   Stark, Nikhil Swamy, Val Tannen, Steve Zdancewic, Weixin Zhang, and
   Yizhou Zhang, etc. We thank the anonymous ICFP'22 artifact reviewers for
   their comments and suggestions that helped improve the artifact. We
   thank Paolo Giarrusso (on CoqClub Zulipchat), Li-yao Xia, and Irene Yoon
   for helping with some Coq issues the authors encountered when developing
   the artifact. This material is based upon work supported by the National
   Science Foundation under Grant No. 1521539, Grant No. 1703835, and Grant
   No. 2006535. Any opinions, findings, and conclusions or recommendations
   expressed in this material are those of the authors and do not
   necessarily reflect the views of the National Science Foundation.
CR Abbott M, 2003, LECT NOTES COMPUT SC, V2620, P23
   Ahman D., 2014, LEIBNIZ INT P INFORM, V13, P1, DOI DOI 10.4230/LIPICS.TYPES.2013.1
   Appel A.W., 2014, Program logics for certified compilers
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   Borges Jorge Luis, 1940, LABYRINTHS SELECTED
   Boulton Richard J., 1992, P IFIP T, VA- 10, P129
   Breitner J, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796820000283
   Capretta V, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:1)2005
   Capriotti P, 2014, ELECTRON P THEOR COM, P2, DOI 10.4204/EPTCS.153.2
   Chlipala A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473599
   Christiansen J, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '19), P125, DOI 10.1145/3331545.3342592
   Coq Development Team, 2022, COQ PROOF ASSISTANT
   Delaware B, 2013, ACM SIGPLAN NOTICES, V48, P207, DOI 10.1145/2480359.2429094
   Doaitse Swierstra S., 1996, Advanced Functional Programming. Second International School. Tutorial Text, P184
   Dylus Sandra, 2019, ART SCI ENG PROGRAM, V3, P8, DOI DOI 10.22152/PROGRAMMING-JOURNAL.ORG/2019/3/8
   Ernst E., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P303
   Forster Y, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P186, DOI 10.1145/3372885.3373817
   Foster S, 2021, Arxiv, DOI arXiv:2105.05133
   Gu RH, 2019, COMMUN ACM, V62, P89, DOI 10.1145/3356903
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Jones M. P., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P97
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Koh N, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P234, DOI 10.1145/3293880.3294106
   Kravchuk-Kirilyuk Anastasiya, 2021, P 27 INT C TYPES PRO
   Lampropoulos L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158133
   Lesani M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527324
   Letan T, 2021, FORM ASP COMPUT, V33, P127, DOI 10.1007/s00165-020-00523-2
   Li Yao, 2022, Zenodo
   Lindley S, 2011, ELECTRON NOTES THEOR, V229, P97, DOI 10.1016/j.entcs.2011.02.018
   Lorch JR, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P197, DOI 10.1145/3385412.3385971
   Maillard K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341708
   Mansky W, 2020, LECT NOTES COMPUT SC, V12075, P428, DOI 10.1007/978-3-030-44914-8_16
   Marlow S, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P325, DOI 10.1145/2628136.2628144
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   McBride C, 2015, LECT NOTES COMPUT SC, V9129, P257, DOI 10.1007/978-3-319-19797-5_13
   Milewski B., 2018, FREE MONOIDAL FUNCTO
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Mokhov A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341694
   Mokhov A, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000088
   Mokhov Andrey., 2019, IMPLEMENTATION SELEC
   Nigron Pierre., 2021, 12 INT C INTERACTIVE, p29:1, DOI DOI 10.4230/LIPICS.ITP.2021.29
   Oliveira BCD, 2009, LECT NOTES COMPUT SC, V5653, P269, DOI 10.1007/978-3-642-03013-0_13
   Pai VS, 1999, PROCEEDINGS OF THE 1999 USENIX ANNUAL TECHNICAL CONFERENCE, P199
   Paraskevopoulou Z, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P966, DOI 10.1145/3519939.3523707
   Piróg M, 2014, ELECTRON NOTES THEOR, V308, P273, DOI 10.1016/j.entcs.2014.10.015
   Prinz Jacob, 2022, 13 INT C INTERACTIVE, DOI DOI 10.4230/LIPICS.ITP.2022.19
   Silver L, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434307
   Sozeau M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341690
   Spector-Zabusky A., 2018, P 7 ACM SIGPLAN INT, P14, DOI [10.1145/3167092, DOI 10.1145/3167092]
   Svenningsson J, 2013, TRENDS FUNCTIONAL PR, V7829, P21, DOI [10.1007/978-3-642-40447-4_2, DOI 10.1007/978-3-642-40447-42]
   Swamy N, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409003
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   Swierstra W, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341707
   Wadler P., 1992, MATH STRUCT COMP SCI, V2, P461, DOI [10.1017/S0960129500001560, DOI 10.1017/S0960129500001560]
   Wadler Philip, 1998, The Expression Problem
   Wadler Philip., 1990, RECURSIVE TYPES FREE
   Willis J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409002
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Xia Li-yao., 2019, FREE APPLICATIVE FUN
   Ye Kangfeng, 2022, 23 INT C FORMAL ENG
   Yoon Irene, 2022, PROC ACM PROGRAM LAN, V6, DOI [10.1145/3547632, DOI 10.1145/3547632]
   Zakowski Y, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473572
   Zakowski Y, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P71, DOI 10.1145/3372885.3373813
   Zhang Hengchu., 2021, 12 INT C INTERACTIVE, V193, p32:1, DOI DOI 10.4230/LIPICS.ITP.2021.32
NR 65
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 101
DI 10.1145/3547632
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000012
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Lesani, M
   Xia, LY
   Kaseorg, A
   Bell, CJ
   Chlipala, A
   Pierce, BC
   Zdancewic, S
AF Lesani, Mohsen
   Xia, Li-yao
   Kaseorg, Anders
   Bell, Christian J.
   Chlipala, Adam
   Pierce, Benjamin C.
   Zdancewic, Steve
TI C4: Verified Transactional Objects
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrency; objects; linearizability; serializability; verification
ID SEMANTICS
AB Transactional objects combine the performance of classical concurrent objects with the high-level programmability of transactional memory. However, verifying the correctness of transactional objects is tricky, requiring reasoning simultaneously about classical concurrent objects, which guarantee the atomicity of individual methods-the property known as linearizability-and about software-transactional-memory libraries, which guarantee the atomicity of user-defined sequences of method calls-or serializability.
   We present a formal-verification framework called C4, built up from the familiar notion of linearizability and its compositional properties, that allows proof of both kinds of libraries, along with composition of theorems from both styles to prove correctness of applications or further libraries. We apply the framework in a significant case study, verifying a transactional set object built out of both classical and transactional components following the technique of transactional predication; the proof is modular, reasoning separately about the transactional and nontransactional parts of the implementation. Central to our approach is the use of syntactic transformers on interaction trees-i.e., transactional libraries that transform client code to enforce particular synchronization disciplines. Our framework and case studies are mechanized in Coq.
C1 [Lesani, Mohsen] Univ Calif Riverside, Riverside, CA 92521 USA.
   [Xia, Li-yao; Pierce, Benjamin C.; Zdancewic, Steve] Univ Penn, Philadelphia, PA 19104 USA.
   [Kaseorg, Anders; Bell, Christian J.; Chlipala, Adam] MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
C3 University of California System; University of California Riverside;
   University of Pennsylvania; Massachusetts Institute of Technology (MIT)
RP Lesani, M (corresponding author), Univ Calif Riverside, Riverside, CA 92521 USA.
RI Zdancewic, Steve/JXL-6845-2024
OI Zdancewic, Steve/0000-0002-3516-1512; Pierce,
   Benjamin/0000-0001-7839-1636
FU National Science Foundation [1942711, CCF-1521584]; Direct For Computer
   & Info Scie & Enginr [1942711] Funding Source: National Science
   Foundation; Division of Computing and Communication Foundations
   [1942711] Funding Source: National Science Foundation
FX This work was funded by National Science Foundation grant 1942711 and
   grant CCF-1521584, for the Expedition on the Science of Deep
   Specification.
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Adve SV, 1996, COMPUTER, V29, P66, DOI 10.1109/2.546611
   Antonopoulos Timos., 2016, Vertical composition of reversible atomic objects
   Armstrong Alasdair, 2017, Formal Techniques for Distributed Objects, Components and Systems. 37th IFIP WG 6.1 International Conference, FORTE 2017, held as part of the 12th International Federated Conference on Distributed Computing Techniques, DisCoTec 2017. Proceedings: LNCS 10321, P50, DOI 10.1007/978-3-319-60225-7_4
   Assa G, 2020, PROCEEDINGS OF THE 25TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '20), P405, DOI 10.1145/3332466.3374514
   Attiya Hagit., 2017, Journal of the ACM, V65, P1
   Batty M, 2013, ACM SIGPLAN NOTICES, V48, P235, DOI 10.1145/2480359.2429099
   Bouajjani A, 2017, LECT NOTES COMPUT SC, V10427, P542, DOI 10.1007/978-3-319-63390-9_28
   Bronson NG, 2010, PODC 2010: PROCEEDINGS OF THE 2010 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P6, DOI 10.1145/1835698.1835703
   Cerone A, 2014, LECT NOTES COMPUT SC, V8573, P98
   Chlipala A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473599
   Dalessandro L, 2010, LECT NOTES COMPUT SC, V6272, P2, DOI 10.1007/978-3-642-15291-7_2
   Dickerson T, 2019, LECT NOTES COMPUT SC, V11893, P313, DOI 10.1007/978-3-030-34175-6_16
   Doherty S, 2013, FORM ASP COMPUT, V25, P769, DOI 10.1007/s00165-012-0225-8
   Elizarov A, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P425, DOI 10.1145/3293883.3301491
   Emmi M, 2019, LECT NOTES COMPUT SC, V11562, P534, DOI 10.1007/978-3-030-25543-5_30
   Feng Xinyu, 2009, POPL 09
   Filipovic I, 2010, THEOR COMPUT SCI, V411, P4379, DOI 10.1016/j.tcs.2010.09.021
   Golan-Gueta G, 2013, ACM SIGPLAN NOTICES, V48, P263, DOI 10.1145/2499370.2462172
   Gotsman A, 2012, LECT NOTES COMPUT SC, V7454, P256, DOI 10.1007/978-3-642-32940-1_19
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Guerraoui R., 1995, Theory and Practice of Object Systems, V1, P89
   Guerraoui R, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P175, DOI 10.1145/1345206.1345233
   Harris Tim., 2005, PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, P48, DOI DOI 10.1145/1065944.1065952
   Hawblitzel C, 2015, LECT NOTES COMPUT SC, V9207, P449, DOI 10.1007/978-3-319-21668-3_26
   HERLIHY M, 1993, CONF PROC INT SYMP C, P289, DOI 10.1145/173682.165164
   Herlihy M, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P207, DOI 10.1145/1345206.1345237
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Herman N, 2016, PROCEEDINGS OF THE ELEVENTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS, (EUROSYS 2016), DOI 10.1145/2901318.2901348
   Hobor A, 2008, LECT NOTES COMPUT SC, V4960, P353
   Jagannathan S, 2005, SCI COMPUT PROGRAM, V57, P164, DOI 10.1016/j.scico.2005.03.001
   Jagannathan S, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2601339
   Jones C. B., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P321
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Koh Nicolas, 2019, 8 ACM SIGPLAN INT C
   Kragl B, 2020, LECT NOTES COMPUT SC, V12224, P275, DOI 10.1007/978-3-030-53288-8_14
   LaBorde P, 2019, PROCEEDINGS OF THE TENTH INTERNATIONAL WORKSHOP ON PROGRAMMING MODELS AND APPLICATIONS FOR MULTICORES AND MANYCORES (PMAM 2019), P41, DOI 10.1145/3303084.3309491
   Lamar Kenneth., 2020, Proceedings of the Eleventh International Workshop on Programming Models and Applications for Multicores and Manycores, P1
   Lea D., 2000, CONCURRENT PROGRAMMI
   Lesani M, 2014, LECT NOTES COMPUT SC, V8559, P550, DOI 10.1007/978-3-319-08867-9_37
   Lesani M, 2012, LECT NOTES COMPUT SC, V7454, P516, DOI 10.1007/978-3-642-32940-1_36
   Lesani Mohsen, 2022, C4 VERIFIED T OBJECT, DOI [10.5281/zenodo.6342476, DOI 10.5281/ZENODO.6342476]
   Lesani Mohsen., 2012, Workshop on the theory of transactional memory, P137
   Liang HJ, 2013, ACM SIGPLAN NOTICES, V48, P459, DOI 10.1145/2499370.2462189
   Liu P, 2014, ACM SIGPLAN NOTICES, V49, P543, DOI [10.1145/2714064.2660217, 10.1145/2660193.2660217]
   Liu Peng., 2013, Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2013, P158, DOI DOI 10.1145/2491411.2491435
   LYNCH N, 1995, INFORM COMPUT, V121, P214, DOI 10.1006/inco.1995.1134
   Menon V, 2008, ACM SIGPLAN NOTICES, V43, P15, DOI 10.1145/1402227.1402235
   Murawski AS, 2019, J LOG ALGEBR METHODS, V104, P86, DOI 10.1016/j.jlamp.2019.01.002
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Papadimitriou Christos H., 1979, J ACM, V26
   Peterson C, 2017, ACM T ARCHIT CODE OP, V14, DOI 10.1145/3148964
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Schellhorn Gerhard, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P243, DOI 10.1007/978-3-642-31424-7_21
   Scott Michael., 2006, Sequential specification of transactional memory semantics
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   Shacham Ohad., 2011, Proceedings of the 2011 ACM international conference on Object oriented programming systems languages and applications, OOPSLA'11, P51, DOI DOI 10.1145/2048066.2048073
   Shavit N., 1995, Proceedings of the Fourteenth Annual ACM Symposium on Principles of Distributed Computing, P204, DOI 10.1145/224964.224987
   Spiegelman A, 2016, ACM SIGPLAN NOTICES, V51, P682, DOI [10.1145/2980983.2908112, 10.1145/2908080.2908112]
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P343, DOI 10.1145/2480359.2429111
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   Windsor M, 2017, LECT NOTES COMPUT SC, V10426, P544, DOI 10.1007/978-3-319-63387-9_27
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Zakowski Yannick, 2020, P 9 ACM SIGPLAN INT
   Zhang DL, 2018, ACM TRANS PARALLEL C, V5, DOI 10.1145/3209690
NR 69
TC 9
Z9 12
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 80
DI 10.1145/3527324
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300016
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Dal Lago, U
   Gavazzo, F
AF Dal Lago, Ugo
   Gavazzo, Francesco
TI Effectful Program Distancing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Logical Relations; Program Distances; Lambda Calculus; Monads; Metrics
AB Semantics is traditionally concerned with program equivalence, in which all pairs of programs which are not equivalent are treated the same, and simply dubbed as incomparable. In recent years, various forms of program metrics have been introduced such that the distance between non-equivalent programs is measured as an element of an appropriate quantale. By letting the underlying quantale vary as the type of the compared programs become more complex, the recently introduced framework of differential logical relations allows for a new contextual form of reasoning. In this paper, we show that all this can be generalised to effectful higherorder programs, in which not only the values, but also the effects computations produce can be appropriately distanced in a principled way. We show that the resulting framework is flexible, allowing various forms of effects to be handled, and that it provides compact and informative judgments about program differences.
C1 [Dal Lago, Ugo; Gavazzo, Francesco] Univ Bologna, Bologna, Italy.
   [Dal Lago, Ugo; Gavazzo, Francesco] INRIA, Inria Sophia Mediterranee, Sophia Antipolis, France.
C3 University of Bologna; Inria
RP Dal Lago, U (corresponding author), Univ Bologna, Bologna, Italy.; Dal Lago, U (corresponding author), INRIA, Inria Sophia Mediterranee, Sophia Antipolis, France.
EM ugo.dallago@unibo.it; francesco.gavuzo2@unibo.it
RI ; Dal Lago, Ugo/K-9621-2015
OI GAVAZZO, FRANCESCO/0000-0002-2159-0615; Dal Lago,
   Ugo/0000-0001-9200-070X
FU ERC CoG "DIAPASoN" [818616]; European Research Council (ERC) [818616]
   Funding Source: European Research Council (ERC)
FX The authors would like to thank the anonymous referees for their
   valuable comments and helpful suggestions. This work is supported by the
   ERC CoG "DIAPASoN" under Grant No. 818616.
CR ABADI M, 1993, THEOR COMPUT SCI, V121, P9, DOI 10.1016/0304-3975(93)90082-5
   Aguirre A, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000145
   Alvarez-Picallo M, 2019, LECT NOTES COMPUT SC, V11425, P45, DOI 10.1007/978-3-030-17127-8_3
   [Anonymous], 2015, Semantics of Probabilistic Processes: An Operational Approach
   [Anonymous], 1996, Structure and interpretation of computer programs
   [Anonymous], 1990, Introduction to Lattices and Order
   Backhouse R., 1993, Formal program development. IFIP TC2/WG 2.1 state-of-the-art report, P7
   Baldan P, 2018, LOG METH COMPUT SCI, V14, DOI 10.23638/LMCS-14(3:20)2018
   Barr M., 1970, LECT NOTES MATH, V137, P39
   Barthe G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158145
   Barthe G, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P749, DOI 10.1145/2933575.2934554
   Barthe G, 2015, ACM SIGPLAN NOTICES, V50, P55, DOI [10.1145/2775051.2677000, 10.1145/10.1145/2676726.2677000]
   Barthe G, 2014, P IEEE CSFW, P411, DOI 10.1109/CSF.2014.36
   Barthe G, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2492061
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Bird Richard, 1997, Algebra of Programming
   Boston B, 2015, ACM SIGPLAN NOTICES, V50, P470, DOI [10.1145/2858965.2814301, 10.1145/2814270.2814301]
   Cai YF, 2014, ACM SIGPLAN NOTICES, V49, P145, DOI 10.1145/2666356.2594304
   Carbin M, 2013, ACM SIGPLAN NOTICES, V48, P33, DOI [10.1145/2544173.2509546, 10.1145/2509136.2509546]
   Carbin M, 2012, ACM SIGPLAN NOTICES, V47, P169, DOI 10.1145/2345156.2254086
   Chatzikokolakis Konstantinos, 2014, CONCUR 2014 - Concurrency Theory. 25th International Conference, CONCUR 2014. Proceedings: LNCS 8704, P32, DOI 10.1007/978-3-662-44584-6_4
   Chaudhuri S., 2011, P 19 ACM SIGSOFT S 1, P102, DOI DOI 10.1145/2025113.2025131
   Chaudhuri S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P57, DOI 10.1145/1706299.1706308
   Çiçek E, 2017, ACM SIGPLAN NOTICES, V52, P316, DOI 10.1145/3093333.3009858
   Clementino MM, 2004, APPL CATEGOR STRUCT, V12, P127, DOI 10.1023/B:APCS.0000018144.87456.10
   Crubillé R, 2017, LECT NOTES COMPUT SC, V10201, P341, DOI 10.1007/978-3-662-54434-1_13
   Crubillé R, 2015, IEEE S LOG, P633, DOI 10.1109/LICS.2015.64
   Dal Lago DLG21b Ugo, 2021, LIPICS, V195, p23:1, DOI [10.4230/LIPIcs.FSCD.2021.23, DOI 10.4230/LIPICS.FSCD.2021.23]
   Dal Lago U, 2017, P 32 ANN ACM IEEE S, P1
   Dal Lago U, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498692
   Dal Lago U, 2021, THEOR COMPUT SCI, V895, P34, DOI 10.1016/j.tcs.2021.09.027
   Dal Lago U, 2019, ELECTRON NOTES THEOR, V347, P121, DOI 10.1016/j.entcs.2019.09.007
   Dal Lago U, 2020, THEOR COMPUT SCI, V813, P234, DOI 10.1016/j.tcs.2019.12.025
   Dal Lago U, 2019, LECT NOTES COMPUT SC, V11423, P263, DOI 10.1007/978-3-030-17184-1_10
   Dal Lago U, 2014, ACM SIGPLAN NOTICES, V49, P297, DOI 10.1145/2535838.2535872
   Dal Lago Ugo, 2017, P ICTCS 2017, P87
   Dal Lago Ugo, 2019, P ICALP 2019, p111:1, DOI DOI 10.4230/LIPICS.ICALP.2019.111
   Dal Lago Ugo, 2020, CEUR Workshop Proceedings, V2756, P101
   DAntoni Loris, 2013, P 1 ANN WORKSH FUNCT, P43, DOI [DOI 10.1145/2505351.2505353, 10.1145/2505351, DOI 10.1145/2505351]
   de Amorim AA, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785715
   de Amorim AA, 2017, ACM SIGPLAN NOTICES, V52, P545, DOI [10.1145/3093333.3009890, 10.1145/3009837.3009890]
   Desharnais J, 2004, THEOR COMPUT SCI, V318, P323, DOI 10.1016/j.tcs.2003.09.013
   Du WJ, 2016, LECT NOTES COMPUT SC, V9984, P67, DOI 10.1007/978-3-319-47677-3_5
   ESTIVILLCASTRO V, 1992, COMPUT SURV, V24, P441, DOI 10.1145/146370.146381
   Flagg B, 1997, THEOR COMPUT SCI, V177, P111, DOI 10.1016/S0304-3975(97)00236-3
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Gavazzo F, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P452, DOI 10.1145/3209108.3209149
   Gavazzo Francesco, 2019, THESIS U BOLOGNA
   Gebler D, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(4:12)2016
   Giarrusso P.G, 2018, THESIS U TUBINGEN
   Harper R, 2016, Practical Foundations for Programming Languages
   Hofmann D, 2014, ENCYCLOP MATH APPL, V153, P1, DOI 10.1017/CBO9781107517288
   Hofmann D, 2007, ADV MATH, V215, P789, DOI 10.1016/j.aim.2007.04.013
   Hofmann D, 2015, CATEG GEN ALGEBRAIC, V3, P113
   Katsumata SY, 2018, LOG METH COMPUT SCI, V14, DOI 10.23638/LMCS-14(4:6)2018
   Kurz A, 2016, J LOG ALGEBR METHODS, V85, P475, DOI 10.1016/j.jlamp.2015.08.002
   LARSEN KG, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P344, DOI 10.1145/75277.75307
   LAWVERE FW, 1973, RENDICONTI SEMINARIO, V43, P135, DOI DOI 10.1007/BF02924844
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   MacLane S, 2013, GRADUATE TEXTS MATH
   Manes EG, 2002, THEOR COMPUT SCI, V275, P79, DOI 10.1016/S0304-3975(00)00415-1
   Misailovic S, 2011, LECT NOTES COMPUT SC, V6887, P316, DOI 10.1007/978-3-642-23702-7_24
   Mittal S, 2016, ACM COMPUT SURV, V48, DOI 10.1145/2893356
   Moggi E., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P14, DOI 10.1109/LICS.1989.39155
   Nissim K, 2007, ACM S THEORY COMPUT, P75, DOI 10.1145/1250790.1250803
   Pistone P, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470696
   Pitts A.M., 1998, HIGHER ORDER OPERATI, P275
   Plotkin Gordon, 1973, Lambda-definability and logical relations
   Plotkin Gordon D., 2001, Lecture Notes in Computer Science, V2030, P1, DOI [10.1007/3-540-45315-6_1, DOI 10.1007/3-540-45315-6_1]
   Qu WH, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341696
   Radicek I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158124
   Ramalingam G., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P502, DOI 10.1145/158511.158710
   Reed J, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P157
   Richardson Clarence Hudson, 1954, An Introduction to the calculus of Finite Differences, P4
   Rinard M., 2011, Proc. of the 20th ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation, P79, DOI [DOI 10.1145/1929501.1929517, 10.1145/1929501.1929517]
   Sampson A, 2014, ACM SIGPLAN NOTICES, V49, P112, DOI [10.1145/2666356.2594294, 10.1145/2594291.2594294]
   Sampson A, 2011, ACM SIGPLAN NOTICES, V46, P164, DOI 10.1145/1993316.1993518
   Sato T, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785668
   Sedgewick R., 2013, An Introduction to the Analysis of Algorithms
   Sidiroglou-Douskos Stelios, 2011, P ACM SIGSOFT S EUR, P124, DOI 10.1145/2025113.2025133
   STRASSEN V, 1965, ANN MATH STAT, V36, P423, DOI 10.1214/aoms/1177700153
   Thijs A.M., 1996, Simulation and fixpoint semantics
   van Breugel F, 2005, THEOR COMPUT SCI, V331, P115, DOI 10.1016/j.tcs.2004.09.035
   Villani C, 2009, GRUNDLEHR MATH WISS, V338, P5
   Westbrook Edwin M., 2013, ABS13045531 CORR
   Zhang HC, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341697
   Zhang H, 2014, PLANT BIOTECHNOL J, V12, P797, DOI 10.1111/pbi.12200
   Zhu ZA, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P441
NR 88
TC 4
Z9 4
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 19
DI 10.1145/3498680
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900020
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Jeffrey, A
   Riely, J
   Batty, M
   Cooksey, S
   Kaysin, I
   Podkopaev, A
AF Jeffrey, Alan
   Riely, James
   Batty, Mark
   Cooksey, Simon
   Kaysin, Ilya
   Podkopaev, Anton
TI The Leaky Semicolon Compositional Semantic Dependencies for
   Relaxed-Memory Concurrency
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Concurrency; Relaxed Memory Models; Pomsets; Preconditions; Predicate
   Transformers; Multi-Copy Atomicity; Arm8; C11; Thin-Air Reads; Compiler
   Optimizations
ID COMPUTER
AB Program logics and semantics tell a pleasant story about sequential composition: when executing (S-1; S-2), we first execute S-1 then S-2. To improve performance, however, processors execute instructions out of order, and compilers reorder programs even more dramatically. By design, single-threaded systems cannot observe these reorderings; however, multiple-threaded systems can, making the story considerably less pleasant. A formal attempt to understand the resulting mess is known as a "relaxed memory model." Prior models either fail to address sequential composition directly, or overly restrict processors and compilers, or permit nonsense thin-air behaviors which are unobservable in practice.
   To support sequential composition while targeting modern hardware, we enrich the standard event-based approach with preconditions and families of predicate transformers. When calculating the meaning of (S-1; S-2), the predicate transformer applied to the precondition of an event e from S-2 is chosen based on the set of events in S-1 upon which.. depends. We apply this approach to two existing memory models.
C1 [Jeffrey, Alan] Roblox, San Mateo, CA 94403 USA.
   [Riely, James] DePaul Univ, Chicago, IL 60604 USA.
   [Batty, Mark; Cooksey, Simon] Univ Kent, Canterbury, Kent, England.
   [Kaysin, Ilya] JetBrains Res, St Petersburg, Russia.
   [Kaysin, Ilya] Univ Cambridge, Cambridge, England.
   [Podkopaev, Anton] HSE Univ, St Petersburg, Russia.
C3 DePaul University; University of Kent; University of Cambridge; HSE
   University (National Research University Higher School of Economics)
RP Jeffrey, A (corresponding author), Roblox, San Mateo, CA 94403 USA.
EM ajeffrey@roblox.com; jriely@cs.depaul.edu; m.j.batty@kent.ac.uk;
   simon@graymalk.in; ik404@cam.ac.uk; apodkopaev@hse.ru
RI Podkopaev, Anton/AAH-5443-2021
OI Podkopaev, Anton/0000-0002-9448-6587; Riely, James/0000-0002-8731-1463;
   Cooksey, Simon/0000-0001-9365-9717
FU National Science Foundation [CCR-1617175]; EPSRC [EP/V000470/1,
   EP/R032971/1]; JetBrains Research; VeTSS
FX This paper has been greatly improved by the comments of the anonymous
   reviewers. James Riely was supported by the National Science Foundation
   under grant No. CCR-1617175. Mark Batty and Simon Cooksey were supported
   by the EPSRC under grant Nos. EP/V000470/1 and EP/R032971/1, and by
   VeTSS. Anton Podkopaev was supported by JetBrains Research.
CR Alglave J, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3458926
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   [Anonymous], 2004, CAUSALITY TEST CASES
   Batty M, 2015, LECT NOTES COMPUT SC, V9032, P283, DOI 10.1007/978-3-662-46669-8_12
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Boehm H.-J., 2014, MSPC, p7:1, DOI DOI 10.1145/2618128.2618134
   Brookes S, 1996, INFORM COMPUT, V127, P145, DOI 10.1006/inco.1996.0056
   Chakraborty S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290383
   Cho M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P867, DOI 10.1145/3453483.3454082
   Cooksey Simon, 2019, LNCS, V12233, P507, DOI [10.1007/978-3-030-54997-8_31, DOI 10.1007/978-3-030-54997-8_31]
   Cox Russ, 2016, GOS MEMORY MODEL
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Dolan S, 2018, ACM SIGPLAN NOTICES, V53, P242, DOI [10.1145/3192366.3192421, 10.1145/3296979.3192421]
   Ferriera W, 1996, ACM SIGPLAN NOTICES, V31, P201, DOI 10.1145/232629.232649
   GISCHER JL, 1988, THEOR COMPUT SCI, V61, P199, DOI 10.1016/0304-3975(88)90124-7
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jagadeesan R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428262
   Jagadeesan R, 2010, LECT NOTES COMPUT SC, V6012, P307, DOI 10.1007/978-3-642-11957-6_17
   Jeffrey A, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P759, DOI 10.1145/2933575.2934536
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Kavanagh Ryan, 2018, ABS180404214 CORR
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lee J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276495
   Lee J, 2017, ACM SIGPLAN NOTICES, V52, P633, DOI [10.1145/3140587.3062343, 10.1145/3062341.3062343]
   Lee SH, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P362, DOI 10.1145/3385412.3386010
   Liu L, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3462206
   Liu L, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P16, DOI 10.1145/3314221.3314611
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Marino Daniel, 2015, LEIBNIZ INT P INFORM, V32, P177, DOI DOI 10.4230/LIPICS.SNAPL.2015.177
   MASON IA, 1992, PROCEEDINGS OF THE SEVENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P186, DOI 10.1109/LICS.1992.185532
   McKenney PaulE., 2016, Out-of-Thin-Air Execution is Vacuous
   Milner R., 1977, Theoretical Computer Science, V4, P1, DOI 10.1016/0304-3975(77)90053-6
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Paviotti M, 2020, LECT NOTES COMPUT SC, V12075, P599, DOI 10.1007/978-3-030-44914-8_22
   Pichon-Pharabod J, 2016, ACM SIGPLAN NOTICES, V51, P622, DOI 10.1145/2914770.2837616
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Pratt V., 1985, Logics of Programs. Proceedings, P269
   Sevcík J, 2008, LECT NOTES COMPUT SC, V5142, P27, DOI 10.1007/978-3-540-70592-5_3
   Sevcik Jaroslav, 2008, THESIS U EDINBURGH
   Spolsky Joel, 2002, The Law of Leaky Abstractions. Blog post: Joel on Software
   Vafeiadis V, 2013, ACM SIGPLAN NOTICES, V48, P867, DOI [10.1145/2544173.2509532, 10.1145/2509136.2509532]
   Watt C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360559
   Watt C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P346, DOI 10.1145/3385412.3385973
NR 45
TC 6
Z9 6
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 54
DI 10.1145/3498716
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900055
OA gold, Green Accepted
DA 2024-07-18
ER

PT J
AU Yuan, C
   McNally, C
   Carbin, M
AF Yuan, Charles
   McNally, Christopher
   Carbin, Michael
TI Twist: Sound Reasoning for Purity and Entanglement in Quantum Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantum programming; entanglement; purity; type systems
ID ALGORITHMS
AB Quantum programming languages enable developers to implement algorithms for quantum computers that promise computational breakthroughs in classically intractable tasks. Programming quantum computers requires awareness of entanglement, the phenomenon in which measurement outcomes of qubits are correlated. Entanglement can determine the correctness of algorithms and suitability of programming patterns.
   In this work, we formalize purity as a central tool for automating reasoning about entanglement in quantum programs. A pure expression is one whose evaluation is unaffected by the measurement outcomes of qubits that it does not own, implying freedom from entanglement with any other expression in the computation.
   We present Twist, the first language that features a type system for sound reasoning about purity. The type system enables the developer to identify pure expressions using type annotations. Twist also features purity assertion operators that state the absence of entanglement in the output of quantum gates. To soundly check these assertions, Twist uses a combination of static analysis and runtime verification.
   We evaluate Twist's type system and analyses on a benchmark suite of quantum programs in simulation, demonstrating that Twist can express quantum algorithms, catch programming errors in them, and support programs that existing languages disallow, while incurring runtime verification overhead of less than 3.5%.
C1 [Yuan, Charles; Carbin, Michael] MIT, CSAIL, 32 Vassar St, Cambridge, MA 02139 USA.
   [McNally, Christopher] MIT, RLE, 32 Vassar St, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT); Massachusetts Institute of
   Technology (MIT)
RP Yuan, C (corresponding author), MIT, CSAIL, 32 Vassar St, Cambridge, MA 02139 USA.
EM chenhuiy@csail.mit.edu; mcnallyc@mit.edu; mcarbin@csail.mit.edu
RI Yuan, Charles/KLY-8817-2024
OI Yuan, Charles/0000-0002-4918-4467; McNally,
   Christopher/0000-0002-4927-0613
FU MIT-IBM Watson AI Lab; Intel Probabilistic Computing Center; Sloan
   Foundation
FX We would like to thank Alex Renda, Eric Atkinson, Jesse Michel, Tian
   Jin, Alex Lew, Sara Achour, Robert Rand, Yipeng Huang, Axel Feldmann,
   and Rohan Yadav, who all provided feedback on drafts of this paper. This
   work was supported in part by the MIT-IBM Watson AI Lab, the Intel
   Probabilistic Computing Center, and the Sloan Foundation. Any opinions,
   findings, and conclusions or recommendations expressed in this material
   are those of the authors and do not necessarily reflect the views of the
   funding agencies.
CR Abraham H., 2019, QISKIT OPEN SOURCE F, DOI DOI 10.5281/ZENODO.2562110
   Altenkirch T, 2005, IEEE S LOG, P249
   Amy Matthew., 2017, COMPUTER AIDED VERIF
   [Anonymous], 2014, Liqui: A software design architecture and domain-specific language for quantum computing
   Azuma H, 2018, J MOD OPTIC, V65, P415, DOI 10.1080/09500340.2017.1397221
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371123
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371089
   Bell J.S., 1964, Physics, V1, P195, DOI [10.1103/PhysicsPhysiqueFizika.1.195, DOI 10.1103/PHYSICSPHYSIQUEFIZIKA.1.195, 10.1103/Physics-PhysiqueFizika.1.195]
   BENNETT CH, 1993, PHYS REV LETT, V70, P1895, DOI 10.1103/PhysRevLett.70.1895
   Bennett CH, 2014, THEOR COMPUT SCI, V560, P7, DOI 10.1016/j.tcs.2014.05.025
   Biamonte J, 2017, NATURE, V549, P195, DOI 10.1038/nature23474
   Bichsel B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P286, DOI 10.1145/3385412.3386007
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Buhrman H, 2001, PHYS REV LETT, V87, DOI 10.1103/PhysRevLett.87.167902
   Calderbank AR, 1996, PHYS REV A, V54, P1098, DOI 10.1103/PhysRevA.54.1098
   Childs AM, 2018, P NATL ACAD SCI USA, V115, P9456, DOI 10.1073/pnas.1801723115
   Clairambault P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371131
   COPPERSMITH D, 1994, APPROXIMATE FOURIER
   DEUTSCH D, 1992, P ROY SOC LOND A MAT, V439, P553, DOI 10.1098/rspa.1992.0167
   Gay Simon J, 2008, INT C COMP AID VERF, DOI [10.1007/978- 3- 540-70545- 1_51, DOI 10.1007/978-3-540-70545-1_51]
   Gheorghiu V, 2018, PLOS ONE, V13, DOI 10.1371/journal.pone.0208073
   Giraud O, 2007, J PHYS A-MATH THEOR, V40, P2793, DOI 10.1088/1751-8113/40/11/014
   GOLUB GH, 1970, NUMER MATH, V14, P403, DOI 10.1007/BF02163027
   Gottesman D, 1999, NATURE, V402, P390, DOI 10.1038/46503
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Greenberger DM., 1989, GOING BELLS THEOREM, DOI [10.1007/978-94-017-0849-4_10, DOI 10.1007/978-94-017-0849-4_10]
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Gurvits L., 2003, P 35 ACM S THEORY CO, P10, DOI DOI 10.1145/780542.780545
   Haar A, 1933, ANN MATH, V34, P147, DOI 10.2307/1968346
   Häner T, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428201
   Harrow AW, 2013, J ACM, V60, DOI 10.1145/2432622.2432625
   Hayden Patrick, 2014, QUANTUM INFO COMPUT, V14, P5, DOI [10.5555/2638661.2638663, DOI 10.5555/2638661.2638663]
   Heule Stefan., 2011, WORKSH FORM TECHN JA, DOI [10.1145/2076674.2076675, DOI 10.1145/2076674.2076675]
   Hietala K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434318
   Honda K, 2015, ELECTRON PROC THEOR, P262, DOI 10.4204/EPTCS.195.19
   Horodecki M, 1996, PHYS LETT A, V223, P1, DOI 10.1016/S0375-9601(96)00706-2
   Huang YP, 2019, PROCEEDINGS OF THE 2019 46TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA '19), P541, DOI 10.1145/3307650.3322213
   Hung SH, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290344
   JavadiAbhari A., 2014, Proceedings of the 11th ACM Conference on Computing Frontiers, page, P1, DOI DOI 10.1145/2597917
   Jozsa R, 2003, P ROY SOC A-MATH PHY, V459, P2011, DOI 10.1098/rspa.2002.1097
   Kassal I, 2011, ANNU REV PHYS CHEM, V62, P185, DOI 10.1146/annurev-physchem-032210-103512
   Kitaev AY, 1997, RUSS MATH SURV+, V52, P1191, DOI 10.1070/RM1997v052n06ABEH002155
   Knill E, 1996, CONVENTIONS QUANTUM
   Kumar A, 2020, SCI REP-UK, V10, DOI 10.1038/s41598-020-70446-8
   Li GS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428218
   Liu Ji., 27 IEEE INT S HIGH P, DOI 10.1109/HPCA51647.2021
   Lo HK, 1998, PHYSICA D, V120, P177, DOI 10.1016/S0167-2789(98)00053-0
   Markov IL, 2012, QUANTUM INF COMPUT, V12, P361
   Miller WA, 2011, PROC SPIE, V8057, DOI 10.1117/12.883332
   Mingsheng Ying., 2016, FDN QUANTUM PROGRAMM, V1st
   Nielsen Michael A., 2010, Quantum Computation and Quantum Information
   Paradis A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P222, DOI 10.1145/3453483.3454040
   Pati AK, 2000, NATURE, V404, P164, DOI 10.1038/35004532
   Paykin J, 2017, ACM SIGPLAN NOTICES, V52, P846, DOI 10.1145/3093333.3009894
   Perdrix S, 2008, LECT NOTES COMPUT SC, V5079, P270
   Perdrix S, 2007, ELECTRON NOTES THEOR, V170, P125, DOI 10.1016/j.entcs.2006.12.015
   Prost F, 2009, LECT NOTES COMPUT SC, V5715, P219, DOI 10.1007/978-3-642-03745-0_25
   Rand R, 2019, ELECTRON P THEOR COM, P299, DOI 10.4204/EPTCS.287.17
   Rand Robert, 2021, WORKSH PROGRAMM LANG
   Rand Robert., ARXIV210108939QUANTP
   Rennela M, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:30)2020
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Schmidt E, 1907, MATH ANN, V63, P433, DOI 10.1007/BF01449770
   Selinger P, 2004, MATH STRUCT COMP SCI, V14, P527, DOI 10.1017/S0960129504004256
   Selinger P, 2006, MATH STRUCT COMP SCI, V16, P527, DOI 10.1017/S0960129506005238
   Shi Yunong., 2020, ARXIV190808963QUANTP
   Shor PW, 1997, SIAM J COMPUT, V26, P1484, DOI 10.1137/S0036144598347011
   Singhal Kartik., 2020, ARXIV201202154CSPL
   Suenaga K, 2009, LECT NOTES COMPUT SC, V5904, P128, DOI 10.1007/978-3-642-10672-9_11
   Svore K, 2018, RWDSL2018: PROCEEDINGS OF THE REAL WORLD DOMAIN SPECIFIC LANGUAGES WORKSHOP 2018, DOI 10.1145/3183895.3183901
   Unruh D., 2019, 2019 34 ANN ACM IEEE, P1
   VOGEL K, 1989, PHYS REV A, V40, P2847, DOI 10.1103/PhysRevA.40.2847
   Walborn SP, 2006, NATURE, V440, P1022, DOI 10.1038/nature04627
   WOOTTERS WK, 1982, NATURE, V299, P802, DOI 10.1038/299802a0
   Yu NK, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P542, DOI 10.1145/3453483.3454061
   Zhou Li., 2021 36 ANN ACMIEEE, DOI DOI 10.1109/LICS52264.2021.9470673
NR 77
TC 8
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 30
DI 10.1145/3498691
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900031
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Anderson, L
   Adams, A
   Ma, K
   Li, TM
   Jin, T
   Ragan-Kelley, J
AF Anderson, Luke
   Adams, Andrew
   Ma, Karima
   Li, Tzu-Mao
   Jin, Tian
   Ragan-Kelley, Jonathan
TI Efficient Automatic Scheduling of Imaging and Vision Pipelines for the
   GPU
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE optimizing compilers; Halide
ID LOCALITY
AB We present a new algorithm to quickly generate high-performance GPU implementations of complex imaging and vision pipelines, directly from high-level Halide algorithm code. It is fully automatic, requiring no schedule templates or hand-optimized kernels. We address the scalability challenge of extending search-based automatic scheduling to map large real-world programs to the deep hierarchies of memory and parallelism on GPU architectures in reasonable compile time. We achieve this using (1) a two-phase search algorithm that first 'freezes' decisions for the lowest cost sections of a program, allowing relatively more time to be spent on the important stages, (2) a hierarchical sampling strategy that groups schedules based on their structural similarity, then samples representatives to be evaluated, allowing us to explore a large space with few samples, and (3) memoization of repeated partial schedules, amortizing their cost over all their occurrences. We guide the process with an efficient cost model combining machine learning, program analysis, and GPU architecture knowledge.
   We evaluate our method's performance on a diverse suite of real-world imaging and vision pipelines. Our scalability optimizations lead to average compile time speedups of 49x (up to 530x). We find schedules that are on average 1.7x faster than existing automatic solutions (up to 5x), and competitive with what the best human experts were able to achieve in an active effort to beat our automatic results.
C1 [Anderson, Luke; Ma, Karima; Li, Tzu-Mao; Jin, Tian; Ragan-Kelley, Jonathan] MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
   [Adams, Andrew] Adobe, Mountain View, CA USA.
   [Li, Tzu-Mao] Univ Calif San Diego, San Diego, CA 92103 USA.
C3 Massachusetts Institute of Technology (MIT); University of California
   System; University of California San Diego
RP Anderson, L (corresponding author), MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
EM lukea@mit.edu
FU NSF [CCF-1723445, CCF-1846502]; DARPA [HR00112090017]; Toyota Research
   Institute
FX This work was partially funded by Toyota Research Institute, NSF awards
   CCF-1723445 and CCF-1846502, and DARPA agreement HR00112090017.
CR Abadi Martin, 2016, arXiv
   Adams A, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3306346.3322967
   Ansel J, 2014, INT CONFER PARA, P303, DOI 10.1145/2628071.2628092
   Ashouri AH, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3197978
   Baghdadi Riyadh, 2021, P 4 C MACH LEARN SYS
   Bondhugula U, 2008, ACM SIGPLAN NOTICES, V43, P101, DOI 10.1145/1379022.1375595
   Chen TQ, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P579
   Chen TQ, 2018, ADV NEUR IN, V31
   Esmaeilzadeh Hadi, 2020, P ICLR
   Grosser T, 2012, PARALLEL PROCESS LET, V22, DOI 10.1142/S0129626412500107
   Haj-Ali A, 2020, INT SYM CODE GENER, P242, DOI 10.1145/3368826.3377928
   Jangda A, 2018, ACM SIGPLAN NOTICES, V53, P261, DOI 10.1145/3200691.3178507
   Jia ZH, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P47, DOI 10.1145/3341301.3359630
   Li TM, 2018, ACM T GRAPHIC, V37, DOI 10.1145/3197517.3201383
   Mendis C., 2019, PR MACH LEARN RES
   Mullapudi RT, 2016, ACM T GRAPHIC, V35, DOI 10.1145/2897824.2925952
   Mullapudi RT, 2015, ACM SIGPLAN NOTICES, V50, P429, DOI [10.1145/2775054.2694364, 10.1145/2694344.2694364]
   Paliwal Aditya, 2020, P 2020 INT C LEARNIN
   Ragan-Kelley J, 2012, ACM T GRAPHIC, V31, DOI 10.1145/2185520.2185528
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Sioutas S, 2020, ACM T ARCHIT CODE OP, V17, DOI 10.1145/3406117
   Sioutas S, 2019, ACM T ARCHIT CODE OP, V16, DOI 10.1145/3310248
   Steiner Benoit, 2021, P MACH LEARN SYST
   Vanhoucke Vincent, 2014, ICLR invited talk, V1, P2
   Vasilache Nicolas., 2018, Technical report
   Verdoolaege S, 2013, ACM T ARCHIT CODE OP, V9, DOI 10.1145/2400682.2400713
   XLA Team, 2017, XLA TENSORFLOW COMP
   Zheng LM, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P863
   Zheng SZ, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P859, DOI 10.1145/3373376.3378508
   Zhou Y., 2020, Advances in Neural Information Processing Systems (NeurIPS), V33, P13844
NR 30
TC 5
Z9 7
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 109
DI 10.1145/3485486
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200013
OA gold, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Lahav, O
   Namakonov, E
   Oberhauser, J
   Podkopaev, A
   Vafeiadis, V
AF Lahav, Ori
   Namakonov, Egor
   Oberhauser, Jonas
   Podkopaev, Anton
   Vafeiadis, Viktor
TI Making Weak Memory Models Fair
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Formal semantics; weak memory models; concurrency; verification
AB Liveness properties, such as termination, of even the simplest shared-memory concurrent programs under sequential consistency typically require some fairness assumptions about the scheduler. Under weak memory models, we observe that the standard notions of thread fairness are insufficient, and an additional fairness property, which we call memory fairness, is needed.
   In this paper, we propose a uniform definition for memory fairness that can be integrated into any declarative memory model enforcing acyclicity of the union of the program order and the reads-from relation. For the well-known models, SC, x86-TSO, RA, and StrongCOH, that have equivalent operational and declarative presentations, we show that our declarative memory fairness condition is equivalent to an intuitive model-pecific operational notion of memory fairness, which requires the memory system to fairly execute its internal propagation steps. Our fairness condition preserves the correctness of local transformations and the compilation scheme from RC11 to x86-TSO, and also enables the first formal proofs of termination of mutual exclusion lock implementations under declarative weak memory models.
C1 [Lahav, Ori] Tel Aviv Univ, Tel Aviv, Israel.
   [Namakonov, Egor] St Petersburg Univ, St Petersburg, Russia.
   [Namakonov, Egor; Podkopaev, Anton] JetBrains Res, Moscow, Russia.
   [Oberhauser, Jonas] Huawei Dresden Res Ctr, Dresden, Germany.
   [Oberhauser, Jonas] Huawei OS Kernel Lab, Dresden, Germany.
   [Podkopaev, Anton] HSE Univ, Moscow, Russia.
   [Vafeiadis, Viktor] MPI SWS, Saarbrucken, Germany.
C3 Tel Aviv University; Saint Petersburg State University; HSE University
   (National Research University Higher School of Economics)
RP Lahav, O (corresponding author), Tel Aviv Univ, Tel Aviv, Israel.
EM orilahav@tau.ac.il; egor.namakonov@jetbrains.com;
   jonas.oberhauser@huawei.com; apodkopaev@hse.ru; viktor@mpi-sws.org
RI Podkopaev, Anton/AAH-5443-2021; Vafeiadis, Viktor/B-5809-2014
OI Podkopaev, Anton/0000-0002-9448-6587; Vafeiadis,
   Viktor/0000-0001-8436-0334; Lahav, Ori/0000-0003-4305-6998; Namakonov,
   Egor/0000-0002-7517-9389
FU European Research Council (ERC) under the European Union [851811,
   101003349]; Israel Science Foundation [1566/18]; Alon Young Faculty
   Fellowship; European Research Council (ERC) [851811, 101003349] Funding
   Source: European Research Council (ERC)
FX We thank the anonymous reviewers for their helpful feedback. This
   research was supported in part by the European Research Council (ERC)
   under the European Union's Horizon 2020 research and innovation
   programme (grant agreement no. 851811 and 101003349). Lahav was also
   supported by the Israel Science Foundation (grant number 1566/18) and by
   the Alon Young Faculty Fellowship.
CR Alglave J, 2018, ACM SIGPLAN NOTICES, V53, P405, DOI [10.1145/3296957.3177156, 10.1145/3173162.3177156]
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Batty M, 2012, ACM SIGPLAN NOTICES, V47, P509, DOI 10.1145/2103621.2103717
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Bender J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360568
   Bouajjani A, 2018, LECT NOTES COMPUT SC, V10982, P336, DOI 10.1007/978-3-319-96142-2_21
   Bouajjani A, 2014, ACM SIGPLAN NOTICES, V49, P285, DOI 10.1145/2535838.2535877
   Bouajjani A, 2013, LECT NOTES COMPUT SC, V7792, P533, DOI 10.1007/978-3-642-37036-6_29
   Bouajjani A, 2011, LECT NOTES COMPUT SC, V6756, P428, DOI 10.1007/978-3-642-22012-8_34
   Cerone Andrea, 2015, CONCUR, P58
   Chabbi M, 2015, ACM SIGPLAN NOTICES, V50, P215, DOI [10.1145/2688500.2688503, 10.1145/2858788.2688503]
   Chakraborty S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290383
   Derevenetc E, 2014, LECT NOTES COMPUT SC, V8573, P158
   Dolan S, 2018, ACM SIGPLAN NOTICES, V53, P242, DOI [10.1145/3192366.3192421, 10.1145/3296979.3192421]
   Flur S, 2016, ACM SIGPLAN NOTICES, V51, P608, DOI 10.1145/2914770.2837615
   Francez Nissim, 1986, Fairness, DOI DOI 10.1007/978-1-4612-4886-6
   Gotsman A., 2017, DISC SCHLOSS DAGSTUH, V91, DOI [DOI 10.4230/LIPICS.DISC.2017.23, 10.4230/LIPIcs.DISC.2017.23]
   Jagadeesan R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428262
   Kaiser Jan-Oliver, 2017, EUR C OBJ OR PROGR E, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.17, 10.4230/LIPIcs.ECOOP.2017]
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Kokologiannakis M, 2021, LECT NOTES COMPUT SC, V12759, P427, DOI 10.1007/978-3-030-81685-8_20
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Lahav O, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P126, DOI 10.1145/3314221.3314604
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lahav O, 2016, ACM SIGPLAN NOTICES, V51, P649, DOI 10.1145/2914770.2837643
   Lahav Ori, Making Weak Memory Models Fair: OOPSLA 2021 artifact, DOI DOI 10.5281/ZENODO.5496483
   Lahav Ori., ARXIV201201067CSPL
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   LAMPORT L, 1977, IEEE T SOFTWARE ENG, V3, P125, DOI 10.1109/TSE.1977.229904
   Lehmann D., 1981, Automata, Languages and Programming. Eighth Colloquium, P264
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Margalit R, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434285
   MELLORCRUMMEY JM, 1991, ACM T COMPUT SYST, V9, P21, DOI 10.1145/103727.103729
   Oberhauser J, 2018, LECT NOTES COMPUT SC, V11294, P322, DOI 10.1007/978-3-030-03592-1_19
   Oberhauser Jonas, ASPLOS, P530
   Oberhauser Jonas, 2021, NETYS
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Park David Michael Ritchie, 1979, ABSTRACT SOFTWARE SP, V86, P504, DOI DOI 10.1007/3-540-10007-5_47
   Podkopaev A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290382
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   Vafeiadis V, 2015, ACM SIGPLAN NOTICES, V50, P209, DOI [10.1145/2676726.2676995, 10.1145/2775051.2676995]
   Watt C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360559
   Watt C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P346, DOI 10.1145/3385412.3385973
NR 45
TC 5
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 98
DI 10.1145/3485475
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200002
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Merigoux, D
   Chataing, N
   Protzenko, J
AF Merigoux, Denis
   Chataing, Nicolas
   Protzenko, Jonathan
TI Catala: A Programming Language for the Law
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE law; domain specific language; legal expert systems
ID LOGIC; SMT
AB Law at large underpins modern society, codifying and governing many aspects of citizens' daily lives. Often-times, law is subject to interpretation, debate and challenges throughout various courts and jurisdictions. But in some other areas, law leaves little room for interpretation, and essentially aims to rigorously describe a computation, a decision procedure or, simply said, an algorithm.
   Unfortunately, prose remains a woefully inadequate tool for the job. The lack of formalism leaves room for ambiguities; the structure of legal statutes, with many paragraphs and sub-sections spread across multiple pages, makes it hard to compute the intended outcome of the algorithm underlying a given text; and, as with any other piece of poorly-specified critical software, the use of informal, natural language leaves corner cases unaddressed.
   We introduce Catala, a new programming language that we specifically designed to allow a straightforward and systematic translation of statutory law into an executable implementation. Notably, Catala makes it natural and easy to express the general case / exceptions logic that permeates statutory law. Catala aims to bring together lawyers and programmers through a shared medium, which together they can understand, edit and evolve, bridging a gap that too often results in dramatically incorrect implementations of the law. We have implemented a compiler for Catala, and have proven the correctness of its core compilation steps using the F. proof assistant.
   We evaluate Catala on several legal texts that are algorithms in disguise, notably section 121 of the US federal income tax and the byzantine French family benefits; in doing so, we uncover a bug in the official implementation of the French benefits. We observe as a consequence of the formalization process that using Catala enables rich interactions between lawyers and programmers, leading to a greater understanding of the original legislative intent, while producing a correct-by-construction executable specification reusable by the greater software ecosystem. Doing so, Catala increases trust in legal institutions, and mitigates the risk of societal damage due to incorrect implementations of the law.
C1 [Merigoux, Denis] INRIA, Rocquencourt, France.
   [Chataing, Nicolas] ENS Paris, INRIA, Paris, France.
   [Protzenko, Jonathan] Microsoft Res, Redmond, WA USA.
C3 Inria; Inria; Universite PSL; Ecole Normale Superieure (ENS); Microsoft
RP Merigoux, D (corresponding author), INRIA, Rocquencourt, France.
EM denis.merigoux@inria.fr; nicolas.chataing@ens.fr; protz@microsoft.com
OI Merigoux, Denis/0000-0003-2247-0938
FU European Research Council [683032]; European Research Council (ERC)
   [683032] Funding Source: European Research Council (ERC)
FX This work is partially supported by the European Research Council under
   the CIRCUS (683032) Consolidator Grant Agreement.
CR Ahman D, 2017, ACM SIGPLAN NOTICES, V52, P515, DOI 10.1145/3093333.3009878
   ALLEN LE, 1957, YALE LAW J, V66, P833, DOI 10.2307/794073
   [Anonymous], P ACM PROGRAM LANG, V5
   [Anonymous], 2016, INT REV LAW COMPUTER
   Blanc MA, 2016, TRAV GENRE SOC, P157, DOI 10.3917/tgs.035.0157
   Brewka G., 2000, Intellectics and computational logic, P27
   Broache Anne, 2008, IRS TRUDGES AGING CO
   Clergeau MF, 2016, TRAV GENRE SOC, P173, DOI 10.3917/tgs.035.0173
   Colmerauer A., 1996, History of programming languages II, VII, P331, DOI [DOI 10.1145/234286.1057820L, 10.1145/234286.1057820, DOI 10.1145/234286.1057820]
   Conchon S., 2007, Trends in functional programming, V8, P124
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Denis Merigoux, 2021, CATALA PROGRAMMING L, DOI [10.5281/zenodo.4775161, DOI 10.5281/ZENODO.4775161]
   Dewey J, 1924, CORNELL LAW Q, V10, P17
   Doran D., 2017, WHAT DOES EXPLAINABL
   Genesereth M, 2015, Computational Law: The Cop in the Backseat
   Goebel R, 2018, LECT NOTES COMPUT SC, V11015, P295, DOI 10.1007/978-3-319-99740-7_21
   Government Accountability Office (GAO), 2021, COVID 19 URG ACT NEE
   He X, 2018, P INT COMP SOFTW APP, P132, DOI 10.1109/COMPSAC.2018.00025
   Holzenberger Nils, 2020, PROC 2020 WORKSHOP N, V2645, P31
   Hvitved T., 2011, Ph.D. thesis
   Internal Revenue Service, EXCL GAIN SAL PRINC
   Keep AW, 2013, ACM SIGPLAN NOTICES, V48, P343, DOI [10.1145/2544174.2500618, 10.1145/2500365.2500618]
   KNUTH DE, 1984, COMPUT J, V27, P97, DOI 10.1093/comjnl/27.2.97
   Konkel, 2018, IRS SYSTEM PROCESSIN
   Lawsky Sarah, 2018, FORMAL METHODS LAW
   Lawsky Sarah, 2020, Ohio St. Tech. L. J, V16, P114
   Lawsky Sarah B., 2016, Tax L. Revieew, V70, P377
   Lawsky SB., 2018, FLORIDA TAX REV, V24, P587
   Lepigre R, 2018, ELECTRON P THEOR COM, P42, DOI 10.4204/EPTCS.274.4
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leswing, 2020, NEW JERSEY NEEDS VOL
   Martínez G, 2019, LECT NOTES COMPUT SC, V11423, P30, DOI 10.1007/978-3-030-17184-1_2
   Minamide Yasuhiko, 1996, S PRINC PROGR LANG P, P271, DOI DOI 10.1145/237721.237791
   Monin, 2018, LOUVOIS LOGICIEL QUI
   Morris Jason, 2020, 3577239 SSRN
   Pertierra M.A., 2017, ASAIL ICAIL
   Pottier F, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P88, DOI 10.1145/2892208.2892224
   Proctor M., 2012, APPL GRAPH TRANSFORM, P2
   Protzenko Jonathan, 2021, COMPILER CONSTRUCTIO
   Regis-Gianat Yann, 2014, MENHIR PARSER GENERA
   REITER R, 1980, ARTIF INTELL, V13, P81, DOI 10.1016/0004-3702(80)90014-4
   Scoca V, 2017, IEEE INT CONF CLOUD, P592, DOI 10.1109/CLOUD.2017.81
   SERGOT MJ, 1986, COMMUN ACM, V29, P370, DOI 10.1145/5689.5920
   Shulz Sebastien, 2019, Revue francaise de science politique, V69, P845, DOI [10.3917/rfsp.695.0845, DOI 10.3917/RFSP.695.0845]
   Signoles Julien, 2011, CALENDAR OCAML LIB
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Troestler Christophe, 2011, ZARITH OCAML LIB
   Turner J., 2016, Shape of errors to come
   Vouillon J, 2014, SOFTWARE PRACT EXPER, V44, P951, DOI 10.1002/spe.2187
   Wikipedia contributors, 2021, COD UR NAMM WIK FREE
   Zakrzewski J, 2018, LECT NOTES COMPUT SC, V11294, P229, DOI 10.1007/978-3-030-03592-1_13
NR 51
TC 9
Z9 9
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 77
DI 10.1145/3473582
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800017
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Xie, NN
   Leijen, D
AF Xie, Ningning
   Leijen, Daan
TI Generalized Evidence Passing for Effect Handlers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Algebraic Effects; Handlers; Evidence Passing
AB This paper studies compilation techniques for algebraic effect handlers. In particular, we present a sequence of refinements of algebraic effects, going via multi-prompt delimited control, generalized evidence passing, yield bubbling, and finally a monadic translation into plain lambda calculus which can be compiled efficiently to many target platforms. Along the way we explore various interesting points in the design space. We provide two implementations of our techniques, one as a library in Haskell, and one as a C backend for the Koka programming language. We show that our techniques are effective, by comparing against three other best-in-class implementations of effect handlers: multi-core OCaml, the Ev.Eff Haskell library, and the libhandler C library. We hope this work can serve as a basis for future designs and implementations of algebraic effects.
C1 [Xie, Ningning] Univ Hong Kong, Hong Kong, Peoples R China.
   [Leijen, Daan] Microsoft Res, Redmond, WA USA.
C3 University of Hong Kong; Microsoft
RP Xie, NN (corresponding author), Univ Hong Kong, Hong Kong, Peoples R China.
EM xnning@hku.hk; daan@microsoft.com
CR Asai K, 2007, LECT NOTES COMPUT SC, V4807, P239
   Baars A. I., 2002, SIGPLAN Notices, V37, P157, DOI 10.1145/583852.581494
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Brachthäuser JI, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000027
   Brachthauser Jonathan Immanuel, 2020, PROC ACM PROGRAM LAN, V4, DOI [10.1145/3408975, DOI 10.1145/3408975]
   Daan Leijen, 2020, KOK PROGR LANG
   Daan Leijen, 2021, EFF HANDL BENCHM
   Danvy Olivier., 1989, FUNCTIONAL ABSTRACTI
   Dolan S., 2015, OCAML WORKSHOP
   Dolan Stephen, 2017, ML WORKSH
   Dyvbig RK, 2007, J FUNCT PROGRAM, V17, P687, DOI 10.1017/S0956796807006259
   Farvardin K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P75, DOI 10.1145/3385412.3385994
   Felleisen M., 1986, Proceedings of the Symposium on Logic in Computer Science (Cat. No.86CH2321-8), P131
   Flatt M, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P45, DOI 10.1145/3385412.3385981
   Forster Y, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000121
   Gunter C. A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P12, DOI 10.1145/224164.224173
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   Hillerstrom Daniel, 2018, Programming Languages and Systems. 16th Asian Symposium, APLAS 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11275), P415, DOI 10.1007/978-3-030-02768-1_22
   Hillerstrom D., 2017, 2nd International Conference on Formal Structures for Computation and Deduction, FSCD 2017, September 3-9, 2017, V84, p18:1, DOI DOI 10.4230/LIPICS.FSCD.2017.18
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Kammar O, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000320
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kiselyov O, 2006, ACM SIGPLAN NOTICES, V41, P26, DOI 10.1145/1160074.1159808
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Kiselyov  Oleg, 2017, POSTPR ML WORKSH 201
   Leijen D., 2005, P 2005 S TRENDS FUNC, P297
   Leijen D, 2017, LECT NOTES COMPUT SC, V10695, P339, DOI 10.1007/978-3-319-71237-6_17
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Levy P. B., 2006, Higher-Order and Symbolic Computation, V19, P377, DOI 10.1007/s10990-006-0480-6
   PARIGOT M, 1992, LECT NOTES ARTIF INT, V624, P190, DOI 10.1007/BFb0013061
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Reinking Alex, 2021, 42 ACM SIGPLAN C PRO
   Sivaramakrishnan KC, 2021, 42 ACM SIGPLAN C PRO
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Sutter Herb, 2019, P0709R4 ISOIEC WG21
   Tom Schrijvers, 2019, P 12 ACM SIGPLAN INT, P98, DOI DOI 10.1145/3331545.3342595
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Wu N, 2015, LECT NOTES COMPUT SC, V9129, P302, DOI 10.1007/978-3-319-19797-5_15
   Xie NN, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473576
   Xie NN, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408981
   Xie Ningning, 2021, MP EFF EFFICIENT EFF
   Xie Ningning, 2020, P 2020 ACM SIGPLAN S, DOI [10.1145/3406088.3409022, DOI 10.1145/3406088.3409022]
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
NR 47
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 71
DI 10.1145/3473576
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800011
OA gold
DA 2024-07-18
ER

PT J
AU Zhou, YD
   Oliveira, BCDS
   Zhao, JX
AF Zhou, Yaoda
   Oliveira, Bruno C. D. S.
   Zhao, Jinxu
TI Revisiting Iso-Recursive Subtyping
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Iso-recursive types; Formalization; Subtyping
AB The Amber rules are well-known and widely used for subtyping iso-recursive types. They were first briefly and informally introduced in 1985 by Cardelli in a manuscript describing the Amber language. Despite their use over many years, important aspects of the metatheory of the iso-recursive style Amber rules have not been studied in depth or turn out to be quite challenging to formalize.
   This paper aims to revisit the problem of subtyping iso-recursive types. We start by introducing a novel declarative specification that we believe captures the "spirit" of Amber-style iso-recursive subtyping. Informally, the specification states that two recursive types are subtypes if all their finite unfoldings are subtypes. The Amber rules are shown to be sound with respect to this declarative specification. We then derive a sound, complete and decidable algorithmic formulation of subtyping that employs a novel double unfolding rule. Compared to the Amber rules, the double unfolding rule has the advantage of: 1) being modular; 2) not requiring reflexivity to be built in; and 3) leading to an easy proof of transitivity of subtyping. This work sheds new insights on the theory of subtyping iso-recursive types, and the new double unfolding rule has important advantages over the original Amber rules for both implementations and metatheoretical studies involving recursive types. All results are mechanically formalized in the Coq theorem prover. As far as we know, this is the first comprehensive treatment of iso-recursive subtyping dealing with unrestricted recursive types in a theorem prover.
C1 [Zhou, Yaoda; Oliveira, Bruno C. D. S.; Zhao, Jinxu] Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China.
C3 University of Hong Kong
RP Zhou, YD (corresponding author), Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China.
EM ydzhou@cs.hku.hk; bruno@cs.hku.hk; jxzhao@cs.hku.hk
RI dos Santos Oliveira, Bruno Cesar/I-7977-2013
FU Hong Kong Research Grant Council [17210617, 17209519]
FX We are grateful to anonymous reviewers that helped improving the
   presentation of our work. This work has been sponsored by Hong Kong
   Research Grant Council projects number 17210617 and 17209519.
CR AMADIO RM, 1993, ACM T PROGR LANG SYS, V15, P575, DOI 10.1145/155183.155231
   Amin N, 2017, ACM SIGPLAN NOTICES, V52, P666, DOI 10.1145/3093333.3009866
   Amin Nada, 2016, Lecture Notes in Computer Science, V9600, P249, DOI [10.1007/978-3-319-30936-, DOI 10.1007/978-3-319-30936, 10.1007/978-3-319-3 0936-1\\_14, DOI 10.1007/978-3-319-30936-1]
   [Anonymous], 2002, TYPES PROGRAMMING LA
   Appel A.W., 2000, PROC 27 ACM S PRINCI, P243
   Aydemir B, 2008, ACM SIGPLAN NOTICES, V43, P3, DOI 10.1145/1328897.1328443
   Backes M, 2014, J COMPUT SECUR, V22, P301, DOI 10.3233/JCS-130493
   Bengtson J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890031
   Brandt M, 1997, LECT NOTES COMPUT SC, V1210, P63
   Canning Peter, 1989, C FUNCT PROGR LANG C, P273, DOI [10.1145/99370.99392, DOI 10.1145/99370.99392]
   CARDELLI L, 1986, LECT NOTES COMPUT SC, V242, P21
   CARDONE F, 1991, THEOR COMPUT SCI, V83, P29, DOI 10.1016/0304-3975(91)90038-4
   Castagna Giuseppe, 2005, P 7 ACM SIGPLAN INT
   Chen TC, 2014, PPDP'14: PROCEEDINGS OF THE 16TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P135, DOI 10.1145/2643135.2643138
   Chugh R, 2015, LECT NOTES COMPUT SC, V9032, P257, DOI 10.1007/978-3-662-46669-8_11
   Colazzo D., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P137, DOI 10.1109/LICS.1999.782605
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P50, DOI 10.1145/301631.301641
   Danielsson NA, 2010, LECT NOTES COMPUT SC, V6120, P100, DOI 10.1007/978-3-642-13321-3_8
   Duggan D, 2002, ACM T PROGR LANG SYS, V24, P711, DOI 10.1145/586088.586093
   Gapeyev V, 2002, J FUNCT PROGRAM, V12, P511, DOI 10.1017/S0956796802004318
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Ghelli G., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P146, DOI 10.1007/BFb0037104
   Hofmann M, 1996, INFORM COMPUT, V126, P11, DOI 10.1006/inco.1996.0031
   Hosoya Haruo, 1998, Datatypes and Subtyping
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Lee Joseph, 2015, EUR C OBJ OR PROGR E EUR C OBJ OR PROGR E
   Ligatti J, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/2994596
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pottier F, 2013, J FUNCT PROGRAM, V23, P38, DOI 10.1017/S0956796812000366
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Siek Jeremy G., 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P388, DOI 10.1007/978-3-319-30936-1_21
   Solomon Marvin H., 1978, P 5 ACM SIGACTSIGPLA, P31, DOI DOI 10.1145/512760.512765
   Stone Chris, 1996, CMUCS96136 CMUCS96136, P15213
   Swamy N, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P266
   The Coq Development Team, 2019, COQ
   Vanderwaart JC, 2003, ACM SIGPLAN NOTICES, V38, P98, DOI 10.1145/640136.604187
   Yang YP, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000108
NR 38
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 223
DI 10.1145/3428291
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900100
OA gold
DA 2024-07-18
ER

PT J
AU Abadi, M
   Plotkin, GD
AF Abadi, Martin
   Plotkin, Gordon D.
TI A Simple Differentiable Programming Language
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE automatic differentiation; differentiable programming
ID CALCULUS
AB Automatic differentiation plays a prominent role in scientific computing and in modern machine learning, often in the context of powerful programming systems. The relation of the various embodiments of automatic differentiation to the mathematical notion of derivative is not always entirely clear discrepancies can arise, sometimes inadvertently. In order to study automatic differentiation in such programming contexts, we define a small but expressive programming language that includes a construct for reverse-mode differentiation. We give operational and denotational semantics for this language. The operational semantics employs popular implementation techniques, while the denotational semantics employs notions of differentiation familiar from real analysis. We establish that these semantics coincide.
C1 [Abadi, Martin; Plotkin, Gordon D.] Google Res, Mountain View, CA 94043 USA.
C3 Google Incorporated
RP Abadi, M (corresponding author), Google Res, Mountain View, CA 94043 USA.
EM abadi@google.com; plotkin@google.com
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   Abadi M, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P308, DOI 10.1145/2976749.2978318
   Agrawal A., 2019, ARXIV190301855
   Amari S, 1997, ADV NEUR IN, V9, P127
   [Anonymous], 2012, RECENT ADV ALGORITHM
   [Anonymous], 2000, FRONTIERS APPL MATH
   [Anonymous], 2010, P PYTHON SCI COMPUTI
   [Anonymous], 1994, Handbook of logic in computer science
   [Anonymous], 2005, IMPLEMENTATION APPL
   [Anonymous], 2018, ADV NEURAL INFORM PR
   [Anonymous], 2016, ABS161103777 CORR
   Baydin AG, 2018, J MACH LEARN RES, V18
   BECK T, 1994, J COMPUT APPL MATH, V50, P119, DOI 10.1016/0377-0427(94)90294-1
   Bertot Yves, 2013, Interactive theorem proving and program development: Coq'Art: the calculus of inductive constructions
   Blute RF, 2009, THEOR APPL CATEG, V22, P622
   Blute Richard, 2010, ARXIV PREPRINT ARXIV
   Bucciarelli A, 2010, ELECTRON NOTES THEOR, V265, P213, DOI 10.1016/j.entcs.2010.08.013
   Clarke F. H., 1990, OPTIMIZATION NONSMOO
   Cockett JRB, 2011, THEOR APPL CATEG, V25, P537
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Di Gianantonio Pietro, 2013, FDN SOFTWARE SCI COM
   Edalat A, 2004, MATH STRUCT COMP SCI, V14, P771, DOI 10.1017/S0960129504004359
   Edalat A, 2018, LECT NOTES COMPUT SC, V10803, P459, DOI 10.1007/978-3-319-89366-2_25
   Ehrhard T, 2003, THEOR COMPUT SCI, V309, P1, DOI 10.1016/S0304-3975(03)00392-X
   Elliott Conal, 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236765
   FeiWang XilunWu, 2018, ABS180310228 CORR
   Felleisen Matthias, 1987, FORMAL DESCRIPTION P, P193
   Fischer H., 2001, ENCY OPTIMIZATION, VI, P118
   Frostig R., 2018, Syst. Mach. Learn
   Goodfellow I, 2016, ADAPT COMPUT MACH LE, P1
   Hascoet L, 2013, ACM T MATH SOFTWARE, V39, DOI 10.1145/2450153.2450158
   Iglesias-Zemmour Patrick, 2013, Diffeology
   Koch Christoph, 2018, ABS180602136 CORR
   Kriegl Andreas, 1997, CONVENIENT SETTING G, V53
   Maclaurin D., 2015, ICML 2015 AUTOML WOR, V238, P5
   Manzyuk O, 2012, ELECTRON NOTES THEOR, V286, P257, DOI 10.1016/j.entcs.2012.08.017
   Mayero M., 2002, Theorem Proving in Higher Order Logics. 15th International Conference, TPHOLs 2002. Proceedings (Lecture Notes in Computer Science Vol.2410), P246
   Paszke A., 2019, ADV NEURAL INFORM PR, P8024
   Pearlmutter BA, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330018
   Selsam D., 2017, PR MACH LEARN RES, V70, P3047
   Siskind Jeffrey Mark, 2008, Higher-Order and Symbolic Computation, V21, P361, DOI 10.1007/s10990-008-9037-1
   Slepak J, 2014, LECT NOTES COMPUT SC, V8410, P27
   Song S, 2013, IEEE GLOB CONF SIG, P245, DOI 10.1109/GlobalSIP.2013.6736861
   Tokui S., 2015, P WORKSH MACH LEARN
   Trench W. F., 2003, Introduction to Real Analysis
   Vakar M., 2018, DOM 13 WORKSH
   Yu Y, 2018, EUROSYS '18: PROCEEDINGS OF THE THIRTEENTH EUROSYS CONFERENCE, DOI 10.1145/3190508.3190551
NR 47
TC 22
Z9 23
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 38
DI 10.1145/3371106
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400039
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU de Vilhena, PE
   Pottier, F
   Jourdan, JH
AF de Vilhena, Paulo Emilio
   Pottier, Francois
   Jourdan, Jacques-Henri
TI Spy Game: Verifying a Local Generic Solver in Iris
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE separation logic; prophecy variables; least fixed point; program
   verification
AB We verify the partial correctness of a "local generic solver", that is, an on-demand, incremental, memoizing least fixed point computation algorithm. The verification is carried out in Iris, a modern breed of concurrent separation logic. The specification is simple: the solver computes the optimal least fixed point of a system of monotone equations. Although the solver relies on mutable internal state for memoization and for "spying", a form of dynamic dependency discovery, it is apparently pure: no side effects are mentioned in its specification. As auxiliary contributions, we provide several illustrations of the use of prophecy variables, a novel feature of Iris; we establish a restricted form of the infinitary conjunction rule; and we provide a specification and proof of Longley's modulus function, an archetypical example of spying.
C1 [de Vilhena, Paulo Emilio; Pottier, Francois] INRIA, Paris, France.
   [Jourdan, Jacques-Henri] Univ Paris Saclay, CNRS, Lab Rech Informat, F-91405 Orsay, France.
C3 Inria; Universite Paris Cite; Universite Paris Saclay; Centre National
   de la Recherche Scientifique (CNRS)
RP de Vilhena, PE (corresponding author), INRIA, Paris, France.
EM paulo-emilio.de-vilhena@inria.fr; francois.pottier@inria.fr;
   jacques-henri.jourdan@lri.fr
OI Jourdan, Jacques-Henri/0000-0002-9781-7097
FU French National Research Agency (ANR) [ANR-15-CE25-0008]; Agence
   Nationale de la Recherche (ANR) [ANR-15-CE25-0008] Funding Source:
   Agence Nationale de la Recherche (ANR)
FX This research was partly supported by the French National Research
   Agency (ANR) under the grant ANR-15-CE25-0008.
CR Abadi M., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P165, DOI 10.1109/LICS.1988.5115
   Apinis K, 2016, LECT NOTES COMPUT SC, V9560, P272, DOI 10.1007/978-3-319-27810-0_14
   Bauer A, 2013, LECT NOTES COMPUT SC, V7794, P225, DOI 10.1007/978-3-642-37075-5_15
   Besson F, 2009, LECT NOTES COMPUT SC, V5705, P223, DOI 10.1007/978-3-642-03829-7_8
   Cachera D, 2010, LECT NOTES COMPUT SC, V6172, P9, DOI 10.1007/978-3-642-14052-5_3
   Charguéraud A, 2010, LECT NOTES COMPUT SC, V6172, P195, DOI 10.1007/978-3-642-14052-5_15
   Chargueraud Arthur, 2010, THESIS U PARIS 7
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   de Vilhena Paulo Emilio, 2020, COQ PROOFS SPY GAME
   Fecht C, 1999, SCI COMPUT PROGRAM, V35, P137, DOI 10.1016/S0167-6423(99)00009-X
   FLOYD RW, 1967, MATH ASPECTS COMPUTE, V19
   Gotsman A, 2007, LECT NOTES COMPUT SC, V4807, P19
   Hobor A, 2008, LECT NOTES COMPUT SC, V4960, P353
   Hofmann M, 2010, LECT NOTES COMPUT SC, V6337, P340, DOI 10.1007/978-3-642-15769-1_21
   Hofmann M, 2010, LECT NOTES COMPUT SC, V6199, P199, DOI 10.1007/978-3-642-14162-1_17
   Jourdan Jacques-Henri., 2016, THESIS U PARIS DIDER
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   KAM JB, 1976, J ACM, V23, P158, DOI 10.1145/321921.321938
   Karbyshev Aleksandr, 2013, THESIS TU MUNCHEN
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   LECHARLIER B, 1992, CS9225 BROWN U
   Longley J, 1999, ACM SIGPLAN NOTICES, V34, P1, DOI 10.1145/317765.317775
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   Mével G, 2019, LECT NOTES COMPUT SC, V11423, P3, DOI 10.1007/978-3-030-17184-1_1
   Muthukumar K., 1990, ACTDC15390 MICR COMP
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Pichardie D, 2008, ELECTRON NOTES THEOR, V212, P225, DOI 10.1016/j.entcs.2008.04.064
   Pottier Francois, 2019, THE FIX
   Pottier  Francois, 2009, LAZY LEAST FIXED POI
   Seidl H, 2018, PPDP'18: PROCEEDINGS OF THE 20TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, DOI 10.1145/3236950.3236967
   Seidl Helmut, 2012, COMPILER DESIGN ANAL, DOI [10.1007/978-3-642-17548-0, DOI 10.1007/978-3-642-17548-0]
   Vergauwen B., 1994, Static Analysis. First International Static Analysis Symposium, SAS '94 Proceedings, P314
NR 33
TC 5
Z9 6
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 33
DI 10.1145/3371101
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400034
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Jung, R
   Dang, HH
   Kang, J
   Dreyer, D
AF Jung, Ralf
   Dang, Hoang-Hai
   Kang, Jeehoon
   Dreyer, Derek
TI Stacked Borrows: An Aliasing Model for Rust
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Rust; operational semantics; alias analysis; program transformation
ID MEMORY MODEL; VERIFICATION
AB Type systems are useful not just for the safety guarantees they provide, but also for helping compilers generate more efficient code by simplifying important program analyses. In Rust, the type system imposes a strict discipline on pointer aliasing, and it is an express goal of the Rust compiler developers to make use of that alias information for the purpose of program optimizations that reorder memory accesses. The problem is that Rust also supports unsafe code, and programmers can write unsafe code that bypasses the usual compiler checks to violate the aliasing discipline. To strike a balance between optimizations and unsafe code, the language needs to provide a set of rules such that unsafe code authors can be sure, if they are following these rules, that the compiler will preserve the semantics of their code despite all the optimizations it is doing.
   In this work, we propose Stacked Borrows, an operational semantics for memory accesses in Rust. Stacked Borrows defines an aliasing discipline and declares programs violating it to have undefined behavior, meaning the compiler does not have to consider such programs when performing optimizations. We give formal proofs (mechanized in Coq) showing that this rules out enough programs to enable optimizations that reorder memory accesses around unknown code and function calls, based solely on intraprocedural reasoning. We also implemented this operational model in an interpreter for Rust and ran large parts of the Rust standard library test suite in the interpreter to validate that the model permits enough real-world unsafe Rust code.
C1 [Jung, Ralf] Mozilla, San Francisco, CA 94105 USA.
   [Jung, Ralf; Dang, Hoang-Hai; Dreyer, Derek] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Kang, Jeehoon] Korea Adv Inst Sci & Technol, Daejeon, South Korea.
C3 Korea Advanced Institute of Science & Technology (KAIST)
RP Jung, R (corresponding author), Mozilla, San Francisco, CA 94105 USA.; Jung, R (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
EM jung@mpi-sws.org; haidang@mpi-sws.org; jeehoon.kang@kaist.ac.kr;
   dreyer@mpi-sws.org
RI Kang, Jeehoon/E-6130-2019
OI Kang, Jeehoon/0000-0002-2115-0871; Jung, Ralf/0000-0001-7669-6348; Dang,
   Hai/0000-0003-1029-1772
CR ANSI, 1978, X391978 ANSI
   De Fraine Bruno, 2014, WRONG RESULTS UNION
   Drepper Ulrich, 2007, MEMORY PART 5 WHAT P
   Ghiya R, 2001, ACM SIGPLAN NOTICES, V36, P47, DOI 10.1145/381694.378806
   Gohman Dan, 2015, INCORRECT LIVENESS D
   Hathhorn C, 2015, ACM SIGPLAN NOTICES, V50, P336, DOI [10.1145/2813885.2737979, 10.1145/2737924.2737979]
   Hazeghi Dara, 2013, STORE MOTION CAUSES
   Horwitz S, 1997, ACM T PROGR LANG SYS, V19, P1, DOI 10.1145/239912.239913
   Hur CK, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P59
   ISO, 2017, 98992018 ISO
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung Ralf, 2019, VEC PUSH INVALIDATES
   Jung Ralf, 2019, VECDEQUES DRAINDROP
   Jung Ralf, 2019, STACKED BORROWS ALIA, DOI [10.5281/zenodo.3541779, DOI 10.5281/ZENODO.3541779]
   Jung Ralf, 2019, FIX LINKEDLIST INVAL
   Jung Ralf, 2019, FIX OVERLAPPING REFE
   Jung Ralf, 2018, 56319 RUST PULL
   Jung Ralf, 2018, VECDEQUE FIX STACKED
   Jung Ralf, 2019, FIX STR MUTATING PTR
   Kang J, 2015, ACM SIGPLAN NOTICES, V50, P326, DOI [10.1145/2737924.2738005, 10.1145/2813885.2738005]
   Klabnik S., 2018, The Rust Programming Language
   Klock Felix S., 2019, BLOG POST
   Krebbers Robbert., 2013, Proceedings of the Third International Conference on Certified Programs and Proofs, V8307, P50, DOI DOI 10.1007/978-3-319-03545-1_4
   Krebbers Robbert, 2015, THESIS RADBOUD U
   Lee J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276495
   Leroy X, 2008, J AUTOM REASONING, V41, P1, DOI 10.1007/s10817-008-9099-0
   Leroy Xavier, 2012, Research Report RR-7987
   Matsakis Niko, 2018, BLOG POST
   Memarian K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290380
   Memarian Kayvan, 2016, WG14N2014 ISO
   Nguyen TVN, 2003, J UNIVERS COMPUT SCI, V9, P270
   Norrish M., 1998, Ph. D. Dissertation
   Popov Nikita, 2018, LOOP UNROLLING INCOR
   Regehr John, 2017, BLOG POST
   Robert Valentin, 2012, Certified Programs and Proofs. Second International Conference (CPP 2012). Proceedings, P11, DOI 10.1007/978-3-642-35308-6_5
   WILSON RP, 1995, SIGPLAN NOTICES, V30, P1, DOI 10.1145/223428.207111
NR 36
TC 23
Z9 27
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 41
DI 10.1145/3371109
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400042
OA gold
DA 2024-07-18
ER

PT J
AU New, MS
   Jamner, D
   Ahmed, A
AF New, Max S.
   Jamner, Dustin
   Ahmed, Amal
TI Graduality and Parametricity: Together Again for the First Time
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE gradual typing; graduality; polymorphism; parametricity; logical
   relation
AB Parametric polymorphism and gradual typing have proven to be a difficult combination, with no language yet produced that satisfies the fundamental theorems of each: parametricity and graduality. Notably, Toro, Labrada, and Tanter (POPE. 2019) conjecture that for any gradual extension of System F that uses dynamic type generation, graduality and parametricity are "simply incompatible". However, we argue that it is not graduality and parametricity that are incompatible per se, but instead that combining the syntax of System F with dynamic type generation as in previous work necessitates type-directed computation, which we show has been a common source of graduality and pararnetricity violations in previous work.
   We then show that by modifying the syntax of universal and existential types to make the type name generation explicit, we remove the need for type-directed computation, and get a language that satisfies both graduality and parametricity theorems. The language has a simple runtime semantics, which can be explained by translation to a statically typed language where the dynamic type is interpreted as a dynamically extensible sum type. Far from being in conflict, we show that the parametricity theorem follows as a direct corollary of a relational interpretation of the graduality property.
C1 [New, Max S.; Jamner, Dustin; Ahmed, Amal] Northeastern Univ, Khoury Coll Comp Sci, Boston, MA 02115 USA.
C3 Northeastern University
RP New, MS (corresponding author), Northeastern Univ, Khoury Coll Comp Sci, Boston, MA 02115 USA.
EM maxnew@ccs.neu.edu; jamner.d@husky.neu.edu; amal@ccs.neu.edu
RI Ahmed, Amal/IGC-9696-2023
OI Ahmed, Amal/0000-0001-7424-572X; Jamner, Dustin/0000-0003-0700-3514
FU National Science Foundation [CCF-1910522, CCF-1816837, CCF-1453796]
FX We thank the anonymous reviewers for their in-depth comments. We also
   thank Matthias Felleisen for explaining the importance that tag checks
   be total operations. This material is based on research supported by the
   National Science Foundation under grants CCF-1910522, CCF-1816837, and
   CCF-1453796. Any opinions, findings, and conclusions or recommendations
   expressed in this material are those of the authors and do not
   necessarily reflect the views of the National Science Foundation.
CR Ahmed A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110283
   Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   Ahmed A, 2009, ACM SIGPLAN NOTICES, V44, P340, DOI 10.1145/1594834.1480925
   Schwerter FB, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283, DOI 10.1145/2628136.2628149
   Boyland John, 2014, 21 WORKSH FDN OBJ OR
   Castagna Giuseppe, 2017, P ACM PROGRAM LANG, DOI DOI 10.1145/3110285
   Disney Tim, 2011, WORKSH SCRIPT TO PRO
   Dunphy Brian Patrick, 2002, THESIS CHAMPAIGN
   Felleisen Matthias, 1990, ESOP 90
   Fennell L, 2013, P IEEE CSFW, P224, DOI 10.1109/CSF.2013.22
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia Ronald, 2015, POPL 15
   Igarashi Atsushi, INT C FUNCT PROGR IC
   Igarashi Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110284
   Ina L, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P609
   Lehmann Nico, 2017, ACM SIGPLAN Notices, V52, P775, DOI 10.1145/3093333.3009856
   Levy Paul Blain, 2003, CALL BY PUSH VALUE F
   Ma QingMing, 1991, MATH FDN PROGR SEM 7
   Mitchell John C., 1985, ACM S PRINC PROGR LA
   Neis G, 2009, ACM SIGPLAN NOTICES, V44, P135, DOI 10.1145/1631687.1596572
   New Max S., 2019, POPL 19
   New Max S, 2020, TECHNICAL APPENDIX G
   New Max S., 2018, INT C FUNCT PROGR IC
   Ningning Xie, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P3, DOI 10.1007/978-3-319-89884-1_1
   Plotkin G., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P361, DOI 10.1007/BFb0037118
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   Sergey I, 2012, LECT NOTES COMPUT SC, V7211, P579, DOI 10.1007/978-3-642-28869-2_29
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy, 2015, 1 SUMM ADV PROGR LAN
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Sumii E, 2004, ACM SIGPLAN NOTICES, V39, P161, DOI 10.1145/982962.964015
   Takikawa A, 2012, ACM SIGPLAN NOTICES, V47, P793, DOI 10.1145/2398857.2384674
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tobin-Hochstadt Sam, TYPED RACKET REFEREN
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Toro M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290330
   Toro M, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3229061
   Wolff Roger, 2011, P 25 EUR C OBJ OR PR
NR 39
TC 20
Z9 20
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 46
DI 10.1145/3371114
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400047
OA gold
DA 2024-07-18
ER

PT J
AU Thiemann, P
   Vasconcelos, VT
AF Thiemann, Peter
   Vasconcelos, Vasco T.
TI Label-Dependent Session Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE session types; dependent types; linear types
AB Session types have emerged as a typing discipline for communication protocols. Existing calculi with session types come equipped with many different primitives that combine communication with the introduction or elimination of the transmitted value.
   We present a foundational session type calculus with a lightweight operational semantics. It fully decouples communication from the introduction and elimination of data and thus features a single communication reduction, which acts as a rendezvous between senders and receivers. We achieve this decoupling by introducing label-dependent session types, a minimalist value-dependent session type system with subtyping. The system is sufficiently powerful to simulate existing functional session type systems. Compared to such systems, label-dependent session types place fewer restrictions on the code. We further introduce primitive recursion over natural numbers at the type level, thus allowing to describe protocols whose behaviour depends on numbers exchanged in messages. An algorithmic type checking system is introduced and proved equivalent to its declarative counterpart. The new calculus showcases a novel lightweight integration of dependent types and linear typing, with has uses beyond session type systems.
C1 [Thiemann, Peter] Univ Freiburg, Fac Engn, Dept Informat, Freiburg, Germany.
   [Vasconcelos, Vasco T.] Univ Lisbon, Fac Sci, Dept Informat, LASIGE, Lisbon, Portugal.
C3 University of Freiburg; Universidade de Lisboa
RP Thiemann, P (corresponding author), Univ Freiburg, Fac Engn, Dept Informat, Freiburg, Germany.
EM thiemann@acm.org; vv@di.fc.ul.pt
RI Vasconcelos, Vasco T/M-4920-2017
OI Vasconcelos, Vasco T/0000-0002-9539-8861; Thiemann,
   Peter/0000-0002-9000-1239
FU FCT through the LASIGE Research Unit [UID/CEC/00408/2019]; Cost Action
   EUTypes [CA15123]
FX This work was supported by FCT through the LASIGE Research Unit, ref.
   UID/CEC/00408/2019, and by Cost Action CA15123 EUTypes.
CR Ahman D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158153
   Aspinall D, 2001, THEOR COMPUT SCI, V266, P273, DOI 10.1016/S0304-3975(00)00175-4
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Baltazar P, 2012, ELECTRON P THEOR COM, P38, DOI 10.4204/EPTCS.101.4
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Bonelli Eduardo, 2004, ELECT NOTES THEOR CO, V97, P175, DOI [10.1016/j.entcs.2004.04.036, DOI 10.1016/J.ENTCS.2004.04.036]
   Brady E, 2017, COMPUT SCI-AGH, V18, P219, DOI 10.7494/csci.2017.18.3.1413
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Caires L, 2016, MATH STRUCT COMP SCI, V26, P367, DOI 10.1017/S0960129514000218
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Cardelli Luca, 1998, P 25 ACM S POPL, DOI [10.1145/268946.268968, DOI 10.1145/268946.268968]
   Casinghino C, 2014, ACM SIGPLAN NOTICES, V49, P33, DOI 10.1145/2535838.2535883
   Castagna G, 2016, ACM SIGPLAN NOTICES, V51, P378, DOI 10.1145/3022670.2951928
   Castagna G, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P219, DOI 10.1145/1599410.1599437
   Cervesato I, 1996, IEEE S LOG, P264, DOI 10.1109/LICS.1996.561339
   Chen TC, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(2:12)2017
   Dal Lago U, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:11)2012
   Dardha Ornela, 2012, PROC PPDP 2012, P139, DOI DOI 10.1145/2370776.2370794
   Dezani-Ciancaglini M, 2009, INFORM COMPUT, V207, P595, DOI 10.1016/j.ic.2008.03.028
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   Ferreira F, 2014, PPDP'14: PROCEEDINGS OF THE 16TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P161, DOI 10.1145/2643135.2643153
   Garrigue Jacques., 1998, ML WORKSH BALT, V13, P7
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay SJ, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P299, DOI 10.1145/1706299.1706335
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Goto M, 2016, MATH STRUCT COMP SCI, V26, P465, DOI 10.1017/S0960129514000231
   Harper R, 2016, Practical Foundations for Programming Languages
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Honda K, 2011, LECT NOTES COMPUT SC, V6536, P55, DOI 10.1007/978-3-642-19056-8_4
   Hu R, 2008, LECT NOTES COMPUT SC, V5142, P516, DOI 10.1007/978-3-540-70592-5_22
   Igarashi A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110282
   Kabayashi N., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P358, DOI 10.1145/237721.237804
   Kobayashi N, 2003, LECT NOTES COMPUT SC, V2757, P439
   Krishnaswami NR, 2015, ACM SIGPLAN NOTICES, V50, P17, DOI [10.1145/2676726.2676969, 10.1145/2775051.2676969]
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P434, DOI 10.1145/3022670.2951921
   Lindley S, 2014, ELECTRON PROC THEOR, P9, DOI 10.4204/EPTCS.155.2
   Mazurak K, 2010, ACM SIGPLAN NOTICES, V45, P39, DOI 10.1145/1932681.1863551
   McBride Conor, 2016, LNCS, P207, DOI DOI 10.1007/978-3-319-30936-1
   Morris J. Garrett, 2019, PACMPL 3 POPL 2019, P1
   Padovani L, 2017, LECT NOTES COMPUT SC, V10201, P804, DOI 10.1007/978-3-662-54434-1_30
   Padovani L, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000289
   Petit Barbara, 2012, ACM PPDP 2012, P115
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   POPL, 2010, P 37 ACM S POPL
   Sangiorgi D, 1998, INFORM COMPUT, V143, P34, DOI 10.1006/inco.1998.2711
   Scalas Alceste, 2016, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, DOI [DOI 10.4230/LIPICS, DOI 10.4230/LIPICS.ECOOP.2016.21]
   Shi R, 2013, SCI COMPUT PROGRAM, V78, P1176, DOI 10.1016/j.scico.2012.09.005
   Sjoeberg V, 2012, ELECTRON PROC THEOR, P112, DOI 10.4204/EPTCS.76.9
   Swamy N, 2013, J FUNCT PROGRAM, V23, P402, DOI 10.1017/S0956796813000142
   Takeuchi K., 1994, Parallel Architectures and Languages Europe'94, V817, P398, DOI [DOI 10.1007/3-540-58184-7_118, 10.1007/3540581847118]
   Thiemann P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371135
   Toninho Bernardo, 2018, Foundations of Software Science and Computation Structures. 21st International Conference, FOSSACS 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10803, P128, DOI 10.1007/978-3-319-89366-2_7
   Toninho B, 2011, PPDP 11 - PROCEEDINGS OF THE 2011 SYMPOSIUM ON PRINCIPLES AND PRACTICES OF DECLARATIVE PROGRAMMING, P161
   Vasconcelos V. T., 1993, Object Technologies for Advanced Software. First JSSST International Symposium. Proceedings, P460
   Vasconcelos VT, 2006, THEOR COMPUT SCI, V368, P64, DOI 10.1016/j.tcs.2006.06.028
   Vasconcelos VT, 2012, INFORM COMPUT, V217, P52, DOI 10.1016/j.ic.2012.05.002
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
   Wu Hanwen, 2017, DEPENDENT SESSION TY
NR 61
TC 17
Z9 17
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 67
DI 10.1145/3371135
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400068
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Bottu, GJ
   Xie, NN
   Marntirosian, K
   Schrijvers, T
AF Bottu, Gert-Jan
   Xie, Ningning
   Marntirosian, Koar
   Schrijvers, Tom
TI Coherence of Type Class Resolution
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type class resolution; coherence; logical relations
AB Elaboration-based type class resolution, as found in languages like Haskell, Mercury and PureScript, is generally nondeterministic: there can be multiple ways to satisfy a wanted constraint in terms of global instances and locally given constraints. Coherence is the key property that keeps this sane; it guarantees that, despite the nondeterminism, programs still behave predictably. Even though elaboration-based resolution is generally assumed coherent, as far as we know, there is no formal proof of this property in the presence of sources of nondeterrninisrn, like superclasses and flexible contexts.
   This paper provides a formal proof to remedy the situation. The proof is non-trivial because the semantics elaborates resolution into a target language where different elaborations can be distinguished by contexts that do not have a source language counterpart. Inspired by the notion of full abstraction, we present a two-step strategy that first elaborates nondeterministically into an intermediate language that preserves contextual equivalence, and then deterministically elaborates from there into the target language. We use an approach based on logical relations to establish contextual equivalence and thus coherence for the first step of elaboration, while the second step's determinism straightforwardly preserves this coherence property.
C1 [Bottu, Gert-Jan; Marntirosian, Koar; Schrijvers, Tom] Katholieke Univ Leuven, Dept Comp Sci, Leuven, Belgium.
   [Xie, Ningning] Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China.
C3 KU Leuven; University of Hong Kong
RP Bottu, GJ (corresponding author), Katholieke Univ Leuven, Dept Comp Sci, Leuven, Belgium.
EM gertjan.bottu@kuleuven.be; nnxie@cs.hku.hk;
   koar.marntirosian@kuleuven.be; tom.schrijvers@kuleuven.be
RI Bottu, Gert-Jan/P-1663-2018; Schrijvers, Tom/A-6696-2016
OI Schrijvers, Tom/0000-0001-8771-5559
FU Flemish Fund for Scientific Research (FWO); Hong Kong Research Grant
   Council [17210617, 17258816]
FX This work would not have been possible without the enlightening
   discussions with Dominique Devriese and George Karachalias. Furthermore,
   we would like to thank Alexander Vandenbroucke, Ruben Pieters and Steven
   Keuchel, as well as the anonymous ICFP 2019 and Haskell Symposium 2018
   reviewers, for their constructive feedback. This research was partially
   supported by the Flemish Fund for Scientific Research (FWO) and the Hong
   Kong Research Grant Council projects number 17210617 and 17258816.
CR Abadi Martin, 1999, PROTECTION PROGRAMMI, p19S34
   Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Ahmed Amal, 2015, LOGICAL RELATIONS
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Bernardy JP, 2012, J FUNCT PROGRAM, V22, P107, DOI 10.1017/S0956796812000056
   Bi Xuan, 2018, ECOOP
   Bi Xuan, 2019, DISTRIBUTIVE DISJOIN
   Biernacki Dariusz, 2015, LIPICS
   Bottu GJ, 2017, ACM SIGPLAN NOTICES, V52, P148, DOI 10.1145/3156695.3122967
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Chakravarty M.M. T., 2005, P 10 ACM SIGPLAN INT, P241, DOI [DOI 10.1145/1086365.1086397, DOI 10.1145/1090189.1086397]
   de Moura Leonardo., 2015, The Lean Theorem Prover"
   Devriese D, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Dreyer Derek, 2007, POPL 07, p63S70
   Freeman Phil, 2017, PURESCRIPT EXAMPLE
   Gilbert G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290316
   Gregor Douglas, 2006, SIGPLAN NOTICES, V41
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   Harper R, 2016, Practical Foundations for Programming Languages
   Henderson Fergus, 1996, MERCURY LANGUAGE REF
   Jones M.P., 1993, Technical Report YALEU/DCS/RR- 989
   Jones MarkP., 1994, Qualified Types: Theory and Practice
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   Jones Simon L. Peyton, 2006, P 11 ACM SIGPLAN INT, P50, DOI [DOI 10.1145/1160074.1159811, 10.1145/1159803.1159811, DOI 10.1145/1159803.1159811]
   Kahl Wolfram, 2001, P HASK WORKSH 2001 P HASK WORKSH 2001, V59
   Lampropoulos Leonidas, 2018, SOFTWARE FDN, V4
   Morris J. Garrett, 2014, HASKELL 2014
   Morris Jr James Hiram, 1969, THESIS MIT THESIS MIT
   Odersky Lex Spoon Martin, 2008, PROGRAMMING SCALA
   Odersky Martin, 2017, POPL 18
   Orchard Dominic, 2010, FUNCTIONAL LOGIC PRO, p56S71
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plotkin Gordon, 1973, LAMBDA DEFINABILITY
   Reynolds John C., 1991, TACS 91
   Schrijvers T, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000242
   Sozeau Matthieu, 2008, TPHOLS 08
   STATMAN R, 1985, INFORM CONTROL, V65, P85, DOI 10.1016/S0019-9958(85)80001-2
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Team Mozilla Research, 2017, RUST PROGR LANG RUST PROGR LANG
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   White L, 2015, ELECTRON P THEOR COM, P22, DOI 10.4204/EPTCS.198.2
   Winant T, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P81, DOI 10.1145/3242744.3242752
NR 43
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 91
DI 10.1145/3341695
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900014
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Flatt, M
   Derici, C
   Dybvig, RK
   Keep, AW
   Massaccesi, GE
   Spall, S
   Tobin-Hochstadt, S
   Zeppieri, J
AF Flatt, Matthew
   Derici, Caner
   Dybvig, R. Kent
   Keep, Andrew W.
   Massaccesi, Gustavo E.
   Spall, Sarah
   Tobin-Hochstadt, Sam
   Zeppieri, Jon
TI Rebuilding Racket on Chez Scheme (Experience Report)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Racket; Scheme
AB We rebuilt Racket on Chez Scheme, and it works well-as long as we're allowed a few patches to Chez Scheme. DrRacket runs, the Racket distribution can build itself, and nearly all of the core Racket test suite passes. Maintainability and performance of the resulting implementation are good, although some work remains to improve end-to-end performance. The least predictable part of our effort was how big the differences between Racket and Chez Scheme would turn out to be and how we would manage those differences. We expect Racket on Chez Scheme to become the main Racket implementation, and we encourage other language implementers to consider Chez Scheme as a target virtual machine.
C1 [Flatt, Matthew] Univ Utah, Salt Lake City, UT 84112 USA.
   [Derici, Caner; Spall, Sarah; Tobin-Hochstadt, Sam] Indiana Univ, Bloomington, IN 47405 USA.
   [Dybvig, R. Kent; Keep, Andrew W.] Cisco Syst Inc, San Jose, CA USA.
   [Massaccesi, Gustavo E.] Univ Buenos Aires, Buenos Aires, DF, Argentina.
C3 Utah System of Higher Education; University of Utah; Indiana University
   System; Indiana University Bloomington; Cisco Systems Inc; University of
   Buenos Aires
RP Flatt, M (corresponding author), Univ Utah, Salt Lake City, UT 84112 USA.
EM mflatt@cs.utah.edu; cderici@indiana.edu; dyb@cisco.com; akeep@cisco.com;
   gustavo@oma.org.ar; sjspall@iu.edu; samth@cs.indiana.edu;
   zeppieri@gmail.com
OI Tobin-Hochstadt, Sam/0000-0003-1302-6499
FU National Science Foundation; Consejo Nacional de Investigaciones
   Cientificas y Tecnicas, Universidad de Buenos Aires; Agencia Nacional de
   Promocion Cientiifica y Tecnologica [NSF-1823244, 2013-1401PCB]; UBACYT
   [20020150100157BA]; PICT [201-0381]
FX The authors are supported by grants from National Science Foundation,
   Consejo Nacional de Investigaciones Cientificas y Tecnicas, Universidad
   de Buenos Aires, and Agencia Nacional de Promocion Cientiifica y
   Tecnologica, including grants NSF-1823244, PCB No. 2013-1401PCB, UBACYT
   20020150100157BA, and PICT No. 201-0381.
CR Adams Michael D., 2013, THESIS INDIANA U
   Andersen L, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3275519
   Barzilay Eli., 2004, P SCHEM FUNCT PROGR
   Benson Jr BrentW., 1994, P USENIX S VER HIGH
   Clements John, 2001, P EUR S PROGR
   Clements John, 2004, T PROGRAMMING LANGUA, V26, p1029S
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Dybvig R. K., 1993, SIGPLAN Notices, V28, P207, DOI 10.1145/173262.155110
   Dyvbig RK, 2007, J FUNCT PROGRAM, V17, P687, DOI 10.1017/S0956796807006259
   Flatt M., 1999, P INT C FUNCT PROGR
   Flatt Matthew, 2007, P INT C FUNCT PROGR
   Hayes B., 1997, SIGPLAN Notices, V32, P176, DOI 10.1145/263700.263733
   Hieb R., 1990, SIGPLAN Notices, V25, P128, DOI 10.1145/99164.99178
   Hieb Robert, 1994, LISP SYMB COMPUT, V7, p83S
   Li Xiangqi, 2017, P SOFTW LANG ENG
   Reppy JohnH., 1999, CONCURRENT PROGRAMMI
   Smart Julian., 1995, USER MANUAL WXWINDOW
   Sperber Michael, 2007, REVISED 6 REPORT ALG
   Strickland T.Stephen., 2012, Proc. Conf. Object-Oriented Programming Systems, Languages, P943
   Wick Adam., 2004, P INT S MEM MAN
NR 20
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 78
DI 10.1145/3341642
PG 15
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900001
OA gold
DA 2024-07-18
ER

PT J
AU Pédrot, PM
   Tabareau, N
   Fehrmann, HJ
   Tanter, É
AF Pedrot, Pierre-Marie
   Tabareau, Nicolas
   Fehrmann, Hans Jacob
   Tanter, Eric
TI A Reasonably Exceptional Type Theory
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type theory; effects; exceptions; parametricity
AB Traditional approaches to compensate for the lack of exceptions in type theories for proof assistants have severe drawbacks from both a programming and a reasoning perspective. Pedrot and Tabareau recently extended the Calculus of Inductive Constructions (CIC) with exceptions. The new exceptional type theory is interpreted by a translation into CIC, covering full dependent elimination, decidable type-checking and canonicity. However, the exceptional theory is inconsistent as a logical system. To recover consistency, Pedrot and Tabareau propose an additional translation that uses parametricity to enforce that all exceptions are caught locally. While this enforcement brings logical expressivity gains over CIC, it completely prevents reasoning about exceptional programs such as partial functions. This work addresses the dilemma between exceptions and consistency in a more flexible manner, with the Reasonably Exceptional Type Theory (RETT). RETT is structured in three layers: (a) the exceptional layer, in which all terms can raise exceptions; (b) the mediation layer, in which exceptional terms must be provably parametric; (c) the pure layer, in which terms are non-exceptional, but can refer to exceptional terms. We present the general theory of RE IT, where each layer is realized by a predicative hierarchy of universes, and develop an instance of RETT in COQ: the impure layer corresponds to the predicative universe hierarchy, the pure layer is realized by the impredicative universe of 108 propositions, and the mediation layer is reified via a parametricity type class. RETT is the first full dependent typ e theory to support consistent reasoning about exceptional terms, and the COQRETT plugin readily brings this ability to COQ programmers.
C1 [Pedrot, Pierre-Marie; Tabareau, Nicolas] INRIA, Gallinette Project Team, Nantes, France.
   [Fehrmann, Hans Jacob; Tanter, Eric] Univ Chile, Comp Sci Dept DCC, Santiago, Chile.
   [Tanter, Eric] Inria Paris, Paris, France.
C3 Inria; Universidad de Chile
RP Pédrot, PM (corresponding author), INRIA, Gallinette Project Team, Nantes, France.
OI tabareau, nicolas/0000-0003-3366-2273
FU CONICYT FONDECYT Regular Project [1190058]; CONICYT REDES Project
   [170067]; European Research Council under ERC [637339]; ERC [715753];
   Inria Equipe Associee GECO; European Research Council (ERC) [715753]
   Funding Source: European Research Council (ERC)
FX This work is partially funded by CONICYT FONDECYT Regular Project
   1190058, by CONICYT REDES Project 170067, by the European Research
   Council under ERC Starting Grant CoqHoTT (637339) and ERC Starting Grant
   SECOMP (715753) and by Inria Equipe Associee GECO.
CR Ahman D, 2016, LECT NOTES COMPUT SC, V9634, P36, DOI 10.1007/978-3-662-49630-5_3
   Barthe G., 1999, Higher-Order and Symbolic Computation, V12, P125, DOI 10.1023/A:1010000206149
   Bernardy JP, 2011, LECT NOTES COMPUT SC, V6604, P108, DOI 10.1007/978-3-642-19805-2_8
   Bertot Y., 2004, TEXT THEORET COMP S
   Boulier S, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P182, DOI 10.1145/3018610.3018620
   Bowman WJ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158110
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Breitner Joachim, 2018, P ACM PROGR LANG, V89, P16, DOI DOI 10.1145/3236784
   Casinghino C, 2014, ACM SIGPLAN NOTICES, V49, P33, DOI 10.1145/2535838.2535883
   Chlipala A, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P79
   Cockx Jesper, 2016, 22 INT C TYP PROOF P
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Jaber G, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P367, DOI 10.1145/2933575.2935320
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy Xavier, 2016, ERTS 2016 EMB REAL T
   Letouzey Pierre, 2004, THESIS U PARIS 11
   Levy Paul Blain, 2001, THESIS QUEEN MARY U
   Mahboubi Assia, 2008, MATH COMPONENTS
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   Pedrot Pierre-Marie, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P245, DOI 10.1007/978-3-319-89884-1_9
   Pédrot PM, 2017, IEEE S LOG, DOI 10.1109/LICS.2017.8005113
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Sozeau M, 2008, LECT NOTES COMPUT SC, V5170, P278, DOI 10.1007/978-3-540-71067-7_23
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Tanter É, 2016, ACM SIGPLAN NOTICES, V51, P26, DOI [10.1145/2816707.2816710, 10.1145/2936313.2816710]
   The Coq Development Team, 2019, COQ PROOF ASS REF MA
   Univalent Foundations Project, 2013, HOM TYP THEOR UN FDN
   Vakar Matthijs, 2015, ARXIVARXIV151208009
   Wiedijk F, 2012, ELECTRON NOTES THEOR, V285, P85, DOI 10.1016/j.entcs.2012.06.008
NR 32
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 108
DI 10.1145/3341712
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900031
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Mathur, U
   Madhusudan, P
   Viswanathan, M
AF Mathur, Umang
   Madhusudan, P.
   Viswanathan, Mahesh
TI Decidable Verification of Uninterpreted Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Uninterpreted Programs; Coherence; Program Verification; Decidability;
   Streaming Congruence Closure
AB We study the problem of completely automatically verifying uninterpreted programs-programs that work over arbitrary data models that provide an interpretation for the constants, functions and relations the program uses. The verification problem asks whether a given program satisfies a postcondition written using quantifier-free formulas with equality on the final state, with no loop invariants, contracts, etc. being provided. We show that this problem is undecidable in general. The main contribution of this paper is a subclass of programs, called coherent programs that admits decidable verification, and can be decided in PSPACE. We then extend this class of programs to classes of programs that are k-coherent, where k is an element of N, obtained by (automatically) adding k ghost variables and assignments that make them coherent. We also extend the decidability result to programs with recursive function calls and prove several undecidability results that show why our restrictions to obtain decidability seem necessary.
C1 [Mathur, Umang; Madhusudan, P.; Viswanathan, Mahesh] Univ Illinois, Dept Comp Sci, Champaign, IL 61820 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign
RP Mathur, U (corresponding author), Univ Illinois, Dept Comp Sci, Champaign, IL 61820 USA.
EM umathur30@illinois.edu; madhu@illinois.edu; vmahesh@illinois.edu
OI Mathur, Umang/0000-0002-7610-0660
FU National Science Foundation [1422798, 1329991, 1527395]; Direct For
   Computer & Info Scie & Enginr; Division Of Computer and Network Systems
   [1329991] Funding Source: National Science Foundation; Direct For
   Computer & Info Scie & Enginr; Division of Computing and Communication
   Foundations [1527395, 1422798] Funding Source: National Science
   Foundation
FX This material is based upon work supported by the National Science
   Foundation under Grant Nos. 1422798, 1329991, and 1527395.
CR Alpern B., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P1, DOI 10.1145/73560.73561
   Alur R, 2005, ACM T PROGR LANG SYS, V27, P786, DOI 10.1145/1075382.1075387
   Alur R., 2004, P 36 ANN ACM S THEOR, P202, DOI [DOI 10.1145/1007352.1007390, 10.1145/1007352.1007390]
   Alur R, 2009, J ACM, V56, DOI 10.1145/1516512.1516518
   [Anonymous], 1981, P STOC, DOI DOI 10.1145/800076.802477
   [Anonymous], 1982, PROC STOC 1982, DOI [10.1145/800070.802201, DOI 10.1145/800070.802201]
   Bradley A. R., 2007, The Calculus of Computation
   Bryant Randal E., 2001, ACM T COMPUT LOGIC, V2, DOI [10.1145/371282.371364, DOI 10.1145/371282.371364]
   Burch J. R., 1994, Computer Aided Verification. 6th International Conference, CAV '94. Proceedings, P68
   Chatterjee K, 2016, ACM SIGPLAN NOTICES, V51, P733, DOI 10.1145/2914770.2837624
   Chatterjee K, 2015, ACM SIGPLAN NOTICES, V50, P97, DOI [10.1145/2676726.2676979, 10.1145/2775051.2676979]
   Courcelle Professor Bruno, 2012, GRAPH STRUCTURE MONA, V1st
   Dillig I, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P187, DOI 10.1145/1926385.1926407
   Esparza J, 1999, LECT NOTES COMPUT SC, V1578, P14
   Esparza Javier, 2000, P 12 INT C COMP AID
   Farzan A, 2015, ACM SIGPLAN NOTICES, V50, P407, DOI [10.1145/2676726.2677012, 10.1145/2775051.2677012]
   Farzan A, 2014, ACM SIGPLAN NOTICES, V49, P151, DOI 10.1145/2535838.2535885
   Godefroid P, 2013, LECT NOTES COMPUT SC, V7795, P214, DOI 10.1007/978-3-642-36742-7_16
   Godoy G, 2009, LECT NOTES COMPUT SC, V5673, P326, DOI 10.1007/978-3-642-03237-0_22
   GRANGER P, 1991, LECT NOTES COMPUT SC, V493, P169
   Gulwani S, 2006, LECT NOTES COMPUT SC, V3924, P279
   Gulwani S, 2004, LECT NOTES COMPUT SC, V3148, P212
   Gulwani S, 2004, ACM SIGPLAN NOTICES, V39, P342, DOI 10.1145/982962.964030
   Gulwani S, 2007, LECT NOTES COMPUT SC, V4349, P363
   Heizmann Matthias, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P36, DOI 10.1007/978-3-642-39799-8_2
   Heizmann M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P471, DOI 10.1145/1706299.1706353
   Heizmann M, 2009, LECT NOTES COMPUT SC, V5673, P69, DOI 10.1007/978-3-642-03237-0_7
   Karp R. M., 1969, J COMPUT SYST SCI, V3, P147, DOI DOI 10.1016/S0022-0000(69)80011-5
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   Löding C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158098
   Lopes NP, 2016, INT J SOFTW TOOLS TE, V18, P359, DOI 10.1007/s10009-015-0366-1
   Madhusudan P, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P283, DOI 10.1145/1926385.1926419
   Mathur Umang, 2018, ABS181100192 CORR
   Müller-Olm M, 2005, LECT NOTES COMPUT SC, V3672, P235
   Müller-Olm M, 2005, LECT NOTES COMPUT SC, V3385, P79
   Müller-Olm M, 2004, LECT NOTES COMPUT SC, V3142, P1016
   Pek E, 2014, ACM SIGPLAN NOTICES, V49, P440, DOI [10.1145/2594291.2594325, 10.1145/2666356.2594325]
   Qiu XK, 2013, ACM SIGPLAN NOTICES, V48, P231, DOI 10.1145/2499370.2462169
   ROBERTSON N, 1983, J COMB THEORY B, V35, P39, DOI 10.1016/0095-8956(83)90079-5
   Schwoon S, 2002, PhD thesis
   SEESE D, 1991, ANN PURE APPL LOGIC, V53, P169, DOI 10.1016/0168-0072(91)90054-P
NR 41
TC 9
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 46
DI 10.1145/3290359
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300046
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Shi, KS
   Steinhardt, J
   Liang, P
AF Shi, Kensen
   Steinhardt, Jacob
   Liang, Percy
TI FRANGEL: Component-Based Synthesis with Control Structures
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; component-based synthesis; control structures;
   angelic execution
AB In component-based program synthesis, the synthesizer generates a program given a library of components (functions). Existing component-based synthesizers have difficulty synthesizing loops and other control structures, and they often require formal specifications of the components, which can be expensive to generate. We present FRANGEL a new approach to component-based synthesis that can synthesize short Java functions with control structures when given a desired signature, a set of input-output examples, and a collection of libraries (without formal specifications). FRANGEL aims to discover programs with many distinct behaviors by combining two main ideas. First, it mines code fragments from partially-successful programs that only pass some of the examples. These extracted fragments are often useful for synthesis due to a property that we call special-case similarity. Second, FRANGEL uses angelic conditions as placeholders for control structure conditions and optimistically evaluates the resulting program sketches. Angelic conditions decompose the synthesis process: FRANGEL first finds promising partial programs and later fills in their missing conditions. We demonstrate that FRANGEL can synthesize a variety of interesting programs with combinations of control structures within seconds, significantly outperforming prior state-of-the-art.
C1 [Shi, Kensen; Steinhardt, Jacob; Liang, Percy] Stanford Univ, Dept Comp Sci, Stanford, CA 94305 USA.
C3 Stanford University
RP Shi, KS (corresponding author), Stanford Univ, Dept Comp Sci, Stanford, CA 94305 USA.
EM kensens@cs.stanford.edu; jsteinhardt@cs.stanford.edu;
   pliang@cs.stanford.edu
OI Steinhardt, Jacob Noah/0000-0002-0257-3860
CR [Anonymous], INT C LEARN REPR ICL
   Bar-David Y, 2003, LECT NOTES COMPUT SC, V2848, P136
   Barthe Gilles., 2013, Principles and Practice of Parallel Programming (PPoPP)
   Bodik Rastislav, 2010, PRINCIPLES PROGRAMMI
   Devlin Jacob, 2017, INT CMACH LEARN ICML INT CMACH LEARN ICML
   Feng Yu, 2017, PRINCIPLES PROGRAMMI
   Feng Yu, 2017, PROGRAMMING LANGUAGE
   Feser JohnK., 2015, PROGRAMMING LANGUAGE
   Galenson J, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P653, DOI 10.1145/2568225.2568250
   Gulwani S., 2011, PROGRAMMING LANGUAGE
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Gvero Tihomir., 2011, Computer Aided Verification (CAV) Tool Demo
   Gvero Tihomir, 2013, PROGRAMMING LANGUAGE
   Harris TE., 2002, THEORY BRANCHING PRO
   Harris William R., 2011, PROGRAMMING LANGUAGE
   Heule S., 2016, PROGRAMMING LANGUAGE
   Heule Stefan, 2015, FDN SOFTWARE ENG FSE
   Jha Susmit, 2010, INT C SOFTW ENG ICSE INT C SOFTW ENG ICSE
   Katayama Susumu, 2005, TRENDS FUNCTIONAL PR, V6
   Lau Tessa A, 2000, INT C MACH LEARN ICM INT C MACH LEARN ICM
   Maddison Chris, 2014, INT C MACH LEARN ICM INT C MACH LEARN ICM
   Mandelin D, 2005, ACM SIGPLAN NOTICES, V40, P48, DOI 10.1145/1064978.1065018
   Menon A., 2013, INT C MACH LEARN ICM
   Osera Peter-Michael, 2015, PROGRAMMING LANGUAGE
   Perelman Daniel, 2014, PROGRAMMING LANGUAGE
   Qi Dawei, 2012, WORK C REV ENG WCRE WORK C REV ENG WCRE
   Raychev Veselin, 2014, PROGRAMMING LANGUAGE
   Schkufza E, 2016, COMMUN ACM, V59, P114, DOI 10.1145/2863701
   Shi Kensen, 2018, FRANGEL SOURCE CODE
   Solarlezama Armando, 2008, PROGRAM SYNTHESIS SK
   Srivastava Saurabh, 2010, PRINCIPLES PROGRAMMI
   Udupa Abhishek, 2017, TOOLS ALGORITHMS CON
   Weimer W, 2009, PROC INT CONF SOFTW, P364, DOI 10.1109/ICSE.2009.5070536
   Yaghmazadeh N., 2016, PROGRAMMING LANGUAGE
NR 34
TC 32
Z9 34
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 73
DI 10.1145/3290386
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300073
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Jung, J
   Lee, J
   Choi, J
   Kim, J
   Park, S
   Kang, J
AF Jung, Jaehwang
   Lee, Janggun
   Choi, Jaemin
   Kim, Jaewoo
   Park, Sunho
   Kang, Jeehoon
TI Modular Verification of Safe Memory Reclamation in Concurrent Separation
   Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE safe memory reclamation; separation logic; Iris
ID WEAK MEMORY; CONSISTENCY; LINEARIZABILITY
AB Formal verification is an effective method to address the challenge of designing correct and efficient concurrent data structures. But verification efforts often ignore memory reclamation, which involves nontrivial synchronization between concurrent accesses and reclamation. When incorrectly implemented, it may lead to critical safety errors such as use-after-free and the ABA problem. Semi-automatic safe memory reclamation schemes such as hazard pointers and RCU encapsulate the complexity of manual memory management in modular interfaces. However, this modularity has not been carried over to formal verification.
   We propose modular specifications of hazard pointers and RCU, and formally verify realistic implementations of them in concurrent separation logic. Specifically, we design abstract predicates for hazard pointers that capture the meaning of validating the protection of nodes, and those for RCU that support optimistic traversal to possibly retired nodes. We demonstrate that the specifications indeed facilitate modular verification in three criteria: compositional verification, general applicability, and easy integration. In doing so, we present the first formal verification of Harris's list, the Harris-Michael list, the Chase-Lev deque, and RDCSS with reclamation. We report the Coq mechanization of all our results in the Iris separation logic framework.
C1 [Jung, Jaehwang; Lee, Janggun; Choi, Jaemin; Kim, Jaewoo; Park, Sunho; Kang, Jeehoon] Korea Adv Inst Sci & Technol, Daejeon, South Korea.
C3 Korea Advanced Institute of Science & Technology (KAIST)
RP Jung, J (corresponding author), Korea Adv Inst Sci & Technol, Daejeon, South Korea.
EM jaehwang.jung@kaist.ac.kr; lee@kaist.ac.kr; jaemin.choi98@kaist.ac.kr;
   jaewoo.kim@kaist.ac.kr; sunho.park@kaist.ac.kr; jeehoon.kang@kaist.ac.kr
RI Jung, Jaehwang/KPA-2751-2024
OI Jung, Jaehwang/0000-0001-6099-2644; Park, Sunho/0009-0000-5380-1969;
   Kim, Jaewoo/0009-0003-3800-9879; Lee, Janggun/0009-0002-0047-7717; Kang,
   Jeehoon/0000-0002-2115-0871
FU Samsung Research Funding & Incubation Center of Samsung Electronics
   [SRFC-IT2201-06]
FX We thank the OOPSLA'23 reviewers for valuable feedback and suggestions
   for improvements. This work was supported by Samsung Research Funding &
   Incubation Center of Samsung Electronics under Project Number
   SRFC-IT2201-06.
CR Afek Y, 2010, LECT NOTES COMPUT SC, V6490, P395, DOI 10.1007/978-3-642-17653-1_29
   Alglave J, 2018, ACM SIGPLAN NOTICES, V53, P405, DOI [10.1145/3296957.3177156, 10.1145/3173162.3177156]
   Alistarh D, 2017, PROCEEDINGS OF THE TWELFTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS 2017), P483, DOI 10.1145/3064176.3064214
   Alistarh D, 2018, ACM TRANS PARALLEL C, V4, DOI 10.1145/3201897
   Anderson D, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P526, DOI 10.1145/3453483.3454060
   [Anonymous], 1986, Technical Report RJ 5118
   [Anonymous], 2004, Practical lock-freedom
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Brown T, 2015, PODC'15: PROCEEDINGS OF THE 2015 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P261, DOI 10.1145/2767386.2767436
   Chase David, 2005, P 17 ANN ACM S PAR A, P21, DOI DOI 10.1145/1073970.1073974
   Dang HH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371102
   Derrick J, 2014, LECT NOTES COMPUT SC, V8442, P200, DOI 10.1007/978-3-319-06410-9_15
   Desnoyers M, 2012, IEEE T PARALL DISTR, V23, P375, DOI 10.1109/TPDS.2011.159
   Doherty S, 2004, LECT NOTES COMPUT SC, V3235, P97
   Doko M, 2017, LECT NOTES COMPUT SC, V10201, P448, DOI 10.1007/978-3-662-54434-1_17
   Fu M, 2010, LECT NOTES COMPUT SC, V6269, P388, DOI 10.1007/978-3-642-15375-4_27
   Gotsman A, 2013, LECT NOTES COMPUT SC, V7792, P249, DOI 10.1007/978-3-642-37036-6_15
   Gotsman A, 2012, LECT NOTES COMPUT SC, V7454, P256, DOI 10.1007/978-3-642-32940-1_19
   Harris Timothy L., 2001, DISC LNCS, P300, DOI DOI 10.1007/3-540-45414-4_21
   Harris TL, 2002, LECT NOTES COMPUT SC, V2508, P265
   Hart TE, 2007, J PARALLEL DISTR COM, V67, P1270, DOI 10.1016/j.jpdc.2007.04.010
   Hendler Danny, 2004, SPAA 2004, P206, DOI [10.1145/1007912.1007944, DOI 10.1145/1007912.1007944]
   Henzinger TA, 2013, ACM SIGPLAN NOTICES, V48, P317, DOI 10.1145/2480359.2429109
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Dang HH, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P792, DOI 10.1145/3519939.3523451
   Iris Team, 2023, The Iris project website
   Iris Team, 2023, Iris examples
   Jacobs B, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P271, DOI 10.1145/1926385.1926417
   Jagadeesan R, 2014, LECT NOTES COMPUT SC, V8573, P220
   Jung Jaehwang, 2023, Modular Verification of Safe Memory Reclamation in Concurrent Separation Logic (Coq development and appendix), DOI [10.1145/3580418, DOI 10.1145/3580418]
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Jung Ralf, 2019, IR WORKSH
   Kaiser Jan-Oliver, 2017, EUR C OBJ OR PROGR E, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.17, 10.4230/LIPIcs.ECOOP.2017]
   Kang J, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P314, DOI 10.1145/3385412.3385978
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krishna S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158125
   Kuru I, 2019, LECT NOTES COMPUT SC, V11423, P88, DOI 10.1007/978-3-030-17184-1_4
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Madiot JM, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498672
   McKenney P. E, 1998, PDCS 98
   McKenney Paul E., 2023, P2545R4: Read-Copy Update (RCU)
   McKenney Paul E., 2021, P2414R1: Pointer lifetime-end zap proposed solutions
   Meta, 2023, Folly: Facebook Open-source Library
   Mével G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408978
   Meyer R, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563337
   Meyer R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371136
   Meyer R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290371
   Michael M. M., 2002, P 14 ANN ACM S PAR A, P73, DOI DOI 10.1145/564870.564881
   Michael Maged, 2023, P2530R3: Hazard Pointers for C++26
   Michael MM, 2004, IEEE T PARALL DISTR, V15, P491, DOI 10.1109/TPDS.2004.8
   Mulder I, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586043
   Mulder I, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P809, DOI 10.1145/3519939.3523432
   Nikolaev R, 2020, PROCEEDINGS OF THE 25TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '20), P130, DOI 10.1145/3332466.3374540
   Nikolaev Ruslan, 2021, LEIBNIZ INT P INFORM, V60, P1, DOI DOI 10.4230/LIPICS.DISC.2021.60
   Parkinson Matthew, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P297, DOI 10.1145/1190216.1190261
   Parkinson M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3141879
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Scott Michael L., 1996, PODC 1996
   Sheffi Gali, 2021, P 33 ACM S PAR ALG A, P443
   Singh Ajay, 2021, PPoPP '21: Proceedings of the 26th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, P175, DOI 10.1145/3437801.3441625
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Tassarotti J, 2015, ACM SIGPLAN NOTICES, V50, P110, DOI [10.1145/2737924.2737992, 10.1145/2813885.2737992]
   Tofan Bogdan, 2011, Theoretical Aspects of Computing - ICTAC 2011. Proceedings 8th International Colloquium, P239, DOI 10.1007/978-3-642-23283-1_16
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Vafeiadis V, 2017, LECT NOTES COMPUT SC, V10426, P30, DOI 10.1007/978-3-319-63387-9_2
   Vafeiadis V, 2011, ELECTRON NOTES THEOR, V276, P335, DOI 10.1016/j.entcs.2011.09.029
   Vafeiadis V, 2010, LECT NOTES COMPUT SC, V6174, P450, DOI 10.1007/978-3-642-14295-6_40
   Vafeiadis V, 2010, LECT NOTES COMPUT SC, V5944, P345, DOI 10.1007/978-3-642-11319-2_25
   Veith Helmut, 2016, International Proceedings in Informatics (LIPIcs),, V59, DOI [10.4230/LIPIcs.CONCUR.2016.6, DOI 10.4230/LIPICS.CONCUR.2016.6]
   Wen H, 2018, ACM SIGPLAN NOTICES, V53, P1, DOI 10.1145/3200691.3178488
   Wolff Sebastian, 2021, Ph. D. Dissertation., DOI [10.24355/dbbs.084-202108191157-0, DOI 10.24355/DBBS.084-202108191157-0]
NR 77
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 251
DI 10.1145/3622827
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100031
OA gold
DA 2024-07-18
ER

PT J
AU Pal, A
   Saiki, B
   Tjoa, R
   Richey, C
   Zhu, A
   Flatt, O
   Willsey, M
   Tatlock, Z
   Nandi, C
AF Pal, Anjali
   Saiki, Brett
   Tjoa, Ryan
   Richey, Cynthia
   Zhu, Amy
   Flatt, Oliver
   Willsey, Max
   Tatlock, Zachary
   Nandi, Chandrakana
TI Equality Saturation Theory Exploration a la Carte
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Rewrite rules; equality saturation; program synthesis
AB Rewrite rules are critical in equality saturation, an increasingly popular technique in optimizing compilers, synthesizers, and verifiers. Unfortunately, developing high-quality rulesets is difficult and error-prone. Recent work on automatically inferring rewrite rules does not scale to large terms or grammars, and existing rule inference tools are monolithic and opaque. Equality saturation users therefore struggle to guide inference and incrementally construct rulesets. As a result, most users still manually develop and maintain rulesets.
   This paper proposes ENUMO, a new domain-specific language for programmable theory exploration. ENUMO provides a small set of core operators that enable users to strategically guide rule inference and incrementally build rulesets. Short ENUMO programs easily replicate results from state-of-the-art tools, but ENUMO programs can also scale to infer deeper rules from larger grammars than prior approaches. Its composable operators even facilitate developing new strategies for ruleset inference. We introduce a new fast-forwarding strategy that does not require evaluating terms in the target language, and can thus support domains that were out of scope for prior work.
   We evaluate ENUMO and fast-forwarding across a variety of domains. Compared to state-of-the-art techniques, ENUMO can synthesize better rulesets over a diverse set of domains, in some cases matching the effects of manually-developed rulesets in systems driven by equality saturation.
C1 [Pal, Anjali; Saiki, Brett; Tjoa, Ryan; Richey, Cynthia; Zhu, Amy; Flatt, Oliver; Willsey, Max; Tatlock, Zachary] Univ Washington, Seattle, WA 98195 USA.
   [Nandi, Chandrakana] Certora, Seattle, WA USA.
C3 University of Washington; University of Washington Seattle
RP Pal, A (corresponding author), Univ Washington, Seattle, WA 98195 USA.
EM anjalip@cs.washington.edu; bsaiki@cs.washington.edu;
   rtjoa@cs.washington.edu; gannet@cs.washington.edu;
   amyzhu@cs.washington.edu; oflatt@cs.washington.edu;
   mwillsey@cs.washington.edu; ztatlock@cs.washington.edu;
   chandra@certora.com
OI Saiki, Brett/0009-0002-3482-5767; Tatlock, Zachary/0000-0002-4731-0124;
   Willsey, Max/0000-0001-8066-4218
FU Amazon Research Award; National Science Foundation [1749571, 2232339];
   DARPA V-SPELLS program
FX This material is based upon work supported by an Amazon Research
   Award,the National Science Foundation under Grant Nos. 1749571 and
   2232339 as well as the DARPA V-SPELLS program. Any opinions, findings,
   and conclusions or recommendations expressed in this material are those
   of the author(s) and do not necessarily reflect the views of the
   National Science Foundation, Department of Defense, or the U.S.
   Government.
CR Abiteboul S., 1995, Foundations of Databases, DOI DOI 10.5555/551350
   Bansal S, 2006, ACM SIGPLAN NOTICES, V41, P394, DOI 10.1145/1168918.1168906
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Boehm HJ, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P562, DOI 10.1145/3385412.3386037
   Briggs Ian, 2022, P 1 ACM SIGPLAN INT, P1, DOI [10.1145/3520308.3534506, DOI 10.1145/3520308.3534506]
   Buchwald S, 2018, INT SYM CODE GENER, P300, DOI 10.1145/3168821
   Buchwald S, 2015, LECT NOTES COMPUT SC, V9031, P171, DOI 10.1007/978-3-662-46663-6_9
   Butler Eric, 2019, Ph. D. Dissertation
   Cao D, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571207
   Christiansen J, 2016, ACM SIGPLAN NOTICES, V51, P168, DOI 10.1145/3022670.2951949
   Claessen Koen, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P392, DOI 10.1007/978-3-642-38574-2_27
   Claessen K, 2010, LECT NOTES COMPUT SC, V6143, P6, DOI 10.1007/978-3-642-13977-2_3
   Coq, 2022, Library Coq.PArith.BinPos
   Coward S, 2023, Arxiv, DOI arXiv:2303.01839
   Coward Samuel, 2022, arXiv
   Davidson JW, 2004, ACM SIGPLAN NOTICES, V39, P104, DOI 10.1145/989393.989407
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Moura L, 2007, LECT NOTES ARTIF INT, V4603, P183
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Duregård J, 2012, ACM SIGPLAN NOTICES, V47, P61, DOI 10.1145/2430532.2364515
   Flajolet P, 1995, J SYMB COMPUT, V20, P653, DOI 10.1006/jsco.1995.1070
   Fu C, 2022, PROCEEDINGS OF THE 2022 31ST INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PACT 2022, P291, DOI 10.1145/3559009.3569673
   Grannan Zachary, 2022, 36 EUR C OBJ OR PROG, V222, DOI [10.4230/LIPIcs.ECOOP.2022.13, DOI 10.4230/LIPICS.ECOOP.2022.13]
   Jia ZH, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P47, DOI 10.1145/3341301.3359630
   Johansson M, 2014, LECT NOTES ARTIF INT, V8543, P108, DOI 10.1007/978-3-319-08434-3_9
   Johansson M, 2011, J AUTOM REASONING, V47, P251, DOI 10.1007/s10817-010-9193-y
   Joshi R, 2002, ACM SIGPLAN NOTICES, V37, P304, DOI 10.1145/543552.512566
   Koehler T, 2022, Arxiv, DOI arXiv:2111.13040
   Kozen Dexter, 1977, P 9 ANN ACM S THEOR, P164, DOI DOI 10.1145/800105.803406
   Krogmeier P, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563348
   Menendez D, 2017, ACM SIGPLAN NOTICES, V52, P49, DOI [10.1145/3140587.3062372, 10.1145/3062341.3062372]
   Nandi C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485496
   Nandi C, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236794
   Nandi C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P31, DOI 10.1145/3385412.3386012
   Nelson Greg, 1980, PhD thesis
   Newcomb JL, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428234
   Nötzli A, 2019, LECT NOTES COMPUT SC, V11628, P279, DOI 10.1007/978-3-030-24258-9_20
   Panchekha P, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI 10.1145/2737924.2737959
   PASKO A, 1995, VISUAL COMPUT, V11, P429, DOI 10.1007/BF02464333
   PAULSON LC, 1986, J LOGIC PROGRAM, V3, P237, DOI 10.1016/0743-1066(86)90015-4
   Premtoon V, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1066, DOI 10.1145/3385412.3386001
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Schmerge J, 2021, Arxiv, DOI [arXiv:2104.12039, 10.48550/ARXIV.2104.12039, DOI 10.48550/ARXIV.2104.12039]
   Singh R, 2016, PROCEEDINGS OF THE 2016 16TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2016), P185, DOI 10.1109/FMCAD.2016.7886678
   Singh Zak., 2022, Deep Reinforcement Learning for Equality Saturation
   Singher E, 2021, LECT NOTES COMPUT SC, V12760, P125, DOI 10.1007/978-3-030-81688-9_6
   Ta QT, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158097
   Tate R, 2009, ACM SIGPLAN NOTICES, V44, P264, DOI 10.1145/1594834.1480915
   VanHattum A, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P874, DOI 10.1145/3445814.3446707
   Wang YR, 2020, PROC VLDB ENDOW, V13, P1919, DOI 10.14778/3407790.3407799
   Wang ZG, 2022, INT CONF MANAGE DATA, P94, DOI 10.1145/3514221.3526125
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Xu A, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591254
   Yakushev AR, 2010, LECT NOTES COMPUT SC, V5812, P93
   Yang Yichen, 2021, arXiv, DOI [DOI 10.48550/ARXIV.2101.01332, 10.48550/ARXIV.2101.01332]
NR 55
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 258
DI 10.1145/3622834
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100038
OA gold
DA 2024-07-18
ER

PT J
AU Baudon, T
   Radanne, G
   Gonnord, L
AF Baudon, Thais
   Radanne, Gabriel
   Gonnord, Laure
TI Bit-Stealing Made Legal
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Algebraic Data Types; Pattern Matching; Compilation; Data Layouts
AB Initially present only in functional languages such as OCaml and Haskell, Algebraic Data Types (ADTs) have now become pervasive in mainstream languages, providing nice data abstractions and an elegant way to express functions through pattern matching. Unfortunately, ADTs remain seldom used in low-level programming. One reason is that their increased convenience comes at the cost of abstracting away the exact memory layout of values. Even Rust, which tries to optimize data layout, severely limits control over memory representation.
   In this article, we present a new approach to specify the data layout of rich data types based on a dual view: a source type, providing a high-level description available in the rest of the code, along with a memory type, providing full control over the memory layout. This dual view allows for better reasoning about memory layout, both for correctness, with dedicated validity criteria linking the two views, and for optimizations that manipulate the memory view. We then provide algorithms to compile constructors and destructors, including pattern matching, to their low-level memory representation. We prove our compilation algorithms correct, implement them in a tool called RIBBIT that compiles to LLVM IR, and show some early experimental results.
C1 [Baudon, Thais] Univ Lyon, Lyon, France.
   [Baudon, Thais; Radanne, Gabriel] EnsL, Lyon, France.
   [Baudon, Thais; Radanne, Gabriel] UCBL, Lyon, France.
   [Baudon, Thais; Radanne, Gabriel] CNRS, Paris, France.
   [Baudon, Thais; Radanne, Gabriel] INRIA, Paris, France.
   [Baudon, Thais; Radanne, Gabriel; Gonnord, Laure] LIP, Lyon, France.
   [Gonnord, Laure] UGA, Grenoble, France.
   [Gonnord, Laure] Grenoble INP, Grenoble, France.
   [Gonnord, Laure] LCIS, Valence, France.
C3 Ecole Normale Superieure de Lyon (ENS de LYON); Universite Claude
   Bernard Lyon 1; Centre National de la Recherche Scientifique (CNRS);
   Inria; Communaute Universite Grenoble Alpes; Universite Grenoble Alpes
   (UGA); Communaute Universite Grenoble Alpes; Institut National
   Polytechnique de Grenoble
RP Baudon, T (corresponding author), Univ Lyon, Lyon, France.; Baudon, T (corresponding author), EnsL, Lyon, France.; Baudon, T (corresponding author), UCBL, Lyon, France.; Baudon, T (corresponding author), CNRS, Paris, France.; Baudon, T (corresponding author), INRIA, Paris, France.; Baudon, T (corresponding author), LIP, Lyon, France.
EM thais.baudon@ens-lyon.fr; gabriel.radanne@inria.fr;
   laure.gonnord@grenoble-inp.fr
OI Gonnord, Laure/0000-0002-8013-1611; Radanne,
   Gabriel/0000-0002-2107-7678; Baudon, Thais/0000-0002-9368-651X
CR [Anonymous], 2023, The Rust Reference
   [Anonymous], 2023, ECMAScript Language Types
   [Anonymous], 2023, LLVM Language Reference Manual
   [Anonymous], 2023, The Rustonomicon
   [Anonymous], 2021, RFC: Alignment niches for references types
   [Anonymous], 1989, P 4 INT C FUNCTIONAL, DOI DOI 10.1145/99370.99377
   [Anonymous], 2023, AoS and SoA
   [Anonymous], 2023, WebKit NaN-boxing
   AUGUSTSSON L, 1985, LECT NOTES COMPUT SC, V201, P368
   Burstall Rod M, 1977, Design considerations for a functional programming language
   Burstall RodM., 1980, Proceedings of the 1980 ACM conference on LISP and Functional Programming, LFP '80, P136, DOI 10.1145/800087.802799
   Chen ZL, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571240
   Cockx J, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000174
   Colin S, 2018, Arxiv, DOI arXiv:1811.02300
   Filliatre Jean-Christophe, 2006, ML, P12, DOI DOI 10.1145/1159876.1159880
   Garrigue J, 2017, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.241.2
   Garrigue Jacques, 1998, ML WORKSHOP
   Hall Cordelia V., 1994, Workshops in Computing, P96, DOI [10.1007/978-1-4471-3573-9_7, DOI 10.1007/978-1-4471-3573-9_7]
   Iannetta Paul, 2021, GPCE 2021: Proceedings of the 20th ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences, P123, DOI 10.1145/3486609.3487204
   JONES SLP, 1991, LECT NOTES COMPUT SC, V523, P636
   Karachalias G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P424, DOI 10.1145/2784731.2784748
   Keller G, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P261
   Koparkar C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473596
   Kosarev D, 2020, LECT NOTES COMPUT SC, V12470, P293, DOI 10.1007/978-3-030-64437-6_15
   Le Fessant F, 2001, ACM SIGPLAN NOTICES, V36, P26, DOI 10.1145/507669.507641
   Leroy X., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P177, DOI 10.1145/143165.143205
   Leroy X., 1990, Programming Language Implementation and Logic Programming. International Workshop PLILP '90 Proceedings, P255, DOI 10.1007/BFb0024189
   Leroy Xavier, 2010, Zarith
   Maranget L., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P21, DOI 10.1145/141471.141499
   Maranget L, 2007, J FUNCT PROGRAM, V17, P387, DOI 10.1017/S0956796807006223
   Maranget L, 2008, ML'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN WORKSHOP ON ML, P35
   Minsky Yaron, 2021, Real World OCaml. Chapter Memory Representation of Values
   Pickering M, 2016, ACM SIGPLAN NOTICES, V51, P80, DOI 10.1145/3241625.2976013
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Scott Kevin, 2000, When do match-compilation heuristics matter
   Sestoft P., 1996, Partial Evaluation. International Seminar. Selected Papers, P446
   Solodkyy Y, 2014, ACM SIGPLAN NOTICES, V49, P33, DOI [10.1145/2517208.2517222, 10.1145/2637365.2517222]
   Syme D, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P29
   Torvalds Linus, 2023, The Linux Kernel
   Tuerk T, 2015, LECT NOTES COMPUT SC, V9236, P453, DOI 10.1007/978-3-319-22102-1_30
   Wadler P., 1987, IMPLEMENTATION FUNCT
NR 41
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 216
DI 10.1145/3607858
PG 34
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900029
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Scott, RG
   Dodds, M
   Perez, I
   Goodloe, AE
   Dockins, R
AF Scott, Ryan G.
   Dodds, Mike
   Perez, Ivan
   Goodloe, Alwyn E.
   Dockins, Robert
TI Trustworthy Runtime Verification via Bisimulation (Experience Report)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Runtime verification; formal methods; assurance
ID ASSURANCE
AB When runtime verification is used to monitor safety-critical systems, it is essential that monitoring code behaves correctly. The Copilot runtime verification framework pursues this goal by automatically generating C monitor programs from a high-level DSL embedded in Haskell. In safety-critical domains, every piece of deployed code must be accompanied by an assurance argument that is convincing to human auditors. However, it is difficult for auditors to determine with confidence that a compiled monitor cannot crash and implements the behavior required by the Copilot semantics.
   In this paper we describe CopilotVerifier, which runs alongside the Copilot compiler, generating a proof of correctness for the compiled output. The proof establishes that a given Copilot monitor and its compiled form produce equivalent outputs on equivalent inputs, and that they either crash in identical circumstances or cannot crash. The proof takes the form of a bisimulation broken down into a set of verification conditions. We leverage two pieces of SMT-backed technology: the Crucible symbolic execution library for LLVM and the What4 solver interface library. Our results demonstrate that dramatically increased compiler assurance can be achieved at moderate cost by building on existing tools. This paves the way to our ultimate goal of generating formal assurance arguments that are convincing to human auditors.
C1 [Scott, Ryan G.; Dodds, Mike] Galois Inc, Portland, OR 97204 USA.
   [Perez, Ivan] NASA, Ames Res Ctr, KBR, Washington, DC USA.
   [Goodloe, Alwyn E.] NASA, Langley Res Ctr, Washington, DC USA.
   [Dockins, Robert] Amazon, Seattle, WA USA.
C3 Galois, Inc.; National Aeronautics & Space Administration (NASA); NASA
   Ames Research Center; National Aeronautics & Space Administration
   (NASA); NASA Langley Research Center; Amazon.com
RP Scott, RG (corresponding author), Galois Inc, Portland, OR 97204 USA.
EM rscott@galois.com; miked@galois.com; ivan.perezdominguez@nasa.gov;
   a.goodloe@nasa.gov; rdoc@amazon.com
OI Goodloe, Alwyn/0009-0004-8216-4996; Scott, Ryan/0009-0006-5642-5667
FU NASA Ames Research Center [80ARC020D0010]
FX This manuscript has been authored by Ivan Perez, an employee of KBR
   under Prime Contract No. 80ARC020D0010 with the NASA Ames Research
   Center. Any opinions, findings, and conclusions or recommendations
   expressed in this material are those of the authors and do not
   necessarily reflect the views, either expressed or implied, of any of
   the funding organizations. The United States Government retains, and by
   accepting the article for publication, the publisher acknowledges that
   the United States Government retains, a non-exclusive, paid-up,
   irrevocable, worldwide license to publish or reproduce the published
   form of this work, or allow others to do so, for United States
   Government purposes.
CR AFE87 Project Members, 2020, Technical Report
   [Anonymous], 2010, ARP4754A
   Boldo S, 2011, P S COMP ARITHM, P243, DOI 10.1109/ARITH.2011.40
   Boston B, 2021, LECT NOTES COMPUT SC, V12759, P645, DOI 10.1007/978-3-030-81685-8_31
   Bourke T, 2021, ACM T EMBED COMPUT S, V20, DOI 10.1145/3477041
   Bourke T, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371112
   Bourke T, 2017, ACM SIGPLAN NOTICES, V52, P586, DOI [10.1145/3140587.3062358, 10.1145/3062341.3062358]
   Caspi P., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P178, DOI 10.1145/41625.41641
   Christiansen DT, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341704
   Chudnov A, 2018, LECT NOTES COMPUT SC, V10982, P430, DOI 10.1007/978-3-319-96142-2_26
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Cofer D, 2020, LECT NOTES COMPUT SC, V12229, P361, DOI 10.1007/978-3-030-55754-6_21
   Cofer D, 2014, LECT NOTES COMPUT SC, V8430, P1, DOI 10.1007/978-3-319-06200-6_1
   Cofer Darren, 2021, IEEEAIAA 40 DIGITAL, P1, DOI 10.1109/DASC52595.2021.9594406
   Cuoq Pascal, 2012, Software Engineering and Formal Methods. Proceedings of the 10th International Conference, SEFM 2012, P233, DOI 10.1007/978-3-642-33826-7_16
   D'Angelo B, 2005, 12TH INTERNATIONAL SYMPOSIUM ON TEMPORAL REPRESENTATION AND REASONING, PROCEEDINGS, P166, DOI 10.1109/TIME.2005.26
   Dockins R, 2016, LECT NOTES COMPUT SC, V9971, P56, DOI 10.1007/978-3-319-48869-1_5
   Falcone Y., 2013, Eng. Dependable Softw. Syst., P141, DOI [10.3233/978-1- 61499-207-3-141, DOI 10.3233/978-1-61499-207-3-141]
   Fink G., 1997, Software Engineering Notes, V22, P74, DOI 10.1145/263244.263267
   github, Issue on Copilot GitHub. 2022b. copilot-c99: array has incomplete element type error when declaring stream with array of structs
   Goodloe A, 2016, LECT NOTES COMPUT SC, V9952, P446, DOI 10.1007/978-3-319-47166-2_31
   Goodloe Alwyn, 2010, Technical Report NASA/CR-2010-216724
   Havelund K, 2008, LECT NOTES COMPUT SC, V5047, P7, DOI 10.1007/978-3-540-68524-1_3
   Hendrix Joe, 2020, What4: NewLibrary to Help Developers Build Verification and Program Analysis Tools
   Issue on Copilot GitHub, 2022, copilot-c99: Streams of arrays result in C code with undefined behavior
   Issue on Copilot GitHub, 2021, Generated C code accesses stream buffer out of bounds
   Issue on Copilot GitHub, 2021, C translation doesn't correctly select operations based on types
   Issue on Copilot GitHub, 2021, copilot-c99: C99 and interpretation of signum behave inconsistently for 0 and NaN
   Issue on Copilot GitHub, 2021, Basic example involving structs generates invalid C code
   Issue on Copilot GitHub, 2021, Delaying streams of arrays or structs produces C code that fails to compile with Clang
   Issue on Copilot GitHub, 2022, copilot-c99: appending values to a stream of arrays produces incorrect C99 code
   Kelly T., 2004, P DEP SYST NETW 2004
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Laurent J, 2015, LECT NOTES COMPUT SC, V9333, P87, DOI 10.1007/978-3-319-23820-3_6
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Lopes NP, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P65, DOI 10.1145/3453483.3454030
   McClelland B, 2021, 8TH IEEE INTERNATIONAL CONFERENCE ON SPACE MISSION CHALLENGES FOR INFORMATION TECHNOLOGY (SMC-IT 2021), P23, DOI 10.1109/SMC-IT51442.2021.00010
   National Research Council, 2014, AUT RES CIV AV NEW E
   Perez I., 2020, Copilot 3
   Perez I, 2022, LECT NOTES COMPUT SC, V13243, P387, DOI 10.1007/978-3-030-99524-9_21
   Pike L, 2013, INNOV SYST SOFTW ENG, V9, P235, DOI 10.1007/s11334-013-0223-x
   Pike L, 2012, ACM SIGPLAN NOTICES, V47, P335, DOI 10.1145/2398856.2364553
   Pike L, 2010, LECT NOTES COMPUT SC, V6418, P345, DOI 10.1007/978-3-642-16612-9_26
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Ramananandro T, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P15, DOI 10.1145/2854065.2854066
   RTCA, 2011, RCTA/DO-178C
   RTCA, 2011, RCTA/DO333
   Ryabtsev M, 2009, LECT NOTES COMPUT SC, V5643, P696, DOI 10.1007/978-3-642-02658-4_57
   Scott Ryan, 2021, Crux: Symbolic Execution Meets SMT-based Verification (Competition Contribution), DOI [10.5281/zenodo.6147218, DOI 10.5281/ZENODO.6147218]
   Scott Ryan G., 2023, Trustworthy Runtime Verification via Bisimulation (Experience Report), DOI [10.5281/zenodo.7978326, DOI 10.5281/ZENODO.7978326]
   Tomb Aaron., 2020, Crux: Introducing our new open-source tool for software verification
   Upchurch J., 2014, ANAL WELL CLEAR BOUN
   Wagner L, 2017, LECT NOTES COMPUT SC, V10227, P404, DOI 10.1007/978-3-319-57288-8_29
NR 54
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 199
DI 10.1145/3607841
PG 17
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900012
OA gold
DA 2024-07-18
ER

PT J
AU Li, ZY
   Huang, JN
   Naik, M
AF Li, Ziyang
   Huang, Jiani
   Naik, Mayur
TI Scallop: A Language for Neurosymbolic Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Neurosymbolic methods; Differentiable reasoning
AB We present Scallop, a language which combines the benefits of deep learning and logical reasoning. Scallop enables users to write a wide range of neurosymbolic applications and train them in a data- and compute-efficient manner. It achieves these goals through three key features: 1) a flexible symbolic representation that is based on the relational data model; 2) a declarative logic programming language that is based on Datalog and supports recursion, aggregation, and negation; and 3) a framework for automatic and efficient differentiable reasoning that is based on the theory of provenance semirings. We evaluate Scallop on a suite of eight neurosymbolic applications from the literature. Our evaluation demonstrates that Scallop is capable of expressing algorithmic reasoning in diverse and challenging AI tasks, provides a succinct interface for machine learning programmers to integrate logical domain knowledge, and yields solutions that are comparable or superior to state-of-the-art models in terms of accuracy. Furthermore, Scallop's solutions outperform these models in aspects such as runtime and data efficiency, interpretability, and generalizability.
C1 [Li, Ziyang; Huang, Jiani; Naik, Mayur] Univ Penn, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Li, ZY (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM liby99@seas.upenn.edu; jianih@seas.upenn.edu; mnaik@seas.upenn.edu
OI Li, Ziyang/0000-0003-3925-9549; NAIK, MAYUR/0000-0003-1348-8618
FU DARPA [FA8750-19-2-0201]; NSF [2107429, 1836936]; ONR [N00014-18-1-2021]
FX We thank Neelay Velingker, Hanjun Dai, Hanlin Zhang, and Sernam Lin for
   helpful comments on the presentation and experiments. We thank the
   anonymous reviewers and artifact reviewers for useful feedback. This
   research was supported by grants from DARPA (#FA8750-19-2-0201), NSF
   (#2107429 and #1836936), and ONR (#N00014-18-1-2021).
CR Abadi M., 2016, arXiv, DOI DOI 10.48550/ARXIV.1603.04467
   Abiteboul S, 1995, FDN DATABASES
   Amsterdamer Y, 2011, Arxiv, DOI arXiv:1105.2255
   Andreas J, 2016, PROC CVPR IEEE, P39, DOI 10.1109/CVPR.2016.12
   Aref M, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1371, DOI 10.1145/2723372.2742796
   Brown TB, 2020, Arxiv, DOI [arXiv:2005.14165, DOI 10.48550/ARXIV.2005.14165]
   Baydin A. G., 2015, arXiv, DOI [DOI 10.48550/ARXIV.1502.05767, 10.48550/arXiv.1502.05767]
   Bingham E, 2019, J MACH LEARN RES, V20
   Bradbury J., 2018, JAX: Composable transformations of Python + NumPy programs
   Chaudhuri S, 2021, FOUND TRENDS PROGRAM, V7, P158, DOI 10.1561/2500000049
   Chen Mark, 2021, arXiv, DOI DOI 10.48550/ARXIV.2107.03374
   Chen QC, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P328, DOI 10.1145/3453483.3454047
   Chen Xuelin, 2020, INT C LEARNING REPRE
   Cheng ZJ, 2023, Arxiv, DOI arXiv:2210.02875
   Cobbe K, 2019, PR MACH LEARN RES, V97
   Cropper Andrew, 2022, INDUCTIVE LOGIC PROG, V74, DOI [10.1613/jair.1.13507, DOI 10.1613/JAIR.1.13507]
   Dannert Katrin M., 2021, 29 EACSL ANN C COMP, V17, P1, DOI [10.4230/LIPIcs. CSL.2021.17, DOI 10.4230/LIPICS.CSL.2021.17]
   Darwiche, 2011, IJCAI, VTwo, P819, DOI DOI 10.5591/978-1-57735-516-8/IJCAI11-143
   Dosovitskiy A., 2017, arXiv
   Dries A, 2015, LECT NOTES ARTIF INT, V9286, P312, DOI 10.1007/978-3-319-23461-8_37
   Gao DF, 2021, Arxiv, DOI arXiv:1908.02962
   Ge H, 2018, PR MACH LEARN RES, V84
   Girshick R, 2015, Arxiv, DOI [arXiv:1504.08083, DOI 10.48550/ARXIV.1504.08083]
   Graves A, 2013, INT CONF ACOUST SPEE, P6645, DOI 10.1109/ICASSP.2013.6638947
   Green Todd J., 2007, PODS, DOI DOI 10.1145/1265530.1265535
   Gu AL, 2022, Arxiv, DOI arXiv:2111.00396
   Gu AL, 2022, Arxiv, DOI arXiv:2206.12037
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Hayes Thomas, 2022, arXiv
   Huang Jiani, 2021, C NEURAL INFORM PROC
   Hudson DA, 2019, PROC CVPR IEEE, P6693, DOI 10.1109/CVPR.2019.00686
   Jachiet L, 2020, SIGMOD'20: PROCEEDINGS OF THE 2020 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P681, DOI 10.1145/3318464.3380567
   Johnson J, 2017, PROC CVPR IEEE, P1988, DOI 10.1109/CVPR.2017.215
   Johnson J, 2015, PROC CVPR IEEE, P3668, DOI 10.1109/CVPR.2015.7298990
   Khamis MA, 2024, Arxiv, DOI arXiv:2105.14435
   Lecun Y, 1998, P IEEE, V86, P2278, DOI 10.1109/5.726791
   Lewkowycz Aitor, 2022, SOLVING QUANTITATIVE
   Li Qing, 2020, INT C MACHINE LEARNI, DOI [10.48550/arXiv.2006.06649, DOI 10.48550/ARXIV.2006.06649]
   Li Y., 2022, arXiv
   Li Ziyang, 2023, Zenodo, DOI 10.5281/ZENODO.7804200
   Liu YH, 2019, Arxiv, DOI arXiv:1907.11692
   Manhaeve R, 2021, ARTIF INTELL-AMST, V298, DOI 10.1016/j.artint.2021.103504
   Mao JY, 2019, Arxiv, DOI arXiv:1904.12584
   Minervini Pasquale, 2020, INT C MACHINE LEARNI
   Mnih V, 2015, NATURE, V518, P529, DOI 10.1038/nature14236
   Paszke A, 2019, ADV NEUR IN, V32
   Rajpurkar P., 2016, P 2016 C EMP METH NA, V2016, P2383
   Sanh V, 2020, Arxiv, DOI arXiv:1910.01108
   Scholz B, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P196, DOI 10.1145/2892208.2892226
   Shah Ameesh, 2020, C NEURAL INFORM PROC
   Si XJ, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P6117
   Sinha K., 2019, arXiv
   Tan H, 2019, Arxiv, DOI [arXiv:1908.07490, 10.48550/arXiv.1908.07490]
   Tay Y, 2020, Arxiv, DOI arXiv:2011.04006
   van de Meent Jan-Willem, 2018, arXiv, DOI DOI 10.48550/ARXIV.1809.10756
   Veličkovic P, 2018, Arxiv, DOI arXiv:1710.10903
   Cohen WW, 2017, Arxiv, DOI arXiv:1707.05390
   Wang PW, 2019, Arxiv, DOI arXiv:1905.12149
   Xie SN, 2018, LECT NOTES COMPUT SC, V11219, P318, DOI 10.1007/978-3-030-01267-0_19
   Xu JY, 2018, PR MACH LEARN RES, V80
   Xu Ziwei, 2022, Conference on Neural Information Processing Systems (NeurIPS)
   Yi Kexin, 2018, C NEURAL INFORM PROC
   Zelikman E, 2023, Arxiv, DOI arXiv:2212.10561
NR 63
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 166
DI 10.1145/3591280
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900062
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Yallop, J
   Xie, NN
   Krishnaswami, N
AF Yallop, Jeremy
   Xie, Ningning
   Krishnaswami, Neel
TI flap: A Deterministic Parser with Fused Lexing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE parsing; lexing; multi-stage programming; optimization; fusion
ID DERIVATIVES
AB Lexers and parsers are typically defined separately and connected by a token stream. This separate definition is important for modularity and reduces the potential for parsing ambiguity. However, materializing tokens as data structures and case-switching on tokens comes with a cost. We show how to fuse separately-defined lexers and parsers, drastically improving performance without compromising modularity or increasing ambiguity. We propose a deterministic variant of Greibach Normal Form that ensures deterministic parsing with a single token of lookahead and makes fusion strikingly simple, and prove that normalizing context free expressions into the deterministic normal form is semantics-preserving. Our staged parser combinator library, flap, provides a standard interface, but generates specialized token-free code that runs two to six times faster than ocamlyacc on a range of benchmarks.
C1 [Yallop, Jeremy; Krishnaswami, Neel] Univ Cambridge, Cambridge, England.
   [Xie, Ningning] Univ Toronto, Toronto, ON, Canada.
C3 University of Cambridge; University of Toronto
RP Yallop, J (corresponding author), Univ Cambridge, Cambridge, England.
EM jeremy.yallop@cl.cam.ac.uk; ningningxie@cs.toronto.edu;
   Neel.Krishnaswami@cl.cam.ac.uk
FU European Research Council (ERC) under the European Union's Horizon 2020
   Framework Programme [101002277]; Isaac Newton Trust [G101121]; European
   Research Council (ERC) [101002277] Funding Source: European Research
   Council (ERC)
FX This work was supported in part by a European Research Council (ERC)
   Consolidator Grant for the project "TypeFoundry", funded under the
   European Union's Horizon 2020 Framework Programme (grant agreement no.
   101002277), and in part by a grant from the Isaac Newton Trust (grant
   no. G101121).
CR Blum N, 1999, INFORM COMPUT, V150, P112, DOI 10.1006/inco.1998.2772
   BRUGGEMANNKLEIN A, 1992, LECT NOTES COMPUT SC, V577, P173
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Casinghino Chris, 2020, PARTS FINAL REPORT H
   Coutts D, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P315
   Danvy O, 1996, ACM T PROGR LANG SYS, V18, P730, DOI 10.1145/236114.236119
   Economopoulos G, 2009, LECT NOTES COMPUT SC, V5501, P126, DOI 10.1007/978-3-642-00722-4_10
   Filipovic J, 2015, J SUPERCOMPUT, V71, P3934, DOI 10.1007/s11227-015-1483-z
   Ford B., 2002, SIGPLAN Notices, V37, P36, DOI 10.1145/583852.581483
   GELLER MM, 1976, DISCRETE MATH, V16, P313, DOI 10.1016/S0012-365X(76)80004-0
   GREIBACH SA, 1965, J ACM, V12, P42, DOI 10.1145/321250.321254
   Hardin Christopher S., 2013, OCAML WORKSHOP
   Jonnalagedda M, 2014, ACM SIGPLAN NOTICES, V49, P637, DOI [10.1145/2660193.2660241, 10.1145/2714064.2660241]
   Kiselyov O, 2017, ACM SIGPLAN NOTICES, V52, P285, DOI 10.1145/3093333.3009880
   Klyuchnikov Ilya, 2010, PREPRINT
   Krishnaswami N, 2023, Arxiv, DOI arXiv:2304.05276
   Krishnaswami NR, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P379, DOI 10.1145/3314221.3314625
   McKinley Kathryn S, 2019, P 40 ACM SIGPLAN C P, DOI [10.1145/3314221, DOI 10.1145/3314221]
   Nielsen J., 1993, USABILITY ENG
   Nijholt A., 1979, Elektronische Informationsverarbeitung und Kybernetik (EIK), V15, P395
   Cardona PAN, 2015, CUAD ACT, P154
   Owens S, 2009, J FUNCT PROGRAM, V19, P173, DOI 10.1017/S0956796808007090
   Parr T, 2014, ACM SIGPLAN NOTICES, V49, P579, DOI [10.1145/2714064.2660202, 10.1145/2660193.2660202]
   Pottier Francois, MENHIR PARSER GENERA
   Reynaud A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434326
   Sakka L, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P830, DOI 10.1145/3314221.3314626
   Shafranovich Y., 2005, Common Format and MIME Type for Comma-Separated Values (CSV) Files
   Shaikhha A, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000102
   Taha Walid., 1999, Multi-stage programming: Its theory and applications
   van den Brand MGJ, 2002, LECT NOTES COMPUT SC, V2304, P143
   Van Wyk EricR., 2007, GPCE 07, P63
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Wadler Philip, 1985, P C FUNCT PROGR LANG, P113
   Yallop J, 2019, PROCEEDINGS OF THE 2019 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM '19), P75, DOI 10.1145/3294032.3294078
   Yallop Jeremy, 2023, FLAP DETERMINISTIC P, DOI [10.5281/zenodo.7824835, DOI 10.5281/ZENODO.7824835]
NR 35
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 155
DI 10.1145/3591269
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900051
OA gold, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Zakhour, G
   Weisenburger, P
   Salvaneschi, G
AF Zakhour, George
   Weisenburger, Pascal
   Salvaneschi, Guido
TI Type-Checking CRDT Convergence
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Conflict-Free Replicated Data Types; Type Systems; Verification
ID SPECIFICATIONS; LANGUAGE; PROOFS
AB Conflict-Free Replicated Data Types (CRDTs) are a recent approach for keeping replicated data consistent while guaranteeing the absence of conflicts among replicas. For correct operation, CRDTs rely on a merge function that is commutative, associative and idempotent. Ensuring that such algebraic properties are satisfied by implementations, however, is left to the programmer, resulting in a process that is complex and error-prone. While techniques based on testing, automatic verification of a model, and mechanized or handwritten proofs are available, we lack an approach that is able to verify such properties on concrete CRDT implementations. In this paper, we present Propel, a programming language with a type system that captures the algebraic properties required by a correct CRDT implementation. The Propel type system deduces such properties by case analysis and induction: sum types guide the case analysis and algebraic properties in function types enable induction for free. Propel's key feature is its capacity to reason about algebraic properties (a) in terms of rewrite rules and (b) to derive the equality or inequality of expressions from the properties. We provide an implementation of Propel as a Scala embedding, we implement several CRDTs, verify them with Propel and compare the verification process with four state-of-the-art verification tools. Our evaluation shows that Propel is able to automatically deduce the properties that are relevant for common CRDT implementations found in open-source libraries even in cases in which competitors timeout.
C1 [Zakhour, George; Weisenburger, Pascal; Salvaneschi, Guido] Univ St Gallen, Torstr 25, CH-9000 St Gallen, Switzerland.
C3 University of St Gallen
RP Zakhour, G (corresponding author), Univ St Gallen, Torstr 25, CH-9000 St Gallen, Switzerland.
EM george.zakhour@unisg.ch; pascal.weisenburger@unisg.ch;
   guido.salvaneschi@unisg.ch
OI Weisenburger, Pascal/0000-0003-1288-1485; Zakhour,
   George/0009-0000-5042-1207
FU Swiss National Science Foundation (SNSF) [200429]; Basic Research Fund
   of the University of St. Gallen (GFF) through the International
   Postdoctoral Fellowship (IPF) [1031569]
FX The authors wish to thank the anonymous reviewers of PLDI 2023 and
   Viktor Kuncak for their valuable comments and the engaging discussions
   that improved the paper. This work is supported by the Swiss National
   Science Foundation (SNSF), grant 200429, and the Basic Research Fund of
   the University of St. Gallen (GFF) through the International
   Postdoctoral Fellowship (IPF) 1031569.
CR Aleen F, 2009, ACM SIGPLAN NOTICES, V44, P241, DOI 10.1145/1508284.1508273
   Almeida PS, 2018, J PARALLEL DISTR COM, V111, P162, DOI 10.1016/j.jpdc.2017.08.003
   Arvidsson A, 2019, LECT NOTES COMPUT SC, V10447, P61, DOI 10.1007/978-3-030-14805-8_4
   Bansal K, 2018, LECT NOTES COMPUT SC, V10805, P115, DOI 10.1007/978-3-319-89960-2_7
   Baquero Carlos, 2014, REFERENCE IMPLEMENTA
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Barthe G, 2004, MATH STRUCT COMP SCI, V14, P97, DOI 10.1017/S0960129503004122
   Barthe G, 2006, LECT NOTES COMPUT SC, V3945, P114
   Bieniusa Annette, 2012, arXiv
   Bove A, 2009, LECT NOTES COMPUT SC, V5674, P73, DOI 10.1007/978-3-642-03359-9_6
   BOYER RS, 1995, COMPUT MATH APPL, V29, P27, DOI 10.1016/0898-1221(94)00215-7
   Brotherston J, 2005, LECT NOTES ARTIF INT, V3702, P78
   Brotherston J., 2012, Programming Languages and Systems, V7705, P350, DOI [10.1007/978-3-642-35182-225, 10.1007/978-3-642-35182-2_25]
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Claessen K, 2015, LECT NOTES ARTIF INT, V9150, P332, DOI 10.1007/978-3-319-20615-8_23
   Claessen K, 2010, LECT NOTES COMPUT SC, V6143, P6, DOI 10.1007/978-3-642-13977-2_3
   Claessen Koen, 2012, HIPSPEC AUTOMATING I, P16, DOI [10.29007/3qwr, DOI 10.29007/3QWR]
   Comon Hubert, 2001, INDUCTIONLESS INDUCT, P913, DOI [10.1016/B978-044450813-3/50016-3, DOI 10.1016/B978-044450813-3/50016-3]
   Coquand T., 1986, CALCULUS CONSTRUCTIO
   Cortier V, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P409, DOI 10.1145/3133956.3133998
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   ELLIS CA, 1989, SIGMOD REC, V18, P399, DOI 10.1145/66926.66963
   Gelineau Samuel, 2010, COMMUTATIVE COMPOSIT
   Hajdu Marton, 2020, Intelligent Computer Mathematics. 13th International Conference, CICM 2020. Proceedings. Lecture Notes in Artificial Intelligence. Subseries of Lecture Notes in Computer Science (LNAI 12236), P123, DOI 10.1007/978-3-030-53518-6_8
   Heinrichs Michael, 2017, EXPT CRDT IMPLEMENTA
   Heintze N., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P365, DOI 10.1145/268946.268976
   Johnson Paul R., 1975, INTERNET REQUESTS CO
   Jones E, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P395, DOI 10.1145/3519939.3523731
   Kleppmann M, 2017, IEEE T PARALL DISTR, V28, P2733, DOI 10.1109/TPDS.2017.2697382
   Kleppmann Martin, 2017, Automerge
   Laddad S, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563336
   Liu YY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428284
   McCasland RL, 2017, APPL INTELL, V47, P585, DOI 10.1007/s10489-017-0954-8
   Meiklejohn Christopher, 2016, PROTOTYPE IMPLEMENTA
   Nagar K, 2019, LECT NOTES COMPUT SC, V11562, P459, DOI 10.1007/978-3-030-25543-5_26
   Nair SS, 2020, LECT NOTES COMPUT SC, V12075, P544, DOI 10.1007/978-3-030-44914-8_20
   Nicolaescu P, 2015, LECT NOTES COMPUT SC, V9114, P675, DOI 10.1007/978-3-319-19890-3_55
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   Pottenger W. M., 1998, Conference Proceedings of the 1998 International Conference on Supercomputing, P188, DOI 10.1145/277830.277870
   Reynolds A, 2015, LECT NOTES COMPUT SC, V8931, P80
   Reynolds John C., 1972, P ACM ANN C ACM 72 N, V2, P717, DOI [10.1145/800194.805852, DOI 10.1145/800194.805852]
   Rushby J, 1998, IEEE T SOFTWARE ENG, V24, P709, DOI 10.1109/32.713327
   Rusu David, 2016, COLLECTION WELL TEST
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Shapiro M., 2011, COMPREHENSIVE STUDY
   Shapiro M, 2011, LECT NOTES COMPUT SC, V6976, P386, DOI 10.1007/978-3-642-24550-3_29
   Singher E, 2021, LECT NOTES COMPUT SC, V12760, P125, DOI 10.1007/978-3-030-81688-9_6
   Smith J., 1995, INT WORKSH TYP PROOF, V996, P39, DOI [DOI 10.1007/3-540-60579-7_3, 10.1007/3-540- 60579-7]
   Sonnex Willam, 2011, ZENO TOOL AUTOMATIC
   Sonnex W, 2012, LECT NOTES COMPUT SC, V7214, P407, DOI 10.1007/978-3-642-28756-5_28
   Sprenger C, 2003, LECT NOTES COMPUT SC, V2620, P425
   Sypytkowski Bartosz, 2018, EXAMPLE IMPLEMENTATI
   Valbuena Irene Lobo, 2015, ELECTR COMMUN, V72
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158141
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Vogels W, 2009, COMMUN ACM, V52, P40, DOI 10.1145/1435417.1435432
   Weidner M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408976
   Wirth CP, 2005, LECT NOTES ARTIF INT, V2605, P192
   Xi HW, 1998, ACM SIGPLAN NOTICES, V33, P249, DOI 10.1145/277652.277732
   Yang WK, 2019, LECT NOTES COMPUT SC, V11802, P600, DOI 10.1007/978-3-030-30048-7_35
   Zakhour George, 2023, Zenodo, DOI 10.5281/ZENODO.7817421
   Zeller P, 2014, LECT NOTES COMPUT SC, V8461, P33, DOI 10.1007/978-3-662-43613-4_3
NR 63
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 162
DI 10.1145/3591276
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900058
OA gold
DA 2024-07-18
ER

PT J
AU Menz, J
   Hirsch, AK
   Li, PX
   Garg, D
AF Menz, Jan
   Hirsch, Andrew K.
   Li, Peixuan
   Garg, Deepak
TI Compositional Security Definitions for Higher-Order Where
   Declassification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE where declassi similar to cation; logical relations; relevant declassi
   similar to cation
ID POLICIES; MODEL
AB To ensure programs do not leak private data, we often want to be able to provide formal guarantees ensuring such data is handled correctly. Often, we cannot keep such data secret entirely; instead programmers specify how private data may be declassi similar to ed. While security de similar to nitions for declassi similar to cation exist, they mostly do not handle higher-order programs. In fact, in the higher-order setting no compositional security de similar to nition exists for intensional information-similar to ow properties such as where declassi similar to cation, which allows declassi similar to cation in speci similar to c parts of a program. We use logical relations to build a model (and thus security de similar to nition) of where declassi similar to cation. The key insight required for our model is that we must stop enforcing indistinguishability once a relevant declassi similar to cation has occurred. We show that the resulting security de similar to nition provides more security than the most related previous de similar to nition, which is for the lower-order setting.
C1 [Menz, Jan; Garg, Deepak] Max Planck Inst Software Syst, Saarland Informat Campus, D-66123 Saarbrucken, Germany.
   [Hirsch, Andrew K.] Univ Buffalo SUNY, Dept Comp Sci & Engn, 113M Davis Hall, New York, NY 14260 USA.
   [Li, Peixuan] Penn State Univ, University Pk, PA 16802 USA.
C3 Max Planck Society; Pennsylvania Commonwealth System of Higher Education
   (PCSHE); Pennsylvania State University; Pennsylvania State University -
   University Park
RP Menz, J (corresponding author), Max Planck Inst Software Syst, Saarland Informat Campus, D-66123 Saarbrucken, Germany.
EM jmenz@mpi-sws.org; akhirsch@buffalo.edu; pzl129@cse.psu.edu;
   dg@inpi-sws.org
RI Hirsch, Andrew K./AAB-1055-2021
OI Hirsch, Andrew K./0000-0003-2518-614X; Li, Peixuan/0009-0005-9392-3481
CR Ahmed A, 2009, ACM SIGPLAN NOTICES, V44, P340, DOI 10.1145/1594834.1480925
   Ahmed Amal J., 2004, Ph. D. Dissertation
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Askarov A, 2007, PLAS'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY, P53, DOI 10.1145/1255329.1255339
   Askarov A, 2007, P IEEE S SECUR PRIV, P207, DOI 10.1109/SP.2007.22
   Banerjee A, 2008, P IEEE S SECUR PRIV, P339, DOI 10.1109/SP.2008.20
   Broberg N, 2006, LECT NOTES COMPUT SC, V3924, P180
   Broberg N., 2009, ACM PLAS, P101
   Broberg N, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P431, DOI 10.1145/1706299.1706349
   Cruz Raimil, 2017, LIPICS, V74, DOI [10.4230/LIPIcs.ECOOP.2017.7, DOI 10.4230/LIPICS.ECOOP.2017.7]
   Frumin Dan, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P1416, DOI 10.1109/SP40001.2021.00003
   Gäher L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498689
   Gregersen SO, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434291
   Hur CK, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P59
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kozyri E, 2020, J COMPUT SECUR, V28, P191, DOI 10.3233/JCS-191316
   Li P, 2005, ACM SIGPLAN NOTICES, V40, P158, DOI 10.1145/1047659.1040319
   Mantel H, 2004, LECT NOTES COMPUT SC, V3302, P129
   Matos AA, 2005, 18TH IEEE COMPUTER SECURITY FOUNDATIONS WORKSHOP, PROCEEDINGS, P226, DOI 10.1109/CSFW.2005.21
   Menz Jan, 2023, COMPOSITIONAL SECURI
   Minh Ngo, 2020, Formal Methods and Software Engineering. 22nd International Conference on Formal Engineering Methods, ICFEM 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12531), P181, DOI 10.1007/978-3-030-63406-3_11
   Rajani V, 2018, P IEEE COMPUT SECUR, P233, DOI 10.1109/CSF.2018.00024
   Sabelfeld A, 2004, LECT NOTES COMPUT SC, V3233, P174
   The Coq Development Team, 2022, Zenodo
NR 25
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586041
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600016
OA gold
DA 2024-07-18
ER

PT J
AU Yuan, YW
   Guest, S
   Griffis, E
   Potter, H
   Moon, D
   Omar, C
AF Yuan, Yongwei
   Guest, Scott
   Griffis, Eric
   Potter, Hannah
   Moon, David
   Omar, Cyrus
TI Live Pa∼ern Matching with Typed Holes
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE pattern matching; typed holes
AB Several modern programming systems, including GHC Haskell, Agda, Idris, and Hazel, support typed holes. Assigning static and, to varying degree, dynamic meaning to programs with holes allows program editors and other tools to offer meaningful feedback and assistance throughout editing, i.e. in a live manner. Prior work, however, has considered only holes appearing in expressions and types. This paper considers, from type theoretic and logical first principles, the problem of typed pattern holes. We confront two main difficulties, (1) statically reasoning about exhaustiveness and irredundancy when patterns are not fully known, and (2) live evaluation of expressions containing both pattern and expression holes. In both cases, this requires reasoning conservatively about all possible hole fillings. We develop a typed lambda calculus, Peanut, where reasoning about exhaustiveness and redundancy is mapped to the problem of deriving first order entailments. We equip Peanut with an operational semantics in the style of Hazelnut Live that allows us to evaluate around holes in both expressions and patterns. We mechanize the metatheory of Peanut in Agda and formalize a procedure capable of deciding the necessary entailments. Finally, we scale up and implement these mechanisms within Hazel, a programming environment for a dialect of Elm that automatically inserts holes during editing to provide static and dynamic feedback to the programmer in a maximally live manner, i.e. for every possible editor state. Hazel is the first maximally live environment for a general-purpose functional language.
C1 [Yuan, Yongwei] Purdue Univ, W Lafayette, IN 47907 USA.
   [Guest, Scott; Griffis, Eric; Moon, David; Omar, Cyrus] Univ Michigan, Ann Arbor, MI 48109 USA.
   [Potter, Hannah] Univ Washington, Seattle, WA 98195 USA.
C3 Purdue University System; Purdue University; University of Michigan
   System; University of Michigan; University of Washington; University of
   Washington Seattle
RP Yuan, YW (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM yuan311@purdue.edu; sguest@umich.edu; egriffis@umich.edu;
   hkpotter@cs.washington.edu; dmoo@umich.edu; comar@umich.edu
RI Griffis, Eric R/A-4804-2015; Omar, Cyrus/JXM-9227-2024
OI Omar, Cyrus/0000-0003-4502-7971; Moon, David/0000-0002-1081-2235; Yuan,
   Yongwei/0000-0002-2619-2288
FU National Science Foundation [2238744]
FX We thank the anonymous referees for their insights and feedback over
   several iterations of this work. This material is based upon work
   supported by the National Science Foundation under Grant No. 2238744.
   Any opinions, findings, and conclusions or recommendations expressed in
   this material are those of the author and do not necessarily reflect the
   views of the National Science Foundation.
CR Abel A, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2480359.2429075
   Aitken William, 1992, TECHNICAL REPORT
   [Anonymous], 1984, LISP and Functional Programming
   AUGUSTSSON L, 1985, LECT NOTES COMPUT SC, V201, P368
   Augustsson Lennart, 1984, P 1984 ACM C LISP FU, P218, DOI DOI 10.1145/800055.802038
   Awodey S, 2012, IEEE S LOG, P95, DOI 10.1109/LICS.2012.21
   BARENDREGT H, 1985, STUDIES LOGIC FDN MA, V103
   Baudinet Marianne., 1985, Tree Pattern Matching for ML
   Bour Frederic, 2018, P ACM PROGR LANG, p103: 1, DOI [10.1145/3236798, DOI 10.1145/3236798]
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   BURSTALL RM, 1969, COMPUT J, V12, P41, DOI 10.1093/comjnl/12.1.41
   Burstall RodM., 1980, Proceedings of the 1980 ACM conference on LISP and Functional Programming, LFP '80, P136, DOI 10.1145/800087.802799
   Cockx J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236770
   Convent L, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000039
   Dunfield J, 2021, ACM COMPUT SURV, V54, DOI 10.1145/3450952
   Eremondi J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547627
   Eremondi J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341692
   Gissurarson MP, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P179, DOI 10.1145/3242744.3242760
   Graf S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408989
   Harper Robert, 2012, Practical Foundations for Programming Languages, DOI DOI 10.1017/CBO9781139342131
   Jones Simon Peyton, 2020, GLASGOW HASKELL COMP
   Karachalias G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P424, DOI 10.1145/2784731.2784748
   Kats LCL, 2009, ACM SIGPLAN NOTICES, V44, P445, DOI 10.1145/1639949.1640122
   Krishnaswami NR, 2009, ACM SIGPLAN NOTICES, V44, P366, DOI 10.1145/1594834.1480927
   Lennon-Bertrand M, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3495528
   Lubin J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408991
   Maillard K, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547655
   Malewski S, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485503
   Maranget L, 2007, J FUNCT PROGRAM, V17, P387, DOI 10.1017/S0956796807006223
   Maranget Luc, 1994, 2 TECHNIQUES COMPUTI
   McBride Frederick Valentine, 1970, THESIS QUEENSLAND U
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   Omar C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290327
   Omar C, 2017, ACM SIGPLAN NOTICES, V52, P86, DOI 10.1145/3093333.3009900
   Omar Cyrus, SUMMIT ADV PROGRAMMI, DOI [10.4230/LIPIcs.SNAPL.2017.11, DOI 10.4230/LIPICS.SNAPL.2017.11]
   Pientka Brigitte, 2008, P ACM SIGPLAN S PRIN, P163, DOI [10.1145/1389449.1389469, DOI 10.1145/1389449.1389469]
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Potter Hannah, 2020, Hazel Tutor: Guiding Novices Through Type-Driven Development Strategies
   Reppy John, 2019, COMPILING SUCCESSOR
   Sestoft P., 1996, Partial Evaluation. International Seminar. Selected Papers, P446
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Sozeau M, 2010, LECT NOTES COMPUT SC, V6172, P419, DOI 10.1007/978-3-642-14052-5_29
   Tanimoto SL, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON LIVE PROGRAMMING (LIVE), P31, DOI 10.1109/LIVE.2013.6617346
   TURNER DA, 1979, SOFTWARE PRACT EXPER, V9, P31, DOI 10.1002/spe.4380090105
   Urban C, 2007, LECT NOTES ARTIF INT, V4603, P35
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Vytiniotis D, 2012, ACM SIGPLAN NOTICES, V47, P341, DOI 10.1145/2398856.2364554
   Yuan Yongwei, 2023, ARTIFACT LIVE PATTER, DOI [10.5281/zenodo.7713722, DOI 10.5281/ZENODO.7713722]
NR 51
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586048
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600023
OA gold
DA 2024-07-18
ER

PT J
AU Das, R
   Tenenbaum, JB
   Solar-Lezama, A
   Tavares, Z
AF Das, Ria
   Tenenbaum, Joshua B.
   Solar-Lezama, Armando
   Tavares, Zenna
TI Combining Functional and Automata Synthesis to Discover Causal Reactive
   Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE synthesis; automata; reactive; causal
AB We present a new algorithm that synthesizes functional reactive programs from observation data. The key novelty is to iterate between a functional synthesis step, which attempts to generate a transition function over observed states, and an automata synthesis step, which adds any additional latent state necessary to fully account for the observations. We develop a functional reactive DSL called Autumn that can express a rich variety of causal dynamics in time-varying, Atari-style grid worlds, and apply our method to synthesize Autumn programs from data. We evaluate our algorithm on a benchmark suite of 30 Autumn programs as well as a third-party corpus of grid-world-style video games. We find that our algorithm synthesizes 27 out of 30 programs in our benchmark suite and 21 out of 27 programs from the third-party corpus, including several programs describing complex latent state transformations, and from input traces containing hundreds of observations. We expect that our approach will provide a template for how to integrate functional and automata synthesis in other induction domains.
C1 [Das, Ria] Stanford Univ, Stanford, CA 94305 USA.
   [Tenenbaum, Joshua B.; Solar-Lezama, Armando] MIT, Cambridge, MA 02139 USA.
   [Tavares, Zenna] Basis Res Inst, Chicago, IL USA.
   [Tavares, Zenna] Columbia Univ, New York, NY 10027 USA.
C3 Stanford University; Massachusetts Institute of Technology (MIT);
   Columbia University
RP Das, R (corresponding author), Stanford Univ, Stanford, CA 94305 USA.
EM riadas@stanford.edu; jbt@mmit.edu; asolar@csail.mit.edu; zenna@basis.ai
OI Solar Lezama, Armando/0000-0001-7604-8252; Tenenbaum,
   Joshua/0000-0002-1925-2035
FU National Science Foundation [1918839]; Direct For Computer & Info Scie &
   Enginr; Division of Computing and Communication Foundations [1918839]
   Funding Source: National Science Foundation
FX This material is based upon work supported by the National Science
   Foundation under Grant No. 1918839. Any opinions, findings, and
   conclusions or recommendations expressed in this material are those of
   the author and do not necessarily reflect the views of the National
   Science Foundation.
CR ANGLUIN D, 1987, INFORM COMPUT, V75, P87, DOI 10.1016/0890-5401(87)90052-6
   [Anonymous], 2013, GEN VIDEO GAME PLAYI
   Bansal S, 2018, LECT NOTES COMPUT SC, V10981, P367, DOI 10.1007/978-3-319-96145-3_20
   Beyene TA, 2014, ACM SIGPLAN NOTICES, V49, P221, DOI 10.1145/2535838.2535860
   Bloem R, 2012, J COMPUT SYST SCI, V78, P911, DOI 10.1016/j.jcss.2011.08.007
   Cho CY, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P426, DOI 10.1145/1866307.1866355
   Choi W, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P229, DOI 10.1145/3519939.3523429
   Chollet F, 2019, Arxiv, DOI [arXiv:1911.01547, DOI 10.48550/ARXIV.1911.01547]
   Combe D, 2010, LECT NOTES ARTIF INT, V6062, P139, DOI 10.1007/978-3-642-14684-8_15
   Czaplicki E, 2013, ACM SIGPLAN NOTICES, V48, P411, DOI 10.1145/2499370.2462161
   Drews S, 2017, LECT NOTES COMPUT SC, V10205, P173, DOI 10.1007/978-3-662-54577-5_10
   Du T, 2018, ACM T GRAPHIC, V37, DOI 10.1145/3272127.3275006
   Ellis K, 2015, Advances in neural information processing systems, V28, P973
   Ellis K, 2022, NAT COMMUN, V13, DOI 10.1038/s41467-022-32012-w
   Ellis K, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P835, DOI 10.1145/3453483.3454080
   Evans R, 2020, Arxiv, DOI arXiv:2007.05367
   Evans R, 2021, ARTIF INTELL, V293, DOI 10.1016/j.artint.2020.103438
   Finkbeiner B, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '19), P162, DOI 10.1145/3331545.3342601
   Gopnik A, 2012, PSYCHOL BULL, V138, P1085, DOI 10.1037/a0028044
   Guzdial M, 2017, PROCEEDINGS OF THE TWENTY-SIXTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P3707
   Köksal AS, 2013, ACM SIGPLAN NOTICES, V48, P469, DOI 10.1145/2480359.2429125
   Newcomb JulieL., 2019, Using human-in-the-loop synthesis to author functional reactive programs
   PNUELI A, 1990, ANN IEEE SYMP FOUND, P746
   Raffelt H, 2006, LECT NOTES COMPUT SC, V3922, P377
   Solar-Lezama Armando, 2013, International Journal on Software Tools for Technology Transfer, V15, P475, DOI 10.1007/s10009-012-0249-7
   Tjandrasuwita M, 2021, Arxiv, DOI arXiv:2106.06114
   Tsividis P.A., 2021, arXiv, DOI [DOI 10.48550/ARXIV.2107.12544, 10.48550/arXiv.2107.12544]
   Ullman Tomer D., 2020, ANN REV DEVELOPMENTA
   Vaandrager F, 2017, COMMUN ACM, V60, P85, DOI 10.1145/2967606
   Zuidema W, 2020, TOP COGN SCI, V12, P925, DOI 10.1111/tops.12474
NR 30
TC 2
Z9 2
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571249
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500056
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Klimis, V
   Clark, J
   Baker, A
   Neto, D
   Wickerson, J
   Donaldson, AF
AF Klimis, Vasileios
   Clark, Jack
   Baker, Alan
   Neto, David
   Wickerson, John
   Donaldson, Alastair F.
TI Taking Back Control in an Intermediate Representation for GPU Computing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE shader/kernel language compilers; control flow; GPUs; SPIR-V; fuzz
   testing
AB We describe our experiences successfully applying lightweight formal methods to substantially improve and reformulate an important part of Standard Portable Intermediate Representation (SPIR-V), an industrystandard language for GPU computing. The formal model that we present has allowed us to (1) identify several ambiguities and needless complexities in the way that structured control flow was defined in the SPIR-V specification; (2) interact with the authors of the SPIR-V specification to rectify these problems; (3) validate the developer tools and conformance test suites that support the SPIR-V language by cross-checking them against our formal model, improving the tools, test suites, and our models in the process; and (4) develop a novel method for fuzzing SPIR-V compilers to detect miscompilation bugs that leverages our formal model. The latest release of the SPIR-V specification incorporates the revised set of control-flow definitions that have arisen from our work. Furthermore, our novel compiler-fuzzing technique has led to the discovery of twenty distinct, previously unknown bugs in SPIR-V compilers from Google, the Khronos Group, Intel, and Mozilla. Our work showcases the practical impact that formal modelling and analysis techniques can have on the design and implementation of industry-standard programming languages.
C1 [Klimis, Vasileios; Wickerson, John] Imperial Coll London, Dept Elect & Elect Engn, London, England.
   [Clark, Jack; Donaldson, Alastair F.] Imperial Coll London, Dept Comp, London, England.
   [Baker, Alan; Neto, David] Google, Toronto, ON, Canada.
   [Donaldson, Alastair F.] Google, London, England.
C3 Imperial College London; Imperial College London; Google Incorporated;
   Google Incorporated
RP Klimis, V (corresponding author), Imperial Coll London, Dept Elect & Elect Engn, London, England.
EM v.klimis@imperial.ac.uk; jack.clark1@imperial.ac.uk;
   alanbaker@google.com; dneto@bgoogle.com; j.wickerson@ipimperial.ac.uk;
   alastair.donaldson@imperialac.uk
OI Klimis, Vasileios/0000-0002-3173-8636; Neto, David/0000-0003-4326-5896;
   Clark, Jack/0000-0003-3886-7657; Wickerson, John/0000-0001-6735-5533
FU IRIS EPSRC Programme Grant [EP/R006865/1]; EPSRC [EP/R006865/1] Funding
   Source: UKRI
FX We are grateful to Pinghi Yu, Chengsong Tan and the anonymous POPL 2023
   reviewers for valuable feedback on an earlier draft of this work. This
   work was supported by the IRIS EPSRC Programme Grant (EP/R006865/1).
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   Alglave J, 2015, ACM SIGPLAN NOTICES, V50, P577, DOI [10.1145/2775054.2694391, 10.1145/2694344.2694391]
   AMELLAL S, 1993, 1993 IEEE INTERNATIONAL SYMPOSIUM ON CIRCUITS AND SYSTEMS : PROCEEDINGS, VOLS 1-4 ( ISCAS 93 ), P1666, DOI 10.1109/ISCAS.1993.394061
   Apple, 2022, MET SHAD LANG
   Ball T., 1993, Automated and Algorithmic Debugging. First International Workshop, AADEBUG '93 Proceedings, P206, DOI 10.1007/BFb0019410
   Batty M, 2016, ACM SIGPLAN NOTICES, V51, P634, DOI 10.1145/2914770.2837637
   Baxter Sean., 2020, KHRONOS GROUP FORUM
   Baxter Sean., 2021, TWEET SPIR V CONTROL
   Betts Adam, 2012, ACM SIGPLAN NOTICES, DOI DOI 10.1145/2398857.2384625
   Chen JJ, 2020, ACM COMPUT SURV, V53, DOI 10.1145/3363562
   Collingbourne P, 2013, LECT NOTES COMPUT SC, V7792, P270, DOI 10.1007/978-3-642-37036-6_16
   Di Gennaro Davide., 2015, Advanced Metaprogramming in Classic C++
   Donaldson AF, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1017, DOI 10.1145/3453483.3454092
   Donaldson AF, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133917
   Ekstrand Jason, 2022, DEFENSE NIR
   Gaster BR, 2015, ACM T ARCHIT CODE OP, V12, DOI 10.1145/2701618
   Google, 2022, CLSPV PROJ
   Google, 2022, TINT PROJ
   Google, 2022, DAWN WEBGPU IMPL
   Google, 2022, SWIFTSHADER CPU BAS
   Google, 2022, ANGL ALM NAT GRAP LA
   Google, 2022, AMB REP
   Habermaier A, 2012, LECT NOTES COMPUT SC, V7211, P316, DOI 10.1007/978-3-642-28869-2_16
   Intel, 2020, INT IR PLUS GRAP OP, V2
   Intel, 2022, MES 3D GRAPH STACK R
   Iorga D, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485497
   Jackson D, 2019, COMMUN ACM, V62, P66, DOI 10.1145/3338843
   Khronos Group, 2022, MOLTENVK VULK PORT I
   Khronos Group, 2014, SPIR SPEC VERS 1 2
   Khronos Group, 2019, The OpenGL Shading Language Version 4.60.7
   Khronos Group, 2022, KHR VULK OPENGL OPEN
   Khronos Group, 2022, SPIR V SPEC
   Khronos Group, 2022, COMPL REG ALL OFF SP
   Khronos Group, 2022, SPIRV TOOLS REP INCL
   Khronos Group, 2022, OPENCL DOCS
   Khronos Group, 2017, SPIR V SPEC
   Khronos Group, 2022, GLSL GITH REP
   Khronos Group, 2022, VULK 1 3 A SPEC ALL
   Khronos Group, 2022, SPIRV CROSS REP
   Klimis Vasileios, 2022, REP CONT SPIR V CONT
   Klimis Vasileos, 2022, POPL 2023, DOI [10.5281/zenodo.7152484, DOI 10.5281/ZENODO.7152484]
   Lidbury C, 2015, ACM SIGPLAN NOTICES, V50, P65, DOI [10.1145/2737924.2737986, 10.1145/2813885.2737986]
   Livinskii V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428264
   LLVM Compiler Infrastructure, 2022, LLVM LANG REF MAN
   Lustig D, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P257, DOI 10.1145/3297858.3304043
   Lustig D, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P661, DOI 10.1145/3037697.3037723
   Macedo N, 2012, Arxiv, DOI arXiv:1209.5773
   Malyshau Dzmitry., 2021, HORR SPIR V
   Microsoft, 2022, DIRECTX SHAD COMP RE
   Microsoft, 2019, REF HLSL
   Nagai E, 2014, IPSJ T SYSTEM LSI DE, V7, P91, DOI DOI 10.2197/IPSJTSLDM.7.91
   Neto David., 2022, SPIR V SAMPLES WEBGP
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360561
   Raad A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371079
   Rebohle Philip., 2022, DXVK
   Rust Graphics Mages, 2022, NAGA PROJ
   Segal Mark, 2022, OPENGL 4 6 COR PROF
   Sorensen T, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485508
   TARSKI A, 1941, J SYMBOLIC LOGIC, V6, P73, DOI DOI 10.2307/2268577
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P216, DOI [10.1145/2666356.2594334, 10.1145/2594291.2594334]
   W3C, 2022, WEBGPU SHAD LANG W3C
   Wang CH, 2022, IEEE T SOFTWARE ENG, V48, P585, DOI 10.1109/TSE.2020.2998503
   Wickerson J, 2017, ACM SIGPLAN NOTICES, V52, P190, DOI 10.1145/3093333.3009838
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Yiming Jing, 2012, Advances in Information and Computer Security. 7th International Workshop on Security, IWSEC 2012. Proceedings, P1, DOI 10.1007/978-3-642-34117-5_1
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P347, DOI [10.1145/3062341.3062379, 10.1145/3140587.3062379]
NR 67
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571253
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500060
OA gold
DA 2024-07-18
ER

PT J
AU Nieto, A
   Gondelman, L
   Reynaud, A
   Timany, A
   Birkedal, L
AF Nieto, Abel
   Gondelman, Leon
   Reynaud, Alban
   Timany, Amin
   Birkedal, Lars
TI Modular Verification of Op-Based CRDTs in Separation Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE separation logic; distributed systems; CRDT; replicated data type;
   formal verification; causal broadcast
ID CAUSAL; IMPLEMENTATION
AB Operation-based Conflict-free Replicated Data Types (op-based CRDTs) are a family of distributed data structures where all operations are designed to commute, so that replica states eventually converge. Additionally, op-based CRDTs require that operations be propagated between replicas in causal order. This paper presents a framework for verifying safety properties of CRDT implementations using separation logic. The framework consists of two libraries. One implements a Reliable Causal Broadcast (RCB) protocol so that replicas can exchange messages in causal order. A second OpLib library then uses RCB to simplify the creation and correctness proofs of op-based CRDTs. OpLib allows clients to implement new CRDTs as purely-functional data structures, without having to reason about network operations, concurrency control and mutable state, and without having to each time re-implement causal broadcast. Using OpLib, we have implemented 12 example CRDTs from the literature, including multiple versions of replicated registers and sets, two CRDT combinators for products and maps, and two example use cases of the map combinator. Our proofs are conducted in the Aneris distributed separation logic and are formalized in Coq. Our technique is the first work on verification of op-based CRDTs that satisfies both of the following properties: it is modular and targets executable implementations, as opposed to high-level protocols.
C1 [Nieto, Abel; Gondelman, Leon; Timany, Amin; Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
   [Reynaud, Alban] ENS Lyon, Lyon, France.
C3 Aarhus University; Ecole Normale Superieure de Lyon (ENS de LYON)
RP Nieto, A (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM abeln@cs.au.dk; gondelman@cs.au.dk; alban.reynaud@ens-lyon.fr;
   timany@cs.au.dk; birkedal@cs.au.dk
OI Nieto, Abel/0000-0003-2741-8119; Gondelman, Leon/0000-0001-8262-6397;
   Timany, Amin/0000-0002-2237-851X; Birkedal, Lars/0000-0003-1320-0098
FU Villum Investigator grant [25804]; Center for Basic Research in Program
   Verification (CPV); VILLUM Foundation
FX This work was supported in part by a Villum Investigator grant (no.
   25804), Center for Basic Research in Program Verification (CPV), from
   the VILLUM Foundation.
CR AHAMAD M, 1995, DISTRIB COMPUT, V9, P37, DOI 10.1007/BF01784241
   [Anonymous], 2012, P 2012 ACM SIGMOD IN, DOI 10.1145/2213836.2213945
   Bailis Peter, 2013, P 2013 ACM SIGMOD IN, P761, DOI [10.1145/2463676.2465279, DOI 10.1145/2463676.2465279]
   Baquero C, 2014, LECT NOTES COMPUT SC, V8460, P126, DOI 10.1007/978-3-662-43352-2_11
   Birkedal Lars, 2017, Lecture Notes on Iris: Higher-Order Concurrent Separation Log
   BIRMAN K, 1991, ACM T COMPUT SYST, V9, P272, DOI 10.1145/128738.128742
   Burckhardt S, 2014, ACM SIGPLAN NOTICES, V49, P271, DOI 10.1145/2535838.2535848
   Cachin C, 2011, INTRODUCTION TO RELIABLE AND SECURE DISTRIBUTED PROGRAMMING, SECOND EDITION, P1, DOI 10.1007/978-3-642-15260-3
   Chajed T, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P243, DOI 10.1145/3341301.3359632
   Chang F, 2008, ACM T COMPUT SYST, V26, DOI 10.1145/1365815.1365816
   Chodorow Kristina., 2010, MONGODB DEFINITIVE G, V1st
   Fidge Colin J., 1987, Timestamps in Message-Passing Systems That Preserve the Partial Ordering
   Gilbert S., 2002, SIGACT News, V33, P51, DOI 10.1145/564585.564601
   Gomes VBF, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133933
   Gondelman L, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434323
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Krogh-Jespersen M, 2020, LECT NOTES COMPUT SC, V12075, P336, DOI 10.1007/978-3-030-44914-8_13
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Leijnse A, 2019, PAPOC '19: PROCEEDINGS OF THE 6TH WORKSHOP ON PRINCIPLES AND PRACTICE OF CONSISTENCY FOR DISTRIBUTED DATA, DOI 10.1145/3301419.3323971
   Liang HJ, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P636, DOI 10.1145/3453483.3454067
   Liu YY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428284
   Lloyd W, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P401
   Mattern F., 1989, Parallel and Distributed Algorithms. Proceedings of the International Workshop, P215
   Nagar K, 2019, LECT NOTES COMPUT SC, V11562, P459, DOI 10.1007/978-3-030-25543-5_26
   Nair SS, 2020, LECT NOTES COMPUT SC, V12075, P544, DOI 10.1007/978-3-030-44914-8_20
   Nieto Abel, 2022, Zenodo, DOI 10.5281/ZENODO.7055010
   Redmond P, 2022, Arxiv, DOI [arXiv:2206.14767, 10.48550/arXiv.2206.14767, DOI 10.48550/ARXIV.2206.14767]
   Roscoe AW, 1996, P IEEE CSFW, P28, DOI 10.1109/CSFW.1996.503688
   Shapiro M, 2011, LECT NOTES COMPUT SC, V6976, P386, DOI 10.1007/978-3-642-24550-3_29
   Shapiro Marc, 2011, Research Report RR- 7506
   Tanenbaum AS., 2007, DISTRIBUTED SYSTEMS
   Timany A, 2021, Arxiv, DOI arXiv:2109.07863
   Timany A, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P91, DOI 10.1145/3437992.3439931
   Tyulenev M, 2019, INT CONF MANAGE DATA, P636, DOI 10.1145/3299869.3314049
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Zeller P, 2014, LECT NOTES COMPUT SC, V8461, P33, DOI 10.1007/978-3-662-43613-4_3
NR 38
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 188
DI 10.1145/3563351
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200065
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Sakkas, G
   Endres, M
   Guo, PJ
   Weimer, W
   Jhala, R
AF Sakkas, Georgios
   Endres, Madeline
   Guo, Philip J.
   Weimer, Westley
   Jhala, Ranjit
TI SEQ2PARSE: Neurosymbolic Parse Error Repair
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Automated Program Repair; Machine Learning; Error-Correcting Parsers
ID LR
AB We present SEQ2PARSE, a language-agnostic neurosymbolic approach to automatically repairing parse errors. SEQ2PARSE is based on the insight that Symbolic Error Correcting (EC) Parsers can, in principle, synthesize repairs, but, in practice, are overwhelmed by the many error-correction rules that are not relevant to the particular program that requires repair. In contrast, Neural approaches are fooled by the large space of possible sequence level edits, but can precisely pinpoint the set of EC-rules that are relevant to a particular program. We show how to combine their complementary strengths by using neural methods to train a sequence classifier that predicts the small set of relevant EC-rules for an ill-parsed program, after which, the symbolic EC-parsing algorithm can make short work of generating useful repairs. We train and evaluate our method on a dataset of 1,100,000 Python programs, and show that SEQ2PARSE is accurate and efficient: it can parse 94% of our tests within 2.1 seconds, while generating the exact user fix in 1 out 3 of the cases; and useful: humans perceive both SEQ2PARSE-generated error locations and repairs to be almost as good as human-generated ones in a statistically-significant manner.
C1 [Sakkas, Georgios; Guo, Philip J.; Jhala, Ranjit] Univ Calif, Comp Sci & Engn, San Diego, CA USA.
   [Endres, Madeline; Weimer, Westley] Univ Michigan, Comp Sci & Engn, Ann Arbor, MI USA.
C3 University of California System; University of California San Diego;
   University of Michigan System; University of Michigan
RP Sakkas, G (corresponding author), Univ Calif, Comp Sci & Engn, San Diego, CA USA.
EM gsakkas@eng.ucsd.edu; endremad@umich.edu; pg@ucsd.edu;
   weimerw@umich.edu; jhala@cs.ucsd.edu
OI Sakkas, Georgios/0000-0002-1071-8038; Weimer,
   Westley/0000-0001-6749-2204; Jhala, Ranjit/0000-0002-1802-9421; Endres,
   Madeline/0000-0002-4618-4939
FU NSF [CCF-1908633, CCF-1763674, CCF-2211749, IIS-1845900]; Air Force
   [FA8750-19-2-0006, FA8750-19-1-0501]
FX We thank the anonymous referees for their excellent suggestions for
   improving the paper. This work was supported by the NSF grants
   (CCF-1908633, CCF-1763674, CCF-2211749, IIS-1845900) and the Air Force
   grants (FA8750-19-2-0006, FA8750-19-1-0501).
CR Ahadi Alireza, 2018, Proceedings of the 20th Australasian Computing Education Conference, P90, DOI [10.1145/3160489.3160490, DOI 10.1145/3160489.3160490]
   Ahmed T, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-021-09942-y
   Aho A. V., 1974, Computing Surveys, V6, P99, DOI 10.1145/356628.356629
   Aho A. V., 1972, SIAM Journal on Computing, V1, P305, DOI 10.1137/0201022
   Brown TB, 2020, Arxiv, DOI [arXiv:2005.14165, DOI 10.48550/ARXIV.2005.14165]
   Bahdanau D, 2016, Arxiv, DOI [arXiv:1409.0473, 10.48550/arXiv.1409.0473]
   Bhatia S, 2016, Arxiv, DOI [arXiv:1603.06129, 10.48550/ARXIV.1603.06129]
   Bishop Christopher M, 2006, PATTERN RECOGN, V128, P1
   BURKE MG, 1987, ACM T PROGR LANG SYS, V9, P164, DOI 10.1145/22719.22720
   Chapman N., 1987, LR parsing theory and practice
   Collins M., 2013, Lecture Notes
   Corchuelo R, 2002, ACM T PROGR LANG SYS, V24, P698, DOI 10.1145/586088.586092
   Cosman B, 2020, SIGCSE 2020: PROCEEDINGS OF THE 51ST ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P1047, DOI 10.1145/3328778.3366860
   Denny Paul, 2012, P 17 ACM ANN C INN T, P75, DOI [10.1145/2325296.2325318, DOI 10.1145/2325296.2325318]
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   Endres M, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P399, DOI 10.1109/ASE.2019.00045
   Friedman J, 2009, ELEMENTS STAT LEARNI, DOI [10.1007/978-0-387-84858-7, DOI 10.1007/978-0-387-84858-7]
   Goodfellow I, 2016, ADAPT COMPUT MACH LE, P1
   Gulwani Sumit, 2018, Programming Language Design and Implementation, DOI [10.1145/3192366, DOI 10.1145/3192366]
   Guo Philip J., 2013, P 44 ACM TECHN S COM, P579
   Gupta R, 2017, AAAI CONF ARTIF INTE, P1345
   Hardalov M, 2018, LECT NOTES ARTIF INT, V11089, P48, DOI 10.1007/978-3-319-99344-7_5
   Jelinek F., 1992, Speech Recognition and Understanding. Recent Advances, Trends and Applications. Proceedings of the NATO Advanced Study Institute, P345
   Jiang N, 2021, PROC INT CONF SOFTW, P1161, DOI 10.1109/ICSE43902.2021.00107
   Kim Y, 2017, Arxiv, DOI arXiv:1702.00887
   Kingma D. P., 2014, arXiv
   KNUTH DE, 1965, INFORM CONTROL, V8, P607, DOI 10.1016/S0019-9958(65)90426-2
   Kochhar Pavneet Singh, 2016, 25 INT S SOFTWARE TE, P165, DOI 10.1145/2931037.2931051
   Kummerfeld Sarah K., 2003, ACE, V20, P105
   Lutellier Thibaud, 2020, ISSTA '20: Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis, P101, DOI 10.1145/3395363.3397369
   Martinez M, 2013, PROC IEEE INT CONF S, P388, DOI 10.1109/ICSM.2013.54
   McLean Philippe, 1996, A Faster Earley Parser
   Myers EW, 1986, ALGORITHMICA, V1, P251, DOI 10.1007/BF01840446
   Nair V., 2010, P 27 INT C MACHINE L, P807
   Nielsen M. A., 2015, NEURAL NETWORKS DEEP, DOI DOI 10.1145/2939672.2945397
   Parnin C., 2011, P 2011 INT S SOFTWAR, P199, DOI [10.1145/2001420.2001445, DOI 10.1145/2001420.2001445]
   Pu YW, 2016, Arxiv, DOI [arXiv:1607.02902, 10.48550/ARXIV.1607.02902]
   Qian YZ, 2017, ACM T COMPUT EDUC, V18, DOI 10.1145/3077618
   Rahmani K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485535
   Rajasekaran S, 2014, Arxiv, DOI [arXiv:1406.3405, 10.48550/ARXIV.1406.3405, DOI 10.48550/ARXIV.1406.3405]
   RUMELHART DE, 1986, NATURE, V323, P533, DOI 10.1038/323533a0
   Sakkas George, 2022, Zenodo, DOI 10.5281/ZENODO.7080357
   Sakkas G, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P16, DOI 10.1145/3385412.3386005
   Schmidhuber J, 2015, NEURAL NETWORKS, V61, P85, DOI 10.1016/j.neunet.2014.09.003
   Sutskever I, 2014, ADV NEUR IN, V27
   THOMPSON RA, 1976, IEEE T COMPUT, V25, P275, DOI 10.1109/TC.1976.5009254
   van der Spek P, 2005, ACM SIGPLAN NOTICES, V40, P47, DOI 10.1145/1064165.1064173
   Vaswani A, 2017, ADV NEUR IN, V30
   Verbruggen G, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485477
   Wang K, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P481, DOI 10.1145/3192366.3192384
   WERBOS PJ, 1990, P IEEE, V78, P1550, DOI 10.1109/5.58337
   Wu LW, 2020, INT C PROGRAM COMPRE, P139, DOI 10.1145/3387904.3389252
NR 52
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 167
DI 10.1145/3563330
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200044
OA gold
DA 2024-07-18
ER

PT J
AU Barthe, G
   Crubillé, R
   Dal Lago, U
   Gavazzo, F
AF Barthe, Gilles
   Crubille, Raphaelle
   Dal Lago, Ugo
   Gavazzo, Francesco
TI On Feller Continuity and Full Abstraction
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Applicative Bisimilarity; Labelled Markov Processes; Lambda Calculus;
   Event Bisimilarity
ID LAMBDA-CALCULUS; BISIMULATION; METRICS
AB We study the nature of applicative bisimilarity in lambda-calculi endowed with operators for sampling from continuous distributions. On the one hand, we show that bisimilarity, logical equivalence, and testing equivalence all coincide with contextual equivalence when real numbers can be manipulated through continuous functions only. The key ingredient towards this result is a notion of Feller-continuity for labelled Markov processes, which we believe of independent interest, giving rise a broad class of LMPs for which coinductive and logically inspired equivalences coincide. On the other hand, we show that if no constraint is put on the way real numbers are manipulated, characterizing contextual equivalence turns out to be hard, and most of the aforementioned notions of equivalence are even unsound.
C1 [Barthe, Gilles] MPI Secur & Privacy, Madrid, Spain.
   [Crubille, Raphaelle] CNRS, Paris, France.
   [Dal Lago, Ugo; Gavazzo, Francesco] Univ Bologna, Bologna, Italy.
   [Dal Lago, Ugo; Gavazzo, Francesco] INRIA, Paris, France.
C3 Centre National de la Recherche Scientifique (CNRS); University of
   Bologna; Inria
RP Barthe, G (corresponding author), MPI Secur & Privacy, Madrid, Spain.
EM gilles.barthe@mpi-sp.org; raphaelle.crubille@lis-lab.fr;
   ugo.dallago@unibo.it; francesco.gavazzo2@unibo.it
RI ; Dal Lago, Ugo/K-9621-2015
OI GAVAZZO, FRANCESCO/0000-0002-2159-0615; Dal Lago,
   Ugo/0000-0001-9200-070X; BARTHE, Gilles/0000-0002-3853-1777
CR Abramsky S., 1990, LAZY LAMBDA CALCULUS, P65
   [Anonymous], 2005, PROBABILITY MEASURES, DOI DOI 10.1090/CHEL/352
   [Anonymous], 1984, Studies in Logic
   [Anonymous], 1986, Algebraic Approaches to Program Semantics
   Aumann Robert J., 1961, Illinois Journal of Mathematics, V5, P614
   Backhouse R., 1993, Formal program development. IFIP TC2/WG 2.1 state-of-the-art report, P7
   Barr Michael, 1970, LECT NOTES MATH, V137, P39, DOI [10.1007/BFb0060439, DOI 10.1007/BFB0060439]
   Barthe G, 2022, Arxiv, DOI arXiv:2207.10590
   Beiglboeck M, 2010, Arxiv, DOI arXiv:0911.4347
   Billingsley P., 1985, PROBABILITY MEASURE
   Blute R, 1997, IEEE S LOG, P149, DOI 10.1109/LICS.1997.614943
   Borgström J, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI [10.1145/2951913.2951942, 10.1145/3022670.2951942]
   Clerc F, 2019, INFORM COMPUT, V267, P145, DOI 10.1016/j.ic.2019.04.002
   Crubille R., 2014, LNCS, V8410, P209, DOI [10.1007/978-3-642-54833-812, DOI 10.1007/978-3-642-54833-812]
   Crubillé R, 2015, LECT NOTES COMPUT SC, V9360, P65, DOI 10.1007/978-3-319-23506-6_7
   Culpepper R, 2017, LECT NOTES COMPUT SC, V10201, P368, DOI 10.1007/978-3-662-54434-1_14
   Dal Lago U, 2019, ELECTRON NOTES THEOR, V347, P121, DOI 10.1016/j.entcs.2019.09.007
   Dal Lago U, 2020, THEOR COMPUT SCI, V813, P234, DOI 10.1016/j.tcs.2019.12.025
   Dal Lago U, 2017, IEEE S LOG
   Dal Lago U, 2014, ACM SIGPLAN NOTICES, V49, P297, DOI 10.1145/2535838.2535872
   Danos V, 2006, INFORM COMPUT, V204, P503, DOI 10.1016/j.ic.2005.02.004
   Danos Vincent, 2005, ALMOST SURE BI UNPUB
   Desharnais J, 2002, INFORM COMPUT, V179, P163, DOI 10.1006/inco.2001.2962
   Desharnais J, 2004, THEOR COMPUT SCI, V318, P323, DOI 10.1016/j.tcs.2003.09.013
   Desharnais J, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P478, DOI 10.1109/LICS.1998.705681
   Desharnais J, 2003, J LOGIC ALGEBR PROGR, V56, P99, DOI 10.1016/S1567-8326(02)00068-1
   Desharnais J, 1999, LECT NOTES COMPUT SC, V1664, P258
   Ehrhard T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158147
   Fijalkow Nathanael, 2017, PROC ICALP 2017 LIPI, V80, DOI [10.4230/LIPIcs.ICALP.2017.105, DOI 10.4230/LIPICS.ICALP.2017.105]
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   Gavazzo Francesco, 2019, PhD thesis
   Katsumata SY, 2018, LOG METH COMPUT SCI, V14, DOI 10.23638/LMCS-14(4:6)2018
   Katsumata Shin-ya, 2015, LIPIcs, V35, P156, DOI [10.4230/LIPIcs.CALCO.2015.156, DOI 10.4230/LIPICS.CALCO.2015.156]
   Kechris A., 1995, CLASSICAL DESCRIPTIV
   KELLERER HG, 1984, Z WAHRSCHEINLICHKEIT, V67, P399, DOI 10.1007/BF00532047
   Kelly G.M, 2005, Reprints in Theory and Applications of Categories, V10
   Koutavas V, 2011, ELECTRON NOTES THEOR, V276, P215, DOI 10.1016/j.entcs.2011.09.023
   LARSEN KG, 1991, INFORM COMPUT, V94, P1, DOI 10.1016/0890-5401(91)90030-6
   Lassen S, 2005, IEEE S LOG, P345
   Lassen S. B., 1999, Electronic Notes in Theoretical Computer Science, V20, DOI 10.1016/S1571-0661(04)80083-5
   Lassen Suren, 1998, BRICS DISSERTATION S
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Luke Ong C.-H., 1988, PhD thesis
   Morris James Hiram, 1969, Ph.D. Dissertation
   Ong C.-H. L., 1993, Proceedings of Eighth Annual IEEE Symposium on Logic in Computer Science (Cat. No.93CH3328-2), P275, DOI 10.1109/LICS.1993.287580
   Panangaden P., 1999, Electronic Notes in Theoretical Computer Science, V22, DOI 10.1016/S1571-0661(05)80602-4
   Panangaden P., 2009, LABELLED MARKOV PROC
   Piotrowski Zbigniew, 1985, REAL ANAL EXCH, V11, P293, DOI [10.2307/44151750, DOI 10.2307/44151750]
   Sabok M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434292
   Terraf PS, 2011, INFORM COMPUT, V209, P1048, DOI 10.1016/j.ic.2011.02.003
   SANGIORGI D, 1994, INFORM COMPUT, V111, P120, DOI 10.1006/inco.1994.1042
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   Staton S, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P525, DOI 10.1145/2933575.2935313
   Swart Jan., 2013, Markov processes: theory and examples
   Vákár M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290349
   van Breugel F, 2005, THEOR COMPUT SCI, V333, P171, DOI 10.1016/j.tcs.2004.10.021
   Viglizzo ID, 2005, LECT NOTES COMPUT SC, V3629, P395
   Villani C, 2009, GRUNDLEHR MATH WISS, V338, P5
   Wand M, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236782
NR 59
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 120
DI 10.1145/3547651
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000031
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Qian, ZS
   Kavvos, GA
   Birkedal, L
AF Qian, Zesen
   Kavvos, G. A.
   Birkedal, Lars
TI Client-Server Sessions in Linear Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE session types; linear logic; propositions as sessions; Curry-Howard;
   pi-calculus; coexponential modality; client-server architecture
ID CALCULUS; SYSTEM
AB We introduce coexponentials, a new set of modalities for Classical Linear Logic. As duals to exponentials, the coexponentials codify a distributed form of the structural rules of weakening and contraction. This makes them a suitable logical device for encapsulating the pattern of a server receiving requests from an arbitrary number of clients on a single channel. Guided by this intuition we formulate a system of session types based on Classical Linear Logic with coexponentials, which is suited to modelling client-server interactions. We also present a session-typed functional programming language for client-server programming, which we translate to our system of coexponentials.
C1 [Qian, Zesen; Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
   [Kavvos, G. A.] Univ Bristol, Bristol, Avon, England.
C3 Aarhus University; University of Bristol
RP Qian, ZS (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM zesen.qian@cs.au.dk; alex.kavvos@bristol.ac.uk; birkedal@cs.au.dk
OI Birkedal, Lars/0000-0003-1320-0098; Kavvos, Alex/0000-0001-7953-7975
FU VILLUM Foundation [12386]; Villum Investigator grant (Center for Basic
   Research in Program Verification (CPV)) [25804]
FX Alex Kavvos was supported in part by a research grant (no. 12386,
   Guarded Homotopy Type Theory) from the VILLUM Foundation. This work was
   also supported in part by a Villum Investigator grant (no. 25804, Center
   for Basic Research in Program Verification (CPV)). We gratefully
   acknowledge discussions with Martin Berger, Amar Hadzihasanovic,
   Vladimir Zamdzhiev, Wen Kokke, Fabrizio Montesi and Marco Peressotti.
CR Abramsky, 1993, THEORY FORMAL METHOD, P57, DOI 10.1007/978-1-4471-3503-6_5
   ABRAMSKY S, 1993, THEOR COMPUT SCI, V111, P3, DOI 10.1016/0304-3975(93)90181-R
   ABRAMSKY S, 1994, THEOR COMPUT SCI, V135, P5, DOI 10.1016/0304-3975(94)00103-0
   ABRAMSKY S, 1994, J SYMBOLIC LOGIC, V59, P543, DOI 10.2307/2275407
   Abramsky S., 1996, P NATO ADV STUD I DE, P35
   Acar Umut A., 2016, PARALLEL COMPUTING T
   [Anonymous], 1992, Mathematical Structures in Computer Science, DOI DOI 10.1017/S0960129500001407
   Aschieri F, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371086
   Atkey Robert, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P32, DOI 10.1007/978-3-319-30936-1_2
   ATKEY R, 2017, EUR S PROGR SRING, DOI DOI 10.1007/978-3-662-54434-1_3
   Avron A., 1991, Annals of Mathematics and Artificial Intelligence, V4, P225, DOI 10.1007/BF01531058
   Baelde D, 2012, ACM T COMPUT LOG, V13, DOI 10.1145/2071368.2071370
   Balzer S, 2019, LECT NOTES COMPUT SC, V11423, P611, DOI 10.1007/978-3-030-17184-1_22
   Balzer S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110281
   Barr M., 1991, MATH STRUCTURES COMP, V1, P159, DOI [DOI 10.1017/S0960129500001274, 10.1017/S0960129500001274]
   Bellin G., 1997, Mathematical Structures in Computer Science, V7, P663, DOI 10.1017/S0960129597002326
   BELLIN G, 1994, THEOR COMPUT SCI, V135, P11, DOI 10.1016/0304-3975(94)00104-9
   Benton N, 1996, IEEE S LOG, P420, DOI 10.1109/LICS.1996.561458
   BLUMOFE RD, 1995, SIGPLAN NOTICES, V30, P207
   CAIRES L, 2010, P 21 INT C CONC THEO
   Caires L, 2017, LECT NOTES COMPUT SC, V10201, P229, DOI 10.1007/978-3-662-54434-1_9
   Caires L, 2016, MATH STRUCT COMP SCI, V26, P367, DOI 10.1017/S0960129514000218
   Carbone M., 2016, SCHLOSS DAGSTUHL, V59, P1
   Carbone M, 2017, ACTA INFORM, V54, P243, DOI 10.1007/s00236-016-0285-y
   Castellan Simon, 2020, CORRABS201105248
   CONWAY M. E., 1963, P NOVEMBER 12 14 196, P139, DOI DOI 10.1145/1463822.1463838
   Coppo M, 2016, MATH STRUCT COMP SCI, V26, P238, DOI 10.1017/S0960129514000188
   Dagum L, 1998, IEEE COMPUT SCI ENG, V5, P46, DOI 10.1109/99.660313
   Dardha O, 2018, LECT NOTES COMPUT SC, V10803, P91, DOI 10.1007/978-3-319-89366-2_5
   Dardha O, 2015, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.190.1
   Das A, 2021, P IEEE COMPUT SECUR, P109, DOI 10.1109/CSF51468.2021.00004
   de Falco, 2018, EPTCS, V292, P90, DOI DOI 10.4204/EPTCS.292
   Deniélou PM, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P435, DOI 10.1145/1926385.1926435
   Ehrhard T, 2018, MATH STRUCT COMP SCI, V28, P995, DOI 10.1017/S0960129516000372
   Ehrhard T, 2010, INFORM COMPUT, V208, P606, DOI 10.1016/j.ic.2009.06.005
   Fowler S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290341
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Girard J. Y., 1987, TAPSOFT '87. Proceedings of the International Joint Conference on Theory and Practice of Software Development, P52
   GIRARD JY, 1992, THEOR COMPUT SCI, V97, P1, DOI 10.1016/0304-3975(92)90386-T
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Halstead R.H., 1984, P 1984 ACM S LISP FU, P9
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Jafarrahmani, ARXIV201110209
   Keynes JM, 1937, Q J ECON, V51, P209, DOI 10.2307/1882087
   Kobayashi N, 2003, LECT NOTES COMPUT SC, V2757, P439
   Kobayashi N, 2002, INFORM COMPUT, V177, P122, DOI 10.1006/inco.2002.3171
   Kobayashi N, 2006, LECT NOTES COMPUT SC, V4137, P233
   KOKKE W, 2019, INT C COORDINATION L, P37, DOI DOI 10.1007/978-3-030-22397-7_3
   Kokke W, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290337
   Lafont Y., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P43, DOI 10.1109/LICS.1991.151629
   Leijen D, 2009, ACM SIGPLAN NOTICES, V44, P227, DOI 10.1145/1639949.1640106
   LINDLEY S, 2015, EUR S PROGR LANG SYS
   Lindley S, 2017, RIV PUBL SER AUTOMAT, P265
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P434, DOI 10.1145/3022670.2951921
   Maraist J, 1999, THEOR COMPUT SCI, V228, P175, DOI 10.1016/S0304-3975(98)00358-2
   Maraist John, 1995, P 11 ANN MATH FDN PR, P370, DOI [10.1016/S1571-0661(04)00022-2, DOI 10.1016/S1571-0661(04)00022-2]
   Mazza D, 2018, MATH STRUCT COMP SCI, V28, P1097, DOI 10.1017/S0960129516000402
   Mellies P., 2009, Panoramas et Syntheses, V27, P15
   Melliès PA, 2018, MATH STRUCT COMP SCI, V28, P1253, DOI 10.1017/S0960129516000426
   Merro M, 2004, MATH STRUCT COMP SCI, V14, P715, DOI 10.1017/S0960129504004323
   Milner, 1999, COMMUNICATING MOBILE, DOI [10.5555/329902, DOI 10.5555/329902]
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Peressotti, 2018, ARXIV180301049
   Pfenning Frank, 2020, ARXIV200105132
   Pfenning Frank, CORRABS210106249
   Reed Jason, 2009, A Judgmental Deconstruction of Modal Logic
   Reinders James, 2007, Intel threading building blocks-outfitting C++ for multi-core processor parallelism
   Rocha P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473584
   Shavit Nir., 2012, ART MULTIPROCESSOR P, DOI [10.5555/2385452, DOI 10.5555/2385452]
   Toninho Bernardo, 2014, Trustworthy Global Computing 9th International Symposium, TGC 2014. Revised Selected Papers: LNCS 8902, P159, DOI 10.1007/978-3-662-45917-1_11
   Van Steen Maarten, 2017, DISTRIBUTED SYSTEMS
   Vasconcelos VT, 2012, INFORM COMPUT, V217, P52, DOI 10.1016/j.ic.2012.05.002
   Wadler P, 2014, J FUNCT PROGRAM, V24, P384, DOI 10.1017/S095679681400001X
NR 75
TC 7
Z9 7
U1 2
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 62
DI 10.1145/3473567
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800002
OA gold, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Zakowski, Y
   Beck, C
   Yoon, I
   Zaichuk, I
   Zaliva, V
   Zdancewic, S
AF Zakowski, Yannick
   Beck, Calvin
   Yoon, Irene
   Zaichuk, Ilia
   Zaliva, Vadim
   Zdancewic, Steve
TI Modular, Compositional, and Executable Formal Semantics for LLVM IR
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Semantics; Monads; Coq; LLVM; Verified Compilation
AB This paper presents a novel formal semantics, mechanized in Coq, for a large, sequential subset of the LLVM IR. In contrast to previous approaches, which use relationally-specified operational semantics, this new semantics is based on monadic interpretation of interaction trees, a structure that provides a more compositional approach to defining language semantics while retaining the ability to extract an executable interpreter. Our semantics handles many of the LLVM IR's non-trivial language features and is constructed modularly in terms of event handlers, including those that deal with nondeterminism in the specification. We show how this semantics admits compositional reasoning principles derived from the interaction trees equational theory of weak bisimulation, which we extend here to better deal with nondeterminism, and we use them to prove that the extracted reference interpreter faithfully refines the semantic model. We validate the correctness of the semantics by evaluating it on unit tests and LLVM IR programs generated by HELIX.
C1 [Zakowski, Yannick] INRIA, Rocquencourt, France.
   [Beck, Calvin; Yoon, Irene; Zdancewic, Steve] Univ Penn, Philadelphia, PA 19104 USA.
   [Zaichuk, Ilia] Taras Shevchenko Natl Univ Kyiv, Kiev, Ukraine.
   [Zaliva, Vadim] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Inria; University of Pennsylvania; Ministry of Education & Science of
   Ukraine; Taras Shevchenko National University of Kyiv; Carnegie Mellon
   University
RP Zakowski, Y (corresponding author), INRIA, Rocquencourt, France.
EM yannick.zakowski@inria.fr; hobbes@seas.upenn.edu; euisuny@cis.upenn.edu;
   zoickx@knu.ua; vzaliva@cmu.edu; stevez@cis.upenn.edu
RI Zdancewic, Steve/JXL-6845-2024
OI Zaichuk, Ilia/0000-0003-1617-3259; Zakowski,
   Yannick/0000-0003-4585-6470; Beck, Calvin/0000-0002-3469-7219; Zaliva,
   Vadim/0000-0002-9145-3288; Yoon, Irene/0000-0003-3388-1257; Zdancewic,
   Steve/0000-0002-3516-1512
FU National Science Foundation [1521539]; ONR [N00014-17-1-2930]
FX This material is based upon work supported by the National Science
   Foundation under Grant No. 1521539 and the ONR under Grant No.
   N00014-17-1-2930. Any opinions, findings, and conclusions or
   recommendations expressed in this material are those of the author and
   do not necessarily reflect the views of the National Science Foundation
   or the ONR.
CR APPEL A, 2011, PROGRAMMING LANGUAGE, DOI DOI 10.1007/978-3-642-19718-5_1
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371075
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Bodin M, 2014, ACM SIGPLAN NOTICES, V49, P87, DOI 10.1145/2535838.2535876
   Chakraborty S, 2017, 2017 7TH INTERNATIONAL SYMPOSIUM ON EMBEDDED COMPUTING AND SYSTEM DESIGN (ISED)
   Charguéraud A, 2013, LECT NOTES COMPUT SC, V7792, P41, DOI 10.1007/978-3-642-37036-6_3
   Chlipala A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P93, DOI 10.1145/1706299.1706312
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Ellison Charles, 2012, THESIS U ILLINOIS UR
   Franchetti F, 2018, P IEEE, V106, P1935, DOI 10.1109/JPROC.2018.2873289
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Hur CK, 2013, ACM SIGPLAN NOTICES, V48, P193, DOI 10.1145/2480359.2429093
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   KANG J, 2018, P 39 ACM SIGPLAN C P
   Kang J, 2016, ACM SIGPLAN NOTICES, V51, P178, DOI 10.1145/2914770.2837642
   Kang J, 2015, ACM SIGPLAN NOTICES, V50, P326, DOI [10.1145/2737924.2738005, 10.1145/2813885.2738005]
   Koh N, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P234, DOI 10.1145/3293880.3294106
   Krebbers R, 2015, CPP'15: PROCEEDINGS OF THE 2015 ACM CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P15, DOI 10.1145/2676724.2693571
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Lampropoulos Leonidas, 2018, QuickChick: Property-Based Testing in Coq, V4
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   LEE J, 2017, P 38 ACM SIGPLAN C P
   Lee J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276495
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Leroy X, 2009, INFORM COMPUT, V207, P284, DOI 10.1016/j.ic.2007.12.004
   Leroy Xavier, 2012, Research Report RR-7987
   Li Liyi, 2020, P 34 EUROPEAN C OBJE, P1, DOI [10.4230/LIPIcs.ECOOP.2020.7, DOI 10.4230/LIPICS.ECOOP.2020.7]
   Li Liyi., 2018, IsaK: A Complete Semantics of K
   Lopes NP, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P65, DOI 10.1145/3453483.3454030
   Lopes NP, 2015, ACM SIGPLAN NOTICES, V50, P22, DOI [10.1145/2813885.2737965, 10.1145/2737924.2737965]
   Maillard K, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371072
   Mansky W, 2015, LECT NOTES COMPUT SC, V9207, P413, DOI 10.1007/978-3-319-21668-3_24
   Memarian K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290380
   Memarian K, 2016, ACM SIGPLAN NOTICES, V51, P1, DOI [10.1145/2908080.2908081, 10.1145/2980983.2908081]
   MENENDEZ D, 2017, P 38 ACM SIGPLAN C P, DOI DOI 10.1145/3140587.3062372
   Neis G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P166, DOI 10.1145/2784731.2784764
   Owens S, 2016, LECT NOTES COMPUT SC, V9632, P589, DOI 10.1007/978-3-662-49498-1_23
   Patterson D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341689
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Ringer T, 2019, FOUND TRENDS PROGRAM, V5, P102, DOI 10.1561/2500000045
   Rosu G, 2010, J LOGIC ALGEBR PROGR, V79, P397, DOI 10.1016/j.jlap.2010.03.012
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Song Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371091
   Sozeau Matthieu, 2019, INT WORKSH COQ PROGR
   Steele G. L.  Jr., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P472, DOI 10.1145/174675.178068
   Stewart G, 2015, ACM SIGPLAN NOTICES, V50, P275, DOI [10.1145/2676726.2676985, 10.1145/2775051.2676985]
   Swierstra W, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341707
   Wang YT, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290375
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zakowski Y, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P71, DOI 10.1145/3372885.3373813
   ZALIVA V, 2018, WORKSHOP FUNCTIONAL, DOI DOI 10.1145/3264738.3264739
   Zaliva Vadim, 2020, P 12 WORKING C VERIF, DOI [10.1007/978-3-030-63618-0_3, DOI 10.1007/978-3-030-63618-0_3]
   ZHAO J, 2013, P 2013 ACM SIGPLA C, DOI DOI 10.1145/2499370.2462164
   Zhao JZ, 2012, ACM SIGPLAN NOTICES, V47, P427, DOI 10.1145/2103621.2103709
NR 57
TC 10
Z9 12
U1 1
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 67
DI 10.1145/3473572
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800007
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Doenges, R
   Arashloo, MT
   Bautista, S
   Chang, A
   Ni, N
   Parkinson, S
   Peterson, R
   Solko-Breslin, A
   Xu, A
   Foster, N
AF Doenges, Ryan
   Arashloo, Mina Tahmasbi
   Bautista, Santiago
   Chang, Alexander
   Ni, Newton
   Parkinson, Samwise
   Peterson, Rudy
   Solko-Breslin, Alaia
   Xu, Amanda
   Foster, Nate
TI Petr4: Formal Foundations for P4 Data Planes
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE P4; formal semantics
AB P4 is a domain-specific language for programming and specifying packet-processing systems. It is based on an elegant design with high-level abstractions like parsers and match-action pipelines that can be compiled to efficient implementations in software or hardware. Unfortunately, like many industrial languages, P4 has developed without a formal foundation. The P4 Language Specification is a 160-page document with a mixture of informal prose, graphical diagrams, and pseudocode, leaving many aspects of the language semantics up to individual compilation targets. The P4 reference implementation is a complex system, running to over 40KLoC of C++ code, with support for only a few targets. Clearly neither of these artifacts is suitable for formal reasoning about P4 in general.
   This paper presents a new framework, called Petr4, that puts P4 on a solid foundation. Petr4 consists of a clean-slate definitional interpreter and a core calculus that models a fragment of P4. Petr4 is not tied to any particular target: the interpreter is parameterized over an interface that collects features delegated to targets in one place, while the core calculus overapproximates target-specific behaviors using non-determinism.
   We have validated the interpreter against a suite of over 750 tests from the P4 reference implementation, exercising our target interface with tests for different targets. We validated the core calculus with a proof of type-preserving termination. While developing Petr4, we reported dozens of bugs in the language specification and the reference implementation, many of which have been fixed.
C1 [Doenges, Ryan; Arashloo, Mina Tahmasbi; Bautista, Santiago; Chang, Alexander; Ni, Newton; Parkinson, Samwise; Peterson, Rudy; Solko-Breslin, Alaia; Xu, Amanda; Foster, Nate] Cornell Univ, Ithaca, NY 14853 USA.
   [Bautista, Santiago] ENS Rennes, Rennes, France.
C3 Cornell University; Ecole Normale Superieure de Rennes (ENS Rennes);
   Universite de Rennes
RP Doenges, R (corresponding author), Cornell Univ, Ithaca, NY 14853 USA.
EM rhd896@cornell.edu; mt822@cornell.edu; santiago.bautista@ens-rennes.fr;
   apc73@cornell.edu; cn279@cornell.edu; stp59@cornell.edu;
   rnp39@cornell.edu; ajs644@cornell.edu; ax49@cornell.edu;
   jnfoster@cs.cornell.edu
OI Bautista, Santiago/0000-0003-2129-897X; Doenges,
   Ryan/0000-0002-6899-4529
FU National Science Foundation [FMiTF-1918396]; Defense Advanced Research
   Projects Agency (DARPA) [HR001120C0107]
FX We are grateful to the POPL'21 reviewers for their feedback and
   suggestions for improving this paper. We wish to thank Chris Sommers for
   many discussions on formalizing P4 and Michael Greenberg for advice on
   presenting this work, and we wish to especially thank Pedro Amorim,
   Griffin Berlstein, Cal Gunnarsson, Tobias Kappe, Rolph Recto, John
   Sarracino, Steffen Smolka, and DougWoos for their generous and detailed
   feedback on drafts. Our work has been supported in part by the National
   Science Foundation under grant FMiTF-1918396, the Defense Advanced
   Research Projects Agency (DARPA) under Contract HR001120C0107, and gifts
   from Keysight, Fujitsu, and InfoSys.
CR Anderson CJ, 2014, ACM SIGPLAN NOTICES, V49, P113, DOI 10.1145/2535838.2535862
   [Anonymous], 1997, The Definition of Standard ML
   Beckett R, 2017, SIGCOMM '17: PROCEEDINGS OF THE 2017 CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION, P155, DOI 10.1145/3098822.3098834
   Bishop S, 2019, J ACM, V66, DOI 10.1145/3243650
   Bjorner Nikolaj, 2015, ICDCIT, p21S32, DOI [10.1007/978-3-319-14977-6_2, DOI 10.1007/978-3-319-14977-6_2]
   Bosshart P, 2014, ACM SIGCOMM COMP COM, V44, P87, DOI 10.1145/2656877.2656890
   Chen Haogang, 2012, P AS PAC WORKSH SYST, P1
   Cisco Systems, 2018, CISC DNA AN ASS
   Damas Luis, 1984, THESIS U EDINBURG
   Dodge Catherine, 2018, SIMPLER WAY ASSESS N
   Doenges Ryan, 2020, ARXIV201105948CSPL
   Fogel A., 2015, NSDI
   Foster Nate., 2019, Github bug report
   Gember-Jacobson A, 2016, PROCEEDINGS OF THE 2016 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '16), P300, DOI 10.1145/2934872.2934876
   Greenberg M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371111
   Guha A, 2013, ACM SIGPLAN NOTICES, V48, P483, DOI 10.1145/2499370.2462178
   Guha Arjun, 2010, LECT NOTES COMPUT SC
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   Heule Stefan, 2019, ONF CONN
   Hira Mukesh, 2015, IMPROVING NETWORK MO
   Jin X, 2018, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI'18), P35
   Jin X, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P121, DOI 10.1145/3132747.3132764
   Jourdan JH, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/3064848
   KAHN G, 1987, LECT NOTES COMPUT SC, V247, P22
   Kazemian Peyman, 2012, NSDI113S126
   Kheradmand Ali, 2018, ARXIV180401468CSNI
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Liu HH, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P599, DOI 10.1145/3132747.3132759
   Liu J, 2018, PROCEEDINGS OF THE 2018 CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '18), P490, DOI 10.1145/3230543.3230582
   Mai H, 2011, ACM SIGCOMM COMP COM, V41, P290, DOI 10.1145/2043164.2018470
   McKeown Nick, 2016, AUTOMATICALLY VERIFY
   Nötzli A, 2018, PROCEEDINGS OF THE SYMPOSIUM ON SDN RESEARCH (SOSR'18), DOI 10.1145/3185467.3185497
   Park D, 2015, ACM SIGPLAN NOTICES, V50, P346, DOI [10.1145/2813885.2737991, 10.1145/2737924.2737991]
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Plotkin G. D., 1981, A structural approach to operational semantics
   Ruffy Fabian, 2020, OSDI
   Scott Dana S, 1971, MATH SEMANTICS COMPU, V1
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   Sewell P, 2010, J FUNCT PROGRAM, V20, P71, DOI 10.1017/S0956796809990293
   Skalka C, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P1115, DOI 10.1145/3319535.3363214
   Stoenescu R, 2018, PROCEEDINGS OF THE 2018 CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '18), P518, DOI 10.1145/3230543.3230548
   Svaldi, 2019, DENVER POST
   The P4 Language Consortium, 2018, P4 LANG SPEC VERS 1
   Van Geffen Jacob., 2020, Computer Aided Verification. Ed. by, P564, DOI DOI 10.1007/978-3-030-53291-8_29
   Wang Xi., 2014, OSDI
NR 45
TC 9
Z9 9
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 41
DI 10.1145/3434322
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100041
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Hietala, K
   Rand, R
   Hung, SH
   Wu, XD
   Hicks, M
AF Hietala, Kesha
   Rand, Robert
   Hung, Shih-Han
   Wu, Xiaodi
   Hicks, Michael
TI A Verified Optimizer for Quantum Circuits
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Formal Verification; Quantum Computing; Circuit Optimization; Certified
   Compilation; Programming Languages
AB We present VOQC, the first fully verified optimizer for quantum circuits, written using the Coq proof assistant. Quantum circuits are expressed as programs in a simple, low-level language called SQIR, a simple quantum intermediate representation, which is deeply embedded in Coq. Optimizations and other transformations are expressed as Coq functions, which are proved correct with respect to a semantics of SQIR programs. SQIR uses a semantics of matrices of complex numbers, which is the standard for quantum computation, but treats matrices symbolically in order to reason about programs that use an arbitrary number of quantum bits. SQIR'S careful design and our provided automation make it possible to write and verify a broad range of optimizations in VOQC, including full-circuit transformations from cutting-edge optimizers.
C1 [Hietala, Kesha; Hung, Shih-Han; Wu, Xiaodi; Hicks, Michael] Univ Maryland, Baltimore, MD 21201 USA.
   [Rand, Robert] Univ Chicago, Chicago, IL 60637 USA.
C3 University System of Maryland; University of Maryland Baltimore;
   University of Chicago
RP Hietala, K (corresponding author), Univ Maryland, Baltimore, MD 21201 USA.
EM kesha@cs.umd.edu; rand@uchicago.edu; shung@cs.umd.edu; xwu@cs.umd.edu;
   mwh@cs.unid.edu
RI Rand, Robert/AAI-8340-2020
OI Rand, Robert/0000-0001-6842-5505; Hietala, Kesha/0000-0002-2724-0974;
   Hicks, Michael/0000-0002-2759-9223
FU U.S. Department of Energy, Office of Science, Office of Advanced
   Scientific Computing Research, Quantum Testbed Pathfinder Program
   [DE-SC0019040]
FX We thank Leonidas Lampropoulos, Kartik Singhal, and anonymous reviewers
   for their helpful comments on drafts of this paper. This material is
   based upon work supported by the U.S. Department of Energy, Office of
   Science, Office of Advanced Scientific Computing Research, Quantum
   Testbed Pathfinder Program under Award Number DE-SC0019040.
CR Abramsky Samson, 2009, HDB QUANTUM LOGIC QU, V2
   Amy M, 2019, LECT NOTES COMPUT SC, V11497, P87, DOI 10.1007/978-3-030-21500-2_6
   Amy M, 2014, IEEE T COMPUT AID D, V33, P1476, DOI 10.1109/TCAD.2014.2341953
   Amy Matthew, 2018, QUANTUM SCI TECHNOL, V4, P1
   Amy Matthew, 2017, P 28 INT C COMP AID
   Amy Matthew, 2018, LARGE SCALE FUNCTION
   [Anonymous], ARXIV170703429QUANTP
   [Anonymous], 2016, ARXIV160803355QUANTP
   Bennett Charles H, 2020, ARXIV PREPRINT ARXIV
   Bichsel B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P286, DOI 10.1145/3385412.3386007
   Boender J, 2015, ELECTRON P THEOR COM, P71, DOI 10.4204/EPTCS.195.6
   Cambridge Quantum Computing Ltd, 2019, pytket
   Chareton Christophe, 2020, ARXIV200305841CSPL
   Coecke B, 2011, NEW J PHYS, V13, DOI 10.1088/1367-2630/13/4/043016
   Fagan A, 2019, ELECTRON P THEOR COM, P85, DOI 10.4204/EPTCS.287.5
   Filliatre Jean-Christophe, 2013, LECT NOTES COMPUTER
   Gottesman D, 2010, PROC SYM AP, V68, P13
   Green A.S., 2010, THESIS U NOTTINGHAM
   GREENBERGER DM, 1989, FUND THEOR, V37, P69
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Heyfron LE, 2019, QUANTUM SCI TECHNOL, V4, DOI 10.1088/2058-9565/aad604
   Hietala Kesha, 2020, ARXIV201001240CSPL
   Hung Shih-Han, 2020, ARXIV191202250CSPL
   IBM, IBM Q5 TEN V1 10 10
   IBM Research Editorial Staff, 2018, WE HAV WINN IBM QISK
   JavadiAbhari A., 2014, Proceedings of the 11th ACM Conference on Computing Frontiers, page, P1, DOI DOI 10.1145/2597917
   Jeandel E, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P559, DOI 10.1145/3209108.3209131
   Jourdan Jacques-Henri, 2012, PROGRAMMING LANGUAGE
   Kissinger A., 2020, ELECTRON P THEOR COM, V318, P229, DOI [DOI 10.4204/EPTCS.318.14, 10.4204/EPTCS.318.14]
   Kissinger Aleks, 2019, ARXIV190310477QUANTP
   Kissinger Aleks, 2015, AUTOMATED DEDUCTION
   Knill E, 1996, CONVENTIONS QUANTUM
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Martonosi Margaret, 2019, ARXIV190310541CSET
   Melquiond Guillaume, 2020, INTERVAL PACKAGE COQ
   Miller DM, 2006, INT SYM MVL, P177
   Nam Y, 2018, NPJ QUANTUM INFORM, V4, DOI 10.1038/s41534-018-0072-4
   Paetznick A, 2014, QUANTUM INF COMPUT, V14, P1277
   Paykin J, 2017, ACM SIGPLAN NOTICES, V52, P846, DOI 10.1145/3093333.3009894
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Rand R, 2019, ELECTRON P THEOR COM, P299, DOI 10.4204/EPTCS.287.17
   Rand R, 2018, ELECTRON P THEOR COM, P119, DOI 10.4204/EPTCS.266.8
   Rand Robert, 2018, 4 INT WORKSH COQ PRO
   Rand Robert, 2018, Ph. D. Dissertation
   Rigetti Computing, 2019, The @rigetti optimizing Quil compiler
   Rigetti Computing, 2019, PYQ DOC
   Saeedi M, 2011, QUANTUM INF PROCESS, V10, P355, DOI 10.1007/s11128-010-0201-2
   Selinger P, 2004, MATH STRUCT COMP SCI, V14, P527, DOI 10.1017/S0960129504004256
   Shi Yunong, 2019, ARXIV190808963QUANTP
   SHOR PW, 1994, AN S FDN CO, P124
   SIMON DR, 1994, AN S FDN CO, P116, DOI 10.1137/S0097539796298637
   Singhal Kartik, 2020, 1 INT WORKSHOP PROGR
   Sivarajah Seyon, 2020, ARXIV200310611QUANTP
   Smith KN, 2019, PROCEEDINGS OF THE 2019 46TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA '19), P579, DOI 10.1145/3307650.3322262
   Steiger DS, 2018, QUANTUM-AUSTRIA, V2, DOI 10.22331/q-2018-01-31-49
   Tannu SS, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P987, DOI 10.1145/3297858.3304007
   The Cirq Developers, 2019, CIRQ PYTH LIB NISQ C
   The Coq Development Team, 2019, COQ PROOF ASSISTANT, DOI DOI 10.5281/ZENODO.3476303
   Ying MS, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2049706.2049708
   Zamdzhiev Vladimir, 2016, QUANTUM COMPUTING GO
   Zulehner A, 2019, IEEE T COMPUT AID D, V38, P1226, DOI 10.1109/TCAD.2018.2846658
NR 61
TC 35
Z9 36
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 37
DI 10.1145/3434318
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100037
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Margalit, R
   Lahav, O
AF Margalit, Roy
   Lahav, Ori
TI Verifying Observational Robustness against a C11-Style Memory Model
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE weak memory models; C/C++11; robustness; shared-memory concurrency
ID CONSISTENCY
AB We study the problem of verifying the robustness of concurrent programs against a C11-style memory model that includes relaxed accesses and release/acquire accesses and fences, and show that this verification problem can be reduced to a standard reachability problem under sequential consistency. We further observe that existing robustness notions do not allow the verification of programs that use speculative reads as in the sequence lock mechanism, and introduce a novel "observational robustness" property that fills this gap. In turn, we show how to soundly check for observational robustness. We have implemented our method and applied it to several challenging concurrent algorithms, demonstrating the applicability of our approach. To the best of our knowledge, this is the first method for verifying robustness against a programming language concurrency model that includes relaxed accesses and release/acquire fences.
C1 [Margalit, Roy; Lahav, Ori] Tel Aviv Univ, Tel Aviv, Israel.
C3 Tel Aviv University
RP Margalit, R (corresponding author), Tel Aviv Univ, Tel Aviv, Israel.
EM roy.margalit@cs.tau.ac.il; orilahav@tau.ac.il
OI Lahav, Ori/0000-0003-4305-6998
FU Israel Science Foundation [5166651]; Alon Young Faculty Fellowship
FX We thank the POPL'21 reviewers for their helpful feedback. This research
   was supported by the Israel Science Foundation (grant number 5166651).
   The second author was also supported by the Alon Young Faculty
   Fellowship.
CR Abdulla Parosh Aziz, 2015, Networked Systems. Third International Conference, NETYS 2015. Revised Selected Papers: LNCS 9466, P32, DOI 10.1007/978-3-319-26850-7_3
   Abdulla PA, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1117, DOI 10.1145/3314221.3314649
   Abdulla PA, 2015, LECT NOTES COMPUT SC, V9032, P308, DOI 10.1007/978-3-662-46669-8_13
   Alglave Jade, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P50, DOI 10.1007/978-3-642-22110-1_6
   Alglave J, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/2994593
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   [Anonymous], 1990, P ISCA, DOI DOI 10.1145/325164.325100
   Atig MF, 2012, LECT NOTES COMPUT SC, V7211, P26, DOI 10.1007/978-3-642-28869-2_2
   Atig MF, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P7, DOI 10.1145/1706299.1706303
   Bahmann Helge, 2012, ATOMIC USAGE EXAMPLE
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Beillahi SM, 2019, LECT NOTES COMPUT SC, V11562, P286, DOI 10.1007/978-3-030-25543-5_17
   Beillahi Sidi Mohamed, 2019, LIPICS, V140, DOI [10.4230/LIPIcs.CONCUR.2019.30, DOI 10.4230/LIPICS.CONCUR.2019.30]
   Bernardi G., 27th International Conference on Concurrency Theory, CONCUR 2016, August 23-26, 2016, Quebec City, Canada, 2016, p7:1, DOI DOI 10.4230/LIPICS.CONCUR.2016.7
   Boehm H, 2012, P 2012 ACM SIGPLAN W, P12, DOI [10.1145/2247684.2247688, DOI 10.1145/2247684.2247688]
   Boehm H.-J., 2014, MSPC, p7:1, DOI DOI 10.1145/2618128.2618134
   Boehm Hans-J, 2018, P0982R1
   Bouajjani A, 2018, LECT NOTES COMPUT SC, V10982, P336, DOI 10.1007/978-3-319-96142-2_21
   Bouajjani A, 2013, LECT NOTES COMPUT SC, V7792, P533, DOI 10.1007/978-3-642-37036-6_29
   Bouajjani A, 2011, LECT NOTES COMPUT SC, V6756, P428, DOI 10.1007/978-3-642-22012-8_34
   Brutschy L, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P90, DOI 10.1145/3192366.3192415
   Burckhardt S, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P12, DOI 10.1145/1250734.1250737
   Burckhardt S, 2008, LECT NOTES COMPUT SC, V5123, P107
   Burnim J, 2011, LECT NOTES COMPUT SC, V6605, P11, DOI 10.1007/978-3-642-19835-9_3
   Chase David, 2005, P 17 ANN ACM S PAR A, P21, DOI DOI 10.1145/1073970.1073974
   Dalvandi Sadegh, 2020, ECOOP, V166, DOI [DOI 10.4230/LIPICS.ECOOP.2020, 10.4230/LIPIcs.ECOOP.2020.]
   Dang HH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371102
   Derevenetc E, 2014, LECT NOTES COMPUT SC, V8573, P158
   Derevenetc Egor, 2015, THESIS U KAISERSLAUT
   Doherty S, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P355, DOI 10.1145/3293883.3295702
   Doko M, 2017, LECT NOTES COMPUT SC, V10201, P448, DOI 10.1007/978-3-662-54434-1_17
   Fekete A, 2005, ACM T DATABASE SYST, V30, P492, DOI 10.1145/1071610.1071615
   Flur S, 2016, ACM SIGPLAN NOTICES, V51, P608, DOI 10.1145/2914770.2837615
   GHARACHORLOO K, 1992, J PARALLEL DISTR COM, V15, P399, DOI 10.1016/0743-7315(92)90052-O
   Gotsman A, 2012, LECT NOTES COMPUT SC, V7611, P31, DOI 10.1007/978-3-642-33651-5_3
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Kang Jeehoon, 2018, DEQUE PROOF
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Kozen D., 1977, 18th Annual Symposium on Foundations of Computer Science, P254, DOI 10.1109/SFCS.1977.16
   Lahav O, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P126, DOI 10.1145/3314221.3314604
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Linden Alexander, 2011, Model Checking Software. Proceedings 18th International SPIN Workshop, P144, DOI 10.1007/978-3-642-22306-8_10
   Linden A, 2013, LECT NOTES COMPUT SC, V7795, P339, DOI 10.1007/978-3-642-36742-7_24
   Liu F, 2012, ACM SIGPLAN NOTICES, V47, P429, DOI 10.1145/2345156.2254115
   Margalit Roy, 2020, VERIFYING OBSERVATIO
   Nagar K., 29th International Conference on Concurrency Theory, CONCUR 2018, September 4-7, 2018, Beijing, China, 2018, p41:1, DOI [DOI 10.4230/LIPICS.CONCUR.2018.41, 10.4230/LIPIcs.CONCUR. 2018.41]
   Owens S, 2010, LECT NOTES COMPUT SC, V6183, P478, DOI 10.1007/978-3-642-14107-2_23
   Podkopaev A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290382
   Sinclair MD, 2017, 44TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA 2017), P161, DOI [10.1145/3079856.3080206, 10.1145/3140659.3080206]
   Vafeiadis V, 2013, ACM SIGPLAN NOTICES, V48, P867, DOI [10.1145/2544173.2509532, 10.1145/2509136.2509532]
   Vjukov Dmitriy, 2008, C ATOMICS MEMORY ORD
   Vjukov Dmitriy, 2013, RELACY RACE DETECTOR
   Williams Anthony, 2008, PETERSONS LOCK C 0X
   Williams Anthony, 2010, IMPLEMENTING DEKKERS
NR 54
TC 9
Z9 9
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 5
DI 10.1145/3434285
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100004
OA gold
DA 2024-07-18
ER

PT J
AU Rosemann, J
   Moll, S
   Hack, S
AF Rosemann, Julian
   Moll, Simon
   Hack, Sebastian
TI An Abstract Interpretation for SPMD Divergence on Reducible Control Flow
   Graphs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Divergence Analysis; Vectorization; Binding Time; Hyper-Property;
   Dependence; Non-Interference; Abstract Interpretation
AB Vectorizing compilers employ divergence analysis to detect at which program point a specific variable is uniform, i.e. has the same value on all SPMD threads that execute this program point. They exploit uniformity to retain branching to counter branch divergence and defer computations to scalar processor units. Divergence is a hyper-property and is closely related to non-interference and binding time. There exist several divergence, binding time, and non-interference analyses already but they either sacrifice precision or make significant restrictions to the syntactical structure of the program in order to achieve soundness.
   In this paper, we present the first abstract interpretation for uniformity that is general enough to be applicable to reducible CFGs and, at the same time, more precise than other analyses that achieve at least the same generality.
   Our analysis comes with a correctness proof that is to a large part mechanized in Coq. Our experimental evaluation shows that the compile time and the precision of our analysis is on par with LLVM's default divergence analysis that is only sound on more restricted CFGs. At the same time, our analysis is faster and achieves better precision than a state-of-the-art non-interference analysis that is sound and at least as general as our analysis.
C1 [Rosemann, Julian; Hack, Sebastian] Saarland Univ, Saarland Informat Campus, Comp Sci, Campus E1 3, D-66123 Saarbrucken, Germany.
   [Moll, Simon] NEC Deutschland, Stuttgart, Germany.
C3 Saarland University
RP Rosemann, J (corresponding author), Saarland Univ, Saarland Informat Campus, Comp Sci, Campus E1 3, D-66123 Saarbrucken, Germany.
FU German federal ministry of research; NEC
FX This work has been supported by the German federal ministry of research
   and by NEC.
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Aiken A., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P342, DOI 10.1145/268946.268974
   Alur R, 2017, LECT NOTES COMPUT SC, V10426, P507, DOI 10.1007/978-3-319-63387-9_25
   Amtoft T, 2008, INFORM PROCESS LETT, V106, P45, DOI 10.1016/j.ipl.2007.10.002
   Assaf M, 2017, ACM SIGPLAN NOTICES, V52, P874, DOI 10.1145/3093333.3009889
   Auslander J, 1996, ACM SIGPLAN NOTICES, V31, P149, DOI 10.1145/249069.231409
   BALLANCE RA, 1990, SIGPLAN NOTICES, V25, P257, DOI 10.1145/93548.93578
   Barthe G, 2011, LECT NOTES COMPUT SC, V6888, P102
   Bucciarelli David, 2020, LUXMARK V31
   Chandrasekhar A, 2019, INT SYM CODE GENER, P254, DOI [10.1109/cgo.2019.8661189, 10.1109/CGO.2019.8661189]
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   Collange S., 2011, Identifying scalar behavior in CUDA kernels
   CONSEL C, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P264, DOI 10.1145/91556.91668
   Cooper Keith D, 2001, TR0633870 RIC U
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2019, LECT NOTES COMPUT SC, V11822, P389, DOI 10.1007/978-3-030-32304-2_19
   Coutinho B., 2011, Proceedings 2011 International Conference on Parallel Architectures and Compilation Techniques (PACT), P320, DOI 10.1109/PACT.2011.63
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   CYTRON R, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P25, DOI 10.1145/75277.75280
   Farrell CA, 1996, THEOR COMPUT SCI, V169, P39, DOI 10.1016/S0304-3975(96)00113-2
   Habermaier A, 2012, LECT NOTES COMPUT SC, V7211, P316, DOI 10.1007/978-3-642-28869-2_16
   Havlak P., 1993, P 6 INT WORKSHOP LAN, V768, P477
   HECHT MS, 1974, J ACM, V21, P367, DOI 10.1145/321832.321835
   Jääskeläinen P, 2015, INT J PARALLEL PROG, V43, P752, DOI 10.1007/s10766-014-0320-y
   Jones N. D., 1989, LISP SYMBOLIC COMPUT, V2, P9, DOI 10.1007/BF01806312
   Juckeland G, 2015, LECT NOTES COMPUT SC, V8966, P46, DOI 10.1007/978-3-319-17248-4_3
   Karrenberg R., 2015, AUTOMATIC SIMD VECTO, DOI DOI 10.1007/978-3-658-10113-8
   Kovacs Mate., 2013, 2013 ACM SIGSAC Conference on Computer and Communications Security, CCS'13, Berlin, Germany, November 4-8, 2013, P211, DOI [DOI 10.1145/2508859.2516721, 10.1145/2508859.2516721]
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lattner Christian, 2004, LOOP OPTIMIZER NOTES
   Lee YI, 2013, CYBER SECURITY CULTURE: COUNTERACTING CYBER THREATS THROUGH ORGANIZATIONAL LEARNING AND TRAINING, P1
   LeiSSa R., 2014, Proceedings of the 2014 Workshop on Programming models for SIMD/Vector processing, P17, DOI DOI 10.1145/2568058.2568062
   Liang Y, 2016, IEEE T COMPUT AID D, V35, P1165, DOI 10.1109/TCAD.2015.2501303
   Lindholm E, 2008, IEEE MICRO, V28, P39, DOI 10.1109/MM.2008.31
   Lloyd T., 2019, GPUCheck: detecting CUDA thread divergence with static analysis
   Menz Jan Christian, 2016, THESIS U SAARLANDES
   Moll S, 2018, ACM SIGPLAN NOTICES, V53, P560, DOI 10.1145/3192366.3192413
   Nielson F., 1999, Principles of Program Analysis
   NIELSON HR, 1988, SCI COMPUT PROGRAM, V10, P139, DOI 10.1016/0167-6423(88)90025-1
   *NVIDIA, 2017, V100 GPU ARCH
   Pérard-Gayot A, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3306346.3322955
   Pharr Matt., 2012, INNOVATIVE PARALLEL, P1
   Pop Sebastian, 2009, OUT SSA DENOTATIONAL
   Reiche O, 2017, ACM SIGPLAN NOTICES, V52, P21, DOI [10.1145/3140582.3081039, 10.1145/3078633.3081039]
   Sampaio D, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2523815
   Schneider Sigurd, 2018, THESIS SAARLAND U SA
   Schrijver A., 2017, COURSE COMBINATORIAL
   Snelting G, 2006, ACM T SOFTW ENG METH, V15, P410, DOI 10.1145/1178625.1178628
   Sun YF, 2016, I S WORKL CHAR PROC, P13, DOI 10.1109/IISWC.2016.7581262
   Tholey T, 2012, THEOR COMPUT SCI, V465, P35, DOI 10.1016/j.tcs.2012.09.025
   Tramm JR, 2015, LECT NOTES COMPUT SC, V8759, P39, DOI 10.1007/978-3-319-15976-8_3
   Tramm John R, PHYSOR 2014 THE ROLE
   TU P, 1995, SIGPLAN NOTICES, V30, P47, DOI 10.1145/223428.207115
   Urban Caterina, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P683, DOI 10.1007/978-3-319-89884-1_24
   Wasserrab Daniel., 2009, Proceedings of the 2009 Workshop on Programming Languages and Analysis for Security, PLAS 2009, Dublin, Ireland, 15-21 June, 2009, P31, DOI DOI 10.1145/1554339.1554345
NR 56
TC 2
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 31
DI 10.1145/3434312
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100031
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Silver, L
   Zdancewic, S
AF Silver, Lucas
   Zdancewic, Steve
TI Dijkstra Monads Forever: Termination-Sensitive Specifications for
   Interaction Trees
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE coinduction; specification; verification; monads; Hoare logic
ID VERIFICATION; PROGRAMS
AB This paper extends the Dijkstra monad framework, designed for writing specifications over effectful programs using monadic effects, to handle termination sensitive specifications over interactive programs. We achieve this by introducing base specification monads for non-terminating programs with uninterpreted events. We model such programs using interaction trees, a coinductive datatype for representing programs with algebraic effects in Coq, which we further develop by adding trace semantics. We show that this approach subsumes typical, simple proof principles. The framework is implemented as an extension of the Interaction Trees Coq library.
C1 [Silver, Lucas; Zdancewic, Steve] Univ Penn, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Silver, L (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM lucsil@seas.upenn.edu; stevez@cis.upenn.edu
RI Zdancewic, Steve/JXL-6845-2024
FU National Science Foundation [1521539]; ONR grant REVOLVER
   [N00014-17-1-2930]
FX This work was funded by the National Science Foundation's Expedition in
   Computing The Science of Deep Specification under the award 1521539
   (Weirich, Zdancewic, Pierce) with additional support by ONR grant
   REVOLVER award N00014-17-1-2930. We are grateful to all the members of
   Penn's PL Club and the DeepSpec project for their collaboration and
   feedback, and we greatly appreciate the the reviewers' comments and
   suggestions.
CR [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   Appel Andrew W, 2014, PROGRAM LOGICS CERTI, DOI DOI 10.1017/CBO9781107256552
   Capretta V, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:1)2005
   Carbonneaux Q, 2017, LECT NOTES COMPUT SC, V10427, P64, DOI 10.1007/978-3-319-63390-9_4
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Gu RH, 2019, COMMUN ACM, V62, P89, DOI 10.1145/3356903
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hur CK, 2013, ACM SIGPLAN NOTICES, V48, P193, DOI 10.1145/2480359.2429093
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Lampropoulos Leonidas, 2018, ELECT TXB
   Letan T, 2018, LECT NOTES COMPUT SC, V10951, P338, DOI 10.1007/978-3-319-95582-7_20
   Maillard K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341708
   Malecha G, 2011, J SYMB COMPUT, V46, P95, DOI 10.1016/j.jsc.2010.08.004
   McBride C, 2015, LECT NOTES COMPUT SC, V9129, P257, DOI 10.1007/978-3-319-19797-5_13
   Nanevski A, 2006, ACM SIGPLAN NOTICES, V41, P62, DOI 10.1145/1160074.1159812
   Norell Ulf, 2007, PRACTICAL PROGRAMMIN
   Pierce Benjamin C., 2018, Electronic textbook
   Protzenko J, 2020, P IEEE S SECUR PRIV, P983, DOI 10.1109/SP40000.2020.00114
   Sergey I, 2015, ACM SIGPLAN NOTICES, V50, P77, DOI [10.1145/2813885.2737964, 10.1145/2737924.2737964]
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   Swamy N, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P266
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Xia Li-yao, 2020, P ACM PROGRAMMING LA
NR 25
TC 6
Z9 9
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 26
DI 10.1145/3434307
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100026
OA gold
DA 2024-07-18
ER

PT J
AU Bartell, S
   Dietz, W
   Adve, VS
AF Bartell, Sean
   Dietz, Will
   Adve, Vikram S.
TI Guided Linking: Dynamic Linking without the Costs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Code Deduplication; Link-Time Optimization; Dynamic Linking; Shared
   Libraries; Plugins; LTO; LLVM; IR
AB Dynamic linking is extremely common in modern software systems, thanks to the flexibility and space savings it offers. However, this flexibility comes at a cost: it's impossible to perform interprocedural optimizations that involve calls to a dynamic library. The basic problem is that the run-time behavior of the dynamic linker can't be predicted at compile time, so the compiler can make no assumptions about how such calls will behave.
   This paper introduces guided linking, a technique for optimizing dynamically linked software when some information about the dynamic linker's behavior is known in advance. The developer provides an arbitrary set of programs, libraries, and plugins to our tool, along with constraints that limit the possible dynamic linking behavior of the software. By taking advantage of the constraints, our tool enables any existing optimization to be applied across dynamic linking boundaries. For example, the NoOverride constraint can be applied to a function when the developer knows it will never be overridden with a different definition at run time; guided linking then enables the function to be inlined into its callers in other libraries. We also introduce a novel code size optimization that deduplicates identical functions even across different parts of the software set.
   By applying guided linking to the Python interpreter and its dynamically loaded modules, supplying the constraint that no other programs or modules will be used, we increase speed by an average of 9%. By applying guided linking to a dynamically linked distribution of Clang and LLVM, and using the constraint that no other software will use the LLVM libraries, we can increase speed by 5% and reduce file size by 13%. If we relax the constraint to allow other software to use the LLVM libraries, we can still increase speed by 5% and reduce file size by 5%. If we use guided linking to combine 11 different versions of the Boost library, using minimal constraints, we can reduce the total library size by 57%.
C1 [Bartell, Sean; Dietz, Will; Adve, Vikram S.] Univ Illinois, Champaign, IL 61820 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign
RP Bartell, S (corresponding author), Univ Illinois, Champaign, IL 61820 USA.
EM smbarte2@illinois.edu; wdietz2@illinois.edu; vadve@illinois.edu
OI Bartell, Sean/0000-0003-0035-6456
FU National Science Foundation [1564274]; Office of Naval Research
   [N00014-17-1-2996]; Direct For Computer & Info Scie & Enginr; Division
   Of Computer and Network Systems [1564274] Funding Source: National
   Science Foundation
FX This material is based upon work supported by the National Science
   Foundation under Grant No. 1564274, and by the Office of Naval Research
   under Grant No. N00014-17-1-2996. We thank Hashim Sharif, Abdul Rafae
   Noor, Sibin Mohan, and the anonymous reviewers for their feedback.
CR Agadakos I, 2019, 35TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSA), P70, DOI 10.1145/3359789.3359823
   Agrawal V, 2015, ACM SIGPLAN NOTICES, V50, P691, DOI [10.1145/2775054.2694392, 10.1145/2694344.2694392]
   [Anonymous], 2009, P LINUX S, P19
   Auslander Marc, 1982, P 1982 SIGPLAN S COM, P22, DOI [10.1145/872726.806977, DOI 10.1145/872726.806977]
   Churchill B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1027, DOI 10.1145/3314221.3314596
   Collberg C, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK: 2005 UNENIX ANNUAL TECHNICAL CONFERENCE, P309
   COOPER KD, 1986, ACM T PROGR LANG SYS, V8, P491, DOI 10.1145/6465.6489
   Cooper KD, 1999, ACM SIGPLAN NOTICES, V34, P139, DOI 10.1145/301631.301655
   Dahiya M, 2017, LECT NOTES COMPUT SC, V10695, P127, DOI 10.1007/978-3-319-71237-6_7
   Davidsson N, 2019, LECT NOTES COMPUT SC, V11736, P88, DOI 10.1007/978-3-030-29962-0_5
   De Sutter B, 2005, ACM T PROGR LANG SYS, V27, P882, DOI 10.1145/1086642.1086645
   De Sutter B, 2001, ACM SIGPLAN NOTICES, V36, P29, DOI 10.1145/384196.384204
   Debray SK, 2000, ACM T PROGR LANG SYS, V22, P378, DOI 10.1145/349214.349233
   Dietz W, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276524
   Drepper U., 2011, WRITE SHARED LIB
   FRASER CW, 1984, SIGPLAN NOTICES, V19, P117, DOI 10.1145/502949.502886
   IBM Corporation, 2018, COD OPT IBM XL COMP
   Intel Corporation, 2020, INTEL C COMP 19 1 DE
   Jelinek Jakub, 2004, PRELINK TECHNICAL RE
   Jung C., 2007, P 7 ACM AMP IEEE INT, P213, DOI DOI 10.1145/1289927.1289961
   Kell S, 2016, ACM SIGPLAN NOTICES, V51, P607, DOI 10.1145/3022671.2983996
   Komondoor R, 2001, LECT NOTES COMPUT SC, V2126, P40
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Levine, 1999, Linkers and Loaders, V4, P149
   Linux man-pages project 2020, LIN PROGR MAN ID SO
   Malecha G, 2015, 30TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, VOLS I AND II, P1504, DOI 10.1145/2695664.2695751
   Mulliner C., 2015, BLACK HAT US
   Nelson Michael N., 1993, P USENIX SUMM 1993 T
   ORR DB, 1993, PROCEEDINGS OF THE SUMMER 1993 USENIX CONFERENCE, P237
   Python Software Foundation, 2020, PYTH PERF BENCHM SUI
   Python Software Foundation, 2020, PYTH PYP MOD
   Reznic V., 2016, STATIFIER
   Reznic V., 2018, ERMINE LINUX PORTABL
   Rocha RCO, 2019, INT SYM CODE GENER, P149, DOI [10.6084/m9.figshare.7473260, 10.1109/CGO.2019.8661174]
   scut, 2003, RED
   Sharif H, 2018, IEEE INT CONF AUTOM, P329, DOI 10.1145/3238147.3238160
   Srivastava Amitabh, 1992, 926 ERL
   Standish Thomas A., 1976, P 1976 ANN C ACM 76, P509, DOI [10.1145/800191.805652, DOI 10.1145/800191.805652]
   von Koch TJKE, 2014, ACM SIGPLAN NOTICES, V49, P85, DOI 10.1145/2597809.2597811
   Waldspurger CA, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE FIFTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P181, DOI 10.1145/1060289.1060307
   Ziegler A, 2019, ACM T EMBED COMPUT S, V18, DOI 10.1145/3358222
NR 41
TC 0
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 145
DI 10.1145/3428213
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900022
OA gold
DA 2024-07-18
ER

PT J
AU Griesemer, R
   Hu, R
   Kokke, W
   Lange, J
   Taylor, IL
   Toninho, B
   Wadler, P
   Yoshida, N
AF Griesemer, Robert
   Hu, Raymond
   Kokke, Wen
   Lange, Julien
   Taylor, Ian Lance
   Toninho, Bernardo
   Wadler, Philip
   Yoshida, Nobuko
TI Featherweight Go
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Go; Generics; Monornorphisation
AB We describe a design for generics in Go inspired by previous work on Featherweight Java by Igarashi, Pierce, and Wadler. Whereas subtyping in Java is nominal, in Go it is structural, and whereas generics in Java are defined via erasure, in Go we use monomorphisation. Although monomorphisation is widely used, we are one of the first to formalise it. Our design also supports a solution to The Expression Problem.
C1 [Griesemer, Robert; Taylor, Ian Lance] Google, Mountain View, CA 94043 USA.
   [Hu, Raymond] Univ Hertfordshire, Sch Engn & Comp Sci, Hatfield, Herts, England.
   [Kokke, Wen] Univ Edinburgh, Lab Fdn Comp Sci, Edinburgh, Midlothian, Scotland.
   [Lange, Julien] Royal Holloway Univ London, Dept Comp Sci, Egham, Surrey, England.
   [Toninho, Bernardo] Univ Nova Lisboa, FCT NOVA, NOVA LINCS, Dept Informat, Lisbon, Portugal.
   [Wadler, Philip] Univ Edinburgh, Sch Informat, Edinburgh, Midlothian, Scotland.
   [Yoshida, Nobuko] Imperial Coll London, Comp, London, England.
C3 Google Incorporated; University of Hertfordshire; University of
   Edinburgh; University of London; Royal Holloway University London;
   Universidade Nova de Lisboa; University of Edinburgh; Imperial College
   London
RP Griesemer, R (corresponding author), Google, Mountain View, CA 94043 USA.
EM r.z.h.hu@herts.ac.uk; wen.kokke@ed.ac.uk; julien.lange@rhul.ac.uk;
   btoninho@fct.unl.pt; wadler@infed.ac.uk; n.yoshida@imperial.ac.uk
RI Toninho, Bernardo/IUB-1256-2023; gray, robert/HJB-2567-2022; Yoshida,
   Nobuko/AAL-6082-2020
OI Toninho, Bernardo/0000-0002-0746-7514; Yoshida,
   Nobuko/0000-0002-3925-8557; Hu, Raymond/0000-0003-4361-6772; Lange,
   Julien/0000-0001-9697-1378
FU EPSRC [EP/K034413/1, EP/T006544/1, EP/K011715/1, EP/L00058X/1,
   EP/N027833/1, EP/N028201/1, EP/T014709/1, EP/V000462/1]; NCSS/EPSRC
   VeTSS; NOVA LINCS [UIDB/04516/2020]; FCT-Fundacao para a Ciencia e a
   Tecnologia; EU MSCA-RISE BehAPI [778233]; EPSRC [EP/N027833/1,
   EP/K011715/1, EP/K034413/1, EP/T006544/1] Funding Source: UKRI
FX We thank Nicholas Ng, Sam Lindley, and our referees for comments and
   suggestions. This work was funded under EPSRC EP/K034413/1,
   EP/T006544/1, EP/K011715/1, EP/L00058X/1, EP/N027833/1, EP/N028201/1,
   EP/T006544/1, EP/T014709/1 and EP/V000462/1, NCSS/EPSRC VeTSS, NOVA
   LINCS (UIDB/04516/2020) with the financial support of FCT-Fundacao para
   a Ciencia e a Tecnologia, and EU MSCA-RISE BehAPI (ID:778233).
CR Amin N, 2016, ACM SIGPLAN NOTICES, V51, P838, DOI 10.1145/3022671.2984004
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Benton Nick., 1998, P 3 ACM SIGPLAN INT, P129, DOI [10.1145/289423.289435, DOI 10.1145/289423.289435]
   Blanchette JC, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(4:13)2016
   Bobot F, 2011, LECT NOTES ARTIF INT, V6989, P87, DOI 10.1007/978-3-642-24364-6_7
   Bracha G, 1998, ACM SIGPLAN NOTICES, V33, P183, DOI 10.1145/286942.286957
   Canning Peter, 1989, C FUNCT PROGR LANG C, P273, DOI [10.1145/99370.99392, DOI 10.1145/99370.99392]
   Cejtin H, 2000, LECT NOTES COMPUT SC, V1782, P56
   Claessen K, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000143
   COOK WR, 1991, LECT NOTES COMPUT SC, V489, P151
   Crary Karl, 1998, SIGPLAN NOTICES
   Drossopoulou S, 1997, LECT NOTES COMPUT SC, V1241, P389, DOI 10.1007/BFb0053388
   Duregard J., 2016, THESIS
   Fluet Matthew, 2015, MLTON MONOMORPHISE
   Greenman B, 2014, ACM SIGPLAN NOTICES, V49, P89, DOI [10.1145/2594291.2594308, 10.1145/2666356.2594308]
   Griesemer R., 2009, HEY HO LETS GO
   Griesemer R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428217
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Igarashi A, 1999, ACM SIGPLAN NOTICES, V34, P132, DOI 10.1145/320385.320395
   Jones M. P., 1995, LISP and Symbolic Computation, V8, P229, DOI 10.1007/BF01019005
   KENNEDY WJ, 2001, P 2001 ACM SIGPLAN C, P1, DOI DOI 10.1145/378795.378797
   Krishnamurthi S., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P91, DOI 10.1007/BFb0054088
   Leroy X., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P177, DOI 10.1145/143165.143205
   Naftalin M., 2006, JAVA GENERICS COLLEC
   NIPKOW T, 1998, P 25 ACM S PRINC PRO, P161, DOI DOI 10.1145/268946.268960
   Pierce B. C., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P305, DOI 10.1145/143165.143228
   Reynolds John C., 1994, THEORETICAL ASPECTS, P13
   Runciman C., P 1 ACM SIGPLAN S HA, DOI [DOI 10.1145/1411286.1411292, 10.1145/1411286.1411292.]
   Siek J, 2006, LECT NOTES COMPUT SC, V4067, P304
   Stroustrup Bjarne, 2013, The C++ programming language
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Syme D., 1999, Formal Syntax and Semantics of Java, P83, DOI DOI 10.1007/3-540-48737-9
   Tanaka Akira, 2018, J INFORM PROCESSING, V26, p54s72, DOI DOI 10.2197/IPSJJIP.26.54
   Taylor Ian Lance, 2019, CONTRACTS DRAFT DESI
   Taylor Ian Lance, 2020, TYPE PARAMETERS DRAF
   The Go Team, 2020, GO PROGR LANG SPEC
   The Rust Team, 2017, RUST PROGR LANG
   Tolmach A., 1998, Journal of Functional Programming, V8, P367, DOI 10.1017/S0956796898003086
   Torgersen M, 2004, LECT NOTES COMPUT SC, V3086, P123
   Turon Aaron., 2015, Abstraction without overhead: Traits in rust
   Viroli M, 2000, ACM SIGPLAN NOTICES, V35, P146, DOI 10.1145/354222.353182
   Wadler P., 1998, EXPRESSION PROBLEM P
   Yu DC, 2004, ACM SIGPLAN NOTICES, V39, P39, DOI 10.1145/982962.964005
   Zenger Matthias, 2004, TECHNICAL REPORT
NR 44
TC 5
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 149
DI 10.1145/3428217
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900026
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Pacak, A
   Erdweg, S
   Szabó, T
AF Pacak, Andre
   Erdweg, Sebastian
   Szabo, Tamas
TI A Systematic Approach to Deriving Incremental Type Checkers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE incremental type checking; datalog; type system transformation
AB Static typing can guide programmers if feedback is immediate. Therefore, all major IDEs incrementalize type checking in some way. However, prior approaches to incremental type checking are often specialized and hard to transfer to new type systems. In this paper, we propose a systematic approach for deriving incremental type checkers from textbook-style type system specifications. Our approach is based on compiling inference rules to Datalog, a carefully limited logic programming language for which incremental solvers exist. The key contribution of this paper is to discover an encoding of the infinite typing relation as a finite Datalog relation in a way that yields efficient incremental updates. We implemented the compiler as part of a type system DSL and show that it supports simple types, some local type inference, operator overloading, universal types, and iso-recursive types.
C1 [Pacak, Andre; Erdweg, Sebastian] JGU Mainz, Mainz, Germany.
   [Szabo, Tamas] JGU Mainz, Itemis, Mainz, Germany.
C3 Johannes Gutenberg University of Mainz; Johannes Gutenberg University of
   Mainz
RP Pacak, A (corresponding author), JGU Mainz, Mainz, Germany.
CR Alvarez-Picallo M, 2019, LECT NOTES COMPUT SC, V11423, P525, DOI 10.1007/978-3-030-17184-1_19
   Arntzenius M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371090
   ATTALI I, 1992, LECT NOTES COMPUT SC, V631, P87, DOI 10.1007/3-540-55844-6_129
   BEERI C, 1991, J LOGIC PROGRAM, V10, P255, DOI 10.1016/0743-1066(91)90038-Q
   Busi M, 2019, LECT NOTES COMPUT SC, V11460, P106, DOI 10.1007/978-3-030-20652-9_7
   DESPEYROUX T, 1984, LECT NOTES COMPUT SC, V173, P215
   Erdweg S, 2015, ACM SIGPLAN NOTICES, V50, P880, DOI [10.1145/2814270.2814277, 10.1145/2858965.2814277]
   Farka F, 2018, THEOR PRACT LOG PROG, V18, P484, DOI 10.1017/S1471068418000212
   Franceschini L, 2017, ELECTRON P THEOR COM, P19, DOI 10.4204/EPTCS.258.2
   Grewe S., 2015, 2015 ACM INT S NEW I, P137
   Harper R, 2016, Practical Foundations for Programming Languages
   Kuci Edlira, 2017, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V18, P1
   Lambert G. L. T., 1983, C REC 10 ANN ACM S P, P265, DOI [10.1145/567067.567092, DOI 10.1145/567067.567092]
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Ramakrishnan Raghu, 1987, P 6 ACM SIGACT SIGMO, DOI [10.1145/28659.28694, DOI 10.1145/28659.28694]
   Ryzhyk Leonid, 2019, Datalog
   Smaragdakis Yannis, 2010, Datalog Reloaded. First International Workshop, Datalog 2010. Revised Selected Papers, P245, DOI 10.1007/978-3-642-24206-9_14
   Szabó T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276509
   Szabó T, 2018, COMPANION PROCEEDINGS FOR THE ISSTA/ECOOP 2018 WORKSHOPS, P27, DOI 10.1145/3236454.3236485
   Szabó T, 2016, IEEE INT CONF AUTOM, P320, DOI 10.1145/2970276.2970298
   Ujhelyi Z, 2015, SCI COMPUT PROGRAM, V98, P80, DOI 10.1016/j.scico.2014.01.004
   Wachsmuth Guido, 2013, P LECT NOTES COMPUTE, V8225, DOI [10.1007/978-3-319-02654- 1_15, DOI 10.1007/978-3-319-02654-1_15]
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Watt A., 2018, DATABASE DESIGN
NR 24
TC 9
Z9 10
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 127
DI 10.1145/3428195
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900004
OA gold
DA 2024-07-18
ER

PT J
AU Rigger, M
   Su, ZD
AF Rigger, Manuel
   Su, Zhendong
TI Finding Bugs in Database Systems via Query Partitioning
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE database testing; DBMS testing; test oracle; three-valued logic
ID VALIDATION
AB Logic bugs in Database Management Systems (DBMSs) are bugs that cause an incorrect result for a given query, for example, by omitting a row that should be fetched. These bugs are critical, since they are likely to go unnoticed by users. We propose Query Partitioning, a general and effective approach for finding logic bugs in DBMSs. The core idea of Query Partitioning is to, starting from a given original query, derive multiple, more complex queries (called partitioning queries), each of which computes a partition of the result. The individual partitions are then composed to compute a result set that must be equivalent to the original query's result set. A bug in the DBMS is detected when these result sets differ. Our intuition is that due to the increased complexity, the partitioning queries are more likely to stress the DBMS and trigger a logic bug than the original query. As a concrete instance of a partitioning strategy, we propose Ternary Logic Partitioning (TLP), which is based on the observation that a boolean predicate p can either evaluate to TRUE, FALSE, or NULL. Accordingly, a query can be decomposed into three partitioning queries, each of which computes its result on rows or intermediate results for which p, NOT p, and p IS NULL hold. This technique is versatile, and can be used to test WHERE, GROUP BY, as well as HAVING clauses, aggregate functions, and DISTINCT queries. As part of an extensive testing campaign, we found 175 bugs in widely-used DBMSs such as MySQL, TiDB, SQLite, and CockroachDB, 125 of which have been fixed. Notably, 77 of these were logic bugs, while the remaining were error and crash bugs. We expect that the effectiveness and wide applicability of Query Partitioning will lead to its broad adoption in practice, and the formulation of additional partitioning strategies.
C1 [Rigger, Manuel; Su, Zhendong] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich
RP Rigger, M (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
EM manuel.rigger@inf.ethz.ch; zhendong.su@inf.ethz.ch
CR [Anonymous], 2004, INT C VERY LARGE DAT
   [Anonymous], 2007, P INT C DAT ENG, DOI DOI 10.1109/ICDE.2007.367896
   Astrahan M. M., 1976, ACM Transactions on Database Systems, V1, P97, DOI 10.1145/320455.320457
   Bati H., 2007, P 33 INT C VER LARG, P1243
   Binnig Carsten, 2007, P ACM SIGMOD INT C M, P341, DOI DOI 10.1145/1247480.1247520
   Brummayer R., 2009, Proceedings of the 7th International Workshop on Satisfiability Modulo Theories, P1, DOI [10.1145/1670412.1670413, DOI 10.1145/1670412.1670413]
   Bruno N, 2006, IEEE T KNOWL DATA EN, V18, P1721, DOI 10.1109/TKDE.2006.190
   Bruno Nicolas, 2005, P 31 INT C VERY LARG, P1097
   Chaudhuri S., 1998, Proceedings of the Seventeenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems. PODS 1998, P34, DOI 10.1145/275487.275492
   Chen T.Y., 1998, Metamorphic testing: a new approach for generating next test cases
   Chen TY, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3143561
   Chen Y, 2013, ACM SIGPLAN NOTICES, V48, P197, DOI 10.1145/2499370.2462173
   CODD EF, 1970, COMMUN ACM, V13, P377, DOI 10.1145/357980.358007
   Cohen Sara., 2006, SIGMOD 06, P49
   Dietz W, 2012, PROC INT CONF SOFTW, P760, DOI 10.1109/ICSE.2012.6227142
   Donaldson AF, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133917
   GRAEFE G, 1993, COMPUT SURV, V25, P73, DOI 10.1145/152610.152611
   Graefe G, 2010, FOUND TRENDS DATABAS, V3, P203, DOI 10.1561/1900000028
   Gray J., 1994, SIGMOD Record, V23, P243, DOI 10.1145/191843.191886
   Gu Zhongxian, 2012, P 5 INT WORKSH TEST
   Guagliardo P, 2017, PROC VLDB ENDOW, V11, P27, DOI 10.14778/3151113.3151116
   HAAS LM, 1989, SIGMOD REC, V18, P377, DOI 10.1145/66926.66962
   Houkjaer Kenneth, 2006, P 32 INT C VERY LARG, P1243
   Huang DX, 2020, PROC VLDB ENDOW, V13, P3072, DOI 10.14778/3415478.3415535
   Jesus P, 2015, IEEE COMMUN SURV TUT, V17, P381, DOI 10.1109/COMST.2014.2354398
   Jung JH, 2019, PROC VLDB ENDOW, V13, P57, DOI 10.14778/3357377.3357382
   Kapus T, 2017, IEEE INT CONF AUTOM, P590, DOI 10.1109/ASE.2017.8115669
   Khalek Shadi Abdul, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P238, DOI 10.1109/ASE.2008.34
   Khalek Shadi Abdul, 2010, Proceedings of the 25th IEEE/ACM International Conference on Automated Software Engineering, ASE'10, page, P329
   Lo E, 2010, VLDB J, V19, P203, DOI 10.1007/s00778-009-0157-y
   Marcozzi M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360581
   McKeeman William M., 1998, DIGIT TECH J, V10, P100
   Mishra C., 2008, SIGMOD, P499, DOI DOI 10.1145/1376616.1376668
   Neufeld A., 1993, P VLDB ENDOWMENT VLD, V2, P173
   Pavlo A, 2016, SIGMOD REC, V45, P45, DOI 10.1145/3003665.3003674
   Pinjia He, 2020, 2020 IEEE/ACM 42nd International Conference on Software Engineering (ICSE), P961, DOI 10.1145/3377811.3380339
   PostgreSQL, 2020, POSTGRESQL HOM
   Raasveldt Mark, 2020, CIDR
   Regehr J, 2012, ACM SIGPLAN NOTICES, V47, P335, DOI 10.1145/2345156.2254104
   Regehr John, 2010, GUIDE UNDEFINED BEHA
   Rigger M, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P667
   Rigger Manuel, P 2020 28 ACM JOINT
   Segura S, 2018, PROC IEEE ACM INT C, P538, DOI 10.1145/3183440.3183468
   Serebryany K., 2012, Dynamic race detection with the LLVM compiler, V7186, P110, DOI 10.1007/978-3-642-29860-8
   Slutz D., 1998, Proceedings of the Twenty-Fourth International Conference on Very-Large Databases, P618
   SQLite, 2020, SQLITE HOM
   Stepanov E, 2015, INT SYM CODE GENER, P46, DOI 10.1109/CGO.2015.7054186
   Taft Rebecca, 2020, SIGMOD '20: Proceedings of the 2020 ACM SIGMOD International Conference on Management of Data, P1493, DOI 10.1145/3318464.3386134
   Thost V, 2019, LECT NOTES COMPUT SC, V11503, P491, DOI 10.1007/978-3-030-21348-0_32
   Vartak M., 2010, Proceedings of the ACM SIGMOD International Conference on Management of Data, P1215, DOI [10.1145/1807167.1807323, DOI 10.1145/1807167.1807323]
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P216, DOI [10.1145/2666356.2594334, 10.1145/2594291.2594334]
   Winterer D, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P718, DOI 10.1145/3385412.3385985
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Yu YA, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P247
   Zhendong Su, 2020, OOPSLA 20 ARTIFACT F, DOI [10.5281/zenodo.4032401, DOI 10.5281/ZENODO.4032401]
   Zhong R, 2020, CCS '20: PROCEEDINGS OF THE 2020 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P955, DOI 10.1145/3372297.3417260
NR 56
TC 28
Z9 28
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 211
DI 10.1145/3428279
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900088
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Sprenger, C
   Klenze, T
   Eilers, M
   Wolf, FA
   Müller, P
   Clochard, M
   Basin, D
AF Sprenger, Christoph
   Klenze, Tobias
   Eilers, Marco
   Wolf, Felix A.
   Muller, Peter
   Clochard, Martin
   Basin, David
TI Igloo: Soundly Linking Compositional Refinement and Separation Logic for
   Distributed System Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE end-to-end verification; distributed systems; compositional refinement;
   higher-order logic; separation logic; tool interoperability; leader
   election; fault-tolerance; security protocols
AB Lighthouse projects like CompCert, seL4, IronFleet, and DeepSpec have demonstrated that full system verification is feasible by establishing a refinement between an abstract system specification and an executable implementation. Existing approaches however impose severe restrictions on the abstract system specifications due to their limited expressiveness or versatility, or on the executable code due to their use of suboptimal code extraction or inexpressive program logics. We propose a novel methodology that combines the compositional refinement of event-based models of distributed systems with the verification of full-fledged program code using expressive separation logics, which support features of realistic programming languages like heap data structures and concurrency. Our main technical contribution is a formal framework that soundly relates event-based system models to program specifications in separation logics. This enables protocol development tools to soundly interoperate with program verifiers to establish a refinement between the model and the code. We formalized our framework, Igloo, in Isabelle/HOL. We report on three case studies, a leader election protocol, a replication protocol, and a security protocol, for which we refine formal requirements into program specifications that we implement in Java and Python and prove correct using the VeriFast and Nagini tools.
C1 [Sprenger, Christoph; Klenze, Tobias; Eilers, Marco; Wolf, Felix A.; Muller, Peter; Clochard, Martin; Basin, David] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich
RP Sprenger, C (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
EM sprenger@inf.ethz.ch; tobias.klenze@inf.ethz.ch; eilers@inf.ethz.ch;
   felix.wolf@inf.ethz.ch; peter.mueller@inf.ethz.ch; clochard@inf.ethz.ch;
   basin@inf.ethz.ch
OI Sprenger, Christoph/0000-0003-2941-5165; Eilers,
   Marco/0000-0003-4891-6950; Wolf, Felix A./0000-0002-8573-2387; Klenze,
   Tobias/0000-0002-6505-3942
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Abrial J., 2010, Modeling in event-b-system and software engineering, DOI DOI 10.1017/CBO9781139195881
   [Anonymous], 2010, 9 INT S FORMAL METHO
   Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Bhargavan K., 2017, LIPIcs, DOI DOI 10.4230/LIPICS.SNAPL.2017.1
   Blanchette JC, 2017, LECT NOTES COMPUT SC, V10201, P111, DOI 10.1007/978-3-662-54434-1_5
   Cachin Christian., 2011, INTRO RELIABLE SECUR, DOI DOI 10.1007/978-3-642-15260-3
   Cao QX, 2018, J AUTOM REASONING, V61, P367, DOI 10.1007/s10817-018-9457-5
   CHANG E, 1979, COMMUN ACM, V22, P281, DOI 10.1145/359104.359108
   Clavel M., 2007, ALL MAUDE A HIGH PER, DOI DOI 10.1007/978-3-540-71999-1
   Cranen S, 2013, LECT NOTES COMPUT SC, V7795, P199, DOI 10.1007/978-3-642-36742-7_15
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DOLEV D, 1983, IEEE T INFORM THEORY, V29, P198, DOI 10.1109/TIT.1983.1056650
   Dragoi Cezara, 2016, POPL
   Eilers M, 2018, LECT NOTES COMPUT SC, V10981, P596, DOI 10.1007/978-3-319-96145-3_33
   Hawblitzel C., 2014, 11 USENIX S OPERATIN
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Hoare T, 2003, LECT NOTES COMPUT SC, V2789, P25
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Koh N, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P234, DOI 10.1145/3293880.3294106
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Lesani M, 2016, ACM SIGPLAN NOTICES, V51, P357, DOI 10.1145/2914770.2837622
   Liu S, 2020, LECT NOTES COMPUT SC, V12229, P22, DOI 10.1007/978-3-030-55754-6_2
   Lowe G, 1997, P IEEE CSFW, P31, DOI 10.1109/CSFW.1997.596782
   LYNCH N, 1995, INFORM COMPUT, V121, P214, DOI 10.1006/inco.1995.1134
   Mansky W, 2020, LECT NOTES COMPUT SC, V12075, P428, DOI 10.1007/978-3-030-44914-8_16
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Nipkow T., 2002, LECT NOTES COMPUTER, V2283, DOI [10.1007/3-540-45949-9, DOI 10.1007/3-540-45949-9]
   Oortwijn Wytse, 2019, LECT NOTES COMPUTER, V11918, DOI [10.1007/978-3-030-34968, DOI 10.1007/978-3-030-34968]
   Parkinson M, 2005, ACM SIGPLAN NOTICES, V40, P247, DOI 10.1145/1047659.1040326
   Penninckx W, 2015, LECT NOTES COMPUT SC, V9032, P158, DOI 10.1007/978-3-662-46669-8_7
   Perrig A., 2017, SCION: a secure Internet architecture, DOI [10.1007/978-3-319-67080-5, DOI 10.1007/978-3-319-67080-5]
   Pierce Benjamin C., 2016, COMP P 2016 ACM SIGP, V1, DOI [10.1145/2984043, DOI 10.1145/2984043]
   Piskac Ruzica, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P773, DOI 10.1007/978-3-642-39799-8_54
   Protzenko J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110261
   Rahli Vincent, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P619, DOI 10.1007/978-3-319-89884-1_22
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Rustan K, 2009, LECT NOTES COMPUT SC, V5502, P378, DOI 10.1007/978-3-642-00590-9_27
   Sergey I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158116
   Sprenger C, 2018, J COMPUT SECUR, V26, P71, DOI 10.3233/JCS-16814
   Sprenger Christoph, 2020, IGLOO SOUNDLY LINKIN, DOI [10.5281/zenodo.4039826, DOI 10.5281/ZENODO.4039826]
   Sprenger Christoph, 2020, ABS201004749 CORR
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   van Renesse R, 2010, LECT NOTES COMPUT SC, V5959, P19, DOI 10.1007/978-3-642-11294-2_2
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Zakowski Yannick, 2020, P ACM PROGRAM LANG, DOI DOI 10.1145/3371119
NR 49
TC 9
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 152
DI 10.1145/3428220
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900029
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Chen, XH
   Rosu, G
AF Chen, Xiaohong
   Rosu, Grigore
TI A General Approach to Define Binders using Matching Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE binders; matching logic; conservative extension; completeness
ID CALCULUS; ALGEBRAS
AB We propose a novel definition of binders using matching logic, where the binding behavior of object-level binders is directly inherited from the built-in there exists binder of matching logic. We show that the behavior of binders in various logical systems such as lambda-calculus, System F, pi-calculus, pure type systems, can be axiomatically defined in matching logic as notations and logical theories. We show the correctness of our definitions by proving conservative extension theorems, which state that a sequent/judgment is provable in the original system if and only if it is provable in matching logic, in the corresponding theory. Our matching logic definition of binders also yields models to all binders, which are deductively complete with respect to formal reasoning in the original systems. For lambda-calculus, we further show that the yielded models are representationally complete, a desired property that is not enjoyed by many existing lambda-calculus semantics. This work is part of a larger effort to develop a logical foundation for the programming language semantics framework K (http://kframework.org).
C1 [Chen, Xiaohong; Rosu, Grigore] Univ Illinois, 201 N Goodwin Ave, Urbana, IL 61801 USA.
   [Rosu, Grigore] Runtime Verificat Inc, 102 E Main St 500, Urbana, IL 61801 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign
RP Chen, XH (corresponding author), Univ Illinois, 201 N Goodwin Ave, Urbana, IL 61801 USA.
EM xc3@illinois.edu; grosu@illinois.edu
FU NSF [CNS 16-19275]; United States Air Force; DARPA [FA8750-18-C-0092]
FX We warmly thank the K Team for invaluable and continuous feedback on
   matching logic and its role as a foundation of K, as well as for their
   creative yet hard work on turning theoretical results into practical
   tools. We also warmly thank James Cheney, Maribel Fernandez, Andrei
   Popescu, and Thomas Tuegel for many insightful comments and concrete
   suggestions. We are indebted to the four anonymous reviewers, whose wit
   and dedication helped us improve the presentation. This work was
   supported in part by NSF CNS 16-19275. This material is based upon work
   supported by the United States Air Force and DARPA under Contract No.
   FA8750-18-C-0092.
CR Abadi M., 1991, Journal of Functional Programming, V1, P375, DOI 10.1017/S0956796800000186
   Abdallah Areski Nait, 1995, LOGIC PARTIAL INFORM, P425, DOI [10.1007/978-3-642-78160-5_14, DOI 10.1007/978-3-642-78160-5_14]
   [Anonymous], 1972, Toposes, algebraic geometry and logic, DOI DOI 10.1007/BFB0073967
   [Anonymous], 1992, Handbook of Logic in Computer Science
   [Anonymous], 2001, MODAL LOGIC
   Ayala-Rincón M, 2018, LECT NOTES COMPUT SC, V10855, P235, DOI 10.1007/978-3-319-94460-9_14
   Ayala-Rincon Mauricio, 2016, PROC 1 FSCD, V52, DOI [10.4230/LIPIcs.FSCD.2016.11, DOI 10.4230/LIPICS.FSCD.2016.11]
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   Barendregt H., 1984, The Lambda Calculus: its Syntax and Semantics, DOI [10.2307/2274112, DOI 10.2307/2274112]
   Bell John, 1977, COURSE MATH LOGIC
   Berline C, 2000, THEOR COMPUT SCI, V249, P81, DOI 10.1016/S0304-3975(00)00057-8
   Berline C, 2006, MATH STRUCT COMP SCI, V16, P185, DOI 10.1017/S0960129506005123
   BERNOT G, 1986, THEOR COMPUT SCI, V46, P13, DOI 10.1016/0304-3975(86)90019-8
   Berry Gerard, 1978, ICALP SER LECT NOTES, P72
   Bloo C. J, 1997, THESIS TU EINDHOVEN, DOI [10.6100/IR499858, DOI 10.6100/IR499858]
   Bogdanas D, 2015, ACM SIGPLAN NOTICES, V50, P445, DOI [10.1145/2775051.2676982, 10.1145/2676726.2676982]
   BRUIJN NGD, 1972, P K NED AKAD A MATH, V75, P381
   Bucciarelli A, 2004, IEEE S LOG, P276, DOI 10.1109/LICS.2004.1319622
   BUCCIARELLI A, 1993, THEOR COMPUT SCI, V113, P273, DOI 10.1016/0304-3975(93)90005-E
   BURMEISTER P, 1993, NATO ADV SCI INST SE, V389, P1
   Cardelli L, 1996, ACM COMPUT SURV, V28, P263, DOI 10.1145/234313.234418
   CARDELLI L, 1994, INFORM COMPUT, V109, P4, DOI 10.1006/inco.1994.1013
   Chen XH, 2019, IEEE S LOG
   Chen Xiaohong, 2020, GEN APPROACH DEFINE
   Cheney J, 2006, J SYMBOLIC LOGIC, V71, P299, DOI 10.2178/jsl/1140641176
   Cheney J, 2016, J LOGIC COMPUT, V26, P699, DOI 10.1093/logcom/exu024
   Cheney J, 2012, J AUTOM REASONING, V49, P209, DOI 10.1007/s10817-011-9221-6
   Chlipala A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Courcelle B, 2012, ENCYCLOP MATH APPL, V138, P1, DOI 10.1017/CBO9780511977619
   Dasgupta S, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1133, DOI 10.1145/3314221.3314601
   Despeyroux J., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P124, DOI 10.1007/BFb0014049
   ENGELER E, 1981, ALGEBRA UNIV, V13, P389, DOI 10.1007/BF02483849
   Felty A, 2012, J AUTOM REASONING, V48, P43, DOI 10.1007/s10817-010-9194-x
   Fiore M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P193, DOI 10.1109/LICS.1999.782615
   Fiore M, 2010, LECT NOTES COMPUT SC, V6281, P368, DOI 10.1007/978-3-642-15155-2_33
   Fiore M, 2010, LECT NOTES COMPUT SC, V6247, P320, DOI 10.1007/978-3-642-15205-4_26
   Gabbay M, 2004, IEEE S LOG, P139, DOI 10.1109/LICS.2004.1319608
   Gabbay M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P214, DOI 10.1109/LICS.1999.782617
   Gabbay MJ, 2017, ANN PURE APPL LOGIC, V168, P501, DOI 10.1016/j.apal.2016.10.001
   Gabbay Murdoch J, 2000, THESIS CAMBRIDGE U
   Gacek A, 2012, J AUTOM REASONING, V49, P241, DOI 10.1007/s10817-011-9218-1
   Girard Jean -Yves, 1972, THESIS PARIS DIDEROT
   GIRARD JY, 1986, THEOR COMPUT SCI, V45, P159, DOI 10.1016/0304-3975(86)90044-7
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   GOGOLLA M, 1984, THEOR COMPUT SCI, V34, P289, DOI 10.1016/0304-3975(84)90056-2
   GOGUEN JA, 1992, THEOR COMPUT SCI, V105, P217, DOI 10.1016/0304-3975(92)90302-V
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   Hasenjaeger Gisbert, 1953, J SYMBOLIC LOGIC, V18, p42S48, DOI DOI 10.2307/2266326
   Hathhorn C, 2015, ACM SIGPLAN NOTICES, V50, P336, DOI [10.1145/2813885.2737979, 10.1145/2737924.2737979]
   Hildenbrandt E, 2018, P IEEE COMPUT SECUR, P204, DOI 10.1109/CSF.2018.00022
   HINDLEY R, 1980, Z MATH LOGIK, V26, P289, DOI 10.1002/malq.19800261902
   K Team, K TUT CALC
   Kesner D, 2009, LOG METH COMPUT SCI, V5, DOI 10.2168/LMCS-5(3:1)2009
   Klop Jan Willem, 1993, HDB LOGIC COMPUTER S, V2, P1
   KOYMANS CPJ, 1982, INFORM CONTROL, V52, P306, DOI 10.1016/S0019-9958(82)90796-3
   Krivine J.L., 1993, LAMBDA CALCULUS TYPE
   Kuusisto A, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:26)2013
   LINCOLN P, 1992, PROCEEDINGS OF THE SEVENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P235, DOI 10.1109/LICS.1992.185536
   Lowenheim L, 1915, MATH ANN, V76, P447, DOI 10.1007/BF01458217
   Lucio-Carrasco F., 1989, STACS 89. 6th Annual Symposium on Theoretical Aspects of Computer Science. Proceedings, P47, DOI 10.1007/BFb0028972
   Manzonetto Giulio, 2008, THESIS U FOSCARI VEN
   Martin-Lof P., 1998, Oxford Logic Guides, V36, P127
   McDowell R. C., 2002, ACM Transactions on Computational Logic, V3, P80, DOI 10.1145/504077.504080
   McKinna J., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P289, DOI 10.1007/BFb0037113
   Meseguer J, 2013, INFORM COMPUT, V231, P38, DOI 10.1016/j.ic.2013.08.004
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Nelson Timothy, 2010, FINITE MODEL PROPERT
   Park D, 2015, ACM SIGPLAN NOTICES, V50, P346, DOI [10.1145/2813885.2737991, 10.1145/2737924.2737991]
   Paulson L. C., 1989, Journal of Automated Reasoning, V5, P363, DOI 10.1007/BF00248324
   Pfenning F., 1999, Automated Deduction - CADE-16. 16th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.1632), P202
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Pitts AM, 2013, CAM T THEOR, V57, P1, DOI 10.1017/CBO9781139084673
   Pitts AM, 2005, LECT NOTES COMPUT SC, V3603, P17
   Pitts AM, 2003, INFORM COMPUT, V186, P165, DOI 10.1016/S0890-5401(03)00138-X
   Plotkin Gordon, 1972, SET THEORETICAL DEFI
   Popescu A, 2015, THEOR COMPUT SCI, V577, P1, DOI 10.1016/j.tcs.2015.01.047
   Popescu Andrei, 2013, TERM GENERIC LOGIC E
   QUACKENBUSH RW, 1988, P AM MATH SOC, V103, P1015, DOI 10.2307/2047077
   Reynolds J. C., 1974, Programming Symposium, P408
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rosu G, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(4:28)2017
   Rosu G, 2010, J LOGIC ALGEBR PROGR, V79, P397, DOI 10.1016/j.jlap.2010.03.012
   SCHELLINX H, 1991, J SYMBOLIC LOGIC, V56, P227, DOI 10.2307/2274916
   Schürmann C, 2001, THEOR COMPUT SCI, V266, P1, DOI 10.1016/S0304-3975(00)00418-7
   Scott D., 1975, Proceedings of the Symposium lambda-Calculus and Computer Science Theory, P346, DOI 10.1007/BFb0029537
   Scott D., 1976, SIAM Journal on Computing, V5, P522, DOI 10.1137/0205037
   Stehr M.-O., 2000, ELECTRON NOTES THEOR, V36, P70, DOI DOI 10.1016/S1571-0661(05)80125-2
   Traian Florin Serbanuta, P 6 INT C GRAPH TRAN, P294
   Urban C, 2008, J AUTOM REASONING, V40, P327, DOI 10.1007/s10817-008-9097-2
NR 89
TC 6
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 88
DI 10.1145/3408970
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700002
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Downen, P
   Ariola, ZM
   Jones, SP
   Eisenberg, RA
AF Downen, Paul
   Ariola, Zena M.
   Jones, Simon Peyton
   Eisenberg, Richard A.
TI Kinds Are Calling Conventions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE arity; levity; representation; polymorphism; type systems
AB A language supporting polymorphism is a boon to programmers: they can express complex ideas once and reuse functions in a variety of situations. However, polymorphism is pain for compilers tasked with producing efficient code that manipulates concrete values.
   This paper presents a new intermediate language that allows for efficient static compilation, while still supporting flexible polymorphism. Specifically, it permits polymorphism over not only the types of values, but also the representation of values, the arity of primitive machine functions, and the evaluation order of arguments-all three of which are useful in practice. The key insight is to encode information about a value's calling convention in the kind of its type, rather than in the type itself.
C1 [Downen, Paul; Ariola, Zena M.] Univ Oregon, Eugene, OR 97403 USA.
   [Jones, Simon Peyton] Microsoft Res, Cambridge, England.
   [Eisenberg, Richard A.] Bryn Mawr Coll, Bryn Mawr, PA 19010 USA.
   [Eisenberg, Richard A.] Tweag IO, Cambridge, England.
C3 University of Oregon; Microsoft; Bryn Mawr College
RP Downen, P (corresponding author), Univ Oregon, Eugene, OR 97403 USA.
EM pdownen@cs.uoregon.edu; ariola@cs.uoregon.edu; simonpj@microsoft.com;
   rae@richarde.dev
OI Downen, Paul/0000-0003-0165-9387; Eisenberg, Richard/0000-0002-7669-9781
FU National Science Foundation [1719158]; Direct For Computer & Info Scie &
   Enginr; Division of Computing and Communication Foundations [1719158]
   Funding Source: National Science Foundation
FX The authors would like to thank Norman Ramsey and the anonymous
   reviewers, whose feedback was invaluable in improving the presentation
   of this paper. The material is based upon work supported by the National
   Science Foundation under Grant No. 1719158.
CR Andreoli J. M., 1992, Journal of Logic and Computation, V2, P297, DOI 10.1093/logcom/2.3.297
   Ariola Z. M., 1997, Journal of Functional Programming, V7, P265, DOI 10.1017/S0956796897002724
   Bolingbroke MC, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P1
   Breitner J, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000150
   Breitner Joachim, 2014, TRENDS FUNCTIONAL PR
   Dargaye Zaynah, 2009, Higher-Order and Symbolic Computation, V22, P199, DOI 10.1007/s10990-010-9050-z
   Downen P, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '19), P58, DOI 10.1145/3331545.3342594
   Downen Paul, 2018, 27 EACSL ANN C COMP
   Dunfield J, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P256, DOI 10.1145/2784731.2784744
   Eisenberg Richard, 2019, GHC PROP 29 REV LEV
   Eisenberg RA, 2017, ACM SIGPLAN NOTICES, V52, P525, DOI [10.1145/3062341.3062357, 10.1145/3140587.3062357]
   Graf Sebastian, 2020, GHC PROP 265 UNL DAT
   Hannan J., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P1, DOI 10.1145/268946.268947
   JONES SLP, 1991, LECT NOTES COMPUT SC, V523, P636
   Krivine Jean-Louis, 2007, Higher-Order and Symbolic Computation, V20, P199, DOI 10.1007/S10990-007-9018-9
   Laurent Olivier, 2002, PhD thesis
   Leroy X., 1990, 117 INRIA
   Levy P. B., 2001, Call-by-push-value
   Marlow S, 2004, ACM SIGPLAN NOTICES, V39, P4, DOI 10.1145/1016848.1016856
   Martin Andrew, 2019, 203 GHC
   Martin Andrew, 2019, 112 GHC
   Martin Andrew, 2019, 98 GHC
   McDermott D, 2019, LECT NOTES COMPUT SC, V11423, P235, DOI 10.1007/978-3-030-17184-1_9
   Munch-Maccagnoni G., 2013, THESIS U PARIS DIDER
   Munch-Maccagnoni G, 2009, LECT NOTES COMPUT SC, V5771, P409, DOI 10.1007/978-3-642-04027-6_30
   Peyton Simon L., 1992, J FUNCT PROGRAM, V2, P127
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Sabry A, 1997, ACM T PROGR LANG SYS, V19, P916, DOI 10.1145/267959.269968
   Theriault Alex, 2019, 209 GHC
   Wadler Philip, 1998, P STAND ML WORKSH
   Weirich Stephanie, 2013, INT C FUNCT PROGR IC
   Zeilberger N., 2009, The Logical Basis of Evaluation Order and Pattern-Matching
   Zeilberger N, 2008, ANN PURE APPL LOGIC, V153, P66, DOI 10.1016/j.apal.2008.01.001
NR 33
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 104
DI 10.1145/3408986
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700018
OA gold
DA 2024-07-18
ER

PT J
AU Parreaux, L
AF Parreaux, Lionel
TI The Simple Essence of Algebraic Subtyping Principal Type Inference with
   Subtyping Made Easy (Functional Pearl)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type inference; subtyping; principal types
AB MLsub extends traditional Hindley-Milner type inference with subtyping while preserving compact principal types, an exciting new development. However, its specification in terms of biunification is difficult to understand, relying on the new concepts of bisubstitution and polar types, and making use of advanced notions from abstract algebra. In this paper, we show that these are in fact not essential to understanding the mechanisms at play in MLsub. We propose an alternative algorithm called Simple-sub, which can be implemented efficiently in under 500 lines of code (including parsing, simplification, and pretty-printing), looks more familiar, and is easier to understand.
   We present an experimental evaluation of Simple-sub against MLsub on a million randomly-generated well-scoped expressions, showing that the two systems agree. The mutable automaton-based implementation of MLsub is quite far from its algebraic specification, leaving a lot of space for errors; in fact, our evaluation uncovered several bugs in it. We sketch more straightforward soundness and completeness arguments for Simple-sub, based on a syntactic specification of the type system.
   This paper is meant to be light in formalism, rich in insights, and easy to consume for prospective designers of new type systems and programming languages. In particular, no abstract algebra is inflicted on readers.
C1 [Parreaux, Lionel] Ecole Polytech Fed Lausanne, BC 214,Batiment BC, CH-1015 Lausanne, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; Ecole Polytechnique
   Federale de Lausanne
RP Parreaux, L (corresponding author), Ecole Polytech Fed Lausanne, BC 214,Batiment BC, CH-1015 Lausanne, Switzerland.
EM lionel.parreaux@epfl.ch
OI Parreaux, Lionel/0000-0002-8805-0728
CR AMADIO RM, 1993, ACM T PROGR LANG SYS, V15, P575, DOI 10.1145/155183.155231
   Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   Castagna G, 2016, ACM SIGPLAN NOTICES, V51, P378, DOI 10.1145/3022670.2951928
   Courant Nathanael, 2018, SAFELY TYPING ALGEBR
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Dolan S., 2017, THESIS
   Dolan S, 2017, ACM SIGPLAN NOTICES, V52, P60, DOI 10.1145/3093333.3009882
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Garrigue Jacques., 1998, ML WORKSH BALT, V13, P7
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Hosoya H, 2005, ACM T PROGR LANG SYS, V27, P46, DOI 10.1145/1053468.1053470
   Hutchins DS, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P287, DOI 10.1145/1706299.1706334
   Kiselyov Oleg, 2013, EFFICIENT GEN LEVELS EFFICIENT GEN LEVELS
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Odersky Martin., 1996, Proceedings of the 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL'96, page, P54
   Pearce DJ, 2013, LECT NOTES COMPUT SC, V7737, P335
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pottier F., 1998, RR3483 INRIA
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Rossberg A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P35, DOI 10.1145/2784731.2784738
   Rushby J, 1998, IEEE T SOFTWARE ENG, V24, P709, DOI 10.1109/32.713327
   Tobin-Hochstadt S, 2010, ACM SIGPLAN NOTICES, V45, P117, DOI 10.1145/1932681.1863561
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
NR 26
TC 6
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 124
DI 10.1145/3409006
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700038
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Samak, M
   Kim, D
   Rinard, MC
AF Samak, Malavika
   Kim, Deokhwan
   Rinard, Martin C.
TI Synthesizing Replacement Classes
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Sketching; Class Replacement; Program Equivalence
ID COMPONENT-BASED SYNTHESIS; SPECIFICATION INFERENCE; SYMBOLIC EXECUTION;
   BISIMULATION
AB We present a new technique for automatically synthesizing replacement classes. The technique starts with an original class O and a potential replacement class R, then uses R to synthesize a new class that implements the same interface and provides the same functionality as O. Critically, our technique works with a synthesized inter-class equivalence predicate between the states of O and R. It uses this predicate to ensure that original and synthesized methods leave corresponding O and R objects in equivalent states. The predicate therefore enables the technique to synthesize individual replacement methods in isolation while still obtaining a replacement class that leaves the original and replacement objects in equivalent states after arbitrarily long method invocation sequences. We have implemented the technique as part of a tool, named MASK, and evaluated it using open-source Java classes. The results highlight the effectiveness of MASK in synthesizing replacement classes.
C1 [Samak, Malavika; Kim, Deokhwan; Rinard, Martin C.] MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Samak, M (corresponding author), MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
EM malavika@csail.mit.edu; dkim@csail.mit.edu; rinard@csail.mit.edu
RI Samak, Malavika/ABB-5371-2021
FU DARPA transparent computing program [FA8650-15-C-7564]
FX We thank our shepherd, Shuvendu Lahiri and all the anonymous reviewers
   for their constructive and useful feedback on this work. This research
   was supported by the DARPA transparent computing program (contract
   FA8650-15-C-7564).
CR Albarghouthi A, 2016, ACM SIGPLAN NOTICES, V51, P789, DOI 10.1145/2914770.2837628
   Ammons G, 2002, ACM SIGPLAN NOTICES, V37, P4, DOI 10.1145/565816.503275
   [Anonymous], 2019, JDK BUG FIX 2019 LIS
   [Anonymous], 2019, POSTGRESQL JDBC 9 3
   Apache Commons, 2019, AP COMM AP PROJ FOC
   API Deprecation, 2018, DEPR APIS
   Barowy DW, 2015, ACM SIGPLAN NOTICES, V50, P218, DOI [10.1145/2813885.2737952, 10.1145/2737924.2737952]
   Bastani O, 2018, ACM SIGPLAN NOTICES, V53, P678, DOI [10.1145/3296979.3192383, 10.1145/3192366.3192383]
   Bastani O, 2015, ACM SIGPLAN NOTICES, V50, P553, DOI [10.1145/2775051.2676977, 10.1145/2676726.2676977]
   Cheung A, 2013, ACM SIGPLAN NOTICES, V48, P3, DOI 10.1145/2499370.2462180
   Dig D, 2006, J SOFTW MAINT EVOL-R, V18, P83, DOI 10.1002/smr.328
   Dillig Isil, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P394, DOI 10.1007/978-3-642-31424-7_30
   Drachsler-Cohen D, 2017, LECT NOTES COMPUT SC, V10426, P254, DOI 10.1007/978-3-319-63387-9_13
   Eclipse, 2019, ECL PLATF OP INN COL
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Flanagan C., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P500
   Fraser Gordon, 2011, PROC 19 ACM SIGSOFT, P416, DOI 10.1145/2025113.2025179
   Groovy, 2019, GROOV LANG MULT LANG
   Guava Collections, 2009, WHY DID GOOGL BUILD
   Hasan S, 2016, PROC INT CONF SOFTW, P225, DOI 10.1145/2884781.2884869
   Inc. Eclipse Foundation, 2019, ECL COLL COMPR COLL
   JDK, 2019, OR TECHN NETW JAV DE
   JDK Deprecation, 2018, DEPR JDK EL
   Jeon JS, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P934, DOI 10.1145/2786805.2803189
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Kapur P, 2010, ACM SIGPLAN NOTICES, V45, P726, DOI 10.1145/1932682.1869518
   Khurshid S, 2003, LECT NOTES COMPUT SC, V2619, P553
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Koutavas V, 2006, LECT NOTES COMPUT SC, V3924, P146
   Koutavas V, 2006, ACM SIGPLAN NOTICES, V41, P141, DOI 10.1145/1111320.1111050
   Kubernetes, 2019, KUB CLIENT JAV CLIEN
   Lahiri Shuvendu K., 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P712, DOI 10.1007/978-3-642-31424-7_54
   Livshits B, 2009, ACM SIGPLAN NOTICES, V44, P75, DOI 10.1145/1543135.1542485
   Logozzo F, 2004, LECT NOTES COMPUT SC, V2937, P211
   Mandelin D, 2005, ACM SIGPLAN NOTICES, V40, P48, DOI 10.1145/1064978.1065018
   Nimmer J. W., 2002, Software Engineering Notes, V27, P232, DOI 10.1145/566171.566213
   Peleg H, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1114, DOI 10.1145/3180155.3180189
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Pradel M, 2009, IEEE INT CONF AUTOM, P371, DOI 10.1109/ASE.2009.60
   PubNub, 2019, PUBN JAV BAS SDKS JA
   Ramanathan MK, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P123, DOI 10.1145/1250734.1250749
   Refaster, 2019, ERR PRON STAT AN TOO
   Sangiorgi D, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1889997.1890002
   Schlaipfer M, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P631, DOI 10.1145/3132747.3132773
   Sharma R, 2014, LECT NOTES COMPUT SC, V8559, P88, DOI 10.1007/978-3-319-08867-9_6
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Solar-Lezama A, 2009, LECT NOTES COMPUT SC, V5904, P4, DOI 10.1007/978-3-642-10672-9_3
   Solar-Lezama A, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P136, DOI 10.1145/1375581.1375599
   Solarlezama Armando, 2008, PROGRAM SYNTHESIS SK
   Structurizr, 2019, STRUCT STRUCT JAV
   Sumii E, 2005, ACM SIGPLAN NOTICES, V40, P63, DOI 10.1145/1047659.1040311
   Sumii E, 2004, ACM SIGPLAN NOTICES, V39, P161, DOI 10.1145/982962.964015
   TimWood Sophia Drossopolou., 2017, PROGRAMMING LANGUAGE, P937
   Wand Mitchell., 2018, P ACM PROGR LANG, DOI [10.1145/3236782, DOI 10.1145/3236782]
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang YP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158144
   Wang YP, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P286, DOI 10.1145/3314221.3314588
   Yessenov K, 2017, ACM SIGPLAN NOTICES, V52, P64, DOI [10.1145/3062341.3062386, 10.1145/3140587.3062386]
   Yorsh G, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P221, DOI 10.1145/1328438.1328467
NR 60
TC 7
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 52
DI 10.1145/3371120
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400053
OA gold
DA 2024-07-18
ER

PT J
AU Shen, B
   Zhang, W
   Zhao, HY
   Liang, GT
   Jin, Z
   Wang, QX
AF Shen, Bo
   Zhang, Wei
   Zhao, Haiyan
   Liang, Guangtai
   Jin, Zhi
   Wang, Qianxiang
TI IntelliMerge: A Refactoring-Aware Software Merging Technique
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Revision control system; software merging; conflicts resolution;
   refactoring
AB In modern software development, developers rely on version control systems like Git to collaborate in the branch-based development workflow. One downside of this workflow is the conflicts occurred when merging contributions from different developers: these conflicts are tedious and error-prone to be correctly resolved, reducing the efficiency of collaboration and introducing potential bugs. The situation becomes even worse, with the popularity of refactorings in software development and evolution, because current merging tools (usually based on the text or tree structures of source code) are unaware of refactorings. In this paper, we present IntelliMerge, a graph-based refactoring-aware merging algorithm for Java programs. We explicitly enhance this algorithm's ability in detecting and resolving refactoring-related conflicts. Through the evaluation on 1,070 merge scenarios from 10 popular open-source Java projects, we show that IntelliMerge reduces the number of merge conflicts by 58.90% comparing with GitMerge (the prevalent unstructured merging tool) and 11.84% comparing with jFSTMerge (the state-of-the-art semi-structured merging tool) without sacrificing the auto-merging precision (88.48%) and recall (90.22%). Besides, the evaluation of performance shows that IntelliMerge takes 539 milliseconds to process one merge scenario on the median, which indicates its feasibility in real-world applications.
C1 [Shen, Bo; Zhang, Wei; Zhao, Haiyan; Jin, Zhi] Peking Univ, Yiheyuan Rd, Beijing, Peoples R China.
   [Liang, Guangtai; Wang, Qianxiang] Huawei Technol Co Ltd, Daoxianghu Rd, Beijing, Peoples R China.
C3 Peking University; Huawei Technologies
RP Shen, B (corresponding author), Peking Univ, Yiheyuan Rd, Beijing, Peoples R China.
EM shenbo@pku.edu.cn; zhangw@sei.pku.edu.cn; zhhy.sei@pku.edu.cn;
   liangguangtai@huawei.com; zhijin@pku.edu.cn; wangqianxiang@huawei.com
RI Jin, Zhi/E-1288-2013
FU National Natural Science Foundation of China [61690200, 61432020];
   National Basic Research Program of China (973 Program) [2015CB352201]
FX We would like to thank the anonymous OOPSLA'19 reviewers for their
   invaluable comments on an earlier version of this paper. This material
   is based on research sponsored by the National Natural Science
   Foundation of China under Grant No. 61690200 and Grant No. 61432020, and
   the National Basic Research Program of China (973 Program) under Grant
   No. 2015CB352201.
CR Ahmed I, 2017, INT SYMP EMP SOFTWAR, P58, DOI 10.1109/ESEM.2017.12
   Alves ELG, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P751, DOI 10.1145/2635868.2661674
   Apel S., 2011, P 19 ACM SIGSOFT S 1, P190, DOI DOI 10.1145/2025113.2025141
   Apel S, 2012, IEEE INT CONF AUTOM, P120, DOI 10.1145/2351676.2351694
   Bartelt Christian., 2008, P 1 INT WORKSHOP COM, P13
   Binkley D., 1995, ACM Transactions on Software Engineering and Methodology, V4, P3, DOI 10.1145/201055.201056
   Bird C, 2012, P ACM SIGSOFT 20 INT, P45
   Brindescu C, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P952, DOI 10.1145/3236024.3275430
   Brun Y., 2011, Proceedings of the 19th ACM SIGSOFT symposium and the 13th European Conference on Foundations of Software Engineering (FSE'11), P168, DOI [10.1145/2025113.2025139, DOI 10.1145/2025113.2025139]
   Buckley J, 2005, J SOFTW MAINT EVOL-R, V17, P309, DOI 10.1002/smr.319
   Buffenbarger Jim, 1993, SOFTWARE CONFIGURATI, P153
   Cavalcanti G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133883
   Choi Eunjong, 2018, ARXIV PREPRINT ARXIV
   Dig D., 2006, PROC COMPANION 21 AC, P732, DOI 10.1145/
   Dig D, 2008, IEEE T SOFTWARE ENG, V34, P321, DOI 10.1109/TSE.2008.29
   Dig D, 2007, PROC INT CONF SOFTW, P427
   Dig Danny, 2006, ACM SIGSOFT SOFTWARE, V31, P1
   Fan H., 2012, P 27 ANN ACM S APPL, P737, DOI DOI 10.1145/2245276.2245417
   Fan HF, 2017, 12TH CHINESE CONFERENCE ON COMPUTER SUPPORTED COOPERATIVE WORK AND SOCIAL COMPUTING (CHINESECSCW 2017), P217, DOI 10.1145/3127404.3127447
   Fan HF, 2017, INT C COMP SUPP COOP, P174, DOI 10.1109/CSCWD.2017.8066690
   Fowler Martin, 2002, XP UN 1 AG UN C EXTR
   GRASS JE, 1992, USENIX C(PLUS-PLUS) TECHNICAL CONFERENCE PROCEEDINGS, P181
   Guimaraes ML, 2012, PROC INT CONF SOFTW, P342, DOI 10.1109/ICSE.2012.6227180
   Nguyen HL, 2018, COMPUT SUPP COOP W J, V27, P741, DOI 10.1007/s10606-018-9323-3
   JACKSON D, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P243, DOI 10.1109/ICSM.1994.336770
   Kasi BK, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P732, DOI 10.1109/ICSE.2013.6606619
   Kim M., 2010, PROC 18 ACM SIGSOFT, P371, DOI [10.1145/1882291.1882353, DOI 10.1145/1882291.1882353]
   Kolovos DS, 2006, LECT NOTES COMPUT SC, V4199, P215
   Lessenich O, 2015, AUTOMAT SOFTW ENG, V22, P367, DOI 10.1007/s10515-014-0151-5
   Lindholm Tancred., 2004, Proceedings of the 2004 ACM Symposium on Document Engineering, Milwaukee, Wisconsin, USA, October 28-30, 2004, P1
   Lippe E., 1992, SIGSOFT Software Engineering Notes, V17, P78, DOI 10.1145/142882.143753
   Mahmoudi M, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P151, DOI [10.1109/saner.2019.8668012, 10.1109/SANER.2019.8668012]
   Mehra A., 2005, ASE, P204, DOI DOI 10.1145/1101908.1101940
   Menezes Gleiph Ghiotto Lima, 2018, IEEE T SOFTWARE ENG
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Mens T, 2002, IEEE T SOFTWARE ENG, V28, P449, DOI 10.1109/TSE.2002.1000449
   Mens T, 2000, LECT NOTES COMPUT SC, V1779, P127
   Negara S, 2013, LECT NOTES COMPUT SC, V7920, P552, DOI 10.1007/978-3-642-39038-8_23
   Niu N, 2005, PROC IEEE INT CONF S, P197
   Schwägerl F, 2015, SCI COMPUT PROGRAM, V113, P51, DOI 10.1016/j.scico.2015.02.008
   Segura S, 2008, LECT NOTES COMPUT SC, V5235, P489, DOI 10.1007/978-3-540-88643-3_15
   Silva D, 2017, IEEE WORK CONF MIN S, P269, DOI 10.1109/MSR.2017.14
   Silva D, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P858, DOI 10.1145/2950290.2950305
   Steimann Friedrich, 2019, P 12 ACM SIGPLAN INT
   Tsantalis N, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P483, DOI 10.1145/3180155.3180206
   Walrad C, 2002, COMPUTER, V35, P31, DOI 10.1109/MC.2002.1033025
   Westfechtel B., 1991, Proceedings of the 3rd International Workshop on Software Configuration Management, P68, DOI 10.1145/111062.111071
   Zhu FM, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276536
NR 48
TC 29
Z9 31
U1 0
U2 9
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 170
DI 10.1145/3360596
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500055
OA gold
DA 2024-07-18
ER

PT J
AU Walia, R
   Narayanan, P
   Carette, J
   Tobin-Hochstadt, S
   Shan, CC
AF Walia, Rajan
   Narayanan, Praveen
   Carette, Jacques
   Tobin-Hochstadt, Sam
   Shan, Chung-chieh
TI From High-Level Inference Algorithms to Efficient Code
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programs; arrays; plates; multidimensional distributions;
   marginalization; conjugacy; map-reduce; loop optimization; collapsed
   Gibbs sampling
ID GIBBS SAMPLER; MODELS
AB Probabilistic programming languages are valuable because they allow domain experts to express probabilistic models and inference algorithms without worrying about irrelevant details. However, for decades there remained an important and popular class of probabilistic inference algorithms whose efficient implementation required manual low-level coding that is tedious and error-prone. They are algorithms whose idiomatic expression requires random array variables that are latent or whose likelihood is conjugate. Although that is how practitioners communicate and compose these algorithms on paper, executing such expressions requires eliminating the latent variables and recognizing the conjugacy by symbolic mathematics. Moreover, matching the performance of handwritten code requires speeding up loops by more than a constant factor.
   We show how probabilistic programs that directly and concisely express these desired inference algorithms can be compiled while maintaining efficiency. We introduce new transformations that turn high-level probabilistic programs with arrays into pure loop code. We then make great use of domain-specific invariants and norms to optimize the code, and to specialize and JIT-compile the code per execution. The resulting performance is competitive with manual implementations.
C1 [Walia, Rajan; Narayanan, Praveen; Tobin-Hochstadt, Sam; Shan, Chung-chieh] Indiana Univ, Dept Comp Sci, Bloomington, IN 47405 USA.
   [Carette, Jacques] McMaster Univ, Dept Comp & Software, Hamilton, ON, Canada.
C3 Indiana University System; Indiana University Bloomington; McMaster
   University
RP Walia, R (corresponding author), Indiana Univ, Dept Comp Sci, Bloomington, IN 47405 USA.
EM rawalia@indiana.edu; pravnar@umail.iu.edu; carette@mcmaster.ca;
   samth@cs.indiana.edu; ccshan@indiana.edu
OI Tobin-Hochstadt, Sam/0000-0003-1302-6499
FU DARPA [FA8750-14-2-0007]; NSF [CCF-1763922, CNS-0723054]; Lilly
   Endowment, Inc.; Indiana METACyt Initiative; The Indiana METACyt
   Initiative at IU
FX This research was supported by DARPA contract FA8750-14-2-0007, NSF
   grants CCF-1763922 and CNS-0723054, Lilly Endowment, Inc. (through its
   support for the Indiana University Pervasive Technology Institute), and
   the Indiana METACyt Initiative. The Indiana METACyt Initiative at IU is
   also supported in part by Lilly Endowment, Inc.
CR [Anonymous], 2017, UCI MACHINE LEARNING
   [Anonymous], 2007, Statistical Relational Learning
   Bayes Price, 1763, PHILOS T ROY SOC LON, V53, P370, DOI DOI 10.1098/RSTL.1763.0053
   Betancourt M., 2018, CONCEPTUAL INTRO HAM, DOI DOI 10.48550/ARXIV.1701.02434
   BLACKWELL D, 1947, ANN MATH STAT, V18, P105, DOI 10.1214/aoms/1177730497
   Blei DM, 2003, J MACH LEARN RES, V3, P993, DOI 10.1162/jmlr.2003.3.4-5.993
   Borgström J, 2016, ACM SIGPLAN NOTICES, V51, P271, DOI [10.1145/2914770.2837653, 10.1145/2837614.2837653]
   Braz R.de Salvo., 2007, An Introduction to Statistical Relational Learning, P433
   Braz RD, 2017, CONFERENCE ON UNCERTAINTY IN ARTIFICIAL INTELLIGENCE (UAI2017)
   Buntine WL, 1994, J ARTIF INTELL RES, V2, P159, DOI 10.1613/jair.62
   Carette Jacques, 2016, Practical Aspects of Declarative Languages. 18th International Symposium, PADL 2016. Proceedings: LNCS 9585, P135, DOI 10.1007/978-3-319-28228-2_9
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   Casella G, 1996, BIOMETRIKA, V83, P81, DOI 10.1093/biomet/83.1.81
   Chyzak F, 1998, J SYMB COMPUT, V26, P187, DOI 10.1006/jsco.1998.0207
   Cook SR, 2006, J COMPUT GRAPH STAT, V15, P675, DOI 10.1198/106186006X136976
   De Raedt L, 2007, 20TH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P2468
   de Salvo Braz R., 2016, P 25 INT JOINT C ART, P3591
   Dechter Rina, 1998, LEARNING INFERENCE G
   Fischer B, 2003, J FUNCT PROGRAM, V13, P483, DOI 10.1017/S0956796802004562
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   GELFAND AE, 1990, J AM STAT ASSOC, V85, P398, DOI 10.2307/2289776
   Gelman A., 2014, Chapman & Hall/CRC texts in statistical science, V3rd
   Geweke J, 2004, J AM STAT ASSOC, V99, P799, DOI 10.1198/016214504000001132
   Goodman N. D., 2014, DESIGN IMPLEMENTATIO
   Goodman ND., 2008, UAI, P220
   Griffiths TL, 2004, P NATL ACAD SCI USA, V101, P5228, DOI 10.1073/pnas.0307752101
   Hoffman MD, 2014, J MACH LEARN RES, V15, P1593
   Hoffman Matthew D., 2018, Proceedings of the 32Nd International Conference on Neural Information Processing Systems, NIPS'18, P10739
   Huang D, 2017, ACM SIGPLAN NOTICES, V52, P111, DOI [10.1145/3140587.3062375, 10.1145/3062341.3062375]
   Joachims T., 1997, International conference on machine learning, P143, DOI DOI 10.1016/J.ESWA.2016.09.009
   Kauers M, 2013, TEXT MG SYMB COMPUT, P119, DOI 10.1007/978-3-7091-1616-6_5
   Kiselyov O, 2016, LECT NOTES COMPUT SC, V10017, P357, DOI 10.1007/978-3-319-47958-3_19
   Kiselyov O, 2009, LECT NOTES COMPUT SC, V5658, P360, DOI 10.1007/978-3-642-03034-5_17
   Koller D., 2009, Probabilistic graphical models: principles and techniques
   Kolmogorov AndreiNikolaevich., 1950, Izvestiya Rossiiskoi Akademii Nauk. Seriya Matematicheskaya, V14, P303
   LIU JS, 1994, BIOMETRIKA, V81, P27, DOI 10.1093/biomet/81.1.27
   LIU JS, 1994, J AM STAT ASSOC, V89, P958, DOI 10.2307/2290921
   Lunn DJ, 2000, STAT COMPUT, V10, P325, DOI 10.1023/A:1008929526011
   MacKay David J. C., 1998, LEARNING INFERENCE G
   Mansinghka Vikash K., 2014, Venture: A Higher-Order Probabilistic Programming Platform with Programmable Inference
   McCallum A., 1998, AAAI 98 WORKSH LEARN, V752, P41, DOI DOI 10.1109/TSMC.1985.6313426
   McCallum A.K., 2002, MALLET MACHINE LEARN
   Meng XL, 1999, BIOMETRIKA, V86, P301, DOI 10.1093/biomet/86.2.301
   Murray Lawrence M., 2018, P AISTATS 2018 21 IN, P1037
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Narayanan P, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110255
   Neal RM, 2011, CH CRC HANDB MOD STA, P113
   Cardona PAN, 2015, CUAD ACT, P154
   Nori AV, 2014, AAAI CONF ARTIF INTE, P2476
   Obermeyer Fritz H., 2018, AUTOMATED ENUMERATIO
   Patil A, 2010, J STAT SOFTW, V35, P1
   Pearson K., 1894, Philosophical Transactions, V185a, P71, DOI 10.1098/rsta.1894.0003
   Pfeffer A., 2007, INTRO STAT RELATIONA, P399
   Pfeffer Avi, 2016, Practical probabilistic programming
   Plummer M., 2003, P 3 INT WORKSH DIS T, V124, P10, DOI DOI 10.1.1.13.3406
   Pollard D., 2001, USERS GUIDE MEASURE
   Poole D, 2003, J ARTIF INTELL RES, V18, P263, DOI 10.1613/jair.1122
   RABINER LR, 1989, P IEEE, V77, P257, DOI 10.1109/5.18626
   Ramsey N, 2002, ACM SIGPLAN NOTICES, V37, P154, DOI 10.1145/565816.503288
   Rao C. R., 1945, B CALCUTTA MATH SOC, V37, P81, DOI [DOI 10.1007/978-1-4612-0919-5_15, DOI 10.1007/978-1-4612-0919-516]
   Resnik Philip, 2010, CSTR4956 U MAR
   Sanner Scott, 2012, AAAI, P1954
   Shan CC, 2017, ACM SIGPLAN NOTICES, V52, P130, DOI 10.1145/3093333.3009852
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   Tran Dustin, 2017, INT C LEARN REPR ICL
   Tristan Jean-Baptiste, 2014, 13123613 ARXIV
   Venugopal Deepak, 2013, P 20 9 C UNCERTAINTY, P664
   WILF HS, 1992, INVENT MATH, V108, P575, DOI 10.1007/BF02100618
   Wingate D., 2011, P 14 INT C ART INT S, P770
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
   YiWu Lei Li, 2016, Proceedings of the Twenty-Fifth International Joint Conference on Artificial Intelligence, P3637
   Zhang N. L., 1994, P 10 CAN C ART INT, P171
   Zhang NL, 1996, J ARTIF INTELL RES, V5, P301, DOI 10.1613/jair.305
   Zinkov R, 2017, CONFERENCE ON UNCERTAINTY IN ARTIFICIAL INTELLIGENCE (UAI2017)
NR 76
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 98
DI 10.1145/3341702
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900021
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Podkopaev, A
   Lahav, O
   Vafeiadis, V
AF Podkopaev, Anton
   Lahav, Ori
   Vafeiadis, Viktor
TI Bridging the Gap between Programming Languages and Hardware Weak Memory
   Models
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Weak memory consistency; IMM; promising semantics; C11 memory model
AB We develop a new intermediate weak memory model, IMM, as a way of modularizing the proofs of correctness of compilation from concurrent programming languages with weak memory consistency semantics to mainstream multi-core architectures, such as POWER and ARM. We use IMM to prove the correctness of compilation from the promising semantics of Kang et al. to POWER (thereby correcting and improving their result) and ARMv7, as well as to the recently revised ARMvS model. Our results are mechanized in Coq, and to the best of our knowledge, these are the first machine-verified compilation correctness results for models that are weaker than x86-TSO.
C1 [Podkopaev, Anton] St Petersburg Univ, St Petersburg, Russia.
   [Podkopaev, Anton] JetBrains Res, St Petersburg, Russia.
   [Podkopaev, Anton] MPI SWS, Saarbrucken, Germany.
   [Vafeiadis, Viktor] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Lahav, Ori] Tel Aviv Univ, Tel Aviv, Israel.
C3 Saint Petersburg State University; Tel Aviv University
RP Podkopaev, A (corresponding author), St Petersburg Univ, St Petersburg, Russia.; Podkopaev, A (corresponding author), JetBrains Res, St Petersburg, Russia.; Podkopaev, A (corresponding author), MPI SWS, Saarbrucken, Germany.
EM anton.podkopaev@jetbrains.com; orilahav@tau.ac.il; viktor@mpi-sws.org
RI Podkopaev, Anton/AAH-5443-2021; Vafeiadis, Viktor/B-5809-2014
OI Podkopaev, Anton/0000-0002-9448-6587; Vafeiadis,
   Viktor/0000-0001-8436-0334
FU RFBR [18-01-00380]; Israel Science Foundation [5166651]; Blavatnik
   Family foundation
FX We thank Orestis Melkonian for his help with Coq proof concerning the
   POWER model in the context of another project, and the POPL'19 reviewers
   for their helpful feedback. The first author was supported by RFBR
   (grant number 18-01-00380). The second author was supported by the
   Israel Science Foundation (grant number 5166651), and by Len Blavatnik
   and the Blavatnik Family foundation.
CR Alglave J, 2018, ACM SIGPLAN NOTICES, V53, P405, DOI [10.1145/3296957.3177156, 10.1145/3173162.3177156]
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Batty M, 2015, LECT NOTES COMPUT SC, V9032, P283, DOI 10.1007/978-3-662-46669-8_12
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Batty Mark, 2012, POPL 2012, DOI [10.1145/2103656.2103717, DOI 10.1145/2103656.2103717]
   Boehm H.-J., 2014, MSPC, p7:1, DOI DOI 10.1145/2618128.2618134
   Chakraborty S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290383
   Chakraborty Soham, 2017, CGO 2017, DOI [10.1109/CGO.2017.7863732, DOI 10.1109/CGO.2017.7863732]
   Chong N, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P211, DOI [10.1145/3192366.3192373, 10.1145/3296979.3192373]
   Deacon Will., 2017, ARMV8 APPL LEVEL MEM
   Dolan S, 2018, ACM SIGPLAN NOTICES, V53, P242, DOI [10.1145/3192366.3192421, 10.1145/3296979.3192421]
   Dongol B, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158106
   Flur S, 2017, ACM SIGPLAN NOTICES, V52, P429, DOI 10.1145/3093333.3009839
   Flur S, 2016, ACM SIGPLAN NOTICES, V51, P608, DOI 10.1145/2914770.2837615
   Jeffrey A, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P759, DOI 10.1145/2933575.2934536
   Kang Jeehoon, 2017, POPL 2017, DOI [10.1145/3009837.3009850, DOI 10.1145/3009837.3009850]
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lahav O, 2016, LECT NOTES COMPUT SC, V9995, P479, DOI 10.1007/978-3-319-48989-6_29
   Lahav O, 2016, ACM SIGPLAN NOTICES, V51, P649, DOI 10.1145/2914770.2837643
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Manerkar Yatin A., 2016, ABS161101507 CORR
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Mapping, 2016, C C 11 MAPPINGS PROC
   Maranget Luc, 2012, A tutorial introduction to the arm and power relaxed memory models
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Pichon-Pharabod J, 2016, ACM SIGPLAN NOTICES, V51, P622, DOI 10.1145/2914770.2837616
   Podkopaev Anton, 2018, COQ PROOF SCRIPTS SU
   Podkopaev Anton, 2017, 31 EUR C OBJ OR PROG, V22, P28, DOI [10.4230/LIPIcs.ECOOP.2017.22, DOI 10.4230/LIPICS.ECOOP.2017.22]
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   RISC-V, 2018, RISC 5 INSTR SET MAN
   RISCV in herd, 2018, RISCV HERD VS OP MOD
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Vafeiadis V, 2015, ACM SIGPLAN NOTICES, V50, P209, DOI [10.1145/2676726.2676995, 10.1145/2775051.2676995]
   Wickerson J, 2017, ACM SIGPLAN NOTICES, V52, P190, DOI 10.1145/3093333.3009838
   Zhang SH, 2018, CONF PROC INT SYMP C, P124, DOI 10.1109/ISCA.2018.00021
NR 35
TC 37
Z9 39
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 69
DI 10.1145/3290382
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300069
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU D'Souza, M
   You, J
   Lhoták, O
   Prokopec, A
AF D'Souza, Matt
   You, James
   Lhotak, Ondrej
   Prokopec, Aleksandar
TI TASTYTRUFFLE: Just-in-Time Specialization of Parametric Polymorphism
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE parametric polymorphism; specialization; reified types; just-in-time
   compiler; Truffle; Scala
ID LANGUAGE; IMPLEMENTATION
AB Parametric polymorphism allows programmers to express algorithms independently of the types of values that they operate on. The approach used to implement parametric polymorphism can have important performance implications. One popular approach, erasure, uses a uniform representation for generic data, which entails primitive boxing and other indirections that harm performance. Erasure destroys type information that could be used by language implementations to optimize generic code.
   We present TASTYTRUFFLE, an implementation for a subset of the Scala programming language. Instead of JVM bytecode, TASTYTRUFFLE interprets Scala's TASTy intermediate representation, a typed representation wherein generic types are not erased. TASTy's precise type information empowers TASTYTRUFFLE to implement generic code more effectively. In particular, it allows TASTYTRUFFLE to reify types as run-time objects that can be passed around. Using reified types, TASTYTRUFFLE supports heterogeneous box-free representations for generic values. TASTYTRUFFLE also uses reified types to specialize generic code, producing monomorphic copies of generic code that can be easily and reliably optimized by its just-in-time (JIT) compiler. Empirically, TASTYTRUFFLE is competitive with standard JVM implementations on a small set of benchmark programs; when generic code is used with multiple types, TASTYTRUFFLE consistently outperforms the JVM. The precise type information in TASTy enables TASTYTRUFFLE to find additional optimization opportunities that could not be uncovered with erased JVM bytecode.
C1 [D'Souza, Matt; You, James; Lhotak, Ondrej] Univ Waterloo, Waterloo, ON N2L 3G1, Canada.
   [Prokopec, Aleksandar] Oracle Labs, Zurich, Switzerland.
C3 University of Waterloo
RP D'Souza, M (corresponding author), Univ Waterloo, Waterloo, ON N2L 3G1, Canada.
EM matt.dsouza@gmail.com; j35you@uwaterloo.ca; olhotak@uwaterloo.ca;
   aleksandar.prokopec@gmail.com
OI You, James/0009-0000-5906-0305
FU Natural Sciences and Engineering Research Council of Canada
FX This research was supported by the Natural Sciences and Engineering
   Research Council of Canada.
CR Ansaloni Danilo, 2022, Static Object Model
   Bracha G, 1998, ACM SIGPLAN NOTICES, V33, P183, DOI 10.1145/286942.286957
   Cartwright R, 1998, ACM SIGPLAN NOTICES, V33, P201, DOI 10.1145/286942.286958
   CLICK C, 1995, SIGPLAN NOTICES, V30, P35, DOI 10.1145/202530.202534
   Doeraene Sebastien Jean R, 2018, Technical Report, DOI [10.5075/epflthesis-8733, DOI 10.5075/EPFLTHESIS-8733]
   Dragos Iulian., WORKSHOP IMPLEMENTAT, DOI DOI 10.1145/1565824.1565830
   DSouza Matt, 2023, TASTyTruffle: Justintime Specialization of Parametric Polymorphism, DOI [10.5281/zenodo.8332577, DOI 10.5281/ZENODO.8332577]
   Futamura Y., 1999, Higher-Order and Symbolic Computation, V12, P381, DOI 10.1023/A:1010095604496
   Goetz Brian, 2014, State of the Specialization
   Graur D, 2021, PROCEEDINGS OF THE 18TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON MANAGED PROGRAMMING LANGUAGES AND RUNTIMES (MPLR '2021), P45, DOI 10.1145/3475738.3480718
   Humer C, 2015, ACM SIGPLAN NOTICES, V50, P123, DOI 10.1145/2658761.2658776
   Humer Christian, 2022, Operation DSL: How We Learned to Stop Worrying and Love Bytecodes again
   Kennedy A, 2001, ACM SIGPLAN NOTICES, V36, P1, DOI 10.1145/381694.378797
   Klabnik Steve, 2023, The Rust programming language
   Leopoldseder D, 2018, INT SYM CODE GENER, P126, DOI 10.1145/3168811
   Marr Stefan, 2022, Truffle Interpreter Performance without the Holy Graal
   MORRISON R, 1991, ACM T PROGR LANG SYS, V13, P342, DOI 10.1145/117009.117017
   MUELLER F, 1995, SIGPLAN NOTICES, V30, P56, DOI 10.1145/223428.207116
   Petrashko Dmytro, 2017, Technical Report, DOI [10.5075/epflthesis-7979, DOI 10.5075/EPFLTHESIS-7979]
   Prokopec A, 2017, SCALA'17: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P29, DOI 10.1145/3136000.3136002
   Schinz Michel, 2005, Ph. D. Dissertation, DOI [10.5075/epfl-thesis-3302, DOI 10.5075/EPFL-THESIS-3302]
   Stadler L., 2013, P 7 ACM WORKSH VIRT, P1, DOI [10.1145/2542142.2542143, DOI 10.1145/2542142.2542143]
   Stadler Lukas, 2013, P 4 WORKSHOP SCALA, P1, DOI [10.1145/2489837.2489846, DOI 10.1145/2489837.2489846]
   Strachey C., 2000, Higher-Order and Symbolic Computation, V13, P11, DOI 10.1023/A:1010000313106
   Stroustrup B., 1999, HDB OBJECT TECHNOLOG, DOI DOI 10.1201/9780849331350.SEC3
   Ureche V, 2013, ACM SIGPLAN NOTICES, V48, P73, DOI [10.1145/2509136.2509537, 10.1145/2544173.2509537]
   Woss Andreas, 2014, P 2014 INT C PRINCIP, P133, DOI DOI 10.1145/2647508.2647517
   Wrthinger T., 2013, P 2013 ACM INT S NEW, P187, DOI [10.1145/2509578.2509581, DOI 10.1145/2509578.2509581]
   Würthinger T, 2013, ACM SIGPLAN NOTICES, V48, P73, DOI 10.1145/2480360.2384587
   Würthinger T, 2017, ACM SIGPLAN NOTICES, V52, P662, DOI [10.1145/3062341.3062381, 10.1145/3140587.3062381]
NR 30
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 277
DI 10.1145/3622853
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100057
OA gold
DA 2024-07-18
ER

PT J
AU Gao, PF
   Zhang, YD
   Song, F
   Chen, TL
   Standaert, FX
AF Gao, Pengfei
   Zhang, Yedi
   Song, Fu
   Chen, Taolue
   Standaert, Francois-Xavier
TI Compositional Verification of Efficient Masking Countermeasures against
   Side-Channel Attacks
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Formal verification; power side-channel attacks; cryptographic
   implementations; countermeasures; compositional reasoning
ID DIFFERENTIAL POWER ANALYSIS; HIGHER-ORDER MASKING; PRIVATE CIRCUITS;
   HARDWARE
AB Masking is one of the most effective countermeasures for securely implementing cryptographic algorithms against power side-channel attacks, the design of which however turns out to be intricate and error-prone. While techniques have been proposed to rigorously verify implementations of cryptographic algorithms, currently they are limited in scalability. To address this issue, compositional approaches have been investigated, but insofar they fail to prove the security of recent efficient implementations. To fill this gap, we propose a novel compositional verification approach. In particular, we introduce two new language-level security notions based on which we propose composition strategies and verification algorithms. Our approach is able to prove efficient implementations, which cannot be done by prior compositional approaches. We implement our approach as a tool CONVINCE and conduct extensive experiments to confirm its efficacy. We also use CONVINCE to further explore the design space of the AES Sbox with least refreshing by replacing its implementation for finite-field multiplication with more efficient counterparts. We automatically prove leakage-freeness of these new versions. As a result, we can effectively reduce 1,600 randomness and 3,200 XOR-operations of the state-of-the-art AES implementation.
C1 [Gao, Pengfei; Zhang, Yedi] ShanghaiTech Univ, Shanghai, Peoples R China.
   [Song, Fu] Chinese Acad Sci, Inst Software, State Key Lab Comp Sci, Beijing, Peoples R China.
   [Song, Fu] Univ Chinese Acad Sci, Beijing, Peoples R China.
   [Chen, Taolue] Birkbeck Univ London, London, England.
   [Standaert, Francois-Xavier] Catholic Univ Louvain, Louvain La Neuve, Belgium.
C3 ShanghaiTech University; Chinese Academy of Sciences; Institute of
   Software, CAS; Chinese Academy of Sciences; University of Chinese
   Academy of Sciences, CAS; University of London; Birkbeck University
   London; Universite Catholique Louvain
RP Gao, PF (corresponding author), ShanghaiTech Univ, Shanghai, Peoples R China.
EM gaopf@shanghaitech.edu.cn; zhangyd1@shanghaitech.edu.cn;
   songfu@ios.ac.cn; t.chen@bbk.ac.uk; fstandae@uclouvain.be
RI Gao, Pengfei/ICJ-3065-2023
OI Chen, Taolue/0000-0002-5993-1665; Song, Fu/0000-0002-0581-2679; zhang,
   yedi/0000-0003-1005-2114; Standaert, Francois-Xavier/0000-0001-7444-0285
FU National Natural Science Foundation of China [62072309]; CAS Project for
   Young Scientists in Basic Research [YSBR-040]; ISCAS New Cultivation
   Project [ISCAS-PYFX-202201]; State Key Laboratory of Novel Software
   Technology, Nanjing University [KFKT2022A03]; Birkbeck BEI School
   Project EFFECT
FX This work is partly supported by the National Natural Science Foundation
   of China under Grant No.: 62072309, CAS Project for Young Scientists in
   Basic Research under Grant No.: YSBR-040, ISCAS New Cultivation Project
   under Grant No.: ISCAS-PYFX-202201, State Key Laboratory of Novel
   Software Technology, Nanjing University under Grant No.: KFKT2022A03,
   and Birkbeck BEI School Project EFFECT.
CR Agosta G, 2012, DES AUT CON, P77
   Barthe G., 2016, P ACM SIGSAC C COMP, P116, DOI DOI 10.1145/2976749
   Barthe G, 2020, J CRYPTOGR ENG, V10, P17, DOI 10.1007/s13389-018-00202-2
   Barthe G, 2019, LECT NOTES COMPUT SC, V11735, P300, DOI 10.1007/978-3-030-29959-0_15
   Barthe G, 2017, LECT NOTES COMPUT SC, V10210, P535, DOI 10.1007/978-3-319-56620-7_19
   Barthe G, 2015, LECT NOTES COMPUT SC, V9056, P457, DOI 10.1007/978-3-662-46800-5_18
   Barthe Gilles, 2021, IACR Transactions on Cryptographic Hardware and Embedded Systems 2021, V2021, P189
   Bayrak AG, 2013, LECT NOTES COMPUT SC, V8086, P293, DOI 10.1007/978-3-642-40349-1_17
   Bayrak AG, 2011, DES AUT CON, P230
   Belaid Sonia, 2018, Advances in Cryptology - ASIACRYPT 2018. 24th International Conference on the Theory and Application of Cryptology and Information Security. Proceedings: Lecture Notes in Computer Science (LNCS 11273), P343, DOI 10.1007/978-3-030-03329-3_12
   Belaïd S, 2022, P IEEE S SECUR PRIV, P142, DOI 10.1109/SP46214.2022.9833600
   Belaïd S, 2020, LECT NOTES COMPUT SC, V12107, P311, DOI 10.1007/978-3-030-45727-3_11
   Belaïd S, 2017, LECT NOTES COMPUT SC, V10403, P397, DOI 10.1007/978-3-319-63697-9_14
   Belaid S, 2016, LECT NOTES COMPUT SC, V9666, P616, DOI 10.1007/978-3-662-49896-5_22
   Ben El Ouahma Ines, 2017, P 6 INT WORKSH SEC P, V49, P17, DOI [10.29007/hhnf, DOI 10.29007/HHNF]
   Biryukov A, 2018, LECT NOTES COMPUT SC, V10728, P22, DOI 10.1007/978-3-319-75208-2_2
   Bloem R, 2018, LECT NOTES COMPUT SC, V10821, P321, DOI 10.1007/978-3-319-78375-8_11
   Blot A, 2017, LECT NOTES COMPUT SC, V10204, P277, DOI 10.1007/978-3-662-54455-6_13
   Bordes N, 2021, LECT NOTES COMPUT SC, V12697, P283, DOI 10.1007/978-3-030-77886-6_10
   Carlet C, 2012, LECT NOTES COMPUT SC, V7549, P366, DOI 10.1007/978-3-642-34047-5_21
   Cassiers G, 2021, IEEE T COMPUT, V70, P1677, DOI 10.1109/TC.2020.3022979
   Cassiers G, 2020, IEEE T INF FOREN SEC, V15, P2542, DOI 10.1109/TIFS.2020.2971153
   Coron Jean-Sebastien, 2018, Applied Cryptography and Network Security. 16th International Conference, ACNS 2018. Proceedings: LNCS 10892, P65, DOI 10.1007/978-3-319-93387-0_4
   Coron JS, 2014, LECT NOTES COMPUT SC, V8424, P410, DOI 10.1007/978-3-662-43933-3_21
   Coron JS, 2015, LECT NOTES COMPUT SC, V9054, P130, DOI 10.1007/978-3-662-48116-5_7
   Coron JS, 2014, LECT NOTES COMPUT SC, V8731, P188, DOI 10.1007/978-3-662-44709-3_11
   Coron JS, 2014, LECT NOTES COMPUT SC, V8441, P441, DOI 10.1007/978-3-642-55220-5_25
   Coron JS, 1999, LECT NOTES COMPUT SC, V1717, P292
   Cramer R, 2015, Secure Multiparty Computation and Secret Sharing, DOI DOI 10.1017/CBO9781107337756
   Duc A, 2015, LECT NOTES COMPUT SC, V9056, P401, DOI 10.1007/978-3-662-46800-5_16
   Eldib H, 2014, ACM T SOFTW ENG METH, V24, DOI 10.1145/2685616
   Eldib H, 2014, LECT NOTES COMPUT SC, V8559, P114, DOI 10.1007/978-3-319-08867-9_8
   Gao PF, 2022, IEEE T SOFTWARE ENG, V48, P973, DOI 10.1109/TSE.2020.3008852
   Gao PF, 2021, ACM T SOFTW ENG METH, V30, DOI 10.1145/3428015
   Gao PF, 2019, ACM T SOFTW ENG METH, V28, DOI 10.1145/3330392
   Gao PF, 2019, LECT NOTES COMPUT SC, V11427, P155, DOI 10.1007/978-3-030-17462-0_9
   Gao Pengfei, 2023, CONVINCE, DOI [10.5281/zenodo.8416208, DOI 10.5281/ZENODO.8416208]
   Gigerl B, 2021, PROCEEDINGS OF THE 30TH USENIX SECURITY SYMPOSIUM, P1469
   Goubin L., 2001, Cryptographic Hardware and Embedded Systems - CHES 2001. Third International Workshop. Proceedings (Lecture Notes in Computer Science Vol.2162), P3
   Goubin L, 1999, LECT NOTES COMPUT SC, V1717, P158
   Goudarzi D, 2017, LECT NOTES COMPUT SC, V10210, P567, DOI 10.1007/978-3-319-56620-7_20
   Gross H, 2018, J CRYPTOGR ENG, V8, P109, DOI 10.1007/s13389-018-0184-y
   Hadzic Vedad, 2021, P FORM METH COMP AID, P1, DOI [10.34727/2021/isbn.978-3-85448-046-4_9, DOI 10.34727/2021/ISBN.978-3-85448-046-4_9]
   Ishai Y, 2003, LECT NOTES COMPUT SC, V2729, P463, DOI 10.1007/978-3-540-45146-4_27
   Itoh K, 2002, LECT NOTES COMPUT SC, V2523, P129
   Kannwischer MJ, 2018, LECT NOTES COMPUT SC, V10815, P168, DOI 10.1007/978-3-319-89641-0_10
   Karpman Pierre, 2018, Advances in Cryptology - ASIACRYPT 2018. 24th International Conference on the Theory and Application of Cryptology and Information Security. Proceedings: Lecture Notes in Computer Science (LNCS 11273), P285, DOI 10.1007/978-3-030-03329-3_10
   Kim H, 2011, LECT NOTES COMPUT SC, V6917, P95, DOI 10.1007/978-3-642-23951-9_7
   Knichel David, 2020, Advances in Cryptology - ASIACRYPT 2020. 26th International Conference on the Theory and Application of Cryptology and Information Security. Proceedings. Lecture Notes in Computer Science (LNCS 12491), P787, DOI 10.1007/978-3-030-64837-4_26
   Kocher Paul, 1999, LECT NOTES COMPUTER, P388, DOI [DOI 10.1007/3-540-48405-1_25, 10.1007/3-540-48405-1_25]
   LAI XJ, 1991, LECT NOTES COMPUT SC, V473, P389
   Luo Chao, 2018, P INT C COMP AID DES, V115, DOI [10.1145/3240765.3240802, DOI 10.1145/3240765.3240802]
   Meunier Quentin L., 2020, P INT WORKSH SEC PRO
   Moss A, 2012, LECT NOTES COMPUT SC, V7428, P58, DOI 10.1007/978-3-642-33027-8_4
   Prouff E, 2009, IEEE T COMPUT, V58, P799, DOI 10.1109/TC.2009.15
   Ravi P. V., 2019, IACR Cryptol. ePrint Arch., P948
   Rivain M, 2010, LECT NOTES COMPUT SC, V6225, P413, DOI 10.1007/978-3-642-15031-9_28
   Schamberger T, 2021, LECT NOTES COMPUT SC, V12609, P119, DOI 10.1007/978-3-030-68487-7_8
   SHAMIR A, 1979, COMMUN ACM, V22, P612, DOI 10.1145/359168.359176
   Wang JB, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P590, DOI 10.1145/3338906.3338913
   Wang WJ, 2018, IEEE T INF FOREN SEC, V13, P1301, DOI 10.1109/TIFS.2017.2787985
   Weijia Wang, 2020, Advances in Cryptology - ASIACRYPT 2020. 26th International Conference on the Theory and Application of Cryptology and Information Security. Proceedings. Lecture Notes in Computer Science (LNCS 12491), P851, DOI 10.1007/978-3-030-64837-4_28
   Zhang J, 2018, LECT NOTES COMPUT SC, V10982, P157, DOI 10.1007/978-3-319-96142-2_12
NR 63
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 286
DI 10.1145/3622862
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100066
OA gold
DA 2024-07-18
ER

PT J
AU Larsen, JK
   Guanciale, R
   Haller, P
   Scalas, A
AF Larsen, Jens Kanstrup
   Guanciale, Roberto
   Haller, Philipp
   Scalas, Alceste
TI P4R-Type: A Verified API for P4 Control Plane Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Software-defined networking; P4; P4Runtime; Type systems; Semantics
AB Software-Defined Networking (SDN) significantly simplifies programming, reconfiguring, and optimizing network devices, such as switches and routers. The de facto standard for programming SDN devices is the P4 language. However, the flexibility and power of P4, and SDN more generally, gives rise to important risks. As a number of incidents at major cloud providers have shown, errors in SDN programs can compromise the availability of networks, leaving them in a non-functional state. The focus of this paper are errors in control-plane programs that interact with P4-enabled network devices via the standardized P4Runtime API. For clients of the P4Runtime API it is easy to make mistakes that may lead to catastrophic failures, despite the use of Google's Protocol Buffers as an interface definition language.
   This paper proposes P4R-Type, a novel verified P4Runtime API for Scala that performs static checks for P4 control plane operations, ruling out mismatches between P4 tables, allowed actions, and action parameters. As a formal foundation of P4R-Type, we present the F-P4R calculus and its typing system, which ensure that well-typed programs never get stuck by issuing invalid P4Runtime operations. We evaluate the safety and flexibility of P4R-Type with 3 case studies. To the best of our knowledge, this is the first work that formalises P4Runtime control plane applications, and a typing discipline ensuring the correctness of P4Runtime operations.
C1 [Larsen, Jens Kanstrup; Scalas, Alceste] Tech Univ Denmark, DTU Compute, Bygning 321, DK-2800 Lyngby, Denmark.
   [Guanciale, Roberto; Haller, Philipp] KTH Royal Inst Technol, Dept Comp Sci, Lindstedtsvagen 5,Plan 5, S-11428 Stockholm, Sweden.
C3 Technical University of Denmark; Royal Institute of Technology
RP Larsen, JK (corresponding author), Tech Univ Denmark, DTU Compute, Bygning 321, DK-2800 Lyngby, Denmark.
EM jekla@dtu.dk; robertog@kth.se; phaller@kth.se; alcsc@dtu.dk
OI Scalas, Alceste/0000-0002-1153-6164; Haller, Philipp/0000-0002-2659-5271
FU DTU Nordic Five Tech Alliance grant "Safe and secure software-defined
   networks in P4"; Horizon Europe grant [101093006]; Horizon Europe -
   Pillar II [101093006] Funding Source: Horizon Europe - Pillar II
FX This work was partially supported by the DTU Nordic Five Tech Alliance
   grant "Safe and secure software-defined networks in P4" and the Horizon
   Europe grant no. 101093006 "TaRDIS."
CR Alshnakat A, 2022, PROCEEDINGS OF THE 5TH INTERNATIONAL WORKSHOP ON P4 IN EUROPE, EUROP4 2022, P39, DOI 10.1145/3565475.3569081
   Anderson CJ, 2014, ACM SIGPLAN NOTICES, V49, P113, DOI 10.1145/2535838.2535862
   Belgaum MR, 2020, IEEE ACCESS, V8, P98612, DOI 10.1109/ACCESS.2020.2995849
   Bhardwaj A, 2021, I C DEPEND SYS NETWO, P101, DOI 10.1109/DSN48987.2021.00026
   Blanvillain O, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498698
   Caltais G, 2022, LECT NOTES COMPUT SC, V13242, P184, DOI 10.1007/978-3-030-99253-8_10
   CARDELLI L, 1994, INFORM COMPUT, V109, P4, DOI 10.1006/inco.1994.1013
   Doenges R, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434322
   Eichholz M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498701
   Fogel Ari, 2015, 12 USENIX S NETWORKE
   Garg S, 2019, IEEE T MULTIMEDIA, V21, P566, DOI 10.1109/TMM.2019.2893549
   Kazemian P., 2012, P 9 USENIX S NETWORK, P113
   Kreutz D., 2013, P 2 ACM SIGCOMM WORK, P55
   Larsen JK, 2023, Arxiv, DOI arXiv:2309.03566
   Liu J, 2018, PROCEEDINGS OF THE 2018 CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '18), P490, DOI 10.1145/3230543.3230582
   McKeown N, 2008, ACM SIGCOMM COMP COM, V38, P69, DOI 10.1145/1355734.1355746
   Nötzli A, 2018, PROCEEDINGS OF THE SYMPOSIUM ON SDN RESEARCH (SOSR'18), DOI 10.1145/3185467.3185497
   Ordonez-Lucena J, 2017, IEEE COMMUN MAG, V55, P80, DOI 10.1109/MCOM.2017.1600935
   P4.org Working Group, 2020, P4Runtime Specification
   P4.org Working Group, 2023, P4 Tutorial
   P4.orgWorking Group, 2020, P4 Language Specification
   Peterson R, 2023, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP 2023, P303, DOI 10.1145/3573105.3575670
   Sangiorgi Davide, 2001, The c calculus: a Theory of Mobile Processes
   Sharwood Simon., 2016, Google cloud wobbles as workers patch wrong routers
   Shukla A, 2020, IEEE J SEL AREA COMM, V38, P1293, DOI 10.1109/JSAC.2020.2999653
   Stoenescu R, 2018, PROCEEDINGS OF THE 2018 CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '18), P518, DOI 10.1145/3230543.3230548
NR 26
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 290
DI 10.1145/3622866
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100070
OA gold, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Lee, E
   Lhotak, O
AF Lee, Edward
   Lhotak, Ondrej
TI Simple Reference Immutability for System F<sub>&lt;:</sub>
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE System F-<:; Reference Immutability; Type Systems
AB Reference immutability is a type based technique for taming mutation that has long been studied in the context of object-oriented languages, like Java. Recently, though, languages like Scala have blurred the lines between functional programming languages and object oriented programming languages. We explore how reference immutability interacts with features commonly found in these hybrid languages, in particular with higher-order functions - polymorphism - and subtyping. We construct a calculus System F-<:M which encodes a reference immutability system as a simple extension of System F-<: and prove that it satisfies the standard soundness and immutability safety properties.
C1 [Lee, Edward; Lhotak, Ondrej] Univ Waterloo, Sch Comp Sci, 200 Univ Ave W, Waterloo, ON N2L 3G1, Canada.
C3 University of Waterloo
RP Lee, E (corresponding author), Univ Waterloo, Sch Comp Sci, 200 Univ Ave W, Waterloo, ON N2L 3G1, Canada.
EM e45lee@uwaterloo.ca; olhotak@uwaterloo.ca
FU Natural Sciences and Engineering Research Council of Canada; Ontario
   Graduate Scholarship
FX This work was partially supported by the Natural Sciences and
   Engineering Research Council of Canada and by an Ontario Graduate
   Scholarship.
CR Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   Bright W, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3386323
   CARDELLI L, 1991, LECT NOTES COMPUT SC, V526, P750
   Dietl W, 2007, LECT NOTES COMPUT SC, V4609, P28
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Dort Vlastimil, 34th European Conference on Object-Oriented Programming (ECOOP 2020) (Leibniz International Proceedings in Informatics (LIPIcs),, V166, DOI [10.4230/LIPIcs.ECOOP.2020.18, DOI 10.4230/LIPICS.ECOOP.2020.18]
   Felleisen Mattias, 1987, P 14 ACM SIGACT SIGP, P314, DOI [10.1145/41625.41654, DOI 10.1145/41625.41654]
   Foster JS, 1999, ACM SIGPLAN NOTICES, V34, P192, DOI 10.1145/301631.301665
   Gordon CS, 2012, ACM SIGPLAN NOTICES, V47, P21, DOI 10.1145/2398857.2384619
   Haller P, 2017, ELECTRON P THEOR COM, P21, DOI 10.4204/EPTCS.246.5
   Huang W, 2012, ACM SIGPLAN NOTICES, V47, P879, DOI 10.1145/2398857.2384680
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Lee Edward, 2023, Artifact for the OOPSLA 2023 paper 'Simple Reference Immutability for System Fsub'
   Lee Edward, 2023, Artifact for the OOPSLA 2023 paper 'Simple Reference Immutability for System F-sub', DOI [10.1145/3580414, DOI 10.1145/3580414]
   Muehlboeck F, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276482
   Reynolds John C., 1997, Design of the Programming Language Forsythe, P173, DOI DOI 10.1007/978-1-4612-4118-8_9
   Strickland TS, 2012, ACM SIGPLAN NOTICES, V47, P943, DOI 10.1145/2398857.2384685
   Stroustrup B., 2007, The C++ Programming Language
   Tschantz MS, 2005, ACM SIGPLAN NOTICES, V40, P211, DOI 10.1145/1103845.1094828
   Zibin Yoav., 2007, Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Soft- ware Engineering, ESEC-FSE '07, P75, DOI DOI 10.1145/1287624
NR 21
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 252
DI 10.1145/3622828
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100032
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Liu, FY
   Lhotak, O
   Hua, D
   Xing, E
AF Liu, Fengyun
   Lhotak, Ondrej
   Hua, David
   Xing, Enze
TI Initializing Global Objects: Time and Order
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE initialization safety; initialization-time irrelevance; region context
AB Object-oriented programming has been bothered by an awkward feature for a long time: static members. Static members not only compromise the conceptual integrity of object-oriented programming, but also give rise to subtle initialization errors, such as reading non-initialized fields and deadlocks.
   The Scala programming language eliminated static members from the language, replacing them with global objects that present a unified object-oriented programming model. However, the problem of global object initialization remains open, and programmers still suffer from initialization errors.
   We propose partial ordering and initialization-time irrelevance as two fundamental principles for initializing global objects. Based on these principles, we put forward an effective static analysis to ensure safe initialization of global objects, which eliminates initialization errors at compile time. The analysis also enables static scheduling of global object initialization to avoid runtime overhead. The analysis is modular at the granularity of objects and it avoids whole-program analysis. To make the analysis explainable and tunable, we introduce the concept of regions to make context-sensitivity understandable and customizable by programmers.
C1 [Liu, Fengyun] Oracle Labs, Zurich, Switzerland.
   [Lhotak, Ondrej; Hua, David; Xing, Enze] Univ Waterloo, Waterloo, ON, Canada.
C3 University of Waterloo
RP Liu, FY (corresponding author), Oracle Labs, Zurich, Switzerland.
EM fengyun.liu@oracle.com; olhotak@uwaterloo.ca; david.hua@uwaterloo.ca;
   e2xing@uwaterloo.ca
OI Hua, David/0009-0004-1753-2975
FU Natural Sciences and Engineering Research Council of Canada
FX We sincerely thank OOPSLA 2023 reviewers for their helpful feedback. We
   are also grateful to our shepherd Philipp Haller for the many
   improvement suggestions. This research was supported by the Natural
   Sciences and Engineering Research Council of Canada.
CR Amin N, 2017, ACM SIGPLAN NOTICES, V52, P666, DOI 10.1145/3093333.3009866
   Blaudeau C, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563314
   Borger E., 2000, Software-Concepts and Tools, V19, P175, DOI 10.1007/s003789900003
   Darais D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110256
   Hubert L, 2009, ELECTRON NOTES THEOR, V253, P15, DOI 10.1016/j.entcs.2009.11.012
   Kozen D., 2002, Formal Techniques in Real-Time and Fault-Tolerant Systems. 7th International Symposium, FTRTFT 2002. Proceedings (Lecture Notes in Computer Science Vol.2469), P71
   Leino KRM, 2005, LECT NOTES COMPUT SC, V3582, P26
   Liu FY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428243
   Liu Fengyun, 2021, P 12 ACM SIGPLAN INT, P33, DOI [10.1145/3486610.3486895, DOI 10.1145/3486610.3486895]
   Odersky Martin, 2019, Scala Language Specification
   Qi X, 2009, ACM SIGPLAN NOTICES, V44, P53, DOI 10.1145/1594834.1480890
   Rustan K, 2004, Technical Report/ETH Zurich, Department of Computer Science, V459
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Smaragdakis Y, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P17, DOI 10.1145/1926385.1926390
   Summers AJ, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P1013
   W3C, 2022, WebAssembly Core Specification
   Wimmer C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360610
NR 17
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 268
DI 10.1145/3622844
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100048
OA gold
DA 2024-07-18
ER

PT J
AU Mururu, G
   Khan, S
   Chatterjee, B
   Chen, C
   Porter, C
   Gavrilovska, A
   Pande, S
AF Mururu, Girish
   Khan, Sharjeel
   Chatterjee, Bodhisatwa
   Chen, Chao
   Porter, Chris
   Gavrilovska, Ada
   Pande, Santosh
TI Beacons: An End-to-End Compiler Framework for Predicting and Utilizing
   Dynamic Loop Characteristics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE ML-based Static Analysis; Loop Trip Count Analysis; Loop Timing
   Analysis; Loop Memory Analysis; Proactive Scheduling; Compiler-Guided
   Scheduling; Throughput Scheduling
AB Efficient management of shared resources is a critical problem in high-performance computing (HPC) environments. Existing workload management systems often promote non-sharing of resources among different co-executing applications to achieve performance isolation. Such schemes lead to poor resource utilization and suboptimal process throughput, adversely affecting user productivity. Tackling this problem in a scalable fashion is extremely challenging, since it requires the workload scheduler to possess an in-depth knowledge about various application resource requirements and runtime phases at fine granularities within individual applications.
   In this work, we show that applications' resource requirements and execution phase behaviour can be captured in a scalable and lightweight manner at runtime by estimating important program artifacts termed as "dynamic loop characteristics". Specifically, we propose a solution to the problem of efficient workload scheduling by designing a compiler and runtime cooperative framework that leverages novel loop-based compiler analysis for resource allocation.
   We present Beacons Framework, an end-to-end compiler and scheduling framework, that estimates dynamic loop characteristics, encapsulates them in compiler-instrumented beacons in an application, and broadcasts them during application runtime, for proactive workload scheduling. We focus on estimating four important loop characteristics: loop trip-count, loop timing, loop memory footprint, and loop data-reuse behaviour, through a combination of compiler analysis and machine learning.
   The novelty of the Beacons Framework also lies in its ability to tackle irregular loops that exhibit complex control flow with indeterminate loop bounds involving structure fields, aliased variables and function calls, which are highly prevalent in modern workloads. At the backend, Beacons Framework entails a proactive workload scheduler that leverages the runtime information to orchestrate aggressive process co-locations, for maximizing resource concurrency, without causing cache thrashing. Our results show that Beacons Framework can predict different loop characteristics with an accuracy of 85% to 95% on average, and the proactive scheduler obtains an average throughput improvement of 1.9x (up to 3.2x) over the state-of-the-art schedulers on an Amazon Graviton2 machine on consolidated workloads involving 1000-10000 co-executing processes, across 51 benchmarks.
C1 [Mururu, Girish; Chen, Chao] Georgia Inst Technol, Santa Clara, CA 95053 USA.
   [Khan, Sharjeel; Chatterjee, Bodhisatwa; Gavrilovska, Ada; Pande, Santosh] Georgia Inst Technol, Atlanta, GA 30332 USA.
   [Porter, Chris] IBM Res, Yorktown Hts, NY USA.
C3 University System of Georgia; Georgia Institute of Technology;
   University System of Georgia; Georgia Institute of Technology;
   International Business Machines (IBM)
RP Mururu, G (corresponding author), Georgia Inst Technol, Santa Clara, CA 95053 USA.
EM girishmururu@gatech.edu; smkhan@gatech.edu; bodhi@gatech.edu;
   kandy.cs@gmail.com; cporter35@gatech.edu; ada@cc.gatech.edu;
   santosh@cc.gatech.edu
OI Chatterjee, Bodhisatwa/0000-0003-3098-6256; Porter,
   Chris/0000-0002-2821-2668; Pande, Santosh/0000-0001-6723-8062;
   Gavrilovska, Ada/0000-0003-4199-2512
FU DARPA [HR001119S0023]; PNNL [AWD-003800]; Microsystems Technology Office
FX This work was partially supported by DARPA via BAA number:
   HR001119S0023, Microsystems Technology Office, and by PNNL grant
   AWD-003800. The authors also thank the anonymous reviewers for their
   constructive feedback and comments.
CR Agelastos A, 2016, PARALLEL COMPUT, V58, P90, DOI 10.1016/j.parco.2016.05.009
   Agelastos A, 2015, IEEE INT C CL COMP, P464, DOI 10.1109/CLUSTER.2015.71
   Ahn Dong H., 2014, 2014 43rd International Conference on Parallel Processing Workshops (ICCPW). Proceedings, P9, DOI 10.1109/ICPPW.2014.15
   ALLEN FE, 1976, COMMUN ACM, V19, P137, DOI 10.1145/360018.360025
   [Anonymous], 2002, Processor pipelines and static worst-case execution time analysis
   [Anonymous], 2013, P 40 ANN INT S COMPU
   Bird S., 2009, NATURAL LANGUAGE PRO
   Blanc R, 2010, LECT NOTES ARTIF INT, V6355, P103, DOI 10.1007/978-3-642-17511-4_7
   Bucek J, 2018, COMPANION OF THE 2018 ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING (ICPE '18), P41, DOI 10.1145/3185768.3185771
   Burnim J, 2009, PROC INT CONF SOFTW, P463, DOI 10.1109/ICSE.2009.5070545
   Carlyle A. G., 2010, Proceedings of the 2010 IEEE 2nd International Conference on Cloud Computing Technology and Science (CloudCom 2010), P169, DOI 10.1109/CloudCom.2010.115
   Chatterjee B, 2022, PROCEEDINGS OF THE 2022 31ST INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PACT 2022, P14, DOI 10.1145/3559009.3569645
   Che SA, 2009, I S WORKL CHAR PROC, P44, DOI 10.1109/IISWC.2009.5306797
   Chen C, 2022, PPOPP'22: PROCEEDINGS OF THE 27TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P17, DOI 10.1145/3503221.3508423
   Chen S, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P107, DOI 10.1145/3297858.3304005
   CYTRON R, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P25, DOI 10.1145/75277.75280
   Delimitrou Christina., 2013, P 10 INT C AUT COMP, P291
   Deng J, 2009, PROC CVPR IEEE, P248, DOI 10.1109/CVPRW.2009.5206848
   Dewangan BK, 2021, SOFTWARE PRACT EXPER, V51, P2373, DOI 10.1002/spe.2810
   Ding C, 2003, ACM SIGPLAN NOTICES, V38, P245, DOI 10.1145/780822.781159
   Engblom J, 2000, REAL TIM SYST SYMP P, P163, DOI 10.1109/REAL.2000.896006
   Ermedahl Andreas, 2007, OpenAccess Series in Informatics (OASIcs), V6, DOI [10.4230/OASIcs.WCET.2007.1194, DOI 10.4230/OASICS.WCET.2007.1194]
   Fedorova A, 2005, USENIX Association Proceedings of the General Track: 2005 UNENIX Annual Technical Conference, P395
   Fedorova Alexandra, 2019, Technical Report TR-17
   Fox W, 2017, PROCEEDINGS OF WORKS 2017: 12TH WORKSHOP ON WORKFLOWS IN SUPPORT OF LARGE-SCALE SCIENCE, DOI 10.1145/3150994.3150996
   Fried J, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P281
   Geist A, 2017, INT J HIGH PERFORM C, V31, P104, DOI 10.1177/1094342015597083
   Ghuloum A. M., 1995, SIGPLAN Notices, V30, P58, DOI 10.1145/209937.209944
   Grosser T., 2011, P 1 INT WORKSH POL C, V2011, P1
   Gustafsson J, 2006, REAL TIM SYST SYMP P, P57, DOI 10.1109/RTSS.2006.12
   He KM, 2016, PROC CVPR IEEE, P770, DOI 10.1109/CVPR.2016.90
   Henning J. L., 2006, SIGARCH COMPUT ARCHI, V34, P1, DOI [DOI 10.1145/1186736.1186737, 10.1145/1186736.1186737]
   Hinton G. E., 2012, arXiv
   Huang G, 2017, PROC CVPR IEEE, P2261, DOI 10.1109/CVPR.2017.243
   Iorgulescu C, 2018, PROCEEDINGS OF THE 2018 USENIX ANNUAL TECHNICAL CONFERENCE, P519
   Javadi SA, 2019, PROCEEDINGS OF THE 2019 TENTH ACM SYMPOSIUM ON CLOUD COMPUTING (SOCC '19), P272, DOI 10.1145/3357223.3362734
   Jayaseelan R, 2006, PROCEEDINGS OF THE 12TH IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM, P81
   Jimborean A, 2014, INT J PARALLEL PROG, V42, P529, DOI 10.1007/s10766-013-0259-4
   KENNEDY K, 1978, COMPUT LANG, V3, P163, DOI 10.1016/0096-0551(78)90009-7
   Kestor Gokcen, 2013, P 3 INT WORKSH RUNT, DOI [10.1145/2491661.2481429, DOI 10.1145/2491661.2481429]
   Knepley MG, 2009, SCI PROGRAMMING-NETH, V17, P215, DOI [10.3233/SPR-2009-0249, 10.1155/2009/948613]
   Knoop Jens, 2011, INT ANDREI ERSHOV ME, P227
   Kobus Jacek, 2009, Completely Fair Scheduler and its tuning
   Krizhevsky Alex, 2009, LEARNING MULTIPLE LA
   Li X, 2007, SCI COMPUT PROGRAM, V69, P56, DOI 10.1016/j.scico.2007.01.014
   Mars J, 2011, INT SYMP MICROARCH, P248
   Mururu G, 2023, PROCEEDINGS OF THE 24TH ACM SIGPLAN/SIGBED INTERNATIONAL CONFERENCE ON LANGUAGES, COMPILERS, AND TOOLS FOR EMBEDDED SYSTEMS, LCTES 2023, P87, DOI 10.1145/3589610.3596279
   Mururu Girish, 2023, Zenodo, DOI 10.5281/ZENODO.8153210
   Novakovic D, 2013, USENIX ATC 13, P219
   Padmanabha Shruti, 2013, 2013 46th Annual IEEE/ACM International Symposium on Microarchitecture (MICRO). Proceedings, P445, DOI 10.1145/2540708.2540746
   Pham QV, 2020, IEEE ACCESS, V8, P116974, DOI 10.1109/ACCESS.2020.3001277
   Ramaprasad H, 2005, RTAS 2005: 11TH IEEE REAL TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM, PROCEEDINGS, P148
   Rashti M, 2015, IEEE INT C CL COMP, P698, DOI 10.1109/CLUSTER.2015.121
   Schoeberl M, 2010, SOFTWARE PRACT EXPER, V40, P507, DOI 10.1002/spe.968
   SHEN X, 2004, P 11 INT C ARCH SUPP, P165, DOI DOI 10.1145/1037187.1024414
   Sherwood T, 2000, LECT NOTES COMPUT SC, V1940, P73
   Simonyan K, 2015, Arxiv, DOI arXiv:1409.1556
   Song SW, 2009, INT J HIGH PERFORM C, V23, P265, DOI 10.1177/1094342009106193
   Tembey Priyanka, 2014, ACM S CLOUD COMP SOC
   Viswanathan H., 2011, 2011 IEEE International Symposium on Parallel & Distributed Processing, Workshops and Phd Forum, P890, DOI 10.1109/IPDPS.2011.234
   Wagner B, 2021, INT CONF MANAGE DATA, P1879, DOI 10.1145/3448016.3457260
   Wallace S, 2016, SC '16: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, P656, DOI 10.1109/SC.2016.55
   Wang Tao, 2020, P 34 ACM INT C SUP B, DOI [10.1145/3392717.3392741, DOI 10.1145/3392717.3392741]
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
   Wu B, 2012, ACM SIGPLAN NOTICES, V47, P851, DOI 10.1145/2398857.2384678
   Xiao WC, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P595
   Yan ZT, 2021, PROC INT CONF DATA, P2365, DOI 10.1109/ICDE51399.2021.00267
   Yoo AB, 2003, LECT NOTES COMPUT SC, V2862, P44
   Yuki T., 2015, Polybench 4.0
   Zhao J, 2018, CC'18: PROCEEDINGS OF THE 27TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P14, DOI 10.1145/3178372.3179509
   Zhu HS, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI 10.1145/2954679.2872394
   Zhuravlev S, 2012, ACM COMPUT SURV, V45, DOI 10.1145/2379776.2379780
NR 72
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 228
DI 10.1145/3622803
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100008
OA gold
DA 2024-07-18
ER

PT J
AU Renda, A
   Ding, Y
   Carbin, M
AF Renda, Alex
   Ding, Yi
   Carbin, Michael
TI TURACO: Complexity-Guided Data Sampling for Training Neural Surrogates
   of Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE programming languages; surrogate models; neural networks
AB Programmers and researchers are increasingly developing surrogates of programs, models of a subset of the observable behavior of a given program, to solve a variety of software development challenges. Programmers train surrogates frommeasurements of the behavior of a program on a dataset of input examples. A key challenge of surrogate construction is determining what training data to use to train a surrogate of a given program.
   We present a methodology for sampling datasets to train neural-network-based surrogates of programs. We first characterize the proportion of data to sample from each region of a program's input space (corresponding to different execution paths of the program) based on the complexity of learning a surrogate of the corresponding execution path. We next provide a program analysis to determine the complexity of different paths in a program. We evaluate these results on a range of real-world programs, demonstrating that complexity-guided sampling results in empirical improvements in accuracy.
C1 [Renda, Alex; Carbin, Michael] MIT CSAIL, Cambridge, MA 02139 USA.
   [Ding, Yi] Purdue Univ, W Lafayette, IN USA.
C3 Massachusetts Institute of Technology (MIT); Purdue University System;
   Purdue University
RP Renda, A (corresponding author), MIT CSAIL, Cambridge, MA 02139 USA.
EM renda@csail.mit.edu; yiding@purdue.edu; mcarbin@csail.mit.edu
RI Yichen, Ding/R-5036-2019
OI Ding, Yi/0000-0003-2757-9182
FU National Science Foundation [2030859, CCF-1918839, CCF-2217064]; Defense
   Advanced Research Projects Agency [HR00112190046]
FX This work was supported by the National Science Foundation (CCF-1918839
   and CCF-2217064), and the Defense Advanced Research Projects Agency
   (#HR00112190046). Yi Ding is supported by the National Science
   Foundation under Grant No. 2030859 to the Computing Research Association
   for the CIFellows Project. Any opinions, findings, and conclusions or
   recommendations expressed in this material are those of the authors and
   do not necessarily reflect the views of the sponsors.
CR Adams A., 2010, ACM SIGGRAPH 2010 papers, p29:1, DOI DOI 10.1145/1833349.1778766
   Agarwala Atish, 2021, INT C LEARN REPR
   Arora S, 2019, PR MACH LEARN RES, V97
   Bao T, 2012, ACM SIGPLAN NOTICES, V47, P897, DOI 10.1145/2398857.2384681
   Boston B, 2015, ACM SIGPLAN NOTICES, V50, P470, DOI [10.1145/2858965.2814301, 10.1145/2814270.2814301]
   Burr Settles, 2009, Technical Report
   Cadar C., 2008, USENIX S OP SYST DES
   Carbin M, 2013, ACM SIGPLAN NOTICES, V48, P33, DOI [10.1145/2544173.2509546, 10.1145/2509136.2509546]
   Christensen P, 2018, ACM T GRAPHIC, V37, DOI 10.1145/3182162
   Cortes Corinna, 2019, INT C ART INT STAT
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Darulova E, 2014, ACM SIGPLAN NOTICES, V49, P235, DOI 10.1145/2535838.2535874
   Esmaeilzadeh H, 2012, INT SYMP MICROARCH, P449, DOI 10.1109/MICRO.2012.48
   Griewank A, 2008, OTHER TITL APPL MATH, V105, P1
   Henning JL, 2000, COMPUTER, V33, P28, DOI 10.1109/2.869367
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6012, P287, DOI 10.1007/978-3-642-11957-6_16
   Ipek E, 2006, ACM SIGPLAN NOTICES, V41, P195, DOI 10.1145/1168918.1168882
   Kang B, 2002, J KOREAN PHYS SOC, V41, P865
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Kustowski B, 2020, IEEE T PLASMA SCI, V48, P46, DOI 10.1109/TPS.2019.2948339
   Lettier David, 2019, 3D Game Shaders For Beginners
   Magron V, 2017, ACM T MATH SOFTWARE, V43, DOI 10.1145/3015465
   Mendis Charith, 2020, Ph.D. Thesis
   Misailovic S, 2014, ACM SIGPLAN NOTICES, V49, P309, DOI [10.1145/10.1145/2660193.2660231, 10.1145/2714064.2660231]
   Nielson Flemming, 2015, Principles of Program Analysis, DOI [10.1007/978-3-662-03811-6, DOI 10.1007/978-3-662-03811-6]
   Pestourie R, 2020, NPJ COMPUT MATER, V6, DOI 10.1038/s41524-020-00431-2
   Renda Alex, 2021, Onward! 2021: Proceedings of the 2021 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software, P18, DOI 10.1145/3486607.3486748
   Renda A, 2020, 2020 53RD ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO 2020), P442, DOI 10.1109/MICRO50266.2020.00045
   Sampson A, 2011, ACM SIGPLAN NOTICES, V46, P164, DOI 10.1145/1993316.1993518
   Santner TJ, 2003, The Design and Analysis of Computer Experiments, DOI DOI 10.1007/978-1-4757-3799-8
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   She DD, 2019, P IEEE S SECUR PRIV, P803, DOI 10.1109/SP.2019.00052
   Solovyev A, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3230733
   Tatarchuk Natalya, 2009, ACM SIGGRAPH 2009 CO, DOI [10.1145/1667239.1667243, DOI 10.1145/1667239.1667243]
   Tercan H, 2018, PROC CIRP, V72, P185, DOI 10.1016/j.procir.2018.03.087
   Thompson Steven K., 2012, Stratified Sampling, P139, DOI [DOI 10.1002/9781118162934.CH11, 10.1002/9781118162934.ch11]
   Tseng E, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3306346.3322996
   VALIANT LG, 1984, COMMUN ACM, V27, P1134, DOI 10.1145/1968.1972
   VAPNIK VN, 1971, THEOR PROBAB APPL+, V16, P264, DOI 10.1137/1116025
   WENGERT RE, 1964, COMMUN ACM, V7, P463, DOI 10.1145/355586.364791
   Winskel Glynn., 1993, The Formal Semantics of Programming Languages: An Introduction, DOI DOI 10.7551/MITPRESS/3054.001.0001
   Yazdanbakhsh A, 2017, IEEE DES TEST, V34, P60, DOI 10.1109/MDAT.2016.2630270
NR 42
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 280
DI 10.1145/3622856
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100060
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Bansal, M
   Hsu, O
   Olukotun, K
   Kjolstad, F
AF Bansal, Manya
   Hsu, Olivia
   Olukotun, Kunle
   Kjolstad, Fredrik
TI Mosaic: An Interoperable Compiler for Tensor Algebra
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE sparse tensor algebra; compilation; external functions; automated search
ID SPARSE; LANGUAGE; MATLAB; PERFORMANCE; FRAMEWORK
AB We introduce Mosaic, a sparse tensor algebra compiler that can bind tensor expressions to external functions of other tensor algebra libraries and compilers. Users can extend Mosaic by adding new functions and bind a sub-expression to a function using a scheduling API. Mosaic substitutes the bound sub-expressions with calls to the external functions and automatically generates the remaining code using a default code generator. As the generated code is fused by default, users can productively leverage both fusion and calls to specialized functions within the same compiler. We demonstrate the benefits of our dual approach by showing that calling hand-written CPU and specialized hardware functions can provide speedups of up to 206x against fused code in some cases, while generating fused code can provide speedups of up to 3.57x against code that calls external functions in other cases. Mosaic also offers a search system that can automatically map an expression to a set of registered external functions. Both the explicit binding and automatic search are verified by Mosaic. Additionally, the interface for adding new external functions is simple and general. Currently, 38 external functions have been added to Mosaic, with each addition averaging 20 lines of code.
C1 [Bansal, Manya; Hsu, Olivia; Olukotun, Kunle; Kjolstad, Fredrik] Stanford Univ, Stanford, CA USA.
C3 Stanford University
RP Bansal, M (corresponding author), Stanford Univ, Stanford, CA USA.
EM manya227@stanford.edu; owhsu@stanford.edu; kunle@stanford.edu;
   kjolstad@stanford.edu
OI Olukotun, Kunle/0000-0002-8779-0636; Hsu, Olivia/0000-0002-4195-8106;
   Kjolstad, Fredrik Berg/0000-0002-2267-903X
FU National Science Foundation [CCF-2143061, 1937301]; GRFP Fellowship;
   Google Research Scholar program; Stanford Data Analytics for What's Next
   (DAWN) Affiliate Program
FX We thank Jason Ansel, Pranav Bansal, James Dong, Timothy Gu, Praneeth
   Kolichala, Scott Kovach, Rubens Lacouture, Luca Pistor, Alexander J.
   Root, Shiv Sundram, Rohan Yadav, and Bobby Yan for their helpful
   feedback. This work was supported in part by the National Science
   Foundation under Grants CCF-2143061 and 1937301 and the GRFP Fellowship,
   the Google Research Scholar program, and Stanford Data Analytics for
   What's Next (DAWN) Affiliate Program. Any opinions, findings,
   conclusions, or recommendations expressed in this material are those of
   the authors and do not necessarily reflect the views of the
   aforementioned funding agencies.
CR Adams A, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3306346.3322967
   Ahrens P, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P269, DOI 10.1145/3519939.3523442
   Anderson L, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485486
   [Anonymous], 2009, INT MATH KERN LIB RE
   [Anonymous], 2011, INT ADV VECT EXT PRO
   [Anonymous], 2010, Version 7.10.0 (R2010a)
   Bader BW, 2007, SIAM J SCI COMPUT, V30, P205, DOI 10.1137/060676489
   Bader BW, 2006, ACM T MATH SOFTWARE, V32, P635, DOI 10.1145/1186785.1186794
   Bansal Manya, 2023, Zenodo, DOI 10.5281/ZENODO.7814275
   Bezanson J, 2017, SIAM REV, V59, P65, DOI 10.1137/141000671
   Bik A, 2022, ACM T ARCHIT CODE OP, V19, DOI 10.1145/3544559
   Chen Chun, 2007, FRAMEWORK COMPOSING
   Chen TQ, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P579
   Chen YH, 2019, Arxiv, DOI arXiv:1807.07928
   Choquette J, 2021, IEEE MICRO, V41, P29, DOI 10.1109/MM.2021.3061394
   Chou S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276493
   Dadu V, 2019, MICRO'52: THE 52ND ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, P924, DOI 10.1145/3352460.3358276
   Dalton S, 2014, CUSP GENERIC PARALLE
   Davis TA, 2011, ACM T MATH SOFTWARE, V38, DOI 10.1145/2049662.2049663
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   GILBERT JR, 1992, SIAM J MATRIX ANAL A, V13, P333, DOI 10.1137/0613024
   Gough, 2009, GNU SCI LIB REFERENC
   Guowei Zhang, 2021, ASPLOS 2021: Proceedings of the 26th International Conference on Architectural Support for Programming Languages and Operating Systems, P687, DOI 10.1145/3445814.3446702
   Gustavson F. G., 1978, ACM Transactions on Mathematical Software, V4, P250, DOI 10.1145/355791.355796
   Hagedorn B, 2020, Arxiv, DOI arXiv:2002.02268
   He X., 2020, P INT C SUP ICS 20, P1
   Hegde K, 2019, MICRO'52: THE 52ND ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, P319, DOI 10.1145/3352460.3358275
   Hsu Olivia, 2023, ASPLOS 2023: Proceedings of the 28th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, P710, DOI 10.1145/3582016.3582051
   Hsu Olivia, 2022, arXiv
   Huang Jianyu., 2017, STRASSENS ALGORITHM
   Ikarashi Y, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P703, DOI 10.1145/3519939.3523446
   Jouppi NP, 2017, 44TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA 2017), P1, DOI 10.1145/3079856.3080246
   Kim Y, 2016, IEEE COMPUT ARCHIT L, V15, P45, DOI 10.1109/LCA.2015.2414456
   Kjolstad F, 2019, INT SYM CODE GENER, P180, DOI [10.1109/cgo.2019.8661185, 10.1109/CGO.2019.8661185]
   Kjolstad F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133901
   Kjolstad Fredrik, 2022, TACO TENSOR ALGEBRA
   Koeplinger D, 2018, ACM SIGPLAN NOTICES, V53, P296, DOI [10.1145/3296979.3192379, 10.1145/3192366.3192379]
   Kolda T.G., 2006, Technical Report
   Koren Y, 2009, COMPUTER, V42, P30, DOI 10.1109/MC.2009.263
   Lawson C. L., 1979, ACM Transactions on Mathematical Software, V5, P324, DOI [10.1145/355841.355847, 10.1145/355841.355848]
   Matthews Devin, 2016, arXiv
   Mullapudi RT, 2016, ACM T GRAPHIC, V35, DOI 10.1145/2897824.2925952
   Mutlu E, 2022, LECT NOTES COMPUT SC, V13149, P87, DOI 10.1007/978-3-030-95953-1_7
   Naumov Maxim, 2010, GPU TECHNOLOGY C
   NVIDIA, 2022, TENS COR
   NVIDIA, 2022, CUTLASS
   Pal S, 2018, INT S HIGH PERF COMP, P724, DOI 10.1109/HPCA.2018.00067
   Qin E, 2020, INT S HIGH PERF COMP, P58, DOI 10.1109/HPCA47549.2020.00015
   Ragan-Kelley J, 2012, ACM T GRAPHIC, V31, DOI 10.1145/2185520.2185528
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Rucker A, 2021, INT SYMP MICROARCH, P1022, DOI 10.1145/3466752.3480047
   Senanayake R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428226
   Singh N, 2022, J PARALLEL DISTR COM, V169, P269, DOI 10.1016/j.jpdc.2022.07.005
   Solomonik E, 2015, Arxiv, DOI arXiv:1512.00066
   Solomonik E, 2014, J PARALLEL DISTR COM, V74, P3176, DOI 10.1016/j.jpdc.2014.06.002
   Srivastava N, 2020, 2020 53RD ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO 2020), P766, DOI 10.1109/MICRO50266.2020.00068
   Srivastava N, 2020, INT S HIGH PERF COMP, P689, DOI 10.1109/HPCA47549.2020.00062
   Stephens N, 2018, Arxiv, DOI arXiv:1803.06185
   Strout MM, 2018, P IEEE, V106, P1921, DOI 10.1109/JPROC.2018.2857721
   Tian RQ, 2021, PROCEEDINGS OF THE SEVENTH ANNUAL WORKSHOP ON THE LLVM COMPILER INFRASTRUCTURE IN HPC (LLVM-HPC2021), P27, DOI 10.1109/LLVMHPC54804.2021.00009
   Van Zee FG, 2015, ACM T MATH SOFTWARE, V41, DOI 10.1145/2764454
   Venkat A, 2015, ACM SIGPLAN NOTICES, V50, P521, DOI [10.1145/2813885.2738003, 10.1145/2737924.2738003]
   Whaley RC, 2005, SOFTWARE PRACT EXPER, V35, P101, DOI 10.1002/spe.626
   Yadav R, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P286, DOI 10.1145/3519939.3523437
   Ye Zihao, 2023, ASPLOS 2023: Proceedings of the 28th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, P660, DOI 10.1145/3582016.3582047
   Yi Q, 2012, SOFTWARE PRACT EXPER, V42, P675, DOI 10.1002/spe.1089
   Zhang YQ, 2021, CONF PROC INT SYMP C, P1041, DOI 10.1109/ISCA52012.2021.00085
   Zhang YQ, 2019, PROCEEDINGS OF THE 2019 46TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA '19), P615, DOI 10.1145/3307650.3322249
   Zhao TW, 2022, ACM T ARCHIT CODE OP, V20, DOI 10.1145/3566054
   Zheng SZ, 2022, CONF PROC INT SYMP C, P874, DOI 10.1145/3470496.3527440
NR 70
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 122
DI 10.1145/3591236
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900018
OA gold
DA 2024-07-18
ER

PT J
AU Moseley, D
   Nishio, M
   Rodriguez, JP
   Saarikivi, O
   Toub, S
   Veanes, M
   Xu, E
AF Moseley, Dan
   Nishio, Mario
   Rodriguez, Jose Perez
   Saarikivi, Olli
   Toub, Stephen
   Veanes, Margus
   Xu, Eric
TI Derivative Based Nonbacktracking Real-World Regex Matching with
   Backtracking Semantics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE regex; derivative; symbolic; matching; automata; PCRE
ID REGULAR EXPRESSIONS; KLEENE ALGEBRA
AB We develop a new derivative based theory and algorithm for nonbacktracking regex matching that supports anchors and counting, preserves backtracking semantics, and can be extended with lookarounds. The algorithm has been implemented as a new regex backend in.NET and was extensively tested as part of the formal release process of.NET7. We present a formal proof of the correctness of the algorithm, which we believe to be the first of its kind concerning industrial implementations of regex matchers. The paper describes the complete foundation, the matching algorithm, and key aspects of the implementation involving a regex rewrite system, as well as a comprehensive evaluation over industrial case studies and other regex engines.
C1 [Moseley, Dan; Nishio, Mario; Rodriguez, Jose Perez; Saarikivi, Olli; Toub, Stephen; Veanes, Margus; Xu, Eric] Microsoft, Redmond, WA 98052 USA.
C3 Microsoft
RP Moseley, D (corresponding author), Microsoft, Redmond, WA 98052 USA.
EM danmose@microsoft.com; mario.nishio@microsoft.com;
   joperezr@microsoft.com; olsaarik@microsoft.com; stoub@microsoft.com;
   margus@microsoft.com; ericxu@microsoft.com
CR [Anonymous], 1973, P 5 S THEOR COMP, DOI [10.1145/800125.804029, DOI 10.1145/800125.804029]
   [Anonymous], 2020, CVC4
   [Anonymous], 1961, Surveys, DOI [10.1070/RM1961v016n05ABEH004112, DOI 10.1070/RM1961V016N05ABEH004112]
   Antimirov V, 1996, THEOR COMPUT SCI, V155, P291, DOI 10.1016/0304-3975(95)00182-4
   Ausaf F, 2016, LECT NOTES COMPUT SC, V9807, P69, DOI 10.1007/978-3-319-43144-4_5
   Baldwin Adam, 2016, REGULAR EXPRESSION D
   Berglund M, 2021, THEOR COMPUT SCI, V857, P147, DOI 10.1016/j.tcs.2021.01.010
   Briggs P., 1993, ACM Letters on Programming Languages and Systems, V2, P59, DOI 10.1145/176454.176484
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Budzianowski P, 2018, 2018 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2018), P5016
   Cox R., 2010, Regular expression matching in the wild
   D'Antoni L, 2014, ACM SIGPLAN NOTICES, V49, P541, DOI 10.1145/2535838.2535849
   Davis JC, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P1256, DOI 10.1145/3338906.3342509
   Davis JC, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P246, DOI 10.1145/3236024.3236027
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Fischer S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P357
   Frisch A, 2004, LECT NOTES COMPUT SC, V3142, P618
   GNU, 2020, GREP
   Google, 2021, RE2
   Graham-Cumming J., 2019, DETAILS CLOUDFLARE O
   Herczeg Zoltan, 2015, PERFORMANCE COMP REG
   Hooirneijer P, 2011, LECT NOTES COMPUT SC, V6538, P248, DOI 10.1007/978-3-642-18275-4_18
   Intel Co, 2021, HYP
   Juarez Mario, 2020, LANGUAGES REGEX BENC
   Keil Matthias, 2014, FSTTCS 14 LIPICS, P175, DOI [10.4230/LIPIcs.FSTTCS.2014.175, DOI 10.4230/LIPICS.FSTTCS.2014.175]
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Laurikari V, 2000, SPIRE 2000: SEVENTH INTERNATIONAL SYMPOSIUM ON STRING PROCESSING AND INFORMATION RETRIEVAL - PROCEEDINGS, P181, DOI 10.1109/SPIRE.2000.878194
   Liang TY, 2015, LECT NOTES ARTIF INT, V9322, P135, DOI 10.1007/978-3-319-24246-0_9
   Loring B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P425, DOI 10.1145/3314221.3314645
   Microsoft, 2021, CredScan
   Microsoft, 2022, NET REG EXPR
   Microsoft, 2021, REG EXPR LANG QUICK
   Microsoft, 2021, NET PERF
   Moseley Dan, 2023, Zenodo, DOI 10.5281/ZENODO.7709500
   Moseley Dan, 2023, MSRTR202315
   OWASP, 2020, REG EXPR DEN SERV RE
   Owens S, 2009, J FUNCT PROGRAM, V19, P173, DOI 10.1017/S0956796808007090
   Pous D, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2676726.2677007, 10.1145/2775051.2677007]
   Saarikivi O, 2019, LECT NOTES COMPUT SC, V11427, P372, DOI 10.1007/978-3-030-17462-0_24
   Spencer Henry, 1994, CHAPTER REGULAREXPRE, P35
   Stack Exchange, 2016, OUT POSTM
   Stanford C, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P620, DOI 10.1145/3453483.3454066
   Sulzmann M., 2012, P 14 S PRINCIPLES PR, P79, DOI DOI 10.1145/2370776.2370788
   THOMPSON K, 1968, COMMUN ACM, V11, P419, DOI 10.1145/363347.363387
   Turonová L, 2022, PROCEEDINGS OF THE 31ST USENIX SECURITY SYMPOSIUM, P4165
   Turonová L, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428286
   Wingbrant O, 2019, Arxiv, DOI [arXiv:1907.13577, 10.48550/ARXIV.1907.13577, DOI 10.48550/ARXIV.1907.13577]
NR 47
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 148
DI 10.1145/3591262
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900044
OA gold
DA 2024-07-18
ER

PT J
AU Müller, MN
   Fischer, M
   Staab, R
   Vechev, M
AF Mueller, Mark Niklas
   Fischer, Marc
   Staab, Robin
   Vechev, Martin
TI Abstract Interpretation of Fixpoint Iterators with Applications to
   Neural Networks
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE fixpoint; abstract interpretation; equlibrium models; adversarial
   robustness
AB We present a new abstract interpretation framework for the precise over-approximation of numerical fixpoint iterators.Our key observation is that unlike in standard abstract interpretation (AI), typically used to over-approximate all reachable program states, in this setting, one only needs to abstract the concrete fixpoints, i.e., the final program states. Our framework targets numerical fixpoint iterators with convergence and uniqueness guarantees in the concrete and is based on two major technical contributions: (i) theoretical insights which allow us to compute sound and precise fixpoint abstractions without using joins, and (ii) a new abstract domain, CH-Zonotope, which admits efficient propagation and inclusion checks while retaining high precision.
   We implement our framework in a tool called Craft and evaluate it on a novel fixpoint-based neural network architecture (monDEQ) that is particularly challenging to verify. Our extensive evaluation demonstrates that Craft exceeds the state-of-the-art performance in terms of speed (two orders of magnitude), scalability (one order of magnitude), and precision (25% higher certified accuracies).
C1 [Mueller, Mark Niklas; Fischer, Marc; Staab, Robin; Vechev, Martin] Swiss Fed Inst Technol, Zurich, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich
RP Müller, MN (corresponding author), Swiss Fed Inst Technol, Zurich, Switzerland.
EM mark.mueller@inf.ethz.ch; marc.fischer@inf.ethz.ch;
   robin.staab@inf.ethz.ch; martin.vechev@inf.ethz.ch
FU EU grant ELSA (European Lighthouse on Secure and Safe AI) [101070617];
   SERI grant SAFEAI (Certified Safe, Fair and Robust Artificial
   Intelligence) [MB22.00088]; Swiss State Secretariat for Education,
   Research and Innovation (SERI)
FX This work has been done as part of the EU grant ELSA (European
   Lighthouse on Secure and Safe AI, grant agreement No. 101070617) and the
   SERI grant SAFEAI (Certified Safe, Fair and Robust Artificial
   Intelligence, contract no. MB22.00088). Views and opinions expressed are
   however those of the authors only and do not necessarily reflect those
   of the European Union or European Commission. Neither the European Union
   nor the European Commission can be held responsible for them. The work
   has received funding from the Swiss State Secretariat for Education,
   Research and Innovation (SERI).
CR Amato G, 2016, SCI COMPUT PROGRAM, V120, P1, DOI 10.1016/j.scico.2015.12.005
   Amato G, 2012, ELECTRON NOTES THEOR, V287, P17, DOI 10.1016/j.entcs.2012.09.003
   Amos B, 2017, PR MACH LEARN RES, V70
   Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7794269
   [Anonymous], 2003, EUR CONTR C
   Bai Shaojie, 2019, PROC NEURIPS
   Blanchet B, 2002, LECT NOTES COMPUT SC, V2566, P85
   Bourdoncle F., 1993, Formal Methods in Programming and Their Applications International Conference Proceedings, P128, DOI 10.1007/BFb0039704
   Chen Tong, 2021, Semialgebraic representation of monotone deep equilibrium models and applications to certification
   Cohen J, 2019, PR MACH LEARN RES, V97
   COUSOT P, 1979, PAC J MATH, V82, P43, DOI 10.2140/pjm.1979.82.43
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   COUSOT P, 1992, LECT NOTES COMPUT SC, V631, P269, DOI 10.1007/3-540-55844-6_142
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1977, FORMAL DESCRIPTION P
   El Ghaoui L, 2021, SIAM J MATH DATA SCI, V3, P930, DOI 10.1137/20M1358517
   Ferrari C., 2022, P ICLR
   Fu Feisi, 2022, P ICLR
   Gange G, 2013, LECT NOTES COMPUT SC, V7935, P6, DOI 10.1007/978-3-642-38856-9_3
   Gehr T, 2018, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2018.00058
   Ghorbal K, 2009, LECT NOTES COMPUT SC, V5643, P627, DOI 10.1007/978-3-642-02658-4_47
   Girard A, 2005, LECT NOTES COMPUT SC, V3414, P291
   Goodfellow I.J., 2015, PROC 3 INT C LEARN R
   Goubault E, 2008, LECT NOTES COMPUT SC, V4916, P3
   Goubault Eric, 2008, ARXIV, DOI DOI 10.48550/ARXIV.0807.2961
   Gowal S., 2019, arXiv
   Gowal S, 2019, Arxiv, DOI arXiv:1810.12715
   Guth Dwight, 2013, A formal semantics of Python 3.3
   Jiang SH, 2020, Arxiv, DOI arXiv:2004.07470
   Julian KD, 2019, IEEEAAIA DIGIT AVION, DOI 10.1109/dasc43569.2019.9081748
   Kellner K, 2015, Arxiv, DOI [arXiv:1509.02735, 10.48550/arXiv.1509.02735, DOI 10.48550/ARXIV.1509.02735]
   Kim S, 2021, CHAOS, V31, DOI 10.1063/5.0060697
   Kopetzki AK, 2017, IEEE DECIS CONTR P
   Krizhevsky Alex, 2009, LEARNING MULTIPLE LA
   Kuhn W, 1998, COMPUTING, V61, P47, DOI 10.1007/BF02684450
   Kulmburg A, 2021, EUR J CONTROL, V62, P84, DOI 10.1016/j.ejcon.2021.06.028
   Lecun Y, 1998, P IEEE, V86, P2278, DOI 10.1109/5.726791
   Lecuyer M, 2019, P IEEE S SECUR PRIV, P656, DOI 10.1109/SP.2019.00044
   Mirman M, 2018, PR MACH LEARN RES, V80
   Müller MN, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498704
   Pabbaraju C., 2021, INT C LEARN REPR
   Paszke A, 2019, ADV NEUR IN, V32
   Putot Sylvie, 2012, HABILITATION DIRIGER, DOI [10.1007/978-3-642-38856-9_1, DOI 10.1007/978-3-642-38856-9_1]
   Raghunathan A, 2018, ADV NEUR IN, V31
   Revay M, 2020, Arxiv, DOI arXiv:2010.01732
   Ryu EK, 2016, APPL COMPUT MATH-BAK, V15, P3
   Sadraddini S, 2019, IEEE DECIS CONTR P, P4367, DOI 10.1109/CDC40024.2019.9029363
   Serre F., 2021, P MACHINE LEARNING S
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Singh G, 2018, ADV NEUR IN, V31
   Singh Gagandeep, 2019, PROC NEURIPS
   Szegedy C, 2014, Arxiv, DOI [arXiv:1312.6199, DOI 10.1109/CVPR.2015.7298594]
   Tashiro Yusuke, 2020, PROC NEURIPS
   Vladu Adrian, 2018, PROC 6 INT C LEARN R
   Wang PW, 2019, PR MACH LEARN RES, V97
   Wang SQ, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P1599
   Wei C., 2022, INT C LEARN REPR
   Weng TW, 2018, PR MACH LEARN RES, V80
   Winston Ezra, 2020, PROC NEURIPS
   Wong E, 2018, PR MACH LEARN RES, V80
   Xu Kaidi, 2020, PROC NEURIPS
   Yang XJ, 2018, AUTOMATICA, V95, P378, DOI 10.1016/j.automatica.2018.06.006
   Yazarel H, 2004, P AMER CONTR CONF, P553
   Zhang Huan, 2018, PROC NEURIPS
NR 64
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 138
DI 10.1145/3591252
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900034
OA Green Submitted, gold, Green Published
DA 2024-07-18
ER

PT J
AU Rao, XJ
   Georges, AL
   Legoupil, M
   Watt, C
   Pichon-Pharabod, J
   Gardner, P
   Birkedal, L
AF Rao, Xiaojia
   Georges, Aina Linn
   Legoupil, Maxime
   Watt, Conrad
   Pichon-Pharabod, Jean
   Gardner, Philippa
   Birkedal, Lars
TI Iris-Wasm: Robust and Modular Verification of WebAssembly Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE WebAssembly; separation logic; higher-order logic; formal verification
AB WebAssembly makes it possible to run C/C++ applications on the web with near-native performance. A WebAssembly program is expressed as a collection of higher-order ML-like modules, which are composed together through a system of explicit imports and exports using a host language, enabling a form of higherorder modular programming. We present Iris-Wasm, a mechanized higher-order separation logic building on a specification of Wasm 1.0 mechanized in Coq and the Iris framework. Using Iris-Wasm, we are able to specify and verify individual modules separately, and then compose them modularly in a simple host language featuring the core operations of the WebAssembly JavaScript Interface. Building on Iris-Wasm, we develop a logical relation that enforces robust safety: unknown, adversarial code can only affect other modules through the functions that they explicitly export. Together, the program logic and the logical relation allow us to formally verify functional correctness of WebAssembly programs, even when they invoke and are invoked by unknown code, thereby demonstrating that WebAssembly enforces strong isolation between modules.
C1 [Rao, Xiaojia; Gardner, Philippa] Imperial Coll London, London, England.
   [Georges, Aina Linn; Legoupil, Maxime; Pichon-Pharabod, Jean; Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
   [Watt, Conrad] Univ Cambridge, Cambridge, England.
C3 Imperial College London; Aarhus University; University of Cambridge
RP Rao, XJ (corresponding author), Imperial Coll London, London, England.
EM xiaojia.rao19@imperial.ac.uk; ageorges@cs.au.dk; maxime@cs.au.dk;
   conrad.watt@cl.cam.ac.uk; jean.pichon@cs.au.dk;
   p.gardner@imperial.ac.uk; birkedal@cs.au.dk
OI Legoupil, Maxime/0009-0005-4093-2755; Birkedal,
   Lars/0000-0003-1320-0098; Georges, Aina Linn/0000-0002-5951-4642; Rao,
   Xiaojia/0009-0008-4391-1214; Watt, Conrad/0000-0002-0596-877X
FU Villum Investigator grant [25804]; Center for Basic Research in Program
   Verification (CPV), from the VILLUM Foundation; Peterhouse, University
   of Cambridge; Department of Computing, Imperial College London; EPSRC
   fellowship VeTSpec: Verified Trustworthy Software Specification
   [EP/R034567/1]
FX This work was supported in part by a Villum Investigator grant (no.
   25804), Center for Basic Research in Program Verification (CPV), from
   the VILLUM Foundation. Conrad Watt is supported by a Research Fellowship
   from Peterhouse, University of Cambridge. Rao is supported by a Doctoral
   Scholarship Award from Department of Computing, Imperial College London.
   Gardner is supported by the EPSRC fellowship VeTSpec: Verified
   Trustworthy Software Specification (EP/R034567/1).
CR Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7808708
   Birkedal Lars, 2017, Lecture Notes on Iris: Higher-Order Concurrent Separation Log
   ConradWatt Petar Maksimovic, 2019, LIPICS, V134, DOI [10.4230/LIPIcs.ECOOP.2019.9, DOI 10.4230/LIPICS.ECOOP.2019.9]
   Disselkoen C, 2019, PROCEEDINGS OF THE 8TH INTERNATIONAL WORKSHOP ON HARDWARE AND ARCHITECTURAL SUPPORT FOR SECURITY AND PRIVACY, HASP '19, DOI 10.1145/3337167.3337171
   Ehrenberg Daniel., 2019, WEBASSEMBLY JAVASCRI
   Feng XY, 2005, ACM SIGPLAN NOTICES, V40, P254, DOI 10.1145/1090189.1086399
   Fitzgibbons Michael., 2022, CAPABLEWASM BRINGING
   Georges AL, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434287
   Georges Aina Linn, 2022, CERISE PROGRAM VERIF
   Georges Aina Linn, 2021, JOURNEES FRANCOPHONE
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Hickey Pat, 2020, FASTLY DEVELOPER COM
   Jacobs K, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527326
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kennedy Andrew., 2013, P 15 S PRINCIPLES PR, P13, DOI DOI 10.1145/2505879.2505897
   Kolosick M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498688
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Lehmann D, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P217
   Michael AE, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571208
   Morrisett G, 2012, ACM SIGPLAN NOTICES, V47, P395, DOI 10.1145/2345156.2254111
   Mulder I, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P809, DOI 10.1145/3519939.3523432
   Narayan S, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P699
   Ni ZZ, 2006, ACM SIGPLAN NOTICES, V41, P320, DOI 10.1145/1111320.1111066
   Rossberg Andreas, 2019, Tech. Rep.
   Sammler M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571220
   Swasey D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133913
   Watson RNM, 2015, P IEEE S SECUR PRIV, P20, DOI 10.1109/SP.2015.9
   Watt C, 2021, LECT NOTES COMPUT SC, V13047, P61, DOI 10.1007/978-3-030-90870-6_4
   Yu DC, 2004, ACM SIGPLAN NOTICES, V39, P175, DOI 10.1145/1016848.1016875
   Yu DC, 2003, LECT NOTES COMPUT SC, V2618, P363
NR 34
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 151
DI 10.1145/3591265
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900047
OA gold
DA 2024-07-18
ER

PT J
AU Zhang, GQ
   Mariano, B
   Shen, XP
   Dillig, I
AF Zhang, Guoqiang
   Mariano, Benjamin
   Shen, Xipeng
   Dillig, Isil
TI Automated Translation of Functional Big Data ∼eries to SQL
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; source-to-source compiler; query optimization
ID FRAMEWORK; QUERIES; TRANSFORMATIONS; CONSOLIDATION; MIGRATION; EXAMPLE
AB Big data analytics frameworks like Apache Spark and Flink enable users to implement queries over large, distributed databases using functional APIs. In recent years, these APIs have grown in popularity because their functional interfaces abstract away much of the minutiae of distributed programming required by traditional query languages like SQL. However, the convenience of these APIs comes at a cost because functional queries are often less e similar to cient than their SQL counterparts. Motivated by this observation, we present a new technique for automatically transpiling functional queries to SQL. While our approach is based on the standard paradigm of counterexample-guided inductive synthesis, it uses a novel column-wise decomposition technique to split the synthesis task into smaller subquery synthesis problems. We have implemented this approach as a new tool called RDD2SQL for translating Spark RDD queries to SQL and empirically evaluate the e similar to ectiveness of RDD2SQL on a set of real-world RDD queries. Our results show that (1) most RDD queries can be translated to SQL, (2) our tool is very e similar to ective at automating this translation, and (3) performing this translation o similar to ers signi similar to cant performance bene similar to ts.
C1 [Zhang, Guoqiang; Shen, Xipeng] North Carolina State Univ, Raleigh, NC 27695 USA.
   [Mariano, Benjamin; Dillig, Isil] Univ Texas Austin, Austin, TX 78712 USA.
C3 North Carolina State University; University of Texas System; University
   of Texas Austin
RP Zhang, GQ (corresponding author), North Carolina State Univ, Raleigh, NC 27695 USA.
EM gzhang9@ncsu.edu; bmariano@cs.utexas.edu; xshen5@ncsu.edu;
   isil@cs.utexas.edu
OI Dillig, Isil/0000-0001-8006-1230; Shen, Xipeng/0000-0003-3599-8010
FU National Science Foundation (NSF) [CCF-1703487]
FX This material is based upon work supported by the National Science
   Foundation (NSF) under Grant No. CCF-1703487. Any opinions, findings,
   and conclusions or recommendations expressed in this material are those
   of the authors and do not necessarily reflect the views of NSF.
CR Ahmad MB, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3355089.3356549
   Alexandrov A, 2014, VLDB J, V23, P939, DOI 10.1007/s00778-014-0357-y
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, LECT NOTES COMPUT SC, V9207, P163, DOI 10.1007/978-3-319-21668-3_10
   Armbrust M, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1383, DOI 10.1145/2723372.2742797
   Begoli E, 2018, INT CONF MANAGE DATA, P221, DOI 10.1145/3183713.3190662
   Beyer D, 2013, LECT NOTES COMPUT SC, V7792, P472, DOI 10.1007/978-3-642-37036-6_26
   Carbone P., 2015, IEEE DATA ENG B, V36, P28, DOI DOI 10.1109/IC2EW.2016.56
   Chaiken R, 2008, PROC VLDB ENDOW, V1, P1265, DOI 10.14778/1454159.1454166
   Cheung A, 2013, ACM SIGPLAN NOTICES, V48, P3, DOI 10.1145/2499370.2462180
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Crotty Andrew., 2015, CIDR
   Emani KV, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1663, DOI 10.1145/3035918.3058747
   Essertel GM, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P799
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Graefe G., 1993, Proceedings. Ninth International Conference on Data Engineering (Cat. No.92CH3258-1), P209, DOI 10.1109/ICDE.1993.344061
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Guo Zhenyu., 2012, 10th USENIX Symposium on Operating Systems Design and Implementation, OSDI 2012, Hollywood, CA, USA, October 8-10, 2012, P121
   Guria SN, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P344, DOI 10.1145/3453483.3454048
   Jin ZJ, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P683, DOI 10.1145/3035918.3064034
   Nguyen K, 2018, ACM SIGPLAN NOTICES, V53, P56, DOI [10.1145/3296957.3173200, 10.1145/3173162.3173200]
   Lin Cheng, 2019, Formal Methods and Software Engineering. 21st International Conference on Formal Engineering Methods, ICFEM 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11852), P104, DOI 10.1007/978-3-030-32409-4_7
   Maas M., 2015, 15 WORKSH HOT TOP OP, P1
   Mariano B, 2020, IEEE INT CONF AUTOM, P262, DOI 10.1145/3324884.3416626
   Martins R, 2019, PROC VLDB ENDOW, V12, P1914, DOI 10.14778/3352063.3352098
   Navasca C, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P538, DOI 10.1145/3341301.3359643
   Nguyen K, 2015, ACM SIGPLAN NOTICES, V50, P675, DOI [10.1145/2694344.2694345, 10.1145/2775054.2694345]
   Noor MH, 2020, IEEE INT CONF BIG DA, P469, DOI 10.1109/BigData50022.2020.9378136
   Orvalho P, 2020, PROC VLDB ENDOW, V13, P2853, DOI 10.14778/3415478.3415492
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Pailoor S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P574, DOI 10.1145/3453483.3454063
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Tran QT, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P535
   Raza M, 2020, SIGMOD'20: PROCEEDINGS OF THE 2020 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1967, DOI 10.1145/3318464.3380608
   Shi XH, 2019, ACM T COMPUT SYST, V36, DOI 10.1145/3310361
   Sidhanta S, 2016, IEEE ACM INT SYMP, P193, DOI 10.1109/CCGrid.2016.10
   Singh R, 2012, PROC VLDB ENDOW, V5, P740
   Singh R, 2016, PROC VLDB ENDOW, V9, P816, DOI 10.14778/2977797.2977807
   Singh R, 2017, PROC VLDB ENDOW, V11, P189, DOI 10.14778/3149193.3149199
   Sivaraman A, 2016, PROCEEDINGS OF THE 2016 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '16), P15, DOI 10.1145/2934872.2934900
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2980983.2908102, 10.1145/2908080.2908102]
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Solarlezama Armando, 2008, PROGRAM SYNTHESIS SK
   Sousa M, 2014, ACM SIGPLAN NOTICES, V49, P554, DOI [10.1145/2594291.2594305, 10.1145/2666356.2594305]
   Takenouchi K, 2021, PROC VLDB ENDOW, V14, P1937, DOI 10.14778/3476249.3476253
   Thakkar A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1110, DOI 10.1145/3453483.3454098
   Veith H, 2010, P ASE, P407, DOI [10.1145/1858996.1859084, DOI 10.1145/1858996.1859084]
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang KW, 2019, CLUSTER COMPUT, V22, P2223, DOI 10.1007/s10586-017-1466-3
   Wang YP, 2020, PROC VLDB ENDOW, V13, P1006, DOI 10.14778/3384345.3384350
   Xu GH, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P306, DOI 10.1145/3341301.3359649
   Yaghmazadeh N, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133887
   Yaghmazadeh N, 2018, PROC VLDB ENDOW, V11, P580, DOI 10.1145/3177732.3177735
   Yaghmazadeh N, 2016, ACM SIGPLAN NOTICES, V51, P508, DOI [10.1145/2980983.2908088, 10.1145/2908080.2908088]
   Zaharia Matei, 2010, 2 USENIX WORKSHOP HO
   Zaharia Matei., 2012, NSDI 12
   Zhang GQ, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485489
   Zhang S, 2013, IEEE INT CONF AUTOM, P224, DOI 10.1109/ASE.2013.6693082
NR 60
TC 1
Z9 1
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586047
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600022
OA gold
DA 2024-07-18
ER

PT J
AU Di Giusto, C
   Ferré, D
   Laversa, L
   Lozes, E
AF Di Giusto, Cinzia
   Ferre, Davide
   Laversa, Laetitia
   Lozes, Etienne
TI A Partial Order View of Message-Passing Communication Models
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Asynchronous Communication; Message-passing; Monadic Second order Logic;
   Bounded Model Checking; Bounded Treewidth
ID INFORMATION
AB There is a wide variety of message-passing communication models, ranging from synchronous "rendez-vous" communications to fully asynchronous/out-of-order communications. For large-scale distributed systems, the communication model is determined by the transport layer of the network, and a few classes of orders of message delivery (FIFO, causally ordered) have been identified in the early days of distributed computing. For local-scale message-passing applications, e.g., running on a single machine, the communication model may be determined by the actual implementation of message bufiers and by how FIFO queues are used. While large-scale communication models, such as causal ordering, are defined by logical axioms, local-scale models are often defined by an operational semantics. In this work, we connect these two approaches, and we present a unified hierarchy of communication models encompassing both large-scale and local-scale models, based on their concurrent behaviors. We also show that all the communication models we consider can be axiomatized in the monadic second order logic, and may therefore benefit from several bounded verification techniques based on bounded special treewidth.
C1 [Di Giusto, Cinzia; Ferre, Davide; Laversa, Laetitia; Lozes, Etienne] Univ Cote dAzur, CNRS, I3S, Nice, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite Cote
   d'Azur
RP Di Giusto, C (corresponding author), Univ Cote dAzur, CNRS, I3S, Nice, France.
EM cinzia.di-giusto@univ-cotedazur.fr; ferre@i3s.unice.fr;
   laetitia.laversa@univ-cotedazur.fr; etienne.lozes@univ-cotedazur.fr
OI lozes, etienne/0000-0001-8505-585X; Di Giusto,
   Cinzia/0000-0003-1563-6581; Ferre, Davide/0000-0002-6578-6804; Laversa,
   Laetitia/0000-0003-3775-6496
CR Babaoglu O, 1993, Consistent global states of distributed systems: fundamental concepts and mechanisms, P55
   Basu S, 2016, THEOR COMPUT SCI, V656, P60, DOI 10.1016/j.tcs.2016.09.023
   Bollig Benedikt, 2021, UNIFYING FRAMEWORK D
   Bollig Benedikt, 2021, 32 INT C CONCURRENCY, V203
   Bollig Benedikt, 2019, ABS190406942 CORR, P1
   Botbol V, 2017, LECT NOTES COMPUT SC, V10145, P73, DOI 10.1007/978-3-319-52234-0_5
   Bouajjani A, 2018, LECT NOTES COMPUT SC, V10982, P372, DOI 10.1007/978-3-319-96142-2_23
   BRAND D, 1983, J ACM, V30, P323, DOI 10.1145/322374.322380
   CharronBost B, 1996, DISTRIB COMPUT, V9, P173, DOI 10.1007/s004460050018
   Chevrou F, 2016, FORM ASP COMPUT, V28, P847, DOI 10.1007/s00165-016-0379-x
   Cristian F, 1999, IEEE T PARALL DISTR, V10, P642, DOI 10.1109/71.774912
   Défago X, 2004, ACM COMPUT SURV, V36, P372, DOI 10.1145/1041680.1041682
   Di Giusto C, 2020, LECT NOTES COMPUT SC, V12077, P157, DOI 10.1007/978-3-030-45231-5_9
   Di Giusto Cinzia, 2022, RES REPORT
   Genest B, 2004, LECT NOTES COMPUT SC, V3340, P30
   Genest B, 2007, FUND INFORM, V80, P147
   Gleissenthall KV, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290372
   Heussner A, 2009, LECT NOTES COMPUT SC, V5578, P107, DOI 10.1007/978-3-642-02652-2_11
   Holzmann G.J, 2004, The SPIN Model Checker-Primer and Reference Manual, P1
   ITU-T, 2011, IYUTZ120
   Kragl Bernhard, 2018, LIPICS, V21, DOI 10.4230
   Kshemkalyani AD, 1998, DISTRIB COMPUT, V11, P91, DOI 10.1007/s004460050044
   La Torre S, 2009, LECT NOTES COMPUT SC, V5643, P477, DOI 10.1007/978-3-642-02658-4_36
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lange J, 2019, LECT NOTES COMPUT SC, V11561, P97, DOI 10.1007/978-3-030-25540-4_6
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Lohrey M, 2002, LECT NOTES COMPUT SC, V2303, P295
   Mattern F, 1995, LECT NOTES COMPUT SC, V938, P197
   PETERSON LL, 1989, ACM T COMPUT SYST, V7, P217, DOI 10.1145/65000.65001
   Raynal M., 2010, COMMUNICATION AGREEM, DOI DOI 10.2200/S00236ED1V01Y201004DCT002
   SCHIPER A, 1989, LECT NOTES COMPUT SC, V392, P219
   Tel G., 2000, Introduction to Distributed Algorithms, V2nd
   van Renesse Robbert, 1993, SIGOPS Oper. Syst. Rev., V27, P44, DOI DOI 10.1145/155848.155857
NR 33
TC 1
Z9 1
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571248
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500055
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Popescu, A
   Traytel, D
AF Popescu, Andrei
   Traytel, Dmitriy
TI Admissible Types-to-PERs Relativization in Higher-Order Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE higher-order logic (HOL); proof theory; interactive theorem proving;
   type; definition; relativization; Isabelle/HOL; partial equivalence
   relation
ID FORMAL VERIFICATION; HOL LIGHT
AB Relativizing statements in Higher-Order Logic (HOL) from types to sets is useful for improving productivity when working with HOL-based interactive theorem provers such as HOL4, HOL Light and Isabelle/HOL. This paper provides the first comprehensive definition and study of types-to-sets relativization in HOL, done in the more general form of types-to-PERs (partial equivalence relations). We prove that, for a large practical fragment of HOL which includes container types such as datatypes and codatatypes, types-to-PERs relativization is admissible, in that the provability of the original, type-based statement implies the provability of its relativized, PER-based counterpart. Our results also imply the admissibility of a previously proposed axiomatic extension of HOL with local type definitions. We have implemented types-to-PERs relativization as an Isabelle tool that performs relativization of HOL theorems on demand.
C1 [Popescu, Andrei] Univ Sheffield, Dept Comp Sci, Sheffield, S Yorkshire, England.
   [Traytel, Dmitriy] Univ Copenhagen, Dept Comp Sci, Copenhagen, Denmark.
C3 University of Sheffield; University of Copenhagen
RP Popescu, A (corresponding author), Univ Sheffield, Dept Comp Sci, Sheffield, S Yorkshire, England.
EM a.popescu@sheffield.ac.uk; traytel@di.ku.dk
RI Traytel, Dmitriy/AAC-6052-2021
OI Traytel, Dmitriy/0000-0001-7982-2768
CR Abadi M., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P355, DOI 10.1109/LICS.1990.113761
   Abbott M, 2005, THEOR COMPUT SCI, V342, P3, DOI 10.1016/j.tcs.2005.06.002
   Adams M, 2010, LECT NOTES COMPUT SC, V6327, P142, DOI 10.1007/978-3-642-15582-6_25
   Allen Stuart F., 1987, THESIS CORNELL U US
   Altenkirch T, 2019, LECT NOTES COMPUT SC, V11825, P155, DOI 10.1007/978-3-030-33636-3_7
   [Anonymous], 2010, EPIC SERIES COMPUTIN, DOI DOI 10.29007/36DT
   [Anonymous], 1959, Constructivity in mathematics
   [Anonymous], 1989, FPCA 1989, DOI DOI 10.1145/99370.99404
   Arthan Rob D., 2005, NEWSLETTER FORMAL AS
   Asperti A, 2011, LECT NOTES ARTIF INT, V6803, P64, DOI 10.1007/978-3-642-22438-6_7
   Barthe G, 2003, J FUNCT PROGRAM, V13, P261, DOI 10.1017/S0956796802004501
   Berghofer S, 2000, LECT NOTES COMPUT SC, V1869, P38
   Berghofer S, 1999, LECT NOTES COMPUT SC, V1690, P19
   Bernardy JP, 2012, IEEE S LOG, P135, DOI 10.1109/LICS.2012.25
   Bernardy JP, 2012, J FUNCT PROGRAM, V22, P107, DOI 10.1017/S0956796812000056
   Bernardy JP, 2011, LECT NOTES COMPUT SC, V6604, P108, DOI 10.1007/978-3-642-19805-2_8
   Bertot Y., 2004, INTERACTIVE THEOREM
   Blanchette Jasmin Christian, 2014, Interactive Theorem Proving. 5th International Conference, ITP 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8558, P93, DOI 10.1007/978-3-319-08970-6_7
   Bove A, 2009, LECT NOTES COMPUT SC, V5674, P73, DOI 10.1007/978-3-642-03359-9_6
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Divasón J, 2022, J AUTOM REASONING, V66, P1065, DOI 10.1007/s10817-022-09631-5
   Divason Jose, 2018, CPP 2018, P2, DOI [10.1145/3167103, DOI 10.1145/3167103]
   FREYD P, 1992, INFORM COMPUT, V98, P211, DOI 10.1016/0890-5401(92)90019-C
   Geuvers H, 2009, SADHANA-ACAD P ENG S, V34, P3, DOI 10.1007/s12046-009-0001-5
   Goallier G, 2008, LECT NOTES ARTIF INT, V5081, P333
   Gordon M.J.C., 1993, Introduction to HOL: A theorem proving environment for higher order logic
   Gordon MichaelJ. C., 1991, International Workshop on the HOL Theorem Proving System and its Applications, P2
   Grabowski A, 2010, J FORMALIZ REASON, V3, P153
   Hales T, 2015, Arxiv, DOI arXiv:1501.02155
   Harrison J, 1996, LECT NOTES COMPUT SC, V1166, P265, DOI 10.1007/BFb0031814
   Harrison J, 2009, LECT NOTES COMPUT SC, V5674, P60, DOI 10.1007/978-3-642-03359-9_4
   Hoogendijk P., 2000, Journal of Functional Programming, V10, P191, DOI 10.1017/S0956796899003640
   Huffman B, 2013, LECT NOTES COMPUT SC, V8307, P131, DOI 10.1007/978-3-319-03545-1_9
   Immler F, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P65, DOI 10.1145/3293880.3294093
   Kaufmann Matt, 2000, ComputerAided Reasoning: An Approach, DOI DOI 10.1007/978-1-4615-4449-4
   Kleene SC., 1945, J SYMBOLIC LOGIC, V10, P109
   Klein G, 2010, COMMUN ACM, V53, P107, DOI 10.1145/1743546.1743574
   Krivine J.L., 1993, LAMBDA CALCULUS TYPE
   Kuncar O, 2019, J AUTOM REASONING, V62, P237, DOI 10.1007/s10817-018-9464-6
   Kuncar O, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158112
   Kuncar O, 2015, CPP'15: PROCEEDINGS OF THE 2015 ACM CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P85, DOI 10.1145/2676724.2693175
   Kuncar O, 2015, LECT NOTES COMPUT SC, V9236, P234, DOI 10.1007/978-3-319-22102-1_16
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Melham ThomasF., 1989, Current Trends in Hardware Verification and Automated Theorem Proving, P341
   Milehins M, 2022, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP '22), P180, DOI 10.1145/3497775.3503674
   Mitchell John C., 1996, Foundation of computing series
   Myhill J., 1955, Zeitschrift fur mathematische Logik und Grundlagen der Mathematik, V1, P310, DOI [10.1002/malq.19550010407, DOI 10.1002/MALQ.19550010407]
   NIPKOW T, 1991, LECT NOTES COMPUT SC, V523, P1
   Nipkow T., 2002, LECT NOTES COMPUTER, V2283, DOI [10.1007/3-540-45949-9, DOI 10.1007/3-540-45949-9]
   Nipkow Tobias, 2014, Concrete Semantics with Isabelle/HOL
   OWRE S, 1992, LECT NOTES ARTIF INT, V607, P748
   Paulson Lawrence C., 1988, LNCS, V417, P246, DOI [10.1007/3-540-52335-9_58, DOI 10.1007/3-540-52335-9_58]
   Pitts Andrew M., 1993, GORDON MELHAM, P191
   Popescu Andrei, 2022, EXTENDED TECHNICAL R, DOI [10.5281/zenodo.7313923, DOI 10.5281/ZENODO.7313923]
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Russell Bertrand., 1919, Introduction to Mathematical Philosophy, P167
   Rutten JJMM, 2000, THEOR COMPUT SCI, V249, P3, DOI 10.1016/S0304-3975(00)00056-6
   Slind K, 2008, LECT NOTES COMPUT SC, V5170, P28, DOI 10.1007/978-3-540-71067-7_6
   The Isabelle Community, 2022, HOL MAIN SESS IS HOL
   The Isabelle Community, 2022, STAND LIB IS OL DIST
   Traytel Dmitriy, 2022, Zenodo, DOI 10.5281/ZENODO.7308911
   Traytel D, 2012, IEEE S LOG, P596, DOI 10.1109/LICS.2012.75
   Wenzel Makarius, 2022, ISABELLE ISAR IMPLEM
NR 65
TC 0
Z9 0
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571235
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500042
OA gold, Green Accepted
DA 2024-07-18
ER

PT J
AU Kirisame, M
   Shenoy, P
   Panchekha, P
AF Kirisame, Marisa
   Shenoy, Pranav
   Panchekha, Pavel
TI Optimal Heap Limits for Reducing Browser Memory Use
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE garbage collection; memory management; heap limit; JavaScript; web
   browser
ID GARBAGE COLLECTION; TIME
AB Garbage-collected language runtimes carefully tune heap limits to reduce garbage collection time and memory usage. However, there's a trade-off: a lower heap limit reduces memory use but increases garbage collection time. Classic methods for setting heap limits include manually tuned heap limits and multiple-of-live-size rules of thumb, but it is not clear when one rule is better than another or how to compare them.
   We address this problem with a new framework where heap limits are set for multiple heaps at once. Our key insight is that every heap limit rule induces a particular allocation of memory across multiple processes, and this allocation can be sub-optimal. We use our framework to derive an optimal lsquare-rootz heap limit rule, which minimizes total memory usage for any amount of total garbage collection time. Paradoxically, the square-root heap limit rule achieves this coordination without communication: it allocates memory optimally across multiple heaps without requiring any communication between those heaps.
   To demonstrate that this heap limit rule is effective, we prototype it for V8, the JavaScript runtime used in Google Chrome, Microsoft Edge, and other browsers, as well as in server-side frameworks like node.js and Deno. On real-world web pages, our prototype achieves reductions of approximately 16.0% of memory usage while keeping garbage collection time constant. On memory-intensive benchmarks, reductions of up to 30.0% of garbage collection time are possible with no change in total memory usage.
C1 [Kirisame, Marisa; Shenoy, Pranav; Panchekha, Pavel] Univ Utah, Comp Sci, Salt Lake City, UT 84112 USA.
C3 Utah System of Higher Education; University of Utah
RP Kirisame, M (corresponding author), Univ Utah, Comp Sci, Salt Lake City, UT 84112 USA.
EM marisa@cs.utah.edu; pranav.shenoy@utah.edu; pavpan@cs.utah.edu
OI Panchekha, Pavel/0000-0003-2621-3592
FU National Science Foundation [2119939]; V8 Research Grant
FX We thank the members of the V8 Garbage Collection team, including Hannes
   Payer, Michael Lippautz, Ulan Degenbaev, and Chris Hamilton, for
   explaining the architecture of the V8 garbage collector and suggesting
   implementation approaches. We also thank the Firefox Spidermonkey team
   (including Steve Fink and Jon Coppeard) for reading and commenting on
   the paper, as well as Tucker Hermans, Ryan Stutsman, and Matthew Flatt
   for technical help. Finally, we thank the anonymous reviewers for their
   comments and suggestions. This work was funded by the National Science
   Foundation under Grant No. 2119939 and by a V8 Research Grant.
CR Agarwal A, 2022, P IEEE S SECUR PRIV, P699, DOI [10.1109/SP46214.2022.9833711, 10.1109/SP46214.2022.00034]
   Aigner M, 2015, ACM SIGPLAN NOTICES, V50, P67, DOI 10.1145/2661088.2661089
   Alle Mythri, 2019, A Lighter V8
   Alonso Raphael, 1990, ADVISOR FLEXIBLE WOR, P153, DOI [10.1145/98457.98753, DOI 10.1145/98457.98753]
   Barrett E, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133876
   Brecht T, 2006, ACM T PROGR LANG SYS, V28, P908, DOI 10.1145/1152649.1152652
   BRIGGS P, 1992, SIGPLAN NOTICES, V27, P311, DOI 10.1145/143103.143143
   Cameron C, 2015, ACM SIGPLAN NOTICES, V50, P143, DOI 10.1145/2754169.2754180
   Degenbaev U, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276521
   Degenbaev U, 2019, PROCEEDINGS OF THE 2019 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT (ISMM '19), P89, DOI 10.1145/3315573.3329978
   Degenbaev U, 2016, ACM SIGPLAN NOTICES, V51, P570, DOI [10.1145/2980983.2908106, 10.1145/2908080.2908106]
   Degenbaev Ulan, 2018, Concurrent marking in V8
   Flatt Matthew., 2022, cs: experiment with a revised major-GC trigger
   Hertz M, 2005, ACM SIGPLAN NOTICES, V40, P313, DOI 10.1145/1103845.1094836
   Hertz M, 2005, ACM SIGPLAN NOTICES, V40, P143, DOI 10.1145/1064978.1065028
   Hertz M, 2011, ACM SIGPLAN NOTICES, V46, P65, DOI 10.1145/2076022.1993487
   Jones Richard, 2012, The Garbage Collection Handbook, V1, P33487
   Kirisame Marisa, 2021, INT C LEARN REPR, DOI [10.48550/ARXIV.2006.09616, DOI 10.48550/ARXIV.2006.09616]
   Lion D, 2021, PROCEEDINGS OF THE SIXTEENTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS '21), P507, DOI 10.1145/3447786.3456256
   MatthewFlatt and PLT, 2010, Technical Report PLT-TR-2010-1
   MCCARTHY J, 1960, COMMUN ACM, V3, P184, DOI 10.1145/367177.367199
   Mozilla, 2022, FireFox MemBalancer
   Mozilla, 2020, Are We Slim Yet
   Nunez D, 2016, ACM SIGPLAN NOTICES, V51, P695, DOI 10.1145/3022671.2984028
   Oracle, 2015, Java Platform, Standard Edition HotSpot Virtual Machine Garbage Collection Tuning Guide
   Shang Xinli., 2020, Tricks of the trade: Tuning JVM memory for large-scale services
   Vij Ayush., 2022, Reduce chrome memory usage and make it use less Ram
   Yang Ting., 2004, Proceedings of the 4th international symposium on Memory management, P61
   Zhang Chengliang., 2006, P 2004 ACM SIGPLAN I, P174
NR 29
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 160
DI 10.1145/3563323
PG 21
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200037
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Spies, S
   Gäher, L
   Tassarotti, J
   Jung, R
   Krebbers, R
   Birkedal, L
   Dreyer, D
AF Spies, Simon
   Gaeher, Lennard
   Tassarotti, Joseph
   Jung, Ralf
   Krebbers, Robbert
   Birkedal, Lars
   Dreyer, Derek
TI Later Credits: Resourceful Reasoning for the Later Modality
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Separation logic; Iris; step-indexing; later modality; transfinite
ID SEPARATION LOGIC; MODEL; LINEARIZABILITY; CORRECTNESS
AB In the past two decades, step-indexed logical relations and separation logics have both come to play a major role in semantics and verification research. More recently, they have been married together in the form of step-indexed separation logics like VST, iCAP, and Iris, which provide powerful tools for (among other things) building semantic models of richly typed languages like Rust. In these logics, propositions are given semantics using a step-indexed model, and step-indexed reasoning is reflected into the logic through the so-called llaterz modality. On the one hand, this modality provides an elegant, high-level account of step-indexed reasoning; on the other hand, when used in sufficiently sophisticated ways, it can become a nuisance, turning perfectly natural proof strategies into dead ends.
   In thiswork, we introduce later credits, a newtechnique for escaping later-modality quagmires. By leveraging the second ancestor of these logicsDseparation logicDlater credits turn lthe right to eliminate a laterz into an ownable resource, which is subject to all the traditional modular reasoning principles of separation logic. We develop the theory of later credits in the context of Iris, and present several challenging examples of proofs and proof patterns which were previously not possible in Iris but are now possible due to later credits.
C1 [Spies, Simon; Gaeher, Lennard; Dreyer, Derek] MPI SWS, Saarland Informat Campus, Saarland, Germany.
   [Tassarotti, Joseph] NYU, New York, NY 10003 USA.
   [Jung, Ralf] MIT CSAIL, Cambridge, MA USA.
   [Krebbers, Robbert] Radboud Univ Nijmegen, Nijmegen, Netherlands.
   [Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
C3 New York University; Massachusetts Institute of Technology (MIT);
   Radboud University Nijmegen; Aarhus University
RP Spies, S (corresponding author), MPI SWS, Saarland Informat Campus, Saarland, Germany.
EM spies@mpi-sws.org; gaeher@mpi-sws.org; jt4767@nyu.edu;
   research@ralfj.de; mail@robbertkrebbers.nl; birkedal@cs.au.dk;
   dreyer@mpi-sws.org
OI Spies, Simon/0000-0001-5424-9002; Jung, Ralf/0000-0001-7669-6348;
   Dreyer, Derek/0000-0002-3884-6867; Birkedal, Lars/0000-0003-1320-0098;
   Gaher, Lennard/0000-0003-2917-375X
FU European Research Council (ERC) under the European Union [683289]; Dutch
   Research Council (NWO) [016.Veni.192.259]; NSF [2123864]; Division of
   Computing and Communication Foundations; Direct For Computer & Info Scie
   & Enginr [2123864] Funding Source: National Science Foundation
FX We wish to thank Jacques-Henri Jourdan and Yusuke Matsushita for
   feedback and helpful discussions, Upamanyu Sharma for supplying the
   original example that led to the counter with a backup, and the
   anonymous reviewers for their helpful feedback. This research was
   supported in part by a European Research Council (ERC) Consolidator
   Grant for the project lRustBeltz, funded under the European Union's
   Horizon 2020 Framework Programme (grant agreement no. 683289), in part
   by the Dutch Research Council (NWO), project 016.Veni.192.259, in part
   by NSF award 2123864, and in part by generous gifts from Oracle Labs and
   Google.
CR Ahmed A, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709094
   [Anonymous], 2004, Ph.D. Dissertation.
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Benton Nick, 2007, Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP'07), P87, DOI 10.1145/1273920.1273932
   Benton N, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P301, DOI 10.1145/1599410.1599447
   Benton N, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P15, DOI 10.1145/1190315.1190320
   Benton Nick, 2006, APLAS, V4279, P114, DOI [10.1007/11924661_7, DOI 10.1007/11924661_7]
   Birkedal L, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1926385.1926401
   Birkedal Lars, 2021, PROC ACM PROGRAM LAN, DOI [10.1145/3473586, DOI 10.1145/3473586]
   Brookes S, 2007, THEOR COMPUT SCI, V375, P227, DOI 10.1016/j.tcs.2006.12.034
   Buisse A, 2011, ELECTRON NOTES THEOR, V276, P121, DOI 10.1016/j.entcs.2011.09.018
   Cao QX, 2018, J AUTOM REASONING, V61, P367, DOI 10.1007/s10817-018-9457-5
   Carbonneaux Q, 2022, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP '22), P116, DOI 10.1145/3497775.3503681
   Chajed T, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P243, DOI 10.1145/3341301.3359632
   Chakraborty S, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:20)2015
   Dang HH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371102
   Dreyer D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:16)2011
   Elmas T, 2010, LECT NOTES COMPUT SC, V6015, P296, DOI 10.1007/978-3-642-12002-2_25
   Fromherz A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473590
   Frumin D, 2021, LOG METH COMPUT SCI, V17, DOI 10.46298/LMCS-17(3:9)2021
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Giarrusso PG, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408996
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Hinrichsen JK, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371074
   Hinrichsen JK, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P178, DOI 10.1145/3437992.3439914
   Jourdan Jacques-Henri, 2021, FLEXIBLE NUMBER LOGI
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Jung Ralf, 2019, IR WORKSH
   Khyzha A, 2016, LECT NOTES COMPUT SC, V9995, P426, DOI 10.1007/978-3-319-48989-6_26
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krebbers Robbert, 2018, P ACM PROGR LANG, DOI [10.1145/3236772, DOI 10.1145/3236772]
   Krogh-Jespersen M, 2020, LECT NOTES COMPUT SC, V12075, P336, DOI 10.1007/978-3-030-44914-8_13
   Krogh-Jespersen M, 2017, ACM SIGPLAN NOTICES, V52, P218, DOI 10.1145/3093333.3009877
   Liang HJ, 2013, ACM SIGPLAN NOTICES, V48, P459, DOI 10.1145/2499370.2462189
   Mével G, 2019, LECT NOTES COMPUT SC, V11423, P3, DOI 10.1007/978-3-030-17184-1_1
   Nanevski A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360587
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sergey I, 2015, LECT NOTES COMPUT SC, V9032, P333, DOI 10.1007/978-3-662-46669-8_14
   Spies Simon, 2022, Zenodo, DOI 10.5281/ZENODO.6702804
   Spies S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P80, DOI 10.1145/3453483.3454031
   Svendsen K, 2016, LECT NOTES COMPUT SC, V9632, P727, DOI 10.1007/978-3-662-49498-1_28
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Swamy N, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409003
   Tassarotti J, 2017, LECT NOTES COMPUT SC, V10201, P909, DOI 10.1007/978-3-662-54434-1_34
   Thamsborg Jacob, 2011, ICFP, P445, DOI [10.1145/2034773.2034831, DOI 10.1145/2034773.2034831]
   Timany A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158152
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Zhang Hengchu., 2021, 12 INT C INTERACTIVE, V193, p32:1, DOI DOI 10.4230/LIPICS.ITP.2021.32
NR 57
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 100
DI 10.1145/3547631
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000011
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Brotzman, R
   Zhang, DF
   Kandemir, MT
   Tan, G
AF Brotzman, Robert
   Zhang, Danfeng
   Kandemir, Mahmut Taylan
   Tan, Gang
TI SpecSafe: Detecting Cache Side Channels in a Speculative World
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE side channel; cache; symbolic execution
ID ATTACKS; COUNTERMEASURES
AB The high-profile Spectre attack and its variants have revealed that speculative execution may leave secret-dependent footprints in the cache, allowing an attacker to learn confidential data. However, existing static side-channel detectors either ignore speculative execution, leading to false negatives, or lack a precise cache model, leading to false positives. In this paper, somewhat surprisingly, we show that it is challenging to develop a speculation-aware static analysis with precise cache models: a combination of existing works does not necessarily catch all cache side channels. Motivated by this observation, we present a new semantic definition of security against cache-based side-channel attacks, called Speculative-Aware noninterference (SANI), which is applicable to a variety of attacks and cache models. We also develop SpecSafe to detect the violations of SANI. Unlike other speculation-aware symbolic executors, SpecSafe employs a novel program transformation so that SANI can be soundly checked by speculation-unaware side-channel detectors. SpecSafe is shown to be both scalable and accurate on a set of moderately sized benchmarks, including commonly used cryptography libraries.
C1 [Brotzman, Robert; Zhang, Danfeng; Kandemir, Mahmut Taylan; Tan, Gang] Penn State Univ, University Pk, PA 16802 USA.
   [Brotzman, Robert] Peraton Labs, Basking Ridge, NJ USA.
C3 Pennsylvania Commonwealth System of Higher Education (PCSHE);
   Pennsylvania State University; Pennsylvania State University -
   University Park
RP Brotzman, R (corresponding author), Penn State Univ, University Pk, PA 16802 USA.
EM robert.brotzman@peratonlabs.com; zhang@cse.psu.edu; mtk2@psu.edu;
   gtan@psu.edu
RI Zhang, Danfeng/A-2515-2016
OI Zhang, Danfeng/0000-0003-1942-6872
FU NSF [CNS-1956032, CNS-1801534, CNS-1942851, CNS-1816282, CCF-1723571]
FX We would like to thank the reviewers for their constructive feedback
   that was very helpful toward improving this work. This research was
   supported by NSF grants CNS-1956032, CNS-1801534, CNS-1942851,
   CNS-1816282, and CCF-1723571.
CR Agrawal D, 2002, LECT NOTES COMPUT SC, V2523, P29
   Almeida JB, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P53
   Barker E, 2017, NIST Special Publication (SP) 800-67 Rev. 2 (Draft))
   Bernstein D. J., 2005, CACHE TIMING ATTACKS
   Bonneau J, 2006, LECT NOTES COMPUT SC, V4249, P201
   Brasser Ferdinand, 2017, 11 USENIX WORKSH OFF, P11
   Brotzman R, 2019, P IEEE S SECUR PRIV, P505, DOI 10.1109/SP.2019.00022
   Brotzman Robert, 2021, THESIS PENNSYLVANIA
   Canella C, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P249
   Carruth Chanandler, 2019, SPECULATIVE LOAD HAR
   Cauligi Sunjay, 2020, P 41 ACM C PROGRAMMI
   Cheang Kevin, 2019, P IEEE COMPUT SECUR, P288, DOI DOI 10.1109/CSF.2019.00027
   Daniel LA, 2020, P IEEE S SECUR PRIV, P1021, DOI 10.1109/SP40000.2020.00074
   Doweck J, 2017, IEEE MICRO, V37, P52, DOI 10.1109/MM.2017.38
   Doychev G., 2013, USENIX SEC S, P431
   Doychev G, 2017, ACM SIGPLAN NOTICES, V52, P406, DOI [10.1145/3140587.3062388, 10.1145/3062341.3062388]
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Gotzfried Johannes, 2017, P 10 EUR WORKSH SYST, P2
   Guanciale R, 2020, CCS '20: PROCEEDINGS OF THE 2020 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1853, DOI 10.1145/3372297.3417246
   GuanhuaWang Sudipta Chattopadhyay, 2019, IEEE T SOFTWARE ENG
   Guarnieri M, 2020, P IEEE S SECUR PRIV, P1, DOI 10.1109/SP40000.2020.00011
   Gullasch D, 2011, P IEEE S SECUR PRIV, P490, DOI 10.1109/SP.2011.22
   Horn J., 2018, Speculative execution, variant 4: speculative store bypass
   Intel, BOUNDS CHECK BYP
   Intel, 2018, Intel Analysis of Speculative Execution Side Channels
   Kiriansky V, 2018, 2018 51ST ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO), P974, DOI [10.1109/MICRO.2018.00083, 10.1109/MICR0.2018.00083]
   Kocher P., 1999, Advances in Cryptology - CRYPTO'99. 19th Annual International Cryptology Conference. Proceedings, P388
   Kocher P., 2018, Spectre Mitigations in Microsoft's C/C++ Compiler
   Kocher P. C., 1996, Advances in Cryptology - CRYPTO'96. 16th Annual International Cryptology Conference. Proceedings, P104
   Kocher P, 2019, P IEEE S SECUR PRIV, P1, DOI 10.1109/SP.2019.00002
   Koruyeh E. M., 2018, 12 USENIX WORKSHOP O, P1
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Liu FF, 2015, P IEEE S SECUR PRIV, P605, DOI 10.1109/SP.2015.43
   Longo J, 2015, LECT NOTES COMPUT SC, V9293, P620, DOI 10.1007/978-3-662-48324-4_31
   Maisuradze G, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P2109, DOI 10.1145/3243734.3243761
   Molnar D, 2006, LECT NOTES COMPUT SC, V3935, P156
   Oleksenko Oleksii, 2020, 29 USENIX SEC S USEN
   Oleksenko Oleksii, 2018, ARXIV180508506
   Osvik DA, 2006, LECT NOTES COMPUT SC, V3860, P1
   Ristenpart T, 2009, CCS'09: PROCEEDINGS OF THE 16TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P199
   Schwarz Michael, 2017, Detection of Intrusions and Malware, and Vulnerability Assessment. 14th International Conference, DIMVA 2017. Proceedings: LNCS 10327, P3, DOI 10.1007/978-3-319-60876-1_1
   Tromer E, 2010, J CRYPTOL, V23, P37, DOI 10.1007/s00145-009-9049-y
   Van Bulck Jo, 2017, 2 WORKSHOP SYSTEM SO, P1, DOI [10.1145/3152701.3152706, DOI 10.1145/3152701.3152706]
   Wang S, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P657
   Wang S, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P235
   Wu Zhou, 2012, 2012 IEEE Global High Tech Congress on Electronics (GHTCE), P159, DOI 10.1109/GHTCE.2012.6490146
   Xiao Y, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P859, DOI 10.1145/3133956.3134016
   Xu YJ, 2011, PROCEEDINGS OF THE 3RD ACM WORKSHOP CLOUD COMPUTING SECURITY WORKSHOP (CCSW'11), P29
   Yan MJ, 2018, 2018 51ST ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO), P428, DOI 10.1109/MICRO.2018.00042
   Yarom Y, 2014, PROCEEDINGS OF THE 23RD USENIX SECURITY SYMPOSIUM, P719
   Zhang Y., 2012, 2012 ACM SIGSAC C CO, P305, DOI DOI 10.1145/2382196.2382230
NR 51
TC 4
Z9 4
U1 1
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 129
DI 10.1145/3485506
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200033
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Cronburg, K
   Guyer, SZ
AF Cronburg, Karl
   Guyer, Samuel Z.
TI Permchecker: A Toolchain for Debugging Memory Managers with Typestate
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE typestate; debugging; language implementation; memory management; memory
   layout; compiler extension
AB Dynamic memory managers are a crucial component of almost every modern software system. In addition to implementing efficient allocation and reclamation, memory managers provide the essential abstraction of memory as distinct objects, which underpins the properties of memory safety and type safety. Bugs in memory managers, while not common, are extremely hard to diagnose and fix. One reason is that their implementations often involve tricky pointer calculations, raw memory manipulation, and complex memory state invariants. While these properties are often documented, they are not specified in any precise, machine-checkable form. A second reason is that memory manager bugs can break the client application in bizarre ways that do not immediately implicate the memory manager at all. A third reason is that existing tools for debugging memory errors, such as Memcheck, cannot help because they rely on correct allocation and deallocation information to work.
   In this paper we present Permchecker, a tool designed specifically to detect and diagnose bugs in memory managers. The key idea in Permchecker is to make the expected structure of the heap explicit by associating typestates with each piece of memory. Typestate captures elements of both type (e.g., page, block, or cell) and state (e.g., allocated, free, or forwarded). Memory manager developers annotate their implementation with information about the expected typestates of memory and how heap operations change those typestates. At runtime, our system tracks the typestates and ensures that each memory access is consistent with the expected typestates. This technique detects errors quickly, before they corrupt the application or the memory manager itself, and it often provides accurate information about the reason for the error.
   The implementation of Permchecker uses a combination of compile-time annotation and instrumentation, and dynamic binary instrumentation (DBI). Because the overhead of DBI is fairly high, Permchecker is suitable for a testing and debugging setting and not for deployment. It works on a wide variety of existing systems, including explicit malloc/free memory managers and garbage collectors, such as those found in JikesRVM and OpenJDK. Since bugs in these systems are not numerous, we developed a testing methodology in which we automatically inject bugs into the code using bug patterns derived from real bugs. This technique allows us to test Permchecker on hundreds or thousands of buggy variants of the code. We find that Permchecker effectively detects and localizes errors in the vast majority of cases; without it, these bugs result in strange, incorrect behaviors usually long after the actual error occurs.
C1 [Cronburg, Karl; Guyer, Samuel Z.] Tufts Univ, 161 Coll Ave, Medford, MA 02155 USA.
C3 Tufts University
RP Guyer, SZ (corresponding author), Tufts Univ, 161 Coll Ave, Medford, MA 02155 USA.
EM karl@cs.tufts.edu; sguyer@cs.tufts.edu
FU NSF [1717373]; Direct For Computer & Info Scie & Enginr; Division of
   Computing and Communication Foundations [1717373] Funding Source:
   National Science Foundation
FX This work was funded by NSF Grant #1717373.
CR Cronburg K, 2019, PROCEEDINGS OF THE 18TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE '19), P81, DOI 10.1145/3357765.3359519
   Dolan-Gavitt B, 2016, P IEEE S SECUR PRIV, P110, DOI 10.1109/SP.2016.15
   Evans Jason, 2006, P BSDCAN C OTT CAN
   IBM, 2005, JIK RVM
   Lea D., 1991, A memory allocator
   Nethercote N, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P89, DOI 10.1145/1250734.1250746
   OCallahan Robert, 2017, ABS170505937 CORR
   Oracle, 2006, OPENJDK HOTSP DIV
   Rice A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133928
   Roy S, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P224, DOI 10.1145/3236024.3236084
   Serebryany Konstantin, 2012, USENIX, P309
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Vollmer M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P48, DOI 10.1145/3314221.3314631
   Weiss Aaron, 2019, ABS190300982 ARXIV
NR 14
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 149
DI 10.1145/3485526
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200052
OA gold
DA 2024-07-18
ER

PT J
AU Lubin, J
   Chasins, SE
AF Lubin, Justin
   Chasins, Sarah E.
TI How Statically-Typed Functional Programmers Write Code
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE static types; functional programming; grounded theory; need-finding;
   interviews; qualitative; quantitative; mixed methods; randomized
   controlled trial
ID EXPERIENCE
AB How working statically-typed functional programmers write code is largely understudied. And yet, a better understanding of developer practices could pave the way for the design of more useful and usable tooling, more ergonomic languages, and more effective on-ramps into programming communities. The goal of this work is to address this knowledge gap: to better understand the high-level authoring patterns that statically-typed functional programmers employ. We conducted a grounded theory analysis of 30 programming sessions of practicing statically-typed functional programmers, 15 of which also included a semi-structured interview. The theory we developed gives insight into how the specific affordances of statically-typed functional programming affect domain modeling, type construction, focusing techniques, exploratory and reasoning strategies, and expressions of intent. We conducted a set of quantitative lab experiments to validate our findings, including that statically-typed functional programmers often iterate between editing types and expressions, that they often run their compiler on code even when they know it will not successfully compile, and that they make textual program edits that reliably signal future edits that they intend to make. Lastly, we outline the implications of our findings for language and tool design. The success of this approach in revealing program authorship patterns suggests that the same methodology could be used to study other understudied programmer populations.
C1 [Lubin, Justin; Chasins, Sarah E.] Univ Calif Berkeley, Berkeley, CA 94720 USA.
C3 University of California System; University of California Berkeley
RP Lubin, J (corresponding author), Univ Calif Berkeley, Berkeley, CA 94720 USA.
EM justinlubin@berkeley.edu; schasins@cs.berkeley.edu
OI Lubin, Justin/0000-0003-2311-1873; Chasins, Sarah/0000-0003-0557-3580
FU National Science Foundation Graduate Research Fellowship [1752814]; NSF
   [CA-HDR 2029457, CA-HDR 1936731, CA-HDR 2033558]
FX We are indebted to the anonymous participants of these studies for
   making this research possible. We are also grateful to the anonymous
   OOPSLA '21 reviewers and CHI SRC '20 judges for their feedback. The
   first author additionally thanks Ravi Chugh for the insightful
   conversations that led to the development of some of the questions
   addressed by this study. This material is based upon work supported by
   the National Science Foundation Graduate Research Fellowship under Grant
   No. 1752814 and is supported in part by NSF Grants CA-HDR 2029457,
   CA-HDR 1936731, and CA-HDR 2033558 as well as by gifts from Apple and
   Google.
CR ADELSON B, 1985, IEEE T SOFTWARE ENG, V11, P1351, DOI 10.1109/TSE.1985.231883
   Adolph S, 2012, J SYST SOFTWARE, V85, P1269, DOI 10.1016/j.jss.2012.01.059
   ANDERSON JR, 1984, COGNITIVE SCI, V8, P87, DOI 10.1016/S0364-0213(84)80013-0
   [Anonymous], 2014, Ways Knowing HCI, DOI DOI 10.1007/978-1-4939-0378-82
   Awbrey Jon, 1995, INQUIRY, V1, DOI [10.5840/inquiryctnews199515125, DOI 10.5840/INQUIRYCTNEWS199515125]
   Baddeley A., 2007, WORKING MEMORY THOUG, V45
   Barik T, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P633, DOI 10.1145/3236024.3236040
   Barke S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428295
   Beck DJS, 1996, INEC SER, P103, DOI 10.1109/ICSE.1996.493406
   Becker BA, 2018, SIGCSE'18: PROCEEDINGS OF THE 49TH ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P634, DOI 10.1145/3159450.3159453
   Bednarik R., 2006, Proceedings. ETRA 2006. Symposium on Eye Tracking Research and Applications, P125, DOI 10.1145/1117309.1117356
   Bednarik R., 2004, P 16 ANN WORKSH PSYC, P159
   Castro FEV, 2020, SIGCSE 2020: PROCEEDINGS OF THE 51ST ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P487, DOI 10.1145/3328778.3366847
   Coleman G, 2007, INFORM SOFTWARE TECH, V49, P654, DOI 10.1016/j.infsof.2007.02.011
   Davies Simon P., 1994, USER CENTRED REQUIRE, DOI DOI 10.1007/978-3-662-03035-6_2
   DAVIES SP, 1991, BEHAV INFORM TECHNOL, V10, P173, DOI 10.1080/01449299108924281
   Detienne F., 2001, Software design - Cognitive aspects, DOI [DOI 10.1007/978-1-4471-0111-6, 10.1007/978-1-4471-0111-6]
   Farrell Robert G., 1984, P 6 ANN COGN SCI M
   Fisler K, 2017, PROCEEDINGS OF THE 2017 ACM CONFERENCE ON INTERNATIONAL COMPUTING EDUCATION RESEARCH (ICER 17), P12, DOI 10.1145/3105726.3106183
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gilmore D.J., 1990, PSYCHOL PROGRAMMING, P223
   Gissurarson Matthias Pall., 2018, INT S HASK HASK, DOI [10.1145/3242744.3242760, DOI 10.1145/3242744.3242760]
   Glaser B. G., 1967, DISCOV GROUNDED THEO
   Green TRG, 1996, J VISUAL LANG COMPUT, V7, P131, DOI 10.1006/jvlc.1996.0009
   Gueheneuc Y.-G., 2006, Proceedings of the 2006 conference of the Center for Advanced Studies on Collaborative research, P1, DOI DOI 10.1145/1188966.1188968
   Guindon R., 1990, Human-Computer Interaction, V5, P305, DOI 10.1207/s15327051hci0502&3_6
   Guindon Raymonde, 1987, EMPIRICAL STUDIES PR, P65
   HART S G, 1988, P139
   Hejmady P., 2012, P 2012 S EYE TRACKIN, P197, DOI [10.1145/2168556, DOI 10.1145/2168556]
   Hoda R, 2013, IEEE T SOFTWARE ENG, V39, P422, DOI 10.1109/TSE.2012.30
   Holtzblatt K., 1997, CONTEXTUAL DESIGN DE
   Jantunen S, 2014, J SYST SOFTWARE, V95, P32, DOI 10.1016/j.jss.2014.03.050
   Jeffries R., 1981, COGNITIVE SKILLS THE
   Kamil S, 2016, ACM SIGPLAN NOTICES, V51, P711, DOI [10.1145/2980983.2908117, 10.1145/2908080.2908117]
   Ko AJ, 2003, 200S IEEE SYMPOSIUM ON HUMAN CENTRIC COMPUTING LANGUAGES AND ENVIRONMENTS, P7
   Ko Amy J, 2003, EXTENDED ABSTRACTS H, DOI [10.1145/765891.766135, DOI 10.1145/765891.766135]
   LaToza TD, 2020, EMPIR SOFTW ENG, V25, P2416, DOI 10.1007/s10664-020-09810-1
   LETOVSKY S, 1987, J SYST SOFTWARE, V7, P325, DOI 10.1016/0164-1212(87)90032-X
   Lewis ColleenM., 2012, Proceedings of the Ninth Annual International Conference on International Computing Education Research, ICER T2, P127, DOI DOI 10.1145/2361276.2361301
   Lubin J, 2021, EXTENDED ABSTRACTS OF THE 2021 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'21), DOI 10.1145/3411763.3451515
   Lubin J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408991
   Lubin Justin, 2019, WORKSH EV US PROGR L, DOI [10.4230/OASIcs.PLATEAU.2019.3, DOI 10.4230/OASICS.PLATEAU.2019.3]
   Myers BA, 2004, COMMUN ACM, V47, P47, DOI 10.1145/1015864.1015888
   Myers BA, 2016, COMPUTER, V49, P44, DOI 10.1109/MC.2016.200
   Nienaltowski MH, 2008, SIGCSE'08: PROCEEDINGS OF THE 39TH ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P168, DOI 10.1145/1352322.1352192
   Pane JF, 2000, IEEE VISLANG, P157, DOI 10.1109/VL.2000.874379
   Pang C, 2020, 2020 ACM/IEEE 42ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING EDUCATION AND TRAINING (ICSE-SEET 2020), P107, DOI 10.1145/3377814.3381711
   PIROLLI P, 1986, HUMAN COMPUTER INTER, V2, P319
   PIROLLI PL, 1985, CAN J PSYCHOL, V39, P240, DOI 10.1037/h0080061
   Pivotal TS, 2017, IEEE-ACM INT WKSP CO, P9, DOI 10.1109/CESI.2017.2
   Riessman C.K., 1993, NARRATIVE ANAL, V30
   Rodeghero Paige, 2015, 2015 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM). Proceedings, P1, DOI 10.1109/ESEM.2015.7321188
   Rodeghero P, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P390, DOI 10.1145/2568225.2568247
   Rodeghero P, 2015, IEEE T SOFTWARE ENG, V41, P1038, DOI 10.1109/TSE.2015.2442238
   Roehm T, 2012, PROC INT CONF SOFTW, P255, DOI 10.1109/ICSE.2012.6227188
   Samuel Ogunleye O, 2009, INT C AD SCI TECHN I, DOI [10.1109/ICASTECH.2009, DOI 10.1109/ICASTECH.2009]
   Scott J., 2006, Social theory: Central issues in sociology
   Solar-Lezama A, 2005, ACM SIGPLAN NOTICES, V40, P281, DOI 10.1145/1064978.1065045
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Soloway Elliot, 1986, READINGS ARTIFCIAL I, DOI [10.1016/B978-0-934613-12-5.50042-2, DOI 10.1016/B978-0-934613-12-5.50042-2]
   Spohrer James C., 1989, P IJCAI
   SPOHRER JC, 1986, COMMUN ACM, V29, P624, DOI 10.1145/6138.6145
   Stol KJ, 2016, PROC INT CONF SOFTW, P120, DOI 10.1145/2884781.2884833
   Stylos Jeffrey., 2008, Proc. of the 16th International Symposium on Foundations of Software Eng, P105
   Thayer K, 2021, ACM T COMPUT EDUC, V21, DOI 10.1145/3444945
   Thompson S, 2004, LECT NOTES COMPUT SC, V3622, P331
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Urquhart Cathy., 2006, INT C INF SYST ICIS
   Vicente Castro Francisco Enrique., 2016, Proceedings of the 47th ACM Technical Symposium on Computing Science Education, P205, DOI [DOI 10.1145/2839509.2844574, 10.1145/2839509.2844574]
   Visser W., 1987, Empirical Studies of Programmers: Second Workshop, P217
   VONMAYRHAUSER A, 1995, COMPUTER, V28, P44, DOI 10.1109/2.402076
   Whalley Jacqueline, 2014, Proceedings of the 2014 Conference on Innovation Technology in Computer Science Education, ITiCSE '14, P279, DOI DOI 10.1145/2591708.2591762
   Xie B, 2000, WORK STRESS, V14, P74, DOI 10.1080/026783700417249
   Yusuf S, 2007, INT C PROGRAM COMPRE, P113
   Zhang TY, 2020, PROCEEDINGS OF THE 2020 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'20), DOI 10.1145/3313831.3376382
NR 75
TC 6
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 155
DI 10.1145/3485532
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200058
OA gold
DA 2024-07-18
ER

PT J
AU Tan, T
   Li, Y
   Ma, XX
   Xu, C
   Smaragdakis, Y
AF Tan, Tian
   Li, Yue
   Ma, Xiaoxing
   Xu, Chang
   Smaragdakis, Yannis
TI Making Pointer Analysis More Precise by Unleashing the Power of
   Selective Context Sensitivity
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Pointer Analysis; Alias Analysis; Context Sensitivity; Java
ID TO ANALYSIS
AB Traditional context-sensitive pointer analysis is hard to scale for large and complex Java programs. To address this issue, a series of selective context-sensitivity approaches have been proposed and exhibit promising results. In this work, we move one step further towards producing highly-precise pointer analyses for hard-to-analyze Java programs by presenting the Unity-Relay framework, which takes selective context sensitivity to the next level. Briefly, Unity-Relay is a one-two punch: given a set of different selective context-sensitivity approaches, say S = S-1, ... , S-n, Unity-Relay first provides a mechanism (called Unity) to combine and maximize the precision of all components of S. When Unity fails to scale, Unity-Relay offers a scheme (called Relay) to pass and accumulate the precision from one approach S-i in.. to the next, Si+1, leading to an analysis that is more precise than all approaches in S.
   As a proof-of-concept, we instantiate Unity-Relay into a tool called Baton and extensively evaluate it on a set of hard-to-analyze Java programs, using general precision metrics and popular clients. Compared with the state of the art, BATON achieves the best precision for all metrics and clients for all evaluated programs. The difference in precision is often dramatic-up to 71% of alias pairs reported by previously-best algorithms are found to be spurious and eliminated.
C1 [Tan, Tian; Li, Yue; Ma, Xiaoxing; Xu, Chang] Nanjing Univ, State Key Lab Novel Software Technol, Nanjing, Peoples R China.
   [Smaragdakis, Yannis] Univ Athens, Dept Informat & Telecommun, Athens, Greece.
C3 Nanjing University; National & Kapodistrian University of Athens
RP Tan, T (corresponding author), Nanjing Univ, State Key Lab Novel Software Technol, Nanjing, Peoples R China.
EM tiantan@nju.edu.cn; yueli@nju.edu.cn; xxm@nju.edu.cn;
   changxu@nju.edu.cn; yannis@smaragd.org
RI Ma, Xiaoxing/K-4290-2012
FU Key-Area Research & Development Program of Guangdong Province
   [2020B010164003]; Leading-edge Technology Program of Jiangsu Natural
   Science Foundation [BK20202001]; National Natural Science Foundation of
   China [61932021, 62025202, 62002157]; Hellenic Foundation for Research
   and Innovation (project DEAN-BLOCK); Collaborative Innovation Center of
   Novel Software Technology and Industrialization, Jiangsu, China
FX We thank the anonymous reviewers for their helpful comments. This work
   was supported in part by Key-Area Research & Development Program of
   Guangdong Province (Grant #2020B010164003), Leading-edge Technology
   Program of Jiangsu Natural Science Foundation (Grant #BK20202001), and
   National Natural Science Foundation of China (Grants #61932021,
   #62025202, #62002157), and by the Hellenic Foundation for Research and
   Innovation (project DEAN-BLOCK). The authors would also like to thank
   the support from the Collaborative Innovation Center of Novel Software
   Technology and Industrialization, Jiangsu, China.
CR Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bodden E, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P241, DOI 10.1145/1985793.1985827
   Bravenboer Martin, 2009, P 24 ACM SIGPLAN C O, P243, DOI [DOI 10.1145/1640089.1640108, 10.1145/1640089.1640108]
   Chandra S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P363, DOI 10.1145/1542476.1542517
   Christakis M, 2016, IEEE INT CONF AUTOM, P332, DOI 10.1145/2970276.2970347
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Fegade P, 2020, PROCEEDINGS OF THE 29TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '20), P39, DOI 10.1145/3377555.3377885
   Feng Y, 2015, LECT NOTES COMPUT SC, V9458, P465, DOI 10.1007/978-3-319-26529-2_25
   Fink SJ, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348255
   Guyer SZ, 2003, LECT NOTES COMPUT SC, V2694, P214
   Hassanshahi B., 2017, P 6 ACM SIGPLAN INT, P13
   Jeon M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276510
   Jeon M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428247
   Jeon M, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3293607
   Jeong S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133924
   Kanvar V, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2931098
   Kastrinis G, 2013, ACM SIGPLAN NOTICES, V48, P423, DOI 10.1145/2499370.2462191
   Krishnamurthi Shriram, 2016, 30 EUROPEAN C OBJECT, V15, P27
   Lhoták O, 2006, LECT NOTES COMPUT SC, V3923, P47
   Lhoták O, 2008, ACM T SOFTW ENG METH, V18, DOI 10.1145/1391984.1391987
   Li Y, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276511
   Li Y, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3381915
   Li Y, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P129, DOI 10.1145/3236024.3236041
   Liang P, 2011, ACM SIGPLAN NOTICES, V46, P590, DOI 10.1145/1993316.1993567
   Liu BZ, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3293606
   Livshits V Benjamin, 2005, USENIX SEC S, V14, P18
   Lu JB, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360574
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Oh H, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2821504
   Oh H, 2014, ACM SIGPLAN NOTICES, V49, P475, DOI [10.1145/2594291.2594318, 10.1145/2666356.2594318]
   Philipose M, 2002, ACM SIGPLAN NOTICES, V37, P113, DOI 10.1145/565816.503284
   Pradel M, 2012, PROC INT CONF SOFTW, P925, DOI 10.1109/ICSE.2012.6227127
   Reps T, 1997, LOGIC PROGRAMM, P5
   Shiyi WeiB.G. R., 2015, 29 EUROPEAN C OBJECT, P712
   Smaragdakis Y., 2015, FDN TRENDS PROGRAM L, V2, P1, DOI DOI 10.1561/2500000014
   Smaragdakis Y, 2014, ACM SIGPLAN NOTICES, V49, P485, DOI [10.1145/2666356.2594320, 10.1145/2594291.2594320]
   Smaragdakis Y, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P17, DOI 10.1145/1926385.1926390
   Spath J., 2016, PROC EUR C OBJECT OR, p22:1, DOI [10.4230/DARTS.2.1.12, DOI 10.4230/LIPICS.ECOOP.2016.22]
   Späth J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290361
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan Manu, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P196, DOI 10.1007/978-3-642-36946-9_8
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Sridharan M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P112, DOI 10.1145/1250734.1250748
   Sui YL, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P460, DOI 10.1145/2950290.2950296
   Tan T, 2017, ACM SIGPLAN NOTICES, V52, P278, DOI [10.1145/3140587.3062360, 10.1145/3062341.3062360]
   Tan T, 2016, LECT NOTES COMPUT SC, V9837, P489, DOI 10.1007/978-3-662-53413-7_24
   Tan Tian, **DATA OBJECT**, DOI 10.5281/zenodo.5491895
   Thakur M, 2020, PROCEEDINGS OF THE 29TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '20), P27, DOI 10.1145/3377555.3377902
   Thakur M, 2019, PROCEEDINGS OF THE 28TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '19), P135, DOI 10.1145/3302516.3307359
   Thiessen R, 2017, ACM SIGPLAN NOTICES, V52, P263, DOI [10.1145/3140587.3062359, 10.1145/3062341.3062359]
   WALA, 2018, WATS LIB AN
   Wang K, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P389, DOI 10.1145/3037697.3037744
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   Xu G., 2008, ISSTA'08, P225, DOI DOI 10.1145/1390630.1390658
   Zhang X, 2014, ACM SIGPLAN NOTICES, V49, P239, DOI [10.1145/2594291.2594327, 10.1145/2666356.2594327]
NR 57
TC 9
Z9 10
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 147
DI 10.1145/3485524
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200050
OA gold
DA 2024-07-18
ER

PT J
AU Zhang, JL
   Piskac, R
   Zhai, EN
   Xu, TY
AF Zhang, Jialu
   Piskac, Ruzica
   Zhai, Ennan
   Xu, Tianyin
TI Static Detection of Silent Misconfigurations with Deep Interaction
   Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Silent Misconfiguration; Misconfiguration Detection; Configuration
   Specification
AB The behavior of large systems is guided by their configurations: users set parameters in the configuration file to dictate which corresponding part of the system code is executed. However, it is often the case that, although some parameters are set in the configuration file, they do not influence the system runtime behavior, thus failing to meet the user's intent. Moreover, such misconfigurations rarely lead to an error message or raising an exception. We introduce the notion of silent misconfigurations which are prohibitively hard to identify due to (1) lack of feedback and (2) complex interactions between configurations and code.
   This paper presents ConfigX, the first tool for the detection of silent misconfigurations. The main challenge is to understand the complex interactions between configurations and the code that they affected. Our goal is to derive a specification describing non-trivial interactions between the configuration parameters that lead to silent misconfigurations. To this end, ConfigX uses static analysis to determine which parts of the system code are associated with configuration parameters. ConfigX then infers the connections between configuration parameters by analyzing their associated code blocks. We design customized control- and data-flow analysis to derive a specification of configurations. Additionally, we conduct reachability analysis to eliminate spurious rules to reduce false positives. Upon evaluation on five real-world datasets across three widely-used systems, Apache, vsftpd, and PostgreSQL, ConfigX detected more than 2200 silent misconfigurations. We additionally conducted a user study where we ran ConfigX on misconfigurations reported on user forums by real-world users. ConfigX easily detected issues and suggested repairs for those misconfigurations. Our solutions were accepted and confirmed in the interaction with the users, who originally posted the problems.
C1 [Zhang, Jialu; Piskac, Ruzica] Yale Univ, New Haven, CT 06511 USA.
   [Zhai, Ennan] Alibaba Grp, Bellevue, WA 98004 USA.
   [Xu, Tianyin] Univ Illinois, Urbana, IL 61801 USA.
C3 Yale University; Alibaba Group; University of Illinois System;
   University of Illinois Urbana-Champaign
RP Zhang, JL (corresponding author), Yale Univ, New Haven, CT 06511 USA.
OI Piskac, Ruzica/0000-0002-3267-0776
FU NSF [CCF-1715387, CCF-1553168, CNS-1565208, SHF-1816615, CNS-1956007,
   CCF-2029049, CNS-2130560]; Facebook Distributed Systems Research award
FX We thank OOPSLA reviewers for their insightful comments. We also thank
   Mark Santolucito and Julien Lepiller for their valuable feedback on the
   early version of this work. We also thank John Kolesar and Matt Elacqua
   for proofreading this work. Jialu Zhang is supported in part by NSF
   grants, CCF-1715387. Ruzica Piskac is supported in part by NSF grants,
   CCF-1715387, CCF-1553168 and CNS-1565208. Tianyin Xu is supported in
   part by NSF grants, SHF-1816615, CNS-1956007, CCF-2029049, and
   CNS-2130560, and a Facebook Distributed Systems Research award.
CR [Anonymous], 2021, VSFTPD
   [Anonymous], 2014, SILENT MISCONFIGURAT
   [Anonymous], 2011, RETAIN ORIGINAL REQU
   [Anonymous], 2017, AMAZON SERVICE OUTAG
   [Anonymous], 2014, MICROSOFT SERVICE OU
   [Anonymous], 2018, GOOGLE SERVICE OUTAG
   [Anonymous], 2021, APACHE
   [Anonymous], 2021, APACHE USER MANUAL
   [Anonymous], 2017, APACHE MOD REWRITE R
   [Anonymous], 2012, SILENT MISCONFIGURAT
   [Anonymous], 2011, USE PROGRAMMING LANG
   Attariyan M., 2010, P 9 USENIX S OP SYST, P1
   Attariyan Mona, 2012, P 10 USENIX C OP SYS, P307
   Bauer L, 2011, ACM T INFORM SYST SE, V14, DOI 10.1145/1952982.1952984
   Bouchet M, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P281, DOI 10.1145/3368089.3409728
   Chen QR, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P362, DOI 10.1145/3368089.3409727
   Cheng Runxiang, 2021, P 30 ACM SIGSOFT INT
   Chengcheng Xiang, 2019, CCS '19: Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, P113, DOI 10.1145/3319535.3363191
   Chun Yuan, 2006, Operating Systems Review, V40, P375, DOI 10.1145/1218063.1217972
   DAS T., 2010, USENIX SEC S, P161
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dong Z, 2015, PROC IEEE INT CONF S, P171, DOI 10.1109/ICSM.2015.7332463
   Franz P., 2021, 2021 IEEEACM 43 INT, P91, DOI DOI 10.1109/ICSE-SEIP52600.2021.00018
   Fu Weili, 2017, LIPICS, V12, P27
   Herodotou Herodotos, 2011, AUTOMATIC OPTIMIZATI
   Hu YG, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P719
   Huang Peng, 2015, P 10 ACM EUR C COMP, DOI 10.1145/2741948.2741963
   Jamshidi P, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P71, DOI 10.1145/3236024.3236074
   Jamshidi P, 2017, IEEE INT CONF AUTOM, P497, DOI 10.1109/ASE.2017.8115661
   Kuo Hsuan-Chi, 2020, P 2020 ACM SIGMETRIC, V4
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Li C, 2020, PROCEEDINGS OF THE FIFTEENTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS'20), DOI 10.1145/3342195.3387520
   Lillack M, 2018, IEEE T SOFTWARE ENG, V44, P1269, DOI 10.1109/TSE.2017.2756048
   Lillack Max, 2014, Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering, P445, DOI 10.1145/2642937.2643001
   Medeiros Flavio, 2020, SBES 20, DOI [10 .1145/3422392 3422409, DOI 10.1145/34223923422409]
   Mehta S, 2020, PROCEEDINGS OF THE 17TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P435
   Meinicke J, 2020, 2020 IEEE/ACM 42ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP), P233, DOI 10.1145/3377813.3381366
   Morris R, 1999, OPERATING SYSTEMS REVIEW, VOL 33, NO 5, DECEMBER 1999, P217, DOI 10.1145/319344.319166
   Nadi S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P140, DOI 10.1145/2568225.2568283
   Nadi S, 2015, IEEE T SOFTWARE ENG, V41, P820, DOI 10.1109/TSE.2015.2415793
   Nair Vivek, 2018, ABS180303900 CORR
   Potharaju R, 2015, PROC VLDB ENDOW, V8, P1828
   Rabkin A., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P193, DOI 10.1109/ASE.2011.6100053
   Rabkin A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P131, DOI 10.1145/1985793.1985812
   Santolucito Mark, 2017, Proceedings of the ACM on Programming Languages, V1, DOI 10.1145/3133888
   Santolucito M, 2016, LECT NOTES COMPUT SC, V9780, P80, DOI 10.1007/978-3-319-41540-6_5
   Shambaugh R, 2016, ACM SIGPLAN NOTICES, V51, P416, DOI [10.1145/2908080.2908083, 10.1145/2980983.2908083]
   Sharma T, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P189, DOI [10.1109/MSR.2016.028, 10.1145/2901739.2901761]
   Spangler Todd., 2019, FACEBOOK APOLOGIZES
   Su Ya-Yunn, 2007, 21 ACM S OP SYST PRI
   Tang Alan, ACM SIGCOMM SIGCOMM
   Tartler R., 2014, USENIX ATC, P421
   Tian BC, 2019, SIGCOMM '19 - PROCEEDINGS OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION, P214, DOI 10.1145/3341302.3342088
   Van Aken D, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1009, DOI 10.1145/3035918.3064029
   Wang HJ, 2004, USENIX Association Proceedings of the Sixth Symposium on Operating Systems Design and Implementation (OSDE '04), P245
   Wang YM, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE SEVENTEENTH LARGE INSTALLATION SYSTEMS ADMINISTRATION CONFERENCE, P159
   Weiss A, 2017, IEEE INT CONF AUTOM, P625, DOI 10.1109/ASE.2017.8115673
   Xiang CC, 2020, PROCEEDINGS OF THE 2020 USENIX ANNUAL TECHNICAL CONFERENCE, P265
   Xu TY, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P619
   Xu TY, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P244, DOI 10.1145/2517349.2522727
   Xu TY, 2015, ACM COMPUT SURV, V47, DOI 10.1145/2791577
   Xu Tianyin., 2017, MISCONFIGURATION DAT
   Xu Tianyin, 2020, ABS190512195 CORR
   Xu Tianyin, 2015, P 10 JOINT M EUR SOF
   Xu Tianyin, 2016, ARXIV160101747
   Ye FD, 2020, SIGCOMM '20: PROCEEDINGS OF THE 2020 ANNUAL CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION ON THE APPLICATIONS, TECHNOLOGIES, ARCHITECTURES, AND PROTOCOLS FOR COMPUTER COMMUNICATION, P599, DOI 10.1145/3387514.3406217
   Yin ZN, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P159
   Yuan Ding, 2011, 2011 USENIX ANN TECH
   Zhai EN, 2020, PROCEEDINGS OF THE 17TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P575
   Zhang JQ, 2014, ACM SIGPLAN NOTICES, V49, P687, DOI 10.1145/2541940.2541983
   Zhang S, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P312, DOI 10.1109/ICSE.2013.6606577
   Zhang Yuanliang, 2021, P 43 INT C SOFTW ENG
NR 72
TC 5
Z9 6
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 140
DI 10.1145/3485517
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200043
OA gold
DA 2024-07-18
ER

PT J
AU Zhou, Z
   Dickerson, R
   Delaware, B
   Jagannathan, S
AF Zhou, Zhe
   Dickerson, Robert
   Delaware, Benjamin
   Jagannathan, Suresh
TI Data-Driven Abductive Inference of Library Specifications
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Automated Verification; Data-Driven Specification Inference; Data
   Structures; Decision Tree Learning; Counterexample Guided Refinement
AB Programmers often leverage data structure libraries that provide useful and reusable abstractions. Modular verification of programs that make use of these libraries naturally rely on specifications that capture important properties about how the library expects these data structures to be accessed and manipulated. However, these specifications are often missing or incomplete, making it hard for clients to be confident they are using the library safely. When library source code is also unavailable, as is often the case, the challenge to infer meaningful specifications is further exacerbated. In this paper, we present a novel data-driven abductive inference mechanism that infers specifications for library methods sufficient to enable verification of the library's clients. Our technique combines a data-driven learning-based framework to postulate candidate specifications, along with SMT-provided counterexamples to refine these candidates, taking special care to prevent generating specifications that overfit to sampled tests. The resulting specifications form a minimal set of requirements on the behavior of library implementations that ensures safety of a particular client program. Our solution thus provides a new multi-abduction procedure for precise specification inference of data structure libraries guided by client-side verification tasks. Experimental results on a wide range of realistic OCaml data structure programs demonstrate the effectiveness of the approach.
C1 [Zhou, Zhe; Dickerson, Robert; Delaware, Benjamin; Jagannathan, Suresh] Purdue Univ, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Zhou, Z (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
FU NSF [CCF-SHF 1717741, CCF-FMiTF 2019263, CCF-1755880]
FX We thank Pedro Abreu and the anonymous reviewers for their detailed
   comments and suggestions. This material is based upon work supported by
   the NSF under Grants CCF-SHF 1717741, CCF-FMiTF 2019263, and
   CCF-1755880.
CR Albarghouthi A, 2016, ACM SIGPLAN NOTICES, V51, P789, DOI 10.1145/2914770.2837628
   [Anonymous], 1999, PURELY FUNCTIONAL DA
   Bastani O, 2015, ACM SIGPLAN NOTICES, V50, P553, DOI [10.1145/2775051.2676977, 10.1145/2676726.2676977]
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dillig I, 2013, ACM SIGPLAN NOTICES, V48, P443, DOI [10.1145/2509136.2509511, 10.1145/2544173.2509511]
   Nguyen HA, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P166, DOI 10.1145/2635868.2635924
   Itzhaky S, 2014, ACM SIGPLAN NOTICES, V49, P385, DOI 10.1145/2535838.2535854
   Itzhaky Shachar., 2013, CAV, P756, DOI 10.1007/978-3-642-39799-8_53
   Jingyi Su, 2018, 2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion). Proceedings, P202, DOI 10.1145/3183440.3195096
   Leroy X., 2014, The ocaml system release 4.02, P54
   Miltner A, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1, DOI 10.1145/3385412.3385967
   Niki Vazou, 2017, P ACM PROGRAM LANG, V2
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Padhi S, 2016, ACM SIGPLAN NOTICES, V51, P42, DOI [10.1145/2908080.2908099, 10.1145/2980983.2908099]
   Pandita R, 2012, PROC INT CONF SOFTW, P815, DOI 10.1109/ICSE.2012.6227137
   Pierce B. C., 2010, Software Foundations
   Qin SC, 2010, LECT NOTES COMPUT SC, V6447, P171, DOI 10.1007/978-3-642-16901-4_13
   Ruggieri S, 2002, IEEE T KNOWL DATA EN, V14, P438, DOI 10.1109/69.991727
   Zhou Zhe., OOPSLA2021 ARTIFACT, DOI DOI 10.5281/ZENODO.5130646
   Zhou Zhe., ARXIV210804783CSPL
   Zhu H, 2018, ACM SIGPLAN NOTICES, V53, P707, DOI [10.1145/3192366.3192416, 10.1145/3296979.3192416]
   Zhu H, 2016, ACM SIGPLAN NOTICES, V51, P491, DOI [10.1145/2980983.2908125, 10.1145/2908080.2908125]
NR 23
TC 6
Z9 6
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 116
DI 10.1145/3485493
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200020
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Paraskevopoulou, Z
   Li, JM
   Appel, AW
AF Paraskevopoulou, Zoe
   Li, John M.
   Appel, Andrew W.
TI Compositional Optimizations for CertiCoq
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compositional compiler correctness; logical relations; separate
   compilation; compilation by transformation; A-normal form; closure
   conversion; lambda lifting
ID VERIFICATION; COMPILER
AB Compositional compiler verification is a difficult problem that focuses on separate compilation of program components with possibly different verified compilers. Logical relations are widely used in proving correctness of program transformations in higher-order languages; however, they do not scale to compositional verification of multi-pass compilers due to their lack of transitivity. The only known technique to apply to compositional verification of multi-pass compilers for higher-order languages is parametric inter-language simulations (PILS), which is however significantly more complicated than traditional proof techniques for compiler correctness. In this paper, we present a novel verification framework for lightweight compositional compiler correctness. We demonstrate that by imposing the additional restriction that program components are compiled by pipelines that go through the same sequence of intermediate representations, logical relation proofs can be transitively composed in order to derive an end-to-end compositional specification for multi-pass compiler pipelines. Unlike traditional logical-relation frameworks, our framework supports divergence preservationDeven when transformations reduce the number of program steps. We achieve this by parameterizing our logical relations with a pair of relational invariants.
   We apply this technique to verify a multi-pass, optimizing middle-end pipeline for CertiCoq, a compiler from Gallina (Coq's specification language) to C. The pipeline optimizes and closure-converts an untyped functional intermediate language (ANF or CPS) to a subset of that language without nested functions, which can be easily code-generated to low-level languages. Notably, our pipeline performs more complex closure-allocation optimizations than the state of the art in verified compilation. Using our novel verification framework, we prove an end-to-end theorem for our pipeline that covers both termination and divergence and applies to whole-program and separate compilation, even when different modules are compiled with different optimizations. Our results are mechanized in the Coq proof assistant.
C1 [Paraskevopoulou, Zoe] Northeastern Univ, Boston, MA 02115 USA.
   [Li, John M.; Appel, Andrew W.] Princeton Univ, Princeton, NJ 08544 USA.
C3 Northeastern University; Princeton University
RP Paraskevopoulou, Z (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
EM z.paraskevopoulou@northeastern.edu; johnli@princeton.edu;
   appel@princeton.edu
RI Paraskevopoulou, Zoe/IWM-1463-2023
OI Appel, Andrew/0000-0001-6009-0325
FU National Science Foundation [CCF-1521602, CCF-2005545]
FX This material is based upon work supported in part by the National
   Science Foundation under Grant No. CCF-1521602 and Grant No.
   CCF-2005545. Any opinions, findings, and conclusions or recommendations
   expressed in this material are those of the author and do not
   necessarily reflect the views of the National Science Foundation. The
   first author was supported by Computing Innovation Fellows 2020 Project
   during part of this research. We wish to thank the anonymous reviewers
   for their insightful comments and Norman Ramsey for his valuable
   feedback in the final revision of this paper.
CR Acar UA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P309, DOI 10.1145/1328438.1328476
   Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Anand Abhishek, 2017, INT WORKSH COQ PROGR
   [Anonymous], 1992, Compiling with Continuations
   Appel A. W., 1997, Journal of Functional Programming, V7, P515, DOI 10.1017/S0956796897002839
   Appel AW, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2701415
   Appel Andrew W., 2020, VERIFIED FUNCTIONAL
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371075
   Belanger O.S., 2019, PROC ACM
   Bélanger OS, 2017, PROCEEDINGS OF THE 19TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2017), P49, DOI 10.1145/3131851.3131859
   Benton N, 2005, LECT NOTES COMPUT SC, V3474, P142
   Benton N, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P97
   CHAITIN GJ, 1981, COMPUT LANG, V6, P47, DOI 10.1016/0096-0551(81)90048-5
   Chlipala A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P93, DOI 10.1145/1706299.1706312
   Dargaye Z, 2007, LECT NOTES ARTIF INT, V4790, P211, DOI 10.1007/978-3-540-75560-9_17
   Dreyer, 2014, PARAMETRIC BISIMULAT
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   FRADET P, 1991, ACM T PROGR LANG SYS, V13, P21, DOI 10.1145/114005.102805
   Georges AL, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434287
   Grover Anvay, 2021, COMPILING CONTINUATI
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Hughes R J. M., 1982, P 1982 ACM S LISP FU, P1, DOI DOI 10.1145/800068.802129
   Hur CK, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P59
   Hur CK, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1926385.1926402
   JOHNSSON T, 1985, LECT NOTES COMPUT SC, V201, P190
   Jones Simon Peyton, 2019, ABS191011717 CORR
   Kang J, 2016, ACM SIGPLAN NOTICES, V51, P178, DOI 10.1145/2914770.2837642
   KELSEY R, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P281, DOI 10.1145/75277.75302
   Kennedy A, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P177
   KRANZ D, 1986, SIGPLAN NOTICES, V21, P219, DOI 10.1145/13310.13333
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X., 2020, OCAML SYSTEM RELEASE
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Leroy X, 2009, INFORM COMPUT, V207, P284, DOI 10.1016/j.ic.2007.12.004
   Matthews Jacob, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P3, DOI 10.1145/1190216.1190220
   Maurer L, 2017, ACM SIGPLAN NOTICES, V52, P482, DOI [10.1145/3062341.3062380, 10.1145/3140587.3062380]
   Mullen Eric., 2018, P 7 ACM SIGPLAN INT, P172, DOI 10.1145/3167089
   Neis G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P166, DOI 10.1145/2784731.2784764
   Owens S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110262
   Owens S, 2016, LECT NOTES COMPUT SC, V9632, P589, DOI 10.1007/978-3-662-49498-1_23
   Paraskevopoulou Z, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341687
   Patterson D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341689
   Perconti JT, 2014, LECT NOTES COMPUT SC, V8410, P128
   Pérez JAN, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P556
   Peyton Jones S. L., 1996, Programming Languages and Systems - ESOP '96. 6th European Symposium on Programming. Proceedings, P18
   Peyton Jones SimonL., 1995, FUNCTIONAL PROGRAMMI, P184
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Ramananandro T, 2015, CPP'15: PROCEEDINGS OF THE 2015 ACM CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P3, DOI 10.1145/2676724.2693167
   Rodríguez L, 2016, ELECTRON NOTES THEOR, V323, P197, DOI 10.1016/j.entcs.2016.06.013
   Santos Andre, 1995, THESIS U GLASGOW
   Shao Z, 2000, ACM T PROGR LANG SYS, V22, P129, DOI 10.1145/345099.345125
   Song Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371091
   Sozeau M, 2020, P ACM PROGRAM LANG, V0004
   Steele Guy L, 1978, RABBIT COMPILER SCHE
   Stewart G, 2015, ACM SIGPLAN NOTICES, V50, P275, DOI [10.1145/2676726.2676985, 10.1145/2775051.2676985]
   Stewart G, 2012, ACM SIGPLAN NOTICES, V47, P3, DOI 10.1145/2398856.2364531
   Tan YK, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000229
   Tan YK, 2016, ACM SIGPLAN NOTICES, V51, P60, DOI 10.1145/3022670.2951924
   Timany A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158152
   VUILLEMIN J, 1978, COMMUN ACM, V21, P309, DOI 10.1145/359460.359478
   Wang YT, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290375
   Zhong Shao, 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P150, DOI 10.1145/182409.156783
NR 64
TC 8
Z9 8
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 86
DI 10.1145/3473591
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800026
OA gold
DA 2024-07-18
ER

PT J
AU Courant, N
   Leroy, X
AF Courant, Nathanael
   Leroy, Xavier
TI Verified Code Generation for the Polyhedral Model
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Compiler verification; Polyhedral code generation; Polyhedral model
AB The polyhedral model is a high-level intermediate representation for loop nests that supports elegantly a great many loop optimizations. In a compiler, after polyhedral loop optimizations have been performed, it is necessary and difficult to regenerate sequential or parallel loop nests before continuing compilation. This paper reports on the formalization and proof of semantic preservation of such a code generator that produces sequential code from a polyhedral representation. The formalization and proofs are mechanized using the Coq proof assistant.
C1 [Courant, Nathanael] INRIA, 2 Rue Simone Iff, Paris, France.
   [Leroy, Xavier] PSL Res Univ, Coll France, 3 Rue Ulm, Paris, France.
C3 Inria; Universite PSL; College de France
RP Courant, N (corresponding author), INRIA, 2 Rue Simone Iff, Paris, France.
EM nathanael.courant@inria.fr; xavier.leroy@college-de-france.fr
OI Leroy, Xavier/0000-0002-8971-9171; Courant,
   Nathanaelle/0000-0002-8736-3060
CR ANCOURT C, 1991, SIGPLAN NOTICES, V26, P39, DOI 10.1145/109626.109631
   Baghdadi R, 2019, INT SYM CODE GENER, P193, DOI [10.5281/zenodo.2375075, 10.1109/CGO.2019.8661197]
   Barthe G, 2016, J LOG ALGEBR METHODS, V85, P847, DOI 10.1016/j.jlamp.2016.05.004
   Bastoul C, 2004, 13TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURE AND COMPILATION TECHNIQUES, PROCEEDINGS, P7, DOI 10.1109/PACT.2004.1342537
   Beaugnon U, 2014, ACM SIGPLAN NOTICES, V49, P115, DOI [10.1145/2666357.2597818, 10.1145/2597809.2597818]
   BERNSTEIN AJ, 1966, IEEE TRANS ELECTRON, VEC15, P757, DOI 10.1109/PGEC.1966.264565
   Boulet P, 1998, 1998 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P4, DOI 10.1109/PACT.1998.727127
   Boulmé S, 2019, INT SYMP SYMB NUMERI, P9, DOI 10.1109/SYNASC.2018.00014
   Chen C, 2012, ACM SIGPLAN NOTICES, V47, P499, DOI 10.1145/2345156.2254123
   Churchill B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1027, DOI 10.1145/3314221.3314596
   FEAUTRIER P, 1991, INT J PARALLEL PROG, V20, P23, DOI 10.1007/BF01407931
   Feautrier P, 2011, Encyclopedia of Parallel Computing, DOI DOI 10.1007/978-0-387-09766-4_502
   Fouilhe Alexis, 2014, Verified Software: Theories, Tools and Experiments. 6th International Conference, VSTTE 2014. Revised Selected Papers: LNCS 8471, P200, DOI 10.1007/978-3-319-12154-3_13
   Grosser T, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2743016
   Grosser T, 2012, PARALLEL PROCESS LET, V22, DOI 10.1142/S0129626412500107
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Kundu S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P327, DOI 10.1145/1542476.1542513
   LAMPORT L, 1974, COMMUN ACM, V17, P83, DOI 10.1145/360827.360844
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   LU LC, 1991, SIGPLAN NOTICES, V26, P28, DOI 10.1145/109626.109630
   Muchnick S., 1997, ADV COMPILER DESIGN
   Namjoshi KS, 2016, LECT NOTES COMPUT SC, V9837, P383, DOI 10.1007/978-3-662-53413-7_19
   Necula GC, 2000, ACM SIGPLAN NOTICES, V35, P83, DOI 10.1145/358438.349314
   Parrino Bruno Cuervo, 2012, IMPACT 2012 2 INT WO
   Pilkiewicz Alexandre, 2013, S2SLOOP VALIDATOR PO
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Pugh W., 1991, Conference Proceedings. 1991 International Conference on Supercomputing, P341, DOI 10.1145/109025.109108
   Quilleré F, 2000, INT J PARALLEL PROG, V28, P469, DOI 10.1023/A:1007554627716
   Ragan-Kelley J, 2018, COMMUN ACM, V61, P106, DOI 10.1145/3150211
   Razanajato Harenome, 2017, IMPACT 2017 7 INT WO
   Schordan M, 2014, LECT NOTES COMPUT SC, V8803, P493, DOI 10.1007/978-3-662-45231-8_41
   Schrijver A., 1998, THEORY LINEAR INTEGE
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Tate R, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(1:10)2011
   Trifunovic Konrad, 2010, GROW 10 2 GCC RES OP
   Tristan JB, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P295
   Tristan JB, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P83, DOI 10.1145/1706299.1706311
   Vasilache N, 2019, ACM T ARCHIT CODE OP, V16, DOI 10.1145/3355606
   Verdoolaege S, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362390
   Verdoolaege Sven, 2014, IMPACT 2014 4 INT WO
   Zuck L, 2005, FORM METHOD SYST DES, V27, P335, DOI 10.1007/s10703-005-3402-z
NR 42
TC 5
Z9 5
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 40
DI 10.1145/3434321
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100040
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Li, Y
   Xia, LY
   Weirich, S
AF Li, Yao
   Xia, Li-yao
   Weirich, Stephanie
TI Reasoning about the Garden of Forking Paths
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE formal verification; computation cost; lazy evaluation; monad
AB Lazy evaluation is a powerful tool for functional programmers. It enables the concise expression of on-demand computation and a form of compositionality not available under other evaluation strategies. However, the stateful nature of lazy evaluation makes it hard to analyze a program's computational cost, either informally or formally. In this work, we present a novel and simple framework for formally reasoning about lazy computation costs based on a recent model of lazy evaluation: clairvoyant call-by-value. The key feature of our framework is its simplicity, as expressed by our definition of the clairvoyance monad. This monad is both simple to define (around 20 lines of Coq) and simple to reason about. We show that this monad can be effectively used to mechanically reason about the computational cost of lazy functional programs written in Coq.
C1 [Li, Yao; Xia, Li-yao; Weirich, Stephanie] Univ Penn, 3330 Walnut St, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Li, Y (corresponding author), Univ Penn, 3330 Walnut St, Philadelphia, PA 19104 USA.
EM liyao@cis.upenn.edu; xialiyao@cis.upenn.edu; sweirich@cis.upenn.edu
RI Li, Yao/GXW-0420-2022
FU National Science Foundation [1521539, 2006535]; Direct For Computer &
   Info Scie & Enginr; Division of Computing and Communication Foundations
   [2006535, 1521539] Funding Source: National Science Foundation
FX This material is based upon work supported by the National Science
   Foundation under Grant No. 1521539, and Grant No. 2006535. Any opinions,
   findings, and conclusions or recommendations expressed in this material
   are those of the authors and do not necessarily reflect the views of the
   National Science Foundation.
CR Abel Andreas, 2005, P ACM SIGPLAN WORKSH, p62S73, DOI [10.1145/1088348.1088355, DOI 10.1145/1088348.1088355]
   [Anonymous], 1999, PURELY FUNCTIONAL DA
   Breitner J, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796820000283
   Charguéraud A, 2019, J AUTOM REASONING, V62, P331, DOI 10.1007/s10817-017-9431-7
   Christiansen Jan, 2011, P LECT NOTES COMPUTE, V6539, DOI [10.1007/978-3-642-18378-2_14, DOI 10.1007/978-3-642-18378-2_14]
   Christiansen Jan, 2011, P 13 INT ACM SIGPLAN, p53S64, DOI [10.1145/2003476.2003487, DOI 10.1145/2003476.2003487]
   Coq development team, 2021, COQ PROOF ASSISTANT
   Crary K., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P184, DOI 10.1145/325694.325716
   Cutler JW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408979
   Dal Lago Ugo, 2011, LECT NOTES COMPUTER, P89, DOI [10.1007/978-3-642-31485-8_3, DOI 10.1007/978-3-642-31485-8_3]
   Danielsson NA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1328438.1328457
   de Vries E, 2011, LECT NOTES COMPUT SC, V7041, P155, DOI 10.1007/978-3-642-24690-6_12
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Dylus Sandra, 2019, ART SCI ENG PROGRAM, V3, P8, DOI DOI 10.22152/PROGRAMMING-JOURNAL.ORG/2019/3/8
   Eberl Manuel, THESIS TECHNICAL U M
   Foner Kenneth, 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236797
   Friedman Daniel P., 1974, TR19 IND U
   Gueneau Armael, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P533, DOI 10.1007/978-3-319-89884-1_19
   Gueneau Armael, 2019, THESIS INRIA PARIS
   Hackett J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341718
   Handley MAT, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371092
   Henderson Peter, 1976, P 3 ACM SIGACT SIGPL, P95, DOI DOI 10.1145/800168.811543
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   HUGHES J, 1989, COMPUT J, V32, P98, DOI 10.1093/comjnl/32.2.98
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   JOSEPHS MB, 1989, THEOR COMPUT SCI, V68, P105, DOI 10.1016/0304-3975(89)90122-9
   Launchbury J., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P144, DOI 10.1145/158511.158618
   Li Yao, 2021, Reasoning about the garden of forking paths (artifact), DOI 10.5281/zenodo.4771438
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Madhavan R, 2017, ACM SIGPLAN NOTICES, V52, P330, DOI 10.1145/3093333.3009874
   Maillard K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341708
   Maraist John, 1995, P 11 ANN MATH FDN PR, P370, DOI [10.1016/S1571-0661(04)00022-2, DOI 10.1016/S1571-0661(04)00022-2]
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moran A., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P43, DOI 10.1145/292540.292547
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   O'Hearn PW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371078
   Petricek T, 2012, ELECTRON PROC THEOR, P68, DOI 10.4204/EPTCS.76.7
   Rajani V, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434308
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   Scott D., 1976, SIAM Journal on Computing, V5, P522, DOI 10.1137/0205037
   Spector-Zabusky A., 2018, P 7 ACM SIGPLAN INT, P14, DOI [10.1145/3167092, DOI 10.1145/3167092]
   Spector-Zabusky Antal, 2019, ABS191011724 CORR
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   Swierstra W, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341707
   Swierstra W, 2009, LECT NOTES COMPUT SC, V5674, P440, DOI 10.1007/978-3-642-03359-9_30
   Turner DA, 2004, J UNIVERS COMPUT SCI, V10, P751
   Uustalu Tarmo, 2002, SELECTED PAPERS LECT, V2646, DOI [10.1007/3-540-39185-1_17, DOI 10.1007/3-540-39185-1_17]
   Vazou Niki, 2016, THESIS U CALIFORNIA
   Wadler Philip, 1992, MATH STRUCTURES COMP, V2, P461, DOI [DOI 10.1017/S0960129500001560, DOI 10.1016/0304-3975(75)90017-1]
   Wang P, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133903
NR 51
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PY 2021
VL 5
AR 80
DI 10.1145/3473585
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UQ9LK
UT WOS:000696379100020
OA Green Submitted, gold, Green Published
DA 2024-07-18
ER

PT J
AU Rouvoet, A
   van Antwerpen, H
   Poulsen, CB
   Krebbers, R
   Visser, E
AF Rouvoet, Arjen
   van Antwerpen, Hendrik
   Poulsen, Casper Bach
   Krebbers, Robbert
   Visser, Eelco
TI Knowing When to Ask Sound Scheduling of Name Resolution in Type Checkers
   Derived from Declarative Specifications
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Name Binding; Type Checker; Statix; Static Semantics; Type Systems
AB There is a large gap between the specification of type systems and the implementation of their type checkers, which impedes reasoning about the soundness of the type checker with respect to the specification. A vision to close this gap is to automatically obtain type checkers from declarative programming language specifications. This moves the burden of proving correctness from a case-by-case basis for concrete languages to a single correctness proof for the specification language. This vision is obstructed by an aspect common to all programming languages: name resolution. Naming and scoping are pervasive and complex aspects of the static semantics of programming languages. Implementations of type checkers for languages with name binding features such as modules, imports, classes, and inheritance interleave collection of binding information (i.e., declarations, scoping structure, and imports) and querying that information. This requires scheduling those two aspects in such a way that query answers are stable--i.e., they are computed only after all relevant binding structure has been collected. Type checkers for concrete languages accomplish stability using language-specific knowledge about the type system.
   In this paper we give a language-independent characterization of necessary and sufficient conditions to guarantee stability of name and type queries during type checking in terms of critical edges in an incomplete scope graph. We use critical edges to give a formal small-step operational semantics to a declarative specification language for type systems, that achieves soundness by delaying queries that may depend on missing information. This yields type checkers for the specified languages that are sound by construction i.e., they schedule queries so that the answers are stable, and only accept programs that are name- and type-correct according to the declarative language specification. We implement this approach, and evaluate it against specifications of a small module and record language, as well as subsets of Java and Scala.
C1 [Rouvoet, Arjen; van Antwerpen, Hendrik; Poulsen, Casper Bach; Krebbers, Robbert; Visser, Eelco] Delft Univ Technol, Delft, Netherlands.
   [Krebbers, Robbert] Radboud Univ Nijmegen, Nijmegen, Netherlands.
C3 Delft University of Technology; Radboud University Nijmegen
RP Rouvoet, A (corresponding author), Delft Univ Technol, Delft, Netherlands.
EM a.j.rouvoet@tudelft.nl; h.vanantwerpen@tudelft.nl;
   c.b.poulsen@tudelft.nl; mail@robbertkrebbers.nl; e.visser@tudelft.nl
OI van Antwerpen, Hendrik/0000-0001-5117-0921
FU NWO VICI Language Designer's Workbench project [639.023.206]; NWO VENI
   Verified Programming Language Interaction project [016.Veni.192.259];
   NWO VENI Composable and Safe-by-Construction Programming Language
   Definitions project [VI.Veni.192.259]
FX We thank Andrew Tolmach and Reuben Rowe for the many discussions on
   scope graphs and constraint semantics and resolution. We also thank the
   anonymous reviewers of this paper and its prior submissions for their
   feedback and valuable suggestions. This research was funded by the NWO
   VICI Language Designer's Workbench project (639.023.206), the NWO VENI
   Verified Programming Language Interaction project (016.Veni.192.259),
   and the NWO VENI Composable and Safe-by-Construction Programming
   Language Definitions project (VI.Veni.192.259).
CR Alblas Henk, 1991, LNCS, V545, P48, DOI [10.1007/3-540-54572-7_3, DOI 10.1007/3-540-54572-7_3]
   [Anonymous], 2000, INFORM SLOVENIA
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 2005, Advanced Topics in Types and Programming Languages
   BIRD RS, 1984, ACTA INFORM, V21, P239, DOI 10.1007/BF00264249
   Boyland JohnTang., 1996, DESCRIPTIONAL COMPOS
   Boyland JT, 2005, J ACM, V52, P627, DOI 10.1145/1082036.1082042
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Ekman T, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P1
   Ekman T, 2006, LECT NOTES COMPUT SC, V4143, P422
   Ekman T, 2007, SCI COMPUT PROGRAM, V69, P14, DOI 10.1016/j.scico.2007.02.003
   Fruhwirth T, 1998, J LOGIC PROGRAM, V37, P95, DOI 10.1016/S0743-1066(98)10005-5
   JOHNSSON T, 1987, LECT NOTES COMPUT SC, V274, P154
   Magnusson E, 2009, AUTOMAT SOFTW ENG, V16, P291, DOI 10.1007/s10515-009-0046-z
   Magnusson Eva, 2003, ENTCS, V82, P532, DOI [10.1016/S1571-0661(05)82627-1, DOI 10.1016/S1571-0661(05)82627-1]
   MOSS C, 1986, LECT NOTES COMPUT SC, V225, P686
   Neron P, 2015, LECT NOTES COMPUT SC, V9032, P205, DOI 10.1007/978-3-662-46669-8_9
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Pelsmaeker A. A., 2019, LIPICS, V134, DOI [10.4230/LIPIcs.ECOOP.2019.26, DOI 10.4230/LIPICS.ECOOP.2019.26]
   Rouvoet Arjen, 2020, HASKELL IMPLEMENTATI, DOI [10.5281/zenodo.4068064, DOI 10.5281/ZENODO.4068064]
   Sasaki A, 2004, NEW GENERAT COMPUT, V22, P37, DOI 10.1007/BF03037280
   van Antwerpen H, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276484
   van Antwerpen H, 2016, PEPM'16: PROCEEDINGS OF THE 2016 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P49, DOI 10.1145/2847538.2847543
   van Antwerpen Hendrik, 2020, KNOWING ASK EXTENDED, DOI [10.5281/zenodo.4091445, DOI 10.5281/ZENODO.4091445]
   Van Wyk E, 2010, SCI COMPUT PROGRAM, V75, P39, DOI 10.1016/j.scico.2009.07.004
NR 26
TC 5
Z9 5
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 180
DI 10.1145/3428248
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900057
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Stump, A
   Jenkins, C
   Spahn, S
   McDonald, C
AF Stump, Aaron
   Jenkins, Christopher
   Spahn, Stephan
   McDonald, Colin
TI Strong Functional Pearl: Harper's Regular-Expression Matcher in Cedille
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE strong functional programming; regular-expression matcher; programming
   with continuations; recursion schemes
AB This paper describes an implementation of Harper's continuation-based regular-expression matcher as a strong functional program in Cedille; i.e., Cedille statically confirms termination of the program on all inputs. The approach uses neither dependent types nor termination proofs. Instead, a particular interface dubbed a recursion universe is provided by Cedille, and the language ensures that all programs written against this interface terminate. Standard polymorphic typing is all that is needed to check the code against the interface. This answers a challenge posed by Bove, Krauss, and Sozeau.
C1 [Stump, Aaron; Jenkins, Christopher; Spahn, Stephan] Univ Iowa, Comp Sci, Iowa City, IA 52240 USA.
   [McDonald, Colin] Univ Notre Dame, Comp Sci & Engn, Notre Dame, IN 46556 USA.
C3 University of Iowa; University of Notre Dame
RP Stump, A (corresponding author), Univ Iowa, Comp Sci, Iowa City, IA 52240 USA.
EM stump@uiowa.edu; christopher-jenkins@uiowa.edu; stephan-spahn@uiowa.edu;
   colinmcd0731@gmail.com
OI McDonald, Colin/0009-0000-8581-0237; Jenkins, Christa
   Willow/0000-0002-5434-5018
FU NSF [1524519]; DoD [FA9550-16-1-0082]; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1524519] Funding Source: National Science Foundation
FX Many thanks to Richard Eisenberg for shepherding the paper, and the
   anonymous ICFP reviewers, for very detailed and constructive criticism
   that resulted in a major revision of the original submission and
   numerous smaller improvements. The paper would not have come together in
   its current form without their generous aid. Thanks also to Garrett
   Morris for many conversations about recursion combinators in Haskell. We
   gratefully acknowledge NSF support under award 1524519, and DoD support
   under award FA9550-16-1-0082 (MURI program).
CR Adámek J, 2007, RAIRO-THEOR INF APPL, V41, P447, DOI 10.1051/ita:2007028
   Ahn Ki Yung, 2011, P 16 ACM SIGPLAN INT
   Barras Bruno, 2008, INT C FDN SOFTW SCI, DOI 10.1007/978-3-540-78499-9_26
   Barthe G, 2004, MATH STRUCT COMP SCI, V14, P97, DOI 10.1017/S0960129503004122
   Bove A, 2016, MATH STRUCT COMP SCI, V26, P38, DOI 10.1017/S0960129514000115
   COCKETT JRB, 1995, THEOR COMPUT SCI, V139, P69, DOI 10.1016/0304-3975(94)00099-5
   Cockett Robin., 1996, CHARITABLE THOUGHTS
   Copello Ernesto, 2014, LECT NOTES COMPUTER, V8771, p62S76, DOI [10.1007/978-3-319-11863, DOI 10.1007/978-3-319-11863]
   Danielsson NilsAnders., INT C FUNCTIONAL PRO, DOI DOI 10.1145/1863543.1863585
   Danvy Olivier, 2001, Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming. PPDP'01, P162, DOI DOI 10.1145/773184.773202
   Firsov Denis, 2018, INTERACTIVE THEOREM
   Giesl J, 2019, LECT NOTES COMPUT SC, V11429, P156, DOI 10.1007/978-3-030-17502-3_10
   Giesl J, 2017, J AUTOM REASONING, V58, P3, DOI 10.1007/s10817-016-9388-y
   Harper R., 1999, Journal of Functional Programming, V9, P463, DOI 10.1017/S0956796899003378
   Hinze R, 2013, SCI COMPUT PROGRAM, V78, P2108, DOI 10.1016/j.scico.2012.07.011
   Holzer Markus, 2010, DEV LANGUAGE THEORY, p16S30
   Hongwei Xi, 2002, HIGHER ORDER SYMBOLI, V15, DOI [10.1023/A:1019916231463, DOI 10.1023/A:1019916231463]
   Hutton Graham, 1999, J FUNCT PROGRAM, V9
   Jenkins Christopher, 2018, P 30 S IMPL APPL FUN, p37S48
   Jenkins Christopher, 2019, ABS190308233 CORR
   Jenkins Christopher, 2020, ARXIVCSPL200102828
   Kashima Ryo, 2001, LECT NOTES RIMS KOKY, V1217
   Kent Andrew, 2017, REFINEMENT TYPES TYP
   Korkut Joomy, 2016, INTRINSIC VERI UNPUB
   Krauss A, 2010, J AUTOM REASONING, V44, P303, DOI 10.1007/s10817-009-9157-2
   Lindley S, 2013, ACM SIGPLAN NOTICES, V48, P81, DOI 10.1145/2503778.2503786
   Matthes Ralph, 1999, THESIS LUDWIG MAXIMI
   Meertens L., 1992, Formal Aspects of Computing, V4, P413, DOI 10.1007/BF01211391
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   MENDLER NP, 1991, ANN PURE APPL LOGIC, V51, P159, DOI 10.1016/0168-0072(91)90069-X
   Owens Scott, 2008, Higher-Order and Symbolic Computation, V21, P377, DOI 10.1007/s10990-008-9038-0
   Parigot Michel, 1989, SPRINGER LECT NOTES, V440, DOI 10.1007/3-540-52753-2_47
   Stump A, 2018, ANN PURE APPL LOGIC, V169, P637, DOI 10.1016/j.apal.2018.03.002
   Stump Aaron, 2017, J FUNCT PROGRAM, V27, P14
   Stump Aaron, 2018, ABS181101318 CORR
   Stump Aaron, 2018, ARXIV180604709
   Surensen Morten Heine, 2006, LECT CURRY HOWARD IS, V149
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Telford Alastair, 2000, ENSURING TERMINATION, V4
   Turner DA, 2004, J UNIVERS COMPUT SCI, V10, P751
   Turner DA, 1995, LECT NOTES COMPUT SC, V1022, P1
   Uustalu Tarmo, 1999, NORDIC J COMPUTING, V6
   Uustalu Tarmo, 2000, UUCS200019 ULTR U DE, p69S85
   Vazou N, 2014, ACM SIGPLAN NOTICES, V49, P39, DOI [10.1145/2633357.2633366, 10.1145/2775050.2633366]
   Weirich S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341705
   Weirich S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110275
NR 46
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 122
DI 10.1145/3409004
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700036
OA gold
DA 2024-07-18
ER

PT J
AU Kodosky, J
AF Kodosky, Jeffrey
TI LabVIEW
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE LabVIEW; data flow language; graphical programming
AB LabVIEWT is unusual among programming languages in that we did not intend to create a new language but rather to develop a tool for non-programmer scientists and engineers to assist them in automating their test and measurement systems.
   Prior experience creating software for controlling instruments led us to the perspective that the software ought to be modeled as a hierarchy of "virtual instruments". The lowest level virtual instruments were simply reflections of the individual physical instruments they controlled. Higher level virtual instruments combined lower level ones to deliver more complex measurements. A frequency response virtual instrument could be implemented using a voltmeter and a sine-wave generator inside a loop that stepped through a frequency range. This was mostly an abstract concept at the time because it was hard to imagine how an existing language or tool could provide the rich yet intuitive experience of using a real instrument.
   Inspired by the first Macintosh computer, we quickly realized the graphical user interface would be a natural way to interact with a virtual instrument, but it also sparked our imaginations about using graphics for creating software at a higher level of abstraction.
   The February 1982 issue of IEEE Computer was devoted to data-flow models of computation, and it convinced us that graphical data-flow diagrams needed to be part of the solution. The major difficulty we saw, however, was the need to use cycles in the data-flow diagram to represent loops. Cycles increased complexity and made diagrams hard to understand and even harder to create.
   This concern led to a major innovation in creating LabVIEW: merging structured programming concepts with data-flow. We represented control-flow structures as boxes in a data-flow diagram. We knew how to reason about loops, so we could introduce them as first class elements of the graphical representation rather than being constructed from lower-level elements. A box could encapsulate the semantics of the iterative behavior; it could clearly separate the body of the loop (the diagram inside the box) from the code before and after the loop (the diagram outside the box); and, its boundary could hold iteration state information.
   Those fundamental concepts of "graphical", "structured" and "data-flow" enabled us to propose a software product. We staffed up a small skunkworks team to implement it. We called it LabVIEW. It was to be an engineer's tool for automating measurement systems. At first, we were reluctant to admit that we had created a graphical programming language. When we finally did, we nicknamed it G, for Graphical language, so we could talk about the language as distinct from the integrated development environment (IDE), LabVIEW. In practice, almost everyone refers to both the language and the IDE as LabVIEW.
   Without intending to do so, we created a programming language radically different from those that came before, pioneering techniques of graphically creating and viewing code, eliminating manual memory management without adding garbage collection overhead, and anticipating the massively parallel systems of the modern era. LabVIEW continues to evolve and thrive after more than 30 years.
C1 [Kodosky, Jeffrey] Natl Instruments, Austin, TX 78759 USA.
C3 National Instruments Corporation
RP Kodosky, J (corresponding author), Natl Instruments, R&D, 11500 N Mopac, Austin, TX 78759 USA.
EM jeff.kodosky@ni.com
CR Abu-Mahmeed S, 2009, LECT NOTES COMPUT SC, V5501, P204, DOI 10.1007/978-3-642-00722-4_15
   Chugani M., 1998, LABVIEW SIGNAL PROCE
   Czerwinski F, 2011, COMPUT PHYS COMMUN, V182, P485, DOI 10.1016/j.cpc.2010.10.019
   DAVIS AL, 1982, COMPUTER, V15, P26, DOI 10.1109/MC.1982.1653939
   de Carvalho Andre Tomaz, 2018, MODULAR INSTRUMENTAT
   Fordor Ferenc, 2017, PROBING LARGE ARRAY
   GAJSKI DD, 1982, COMPUTER, V15, P58, DOI 10.1109/MC.1982.1653942
   Hansen P. B., 1975, IEEE Transactions on Software Engineering, VSE-1, P199, DOI 10.1109/TSE.1975.6312840
   IEEE, 1988, 48811987 ANSIIEEE, P1, DOI [10.1109/IEEESTD.1988.81527, DOI 10.1109/IEEESTD.1988.81527]
   Jamal R., 1995, Proceedings. 11th IEEE International Symposium on Visual Languages (Cat. No.95TB8105), P99, DOI 10.1109/VL.1995.520791
   Johnson G., 2001, LABVIEW GRAPHICAL PR, V3rd
   Kodosky J., 1991, Proceedings. 1991 IEEE Workshop on Visual Languages (Cat. No.91TH0402-8), P34, DOI 10.1109/WVL.1991.238853
   Losito R, 2008, R&D MAG, V50, P54
   Losito Roberto, 2008, CERN USES NI LABVIEW
   Morris Alan S. Morris, 2016, DATA ACQUISITION LAB, V2, P347
   Paton Barry E, 1999, SENSORS TRANSDUCERS
   Schacht Stijn, 2018, MATERIALISE CONTROL
   Schwarz Yoram, 2018, BUILDING NEXT GENERA
   Stevens Jeff, 2008, USING GRAPHICAL SYST
   TRAVIS J, 2000, INTERNET APPL LABVIE
   TRUCHARD JJ, 1978, J ACOUST SOC AM, V64, pS7, DOI 10.1121/1.2004382
   VI Engineering Inc, 2009, MED DEV TEST NATL IN
   Wang ZY, 2013, MEASUREMENT, V46, P402, DOI 10.1016/j.measurement.2012.07.015
   Weisberg Dave, 2007, BUILDING TEST SYSTEM
   Wells George, 1992, DTELEMETRY MONITORIN
   Whitley KN, 2006, INT J HUM-COMPUT ST, V64, P281, DOI 10.1016/j.ijhcs.2005.06.005
   Wiltberger Michael, 2007, IMPROVING RETINAL DI
   Wrobel PM, 2016, NUCL INSTRUM METH A, V833, P105, DOI 10.1016/j.nima.2016.07.030
NR 28
TC 25
Z9 26
U1 7
U2 37
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 78
DI 10.1145/3386328
PG 54
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900011
OA gold
DA 2024-07-18
ER

PT J
AU Shajii, A
   Numanagic, I
   Baghdadi, R
   Berger, B
   Amarasinghe, S
AF Shajii, Ariya
   Numanagic, Ibrahim
   Baghdadi, Riyadh
   Berger, Bonnie
   Amarasinghe, Saman
TI Seq: A High-Performance Language for Bioinformatics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE computational biology; bioinformatics; programming language;
   domain-specific language; Python; optimization
ID SEQUENCE ALIGNMENT; PARALLELISM
AB The scope and scale of biological data are increasing at an exponential rate, as technologies like next-generation sequencing are becoming radically cheaper and more prevalent. Over the last two decades, the cost of sequencing a genome has dropped from $100 million to nearly $100-a factor of over 10(6)-and the amount of data to be analyzed has increased proportionally. Yet, as Moore's Law continues to slow, computational biologists can no longer rely on computing hardware to compensate for the ever-increasing size of biological datasets. In a field where many researchers are primarily focused on biological analysis over computational optimization, the unfortunate solution to this problem is often to simply buy larger and faster machines.
   Here, we introduce Seq, the first language tailored specifically to bioinformatics, which marries the ease and productivity of Python with C-like performance. Seq starts with a subset of Python and is in many cases a drop-in replacement yet also incorporates novel bioinformatics- and computational genomics-oriented data types, language constructs and optimizations. Seq enables users to write high-level, Pythonic code without having to worry about low-level or domain-specific optimizations, and allows for the seamless expression of the algorithms, idioms and patterns found in many genomics or bioinformatics applications. We evaluated Seq on several standard computational genomics tasks like reverse complementation, k-mer manipulation, sequence pattern matching and large genomic index queries. On equivalent CPython code, Seq attains a performance improvement of up to two orders of magnitude, and a 160x improvement once domain-specific language features and optimizations are used. With parallelism, we demonstrate up to a 650x improvement. Compared to optimized c++ code, which is already difficult for most biologists to produce, Seq frequently attains up to a 2x improvement, and with shorter, cleaner code. Thus, Seq opens the door to an age of democratization of highly-optimized bioinformatics software.
C1 [Shajii, Ariya; Numanagic, Ibrahim; Baghdadi, Riyadh; Berger, Bonnie; Amarasinghe, Saman] MIT CSAIL, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Shajii, A (corresponding author), MIT CSAIL, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
EM arshajii@mit.edu; inumanag@mit.edu; baghdadi@mit.edu; bab@mit.edu;
   saman@mit.edu
OI Baghdadi, Riyadh/0000-0002-9350-3998; Amarasinghe,
   Saman/0000-0002-7231-7643
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   Altshuler D, 2010, NATURE, V467, P1061, DOI 10.1038/nature09534
   [Anonymous], MAGRITTR FORWARD PIP
   Appuswamy R, 2018, IEEE SYM PARA DISTR, P257, DOI 10.1109/IPDPSW.2018.00050
   Baghdadi R, 2019, INT SYM CODE GENER, P193, DOI [10.5281/zenodo.2375075, 10.1109/CGO.2019.8661197]
   Bailey JA, 2001, GENOME RES, V11, P1005, DOI 10.1101/gr.GR-1871R
   Baker M, 2016, NATURE, V533, P452, DOI 10.1038/533452a
   Behnel S, 2011, COMPUT SCI ENG, V13, P31, DOI 10.1109/MCSE.2010.118
   Bezanson Jeff, 2012, Julia: A fast dynamic language for technical computing
   BOEHM HJ, 1988, SOFTWARE PRACT EXPER, V18, P807, DOI 10.1002/spe.4380180902
   Bolz C. F., 2009, ICOOOLPS, P18, DOI DOI 10.1145/1565824.1565827
   Brinda K, 2015, BIOINFORMATICS, V31, P3584, DOI 10.1093/bioinformatics/btv419
   Chafi H, 2011, ACM SIGPLAN NOTICES, V46, P35, DOI 10.1145/2038037.1941561
   Chen SM, 2007, ACM T DATABASE SYST, V32, DOI 10.1145/1272743.1272747
   Chiw C, 2012, ACM SIGPLAN NOTICES, V47, P111, DOI 10.1145/2345156.2254079
   Cock PJA, 2009, BIOINFORMATICS, V25, P1422, DOI 10.1093/bioinformatics/btp163
   Döring A, 2008, BMC BIOINFORMATICS, V9, DOI 10.1186/1471-2105-9-11
   Dufour Mark, 2006, Master's thesis
   Farrar M, 2007, BIOINFORMATICS, V23, P156, DOI 10.1093/bioinformatics/btl582
   Ferragina Paolo., 2004, P 15 ANN ACM SIAM S, P655
   Gouy I, The computer language benchmarks game
   Hayden EC, 2014, NATURE, V507, P294, DOI 10.1038/507294a
   Hayen K, 2012, NUITKA
   Kamps R, 2017, INT J MOL SCI, V18, DOI 10.3390/ijms18020308
   Khan AR, 2018, EVOL BIOINFORM, V14, DOI 10.1177/1176934318758650
   Kiriansky V, 2018, 27TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES (PACT 2018), DOI 10.1145/3243176.3243185
   Kjolstad F, 2017, IEEE INT CONF AUTOM, P943, DOI 10.1109/ASE.2017.8115709
   Kjolstad F, 2016, ACM T GRAPHIC, V35, DOI 10.1145/2866569
   Lam S. K., 2015, P 2 WORKSHOP LLVM CO, P1, DOI [DOI 10.1145/2833157.2833162, 10.1145/2833157.2833162]
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Li H, 2010, BRIEF BIOINFORM, V11, P473, DOI 10.1093/bib/bbq015
   Li H, 2009, BIOINFORMATICS, V25, P1754, DOI 10.1093/bioinformatics/btp324
   Li Heng, 2009, BIOINFORMATICS, V25
   Li H, 2009, BIOINFORMATICS, V25, P1094, DOI [10.1093/bioinformatics/btp100, 10.1093/bioinformatics/btp324]
   Lu HY, 2016, GENOM PROTEOM BIOINF, V14, P265, DOI 10.1016/j.gpb.2016.05.004
   Mahadik K., 2016, International Conference on Supercomputing, P34
   Manolio TA, 2008, J CLIN INVEST, V118, P1590, DOI 10.1172/JCI34772
   Mardis ER, 2017, NAT PROTOC, V12, P213, DOI 10.1038/nprot.2016.182
   McKenna A, 2010, GENOME RES, V20, P1297, DOI 10.1101/gr.107524.110
   Muir P, 2016, GENOME BIOL, V17, DOI 10.1186/s13059-016-0917-0
   Nishanov Gor, 2017, ISO/IEC TS 22277:2017
   Ondov BD, 2016, GENOME BIOL, V17, DOI 10.1186/s13059-016-0997-x
   Peng RD, 2011, SCIENCE, V334, P1226, DOI 10.1126/science.1213847
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Sboner A, 2011, GENOME BIOL, V12, DOI 10.1186/gb-2011-12-8-125
   Schardl TB, 2017, ACM SIGPLAN NOTICES, V52, P249, DOI [10.1145/3018743.3018758, 10.1145/3155284.3018758]
   Shajii A, 2018, CELL SYST, V7, P219, DOI 10.1016/j.cels.2018.07.005
   Simpson JT, 2012, GENOME RES, V22, P549, DOI 10.1101/gr.126953.111
   Smarda P, 2014, P NATL ACAD SCI USA, V111, pE4096, DOI 10.1073/pnas.1321152111
   Sosic M, 2017, BIOINFORMATICS, V33, P1394, DOI 10.1093/bioinformatics/btw753
   Suzuki H, 2018, BMC BIOINFORMATICS, V19, DOI 10.1186/s12859-018-2014-8
   Van der Auwera G, 2017, 18 ANN BIOINF OP SOU
   van Rossum Guido, 2015, PYTHON LIB REFERENCE
   Wang WD, 2012, IEEE SYM PARA DISTR, P665, DOI 10.1109/IPDPSW.2012.83
   Weymann D, 2017, MOL GENET GENOM MED, V5, P251, DOI 10.1002/mgg3.281
   Yorukoglu D, 2016, NAT BIOTECHNOL, V34, P374, DOI 10.1038/nbt.3511
   Zaharia M, 2011, Faster and More Accurate Sequence Alignment with SNAP, V1111, P5572
   Zhang D, 2007, LECT NOTES COMPUT SC, V4425, P113
   Zhang YM, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276491
   Zheng GXY, 2016, NAT BIOTECHNOL, V34, P303, DOI 10.1038/nbt.3432
NR 60
TC 10
Z9 10
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 125
DI 10.1145/3360551
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500010
PM 35775031
OA Green Accepted, gold
DA 2024-07-18
ER

PT J
AU Song, D
   Lee, M
   Oh, H
AF Song, Dowon
   Lee, Myungho
   Oh, Hakjoo
TI Automatic and Scalable Detection of Logical Errors in Functional
   Programming Assignments
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Automated Test Case Generation; Program Synthesis; Symbolic Execution
ID HIGHER-ORDER; SYMBOLIC EXECUTION
AB We present a new technique for automatically detecting logical errors in functional programming assignments. Compared to syntax or type errors, detecting logical errors remains largely a manual process that requires hand-made test cases. However, designing proper test cases is nontrivial and involves a lot of human effort. Furthermore, manual test cases are unlikely to catch diverse errors because instructors cannot predict all corner cases of diverse student submissions. We aim to reduce this burden by automatically generating test cases for functional programs. Given a reference program and a student's submission, our technique generates a counter-example that captures the semantic difference of the two programs without any manual effort. The key novelty behind our approach is the counter-example generation algorithm that combines enumerative search and symbolic verification techniques in a synergistic way. The experimental results show that our technique is able to detect 88 more errors not found by mature test cases that have been improved over the past few years, and performs better than the existing property-based testing techniques. We also demonstrate the usefulness of our technique in the context of automated program repair, where it effectively helps to eliminate test-suite-overfitted patches.
C1 [Song, Dowon; Lee, Myungho; Oh, Hakjoo] Korea Univ, Dept Comp Sci & Engn, 145 Anam Ro, Seoul 02841, South Korea.
C3 Korea University
RP Oh, H (corresponding author), Korea Univ, Dept Comp Sci & Engn, 145 Anam Ro, Seoul 02841, South Korea.
EM dowon_song@korea.ac.kr; myungho_lee@korea.ac.kr; hakjoo_oh@korea.ac.kr
FU Next-Generation Information Computing Development Program through the
   National Research Foundation of Korea(NRF) - Ministry of Science, ICT
   [2017M3C4A7068175]; Samsung Research Funding & Incubation Center of
   Samsung Electronics [SRFC-IT1701-09]
FX This research was supported by Next-Generation Information Computing
   Development Program through the National Research Foundation of
   Korea(NRF) funded by the Ministry of Science, ICT (2017M3C4A7068175).
   This work was supported by Samsung Research Funding & Incubation Center
   of Samsung Electronics under Project Number SRFC-IT1701-09.
CR Albarghouthi Aws, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P934, DOI 10.1007/978-3-642-39799-8_67
   Bhatia S, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P60, DOI 10.1145/3180155.3180219
   Cadar C., 2008, OSDI, V8, P209, DOI DOI 10.5555/1855741.1855756
   Cadar C, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1066, DOI 10.1145/1985793.1985995
   Cadar C, 2008, ACM T INFORM SYST SE, V12, DOI 10.1145/1455518.1455522
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   DAntoni L., 2016, QLOSE PROGRAM REPAIR
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Forrest Stephanie, 2009, P 11 ANN C GEN EV CO, P947
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   Gulwani S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P62
   Gupta R, 2017, AAAI CONF ARTIF INTE, P1345
   Heidegger P, 2010, LECT NOTES COMPUT SC, V6141, P154, DOI 10.1007/978-3-642-13953-6_9
   Nguyen HDT, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P772, DOI 10.1109/ICSE.2013.6606623
   Khurshid S, 2003, LECT NOTES COMPUT SC, V2619, P553
   Kim D, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P802, DOI 10.1109/ICSE.2013.6606626
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Klein C, 2010, ACM SIGPLAN NOTICES, V45, P555, DOI 10.1145/1932682.1869505
   Kneuss E, 2013, ACM SIGPLAN NOTICES, V48, P407, DOI [10.1145/2509136.2509555, 10.1145/2544173.2509555]
   Koopman P, 2006, LECT NOTES COMPUT SC, V4279, P148
   Lampropoulos L, 2017, ACM SIGPLAN NOTICES, V52, P114, DOI 10.1145/3093333.3009868
   Le Goues C, 2012, PROC INT CONF SOFTW, P3, DOI 10.1109/ICSE.2012.6227211
   Lee J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276528
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   Long F, 2016, ACM SIGPLAN NOTICES, V51, P298, DOI 10.1145/2914770.2837617
   Löscher A, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P46, DOI 10.1145/3092703.3092711
   Mechtaev S, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P129, DOI 10.1145/3180155.3180247
   Nguyen PC, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P139, DOI 10.1145/2628136.2628156
   Nguyen PC, 2015, ACM SIGPLAN NOTICES, V50, P446, DOI 10.1145/2737924.2737971
   Nowozin Sebastian, 2017, INT C LEARN REPR
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Palka Michal H, 2011, P 6 INT WORKSH AUT S, P91, DOI DOI 10.1145/1982595.1982615
   Phothilimthana PM, 2017, ITICSE'17: PROCEEDINGS OF THE 2017 ACM CONFERENCE ON INNOVATION AND TECHNOLOGY IN COMPUTER SCIENCE EDUCATION, P182, DOI 10.1145/3059009.3059058
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Pu YW, 2016, COMPANION PROCEEDINGS OF THE 2016 ACM SIGPLAN INTERNATIONAL CONFERENCE ON SYSTEMS, PROGRAMMING, LANGUAGES AND APPLICATIONS: SOFTWARE FOR HUMANITY (SPLASH COMPANION'16), P39, DOI 10.1145/2984043.2989222
   Selakovic M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276531
   Singh R, 2013, ACM SIGPLAN NOTICES, V48, P15, DOI 10.1145/2499370.2462195
   Smith EK, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P532, DOI 10.1145/2786805.2786825
   So S, 2018, PROCEEDINGS OF THE TWENTY-SEVENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P1618
   So S, 2017, LECT NOTES COMPUT SC, V10422, P364, DOI 10.1007/978-3-319-66706-5_18
   Sun CN, 2016, ACM SIGPLAN NOTICES, V51, P849, DOI 10.1145/3022671.2984038
   Tobin-Hochstadt S, 2012, ACM SIGPLAN NOTICES, V47, P537, DOI 10.1145/2398857.2384655
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Weimer W, 2009, PROC INT CONF SOFTW, P364, DOI 10.1109/ICSE.2009.5070536
   Xin Q, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P226, DOI 10.1145/3092703.3092718
   Yaghmazadeh N, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133887
   Yang JQ, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P831, DOI 10.1145/3106237.3106274
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
NR 51
TC 9
Z9 10
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 188
DI 10.1145/3360614
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500073
OA gold
DA 2024-07-18
ER

PT J
AU Castagna, G
   Lanvin, V
   Petrucciani, T
   Siek, JG
AF Castagna, Giuseppe
   Lanvin, Victor
   Petrucciani, Tommaso
   Siek, Jeremy G.
TI Gradual Typing: A New Perspective
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Subtyping; Gradual Typing; Union Types; Intersection Types; Semantic
   Subtyping; Let-Polymorphism; Hindley-Milner
AB We define a new, more semantic interpretation of gradual types and use it to "gradualize" two forms of polymorphism: subtyping polymorphism and implicit parametric polymorphism. In particular, we use the new interpretation to define three gradual type systems - Hindley-Milner, with subtyping, and with union and intersection types- in terms of two preorders, subtyping and materialization. These systems are defined both declaratively and algorithmically. The declarative presentation consists in adding two subsumption-like rules, one for each preorder, to the standard rules of each type system. This yields more intelligible and streamlined definitions and shows a direct correlation between cast insertion and materialization. For the algorithmic presentation, we show how it can be defined by reusing existing techniques such as unification and tallying.
C1 [Castagna, Giuseppe] Univ Paris Diderot, CNRS, Paris, France.
   [Lanvin, Victor; Petrucciani, Tommaso] Univ Paris Diderot, Paris, France.
   [Petrucciani, Tommaso] Univ Genoa, Genoa, Italy.
   [Siek, Jeremy G.] Univ Indiana, Bloomington, IN USA.
C3 Universite Paris Cite; Centre National de la Recherche Scientifique
   (CNRS); Universite Paris Cite; University of Genoa; Indiana University
   System; Indiana University Bloomington
RP Castagna, G (corresponding author), Univ Paris Diderot, CNRS, Paris, France.
RI Siek, Jeremy Graham/ABG-8845-2020
OI Siek, Jeremy/0000-0002-9894-4856; Castagna, Giuseppe/0000-0003-0951-7535
FU Google; National Science Foundation [1518844, 1763922]; Direct For
   Computer & Info Scie & Enginr; Division of Computing and Communication
   Foundations [1763922] Funding Source: National Science Foundation;
   Division of Computing and Communication Foundations; Direct For Computer
   & Info Scie & Enginr [1518844] Funding Source: National Science
   Foundation
FX We wish to thank the anonymous POPL reviewers for their detailed
   comments. This work was partially supported by a Google PhD Fellowship
   Program for Victor Lanvin and is partially based upon work supported by
   the National Science Foundation under Grant No. 1518844 and 1763922.
CR Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   Ahmed Amal, 2017, INT C FUNCT PROGR IC
   Aiken A., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P31, DOI 10.1145/165180.165188
   Aiken A., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P163, DOI 10.1145/174675.177847
   Angelo Pedro, 2018, WORKSH INT TYP REL S WORKSH INT TYP REL S
   [Anonymous], 2005, Advanced Topics in Types and Programming Languages
   Bauman S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133878
   Bierman G, 2014, LECT NOTES COMPUT SC, V8586, P257
   Campora John Peter, 2017, P ACM PROGR LANG P ACM PROGR LANG, V15
   CARTWRIGHT R, 1991, SIGPLAN NOTICES, V26, P278, DOI 10.1145/113446.113469
   Castagna G, 2005, LECT NOTES COMPUT SC, V3701, P1
   Castagna G, 2005, LECT NOTES COMPUT SC, V3580, P30
   Castagna G, 2016, ACM SIGPLAN NOTICES, V51, P378, DOI 10.1145/3022670.2951928
   Castagna G, 2015, ACM SIGPLAN NOTICES, V50, P289, DOI 10.1145/2775051.2676991
   Castagna G, 2011, ACM SIGPLAN NOTICES, V46, P94, DOI 10.1145/2034574.2034788
   Castagna Giuseppe, 2017, P ACM PROGRAM LANG, DOI DOI 10.1145/3110285
   Castagna Giuseppe, 2018, COVARIANCE CON UNPUB COVARIANCE CON UNPUB
   COURCELLE B, 1983, THEOR COMPUT SCI, V25, P95, DOI 10.1016/0304-3975(83)90059-2
   DELLAROCCA SR, 1988, THEOR COMPUT SCI, V59, P181, DOI 10.1016/0304-3975(88)90101-6
   Dolan S, 2017, ACM SIGPLAN NOTICES, V52, P60, DOI 10.1145/3093333.3009882
   Findler Robert Bruce, 2002, NUCCS0205
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   FUH YC, 1988, LECT NOTES COMPUT SC, V300, P94
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia R, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2676726.2676992, 10.1145/2775051.2676992]
   Garcia Ronald, 2013, ICFP 13 ICFP 13
   Gesbert N, 2015, ACM T PROGR LANG SYS, V38, DOI 10.1145/2812805
   Harper Robert, 2006, PROGRAMMING LANGUAGE
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Hosoya Haruo, 2000, ICFP 00 SIGPLAN NOTI, V35
   Igarashi Yuu, 2017, INT C FUNCT PROGR IC
   Ina Lintaro, 2011, P 2011 ACM INT C OBJ
   Jafery Khurram A., 2017, S PRINC PROGR LANG P S PRINC PROGR LANG P
   Keil M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P375, DOI 10.1145/2784731.2784737
   Kfoury AJ, 2004, THEOR COMPUT SCI, V311, P1, DOI 10.1016/j.tcs.2003.10.032
   Lehmann Nicolas, 2017, S PRINC PROGR LANG P S PRINC PROGR LANG P
   Maidl Andre Murbach, 2014, P WORKSH DYN LANG AP P WORKSH DYN LANG AP
   MARTELLI A, 1982, ACM T PROGR LANG SYS, V4, P258, DOI 10.1145/357162.357169
   Mitchell J. C., 1991, Journal of Functional Programming, V1, P245, DOI 10.1017/S0956796800000113
   Ningning Xie, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P3, DOI 10.1007/978-3-319-89884-1_1
   Ortin F, 2011, INFORM PROCESS LETT, V111, P278, DOI 10.1016/j.ipl.2010.12.006
   Petrucciani Tommaso, 2018, SEMANTIC SUBTYPING N SEMANTIC SUBTYPING N
   Pottier F, 2001, INFORM COMPUT, V170, P153, DOI 10.1006/inco.2000.2963
   Rastogi A, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P481
   Sekiyama T, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/2994594
   Siek J.G., 2008, Proceedings of the 2008 symposium on Dynamic languages, P7, DOI DOI 10.1145/1408681.1408688
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek J, 2015, ACM SIGPLAN NOTICES, V50, P425, DOI [10.1145/2737924.2737968, 10.1145/2813885.2737968]
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek Jeremy G., LIPICS LEIBNIZ INT P, V32
   Siek Jeremy G., 2008, CUCS103908 U COL CUCS103908 U COL
   Swamy N, 2014, ACM SIGPLAN NOTICES, V49, P425, DOI 10.1145/2535838.2535889
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Toro M, 2017, LECT NOTES COMPUT SC, V10422, P382, DOI 10.1007/978-3-319-66706-5_19
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Wand M., 1987, Fundamenta Informaticae, V10, P115
NR 56
TC 20
Z9 21
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 16
DI 10.1145/3290329
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300016
OA gold
DA 2024-07-18
ER

PT J
AU Renaux, T
   Van den Vonder, S
   De Meuter, W
AF Renaux, Thierry
   Van den Vonder, Sam
   De Meuter, Wolfgang
TI Secure RDTs: Enforcing Access Control Policies for Offline Available
   JSON Data
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE replicated data types; role-based access control; security;
   conflict-free replicated data types
AB Replicated Data Types (RDTs) are a type of data structure that can be replicated over a network, where each replica can be kept (eventually) consistent with the other replicas. They are used in applications with intermittent network connectivity, since local (offline) edits can later be merged with the other replicas. Applications that want to use RDTs often have an inherent security component that restricts data access for certain clients. However, access control for RDTs is difficult to enforce for clients that are not running within a secure environment, e.g., web applications where the client-side software can be freely tampered with. In essence, an application cannot prevent a client from reading data which they are not supposed to read, and any malicious changes will also affect well-behaved clients. This paper proposes Secure RDTs (SRDTs), a data type that specifies role-based access control for offline-available JSON data. In brief, a trusted application server specifies a security policy based on roles with read and write privileges for certain fields of an SRDT. The server enforces read privileges by projecting the data and security policy to omit any non-readable fields for the user's given role, and it acts as an intermediary to enforce write privileges. The approach is presented as an operational semantics engineered in PLT Redex, which is validated by formal proofs and randomised testing in Redex to ensure that the formal specification is secure.
C1 [Renaux, Thierry; Van den Vonder, Sam; De Meuter, Wolfgang] Vrije Univ Brussel, Brussels, Belgium.
C3 Vrije Universiteit Brussel
RP Renaux, T (corresponding author), Vrije Univ Brussel, Brussels, Belgium.
EM Thierry.Renaux@vub.be; Sam.Van.den.Vonder@vub.be;
   Wolfgang.De.Meuter@vub.be
OI Renaux, Thierry/0000-0002-9301-2187; DE MEUTER,
   WOLFGANG/0000-0002-5229-5627; Van den Vonder, Sam/0000-0002-9241-1098
FU Flanders Innovation & Entrepreneurship (VLAIO); Innoviris
FX Sam Van den Vonder was funded by the Flanders Innovation &
   Entrepreneurship (VLAIO) "Cybersecurity Initiative Flanders" program.
   Thierry Renaux was partly funded by the Flanders Innovation &
   Entrepreneurship (VLAIO) "Cybersecurity Initiative Flanders" program,
   and the Innoviris "SWAMP" project.
CR Adobe, 2022, Adobe to Acquire Figma
   [Anonymous], 2021, OWASP Top Ten Web Application Security Risks | OWASP
   Automerge Contributors, 2023, Automerge CRDT
   Barbosa M, 2021, PROCEEDINGS OF THE 2021 INTERNATIONAL CONFERENCE ON DISTRIBUTED COMPUTING AND NETWORKING (ICDCN '21), P6, DOI 10.1145/3427796.3427831
   Chong S, 2009, COMMUN ACM, V52, P79, DOI 10.1145/1461928.1461949
   Clark J., 1999, XML Path Language (XPath) Version 1.0
   Crampton J, 2006, COMPUT SYST SCI ENG, V21, P325
   Damiani E., 2002, ACM Transactions on Information and Systems Security, V5, P169, DOI 10.1145/505586.505590
   Do Q, 2019, COMPUT SECUR, V81, P156, DOI 10.1016/j.cose.2018.12.002
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Felleisen M, 2018, COMMUN ACM, V61, P62, DOI 10.1145/3127323
   Friesen Jeff, 2019, Extracting JSON Values with JsonPath, P299, DOI DOI 10.1007/978-1-4842-4330-5_10
   Fundulaki Irini, 2004, P 9 ACM S ACC CONTR, P61, DOI [10.1145/990036.990046, DOI 10.1145/990036.990046]
   Goessner S., 2007, JSONPath - XPath for JSON
   Grosch P, 2020, 7TH WORKSHOP ON PRINCIPLES AND PRACTICE OF CONSISTENCY FOR DISTRIBUTED DATA (PAPOC '20), DOI 10.1145/3380787.3393679
   GUN, 2022, GUN: How to add security
   ISO Central Secretary, 2017, Technical Report ISO/IEC 21778:2017
   Jahns Kevin, 2023, Yjs-Shared data types for building collaborative software
   Klein C, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P285
   Klein Casey., 2009, Proc. Scheme and Functional Programming, P26
   Kleppmann M, 2022, PAPOC'22: PROCEEDINGS OF THE 9TH PRINCIPLES AND PRACTICE OF CONSISTENCY FOR DISTRIBUTED DATA, P8, DOI 10.1145/3517209.3524042
   Kleppmann M, 2022, IEEE T PARALL DISTR, V33, P1711, DOI 10.1109/TPDS.2021.3118603
   Kleppmann M, 2017, IEEE T PARALL DISTR, V28, P2733, DOI 10.1109/TPDS.2017.2697382
   Kleppmann Martin, 2018, 1 UK MOB WEAR UB SYS
   Liu J, 2017, J COMPUT SECUR, V25, P367, DOI 10.3233/JCS-15805
   Madsen Magnus, 2020, LIPIcs, V12, P1, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Meta Platforms, 2023, React Native: Learn once, write anywhere
   Meta Platforms, 2023, React-A JavaScript library for building user interfaces
   Murata M., 2006, ACM Transactions on Information and Systems Security, V9, P292, DOI 10.1145/1178618.1178621
   Nadal Mark, 2023, GUN: An open source cybersecurity protocol for syncing decentralized graph data
   Natuurpunt, 2023, Over Natuurpunt
   Nicolaescu P, 2015, LECT NOTES COMPUT SC, V9114, P675, DOI 10.1007/978-3-319-19890-3_55
   Oostvogels N, 2017, LECT NOTES COMPUT SC, V10360, P323, DOI 10.1007/978-3-319-60131-1_18
   Philips Laure, 2018, Art Sci. Eng. Program., V2, DOI [10.22152/programmingjournal.org/2018/2/3, DOI 10.22152/PROGRAMMINGJOURNAL.ORG/2018/2/3]
   Redis, 2020, Diving into CRDTs
   Renaux Thierry, 2023, Secure RDTs: Enforcing Access Control Policies for Offline Available JSON Data (Artifact), DOI [10.5281/zenodo.8310917, DOI 10.5281/ZENODO.8310917]
   Riak, 2013, Introducing Riak 2.0: Data Types, Strong Consistency, Full-Text Search, and Much More
   Rinberg A, 2022, PROC VLDB ENDOW, V15, P1053, DOI 10.14778/3510397.3510403
   SALTZER JH, 1975, P IEEE, V63, P1278, DOI 10.1109/PROC.1975.9939
   Sandhu R., 1998, P 3 ACM WORKSHOP ROL, P33, DOI DOI 10.1145/286884.286891
   Sandhu RS, 1996, COMPUTER, V29, P38, DOI 10.1109/2.485845
   Serrano M, 2016, ACM SIGPLAN NOTICES, V51, P180, DOI 10.1145/3022670.2951916
   Servos D, 2017, ACM COMPUT SURV, V49, DOI 10.1145/3007204
   Shapiro M, 2011, LECT NOTES COMPUT SC, V6976, P386, DOI 10.1007/978-3-642-24550-3_29
   Shapiro Marc, 2011, Research Report RR- 7506
   Shukla Dharma., 2018, Azure Cosmos DB: Pushing the frontier of globally distributed databases
   van der Linde A., 2020, Proc. VLDB Endow., V13, P2590, DOI DOI 10.14778/3407790.3407847
   Vohland K., 2021, The Science of Citizen Science, V1, P1, DOI [10.1007/978-3-030-58278-4, DOI 10.1007/978-3-030-58278-4, 10.1007/978-3-030-58278-41, 10.1007/978-3-030-58278-4_1, DOI 10.1007/978-3-030-58278-4_1]
   Wallace Evan, 2019, How Figma's multiplayer technology works
   Weisenburger P, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276499
   Yactine Houssam, 2021, Distributed Applications and Interoperable Systems. 21st IFIP WG 6.1 International Conference, DAIS 2021 Held as Part of the 16th International Federated Conference on Distributed Computing Techniques, DisCoTec 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12718), P57, DOI 10.1007/978-3-030-78198-9_4
NR 51
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 227
DI 10.1145/3622802
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100007
OA gold
DA 2024-07-18
ER

PT J
AU Tamir, O
   Taube, M
   McMillan, KL
   Shoham, S
   Howell, J
   Gueta, G
   Sagiv, M
AF Tamir, Orr
   Taube, Marcelo
   McMillan, Kenneth L.
   Shoham, Sharon
   Howell, Jon
   Gueta, Guy
   Sagiv, Mooly
TI Counterexample Driven Quantifier Instantiations with Applications to
   Distributed Protocols
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Formal verification; Ivy; SMT; Abstraction-refinement
ID VERIFICATION; SAFETY
AB Formally verifying infinite-state systems can be a daunting task, especially when it comes to reasoning about quantifiers. In particular, quantifier alternations in conjunction with function symbols can create function cycles that result in infinitely many ground terms, making it difficult for solvers to instantiate quantifiers and causing them to diverge. This can leave users with no useful information on how to proceed.
   To address this issue, we propose an interactive verification methodology that uses a relational abstraction technique to mitigate solver divergence in the presence of quantifiers. This technique abstracts functions in the verification conditions (VCs) as one-to-one relations, which avoids the creation of function cycles and the resulting proliferation of ground terms.
   Relational abstraction is sound and guarantees correctness if the solver cannot find counter-models. However, it may also lead to false counterexamples, which can be addressed by refining the abstraction and requiring the existence of corresponding elements. In the domain of distributed protocols, we can refine the abstraction by diagnosing counterexamples and manually instantiating elements in the range of the original function. If the verification conditions are correct, there always exist finitely many refinement steps that eliminate all spurious counter-models, making the approach complete.
   We applied this approach in Ivy to verify the safety properties of consensus protocols and found that: (1) most verification goals can be automatically verified using relational abstraction, while SMT solvers often diverge when given the original VC, (2) only a few manual instantiations were needed, and the counterexamples provided valuable guidance for the user compared to timeouts produced by the traditional approach, and (3) the technique can be used to derive efficient low-level implementations of tricky algorithms.
C1 [Tamir, Orr; Taube, Marcelo; Shoham, Sharon; Sagiv, Mooly] Tel Aviv Univ, Tel Aviv, Israel.
   [McMillan, Kenneth L.] Univ Texas Austin, Austin, TX USA.
   [Howell, Jon; Gueta, Guy] VMware Res, Palo Alto, CA USA.
C3 Tel Aviv University; University of Texas System; University of Texas
   Austin; VMware, Inc.
RP Tamir, O (corresponding author), Tel Aviv Univ, Tel Aviv, Israel.
EM ortamir@post.tau.ac.il; mail.marcelo.taube@gmail.com;
   kenmcmil@gmail.com; sharon.shoham@gmail.com; howell@vmware.com;
   ggolangueta@vmware.com; msagiv@post.tau.ac.il
FU European Research Council under the European Union [759102-SVIS];
   Israeli Science Foundation (ISF) [1810/18]
FX The research leading to these results has received funding from the
   European Research Council under the European Union's Horizon 2020
   research and innovation programme (grant agreement No [759102-SVIS]).
   This research was partially supported by the Israeli Science Foundation
   (ISF) grant No. 1810/18.
CR Abraham I, 2020, P IEEE S SECUR PRIV, P106, DOI 10.1109/SP40000.2020.00044
   Allen SF, 2000, LECT NOTES ARTIF INT, V1831, P170
   Andersen KJA, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S095679682000026X
   Aschieri F, 2016, THEOR COMPUT SCI, V625, P125, DOI 10.1016/j.tcs.2016.02.028
   Ashmore R, 2019, LECT NOTES COMPUT SC, V11460, P36, DOI 10.1007/978-3-030-20652-9_3
   Ball T, 2001, ACM SIGPLAN NOTICES, V36, P203, DOI 10.1145/381694.378846
   Bansal K, 2015, LECT NOTES COMPUT SC, V9207, P87, DOI 10.1007/978-3-319-21668-3_6
   Becker N, 2019, LECT NOTES COMPUT SC, V11427, P99, DOI 10.1007/978-3-030-17462-0_6
   Bokor P, 2011, I C DEPEND SYS NETWO, P73, DOI 10.1109/DSN.2011.5958208
   Buss S. R., 1995, Logic and Computational Complexity. International Workshop LCC '94. Selected Papers, P195
   Castro M, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE THIRD SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '99), P173, DOI 10.1145/571637.571640
   Castro Miguel, 1999, Technical Report
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Courtois Nicolas T., 2003, IACR Cryptol. ePrint Arch. (2003), P211
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Desai A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276529
   Dragoi C, 2016, ACM SIGPLAN NOTICES, V51, P400, DOI [10.1145/2837614.2837650, 10.1145/2914770.2837650]
   Ge YT, 2009, LECT NOTES COMPUT SC, V5643, P306
   Hawblitzel C, 2017, COMMUN ACM, V60, P83, DOI 10.1145/3068608
   Henzinger TA, 2004, ACM SIGPLAN NOTICES, V39, P232, DOI 10.1145/982962.964021
   Howard H, 2016, Arxiv, DOI arXiv:1608.06696
   Jackson D, 2019, COMMUN ACM, V62, P66, DOI 10.1145/3338843
   Konnov I, 2017, ACM SIGPLAN NOTICES, V52, P719, DOI 10.1145/3093333.3009860
   Lamport L., 2002, P 6 INT C PRINCIPLES, P7
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Lamport L, 2009, PODC'09: PROCEEDINGS OF THE 2009 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P312, DOI 10.1145/1582716.1582783
   Leino KRM, 2016, LECT NOTES COMPUT SC, V9779, P361, DOI 10.1007/978-3-319-41528-4_20
   Leino KRM, 2017, IEEE SOFTWARE, V34, P94
   Lesani Mohsen, 2016, POPL 16
   Löding C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158098
   McMillan Kenneth, 2020, Ivy
   Niemetz Aina, 2021, Lecture Notes in Computer Science, V2652, P145
   Ongaro D., 2014, 2014 USENIX ANN TECH, P305
   Padon O, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3140568
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Rahli Vincent, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P619, DOI 10.1007/978-3-319-89884-1_22
   Rahli V, 2017, SCI COMPUT PROGRAM, V148, P26, DOI 10.1016/j.scico.2017.05.009
   Sergey I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158116
   Taube M, 2018, ACM SIGPLAN NOTICES, V53, P662, DOI [10.1145/3296979.3192414, 10.1145/3192366.3192414]
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
NR 40
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 288
DI 10.1145/3622864
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100068
OA gold
DA 2024-07-18
ER

PT J
AU Yang, ZX
   Wu, N
AF Yang, Zhixuan
   Wu, Nicolas
TI Modular Models of Monoids with Operations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE equational systems; S-monoids; effects; modularity; monad transformers
ID MONADS; SEMANTICS; NOTIONS; COMPUTATION
AB Inspired by algebraic effects and the principle of notions of computations as monoids, we study a categorical framework for equational theories and models of monoids equipped with operations. The framework covers not only algebraic operations but also scoped and variable-binding operations. Appealingly, in this framework both theories and models can be modularly composed. Technically, a general monoid-theory correspondence is shown, saying that the category of theories of algebraic operations is equivalent to the category of monoids. Moreover, more complex forms of operations can be coreflected into algebraic operations, in a way that preserves initial algebras. On models, we introduce modular models of a theory, which can interpret abstract syntax in the presence of other operations. We show constructions of modular models (i) from monoid transformers, (ii) from free algebras, (iii) by composition, and (iv) in symmetric monoidal categories.
C1 [Yang, Zhixuan; Wu, Nicolas] Imperial Coll London, Dept Comp, London, England.
C3 Imperial College London
RP Yang, ZX (corresponding author), Imperial Coll London, Dept Comp, London, England.
EM s.yang20@imperial.ac.uk; n.wu@imperial.ac.uk
OI Yang, Zhixuan/0000-0001-5573-3357; Wu, Nicolas/0000-0002-4161-985X
FU EPSRC [EP/S028129/1]; EPSRC [EP/S028129/1] Funding Source: UKRI
FX The authors are supported by EPSRC Grant EP/S028129/1. We would like to
   thank Tom Schrijvers and the anonymous reviewers for their highly
   helpful feedback.
CR Adamek J., 1974, Comment. Math. Univ. Carol., V15, P589
   Adamek J., 1994, Locally presentable and accessible categories, V189, DOI [10.1017/CBO9780511600579., DOI 10.1017/CBO9780511600579]
   [Anonymous], 1986, Introduction to higher-order categorical logic
   [Anonymous], 1982, Cahiers Top. Geom. Diff. Categ., V23, P3
   [Anonymous], 1998, Categories for the working mathematician
   Atkey R, 2009, J FUNCT PROGRAM, V19, P335, DOI 10.1017/S095679680900728X
   Cenciarelli Pietro., 1993, P C CATEGORY THEORY, DOI 10.1.1.41.7807
   Cohn P.M., 1968, Universal Algebra, Mathematics and Its Applications, V6, DOI DOI 10.1007/978-94-009-8399-1
   Day B, 1970, REPORTS MIDWEST CATE, P1
   Filinski A., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P175, DOI 10.1145/292540.292557
   Filinski A., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P446, DOI 10.1145/174675.178047
   Fiore M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P193, DOI 10.1109/LICS.1999.782615
   Fiore M, 2008, IEEE S LOG, P57, DOI 10.1109/LICS.2008.38
   Fiore M, 2007, LECT NOTES COMPUT SC, V4596, P607
   Fiore M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498715
   Fiore M, 2014, IEEE S LOG, DOI 10.1145/2603088.2603163
   Fiore M, 2009, THEOR COMPUT SCI, V410, P1704, DOI 10.1016/j.tcs.2008.12.052
   Fiore Marcelo, 2017, 2 INT C FORMAL STRUC, V16, P1, DOI [DOI 10.4230/LIPICS.FSCD.2017, 10.4230/LIPIcs.FSCD.2017.16, DOI 10.4230/LIPICS.FSCD.2017.16]
   Fosco Loregian, 2021, (Co)end Calculus, DOI [10.1017/9781108778657, DOI 10.1017/9781108778657]
   Ghani N, 2004, RAIRO-THEOR INF APPL, V38, P321, DOI 10.1051/ita:2004016
   Ghani N., 2006, Higher-Order and Symbolic Computation, V19, P263, DOI 10.1007/s10990-006-8748-4
   Ghani N, 2007, J FUNCT PROGRAM, V17, P731, DOI 10.1017/S0956796807006314
   Gibbons J, 2022, LECT NOTES COMPUT SC, V13544, P1, DOI 10.1007/978-3-031-16912-0_1
   Gill A., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P223, DOI 10.1145/165180.165214
   Gill Andy, 2012, mtl: Monad classes, using functional dependencies
   Hermida C, 2000, ADV MATH, V151, P164, DOI 10.1006/aima.1999.1877
   Hinze Ralf, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P324, DOI 10.1007/978-3-642-31113-0_16
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Hyland JME, 2017, MATH STRUCT COMP SCI, V27, P762, DOI 10.1017/S0960129515000377
   Jacobs B, 2009, J FUNCT PROGRAM, V19, P403, DOI 10.1017/S0956796809007308
   Jacobs Bart, 1999, STUDIES LOGIC FDN MA
   Jaskelioff M, 2010, THEOR COMPUT SCI, V411, P4441, DOI 10.1016/j.tcs.2010.09.011
   Katsumata SY, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547654
   Katsumata S, 2014, ACM SIGPLAN NOTICES, V49, P633, DOI 10.1145/2535838.2535846
   KELLY GM, 1993, J PURE APPL ALGEBRA, V89, P163, DOI 10.1016/0022-4049(93)90092-8
   Kidney DO, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473577
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   KOCK A, 1972, ARCH MATH, V23, P113, DOI 10.1007/BF01304852
   Kura S, 2020, LECT NOTES COMPUT SC, V12077, P401, DOI 10.1007/978-3-030-45231-5_21
   LAWVERE FW, 1963, P NATL ACAD SCI USA, V50, P869, DOI 10.1073/pnas.50.5.869
   Linton F. E. J., 1966, P C CAT ALG LA JOLL, P84
   Mahmoud O., 2014, arXiv
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   McDermott D, 2022, ELECTRON P THEOR COM, P113, DOI 10.4204/EPTCS.360.6
   McDermott D, 2022, LECT NOTES COMPUT SC, V13544, P102, DOI 10.1007/978-3-031-16912-0_4
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Moggi E., 1989, Tech. Rep. ECS-LFCS-90-113
   Mokhov A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236774
   Paterson Ross, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P300, DOI 10.1007/978-3-642-31113-0_15
   Pieters RUBENP, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000106
   Piróg M, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P809, DOI 10.1145/3209108.3209166
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Plotkin Gordon, 2004, Electronic Notes in Theoretical Computer Science, V73, P149, DOI DOI 10.1016/J.ENTCS.2004.08.008
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Plotkin Gordon D., 2001, Electr. Notes Theor. Comput. Sci., V45, P332, DOI [10.1016/S1571-0661(04)80970-8, DOI 10.1016/S1571-0661(04)80970-8]
   Poulsen CB, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571255
   Power J., 1999, THEORY APPL CATEG, V6, P83
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Rivas E, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796817000132
   Sheng Liang, 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P333, DOI 10.1145/199448.199528
   Stark I, 2008, THEOR COMPUT SCI, V390, P248, DOI 10.1016/j.tcs.2007.09.024
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Tennent Robert D, 1991, Semantics of programming languages, V1
   Voigtländer J, 2008, LECT NOTES COMPUT SC, V5133, P388
   Wadler P., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P24
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Yang ZX, 2022, LECT NOTES COMPUT SC, V13240, P462, DOI 10.1007/978-3-030-99336-8_17
   Yang ZX, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473578
NR 71
TC 2
Z9 2
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 208
DI 10.1145/3607850
PG 38
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900021
OA gold
DA 2024-07-18
ER

PT J
AU Lei, YX
   Sui, Y
   Tan, SH
   Zhang, QR
AF Lei, Yuxiang
   Sui, Yulei
   Tan, Shin Hwei
   Zhang, Qirun
TI Recursive State Machine Guided Graph Folding for Context-Free Language
   Reachability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE CFL-reachability; recursive state machines; graph simplification
ID DATA-DEPENDENCE ANALYSIS; ALIAS ANALYSIS; ALGORITHMS
AB Context-free language reachability (CFL-reachability) is a fundamental framework for program analysis. A large variety of static analyses can be formulated as CFL-reachability problems, which determines whether specific source-sink pairs in an edge-labeled graph are connected by a reachable path, i.e., a path whose edge labels form a string accepted by the given CFL. Computing CFL-reachability is expensive. The fastest algorithm exhibits a slightly subcubic time complexity with respect to the input graph size. Improving the scalability of CFL-reachability is of practical interest, but reducing the time complexity is inherently difficult.
   In this paper, we focus on improving the scalability of CFL-reachability from a more practical perspectivereducing the input graph size. Our idea arises from the existence of trivial edges, i.e., edges that do not affect any reachable path in CFL-reachability. We observe that two nodes joined by trivial edges can be folded-by merging the two nodes with all the edges joining them removed-without affecting the CFL-reachability result. By studying the characteristic of the recursive state machines (RSMs), an alternative form of CFLs, we propose an approach to identify foldable node pairs without the need to verify the underlying reachable paths (which is equivalent to solving the CFL-reachability problem). In particular, given a CFL-reachability problem instance with an input graph G and an RSM, based on the correspondence between paths in G and state transitions in RSM, we propose a graph folding principle, which can determine whether two adjacent nodes are foldable by examining only their incoming and outgoing edges.
   On top of the graph folding principle, we propose an efficient graph folding algorithm Gf. The time complexity of Gf is linear with respect to the number of nodes in the input graph. Our evaluations on two clients (alias analysis and value-flow analysis) show that Gf significantly accelerates RSM/CFL-reachability by reducing the input graph size. On average, for value-flow analysis, Gf reduces 60.96% of nodes and 42.67% of edges of the input graphs, obtaining a speedup of 4.65x and a memory usage reduction of 57.35%. For alias analysis, Gf reduces 38.93% of nodes and 35.61% of edges of the input graphs, obtaining a speedup of 3.21x and a memory usage reduction of 65.19%.
C1 [Lei, Yuxiang; Sui, Yulei] Univ New South Wales, Kensington, NSW, Australia.
   [Tan, Shin Hwei] Concordia Univ, Montreal, PQ, Canada.
   [Zhang, Qirun] Georgia Inst Technol, Atlanta, GA USA.
C3 University of New South Wales Sydney; Concordia University - Canada;
   University System of Georgia; Georgia Institute of Technology
RP Lei, YX (corresponding author), Univ New South Wales, Kensington, NSW, Australia.
EM yuxiang.lei@unsw.edu.au; y.sui@unsw.edu.au; shinhwei.tan@concordia.ca;
   qrzhang@gatech.edu
RI Sui, Yulei/AAL-5915-2020
OI Sui, Yulei/0000-0002-9510-6574; Lei, Yuxiang/0000-0002-4484-8172; Zhang,
   Qirun/0000-0001-5367-9377; Tan, Shin Hwei/0000-0001-8633-3372
FU Australian Research Grants [DP210101348, FT220100391]; Amazon under an
   Amazon Research Award in automated reasoning; by the United States
   National Science Foundation (NSF) [1917924, 2114627]; Defense Advanced
   Research Projects Agency (DARPA) [N66001-21-C-4024]; Australian Research
   Council [FT220100391] Funding Source: Australian Research Council
FX We would like to thank the anonymous reviewers and the shepherd Peisen
   Yao for valuable feedback on earlier drafts of this paper, which helped
   improve its presentation. This research is supported by Australian
   Research Grants DP210101348 and FT220100391; by Amazon under an Amazon
   Research Award in automated reasoning; by the United States National
   Science Foundation (NSF) under grants No. 1917924 and No. 2114627; and
   by the Defense Advanced Research Projects Agency (DARPA) under grant
   N66001-21-C-4024. Any opinions, findings, and conclusions or
   recommendations expressed in this publication are those of the authors
   and do not necessarily reflect the views of the above sponsoring
   entities.
CR Alur R, 2006, THEOR COMPUT SCI, V354, P230, DOI 10.1016/j.tcs.2005.11.017
   Alur R, 2005, ACM T PROGR LANG SYS, V27, P786, DOI 10.1145/1075382.1075387
   Alur R., 2004, STOC 04, DOI [10.1145/1007352.1007390, DOI 10.1145/1007352.1007390]
   Alurl R, 2005, LECT NOTES COMPUT SC, V3440, P61
   Bastani O, 2015, ACM SIGPLAN NOTICES, V50, P553, DOI [10.1145/2775051.2676977, 10.1145/2676726.2676977]
   Benerecetti Massimo, 2010, Proceedings of the 2010 17th International Symposium on Temporal Representation and Reasoning (TIME 2010), P61, DOI 10.1109/TIME.2010.10
   Bravenboer M, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P243
   Chatterjee K, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158118
   Chatterjee K, 2015, ACM SIGPLAN NOTICES, V50, P97, DOI [10.1145/2676726.2676979, 10.1145/2775051.2676979]
   Chatterjee K, 2012, IEEE S LOG, P195, DOI 10.1109/LICS.2012.30
   Chaudhuri S, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1328897.1328460
   Fahndrich M, 1998, ACM SIGPLAN NOTICES, V33, P85, DOI 10.1145/277652.277667
   Gauwin O, 2020, Arxiv, DOI [arXiv:1907.09563, 10.48550/arXiv.1907.09563, DOI 10.48550/ARXIV.1907.09563]
   Hardekopf B, 2007, LECT NOTES COMPUT SC, V4634, P265
   Hardekopf B, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P290, DOI 10.1145/1250734.1250767
   Heine DL, 2003, ACM SIGPLAN NOTICES, V38, P168, DOI 10.1145/780822.781150
   Heizmann M, 2017, LECT NOTES COMPUT SC, V10205, P461, DOI 10.1007/978-3-662-54577-5_27
   Jordan H, 2016, LECT NOTES COMPUT SC, V9780, P422, DOI 10.1007/978-3-319-41540-6_23
   Kodumal J, 2004, ACM SIGPLAN NOTICES, V39, P207, DOI 10.1145/996893.996867
   LeGall F., 2014, P INT S SYMB ALG COM, P296, DOI 10.1145/2608628.2608664
   Lei YX, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563343
   Lei YX, 2019, LECT NOTES COMPUT SC, V11822, P27, DOI 10.1007/978-3-030-32304-2_3
   Li YB, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P780, DOI 10.1145/3385412.3386021
   Melski D, 2000, THEOR COMPUT SCI, V248, P29, DOI 10.1016/S0304-3975(00)00049-9
   Naeem NA, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P347
   NUUTILA E, 1994, INFORM PROCESS LETT, V49, P9, DOI 10.1016/0020-0190(94)90047-7
   Pearce DJ, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1290520.1290524
   Pereira FMQ, 2009, INT SYM CODE GENER, P126, DOI 10.1109/CGO.2009.9
   Rehof J, 2001, ACM SIGPLAN NOTICES, V36, P54, DOI 10.1145/373243.360208
   Reps T, 2005, SCI COMPUT PROGRAM, V58, P206, DOI 10.1016/j.scico.2005.02.009
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Reps T, 2007, LECT NOTES COMPUT SC, V4855, P23
   Rountev A, 2000, ACM SIGPLAN NOTICES, V35, P47, DOI 10.1145/358438.349310
   RYTTER W, 1983, INFORM PROCESS LETT, V16, P127, DOI 10.1016/0020-0190(83)90063-7
   RYTTER W, 1985, INFORM CONTROL, V67, P12, DOI 10.1016/S0019-9958(85)80024-3
   Späth J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290361
   Sui YL, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428301
   Sui YL, 2020, IEEE T SOFTWARE ENG, V46, P812, DOI 10.1109/TSE.2018.2869336
   Sui YL, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P460, DOI 10.1145/2950290.2950296
   Sui YL, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P265, DOI 10.1145/2892208.2892235
   Sui YL, 2014, IEEE T SOFTWARE ENG, V40, P107, DOI 10.1109/TSE.2014.2302311
   Tang H, 2015, ACM SIGPLAN NOTICES, V50, P83, DOI [10.1145/2676726.2676997, 10.1145/2775051.2676997]
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Wang K, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P389, DOI 10.1145/3037697.3037744
   Williams VV, 2018, J ACM, V65, DOI [10.1145/318693, 10.1145/3186893]
   Xu GQ, 2009, LECT NOTES COMPUT SC, V5653, P98
   Yan Dacong, 2011, P 2011 INT S SOFTW T, P155, DOI [10.1145/2001420.2001440, DOI 10.1145/2001420.2001440]
   Zhang QR, 2013, ACM SIGPLAN NOTICES, V48, P435, DOI 10.1145/2499370.2462159
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P344, DOI 10.1145/3093333.3009848
   Zhang QR, 2014, ACM SIGPLAN NOTICES, V49, P829, DOI [10.1145/2660193.2660213, 10.1145/2714064.2660213]
   Zheng X, 2008, ACM SIGPLAN NOTICES, V43, P197, DOI 10.1145/1328897.1328464
NR 52
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 119
DI 10.1145/3591233
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900015
OA gold
DA 2024-07-18
ER

PT J
AU Pailoor, S
   Chen, YJ
   Wang, F
   Rodriguez, C
   Van Geffen, J
   Morton, J
   Chu, M
   Gu, B
   Feng, Y
   Dillig, I
AF Pailoor, Shankara
   Chen, Yanju
   Wang, Franklyn
   Rodriguez, Clara
   Van Geffen, Jacob
   Morton, Jason
   Chu, Michael
   Gu, Brian
   Feng, Yu
   Dillig, Isil
TI Automated Detection of Under-Constrained Circuits in Zero-Knowledge
   Proofs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE zero-knowledge proofs; SNARKs; program verification
AB As zero-knowledge proofs gain increasing adoption, the cryptography community has designed domainspecific languages (DSLs) that facilitate the construction of zero-knowledge proofs (ZKPs). Many of these DSLs, such as Circom, facilitate the construction of arithmetic circuits, which are essentially polynomial equations over a finite field. In particular, given a program in a zero-knowledge proof DSL, the compiler automatically produces the corresponding arithmetic circuit. However, a common and serious problem is that the generated circuit may be underconstrained, either due to a bug in the program or a bug in the compiler itself. Underconstrained circuits admit multiple witnesses for a given input, so a malicious party can generate bogus witnesses, thereby causing the verifier to accept a proof that it should not. Because of the increasing prevalence of such arithmetic circuits in blockchain applications, several million dollars worth of cryptocurrency have been stolen due to underconstrained arithmetic circuits. Motivated by this problem, we propose a new technique for finding ZKP bugs caused by underconstrained polynomial equations over finite fields. Our method performs semantic reasoning over the finite field equations generated by the compiler to prove whether or not each signal is uniquely determined by the input. Our proposed approach combines SMT solving with lightweight uniqueness inference to effectively reason about underconstrained circuits. We have implemented our proposed approach in a tool called QED2 and evaluate it on 163 Circom circuits. Our evaluation shows that QED2 can successfully solve 70% of these benchmarks, meaning that it either verifies the uniqueness of the output signals or finds a pair of witnesses that demonstrate non-uniqueness of the circuit. Furthermore, QED2 has found 8 previously unknown vulnerabilities in widelyused circuits.
C1 [Pailoor, Shankara; Van Geffen, Jacob; Dillig, Isil] Veridise, Austin, TX 78701 USA.
   [Chen, Yanju; Feng, Yu] Veridise, Santa Barbara, CA USA.
   [Wang, Franklyn] Harvard Univ, 0xparc, New York, NY USA.
   [Rodriguez, Clara] Univ Complutense Madrid, Madrid, Spain.
   [Morton, Jason] ZKonduit, State Coll, PA USA.
   [Chu, Michael; Gu, Brian] 0xparc, New York, NY USA.
C3 Harvard University; Complutense University of Madrid
RP Pailoor, S (corresponding author), Veridise, Austin, TX 78701 USA.
EM spailoor@cs.utexas.edu; yanju@cs.ucsb.edu; franklynw2000@gmail.com;
   clarrodr@ucm.es; jsvg@cs.washington.edu; jason@zkonduit.com;
   michael@0xparc.org; brian@0xparc.org; yufeng@cs.ucsb.edu;
   isil@cs.utexas.edu
OI Wang, Franklyn/0000-0003-1659-2138; Feng, Yu/0000-0003-1000-1229;
   RODRIGUEZ NUNEZ, CLARA/0000-0002-5417-8934; Dillig,
   Isil/0000-0001-8006-1230; Chen, Yanju/0000-0002-6494-3126; Gu,
   Brian/0009-0009-4978-4516
FU Google Faculty Research award
FX We thank the anonymous reviewers for the helpful feedback. This material
   is based upon work partially supported by a Google Faculty Research
   award. Any opinions, findings, and conclusions or recommendations
   expressed in this material are those of the author and do not
   necessarily reflect the views of the funding source.
CR Aleo, 2022, LEO COD TRANSL INV A
   Almeida JB, 2010, LECT NOTES COMPUT SC, V6345, P151, DOI 10.1007/978-3-642-15497-3_10
   [Anonymous], 1985, STOC, DOI [10.1145/22145, DOI 10.1145/22145]
   [Anonymous], 2019, TORN CASH GOT HACK U
   Aztec, 2022, DISCL REC VULN
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Barthe Gilles, 2014, Foundations of Security Analysis and Design VII. FOSAD 2012/2013 Tutorial Lectures: LNCS 8604, P146, DOI 10.1007/978-3-319-10082-1_6
   Baylina Jordi, 2021, CIRCOMLIB BABYJUBCIR
   Bellés-Muñoz M, 2022, IEEE SOFTWARE, V39, P43, DOI 10.1109/MS.2021.3086718
   Ben-Sasson E, 2014, PROCEEDINGS OF THE 23RD USENIX SECURITY SYMPOSIUM, P781
   Ben-Sasson E, 2014, P IEEE S SECUR PRIV, P459, DOI 10.1109/SP.2014.36
   Bernstein Daniel J., 2007, CRYPTOLOGY EPRINT AR
   Binello Maurizio, 2019, R1CS
   Boneh D, 2004, J CRYPTOL, V17, P297, DOI 10.1007/s00145-004-0314-9
   Boudabra M., 2019, J APPL MATH COMPUT, V61, P431, DOI 10.1007/s12190-019-01257-y
   Bowe Sean, 2019, IACR Cryptol. ePrint Arch., V2019, P1021
   Buterin Vitalik, 2016, Quadratic arithmetic programs: from zero to hero
   Chen Yanju, 2023, AUTOMATED DETECTION, DOI [10.5281/zenodo.7776035, DOI 10.5281/ZENODO.7776035]
   CHIN C., 2021, LEO PROGRAMMING LANG
   Connor Michael, 2021, DISCLOSURE RECENT VU
   Corin Ricardo, 2005, PROBABILISTIC HOARE
   Costello Craig, 2017, 2017212 CRYPT EPRINT
   Dahlgren Fredrick, 2022, IT PAYS BE CIRCOMSPE
   Eberhardt J, 2018, IEEE 2018 INTERNATIONAL CONGRESS ON CYBERMATICS / 2018 IEEE CONFERENCES ON INTERNET OF THINGS, GREEN COMPUTING AND COMMUNICATIONS, CYBER, PHYSICAL AND SOCIAL COMPUTING, SMART DATA, BLOCKCHAIN, COMPUTER AND INFORMATION TECHNOLOGY, P1084, DOI 10.1109/Cybermatics_2018.2018.00199
   electriccoin, 2019, ZCASH COUNT VULN SUC
   fiore Dario, 2022, P 2022 ACM SIGSAC C, P1067, DOI [10.1145/3548606.3560630, DOI 10.1145/3548606.3560630]
   Gagne Martin, 2013, 2013407 CRYPT EPRINT
   Goldberg Lior, 2021, IACR CRYPTOL EPRINT, V2021, P1063
   Grassi L, 2021, PROCEEDINGS OF THE 30TH USENIX SECURITY SYMPOSIUM, P519
   Groth Jens, 2016, 2016260 CRYPT EPRINT
   Hader Thomas, 2022, NONLINEAR SMT REASON
   Iden3, 2018, SNARKJS
   Jie Wei Koh, 2019, PRIVATE VOTING WHIST
   Johnson D., 2001, International Journal of Information Security, V1, P36, DOI 10.1007/s102070100002
   Matter-Labs, 2022, ZINC
   MatthewFlatt and PLT, 2010, Technical Report PLT-TR-2010-1
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   Noir, 2022, PROOF VER FAILS SIMP
   o1 Labs, 2022, SNARK WRIT EFF BEAUT
   Onur Ceyhun, 2022, ELECTANON BLOCKCHAIN
   Ozdemir Alex, 2022, CVC5 FF
   Ozdemir Alex, 2020, 20201586 CRYPT EPRIN
   Parno B, 2013, P IEEE S SECUR PRIV, P238, DOI 10.1109/SP.2013.47
   PEDERSEN TP, 1992, LECT NOTES COMPUT SC, V576, P129
   Shankara Pailoor, 2023, 2023512 CRYPT EPRINT, DOI [10.1145/3591282https://eprint.iacr.org/2023/512, DOI 10.1145/3591282HTTPS://EPRINT.IACR.ORG/2023/512]
   Sidorenco N, 2021, P IEEE COMPUT SECUR, P607, DOI 10.1109/CSF51468.2021.00050
   Tiwari A, 2015, LECT NOTES ARTIF INT, V9195, P482, DOI 10.1007/978-3-319-21401-6_33
   Tornado.cash, 2019, TORN CASH GOT HACK U
   TornadoCash, 2019, INTR PRIV T ETH NOW
   TornadoCash, 2019, TORN CASH GOT HACK U
   trailofbits, 2022, TRAILOFBITS
NR 51
TC 2
Z9 2
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 168
DI 10.1145/3591282
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900064
OA gold
DA 2024-07-18
ER

PT J
AU Ugare, S
   Banerjee, D
   Misailovic, S
   Singh, G
AF Ugare, Shubham
   Banerjee, Debangshu
   Misailovic, Sasa
   Singh, Gagandeep
TI Incremental Verification of Neural Networks
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE cation; Robustness; Deep Neural Networks
AB Complete verification of deep neural networks (DNNs) can exactly determine whether the DNN satisfies a desired trustworthy property (e.g., robustness, fairness) on an infinite set of inputs or not. Despite the tremendous progress to improve the scalability of complete verifiers over the years on individual DNNs, they are inherently ineficient when a deployed DNN is updated to improve its inference speed or accuracy. The inefficiency is because the expensive verifier needs to be run from scratch on the updated DNN. To improve efficiency, we propose a new, general framework for incremental and complete DNN verification based on the design of novel theory, data structure, and algorithms. Our contributions implemented in a tool named IVAN yield an overall geometric mean speedup of 2.4x for verifying challenging MNIST and CIFAR10 classifiers and a geometric mean speedup of 3.8x for the ACAS-XU classifiers over the state-of-the-art baselines.
C1 [Ugare, Shubham; Banerjee, Debangshu; Misailovic, Sasa; Singh, Gagandeep] Univ Illinois, Champaign, IL 61820 USA.
   [Singh, Gagandeep] VMware Res, Palo Alto, CA USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   VMware, Inc.
RP Ugare, S (corresponding author), Univ Illinois, Champaign, IL 61820 USA.
OI Ugare, Shubham/0000-0002-9088-887X; Banerjee,
   Debangshu/0009-0001-0163-9717; Singh, Gagandeep/0000-0002-9299-2961
FU NSF [CCF-1846354, CCF-1956374, CCF-2008883, CCF-2217144, CCF-2238079,
   CNS-2148583]; USDA NIFA [NIFA-2024827]; Qualcomm innovation fellowship
FX We thank the anonymous reviewers for their comments. This research was
   supported in part by NSF Grants No. CCF-1846354, CCF-1956374,
   CCF-2008883, CCF-2217144, CCF-2238079, CNS-2148583, USDA NIFA Grant No.
   NIFA-2024827 and Qualcomm innovation fellowship.
CR Akiba T, 2019, KDD'19: PROCEEDINGS OF THE 25TH ACM SIGKDD INTERNATIONAL CONFERENCCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P2623, DOI 10.1145/3292500.3330701
   Albarghouthi A., 2021, arXiv
   Alvarez-Valle J, 2020, Arxiv, DOI arXiv:2012.05064
   Amato F, 2013, J APPL BIOMED, V11, P47, DOI 10.2478/v10136-012-0031-x
   Anderson G, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P731, DOI 10.1145/3314221.3314614
   Anderson R, 2020, MATH PROGRAM, V183, P3, DOI 10.1007/s10107-020-01474-5
   Bak S, 2021, Arxiv, DOI arXiv:2109.00498
   Bak S, 2020, LECT NOTES COMPUT SC, V12224, P66, DOI 10.1007/978-3-030-53288-8_4
   Balunovic Mislav, 2020, P INT C LEARN REPR
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Beyer D., 2013, ESEC FSE, P389, DOI [10.1145/2491411.2491429, DOI 10.1145/2491411.2491429]
   Blalock Davis W., 2020, P MACHINE LEARNING S
   Bojarski M, 2016, Arxiv, DOI [arXiv:1604.07316, 10.48550/arXiv.1604.07316]
   Bunel R, 2020, J MACH LEARN RES, V21
   Bunel Rudy R, 2020, ADV NEUR IN, V33
   Chen Jiefeng, 2022, AAAI 22 WORKSHOP ADV
   Cheng Chih-Hong, 2020, ARXIV
   CPLEX I. I., 2009, Int. Bus. Mach. Corp., V46, P157
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   De Palma A., 2021, 9 INT C LEARNING REP
   Dong YP, 2018, PROC CVPR IEEE, P9185, DOI 10.1109/CVPR.2018.00957
   Dutta S, 2017, Arxiv, DOI arXiv:1709.09130
   Ehlers R, 2017, LECT NOTES COMPUT SC, V10482, P269, DOI 10.1007/978-3-319-68167-2_19
   Ferrari Claudio, 2022, INT C LEARNING REPRE
   Fischer M, 2022, LECT NOTES COMPUT SC, V13371, P127, DOI 10.1007/978-3-031-13185-1_7
   Fromherz Aymeric, 2021, INT C LEARNING REPRE
   Fu Feisi, 2022, INT C LEARNING REPRE
   Gehr T, 2018, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2018.00058
   Gholami A., 2021, arXiv
   Gokhale T, 2021, AAAI CONF ARTIF INTE, V35, P7574
   Gurobi Optimization LLC, 2023, Gurobi optimizer reference manual
   Henriksen Patrick, 2021, P 30 INT JOINT C ART, P2549, DOI [DOI 10.24963/IJCAI.2021/351, 10.24963/ijcai.2021/ 351]
   Johnson Kenneth, 2013, P 16 INT ACM SIGSOFT, P33, DOI DOI 10.1145/2465449.2465456
   Julian Kyle D., 2018, J GUID CONTROL DYNAM
   Kabaha A., 2022, ARXIV, DOI DOI 10.48550/ARXIV.2209.05446
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Katz Guy, 2017, INT C COMPUTER AIDED
   Lakhnech Yassine, 2001, TOOLS ALGORITHMS CON, V2031, P98
   Laurel J, 2021, DES AUT CON, P787, DOI 10.1109/DAC18074.2021.9586276
   Madry A, 2019, Arxiv, DOI arXiv:1706.06083
   Muller Christoph, 2021, P MACH LEARN SYST ML
   O'Hearn P, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P13, DOI 10.1145/3209108.3209109
   Paulsen B, 2020, PROC INT CONF SOFTW, P714, DOI 10.1145/3377811.3380337
   Paulsen B, 2020, IEEE INT CONF AUTOM, P784, DOI 10.1145/3324884.3416560
   Salman H, 2019, ADV NEURAL INFORM PR
   Singh G, 2019, 33 C NEURAL INFORM P, V32
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Singh G, 2018, ADV NEUR IN, V31
   Singh Gagandeep, 2019, INT C LEARN REPR
   Sotoudeh Matthew, 2019, Advances in Neural Information Processing Systems (NeurIPS)
   Stein B, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P282, DOI 10.1145/3453483.3454044
   Szegedy C, 2014, INT C LEARN REPR
   Tajbakhsh N, 2016, IEEE T MED IMAGING, V35, P1299, DOI 10.1109/TMI.2016.2535302
   TFLite, 2017, TF LITE POSTTR QUANT
   Tjeng V, 2019, Arxiv, DOI arXiv:1711.07356
   Urban C, 2021, Arxiv, DOI arXiv:2104.02466
   Visser Willem, 2012, P FSE, DOI DOI 10.1145/2393596.2393665
   Wang S., 2021, arXiv
   Wang S, 2018, Advances in Neural Information Processing Systems
   Wei TH, 2023, Arxiv, DOI arXiv:2106.12732
   Weiss Karl, 2016, Journal of Big Data, V3, DOI 10.1186/s40537-016-0043-6
   Wong E, 2018, PR MACH LEARN RES, V80
   Xu Kaidi, 2020, Automatic Perturbation Analysis for Scalable Certified Robustness and Beyond
   Yang GW, 2009, PROC IEEE INT CONF S, P115, DOI 10.1109/ICSM.2009.5306334
   Yang RM, 2022, Arxiv, DOI arXiv:2207.11177
   Zhang H, 2018, ADV NEUR IN, V31
NR 66
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 185
DI 10.1145/3591299
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900081
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Emre, M
   Boyland, P
   Parekh, A
   Schroeder, R
   Dewey, K
   Hardekopf, B
AF Emre, Mehmet
   Boyland, Peter
   Parekh, Aesha
   Schroeder, Ryan
   Dewey, Kyle
   Hardekopf, Ben
TI Aliasing Limits on Translating C to Safe Rust
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Rust; C; Translation; Memory Safety; Empirical Study
ID CONTEXT-SENSITIVITY; OWNERSHIP TYPES
AB The Rust language was created to provide safe low-level systems programming. There is both industrial and academic interest in the problem of (semi-)automatically translating C code to Rust in order to exploit Rust's safety guarantees. We study the effectiveness and limitations of existing techniques for automatically translating unsafe raw pointers (in Rust programs translated from C) into safe Rust references via ownership and lifetime inference. Our novel evaluation methodology enables our study to extend beyond prior studies, and to discover new information contradicting the conclusions of prior studies. We find that existing translation methods are severely limited by a lack of precision in the Rust compiler's safety checker, causing many safe pointer manipulations to be labeled as potentially unsafe. Leveraging this information, we propose methods for improving translation, based on encoding the results of a more precise analysis in a manner that is understandable to an unmodified Rust compiler. We implement one of our proposed methods, increasing the number of pointers that can be translated to safe Rust references by 75% over the baseline (from 12% to 21% of all pointers).
C1 [Emre, Mehmet] Univ San Francisco, San Francisco, CA 94117 USA.
   [Boyland, Peter; Parekh, Aesha; Schroeder, Ryan; Hardekopf, Ben] Univ Calif Santa Barbara, Santa Barbara, CA 93106 USA.
   [Dewey, Kyle] Calif State Univ Northridge, Northridge, CA 91330 USA.
C3 University of San Francisco; University of California System; University
   of California Santa Barbara; California State University System;
   California State University Northridge
RP Emre, M (corresponding author), Univ San Francisco, San Francisco, CA 94117 USA.
EM memre@usfca.edu; boyland@ucsb.edu; aeshaparekh@ucsb.edu;
   rschroeder@ucsb.edu; kyle.dewey@csun.edu; benh@cs.ucsb.edu
OI Dewey, Kyle/0000-0002-7998-3104; Schroeder, Ryan/0009-0004-8940-5772;
   Emre, Mehmet/0000-0001-8744-6459; Hardekopf, Ben/0009-0008-1199-6129
CR Aiken A, 1999, SCI COMPUT PROGRAM, V35, P79, DOI 10.1016/S0167-6423(99)00007-6
   Andersen L. O., 1994, PROGRAM ANAL SPECIAL
   Anderson B, 2015, Arxiv, DOI arXiv:1505.07383
   ANSCOMBE FJ, 1973, AM STAT, V27, P17, DOI 10.2307/2682899
   Boyapati C, 2003, ACM SIGPLAN NOTICES, V38, P324, DOI 10.1145/780822.781168
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Bryant David, 2016, QUANTUM LEAP WEB
   Elhage Nelson., 2020, Supporting linux kernel development in rust
   Elliott AS, 2018, 2018 IEEE CYBERSECURITY DEVELOPMENT CONFERENCE (SECDEV 2018), P53, DOI 10.1109/SecDev.2018.00015
   Emre M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485498
   Emre Mehmet, 2023, ARTIFACT ALIASING LI, DOI [10.5281/zenodo.7714175, DOI 10.5281/ZENODO.7714175]
   Fähndrich M, 2000, ACM SIGPLAN NOTICES, V35, P253, DOI 10.1145/358438.349332
   Foster J. S., 2002, SIGPLAN Notices, V37, P1, DOI 10.1145/543552.512531
   Guyer SZ, 2003, LECT NOTES COMPUT SC, V2694, P214
   Heintze N, 2001, ACM SIGPLAN NOTICES, V36, P254, DOI 10.1145/381694.378855
   Immunant inc, 2020, IMM C2RUST
   Jamey Sharp, 2020, JAMEYSHARP CORRODE
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   Jonathan Corbet, 2021, RUST SUPPORT HITS LI
   Kastrinis G, 2013, ACM SIGPLAN NOTICES, V48, P423, DOI 10.1145/2499370.2462191
   Lesinski Kornel, 2018, CITRUS CITRUS
   Levy Amit, 2015, P 8 WORKSH PROGR LAN, P21, DOI [DOI 10.1145/2818302, 10.1145/2818302.2818306, DOI 10.1145/2818302.2818306]
   Lhoták O, 2006, LECT NOTES COMPUT SC, V3923, P47
   Lin Y, 2016, ACM SIGPLAN NOTICES, V51, P89, DOI 10.1145/3241624.2926707
   Ling M, 2022, PROC IEEE ACM INT C, P354, DOI [10.1145/3510454.3528640, 10.1109/ICSE-Companion55297.2022.9793767]
   Machiry A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527322
   Necula GC, 2005, ACM T PROGR LANG SYS, V27, P477, DOI 10.1145/1065887.1065892
   Pearce DJ, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1290520.1290524
   Shapiro M., 1997, Static Analysis. 4th International Symposium, SAS '97 Proceedings, P16, DOI 10.1007/BFb0032731
   Shapiro M., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P1, DOI 10.1145/263699.263703
   Smaragdakis Y, 2014, ACM SIGPLAN NOTICES, V49, P485, DOI [10.1145/2666356.2594320, 10.1145/2594291.2594320]
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Sui YL, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P265, DOI 10.1145/2892208.2892235
   The Rust Project, 2022, STAND LAZ TYP RUS RF
   The Rust Project, 2022, LAZ STAT RS
   The Rust Project, 2021, RUST REF
   Vander Stoep Jeff, 2021, Rust in the Android platform
   Weiss A, 2021, Arxiv, DOI arXiv:1903.00982
NR 38
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586046
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600021
OA gold
DA 2024-07-18
ER

PT J
AU Ji, RY
   Kong, CZ
   Xiong, YF
   Hu, ZJ
AF Ji, Ruyi
   Kong, Chaozhe
   Xiong, Yingfei
   Hu, Zhenjiang
TI Improving Oracle-Guided Inductive Synthesis by Efficient Question
   Selection
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Oracle-Guided Inductive Synthesis; Question Selection Problem
AB Oracle-guided inductive synthesis (OGIS) is a widely-used framework to apply program synthesis techniques in practice. The question selection problem aims at reducing the number of iterations in OGIS by selecting a proper input for each OGIS iteration. Theoretically, a question selector can generally improve the performance of OGIS solvers on both interactive and non-interactive tasks if it is not only effective for reducing iterations but also efficient. However, all existing effective question selectors fail in satisfying the requirement of efficiency. To ensure effectiveness, they convert the question selection problem into an optimization one, which is difficult to solve within a short time. In this paper, we propose a novel question selector, named LearnSy. LearnSy is both efficient and effective and thus achieves general improvement for OGIS solvers for the first time. Since we notice that the optimization tasks in previous studies are difficult because of the complex behavior of operators, we estimate these behaviors in LearnSy as simple random events. Subsequently, we provide theoretical results for the precision of this estimation and design an efficient algorithm for its calculation. According to our evaluation, when dealing with interactive tasks, LearnSy can offer competitive performance compared to existing selectors while being more efficient and more general. Moreover, when working on non-interactive tasks, LearnSy can generally reduce the time cost of existing CEGIS solvers by up to 43.0%
C1 [Ji, Ruyi; Kong, Chaozhe; Xiong, Yingfei; Hu, Zhenjiang] Peking Univ, Key Lab High Confidence Software Technol, Minist Educ, Beijing, Peoples R China.
   [Ji, Ruyi; Kong, Chaozhe; Xiong, Yingfei; Hu, Zhenjiang] Peking Univ, Sch Comp Sci, Beijing, Peoples R China.
C3 Peking University; Peking University
RP Xiong, YF (corresponding author), Peking Univ, Key Lab High Confidence Software Technol, Minist Educ, Beijing, Peoples R China.; Xiong, YF (corresponding author), Peking Univ, Sch Comp Sci, Beijing, Peoples R China.
EM jiruyi910387714@pku.edu.cn; kcz@pku.edu.cn; xiongyf@pku.edu.cn;
   huzj@pku.edu.cn
OI Hu, Zhenjiang/0000-0002-9034-205X
FU National Key Research and Development Program of China [2021ZD0110202];
   National Natural Science Foundation of China [62161146003]; ZTE-PKU
   Joint Laboratory for Foundation Software
FX We sincerely thank the anonymous OOPSLA reviewers for their valuable
   feedback on this work and the anonymous OOPSLA Artifacts reviewers for
   their suggestions for our experiments. This work is supported in part by
   the National Key Research and Development Program of China under Grant
   No. 2021ZD0110202, the National Natural Science Foundation of China
   under Grant No. 62161146003, and a grant from ZTE-PKU Joint Laboratory
   for Foundation Software.
CR Adler M, 2012, ALGORITHMICA, V62, P1112, DOI 10.1007/s00453-011-9510-9
   Alur R, 2017, ELECTRON P THEOR COM, P97, DOI 10.4204/EPTCS.260.9
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 2002, Hacker's Delight
   Barman Shaon., 2015, 2015 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software (Onward!), Onward! 2015, P121, DOI 10
   BLUMER A, 1987, INFORM PROCESS LETT, V24, P377, DOI 10.1016/0020-0190(87)90114-1
   Chakaravarthy VT, 2011, ACM T ALGORITHMS, V7, DOI 10.1145/1921659.1921661
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Ferreira Margarida, 2021, Tools and Algorithms for the Construction and Analysis of Systems. 27th International Conference, TACAS 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12651), P152, DOI 10.1007/978-3-030-72016-2_9
   Galenson J, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P653, DOI 10.1145/2568225.2568250
   Gvero Tihomir, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P418, DOI 10.1007/978-3-642-22110-1_33
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Jha S, 2017, ACTA INFORM, V54, P693, DOI 10.1007/s00236-017-0294-5
   Ji RY, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485544
   Ji RY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428292
   Ji RY, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1143, DOI 10.1145/3385412.3386025
   Ji Ruyi, 2023, ARTIFACT OOPSLA 23 I, DOI [10.5281/zenodo.7722241, DOI 10.5281/ZENODO.7722241]
   Ji Ruyi, 2023, ARTIFACT OOPSLA 23 I
   Kalyan Ashwin, 2018, ICLR
   Kandel S, 2011, 29TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, P3363
   Kumar V., 1994, Introduction to parallel computing, V110
   Le V, 2017, Arxiv, DOI arXiv:1703.03539
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   Leung A, 2015, ACM SIGPLAN NOTICES, V50, P565, DOI [10.1145/2813885.2738002, 10.1145/2737924.2738002]
   Mayer M, 2015, UIST'15: PROCEEDINGS OF THE 28TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P291, DOI 10.1145/2807442.2807459
   Narita M, 2021, IUI '21 - 26TH INTERNATIONAL CONFERENCE ON INTELLIGENT USER INTERFACES, P454, DOI 10.1145/3397481.3450680
   Padhi S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276520
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Ramos D, 2020, IEEE INT CONF AUTOM, P175, DOI 10.1145/3324884.3416613
   Shaw David E., 1975, ADV PAPERS 4 INT JOI
   Singh R, 2015, LECT NOTES COMPUT SC, V9206, P398, DOI 10.1007/978-3-319-21690-4_23
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Tiwari A, 2020, Arxiv, DOI arXiv:2006.12638
   Wang C, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1631, DOI 10.1145/3035918.3058738
   Yessenov Kuat, 2013, P 26 ANN ACM S US IN, P495, DOI 10.1145/2501988.2502040
NR 36
TC 1
Z9 1
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586055
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600030
OA gold
DA 2024-07-18
ER

PT J
AU Alur, R
   Stanford, C
   Watson, C
AF Alur, Rajeev
   Stanford, Caleb
   Watson, Christopher
TI A Robust Theory of Series Parallel Graphs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE series-parallel graphs; distributed stream processing; regular
   languages; logic in computer science
ID AUTOMATA; LOGIC; LANGUAGE; CQL
AB Motivated by distributed data processing applications, we introduce a class of labeled directed acyclic graphs constructed using sequential and parallel composition operations, and study automata and logics over them. We show that deterministic and non-deterministic acceptors over such graphs have the same expressive power, which can be equivalently characterized by Monadic Second-Order logic and the graded ` -calculus. We establish closure under composition operations and decision procedures for membership, emptiness, and inclusion. A key feature of our graphs, called synchronized series-parallel graphs (SSPG), is that parallel composition introduces a synchronization edge from the newly introduced source vertex to the sink. The transfer of information enabled by such edges is crucial to the determinization construction, which would not be possible for the traditional definition of series-parallel graphs. SSPGs allow both ordered ranked parallelism and unordered unranked parallelism. The latter feature means that in the corresponding automata, the transition function needs to account for an arbitrary number of predecessors by counting each type of state only up to a specified constant, thus leading to a notion of counting complexity that is distinct from the classical notion of state complexity. The determinization construction translates a nondeterministic automaton with = states and : counting complexity to a deterministic automaton with 2(n2) states and := counting complexity, and both these bounds are shown to be tight. Furthermore, for nondeterministic automata a bound of 2 on counting complexity suffices without loss of expressiveness.
C1 [Alur, Rajeev; Watson, Christopher] Univ Penn, Comp & Informat Sci, Philadelphia, PA 19104 USA.
   [Stanford, Caleb] Univ Calif San Diego, San Diego, CA 92103 USA.
   [Stanford, Caleb] Univ Calif Davis, Davis, CA 95616 USA.
   [Stanford, Caleb] Univ Penn, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania; University of California System; University
   of California San Diego; University of California System; University of
   California Davis; University of Pennsylvania
RP Alur, R (corresponding author), Univ Penn, Comp & Informat Sci, Philadelphia, PA 19104 USA.
EM alur@cis.upenn.edu; cstanford@ucsd.edu; ccwatson@seas.upenn.edu
OI Stanford, Caleb/0000-0002-8428-7736; Watson,
   Christopher/0000-0003-3716-516X; ALUR, RAJEEV/0000-0003-1733-7083
FU National Science Foundation [CCF 1763514]
FX We would like to thank Mikolaj Bojanczyk and Alexander Rabinovich for
   helpful discussions, and the anonymous reviewers for their feedback.
   This material is based upon work supported by the National Science
   Foundation under award CCF 1763514.
CR Alur R, 2021, PODS '21: PROCEEDINGS OF THE 40TH SIGMOD-SIGACT-SIGAI SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P1, DOI 10.1145/3452021.3458317
   Alur R, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P599, DOI 10.1145/1926385.1926454
   Alur R, 2009, J ACM, V56, DOI 10.1145/1516512.1516518
   Alur Rajeev, 2004, P 36 ANN ACM S THEOR, P202, DOI [10.1145/1007352.1007390, DOI 10.1145/1007352.1007390]
   Amadini R, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3484198
   [Anonymous], 1997, Handbook of Formal Languages
   [Anonymous], 1970, Journal of Computer and System Sciences, DOI DOI 10.1016/S0022-0000(70)80041-1
   Arasu A, 2006, VLDB J, V15, P121, DOI 10.1007/s00778-004-0147-z
   Arasu A, 2004, LECT NOTES COMPUT SC, V2921, P1
   ARBIB MA, 1968, INFORM CONTROL, V12, P331, DOI 10.1016/S0019-9958(68)90374-4
   Babcock B., 2002, P 21 ACM SIGMOD SIGA, P1, DOI [DOI 10.1145/543613.543615, 10.1145/543613]
   BAKER BS, 1978, INFORM CONTROL, V37, P241, DOI 10.1016/S0019-9958(78)90538-7
   Bárcenas E, 2015, LECT NOTES ARTIF INT, V9413, P178, DOI 10.1007/978-3-319-27060-9_14
   Bekic Hans, 1984, DEFINABLE OPERATIONS, P30, DOI DOI 10.1007/BFB0048939
   Björklund H, 2010, THEOR COMPUT SCI, V411, P702, DOI 10.1016/j.tcs.2009.10.009
   Bojanczyk M, 2006, IEEE S LOG, P7, DOI 10.1109/LICS.2006.51
   Bozapalidis S, 2008, THEOR COMPUT SCI, V393, P147, DOI 10.1016/j.tcs.2007.11.022
   Brad~eld Julian, 2018, Handbook of Model Checking, P871, DOI DOI 10.1007/978-3-319-10575-8_26
   Carme J, 2004, LECT NOTES COMPUT SC, V3091, P105
   Chapman C., 2016, P 25 INT S SOFTWARE, P282, DOI DOI 10.1145/2931037.2931073
   Comon H., 2007, TREE AUTOMATA TECHNI
   COURCELLE B, 1990, INFORM COMPUT, V85, P12, DOI 10.1016/0890-5401(90)90043-H
   Courcelle Bruno, 1989, ALGEBRAIC TECHNIQUES, P93, DOI [10.1016/B978-0-12-046370-1.50009-7, DOI 10.1016/B978-0-12-046370-1.50009-7]
   Cristau J, 2005, LECT NOTES COMPUT SC, V3623, P68, DOI 10.1007/11537311_7
   D'Antoni L, 2021, COMMUN ACM, V64, P86, DOI 10.1145/3419404
   D'Antoni L, 2017, LECT NOTES COMPUT SC, V10426, P47, DOI 10.1007/978-3-319-63387-9_3
   Dal Zilio S, 2003, LECT NOTES COMPUT SC, V2706, P246
   Demri S, 2009, ACM T COMPUT LOG, V10, DOI 10.1145/1507244.1507246
   Diekert V., 1995, BOOK TRACES, DOI [10.1142/2563, DOI 10.1142/2563]
   Dimitrova R, 2015, ELECTRON P THEOR COM, P100, DOI 10.4204/EPTCS.193.8
   Drewes F., 1997, Handbook of Graph Grammars and Computing by Graph Transformation, V1, P95, DOI [10.1142/9789812384720, DOI 10.1142/9789812384720, DOI 10.1142/9789812384720_0002]
   Engelfriet J, 2015, Arxiv, DOI arXiv:1510.02036
   Gecseg F., 1997, Handbook of Formal Languages, V3, P1, DOI DOI 10.1007/978-3-642-59126-6_1
   Gedik B, 2014, VLDB J, V23, P517, DOI 10.1007/s00778-013-0335-9
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Hojjat H, 2019, LECT NOTES COMPUT SC, V11893, P19, DOI 10.1007/978-3-030-34175-6_2
   Hopcroft J. E., 1973, SIAM Journal on Computing, V2, P225, DOI 10.1137/0202019
   Janin D., 1996, CONCUR '96: Concurrency Theory. 7th International Conference. Proceedings, P263
   Janin D, 2001, IEEE S LOG, P347
   KAHN AB, 1962, COMMUN ACM, V5, P558, DOI 10.1145/368996.369025
   Kallas K, 2022, PPOPP'22: PROCEEDINGS OF THE 27TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P1, DOI 10.1145/3503221.3508413
   KAMIMURA T, 1982, MATH SYST THEORY, V15, P225
   KAMIMURA T, 1981, INFORM CONTROL, V49, P10, DOI 10.1016/S0019-9958(81)90438-1
   KAMINSKI M, 1994, THEOR COMPUT SCI, V134, P329, DOI 10.1016/0304-3975(94)90242-9
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Kupferman O., 2002, Automated Deduction - CADE-18. 18th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.2392), P423
   Kuske D, 2000, LECT NOTES COMPUT SC, V1853, P648
   Lodaya K, 1998, LECT NOTES COMPUT SC, V1373, P555
   Lodaya K, 2000, THEOR COMPUT SCI, V237, P347, DOI 10.1016/S0304-3975(00)00031-1
   Lugiez D, 2005, THEOR COMPUT SCI, V333, P225, DOI 10.1016/j.tcs.2004.10.023
   Mamouras K, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P670, DOI 10.1145/3314221.3314580
   Mazurkiewicz A., 1987, LNCS, V255, P278
   Murray DG, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P439, DOI 10.1145/2517349.2522738
   Murray DG, 2016, COMMUN ACM, V59, P75, DOI 10.1145/2983551
   Neven F., 2004, ACM Transactions on Computational Logic, V5, P403, DOI 10.1145/1013560.1013562
   Niehren J., 1993, TAPSOFT '93: Theory and Practice of Software Development. 4th International Joint Conference CAAP/FASE Proceedings, P356
   Reiter F, 2015, IEEE S LOG, P192, DOI 10.1109/LICS.2015.27
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Segoufin Luc, 2006, INTERNATIONALWORKSHO, P41, DOI [10.1007/11874683_3, DOI 10.1007/11874683_3]
   Shatdal A., 1995, SIGMOD Record, V24, P104, DOI 10.1145/568271.223801
   SHEMESH Y, 1994, INFORM COMPUT, V114, P192, DOI 10.1006/inco.1994.1085
   Thatcher J. W., 1968, Mathematical Systems Theory, V2, P57, DOI 10.1007/BF01691346
   Thomas W., 1997, PARTIAL ORDER METHOD, P25
   Thomas Wolfgang, 1990, ANN S THEORETICAL AS, P263, DOI [10.1016/0304-3975(92)90090-3, DOI 10.1016/0304-3975(92)90090-3]
   Tucker PA, 2003, IEEE T KNOWL DATA EN, V15, P555, DOI 10.1109/TKDE.2003.1198390
   Walukiewicz Igor, 1996, STACS 96, P399
NR 66
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571230
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500037
OA gold
DA 2024-07-18
ER

PT J
AU Baumann, P
   Ganardi, M
   Majumdar, R
   Thinniyam, RS
   Zetzsche, G
AF Baumann, Pascal
   Ganardi, Moses
   Majumdar, Rupak
   Thinniyam, Ramanathan S.
   Zetzsche, Georg
TI Context-Bounded Verification of Context-Free Specifications
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE refinement verification; multithreaded programs; context bounded; Dyck
   language; inclusion problem; computational complexity
ID IDEALIZED ALGOL; INCLUSION; LANGUAGE; BALANCEDNESS; EQUIVALENCE;
   COMPLEXITY; SYSTEMS
AB A fundamental problem in refinement verification is to check that the language of behaviors of an implementation is included in the language of the specification. We consider the refinement verification problem where the implementation is a multithreaded shared memory system modeled as a multistack pushdown automaton and the specification is an input-deterministic multistack pushdown language. Our main result shows that the context-bounded refinement problem, where we ask that all behaviors generated in runs of bounded number of context switches belong to a specification given by a Dyck language, is decidable and coNP-complete. The more general case of input-deterministic languages follows, with the same complexity. Context-bounding is essential since emptiness for multipushdown automata is already undecidable, and so is the refinement verification problem for the subclass of regular specifications. Input-deterministic languages capture many non-regular specifications of practical interest and our result opens the way for algorithmic analysis of these properties. The context-bounded refinement problem is coNP-hard already with deterministic regular specifications; our result demonstrates that the problem is not harder despite the stronger class of specifications. Our proof introduces several general techniques for formal languages and counter programs and shows that the search for counterexamples can be reduced in non-deterministic polynomial time to the satisfiability problem for existential Presburger arithmetic. These techniques are essential to ensure the coNP upper bound: existing techniques for regular specifications are not powerful enough for decidability, while simple reductions lead to problems that are either undecidable or have high complexities. As a special case, our decidability result gives an algorithmic verification technique to reason about reference counting and re-entrant locking in multithreaded programs.
C1 [Baumann, Pascal; Ganardi, Moses; Majumdar, Rupak; Thinniyam, Ramanathan S.; Zetzsche, Georg] Max Planck Inst Software Syst MPI SWS, Paul Ehrlich Str,Bldg G26, D-67663 Kaiserslautern, Germany.
C3 Max Planck Society
RP Baumann, P (corresponding author), Max Planck Inst Software Syst MPI SWS, Paul Ehrlich Str,Bldg G26, D-67663 Kaiserslautern, Germany.
EM pbaumann@mpi-sws.org; ganardi@mpi-sws.org; rupak@mpi-sws.org;
   thinniyam@mpi-sws.org; georg@mpi-sws.org
RI Thinniyam Srinivasan, Ramanathan/KVB-6618-2024; Zetzsche,
   Georg/I-5335-2018
OI Thinniyam Srinivasan, Ramanathan/0000-0002-9926-0931; Baumann,
   Pascal/0000-0002-9371-0807; Zetzsche, Georg/0000-0002-6421-4388
FU Deutsche Forschungsgemeinschaft [389792660 TRR 248-CPEC]; European
   Research Council [610150]
FX This research was sponsored in part by the Deutsche
   Forschungsgemeinschaft project 389792660 TRR 248-CPEC and by the
   European Research Council under the Grant Agreement 610150
   (http://www.impact-erc.eu/) (ERC Synergy Grant ImPACT).
CR Alur R, 2004, LECT NOTES COMPUT SC, V2988, P467
   Alur R, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2039346.2039347
   Alur R, 2009, J ACM, V56, DOI 10.1145/1516512.1516518
   Alur Rajeev, 2004, P 36 ANN ACM S THEOR, P202, DOI [10.1145/1007352.1007390, DOI 10.1145/1007352.1007390]
   Atig MF, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(4:04)2011
   Baumann P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434325
   Baumann Pascal, 2020, LIPICS, V168, P1, DOI [10.4230/LIPIcs.ICALP.2020.111, DOI 10.4230/LIPICS.ICALP.2020.111]
   Berstel J, 2002, ACTA INFORM, V38, P649, DOI 10.1007/s00236-002-0085-4
   Bertoni A, 2011, INT J FOUND COMPUT S, V22, P289, DOI 10.1142/S0129054111008040
   Blondin M, 2021, J ACM, V68, DOI 10.1145/3464794
   BOROSH I, 1976, P AM MATH SOC, V55, P299, DOI 10.2307/2041711
   Czerwinski W, 2022, ANN IEEE SYMP FOUND, P1229, DOI 10.1109/FOCS52979.2021.00120
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Emmi M, 2009, LECT NOTES COMPUT SC, V5505, P352, DOI 10.1007/978-3-642-00768-2_30
   Englert M, 2021, INFORM PROCESS LETT, V167, DOI 10.1016/j.ipl.2020.106079
   Farzan A, 2014, ACM SIGPLAN NOTICES, V49, P151, DOI 10.1145/2535838.2535885
   Ferles K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434298
   Filiot E, 2018, J COMPUT SYST SCI, V97, P147, DOI 10.1016/j.jcss.2018.05.002
   Friedman E. P., 1976, Theoretical Computer Science, V1, P297, DOI 10.1016/0304-3975(76)90074-8
   GREIBACH SA, 1980, J ACM, V27, P675, DOI 10.1145/322217.322224
   Inverso O, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3478536
   KNUTH DE, 1967, INFORM CONTROL, V11, P269, DOI 10.1016/S0019-9958(67)90564-5
   Kobayashi N, 2019, THEOR COMPUT SCI, V777, P409, DOI 10.1016/j.tcs.2018.09.035
   La Torre S, 2010, LECT NOTES COMPUT SC, V6034, P96, DOI 10.1007/978-3-642-12200-2_10
   La Torre S, 2020, INFORM COMPUT, V275, DOI 10.1016/j.ic.2020.104588
   La Torre S, 2009, LECT NOTES COMPUT SC, V5643, P477, DOI 10.1007/978-3-642-02658-4_36
   Lal A, 2008, LECT NOTES COMPUT SC, V4963, P282, DOI 10.1007/978-3-540-78800-3_20
   Lal A, 2009, FORM METHOD SYST DES, V35, P73, DOI 10.1007/s10703-009-0078-9
   Leroux J, 2004, LECT NOTES COMPUT SC, V3170, P402
   Leroux J, 2022, ANN IEEE SYMP FOUND, P1241, DOI 10.1109/FOCS52979.2021.00121
   Leroux J, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785796
   Leroux J, 2015, LECT NOTES COMPUT SC, V9135, P324, DOI 10.1007/978-3-662-47666-6_26
   LIPTON RJ, 1977, J ACM, V24, P522, DOI 10.1145/322017.322031
   Löbel R, 2021, INT J FOUND COMPUT S, V32, P761, DOI 10.1142/S0129054121420077
   Lohrey M, 2012, GROUPS COMPLEX CRYPT, V4, P241, DOI 10.1515/gcc-2012-0016
   Madhavan R, 2015, ACM SIGPLAN NOTICES, V50, P183, DOI [10.1145/2814270.2814304, 10.1145/2858965.2814304]
   Madhusudan P, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P283, DOI 10.1145/1926385.1926419
   Maneth S, 2018, INFORM PROCESS LETT, V133, P26, DOI 10.1016/j.ipl.2018.01.002
   Meyer Roland, 2018, LIPICS, V118, P1, DOI DOI 10.4230/LIPICS.CONCUR.2018.12
   Murawski AS, 2005, LECT NOTES COMPUT SC, V3580, P917
   Musuvathi M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P446, DOI 10.1145/1250734.1250785
   Olshansky T., 1977, Theoretical Computer Science, V4, P321, DOI 10.1016/0304-3975(77)90016-0
   Ong CHL, 2002, IEEE S LOG, P245, DOI 10.1109/LICS.2002.1029833
   Plandowski W., 1994, Algorithms - ESA '94. Second Annual European Symposium Proceedings, P460, DOI 10.1007/BFb0049431
   Qadeer S, 2005, LECT NOTES COMPUT SC, V3440, P93
   Qadeer S, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/996893.996845
   Reps T, 2005, SCI COMPUT PROGRAM, V58, P206, DOI 10.1016/j.scico.2005.02.009
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   RITCHIE RW, 1972, INFORM CONTROL, V20, P313, DOI 10.1016/S0019-9958(72)90205-7
   ROSENKRANTZ DJ, 1970, INFORM CONTROL, V17, P226, DOI 10.1016/S0019-9958(70)90446-8
   Sagiv M, 1996, THEOR COMPUT SCI, V167, P131, DOI 10.1016/0304-3975(96)00072-2
   Schleimer S, 2008, COMMENT MATH HELV, V83, P741
   Senizergues G, 1997, LECT NOTES COMPUT SC, V1256, P671
   Shetty Aneesh K., 2021, LIPICS, V203, P1, DOI [10.4230/LIPIcs.CONCUR.2021.29, DOI 10.4230/LIPICS.CONCUR.2021.29]
   Sipser M., 2013, Introduction to the theory of computation, V3
   Tozawa A, 2007, LECT NOTES COMPUT SC, V4423, P346
   Verma KN, 2005, LECT NOTES ARTIF INT, V3632, P337
   Xie Li, 2020, Dependable Software Engineering. Theories, Tools, and Applications. 6th International Symposium, SETTA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12153), P89, DOI 10.1007/978-3-030-62822-2_6
NR 58
TC 1
Z9 1
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571266
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500073
OA gold
DA 2024-07-18
ER

PT J
AU Zhou, L
   Barthe, G
   Strub, PY
   Liu, JY
   Ying, MS
AF Zhou, Li
   Barthe, Gilles
   Strub, Pierre-Yves
   Liu, Junyi
   Ying, Mingsheng
TI CoqQ: Foundational Verification of Quantum Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Quantum Programs; Program Logics; Proof Assistants; Mathematical;
   Libraries
ID FORMAL VERIFICATION; PROOF; LOGIC
AB CoqQ is a framework for reasoning about quantum programs in the Coq proof assistant. Its main components are: a deeply embedded quantum programming language, in which classic quantum algorithms are easily expressed, and an expressive program logic for proving properties of programs. CoqQ is foundational: the program logic is formally proved sound with respect to a denotational semantics based on state-of-art mathematical libraries (MathComp and MathComp Analysis). CoqQ is also practical: assertions can use Dirac expressions, which eases concise specifications, and proofs can exploit local and parallel reasoning, which minimizes verification effort. We illustrate the applicability of CoqQ with many examples from the literature.
C1 [Zhou, Li; Barthe, Gilles] Max Planck Inst Secur & Privacy MPI SP, Bochum, Germany.
   [Zhou, Li; Liu, Junyi; Ying, Mingsheng] Chinese Acad Sci, Inst Software, State Key Lab Comp Sci, Beijing, Peoples R China.
   [Barthe, Gilles] IMDEA Software Inst, Madrid, Spain.
   [Strub, Pierre-Yves] Meta, Paris, France.
   [Liu, Junyi] Univ Chinese Acad Sci, Beijing, Peoples R China.
   [Ying, Mingsheng] Tsinghua Univ, Beijing, Peoples R China.
C3 Chinese Academy of Sciences; Institute of Software, CAS; IMDEA Software
   Institute; Chinese Academy of Sciences; University of Chinese Academy of
   Sciences, CAS; Tsinghua University
RP Zhou, L (corresponding author), Max Planck Inst Secur & Privacy MPI SP, Bochum, Germany.; Zhou, L (corresponding author), Chinese Acad Sci, Inst Software, State Key Lab Comp Sci, Beijing, Peoples R China.
EM li.zhou@mpi-sp.org; zhouli@ios.ac.cn; strubpy@meta.com; liujy@ios.ac.cn;
   yingms@ios.ac.cn
RI Ying, Mingsheng/A-8379-2008
OI Ying, Mingsheng/0000-0003-4847-702X; Zhou, Li/0000-0002-9868-8477;
   BARTHE, Gilles/0000-0002-3853-1777
FU National Key R&D Program of China [2018YFA0306701]; National Natural
   Science Foundation of China [61832015]
FX We thank Cyril Cohen for the suggestion on implementing labelled Dirac
   notation as non-dependent type and Christian Doczkal for discussing
   implementing the hierarchy of matrices and linear maps. This work was
   partly supported by the National Key R&D Program of China (Grant No:
   2018YFA0306701), the National Natural Science Foundation of China (Grant
   No: 61832015).
CR Abramsky S, 2009, HANDBOOK OF QUANTUM LOGIC AND QUANTUM STRUCTURES: QUANTUM LOGIC, P261, DOI 10.1016/B978-0-444-52869-8.50010-4
   Aleks Kissinger, 2020, EPTCS, V318, P229, DOI [10.4204/eptcs.318.14, DOI 10.4204/EPTCS.318.14]
   Aleksandrowicz Gadi, 2019, Zenodo, DOI 10.5281/ZENODO.2562111
   Amy M, 2019, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.287.1
   [Anonymous], 2023, PROC ACM PROGRAM LAN, V7, DOI [10.1109/LICS52264.2021.9470673, DOI 10.1109/LICS52264.2021.9470673]
   Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Assia Mahboubi, 2021, MATH COMPONENTS, DOI [10.5281/zenodo.4457887, DOI 10.5281/ZENODO.4457887]
   Baltag A, 2006, MATH STRUCT COMP SCI, V16, P491, DOI 10.1017/S0960129506005299
   Barbosa M, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2564, DOI 10.1145/3460120.3484567
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371089
   Bentkamp A, 2019, J AUTOM REASONING, V63, P347, DOI 10.1007/s10817-018-9481-5
   Bichsel B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P286, DOI 10.1145/3385412.3386007
   Bordg A, 2021, J AUTOM REASONING, V65, P691, DOI 10.1007/s10817-020-09584-7
   Bravyi S, 2018, SCIENCE, V362, P308, DOI 10.1126/science.aar3106
   Brunet O, 2004, INT J QUANTUM INF, V2, P45, DOI 10.1142/S0219749904000067
   Caballero J.M.R., 2021, Archive of Formal Proofs
   Chareton C, 2021, LECT NOTES COMPUT SC, V12648, P148, DOI 10.1007/978-3-030-72019-3_6
   Chris Lomont, 2004, ARXIV, DOI [10.48550/arxiv.quantph/0411037, DOI 10.48550/ARXIV.QUANTPH/0411037]
   Coecke B, 2006, AIP CONF PROC, V810, P81, DOI 10.1063/1.2158713
   Coecke B, 2011, NEW J PHYS, V13, DOI 10.1088/1367-2630/13/4/043016
   D'Hondt E, 2006, MATH STRUCT COMP SCI, V16, P429, DOI 10.1017/S0960129506005251
   Duncan R, 2020, QUANTUM-AUSTRIA, V4, DOI 10.22331/q-2020-06-04-279
   Feng Y., 2021, ACM T QUANTUM COMPUT, V2, P16, DOI [DOI 10.1145/3456877, 10.1145/3456877]
   Feng Y, 2007, THEOR COMPUT SCI, V386, P151, DOI 10.1016/j.tcs.2007.06.011
   Gonthier G, 2013, J FUNCT PROGRAM, V23, P357, DOI 10.1017/S0956796813000051
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Hadzihasanovic A, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P502, DOI 10.1145/3209108.3209128
   Harrow AW, 2009, PHYS REV LETT, V103, DOI 10.1103/PhysRevLett.103.150502
   Hietala K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434318
   Hietala Kesha, 2021, 12 INT C INTERACTIVE, V21, P1, DOI [DOI 10.4230/LIPICS.ITP, 10.4230/LIPIcs. ITP.2021.21, DOI 10.4230/LIPICS.ITP.2021.21, 10.4230/LIPIcs.ITP.2021.21]
   Jeandel E, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P569, DOI 10.1145/3209108.3209139
   Jourdan JH, 2015, ACM SIGPLAN NOTICES, V50, P247, DOI [10.1145/2775051.2676966, 10.1145/2676726.2676966]
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Kakutani Y, 2009, LECT NOTES COMPUT SC, V5913, P79, DOI 10.1007/978-3-642-10622-4_7
   Kissinger A, 2015, LECT NOTES ARTIF INT, V9195, P326, DOI 10.1007/978-3-319-21401-6_22
   Kitaev A. Y., 1995, Electr. Colloq. Comput. Complex.
   Le XB, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498697
   Lehmann Adrian, 2022, P 19 INT C QUANT PHY
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Li Yangjia, 2021, 48 INT C AUTOMATA LA, V136, P1
   Liu JY, 2019, LECT NOTES COMPUT SC, V11562, P187, DOI 10.1007/978-3-030-25543-5_12
   Nielsen M. A, 2002, QUANTUM COMPUTATION
   Paykin J, 2017, ACM SIGPLAN NOTICES, V52, P846, DOI 10.1145/3093333.3009894
   Peham T, 2022, IEEE J EM SEL TOP C, V12, P662, DOI 10.1109/JETCAS.2022.3202204
   Peng YX, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P657, DOI 10.1145/3519939.3523713
   Rand R., 2018, 4 INT WORKSHOP COQ P
   Rand R, 2019, ELECTRON P THEOR COM, P299, DOI 10.4204/EPTCS.287.17
   Rand R, 2018, ELECTRON P THEOR COM, P119, DOI 10.4204/EPTCS.266.8
   Serre, 1977, ASTERISQUE, V46
   Singhal K, 2021, Arxiv, DOI arXiv:2012.02154
   Svore K, 2018, RWDSL2018: PROCEEDINGS OF THE REAL WORLD DOMAIN SPECIFIC LANGUAGES WORKSHOP 2018, DOI 10.1145/3183895.3183901
   The Cirq Developers, 2018, QUANT CIRQ PYTH FRAM
   The Coq Development Team, 2022, Zenodo
   The MathComp Analysis Development Team, 2022, MATHCOMP AN MATH COM
   Thiemann R, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P88, DOI 10.1145/2854065.2854073
   Unruh Dominique, 2020, Advances in Cryptology - ASIACRYPT 2020. 26th International Conference on the Theory and Application of Cryptology and Information Security. Proceedings. Lecture Notes in Computer Science (LNCS 12491), P321, DOI 10.1007/978-3-030-64837-4_11
   Unruh D., 2019, 2019 34 ANN ACM IEEE, P1
   Unruh D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290346
   Unruh Dominique, 2021, 2 INT WORKSH PROGR L
   Vilmart R, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785765
   Ying M., 2016, Foundations of Quantum Programming
   Ying MS, 2019, Arxiv, DOI [arXiv:1810.11334, 10.48550/ARXIV.1810.11334, DOI 10.48550/ARXIV.1810.11334]
   Ying MS, 2022, THEOR COMPUT SCI, V897, P164, DOI 10.1016/j.tcs.2021.10.025
   Ying MS, 2019, FORM ASP COMPUT, V31, P3, DOI 10.1007/s00165-018-0465-3
   Ying MS, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2049706.2049708
   Yu NK, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P542, DOI 10.1145/3453483.3454061
   Yu Nengkun, 2019, arXiv
   Yuan C, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563297
   Yuan C, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498691
   Zhou L, 2021, IEEE I C VI COM I PR, DOI 10.1109/VCIP53242.2021.9675363
   Zhou L, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1149, DOI 10.1145/3314221.3314584
   Zhou Li, 2023, COQQ FDN VERIFICATIO, DOI [10.1145/3554343, DOI 10.1145/3554343]
NR 74
TC 4
Z9 4
U1 3
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571222
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500029
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Moiseenko, E
   Kokologiannakis, M
   Vafeiadis, V
AF Moiseenko, Evgenii
   Kokologiannakis, Michalis
   Vafeiadis, Viktor
TI Model Checking for a Multi-Execution Memory Model
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Weak memory models; model checking
ID WEAK MEMORY
AB Multi-execution memory models, such as Promising and Weakestmo, are an advanced class of weak memory consistency models that justify certain outcomes of a concurrent program by considering multiple candidate executions collectively. While this key characteristic allows them to support effective compilation to hardware models and a wide range of compiler optimizations, it makes reasoning about them substantially more difficult. In particular, we observe that Promising and Weakestmo inhibit effective model checking because they allow some suprisingly weak behaviors that cannot be generated by examining one execution at a time.
   We therefore introduce Weakestmo2, a strengthening of Weakestmo by constraining its multi-execution nature, while preserving the important properties of Weakestmo: DRF theorems, compilation to hardware models, and correctness of local program transformations. Our strengthening rules out a class of surprisingly weak program behaviors, which we attempt to characterize with the help of two novel properties: load buffering race freedom and certification locality. In addition, we develop WMC, a model checker for Weakestmo2 with performance close to that of the best tools for per-execution models.
C1 [Moiseenko, Evgenii] JetBrains Res, Belgrade, Serbia.
   [Kokologiannakis, Michalis; Vafeiadis, Viktor] MPI SWS, Saarbrucken, Germany.
RP Moiseenko, E (corresponding author), JetBrains Res, Belgrade, Serbia.
EM evgeniy.moiseenko@jetbrains.com; michalis@mpi-sws.org;
   viktor@mpi-sws.org
RI Vafeiadis, Viktor/B-5809-2014
OI Vafeiadis, Viktor/0000-0001-8436-0334; Kokologiannakis,
   Michalis/0000-0002-7905-9739
FU European Research Council (ERC) Consolidator Grant for the project
   lPERSISTz under the European Union's Horizon 2020 research and
   innovation programme [101003349]
FX We would like to thank Soham Chakraborty and Anton Podkopaev for their
   insights onWeakestmo and IMM memory models, and the anonymous reviewers
   for their valuable feedback. This work was supported by a European
   Research Council (ERC) Consolidator Grant for the project lPERSISTz
   under the European Union's Horizon 2020 research and innovation
   programme (grant agreement No. 101003349).
CR Abdulla Parosh Aziz, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P353, DOI 10.1007/978-3-662-46681-0_28
   Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Abdulla PA, 2021, LECT NOTES COMPUT SC, V12648, P1, DOI 10.1007/978-3-030-72019-3_1
   Abdulla PA, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276505
   Abdulla PA, 2016, LECT NOTES COMPUT SC, V9780, P134, DOI 10.1007/978-3-319-41540-6_8
   Abdulla PA, 2015, LECT NOTES COMPUT SC, V9032, P308, DOI 10.1007/978-3-662-46669-8_13
   Adve SV, 1996, COMPUTER, V29, P66, DOI 10.1109/2.546611
   Alglave J, 2017, ACM SIGPLAN NOTICES, V52, P3, DOI 10.1145/3093333.3009883
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Barnat J, 2013, INT CONF APPL CONCUR, P51, DOI 10.1109/ACSD.2013.8
   Batty M, 2015, LECT NOTES COMPUT SC, V9032, P283, DOI 10.1007/978-3-662-46669-8_12
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Bouajjani A, 2013, LECT NOTES COMPUT SC, V7792, P533, DOI 10.1007/978-3-642-37036-6_29
   Chakraborty S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290383
   Demsky B, 2015, ACM SIGPLAN NOTICES, V50, P20, DOI [10.1145/2814270.2814297, 10.1145/2858965.2814297]
   Doko M, 2017, LECT NOTES COMPUT SC, V10201, P448, DOI 10.1007/978-3-662-54434-1_17
   Doko M, 2016, LECT NOTES COMPUT SC, V9583, P413, DOI 10.1007/978-3-662-49122-5_20
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Huang SY, 2016, ACM SIGPLAN NOTICES, V51, P447, DOI 10.1145/3022671.2984025
   Jagadeesan R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428262
   Jeffrey A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498716
   Jeffrey A, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P759, DOI 10.1145/2933575.2934536
   Kaiser Jan-Oliver, 2017, C ECOOP 2017 DAGST G, V17, P1, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Kokologiannakis M, 2021, LECT NOTES COMPUT SC, V12759, P427, DOI 10.1007/978-3-030-81685-8_20
   Kokologiannakis M, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P1157, DOI 10.1145/3373376.3378480
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lee SH, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P362, DOI 10.1145/3385412.3386010
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Moiseenko Evgenii, 2020, LEIBNIZ INT P INFORM, V5, P1, DOI [10.4230/LIPIcs. ECOOP.2020.5, DOI 10.4230/LIPICS.ECOOP.2020.5]
   Moiseenko Evgenii, 2022, Model Checking for a Multi-Execution Memory Model (Supplementary Material)
   Norris B, 2013, ACM SIGPLAN NOTICES, V48, P131, DOI [10.1145/2509136.2509514, 10.1145/2544173.2509514]
   Oberhauser J, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P530, DOI 10.1145/3445814.3446748
   Ou PZ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276506
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Paviotti M, 2020, LECT NOTES COMPUT SC, V12075, P599, DOI 10.1007/978-3-030-44914-8_22
   Pichon-Pharabod J, 2016, ACM SIGPLAN NOTICES, V51, P622, DOI 10.1145/2914770.2837616
   Podkopaev A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290382
   Pulte C, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1, DOI 10.1145/3314221.3314624
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Ridge T, 2010, LECT NOTES COMPUT SC, V6217, P55, DOI 10.1007/978-3-642-15057-9_4
   rmem, 2009, rmem: Executable concurrency models for ARMv8, RISC-V, Power, and x86
   Sieczkowski F, 2015, LECT NOTES COMPUT SC, V9032, P736, DOI 10.1007/978-3-662-46669-8_30
   SV-COMP, 2019, Competition on Software Verification (SV-COMP)
   Svendsen Kasper, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P357, DOI 10.1007/978-3-319-89884-1_13
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
NR 49
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 152
DI 10.1145/3563315
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200029
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Zwaan, A
   van Antwerpen, H
   Visser, E
AF Zwaan, Aron
   van Antwerpen, Hendrik
   Visser, Eelco
TI Incremental Type-Checking for Free
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type-checker; incremental type-checking; scope graphs; type systems;
   name binding; reference resolution; Statix
AB Fast analysis response times in IDEs are essential for a good editor experience. Incremental type-checking can provide that in a scalable fashion. However, existing techniques are not reusable between languages. Moreover, mutual and dynamic dependencies preclude traditional approaches to incrementality. This makes finding automatic approaches to incremental type-checking a challenging but important open question.
   In this paper, we present a technique that automatically derives incremental type-checkers from type system specifications written in the Statix meta-DSL. We use name resolution queries in scope graphs (a generic model of name binding embedded in Statix) to derive dependencies between compilation units. A novel query confirmation algorithm finds queries for which the answer changed due to an edit in the program. Only units with such queries require reanalysis. The effectiveness of this algorithm is improved by (1) splitting the type-checking task into a context-free and a context-sensitive part, and (2) reusing a generic mechanism to resolve mutual dependencies. This automatically yields incremental type-checkers for any Statix specification.
   Compared to non-incremental parallel execution, we achieve speedups up to 147x on synthetic benchmarks, and up to 21x on real-world projects, with initial overheads below 10%. This suggests that our framework can provide efficient incremental type-checking to the wide range of languages supported by Statix.
C1 [Zwaan, Aron; van Antwerpen, Hendrik; Visser, Eelco] Delft Univ Technol, Delft, Netherlands.
C3 Delft University of Technology
RP Zwaan, A (corresponding author), Delft Univ Technol, Delft, Netherlands.
EM a.s.zwaan@tudelft.nl; h.vanantwerpen@tudelft.nl; e.visser@tudelft.nl
OI Zwaan, Aron/0000-0002-1818-4245
CR Agha G.A., 1990, ACTORS-a model of concurrent computation in distributed systems
   Ancona D, 1999, LECT NOTES COMPUT SC, V1589, P1
   Ancona D., 2002, PPDP '02, P189, DOI [10.1145/571157.571177, DOI 10.1145/571157.571177]
   [Anonymous], 2008, COMP 23 ACM SIGPLAN
   Arzt S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P288, DOI 10.1145/2568225.2568243
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Busi M, 2019, LECT NOTES COMPUT SC, V11460, P106, DOI 10.1007/978-3-030-20652-9_7
   Cardelli L., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P266, DOI 10.1145/263699.263735
   Chaudhuri A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133872
   Demers Alan J., 1981, S PRINCIPLES PROGRAM, P105, DOI DOI 10.1145/567532.567544
   Drossopoulou S., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P147, DOI 10.1109/LICS.1999.782606
   Eclipse, 2021, JDT Core Component
   Erdweg S, 2015, ACM SIGPLAN NOTICES, V50, P880, DOI [10.1145/2814270.2814277, 10.1145/2858965.2814277]
   Greene Sterling, 2015, Introducing Incremental Build Support
   Grohe M, 2020, COMMUN ACM, V63, P128, DOI 10.1145/3372123
   Hammer MA, 2014, ACM SIGPLAN NOTICES, V49, P156, DOI [10.1145/2594291.2594324, 10.1145/2666356.2594324]
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Konat G, 2018, IEEE INT CONF AUTOM, P76, DOI 10.1145/3238147.3238196
   Kuci Edlira, 2015, COMP P 2015 ACM SIGP, P46, DOI [10.1145/2814189.2817272, DOI 10.1145/2814189.2817272]
   Lambert G. L. T., 1983, C REC 10 ANN ACM S P, P265, DOI [10.1145/567067.567092, DOI 10.1145/567067.567092]
   Leroy X., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P109, DOI 10.1145/174675.176926
   Machkasova E, 2000, LECT NOTES COMPUT SC, V1782, P260
   Martin Elsman, 2008, Technical Report
   Misteli Phil, 2021, Master's thesis
   Neron P, 2015, LECT NOTES COMPUT SC, V9032, P205, DOI 10.1007/978-3-662-46669-8_9
   OpenJDK, 2021, Java Microbenchmark Harness (JMH)
   Pacak A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428195
   Pelsmaeker DAA, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527329
   Ramalingam G., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P502, DOI 10.1145/158511.158710
   Rouvoet A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428248
   Ryzhyk Leonid, 2019, Differential Datalog
   Sanchez B., 2020, PROC 23 ACM IEEE INT, P1, DOI [10.1145/3365438.3410942, DOI 10.1145/3365438.3410942]
   Shao Z., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P439, DOI 10.1145/158511.158702
   Swasey David., 2006, ML '06, P32, DOI [10.1145/1159876.1159883, DOI 10.1145/1159876.1159883]
   Szabó T, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1, DOI 10.1145/3453483.3454026
   Szabó T, 2018, COMPANION PROCEEDINGS FOR THE ISSTA/ECOOP 2018 WORKSHOPS, P27, DOI 10.1145/3236454.3236485
   Szabó T, 2016, IEEE INT CONF AUTOM, P320, DOI 10.1145/2970276.2970298
   van Antwerpen H, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276484
   van Antwerpen Hendrik, 2021, LIPIcs, V194, DOI [10.4230/LIPIcs.ECOOP.2021.1, DOI 10.4230/LIPICS.ECOOP.2021.1]
   Wachsmuth GH, 2013, LECT NOTES COMPUT SC, V8225, P260, DOI 10.1007/978-3-319-02654-1_15
   Zwaan Aron, 2022, Zenodo, DOI 10.5281/ZENODO.7071393
NR 41
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 140
DI 10.1145/3563303
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200017
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Liu, JW
   Wei, YX
   Yang, S
   Deng, YL
   Zhang, LM
AF Liu, Jiawei
   Wei, Yuxiang
   Yang, Sen
   Deng, Yinlin
   Zhang, Lingming
TI Coverage-Guided Tensor Compiler Fuzzing with Joint IR-Pass Mutation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Fuzzing; Compiler Testing; Machine Learning Systems
AB In the past decade, Deep Learning (DL) systems have been widely deployed in various application domains to facilitate our daily life, e.g., natural language processing, healthcare, activity recognition, and autonomous driving. Meanwhile, it is extremely challenging to ensure the correctness of DL systems (e.g., due to their intrinsic nondeterminism), and bugs in DL systems can cause serious consequences and may even threaten human lives. In the literature, researchers have explored various techniques to test, analyze, and verify DL models, since their quality directly affects the corresponding system behaviors. Recently, researchers have also proposed novel techniques for testing the underlying operator-level DI. libraries (such as TensorFlow and PyTorch), which provide general binary implementations for each high-level DL operator and are the foundation for running DL models on different hardware platforms. However, there is still limited work targeting the reliability of the emerging tensor compilers (also known as DL compilers), which aim to automatically compile high-level tensor computation graphs directly into high-performance binaries for better efficiency, portability, and scalability than traditional operator-level libraries. Therefore, in this paper, we target the important problem of tensor compiler testing, and have proposed TZER, a practical fuzzing technique for the widely used TVM tensor compiler. TZER focuses on mutating the low-level Intermediate Representation (IR) for TVM due to the limited mutation space for the high-level IR. More specifically, TZER leverages both general-purpose and tensor-compiler-specific mutators guided by coverage feedback for diverse and evolutionary IR mutation; furthermore, since tensor compilers provide various passes (i.e., transformations) for IR optimization, TZER also performs pass mutation in tandem with IR mutation for more effective fuzzing. Our experimental results show that TZER substantially outperforms existing fuzzing techniques on tensor compiler testing, with 75% higher coverage and 50% more valuable tests than the 2nd-best technique. Also, different components of TZER have been validated via ablation study. To date, TZER has detected 49 previously unknown bugs for TVM, with 37 bugs confirmed and 25 bugs fixed (PR merged).
C1 [Liu, Jiawei; Deng, Yinlin; Zhang, Lingming] Univ Illinois, Champaign, IL 61820 USA.
   [Wei, Yuxiang] Tongji Univ, Shanghai, Peoples R China.
   [Yang, Sen] Fudan Univ, Shanghai, Peoples R China.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   Tongji University; Fudan University
RP Liu, JW (corresponding author), Univ Illinois, Champaign, IL 61820 USA.
EM jiawei6@illinois.edu; nolest@tongji.edu.cn; syang15@fudan.edu.cn;
   yinlind2@illinois.edu; lingming@illinois.edu
RI Liu, Jiawei/JVZ-3421-2024
OI Liu, Jiawei/0000-0001-7122-8625; Yang, Sen/0000-0002-8866-2097; Deng,
   Yinlin/0000-0002-4628-4219; Wei, Yuxiang/0000-0002-4391-3753
FU National Science Foundation [CCF-2131943, CCF-2141474]
FX This work is partially supported by National Science Foundation under
   Grant Nos. CCF-2131943 and CCF-2141474.
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   [Anonymous], 2002, Master's thesis
   Apache TVM Community, 2020, TVM REL TEST D TVM 0
   Behnel Stefan, 2010, COMPUT SCI ENG, V13, p31s39
   BJORSTAD P, 1992, SIAM J MATRIX ANAL A, V13, P386, DOI 10.1137/0613026
   Böhme M, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P678, DOI 10.1145/3368089.3409748
   Böhme M, 2019, IEEE T SOFTWARE ENG, V45, P489, DOI 10.1109/TSE.2017.2785841
   Cao Zhe, 2019, IEEE T PATTERN ANAL, V43
   Chen TQ, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P579
   Chetlur S., 2014, ARXIV14100759
   Claessen K, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000143
   Denes Maxime, 2014, COQ WORKSH, V125, P126
   Devlin J., 2018, BERT PRE TRAINING DE
   Esteva A, 2019, NAT MED, V25, P24, DOI 10.1038/s41591-018-0316-z
   Fioraldi Andrea, 2020, WOOT
   Garcia J, 2020, PROC INT CONF SOFTW, P385, DOI 10.1145/3377811.3380397
   Glibc Wiki, 2016, FUZZ LIBC
   Google, 2016, XLA OPT COMP MACH LE
   Google, 2015, KERAS
   Google Security Blog, 2016, GUID IN PROC FUZZ CH
   Gopinath R, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P72, DOI 10.1145/2568225.2568278
   Grigorescu S, 2020, J FIELD ROBOT, V37, P362, DOI 10.1002/rob.21918
   Guo Y., 2021, ARXIV PREPRINT ARXIV
   Holler Christian, 2012, USENIX SEC S
   Husheng Zhou, 2020, 2020 IEEE/ACM 42nd International Conference on Software Engineering (ICSE), P347, DOI 10.1145/3377811.3380422
   Intel, 2017, PLAIDML IS FRAM MAK
   Jia ZH, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P47, DOI 10.1145/3341301.3359630
   Jin T., 2020, ARXIV200209174
   Kim Kyungtae, 2020, HFL HYBRID FUZZING L, DOI [10.14722/ndss.2020.24018, DOI 10.14722/NDSS.2020.24018]
   Klees G, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P2123, DOI 10.1145/3243734.3243804
   Kreiss S, 2019, PROC CVPR IEEE, P11969, DOI 10.1109/CVPR.2019.01225
   Lampropoulos L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360607
   Lampropoulos L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158133
   Lattner C., 2020, MLIR COMPILER INFRAS
   Le Vu, 2014, ACM SIGPLAN NOTICES, V49
   Lemieux Caroline, 2018, FAIRFUZZ TARGETED MU, DOI [10.1145/3238147.3238176, DOI 10.1145/3238147.3238176]
   Levenstein, 2018, ARXIV PREPRINT ARXIV
   Li J, 2018, CYBERSECURITY, V1, DOI 10.1186/s42400-018-0002-y
   Li Mingzhen, 2020, IEEE T PARALL DISTR, V32
   Liu Jiawei, 2022, COVERAGE GUIDED TENS, DOI [10.5281/zenodo.6371291, DOI 10.5281/ZENODO.6371291]
   Manes Valentin Jean Marie, 2019, IEEE T SOFTWARE ENG, V47
   Miotto R, 2018, BRIEF BIOINFORM, V19, P1236, DOI 10.1093/bib/bbx044
   Odena A, 2019, PR MACH LEARN RES, V97
   Pankratz David, 2020, TVMFuzz: fuzzing tensor-level intermediate representation in TVM
   Park N, 2003, IEEE T PARALL DISTR, V14, P640, DOI 10.1109/TPDS.2003.1214317
   Park S, 2020, P IEEE S SECUR PRIV, P1628, DOI 10.1109/SP40000.2020.00067
   Paszke A, 2019, ADV NEUR IN, V32
   Pei KX, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P1, DOI 10.1145/3132747.3132785
   Pham Hung Viet, 2019, CRADLE CROSS BACKEND, DOI [10.1109/ICSE.2019.00107, DOI 10.1109/ICSE.2019.00107]
   Python Software Foundation, 2021, Python software foundation
   Ragan-Kelley Jonathan, 2013, ACM SIGPLAN NOTICES, V48
   Rao Qing, 2018, 2018 IEEE/ACM 1st International Workshop on Software Engineering for AI in Autonomous Systems (SEFAIAS). Proceedings, P35, DOI 10.1145/3194085.3194087
   Serebryany Kosta, 2016, 2016 IEEE CYB DEV SE
   Serebryany Kostya, 2017, OSS-Fuzz-Google's continuous fuzzing service for open source software
   Smith TM, 2014, INT PARALL DISTRIB P, DOI 10.1109/IPDPS.2014.110
   Stroustrup Bjarne, 2017, WHY DOESNT C PROVIDE
   Tian YC, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P303, DOI 10.1145/3180155.3180220
   Tillet Philippe, 2019, TRITON INTERMEDIATE, p10s19, DOI DOI 10.1145/3315508.3329973
   Vaswani A, 2017, ADV NEUR IN, V30
   Wang Z, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P788, DOI 10.1145/3368089.3409761
   Wei Anjiang, 2022 IEEEACM 44 INT
   Wongsuphasawat Kanit, 2017, IEEE T VIS COMPUT GR, V24, p1s12
   Wu Mingyuan, 2022, 2022 IEEE ACM 44 INT
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Young T, 2018, IEEE COMPUT INTELL M, V13, P55, DOI 10.1109/MCI.2018.2840738
   Zalewski Michal, 2018, American fuzzing lop (afl)
   Zhang MS, 2018, IEEE INT CONF AUTOM, P132, DOI 10.1145/3238147.3238187
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P347, DOI [10.1145/3062341.3062379, 10.1145/3140587.3062379]
   Zhao J, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1233, DOI 10.1145/3453483.3454106
   Zhao Yingquan, 2022, 2022 IEEEACM 44 INT
   Zhong R., 2020, CCS, P955
NR 71
TC 12
Z9 12
U1 1
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 73
DI 10.1145/3527317
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300009
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Pelsmaeker, DAA
   van Antwerpen, H
   Poulsen, CB
   Visser, E
AF Pelsmaeker, Daniel A. A.
   van Antwerpen, Hendrik
   Poulsen, Casper Bach
   Visser, Eelco
TI Language-Parametric Static Semantic Code Completion
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE semantic code completion; semantics; constraint solving; name binding;
   editor services; reference resolution; code completion
AB Code completion is an editor service in IDEs that proposes code fragments for the user to insert at the caret position in their code. Code completion should be sound and complete. It should be sound, such that it only proposes fragments that do not violate the syntactic and static semantic rules of the language. It should be complete, such that it proposes all valid fragments so that code completion can be used to construct all programs. To realize soundness and completeness, code completion should be informed by the language definition. In practice, the implementation of code completion is an additional effort in the implementation of a language.
   In this paper, we develop a framework for language-parametric semantic code completion for statically typed programming languages based on their specification of syntax and static semantics, realizing the implementation of a code completion editor service with minimal additional effort. The framework builds on the SDF3 syntax definition formalism and the Statix static semantics specification language. The algorithm reinterprets the static semantics definition to find sound expansions of predicates and solutions to name resolution queries in scope graphs. This allows a search strategy to explore the solution space and synthesize completion proposals. The implementation of the strategy language and code completion algorithm extend the implementation of the Statix solver, and can be used for any language defined in Statix. We demonstrate soundness and completeness of the completion proposal synthesis, and evaluate its performance.
C1 [Pelsmaeker, Daniel A. A.; van Antwerpen, Hendrik; Poulsen, Casper Bach; Visser, Eelco] Delft Univ Technol, Delft, Netherlands.
C3 Delft University of Technology
RP Pelsmaeker, DAA (corresponding author), Delft Univ Technol, Delft, Netherlands.
EM d.a.a.pelsmaeker@tudelft.nl; h.vanantwerpen@tudelft.nl;
   c.b.poulsen@tudelft.nl; e.visser@tudelft.nl
OI Visser, Eelco/0000-0002-7384-3370; Pelsmaeker,
   Daniel/0000-0003-0196-0567; van Antwerpen, Hendrik/0000-0001-5117-0921;
   Bach Poulsen, Casper/0000-0003-0622-7639
CR Amorim LED, 2020, LECT NOTES COMPUT SC, V12310, P1, DOI 10.1007/978-3-030-58768-0_1
   Appel A.W., 2002, MODERN COMPILER IMPL, V2nd
   Asaduzzaman M, 2016, J SOFTW-EVOL PROC, V28, P512, DOI 10.1002/smr.1791
   Asaduzzaman M, 2014, PROC IEEE INT CONF S, P621, DOI 10.1109/ICSME.2014.110
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Bruch M, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P213, DOI 10.1145/1595696.1595728
   Amorim LED, 2016, PROCEEDINGS OF THE 2016 ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING (SLE'16), P163, DOI 10.1145/2997364.2997374
   Erdweg S, 2014, LECT NOTES COMPUT SC, V8586, P489
   Fowler M, 2005, Language workbenches: The killer-app for domain specific languages?
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Hellendoorn VJ, 2019, PROC INT CONF SOFTW, P960, DOI 10.1109/ICSE.2019.00101
   Jetbrains, 2021, JETBR MPS
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Klint P, 2019, IEEE INT WORK C SO, P139, DOI 10.1109/SCAM.2019.00023
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   Klint Paul, 2010, P 3 INT SUMMER SCH G
   Lindblad F, 2006, LECT NOTES COMPUT SC, V3839, P154
   Lubin J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408991
   Luo Linghui, 2019, 33 EUROPEAN C OBJECT, V21, P1, DOI DOI 10.4230/LIPICS.ECOOP.2019.21,HTTP://DROPS.DAGSTUHL.DE/OPUS/VOLLTEXTE/2019/10813
   McBride C, 2004, LECT NOTES COMPUT SC, V3622, P130
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   McBride Conor, 2000, THESIS U EDINBURGH U
   Neron P, 2015, LECT NOTES COMPUT SC, V9032, P205, DOI 10.1007/978-3-662-46669-8_9
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   Omar C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290327
   Omar C, 2017, ACM SIGPLAN NOTICES, V52, P86, DOI 10.1145/3093333.3009900
   Pacak A, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING (SLE '19), P197, DOI 10.1145/3357766.3359534
   Padhye R, 2019, SPLASH-E'19: PROCEEDINGS OF THE 2019 ACM SIGPLAN SYMPOSIUM ON SPLASH-E, P41, DOI 10.1145/3358711.3361627
   Pelsmaeker A. A., 2019, LIPICS, V134, DOI [10.4230/LIPIcs.ECOOP.2019.26, DOI 10.4230/LIPICS.ECOOP.2019.26]
   Pelsmaeker Daniel A. A., 2022, ARTIFACT LANGUAGE PA, DOI [10.5281/zenodo.6367565, DOI 10.5281/ZENODO.6367565]
   Perelman D, 2012, ACM SIGPLAN NOTICES, V47, P275, DOI 10.1145/2345156.2254098
   Rascal, 2021, TYPEPAL NAM TYP AN M
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2594291.2594321, 10.1145/2666356.2594321]
   Rouvoet A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428248
   Sasano I, 2021, PEPM '21: PROCEEDINGS OF THE 2021 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P32, DOI 10.1145/3441296.3441395
   Schäfer M, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P277
   Soderberg Emma, 2011, P 11 WORKSH LANG DES, DOI [10.1145/1988783.1988794, DOI 10.1145/1988783.1988794]
   Solar-Lezama A, 2009, LECT NOTES COMPUT SC, V5904, P4, DOI 10.1007/978-3-642-10672-9_3
   Steimann F, 2017, SLE'17: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING, P79, DOI 10.1145/3136014.3136034
   Steindorfer Michael, 2017, THESIS U AMSTERDAM
   van Antwerpen H, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276484
   van Antwerpen H, 2016, PEPM'16: PROCEEDINGS OF THE 2016 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P49, DOI 10.1145/2847538.2847543
   Visser Eelco, 1998, ACM INT C FUNCT PROG, DOI DOI 10.1145/289423.289425
   Xtext Team, 2021, XTEXT
NR 44
TC 6
Z9 6
U1 2
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 85
DI 10.1145/3527329
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300021
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Ciccone, L
   Padovani, L
AF Ciccone, Luca
   Padovani, Luca
TI Fair Termination of Binary Sessions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE session types; fair termination; fair subtyping; deadlock freedom
ID LIVENESS
AB A binary session is a private communication channel that connects two processes, each adhering to a protocol description called session type. In this work, we study the first type system that ensures the fair termination of binary sessions. A session fairly terminates if all of the infinite executions admitted by its protocol are deemed lunrealisticz because they violate certain fairness assumptions. Fair termination entails the eventual completion of all pending input/output actions, including those that depend on the completion of an unbounded number of other actions in possibly different sessions. This form of lock freedom allows us to address a large family of natural communication patterns that fall outside the scope of existing type systems. Our type system is also the first to adopt fair subtyping, a liveness-preserving refinement of the standard subtyping relation for session types that so far has only been studied theoretically. Fair subtyping is surprisingly subtle not only to characterize concisely but also to use appropriately, to the point that the type system must carefully account for all usages of fair subtyping to avoid compromising its liveness-preserving properties.
C1 [Ciccone, Luca; Padovani, Luca] Univ Turin, Dipartimento Informat, Turin, Italy.
C3 University of Turin
RP Ciccone, L (corresponding author), Univ Turin, Dipartimento Informat, Turin, Italy.
EM luca.ciccone@unito.it; luca.padovani@unito.it
OI Ciccone, Luca/0000-0001-9515-5280; Padovani, Luca/0000-0001-9097-1297
CR Ancona D, 2017, LECT NOTES COMPUT SC, V10201, P29, DOI 10.1007/978-3-662-54434-1_2
   [Anonymous], 1977, Studies in Logic and the Foundations of Mathematics, DOI [DOI 10.1016/S0049-237X, DOI 10.1016/S0049-237X(08)71120-0, 10.1016/S0049-237X(08)71120-0]
   Apt K. R., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P189, DOI 10.1145/41625.41642
   Baelde D, 2012, ACM T COMPUT LOG, V13, DOI 10.1145/2071368.2071370
   Balzer S, 2019, LECT NOTES COMPUT SC, V11423, P611, DOI 10.1007/978-3-030-17184-1_22
   Bernardi G, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(2:10)2016
   Bidinger P, 2009, THEOR COMPUT SCI, V410, P114, DOI 10.1016/j.tcs.2008.09.014
   Bravetti M, 2021, LECT NOTES COMPUT SC, V12650, P144, DOI 10.1007/978-3-030-71995-1_8
   Bravetti M, 2009, MATH STRUCT COMP SCI, V19, P601, DOI 10.1017/S0960129509007658
   Bugliesi M, 2010, LECT NOTES COMPUT SC, V6194, P76, DOI 10.1007/978-3-642-14458-5_5
   Cacciagrano D, 2007, ELECTRON NOTES THEOR, V175, P3, DOI 10.1016/j.entcs.2006.10.051
   Cacciagrano D, 2009, LOG METH COMPUT SCI, V5, DOI 10.2168/LMCS-5(2:15)2009
   Caires L, 2016, MATH STRUCT COMP SCI, V26, P367, DOI 10.1017/S0960129514000218
   Castagna G, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P219, DOI 10.1145/1599410.1599437
   Ciccone Luca, P 48 INT C AUT LANG, V198, P125
   Cook B, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P265
   COURCELLE B, 1983, THEOR COMPUT SCI, V25, P95, DOI 10.1016/0304-3975(83)90059-2
   Dagnino F, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(1:26)2019
   Dardha O, 2018, LECT NOTES COMPUT SC, V10803, P91, DOI 10.1007/978-3-319-89366-2_5
   Dardha O, 2017, INFORM COMPUT, V256, P253, DOI 10.1016/j.ic.2017.06.002
   Dardha O, 2015, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.190.1
   Demangeon R, 2009, LECT NOTES COMPUT SC, V5700, P250
   Deng YX, 2006, INFORM COMPUT, V204, P1045, DOI 10.1016/j.ic.2006.03.002
   Doumane A., 2017, Theorie de la demonstration infinitaire pour les logiques a points fixes
   Erdweg S, 2015, ACM SIGPLAN NOTICES, V50, P880, DOI [10.1145/2814270.2814277, 10.1145/2858965.2814277]
   Francez Nissim, 1986, Fairness, DOI DOI 10.1007/978-1-4612-4886-6
   Ganty P, 2009, ACM SIGPLAN NOTICES, V44, P102, DOI 10.1145/1594834.1480895
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Gay Simon J., 2016, Lecture Notes in Computer Science, V9600, P95, DOI [DOI 10.1007/978-3-319-30936-1, 10.1007/978-3-319-30936-1_5, DOI 10.1007/978-3-319-30936-1_5]
   Grumberg O., 1984, P 3 ANN ACM S PRINC, P254, DOI [10.1145/800222.806752, DOI 10.1145/800222.806752]
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   Kobayashi N, 2002, INFORM COMPUT, V177, P122, DOI 10.1006/inco.2002.3171
   Kobayashi N, 2006, LECT NOTES COMPUT SC, V4137, P233
   Kobayashi N, 2017, INFORM COMPUT, V252, P48, DOI 10.1016/j.ic.2016.03.004
   Kobayashi N, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1745312.1745313
   KWIATKOWSKA MZ, 1989, INFORM SOFTWARE TECH, V31, P371, DOI 10.1016/0950-5849(89)90159-6
   Lamport L, 2000, DISTRIB COMPUT, V13, P239, DOI 10.1007/PL00008921
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P434, DOI 10.1145/3022670.2951921
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   Natarajan V, 1995, LECT NOTES COMPUT SC, V944, P648
   OWICKI S, 1982, ACM T PROGR LANG SYS, V4, P455, DOI 10.1145/357172.357178
   Padovani L, 2014, IEEE S LOG, DOI 10.1145/2603088.2603116
   Padovani L, 2016, MATH STRUCT COMP SCI, V26, P424, DOI 10.1017/S096012951400022X
   Padovani L, 2014, LECT NOTES COMPUT SC, V8459, P147, DOI 10.1007/978-3-662-43376-8_10
   Padovani L, 2013, LECT NOTES COMPUT SC, V7966, P373, DOI 10.1007/978-3-642-39212-2_34
   Padovani Luca, 2021, FAIRCHECK
   Rensink A, 2007, INFORM COMPUT, V205, P125, DOI 10.1016/j.ic.2006.06.002
   Scalas A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290343
   Tassarotti J, 2017, LECT NOTES COMPUT SC, V10201, P909, DOI 10.1007/978-3-662-54434-1_34
   van Glabbeek R, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470531
   van Glabbeek R, 2019, LECT NOTES COMPUT SC, V11425, P505, DOI 10.1007/978-3-030-17127-8_29
   Van Glabbeek R, 2019, ACM COMPUT SURV, V52, DOI 10.1145/3329125
   Wadler P, 2014, J FUNCT PROGRAM, V24, P384, DOI 10.1017/S095679681400001X
   Yoshida N, 2004, INFORM COMPUT, V191, P145, DOI 10.1016/j.ic.2003.08.004
NR 59
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 5
DI 10.1145/3498666
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900006
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Pujet, L
   Tabareau, N
AF Pujet, Loic
   Tabareau, Nicolas
TI Observational Equality: Now for Good
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type theory; dependent types; rewriting theory; confluence; termination
AB Building on the recent extension of dependent type theory with a universe of definitionally proof-irrelevant types, we introduce TTobs, a new type theory based on the setoidal interpretation of dependent type theory. TTobs equips every type with an identity relation that satisfies function extensionality, propositional extensionality, and definitional uniqueness of identity proofs (UIP). Compared to other existing proposals to enrich dependent type theory with these principles, our theory features a notion of reduction that is normalizing and provides an algorithmic canonicity result, which we formally prove in Agda using the logical relation framework of Abel et al. Our paper thoroughly develops the meta-theoretical properties of TTobs, such as the decidability of the conversion and of the type checking, as well as consistency. We also explain how to extend our theory with quotient types, and we introduce a setoidal version of Swan's Id types that turn it into a proper extension of MLTT with inductive equality.
C1 [Pujet, Loic; Tabareau, Nicolas] INRIA, Gallinette Project Team, Nantes, France.
C3 Inria
RP Pujet, L (corresponding author), INRIA, Gallinette Project Team, Nantes, France.
OI tabareau, nicolas/0000-0003-3366-2273
CR Abel A, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(2:14)2020
   Abel A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158111
   Aczel P., 1978, Logic Colloquium 77, P55, DOI DOI 10.1016/S0049-237X(08)71989-X
   Altenkirch T., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P412, DOI 10.1109/LICS.1999.782636
   Altenkirch T, 2019, LECT NOTES COMPUT SC, V11825, P155, DOI 10.1007/978-3-030-33636-3_7
   Altenkirch T, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P57, DOI 10.1145/1292597.1292608
   Altenkirch Thorsten, 2016, Schloss Dagstuhl-LeibnizZentrum fur Informatik, V62, DOI [10.4230/LIPIcs.CSL.2016.21, DOI 10.4230/LIPICS.CSL.2016.21]
   Capriotti Paolo, 2017, THESIS U NOTTINGHAM
   Cockx J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434341
   Cohen C., 2018, LEIBNIZ INT P INFORM, DOI [DOI 10.4230/LIPICS.TYPES.2015.5, 10.4230/LIPIcs]
   Coquand T, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P255, DOI 10.1145/3209108.3209197
   Dybjer P, 1996, LECT NOTES COMPUT SC, V1158, P120
   Gilbert G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290316
   Girard J.-Y., 1972, PhD thesis
   Hofmann M., 1995, THESIS U EDINBURGH
   Hofmann Martin, 1993, NONSTRICTLY POSITIVE
   Kapulkin Chris, 2018, ARXIV12112851MATHLO
   Lennon-Bertrand Meven, 2021, 12 INT C INTERACTIVE, V193, DOI [10.4230/LIPIcs.ITP.2021.24, DOI 10.4230/LIPICS.ITP.2021.24]
   Martin-Lof P., 1975, STUDIES LOGIC FDN MA, V80, P73
   Sterling Jonathan, 2019, Leibniz International Proceedings in Informatics (LIPIcs), V131, DOI [10.4230/LIPIcs.FSCD.2019.31, DOI 10.4230/LIPICS.FSCD.2019.31]
   Swan A, 2016, J LOG ANAL, V8, DOI 10.4115/jla.2016.8.1
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   Vezzosi A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341691
   Voevodsky V., 2013, A simple type system with two identity types
   Voevodsky V, 2015, THEOR APPL CATEG, V30, P1181
NR 25
TC 9
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 32
DI 10.1145/3498693
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900033
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Vale, AO
   Melliès, PA
   Shao, Z
   Koenig, J
   Stefanesco, L
AF Vale, Arthur Oliveira
   Mellies, Paul-Andre
   Shao, Zhong
   Koenig, Jeremie
   Stefanesco, Leo
TI Layered and Object-Based Game Semantics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE object-based semantics; certified abstraction layers; game semantics;
   program refinement
ID FULL ABSTRACTION; CONCURRENT; VERIFICATION; FUNCTORS
AB Large-scale software verification relies critically on the use of compositional languages, semantic models, specifications, and verification techniques. Recent work on certified abstraction layers synthesizes game semantics, the refinement calculus, and algebraic effects to enable the composition of heterogeneous components into larger certified systems. However, in existing models of certified abstraction layers, compositionality is restricted by the lack of encapsulation of state.
   In this paper, we present a novel game model for certified abstraction layers where the semantics of layer interfaces and implementations are defined solely based on their observable behaviors. Our key idea is to leverage Reddy's pioneer work on modeling the semantics of imperative languages not as functions on global states but as objects with their observable behaviors. We show that a layer interface can be modeled as an object type (i.e., a layer signature) plus an object strategy. A layer implementation is then essentially a regular map, in the sense of Reddy, from an object with the underlay signature to that with the overlay signature. A layer implementation is certified when its composition with the underlay object strategy implements the overlay object strategy. We also describe an extension that allows for non-determinism in layer interfaces.
   After formulating layer implementations as regular maps between object spaces, we move to concurrency and design a notion of concurrent object space, where sequential traces may be identified modulo permutation of independent operations. We show how to express protected shared object concurrency, and a ticket lock implementation, in a simple model based on regular maps between concurrent object spaces.
C1 [Vale, Arthur Oliveira; Shao, Zhong; Koenig, Jeremie] Yale Univ, New Haven, CT 06520 USA.
   [Mellies, Paul-Andre] CNRS, Inst Rech Informat Fondamentale IRIF, Paris, France.
   [Mellies, Paul-Andre] Univ Paris, Paris, France.
   [Stefanesco, Leo] MPI SWS, Saarbrucken, Germany.
C3 Yale University; Centre National de la Recherche Scientifique (CNRS);
   Universite Paris Cite; Universite Paris Cite
RP Vale, AO (corresponding author), Yale Univ, New Haven, CT 06520 USA.
EM arthur.oliveiravale@yale.edu; mellies@irif.fr; zhong.shao@yale.edu;
   jeremie.koenig@yale.edu; leo.stefanesco@mpi-sws.org
OI Koenig, Jeremie/0000-0002-3168-5925; Oliveira Vale,
   Arthur/0000-0003-1091-7560; Shao, Zhong/0000-0001-8184-7649; Mellies,
   Paul-Andre/0000-0001-6180-2275
FU NSF [1521523, 1763399, 2019285, 2118851]; Defense Advanced Research
   Projects Agency (DARPA); Naval Information Warfare Center Pacific (NIWC
   Pacific) [N66001-21-C-4018]; Division of Computing and Communication
   Foundations; Direct For Computer & Info Scie & Enginr [2118851] Funding
   Source: National Science Foundation
FX We would like to thank the anonymous reviewers for their helpful
   feedback. This material is based upon work supported in part by NSF
   grants 2019285, 1763399, 1521523, and 2118851, and by the Defense
   Advanced Research Projects Agency (DARPA) and Naval Information Warfare
   Center Pacific (NIWC Pacific) under Contract No. N66001-21-C-4018. The
   third author is a co-founder of and has an equity interest in CertiK
   Global Ltd. CertiK has licensed Yale University's intellectual property,
   which is related to the NSF grants 1521523 and 1763399. Any opinions,
   findings, and conclusions or recommendations expressed in this material
   are those of the authors and do not necessarily reflect the views of the
   funding agencies.
CR Abramsky S, 2000, INFORM COMPUT, V163, P409, DOI [10.1006/inco.2000.2930, 10.1006/inco2000.2930]
   Abramsky Samson, 1997, LINEARITY SHARING ST, P297, DOI [10.1007/978- 1-4757-3851-3_10, DOI 10.1007/978-1-4757-3851-3_10]
   [Anonymous], 1999, COMPUTATIONAL LOGIC, DOI DOI 10.1007/978-3-642-58622-4
   [Anonymous], 2009, Principles of computer system design: an introduction
   [Anonymous], 2015, DEEPSPEC SCI DEEP SP
   Appel AW, 2017, PHILOS T R SOC A, V375, DOI 10.1098/rsta.2016.0331
   Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Back R.-J., 1999, REFINEMENT CALCULUS, DOI [10.1007/978-1-4612-1674-2, DOI 10.1007/978-1-4612-1674-2]
   BLASS A, 1992, ANN PURE APPL LOGIC, V56, P183, DOI 10.1016/0168-0072(92)90073-9
   Brookes S, 2006, ELECTRON NOTES THEOR, V155, P277, DOI 10.1016/j.entcs.2005.11.060
   Brookes S, 2007, THEOR COMPUT SCI, V375, P227, DOI 10.1016/j.tcs.2006.12.034
   Calderon AC, 2010, ELECTRON NOTES THEOR, V265, P231, DOI 10.1016/j.entcs.2010.08.014
   Cerone A, 2014, LECT NOTES COMPUT SC, V8573, P98
   Chen H, 2016, ACM SIGPLAN NOTICES, V51, P431, DOI [10.1145/2908080.2908101, 10.1145/2980983.2908101]
   Chen HG, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P18, DOI 10.1145/2815400.2815402
   Choi J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110268
   Costanzo D, 2016, ACM SIGPLAN NOTICES, V51, P648, DOI [10.1145/2908080.2908100, 10.1145/2980983.2908100]
   Filipovic I, 2009, LECT NOTES COMPUT SC, V5502, P252, DOI 10.1007/978-3-642-00590-9_19
   Ghica DR, 2008, ANN PURE APPL LOGIC, V151, P89, DOI 10.1016/j.apal.2007.10.005
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Gu RH, 2019, COMMUN ACM, V62, P89, DOI 10.1145/3356903
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Hyland JME, 2000, INFORM COMPUT, V163, P285, DOI [10.1006/inco.2000.2917, 10.1006/inco2000.2917]
   KOCK A, 1972, ARCH MATH, V23, P113, DOI 10.1007/BF01304852
   Koenig J, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1095, DOI 10.1145/3453483.3454097
   Koenig J, 2020, IEEE S LOG, P633, DOI 10.1145/3373718.3394799
   Koenig Jeremie., 2021, P 4 INT C APPL CAT T
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Liu MQ, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371088
   Mazurkiewicz A., 1995, BOOK TRACES, P3, DOI [DOI 10.1142/9789814261456_0001, 10.1142/9789814261456_0001]
   Mellies P., 2009, Panoramas et Syntheses, V27, P15
   Melliès PA, 2020, IEEE S LOG, P742, DOI 10.1145/3373718.3394762
   Melliès PA, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P699, DOI 10.1145/3209108.3209116
   Melliès PA, 2015, ACM SIGPLAN NOTICES, V50, P3, DOI 10.1145/2775051.2676970
   Murawski AS, 2019, J LOG ALGEBR METHODS, V104, P86, DOI 10.1016/j.jlamp.2019.01.002
   Murawski AS, 2014, ACM SIGPLAN NOTICES, V49, P517, DOI 10.1145/2535838
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   O'Hearn PW, 1999, THEOR COMPUT SCI, V228, P253, DOI 10.1016/S0304-3975(98)00360-0
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Plotkin Gordon D., 2001, Lecture Notes in Computer Science, V2030, P1, DOI [10.1007/3-540-45315-6_1, DOI 10.1007/3-540-45315-6_1]
   Reddy U. S., 1996, LISP and Symbolic Computation, V9, P7, DOI 10.1007/BF01806032
   Reddy US, 2013, ELECTRON NOTES THEOR, V298, P325, DOI 10.1016/j.entcs.2013.09.020
   Reddy US, 2012, LECT NOTES COMPUT SC, V7392, P337, DOI 10.1007/978-3-642-31585-5_32
   Reddy Uday S., 1993, Technical Report
   Reddy US, 2002, INFORM COMPUT, V172, P63, DOI 10.1006/inco.2001.2927
   REDDY US, 1994, IEEE S LOG, P342, DOI 10.1109/LICS.1994.316055
   Retore C, 1997, LECT NOTES COMPUT SC, V1210, P300
   Shao Z, 2010, COMMUN ACM, V53, P56, DOI 10.1145/1859204.1859226
   Sjöberg V, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360562
   Vale Arthur Oliveira, 2021, YALEUDCSTR1559
NR 53
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 42
DI 10.1145/3498703
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900043
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Steele, GL
   Vigna, S
AF Steele, Guy L., Jr.
   Vigna, Sebastiano
TI LXM: Better Splittable Pseudorandom Number Generators (and Almost as
   Fast)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE random number generator; pseudorandom; compound generator; mixing
   function; splittable; parallel; concurrent; DotMix; SplitMix; LXM; RNG;
   PRNG
ID SEQUENCES
AB 412014, Steele, Lea, and Flood presented SPHTIMmx, an object -oriented pseudorandom number generator (PRNG) that is quite fast (9 64 -bit aritlimeticllogical operations per 64 bits generated) and also splittable. A couveutioual PRNG object provides a generate method that returns one pseudorandom value and updates the state of the PRNG; a splittable PRNG object also has a second operation, split, that replaces the original PRNG object with two (seemingly) independent PRNG objects, by creating and returning a new such object and updating the state of the original object. Splittable PRNG objects make it easy to organize the use of pseudorandom numbers in iriullithreaded programs structured using fork -join parallelism. This overall strategy still appears to be sound, but the specific arithmetic calculation used for generate in the SPHTMIx algorithm has some detectable weaknesses, arid the period of any one generator is limited to 264. Here we present the LXM family of PRNG algorithms. The idea is an old one: combine the outputs of two independent PRNG algorithms, then (optionally) feed the result to a mixing function. An LXM algoritlun uses a linear congruential subgenerator and an F2 -linear subgenerator; the examples studied in this paper use a,,,linear congruential generator (LCG) of period 216 23Z z-64 or 2128 with one of the multipliers recommended by L'Ecayer or by Steele and Vigna, and an F2 linear xor-based generator (XBG) of the xoshi ro filmily or xorosh i ro family as described by Blackman and Vigna. For mixing functions we study the Murmurflash3 finalizer function; variants by David Stafford; Doug Lea, and degski; and the null (identity) mixing function. Like SpirrMix, LXM provides both a generate operation and a split operation. Also like SpirriMmx, LXM requires no locking or other synchronization (other than the usual memory fence after instance initialization), arid is suitable for use with simp instruction' sets because it has no branches or loops. We analyze the period and equidistribution properties of LXM generators, and present the results of thorough testing of specific members of this family, using the Tes11101 and PractRand test suites, not only on single instances of the algorithm but also for collections of instances, used in parallel, ranging in size from 2 to 224. Single instances of LXM that include a strong mixing function appear to have no major weaknesses, and LXM is significantly more robust thm SpirriVirx against accidental correlation in a multithreaded setting. We believe that LXM, like SPHTMix, is suitable for "everyday" scientific and machine -learning applications (but not cryptographic applications), especially \viten concurrent threads or distributed processes are involved.
C1 [Steele, Guy L., Jr.] Oracle Labs, 35 Network Dr UBUR02-313, Burlington, MA 01803 USA.
   [Vigna, Sebastiano] Univ Milan, Milan, Italy.
C3 Oracle; University of Milan
RP Steele, GL (corresponding author), Oracle Labs, 35 Network Dr UBUR02-313, Burlington, MA 01803 USA.
EM guy.steele@oracle.com; sebastiano.vigna@unimi.it
RI Vigna, Sebastiano/R-5285-2017
CR [Anonymous], 1998, The art of computer programming: Sorting and searching
   Appleby, 2011, MURMURHASH3 PROJECT
   Appleby, 2016, SMHASHER GITHUB PROJ
   Bassham L. E., 2010, SPECIAL PUBLICATION
   Bauer David, 2003, DIEHARDER RANDOM NUM
   BLUM L, 1986, SIAM J COMPUT, V15, P364, DOI 10.1137/0215025
   BLUM M, 1984, SIAM J COMPUT, V13, P850, DOI 10.1137/0213053
   Brent R.P., 2004, Journal of statistical software, V11, P1, DOI DOI 10.18637/JSS.V011.I05
   Brent Richard P., 2010, SOME LONG PERIOD RAN
   Claessen K, 2013, ACM SIGPLAN NOTICES, V48, P47, DOI 10.1145/2503778.2503784
   Coveyou R.R., 1969, Studies in applied mathematics, V3, P70
   COVEYOU RR, 1967, J ACM, V14, P100, DOI 10.1145/321371.321379
   Doty-Humphrey, 2011, PRACTRAND 2011 2021
   DURST MJ, 1989, 1989 WINTER SIMULATION CONFERENCE PROCEEDINGS, P462, DOI 10.1109/WSC.1989.718715
   Engelberg Shlomo., 2015, SERIES ELECT COMPUTE, V4
   Ettinger Tommy., 2019, PELICANRNG 0716
   Evensen Pelle, 2020, NASAM NOT ANOTHER ST
   Evensen Pelle, 2019, BETTER STRONGER MIXE
   Evensen Pelle, 2018, MIXING FUNCTIONS FAS
   FORSYTHE GE, 1951, NAT BUR STAND APP 12, P34
   Germond, 1951, NBS APPL MATH SERIES, V12
   Golomb S. W., 2017, Shift Register Sequences: Secure and Limited-AccessCode Generators, Efficiency Code Generators, Prescribed PropertyGenerators, Mathematical Models, V3rd, DOI [10.1142/9361, DOI 10.1142/9361]
   Golomb SW, 2006, LECT NOTES COMPUT SC, V4086, P1
   Goresky M., 2012, Algebraic Shift Register Sequences
   L'ecuyer P, 1999, MATH COMPUT, V68, P249, DOI 10.1090/S0025-5718-99-00996-5
   L'Ecuyer P, 2003, MATH COMPUT SIMULAT, V62, P395, DOI 10.1016/S0378-4754(02)00234-3
   L'Ecuyer P, 1999, OPER RES, V47, P159, DOI 10.1287/opre.47.1.159
   L'Ecuyer P, 2007, ACM T MATH SOFTWARE, V33, DOI 10.1145/1268776.1268777
   L'Ecuyer P, 2017, WINT SIMUL C PROC, P202, DOI 10.1109/WSC.2017.8247790
   L'Ecuyer P, 2009, INT SER OPER RES MAN, V133, P169, DOI 10.1007/b110059_9
   Lea, 2013, COMMUNICATION
   LEcuyer P, 2013, TESTU01 SOFTWARE LIB
   Lehmer Derrick H, 1951, Annu. Comput. Lab. Harvard Univ., V26, P141
   Leiserson CE, 2012, ACM SIGPLAN NOTICES, V47, P193, DOI 10.1145/2370036.2145841
   Losego, 2016, YOUTUBE
   MACLAREN MD, 1965, J ACM, V12, P83, DOI 10.1145/321250.321257
   MARSAGLIA G, 1968, P NATL ACAD SCI USA, V61, P25, DOI 10.1073/pnas.61.1.25
   Marsaglia G., 1985, Computer Science and Statistics. Proceedings of the Sixteenth Symposium on the Interface, P3
   Marsaglia G., 1995, The Marsaglia random number CDROM including the diehard battery of tests of randomness
   Marsaglia G., 2003, Journal of Statistical Software, V8, P1, DOI DOI 10.18637/JSS.V008.I18
   Marsaglia G., 2002, J. Stat. Software, V7, P1, DOI DOI 10.18637/JSS.V007.I03
   Marsaglia George., 1993, The KISS generator
   Mulvey Bret., 2016, HASH FUNCTIONS
   Nintendo, 1990, SUPER MARIO WORLD VI
   Oracle, 2014, INT SPLIT
   Oracle Corporation, 2014, JAV PLATF STAND ED D
   Rose GG, 2018, CRYPTOGR COMMUN, V10, P123, DOI 10.1007/s12095-017-0225-x
   ROTENBERG A, 1960, J ACM, V7, P75, DOI 10.1145/321008.321019
   Rukhin Andrew L., 2001, A statistical test suite for random and pseudorandom number generators for cryptographic applications, V22
   Salmon John K, 2011, P 2011 INT C HIGH PE, P1, DOI DOI 10.1145/2063384.2063405
   Schaathun HG, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S095679681500012X
   Sebastiano Vigna., 2018, SCRAMBLED LINEAR PSE
   Simard Richard, 2009, TESTU01 VERSION 1 2
   Steele GL, 2014, ACM SIGPLAN NOTICES, V49, P453, DOI [10.1145/2714064.2660195, 10.1145/2660193.2660195]
   THOMSON WE, 1958, COMPUT J, V1, P83, DOI 10.1093/comjnl/1.2.83
   Vigna, 2021, COMPUTATIONALLY EASY, DOI [10.1002/spe.3030, DOI 10.1002/SPE.3030]
   Vigna Sebastiano, 2014, XOSHIRO XOROSHIRO GE
   von Neumann J., 1951, NBS Applied Mathematics Series, V12, P36
   Walker John., 1996, Hotbits - genuine random numbers
   Warnock, 1983, C NUMER, V37, P135
   Warren H., 2012, Hacker's delight, V2nd
   Wellons Chris., 2018, PROSPECTING HASH FUN
   Wellons Christopher., 2019, HASH FUNCTION PROSPE
   Wolfram Stephen, 2016, SOLOMON GOLOMB 1932S
NR 64
TC 2
Z9 2
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 148
DI 10.1145/3485525
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200051
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Fromherz, A
   Rastogi, A
   Swamy, N
   Gibson, S
   Martínez, G
   Merigoux, D
   Ramananandro, T
AF Fromherz, Aymeric
   Rastogi, Aseem
   Swamy, Nikhil
   Gibson, Sydney
   Martinez, Guido
   Merigoux, Denis
   Ramananandro, Tahina
TI Steel: Proof-Oriented Programming in a Dependently Typed Concurrent
   Separation Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Proofs; Separation Logic; Concurrency
AB Steel is a language for developing and proving concurrent programs embedded in F*, a dependently typed programming language and proof assistant. Based on SteelCore, a concurrent separation logic (CSL) formalized in F*, our work focuses on exposing the proof rules of the logic in a form that enables programs and proofs to be effectively co-developed.
   Our main contributions include a new formulation of a Hoare logic of quintuples involving both separation logic and first-order logic, enabling efficient verification condition (VC) generation and proof discharge using a combination of tactics and SMT solving. We relate the VCs produced by our quintuple system to solving a system of associativity-commutativity (AC) unification constraints and develop tactics to (partially) solve these constraints using AC-matching modulo SMT-dischargeable equations.
   Our system is fully mechanized and implemented in F*. We evaluate it by developing several verified programs and libraries, including various sequential and concurrent linked data structures, proof libraries, and a library for 2-party session types. Our experience leads us to conclude that our system enables a mixture of automated and interactive proof, making it productive to build programs foundationally verified against a highly expressive, state-of-the-art CSL.
C1 [Fromherz, Aymeric; Gibson, Sydney] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Rastogi, Aseem] Microsoft Res, Bengaluru, Karnataka, India.
   [Swamy, Nikhil; Ramananandro, Tahina] Microsoft Res, Redmond, WA USA.
   [Martinez, Guido] Consejo Nacl Invest Cient & Tecn, CIFASIS, Buenos Aires, DF, Argentina.
   [Merigoux, Denis] Inria Paris, Paris, France.
C3 Carnegie Mellon University; Microsoft; Consejo Nacional de
   Investigaciones Cientificas y Tecnicas (CONICET)
RP Fromherz, A (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
OI Martinez, Guido/0009-0005-5831-9991; Merigoux, Denis/0000-0003-2247-0938
FU Intel Corporation; Alfred P. Sloan Foundation; Department of the Navy,
   Office of Naval Research [N00014-18-1-2892]; European Research Council
   under the CIRCUS Consolidator Grant Agreement [683032]; National Science
   Foundation Graduate Research Fellowship Program [DGE1745016]; European
   Research Council (ERC) [683032] Funding Source: European Research
   Council (ERC)
FX Aymeric Fromherz's and Sydney Gibson's work was supported in part by
   grants from the Intel Corporation, the Alfred P. Sloan Foundation, and
   the Department of the Navy, Office of Naval Research under Grant No.
   N00014-18-1-2892. Aymeric Fromherz was also supported in part by an
   internship at Microsoft Research. Sydney Gibson was also funded by the
   National Science Foundation Graduate Research Fellowship Program under
   Grant No. DGE1745016. Denis Merigoux's work was partially supported by
   the European Research Council under the CIRCUS Consolidator Grant
   Agreement (683032). We thank Ralf Jung, the shepherd of this paper; the
   anonymous reviewers; Deepak Kapur for insightful discussions about
   AC-unification, and all the members of Project Everest for their
   feedback and many useful discussions.
CR APPEL AW, 2011, P 20 EUR C PROGR LAN
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Brady Edwin., 2016, TYPE DRIVEN DEV IDRI
   Brotherston J., 2012, Programming Languages and Systems, V7705, P350, DOI [10.1007/978-3-642-35182-225, 10.1007/978-3-642-35182-2_25]
   Chargueraud A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P418
   Chlipala Adam, 2011, MOSTLY AUTOMATED VER, DOI [10.1145/1993498.1993526, DOI 10.1145/1993498.1993526]
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Ebner G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110278
   FAGES F, 1984, LECT NOTES COMPUT SC, V170, P194
   Garg, PROGRAMMING LANGUAGE
   Gonthier G., 2016, RR6455 INR SACL FRAN
   Hinrichsen JK, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371074
   Hobor A, 2013, ACM SIGPLAN NOTICES, V48, P523, DOI 10.1145/2480359.2429131
   IOSIF R, 2014, AUTOMATED TECHNOLOGY
   ISHTIAQ SS, 2001, POPL 2001 28 ACM SIG
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Kapur Deepak., 1987, ACM SIGSAM B, V21, P6, DOI DOI 10.1145/36330.36332
   LEINO KRM, 2009, FDN SECURITY ANAL DE, V5705
   MARTINEZ G, 2019, 28 EUR S PROGR ESOP
   Michael M. M., 1996, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, P267, DOI 10.1145/248052.248106
   MULLER P, 2016, VERIFICATION MODEL C, V9583
   Nanevski A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360587
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   Nelson G., 1979, ACM Transactions on Programming Languages and Systems, V1, P245, DOI 10.1145/357073.357079
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   OWICKI S, 1976, COMMUN ACM, V19, P279, DOI 10.1145/360051.360224
   Parkinson MJ, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(3:01)2012
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Rustan K, 2010, USABLE AUTOACTIVE VE
   Swamy, 2020, IN PRESS
   Swamy N, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409003
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   Vindum SF, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P76, DOI 10.1145/3437992.3439930
   Yang H, 2008, LECT NOTES COMPUT SC, V5123, P385
NR 37
TC 8
Z9 9
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 85
DI 10.1145/3473590
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800025
OA gold
DA 2024-07-18
ER

PT J
AU Germane, K
   McCarthy, J
AF Germane, Kimball
   McCarthy, Jay
TI Newly-Single and Loving It: Improving Higher-Order Must-Alias Analysis
   with Heap Fragments
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE control-flow analysis; must-alias analysis; abstract counting; heap
   fragments
AB Theories of higher-order must-alias analysis, often under the guise of environment analysis, provide deep behavioral insight. But these theories-in particular those that are most insightful otherwise-can reason about recursion only in limited cases. This weakness is not inherent to the theories but to the frameworks in which they're defined: machine models which thread the heap through evaluation. Since these frameworks allocate each abstract resource in the heap, the constituent theories of environment analysis conflate co-live resources identified in the abstract, such as recursively-created bindings. We present heap fragments as a general technique to allow these theories to reason about recursion in a general and robust way. We instantiate abstract counting in a heap-fragment framework and compare its performance to a precursor entire-heap framework. We also sketch an approach to realizing binding invariants, a more powerful environment analysis, in the heap-fragment framework.
C1 [Germane, Kimball] Brigham Young Univ, Provo, UT 84602 USA.
   [McCarthy, Jay] Univ Massachusetts Lowell, Lowell, MA USA.
C3 Brigham Young University; University of Massachusetts System; University
   of Massachusetts Lowell
RP Germane, K (corresponding author), Brigham Young Univ, Provo, UT 84602 USA.
EM kimball@cs.byu.edu
OI Germane, Kimball/0000-0003-4903-5645
CR BERGSTROM L, 2014, P 19 ACM SIGPLAN INT, DOI DOI 10.1145/2628136
   CHASE DR, 1990, SIGPLAN NOTICES, V25, P296, DOI 10.1145/93548.93585
   Darais D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110256
   Darais David Charles, 2017, THESIS U MARYLAND US, DOI [10.13016/M2J96097D, DOI 10.13016/M2J96097D]
   Earl C, 2012, ACM SIGPLAN NOTICES, V47, P177, DOI 10.1145/2398856.2364576
   FACCHINETTI L, 2017, P LECT NOTES COMP SC, V422
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Germane K, 2020, LECT NOTES COMPUT SC, V12075, P197, DOI 10.1007/978-3-030-44914-8_8
   Germane K, 2017, ACM SIGPLAN NOTICES, V52, P19, DOI 10.1145/3093333.3009899
   Gilray T, 2016, ACM SIGPLAN NOTICES, V51, P407, DOI 10.1145/3022670.2951936
   Gilray T, 2016, ACM SIGPLAN NOTICES, V51, P691, DOI 10.1145/2914770.2837631
   Jagannathan S., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P329, DOI 10.1145/268946.268973
   Johnson JI, 2015, ACM SIGPLAN NOTICES, V50, P11, DOI 10.1145/2661088.2661098
   Might Matthew, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P185, DOI 10.1145/1190216.1190247
   MIGHT M, 2009, P 10 INT C VER METH, DOI DOI 10.1007/978-3-540-93900-9_22
   Might M., 2006, P 11 ACM SIGPLAN INT, P13, DOI DOI 10.1016/J.TCS.2006.12.031
   Might M., 2006, C RECORD 33 ACM S PR, P127
   Might M, 2007, LECT NOTES COMPUT SC, V4349, P59
   Might M, 2010, LECT NOTES COMPUT SC, V5944, P263
   Might Matthew, 2007, Ph.D. Dissertation
   PALSBERG J, 1995, ACM T PROGR LANG SYS, V17, P47, DOI 10.1145/200994.201001
   SABRY A, 1994, SIGPLAN NOTICES, V29, P1, DOI 10.1145/773473.178244
   Sestoft Peter., 1989, FPCA 89, P39, DOI DOI 10.1145/99370.99374
   SHIVERS O, 1988, SIGPLAN NOTICES, V23, P164, DOI 10.1145/960116.54007
   Shivers O. G., 1991, THESIS CARNEGIE MELL
   Shivers O, 2006, ACM SIGPLAN NOTICES, V41, P295, DOI 10.1145/1133981.1134016
   Steckler PA, 1997, ACM T PROGR LANG SYS, V19, P48, DOI 10.1145/239912.239915
   VANHORN D, 2010, P 15 ACM SIGPLAN INT, DOI DOI 10.1145/1863543.1863553
   Vardoulakis D, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P69
   Vardoulakis D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:3)2011
   Wei GN, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236800
NR 31
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 96
DI 10.1145/3473601
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800036
OA gold
DA 2024-07-18
ER

PT J
AU Lim, JP
   Aanjaneya, M
   Gustafson, J
   Nagarakatte, S
AF Lim, Jay P.
   Aanjaneya, Mridul
   Gustafson, John
   Nagarakatte, Santosh
TI An Approach to Generate Correctly Rounded Math Libraries for New
   Floating Point Variants
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE floating point; posits; correctly rounded math libraries
AB Given the importance of floating point (FP) performance in numerous domains, several new variants of FP and its alternatives have been proposed (e.g., Bfloat16, TensorFloat32, and posits). These representations do not have correctly rounded math libraries. Further, the use of existing FP libraries for these new representations can produce incorrect results. This paper proposes a novel approach for generating polynomial approximations that can be used to implement correctly rounded math libraries. Existing methods generate polynomials that approximate the real value of an elementary function f(x) and produce wrong results due to approximation errors and rounding errors in the implementation. In contrast, our approach generates polynomials that approximate the correctly rounded value of f(x) (i.e., the value of f(x) rounded to the target representation). It provides more margin to identify efficient polynomials that produce correctly rounded results for all inputs. We frame the problem of generating efficient polynomials that produce correctly rounded results as a linear programming problem. Using our approach, we have developed correctly rounded, yet faster, implementations of elementary functions for multiple target representations.
C1 [Lim, Jay P.; Aanjaneya, Mridul; Nagarakatte, Santosh] Rutgers State Univ, Comp Sci, New Brunswick, NJ 08901 USA.
   [Gustafson, John] Natl Univ Singapore, Comp Sci, Singapore, Singapore.
C3 Rutgers University System; Rutgers University New Brunswick; National
   University of Singapore
RP Lim, JP (corresponding author), Rutgers State Univ, Comp Sci, New Brunswick, NJ 08901 USA.
EM jpl169@cs.rutgers.edu; mridul.aanjaneya@rutgers.edu;
   john.gustafson@nus.edu.sg; santosh.nagarakatte@cs.rutgers.edu
OI Aanjaneya, Mridul/0000-0002-5286-8173; Lim, Jay/0000-0002-7572-4017;
   Nagarakatte, Santosh/0000-0002-5048-8548
FU National Science Foundation [1908798, 1917897, 1453086]; Direct For
   Computer & Info Scie & Enginr; Division of Computing and Communication
   Foundations [1908798] Funding Source: National Science Foundation;
   Direct For Computer & Info Scie & Enginr; Division of Computing and
   Communication Foundations [1917897, 1453086] Funding Source: National
   Science Foundation
FX We thank the POPL reviewers for their feedback. This material is based
   upon work supported by the National Science Foundation under Grant No.
   1908798, Grant No. 1917897, and Grant No. 1453086. Any opinions,
   findings, and conclusions or recommendations expressed in this material
   are those of the authors and do not necessarily reflect the views of the
   National Science Foundation.
CR [Anonymous], 1980, Software Manual for the Elementary Functions
   [Anonymous], 2008, LIBMCR 3"16 February 2008""libmcr-0.9"
   [Anonymous], 2020, TensorFloat-32 in the A100 GPU Accelerates AI Training, HPC up to 20x
   [Anonymous], 2013, Approximation theory and approximation practice
   Arzelier D, 2019, P S COMP ARITHM, P30, DOI 10.1109/ARITH.2019.00014
   Benz F, 2012, ACM SIGPLAN NOTICES, V47, P453, DOI 10.1145/2345156.2254118
   Boldo S, 2009, IEEE T COMPUT, V58, P1139, DOI 10.1109/TC.2008.216
   Borwein P, 1995, Graduate Texts in Mathematics, V161, DOI 10.1007/978-1-4612-0793-1
   Brisebarre N, 2007, P S COMP ARITHM, P169, DOI 10.1109/ARITH.2007.17
   Brisebarre N, 2006, ACM T MATH SOFTWARE, V32, P236, DOI 10.1145/1141885.1141890
   Brunie N, 2015, P S COMP ARITHM, P66, DOI 10.1109/ARITH.2015.22
   Bui H., 1999, Engineering Solutions for the Next Millennium. 1999 IEEE Canadian Conference on Electrical and Computer Engineering (Cat. No.99TH8411), P450, DOI 10.1109/CCECE.1999.807240
   Chevillard S, 2011, THEOR COMPUT SCI, V412, P1523, DOI 10.1016/j.tcs.2010.11.052
   Chevillard S, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P153, DOI 10.1109/QSIC.2007.4385491
   Chevillard S, 2010, LECT NOTES COMPUT SC, V6327, P28, DOI 10.1007/978-3-642-15582-6_5
   Chowdhary S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P731, DOI 10.1145/3385412.3386004
   Damouche Nasrine, 2017, Kalpa Publications in Computing, V5, P63, DOI DOI 10.29007/J2FD
   Daramy C, 2003, P SOC PHOTO-OPT INS, V5205, P458, DOI 10.1117/12.505591
   Daumas M, 2005, P S COMP ARITHM, P188, DOI 10.1109/ARITH.2005.25
   de Dinechin F., 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P1318, DOI 10.1145/1141277.1141584
   de Dinechin F, 2011, IEEE T COMPUT, V60, P242, DOI 10.1109/TC.2010.128
   Fousse L, 2007, ACM T MATH SOFTWARE, V33, DOI 10.1145/1236463.1236468
   Fu ZL, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P439, DOI 10.1145/3314221.3314632
   Gleixner AM, 2012, P 37 INT S SYMB ALG, P187, DOI DOI 10.1145/2442829.2442858
   Gleixner AM, 2016, INFORMS J COMPUT, V28, P449, DOI 10.1287/ijoc.2016.0692
   Goubault E, 2001, LECT NOTES COMPUT SC, V2126, P234
   Gustafson JL, 2017, Mathematica Notebook Describing the Posit Number System, V30
   Gustafson John., 2020, The Minefield Method: A Uniformly Fast Solution to the Table-Maker's Dilemma
   Gustafson John L., 2017, [Supercomputing Frontiers and Innovations, Supercomputing Frontiers and Innovations], V4, P71
   Harrison J., 1997, Algebraic Methodology and Software Technology. 6th International Conference, AMAST '97. Proceedings, P246, DOI 10.1007/BFb0000475
   Harrison J., 1997, Theorem Proving in Higher Order Logics. 10th International Conference, TPHOLs'97 Proceedings, P137, DOI 10.1007/BFb0028391
   Harrison J, 2009, LECT NOTES COMPUT SC, V5674, P60, DOI 10.1007/978-3-642-03359-9_4
   IBM, 2008, ACC PORT MATHLIB
   Intel, 2019, DEL NEW INT AI SCAL
   Jeannerod CP, 2011, IEEE T COMPUT, V60, P214, DOI 10.1109/TC.2010.152
   Johnson Jeff., 2018, RETHINKING FLOATING
   Kahan William, 2004, A Logarithm Too Clever by Half
   Kalamkar Dhiraj., 2019, A study of bfloat16 for deep learning training
   Kupriianova Olga, 2014, Mathematical Software - ICMS 2014. 4th International Congress. Proceedings. LNCS: 8592, P713, DOI 10.1007/978-3-662-44199-2_106
   Lee W, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158135
   Lefevre V, 1998, IEEE T COMPUT, V47, P1235, DOI 10.1109/12.736435
   Lefèvre V, 2001, P S COMP ARITHM, P111, DOI 10.1109/ARITH.2001.930110
   Leong Cerlane., 2019, SoftPosit-Math
   Lim JP, 2020, 17TH ACM INTERNATIONAL CONFERENCE ON COMPUTING FRONTIERS 2020 (CF 2020), P19, DOI 10.1145/3387902.3392632
   Lim Jay P., ARXIV200705344CSMS
   Lim JayP., 2020, RLibm
   Lim JayP., 2020, RLibm-generator
   Melquiond Guillaume., 2019, Gappa
   Muller Jean-Michel, 2016, Elementary Functions: Algorithms and Implementation, V3, DOI DOI 10.1007/978-1-4899-7983-4
   Panchekha P, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI 10.1145/2737924.2737959
   Remes E, 1934, CR HEBD ACAD SCI, V198, P2063
   Sanchez-Stern A, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P256, DOI [10.1145/3192366.3192411, 10.1145/3296979.3192411]
   Sawada Jun., 2002, 3 INT WORKSHOP ACL2
   Tagliavini G, 2018, DES AUT TEST EUROPE, P1051, DOI 10.23919/DATE.2018.8342167
   TANG PTP, 1990, ACM T MATH SOFTWARE, V16, P378, DOI 10.1145/98267.98294
   Wang S, 2019, BFLOAT16 SECRET HIGH
   Yi X, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290369
   ZIV A, 1991, ACM T MATH SOFTWARE, V17, P410, DOI 10.1145/114697.116813
   Zou DM, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371128
   Zuras D., 2008, 7542008 IEEE, V754-2008, P1, DOI [DOI 10.1109/IEEESTD.2008.4610935, DOI 10.1109/IEEESTD.2008.5976968]
NR 60
TC 11
Z9 13
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 29
DI 10.1145/3434310
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100029
OA gold
DA 2024-07-18
ER

PT J
AU Gavran, I
   Darulova, E
   Majumdar, R
AF Gavran, Ivan
   Darulova, Eva
   Majumdar, Rupak
TI Interactive Synthesis of Temporal Specifications from Examples and
   Natural Language
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE specification; program synthesis; natural language processing; LTL;
   robots
AB Motivated by applications in robotics, we consider the task of synthesizing linear temporal logic (LTL) specifications based on examples and natural language descriptions. While LTL is a flexible, expressive, and unambiguous language to describe robotic tasks, it is often challenging for non-expert users. In this paper, we present an interactive method for synthesizing LTL specifications from a single example trace and a natural language description. The interaction is limited to showing a small number of behavioral examples to the user who decides whether or not they exhibit the original intent. Our approach generates candidate LTL specifications and distinguishing examples using an encoding into optimization modulo theories problems. Additionally, we use a grammar extension mechanism and a semantic parser to generalize synthesized specifications to parametric task descriptions for subsequent use. Our implementation in the tool LTLTALK starts with a domain-specific language that maps to a fragment of LTL and expands it through example-based user interactions, thus enabling natural language-like robot programming, while maintaining the expressive power and precision of a formal language. Our experiments show that the synthesis method is precise, quick, arid asks only a few questions to the users, and we demonstrate in a case study how LTLTALK generalizes from the synthesized tasks to other, yet unseen, tasks.
C1 [Gavran, Ivan; Darulova, Eva; Majumdar, Rupak] Max Planck Inst Software Syst, Kaiserslautern, Germany.
C3 Max Planck Society
RP Gavran, I (corresponding author), Max Planck Inst Software Syst, Kaiserslautern, Germany.
EM gavran@mpi-sws.org; eva@mpi-sws.org; rupak@rimi-sws.org
RI Darulova, Eva/AAV-5935-2021
OI Darulova, Eva/0000-0002-6848-3163
FU Deutsche Forschungsgemeinschaft [389792660 TRR 248-CPEC]; European
   Research Council (ERC) [610150]
FX The authors want to thank Eman Eman and Chuntong Gao for their work on
   improving the LtlTalk interface. This research was partially funded by
   the Deutsche Forschungsgemeinschaft project 389792660 TRR 248-CPEC (see
   https://perspicuous-computing.science) and by the European Research
   Council under the Grant Agreement 610150 (http://www.impact-erc.eu/)
   (ERC Synergy Grant ImPACT).
CR Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   An S., 2020, P ACM PROGRAM LANG, V4, DOI DOI 10.1145/3371124
   ANGLUIN D, 1987, INFORM COMPUT, V75, P87, DOI 10.1016/0890-5401(87)90052-6
   Artzi Yoav, 2016, ARXIVARXIV13113011
   Bartocci Ezio, 2013, ABS13127523 CORR
   Beltagy I, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P726
   Biere A, 2006, LOG METH COMPUT SCI, V2, DOI 10.2168/LMCS-2(5:5)2006
   Bjorner N., 2015, Tools and Algorithms for the Construction and Analysis of Systems, V9035, P194, DOI DOI 10.1007/978-3-662-46681-0
   Camacho A., 2019, ICAPS, P621, DOI DOI 10.1609/ICAPS.V29I1.3529
   Cassel S, 2016, FORM ASP COMPUT, V28, P233, DOI 10.1007/s00165-016-0355-5
   Chen QC, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P487, DOI 10.1145/3385412.3385988
   Chen YJ, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P602, DOI 10.1145/3338906.3338951
   Cobleigh JM, 2003, LECT NOTES COMPUT SC, V2619, P331
   De Giacomo G, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P1558
   De Giacomo Giuseppe., International Joint Conference on Artificial Intelligence, IJCAI. IJCAI/AAAI, P854, DOI DOI 10.5555/2540128.2540252
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Desai A, 2016, PROC INT CONF SOFTW, P345, DOI 10.1145/2884781.2884786
   Drachsler-Cohen D, 2017, LECT NOTES COMPUT SC, V10426, P254, DOI 10.1007/978-3-319-63387-9_13
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   FIKES RE, 1971, ARTIF INTELL, V2, P189, DOI 10.1016/0004-3702(71)90010-5
   Gavran I, 2017, ACM T EMBED COMPUT S, V16, DOI 10.1145/3126513
   Ghallab M., 1998, AIPS- 98 planning committee
   GOLD EM, 1967, INFORM CONTROL, V10, P447, DOI 10.1016/S0019-9958(67)91165-5
   Gulwani S, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P803, DOI 10.1145/2588555.2612177
   Holzmann G. J., 2002, Software Engineering Notes, V27, P81, DOI 10.1145/605466.605479
   Jin XQ, 2015, IEEE T COMPUT AID D, V34, P1704, DOI 10.1109/TCAD.2015.2421907
   Kim J, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P5591
   Kollar T, 2013, IEEE INT CONF ROBOT, P4304, DOI 10.1109/ICRA.2013.6631186
   Kong ZD, 2017, IEEE T AUTOMAT CONTR, V62, P1210, DOI 10.1109/TAC.2016.2585083
   Kong Zhaodan, 2014, P 17 INT C HYBRID SY, P273, DOI [10.1145/2562059.2562146, DOI 10.1145/2562059.2562146]
   Kress-Gazit H, 2009, IEEE T ROBOT, V25, P1370, DOI 10.1109/TRO.2009.2030225
   Kress-Gazit H, 2008, ADV ROBOTICS, V22, P1343, DOI 10.1163/156855308X344864
   Levesque HJ, 1997, J LOGIC PROGRAM, V31, P59, DOI 10.1016/S0743-1066(96)00121-5
   Li F, 2014, PROC VLDB ENDOW, V8, P73, DOI 10.14778/2735461.2735468
   Lignos C, 2015, AUTON ROBOT, V38, P89, DOI 10.1007/s10514-014-9418-8
   Manning CD, 2014, PROCEEDINGS OF 52ND ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: SYSTEM DEMONSTRATIONS, P55, DOI 10.3115/v1/p14-5010
   Manshadi Mehdi Hafezi, 2013, C ART INT AAAI
   Mayer M, 2015, UIST'15: PROCEEDINGS OF THE 28TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P291, DOI 10.1145/2807442.2807459
   MILLER GA, 1995, COMMUN ACM, V38, P39, DOI 10.1145/219717.219748
   Mohammadinejad S, 2020, PROCEEDINGS OF THE 23RD INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL (HSCC2020) (PART OF CPS-IOT WEEK), DOI 10.1145/3365365.3382218
   Neider D., 2018, FORMAL METHODS COMPU, P1, DOI DOI 10.23919/FMCAD.2018.8603016
   Nowozin Sebastian, 2017, INT C LEARN REPR
   Nye M, 2019, PR MACH LEARN RES, V97
   Peleg H, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1114, DOI 10.1145/3180155.3180189
   Perera V, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P1177
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Polosukhin I., 2018, INT C LEARN REPR ICL
   Raza M, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P792
   Saha I, 2016, ACM IEEE INT CONF CY
   Singh R, 2015, LECT NOTES COMPUT SC, V9206, P398, DOI 10.1007/978-3-319-21690-4_23
   Thomason J, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P1923
   Vazquez-Chanlatte M, 2018, 32 C NEURAL INFORM P, V31
   Veloso Manuela M., 2014, AUTONOMOUS AGENTS MU
   Wang C, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1631, DOI 10.1145/3035918.3058738
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang SI, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P929, DOI 10.18653/v1/P17-1086
   Yaghmazadeh N, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133887
NR 57
TC 5
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 201
DI 10.1145/3428269
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900078
OA gold
DA 2024-07-18
ER

PT J
AU Gómez-Londoño, A
   Pohjola, JÅ
   Syeda, HT
   Myreen, MO
   Tan, YK
AF Gomez-Londono, Alejandro
   Pohjola, Johannes Aman
   Syeda, Hira Taqdees
   Myreen, Magnus O.
   Tan, Yong Kiam
TI Do You Have Space for Dessert? A Verified Space Cost Semantics for
   CakeML Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compiler verification; cost semantics; space usage; garbage collection
AB Garbage collectors relieve the programmer from manual memory management, but lead to compiler-generated machine code that can behave differently (e.g. out-of-memory errors) from the source code. To ensure that the generated code behaves exactly like the source code, programmers need a way to answer questions of the form: what is a sufficient amount of memory for my program to never reach an out-of-memory error?
   This paper develops a cost semantics that can answer such questions for CakeML programs. The work described in this paper is the first to be able to answer such questions with proofs in the context of a language that depends on garbage collection. We demonstrate that positive answers can be used to transfer liveness results proved for the source code to liveness guarantees about the generated machine code. Without guarantees about space usage, only safety results can be transferred from source to machine code.
   Our cost semantics is phrased in terms of an abstract intermediate language of the CakeML compiler, but results proved at that level map directly to the space cost of the compiler-generated machine code. All of the work described in this paper has been developed in the HOL4 theorem prover.
C1 [Gomez-Londono, Alejandro; Syeda, Hira Taqdees; Myreen, Magnus O.] Chalmers Univ Technol, Gothenburg, Sweden.
   [Pohjola, Johannes Aman] CSIRO, Data61, Sydney, NSW, Australia.
   [Pohjola, Johannes Aman] Univ New South Wales, Sydney, NSW, Australia.
   [Tan, Yong Kiam] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Chalmers University of Technology; Commonwealth Scientific & Industrial
   Research Organisation (CSIRO); University of New South Wales Sydney;
   Carnegie Mellon University
RP Gómez-Londoño, A (corresponding author), Chalmers Univ Technol, Gothenburg, Sweden.
EM gomez@chalmers.se; Johannes.Amanpohjola@data61.csiro.au;
   hira@chalmers.se; myreen@chalmers.se; yongkiat@cs.cmu.edu
OI Syeda, Hira Taqdees/0000-0002-4923-3783; Gomez-Londono,
   Alejandro/0000-0003-0787-124X
FU Swedish Foundation for Strategic Research; Defense Advanced Research
   Projects Agency (DARPA); Wallenberg AI, Autonomous Systems and Software
   Program, Sweden
FX We thank Thomas Sewell for help with proofs. This research was supported
   with funding from the Swedish Foundation for Strategic Research;
   Wallenberg AI, Autonomous Systems and Software Program, Sweden; and the
   Defense Advanced Research Projects Agency (DARPA). The views, opinions
   and/or findings expressed are those of the authors and should not be
   interpreted as representing the official views or policies of the
   Department of Defense or the U.S. Government.
CR Abrahamsson O, 2018, LECT NOTES COMPUT SC, V10788, P118, DOI 10.1007/978-3-319-89719-6_7
   Amadio RM, 2014, LECT NOTES COMPUT SC, V8552, P1, DOI 10.1007/978-3-319-12466-7_1
   Aman Pohjola J., 2019, INTERACTIVE THEOREM
   Aspinall D, 2007, THEOR COMPUT SCI, V389, P411, DOI 10.1016/j.tcs.2007.09.003
   Atkey R, 2010, LECT NOTES COMPUT SC, V6012, P85, DOI 10.1007/978-3-642-11957-6_6
   Besson Frederic, 2014, Programming Languages and Systems. 12th Asian Symposium (APLAS 2014), Proceedings: LNCS 8858, P449, DOI 10.1007/978-3-319-12736-1_24
   Besson F, 2019, J AUTOM REASONING, V63, P369, DOI 10.1007/s10817-018-9496-y
   Besson F, 2015, LECT NOTES COMPUT SC, V9236, P67, DOI 10.1007/978-3-319-22102-1_5
   Carbonneaux Q, 2014, ACM SIGPLAN NOTICES, V49, P270, DOI [10.1145/2594291.2594301, 10.1145/2666356.2594301]
   Çiçek E, 2017, ACM SIGPLAN NOTICES, V52, P316, DOI 10.1145/3093333.3009858
   Çiçek E, 2015, LECT NOTES COMPUT SC, V9032, P406, DOI 10.1007/978-3-662-46669-8_17
   Crary K., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P184, DOI 10.1145/325694.325716
   Ericsson AS, 2019, J AUTOM REASONING, V63, P463, DOI 10.1007/s10817-018-9487-z
   Gueneau Armael, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P533, DOI 10.1007/978-3-319-89884-1_19
   Handley MAT, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371092
   Hoffmann Jan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P781, DOI 10.1007/978-3-642-31424-7_64
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Jost S, 2017, J AUTOM REASONING, V59, P87, DOI 10.1007/s10817-016-9398-9
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Myreen MO, 2010, LECT NOTES COMPUT SC, V6217, P142, DOI 10.1007/978-3-642-15057-9_10
   Myreen Magnus O., 2013, CERTIFIED PROGRAMS P, p66S81
   Owens S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110262
   Owens S, 2016, LECT NOTES COMPUT SC, V9632, P589, DOI 10.1007/978-3-662-49498-1_23
   Paraskevopoulou Zoe, 2019, P ACM PROGR LANG 3 I P ACM PROGR LANG 3 I
   Slind Konrad, 2019, J FUNCTIONAL PROGRAM J FUNCTIONAL PROGRAM, V29
   Vasconcelos P.B., 2008, THESIS U STANDREWS
   Wang P, 2017, P ACM PROGRAM LANG, V1, P79
   Wang YT, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290375
NR 28
TC 8
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 204
DI 10.1145/3428272
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900081
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Palmer, Z
   Park, T
   Smith, S
   Weng, SW
AF Palmer, Zachary
   Park, Theodore
   Smith, Scott
   Weng, Shiwei
TI Higher-Order Demand-Driven Symbolic Evaluation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Symbolic Execution; Test Generation; Demand-Driven Execution
AB Symbolic backwards execution (SBE) is a useful variation on standard forward symbolic evaluation; it allows a symbolic evaluation to start anywhere in the program and proceed by executing in reverse to the program start. SBE brings goal-directed reasoning to symbolic evaluation and has proven effective in e.g. automated test generation for imperative languages.
   In this paper we define DDSE, a novel SBE which operates on a functional as opposed to imperative language; furthermore, it is defined as a natural extension of a backwards-executing interpreter. We establish the soundness of DDSE and define a test generation algorithm for this toy language. We report on an initial reference implementation to confirm the correctness of the principles.
C1 [Palmer, Zachary] Swarthmore Coll, 500 Coll Ave, Swarthmore, PA 19081 USA.
   [Park, Theodore] Swarthmore & Hopkins, Swarthmore, PA USA.
   [Smith, Scott; Weng, Shiwei] Johns Hopkins Univ, 3400 N Charles St, Baltimore, MD 21218 USA.
C3 Swarthmore College; Johns Hopkins University
RP Palmer, Z (corresponding author), Swarthmore Coll, 500 Coll Ave, Swarthmore, PA 19081 USA.
EM zachary.palmer@swarthmore.edu; tedpark7@gmail.com; scott@cs.jhu.edu;
   wengshiwei@jhu.edu
OI Palmer, Zachary/0000-0003-2286-1189
CR Aissat R, 2016, LECT NOTES COMPUT SC, V9807, P36, DOI 10.1007/978-3-319-43144-4_3
   Anand S, 2008, LECT NOTES COMPUT SC, V4963, P367, DOI 10.1007/978-3-540-78800-3_28
   Anand S, 2013, J SYST SOFTWARE, V86, P1978, DOI 10.1016/j.jss.2013.02.061
   Baldoni R, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3182657
   Barrett C., 2017, Technical Report
   Blackshear S, 2013, ACM SIGPLAN NOTICES, V48, P275, DOI 10.1145/2499370.2462186
   BOURDONCLE F, 1993, SIGPLAN NOTICES, V28, P46, DOI 10.1145/173262.155095
   Chandra S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P363, DOI 10.1145/1542476.1542517
   Charreteur Florence, 2010, 2010 IEEE 21 INT S S
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Consot P, 2011, LECT NOTES COMPUT SC, V6538, P150, DOI 10.1007/978-3-642-18275-4_12
   Cruanes S, 2017, LECT NOTES ARTIF INT, V10395, P114, DOI 10.1007/978-3-319-63046-5_8
   Dinges Peter, 2014, P 29 ACM IEEE INT C, P31, DOI [10.1145/2642937.2642951, DOI 10.1145/2642937.2642951]
   Facchinetti L, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3310340
   Germane K, 2019, LECT NOTES COMPUT SC, V11388, P226, DOI 10.1007/978-3-030-11245-5_11
   Horwitz S., 1995, SIGSOFT Software Engineering Notes, V20, P104, DOI 10.1145/222132.222146
   Ma KK, 2011, LECT NOTES COMPUT SC, V6887, P95, DOI 10.1007/978-3-642-23702-7_11
   Köksal AS, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P151
   Lampropoulos L, 2017, ACM SIGPLAN NOTICES, V52, P114, DOI 10.1145/3093333.3009868
   Manevich R., 2004, Software Engineering Notes, V29, P63, DOI 10.1145/1041685.1029907
   Palmer Zachary, 2020, HIGHER ORDER DEMAND, DOI 10.5281/zenodo.3923023
   Palmer Zachary, 2016, 30 EUR C OBJ OR PROG, V56
   Palmer Zachary, 2020, HIGHER ORDER DEMAND, DOI [10.1145/3408984, DOI 10.1145/3408984]
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   Tobin-Hochstadt S, 2012, ACM SIGPLAN NOTICES, V47, P537, DOI 10.1145/2398857.2384655
   Torlak Emina, 2013, P 2013 ACM INT S NEW, P135, DOI DOI 10.1145/2509578.2509586
   Zwart Maaike, 2018, ARXIVMATHCT181106460
NR 27
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 102
DI 10.1145/3408984
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700016
OA gold
DA 2024-07-18
ER

PT J
AU Monnier, S
   Sperber, M
AF Monnier, Stefan
   Sperber, Michael
TI Evolution of Emacs Lisp
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE History of programming languages; Lisp; Emacs Lisp
AB While Emacs proponents largely agree that it is the world's greatest text editor, it is almost as much a Lisp machine disguised as an editor. Indeed, one of its chief appeals is that it is programmable via its own programming language. Emacs Lisp is a Lisp in the classic tradition. In this article, we present the history of this language over its more than 30 years of evolution. Its core has remained remarkably stable since its inception in 1985, in large part to preserve compatibility with the many third-party packages providing a multitude of extensions. Still, Emacs Lisp has evolved and continues to do so.
   Important aspects of Emacs Lisp have been shaped by concrete requirements of the editor it supports as well as implementation constraints. These requirements led to the choice of a Lisp dialect as Emacs's language in the first place, specifically its simplicity and dynamic nature: Loading additional Emacs packages or changing the ones in place occurs frequently, and having to restart the editor in order to re-compile or re-link the code would be unacceptable. Fulfilling this requirement in a more static language would have been difficult at best.
   One of Lisp's chief characteristics is its malleability through its uniform syntax and the use of macros. This has allowed the language to evolve much more rapidly and substantively than the evolution of its core would suggest, by letting Emacs packages provide new surface syntax alongside new functions. In particular, Emacs Lisp can be customized to look much like Common Lisp, and additional packages provide multiple-dispatch object systems, legible regular expressions, programmable pattern-matching constructs, generalized variables, and more. Still, the core has also evolved, albeit slowly. Most notably, it acquired support for lexical scoping.
   The timeline of Emacs Lisp development is closely tied to the projects and people who have shaped it over the years: We document Emacs Lisp history through its predecessors, Mocklisp and MacLisp, its early development up to the "macs schismz"and the fork of Lucid Emacs, the development of XEmacs, and the subsequent rennaissance of Emacs development.
C1 [Monnier, Stefan] Univ Montreal, CP 6128,Succ Ctr Vine, Montreal, PQ H3C 3J7, Canada.
   [Sperber, Michael] Act Grp GmbH, Hechinger Str 12-1, Tubingen, Germany.
C3 Universite de Montreal
RP Monnier, S (corresponding author), Univ Montreal, CP 6128,Succ Ctr Vine, Montreal, PQ H3C 3J7, Canada.
EM monnier@iro.umontreal.ca; sperber@deinprogramm.de
RI Sperber, Michael/JXL-8874-2024
CR [Anonymous], 1981, P ACM SIGPLAN SIGOA
   [Anonymous], 1990, USENIX WINT 1990 TEC
   Bawden A., 1999, Proceedings of the 1999 ACM SIGPLAN. Workshop on Partial Evaluation and Semantics-Based Program Manipulation (PEPM'99), P4
   Birkholz Matthew, 1993, TR1451 AI MIT
   Bothner Per, 2002, FREE SOFTWARE MAGAZI
   Bothner Per, 2020, KAWA SCHEME LANGUAGE
   Chassell Robert J., 2018, INTRO PROGRAMMING EM
   Clinger W., 1985, 848 AI MIT
   Clinger WD, 1998, ACM SIGPLAN NOTICES, V33, P174, DOI 10.1145/277652.277719
   Clojure, CLOJ PROGR LANG
   Crestani Marcus, 2005, THESIS
   DeMichiel Linda, 1987, EUR C OBJ OR PROGR E, DOI [10.1007/3-540-47891-4_15, DOI 10.1007/3-540-47891-4_15]
   Edge Jake, 2016, REMOVING SUPPORT EMA
   Ferrier Nic, 2013, BLOG POST
   Flatt Matthew, 2018, RACKET REFERENCE
   FSF, 2020, GNU GUIL 3 0 0 REF M
   FSF, 2020, US GNU COMP COLL GCC
   Gabriel Richard P., 1990, P C WORK SEPT
   Gabriel Richard P., 2019, E COMMUNICATION  MAY
   Gabriel Richard P., 1999, COMMUNICATION
   GMP, 2020, GNU MULT PREC AR LIB
   Gosling James, 1981, UNIX EMACS
   Greenberg Bernard S., 1996, MULTICS EMACS HIST D
   Greenspun Philip., 2003, 10th Rule of Programming
   Guerry Bastien, 2013, RELEXICONS
   Hayes B, 1997, ACM SIGPLAN NOTICES, V32, P176, DOI 10.1145/263700.263733
   HAYNES CT, 1987, ACM T PROGR LANG SYS, V9, P582, DOI 10.1145/29873.30392
   Kellomaki Pertti, 1993, SIGPLAN LISP POINTER, VVI, P15, DOI [10. 1145/173770.173772, DOI 10.1145/173770.173772]
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Lewis Bil, 2018, GNU EMACS LISP REFER
   LibJIT, 2020, GNU LIBJIT
   Lightning, 2020, GNU LIGHTN
   Ludlam Eric, 2018, E COMMUNICATION 0813
   MCCARTHY J, 1960, COMMUN ACM, V3, P184, DOI 10.1145/367177.367199
   MIT, 2014, MIT GNU SCHEM
   Mlynarik Richard, 2019, E COMMUNICATION  AUG
   Moon David, 1978, MAILING LIST EXCERPT
   Moon DavidA., 1974, MACLISP REFERENCE MA
   Murphy D, 2009, IEEE ANN HIST COMPUT, V31, P110, DOI 10.1109/MAHC.2009.127
   Neubauer M, 2001, ACM SIGPLAN NOTICES, V36, P38, DOI 10.1145/507669.507642
   Ohmaki K, 2002, 7TH IEEE INTERNATIONAL SYMPOSIUM ON HIGH ASSURANCE SYSTEMS ENGINEERING, PROCEEDINGS, P37, DOI 10.1109/HASE.2002.1173098
   Pitman Kent M., 1983, 295 MIT LAB COMP SCI
   Pitman Kent M., 2001, LECT NOTES COMPUTER, V2022
   Pitman Kent M., 2005, COMMON LISP HYPERSPE
   RHODES E, 2014, EUR LISP S, P20
   Seibel Peter., 2009, Coders at Work: Reflections on the Craft of Programming
   Stallman Richard, 2003, RE PLEA DYNAMICALLY
   Stallman Richard, 2005, RE REAL CONSTANTS
   Stallman Richard, 2018, E COMMUNICATION  NOV
   Stallman Richard, 2002, COMMUNICATION    OCT
   Stallman Richard, 1994, WHY YOU SHOULD NOT U
   Stallman Richard, 2012, RE CL PACKAGE SERIOU
   Stallman Richard, 2019, E COMMUNICAITON 0826
   Stallman Richard, 2018, GNU EMACS LISP REFER
   Steele G.L., 1984, Common LISP: The Language, V2nd
   STEELE GL, 1993, 2 ACM SIGPLAN C HIST, V28, P231, DOI DOI 10.1145/155360.155373
   Steingold Sam, 1999, LOAD EMACS LISP FILE
   SXEmacs, SXEMACS RED EM
   Tai L., 2001, The History of the GPL
   The Unicode Consortium, 2011, TECHNICAL REPORT
   TICHY WF, 1985, SOFTWARE PRACT EXPER, V15, P637, DOI 10.1002/spe.4380150703
   TOLMACH AP, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P1, DOI 10.1145/91556.91564
   Weinreb D.., 1981, Lisp machine manual
   Weinreb Daniel L., 1979, TECHNICAL REPORT
   Wiegley John, 2019, SIMPLE LIB ASYNCHRON
   Wing Ben, 1998, XEMACS LISP REFERENC
   Zawinski Jamie, 2007, EMACS TIMELINE   OCT
NR 67
TC 0
Z9 0
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 74
DI 10.1145/3386324
PG 55
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900007
OA gold
DA 2024-07-18
ER

PT J
AU Chang, S
   Ballantyne, M
   Turner, M
   Bowman, WJ
AF Chang, Stephen
   Ballantyne, Michael
   Turner, Milo
   Bowman, William J.
TI Dependent Type Systems as Macros
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE macros; type systems; dependent types; proof assistants
ID CALCULUS
AB We present TURNSTILE+, a high-level, macros-based metaDSL for building dependently typed languages. With it, programmers may rapidly prototype and iterate on the design of new dependently typed features and extensions. Or they may create entirely new DSLs whose dependent type "power" is tailored to a specific domain. Our framework's support of language-oriented programming also makes it suitable for experimenting with systems of interacting components, e.g., a proof assistant and its companion DSLs. This paper explains the implementation details of TURNSTILE+, as well as how it may be used to create a wide-variety of dependently typed languages, from a lightweight one with indexed types, to a full spectrum proof assistant, complete with a tactic system and extensions for features like sized types and SMT interaction.
C1 [Chang, Stephen; Ballantyne, Michael; Turner, Milo] Northeastern Univ, Boston, MA 02115 USA.
   [Chang, Stephen; Ballantyne, Michael] PLT Grp, Morristown, NJ 07960 USA.
   [Bowman, William J.] Univ British Columbia, Vancouver, BC, Canada.
C3 Northeastern University; University of British Columbia
RP Chang, S (corresponding author), Northeastern Univ, Boston, MA 02115 USA.; Chang, S (corresponding author), PLT Grp, Morristown, NJ 07960 USA.
EM stchang@ccs.neu.edu; mballantyne@ccs.neu.edu; milo@ccs.neu.edu;
   wjb@williamjbowman.com
RI Chang, Stephen/KDM-6667-2024
OI Chang, Stephen/0000-0002-4760-0658; Bowman, William/0000-0002-6402-4840
FU NSERC grant [RGPIN-2019-04207]; NSF [1823244, 1518844]; Division Of
   Computer and Network Systems; Direct For Computer & Info Scie & Enginr
   [1823244] Funding Source: National Science Foundation
FX We acknowledge the support of the NSERC grant RGPIN-2019-04207, and NSF
   grants 1823244 and 1518844. Cette recherche a ete financee par le CRSNG,
   numero de reference RGPIN-2019-04207.
CR Abel A, 2012, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.77.1
   Abel A, 2010, ELECTRON P THEOR COM, P14, DOI 10.4204/EPTCS.43.2
   Altenkirch T, 2010, LECT NOTES COMPUT SC, V6009, P40, DOI 10.1007/978-3-642-12251-4_5
   Amin N, 2014, ACM SIGPLAN NOTICES, V49, P233, DOI [10.1145/2660193.2660216, 10.1145/2714064.2660216]
   Anand Abhishek, 2018, CERTIFIED METAPROGRA
   Andersen L, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110274
   [Anonymous], 2017, RFC PI TYPE TRILOGY
   [Anonymous], 2012, P 8 ACM SIGPLAN WORK, DOI [10.1145/2103786.2103795, DOI 10.1145/2103786.2103795]
   [Anonymous], 1993, LISP SYMBOLIC COMPUT
   Augustsson Lennart, 2007, SIMPLER EASIER
   Bauer Andrej, 2012, IMPLEMENT DEPENDENT
   Blanchette JC, 2016, J FORMALIZ REASON, V9, P101, DOI 10.6092/issn.1972-5787/4593
   Brady Edwin, 2006, 7 S TRENDS FUNCT PRO
   Brady Edwin C., 2005, PRACTICAL IMPLEMENTA
   Chang S, 2017, ACM SIGPLAN NOTICES, V52, P694, DOI 10.1145/3093333.3009886
   Christiansen D, 2016, ACM SIGPLAN NOTICES, V51, P284, DOI 10.1145/3022670.2951932
   Cockx J, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P257, DOI 10.1145/2628136.2628139
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Coquand  Thierry, 1992, P 1992 WORKSH TYP PR, P71
   Cremet V, 2006, LECT NOTES COMPUT SC, V4162, P1
   DEBRUIJN NG, 1991, INFORM COMPUT, V91, P189, DOI 10.1016/0890-5401(91)90066-B
   Delahaye D, 2000, LECT NOTES ARTIF INT, V1955, P85, DOI 10.1007/3-540-44404-1_7
   Devriese D, 2013, ACM SIGPLAN NOTICES, V48, P73, DOI [10.1145/2544174.2500575, 10.1145/2500365.2500575]
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   Ebner G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110278
   Felleisen M, 2018, COMMUN ACM, V61, P62, DOI 10.1145/3127323
   Felleisen Matthias., 2015, 1st Summit on Advances in Programming Languages (SNAPL 2015), volume 32 of Leibniz International Proceedings in Informatics (LIPIcs), V32, P113, DOI DOI 10.4230/LIPICS.SNAPL.2015.113
   Flatt M, 2002, ACM SIGPLAN NOTICES, V37, P72, DOI 10.1145/583852.581486
   Flatt M, 2016, ACM SIGPLAN NOTICES, V51, P705, DOI 10.1145/2914770.2837620
   Flatt M, 2012, J FUNCT PROGRAM, V22, P181, DOI 10.1017/S0956796812000093
   Goguen H, 2006, LECT NOTES COMPUT SC, V4060, P521, DOI 10.1007/11780274_27
   Gonthier G, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P163
   Gonthier G, 2010, J FORMALIZ REASON, V3, P95
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Korkut Joomy, 2018, P WORKSH TYP DRIV DE
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Löh A, 2010, FUND INFORM, V102, P177, DOI 10.3233/FI-2010-304
   Malecha G, 2016, LECT NOTES COMPUT SC, V9632, P532, DOI 10.1007/978-3-662-49498-1_21
   MARTELLI A, 1982, ACM T PROGR LANG SYS, V4, P258, DOI 10.1145/357162.357169
   Martin-Lof P., 1975, STUDIES LOGIC FDN MA, V80, P73
   McBride Conor, 2000, THESIS U EDINBURGH U
   Nordstrom B., 1990, Programming in Martin-Lof's Type Theory
   Norell Ulf, 2007, PRACTICAL PROGRAMMIN
   Pientka B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P371, DOI 10.1145/1328438.1328483
   Pierce B. C., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P252, DOI 10.1145/268946.268967
   Pierce Benjamin C., 2018, LOGICAL FDN ELECT TX
   Pombrio J, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P75, DOI 10.1145/2784731.2784755
   Sewell P, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P1
   Smith J., 1995, INT WORKSH TYP PROOF, V996, P39, DOI [DOI 10.1007/3-540-60579-7_3, 10.1007/3-540- 60579-7]
   Stampoulis A, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P333
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Weirich S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110275
   Weirich Stephanie, 2014, PI FORALL NOTES OPLS
   Xi HW, 2007, J FUNCT PROGRAM, V17, P215, DOI 10.1017/S0956796806006216
   Ziliani B, 2013, ACM SIGPLAN NOTICES, V48, P87, DOI [10.1145/2500365.2500579, 10.1145/2544174.2500579]
   Zinzindohoué JK, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1789, DOI 10.1145/3133956.3134043
NR 56
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 3
DI 10.1145/3371071
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400004
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Sammler, M
   Garg, D
   Dreyer, D
   Litak, T
AF Sammler, Michael
   Garg, Deepak
   Dreyer, Derek
   Litak, Tadeusz
TI The High-Level Benefits of Low-Level Sandboxing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Sandboxing; robust safety; Iris; type systems; logical relations;
   language-based security
ID CHECKING
AB Sandboxing is a common technique that allows low-level, untrusted components to safely interact with trusted code. However, previous work has only investigated the low-level memory isolation guarantees of sandboxing, leaving open the question of the end-to-end guarantees that sandboxing affords programmers. In this paper, we fill this gap by showing that sandboxing enables reasoning about the known concept of robust safety, i.e., safety of the trusted code even in the presence of arbitrary untrusted code. To do this, we first present an idealized operational semantics for a language that combines trusted code with untrusted code. Sandboxing is built into our semantics. Then, we prove that safety properties of the trusted code (as enforced through a rich type system) are upheld in the presence of arbitrary untrusted code, so long as all interactions with untrusted code occur at the "any" type (a type inhabited by all values). Finally, to alleviate the burden of having to interact with untrusted code at only the "any" type, we formalize and prove safe several wrappers, which automatically convert values between the "any" type and much richer types. All our results are mechanized in the Coq proof assistant.
C1 [Sammler, Michael; Garg, Deepak; Dreyer, Derek] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Sammler, Michael; Litak, Tadeusz] Friedrich Alexander Univ Erlangen Nurnberg, Erlangen, Germany.
C3 University of Erlangen Nuremberg
RP Sammler, M (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.; Sammler, M (corresponding author), Friedrich Alexander Univ Erlangen Nurnberg, Erlangen, Germany.
EM msammler@mpi-sws.org; dg@mpi-sws.org; dreyer@mpi-sws.org;
   tadeusz.litak@fau.de
RI Litak, Tadeusz/AAO-5286-2020
OI Litak, Tadeusz/0000-0003-2240-3161
FU European Research Council (ERC) under the European Union's Horizon 2020
   Framework Programme [683289]; German Science Foundation (DFG) through
   the Collaborative Research Center lMethods and Tools for Understanding
   and Controlling Privacyz [SFB 1223]
FX We wish to thank David Swasey and Ralf Jung for their feedback and
   helpful discussions. This research was supported in part by a European
   Research Council (ERC) Consolidator Grant for the project lRustBeltz,
   funded under the European Union's Horizon 2020 Framework Programme
   (grant agreement no. 683289) and by the German Science Foundation (DFG)
   through the Collaborative Research Center lMethods and Tools for
   Understanding and Controlling Privacyz (SFB 1223).
CR Abadi M., 1997, Theoretical Aspects of Computer Software. Third International Symposium, TACS '97. Proceedings, P611, DOI 10.1007/BFb0014571
   Abate C, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P1351, DOI 10.1145/3243734.3243745
   Abbott R., 1976, SECURITY ANAL ENHANC
   Ahmed A, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709094
   Akram El-Korashy, 2016, THESIS U SAARLANDES
   ARM Limited, 2009, ARM SEC TECHN
   Basin D, 2013, ACM T INFORM SYST SE, V16, DOI 10.1145/2487222.2487225
   Besson F, 2019, LECT NOTES COMPUT SC, V11423, P499, DOI 10.1007/978-3-030-17184-1_18
   Blume Matthias, 2004, P 9 ACM SIGPLAN INT, DOI [10.1145/1016850.1016876, DOI 10.1145/1016850.1016876]
   Bugliesi M, 2011, 2011 IEEE 24TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P83, DOI 10.1109/CSF.2011.13
   de Amorim AA, 2015, P IEEE S SECUR PRIV, P813, DOI 10.1109/SP.2015.55
   de Amorim Arthur Azevedo, 2018, LECT NOTES COMPUTER, V10804
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Flanagan C, 2006, ACM SIGPLAN NOTICES, V41, P245, DOI 10.1145/1111320.1111059
   Fournet C, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275500
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Google, 2019, SANDB AP
   Gordon AD, 2001, P IEEE CSFW, P145, DOI 10.1109/CSFW.2001.930143
   GRUMBERG O, 1994, ACM T PROGR LANG SYS, V16, P843, DOI 10.1145/177492.177725
   Hardy N., 1988, SIGOPS Oper. Syst. Rev, DOI DOI 10.1145/54289.871709
   Igarashi Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110284
   Juglaret Y, 2016, P IEEE CSFW, P45, DOI 10.1109/CSF.2016.11
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Koning K, 2017, PROCEEDINGS OF THE TWELFTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS 2017), P437, DOI 10.1145/3064176.3064217
   Lamowski Benjamin, 2017, P 9 WORKSHOP PROGRAM, P51, DOI DOI 10.1145/3144555.3144562
   Lehmann N, 2017, ACM SIGPLAN NOTICES, V52, P775, DOI 10.1145/3093333.3009856
   Leroy Xavier, 2012, Research Report RR-7987
   Litton J, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P49
   McKeen F., 2013, HARDWARE ARCHITECTUR
   MORRIS JH, 1973, COMMUN ACM, V16, P15, DOI 10.1145/361932.361937
   Morrisett G, 2012, ACM SIGPLAN NOTICES, V47, P395, DOI 10.1145/2345156.2254111
   Mozilla, 2019, SCRIPT SEC
   New Max S., 2018, Proceedings of the ACM on Programming Languages, V2, DOI 10.1145/3236768
   Sammler Michael, 2019, HIGH LEVEL BENEFITS, DOI [10.5281/zenodo.3533037, DOI 10.5281/ZENODO.3533037]
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Swasey D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133913
   The Rust Developers, 2019, RUST PROGR LANG
   Tov JA, 2010, LECT NOTES COMPUT SC, V6012, P550, DOI 10.1007/978-3-642-11957-6_29
   Vahldiek-Oberwagner A, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1221
   Van Strydonck T, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341688
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Xi HW, 1998, ACM SIGPLAN NOTICES, V33, P249, DOI 10.1145/277652.277732
   Yee B, 2009, P IEEE S SECUR PRIV, P79, DOI 10.1109/SP.2009.25
NR 45
TC 10
Z9 10
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 32
DI 10.1145/3371100
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400033
OA gold
DA 2024-07-18
ER

PT J
AU Zou, DM
   Zeng, MH
   Xiong, YF
   Fu, ZL
   Zhang, L
   Su, ZD
AF Zou, Daming
   Zeng, Muhan
   Xiong, Yingfei
   Fu, Zhoulai
   Zhang, Lu
   Su, Zhendong
TI Detecting Floating-Point Errors via Atomic Conditions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE floating-point error; atomic condition; testing; dynamic analysis
ID ACCURACY
AB This paper tackles the important, difficult problem of detecting program inputs that trigger large floating-point errors in numerical code. It introduces a novel, principled dynamic analysis that leverages the mathematically rigorously analyzed condition numbers for atomic numerical operations, which we call atomic conditions, to effectively guide the search for large floating-point errors. Compared with existing approaches, our work based on atomic conditions has several distinctive benefits: (1) it does not rely on high-precision implementations to act as approximate oracles, which are difficult to obtain in general and computationally costly; and (2) atomic conditions provide accurate, modular search guidance. These benefits in combination lead to a highly effective approach that detects more significant errors in real-world code (e.g., widely-used numerical library functions) and achieves several orders of speedups over the state-of-the-art, thus making error analysis significantly more practical. We expect the methodology and principles behind our approach to benefit other floating-point program analysis tasks such as debugging, repair and synthesis. To facilitate the reproduction of our work, we have made our implementation, evaluation data and results publicly available on GitHub at https://github.com/FP-Analysis/atomic-condition.
C1 [Zou, Daming; Zeng, Muhan; Xiong, Yingfei; Zhang, Lu] Peking Univ, Key Lab High Confidence Software Technol, MoE, Dept Comp Sci & Technol, Beijing 100871, Peoples R China.
   [Fu, Zhoulai] IT Univ Copenhagen, Dept Comp Sci, Copenhagen, Denmark.
   [Su, Zhendong] Swiss Fed Inst Technol, Dept Comp Sci, Univ Str 6, CH-8092 Zurich, Switzerland.
C3 Peking University; IT University Copenhagen; Swiss Federal Institutes of
   Technology Domain; ETH Zurich
RP Xiong, YF (corresponding author), Peking Univ, Key Lab High Confidence Software Technol, MoE, Dept Comp Sci & Technol, Beijing 100871, Peoples R China.
EM zoudm@pku.edu.cn; mhzeng@pku.edu.cn; xiongyf@pku.edu.cn; zhfu@itu.dk;
   zhanglucs@pku.edu.cn; zhendong.su@inf.ethz.ch
OI Su, Zhendong/0000-0002-2970-1391; Fu, Zhoulai/0000-0003-2073-0564
FU National Key Research and Development Program of China [2017YFB1001803];
   National Natural Science Foundation of China [61922003, 61672045]; China
   Scholarships Council [201806010265]; EU's H2020 Program [732287]; H2020
   - Industrial Leadership [732287] Funding Source: H2020 - Industrial
   Leadership
FX We thank Pinjia He, Clara Meister, Manuel Rigger, Theodoros Theodoridis,
   Sverrir Thorgeirsson, Dominik Winterer, and the anonymous POPL reviewers
   for valuable feedback on earlier versions of this paper. This material
   is based upon work supported in part by the National Key Research and
   Development Program of China under Grant No. 2017YFB1001803, the
   National Natural Science Foundation of China under Grant No. 61922003,
   61672045, the China Scholarships Council under Grant No. 201806010265,
   and the EU's H2020 Program under Grant No. 732287.
CR [Anonymous], 2018, mpmath: a Python library for arbitrary-precision floating-point arithmetic (version 1.10)
   [Anonymous], 1996, ARIANE 5, Flight 501 Failure
   Bäck T, 1999, EVOLUTIONARY COMPUTATION, P51
   Baker J.E., P INT C GEN ALG THEI, P101
   Bao T, 2013, ACM SIGPLAN NOTICES, V48, P817, DOI [10.1145/2509136.2509526, 10.1145/2544173.2509526]
   Barr ET, 2013, ACM SIGPLAN NOTICES, V48, P549, DOI 10.1145/2480359.2429133
   Benz F, 2012, ACM SIGPLAN NOTICES, V47, P453, DOI 10.1145/2345156.2254118
   Chiang WF, 2014, ACM SIGPLAN NOTICES, V49, P43, DOI [10.1145/2692916.2555265, 10.1145/2555243.2555265]
   Dutta S, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P574, DOI 10.1145/3236024.3236057
   Fousse L, 2007, ACM T MATH SOFTWARE, V33, DOI 10.1145/1236463.1236468
   Fu ZL, 2015, ACM SIGPLAN NOTICES, V50, P639, DOI [10.1145/2814270.2814317, 10.1145/2858965.2814317]
   GOLDBERG D, 1991, COMPUT SURV, V23, P5, DOI 10.1145/103162.103163
   Goubault E, 2011, LECT NOTES COMPUT SC, V6538, P232, DOI 10.1007/978-3-642-18275-4_17
   Harrison John., 2009, 19 IEEE S COMP AR AR
   Hickey T, 2001, J ACM, V48, P1038, DOI 10.1145/502102.502106
   Higham N.J., 2002, ACCURACY STABILITY N, V2nd ed.
   Pham HV, 2019, PROC INT CONF SOFTW, P1027, DOI 10.1109/ICSE.2019.00107
   Izycheva A, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P15, DOI 10.23919/FMCAD.2017.8102236
   Kline M., 1998, CALCULUS INTUITIVE P
   Lanczos C., 1964, J. Soc. Ind. Appl. Math., Ser. B Numer. Anal., V1, P86, DOI DOI 10.1137/0701008
   Larsson Peter, 2013, Exploring Quadruple Precision Floating Point Numbers in GCC and ICC
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lee Wonyeol., 2016, P 37 ACM SIGPLAN C P, p70S84
   Loosemore S., 2019, The gnu c library reference manua
   Nethercote N, 2007, ACM SIGPLAN NOTICES, V42, P89, DOI 10.1145/1273442.1250746
   Panchekha P, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI 10.1145/2737924.2737959
   Quinn, 1983, WALL STREET J, P37
   RanWang Daming Zou., 2016, P 24 ACM SIGSOFT INT
   Sanchez-Stern A, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P256, DOI [10.1145/3192366.3192411, 10.1145/3296979.3192411]
   Silverman R.A., 1972, Special functions and their applications
   Skeel Robert., 1992, SIAM NEWS, V25, P11
   Solovyev A, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3230733
   Weber-Wulff Debora., 1992, RISKS DIGEST, V13, P37
   WHITLEY D, 1989, PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON GENETIC ALGORITHMS, P116
   Yi X, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290369
   Yi X, 2017, ASIA PAC SOFWR ENG, P11, DOI 10.1109/APSEC.2017.7
   Zou DM, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P529, DOI 10.1109/ICSE.2015.70
NR 37
TC 15
Z9 17
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 60
DI 10.1145/3371128
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400061
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Astrauskas, V
   Müller, P
   Poli, F
   Summers, AJ
AF Astrauskas, Vytautas
   Muller, Peter
   Poli, Federico
   Summers, Alexander J.
TI Leveraging Rust Types for Modular Specification and Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Rust; type systems; heap-manipulating programs; concurrency
AB Rust's type system ensures memory safety: well-typed Rust programs are guaranteed to not exhibit problems such as dangling pointers, data races, and unexpected side effects through aliased references. Ensuring correctness properties beyond memory safety, for instance, the guaranteed absence of assertion failures or more-general functional correctness, requires static program verification. For traditional system programming languages, formal verification is notoriously difficult and requires complex specifications and logics to reason about pointers, aliasing, and side effects on mutable state. This complexity is a major obstacle to the more-widespread verification of system software.
   In this paper, we present a novel verification technique that leverages Rust's type system to greatly simplify the specification and verification of system software written in Rust. We analyse information from the Rust compiler and synthesise a corresponding core proof for the program in a flavour of separation logic tailored to automation. To verify correctness properties beyond memory safety, users can annotate Rust programs with specifications at the abstraction level of Rust expressions; our technique weaves them into the core proof to verify modularly whether these specifications hold. Crucially, our proofs are constructed and checked automatically without exposing the underlying formal logic, allowing users to work exclusively at the level of abstraction of the programming language. As such, our work enables a new kind of verification tool, with the potential to impact a wide audience and allow the Rust community to benefit from state-of-the-art verification techniques. We have implemented our techniques for a subset of Rust; our evaluation on several thousand functions from widely-used Rust crates demonstrates its effectiveness.
C1 [Astrauskas, Vytautas; Muller, Peter; Poli, Federico; Summers, Alexander J.] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich
RP Astrauskas, V (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
EM vytautas.astrauskas@inf.ethz.ch; peter.mueller@inf.ethz.ch;
   federico.poli@inf.ethz.ch; alexander.summers@inf.ethz.ch
OI Poli, Federico/0000-0001-7709-1965
FU Swiss National Science Foundation (SNSF) [200021_169503]; Swiss National
   Science Foundation (SNF) [200021_169503] Funding Source: Swiss National
   Science Foundation (SNF)
FX This work was partially funded by the Swiss National Science Foundation
   (SNSF) under Grant No. 200021_169503.
CR Abadi M, 1996, IEEE S LOG, P242, DOI 10.1109/LICS.1996.561324
   Astrauskas Vytautas, LEVERAGING RUST TYPE
   Astrauskas Vytautas, 2019, ARTEFACT CONTAINING, DOI [10.5281/zenodo.3363914, DOI 10.5281/ZENODO.3363914]
   Bakst A, 2016, LECT NOTES COMPUT SC, V9583, P65, DOI 10.1007/978-3-662-49122-5_3
   Baranowski M, 2018, LECT NOTES COMPUT SC, V11138, P528, DOI 10.1007/978-3-030-01090-4_32
   Barnett M, 2011, COMMUN ACM, V54, P81, DOI 10.1145/1953122.1953145
   Bhargavan Karthikeyan, 2017, SUMM ADV PROGR LANG, V71
   Bierhoff Kevin, 2011, S NEW ID NEW PAR REF, P1932
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Boyland John, 2001, LECT NOTES COMPUTER, V2072, p2S27
   Clebsch S., 2015, P 5 INT WORKSHOP PRO, P1, DOI DOI 10.1145/2824815.2824816
   Clippy contributors, 2019, CLIPPY
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   Coq Team, 2014, COQ PROOF ASS REF MA
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P50, DOI 10.1145/301631.301641
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Dockins R, 2016, LECT NOTES COMPUT SC, V9971, P56, DOI 10.1007/978-3-319-48869-1_5
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Gordon CS, 2012, ACM SIGPLAN NOTICES, V47, P21, DOI 10.1145/2398857.2384619
   Hahn Florian, 2015, RUST2VIPER BUILDING
   Haller P, 2010, LECT NOTES COMPUT SC, V6183, P354
   Hawblitzel C., 2014, 11 USENIX S OPERATIN
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Heule S, 2013, LECT NOTES COMPUT SC, V7737, P315
   Jones C. B., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P321
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kan Shuanglong, 2018, ABS180407608 CORR
   Kassios IT, 2011, FORM ASP COMPUT, V23, P267, DOI 10.1007/s00165-010-0152-5
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Leavens Gary T., 2011, JML REFERENCE MANUAL
   Lindner M, 2018, IEEE INTL CONF IND I, P108, DOI 10.1109/INDIN.2018.8471992
   Maalej Maroua, 2018, SAFE DYNAMIC MEMORY
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Matsakis Nicholas D., 2018, MIR BASED BORROW CHE
   Matsakis Nicholas D., 2018, MIR BASED BORROWCK I
   Matsakis Niko, 2017, Non-lexical lifetimes
   MEYER B, 1992, ADV OBJECT ORIENTED
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   MULLER P, 2002, LECT NOTES COMPUTER, V2262
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   OWICKI S, 1976, COMMUN ACM, V19, P279, DOI 10.1145/360051.360224
   Parkinson M, 2005, ACM SIGPLAN NOTICES, V40, P247, DOI 10.1145/1047659.1040326
   Parkinson MJ, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(3:01)2012
   Reed E., 2015, Tech. Rep. UW-CSE-15- 03-02
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rondon PM, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1379022.1375602
   Rosetta Code contributors, 2018, ROS COD CONTR
   Rust community, 2018, RUST COMMUNITYS CRAT
   Rust community, 2019, LEARN RUST WRITING E
   Rust community, 2018, RUST REFERENCE PLACE
   Rust contributors, 2019, RUSTONOMICON WORKING
   Rust contributors, 2019, POLONIUS REFERENCE I
   Rust contributors, 2019, TRACKING ISSUE GEN 2
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Rustan K., 2002, ACM T PROGR LANG SYS, V24
   Rustan K., 2004, LECT NOTES COMPUTER, V3086
   Schwerhoff Malte, 2015, EUR C OBJ OR PROGR E, V37
   Smans J, 2010, LECT NOTES COMPUT SC, V6117, P170
   Smans J, 2009, LECT NOTES COMPUT SC, V5653, P148, DOI 10.1007/978-3-642-03013-0_8
   Stork S, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2543920
   Summers Alexander J., 2013, LECT NOTES COMPUTER, V7920
   Toman John, 2015, AUTOMATED SOFTWARE E, p75S80
   Ullrich Sebastian, 2016, THESIS KARLSRUHE I T
   Wang Feng, 2018, ABS180410806 CORR
   Weiss A., J LOND MATH SOC, DOI [10.1112/jlms.12576, DOI 10.1112/JLMS.12576]
NR 68
TC 55
Z9 59
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 147
DI 10.1145/3360573
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500032
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Lindenhovius, B
   Mislove, M
   Zamdzhiev, V
AF Lindenhovius, Bert
   Mislove, Michael
   Zamdzhiev, Vladimir
TI Mixed Linear and Non-linear Recursive Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE recursive types; intuitionistic linear logic; recursion; categorical
   semantics; algebraic compactness; computational adequacy;
   linear/non-linear model; FPC; monoidal adjunctions
AB We describe a type system with mixed linear and non-linear recursive types called LNL-FPC (the linear/nonlinear fixpoint calculus). The type system supports linear typing which enhances the safety properties of programs, but also supports non-linear typing as well which makes the type system more convenient for programming. Just like in FPC, we show that LNL-FPC supports type-level recursion which in turn induces temi-level recursion. We also provide sound and computationally adequate categorical models for LNL-FPC which describe the categorical structure of the substructural operations of Intuitionistic Linear Logic at all non-linear types, including the recursive ones. In order to do so, we describe a new technique for solving recursive domain equations within the category CPO by constructing the solutions over pre-embeddings. The type system also enjoys implicit weakening and contraction rules which we are able to model by identifying the canonical comonoid structure of all non-linear types. We also show that the requirements of our abstract model are reasonable by constructing a large class of concrete models that have found applications not only in classical functional programming, but also in emerging programming paradigms that incorporate linear types, such as quantum programming and circuit description programming languages.
C1 [Lindenhovius, Bert; Mislove, Michael] Tulane Univ, Comp Sci, 6823 St Charles Ave, New Orleans, LA 70118 USA.
   [Zamdzhiev, Vladimir] Univ Lorraine, CNRS, INRIA, LORIA, 615 Rue Jardin Bot, F-54000 Nancy, France.
C3 Tulane University; Centre National de la Recherche Scientifique (CNRS);
   Inria; Universite de Lorraine
RP Lindenhovius, B (corresponding author), Tulane Univ, Comp Sci, 6823 St Charles Ave, New Orleans, LA 70118 USA.
EM alindenh@tulane.edu; mislove@tulane.edu; vladimir.zamdzhiev@loria.fr
OI Mislove, Michael/0000-0002-6650-1399
FU AFOSR under the MURI [FA9550-16-1-0082]; French projects
   [ANR-17-CE25-0009]
FX This work was partially funded by the AFOSR under the MURI grant number
   FA9550-16-1-0082 entitled, "Semantics, Formal Reasoning, and Tool
   Support for Quantum Programming". Vladimir Zamdzhiev is also supported
   by the French projects ANR-17-CE25-0009 SoftQPro and PIA-GDN/Quantex.
CR Abadi M, 1996, IEEE S LOG, P242, DOI 10.1109/LICS.1996.561324
   ABRAMSKY S, 1993, THEOR COMPUT SCI, V111, P3, DOI 10.1016/0304-3975(93)90181-R
   Abramsky Samson., 1994, Domain theory
   Adámek J, 2018, J LOG ALGEBR METHODS, V95, P41, DOI 10.1016/j.jlamp.2017.11.003
   Adamek Jiri., 1974, COMMENT MATH UNIV CA, V15
   Barber A., 1996, ECSLFCS96347 U ED
   Benton N, 1996, IEEE S LOG, P420, DOI 10.1109/LICS.1996.561458
   Benton PN, 1995, LECT NOTES COMPUT SC, V933, P121, DOI 10.1007/BFb0022251
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Bierman G.M., 2000, Electron. Notes Theor. Comput. Sci, V41, P9, DOI [10.1016/S1571-0661(04)80874-0, DOI 10.1016/S1571-0661(04)80874-0]
   Borceux F., 1994, Handbook of Categorical Algebra
   Brauner T, 1997, THEOR COMPUT SCI, V177, P27, DOI 10.1016/S0304-3975(96)00233-2
   Caires L, 2016, MATH STRUCT COMP SCI, V26, P367, DOI 10.1017/S0960129514000218
   Day B., 1974, LECT NOTES MATH, V420, P20, DOI 10.1007/BFb0063098
   Eppendahl Adam., 2003, THESIS QUEEN MARY TY
   Fiore M. P, 1994, THESIS U EDINBURGH U
   Fiore Marcelo., 1994, LICS
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Lehmann D. J., 1981, Mathematical Systems Theory, V14, P97, DOI 10.1007/BF01752392
   Levy Paul Blain, 2004, Call-By-Push-Value: A Functional/Imperative Synthesis
   Lindenhovius B, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P659, DOI 10.1145/3209108.3209196
   Malherbe Octavio, 2013, PRESHEAF MODELS QUAN, DOI [10.1007/978-3-642-38164-5_13, DOI 10.1007/978-3-642-38164-5_13]
   Mogelberg RE, 2008, ANN PURE APPL LOGIC, V155, P115, DOI 10.1016/j.apal.2008.03.006
   Morris JG, 2016, ACM SIGPLAN NOTICES, V51, P448, DOI 10.1145/3022670.2951925
   Pagani M, 2014, ACM SIGPLAN NOTICES, V49, P647, DOI 10.1145/2535838.2535879
   Pitts AM, 1996, INFORM COMPUT, V127, P66, DOI 10.1006/inco.1996.0052
   Plotkin G. D, 1985, CSLI STANF U
   Rennela M., 2017, CLASSICAL CONTROL QU
   Rios F, 2018, ELECTRON P THEOR COM, P164, DOI 10.4204/EPTCS.266.11
   Rosolini Giuseppe, 2004, USING SYNTHETI UNPUB
   Smyth M. B., 1982, SIAM Journal on Computing, V11, P761, DOI 10.1137/0211062
   Tov JA, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P447, DOI 10.1145/1926385.1926436
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
NR 33
TC 10
Z9 10
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 111
DI 10.1145/3341715
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900034
OA gold
DA 2024-07-18
ER

PT J
AU Ghalayini, JE
   Krishnaswami, N
AF Ghalayini, Jad Elkhaleq
   Krishnaswami, Neel
TI Explicit Refinement Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Refinement Types; First Order Logic; Denotational Semantics
ID INTERSECTION; LANGUAGE; SYSTEMS
AB We present lambda(ert), a type theory supporting refinement types with explicit proofs. Instead of solving refinement constraints with an SMT solver like DML and Liquid Haskell, our system requires and permits programmers to embed proofs of properties within the program text, letting us support a rich logic of properties including quantifiers and induction. We show that the type system is sound by showing that every refined program erases to a simply-typed program, and by means of a denotational semantics, we show that every erased program has all of the properties demanded by its refined type. All of our proofs are formalised in Lean 4.
C1 [Ghalayini, Jad Elkhaleq; Krishnaswami, Neel] Univ Cambridge, Dept Comp Sci & Technol, Cambridge, England.
C3 University of Cambridge
RP Ghalayini, JE (corresponding author), Univ Cambridge, Dept Comp Sci & Technol, Cambridge, England.
EM jeg74@cl.cam.ac.uk; nk480@cl.cam.ac.uk
OI Ghalayini, Jad Elkhaleq/0000-0002-6905-1303
CR Ahman D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158095
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Awodey S, 2004, J LOGIC COMPUT, V14, P447, DOI 10.1093/logcom/14.4.447
   Barras B, 2008, LECT NOTES COMPUT SC, V4962, P365, DOI 10.1007/978-3-540-78499-9_26
   Cui S, 2005, LECT NOTES COMPUT SC, V3717, P310
   Gambino N, 2006, J SYMBOLIC LOGIC, V71, P67, DOI 10.2178/jsl/1140641163
   HARPER R, 1992, J SYMB COMPUT, V14, P71, DOI 10.1016/0747-7171(92)90026-Z
   Jhala R, 2020, Arxiv, DOI arXiv:2010.07763
   Katsumata S, 2014, ACM SIGPLAN NOTICES, V49, P633, DOI 10.1145/2535838.2535846
   Kopylov A, 2003, IEEE S LOG, P86, DOI 10.1109/LICS.2003.1210048
   Kovacs Laura, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P1, DOI 10.1007/978-3-642-39799-8_1
   Kraus N, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(1:15)2017
   Kura S, 2021, LECT NOTES COMPUT SC, V12650, P406, DOI 10.1007/978-3-030-71995-1_21
   Melliès PA, 2015, ACM SIGPLAN NOTICES, V50, P3, DOI 10.1145/2775051.2676970
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Miquel A, 2000, IEEE S LOG, P18, DOI 10.1109/LICS.2000.855752
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Reynolds JC, 2003, MG COMP SCI, P309
   Rondon PM, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1379022.1375602
   Sjöberg V, 2015, ACM SIGPLAN NOTICES, V50, P369, DOI 10.1145/2676726.2676974
   Sterling J, 2021, J ACM, V68, DOI 10.1145/3474834
   Tejiscak Matus, 2019, Ph. D. Dissertation.
   The Coq Development Team, 2023, Zenodo, DOI 10.5281/ZENODO.1003420
   van den Berg B, 2021, Arxiv, DOI arXiv:2102.00905
   Vazou N, 2014, ACM SIGPLAN NOTICES, V49, P269, DOI 10.1145/2692915.2628161
   Vazou Niki, 2022, P 15 ACM SIGPLAN INT, P13, DOI DOI 10.1145/3546189.3549919
   Weidenbach C., 2002, Automated Deduction - CADE-18. 18th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.2392), P275
   Winterer D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428261
   Xi HW, 1998, ACM SIGPLAN NOTICES, V33, P249, DOI 10.1145/277652.277732
   Zhaohui Luo, 1990, Ph. D. Dissertation
NR 30
TC 1
Z9 1
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 195
DI 10.1145/3607837
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900008
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Elsman, M
AF Elsman, Martin
TI Garbage-Collection Safety for Region-Based Type-Polymorphic Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE region-inference; garbage-collection; Standard ML
ID MEMORY MANAGEMENT
AB Region inference offers a mechanism to reduce (and sometimes entirely remove) the need for reference-tracing garbage collection by inferring where to insert allocation and deallocation instructions in a program at compile time. When the mechanism is combined with techniques for reference-tracing garbage collection, which is helpful in general to support programs with very dynamic memory behaviours, it turns out that region-inference is complementary to adding generations to a reference-tracing collector. However, region-inference and the associated region-representation analyses that make such a memory management strategy perform well in practice are complex, both from a theoretical point-of-view and from an implementation point-of-view.
   In this paper, we demonstrate a soundness problem with existing theoretical developments, which have to do with ensuring that, even for higher-order polymorphic programs, no dangling-pointers appear during a reference-tracing collection. This problem has materialised as a practical soundness problem in a real implementation based on region inference. As a solution, we present a modified, yet simple, region type-system that captures garbage-collection effects, even for polymorphic higher-order code, and outline how region inference and region-representation analyses are adapted to the new type system. The new type system allows for associating simpler region type-schemes with functions, compared to original work, makes it possible to combine region-based memory management with partly tag-free reference-tracing (and generational) garbage-collection, and repairs previously derived work that is based on the erroneous published results.
C1 [Elsman, Martin] Univ Copenhagen, Dept Comp Sci, Univ Pk 5, DK-2100 Copenhagen, Denmark.
C3 University of Copenhagen
RP Elsman, M (corresponding author), Univ Copenhagen, Dept Comp Sci, Univ Pk 5, DK-2100 Copenhagen, Denmark.
EM mael@di.ku.dk
RI Elsman, Martin/L-8791-2016
OI Elsman, Martin/0000-0002-6061-5993
CR Aditya S., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P12, DOI 10.1145/182409.182414
   AIKEN A, 1995, SIGPLAN NOTICES, V30, P174, DOI 10.1145/223428.207137
   Aldrich J, 2002, ACM SIGPLAN NOTICES, V37, P311, DOI 10.1145/583854.582448
   Anderson TA, 2010, ACM SIGPLAN NOTICES, V45, P21
   [Anonymous], 1995, Ph. D. Dissertation
   Appel A. W., 1989, LISP and Symbolic Computation, V2, P153, DOI 10.1007/BF01811537
   Birkedal L., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P171, DOI 10.1145/237721.237771
   Bjorner Nikolaj Skallerud, 1994, ACM SIGPLAN WORKSHOP, P120
   Blanchet B., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P25, DOI 10.1145/268946.268949
   Boyapati C, 2003, ACM SIGPLAN NOTICES, V38, P324, DOI 10.1145/780822.781168
   Calcagno C, 2002, INFORM COMPUT, V173, P199, DOI 10.1006/inco.2001.3112
   Doligez D., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P113, DOI 10.1145/158511.158611
   Elsman M, 2003, ACM SIGPLAN NOTICES, V38, P123, DOI 10.1145/640136.604190
   Elsman M., 1998, Types im Compilation. Second International Workshop, TIC '98 Proceedings, P136, DOI 10.1007/BFb0055516
   Elsman Martin, 2023, Zenodo, DOI 10.5281/ZENODO.7803910
   Elsman M, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000010
   Elsman M, 2020, LECT NOTES COMPUT SC, V12007, P95, DOI 10.1007/978-3-030-39197-3_7
   Elsman Martin, 1995, 9578 DIKU U COP
   Fluet M, 2006, LECT NOTES COMPUT SC, V3924, P7
   Gansner Emden R., 2004, STANDARD ML BASIS LI, DOI [10.1017/CBO9780511546846, DOI 10.1017/CBO9780511546846]
   Gay D, 2001, ACM SIGPLAN NOTICES, V36, P70, DOI 10.1145/381694.378815
   GOLDBERG B, 1991, SIGPLAN NOTICES, V26, P165, DOI 10.1145/113446.113460
   Goldberg B., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P53, DOI 10.1145/141471.141504
   HANSON DR, 1980, SOFTWARE PRACT EXPER, V10, P489, DOI 10.1002/spe.4380100607
   Helsen Simon, 2001, Electronic Notes in Theoretical Computer Science, V41, P1, DOI [10.1016/S1571-0661(04)80870-3HOOTS2000, DOI 10.1016/S1571-0661(04)80870-3HOOTS2000]
   Huelsbergen Lorenz., 1998, SIGPLAN Not, V34, P166, DOI DOI 10.1145/286860.286878
   Jones R., 2011, GARBAGE COLLECTION H
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Marlow S, 2011, ACM SIGPLAN NOTICES, V46, P71, DOI 10.1145/2096148.2034685
   Marlow S, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P65
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Morrisett G., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P66, DOI 10.1145/224164.224182
   Morrisett Greg, 1996, WORKSHOP COMPILER SU
   Reppy John H, 1994, HIGH PERFORMANCE GAR
   Salagnac G, 2005, ELECTRON NOTES THEOR, V131, P99, DOI 10.1016/j.entcs.2005.01.026
   Salagnac Guillaume, 2006, WORKSHOP IMPLEMENTAT
   Swamy N, 2006, SCI COMPUT PROGRAM, V62, P122, DOI 10.1016/j.scico.2006.02.003
   Tarditi D, 1996, ACM SIGPLAN NOTICES, V31, P181, DOI 10.1145/249069.231414
   Tofte M, 1998, ACM T PROGR LANG SYS, V20, P724, DOI 10.1145/291891.291894
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tofte M., 2004, Higher-Order and Symbolic Computation, V17, P245, DOI 10.1023/B:LISP.0000029446.78563.a4
   Tofte M, 2000, FOUNDAT COMPUT, P389
   Tofte Mads, 1993, 9315 DIKU U COP DEP
   Tofte Mads, 2022, PROGRAMMING REGIONS
   Tolmach A., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P1, DOI 10.1145/182409.182411
   Ueno K, 2016, ACM SIGPLAN NOTICES, V51, P421, DOI 10.1145/3022670.2951944
   Weeks Stephen, 2006, ML 06 P 2006 WORKSHO, P1
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 49
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 115
DI 10.1145/3591229
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900011
OA gold
DA 2024-07-18
ER

PT J
AU Park, S
   Song, W
   Nam, S
   Kim, H
   Shin, J
   Lee, J
AF Park, Sunjae
   Song, Woosung
   Nam, Seunghyeon
   Kim, Hyeongyu
   Shin, Junbum
   Lee, Juneyoung
TI HEaaN.MLIR: An Optimizing Compiler for Fast Ring-Based Homomorphic
   Encryption
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Compiler; Homomorphic Encryption
AB Homomorphic encryption (HE) is an encryption scheme that provides arithmetic operations on the encrypted data without doing decryption. For Ring-based HE, an encryption scheme that uses arithmetic operations on a polynomial ring as building blocks, performance improvement of unit HE operations has been achieved by two kinds of efforts. The first one is through accelerating the building blocks, polynomial operations. However, it does not facilitate optimizations across polynomial operations such as fusing two polynomial operations. The second one is implementing highly optimized HE operations in an amalgamated manner. The written codes have superior performance, but they are hard to maintain.
   To resolve these challenges, we propose HEaaN.MLIR, a compiler that performs optimizations across polynomial operations. Also, we propose Poly and ModArith, compiler intermediate representations (IRs) for integer polynomial arithmetic and modulus arithmetic on integer arrays. HEaaN.MLIR has compiler optimizations that are motivated by manual optimizations that HE developers do. These include optimizing modular arithmetic operations, fusing loops, and vectorizing integer arithmetic instructions. HEaaN.MLIR can parse a program consisting of the Poly and ModArith instructions and generate a high-performance, multithreaded machine code for a CPU. Our experiment shows that the compiled operations outperform heavily optimized open-source and commercial HE libraries by up to 3.06x in a single thread and 4.55x in multiple threads.
C1 [Park, Sunjae; Nam, Seunghyeon; Kim, Hyeongyu] Seoul Natl Univ, Seoul, South Korea.
   [Song, Woosung] Google, Seoul, South Korea.
   [Shin, Junbum] CryptoLab, Seoul, South Korea.
   [Lee, Juneyoung] Amazon Web Serv, Seattle, WA USA.
C3 Seoul National University (SNU); Google Incorporated; Amazon.com
RP Park, S (corresponding author), Seoul Natl Univ, Seoul, South Korea.
EM psjlds@snu.ac.kr; wssong@google.com; seunghyeon.nam@sf.snu.ac.kr;
   gusrb406@snu.ac.kr; junbum.shin@cryptolab.co.kr; lebjuney@amazon.com
OI Lee, Juneyoung/0000-0002-8152-9330
FU Institute of Information & communications Technology Planning &
   Evaluation (IITP) - Korea government (MSIT)
FX This work was supported by Institute of Information & communications
   Technology Planning & Evaluation (IITP) grant funded by the Korea
   government (MSIT) [NO.2022-0-01047, Development of statistical analysis
   algorithm and module using homomorphic encryption based on real number
   operation]. Seunghyeon Nam was funded by CryptoLab. We thank Mihai Budiu
   and anonymous reviewers for giving valuable comments.
CR Agner Fog, 2022, Instruction tables
   Al Badawi A., 2018, IACR T CRYPTOGRAPHIC, P70
   Al Badawi A, 2020, IEEE ACCESS, V8, P226544, DOI 10.1109/ACCESS.2020.3045465
   Al Badawi A, 2021, IEEE T EMERG TOP COM, V9, P941, DOI 10.1109/TETC.2019.2902799
   [Anonymous], 2012, 2012_IEEE_conference_on_high performance_extreme_computing, DOI [DOI 10.1109/PEAM.2012.6612493, 10.1109/HPEC.2012.6408660, DOI 10.1109/HPEC.2012.6408660]
   Bang S, 2022, LECT NOTES COMPUT SC, V13372, P386, DOI 10.1007/978-3-031-13188-2_19
   BARRETT P, 1987, LECT NOTES COMPUT SC, V263, P311
   Boemer Fabian, 2021, WAHC '21: Proceedings of the 9th on Workshop on Encrypted Computing & Applied Homomorphic Cryptography, P57, DOI 10.1145/3474366.3486926
   Boemer F, 2019, PROCEEDINGS OF THE 7TH ACM WORKSHOP ON ENCRYPTED COMPUTING & APPLIED HOMOMORPHIC CRYPTOGRAPHY (WAHC'19), P45, DOI 10.1145/3338469.3358944
   Boemer F, 2019, CF '19 - PROCEEDINGS OF THE 16TH ACM INTERNATIONAL CONFERENCE ON COMPUTING FRONTIERS, P3, DOI 10.1145/3310273.3323047
   Brakerski Z., 2011, P 3 INN THEOR COMP S, P309, DOI [10.1145/2090236.2090262, DOI 10.1145/2090236.2090262]
   Carpov Sergiu, 2015, P 3 INT WORKSH SEC C, P13
   Cheon JH, 2017, LECT NOTES COMPUT SC, V10624, P409, DOI 10.1007/978-3-319-70694-8_15
   Chielle Eduardo, 2018, Cryptology ePrint Archive, Report 2018/1013
   Chillotti I, 2020, J CRYPTOL, V33, P34, DOI 10.1007/s00145-019-09319-x
   Chowdhary Sangeeta, 2021, WAHC '21: Proceedings of the 9th on Workshop on Encrypted Computing & Applied Homomorphic Cryptography, P43, DOI 10.1145/3474366.3486929
   Cousins DB, 2017, IEEE T EMERG TOP COM, V5, P193, DOI 10.1109/TETC.2016.2619669
   Cowan M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P375, DOI 10.1145/3453483.3454050
   Crockett E, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P1020, DOI 10.1145/3243734.3243828
   Crockett E, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P993, DOI 10.1145/2976749.2978402
   Dathathri R, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P546, DOI 10.1145/3385412.3386023
   Dathathri R, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P142, DOI 10.1145/3314221.3314628
   Dhem J.F., 1998, DESIGN EFFICIENT PUB
   Doröz Y, 2015, LECT NOTES COMPUT SC, V9293, P185, DOI 10.1007/978-3-662-48324-4_10
   Fan J., 2012, IACR CRYPTOLOGY EPRI, V2012, P144
   Gentry C, 2013, LECT NOTES COMPUT SC, V8042, P75, DOI 10.1007/978-3-642-40041-4_5
   Gorantala Shruthi, 2021, Cryptology ePrint Archive, Paper 2021/811
   Govindarajan S., 2020, SYFER MLIR INTEGRATI
   HEaaN, 2022, ABOUT US
   iDASH'22, 2022, TASK 2 SEC MOD EV HO
   Jung W., 2021, IACR Trans. Cryptogr. Hardw. Embed. Syst., P114, DOI DOI 10.46586/TCHES.V2021.I4.114-148
   Lattner C, 2021, INT SYM CODE GENER, P2, DOI 10.1109/CGO51591.2021.9370308
   Lee D, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P503, DOI 10.1145/3385412.3385996
   Lee Y, 2022, INT SYM CODE GENER, P193, DOI 10.1109/CGO53902.2022.9741265
   López-Alt A, 2012, STOC'12: PROCEEDINGS OF THE 2012 ACM SYMPOSIUM ON THEORY OF COMPUTING, P1219
   Mert AC, 2020, IEEE T VLSI SYST, V28, P353, DOI 10.1109/TVLSI.2019.2943127
   MONTGOMERY PL, 1985, MATH COMPUT, V44, P519, DOI 10.1090/S0025-5718-1985-0777282-X
   Ozcan Ali Sah, 2022, 20221222 CRYPT EPRIN
   Park Sunjae, 2023, SUPPLEMENTARY MAT HE, DOI [10.5281/zenodo.7813640, DOI 10.5281/ZENODO.7813640]
   SEAL, 2022, MICR SEAL REL 4 0
   van Elsloo T, 2019, Arxiv, DOI arXiv:1904.12840
   Viand A, 2023, Arxiv, DOI arXiv:2202.01649
   Viand A, 2018, WAHC'18: PROCEEDINGS OF THE 6TH WORKSHOP ON ENCRYPTED COMPUTING & APPLIED HOMOMORPHIC CRYPTOGRAPHY, P49, DOI 10.1145/3267973.3267978
   Wei Dai, 2016, Cryptography and Information Security in the Balkans. Second International Conference, BalkanCryptSec 2015. Revised Selected Papers: LNCS 9540, P169, DOI 10.1007/978-3-319-29172-7_11
   Zama, 2023, CONCR NUMP
NR 45
TC 1
Z9 1
U1 3
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 114
DI 10.1145/3591228
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900010
OA gold
DA 2024-07-18
ER

PT J
AU Surbatovich, M
   Spargo, N
   Jia, LM
   Lucia, B
AF Surbatovich, Milijana
   Spargo, Naomi
   Jia, Limin
   Lucia, Brandon
TI A Type System for Safe Intermittent Computing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE intermittent computing; energy harvesting; information flow; type
   systems
ID COMPUTATION; LANGUAGE
AB Batteryless energy-harvesting devices enable computing in inaccessible environments, at a cost to programmability and correctness. These devices operate intermittently as energy is available, using a recovery system to save and restore state. Some program tasks must execute atomically w.r.t. power failures, re-executing if power fails before completion. Any re-execution should typically be idempotent-its behavior should match the behavior of a single execution. Thus, a key aspect of correct intermittent execution is identifying and recovering state causing undesired non-idempotence. Unfortunately, past intermittent systems take an ad-hoc approach, using unsound datalow analyses or conservatively recovering all written state. Moreover, no prior work allows the programmer to directly specify idempotence requirements (including allowable non-idempotence).
   We present Curricle, the first type system approach to safe intermittence, for Rust. Type level reasoning allows programmers to express requirements and retains alias information crucial for sound analyses. Curricle uses information flow and type qualifiers to reject programs causing undesired non-idempotence. We implement Curricle's type system on top of Rust's compiler, evaluating the prototype on benchmarks from prior work. We find that Curricle benefits application programmers by allowing them to express idempotence requirements that are checked to be satisfied, and that targeting programs checked with Curricle allows intermittent system designers to write simpler recovery systems that perform better.
C1 [Surbatovich, Milijana; Spargo, Naomi; Jia, Limin; Lucia, Brandon] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Surbatovich, M (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM milijans@andrew.cmu.edu; nspargo@andrew.cmu.edu; liminjia@cmu.edu;
   blucia@cmu.edu
RI Jia, Lihua/ISU-7832-2023
OI Jia, Limin/0000-0002-8160-349X; Surbatovich,
   Milijana/0009-0004-6948-6683
FU National Science Foundation [2007998]; National Science Foundation
   CAREER Award [1751029]; CMU CyLab Security & Privacy Institute
FX We thank the reviewers for their feedback and Chao Wang for shepherding
   this work. We also thank the Abstract Research Lab at CMU, the
   Foundations of Programming group at MPI-SWS, and the PLDI SRC 2022
   judges for insightful feedback on early versions of Curricle. This work
   was generously funded in part through National Science Foundation Award
   2007998, National Science Foundation CAREER Award 1751029, and the CMU
   CyLab Security & Privacy Institute.
CR Adkins Joshua., 2016, Proceedings of the 14th ACM Conference on Embedded Network Sensor Systems. SenSys'16, P320, DOI [DOI 10.1145/2994551.2996542, 10.1145/2994551.2996542]
   Arreola AR, 2018, SENSORS-BASEL, V18, DOI 10.3390/s18010172
   Astrauskas V, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360573
   Balasubramanian A, 2017, OPER SYST REV, V51, P94, DOI 10.1145/3139645.3139660
   Balsamo D, 2016, IEEE T COMPUT AID D, V35, P1968, DOI 10.1109/TCAD.2016.2547919
   Balsamo D, 2015, IEEE EMBED SYST LETT, V7, P15, DOI 10.1109/LES.2014.2371494
   Berthou G, 2020, 21ST ACM SIGPLAN/SIGBED CONFERENCE ON LANGUAGES, COMPILERS, AND TOOLS FOR EMBEDDED SYSTEMS (LCTES '20), P85, DOI 10.1145/3372799.3394365
   Berthou G, 2017, 2017 GLOBAL INTERNET OF THINGS SUMMIT (GIOTS 2017), P189
   Biba Kenneth, 1977, Integrity considerations for secure computer systems
   Bocchino RL, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P535, DOI 10.1145/1926385.1926447
   Branco A, 2019, PROCEEDINGS OF THE 17TH CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS (SENSYS '19), P55, DOI 10.1145/3356250.3360033
   Colin A, 2016, ACM SIGPLAN NOTICES, V51, P514, DOI 10.1145/3022671.2983995
   Crichton W, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P1, DOI 10.1145/3519939.3523445
   Curtiss A, 2021, PROC ACM INTERACT MO, V5, DOI 10.1145/3494991
   Dang HH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371102
   de Kruijf M, 2013, INT SYM CODE GENER, P257
   de Kruijf M, 2012, ACM SIGPLAN NOTICES, V47, P475, DOI 10.1145/2345156.2254120
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   Gobieski G, 2019, MICRO'52: THE 52ND ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, P670, DOI 10.1145/3352460.3358277
   Guo XC, 2010, CONF PROC INT SYMP C, P371, DOI 10.1145/1816038.1816012
   Heintze N., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P365, DOI 10.1145/268946.268976
   Hester J, 2017, PROCEEDINGS OF THE 15TH ACM CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS (SENSYS'17), DOI 10.1145/3131672.3131673
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371109
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Kortbeek V, 2020, PROC ACM INTERACT MO, V4, DOI 10.1145/3432191
   Kortbeek V, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P85, DOI 10.1145/3373376.3378476
   Liu QR, 2018, 2018 51ST ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO), P258, DOI 10.1109/MICRO.2018.00029
   Lucia B, 2021, GETMOBILE-MOB COMPU, V25, P16, DOI 10.1145/3471440.3471446
   Lucia B, 2015, ACM SIGPLAN NOTICES, V50, P575, DOI [10.1145/2737924.2737978, 10.1145/2813885.2737978]
   Ma KS, 2018, ACM SIGPLAN NOTICES, V53, P782, DOI [10.1145/3173162.3177154, 10.1145/3296957.3177154]
   Ma KS, 2017, 50TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO), P204, DOI 10.1145/3123939.3124533
   Maeng K, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P129
   Maeng K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1005, DOI 10.1145/3385412.3385998
   Maeng K, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1101, DOI 10.1145/3314221.3314613
   Maeng K, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133920
   Maioli Andrea., 2020, Proceedings of the 8th International Workshop on Energy Harvesting and Energy-Neutral Sensing Systems, ENSsys'20, P1, DOI [10.1145/3417308.3430266, DOI 10.1145/3417308.3430266]
   Matsushita Y, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3462205
   Milano M, 2018, ACM SIGPLAN NOTICES, V53, P226, DOI [10.1145/3192366.3192375, 10.1145/3296979.3192375]
   NASA, 2019, WHAT IS KICKSAT 2
   Njor Emil, 2021, THESIS
   Pelley S, 2015, IEEE MICRO, V35, P125, DOI 10.1109/MM.2015.46
   Pelley S, 2014, CONF PROC INT SYMP C, P265, DOI 10.1109/ISCA.2014.6853222
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360561
   Raad A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276507
   Rajani Vineet, 2017, ACM SIGLOG News, V4, P6, DOI 10.1145/3051528.3051531
   Ramalingam G., 2013, FAULT TOLERANCE VIA
   Ruppel E, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1085, DOI 10.1145/3314221.3314583
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Surbatovich M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428231
   Surbatovich M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P851, DOI 10.1145/3453483.3454081
   Surbatovich Milijana, 2023, TECHN REP TYP SYST S, DOI [10.1184/R1/22583920, DOI 10.1184/R1/22583920]
   TI Inc, 2014, OV MSP430RXX FRAM
   Van der Woude J, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P17
   Weiss A, 2021, Arxiv, DOI arXiv:1903.00982
   Yildirim KS, 2018, SENSYS'18: PROCEEDINGS OF THE 16TH CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS, P41, DOI 10.1145/3274783.3274837
   Yildiz E, 2022, PROCEEDINGS OF THE 16TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, OSDI 2022, P339
   Zdancewic S, 2001, LECT NOTES COMPUT SC, V2028, P46
NR 57
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 136
DI 10.1145/3591250
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900032
OA gold
DA 2024-07-18
ER

PT J
AU Thijm, TA
   Beckett, R
   Gupta, A
   Walker, D
AF Thijm, Timothy Alberdingk
   Beckett, Ryan
   Gupta, Aarti
   Walker, David
TI Modular Control Plane Verification via Temporal Invariants
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE formal network verification; compositional reasoning; modular
   verification
ID GUARANTEE; ASSUME; CHECKING; PROOFS; RULE
AB Monolithic control plane verification cannot scale to hyperscale network architectures with tens of thousands of nodes, heterogeneous network policies and thousands of network changes a day. Instead, modular verification offers improved scalability, reasoning over diverse behaviors, and robustness following policy updates. We introduce Timepiece, a new modular control plane verification system. While one class of verifiers, starting with Minesweeper, were based on analysis of stable paths, we show that such models, when deployed naively for modular verification, are unsound. To rectify the situation, we adopt a routing model based around a logical notion of time and develop a sound, expressive, and scalable verification engine.
   Our system requires that a user specifies interfaces between module components. We develop methods for defining these interfaces using predicates inspired by temporal logic, and show how to use those interfaces to verify a range of network-wide properties such as reachability or access control. Verifying a prefix-filtering policy using a non-modular verification engine times out on an 80-node fattree network after 2 hours. However, Timepiece verifies a 2,000-node fattree in 2.37 minutes on a 96-core virtual machine. Modular verification of individual routers is embarrassingly parallel and completes in seconds, which allows verification to scale beyond non-modular engines, while still allowing the full power of SMT-based symbolic reasoning.
C1 [Thijm, Timothy Alberdingk; Gupta, Aarti; Walker, David] Princeton Univ, Princeton, NJ 08544 USA.
   [Beckett, Ryan] Microsoft Res, Redmond, WA USA.
C3 Princeton University; Microsoft
RP Thijm, TA (corresponding author), Princeton Univ, Princeton, NJ 08544 USA.
EM tthijm@cs.princeton.edu; ryan.beckett@microsoft.com;
   aartig@cs.princeton.edu; dpw@cs.princeton.edu
OI Walker, David/0000-0003-3681-149X; Alberdingk Thijm,
   Timothy/0000-0003-1758-5917; Gupta, Aarti/0000-0001-6676-9400
FU Network Programming Initiative; National Science Foundation [1837030,
   2107138]
FX We thank our anonymous reviewers and our shepherd, Jedidiah McClurg, for
   their helpful feedback. This work was supported in part by grants from
   the Network Programming Initiative and the National Science Foundation:
   1837030, 2107138.
CR Abd Elkader K, 2018, FORM ASP COMPUT, V30, P571, DOI 10.1007/s00165-017-0436-0
   Abhashkumar A, 2021, PROCEEDINGS OF THE 18TH USENIX SYMPOSIUM ON NETWORKED SYSTEM DESIGN AND IMPLEMENTATION, P65
   Abhashkumar A, 2020, PROCEEDINGS OF THE 17TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P201
   Al-Fares M, 2008, ACM SIGCOMM COMP COM, V38, P63, DOI 10.1145/1402946.1402967
   Thijm TA, 2022, Arxiv, DOI [arXiv:2204.10303, 10.48550/arXiv.2204.10303]
   Alur R, 1999, FORM METHOD SYST DES, V15, P7, DOI 10.1023/A:1008739929481
   Barrett C.W., 2018, Handbook of Model Checking, P305, DOI DOI 10.1007/978-3-319-10575-8_11
   Beckett R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371110
   Beckett R, 2018, PROCEEDINGS OF THE 2018 CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '18), P476, DOI 10.1145/3230543.3230583
   Beckett R, 2017, ACM SIGPLAN NOTICES, V52, P437, DOI [10.1145/3062341.3062367, 10.1145/3140587.3062367]
   Beckett R, 2017, SIGCOMM '17: PROCEEDINGS OF THE 2017 CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION, P155, DOI 10.1145/3098822.3098834
   Beckett R, 2016, PROCEEDINGS OF THE 2016 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '16), P328, DOI 10.1145/2934872.2934909
   Beckett Ryan, 2020, Proceedings of the 19th ACM Workshop on Hot Topics in Networks, P8, DOI [DOI 10.1145/3422604.3425930(P.117, 10.1145/3422604.3425930 (p. 117]
   Bobaru MG, 2008, LECT NOTES COMPUT SC, V5123, P135
   CISCO, 2005, US BGP COMM VAL CONT
   Clarke E, 2003, TIME-ICTL 2003: 10TH INTERNATIONAL SYMPOSIUM ON TEMPORAL REPRESENTATION AND REASONING AND FOURTH INTERNATIONAL CONFERENCE ON TEMPORAL LOGIC, PROCEEDINGS, P7
   Cobleigh JM, 2003, LECT NOTES COMPUT SC, V2619, P331
   Cohen A, 2007, LECT NOTES COMPUT SC, V4590, P55
   Daggitt ML, 2018, PROCEEDINGS OF THE 2018 CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '18), P103, DOI 10.1145/3230543.3230561
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Desai A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276529
   Fayaz SK, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P217
   Feamster N, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND SYMPOSIUM ON NETWORKED SYSTEMS DESIGN & IMPLEMENTATION (NSDI '05), P43
   Flanagan C, 2003, LECT NOTES COMPUT SC, V2648, P213
   Fogel Ari, 2015, 12 USENIX S NETWORKE
   Gember-Jacobson A, 2016, PROCEEDINGS OF THE 2016 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '16), P300, DOI 10.1145/2934872.2934876
   Giannakopoulou Dimitra, 2018, Handbook of Model Checking, P345, DOI DOI 10.1007/978-3-319-10575-8_12
   Giannarakis N, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P958, DOI 10.1145/3385412.3386019
   Griffin TG, 2005, ACM SIGCOMM COMP COM, V35, P1, DOI 10.1145/1090191.1080094
   Griffin TG, 2002, IEEE ACM T NETWORK, V10, P232, DOI 10.1109/90.993304
   GRUMBERG O, 1994, ACM T PROGR LANG SYS, V16, P843, DOI 10.1145/177492.177725
   Gupta A., 2011, Computer Aided Verification, P412, DOI [10.1007/978-3-642-22110-1_32, DOI 10.1007/978-3-642-22110-1_32]
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   HEDRICK C., 1988, ROUTING INFORM PROTO
   Henzinger TA, 2002, ACM T PROGR LANG SYS, V24, P51, DOI 10.1145/509705.509707
   Henzinger TA, 2000, ICCAD - 2000 : IEEE/ACM INTERNATIONAL CONFERENCE ON COMPUTER AIDED DESIGN, P245, DOI 10.1109/ICCAD.2000.896481
   Henzinger TA, 1998, LECT NOTES COMPUT SC, V1427, P440, DOI 10.1007/BFb0028765
   Internet2, 2013, INTERNET2
   Jayaraman K, 2019, SIGCOMM '19 - PROCEEDINGS OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION, P200, DOI 10.1145/3341302.3342094
   Jayaraman Karthick, 2019, VALIDATING DATACENTE
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kazemian P., 2013, NSDI
   Khurshid Ahmed., 2012, P ACM SIGCOMM HOTSDN, P15
   KURSHAN RP, 1988, LECT NOTES CONTR INF, V103, P19, DOI 10.1007/BFb0042302
   Lomuscio A, 2010, LECT NOTES COMPUT SC, V6447, P204, DOI 10.1007/978-3-642-16901-4_15
   Lopes NP, 2019, LECT NOTES COMPUT SC, V11388, P386, DOI 10.1007/978-3-030-11245-5_18
   Lopes Nuno P., 2015, 12th {USENIX} symposium on networked systems design and implementation, P499, DOI 10.5555/2789770.2789805
   Lougheed K., 1991, BORDER GATEWAY PROTO
   Ma HJ, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P370, DOI 10.1145/3341301.3359651
   McMillan KL, 1997, LECT NOTES COMPUT SC, V1254, P24
   Microsoft, 2021, INTR PLINQ
   Miller Ron, 2022, OVERALL CLOUD INFRAS
   MISRA J, 1981, IEEE T SOFTWARE ENG, V7, P417, DOI 10.1109/TSE.1981.230844
   Moy J, 1998, OPEN SHORTEST PATH 1
   Oran D., 1990, OSI IS-IS Intra-domain Routing Protocol - RFC 1142
   OWICKI S, 1976, COMMUN ACM, V19, P279, DOI 10.1145/360051.360224
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Pepelnjak Ivan., 2018, VALLEY FREE ROUTING
   Pnueli A., 1985, Proceedings of the NATO Advanced Study Institute on Logics and Models of Concurrent Systems, P123, DOI DOI 10.1007/978-3-642-82453-1_5
   Prabhu S, 2020, PROCEEDINGS OF THE 17TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P953
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sergey I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158116
   SMT-LIB, 2010, INTS
   SMT-LIB, 2010, ARRAYSEX
   SMT-LIB, 2020, UN STRINGS
   SMT-LIB, 2010, FIXEDSIZEBITVECTORS
   Sobrinho JL, 2005, IEEE ACM T NETWORK, V13, P1160, DOI 10.1109/TNET.2005.857111
   Strickx T., 2022, Cloudflare outage on June 21, 2022
   Tang AL, 2022, Arxiv, DOI arXiv:2204.09635
   Thijm TA, 2022, I C NETWORK PROTOCOL, DOI 10.1109/ICNP55882.2022.9940333
   Thijm Timothy Alberdingk, 2023, TIMEPIECE
   Vigliarolo Brandon., 2022, CONFIG ERROR TAKES R
   Weitz K, 2016, ACM SIGPLAN NOTICES, V51, P765, DOI 10.1145/3022671.2984012
   Weitz Konstantin., 2016, GETTING STARTED BAGP
   Yao JA, 2021, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '21), P405
   Ye FD, 2020, SIGCOMM '20: PROCEEDINGS OF THE 2020 ANNUAL CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION ON THE APPLICATIONS, TECHNOLOGIES, ARCHITECTURES, AND PROTOCOLS FOR COMPUTER COMMUNICATION, P599, DOI 10.1145/3387514.3406217
   Zhang P, 2022, PROCEEDINGS OF THE 19TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI '22), P601
NR 77
TC 1
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 108
DI 10.1145/3591222
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900004
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Tunç, HC
   Mathur, U
   Pavlogiannis, A
   Viswanathan, M
AF Tunc, Hünkar Can
   Mathur, Umang
   Pavlogiannis, Andreas
   Viswanathan, Mahesh
TI Sound Dynamic Deadlock Prediction in Linear Time
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrency; runtime analyses; predictive analyses
ID POTENTIAL DEADLOCKS; COMPLEXITY
AB Deadlocks are one of the most notorious concurrency bugs, and significant research has focused on detecting them efficiently. Dynamic predictive analyses work by observing concurrent executions, and reason about alternative interleavings that can witness concurrency bugs. Such techniques offer scalability and sound bug reports, and have emerged as an effective approach for concurrency bug detection, such as data races. Effective dynamic deadlock prediction, however, has proven a challenging task, as no deadlock predictor currently meets the requirements of soundness, high-precision, and efficiency. In this paper, we first formally establish that this tradeoff is unavoidable, by showing that (a) sound and complete deadlock prediction is intractable, in general, and (b) even the seemingly simpler task of determining the presence of potential deadlocks, which often serve as unsound witnesses for actual predictable deadlocks, is intractable. The main contribution of this work is a new class of predictable deadlocks, called sync(hronization)preserving deadlocks. Informally, these are deadlocks that can be predicted by reordering the observed execution while preserving the relative order of conflicting critical sections. We present two algorithms for sound deadlock prediction based on this notion. Our first algorithm SPDOffline detects all sync-preserving deadlocks, with running time that is linear per abstract deadlock pattern, a novel notion also introduced in this work. Our second algorithm SPDOnline predicts all sync-preserving deadlocks that involve two threads in a strictly online fashion, runs in overall linear time, and is better suited for a runtime monitoring setting. We implemented both our algorithms and evaluated their ability to perform offline and online deadlockprediction on a large dataset of standard benchmarks. Our results indicate that our new notion of syncpreserving deadlocks is highly effective, as (i) it can characterize the vast majority of deadlocks and (ii) it can be detected using an online, sound, complete and highly efficient algorithm.
C1 [Tunc, Hünkar Can; Pavlogiannis, Andreas] Aarhus Univ, Aarhus, Denmark.
   [Mathur, Umang] Natl Univ Singapore, Singapore, Singapore.
   [Viswanathan, Mahesh] Univ Illinois, Champaign, IL USA.
C3 Aarhus University; National University of Singapore; University of
   Illinois System; University of Illinois Urbana-Champaign
RP Tunç, HC (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM tunc@cs.au.dk; umathur@comp.nus.edu.sg; pavlogiannis@cs.au.dk;
   vmahesh@illinois.edu
RI Pavlogiannis, Andreas/X-6831-2018
OI Pavlogiannis, Andreas/0000-0002-8943-0722; Tunc, Hunkar
   Can/0000-0001-9125-8506; Mathur, Umang/0000-0002-7610-0660
FU VILLUM FONDEN [VIL42117]; Simons Institute for the Theory of Computing;
   Singapore Ministry of Education (MoE) Academic Research Fund (AcRF) Tier
   1 grant; NSF [SHF 1901069, CCF 2007428]
FX Andreas Pavlogiannis was partially supported by a research grant
   (VIL42117) from VILLUM FONDEN. Umang Mathur was partially supported by
   the Simons Institute for the Theory of Computing, and by a Singapore
   Ministry of Education (MoE) Academic Research Fund (AcRF) Tier 1 grant.
   Mahesh Viswanathan was partially supported by NSF SHF 1901069 and NSF
   CCF 2007428.
CR Agarwal R, 2006, LECT NOTES COMPUT SC, V3875, P191
   [Anonymous], 2013, Runtime Verification, DOI DOI 10.1007/978-3-642
   [Anonymous], 2011, Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineering (FSE'11), DOI [10.1145/2025113.2025121, DOI 10.1145/2025113.2025121]
   Bensalem S., 2006, PADTAD'06, P41, DOI DOI 10.1145/1147403.1147412
   Bensalem S, 2006, LECT NOTES COMPUT SC, V3875, P208
   Biswas S, 2014, ACM SIGPLAN NOTICES, V49, P28, DOI [10.1145/2666356.2594323, 10.1145/2594291.2594323]
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Cai Y, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P255, DOI 10.1145/3468264.3468549
   Cai Y, 2020, PROC INT CONF SOFTW, P1298, DOI 10.1145/3377811.3380367
   Cai Y, 2014, IEEE T SOFTWARE ENG, V40, P266, DOI 10.1109/TSE.2014.2301725
   Cai Y, 2012, PROC INT CONF SOFTW, P606, DOI 10.1109/ICSE.2012.6227156
   Chen J, 2006, J COMPUT SYST SCI, V72, P1346, DOI 10.1016/j.jcss.2006.04.007
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Eslamimehr M, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P353, DOI 10.1145/2635868.2635918
   Farchi E., 2003, Proceedings International Parallel and Distributed Processing Symposium, DOI 10.1109/IPDPS.2003.1213511
   Farzan A, 2009, LECT NOTES COMPUT SC, V5505, P155, DOI 10.1007/978-3-642-00768-2_14
   FIDGE C, 1991, COMPUTER, V24, P28, DOI 10.1109/2.84874
   Flanagan C, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P121, DOI 10.1145/1542476.1542490
   Flanagan C, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P293, DOI 10.1145/1375581.1375618
   Genç K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360605
   Gibbons PB, 1997, SIAM J COMPUT, V26, P1208, DOI 10.1137/S0097539794279614
   Havelund K, 2000, LECT NOTES COMPUT SC, V1885, P245
   Huang J, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P609, DOI 10.1145/3180155.3180225
   Huang J, 2014, ACM SIGPLAN NOTICES, V49, P337, DOI [10.1145/2666356.2594315, 10.1145/2594291.2594315]
   Johnson D. B., 1975, SIAM Journal on Computing, V4, P77, DOI 10.1137/0204007
   Joshi P, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P110, DOI 10.1145/1542476.1542489
   Joshi Pallavi, 2010, P 18 ACM SIGSOFT INT, P327, DOI 10.1145/1882291.1882339
   Jula H., 2008, OSDI, P295
   Kalhauge CG, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276516
   Kini D, 2017, ACM SIGPLAN NOTICES, V52, P157, DOI [10.1145/3062341.3062374, 10.1145/3140587.3062374]
   Kulkarni Rucha, 2021, 32 INT C CONC THEOR, V16, P1
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Liu BZ, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P725, DOI 10.1145/3453483.3454073
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Mathur U, 2023, Arxiv, DOI arXiv:2304.03692
   Mathur U, 2020, IEEE S LOG, P713, DOI 10.1145/3373718.3394783
   Mathur U, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P183, DOI 10.1145/3373376.3378475
   Mattern F., 1989, Parallel and Distributed Algorithms. Proceedings of the International Workshop, P215
   Musuvathi M., 2008, P 8 USENIX C OP SYST
   Naik M, 2009, PROC INT CONF SOFTW, P386, DOI 10.1109/ICSE.2009.5070538
   Ng N, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P174, DOI 10.1145/2892208.2892232
   Pavlogiannis A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371085
   Pozniansky E, 2003, ACM SIGPLAN NOTICES, V38, P178, DOI 10.1145/966049.781529
   Rhodes D, 2017, ACM SIGPLAN NOTICES, V52, P141, DOI [10.1145/3140587.3062350, 10.1145/3062341.3062350]
   Roemer J, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P747, DOI 10.1145/3385412.3385993
   Rosu Grigore, 2018, RV PREDICT RUNTIME V
   Said M, 2011, LECT NOTES COMPUT SC, V6617, P313, DOI 10.1007/978-3-642-20398-5_23
   Samak M, 2014, ACM SIGPLAN NOTICES, V49, P29, DOI [10.1145/2692916.2555262, 10.1145/2555243.2555262]
   Samak M, 2014, ACM SIGPLAN NOTICES, V49, P473, DOI [10.1145/2714064.2660238, 10.1145/2660193.2660238]
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   Sen K, 2005, LECT NOTES COMPUT SC, V3535, P211
   Serebryany Konstantin, 2009, Proceedings of the Workshop on Binary Instrumentation and Applications, WBIA'09, P62, DOI DOI 10.1145/1791194.1791203
   Smaragdakis Y, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P387
   Smith L. A., 2001, P 2001 ACMIEEE C SUP, P8, DOI [10.1145/582034.582042, DOI 10.1145/582034.582042]
   Sorrentino F, 2015, LECT NOTES COMPUT SC, V9232, P179, DOI 10.1007/978-3-319-23404-5_13
   Tu TF, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P865, DOI 10.1145/3297858.3304069
   Tunc Hunkar Can, 2023, Zenodo, DOI 10.5281/ZENODO.7809600
   Umang Mathur, 2019, RAPID
   Vasillevska-Williams Virginia, 2019, P INT C MATH ICM 19, P3447, DOI DOI 10.1142/9789813272880_0188
   Williams R, 2005, THEOR COMPUT SCI, V348, P357, DOI 10.1016/j.tcs.2005.09.023
   Zhou JP, 2017, IEEE INT CONF AUTOM, P729, DOI 10.1109/ASE.2017.8115684
NR 61
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 177
DI 10.1145/3591291
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900073
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Yuviler, T
   Drachsler-Cohen, D
AF Yuviler, Tom
   Drachsler-Cohen, Dana
TI One Pixel Adversarial Attacks via Sketched Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; adversarial attack; computer vision
ID DIFFERENTIAL EVOLUTION
AB Neural networks are successful in various tasks but are also susceptible to adversarial examples. An adversarial example is generated by adding a small perturbation to a correctly-classified input with the goal of causing a network classiffier to misclassify. In one pixel attacks, an attacker aims to fool an image classifier by modifying a single pixel. This setting is challenging for two reasons: the perturbation region is very small and the perturbation is not differentiable. To cope, one pixel attacks iteratively generate candidate adversarial examples and submit them to the network until finding a successful candidate. However, existing works require a very large number of queries, which is infeasible in many practical settings, where the attacker is limited to a few thousand queries to the network. We propose a novel approach for computing one pixel attacks. The key idea is to leverage program synthesis and identify an expressive program sketch that enables to compute adversarial examples using significantly fewer queries. We introduce OPPSLA, a synthesizer that, given a classifier and a training set, instantiates the sketch with customized conditions over the input's pixels and the classifier's output. OPPSLA employs a stochastic search, inspired by the Metropolis-Hastings algorithm, that synthesizes typed expressions enabling minimization of the number of queries to the classifier. We further show how to extend OPPSLA to compute few pixel attacks minimizing the number of perturbed pixels. We evaluate OPPSLA on several deep networks for CIFAR-10 and ImageNet. We show that OPPSLA obtains a state-of-the-art success rate, often with an order of magnitude fewer queries than existing attacks. We further show that OPPSLA's programs are transferable to other classiffiers, unlike existing one pixel attacks, which run from scratch on every classifier and input.
C1 [Yuviler, Tom; Drachsler-Cohen, Dana] Technion, Haifa, Israel.
C3 Technion Israel Institute of Technology
RP Yuviler, T (corresponding author), Technion, Haifa, Israel.
EM tom.yuviler@campus.technion.ac.il; ddana@ee.technion.ac.il
FU Israel Science Foundation [2605/20]
FX We thank our shepherd Satish Chandra and the anonymous reviewers for
   their insightful feedback. This research was supported by the Israel
   Science Foundation (grant No. 2605/20).
CR Aishan Liu, 2020, Computer Vision - ECCV 2020. 16th European Conference. Proceedings. Lecture Notes in Computer Science (LNCS 12358), P395, DOI 10.1007/978-3-030-58601-0_24
   Alatalo Janne, 2022, NETYS, DOI [10.1007/978-3-031-17436-0_20, DOI 10.1007/978-3-031-17436-0_20]
   Albarghouthi Aws, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P934, DOI 10.1007/978-3-642-39799-8_67
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, LECT NOTES COMPUT SC, V9207, P163, DOI 10.1007/978-3-319-21668-3_10
   Andrieu C, 2003, MACH LEARN, V50, P5, DOI 10.1023/A:1020281327116
   Andriushchenko Maksym, 2020, Computer Vision - ECCV 2020. 16th European Conference. Proceedings. Lecture Notes in Computer Science (LNCS 12368), P484, DOI 10.1007/978-3-030-58592-1_29
   [Anonymous], 2018, ICML
   Bhattad A., 2020, ICLR, P1
   Brown TB, 2018, Arxiv, DOI arXiv:1712.09665
   Carlini N, 2017, P IEEE S SECUR PRIV, P39, DOI 10.1109/SP.2017.49
   Casper S, 2022, Arxiv, DOI arXiv:2110.03605
   CHIB S, 1995, AM STAT, V49, P327, DOI 10.2307/2684568
   Croce F, 2019, IEEE I CONF COMP VIS, P4723, DOI 10.1109/ICCV.2019.00482
   Croce Francesco, 2022, AAAI 2022
   Das S, 2011, IEEE T EVOLUT COMPUT, V15, P4, DOI 10.1109/TEVC.2010.2059031
   Demontis A, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P321
   Deng J, 2009, PROC CVPR IEEE, P248, DOI 10.1109/CVPRW.2009.5206848
   Dong Xiaoyi, 2020, NEURIPS 2020
   Ferdowsifard K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485530
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Goodfellow I.J., 2015, PROC 3 INT C LEARN R
   Goodman ND, 2008, COGNITIVE SCI, V32, P108, DOI 10.1080/03640210701802071
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Hao Qiu, 2021, GECCO '21: Proceedings of the Genetic and Evolutionary Computation Conference Companion, P1827, DOI 10.1145/3449726.3463137
   Hashemi AS, 2020, Arxiv, DOI arXiv:2010.14919
   He KM, 2016, PROC CVPR IEEE, P770, DOI 10.1109/CVPR.2016.90
   Hein D, 2018, ENG APPL ARTIF INTEL, V76, P158, DOI 10.1016/j.engappai.2018.09.007
   Hosseini H, 2018, IEEE COMPUT SOC CONF, P1695, DOI 10.1109/CVPRW.2018.00212
   Huang G, 2017, PROC CVPR IEEE, P2261, DOI 10.1109/CVPR.2017.243
   Karnopp DC., 1963, Automatica, V1, P111, DOI [DOI 10.1016/0005-1098(63)90018-9, 10.1016/0005-1098(63)90018-9]
   Khrulkov V, 2018, PROC CVPR IEEE, P8562, DOI 10.1109/CVPR.2018.00893
   KOZA JR, 1994, STAT COMPUT, V4, P87, DOI 10.1007/BF00175355
   Krizhevsky Alex, 2009, LEARNING MULTIPLE LA
   Kurakin A., 2016, WORKSHOP TRACK P
   Levine Alexander, 2020, AAAI 2020
   Li PC, 2018, IEEE DATA MINING, P1200, DOI 10.1109/ICDM.2018.00159
   Li Qizhang, 2020, NEURIPS 2020
   Meunier Laurent, 2019, arXiv
   Moosavi-Dezfooli SM, 2017, PROC CVPR IEEE, P86, DOI 10.1109/CVPR.2017.17
   Moosavi-Dezfooli SM, 2016, PROC CVPR IEEE, P2574, DOI 10.1109/CVPR.2016.282
   Mopuri KR, 2018, PROC CVPR IEEE, P742, DOI 10.1109/CVPR.2018.00084
   Narodytska N, 2017, IEEE COMPUT SOC CONF, P1310, DOI 10.1109/CVPRW.2017.172
   Nguyen-Son HQ, 2021, IEEE IJCNN, DOI 10.1109/IJCNN52387.2021.9534332
   Papernot N, 2017, PROCEEDINGS OF THE 2017 ACM ASIA CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (ASIA CCS'17), P506, DOI 10.1145/3052973.3053009
   Papernot N, 2016, 1ST IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY, P372, DOI 10.1109/EuroSP.2016.36
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Pomponi Jary, 2022, IJCNN 2022, P1, DOI [10.1109/IJCNN55064.2022.9892966, DOI 10.1109/IJCNN55064.2022.9892966]
   Quan W, 2021, PROC SPIE, V11755, DOI 10.1117/12.2581377
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2594291.2594321, 10.1145/2666356.2594321]
   Schkufza E, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI 10.1145/2499368.2451150
   Schönherr L, 2019, 26TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2019), DOI 10.14722/ndss.2019.23288
   Simonyan K, 2015, Arxiv, DOI arXiv:1409.1556
   Singh R, 2017, PROC VLDB ENDOW, V11, P189, DOI 10.14778/3149193.3149199
   Solar-Lezama A, 2009, LECT NOTES COMPUT SC, V5904, P4, DOI 10.1007/978-3-642-10672-9_3
   Srivastava S., 2013, STTT, V15, P497, DOI DOI 10.1007/S10009-012-0223-4
   Storn R, 1997, J GLOBAL OPTIM, V11, P341, DOI 10.1023/A:1008202821328
   Su JW, 2019, Arxiv, DOI arXiv:1710.08864
   Szegedy C, 2014, Arxiv, DOI [arXiv:1312.6199, DOI 10.1109/CVPR.2015.7298594]
   Szegedy C, 2015, PROC CVPR IEEE, P1, DOI 10.1109/CVPR.2015.7298594
   Tabacof P, 2016, IEEE IJCNN, P426, DOI 10.1109/IJCNN.2016.7727230
   Vargas Danilo Vasconcellos, 2020, IJCAI PRICAI WORKSHO
   Verma A, 2018, PR MACH LEARN RES, V80
   Vladu Adrian, 2018, PROC 6 INT C LEARN R
   Wang YX, 2022, INFORM SCIENCES, V610, P14, DOI 10.1016/j.ins.2022.07.157
   Wei ZP, 2022, AAAI CONF ARTIF INTE, P2668
   Wierstra D, 2008, IEEE C EVOL COMPUTAT, P3381, DOI 10.1109/CEC.2008.4631255
   Wiyatno R, 2018, Arxiv, DOI arXiv:1808.07945
   Yang Bai, 2020, Computer Vision - ECCV 2020. 16th European Conference. Proceedings. Lecture Notes in Computer Science (LNCS 12370), P101, DOI 10.1007/978-3-030-58595-2_7
   Yu XY, 2019, IEEE T NEUR NET LEAR, V30, P2805, DOI 10.1109/TNNLS.2018.2886017
   Zhang C., 2021, P 31 INT JOINT C ART, P4687, DOI DOI 10.24963/IJCAI
   Zhang QL, 2022, Arxiv, DOI [arXiv:2203.04607, 10.48550/arXiv.2203.04607]
   Zhou W, 2018, LECT NOTES COMPUT SC, V11218, P471, DOI 10.1007/978-3-030-01264-9_28
   Zolfi A, 2021, PROC CVPR IEEE, P15227, DOI 10.1109/CVPR46437.2021.01498
NR 74
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 187
DI 10.1145/3591301
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900083
OA gold
DA 2024-07-18
ER

PT J
AU Fox, ACJ
   Stockwell, G
   Xiong, SL
   Becker, H
   Mulligan, DP
   Petri, G
   Chong, N
AF Fox, Anthony C. J.
   Stockwell, Gareth
   Xiong, Shale
   Becker, Hanno
   Mulligan, Dominic P.
   Petri, Gustavo
   Chong, Nathan
TI A Verification Methodology for the Arm® Confidential Computing
   Architecture
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Arm Confidential Computing Architecture (Arm CCA); formal methods;
   separation kernel; Confidential Computing; operating system verification
ID HYPERVISOR
AB We present Arm's efforts in verifying the specification and prototype reference implementation of the Realm Management Monitor (RMM), an essential firmware component of Arm Confidential Computing Architecture (Arm CCA), the recently-announced Confidential Computing technologies incorporated in the Armv9-A architecture. Arm CCA introduced the Realm Management Extension (RME), an architectural extension for Armv9-A, and a technology that will eventually be deployed in hundreds of millions of devices. Given the security-critical nature of the RMM, and its taxing threat model, we use a combination of interactive theorem proving, model checking, and concurrency-aware testing to validate and verify security and safety properties of both the specification and a prototype implementation of the RMM. Crucially, our verification efforts were, and are still being, developed and refined contemporaneously with active development of both specification and implementation, and have been adopted by Arm's product teams. We describe our major achievements, realized through the application of formal techniques, as well as challenges that remain for future work. We believe that the work reported in this paper is the most thorough application of formal techniques to the design and implementation of any current commercially-viable Confidential Computing implementation, setting a new high-water mark for work in this area.
C1 [Fox, Anthony C. J.; Stockwell, Gareth; Xiong, Shale] Arm, Architecture & Technol Grp, Cambridge, England.
   [Becker, Hanno; Mulligan, Dominic P.; Petri, Gustavo] Amazon Web Serv, Automated Reasoning Grp, Cambridge, England.
   [Chong, Nathan] Amazon Web Serv, Automated Reasoning Grp, Seattle, WA USA.
C3 Amazon.com
RP Fox, ACJ (corresponding author), Arm, Architecture & Technol Grp, Cambridge, England.
EM anthony.fox@arm.com; gareth.stockwell@arm.com; shale.xiong@arm.com;
   beckphan@amazon.co.uk; dommul@amazon.co.uk; gfpetri@amazon.co.uk;
   ncchong@amazon.com
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Amazon Inc, 2022, AWS CBMC VIEW
   Arm Limited, 2022, Arm Architecture Reference Manual for A-profile Architecture
   ARM Limited, 2021, ARM confidential compute architecture
   Arm Ltd, 2008, ARM SEC TECHN BUILD
   Arm Ltd, 2022, REALM MAN MON BETA0
   Arm Ltd, 2022, INTR IR NEW GEN DEB
   BEVIER WR, 1989, IEEE T SOFTWARE ENG, V15, P1382, DOI 10.1109/32.41331
   Blanchard Allan, 2015, Formal Methods for Industrial Critical Systems. 20th International Workshop, FMICS 2015. Proceedings: LNCS 9128, P15, DOI 10.1007/978-3-319-19458-5_2
   Blanchard A, 2018, PROCEEDINGS 2018 INTERNATIONAL CONFERENCE ON HIGH PERFORMANCE COMPUTING & SIMULATION (HPCS), P21, DOI 10.1109/HPCS.2018.00018
   Blanchet Bruno, 2014, Foundations of Security Analysis and Design VII. FOSAD 2012/2013 Tutorial Lectures: LNCS 8604, P54, DOI 10.1007/978-3-319-10082-1_3
   Chen H, 2018, J AUTOM REASONING, V61, P141, DOI 10.1007/s10817-017-9446-0
   Chong Nathan, 2021, EMBEDDEDWORLD C, P202
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Coker G, 2011, INT J INF SECUR, V10, P63, DOI 10.1007/s10207-011-0124-7
   Cook B., 2020, P 20 C FORMAL METHOD, P185
   Dam M., 2013, P 3 INT WORKSHOP TRU, DOI [10.1145/2517300.2517302, DOI 10.1145/2517300.2517302]
   Dam M., 2013, 2013 ACM SIGSAC C CO, P223
   Ferraiuolo A, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P287, DOI 10.1145/3132747.3132782
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Gu Liang., 2011, P 2 ASIA PACIFIC WOR, P3
   Gu RH, 2019, COMMUN ACM, V62, P89, DOI 10.1145/3356903
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Haque I, 2020, LECT NOTES COMPUT SC, V12302, P305, DOI 10.1007/978-3-030-59152-6_17
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Klein G, 2010, COMMUN ACM, V53, P107, DOI 10.1145/1743546.1743574
   Kragl Bernhard, 2021, 2021 Formal Methods in Computer Aided Design (FMCAD), P143, DOI 10.34727/2021/isbn.978-3-85448-046-4_23
   Kroening D., 2014, CBMC-C bounded model checker, P389, DOI DOI 10.1007/978-3-642-54862-8_26
   Leinenbach D, 2009, LECT NOTES COMPUT SC, V5850, P806, DOI 10.1007/978-3-642-05089-3_51
   Leslie-Hurd R, 2015, LECT NOTES COMPUT SC, V9207, P144, DOI 10.1007/978-3-319-21668-3_9
   Li XP, 2022, PROCEEDINGS OF THE 16TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, OSDI 2022, P465
   Linaro Ltd, 2022, TRUSTEDFIRMWARE A
   Linaro Ltd, 2022, OP PORT TRUST EX ENV
   Mangano Frederic, 2017, Risks and Security of Internet and Systems. 11th International Conference, CRiSIS 2016. Revised Selected Papers: LNCS 10158, P114, DOI 10.1007/978-3-319-54876-0_9
   McCoyd M, 2013, P ANN HICSS, P5069, DOI 10.1109/HICSS.2013.121
   Meier Simon, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P696, DOI 10.1007/978-3-642-39799-8_48
   Nelson L, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P225, DOI 10.1145/3341301.3359641
   Nemati H, 2015, LECT NOTES COMPUT SC, V8939, P578, DOI 10.1007/978-3-662-46078-8_48
   Pék G, 2013, ACM COMPUT SURV, V45, DOI 10.1145/2480741.2480757
   Reid A, 2016, PROCEEDINGS OF THE 2016 16TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2016), P161
   Reid A, 2016, LECT NOTES COMPUT SC, V9780, P42, DOI 10.1007/978-3-319-41540-6_3
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sardar Muhammad Usama, 2020, Formal Methods and Software Engineering. 22nd International Conference on Formal Engineering Methods, ICFEM 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12531), P268, DOI 10.1007/978-3-030-63406-3_16
   Sardar MU, 2021, IEEE ACCESS, V9, P83067, DOI 10.1109/ACCESS.2021.3087421
   Sardar MU, 2020, 2020 23RD EUROMICRO CONFERENCE ON DIGITAL SYSTEM DESIGN (DSD 2020), P604, DOI 10.1109/DSD51259.2020.00099
   Sewell Thomas, 2011, Interactive Theorem Proving. Proceedings Second International Conference, ITP 2011, P325, DOI 10.1007/978-3-642-22863-6_24
   Li SW, 2021, PROCEEDINGS OF THE 30TH USENIX SECURITY SYMPOSIUM, P3953
   Shih-Wei Li, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P1782, DOI 10.1109/SP40001.2021.00049
   Tao RZ, 2021, PROCEEDINGS OF THE 28TH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, SOSP 2021, P866, DOI 10.1145/3477132.3483560
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
NR 52
TC 1
Z9 1
U1 4
U2 11
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586040
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600015
OA gold
DA 2024-07-18
ER

PT J
AU Ding, S
   Zhang, QR
AF Ding, Shuo
   Zhang, Qirun
TI Witnessability of Undecidable Problems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Mathematical Logic; Program Semantics; Automated Theorem Proving
AB Many problems in programming language theory and formal methods are undecidable, so they cannot be solved precisely. Practical techniques for dealing with undecidable problems are often based on decidable approximations. Undecidability implies that those approximations are always imprecise. Typically, practitioners use heuristics and ad hoc reasoning to identify imprecision issues and improve approximations, but there is a lack of computability-theoretic foundations about whether those efforts can succeed.
   This paper shows a surprising interplay between undecidability and decidable approximations: there exists a class of undecidable problems, such that it is computable to transform any decidable approximation to a witness input demonstrating its imprecision. We call those undecidable problems witnessable problems. For example, if a program property % is witnessable, then there exists a computable function 5%, such that 5% takes as input the code of any program analyzer targeting % and produces an input program F on which the program analyzer is imprecise. An even more surprising fact is that the class of witnessable problems includes almost all undecidable problems in programming language theory and formal methods. Specifically, we prove the diagonal halting problem is witnessable, and the class of witnessable problems is closed under complements and many-one reductions. In particular, all "non-trivial semantic properties of programs" mentioned in Rice's theorem are witnessable. We also explicitly construct a problem in the non-witnessable (and undecidable) class and show that both classes have cardinality 2. 0.
   Our results offer a new perspective on the understanding of undecidability: for witnessable problems, although it is impossible to solve them precisely, it is always possible to improve any decidable approximation to make it closer to the precise solution. This fact formally demonstrates that research efforts on such approximations are promising and shows there exist universal ways to identify precision issues of program analyzers, program verifiers, SMT solvers, etc., because their essences are decidable approximations of witnessable problems.
C1 [Ding, Shuo; Zhang, Qirun] Georgia Inst Technol, Atlanta, GA 30332 USA.
C3 University System of Georgia; Georgia Institute of Technology
RP Ding, S (corresponding author), Georgia Inst Technol, Atlanta, GA 30332 USA.
EM sding@gatech.edu; qrzhang@gatech.edu
OI Zhang, Qirun/0000-0001-5367-9377
FU Amazon; United States National Science Foundation (NSF) [1917924,
   2114627]; Defense Advanced Research Projects Agency (DARPA)
   [N66001-21-C-4024]; Direct For Computer & Info Scie & Enginr; Division
   of Computing and Communication Foundations [1917924, 2114627] Funding
   Source: National Science Foundation
FX We thank the anonymous reviewers for their feedback on earlier drafts of
   this paper. We also thank Anton Bernshteyn for discussions about related
   topics in computability theory and descriptive set theory. This work was
   supported, in part, by Amazon under an Amazon Research Award in
   automated reasoning; by the United States National Science Foundation
   (NSF) under grants No. 1917924 and No. 2114627; and by the Defense
   Advanced Research Projects Agency (DARPA) under grant N66001-21-C-4024.
   Any opinions, findings, conclusions, or recommendations expressed in
   this publication are those of the authors and do not necessarily reflect
   the views of the above sponsoring entities.
CR Abdulla PA, 1996, INFORM COMPUT, V130, P71, DOI 10.1006/inco.1996.0083
   Aiken A, 1999, SCI COMPUT PROGRAM, V35, P79, DOI 10.1016/S0167-6423(99)00007-6
   [Anonymous], 1958, J. Symb. Log., DOI [10.2307/2964292, DOI 10.2307/2964292]
   [Anonymous], 1980, Computability: An introduction to recursive function theory
   [Anonymous], 1944, Bull. Am. Math. Soc
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Arora S., 1998, Proceedings of the Thirtieth Annual ACM Symposium on Theory of Computing, P337, DOI 10.1145/276698.276784
   Asperti A, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P113, DOI 10.1145/1328438.1328455
   Baldan Paolo, 2021, SCHLOSS DAGSTUHL LEI, V117, P1, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Bonacina MP, 2006, LECT NOTES ARTIF INT, V4130, P513
   Bruni R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371096
   Church A, 1936, AM J MATH, V58, P345, DOI 10.2307/2371045
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Cousot P., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P170, DOI 10.1145/224164.224199
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Day JD, 2018, LECT NOTES COMPUT SC, V11123, P15, DOI 10.1007/978-3-030-00250-3_2
   Dima C., 2011, arXiv
   Ganesh Vijay, 2013, Hardware and Software: Verification and Testing. 8th International Haifa Verification Conference, HVC 2012 Revised Selected Papers. LNCS 7857, P209, DOI 10.1007/978-3-642-39611-3_21
   Giacobazzi R, 2015, ACM SIGPLAN NOTICES, V50, P261, DOI [10.1145/2775051.2676987, 10.1145/2676726.2676987]
   Godel K., 1931, Monatshefte fur Mathematik und Physik, V38, P173, DOI 10.1007/BF01700692
   Hu JZS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371077
   Jech T., 2013, SET THEORY 3 MILLENN
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   Landi W., 1992, ACM Letters on Programming Languages and Systems, V1, P323, DOI 10.1145/161494.161501
   Liang SY, 2014, IEEE INT WORK C SO, P225, DOI 10.1109/SCAM.2014.40
   Matthew Flatt, 2010, PLTTR20101
   Moyen JY, 2019, LECT NOTES COMPUT SC, V11558, P217, DOI 10.1007/978-3-030-22996-2_19
   Myhill John, 1957, J SYMBOLIC LOGIC, V22, P1, DOI [10.2307/2964061, DOI 10.2307/2964061]
   Pierce B. C., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P305, DOI 10.1145/143165.143228
   POST EL, 1946, B AM MATH SOC, V52, P264, DOI 10.1090/S0002-9904-1946-08555-9
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Reps T, 2000, ACM T PROGR LANG SYS, V22, P162, DOI 10.1145/345099.345137
   SHOENFIELD JR, 1959, ANN MATH, V69, P644, DOI 10.2307/1970028
   Sipser M., 2013, INTRO THEORY COMPUTA, V3
   Soare R. I., 1987, Recursively Enumerable Sets and Degrees. A Study of Computable Functions and Computably Generated Sets
   Turing AM, 1937, P LOND MATH SOC, V42, P230, DOI 10.1112/plms/s2-42.1.230
   Vazirani V.V., 2001, Approximation algorithms, V1
   Wells JB, 1999, ANN PURE APPL LOGIC, V98, P111, DOI 10.1016/S0168-0072(98)00047-5
NR 38
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571227
PG 21
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500034
OA gold
DA 2024-07-18
ER

PT J
AU Gavazzo, F
   Di Florio, C
AF Gavazzo, Francesco
   Di Florio, Cecilia
TI Elements of Quantitative Rewriting
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantitative rewriting; metric rewriting; modal graded rewriting;
   quantitative equational theory; quantalic relations; quantitative
   calculus of relations
ID SEMANTICS
AB We introduce a general theory of quantitative and metric rewriting systems, namely systems with a rewriting relation enriched over quantales modelling abstract quantities. We develop theories of abstract and term-based systems, refining cornerstone results of rewriting theory (such as Newman's Lemma, Church-Rosser Theorem, and critical pair-like lemmas) to a metric and quantitative setting. To avoid distance trivialisation and lack of confluence issues, we introduce non-expansive, linear term rewriting systems, and then generalise the latter to the novel class of graded term rewriting systems. These systems make quantitative rewriting modal and context-sensitive, this way endowing rewriting with coeffectful behaviours.
C1 [Gavazzo, Francesco] Univ Pisa, Pisa, Italy.
   [Di Florio, Cecilia] Univ Bologna, Bologna, Italy.
C3 University of Pisa; University of Bologna
RP Gavazzo, F (corresponding author), Univ Pisa, Pisa, Italy.
EM francesco.gavazzo@unipi.it; diflorio2@unibo.it
OI GAVAZZO, FRANCESCO/0000-0002-2159-0615
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Abel Andreas, 2020, PROC ACM PROGRAM LAN, V90, P1
   Abramsky S., 2002, Mathematical Structures in Computer Science, V12, P625, DOI 10.1017/S0960129502003730
   Abramsky S., 2002, Predicative Copying and Polynomial Time
   Aczel Peter, 1978, Technical Report
   [Anonymous], 1987, The Implementation of Functional Programming Languages
   [Anonymous], 2005, PROF UAI 2005
   [Anonymous], 1964, PhD thesis
   [Anonymous], 2008, P ACM PROGRAM LANG, V7
   [Anonymous], 2005, Studies in Fuzziness and Soft Computing
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   [Anonymous], 1993, Texts and Monographs in Computer Science
   ARNOLD A, 1980, THEOR COMPUT SCI, V11, P181, DOI 10.1016/0304-3975(80)90045-6
   Asperti A., 1998, OPTIMAL IMPLEMENTATI
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Avanzini M, 2020, SCI COMPUT PROGRAM, V185, DOI 10.1016/j.scico.2019.102338
   Bacci G, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P679, DOI 10.1145/3209108.3209177
   Bacci Giorgio, 2020, FDN PROBABILISTIC PR, P333, DOI [10.1017/9781108770750, DOI 10.1017/9781108770750]
   Bacci Giorgio, 2021, LIPICS, V7, P17
   Backhouse R, 2002, LECT NOTES COMPUT SC, V2297, P89
   Baldan P., 2015, LEIBNIZ INT P INFORM, V35, P35
   Baldan Paolo., 2014, FSTTCS 14 FDN SOFTWA, V29, P403, DOI DOI 10.4230/LIPICS.FSTTCS.2014.403
   Belohlavek R., 2002, Fuzzy Relational Systems: Foundations and Principles
   Belohlavek R, 2010, INFORM SCIENCES, V180, P3288, DOI 10.1016/j.ins.2010.04.007
   Belohlavek R, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON FUZZY SYSTEMS, VOLS 1-3, P569, DOI 10.1109/FUZZY.2009.5277248
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Bezem M., 2003, Cambridge Tracts in Theoretical Computer Science
   Bird Richard, 1997, Algebra of Programming
   Bonsangue MM, 1998, THEOR COMPUT SCI, V193, P1, DOI 10.1016/S0304-3975(97)00042-X
   Brunel A, 2014, LECT NOTES COMPUT SC, V8410, P351
   Choudhury P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434331
   Church A, 1936, T AM MATH SOC, V39, P472, DOI 10.2307/1989762
   Crubillé R, 2014, LECT NOTES COMPUT SC, V8410, P209
   Crubillé R, 2017, LECT NOTES COMPUT SC, V10201, P341, DOI 10.1007/978-3-662-54434-1_13
   Crubillé R, 2015, IEEE S LOG, P633, DOI 10.1109/LICS.2015.64
   Curry H., 1958, Combinatory Logic, VI
   Curry H.B., 1958, Combinatory logic, V1
   Dagnino DP22 Francesco, 2022, IN PRESS, DOI DOI 10.1145/3531130.3533337
   Dahlqvist Fredrik, 2022, LIPIcs, V216, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Dal Lago U, 2021, Arxiv, DOI arXiv:2103.03871
   Dal Lago U, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498692
   Dal Lago U, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498680
   Dal Lago U, 2021, THEOR COMPUT SCI, V895, P34, DOI 10.1016/j.tcs.2021.09.027
   Dal Lago U, 2019, LECT NOTES COMPUT SC, V11423, P263, DOI 10.1007/978-3-030-17184-1_10
   Dal Lago Ugo, 2019, P ICALP 2019, p111:1, DOI DOI 10.4230/LIPICS.ICALP.2019.111
   Dal Lago Ugo, 2020, CEUR Workshop Proceedings, V2756, P101
   de Amorim AA, 2017, ACM SIGPLAN NOTICES, V52, P545, DOI [10.1145/3093333.3009890, 10.1145/3009837.3009890]
   DEBAKKER JW, 1982, P 14 ANN ACM S THEOR, P153
   Deza MM, 2009, Encyclopedia of distances, P1, DOI [10.1007/978-3-642-00234-2, DOI 10.1007/978-3-642-00234-2]
   Doornbos H, 1997, THEOR COMPUT SCI, V179, P103, DOI 10.1016/S0304-3975(96)00154-5
   Du WJ, 2016, LECT NOTES COMPUT SC, V9984, P67, DOI 10.1007/978-3-319-47677-3_5
   Escardo M.H., 1999, WORKSH REAL SEM APPL
   Ferns N, 2004, PROCEEDING OF THE NINETEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE SIXTEENTH CONFERENCE ON INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE, P950
   Flagg R.C., 1992, CMS C P, V13, P183
   Freyd P.J., 1990, Categories, Allegories
   Gaboardi M, 2016, ACM SIGPLAN NOTICES, V51, P476, DOI 10.1145/3022670.2951939
   Gavazzo F, 2022, Arxiv, DOI [arXiv:2206.13610, 10.48550/arXiv.2206.13610, DOI 10.48550/ARXIV.2206.13610]
   Gavazzo F, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P452, DOI 10.1145/3209108.3209149
   Gavazzo Francesco, 2019, PhD thesis
   Gebler D, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(4:12)2016
   Ghica DR, 2014, LECT NOTES COMPUT SC, V8410, P331
   Gus_eld Dan., 1997, ALGORITHMS STRINGS T
   Hajek P., 1998, Metamathematics of Fuzzy Logic
   Hindley J. R., 2008, LAMBDA CALCULUS COMB
   Hofmann D., 2014, Encyclopedia of Mathematics and its Applications
   HUET G, 1980, J ACM, V27, P797, DOI 10.1145/322217.322230
   LAWVERE FW, 1973, RENDICONTI SEMINARIO, V43, P135, DOI DOI 10.1007/BF02924844
   Mardare R, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470662
   Mardare R, 2018, LOG METH COMPUT SCI, V14, DOI 10.23638/LMCS-14(3:19)2018
   Mardare R, 2017, IEEE S LOG
   Mardare R, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P700, DOI 10.1145/2933575.2934518
   Marshall D, 2022, LECT NOTES COMPUT SC, V13240, P346, DOI 10.1007/978-3-030-99336-8_13
   Meier-Oeser Stephan., 2011, The Stanford Encyclopedia of Philosophy
   Mio M, 2022, Arxiv, DOI arXiv:2201.09087
   Mio M, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470717
   Moser G, 2020, SCI COMPUT PROGRAM, V185, DOI 10.1016/j.scico.2019.102306
   Munkres J.R., 2000, Topology, a First Course, Vsecond
   Naaf M, 2017, LECT NOTES ARTIF INT, V10483, P132, DOI 10.1007/978-3-319-66167-4_8
   Newman MHA, 1942, ANN MATH, V43, P223, DOI 10.2307/1968867
   Orchard D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341714
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Pitts A.M., 1998, HIGHER ORDER OPERATI, P275
   Reed J, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P157
   Riehl Emily, 2022, ELEMENTS 8 CATEGORY, DOI [10.1017/9781108936880, DOI 10.1017/9781108936880]
   Rosen Barry K., 1970, P 2 ANN ACM S THEORY, P117, DOI [10.1145/800161.805157, DOI 10.1145/800161.805157]
   Rosenthal KI., 1990, Quantales and their applications
   ROUTLEY R, 1972, J PHILOS LOGIC, V1, P53, DOI 10.1007/BF00649991
   ROUTLEY R, 1972, J PHILOS LOGIC, V1, P192, DOI 10.1007/BF00650498
   Routley R., 1973, Studies in logic and the foundations of mathematics, V68, P199
   Schmidt G, 2011, ENCYPLOPEDIA MATH IT, V132
   Searcoid M. O., 2006, Metric spaces
   Steen L. A., 1995, COUNTEREXAMPLES TOPO
   Stone M. H., 1949, ANN MAT PUR APPL, V29, P25, DOI [DOI 10.1007/BF02413910, 10.1007/BF02413910]
   Stubbe I, 2014, FUZZY SET SYST, V256, P95, DOI 10.1016/j.fss.2013.08.009
   TARSKI A, 1941, J SYMBOLIC LOGIC, V6, P73, DOI DOI 10.2307/2268577
   Thue Axel, 1914, PROBLEME VERANDERUNG
   URQUHART A, 1972, J SYMBOLIC LOGIC, V37, P159, DOI 10.2307/2272559
   van Oostrom Vincent, 2016, PROC FSCD 2016 LIPIC, V32, P1, DOI DOI 10.4230/LIPICS.FSCD.2016.32
   Villani C, 2009, GRUNDLEHR MATH WISS, V338, P5
NR 99
TC 2
Z9 2
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571256
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500063
OA gold
DA 2024-07-18
ER

PT J
AU Li, YB
   Zhang, QR
   Reps, T
AF Li, Yuanbo
   Zhang, Qirun
   Reps, Thomas
TI Single-Source-Single-Target Interleaved-Dyck Reachability via Integer
   Linear Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Interleaved-Dyck Reachability; Path Expressions; Integer Linear
   Programming; Single-Source-Single-Target Variant
AB An interleaved-Dyck (InterDyck) language consists of the interleaving of two or more Dyck languages, where each Dyck language represents a set of strings of balanced parentheses. InterDyck-reachability is a fundamental framework for program analyzers that simultaneously track multiple properly-matched pairs of actions such as call/return, lock/unlock, or write-data/read-data. Existing InterDyck-reachability algorithms are based on the well-known tabulation technique.
   This paper presents a new perspective on solving InterDyck-reachability. Our key observation is that for the single-source-single-target InterDyck-reachability variant, it is feasible to summarize all paths from the source node to the target node based on path expressions. Therefore, InterDyck-reachability becomes an InterDyck-path-recognition problem over path expressions. Instead of computing summary edges as in traditional tabulation algorithms, this new perspective enables us to express InterDyck-reachability as a parenthesis-counting problem, which can be naturally formulated via integer linear programming (ILP).
   We implemented our ILP-based algorithm and performed extensive evaluations based on two client analyses (a reachability analysis for concurrent programs and a taint analysis). In particular, we evaluated our algorithm against two types of algorithms: (1) the general all-pairs InterDyck-reachability algorithms based on linear conjunctive language (LCL) reachability and synchronized pushdown system (SPDS) reachability, and (2) two domain-specific algorithms for both client analyses. The experimental results are encouraging. Our algorithm achieves 1.42x, 28.24x, and 11.76x speedup for the concurrency-analysis benchmarks compared to all-pair LCL-reachability, SPDS-reachability, and domain-specific tools, respectively; 1.2x, 69.9x, and 0.98x speedup for the taint-analysis benchmarks. Moreover, the algorithm also provides precision improvements, particularly for taint analysis, where it achieves 4.55%, 11.1%, and 6.8% improvement, respectively.
C1 [Li, Yuanbo; Zhang, Qirun] Georgia Inst Technol, Atlanta, GA 30332 USA.
   [Reps, Thomas] Univ Wisconsin Madison, Madison, WI USA.
C3 University System of Georgia; Georgia Institute of Technology;
   University of Wisconsin System; University of Wisconsin Madison
RP Li, YB (corresponding author), Georgia Inst Technol, Atlanta, GA 30332 USA.
EM yuanboli@gatech.edu; qrzhang@gatech.edu; reps@cs.wisc.edu
OI Zhang, Qirun/0000-0001-5367-9377
FU Amazon; Office of Naval Research [N00014-17-1-2889]; US National Science
   Foundation (NSF) [1917924, 2114627, 2211968, 2212558]; Defense Advanced
   Research Projects Agency (DARPA) [N66001-21-C-4024]; Facebook Graduate
   Fellowship; Division of Computing and Communication Foundations; Direct
   For Computer & Info Scie & Enginr [2114627] Funding Source: National
   Science Foundation; Division of Computing and Communication Foundations;
   Direct For Computer & Info Scie & Enginr [1917924] Funding Source:
   National Science Foundation
FX We thank the anonymous reviewers for their valuable feedback on earlier
   drafts of this paper. This work was supported, in part, by Amazon under
   an Amazon Research Award in automated reasoning; by a gift from Rajiv
   and Ritu Batra; by the O~ce of Naval Research under grant
   N00014-17-1-2889; by the US National Science Foundation (NSF) under
   grants 1917924, 2114627, 2211968, and 2212558; and by the Defense
   Advanced Research Projects Agency (DARPA) under grant N66001-21-C-4024;
   by Facebook Graduate Fellowship for the first author. Any opinions,
   findings, conclusions, or recommendations expressed in this publication
   are those of the authors and do not necessarily reflect the views of the
   sponsoring entities.
CR [Anonymous], 2007, P 22 IEEE ACM INT C, DOI [DOI 10.1145/1321631.1321719, 10.1145/1321631.1321719]
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Blondin M, 2021, J ACM, V68, DOI 10.1145/3464794
   Englert M, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P477, DOI 10.1145/2933575.2933577
   Esparza J., 1997, Fundamenta Informaticae, V31, P13
   Feng Y, 2015, LECT NOTES COMPUT SC, V9458, P465, DOI 10.1007/978-3-319-26529-2_25
   Ganardi Moses, 2022, LIPICS, V229
   Goto Eiichi., 1974, Monocopy and associative algorithms in extended Lisp
   Gurobi Optimization LLC, 2023, Gurobi optimizer reference manual
   Heintze N, 2001, ACM SIGPLAN NOTICES, V36, P24, DOI 10.1145/381694.378802
   Hopcroft J., 1979, Theoretical Computer Science, V8, P135, DOI 10.1016/0304-3975(79)90041-0
   Huang W., 2015, P 2015 INT S SOFTWAR, P106, DOI 10.1145/2771783.2771803
   Kjelstrom AH, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498673
   KODUMAL J, 2004, P C PROGR LANG DES I, P207
   Li YB, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434340
   Li YB, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P780, DOI 10.1145/3385412.3386021
   Liu PZ, 2018, ACM SIGPLAN NOTICES, V53, P105, DOI 10.1145/3192366.3192419
   Melski D, 2000, THEOR COMPUT SCI, V248, P29, DOI 10.1016/S0304-3975(00)00049-9
   PARIKH RJ, 1966, J ACM, V13, P570, DOI 10.1145/321356.321364
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Reps T, 2000, ACM T PROGR LANG SYS, V22, P162, DOI 10.1145/345099.345137
   Sagiv M, 1995, LECT NOTES COMPUT SC, V915, P651
   Schmitz S., 2016, ACM SIGLOG News, V3, P4, DOI DOI 10.1145/2893582.2893585
   Schrijver A., 1998, THEORY LINEAR INTEGE
   Seidl H, 2004, LECT NOTES COMPUT SC, V3142, P1136
   Späth J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290361
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   TARJAN RE, 1981, J ACM, V28, P594, DOI 10.1145/322261.322273
   Verma KN, 2005, LECT NOTES ARTIF INT, V3632, P337
   Yan Dacong, 2011, P 2011 INT S SOFTW T, P155, DOI [10.1145/2001420.2001440, DOI 10.1145/2001420.2001440]
   YANNAKAKIS M, 1990, PROCEEDINGS OF THE NINTH ACM SIGACT-SIGMOD-SIGART SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P230, DOI 10.1145/298514.298576
   Zhang QR, 2013, ACM SIGPLAN NOTICES, V48, P435, DOI 10.1145/2499370.2462159
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P344, DOI 10.1145/3093333.3009848
   Zhang QR, 2014, ACM SIGPLAN NOTICES, V49, P829, DOI [10.1145/2660193.2660213, 10.1145/2714064.2660213]
   Zheng X, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P197, DOI 10.1145/1328438.1328464
NR 36
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571228
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500035
OA gold
DA 2024-07-18
ER

PT J
AU Zhou, LT
   Zhou, YD
   Oliveira, BCDS
AF Zhou, Litao
   Zhou, Yaoda
   Oliveira, Bruno C. D. S.
TI Recursive Subtyping for All
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Iso-Recursive Subtyping; Bounded Polymorphism; Object
   EncodingsIso-Recursive Subtyping; Bounded Polymorphism; Object Encodings
ID INTERSECTION; SOUNDNESS; SYSTEM; UNION
AB Recursive types and bounded quantification are prominent features in many modern programming languages, such as Java, C#, Scala or TypeScript. Unfortunately, the interaction between recursive types, bounded quantification and subtyping has shown to be problematic in the past. Consequently, defining a simple foundational calculus that combines those features and has desirable properties, such as decidability, transitivity of subtyping, conservativity and a sound and complete algorithmic formulation has been a long time challenge. This paper presents an extension of kernel F-<= =, called F-<=(mu) , with iso-recursive types. F-<= is a well-known polymorphic calculus with bounded quantification. In F-<=(mu) we add iso-recursive types, and correspondingly extend the subtyping relation with iso-recursive subtyping using the recently proposed nominal unfolding rules. We also add two smaller extensions to F-<=. The first one is a generalization of the kernel F-<= rule for bounded quantification that accepts equivalent rather than equal bounds. The second extension is the use of so-called structural folding/unfolding rules, inspired by the structural unfolding rule proposed by Abadi, Cardelli, and Viswanathan [1996]. The structural rules add expressive power to the more conventional folding/unfolding rules in the literature, and they enable additional applications. We present several results, including: type soundness; transitivity and decidability of subtyping; the conservativity of F-<=(mu) over F-<= and a sound and complete algorithmic formulation of F-<=(mu). Moreover, we study an extension of F-<=(mu), called F-<=>=(mu) which includes lower bounded quantification in addition to the conventional (upper) bounded quantification of F-<=. All the results in this paper have been formalized in the Coq theorem prover.
C1 [Zhou, Litao; Zhou, Yaoda; Oliveira, Bruno C. D. S.] Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China.
C3 University of Hong Kong
RP Zhou, LT (corresponding author), Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China.
EM ltzhou@cs.hku.hk; ydzhou@cs.hku.hk; bruno@cs.hku.hk
RI dos Santos Oliveira, Bruno Cesar/I-7977-2013
OI Oliveira, Bruno/0000-0002-1846-7210; Zhou, Litao/0000-0003-3046-7085;
   Zhou, Yaoda/0000-0002-4170-6160
FU Hong Kong Research Grant Council [17209519, 17209520, 17209821]
FX We thank the anonymous reviewers for their helpful comments. This work
   has been sponsored by Hong Kong Research Grant Council projects number
   17209519, 17209520 and 17209821.
CR Abadi Martin, 1996, P 23 ACM SIGPLAN SIG, P396, DOI [10.1145/237721.237809, DOI 10.1145/237721.237809]
   AMADIO RM, 1993, ACM T PROGR LANG SYS, V15, P575, DOI 10.1145/155183.155231
   Amin N, 2017, ACM SIGPLAN NOTICES, V52, P666, DOI 10.1145/3093333.3009866
   Amin N, 2014, ACM SIGPLAN NOTICES, V49, P233, DOI [10.1145/2660193.2660216, 10.1145/2714064.2660216]
   [Anonymous], 1998, KYOTO U RES INFORM R
   [Anonymous], 1989, P 4 INT C FUNCT PROG, DOI DOI 10.1145/99370.99392
   Aydemir B, 2008, ACM SIGPLAN NOTICES, V43, P3, DOI 10.1145/1328897.1328443
   Backes M, 2014, J COMPUT SECUR, V22, P301, DOI 10.3233/JCS-130493
   Baldan P, 1999, INFORM COMPUT, V153, P173, DOI 10.1006/inco.1999.2802
   BARBANERA F, 1995, INFORM COMPUT, V119, P202, DOI 10.1006/inco.1995.1086
   Bengtson J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890031
   BOHM C, 1985, THEOR COMPUT SCI, V39, P135, DOI 10.1016/0304-3975(85)90135-5
   Bourdoncle F., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P302, DOI 10.1145/263699.263743
   Brandt M, 1997, LECT NOTES COMPUT SC, V1210, P63
   Bruce K., 1995, Theory and Practice of Object Systems, V1, P221
   Bruce K. B., 1994, Journal of Functional Programming, V4, P127, DOI 10.1017/S0956796800001039
   Bruce KB, 1999, INFORM COMPUT, V155, P108, DOI 10.1006/inco.1999.2829
   CARDELLI L, 1986, LECT NOTES COMPUT SC, V242, P21
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   CARDELLI L, 1994, INFORM COMPUT, V109, P4, DOI 10.1006/inco.1994.1013
   Castagna Giuseppe, 1994, P 21 ACM SIGPLAN SIG, P151, DOI [10.1145/174675.177844, DOI 10.1145/174675.177844]
   Church A, 1932, ANN MATH, V33, P346, DOI 10.2307/1968337
   Colazzo D, 2005, INFORM COMPUT, V198, P71, DOI 10.1016/j.ic.2004.11.003
   COOK WR, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P125, DOI 10.1145/96709.96721
   COPPO M, 1981, Z MATH LOGIK, V27, P45, DOI 10.1002/malq.19810270205
   Curien Pierre-Louis, 1992, MATH STRUCT COMP SCI, V2, p55S91, DOI DOI 10.1017/S0960129500001134
   EPFL, 2021, SCALA, P3
   Gapeyev V, 2002, J FUNCT PROGRAM, V12, P511, DOI 10.1017/S0956796802004318
   Ghelli G., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P146, DOI 10.1007/BFb0037104
   Girard Jean-Yves, 1972, These d'etat, P7
   Haskell Development Team, 1990, HASKELL
   Hosoya Haruo, 1998, Datatypes and Subtyping
   Hu JZS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371077
   INRIA, 1987, OCAML
   Jeffrey A, 2001, IEEE S LOG, P323, DOI 10.1109/LICS.2001.932508
   Ligatti J, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/2994596
   Mackay J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371134
   Millstein T, 2004, ACM T PROGR LANG SYS, V26, P836, DOI 10.1145/1018203.1018207
   Morris James Hiram, 1969, Ph.D. Dissertation
   Oliveira BCD, 2009, LECT NOTES COMPUT SC, V5653, P269, DOI 10.1007/978-3-642-03013-0_13
   Oliveira Bruno C. d. S., 2020, VIRTUAL C LIPICS, DOI [10.4230/LIPIcs.ECOOP.2020.29, DOI 10.4230/LIPICS.ECOOP.2020.29]
   PARIGOT M, 1992, THEOR COMPUT SCI, V94, P335, DOI 10.1016/0304-3975(92)90042-E
   Pierce B. C., 1994, Journal of Functional Programming, V4, P207, DOI 10.1017/S0956796800001040
   Pierce B.C., 1997, BOUNDED QUANTIFICATI
   PIERCE BC, 1994, INFORM COMPUT, V112, P131, DOI 10.1006/inco.1994.1055
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pottinger Garrel, 1980, ESSAYS COMBINATORY L, P561
   Reynolds J. C., 1974, Programming Symposium, P408
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   SANGIORGI D, 1992, LECT NOTES COMPUT SC, V630, P32
   Scott Dana, 1962, LECT DEL U CAL BERK
   Wadler Philip, 1998, EXPRESSION PROBLEM 1
   Zhou YD, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3549537
   Zhou YD, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428291
NR 54
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571241
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500048
OA gold
DA 2024-07-18
ER

PT J
AU Sela, G
   Petrank, E
AF Sela, Gal
   Petrank, Erez
TI Concurrent Size
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Concurrent Algorithms; Concurrent Data Structures; Linearizability;
   Wait-Freedom; Size
ID SNAPSHOTS
AB The size of a data structure (i.e., the number of elements in it) is a widely used property of a data set. However, for concurrent programs, obtaining a correct size efficiently is non-trivial. In fact, the literature does not offer a mechanism to obtain a correct ( linearizable) size of a concurrent data set without resorting to inefficient solutions, such as taking a full snapshot of the data structure to count the elements, or acquiring one global lock in all update and size operations. This paper presents a methodology for adding a concurrent linearizable size operation to sets and dictionaries with a relatively low performance overhead. Theoretically, the proposed size operation is wait-free with asymptotic complexity linear in the number of threads (independently of data-structure size). Practically, we evaluated the performance overhead by adding size to various concurrent data structures in JavaDa skip list, a hash table and a tree. The proposed linearizable size operation executes faster by orders of magnitude compared to the existing option of taking a snapshot, while incurring a throughput loss of 1% - 20% on the original data structure's operations.
C1 [Sela, Gal; Petrank, Erez] Technion, Haifa, Israel.
C3 Technion Israel Institute of Technology
RP Sela, G (corresponding author), Technion, Haifa, Israel.
EM galy@cs.technion.ac.il; erez@cs.technion.ac.il
OI Petrank, Erez/0000-0002-6353-956X
FU Israel Science Foundation [1102/21]
FX This work was supported by the Israel Science Foundation Grant No.
   1102/21.
CR AFEK Y, 1993, J ACM, V40, P873, DOI 10.1145/153724.153741
   Afek Y, 2012, J PARALLEL DISTR COM, V72, P880, DOI 10.1016/j.jpdc.2012.03.007
   [Anonymous], 2004, Practical lock-freedom
   Arbel-Raviv M, 2018, ACM SIGPLAN NOTICES, V53, P14, DOI 10.1145/3200691.3178489
   ASPNES J, 1994, J ACM, V41, P1020, DOI 10.1145/185675.185815
   Blelloch Guy E, 2021, PPOPP, P31, DOI DOI 10.1145/3437801.3441602
   Brown Trevor, 2018, Java LockFree Data Structure Library
   Cooper Brian F., 2010, P 1 ACM S CLOUD COMP, P143, DOI [DOI 10.1145/1807128.1807152, 10.1145/1807128.1807152]
   Daloze B, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276478
   Ellen F, 2010, PODC 2010: PROCEEDINGS OF THE 2010 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P131, DOI 10.1145/1835698.1835736
   Harris Timothy L., 2001, DISC LNCS, P300, DOI DOI 10.1007/3-540-45414-4_21
   Heller S, 2006, LECT NOTES COMPUT SC, V3974, P3
   HERLIHY M, 1991, ACM T PROGR LANG SYS, V13, P124, DOI 10.1145/114005.102808
   Herlihy M., 2008, The Art of Multiprocessor Programming
   Herlihy M, 2007, LECT NOTES COMPUT SC, V4474, P124
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Jayanti P., 2005, P 37 ANN ACM S THEOR, P723, DOI 10.1145/1060590.1060697
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lea D., 2004, The java concurrency package (JSR-166), V166
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Meier Remigius, 2016, DLS, DOI [10.1145/2989225.2989233, DOI 10.1145/2989225.2989233]
   Nelson-Slivon J, 2022, PPOPP'22: PROCEEDINGS OF THE 27TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P368, DOI 10.1145/3503221.3508412
   oracle, 2022, Java Platform Version 18 API Specification
   Petrank E, 2013, LECT NOTES COMPUT SC, V8205, P224, DOI 10.1007/978-3-642-41527-2_16
   Riany Y, 2001, THEOR COMPUT SCI, V269, P163, DOI 10.1016/S0304-3975(00)00412-6
   Sela G, 2022, Arxiv, DOI arXiv:2209.07100
   Sela Gal, 2022, Zenodo, DOI 10.5281/ZENODO.7079982
   Sela G, 2021, PROCEEDINGS OF THE 2021 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC '21), P561, DOI 10.1145/3465084.3467944
   Sela Gal, 2021, arXiv
   Shavit N, 1996, ACM T COMPUT SYST, V14, P385, DOI 10.1145/235543.235546
   Sundell H, 2005, J PARALLEL DISTR COM, V65, P609, DOI 10.1016/j.jpdc.2004.12.005
   Yuanhao Wei, 2021, vcaslib
NR 32
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 137
DI 10.1145/3563300
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200014
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Escot, L
   Cockx, J
AF Escot, Lucas
   Cockx, Jesper
TI Practical Generic Programming over a Universe of Native Datatypes
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Generic programming; Dependent types
AB Datatype-generic programming makes it possible to define a construction once and apply it to a large class of datatypes. It is often used to avoid code duplication in languages that encourage the definition of custom datatypes, in particular state-of-the-art dependently typed languages where one can have many variants of the same datatype with different type-level invariants. In addition to giving access to familiar programming constructions for free, datatype-generic programming in the dependently typed setting also allows for the construction of generic proofs. However, the current interfaces available for this purpose are needlessly hard to use or are limited in the range of datatypes they handle. In this paper, we describe the design of a library for safe and user-friendly datatype-generic programming in the Agda language. Generic constructions in our library are regular Agda functions over a broad universe of datatypes, yet they can be specialized to native Agda datatypes with a simple one-liner. Furthermore, we provide building blocks so that library designers can too define their own datatype-generic constructions.
C1 [Escot, Lucas; Cockx, Jesper] Delft Univ Technol, Delft, Netherlands.
C3 Delft University of Technology
RP Escot, L (corresponding author), Delft Univ Technol, Delft, Netherlands.
EM l.f.b.escot@tudelft.nl; j.g.h.cocicx@tudelft.nl
RI ; Cockx, Jesper/U-1628-2018
OI Escot, Lucas/0000-0001-9642-5641; Cockx, Jesper/0000-0003-3862-4073
CR Abrahams D, 2004, C++ template metaprogramming: concepts, tools, and techniques from Boost and beyond
   Agda Development Team, 2021, Agda 2.6.2 documentation
   Altenkirch T, 2007, LECT NOTES COMPUT SC, V4719, P209
   Andjelkovic Stevan, 2011, THESIS
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Benke M., 2003, Nordic Journal of Computing, V10, P265
   Bernardy JP, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P345
   Bird R., 1996, Journal of Functional Programming, V6, P1, DOI 10.1017/S0956796800001556
   BOHM C, 1985, THEOR COMPUT SCI, V39, P135, DOI 10.1016/0304-3975(85)90135-5
   Brady Edwin C., 2021, 35 EUROPEAN C OBJECT, V9, DOI 10.4230/LIPIcs. ECOOP.2021.9
   Chapman J, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P3
   Christiansen D, 2016, ACM SIGPLAN NOTICES, V51, P284, DOI 10.1145/3022670.2951932
   Cockx J, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S095679681800014X
   Dagand P., 2013, Ph.D. thesis
   Dagand Pierre-Evariste., 2012, Elaborating inductive definitions
   Diehl Larry., 2013, Proceedings of the 2013 ACM SIGPLAN Workshop on Dependently-typed Programming, DTP '13, P49, DOI [DOI 10.1145/2502409.2502414, 10.1145/2502409.2502414]
   Diehl Larry, 2017, THESIS PORTLAND STAT
   Diehl Larry., 2014, Proceedings of the 10th ACM SIGPLAN workshop on Generic programming, P3, DOI DOI 10.1145/2633628.2633630
   Dybjer P, 2003, ANN PURE APPL LOGIC, V124, P1, DOI 10.1016/S0168-0072(02)00096-9
   Dybjer P, 1999, LECT NOTES COMPUT SC, V1581, P129
   effectfully, 2016, EM CUM AGD
   effectfully, 2020, GEN
   effectfully, 2016, DER EL DESCR DAT TYP
   effectfully, 2016, DESCRIPTIONS
   Escot Lucas, 2022, Zenodo, DOI 10.5281/ZENODO.6767057
   Forsberg FN, 2010, LECT NOTES COMPUT SC, V6247, P454, DOI 10.1007/978-3-642-15205-4_35
   Forsberg Fredrik Nordvall, 2013, THESIS SWANSEA U UK
   Hinze R, 2003, LECT NOTES COMPUT SC, V2793, P1
   Jansson P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P470, DOI 10.1145/263699.263763
   Jay CB, 1995, SCI COMPUT PROGRAM, V25, P251, DOI 10.1016/0167-6423(95)00015-1
   Kaposi A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290315
   Klabnik S., 2018, The Rust Programming Language
   LLC Jane Street Group, 2018, PPXLIBS US MAN
   Martin-Lof Per, 1984, STUDIES PROOF THEORY, V1
   McBride C., 2002, Types for Proofs and Programs. International Workshop, TYPES 2000. Selected Papers (Lecture Notes in Computer Science Vol.2277), P197
   McBride Conor, 2013, LECT NOTES
   McBride Conor, 2004, REVISED SELECTED PAP, V3839, P186, DOI [10.1007/11617990_12, DOI 10.1007/11617990_12]
   Morris P, 2009, INT J FOUND COMPUT S, V20, P83, DOI 10.1142/S0129054109006462
   Morris Peter W. J., 2007, THESIS U NOTTINGHAM
   Nordstrom Bengt, 1990, Programming in Martin-Lof's Type Theory, V200
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Sijsling Yorick, 2016, THESIS
   Weirich S, 2010, PLPV'10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P15, DOI 10.1145/1707790.1707799
NR 43
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 113
DI 10.1145/3547644
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000024
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Ho, S
   Protzenko, J
AF Ho, Son
   Protzenko, Jonathan
TI Aeneas: Rust Verification by Functional Translation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Rust; verification; functional translation
AB We present Aeneas, a new verification toolchain for Rust programs based on a lightweight functional translation. We leverage Rust's rich region-based type system to eliminate memory reasoning for a large class of Rust programs, as long as they do not rely on interior mutability or unsafe code. Doing so, we relieve the proof engineer of the burden of memory-based reasoning, allowing them to instead focus on functional properties of their code.
   The first contribution of Aeneas is a new approach to borrows and controlled aliasing. We propose a pure, functional semantics for LLBC, a Low-Level Borrow Calculus that captures a large subset of Rust programs. Our semantics is value-based, meaning there is no notion of memory, addresses or pointer arithmetic. Our semantics is also ownership-centric, meaning that we enforce soundness of borrows via a semantic criterion based on loans rather than through a syntactic type-based lifetime discipline. We claim that our semantics captures the essence of the borrow mechanism rather than its current implementation in the Rust compiler.
   The second contribution of Aeneas is a translation from LLBC to a pure lambda-calculus. This allows the user to reason about the original Rust program through the theorem prover of their choice, and fulfills our promise of enabling lightweight verification of Rust programs. To deal with the well-known technical difficulty of terminating a borrow, we rely on a novel approach, in which we approximate the borrow graph in the presence of function calls. This in turn allows us to perform the translation using a new technical device called backward functions.
   We implement our toolchain in a mixture of Rust and OCaml; our chief case study is a low-level, resizing hash table, for which we prove functional correctness, the first such result in Rust. Our evaluation shows significant gains of verification productivity for the programmer. This paper therefore establishes a new point in the design space of Rust verification toolchains, one that aims to verify Rust programs simply, and at scale.
   Rust goes to great lengths to enforce static control of aliasing; the proof engineer should not waste any time on memory reasoning when so much already comes "for freez"!
C1 [Ho, Son] INRIA, Paris, France.
   [Protzenko, Jonathan] Microsoft Res, Mountain View, CA USA.
C3 Inria; Microsoft
RP Ho, S (corresponding author), INRIA, Paris, France.
EM son.ho@inria.fr; protz@microsoft.com
OI Protzenko, Jonathan/0000-0001-7347-3050; Ho, Son/0000-0003-3297-9156
CR Amani S, 2016, ACM SIGPLAN NOTICES, V51, P175, DOI 10.1145/2954679.2872404
   [Anonymous], 2021, STACKOVERFLOW DEVELO
   [Anonymous], 2017, NOT POSSIBLE BIND PA
   [Anonymous], 2022, GRAYDON HOARE
   Astrauskas V, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360573
   Balabonski T, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2837022
   Bender M.A., 2015, Login Usenix Mag., V40
   Bhargavan K., 2017, 2 SUMMIT ADV PROGRAM
   Bohannon A, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P407, DOI 10.1145/1328438.1328487
   Boyland J., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P2
   Cao QX, 2018, J AUTOM REASONING, V61, P367, DOI 10.1007/s10817-018-9457-5
   Cao Qinxiang, 2021, VERIFIABLE C
   Charguéraud A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P213
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Denis Xavier, 2021, RR9448 INR SACL FRAN
   Ferraiuolo A, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P287, DOI 10.1145/3132747.3132782
   Fluet M, 2006, LECT NOTES COMPUT SC, V3924, P7
   Hawblitzel C., 2014, 11 USENIX S OPERATIN
   Ho S., 2021, NOISE LIB VERIFIED H
   Ho S, 2022, Arxiv, DOI [arXiv:2206.07185, 10.48550/ARXIV.2206.07185, DOI 10.48550/ARXIV.2206.07185]
   Ho Son, 2022, Zenodo, DOI 10.5281/ZENODO.6672939
   Ho Son, 2022, AENEAS VERIFICATION
   Juhasz U., 2014, Technical report
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371109
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Li Jialin, P ACM C OBJECT ORIEN
   Lorch JR, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P197, DOI 10.1145/3385412.3385971
   Matsakis Nicholas, 2018, An alias-based formulation of the borrow checker
   Matsushita Yusuke, 2020, LECT NOTES COMPUT SC, P484, DOI DOI 10.1007/978-3-030-44914-8_18
   Matsushita Yusuke, 2022, P 43 ACM SIGPLAN C P
   O'connor L, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S095679682100023X
   Pottier F, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P3, DOI 10.1145/3018610.3018624
   Protzenko J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110261
   Protzenko Jonathan, 2014, THESIS U PARIS DIDER, P7
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rival Xavier, 2011, ECOLE NORMALE SUPERI
   Rust R., 2021, The feeling economy: how artificial intelligence is creating the era of empathy
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   The Rust Compiler Team, 2022, GUID RUSTC DEV
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Ullrich S., 2016, THESIS KARLSRUHER I
   Verus, 2022, EXPT VER FRAM RUST L
   Wadler Philip, 1990, Programming Concepts and Methods, V3, P5
   Wolf F., 2021, P ICC 2021 IEEE INT, P1
NR 48
TC 10
Z9 11
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 116
DI 10.1145/3547647
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000027
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Lorenzen, A
   Leijen, D
AF Lorenzen, Anton
   Leijen, Daan
TI Reference Counting with Frame Limited Reuse
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Reference Counting; Reuse; Frame Limited; Koka
ID OPERATIONS
AB The recently introduced Perceus algorithm can automatically insert reference count instructions such that the resulting (cycle-free) program is garbage free: objects are freed at the very moment they can no longer be referenced. An important extension is reuse analysis. This optimization pairs objects of known size with fresh allocations of the same size and tries to reuse the object in-place at runtime if it happens to be unique. Unfortunately, current implementations of reuse analysis are fragile with respect to small program transformations, or can cause an arbitrary increase in the peak heap usage. We present a novel drop-guided reuse algorithm that is simpler and more robust than previous approaches. Moreover, we generalize the linear resource calculus to precisely characterize garbage-free and frame-limited evaluations. On each function call, a frame-limited evaluation may hold on to memory longer if the size is bounded by a constant factor. Using this framework we show that our drop-guided reuse is frame-limited and find that an implementation of our new reuse approach in Koka can provide significant speedups.
C1 [Lorenzen, Anton] Univ Bonn, Bonn, Germany.
   [Leijen, Daan] Microsoft Res, Redmond, WA USA.
C3 University of Bonn; Microsoft
RP Lorenzen, A (corresponding author), Univ Bonn, Bonn, Germany.
EM anton.lorenzen@uni-bonn.de; daan@microsoft.com
OI Leijen, Daan/0000-0003-1027-5430; Lorenzen, Anton/0000-0003-3538-9688
CR [Anonymous], 2021, COMPUTER LANGUAGE BE
   [Anonymous], 1999, PURELY FUNCTIONAL DA
   [Anonymous], 2013, Real World OCaml: Functional programming for the masses
   Appel Andrew W., 1991, COMPILING CONTINUATI, DOI [10.1017/CBO9780511609619, DOI 10.1017/CBO9780511609619]
   Barendsen E., 1996, Mathematical Structures in Computer Science, V6, P579
   Barth J. M., 1977, Communications of the ACM, V20, P513, DOI 10.1145/359636.359713
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Boehm Hans, 2000, GC BENCH
   Brady Edwin, LEIBNIZ INT P INFORM, DOI [10.4230/LIPIcs.ECOOP.2021, DOI 10.4230/LIPICS.ECOOP.2021]
   Chirimar J., 1996, Journal of Functional Programming, V6, P195, DOI 10.1017/S0956796800001660
   Choi J, 2018, 27TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES (PACT 2018), DOI 10.1145/3243176.3243195
   COLLINS GE, 1960, COMMUN ACM, V3, P655, DOI 10.1145/367487.367501
   Crary K., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P184, DOI 10.1145/325694.325716
   Daan Leijen, 2021, KOKA LANGUAGE
   de Moura L, 2021, LECT NOTES ARTIF INT, V12699, P625, DOI 10.1007/978-3-030-79876-5_37
   de Vries E, 2008, LECT NOTES COMPUT SC, V5083, P201, DOI 10.1007/978-3-540-85373-2_12
   Doligez Damien, 1993, P 20 ACM S PRINCIPLE, P113, DOI [10.1145/158511.158611, DOI 10.1145/158511.158611]
   Férey G, 2016, LECT NOTES COMPUT SC, V9690, P150, DOI 10.1007/978-3-319-40648-0_12
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Free Software Foundation Silicon Graphics and HewlettsPackard Company, 1994, INT RED BLACK TREE I
   Gallagher Matt, 2016, BLOG POST
   Grelck Clemens, 2004, 6 INT WORKSHOP IMPLE
   Guibas LJ., 1978, P 19 ANN S FDN COMPU, P8, DOI DOI 10.1109/SFCS.1978.3
   Hudak Paul., 1985, POPL (1985), P300, DOI DOI 10.1145/318593.318660
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   Leijen Daan, 2022, Zenodo, DOI 10.5281/ZENODO.6946310
   Leijen D, 2019, LECT NOTES COMPUT SC, V11893, P244, DOI 10.1007/978-3-030-34175-6_13
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Lorenzen Anton, 2021, MSRTR202130
   McBride Conor, 2001, DERIVATIVE REGULAR T
   McGraw J., 1983, LLLM146ONDE83016576
   Minamide Y., 1999, Electronic Notes in Theoretical Computer Science, V26, DOI 10.1016/S1571-0661(05)80286-5
   Okasaki C., 1999, Journal of Functional Programming, V9, P471, DOI 10.1017/S0956796899003494
   Paraskevopoulou Z, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341687
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Reinking A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P96, DOI 10.1145/3453483.3454032
   Scholz SB, 2003, J FUNCT PROGRAM, V13, P1005, DOI 10.1017/S0956796802004458
   SCHORR H, 1967, COMMUN ACM, V10, P501, DOI 10.1145/363534.363554
   Sivaramakrishnan KC, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408995
   Turner DN, 1999, THEOR COMPUT SCI, V227, P231, DOI 10.1016/S0304-3975(99)00054-7
   Ullrich S, 2019, PROCEEDINGS OF THE 31ST SYMPOSIUM ON IMPLEMENTATION AND APPLICATION OF FUNCTIONAL LANGUAGES, IFL 2019, DOI 10.1145/3412932.3412935
   Ungar D, 2017, ACM SIGPLAN NOTICES, V52, P15, DOI 10.1145/3170472.3133843
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xie Ningning, 2021, P 26 ACM SIGPLAN INT, DOI [10.1145/3473576, DOI 10.1145/3473576]
   Yarantsev Danil, 2020, ORC NIMS CYCLE COLLE
NR 48
TC 2
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 103
DI 10.1145/3547634
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000014
OA gold
DA 2024-07-18
ER

PT J
AU van der Rest, C
   Swierstra, W
AF van der Rest, Cas
   Swierstra, Wouter
TI A Completely Unique Account of Enumeration
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE property-based testing; interactive proof assistants; dependently typed
   programming; datatype generic programming; Agda
AB How can we enumerate the inhabitants of an algebraic datatype? This paper explores a datatype generic solution that works for all regular types and indexed families. The enumerators presented here are provably both complete and unique-they will eventually produce every value exactly once-and fair-they avoid bias when composing enumerators. Finally, these enumerators memoise previously enumerated values whenever possible, thereby avoiding repeatedly recomputing recursive results.
C1 [van der Rest, Cas] Delft Univ Technol, Delft, Netherlands.
   [Swierstra, Wouter] Univ Utrecht, Utrecht, Netherlands.
C3 Delft University of Technology; Utrecht University
RP van der Rest, C (corresponding author), Delft Univ Technol, Delft, Netherlands.
EM c.r.vanderrest@tudelft.nl; w.s.swierstra@uu.nl
OI van der Rest, Cas/0000-0002-0059-5353
CR Benke M., 2003, Nordic Journal of Computing, V10, P265
   Brady Edwin., 2013, Proceedings of the 7th Workshop on Programming languages meets program verification, PLPV 2013, Rome, Italy, January 22, 2013, P1, DOI DOI 10.1145/2428116.2428118
   Braquehais R.M., 2017, THESIS U YORK UK
   Bulwahn Lukas, 2012, Certified Programs and Proofs. Second International Conference (CPP 2012). Proceedings, P92, DOI 10.1007/978-3-642-35308-6_10
   Bulwahn L, 2012, LECT NOTES COMPUT SC, V7180, P153, DOI 10.1007/978-3-642-28717-6_14
   Chapman J, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P3
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Claessen K, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000143
   Claessen K, 2010, LECT NOTES COMPUT SC, V6143, P6, DOI 10.1007/978-3-642-13977-2_3
   Claessen Koen, 2012, ATx/WInG@ IJCAR, P16, DOI [10.29007/3qwr, DOI 10.29007/3QWR]
   Coq Development Team, 2020, COQ PROOF ASSISTANT
   Dagand P., 2013, Ph.D. thesis
   Dagand PE, 2012, ACM SIGPLAN NOTICES, V47, P103, DOI 10.1145/2398856.2364544
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   de Vries Edsko, 2014, P 10 ACM SIGPLAN WOR, P83, DOI [10.1145/2633628.2633634, DOI 10.1145/2633628.2633634]
   Denes M., 2014, QUICKCHICK PROPERTY
   Devriese D, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Duregård J, 2012, ACM SIGPLAN NOTICES, V47, P61, DOI 10.1145/2430532.2364515
   Dybjer P., 2004, Theoretical Aspects of Computing - ICTAC 2004. First International Colloquium. Revised Selected Papers (Lecture Notes in Computer Science Vol.3407), P341
   Haiyan Q, 2007, LECT NOTES COMPUT SC, V4454, P79
   Hinze R, 2004, SCI COMPUT PROGRAM, V51, P117, DOI 10.1016/j.scico.2003.07.001
   Hinze R., 2000, Journal of Functional Programming, V10, P327, DOI 10.1017/S0956796800003713
   Hinze R, 2006, LECT NOTES COMPUT SC, V3945, P13
   Lampropoulos L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158133
   McIlroy M. D., 1999, Journal of Functional Programming, V9, P325, DOI 10.1017/S0956796899003299
   New MS, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796817000107
   Norell Ulf, 2009, P 4 INT WORKSHOP TYP, P1, DOI DOI 10.1145/1481861.1481862
   Paraskevopoulou Z, 2015, LECT NOTES COMPUT SC, V9236, P325, DOI 10.1007/978-3-319-22102-1_22
   Runciman C, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P37
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   van der Walt Paul, 2013, Implementation and Application of Functional Languages. 24th International Symposium, IFL 2012. Revised Selected Papers: LNCS 8241, P157, DOI 10.1007/978-3-642-41582-1_10
   Yakushev AR, 2010, LECT NOTES COMPUT SC, V5812, P93
NR 32
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 105
DI 10.1145/3547636
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000016
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Vasilenko, E
   Vazou, N
   Barthe, G
AF Vasilenko, Elizaveta
   Vazou, Niki
   Barthe, Gilles
TI Safe Couplings: Coupled Refinement Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE refinement types; relational types; program verification; Haskell
ID VERIFICATION
AB We enhance refinement types with mechanisms to reason about relational properties of probabilistic computations. Our mechanisms, which are inspired from probabilistic couplings, are applicable to a rich set of probabilistic properties, including expected sensitivity, which ensures that the distance between outputs of two probabilistic computations can be controlled from the distance between their inputs. We implement our mechanisms in the type system of Liquid Haskell and we use them to formally verify Haskell implementations of two classic machine learning algorithms: Temporal Difference (TD) reinforcement learning and stochastic gradient descent (SGD). We formalize a fragment of our system for discrete distributions and we prove soundness with respect to a set-theoretical semantics.
C1 [Vasilenko, Elizaveta; Vazou, Niki; Barthe, Gilles] IMDEA Software Inst, Madrid, Spain.
   [Vasilenko, Elizaveta] HSE Univ, Moscow, Russia.
   [Barthe, Gilles] MPI SP, Bochum, Germany.
C3 IMDEA Software Institute; HSE University (National Research University
   Higher School of Economics)
RP Vasilenko, E (corresponding author), IMDEA Software Inst, Madrid, Spain.; Vasilenko, E (corresponding author), HSE Univ, Moscow, Russia.
EM elizaveta.vasilenko@imdea.org; niki.vazou@imdea.org; gbarthe@mpi-sp.org
OI Vasilenko, Elizaveta/0000-0001-5983-3347; Vazou,
   Niki/0000-0003-0732-5476; BARTHE, Gilles/0000-0002-3853-1777
FU Horizon Europe ERC Starting Grant CRETE [GA: 101039196]; US Office of
   Naval Research HACKCRYPT [N00014-19-1-2292]; Atraccion de Talento grant
   [2019-T2/TIC-13455]; Juan de la Cierva grant [IJC2019-041599-I];
   European Research Council (ERC) [101039196] Funding Source: European
   Research Council (ERC)
FX We thank Alejandro Aguirre and Jiajia Song for the useful discussions.
   This work is founded by the Horizon Europe ERC Starting Grant CRETE (GA:
   101039196), the US Office of Naval Research HACKCRYPT (Ref.
   N00014-19-1-2292), the Atraccion de Talento grant (Ref.
   2019-T2/TIC-13455), and the Juan de la Cierva grant (IJC2019-041599-I).
CR Abuah Chike, 2021, arXiv
   Aguirre A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473598
   Aguirre A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434333
   Aguirre A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110265
   Avanzini M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473592
   Avanzini M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428240
   Barthe G., 2020, Probabilistic Couplings from Program Logics, P145, DOI DOI 10.1017/9781108770750.006
   Barthe G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158145
   Barthe G, 2015, ACM SIGPLAN NOTICES, V50, P55, DOI [10.1145/2775051.2677000, 10.1145/10.1145/2676726.2677000]
   Barthe G, 2014, ACM SIGPLAN NOTICES, V49, P193, DOI 10.1145/2535838.2535847
   Barthe G, 2011, LECT NOTES COMPUT SC, V6841, P71, DOI 10.1007/978-3-642-22792-9_5
   Barthe G, 2012, ACM SIGPLAN NOTICES, V47, P97, DOI 10.1145/2103621.2103670
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Basin DA, 2020, J CRYPTOL, V33, P494, DOI 10.1007/s00145-019-09341-z
   Bousquet O, 2002, J MACH LEARN RES, V2, P499, DOI 10.1162/153244302760200704
   Çiçek E, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P533, DOI 10.1145/3314221.3314603
   Deng Y, 2015, SEMANTICS PROBABILIS, DOI [10.1007/978-3-662-45198-4, DOI 10.1007/978-3-662-45198-4]
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Grimm N., 2018, P 7 ACM SIGPLAN INT, P130
   Hamza J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360592
   Handley MAT, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371092
   Hardt M., 2016, PR MACH LEARN RES, V48, P1225
   Hölzl J, 2016, LECT NOTES COMPUT SC, V9807, P475, DOI 10.1007/978-3-319-43144-4_30
   Huang Zixin, 2018, ATVA, DOI [10.1007/978-3-030-01090-4_23, DOI 10.1007/978-3-030-01090-4_23]
   Hurd J, 2003, J LOGIC ALGEBR PROGR, V56, P3, DOI 10.1016/S1567-8326(02)00065-6
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Lehmann Nico, 2021, OSDI
   Lindvall T., 2002, Lectures on the coupling method
   Lobo-Vesga E, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3452096
   Maillard K, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371072
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   Nanevski A, 2011, P IEEE S SECUR PRIV, P165, DOI 10.1109/SP.2011.12
   Near JP, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360598
   Petcher Adam, 2015, Principles of Security and Trust. 4th International Conference, POST 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9036, P53, DOI 10.1007/978-3-662-46666-7_4
   Ramsey N, 2002, ACM SIGPLAN NOTICES, V37, P154, DOI 10.1145/565816.503288
   REED J, 2010, P ICFP, DOI 10.1145/1863543.1863568
   Scibior A, 2015, ACM SIGPLAN NOTICES, V50, P165, DOI 10.1145/2804302.2804317
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Tassarotti J, 2018, LECT NOTES COMPUT SC, V10895, P560, DOI 10.1007/978-3-319-94821-8_33
   Thorisson Hermann, 2000, COUPLING STATIONARIT
   Ngo VC, 2018, ACM SIGPLAN NOTICES, V53, P496, DOI [10.1145/3192366.3192394, 10.1145/3296979.3192394]
   Vasilenko Elizaveta, 2022, ZENODO, DOI [10.5281/zenodo.6710298, DOI 10.5281/ZENODO.6710298]
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158141
   Vazou N, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P132, DOI 10.1145/3242744.3242756
   Vazou N, 2014, ACM SIGPLAN NOTICES, V49, P39, DOI [10.1145/2633357.2633366, 10.1145/2775050.2633366]
   Vazou N, 2014, ACM SIGPLAN NOTICES, V49, P269, DOI 10.1145/2692915.2628161
   Villani C, 2009, GRUNDLEHR MATH WISS, V338, P1, DOI 10.1007/978-3-540-71050-9
   Wang PX, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371093
   Winograd-Cort D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110254
   Wunder J, 2023, Arxiv, DOI [arXiv:2202.01901, 10.48550/arXiv.2202.01901]
   Zhang HC, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341697
NR 51
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 112
DI 10.1145/3547643
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000023
OA gold
DA 2024-07-18
ER

PT J
AU Hou, KB
   Wang, ZY
AF Hou (favonia), Kuen-Bang
   Wang, Zhuyang
TI Logarithm and Program Testing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE parametricity; polymorphism; logarithm
AB Randomized property-based testing has gained much attention recently, but most frameworks stop short at polymorphic properties. Although Bernardy et al. have developed a theory to reduce a wide range of polymorphic properties to monomorphic ones, it relies upon ad-hoc embedding-projection pairs to massage the types into a particular form. This paper skips the embedding-projection pairs and presents a mechanical monomorphization for a general class of polymorphic functions, a step towards automatic testing for polymorphic properties. The calculation of suitable types for monomorphization turns out to be logarithm.
C1 [Hou (favonia), Kuen-Bang; Wang, Zhuyang] Univ Minnesota, Dept Comp Sci & Engn, Minneapolis, MN 55455 USA.
C3 University of Minnesota System; University of Minnesota Twin Cities
RP Hou, KB (corresponding author), Univ Minnesota, Dept Comp Sci & Engn, Minneapolis, MN 55455 USA.
EM kbh@umn.edu; wang9163@umn.edu
OI Hou, Kuen-Bang/0000-0002-2310-3673
CR Abbott M, 2003, LECT NOTES COMPUT SC, V2620, P23
   Altenkirch T, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S095679681500009X
   [Anonymous], 1989, FPCA 1989, DOI DOI 10.1145/99370.99404
   Bernardy JP, 2010, LECT NOTES COMPUT SC, V6012, P125, DOI 10.1007/978-3-642-11957-6_8
   Bernardy Jean-Philippe, 2017, DUAL VIEW TESTING PO
   Bird R., 1998, Mathematics of Program Construction. 4th International Conference, MPC'98. Proceedings, P52, DOI 10.1007/BFb0054285
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   CMU 15-210 Staff, 2018, SEQUENCE SIGN
   Hancock Peter., 2019, PERSONAL COMMUNICATI
   Hinze R, 2006, J FUNCT PROGRAM, V16, P197, DOI 10.1017/S0956796805005769
   Jane Street Group, 2018, PPXLIB MET OCAML
   Jay CB, 1995, SCI COMPUT PROGRAM, V25, P251, DOI 10.1016/0167-6423(95)00015-1
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Runciman C, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P37
   Voigtländer J, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P29, DOI 10.1145/1328438.1328445
   Wang Zhuyang., 2021, POLYCHECK TESTING PO
   Wang Zhuyang, 2021, REPLICATION PACKAGE, DOI [10.1145/3462305, DOI 10.1145/3462305]
   Xia Li-yao, 2017, TERMINAL VIEW TESTIN
   Xia Li-yao, 2017, TEST POLYMORPHIC FUN
NR 19
TC 1
Z9 1
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 64
DI 10.1145/3498726
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900065
OA gold
DA 2024-07-18
ER

PT J
AU Lepigre, R
   Sammler, M
   Memarian, K
   Krebbers, R
   Dreyer, D
   Sewell, P
AF Lepigre, Rodolphe
   Sammler, Michael
   Memarian, Kayvan
   Krebbers, Robbert
   Dreyer, Derek
   Sewell, Peter
TI VIP: Verifying Real-World C Idioms with Integer-Pointer Casts
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE C programming language; memory model; pointer provenance; separation
   logic; proof automation; Iris; Coq
AB Systems code often requires fine-grained control over memory layout and pointers, expressed using low-level (e.g., bitwise) operations on pointer values. Since these operations go beyond what basic pointer arithmetic in C allows, they are performed with the help of integer-pointer casts. Prior work has explored increasingly realistic memory object models for C that account for the desired semantics of integer-pointer casts while also being sound w.r.t. compiler optimisations, culminating in PNVI-ae-udi, the preferred memory object model in ongoing discussions within the ISO WG14 C standards committee. However, its complexity makes it an unappealing target for verification, and no tools currently exist to verify C programs under PNVI-ae-udi.
   In this paper, we introduce VIP, a newmemory object model aimed at supporting C verification. VIP sidesteps the complexities of PNVI-ae-udi with a simple but effective idea: a new construct that lets programmers express the intended provenances of integer-pointer casts explicitly. At the same time, we prove VIP compatible with PNVI-ae-udi, thus enabling verification on top of VIP to benefit from PNVI-ae-udi's validation with respect to practice. In particular, we build a verification tool, RefinedC-VIP, for verifying programs under VIP semantics. As the name suggests, RefinedC-VIP extends the recently developed RefinedC tool, which is automated yet also produces foundational proofs in Coq. We evaluate RefinedC-VIP on a range of systems-code idioms, and validate VIP's expressiveness via an implementation in the Cerberus C semantics.
C1 [Lepigre, Rodolphe; Sammler, Michael; Dreyer, Derek] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Memarian, Kayvan; Sewell, Peter] Univ Cambridge, Cambridge, England.
   [Krebbers, Robbert] Radboud Univ Nijmegen, Nijmegen, Netherlands.
C3 University of Cambridge; Radboud University Nijmegen
RP Lepigre, R (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
EM lepigre@mpi-sws.org; msammler@mpi-sws.org; kayvan.memarian@cl.cam.ac.uk;
   mail@robbertkrebbers.nl; dreyer@mpi-sws.org; peter.sewell@cl.cam.ac.uk
OI Lepigre, Rodolphe/0000-0002-2849-5338; Dreyer, Derek/0000-0002-3884-6867
FU European Research Council (ERC) under the European Union's Horizon 2020
   Framework Programme [683289]; European Research Council (ERC) under the
   European Union's Horizon 2020 research and innovation programme
   [789108]; Dutch Research Council (NWO) [016.Veni.192.259]; EPSRC
   Programme Grant REMS: Rigorous Engineering of Mainstream Systems
   [EP/K008528/1]; Google; Android Security's ASPIRE program; European
   Research Council (ERC) [789108] Funding Source: European Research
   Council (ERC)
FX This research was supported in part by a European Research Council (ERC)
   Consolidator Grant for the project lRustBeltz, funded under the European
   Union's Horizon 2020 Framework Programme (grant agreement no. 683289),
   in part by the European Research Council (ERC) under the European
   Union's Horizon 2020 research and innovation programme (AdG grant
   agreement No 789108, ELVER), in part by the Dutch Research Council
   (NWO), project 016.Veni.192.259, in part by the EPSRC Programme Grant
   REMS: Rigorous Engineering of Mainstream Systems (EP/K008528/1), in part
   by a Google PhD Fellowship for the second author, and in part by
   generous awards from Android Security's ASPIRE program and from Google
   Research.
CR [Anonymous], 2020, HAFNIUM
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Besson Frederic, 2014, Programming Languages and Systems. 12th Asian Symposium (APLAS 2014), Proceedings: LNCS 8858, P449, DOI 10.1007/978-3-319-12736-1_24
   Besson F, 2019, J AUTOM REASONING, V63, P369, DOI 10.1007/s10817-018-9496-y
   Besson F, 2015, LECT NOTES COMPUT SC, V9236, P67, DOI 10.1007/978-3-319-22102-1_5
   Cao QX, 2018, J AUTOM REASONING, V61, P367, DOI 10.1007/s10817-018-9457-5
   Chlipala A, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P234
   Cohen E, 2009, ELECTRON NOTES THEOR, V254, P85, DOI 10.1016/j.entcs.2009.09.061
   Cook Jeffrey, 1994, 517D TRUST INF SYST
   Deacon Will, 2020, Virtualization for the Masses: Exposing KVM on Android
   Edge Jake, 2020, KVM for Android
   Ellison C, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P533
   Greenaway D, 2014, ACM SIGPLAN NOTICES, V49, P429, DOI [10.1145/2594291.2594296, 10.1145/2666356.2594296]
   Gu RH, 2019, COMMUN ACM, V62, P89, DOI 10.1145/3356903
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gurevich Y., 1992, P CSL 92, P274
   Gustedt Jens, 2020, 6010 TS
   Hathhorn C, 2015, ACM SIGPLAN NOTICES, V50, P336, DOI [10.1145/2813885.2737979, 10.1145/2737924.2737979]
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jensen JB, 2013, ACM SIGPLAN NOTICES, V48, P301, DOI 10.1145/2480359.2429105
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kang J, 2015, ACM SIGPLAN NOTICES, V50, P326, DOI [10.1145/2737924.2738005, 10.1145/2813885.2738005]
   Kirchner F, 2015, FORM ASP COMPUT, V27, P573, DOI 10.1007/s00165-014-0326-7
   Klein G, 2014, ACM T COMPUT SYST, V32, DOI 10.1145/2560537
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Krebbers Robbert, 2014, Interactive Theorem Proving. 5th International Conference, ITP 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8558, P543, DOI 10.1007/978-3-319-08970-6_36
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krebbers R, 2015, CPP'15: PROCEEDINGS OF THE 2015 ACM CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P15, DOI 10.1145/2676724.2693571
   Krebbers R, 2013, LECT NOTES COMPUT SC, V8307, P50, DOI 10.1007/978-3-319-03545-1_4
   Krebbers Robbert, 2015, THESIS RADBOUD U NIJ
   Le Turnier P., 2020, INT J MOL SCI, V26, p1415.
   Lee J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276495
   Lepigre Rodolphe, **DATA OBJECT**, DOI 10.5281/zenodo.5662349
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leroy X, 2008, J AUTOM REASONING, V41, P1, DOI 10.1007/s10817-008-9099-0
   Leroy Xavier, 1996, OCAML RUNTIME REPRES
   Leroy Xavier, 2012, Research Report RR-7987
   Memarian K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290380
   Memarian K, 2016, ACM SIGPLAN NOTICES, V51, P1, DOI [10.1145/2908080.2908081, 10.1145/2980983.2908081]
   Myreen Magnus Oskar, 2009, THESIS U CAMBRIDGE U
   Norrish M., 1998, Ph. D. Dissertation
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   Papaspyrou Nikolaos, 1998, THESIS NATL TECHN U
   pKVM developers, 2020, IN ALL PKVM HYP
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rondon P, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P131, DOI 10.1145/1706299.1706316
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Sewell T, 2013, ACM SIGPLAN NOTICES, V48, P471, DOI 10.1145/2499370.2462183
   Stefanescu A, 2014, ELECTRON NOTES THEOR, V304, P183, DOI 10.1016/j.entcs.2014.05.010
   Tuch H, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P97
   Wang SY, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360597
   Wang YT, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290375
   WG14, 2004, 260 WG14
NR 58
TC 2
Z9 3
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 20
DI 10.1145/3498681
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900021
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Houshmand, F
   Lesani, M
   Vora, K
AF Houshmand, Farzin
   Lesani, Mohsen
   Vora, Keval
TI GRAFS: Declarative Graph Analytics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Fusion
ID GENERATION; PROGRAMS
AB Graph analytics elicits insights from large graphs to inform critical decisions for business, safety and security. Several large-scale graph processing frameworks feature efficient runtime systems; however, they often provide programming models that are low-level and subtly different from each other. Therefore, end users can find implementation and specially optimization of graph analytics error-prone and time-consuming. This paper regards the abstract interface of the graph processing frameworks as the instruction set for graph analytics, and presents Grafs, a high-level declarative specification language for graph analytics and a synthesizer that automatically generates efficient code for five high-performance graph processing frameworks. It features novel semantics-preserving fusion transformations that optimize the specifications and reduce them to three primitives: reduction over paths, mapping over vertices and reduction over vertices. Reductions over paths are commonly calculated based on push or pull models that iteratively apply kernel functions at the vertices. This paper presents conditions, parametric in terms of the kernel functions, for the correctness and termination of the iterative models, and uses these conditions as specifications to automatically synthesize the kernel functions. Experimental results show that the generated code matches or outperforms handwritten code, and that fusion accelerates execution.
C1 [Houshmand, Farzin; Lesani, Mohsen] Univ Calif Riverside, Riverside, CA 92521 USA.
   [Vora, Keval] Simon Fraser Univ, Burnaby, BC, Canada.
C3 University of California System; University of California Riverside;
   Simon Fraser University
RP Houshmand, F (corresponding author), Univ Calif Riverside, Riverside, CA 92521 USA.
EM fhous001@cs.ucr.edu; lesani@cs.ucr.edu; keval@sfu.ca
OI Vora, Keval/0000-0002-5462-5116
FU National Science Foundation [1942711, 1718997, 1910878]; Direct For
   Computer & Info Scie & Enginr; Division Of Computer and Network Systems
   [1718997] Funding Source: National Science Foundation; Direct For
   Computer & Info Scie & Enginr; Division of Computing and Communication
   Foundations [1942711, 1910878] Funding Source: National Science
   Foundation
FX This work is supported by National Science Foundation grants 1942711,
   1718997 and 1910878.
CR Aberger CR, 2017, ACM T DATABASE SYST, V42, DOI 10.1145/3129246
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 2014, P ANN C UNC ART INT
   Bansal S, 2006, ACM SIGPLAN NOTICES, V41, P394, DOI 10.1145/1168918.1168906
   Barman Shaon., 2015, 2015 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software (Onward!), Onward! 2015, P121, DOI 10
   Bloem R, 2014, 2014 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P35, DOI 10.1109/FMCAD.2014.6987593
   Bondhugula U, 2008, ACM SIGPLAN NOTICES, V43, P101, DOI 10.1145/1379022.1375595
   Cerny P, 2017, FORM METHOD SYST DES, V50, P97, DOI 10.1007/s10703-016-0256-5
   Cerny P, 2014, LECT NOTES COMPUT SC, V8559, P568, DOI 10.1007/978-3-319-08867-9_38
   Cheramangalath U, 2017, IEEE INT C CL COMP, P439, DOI 10.1109/CLUSTER.2017.72
   Cherem S, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P304, DOI 10.1145/1375581.1375619
   Cruz Flavio, 2016, ACM SIGPLAN Notices, V51, P1, DOI 10.1145/3016078.2851153
   Cruz F, 2014, THEOR PRACT LOG PROG, V14, P493, DOI 10.1017/S1471068414000167
   Cunningham D, 2008, LECT NOTES COMPUT SC, V4959, P276
   Darte A., 1999, 1999 International Conference on Parallel Architectures and Compilation Techniques (Cat. No.PR00425), P149, DOI 10.1109/PACT.1999.807510
   Dathathri R, 2018, ACM SIGPLAN NOTICES, V53, P752, DOI [10.1145/3296979.3192404, 10.1145/3192366.3192404]
   Emoto K, 2016, ACM SIGPLAN NOTICES, V51, P200, DOI 10.1145/3022670.2951938
   erny P., 2013, LNCS, P951, DOI DOI 10.1007/978-3-642-39799-8
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Gill A., 1993, P C FUNCT PROGR LANG, P223, DOI DOI 10.1145/165180.165214
   Gill G, 2018, LECT NOTES COMPUT SC, V11014, P249, DOI 10.1007/978-3-319-96983-1_18
   Golbeck J. A., 2005, THESIS U MARYLAND CO, DOI DOI 10.1016/j.physa.2012.03.021
   Gonzalez Joseph E., 2012, 10 USENIX S OP SYST, P17
   Grossman S, 2018, ACM SIGPLAN NOTICES, V53, P246, DOI 10.1145/3200691.3178506
   Gulwani S, 2012, COMMUN ACM, V55, P97, DOI 10.1145/2240236.2240260
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Halpert R.L., 2007, Proceedings of the International Conference on Parallel Computing Technologies, P353, DOI DOI 10.1109/PACT.2007.23
   Hewson JohnA., 2012, P 26 INT C LARGE INS, P51
   Hoang L, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P272, DOI 10.1145/3293883.3295729
   Hong S, 2012, ASPLOS XVII: SEVENTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P349
   Houshmand F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290387
   Itzhaky S, 2010, ACM SIGPLAN NOTICES, V45, P36, DOI 10.1145/1932682.1869463
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Johann P, 2000, ANN MATH ARTIF INTEL, V29, P1, DOI 10.1023/A:1018956702672
   Joshi R, 2006, ACM T PROGR LANG SYS, V28, P967, DOI 10.1145/1186632.1186633
   Joshi Rajeev., 2002, Denali: a goal-directed superoptimizer, V37
   Kennedy K., 1994, Languages and Compilers for Parallel Computing. 6th International Workshop Proceedings, P301
   Lindig C, 2004, LECT NOTES COMPUT SC, V2985, P298
   Low Y, 2012, PROC VLDB ENDOW, V5, P716, DOI 10.14778/2212351.2212354
   Malewicz Grzegorz, 2010, P ACM SIGMOD INT C M, P135, DOI [DOI 10.1145/1807167.1807184, 10.1145/1807167.1807184]
   Marian M, 2019, 2019 16 C EL MACH, DOI 10.1109/carpathiancc.2019.8765963
   Mariappan M, 2021, PROCEEDINGS OF THE SIXTEENTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS '21), P83, DOI 10.1145/3447786.3456230
   Massalin, 1987, SUPEROPTIMIZER LOOK
   Morihata A, 2018, LECT NOTES COMPUT SC, V10818, P166, DOI 10.1007/978-3-319-90686-7_11
   Nguyen D, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P456, DOI 10.1145/2517349.2522739
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Prountzos D, 2015, ACM SIGPLAN NOTICES, V50, P533, DOI [10.1145/2737924.2737953, 10.1145/2813885.2737953]
   Prountzos D, 2012, ACM SIGPLAN NOTICES, V47, P375, DOI 10.1145/2398857.2384644
   Qasem Apan., 2006, PROC ACM INT C SUPER, P249, DOI DOI 10.1145/1183401.1183437
   Rajbhandari S, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P152, DOI 10.1145/2892208.2892228
   Rajbhandari Samyam., 2016, Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis, SC '16, p40:1
   Rocha, 2011, PRACTICAL ASPECTS DE, V6539
   Bolívar MPR, 2015, PUB ADMIN INF TECH, V8, P1, DOI 10.1007/978-3-319-03167-5_1
   Roy A, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P472, DOI 10.1145/2517349.2522740
   Ruiz OC, 2016, FHPC'16: PROCEEDINGS OF THE 5TH INTERNATIONAL WORKSHOP ON FUNCTIONAL HIGH-PERFORMANCE COMPUTING, P58, DOI 10.1145/2975991.2976000
   Saarikivi O, 2017, ACM SIGPLAN NOTICES, V52, P17, DOI [10.1145/3140587.3062362, 10.1145/3062341.3062362]
   Sakka L, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P830, DOI 10.1145/3314221.3314626
   Sakka L, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133900
   Sasnauskas R., 2017, abs/1711.04422
   Schkufza E, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI 10.1145/2499368.2451150
   Sevenich M, 2016, PROC VLDB ENDOW, V9, P1257, DOI 10.14778/3007263.3007265
   Shashidhar G, 2017, LECT NOTES COMPUT SC, V10136, P235, DOI 10.1007/978-3-319-52709-3_18
   Shi KS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290386
   Shun JL, 2013, ACM SIGPLAN NOTICES, V48, P135, DOI 10.1145/2517327.2442530
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2980983.2908102, 10.1145/2908080.2908102]
   Solar-Lezama A, 2005, ACM SIGPLAN NOTICES, V40, P281, DOI 10.1145/1064978.1065045
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Srivastava S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P313, DOI 10.1145/1706299.1706337
   Udupa A, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2499370.2462174
   van Rest O, 2016, FOURTH INTERNATIONAL WORKSHOP ON GRAPH DATA MANAGEMENT EXPERIENCES AND SYSTEMS (GRADES2016), DOI 10.1145/2960414.2960421
   Vechev M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P327, DOI 10.1145/1706299.1706338
   Vechev M, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P125, DOI 10.1145/1375581.1375598
   Vora K, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P237, DOI 10.1145/3037697.3037748
   Vora K, 2019, PROCEEDINGS OF THE 2019 USENIX ANNUAL TECHNICAL CONFERENCE, P429
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wei-Ngan Chin, 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P11
   XU Z, 2014, P INT C HIGH PERF CO
   Zhang YZ, 2017, LECT NOTES COMPUT SC, V10695, P301, DOI 10.1007/978-3-319-71237-6_15
   Zhang YM, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276491
   Zhu XW, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P301
   Zhu Xiaowei, 2015, P USENIX ANN TECH C, P375
NR 83
TC 0
Z9 0
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 83
DI 10.1145/3473588
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800023
OA gold
DA 2024-07-18
ER

PT J
AU Yang, ZX
   Wu, N
AF Yang, Zhixuan
   Wu, Nicolas
TI Reasoning about Effect Interaction by Fusion
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Haskell; fusion; modular handlers; CPS transformation
ID HANDLERS; STATE
AB Effect handlers can be composed by applying them sequentially, each handling some operations and leaving other operations uninterpreted in the syntax tree. However, the semantics of composed handlers can be subtleDit is well known that different orders of composing handlers can lead to drastically different semantics. Determining the correct order of composition is a non-trivial task.
   To alleviate this problem, this paper presents a systematic way of deriving sufficient conditions on handlers for their composite to correctly handle combinations, such as the sum and the tensor, of the effect theories separately handled. These conditions are solely characterised by the clauses for relevant operations of the handlers, and are derived by fusing two handlers into one using a form of fold/build fusion and continuation-passing style transformation.
   As case studies, the technique is applied to commutative and distributive interaction of handlers to obtain a series of results about the interaction of common handlers: (a) equations respected by each handler are preserved after handler composition; (b) handling mutable state before any handler gives rise to a semantics in which state operations are commutative with any operations from the latter handler; (c) handling the writer effect and mutable state in either order gives rise to a correct handler of the commutative combination of these two theories.
C1 [Yang, Zhixuan; Wu, Nicolas] Imperial Coll London, Dept Comp, London, England.
C3 Imperial College London
RP Yang, ZX (corresponding author), Imperial Coll London, Dept Comp, London, England.
EM s.yang20@imperial.ac.uk; n.wu@imperial.ac.uk
OI Wu, Nicolas/0000-0002-4161-985X; Yang, Zhixuan/0000-0001-5573-3357
FU EPSRC [EP/S028129/1]; EPSRC [EP/S028129/1] Funding Source: UKRI
FX This work has been supported by EPSRC grant number EP/S028129/1 on
   `Scoped Contextual Operations and Effects'. The authors would like to
   thank Josh Ko, Marco Paviotti, Tom Schrijvers, Shin-Cheng Mu and the
   anonymous reviewers for their constructive feedback.
CR Ahman D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158095
   Bauer A, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:9)2014
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Bauer Andrej, 2018, ARXIV180705923CSLO
   Biernacki D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158096
   Brachthäuser JI, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000027
   Brachthauser Jonathan Immanuel, 2020, PROC ACM PROGRAM LAN, V4, DOI [10.1145/3408975, DOI 10.1145/3408975]
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2500365.2500581, 10.1145/2544174.2500581]
   BREITNER J, 2018, P ACM PROGRAMMING LA
   Cheung Kwok-Ho, 2017, THESIS U OXFORD
   Filinski A., 1999, POPL, P175, DOI [10.1145/292540.292557, DOI 10.1145/292540.292557]
   Forster Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110257
   Gibbons J, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P2
   Gill A., 1993, P C FUNCT PROGR LANG, P223, DOI DOI 10.1145/165180.165214
   Hillerström D, 2018, LECT NOTES COMPUT SC, V11275, P415, DOI 10.1007/978-3-030-02768-1_22
   Hino W, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P682, DOI 10.1145/2933575.2935319
   Hinze Ralf, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P324, DOI 10.1007/978-3-642-31113-0_16
   Hinze R, 2011, LECT NOTES COMPUT SC, V5836, P1, DOI 10.1007/978-3-642-24452-0_1
   Hoare C. A. R., 1985, MATH LOGIC QUART, V31, P9, DOI [10.1002/malq.19850310905, DOI 10.1002/MALQ.19850310905]
   Hoare CAR., 1985, Communicating Sequential Processes
   Hyland M, 2006, THEOR COMPUT SCI, V357, P70, DOI 10.1016/j.tcs.2006.03.013
   Jacobs B, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(2:6)2017
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kiselyov O, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796820000271
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Luksic Z, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796819000212
   Mac Lane S, 1998, GRAD TEXT M, V5
   Mislove Michael W., 2003, Electronic Notes in Theoretical Computer Science, DOI DOI 10.1016/J
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Pauwels K, 2019, LECT NOTES COMPUT SC, V11825, P18, DOI 10.1007/978-3-030-33636-3_2
   Piróg M, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P809, DOI 10.1145/3209108.3209166
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Plotkin G, 2008, IEEE S LOG, P118, DOI 10.1109/LICS.2008.45
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Plotkin Gordon, 2004, Electronic Notes in Theoretical Computer Science, V73, P149, DOI DOI 10.1016/J.ENTCS.2004.08.008
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pretnar Matija, 2010, THESIS U EDINBURGH U
   Schrijvers T, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '19), P98, DOI 10.1145/3331545.3342595
   Seynaeve W, 2020, LECT NOTES COMPUT SC, V12222, P204, DOI 10.1007/978-3-030-57761-2_10
   Spector-Zabusky A., 2018, P 7 ACM SIGPLAN INT, P14, DOI [10.1145/3167092, DOI 10.1145/3167092]
   Tesson J, 2011, LECT NOTES COMPUT SC, V6486, P163, DOI 10.1007/978-3-642-17796-5_10
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158141
   Vazou N, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P132, DOI 10.1145/3242744.3242756
   Voigtländer J, 2008, LECT NOTES COMPUT SC, V5133, P388
   Wu N, 2015, LECT NOTES COMPUT SC, V9129, P302, DOI 10.1007/978-3-319-19797-5_15
   Xie NN, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408981
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
NR 48
TC 5
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 73
DI 10.1145/3473578
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800013
OA gold
DA 2024-07-18
ER

PT J
AU Mathur, U
   Pavlogiannis, A
   Viswanathan, M
AF Mathur, Umang
   Pavlogiannis, Andreas
   Viswanathan, Mahesh
TI Optimal Prediction of Synchronization-Preserving Races
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrency; dynamic analysis; race detection; complexity
ID PRECISE
AB Concurrent programs are notoriously hard to write correctly, as scheduling nondeterminism introduces subtle errors that are both hard to detect and to reproduce. The most common concurrency errors are (data) races, which occur when memory-conflicting actions are executed concurrently. Consequently, considerable effort has been made towards developing efficient techniques for race detection. The most common approach is dynamic race prediction: given an observed, race-free trace sigma of a concurrent program, the task is to decide whether events of sigma can be correctly reordered to a trace sigma* that witnesses a race hidden in sigma.
   In this work we introduce the notion of sync(hronization)-preserving races. A sync-preserving race occurs in sigma when there is a witness sigma* in which synchronization operations (e.g., acquisition and release of locks) appear in the same order as in sigma. This is a broad definition that strictly subsumes the famous notion of happens-before races. Our main results are as follows. First, we develop a sound and complete algorithm for predicting sync-preserving races. For moderate values of parameters like the number of threads, the algorithm runs in (O) over tilde (N) time and space, where N is the length of the trace sigma. Second, we show that the problem has a Omega(N/log(2) N) space lower bound, and thus our algorithm is essentially time and space optimal. Third, we show that predicting races with even just a single reversal of two sync operations is NP-complete and even W[1]-hard when parameterized by the number of threads. Thus, sync-preservation characterizes exactly the tractability boundary of race prediction, and our algorithm is nearly optimal for the tractable side. Our experiments show that our algorithm is fast in practice, while sync-preservation characterizes races often missed by state-of-the-art methods.
C1 [Mathur, Umang; Viswanathan, Mahesh] Univ Illinois, Dept Comp Sci, Champaign, IL 61820 USA.
   [Pavlogiannis, Andreas] Aarhus Univ, Dept Comp Sci, Aarhus, Denmark.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   Aarhus University
RP Mathur, U (corresponding author), Univ Illinois, Dept Comp Sci, Champaign, IL 61820 USA.
EM umathur3@illinois.edu; pavlogiannis@cs.au.dk; vmahesh@illinois.edu
RI ; Pavlogiannis, Andreas/X-6831-2018
OI Mathur, Umang/0000-0002-7610-0660; Pavlogiannis,
   Andreas/0000-0002-8943-0722
FU Google PhD Fellowship; NSF [CCF 2007428, SHF 1901069]
FX We thank anonymous reviewers for their constructive feedback on an
   earlier draft of this manuscript. Umang Mathur is partially supported by
   a Google PhD Fellowship. Mahesh Viswanathan is partially supported by
   grants NSF SHF 1901069 and NSF CCF 2007428.
CR Aguado Joaquin, 2018, PROGRAMMING LANGUAGE
   [Anonymous], 2013, Runtime Verification, DOI DOI 10.1007/978-3-642
   [Anonymous], 2012, P 2012 ACM WORKSHOP, DOI DOI 10.1145/2414729.2414732
   [Anonymous], 2009, P 1 USENIX C HOT TOP
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Boehm Hans-J., 2011, Proceedings of the 3rd USENIX conference on Hot topic in parallelism, HotPar'11, P3
   Bond MD, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P255, DOI 10.1145/1806596.1806626
   Chen F, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P221, DOI 10.1145/1368088.1368119
   Choi JD, 2002, ACM SIGPLAN NOTICES, V37, P258, DOI 10.1145/543552.512560
   Christiaens M, 2001, LECT NOTES COMPUT SC, V2074, P761
   Cui HM, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P105, DOI 10.1145/2815400.2815427
   DINNING A, 1991, SIGPLAN NOTICES, V26, P85, DOI 10.1145/127695.122767
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Elmas T, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P245, DOI 10.1145/1250734.1250762
   Farchi Eitan, 2003, P 17 INT S PAR DISTR
   Farzan A, 2009, LECT NOTES COMPUT SC, V5643, P248, DOI 10.1007/978-3-642-02658-4_21
   Farzan A, 2009, LECT NOTES COMPUT SC, V5505, P155, DOI 10.1007/978-3-642-00768-2_14
   FIDGE C, 1991, COMPUTER, V24, P28, DOI 10.1109/2.84874
   Flanagan C, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P121, DOI 10.1145/1542476.1542490
   Flanagan C, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P293, DOI 10.1145/1375581.1375618
   Genç K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360605
   Genc Kaan, 2020, COMMUNICATION
   Gibbons PB, 1997, SIAM J COMPUT, V26, P1208, DOI 10.1137/S0097539794279614
   Gorogiannis N, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290370
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Huang J, 2016, ACM SIGPLAN NOTICES, V51, P462, DOI 10.1145/3022671.2984024
   Huang J, 2014, ACM SIGPLAN NOTICES, V49, P337, DOI [10.1145/2666356.2594315, 10.1145/2594291.2594315]
   Kalhauge CG, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276516
   Kasikci B, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P406, DOI 10.1145/2517349.2522736
   Kini D, 2017, ACM SIGPLAN NOTICES, V52, P157, DOI [10.1145/3062341.3062374, 10.1145/3140587.3062374]
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Liu P., 2016, P 25 INT S SOFTW TES, P59, DOI [10.1145/2931037.2931046, DOI 10.1145/2931037.2931046]
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Mathur U, 2020, IEEE S LOG, P713, DOI 10.1145/3373718.3394783
   Mathur U, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P183, DOI 10.1145/3373376.3378475
   Mathur Umang, 2018, P ACM PROGR LANG, DOI DOI 10.1145/3276515
   Mattern F., 1988, WORKSH PAR DISTR ALG, P215
   Narayanasamy S, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P22, DOI 10.1145/1250734.1250738
   Pavlogiannis A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371085
   Pavlogiannis Andreas, 2020, ABS201016385 CORR
   Pozniansky E, 2003, ACM SIGPLAN NOTICES, V38, P178, DOI 10.1145/966049.781529
   Roemer J, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P747, DOI 10.1145/3385412.3385993
   Roemer J, 2018, ACM SIGPLAN NOTICES, V53, P374, DOI [10.1145/3296979.3192385, 10.1145/3192366.3192385]
   Roemer Jake, 2019, ABS190708337 CORR
   Rosu Grigore, 2018, RVPREDICT RUNTIME VE
   Said M, 2011, LECT NOTES COMPUT SC, V6617, P313, DOI 10.1007/978-3-642-20398-5_23
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   SCHONBERG E, 1989, SIGPLAN NOTICES, V24, P285, DOI 10.1145/74818.74844
   Sen K, 2005, LECT NOTES COMPUT SC, V3535, P211
   Sen K, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P11, DOI 10.1145/1375581.1375584
   Sergey Ilya, 2019, WHAT DOES IT MEAN PR
   Smaragdakis Y, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P387
   Smith L. A., 2001, P 2001 ACMIEEE C SUP, P8, DOI [10.1145/582034.582042, DOI 10.1145/582034.582042]
   Sorrentino Francesco, 2010, P 18 ACM SIGSOFT INT, P37, DOI DOI 10.1145/1882291.1882300
   Umang Mathur, 2020, RAPID
   von Praun C, 2001, ACM SIGPLAN NOTICES, V36, P70, DOI 10.1145/504311.504288
   Wang C, 2009, LECT NOTES COMPUT SC, V5850, P256, DOI 10.1007/978-3-642-05089-3_17
   Yu M, 2019, INT J PARALLEL PROG, V47, P805, DOI 10.1007/s10766-018-0579-5
   Yu Y., 2005, P 20 ACM S OP SYST P, P221
   Zhao Q, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P242, DOI 10.1145/3293883.3295731
   Zhivich M, 2009, IEEE SECUR PRIV, V7, P87, DOI 10.1109/MSP.2009.56
NR 61
TC 15
Z9 16
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 36
DI 10.1145/3434317
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100036
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Patrignani, M
   Martin, EM
   Devriese, D
AF Patrignani, Marco
   Martin, Eric Mark
   Devriese, Dominique
TI On the Semantic Expressiveness of Recursive Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Fully-abstract compilation; Lambda Calculus; Recursive types;
   Iso-recursive types; Coinductive Equi-recursive types; Backtranslation
ID FULLY-ABSTRACT COMPILATION; POWER
AB Recursive types extend the simply-typed lambda calculus (STLC) with the additional expressive power to enable diverging computation and to encode recursive data-types (e.g., lists). Two formulations of recursive types exist: iso-recursive and equi-recursive. The relative advantages of iso- and equi-recursion are wellstudied when it comes to their impact on type-inference. However, the relative semantic expressiveness of the two formulations remains unclear so far.
   This paper studies the semantic expressiveness of STLC with iso- and equi-recursive types, proving that these formulations are equally expressive. In fact, we prove that they are both as expressive as STLC with only term-level recursion. We phrase these equi-expressiveness results in terms of full abstraction of three canonical compilers between these three languages (STLC with iso-, with equi-recursive types and with term-level recursion). Our choice of languages allows us to study expressiveness when interacting over both a simply-typed and a recursively-typed interface. The three proofs all rely on a typed version of a proof technique called approximate backtranslation.
   Together, our results show that there is no difference in semantic expressiveness between STLCs with isoand equi-recursive types. In this paper, we focus on a simply-typed setting but we believe our results scale to more powerful type systems like System F.
C1 [Patrignani, Marco; Martin, Eric Mark] Stanford Univ, Comp Sci, Stanford, CA 94305 USA.
   [Patrignani, Marco] CISPA Helmholtz Ctr Informat Secur, Saarbrucken, Germany.
   [Devriese, Dominique] Vrije Univ Brussel, Comp Sci, Brussels, Belgium.
C3 Stanford University; Vrije Universiteit Brussel
RP Patrignani, M (corresponding author), Stanford Univ, Comp Sci, Stanford, CA 94305 USA.; Patrignani, M (corresponding author), CISPA Helmholtz Ctr Informat Secur, Saarbrucken, Germany.
EM mp@cs.stanford.edu; ericmarkmartin@cs.stanford.edu;
   dominique.devriese@vub.be
RI Devriese, Dominique/C-5493-2014
OI Devriese, Dominique/0000-0002-3862-6856; Patrignani,
   Marco/0000-0003-3411-9678
FU Office of Naval Research [N00014-18-1-2620]; German Federal Ministry of
   Education and Research (BMBF) [FKZ: 13N1S0762]; Air Force Office of
   Scientific Research [FA9550-21-1-0054]; Fund for Scientific Research -
   Flanders (FWO)
FX The authors thank the anonymous reviewers for detailed feedback on an
   earlier draft as well as Phil Wadler for interesting comments and
   suggestions. This work was partially supported: by the Office of Naval
   Research for support through grant N00014-18-1-2620, Accountable
   Protocol Customization, by the German Federal Ministry of Education and
   Research (BMBF) through funding for the CISPA-Stanford Center for
   Cybersecurity (FKZ: 13N1S0762), by the Air Force Office of Scientific
   Research under award number FA9550-21-1-0054, and by the Fund for
   Scientific Research -Flanders (FWO).
CR Abadi M, 1996, IEEE S LOG, P242, DOI 10.1109/LICS.1996.561324
   Abadi Martin, 1998, ICALP 98 ICALP 98
   Ahmed A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P431
   Ahmed A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P157
   Ahmed Amal J., 2004, Ph. D. Dissertation
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Benton N, 2009, ACM SIGPLAN NOTICES, V44, P97, DOI 10.1145/1631687.1596567
   Bowman William J., 2015, ICFP
   Cai YF, 2016, ACM SIGPLAN NOTICES, V51, P30, DOI 10.1145/2914770.2837660
   Devriese D, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(4:2)2017
   Devriese D, 2016, ACM SIGPLAN NOTICES, V51, P164, DOI 10.1145/2914770.2837618
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   Fournet C, 2013, ACM SIGPLAN NOTICES, V48, P371, DOI 10.1145/2480359.2429114
   Gordon M., 1979, EDINBURGH LCF MECHAN, DOI [10.1007/3-540-09724-4, DOI 10.1007/3-540-09724-4]
   Gorla D, 2016, MATH STRUCT COMP SCI, V26, P639, DOI 10.1017/S0960129514000279
   HARPER R, 1993, ACM T PROGR LANG SYS, V15, P211, DOI 10.1145/169701.169696
   Hur CK, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1926385.1926402
   Im H, 2013, LECT NOTES COMPUT SC, V7966, P299, DOI 10.1007/978-3-642-39212-2_28
   Kennedy A, 2006, THEOR COMPUT SCI, V364, P311, DOI 10.1016/j.tcs.2006.08.014
   MACQUEEN D, 1986, INFORM CONTROL, V71, P95, DOI 10.1016/S0019-9958(86)80019-5
   MacQueen D., 1984, PRINCIPLES PROGRAMMI, P165, DOI DOI 10.1145/800017.800528
   Milner R., 1977, Theoretical Computer Science, V4, P1, DOI 10.1016/0304-3975(77)90053-6
   MITCHELL JC, 1993, SCI COMPUT PROGRAM, V21, P141, DOI 10.1016/0167-6423(93)90004-9
   Morris James Hiram, 1968, Ph.D. thesis
   New MS, 2016, ACM SIGPLAN NOTICES, V51, P103, DOI 10.1145/3022670.2951941
   Parrow J, 2008, ELECTRON NOTES THEOR, V209, P173, DOI 10.1016/j.entcs.2008.04.011
   Patrignani M, 2020, ABS200111334 CORR
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Patrignani M, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2699503
   Patrignani Marco, 2020, ARXIV201010859CSPL ARXIV201010859CSPL
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Sarkar D, 2004, ACM SIGPLAN NOTICES, V39, P201, DOI 10.1145/1016848.1016878
   Schmidt-Schauss M, 2015, THEOR COMPUT SCI, V577, P98, DOI 10.1016/j.tcs.2015.02.027
   Skorstengaard Lau, 2019, P ACM PROGR LANG 3 P P ACM PROGR LANG 3 P, V19
   Urzyczyn P., 1995, Mathematical Foundations of Computer Science 1995. 20th International Symposium, MFCS '95. Proceedings, P382
   Van Strydonck Thomas, 2019, P ACM PROGR LANG ICF
NR 37
TC 5
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 21
DI 10.1145/3434302
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100021
OA gold, Green Published, Green Accepted
DA 2024-07-18
ER

PT J
AU Clune, J
   Ramamurthy, V
   Martins, R
   Acar, UA
AF Clune, Joshua
   Ramamurthy, Vijay
   Martins, Ruben
   Acar, Umut A.
TI Program Equivalence for Assisted Grading of Functional Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Equivalence; Assisted Grading; Formal Methods; Functional
   Programming
AB In courses that involve programming assignments, giving meaningful feedback to students is an important challenge. Human beings can give useful feedback by manually grading the programs but this is a time-consuming, labor intensive, and usually boring process. Automatic graders can be fast and scale well but they usually provide poor feedback. Although there has been research on improving automatic graders, research on scaling and improving human grading is limited.
   We propose to scale human grading by augmenting the manual grading process with an equivalence algorithm that can identify the equivalences between student submissions. This enables human graders to give targeted feedback for multiple student submissions at once. Our technique is conservative in two aspects. First, it identifies equivalence between submissions that are algorithmically similar, e.g., it cannot identify the equivalence between quicksort and mergesort. Second, it uses formal methods instead of clustering algorithms from the machine learning literature. This allows us to prove a soundness result that guarantees that submissions will never be clustered together in error. Despite only reporting equivalence when there is algorithmic similarity and the ability to formally prove equivalence, we show that our technique can significantly reduce grading time for thousands of programming submissions from an introductory functional programming course.
C1 [Clune, Joshua; Ramamurthy, Vijay; Martins, Ruben; Acar, Umut A.] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Clune, J (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM josh.seth.clune@gmail.com; vrama628@gmail.com; rubenm@andrew.cmu.edu;
   umut@cs.cmu.edu
FU National Science Foundation [CCF-1901381, CCF-1762363, CCF-1629444]
FX This work was partially funded by National Science Foundation (Grants
   CCF-1901381, CCF-1762363, and CCF-1629444).
CR Ahmed A, 2009, ACM SIGPLAN NOTICES, V44, P340, DOI 10.1145/1594834.1480925
   [Anonymous], 2006, Lecture Notes in Computer Science, DOI 10.1007/116930246
   Backes John, 2013, Model Checking Software. 20th International Symposium, SPIN 2013. Proceedings, P99, DOI 10.1007/978-3-642-39176-7_7
   BERMAN CL, 1989, 1989 IEEE INTERNATIONAL CONFERENCE ON COMPUTER-AIDED DESIGN, P456, DOI 10.1109/ICCAD.1989.76990
   Bobot F, 2015, INT J SOFTW TOOLS TE, V17, P709, DOI 10.1007/s10009-014-0314-5
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Clarke E, 2001, FORM METHOD SYST DES, V19, P7, DOI 10.1023/A:1011276507260
   Clune Joshua, 2020, ABS201008051 CORR
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dreyer D, 2009, IEEE S LOG, P71, DOI 10.1109/LICS.2009.34
   Fedyukovich G, 2016, LECT NOTES COMPUT SC, V9780, P433, DOI 10.1007/978-3-319-41540-6_24
   Felsing D, 2014, P 29 ACM IEEE INT C, P349, DOI [10.1145/2642937.2642987, DOI 10.1145/2642937.2642987]
   Godlin B, 2009, DES AUT CON, P466
   Gulwani Sumit, 2018, P 39 ACM SIGPLAN C P, DOI [10.1145/3192366.3192387, DOI 10.1145/3192366.3192387]
   Hur CK, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P59
   Jaber G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371127
   Kaleeswaran S, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P739, DOI 10.1145/2950290.2950363
   Koutavas V, 2006, ACM SIGPLAN NOTICES, V41, P141, DOI 10.1145/1111320.1111050
   Liu X, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING EDUCATION AND TRAINING (ICSE-SEET), P126, DOI 10.1109/ICSE-SEET.2019.00022
   Perry DM, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P860, DOI 10.1145/3314221.3314629
   Pu YW, 2016, COMPANION PROCEEDINGS OF THE 2016 ACM SIGPLAN INTERNATIONAL CONFERENCE ON SYSTEMS, PROGRAMMING, LANGUAGES AND APPLICATIONS: SOFTWARE FOR HUMANITY (SPLASH COMPANION'16), P39, DOI 10.1145/2984043.2989222
   Singh R, 2013, ACM SIGPLAN NOTICES, V48, P15, DOI 10.1145/2499370.2462195
   Sumii E, 2005, ACM SIGPLAN NOTICES, V40, P63, DOI 10.1145/1047659.1040311
   Wang K, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P481, DOI 10.1145/3192366.3192384
   Zuck L., 2002, Electronic Notes in Theoretical Computer Science, V65, DOI 10.1016/S1571-0661(04)80393-1
NR 25
TC 5
Z9 5
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 171
DI 10.1145/3428239
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900048
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Six, C
   Boulmé, S
   Monniaux, D
AF Six, Cyril
   Boulme, Sylvain
   Monniaux, David
TI Certified and Efficient Instruction Scheduling Application to
   Interlocked VLIW Processors
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Formal verification of compiler optimizations; Instruction-level
   parallelism; the COQ proof assistant; Symbolic execution; Hash-conning
ID FORMAL VERIFICATION
AB COMPCERT is a moderately optimizing C compiler with a formal, machine-checked, proof of correctness: after successful compilation, the assembly code has a behavior faithful to the source code. Previously, it only supported target instruction sets with sequential semantics, and did not attempt reordering instructions for optimization.
   We present here a COMPCERT backend for a VLIW core ( i.e. with explicit parallelism at the instruction level), the first COMPCERT backend providing scalable and efficient instruction scheduling. Furthermore, its highly modular implementation can be easily adapted to other VLIW or non-VLIW pipelined processors.
C1 [Six, Cyril] Kalray SA, 180 Ave Europe, F-38330 Montbonnot St Martin, France.
   [Boulme, Sylvain; Monniaux, David] Univ Grenoble Alpes, CNRS, Grenoble INP, Verimag, 700 Ave Cent, F-38401 St Martin Dheres, France.
C3 Communaute Universite Grenoble Alpes; Institut National Polytechnique de
   Grenoble; Universite Grenoble Alpes (UGA); Centre National de la
   Recherche Scientifique (CNRS)
RP Six, C (corresponding author), Kalray SA, 180 Ave Europe, F-38330 Montbonnot St Martin, France.
EM Cyril.Six@kalray.eu; Sylvain.Boulme@univ-grenoble-alpes.fr;
   David.Monniaux@univ-grenoble-alpes.fr
OI Six, Cyril/0000-0003-0399-1498; Boulme, Sylvain/0000-0002-9501-9606;
   Monniaux, David/0000-0001-7671-6126
CR [Anonymous], 2004, ST J RES
   [Anonymous], 1994, Synthesis and optimization of digital circuits
   [Anonymous], 2008, J. Satisf. Boolean Model. Comput., DOI 10.3233/sat190039
   Barany Gergo, 2018, LOLA 2018 SYNTAX SEM
   Blazy S, 2006, LECT NOTES COMPUT SC, V4085, P460
   Blindell GH, 2017, ACM T EMBED COMPUT S, V16, DOI 10.1145/3126528
   Boulme Sylvain, 2019, Embedding Untrusted Imperative ML Oracles into Coq Verified Code
   Falk H., 2016, Proceedings of the 16th International Workshop on Worst-Case Execution Time Analysis (WCET'16), P1, DOI [DOI 10.4230/OASICS.WCET.2016.2, 10.4230/OASIcs.WCET.2016.2]
   FEAUTRIER P, 1991, INT J PARALLEL PROG, V20, P23, DOI 10.1007/BF01407931
   Filliatre Jean-Christophe, 2006, ML, P12, DOI DOI 10.1145/1159876.1159880
   Fisher J. A., 1983, 10th Annual International Conference on Computer Architecture Conference Proceedings, P140, DOI 10.1145/800046.801649
   Fisher J.A., 2005, Embedded Computing: A VLIW Approach to Architecture, Compilers, and Tools
   FISHER JA, 1981, IEEE T COMPUT, V30, P478, DOI 10.1109/TC.1981.1675827
   Franca Ricardo Bedin, 2012, P EMBEDDED REAL TIME
   Franca RicardoBedin., 2011, Bringing Theory to Practice: Predictability and Performance in Embedded Systems, volume 18 of OpenAccess Series in Informatics (OASIcs), P59, DOI DOI 10.4230/OASICS.PPES.2011.59
   Gailly Jean-Loup, 2017, ZLIB
   Granlund T., 1994, SIGPLAN Notices, V29, P61, DOI 10.1145/773473.178249
   KASTNER D, 2018, ERTS2 2018 9 EUR C E, P1
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Lam M., 1988, SIGPLAN Notices, V23, P318, DOI 10.1145/960116.54022
   Lane Tom, 1998, LIBJP
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Leroy Xavier, 2017, I FOUND CRASH BUG HY
   LOWNEY PG, 1993, J SUPERCOMPUT, V7, P51, DOI 10.1007/BF01205182
   Lozano Roberto Castaneda, 2019, T PROGRAMMING LANGUA
   Makhorin Andrew., 2012, GNU LINEAR PROGRAMMI
   Mosnier Alain, 2019, SHA 256 IMPLEMENTATI
   Mullen E, 2016, ACM SIGPLAN NOTICES, V51, P448, DOI [10.1145/2980983.2908109, 10.1145/2908080.2908109]
   Patrick Conor, 2015, BITSLICED AES IMPLEM
   Pouchet Louis-Noel, 2012, the Polyhedral Benchmark suite
   Ramakrishna Rau B., 1982, 9th Annual Symposium on Computer Architecture, P131
   Tristan JB, 2008, ACM SIGPLAN NOTICES, V43, P17, DOI 10.1145/1328897.1328444
   Tristan JB, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P83, DOI 10.1145/1706299.1706311
   Tristan Jean-Baptiste, 2009, Formal verification of translation validators
   Van Winkle Lewis, 2018, GENANN MINIMAL ARTIF
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
NR 37
TC 9
Z9 10
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 129
DI 10.1145/3428197
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900006
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Hillerström, D
   Lindley, S
   Longley, J
AF Hillerstrom, Daniel
   Lindley, Sam
   Longley, John
TI Effects for Efficiency Asymptotic Speedup with First-Class Control
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE effect handlers; asymptotic complexity analysis; generic search
ID EXPRESSIVE POWER; PROGRAM
AB We study the fundamental efficiency of delimited control. Specifically, we show that effect handlers enable an asymptotic improvement in runtime complexity for a certain class of functions. We consider the generic count problem using a pure PCF-like base language lambda(b), and its extension with effect handlers lambda(h). We show that lambda(h) admits an asymptotically more efficient implementation of generic count than any lambda(b) implementation. We also show that this efficiency gap remains when Ab is extended with mutable state.
   To our knowledge this result is the first of its kind for control operators.
C1 [Hillerstrom, Daniel; Lindley, Sam; Longley, John] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
   [Lindley, Sam] Imperial Coll London, London, England.
   [Lindley, Sam] Heriot Watt Univ, Edinburgh, Midlothian, Scotland.
C3 University of Edinburgh; Imperial College London; Heriot Watt University
RP Hillerström, D (corresponding author), Univ Edinburgh, Edinburgh, Midlothian, Scotland.
EM daniel.hillerstrom@ed.ac.uk; sam.lindley@ed.ac.uk;
   jrl@staffmail.ed.ac.uk
OI Hillerstrom, Daniel/0000-0003-4730-9315; Lindley,
   Sam/0000-0002-1360-4714
FU EPSRC [EP/K034413/1, EP/L01503X/1]; ERC Consolidator Grant Skye
   [682315]; EPSRC [EP/K034413/1] Funding Source: UKRI
FX We would like to thank James McKinna and Maciej Pirog for insightful
   discussions, and Danel Ahman and the anonymous reviewers for helpful
   feedback and suggestions for improvement. Daniel Hillerstrom was
   supported by EPSRC grant EP/L01503X/1 and by ERC Consolidator Grant Skye
   (grant number 682315). Sam Lindley was supported by EPSRC grant
   EP/K034413/1 (From Data Types to Session TypesDA Basis for Concurrency
   and Distribution).
CR [Anonymous], 1997, ART COMPUTER PROGRAM
   [Anonymous], 1999, PURELY FUNCTIONAL DA
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Bauer Andrej, 2018, ABS180705923 CORR
   Bell J, 2009, DISCRETE MATH, V309, P1, DOI 10.1016/j.disc.2007.12.043
   Benton N, 2001, J FUNCT PROGRAM, V11, P395, DOI 10.1017/S0956796801004099
   Berger U., 1990, Totale Objekte und Mengen in der Bereichstheorie
   Biernacki D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290319
   Biernacki D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371116
   Bird R., 1997, Journal of Functional Programming, V7, P541, DOI 10.1017/S0956796897002827
   Bird R, 2006, J FUNCT PROGRAM, V16, P671, DOI 10.1017/S0956796806006058
   Cartwright R., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P328, DOI 10.1145/143165.143232
   Cormen T.H., 2009, INTRO ALGORITHMS
   Daniels Robbie, 2016, THESIS U EDINBURGH S
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Dolan S., 2015, OCAML WORKSHOP
   Escardó M, 2007, IEEE S LOG, P443, DOI 10.1109/LICS.2007.25
   Farvardin K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P75, DOI 10.1145/3385412.3385994
   Felleisen M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P180, DOI 10.1145/73560.73576
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   Felleisen Matthias, 1987, FORMAL DESCRIPTION P, P193
   Felleisen Matthias, 1987, THESIS INDIANAPOLIS
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Flatt M, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P45, DOI 10.1145/3385412.3385981
   Forster Y, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000121
   Hillerström D, 2018, LECT NOTES COMPUT SC, V11275, P415, DOI 10.1007/978-3-030-02768-1_22
   Hillerström D, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000040
   Hillerstrom Daniel, 2017, Formal Structures for Computation and Deduction (LIPIcs, V84
   Hillerstrom Daniel, ARXIV200700605CSPL
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Jones ND, 2001, J FUNCT PROGRAM, V11, P55, DOI 10.1017/S0956796800003889
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kiselyov O, 2005, ACM SIGPLAN NOTICES, V40, P192, DOI 10.1145/1090189.1086390
   Kiselyov O, 2013, ACM SIGPLAN NOTICES, V48, P59, DOI 10.1145/2503778.2503791
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Lindley Sam, 2020, IN PRESS, V30
   Longley J, 2015, THEOR APPL COMPUT, P1, DOI 10.1007/978-3-662-47992-6
   Longley J, 1999, ACM SIGPLAN NOTICES, V34, P1, DOI 10.1145/317765.317775
   Longley J, 2019, COMPUTABILITY, V8, P119, DOI 10.3233/COM-180200
   Longley J, 2018, LOG METH COMPUT SCI, V14, DOI 10.23638/LMCS-14(3:8)2018
   Milner R., 1977, Theoretical Computer Science, V4, P1, DOI 10.1016/0304-3975(77)90053-6
   MLton, 2020, MLTON WEBS
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Pippenger N, 1997, ACM T PROGR LANG SYS, V19, P223, DOI 10.1145/244795.244798
   Pirog Maciej, 2019, FSCD SCHLOSS DAGSTUH, V30, P1, DOI 10.4230/LIPICS.FSCD.2019.30
   Plotkin G., 2001, Foundations of Software Science and Computation Structures. 4th International Conference, FOSSACS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2030), P1
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Scott Dana, 1971, P S COMP AUT, V21
   Simpson AK, 1998, LECT NOTES COMPUT SC, V1450, P456, DOI 10.1007/BFb0055795
   Sperber M., 2009, J. Funct. Program, V19, P1
NR 55
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 100
DI 10.1145/3408982
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700014
OA gold, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Swamy, N
   Rastogi, A
   Fromherz, A
   Merigoux, D
   Ahman, D
   Martínez, G
AF Swamy, Nikhil
   Rastogi, Aseem
   Fromherz, Aymeric
   Merigoux, Denis
   Ahman, Danel
   Martinez, Guido
TI SteelCore: An Extensible Concurrent Separation Logic for Effectful
   Dependently Typed Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Proofs; Separation Logic; Concurrency
AB Much recent research has been devoted to modeling effects within type theory. Building on this work, we observe that effectful type theories can provide a foundation on which to build semantics for more complex programming constructs and program logics, extending the reasoning principles that apply within the host effectful type theory itself.
   Concretely, our main contribution is a semantics for concurrent separation logic (CSL) within the F* proof assistant in a manner that enables dependently typed, effectful F* programs to make use of concurrency and to be specified and verified using a full-featured, extensible CSL. In contrast to prior approaches, we directly derive the partial-correctness Hoare rules for CSL from the denotation of computations in the effectful semantics of non-deterministically interleaved atomic actions.
   Demonstrating the flexibility of our semantics, we build generic, verified libraries that support various concurrency constructs, ranging from dynamically allocated, storable spin locks, to protocol-indexed channels. We conclude that our effectful semantics provides a simple yet expressive basis on which to layer domain-specific languages and logics for verified, concurrent programming.
C1 [Swamy, Nikhil] Microsoft Res, Redmond, WA 98052 USA.
   [Rastogi, Aseem] Microsoft Res, Bengaluru, India.
   [Fromherz, Aymeric] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Merigoux, Denis] Inria Paris, Paris, France.
   [Ahman, Danel] Univ Ljubljana, Ljubljana, Slovenia.
   [Martinez, Guido] CIFASIS CONICET, Rosario, Argentina.
C3 Microsoft; Carnegie Mellon University; University of Ljubljana; Consejo
   Nacional de Investigaciones Cientificas y Tecnicas (CONICET)
RP Swamy, N (corresponding author), Microsoft Res, Redmond, WA 98052 USA.
OI Ahman, Danel/0000-0001-6595-2756; Martinez, Guido/0009-0005-5831-9991;
   Merigoux, Denis/0000-0003-2247-0938
FU Department of the Navy, Office of Naval Research [N00014-18-1-2892]; ERC
   Consolidator Grant CIRCUS [683032]; Microsoft Research Visiting
   Researcher program; European Union [834146]; Microsoft Research;
   European Research Council (ERC) [683032] Funding Source: European
   Research Council (ERC); Marie Curie Actions (MSCA) [834146] Funding
   Source: Marie Curie Actions (MSCA)
FX Aymeric Fromherz's and Denis Merigoux's work was supported in part by
   internships at Microsoft Research. Aymeric Fromherz was also funded by
   the Department of the Navy, Office of Naval Research under Grant no.
   N00014-18-1-2892. Denis Merigoux was also funded by ERC Consolidator
   Grant CIRCUS no. 683032. Danel Ahman's work was supported in part by the
   Microsoft Research Visiting Researcher program. He has also received
   funding from the European Union's Horizon 2020 research and innovation
   programme under the Marie Sklodowska-Curie grant agreement no. 834146.
   We thank Robbert Krebbers, the shepherd of this paper; the anonymous
   reviewers; Matt Parkinson, Derek Dreyer, Ralf Jung, Aleks Nanevksi and
   all the members of Project Everest for their feedback, answering
   questions and many useful discussions.
CR Ahman D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158153
   Atkey R, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000209
   Atkey R, 2009, J FUNCT PROGRAM, V19, P335, DOI 10.1017/S095679680900728X
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2500365.2500581, 10.1145/2544174.2500581]
   Brookes S, 2004, LECT NOTES COMPUT SC, V3170, P16
   Buisse A, 2011, ELECTRON NOTES THEOR, V276, P121, DOI 10.1016/j.entcs.2011.09.018
   Chajed Tej, 2019, P 27 ACM S OP SYST P
   Coq Development Team, The Coq proof assistant
   Dinsdale-Young T., P 40 ANN ACM SIGPLAN
   Dodds M, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2818638
   Filinski A., 2007, P 12 ACM SIGPLAN INT
   Gordon CS, 2013, ACM SIGPLAN NOTICES, V48, P73, DOI 10.1145/2499370.2462160
   Gotsman A, 2007, LECT NOTES COMPUT SC, V4807, P19
   Hancock P., 2000, Computer Science Logic. 14th International Workshop, CSL 2000. Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.1862), P317
   Hinrichsen JK, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371074
   Hobor A, 2008, LECT NOTES COMPUT SC, V4960, P353
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Jensen JB, 2012, LECT NOTES COMPUT SC, V7211, P377, DOI 10.1007/978-3-642-28869-2_19
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krogh-Jespersen M., 2019, ANERIS MECH LO UNPUB
   Martínez G, 2019, LECT NOTES COMPUT SC, V11423, P30, DOI 10.1007/978-3-030-17184-1_2
   McBride Conor, 2011, Ornamental algebras, algebraic ornaments
   Nanevski A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360587
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   Nanevski A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P261, DOI 10.1145/1706299.1706331
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   Parkinson MJ, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(3:01)2012
   Piróg M, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P809, DOI 10.1145/3209108.3209166
   Poulsen CB, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158104
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rouvoet A., 2020, P 9 ACM SIGPLAN INT
   Sergey I, 2015, ACM SIGPLAN NOTICES, V50, P77, DOI [10.1145/2813885.2737964, 10.1145/2737924.2737964]
   Smans J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160911
   Swamy N., LIGHTWEIGHT MONADIC
   Swamy N., ICFP 2011A
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Timany A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158152
   Xia L.-y., 2019, P ACM PROGR LANG POP, V4
NR 45
TC 12
Z9 14
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 121
DI 10.1145/3409003
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700035
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Lee, W
   Yu, H
   Rival, X
   Yang, H
AF Lee, Wonyeol
   Yu, Hangyeol
   Rival, Xavier
   Yang, Hongseok
TI Towards Verified Stochastic Variational Inference for Probabilistic
   Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Probabilistic programming; static analysis; semantics; correctness
AB Probabilistic programming is the idea of writing models from statistics and machine learning using program notations and reasoning about these models using generic inference engines. Recently its combination with deep learning has been explored intensely, which led to the development of so called deep probabilistic programming languages, such as Pyro, Edward and ProbTorch. At the core of this development lie inference engines based on stochastic variational inference algorithms. When asked to find information about the posterior distribution of a model written in such a language, these algorithms convert this posterior-inference query into an optimisation problem and solve it approximately by a form of gradient ascent or descent. In this paper, we analyse one of the most fundamental and versatile variational inference algorithms, called score estimator or REINFORCE, using tools from denotational semantics and program analysis. We formally express what this algorithm does on models denoted by programs, and expose implicit assumptions made by the algorithm on the models. The violation of these assumptions may lead to an undefined optimisation objective or the loss of convergence guarantee of the optimisation process. We then describe rules for proving these assumptions, which can be automated by static program analyses. Some of our rules use nontrivial facts from continuous mathematics, and let us replace requirements about integrals in the assumptions, such as integrability of functions defined in terms of programs' denotations, by conditions involving differentiation or boundedness, which are much easier to prove automatically (and manually). Following our general methodology, we have developed a static program analysis for the Pyro programming language that aims at discharging the assumption about what we call model-guide support match. Our analysis is applied to the eight representative model-guide pairs from the Pyro webpage, which include sophisticated neural network models such as AIR. It finds a bug in one of these cases, reveals a non-standard use of an inference engine in another, and shows that the assumptions are met in the remaining six cases.
C1 [Lee, Wonyeol; Yu, Hangyeol; Yang, Hongseok] Korea Adv Inst Sci & Technol, Sch Comp, Daejeon, South Korea.
   [Rival, Xavier] INRIA Paris, Dept Informat ENS, Paris, France.
   [Rival, Xavier] PSL Univ, CNRS, Paris, France.
C3 Korea Advanced Institute of Science & Technology (KAIST); Universite
   PSL; Centre National de la Recherche Scientifique (CNRS)
RP Lee, W (corresponding author), Korea Adv Inst Sci & Technol, Sch Comp, Daejeon, South Korea.
EM wonyeol@kaist.ac.kr; yhk1344@kaist.ac.kr; rival@di.ens.fr;
   hongseok.yang@kaist.ac.kr
RI Yang, Hongseok/AAC-4471-2020
FU Engineering Research Center Program through the National Research
   Foundation of Korea (NRF) - Korean Government MSIT
   [NRF-2018R1A5A1059921]; Next-Generation Information Computing
   Development Program through the National Research Foundation of Korea
   (NRF) - Ministry of Science, ICT [2017M3C4A7068177]
FX We thank Fritz Obermeyer and Eli Bingham for explaining the subtleties
   of Pyro and suggesting us to try the Pyro regression test suite. Sam
   Staton, Ohad Kammar and Matthijs Vakar helped us to understand the
   semantics of recursion in the probabilistic programming languages
   better. Lee, Yang and Yu were supported by the Engineering Research
   Center Program through the National Research Foundation of Korea (NRF)
   funded by the Korean Government MSIT (NRF-2018R1A5A1059921), and also by
   Next-Generation Information Computing Development Program through the
   National Research Foundation of Korea (NRF) funded by the Ministry of
   Science, ICT (2017M3C4A7068177).
CR [Anonymous], 2006, ARXIVCS0607075V2
   Bhat S, 2013, LECT NOTES COMPUT SC, V7795, P508, DOI 10.1007/978-3-642-36742-7_35
   Bhat S, 2012, ACM SIGPLAN NOTICES, V47, P545, DOI 10.1145/2103621.2103721
   Bingham E, 2019, J MACH LEARN RES, V20
   Borgström J, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI [10.1145/2951913.2951942, 10.1145/3022670.2951942]
   Brooks S, 2011, CH CRC HANDB MOD STA, P1, DOI 10.1201/b10905
   Burda Yuri, 2016, 4 INT C LEARN REPR
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   Chaganty Arun, 2013, Artificial Intelligence and Statistics, V31
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chaudhuri S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P57, DOI 10.1145/1706299.1706308
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2012, LECT NOTES COMPUT SC, V7211, P169, DOI 10.1007/978-3-642-28869-2_9
   Ehrhard T, 2014, ACM SIGPLAN NOTICES, V49, P309, DOI 10.1145/2535838.2535865
   Eslami S, 2016, NEURAL INFORM PROCES, P3233
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   Ghourchian H, 2017, IEEE COMMUN LETT, V21, P1469, DOI 10.1109/LCOMM.2017.2689770
   Goodman ND., 2008, UAI, P220
   Gordon AD, 2014, ACM SIGPLAN NOTICES, V49, P321, DOI 10.1145/2535838.2535850
   Green PJ, 1995, BIOMETRIKA, V82, P711, DOI 10.1093/biomet/82.4.711
   HASTINGS WK, 1970, BIOMETRIKA, V57, P97, DOI 10.1093/biomet/57.1.97
   Heunen C, 2017, IEEE S LOG
   Hoffman MD, 2013, J MACH LEARN RES, V14, P1303
   Hur Chung-Kil, 2015, 35 IARCS ANN C FDN S, P475
   JONES C, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P186
   Kingma DP, 2014, ADV NEUR IN, V27
   Kiselyov O, 2016, LECT NOTES COMPUT SC, V10017, P357, DOI 10.1007/978-3-319-47958-3_19
   Klenke A., 2014, Probability Theory A Comprehensive Course (Universitext), V2nd edn
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Krishnan RG, 2017, AAAI CONF ARTIF INTE, P2101
   Kucukelbir A, 2017, J MACH LEARN RES, V18, P1
   Kucukelbir A, 2015, ADV NEUR IN, V28
   Lee Wonyeol, 2019, ARXIV190708827
   Mansinghka Vikash K., 2014, Venture: A Higher-Order Probabilistic Programming Platform with Programmable Inference
   METROPOLIS N, 1953, J CHEM PHYS, V21, P1087, DOI 10.1063/1.1699114
   Mirman Matthew, 2018, INT C MACH LEARN, P3575
   Monniaux D, 2001, LECT NOTES COMPUT SC, V2028, P367
   Monniaux D, 2000, LECT NOTES COMPUT SC, V1824, P322
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Neal RM, 1998, NATO ADV SCI I D-BEH, V89, P355
   Nori AV, 2014, AAAI CONF ARTIF INTE, P2476
   Paisley J., 2012, P 29 INT C MACH LEAR
   Ranganath R, 2015, JMLR WORKSH CONF PRO, V38, P762
   Ranganath R, 2014, JMLR WORKSH CONF PRO, V33, P814
   Schiffman E, 2014, J ORAL FACIAL PAIN H, V28, P6, DOI 10.11607/jop.1151
   Scibior Adam, 2018, PACMPL 2 POPL, V60
   Siddharth N., 2017, NIPS
   Smolka S, 2017, ACM SIGPLAN NOTICES, V52, P557, DOI 10.1145/3093333.3009843
   Srivastava A., 2017, PROC 5 INT C LEARN R
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   Staton S, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P525, DOI 10.1145/2933575.2935313
   Toronto N, 2015, LECT NOTES COMPUT SC, V9032, P53, DOI 10.1007/978-3-662-46669-8_3
   Tran D, 2018, ADV NEUR IN, V31
   Tran Dustin, 2016, Edward: A library for probabilistic modeling, inference, and criticism
   Le TA, 2017, PR MACH LEARN RES, V54, P1338
   Uber AI Labs, 2019, PYRO EXAMPLES
   Uber AI Labs, PYRO REGRESSION TEST
   Vákár M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290349
   van de Meent JW, 2016, JMLR WORKSH CONF PRO, V51, P1195
   Wang D, 2018, ACM SIGPLAN NOTICES, V53, P513, DOI 10.1145/3192366.3192408
   WILLIAMS RJ, 1992, MACH LEARN, V8, P229, DOI 10.1007/BF00992696
   Wingate David, 2013, Automated variational inference in probabilistic programming
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
   Wu Y, 2018, PR MACH LEARN RES, V80
   Yang Hongseok, 2019, IMPLEMENTING INFEREN
NR 67
TC 9
Z9 9
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 16
DI 10.1145/3371084
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400017
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Wang, CL
   Feng, Y
   Bodik, R
   Cheung, A
   Dillig, I
AF Wang, Chenglong
   Feng, Yu
   Bodik, Rastislav
   Cheung, Alvin
   Dillig, Isil
TI Visualization by Example
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Data Visualization
AB While visualizations play a crucial role in gaining insights from data, generating useful visualizations from a complex dataset is far from an easy task. In particular, besides understanding the functionality provided by existing visualization libraries, generating the desired visualization also requires reshaping and aggregating the underlying data as well as composing different visual elements to achieve the intended visual narrative. This paper aims to simplify visualization tasks by automatically synthesizing the required program from simple visual sketches provided by the user. Specifically, given an input data set and a visual sketch that demonstrates how to visualize a very small subset of this data, our technique automatically generates a program that can be used to visualize the entire data set.
   From a program synthesis perspective, automating visualization tasks poses several challenges that are not addressed by prior techniques. First, because many visualization tasks require data wrangling in addition to generating plots from a given table, we need to decompose the end-to-end synthesis task into two separate sub-problems. Second, because the intermediate specification that results from the decomposition is necessarily imprecise, this makes the data wrangling task particularly challenging in our context. In this paper, we address these problems by developing a new compositional visualization-by-example technique that (a) decomposes the end-to-end task into two different synthesis problems over different DSLs and (b) leverages bi-directional program analysis to deal with the complexity that arises from having an imprecise intennediate specification.
   We have implemented our visualization-by-example approach in a tool called VISER and evaluate it on 83 visualization tasks collected from on-line forums and tutorials. VISER can solve 84% of these benchmarks within a 600 second time limit, and, for those tasks that can be solved, the desired visualization is among the top-5 generated by VISER in 70% of the cases.
C1 [Wang, Chenglong; Bodik, Rastislav] Univ Washington, Seattle, WA 98195 USA.
   [Feng, Yu] Univ Calif Santa Barbara, Santa Barbara, CA 93106 USA.
   [Cheung, Alvin] Univ Calif Berkeley, Berkeley, CA 94720 USA.
   [Dillig, Isil] Univ Texas Austin, Austin, TX 78712 USA.
C3 University of Washington; University of Washington Seattle; University
   of California System; University of California Santa Barbara; University
   of California System; University of California Berkeley; University of
   Texas System; University of Texas Austin
RP Wang, CL (corresponding author), Univ Washington, Seattle, WA 98195 USA.
EM clwang@cs.washington.edu; yufeng@cs.ucsb.edu; bodik@cs.washington.edu;
   akcheung@cs.berkeley.edu; isil@cs.utexas.edu
OI Cheung, Alvin/0000-0001-6261-6263
FU National Science Foundation [ACI OACs 1535191, IIS-1546083, IIS-1651489,
   IISOAC-1739419]; DARPA [FA8750s14sCs0011, FA8750s 16s2s0032,
   FA8750-16-2-0032]; Intel and NSF joint research center for Computer
   Assisted Programming for Heterogeneous Architectures [CAPA NSF
   CCF-1723352]; CONIX Research Center, one of six centers in JUMP, a
   Semiconductor Research Corporation (SRC) - DARPA [CMU 1042741-394324
   AM01]; DOE award [DE-SC0016260]; U.S. Department of Energy (DOE)
   [DE-SC0016260] Funding Source: U.S. Department of Energy (DOE)
FX This work is supported in part by the National Science Foundation
   through grants ACI OACs 1535191, IIS-1546083, IIS-1651489 and
   IISOAC-1739419; DARPAawards FA8750s14sCs0011, FA8750s 16s2s0032 and
   FA8750-16-2-0032; the Intel and NSF joint research center for Computer
   Assisted Programming for Heterogeneous Architectures (CAPA NSF
   CCF-1723352); the CONIX Research Center, one of six centers in JUMP, a
   Semiconductor Research Corporation (SRC) program sponsored by DARPA CMU
   1042741-394324 AM01; DOE award DE-SC0016260; and gifts from Adobe,
   Mozilla, Nokia, Qualcomm, Google, Huawei, and NVIDIA. We would also like
   to thank anonymous reviewers for their valuable comments on paper
   revising.
CR Bostock M, 2011, IEEE T VIS COMPUT GR, V17, P2301, DOI 10.1109/TVCG.2011.185
   Carr H., 2014, EUROGRAPHICS C VISUA, V33, P10
   Chandra S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P363, DOI 10.1145/1542476.1542517
   Dhurjati Dinakar, 2006, STAT AN 13 INT S SAS, DOI [10.1007/11823230_27, DOI 10.1007/11823230_27]
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Hanrahan P., 2006, SIGMOD
   Harris WR, 2011, ACM SIGPLAN NOTICES, V46, P317, DOI 10.1145/1993316.1993536
   Mackinlay JD, 2007, IEEE T VIS COMPUT GR, V13, P1137, DOI 10.1109/TVCG.2007.70594
   Maina S, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236775
   Martins Ruben, 2019, TRINITY EXTENSIBLE S
   Miltner A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158089
   Moritz D, 2019, IEEE T VIS COMPUT GR, V25, P438, DOI 10.1109/TVCG.2018.2865240
   Phothilimthana PM, 2016, ACM SIGPLAN NOTICES, V51, P297, DOI 10.1145/2954679.2872387
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Tran QT, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P535
   Raza M, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P792
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Saket B, 2017, IEEE T VIS COMPUT GR, V23, P331, DOI 10.1109/TVCG.2016.2598839
   Satyanarayan A, 2017, IEEE T VIS COMPUT GR, V23, P341, DOI 10.1109/TVCG.2016.2599030
   Satyanarayan A, 2014, COMPUT GRAPH FORUM, V33, P351, DOI 10.1111/cgf.12391
   Schroeder D, 2016, IEEE T VIS COMPUT GR, V22, P877, DOI 10.1109/TVCG.2015.2467153
   Stolte C, 2008, COMMUN ACM, V51, P75, DOI 10.1145/1400214.1400234
   Wang CL, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276527
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang XY, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133886
   Wang Xinyu, P S PRINC PROGR LANG, V63
   Wongsuphasawat K., 2017, CHI, P2648, DOI 10.1145/3025453.3025768
   Wongsuphasawat K, 2016, P WORKSH HUM IN THE, P1, DOI [10.1145/2939502.2939506, 10.1145/2939502.29395061,2,3,9, DOI 10.1145/2939502.29395061,2,3,9]
   Wongsuphasawat K, 2016, IEEE T VIS COMPUT GR, V22, P649, DOI 10.1109/TVCG.2015.2467191
   Zhang S, 2013, IEEE INT CONF AUTOM, P224, DOI 10.1109/ASE.2013.6693082
NR 33
TC 20
Z9 25
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 49
DI 10.1145/3371117
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400050
OA gold
DA 2024-07-18
ER

PT J
AU Barik, R
   Sridharan, M
   Ramanathan, MK
   Chabbi, M
AF Barik, Rajkishore
   Sridharan, Manu
   Ramanathan, Murali Krishna
   Chabbi, Milind
TI Optimization of Swift Protocols
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE swift; protocol; existential containers; virtual method call;
   boxing/unboxing
AB Swift, an increasingly-popular programming language, advocates the use of protocols, which define a set of required methods and properties for conforming types. Protocols are commonly used in Swift programs for abstracting away implementation details; e.g., in a large industrial app from Uber, they are heavily used to enable mock objects for unit testing. Unfortunately, heavy use of protocols can result in significant performance overhead. Beyond the dynamic dispatch often associated with such a feature, Swift allows for both value and reference types to conform to a protocol, leading to significant boxing and unboxing overheads.
   In this paper, we describe three new optimizations and transformations to reduce the overhead of Swift protocols. Within a procedure, we define LocalVar, a dataflow analysis and transformation to remove both dynamic dispatch and boxing overheads. We also describe Param, which optimizes the case of protocol-typed method parameters using specialization. Finally, we describe SoleType, a transformation that injects casts when a global analysis (like type-hierarchy analysis) discovers some protocol variable must have some concrete type. We also describe how these optimizations work fruitfully together and with existing Swift optimizations to deliver further speedups.
   We perform elaborate experimentation and demonstrate that our optimizations deliver an average 1.56x speedup on a suite of Swift benchmarks that use protocols. Further, we applied the optimizations to a production iOS Swift application from Uber used by millions of customers daily. For a set of performance spans defined by the developers of the application, the optimized version showed speedups ranging from 6.9% to 55.49%. A version of our optimizations has been accepted as part of the official Swift compiler distribution.
C1 [Barik, Rajkishore; Ramanathan, Murali Krishna; Chabbi, Milind] Uber Technol Inc, San Francisco, CA 94103 USA.
   [Sridharan, Manu] Univ Calif Riverside, Comp Sci & Engn, Riverside, CA 92521 USA.
C3 Uber Technologies, Inc.; University of California System; University of
   California Riverside
RP Barik, R (corresponding author), Uber Technol Inc, San Francisco, CA 94103 USA.
EM rajbarik@uber.com; manu@cs.ucr.edu; murali@uber.com; milind@uber.com
RI Chabbi, Milind/AFT-9369-2022
CR Agesen O., 1993, ECOOP '93, P247, DOI DOI 10.1007/3-540-47910-4_14
   Ahn W, 2014, ACM SIGPLAN NOTICES, V49, P496, DOI [10.1145/2666356.2594332, 10.1145/2594291.2594332]
   Anderson O, 2011, INT S HIGH PERF COMP, P419, DOI 10.1109/HPCA.2011.5749748
   [Anonymous], 1991, Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages
   AppleOTA, 2019, APPL OV THE AIR REQ
   Bacon DF, 1996, ACM SIGPLAN NOTICES, V31, P324, DOI 10.1145/236338.236371
   BucketSort, 2019, BUCKETSORT
   Cierniak M, 2000, ACM SIGPLAN NOTICES, V35, P13, DOI 10.1145/358438.349306
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   Detlefs D, 1999, LECT NOTES COMPUT SC, V1628, P258
   Deutsch PeterL., 1984, Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles of Programming Languages, POPL '84, P297, DOI [10.1145/800017.800542, DOI 10.1145/800017.800542]
   Dot G, 2017, INT SYM CODE GENER, P257, DOI 10.1109/CGO.2017.7863745
   FERNANDEZ MF, 1995, SIGPLAN NOTICES, V30, P103, DOI 10.1145/223428.207121
   Fujinami N., 1998, Types im Compilation. Second International Workshop, TIC '98 Proceedings, P253, DOI 10.1007/BFb0055522
   Gal A, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P465, DOI 10.1145/1542476.1542528
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Hirzel M, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1216374.1216379
   Hoffman Jon., 2019, SWIFT 4 PROTOCOL ORI, V3rd
   HOLZLE U, 1991, LECT NOTES COMPUT SC, V512, P21
   HOLZLE U, 1994, SIGPLAN NOTICES, V29, P326
   Hudak Paul., 1992, SIGPLAN NOT, V27, P1, DOI DOI 10.1145/130697.130698
   Ishizaki K, 2000, ACM SIGPLAN NOTICES, V35, P294, DOI 10.1145/354222.353191
   Jagannathan S., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P393, DOI 10.1145/199448.199536
   Kedlaya MN, 2014, ACM SIGPLAN NOTICES, V49, P37, DOI 10.1145/2508168.2508177
   Klabnik S., 2019, RUST PROGRAMMING LAN
   Masuhara H, 2002, NEW GENERAT COMPUT, V20, P101, DOI 10.1007/BF03037261
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rompf T, 2014, ACM SIGPLAN NOTICES, V49, P41, DOI [10.1145/2594291.2594316, 10.1145/2666356.2594316]
   Schultz UP, 2003, ACM T PROGR LANG SYS, V25, P452, DOI 10.1145/778559.778561
   SHIVERS O, 1988, SIGPLAN NOTICES, V23, P164, DOI 10.1145/960116.54007
   Shivers Olin Grigsby, 1991, Ph. D. Dissertation
   SILDocs, 2019, SWIFT INT LANG SIL
   SILSSA, 2017, SIL SSA UPD
   SILVerifier, 2017, SILVERIFIER
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Sundaresan V, 2000, ACM SIGPLAN NOTICES, V35, P264, DOI 10.1145/354222.353189
   SwiftBench, 2019, SWIFT BENCHM SUIT
   SwiftLang, 2019, SWIFT PROGR LANG
   SwiftLangDoc, 2019, SWIFT LANG DOC
   UberRibs, 2017, RIBS CROSS PLATF MOB
   WWDCSwiftPerf, 2016, UND SWIFT PERF APPL
NR 41
TC 2
Z9 2
U1 2
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 164
DI 10.1145/3360590
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500049
OA gold
DA 2024-07-18
ER

PT J
AU Vukotic, I
   Rahli, V
   Esteves-Veríssimo, P
AF Vukotic, Ivana
   Rahli, Vincent
   Esteves-Verissimo, Paulo
TI Asphalion: Trustworthy Shielding against Byzantine Faults
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Formal verification; Distributed systems; Fault-tolerance; Byzantine
   faults; Hybrid protocols; MinBFT; Compositional reasoning; Coq;
   Knowledge calculus; Monad; Step-indexing
ID COMMON KNOWLEDGE; AGREEMENT; CHECKING; MODEL; TIME
AB Byzantine fault-tolerant state-machine replication (BEF-SMR) is a technique for hardening systems to tolerate arbitrary faults. Although robust, BFT-SMR protocols are very costly in terms of the number of required replicas (3f + 1 to tolerate f faults) and of exchanged messages. However, with "hybrid" architectures, where "normal" components trust some "special" components to provide properties in a trustworthy manner, the cost of using BFT can be dramatically reduced. Unfortunately, even though such hybridization techniques decrease the message/time/space complexity of BFI' protocols, they also increase their structural complexity.
   Therefore, we introduce Asphalion, the first theorem prover-based framework for verifying implementations of hybrid systems and protocols. It relies on three novel languages: (1) HyLoE: a Hybrid Logic of Events to reason about hybrid fault models; (2) MoC: a Monadic Component language to implement systems as collections of interacting hybrid components; and (3) LoCK: a sound Logic of events-based Calculus of Knowledge to reason about both homogeneous and hybrid systems at a high-level of abstraction (thereby allowing reusing proofs, and capturing the high-level logic of distributed systems). In addition, Asphalion supports compositional reasoning, e.g., through mechanisms to lift properties about trusted-trustworthy components, to the level of the distributed systems they are integrated in. As a case study, we have verified crucial safety properties (e.g., agreement) of several implementations of hybrid protocols.
C1 [Vukotic, Ivana; Esteves-Verissimo, Paulo] Univ Luxembourg, SnT, Luxembourg, Luxembourg.
   [Rahli, Vincent] Univ Birmingham, Birmingham, W Midlands, England.
C3 University of Luxembourg; University of Birmingham
RP Vukotic, I (corresponding author), Univ Luxembourg, SnT, Luxembourg, Luxembourg.
EM ivana.vukotic@uni.lu; vincent.rahli@gmail.com; paulo.verissimo@uni.lu
OI (Todorovic) Vukotic, Ivana/0000-0001-9077-5106; Rahli,
   Vincent/0000-0002-5914-8224
FU Fonds National de la Recherche Luxembourg (FNR) through PEARL grant
   [FNR/P14/8149128]
FX This work is partially supported by the Fonds National de la Recherche
   Luxembourg (FNR) through PEARL grant FNR/P14/8149128.
CR Abraham Ittai, 2017, ABS171201367 CORR
   Abraham Ittai, 2017, LEIBNIZ INT P INF LI, V25, DOI [10.4230/LIPIcs.OPODIS.2017.25, DOI 10.4230/LIPICS.OPODIS.2017.25]
   Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Alonso Gustavo, 2017, EUROSYS 2017, DOI [10.1145/3064176, DOI 10.1145/3064176]
   Anand A, 2015, LECT NOTES COMPUT SC, V9236, P34, DOI 10.1007/978-3-319-22102-1_3
   [Anonymous], 2009, NSDI
   [Anonymous], 1987, PODC
   [Anonymous], 2017, DISC, DOI DOI 10.4230/LIPICS
   BARNOY A, 1992, INFORM COMPUT, V97, P205, DOI 10.1016/0890-5401(92)90035-E
   Behl J, 2017, PROCEEDINGS OF THE TWELFTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS 2017), P222, DOI 10.1145/3064176.3064213
   Ben-Zvi I, 2014, J ACM, V61, DOI 10.1145/2542181
   Ben-Zvi Ido., 2011, THESIS TECHNIONS COM
   Bertot Y., 2004, TEXT THEORET COMP S
   Bessani A, 2014, I C DEPEND SYS NETWO, P355, DOI 10.1109/DSN.2014.43
   Bessani Alysson, 2018, LIPICS, V95
   Bickford M, 2009, LECT NOTES COMPUT SC, V5582, P140, DOI 10.1007/978-3-642-02414-6_9
   Bickford Mark, 2012, LANG DISTR ALG WORKS
   Bickford Mark, 2004, LNCS, V3452, P449, DOI [10.1007/978-3-540-32275-7_30, DOI 10.1007/978-3-540-32275-7_30]
   Biely M, 2007, PODC'07: PROCEEDINGS OF THE 26TH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P244
   Bolosky W. J., 2007, Operating Systems Review, V41, P17, DOI 10.1145/1243418.1243422
   Byung-Gon Chun, 2007, Operating Systems Review, V41, P189, DOI 10.1145/1323293.1294280
   Castaneda A, 2016, PROCEEDINGS OF THE 2016 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC'16), P107, DOI 10.1145/2933057.2933120
   Castañeda A, 2014, LECT NOTES COMPUT SC, V8784, P91, DOI 10.1007/978-3-662-45174-8_7
   Castro M, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE THIRD SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '99), P173, DOI 10.1145/571637.571640
   Castro Miguel, 1999, Tech report MIT/LCS/TM-590
   Castro Miguel, 2001, Technical Report MIT/LCS/TR-817
   Chand S, 2016, LECT NOTES COMPUT SC, V9995, P119, DOI 10.1007/978-3-319-48989-6_8
   CHANDY KM, 1985, ACM T COMPUT SYST, V3, P63, DOI 10.1145/214451.214456
   CHANDY KM, 1986, DISTRIB COMPUT, V1, P40, DOI 10.1007/BF01843569
   Chaouch-Saad M, 2009, LECT NOTES COMPUT SC, V5797, P93, DOI 10.1007/978-3-642-04420-5_10
   Charron-Bost B, 2011, LECT NOTES COMPUT SC, V6976, P120, DOI 10.1007/978-3-642-24550-3_11
   Charron-Bost B, 2009, DISTRIB COMPUT, V22, P49, DOI 10.1007/s00446-009-0084-6
   Chaudhuri K, 2010, LECT NOTES ARTIF INT, V6173, P142
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   Correia M, 2005, DISTRIB COMPUT, V17, P237, DOI 10.1007/s00446-004-0110-7
   Correia M, 2004, SYM REL DIST SYST, P174, DOI 10.1109/RELDIS.2004.1353018
   Correia M, 2002, LECT NOTES COMPUT SC, V2485, P234
   Correia M, 2013, COMPUT J, V56, P693, DOI 10.1093/comjnl/bxs148
   Dan A, 2017, PROCEEDINGS OF THE ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC'17), P241, DOI 10.1145/3087801.3087839
   Decker C., 2016, P 17 INT C DISTR COM, P13
   Desai A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276529
   Distler T, 2016, IEEE T COMPUT, V65, P2807, DOI 10.1109/TC.2015.2495213
   Dragoi C, 2016, ACM SIGPLAN NOTICES, V51, P400, DOI [10.1145/2837614.2837650, 10.1145/2914770.2837650]
   Dragoi C, 2014, LECT NOTES COMPUT SC, V8318, P161, DOI 10.1007/978-3-642-54013-4_10
   Dragoi Cezara, 2015, LIPICS, V32, P90, DOI [10.4230/ LIPIcs.SNAPL.2015.90, DOI 10.4230/LIPICS.SNAPL.2015.90]
   Dreyer D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:16)2011
   DSN, DSN 2014
   DWORK C, 1990, INFORM COMPUT, V88, P156, DOI 10.1016/0890-5401(90)90014-9
   Eldefrawy K, 2017, PROCEEDINGS OF THE 10TH ACM CONFERENCE ON SECURITY AND PRIVACY IN WIRELESS AND MOBILE NETWORKS (WISEC 2017), P99, DOI 10.1145/3098243.3098261
   Fagin R, 1997, DISTRIB COMPUT, V10, P199, DOI 10.1007/s004460050038
   Fagin R., 1995, Reasoning About Knowledge, DOI DOI 10.7551/MITPRESS/5803.001.0001
   Fonseca P, 2017, PROCEEDINGS OF THE TWELFTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS 2017), P328, DOI 10.1145/3064176.3064163
   Furst A, 2014, LECT NOTES COMPUT SC, V8739, P323, DOI 10.1007/978-3-319-10181-1_20
   Garland S., 2004, MITLCSTR961
   Garland S.J., 2000, Foundations of component-based systems, P285
   Georgiou Chryssis, 2009, International Journal on Software Tools for Technology Transfer, V11, P153, DOI 10.1007/s10009-008-0097-7
   Goren G, 2018, PODC'18: PROCEEDINGS OF THE 2018 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P285, DOI 10.1145/3212734.3212768
   Halpern JY, 2017, ELECTRON P THEOR COM, P324, DOI 10.4204/EPTCS.251.22
   HALPERN JY, 1992, J ACM, V39, P449, DOI 10.1145/146637.146638
   HALPERN JY, 1990, J ACM, V37, P549, DOI 10.1145/79147.79161
   HALPERN JY, 1987, ANNU REV COMPUT SCI, V2, P37, DOI 10.1146/annurev.cs.02.060187.000345
   Hawblitzel C, 2017, COMMUN ACM, V60, P83, DOI 10.1145/3068608
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Holzmann GJ, 2004, The SPIN model checker: primer and reference manual, V1003
   Joshi R, 2003, FORM METHOD SYST DES, V22, P125, DOI 10.1023/A:1022969405325
   Kapitza R., 2012, P 7 ACM EUR C COMP S, V12, P295, DOI DOI 10.1145/2168836.2168866
   Kokoris-Kogias E, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P279
   Konnov I, 2017, ACM SIGPLAN NOTICES, V52, P719, DOI 10.1145/3093333.3009860
   Konnov I, 2017, INFORM COMPUT, V252, P95, DOI 10.1016/j.ic.2016.03.006
   Konnov I, 2015, LECT NOTES COMPUT SC, V9206, P85, DOI 10.1007/978-3-319-21690-4_6
   Krenicky Roman, 2010, 20107 KARLSR I TECHN
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   LAMPORT L, 1982, ACM T PROGR LANG SYS, V4, P382, DOI 10.1145/357172.357176
   Lamport L, 2004, SPECIFYING SYSTEMS T
   Lazic Marijana, 2017, OPODIS LIPICS, V32, DOI [10.4230/LIPIcs.OPODIS.2017.32, DOI 10.4230/LIPICS.OPODIS.2017.32]
   Lu TX, 2011, LECT NOTES COMPUT SC, V6722, P244, DOI 10.1007/978-3-642-21461-5_16
   Luu L, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P17, DOI 10.1145/2976749.2978389
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Maric O, 2017, LECT NOTES COMPUT SC, V10427, P217, DOI 10.1007/978-3-319-63390-9_12
   Mery D., 2011, P 2 S INF COMM TECHN, P179, DOI DOI 10.1145/2069216.2069252
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Newcombe C, 2015, COMMUN ACM, V58, P66, DOI 10.1145/2699417
   Ongaro Diego, 2014, 2014 USENIX ANN TECH, DOI DOI 10.5555/2643634.2643666
   OWRE S, 1995, IEEE T SOFTWARE ENG, V21, P107, DOI 10.1109/32.345827
   Padon O, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3140568
   Padon O, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158114
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   PANANGADEN P, 1992, DISTRIB COMPUT, V6, P73, DOI 10.1007/BF02252679
   Rahli Vincent, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P619, DOI 10.1007/978-3-319-89884-1_22
   Rahli V., 2015, ECEASST, V72, P1, DOI DOI 10.14279/TUJ.ECEASST.72.1013
   Rahli Vincent, 2017, EVENTML SPECIFICATIO
   Rahli Vincent, 2012, 20 IEEE INT C NETW P, P1
   Santos Veronese Giuliana, 2010, Proceedings 2010 IEEE 12th International Symposium on High-Assurance Systems Engineering (HASE), P10, DOI 10.1109/HASE.2010.19
   Schiper N, 2014, I C DEPEND SYS NETWO, P395, DOI 10.1109/DSN.2014.45
   Schiper Nicolas, 2012, 8 WORKSH HOT TOP SYS
   Schmid U, 2002, INT CON DISTR COMP S, P608, DOI 10.1109/ICDCS.2002.1022311
   Sergey Ilya, 2018, POPL 2018, V2
   Sousa J, 2018, I C DEPEND SYS NETWO, P51, DOI 10.1109/DSN.2018.00018
   Taube Marcelo, 2018, PLDI 18, DOI [10.1145/3192366.3192414, DOI 10.1145/3192366.3192414]
   Tauber Joshua A., 2004, THESIS MIT CAMBRIDGE
   Tsai CC, 2017, 2017 USENIX ANNUAL TECHNICAL CONFERENCE (USENIX ATC '17), P645
   Tsuchiya T, 2008, LECT NOTES COMPUT SC, V5218, P466, DOI 10.1007/978-3-540-87779-0_32
   Tsuchiya T, 2007, SYM REL DIST SYST, P137, DOI 10.1109/SRDS.2007.20
   Veríssimo P, 2002, IEEE T COMPUT, V51, P916, DOI 10.1109/TC.2002.1024739
   Veríssimo P, 2000, DSN 2000: INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS, PROCEEDINGS, P533, DOI 10.1109/ICDSN.2000.857587
   Verissimo P. E., 2006, SIGACT News, V37, P66, DOI 10.1145/1122480.1122497
   Veronese G. S., 2010, THESIS U LISBOA
   Veronese GS, 2013, IEEE T COMPUT, V62, P16, DOI 10.1109/TC.2011.221
   Vukotic Ivana, 2019, ASPHALION TRUSTWORTH
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Woos D, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P154, DOI 10.1145/2854065.2854081
NR 113
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 138
DI 10.1145/3360564
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500023
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Eremondi, J
   Tanter, É
   Garcia, R
AF Eremondi, Joseph
   Tanter, Eric
   Garcia, Ronald
TI Approximate Normalization for Gradual Dependent Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Gradual types; dependent types; normalization
AB Dependent types help programmers write highly reliable code. However, this reliability comes at a cost: it can be challenging to write new prototypes in (or migrate old code to) dependently-typed programming languages. Gradual typing makes static type disciplines more flexible, so an appropriate notion of gradual dependent types could fruitfully lower this cost. However, dependent types raise unique challenges for gradual typing. Dependent typechecking involves the execution of program code, but gradually-typed code can signal runtime type errors or diverge. These runtime errors threaten the soundness guarantees that make dependent types so attractive, while divergence spoils the type-driven programming experience.
   This paper presents GDTL, a gradual dependently-typed language that emphasizes pragmatic dependently-typed programming. GDTL fully embeds both an untyped and dependently-typed language, and allows for smooth transitions between the two. In addition to gradual types we introduce gradual terms, which allow the user to be imprecise in type indices and to omit proof terms; runtime checks ensure type safety. To account for nontermination and failure, we distinguish between compile-time normalization and run-time execution: compile-time normalization is approximate but total, while runtime execution is exact, but may fail or diverge. We prove that GDTL has decidable typechecking and satisfies all the expected properties of gradual languages. In particular, GDTL satisfies the static and dynamic gradual guarantees: reducing type precision preserves typedness, and altering type precision does not change program behavior outside of dynamic type failures. To prove these properties, we were led to establish a novel normalization gradual guarantee that captures the monotonicity of approximate normalization with respect to imprecision.
C1 [Eremondi, Joseph; Garcia, Ronald] Univ British Columbia, Dept Comp Sci, Vancouver, BC, Canada.
   [Tanter, Eric] Univ Chile, Comp Sci Dept DCC, Santiago, Chile.
   [Tanter, Eric] INRIA, Paris, France.
C3 University of British Columbia; Universidad de Chile; Inria
RP Eremondi, J (corresponding author), Univ British Columbia, Dept Comp Sci, Vancouver, BC, Canada.
EM jeremond@cs.ubc.ca; etanter@dcc.uchile.cl; rxg@cs.ubc.ca
OI Eremondi, Joseph/0000-0002-9631-4826
FU CONICYT FONDECYT Regular Project [1190058]; ERC [715753]; NSERC
   Discovery grant; NSERC Canada Graduate Scholarship; European Research
   Council (ERC) [715753] Funding Source: European Research Council (ERC)
FX This work is partially funded by CONICYT FONDECYT Regular Project
   1190058, ERC Starting Grant SECOMP (715753), an NSERC Discovery grant,
   and the NSERC Canada Graduate Scholarship.
CR Bertot Y., 2004, TEXT THEORET COMP S
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Brady Edwin, 2003, TYPES PROOFS PROGRAM, V3085, DOI [10.1007/978-3-540-24849, DOI 10.1007/978-3-540-24849]
   Casinghino C, 2014, ACM SIGPLAN NOTICES, V49, P33, DOI 10.1145/2535838.2535883
   Cervesato I, 2003, J LOGIC COMPUT, V13, P639, DOI 10.1093/logcom/13.5.639
   CHEN C, 2005, P 10 ACM SIGPLAN INT, P66
   Chlipala Adam., 2017, Certified Programming with Dependent Types
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Coquand T, 1986, RR0531 INRIA
   Dagand PÉ, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000011
   Dagand PE, 2016, ACM SIGPLAN NOTICES, V51, P298, DOI 10.1145/3022670.2951933
   Dershowitz N., 1979, Automata, Languages and Programming, P188
   Eades Harley, 2010, INT WORKSH PROOF SEA, V10
   Eisenberg Richard, 2016, Ph. D. Dissertation
   Eremondi Joseph, 2019, GITHUB REPOSITORY GD
   Eremondi Joseph, 2019, ARXIV190606469
   Fennell L, 2013, P IEEE CSFW, P224, DOI 10.1109/CSF.2013.22
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Girard J.-Y., 1972, PhD thesis
   Greenman Ben, 2018, P ACM PROGR LANG, V2, DOI DOI 10.1145/3236766
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   Harper R, 2007, J FUNCT PROGRAM, V17, P613, DOI 10.1017/S0956796807006430
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Igarashi A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110282
   Jia LM, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P27
   Lehmann N, 2017, ACM SIGPLAN NOTICES, V52, P775, DOI 10.1145/3093333.3009856
   Löh A, 2010, FUND INFORM, V102, P177, DOI 10.3233/FI-2010-304
   Mangin C, 2015, ELECTRON P THEOR COM, P71, DOI 10.4204/EPTCS.185.5
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Nguyen PC, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P845, DOI 10.1145/3314221.3314643
   Norell Ulf, 2009, P 4 INT WORKSHOP TYP, P1, DOI DOI 10.1145/1481861.1481862
   Omar C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290327
   Osera Peter-Michael., PLPV 12 P 6 WORKSHOP, DOI [DOI 10.1145/2103776.2103779, 10.1145/2103776.2103779.]
   Ou XM, 2004, INT FED INFO PROC, V155, P437
   Pfenning Frank, 2008, Reasoning in Simple Type Theory: Festschrift in Honor of Peter B. Andrews on His 70th Birthday
   Pientka Brigitte, 2008, P ACM SIGPLAN S PRIN, P163, DOI [10.1145/1389449.1389469, DOI 10.1145/1389449.1389469]
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Schwerter FB, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000162
   Sergey I, 2012, LECT NOTES COMPUT SC, V7211, P579, DOI 10.1007/978-3-642-28869-2_29
   Sheard T, 2008, LECT NOTES COMPUT SC, V5161, P158, DOI 10.1007/978-3-540-88059-2_5
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Sjoeberg V, 2012, ELECTRON PROC THEOR, P112, DOI 10.4204/EPTCS.76.9
   Stump Aaron, 2017, J FUNCT PROGRAM, V27, P14
   Tanter É, 2016, ACM SIGPLAN NOTICES, V51, P26, DOI [10.1145/2816707.2816710, 10.1145/2936313.2816710]
   Toro M, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3229061
   Toro Matias, ARXIVCSPL180704596
   Vitousek MM, 2017, ACM SIGPLAN NOTICES, V52, P762, DOI 10.1145/3093333.3009849
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Watkins K., 2003, CMUCS02101
NR 51
TC 8
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 88
DI 10.1145/3341692
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900011
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Weirich, S
   Choudhury, P
   Voizard, A
   Eisenberg, RA
AF Weirich, Stephanie
   Choudhury, Pritam
   Voizard, Antoine
   Eisenberg, Richard A.
TI A Role for Dependent Types in Haskell
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Haskell; Dependent Types
ID IMPLICIT CALCULUS; CONSTRUCTIONS
AB Modern Haskell supports zero-cost coercions, a mechanism where types that share the same run-time representation may be freely converted between. To make sure such conversions are safe and desirable, this feature relies on a mechanism of roles to prohibit invalid coercions. In this work, we show how to incorporate roles into dependent types systems and prove, using the Coq proof assistant, that the resulting system is sound. We have designed this work as a foundation for the addition of dependent types to the Glasgow Haskell Compiler, but we also expect that it will be of use to designers of other dependently-typed languages who might want to adopt Haskell's safe coercions feature.
C1 [Weirich, Stephanie; Choudhury, Pritam; Voizard, Antoine] Univ Penn, Comp & Informat Sci, 3330 Walnut St, Philadelphia, PA 19104 USA.
   [Eisenberg, Richard A.] Bryn Mawr Coll, Comp Sci, 101 N Merion Ave, Bryn Mawr, PA 19010 USA.
C3 University of Pennsylvania; Bryn Mawr College
RP Weirich, S (corresponding author), Univ Penn, Comp & Informat Sci, 3330 Walnut St, Philadelphia, PA 19104 USA.
EM sweirich@cis.upenn.edu; pritam@seas.upenn.edu; voizard@seas.upenn.edu;
   rae@cs.brynmawr.edu
OI Eisenberg, Richard/0000-0002-7669-9781
FU National Science Foundation [1319880, 1521539, 1704041]; Division of
   Computing and Communication Foundations; Direct For Computer & Info Scie
   & Enginr [1319880] Funding Source: National Science Foundation; Division
   of Computing and Communication Foundations; Direct For Computer & Info
   Scie & Enginr [1521539, 1704041] Funding Source: National Science
   Foundation
FX This material is based upon work supported by the National Science
   Foundation under Grant No. 1319880, Grant No. 1521539, and Grant No.
   1704041. Any opinions, findings, and conclusions or recommendations
   expressed in this material are those of the author and do not
   necessarily reflect the views of the National Science Foundation.
CR Abel A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110277
   Abel A, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:29)2012
   Altenkirch Thorsten, 2016, Schloss Dagstuhl-LeibnizZentrum fur Informatik, V62, DOI [10.4230/LIPIcs.CSL.2016.21, DOI 10.4230/LIPICS.CSL.2016.21]
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   Aydemir B.E., 2010, TECHNICAL REPORT
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   Barendregt H., 1991, Journal of Functional Programming, V1, P125
   Barras B, 2008, LECT NOTES COMPUT SC, V4962, P365, DOI 10.1007/978-3-540-78499-9_26
   Bernardy JP, 2013, ACM SIGPLAN NOTICES, V48, P61, DOI 10.1145/2544174.2500577
   Blöndal B, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P55, DOI 10.1145/3242744.3242746
   Bottu GJ, 2017, ACM SIGPLAN NOTICES, V52, P148, DOI 10.1145/3156695.3122967
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Breitner J, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000150
   Capriotti P., 2016, Phd thesis
   Cardelli Luca., 1986, Technical Report 10
   Chakravarty M.M. T., 2005, P 10 ACM SIGPLAN INT, P241, DOI [DOI 10.1145/1086365.1086397, DOI 10.1145/1090189.1086397]
   Cohen, 2018, 21 INT C TYP PROOFS, V69
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P233, DOI 10.1145/317765.317906
   Devriese D, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Diehl Larry, 2018, P ACM PROGR LANG, p104:1, DOI [10.1145/3236799, DOI 10.1145/3236799]
   Eisenberg, 2015, MSCIS1510 U PENNS
   Eisenberg, 2018, HASK IMPL WORKSH
   EISENBERG RA, 2014, PRINCIPLES PROGRAMMI
   Eisenberg Richard, 2016, Ph. D. Dissertation
   Eisenberg Richard A., 2019, ROLE DEPENDENT TYPES
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   Harper R., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P130, DOI 10.1145/199448.199475
   Martin-Lof P., 1971, A Theory of Types
   Miquel A, 2001, LECT NOTES COMPUT SC, V2044, P344
   Mishra-Linger N, 2008, LECT NOTES COMPUT SC, V4962, P350, DOI 10.1007/978-3-540-78499-9_25
   Nuyts A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110276
   Nuyts A, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P779, DOI 10.1145/3209108.3209119
   Oury N, 2008, ACM SIGPLAN NOTICES, V43, P39, DOI 10.1145/1411203.1411213
   Pfenning F, 2001, IEEE S LOG, P221, DOI 10.1109/LICS.2001.932499
   Sewell P, 2010, J FUNCT PROGRAM, V20, P71, DOI 10.1017/S0956796809990293
   Sozeau M, 2008, LECT NOTES COMPUT SC, V5170, P278, DOI 10.1007/978-3-540-71067-7_23
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Voevodsky V., 2013, A simple type system with two identity types
   Washburn Geoffrey, 2006, INT C FUNCT PROGR IC
   Weirich, 2014, ICFP 2014
   Weirich S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110275
   Weirich S, 2013, ACM SIGPLAN NOTICES, V48, P275, DOI [10.1145/2544174.2500599, 10.1145/2500365.2500599]
   Weirich S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P227, DOI 10.1145/1926385.1926411
   Weirich Stephanie, 2017, POPL 2017
   Winant T, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P81, DOI 10.1145/3242744.3242752
   Xi HW, 2003, ACM SIGPLAN NOTICES, V38, P224, DOI 10.1145/640128.604150
NR 46
TC 6
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 101
DI 10.1145/3341705
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900024
OA gold
DA 2024-07-18
ER

PT J
AU Scalas, A
   Yoshida, N
AF Scalas, Alceste
   Yoshida, Nobuko
TI Less Is More: Multiparty Session Types Revisited
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE session types; duality; deadlock-freedom; liveness
AB Multiparty Session Types (MPST) are a typing discipline ensuring that a message-passing process implements a given multiparty session protocol, without errors. In this paper, we propose a new, generalised MPST theory.
   Our contribution is fourfold. (1) We demonstrate that a revision of the theoretical foundations of MPST is necessary: classic MPST have a limited subject reduction property, with inherent restrictions that are easily overlooked, and in previous work have led to flawed type safety proofs; our new theory removes such restrictions and fixes such flaws. (2) We contribute a new MPST theory that is less complicated, and yet more general, than the classic one: it does not require global multiparty session types nor binary session type duality - instead, it is grounded on general behavioural type-level properties, and proves type safety of many more protocols and processes. (3) We produce a detailed analysis of type-level properties, showing how, in our new theory, they allow to ensure decidability of type checking, and statically guarantee that processes enjoy, e.g., deadlock-freedom and liveness at run-time. (4) We show how our new theory can integrate type and model checking: type-level properties can be expressed in modal p-calculus, and verified with well-established tools.
C1 [Scalas, Alceste; Yoshida, Nobuko] Imperial Coll London, London, England.
C3 Imperial College London
RP Scalas, A (corresponding author), Imperial Coll London, London, England.
EM alceste.scalas@imperial.ac.uk; n.yoshida@imperial.ac.uk
RI Yoshida, Nobuko/AAL-6082-2020
OI Yoshida, Nobuko/0000-0002-3925-8557; Scalas, Alceste/0000-0002-1153-6164
FU EPSRC [EP/K034413/1, EP/K011715/1, EP/L00058X/1, EP/N027833/1,
   EP/N028201/1]; EU COST Action (lEUTypesz) [CA15123]; EPSRC
   [EP/K011715/1, EP/N027833/1, EP/K034413/1] Funding Source: UKRI
FX We thank the anonymous reviewers for their helpful remarks. Thanks to
   Francisco Ferreira, SungShik Jongmans, and Julien Lange for their
   comments, and to Simon Castellan for testing the companion artifact.
   This work was partially supported by EPSRC (projects EP/K034413/1,
   EP/K011715/1, EP/L00058X/1, EP/N027833/1, EP/N028201/1), and by the EU
   COST Action CA15123 (lEUTypesz).
CR Ancona Davide, 2017, FDN TRENDS PROGRAMMI, V3
   [Anonymous], 2015, LIPIcs, DOI DOI 10.4230/LIPICS.CONCUR.2015.283
   [Anonymous], 2017, Acta Informatica, DOI DOI 10.1007/S00236-016-0285-Y
   Bartoletti M, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(4:7)2016
   Basu S, 2016, THEOR COMPUT SCI, V656, P60, DOI 10.1016/j.tcs.2016.09.023
   Basu Samik, 2012, VMCAI
   Basu Samik, 2011, WWW
   Bernardi G, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(2:10)2016
   Bettini Lorenzo, CONCUR, DOI [10.1007/978-3-540-85361-9_, DOI 10.1007/978-3-540-85361-9]
   BRAND D, 1983, J ACM, V30, P323, DOI 10.1145/322374.322380
   Busi N, 2009, MATH STRUCT COMP SCI, V19, P1191, DOI 10.1017/S096012950999017X
   Caires L, 2016, LECT NOTES COMPUT SC, V9688, P74, DOI 10.1007/978-3-319-39570-8_6
   Caires Luis, 2016, MSCS, V26, P3
   Carbone Marco, 2016, LIPIcs, V59
   Chen TC, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(2:12)2017
   Chen TC, 2015, J LOG ALGEBR METHODS, V84, P708, DOI 10.1016/j.jlamp.2015.06.003
   Coppo M, 2016, MATH STRUCT COMP SCI, V26, P238, DOI 10.1017/S0960129514000188
   Coppo M, 2015, LECT NOTES COMPUT SC, V9104, P146, DOI 10.1007/978-3-319-18941-3_4
   Deniélou PM, 2013, LECT NOTES COMPUT SC, V7966, P174, DOI 10.1007/978-3-642-39212-2_18
   Deniélou PM, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:6)2012
   Deniélou PM, 2012, LECT NOTES COMPUT SC, V7211, P194, DOI 10.1007/978-3-642-28869-2_10
   Dezani-Ciancaglini M, 2016, ELECTRON P THEOR COM, P29, DOI 10.4204/EPTCS.203.3
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay S, 2017, RIV PUBL SER AUTOMAT, pXV
   Gay SJ, 2014, ELECTRON P THEOR COM, P94, DOI 10.4204/EPTCS.160.9
   Gay Simon J., 2016, Lecture Notes in Computer Science, V9600, P95, DOI [DOI 10.1007/978-3-319-30936-1, 10.1007/978-3-319-30936-1_5, DOI 10.1007/978-3-319-30936-1_5]
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Goto M, 2016, MATH STRUCT COMP SCI, V26, P465, DOI 10.1017/S0960129514000231
   Groote JF, 2014, MODELING AND ANALYSIS OF COMMUNICATING SYSTEMS, P1
   He Chaodong, 2011, CONCUR, DOI [10.1007/978-3-642-23217-6_25, DOI 10.1007/978-3-642-23217-6_25]
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   Igarashi A, 2004, THEOR COMPUT SCI, V311, P121, DOI 10.1016/S0304-3975(03)00325-6
   Indyk P., 2017, PROCS ICALP LIPICS, V80, P1
   Kobayashi N, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1745312.1745313
   Lange J, 2015, ACM SIGPLAN NOTICES, V50, P221, DOI [10.1145/2775051.2676964, 10.1145/2676726.2676964]
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P434, DOI 10.1145/3022670.2951921
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   OAuth Working Group, 2012, 6749 RFC
   PADOVANI L, 2014, CSL LICS, DOI DOI 10.1145/2603088.2603116
   Padovani L, 2016, MATH STRUCT COMP SCI, V26, P424, DOI 10.1017/S096012951400022X
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Scalas A., 2017, DARTS, V3, DOI DOI 10.4230/DARTS.3.2.3
   Scalas A., 2017, 31stEuropeanConferenceonObject-OrientedProgramming, ECOOP 2017, June 19-23, 2017, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.24, 10.4230/LIPICS.ECOOP.2017.24, 10.4230/LIPIcs.ECOOP.2017.24]
   Scalas A, 2018, J LOG ALGEBR METHODS, V97, P55, DOI 10.1016/j.jlamp.2018.01.001
   Scalas Alceste, 2018, 6 IMP COLL LOND
   Toninho B, 2017, J LOG ALGEBR METHODS, V90, P61, DOI 10.1016/j.jlamp.2016.11.005
   Toninho Bernardo, 2016, LIST SUCCESSES CAN C, V9600, DOI [10.1007/978-3-319-30936-1_23, DOI 10.1007/978-3-319-30936-1_23]
   Wadler P, 2014, J FUNCT PROGRAM, V24, P384, DOI 10.1017/S095679681400001X
   Yoshida Nobuko, 2010, FOSSACS, DOI DOI 10.1007/978-3-642-12032-9_10
NR 52
TC 43
Z9 44
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 30
DI 10.1145/3290343
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300030
OA Green Accepted, gold
DA 2024-07-18
ER

PT J
AU Conrado, GK
   Goharshady, AK
   Kochekov, K
   Tsai, YC
   Zaher, AK
AF Conrado, Giovanna Kobus
   Goharshady, Amir Kafshdar
   Kochekov, Kerim
   Tsai, Yun Chen
   Zaher, Ahmed Khaled
TI Exploiting the Sparseness of Control-Flow and Call Graphs for Efficient
   and On-Demand Algebraic Program Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Algebaric Program Analysis; Parameterized Algorithms; Graph Sparsity;
   Treewidth; Treedepth; Data-flow Analysis
ID TREE-WIDTH; ALGORITHMS; TREEWIDTH
AB Algebraic Program Analysis (APA) is a ubiquitous framework that has been employed as a unifying model for various problems in data-flow analysis, termination analysis, invariant generation, predicate abstraction and a wide variety of other standard static analysis tasks. APA models program summaries as elements of a regular algebra (A, circle plus, circle times, circle star, (o) over bar, (1) over bar). Suppose that a summary in A is assigned to every transition of the program and that we aim to compute the effect of running the program starting at line s and ending at line t. APA first computes a regular expression rho capturing all program paths of interest. In case of intraprocedural analysis, rho models all paths from s to t, whereas in the interprocedural case it models all interprocedurally-valid paths, i.e. paths that go back to the right caller function when a callee returns. This regular expression rho is then interpreted over the algebra (A, circle plus, circle times, circle star, (o) over bar, (1) over bar) to obtain the desired result. Suppose the program has n lines of code and each evaluation of an operation in the regular algebra takes O(k) time. It is well-known that a single APA query, or a set of queries with the same starting point B, can be answered in O (n . alpha(n) . k), where alpha is the inverse Ackermann function.
   In this work, we consider an on-demand setting for APA: the program is given in the input and can be preprocessed. The analysis has to then answer a large number of on-line queries, each providing a pair (s, t) of program lines which are the start and end point of the query, respectively. The goal is to avoid the significant cost of running a fresh APA instance for each query. Our main contribution is a series of algorithms that, after a lightweight preprocessing of O(n . lg n . k), answer each query in O(k) time. In other words, our preprocessing has almost the same asymptotic complexity as a single APA query, except for a sub-logarithmic factor, and then every future query is answered instantly, i.e. by a constant number of operations in the algebra. We achieve this remarkable speedup by relying on certain structural sparsity properties of control-flow and call graphs (CFGs and CGs). Specifically, we exploit the fact that control-flow graphs of real-world programs have a tree-like structure and bounded treewidth and nesting depth and that their call graphs have small treedepth in comparison to the size of the program. Finally, we provide experimental results demonstrating the effectiveness and efficiency of our approach and showing that it beats the runtime of classical APA by several orders of magnitude.
C1 [Conrado, Giovanna Kobus; Goharshady, Amir Kafshdar; Kochekov, Kerim; Tsai, Yun Chen; Zaher, Ahmed Khaled] Hong Kong Univ Sci & Technol, Dept Comp Sci & Engn, Dept Math, Clear Water Bay, Hong Kong, Peoples R China.
C3 Hong Kong University of Science & Technology
RP Conrado, GK (corresponding author), Hong Kong Univ Sci & Technol, Dept Comp Sci & Engn, Dept Math, Clear Water Bay, Hong Kong, Peoples R China.
EM gkc@connect.ust.hk; goharshady@cse.ust.hk; kkochekov@connect.ust.hk;
   yctsai@connect.ust.hk; akazaher@connect.hk
OI Kobus Conrado, Giovanna/0000-0001-9474-6505
FU Hong Kong Research Grants Council ECS Project [26208122]; Hong Kong PhD
   Fellowship Scheme (HKPFS)
FX A longer version of this article is available at [Conrado et al. 2023c].
   The research was partially supported by the Hong Kong Research Grants
   Council ECS Project Number 26208122. G.K. Conrado, K. Kochekov and A.K.
   Zaher were supported by the Hong Kong PhD Fellowship Scheme (HKPFS).
   Authors are ordered alphabetically.
CR Ahmadi A, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P857, DOI 10.1145/3519939.3523436
   Ahmadi Ali, 2022, FSTTCS, V250
   Aiswarya C., 2022, ACM SIGLOG News, V9, P6, DOI 10.1145/3527540.3527542
   [Anonymous], 1987, Optimal preprocessing for answering on-line product queries
   Asadi A, 2020, LECT NOTES COMPUT SC, V12302, P253, DOI 10.1007/978-3-030-59152-6_14
   BABICH WA, 1978, ACTA INFORM, V10, P265, DOI 10.1007/BF00264320
   BACKHOUSE RC, 1975, J I MATH APPL, V15, P161
   Ball T, 2000, LECT NOTES COMPUT SC, V1885, P113
   Ball T, 2010, LECT NOTES COMPUT SC, V6174, P119, DOI 10.1007/978-3-642-14295-6_11
   Bender MA, 2005, J ALGORITHMS, V57, P75, DOI 10.1016/j.jalgor.2005.08.001
   Berg Mark, 2000, Computational Geometry, P211
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bodden Eric, 2012, P ACM SIGPLAN INT WO, P3, DOI DOI 10.1145/2259051.2259052
   Bodlaender HL, 1998, SIAM J COMPUT, V27, P1725, DOI 10.1137/S0097539795289859
   BODLAENDER HL, 1988, LECT NOTES COMPUT SC, V317, P105
   Bodlaender HL, 1996, SIAM J COMPUT, V25, P1305, DOI 10.1137/S0097539793251219
   BORIE RB, 1992, ALGORITHMICA, V7, P555, DOI 10.1007/BF01758777
   Breck Jason, 2020, Enhancing Algebraic Program Analysis
   Carpanese Igor, 2018, A Visual Introduction to Centroid Decomposition
   Chatterjee K, 2021, FORM METHOD SYST DES, V57, P401, DOI 10.1007/s10703-021-00373-5
   Chatterjee K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290366
   Chatterjee K, 2020, LECT NOTES COMPUT SC, V12075, P112, DOI 10.1007/978-3-030-44914-8_5
   Chatterjee K, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3363525
   Chatterjee K, 2019, SAC '19: PROCEEDINGS OF THE 34TH ACM/SIGAPP SYMPOSIUM ON APPLIED COMPUTING, P400, DOI 10.1145/3297280.3297322
   Chatterjee K, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3210257
   Chatterjee K, 2017, LECT NOTES COMPUT SC, V10482, P59, DOI 10.1007/978-3-319-68167-2_4
   Chatterjee K, 2016, ACM SIGPLAN NOTICES, V51, P733, DOI 10.1145/2914770.2837624
   Conrado Giovanna Kobus, 2023, Zenodo, DOI [10.5281/zenodo.8320671, DOI 10.5281/ZENODO.8320671]
   Conrado Giovanna Kobus, 2023, OOPSLA, V232, P1
   Conrado Giovanna Kobus, 2023, Exploiting the Sparseness of Control-flow and Call Graphs for Efficient and On-demand Algebraic Program Analysis
   COURCELLE B, 1990, INFORM COMPUT, V85, P12, DOI 10.1016/0890-5401(90)90043-H
   Cousot P., 1977, IFIP Conf. on Formal Description of Programming Concepts, St-Andrews, P237
   Cygan Marek, 2015, Parameterized Algorithms
   Dalmau V., 2002, Principles and Practice of Constraint Programming - CP 2002. 8th International Conference, CP 2002. Proceedings (Lecture Notes in Computer Science Vol.2470), P310
   Dell Holger, 2017, IPEC, V89
   Della Giustina Davide, 2019, String Processing and Information Retrieval. 26th International Symposium, SPIRE 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11811), P274, DOI 10.1007/978-3-030-32686-9_20
   Duesterwald E., 1995, Proceedings of the 22Nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. POPL'95, P37, DOI DOI 10.1145/199448.199461
   Elberfeld M, 2010, ANN IEEE SYMP FOUND, P143, DOI 10.1109/FOCS.2010.21
   Esparza J, 2010, J ACM, V57, DOI 10.1145/1857914.1857917
   Ferrara A, 2005, LECT NOTES ARTIF INT, V3835, P489, DOI 10.1007/11591191_34
   Fomin FV, 2018, ACM T ALGORITHMS, V14, DOI 10.1145/3186898
   Gabow H.N., 1983, P 15 ANN ACM S THEOR, P246, DOI [DOI 10.1145/800061.808753, 10.1145/800061.808753]
   Goharshady AK, 2023, LECT NOTES COMPUT SC, V13881, P177, DOI 10.1007/978-3-031-24950-1_9
   Goharshady AK, 2020, RELIAB ENG SYST SAFE, V193, DOI 10.1016/j.ress.2019.106665
   Gustedt J, 2002, LECT NOTES COMPUT SC, V2409, P86
   Horwitz S., 1995, SIGSOFT Software Engineering Notes, V20, P104, DOI 10.1145/222132.222146
   Jordan C., 1869, J. Reine Angew. Math., V70, P185, DOI DOI 10.1515/CRLL.1869.70.185
   Kernozhitsky Alexander, 2022, Sqrt Tree
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   Kincaid Z, 2021, LECT NOTES COMPUT SC, V12759, P46, DOI 10.1007/978-3-030-81685-8_3
   Kincaid Z, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158142
   Kincaid Z, 2017, ACM SIGPLAN NOTICES, V52, P248, DOI [10.1145/3062341.3062373, 10.1145/3140587.3062373]
   Kleene S., 1956, AUTOMATA STUDIES, P3
   Kneis J, 2009, ELECTRON NOTES THEOR, V251, P65, DOI 10.1016/j.entcs.2009.08.028
   Kowalik Lukasz, 2020, IPEC, V180
   KOZEN D, 1990, LECT NOTES COMPUT SC, V452, P26
   Kroening D, 2008, LECT NOTES COMPUT SC, V5311, P111, DOI 10.1007/978-3-540-88387-6_10
   Lind-Nielsen J., 1999, Buddy: a binary decision diagram package
   Meybodi MA, 2022, 2022 IEEE INTERNATIONAL CONFERENCE ON BLOCKCHAIN (BLOCKCHAIN 2022), P266, DOI 10.1109/Blockchain55522.2022.00044
   Nesetril J, 2006, EUR J COMBIN, V27, P1022, DOI 10.1016/j.ejc.2005.01.010
   Niedermeier R, 2004, LECT NOTES COMPUT SC, V3153, P84
   Obdrzálek J, 2003, LECT NOTES COMPUT SC, V2725, P80
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/3024084
   Reps Thomas W., 1993, ILPS, P163
   ROBERTSON N, 1986, J ALGORITHM, V7, P309, DOI 10.1016/0196-6774(86)90023-4
   Sagiv M, 1996, THEOR COMPUT SCI, V167, P131, DOI 10.1016/0304-3975(96)00072-2
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   TARJAN RE, 1981, J ACM, V28, P577, DOI 10.1145/322261.322272
   TARJAN RE, 1981, J ACM, V28, P594, DOI 10.1145/322261.322273
   Thorup M, 1998, INFORM COMPUT, V142, P159, DOI 10.1006/inco.1997.2697
   Vallee-Rai R., 1999, Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'99, page, P13
   Yan Dacong, 2011, P 2011 INT S SOFTW T, P155, DOI [10.1145/2001420.2001440, DOI 10.1145/2001420.2001440]
   Zheng X, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P197, DOI 10.1145/1328438.1328464
   Zhu SW, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1296, DOI 10.1145/3453483.3454110
NR 76
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 292
DI 10.1145/3622868
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100072
OA gold
DA 2024-07-18
ER

PT J
AU Lorenzen, A
   Leijen, D
   Swierstra, W
AF Lorenzen, Anton
   Leijen, Daan
   Swierstra, Wouter
TI FP<SUP>2</SUP>: Fully in-Place Functional Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE FBIP; Tail Recursion Modulo Cons
ID USAGE
AB As functional programmers we always face a dilemma: should we write purely functional code, or sacrifice purity for efficiency and resort to in-place updates? This paper identifies precisely when we can have the best of both worlds: a wide class of purely functional programs can be executed safely using in-place updates without requiring allocation, provided their arguments are not shared elsewhere.
   We describe a linear fully in-place (FIP) calculus where we prove that we can always execute such functions in a way that requires no (de)allocation and uses constant stack space. Of course, such a calculus is only relevant if we can express interesting algorithms; we provide numerous examples of in-place functions on datastructures such as splay trees or finger trees, together with in-place versions of merge sort and quick sort.
   We also show how we can generically derive a map function over any polynomial data type that is fully in-place. Finally, we have implemented the rules of the FIP calculus in the Koka language. Using the Perceus reference counting garbage collection, this implementation dynamically executes FIP functions in-place whenever possible.
C1 [Lorenzen, Anton] Univ Edinburgh, Sch Informat, Edinburgh, Midlothian, Scotland.
   [Leijen, Daan] Microsoft Res, Redmond, WA USA.
   [Swierstra, Wouter] Univ Utrecht, Utrecht, Netherlands.
C3 University of Edinburgh; Microsoft; Utrecht University
RP Lorenzen, A (corresponding author), Univ Edinburgh, Sch Informat, Edinburgh, Midlothian, Scotland.
EM anton.lorenzen@ed.ac.uk; daan@microsoft.com; w.s.swierstra@uu.nl
OI Lorenzen, Anton/0000-0003-3538-9688
CR Aspinall D, 2002, LECT NOTES COMPUT SC, V2305, P36
   Aspinall D, 2008, J FUNCT PROGRAM, V18, P141, DOI 10.1017/S0956796807006399
   Backhouse R., 1988, An exploration of the Bird-Meertens formalism
   BAKER HG, 1994, SIGPLAN NOTICES, V29, P38, DOI 10.1145/185009.185016
   BAKER HG, 1994, SIGPLAN NOTICES, V29, P13, DOI 10.1145/181748.181750
   Barendsen E, 1995, LECT NOTES COMPUT SC, V982, P189, DOI 10.1007/BFb0026821
   Bour Frederic, 2021, arXiv, DOI [10.48550/arXiv.2102.09823.hal-03146495, DOI 10.48550/ARXIV.2102.09823.HAL-03146495]
   BRUS TH, 1987, LECT NOTES COMPUT SC, V274, P364
   Bruynooghe Maurice, 1986, Compile Time Garbage Collection
   Claessen Koen, 2020, Haskell '20. Proceedings of the 13th ACM SIGPLAN International Symposium on Haskell, P31, DOI 10.1145/3406088.3409026
   Cormen T.H., 2022, Introduction to algorithms, Vfourth
   Danvy O, 2022, FUND INFORM, V185, P115, DOI 10.3233/FI-222106
   Danvy O, 2009, LECT NOTES COMPUT SC, V5832, P66, DOI 10.1007/978-3-642-04652-0_3
   de Vries E, 2008, LECT NOTES COMPUT SC, V5083, P201, DOI 10.1007/978-3-540-85373-2_12
   Didrich K., 1994, Programming Languages and System Architectures. International Conference Proceedings, P228
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Gibbons Jeremy, 1994, An Introduction to the BirdMeertens Formalism
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Hinze R, 2006, J FUNCT PROGRAM, V16, P197, DOI 10.1017/S0956796805005769
   Hoffmann J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P357, DOI 10.1145/1926385.1926427
   Hofmann M, 2006, LECT NOTES COMPUT SC, V3924, P22
   Hofmann M, 2003, INFORM COMPUT, V183, P57, DOI 10.1016/S0890-5401(03)00009-9
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hofmann M, 2000, LECT NOTES COMPUT SC, V1782, P165
   Hofmann Martin, 2000, PREPRINT
   Hudak Paul., 1985, POPL (1985), P300, DOI DOI 10.1145/318593.318660
   Hudak Paul., 1986, LFP 86, P351, DOI 10.1145/319838.319876
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Jensen JB, 2012, LECT NOTES COMPUT SC, V7211, P377, DOI 10.1007/978-3-642-28869-2_19
   JONES SLP, 1991, LECT NOTES COMPUT SC, V523, P636
   Leijen D, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571233
   Leijen D, 2019, LECT NOTES COMPUT SC, V11893, P244, DOI 10.1007/978-3-030-34175-6_13
   Leijen Daan, 2021, The Koka Language
   Lemaitre Michel, 1986, P 1986 ACM C LISP FU, P113, DOI [10.1145/319838.319855, DOI 10.1145/319838.319855]
   Loginov A, 2006, LECT NOTES COMPUT SC, V4134, P261
   Lorenzen A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547634
   Lorenzen Anton, 2023, FP2: Fully in-Place Functional Programming Artifact, DOI [10.5281/zenodo.7988150, DOI 10.5281/ZENODO.7988150]
   Lorenzen Anton, 2023, MSR-TR-2023-19
   Madiot JM, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498672
   McBride C, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P287, DOI 10.1145/1328438.1328474
   McBride Conor, 2001, The Derivative of a Regular Type is its Type of One-Hole Contexts, P74
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Moine A, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571218
   Okasaki C., 1999, Journal of Functional Programming, V9, P471, DOI 10.1017/S0956796899003494
   Reinking A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P96, DOI 10.1145/3453483.3454032
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Reynolds John C., 1972, P ACM ANN C ACM 72 N, V2, P717, DOI [10.1145/800194.805852, DOI 10.1145/800194.805852]
   Scholz Sven-Bodo, 1994, P 6 INT WORKSH IMPL
   SCHORR H, 1967, COMMUN ACM, V10, P501, DOI 10.1145/363534.363554
   Schulte W., 1994, Programming Language Implementation and Logic Programming. 6th International Symposium, PLILP '94. Proceedings, P102
   Schulte Wolfram, 1992, Declarative Programming, Sasbachwalden 1991, P239, DOI [10.1007/978-1-4471-3794-8_16, DOI 10.1007/978-1-4471-3794-8_16]
   SLEATOR DD, 1985, J ACM, V32, P652, DOI 10.1145/3828.3835
   Sobel Jonathan, 1998, P 3 ACM S, P251, DOI [10.1145/289423.289452, DOI 10.1145/289423.289452]
   Stoye W.R., 1984, Proceedings of the 1984 ACM Symposium on LISP and Functional Programming, LFP '84, P159, DOI [10.1145/800055.802032, DOI 10.1145/800055.802032]
   Ullrich S, 2019, PROCEEDINGS OF THE 31ST SYMPOSIUM ON IMPLEMENTATION AND APPLICATION OF FUNCTIONAL LANGUAGES, IFL 2019, DOI 10.1145/3412932.3412935
   van Laarhoven Twan, 2007, Deriving Functor
   Walker D., 2001, Types in Compilation. Third International Workshop, TIC 2000. Revised Selected Papers (Lecture Notes in Computer Science Vol.2071), P177
   Yang H, 2007, THEOR COMPUT SCI, V375, P308, DOI 10.1016/j.tcs.2006.12.036
NR 59
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 198
DI 10.1145/3607840
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900011
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Zhang, TN
   Sharma, U
   Kapritsos, M
AF Zhang, Tony Nuda
   Sharma, Upamanyu
   Kapritsos, Manos
TI PERFORMAL: Formal Verification of Latency Properties for Distributed
   Systems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE distributed systems; systems verification; latency; performance
ID REAL-TIME; SAFETY
AB Understanding and debugging the performance of distributed systems is a notoriously hard task, but a critical one. Traditional techniques like logging, tracing, and benchmarking represent a best-effort way to find performance bugs, but they either require a full deployment to be effective or can only find bugs after they manifest. Even with such techniques in place, real deployments often exhibit performance bugs that cause unwanted behavior.
   In this paper, we present Performal, a novel methodology that leverages the recent advances in formal verification to provide rigorous latency guarantees for real, complex distributed systems. The task is not an easy one: it requires carefully decoupling the formal proofs from the execution environment, formally defining latency properties, and proving them on real, distributed implementations. We used Performal to prove rigorous upper bounds for the latency of three applications: a distributed lock, ZooKeeper and a MultiPaxos-based State Machine Replication system. Our experimental evaluation shows that these bounds are a good proxy for the behavior of the deployed system and can be used to identify performance bugs in real-world systems.
C1 [Zhang, Tony Nuda; Kapritsos, Manos] Univ Michigan, Ann Arbor, MI USA.
   [Sharma, Upamanyu] MIT CSAIL, Cambridge, MA USA.
C3 University of Michigan System; University of Michigan; Massachusetts
   Institute of Technology (MIT)
RP Zhang, TN (corresponding author), Univ Michigan, Ann Arbor, MI USA.
EM nudzhang@umich.edu; upamanyu@mit.edu; manosk@umich.edu
OI Kapritsos, Manos/0000-0002-4368-7418; Sharma,
   Upamanyu/0000-0002-5446-3284
FU National Science Foundation [2118512, 2045541]
FX We thank Boyu Tian for his early work on this project. We also thank our
   shepherd Zachary Tatlock and the anonymous PLDI reviewers for their
   insightful feedback. This work is partially supported by the National
   Science Foundation grants 2118512 and 2045541, and a gift from Meta.
CR Akamai, 2017, The State of Online Retail Performance
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Alur R., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P8
   ALUR R, 1993, INFORM COMPUT, V104, P2, DOI 10.1006/inco.1993.1024
   amazon, 2015, DYNAMODB
   [Anonymous], 2012, P 2012 ACM SIGMOD IN, DOI 10.1145/2213836.2213945
   [Anonymous], 2023, ART PERF FORM VER LA, DOI [10.5281/zenodo.7812534, DOI 10.5281/ZENODO.7812534]
   [Anonymous], 2012, APACHE JIRA
   [Anonymous], 2007, NSDI
   Barham P, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P259
   Benavides Z, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360582
   Bernat G., 2003, pwcet: A tool for probabilistic worst-case execution time analysis of real-time systems
   BERTHOMIEU B, 1991, IEEE T SOFTWARE ENG, V17, P259, DOI 10.1109/32.75415
   Betts Adam, 2010, 10 INT WORKSHOP WORS
   Blackham B., 2011, Proceedings of the 2011 IEEE 32nd Real-Time Systems Symposium (RTSS 2011), P339, DOI 10.1109/RTSS.2011.38
   Carbonneaux Q, 2015, ACM SIGPLAN NOTICES, V50, P467, DOI [10.1145/2813885.2737955, 10.1145/2737924.2737955]
   Cazorla FranciscoJ., 2013, WCET, P64
   Chajed T, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P307
   Chajed T, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P243, DOI 10.1145/3341301.3359632
   Charguéraud A, 2019, J AUTOM REASONING, V62, P331, DOI 10.1007/s10817-017-9431-7
   Chen HG, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P18, DOI 10.1145/2815400.2815402
   Cooper Brian F., 2010, P 1 ACM S CLOUD COMP, P143, DOI [DOI 10.1145/1807128.1807152, 10.1145/1807128.1807152]
   CRUZ RL, 1991, IEEE T INFORM THEORY, V37, P114, DOI 10.1109/18.61109
   David A, 2010, HSSC 10: PROCEEDINGS OF THE 13TH ACM INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL, P91
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   De Prisco R, 1997, LECT NOTES COMPUT SC, V1320, P111, DOI 10.1007/BFb0030679
   Denaro G., 2004, Software Engineering Notes, V29, P94, DOI 10.1145/974043.974059
   DIJKSTRA EW, 1972, COMMUN ACM, V15, P859, DOI 10.1145/355604.361591
   Einav Y., 2019, Amazon Found Every 100ms of Latency Cost Them 1% in Sales
   Erlingsson U, 2012, ACM T COMPUT SYST, V30, DOI 10.1145/2382553.2382555
   Feldman YMY, 2019, LECT NOTES COMPUT SC, V11562, P405, DOI 10.1007/978-3-030-25543-5_23
   Gueneau Armael, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P533, DOI 10.1007/978-3-319-89884-1_19
   Gunawi H. S., 2014, P ACM S CLOUD COMP S, P1
   Guo CX, 2015, SIGCOMM'15: PROCEEDINGS OF THE 2015 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION, P139, DOI 10.1145/2785956.2787496
   HADAR J, 1969, AM ECON REV, V59, P25
   Hance T, 2021, PROCEEDINGS OF THE 18TH USENIX SYMPOSIUM ON NETWORKED SYSTEM DESIGN AND IMPLEMENTATION, P115
   Hansen Jeffery P., 2009, 9 INT WORKSHOP WORST, P1
   Haslbeck MPL, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3486169
   Hawblitzel C, 2017, COMMUN ACM, V60, P83, DOI 10.1145/3068608
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   HENNESSY M, 1995, INFORM COMPUT, V117, P221, DOI 10.1006/inco.1995.1041
   Hoffmann Jan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P781, DOI 10.1007/978-3-642-31424-7_64
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6012, P287, DOI 10.1007/978-3-642-11957-6_16
   Hunt Patrick, 2010, P 2010 USENIX ANN TE, P11, DOI DOI 10.5555/1855840.1855851
   Ileri A, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P323
   Iyer R, 2022, PROCEEDINGS OF THE 19TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI '22), P567
   Iyer R, 2019, PROCEEDINGS OF THE 16TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P517
   Jang K, 2015, SIGCOMM'15: PROCEEDINGS OF THE 2015 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION, P435, DOI 10.1145/2785956.2787479
   Killian Charles., 2010, Proceedings of the 18th ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE '10, P17, DOI DOI 10.1145/1882291.1882297
   Lamport L., 2001, SIGACT News, V32, P51
   Lamport L, 1998, ACM T COMPUT SYST, V16, P133, DOI 10.1145/279227.279229
   Las-Casas P, 2018, PROCEEDINGS OF THE 2018 ACM SYMPOSIUM ON CLOUD COMPUTING (SOCC '18), P326, DOI 10.1145/3267809.3267841
   Le Boudec J.-Y., 2001, NETWORK CALCULUS THE
   Lee Edward A., 2012, P 8 INT C HARDWARE S, P2, DOI [10.1007/978-3-642-39611-3_2, DOI 10.1007/978-3-642-39611-3_2]
   Lesani M, 2016, ACM SIGPLAN NOTICES, V51, P357, DOI 10.1145/2914770.2837622
   Li X, 2007, SCI COMPUT PROGRAM, V69, P56, DOI 10.1016/j.scico.2007.01.014
   Ma HJ, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P370, DOI 10.1145/3341301.3359651
   Mace J, 2018, ACM T COMPUT SYST, V35, DOI 10.1145/3208104
   Mahgoub A, 2022, PROCEEDINGS OF THE 16TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, OSDI 2022, P303
   McCarthy Jay, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P144, DOI 10.1007/978-3-319-29604-3_10
   Muller Stefan K, 2019, COMBINING SOURCE TAR
   Nelson L, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P225, DOI 10.1145/3341301.3359641
   Nelson L, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P252, DOI 10.1145/3132747.3132748
   NICOLLIN X, 1992, LECT NOTES COMPUT SC, V600, P526, DOI 10.1007/BFb0032006
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Ramchandani Chander, 1973, PH DISSERTATION
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Saidi AG, 2009, CONF PROC INT SYMP C, P361, DOI 10.1145/1555815.1555800
   Sariowan H, 1999, IEEE ACM T NETWORK, V7, P669, DOI 10.1109/90.803382
   Sewell T, 2017, REAL-TIME SYST, V53, P812, DOI 10.1007/s11241-017-9286-3
   Sigelman Benjamin H., 2010, Dapper, a large-scale distributed systems tracing infrastructure
   Stefan M, 2007, TECHNICAL REPORT
   StefanMPetters Patryk Zadarnowski, 2007, 7 INT WORKSHOP WORST
   Stoica I, 2000, IEEE ACM T NETWORK, V8, P185, DOI 10.1109/90.842141
   Suminto Riza O., 2015, 7 USENIXWORKSHOP HOT
   Tammana P, 2018, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI'18), P453
   Vereijken J.J, 1994, FISCHERS PROTOCOL TI
   Wang Yi, 1995, Formal Description Techniques VII. Proceedings of the 7th IFIP WG 6.1 International Conference on Formal Description Techniques, P243
   Whittaker M, 2018, PROCEEDINGS OF THE 2018 ACM SYMPOSIUM ON CLOUD COMPUTING (SOCC '18), P333, DOI 10.1145/3267809.3267839
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Wu Y, 2019, PROCEEDINGS OF THE 16TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P395
   Yao JA, 2022, PROCEEDINGS OF THE 16TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, OSDI 2022, P485
   Yao JA, 2021, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '21), P405
   Zhang YW, 2022, SIGCOMM '22: PROCEEDINGS OF THE 2022 ACM SIGCOMM 2022 CONFERENCE, P1, DOI 10.1145/3544216.3544271
   Zhu T, 2017, PROCEEDINGS OF THE 2017 SYMPOSIUM ON CLOUD COMPUTING (SOCC '17), P598, DOI 10.1145/3127479.3132245
   Zhu T, 2016, PROCEEDINGS OF THE SEVENTH ACM SYMPOSIUM ON CLOUD COMPUTING (SOCC 2016), P374, DOI 10.1145/2987550.2987585
NR 87
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 121
DI 10.1145/3591235
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900017
OA gold
DA 2024-07-18
ER

PT J
AU Müller, M
   Schuster, P
   Brachthäuser, JI
   Ostermann, K
AF Mueller, Marius
   Schuster, Philipp
   Brachthaeuser, Jonathan Immanuel
   Ostermann, Klaus
TI Back to Direct Style: Typed and Tight
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE continuation-passing style; direct-style translation
AB Translating programs into continuation-passing style is a well-studied tool to explicitly deal with the control structure of programs. This is useful, for example, for compilation. In a typed setting, there also is a logical interpretation of such a translation as an embedding of classical logic into intuitionistic logic. A naturally arising question is whether there is an inverse translation back to direct style. The answer to this question depends on how the continuation-passing translation is defined and on the domain of the inverse translation. In general, translating programs from continuation-passing style back to direct style requires the use of control operators to account for the use of continuations in non-trivial ways. We present two languages, one in direct style and one in continuation-passing style. Both languages are typed and equipped with an abstract machine semantics. Moreover, both languages allow for non-trivial control flow. We further present a translation to continuation-passing style and a translation back to direct style. We show that both translations are type-preserving and also preserve semantics in a very precise way giving an operational correspondence between the two languages. Moreover, we show that the compositions of the translations are well-behaved. In particular, they are syntactic one-sided inverses on the full language and full syntactic inverses when restricted to trivial control flow.
C1 [Mueller, Marius; Schuster, Philipp; Brachthaeuser, Jonathan Immanuel; Ostermann, Klaus] Univ Tubingen, Tubingen, Germany.
C3 Eberhard Karls University of Tubingen
RP Müller, M (corresponding author), Univ Tubingen, Tubingen, Germany.
EM mari.mueller@uni-tuebingen.de; philipp.schuster@uni-tuebingen.de;
   jonathan.brachthaeuser@uni-tuebingen.de;
   klaus.ostermann@uni-tuebingen.de
OI Ostermann, Klaus/0000-0001-5294-5506; Muller,
   Marius/0000-0002-0260-6298; Schuster, Philipp/0000-0001-8011-0506;
   Brachthauser, Jonathan Immanuel/0000-0001-9128-0391
FU Deutsche Forschungsgemeinschaft (DFG -German Research Foundation)
   [DFG-448316946]
FX The work on this project was supported by the Deutsche
   Forschungsgemeinschaft (DFG -German Research Foundation) -project number
   DFG-448316946.
CR [Anonymous], 1980, To H. B. Curry: Essays on Combinatory Logic, -calculus and Formalism
   Appel Andrew W., 1991, COMPILING CONTINUATI, DOI [10.1017/CBO9780511609619, DOI 10.1017/CBO9780511609619]
   Biernacka M, 2011, PPDP 11 - PROCEEDINGS OF THE 2011 SYMPOSIUM ON PRINCIPLES AND PRACTICES OF DECLARATIVE PROGRAMMING, P149
   Biernacki Dariusz, 2021, 23 INT S PRINC PRACT, DOI DOI 10.1145/3479394.3479399
   Biernacki Dariusz, 2020, 5 INT C FORMAL STRUC, V167, DOI [10.4230/LIPIcs.FSCD.2020.18, DOI 10.4230/LIPICS.FSCD.2020.18]
   Brady Edwin, 2020, IDRIS 2 QUANTITATIVE
   Cong YY, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341643
   DANVY O, 1992, LECT NOTES COMPUT SC, V582, P130
   Danvy O, 2003, THEOR COMPUT SCI, V308, P239, DOI 10.1016/S0304-3975(02)00733-8
   Danvy O., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P299, DOI 10.1145/141471.141564
   Danvy Olivier, 1995, CMUCS95121
   Farvardin K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P75, DOI 10.1145/3385412.3385994
   FELLEISEN M, 1987, THEOR COMPUT SCI, V52, P205, DOI 10.1016/0304-3975(87)90109-5
   Flanagan Cormac, 1993, SIGPLAN Conf. Programming Language Design and Impl. (PLDI'93), P237, DOI [DOI 10.1145/155090.155113, 10.1145/155090.155113]
   GRIFFIN TG, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P47, DOI 10.1145/96709.96714
   Hatcliff J., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P458, DOI 10.1145/174675.178053
   Kameyama Y, 2003, ACM SIGPLAN NOTICES, V38, P177, DOI 10.1145/944746.944722
   Kameyama Yukiyoshi, 2007, Higher-Order and Symbolic Computation, V20, P339, DOI 10.1007/sl0990-007-9009-x
   Kennedy A, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P177
   Kiselyov O, 2007, LECT NOTES COMPUT SC, V4583, P223
   Lawall J. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P124, DOI 10.1145/158511.158613
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Materzok Marek, 2012, Lecture Notes in Computer Science, V7705, P296, DOI [10.1007/978-3-642- 35182- 2_21, DOI 10.1007/978-3-642-35182-2_21]
   Maurer L, 2017, ACM SIGPLAN NOTICES, V52, P482, DOI [10.1145/3062341.3062380, 10.1145/3140587.3062380]
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Muller Marius, 2023, Extended Technical Report
   Nielsen Lasse R., 2002, BRICS REPORT SERIES, V9, DOI [10.7146/brics.v9i2.21719, DOI 10.7146/BRICS.V9I2.21719]
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Sabry A, 1997, ACM T PROGR LANG SYS, V19, P916, DOI 10.1145/267959.269968
   Schuster P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408975
NR 32
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586056
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600031
OA gold
DA 2024-07-18
ER

PT J
AU Winter, LN
   Buse, F
   de Graaf, D
   von Gleissenthall, K
   Ozkan, BK
AF Winter, Levin N.
   Buse, Florena
   de Graaf, Daan
   von Gleissenthall, Klaus
   Ozkan, Burcu Kulahcioglu
TI Randomized Testing of Byzantine Fault Tolerant Algorithms
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Distributed consensus; Byzantine fault-tolerance; Random testing
ID CONSENSUS
AB Byzantine fault-tolerant algorithms promise agreement on a correct value, even if a subset of processes can deviate from the algorithm arbitrarily. While these algorithms provide strong guarantees in theory, in practice, protocol bugs and implementation mistakes may still cause them to go wrong. This paper introduces ByzzFuzz, a simple yet effective method for automatically finding errors in implementations of Byzantine fault-tolerant algorithms through randomized testing. ByzzFuzz detects fault-tolerance bugs by injecting randomly generated network and process faults into their executions. To navigate the space of possible process faults, ByzzFuzz introduces small-scope message mutations which mutate the contents of the protocol messages by applying small changes to the original message either in value (e.g., by incrementing the round number) or in time (e.g., by repeating a proposal value from a previous message). We find that small-scope mutations, combined with insights from the testing and fuzzing literature, are effective at uncovering protocol logic and implementation bugs in real-world fault-tolerant systems. We implemented ByzzFuzz and applied it to test the production implementations of two popular blockchain systems, Tendermint and Ripple, and an implementation of the seminal PBFT protocol. ByzzFuzz detected several bugs in the implementation of PBFT, a potential liveness violation in Tendermint, and materialized two theoretically described vulnerabilities in Ripple's XRP Ledger Consensus Algorithm. Moreover, we discovered a previously unknown fault-tolerance bug in the production implementation of Ripple, which is confirmed by the developers and fixed.
C1 [Winter, Levin N.; Buse, Florena; de Graaf, Daan; Ozkan, Burcu Kulahcioglu] Delft Univ Technol, Delft, Netherlands.
   [von Gleissenthall, Klaus] Vrije Univ Amsterdam, Amsterdam, Netherlands.
C3 Delft University of Technology; Vrije Universiteit Amsterdam
RP Winter, LN (corresponding author), Delft Univ Technol, Delft, Netherlands.
EM l.n.winter@student.tudelft.nl; i.buse@student.tudelft.nl;
   D.J.A.deGraaf@student.tudelft.nl; k.freiherrvongleissentlial@vu.nl;
   b.ozkan@tudelft.nl
OI Kulahcioglu Ozkan, Burcu/0000-0002-7038-165X; Buse,
   Ioana-Florena/0009-0008-7225-6255; Winter, Levin/0000-0002-1983-8626; de
   Graaf, Daan/0009-0000-0322-1149; v. Gleissenthall,
   Klaus/0000-0003-0826-4425
CR Abraham I, 2017, Arxiv, DOI arXiv:1712.01367
   Alvaro P, 2016, PROCEEDINGS OF THE SEVENTH ACM SYMPOSIUM ON CLOUD COMPUTING (SOCC 2016), P17, DOI 10.1145/2987550.2987555
   Alvaro P, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P331, DOI 10.1145/2723372.2723711
   Aminof B, 2018, LECT NOTES COMPUT SC, V10747, P1, DOI 10.1007/978-3-319-73721-8_1
   Amores-Sesar Ignacio, 2020, 24 INT C PRINC DISTR, V184
   Amoussou-Guenou Y, 2019, LECT NOTES COMPUT SC, V11704, P166, DOI 10.1007/978-3-030-31277-0_11
   Androulaki E, 2018, EUROSYS '18: PROCEEDINGS OF THE THIRTEENTH EUROSYS CONFERENCE, DOI 10.1145/3190508.3190538
   Anjali Singh Anjali Singh, 2008, Phytochemicals: a therapeutant for critical disease management, P189
   Apache Hadoop, 2009, FAULT INJ FRAM DEV G
   Armknecht F, 2015, LECT NOTES COMPUT SC, V9229, P163, DOI 10.1007/978-3-319-22846-4_10
   Bano Shehar, 2021, LIPICS, V217
   Baudet M., 2019, State Machine Replication in the Libra Blockchain
   BENNETT C., 2012, Chaos monkey released in the wild
   Berger C, 2021, SYM REL DIST SYST, P1, DOI 10.1109/SRDS53918.2021.00010
   Bertrand Nathalie, 2019, LIPICS, V33, P1, DOI [10.4230/LIPIcs.CONCUR.2019.33, DOI 10.4230/LIPICS.CONCUR.2019.33]
   Buchman E, 2016, THESIS U GUELPH
   Buchman E, 2022, 52ND ANNUAL IEEE/IFIP INTERNATIONAL CONFERENCE ON DEPENDABLE SYSTEMS AND NETWORKS SUPPLEMENTAL VOLUME (DSN-S 2022), P11, DOI 10.1109/DSN-S54099.2022.00014
   Buchman E, 2019, Arxiv, DOI arXiv:1807.04938
   Burckhardt S, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P167
   Cachin C, 2017, Arxiv, DOI arXiv:1707.01873
   Cachin C, 2022, LECT NOTES COMPUT SC, V13140, P192, DOI 10.1007/978-3-030-93944-1_13
   Cachin Christian, 2019, LIPICS, V7, P1, DOI 10.4230
   Cachin Christian., 2011, INTRO RELIABLE SECUR, DOI DOI 10.1007/978-3-642-15260-3
   Cao Johnny, 2020, PRACTICAL BYZANTINE
   Castro M, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE THIRD SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '99), P173, DOI 10.1145/571637.571640
   Charron-Bost B, 2009, DISTRIB COMPUT, V22, P49, DOI 10.1007/s00446-009-0084-6
   Chase B., 2018, arXiv
   Chen HC, 2020, IEEE INT CONF AUTOM, P536, DOI 10.1145/3324884.3416548
   Clement A., 2009, P 6 USENIX S NETWORK, V9, P153
   Cotroneo D, 2022, J NETW COMPUT APPL, V201, DOI 10.1016/j.jnca.2022.103334
   Damian A, 2019, LECT NOTES COMPUT SC, V11562, P344, DOI 10.1007/978-3-030-25543-5_20
   Deligiannis Pantazis, 2016, 14 USENIX C FILE STO
   Demers Alan, 1987, P 6 ANN ACM S PRINCI, P1, DOI [DOI 10.1145/41840.41841, 10.1145/41840.41841]
   Diem, 2021, DIEM COR NETW TESTS
   Dragoi C, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428278
   Dragoi C, 2014, LECT NOTES COMPUT SC, V8318, P161, DOI 10.1007/978-3-642-54013-4_10
   DWORK C, 1988, J ACM, V35, P288, DOI 10.1145/42282.42283
   ELRAD T, 1982, SCI COMPUT PROGRAM, V2, P155, DOI 10.1016/0167-6423(83)90013-8
   Emmi M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P411, DOI 10.1145/1926385.1926432
   FISCHER MJ, 1985, J ACM, V32, P374, DOI 10.1145/3149.214121
   Gilbert S., 2002, SIGACT News, V33, P51, DOI 10.1145/564585.564601
   GitHub, 2022, HOTSTUFF
   GitHub, 2020, TWINS SIM
   Godefroid P., 1996, Lecture Notes in Computer Science, V1032, DOI [DOI 10.1007/3-540-60761-7, 10.1007/3-540-60761-7_31]
   Gunawi Haryadi S., 2011, P 8 USENIX S NETWORK
   Gunawi HaryadiS., 2011, University of California, Berkeley, Berkeley, P3
   Gupta Divya, 2016, Distributed Applications and Interoperable Systems. 16th IFIP WG 6.1 International Conference, DAIS 2016, held as part of 11th International Federated Conference on Distributed Computing Techniques, DisCoTec 2016. Proceedings: LNCS 9687, P115, DOI 10.1007/978-3-319-39577-7_10
   Halalai R., 2011, Proceedings of the 2011 Eighth International Conference on Quantitative Evaluation of Systems (QEST 2011), P255, DOI 10.1109/QEST.2011.40
   Izrailevsky Yury, 2011, NETFLIX SIMIAN ARMY
   Jackson D, 1996, IEEE T SOFTWARE ENG, V22, P484, DOI 10.1145/226295.226322
   Joshi P, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P171
   Killian Charles Edwin., 2007, 4th Symposium on Networked Systems Design and Implementation (NSDI 2007), April 11-13, 2007, Cambridge, Massachusetts, USA
   Kim M, 2019, 2019 4TH IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY WORKSHOPS (EUROS&PW), P377, DOI 10.1109/EuroSPW.2019.00048
   Kingsbury K, 2020, PROC VLDB ENDOW, V14, P268, DOI 10.14778/3430915.3430918
   Kingsbury Kyle, 2022, ABOUT US
   LAMPORT L, 1982, ACM T PROGR LANG SYS, V4, P382, DOI 10.1145/357172.357176
   Lee H, 2014, INT CON DISTR COMP S, P660, DOI 10.1109/ICDCS.2014.73
   Leesatapornwongsa Tanakorn, 2014, P 11 USENIX S OPERAT, P399
   Li YS, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P529, DOI 10.1145/3460319.3464798
   Liu HP, 2018, ACM SIGPLAN NOTICES, V53, P419, DOI [10.1145/3173162.3177161, 10.1145/3296957.3177161]
   Lokhava M, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P80, DOI 10.1145/3341301.3359636
   Lu J, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P114, DOI 10.1145/3341301.3359645
   Majumdar R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158134
   Mansour T., 2013, Combinatorics of Set Partitions
   Martins Rolando, 2013, Middleware 2013. ACM/IFIP/USENIX 14th International Middleware Conference. Proceedings: LNCS 8275, P41, DOI 10.1007/978-3-642-45065-5_3
   Mauri L, 2020, ICISSP: PROCEEDINGS OF THE 6TH INTERNATIONAL CONFERENCE ON INFORMATION SYSTEMS SECURITY AND PRIVACY, P52, DOI 10.5220/0008954200520063
   Mazieres, 2016, STELLAR CONSENSUS PR
   Meiklejohn CS, 2021, PROCEEDINGS OF THE 2021 ACM SYMPOSIUM ON CLOUD COMPUTING (SOCC '21), P388, DOI 10.1145/3472883.3487005
   Momose A., 2019, IACR Cryptol. ePrint Arch, V2019, P1484
   Moses Y, 2002, SIAM J COMPUT, V31, P989, DOI 10.1137/S0097539799364006
   Musuvathi M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P446, DOI 10.1145/1250734.1250785
   Nagendra Srinidhi, 2022, ABOUT US
   Niksic Filip, 2019, Ph.D. Dissertation
   Ozkan BK, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276530
   Padhye R, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P329, DOI 10.1145/3293882.3330576
   Park S, 2020, P IEEE S SECUR PRIV, P1628, DOI 10.1109/SP40000.2020.00067
   Pham V, 2021, IEEE T SOFTWARE ENG, V47, P1980, DOI 10.1109/TSE.2019.2941681
   Pogde Prashant, 2020, APACHE OZONE FAULT I
   Rosenthal Casey, 2017, P ACM PROGRAM LANG, V7
   Schwartz D., 2014, White Paper, V5, P151
   Soares J, 2021, LECT NOTES COMPUT SC, V13041, P38, DOI 10.1007/978-3-030-92708-0_3
   STAM AJ, 1983, J COMB THEORY A, V35, P231, DOI 10.1016/0097-3165(83)90009-2
   Sun XD, 2022, PROCEEDINGS OF THE 16TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, OSDI 2022, P143
   Tendermint, 2021, TEND TEND COR BFT CO
   Dinh TTA, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1085, DOI 10.1145/3035918.3064033
   Tsuchiya T, 2011, DISTRIB COMPUT, V23, P341, DOI 10.1007/s00446-010-0123-3
   van Meerten Martijn, 2023, 45 IEEEACM INT C SOF
   Pham VT, 2020, IEEE INT CONF SOFTW, P460, DOI 10.1109/ICST46399.2020.00062
   Winter Levin N, 2023, Zenodo, DOI 10.5281/ZENODO.7510752
   XRPLF, 2021, DEC CRYPT BLOCKCH DA
   Yang Junfeng, 2009, Proceedings of the 6th USENIX Symposium on Networked Systems Design and Implementation, P213
   Zhang Q, 2020, IEEE INT CONF AUTOM, P722, DOI 10.1145/3324884.3416641
NR 92
TC 2
Z9 2
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586053
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600028
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Jacobs, J
   Balzer, S
AF Jacobs, Jules
   Balzer, Stephanie
TI Higher-Order Leak and Deadlock Free Locks
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Concurrency; Higher-Order Lock; Deadlock; Memory Leak
ID GENERIC TYPE SYSTEM; SESSION TYPES; GLOBAL PROGRESS; LOGIC
AB Reasoning about concurrent programs is challenging, especially if data is shared among threads. Program correctness can be violated by the presence of data races-whose prevention has been a topic of concern both in research and in practice. The Rust programming language is a prime example, putting the slogan fearless concurrency in practice by not only employing an ownership-based type system for memory management, but also using its type system to enforce mutual exclusion on shared data. Locking, unfortunately, not only comes at the price of deadlocks but shared access to data may also cause memory leaks. This paper develops a theory of deadlock and leak freedom for higher-order locks in a shared memory concurrent setting. Higher-order locks allow sharing not only of basic values but also of other locks and channels, and are themselves first-class citizens. The theory is based on the notion of a sharing topology, administrating who is permitted to access shared data at what point in the program. The paper first develops higher-order locks for acyclic sharing topologies, instantiated in a lambda-calculus with higher-order locks and message-passing concurrency. The paper then extends the calculus to support circular dependencies with dynamic lock orders, which we illustrate with a dynamic version of Dijkstra's dining philosophers problem. Well-typed programs in the resulting calculi are shown to be free of deadlocks and memory leaks, with proofs mechanized in the Coq proof assistant.
C1 [Jacobs, Jules] Radboud Univ Nijmegen, Nijmegen, Netherlands.
   [Balzer, Stephanie] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Radboud University Nijmegen; Carnegie Mellon University
RP Jacobs, J (corresponding author), Radboud Univ Nijmegen, Nijmegen, Netherlands.
EM mail@julesjacobs.com; balzers@cs.cmu.edu
OI Jacobs, Jules/0000-0003-1976-3182
FU AFOSR [FA9550-21-1-0385]; National Science Foundation [CCF-2211996]
FX We thank the anonymous referees for their valuable feedback and
   suggestions, and we thank Robbert Krebbers, Ike Mulder, Anton Golov,
   Jorge Perez, Bas van den Heuvel, Dan Frumin, Luis Caires, and Pedro
   Rocha for helpful discussions. Stephanie Balzer was supported in part by
   AFOSR under grant FA9550-21-1-0385 (Tristan Nguyen, program manager) and
   by the National Science Foundation under award number CCF-2211996. Any
   opinions, findings and conclusions or recommendations expressed in this
   material are those of the authors and do not necessarily reflect the
   views of the AFOSR or NSF.
CR [Anonymous], 2017, Acta Informatica, DOI DOI 10.1007/S00236-016-0285-Y
   [Anonymous], 2023, PROC ACM PROGRAM LAN, V7, DOI [10.1145/3360587, DOI 10.1145/3360587]
   Balzer S, 2019, LECT NOTES COMPUT SC, V11423, P611, DOI 10.1007/978-3-030-17184-1_22
   Balzer S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110281
   Balzer Stephanie, 2018, CONCUR, DOI DOI 10.4230/LIPICS.CONCUR.2018.30
   Bettini L, 2008, LECT NOTES COMPUT SC, V5201, P418, DOI 10.1007/978-3-540-85361-9_33
   Caires L, 2016, MATH STRUCT COMP SCI, V26, P367, DOI 10.1017/S0960129514000218
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Carbone M, 2017, ACTA INFORM, V54, P243, DOI 10.1007/s00236-016-0285-y
   Carbone M, 2010, ELECTRON P THEOR COM, P13, DOI 10.4204/EPTCS.38.4
   Carbone Marco, 2016, LIPIcs, V59
   Castro-Perez D, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P237, DOI 10.1145/3453483.3454041
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Coppo M, 2016, MATH STRUCT COMP SCI, V26, P238, DOI 10.1017/S0960129514000188
   Coppo M, 2013, LECT NOTES COMPUT SC, V7890, P45, DOI 10.1007/978-3-642-38493-6_4
   D'Osualdo E, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3477082
   Dardha O, 2018, LECT NOTES COMPUT SC, V10803, P91, DOI 10.1007/978-3-319-89366-2_5
   Dardha O, 2017, INFORM COMPUT, V256, P253, DOI 10.1016/j.ic.2017.06.002
   Dardha Ornela, 2012, PROC PPDP 2012, P139, DOI DOI 10.1145/2370776.2370794
   Ehrhard T, 2006, THEOR COMPUT SCI, V364, P166, DOI 10.1016/j.tcs.2006.08.003
   Ehrhard T, 2018, MATH STRUCT COMP SCI, V28, P995, DOI 10.1017/S0960129516000372
   Farka F, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434286
   Fowler S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290341
   Fowler Simon, 2021, CONCUR, DOI [10.4230/LIPIcs.CONCUR.2021.36, DOI 10.4230/LIPICS.CONCUR.2021.36]
   Gay SJ, 2020, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.314.3
   Giachino Elena, 2014, CONCUR 2014 - Concurrency Theory. 25th International Conference, CONCUR 2014. Proceedings: LNCS 8704, P63, DOI 10.1007/978-3-662-44584-6_6
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Hamin Jafar, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P415, DOI 10.1007/978-3-319-89884-1_15
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Igarashi A, 2004, THEOR COMPUT SCI, V311, P121, DOI 10.1016/S0304-3975(03)00325-6
   Igarashi A., 1997, Static Analysis. 4th International Symposium, SAS '97 Proceedings, P187, DOI 10.1007/BFb0032742
   Igarashi A, 2001, ACM SIGPLAN NOTICES, V36, P128, DOI 10.1145/373243.360215
   Jacobs J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498662
   Jacobs Jules, 2022, PROC ACM PROGRAM LAN
   Jacobs Jules., 2022, HIGHER ORDER LEAK DE, DOI [10.5281/zenodo.7150549Themostrecentversionisathttps://github.com/julesjacobs/cgraphs, DOI 10.5281/ZENODO.7150549THEMOSTRECENTVERSIONISATHTTPS://GITHUB.COM/JULESJACOBS/CGRAPHS]
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kobayashi N, 2005, ACTA INFORM, V42, P291, DOI 10.1007/s00236-005-0179-x
   Kobayashi N, 2003, LECT NOTES COMPUT SC, V2757, P439
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Kobayashi N, 2002, INFORM COMPUT, V177, P122, DOI 10.1006/inco.2002.3171
   Kobayashi N., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P489
   Kobayashi N, 1997, IEEE S LOG, P128, DOI 10.1109/LICS.1997.614941
   Kobayashi N, 2006, LECT NOTES COMPUT SC, V4137, P233
   Kobayashi N, 2017, INFORM COMPUT, V252, P48, DOI 10.1016/j.ic.2016.03.004
   Kokke W, 2021, LECT NOTES COMPUT SC, V12719, P100, DOI 10.1007/978-3-030-78089-0_6
   Kokke W, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290337
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Leino KRM, 2010, LECT NOTES COMPUT SC, V6012, P407, DOI 10.1007/978-3-642-11957-6_22
   Lindley S, 2017, RIV PUBL SER AUTOMAT, P265
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P434, DOI 10.1145/3022670.2951921
   Lindley S, 2015, LECT NOTES COMPUT SC, V9032, P560, DOI 10.1007/978-3-662-46669-8_23
   Matsakis Nicholas D., 2014, ADA LETT, P103, DOI DOI 10.1145/2692956.2663188
   Muller Peter., 2002, Modular specification and verification of object-oriented programs, DOI DOI 10.1007/3-540-45651-1
   Nanevski A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360587
   Padovani L, 2014, IEEE S LOG, DOI 10.1145/2603088.2603116
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Qian ZS, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473567
   Rocha P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473584
   The Coq-std++ Team, 2021, EXT STAND LIB COQ
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   Toninho Bernardo, 2015, Ph. D. Dissertation
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
NR 66
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571229
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500036
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Haas, T
   Meyer, R
   De León, HP
AF Haas, Thomas
   Meyer, Roland
   De Leon, Hernan Ponce
TI CAAT: Consistency as a Theory
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Weak memory models; program verification; bounded model checking
ID BOUNDED MODEL CHECKING; SHARED-MEMORY; WEAK MEMORY; SMT SOLVERS;
   EFFICIENT; PROGRAM; VERIFICATION; JAVASMT; ALLOY
AB We propose a family of logical theories for capturing an abstract notion of consistency and show how to build a generic and efficient theory solver that works for all members in the family. The theories can be used to model the influence of memory consistency models on the semantics of concurrent programs. They are general enough to precisely capture important examples like TSO, Power, ARMv8, RISC-V, RC11, IMM, and the Linux kernel memory model. To evaluate the expressiveness of our theories and the performance of our solver, we integrate them into a lazy SMT scheme that we use as a backend for a bounded model checking tool. An evaluation against related verification tools shows, besides flexibility, promising performance on challenging programs under complex memory models.
C1 [Haas, Thomas; Meyer, Roland] TU Braunschweig, Braunschweig, Germany.
   [De Leon, Hernan Ponce] Huawei Dresden Res Ctr, Dresden, Germany.
C3 Braunschweig University of Technology
RP Haas, T (corresponding author), TU Braunschweig, Braunschweig, Germany.
EM t.haas@tu-braunschweig.de; roland.meyer@tu-bs.de; leon@huawei.com
OI Haas, Thomas/0000-0002-3176-8552; Ponce de Leon,
   Hernan/0000-0002-4225-8830
CR Manerkar YA, 2016, Arxiv, DOI arXiv:1611.01507
   Abdulla Parosh Aziz, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P353, DOI 10.1007/978-3-662-46681-0_28
   Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Abdulla PA, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276505
   Abdulla PA, 2016, LECT NOTES COMPUT SC, V9780, P134, DOI 10.1007/978-3-319-41540-6_8
   Abiteboul S., 1995, Foundations of Databases, DOI DOI 10.5555/551350
   Adir A, 2003, IEEE T PARALL DISTR, V14, P502, DOI 10.1109/TPDS.2003.1199067
   Adve SV, 1996, COMPUTER, V29, P66, DOI 10.1109/2.546611
   Alglave Jade, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P141, DOI 10.1007/978-3-642-39799-8_9
   Alglave J, 2016, Arxiv, DOI arXiv:1608.07531
   ALglave J, 2016, Arxiv, DOI arXiv:1608.06583
   Alglave J, 2018, ACM SIGPLAN NOTICES, V53, P405, DOI [10.1145/3296957.3177156, 10.1145/3173162.3177156]
   Alglave J, 2015, ACM SIGPLAN NOTICES, V50, P577, DOI [10.1145/2775054.2694391, 10.1145/2694344.2694391]
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Alglave J, 2012, FORM METHOD SYST DES, V40, P170, DOI 10.1007/s10703-011-0135-z
   Alglave Jade, 2010, These de doctorat
   Armstrong A, 2021, LECT NOTES COMPUT SC, V12759, P303, DOI 10.1007/978-3-030-81685-8_14
   Atig MF, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P7, DOI 10.1145/1706299.1706303
   Audemard G, 2002, LECT NOTES COMPUT SC, V2529, P243
   Baier D, 2021, LECT NOTES COMPUT SC, V12760, P195, DOI 10.1007/978-3-030-81688-9_9
   Bancilhon Francois., 1986, KNOWLEDGE BASE MANAG, P165, DOI [10.1007/978-1-4612-4980-1_17, DOI 10.1007/978-1-4612-4980-1_17]
   Barrett C, 2009, FRONT ARTIF INTEL AP, V185, P825, DOI 10.3233/978-1-58603-929-5-825
   Batty M, 2016, ACM SIGPLAN NOTICES, V51, P634, DOI 10.1145/2914770.2837637
   Batty M, 2015, LECT NOTES COMPUT SC, V9032, P283, DOI 10.1007/978-3-662-46669-8_12
   Batty M, 2012, ACM SIGPLAN NOTICES, V47, P509, DOI 10.1145/2103621.2103717
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Ben Simner, 2020, LECT NOTES COMPUT SC, V12075, P626, DOI 10.1007/978-3-030-44914-8_23
   Beyer D, 2022, LECT NOTES COMPUT SC, V13244, P375, DOI 10.1007/978-3-030-99527-0_20
   Boehm HJ, 2008, ACM SIGPLAN NOTICES, V43, P68, DOI 10.1145/1379022.1375591
   Bornholt J, 2017, ACM SIGPLAN NOTICES, V52, P467, DOI [10.1145/3140587.3062353, 10.1145/3062341.3062353]
   Bouajjani A, 2013, LECT NOTES COMPUT SC, V7792, P533, DOI 10.1007/978-3-642-37036-6_29
   Burckhardt S, 2008, LECT NOTES COMPUT SC, V5123, P107
   Clarke E, 2001, FORM METHOD SYST DES, V19, P7, DOI 10.1023/A:1011276507260
   Collier WilliamW., 1992, Reasoning about Parallel Architectures
   Cooksey Simon, 2019, LNCS, V12233, P507, DOI [10.1007/978-3-030-54997-8_31, DOI 10.1007/978-3-030-54997-8_31]
   Dan A, 2015, LECT NOTES COMPUT SC, V8931, P449
   Dan AM, 2013, LECT NOTES COMPUT SC, V7935, P84, DOI 10.1007/978-3-642-38856-9_7
   Dang HH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371102
   DAVIS M, 1960, J ACM, V7, P201, DOI 10.1145/321033.321034
   DAVIS M, 1962, COMMUN ACM, V5, P394, DOI 10.1145/368273.368557
   de Leon H.P., 2018, FMCAD, P1, DOI DOI 10.23919/FMCAD.2018.8603021
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Demsky B, 2015, ACM SIGPLAN NOTICES, V50, P20, DOI [10.1145/2814270.2814297, 10.1145/2858965.2814297]
   Dice D, 2019, PROCEEDINGS OF THE FOURTEENTH EUROSYS CONFERENCE 2019 (EUROSYS '19), DOI 10.1145/3302424.3303984
   Dutertre B, 2014, LECT NOTES COMPUT SC, V8559, P737, DOI 10.1007/978-3-319-08867-9_49
   Elizarov Roman, 2021, Onward! 2021: Proceedings of the 2021 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software, P68, DOI 10.1145/3486607.3486751
   Enderton H.B., 2001, A mathematical introduction to logic, DOI [10.1016/C2009-0-22107-6, DOI 10.1016/C2009-0-22107-6]
   Fan HY, 2022, PPOPP'22: PROCEEDINGS OF THE 27TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P163, DOI 10.1145/3503221.3508424
   Gavrilenko N, 2019, LECT NOTES COMPUT SC, V11561, P355, DOI 10.1007/978-3-030-25540-4_19
   Haas Thomas, 2022, CAAT: Consistency as a Theory (Artifact), DOI [10.5281/zenodo.7079674, DOI 10.5281/ZENODO.7079674]
   He F, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1264, DOI 10.1145/3453483.3454108
   Ioannidis Y. E., 1988, Proceedings of the Fourteenth International Conference on Very Large Databases, P382
   Jackson D., 2000, Software Engineering Notes, V25, P130, DOI 10.1145/357474.355063
   Jackson D, 2003, LECT NOTES COMPUT SC, V2651, P1
   Jackson D, 2019, COMMUN ACM, V62, P66, DOI 10.1145/3338843
   Jeffrey A, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P759, DOI 10.1145/2933575.2934536
   Karpenkov EG, 2016, LECT NOTES COMPUT SC, V9971, P139, DOI 10.1007/978-3-319-48869-1_11
   Kokologiannakis M., 2019, FMCAD, P163, DOI DOI 10.34727/2021/ISBN.978-3-85448-046-4_25
   Kokologiannakis M, 2021, LECT NOTES COMPUT SC, V12759, P427, DOI 10.1007/978-3-030-81685-8_20
   Koval N, 2023, Arxiv, DOI arXiv:2111.12682
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lahav O, 2016, ACM SIGPLAN NOTICES, V51, P649, DOI 10.1145/2914770.2837643
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lau S, 2019, LECT NOTES COMPUT SC, V11561, P387, DOI 10.1007/978-3-030-25540-4_22
   Mador-Haim Sela, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P495, DOI 10.1007/978-3-642-31424-7_36
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Meyer R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371136
   Meyer R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290371
   Nielson Flemming, 2015, Principles of Program Analysis, DOI [10.1007/978-3-662-03811-6, DOI 10.1007/978-3-662-03811-6]
   Oberhauser J, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P530, DOI 10.1145/3445814.3446748
   OPPEN DC, 1980, THEOR COMPUT SCI, V12, P291, DOI 10.1016/0304-3975(80)90059-6
   Paolillo A, 2022, Arxiv, DOI arXiv:2111.15240
   Podkopaev A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290382
   Ponce-de-Leon Hernan, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12079), P378, DOI 10.1007/978-3-030-45237-7_24
   Ponce-de-León H, 2017, LECT NOTES COMPUT SC, V10422, P299, DOI 10.1007/978-3-319-66706-5_15
   Ponzio P, 2021, LECT NOTES COMPUT SC, V12649, P218, DOI [10.1007/978-3-030-71500-7_11, 10.1007/978-3-030-71500-7-11]
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Roditty L, 2008, ACM T ALGORITHMS, V4, DOI 10.1145/1328911.1328917
   Rustan K., 2008, This is Boogie, V2
   Sarkar S, 2011, ACM SIGPLAN NOTICES, V46, P175, DOI 10.1145/1993316.1993520
   Sebastiani R., 2007, J SAT, V3, P141, DOI [DOI 10.3233/978-1-58603-929-5-825, 10.3233/SAT190034, 10.3233/sat190034, DOI 10.3233/SAT190034]
   SHASHA D, 1988, ACM T PROGR LANG SYS, V10, P282, DOI 10.1145/42190.42277
   Simner B, 2022, LECT NOTES COMPUT SC, V13240, P143, DOI 10.1007/978-3-030-99336-8_6
   Sindhu Pradeep S., 1992, Formal Specification of Memory Models, P25, DOI [10.1007/978-1-4615-3604-8_2, DOI 10.1007/978-1-4615-3604-8_2]
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Torlak E, 2010, ACM SIGPLAN NOTICES, V45, P341, DOI 10.1145/1809028.1806635
   Tortak E, 2007, LECT NOTES COMPUT SC, V4424, P632
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Vafeiadis V, 2015, ACM SIGPLAN NOTICES, V50, P209, DOI [10.1145/2676726.2676995, 10.1145/2775051.2676995]
   Vafeiadis V, 2013, ACM SIGPLAN NOTICES, V48, P867, DOI [10.1145/2544173.2509532, 10.1145/2509136.2509532]
   West D.B., 2001, INTRO GRAPH THEORY
   Wickerson J, 2017, ACM SIGPLAN NOTICES, V52, P190, DOI 10.1145/3093333.3009838
   Zhao DV, 2019, Arxiv, DOI arXiv:1907.05045
NR 93
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 129
DI 10.1145/3563292
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200006
OA gold
DA 2024-07-18
ER

PT J
AU Dyer, T
   Nelson, T
   Fisler, K
   Krishnamurthi, S
AF Dyer, Tristan
   Nelson, Tim
   Fisler, Kathi
   Krishnamurthi, Shriram
TI Applying Cognitive Principles to Model-Finding Output: The Positive
   Value of Negative Information
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE model finding; Alloy; cognitive science; user studies
AB Model-finders, such as SAT/SMT-solvers and Alloy, are used widely both directly and embedded in domain-specific tools. They support both conventional verification and, unlike other verification tools, property-free exploration. To do this effectively, they must produce output that helps users with these tasks. Unfortunately, the output of model-finders has seen relatively little rigorous human-factors study.
   Conventionally, these tools tend to show one satisfying instance at a time. Drawing inspiration from the cognitive science literature, we investigate two aspects of model-finder output: how many instances to show at once, and whether all instances must actually satisfy the input constraints. Using both controlled studies and open-ended talk-alouds, we show that there is benefit to showing negative instances in certain settings; the impact of multiple instances is less clear. Our work is a first step in a theoretically grounded approach to understanding how users engage cognitively with model-finder output, and how those tools might better support users in doing so.
C1 [Dyer, Tristan; Nelson, Tim; Fisler, Kathi; Krishnamurthi, Shriram] Brown Univ, Providence, RI 02912 USA.
C3 Brown University
RP Dyer, T (corresponding author), Brown Univ, Providence, RI 02912 USA.
EM atristandyer@gmail.com; tim_nelson@brown.edu; kfisler@brown.edu;
   shriram@brown.edu
OI Fisler, Kathi/0000-0002-7895-8206; Nelson, Tim/0000-0002-9377-9943;
   Dyer, Tristan/0000-0001-9730-9319; Krishnamurthi,
   Shriram/0000-0001-5184-1975
FU US National Science Foundation; Defense Advanced Research Projects
   Agency (DARPA); Air Force Research Laboratory (AFRL)
FX This work was partially supported by the US National Science Foundation,
   Defense Advanced Research Projects Agency (DARPA), and Air Force
   Research Laboratory (AFRL). The views, opinions and/or findings
   expressed are those of the authors and should not be interpreted as
   representing the official views or policies of the Department of Defense
   or the U.S. Government. We thank Doug Woos and the Brown PLT reading
   group for useful exchanges, and especially thank Rob Goldstone for
   numerous discussions (but stress that any errors are ours alone). We
   thank John Baugh, who introduced the first author to the others. An
   anonymous PC member kindly pointed us to the ARC and RAVEN datasets.
CR Akhawe D, 2010, 2010 23RD IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P290, DOI 10.1109/CSF.2010.27
   Alfieri L, 2013, EDUC PSYCHOL-US, V48, P87, DOI 10.1080/00461520.2013.775712
   [Anonymous], 2014, NECESSARY CONDITIONS
   [Anonymous], 1970, Cognition and the development of language
   Atkinson RK, 2000, REV EDUC RES, V70, P181, DOI 10.2307/1170661
   Backes J., 2018, 2018 FORMAL METHODS, P1, DOI DOI 10.23919/FMCAD.2018.8602994
   Backes J, 2019, LECT NOTES COMPUT SC, V11562, P231, DOI 10.1007/978-3-030-25543-5_14
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   BIEDERMAN I, 1987, J EXP PSYCHOL LEARN, V13, P640, DOI 10.1037/0278-7393.13.4.640
   Chollet F., 2019, ARXIV191101547
   Clariso Robert, 2020, Rigorous State-Based Methods. 7th International Conference, ABZ 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12071), P27, DOI 10.1007/978-3-030-48077-6_3
   Clarke EM, 2009, COMMUN ACM, V52, P75, DOI 10.1145/1592761.1592781
   COHEN J, 1960, EDUC PSYCHOL MEAS, V20, P37, DOI 10.1177/001316446002000104
   Cosmides L., 1992, ADAPTED MIND EVOLUTI, P163, DOI DOI 10.1098/RSTB.2006.1991
   Cunha A, 2014, LECT NOTES COMPUT SC, V8411, P17
   Danas Natasha, 2017, Software Engineering and Formal Methods. 15th International Conference, SEFM 2017. Proceedings: Lecture Notes in Computer Society (LNCS 10469), P168, DOI 10.1007/978-3-319-66197-1_11
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   De Rosso SantiagoPerez., 2013, Onward! '13, P37, DOI DOI 10.1145/2509578.2509584
   DUNNETT CW, 1955, J AM STAT ASSOC, V50, P1096, DOI 10.2307/2281208
   Dyer Tristan, 2021, Rigorous State-Based Methods. 8th International Conference, ABZ 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12709), P99, DOI 10.1007/978-3-030-77543-8_7
   Dyer Tristan, 2022, APPLYING COGNITIVE P, DOI [10.5281/zenodo.6370152, DOI 10.5281/ZENODO.6370152]
   Fogel Ari, 2015, 12 USENIX S NETWORKE
   Gibson E. J., 1969, Principles of perceptual learning and development
   GIBSON JJ, 1955, PSYCHOL REV, V62, P32, DOI 10.1037/h0048826
   GICK ML, 1992, CAN J PSYCHOL, V46, P539, DOI 10.1037/h0084333
   Hammer R, 2009, COGN PROCESS, V10, P211, DOI 10.1007/s10339-008-0243-x
   Hays William L., 1994, STATISTICS-ABINGDON, V5th
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Kittur A, 2008, CHI 2008: 26TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS VOLS 1 AND 2, CONFERENCE PROCEEDINGS, P453
   Kulkarni Chinmay., 2014, Early and repeated exposure to examples improves creative work, P49, DOI DOI 10.1007/978-3-319-01303-9_4
   Kullberg A, 2017, ZDM-MATH EDUC, V49, P559, DOI 10.1007/s11858-017-0858-4
   Macedo N, 2015, LECT NOTES COMPUT SC, V9033, P301, DOI 10.1007/978-3-662-46675-9_20
   Maldonado-Lopez FA, 2014, LECT NOTES COMPUT SC, V8477, P314, DOI 10.1007/978-3-662-43652-3_31
   Maoz S, 2011, LECT NOTES COMPUT SC, V6981, P592, DOI 10.1007/978-3-642-24485-8_44
   MARCUS GF, 1993, COGNITION, V46, P53, DOI 10.1016/0010-0277(93)90022-N
   Marton F., 2013, Frontline Learning Research, V1, P24, DOI DOI 10.14786/FLR.V1I1.16
   Montaghami V, 2017, LECT NOTES COMPUT SC, V10202, P22, DOI 10.1007/978-3-662-54494-5_2
   NELSON T., 2010, USENIX LARGE INSTALL
   Nelson T, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P232, DOI 10.1109/ICSE.2013.6606569
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Porncharoenwase S, 2018, LECT NOTES COMPUT SC, V10951, P568, DOI 10.1007/978-3-319-95582-7_34
   Rittle-Johnson B, 2007, J EDUC PSYCHOL, V99, P561, DOI 10.1037/0022-0663.99.3.561
   Rittle-Johnson B, 2009, J EDUC PSYCHOL, V101, P529, DOI 10.1037/a0014224
   Ruchansky N, 2013, ACM SIGCOMM COMP COM, V43, P527, DOI 10.1145/2534169.2491711
   Saghafi S, 2015, LECT NOTES ARTIF INT, V9195, P434, DOI 10.1007/978-3-319-21401-6_30
   Schwartz DL, 2011, J EDUC PSYCHOL, V103, P759, DOI 10.1037/a0025140
   Seidel EL, 2016, ACM SIGPLAN NOTICES, V51, P228, DOI 10.1145/3022670.2951915
   Siegel Abigail, PROTOCOLS STRANDS LO, DOI [10.1007/978-3-030-91631-2_22, DOI 10.1007/978-3-030-91631-2_22]
   Stenning K, 2008, HUMAN REASONING AND COGNITIVE SCIENCE, P1
   Stroop JR, 1935, J EXP PSYCHOL, V18, P643, DOI 10.1037/h0054651
   Sullivan A, 2017, IEEE INT CONF SOFTW, P264, DOI 10.1109/ICST.2017.31
   Wason P., 1966, New horizons in psychology, P135
   Winston Patrick H, 1970, TECHNICAL REPORT AIT
   Zave P, 2012, ACM SIGCOMM COMP COM, V42, P50, DOI 10.1145/2185376.2185383
   Zhang C, 2019, PROC CVPR IEEE, P5312, DOI 10.1109/CVPR.2019.00546
NR 55
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 79
DI 10.1145/3527323
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300015
OA gold
DA 2024-07-18
ER

PT J
AU Krawiec, F
   Jones, SP
   Krishnaswami, N
   Ellis, T
   Eisenberg, RA
   Fitzgibbon, A
AF Krawiec, Faustyna
   Jones, Simon Peyton
   Krishnaswami, Neel
   Ellis, Tom
   Eisenberg, Richard A.
   Fitzgibbon, Andrew
TI Provably Correct, Asymptotically Efficient, Higher-Order Reverse-Mode
   Automatic Differentiation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Reverse-Mode AD; Wengert List; Higher-Order Functions
AB In this paper, we give a simple and efficient implementation of reverse-mode automatic differentiation, which both extends easily to higher-order functions, and has run time and memory consumption linear in the run time of the original program. In addition to a formal description of the translation, we also describe an implementation of this algorithm, and prove its correctness by means of a logical relations argument.
C1 [Krawiec, Faustyna; Krishnaswami, Neel] Univ Cambridge, Dept Comp Sci & Technol, Cambridge, England.
   [Jones, Simon Peyton; Ellis, Tom; Fitzgibbon, Andrew] Microsoft Res, Cambridge, England.
   [Eisenberg, Richard A.] Tweag, Paris, France.
C3 University of Cambridge; Microsoft
RP Krawiec, F (corresponding author), Univ Cambridge, Dept Comp Sci & Technol, Cambridge, England.
EM fmk31@cl.cam.ac.uk; simon.peytonjones@gmail.com; nk480@cl.cam.ac.uk;
   tom-2021@tomellis.org; richard.eisenberg@tweag.io; awf@microsoft.com
RI Fitzgibbon, Andrew/JFL-0330-2023
OI Fitzgibbon, Andrew/0000-0002-9839-660X; Eisenberg,
   Richard/0000-0002-7669-9781; Krawiec, Faustyna/0000-0003-2410-7454;
   Peyton Jones, Simon/0000-0002-6085-1435; Ellis, Tom/0000-0003-4894-6770
FU Microsoft Research through its PhD Scholarship Programme
FX We warmly thank Peter Braam, Pashmina Cameron, Edward Kmett, Siddharth
   Krishna, Sarah Lewis, Tom Minka, and Dimitrios Vytiniotis for their
   helpful feedback. We are also grateful for the helpful and detailed
   suggestions we received from our anonymous reviewers. This work was
   supported by Microsoft Research through its PhD Scholarship Programme.
CR Abadi M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371106
   Brunel A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371132
   Corliss G., 2002, AUTOMATIC DIFFERENTI, DOI [10.1007/978-1-4613-0075-5, DOI 10.1007/978-1-4613-0075-5]
   Egger J, 2014, J LOGIC COMPUT, V24, P615, DOI 10.1093/logcom/exs025
   Elliott C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236765
   Elliott Conal M., 2009, P 14 ACM SIGPLAN INT, P191, DOI [10.1145/1596550.1596579, DOI 10.1145/1596550.1596579]
   Griewank A, 2008, OTHER TITL APPL MATH, V105, P1, DOI 10.1137/1.9780898717761
   Huot Mathieu, 2020, Foundations of Software Science and Computation Structures. 23rd International Conference, FOSSACS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12077), P319, DOI 10.1007/978-3-030-45231-5_17
   Jung A., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P245, DOI 10.1007/BFb0037110
   Karczmarczuk J., 1998, P 3 ACM SIGPLAN INT, P195, DOI [10.1145/289423.289442, DOI 10.1145/289423.289442]
   Kmett Edward, 2010 2021 AD AUTOMAT
   Mak Carol, 2020, ABS200208241 CORR
   Mazza D, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434309
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Pearlmutter BA, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330018
   Piponi D., 2004, Journal of Graphics Tools, V9, P41, DOI 10.1080/10867651.2004.10504901
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P363, DOI 10.1023/A:1010027404223
   Sherman B, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434284
   Vákár M, 2021, LECT NOTES COMPUT SC, V12648, P607, DOI 10.1007/978-3-030-72019-3_22
   Wang F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341700
   WENGERT RE, 1964, COMMUN ACM, V7, P463, DOI 10.1145/355586.364791
NR 21
TC 14
Z9 14
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 48
DI 10.1145/3498710
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900049
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Jaber, N
   Wagner, C
   Jacobs, S
   Kulkarni, M
   Samanta, R
AF Jaber, Nouraldin
   Wagner, Christopher
   Jacobs, Swen
   Kulkarni, Milind
   Samanta, Roopsha
TI QUICKSILVER: Modeling and Parameterized Verification for Distributed
   Agreement-Based Systems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Parameterized Verification; Modular Verification; Distributed Systems
ID PROVING PROPERTIES
AB The last decade has sparked several valiant efforts in deductive verification of distributed agreement protocols such as consensus and leader election. Oddly, there have been far fewer verification efforts that go beyond the core protocols and target applications that are built on top of agreement protocols. This is unfortunate, as agreement-based distributed services such as data stores, locks, and ledgers are ubiquitous and potentially permit modular, scalable verification approaches that mimic their modular design.
   We address this need for verification of distributed agreement-based systems through our novel modeling and verification framework, QUICKSILVER, that is not only modular, but also fully automated. The key enabling feature of QUICKSILVER is our encoding of abstractions of verified agreement protocols that facilitates modular, decidable, and scalable automated verification. We demonstrate the potential of QUICKSILVER by modeling and efficiently verifying a series of tricky case studies, adapted from real-world applications, such as a data store, a lock service, a surveillance system, a pathfinding algorithm for mobile robots, and more.
C1 [Jaber, Nouraldin; Wagner, Christopher; Kulkarni, Milind; Samanta, Roopsha] Purdue Univ, W Lafayette, IN 47907 USA.
   [Jacobs, Swen] CISPA Helmholtz Ctr Informat Secur, Saarbrucken, Germany.
C3 Purdue University System; Purdue University
RP Jaber, N (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM njaber@purdue.edu; wagne279@purdue.edu; jacobs@cispa.saarland;
   milind@purdue.edu; roopsha@purdue.edu
OI Jacobs, Swen/0000-0002-9051-4050; Kulkarni, Milind/0000-0001-6827-345X
FU National Science Foundation [1846327, 1908504]; Purdue Research
   Foundation; Amazon Science; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [1908504, 1846327]
   Funding Source: National Science Foundation
FX We thank Ilya Sergey, Rupak Majumdar, Isil Dillig, Thomas Wahl, and
   Marijana Lazic for their invaluable feedback on various drafts of this
   paper, and Derek Dreyer for helping us interpret reviewer comments about
   an earlier draft. We are grateful to Shaz Qadeer and Ken McMillan for
   their thought-provoking questions at earlier stages of this work that
   helped shape this paper. We also thank Abhishek Udupa for patiently
   answering all our questions about the Kinara tool. Finally, the authors
   are grateful to the anonymous reviewers from POPL 2019, CAV 2019, POPL
   2020, CAV 2020, POPL 2021, PLDI 2021, and OOPSLA 2021 who chose to take
   the time to provide constructive feedback on our submissions. This
   research was partially supported by the National Science Foundation
   under Grant Nos. 1846327, 1908504, and by grants from the Purdue
   Research Foundation and Amazon Science. Any opinions, findings, and
   conclusions in this paper are those of the authors only and do not
   necessarily reflect the views of our sponsors.
CR Alur Rajeev, 2014, Hardware and Software: Verification and Testing. 10th International Haifa Verification Conference, HVC 2014. Proceedings: LNCS 8855, P75, DOI 10.1007/978-3-319-13338-6_7
   Alur R., 2017, SIGACT News, V48, P55, DOI [DOI 10.1145/3061640.3061652, 10.1145/3061640.3061652]
   Alur R, 2015, LECT NOTES COMPUT SC, V9207, P395, DOI 10.1007/978-3-319-21668-3_23
   Aminof B, 2018, DISTRIB COMPUT, V31, P187, DOI 10.1007/s00446-017-0302-6
   Amsden Z., 2020, The Libra Blockchain.
   Andersen KJA, 2019, LECT NOTES COMPUT SC, V11372, P169, DOI 10.1007/978-3-030-05998-9_11
   APT KR, 1986, INFORM PROCESS LETT, V22, P307, DOI 10.1016/0020-0190(86)90071-2
   Arghavani A., 2011, Information Technology and Multimedia (ICIM), 2011 International Conference on, P1, DOI [10.1109/ICIMU.2011. 6122724, DOI 10.1109/ICIMU.2011.6122724]
   Atomix, 2021, ATOMIX
   Ausserlechner S, 2016, LECT NOTES COMPUT SC, V9583, P476, DOI 10.1007/978-3-662-49122-5_23
   Bloem R, 2016, LECT NOTES COMPUT SC, V9779, P157, DOI 10.1007/978-3-319-41528-4_9
   Burrows M, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P335
   Canepa D, 2007, LECT NOTES COMPUT SC, V4838, P52
   Chand S, 2016, LECT NOTES COMPUT SC, V9995, P119, DOI 10.1007/978-3-319-48989-6_8
   Chandra T, 2007, PODC'07: PROCEEDINGS OF THE 26TH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P398
   Chang CC, 2016, IET WIREL SENS SYST, V6, P198, DOI 10.1049/iet-wss.2015.0030
   Charron-Bost B, 2009, DISTRIB COMPUT, V22, P49, DOI 10.1007/s00446-009-0084-6
   Cousineau D., 2012, LECT NOTES COMPUTER, V7436, P147, DOI 10.1007/978-3-642-32759-914
   Damian A, 2019, LECT NOTES COMPUT SC, V11562, P344, DOI 10.1007/978-3-030-25543-5_20
   Damm W, 2014, LECT NOTES COMPUT SC, V8442, P179, DOI 10.1007/978-3-319-06410-9_13
   Delzanno G, 2002, LECT NOTES COMPUT SC, V2280, P173
   Desai A, 2017, ACM IEEE INT CONF CY, P239, DOI 10.1145/3055004.3055022
   Doenges Ryan, 2017, VERIFICATION IMPLEME
   Dragoi C, 2016, ACM SIGPLAN NOTICES, V51, P400, DOI [10.1145/2837614.2837650, 10.1145/2914770.2837650]
   Dragoi C, 2014, LECT NOTES COMPUT SC, V8318, P161, DOI 10.1007/978-3-642-54013-4_10
   Emerson EA, 2003, LECT NOTES COMPUT SC, V2860, P247
   Emerson EA, 2003, LECT NOTES COMPUT SC, V2860, P216
   Emerson EA, 2003, IEEE S LOG, P361, DOI 10.1109/LICS.2003.1210076
   Emerson EA, 1996, FORM METHOD SYST DES, V9, P105, DOI 10.1007/BF00625970
   Esparza J., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P352, DOI 10.1109/LICS.1999.782630
   Feldman YMY, 2019, LECT NOTES COMPUT SC, V11562, P405, DOI 10.1007/978-3-030-25543-5_23
   Garcia-Perez Alvaro, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P912, DOI 10.1007/978-3-319-89884-1_32
   GARCIAMOLINA H, 1982, IEEE T COMPUT, V31, P48, DOI 10.1109/TC.1982.1675885
   GERMAN SM, 1992, J ACM, V39, P675, DOI 10.1145/146637.146681
   Gleissenthall KV, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290372
   Griffin J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409005
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Hyperledger, 2021, HYP PROJ
   Ip CN, 1996, FORM METHOD SYST DES, V9, P41, DOI 10.1007/BF00625968
   Jaber N, 2020, LECT NOTES COMPUT SC, V12224, P299, DOI 10.1007/978-3-030-53288-8_15
   Jacobs S, 2018, LECT NOTES COMPUT SC, V10747, P247, DOI 10.1007/978-3-319-73721-8_12
   Kragl B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P227, DOI 10.1145/3385412.3385980
   Krogh-Jespersen M, 2020, LECT NOTES COMPUT SC, V12075, P336, DOI 10.1007/978-3-030-44914-8_13
   Lamport L, 1998, ACM T COMPUT SYST, V16, P133, DOI 10.1145/279227.279229
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Lamport L, 2006, DISTRIB COMPUT, V19, P79, DOI 10.1007/s00446-006-0005-x
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Liu YHA, 2012, ACM SIGPLAN NOTICES, V47, P395, DOI 10.1145/2398857.2384645
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Mao Y., 2008, OSDI
   Maric O, 2017, LECT NOTES COMPUT SC, V10427, P217, DOI 10.1007/978-3-319-63390-9_12
   NASA, 2021, NASA SMALL AIRCR TRA
   Ongaro Diego, 2014, 2014 USENIX ANN TECH, DOI DOI 10.5555/2643634.2643666
   Padon O, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3140568
   Padon O, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158114
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Piskac R, 2010, J AUTOM REASONING, V44, P401, DOI 10.1007/s10817-009-9161-6
   QuickSilver, 2021, QUICKSLIVER IMPL, DOI DOI 10.5281/ZENODO.5501650
   Rahli Vincent., 2012, INTERFACING PROOF AS
   RedisRaft, 2021, REDISRAFT
   Schmitz Sylvain, 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P5, DOI 10.1007/978-3-642-40184-8_2
   Sergey I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158116
   SUZUKI I, 1988, INFORM PROCESS LETT, V28, P213, DOI 10.1016/0020-0190(88)90211-6
   Taube M, 2018, ACM SIGPLAN NOTICES, V53, P662, DOI [10.1145/3296979.3192414, 10.1145/3192366.3192414]
   Wagner Christopher, 2020, ABS200404613 CORR
   Wahl T, 2007, LECT NOTES COMPUT SC, V4590, P393
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Wilcox James R., 2017, 2 SUMM ADV PROGR LAN, V71, DOI [10.4230/LIPIcs.SNAPL.2017.19, DOI 10.4230/LIPICS.SNAPL.2017.19]
   Woos D, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P154, DOI 10.1145/2854065.2854081
   Yang Junfeng, 2009, Proceedings of the 6th USENIX Symposium on Networked Systems Design and Implementation, P213
NR 70
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 157
DI 10.1145/3485534
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200060
OA gold
DA 2024-07-18
ER

PT J
AU Nandi, C
   Willsey, M
   Zhu, A
   Wang, YR
   Saiki, B
   Anderson, A
   Schulz, A
   Grossman, D
   Tatlock, Z
AF Nandi, Chandrakana
   Willsey, Max
   Zhu, Amy
   Wang, Yisu Remy
   Saiki, Brett
   Anderson, Adam
   Schulz, Adriana
   Grossman, Dan
   Tatlock, Zachary
TI Rewrite Rule Inference Using Equality Saturation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Equality Saturation; Rewrite Rules; Program Synthesis
AB Many compilers, synthesizers, and theorem provers rely on rewrite rules to simplify expressions or prove equivalences. Developing rewrite rules can be difficult: rules may be subtly incorrect, profitable rules are easy to miss, and rulesets must be rechecked or extended whenever semantics are tweaked. Large rulesets can also be challenging to apply: redundant rules slow down rule-based search and frustrate debugging.
   This paper explores how equality saturation, a promising technique that uses e-graphs to apply rewrite rules, can also be used to infer rewrite rules. E-graphs can compactly represent the exponentially large sets of enumerated terms and potential rewrite rules. We show that equality saturation efficiently shrinks both sets, leading to faster synthesis of smaller, more general rulesets.
   We prototyped these strategies in a tool dubbed Ruler. Compared to a similar tool built on CVC4, Ruler synthesizes 5.8x smaller rulesets 25x faster without compromising on proving power. In an end-to-end case study, we show Ruler-synthesized rules which perform as well as those crafted by domain experts, and addressed a longstanding issue in a popular open source tool.
C1 [Nandi, Chandrakana; Willsey, Max; Zhu, Amy; Wang, Yisu Remy; Saiki, Brett; Anderson, Adam; Schulz, Adriana; Grossman, Dan; Tatlock, Zachary] Univ Washington, Seattle, WA 98195 USA.
C3 University of Washington; University of Washington Seattle
RP Nandi, C (corresponding author), Univ Washington, Seattle, WA 98195 USA.
EM cnandi@cs.washington.edu; mwillsey@cs.washington.edu;
   amyzhu@cs.washington.edu; remywang@cs.washington.edu;
   bsaiki@cs.washington.edu; adamand2@cs.washington.edu;
   adriana@cs.washington.edu; djg@cs.washington.edu;
   ztatlock@cs.washington.edu
OI Tatlock, Zachary/0000-0002-4731-0124; Schulz,
   Adriana/0000-0002-2464-0876; Willsey, Max/0000-0001-8066-4218
FU National Science Foundation [1813166, 1749570]; Direct For Computer &
   Info Scie & Enginr; Division of Computing and Communication Foundations
   [1749570] Funding Source: National Science Foundation; Division of
   Computing and Communication Foundations; Direct For Computer & Info Scie
   & Enginr [1813166] Funding Source: National Science Foundation
FX We thank the anonymous reviewers for their thoughtful feedback. We are
   grateful to Andrew Reynolds for answering our questions about CVC4's
   rule synthesis component, to Pavel Panchekha and Oliver Flatt for
   helping us run Herbie with Ruler's rules, and to Sorawee Porncharoenwase
   and Jacob Van Geffen for helping with Rosette. Thanks to Steven S.
   Lyubomirsky and Bill Zorn for allowing us to run experiments on their
   research servers. Thanks to Talia Ringer, Martin Kellogg, Ben Kushigian,
   Gus Henry Smith, and Mike He for their feedback on earlier drafts of the
   paper. This material is based upon work supported by the National
   Science Foundation under Grant Nos. 1813166, 1749570. Any opinions,
   findings, and conclusions or recommendations expressed in this material
   are those of the author(s) and do not necessarily reflect the views of
   the National Science Foundation.
CR Baader Franz., 1998, Term rewriting and all that, DOI [10.1017/CBO9781139172752, DOI 10.1017/CBO9781139172752]
   Bachmair L, 2000, LECT NOTES ARTIF INT, V1794, P245
   Bansal S, 2006, ACM SIGPLAN NOTICES, V41, P394, DOI 10.1145/1168918.1168906
   BARENDREGT HP, 1987, LECT NOTES COMPUT SC, V259, P141
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Barrett C., 2016, The Satisfiability Modulo Theories Library (SMT-LIB)
   Bertot Yves, 2010, INTERACTIVE THEOREM, V1st, DOI [10.5555/1965123, DOI 10.5555/1965123]
   Bezem M., 2003, Cambridge Tracts in Theoretical Computer Science
   Blindell Gabriel Hjort, 2013, ABS13064898 CORR
   Borovansky P., 1998, Electronic Notes in Theoretical Computer Science, V15, DOI 10.1016/S1571-0661(05)82552-6
   Buchwald S, 2018, INT SYM CODE GENER, P300, DOI 10.1145/3168821
   Chen TQ, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P579
   Claessen Koen, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P392, DOI 10.1007/978-3-642-38574-2_27
   Claessen K, 2010, LECT NOTES COMPUT SC, V6143, P6, DOI 10.1007/978-3-642-13977-2_3
   Clavel M., 2007, ALL MAUDE A HIGH PER, DOI DOI 10.1007/978-3-540-71999-1
   Davidson JW, 2004, ACM SIGPLAN NOTICES, V39, P104, DOI 10.1145/989393.989407
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DERSHOWITZ N, 1982, THEOR COMPUT SCI, V17, P279, DOI 10.1016/0304-3975(82)90026-3
   DERSHOWITZ N, 1987, J SYMB COMPUT, V3, P69, DOI 10.1016/S0747-7171(87)80022-6
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Dias J, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P403, DOI 10.1145/1706299.1706346
   Eker S, 2003, LECT NOTES COMPUT SC, V2706, P14
   ERSHOV AP, 1958, COMMUN ACM, V1, P3, DOI 10.1145/368892.368907
   Hansen Trevor Alexander, 2012, THESIS MELBOURNE
   Herbie, 2021, HERB CAN GEN MOR COM
   Herbie, 2021, OPT FLOAT POINT EXPR
   Hoe JamesC., 2000, Hardware Synthesis from Term Rewriting Systems, P595, DOI [10.1007/978-0-387-35498-9_52, DOI 10.1007/978-0-387-35498-9_52]
   Jia ZH, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P47, DOI 10.1145/3341301.3359630
   Johansson M, 2014, LECT NOTES ARTIF INT, V8543, P108, DOI 10.1007/978-3-319-08434-3_9
   Johansson M, 2011, J AUTOM REASONING, V47, P251, DOI 10.1007/s10817-010-9193-y
   Jones S.P., 2001, HASK WORKSH, V1, P203
   Joshi R, 2002, ACM SIGPLAN NOTICES, V37, P304, DOI 10.1145/543552.512566
   Julie L.Newcomb, 2020, P ACM PROGR LANG 4 O, V4
   Kirchner H, 2015, LECT NOTES COMPUT SC, V9200, P380, DOI 10.1007/978-3-319-23165-5_18
   KnuthD E., 1983, Symbolic Computations, V1064, P342, DOI [10.1007/978-3-642-81955-1_, DOI 10.1007/978-3-642-81955-1]
   Lattner C, 2021, INT SYM CODE GENER, P2, DOI 10.1109/CGO51591.2021.9370308
   Livshits B, 2015, COMMUN ACM, V58, P44, DOI 10.1145/2644805
   Lopes NP, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P65, DOI 10.1145/3453483.3454030
   Lucas Salvador., 2001, P 8 INT C LOGIC PROG, V2250, P669
   Massalin H., 1987, Proceedings of the Second International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS II) (Cat. No.87CH2440-6), P122
   MCKEEMAN WM, 1965, COMMUN ACM, V8, P443, DOI 10.1145/364995.365000
   Menendez D, 2017, ACM SIGPLAN NOTICES, V52, P49, DOI [10.1145/3140587.3062372, 10.1145/3062341.3062372]
   Menendez D, 2016, LECT NOTES COMPUT SC, V9837, P317, DOI 10.1007/978-3-662-53413-7_16
   Nadel A, 2014, LECT NOTES COMPUT SC, V8559, P663, DOI 10.1007/978-3-319-08867-9_44
   Nandi C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P31, DOI 10.1145/3385412.3386012
   Nelson Charles Gregory, 1980, THESIS STANFORD CA
   Niemetz A, 2018, LECT NOTES COMPUT SC, V10982, P236, DOI 10.1007/978-3-319-96142-2_16
   Nipkow T., 2002, Isabelle/HOL: a proof assistant for higher-order logic, V1st ed., DOI [10.1007/3-540-45949-9, DOI 10.1007/3-540-45949-9]
   Nötzli A, 2019, LECT NOTES COMPUT SC, V11628, P279, DOI 10.1007/978-3-030-24258-9_20
   Panchekha P, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI 10.1145/2737924.2737959
   Peled D, 1998, LECT NOTES COMPUT SC, V1427, P17, DOI 10.1007/BFb0028727
   Premtoon V, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1066, DOI 10.1145/3385412.3386001
   Racket, 2021, RACK PROGR LANG
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Romano Anthony, 2013, Model Checking Software. 20th International Symposium, SPIN 2013. Proceedings, P301, DOI 10.1007/978-3-642-39176-7_19
   Rust, 2021, RUST BIGINT LIB
   Schkufza E, 2014, ACM SIGPLAN NOTICES, V49, P53, DOI [10.1145/2666356.2594302, 10.1145/2594291.2594302]
   Sharma R, 2015, ACM SIGPLAN NOTICES, V50, P147, DOI 10.1145/2814270.2814278
   Singh R, 2016, PROCEEDINGS OF THE 2016 16TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2016), P185, DOI 10.1109/FMCAD.2016.7886678
   Singher E, 2021, LECT NOTES COMPUT SC, V12760, P125, DOI 10.1007/978-3-030-81688-9_6
   Solarlezama Armando, 2008, PROGRAM SYNTHESIS SK
   Stepp Michael, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P737, DOI 10.1007/978-3-642-22110-1_59
   TARJAN RE, 1975, J ACM, V22, P215, DOI 10.1145/321879.321884
   Tate R, 2009, ACM SIGPLAN NOTICES, V44, P264, DOI 10.1145/1594834.1480915
   VanHattum A, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P874, DOI 10.1145/3445814.3446707
   Visser E., 2001, Rewriting Techniques and Applications. 12th International Conference, RTA 2001. Proceedings (Lecture Notes in Computer Science Vol.2051), P357
   Visser E., 2001, Electronic Notes in Theoretical Computer Science, V57, DOI 10.1016/S1571-0661(04)00270-1
   Wang YR, 2020, PROC VLDB ENDOW, V13, P1919, DOI 10.14778/3407790.3407799
   Whitfield DL, 1997, ACM T PROGR LANG SYS, V19, P1053, DOI 10.1145/267959.267960
   Willsey M., 2021, EGG DOCUMENTATION
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Wu CM, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3355089.3356518
   Yang Yichen, 2021, P MACHINE LEARNING S, V3, P255
NR 73
TC 14
Z9 16
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 119
DI 10.1145/3485496
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200023
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Kahn, DM
   Hoffmann, J
AF Kahn, David M.
   Hoffmann, Jan
TI Automatic Amortized Resource Analysis with the Quantum Physicist's
   Method
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE resource analysis; quantum; potential method; remainder context
AB We present a novel method for working with the physicist's method of amortized resource analysis, which we call the quantum physicist's method. These principles allow for more precise analyses of resources that are not monotonically consumed, like stack. This method takes its name from its two major features, worldviews and resource tunneling, which behave analogously to quantum superposition and quantum tunneling. We use the quantum physicist's method to extend the Automatic Amortized Resource Analysis (AARA) type system, enabling the derivation of resource bounds based on tree depth. In doing so, we also introduce remainder contexts, which aid bookkeeping in linear type systems. We then evaluate this new type system's performance by bounding stack use of functions in the Set module of OCaml's standard library. Compared to state-of-the-art implementations of AARA, our new system derives tighter bounds with only moderate overhead.
C1 [Kahn, David M.; Hoffmann, Jan] Carnegie Mellon Univ, 5000 Forbes Ave, Pittsburgh, PA 15232 USA.
C3 Carnegie Mellon University
RP Kahn, DM (corresponding author), Carnegie Mellon Univ, 5000 Forbes Ave, Pittsburgh, PA 15232 USA.
EM davidkah@andrew.cmu.edu
CR Albert E, 2007, LECT NOTES COMPUT SC, V4421, P157
   Atkey R, 2010, LECT NOTES COMPUT SC, V6012, P85, DOI 10.1007/978-3-642-11957-6_6
   Avanzini M., 2013, 24 INT C REWR TECHN
   Avanzini M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P152, DOI 10.1145/2784731.2784753
   BENNETT CH, 1973, IBM J RES DEV, V17, P525, DOI 10.1147/rd.176.0525
   Bichsel B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P286, DOI 10.1145/3385412.3386007
   BLANC R, 2010, LOGIC PROG AI REASON
   Campbell B, 2009, LECT NOTES COMPUT SC, V5502, P190, DOI 10.1007/978-3-642-00590-9_14
   Campbell Brian, 2008, TYPE BASED AMORTIZED
   Carbonneaux Q, 2015, ACM SIGPLAN NOTICES, V50, P467, DOI [10.1145/2813885.2737955, 10.1145/2737924.2737955]
   Cervesato I., 1996, Extensions of Logic Programming. 5th International Workshop, ELP '96. Proceedings, P67
   Chatterjee K, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3339984
   Crary K., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P184, DOI 10.1145/325694.325716
   Cutler JW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408979
   Dal Lago U, 2013, ACM SIGPLAN NOTICES, V48, P167, DOI 10.1145/2480359.2429090
   Dal Lago U, 2011, IEEE S LOG, P133, DOI 10.1109/LICS.2011.22
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Danielsson NA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1328438.1328457
   Danner N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P140, DOI 10.1145/2784731.2784749
   Das A., 2019, ABS190206056 CORR
   EVERETT H, 1957, REV MOD PHYS, V29, P454, DOI 10.1103/RevModPhys.29.454
   Griffiths D J., 2018, Introduction to quantum mechanics, VIII edn
   Gueneau Armael, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P533, DOI 10.1007/978-3-319-89884-1_19
   GULWANI S., 2009, INT C COMP AID VER
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Hirokawa N, 2008, LECT NOTES ARTIF INT, V5195, P364, DOI 10.1007/978-3-540-71070-7_32
   HODAS JS, 1994, INFORM COMPUT, V110, P327, DOI 10.1006/inco.1994.1036
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Hofmann M, 2006, LECT NOTES COMPUT SC, V3924, P22
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hofmann M, 2013, LECT NOTES COMPUT SC, V7792, P593, DOI 10.1007/978-3-642-37036-6_32
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   Jost S, 2009, LECT NOTES COMPUT SC, V5850, P354, DOI 10.1007/978-3-642-05089-3_23
   Kahn DM, 2020, LECT NOTES COMPUT SC, V12077, P359, DOI 10.1007/978-3-030-45231-5_19
   Kavvos G. A., 2020, Proceedings of the ACM on Programming Languages, V4, DOI 10.1145/3371083
   Kincaid Z, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158142
   Kincaid Z, 2017, ACM SIGPLAN NOTICES, V52, P248, DOI [10.1145/3062341.3062373, 10.1145/3140587.3062373]
   Lopez-Garcia P, 2018, THEOR PRACT LOG PROG, V18, P167, DOI 10.1017/S1471068418000042
   MEVEL G, 2019, PROGRAMMING LANGUAGE
   Naaf M, 2017, LECT NOTES ARTIF INT, V10483, P132, DOI 10.1007/978-3-319-66167-4_8
   Nipkow T, 2019, J AUTOM REASONING, V62, P367, DOI 10.1007/s10817-018-9459-3
   Noschinski L, 2013, J AUTOM REASONING, V51, P27, DOI 10.1007/s10817-013-9277-6
   Radicek I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158124
   Roman-Diez Elvira, 2015, INT C TOOLS ALG CONS
   Santurkar, IEEE COMPUTER SOC
   TARJAN RE, 1985, SIAM J ALGEBRA DISCR, V6, P306, DOI 10.1137/0606031
   VANNGO C, 2018, 39 C PROGR LANG DES
   Vasconcelos Pedro, 2008, Ph.D. Dissertation
   Wang D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408992
   Wang P, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133903
NR 51
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 76
DI 10.1145/3473581
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800016
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Pickard, M
   Hutton, G
AF Pickard, Mitchell
   Hutton, Graham
TI Calculating Dependently-Typed Compilers (Functional Pearl)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program calculation; dependent types
AB Compilers are difficult to write, and difficult to get right. Bahr and Hutton recently developed a new technique for calculating compilers directly from specifications of their correctness, which ensures that the resulting compilers are correct-by-construction. To date, however, this technique has only been applicable to source languages that are untyped. In this article, we show that moving to a dependently-typed setting allows us to naturally support typed source languages, ensure that all compilation components are type-safe, and make the resulting calculations easier to mechanically check using a proof assistant.
C1 [Pickard, Mitchell; Hutton, Graham] Univ Nottingham, Sch Comp Sci, Nottingham, England.
C3 University of Nottingham
RP Pickard, M (corresponding author), Univ Nottingham, Sch Comp Sci, Nottingham, England.
EM mitchell.pickard@nottingham.ac.uk; graham.hutton@nottingham.ac.uk
OI Hutton, Graham/0000-0001-9584-5150
FU EPSRC [EP/P00587X/1]; EPSRC [EP/P00587X/1] Funding Source: UKRI
FX We would like to thank Arjen Rouvoet and the ICFP reviewers for useful
   comments and suggestions on this article. This work was funded by the
   EPSRC grant EP/P00587X/1, Mind the Gap: Unified Reasoning About Program
   Correctness and Efficiency.
CR Ager M.S., 2003, RS0314 BRICS U AARH
   [Anonymous], 2007, PRACTICAL PROGRAMMIN
   Bahr, 2017, J FUNCT PROGRAM, V27
   Bahr P, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000209
   Bahr P, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000180
   Brady Edwin., 2006, GPCE 06, P111
   Chlipala A, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P54, DOI 10.1145/1250734.1250742
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   Elliott, 2018, CALCULATING COMPILER
   Elliott C, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110271
   Farmer A, 2015, ACM SIGPLAN NOTICES, V50, P23, DOI 10.1145/2804302.2804303
   Handley  Martin, 2018, TRENDS FUNCTIONAL PR
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Marlow Simon, 2010, HASKELL LANGUAGE REP
   McBride Conor, 2011, ORNAMENTAL ALGEBRAS
   Meijer E., 1992, THESIS KATHOLIEKE U
   Mu SC, 2009, J FUNCT PROGRAM, V19, P545, DOI 10.1017/S0956796809007345
   Pardo A, 2018, PPDP'18: PROCEEDINGS OF THE 20TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, DOI 10.1145/3236950.3236965
   Poulsen CB, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158104
   Rouvoet A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434303
   SPIVEY M, 1990, SCI COMPUT PROGRAM, V14, P25, DOI 10.1016/0167-6423(90)90056-J
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Tan YK, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000229
   WADLER P, 1989, CONCATENATE VANISHES
   WAND M, 1982, ACM T PROGR LANG SYS, V4, P496, DOI 10.1145/357172.357179
   Wright Joel, 2006, TYPE CORRECT STACK S
   Zdancewic Steve, 2015, SCI DEEP SPECIFICATI
NR 27
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 82
DI 10.1145/3473587
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800022
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Kuperberg, D
   Pinault, L
   Pous, D
AF Kuperberg, Denis
   Pinault, Laureline
   Pous, Damien
TI Cyclic Proofs, System T, and the Power of Contraction
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Cyclic proofs; system T; cyclic type system; primitive recursion; linear
   logic; regular expressions; second order arithmetic; reverse mathematics
AB We study a cyclic proof system C over regular expression types, inspired by linear logic and non-wellfounded proof theory. Proofs in C can be seen as strongly typed goto programs. We show that they denote computable total functions and we analyse the relative strength of C and Godel's system T. In the general case, we prove that the two systems capture the same functions on natural numbers. In the affine case, i.e., when contraction is removed, we prove that they capture precisely the primitive recursive functions-providing an alternative and more general proof of a result by Dal Lago, about an affine version of system T.
   Without contraction, we manage to give a direct and uniform encoding of C into T, by analysing cycles and translating them into explicit recursions. Whether such a direct and uniform translation from C to T can be given in the presence of contraction remains open.
   We obtain the two upper bounds on the expressivity of C using a different technique: we formalise weak normalisation of a small step reduction semantics in subsystems of second-order arithmetic: ACA(0) and RCA(0).
C1 [Kuperberg, Denis; Pinault, Laureline; Pous, Damien] Univ Lyon, CNRS, ENS Lyon, UCBL,LIP,UMR 5668, F-69342 Lyon, France.
C3 Ecole Normale Superieure de Lyon (ENS de LYON); Universite Claude
   Bernard Lyon 1; Centre National de la Recherche Scientifique (CNRS)
RP Kuperberg, D (corresponding author), Univ Lyon, CNRS, ENS Lyon, UCBL,LIP,UMR 5668, F-69342 Lyon, France.
FU European Research Council (ERC) under the European Union [678157]; LABEX
   MILYON of Universite de Lyon, within the program "Investissements
   d'Avenir" by the French National Research Agency (ANR)
   [ANR-10-LABX-0070, ANR-11-IDEX-0007]; European Research Council (ERC)
   [678157] Funding Source: European Research Council (ERC)
FX This work has been supported by the European Research Council (ERC)
   under the European Union's Horizon 2020 programme (CoVeCe, agreement
   678157), and by the LABEX MILYON (ANR-10-LABX-0070) of Universite de
   Lyon, within the program "Investissements d'Avenir" (ANR-11-IDEX-0007)
   operated by the French National Research Agency (ANR).
CR Abramsky S., 2002, Mathematical Structures in Computer Science, V12, P625, DOI 10.1017/S0960129502003730
   Afshari B., 2017, 2017 32 ANN ACM IEEE, P1, DOI DOI 10.1109/LICS.2017.8005088
   Avigad J, 1996, ANN PURE APPL LOGIC, V82, P165, DOI 10.1016/0168-0072(96)00003-6
   Avigad Jeremy, 1998, HDB PROOF THEORY
   Baelde D., 2016, LIPIcs, V62, P42
   Baillot P, 2001, FUNDAM INFORM, V45, P1
   Berardi S, 2017, LECT NOTES COMPUT SC, V10203, P301, DOI 10.1007/978-3-662-54458-7_18
   Berardi Stefano, LICS, p1S12, DOI [10.1109/LICS.2017.8005114, DOI 10.1109/LICS.2017.8005114]
   Brotherston J, 2005, LECT NOTES ARTIF INT, V3702, P78
   Brotherston J, 2011, J LOGIC COMPUT, V21, P1177, DOI 10.1093/logcom/exq052
   Buss S., 1998, HDB PROOF THEORY, V137
   Buss S.R., 1995, Logic, Methodology and Philosophy of Science IX, VVolume 134, P29, DOI [10.1016/S0049-237X(06)80038-8, DOI 10.1016/S0049-237X(06)80038-8]
   Dal Lago U, 2009, ACM T COMPUT LOG, V10, DOI 10.1145/1462179.1462180
   Das A., 2018, LIPIcs, V119
   Das A, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:1)2020
   Das A, 2017, LECT NOTES ARTIF INT, V10501, P261, DOI 10.1007/978-3-319-66902-1_16
   Das Anupam, 2018, EPiC Series in Computing, V57, P271, DOI DOI 10.29007/HZQ3
   Doumane A., 2017, 2017 32 ANN ACM IEEE, P1, DOI [10.1109/LICS.2017.8005075, DOI 10.1109/LICS.2017.8005075]
   Fortier J., 2013, LEIBNIZ INT P INFORM, V23, P248
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   GIRARD JY, 1995, LONDON MATH SOC LECT, V222, P329
   Godel K., 1958, dialectica, V12, P280, DOI 10.1111/j.1746-8361.1958.tb01464.x
   Hirschfeldt D. R., 2014, Slicing the truth: On the computable and reverse mathematics of combinatorial principles
   Hoshino N, 2014, IEEE S LOG, DOI 10.1145/2603088.2603124
   Kolodziejczyk L, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(2:16)2019
   Kuperberg Denis, 2019, LIPICS, V45, P1, DOI [10.4230/LIPIcs.FSTTCS.2019.45, DOI 10.4230/LIPICS.FSTTCS.2019.45]
   Kuperberg Denis, 2021, CYCLIC PROOFS SYSTEM
   Lucanu D, 2015, FORM ASP COMPUT, V27, P701, DOI 10.1007/s00165-014-0319-6
   Lucanu D, 2009, LECT NOTES COMPUT SC, V5728, P433, DOI 10.1007/978-3-642-03741-2_30
   PARSONS C, 1972, J SYMBOLIC LOGIC, V37, P466, DOI 10.2307/2272731
   Simpson A, 2017, LECT NOTES COMPUT SC, V10203, P283, DOI 10.1007/978-3-662-54458-7_17
   Simpson SG, 2009, PERSPECT LOGIC, P1, DOI 10.1017/CBO9780511581007
   Tait W., 1965, STUDIES LOGIC FDN MA, P176, DOI DOI 10.1016/S0049-237X(08)71689-6
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
NR 34
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 1
DI 10.1145/3434282
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100001
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Andersen, L
   Ballantyne, M
   Felleisen, M
AF Andersen, Leif
   Ballantyne, Michael
   Felleisen, Matthias
TI Adding Interactive Visual Syntax to Textual Code
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Domain-Specific Language
AB Many programming problems call for turning geometrical thoughts into code: tables, hierarchical structures, nests of objects, trees, forests, graphs, and so on. Linear text does not do justice to such thoughts. But, it has been the dominant programming medium for the past and will remain so for the foreseeable future.
   This paper proposes a novel mechanism for conveniently extending textual programming languages with problem-specific visual syntax. It argues the necessity of this language feature, demonstrates the feasibility with a robust prototype, and sketches a design plan for adapting the idea to other languages.
C1 [Andersen, Leif; Ballantyne, Michael; Felleisen, Matthias] PLT, Boston, MA 02115 USA.
   [Andersen, Leif; Ballantyne, Michael; Felleisen, Matthias] Northeastern Univ, Khoury Coll Comp Sci, 440 Huntington Ave, Boston, MA 02115 USA.
C3 Northeastern University
RP Andersen, L (corresponding author), PLT, Boston, MA 02115 USA.; Andersen, L (corresponding author), Northeastern Univ, Khoury Coll Comp Sci, 440 Huntington Ave, Boston, MA 02115 USA.
EM lei@leifandersen.net; mballantyne@ccs.neu.edu; mathias@ccs.neu.edu
FU NSF [1823244, 20050550]; Direct For Computer & Info Scie & Enginr;
   Division Of Computer and Network Systems [1823244] Funding Source:
   National Science Foundation
FX This research was partially supported by NSF grants 1823244 and
   20050550. We also thank Nia Angle, Benjamin Chung, Benjamin Greenman,
   Elizabeth Grimm, Jason Hemann, Shriram Krishnamurthi, and Ming-Ho Yee
   for useful discussions and feedback on early drafts of this paper.
CR Adobe, 2019, AD DREAMW CC HELP
   Andersen L, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110274
   [Anonymous], 2010, PLTTR20101 INC
   [Anonymous], 2002, AMPL: A Modeling Language for Mathematical Programming
   Ashkenas Jeremy., 2019, OBSERVABLE USER MANU
   Bayer R., 1972, Acta Informatica, V1, P290, DOI 10.1007/BF00289509
   Bergel Alexandre, 2013, Deep Into Pharo
   Bernardin L., 2012, MAPLE PROGRAMMING GU
   Boshernitsan M, 2004, UCBCSD041368 EECS U
   Chugh R, 2016, ACM SIGPLAN NOTICES, V51, P341, DOI [10.1145/2980983.2908103, 10.1145/2908080.2908103]
   Comon H., 2007, TREE AUTOMATA TECHNI
   Cooper Gregory, 2004, LECT NOTES COMPUTER, DOI [10.1007/11693024_20, DOI 10.1007/11693024]
   Cormen T.H., 2009, INTRO ALGORITHMS
   DISESSA AA, 1986, COMMUN ACM, V29, P859, DOI 10.1145/6592.6595
   Dybvig RK, 2006, ACM SIGPLAN NOTICES, V41, P1, DOI 10.1145/1160074.1159805
   Eisenberg AndrewD., 2007, PROC INT C ASPECT OR, P73, DOI DOI 10.1145/1218563.1218573
   Ellis T. O., 1969, RM6001ARPA RAND CORP, DOI [10.7249/RM6001, DOI 10.7249/RM6001]
   Ellis T. O., 1969, RM5999ARPA RAND CORP
   Erdweg S, 2011, GPCE 11: PROCEEDINGS OF THE TENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P167
   Felleisen M, 2018, COMMUN ACM, V61, P62, DOI 10.1145/3127323
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   Findler Robert Bruce, 2010, PLTTR20102
   Flatt M, 2002, ACM SIGPLAN NOTICES, V37, P72, DOI 10.1145/583852.581486
   Flatt M, 2006, LECT NOTES COMPUT SC, V4279, P270
   Flatt M, 2014, ACM SIGPLAN NOTICES, V49, P13, DOI [10.1145/2637365.2517211, 10.1145/2517208.2517211]
   Flatt Matthew, 2010, PLTTR20103
   French GW, 2014, SOFTWARE PRACT EXPER, V44, P911, DOI 10.1002/spe.2182
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Goodman Danny., 1988, COMPLETE HYPERCARD H
   Harvey B., 2010, P CONSTRUCTIONISM 20, P1
   Hempel B, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P654, DOI 10.1145/3180155.3180165
   Ingalls D, 2008, LECT NOTES COMPUT SC, V5146, P31
   Klokmose CN, 2015, UIST'15: PROCEEDINGS OF THE 28TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P280, DOI 10.1145/2807442.2807446
   Ko Amy J., 2006, P SIGCHI C HUM FACT, P387, DOI DOI 10.1145/1124772.1124831
   Maloney John, 2001, SQUEAK OPEN PERSONAL, p39S77
   Microsoft, 2019, OFF SHAR DEV VIS STU
   Okasaki C., 1999, Journal of Functional Programming, V9, P471, DOI 10.1017/S0956796899003494
   Omar C, 2012, PROC INT CONF SOFTW, P859, DOI 10.1109/ICSE.2012.6227133
   Omar Cyrus, 2019, P WORKSH TYP DRIV DE
   Overmars M, 2004, COMPUTER, V37, P81, DOI 10.1109/MC.2004.1297314
   Pech V., 2013, P 2013 INT C PRINC P, P165, DOI [DOI 10.1145/2500828.2500846, 10.1145/2500828.2500846]
   Pérez F, 2007, COMPUT SCI ENG, V9, P21, DOI 10.1109/MCSE.2007.53
   Postel J., 1981, Rfc0793: Transmission control protocol
   Rädle R, 2017, UIST'17: PROCEEDINGS OF THE 30TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P715, DOI 10.1145/3126594.3126642
   Resnick M, 2009, COMMUN ACM, V52, P60, DOI 10.1145/1592761.1592779
   Simonyi C, 2006, ACM SIGPLAN NOTICES, V41, P451, DOI 10.1145/1167515.1167511
   Voelter Markus, 2014, P INT WORKSH GLOB MO
   Voelter Markus., 2012, PROC C SYSTEMS PROGR, P121, DOI DOI 10.1145/2384716.2384767
   Vogt Holger, 2019, NGSPICE USERS MANUAL, P30
   Wolfram Stephen., 1988, MATH BOOK, VFourth
NR 50
TC 8
Z9 10
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 222
DI 10.1145/3428290
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900099
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Astrauskas, V
   Matheja, C
   Poli, F
   Müller, P
   Summers, AJ
AF Astrauskas, Vytautas
   Matheja, Christoph
   Poli, Federico
   Muller, Peter
   Summers, Alexander J.
TI How Do Programmers Use Unsafe Rust?
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Rust; unsafe code; empirical study; Rust hypothesis
AB Rust's ownership type system enforces a strict discipline on how memory locations are accessed and shared. This discipline allows the compiler to statically prevent memory errors, data races, inadvertent side effects through aliasing, and other errors that frequently occur in conventional imperative programs. However, the restrictions imposed by Rust's type system make it difficult or impossible to implement certain designs, such as data structures that require aliasing (e.g. doubly-linked lists and shared caches). To work around this limitation, Rust allows code blocks to be declared as unsafe and thereby exempted from certain restrictions of the type system, for instance, to manipulate C-style raw pointers. Ensuring the safety of unsafe code is the responsibility of the programmer. However, an important assumption of the Rust language, which we dub the Rust hypothesis, is that programmers use Rust by following three main principles: use unsafe code sparingly, make it easy to review, and hide it behind a safe abstraction such that client code can be written in safe Rust.
   Understanding how Rust programmers use unsafe code and, in particular, whether the Rust hypothesis holds is essential for Rust developers and testers, language and library designers, as well as tool developers. This paper studies empirically how unsafe code is used in practice by analysing a large corpus of Rust projects to assess the validity of the Rust hypothesis and to classify the purpose of unsafe code. We identify queries that can be answered by automatically inspecting the program's source code, its intermediate representation MIR, as well as type information provided by the Rust compiler; we complement the results by manual code inspection. Our study supports the Rust hypothesis partially: While most unsafe code is simple and well-encapsulated, unsafe features are used extensively, especially for interoperability with other languages.
C1 [Astrauskas, Vytautas; Matheja, Christoph; Poli, Federico; Muller, Peter] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
   [Summers, Alexander J.] Univ British Columbia, Dept Comp Sci, Vancouver, BC, Canada.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; University of
   British Columbia
RP Astrauskas, V (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
EM vytautas.astrauskas@inf.ethz.ch; christoph.matheja@inf.ethz.ch;
   federico.poli@inf.ethz.ch; peter.mueller@inf.ethz.ch;
   alex.summers@ubc.ca
RI Matheja, Christoph/HZK-7338-2023
OI Matheja, Christoph/0000-0001-9151-0441; Poli,
   Federico/0000-0001-7709-1965
FU Swiss National Science Foundation (SNSF) [200021_169503]; Swiss National
   Science Foundation (SNF) [200021_169503] Funding Source: Swiss National
   Science Foundation (SNF)
FX This work was partially funded by the Swiss National Science Foundation
   (SNSF) under Grant No. 200021_169503.
CR Albini Pietro, 2020, RUSTWIDE LIB
   Astrauskas V, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360573
   Balasubramanian A, 2017, OPER SYST REV, V51, P94, DOI 10.1145/3139645.3139660
   Cameron Nick, 2019, RUST SYSTEMS PROGRAM
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Clebsch S., 2015, P 5 INT WORKSHOP PRO, P1, DOI DOI 10.1145/2824815.2824816
   Clippy developers, 2019, CLIPPY
   Code QL, 2020, WEBSITE CODE QL
   Compiler-builtins developers, 2020, SAF INTR
   Evans AN, 2020, PROC INT CONF SOFTW, P246
   Fuchsia Team, 2020, FUCHS DOC UNS COD RU
   Gjengset Jon, 2020, DEMYSTIFYING UNSAFE
   Gordon Colin Stebbins, 2014, VERIFYING CONCURRENT
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung Ralf, 2016, SCOPE UNSAFE
   Jung Ralf, 2020, IN PRESS
   Jupyter Team, 2020, JUPYTER PROJECT
   Klabnik S., 2019, RUST PROGRAMMING LAN
   Levy A, 2017, PROCEEDINGS OF THE 8TH ASIA-PACIFIC WORKSHOP ON SYSTEMS (APSYS '17), DOI 10.1145/3124680.3124717
   LLVM Team, 2020, LLVM AT INSTR CONC G
   Matsakis N.D., 2016, UNSAFE ABSTRACTIONS
   Matsakis Nicholas D., 2017, PROJECT IDEA DATALOG
   Mindermann K, 2018, 2018 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY (QRS 2018), P143, DOI 10.1109/QRS.2018.00028
   Muller Peter, 2002, LECT NOTES COMPUTER, V2262, DOI DOI 10.1007/3-540-45651-1
   Ozdemir Alex, 2016, UNSAFE RUST SYNTACTI
   Potanin Alex, 2013, 35 INT C SOFTW ENG I, DOI [10.1109/ICSE.2013.6606620, DOI 10.1109/ICSE.2013.6606620]
   Qin Boqin, 2020, P 41 ACM SIGPL INT C, DOI [10.1145/3385412, DOI 10.1145/3385412]
   Qrates Team, 2020, Qrates artefact, DOI 10.5281/zenodo.4085004
   Redox developers, 2019, SNIPP RED OS REP
   Reps T, 2003, COMPILER DESIGN HANDBOOK, P175
   Rust Language Team, 2019, RUST SURV 2019 RES
   Rust Team, 2020C RUST REF D MOD
   Rust Team, 2018, RUST REF
   Rust Team, 2019C CARG BOOK
   Rust Team, 2020E RUST REF S MOD
   Rust Team, 2019, MISS STAT SEC COD GR
   Rust Team, 2020, 2020D RUST REF MOD
   Rust Team, 2020B RUST DOC TRANS
   Rust Team, 2020A
   Rust Team, 2019, RUSTONOMICON
   The Libra Association, 2020, COR REP LIBR PROJ
   Unsafe Code Guidelines Working Group, 2020, PROJECT WEBSITE
NR 42
TC 22
Z9 26
U1 2
U2 10
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 136
DI 10.1145/3428204
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900013
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Avanzini, M
   Moser, G
   Schaper, M
AF Avanzini, Martin
   Moser, Georg
   Schaper, Michael
TI A Modular Cost Analysis for Probabilistic Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programs; average complexity; automation; modularity
ID TERMINATION
AB We present a novel methodology for the automated resource analysis of non-deterministic, probabilistic imperative programs, which gives rise to a modular approach. Program fragments are analysed in full independence. Moreover, the established results allow us to incorporate sampling from dynamic distributions, making our analysis applicable to a wider class of examples, for example the Coupon Collector's problem. We have implemented our contributions in the tool eco-imp, exploiting a constraint-solver over iterative refineable cost functions facilitated by off-the-shelf SMT solvers. We provide ample experimental evidence of the prototype's algorithmic power. Our experiments show that our tool runs typically at least one order of magnitude faster than comparable tools. On more involved examples, it may even be the case that execution times of seconds become milliseconds. At the same time we retain the precision of existing tools. The extensions in applicability and the greater efficiency of our prototype, yield scalability of sorts. This effects into a wider class of examples, whose expected cost analysis can be thus be performed fully automatically.
C1 [Avanzini, Martin] INRIA Sophia Antipolis, Valbonne, France.
   [Moser, Georg; Schaper, Michael] Univ Innsbruck, Innsbruck, Austria.
C3 University of Innsbruck
RP Avanzini, M (corresponding author), INRIA Sophia Antipolis, Valbonne, France.
EM martin.avanzini@inria.fr; georg.moser@uibk.ac.at;
   michael.schaper@student.uibk.ac.at
RI Moser, Georg/GSJ-3089-2022
OI Moser, Georg/0000-0001-9240-6128
FU Inria associated team TC(Pro)3; French ANR: lAgence National de
   Recherchez under Grant lPPS: Probabilistic Program Semanticsz
   [ANR-19-CE48-0014]; Agence Nationale de la Recherche (ANR)
   [ANR-19-CE48-0014] Funding Source: Agence Nationale de la Recherche
   (ANR)
FX This work is partially supported by the French ANR: lAgence National de
   Recherchez under Grant lPPS: Probabilistic Program Semanticsz, No.
   ANR-19-CE48-0014, and the Inria associated team TC(Pro)<SUP>3</SUP>.
CR Agrawal S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158122
   Albert E, 2019, LECT NOTES COMPUT SC, V11847, P63, DOI 10.1007/978-3-030-35092-5_5
   Alias C, 2010, LECT NOTES COMPUT SC, V6337, P117, DOI 10.1007/978-3-642-15769-1_8
   Avanzini M., 2020, WEIGHTED REWRITING
   Avanzini M, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785725
   Avanzini M, 2020, SCI COMPUT PROGRAM, V185, DOI 10.1016/j.scico.2019.102338
   Avanzini M, 2016, LECT NOTES COMPUT SC, V9636, P407, DOI 10.1007/978-3-662-49674-9_24
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Ben-Amram AM, 2019, LECT NOTES COMPUT SC, V11425, P80, DOI 10.1007/978-3-030-17127-8_5
   Ben-Amram AM, 2015, COMPUTABILITY, V4, P19, DOI 10.3233/COM-150032
   Ben-Amram AM, 2012, INT J FOUND COMPUT S, V23, P1451, DOI 10.1142/S0129054112400588
   Ben-Amram AM, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(3:04)2011
   Bournez O, 2005, LECT NOTES COMPUT SC, V3467, P323
   Brázdil T, 2015, J COMPUT SYST SCI, V81, P288, DOI 10.1016/j.jcss.2014.06.005
   Breuvart F, 2018, PPDP'18: PROCEEDINGS OF THE 20TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, DOI 10.1145/3236950.3236968
   Brockschmidt M, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2866575
   Brockschmidt Marc, 2014, TOOLS ALGORITHMS CON, V8413, P140
   Carbonneaux Q, 2015, ACM SIGPLAN NOTICES, V50, P467, DOI [10.1145/2813885.2737955, 10.1145/2737924.2737955]
   Celiku O, 2005, LECT NOTES COMPUT SC, V3582, P107
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chakarov A, 2014, LECT NOTES COMPUT SC, V8723, P85, DOI 10.1007/978-3-319-10936-7_6
   Chatterjee K, 2017, LECT NOTES COMPUT SC, V10426, P118, DOI 10.1007/978-3-319-63387-9_6
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   COHEN J, 1974, COMMUN ACM, V17, P301, DOI 10.1145/355616.361015
   Contejean E, 2005, J AUTOM REASONING, V34, P325, DOI 10.1007/s10817-005-9022-x
   Cousot P, 2002, LECT NOTES COMPUT SC, V2304, P159
   Dean J, 2008, COMMUN ACM, V51, P107, DOI 10.1145/1327452.1327492
   Dillig T, 2011, THESIS STANFORD U
   Esparza J, 2005, IEEE S LOG, P117
   Fiedor T, 2018, LECT NOTES COMPUT SC, V10747, P205, DOI 10.1007/978-3-319-73721-8_10
   Frohn Florian, 2017, Integrated Formal Methods. 13th International Conference, IFM 2017. Proceedings: LNCS 10510, P85, DOI 10.1007/978-3-319-66845-1_6
   Fuhs C, 2007, LECT NOTES COMPUT SC, V4501, P340
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   Gulwani S, 2006, ACM SIGPLAN NOTICES, V41, P376, DOI 10.1145/1133981.1134026
   Gulwani S, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P292, DOI 10.1145/1806596.1806630
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   HANDELMAN D, 1988, PAC J MATH, V132, P35, DOI 10.2140/pjm.1988.132.35
   Hill MD, 2008, COMPUTER, V41, P33, DOI 10.1109/MC.2008.209
   Hirokawa N, 2008, LECT NOTES ARTIF INT, V5195, P364, DOI 10.1007/978-3-540-71070-7_32
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Jones ND, 2009, ACM T COMPUT LOG, V10, DOI 10.1145/1555746.1555752
   Kaminski BL, 2018, J ACM, V65, DOI 10.1145/3208102
   Kaminski BL, 2017, IEEE S LOG
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   Kaminski BL, 2015, LECT NOTES COMPUT SC, V9234, P307, DOI 10.1007/978-3-662-48057-1_24
   Katoen JP, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P31, DOI 10.1145/2933575.2934574
   Katoen JP, 2010, LECT NOTES COMPUT SC, V6337, P390, DOI 10.1007/978-3-642-15769-1_24
   KIM CH, 1989, IEEE T COMPUT, V38, P250, DOI 10.1109/12.16501
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Levitin A., 2007, The design and analysis of algorithms, V2nd
   McIver A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158121
   Menascé DA, 2004, IEEE INTERNET COMPUT, V8, P90, DOI 10.1109/MIC.2004.1260710
   Mitzenmacher Michael, 2017, PROBABILITY COMPUTIN
   Monniaux D, 2001, LECT NOTES COMPUT SC, V2126, P111
   Moser G, 2018, INFORM COMPUT, V261, P116, DOI 10.1016/j.ic.2018.05.007
   Olmedo F, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P672, DOI 10.1145/2933575.2935317
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   Sedgewick R., 1996, INTRO ANAL ALGORITHM, DOI [10.1142/10875, DOI 10.1142/10875]
   Sinn M, 2017, J AUTOM REASONING, V59, P3, DOI 10.1007/s10817-016-9402-4
   Sinn M, 2014, LECT NOTES COMPUT SC, V8559, P745, DOI 10.1007/978-3-319-08867-9_50
   Takisaka T, 2018, LECT NOTES COMPUT SC, V11138, P476, DOI 10.1007/978-3-030-01090-4_28
   Ngo VC, 2018, ACM SIGPLAN NOTICES, V53, P496, DOI [10.1145/3192366.3192394, 10.1145/3296979.3192394]
   Ngo VC, 2017, P IEEE S SECUR PRIV, P710, DOI 10.1109/SP.2017.53
   Wang D, 2018, ACM SIGPLAN NOTICES, V53, P513, DOI 10.1145/3192366.3192408
   Wang PX, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P204, DOI 10.1145/3314221.3314581
   WEGBREIT B, 1976, J ACM, V23, P691, DOI 10.1145/321978.321987
   WEGBREIT B, 1975, COMMUN ACM, V18, P528, DOI 10.1145/361002.361016
   Wilhelm R, 2014, COMMUN ACM, V57, P94, DOI 10.1145/2500886
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
   Winskel G, 1993, FORMAL SEMANTICS PRO, DOI [10.7551/mitpress/3054.003.0004, DOI 10.7551/MITPRESS/3054.003.0004]
NR 72
TC 13
Z9 13
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 172
DI 10.1145/3428240
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900049
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Coblenz, M
   Aldrich, J
   Myers, BA
   Sunshine, J
AF Coblenz, Michael
   Aldrich, Jonathan
   Myers, Brad A.
   Sunshine, Joshua
TI Can Advanced Type Systems Be Usable? An Empirical Study of Ownership,
   Assets, and Typestate in Obsidian
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE typestate; linear types; ownership; assets; permissions; blockchain;
   smart contracts; empirical studies of programming languages
AB Some blockchain programs (smart contracts) have included serious security vulnerabilities. Obsidian is a new typestate-oriented programming language that uses a strong type system to rule out some of these vulnerabilities. Although Obsidian was designed to promote usability to make it as easy as possible to write programs, strong type systems can cause a language to be difficult to use. In particular, ownership, typestate, and assets, which Obsidian uses to provide safety guarantees, have not seen broad adoption together in popular languages and result in significant usability challenges. We performed an empirical study with 20 participants comparing Obsidian to Solidity, which is the language most commonly used for writing smart contracts today. We observed that Obsidian participants were able to successfully complete more of the programming tasks than the Solidity participants. We also found that the Solidity participants commonly inserted asset-related bugs, which Obsidian detects at compile time.
C1 [Coblenz, Michael] Carnegie Mellon Univ, Comp Sci Dept, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
   [Aldrich, Jonathan; Sunshine, Joshua] Carnegie Mellon Univ, Inst Software Res, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
   [Myers, Brad A.] Carnegie Mellon Univ, Human Comp Interact Inst, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University; Carnegie Mellon University; Carnegie Mellon
   University
RP Coblenz, M (corresponding author), Carnegie Mellon Univ, Comp Sci Dept, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
EM mcoblenz@cs.cmu.edu; jonathan.aldrich@cs.cmu.edu; bam@cs.cmu.edu;
   joshua.sunshine@cs.cmu.edu
RI Coblenz, Michael/Y-8910-2019
OI Coblenz, Michael/0000-0002-9369-4069; Sunshine,
   Joshua/0000-0002-9672-5297; Aldrich, Jonathan/0000-0003-0631-5591;
   Myers, Brad/0000-0002-4769-0219
FU National Security Agency Department of Defense [H9823018D0008]; National
   Science Foundation [CNS1423054, CCF1901033]; United States Air Force
   Ofce of Scientifc Research award [FA8702-15-D-0002]; IBM PhD Fellowship
   awards; Ripple
FX This research was sponsored by the National Security Agency Department
   of Defense award H9823018D0008; by the National Science Foundation
   awards CNS1423054 and CCF1901033; by the United States Air Force Ofce of
   Scientifc Research award FA8702-15-D-0002; by two IBM PhD Fellowship
   awards; and by Ripple. The views and conclusions contained in this
   document are those of the author and should not be interpreted as
   representing the ofcial policies, either expressed or implied, of any
   sponsoring institution, the U.S. government or any other entity.
CR Acar Y, 2017, PROCEEDINGS OF THIRTEENTH SYMPOSIUM ON USABLE PRIVACY AND SECURITY (SOUPS 2017), P81
   Aldrich J., 2009, OOPSLA COMPANION, P1015, DOI DOI 10.1145/1639950
   Becker Brett A., 2019, WORKING GROUP REPORT
   Bierhoff K, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P301
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Coblenz M, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3417516
   Coblenz M, 2019, 2019 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB 2019), P48, DOI 10.1109/WETSEB.2019.00013
   Coblenz M, 2018, ONWARD!'18: PROCEEDINGS OF THE 2018 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE, P133, DOI 10.1145/3276954.3276965
   Coblenz M, 2017, PROC INT CONF SOFTW, P496, DOI 10.1109/ICSE.2017.52
   Coblenz Michael, 2019, ARXIV191204719
   Coblenz Michael, 2020, OBSIDIAN VS SOLIDITY, DOI [10.1184/R1/12771074.v1, DOI 10.1184/R1/12771074.V1]
   Czerwonka J, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P27, DOI 10.1109/ICSE.2015.131
   Das Ankush, 2019, ARXIV190206056CSPL
   DeLine R, 2004, LECT NOTES COMPUT SC, V3086, P465
   Delmolino K, 2016, LECT NOTES COMPUT SC, V9604, P79, DOI 10.1007/978-3-662-53357-4_6
   Drossopoulou S, 2002, ACM T PROGR LANG SYS, V24, P153, DOI 10.1145/514952.514955
   Emin Gun Sirer, 2016, HACKING DISTRIBUTED
   Ethereum Foundation, 2020, SOL
   Ethereum Foundation, 2020, SIMPL OP AUCT
   Ethereum Foundation, 2020, STAT MACH
   Ethereum Foundation, 2020, WITHDR CONTR
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Graham Luke, 2017, CNBC
   Hanenberg S, 2014, EMPIR SOFTW ENG, V19, P1335, DOI 10.1007/s10664-013-9289-1
   Houston DJ, 2007, SOC SCI QUART, V88, P913, DOI 10.1111/j.1540-6237.2007.00510.x
   Kadena, 2019, PACT
   Linux Foundation, 2020, HYP
   Linux Foundation, 2020, HYP FABR
   Meijer Erik., 2004, Static typing where possible, dynamic typing when needed: The end of the cold war between programming languages
   Mozilla Research, 2015, RUST PROGR LANG
   Oracle Corp, 2019, SEC COD GUID JAV SE
   Pane JF, 2002, IEEE 2002 SYMPOSIA ON HUMAN CENTRIC COMPUTING LANGUAGES AND ENVIRONMENTS, PROCEEDINGS, P198, DOI 10.1109/HCC.2002.1046372
   Pankratius V, 2014, THEOR COMPUT SYST, V55, P555, DOI 10.1007/s00224-013-9452-5
   Pinna A, 2019, IEEE ACCESS, V7, P78194, DOI 10.1109/ACCESS.2019.2921936
   Sadler C., 1996, Software Engineering Notes, V21, P11, DOI 10.1145/235969.235972
   Schrans F., 2019, ARXIV190406534
   Seacord R., 2013, Secure Coding in C and C++, V2nd
   Sergey I, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360611
   Stack Overflow, 2019, 2019 CIT MOB SURV RE
   Stefik A., 2014, P 2014 ACM INT S NEW, P283
   Stefik A, 2013, ACM T COMPUT EDUC, V13, DOI 10.1145/2534973
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Sunshine Joshua., 2014, EUROPEAN C OBJECT OR, DOI DOI 10.1007/978-3-662-44202-9_7
   Szabo N., 1997, First Monday, V2
   The Ethereum Foundation, 2020, ETH PROJ
   The Rust Project Developers, 2017, WHAT IS OWN 2017
   The University of Glasgow, 2001, SYST IO UNS
   Uesbeck PM, 2016, PROC INT CONF SOFTW, P760, DOI 10.1145/2884781.2884849
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
   Yegulalp Serdar., 2018, RUST LANGUAGE IS TOO
NR 50
TC 5
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 132
DI 10.1145/3428200
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900009
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Liu, HY
   Silvestro, S
   Zhang, XY
   Huang, J
   Liu, TP
AF Liu, Hongyu
   Silvestro, Sam
   Zhang, Xiangyu
   Huang, Jian
   Liu, Tongping
TI WATCHER: In-Situ Failure Diagnosis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE In-Situ Diagnosis; Failure Diagnosis; Root Cause Analysis
AB Diagnosing software failures is important but notoriously challenging. Existing work either requires extensive manual effort, imposing a serious privacy concern (for in-production systems), or cannot report sufficient information for bug fixes. This paper presents a novel diagnosis system, named WATCHER, that can pinpoint root causes of program failures within the failing process ("in-situ"), eliminating the privacy concern. It combines identical record-and-replay, binary analysis, dynamic analysis, and hardware support together to perform the diagnosis without human involvement. It further proposes two optimizations to reduce the diagnosis time and diagnose failures with control flow hijacks. WATCHER can be easily deployed, without requiring custom hardware or operating system, program modification, or recompilation. We evaluate WATCHER with 24 program failures in real-world deployed software, including large-scale applications, such as Memcached, SQLite, and OpenJPEG. Experimental results show that WATCHER can accurately identify the root causes in only a few seconds.
C1 [Liu, Hongyu; Zhang, Xiangyu] Purdue Univ, W Lafayette, IN 47907 USA.
   [Liu, Hongyu; Silvestro, Sam; Liu, Tongping] Univ Texas San Antonio, San Antonio, TX USA.
   [Huang, Jian] Univ Illinois, Urbana, IL USA.
   [Liu, Tongping] Univ Massachusetts Amherst, Amherst, MA USA.
C3 Purdue University System; Purdue University; University of Texas System;
   University of Texas at San Antonio (UTSA); University of Illinois
   System; University of Illinois Urbana-Champaign; University of
   Massachusetts System; University of Massachusetts Amherst
RP Liu, HY (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM liu2978@purdue.edu; sam.silvestro@utsa.edu; xyzhang@cs.purdue.edu;
   jianh@illinois.edu; tongping@umass.edu
RI Liu, Tongping/D-5861-2017; Zhang, Xiangyu/H-9255-2013
OI Zhang, Xiangyu/0000-0003-0876-6783
FU National Science Foundation [CCF-1566154, CCF-1823004, CCF-2024253,
   CCF-1919044, CCF-1901242, CCF-1910300]; ONR [N000141712045,
   N000141410468, N000141712947]; IARPA TrojAI [W911NF-19-S-0012]; Sandia
   National Lab [1701331]; Mozilla Research Grant; UMass
FX We thank anonymous reviewers and Shan Lu, Xu Liu and Wei Wang for their
   helpful comments on improving this paper. This material is based upon
   work supported by the National Science Foundation under Award
   CCF-1566154, CCF-1823004, CCF-2024253, CCF-1919044, CCF-1901242, and
   CCF-1910300. This research is also supported, in part by ONR
   N000141712045, N000141410468 and N000141712947, IARPA TrojAI
   W911NF-19-S-0012, and Sandia National Lab under award 1701331. The work
   is partially supported by Mozilla Research Grant and UMass Start-up
   Package as well. Any opinions, findings, and conclusions or
   recommendations expressed in this material are those of the author(s)
   and do not necessarily reflect the views of the National Science
   Foundation.
CR Alted F, 2010, COMPUT SCI ENG, V12, P68, DOI 10.1109/MCSE.2010.51
   [Anonymous], 2008, CAV WORKSH EXPL CONC
   [Anonymous], 2011, Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineering (FSE'11), DOI [10.1145/2025113.2025121, DOI 10.1145/2025113.2025121]
   [Anonymous], 2001, software focus
   Arnold M, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P143
   Bell J, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P362, DOI 10.1109/ICSE.2013.6606582
   Berger ED, 2000, ACM SIGPLAN NOTICES, V35, P117, DOI 10.1145/384264.379232
   Bond MD, 2007, ACM SIGPLAN NOTICES, V42, P405, DOI 10.1145/1297105.1297057
   Bower FA, 2005, INT SYMP MICROARCH, P197
   Choi JD, 2002, ACM SIGPLAN NOTICES, V37, P258, DOI 10.1145/543552.512560
   Cui WD, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P17
   Cui WD, 2016, PROC INT CONF SOFTW, P820, DOI 10.1145/2884781.2884844
   Feng Qin, 2007, ACM Transactions on Computer Systems, V25, P7, DOI 10.1145/1275517.1275519
   Flanagan C, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P121, DOI 10.1145/1542476.1542490
   Freyja, 2017, MUCH COULD SOFTW ERR
   Glerum K, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P103
   Godefroid Patrice., 2008, Concurrency at microsoft - an exploratory survey
   Huang J, 2013, ACM SIGPLAN NOTICES, V48, P141, DOI 10.1145/2499370.2462167
   Intel, 2017, INT XED
   Jin Guoliang, 2010, INT C OBJ OR PROGR S, DOI DOI 10.1145/1932682.1869481
   Joshi P, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P110, DOI 10.1145/1542476.1542489
   Kasikci B, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P582, DOI 10.1145/3132747.3132767
   Kasikci B, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P344, DOI 10.1145/2815400.2815412
   King ST, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK: 2005 UNENIX ANNUAL TECHNICAL CONFERENCE, P1
   KOREL B, 1988, INFORM PROCESS LETT, V29, P155, DOI 10.1016/0020-0190(88)90054-3
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Liu HY, 2018, ACM SIGPLAN NOTICES, V53, P344, DOI 10.1145/3192366.3192380
   Lu Shan, 2005, P WORKSH EV SOFTW DE
   Lu Shan., 2007, P 6 JOINT M EUROPEAN, P533
   Machado N, 2015, ACM SIGPLAN NOTICES, V50, P586, DOI [10.1145/2813885.2737973, 10.1145/2737924.2737973]
   Mashtizadeh AJ, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P693, DOI 10.1145/3037697.3037751
   Musuvathi M., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, P267
   Nguyen H., 2014, 2014 USENIX ANN TECH, P269
   Quora, 2015, WHAT IS CODERS WORST
   Sahoo S. K., 2011, 2010 32nd International Conference on Software Engineering (ICSE), P485, DOI 10.1145/1806799.1806870
   Sahoo SK, 2013, ACM SIGPLAN NOTICES, V48, P139, DOI 10.1145/2499368.2451131
   Sanchez-Stern A, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P256, DOI [10.1145/3192366.3192411, 10.1145/3296979.3192411]
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   Serebryany K., 2012, USENIX ATC 2012, P309
   Szekeres L, 2013, P IEEE S SECUR PRIV, P48, DOI 10.1109/SP.2013.13
   Tucek Joseph, 2007, Operating Systems Review, V41, P131, DOI 10.1145/1323293.1294275
   Wilson P.F., 1993, ROOT CAUSE ANAL TOOL
   Xu J., 2016, P ACM SIGSAC C COMP, P529
   Xu J, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P17
   YanWang Harish Patil, 2014, P ANN IEEE ACM INT S, DOI [10.1145/2544137.2544152, DOI 10.1145/2581122.2544152]
   Yu TT, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P694, DOI 10.1145/3106237.3106266
   ZadYree, 2011, UNR 3 9 3 LOC STACK
   Zhang T, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P149, DOI 10.1145/3037697.3037708
   Zhang YL, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P131, DOI 10.1145/3341301.3359650
   Zhang ZG, 2003, PROC INT CONF SOFTW, P319
NR 50
TC 0
Z9 0
U1 1
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 143
DI 10.1145/3428211
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900020
OA gold
DA 2024-07-18
ER

PT J
AU Wu, ZF
   Sun, Z
   Gong, K
   Chen, LY
   Liao, B
   Jin, YH
AF Wu, Zhefeng
   Sun, Zhe
   Gong, Kai
   Chen, Lingyun
   Liao, Bin
   Jin, Yihua
TI Hidden Inheritance: An Inline Caching Design for TypeScript Performance
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE TypeScript; AOTC; JITC; JavaScript; STSC; Hidden Classes; Inline Caches
AB TypeScript is a dynamically typed language widely used to develop large-scale applications nowadays. These applications are usually designed with complex class or interface hierarchies and have highly polymorphic behaviors. These object-oriented (OO) features will lead to inefficient inline caches (ICs) or trigger deoptimizations, which impact the performance of TypeScript applications.
   To address this problem, we introduce an inline caching design called hidden inheritance (HI). The basic idea of HI is to cache the static information of class or interface hierarchies into hidden classes, which are leveraged to generate efficient inline caches for improving the performance of OO-style TypeScript programs. The HI design is implemented in a TypeScript engine STSC (Static TypeScript Compiler) including a static compiler and a runtime system. STSC statically generates hidden classes and enhanced inline caches, which are applied to generate specialized machine code via ahead-of-time compilation (AOTC) or just-in-time compilation (JITC). To evaluate the efficiency of this technique, we implement STSC on a state-of-the-art JavaScript virtual machine V8 and demonstrate its performance improvements on industrial benchmarks and applications.
C1 [Wu, Zhefeng; Sun, Zhe; Gong, Kai; Chen, Lingyun; Liao, Bin; Jin, Yihua] Alibaba Grp, Hangzhou, Peoples R China.
C3 Alibaba Group
RP Wu, ZF (corresponding author), Alibaba Grp, Hangzhou, Peoples R China.
EM zhefeng.wu@alibaba-inc.com; zhe.sunz@alibaba-inc.com;
   kai.gong@alibaba-inc.com; lingyun.cly@alibaba-inc.com;
   bin.liao@alibaba-inc.com; yihua.jyh@alibaba-inc.com
CR Angular2, 2017, GOOGL ANG JS FRAM
   Apple, 2018, JAVASCRIPTCORE
   Artoul, 2015, JAV HIDD CLASS INL C
   Ball T, 2019, PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON MANAGED PROGRAMMING LANGUAGES AND RUNTIMES (MPLR '19), P105, DOI 10.1145/3357390.3361032
   BenFrederickson, 2015, RANKING
   Bevenius, 2018, LEARN GOOGL V8
   Castanos J, 2012, ACM SIGPLAN NOTICES, V47, P195, DOI 10.1145/2398857.2384631
   CHAMBERS C, 1989, SIGPLAN NOTICES, V24, P49, DOI 10.1145/74878.74884
   Choi J, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P889, DOI 10.1145/3314221.3314587
   CLICK C, 1995, SIGPLAN NOTICES, V30, P35, DOI 10.1145/202530.202534
   Click Cliff, 2002, P 2002 JOINT ACMISCO, P96, DOI DOI 10.1145/583810.583821
   Clifford D, 2015, ACM SIGPLAN NOTICES, V50, P105, DOI 10.1145/2754169.2754181
   Deutsch PeterL., 1984, Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles of Programming Languages, POPL '84, P297, DOI [10.1145/800017.800542, DOI 10.1145/800017.800542]
   Egret-3d, 2017, EGR 3D GAM ENG
   Facebook, 2013, REACT JS FRAM
   Google, 2015, COD CACH
   Google-V8, 2019, V8 JAVASCRIPT ENG
   HOLZLE U, 1991, LECT NOTES COMPUT SC, V512, P21
   Microsoft, 2020, MICR VIS STUD COD OP
   Microsoft, 2014, TYPESCRIPT SPEC
   Microsoft, 2018, CHAKRACORE
   NativeScript, 2017, NATIVESCRIPT FRAM NA
   Park HyukWoo, 2017, P 2017 INT C COMP AR
   Richards G., 2015, P ECOOP
   Richards G, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P1, DOI 10.1145/1806596.1806598
   Serrano M, 2019, PROCEEDINGS OF THE 28TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '19), P99, DOI 10.1145/3302516.3307344
   Serrano M, 2018, DLS'18: PROCEEDINGS OF THE 14TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES, P50, DOI 10.1145/3276945.3276950
   Stackoverflow, 2017, PROGRAMMING LANGUAGE
   Tiobe, 2020, PROGRAMMING LANGUAGE
   Vue.js, 2019, VUEJS FRAM
   WebKit, 2019, JETSTREAM2 BENCHM
NR 31
TC 1
Z9 1
U1 2
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 174
DI 10.1145/3428242
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900051
OA gold
DA 2024-07-18
ER

PT J
AU Zhang, YZ
   Salvaneschi, G
   Myers, AC
AF Zhang, Yizhou
   Salvaneschi, Guido
   Myers, Andrew C.
TI Handling Bidirectional Control Flow
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Effect handlers; type systems; promises; iterators; exceptions;
   parametricity
AB Pressed by the difficulty of writing asynchronous, event-driven code, mainstream languages have recently been building in support for a variety of advanced control-flow features. Meanwhile, experimental language designs have suggested effect handlers as a unifying solution to programmer-defined control effects, subsuming exceptions, generators, and async await. However, despite these trends, complex control flow in particular, control flow that exhibits a bidirectional pattern-remains challenging to manage.
   We introduce bidirectional algebraic effects, a new programming abstraction that supports bidirectional control transfer in a more natural way. Handlers of bidirectional effects can raise further effects to transfer control back to the site where the initiating effect was raised, and can use themselves to handle their own effects. We present applications of this expressive power, which falls out naturally as we push toward the unification of effectful programming with object-oriented programming. We pin down the mechanism and the unification formally using a core language that makes generalizations to effect operations and effect handlers.
   The usual propagation semantics of control effects such as exceptions conflicts with modular reasoning in the presence of effect polymorphism-it breaks parametricity. Bidirectionality exacerbates the problem. Hence, we set out to show the core language, which builds on the existing tunneling semantics for algebraic effects, is not only type-safe (no effects go unhandled), but also abstraction-safe (no effects are accidentally handled). We devise a step-indexed logical-relations model, and construct its parametricity and soundness proofs. These core results are fully mechanized in Coq. While a full-featured compiler is left to future work, experiments show that as a first-class language feature, bidirectional handlers can be implemented efficiently.
C1 [Zhang, Yizhou] Univ Waterloo, Cheriton Sch Comp Sci, 200 Univ Ave West, Waterloo, ON N2L 3G1, Canada.
   [Salvaneschi, Guido] Univ St Gallen, Rosenbergstr 51, CH-9000 St Gallen, Switzerland.
   [Myers, Andrew C.] Cornell Univ, Dept Comp Sci, Gates Hall, Ithaca, NY 14853 USA.
C3 University of Waterloo; University of St Gallen; Cornell University
RP Zhang, YZ (corresponding author), Univ Waterloo, Cheriton Sch Comp Sci, 200 Univ Ave West, Waterloo, ON N2L 3G1, Canada.
EM yizhou@uwaterloo.ca; guido.salvaneschi@unisg.ch; andru@cs.cornell.edu
OI Salvaneschi, Guido/0000-0002-9324-8894; Zhang,
   Yizhou/0000-0002-8206-4694
FU NASA [NNX16AB09G]; NASA [NNX16AB09G, 907944] Funding Source: Federal
   RePORTER
FX This work was supported by NASA grant NNX16AB09G. The views and opinions
   expressed are those of the authors and do not necessarily reflect the
   position of any government agency.
CR Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Alimadadi S., 2018, P ACM PROGRAMMING LA
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Asai K, 2007, LECT NOTES COMPUT SC, V4807, P239
   Aydemir B, 2008, ACM SIGPLAN NOTICES, V43, P3, DOI 10.1145/1328897.1328443
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Bierman G., 2012, 26 EUR C OBJ OR PROG
   Biernacki D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158096
   Biernacki D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290319
   Biernacki D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371116
   Bracevac O, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236762
   Brachthäuser JI, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000027
   Brachthauser J. I., 2018, P ACM PROGRAMMING LA
   Buhr P. A., 2019, MUC ANNODATED REFERE
   Cabral B, 2007, IET SOFTW, V1, P233, DOI 10.1049/iet-sen:20070017
   Convent L, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000039
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Dolan Stephen, 2017, P S TRENDS FUNCT PRO, DOI DOI 10.1007/978-3-319-89719-6_6
   Dreyer D., 2018, 45 ACM S PRINC PROGR
   Dreyer D, 2009, IEEE S LOG, P71, DOI 10.1109/LICS.2009.34
   ECMA International, 2018, 262 ECMA
   Felleisen M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P180, DOI 10.1145/73560.73576
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   Forster Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110257
   Fowler S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290341
   Gosling J., 2018, JAVA LANGUAGE SPECIF
   GRISWOLD RE, 1981, ACM T PROGR LANG SYS, V3, P144, DOI 10.1145/357133.357136
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Gunter C. A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P12, DOI 10.1145/224164.224173
   HAYNES CT, 1986, COMPUT LANG, V11, P143, DOI 10.1016/0096-0551(86)90007-X
   Hejlsberg A., 2003, The C# Programming Language
   Hillerström D, 2018, LECT NOTES COMPUT SC, V11275, P415, DOI 10.1007/978-3-030-02768-1_22
   Honda K., 1999, EUR S PROGR
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Klabnik S., 2019, RUST PROGRAMMING LAN
   Lattner C., 2019, ASYNCAWAIT SWIFT
   Leijen Daan, 2017, Programming Languages and Systems. 15th Asian Symposium, APLAS 2017. Proceedings: LNCS 10695, P339, DOI 10.1007/978-3-319-71237-6_17
   Leijen D, 2017, PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE' 17), P16, DOI 10.1145/3122975.3122977
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Liskov B., 1988, SIGPLAN Notices, V23, P260, DOI 10.1145/960116.54016
   LISKOV B, 1977, COMMUN ACM, V20, P564, DOI 10.1145/359763.359789
   Liu J, 2006, ACM SIGPLAN NOTICES, V41, P283, DOI 10.1145/1111320.1111063
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   Mitchell J. G., 1979, CSL793 XER RES CTR
   Morris James Hiram, 1968, Ph.D. thesis
   Murer S, 1996, ACM T PROGR LANG SYS, V18, P1, DOI 10.1145/225540.225541
   Okur S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1117, DOI 10.1145/2568225.2568309
   Pirog M., 2019, 4 INT C FORM STRUCT
   Pitts Andrew, 1998, Higher Order Operational Techniques in Semantics, P227
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Polesiuk P., 2017, 3 INT WORKSH COQ PRO
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Rust language team, 2018, AS AW RUST FULL PROP
   SHAW M, 1977, COMMUN ACM, V20, P553, DOI 10.1145/359763.359782
   Stroustrup Bjame., 1987, The C++ programming language
   Thomas D., 2004, PROGRAMMING RUBY PRA, V2
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Van Rossum G, 2003, Python Language Reference Manual
   WAND M, 1991, INFORM COMPUT, V93, P1, DOI 10.1016/0890-5401(91)90050-C
   Zhang Y., 2020, HANDLING BIDIRECTION
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
   Zhang YZ, 2016, ACM SIGPLAN NOTICES, V51, P281, DOI [10.1145/2908080.2908086, 10.1145/2980983.2908086]
NR 67
TC 3
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 139
DI 10.1145/3428207
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900016
OA gold
DA 2024-07-18
ER

PT J
AU Abel, A
   Bernardy, JP
AF Abel, Andreas
   Bernardy, Jean-Philippe
TI A Unified View of Modalities in Type Systems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE linear types; modal logic; subtyping
AB We propose to unify the treatment of a broad range of modalities in typed lambda calculi. We do so by defining a generic structure of modalities, and show that this structure arises naturally from the structure of intuitionistic logic, and as such finds instances in a wide range of type systems previously described in literature. Despite this generality, this structure has a rich metatheory, which we expose.
C1 [Abel, Andreas] Gothenburg Univ, Dept Comp Sci & Engn, Rannvagen 6b, S-41296 Gothenburg, Sweden.
   [Bernardy, Jean-Philippe] Gothenburg Univ, Dept Philosophy Linguist & Theory Sci, Box 100, SE-40530 Gothenburg, Sweden.
C3 University of Gothenburg; University of Gothenburg
RP Abel, A (corresponding author), Gothenburg Univ, Dept Comp Sci & Engn, Rannvagen 6b, S-41296 Gothenburg, Sweden.
EM andreas.abel@gu.se; jean-philippe.bernardy@gu.se
FU Swedish Research Council (Vetenskapsradet) [621-2014-4864, 2014-39];
   Centre for Linguistic Theory and Studies in Probability (CLASP) in the
   Department of Philosophy, Linguistics, and Theory of Science at the
   University of Gothenburg
FX This material is based upon work supported by the Swedish Research
   Council (Vetenskapsradet) under Grants No. 621-2014-4864 Termination
   Certificates for Dependently-Typed Programs and Proofs via Refinement
   Types, and No. 2014-39, which funds the Centre for Linguistic Theory and
   Studies in Probability (CLASP) in the Department of Philosophy,
   Linguistics, and Theory of Science at the University of Gothenburg.
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   ALGEHED M, 2019, 32 IEEE COMP SEC FDN, DOI DOI 10.1109/CSF.2019.00008
   Algehed M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341693
   Algehed M, 2018, PLAS'18: PROCEEDINGS OF THE 13TH WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY, P24, DOI 10.1145/3264820.3264823
   ALLAIS G, 2018, P ACM PROGRAMMING LA, DOI DOI 10.1145/3236785
   [Anonymous], 1992, Handbook of Logic in Computer Science
   [Anonymous], 1989, FPCA 1989, DOI DOI 10.1145/99370.99404
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Benton N, 2012, J AUTOM REASONING, V49, P141, DOI 10.1007/s10817-011-9219-0
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Bezem Marc, 2019, 25 INT C TYP PROOFS
   BOHM C, 1985, THEOR COMPUT SCI, V39, P135, DOI 10.1016/0304-3975(85)90135-5
   Bowman WJ, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P101, DOI 10.1145/2784731.2784733
   Brunel A, 2014, LECT NOTES COMPUT SC, V8410, P351
   DALLAGO U, 2009, P LECT NOTES COMPUTE, V5608, DOI DOI 10.1007/978-3-642-02273-9_8
   Ebadi H, 2015, ACM SIGPLAN NOTICES, V50, P69, DOI [10.1145/2676726.2677005, 10.1145/2775051.2677005]
   Gaboardi M, 2016, ACM SIGPLAN NOTICES, V51, P476, DOI 10.1145/3022670.2951939
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Ghica DR, 2014, LECT NOTES COMPUT SC, V8410, P331
   GIRARD JY, 1992, THEOR COMPUT SCI, V97, P1, DOI 10.1016/0304-3975(92)90386-T
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Hasegawa R., 1994, Mathematical Structures in Computer Science, V4, P71, DOI 10.1017/S0960129500000372
   Kavvos GA, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290333
   Lambek J., 1958, American Mathematical Monthly, V65, P154, DOI [DOI 10.1080/00029890.1958.11989160, 10.2307/2310058]
   Launchbury J., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P144, DOI 10.1145/158511.158618
   McBride Conor, 2016, LNCS, P207, DOI DOI 10.1007/978-3-319-30936-1
   MURPHY T, 2005, COMP SCI LOG 19 INT, DOI DOI 10.1007/11538363_6
   Orchard D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341714
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   Pfenning F, 2001, IEEE S LOG, P221, DOI 10.1109/LICS.2001.932499
   Pierce, 2005, ADV TOPICS TYPES PRO
   Polakow J, 1999, LECT NOTES COMPUT SC, V1581, P295
   Reed J, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P157
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Tse S, 2004, ACM SIGPLAN NOTICES, V39, P115, DOI 10.1145/1016848.1016868
   Wood James., 2018, 3 WORKSH TYP DRIV DE
   Zhong Shao, 2014, P LECT NOTES COMPUTE, V8410, DOI [10.1007/978-3-642-54833-8, DOI 10.1007/978-3-642-54833-8]
NR 38
TC 16
Z9 17
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 90
DI 10.1145/3408972
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700004
OA gold
DA 2024-07-18
ER

PT J
AU Choudhury, V
   Krishnaswami, N
AF Choudhury, Vikraman
   Krishnaswami, Neel
TI Recovering Purity with Comonads and Capabilities
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE modal type theory; comonads; categorical semantics; capabilities;
   effects
ID CALCULUS
AB In this paper, we take a pervasively effectful (in the style of ML) typed lambda calculus, and show how to extend it to permit capturing pure expressions with types. Our key observation is that, just as the pure simply-typed lambda calculus can be extended to support effects with a monadic type discipline, an impure typed lambda calculus can be extended to support purity with a comonadic type discipline.
   We establish the correctness of our type system via a simple denotational model, which we call the capability space model. Our model formalises the intuition common to systems programmers that the ability to perform effects should be controlled via access to a permission or capability, and that a program is capability-safe if it performs no effects that it does not have a runtime capability for. We then identify the axiomatic categorical structure that the capability space model validates, and use these axioms to give a categorical semantics for our comonadic type system. We then give an equational theory (substitution and the call-by-value beta and eta laws) for the imperative lambda calculus, and show its soundness relative to this semantics.
   Finally, we give a translation of the pure simply-typed lambda calculus into our comonadic imperative calculus, and show that any two terms which are beta eta-equal in the STLC are equal in the equational theory of the comonadic calculus, establishing that pure programs can be mapped in an equation-preserving way into our imperative calculus.
C1 [Choudhury, Vikraman] Indiana Univ, Dept Comp Sci, Bloomington, IN 47408 USA.
   [Choudhury, Vikraman; Krishnaswami, Neel] Univ Cambridge, Dept Comp Sci & Technol, Cambridge CB3 0FD, England.
C3 Indiana University System; Indiana University Bloomington; University of
   Cambridge
RP Choudhury, V (corresponding author), Indiana Univ, Dept Comp Sci, Bloomington, IN 47408 USA.; Choudhury, V (corresponding author), Univ Cambridge, Dept Comp Sci & Technol, Cambridge CB3 0FD, England.
EM vikraman@indiana.edu; nk480@cl.cam.ac.uk
OI Choudhury, Vikraman/0000-0003-2030-8056
CR Alechina N., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P292
   [Anonymous], 1984, Capability-Based Computer Systems
   [Anonymous], 1948, J. Symb. Log., DOI DOI 10.2307/2268135
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Brunel A, 2014, LECT NOTES COMPUT SC, V8410, P351
   Clouston R, 2018, LECT NOTES COMPUT SC, V10803, P258, DOI 10.1007/978-3-319-89366-2_14
   Crary K., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P262, DOI 10.1145/292540.292564
   Dal Lago U, 2009, LECT NOTES COMPUT SC, V5608, P80, DOI 10.1007/978-3-642-02273-9_8
   Danielsson NA, 2006, ACM SIGPLAN NOTICES, V41, P206, DOI 10.1145/1111320.1111056
   DENNIS JB, 1966, COMMUN ACM, V9, P143, DOI 10.1145/365230.365252
   Dodds M, 2009, LECT NOTES COMPUT SC, V5502, P363, DOI 10.1007/978-3-642-00590-9_26
   Gibbons J, 2002, LECT NOTES COMPUT SC, V2297, P149
   Gifford DK, 1986, P 1986 ACM C LISP FU, P28, DOI DOI 10.1145/319838.319848
   Girard Jean-Yves, 1989, PROOFS TYPES, P217, DOI [10.1007/978-1-4612-2822-6_8, DOI 10.1007/978-1-4612-2822-6_8]
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Hofmann M, 2003, INFORM COMPUT, V183, P57, DOI 10.1016/S0890-5401(03)00009-9
   Kobayashi S, 1997, THEOR COMPUT SCI, V175, P29, DOI 10.1016/S0304-3975(96)00169-7
   Krishnaswami Neelakantan R., 2013, INT C FUNCT PROGR IC
   Lauer H. C., 1979, Operating Systems Review, V13, P3, DOI 10.1145/850657.850658
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Maffeis S, 2010, P IEEE S SECUR PRIV, P125, DOI 10.1109/SP.2010.16
   Mettler Adrian, 2010, NETWORK DISTRIBUTED
   Miller Mark Samuel, 2006, Ph. D. Dissertation
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Morrisett G, 2005, LECT NOTES COMPUT SC, V3461, P293
   Nielson F, 1999, LECT NOTES COMPUT SC, V1710, P114
   O'Hearn P.W., 1993, Mathematical Structures in Computer Science, V3, P435, DOI DOI 10.1017/S0960129500000311
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   Orchard D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341714
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Reynolds John C., 1978, POPL, P39
   Sabry A., 1998, Journal of Functional Programming, V8, P1, DOI 10.1017/S0956796897002943
   Stark I., 1996, LISP and Symbolic Computation, V9, P77, DOI 10.1007/BF01806033
   Terauchi T, 2006, LECT NOTES COMPUT SC, V4137, P218
   Terui K, 2007, ARCH MATH LOGIC, V46, P253, DOI 10.1007/s00153-007-0042-6
   Thiemann Peter, 1998, P 3 ACM SIGPLAN INT, DOI DOI 10.1145/289423.289429
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   WULF W, 1974, COMMUN ACM, V17, P337, DOI 10.1145/355616.364017
NR 41
TC 4
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 111
DI 10.1145/3408993
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700025
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Reid, J
   Long, B
   Steidel, J
AF Reid, John
   Long, Bill
   Steidel, Jon
TI History of Coarrays and SPMD Parallelism in Fortran
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Parallel programming; Fortran; Single Program Multiple Data (SPMD); High
   Performance Computing (HPC); Coarrays; Massively Parallel Processors
   (MPP)
AB The coarray programming model is an expression of the Single-Program-Multiple-Data (SPMD) programming model through the simple device of adding a codimension to the Fortran language. A data object declared with a codimension is a coarray object. Codimensions express the idea that some objects are located in local memory while others are located in remote memory. Coarray syntax obeys most of the same rules for normal array syntax. It is familiar to the Fortran programmer so the use of coarray syntax is natural and intuitive. Although the basic idea is quite simple, inserting it into the language definition turned out to be difficult.
   In addition, the process was complicated by rapidly changing hardware and heated arguments over whether parallelism should be supported best as an interface to language-independent libraries, as a set of directives superimposed on languages, or as a set of specific extensions to existing languages.
   In this paper, we review both the early history of coarrays and also their development into a part of Fortran 2008 and eventually into a larger part of Fortran 2018. Coarrays have been used, for example, in weather forecasting and in neural networks and deep learning.
C1 [Reid, John] JKR Associates, Wallingford, Oxon, England.
   [Reid, John] Rutherford Appleton Lab, Didcot, Oxon, England.
   [Long, Bill] HPE Inc, Seattle, WA USA.
   [Steidel, Jon] Intel Inc, Hillsboro, OR USA.
C3 UK Research & Innovation (UKRI); Science & Technology Facilities Council
   (STFC); STFC Rutherford Appleton Laboratory; Intel Corporation
RP Reid, J (corresponding author), JKR Associates, Wallingford, Oxon, England.; Reid, J (corresponding author), Rutherford Appleton Lab, Didcot, Oxon, England.
EM John.Reid@stfc.ac.uk; billlong@acm.org; jon.l.steidel@intel.com
CR American Standards Association, 1966, X391966 FORTRAN AM S
   [Anonymous], 2020, PL223 INCITS
   [Anonymous], 2004, 153912004 ISOIEC
   [Anonymous], 1998, SIGPLAN Fortran Forum, DOI [10.1145/289918.289920, DOI 10.1145/289918.289920]
   [Anonymous], 1993, HIGH PERFORMANCE FOR
   [Anonymous], 1999, CCSTR99157 IDA CTR C
   [Anonymous], 2020, JTC1SC22WG5 ISOIEC
   Ashby JV, 2008, CUG 2008 P, P1
   Backus J., 1981, HIST PROGRAMMING LAN, P25, DOI DOI 10.1145/800025.1198345
   Bonachea D., 2017, LBNL2001064, DOI [10.2172/1398512, DOI 10.2172/1398512]
   Chivers Ian D., 2008, ACM FORTRAN FORUM, V27, P22
   Curcic Milan, 2018, ACM SIGPLAN Fortran Forum, V38, P4, DOI 10.1145/3323057.3323059
   Donev Aleksander, 2007, ACM FORTRAN FORUM, V26, P9
   Eleftheriou M, 2002, PARALLEL DISTRIBUTED, V3, P0105, DOI [10.1109/IPDPS.2002.1016489, DOI 10.1109/IPDPS.2002.1016489]
   Fanfarillo A, 2019, PARALLEL COMPUT, V81, P58, DOI 10.1016/j.parco.2018.12.002
   Fanfarillo Alessandro., 2014, Proceedings of the 8th International Conference on Partitioned Global Address Space Programming Models, page, P4
   Feind K., 1995, Proceedings of the 1995 Cray User Group, P303
   Fujitsu, 2017, ADV SOFTW FUJITSU SU
   Garain S, 2015, J COMPUT PHYS, V297, P237, DOI 10.1016/j.jcp.2015.05.020
   GNU, FORTR 2008 FEAT SUPP
   IEEE, 1985, 754S1985 IEEE
   International Business Machines Corporation, 1954, SPEC IBM MATH FORMUL
   ISO, 1991, 15391991 ISO FORTRAN
   ISO, 1978, X391978 ISO FORTRAN
   ISO/IEC, 2018, 153912018E ISOIEC
   ISO/IEC, 2010, 153912010E ISOIEC
   Johnson T. A., 2013, P 7 INT C PGAS PROGR, P54
   Kennedy Ken., 2007, P 3 ACM SIGPLAN C HI, P7
   Mellor-Crummey J., 2009, Proceedings of the Third Conference on Partitioned Global Address Space Programing Models, p5:1, DOI DOI 10.1145/1809961.1809969
   Message Passing Interface Forum, 2015, MPI MESS PASS INT ST
   Metcalf M., 2018, Modern Fortran Explained: Incorporating Fortran 2018
   Metcalf Michael, 2004, 952003 FORTR
   Mozdzynski G, 2012, 2012 SC COMPANION: HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS (SCC), P652, DOI 10.1109/SC.Companion.2012.90
   NAG, 2020, NAG FORTR COMP
   Numrich R. W., 1997, Scientific Programming, V6, P275
   Numrich R. W., 1994, High-Performance Computing and Networking. International Conference and Exhibition Proceedings. Vol.2: Networking and Tools, P150
   Numrich Robert W., 1997, P 8 SIAM C PAR PROC
   Numrich Robert W., 1997, SIAM NEWS, V30, P6
   Numrich RobertW., 2005, SIGPLAN FORTRAN FORU, V24, P4, DOI DOI 10.1145/1080399.1080400
   Numrich RW, 1998, LECT NOTES COMPUT SC, V1541, P390
   Numrich RW, 2018, PARALLEL PROGRAMMING
   OpenMP, 2020, COMP TOOLS
   OpenMP Architecture Review Board, 1997, OPENMP FORTR APPL PR
   OpenMP Architecture Review Board, 2018, OpenMP Application Programming Interface
   Pase D. M., 1994, Scientific Programming, V3, P227
   Rasmussen Craig, 2004, COARRAY PYTHON PARAL, V3149, P632, DOI [10.1007/978-3-540-27866-5_83, DOI 10.1007/978-3-540-27866-5_83]
   Rasmussen Soren, 2018, P PAW ATM 18 PAR APP
   Sammet J.E., 1981, History of Programming Languages I, P199
   Sawdey Aaron, 1994, P 6 ECMWF WORKSH US, P523
   Shterenlikht A, 2018, ADV ENG SOFTW, V125, P155, DOI 10.1016/j.advengsoft.2018.05.008
   Sunderam V. S., 1990, Concurrency: Practice and Experience, V2, P315, DOI 10.1002/cpe.4330020404
   The Parallel Computing Forum, 1991, SIGPLAN FORTRAN FORU, V10, P1, DOI DOI 10.1145/122391.122392
   Uno Atsuya, 2005, J EARTH SIMULATOR, V3, P52
   Vaught Andrew, 2012, G95 WEBSITE
NR 54
TC 2
Z9 2
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 72
DI 10.1145/3386322
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900005
OA gold
DA 2024-07-18
ER

PT J
AU Marcozzi, M
   Tang, QY
   Donaldson, AF
   Cadar, C
AF Marcozzi, Michael
   Tang, Qiyi
   Donaldson, Alastair F.
   Cadar, Cristian
TI Compiler Fuzzing: How Much Does It Matter?
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE software testing; compilers; fuzzing; bug impact; Clang; LLVM
AB Despite much recent interest in randomised testing (fuzzing) of compilers, the practical impact of fuzzer-found compiler bugs on real-world applications has barely been assessed. We present the first quantitative and qualitative study of the tangible impact of miscompilation bugs in a mature compiler. We follow a rigorous methodology where the bug impact over the compiled application is evaluated based on (1) whether the bug appears to trigger during compilation; (2) the extent to which generated assembly code changes syntactically due to triggering of the bug; and (3) whether such changes cause regression test suite failures, or whether we can manually find application inputs that trigger execution divergence due to such changes. The study is conducted with respect to the compilation of more than 10 million lines of C/C++ code from 309 Debian packages, using 12% of the historical and now fixed miscompilation bugs found by four state-of-the-art fuzzers in the Clang/LLVM compiler, as well as 18 bugs found by human users compiling real code or as a by-product of formal verification efforts. The results show that almost half of the fuzzer-found bugs propagate to the generated binaries for at least one package, in which case only a very small part of the binary is typically affected, yet causing two failures when running the test suites of all the impacted packages. User-reported and formal verification bugs do not exhibit a higher impact, with a lower rate of triggered bugs and one test failure. The manual analysis of a selection of the syntactic changes caused by some of our bugs (fuzzer-found and non fuzzer-found) in package assembly code, shows that either these changes have no semantic impact or that they would require very specific runtime circumstances to trigger execution divergence.
C1 [Marcozzi, Michael; Tang, Qiyi; Donaldson, Alastair F.; Cadar, Cristian] Imperial Coll London, London, England.
C3 Imperial College London
RP Marcozzi, M (corresponding author), Imperial Coll London, London, England.
EM michael.marcozzi@gmail.com; qiyi.tang71@gmail.com;
   alastair.donaldson@imperial.ac.uk; c.cadar@imperial.ac.uk
OI Tang, Qiyi/0000-0002-9265-3011
FU EPSRC [EP/R011605/1, EP/R006865/1]; EPSRC [EP/R011605/1] Funding Source:
   UKRI
FX Our experimental infrastructure reuses parts of a framework developed by
   Sylvestre Ledru (Mozilla France) and Lucas Nussbaum (Universite de
   Lorraine), whom we thank for their support. We also thank John Regehr
   (University of Utah) for his input regarding the bugs found by the
   Csmith tool and Pritam Gharat (Imperial College London) for proofreading
   the paper. Finally, we thank the anonymous reviewers of this paper for
   their valuable comments.; This work was supported by EPSRC projects
   EP/R011605/1 and EP/R006865/1.
CR Bauer S., 2015, International Journal of PoC or GTFO, V0x08, P7
   Boujarwah AS, 1997, INFORM SOFTWARE TECH, V39, P617, DOI 10.1016/S0950-5849(97)00017-7
   Burgess CJ, 1996, INFORM SOFTWARE TECH, V38, P111, DOI 10.1016/0950-5849(95)01055-6
   Cadar C, 2013, COMMUN ACM, V56, P82, DOI 10.1145/2408776.2408795
   Cadar Cristian, 2015, MULTIVERSION EXECUTI
   Chen T.Y., 1998, Metamorphic testing: a new approach for generating next test cases
   Chen Y, 2013, ACM SIGPLAN NOTICES, V48, P197, DOI 10.1145/2499370.2462173
   Chen YT, 2016, ACM SIGPLAN NOTICES, V51, P85, DOI [10.1145/2980983.2908095, 10.1145/2908080.2908095]
   Cuoq Pascal, 2012, P 4 INT C NASA FORM
   Daniel B., 2007, P THE 6 JOINT M EURO, P185, DOI 10.1145/1287624.1287651
   Donaldson AF, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133917
   Donaldson Alastair F, 2016, P INT WORKSH MET TES
   HANFORD KV, 1970, IBM SYST J, V9, P242, DOI 10.1147/sj.94.0242
   Holler Christian, 2012, USENIX SEC S
   Hosek P, 2015, ACM SIGPLAN NOTICES, V50, P339, DOI [10.1145/2775054.2694390, 10.1145/2694344.2694390]
   Jones Derek, 2015, SO YOU FOUND BUG MY
   Kapus T, 2017, IEEE INT CONF AUTOM, P590, DOI 10.1109/ASE.2017.8115669
   Kossatchev AS, 2005, PROGRAM COMPUT SOFT+, V31, P10, DOI 10.1007/s11086-005-0002-z
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Le V, 2015, ACM SIGPLAN NOTICES, V50, P386, DOI [10.1145/2814270.2814319, 10.1145/2858965.2814319]
   Le Vu, 2015, P INT S SOFTW TEST A
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Lidbury C, 2015, ACM SIGPLAN NOTICES, V50, P65, DOI [10.1145/2737924.2737986, 10.1145/2813885.2737986]
   Lopes Nuno P., 2015, P 36 ACM SIGPLAN C P, P22, DOI [DOI 10.1145/2813885.2737965, 10.1145/2737924.2737965, DOI 10.1145/2737924.2737965]
   Luo QZ, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P643, DOI 10.1145/2635868.2635920
   Marinescu Paul Dan, 2014, P INT S SOFTW TEST A
   McKeeman William M., 1998, DIGIT TECH J, V10, P100
   Nagai Eriko, 2014, IPSJ Trans. Syst. LSI Des. Methodol., V7, P91, DOI 10.2197/ipsjtsldm.7.91
   Nakamura K, 2016, 2016 IEEE ASIA PACIFIC CONFERENCE ON CIRCUITS AND SYSTEMS (APCCAS), P676, DOI 10.1109/APCCAS.2016.7804063
   Purdom P., 1972, BIT (Nordisk Tidskrift for Informationsbehandling), V12, P366, DOI 10.1007/BF01932308
   Regehr J, 2012, ACM SIGPLAN NOTICES, V47, P335, DOI 10.1145/2345156.2254104
   Sauder R.L., 1962, COMMUN ACM, P317, DOI 10.1145/1460833.1460869
   Segura Sergio, 2016, P 31 ANN C OBJ OR PR
   Sun Chengnian, 2016, P 25 INT S SOFTW TES, P294, DOI DOI 10.1145/2931037.2931074
   Tao QM, 2010, ASIA PAC SOFWR ENG, P270, DOI 10.1109/APSEC.2010.39
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P216, DOI [10.1145/2666356.2594334, 10.1145/2594291.2594334]
   Wichmann B.A, 1998, SOME REMARKS RANDOM
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P347, DOI [10.1145/3062341.3062379, 10.1145/3140587.3062379]
NR 39
TC 22
Z9 22
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 155
DI 10.1145/3360581
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500040
OA Green Submitted, gold, Green Published
DA 2024-07-18
ER

PT J
AU Yamazaki, T
   Nakamaru, T
   Ichikawa, K
   Chiba, S
AF Yamazaki, Tetsuro
   Nakamaru, Tomoki
   Ichikawa, Kazuhiro
   Chiba, Shigeru
TI Generating a Fluent API with Syntax Checking from an LR Grammar
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE fluent API; library generation; metaprogramming; LR parsing
AB This paper proposes a fluent API generator for Scala, Haskell, and C++. It receives a grammar definition and generates a code skeleton of the library in the host programming language. The generated library is accessed through a chain of method calls; this style of API is called a fluent API. The library uses the host-language type checker to detect an invalid chain of method calls. Each method call is regarded as a lexical token in the embedded domain specific language implemented by that library. A sequence of the lexical tokens is checked and, if the sequence is not acceptable by the grammar, a type error is reported during compilation time. A contribution of this paper is to present an algorithm for generating the code-skeleton for a fluent API that reports a type error when a chain of method calls to the library does not match the given LR grammar. Our algorithm works in Scala, Haskell, and C++. To encode LR parsing, it uses the method/function overloading available in those languages. It does not need an advanced type system, or exponential compilation time or memory consumption. This paper also presents our implementation of the proposed generator.
C1 [Yamazaki, Tetsuro; Nakamaru, Tomoki; Ichikawa, Kazuhiro; Chiba, Shigeru] Univ Tokyo, Grad Sch Informat Sci & Technol, Tokyo, Japan.
   [Ichikawa, Kazuhiro] FIVE Inc, Lehi, UT USA.
C3 University of Tokyo
RP Yamazaki, T (corresponding author), Univ Tokyo, Grad Sch Informat Sci & Technol, Tokyo, Japan.
EM yamazaki@csg.ci.i.u-tokyo.ac.jp; nakamaru@csg.ci.i.u-tokyo.ac.jp;
   ichikawa@csg.ci.i.u-tokyo.ac.jp; chiba@acm.org
RI Ichikawa, Kazuhiro/I-5454-2016
FU JSPS KAKENHI [JP15H02682]; JST CREST Post-Petascale Software Project
FX We would like to thank the anonymous reviewers for their fruitful
   comments. This work was partly supported by JSPS KAKENHI Grant Number
   JP15H02682 and JST CREST Post-Petascale Software Project.
CR [Anonymous], 2003, C TEMPLATES TURING C
   [Anonymous], 1992, Semantics with applications: a formal introduction
   Bock Roland, 2016, RBOCK SQLPP11 TYPE S
   Cocke J., 1969, Programming Languages and Their Compilers: Preliminary Notes
   COURCELLE B, 1977, MATH SYST THEORY, V11, P87, DOI 10.1007/BF01768471
   Dietl W, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P681, DOI 10.1145/1985793.1985889
   Fowler Martin, 2005, FluentInterface
   Gansner ER, 2000, SOFTWARE PRACT EXPER, V30, P1203, DOI 10.1002/1097-024X(200009)30:11<1203::AID-SPE338>3.0.CO;2-N
   Gibbons Jeremy, 2014, P ACM SIGPLAN INT C
   Gil J, 2010, SCI COMPUT PROGRAM, V75, P573, DOI 10.1016/j.scico.2010.01.004
   Gil Yossi, 2016, P 30 EUR C OBJ OR PR
   Gil Yossi, 2019, 33 EUR C OBJ OR PROG, DOI [10.4230/LIPIcs.ECOOP.2019.13, DOI 10.4230/LIPICS.ECOOP.2019.13]
   GOLDSTINE J, 1982, MATH SYST THEORY, V15, P315
   Google Inc, 2011, IMPR YOUR COD LINT C
   Grigore R, 2017, ACM SIGPLAN NOTICES, V52, P73, DOI 10.1145/3093333.3009871
   HEILBRUNNER S, 1981, THEOR COMPUT SCI, V15, P117, DOI 10.1016/0304-3975(81)90067-0
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Hudak P., 1996, ACM COMPUT SURV, V28, P196, DOI [10.1145/242224.242477, DOI 10.1145/242224.242477]
   Ichikawa K., 2017, ART SCI ENG PROGRAM, V1, P15, DOI [10.22152/programming-journal.org/2017/1/15, DOI 10.22152/PROGRAMMING-JOURNAL.ORG/2017/1/15]
   KASAMI T, 1965, EFFICIENT RECOGNITIO
   Kouzapas D, 2018, SCI COMPUT PROGRAM, V155, P52, DOI 10.1016/j.scico.2017.10.006
   Kruger Stefan, 2018, EUR C OBJ OR PROGR E, V10, P1
   Levy Tomer, 2017, FLUENT API AUTOMATIC
   MAIRSON HG, 1994, INFORM PROCESS LETT, V49, P95, DOI 10.1016/0020-0190(94)90033-7
   Nakamaru Tomoki, 2017, P 16 ACM SIGPLAN IN
   Nistor L, 2013, MASPEGHI 13, P9, DOI [DOI 10.1145/2489828, 10.1145/2489828.2489830]
   Sunshine J, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P713
   Thiemann P, 2016, ACM SIGPLAN NOTICES, V51, P462, DOI 10.1145/3022670.2951926
   Xu Hao, 2010, ERILEX EMBEDDED DOMA
   YOUNGER DH, 1967, INFORM CONTROL, V10, P189, DOI 10.1016/S0019-9958(67)80007-X
NR 30
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 134
DI 10.1145/3360560
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500019
OA gold
DA 2024-07-18
ER

PT J
AU Lewchenko, NV
   Radhakrishna, A
   Gaonkar, A
   Cerny, P
AF Lewchenko, Nicholas, V
   Radhakrishna, Arjun
   Gaonkar, Akash
   Cerny, Pavol
TI Sequential Programming for Replicated Data Stores
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrency; replicated data types; dependent types; refinement types
AB We introduce CAROL, a refinement-typed programming language for replicated data stores. The salient feature of CAROL is that it allows programming and verifying replicated store operations modularly, without consideration of other operations that might interleave, and sequentially, without requiring reference to or knowledge of the concurrent execution model. This is in stark contrast with existing systems, which require understanding the concurrent interactions of all pairs of operations when developing or verifying them.
   The key enabling idea is the consistency guard, a two-state predicate relating the locally-viewed store and the hypothetical remote store that an operation's updates may eventually be applied to, which is used by the CAROL programmer to declare their precise consistency requirements. Guards appear to the programmer and refinement typechecker as simple data pre-conditions, enabling sequential reasoning, while appearing to the distributed runtime as consistency control instructions.
   We implement and evaluate the CAROL system in two parts: (1) the algorithm used to statically translate guards into the runtime coordination actions required to enforce them, and (2) the networked-replica runtime which executes arbitrary operations, written in a Haskell DSL, according to the CAROL language semantics.
C1 [Lewchenko, Nicholas, V; Gaonkar, Akash; Cerny, Pavol] Univ Colorado, Boulder, CO 80309 USA.
   [Radhakrishna, Arjun] Microsoft, Redmond, WA USA.
C3 University of Colorado System; University of Colorado Boulder; Microsoft
RP Lewchenko, NV (corresponding author), Univ Colorado, Boulder, CO 80309 USA.
EM nicholas.lewchenko@colorado.edu; arradha@microsoft.com;
   akash.gaonkar@colorado.edu; pavol.cerny@colorado.edu
OI Radhakrishna, Arjun/0000-0002-5559-5932
FU DARPA [FA8750-15-2-0096]
FX We thank the ICFP'19 reviewers and those readers of earlier drafts for
   their time and the feedback they have provided on this work. This
   research was supported in part by DARPA under agreement
   FA8750-15-2-0096.
CR Attiya H, 2016, PROCEEDINGS OF THE 2016 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC'16), P259, DOI 10.1145/2933057.2933090
   Bailis P., 2013, ACM SIGMOD International Conference on Management of Data, P761, DOI 10
   Balegas V, 2018, PROC VLDB ENDOW, V12, P404, DOI 10.14778/3297753.3297760
   Balegas Valter, 2015, Proceedings of the Tenth European Conference on Computer Systems, DOI [10.1145/2741948.2741972, DOI 10.1145/2741948.2741972]
   BREWER EA, 2000, PODC, V7, DOI [10.1145/343477.343502, DOI 10.1145/343477.343502]
   Burckhardt S, 2014, FOUND TRENDS PROGRAM, V1, P2
   Burckhardt S, 2014, ACM SIGPLAN NOTICES, V49, P271, DOI 10.1145/2535838.2535848
   Burckhardt Sebastian, 2012, P 22 EUR S PROGR ESO
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Gilbert S., 2002, SIGACT News, V33, P51, DOI 10.1145/564585.564601
   Gilbert S., 2012, IEEE COMPUTER, V45, p30S36
   Gotsman A, 2016, ACM SIGPLAN NOTICES, V51, P371, DOI 10.1145/2914770.2837625
   Kaki G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276534
   Lakshman Avinash, 2010, Operating Systems Review, V44, P35, DOI 10.1145/1773912.1773922
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Li Cheng, 2012, 10 USENIX S OP SYST, P265
   Li Cheng, 2014, 2014 USENIX Annual Technical Conference (USENIX ATC 14), P281
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Roy S, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1311, DOI 10.1145/2723372.2723720
   Rushby J, 1998, IEEE T SOFTWARE ENG, V24, P709, DOI 10.1109/32.713327
   Shapiro Marc, 2011, P 13 INT C STAB SAF
   Sivaramakrishnan KC, 2015, ACM SIGPLAN NOTICES, V50, P413, DOI [10.1145/2813885.2737981, 10.1145/2737924.2737981]
   Teixeira Pedro., 2017, DECENTRALIZED REAL T
   Terry D. B., 1995, Operating Systems Review, V29, P172, DOI 10.1145/224057.224070
   Terry DB, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P309, DOI 10.1145/2517349.2522731
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Xi HW, 1998, ACM SIGPLAN NOTICES, V33, P249, DOI 10.1145/277652.277732
NR 27
TC 4
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 106
DI 10.1145/3341710
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900029
OA gold
DA 2024-07-18
ER

PT J
AU Aceto, L
   Achilleos, A
   Francalanza, A
   Ingólfsdóttir, A
   Lehtinen, K
AF Aceto, Luca
   Achilleos, Antonis
   Francalanza, Adrian
   Ingolfsdottir, Anna
   Lehtinen, Karoliina
TI Adventures in Monitorability: From Branching to Linear Time and Back
   Again
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE monitorability; linear-time and branching-time logics; monitor synthesis
ID AUTOMATA; SYSTEMS
AB This paper establishes a comprehensive theory of runtime monitorability for Hennessy-Milner logic with recursion, a very expressive variant of the modal p-calculus. It investigates the monitorability of that logic with a linear-time semantics and then compares the obtained results with ones that were previously presented in the literature for a branching-time setting. Our work establishes an expressiveness hierarchy of monitorable fragments of Hennessy-Milner logic with recursion in a linear-time setting and exactly identifies what kinds of guarantees can be given using runtime monitors for each fragment in the hierarchy. Each fragment is shown to be complete, in the sense that it can express all properties that can be monitored under the corresponding guarantees. The study is carried out using a principled approach to monitoring that connects the semantics of the logic and the operational semantics of monitors. The proposed framework supports the automatic, compositional synthesis of correct monitors from monitorable properties.
C1 [Aceto, Luca] Gran Sasso Sci Inst, Laquila, Italy.
   [Aceto, Luca; Achilleos, Antonis; Ingolfsdottir, Anna] Reykjavik Univ, Sch Comp Sci, Reykjavik, Iceland.
   [Francalanza, Adrian] Univ Malta, ICT, Dept Comp Sci, Msida, Malta.
   [Lehtinen, Karoliina] Univ Kiel, Kiel, Germany.
   [Lehtinen, Karoliina] Univ Liverpool, Liverpool, Merseyside, England.
C3 Gran Sasso Science Institute (GSSI); Reykjavik University; University of
   Malta; University of Kiel; University of Liverpool
RP Aceto, L (corresponding author), Gran Sasso Sci Inst, Laquila, Italy.; Aceto, L (corresponding author), Reykjavik Univ, Sch Comp Sci, Reykjavik, Iceland.
EM luca@ru.is; antonios@ru.is; adrian.francalanza@um.edu.mt; annai@ru.is;
   karoliina.lehtinen@liverpool.ac.uk
OI Lehtinen, Karoliina/0000-0003-1171-8790
FU project "TheoFoMon: Theoretical Foundations for Monitorability" of the
   Icelandic Research Fund [163406-051]; project "Epistemic Logic for
   Distributed Runtime Monitoring" of the Icelandic Research Fund
   [184940-051]; BMBF [01IS160253]; EPSRC [EP/P020909/1]; EPSRC
   [EP/P020909/1, EP/M027287/1] Funding Source: UKRI
FX This research was partially supported by the projects "TheoFoMon:
   Theoretical Foundations for Monitorability" (grant number: 163406-051)
   and lEpistemic Logic for Distributed Runtime Monitoringz (grant number:
   184940-051) of the Icelandic Research Fund, by the BMBF project lAramis
   IIz (project number: 01IS160253) and the EPSRC project lSolving parity
   games in theory and practicez (project number: EP/P020909/1).
CR Aceto Luca, 2017, Implementation and Application of Automata. 22nd International Conference, CIAA 2017. Proceedings: LNCS 10329, P1, DOI 10.1007/978-3-319-60134-2_1
   Aceto L., 2018, LIPICS, V118, DOI 10.4230/LIPIcs.CONCUR.2018.34
   Aceto Luca, 2016, ABS161110212 CORR
   Aceto Luca, 2017, FSTTCS LIPICS, V7, P14
   Aceto Luca, LECT NOTES COMPUTER, V10803, P203
   Achilleos A, 2016, LECT NOTES COMPUT SC, V9537, P1, DOI 10.1007/978-3-319-27683-0_1
   ALPERN B, 1985, INFORM PROCESS LETT, V21, P181, DOI 10.1016/0020-0190(85)90056-0
   [Anonymous], 2017, FORM METHOD SYST DES
   [Anonymous], 2007, Reactive Systems: Modelling, Specification and Verification
   [Anonymous], 2001, Handbook of Process Algebra, DOI [DOI 10.1016/B978-044482830-9/50022-9, 10.1016/B978-044482830-9/50022-9]
   Attard DP, 2017, RIV PUBL SER AUTOMAT, P49
   Attard DP, 2016, LECT NOTES COMPUT SC, V10012, P473, DOI 10.1007/978-3-319-46982-9_31
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Barringer H, 2004, LECT NOTES COMPUT SC, V2937, P44
   Bartocci Ezio, 2018, Lectures on Runtime. Verification Introductory and Advanced Topics. LNCS 10457, P1, DOI 10.1007/978-3-319-75632-5_1
   Bauer A, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000799.2000800
   Bauer A, 2010, J LOGIC COMPUT, V20, P651, DOI 10.1093/logcom/exn075
   Bertrand Nathalie, 2014, IARCS ANN C FDN SOFT
   CHANDRA AK, 1981, J ACM, V28, P114, DOI 10.1145/322234.322243
   CHANG E, 1992, LECT NOTES COMPUT SC, V623, P474
   Cini Clare, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P581, DOI 10.1007/978-3-662-46681-0_54
   Clarke EM, 1999, MODEL CHECKING, P1
   D'Angelo B, 2005, 12TH INTERNATIONAL SYMPOSIUM ON TEMPORAL REPRESENTATION AND REASONING, PROCEEDINGS, P166, DOI 10.1109/TIME.2005.26
   DENICOLA R, 1990, LECT NOTES COMPUT SC, V469, P407
   Diekert V, 2015, LECT NOTES COMPUT SC, V9399, P39, DOI 10.1007/978-3-319-25150-9_3
   Diekert V, 2014, THEOR COMPUT SCI, V537, P29, DOI 10.1016/j.tcs.2014.02.052
   Drusinsky D, 2003, LECT NOTES COMPUT SC, V2725, P114
   Dutta Sonali, 2014, P 2 INT WORKSH DES I, V1130
   Falcone Ylies, 2012, International Journal on Software Tools for Technology Transfer, V14, P349, DOI 10.1007/s10009-011-0196-8
   FELLAH A, 1990, INT J COMPUT MATH, V35, P117, DOI 10.1080/00207169008803893
   Finkbeiner B, 2004, FORM METHOD SYST DES, V24, P101, DOI 10.1023/B:FORM.0000017718.28096.48
   Francalanza A., 2017, LEIBNIZ INT P INFORM, V85, DOI [DOI 10.4230/LIPICS.CONCUR.2017.8, 10.4230/LIPIcs.CONCUR.2017.8]
   Francalanza A, 2017, LECT NOTES COMPUT SC, V10548, P8, DOI 10.1007/978-3-319-67531-2_2
   Francalanza A, 2016, LECT NOTES COMPUT SC, V9634, P145, DOI 10.1007/978-3-662-49630-5_9
   Francalanza A, 2015, LECT NOTES COMPUT SC, V9333, P71, DOI 10.1007/978-3-319-23820-3_5
   Francalanza A, 2015, FORM METHOD SYST DES, V46, P226, DOI 10.1007/s10703-014-0217-9
   Giannakopoulou D., 2001, IEEE INT C AUT SOFTW
   Havelund K, 2002, LECT NOTES COMPUT SC, V2280, P342
   HENNESSY M, 1985, J ACM, V32, P137, DOI 10.1145/2455.2460
   KELLER RM, 1976, COMMUN ACM, V19, P371, DOI 10.1145/360248.360251
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Kupferman O, 2000, J ACM, V47, P312, DOI 10.1145/333979.333987
   Lange M, 2005, LECT NOTES COMPUT SC, V3385, P267
   LARSEN KG, 1990, THEOR COMPUT SCI, V72, P265, DOI 10.1016/0304-3975(90)90038-J
   MANNA Z, 1991, THEOR COMPUT SCI, V83, P97, DOI 10.1016/0304-3975(91)90041-Y
   Markey N, 2006, INFORM PROCESS LETT, V97, P225, DOI 10.1016/j.ipl.2005.11.010
   Milner R., 1989, Communication and concurrency
   Pnueli A, 2006, LECT NOTES COMPUT SC, V4085, P573
   SAMPATH M, 1995, IEEE T AUTOMAT CONTR, V40, P1555, DOI 10.1109/9.412626
   Schneider FredB., 1997, CONCURRENT PROGRAMMI
   Tabakov D, 2012, FORM METHOD SYST DES, V41, P236, DOI 10.1007/s10703-011-0139-8
   Vardi M. Y., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P250, DOI 10.1145/73560.73582
   Viswanathan M, 2005, LECT NOTES COMPUT SC, V3407, P543
   Wilke T, 2001, B BELG MATH SOC-SIM, V8, P359, DOI 10.36045/bbms/1102714178
NR 54
TC 30
Z9 30
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 52
DI 10.1145/3290365
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300052
OA gold, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Arvidsson, E
   Castegren, E
   Clebsch, S
   Drossopoulou, S
   Noble, J
   Parkinson, MJ
   Wrigstad, T
AF Arvidsson, Ellen
   Castegren, Elias
   Clebsch, Sylvan
   Drossopoulou, Sophia
   Noble, James
   Parkinson, Matthew J.
   Wrigstad, Tobias
TI Reference Capabilities for Flexible Memory Management
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE memory management; type systems; isolation; ownership
ID GARBAGE COLLECTION; OWNERSHIP; UNIQUENESS
AB Verona is a concurrent object-oriented programming language that organises all the objects in a program into a forest of isolated regions. Memory is managed locally for each region, so programmers can control a program's memory use by adjusting objects' partition into regions, and by setting each region's memory management strategy. A thread can only mutate (allocate, deallocate) objects within one active region - its "window of mutability". Memory management costs are localised to the active region, ensuring overheads can be predicted and controlled. Moving the mutability window between regions is explicit, so code can be executed wherever it is required, yet programs remain in control of memory use. An ownership type system based on reference capabilities enforces region isolation, controlling aliasing within and between regions, yet supporting objects moving between regions and threads. Data accesses never need expensive atomic operations, and are always thread-safe.
C1 [Arvidsson, Ellen; Castegren, Elias; Wrigstad, Tobias] Uppsala Univ, Informat Technol, Lagerhyddsvagen 1, S-75105 Uppsala, Sweden.
   [Clebsch, Sylvan] Microsoft, Azure Res, 6200 Turtle Point Dr, Austin, TX 78746 USA.
   [Drossopoulou, Sophia] Imperial Coll London, Dept Comp, 180 Queens Gate, London SW7 2BZ, England.
   [Noble, James] Creat Res & Programming, 5 Fernlea Ave, Wellington 6012, New Zealand.
   [Parkinson, Matthew J.] Microsoft, 21 Stn Rd, Cambridge, England.
C3 Uppsala University; Microsoft; Imperial College London; Microsoft
RP Arvidsson, E (corresponding author), Uppsala Univ, Informat Technol, Lagerhyddsvagen 1, S-75105 Uppsala, Sweden.
EM ellen.arvidsson@it.uu.se; elias.castegren@it.uu.se;
   sylvan.clebsch@microsoft.com; s.drossopoulou@imperial.ac.uk;
   kjx@acm.org; mattpark@microsoft.com; tobias.wrigstad@it.uu.se
OI Clebsch, Sylvan/0009-0004-4049-134X; Wrigstad,
   Tobias/0000-0002-4269-5408; Castegren, Elias/0000-0003-4918-6582; Noble,
   James/0000-0001-9036-5692; Arvidsson, Ellen/0009-0004-0878-3641;
   Parkinson, Matthew John/0009-0004-3937-1260
FU Swedish Research Council [2020-05346]; Royal Society of New Zealand Te
   Aparangi Marsden Fund Te Putea Rangahau a Marsden [CRP1801, CRP2101];
   Swedish Research Council [2020-05346] Funding Source: Swedish Research
   Council
FX This work was partially supported by a grant from the Swedish Research
   Council (2020-05346), and partially by the Royal Society of New Zealand
   Te Aparangi Marsden Fund Te Putea Rangahau a Marsden grants CRP1801 and
   CRP2101, and Agoric. We thank the anonymous reviewers at OOPSLA'23 for
   their input that greatly improved the presentation of this paper.
CR Abtahi P, 2020, CHI'20: EXTENDED ABSTRACTS OF THE 2020 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, DOI 10.1145/3334480.3383069
   Aldrich J, 2004, LECT NOTES COMPUT SC, V3086, P1
   [Anonymous], 2000, Programming Language Design and Implementation, DOI [DOI 10.1145/358438.349328, 10.1145/349299.349328]
   [Anonymous], 2002, P 3 INT S MEM MAN BE, DOI [DOI 10.1145/512429.512439, 10.1145/512429.512439]
   Armstrong Joe, 2007, P 3 ACM SIGPLAN C HI, P6, DOI DOI 10.1145/1238844.1238850
   Arvidsson E, 2023, Arxiv, DOI [arXiv:2309.02983, 10.48550/arXiv.2309.02983, DOI 10.48550/ARXIV.2309.02983]
   BAKER HG, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P218, DOI 10.1145/91556.91652
   Beingessner Aria, 2015, You can't spell Trust without Rust
   Beingessner Aria., 2019, Learn Rust With Entirely Too Many Linked Lists
   Bendersky Eli, 2021, Rust data structures with circular references
   Blaser David, 2019, Simple Explanation of Complex Lifetime Errors in Rust
   Bocchino Robert, 2011, Encyclopedia of Parallel Computing, P566, DOI DOI 10.1007/978-0-387-09766-4_119
   Bollella Gregory, 2003, OOPSLA COMPANION, P361, DOI [10.1145/949344.949443, DOI 10.1145/949344.949443]
   Boyapati C, 2003, ACM SIGPLAN NOTICES, V38, P324, DOI 10.1145/780822.781168
   Boyapati C, 2001, ACM SIGPLAN NOTICES, V36, P56, DOI 10.1145/504311.504287
   Boyland J., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P2
   Boyland J, 2001, SOFTWARE PRACT EXPER, V31, P533, DOI 10.1002/spe.370
   Boyland J., 2013, LNCS, V7850, P270, DOI [DOI 10.1007/978-3-642-36946-910, 10.1007/978-3-642-36946-9_10, DOI 10.1007/978-3-642-36946-9_10]
   Brachthäuser JI, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527320
   Cameron Nicholas, 2015, What's the "best"way to implement a doubly-linked list in Rust?
   Castegren Elias, 2017, LEIBNIZ INT P INFORM, V6, P1, DOI DOI 10.4230/LIPICS.ECOOP.2017.6
   Castegren Elias, 2016, 30 EUR C OBJ OR PROG, V5, P1, DOI [DOI 10.4230/LIPICS.ECOOP.2016.5, 10.4230/LI PIcs.ECOOP.2016.5]
   Cheeseman Luke, 2023, P ACM PROGR LANG, V7, DOI DOI 10.1145/3622852
   Clarke D, 2003, LECT NOTES COMPUT SC, V2743, P176
   Clarke D, 2002, ACM SIGPLAN NOTICES, V37, P292, DOI 10.1145/583854.582447
   Clarke D, 2008, LECT NOTES COMPUT SC, V5356, P139
   Clarke David, 2013, Aliasing in Object-oriented Programming: Types, Analysis and Veri~cation, V7850, DOI DOI 10.1007/978-3-642-36946-9
   Clarke David, 2001, Ph.D. Dissertation
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Clebsch S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133896
   Clebsch S, 2013, ACM SIGPLAN NOTICES, V48, P553, DOI [10.1145/2509136.2509557, 10.1145/2544173.2509557]
   Click Cliff, 2005, P 1 ACMUSENIX INT C, P46, DOI [DOI 10.1145/1064979.1064988EVENT-PLACE:CHICAGO,IL,USA, 10.1145/1064979.1064988, DOI 10.1145/1064979.1064988]
   Coblenz M, 2022, PROC INT CONF SOFTW, P1021, DOI 10.1145/3510003.3510107
   Cohen Russell, 2018, Why Writing a Linked List in (safe) Rust is So Damned Hard
   CWE, 2022, 2021 CWE Top 25 Most Dangerous Software Weaknesses
   Detlefs David, 2004, P 4 INT S MEM MAN VA, DOI [10.1145/1029873.1029879, DOI 10.1145/1029873.1029879]
   Dietl W, 2007, LECT NOTES COMPUT SC, V4609, P28
   Elsman M, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000010
   Fernandez-Reyes Kiko, 2021, Onward! 2021: Proceedings of the 2021 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software, P1, DOI 10.1145/3486607.3486747
   Flood Christine H., 2016, P 13 INT C PRINC PRA, DOI DOI 10.1145/2972206.2972210
   Fluet M, 2006, LECT NOTES COMPUT SC, V3924, P7
   Fluet M, 2006, J FUNCT PROGRAM, V16, P485, DOI 10.1017/S095679680600596X
   Francis-Landau M, 2016, PROCEEDINGS OF 2016 6TH WORKSHOP ON IRREGULAR APPLICATIONS: ARCHITECTURE AND ALGORITHMS (IA3), P78, DOI [10.1109/IA3.2016.20, 10.1109/IA3.2016.020]
   Franco Juliana, 2018, EUROPEAN S PROGRAMMI, V801, DOI [10.1007/978-3-319-89884-1_31, DOI 10.1007/978-3-319-89884-1_31]
   Gay D, 1998, ACM SIGPLAN NOTICES, V33, P313, DOI 10.1145/277652.277748
   Gay D, 2001, ACM SIGPLAN NOTICES, V36, P70, DOI 10.1145/381694.378815
   Gonnord L, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3564529
   Gordon C S., 2020, 34th European Conference on Object-Oriented Programming, ECOOP 2020, November 15-17, 2020, Berlin, Germany (Virtual Conference), V166, p10:1, DOI DOI 10.4230/LIPICS.ECOOP.2020.10
   Gordon CS, 2012, ACM SIGPLAN NOTICES, V47, P21, DOI 10.1145/2398857.2384619
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Gruber O, 2013, LECT NOTES COMPUT SC, V7920, P281, DOI 10.1007/978-3-642-39038-8_12
   Haller P, 2016, ACM SIGPLAN NOTICES, V51, P272, DOI 10.1145/3022671.2984042
   Haller P, 2010, LECT NOTES COMPUT SC, V6183, P354
   HARMS DE, 1991, IEEE T SOFTWARE ENG, V17, P424, DOI 10.1109/32.90445
   Hicks Michael, 2004, P 4 INT S MEM MAN VA, P73, DOI DOI 10.1145/1029873.1029883
   HOGG J, 1991, OOPSLA 91 CONFERENCE PROCEEDINGS : OBJECT-ORIENTED PROGRAMMING SYSTEMS, LANGUAGES, AND APPLICATIONS, P271, DOI 10.1145/118014.117975
   Hogg J., 1992, OOPS Messenger, V3, P11
   Hu Vivian, 2020, Rust Breaks into TIOBE Top 20 Most Popular Programming Languages
   Ingalls D. H. H., 1981, BYTE, V6, P286
   Jones Richard, 2016, The garbage collection handbook: the art of automatic memory management
   Jung R, 2021, COMMUN ACM, V64, P144, DOI 10.1145/3418295
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371109
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Klabnik S., 2018, The Rust Programming Language
   Krill Paul, 2021, Microsoft forms Rust language team
   Lampson Butler, 1977, ACM Sigplan Notices, V12, P18
   Lea Doug, 1998, Concurrent Programming in Java, V2nd
   Li Paley, 2012, Foundations of Object-Oriented Programming Languages (FOOL)
   Liden Per, 2018, The Z Garbage Collector-Low Latency GC for OpenJDK
   LIEBERHERR KJ, 1989, IEEE SOFTWARE, V6, P38, DOI 10.1109/52.35588
   Madsen O. Lehrmann, 1993, Object Oriented Programming in the BETA Programming Language
   Mastrangelo L, 2015, ACM SIGPLAN NOTICES, V50, P695, DOI [10.1145/2814270.2814313, 10.1145/2858965.2814313]
   Milano M, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P458, DOI 10.1145/3519939.3523443
   Muller Peter, 1999, Programming Languages and Fundamentals of Programming, V263, DOI [10.1007/BFb0054091, DOI 10.1007/BFB0054091]
   ndrewxie, 2019, What's the "best"way to implement a doubly-linked list in Rust?
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   Noble James, 2022, FTfJP
   Noble James, 2000, Small Memory Software: Patterns for Systems with Limited Memory
   O'connor L, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S095679682100023X
   Pizlo F, 2007, LCTES'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN-SIGBED CONFERENCE ON LANGUAGES, COMPILERS, AND TOOLS FOR EMBEDDED SYSTEMS, P123
   Potter J, 1998, 1998 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P80, DOI 10.1109/ASWEC.1998.730915
   Qin BQ, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P763, DOI 10.1145/3385412.3386036
   Spencer Ryan James, 2020, Four Ways To Avoid The Wrath Of The Borrow Checker
   Srinivasan S, 2008, LECT NOTES COMPUT SC, V5142, P104, DOI 10.1007/978-3-540-70592-5_6
   Tene G, 2011, ACM SIGPLAN NOTICES, V46, P79, DOI 10.1145/2076022.1993491
   Tiobe, 2022, TIOBE Index for June 2022
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tofte M., 2004, Higher-Order and Symbolic Computation, V17, P245, DOI 10.1023/B:LISP.0000029446.78563.a4
   Tofte Mads, 2021, Technical Report
   Turon A., 2015, Fearless concurrency with rust
   Utting Mark, 1995, 4 AUSTR REF WORKSH
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
   Wrigstad Tobias, 2006, Ph.D. Dissertation
   Yang AM, 2017, ACM SIGPLAN NOTICES, V52, P14, DOI 10.1145/3156685.3092274
   Yanovski J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473597
NR 95
TC 2
Z9 2
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 270
DI 10.1145/3622846
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100050
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Crichton, W
   Gray, G
   Krishnamurthi, S
AF Crichton, Will
   Gray, Gavin
   Krishnamurthi, Shriram
TI A Grounded Conceptual Model for Ownership Types in Rust
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Rust; ownership types; program state visualization; concept inventory
AB Programmers learning Rust struggle to understand ownership types, Rust's core mechanism for ensuring memory safety without garbage collection. This paper describes our attempt to systematically design a pedagogy for ownership types. First, we studied Rust developers' misconceptions of ownership to create the Ownership Inventory, a new instrument for measuring a person's knowledge of ownership. We found that Rust learners could not connect Rust's static and dynamic semantics, such as determining why an ill-typed program would (or would not) exhibit undefined behavior. Second, we created a conceptual model of Rust's semantics that explains borrow checking in terms of flow-sensitive permissions on paths into memory. Third, we implemented a Rust compiler plugin that visualizes programs under the model. Fourth, we integrated the permissions model and visualizations into a broader pedagogy of ownership by writing a new ownership chapter for The Rust Programming Language, a popular Rust textbook. Fifth, we evaluated an initial deployment of our pedagogy against the original version, using reader responses to the Ownership Inventory as a point of comparison. Thus far, the new pedagogy has improved learner scores on the Ownership Inventory by an average of 9% (N = 342, d = 0.56).
C1 [Crichton, Will; Krishnamurthi, Shriram] Brown Univ, Dept Comp Sci, Providence, RI 02912 USA.
   [Gray, Gavin] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
C3 Brown University; Swiss Federal Institutes of Technology Domain; ETH
   Zurich
RP Crichton, W (corresponding author), Brown Univ, Dept Comp Sci, Providence, RI 02912 USA.
EM wcrichto@brown.edu
OI Gray, Gavin/0000-0002-2960-1198; Crichton, Will/0000-0001-8639-6541;
   Krishnamurthi, Shriram/0000-0001-5184-1975
FU US NSF [2319014]
FX The authors are immensely grateful to Niko Matsakis and Amazon. They
   provided both the encouragement and the funding to initiate this
   project, and supplied additional emergency funding when our.rst grant
   application fell through because we were studying Rust instead of C++.
   We thank Carol Nichols for taking a leap of faith in allowing us to
   advertise in TRPL; this was essential for driving tra.c to the
   experiment. Later parts of this work are partially supported by the US
   NSF under Grant No. 2319014.
CR Aldrich J, 2002, ACM SIGPLAN NOTICES, V37, P311, DOI 10.1145/583854.582448
   Almeida Marcelo, 2022, 2022 IEEE S VIS LANG, P1, DOI DOI 10.1109/VL/HCC53370.2022.9833121
   BAYMAN P, 1988, J EDUC PSYCHOL, V80, P291, DOI 10.1037/0022-0663.80.3.291
   Blaser David, 2019, Simple Explanation of Complex Lifetime Errors in Rust
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Boyland J, 2001, SOFTWARE PRACT EXPER, V31, P533, DOI 10.1002/spe.370
   Chitil O, 2001, ACM SIGPLAN NOTICES, V36, P193, DOI 10.1145/507669.507659
   Clarke Dave, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P15, DOI 10.1007/978-3-642-36946-9_3
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Coblenz M, 2022, PROC INT CONF SOFTW, P1021, DOI 10.1145/3510003.3510107
   Crichton Will, 2020, P 1 WORKSH HUM ASP T
   Dickson P. E., 2020, Proceedings of the 2020 ACM Conferenceon Innovation and Technology in Computer Science Education, P159, DOI DOI 10.1145/3341525.3387404
   Dietl W, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2049706.2049709
   Dominik Dietler, 2018, Bachelor's Thesis
   Du Boulay B., 1986, Journal of Educational Computing Research, V2, P57, DOI 10.2190/3LFX-9RRF-67T8-UVK9
   Dyer T, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527323
   Farghally MF, 2017, PROCEEDINGS OF THE 2017 ACM SIGCSE TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION (SIGCSE'17), P207, DOI 10.1145/3017680.3017756
   Fleiss J.L., 2004, Statistical Methods for Rates and Proportions, VThird, P1, DOI [10.1002/0471445428, DOI 10.1002/0471445428]
   Fulton KR, 2021, PROCEEDINGS OF THE SEVENTEENTH SYMPOSIUM ON USABLE PRIVACY AND SECURITY (SOUPS 2021), P597
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Guide to Rustc Development, 2023, The MIR (Mid-level IR).
   Guo Philip J., 2013, P 44 ACM TECHN S COM, P579
   Hamouda S, 2017, COMPUT SCI EDUC, V27, P121, DOI 10.1080/08993408.2017.1414728
   Hattie JAC, 2009, VISIBLE LEARNING: A SYNTHESIS OF OVER 800 META-ANALYSES RELATING TO ACHIEVEMENT, P1
   Egan MH, 2021, COMPUT SCI EDUC, V31, P340, DOI 10.1080/08993408.2020.1777034
   Herman GL, 2010, SIGCSE 10: PROCEEDINGS OF THE 41ST ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P102
   Hestenes D., 1992, PHYS TEACH, V30, P141, DOI DOI 10.1119/1.2343497
   Ishizue R, 2018, SIGCSE'18: PROCEEDINGS OF THE 49TH ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P245, DOI 10.1145/3159450.3159566
   Je.rey Vander Stoep, 2022, Memory Safe Languages in Android 13.
   Jordan K., 2015, MOOC Completion Rates: The data
   Jung Ralf, 2023, RalfJung/minirust: A precise specification for "Rust lite / MIR plus
   Kaczmarczyk LC, 2010, SIGCSE 10: PROCEEDINGS OF THE 41ST ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P107
   Klabnik Steve, 2022, The Rust Programming Language
   Krishnaswami N, 2005, ACM SIGPLAN NOTICES, V40, P96, DOI 10.1145/1064978.1065023
   Lam J, 2022, PROCEEDINGS OF THE 53RD ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION (SIGCSE 2022), VOL 1, P703, DOI 10.1145/3478431.3499391
   LANDIS JR, 1977, BIOMETRICS, V33, P159, DOI 10.2307/2529310
   Lindell RS, 2007, AIP CONF PROC, V883, P14
   Lubin J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485532
   Marceau G, 2011, SIGCSE 11: PROCEEDINGS OF THE 42ND ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P499
   Marceau Guillaume, 2011, P 7 INT WORKSH COMP, P39, DOI DOI 10.1145/2016911.2016921
   Matsakis Nicholas, 2018, An alias-based formulation of the borrow checker
   Matsakis Niko., 2023, nikomatsakis/a-mir-formality: a model of MIR and the Rust type/trait system
   McNamara T., 2021, Rust in Action
   MSRC Team, 2019, We need a safer systems programming language.
   Ongaro D., 2014, 2014 USENIX ANN TECH, P305
   Östlund J, 2008, LECT NOTES BUS INF P, V11, P178
   Porter L, 2019, ICER '19 - PROCEEDINGS OF THE 2019 ACM CONFERENCE ON INTERNATIONAL COMPUTING EDUCATION RESEARCH, P111, DOI 10.1145/3291279.3339404
   Poulsen S, 2022, ACM T COMPUT EDUC, V22, DOI 10.1145/3451346
   Ringer T, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P99, DOI 10.1145/3372885.3373823
   Rivera E, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547633
   Sorva J, 2013, ACM T COMPUT EDUC, V13, DOI 10.1145/2490822
   Taylor A, 2023, PROCEEDINGS OF THE 54TH ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, VOL 1, SIGCSE 2023, P346, DOI 10.1145/3545945.3569768
   The Rust Programming Language, 2023, rust-lang/polonius: Defines the rust borrow checker
   The Rust Programming Language, 2023, rust-lang/miri: An interpreter for Rust's mid-level intermediate representation
   The Rust Survey Team, 2020, Rust Survey 2020 Results
   Wand Mitchell, 1986, POPL, P38, DOI [DOI 10.1145/512644.512648, 10.1145/512644.512648]
   Webb KC, 2014, PROCEEDINGS OF THE 45TH ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION (SIGCSE'14), P103, DOI 10.1145/2538862.2538886
   Weiss A, 2021, Arxiv, DOI arXiv:1903.00982
   Wittie L, 2017, PROC FRONT EDUC CONF
   Wolverson Herbert., 2021, Handson rust
   Yanovski J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473597
   Zeng Anna, 2019, OpenAccess Series in Informatics (OASIcs), V5, P1
   Zhang DF, 2014, ACM SIGPLAN NOTICES, V49, P569, DOI 10.1145/2535838.2535870
   Zhu SF, 2022, PROC INT CONF SOFTW, P1269, DOI 10.1145/3510003.3510164
NR 65
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 265
DI 10.1145/3622841
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100045
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Greenman, B
   Felleisen, M
   Dimoulas, C
AF Greenman, Ben
   Felleisen, Matthias
   Dimoulas, Christos
TI How Profilers Can Help Navigate Type Migration
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE gradual typing; migratory typing; rational programmer; profiling
AB Sound migratory typing envisions a safe and smooth refactoring of untyped code bases to typed ones. However, the cost of enforcing safety with run-time checks is often prohibitively high, thus performance regressions are a likely occurrence. Additional types can often recover performance, but choosing the right components to type is difficult because of the exponential size of the migratory typing lattice. In principal though, migration could be guided by off-the-shelf profiling tools. To examine this hypothesis, this paper follows the rational programmer method and reports on the results of an experiment on tens of thousands of performance-debugging scenarios via seventeen strategies for turning profiler output into an actionable next step. The most effective strategy is the use of deep types to eliminate the most costly boundaries between typed and untyped components; this strategy succeeds in more than 50% of scenarios if two performance degradations are tolerable along the way.
C1 [Greenman, Ben] Univ Utah, PLT, Salt Lake City, UT 84112 USA.
   [Felleisen, Matthias] Northeastern Univ, PLT, Boston, MA USA.
   [Dimoulas, Christos] Northeastern Univ, PLT, Evanston, IL USA.
   [Greenman, Ben] Brown Univ, Providence, RI 02912 USA.
C3 Utah System of Higher Education; University of Utah; Northeastern
   University; Northwestern University; Brown University
RP Greenman, B (corresponding author), Univ Utah, PLT, Salt Lake City, UT 84112 USA.; Greenman, B (corresponding author), Brown Univ, Providence, RI 02912 USA.
EM benjaminlgreenman@gmail.com; matthias@ccs.neu.edu;
   chrdimo@northwestern.edu
OI Greenman, Ben/0000-0001-7078-9287; Dimoulas,
   Christos/0000-0002-9338-7034
CR An JH, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P459, DOI 10.1145/1926385.1926437
   Andersen L, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3275519
   Bauman S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133878
   Bauman S, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P22, DOI 10.1145/2784731.2784740
   Ben Greenman, 2023, PROCEEDINGS OF THE 1ST ACM CONFERENCE ON REPRODUCIBILITY AND REPLICABILITY, REP'23, P102, DOI 10.1145/3589806.3600034
   Bierman G, 2014, LECT NOTES COMPUT SC, V8586, P257
   BIGGERSTAFF TJ, 1994, COMMUN ACM, V37, P72, DOI 10.1145/175290.175300
   Campora JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236793
   Campora JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158103
   Castagna G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290329
   Chandra Satish., 2016, Object-Oriented Programming Systems Languages and Applications (OOPSLA), DOI [DOI 10.1145/2983990.2984017, 10.1145/2983990. 2984017]
   Chaudhuri A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133872
   Cristiani F, 2021, PROCEEDINGS OF THE 18TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON MANAGED PROGRAMMING LANGUAGES AND RUNTIMES (MPLR '2021), P97, DOI 10.1145/3475738.3480941
   Duplyakin D, 2019, PROCEEDINGS OF THE 2019 USENIX ANNUAL TECHNICAL CONFERENCE, P1
   Feltey D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276503
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Flatt M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341642
   Flatt M, 2014, ACM SIGPLAN NOTICES, V49, P13, DOI [10.1145/2637365.2517211, 10.1145/2517208.2517211]
   Furr M, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P283
   Furr Michael, 2009, P 2009 ACM S APPL CO, P1859
   Garcia R, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2676726.2676992, 10.1145/2775051.2676992]
   Gariano IO, 2019, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON VIRTUAL MACHINES AND INTERMEDIATE LANGUAGES (VMIL '19), P58, DOI 10.1145/3358504.3361232
   Georges A, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P57
   Graham S. L., 1982, SIGPLAN Notices, V17, P120, DOI 10.1145/872726.806987
   Greenberg M, 2015, ACM SIGPLAN NOTICES, V50, P181, DOI [10.1145/2775051.2676967, 10.1145/2676726.2676967]
   Greenman B, 2023, ACM T PROGR LANG SYS, V45, DOI 10.1145/3579833
   Greenman B, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P580, DOI 10.1145/3519939.3523430
   Greenman B, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360548
   Greenman B, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000217
   Greenman B, 2018, PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'18), P30, DOI 10.1145/3162066
   Greenman Ben., 2023, Artifact: How Profilers Can Help Navigate Type Migration, DOI [10.5281/zenodo.8148784, DOI 10.5281/ZENODO.8148784]
   Greenman Ben, 2020, Ph. D. Dissertation
   Greenman Ben, 2022, Programming, V6, P1
   Hauswirth M, 2004, ACM SIGPLAN NOTICES, V39, P251, DOI 10.1145/1035292.1028998
   Henrich J, 2001, AM ECON REV, V91, P73, DOI 10.1257/aer.91.2.73
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Jesse K, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P1483, DOI 10.1145/3468264.3473135
   Kristensen EK, 2017, LECT NOTES COMPUT SC, V10202, P99, DOI 10.1007/978-3-662-54494-5_6
   Kuhlenschmidt A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P517, DOI 10.1145/3314221.3314627
   Lazarek L, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473573
   Lazarek Lukas, 2020, POPL, V65, P1
   Lazarek Lukas, 2023, ICFP, V7
   Lu Kuang-Chen, 2023, Programming, V7
   Malik RS, 2019, PROC INT CONF SOFTW, P304, DOI 10.1109/ICSE.2019.00045
   Migeed Z, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371097
   Mill JohnStuart., 1874, ESSAYS SOME UNSETTLE, V2nd
   Miyazaki Y, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290331
   Moy C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434334
   Muehlboeck F, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485504
   Muehlboeck F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133880
   Mytkowicz T, 2009, ACM SIGPLAN NOTICES, V44, P265, DOI 10.1145/1508284.1508275
   Nguyen Linh Chi, 2016, EAI Endorsed Trans. Serious Games, V3, P5, DOI [10.4108/eai.3-12-2015.2262403, DOI 10.4108/EAI.3-12-2015.2262403]
   Patel Sanjay, 2016, RotateRight Zoom
   Phipps-Costin L, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485488
   Rastogi A, 2015, ACM SIGPLAN NOTICES, V50, P167, DOI [10.1145/2775051.2676971, 10.1145/2676726.2676971]
   Rastogi A, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P481
   Richards G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133879
   Richards Gregor., 2015, Proc. European Conference on Object-Oriented Programming, P76, DOI DOI 10.4230/LIPICS.ECOOP.2015.76
   Roberts Richard, 2019, ECOOP, V15
   Saftoiu Claudiu, 2010, JSTrace: Run-time Type Discovery for JavaScript
   Siek J.G., 2008, Proceedings of the 2008 symposium on Dynamic languages, P7, DOI DOI 10.1145/1408681.1408688
   Siek J, 2015, ACM SIGPLAN NOTICES, V50, P425, DOI [10.1145/2737924.2737968, 10.1145/2813885.2737968]
   Siek J, 2009, LECT NOTES COMPUT SC, V5502, P17, DOI 10.1007/978-3-642-00590-9_2
   Siek JG, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000101
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   Siek Jeremy G., 2006, SFP
   Simon H.A., 2013, ADM BEHAV
   Singer Jeremy, 2006, PPPJ, P31, DOI [10.1145/1168054.1168060, DOI 10.1145/1168054.1168060]
   St-Amour V, 2015, LECT NOTES COMPUT SC, V9031, P49, DOI 10.1007/978-3-662-46663-6_3
   St-Amour Vincent, 2015, Ph. D. Dissertation
   Swamy N, 2014, ACM SIGPLAN NOTICES, V49, P425, DOI 10.1145/2535838.2535889
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Tobin-Hochstadt Sam, 2017, SNAPL, V17, P1, DOI [DOI 10.4230/LIPICS.SNAPL.2017.17, 10.4230/LIPIcs.SNAPL.2017.17]
   Tsuda Yuya, 2020, Space Efficient Gradual Typing in Coercion Passing Style, V8, P29, DOI [10.4230/LIPICS.ECOOP.2020.8, DOI 10.4230/LIPICS.ECOOP.2020.8]
   Vitousek MM, 2019, PROCEEDINGS OF THE 15TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES (DLS '19), P28, DOI 10.1145/3359619.3359742
   Vitousek MM, 2017, ACM SIGPLAN NOTICES, V52, P762, DOI 10.1145/3093333.3009849
   Vitousek MM, 2015, ACM SIGPLAN NOTICES, V50, P45, DOI 10.1145/2661088.2661101
   Vitousek Michael M., 2019, Ph. D. Dissertation
   Wei J., 2020, ICLR
   Wong B, 2011, NAT METHODS, V8, P441, DOI 10.1038/nmeth.1618
   Wrigstad T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P377, DOI 10.1145/1706299.1706343
   Yee Ming-Ho., 2023, EUROPEAN C OBJECT OR, DOI [DOI 10.4230/LIPICS.ECOOP.2023.37, 10.4230/LIPIcs.ECOOP.2023.37]
NR 83
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 241
DI 10.1145/3622817
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100021
OA gold
DA 2024-07-18
ER

EF