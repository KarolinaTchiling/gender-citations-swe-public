FN Clarivate Analytics Web of Science
VR 1.0
PT J
AU Wang, Y
   Wang, K
   Wang, LZ
AF Wang, Yu
   Wang, Ke
   Wang, Linzhang
TI An Explanation Method for Models of Code
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Explainability Method; Defining Features; Models of Code
AB This paper introduces a novel method, called WheaCha, for explaining the predictions of code models. Similar to attribution methods, WheaCha seeks to identify input features that are responsible for a particular prediction that models make. On the other hand, it differs from attribution methods in crucial ways. Specifically, WheaCha separates an input program into "wheat " (i.e., defining features that are the reason for which models predict the label that they predict) and the rest "chaff " for any given prediction. We realize WheaCha in a tool, HuoYan, and use it to explain four prominent code models: code2vec, seq-GNN, GGNN, and CodeBERT. Results show that (1) HuoYan is efficient - taking on average under twenty seconds to compute wheat for an input program in an end-to-end fashion (i.e., including model prediction time); (2) the wheat that all models use to make predictions is predominantly comprised of simple syntactic or even lexical properties (i.e., identifier names); (3) neither the latest explainability methods for code models (i.e., SIVAND and CounterFactual Explanations) nor the most noteworthy attribution methods (i.e., Integrated Gradients and SHAP) can precisely capture wheat. Finally, we set out to demonstrate the usefulness of WheaCha, in particular, we assess if WheaCha's explanations can help end users to identify defective code models (e.g., trained on mislabeled data or learned spurious correlations from biased data). We find that, with WheaCha, users achieve far higher accuracy in identifying faulty models than SIVAND, CounterFactual Explanations, Integrated Gradients and SHAP.
C1 [Wang, Yu; Wang, Linzhang] Nanjing Univ, Dept Comp Sci & Technol, State Key Lab Novel Software Technol, Nanjing, Peoples R China.
   [Wang, Ke] Visa Res, New York, NY USA.
C3 Nanjing University
RP Wang, Y (corresponding author), Nanjing Univ, Dept Comp Sci & Technol, State Key Lab Novel Software Technol, Nanjing, Peoples R China.
EM yuwang_cs@nju.edu.cn; kewang@visa.com; lzwang@nju.edu.cn
OI Wang, Ke/0000-0003-0844-5023; Wang, Linzhang/0000-0003-4794-1652
FU National Natural Science Foundation of China [62032010, 62202220];
   Jiangsu Funding Program for Excellent Postdoctoral Talent
FX The authors would like to thank the anonymous reviewers for their
   comments and suggestions on the paper. This work was partially supported
   by the National Natural Science Foundation of China under Grant No.
   62032010 and No. 62202220, and Jiangsu Funding Program for Excellent
   Postdoctoral Talent.
CR Adebayo Julius., 2020, Advances in Neural Information Processing Systems, V33, P700
   Allamanis M., 2018, INT C LEARN REPR ICL
   Allamanis M, 2016, PR MACH LEARN RES, V48
   Alon U., 2019, PROC 7 INT C LEARN R
   Alon U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290353
   Bach S, 2015, PLOS ONE, V10, DOI 10.1371/journal.pone.0130140
   Bader J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360585
   Badgeley MA, 2019, NPJ DIGIT MED, V2, DOI 10.1038/s41746-019-0105-1
   Bahdanau Dzmitry, 2015, INT C LEARN REPR IC
   Burns Collin, 2020, FODS '20: Proceedings of the 2020 Foundations of Data Science Conference, P47, DOI 10.1145/3412815.3416889
   Chen YJ, 2020, LECT NOTES COMPUT SC, V12225, P587, DOI 10.1007/978-3-030-53291-8_30
   Chen ZM, 2021, IEEE T SOFTWARE ENG, V47, P1943, DOI 10.1109/TSE.2019.2940179
   Cito J, 2022, 2022 ACM/IEEE 44TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2022), P125, DOI [10.1145/3510457.3513081, 10.1109/ICSE-SEIP55303.2022.9794112]
   Dinella Elizabeth, 2019, INT C LEARN REPR ICL
   Feng ZY, 2020, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2020, P1536
   Fernandes P, 2019, 7 INT C LEARNING REP
   Gao FJ, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591227
   Gu Q., 2011, Graphics Interface 2011, P266, DOI DOI 10.5555/1992917.1992919
   Hooker S, 2019, ADV NEUR IN, V32
   Husain H, 2020, Arxiv, DOI arXiv:1909.09436
   KeWang Rishabh Singh, 2018, INT C LEARN REPR ICL
   Li Y., 2016, ICLR, P1, DOI DOI 10.48550/ARXIV.1511.05493
   Lundberg SM, 2017, ADV NEUR IN, V30
   Nong Y., 2023, P 45 INT C SOFTW ENG
   Odena Augustus, 2021, INT C LEARN REPR ICL
   Patra J, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P906, DOI 10.1145/3468264.3468623
   Pradel M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276517
   Rabin MRI, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P441, DOI 10.1145/3468264.3468539
   Rabin MRI, 2021, INFORM SOFTWARE TECH, V135, DOI 10.1016/j.infsof.2021.106552
   Ribeiro MT, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1135, DOI 10.1145/2939672.2939778
   Shi Kensen, 2022, INT C LEARN REPR ICL
   Shrikumar A, 2017, PR MACH LEARN RES, V70
   Shrikumar Avanti, 2016, arXiv, DOI DOI 10.48550/ARXIV.1605.01713
   Simonyan Karen, 2014, WORKSH P INT C LEARN
   Sundararajan M, 2017, PR MACH LEARN RES, V70
   Suneja S, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P945, DOI 10.1145/3468264.3468545
   Tantithamthavorn C, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P1, DOI 10.1109/ASE51524.2021.9678580
   Wang K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P121, DOI 10.1145/3385412.3385999
   Wang Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428205
   Yang Jingkang, Advances in Neural Information Processing Systems (NeurIPS '22, V35, P32598
   Yang Z, 2022, PROC INT CONF SOFTW, P1482, DOI 10.1145/3510003.3510146
   Yefet N, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428230
   Zeiler MD, 2011, IEEE I CONF COMP VIS, P2018, DOI 10.1109/ICCV.2011.6126474
   Zeller A, 2002, IEEE T SOFTWARE ENG, V28, P183, DOI 10.1109/32.988498
   Zeller A, 1999, LECT NOTES COMPUT SC, V1687, P253, DOI 10.1145/318774.318946
   Zhang XM, 2018, ADV NEUR IN, V31
   Zhao Z, 2010, AAAI CONF ARTIF INTE, P673
   Zhou Y, 2022, ACM T SOFTW ENG METH, V31, DOI 10.1145/3501256
   Zintgraf L. M., 2017, ARXIV170204595, P1
NR 49
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 250
DI 10.1145/3622826
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100030
OA gold
DA 2024-07-18
ER

PT J
AU Elliott, C
AF Elliott, Conal
TI Timely Computation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compositional correctness; digital design; linear algebra
ID REFINEMENT TYPES
AB This paper addresses the question "what is a digital circuit?" in relation to the fundamentally analog nature of actual (physical) circuits. A simple informal definition is given and then formalized in the proof assistant Agda. At the heart of this definition is the timely embedding of discrete information in temporally continuous signals. Once this embedding is defined (in constructive logic, i.e., type theory), it is extended in a generic fashion from one signal to many and from simple boolean operations ( logic gates) to arbitrarily sophisticated sequential and parallel compositions, i.e., to computational circuits.
   Rather than constructing circuits and then trying to prove their correctness, a compositionally correct methodology maintains specification, implementation, timing, and correctness proofs at every step. Compositionality of each aspect and of their combination is supported by a single, shared algebraic vocabulary and related by homomorphisms. After formally defining and proving these notions, a few key transformations are applied to reveal the linearity of circuit timing (over a suitable semiring), thus enabling practical, modular, and fully verified timing analysis as linear maps over higher-dimensional time intervals.
   An emphasis throughout the paper is simplicity and generality of specification, minimizing circuit-specific definitions and proofs while highlighting a broadly applicable methodology of scalable, compositionally correct engineering through simple denotations and homomorphisms.
EM conal@conal.net
CR Agda Team, 2022, The Agda standard Library
   [Anonymous], 2013, ACM SIGPLAN NOTICES, V48, P101, DOI 10.1145/2500365.2500613
   [Anonymous], 1998, Categories for the working mathematician
   Baez J, 2011, LECT NOTES PHYS, V813, P95, DOI 10.1007/978-3-642-12821-9_2
   Bove A, 2009, LECT NOTES COMPUT SC, V5674, P73, DOI 10.1007/978-3-642-03359-9_6
   Capretta Venanzio, 2016, P 28 S IMPLEMENTATIO
   DIJKSTRA EW, 1972, COMMUN ACM, V15, P859, DOI 10.1145/355604.361591
   Elliott C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473583
   Elliott C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236765
   Elliott C, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110271
   Elliott Conal, 2023, Felix: An Agda category theory library for denotational design
   Elliott Conal, 2019, arXiv
   Flor Joao Paulo Pizani, 2018, 21 INT C TYPES PROOF
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Gell-Mann Murray, 2009, Beauty and Elegance in Physics
   Ghica Dan R., 2016, 2016 FORMAL METHODS
   Ghica Dan R, 2017, 26 EACSL ANN C COMPU
   Gibbons Jeremy, 2002, Lecture Notes in Computer Science, V2297
   Golan Jonathan S., 2005, INT C ALGEBRA MEMORY
   Hanna F. K., 1992, Philosophical Transactions of the Royal Society of London. Series A: Physical and Engineering Sciences, V339
   Harrison William L., 2021, 23 INT S PRINCIPLES
   HUGHES J, 1989, COMPUT J, V32, P98, DOI 10.1093/comjnl/32.2.98
   Hutton Graham, 2011, Journal of Functional Programming
   Kim Martha A., 2015, Technical Report CUCS- 017-15
   LEISERSON CE, 1991, ALGORITHMICA, V6, P5, DOI 10.1007/BF01759032
   Lovas W, 2009, LECT NOTES COMPUT SC, V5608, P157, DOI 10.1007/978-3-642-02273-9_13
   Macedo HD, 2013, SCI COMPUT PROGRAM, V78, P2160, DOI 10.1016/j.scico.2012.07.012
   Matthews J, 1998, 1998 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, PROCEEDINGS, P90, DOI 10.1109/ICCL.1998.674160
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   ODonnell John T., 1987, IFIP 8 INT S HARDWAR
   Procter A, 2015, ACM SIGPLAN NOTICES, V50, DOI 10.1145/2670529.2754970
   Riehl E., 2016, Category Theory in Context
   Santos Armando, 2020, P 13 ACM SIGPLAN INT
   Sheeran M, 2005, J UNIVERS COMPUT SCI, V11, P1135
   Sheeran Mary, 1988, IFIP WORKSHOP FUSION
   Sheeran Mary, 1984, P 1984 ACM S LISP FU
   Wadler P, 2015, COMMUN ACM, V58, P75, DOI 10.1145/2699407
   Wilding David, 2015, Ph. D. Dissertation
   Zhai KY, 2015, 2015 INTERNATIONAL CONFERENCE ON HARDWARE/SOFTWARE CODESIGN AND SYSTEM SYNTHESIS (CODES+ISSS), P83, DOI 10.1109/CODESISSS.2015.7331371
NR 39
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 219
DI 10.1145/3607861
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900032
OA gold
DA 2024-07-18
ER

PT J
AU Lehmann, N
   Geller, AT
   Vazou, N
   Jhala, R
AF Lehmann, Nico
   Geller, Adam T.
   Vazou, Niki
   Jhala, Ranjit
TI Flux: Liquid Types for Rust
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Rust; liquid types; heap-manipulating programs
ID REFINEMENT TYPES
AB We introduce Flux, which shows how logical refinements can work hand-in-glove with Rust's ownership mechanisms to yield ergonomic type-based verification of low-level pointer manipulating programs. First, we design a novel refined type system for Rust that indexes mutable locations, with pure (immutable) values that can appear in refinements, and then exploits Rust's ownership mechanisms to abstract sub-structural reasoning about locations within Rust's polymorphic type constructors, while supporting strong updates. We formalize the crucial dependency upon Rust's strong aliasing guarantees by exploiting the stacked borrows aliasing model to prove that "well-borrowed evaluations of well-typed programs do not get stuck". Second, we implement our type system in Flux, a plug-in to the Rust compiler that exploits the factoring of complex invariants into types and refinements to efficiently synthesize loop annotations-including complex quantified invariants describing the contents of containers-via liquid inference. Third, we evaluate Flux with a benchmark suite of vector manipulating programs and a previously verified secure sandboxing library to demonstrate the advantages of refinement types over program logics as implemented in the state-of-theart Prusti verifier. While Prusti's more expressive program logic can, in general, verify deep functional correctness specifications, for the lightweight but ubiquitous and important verification use-cases covered by our benchmarks, liquid typing makes verification ergonomic by whittling specification lines by a factor of two, verification time by an order of magnitude, and annotation overhead from up to 24% of code size (average 14%), to nothing at all.
C1 [Lehmann, Nico; Jhala, Ranjit] Univ Calif San Diego, La Jolla, CA 92093 USA.
   [Geller, Adam T.] Univ British Columbia, Vancouver, BC, Canada.
   [Vazou, Niki] IMDEA, Madrid, Spain.
C3 University of California System; University of California San Diego;
   University of British Columbia; IMDEA Materials Institute
RP Lehmann, N (corresponding author), Univ Calif San Diego, La Jolla, CA 92093 USA.
EM nlehmann@ucsd.edu; atgeller@cs.ubc.ca; niki.vazou@imdea.org;
   rjhala@ucsd.edu
OI Vazou, Niki/0000-0003-0732-5476; Geller, Adam T./0009-0008-8137-7577;
   Jhala, Ranjit/0000-0002-1802-9421
FU NSF [CNS-2120642, CNS-2155235, CCF-1918573, CCF-1911213]; Horizon Europe
   ERC Starting Grant CRETE [101039196]; US Office of Naval Research
   HACKCRYPT [N00014-19-1-2292]; European Research Council (ERC)
   [101039196] Funding Source: European Research Council (ERC)
FX We thank the reviewers who evaluated the artifact for sharing their
   experience using Flux, our shepherd Peter-Michael Osera and the
   anonymous referees for their excellent suggestions for improving the
   paper, and Gilles Barthe who helped us flesh out the design of Flux in
   its early stages. This work was supported by the NSF grants CNS-2120642,
   CNS-2155235, CCF-1918573, CCF-1911213, the Horizon Europe ERC Starting
   Grant CRETE (GA: 101039196), the US Office of Naval Research HACKCRYPT
   (Ref. N00014-19-1-2292), and generous gifts from Microsoft Research.
CR Ahmed A, 2007, FUND INFORM, V77, P397
   Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7682468
   Appel Andrew W., 1991, COMPILING CONTINUATI, DOI [10.1017/CBO9780511609619, DOI 10.1017/CBO9780511609619]
   Astrauskas V, 2022, LECT NOTES COMPUT SC, V13260, P88, DOI 10.1007/978-3-031-06773-0_5
   Astrauskas V, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360573
   Bakst A, 2016, LECT NOTES COMPUT SC, V9583, P65, DOI 10.1007/978-3-662-49122-5_3
   Balasubramanian A, 2017, OPER SYST REV, V51, P94, DOI 10.1145/3139645.3139660
   Bjorner N, 2015, LECT NOTES COMPUT SC, V9300, P24, DOI 10.1007/978-3-319-23534-9_2
   Clarke Dave, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P15, DOI 10.1007/978-3-642-36946-9_3
   Clarke D. G., 1998, Conference Proceedings OOPSLA'98. Conference on Object-Oriented Programming, Systems, Languages and Applications, P48
   Constable R. L., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P183
   Cosman B, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110270
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Denis Xavier, 2022, Formal Methods and Software Engineering: 23rd International Conference on Formal Engineering Methods, ICFEM 2022, Proceedings. Lecture Notes in Computer Science (13478), P90, DOI 10.1007/978-3-031-17244-1_6
   Economou DJ, 2023, Arxiv, DOI arXiv:2209.13000
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Ho S, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547647
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Jhala R, 2021, FOUND TRENDS PROGRAM, V6, P159, DOI 10.1561/2500000032
   Johnson E, 2023, P IEEE S SECUR PRIV, P2940, DOI 10.1109/SP46215.2023.10179357
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371109
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Kawaguchi M, 2012, ACM SIGPLAN NOTICES, V47, P45, DOI 10.1145/2345156.2254071
   Kloos Johannes, 2015, LIPICS, V37, P396, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Lehmann Nico, 2023, FLUX LIQUID TYPES RU
   Leino KRM, 2016, LECT NOTES COMPUT SC, V9779, P361, DOI 10.1007/978-3-319-41528-4_20
   Lindner M, 2018, IEEE INTL CONF IND I, P108, DOI 10.1109/INDIN.2018.8471992
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Matsakis Nicholas, 2018, An alias-based formulation of the borrow checker
   Matsushita Y, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3462205
   Merigoux Denis, 2021, THESIS INRIA
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rondon P, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P131, DOI 10.1145/1706299.1706316
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Rushby J, 1998, IEEE T SOFTWARE ENG, V24, P709, DOI 10.1109/32.713327
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   Toman J, 2020, LECT NOTES COMPUT SC, V12075, P684, DOI 10.1007/978-3-030-44914-8_25
   Ullrich Sebastian, 2016, THESIS KIT
   VanHattum A, 2022, 2022 ACM/IEEE 44TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2022), P321, DOI [10.1145/3510457.3513031, 10.1109/ICSE-SEIP55303.2022.9794041]
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158141
   Weiss A, 2021, Arxiv, DOI arXiv:1903.00982
   Xi HW, 2004, ANN NY ACAD SCI, V3085, P394
   Zhu DP, 2005, LECT NOTES COMPUT SC, V3350, P83
NR 49
TC 4
Z9 4
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 169
DI 10.1145/3591283
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900065
OA gold
DA 2024-07-18
ER

PT J
AU Nigam, R
   De Amorim, PHA
   Sampson, A
AF Nigam, Rachit
   De Amorim, Pedro Henrique Azevedo
   Sampson, Adrian
TI Modular Hardware Design with Timeline Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Hardware Description Language; Type System
ID LANGUAGE
AB Modular design is a key challenge for enabling large-scale reuse of hardware modules. Unlike software, however, hardware designs correspond to physical circuits and inherit constraints from them. Timing constraints-which cycle a signal arrives, when an input is read-and structural constraints-how often a multiplier accepts new inputs-are fundamental to hardware interfaces. Existing hardware design languages do not provide a way to encode these constraints; a user must read documentation, build scripts, or in the worst case, a module's implementation to understand how to use it. We present Filament, a language for modular hardware design that supports the specification and enforcement of timing and structural constraints for statically scheduled pipelines. Filament uses timeline types, which describe the intervals of clock-cycle time when a given signal is available or required. Filament enables safe composition of hardware modules, ensures that the resulting designs are correctly pipelined, and predictably lowers them to efficient hardware.
C1 [Nigam, Rachit; De Amorim, Pedro Henrique Azevedo; Sampson, Adrian] Cornell Univ, Ithaca, NY USA.
C3 Cornell University
RP Nigam, R (corresponding author), Cornell Univ, Ithaca, NY USA.
EM rnigam@cs.cornell.edu
OI Nigam, Rachit/0000-0003-0983-5867
FU Center for Applications Driving Architectures (ADA), one of six centers
   of JUMP, a Semiconductor Research Corporation program - DARPA; NSF
   [1845952, 2124045, 1909073]
FX We thank Stephen Neuendorffer, Drew Zagieboylo, Ryan Doenges, Andrew
   Appel, Christopher Batten, and Zhiru Zhang for insightful conversations
   and David Durst for helping reproduce Aetherling's evaluation. Many
   thanks to our anonymous reviewers who provided valuable feedback and
   pointers to related work. This work was supported in part by the Center
   for Applications Driving Architectures (ADA), one of six centers of
   JUMP, a Semiconductor Research Corporation program co-sponsored by
   DARPA. It was also supported by NSF awards #1845952, #2124045, and
   #1909073 and gifts from Google and SambaNova.
CR AMD Inc, 2022, XIL LOGICORE IP MULT
   AMD Inc, 2017, UG902 AMD INC
   [Anonymous], 2005, A practical guide for SystemVerilog Assertions
   Baaij C, 2010, 13TH EUROMICRO CONFERENCE ON DIGITAL SYSTEM DESIGN: ARCHITECTURES, METHODS AND TOOLS, P714, DOI 10.1109/DSD.2010.21
   Bachrach J, 2012, DES AUT CON, P1212
   BERRY G, 1992, SADHANA-ACAD P ENG S, V17, P95, DOI 10.1007/BF02811340
   Bjesse P, 1999, ACM SIGPLAN NOTICES, V34, P174, DOI 10.1145/291251.289440
   Bourgeat T, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P243, DOI 10.1145/3385412.3385965
   BOUSSINOT F, 1991, P IEEE, V79, P1293, DOI 10.1109/5.97299
   Brookes S, 2004, LECT NOTES COMPUT SC, V3170, P16
   Cadence Inc, 2022, JASP GOLD FPV APP
   Canis A, 2011, FPGA 11: PROCEEDINGS OF THE 2011 ACM/SIGDA INTERNATIONAL SYMPOSIUM ON FIELD PROGRAMMABLE GATE ARRAYS, P33
   Caspi Paul, 2008, REAL TIME SYSTEMS DE
   Choi J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110268
   Christensen M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P175, DOI 10.1145/3453483.3454037
   Clarke Edmund M., 1997, P INT C FDN SOFTW TE, P54, DOI DOI 10.1007/BFB0058022
   Clow J, 2017, I C FIELD PROG LOGIC
   Cocotb Authors, 2023, COC COR BAS COS LIBR
   Cong J, 2018, ICCAD-IEEE ACM INT, DOI 10.1145/3240765.3240838
   Das A, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236786
   de Muijnck-Hughes Jan, 2019, EUROPEAN C OBJECT OR, DOI DOI 10.4230/LIPICS.ECOOP.2019.6
   Durst D, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P408, DOI 10.1145/3385412.3385983
   Flor JP Pizani, 2014, THESIS
   Ghica Dan R, 2009, ARXIV
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Hegarty J, 2016, ACM T GRAPHIC, V35, DOI 10.1145/2897824.2925892
   Hegarty J, 2014, ACM T GRAPHIC, V33, DOI 10.1145/2601097.2601174
   IP-XACT Working Group, 2023, IP XACT
   Jane Street, 2022, HARDC REG TRANSF LEV
   Kemmerer Julian, 2022, PIPELINEC
   Koeplinger D, 2018, ACM SIGPLAN NOTICES, V53, P296, DOI [10.1145/3296979.3192379, 10.1145/3192366.3192379]
   KUNG HT, 1982, COMPUTER, V15, P37, DOI 10.1109/MC.1982.1653825
   Lockhart D, 2014, INT SYMP MICROARCH, P280, DOI 10.1109/MICRO.2014.50
   Majumder K, 2021, Arxiv, DOI arXiv:2103.00194
   Mattarei C, 2018, PROCEEDINGS OF THE 2018 18TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P7
   Murray Kevin E., 2014, INT S FIELD PROGRAMM, DOI DOI 10.1145/2554688.2554786
   Nigam R, 2023, Arxiv, DOI arXiv:2304.10646
   Nigam R, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P804, DOI 10.1145/3445814.3446712
   Nigam R, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P393, DOI 10.1145/3385412.3385974
   Nigam Rachit, 2023, ZENODO, DOI DOI 10.5281/ZENODO.7709916
   Nikhil R, 2004, Second ACM and IEEE International Conference on Formal Methods and Models for Co-Design, Proceedings, P69
   Pilato C, 2013, I C FIELD PROG LOGIC
   Pu J, 2017, ACM T ARCHIT CODE OP, V14, DOI 10.1145/3107953
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Skarman F, 2023, Arxiv, DOI [arXiv:2304.03079, 10.48550/arXiv.2304.03079, DOI 10.48550/ARXIV.2304.03079]
   Synopsys Inc, 2023, SYN DES CONSTR
   Thies W, 2002, LECT NOTES COMPUT SC, V2304, P179
   Vega L, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P756, DOI 10.1145/3453483.3454075
   Zhang Zhiru, 2008, HighLevel Synthesis: From Algorithm to Digital Circuit, P99
NR 50
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 120
DI 10.1145/3591234
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900016
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Xu, A
   Molavi, A
   Pick, L
   Tannu, S
   Albarghouthi, A
AF Xu, Amanda
   Molavi, Abtin
   Pick, Lauren
   Tannu, Swamit
   Albarghouthi, Aws
TI Synthesizing Quantum-Circuit Optimizers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantum computing; probabilistic verification
ID PEEPHOLE OPTIMIZATIONS; VERIFICATION
AB Near-term quantum computers are expected to work in an environment where each operation is noisy, with no error correction. Therefore, quantum-circuit optimizers are applied to minimize the number of noisy operations. Today, physicists are constantly experimenting with novel devices and architectures. For every new physical substrate and for every modification of a quantum computer, we need to modify or rewrite major pieces of the optimizer to run successful experiments. In this paper, we present qeso, an efficient approach for automatically synthesizing a quantum-circuit optimizer for a given quantum device. For instance, in 1.2 minutes, qeso can synthesize an optimizer with high-probability correctness guarantees for ibm computers that significantly outperforms leading compilers, such as ibm's Qiskit and tket, on the majority (85%) of the circuits in a diverse benchmark suite.
   A number of theoretical and algorithmic insights underlie qeso: (1) An algebraic approach for representing rewrite rules and their semantics. This facilitates reasoning about complex symbolic rewrite rules that are beyond the scope of existing techniques. (2) A fast approach for probabilistically verifying equivalence of quantum circuits by reducing the problem to a special form of polynomial identity testing. (3) A novel probabilistic data structure, called a polynomial identity filter (pif), for efficiently synthesizing rewrite rules. (4) A beam-search-based algorithm that efficiently applies the synthesized symbolic rewrite rules to optimize quantum circuits.
C1 [Xu, Amanda; Molavi, Abtin; Pick, Lauren; Tannu, Swamit; Albarghouthi, Aws] Univ Wisconsin Madison, Madison, WI 53706 USA.
C3 University of Wisconsin System; University of Wisconsin Madison
RP Xu, A (corresponding author), Univ Wisconsin Madison, Madison, WI 53706 USA.
EM axu44@wisc.edu; amolavi@wisc.edu; lpick2@wisc.edu; stannu@wisc.edu;
   aws@cs.wisc.edu
OI Albarghouthi, Aws/0000-0003-4577-175X; Tannu, Swamit/0000-0003-4479-7413
FU NSF [2127309, 1652140, 2212232]; Meta; Amazon; OVCRGE at the University
   of Wisconsin-Madison; Wisconsin Alumni Research Foundation
FX This work is supported by NSF grants #1652140 and #2212232 and awards
   from Meta and Amazon. This research is also partially supported by the
   OVCRGE at the University of Wisconsin-Madison with funding from the
   Wisconsin Alumni Research Foundation. Lauren Pick is supported by NSF
   grant #2127309 to the Computing Research Association for the CIFellows
   Project.
CR Aleksandrowicz Gadi, 2019, Zenodo, DOI 10.5281/ZENODO.2562111
   Amy M, 2019, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.287.1
   Amy M, 2017, LECT NOTES COMPUT SC, V10427, P3, DOI 10.1007/978-3-319-63390-9_1
   Amy M, 2014, IEEE T COMPUT AID D, V33, P1476, DOI 10.1109/TCAD.2014.2341953
   Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7809285
   Barthe G, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2579080
   Becker Heiko, 2022, 36 EUROPEAN C OBJECT, DOI [10.4230/LIPIcs.ECOOP.2022.1, DOI 10.4230/LIPICS.ECOOP.2022.1]
   Bullock SS, 2003, PHYS REV A, V68, DOI 10.1103/PhysRevA.68.012318
   Chareton C, 2021, LECT NOTES COMPUT SC, V12648, P148, DOI 10.1007/978-3-030-72019-3_6
   Courant N, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434321
   Cross AW, 2019, PHYS REV A, V100, DOI 10.1103/PhysRevA.100.032328
   Davis MG, 2020, IEEE INTERNATIONAL CONFERENCE ON QUANTUM COMPUTING AND ENGINEERING (QCE20), P223, DOI 10.1109/QCE49297.2020.00036
   de Brugière TG, 2020, LECT NOTES COMPUT SC, V12227, P189, DOI 10.1007/978-3-030-52482-1_11
   Dilkes S., 2020, ELECTRON P THEOR COM, P213, DOI [DOI 10.4204/EPTCS.318.13, 10.4204/eptcs.318.13]
   Google Quantum-AI, 2021, QUANTUM COMPUTER DAT
   Gulwani S, 2003, ACM SIGPLAN NOTICES, V38, P74, DOI 10.1145/640128.604138
   Hietala K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434318
   ibm, 2022, IBM TOR
   IonQ, 2022, IONQ
   IonQ, 2022, IONQ NATIVE GATES
   Jia ZH, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P47, DOI 10.1145/3341301.3359630
   Kissinger A, 2020, Arxiv, DOI arXiv:1903.10477
   Kissinger A, 2020, Arxiv, DOI arXiv:1904.04735
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Lerner S, 2003, ACM SIGPLAN NOTICES, V38, P220, DOI 10.1145/780822.781156
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Lopes NP, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P65, DOI 10.1145/3453483.3454030
   Lopes NP, 2015, ACM SIGPLAN NOTICES, V50, P22, DOI [10.1145/2813885.2737965, 10.1145/2737924.2737965]
   Meuli G, 2018, LECT NOTES COMPUT SC, V11106, P175, DOI 10.1007/978-3-319-99498-7_12
   Motwani R., 1995, RANDOMIZED ALGORITHM, DOI DOI 10.1017/CBO9780511814075
   Mullen E, 2016, ACM SIGPLAN NOTICES, V51, P448, DOI [10.1145/2980983.2908109, 10.1145/2908080.2908109]
   Nam Y, 2018, NPJ QUANTUM INFORM, V4, DOI 10.1038/s41534-018-0072-4
   Paltenghi M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527330
   Patel T, 2022, ASPLOS '22: PROCEEDINGS OF THE 27TH ACM INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P514, DOI 10.1145/3503222.3507739
   Preskill J, 2018, QUANTUM-AUSTRIA, V2, DOI 10.22331/q-2018-08-06-79
   PyZX, 2023, PYZX FULL API DOCUME
   Rand R, 2019, ELECTRON P THEOR COM, P299, DOI 10.4204/EPTCS.287.17
   Rigetti, 2022, RIG ASP 11
   Saffman Mark, 2019, NEXT STEP MAKING ARR
   Sasnauskas R, 2018, Arxiv, DOI [arXiv:1711.04422, DOI 10.48550/ARXIV.1711.04422]
   Shende VV, 2004, PHYS REV A, V69, DOI 10.1103/PhysRevA.69.062321
   Shi YN, 2020, Arxiv, DOI arXiv:1908.08963
   Smith RS, 2020, QUANTUM SCI TECHNOL, V5, DOI 10.1088/2058-9565/ab9acb
   Sun Chengnian, 2016, P 25 INT S SOFTW TES, P294, DOI DOI 10.1145/2931037.2931074
   Tao RZ, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P641, DOI 10.1145/3519939.3523431
   Wang HJ, 2021, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '21), P37
   Watson TF, 2018, NATURE, V555, P633, DOI 10.1038/nature25766
   Wilen CD, 2021, NATURE, V594, P369, DOI 10.1038/s41586-021-03557-5
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Xu AMD, 2023, Arxiv, DOI arXiv:2211.09691
   Xu MK, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P625, DOI 10.1145/3519939.3523433
NR 51
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 140
DI 10.1145/3591254
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900036
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Castellan, S
   Clairambault, P
AF Castellan, Simon
   Clairambault, Pierre
TI The Geometry of Causality
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Geometry of Interaction; Game Semantics; Shared Memory Concurrency;
   Coloured Petri Nets; Higher-Order
ID FULL ABSTRACTION; EVENT STRUCTURES; PETRI NETS; SEMANTICS
AB We introduce a multi-token machine for Idealized Parallel Algol (IPA), a higher-order concurrent programming language with shared state and semaphores. Our machine takes the shape of a compositional interpretation of terms as Petri structures, certain coloured Petri nets. For the purely functional fragment of IPA, our machine is conceptually close to Geometry of Interaction token machines, originating from Linear Logic and presenting higher-order computation as the low-level process of a token walking through a graph (a proof net) representing the term. We combine here these ideas with folklore ideas on the representation of first-order imperative concurrent programs as coloured Petri nets.
   To prove our machine computationally adequate with respect to the reference operational semantics, we follow game semantics and represent types as certain games specifying dependencies and conflict between computational events. Petri strategies are those Petri structures obeying the rules of the game extracted from the type. We show how Petri strategies unfold to concurrent strategies in the sense of concurrent games on event structures. This link with concurrent strategies not only allows us to prove adequacy of our machine, but also lets us generate operationally a causal description of the behaviour of programs at higher-order types, which is shown to coincide with that given denotationally by the interpretation in concurrent games.
C1 [Castellan, Simon] Univ Rennes, INRIA, CNRS, IRISA, Rennes, France.
   [Clairambault, Pierre] Aix Marseille Univ, Univ Toulon, CNRS, LIS, Marseille, France.
C3 Universite de Rennes; Centre National de la Recherche Scientifique
   (CNRS); Inria; Aix-Marseille Universite; Centre National de la Recherche
   Scientifique (CNRS)
RP Castellan, S (corresponding author), Univ Rennes, INRIA, CNRS, IRISA, Rennes, France.
EM simon.castellan@inria.fr; pierre.clairambault@cnrs.fr
OI Clairambault, Pierre/0000-0002-3285-6028
FU ANR project DyVerSe [ANR-19-CE48-0010-01]; Labex MiLyon of Universite de
   Lyon within the program "Investissements d'Avenir" [ANR-10-LABX-0070,
   ANR11-IDEX-0007]; Agence Nationale de la Recherche (ANR)
   [ANR-19-CE48-0010] Funding Source: Agence Nationale de la Recherche
   (ANR)
FX We are grateful to Olivier Laurent for enlightening discussions on the
   Geometry of Interaction. Work supported by the ANR project DyVerSe
   (ANR-19-CE48-0010-01); and by the Labex MiLyon (ANR-10-LABX-0070) of
   Universite de Lyon, within the program "Investissements d'Avenir"
   (ANR11-IDEX-0007), operated by the French National Research Agency
   (ANR).
CR Abramsky S, 2000, INFORM COMPUT, V163, P409, DOI [10.1006/inco.2000.2930, 10.1006/inco2000.2930]
   Baez JC, 2020, MATH STRUCT COMP SCI, V30, P314, DOI 10.1017/S0960129520000043
   Baillot Patrick, 1999, THESIS AIX MARSEILLE
   Castellan S, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P215, DOI 10.1145/3209108.3209187
   Castellan S, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(3:35)2017
   Castellan S, 2014, ELECTRON NOTES THEOR, V308, P87, DOI 10.1016/j.entcs.2014.10.006
   Castellan Simon, 2020, ARXIV
   Chatain T, 2010, LECT NOTES COMPUT SC, V6128, P165, DOI 10.1007/978-3-642-13675-7_11
   Clairambault Pierre, 2020, PROC ACM PROGRAM LAN, V63, P1
   Dal Lago U, 2017, ACM SIGPLAN NOTICES, V52, P833, DOI 10.1145/3093333.3009859
   Dal Lago U, 2015, IEEE S LOG, P559, DOI 10.1109/LICS.2015.58
   Dal Lago Ugo, 2014, JOINT M 23 EACSL ANN, V35, P1
   Danos V, 1999, THEOR COMPUT SCI, V227, P79, DOI 10.1016/S0304-3975(99)00049-3
   Danos V, 1996, IEEE S LOG, P394
   Ehrhard T, 2012, THEOR COMPUT SCI, V424, P20, DOI 10.1016/j.tcs.2011.11.027
   Ghica DR, 2008, ANN PURE APPL LOGIC, V151, P89, DOI 10.1016/j.apal.2007.10.005
   Ghica DR, 2012, ELECTRON NOTES THEOR, V286, P191, DOI 10.1016/j.entcs.2012.08.013
   Girard Jean-Yves, 1989, Studies in Logic and the Foundations of Mathematics, V127, P221, DOI [10.1016/S0049-237X(08)70271-4, DOI 10.1016/S0049-237X(08)70271-4]
   GIRARD JY, 1995, LONDON MATH SOC LECT, V222, P329
   Gonthier G., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P15, DOI 10.1145/143165.143172
   Hasuo I, 2017, ANN PURE APPL LOGIC, V168, P404, DOI 10.1016/j.apal.2016.10.010
   Hayman Jonathan, 2008, LIPICS, V2, P223
   Hoshino N, 2014, IEEE S LOG, DOI 10.1145/2603088.2603124
   Hyland JME, 2000, INFORM COMPUT, V163, P285, DOI [10.1006/inco.2000.2917, 10.1006/inco2000.2917]
   Jaber G, 2015, LECT NOTES COMPUT SC, V9034, P264, DOI 10.1007/978-3-662-46678-0_17
   Lago UD, 2017, IEEE S LOG
   Laird J, 2007, LECT NOTES COMPUT SC, V4596, P667
   Laurent O, 2001, LECT NOTES COMPUT SC, V2044, P283
   Levy PB, 2014, IEEE S LOG, DOI 10.1145/2603088.2603150
   Mackie I., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P198, DOI 10.1145/199448.199483
   Mazza D, 2005, LECT NOTES COMPUT SC, V3653, P21, DOI 10.1007/11539452_6
   Muroya K, 2016, ACM SIGPLAN NOTICES, V51, P748, DOI 10.1145/2914770.2837672
   Nielsen M, 2002, LECT NOTES COMPUT SC, V2360, P335
   NIELSEN M, 1981, THEOR COMPUT SCI, V13, P85, DOI 10.1016/0304-3975(81)90112-2
   Stewart G, 2015, ACM SIGPLAN NOTICES, V50, P275, DOI [10.1145/2676726.2676985, 10.1145/2775051.2676985]
   Winskel G., 1987, LECT NOTES COMPUT SC, V255, P325
NR 36
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571217
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500024
OA gold
DA 2024-07-18
ER

PT J
AU Dash, S
   Kaddar, Y
   Paquet, H
   Staton, S
AF Dash, Swaraj
   Kaddar, Younesse
   Paquet, Hugo
   Staton, Sam
TI Affine Monads and Lazy Structures for Bayesian Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
ID CALL-BY-VALUE; COMPUTATION
AB We show that streams and lazy data structures are a natural idiom for programming with infinite-dimensional Bayesian methods such as Poisson processes, Gaussian processes, jump processes, Dirichlet processes, and Beta processes. The crucial semantic idea, inspired by developments in synthetic probability theory, is to work with two separate monads: an affine monad of probability, which supports laziness, and a commutative, non-affine monad of measures, which does not. (Affine means that T (1) congruent to 1.) We show that the separation is important from a decidability perspective, and that the recent model of quasi-Borel spaces supports these two monads. To perform Bayesian inference with these examples, we introduce new inference methods that are specially adapted to laziness; they are proven correct by reference to the Metropolis-Hastings-Green method. Our theoretical development is implemented as a Haskell library, LazyPPL.
C1 [Dash, Swaraj; Kaddar, Younesse; Paquet, Hugo; Staton, Sam] Univ Oxford, Oxford, England.
C3 University of Oxford
RP Dash, S (corresponding author), Univ Oxford, Oxford, England.
OI Kaddar, Younesse/0000-0001-7366-9889; Paquet, Hugo/0000-0002-8192-0321
CR Ackerman Nathanael L., 2016, P WORKSHOP PROBABILI
   Ackerman Nathanael L., 2019, PROC LICS 2019
   Aguirre A., 2021, PROC ICFP 2021
   Aumann Robert J., 1961, Illinois Journal of Mathematics, V5, P614
   Baker Richard, 1991, P AMS, V113, P4
   Bingham E., 2018, Journal of Machine Learning Research
   Bloem-Reddy B., 2017, PROC NEURIPS 2017 WO
   Borgström J, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI [10.1145/2951913.2951942, 10.1145/3022670.2951942]
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   Charles Geyer, 2011, HDB MARKOV CHAIN MON
   Cho K., 2017, PROC CALCO 2017
   Cho KT, 2015, Arxiv, DOI arXiv:1512.05813
   Cho K, 2019, MATH STRUCT COMP SCI, V29, P938, DOI 10.1017/S0960129518000488
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Coecke B, 2014, ELECTRON P THEOR COM, P27, DOI 10.4204/EPTCS.172.3
   Cohn-Gordon R., 2022, MONAD BAYES WEBSITE
   Cohn-Gordon Reuben, 2022, IMPROVING PROBABILIS
   Cusumano-Towner MF, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P221, DOI 10.1145/3314221.3314642
   Dal Lago U, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785663
   Damianou Andreas, 2013, PROC AISTATS 2013
   Dash Swaraj, 2022, Zenodo, DOI 10.5281/ZENODO.7150943
   Dash S, 2021, ELECTRON P THEOR COM, P19, DOI 10.4204/EPTCS.333.2
   Dash Swaraj, 2022, LAZYPPL LAZY PROBABI
   Ehrhard Thomas, 2018, PROC POPL 2018
   Fritz T., 2020, COMPOSITIONALITY, V2, P3, DOI [DOI 10.32408/COMPOSITIONALITY-2-3, 10.32408/compositionality-2-3]
   Fritz T., 2021, J STOCH ANAL, V2, P6, DOI [DOI 10.31390/JOSA.2.4.06, 10.31390/josa.2.4.06]
   Fritz T, 2023, Arxiv, DOI arXiv:2204.02284
   Fritz T, 2020, Arxiv, DOI arXiv:2010.07416
   Fritz T, 2020, ADV MATH, V370, DOI 10.1016/j.aim.2020.107239
   Ghosal S, 2017, CA ST PR MA, V44
   Giry M., 1982, CATEGORICAL ASPECTS, V1982
   Goodman N. D., 2014, DESIGN IMPLEMENTATIO
   Goodman Noah, 2008, C UNCERTAINTY ARTIFI
   Goubault-Larrecq J, 2021, Arxiv, DOI arXiv:2106.16190
   Green PJ, 1995, BIOMETRIKA, V82, P711, DOI 10.1093/biomet/82.4.711
   Griffiths TL, 2011, J MACH LEARN RES, V12, P1185
   Heunen C, 2017, IEEE S LOG
   Hinze Ralf, 2000, P 2 WORKSH GEN PROGR, P17
   Huang DN, 2019, Arxiv, DOI arXiv:1806.07966
   JACOBS B, 1994, ANN PURE APPL LOGIC, V69, P73, DOI 10.1016/0168-0072(94)90020-5
   Jacobs B, 2011, THEOR COMPUT SCI, V412, P3323, DOI 10.1016/j.tcs.2011.04.005
   Kechris Alexander, 1987, Classical Descriptive Set Theory
   Kiselyov O, 2009, LECT NOTES COMPUT SC, V5658, P360, DOI 10.1007/978-3-642-03034-5_17
   KOCK A, 1971, MATH SCAND, V29, P161, DOI 10.7146/math.scand.a-11042
   KOCK A, 1970, ARCH MATH, V21, P1, DOI 10.1007/BF01220868
   Kock A, 2012, THEOR APPL CATEG, V26, P97
   Koller Daphne, 1997, P AAAI 1997
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Lew Alex K, 2020, PROC POPL 2020
   Lunn D, 2009, STAT MED, V28, P3049, DOI 10.1002/sim.3680
   Murray LM, 2020, Arxiv, DOI arXiv:2001.05293
   Maraist J, 1999, THEOR COMPUT SCI, V228, P175, DOI 10.1016/S0304-3975(98)00358-2
   MICHIE D, 1968, NATURE, V218, P19, DOI 10.1038/218019a0
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Murray L. M., 2018, ANNU REV CONTROL
   Murray LM, 2018, PR MACH LEARN RES, V84
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Narayanan P, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3374208
   Navarro Daniel, 2006, ADV NEURAL INFORM PR, V19
   Nguyen Minh, 2022, PROC ICFP 2022
   Paisley John W., 2012, JMLR P, V22, P850
   Pfeffer A, 2015, Arxiv, DOI arXiv:1509.03564
   Roberts DA, 2019, PR MACH LEARN RES, V89, P634
   Roy Daniel, 2008, PROC WORKSHOP NONPAR
   Roy Daniel M, 2013, TALK CCA 2013
   Roy Daniel M, 2014, arXiv
   Saad F, 2017, PR MACH LEARN RES, V54, P632
   Sato T., 2019, PROC POPL 2019
   Scibior A, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236778
   Scibior Adam, 2018, PROC POPL
   Shiebler D, 2020, PROC ACT 2020
   Staton Sam, 2017, PROC ESOP 2017
   Staton Sam, 2020, FDN PROBABILISTIC PR, DOI DOI 10.1017/9781108770750.003
   Staton Sam, 2022, LAZYPPL
   Steele GL, 2014, ACM SIGPLAN NOTICES, V49, P453, DOI [10.1145/2714064.2660195, 10.1145/2660193.2660195]
   Stein Dario, 2021, Structural Foundations for Probabilistic Programming Languages
   Stein Dario, 2021, GAUSS
   Stein Dario, 2021, PROC LICS 2021
   Thibaux Romain, 2007, INT C ART INT STAT
   TIERNEY L, 1994, ANN STAT, V22, P1701, DOI 10.1214/aos/1176325750
   Tolpin D., 2016, P IFL
   Vakar M., 2019, PROC POPL 2019
   van de Meent Jan-Willem, 2018, arXiv, DOI DOI 10.48550/ARXIV.1809.10756
   Vandenbroucke A, 2020, PROC POPL 2020
   Wingate D., 2011, P INT C ART INT STAT
   Wood Frank D., 2009, PROC ICML 2009
   Wu J, 2013, Master's thesis
NR 88
TC 2
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571239
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500046
OA gold, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Sekiyama, T
   Unno, H
AF Sekiyama, Taro
   Unno, Hiroshi
TI Temporal Verification with Answer-Effect Modification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type-and-effect system; temporal verification; delimited continuations;
   answer-effect modification
AB Type-and-effect systems are a widely used approach to program verification, verifying the result of a computation using types, and its behavior using effects. This paper extends an effect system for verifying temporal, value-dependent properties on event sequences yielded by programs, to the delimited control operators shift0/reset0. While these delimited control operators enable useful and powerful programming techniques, they hinder reasoning about the behavior of programs because of their ability to suspend, resume, discard, and duplicate delimited continuations. This problem is more serious in effect systems for temporal properties because these systems must be capable of identifying what event sequences are yielded by captured continuations. Our key observation for achieving effective reasoning in the presence of the delimited control operators is that their use modifies answer effects, which are temporal effects of the continuations. Based on this observation, we extend an effect system for temporal verification to accommodate answer-effect modiffcation. Allowing answer-effect modification enables easily reasoning about traces that captured continuations yield. Another novel feature of our effect system is the support for dependently typed continuations, which allows us to reason about programs more precisely. We prove soundness of the effect system for finite event sequences via type safety and that for infinite event sequences using a logical relation.
C1 [Sekiyama, Taro] Natl Inst Informat, Tokyo, Japan.
   [Unno, Hiroshi] Univ Tsukuba, Tsukuba, Ibaraki, Japan.
C3 Research Organization of Information & Systems (ROIS); National
   Institute of Informatics (NII) - Japan; University of Tsukuba
RP Sekiyama, T (corresponding author), Natl Inst Informat, Tokyo, Japan.
EM tsekiyama@acm.org; uhiro@cs.tsukuba.ac.jp
RI Unno, Hiroshi/IWM-2419-2023
OI Unno, Hiroshi/0000-0002-4225-8195; Sekiyama, Taro/0000-0001-9286-230X
FU JSPS KAKENHI [JP19K20247, JP22K17875, JP20H00582, JP20H04162,
   JP22H03564, JP20H05703, JP22H03570]; JST CREST Grant [JPMJCR21M3];
   Grants-in-Aid for Scientific Research [22K17875, 20H00582] Funding
   Source: KAKEN
FX We thank anonymous reviewers for useful comments and Kanaru Isoda for
   providing an implementation of a constraint solver for the e~ect system
   of Materzok and Biernacki [2011]. This work was supported by JSPS
   KAKENHI Grant Numbers JP19K20247, JP22K17875, JP20H00582, JP20H04162,
   JP22H03564, JP20H05703, and JP22H03570 as well as JST CREST Grant Number
   JPMJCR21M3.
CR Ahman D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158095
   Aldrich J., 2009, OOPSLA COMPANION, P1015, DOI DOI 10.1145/1639950
   [Anonymous], 2023, P ACM PROGRAM LANG, V7
   Bengtson J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890031
   Boudol G, 2010, INFORM COMPUT, V208, P716, DOI 10.1016/j.ic.2009.06.007
   Clarke Edmund M., 1983, C RECORD 10 ANN ACM, P117, DOI [DOI 10.1145/567067.567080, 10.1145/567067]
   Clinger William D., 1985, SCHEME HIGHER LEVEL, P237
   Cong Y, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236764
   Cook B, 2017, J ACM, V64, DOI 10.1145/3060257
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Danvy Olivier., 1989, FUNCTIONAL ABSTRACTI
   Dietsch D, 2015, LECT NOTES COMPUT SC, V9206, P49, DOI 10.1007/978-3-319-21690-4_4
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Filinski A., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P446, DOI 10.1145/174675.178047
   Forster Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110257
   Gordon CS, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3450272
   Gordon Colin S., 2017, SCHLOSS DAGSTUHL LEI, V13, P1, DOI DOI 10.4230/LIPICS.ECOOP.2017.13
   Gordon Colin S., 2020, LIPICS, V166, P1, DOI DOI 10.4230/LIPICS.ECOOP.2020.23
   Gunter C. A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P12, DOI 10.1145/224164.224173
   Herbelin H, 2005, LECT NOTES COMPUT SC, V3461, P209
   Herbelin H, 2012, IEEE S LOG, P365, DOI 10.1109/LICS.2012.47
   Hofmann M, 2014, IEEE S LOG, DOI 10.1145/2603088.2603127
   Igarashi A, 2002, ACM SIGPLAN NOTICES, V37, P331, DOI 10.1145/565816.503303
   Iwama Futoshi, 2006, P 2006 ACM SIGPLAN W, P38, DOI DOI 10.1145/1111542.1111550
   Kameyama Y, 2008, LECT NOTES COMPUT SC, V4989, P239
   Kobayashi N, 2019, LECT NOTES COMPUT SC, V11822, P413, DOI 10.1007/978-3-030-32304-2_20
   Kobayashi N, 2009, IEEE S LOG, P179, DOI 10.1109/LICS.2009.29
   Koskinen E, 2014, IEEE S LOG, DOI 10.1145/2603088.2603138
   Kupferman O, 2000, J ACM, V47, P312, DOI 10.1145/333979.333987
   Lepigre R, 2016, LECT NOTES COMPUT SC, V9632, P476, DOI 10.1007/978-3-662-49498-1_19
   Marino D., 2009, P 2009 ACM SIGPLAN I, P39, DOI DOI 10.1145/1481861.1481868
   Mason IA, 1996, INFORM COMPUT, V128, P26, DOI 10.1006/inco.1996.0061
   Materzok M, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P81
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Miquey É, 2017, LECT NOTES COMPUT SC, V10201, P777, DOI 10.1007/978-3-662-54434-1_29
   Murase A, 2016, ACM SIGPLAN NOTICES, V51, P57, DOI 10.1145/2914770.2837667
   Nanevski A, 2006, ACM SIGPLAN NOTICES, V41, P62, DOI 10.1145/1160074.1159812
   Nanjo Y, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P759, DOI 10.1145/3209108.3209204
   Nanjo Yoji, 2018, FIXPOINT LOGIC DEPEN
   Padovani L, 2015, LECT NOTES COMPUT SC, V9039, P3, DOI 10.1007/978-3-319-19195-9_1
   Pitts Andrew, 1998, Higher Order Operational Techniques in Semantics, P227
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Shan Chung-chieh., 2004, P 5 WORKSHOP SCHEME, P99
   Skalka C, 2004, LECT NOTES COMPUT SC, V3302, P107
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Unno H, 2020, Arxiv, DOI arXiv:2007.03656
   Unno H, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P277, DOI 10.1145/1599410.1599445
   Urban C, 2018, LECT NOTES COMPUT SC, V11002, P402, DOI 10.1007/978-3-319-99725-4_24
NR 51
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571264
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500071
OA gold
DA 2024-07-18
ER

PT J
AU Krogmeier, P
   Lin, ZY
   Murali, A
   Madhusudan, P
AF Krogmeier, Paul
   Lin, Zhengyao
   Murali, Adithya
   Madhusudan, P.
TI Synthesizing Axiomatizations using Logic Learning
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Learning Logics; Axiomatization; Inductive Synthesis
ID SINGLE AXIOMS; THEORY EXPLORATION; DISCOVERY; ALGEBRA; THEOREM; LAW
AB Axioms and inference rules form the foundation of deductive systems and are crucial in the study of reasoning with logics over structures. Historically, axiomatizations have been discovered manually with much expertise and effort. In this paper we show the feasibility of using synthesis techniques to discover axiomatizations for different classes of structures, and in some contexts, automatically prove their completeness. For evaluation, we apply our technique to find axioms for (1) classes of frames in modal logic characterized in first-order logic and (2) the class of language models with regular operations.
C1 [Krogmeier, Paul; Lin, Zhengyao; Murali, Adithya; Madhusudan, P.] Univ Illinois, Dept Comp Sci, Champaign, IL 61820 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign
RP Krogmeier, P (corresponding author), Univ Illinois, Dept Comp Sci, Champaign, IL 61820 USA.
EM paulmk2@illinois.edu; zl38@illinois.edu; adithya5@illinois.edu;
   madhu@illinois.edu
OI Murali, Adithya/0000-0002-6311-1467; Parthasarathy,
   Madhusudan/0000-0002-9782-721X
FU Amazon, a Discovery Partners Institute (DPI) science team seed grant;
   Google Faculty Fellowship; NSF [1801369]
FX The last author dedicates this paper as a Festschrift article in honor
   of the academic career of Prof. R. Ramanujam ("Jam") at the Institute of
   Mathematical Sciences, Chennai, India, who was a mentor and also
   introduced him to correspondence theory for modal logics. This work is
   supported in part by a research grant from Amazon, a Discovery Partners
   Institute (DPI) science team seed grant, a Google Faculty Fellowship,
   and NSF Grant No. 1801369.
CR Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Anderson CJ, 2014, ACM SIGPLAN NOTICES, V49, P113, DOI 10.1145/2535838.2535862
   [Anonymous], 1930, Comptes Rendus des Seances de la Societe des Sciences et des Lettres de Varsovie Classe III
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Blackburn P, 2007, STUD LOGIC PRACT REA, V3, P1
   Blackburn Patrick, 2007, Handbook of Modal Logic. Studies in logic and practical reasoning, V3, DOI [10.1016/S1570-2464(07)80002-4, DOI 10.1016/S1570-2464(07)80002-4]
   Buchberger B., 2006, J. Appl. Logic, V4, P470, DOI DOI 10.1016/J.JAL.2005.10.006
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Conway J.H., 1971, Regular Algebra and Finite Machines
   D'Antoni L, 2021, LECT NOTES COMPUT SC, V12759, P84, DOI 10.1007/978-3-030-81685-8_4
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dinesh Sushant, 2022, 29 ANN NETW DISTR SY, P1, DOI [10.14722/ndss.2022.24215, DOI 10.14722/NDSS.2022.24215]
   Dramnesc Isabela, 2015, 2015 IEEE 13th International Symposium on Intelligent Systems and Informatics (SISY). Proceedings, P139, DOI 10.1109/SISY.2015.7325367
   Dramnesc I., 2012, Proceedings of the 2012 7th IEEE International Symposium on Applied Computational Intelligence and Informatics (SACI), P421, DOI 10.1109/SACI.2012.6250041
   Gischer Jay Loren, 1985, Ph. D. Dissertation
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P317, DOI 10.1145/1925844.1926423
   Hance T, 2021, PROCEEDINGS OF THE 18TH USENIX SYMPOSIUM ON NETWORKED SYSTEM DESIGN AND IMPLEMENTATION, P115
   Heule S, 2016, ACM SIGPLAN NOTICES, V51, P237, DOI [10.1145/2980983.2908121, 10.1145/2908080.2908121]
   Hodges W., 1993, Model Theory, DOI [DOI 10.1017/CBO9780511551574, 10.1017/cbo9780511551574, 10.1017/CBO9780511551574]
   Hodges Wilfrid, 1997, A shorter model theory
   Hopcroft J. E., 2006, INTRO AUTOMATA THEOR
   Johansson M, 2017, LECT NOTES COMPUT SC, V10499, P1, DOI 10.1007/978-3-319-66107-0_1
   Johansson M, 2014, LECT NOTES ARTIF INT, V8543, P108, DOI 10.1007/978-3-319-08434-3_9
   Kim J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434311
   Kleene S., 1956, AUTOMATA STUDIES, P3
   Koenig JR, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P703, DOI 10.1145/3385412.3386018
   Kovacs Laura, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P1, DOI 10.1007/978-3-642-39799-8_1
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   Krogmeier Paul, 2022, Zenodo, DOI 10.5281/ZENODO.7072506
   Krogmeier P, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498671
   Krogmeier Paul, 2022, LAS Framework Implementation
   Kunen K., 1992, Journal of Automated Reasoning, V9, P291, DOI 10.1007/BF00245293
   LANGLEY P, 1981, COGNITIVE SCI, V5, P31, DOI 10.1016/S0364-0213(81)80025-0
   Lawvere F William, 1969, Dialectica, V23, P281
   Lezama Armando Solar, 2008, Ph. D. Dissertation, DOI [10.5555/1714168, DOI 10.5555/1714168]
   Löding C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158098
   Löding C, 2016, LECT NOTES COMPUT SC, V9636, P167, DOI 10.1007/978-3-662-49674-9_10
   McCasland RL, 2017, APPL INTELL, V47, P585, DOI 10.1007/s10489-017-0954-8
   McCune W, 2005, ALGEBRA UNIV, V52, P541, DOI 10.1007/s00012-004-1902-0
   McCune W, 2003, ALGEBRA UNIV, V50, P165, DOI 10.1007/s00012-003-1832-2
   McCune W, 2002, J AUTOM REASONING, V29, P1, DOI 10.1023/A:1020542009983
   McCune W, 1996, ALGEBRA UNIV, V36, P436, DOI 10.1007/BF01233914
   McCune W, 1996, AM MATH MON, V103, P888, DOI 10.2307/2974613
   MCCUNE WW, 1993, J AUTOM REASONING, V10, P1, DOI 10.1007/BF00881862
   NEUMANN BH, 1981, B AUST MATH SOC, V23, P81, DOI 10.1017/S0004972700006912
   OHearn PeterW., 2001, P 15 INT WORKSH COMP, P1, DOI [10.5555/647851.737404, DOI 10.5555/647851.737404]
   Padmanabhan R, 1969, Journal of the Australian Mathematical Society, V9, P143, DOI [10.1017/S144678870000570X, DOI 10.1017/S144678870000570X]
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Redko V.N., 1964, Ukrainskii Matematicheskii Zhurnal, V16, P120
   Reynolds A, 2019, LECT NOTES COMPUT SC, V11562, P74, DOI 10.1007/978-3-030-25543-5_5
   Rezus Adrian, 2020, WitnessTheory:Noteson-calculusandLogic
   SALOMAA A, 1966, J ACM, V13, P158, DOI 10.1145/321312.321326
   Singher E, 2021, LECT NOTES COMPUT SC, V12760, P125, DOI 10.1007/978-3-030-81688-9_6
   Smith C, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P616, DOI 10.1145/3106237.3106279
   Smith Peter., 2010, The Galois Connection Between Syntax and Semantics
   Tarski A., 1938, Fundamenta Mathematicae, V30, P253
   Valbuena Irene Lobo, 2015, Electronic Communications of the EASST, V72, P1, DOI [10.14279/tuj.eceasst.72.1009, DOI 10.14279/TUJ.ECEASST.72.1009]
   Van Benthem Johan, 1984, Correspondence Theory, P167, DOI [10.1007/978-94-009-6259-0_4, DOI 10.1007/978-94-009-6259-0_4]
   Wang YP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158144
   Wu TL, 2019, PHYS REV E, V100, DOI 10.1103/PhysRevE.100.033311
NR 61
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 185
DI 10.1145/3563348
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200062
OA gold
DA 2024-07-18
ER

PT J
AU Liu, HM
   Fu, HF
   Yu, ZY
   Song, JX
   Li, GQ
AF Liu, Hongming
   Fu, Hongfei
   Yu, Zhiyong
   Song, Jiaxin
   Li, Guoqiang
TI Scalable Linear Invariant Generation with Farkas' Lemma
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Invariant Generation; Farkas' Lemma; Constraint Solving
ID POLYNOMIAL INVARIANTS; AUTOMATIC-GENERATION; VERIFICATION; INFERENCE;
   TERMINATION; RANKING
AB Invariant generation is a classical problem to automatically generate invariants to aid the formal analysis of programs. In this work, we consider the problem of generating tight linear-invariants over affine programs (i.e., programs with affine guards and updates) without a prescribed goal property. In the literature, the only known sound and complete characterization to solve this problem is via Farkas' Lemma (FL), and has been implemented through either quantifier elimination or reasonable heuristics. Although FL-based approaches can generate highly accurate linear invariants from the completeness of FL, the main bottleneck to applying these approaches is the scalability issue caused by either non-linear constraints or combinatorial explosion. We base our approach on the only practical FL-based approach [Sankaranarayanan et al., SAS 2004] that applies FL with reasonable heuristics, and develop two novel and independent improvements to leverage the scalability. The first improvement is the novel idea to generate invariants at one program location in a single invariant-generation process, so that the invariants for each location are generated separately rather than together in a single computation. This idea naturally leads to a parallel processing that divides the invariant-generation task for all program locations by assigning the locations separately to multiple processors. Moreover, the idea enables us to develop detailed technical improvements to further reduce the combinatorial explosion in the original work [Sankaranarayanan et al., SAS 2004]. The second improvement is a segmented subsumption testing in the CNF-to-DNF expansion that allows discovering more local subsumptions in advance. We formally prove that our approach has the same accuracy as the original work and thus does not incur accuracy loss on the generated invariants. Moreover, experimental results on representative benchmarks involving non-trivial linear invariants demonstrate that our approach improves the runtime of the original work by several orders of magnitude, even in the non-parallel scenario that sums up the execution time for all program locations. Hence, our approach constitutes the first significant improvement in FL-based approaches for linear invariant generation after almost two decades.
C1 [Liu, Hongming; Fu, Hongfei; Yu, Zhiyong; Song, Jiaxin; Li, Guoqiang] Shanghai Jiao Tong Univ, Shanghai, Peoples R China.
C3 Shanghai Jiao Tong University
RP Fu, HF (corresponding author), Shanghai Jiao Tong Univ, Shanghai, Peoples R China.
EM hm-liu@sjtu.edu.cn; jt002845@sjtu.edu.cn; yuzhiyong18@sjtu.edu.cn;
   sjtu_xiaosong@sjtu.edu.cn; li.g@sjtu.edu.cn
RI Fu, Hongfei/G-8210-2016; song, jiaxin/GQQ-1403-2022; Yu,
   Zhiyong/AAS-1673-2020
OI Fu, Hongfei/0000-0002-8294-8086; Yu, Zhiyong/0000-0001-8073-057X; Fu,
   Hongfei/0000-0002-7947-3446
FU National Natural Science Foundation of China (NSFC) [62172271]
FX We are very thankful to Prof. Naijun Zhan for his expertise and
   insightful discussion on quantifier elimination, and to Dr. Liqian Chen
   and Dr. Peisen Yao for their expertise and insightful discussion on
   abstract interpretation and SMT solving. We also thank anonymous
   reviewers for their valuable comments. This work is partially supported
   by the National Natural Science Foundation of China (NSFC) under Grant
   No. 62172271.
CR Adjé A, 2015, LECT NOTES COMPUT SC, V9291, P235, DOI 10.1007/978-3-662-48288-9_14
   Adjé A, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:01)2012
   Albarghouthi Aws, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P672, DOI 10.1007/978-3-642-31424-7_48
   Alias C, 2010, LECT NOTES COMPUT SC, V6337, P117, DOI 10.1007/978-3-642-15769-1_8
   [Anonymous], 1995, Temporal verification of reactive systems-safety
   Arduino, 2021, Arduino: An open-source electronics platform based on easy-to-use hardware and software
   ARNON DS, 1984, SIAM J COMPUT, V13, P865, DOI 10.1137/0213054
   Asadi A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P772, DOI 10.1145/3453483.3454076
   Bagnara R, 2005, LECT NOTES COMPUT SC, V3672, P19
   Bagnara R, 2002, LECT NOTES COMPUT SC, V2477, P213
   Bagnara R, 2003, LECT NOTES COMPUT SC, V2694, P337
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3576, P491
   Breck J, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P688, DOI 10.1145/3385412.3386035
   Brown CW, 2007, ISSAC 2007: PROCEEDINGS OF THE 2007 INTERNATIONAL SYMPOSIUM ON SYMBOLIC AND ALGEBRAIC COMPUTATION, P54
   Chakarov A, 2014, LECT NOTES COMPUT SC, V8723, P85, DOI 10.1007/978-3-319-10936-7_6
   Chatterjee K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P672, DOI 10.1145/3385412.3385969
   Chatterjee K, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3339984
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chen YH, 2007, LECT NOTES COMPUT SC, V4711, P34
   Chen YF, 2015, LECT NOTES COMPUT SC, V9206, P658, DOI 10.1007/978-3-319-21690-4_44
   Colon M. A., 2001, Tools and Algorithms for the Construction and Analysis of Systems. 7th International Conference, TACAS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2031), P67
   Colón MA, 2003, LECT NOTES COMPUT SC, V2725, P420
   Cousot P, 2005, LECT NOTES COMPUT SC, V3444, P21
   Cousot P, 2005, LECT NOTES COMPUT SC, V3385, P1
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   CPAchecker, 2022, CPAchecker: The Configurable Software-Verification Platform
   Csallner C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P281, DOI 10.1145/1368088.1368127
   DAVENPORT JH, 1988, J SYMB COMPUT, V5, P29, DOI 10.1016/S0747-7171(88)80004-X
   David C, 2016, LECT NOTES COMPUT SC, V9995, P182, DOI 10.1007/978-3-319-48989-6_12
   de Oliveira S, 2017, LECT NOTES COMPUT SC, V10482, P327, DOI 10.1007/978-3-319-68167-2_22
   de Oliveira S, 2016, LECT NOTES COMPUT SC, V9938, P479, DOI 10.1007/978-3-319-46520-3_30
   Dillig I, 2013, ACM SIGPLAN NOTICES, V48, P443, DOI [10.1145/2509136.2509511, 10.1145/2544173.2509511]
   Farkas J., 1894, Mathematikaies Termeszettudomanyi Ertesito, V12
   Farzan A, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P57, DOI 10.1109/FMCAD.2015.7542253
   Fedyukovich G, 2018, PROCEEDINGS OF THE 2018 18TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P170
   Fedyukovich G, 2019, LECT NOTES COMPUT SC, V11561, P259, DOI 10.1007/978-3-030-25540-4_14
   Feng YJ, 2017, LECT NOTES COMPUT SC, V10482, P400, DOI 10.1007/978-3-319-68167-2_26
   Gan T, 2020, LECT NOTES COMPUT SC, V12224, P415, DOI 10.1007/978-3-030-53288-8_20
   Garg P, 2016, ACM SIGPLAN NOTICES, V51, P499, DOI 10.1145/2914770.2837664
   Garg P, 2014, LECT NOTES COMPUT SC, V8559, P69, DOI 10.1007/978-3-319-08867-9_5
   Giacobazzi R., 1997, Algebraic Methodology and Software Technology. 6th International Conference, AMAST '97. Proceedings, P231, DOI 10.1007/BFb0000474
   Gulwani S, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P281, DOI 10.1145/1375581.1375616
   Gulwani S, 2009, LECT NOTES COMPUT SC, V5403, P120, DOI 10.1007/978-3-540-93900-9_13
   Gupta A, 2009, LECT NOTES COMPUT SC, V5643, P634, DOI 10.1007/978-3-642-02658-4_48
   Halbwachs N, 1997, FORM METHOD SYST DES, V11, P157, DOI 10.1023/A:1008678014487
   He JX, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1112, DOI 10.1145/3385412.3386016
   Hengjun Zhao, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P471, DOI 10.1007/978-3-642-32759-9_38
   Henzinger Thomas A, 1994, Technical Report
   Howe JM, 2012, LECT NOTES COMPUT SC, V7460, P41, DOI 10.1007/978-3-642-33125-1_6
   Hrushovski E, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P530, DOI 10.1145/3209108.3209142
   Humenberger A, 2017, PROCEEDINGS OF THE 2017 ACM INTERNATIONAL SYMPOSIUM ON SYMBOLIC AND ALGEBRAIC COMPUTATION (ISSAC'17), P221, DOI 10.1145/3087604.3087623
   Humenberger Andreas, 2021, LNCS, V12597, P17, DOI [10.1007/978-3-030-67067-2_2, DOI 10.1007/978-3-030-67067-2_2]
   Ji YC, 2022, LECT NOTES COMPUT SC, V13371, P257, DOI 10.1007/978-3-031-13185-1_13
   Kapur Deepak, 2005, DED APPL DAGST SEM P, V05431
   Katoen JP, 2010, LECT NOTES COMPUT SC, V6337, P390, DOI 10.1007/978-3-642-15769-1_24
   Kincaid Z, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158142
   Kincaid Z, 2017, ACM SIGPLAN NOTICES, V52, P248, DOI [10.1145/3062341.3062373, 10.1145/3140587.3062373]
   LAMPORT L, 1987, ACM T COMPUT SYST, V5, P1, DOI 10.1145/7351.7352
   Lin W, 2014, FRONT COMPUT SCI-CHI, V8, P192, DOI 10.1007/s11704-014-3150-6
   Liu Hongming, 2022, Scalable Linear Invariant Generation with Farkas' Lemma
   McMillan KL, 2008, LECT NOTES COMPUT SC, V4963, P413, DOI 10.1007/978-3-540-78800-3_31
   Müller-Olm M, 2004, INFORM PROCESS LETT, V91, P233, DOI 10.1016/j.ipl.2004.05.004
   OCRS, 2022, OCRS: Operational calculus recurrence solver
   Padhi S, 2016, ACM SIGPLAN NOTICES, V51, P42, DOI [10.1145/2908080.2908099, 10.1145/2980983.2908099]
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   PPL, 2021, Parma Polyhedra Library, PPL 1.2
   Rodríguez-Carbonell E, 2007, SCI COMPUT PROGRAM, V64, P54, DOI 10.1016/j.scico.2006.03.003
   Rodríguez-Carbonell E, 2004, LECT NOTES COMPUT SC, V3148, P280
   Rodriguez-Carbonell E, 2004, P ISSAC, P266, DOI DOI 10.1145/1005285.1005324
   Sankaranarayanan S, 2004, LECT NOTES COMPUT SC, V3148, P53
   Sankaranarayanan S, 2004, ACM SIGPLAN NOTICES, V39, P318, DOI 10.1145/982962.964028
   Schrijver Alexander, 1999, THEORY LINEAR INTEGE
   SeaHorn, 2015, SeaHorn: A fully automated analysis framework for LLVM-based languages
   Sharma Rahul, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P703, DOI 10.1007/978-3-642-22110-1_57
   Sharma R, 2016, FORM METHOD SYST DES, V48, P235, DOI 10.1007/s10703-016-0248-5
   Sharma R, 2013, LECT NOTES COMPUT SC, V7792, P574, DOI 10.1007/978-3-642-37036-6_31
   Singh Gagandeep, 2017, ACM SIGPLAN Notices, V52, P46, DOI 10.1145/3093333.3009885
   Sparse, 2021, Sparse: C language semantic parser
   StInG, 2006, StInG: Stanford Invariant Generator
   Sun J, 2009, LECT NOTES COMPUT SC, V5885, P581, DOI 10.1007/978-3-642-10373-5_30
   SV-COMP, 2022, Software Verification Competition
   Talaashrafi Delaram, 2018, Ph. D. Dissertation
   Nguyen T, 2012, PROC INT CONF SOFTW, P683, DOI 10.1109/ICSE.2012.6227149
   UltimateAutomizer, 2021, UltimateAutomizer: A Software Model Checker
   Xu RC, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P111, DOI 10.1145/3368089.3409752
   Yang L, 2010, FRONT COMPUT SCI CHI, V4, P1, DOI 10.1007/s11704-009-0074-7
   Yao JN, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P106, DOI 10.1145/3385412.3385986
NR 89
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 132
DI 10.1145/3563295
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200009
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Xie, NN
   Cong, YY
   Ikemori, K
   Leijen, D
AF Xie, Ningning
   Cong, Youyou
   Ikemori, Kazuki
   Leijen, Daan
TI First-Class Names for Effect Handlers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Algebraic Effects; Effect Handlers; Scoping
AB Algebraic effects and handlers are a promising technique for incorporating composable computational effects into functional programming languages. Effect handlers enable concisely programming with different effects, but they do not offer a convenient way to program with different instances of the same effect. As a solution to this inconvenience, previous studies have introduced named effect handlers, which allow the programmer to distinguish among different effect instances. However, existing formalizations of named handlers are both involved and restrictive, as they employ non-standard mechanisms to prevent the escaping of handler names.
   In this paper, we propose a simple and flexible design of named handlers. Specifically, we treat handler names as first-class values, and prevent their escaping while staying within the ordinary lambda-calculus. Such a design is enabled by combining named handlers with scoped effects, a novel variation of effects that maintain a scope via rank-2 polymorphism. We formalize two combinations of named handlers and scoped effects, and implement them in the Koka programming language. We also present practical applications of named handlers, including a neural network and a unification algorithm.
C1 [Xie, Ningning] Univ Cambridge, Cambridge, England.
   [Cong, Youyou; Ikemori, Kazuki] Tokyo Inst Technol, Tokyo, Japan.
   [Leijen, Daan] Microsoft Res, Redmond, WA USA.
C3 University of Cambridge; Tokyo Institute of Technology; Microsoft
RP Xie, NN (corresponding author), Univ Cambridge, Cambridge, England.
EM ningning.xie@cl.cam.ac.uk; cong@c.titech.ac.jp;
   ikemori.k.aa@m.titech.ac.jp; daan@microsoft.com
OI Leijen, Daan/0000-0003-1027-5430
CR [Anonymous], 2003, The Fun of Programming
   Bauer A, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:9)2014
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Biernacki D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158096
   Biernacki D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371116
   Bingham E, 2019, J MACH LEARN RES, V20
   Bracevac O, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236762
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Chung-chieh Shan, 2007, Higher-Order and Symbolic Computation, V20, P371, DOI 10.1007/s10990-007-9010-4
   Convent L, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000039
   Dolan Stephen, 2017, ML WORKSH
   Dreyer Derek, 2018, MILNER AWARD LECT
   Dyvbig RK, 2007, J FUNCT PROGRAM, V17, P687, DOI 10.1017/S0956796807006259
   Forster Y, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000121
   github, 2019, Koka
   Gunter C. A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P12, DOI 10.1145/224164.224173
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Jones M. P., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P68, DOI 10.1145/237721.237731
   Kammar O, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000320
   Kiselyov O, 2012, THEOR COMPUT SCI, V435, P56, DOI 10.1016/j.tcs.2012.02.025
   Kiselyov Oleg, 2017, ML WORKSH 2016, DOI [10.48550/arXiv.1812.11664, DOI 10.48550/ARXIV.1812.11664]
   Launchbury J., 1995, LISP and Symbolic Computation, V8, P293, DOI 10.1007/BF01018827
   Leijen D, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P109, DOI 10.1145/331963.331977
   Leijen D, 2018, PROCEEDINGS OF THE 3RD ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE '18), P51, DOI 10.1145/3240719.3241789
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Leijen D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   McCracken, 1984, Lecture Notes in Computer Science, V173, DOI [10.1007/3-540-13346-1_15, DOI 10.1007/3-540-13346-1_15]
   Ningning Xie, 2021, Proceedings of the ACM on Programming Languages, V5, DOI 10.1145/3473576
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Pretnar Matija, 2010, Phdthesis
   Reinking A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P96, DOI 10.1145/3453483.3454032
   Sekiyama T, 2019, LECT NOTES COMPUT SC, V11423, P353, DOI 10.1007/978-3-030-17184-1_13
   Semmelroth M., 1999, SIGPLAN Notices, V34, P8, DOI 10.1145/317765.317777
   Sigal Jesse, 2021, ACM SIGPLAN WORKSH P
   SITARAM D, 1993, SIGPLAN NOTICES, V28, P147, DOI 10.1145/173262.155104
   Takikawa A, 2013, LECT NOTES COMPUT SC, V7792, P229, DOI 10.1007/978-3-642-37036-6_14
   Timany A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158152
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Wang F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341700
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Xie NN, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408981
   Xie Ningning, 2022, Artifact for lFirst-Class Names for Effect Handlers, DOI [10.5281/zenodo.7062933, DOI 10.5281/ZENODO.7062933]
   Xie Ningning., P 13 ACM SIGPLAN INT, P2020, DOI DOI 10.1145/3406088.3409022
   Xie Ningning, 2021, MSR-TR-2021-10
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
NR 51
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 126
DI 10.1145/3563289
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200003
OA gold
DA 2024-07-18
ER

PT J
AU Biernacka, M
   Charatonik, W
   Drab, T
AF Biernacka, Malgorzata
   Charatonik, Witold
   Drab, Tomasz
TI A Simple and Efficient Implementation of Strong Call by Need by an
   Abstract Machine
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE lambda-calculus; Abstract machines; Computational complexity; Reduction
   strategies; Normalization by evaluation
ID FUNCTIONAL CORRESPONDENCE
AB We present an abstract machine for a strong call-by-need strategy in the lambda calculus. The machine has been derived automatically from a higher-order evaluator that uses the technique of memothunks to implement laziness. The derivation has been done with the use of an off-the-shelf transformation tool implementing the "functional correspondence" between higher-order interpreters and abstract machines, and it yields a simple and concise description of the machine. We prove that the resulting machine conservatively extends the lazy version of Krivine machine for the weak call-by-need strategy, and that it simulates the normal-order strategy in bilinear number of steps.
C1 [Biernacka, Malgorzata; Charatonik, Witold; Drab, Tomasz] Univ Wroclaw, Fac Math & Comp Sci, Wroclaw, Poland.
C3 University of Wroclaw
RP Biernacka, M (corresponding author), Univ Wroclaw, Fac Math & Comp Sci, Wroclaw, Poland.
EM mabi@cs.uni.wroc.pl; wch@cs.uni.wroc.pl; tdr@cs.uni.wroc.pl
OI Charatonik, Witold/0000-0001-7062-0385; Drab,
   Tomasz/0000-0002-6629-5839; Biernacka, Malgorzata/0000-0001-8094-0980
CR Accattoli B, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470630
   Accattoli B, 2017, PROCEEDINGS OF THE 19TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2017), P4, DOI 10.1145/3131851.3131855
   Accattoli B, 2016, LECT NOTES COMPUT SC, V9803, P1, DOI 10.1007/978-3-662-52921-8_1
   Accattoli B, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(1:4)2016
   Accattoli B, 2015, IEEE S LOG, P141, DOI 10.1109/LICS.2015.23
   Accattoli Beniamino, 2022, LIPIcs, V216, DOI [10.4230/LIPIcs.CSL. 2022.4, DOI 10.4230/LIPICS.CSL.2022.4]
   Accattoli Beniamino, 2019, SCI COMPUT PROGRAM, V184, DOI [10.1016/j.scico.2019.03.002, DOI 10.1016/J.SCIC0.2019.03.002]
   Ager Mads Sig, 2003, Proceedings of the 5th ACM SIGPLAN International Conference on Principles and Practice of Declaritive Programming, P8, DOI DOI 10.1145/888251.888254
   Ager MS, 2004, INFORM PROCESS LETT, V90, P223, DOI 10.1016/j.ipl.2004.02.012
   [Anonymous], 1995, C RECORD POPL 95 22, DOI DOI 10.1145/199448.199507
   Balabonski T, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110264
   Balabonski Thibaut, 2021, 6 INT C FORM STRUCT, V195, DOI [10.4230/LIPIcs.FSCD.2021.9, DOI 10.4230/LIPICS.FSCD.2021.9]
   Barenbaum P, 2018, PPDP'18: PROCEEDINGS OF THE 20TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, DOI 10.1145/3236950.3236972
   Biernacka M., 2019, 4 INT C FORMAL STRUC, V131, DOI [DOI 10.4230/LIPICS.FSCD.2019.8, 10.]
   Biernacka M, 2007, THEOR COMPUT SCI, V375, P76, DOI 10.1016/j.tcs.2006.12.028
   Biernacka M, 2021, PROCEEDINGS OF THE 23RD INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, PPDP 2021, DOI 10.1145/3479394.3479401
   Biernacka M, 2020, LECT NOTES COMPUT SC, V12470, P147, DOI 10.1007/978-3-030-64437-6_8
   Biernacka Malgorzata, 2022, ABSTRACT MACHINES WO, DOI [10.5281/zenodo.6786796, DOI 10.5281/ZEN0D0.6786796]
   Biernacka Malgorzata, 2022, 13 INT C INT THEOR P, V237, DOI [10.4230/LIPIcs.ITP.2022.7, DOI 10.4230/LIPICS.ITP.2022.7]
   Buszka Maciej, 2021, LOGICBASED PROGRAM S, V3290, P38, DOI [10.1007/978-3-030-98869-2_3, DOI 10.1007/978-3-030-98869-2_]
   Chang S, 2012, LECT NOTES COMPUT SC, V7211, P128, DOI 10.1007/978-3-642-28869-2_7
   Charatonik W., 2017, 2 INT C FORMAL STRUC, p10:1, DOI DOI 10.4230/LIPICS.FSCD.2017.10
   Condoluci A, 2019, PROCEEDINGS OF THE 21ST INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2019), DOI 10.1145/3354166.3354174
   Cregut Pierre, 2007, Higher-Order and Symbolic Computation, V20, P209, DOI 10.1007/s10990-007-9015-z
   Danvy O., 2013, Proceedings of the 15th symposium on principles and practice of declarative programming, P97, DOI DOI 10.1145/2505879.2505898
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Filinski A, 2005, RAIRO-THEOR INF APPL, V39, P423, DOI 10.1051/ita:2005026
   García-Pérez A, 2014, SCI COMPUT PROGRAM, V95, P176, DOI 10.1016/j.scico.2014.05.011
   Launchbury J., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P144, DOI 10.1145/158511.158618
   Munk Johan, 2007, THESIS
   Okasaki Chris, 1999, PURELY FUNCTIONAL DA, DOI [10.1017/CBO9780511530104, DOI 10.1017/CB09780511530104]
   Peyton Jones S. L., 1992, Journal of Functional Programming, V2, P127, DOI 10.1017/S0956796800000319
   Piróg M, 2010, ACM SIGPLAN NOTICES, V45, P25, DOI 10.1145/2088456.1863528
   Sestoft P., 1997, Journal of Functional Programming, V7, P231, DOI 10.1017/S0956796897002712
NR 34
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 94
DI 10.1145/3549822
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000005
OA gold
DA 2024-07-18
ER

PT J
AU Emrich, F
   Stolarek, J
   Cheney, J
   Lindley, S
AF Emrich, Frank
   Stolarek, Jan
   Cheney, James
   Lindley, Sam
TI Constraint-Based Type Inference for FreezeML
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE first-class polymorphism; type inference; impredicative types;
   constraints
AB FreezeML is a new approach to first-class polymorphic type inference that employs term annotations to control when and how polymorphic types are instantiated and generalised. It conservatively extends Hindley-Milner type inference and was first presented as an extension to AlgorithmW. More modern type inference techniques such as HM(X) and OutsideIn(X) employ constraints to support features such as type classes, type families, rows, and other extensions. We take the first step towards modernising FreezeML by presenting a constraint-based type inference algorithm. We introduce a new constraint language, inspired by the Pottier/Remy presentation of HM(X), in order to allow FreezeML type inference problems to be expressed as constraints. We present a deterministic stack machine for solving FreezeML constraints and prove its termination and correctness.
C1 [Stolarek, Jan] Lodz Univ Technol, Lodz, Poland.
   [Cheney, James] Alan Turing Inst, London, England.
   [Emrich, Frank; Stolarek, Jan; Cheney, James; Lindley, Sam] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
C3 Lodz University of Technology; University of Edinburgh
RP Emrich, F (corresponding author), Univ Edinburgh, Edinburgh, Midlothian, Scotland.
EM frank.emrich@ed.ac.uk; jan.stolarek@ed.ac.uk; james.cheney@ed.ac.uk;
   sam.lindley@ed.ac.uk
OI Lindley, Sam/0000-0002-1360-4714
FU ERC Consolidator Grant Skye [682315]; ISCF Metrology Fellowship - UK
   government's Department for Business, Energy and Industrial Strategy
   (BEIS); UKRI Future Leaders Fellowship lEffect Handler Oriented
   Programmingz [MR/T043830/1]; European Research Council (ERC) [682315]
   Funding Source: European Research Council (ERC)
FX This work was supported by ERC Consolidator Grant Skye (grant number
   682315) and by an ISCF Metrology Fellowship grant provided by the UK
   government's Department for Business, Energy and Industrial Strategy
   (BEIS). Lindley is supported by UKRI Future Leaders Fellowship lEffect
   Handler Oriented Programmingz (MR/T043830/1).
CR Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Emrich Frank, 2020, PLDI '20: Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation, P423, DOI 10.1145/3385412.3386003
   Emrich Frank, 2022, CONSTRAINT BASED TYP, DOI [10.48550/arXiv.2207.09914, DOI 10.48550/ARXIV.2207.09914]
   Garrigue J, 1999, INFORM COMPUT, V155, P134, DOI 10.1006/inco.1999.2830
   Gundry A, 2015, ACM SIGPLAN NOTICES, V50, P11, DOI 10.1145/2804302.2804305
   Gundry A, 2010, MSFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON MATHEMATICALLY STRUCTURED FUNCTIONAL PROGRAMMING, P43
   JONES MP, 1994, SCI COMPUT PROGRAM, V22, P231, DOI 10.1016/0167-6423(94)00005-0
   Kennedy Andrew, 2010, Central European Functional Programming School. Third Summer School (CEFP 2009). Revised Selected Lectures, P268, DOI 10.1007/978-3-642-17685-2_8
   Kuan G, 2007, ML'07: PROCEEDINGS OF THE 2007 WORKSHOP ON ML, P3
   Le Botlan D, 2003, ACM SIGPLAN NOTICES, V38, P27, DOI 10.1145/944746.944709
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283
   Leroy Xavier, 1993, J FUNCT PROGRAM, V3, P431, DOI [10.1017/S0956796800000848, DOI 10.1017/S0956796800000848]
   Lindley Sam, 2012, TLDI, P91, DOI DOI 10.1145/2103786.2103798
   Morris JG, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290325
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Pfenning F., 1993, Fundamenta Informaticae, V19, P185
   Pottier F, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P203, DOI 10.1145/2628136.2628145
   Pottier Francois, 2005, ESSENCE ML TYPE INFE
   Remy D., 1993, Extension of ML type system with a sorted equation theory on types
   Russo CV, 2009, ML'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN WORKSHOP ON ML, P3
   Serrano A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408971
   Serrano A, 2018, ACM SIGPLAN NOTICES, V53, P783, DOI [10.1145/3192366.3192389, 10.1145/3296979.3192389]
   Simonet V, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180476
   Vytiniotis D, 2006, ACM SIGPLAN NOTICES, V41, P251, DOI 10.1145/1160074.1159838
   Vytiniotis D, 2011, J FUNCT PROGRAM, V21, P333, DOI 10.1017/S0956796811000098
   Wand M., 1987, Fundamenta Informaticae, V10, P115
   WELLS JB, 1994, IEEE S LOG, P176
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
NR 29
TC 0
Z9 0
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 111
DI 10.1145/3547642
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000022
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Eichholz, M
   Campbell, EH
   Krebs, M
   Foster, N
   Mezini, M
AF Eichholz, Matthias
   Campbell, Eric Hayden
   Krebs, Matthias
   Foster, Nate
   Mezini, Mira
TI Dependently-Typed Data Plane Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Software-Defined Networking; P4; Dependent Types
AB Programming languages like P4 enable specifying the behavior of network data planes in software. However, with increasingly powerful and complex applications running in the network, the risk of faults also increases. Hence, there is growing recognition of the need for methods and tools to statically verify the correctness of P4 code, especially as the language lacks basic safety guarantees. Type systems are a lightweight and compositional way to establish program properties, but there is a significant gap between the kinds of properties that can be proved using simple type systems (e.g., SafeP4) and those that can be obtained using full-blown verification tools (e.g., p4v). In this paper, we close this gap by developing.4, a dependently-typed version of P4 based on decidable refinements. We motivate the design of.4, prove the soundness of its type system, develop an SMT-based implementation, and present case studies that illustrate its applicability to a variety of data plane programs.
C1 [Eichholz, Matthias; Krebs, Matthias; Mezini, Mira] Tech Univ Darmstadt, Darmstadt, Germany.
   [Campbell, Eric Hayden; Foster, Nate] Cornell Univ, Ithaca, NY 14853 USA.
C3 Technical University of Darmstadt; Cornell University
RP Eichholz, M (corresponding author), Tech Univ Darmstadt, Darmstadt, Germany.
EM eichholz@cs.tu-darmstadt.de; ehc86@cornell.edu;
   krebs@cs.tu-darmstadt.de; jnfoster@cs.cornell.edu;
   mezini@cs.tu-darmstadt.de
OI Mezini, Mira/0000-0001-6563-7537; Foster, Nate/0000-0002-6557-684X;
   Eichholz, Matthias/0000-0002-6112-9305; Campbell,
   Eric/0000-0001-5954-2136
FU German Research Foundation (DFG) as part of the Collaborative Research
   Center (CRC) 1053 MAKI; National Research Center for Applied
   Cybersecurity ATHENE; National Science Foundation [FMiTF-1918396];
   Defense Advanced Research Projects Agency [HR001120C0107]
FX We are grateful to the POPL reviewers for their careful feedback and
   many suggestions for improving this paper. Our work has been supported
   in part by the German Research Foundation (DFG) as part of the
   Collaborative Research Center (CRC) 1053 MAKI, by the National Research
   Center for Applied Cybersecurity ATHENE, by the National Science
   Foundation under grant FMiTF-1918396 as well as a Graduate Research
   Fellowship, the Defense Advanced Research Projects Agency under Contract
   HR001120C0107, and gifts from Keysight and InfoSys.
CR Baldi M, 2019, 2019 ACM/IEEE SYMPOSIUM ON ARCHITECTURES FOR NETWORKING AND COMMUNICATIONS SYSTEMS (ANCS), DOI 10.1109/ancs.2019.8901893
   Beckett Ryan, 2020, Proceedings of the 19th ACM Workshop on Hot Topics in Networks, P8, DOI [DOI 10.1145/3422604.3425930(P.117, 10.1145/3422604.3425930 (p. 117]
   Bosshart P, 2014, ACM SIGCOMM COMP COM, V44, P87, DOI 10.1145/2656877.2656890
   Bosshart P, 2013, ACM SIGCOMM COMP COM, V43, P99, DOI 10.1145/2534169.2486011
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Castagna G, 2014, ACM SIGPLAN NOTICES, V49, P5, DOI 10.1145/2535838.2535840
   Cisco, 2018, CISC NEX 3000 SER SW
   Condit J, 2007, LECT NOTES COMPUT SC, V4421, P520
   Delaware B, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341686
   Doenges R, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434322
   Dumitrescu D, 2020, SIGCOMM '20: PROCEEDINGS OF THE 2020 ANNUAL CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION ON THE APPLICATIONS, TECHNOLOGIES, ARCHITECTURES, AND PROTOCOLS FOR COMPUTER COMMUNICATION, P571, DOI 10.1145/3387514.3405888
   Eichholz Matthias, 2019, 33 EUR C OBJ OR PROG, DOI [10.4230/LIPIcs.ECOOP.2019.12, DOI 10.4230/LIPICS.ECOOP.2019.12]
   Ennals Robert, 2004, EUR S PROGR ESOP, DOI [10.1007/978-3-540-24725-8_15, DOI 10.1007/978-3-540-24725-8_15]
   Fisher K, 2005, ACM SIGPLAN NOTICES, V40, P295, DOI 10.1145/1064978.1065046
   Freire L, 2018, PROCEEDINGS OF THE SYMPOSIUM ON SDN RESEARCH (SOSR'18), DOI 10.1145/3185467.3185499
   Gao JQ, 2020, SIGCOMM '20: PROCEEDINGS OF THE 2020 ANNUAL CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION ON THE APPLICATIONS, TECHNOLOGIES, ARCHITECTURES, AND PROTOCOLS FOR COMPUTER COMMUNICATION, DOI 10.1145/3387514.3405879
   Gapeyev Vladimir, 2003, EUR C OBJ OR PROGR E, DOI [10.1007/978-3-540-45070-2_8, DOI 10.1007/978-3-540-45070-2_8]
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Harper Robert, 1994, C LISP FUNCT PROGR L, p55s64, DOI [10.1145/ 182409.182431, DOI 10.1145/182409.182431]
   Hoiland-Jorgensen T, 2018, CONEXT'18: PROCEEDINGS OF THE 14TH INTERNATIONAL CONFERENCE ON EMERGING NETWORKING EXPERIMENTS AND TECHNOLOGIES, P54, DOI 10.1145/3281411.3281443
   Hongwei Xi, 2000, S LOG COMP SCI LICS, DOI [10.1109/LICS.2000.855785, DOI 10.1109/LICS.2000.855785]
   Hosoya Haruo, 2003, ACM T INTERNET TECHN, V3, DOI DOI 10.1145/767193.767195
   Ibanez S, 2019, PROCEEDINGS OF THE 2019 ACM/SIGDA INTERNATIONAL SYMPOSIUM ON FIELD-PROGRAMMABLE GATE ARRAYS (FPGA'19), P1, DOI 10.1145/3289602.3293924
   Jim T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P417, DOI 10.1145/1706299.1706347
   Jin X, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P121, DOI 10.1145/3132747.3132764
   Liu J, 2018, PROCEEDINGS OF THE 2018 CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '18), P490, DOI 10.1145/3230543.3230582
   Mcbride C, 2001, DERIVATIVE REGULAR T
   McCann PJ, 2000, ACM SIGCOMM COMP COM, V30, P321, DOI 10.1145/347057.347563
   Muthukrishnan Chitra, 2010, WORKSH HOT TOP NETW, DOI [10.1145/1868447.1868456, DOI 10.1145/1868447.1868456]
   Nanevski A, 2006, ACM SIGPLAN NOTICES, V41, P62, DOI 10.1145/1160074.1159812
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   Nanevski A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P229
   Ramananandro T, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1465
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Soni H., 2020, P SIGCOMM, P329, DOI 10.1145/3387514.3405872
   Stoenescu R, 2018, PROCEEDINGS OF THE 2018 CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '18), P518, DOI 10.1145/3230543.3230548
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Tobin-Hochstadt Sam., INT C FUNCTIONAL PRO, DOI DOI 10.1145/1863543.1863561
   Vazou N, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P132, DOI 10.1145/3242744.3242756
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Wang Han, 2017, P S SDN RES, P122, DOI [10.1145/3050220.3050234, DOI 10.1145/3050220.3050234]
   Xi Hongwei, 1999, S PRINC PROGR LANG P
   Xi HW, 2001, ACM SIGPLAN NOTICES, V36, P169, DOI 10.1145/507669.507657
NR 43
TC 5
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 40
DI 10.1145/3498701
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900041
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Kesner, D
AF Kesner, Delia
TI A Fine-Grained Computational Interpretation of Girard's Intuitionistic
   Proof-Nets
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE lambda-calculus; explicit substitutions; linear logic; proof-nets
ID EXPLICIT SUBSTITUTIONS
AB This paper introduces a functional term calculus, called pn, that captures the essence of the operational semantics of Intuitionistic Linear Logic Proof-Nets with a faithful degree of granularity, both statically and dynamically. On the static side, we identify an equivalence relation on pn-terms which is sound and complete with respect to the classical notion of structural equivalence for proof-nets. On the dynamic side, we show that every single (exponential) step in the term calculus translates to a different single (exponential) step in the graphical formalism, thus capturing the original Girard's granularity of proof-nets but on the level of terms. We also show some fundamental properties of the calculus such as confluence, strong normalization, preservation of beta-strong normalization and the existence of a strong bisimulation that captures pairs of pn-terms having the same graph reduction.
C1 [Kesner, Delia] Univ Paris, CNRS, IRIF, Paris, France.
   [Kesner, Delia] Inst Univ France, Paris, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite Paris
   Cite; Institut Universitaire de France
RP Kesner, D (corresponding author), Univ Paris, CNRS, IRIF, Paris, France.; Kesner, D (corresponding author), Inst Univ France, Paris, France.
EM kesner@irif.fr
OI Kesner, Delia/0000-0003-4254-3129
CR Abadi M., 1991, Journal of Functional Programming, V1, P375, DOI 10.1017/S0956796800000186
   ABRAMSKY S, 1993, THEOR COMPUT SCI, V111, P3, DOI 10.1016/0304-3975(93)90181-R
   Accattoli B, 2018, LECT NOTES COMPUT SC, V11187, P37, DOI 10.1007/978-3-030-02508-3_3
   Accattoli B, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P363, DOI 10.1145/2628136.2628154
   Accattoli B, 2014, ACM SIGPLAN NOTICES, V49, P659, DOI 10.1145/2535838.2535886
   Accattoli B, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:28)2012
   Accattoli B, 2010, LECT NOTES COMPUT SC, V6247, P381, DOI 10.1007/978-3-642-15205-4_30
   Accattoli B, 2009, LECT NOTES COMPUT SC, V5771, P55, DOI 10.1007/978-3-642-04027-6_7
   Accattoli Beniamino, 2011, THESIS U ROMA SAPIEN
   Asperti A., 1996, Journal of Functional Programming, V6, P763, DOI 10.1017/S0956796800001994
   Barenbaum Pablo, 2017, LIPIcs, V84, DOI DOI 10.4230/LIPICS.FSCD.2017.9
   Benton N., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P75, DOI 10.1007/BFb0037099
   Bloo Roel, 1995, Computing Science in the Netherlands, P62
   Church A, 1932, ANN MATH, V33, P346, DOI 10.2307/1968337
   CURIEN PL, 1991, THEOR COMPUT SCI, V82, P389, DOI 10.1016/0304-3975(91)90230-Y
   Danos V, 1999, THEOR COMPUT SCI, V227, P79, DOI 10.1016/S0304-3975(99)00049-3
   Danos V, 1996, IEEE S LOG, P394
   Danos Vincent, 1990, Phd thesis
   Danvy O., 2013, Proceedings of the 15th symposium on principles and practice of declarative programming, P97, DOI DOI 10.1145/2505879.2505898
   de Bruijn N. G., 1987, LECT NOTES PURE APPL, V106, P71
   de Bruijn Nicolaas G., 1978, 78WSK03 EINDH U TECH
   Dezani-Ciancaglini Mariangiola, 1995, LECT NOTES COMPUTER, V902, DOI [10.1007/BFb0014040, DOI 10.1007/BFB0014040]
   Di Cosmo R., 1994, Mathematical Structures in Computer Science, V4, P315, DOI 10.1017/S0960129500000505
   Di Cosmo R., 2003, Mathematical Structures in Computer Science, V13, P409, DOI 10.1017/S0960129502003791
   Di Cosmo Roberto, 1995, EXPANDING EXTENSIONA, P139, DOI [10.1007/BFb0014050, DOI 10.1007/BFB0014050]
   DiCosmo R, 1997, IEEE S LOG, P35, DOI 10.1109/LICS.1997.614927
   Ehrhard T, 2006, THEOR COMPUT SCI, V364, P166, DOI 10.1016/j.tcs.2006.08.003
   Fernández M, 2014, J LOGIC COMPUT, V24, P590, DOI 10.1093/logcom/exs021
   Ghani N, 1999, LECT NOTES COMPUT SC, V1578, P197
   Ghani Neil, 2000, Log. J. IGPL, V8, P7, DOI [10.1093/jigpal/8.1.7, DOI 10.1093/JIGPAL/8.1.7]
   Girard Jean-Yves, 1988, LOGIC C 88 N HOLL
   GIRARD JY, 1990, LECT NOTES COMPUT SC, V417, P76
   Girard JY, 1996, LECT NOTES PURE APPL, V180, P97
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   GRIFFIN TG, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P47, DOI 10.1145/96709.96714
   Gundersen T, 2013, IEEE S LOG, P311, DOI 10.1109/LICS.2013.37
   Hardin Therese, 1989, FRANCE JAPAN ARTIFIC, P1
   Henderson Peter, 1976, P 3 ACM SIGACT SIGPL, P95, DOI DOI 10.1145/800168.811543
   Herbelin H, 1995, LECT NOTES COMPUT SC, V933, P61, DOI 10.1007/BFb0022247
   Hughes D. J. D., 2005, ACM Transactions on Computational Logic, V6, P784, DOI 10.1145/1094622.1094629
   Kamareddine F, 1995, LECT NOTES COMPUT SC, V982, P45, DOI 10.1007/BFb0026813
   Kesner D, 2005, LECT NOTES COMPUT SC, V3467, P407
   Kesner D, 2007, LECT NOTES COMPUT SC, V4646, P238
   Kesner Delia, 2020, LIPICS, V152, DOI [10.4230/LIPIcs.CSL.2020.4, DOI 10.4230/LIPICS.CSL.2020.4]
   Krivine Jean-Louis, 2007, Higher-Order and Symbolic Computation, V20, P199, DOI 10.1007/S10990-007-9018-9
   Lafont Ambroise, 2019, THESIS ECOLE NATL SU
   LAMPING J, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P16, DOI 10.1145/96709.96711
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Laurent O, 2003, THEOR COMPUT SCI, V290, P161, DOI 10.1016/S0304-3975(01)00297-3
   Laurent O., 2002, THESIS U AIX MARSEIL
   Leroy X., 1990, 117 INRIA
   Mackie I., 1999, SIGPLAN Notices, V34, P117, DOI 10.1145/291251.289434
   Martin-Lof Per., 1972, An intuitionistic theory of types
   Mellies P.-A., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P328, DOI 10.1007/BFb0014062
   Milner R, 2007, ELECTRON NOTES THEOR, V175, P65, DOI 10.1016/j.entcs.2006.07.035
   Muroya Koko, 2017, LIPICS, V82, DOI [10.4230/LIPIcs.CSL.2017.32, DOI 10.4230/LIPICS.CSL.2017.32]
   PARIGOT M, 1992, LECT NOTES ARTIF INT, V624, P190, DOI 10.1007/BFb0013061
   REGNIER L, 1994, THEOR COMPUT SCI, V126, P281, DOI 10.1016/0304-3975(94)90012-4
   Regnier Laurent, 1992, PhD thesis
   Ritter E, 1999, LECT NOTES COMPUT SC, V1581, P325
   Robert P., 1992, 9207 EINDH U TECHN D
   ROSE K, 1992, LNCS, V656, P36
   Sestoft P., 1997, Journal of Functional Programming, V7, P231, DOI 10.1017/S0956796897002712
   Severi P., 1994, Logical Foundations of Computer Science. Third International Symposium, LFCS '94 Proceedings, P316
   Terese, 2003, CAMBRIDGE TRACTS THE, V55
   WADSWORTH CP, 1971, THESIS OXFORD U
NR 66
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 8
DI 10.1145/3498669
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900009
OA gold
DA 2024-07-18
ER

PT J
AU Liu, A
   Bernstein, GL
   Chlipala, A
   Ragan-Kelley, J
AF Liu, Amanda
   Bernstein, Gilbert Louis
   Chlipala, Adam
   Ragan-Kelley, Jonathan
TI Verified Tensor-Program Optimization Via High-Level Scheduling Rewrites
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE formal verification; proof assistants; array programming; optimization
AB We present a lightweight Coq framework for optimizing tensor kernels written in a pure, functional array language. Optimizations rely on user scheduling using series of verified, semantics-preserving rewrites. Unusually for compilation targeting imperative code with arrays and nested loops, all rewrites are source-to-source within a purely functional language. Our language comprises a set of core constructs for expressing high-level computation detail and a set of what we call reshape operators, which can be derived from core constructs but trigger low-level decisions about storage patterns and ordering. We demonstrate that not only is this system capable of deriving the optimizations of existing state-of-the-art languages like Halide and generating comparably performant code, it is also able to schedule a family of useful program transformations beyond what is reachable in Halide.
C1 [Liu, Amanda; Chlipala, Adam; Ragan-Kelley, Jonathan] MIT, CSAIL, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
   [Bernstein, Gilbert Louis] Univ Calif Berkeley, Berkeley, CA 94720 USA.
C3 Massachusetts Institute of Technology (MIT); University of California
   System; University of California Berkeley
RP Liu, A (corresponding author), MIT, CSAIL, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
EM lamanda@mit.edu; gilbo@berkeley.edu; adamc@csail.mit.edu;
   jrk@csail.mit.edu
OI Ragan-Kelley, Jonathan/0000-0001-6243-9543; Liu,
   Amanda/0000-0001-5549-9177
FU National Science Foundation Graduate Research Fellowship [1745302];
   DARPA [HR00112090017, FA8650-20-2-7006]
FX This material is based upon work supported by the National Science
   Foundation Graduate Research Fellowship under Grant No. 1745302, as well
   as DARPA under the PAPPA (agreement HR00112090017) and RTML (contract
   FA8650-20-2-7006) programs.
CR Bauer M, 2012, INT CONF HIGH PERFOR
   Bernstein Gilbert, 2020, ARXIV200811256CSPL
   Chakravarty M. M., 2011, P 6 WORKSH DECL ASP, P3, DOI DOI 10.1145/1926354.1926358
   Chamberlain BL, 2007, INT J HIGH PERFORM C, V21, P291, DOI 10.1177/1094342007078442
   Chamberlain BradfordL., 2001, The design and implementation of a region-based parallel programming language
   Chen C., 2008, Chill: A framework for composing high-level loop transformations
   Chen TQ, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P579
   Delaware B, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341686
   Delaware B, 2015, ACM SIGPLAN NOTICES, V50, P689, DOI [10.1145/2775051.2677006, 10.1145/2676726.2677006]
   Donadio S, 2006, LECT NOTES COMPUT SC, V4339, P136, DOI 10.1007/978-3-540-69330-7_10
   Fatahalian K., 2006, SC 06, P83
   Graham Ronald L., 2011, CONCRETE MATH
   Hagedorn Bastian, 2020, ARXIV200306324CSPL
   Hartono A, 2009, INT PARALL DISTRIB P, P246
   Henriksen T, 2017, ACM SIGPLAN NOTICES, V52, P556, DOI [10.1145/3140587.3062354, 10.1145/3062341.3062354]
   Hietala K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434318
   Hu YM, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3355089.3356506
   Iverson K. E., 1962, A Programming Language
   Kjolstad F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133901
   Kommrusch Steve, 2021, ARXIV210602452CSPL
   Li TM, 2018, ACM T GRAPHIC, V37, DOI 10.1145/3197517.3201383
   Paszke A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473593
   Pit-Claudel C, 2020, LECT NOTES COMPUT SC, V12167, P119, DOI 10.1007/978-3-030-51054-1_7
   Ragan-Kelley J, 2012, ACM T GRAPHIC, V31, DOI 10.1145/2185520.2185528
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Ran FuDavid Feldman., 2017, US SOLAR PHOTOVOLTAI, DOI [10.2172/1395932, DOI 10.2172/1395932]
   Slepak J, 2014, LECT NOTES COMPUT SC, V8410, P27
   Smith Gus Henry, 2021, P 5 ACM SIGPLAN INT, P21
   Steuwer M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P205, DOI 10.1145/2784731.2784754
   Vasilache Nicolas, 2018, ARXIV180204730 CSPL
   Venkat A, 2019, INT J HIGH PERFORM C, V33, P1275, DOI 10.1177/1094342019866247
   Yi Qing, 2007, Parallel and Distributed Processing Sympo-sium, P1
   Zhang YM, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276491
NR 33
TC 9
Z9 12
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 55
DI 10.1145/3498717
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900056
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Wang, Z
   Albarghouthi, AWS
   Prakriya, G
   Jha, S
AF Wang, Zi
   Albarghouthi, A. W. S.
   Prakriya, Gautam
   Jha, Somesh
TI Interval Universal Approximation for Neural Networks
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Abstract Interpretation; Universal Approximation
ID MULTILAYER FEEDFORWARD NETWORKS
AB To verify safety and robustness of neural networks, researchers have successfully applied abstract interpretation, primarily using the interval abstract domain. In this paper, we study the theoretical power and limits of the interval domain for neural-network verification.
   First, we introduce the interval universal approximation (IUA) theorem. IUA shows that neural networks not only can approximate any continuous function f (universal approximation) as we have known for decades, but we can find a neural network, using any well-behaved activation function, whose interval bounds are an arbitrarily close approximation of the set semantics of f (the result of applying f to a set of inputs). We call this notion of approximation interval approximation. Our theorem generalizes the recent result of Baader et al. from ReLUs to a rich class of activation functions that we call squashable functions. Additionally, the IUA theorem implies that we can always construct provably robust neural networks under l(infinity)-norm using almost any practical activation function.
   Second, we study the computational complexity of constructing neural networks that are amenable to precise interval analysis. This is a crucial question, as our constructive proof of IUA is exponential in the size of the approximation domain. We boil this question down to the problem of approximating the range of a neural network with squashable activation functions. We show that the range approximation problem (RA) is a.2-intermediate problem, which is strictly harder than NP-complete problems, assuming coNP. NP. As a result, IUA is an inherently hard problem: No matter what abstract domain or computational tools we consider to achieve interval approximation, there is no efficient construction of such a universal approximator. This implies that it is hard to construct a provably robust network, even if we have a robust network to start with.
C1 [Wang, Zi; Albarghouthi, A. W. S.; Jha, Somesh] Univ Wisconsin, Madison, WI 53706 USA.
   [Prakriya, Gautam] Chinese Univ Hong Kong, Hong Kong, Peoples R China.
C3 University of Wisconsin System; University of Wisconsin Madison; Chinese
   University of Hong Kong
RP Wang, Z (corresponding author), Univ Wisconsin, Madison, WI 53706 USA.
EM zw@cs.wisc.edu; aws@cs.wisc.edu; gprakriyavenkata@cuhk.edu.hk;
   jha@cs.wisc.edu
OI Wang, Zi/0000-0002-0815-1343; Albarghouthi, Aws/0000-0003-4577-175X
FU Air Force Grant [FA9550-18-1-0166]; National Science Foundation (NSF)
   [CCF-FMitF-1836978, SaTC-Frontiers-1804648, CCF-1652140]; ARO
   [W911NF-17-1-0405]
FX This work is partially supported by Air Force Grant FA9550-18-1-0166,
   the National Science Foundation (NSF) Grants CCF-FMitF-1836978,
   SaTC-Frontiers-1804648 and CCF-1652140 and ARO grant number
   W911NF-17-1-0405.
CR Albarghouthi Aws, 2021, THE NEUTRAL
   Anderson G, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P731, DOI 10.1145/3314221.3314614
   Anil Cem, 2019, PR MACH LEARN RES, P291
   Baader M., 2020, INT C LEARN REPR
   Bergstra J., 2009, Quadratic polynomials learn better image features, P1337
   Clevert D., 2016, ARXIV151107289
   Cohen Jeremy E. J., 2019, ARXIV190404861CSLG
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Cybenko G., 1989, Mathematics of Control, Signals, and Systems, V2, P303, DOI 10.1007/BF02551274
   Durrett R., 2010, PROBABILITY THEORY E, DOI 10.1017/CBO9780511779398
   Ehlers R, 2017, LECT NOTES COMPUT SC, V10482, P269, DOI 10.1007/978-3-319-68167-2_19
   Gehr T, 2018, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2018.00058
   Ghorbal K, 2009, LECT NOTES COMPUT SC, V5643, P627, DOI 10.1007/978-3-642-02658-4_47
   Glorot X., 2011, JMLR Proceedings, V15, P315, DOI DOI 10.1002/ECS2.1832
   Goodfellow I. J., 2015, 3 INT C LEARNING REP
   Gowal S, 2019, IEEE I CONF COMP VIS, P4841, DOI 10.1109/ICCV.2019.00494
   He JC, 2020, J COMPUT MATH, V38, P502, DOI 10.4208/jcm.1901-m2018-0160
   HORNIK K, 1989, NEURAL NETWORKS, V2, P359, DOI 10.1016/0893-6080(89)90020-8
   Huang PS, 2019, 2019 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING AND THE 9TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING (EMNLP-IJCNLP 2019), P4083
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Kidger Patrick, 2019, ARXIV PREPRINT ARXIV
   Krizhevsky Alex, 2012, Advances in neural information processing systems
   LESHNO M, 1993, NEURAL NETWORKS, V6, P861, DOI 10.1016/S0893-6080(05)80131-5
   Lin HZ, 2018, ADV NEUR IN, V31
   Lu Z, 2017, ADV NEUR IN, V30
   Mikolov T., 2013, ADV NEURAL INFORM PR, V26, P3111, DOI DOI 10.5555/2999792.2999959
   Mirman Matthew, 2018, PMLR, V80
   Nair V., 2010, P 27 INT C MACHINE L, P807
   Nielsen M. A, 2015, Neural networks and deep learning, V2018
   Raychev V, 2015, ACM SIGPLAN NOTICES, V50, P111, DOI [10.1145/2775051.2677009, 10.1145/2676726.2677009]
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Singh G, 2018, ADV NEUR IN, V31
   Tjeng V, 2019, ICLR
   Vazirani V.V., 2001, APPROXIMATION ALGORI, DOI 10.1007/978-3-662-04565-7
   Wang SQ, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P1599
   Weng TW, 2018, PR MACH LEARN RES, V80
   Xie C., 2020, ARXIV200614536
   Zhang Y., 2021, ABS210207818 CORR
   Zhang Yuhao, 2020, P MACHINE LEARNING R, V119, P11023
NR 40
TC 5
Z9 5
U1 3
U2 7
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 14
DI 10.1145/3498675
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900015
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Dura, A
   Reichenbach, C
   Söderberg, E
AF Dura, Alexandru
   Reichenbach, Christoph
   Soderberg, Emma
TI JavaDL: Automatically Incrementalizing Java Bug Pattern Detection
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Datalog; Syntactic Patterns; Static Analysis Frameworks; Software Bugs
ID JASTADD; POINTS
AB Static checker frameworks support software developers by automatically discovering bugs that fit general-purpose bug patterns. These frameworks ship with hundreds of detectors for such patterns and allow developers to add custom detectors for their own projects. However, existing frameworks generally encode detectors in imperative specifications, with extensive details of not only what to detect but also how. These details complicate detector maintenance and evolution, and also interfere with the framework's ability to change how detection is done, for instance, to make the detectors incremental.
   In this paper, we present JavaDL, a Datalog-based declarative specification language for bug pattern detection in Java code. JavaDL seamlessly supports both exhaustive and incremental evaluation from the same detector specification. This specification allows developers to describe local detector components via syntactic pattern matching, and nonlocal (e.g., interprocedural) reasoning via Datalog-style logical rules. We compare our approach against the well-established SpotBugs and Error Prone tools by re-implementing several of their detectors in JavaDL. We find that our implementations are substantially smaller and similarly effective at detecting bugs on the Defects4J benchmark suite, and run with competitive runtime performance. In our experiments, neither incremental nor exhaustive analysis can consistently outperform the other, which highlights the value of our ability to transparently switch execution modes. We argue that our approach showcases the potential of clear-box static checker frameworks that constrain the bug detector specification language to enable the framework to adapt and enhance the detectors.
C1 [Dura, Alexandru; Reichenbach, Christoph; Soderberg, Emma] Lund Univ, Dept Comp Sci, Box 118, S-22100 Lund, Sweden.
C3 Lund University
RP Dura, A (corresponding author), Lund Univ, Dept Comp Sci, Box 118, S-22100 Lund, Sweden.
EM alexandru.dura@cs.lth.se; christoph.reichenbach@cs.lth.se
OI Dura, Alexandru/0000-0002-8420-390X; Soderberg,
   Emma/0000-0001-7966-4560; Reichenbach, Christoph/0000-0003-0608-7023
FU Wallenberg AI, Autonomous Systems and Software Program (WASP) - Knut and
   Alice Wallenberg Foundation
FX This work was partially supported by the Wallenberg AI, Autonomous
   Systems and Software Program (WASP) funded by the Knut and Alice
   Wallenberg Foundation. The authors thank Alfred Akesson, Gorel Hedin,
   Luke Church, the members of the Lund University Software Technology
   reading group, and especially the anonymous OOPSLA reviewers for their
   substantial and valuable feedback.
CR Aftandilian E., 2012, 2012 12th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2012), P14, DOI 10.1109/SCAM.2012.28
   [Anonymous], 2012, LUCSTR2012249
   [Anonymous], 1985, P 5 ACM SIGACT SIGMO, DOI DOI 10.1145/6012.15399
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Arzt S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P288, DOI 10.1145/2568225.2568243
   Ayewah N, 2008, IEEE SOFTWARE, V25, P22, DOI 10.1109/MS.2008.130
   Balatsouras G, 2016, LECT NOTES COMPUT SC, V9837, P84, DOI 10.1007/978-3-662-53413-7_5
   Basten Bas, 2008, LECT NOTES COMPUTER, V5452, P265, DOI [10.1007/978-3-642-00434-6_17, DOI 10.1007/978-3-642-00434-6_17]
   Bodden E, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P241, DOI 10.1145/1985793.1985827
   Brandhof Simon, 2014, SONARQUBE
   Bravenboer M, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P243
   Burn Oliver, 2021, CHECKSTYLE 9 0
   Calcagno C, 2015, LECT NOTES COMPUT SC, V9058, P3, DOI 10.1007/978-3-319-17524-9_1
   Ceri S., 1989, IEEE Transactions on Knowledge and Data Engineering, V1, P146, DOI 10.1109/69.43410
   Cohen T, 2006, ACM SIGPLAN NOTICES, V41, P89, DOI 10.1145/1167515.1167481
   Copeland Tom, 2005, PMD applied, V10
   de Moor O, 2008, LECT NOTES COMPUT SC, V5235, P78, DOI 10.1007/978-3-540-88643-3_3
   De Roover C., 2007, P 2007 ACM SIGPLAN S, P92
   De Roover Coen., 2009, THESIS VRIJE U BRUSS
   De Roover Coen, 2011, P 9 INT C PRINCIPLES, P71, DOI [10.1145/2093157.2093168, DOI 10.1145/2093157.2093168]
   Do LNQ, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P307, DOI 10.1145/3092703.3092705
   Dura A, 2019, SOAP'19: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON STATE OF THE ART IN PROGRAM ANALYSIS, P38, DOI 10.1145/3315568.3329970
   Dura Alexandru, JavaDL: Automatically Incrementalizing Java Bug Pattern Detection, DOI 10.5281/zenodo.5090141
   Dura Alexandru, 2021, JavaDL: Automatically Incrementalizing Java Bug Pattern Detection, DOI 10.5281/zenodo.5090140
   Eichberg M, 2007, LECT NOTES COMPUT SC, V4354, P109
   Ekman T, 2007, ACM SIGPLAN NOTICES, V42, P1, DOI 10.1145/1297105.1297029
   Falconer H, 2007, LECT NOTES COMPUT SC, V4420, P218
   Fink Stephen, 2012, WALA-The TJ Watson Libraries for Analysis
   Fischer Bernd, 2004, RETROFITTING AUTOBAY, P239, DOI [10.1007/978-3-540-25935-0_14, DOI 10.1007/978-3-540-25935-0_14]
   Grigore R, 2017, ACM SIGPLAN NOTICES, V52, P73, DOI 10.1145/3093333.3009871
   Gupta A., 1993, SIGMOD Record, V22, P157, DOI 10.1145/170036.170066
   Habib A, 2018, IEEE INT CONF AUTOM, P317, DOI 10.1145/3238147.3238213
   Hedin G, 2003, SCI COMPUT PROGRAM, V47, P37, DOI 10.1016/S0167-6423(02)00109-0
   Helm D, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P184, DOI 10.1145/3368089.3409765
   Heo K, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P561, DOI 10.1145/3314221.3314616
   Huang SS, 2008, ACM T SOFTW ENG METH, V18, DOI 10.1145/1416563.1416566
   Immerman N., 1999, Descriptive Complexity
   Janzen D., 2003, Proceedings of the 2nd Annual Conference on Aspect-Oriented Software Development (AOSD), P178, DOI 10.1145/643603.643622
   Just R, 2014, P 2014 INT S SOFTW T, P437, DOI DOI 10.1145/2610384.2628055
   Kaminski T, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3138224
   Kats LCL, 2011, LECT NOTES COMPUT SC, V6563, P327, DOI 10.1007/978-3-642-19440-5_22
   Kats LCL, 2008, ACM SIGPLAN NOTICES, V43, P91, DOI 10.1145/1449955.1449772
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Lhoták O, 2004, ACM SIGPLAN NOTICES, V39, P158, DOI 10.1145/996893.996861
   Li Y, 2019, ACM T SOFTW ENG METH, V28, DOI 10.1145/3295739
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   Martin M, 2005, ACM SIGPLAN NOTICES, V40, P365, DOI 10.1145/1103845.1094840
   Mey J, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING (SLE '18), P70, DOI 10.1145/3276604.3276616
   Narasimhan K, 2018, AUTOMAT SOFTW ENG, V25, P627, DOI 10.1007/s10515-018-0238-5
   O'Hearn P, 2019, COMMUN ACM, V62, P86, DOI 10.1145/3211968
   Oqvist J., 2013, Proceedings of the 2013 International Conference on Principles and Practices of Programming on the Java Platform: Virtual Machines, Languages, and Tools, P147, DOI DOI 10.1145/2500828.2500843
   Oqvist J, 2017, SLE'17: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING, P151, DOI 10.1145/3136014.3136032
   Pawlak R, 2016, SOFTWARE PRACT EXPER, V46, P1155, DOI 10.1002/spe.2346
   Raghothaman M, 2018, ACM SIGPLAN NOTICES, V53, P722, DOI [10.1145/3192366.3192417, 10.1145/3296979.3192417]
   Reichenbach C, 2021, 2021 ACM/IEEE 43RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: NEW IDEAS AND EMERGING RESULTS (ICSE-NIER 2021), P61, DOI 10.1109/ICSE-NIER52604.2021.00021
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T. W., 1995, Applications of Logic Databases, P163
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Riouak Idriss, 2021, 21 IEEE INT WORK C S
   Sadowski C, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P598, DOI 10.1109/ICSE.2015.76
   Scholz B, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P196, DOI 10.1145/2892208.2892226
   Scott E, 2008, ELECTRON NOTES THEOR, V203, P53, DOI 10.1016/j.entcs.2008.03.044
   Söderberg E, 2013, SCI COMPUT PROGRAM, V78, P1809, DOI 10.1016/j.scico.2012.02.002
   Söderberg E, 2011, LECT NOTES COMPUT SC, V6563, P2, DOI 10.1007/978-3-642-19440-5_2
   SpotBugs community, 2021, SPOTBUGS 4 4 1 BUG D
   Szabó T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276509
   Ullman J. D., 1989, Proceedings of the Eighth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P140, DOI 10.1145/73721.73736
   Vall ~ee-Rai R., 2010, CASCON 1 DECADE HIGH, P214, DOI DOI 10.1145/1925805.1925818
   Van Wyk E, 2010, SCI COMPUT PROGRAM, V75, P39, DOI 10.1016/j.scico.2009.07.004
   Vassallo C, 2020, EMPIR SOFTW ENG, V25, P1419, DOI 10.1007/s10664-019-09750-5
   Visser E, 2002, LECT NOTES COMPUT SC, V2487, P299
   VOGT HH, 1989, SIGPLAN NOTICES, V24, P131, DOI 10.1145/74818.74830
   Zhao D, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3379446
NR 73
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 165
DI 10.1145/3485542
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200067
OA gold
DA 2024-07-18
ER

PT J
AU Verbruggen, G
   Le, V
   Gulwani, S
AF Verbruggen, Gust
   Le, Vu
   Gulwani, Sumit
TI Semantic Programming by Example with Pre-trained Models
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; programming by example; language models
AB The ability to learn programs from few examples is a powerful technology with disruptive applications in many domains, as it allows users to automate repetitive tasks in an intuitive way. Existing frameworks on inductive synthesis only perform syntactic manipulations, where they rely on the syntactic structure of the given examples and not their meaning. Any semantic manipulations, such as transforming dates, have to be manually encoded by the designer of the inductive programming framework. Recent advances in large language models have shown these models to be very adept at performing semantic transformations of its input by simply providing a few examples of the task at hand. When it comes to syntactic transformations, however, these models are limited in their expressive power. In this paper, we propose a novel framework for integrating inductive synthesis with few-shot learning language models to combine the strength of these two popular technologies. In particular, the inductive synthesis is tasked with breaking down the problem in smaller subproblems, among which those that cannot be solved syntactically are passed to the language model. We formalize three semantic operators that can be integrated with inductive synthesizers. To minimize invoking expensive semantic operators during learning, we introduce a novel deferred query execution algorithm that considers the operators to be oracles during learning. We evaluate our approach in the domain of string transformations: the combination methodology can automate tasks that cannot be handled using either technologies by themselves. Finally, we demonstrate the generality of our approach via a case study in the domain of string profiling.
C1 [Verbruggen, Gust] Katholieke Univ Leuven, Dept Comp Sci, Leuven, Belgium.
   [Le, Vu; Gulwani, Sumit] Microsoft, One Microsoft Way, Redmond, WA 98052 USA.
C3 KU Leuven; Microsoft
RP Verbruggen, G (corresponding author), Katholieke Univ Leuven, Dept Comp Sci, Leuven, Belgium.
EM gust.verbruggen@kuleuven.be; levu@microsoft.com; sumitg@microsoft.com
FU European Research Council (ERC) under the European Union [694980];
   Flemish Government (AI Research Program)
FX We would like to thank Luc De Raedt for his valuable feedback during the
   early stages of this research, as well as our anonymous reviewers for
   their insightful remarks that helped us improve the quality of this
   work.; This work has received funding from the European Research Council
   (ERC) under the European Union's Horizon 2020 research and innovation
   programme (grant agreement No [694980] SYNTH: Synthesising Inductive
   Data Models). This research received funding from the Flemish Government
   (AI Research Program).
CR Abedjan Z, 2016, PROC INT CONF DATA, P1134, DOI 10.1109/ICDE.2016.7498319
   [Anonymous], 1993, Watch what I do: programming by demonstration
   Balog M, 2019, 5 INT C LEARN REPR I
   Bhupatiraju Surya, 2017, ARXIV170404327
   Brown T., 2020, P ADV NEUR INF PROC, V33, P1877
   Devlin J., 2018, BERT PRE TRAINING DE
   Devlin J, 2017, PR MACH LEARN RES, V70
   Ellis K, 2017, PROCEEDINGS OF THE TWENTY-SIXTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P1638
   Ellis Kevin, ACM SIGPLAN
   Gao X, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428287
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gulwani S, 2012, COMMUN ACM, V55, P97, DOI 10.1145/2240236.2240260
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   He YY, 2018, PROC VLDB ENDOW, V11, P1165, DOI 10.14778/3231751.3231766
   Joshi M, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P1601, DOI 10.18653/v1/P17-1147
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Liu Jianbang, 2021, ARXIV PREPRINT ARXIV
   Mayer M, 2015, UIST'15: PROCEEDINGS OF THE 28TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P291, DOI 10.1145/2807442.2807459
   Microsoft, 2015, PROGR SYNTH INP OUTP
   Mikolov T., 2013, ADV NEURAL INFORM PR, V26, P3111, DOI DOI 10.5555/2999792.2999959
   Miltner A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360569
   Padhi S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276520
   Parisotto Emilio, 2016, ARXIV161101855
   Petroni F, 2019, 2019 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING AND THE 9TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING (EMNLP-IJCNLP 2019), P2463
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Radford A., 2019, LANGUAGE MODELS ARE
   Radford Alec, 2018, IMPROVING LANGUAGE U, DOI DOI 10.18653/V1/N18-1202
   Raza M, 2017, AAAI CONF ARTIF INTE, P882
   Roberts A, 2020, PROCEEDINGS OF THE 2020 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP), P5418
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Sennrich R, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P1715
   Song Jie, 2021, P 2021 INT C MAN DAT, DOI [10.1145/3448016, DOI 10.1145/3448016]
   Xiao Liu, 2021, ARXIV PREPRINT ARXIV
   Yakout M., 2012, P ACM SIGMOD INT C M, P97, DOI DOI 10.1145/2213836.2213848
   Zhao TZ, 2021, PR MACH LEARN RES, V139
NR 35
TC 10
Z9 10
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 100
DI 10.1145/3485477
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200004
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Viering, M
   Hu, R
   Eugster, P
   Ziarek, L
AF Viering, Malte
   Hu, Raymond
   Eugster, Patrick
   Ziarek, Lukasz
TI A Multiparty Session Typing Discipline for Fault-Tolerant Event-Driven
   Distributed Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE session types; type systems; asynchronous multiparty session types;
   fault-tolerant distributed programming; event-driven programming
AB This paper presents a formulation of multiparty session types (MPSTs) for practical fault-tolerant distributed programming. We tackle the challenges faced by session types in the context of distributed systems involving asynchronous and concurrent partial failures s such as supporting dynamic replacement of failed parties and retrying failed protocol segments in an ongoing multiparty session s in the presence of unreliable failure detection. Key to our approach is that we develop a novel model of event-driven concurrency for multiparty sessions. Inspired by real-world practices, it enables us to unify the session-typed handling of regular I/O events with failure handling and the combination of features needed to express practical fault-tolerant protocols. Moreover, the characteristics of our model allow us to prove a global progress property for well-typed processes engaged in multiple concurrent sessions, which does not hold in traditional MPST systems.
   To demonstrate its practicality, we implement our framework as a toolchain and runtime for Scala, and use it to specify and implement a session-typed version of the cluster management system of the industrial-strength Apache Spark data analytics framework. Our session-typed cluster manager composes with other vanilla Spark components to give a functioning Spark runtime; e.g., it can execute existing third-party Spark applications without code modification. A performance evaluation using the TPC-H benchmark shows our prototype implementation incurs an average overhead below 10%.
C1 [Viering, Malte] Tech Univ Darmstadt, Darmstadt, Germany.
   [Hu, Raymond] Queen Mary Univ London, London, England.
   [Eugster, Patrick] Univ Svizzera Italiana USI, Lugano, Switzerland.
   [Eugster, Patrick] Purdue Univ, W Lafayette, IN 47907 USA.
   [Ziarek, Lukasz] Univ Buffalo, Buffalo, NY USA.
C3 Technical University of Darmstadt; University of London; Queen Mary
   University London; Universita della Svizzera Italiana; Purdue University
   System; Purdue University; State University of New York (SUNY) System;
   State University of New York (SUNY) Buffalo
RP Viering, M (corresponding author), Tech Univ Darmstadt, Darmstadt, Germany.
EM viering@dsp.tu-darmstadt.de; r.hu@qmul.ac.uk; eugstp@usi.ch;
   lziarek@buffalo.edu
OI Hu, Raymond/0000-0003-4361-6772
FU ERC [FP7-617805]; Hasler Foundation; SNSF [197353]; BMBF [01IS17050];
   NSF [CNS-1823230, SHF-1749539]
FX This project is supported in part by ERC grant FP7-617805, the Hasler
   Foundation, SNSF grant 197353, BMBF grant 01IS17050, and NSF Awards
   CNS-1823230 and SHF-1749539.
CR ABADI M, 1991, ACM T PROGR LANG SYS, V13, P237, DOI 10.1145/103135.103138
   Adameit Manuel, 2017, Formal Techniques for Distributed Objects, Components and Systems. 37th IFIP WG 6.1 International Conference, FORTE 2017, held as part of the 12th International Federated Conference on Distributed Computing Techniques, DisCoTec 2017. Proceedings: LNCS 10321, P1, DOI 10.1007/978-3-319-60225-7_1
   Ancona D, 2016, FOUND TRENDS PROGRAM, V3, pI, DOI 10.1561/2500000031
   Basu A., 1996, Distributed Algorithms. 10th International Workshop, WDAG '96. Proceedings, P105
   Cano Mauricio, 2017, Formal Techniques for Distributed Objects, Components and Systems. 37th IFIP WG 6.1 International Conference, FORTE 2017, held as part of the 12th International Federated Conference on Distributed Computing Techniques, DisCoTec 2017. Proceedings: LNCS 10321, P74, DOI 10.1007/978-3-319-60225-7_6
   Capecchi S, 2016, MATH STRUCT COMP SCI, V26, P156, DOI 10.1017/S0960129514000164
   Carbone M, 2008, LECT NOTES COMPUT SC, V5201, P402, DOI 10.1007/978-3-540-85361-9_32
   Castro David, 2019, Proceedings of the ACM on Programming Languages, V3, DOI 10.1145/3290342
   Chandra TD, 1996, J ACM, V43, P225, DOI 10.1145/226643.226647
   Charron-Bost B, 2009, DISTRIB COMPUT, V22, P49, DOI 10.1007/s00446-009-0084-6
   Chong N, 2021, SOFTWARE PRACT EXPER, V51, P772, DOI 10.1002/spe.2949
   Coppo M, 2016, MATH STRUCT COMP SCI, V26, P238, DOI 10.1017/S0960129514000188
   Demangeon R, 2015, FORM METHOD SYST DES, V46, P197, DOI 10.1007/s10703-014-0218-8
   Demangeon R, 2012, LECT NOTES COMPUT SC, V7454, P272, DOI 10.1007/978-3-642-32940-1_20
   Deniélou PM, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:6)2012
   Dragoi C, 2016, ACM SIGPLAN NOTICES, V51, P400, DOI [10.1145/2837614.2837650, 10.1145/2914770.2837650]
   FISCHER MJ, 1985, J ACM, V32, P374, DOI 10.1145/3149.214121
   Fowler S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290341
   Gay S, 2017, RIV PUBL SER AUTOMAT, pXV
   Gleissenthall KV, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290372
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Hindman B., 2011, NSDI, V11, P295, DOI DOI 10.1016/0375-6505(85)90011-2
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Hu R, 2017, LECT NOTES COMPUT SC, V10202, P116, DOI 10.1007/978-3-662-54494-5_7
   Hu R, 2016, LECT NOTES COMPUT SC, V9633, P401, DOI 10.1007/978-3-662-49665-7_24
   Hu R, 2010, LECT NOTES COMPUT SC, V6183, P329, DOI 10.1007/978-3-642-14107-2_16
   Hunt Patrick, 2010, P 2010 USENIX ANN TE, P11, DOI DOI 10.5555/1855840.1855851
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   Killian C, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P179, DOI 10.1145/1250734.1250755
   Konnov I, 2017, ACM SIGPLAN NOTICES, V52, P719, DOI 10.1145/3093333.3009860
   Ma HJ, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P370, DOI 10.1145/3341301.3359651
   Neykova R, 2018, CC'18: PROCEEDINGS OF THE 27TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P128, DOI 10.1145/3178372.3179495
   Neykova R, 2017, CC'17: PROCEEDINGS OF THE 26TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P98, DOI 10.1145/3033019.3033031
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Padovani L, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000289
   Piskac R, 2010, J AUTOM REASONING, V44, P401, DOI 10.1007/s10817-009-9161-6
   Scalas A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290343
   Sergey I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158116
   Taube Marcelo, 2018, PLDI 18, DOI [10.1145/3192366.3192414, DOI 10.1145/3192366.3192414]
   Vavilapalli V.K., P 4 ANN S
   Viering Malte, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P799, DOI 10.1007/978-3-319-89884-1_28
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Yang Junfeng, 2009, Proceedings of the 6th USENIX Symposium on Networked Systems Design and Implementation, P213
   Zaharia M., 2012, 9 USENIX S NETWORKED
   Zhou FY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428216
NR 45
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 124
DI 10.1145/3485501
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200028
OA gold
DA 2024-07-18
ER

PT J
AU Lazarek, L
   Greenman, B
   Felleisen, M
   Dimoulas, C
AF Lazarek, Lukas
   Greenman, Ben
   Felleisen, Matthias
   Dimoulas, Christos
TI How to Evaluate Blame for Gradual Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE gradual typing; blame
AB Programming language theoreticians develop blame assignment systems and prove blame theorems for gradually typed programming languages. Practical implementations of gradual typing almost completely ignore the idea of blame assignment. This contrast raises the question whether blame provides any value to the working programmer and poses the challenge of how to evaluate the effectiveness of blame assignment strategies. This paper contributes (1) the first evaluation method for blame assignment strategies and (2) the results from applying it to three different semantics for gradual typing. These results cast doubt on the theoretical effectiveness of blame in gradual typing. In most scenarios, strategies with imprecise blame assignment are as helpful to a rationally acting programmer as strategies with provably correct blame.
C1 [Lazarek, Lukas; Greenman, Ben; Felleisen, Matthias; Dimoulas, Christos] Northwestern Univ, PLT, Evanston, IL 60208 USA.
C3 Northwestern University
RP Lazarek, L (corresponding author), Northwestern Univ, PLT, Evanston, IL 60208 USA.
EM lukas.lazarek@eecs.northwestern.edu; benjaminlgreenman@gmail.com;
   matthias@ccs.neu.edu; chrdimo@northwestern.edu
RI Dimoulas, Christos/P-7100-2018; Greenman, Ben/GYV-4666-2022
OI Greenman, Ben/0000-0001-7078-9287; Dimoulas,
   Christos/0000-0002-9338-7034
FU NSF [CNS-1823244, SHF 1763922, 2030859]
FX Felleisen and Greenman were partly supported by NSF grant SHF 1763922.
   Greenman also received support from NSF grant 2030859 to the CRA for the
   CIFellows project. Dimoulas and Felleisen wish to thank Max New for
   extensive discussions of the early ideas in this paper. Thanks also to
   Robby Findler and Northwestern PLT for their valuable feedback at
   various stages of this work. This paper was supported in part by the NSF
   grant CNS-1823244.
CR Campora JP, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428259
   Castagna G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110285
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   FELDTHAUS A, 2014, OOPSLA, DOI DOI 10.1145/2660193.2660215
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   GOPINATH R, 2017, ICSTW
   Greenman, 2020, THESIS NE U
   Greenman B, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360548
   Greenman B, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000217
   Greenman Ben, 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236766
   Greenman Ben, TRANSIENT SEMANTICS
   Henrich J, 2001, AM ECON REV, V91, P73, DOI 10.1257/aer.91.2.73
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   Kuhlenschmidt A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P517, DOI 10.1145/3314221.3314627
   Lazarek Lukas, 2020, POPL, V65, P1
   Lipton R.J., 1971, FAULT DIAGNOSIS COMP
   Matthews J, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1498926.1498930
   Mill JohnStuart., 1874, ESSAYS SOME UNSETTLE, V2nd
   Muehlboeck F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133880
   Rastogi A, 2015, ACM SIGPLAN NOTICES, V50, P167, DOI [10.1145/2775051.2676971, 10.1145/2676726.2676971]
   Richards G., 2015, P ECOOP
   Richards G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133879
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   St-Amour Vincent, 2012, Practical Aspects of Declarative Languages. Proceedings 14th International Symposium, PADL 2012, P289, DOI 10.1007/978-3-642-27694-1_21
   STAMOUR V, 2013, ICFP
   Swamy N, 2014, ACM SIGPLAN NOTICES, V49, P425, DOI 10.1145/2535838.2535889
   TAKIKAWA A, 2012, OOPSLA
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tobin-Hochstadt S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P117
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Tobin-Hochstadt Sam, 2010, SFP
   Tobin-Hochstadt Sam, 2017, SNAPL, V17, P1, DOI [DOI 10.4230/LIPICS.SNAPL.2017.17, 10.4230/LIPIcs.SNAPL.2017.17]
   Vitousek MM, 2017, ACM SIGPLAN NOTICES, V52, P762, DOI 10.1145/3093333.3009849
   Vitousek MM, 2015, ACM SIGPLAN NOTICES, V50, P45, DOI 10.1145/2661088.2661101
   VITOUSEK MM, 2019, DYNAMIC LANGUAGES S, DOI DOI 10.1145/3359619.3359742
   WADLER P, 2009, ESOP, DOI DOI 10.1007/978-3-642-00590-9_1
   Williams Jack., 2017, EUROPEAN C OBJECT OR, DOI DOI 10.4230/LIPICS.ECOOP.2017.28
   Wilson PT, 2018, DLS'18: PROCEEDINGS OF THE 14TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES, P1, DOI 10.1145/3276945.3276947
   Wrigstad T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P377, DOI 10.1145/1706299.1706343
NR 41
TC 5
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 68
DI 10.1145/3473573
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800008
OA gold
DA 2024-07-18
ER

PT J
AU Ahman, D
   Pretnar, M
AF Ahman, Danel
   Pretnar, Matija
TI Asynchronous Effects
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE algebraic effects; asynchrony; concurrency; interrupt handling; signals
ID HANDLERS
AB We explore asynchronous programming with algebraic effects. We complement their conventional synchronous treatment by showing how to naturally also accommodate asynchrony within them, namely, by decoupling the execution of operation calls into signalling that an operation's implementation needs to be executed, and interrupting a running computation with the operation's result, to which the computation can react by installing interrupt handlers. We formalise these ideas in a small core calculus, called lambda(ae). We demonstrate the flexibility of lambda(ae) using examples ranging from a multi-party web application, to preemptive multi-threading, to remote function calls, to a parallel variant of runners of algebraic effects. In addition, the paper is accompanied by a formalisation of lambda(as)'s type safety proofs in Agda, and a prototype implementation of lambda(ae) in OCaml.
C1 [Ahman, Danel; Pretnar, Matija] Univ Ljubljana, Fac Math & Phys, Jadranska 21, SI-1000 Ljubljana, Slovenia.
C3 University of Ljubljana
RP Ahman, D (corresponding author), Univ Ljubljana, Fac Math & Phys, Jadranska 21, SI-1000 Ljubljana, Slovenia.
EM danel.ahman@fmf.uni-lj.si; matija.pretnar@fmf.uni-lj.si
OI Pretnar, Matija/0000-0001-7755-2303; Ahman, Danel/0000-0001-6595-2756
FU European Union [834146]; Air Force Office of Scientific Research
   [FA9550-17-1-0326]; Marie Curie Actions (MSCA) [834146] Funding Source:
   Marie Curie Actions (MSCA)
FX We thank the anonymous reviewers, Otterlo IFIP WG 2.1 meeting
   participants, and Andrej Bauer, Gavin Bierman, Ziga Luksic, and Alex
   Simpson for their useful feedback. This project has received funding
   from the European Union's Horizon 2020 research and innovation programme
   under the Marie Sklodowska-Curie grant agreement No 834146. This
   material is based upon work supported by the Air Force Office of
   Scientific Research under award number FA9550-17-1-0326.
CR Ahman D., 2020, SOFTWARE ARTEFACT PO, DOI [10.5281/zenodo.4072753, DOI 10.5281/ZENODO.4072753]
   Ahman D., 2020, AGDA FORMALISATION T
   Ahman D, 2020, LECT NOTES COMPUT SC, V12075, P29, DOI 10.1007/978-3-030-44914-8_2
   [Anonymous], 1998, Domains and lambda-calculi
   Bahr P., 2019, P ACM PROGRAM LANG P ACM PROGRAM LANG, V109
   Bauer A, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:9)2014
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Benton N, 2014, ACM SIGPLAN NOTICES, V49, P619, DOI 10.1145/2535838.2535869
   Biernacki D., 2019, P ACM PROGRAM LANG P ACM PROGRAM LANG
   Bingham E, 2019, J MACH LEARN RES, V20
   Convent L, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000039
   Dolan S, 2018, LECT NOTES COMPUT SC, V10788, P98, DOI 10.1007/978-3-319-89719-6_6
   Fournet C., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P372, DOI 10.1145/237721.237805
   Gierz G., 2003, CONTINUOUS LATTICES
   Haller P., 2020, SCALA DOCUMENTATION
   Hewitt C., 1973, P 3 INT JOINT C ART P 3 INT JOINT C ART, P235
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kammar O, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P349
   Krishnaswami NR, 2013, ACM SIGPLAN NOTICES, V48, P221, DOI [10.1145/2544174.2500588, 10.1145/2500365.2500588]
   Leijen D, 2017, PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE' 17), P16, DOI 10.1145/3122975.3122977
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Murphy Tom, 2008, Modal Types for Mobile Code
   Piróg M, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P809, DOI 10.1145/3209108.3209166
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Plotkin G. D., 2012, 23 INT C CONC THEOR 23 INT C CONC THEOR
   Plotkin G, 2008, IEEE S LOG, P118, DOI 10.1109/LICS.2008.45
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Poulson L., 2020, THESIS U EDINBURGH THESIS U EDINBURGH
   Pretnar M., 2020, PROGRAMMING LANGUAGE
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Schwinghammer J., 2002, THESIS U SAARLANDES THESIS U SAARLANDES
   Staton S, 2015, ACM SIGPLAN NOTICES, V50, P395, DOI [10.1145/2676726.2676999, 10.1145/2775051.2676999]
   Staton S, 2013, IEEE S LOG, P519, DOI 10.1109/LICS.2013.58
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 37
TC 3
Z9 3
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 24
DI 10.1145/3434305
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100024
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Moy, C
   Nguyen, PC
   Tobin-Hochstadt, S
   Van Horn, D
AF Moy, Cameron
   Nguyen, Phuc C.
   Tobin-Hochstadt, Sam
   Van Horn, David
TI Corpse Reviver: Sound and Efficient Gradual Typing via Contract
   Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE gradual typing; contract verification; Typed Racket
AB Gradually typed programming languages permit the incremental addition of static types to untyped programs. To remain sound, languages insert run-time checks at the boundaries between typed and untyped code. Unfortunately, performance studies have shown that the overhead of these checks can be disastrously high, calling into question the viability of sound gradual typing. In this paper, we show that by building on existing work on soft contract verification, we can reduce or eliminate this overhead.
   Our key insight is that while untyped code cannot be trusted by a gradual type system, there is no need to consider only the worst case when optimizing a gradually typed program. Instead, we statically analyze the untyped portions of a gradually typed program to prove that almost all of the dynamic checks implied by gradual type boundaries cannot fail, and can be eliminated at compile time. Our analysis is modular, and can be applied to any portion of a program.
   We evaluate this approach on a dozen existing gradually typed programs previously shown to have prohibitive performance overhead-with a median overhead of 2.5x and up to 80.6x in the worst case-and eliminate all overhead in most cases, suffering only 1.5x overhead in the worst case.
C1 [Moy, Cameron] Northeastern Univ, Boston, MA 02115 USA.
   [Nguyen, Phuc C.; Van Horn, David] Univ Maryland, College Pk, MD 20742 USA.
   [Tobin-Hochstadt, Sam] Indiana Univ, Bloomington, IN USA.
   [Nguyen, Phuc C.] Google, Mountain View, CA 94043 USA.
C3 Northeastern University; University System of Maryland; University of
   Maryland College Park; Indiana University System; Indiana University
   Bloomington; Google Incorporated
RP Moy, C (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
OI Tobin-Hochstadt, Sam/0000-0003-1302-6499; Moy,
   Cameron/0000-0002-4384-6351; Van Horn, David/0000-0002-9201-6864
FU National Science Foundation [CCF 1763922, CCF 1846350]
FX We are grateful to the anonymous reviewers and artifact evaluators of
   POPL 2021. This work was partially supported by the National Science
   Foundation grants CCF 1763922 and CCF 1846350. Thanks to Ben Greenman
   for assistance with benchmarking, Temur Saidkhodjaev for testing the
   artifact, Michael Hicks for the benchmarking machine, and Matthias
   Felleisen for his support.
CR Aiken A., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P163, DOI 10.1145/174675.177847
   ANDERSEN L, 2018, ACM T PROGR LANG SYS, DOI DOI 10.1145/3275519
   Bauman S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133878
   Bierman G, 2010, LECT NOTES COMPUT SC, V6183, P76, DOI 10.1007/978-3-642-14107-2_5
   Black A.P., 2012, ACM S NEW ID PROGR R, P85
   CARTWRIGHT R, 1991, PROGRAMMING LANGUAGE, DOI DOI 10.1145/113445.113469
   Chaudhuri A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133872
   Clinger WD, 1998, ACM SIGPLAN NOTICES, V33, P174, DOI 10.1145/277652.277719
   Darais D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110256
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Feltey D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276503
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   FLANAGAN C, 1999, ACM T PROGR LANG SYS, DOI DOI 10.1145/316686.316703
   Greenberg M, 2019, LECT NOTES COMPUT SC, V10447, P3, DOI 10.1007/978-3-030-14805-8_1
   GREENMAN B, 2018, INT C FUNCT PROGR IC, DOI DOI 10.1145/3236766
   Greenman B, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000217
   Greenman B, 2018, PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'18), P30, DOI 10.1145/3162066
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   KUHLENSCHMIDT A, 2019, PROGRAMMING LANGUAGE, DOI DOI 10.1145/3314221.3314627
   Lehtosalo J, 2017, MYPY OPTIONAL STATIC
   Meunier Philippe., 2006, P 33 ACM SIGPLAN SIG, P218, DOI DOI 10.1145/1111037.1111057
   Microsoft Corp, 2014, TYPESCRIPT LANG SPEC
   Muehlboeck F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133880
   NGUY C, 2015, PROGRAMMING LANGUAGE, DOI DOI 10.1145/2737924.2737971
   NGUY PC, 2014, INT C FUNCTIONAL PRO, DOI DOI 10.1145/2628136.2628156
   Nguyen PC, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158139
   Nguyên PC, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000216
   Rastogi A, 2015, ACM SIGPLAN NOTICES, V50, P167, DOI [10.1145/2775051.2676971, 10.1145/2676726.2676971]
   Richards G., 2015, P ECOOP
   Richards G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133879
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Strickland T. Stephen, 2012, ObjectOriented Programming, Systems, Languages and Applications (OOPSLA), DOI [10.1145/2384616.2384685, DOI 10.1145/2384616.2384685]
   Swamy N, 2014, ACM SIGPLAN NOTICES, V49, P425, DOI 10.1145/2535838.2535889
   Tabuchi Tomoya, 2020, EUR C OBJ OR PROGR E, DOI [10.4230/LIPIcs.ECOOP.2020.8, DOI 10.4230/LIPICS.ECOOP.2020.8]
   TAKIKAWA A, 2016, PRINCIPLES PROGRAMMI, DOI DOI 10.1145/2837614.2837630
   Takikawa Asumu., 2015, Proc. European Conference on Object-Oriented Programming, P4
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Tobin-Hochstadt Sam, 2017, SNAPL, V17, P1, DOI [DOI 10.4230/LIPICS.SNAPL.2017.17, 10.4230/LIPIcs.SNAPL.2017.17]
   Van Horn D, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Vitousek MM, 2019, PROCEEDINGS OF THE 15TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES (DLS '19), P28, DOI 10.1145/3359619.3359742
   Vitousek MM, 2017, ACM SIGPLAN NOTICES, V52, P762, DOI 10.1145/3093333.3009849
   VITOUSEK MM, 2014, DYN LANG S DLS, DOI DOI 10.1145/2661088.2661101
   Vytiniotis D, 2013, ACM SIGPLAN NOTICES, V48, P431, DOI 10.1145/2480359.2429121
   Wrigstad T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P377, DOI 10.1145/1706299.1706343
   Xu DN, 2009, ACM SIGPLAN NOTICES, V44, P41, DOI 10.1145/1594834.1480889
   Xu Dana N., 2012, Partial Evaluation and Program Manipulation (PEPM), DOI DOI 10.1145/2103746.2103767
NR 50
TC 8
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 53
DI 10.1145/3434334
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100053
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Belyakova, J
   Chung, B
   Gelinas, J
   Nash, J
   Tate, R
   Vitek, J
AF Belyakova, Julia
   Chung, Benjamin
   Gelinas, Jack
   Nash, Jameson
   Tate, Ross
   Vitek, Jan
TI World Age in Julia Optimizing Method Dispatch in the Presence of Eval
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE eval; method dispatch; compilation; dynamic languages
AB Dynamic programming languages face semantic and performance challenges in the presence of features, such as eval, that can inject new code into a running program. The Julia programming language introduces the novel concept of world age to insulate optimized code from one of the most disruptive side-effects of eval: changes to the definition of an existing function. This paper provides the first formal semantics of world age in a core calculus named JULIETTE, and shows how world age enables compiler optimizations, such as inlining, in the presence of eval. While Julia also provides programmers with the means to bypass world age, we found that this mechanism is not used extensively: a static analysis of over 4,000 registered Julia packages shows that only 4-9% of packages bypass world age. This suggests that Julia's semantics aligns with programmer expectations.
C1 [Belyakova, Julia; Chung, Benjamin; Gelinas, Jack; Vitek, Jan] Northeastern Univ, Boston, MA 02115 USA.
   [Nash, Jameson] Julia Comp, Cambridge, MA USA.
   [Tate, Ross] Cornell Univ, Ithaca, NY 14853 USA.
   [Vitek, Jan] Czech Tech Univ, Prague, Czech Republic.
C3 Northeastern University; Cornell University; Czech Technical University
   Prague
RP Belyakova, J (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
RI ; Vitek, Jan/J-9051-2014
OI Chung, Benjamin/0000-0001-9238-7334; Vitek, Jan/0000-0003-4052-3458;
   Belyakova, Julia/0000-0002-7490-8500
FU Office of Naval Research (ONR) [503353]; National Science Foundation
   [1759736, 1925644, 1618732]; Czech Ministry of Education from the Czech
   Operational Programme Research, Development, and Education
   [CZ.02.1.01/0.0/0.0/15_003/0000421]; European Research Council under the
   European Union [695412]; European Research Council (ERC) [695412]
   Funding Source: European Research Council (ERC); Direct For Biological
   Sciences; Div Of Biological Infrastructure [1759736] Funding Source:
   National Science Foundation; Direct For Computer & Info Scie & Enginr;
   Division Of Computer and Network Systems [1925644] Funding Source:
   National Science Foundation; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [1618732] Funding
   Source: National Science Foundation
FX We thank the anonymous reviewers for their insightful comments and
   suggestions to improve this paper. This work was supported by Office of
   Naval Research (ONR) award 503353, the National Science Foundation
   awards 1759736, 1925644 and 1618732, the Czech Ministry of Education
   from the Czech Operational Programme Research, Development, and
   Education, under grant agreement No. CZ.02.1.01/0.0/0.0/15_003/0000421,
   and the European Research Council under the European Union's Horizon
   2020 research and innovation programme, under grant agreement No.
   695412.
CR Belyakova Julia, 2020, ARXIV201007516
   Bezanson J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276490
   Bezanson J, 2017, SIAM REV, V59, P65, DOI 10.1137/141000671
   BOBROW DG, 1986, SIGPLAN NOTICES, V21, P17, DOI 10.1145/960112.28700
   COOK RP, 1983, SIGPLAN NOTICES, V18, P201, DOI 10.1145/1006142.1006188
   Detlefs D, 1999, LECT NOTES COMPUT SC, V1628, P258
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Flückiger O, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158137
   Glew N, 2005, J OBJECT TECHNOL, V4, P33, DOI 10.5381/jot.2005.4.8.a2
   HOLZLE U, 1992, SIGPLAN NOTICES, V27, P32, DOI 10.1145/143103.143114
   Liang Sheng., 1998, P 13 ACM SIGPLAN C O, DOI [10.1145/286936.286945, DOI 10.1145/286936.286945]
   Matthews J, 2008, J FUNCT PROGRAM, V18, P47, DOI 10.1017/S0956796807006478
   McCarthy J., 1978, SIGPLAN Notices, V13, P217, DOI 10.1145/960118.808387
   Nardelli FZ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276483
   Nguyen Phung Hua., 2005, AUSTR C COMP SCI ACS, DOI [10.5555/1082161.1082163, DOI 10.5555/1082161.1082163]
   Politz Joe Gibbs., 2012, S DYN LANG DLS, DOI [10.1145/2384577.2384579, DOI 10.1145/2384577.2384579]
   Stoyle G, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1255450.1255455
NR 17
TC 3
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 207
DI 10.1145/3428275
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900084
OA gold
DA 2024-07-18
ER

PT J
AU Lubin, J
   Collins, N
   Omar, C
   Chugh, R
AF Lubin, Justin
   Collins, Nick
   Omar, Cyrus
   Chugh, Ravi
TI Program Sketching with Live Bidirectional Evaluation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Sketches; Examples; Bidirectional Evaluation
AB We present a system called SMYTH for program sketching in a typed functional language whereby the concrete evaluation of ordinary assertions gives rise to input-output examples, which are then used to guide the search to complete the holes. The key innovation, called live bidirectional evaluation, propagates examples "backward" through partially evaluated sketches. Live bidirectional evaluation enables SMYTH to (a) synthesize recursive functions without trace-complete sets of examples and (b) specify and solve interdependent synthesis goals. Eliminating the trace-completeness requirement resolves a significant limitation faced by prior synthesis techniques when given partial specifications in the form of input-output examples.
   To assess the practical implications of our techniques, we ran several experiments on benchmarks used to evaluate MYTH, a state-of-the-art example-based synthesis tool. First, given expert examples (and no partial implementations), we find that SMYTH requires on average 66% of the number of expert examples required by MYTH. Second, we find that SMYTH is robust to randomly-generated examples, synthesizing many tasks with relatively few more random examples than those provided by an expert. Third, we create a suite of small sketching tasks by systematically employing a simple sketching strategy to the MYTH benchmarks; we find that user-provided sketches in SMYTH often further reduce the total specification burden (i.e. the combination of partial implementations and examples). Lastly, we find that LEON and SYNQUID, two state-of-the-art logic-based synthesis tools, fail to complete several tasks on which SMYTH succeeds.
C1 [Lubin, Justin; Collins, Nick; Chugh, Ravi] Univ Chicago, Chicago, IL 60637 USA.
   [Omar, Cyrus] Univ Michigan, Ann Arbor, MI 48109 USA.
C3 University of Chicago; University of Michigan System; University of
   Michigan
RP Lubin, J (corresponding author), Univ Chicago, Chicago, IL 60637 USA.
EM justinlubin@uchicago.edu; nickmc@uchicago.edu; comar@umich.edu;
   rchugh@cs.uchicago.edu
RI Omar, Cyrus/JXM-9227-2024
OI Lubin, Justin/0000-0003-2311-1873; Omar, Cyrus/0000-0003-4502-7971;
   Chugh, Ravi/0000-0002-1339-2889; Collins, Nick/0000-0001-6578-2005
FU NSF grants Semantic Foundations [CCF-1814900, CCF-1817145, CCF-1651794]
FX The authors would like to thank Ian Voysey for guidance regarding proof
   strategies; Nadia Polikarpova, Brian Hempel, Michael Adams, Youyou Cong,
   and anonymous reviewers for many helpful suggestions; Aws Albarghouthi,
   John Feser, Viktor Kuncak, and Nadia Polikarpova for answering questions
   about Escher,.2, Leon, and Synqid; and Robert RandDwho coined the name
   MythD for suggesting the name Smyth, thus further entangling our work
   with its predecessor. This work was supported by NSF grants Semantic
   Foundations for Hole-Driven Development (CCF-1814900 and CCF-1817145)
   and Direct Manipulation Programming Systems (CCF-1651794).
CR Albarghouthi Aws, 2013, INT C COMPUTER AIDED, P934
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Anderson Alan Ross, 1992, ENTAILMENT
   Bornholt James, 2018, P ACM PROGR LANG PAC
   Byrnes J, 1999, THESIS CARNEGIE MELL
   Chasins Sarah E., 2018, S US INT SOFTW TECHN
   Chlipala Adam, 2005, WORKSH TYP LANG DES
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Feser John, 2016, THESIS RICE U
   Feser John, 2020, COMMUNICATION
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P317, DOI 10.1145/1925844.1926423
   Guo Z, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371080
   Gvero T, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2499370.2462192
   Hempel B., 2019, S US INT SOFTW TECHN
   Inala JP, 2017, LECT NOTES COMPUT SC, V10205, P247, DOI 10.1007/978-3-662-54577-5_14
   KAHN G, 1987, LECT NOTES COMPUT SC, V247, P22
   Kneuss E, 2015, LECT NOTES COMPUT SC, V9207, P217, DOI 10.1007/978-3-319-21668-3_13
   Kneuss E, 2013, ACM SIGPLAN NOTICES, V48, P407, DOI [10.1145/2509136.2509555, 10.1145/2544173.2509555]
   Kubelka J, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1090, DOI 10.1145/3180155.3180200
   Lubin Justin, 2020, ABS191100583 CORR
   Matsuda Kazutaka, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P31, DOI 10.1007/978-3-319-89884-1_2
   Mayer Mikael, 2015, INT C SOFTW ENG ICSE
   Mayer Mikael, 2018, P ACM PROGR LANG PAC
   Miltner Anders, 2019, P ACM PROGR LANG
   Miltner Anders, 2020, C PROGRAMMING LANGUA
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Omar C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290327
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Osera Peter-Michael, 2015, THESIS U PENNSYLVANI
   Perera Roly, 2012, ACM INT C FUNCT PROG
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Polikarpova Nadia, 2020, COMMUNICATION
   Rondon PM, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1379022.1375602
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2980983.2908102, 10.1145/2908080.2908102]
   Solar-Lezama A, 2005, ACM SIGPLAN NOTICES, V40, P281, DOI 10.1145/1064978.1065045
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Solar-Lezama A, 2009, LECT NOTES COMPUT SC, V5904, P4, DOI 10.1007/978-3-642-10672-9_3
   Solarlezama Armando, 2008, PROGRAM SYNTHESIS SK
   Tanimoto SL, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON LIVE PROGRAMMING (LIVE), P31, DOI 10.1109/LIVE.2013.6617346
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Torlak Emina, 2013, P 2013 ACM INT S NEW, P135, DOI DOI 10.1145/2509578.2509586
   Vazou Niki, 2013, EUR C PROGR LANG SYS
   Wang Chenglong, 2020, P ACM PROGR LANG PAC
NR 50
TC 21
Z9 22
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 109
DI 10.1145/3408991
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700023
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Bright, W
   Alexandrescu, A
   Parker, M
AF Bright, Walter
   Alexandrescu, Andrei
   Parker, Michael
TI Origins of the D Programming Language
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Programming Languages
AB As its name suggests, the initial motivation for the D programming language was to improve on C and C++ while keeping their spirit. The D language was to preserve the efficiency, low-level access, and Algol-style syntax of those languages. The areas D set out to improve focused initially on rapid development, convenience, and simplifying the syntax without hampering expressiveness.
   The genesis of D has its peculiarities, as is the case with many other languages. Walter Bright, D's creator, is a mechanical engineer by education who started out working for Boeing designing gearboxes for the 757. He was programming games on the side and, in trying to make his game Empire run faster, became interested in compilers. Despite having no experience, Walter set out in 1982 to implement a compiler that produced better code than those on the market at the time.
   This interest materialized into a C compiler, followed by compilers for C++, Java, and JavaScript. The best known of these would be the Zortech C++ compiler, the only C++-to-native compiler to have been developed by a single person. The D programming language began in 1999 as an effort to pull the best features of these languages into a new one. Fittingly, D would use the mature C/C++ back end (optimizer and code generator) that had been under continued development and maintenance since 1982.
   Between 1999 and 2006, Walter worked alone on the D language definition and its implementation, although a steadily increasing volume of patches from users was incorporated. The new language would be based on the past successes of the languages he had used and implemented, but would be clearly looking to the future. D started with choices that are obvious today but were less clear winners back in the 1990s: full support for Unicode, IEEE floating point, two's complement arithmetic, and flat memory addressing (memory is treated as a linear address space with no segmentation). It would do away with certain compromises from past languages imposed by shortages of memory (for example, forward declarations would not be required). It would primarily appeal to C and C++ users, as expertise with those languages would be readily transferable. The interface with C was designed to be zero cost.
   The language design was begun in late 1999. An alpha version appeared in 2001 and the initial language was completed, somewhat arbitrarily, at version 1.0 in January 2007. During that time, the language evolved considerably, both in capability and in the accretion of a substantial worldwide community that became increasingly involved with contributing. The front end was open-sourced in April 2002, and the back end was donated by Symantec to the open source community in 2017. Meanwhile, two additional open-source back ends became mature in the 2010s: gdc (using the same back end as the GNU C++ compiler) and ldc (using the LLVM back end).
   The increasing use of the D language in the 2010s created an impetus for formalization and development management. To that end, the D Language Foundation was created in September 2015 as a nonprofit corporation overseeing work on D's definition and implementation, publications, conferences, and collaborations with universities.
C1 [Bright, Walter; Alexandrescu, Andrei; Parker, Michael] D Language Fdn, 6830 NE Bothell Way,Suite C-162, Kenmore, WA 98028 USA.
RP Bright, W (corresponding author), D Language Fdn, 6830 NE Bothell Way,Suite C-162, Kenmore, WA 98028 USA.
EM walter@dlang.org; andrei@dlang.org; social@dlang.org
CR Alex, 2018, WHY PRIV MEMB VAR BE
   Alexandrescu A., 2010, PROGRAMMING LANGUAGE
   Alexandrescu Andrei, 2009, ITERATION
   Alexandrescu Andrei, 2005, LOC KFREE PROGRAMMIN
   Alexandrescu Andrei, 2000, CHANGE WAY YOU WRITE
   [Anonymous], 2003, DIGITAL MARS
   [Anonymous], 2012, D SLICES
   [Anonymous], 2012, EMB D HTML
   [Anonymous], 2005, DIGITAL MARS
   [Anonymous], 2006, DIGITAL MARS
   [Anonymous], 2002, DIGITAL MARS
   [Anonymous], 2007, DIGITAL MARS
   [Anonymous], 2015, HACKER NEWS
   Bartlett J.F., 1989, Mostly-Copying garbage collection picks up generations and C++
   Baxter Bill, 2005, METAPROGRAMMING SUPP
   BCS, 2007, INST PHOB TANG
   Bell Kris, 2008, LEARN TANGO D
   BLS, 2007, C TANG PHOB
   Bobef, 2005, WHAT REAL FOR
   Bright Walter, 2009, SAFE SYSTEMS UNRELIA
   Bright Walter, 2005, ANNOUNCING NEW NEWSG
   Bright Walter, 2002, GARBAGE COLLECTION
   Bright Walter, 2001, TEMPLATES
   Bright Walter, 2009, DESIGNING SAFE SOFTW
   Bright Walter, 2013, DCONF 2013 WHAT SHOW
   Bright Walter, 1979, EMPIRE FORTRAN 10 PD
   Bright Walter, 2005, DMD 0 132 RELEASE IN
   Bright Walter, 2006, NEW WEB INTERFACE FO
   Bright Walter, 2007, DMD 1 00 HERE IT IS
   Bright Walter, 2002, PROGRAMMING LANGUAGE
   Bright Walter, 2007, TANGO 0 95 BETA1 REL
   Bright Walter, 2005, REMETAPROGRAMMING SU
   Bright Walter, 2018, RE WHY PRIVATE MEMBE
   Bright Walter, 2006, D C 2007
   Bright Walter, 2016, REVISION D LANGUAGE
   Bright Walter., 2001, PROGRAMMING LANGUAGE
   Bright Walter, 2007, RE SO WHAT HAPPENED
   Bright Walter, 2004, D WISH LIST 2004
   Bright Walter, 2001, D ALPHA COMPILER
   Bright Walter, 2007, DMD 2 000 ALPHA RELE
   Bright Walter, 2013, REREGISTRATION NOW O
   Bright Walter, 2004, MIXINS
   Bright Walter, 2002, ONE MORE VOTEFOREACH
   Bright Walter, 2005, REMETAPROGRAMMING SU
   Bright Walter., 2006, NEW NEWSGROUP DIGITA
   Bright Walter, 2003, RE DMD 0 76 RELEASE
   Bright Walter, 2004, PROGRAMMING LANGUAGE
   Bright Walter, 2004, EMPIRE IS NOW D
   Bright Walter, 2001, GARBAGE COLLECTION
   Bright Walter, 2008, REMOVING EMBEDDED HT
   Bright Walter, 2007, FUTURE D
   Bright Walter, 2009, CS BIGGEST MISTAKE
   Bright Walter, 2012, COMPONENT PROGRAMMIN
   Bright Walter, 2002, RE HELPING OUT
   Bright Walter, 2004, NEW D NEWSGROUPS
   Burrell Tim, 2008, STANDARD LIB CONCERN
   D Language Foundation, 2015, STD EXPT ALL
   D Language Foundation, TYP QUAL
   D Language Foundation, 2017, D BLOG
   D Language Foundation, 2020, AR D US
   D Language Foundation, 2020, ORG US D LANG
   D Language Foundation, 2013, DCONF HOM
   Davis Jonathan, 2014, ANSWER WHAT IS ACCEP
   Davis Jonathan, 2010, ANSWER DOES D LANGUA
   Digital Mars, 1999, DIGITAL MARS C C COM
   dlang.org, 2018, CONTR
   Down Patrick, 2002, MIXINS
   DSource.org, 2004, DWT PROJ PAG
   DSource.org, 2004, AR PROJ PAG
   DSource.org, 2004, MANG PROJ PAG
   Dsource.org, 2004, DSOURCE PROJ
   DWiki, 2018, DOC GEN GEN
   EDM/2, 2017, ZORT C
   EDM/2, 2018, SYM C
   Feigenspan J, 2013, EMPIR SOFTW ENG, V18, P699, DOI 10.1007/s10664-012-9208-x
   Frohne Ivan, 2001, D MULTIDIMENSIONAL A
   Hasemann Henning, 2007, PHOBOS TANGO ARES
   Hay Brian, 2006, LITTLE THING D PHOBO
   Igesund Lars Ivar, 2012, WHAT HAPPENED
   Igesund Lars Ivar, 2018, FACEBOOK MESSAGE
   Igesund Lars Ivar, 2007, TANGO 0 95 BETA1 REL
   Jones R.E., 1996, Garbage Collection: Algorithms for Automatic Dynamic Memory Management
   Jurgensen Mikkel, 2003, INTERFACES MIXINS
   Kelly Sean, 2007, RE SO WHAT HAPPENED
   Kelly Sean, 2006, ANNOUNCING NEW LIB
   Knepper Jan, 2001, DIGITAL MARS D NEWSG
   KNUTH DE, 1984, COMPUT J, V27, P97, DOI 10.1093/comjnl/27.2.97
   Kramer D., 1999, Seventeenth Annual International Conference on Computer Documentation. Conference Proceedings, P147, DOI 10.1145/318372.318577
   Krehbiel Richard, 2001, MACROS
   Kroplin Mario, 2017, UNIT TESTING ACTION
   Le D, 2011, S VIS LANG HUM CEN C, P143, DOI 10.1109/VLHCC.2011.6070391
   Lockheed Martin, 2005, JOINT STRIKE FIGHTER
   Mark T., 2003, WISH LIST 2004
   Medeiros F, 2018, IEEE T SOFTWARE ENG, V44, P453, DOI 10.1109/TSE.2017.2688333
   Microsoft, 2015, US SAL ANN RED C C C
   Miller Christopher, 2004, DFL
   Miller Christopher, 2006, IRC
   Ocean, 2017, SOC TSUN OC
   Orlowski Andrew, 2001, LINUX IS FUTURE SAY
   Panteleev Vladimir, 2012, DFEED NNTP MAILING L
   Panteleev Vladimir, 2014, DSOURCE ORG MOVED
   Parker Michael, 2017, PROJECT HIGHLIGHT FU
   Parker Michael, 2016, WHY WHEREFORE NEW IM
   Parker Mike, 2006, MY D BLOG
   Pataki N, 2011, ELECTRON NOTES THEOR, V264, P71, DOI 10.1016/j.entcs.2011.06.005
   PC-Week, 1991, PC WEEK AUG
   PC-Week, 1988, PC WEEK DEC
   PC-Week, 1988, ZORTECH READIES WHAT
   Pescio Carlo, 1997, C++ REP, V9, P7
   Rejected Software, 2012, DDOX
   Rejected Software, 2012, D PACKAGE REGISTRY
   Richards Gregor, 2007, TANGOBOS EXISTENCE
   Roberts Brad, 2006, RE D C 2007
   Roberts Brad, 2007, D DEV C
   Roberts Brad, 2007, C 2007 D PROGRAMMING
   Ruppe Adam, GITHUB REPOSITORY AD
   Schveighoffer Steven, 2011, D SLICES
   SD West, SOFTW DEV C EXP
   Siegmund Janet, 2012, Computer Safety, Reliability,and Security. Proceedings of SAFECOMP 2012 Workshops: Sassur, ASCoMS, DESEC4LCCI, ERCIM/EWICS, IWDE, P517, DOI 10.1007/978-3-642-33675-1_49
   Stroustrup B., 1985, The C++ Programming Language
   Sweeney Tim., 2001, REMACROS
   Tango Wiki, 2008, TANG C 2008 TOR
   Tango-D2, 2012, SEIGELORD TANG D2
   Teoh H. S, 2013, COMPONENT PROGRAMMIN
   The Eclipse Foundation, 2003, SWT STAND WIDG TOOLK
   The GTK Team, 1997, GTK PROJ
   Vaillot Bernard, 2003, AIR EMERGENCY DOCUDR
   van Heesch D., 1997, DOXYGEN
   Wasserman Tobias, 2007, PROGRAMMIEREN D
   Wey Mike, 2004, GTKD
   Wikipedia, 2010, DAT
   Wilson Matthew, 2003, RECIPE DISASTER
   Wilson Matthew, 2003, NULL O
   Wilson Matthew, IDENTITY EQUIVALENCE
   Wirth N., 1971, Acta Informatica, V1, P35, DOI 10.1007/BF00264291
   Wrede Georg, 2006, STEP PHOBOS DEV 10 F
   Yates James, 2002, FOREACH STYLE LOOP
NR 137
TC 4
Z9 4
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 73
DI 10.1145/3386323
PG 38
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900006
OA gold
DA 2024-07-18
ER

PT J
AU Jones, MP
   Morris, JG
   Eisenberg, RA
AF Jones, Mark P.
   Morris, J. Garrett
   Eisenberg, Richard A.
TI Partial Type Constructors <i>Or</i>, Making Ad Hoc Datatypes Less Ad Hoc
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Type constructors; Parametric polymorphism
AB Functional programming languages assume that type constructors are total. Yet functional programmers know better: counterexamples range from container types that make limiting assumptions about their contents (e.g., requiring computable equality or ordering functions) to type families with defining equations only over certain choices of arguments. We present a language design and formal theory of partial type constructors, capturing the domains of type constructors using qualified types. Our design is both simple and expressive: we support partial datatypes as first-class citizens (including as instances of parametric abstractions, such as the Haskell Functor and Monad classes), and show a simple type elaboration algorithm that avoids placing undue annotation burden on programmers. We show that our type system rejects ill-defined types and can be compiled to a semantic model based on System F. Finally, we have conducted an experimental analysis of a body of Haskell code, using a proof-of-concept implementation of our system; while there are cases where our system requires additional annotations, these cases are rarely encountered in practical Haskell code.
C1 [Jones, Mark P.] Portland State Univ, Dept Comp Sci, 1900 SW 4th Ave, Portland, OR 97207 USA.
   [Morris, J. Garrett] Univ Kansas, Dept Elect Engn & Comp Sci, 2335 Irving Hill Rd, Lawrence, KS 66045 USA.
   [Eisenberg, Richard A.] Bryn Mawr Coll, Dept Comp Sci, Bryn Mawr, PA 19010 USA.
   [Eisenberg, Richard A.] Tweag IO, London, England.
C3 Portland State University; University of Kansas; Bryn Mawr College
RP Jones, MP (corresponding author), Portland State Univ, Dept Comp Sci, 1900 SW 4th Ave, Portland, OR 97207 USA.
EM mpj@pdx.edu; garrett@ittc.ku.edu; rae@richarde.dev
RI Morris, J. Garrett/AAI-5463-2020
OI Morris, J. Garrett/0000-0002-3992-1080; Eisenberg,
   Richard/0000-0002-7669-9781
FU National Science Foundation [CCF-1704041, CNS-1422979]
FX We thank Aaron Stump, James McKinna, and the anonymous reviewers for
   their helpful comments. This material is based in part upon work
   supported by the National Science Foundation under Grant No. CCF-1704041
   and Grant No. CNS-1422979.
CR Bottu GJ, 2017, ACM SIGPLAN NOTICES, V52, P148, DOI 10.1145/3156695.3122967
   Bove A, 2016, MATH STRUCT COMP SCI, V26, P38, DOI 10.1017/S0960129514000115
   BRACHA G, 1998, P ACM S OBJ OR PROGR, P183
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P1, DOI 10.1145/1047659.1040306
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Dos Reis G, 2006, ACM SIGPLAN NOTICES, V41, P295, DOI 10.1145/1111320.1111064
   Dreyer Derek, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P63, DOI 10.1145/1190216.1190229
   Gaster Benedict R, 1996, TECHNICAL REPORT
   GHC Team, 2017, GHC US GUID DOC
   Hage, 2011, IMPL APPL FUNCT LANG, V7257, p85S99
   Hinze Ralf, 2003, TR20031901 CORN U
   Hudak P., 1991, REPORT PROGRAMMING L
   HUDAK P, 1990, REPORT PROGRAMMING L
   Huffman Brian, 2012, THESIS PORTLAND STAT
   Hughes, 1999, P 1999 HASK WORKSH U, P83
   Jones, 2019, P 12 ACM SIGPLAN HAS
   Jones M. P., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P160, DOI 10.1145/224164.224198
   Jones M. P., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P97
   Jones M. P., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P52, DOI 10.1145/165180.165190
   Jones M.P., 1993, Technical Report YALEU/DCS/RR- 989
   Jones MarkP., 1994, Qualified Types: Theory and Practice
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   Jones Simon Peyton, 1991, CONTEXTS DATA TYPE
   Kiselyov, 2007, HASKELL ONLY 1 TYPE
   Kiss C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341706
   Launchbury J., 1996, Programming Languages and Systems - ESOP '96. 6th European Symposium on Programming. Proceedings, P204
   Marlow Simon, 2010, Haskell 2010 language report
   Moors A, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P423
   Morris JG, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110286
   Morris J. Garrett, 2019, PACMPL 3 POPL 2019, P1
   ORCHARD D, 2010, P 10 INT C FUNCT LOG, DOI DOI 10.1007/978-3-642-12251-4_6
   Schrijvers T, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P341
   Schrijvers T, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Scott Dana., 1979, Identity and existence in intuitionistic logic, P660
   Sculthorpe N, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2544174.2500602
   Stolarek J, 2015, ACM SIGPLAN NOTICES, V50, P118, DOI 10.1145/2804302.2804314
   Stroustrup B., 1994, The Design and Evolution of C++
   Stucki Sandro, 2017, THESIS LAUSANNE SWIT, DOI [10.5075/epfl-thesis-8014, DOI 10.5075/EPFL-THESIS-8014]
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Svenningsson J.D. Svensson., 2013, P 18 INT C FUNCTIONA, P299
   Winant Thomas, 2014, Practical Aspects of Declarative Languages. 16th International Symposium, PADL 2014. Proceedings: LNCS 8324, P17, DOI 10.1007/978-3-319-04132-2_2
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xi HW, 2003, ACM SIGPLAN NOTICES, V38, P224, DOI 10.1145/640128.604150
NR 44
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 40
DI 10.1145/3371108
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400041
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Migeed, Z
   Palsberg, J
AF Migeed, Zeina
   Palsberg, Jens
TI What Is Decidable about Gradual Types?
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Types; migration; algorithms
AB Programmers can use gradual types to migrate programs to have more precise type annotations and thereby improve their readability, efficiency, and safety. Such migration requires an exploration of the migration space and can benefit from tool support, as shown in previous work. Our goal is to provide a foundation for better tool support by settling decidability questions about migration with gradual types. We present three algorithms and a hardness result for deciding key properties and we explain how they can be useful during an exploration. In particular, we show how to decide whether the migration space is finite, whether it has a top element, and whether it is a singleton. We also show that deciding whether it has a maximal element is NP-hard. Our implementation of our algorithms worked as expected on a suite of microbenchmarks.
C1 [Migeed, Zeina; Palsberg, Jens] Univ Calif Los Angeles, Comp Sci Dept, 4732 Boelter Hall, Los Angeles, CA 90095 USA.
C3 University of California System; University of California Los Angeles
RP Migeed, Z (corresponding author), Univ Calif Los Angeles, Comp Sci Dept, 4732 Boelter Hall, Los Angeles, CA 90095 USA.
EM zeina@cs.ucla.edu; palsberg@ucla.edu
RI Palsberg, Jens/JYO-6826-2024
OI Palsberg, Jens/0000-0003-4747-365X
CR Bierman G, 2014, LECT NOTES COMPUT SC, V8586, P257
   Campora JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158103
   Castagna G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290329
   Cimini M, 2016, ACM SIGPLAN NOTICES, V51, P443, DOI 10.1145/2914770.2837632
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia R, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2676726.2676992, 10.1145/2775051.2676992]
   Giannini P., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P61, DOI 10.1109/LICS.1988.5101
   Hassan Mostafa, 2018, P CAV 18 COMP AID VE
   Heinze Thomas S., 2016, DLS
   Lehmann Nico, 2017, ACM SIGPLAN Notices, V52, P775, DOI 10.1145/3093333.3009856
   Miyazaki Yusuke, 2018, ABS181012619 CORR
   Mogensen T. AE., 1992, Journal of Functional Programming, V2, P345, DOI 10.1017/S0956796800000423
   Rastogi A, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P481
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Siek Jeremy G., 2008, P 2008 S DYN LANG, V7
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Vitousek MM, 2015, ACM SIGPLAN NOTICES, V50, P45, DOI 10.1145/2661088.2661101
   Xu ZG, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P607, DOI 10.1145/2950290.2950343
NR 21
TC 7
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 29
DI 10.1145/3371097
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400030
OA gold
DA 2024-07-18
ER

PT J
AU Xia, LY
   Zakowski, Y
   He, P
   Hur, CK
   Malecha, G
   Pierce, BC
   Zdancewic, S
AF Xia, Li-yao
   Zakowski, Yannick
   He, Paul
   Hur, Chung-Kil
   Malecha, Gregory
   Pierce, Benjamin C.
   Zdancewic, Steve
TI Interaction Trees Representing Recursive and Impure Programs in Coq
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Coq; monads; coinduction; compiler correctness
ID DELAY MONAD
AB Interaction trees (ITrees) are a general-purpose data structure for representing the behaviors of recursive 5 programs that interact with their environments. A coinductive variant of "free monads," ITrees are built out of uninterpreted events and their continuations. They support compositional construction of interpreters from event handlers, which give meaning to events by defining their semantics as monadic actions. ITrees are expressive enough to represent impure and potentially nonterminating, mutually recursive computations, while admitting a rich equational theory of equivalence up to weak bisimulation. In contrast to other approaches such as relationally specified operational semantics. ITrees re executable via code extraction, making them suitable for debugging, testing, and implementing software artifacts that are amenable to formal verification.
   We have implemented ITrees and their associated theory as a Coq library, mechanizing classic domain- and category-theoretic results about program semantics, iteration, monadic structures, and equational reasoning. Although the internals of the library rely heavily on coinductive proofs, the interface hides these details so that clients can use and reason about ITrees without explicit use of Coq's coinduction tactics.
   To showcase the utility of our theory, we prove the termination-sensitive correctness of a compiler from a simple imperative source language to an assembly-like target whose meanings are given in an ITree-based denotational semantics. Unlike previous results using operational techniques, our bisimulation proof follows straightforwardly by structural induction and elementary rewriting via an equational theory of combinators for control-flow graphs.
C1 [Xia, Li-yao; Zakowski, Yannick; He, Paul; Pierce, Benjamin C.; Zdancewic, Steve] Univ Penn, Philadelphia, PA 19104 USA.
   [Hur, Chung-Kil] Seoul Natl Univ, Seoul, South Korea.
   [Malecha, Gregory] BedRock Syst, Boston, MA USA.
C3 University of Pennsylvania; Seoul National University (SNU)
RP Xia, LY (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
RI Zdancewic, Steve/JXL-6845-2024
OI Xia, Li-yao/0000-0003-2673-4400; Malecha, Gregory/0000-0003-3952-0807;
   Zakowski, Yannick/0000-0003-4585-6470
FU National Science Foundation's Expedition in Computing The Science of
   Deep Specification [1521602, 1521539]; NSF [1421243]; ONR grant REVOLVER
   award [N0001417-1-2930]; Basic Science Research Program through the
   National Research Foundation of Korea (NRF) - Ministry of Science and
   ICT [2017R1A2B2007512]; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [1421243, 1521602]
   Funding Source: National Science Foundation
FX This work was funded by the National Science Foundation's Expedition in
   Computing The Science of Deep Specification under the awards 1521602
   (Appel), 1521539 (Weirich, Zdancewic, Pierce) with additional support by
   the NSF projects Verified High Performance Data Structure
   Implementations, Random Testing for Language Design, award 1421243
   (Pierce), ONR grant REVOLVER award N0001417-1-2930, and by the Basic
   Science Research Program through the National Research Foundation of
   Korea (NRF) funded by the Ministry of Science and ICT
   (2017R1A2B2007512). We are especially thankful to Joachim Breitner and
   Dmitri Garbuzov for early contributions to this work. We are grateful to
   all the members of the DeepSpec project for their collaboration and
   feedback, and we greatly appreciate the the reviewers' comments and
   suggestions.
CR Abel A, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000319
   Aczel P, 2003, THEOR COMPUT SCI, V300, P1, DOI 10.1016/S0304-3975(02)00728-4
   Ahmed Amal Jamil, 2004, THESIS PRINCETON U
   Altenkirch T., 2017, LNCS, P534, DOI DOI 10.1007/978-3-662-54458-7_31
   Apfelmus Heinrich, 2010, MONAD
   Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Appel Andrew W., 2014, PROGRAM LOGICS FOR C
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Benton N, 2009, LECT NOTES COMPUT SC, V5674, P115, DOI 10.1007/978-3-642-03359-9_10
   Benton Nick, 2010, FORMALIZING DOMAINS
   Bloom S., 1993, SPRINGER EATCS SERIE, V7, DOI [10.1007/978-3-642-78034-9_7, DOI 10.1007/978-3-642-78034-9_7]
   Capretta V, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:1)2005
   Cartwright R., 1994, Theoretical Aspects of Computer Software. International Symposium TACS '94 Proceedings, P244
   Cenciarelli Pietro, 1993, P C CAT THEOR COMP S
   Chapman J, 2015, LECT NOTES COMPUT SC, V9399, P110, DOI 10.1007/978-3-319-25150-9_8
   Charguéraud A, 2013, LECT NOTES COMPUT SC, V7792, P41, DOI 10.1007/978-3-642-37036-6_3
   Chlipala A, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P54, DOI 10.1145/1250734.1250742
   Chlipala A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P93, DOI 10.1145/1706299.1706312
   Chlipala Adam, 2017, CERTIFIED PROGRAMMIN
   Coq Development Team, 2019, The Coq proof assistant reference manual. The Gallina specification language. Co-inductive types
   Danielsson NA, 2012, ACM SIGPLAN NOTICES, V47, P127, DOI 10.1145/2398856.2364546
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Delaware B, 2013, ACM SIGPLAN NOTICES, V48, P207, DOI 10.1145/2480359.2429094
   Gimenez Carlos Eduardo, 1996, THESIS
   Goncharov S, 2017, LECT NOTES COMPUT SC, V10203, P517, DOI 10.1007/978-3-662-54458-7_30
   Goncharov Sergey, 2011, CORRABS11042936
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   HAGINO T, 1989, J SYMB COMPUT, V8, P629, DOI 10.1016/S0747-7171(89)80065-3
   Hancock P., 2000, Computer Science Logic. 14th International Workshop, CSL 2000. Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.1862), P317
   Hancock Peter, 2000, THESIS U EDINBURGH
   Hasegawa M, 1997, LECT NOTES COMPUT SC, V1210, P196
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Hobor Aquinas., 2008, ORACLE SEMANTICS
   Hur CK, 2013, ACM SIGPLAN NOTICES, V48, P193, DOI 10.1145/2480359.2429093
   Hyland M, 2006, THEOR COMPUT SCI, V357, P70, DOI 10.1016/j.tcs.2006.03.013
   Johann P, 2010, IEEE S LOG, P209, DOI 10.1109/LICS.2010.29
   Joyal A, 1996, MATH PROC CAMBRIDGE, V119, P447, DOI 10.1017/S0305004100074338
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Kiselyov O, 2013, ACM SIGPLAN NOTICES, V48, P59, DOI 10.1145/2503778.2503791
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Koh N, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P234, DOI 10.1145/3293880.3294106
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Lampropoulos Leonidas, 2018, QuickChick: Property-Based Testing in Coq, V4
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Leroy X, 2009, INFORM COMPUT, V207, P284, DOI 10.1016/j.ic.2007.12.004
   Letan T, 2018, LECT NOTES COMPUT SC, V10951, P338, DOI 10.1007/978-3-319-95582-7_20
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Malecha G, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P237, DOI 10.1145/1706299.1706329
   McBride C, 2015, LECT NOTES COMPUT SC, V9129, P257, DOI 10.1007/978-3-319-19797-5_13
   Milius S, 2005, INFORM COMPUT, V196, P1, DOI 10.1016/j.ic.2004.05.003
   Milner R., 1975, Logic Colloquium '73, V80, P157, DOI DOI 10.1016/S0049-237X(08)71948-7
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moggi Eugenio, 1990, ECSLFCS90113 LAB FDN
   Nakata K, 2010, ELECTRON PROC THEOR, P57, DOI 10.4204/EPTCS.32.5
   Nipkow Tobias, 2002, ISABELLE HOL PROOF A
   Norell Ulf, 2007, PRACTICAL PROGRAMMIN
   Owens S, 2016, LECT NOTES COMPUT SC, V9632, P589, DOI 10.1007/978-3-662-49498-1_23
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   Pierce Benjamin C., 2018, ELECT TXB
   Piróg M, 2014, ELECTRON NOTES THEOR, V308, P273, DOI 10.1016/j.entcs.2014.10.015
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P3, DOI 10.1016/j.jlap.2004.03.009
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Plotkin Gordon D., 2001, Lecture Notes in Computer Science, V2030, P1, DOI [10.1007/3-540-45315-6_1, DOI 10.1007/3-540-45315-6_1]
   Schrijvers Tom, 2016, CW699 DEP COMP SCI
   Setzer Anton., 2006, Trends in functional programming, V7
   Smith J., 1995, INT WORKSH TYP PROOF, V996, P39, DOI [DOI 10.1007/3-540-60579-7_3, 10.1007/3-540- 60579-7]
   Steele G. L.  Jr., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P472, DOI 10.1145/174675.178068
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   The Coq Development Team, 2018, COQ PROOF ASS REF MA
   Uustalu T, 2017, LECT NOTES COMPUT SC, V10580, P32, DOI 10.1007/978-3-319-67729-3_3
   Wadler Philip, 1992, NATO ASI Series F, V118, P233, DOI [DOI 10.1007/978-3-662-02880-3, 10.1007/978-3-662-02880-3_8, DOI 10.1007/978-3-662-02880-3_8]
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
NR 77
TC 48
Z9 58
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 51
DI 10.1145/3371119
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400052
OA Green Submitted, gold, Green Published
DA 2024-07-18
ER

PT J
AU Benavides, Z
   Vora, K
   Gupta, R
AF Benavides, Zachary
   Vora, Keval
   Gupta, Rajiv
TI DProf: Distributed Profiler with Strong Guarantees
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Performance Debugging; Distributed Systems; Timestamp Synchronization
AB Performance analysis of a distributed system is typically achieved by collecting profiles whose underlying events are timestamped with unsynchronized clocks of multiple machines in the system. To allow comparison of timestamps taken at different machines, several timestamp synchronization algorithms have been developed. However, the inaccuracies associated with these algorithms can lead to inaccuracies in the final results of performance analysis. To address this problem, in this paper, we develop a system for constructing distributed performance profiles called DProf. At the core of DProf is a new timestamp synchronization algorithm, FreeZer, that tightly bounds the inaccuracy in a converted timestamp to a time interval. This not only allows timestamps from different machines to be compared, it also enables maintaining strong guarantees throughout the comparison which can be carefully transformed into guarantees for analysis results. To demonstrate the utility of DProf, we use it to implement dCSP and dCOZ that are accuracy bounded distributed versions of Context Sensitive Profiles and Causal Profiles developed for shared memory systems. While dCSP enables user to ascertain existence of a performance bottleneck, dCOZ estimates the expected performance benefit from eliminating that bottleneck. Experiments with three distributed applications on a cluster of heterogeneous machines validate that inferences via dCSP and dCOZ are highly accurate. Moreover, if FreeZer is replaced by two existing timestamp algorithms (linear regression & convex hull), the inferences provided by dCSP and dCOZ are severely degraded.
C1 [Benavides, Zachary; Gupta, Rajiv] Univ Calif Riverside, Dept Comp Sci & Engn, Riverside, CA 92521 USA.
   [Vora, Keval] Simon Fraser Univ, Sch Comp Sci, Burnaby, BC, Canada.
C3 University of California System; University of California Riverside;
   Simon Fraser University
RP Benavides, Z (corresponding author), Univ Calif Riverside, Dept Comp Sci & Engn, Riverside, CA 92521 USA.
EM zbena001@ucr.edu; kcval@cs.sfu.ca; gupta@cs.ucr.edu
OI Gupta, Rajiv/0000-0002-9348-3974; Vora, Keval/0000-0002-5462-5116
FU National Science Foundation [CNS-1617424, CCF-1524852]
FX This material is based upon work supported by the National Science
   Foundation under Grant No. CNS-1617424 and Grant No. CCF-1524852. Any
   opinions, findings, and conclusions or recommendations expressed in this
   material are those of the author and do not necessarily reflect the
   views of the National Science Foundation.
CR Adhianto L., 2008, WORKSH NOD LEV PAR L
   ANDERSON TE, 1990, PERF E R SI, V18, P115, DOI 10.1145/98460.98518
   [Anonymous], 1996, Proceedings of the SIGMETRICS symposium on Parallel and distributed tools, DOI [10.1145/238020.238024, DOI 10.1145/238020.238024]
   [Anonymous], 1996, VAMPIR VISUALIZATION
   Ashton P., 1995, TRCOSC1295 U CANT DE
   Becker D., 2010, SCHRIFTEN FORSCHUNGS, V4
   Benavides Z, 2017, LECT NOTES COMPUT SC, V10548, P103, DOI 10.1007/978-3-319-67531-2_7
   Böhme D, 2012, INT PARALL DISTRIB P, P1330, DOI 10.1109/IPDPS.2012.120
   Curtsinger C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P184, DOI 10.1145/2815400.2815409
   Ding Rui, 2015, P 2015 USENIX TECHN, P139
   Du Bois K, 2013, ACM SIGPLAN NOTICES, V48, P355, DOI [10.1145/2509136.2509529, 10.1145/2544173.2509529]
   Duda A., 1987, 7th International Conference on Distributed Computing Systems (Cat. No.87CH2439-8), P299
   DUNIGAN TH, 1992, CONCURRENCY-PRACT EX, V4, P257, DOI 10.1002/cpe.4330040305
   Geimer M, 2010, CONCURR COMP-PRACT E, V22, P702, DOI 10.1002/cpe.1556
   Geng YL, 2018, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI'18), P81
   Hofmann R, 1998, PROCEEDINGS OF THE SIXTH EUROMICRO WORKSHOP ON PARALLEL AND DISTRIBUTED PROCESSING - PDP '98, P173, DOI 10.1109/EMPDP.1998.647195
   Hollingsworth J.K., 1994, SLACK NEW PERFORMANC
   Leskovec J, 2009, INTERNET MATH, V6, P29, DOI 10.1080/15427951.2009.10129177
   Liao W., PARALLEL K MEANS DAT
   Liu X, 2011, INT SYM CODE GENER, P171, DOI 10.1109/CGO.2011.5764685
   MAILLET E, 1995, J PARALLEL DISTR COM, V28, P84, DOI 10.1006/jpdc.1995.1090
   Mariappan M, 2019, PROCEEDINGS OF THE FOURTEENTH EUROSYS CONFERENCE 2019 (EUROSYS '19), DOI 10.1145/3302424.3303974
   Miller B. P., 1990, IEEE Transactions on Parallel and Distributed Systems, V1, P206, DOI 10.1109/71.80132
   Page L., 1999, PAGERANK CITATION RA
   Poirier Benjamin, 2010, Operating Systems Review, V44, P75, DOI 10.1145/1842733.1842747
   Rabenseifner R., 1997, PROC 5 EUROMICRO WOR, P477
   Shende SS, 2006, INT J HIGH PERFORM C, V20, P287, DOI 10.1177/1094342006064482
   Stisen A, 2015, SENSYS'15: PROCEEDINGS OF THE 13TH ACM CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS, P127, DOI 10.1145/2809695.2809718
   Vora K, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P237, DOI 10.1145/3037697.3037748
   Vora K, 2017, OPER SYST REV, V51, P223, DOI 10.1145/3037697.3037747
   Vora K, 2014, ACM SIGPLAN NOTICES, V49, P861, DOI [10.1145/2714064.2660227, 10.1145/2660193.2660227]
   Yang C.-Q., 1988, 8th International Conference on Distributed Computing Systems (Cat. No.88CH2541-1), P366, DOI 10.1109/DCS.1988.12538
   Yoga A., 2017, 11 JOINT M EUR SOFTW
   Zaharia Matei, 2010, 2 USENIX WORKSHOP HO
NR 34
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 156
DI 10.1145/3360582
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500041
OA gold
DA 2024-07-18
ER

PT J
AU Bender, J
   Palsberg, J
AF Bender, John
   Palsberg, Jens
TI A Formalization of Java's Concurrent Access Modes
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Memory Models
AB Java's memory model was recently updated and expanded with new access modes. The accompanying documentation for these access modes is intended to make strong guarantees about program behavior that the Java compiler must enforce, yet the documentation is frequently unclear. This makes the intended program behavior ambiguous, impedes discussion of key design decisions, and makes it impossible to prove general properties about the semantics of the access modes.
   In this paper we present the first formalization of Java's access modes. We have constructed an axiomatic model for all of the modes using the Herd modeling tool. This allows us to give precise answers to questions about the behavior of example programs, called litmus tests. We have validated our model using a large suite of litmus tests from existing research which helps to shed light on the relationship with other memory models. We have also modeled the semantics in Coq and proven several general theorems including a DRF guarantee, which says that if a program is properly synchronized then it will exhibit sequentially consistent behavior. Finally, we use our model to prove that the unusual design choice of a partial order among writes to the same location is unobservable in any program.
C1 [Bender, John; Palsberg, Jens] Univ Calif Los Angeles, Comp Sci, Los Angeles, CA 90024 USA.
C3 University of California System; University of California Los Angeles
RP Bender, J (corresponding author), Univ Calif Los Angeles, Comp Sci, Los Angeles, CA 90024 USA.
EM johnbender@cs.ucla.edu; palsberg@ucla.edu
RI Palsberg, Jens/JYO-6826-2024
OI Palsberg, Jens/0000-0003-4747-365X
FU National Science Foundation [1815496]; Direct For Computer & Info Scie &
   Enginr [1815496] Funding Source: National Science Foundation; Division
   of Computing and Communication Foundations [1815496] Funding Source:
   National Science Foundation
FX We thank Doug Lea for discussions and encouragement, and we thank
   Shuyang Liu and Christian Kalhauge for helpful suggestions. This
   material is based upon work supported by the National Science Foundation
   under Grant No. 1815496. Any opinions, findings, and conclusions or
   recommendations expressed in this material are those of the author and
   do not necessarily reflect the views of the National Science Foundation.
CR Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Alglave Jade, 2009, P 4 WORKSH DECL ASP, P13, DOI DOI 10.1145/1481839.1481842
   [Anonymous], 2010, WG21N3092
   Aspinall D, 2007, LECT NOTES COMPUT SC, V4732, P22
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Batty Mark, 2014, THIN AIR PROBLEM
   Bender J, 2015, ACM SIGPLAN NOTICES, V50, P367, DOI [10.1145/2814270.2814318, 10.1145/2858965.2814318]
   Boehm HJ, 2008, ACM SIGPLAN NOTICES, V43, P68, DOI 10.1145/1379022.1375591
   Boehm Hans-J., 2018, P0982R0 WEAKEN RELEA
   Corbet Jon, 2012, ACCESS ONCE
   Crary K, 2015, ACM SIGPLAN NOTICES, V50, P623, DOI [10.1145/2775051.2676984, 10.1145/2676726.2676984]
   Huisman Marieke., 2007, VAMP, V7, P81
   JDK9, 2017, VARHANDLE API DOCS
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lahav Ori, 2019, COMMUNICATION
   Lea Doug, 2019, COMMUNICATION
   Lea Doug, 2017, JEP, V193
   Lea Doug., 2018, Using jdk 9 memory order modes
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Morisset R, 2013, ACM SIGPLAN NOTICES, V48, P187, DOI 10.1145/2499370.2491967
   Ou PZ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276506
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Pichon-Pharabod J, 2016, ACM SIGPLAN NOTICES, V51, P622, DOI 10.1145/2914770.2837616
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Sarkar S, 2012, ACM SIGPLAN NOTICES, V47, P311, DOI 10.1145/2345156.2254102
   Sevcík J, 2008, LECT NOTES COMPUT SC, V5142, P27, DOI 10.1007/978-3-540-70592-5_3
   SHASHA D, 1988, ACM T PROGR LANG SYS, V10, P282, DOI 10.1145/42190.42277
   Sullivan Michael J., 2015, THESIS
   Vafeiadis V, 2015, ACM SIGPLAN NOTICES, V50, P209, DOI [10.1145/2676726.2676995, 10.1145/2775051.2676995]
   Wickerson John, 2015, ARXIV PREPRINT ARXIV
NR 31
TC 11
Z9 11
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 142
DI 10.1145/3360568
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500027
OA gold
DA 2024-07-18
ER

PT J
AU Chen, J
   Wei, JY
   Feng, Y
   Bastani, O
   Dillig, I
AF Chen, Jia
   Wei, Jiayi
   Feng, Yu
   Bastani, Osbert
   Dillig, Isil
TI Relational Verification using Reinforcement Learning
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE verification; relational property; reinforcement learning; policy
   gradient; neural network; proof search
ID SECURE INFORMATION-FLOW; PROBABILISTIC MODEL; INFERENCE; PROGRAMS; CODE;
   GAME; GO
AB Relational verification aims to prove properties that relate a pair of programs or two different runs of the same program. While relational properties (e.g., equivalence, non-interference) can be verified by reducing them to standard safety, there are typically many possible reduction strategies, only some of which result in successful automated verification. Motivated by this problem, we propose a new relational verification algorithm that learns useful reduction strategies using reinforcement learning. Specifically, we show how to formulate relational verification as a Markov decision process (MDP) and use reinforcement learning to synthesize an optimal policy for the underlying MDP. The learned policy is then used to guide the search for a successful verification strategy. We have implemented this approach in a tool called COEUS and evaluate it on two benchmark suites. Our evaluation shows that COEUS solves significantly more problems within a given time limit compared to multiple baselines, including two state-of-the-art relational verification tools.
C1 [Chen, Jia; Wei, Jiayi; Dillig, Isil] Univ Texas Austin, Dept Comp Sci, Austin, TX 78712 USA.
   [Feng, Yu] Univ Calif Santa Barbara, Dept Comp Sci, Santa Barbara, CA 93106 USA.
   [Bastani, Osbert] Univ Penn, Dept Comp & Informat Sci, 200 S 33Rd St, Philadelphia, PA 19104 USA.
C3 University of Texas System; University of Texas Austin; University of
   California System; University of California Santa Barbara; University of
   Pennsylvania
RP Chen, J (corresponding author), Univ Texas Austin, Dept Comp Sci, Austin, TX 78712 USA.
EM jchen@cs.utexas.edu; jiayi@cs.utexas.edu; yufeng@cs.ucsb.edu;
   obastani@seas.upenn.edu; isil@cs.utexas.edu
OI Bastani, Osbert/0000-0001-9990-7566
FU DARPA award [FA8750-15-2-0096]; NSF [CCF-1712067]
FX This material is based on research sponsored by DARPA award
   FA8750-15-2-0096 as well as NSF Award CCF-1712067. The U.S. Government
   is authorized to reproduce and distribute reprints for Governmental
   purposes notwithstanding any copyright notation thereon. The views and
   conclusions contained herein are those of the authors and should not be
   interpreted as necessarily representing the official policies or
   endorsements, either expressed or implied, of the U.S. Government. Any
   opinions, findings, andconclusions or recommendations expressed in this
   material are those of the author and do not necessarily reflect the
   views of the National Science Foundation.
CR [Anonymous], 2018, Advances in Neural Information Processing Systems
   Barthe G, 2004, P IEEE CSFW, P100, DOI 10.1109/CSFW.2004.1310735
   Barthe Gilles, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P200, DOI 10.1007/978-3-642-21437-0_17
   Barthe G, 2016, J LOG ALGEBR METHODS, V85, P847, DOI 10.1016/j.jlamp.2016.05.004
   Barthe G, 2012, ACM SIGPLAN NOTICES, V47, P97, DOI 10.1145/2103621.2103670
   Bastani O, 2018, ACM SIGPLAN NOTICES, V53, P678, DOI [10.1145/3296979.3192383, 10.1145/3192366.3192383]
   Bastani O, 2017, ACM SIGPLAN NOTICES, V52, P95, DOI [10.1145/3062341.3062349, 10.1145/3140587.3062349]
   Bastani Osbert, 2018, ADV NEURAL INFORM PR
   Beckman NE, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P211
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Bielik P, 2017, LECT NOTES COMPUT SC, V10426, P233, DOI 10.1007/978-3-319-63387-9_12
   Bielik P, 2016, PR MACH LEARN RES, V48
   Bjorner N, 2015, LECT NOTES COMPUT SC, V9300, P24, DOI 10.1007/978-3-319-23534-9_2
   Brockschmidt Marc, 2016, ICLR
   Chen J, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P875, DOI 10.1145/3133956.3134058
   CHRISMAN L, 1992, AAAI-92 PROCEEDINGS : TENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE, P183
   Clapp L, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P422, DOI 10.1145/2950290.2950342
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   De Angelis E, 2016, LECT NOTES COMPUT SC, V9837, P147, DOI 10.1007/978-3-662-53413-7_8
   De Angelis Emanuele., 2016, Horn clause transformation for program verification
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Eilers Marco, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P502, DOI 10.1007/978-3-319-89884-1_18
   Felsing D, 2014, P 29 ACM IEEE INT C, P349, DOI [10.1145/2642937.2642987, DOI 10.1145/2642937.2642987]
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Flanagan C., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P500
   Godefroid P, 2017, IEEE INT CONF AUTOM, P50, DOI 10.1109/ASE.2017.8115618
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Guo X., 2014, Advances in Neural Information Processing Systems, P3338
   Heule S, 2016, ACM SIGPLAN NOTICES, V51, P237, DOI [10.1145/2980983.2908121, 10.1145/2908080.2908121]
   Irving G., 2016, Advances in neural information processing systems, V29, P2235
   Kalyan Ashwin, 2018, ICLR
   Komuravelli A, 2016, FORM METHOD SYST DES, V48, P175, DOI 10.1007/s10703-016-0249-4
   Kremenek T, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P161
   Lahiri Shuvendu K., 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P712, DOI 10.1007/978-3-642-31424-7_54
   Lahiri ShuvenduK., 2013, ACM SIGSOFT S FDN SO, P345, DOI DOI 10.1145/2491411.2491452
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Liang P, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P31, DOI 10.1145/1926385.1926391
   Liblit B, 2005, ACM SIGPLAN NOTICES, V40, P15, DOI 10.1145/1064978.1065014
   Livshits B, 2009, ACM SIGPLAN NOTICES, V44, P75, DOI 10.1145/1543135.1542485
   Mangal R, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P462, DOI 10.1145/2786805.2786851
   McCallum R.A., 1993, INT C MACH LEARN ICM, P190, DOI 10.1016/b978-1-55860-307-3.50031-9
   Montgomery WH., 2016, Advances in Neural Information Processing Systems, P4008
   Mordvinov Dmitry., 2017, LPAR, EPiC Series in Computing
   Padhi S, 2016, ACM SIGPLAN NOTICES, V51, P42, DOI [10.1145/2908080.2908099, 10.1145/2980983.2908099]
   Paszke A., 2017, NIPS W
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Quinlan D., 2011, CETUS USERS COMPILER
   Raghothaman M, 2018, ACM SIGPLAN NOTICES, V53, P722, DOI [10.1145/3192366.3192417, 10.1145/3296979.3192417]
   Raychev Veselin, 2016, ACM SIGPLAN Notices, V51, P731, DOI 10.1145/3022671.2984041
   Raychev V, 2016, ACM SIGPLAN NOTICES, V51, P761, DOI 10.1145/2914770.2837671
   Raychev V, 2015, ACM SIGPLAN NOTICES, V50, P111, DOI [10.1145/2775051.2677009, 10.1145/2676726.2677009]
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2594291.2594321, 10.1145/2666356.2594321]
   Schkufza E, 2014, ACM SIGPLAN NOTICES, V49, P53, DOI [10.1145/2666356.2594302, 10.1145/2594291.2594302]
   Schkufza E, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI 10.1145/2499368.2451150
   Schulman J, 2015, PR MACH LEARN RES, V37, P1889
   Sharma R, 2014, LECT NOTES COMPUT SC, V8559, P88, DOI 10.1007/978-3-319-08867-9_6
   Sharma R, 2013, LECT NOTES COMPUT SC, V7935, P388, DOI 10.1007/978-3-642-38856-9_21
   Si Xujie, ICLR
   Silver D, 2017, NATURE, V550, P354, DOI 10.1038/nature24270
   Silver D, 2016, NATURE, V529, P484, DOI 10.1038/nature16961
   Singh G, 2018, LECT NOTES COMPUT SC, V10981, P211, DOI 10.1007/978-3-319-96145-3_12
   Sousa M, 2016, ACM SIGPLAN NOTICES, V51, P57, DOI 10.1145/2908080.2908092
   Sousa Marcelo, 2018, ARXIV PREPRINT ARXIV
   Sutton RS, 2018, ADAPT COMPUT MACH LE, P1
   Sutton RS, 2000, ADV NEUR IN, V12, P1057
   Terauchi T, 2005, LECT NOTES COMPUT SC, V3672, P352
   TOWELL G, 1992, ADV NEUR IN, V4, P977
   Wang MZ, 2017, ADV NEUR IN, V30
   Xiong W., 2017, EMNLP 2017 C EMP MET, P564, DOI DOI 10.18653/V1/D17-1060
   Yang H, 2007, THEOR COMPUT SCI, V375, P308, DOI 10.1016/j.tcs.2006.12.036
   Zaks A, 2008, LECT NOTES COMPUT SC, V5014, P35, DOI 10.1007/978-3-540-68237-0_5
NR 73
TC 8
Z9 9
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 141
DI 10.1145/3360567
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500026
OA gold
DA 2024-07-18
ER

PT J
AU Luan, SF
   Yang, D
   Barnaby, C
   Sen, K
   Chandra, S
AF Luan, Sifei
   Yang, Di
   Barnaby, Celeste
   Sen, Koushik
   Chandra, Satish
TI Aroma: Code Recommendation via Structural Code
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE code recommendation; structural code search; clone detection;
   feature-based code representation; clustering
AB Programmers often write code that has similarity to existing code written somewhere. A tool t hat could help programmers to search such similar code would be immensely useful. Such a tool could help programmers to extend partially written code snippets to completely implement necessary functionality, help to discover extensions to the partial code which are commonly included by other programmers, help to cross-check against similar code written by other programmers, or help to add extra code which would fix common mistakes and errors. We propose Aroma, a tool and technique for code recommendation via structural code search. Aroma indexes a huge code corpus including thousands of open-source projects, takes a partial code snippet as input, searches the corpus for method bodies containing the partial code snippet, and clusters and intersects the results of the search to recommend a small set of succinct code snippets which both contain the query snippet and appear as part of several methods in the corpus. We evaluated Aroma on 2000 randomly selected queries created from the corpus, as well as 64 queries derived from code snippets obtained from Stack Overflow, a popular website for discussing code. We implemented Aroma for 4 different languages, and developed an IDE plugin for Aroma. Furthermore, we conducted a study where we asked 12 programmers to complete programming tasks using Aroma, and collected their feedback. Our results indicate that Aroma is capable of retrieving and recommending relevant code snippets efficiently.
C1 [Luan, Sifei; Yang, Di; Barnaby, Celeste; Sen, Koushik; Chandra, Satish] Facebook, Menlo Pk, CA 94025 USA.
   [Yang, Di] Univ Calif Irvine, Irvine, CA 92717 USA.
   [Sen, Koushik] Univ Calif Berkeley, Berkeley, CA 94720 USA.
C3 Facebook Inc; University of California System; University of California
   Irvine; University of California System; University of California
   Berkeley
RP Luan, SF (corresponding author), Facebook, Menlo Pk, CA 94025 USA.
CR Nguyen AT, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P511, DOI 10.1145/2950290.2950333
   Nguyen AT, 2012, PROC INT CONF SOFTW, P69, DOI 10.1109/ICSE.2012.6227205
   Bajracharya S., 2006, COMP 21 ACM SIGPLAN, P681, DOI DOI 10.1145/1176617.1176671
   Bruch M, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P213, DOI 10.1145/1595696.1595728
   Buse Raymond P. L., 2012, P 34 INT C SOFTW ENG
   Chan W., 2012, PROC ACM SIGSOFT 20, P1, DOI DOI 10.1145/2393596.2393606
   Chatterjee Shaunak, 2009, FUNDAMENTAL APPROACH
   Cordy JR, 2011, CONF PROC INT SYMP C, P219, DOI 10.1109/ICPC.2011.26
   Hao Zhong, 2009, ECOOP 2009 S OBJECT
   Hill R, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P228, DOI 10.1109/ASE.2004.1342740
   Holmes R, 2005, PROC INT CONF SOFTW, P117
   Jiang LX, 2007, PROC INT CONF SOFTW, P96
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Kim H, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P301, DOI 10.1145/1985793.1985835
   Kim K, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P946, DOI 10.1145/3180155.3180187
   Krugler Ken, 2013, KRUGLE CODE SEARCH A, DOI [10.1007/978-1-4614-6596-6_6, DOI 10.1007/978-1-4614-6596-6_6]
   Lemos Otavio Augusto Lazzarini, 2007, P 22 IEEEACM INT C A, DOI [10.1145/1321631, DOI 10.1145/1321631]
   Lopes CV, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133908
   Lv F, 2015, IEEE INT CONF AUTOM, P260, DOI 10.1109/ASE.2015.42
   Martie L, 2015, IEEE INT CONF AUTOM, P24, DOI 10.1109/ASE.2015.51
   McMillan C, 2012, IEEE T SOFTWARE ENG, V38, P1069, DOI 10.1109/TSE.2011.84
   McMillan C, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P111, DOI 10.1145/1985793.1985809
   Moreno L, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P880, DOI 10.1109/ICSE.2015.98
   Mover S., 2018, 2018 IEEE 25 INT C S, V00, DOI [10.1109/SANER.2018.8330216, DOI 10.1109/SANER.2018.8330216]
   Nguyen TT, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P383, DOI 10.1145/1595696.1595767
   Parr T., 2013, The Definitive ANTLR 4 Reference
   Porter M.F., 1997, Readings in information retrieval
   Robbes Romain, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P317, DOI 10.1109/ASE.2008.42
   Sachdev S, 2018, MAPL'18: PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON MACHINE LEARNING AND PROGRAMMING LANGUAGES, P31, DOI 10.1145/3211346.3211353
   Sadowski C, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P191, DOI 10.1145/2786805.2786855
   Saini V, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P354, DOI 10.1145/3236024.3236026
   Sajnani H, 2016, PROC INT CONF SOFTW, P1157, DOI 10.1145/2884781.2884877
   Salton G, 1986, Introduction to Modern Information Retrieval
   Sirres R, 2018, EMPIR SOFTW ENG, V23, P2622, DOI 10.1007/s10664-017-9544-y
   Subramanian S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P643, DOI 10.1145/2568225.2568313
   Nguyen T, 2016, PROC INT CONF SOFTW, P416, DOI 10.1145/2884781.2884873
   Nguyen T, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P551, DOI 10.1145/3236024.3236036
   Treude C, 2016, PROC INT CONF SOFTW, P392, DOI 10.1145/2884781.2884800
   Ueda Y, 2002, APSEC 2002: NINTH ASIA PACIFIC SOFTWARE ENGINEERING CONFERENCE, P327, DOI 10.1109/APSEC.2002.1183002
   Verlaguet Julien., 2014, Hack: a new programming langauge for HHVM
   Wang PC, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1066, DOI 10.1145/3180155.3180179
   White M, 2016, IEEE INT CONF AUTOM, P87, DOI 10.1145/2970276.2970326
NR 42
TC 50
Z9 54
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 152
DI 10.1145/3360578
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500037
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Panchekha, P
   Ernst, MD
   Tatlock, Z
   Kamil, S
AF Panchekha, Pavel
   Ernst, Michael D.
   Tatlock, Zachary
   Kamil, Shoaib
TI Modular Verification of Web Page Layout
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE CSS; proofs; modular; layout; verification; SMT
AB Automated verification can ensure that a web page satisfies accessibility, usability, and design properties regardless of the end user's device, preferences, and assistive technologies. However, state-of-the-art verification tools for layout properties do not scale to large pages because they rely on whole-page analyses and must reason about the entire page using the complex semantics of the browser layout algorithm.
   This paper introduces and formalizes modular layout proofs. A modular layout proof splits a monolithic verification problem into smaller verification problems, one for each component of a web page. Each component specification can use rely/guarantee-style preconditions to make it verifiable independently of the rest of the page and enabling reuse across multiple pages. Modular layout proofs scale verification to pages an order of magnitude larger than those supported by previous approaches.
   We prototyped these techniques in a new proof assistant, Troika. In Troika, a proof author partitions a page into components and writes specifications for them. Troika then verifies the specifications, and uses those specifications to verify whole-page properties. Troika also enables the proof author to verify different component specifications with different verification tools, leveraging the strengths of each. In a case study, we use Troika to verify a large web page and demonstrate a speed-up of 13.-1469 x over existing tools, taking verification time from hours to seconds. We develop a systematic approach to writing Troika proofs and demonstrate it on 8 proofs of properties from prior work to show that modular layout proofs are short, easy to write, and provide benefits over existing tools.
C1 [Panchekha, Pavel] Univ Utah, Salt Lake City, UT 84112 USA.
   [Ernst, Michael D.; Tatlock, Zachary] Univ Washington, Seattle, WA 98195 USA.
   [Kamil, Shoaib] Adobe, New York, NY USA.
C3 Utah System of Higher Education; University of Utah; University of
   Washington; University of Washington Seattle; Adobe Systems Inc.
RP Panchekha, P (corresponding author), Univ Utah, Salt Lake City, UT 84112 USA.
EM pavpan@cs.utah.edu; mernst@cs.uw.edu; ztatlock@cs.uw.edu;
   kamil@adobe.com
OI Tatlock, Zachary/0000-0002-4731-0124; Panchekha,
   Pavel/0000-0003-2621-3592
FU National Science Foundation Graduate Research Fellowship Program
   [DGE-1256082]; United States Air Force [FA8750-15-C-0010]; Air Force
   Research Laboratory; DARPA [FA8750-16-2-0032]
FX This work was supported by gifts from Adobe. This material is based upon
   work supported by the National Science Foundation Graduate Research
   Fellowship Program under Grant No. DGE-1256082. This material is based
   upon work supported by the United States Air Force under Contract No.
   FA8750-15-C-0010, and on research sponsored by Air Force Research
   Laboratory and DARPA under agreement number FA8750-16-2-0032. The U.S.
   Government is authorized to reproduce and distribute reprints for
   Governmental purposes notwithstanding any copyright notation thereon.
CR Appel Andrew W., 2016, IEEE 29 COMP SEC FDN
   Badros G. J., 1999, 99 UIST. Proceedings of the 12th Annual ACM Symposium on User Interface Software and Technology, P73, DOI 10.1145/320719.322588
   Bigham Jefrey P., 2014, P 27 ANN ACM S US IN, P117, DOI [DOI 10.1145/2642918, 10.1145/2642918.2647357, DOI 10.1145/2642918.2647357]
   Blazy S, 2006, LECT NOTES COMPUT SC, V4085, P460
   Borning A, 1997, ACM MULTIMEDIA 97, PROCEEDINGS, P173, DOI 10.1145/266180.266361
   Chaki S, 2004, IEEE T SOFTWARE ENG, V30, P388, DOI 10.1109/TSE.2004.22
   Choudhary S. R., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P171, DOI 10.1109/ICST.2012.97
   Choudhry S, 2010, PHARMACOGENET GENOM, V20, P351, DOI 10.1097/FPC.0b013e328337f992
   Chugh R, 2016, ACM SIGPLAN NOTICES, V51, P341, DOI [10.1145/2980983.2908103, 10.1145/2908080.2908103]
   Dahlweid M, 2009, PROC INT CONF SOFTW, P429, DOI 10.1109/ICSE-COMPANION.2009.5071046
   David Burns., 2012, Selenium 2 Testing Tools: Beginner's Guide
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   GRUMBERG O, 1994, ACM T PROGR LANG SYS, V16, P843, DOI 10.1145/177492.177725
   Hague Matthew, 2014, DETECTING REDUNDANT
   HAILPERN BT, 1983, IEEE T COMMUN, V31, P56, DOI 10.1109/TCOM.1983.1095720
   Halle Sylvain., 2015, Software Testing, Verification and Validation (ICST), 2015 IEEE 8th International Conference on, P1, DOI [10.1109/ICST.2015.7102635, DOI 10.1109/ICST.2015.7102635]
   Hashimoto Osamu, 1992, P 5 ANN ACM S US INT, P117, DOI [DOI 10.1145/142621.142635, 10.1145/142621.142635, 19.1145/142621.142635]
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Liang Hsiang-Sheng., 2013, Proceedings of the 26th annual ACM symposium on User interface software and technology - UIST'13, P353, DOI [DOI 10.1145/2501988.2502006, 10.1145/2501988, DOI 10.1145/2501988]
   Mahajan S, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P140, DOI 10.1145/3180155.3180262
   Mahajan S, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P249, DOI 10.1145/3092703.3092726
   Mahajan S, 2018, IEEE INT CONF SOFTW, P215, DOI 10.1109/ICST.2018.00030
   Mankoff J., 2005, P SIGCHI C HUM FACT, P41, DOI DOI 10.1145/1054972.1054979
   Maras Josip., 2014, Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering, ASE'14, P847, DOI DOI 10.1145/2642937.2648620
   Maras Josip, 2012, WORLD WID WEB C 2012
   Mesbah A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P561, DOI 10.1145/1985793.1985870
   Meyerovich L.A., 2010, WWW 10, P711, DOI DOI 10.1145/1772690.1772763
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   National Federation for the Blind, 2016, BLINDN STAT
   Otto Mark., 2015, Bootstrap: the world's most popular mobile-first and responsive front-end framework
   Panchekha P, 2018, ACM SIGPLAN NOTICES, V53, P1, DOI [10.1145/3296979.3192407, 10.1145/3192366.3192407]
   Panchekha P, 2016, ACM SIGPLAN NOTICES, V51, P181, DOI 10.1145/3022671.2984010
   Raad A, 2015, LECT NOTES COMPUT SC, V9032, P710, DOI 10.1007/978-3-662-46669-8_29
   Rustan K., 2010, Dafny: An automatic program verifier for functional correctness
   Santos JF, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290379
   STARK EW, 1985, LECT NOTES COMPUT SC, V206, P369
   Sutherland I. E., 1964, P SHAR DES AUT WORKS, DOI [DOI 10.1177/003754976400200514, 10.1177/003754976400200514]
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P343, DOI 10.1145/2480359.2429111
   Van Wyk C.J., 1982, ACM Transactions on Graphics, V1, P163, DOI DOI 10.1145/357299.357303
   Vander Zanden B., 1991, Human Factors in Computing Systems. Reaching Through Technology. CHI '91. Conference Proceedings, P465, DOI 10.1145/108844.109005
   W3C, 2011, Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification.
   Walsh TA, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P192, DOI 10.1145/3092703.3092712
   Walsh TA, 2015, IEEE INT CONF AUTOM, P709, DOI 10.1109/ASE.2015.31
   Wilkinson L., 2005, The Grammar of Graphics. Statistics and Computing, Ved 2
NR 49
TC 10
Z9 10
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 151
DI 10.1145/3360577
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500036
OA gold
DA 2024-07-18
ER

PT J
AU Swierstra, W
   Baanen, T
AF Swierstra, Wouter
   Baanen, Tim
TI A Predicate Transformer Semantics for Effects (Functional Pearl)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE predicate transformers; effects; refinement; program calculation;
   weakest precondition semantics; programming with dependent types; free
   monads; Agda
AB Reasoning about programs that use effects can be much harder than reasoning about their pure counterparts. This paper presents a predicate transformer semantics for a variety of effects, including exceptions, state, non-determinism, and general recursion. The predicate transformer semantics gives rise to a refinement relation that can be used to relate a program to its specification, or even calculate effectful programs that are correct by construction.
C1 [Swierstra, Wouter; Baanen, Tim] Univ Utrecht, Utrecht, Netherlands.
C3 Utrecht University
RP Swierstra, W (corresponding author), Univ Utrecht, Utrecht, Netherlands.
EM w.s.swierstra@uu.nl; t.baanen@uu.nl
CR Ahman D, 2017, ACM SIGPLAN NOTICES, V52, P515, DOI 10.1145/3093333.3009878
   Alpuim J, 2018, SCI COMPUT PROGRAM, V164, P37, DOI 10.1016/j.scico.2017.04.003
   Altenkirch Thorsten, 2015, J FUNCT PROGRAM, V25, DOI [10.1017/S095679681500009X, DOI 10.1017/S095679681500009X]
   [Anonymous], 1996, Algebra of Programming
   Back R. J., 2012, REFINEMENT CALCULUS
   Back R. J. R., 1989, FORM ASP COMPUT, V2
   Bird R., 2010, Pearls of Functional Algorithm Design
   Boulmé S, 2007, LECT NOTES COMPUT SC, V4583, P54
   Bove A, 2005, MATH STRUCT COMP SCI, V15, P671, DOI 10.1017/S0960129505004822
   Bove A, 2016, MATH STRUCT COMP SCI, V26, P38, DOI 10.1017/S0960129514000115
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2500365.2500581, 10.1145/2544174.2500581]
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Butler M. J., 1997, SPR S DISC MATH, P40
   Capretta V, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:1)2005
   Chlipala Adam, 2017, 2 SUMM ADV PROGR LAN 2 SUMM ADV PROGR LAN
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Dongol Brijesh, 2015, LECT NOTES COMPUT SC, V9129, P137, DOI DOI 10.1007/978-3-319-19797-5_7
   Gibbons Jeremy, 2011, ICFP 11 P 2011 ACM, P2
   Gibbons Jeremy, 2013, UNIFYING THEORIES PR, P23
   Hancock Peter, WORKSH SUBT DEP TYP WORKSH SUBT DEP TYP
   Hancock Peter, 2000, P LECT NOTES COMPUTE, P317, DOI 10.1007/3-540-44622-2_21
   Hutton Graham, 2008, REASONING EFFECTS SE
   Hyland M, 2006, THEOR COMPUT SCI, V357, P70, DOI 10.1016/j.tcs.2006.03.013
   Katsumata Shin-ya, 2013
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Liang Sheng, 1995, C REC 22 ACM SIGPLAN, P333
   Maillard Kenji, 2019, ARXIVCSPL190301237
   McBride Conor, 2015, LECT NOTES COMPUT SC, P257, DOI DOI 10.1007/978-3-319-19797-5_13
   Morgan Carroll, 1994, Programming from specifications
   Nanevski A., 2005, TR2405 HARV U
   Nanevski A, 2006, ACM SIGPLAN NOTICES, V41, P62, DOI 10.1145/1160074.1159812
   Nanevski Aleksandar, 2008, ICFP08 P 2008 SIGPL, P229, DOI 10.1145/1411204.1411237
   Norell Ulf, 2007, PRACTICAL PROGRAMMIN
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Pretnar Matija, 2010, Phdthesis
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   Swamy Nikhil, 2011, ICFP 11 P 2011 ACM, P266, DOI 10.1145/2034773.2034811
   Swierstra W., 2009, THESIS U NOTTINGHAM
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Swierstra W, 2009, LECT NOTES COMPUT SC, V5674, P440, DOI 10.1007/978-3-642-03359-9_30
   Swierstra Wouter, 2016, P LNCS, V9613, P29, DOI [10.1007/978-3-319-29604-3_3, DOI 10.1007/978-3-319-29604-3_3]
   Swierstra Wouter, 2007, HASK P ACM SIGPL, p25S36, DOI 10.1145/1291201.1291206
   The Coq development team, 2017, COQ PROOF ASSISTANT
   Voigtländer J, 2008, LECT NOTES COMPUT SC, V5133, P388
   WADLER P, 1987, SIGPLAN NOTICES, V22, P83, DOI 10.1145/24697.24706
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
NR 48
TC 8
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 103
DI 10.1145/3341707
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900026
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Biernacki, D
   Piróg, M
   Polesiuk, P
   Sieczkowski, F
AF Biernacki, Dariusz
   Pirog, Maciej
   Polesiuk, Piotr
   Sieczkowski, Filip
TI Abstracting Algebraic Effects
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE algebraic effect; row polymorphism; existential type
AB Proposed originally by Plotkin and Pretnar, algebraic effects and their handlers are a leading-edge approach to computational effects: exceptions, mutable state, nondeterminism, and such. Appreciated for their elegance and expressiveness, they are now progressing into mainstream functional progranuning languages. In this paper, we introduce and examine progranuning language constructs that back adoption of programming with algebraic effects on a larger scale in a modular fashion by providing mechanisms for abstraction. We propose two such mechanisms: existential effects (which hide the details of a particular effect from the user) and local effects (which guarantee that no code coming from the outside can interfere with a given effect). The main technical difficulty arises from the dynamic nature of coupling an effectful operation with the right handler during execution, but, as we show in this paper, a carefully designed type system can ensure that this will not break the abstraction. Our main contribution is a novel calculus for algebraic effects and handlers, called lambda(HEL), equipped with local and existential algebraic effects, in which the dynamic nature of handlers is kept in check by typed runtime coercion. As a proof of concept, we present an experimental programming language based on our calculus, which provides strong abstraction mechanisms via an ML-style module system.
C1 [Biernacki, Dariusz; Pirog, Maciej; Polesiuk, Piotr; Sieczkowski, Filip] Univ Wroclaw, Inst Comp Sci, Joliot Curie 15, PL-53206 Wroclaw, Poland.
C3 University of Wroclaw
RP Biernacki, D (corresponding author), Univ Wroclaw, Inst Comp Sci, Joliot Curie 15, PL-53206 Wroclaw, Poland.
EM dabi@cs.uni.wroc.pl; mpirog@cs.uni.wroc.pl; ppolesiuk@cs.uni.wroc.pl;
   efes@cs.uni.wroc.pl
OI Sieczkowski, Filip/0000-0001-5011-3458; Polesiuk,
   Piotr/0000-0002-7012-4346; Biernacki, Dariusz/0000-0002-1477-4635;
   Pirog, Maciej/0000-0002-5889-3388
FU National Science Centre of Poland [2014/15/B/ST6/00619,
   2016/23/P/ST6/02217]; European Union's Horizon 2020 research and
   innovation programme under the Marie Sklodowska-Curie grant [665778]
FX Dariusz Biernacki, Piotr Polesiuk and Filip Sieczkowski were supported
   by the National Science Centre of Poland under Grant No.
   2014/15/B/ST6/00619. Maciej Pirog was supported by the National Science
   Centre, Poland under POLONEZ 3 grant "Algebraic Effects and
   Continuations" no. 2016/23/P/ST6/02217.; The latter project has received
   funding from the European Union's Horizon 2020 research and innovation
   programme under the Marie Sklodowska-Curie grant agreement No 665778.
CR [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Bauer A, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:9)2014
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Biernacka M, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:5)2005
   Biernacki Dariusz, 2017, P ACM PROGR LANG
   Castagna Giuseppe, 2017, P 44 ACM SIGPLAN S P, DOI [10.1145/3009837, DOI 10.1145/3009837]
   Clements J, 2004, ACM T PROGR LANG SYS, V26, P1029, DOI 10.1145/1034774.1034778
   Clinger W.D., 1998, Proper tail recursion and space efficiency, P174, DOI [10.1145/277650.277719, DOI 10.1145/277650.277719]
   COUSINEAU G, 1985, LECT NOTES COMPUT SC, V201, P50
   Dyvbig RK, 2007, J FUNCT PROGRAM, V17, P687, DOI 10.1017/S0956796807006259
   Felleisen M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P180, DOI 10.1145/73560.73576
   Felleisen Matthias, 1986, P IFIP TC 2WG22 WORK
   Harper R, 2016, Practical Foundations for Programming Languages
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Huet Gerard, 1976, THESIS U PARIS VII F
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   KNIGHT K, 1989, COMPUT SURV, V21, P93, DOI 10.1145/62029.62030
   Krivine Jean-Louis, 2007, Higher-Order and Symbolic Computation, V20, P199, DOI 10.1007/S10990-007-9018-9
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen Daan, 2017, TYPE DIRECTED COMPIL, V2017, DOI [10.1145/3009837, DOI 10.1145/3009837]
   Leijen Daan, 2018, MSRTR201810
   Leroy Xavier, 1990, 11 INRIA ROCQ
   Lindley Sam, 2017, BE BE, DOI [10.1145/3009837, DOI 10.1145/3009837]
   Marlow S, 2006, J FUNCT PROGRAM, V16, P415, DOI 10.1017/S0956796806005995
   Peyton Jones S. L., 1992, Journal of Functional Programming, V2, P127, DOI 10.1017/S0956796800000319
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Plotkin Gordon, 2004, Electronic Notes in Theoretical Computer Science, V73, P149, DOI DOI 10.1016/J.ENTCS.2004.08.008
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Plotkin Gordon D., 2001, Electr. Notes Theor. Comput. Sci., V45, P332, DOI [10.1016/S1571-0661(04)80970-8, DOI 10.1016/S1571-0661(04)80970-8]
   Saleh Amr Hany, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P327, DOI 10.1007/978-3-319-89884-1_12
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 34
TC 19
Z9 19
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 6
DI 10.1145/3290319
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300006
OA gold
DA 2024-07-18
ER

PT J
AU Gleissenthall, KV
   Kici, RG
   Bakst, A
   Stefan, D
   Jhala, R
AF Gleissenthall, Klaus, V
   Kici, Rami Gokhan
   Bakst, Alexander
   Stefan, Deian
   Jhala, Ranjit
TI Pretend Synchrony Synchronous Verification of Asynchronous Distributed
   Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Pretend Synchrony; Distributed Systems; Reduction; Verification;
   Symmetry
AB We present pretend synchrony, a new approach to verifying distributed systems, based on the observation that while distributed programs must execute asynchronously, we can often soundly treat them as if they were synchronous when verifying their correctness. To do so, we compute a synchronization, a semantically equivalent program where all sends, receives, and message buffers, have been replaced by simple assignments, yielding a program that can be verified using Floyd-Hoare style Verification Conditions and SMT. We implement our approach as a framework for writing verified distributed programs in Go and evaluate it with four challenging case studies- the classic two-phase commit, the Raft leader election protocol, single-decree Paxos protocol, and a Multi-Paxos based distributed key-value store. We find that pretend synchrony allows us to develop performant systems while making verification of functional correctness simpler by reducing manually specified invariants by a factor of 6, and faster, by reducing checking time by three orders of magnitude.
C1 [Gleissenthall, Klaus, V; Kici, Rami Gokhan; Bakst, Alexander; Stefan, Deian; Jhala, Ranjit] Univ Calif San Diego, Comp Sci & Engn, La Jolla, CA 92093 USA.
C3 University of California System; University of California San Diego
RP Gleissenthall, KV (corresponding author), Univ Calif San Diego, Comp Sci & Engn, La Jolla, CA 92093 USA.
EM gleissen@cs.ucsd.edu; deian@cs.ucsd.edu; jhala@cs.ucsd.edu
FU NSF [CCF-1422471, CCF-1223850, CNS-1514435]; CONIX Research Center, one
   of six centers in JUMP, a Semiconductor Research Corporation (SRC)
   program - DARPA
FX This work was supported by NSF grants CCF-1422471, CCF-1223850,
   CNS-1514435, the CONIX Research Center, one of six centers in JUMP, a
   Semiconductor Research Corporation (SRC) program sponsored by DARPA and
   generous gifts from Microsoft Research and Cisco.
CR Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Bakst A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133934
   BERNSTEIN AJ, 1966, IEEE TRANS ELECTRON, VEC15, P757, DOI 10.1109/PGEC.1966.264565
   Bjurner Nikolaj, 2013, SAS
   Bouajjani A, 2018, LECT NOTES COMPUT SC, V10982, P372, DOI 10.1007/978-3-319-96142-2_23
   Bradley Aaron R, 2006, VMCAI
   Chaouch-Saad M, 2009, LECT NOTES COMPUT SC, V5797, P93, DOI 10.1007/978-3-642-04420-5_10
   Charalambides M, 2016, SCI COMPUT PROGRAM, V115, P100, DOI 10.1016/j.scico.2015.10.006
   Cohen E, 1998, LECT NOTES COMPUT SC, V1466, P317, DOI 10.1007/BFb0055631
   D'Osualdo Emanuele., 2012, Proceedings of the 2nd edition on Programming systems, languages and applications based on actors, agents, and decentralized control abstractions, AGERE! 2012, October 21-22, 2012, Tucson, Arizona, USA, P137, DOI DOI 10.1145/2414639.2414658
   Deniélou PM, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:6)2012
   Desai A, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P73, DOI 10.1145/2786805.2786861
   Desai A, 2014, ACM SIGPLAN NOTICES, V49, P709, DOI [10.1145/2660193.2660211, 10.1145/2714064.2660211]
   DOsualdo E., 2013, P 20 STAT AN S SAS 1
   Dragoi C., 2018, ARXIVCSPL180407078
   Dragoi C, 2016, ACM SIGPLAN NOTICES, V51, P400, DOI [10.1145/2837614.2837650, 10.1145/2914770.2837650]
   Dragoi C, 2014, LECT NOTES COMPUT SC, V8318, P161, DOI 10.1007/978-3-642-54013-4_10
   Elmas T, 2009, ACM SIGPLAN NOTICES, V44, P2, DOI 10.1145/1594834.1480885
   ELRAD T, 1982, SCI COMPUT PROGRAM, V2, P155, DOI 10.1016/0167-6423(83)90013-8
   Fähndrich M, 2002, ACM SIGPLAN NOTICES, V37, P13, DOI 10.1145/543552.512532
   Farzan A, 2014, ACM SIGPLAN NOTICES, V49, P151, DOI 10.1145/2535838.2535885
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Flanagan C, 2003, ACM SIGPLAN NOTICES, V38, P338, DOI 10.1145/780822.781169
   Gleissenthall KV, 2016, ACM SIGPLAN NOTICES, V51, P599, DOI [10.1145/2908080.2908129, 10.1145/2980983.2908129]
   Godefroid P, 1996, LECT NOTES COMPUT SC, V1032, P11
   Gurfinkel A, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P338, DOI 10.1145/2950290.2950330
   Hawblitzel C, 2015, LECT NOTES COMPUT SC, V9207, P449, DOI 10.1007/978-3-319-21668-3_26
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Hoenicke J, 2017, ACM SIGPLAN NOTICES, V52, P473, DOI 10.1145/3093333.3009893
   Honda K., 2012, LNCS, V7490, P291, DOI DOI 10.1007/978-3-642-33518-1_
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda Kohei, 1993, CONCUR
   Ip CN, 1996, FORM METHOD SYST DES, V9, P41, DOI 10.1007/BF00625968
   Killian Charles Edwin, 2007, 4 S NETW SYST DES IM
   Konnov I, 2017, ACM SIGPLAN NOTICES, V52, P719, DOI 10.1145/3093333.3009860
   Konnov I, 2015, LECT NOTES COMPUT SC, V9206, P85, DOI 10.1007/978-3-319-21690-4_6
   Kragl B., 2018, CONCUR, P1
   Lamport L., 2001, SIGACT News, V32, P51
   Lampson B., 1976, CRASH RECOVERY DISTR
   Lange J, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1137, DOI 10.1145/3180155.3180157
   Leino K. R. M., 2016, CAV
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Malkhi Dahlia., 2008, STOPPABLE PAXOS
   Maric Ognjen, 2017, CUTOFF BOUNDS CONSEN
   McMillan KL, 1999, LECT NOTES COMPUT SC, V1703, P219
   Monniaux D, 2015, LECT NOTES COMPUT SC, V9291, P217, DOI 10.1007/978-3-662-48288-9_13
   Moraru I, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P358, DOI 10.1145/2517349.2517350
   Ongaro Diego, 2014, 2014 USENIX ANN TECH, DOI DOI 10.5555/2643634.2643666
   OWICKI S, 1976, COMMUN ACM, V19, P279, DOI 10.1145/360051.360224
   Padon O, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3140568
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Pnueli A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P107
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sagiv M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P105, DOI 10.1145/292540.292552
   Sanchez A, 2012, LECT NOTES COMPUT SC, V7460, P146, DOI 10.1007/978-3-642-33125-1_12
   Sergey Ilya, 2018, POPL
   Stoica I, 2001, ACM SIGCOMM COMP COM, V31, P149, DOI 10.1145/964723.383071
   Taube M, 2018, ACM SIGPLAN NOTICES, V53, P662, DOI [10.1145/3296979.3192414, 10.1145/3192366.3192414]
   Taube Marcelo, 2018, PLDI
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Wilcox James R., 2017, SNAPL
   Woos D, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P154, DOI 10.1145/2854065.2854081
   Yang JL, 2009, 2009 INTERNATIONAL FORUM ON COMPUTER SCIENCE-TECHNOLOGY AND APPLICATIONS, VOL 2, PROCEEDINGS, P213, DOI 10.1109/IFCSTA.2009.173
NR 63
TC 31
Z9 33
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 59
DI 10.1145/3290372
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300059
OA gold
DA 2024-07-18
ER

PT J
AU Vákár, M
   Kammar, O
   Staton, S
AF Vakar, Matthijs
   Kammar, Ohad
   Staton, Sam
TI A Domain Theory for Statistical Probabilistic Program
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE denotational semantics; domain theory; probability; recursion; adequacy
ID CATEGORY
AB We give an adequate denotational semantics for languages with recursive higher-order types, continuous probability distributions, and soft constraints. These are expressive languages for building Bayesian models of the kinds used in computational statistics and machine learning. Among them are untyped languages, similar to Church and WebPPL, because our semantics allows recursive mixed-variance datatypes. Our semantics justifies important program equivalences including commutativity.
   Our new semantic model is based on 'quasi-Borel predomains'. These are a mixture of chain-complete partial orders (epos) and quasi-Borel spaces. Quasi-Borel spaces are a recent model of probability theory that focuses on sets of admissible random elements. Probability is traditionally treated in cpo models using probabilistic powerdomains, but these are not known to be commutative on any class of epos with higher order functions. By contrast, quasi-Borel predomains do support both a commutative probabilistic powerdomain and higher-order functions. As we show, quasi-Borel predomains form both a model of Fiore's axiomatic domain theory and a model of Kock's synthetic measure theory.
C1 [Vakar, Matthijs] Columbia Univ, New York, NY 10027 USA.
   [Kammar, Ohad; Staton, Sam] Univ Oxford, Oxford, England.
C3 Columbia University; University of Oxford
RP Vákár, M (corresponding author), Columbia Univ, New York, NY 10027 USA.
OI Vakar, Matthijs/0000-0003-4603-0523
FU Balliol College Oxford; EPSRC [EP/N007387/1, EP/M023974/1]; Royal
   Society; EPSRC [EP/M023974/1, EP/N007387/1] Funding Source: UKRI
FX Research supported by Balliol College Oxford (Career Development
   Fellowship), EPSRC (grants EP/N007387/1, EP/M023974/1), and the Royal
   Society. We are grateful to the reviewers for their suggestions. It has
   been helpful to discuss this work with the Oxford PL and Foundations
   groups, at the Domains 2018 and HOPE 2018 workshops, and with Marcelo
   Fiore, Chris Heunen, Paul Levy, Carol Mak, Gordon Plotkin, Alex Simpson,
   Hongseok Yang, amongst others.
CR Abadi M, 1996, IEEE S LOG, P242, DOI 10.1109/LICS.1996.561324
   Ackerman NL, 2011, IEEE S LOG, P107, DOI 10.1109/LICS.2011.49
   Adamek J., 1994, LMS LECT NOTE SERIES
   [Anonymous], 2012, CLASSICAL DESCRIPTIV
   Bacci Giorgio, 2018, P LICS 2018 P LICS 2018
   Barker T, 2016, ELECTRON NOTES THEOR, V325, P47, DOI 10.1016/j.entcs.2016.09.031
   Battenfeld I, 2007, ELECTRON NOTES THEOR, V172, P69, DOI 10.1016/j.entcs.2007.02.004
   Borgström J, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI [10.1145/2951913.2951942, 10.1145/3022670.2951942]
   Ehrhard T., 2017, P ACM PROGRAMMING LA, V2, P59
   Fiore Marcelo P., 1996, Distinguished Dissertations in Computer Science
   FIORE MP, 1994, IEEE S LOG, P92, DOI 10.1109/LICS.1994.316083
   Goodman N. D., 2014, DESIGN IMPLEMENTATIO
   Goodman Noah, 2008, P UAI 2008 P UAI 2008
   Goubault-Larrecq J, 2011, IEEE S LOG, P97, DOI 10.1109/LICS.2011.23
   Heunen C, 2017, IEEE S LOG
   Huang Daniel, 2018, ARXIV180607966
   JONES C, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P186
   Jung A., 1998, Electronic Notes in Theoretical Computer Science, V13, DOI 10.1016/S1571-0661(05)80216-6
   Kallenberg O, 2017, PROB THEOR STOCH MOD, V77, P1, DOI 10.1007/978-3-319-41598-7
   Kallenberg O., 2006, Foundations of modern probability
   Kammar O, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P349
   Keimel K, 2009, MATH STRUCT COMP SCI, V19, P501, DOI 10.1017/S0960129509007555
   Kiselyov O, 2009, LECT NOTES COMPUT SC, V5658, P360, DOI 10.1007/978-3-642-03034-5_17
   Kock A, 2012, THEOR APPL CATEG, V26, P97
   Lawson Jimmy D., 1982, Continuous lattices and related topics, V27, P204
   Levy Paul Blain, 2004, Call-By-Push-Value: A Functional/Imperative Synthesis
   Mansinghka Vikash K., 2014, Venture: A Higher-Order Probabilistic Programming Platform with Programmable Inference
   McDermott Dylan, 2018, P MFPS 2018 P MFPS 2018
   Mislove Michael W, 2016, ARXIV PREPRINT ARXIV
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Olmedo F, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P672, DOI 10.1145/2933575.2935317
   Pitts AM, 1996, INFORM COMPUT, V127, P66, DOI 10.1006/inco.1996.0052
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   SAHEBDJAHROMI N, 1980, THEOR COMPUT SCI, V12, P19, DOI 10.1016/0304-3975(80)90003-1
   Scibior A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158148
   SCOTT DS, 1993, THEOR COMPUT SCI, V121, P411, DOI 10.1016/0304-3975(93)90095-B
   Shan CC, 2017, ACM SIGPLAN NOTICES, V52, P130, DOI 10.1145/3093333.3009852
   SMYTH MB, 1982, SIAM J COMPUT, V11, P761, DOI 10.1137/0211062
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   Staton S, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P525, DOI 10.1145/2933575.2935313
   Vakar Matthijs, 2018, ARXIV PREPRINT ARXIV
   Wingate David, 2011, P AISTATS 2011 P 14 ART INT STAT
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
NR 44
TC 28
Z9 29
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 36
DI 10.1145/3290349
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300036
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Astorga, A
   Hsieh, C
   Madhusudan, P
   Mitra, S
AF Astorga, Angello
   Hsieh, Chiao
   Madhusudan, P.
   Mitra, Sayan
TI Perception Contracts for Safety of ML-Enabled Systems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE perception contracts; safety; neural perception
AB We introduce a novel notion of perception contracts to reason about the safety of controllers that interact with an environment using neural perception. Perception contracts capture errors in ground-truth estimations that preserve invariants when systems act upon them. We develop a theory of perception contracts and design symbolic learning algorithms for synthesizing them from a finite set of images. We implement our algorithms and evaluate synthesized perception contracts for two realistic vision-based control systems, a lane tracking system for an electric vehicle and an agricultural robot that follows crop rows. Our evaluation shows that our approach is effective in synthesizing perception contracts and generalizes well when evaluated over test images obtained during runtime monitoring of the systems.
C1 [Astorga, Angello; Hsieh, Chiao; Madhusudan, P.; Mitra, Sayan] Univ Illinois, Champaign, IL 61820 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign
RP Astorga, A (corresponding author), Univ Illinois, Champaign, IL 61820 USA.
EM aastorg2@illinois.edu; chsieh16@illinois.edu; madhu@illinois.edu;
   mitras@illinois.edu
OI Parthasarathy, Madhusudan/0000-0002-9782-721X; Mitra,
   Sayan/0000-0002-6672-8470; Hsieh, Chiao/0000-0001-8339-9915
FU Amazon, Discovery Partners Institute (DPI) science team seed grants;
   USDA National Institute of Food and Agriculture (USDA/NIFA)
   [2021-67021-33449]; Boeing company
FX This work is supported in part by research grants from Amazon, Discovery
   Partners Institute (DPI) science team seed grants, USDA National
   Institute of Food and Agriculture (USDA/NIFA #2021-67021-33449), and the
   Boeing company.
CR Abraham M, 2022, P INT CONF EMB SOFTW, P17, DOI 10.1109/EMSOFT55006.2022.00016
   Alur R, 2015, PRINCIPLES OF CYBER-PHYSICAL SYSTEMS, P1
   Alur R, 2005, ACM SIGPLAN NOTICES, V40, P98, DOI 10.1145/1047659.1040314
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 2005, P 10 EUROPEAN SOFTWA, DOI [10.1145/1095430.1081713, DOI 10.1145/1095430.1081713]
   Astorga A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485481
   Astorga A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P775, DOI 10.1145/3314221.3314641
   Bak S, 2021, Arxiv, DOI arXiv:2109.00498
   Bodik Rastislav, 2002, POPL 2002
   Bonaert G, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P466, DOI 10.1145/3453483.3454056
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dreossi T, 2015, LECT NOTES COMPUT SC, V9058, P127, DOI 10.1007/978-3-319-17524-9_10
   Du P, 2020, IEEE INT C INTELL TR, DOI 10.1109/itsc45102.2020.9294366
   Ernst M. D., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P213, DOI 10.1109/ICSE.1999.841011
   Fremont DJ, 2023, MACH LEARN, V112, P3805, DOI 10.1007/s10994-021-06120-5
   Fremont DJ, 2020, LECT NOTES COMPUT SC, V12224, P122, DOI 10.1007/978-3-030-53288-8_6
   Garg P, 2014, LECT NOTES COMPUT SC, V8559, P69, DOI 10.1007/978-3-319-08867-9_5
   Gehr T, 2018, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2018.00058
   Ghosh S, 2021, P AMER CONTR CONF, P3447, DOI 10.23919/ACC50511.2021.9482896
   Gibson John E, 1961, Stability of nonlinear control systems by the second method of Liapunov
   Gurobi Optimization LLC, 2023, Gurobi optimizer reference manual
   Hoffmann GM, 2007, P AMER CONTR CONF, P3910
   Hsieh C, 2022, IEEE T COMPUT AID D, V41, P4205, DOI 10.1109/TCAD.2022.3197508
   Hsieh C, 2023, Arxiv, DOI [arXiv:2210.00982, 10.48550/ARXIV.2210.00982, DOI 10.48550/ARXIV.2210.00982]
   Ivanov R, 2019, PROCEEDINGS OF THE 2019 22ND ACM INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL (HSCC '19), P169, DOI 10.1145/3302504.3311806
   Jahangirova G., 2016, INT S SOFTWARE TESTI, P247
   Johan Astrom K., 2021, FEEDBACK SYSTEMS INT
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Katz SM, 2021, IEEEAAIA DIGIT AVION, DOI 10.1109/DASC52595.2021.9594360
   Leino Klas, 2021, PMLR, P6212
   Lukina A, 2021, LECT NOTES COMPUT SC, V12974, P42, DOI 10.1007/978-3-030-88494-9_3
   Mamouras K, 2021, LECT NOTES COMPUT SC, V12974, P142, DOI 10.1007/978-3-030-88494-9_8
   Mitchell T. M., 1997, MACH LEARN
   Mitra S., 2021, Verifying Cyber-Physical Systems: A Path to Safe Autonomy
   Neven D, 2018, IEEE INT VEH SYM, P286
   Quinlan J. R., 1986, Machine Learning, V1, P81, DOI 10.1007/BF00116251
   Santa Cruz U, 2022, LECT NOTES COMPUT SC, V13260, P213, DOI 10.1007/978-3-031-06773-0_11
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Sivakumar AN, 2021, ROBOT SCI SYS
   Sontag ED, 2008, LECT NOTES MATH, V1932, P163
   Tao Xie, 2006, 28th International Conference on Software Engineering Proceedings, P835
   Tjeng V, 2019, ICLR
   Tran HD, 2020, LECT NOTES COMPUT SC, V12224, P3, DOI 10.1007/978-3-030-53288-8_1
   Whaley J., 2002, Software Engineering Notes, V27, P221, DOI 10.1145/566171.566212
NR 44
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 299
DI 10.1145/3622875
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100079
OA gold
DA 2024-07-18
ER

PT J
AU Bianchini, R
   Dagnino, F
   Giannini, P
   Zucca, E
AF Bianchini, Riccardo
   Dagnino, Francesco
   Giannini, Paola
   Zucca, Elena
TI Resource-Aware Soundness for Big-Step Semantics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Graded modal types; generalized inference systems
AB We extend the semantics and type system of a lambda calculus equipped with common constructs to be resource-aware. That is, reduction is instrumented to keep track of the usage of resources, and the type system guarantees, besides standard soundness, that for well-typed programs there is a computation where no needed resource gets exhausted. The resource-aware extension is parametric on an arbitrary grade algebra, and does not require ad-hoc changes to the underlying language. To this end, the semantics needs to be formalized in big-step style; as a consequence, expressing and proving (resource-aware) soundness is challenging, and is achieved by applying recent techniques based on coinductive reasoning.
C1 [Bianchini, Riccardo; Dagnino, Francesco; Zucca, Elena] Univ Genoa, Genoa, Italy.
   Univ Piemonte Orientale, Vercelli, Italy.
C3 University of Genoa; University of Eastern Piedmont Amedeo Avogadro
RP Bianchini, R (corresponding author), Univ Genoa, Genoa, Italy.
EM riccardo.bianchini@edu.unige.it; francesco.dagnino@dibris.unige.it;
   paola.giannini@uniupo.it; elena.zucca@unige.it
OI Bianchini, Riccardo/0000-0003-0491-7652
FU MUR project "T-LADIES" [PRIN 2020TL3X8X]; University of Eastern Piedmont
FX The authorswould like to thank the anonymous referees who provided
   useful and detailed comments on a previous version of the paper. This
   work was partially funded by the MUR project "T-LADIES" (PRIN
   2020TL3X8X) and has the financial support of the University of Eastern
   Piedmont.
CR Abel A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408972
   Ancona D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133905
   Ancona D, 2017, LECT NOTES COMPUT SC, V10201, P29, DOI 10.1007/978-3-662-54434-1_2
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Bianchini R, 2023, THEOR COMPUT SCI, V971, DOI 10.1016/j.tcs.2023.114063
   Bianchini R, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563319
   Bianchini Riccardo, 2023, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V3, P1
   Bianchini Riccardo, 2022, ICTCS 22 IT C THEOR, V3284, P66
   Breuvart Flavien, 2015, 24 EACSL ANN C COMP, V41, P567, DOI DOI 10.4230/LIPICS.CSL.2015.567
   Brunel A, 2014, LECT NOTES COMPUT SC, V8410, P351
   Choudhury P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434331
   Ciccone Luca, 2021, ITP 2021-International Conference on Interactive Theorem Proving (LIPIcs, V13, P1, DOI [10.4230/LIPIcs.ITP.2021.13, DOI 10.4230/LIPICS.ITP.2021.13]
   Cousot P., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P83, DOI 10.1145/143165.143184
   Dagnino F, 2022, ACM T COMPUT LOG, V23, DOI 10.1145/3522729
   Dagnino F, 2020, LECT NOTES COMPUT SC, V12075, P169, DOI 10.1007/978-3-030-44914-8_7
   Dagnino F, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(1:26)2019
   Dal Lago U, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498692
   DENICOLA R, 1984, THEOR COMPUT SCI, V34, P83, DOI 10.1016/0304-3975(84)90113-0
   Gaboardi M, 2016, ACM SIGPLAN NOTICES, V51, P476, DOI 10.1145/3022670.2951939
   Ghica DR, 2014, LECT NOTES COMPUT SC, V8410, P331
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Leroy X, 2009, INFORM COMPUT, V207, P284, DOI 10.1016/j.ic.2007.12.004
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Marshall D, 2022, LECT NOTES COMPUT SC, V13240, P346, DOI 10.1007/978-3-030-99336-8_13
   McBride Conor, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P207, DOI 10.1007/978-3-319-30936-1_12
   Orchard D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341714
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Petricek T, 2013, LECT NOTES COMPUT SC, V7966, P385, DOI 10.1007/978-3-642-39212-2_35
   Wood J, 2022, LECT NOTES COMPUT SC, V13240, P376, DOI 10.1007/978-3-030-99336-8_14
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 30
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 267
DI 10.1145/3622843
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100047
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Conrado, GK
   Goharshady, AK
   Lam, CK
AF Conrado, Giovanna Kobus
   Goharshady, Amir Kafshdar
   Lam, Chun Kit
TI The Bounded Pathwidth of Control-Flow Graphs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Control-flow Graphs; Parameterized Algorithms; Pathwidth; Treewidth
ID TREE-WIDTH; REGISTER ALLOCATION; TREEWIDTH; MINORS; ALGORITHMS; HARDNESS
AB Pathwidth and treewidth are standard and well-studied graph sparsity parameters which intuitively model the degree to which a given graph resembles a path or a tree, respectively. It is well-known that the control-flow graphs of structured goto-free programs have a tree-like shape and bounded treewidth. This fact has been exploited to design considerably more efficient algorithms for a wide variety of static analysis and compiler optimization problems, such as register allocation, mu-calculus model-checking and parity games, data-flow analysis, cache management, and liftetime-optimal redundancy elimination. However, there is no bound in the literature for the pathwidth of programs, except the general inequality that the pathwidth of a graph is at most O (lg n) times its treewidth, where n is the number of vertices of the graph.
   In this work, we prove that control-flow graphs of structured programs have bounded pathwidth and provide a linear-time algorithm to obtain a path decomposition of small width. Specifically, we establish a bound of 2 center dot d on the pathwidth of programs with nesting depth d. Since real-world programs have small nesting depth, they also have bounded pathwidth. This is significant for a number of reasons: (i) pathwidth is a strictly stronger parameter than treewidth, i.e. any graph family with bounded pathwidth has bounded treewidth, but the converse does not hold; (ii) any algorithm that is designed with treewidth in mind can be applied to bounded-pathwidth graphs with no change; (iii) there are problems that are fixed-parameter tractable with respect to pathwidth but not treewidth; (iv) verification algorithms that are designed based on treewidth would become significantly faster when using pathwidth as the parameter; and (v) it is easier to design algorithms based on bounded pathwidth since one does not have to consider the often-challenging case of merge nodes in treewidth-based dynamic programming. Thus, we invite the static analysis and compiler optimization communities to adopt pathwidth as their parameter of choice instead of, or in addition to, treewidth. Intuitively, control-flow graphs are not only tree-like, but also path-like and one can obtain simpler and more scalable algorithms by relying on path-likeness instead of tree-likeness.
   As a motivating example, we provide a simpler and more efficient algorithm for spill-free register allocation using bounded pathwidth instead of treewidth. Our algorithm reduces the runtime from O (n center dot r(2 center dot tw center dot r+2 center dot r)) to O (n center dot pw center dot r(pw center dot A +r) (+1)), where n is the number of lines of code, A is the number of registers, pw is the pathwidth of the control-flow graph and tw is its treewidth. We provide extensive experimental results showing that our approach is applicable to a wide variety of real-world embedded benchmarks from SDCC and obtains runtime improvements of 2-3 orders of magnitude. This is because the pathwidth is equal to the treewidth, or one more, in the overwhelming majority of real-world CFGs and thus our algorithm provides an exponential runtime improvement. As such, the benefits of using pathwidth are not limited to the theoretical side and simplicity in algorithm design, but are also apparent in practice.
C1 [Conrado, Giovanna Kobus; Goharshady, Amir Kafshdar; Lam, Chun Kit] Hong Kong Univ Sci & Technol, Dept Math, Dept Comp Sci & Engn, Clear Water Bay, Hong Kong, Peoples R China.
C3 Hong Kong University of Science & Technology
RP Conrado, GK (corresponding author), Hong Kong Univ Sci & Technol, Dept Math, Dept Comp Sci & Engn, Clear Water Bay, Hong Kong, Peoples R China.
EM gkc@connect.ust.hk; goharshady@cse.ust.hk; cklamaq@connect.ust.hk
OI LAM, Chun Kit/0000-0002-8856-9095; Kobus Conrado,
   Giovanna/0000-0001-9474-6505
FU Hong Kong Research Grants Council ECS Project [26208122]; Hong Kong PhD
   Fellowship Scheme (HKPFS)
FX The authors are grateful to the anonymous reviewers for detailed
   comments which significantly improved this work. The research was
   partially supported by Hong Kong Research Grants Council ECS Project
   26208122. G.K. Conrado and C.K. Lam were supported by the Hong Kong PhD
   Fellowship Scheme (HKPFS). Following the norms of theoretical computer
   science, authors are listed in alphabetical order.
CR Ahmadi A, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P857, DOI 10.1145/3519939.3523436
   Ahmadi Ali, 2022, FSTTCS, V250
   Aiswarya C., 2022, ACM SIGLOG News, V9, P6, DOI 10.1145/3527540.3527542
   Allen F.E., 1970, ACM Sigplan Not, V5, P1, DOI [DOI 10.1145/800028.808479, 10.1145/390013.808479, DOI 10.1145/390013.808479]
   ARNBORG S, 1985, BIT, V25, P2, DOI 10.1007/BF01934985
   Asadi A, 2020, LECT NOTES COMPUT SC, V12302, P253, DOI 10.1007/978-3-030-59152-6_14
   Ausnit-Hood Christine., 1997, Ada 95 Quality and Style
   Barr Michael., 2009, Embedded C Coding Standard
   Belmonte R, 2022, SIAM J DISCRETE MATH, V36, P1761, DOI 10.1137/20M1385779
   BERNSTEIN D, 1991, SIGPLAN NOTICES, V26, P241, DOI 10.1145/113446.113466
   Blindell GH, 2015, LECT NOTES COMPUT SC, V9255, P609, DOI 10.1007/978-3-319-23219-5_42
   Bodlaender H., 1998, P 9 ANN ACM SIAM S D, P574
   Bodlaender H. L., 1997, Mathematical Foundations of Computer Science 1997. 22nd International Symposium, MFCS'97 Proceedings, P19, DOI 10.1007/BFb0029946
   Bodlaender HL, 1998, THEOR COMPUT SCI, V209, P1, DOI 10.1016/S0304-3975(97)00228-4
   BODLAENDER HL, 1988, LECT NOTES COMPUT SC, V317, P105
   Burgstaller B, 2004, LECT NOTES COMPUT SC, V3063, P78
   Calder B, 1998, ACM SIGPLAN NOTICES, V33, P139, DOI 10.1145/291006.291036
   CALLAHAN D, 1991, SIGPLAN NOTICES, V26, P192, DOI 10.1145/113446.113462
   CHAITIN GJ, 1981, COMPUT LANG, V6, P47, DOI 10.1016/0096-0551(81)90048-5
   Chatterjee Krishnendu, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P543, DOI 10.1007/978-3-642-39799-8_36
   Chatterjee K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290366
   Chatterjee K, 2020, LECT NOTES COMPUT SC, V12075, P112, DOI 10.1007/978-3-030-44914-8_5
   Chatterjee K, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3363525
   Chatterjee K, 2019, SAC '19: PROCEEDINGS OF THE 34TH ACM/SIGAPP SYMPOSIUM ON APPLIED COMPUTING, P400, DOI 10.1145/3297280.3297322
   Chatterjee K, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3210257
   Chatterjee K, 2017, LECT NOTES COMPUT SC, V10482, P59, DOI 10.1007/978-3-319-68167-2_4
   Chatterjee K, 2016, ACM SIGPLAN NOTICES, V51, P733, DOI 10.1145/2914770.2837624
   Conrado Giovanna Kobus, 2023, Artifact for The Bounded Pathwidth of Control-Flow Graphs, DOI [10.5281/zenodo.8312920, DOI 10.5281/ZENODO.8312920]
   Conrado Giovanna Kobus, 2023, OOPSLA
   COURCELLE B, 1990, INFORM COMPUT, V85, P12, DOI 10.1016/0890-5401(90)90043-H
   Cygan Marek, 2015, Parameterized Algorithms
   Dutta Sandeep., 2000, Circuit Cellar, V121, P5
   Dutta Sandeep, 2003, Small device C compiler
   Ferrara A, 2005, LECT NOTES ARTIF INT, V3835, P489, DOI 10.1007/11591191_34
   Fomin FV, 2018, ACM T ALGORITHMS, V14, DOI 10.1145/3186898
   Gawlitza TM, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(3:29)2012
   Goharshady Amir, 2020, Ph.D. Dissertation
   Goharshady AK, 2023, LECT NOTES COMPUT SC, V13881, P177, DOI 10.1007/978-3-031-24950-1_9
   Goharshady AK, 2020, RELIAB ENG SYST SAFE, V193, DOI 10.1016/j.ress.2019.106665
   Gustedt J, 2002, LECT NOTES COMPUT SC, V2409, P86
   Harvey DJ, 2017, J GRAPH THEOR, V84, P364, DOI 10.1002/jgt.22030
   Hind M, 1999, ACM T PROGR LANG SYS, V21, P848, DOI 10.1145/325478.325519
   Izumi T, 2022, PROCEEDINGS OF THE 34TH ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, SPAA 2022, P11, DOI 10.1145/3490148.3538590
   Khedker U., 2017, Data flow analysis: theory and practice
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   Kincaid Z, 2021, LECT NOTES COMPUT SC, V12759, P46, DOI 10.1007/978-3-030-81685-8_3
   King P, 1999, CODE CONVENTIONS JAV
   Koes David Ryan, 2009, Ph.D. Dissertation
   KORACH E, 1993, DISCRETE APPL MATH, V43, P97, DOI 10.1016/0166-218X(93)90171-J
   Krause Philipp K., 2021, SCOPES '21: Proceedings of the 24th International Workshop on Software and Compilers for Embedded Systems, P35, DOI 10.1145/3493229.3493304
   Krause PK, 2020, DISCRETE APPL MATH, V278, P136, DOI 10.1016/j.dam.2019.01.027
   Krause PK, 2014, DISCRETE APPL MATH, V168, P51, DOI 10.1016/j.dam.2013.03.015
   Krause PK, 2013, LECT NOTES COMPUT SC, V7791, P1, DOI 10.1007/978-3-642-37051-9_1
   Krause Philipp Klaus, 2013, M-SCOPES, P23
   Lavaee R, 2016, ACM SIGPLAN NOTICES, V51, P232, DOI 10.1145/2914770.2837669
   Marca D., 1981, SIGPLAN Notices, V16, P70, DOI 10.1145/988131.988140
   McConnell Steve., 2004, Code Complete, V2nd ed
   Meybodi MA, 2022, 2022 IEEE INTERNATIONAL CONFERENCE ON BLOCKCHAIN (BLOCKCHAIN 2022), P266, DOI 10.1109/Blockchain55522.2022.00044
   Myers EugeneM., 1981, P 8 ACM SIGPLAN SIGA, P219, DOI 10.1145/567532.567556
   Nordgaard Sigve., 2020, Feasibility of Optimizations Requiring Bounded Treewidth in a Data Flow Centric Intermediate Representation
   Obdrzálek J, 2003, LECT NOTES COMPUT SC, V2725, P80
   Ogawa M, 2003, ACM SIGPLAN NOTICES, V38, P111, DOI 10.1145/944746.944716
   Ogawa Mizuhito., 2003, Catamorphic Approach to Program Analysis
   Petrank E, 2002, ACM SIGPLAN NOTICES, V37, P101, DOI 10.1145/565816.503283
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T., 1995, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics- Based Program Manipulation. PEPM'95, P1, DOI 10.1145/215465.215466
   ROBERTSON N, 1990, J COMB THEORY B, V48, P227, DOI 10.1016/0095-8956(90)90120-O
   ROBERTSON N, 1984, J COMB THEORY B, V36, P49, DOI 10.1016/0095-8956(84)90013-3
   ROBERTSON N, 1983, J COMB THEORY B, V35, P39, DOI 10.1016/0095-8956(83)90079-5
   ROBERTSON N, 1986, J ALGORITHM, V7, P309, DOI 10.1016/0196-6774(86)90023-4
   Sankaranarayanan S, 2020, LECT NOTES COMPUT SC, V12224, P604, DOI 10.1007/978-3-030-53288-8_30
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Smaragdakis Y., 2015, FDN TRENDS PROGRAM L, V2, P1, DOI DOI 10.1561/2500000014
   Srivastava Saurabh, 2013, International Journal on Software Tools for Technology Transfer, V15, P497, DOI 10.1007/s10009-012-0223-4
   Sutter Herb, 2004, C++ coding standards: 101 rules, guidelines, and best practices
   Thorup M, 1998, INFORM COMPUT, V142, P159, DOI 10.1006/inco.1997.2697
   Wilhelm R, 2000, LECT NOTES COMPUT SC, V1781, P1
   Yourdon Edward., 1985, Managing the Structured Techniques: Strategies for Software Development
   Zhu SW, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1296, DOI 10.1145/3453483.3454110
NR 79
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 232
DI 10.1145/3622807
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100012
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Mehta, MK
   Krynski, S
   Gualandi, HM
   Thakur, M
   Vitek, J
AF Mehta, Meetesh Kalpesh
   Krynski, Sebastian
   Gualandi, Hugo Musso
   Thakur, Manas
   Vitek, Jan
TI Reusing Just-in-Time Compiled Code
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Specialization; Code reuse; JIT compilation
AB Most code is executed more than once. If not entire programs then libraries remain unchanged from one run to the next. Just-in-time compilers expend considerable effort gathering insights about code they compiled many times, and often end up generating the same binary over and over again. We explore how to reuse compiled code across runs of different programs to reduce warm-up costs of dynamic languages. We propose to use speculative contextual dispatch to select versions of functions from an off-line curated code repository. That repository is a persistent database of previously compiled functions indexed by the context under which they were compiled. The repository is curated to remove redundant code and to optimize dispatch. We assess practicality by extending R, a compiler for the R language, and evaluating its performance. Our results suggest that the approach improves warmup times while preserving peak performance.
C1 [Mehta, Meetesh Kalpesh] IIT Mandi, Suran, India.
   [Krynski, Sebastian; Gualandi, Hugo Musso] Czech Tech Univ, Prague, Czech Republic.
   [Thakur, Manas] Indian Inst Technol, Mumbai, Maharashtra, India.
   [Vitek, Jan] Northeastern Univ, Boston, MA USA.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Mandi; Czech Technical University Prague; Indian
   Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Bombay; Northeastern University
RP Mehta, MK (corresponding author), IIT Mandi, Suran, India.
EM s20012@students.iitmandi.ac.in; skrynski@gmail.com;
   hugo.gualandi@fit.cvut.cz; manas@cse.iitb.ac.in; j.vitek@neu.edu
RI Vitek, Jan/J-9051-2014
OI Vitek, Jan/0000-0003-4052-3458; Thakur, Manas/0000-0002-0740-9701; Musso
   Gualandi, Hugo/0000-0003-2444-1209
FU NSF [CCF-1910850, CNS-1925644, CCF-2139612]; GACR EXPRO [23-07580X]
FX The authors thank the OOPSLA reviewers for their helpful comments. This
   work was supported by NSF grants CCF-1910850, CNS-1925644, and
   CCF-2139612, as well as the GACR EXPRO grant 23-07580X (RiGID).
CR Arnold M, 2005, ACM SIGPLAN NOTICES, V40, P297, DOI 10.1145/1103845.1094835
   Connors D, 2007, INT SYM CODE GENER, P74
   Flückiger O, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P749, DOI 10.1145/3519939.3523729
   Flückiger O, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428288
   Flückiger O, 2019, PROCEEDINGS OF THE 15TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES (DLS '19), P55, DOI 10.1145/3359619.3359744
   Hahsler M, 2022, Arxiv, DOI arXiv:2205.12371
   Holzle Urs, 1994, Adaptive optimization for self: Reconciling high performance with exploratory programming
   Joisha PramodG., 2001, ICS 01, P440, DOI DOI 10.1145/377792.377902
   Kalibera Toms., C VIRTUAL EXECUTION, DOI DOI 10.1145/2576195.2576205
   Khrabrov A, 2022, PROCEEDINGS OF THE 2022 USENIX ANNUAL TECHNICAL CONFERENCE, P869
   Love Mike, 2013, Genomicsclass/labs: RMD source files for the Harvardx series ph525x
   Mehta Meetesh Kalpesh, 2023, Reusing Just-in-Time Compiled Code, DOI [10.5281/zenodo.8330884, DOI 10.5281/ZENODO.8330884]
   Morgan Tyler, 2008, Throwing Shade Ray Tracer
   Ottoni G, 2021, INT SYM CODE GENER, P340, DOI 10.1109/CGO51591.2021.9370314
   Serrano M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473575
   Stadler Lukas, 2017, ACM SIGPLAN Notices, V52, P84, DOI 10.1145/3093334.2989236
   Talbot J, 2012, INT CONFER PARA, P43
   Tierney Luke., 2019, BYTE CODE COMPILER R
   Wang Haichuan., S CODE GENERATION OP, DOI DOI 10.1145/2581122.2544153
   Wimmer C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360610
   Wrthinger T., 2013, P 2013 ACM INT S NEW, P187, DOI [10.1145/2509578.2509581, DOI 10.1145/2509578.2509581]
   Xu XR, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276494
   Zhuykov R, 2017, PROGRAM COMPUT SOFT+, V43, P51, DOI 10.1134/S036176881701008X
NR 23
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 263
DI 10.1145/3622839
PG 22
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100043
OA gold
DA 2024-07-18
ER

PT J
AU Yi, P
   Achour, S
AF Yi, Pu (Luke)
   Achour, Sara
TI Hardware-Aware Static Optimization of Hyperdimensional Computations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE unconventional computing; emerging hardware technologies; program
   optimization
ID RETRIEVAL
AB Binary spatter code (BSC)-based hyperdimensional computing (HDC) is a highly error-resilient approximate computational paradigm suited for error-prone, emerging hardware platforms. In BSC HDC, the basic datatype is a hypervector, a typically large binary vector, where the size of the hypervector has a significant impact on the fidelity and resource usage of the computation. Typically, the hypervector size is dynamically tuned to deliver the desired accuracy; this process is time-consuming and often produces hypervector sizes that lack accuracy guarantees and produce poor results when reused for very similar workloads. We present Heim, a hardware-aware static analysis and optimization framework for BSC HD computations. Heim analytically derives the minimum hypervector size that minimizes resource usage and meets the target accuracy requirement. Heim guarantees the optimized computation converges to the user-provided accuracy target on expectation, even in the presence of hardware error. Heim deploys a novel static analysis procedure that unifies theoretical results from the neuroscience community to systematically optimize HD computations.
   We evaluate Heim against dynamic tuning-based optimization on 25 benchmark data structures. Given a 99% accuracy requirement, Heim-optimized computations achieve a 99.2%-100.0% median accuracy, up to 49.5% higher than dynamic tuning-based optimization, while achieving 1.15x-7.14x reductions in hypervector size compared to HD computations that achieve comparable query accuracy and finding parametrizations 30.0x-100167.4x faster than dynamic tuning-based approaches. We also use Heim to systematically evaluate the performance benefits of using analog CAMs and multiple-bit-per-cell ReRAM over conventional hardware, while maintaining iso-accuracy - for both emerging technologies, we find usages where the emerging hardware imparts significant benefits.
C1 [Yi, Pu (Luke); Achour, Sara] Stanford Univ, Dept Comp Sci, 450 Jane Stanford Way, Stanford, CA 94305 USA.
   [Achour, Sara] Stanford Univ, Dept Elect Engn, 450 Jane Stanford Way, Stanford, CA 94305 USA.
C3 Stanford University; Stanford University
RP Yi, P (corresponding author), Stanford Univ, Dept Comp Sci, 450 Jane Stanford Way, Stanford, CA 94305 USA.
EM lukeyi@stanford.edu; sachour@stanford.edu
OI Achour, Sara/0000-0003-3444-1544; Yi, Pu/0000-0001-6669-6520
FU Stanford SystemX Alliance; InnoHK funding, Hong Kong SAR
FX This research was supported by the Stanford SystemX Alliance and ACCESS
   -AI Chip Center for Emerging Smart Systems, sponsored by InnoHK funding,
   Hong Kong SAR.
CR Achour S, 2015, ACM SIGPLAN NOTICES, V50, P711, DOI 10.1145/2814270.2814314
   Basaklar T, 2021, Arxiv, DOI arXiv:2103.06709
   Binkert Nathan, 2011, Computer Architecture News, V39, P1, DOI 10.1145/2024716.2024718
   Clarkson KL, 2023, Arxiv, DOI arXiv:2301.10352
   Eggimann M, 2021, IEEE T CIRCUITS-I, V68, P4116, DOI 10.1109/TCSI.2021.3100266
   Frady EP, 2018, NEURAL COMPUT, V30, P1449, DOI 10.1162/neco_a_01084
   Gallant SI, 2013, NEURAL COMPUT, V25, P2038, DOI 10.1162/NECO_a_00467
   Gayler Ross W, 2009, NEW FRONTIERS ANALOG, V9
   Grossi A, 2019, IEEE T ELECTRON DEV, V66, P1281, DOI 10.1109/TED.2019.2894387
   Halawani Y, 2021, MIDWEST SYMP CIRCUIT, P179, DOI 10.1109/MWSCAS47672.2021.9531748
   Heddes M, 2022, PROCEEDINGS OF THE 59TH ACM/IEEE DESIGN AUTOMATION CONFERENCE, DAC 2022, P907, DOI 10.1145/3489517.3530553
   Hsieh ER, 2019, INT EL DEVICES MEET, DOI 10.1109/iedm19573.2019.8993514
   Imani M, 2020, IEEE T COMPUT AID D, V39, P2268, DOI 10.1109/TCAD.2019.2954472
   Imani M, 2019, 24TH ASIA AND SOUTH PACIFIC DESIGN AUTOMATION CONFERENCE (ASP-DAC 2019), P493, DOI 10.1145/3287624.3287667
   Imani M, 2019, ANN IEEE SYM FIELD P, P190, DOI 10.1109/FCCM.2019.00034
   Imani M, 2018, DES AUT CON, DOI 10.1145/3195970.3196060
   Imani M, 2017, 2017 IEEE INTERNATIONAL CONFERENCE ON REBOOTING COMPUTING (ICRC), P97
   Imani M, 2017, INT S HIGH PERF COMP, P445, DOI 10.1109/HPCA.2017.28
   Jones MN, 2007, PSYCHOL REV, V114, P1, DOI 10.1037/0033-295X.114.1.1
   Kanerva P, 2010, AAAI FALL S TECHN RE
   Kanerva P, 2019, IEEE DES TEST, V36, P7, DOI 10.1109/MDAT.2018.2890221
   Kanerva P, 2014, ANN ALLERTON CONF, P304, DOI 10.1109/ALLERTON.2014.7028470
   Kanerva P, 2009, COGN COMPUT, V1, P139, DOI 10.1007/s12559-009-9009-8
   Kanerva Pentti, 1997, PAT, V1, P10000
   Karunaratne G, 2020, NAT ELECTRON, V3, P327, DOI 10.1038/s41928-020-0410-3
   Kim Y, 2020, DES AUT TEST EUROPE, P115, DOI 10.23919/DATE48585.2020.9116397
   Kleyko D., 2021, A Survey on Hyperdimensional Computing aka Vector Symbolic Architectures, Part I: Models and Data Transformations
   Kleyko D, 2023, NEURAL COMPUT, V35, P1159, DOI 10.1162/neco_a_01590
   Kleyko D, 2023, IEEE T NEUR NET LEAR, DOI 10.1109/TNNLS.2023.3237381
   Kleyko D, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3558000
   Kleyko D, 2022, P IEEE, V110, P1538, DOI 10.1109/JPROC.2022.3209104
   Kleyko D, 2020, NEURAL COMPUT APPL, V32, P3675, DOI 10.1007/s00521-019-04397-1
   Kleyko D, 2017, IEEE T NEUR NET LEAR, V28, P1250, DOI 10.1109/TNNLS.2016.2535338
   Langenegger J, 2023, NAT NANOTECHNOL, V18, P479, DOI 10.1038/s41565-023-01357-8
   Le BQ, 2021, IEEE T ELECTRON DEV, V68, P4397, DOI 10.1109/TED.2021.3097975
   Li HT, 2016, INT EL DEVICES MEET
   Misailovic S, 2014, ACM SIGPLAN NOTICES, V49, P309, DOI [10.1145/10.1145/2660193.2660231, 10.1145/2714064.2660231]
   Montagna F, 2018, DES AUT CON, DOI 10.1145/3195970.3196096
   Morris Justin, 2019, I SYMPOS LOW POWER E, P1, DOI [10.1109/ISLPED.2019.8824908, DOI 10.1109/ISLPED.2019.8824908, DOI 10.1109/islped.2019.8824908]
   Nagaev SV, 2011, DOKL MATH, V83, P19, DOI 10.1134/S1064562411010030
   Osipov E, 2017, IEEE IND ELEC, P3276, DOI 10.1109/IECON.2017.8216554
   Pashchenko D. V., 2020, Bulletin of Electrical Engineering and Informatics, V9, P1238, DOI DOI 10.11591/EEI.V9I3.1720
   Plate TA, 2000, EXPERT SYST, V17, P29, DOI 10.1111/1468-0394.00125
   Plate TA., 1994, Distributed representations and nested compositional structure
   Plate Tony, 2003, Holographic Reduced Representations: Distributed Representation for Cognitive Structures
   Poduval P, 2021, DES AUT CON, P1195, DOI 10.1109/DAC18074.2021.9586166
   Pu Pu, 2023, Artifact for the OOPSLA 2023 Article "Hardware-Aware Static Optimization of Hyperdimensional Computations, DOI [10.5281/zenodo.8329813, DOI 10.5281/ZENODO.8329813]
   Rachkovskij DA, 2012, COMPUT INTELL-US, V28, P106, DOI 10.1111/j.1467-8640.2011.00423.x
   Rahimi A, 2019, P IEEE, V107, P123, DOI 10.1109/JPROC.2018.2871163
   Rahimi A, 2017, IEEE T CIRCUITS-I, V64, P2508, DOI 10.1109/TCSI.2017.2705051
   Rahimi A, 2016, 2016 IEEE INTERNATIONAL CONFERENCE ON REBOOTING COMPUTING (ICRC)
   Schlegel K, 2022, IEEE IJCNN, DOI 10.1109/IJCNN55064.2022.9892158
   Schlegel K, 2021, IEEE INT VEH SYM, P602, DOI 10.1109/IV48863.2021.9576028
   Sharif Hashim, 2021, PPoPP '21: Proceedings of the 26th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, P262, DOI 10.1145/3437801.3446108
   Shulaker MM, 2014, INT EL DEVICES MEET, DOI 10.1109/IEDM.2014.7047120
   Simpkin C, 2019, FUTURE GENER COMP SY, V100, P70, DOI 10.1016/j.future.2019.04.010
   Theiss J, 2022, LECT NOTES COMPUT SC, V13681, P17, DOI 10.1007/978-3-031-19803-8_2
   Thomas A, 2021, J ARTIF INTELL RES, V72, P215
   Wei Anjiang, 2023, ICCAD
   Wu TF, 2018, IEEE J SOLID-ST CIRC, V53, P3183, DOI 10.1109/JSSC.2018.2870560
   Yerxa T., 2018, Cognitive Computing, P1
   Yu T., 2022, Advances in Neural Information Processing Systems, P1157
NR 62
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 222
DI 10.1145/3622797
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100002
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Thiemann, P
AF Thiemann, Peter
TI Intrinsically Typed Sessions with Callbacks (Functional Pearl)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE session types; domain specific languages; dependent types; Agda
ID BEHAVIORAL TYPES; LANGUAGE
AB All formalizations of session types rely on linear types for soundness as session-typed communication channels must change their type at every operation. Embedded language implementations of session types follow suit. They either rely on clever typing constructions to guarantee linearity statically, or on run-time checks that approximate linearity.
   We present a new language-embedded implementation of session types, which is inspired by the inversion-of-control design principle. With our approach, all application programs are intrinsically session-typed and unable to break linearity by construction. Our design relies on a tiny encapsulated library, for which linearity remains a proof obligation that can be discharged once and for all when the library is built.
   We demonstrate that our proposed design extends to a wide range of features of session type systems: branching, recursion, multichannel and higher-order sessions, as well as context-free sessions. The multichannel extension provides an embedded implementation of session types which guarantees deadlock freedom by construction.
   The development reported in this paper is fully backed by type-checked Agda code.
C1 [Thiemann, Peter] Univ Freiburg, Freiburg, Germany.
C3 University of Freiburg
RP Thiemann, P (corresponding author), Univ Freiburg, Freiburg, Germany.
EM thiemann@acm.org
CR Ali Karim, 2022, ECOOP 2022, DOI [10.4230/LIPIcs.ECOOP.2022.27, DOI 10.4230/LIPICS.ECOOP.2022.27]
   Almeida B, 2022, INFORM COMPUT, V289, DOI 10.1016/j.ic.2022.104948
   Ancona D, 2016, FOUND TRENDS PROGRAM, V3, pI, DOI 10.1561/2500000031
   Bartoletti M, 2015, J LOG ALGEBR METHODS, V84, P763, DOI 10.1016/j.jlamp.2015.09.003
   Caires L, 2016, MATH STRUCT COMP SCI, V26, P367, DOI 10.1017/S0960129514000218
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Chen Ruofei, 2022, ECOOP 2022, V222, DOI [10.4230/LIPIcs.ECOOP.2022, DOI 10.4230/LIPICS.ECOOP.2022]
   Cruz-Filipe L, 2023, J AUTOM REASONING, V67, DOI 10.1007/s10817-023-09665-3
   Cutner Zak, 2021, Coordination Models and Languages. 23rd IFIP WG 6.1 International Conference, COORDINATION 2021 Held as Part of the 16th International Federated Conference on Distributed Computing Techniques, DisCoTec 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12717), P80, DOI 10.1007/978-3-030-78142-2_5
   Cutner Z, 2022, PPOPP'22: PROCEEDINGS OF THE 27TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P246, DOI 10.1145/3503221.3508404
   Devriese D, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Franco J, 2014, LECT NOTES COMPUT SC, V8368, P15, DOI 10.1007/978-3-319-05032-4_2
   Gay S, 2017, RIV PUBL SER AUTOMAT, pXV
   Gay SJ, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(4:12)2015
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Hu R, 2008, LECT NOTES COMPUT SC, V5142, P516, DOI 10.1007/978-3-540-70592-5_22
   Hu R, 2016, LECT NOTES COMPUT SC, V9633, P401, DOI 10.1007/978-3-662-49665-7_24
   Hu R, 2013, LECT NOTES COMPUT SC, V8174, P130, DOI 10.1007/978-3-642-40787-1_8
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   Imai K, 2019, SCI COMPUT PROGRAM, V172, P135, DOI 10.1016/j.scico.2018.08.005
   Jespersen Thomas Bracht Laumann, 2015, P 11 ACM SIGPLAN WOR, P13, DOI DOI 10.1145/2808098.2808100
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Kokke W, 2019, ELECTRON P THEOR COM, P48, DOI 10.4204/EPTCS.304.4
   Kouzapas D, 2018, SCI COMPUT PROGRAM, V155, P52, DOI 10.1016/j.scico.2017.10.006
   Lagaillardie Nicolas, 2020, Coordination Models and Languages. 22nd IFIP WG 6.1 International Conference, COORDINATION 2020. Held as Part of the 15th International Federated Conference on Distributed Computing Techniques, DisCoTec 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12134), P127, DOI 10.1007/978-3-030-50029-0_8
   Lagaillardie Nicolas, 2022, LIPIcs, V222, DOI 10.4230/LIPIcs.ECOOP.2022.4
   Lindley S, 2017, RIV PUBL SER AUTOMAT, P265
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P133, DOI [10.1145/2976002.2976018, 10.1145/3241625.2976018]
   Melgratti H, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110279
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Neubauer M, 2004, LECT NOTES COMPUT SC, V3057, P56
   Orchard D, 2016, ACM SIGPLAN NOTICES, V51, P568, DOI 10.1145/2914770.2837634
   Padovani L, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3229062
   Padovani L, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000289
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   Pucella R, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P25
   Ravara A., 1997, Euro-Par '97 Parallel Processing. Third International Euro-Par Conference. Proceedings, P554
   Reynolds John C., 1975, NEW DIRECTIONS ALGOR
   Reynolds John C., 1994, THEORETICAL ASPECTS, P13
   Sackman Matthew, 2008, Session Types in Haskell Updating Message Passing for the 21st Century
   Scalas Alceste, 2016, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, DOI [DOI 10.4230/LIPICS, DOI 10.4230/LIPICS.ECOOP.2016.21]
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Takeuchi K., 1994, PARLE '94. Parallel Architectures and Languages Europe. 6th International PARLE Conference Proceedings, P398
   Thiemann P., 1999, Journal of Functional Programming, V9, P483, DOI 10.1017/S0956796899003469
   Thiemann P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371135
   Thiemann P, 2016, ACM SIGPLAN NOTICES, V51, P462, DOI 10.1145/3022670.2951926
   Thiemann Peter, 2023, ARTIFACT INTRINSICAL, DOI [10.5281/zenodo.8164971, DOI 10.5281/ZENODO.8164971]
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   Tov JA, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P447, DOI 10.1145/1926385.1926436
   Tov JA, 2010, LECT NOTES COMPUT SC, V6012, P550, DOI 10.1007/978-3-642-11957-6_29
   Vasconcelos VT, 2006, THEOR COMPUT SCI, V368, P64, DOI 10.1016/j.tcs.2006.06.028
   Wadler P, 2014, J FUNCT PROGRAM, V24, P384, DOI 10.1017/S095679681400001X
   Willsey M, 2017, ELECTRON P THEOR COM, P73, DOI 10.4204/EPTCS.238.8
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Zhou FY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428216
NR 59
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 212
DI 10.1145/3607854
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900025
OA gold
DA 2024-07-18
ER

PT J
AU Chida, N
   Terauchi, T
AF Chida, Nariyoshi
   Terauchi, Tachio
TI Repairing Regular Expressions for Extraction
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Regular Expression; Programming by Example; Program Repair
ID INFERENCE
AB While synthesizing and repairing regular expressions (regexes) based on Programming-by-Examples (PBE) methods have seen rapid progress in recent years, all existing works only support synthesizing or repairing regexes for membership testing, and the support for extraction is still an open problem. This paper fills the void by proposing the first PBE-based method for synthesizing and repairing regexes for extraction. Our work supports regexes that have real-world extensions such as backreferences and lookarounds. The extensions significantly affect the PBE-based synthesis and repair problem. In fact, we show that there are unsolvable instances of the problem if the synthesized regexes are not allowed to use the extensions, i.e., there is no regex without the extensions that correctly classify the given set of examples, whereas every problem instance is solvable if the extensions are allowed. This is in stark contrast to the case for the membership where every instance is guaranteed to have a solution expressible by a pure regex without the extensions. The main contribution of the paper is an algorithm to solve the PBE-based synthesis and repair problem for extraction. Our algorithm builds on existing methods for synthesizing and repairing regexes for membership testing, i.e., the enumerative search algorithms with SMT constraint solving. However, significant extensions are needed because the SMT constraints in the previous works are based on a non-deterministic semantics of regexes. Non-deterministic semantics is sound for membership but not for extraction, because which substrings are extracted depends on the deterministic behavior of actual regex engines. To address the issue, we propose a new SMT constraint generation method that respects the deterministic behavior of regex engines. For this, we first define a novel formal semantics of an actual regex engine as a deterministic big-step operational semantics, and use it as a basis to design the new SMT constraint generation method. The key idea to simulate the determinism in the formal semantics and the constraints is to consider continuations of regex matching and use them for disambiguation. We also propose two new search space pruning techniques called approximation-by-pure-regex and approximation-by-backreferences that make use of the extraction information in the examples. We have implemented the synthesis and repair algorithm in a tool called R3 (Repairing Regex for extRaction) and evaluated it on 50 regexes that contain real-world extensions. Our evaluation shows the effectiveness of the algorithm and that our new pruning techniques substantially prune the search space.
C1 [Chida, Nariyoshi] Waseda Univ, NTT Social Informat Labs, Tokyo, Japan.
   [Terauchi, Tachio] Waseda Univ, Tokyo, Japan.
C3 Waseda University; Waseda University
RP Chida, N (corresponding author), Waseda Univ, NTT Social Informat Labs, Tokyo, Japan.
EM nariyoshichidamm@gmail.com; terauchi@waseda.jp
OI Terauchi, Tachio/0000-0001-5305-4916; Chida,
   Nariyoshi/0000-0002-9542-9234
CR Amazon Web Services, 2022, REG MATCH RUL STAT
   ANGLUIN D, 1978, INFORM CONTROL, V39, P337, DOI 10.1016/S0019-9958(78)90683-6
   Angular, 2022, ANG MOD WEB DEV PLAT
   Bartoli A, 2016, IEEE T KNOWL DATA EN, V28, P1217, DOI 10.1109/TKDE.2016.2515587
   Bartoli A, 2014, COMPUTER, V47, P72, DOI 10.1109/MC.2014.344
   Berglund Martin, 2017, P PRAG STRING C 2017, P30
   Brazma A., 1993, Proceeding of the Sixth Annual ACM Conference on Computational Learning Theory, P236, DOI 10.1145/168304.168340
   Chen QC, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P487, DOI 10.1145/3385412.3385988
   Chen T, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498707
   Chida N, 2022, P IEEE S SECUR PRIV, P2060, DOI [10.1109/SP46214.2022.9833597, 10.1109/SP46214.2022.00061]
   Chida Nariyoshi, 2022, (Leibniz International Proceedings in Informatics (LIPIcs),, V228, DOI DOI 10.4230/LIPICS.FSCD.2022.15
   Cox Russ, 2007, REGULAR EXPRESSION M
   Davis JC, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P443, DOI 10.1145/3338906.3338909
   Davis JC, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P246, DOI 10.1145/3236024.3236027
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Django, 2022, DJANG WEB FRAM PERF
   ECMA International, 2022, ECMASCRIPT R 2023 LA
   Fernau H, 2009, INFORM COMPUT, V207, P521, DOI 10.1016/j.ic.2008.12.008
   Ferreira Margarida, 2021, Tools and Algorithms for the Construction and Analysis of Systems. 27th International Conference, TACAS 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12651), P152, DOI 10.1007/978-3-030-72016-2_9
   Friedl E. F., 2006, MASTERING REGULAR EX, V3
   Frisch A, 2004, LECT NOTES COMPUT SC, V3142, P618
   Google, RE2
   Lee M, 2017, ACM SIGPLAN NOTICES, V52, P70, DOI [10.1145/3093335.2993244, 10.1145/2993236.2993244]
   Li Y., 2008, P C EMP METH NAT LAN, P21
   Li YT, 2020, IEEE INT CONF AUTOM, P659, DOI 10.1145/3324884.3416556
   Li YT, 2021, PROC INT CONF SOFTW, P1210, DOI 10.1109/ICSE43902.2021.00111
   Loring B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P425, DOI 10.1145/3314221.3314645
   Luckie M, 2019, IMC'19: PROCEEDINGS OF THE 2019 ACM INTERNET MEASUREMENT CONFERENCE, P337, DOI 10.1145/3355369.3355589
   Michael LG, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P415, DOI 10.1109/ASE.2019.00047
   OHara Chris, 2022, VALIDATORJS
   OWASP, 2022, INP VAL CHEAT SHEET
   Pan R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360565
   Peipei Wang, 2020, MSR '20: Proceedings of the 17th International Conference on Mining Software Repositories, P103, DOI 10.1145/3379597.3387464
   Rebele T, 2018, LECT NOTES ARTIF INT, V10938, P67, DOI 10.1007/978-3-319-93037-4_6
   RegExLib, 2022, US
   Sakuma Y, 2012, J APPL LOGIC, V10, P32, DOI 10.1016/j.jal.2011.11.003
   Snort, 2022, About us
   Zhang T., 2020, P 33 ANN ACM S US IN, P627
NR 38
TC 0
Z9 0
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 173
DI 10.1145/3591287
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900069
OA gold
DA 2024-07-18
ER

PT J
AU Tardieu, O
   Grove, D
   Bercea, GT
   Castro, P
   Cwiklik, J
   Epstein, E
AF Tardieu, Olivier
   Grove, David
   Bercea, Gheorghe-Teodor
   Castro, Paul
   Cwiklik, Jaroslaw
   Epstein, Edward
TI Reliable Actors with Retry Orchestration
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE distributed systems; actors; fault tolerance; workflows
AB Cloud developers have to build applications that are resilient to failures and interruptions. We advocate for a fault-tolerant programming model for the cloud based on actors, retry orchestration, and tail calls. This model builds upon persistent data stores and message queues readily available on the cloud. Retry orchestration not only guarantees that (1) failed actor invocations will be retried but also that (2) completed invocations are never repeated and (3) it preserves a strict happen-before relationship across failures within call stacks. Tail calls can break complex tasks into simple steps to minimize re-execution during recovery. We review key application patterns and failure scenarios. We formalize a process calculus to precisely capture the mechanisms of fault tolerance in this model. We briefly describe our implementation. Using an application inspired by a typical enterprise scenario, we validate the functional correctness of our implementation and assess the impact of fault preparedness and recovery on performance.
C1 [Tardieu, Olivier; Grove, David; Bercea, Gheorghe-Teodor; Epstein, Edward] IBM Res, 1101 Kitchawan Rd, Yorktown Hts, NY USA.
   [Castro, Paul] IBM Res, 314 Main St, Cambridge, MA USA.
   [Cwiklik, Jaroslaw] IBM Res, 3039 E Cornwallis Rd, Res Triangle Pk, NC USA.
C3 International Business Machines (IBM); International Business Machines
   (IBM); International Business Machines (IBM)
RP Tardieu, O (corresponding author), IBM Res, 1101 Kitchawan Rd, Yorktown Hts, NY USA.
EM tardieu@us.ibm.com; groved@us.ibm.com; doru.bercea@amd.com;
   castrop@us.ibm.com; cwiklik@us.ibm.com; eae@us.ibm.com
OI Grove, David/0000-0002-3265-7125; Bercea,
   Gheorghe-Teodor/0000-0003-4331-4360
CR Akka, 2011, AKK ACT MOD
   [Anonymous], 2014, MSR-TR-2014-41
   [Anonymous], 2019, ORLEANS 5456
   [Anonymous], 2009, Hadoop: The definitive guide
   Apache, 2016, KIP 98 EX ONC DEL T
   Armstrong J, 2010, COMMUN ACM, V53, P68, DOI 10.1145/1810891.1810910
   Burckhardt S, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485510
   Crafa S, 2014, LECT NOTES COMPUT SC, V8586, P670
   Cutting Doug, 2007, OREILLY OPEN SOFTWAR
   DAPR, 2020, DAPR PROJ WEBS
   DAPR, 2020, US
   DAPR Reentrancy, 2022, HOW TO EN US ACT REE
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Eldeeb T., 2016, Technical report MSR-TR-2016-1001.
   Elnozahy EN, 2002, ACM COMPUT SURV, V34, P375, DOI 10.1145/568522.568525
   Field J, 2005, ACM SIGPLAN NOTICES, V40, P195, DOI 10.1145/1047659.1040322
   Garcia-Molina H., 1987, ACM SIGMOD Record, P249, DOI DOI 10.1145/38714.38742
   Geller A., 2011, Proceedings of the 2nd ACM Symposium on Cloud Computing, ser. SOCC'11, Cascais, P16, DOI [DOI 10.1145/2038916.2038932, 10.1145/2038916.2038932]
   Gray J, 2006, ACM T DATABASE SYST, V31, P133, DOI 10.1145/1132863.1132867
   Grove David, 2023, Zenodo, DOI 10.5281/ZENODO.7805564
   Grove D, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3332372
   K3D, 2021, K3D PROJ WEBS
   Kafka, 2022, AP KAFK PROJ WEBS
   KAR, 2022, KAR GITHUB
   KAR APPS, 2022, KAR APPL GITHUB
   Microsoft, 2016, AZ FUNCT
   Microsoft, 2018, DUR FUNCT WEBS
   Moritz P, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P561
   Mukherjee Suvam, 2019, 33 EUROPEAN C OBJECT, V134, DOI [10.4230/LIPIcs.ECOOP.2019.18, DOI 10.4230/LIPICS.ECOOP.2019.18]
   Orleans, 2021, DESCRIPTION CALL CHA
   Redis, 2022, RED PROJ WEBS
   Sang B, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428266
   Sato K, 2012, INT CONF HIGH PERFOR
   Setty S, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P501
   Sharma Y, 2016, J NETW COMPUT APPL, V74, P66, DOI 10.1016/j.jnca.2016.08.010
   Shipping, 2018, SHIPP CONT APPL ARCH
   Vishwanath Kashi Venkatesh, 2010, Proceedings of the 1st ACM Symposium on Cloud Computing, SoCC'10, page, DOI DOI 10.1145/1807128.1807161
   Zaharia Matei, 2012, Proceedings of the 9th USENIX Conference on Networked Systems Design and Implementation, NSDI'12, P1, DOI DOI 10.1111/J.1095-8649.2005.00662.X
   Zhang HR, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P1187
NR 39
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 159
DI 10.1145/3591273
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900055
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Tunç, HC
   Abdulla, PA
   Chakraborty, S
   Krishna, S
   Mathur, U
   Pavlogiannis, A
AF Tunc, Hunkar Can
   Abdulla, Parosh Aziz
   Chakraborty, Soham
   Krishna, Shankaranarayanan
   Mathur, Umang
   Pavlogiannis, Andreas
TI Optimal Reads-From Consistency Checking for C11-Style
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrency; weak memory models; complexity
ID SEQUENTIAL CONSISTENCY; MEMORY CONSISTENCY
AB Over the years, several memory models have been proposed to capture the subtle concurrency semantics of C/C++. One of the most fundamental problems associated with a memory modelM is consistency checking: given an execution X, is X consistent with M? This problem lies at the heart of numerous applications, including specification testing and litmus tests, stateless model checking, and dynamic analyses. As such, it has been explored extensively and its complexity is well-understood for traditional models like SC and TSO. However, less is known for the numerous model variants of C/C++, for which the problem becomes challenging due to the intricacies of their concurrency primitives. In this work we study the problem of consistency checking for popular variants of the C11 memory model, in particular, the RC20 model, its release-acquire (RA) fragment, the strong and weak variants of RA (SRA and WRA), as well as the Relaxed fragment of RC20.
   Motivated by applications in testing and model checking, we focus on reads-from consistency checking. The input is an execution X specifying a set of events, their program order and their reads-from relation, and the task is to decide the existence of a modification order on the writes of X that makes X consistent in a memory model. We draw a rich complexity landscape for this problem; our results include (i) nearly-linear-time algorithms for certain variants, which improve over prior results, (ii) fine-grained optimality results, as well as (iii) matching upper and lower bounds (NP-hardness) for other variants. To our knowledge, this is the first work to characterize the complexity of consistency checking for C11 memory models. We have implemented our algorithms inside the TruSt model checker and the C11Tester testing tool. Experiments on standard benchmarks show that our new algorithms improve consistency checking, often by a significant margin.
C1 [Tunc, Hunkar Can; Pavlogiannis, Andreas] Aarhus Univ, Aarhus, Denmark.
   [Abdulla, Parosh Aziz] Uppsala Univ, Uppsala, Sweden.
   [Chakraborty, Soham] Delft Univ Technol, Delft, Netherlands.
   [Krishna, Shankaranarayanan] Indian Inst Technol, Bombay, India.
   [Mathur, Umang] Natl Univ Singapore, Singapore, Singapore.
C3 Aarhus University; Uppsala University; Delft University of Technology;
   Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Bombay; National University of Singapore
RP Tunç, HC (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM tunc@cs.au.dk; parosh@it.uu.se; s.chakraborty@tudelft.nl;
   krishnas@cse.iitb.ac.in; umathur@comp.nus.edu.sg; pavlogiannis@cs.au.dk
RI Pavlogiannis, Andreas/X-6831-2018
FU VILLUM FONDEN [VIL42117]; Simons Institute for the Theory of Computing;
   Singapore Ministry of Education (MoE) Academic Research Fund (AcRF) Tier
   1 grant; SERB MATRICS grant [MTR/2019/000095]; Swedish Research Council
FX Andreas Pavlogiannis was partially supported by a research grant
   (VIL42117) from VILLUM FONDEN. Umang Mathur was partially supported by
   the Simons Institute for the Theory of Computing, and by a Singapore
   Ministry of Education (MoE) Academic Research Fund (AcRF) Tier 1 grant.
   Shankaranarayanan Krishna was partially supported by the SERB MATRICS
   grant MTR/2019/000095. Parosh Aziz Abdulla was partially supported by
   the Swedish Research Council.
CR Abdulla PA, 2023, Arxiv, DOI arXiv:2304.03714
   Abdulla PA, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360576
   Abdulla PA, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276505
   Agarwal P, 2021, LECT NOTES COMPUT SC, V12759, P341, DOI 10.1007/978-3-030-81685-8_16
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Alglave J, 2011, LECT NOTES COMPUT SC, V6605, P41, DOI 10.1007/978-3-642-19835-9_5
   Alglave Jade, 2010, THESIS U PARIS 7 DEN
   [Anonymous], 2011, ISOIEC14882
   [Anonymous], 2011, ISOIEC9899
   Batty M, 2016, ACM SIGPLAN NOTICES, V51, P634, DOI 10.1145/2914770.2837637
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Bender J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360568
   Boehm HJ, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P68, DOI 10.1145/1375581.1375591
   Bornholt J, 2021, PROCEEDINGS OF THE 28TH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, SOSP 2021, P836, DOI 10.1145/3477132.3483540
   Bouajjani A, 2017, ACM SIGPLAN NOTICES, V52, P626, DOI 10.1145/3093333.3009888
   Bui TL, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485541
   Burckhardt Sebastian, 2014, PROGRAMMING LANGUAGE, V1, P1, DOI [10.1561/2500000011, DOI 10.1561/2500000011]
   Chakraborty S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290383
   Chalupa M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158119
   Chatterjee K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360550
   Chen J., 2004, PROC 36 ACM S THEORY, P212, DOI DOI 10.1145/1007352.1007391
   Chen YJ, 2009, INT S HIGH PERF COMP, P381, DOI 10.1109/HPCA.2009.4798276
   Chini Peter, 2020, 40 IARCS ANN C FDN S, V42, P1, DOI [10.4230/LIPIcs.FSTTCS.2020.42, DOI 10.4230/LIPICS.FSTTCS.2020.42]
   Dang HH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371102
   Desnoyers M, 2012, IEEE T PARALL DISTR, V23, P375, DOI 10.1109/TPDS.2011.159
   Furbach F, 2015, ACM T EMBED COMPUT S, V14, DOI 10.1145/2753761
   Gibbons PB, 1997, SIAM J COMPUT, V26, P1208, DOI 10.1137/S0097539794279614
   Huang J, 2014, ACM SIGPLAN NOTICES, V49, P337, DOI [10.1145/2666356.2594315, 10.1145/2594291.2594315]
   Kalhauge CG, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276516
   Kini D, 2017, ACM SIGPLAN NOTICES, V52, P157, DOI [10.1145/3062341.3062374, 10.1145/3140587.3062374]
   Kokologiannakis M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571212
   Kokologiannakis M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498711
   Kokologiannakis M, 2021, LECT NOTES COMPUT SC, V12759, P427, DOI 10.1007/978-3-030-81685-8_20
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   Lahav O, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3505273
   Lahav O, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P126, DOI 10.1145/3314221.3314604
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lahav O, 2016, ACM SIGPLAN NOTICES, V51, P649, DOI 10.1145/2914770.2837643
   Lahav O, 2015, LECT NOTES COMPUT SC, V9135, P311, DOI 10.1007/978-3-662-47666-6_25
   Lee SH, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P362, DOI 10.1145/3385412.3386010
   Lerche Carl, 2020, Loom
   Lloyd W, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P401
   Manovit C, 2006, INT S HIGH PERF COMP, P168, DOI 10.1109/HPCA.2006.1598123
   Margalit R, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434285
   Mathur U, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276515
   Mathur U, 2020, IEEE S LOG, P713, DOI 10.1145/3373718.3394783
   Mathur U, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434317
   Norris B, 2013, ACM SIGPLAN NOTICES, V48, P131, DOI [10.1145/2509136.2509514, 10.1145/2544173.2509514]
   Oberhauser J, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P530, DOI 10.1145/3445814.3446748
   Pavlogiannis A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371085
   Qadeer S, 2003, IEEE T PARALL DISTR, V14, P730, DOI 10.1109/TPDS.2003.1225053
   Tunc Hunkar Can, 2023, Zenodo, DOI 10.5281/ZENODO.7816526
   Vafeiadis V, 2015, ACM SIGPLAN NOTICES, V50, P209, DOI [10.1145/2676726.2676995, 10.1145/2775051.2676995]
   Vasillevska-Williams Virginia, 2019, P INT C MATH ICM 19, P3447, DOI DOI 10.1142/9789813272880_0188
   Weiyu Luo, 2021, ASPLOS 2021: Proceedings of the 26th International Conference on Architectural Support for Programming Languages and Operating Systems, P630, DOI 10.1145/3445814.3446711
   Wickerson J, 2017, ACM SIGPLAN NOTICES, V52, P190, DOI 10.1145/3093333.3009838
   Williams VV, 2018, J ACM, V65, DOI [10.1145/318693, 10.1145/3186893]
   Windsor M, 2022, SOFTW TEST VERIF REL, V32, DOI 10.1002/stvr.1812
   Zennou R, 2019, LECT NOTES COMPUT SC, V11562, P267, DOI 10.1007/978-3-030-25543-5_16
NR 59
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 137
DI 10.1145/3591251
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900033
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Valizadeh, M
   Berger, M
AF Valizadeh, Mojtaba
   Berger, Martin
TI Search-Based Regular Expression Inference on a GPU
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Grammar inference; regular expression inference; program synthesis;
   machine learning; GPU
AB Regular expression inference (REI) is a supervised machine learning and program synthesis problem that takes a cost metric for regular expressions, and positive and negative examples of strings as input. It outputs a regular expression that is precise (i.e., accepts all positive and rejects all negative examples), and minimal w.r.t. to the cost metric. We present a novel algorithm for REI over arbitrary alphabets that is enumerative and trades off time for space. Our main algorithmic idea is to implement the search space of regular expressions succinctly as a contiguous matrix of bitvectors. Collectively, the bitvectors represent, as characteristic sequences, all sub-languages of the infix-closure of the union of positive and negative examples. Mathematically, this is a semiring of (a variant of) formal power series. Infix-closure enables bottom-up compositional construction of larger from smaller regular expressions using the operations of our semiring. This minimises data movement and data-dependent branching, hence maximises data-parallelism. In addition, the infix-closure remains unchanged during the search, hence search can be staged: first pre-compute various expensive operations, and then run the compute intensive search process. We provide two C++ implementations, one for general purpose CPUs and one for Nvidia GPUs (using CUDA). We benchmark both on Google Colab Pro: the GPU implementation is on average over 1000x faster than the CPU implementation on the hardest benchmarks.
C1 [Valizadeh, Mojtaba] Univ Sussex, Brighton, England.
   [Berger, Martin] Montanarius Ltd, London, England.
   [Berger, Martin] Huawei R&D UK Ltd, London, England.
   [Berger, Martin] Univ Sussex, Brighton, England.
C3 University of Sussex; University of Sussex
RP Valizadeh, M (corresponding author), Univ Sussex, Brighton, England.
EM Valizadeh.Mojtaba@gmail.com; contact@martinfriedrichberger.net
OI Berger, Martin/0000-0003-3239-5812
CR ANGLUIN D, 1987, INFORM COMPUT, V75, P87, DOI 10.1016/0890-5401(87)90052-6
   Bansal S, 2006, ACM SIGPLAN NOTICES, V41, P394, DOI 10.1145/1168918.1168906
   Barrett E, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133876
   Bartoli A, 2016, IEEE T KNOWL DATA EN, V28, P1217, DOI 10.1109/TKDE.2016.2515587
   Bartoli A, 2014, COMPUTER, V47, P72, DOI 10.1109/MC.2014.344
   Berstel Jr Jean, 1988, Rational Series and Their Languages, EATCS Monographs on Theoretical Computer Science
   Bex GJ, 2010, ACM T DATABASE SYST, V35, DOI 10.1145/1735886.1735890
   C++ Standards Committee, 2022, C STAND LIB STD UN S
   Dally WJ, 2020, COMMUN ACM, V63, P48, DOI 10.1145/3361682
   Dehghani M, 2021, Arxiv, DOI arXiv:2107.07002
   Droste M, 2009, MONOGR THEOR COMPUT, P3, DOI 10.1007/978-3-642-01492-5_1
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Fisler Kathi, 2022, DATA CENTRIC INTRO C
   Golan J. S., 1999, SEMIRINGS THEIR APPL, DOI 10.1007/978-94-015-9333-5
   GOLD EM, 1967, INFORM CONTROL, V10, P447, DOI 10.1016/S0019-9958(67)91165-5
   Google, 2022, Google colaboratory
   Gregg Brendan, 2018, EVALUATING EVALUATIO
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P317, DOI 10.1145/1925844.1926423
   Hennessy J., 2017, Computer Architecture, Sixth Edition: A Quantitative Approach, V6th
   Hooker J. N., 1995, Journal of Heuristics, V1, P33, DOI 10.1007/BF02430364
   Jünger D, 2020, INT C HIGH PERFORM, P11, DOI 10.1109/HiPC50609.2020.00015
   Junger Daniel, 2022, WARPCORE HASHING SPE
   Lee M, 2017, ACM SIGPLAN NOTICES, V52, P70, DOI [10.1145/3093335.2993244, 10.1145/2993236.2993244]
   Lee Mina, 2017, CODE BENCHMARKS
   Li Y., 2008, EMNLP
   Li YT, 2020, IEEE INT CONF AUTOM, P659, DOI 10.1145/3324884.3416556
   Li YT, 2021, PROC INT CONF SOFTW, P1210, DOI 10.1109/ICSE43902.2021.00111
   Liu HY, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P251, DOI 10.1145/3373376.3378471
   Locascio N., 2016, P 2016 C EMPIRICAL M, P1918
   Nandi C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485496
   Pan R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360565
   Park JU, 2019, 2019 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING AND THE 9TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING (EMNLP-IJCNLP 2019), P6425
   Qiu JQ, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P887, DOI 10.1145/3445814.3446705
   Salomaa A., 1978, Automata-theoretic aspects of formal power series
   Stephens N, 2017, IEEE MICRO, V37, P26, DOI 10.1109/MM.2017.35
   Udupa A, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2499370.2462174
   Valizadeh Mojtaba, 2023, CODE DATA PLDI 2023
   Vaswani A, 2023, Arxiv, DOI [arXiv:1706.03762, DOI 10.48550/ARXIV.1706.03762, 10.48550/arXiv.1706.03762]
   Wang XY, 2016, ACM SIGPLAN NOTICES, V51, P195, DOI 10.1145/3022671.2984030
   Wikipedia, 2023, ON HOT WIK FREE ENC
   Wikipedia contributors, 2022, GRAMM IND WIK FREE E
   Wikipedia contributors, 2022, STREAM SIMD EXT WIK
   Wikipedia contributors, REDOS WIK FREE ENC
   Wilper Holly, 2020, UNDERSTANDING VISUAL
   Zhang Y, 2010, ACM SIGCOMM COMP COM, V40, P20, DOI 10.1145/1880153.1880157
   Zhong ZX, 2018, 2018 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2018), P1608
   Zu Y, 2012, ACM SIGPLAN NOTICES, V47, P129, DOI 10.1145/2370036.2145833
NR 47
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 160
DI 10.1145/3591274
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900056
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Ye, QC
   Delaware, B
AF Ye, Qianchuan
   Delaware, Benjamin
TI Taype: APolicy-Agnostic Language for Oblivious Computation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Oblivious computation; Dependent type systems; Algebraic Data Types
AB Secure multiparty computation (MPC) allows for joint computation over private data from multiple entities, usually backed by powerful cryptographic techniques that protect sensitive data. Several high-level programming languages have been proposed to make writing MPC applications accessible to non-experts. These languages typically require developers to enforce security policies within the logic of the secure application itself, making it difficult to update security requirements, or to experiment with different policies. This paper presents the design and implementation of Taype, a language that permits security concerns to be decoupled from the program logic. To do so, Taype provides the first implementation of oblivious algebraic data types and tape semantics, two language features recently proposed by a core calculus for oblivious computation, lambda(OAD)+. We evaluate our implementation of Taype on a range of benchmarks, demonstrating its ability to encode a range of security polices for a rich class of data types.
C1 [Ye, Qianchuan; Delaware, Benjamin] Purdue Univ, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Ye, QC (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM ye202@purdue.edu; bendy@purdue.edu
OI Ye, Qianchuan/0000-0002-5977-5236; Delaware,
   Benjamin/0000-0002-1016-6261
FU Cisco Systems [23013611]; IARPA [2019-19020700004]
FX We thank Patrick LaFontaine, Robert Dickerson, our shepherd Pierre
   Geneves, and the anonymous reviewers for their detailed comments and
   suggestions. We also thank Kirshanthan Sundararajah, Raghav Malik, and
   Milind Kulkarni for their stimulating discussions, and Jianfei Gao for
   his help with plotting benchmark figures. This material is based upon
   work partially supported by Cisco Systems under award #23013611, and
   IARPA under contract #2019-19020700004.
CR Acar A, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3214303
   Acay C, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P740, DOI 10.1145/3453483.3454074
   [Anonymous], 2016, EMP-toolkit: Efficient MultiParty computation toolkit
   Barthe G, 2019, J AUTOM REASONING, V63, P1, DOI 10.1007/s10817-017-9441-5
   Barthe G, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1267, DOI 10.1145/2660267.2660283
   Beimel Amos, 2011, Coding and Cryptology. Proceedings of the Third International Workshop, IWCC 2011, P11, DOI 10.1007/978-3-642-20901-7_2
   BIRD RS, 1984, ACTA INFORM, V21, P239, DOI 10.1007/BF00264249
   Braun L, 2022, ACM T PRIV SECUR, V25, DOI 10.1145/3490390
   Büscher N, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P847, DOI 10.1145/3243734.3243786
   Cauligi S, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P174, DOI 10.1145/3314221.3314605
   Darais D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371118
   Demmler D, 2015, 22ND ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2015), DOI 10.14722/ndss.2015.23113
   Dunfield J, 2021, ACM COMPUT SURV, V54, DOI 10.1145/3450952
   Evans David, 2018, FDN TRENDS PRIVACY S, V2, P70, DOI 10.1561/3300000019
   Flanagan Cormac, 1993, SIGPLAN Conf. Programming Language Design and Impl. (PLDI'93), P237, DOI [DOI 10.1145/155090.155113, 10.1145/155090.155113]
   Goldreich O, 1996, J ACM, V43, P431, DOI 10.1145/233551.233553
   Goldreich O., 2019, Providing Sound Foundations for Cryptography: On the Work of Shafi Goldwasser and Silvio Micali, P307, DOI DOI 10.1145/3335741.3335755
   Goldreich Oded, 1987, Proceedings of the 19th Annual ACM Symposium on Theory of Computing. STOC'87, P182, DOI DOI 10.1145/28395.28416
   Hastings M, 2019, P IEEE S SECUR PRIV, P1220, DOI 10.1109/SP.2019.00028
   Hazay C, 2010, INFORM SEC CRYPT TEX, P3, DOI 10.1007/978-3-642-14303-8
   Hoekstra Matthew E, 2015, Intel SGX for Dummies (Intel SGX Design Objectives)
   Kiss Agnes, 2019, Proceedings on Privacy Enhancing Technologies, V2019, P187, DOI 10.2478/popets-2019-0026
   Laud Peeter, 2015, Cryptology and Information Security Series, V13
   Liu C, 2015, P IEEE S SECUR PRIV, P359, DOI 10.1109/SP.2015.29
   Liu C, 2013, P IEEE CSFW, P51, DOI 10.1109/CSF.2013.11
   Malik R, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1049, DOI 10.1145/3453483.3454094
   Malkhi D, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE 13TH USENIX SECURITY SYMPOSIUM, P287
   Maurer U, 2006, DISCRETE APPL MATH, V154, P370, DOI 10.1016/j.dam.2005.03.020
   Rastogi Aseem, 2019, Principles of Security and Trust. 8th International Conference, POST 2019. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2019. Proceedings: Lecture Notes in Computer Science (11426), P99, DOI 10.1007/978-3-030-17138-4_5
   Rastogi A, 2014, P IEEE S SECUR PRIV, P655, DOI 10.1109/SP.2014.48
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Stefanov E, 2018, J ACM, V65, DOI 10.1145/3177872
   Sweet I, 2023, Arxiv, DOI [arXiv:2302.10076, 10.22152/programming-journal.org/2023/7/14, DOI 10.22152/PROGRAMMING-JOURNAL.ORG/2023/7/14]
   Wei-Ngan Chin, 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P119, DOI 10.1145/154630.154643
   Wu David J., 2016, Proceedings on Privacy Enhancing Technologies, V2016, P335, DOI 10.1515/popets-2016-0043
   Yao A. C., 1982, 23rd Annual Symposium on Foundations of Computer Science, P160, DOI 10.1109/SFCS.1982.38
   Ye Qianchuan, 2023, Zenodo, DOI 10.5281/ZENODO.7806981
   Ye QC, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498713
   Yuyan Bao, 2021, GPCE 2021: Proceedings of the 20th ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences, P130, DOI 10.1145/3486609.3487205
   Zahur Samee, 2015, Cryptol. Eprint Arch, V2015, P1153
   Zdancewic Stephan Arthur, 2002, THESIS CORNELL U US
NR 41
TC 1
Z9 1
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 147
DI 10.1145/3591261
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900043
OA gold
DA 2024-07-18
ER

PT J
AU Aguirre, A
   Birkedal, L
AF Aguirre, Alejandro
   Birkedal, Lars
TI Step-Indexed Logical Relations for Countable Nondeterminism and
   Probabilistic Choice
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Functional Languages; Probabilistic programming; Logical Relations
ID LAMBDA-TERMS; MODEL
AB Developing denotational models for higher-order languages that combine probabilistic and nondeterministic choice is known to be very challenging. In this paper, we propose an alternative approach based on operational techniques. We study a higher-order language combining parametric polymorphism, recursive types, discrete probabilistic choice and countable nondeterminism. We define probabilistic generalizations of may- and must-termination as the optimal and pessimal probabilities of termination. Then we define step-indexed logical relations and show that they are sound and complete with respect to the induced contextual preorders. For may-equivalence we use step-indexing over the natural numbers whereas for must-equivalence we index over the countable ordinals. We then show than the probabilities of may- and must-termination coincide with the maximal and minimal probabilities of termination under all schedulers. Finally we derive the equational theory induced by contextual equivalence and show that it validates the distributive combination of the algebraic theories for probabilistic and nondeterministic choice.
C1 [Aguirre, Alejandro; Birkedal, Lars] Aarhus Univ, Abogade 34, DK-8200 Aarhus, Denmark.
C3 Aarhus University
RP Aguirre, A (corresponding author), Aarhus Univ, Abogade 34, DK-8200 Aarhus, Denmark.
EM alejandro@cs.au.dk; birkedal@cs.au.dk
OI Aguirre, Alejandro/0000-0001-6746-2734; Birkedal,
   Lars/0000-0003-1320-0098
FU Villum Investigator grant [25804]; Center for Basic Research in Program
   Verification (CPV); VILLUM Foundation
FX This research was supported in part by a Villum Investigator grant (no.
   25804), Center for Basic Research in Program Verification (CPV), from
   the VILLUM Foundation.
CR Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   APT KR, 1986, J ACM, V33, P724, DOI 10.1145/6490.6494
   Aumann Robert J., 1961, Illinois Journal of Mathematics, V5, P614
   Birkedal L, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:4)2013
   Birkedal Lars, 2012, 26 INT WORKSHOP21ST, V16, P107, DOI [10.4230/LIPIcs.CSL.2012.107, DOI 10.4230/LIPICS.CSL.2012.107]
   Bizjak A, 2015, LECT NOTES COMPUT SC, V9034, P279, DOI 10.1007/978-3-662-46678-0_18
   Bonchi Filippo, 2017, 28 INT C CONCURRENCY, V23, DOI 10.4230/LIPIcs.CONCUR.2017.23
   Bonchi Filippo, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785673
   Borgström J, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI [10.1145/2951913.2951942, 10.1145/3022670.2951942]
   Chadha R, 2010, LEIBNIZ INT PR INFOR, V8, P364, DOI 10.4230/LIPIcs.FSTTCS.2010.364
   COUSOT P, 1979, PAC J MATH, V82, P43, DOI 10.2140/pjm.1979.82.43
   Crubillé R, 2017, LECT NOTES COMPUT SC, V10201, P341, DOI 10.1007/978-3-662-54434-1_13
   Crubillé R, 2015, IEEE S LOG, P633, DOI 10.1109/LICS.2015.64
   Culpepper R, 2017, LECT NOTES COMPUT SC, V10201, P368, DOI 10.1007/978-3-662-54434-1_14
   Ehrhard T, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(1:3)2019
   Ehrhard T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158147
   Ehrhard T, 2014, ACM SIGPLAN NOTICES, V49, P309, DOI 10.1145/2535838.2535865
   Goy A, 2020, IEEE S LOG, P454, DOI 10.1145/3373718.3394795
   Heunen C, 2017, IEEE S LOG
   Jacobs B, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470678
   Jones C., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P186, DOI 10.1109/LICS.1989.39173
   Jung A., 1998, Electronic Notes in Theoretical Computer Science, V13, DOI 10.1016/S1571-0661(05)80216-6
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Kunen K., 2011, Set theory
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Lassen Soren Bogh, 1998, THESIS BRICS
   Mio M, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470717
   Mio Matteo, 2020, LIPIcs, V28, DOI [DOI 10.4230/LIPICS, 10.4230/LIPIcs.]
   Mislove M., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P350
   Morgan C., 1999, PGCL FORMAL REASONIN
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Pitts Andrew, 1998, Higher Order Operational Techniques in Semantics, P227
   Pitts Andrew, 2004, ADV TOPICS TYPES PRO, DOI [10.7551/mitpress/1104.003.0011, DOI 10.7551/MITPRESS/1104.003.0011]
   Plotkin G. D., 1976, SIAM Journal on Computing, V5, P452, DOI 10.1137/0205035
   SAHEBDJAHROMI N, 1980, THEOR COMPUT SCI, V12, P19, DOI 10.1016/0304-3975(80)90003-1
   Segala R, 2006, LECT NOTES COMPUT SC, V4137, P64
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Tassarotti J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290377
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P343, DOI 10.1145/2480359.2429111
   Vákár M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290349
   Varacca D, 2006, MATH STRUCT COMP SCI, V16, P87, DOI 10.1017/S0960129505005074
   Wand M, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236782
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
   YI W, 1992, IFIP TRANS C, V8, P47
   Zhang YZ, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498677
NR 48
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
AR 2
DI 10.1145/3571195
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500002
OA gold
DA 2024-07-18
ER

PT J
AU Bonchi, F
   Di Giorgio, A
   Santamaria, A
AF Bonchi, Filippo
   Di Giorgio, Alessandro
   Santamaria, Alessio
TI Deconstructing the Calculus of Relations with Tape Diagrams
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE calculus of relations; rig categories; string diagrams
ID ALGEBRAS; UNION
AB Rig categories with finite biproducts are categories with two monoidal products, where one is a biproduct and the other distributes over it. In this work we present tape diagrams, a sound and complete diagrammatic language for these categories, that can be intuitively thought as string diagrams of string diagrams. We test the effectiveness of our approach against the positive fragment of Tarski's calculus of relations.
C1 [Bonchi, Filippo; Di Giorgio, Alessandro; Santamaria, Alessio] Univ Pisa, Dipartimento Informat, Pisa, Italy.
   [Santamaria, Alessio] Univ Sussex, Brighton, E Sussex, England.
C3 University of Pisa; University of Sussex
RP Bonchi, F (corresponding author), Univ Pisa, Dipartimento Informat, Pisa, Italy.
EM filippo.bonchi@unipi.it; alessandro.digiorgio@phd.unipi.it;
   alessio.santamaria@di.unipi.it
RI Di Giorgio, Alessandro/I-3523-2012; Bonchi, Filippo/E-7955-2018
OI Santamaria, Alessio/0000-0001-7683-5221; Di Giorgio,
   Alessandro/0000-0002-6428-6461
FU Ministero dell'Universita e della Ricerca of Italy [201784YSZ5];
   Universita di Pisa [PRA-2022-2023 FM4HD]
FX The authors would like to thank Dusko Pavlovic and Pawel Sobocinski for
   the early discussions that eventually lead to tape diagrams. While
   writing the paper, we have received useful comments by Farzad Kianvash,
   Aleks Kissinger, Samuel Mimram, Chad Nester, Robin Piedeleu and Donald
   Yau. The authors would also like to thank the anonymous referees for
   their valuable comments and helpful suggestions. This work is supported
   by the Ministero dell'Universita e della Ricerca of Italy under Grant
   No. 201784YSZ5, PRIN2017 -ASPRA (Analysis of Program Analyses) and
   partially supported by the Universita di Pisa under Grant No.
   PRA-2022-2023 FM4HD.
CR Acclavio M, 2019, J AUTOM REASONING, V63, P911, DOI 10.1007/s10817-018-9466-4
   ANDREKA H, 1995, ALGEBRA UNIV, V33, P516, DOI 10.1007/BF01225472
   [Anonymous], 1971, COMBINATORIAL MATH I
   Backens M, 2015, THESIS U OXFORD
   Baez JC, 2015, THEOR APPL CATEG, V30, P836
   BAINBRIDGE ES, 1976, INFORM CONTROL, V31, P75, DOI 10.1016/S0019-9958(76)90390-9
   Baldan P, 2019, ACTA INFORM, V56, P61, DOI 10.1007/s00236-018-0314-0
   Bartlett B, 2015, Arxiv, DOI arXiv:1509.06811
   Bohm Corrado, 1979, Classics in software engineering, P11, DOI DOI 10.5555/1241515.1241517
   Boisseau G, 2022, LECT NOTES COMPUT SC, V13242, P101, DOI 10.1007/978-3-030-99253-8_6
   Bollig Benedikt, 2020, 31 INT C CONC THER C
   Bonchi F, 2022, Arxiv, DOI [arXiv:2210.09950, 10.48550/arXiv.2210.09950, DOI 10.48550/ARXIV.2210.09950]
   Bonchi F, 2022, J ACM, V69, DOI 10.1145/3502719
   Bonchi F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290338
   Bonchi F, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785877
   Bonchi F, 2015, ACM SIGPLAN NOTICES, V50, P515, DOI [10.1145/2775051.2676993, 10.1145/2676726.2676993]
   Bonchi Filippo, 2018, 27 EACSL ANN C COMPU, V119, DOI DOI 10.4230/LIPICS.CSL.2018.13
   Brunet P, 2015, IEEE S LOG, P68, DOI 10.1109/LICS.2015.17
   Bruni R, 2006, THEOR COMPUT SCI, V366, P98, DOI 10.1016/j.tcs.2006.07.005
   CARBONI A, 1987, J PURE APPL ALGEBRA, V49, P11, DOI 10.1016/0022-4049(87)90121-6
   Chandra A.K., 1977, P 9 ANN ACM S THEOR, P77, DOI [DOI 10.1145/800105.803397, 10.1145/800105.803397]
   Coecke B., 2017, Picturing Quantum Processes, DOI DOI 10.1017/9781316219317
   Coecke B, 2008, LECT NOTES COMPUT SC, V5126, P298, DOI 10.1007/978-3-540-70583-3_25
   Coecke B, 2018, ELECTRON P THEOR COM, P104, DOI 10.4204/EPTCS.266.7
   Coecke B, 2011, NEW J PHYS, V13, DOI 10.1088/1367-2630/13/4/043016
   Comfort C, 2020, Arxiv, DOI [arXiv:2010.13361, 10.48550/arXiv.2010.13361, DOI 10.48550/ARXIV.2010.13361]
   Duncan Ross, 2009, SEMANTICS QUANTUM CO
   Fong B, 2020, ELECTRON P THEOR COM, P196, DOI 10.4204/EPTCS.323.14
   Fong B, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P495, DOI 10.1145/2933575.2934556
   FOX T, 1976, COMMUN ALGEBRA, V4, P665, DOI 10.1080/00927877608822127
   Freyd P, 1990, North-Holland Mathematical Library, V39
   Fritz T, 2009, Arxiv, DOI [arXiv:0902.2554, 10.48550/arXiv.0902.2554, DOI 10.48550/ARXIV.0902.2554]
   Ghica DR, 2016, PROCEEDINGS OF THE 2016 16TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2016), P41, DOI 10.1109/FMCAD.2016.7886659
   Giusti Enrico, 2020, LIBER ABBACI, V79
   Harding John, 2008, PREPRINT
   Hasegawa M, 2008, LECT NOTES COMPUT SC, V4800, P367, DOI 10.1007/978-3-540-78127-1_20
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hoare T, 2011, J LOGIC ALGEBR PROGR, V80, P266, DOI 10.1016/j.jlap.2011.04.005
   Hodkinson I, 2000, ALGEBR UNIV, V43, P127, DOI 10.1007/s000120050150
   James RP, 2012, ACM SIGPLAN NOTICES, V47, P73, DOI 10.1145/2103621.2103667
   Johnson Niles, 2022, MONOIDAL CATEGORIES
   JOYAL A, 1991, ADV MATH, V88, P55, DOI 10.1016/0001-8708(91)90003-P
   Kaiser David, 2009, DRAWING THEORIES APA, DOI DOI 10.7208/9780226422657
   Kappe Tobias, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P856, DOI 10.1007/978-3-319-89884-1_30
   Lack S., 2004, Theory Appl. Categ., V13, P147
   Lafont Y, 2003, J PURE APPL ALGEBRA, V184, P257, DOI 10.1016/S0022-4049(03)00069-0
   Laplaza, 1972, Lecture Notes in Mathematics), V281, P29, DOI [10.1007/BFb0059555, DOI 10.1007/BFB0059555]
   MACLANE S, 1965, B AM MATH SOC, V71, P40, DOI 10.1090/S0002-9904-1965-11234-4
   MacLane S., 1978, CATEGORIES WORKING M, V5
   Melliés PA, 2006, LECT NOTES COMPUT SC, V4207, P1
   Monk JD., 1964, MICH MATH J, V11, P207, DOI [10.1307/mmj/1028999131, DOI 10.1307/MMJ/1028999131]
   Muroya K, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P749, DOI 10.1145/3209108.3209127
   Piedeleu R, 2021, LECT NOTES COMPUT SC, V12650, P469, DOI 10.1007/978-3-030-71995-1_24
   Pous Damien, 2018, LIPICS, V96, DOI DOI 10.4230/LIPICS
   Redko V.N., 1964, Ukrainskii Matematicheskii Zhurnal, V16, P120
   SAGIV Y, 1980, J ACM, V27, P633, DOI 10.1145/322217.322221
   Selinger P, 2011, LECT NOTES PHYS, V813, P289, DOI 10.1007/978-3-642-12821-9_4
   Selinger P, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(3:06)2012
   Selinger Peter, 1998, NOTE BAINBRIDGES POW
   Staton S, 2015, ACM SIGPLAN NOTICES, V50, P395, DOI [10.1145/2676726.2676999, 10.1145/2775051.2676999]
   Stollenwerk T, 2023, Arxiv, DOI arXiv:2204.01307
   TARSKI A, 1941, J SYMBOLIC LOGIC, V6, P73, DOI DOI 10.2307/2268577
   Toumi A, 2021, ELECTRON P THEOR COM, P132, DOI 10.4204/EPTCS.343.7
   Zanasi Fabio, 2015, INTERACTING HOPF AL
   Zhao C, 2021, QUANTUM-AUSTRIA, V5, DOI 10.22331/q-2021-06-04-466
NR 65
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571257
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500064
OA Green Submitted, Green Accepted, gold, Green Published
DA 2024-07-18
ER

PT J
AU Farzan, A
   Klumpp, D
   Podelski, A
AF Farzan, Azadeh
   Klumpp, Dominik
   Podelski, Andreas
TI Stratified Commutativity in Verification Algorithms for Concurrent
   Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Commutativity; Partial Order Reduction
ID PARTIAL-ORDER REDUCTION
AB The importance of exploiting commutativity relations in verification algorithms for concurrent programs is well-known. They can help simplify the proof and improve the time and space efficiency. This paper studies commutativity relations as a first-class object in the setting of verification algorithms for concurrent programs. A first contribution is a general framework for abstract commutativity relations. We introduce a general soundness condition for commutativity relations, and present a method to automatically derive sound abstract commutativity relations from a given proof. The method can be used in a verification algorithm based on abstraction refinement to compute a new commutativity relation in each iteration of the abstraction refinement loop. A second result is a general proof rule that allows one to combine multiple commutativity relations, with incomparable power, in a stratified way that preserves soundness and allows one to protect from the full power of the combined relations. We present an algorithm for the stratified proof rule that performs an optimal combination (in a sense made formal), enabling usage of stratified commutativity in algorithmic verifocation. We empirically evaluate the impact of abstract commutativity and stratified combination of commutativity relations on verification algorithms for concurrent programs.
C1 [Farzan, Azadeh] Univ Toronto, Toronto, ON, Canada.
   [Klumpp, Dominik; Podelski, Andreas] Univ Freiburg, Freiburg, Germany.
C3 University of Toronto; University of Freiburg
RP Farzan, A (corresponding author), Univ Toronto, Toronto, ON, Canada.
EM azadeh@cs.toronto.edu; klumpp@informatik.uni-freiburg.de;
   podelski@informatik.uni-freiburg.de
OI Farzan, Azadeh/0000-0001-9005-2653; Klumpp, Dominik/0000-0003-4885-0728
CR Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Beyer D, 2022, LECT NOTES COMPUT SC, V13244, P375, DOI 10.1007/978-3-030-99527-0_20
   Beyer D, 2019, INT J SOFTW TOOLS TE, V21, P1, DOI 10.1007/s10009-017-0469-y
   Cassez F, 2015, LECT NOTES COMPUT SC, V9450, P233, DOI 10.1007/978-3-662-48899-7_17
   Duc-Hiep Chu, 2014, Hardware and Software: Verification and Testing. 10th International Haifa Verification Conference, HVC 2014. Proceedings: LNCS 8855, P171, DOI 10.1007/978-3-319-13338-6_14
   Elmas T, 2009, ACM SIGPLAN NOTICES, V44, P2, DOI 10.1145/1594834.1480885
   Farzan A, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P506, DOI 10.1145/3519939.3523727
   Farzan A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371081
   Farzan A, 2019, LECT NOTES COMPUT SC, V11561, P200, DOI 10.1007/978-3-030-25540-4_11
   Farzan Azadeh, 2023, APPENDIX STRATIFIED
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Godefroid P., 1996, Lecture Notes in Computer Science, V1032, DOI [DOI 10.1007/3-540-60761-7, 10.1007/3-540-60761-7_31]
   Kahlon V, 2009, LECT NOTES COMPUT SC, V5643, P398, DOI 10.1007/978-3-642-02658-4_31
   Klumpp D, 2022, LECT NOTES COMPUT SC, V13244, P479, DOI 10.1007/978-3-030-99527-0_35
   Koskinen E, 2021, LECT NOTES COMPUT SC, V12597, P81, DOI 10.1007/978-3-030-67067-2_5
   Kragl B, 2018, LECT NOTES COMPUT SC, V10981, P79, DOI 10.1007/978-3-319-96145-3_5
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Ochmanski Edward, 1995, BOOK TRACES, P167, DOI [10.1142/9789814261456_0006, DOI 10.1142/9789814261456_0006]
   Wachter B, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P210
NR 19
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571242
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500049
OA gold
DA 2024-07-18
ER

PT J
AU Kallas, K
   Zhang, HR
   Alur, R
   Angel, S
   Liu, V
AF Kallas, Konstantinos
   Zhang, Haoran
   Alur, Rajeev
   Angel, Sebastian
   Liu, Vincent
TI Executing Microservice Applications on Serverless, Correctly
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE microservices; stateful serverless; transactions
AB While serverless platforms substantially simplify the provisioning, configuration, and management of cloud applications, implementing correct services on top of these platforms can present significant challenges to programmers. For example, serverless infrastructures introduce a host of failure modes that are not present in traditional deployments. Individual serverless instances can fail while others continue to make progress, correct but slow instances can be killed by the cloud provider as part of resource management, and providers will often respond to such failures by re-executing requests. For functions with side-effects, these scenarios can create behaviors that are not observable in serverful deployments.
   In this paper, we propose mu 2sls, a framework for implementing microservice applications on serverless using standard Python code with two extra primitives: transactions and asynchronous calls. Our framework orchestrates user-written services to address several challenges, such as failures and re-executions, and provides formal guarantees that the generated serverless implementations are correct. To that end, we present a novel service specification abstraction and formalization of serverless implementations that facilitate reasoning about the correctness of a given application's serverless implementation. This formalization forms the basis of the mu 2sls prototype, which we then use to develop a few real-world microservice applications and show that the performance of the generated serverless implementations achieves significant scalability (3-5x the throughput of a sequential implementation) while providing correctness guarantees in the context of faults, re-execution, and concurrency.
C1 [Kallas, Konstantinos; Zhang, Haoran; Alur, Rajeev; Angel, Sebastian; Liu, Vincent] Univ Penn, Philadelphia, PA 19104 USA.
   [Angel, Sebastian] Microsoft Res, Redmond, WA USA.
C3 University of Pennsylvania; Microsoft
RP Kallas, K (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM kallas@seas.upenn.edu; haorz@seas.upenn.edu; alur@cis.upenn.edu;
   sebastian.angel@cis.upenn.edu; liuv@seas.upenn.edu
RI Zhang, Haoran/KEJ-6929-2024; liu, V/KIA-9904-2024
OI Zhang, Haoran/0000-0002-5759-5637; ALUR, RAJEEV/0000-0003-1733-7083;
   Liu, Vincent/0000-0001-7683-208X; Kallas,
   Konstantinos/0000-0002-8984-6648
FU NSF [CCF 2124184]
FX We thank the POPL reviewers for their thoughtful comments, which
   improved the content and presentation of this work. We also want to
   thank the anonymous OOPSLA reviewers for identifying several issues in
   our formalism in a prior version of this work. This work was partially
   supported by NSF award CCF 2124184.
CR Abadi M, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P63, DOI 10.1145/1328438.1328449
   Alpernas K, 2021, PROCEEDINGS OF THE 2021 ACM SYMPOSIUM ON CLOUD COMPUTING (SOCC '21), P92, DOI 10.1145/3472883.3486977
   Amazon, 2020, AWS STEP FUNCT
   Apple, 2022, ABOUT US
   Armstrong J, 1997, ACM SIGPLAN NOTICES, V32, P196, DOI 10.1145/258949.258967
   AWS, 2022, AWS Lambda
   Boner Jonas, 2020, STATEFUL SERVERLESS
   Burckhardt S, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485510
   Cloud Flare, 2020, US DUR OBJ CLOUDFL D
   CloudFlare, 2020, WORK DUR OBJ BET NEW
   Duplyakin D, 2019, PROCEEDINGS OF THE 2019 USENIX ANNUAL TECHNICAL CONFERENCE, P1
   Fouladi S, 2019, PROCEEDINGS OF THE 2019 USENIX ANNUAL TECHNICAL CONFERENCE, P475
   Fouladi S, 2017, PROCEEDINGS OF NSDI '17: 14TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P363
   Gan Y, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P3, DOI 10.1145/3297858.3304013
   Garcia Lopez Pedro, 2020, DEBS '20: Proceedings of the 14th ACM International Conference on Distributed and Event-based Systems, P3, DOI 10.1145/3401025.3401731
   Geller A., 2011, Proceedings of the 2nd ACM Symposium on Cloud Computing, ser. SOCC'11, Cascais, P16, DOI [DOI 10.1145/2038916.2038932, 10.1145/2038916.2038932]
   Google, 2022, Google cloud functions
   Haller P., 2012, Proceedings of the 2nd edition on Programming systems, languages and applications based on actors, agents, and decentralized control abstractions, P1, DOI DOI 10.1145/2414639.2414641
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Hypercorn, 2022, HYP
   Jagannathan S, 2005, SCI COMPUT PROGRAM, V57, P164, DOI 10.1016/j.scico.2005.03.001
   Jangda A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360575
   Jia ZP, 2021, PROCEEDINGS OF THE 28TH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, SOSP 2021, P691, DOI 10.1145/3477132.3483541
   Jia ZP, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P152, DOI 10.1145/3445814.3446701
   Jonas E., 2019, arXiv, DOI DOI 10.48550/ARXIV.1902.03383
   Jonas E, 2017, PROCEEDINGS OF THE 2017 SYMPOSIUM ON CLOUD COMPUTING (SOCC '17), P445, DOI 10.1145/3127479.3128601
   Klimovic A, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P427
   Knative, 2022, About us
   Lesani M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527324
   Meiklejohn CS, 2021, PROCEEDINGS OF THE 2021 ACM SYMPOSIUM ON CLOUD COMPUTING (SOCC '21), P388, DOI 10.1145/3472883.3487005
   Microsoft Azure, 2022, AZ FUNCT
   Minikube, 2022, MIN
   Moore KF, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P51, DOI 10.1145/1328438.1328448
   Nazir A, 2008, IMC'08: PROCEEDINGS OF THE 2008 ACM SIGCOMM INTERNET MEASUREMENT CONFERENCE, P43
   Panda A, 2017, PROCEEDINGS OF THE 16TH WORKSHOP ON HOT TOPICS IN OPERATING SYSTEMS (HOTOS 2017), P30, DOI 10.1145/3102980.3102986
   Pierce B. C., 2010, Software Foundations
   Quart, 2022, QUART
   Ramalingam G, 2013, ACM SIGPLAN NOTICES, V48, P249, DOI 10.1145/2480359.2429100
   Ray, 2022, RAY COR FAST SIMPL A
   Sreekanti V, 2020, PROC VLDB ENDOW, V13, P2438, DOI 10.14778/3407790.3407836
   Sreekanti V, 2020, PROCEEDINGS OF THE FIFTEENTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS'20), DOI 10.1145/3342195.3387535
   Temporal, 2022, US
   Tene Gil, 2022, WRK2
   Vitek J, 2004, LECT NOTES COMPUT SC, V2986, P249
   Waye L, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110280
   Wen Zhang, 2020, SoCC '20: Proceedings of the 11th ACM Symposium on Cloud Computing, P328, DOI 10.1145/3419111.3421277
   Zhang HR, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P1187
NR 47
TC 0
Z9 1
U1 1
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571206
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500013
OA gold
DA 2024-07-18
ER

PT J
AU Vale, AO
   Shao, Z
   Chen, YX
AF Vale, Arthur Oliveira
   Shao, Zhong
   Chen, Yixuan
TI A Compositional Theory of Linearizability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE linearizability; game semantics; concurrency; program logic
ID CONCURRENT SEPARATION LOGIC; FULL ABSTRACTION; GAME SEMANTICS;
   REFINEMENT
AB Compositionality is at the core of programming languages research and has become an important goal toward scalable verification of large systems. Despite that, there is no compositional account of linearizability, the gold standard of correctness for concurrent objects. In this paper, we develop a compositional semantics for linearizable concurrent objects. We start by showcasing a common issue, which is independent of linearizability, in the construction of compositional models of concurrent computation: interaction with the neutral element for composition can lead to emergent behaviors, a hindrance to compositionality. Category theory provides a solution for the issue in the form of the Karoubi envelope. Surprisingly, and this is the main discovery of our work, this abstract construction is deeply related to linearizability and leads to a novel formulation of it. Notably, this new formulation neither relies on atomicity nor directly upon happens-before ordering and is only possible because of compositionality, revealing that linearizability and compositionality are intrinsically related to each other. We use this new, and compositional, understanding of linearizability to revisit much of the theory of linearizability, providing novel, simple, algebraic proofs of the locality property and of an analogue of the equivalence with observational refinement. We show our techniques can be used in practice by connecting our semantics with a simple program logic that is nonetheless sound concerning this generalized linearizability.
C1 [Vale, Arthur Oliveira; Shao, Zhong; Chen, Yixuan] Yale Univ, New Haven, CT 06520 USA.
C3 Yale University
RP Vale, AO (corresponding author), Yale Univ, New Haven, CT 06520 USA.
EM arthur.oliveiravale@yale.edu; zhong.shao@yale.edu; yixuan.chen@yale.edu
OI Chen, Yixuan/0000-0001-8659-8493; Oliveira Vale,
   Arthur/0000-0003-1091-7560; Shao, Zhong/0000-0001-8184-7649
FU NSF [2019285, 1763399, 2118851]; Defense Advanced Research Projects
   Agency (DARPA); Naval Information Warfare Center Pacific (NIWC Pacific)
   [N66001-21-C-4018]; Division of Computing and Communication Foundations;
   Direct For Computer & Info Scie & Enginr [2118851] Funding Source:
   National Science Foundation
FX We would like to thank the anonymous reviewers for their helpful
   feedback. This material is based upon work supported in part by NSF
   grants 2019285, 1763399, and 2118851, and by the Defense Advanced
   Research Projects Agency (DARPA) and Naval Information Warfare Center
   Pacific (NIWC Pacific) under Contract No. N66001-21-C-4018. Any
   opinions, findings, and conclusions or recommendations expressed in this
   material are those of the authors and do not necessarily reflect the
   views of the funding agencies.
CR Abramsky S., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P431, DOI 10.1109/LICS.1999.782638
   Abramsky S, 2000, INFORM COMPUT, V163, P409, DOI [10.1006/inco.2000.2930, 10.1006/inco2000.2930]
   [Anonymous], 1999, COMPUTATIONAL LOGIC, DOI DOI 10.1007/978-3-642-58622-4
   Birkedal Lars, 2021, Proceedings of the ACM on Programming Languages, V5, DOI 10.1145/3473586
   BLASS A, 1992, ANN PURE APPL LOGIC, V56, P183, DOI 10.1016/0168-0072(92)90073-9
   Castañeda A, 2015, LECT NOTES COMPUT SC, V9363, P420, DOI 10.1007/978-3-662-48653-5_28
   Castellan S, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(3:35)2017
   Cerone A, 2014, LECT NOTES COMPUT SC, V8573, P98
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Feng XY, 2007, LECT NOTES COMPUT SC, V4421, P173
   Filipovic I, 2010, THEOR COMPUT SCI, V411, P4379, DOI 10.1016/j.tcs.2010.09.021
   Fu M, 2010, LECT NOTES COMPUT SC, V6269, P388, DOI 10.1007/978-3-642-15375-4_27
   Gaucher Philippe, 2020, Cahiers de Topologie et Geometrie Differentielle Categoriques LXI, V2, P208
   Ghica Dan R., 2013, Computation, Logic, Games, and Quantum Foundations. The Many Facets of Samson Abramsky. Essays Dedicated to Samson Abramsky on the Occasion of His 60th Birthday: LNCS 7860, P52, DOI 10.1007/978-3-642-38164-5_5
   Ghica DR, 2004, LECT NOTES COMPUT SC, V2987, P211
   Goubault Eric, 2018, 22 INT C PRINCIPLES, V125, P28, DOI [10.4230/LIPIcs.OPODIS.2018.28, DOI 10.4230/LIPICS.OPODIS.2018.28]
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Guerraoui Rachid, 2014, Networked Systems. Second International Conference, NETYS 2014. Revised Selected Papers. LNCS: 8593, P57, DOI 10.1007/978-3-319-09581-3_5
   HAYASHI S, 1985, THEOR COMPUT SCI, V41, P95, DOI 10.1016/0304-3975(85)90062-3
   Hemed N, 2015, LECT NOTES COMPUT SC, V9363, P371, DOI 10.1007/978-3-662-48653-5_25
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Hoofman R., 1995, Mathematical Structures in Computer Science, V5, P1, DOI 10.1017/S096012950000061X
   Hyland JME, 2000, INFORM COMPUT, V163, P285, DOI [10.1006/inco.2000.2917, 10.1006/inco2000.2917]
   Hyland Martin, 1997, SEMANTICS LOGICS COM, P131, DOI [10.1017/CBO9780511526619.005, DOI 10.1017/CBO9780511526619.005]
   Hyland M, 2006, ELECTRON NOTES THEOR, V161, P43, DOI 10.1016/j.entcs.2006.04.024
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Khyzha A, 2017, LECT NOTES COMPUT SC, V10201, P639, DOI 10.1007/978-3-662-54434-1_24
   Khyzha A, 2016, LECT NOTES COMPUT SC, V9995, P426, DOI 10.1007/978-3-319-48989-6_26
   Koenig J, 2020, IEEE S LOG, P633, DOI 10.1145/3373718.3394799
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Lesani M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527324
   Liang HJ, 2016, ACM SIGPLAN NOTICES, V51, P385, DOI 10.1145/2914770.2837635
   Melliès PA, 2007, LECT NOTES COMPUT SC, V4703, P395
   Melliès PA, 2020, IEEE S LOG, P742, DOI 10.1145/3373718.3394762
   Mellies PA, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290336
   Moens M-A., 2002, Cahiers de Topologie et Gomtrie Diffrentielle Catgoriques, V43, P163
   Murawski AS, 2019, J LOG ALGEBR METHODS, V104, P86, DOI 10.1016/j.jlamp.2019.01.002
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   Neiger G., 1994, Proceedings of the Thirteenth Annual ACM Symposium on Principles of Distributed Computing, DOI 10.1145/197917.198176
   Piedeleu Robin, 2019, Ph.D. Dissertation.
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Ghica DR, 2019, Arxiv, DOI arXiv:1908.04291
   Reddy U. S., 1996, LISP and Symbolic Computation, V9, P7, DOI 10.1007/BF01806032
   Reddy Uday S., 1993, Technical Report
   Rideau S, 2011, IEEE S LOG, P409, DOI 10.1109/LICS.2011.13
   Schellhorn G, 2014, ACM T COMPUT LOG, V15, DOI 10.1145/2629496
   Shao Zhong, 2022, YALEUDCSTR1564
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Vafeiadis V., 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P129, DOI 10.1145/1122971.1122992
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   Vale AO, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498703
   Veith Helmut, 2016, International Proceedings in Informatics (LIPIcs),, V59, DOI [10.4230/LIPIcs.CONCUR.2016.6, DOI 10.4230/LIPICS.CONCUR.2016.6]
NR 57
TC 3
Z9 3
U1 2
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571231
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500038
OA gold
DA 2024-07-18
ER

PT J
AU Kalita, PK
   Muduli, SK
   D'Antoni, L
   Reps, T
   Roy, S
AF Kalita, Pankaj Kumar
   Muduli, Sujit Kumar
   D'Antoni, Loris
   Reps, Thomas
   Roy, Subhajit
TI Synthesizing Abstract Transformers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE abstract transformer; program synthesis; DSL
AB This paper addresses the problem of creating abstract transformers automatically. The method we present automates the construction of static analyzers in a fashion similar to the way yacc automates the construction of parsers. Our method treats the problem as a program-synthesis problem. The user provides specifications of (i) the concrete semantics of a given operation op, (ii) the abstract domain A to be used by the analyzer, and (iii) the semantics of a domain-specific language L in which the abstract transformer is to be expressed. As output, our method creates an abstract transformer for op in abstract domain A, expressed in L (an "L-transformer for op over A"). Moreover, the abstract transformer obtained is a most-precise L-transformer for op over A; that is, there is no other L-transformer for op over A that is strictly more precise.
   We implemented our method in a tool called AMURTH. We used AMURTH to create sets of replacement abstract transformers for those used in two existing analyzers, and obtained essentially identical performance. However, when we compared the existing transformers with the transformers obtained using Amurth, we discovered that four of the existing transformers were unsound, which demonstrates the risk of using manually created transformers.
C1 [Kalita, Pankaj Kumar; Muduli, Sujit Kumar; Roy, Subhajit] Indian Inst Technol, Kanpur, Uttar Pradesh, India.
   [D'Antoni, Loris; Reps, Thomas] Univ Wisconsins, Madison, WI USA.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Kanpur
RP Kalita, PK (corresponding author), Indian Inst Technol, Kanpur, Uttar Pradesh, India.
EM pkalita@cse.iitk.ac.in; smuduli@cse.iitk.ac.in; ldantoni@wisc.edu;
   reps@cs.wisc.edu; subhajit@cse.iitk.ac.in
OI D'Antoni, Loris/0000-0001-9625-4037; Muduli, Sujit/0000-0002-3506-6742
FU Microsoft Faculty Fellowship; NSF [1420866, 1763871, 1750965, 1918211,
   2023222]; ONR [N00014-17-1-2889, N00014-19-1-2318]
FX Supported, in part, by a gift from Rajiv and Ritu Batra; by multiple
   Facebook Research Awards; by a Microsoft Faculty Fellowship; by NSF
   under grants 1420866, 1763871, 1750965, 1918211, and 2023222; and by ONR
   under grants N00014-17-1-2889 and N00014-19-1-2318. Any opinions,
   findings, and conclusions or recommendations expressed in this
   publication are those of the authors, and do not necessarily reflect the
   views of the sponsoring entities.
CR Amadini R, 2017, LECT NOTES COMPUT SC, V10205, P41, DOI 10.1007/978-3-662-54577-5_3
   Astorga A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485481
   Beyer Dirk, 2009, Proceedings of the 2009 9th International Conference Formal Methods in Computer-Aided Design (FMCAD), P25, DOI 10.1109/FMCAD.2009.5351147
   Bielik P, 2017, LECT NOTES COMPUT SC, V10426, P233, DOI 10.1007/978-3-319-63387-9_12
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Elder M, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2651361
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Kalita PK, 2021, Arxiv, DOI [arXiv:2105.00493, 10.48550/ARXIV.2105.00493, DOI 10.48550/ARXIV.2105.00493]
   Kalita Pankaj Kumar, 2022, Synthesizing Abstract Transformers, DOI [10.5281/zenodo.7092952Softwareartifactofthecurrentwork, DOI 10.5281/ZENODO.7092952SOFTWAREARTIFACTOFTHECURRENTWORK]
   Lahiri SK, 2006, LECT NOTES COMPUT SC, V4144, P424, DOI 10.1007/11817963_39
   Lahiri SK, 2005, LECT NOTES COMPUT SC, V3576, P24
   Lahiri S, 2022, PROCEEDINGS OF THE 31ST ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, ISSTA 2022, P352, DOI 10.1145/3533767.3534381
   Li CM, 2009, FRONT ARTIF INTEL AP, V185, P613, DOI 10.3233/978-1-58603-929-5-613
   Madsen M, 2014, LECT NOTES COMPUT SC, V8409, P197
   Miltner A, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1, DOI 10.1145/3385412.3385967
   Muduli SK, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563332
   Navas J.A., 2012, LECT NOTES COMPUTER, V7705, P115, DOI DOI 10.1007/978-3-642-35182-2_9
   Pandey A, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P228, DOI 10.1145/3293882.3330554
   Prabhu S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1203, DOI 10.1145/3453483.3454104
   Reps T, 2004, LECT NOTES COMPUT SC, V2937, P252
   Reps T, 2016, LECT NOTES COMPUT SC, V9583, P3, DOI 10.1007/978-3-662-49122-5_1
   Scherpelz ER, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P135, DOI 10.1145/1250734.1250750
   Solar-Lezama Armando, 2013, International Journal on Software Tools for Technology Transfer, V15, P475, DOI 10.1007/s10009-012-0249-7
   Thakur A, 2015, ELECTRON NOTES THEOR, V311, P15, DOI 10.1016/j.entcs.2015.02.003
   Thakur Aditya, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P174, DOI 10.1007/978-3-642-31424-7_17
   Thakur A, 2012, LECT NOTES COMPUT SC, V7460, P111, DOI 10.1007/978-3-642-33125-1_10
   Wang JB, 2021, PROC INT CONF SOFTW, P810, DOI 10.1109/ICSE43902.2021.00079
   Wang XY, 2018, LECT NOTES COMPUT SC, V10981, P407, DOI 10.1007/978-3-319-96145-3_22
   Warren H., 2012, Hacker's delight, V2nd
NR 29
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 171
DI 10.1145/3563334
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200048
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Shi, QK
   Wang, YC
   Yao, PS
   Zhang, C
AF Shi, Qingkai
   Wang, Yongchao
   Yao, Peisen
   Zhang, Charles
TI Indexing the Extended Dyck-CFL Reachability for Context-Sensitive
   Program Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Dyck-CFL reachability; context sensitivity; reachability indexing scheme
ID QUERIES; GRAPH; RECOGNITION; ALGORITHM; CLOSURE
AB Many context-sensitive dataflow analyses can be formulated as an extended Dyck-CFL reachability problem, where function calls and returns are modeled as partially matched parentheses. Unfortunately, despite many works on the standard Dyck-CFL reachability problem, solving the extended version is still of quadratic space complexity and nearly cubic time complexity, significantly limiting the scalability of program analyses. This paper, for the first time to the best of our knowledge, presents a cheap approach to transforming the extended Dyck-CFL reachability problem to conventional graph reachability, a much easier and well-studied problem. This transformation allows us to benefit from recent advances in reachability indexing schemes, making it possible to answer any reachability query in a context-sensitive dataflow analysis within almost constant time plus only a few extra spaces. We have implemented our approach in two common context-sensitive dataflow analyses, one determines pointer alias relations and the other tracks information flows. Experimental results demonstrate that, compared to their original analyses, we can achieve orders of magnitude (10(2)x to 10(5)x) speedup at the cost of only a moderate space overhead. Our implementation is publicly available.
C1 [Shi, Qingkai] Ant Grp, Hangzhou, Peoples R China.
   [Wang, Yongchao; Yao, Peisen; Zhang, Charles] Hong Kong Univ Sci & Technol, Hong Kong, Peoples R China.
C3 Hong Kong University of Science & Technology
RP Shi, QK (corresponding author), Ant Grp, Hangzhou, Peoples R China.
EM qingkai.sqk@antgroup.com; ywanghz@cse.ust.hk; pyao@cse.ust.hk;
   charlesz@cse.ust.hk
OI Wang, Yongchao/0000-0003-0218-8935; Shi, Qingkai/0000-0002-8297-8998
CR Aho A. V., 1972, SIAM Journal on Computing, V1, P131, DOI 10.1137/0201008
   Alur R, 2005, ACM T PROGR LANG SYS, V27, P786, DOI 10.1145/1075382.1075387
   Alur Rajeev, 2004, P 36 ANN ACM S THEOR, P202, DOI [10.1145/1007352.1007390, DOI 10.1145/1007352.1007390]
   [Anonymous], 2010, SIGMOD, DOI [10.1145/1807167.1807183, DOI 10.1145/1807167.1807183]
   [Anonymous], 2012, P 2012 ACM SIGMOD IN
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Arzt S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P288, DOI 10.1145/2568225.2568243
   Bouros P, 2009, LECT NOTES COMPUT SC, V5566, P398, DOI 10.1007/978-3-642-02279-1_29
   Cai C, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P196, DOI 10.1145/3192366.3192378
   Chatterjee K, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158118
   Chaudhuri S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P159, DOI 10.1145/1328438.1328460
   Chen L., 2005, P VLDB ENDOWMENT, P493, DOI DOI 10.5555/1083592.1083651
   Chen YJ, 2008, PROC INT CONF DATA, P893, DOI 10.1109/ICDE.2008.4497498
   Cheney James, 2013, In Search of Elegance in the Theory and Practice of Computation. Essays Dedicated to Peter Buneman: LNCS 8000, P193, DOI 10.1007/978-3-642-41660-6_9
   Cherem S, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P480, DOI 10.1145/1250734.1250789
   Cohen E, 2003, SIAM J COMPUT, V32, P1338, DOI 10.1137/S0097539702403098
   COMER D, 1979, COMPUT SURV, V11, P121, DOI 10.1145/356770.356776
   Dietrich J, 2015, ACM SIGPLAN NOTICES, V50, P535, DOI [10.1145/2858965.2814307, 10.1145/2814270.2814307]
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Gauch H., 2002, Scientific Method in Practice, P269, DOI [DOI 10.1017/CBO9780511815034.010, DOI 10.1017/CBO9780511815034]
   HABIB M, 1993, DISCRETE MATH, V111, P289, DOI 10.1016/0012-365X(93)90164-O
   Han WS, 2013, 19TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING (KDD'13), P77
   Hassan MS, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1183, DOI 10.1145/2882903.2882933
   Henning JL, 2000, COMPUTER, V33, P28, DOI 10.1109/2.869367
   Jin RM, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P813
   Jin RM, 2011, ACM T DATABASE SYST, V36, DOI 10.1145/1929934.1929941
   Kastrinis G, 2013, ACM SIGPLAN NOTICES, V48, P423, DOI 10.1145/2499370.2462191
   Kjelstrom AH, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498673
   Kodumal J, 2004, ACM SIGPLAN NOTICES, V39, P207, DOI 10.1145/996893.996867
   Lerch J, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P98, DOI 10.1145/2635868.2635878
   Li L, 2013, PROCEEDINGS OF THE ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT (ISMM '13), P85
   Li L, 2011, PROCEEDINGS OF THE 8TH INTERNATIONAL SYMPOSIUM ON COMPUTER SCIENCE IN SPORT (IACSS2011), P343
   Li YB, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434340
   Li YB, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P780, DOI 10.1145/3385412.3386021
   Melski D, 2000, THEOR COMPUT SCI, V248, P29, DOI 10.1016/S0304-3975(00)00049-9
   Milanova A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428246
   Neo4j, 2022, Graph data platform
   Peng Y, 2020, PROC VLDB ENDOW, V13, P812, DOI 10.14778/3380750.3380753
   Pratikakis P, 2006, LECT NOTES COMPUT SC, V4134, P88
   Qu HY, 2006, PROCEEDINGS OF THE SECOND IASTED INTERNATIONAL CONFERENCE ON TELEHEALTH, P75
   Rehof J, 2001, ACM SIGPLAN NOTICES, V36, P54, DOI 10.1145/373243.360208
   Reps T., 1994, SIGSOFT Software Engineering Notes, V19, P11, DOI 10.1145/195274.195287
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T., 1995, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics- Based Program Manipulation. PEPM'95, P1, DOI 10.1145/215465.215466
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Reps T, 2000, ACM T PROGR LANG SYS, V22, P162, DOI 10.1145/345099.345137
   Rice M, 2010, PROC VLDB ENDOW, V4, P69, DOI 10.14778/1921071.1921074
   Roditty L, 2008, SIAM J COMPUT, V37, P1455, DOI 10.1137/060650271
   Schubert PD, 2019, LECT NOTES COMPUT SC, V11428, P393, DOI 10.1007/978-3-030-17465-1_22
   Seufert S, 2013, PROC INT CONF DATA, P1009, DOI 10.1109/ICDE.2013.6544893
   Shang Lei, 2012, P 10 INT S CODE GENE, P264
   Shi QK, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P693, DOI 10.1145/3192366.3192418
   SIMON K, 1988, THEOR COMPUT SCI, V58, P325, DOI 10.1016/0304-3975(88)90032-1
   Smaragdakis Y, 2014, ACM SIGPLAN NOTICES, V49, P485, DOI [10.1145/2666356.2594320, 10.1145/2594291.2594320]
   Späth J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290361
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sui YL, 2020, IEEE T SOFTWARE ENG, V46, P812, DOI 10.1109/TSE.2018.2869336
   Sui YL, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P265, DOI 10.1145/2892208.2892235
   Sui YL, 2014, IEEE T SOFTWARE ENG, V40, P107, DOI 10.1109/TSE.2014.2302311
   Tang H, 2015, ACM SIGPLAN NOTICES, V50, P83, DOI [10.1145/2676726.2676997, 10.1145/2775051.2676997]
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Urma RG, 2015, SCI COMPUT PROGRAM, V97, P127, DOI 10.1016/j.scico.2013.11.010
   VALDES J, 1982, SIAM J COMPUT, V11, P298, DOI 10.1137/0211023
   Valstar LDJ, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P345, DOI 10.1145/3035918.3035955
   Wang K, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P389, DOI 10.1145/3037697.3037744
   Wei H, 2014, PROC VLDB ENDOW, V7, P1191, DOI 10.14778/2732977.2732992
   Weiss C, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P586, DOI 10.1109/ICSE.2015.75
   Weiss C, 2008, PROC VLDB ENDOW, V1, P1008, DOI 10.14778/1453856.1453965
   Williams VV, 2012, STOC'12: PROCEEDINGS OF THE 2012 ACM SYMPOSIUM ON THEORY OF COMPUTING, P887
   Xu GQ, 2009, LECT NOTES COMPUT SC, V5653, P98
   Yamaguchi F, 2014, P IEEE S SECUR PRIV, P590, DOI 10.1109/SP.2014.44
   Yan Dacong, 2011, P 2011 INT S SOFTW T, P155, DOI [10.1145/2001420.2001440, DOI 10.1145/2001420.2001440]
   YANNAKAKIS M, 1990, PROCEEDINGS OF THE NINTH ACM SIGACT-SIGMOD-SIGART SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P230, DOI 10.1145/298514.298576
   Yildirim H, 2010, PROC VLDB ENDOW, V3, P276, DOI 10.14778/1920841.1920879
   YOUNGER DH, 1967, INFORM CONTROL, V10, P189, DOI 10.1016/S0019-9958(67)80007-X
   Yuan H, 2009, LECT NOTES COMPUT SC, V5502, P175
   Zhang QR, 2013, ACM SIGPLAN NOTICES, V48, P435, DOI 10.1145/2499370.2462159
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P344, DOI 10.1145/3093333.3009848
   Zhang QR, 2014, ACM SIGPLAN NOTICES, V49, P829, DOI [10.1145/2660193.2660213, 10.1145/2714064.2660213]
   Zheng X, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P197, DOI 10.1145/1328438.1328464
   Zhou JF, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P375, DOI 10.1145/3035918.3035927
   Zhou L, 2018, PROC INT CONF PARAL, DOI 10.1145/3225058.3225136
   Zhu AD, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1323, DOI 10.1145/2588555.2612181
   Zou L, 2014, INFORM SYST, V40, P47, DOI 10.1016/j.is.2013.10.003
NR 84
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 176
DI 10.1145/3563339
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200053
OA gold
DA 2024-07-18
ER

PT J
AU Campion, M
   Dalla Preda, M
   Giacobazzi, R
AF Campion, Marco
   Dalla Preda, Mila
   Giacobazzi, Roberto
TI Partial (In)Completeness in Abstract Interpretation Limiting the
   Imprecision in Program Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Abstract Interpretation; Abstract Domain; Program Analysis; Partial
   Completeness
AB Imprecision is inherent in any decidable (sound) approximation of undecidable program properties. In abstract interpretation this corresponds to the release of false alarms, e.g., when it is used for program analysis and program verification. As all alarming systems, a program analysis tool is credible when few false alarms are reported. As a consequence, we have to live together with false alarms, but also we need methods to control them. As for all approximation methods, also for abstract interpretation we need to estimate the accumulated imprecision during program analysis. In this paper we introduce a theory for estimating the error propagation in abstract interpretation, and hence in program analysis. We enrich abstract domains with a weakening of a metric distance. This enriched structure keeps coherence between the standard partial order relating approximated objects by their relative precision and the effective error made in this approximation. An abstract interpretation is precise when it is complete. We introduce the notion of partial completeness as a weakening of precision. In partial completeness the abstract interpreter may produce a bounded number of false alarms. We prove the key recursive properties of the class of programs for which an abstract interpreter is partially complete with a given bound of imprecision. Then, we introduce a proof system for estimating an upper bound of the error accumulated by the abstract interpreter during program analysis. Our framework is general enough to be instantiated to most known metrics for abstract domains.
C1 [Campion, Marco; Dalla Preda, Mila; Giacobazzi, Roberto] Univ Verona, Dipartimento Informat, Verona, Italy.
C3 University of Verona
RP Campion, M (corresponding author), Univ Verona, Dipartimento Informat, Verona, Italy.
EM marco.campion@univr.it; mila_dallapreda@univr.it;
   roberto.giacobazzi@univr.it
OI Campion, Marco/0000-0002-1099-3494; Dalla Preda,
   Mila/0000-0003-2761-4347; GIACOBAZZI, Roberto/0000-0002-9582-3960
FU grant PRIN2017 "AnalysiS of PRogram Analyses (ASPRA)" - Italian Ministry
   of Education, Universities and Research (MIUR) [201784YSZ5]; project
   "Dipartimenti di Eccellenza 2018-2022" - Italian Ministry of Education,
   Universities and Research (MIUR)
FX We wish to thank the anonymous reviewers of POPL2022 for their detailed
   comments. This work has been partially supported by the grant PRIN2017
   (code: 201784YSZ5) "AnalysiS of PRogram Analyses (ASPRA)" and the
   project "Dipartimenti di Eccellenza 2018-2022" funded by the Italian
   Ministry of Education, Universities and Research (MIUR).
CR [Anonymous], 2009, Surreptitious Software: Obfuscation, Watermarking, and Tamperproofing for Software Protection: Obfuscation, Watermarking, and Tamperproofing for Software Protection
   Asperti A, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P113, DOI 10.1145/1328438.1328455
   BLUM M, 1967, J ACM, V14, P322, DOI 10.1145/321386.321395
   Bruni R, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470608
   Bruni R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371096
   Campion M, 2019, LECT NOTES COMPUT SC, V11822, P121, DOI 10.1007/978-3-030-32304-2_7
   Casso Ignacio, 2019, INT S LOG BAS PROGR, p57s72, DOI [10.1007/978- 3- 030-45260- 5_4, DOI 10.1007/978-3-030-45260-5_4]
   Ceccato M, 2019, EMPIR SOFTW ENG, V24, P240, DOI 10.1007/s10664-018-9625-6
   Collberg C, 2011, IEEE INTELL SYST, V26, P8, DOI 10.1109/MIS.2011.106
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 2021, Principles of Abstract Interpretation
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290355
   Cousot P, 2018, LECT NOTES COMPUT SC, V10982, P75, DOI 10.1007/978-3-319-96142-2_8
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Cousot Patrick, LECT NOTES COMPUTER, V631, DOI [10.1007/3, DOI 10.1007/3]
   Crazzolara Federico, 1997, 1997 JOINT C DECL PR, p45s56
   De Sutter Bjorn, 2019, DAGSTUHL REPORTS, V8, p1s25, DOI [10.4230/ DagRep.9.8.1, DOI 10.4230/DAGREP.9.8.1]
   Di Pierro Alessandra, 2000, INT WORKSH LOG BAS P
   Distefano D, 2019, COMMUN ACM, V62, P62, DOI 10.1145/3338112
   Giacobazzi R, 2000, J ACM, V47, P361, DOI 10.1145/333979.333989
   Giacobazzi R, 2017, FORM ASP COMPUT, V29, P3, DOI 10.1007/s00165-016-0374-2
   Giacobazzi R, 2015, ACM SIGPLAN NOTICES, V50, P261, DOI [10.1145/2775051.2676987, 10.1145/2676726.2676987]
   Giacobazzi R, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P7, DOI 10.1109/SEFM.2008.41
   Giacobazzi Roberto, 2012, INT STAT AN S, DOI [10.1007/978-3-642-33125-1_11, DOI 10.1007/978-3-642-33125-1_11]
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Laviron Vincent., 2009, LECT NOTES COMPUTER, V5904, DOI [10.1007/978-3-642-10672-9_24, DOI 10.1007/978-3-642-10672-9_24]
   Logozzo Francesco., 2009, WORKSH QUANT AN SOFT
   Miné A, 2017, FOUND TRENDS PROGRAM, V4, pI, DOI 10.1561/2500000034
   Rogers Hartley., 1992, Theory of Recursive Functions and Effective Computability
   Sotin Pascal., 2010, IDINRIA00457324 HAL
   Venet A., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P366
   Wilson WA, 1931, AM J MATH, V53, P675, DOI 10.2307/2371174
   Winskel G., 1993, The Formal Semantics of Programming Languages
NR 36
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 59
DI 10.1145/3498721
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900060
OA gold
DA 2024-07-18
ER

PT J
AU Xie, NN
   Pickering, M
   Löh, A
   Wu, N
   Yallop, J
   Wang, M
AF Xie, Ningning
   Pickering, Matthew
   Loh, Andres
   Wu, Nicolas
   Yallop, Jeremy
   Wang, Meng
TI Staging with Class A Specification for Typed Template Haskell
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Staging; Type Classes; Typed Template Haskell
AB Multi-stage programming using typed code quotation is an established technique for writing optimizing code generators with strong type-safety guarantees. Unfortunately, quotation in Haskell interacts poorly with type classes, making it difficult to write robust multi-stage programs.
   We study this unsound interaction and propose a resolution, staged type class constraints, which we formalize in a source calculus lambda([[double right arrow]]) that elaborates into an explicit core calculus F-[[]]. We show type soundness of both calculi, establishing that well-typed, well-staged source programs always elaborate to well-typed, well-staged core programs, and prove beta and eta rules for code quotations.
   Our design allows programmers to incorporate type classes into multi-stage programs with confidence. Although motivated by Haskell, it is also suitable as a foundation for other languages that support both overloading and quotation.
C1 [Xie, Ningning; Yallop, Jeremy] Univ Cambridge, Cambridge, England.
   [Pickering, Matthew; Loh, Andres] Well Typed LLP, Greater London, England.
   [Wu, Nicolas] Imperial Coll London, London, England.
   [Wang, Meng] Univ Bristol, Bristol, Avon, England.
C3 University of Cambridge; Imperial College London; University of Bristol
RP Xie, NN (corresponding author), Univ Cambridge, Cambridge, England.
EM ningning.xie@cl.cam.ac.uk; matthew@well-typed.com;
   andres@well-typed.com; n.wu@imperial.ac.uk; jeremy.yallop@cl.cam.ac.uk;
   meng.wang@bristol.ac.uk
OI Wang, Meng/0000-0001-7780-630X; Wu, Nicolas/0000-0002-4161-985X
FU EPSRC [EP/S028129/1, EP/T008911/1]
FX We thank Dimitrios Vytiniotis, and the anonymous reviewers for their
   insightful comments. The work is partly supported by EPSRC Grant SCOPE:
   Scoped Contextual Programming with Effects (EP/S028129/1) and Grant
   EXHIBIT: Expressive High-Level Languages for Bidirectional
   Transformations (EP/T008911/1).
CR Berger Martin, 2017, LIPICS, V5, P23, DOI [10.4230/LIPIcs.ECOOP.2017.5, DOI 10.4230/LIPICS.ECOOP.2017.5]
   Bottu GJ, 2017, ACM SIGPLAN NOTICES, V52, P148, DOI 10.1145/3156695.3122967
   Brady Edwin., 2006, GPCE 06, P111
   Calcagno C, 2003, LECT NOTES COMPUT SC, V2830, P57
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P241, DOI 10.1145/1090189.1086397
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   Fogarty S., 2007, S PART EV SEM BAS PR, P112
   Gratzer Daniel, 2020, MULTIMODAL DEPENDENT
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   Hanada Y, 2014, LECT NOTES COMPUT SC, V8475, P103, DOI 10.1007/978-3-319-07151-0_7
   Jones M.P, 1993, YALEUDCSRR989 YAL U
   Jones MarkP., 1994, Qualified Types: Theory and Practice
   Jones S.P., 1997, HASK WORKSH, P1
   Jones SP, 2006, ACM SIGPLAN NOTICES, V41, P50
   Jonnalagedda M, 2014, ACM SIGPLAN NOTICES, V49, P637, DOI [10.1145/2660193.2660241, 10.1145/2714064.2660241]
   Kawata A, 2019, LECT NOTES COMPUT SC, V11893, P53, DOI 10.1007/978-3-030-34175-6_4
   Kiselyov O, 2017, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.241.1
   Kiselyov O, 2016, LECT NOTES COMPUT SC, V10017, P271, DOI 10.1007/978-3-319-47958-3_15
   Kiselyov O, 2014, LECT NOTES COMPUT SC, V8475, P86, DOI 10.1007/978-3-319-07151-0_6
   Kokaji Yuichiro, 2011, AS S PROGR LANG SYST, P105, DOI [10.1007/978-3-642-25318-8_11, DOI 10.1007/978-3-642-25318-8_11]
   Krishnaswami NR, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P379, DOI 10.1145/3314221.3314625
   Nanevski A, 2002, ACM SIGPLAN NOTICES, V37, P206, DOI 10.1145/583852.581498
   Nuyts A, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P779, DOI 10.1145/3209108.3209119
   Oishi J, 2017, PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'17), P29, DOI 10.1145/3136040.3136049
   Pasalic E, 2002, ACM SIGPLAN NOTICES, V37, P218, DOI 10.1145/583852.581499
   Pasalic Emir., 2004, THESIS OGI SCH SCI E
   Pfenning F, 2001, IEEE S LOG, P221, DOI 10.1109/LICS.2001.932499
   Pickering Matthew, 2020, Haskell '20. Proceedings of the 13th ACM SIGPLAN International Symposium on Haskell, P122, DOI 10.1145/3406088.3409021
   Pickering M, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '19), P71, DOI 10.1145/3331545.3342597
   Pickering Matthew, 2019, OVERLOADED QUOTATION
   Radanne Gabriel., 2017, THESIS PARIS DIDEROT
   Rompf T, 2011, ACM SIGPLAN NOTICES, V46, P127, DOI 10.1145/1942788.1868314
   Roubinchtein Evgeny, 2015, THESIS U BRIT COLUMB, DOI [10.14288/1.0166800, DOI 10.14288/1.0166800]
   Schuster Philipp, 2020, ZERO COST EFFECT HAN
   Serrano A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408971
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Stucki N, 2018, PROCEEDINGS OF THE 17TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'18), P14, DOI 10.1145/3278122.3278139
   Taha W., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P203, DOI 10.1145/258994.259019
   Taha W, 1998, LECT NOTES COMPUT SC, V1443, P918, DOI 10.1007/BFb0055113
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   Taha Walid., 1999, Multi-stage programming: Its theory and applications
   Vytiniotis D, 2011, J FUNCT PROGRAM, V21, P333, DOI 10.1017/S0956796811000098
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wehr S, 2008, LECT NOTES COMPUT SC, V5356, P188
   Willis J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409002
   YALLOP J, 2018, PROC ACM PROGRAM LAN, DOI [10.1145/3236795, DOI 10.1145/3236795]
   Yallop J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110273
   Yallop Jeremy, 2015, OCAML US DEV WORKSH
NR 48
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 61
DI 10.1145/3498723
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900062
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Pelenitsyn, A
   Belyakova, J
   Chung, B
   Tate, R
   Vitek, J
AF Pelenitsyn, Artem
   Belyakova, Julia
   Chung, Benjamin
   Tate, Ross
   Vitek, Jan
TI Type Stability in Julia Avoiding Performance Pathologies in JIT
   Compilation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE method dispatch; type inference; compilation; dynamic languages
AB As a scientific programming language, Julia strives for performance but also provides high-level productivity features. To avoid performance pathologies, Julia users are expected to adhere to a coding discipline that enables so-called type stability. Informally, a function is type stable if the type of the output depends only on the types of the inputs, not their values. This paper provides a formal definition of type stability as well as a stronger property of type groundedness, shows that groundedness enables compiler optimizations, and proves the compiler correct. We also perform a corpus analysis to uncover how these type-related properties manifest in practice.
C1 [Pelenitsyn, Artem; Belyakova, Julia; Chung, Benjamin; Vitek, Jan] Northeastern Univ, Boston, MA 02115 USA.
   [Tate, Ross] Cornell Univ, Ithaca, NY 14853 USA.
   [Vitek, Jan] Czech Tech Univ, Prague, Czech Republic.
C3 Northeastern University; Cornell University; Czech Technical University
   Prague
RP Pelenitsyn, A (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
EM pelenitsyn.a@northeastern.edu
RI ; Vitek, Jan/J-9051-2014
OI Belyakova, Julia/0000-0002-7490-8500; Chung,
   Benjamin/0000-0001-9238-7334; Tate, Ross/0000-0002-7608-4605;
   Pelenitsyn, Artem/0000-0001-8334-8106; Vitek, Jan/0000-0003-4052-3458
FU Office of Naval Research (ONR) [503353]; National Science Foundation
   [1759736, 1925644, 1618732, CCF-1909143, CCF-1908389]; Czech Ministry of
   Education from the Czech Operational Programme Research, Development,
   and Education [CZ.02.1.01/0.0/0.0/15_003/0000421]; European Research
   Council under the European Union [695412]; European Research Council
   (ERC) [695412] Funding Source: European Research Council (ERC); Direct
   For Computer & Info Scie & Enginr; Division of Computing and
   Communication Foundations [1618732] Funding Source: National Science
   Foundation; Division Of Computer and Network Systems; Direct For
   Computer & Info Scie & Enginr [1925644] Funding Source: National Science
   Foundation; Div Of Biological Infrastructure; Direct For Biological
   Sciences [1759736] Funding Source: National Science Foundation
FX This work was supported by Office of Naval Research (ONR) award 503353,
   the National Science Foundation awards 1759736, 1925644, 1618732,
   CCF-1909143 and CCF-1908389 the Czech Ministry of Education from the
   Czech Operational Programme Research, Development, and Education, under
   grant agreement No. CZ.02.1.01/0.0/0.0/15_003/0000421, and the European
   Research Council under the European Union's Horizon 2020 research and
   innovation programme, under grant agreement No. 695412.
CR Aigner G., 1996, ECOOP '96 - Object-Oriented Programming. 10th European Conference. Proceedings, P142, DOI 10.1007/BFb0053060
   ATKINSON RG, 1986, SIGPLAN NOTICES, V21, P151, DOI 10.1145/960112.28712
   Barrett E, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133876
   Barrière A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434327
   Belyakova J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428275
   Bezanson J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276490
   Bezanson J, 2017, SIAM REV, V59, P65, DOI 10.1137/141000671
   Cannon B., 2005, THESIS CALIFORNIA PO
   CHAMBERS C, 1989, SIGPLAN NOTICES, V24, P146, DOI 10.1145/74818.74831
   Chang Mason., 2007, Efficient just-in-time execution of dynamically typed languages via code specialization using precise runtime type inference
   Cusumano-Towner MF, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P221, DOI 10.1145/3314221.3314642
   Deutsch PeterL., 1984, Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles of Programming Languages, POPL '84, P297, DOI [10.1145/800017.800542, DOI 10.1145/800017.800542]
   Flückiger O, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428288
   Flückiger O, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158137
   Gal A, 2009, ACM SIGPLAN NOTICES, V44, P465, DOI 10.1145/1543135.1542528
   Guo SY, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P563, DOI 10.1145/1926385.1926450
   HOLZLE U, 1994, SIGPLAN NOTICES, V29, P326
   Logozzo Francesco, 2010, COMPILER CONSTRUCTIO, DOI [10.1007/978-3-642-11970-5_5, DOI 10.1007/978-3-642-11970-5_5]
   Myreen MO, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P107, DOI 10.1145/1706299.1706313
   Nardelli FZ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276483
   Ottoni G, 2018, ACM SIGPLAN NOTICES, V53, P151, DOI [10.1145/3192366.3192374, 10.1145/3296979.3192374]
   Pelenitsyn Artem, 2021, ARXIV210901950
   Pelenitsyn Artem, **DATA OBJECT**, DOI 10.5281/zenodo.5500548
   Rigo Armin., 2004, P 2004 ACM SIGPLAN W, P15, DOI DOI 10.1145/1014007.1014010
   Stadler L., 2013, P 7 ACM WORKSH VIRT, P1, DOI [10.1145/2542142.2542143, DOI 10.1145/2542142.2542143]
   Würthinger T, 2013, ACM SIGPLAN NOTICES, V48, P73, DOI 10.1145/2480360.2384587
   Xu GQ, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P419, DOI 10.1145/1542476.1542523
NR 27
TC 0
Z9 2
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 150
DI 10.1145/3485527
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200053
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Phipps-Costin, L
   Anderson, CJ
   Greenberg, M
   Guha, A
AF Phipps-Costin, Luna
   Anderson, Carolyn Jane
   Greenberg, Michael
   Guha, Arjun
TI Solver-Based Gradual Type Migration
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE gradual typing; type inference
AB Gradually typed languages allow programmers to mix statically and dynamically typed code, enabling them to incrementally reap the benefits of static typing as they add type annotations to their code. However, this type migration process is typically a manual effort with limited tool support. This paper examines the problem of automated type migration: given a dynamic program, infer additional or improved type annotations.
   Existing type migration algorithms prioritize different goals, such as maximizing type precision, maintaining compatibility with unmigrated code, and preserving the semantics of the original program. We argue that the type migration problem involves fundamental compromises: optimizing for a single goal often comes at the expense of others. Ideally, a type migration tool would flexibly accommodate a range of user priorities.
   We present TYPEWHICH, a new approach to automated type migration for the gradually-typed lambda calculus with some extensions. Unlike prior work, which relies on custom solvers, TYPEWHICH produces constraints for an off-the-shelf MaxSMT solver. This allows us to easily express objectives, such as minimizing the number of necessary syntactic coercions, and constraining the type of the migration to be compatible with unmigrated code.
   We present the first comprehensive evaluation of GTLC type migration algorithms, and compare TYPEWHICH to four other tools from the literature. Our evaluation uses prior benchmarks, and a new set of "challenge problems." Moreover, we design a new evaluation methodology that highlights the subtleties of gradual type migration. In addition, we apply TypeWhich to a suite of benchmarks for Grift, a programming language based on the GTLC. TypeWhich is able to reconstruct all human-written annotations on all but one program.
C1 [Phipps-Costin, Luna] Univ Massachusetts, Amherst, MA 01003 USA.
   [Anderson, Carolyn Jane] Wellesley Coll, Wellesley, MA 02181 USA.
   [Greenberg, Michael] Stevens Inst Technol, Hoboken, NJ 07030 USA.
   [Guha, Arjun] Northeastern Univ, Boston, MA 02115 USA.
C3 University of Massachusetts System; University of Massachusetts Amherst;
   Wellesley College; Stevens Institute of Technology; Northeastern
   University
RP Phipps-Costin, L (corresponding author), Univ Massachusetts, Amherst, MA 01003 USA.
OI Anderson, Carolyn Jane/0000-0001-5717-4210; Guha,
   Arjun/0000-0002-7493-3271; Greenberg, Michael/0000-0003-0014-7670
FU National Science Foundation [CCF-2102288, CCF-2129344]
FX We thank the OOPSLA reviews for their thoughtful feedback. We thank
   Aseem Rastogi and Zeina Migeed for helpful discussions about their work.
   We thank Matthias Felleisen and Shriram Krishnamurthi for reading early
   drafts, and discussing their experience with Soft Scheme and MrSpidey.
   We thank Laurence Tratt for help with grmtools [Diekmann and Tratt
   2020], which TypeWhich uses significantly. This work is partially
   supported by the National Science Foundation under grants CCF-2102288
   and CCF-2129344.
CR An Jong-hoon David, 2011, ACM SIGPLAN SIGACT S
   Anderson C, 2005, LECT NOTES COMPUT SC, V3586, P428
   [Anonymous], 2007, Journal on Satisfiability, Boolean Modeling and Computation
   Bjorner N., 2015, TOOLS ALGORITHMS CON, P194
   Bloom Bard, 2009, ACM SIGPLAN C OBJ OR
   Campora JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158103
   Chandra S, 2016, ACM SIGPLAN NOTICES, V51, P410, DOI 10.1145/3022671.2984017
   Chen S, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2518190
   Chugh Ravi, 2012, ACM SIGPLAN SIGACT S
   Diekmann L., 2020, LIPIcs, V166, DOI [10.4230/LIPIcs.ECOOP.2020.6, DOI 10.4230/LIPICS.ECOOP.2020.6]
   Flanagan C, 1996, ACM SIGPLAN NOTICES, V31, P23, DOI 10.1145/249069.231387
   Flanagan Cormac., 1997, THESIS RICE U
   Furr Michael, 2009, ACM SIGPLAN C OBJ OR
   Garcia R, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2676726.2676992, 10.1145/2775051.2676992]
   Greenberg Michael, 2013, Ph.D. Dissertation
   Greenman B, 2018, PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'18), P30, DOI 10.1145/3162066
   Greenman Ben, 2018, SPECTRUM TYPE SOUNDN, V2
   Guha A, 2011, LECT NOTES COMPUT SC, V6602, P256, DOI 10.1007/978-3-642-19718-5_14
   Hellendoorn VJ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P152, DOI 10.1145/3236024.3236051
   Henglein F., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P192, DOI 10.1145/224164.224203
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Kazerounian M, 2020, DLS '2020: PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES, P112, DOI 10.1145/3426422.3426985
   Kuhlenschmidt A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P517, DOI 10.1145/3314221.3314627
   Malik RS, 2019, PROC INT CONF SOFTW, P304, DOI 10.1109/ICSE.2019.00045
   Migeed Z, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371097
   Miyazaki Y, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290331
   Pavlinovic Z, 2014, ACM SIGPLAN NOTICES, V49, P525, DOI [10.1145/2714064.2660230, 10.1145/2660193.2660230]
   PeterCampora John., 2018, P ACM PROGRAMMING LA, V2
   Phipps-Costin L., 2021, PROC ACM PROGRAM LAN, V5, P1
   Pradel M, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P209, DOI 10.1145/3368089.3409715
   Rastogi A, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P481
   Ren BM, 2016, ACM SIGPLAN NOTICES, V51, P462, DOI [10.1145/2980983.2908127, 10.1145/2908080.2908127]
   Saftoiu Claudiu., 2010, THESIS BROWN U
   Siek J.G., 2008, Proceedings of the 2008 symposium on Dynamic languages, P7, DOI DOI 10.1145/1408681.1408688
   Siek J, 2015, ACM SIGPLAN NOTICES, V50, P425, DOI [10.1145/2737924.2737968, 10.1145/2813885.2737968]
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Vekris Panagiotis, 2015, EUR C OBJ OR PROGR E
   Vitousek MM, 2017, ACM SIGPLAN NOTICES, V52, P762, DOI 10.1145/3093333.3009849
   Vitousek MM, 2015, ACM SIGPLAN NOTICES, V50, P45, DOI 10.1145/2661088.2661101
   Wei J., 2020, ICLR
   Wright AK, 1997, ACM T PROGR LANG SYS, V19, P87, DOI 10.1145/239912.239917
NR 46
TC 7
Z9 7
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 111
DI 10.1145/3485488
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200015
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Aguirre, A
   Barthe, G
   Gaboardi, M
   Garg, D
   Katsumata, SY
   Sato, T
AF Aguirre, Alejandro
   Barthe, Gilles
   Gaboardi, Marco
   Garg, Deepak
   Katsumata, Shin-ya
   Sato, Tetsuya
TI Higher-Order Probabilistic Adversarial Computations: Categorical
   Semantics and Program Logics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Probabilistic programming; semantic models; program logics
AB Adversarial computations are a widely studied class of computations where resource-bounded probabilistic adversaries have access to oracles, i.e., probabilistic procedures with private state. These computations arise routinely in several domains, including security, privacy and machine learning.
   In this paper, we develop program logics for reasoning about adversarial computations in a higher-order setting. Our logics are built on top of a simply typed lambda-calculus extended with a graded monad for probabilities and state. The grading is used to model and restrict the memory footprint and the cost (in terms of oracle calls) of computations. Under this view, an adversary is a higher-order expression that expects as arguments the code of its oracles. We develop unary program logics for reasoning about error probabilities and expected values, and a relational logic for reasoning about coupling-based properties. All logics feature rules for adversarial computations, and yield guarantees that are valid for all adversaries that satisfy a fixed resource policy. We prove the soundness of the logics in the category of quasi-Borel spaces, using a general notion of graded predicate liftings, and we use logical relations over graded predicate liftings to establish the soundness of proof rules for adversaries. We illustrate the working of our logics with simple but illustrative examples.
C1 [Aguirre, Alejandro] Univ Politecn Madrid, Madrid, Spain.
   [Aguirre, Alejandro] Aarhus Univ, Aarhus, Denmark.
   [Barthe, Gilles] MPI SP, Bochum, Spain.
   [Aguirre, Alejandro; Barthe, Gilles] IMDEA Software Inst, Madrid, Spain.
   [Gaboardi, Marco] Boston Univ, Boston, MA 02215 USA.
   [Garg, Deepak] Max Planck Inst Software Syst, Saarland Informat Campus, Saarbrucken, Germany.
   [Katsumata, Shin-ya] Natl Inst Informat, Chiyoda Ku, 2-1-2 Hitotsubashi, Tokyo 1018430, Japan.
   [Sato, Tetsuya] Tokyo Inst Technol, Tokyo, Japan.
C3 Universidad Politecnica de Madrid; Aarhus University; IMDEA Software
   Institute; Boston University; Max Planck Society; Research Organization
   of Information & Systems (ROIS); National Institute of Informatics (NII)
   - Japan; Tokyo Institute of Technology
RP Aguirre, A (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM alejandro@cs.au.dk; gbarthe@mpi-sp.org; gaboardi@bu.edu; dg@mpi-sws.org;
   s-katsumata@nii.ac.jp; tsato@c.titech.ac.jp
RI Gaboardi, Marco/JPX-6816-2023
OI Aguirre, Alejandro/0000-0001-6746-2734; Sato,
   Tetsuya/0000-0001-9895-9209; BARTHE, Gilles/0000-0002-3853-1777;
   Katsumata, Shin-ya/0000-0001-7529-5489
FU ERATO HASUO Metamathematics for Systems Design Project, Japan Science
   and Technology Agency [JPMJER1603]; JSPS KAKENHI, Japan [20K19775]; NSF
   [CCF-2040222, CCF-1718220]; Grants-in-Aid for Scientific Research
   [20K19775] Funding Source: KAKEN
FX S.K. was supported by ERATO HASUO Metamathematics for Systems Design
   Project (No. JPMJER1603), Japan Science and Technology Agency. T.S. was
   supported by JSPS KAKENHI Grant Number 20K19775, Japan. M.G. was
   supported by NSF awards CCF-2040222 and CCF-1718220.
CR Aguirre A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434333
   Aguirre A, 2020, ELECTRON NOTES THEOR, V352, P5, DOI 10.1016/j.entcs.2020.09.002
   Aguirre A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110265
   Aumann Robert J., 1961, Illinois Journal of Mathematics, V5, P614
   Barbosa M, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2541, DOI 10.1145/3460120.3484548
   BARTHE G, 2014, POPL 2014, DOI DOI 10.1145/2578855.2535847
   Barthe G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158145
   Barthe G, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P55, DOI 10.1145/2976749.2978391
   Barthe G, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P375, DOI 10.1145/1866307.1866350
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Beguelin Santiago Zanella, 2012, P POPL, DOI DOI 10.1145/2103656.2103670
   Benton N, 2014, ACM SIGPLAN NOTICES, V49, P619, DOI 10.1145/2535838.2535869
   BIZJAK A, 2015, FOSSACS 2015, DOI DOI 10.1007/978-3-662-46678-0_18
   BLOOM BH, 1970, COMMUN ACM, V13, P422, DOI 10.1145/362686.362692
   Brzuska Chris, 2018, Advances in Cryptology - ASIACRYPT 2018. 24th International Conference on the Theory and Application of Cryptology and Information Security. Proceedings: Lecture Notes in Computer Science (LNCS 11274), P222, DOI 10.1007/978-3-030-03332-3_9
   Clayton D, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P1317, DOI 10.1145/3319535.3354235
   Crubillé R, 2015, IEEE S LOG, P633, DOI 10.1109/LICS.2015.64
   Danos V, 2011, INFORM COMPUT, V209, P966, DOI 10.1016/j.ic.2011.02.001
   Devriese D, 2016, 1ST IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY, P147, DOI 10.1109/EuroSP.2016.22
   Dwork C, 2013, FOUND TRENDS THEOR C, V9, P211, DOI 10.1561/0400000042
   Garg D, 2010, ELECTRON NOTES THEOR, V265, P49, DOI 10.1016/j.entcs.2010.08.005
   GERBET T, 2015, 45 ANN IEEE IFIP INT
   Heunen C, 2017, IEEE S LOG
   Impagliazzo R., 1989, Proceedings of the Twenty First Annual ACM Symposium on Theory of Computing, P44, DOI 10.1145/73007.73012
   Iverson K. E., 1962, A Programming Language
   JIA L, 2015, IEEE 28 COMP SEC FDN
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   Katsumata SY, 2018, LOG METH COMPUT SCI, V14, DOI 10.23638/LMCS-14(4:6)2018
   Katsumata S, 2014, ACM SIGPLAN NOTICES, V49, P633, DOI 10.1145/2535838.2535846
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Mac Lane, 1971, CATEGORIES WORKING M
   Maillard K, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371072
   Matache C, 2019, LECT NOTES COMPUT SC, V11425, P382, DOI 10.1007/978-3-030-17127-8_22
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   Nanevski A, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2491522.2491523
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   Naor M, 2019, ACM T ALGORITHMS, V15, DOI 10.1145/3306193
   Ochoa Martin, 2014, P 3 C PRINC SEC TRUS, DOI [10.1007/978-3-642-54792-8_8, DOI 10.1007/978-3-642-54792-8_8]
   Pitts Andrew, 1998, Higher Order Operational Techniques in Semantics, P227
   Plotkin Gordon, 1973, Lambda-definability and logical relations
   Ristenpart T, 2011, LECT NOTES COMPUT SC, V6632, P487, DOI 10.1007/978-3-642-20465-4_27
   Sangiorgi Davide, INT C AUT LANG PROGR, V55
   Sato T, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290351
   Sato T, 2016, ELECTRON NOTES THEOR, V325, P277, DOI 10.1016/j.entcs.2016.09.043
   Scibior A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158148
   Tassarotti J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290377
   Vákár M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290349
NR 48
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 93
DI 10.1145/3473598
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800033
OA Green Submitted, gold, Green Published
DA 2024-07-18
ER

PT J
AU Rocha, P
   Caires, L
AF Rocha, Pedro
   Caires, Luis
TI Propositions-as-Types and Shared State
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Propositions-as-Types; Shared State; Session Types
AB We develop a principled integration of shared mutable state into a proposition-as-types linear logic interpretation of a session-based concurrent programming language. While the foundation of type systems for the functional core of programming languages often builds on the proposition-as-types correspondence, automatically ensuring strong safety and liveness properties, imperative features have mostly been handled by extra-logical constructions. Our system crucially builds on the integration of nondeterminism and sharing, inspired by logical rules of differential linear logic, and ensures session fidelity, progress, confluence and normalisation, while being able to handle first-class shareable reference cells storing any persistent object. We also show how preservation and, perhaps surprisingly, progress, resiliently survive in a natural extension of our language with first-class locks. We illustrate the expressiveness of our language with examples highlighting detailed features, up to simple shareable concurrent ADTs.
C1 [Rocha, Pedro; Caires, Luis] Nova Univ Lisbon, NOVA LINCS, Lisbon, Portugal.
   [Rocha, Pedro; Caires, Luis] Nova Univ Lisbon, FCT NOVA, Lisbon, Portugal.
C3 Universidade Nova de Lisboa; Universidade Nova de Lisboa
RP Rocha, P (corresponding author), Nova Univ Lisbon, NOVA LINCS, Lisbon, Portugal.; Rocha, P (corresponding author), Nova Univ Lisbon, FCT NOVA, Lisbon, Portugal.
EM pms.rocha@campus.fct.unl.pt; lcaires@fct.unl.pt
RI Caires, Luís/C-8384-2009
FU NOVA LINCS [UID/CEC/04516/2019, UIDB/04516/2020]
FX We would like to thank Stephanie Balzer, Bernardo Toninho, Nobuko
   Yoshida and Philip Wadler for insightful discussions. We would like also
   to thank the anonymous reviewers for their helpful comments and
   suggestions. This work is supported by NOVA LINCS (UID/CEC/04516/2019
   and UIDB/04516/2020).
CR Ahmed A, 2007, FUND INFORM, V77, P397
   Andreoli J. M., 1992, Journal of Logic and Computation, V2, P297, DOI 10.1093/logcom/2.3.297
   [Anonymous], 1980, Essays on Combinatory Logic, Lambda Calculus and Formalism
   Atkey Robert, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P32, DOI 10.1007/978-3-319-30936-1_2
   Balzer S, 2019, LECT NOTES COMPUT SC, V11423, P611, DOI 10.1007/978-3-030-17184-1_22
   Balzer S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110281
   Beffara E, 2008, IEEE S LOG, P130, DOI 10.1109/LICS.2008.40
   Boreale M., 1996, CONCUR '96: Concurrency Theory. 7th International Conference. Proceedings, P163
   Caires L, 2017, LECT NOTES COMPUT SC, V10201, P229, DOI 10.1007/978-3-662-54434-1_9
   Caires L, 2016, LECT NOTES COMPUT SC, V9688, P74, DOI 10.1007/978-3-319-39570-8_6
   Caires L, 2016, MATH STRUCT COMP SCI, V26, P367, DOI 10.1017/S0960129514000218
   Caires L, 2013, ACM SIGPLAN NOTICES, V48, P275, DOI 10.1145/2480359.2429103
   Caires L, 2013, LECT NOTES COMPUT SC, V7792, P330, DOI 10.1007/978-3-642-37036-6_19
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Caires Luis., 2012, P 8 ACM SIGPLAN WORK, P1, DOI [10.1145/2103786.2103788, DOI 10.1145/2103786.2103788]
   Carbone Marco, 2016, 27 INT C CONC THEOR
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   Cardelli L., 1991, IFIP STATE OF THE AR, P431
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   DeLine R, 2001, ACM SIGPLAN NOTICES, V36, P59, DOI 10.1145/381694.378811
   Dezani-Ciancaglini M, 2008, LECT NOTES COMPUT SC, V4912, P257
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Ehrhard T, 2006, THEOR COMPUT SCI, V364, P166, DOI 10.1016/j.tcs.2006.08.003
   Ehrhard T, 2003, THEOR COMPUT SCI, V309, P1, DOI 10.1016/S0304-3975(03)00392-X
   Ehrhard T, 2018, MATH STRUCT COMP SCI, V28, P995, DOI 10.1017/S0960129516000372
   Ehrhard T, 2010, INFORM COMPUT, V208, P606, DOI 10.1016/j.ic.2009.06.005
   FELLEISEN M, 1989, THEOR COMPUT SCI, V69, P243, DOI 10.1016/0304-3975(89)90069-8
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   HENNESSY M, 1985, J ACM, V32, P137, DOI 10.1145/2455.2460
   HODAS JS, 1994, INFORM COMPUT, V110, P327, DOI 10.1006/inco.1994.1036
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Kokke W, 2019, LECT NOTES COMPUT SC, V11533, P37, DOI 10.1007/978-3-030-22397-7_3
   Krishnaswami NR, 2012, ACM SIGPLAN NOTICES, V47, P41, DOI 10.1145/2398856.2364536
   Lynch N.A., 1980, Proceedings of the 12th Annual ACM Symposium on Theory of Computing, P70, DOI DOI 10.1145/800141.804654
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Militao Filipe, 2016, LIPICS, V56
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   O'Hearn PW, 2000, J ACM, V47, P167, DOI 10.1145/331605.331611
   Okasaki Chris, 1999, Purely functional data structures, DOI DOI 10.1017/CBO9780511530104
   Pagani M, 2009, LECT NOTES COMPUT SC, V5904, P226, DOI 10.1007/978-3-642-10672-9_17
   Pérez JA, 2012, LECT NOTES COMPUT SC, V7211, P539, DOI 10.1007/978-3-642-28869-2_27
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   PFENNING F, 1995, IEEE S LOG, P156, DOI 10.1109/LICS.1995.523253
   Pfenning F, 2015, LECT NOTES COMPUT SC, V9034, P3, DOI 10.1007/978-3-662-46678-0_1
   Plotkin G. D., 1976, SIAM Journal on Computing, V5, P452, DOI 10.1137/0205035
   Qian Zesen, 2021, CLIENT SERVER SESSIO, V5, DOI [10.1145/3473567, DOI 10.1145/3473567]
   Rocha Pedro, 2021, PROPOSITIONS AS TYPE
   Rocha Pedro, 2021, PROP AS TYP SHAR STA, DOI [10.5281/zenodo.5037493, DOI 10.5281/ZENODO.5037493]
   Sangiorgi D, 1999, THEOR COMPUT SCI, V221, P457, DOI 10.1016/S0304-3975(99)00040-7
   Sangiorgi Davide, 2001, PL CALCULUS THEORY M
   Sunshine J, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P713
   Toninho B, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3457884
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   Toninho B, 2011, PPDP 11 - PROCEEDINGS OF THE 2011 SYMPOSIUM ON PRINCIPLES AND PRACTICES OF DECLARATIVE PROGRAMMING, P161
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
   Wadler P, 2015, COMMUN ACM, V58, P75, DOI 10.1145/2699407
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
   Wadler Philip, 1990, Recursive types for free!
NR 62
TC 8
Z9 8
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 79
DI 10.1145/3473584
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800019
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Sekiyama, T
   Tsukada, T
AF Sekiyama, Taro
   Tsukada, Takeshi
TI CPS Transformation with Affine Types for Call-By-Value Implicit
   Polymorphism
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE continuation-passing style; polymorphism; affine types; parametricity
AB Transformation of programs into continuation-passing style (CPS) reveals the notion of continuations, enabling many applications such as control operators and intermediate representations in compilers. Although type preservation makes CPS transformation more beneficial, achieving type-preserving CPS transformation for implicit polymorphism with call-by-value (CBV) semantics is known to be challenging. We identify the difficulty in the problem that we call scope intrusion. To address this problem, we propose a new CPS target language Lambda(open) that supports two additional constructs for polymorphism: one only binds and the other only generalizes type variables. Unfortunately, their unrestricted use makes Lambda(open) unsafe due to undesired generalization of type variables. We thus equip.open with affine types to allow only the type-safe generalization. We then define a CPS transformation from Curry-style CBV System F to type-safe Lambda(open) and prove that the transformation is meaning and type preserving. We also study parametricity of Lambda(open) as it is a fundamental property of polymorphic languages and plays a key role in applications of CPS transformation. To establish parametricity, we construct a parametric, step-indexed Kripke logical relation for.open and prove that it satisfies the Fundamental Property as well as soundness with respect to contextual equivalence.
C1 [Sekiyama, Taro] Natl Inst Informat, Tokyo, Japan.
   [Tsukada, Takeshi] Chiba Univ, Chiba, Japan.
C3 Research Organization of Information & Systems (ROIS); National
   Institute of Informatics (NII) - Japan; Chiba University
RP Sekiyama, T (corresponding author), Natl Inst Informat, Tokyo, Japan.
EM tsekiyama@acm.org; tsukada@math.s.chiba-u.ac.jp
OI Tsukada, Takeshi/0000-0002-2824-8708; Sekiyama, Taro/0000-0001-9286-230X
FU ERATO HASUO Metamathematics for Systems Design Project, JST
   [JPMJER1603]; JSPS KAKENHI [JP19K20247, JP19K20211]; Grants-in-Aid for
   Scientific Research [20H05703, 20H00582] Funding Source: KAKEN
FX We would like to thank Atsushi Igarashi for advice and the anonymous
   reviewers at POPL 2021 and ICFP 2021 for their close reading and
   valuable comments. This work was supported in part by ERATO HASUO
   Metamathematics for Systems Design Project (No. JPMJER1603), JST and
   JSPS KAKENHI Grant Numbers JP19K20247 (Sekiyama) and JP19K20211
   (Tsukada).
CR Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   AHMED A, 2011, ACM SIGPLAN INT C FU
   Ahmed A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110283
   Ahmed A, 2009, ACM SIGPLAN NOTICES, V44, P340, DOI 10.1145/1594834.1480925
   [Anonymous], 1992, Compiling with Continuations
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   APPEL AW, 1991, LECT NOTES COMPUT SC, V528, P1
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Berdine J., 2002, Higher-Order and Symbolic Computation, V15, P181, DOI 10.1023/A:1020891112409
   Berdine Joshua James, 2004, RR0404
   Biernacki D, 2015, ACM T PROGR LANG SYS, V38, DOI 10.1145/2794078
   Bowman WJ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158110
   Cervesato I, 1996, IEEE S LOG, P264, DOI 10.1109/LICS.1996.561339
   Cong YY, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341643
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Danvy Olivier., 1989, FUNCTIONAL ABSTRACTI
   Danvy Olivier, 1992, CIS922
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Felleisen M., 1986, Proceedings of the Symposium on Logic in Computer Science (Cat. No.86CH2321-8), P131
   Fischer M. J., 1972, Proceedings of an ACM Conference on Proving Assertations about Programs, P104, DOI 10.1145/800235.807077
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Fluet M, 2001, ACM SIGPLAN NOTICES, V36, P2, DOI 10.1145/507669.507639
   Friedman Daniel P., 1985, POPL, P245, DOI [10.1145/318593.318654, DOI 10.1145/318593.318654]
   Garrigue Jacques, 2004, LNCS
   Girard J.-Y., 1972, PhD thesis
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Gordon M. J., 1979, Edinburgh LCF
   Harper R., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P206, DOI 10.1145/158511.158630
   Harper R., 1993, LISP and Symbolic Computation, V6, P361, DOI 10.1007/BF01019463
   Hasegawa M., 2002, Functional and Logic Programming. 6th International Symposium, FLOPS 2002. Proceedings (Lecture Notes in Computer Science Vol.2441), P167
   Hatcliff, 1992, ACT WSA 92 WORKSH ST
   Hillerstrom D., 2017, 2nd International Conference on Formal Structures for Computation and Deduction, FSCD 2017, September 3-9, 2017, V84, p18:1, DOI DOI 10.4230/LIPICS.FSCD.2017.18
   Hoang M., 1993, Proceedings of Eighth Annual IEEE Symposium on Logic in Computer Science (Cat. No.93CH3328-2), P15, DOI 10.1109/LICS.1993.287604
   Igarashi A., 1997, Static Analysis. 4th International Symposium, SAS '97 Proceedings, P187, DOI 10.1007/BFb0032742
   Kameyama Y, 2008, LECT NOTES COMPUT SC, V4989, P239
   Kammar O, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000320
   Kennedy A, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P177
   Kobayashi N, 2013, J ACM, V60, DOI 10.1145/2487241.2487246
   Leissa R, 2015, INT SYM CODE GENER, P202, DOI 10.1109/CGO.2015.7054200
   Leivant D., 1983, C REC 10 ANN ACM S P, P88, DOI [10.1145/567067.567077, DOI 10.1145/567067.567077]
   Leroy Xavier., 1991, PROC 18 ACM SIGPLAN, P291
   Leroy Xavier, 2020, The OCaml system release 4.10: Documentation and user's manua
   Lillibridge Mark, 1991, ML CALLCC IS UNSOUND
   Maraist John, 1995, P 11 ANN MATH FDN PR, P370, DOI [10.1016/S1571-0661(04)00022-2, DOI 10.1016/S1571-0661(04)00022-2]
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Montagu B, 2009, ACM SIGPLAN NOTICES, V44, P354, DOI 10.1145/1594834.1480926
   Morris James Hiram, 1969, Ph.D. Dissertation
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Neis G, 2011, J FUNCT PROGRAM, V21, P497, DOI 10.1017/S0956796811000165
   New MS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371114
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   Plotkin, 1996, ECSLFCS96347
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Plotkin Gordon, 1973, Lambda-definability and logical relations
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Reynolds J. C., 1993, LISP and Symbolic Computation, V6, P233, DOI 10.1007/BF01019459
   Reynolds J. C., 1974, Programming Symposium, P408
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   Sekiyama T, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408999
   Sekiyama T, 2019, LECT NOTES COMPUT SC, V11423, P353, DOI 10.1007/978-3-030-17184-1_13
   Stark Ian David Bede, 1993, MATH FDN COMPUTER SC, DOI 10.1007/3-540-57182-5_8
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Thielecke H, 2003, ACM SIGPLAN NOTICES, V38, P139, DOI 10.1145/640128.604144
   Thielecke H, 2004, LECT NOTES COMPUT SC, V2986, P279
   Thielecke Hayo, 2001, P ACM SIGPLAN WORKSH, P47
   TOFTE M, 1990, INFORM COMPUT, V89, P1, DOI 10.1016/0890-5401(90)90018-D
   Turner D. N., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P1, DOI 10.1145/224164.224168
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Wand Mitchell, 1985, LECT NOTES COMPUTER, P219, DOI 10.1007/3-540-15648-8_17
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Zhao JZ, 2010, LECT NOTES COMPUT SC, V6461, P344, DOI 10.1007/978-3-642-17164-2_24
NR 73
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 95
DI 10.1145/3473600
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800035
OA gold
DA 2024-07-18
ER

PT J
AU Rouvoet, A
   Krebbers, R
   Visser, E
AF Rouvoet, Arjen
   Krebbers, Robbert
   Visser, Eelco
TI Intrinsically Typed Compilation with Nameless Labels
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Compilation; Type safety; Code transformations; Agda; Co-contextual
   typing; Nameless; Intrinsically typed; Dependent types; Proof relevance
AB To avoid compilation errors it is desirable to verify that a compiler is type correct-i.e., given well-typed source code, it always outputs well-typed target code. This can be done intrinsically by implementing it as a function in a dependently typed programming language, such as Agda. This function manipulates data types of well-typed source and target programs, and is therefore type correct by construction. A key challenge in implementing an intrinsically typed compiler is the representation of labels in bytecode. Because label names are global, bytecode typing appears to be inherently a non-compositional, whole-program property. The individual operations of the compiler do not preserve this property, which requires the programmer to reason about labels, which spoils the compiler definition with proof terms.
   In this paper, we address this problem using a new nameless and co-contextual representation of typed global label binding, which is compositional. Our key idea is to use linearity to ensure that all labels are defined exactly once. To write concise compilers that manipulate programs in our representation, we develop a linear, dependently typed, shallowly embedded language in Agda, based on separation logic. We show that this language enables the concise specification and implementation of intrinsically typed operations on bytecode, culminating in an intrinsically typed compiler for a language with structured control-flow.
C1 [Rouvoet, Arjen; Krebbers, Robbert; Visser, Eelco] Delft Univ Technol, Delft, Netherlands.
   [Krebbers, Robbert] Radboud Univ Nijmegen, Nijmegen, Netherlands.
C3 Delft University of Technology; Radboud University Nijmegen
RP Rouvoet, A (corresponding author), Delft Univ Technol, Delft, Netherlands.
EM a.j.rouvoet@tudelft.nl; mail@robbertkrebbers.nl; e.visser@tudelft.nl
FU NWO VICI Language Designer's Workbench project [639.023.206]; NWO VENI
   Verified Programming Language Interaction project [016.Veni.192.259]
FX We thank the anonymous reviewers for their valuable feedback. We also
   thank Jesper Cockx for generously helping with a performance issue
   concerning instance search in Agda. Our work is also made possible by
   the many contributors who develop Agda and its standard library. This
   research was funded by the NWO VICI Language Designer's Workbench
   project (639.023.206) and the NWO VENI Verified Programming Language
   Interaction project (016.Veni.192.259).
CR Abel Andreas, 2020, TYPE PRESERVING COMP
   Altenkirch T, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:3)2015
   Ancona Davide, 2004, FORM TECHN JAV LIK P
   Appel Andrew W., 1991, COMPILING CONTINUATI, DOI [10.1017/CBO9780511609619, DOI 10.1017/CBO9780511609619]
   Appel AW, 2001, IEEE S LOG, P247, DOI 10.1109/LICS.2001.932501
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Atkey R, 2009, J FUNCT PROGRAM, V19, P335, DOI 10.1017/S095679680900728X
   Augustsson Lennart, 1999, WORKSH DEP TYP PROGR
   Belanger Olivier Savary, 2015, J FORMALIZED REASONI, V8, p49S91, DOI [10.6092/issn.1972-5787/5122, DOI 10.6092/ISSN.1972-5787/5122]
   Benton N, 2012, J AUTOM REASONING, V49, P141, DOI 10.1007/s10817-011-9219-0
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Brady Edwin, 2012, Practical Aspects of Declarative Languages. Proceedings 14th International Symposium, PADL 2012, P242, DOI 10.1007/978-3-642-27694-1_18
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Chlipala A, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P54, DOI 10.1145/1250734.1250742
   Cockx Jesper, 2020, TYPES PROOFS PROGRAM, V175, DOI [10.4230/LIPIcs.TYPES.2019.2, DOI 10.4230/LIPICS.TYPES.2019.2]
   Crary K, 2003, ACM SIGPLAN NOTICES, V38, P198, DOI 10.1145/640128.604149
   Dockins R, 2009, LECT NOTES COMPUT SC, V5904, P161, DOI 10.1007/978-3-642-10672-9_13
   Eelco Visser, INTRINSICALLY TYPED, DOI [10.5281/zenodo.4072068, DOI 10.5281/ZENODO.4072068]
   Erdweg S, 2015, ACM SIGPLAN NOTICES, V50, P880, DOI [10.1145/2814270.2814277, 10.1145/2858965.2814277]
   Guillemette LJ, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P75
   Jim T., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P42, DOI 10.1145/237721.237728
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Klein G, 2006, ACM T PROGR LANG SYS, V28, P619, DOI 10.1145/1146809.1146811
   KOCK A, 1972, ARCH MATH, V23, P113, DOI 10.1007/BF01304852
   Kuci Edlira, 2017, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V18, P1
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Lindholm T., 2020, JAVA VIRTUAL MACHINE
   McBride C, 2018, ELECTRON P THEOR COM, P53, DOI 10.4204/EPTCS.275.6
   McBride C, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P297, DOI 10.1145/2628136.2628163
   McBride Conor, 2012, ACM SIGPLAN INT C FU, DOI [10.1145/2364527.2364529, DOI 10.1145/2364527.2364529]
   McKinna James, 2006, TYPE CORRECT S UNPUB
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Morrisett G., 1999, WCSSS'99. ACM SIGPLAN Workshop on Compiler Support for System Software, P25
   Nipkow T., 2014, Concrete Semantics, P75
   Norell Ulf, 2009, P 4 INT WORKSHOP TYP, P1, DOI DOI 10.1145/1481861.1481862
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   Orchard D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341714
   Pardo A, 2018, PPDP'18: PROCEEDINGS OF THE 20TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, DOI 10.1145/3236950.3236965
   Poulsen CB, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158104
   Reynolds John C, 2000, BRICS REPORT SERIES, V7, P32
   Rouvoet Arjen, INTRINSICALLY TYPED, DOI [10.5281/zenodo.4071954, DOI 10.5281/ZENODO.4071954]
   Rouvoet Arjen, ACM SIGPLAN C CERT P, P284, DOI [10.1145/3372885.3373818, DOI 10.1145/3372885.3373818]
   Walker David, 2005, Advanced Topics in Types and Programming Languages, chapter Substructural Type Systems, P3
   Wells JB, 2002, LECT NOTES COMPUT SC, V2380, P913
NR 48
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 22
DI 10.1145/3434303
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100022
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Sherman, B
   Michel, J
   Carbin, M
AF Sherman, Benjamin
   Michel, Jesse
   Carbin, Michael
TI λ<i><sub>S</sub></i> : Computable Semantics for Differentiable
   Programming with Higher-Order Functions and Datatypes
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Constructive Analysis; Diffeological Spaces; Automatic Differentiation
AB Deep learning is moving towards increasingly sophisticated optimization objectives that employ higher-order functions, such as integration, continuous optimization, and root-finding. Since differentiable programming frameworks such as PyTorch and TensorFlow do not have first-class representations of these functions, developers must reason about the semantics of such objectives and manually translate them to differentiable code.
   We present a differentiable programming language, lambda(S), that is the first to deliver a semantics for higher-order functions, higher-order derivatives, and Lipschitz but nondifferentiable functions. Together, these features enable lambda(S) to expose differentiable, higher-order functions for integration, optimization, and root-finding as first-class functions with automatically computed derivatives. lambda(S) 's semantics is computable, meaning that values can be computed to arbitrary precision, and we implement lambda(S) as an embedded language in Haskell.
   We use lambda(S) to construct novel differentiable libraries for representing probability distributions, implicit surfaces, and generalized parametric surfaces - all as instances of higher-order datatypes - and present case studies that rely on computing the derivatives of these higher-order functions and datatypes. In addition to modeling existing differentiable algorithms, such as a differentiable ray tracer for implicit surfaces, without requiring any user-level differentiation code, we demonstrate new differentiable algorithms, such as the Hausdorff distance of generalized parametric surfaces.
C1 [Sherman, Benjamin; Michel, Jesse; Carbin, Michael] MIT, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Sherman, B (corresponding author), MIT, Cambridge, MA 02139 USA.
EM sherman@csail.mit.edu; jmmichel@mit.edu; mcarbin@csail.mit.edu
FU Office of Naval Research [ONR-N00014-17-1-2699]
FX We thank Eric Atkinson, Tej Chajed, Alexander Lew, Alex Renda, and David
   Spivak, as well as the anonymous reviewers, for their helpful feedback
   and discussions. This work was supported in part by the Office of Naval
   Research (ONR-N00014-17-1-2699). Any opinions, findings, and conclusions
   or recommendations expressed in this material are those of the author
   and do not necessarily reflect the views of the Office of Naval
   Research.
CR Abadi Martin, 2019, NEURAL INFORM PROCES
   [Anonymous], 2017, ARTIFICIAL INTELLIGE
   Atzmon M, 2019, ADV NEUR IN, V32
   Bai Shaojie, 2019, Advances in Neural Information Processing Systems
   Carbin, 2019, INT C FUNCT PROGR
   Clarke F. H., 1990, OPTIMIZATION NONSMOO
   Conal Elliott, 2008, HIGHER DIMENSIONAL H
   Duvenaud, 2019, ARXIV PREPRINT ARXIV
   Edalat, 2008, NEW COMPUTATIONAL PA
   Edalat Abbas, 2013, FDN SOFTWARE SCI COM
   Ehrhard T, 2003, THEOR COMPUT SCI, V309, P1, DOI 10.1016/S0304-3975(03)00392-X
   Elliott C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236765
   Fourman Michael P, 1984, STUDIES LOGIC FDN MA, V112
   Fousse L, 2007, ACM T MATH SOFTWARE, V33, DOI 10.1145/1236463.1236468
   Jang E., 2017, P ICLR, P1
   Jankowiak M, 2018, PR MACH LEARN RES, V80
   Kettner L, 2008, COMP GEOM-THEOR APPL, V40, P61, DOI 10.1016/j.comgeo.2007.06.003
   Lehtinen, 2018, SPECIAL INTEREST GRO
   Lieutier, 2004, MATH STRUCT COMP SCI, V14
   Mnih A., 2018, Advances in Neural Information Processing Systems, P439
   Niemeyer M., 2020, COMPUTER VISION PATT
   Pearlmutter, 2005, WORKSH IMPL APPL FUN
   Plotkin Gordon D, 2020, PRINCIPLES PROGRAMMI
   Sigal, 2018, STUD RES COMP INT C
   Staton Sam, 2018, DOMAINS
   Vakar, 2020, FDN SOFTWARE SCI COM
   Wang Y, 2020, INT C LEARN REPR
   Wu, 2017, TANGENT SPACES TANGE
NR 28
TC 10
Z9 10
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 3
DI 10.1145/3434284
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100003
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Ji, RY
   Sun, YC
   Xiong, YF
   Hu, ZJ
AF Ji, Ruyi
   Sun, Yican
   Xiong, Yingfei
   Hu, Zhenjiang
TI Guiding Dynamic Programing via Structural Probability for Accelerating
   Programming by Example
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Programming by Example; Dynamic Programming; Probabilistic Model
AB Programming by example (PBE) is an important subproblem of program synthesis, and PBE techniques have been applied to many domains. Though many techniques for accelerating PBE systems have been explored, the scalability remains one of the main challenges: There is still a gap between the performances of state-of-the-art synthesizers and the industrial requirement. To further speed up solving PBE tasks, in this paper, we propose a novel PBE framework MaxPlash. MaxPlash uses a model based on structural probability, named topdown prediction models, to guide a search based on dynamic programming, such that the search will focus on subproblems that form probable programs, and avoid improbable programs. Our evaluation shows that MaxFlash achieves x4.107 - x2080 speed-ups against state-of-the-art solvers on 244 real-world tasks.
C1 [Ji, Ruyi; Sun, Yican; Xiong, Yingfei; Hu, Zhenjiang] Peking Univ, Key Lab High Confidence Software Technol, Minist Educ, Dept Comp Sci & Technol,EECS, Beijing, Peoples R China.
C3 Peking University
RP Xiong, YF (corresponding author), Peking Univ, Key Lab High Confidence Software Technol, Minist Educ, Dept Comp Sci & Technol,EECS, Beijing, Peoples R China.
EM jiruyi910387714@pku.edu.cn; sycpku@pku.edu.cn; xiongyf@pku.edu.cn;
   huzj@pku.edu.cn
FU National Key Research and Development Program of China
   [SQ2019YFE010068]; National Natural Science Foundation of China
   [61922003, 61672045, 61620106007]
FX We sincerely thank Xinyu Wang and Microsoft PROSE team for the help with
   the experiment setup and the anonymous OOPSLA reviewers for valuable
   feedback on this work. This work is supported in part by National Key
   Research and Development Program of China under Grant No.
   SQ2019YFE010068, National Natural Science Foundation of China under
   Grant Nos. 61922003, 61672045 and 61620106007.
CR Alon U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290353
   Alur R., 2019, ABS190407146 CORR
   Alur R, 2017, ELECTRON P THEOR COM, P97, DOI 10.4204/EPTCS.260.9
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2016, ELECTRON P THEOR COM, P178, DOI 10.4204/EPTCS.229.13
   Barowy DW, 2015, ACM SIGPLAN NOTICES, V50, P218, DOI [10.1145/2813885.2737952, 10.1145/2737924.2737952]
   Bielik P, 2016, PR MACH LEARN RES, V48
   Chen Qiaochu, 2020, MULTIMODAL SYNTHESIS
   Chen YJ, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P602, DOI 10.1145/3338906.3338951
   Devlin J, 2017, PR MACH LEARN RES, V70
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   GALLO G, 1993, DISCRETE APPL MATH, V42, P177, DOI 10.1016/0166-218X(93)90045-P
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Kalyan Ashwin, 2018, ICLR
   Kini D, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P776
   KORF RE, 1985, ARTIF INTELL, V27, P97, DOI 10.1016/0004-3702(85)90084-0
   LAND AH, 1960, ECONOMETRICA, V28, P497, DOI 10.2307/1910129
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   Neelakantan Arvind., 2017, Conference Track Proceedings, P1
   Nowozin Sebastian, 2017, INT C LEARN REPR
   Padhi S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276520
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Polozov Oleksandr, 2016, 5 WORKSH SYNTH SYNT
   Reynolds A, 2019, FORM METHOD SYST DES, V55, P73, DOI 10.1007/s10703-017-0270-2
   Reynolds A, 2019, LECT NOTES COMPUT SC, V11562, P74, DOI 10.1007/978-3-030-25543-5_5
   Reynolds A, 2015, LECT NOTES COMPUT SC, V9207, P198, DOI 10.1007/978-3-319-21668-3_12
   Shaw David E., 1975, ADV PAPERS 4 INT JOI
   Singh R, 2012, PROC VLDB ENDOW, V5, P740
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang X., 2017, P ACM PROGRAM LANG, DOI [10.1145/3158151, DOI 10.1145/3158151]
   Wang XY, 2018, LECT NOTES COMPUT SC, V10981, P407, DOI 10.1007/978-3-319-96145-3_22
   Xiong Yingfei, 2018, INT GEN IMPR WORKSH, DOI [10.1145/3194810.3194816, DOI 10.1145/3194810.3194816]
   Yaghmazadeh N, 2016, ACM SIGPLAN NOTICES, V51, P508, DOI [10.1145/2980983.2908088, 10.1145/2908080.2908088]
   Zhang S, 2013, IEEE INT CONF AUTOM, P224, DOI 10.1109/ASE.2013.6693082
NR 36
TC 8
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 224
DI 10.1145/3428292
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900101
OA gold
DA 2024-07-18
ER

PT J
AU Kong, LK
   Mamouras, K
AF Kong, Lingkun
   Mamouras, Konstantinos
TI StreamQL: A Query Language for Processing Streaming Time Series
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE data stream processing; denotational semantics
ID PROGRAMS; FUSION
AB Real-time data analysis applications increasingly rely on complex streaming computations over time-series data. We propose StreamQL, a language that facilitates the high-level specification of complex analyses over streaming time series. StreamQL is designed as an algebra of stream transformations and provides a collection of combinators for composing them. It integrates three language-based approaches for data stream processing: relational queries, dataflow composition, and temporal formalisms. The relational constructs are useful for specifying simple transformations, aggregations, and the partitioning of data into key-based groups or windows. The dataflow abstractions enable the modular description of a computation as a pipeline of stages or, more generally, as a directed graph of independent tasks. Finally, temporal constructs can be used to specify complex temporal patterns and time-varying computations. These constructs can be composed freely to describe complex streaming computations. We provide a formal denotational semantics for StreamQL using a class of monotone functions over streams. We have implemented StreamQL as a lightweight Java library, which we use to experimentally evaluate our approach. The experiments show that the throughput of our implementation is competitive compared to state-of-the-art streaming engines such as RxJava and Reactor.
C1 [Kong, Lingkun; Mamouras, Konstantinos] Rice Univ, Dept Comp Sci, Houston, TX 77251 USA.
C3 Rice University
RP Kong, LK (corresponding author), Rice Univ, Dept Comp Sci, Houston, TX 77251 USA.
EM klk@rice.edu; mamouras@rice.edu
OI Mamouras, Konstantinos/0000-0003-1209-7738
FU US National Science Foundation [2008096]; Direct For Computer & Info
   Scie & Enginr; Division of Computing and Communication Foundations
   [2008096] Funding Source: National Science Foundation
FX We would like to thank the anonymous reviewers for their constructive
   comments. This research was supported in part by US National Science
   Foundation award 2008096.
CR Abadi D., 2003, P 2003 ACM SIGMOD IN, P666
   Abadi Daniel J., P 2 BIENN C INN DAT, P277
   Abbas H, 2019, IEEE ACM T COMPUT BI, V16, P1586, DOI 10.1109/TCBB.2018.2885274
   Abbas H, 2018, P IEEE, V106, P1593, DOI 10.1109/JPROC.2018.2853608
   Agrawal J., 2008, SIGMOD 08, P147, DOI DOI 10.1145/1376616.1376634
   Akidau T, 2013, PROC VLDB ENDOW, V6, P1033, DOI 10.14778/2536222.2536229
   Ali MH, 2009, PROC VLDB ENDOW, V2, P1558, DOI 10.14778/1687553.1687590
   Alur Rajeev, 2018, Principles of Modeling - Essays Dedicated to Edward A. Lee on the Occasion of His 60th Birthday. Lecture Notes in Computer Science (LNCS 10760), P38, DOI 10.1007/978-3-319-95246-8_3
   Alur R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290363
   Alur R, 2020, THEOR COMPUT SCI, V807, P15, DOI 10.1016/j.tcs.2019.11.018
   Alur R, 2017, NATO SCI PEAC SECUR, V50, P1, DOI 10.3233/978-1-61499-810-5-1
   Alur R, 2017, LECT NOTES COMPUT SC, V10460, P75, DOI 10.1007/978-3-319-63121-9_4
   Alur Rajeev, 2017, LIPIcs, V80
   [Anonymous], 2010, Proceedings of the 7th USENIX Conference on Networked Systems Design and Implementation, NSDI'10, (USA)
   [Anonymous], 1974, PROC IFIP C 74
   Arasu A, 2006, VLDB J, V15, P121, DOI 10.1007/s00778-004-0147-z
   Arasu A, 2016, DATA CENTRIC SYST AP, P317, DOI 10.1007/978-3-540-28608-0_16
   Arasu Arvind, 2004, P 30 INT C VER LARG, P336
   Babcock B., 2002, P 21 ACM SIGMOD SIGA, P1, DOI [DOI 10.1145/543613.543615, 10.1145/543613]
   Bainomugisha E, 2013, ACM COMPUT SURV, V45, DOI 10.1145/2501654.2501666
   Barga R.S., 2007, CIDR 2007 3 BIENNIAL, P363
   Beam, APACH BEAM ADV UN PR
   BENVENISTE A, 1991, SCI COMPUT PROGRAM, V16, P103, DOI 10.1016/0167-6423(91)90001-E
   Benveniste A, 2003, P IEEE, V91, P64, DOI 10.1109/JPROC.2002.805826
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   Boykin O, 2014, PROC VLDB ENDOW, V7, P1441, DOI 10.14778/2733004.2733016
   Brenna Lars., 2007, SIGMOD 07, P1100, DOI DOI 10.1145/1247480.1247620
   Carbone P., 2015, IEEE DATA ENG B, V36, P28, DOI DOI 10.1109/IC2EW.2016.56
   Caspi P., 1987, P 14 ACM SIGACT SIGP, P178, DOI DOI 10.1145/41625.41641
   Chandramouli B, 2018, PROC INT CONF DATA, P677, DOI 10.1109/ICDE.2018.00067
   Chandramouli B, 2014, PROC VLDB ENDOW, V8, P401, DOI 10.14778/2735496.2735503
   Chandramouli B, 2010, PROC VLDB ENDOW, V3, P220, DOI 10.14778/1920841.1920873
   Chandrasekaran S., 2003, CIDR
   Chattopadhyay A, 2020, LECT NOTES COMPUT SC, V12399, P383, DOI 10.1007/978-3-030-60508-7_21
   Courtney A., 2001, Practical Aspects of Declarative Languages. Third International Symposium, PADL 2001. Proceedings (Lecture Notes in Computer Science Vol.1990), P29
   Coutts D, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P315
   Cranor Chuck., 2003, ACM SIGMOD
   Czaplicki E, 2013, ACM SIGPLAN NOTICES, V48, P411, DOI 10.1145/2499370.2462161
   D'Angelo B, 2005, 12TH INTERNATIONAL SYMPOSIUM ON TEMPORAL REPRESENTATION AND REASONING, PROCEEDINGS, P166, DOI 10.1109/TIME.2005.26
   Datar M, 2002, SIAM J COMPUT, V31, P1794, DOI 10.1137/S0097539701398363
   Demers A.J., 2007, P CIDR, VVolume 7, P412
   Deshmukh JV, 2017, FORM METHOD SYST DES, V51, P5, DOI 10.1007/s10703-017-0286-7
   Elliott C, 1997, ACM SIGPLAN NOTICES, V32, P263, DOI 10.1145/258949.258973
   Flux, 2020, QUER COD TOG FLUX
   Gibbons J, 2004, LECT NOTES COMPUT SC, V3125, P142
   Gill A., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P223, DOI 10.1145/165180.165214
   Girod L., 2007, Proceedings of the 3rd Biennial Conference on Innovative Data Systems Research, P397
   Girod L, 2008, PROC INT CONF DATA, P1180, DOI 10.1109/ICDE.2008.4497527
   Gyllstrom D., 2007, P 3 BIENN C INN DAT, P407
   Hammad MA, 2004, PROC INT CONF DATA, P851, DOI 10.1109/ICDE.2004.1320080
   Havelund K., 2004, International Journal on Software Tools for Technology Transfer, V6, P158, DOI 10.1007/s10009-003-0117-6
   Hirzel M., 2017, Proceedings of the 11th ACM International Conference on Distributed and Event-based Systems, DEBS'17, P11
   Hirzel Martin., 2012, Proceedings of the 6th ACM International Conference on Distributed Event-Based Systems, DEBS'12, P191, DOI 10.1145/2335484.2335506
   Ichimaru Y, 1999, PSYCHIAT CLIN NEUROS, V53, P175, DOI 10.1046/j.1440-1819.1999.00527.x
   Inc EsperTech, 2006, ESP
   Inc Lightbend, 2020, AKK STREAMS
   InfluxDB, 2020, INFLUXDB REAL TIM VI
   Jafarpour H., 2019, P EDBT 22 INT C EXT, P524
   Johann P., 2001, Semantics, Applications, and Implementation of Program Generation. Second International Workshop, SAIG 2001. Proceedings (Lecture Notes in Computer Science Vol.2196), P47
   Kahn Gilles, 1977, Information Processing, P993
   Kiselyov O, 2017, ACM SIGPLAN NOTICES, V52, P285, DOI 10.1145/3093333.3009880
   Köhler BU, 2002, IEEE ENG MED BIOL, V21, P42, DOI 10.1109/51.993193
   Kulkarni S, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P239, DOI 10.1145/2723372.2742788
   LEE EA, 1987, IEEE T COMPUT, V36, P24, DOI 10.1109/TC.1987.5009446
   LEE EA, 1987, P IEEE, V75, P1235, DOI 10.1109/PROC.1987.13876
   Leucker M, 2009, J LOGIC ALGEBR PROGR, V78, P293, DOI 10.1016/j.jlap.2008.08.004
   Li J, 2005, SIGMOD REC, V34, P39, DOI 10.1145/1058150.1058158
   Madden S, 2002, FOURTH IEEE WORKSHOP ON MOBILE COMPUTING SYSTEMS AND APPLICATIONS, PROCEEDINGS, P49, DOI 10.1109/MCSA.2002.1017485
   Maier Ingo., 2012, Deprecating the observer pattern with Scala
   Mamouras K, 2020, IEEE T COMPUT AID D, V39, P3868, DOI 10.1109/TCAD.2020.3013053
   Mamouras K, 2020, LECT NOTES COMPUT SC, V12075, P394, DOI 10.1007/978-3-030-44914-8_15
   Mamouras K, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P670, DOI 10.1145/3314221.3314580
   Mamouras K, 2017, ACM SIGPLAN NOTICES, V52, P693, DOI [10.1145/3140587.3062369, 10.1145/3062341.3062369]
   Mei Y, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P193
   Meijer E, 2012, COMMUN ACM, V55, P66, DOI 10.1145/2160718.2160735
   Meyerovich LA, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P1
   Moody George B., 2018, SINGLE CHANNEL QRS D
   Motwani R., 2003, P 1 BIENN C INN DAT
   Murray DG, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P439, DOI 10.1145/2517349.2522738
   Naughton J., 2001, IEEE Data Engineering Bulletin
   Neumeyer L., 2010, Proceedings 2010 10th IEEE International Conference on Data Mining Workshops (ICDMW 2010), P170, DOI 10.1109/ICDMW.2010.172
   Nikolic M, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P95, DOI 10.1145/3035918.3035935
   Nilsson H, 2003, LECT NOTES COMPUT SC, V2562, P376
   Noghabi SA, 2017, PROC VLDB ENDOW, V10, P1634, DOI 10.14778/3137765.3137770
   Oracle, 2014, JAV STREAM
   Oracle Corporation, 2019, OR STREAM AN
   OROURKE MF, 1971, AM HEART J, V82, P687, DOI 10.1016/0002-8703(71)90340-1
   PAN J, 1985, IEEE T BIO-MED ENG, V32, P230, DOI 10.1109/TBME.1985.325532
   ReactiveX, 2020, REACTIVEX
   Reactor, 2020, PROJ REACT CREAT EFF
   RxJava, 2020, RXJAVA REACT EXT JVM
   Sadri R, 2004, ACM T DATABASE SYST, V29, P282, DOI 10.1145/1005566.1005568
   Schneider S, 2015, IEEE T COMPUT, V64, P504, DOI 10.1109/TC.2013.221
   Suhothayan S., 2011, Proceedings of the 2011 ACM workshop on Gateway computing environments, P43, DOI DOI 10.1145/2110486.2110493
   Svenningsson J, 2002, ACM SIGPLAN NOTICES, V37, P124, DOI 10.1145/583852.581491
   Takano A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P306, DOI 10.1145/224164.224221
   Tangwongsan K, 2015, PROC VLDB ENDOW, V8, P702, DOI 10.14778/2752939.2752940
   TAQ, 2019, TAQ DAT
   Thati P, 2005, ELECTRON NOTES THEOR, V113, P145, DOI 10.1016/j.entcs.2004.01.029
   Thies W, 2002, LECT NOTES COMPUT SC, V2304, P179
   Toshniwa A, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P147, DOI 10.1145/2588555.2595641
   Trill, 2020, TRILL DOC BEST PRACT
   Tucker Pete, 2002, BENCHMARK QUERIES DA
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Wu E., 2006, P ASS COMP MACH ACM, P407
   Zaharia M, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P423, DOI 10.1145/2517349.2522737
   Zaharia Matei., 2012, NSDI 12
   Zemke Fred, 2007, PATTERN MATCHING SE
   Zong W, 2003, COMPUT CARDIOL, V30, P259, DOI 10.1109/CIC.2003.1291140
NR 109
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 183
DI 10.1145/3428251
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900060
OA gold
DA 2024-07-18
ER

PT J
AU Moller, A
   Veileborg, OH
AF Moller, Anders
   Veileborg, Oskar Haarklou
TI Eliminating Abstraction Overhead of Java Stream Pipelines using
   Ahead-of-Time Program Optimization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program optimization; static program analysis; Java 8
ID ESCAPE ANALYSIS
AB Java 8 introduced streams that allow developers to work with collections of data using functional-style operations. Streams are often used in pipelines of operations for processing the data elements, which leads to concise and elegant program code. However, the declarative data processing style comes at a cost. Compared to processing the data with traditional imperative language mechanisms, constructing stream pipelines requires extra heap objects and virtual method calls, which often results in significant run-time overheads.
   In this work we investigate how to mitigate these overheads to enable processing data in the declarative style without sacrificing performance. We argue that ahead-of-time bytecode-to-bytecode transformation is a suitable approach to optimization of stream pipelines, and we present a static analysis that is designed to guide such transformations. Experimental results show a significant performance gain, and that the technique works for realistic stream pipelines. For 10 of 11 micro-benchmarks, the optimizer is able to produce bytecode that is as effective as hand-written imperative-style code. Additionally, 77% of 6 879 stream pipelines found in real-world Java programs are optimized successfully.
C1 [Moller, Anders; Veileborg, Oskar Haarklou] Aarhus Univ, Aarhus, Denmark.
C3 Aarhus University
RP Moller, A (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM amoeller@cs.au.dk; oskar@cs.au.dk
RI Möller, Andrea/GNP-5183-2022
OI Möller, Andrea/0000-0002-2345-1299; Moller, Anders/0000-0003-1333-2314
FU European Research Council (ERC) under the European Union's Horizon 2020
   research and innovation program [647544]
FX This work was supported by the European Research Council (ERC) under the
   European Union's Horizon 2020 research and innovation program (grant
   agreement No 647544).
CR Adamus R, 2015, ACSIS-ANN COMPUT SCI, V5, P935, DOI 10.15439/2015F156
   Agesen O, 1995, LECT NOTES COMPUT SC, V952, P2
   Arnold M, 2005, P IEEE, V93, P449, DOI 10.1109/JPROC.2004.840305
   Arnold M, 2000, ACM SIGPLAN NOTICES, V35, P52, DOI 10.1145/351403.351416
   Aycock J, 2003, ACM COMPUT SURV, V35, P97, DOI 10.1145/857076.857077
   Biboudis Aggelos., 2015, 29 EUR C OBJ OR PROG, P591, DOI 10.4230/LIPIcs.ECOOP.2015.591
   Bravenboer M, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P243
   Budimlic Z, 1997, CONCURRENCY-PRACT EX, V9, P445, DOI 10.1002/(SICI)1096-9128(199706)9:6<445::AID-CPE301>3.0.CO;2-L
   Budimlic Zoran, 1998, CRPCTR98746 RIC U
   CALLAHAN D, 1986, SIGPLAN NOTICES, V21, P152, DOI 10.1145/13310.13327
   CHASE DR, 1990, SIGPLAN NOTICES, V25, P296, DOI 10.1145/93548.93585
   Choi JD, 1999, ACM SIGPLAN NOTICES, V34, P1, DOI 10.1145/320385.320386
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   Detlefs D, 1999, LECT NOTES COMPUT SC, V1628, P258
   Dolby J, 1998, ACM SIGPLAN NOTICES, V33, P1, DOI 10.1145/286942.286943
   Dolby Julian, 2010, TJ WATSON LIB ANAL
   Georges A, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P57
   KAM JB, 1977, ACTA INFORM, V7, P305, DOI 10.1007/BF00290339
   Khatchadourian R, 2020, SCI COMPUT PROGRAM, V195, DOI 10.1016/j.scico.2020.102476
   Kiselyov O, 2017, ACM SIGPLAN NOTICES, V52, P285, DOI 10.1145/3093333.3009880
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Mazinanian D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133909
   Munaiah N, 2017, EMPIR SOFTW ENG, V22, P3219, DOI 10.1007/s10664-017-9512-6
   Murray DG, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P121
   Nystrom Erik M., 2004, Proceedings of the 2004 ACM SIGPLAN-SIGSOFT Workshop on Program Analysis For Software Tools and Engineering, PASTE'04, P43
   Oracle, 2014, JAV UT STREAM DOC JD
   Oracle, JAV MICR HARN
   Oracle, 2014, JDK 8
   Palladinos Nick, 2014, ABS14066631 CORR
   Palladinos Nick, 2014, LINQOPTIMIZER AUTOMA
   PARK YG, 1992, SIGPLAN NOTICES, V27, P116, DOI 10.1145/143103.143125
   Prokopec A, 2017, SCALA'17: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P29, DOI 10.1145/3136000.3136002
   Prokopec Aleksandar, 2013, SCALABLITZ LIGHTNING
   Rose John, 2015, HOTSPOT DEV MAILING
   Schultz UP, 2003, ACM T PROGR LANG SYS, V25, P452, DOI 10.1145/778559.778561
   Shabalin D, 2018, PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA (SCALA '18), P61, DOI 10.1145/3241653.3241660
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Smaragdakis Y, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P17, DOI 10.1145/1926385.1926390
   Spath J., 2016, PROC EUR C OBJECT OR, p22:1, DOI [10.4230/DARTS.2.1.12, DOI 10.4230/LIPICS.ECOOP.2016.22]
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Stucki, 2015, P 6 ACM SIGPLAN S SC, P41, DOI DOI 10.1145/2774975.2774981
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   WATERS RC, 1991, ACM T PROGR LANG SYS, V13, P52, DOI 10.1145/114005.102806
NR 43
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 168
DI 10.1145/3428236
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900045
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Urban, C
   Christakis, M
   Wüstholz, V
   Zhang, FY
AF Urban, Caterina
   Christakis, Maria
   Wuestholz, Valentin
   Zhang, Fuyuan
TI Perfectly Parallel Fairness Certification of Neural Networks
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Fairness; Neural Networks; Abstract Interpretation; Static Analysis
ID ROBUSTNESS
AB Recently, there is growing concern that machine-learned software, which currently assists or even automates decision making, reproduces, and in the worst case reinforces, bias present in the training data. The development of tools and techniques for certifying fairness of this software or describing its biases is, therefore, critical. In this paper, we propose a perfectly parallel static analysis for certifying fairness of feed-forward neural networks used for classification of tabular data. When certification succeeds, our approach provides definite guarantees, otherwise, it describes and quantifies the biased input space regions. We design the analysis to be sound, in practice also exact, and configurable in terms of scalability and precision, thereby enabling pay-as-you-go certification. We implement our approach in an open-source tool called LIBRA and demonstrate its effectiveness on neural networks trained on popular datasets.
C1 [Urban, Caterina] INRIA, Paris, France.
   [Urban, Caterina] PSL Univ, CNRS, Ecole Normale Super, DIENS, Paris, France.
   [Christakis, Maria; Zhang, Fuyuan] MPI SWS, Saarbrucken, Germany.
   [Wuestholz, Valentin] ConsenSys, Berlin, Germany.
C3 Inria; Universite PSL; Ecole Normale Superieure (ENS); Centre National
   de la Recherche Scientifique (CNRS)
RP Urban, C (corresponding author), INRIA, Paris, France.; Urban, C (corresponding author), PSL Univ, CNRS, Ecole Normale Super, DIENS, Paris, France.
EM caterina.urban@inria.fr; maria@mpi-sws.org;
   valentin.wustholz@consensys.net; fuyuan@mpi-sws.org
OI Urban, Caterina/0000-0002-8127-9642; Christakis,
   Maria/0000-0002-2649-1958
FU DFG [389792660, TRR 248]
FX We are grateful to the anonymous reviewers for their constructive
   feedback. This work was supported by DFG grant 389792660 as part of TRR
   248 (see https://perspicuous-computing.science).
CR Albarghouthi A, 2019, FAT*'19: PROCEEDINGS OF THE 2019 CONFERENCE ON FAIRNESS, ACCOUNTABILITY, AND TRANSPARENCY, P211, DOI 10.1145/3287560.3287588
   Albarghouthi A, 2017, LECT NOTES COMPUT SC, V10426, P181, DOI 10.1007/978-3-319-63387-9_9
   Nguyen A, 2015, PROC CVPR IEEE, P427, DOI 10.1109/CVPR.2015.7298640
   [Anonymous], 2017, P ACM PROGRAM LANG, DOI DOI 10.1145/3133904
   Athalye A, 2018, PR MACH LEARN RES, V80
   Barocas S, 2016, CALIF LAW REV, V104, P671, DOI 10.15779/Z38BG31
   Barrett C.W., 2018, Handbook of Model Checking, P305, DOI DOI 10.1007/978-3-319-10575-8_11
   Bastani O., 2019, P ACM PROGR LANG, V3, P1
   Buolamwini J., 2018, FACCT, P77
   Carlini N., 2016, ARXIV160704311
   Carlini N, 2017, P IEEE S SECUR PRIV, P39, DOI 10.1109/SP.2017.49
   Carlini Nicholas, 2017, ACM WORKSH ART INT S, P3
   Chaudhuri S, 2012, COMMUN ACM, V55, P107, DOI [10.1145/2240236.2240262, 10.1145/2240230.2240282]
   Chen LQ, 2008, LECT NOTES COMPUT SC, V5356, P3
   Chiappa S, 2019, AAAI CONF ARTIF INTE, P7801
   Clarke L. A., 1976, IEEE Transactions on Software Engineering, VSE-2, P215, DOI 10.1109/TSE.1976.233817
   Cornelius Cory, 2019, ABS190200541 CORR
   Cousot P, 2002, THEOR COMPUT SCI, V277, P47, DOI 10.1016/S0304-3975(00)00313-3
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Datta A, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1193, DOI 10.1145/3133956.3134097
   Engstrom L., 2018, ARXIV180710272
   Feldman M, 2015, KDD'15: PROCEEDINGS OF THE 21ST ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P259, DOI 10.1145/2783258.2783311
   Galhotra S, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P498, DOI 10.1145/3106237.3106277
   Gehr T, 2018, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2018.00058
   Ghorbal K, 2009, LECT NOTES COMPUT SC, V5643, P627, DOI 10.1007/978-3-642-02658-4_47
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Goodfellow I, 2016, ADAPT COMPUT MACH LE, P1
   Goodfellow I. J., 2015, 3 INT C LEARNING REP
   Gopinath Divya, 2018, ABS180710439 CORR
   Goubault Eric, 2013, Programming Languages and Systems. 11th Asian Symposium, APLAS 2013. Proceedings: LNCS 8301, P50, DOI 10.1007/978-3-319-03542-0_4
   Grgic-Hlaca N., 2016, NIPS S MACH LEARN LA, V1, P2
   Guo Cheng, 2016, Entity Embeddings of Categorical Variables
   Hanin B, 2019, ADV NEUR IN, V32
   Hardt M, 2016, ADV NEUR IN, V29
   Tran HD, 2020, LECT NOTES COMPUT SC, V12224, P18, DOI 10.1007/978-3-030-53288-8_2
   Huang Ruitong, 2015, CoRR
   Huang XW, 2017, LECT NOTES COMPUT SC, V10426, P3, DOI 10.1007/978-3-319-63387-9_1
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Kay M, 2015, CHI 2015: PROCEEDINGS OF THE 33RD ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, P3819, DOI 10.1145/2702123.2702520
   Kilbertus N, 2017, ADV NEUR IN, V30
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Kusner Matt J, 2017, ADV NEURAL INFORM PR, P4066, DOI DOI 10.48550/ARXIV.1703.06856
   Larson J., 2016, How we analyzed the compas recidivism algorithm
   Li JL, 2019, LECT NOTES COMPUT SC, V11822, P296, DOI 10.1007/978-3-030-32304-2_15
   Lum K., 2016, Significance, V13, P14, DOI [DOI 10.1111/J.1740-9713.2016.00960.X, 10.1111/j.1740-9713.2016.00960.x]
   Majumdar R, 2009, REAL TIM SYST SYMP P, P355, DOI 10.1109/RTSS.2009.17
   Manisha Padala, 2020, IJCAI
   Mehrabi N., 2019, CORR
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Miné A, 2006, LECT NOTES COMPUT SC, V3855, P348
   Miné A, 2004, LECT NOTES COMPUT SC, V2986, P3
   Mirman Matthew, 2018, INT C MACH LEARN, P3575
   Nabi R, 2018, AAAI CONF ARTIF INTE, P1931
   Nair Vinod, 2010, INT C INT C MACHINE, P807
   Obermeyer Z, 2019, SCIENCE, V366, P447, DOI 10.1126/science.aax2342
   Odena A, 2019, PR MACH LEARN RES, V97
   Pearl J., 2009, CAUSALITY MODELS REA
   Pei KX, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P1, DOI 10.1145/3132747.3132785
   Pulina L, 2010, LECT NOTES COMPUT SC, V6174, P243, DOI 10.1007/978-3-642-14295-6_24
   Ruoss A., 2020, ARXIV PREPRINT ARXIV
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Sun YC, 2018, IEEE INT CONF AUTOM, P109, DOI 10.1145/3238147.3238172
   Szegedy C, 2014, INT C LEARN REPR
   Tabacof P, 2016, IEEE IJCNN, P426, DOI 10.1109/IJCNN.2016.7727230
   Tian YC, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P303, DOI 10.1145/3180155.3180220
   Tramèr F, 2017, 2017 IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P), P401, DOI 10.1109/EuroSP.2017.29
   Udeshi S, 2018, IEEE INT CONF AUTOM, P98, DOI 10.1145/3238147.3238165
   Urban Caterina, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P683, DOI 10.1007/978-3-319-89884-1_24
   Vechev Martin T., 2019, ABS190312519 CORR
   Vladu Adrian, 2018, PROC 6 INT C LEARN R
   Wang SQ, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P1599
   Yurochkin Mikhail, 2020, ICLR
   Zhang Fuyuan, 2020, ESEC FSE
   Zhang MS, 2018, IEEE INT CONF AUTOM, P132, DOI 10.1145/3238147.3238187
NR 79
TC 20
Z9 21
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 185
DI 10.1145/3428253
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900062
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Charguéraud, A
AF Chargueraud, Arthur
TI Separation Logic for Sequential Programs (Functional Pearl)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Separation Logic; Coq; Program verification
ID FORMAL VERIFICATION; IMPLEMENTATION; POLYMORPHISM; CORRECTNESS; CODE
AB This paper presents a simple mechanized formalization of Separation Logic for sequential programs. This formalization is aimed for teaching the ideas of Separation Logic, including its soundness proof and its recent enhancements. The formalization serves as support for a course that follows the style of the successful Software Foundations series, with all the statement and proofs formalized in Coq. This course only assumes basic knowledge of lambda-calculus, semantics and logics, and therefore should be accessible to a broad audience.
C1 [Chargueraud, Arthur] INRIA, Nancy, France.
C3 Inria
RP Charguéraud, A (corresponding author), INRIA, Nancy, France.; Charguéraud, A (corresponding author), Univ Strasbourg, CNRS, ICube, Strasbourg, France.
EM arthur.chargueaud@inria.fr
FU French National Research Organization [ANR-15-CE25-008]
FX I wish to thank Francois Pottier and Armael Gueneau, with whom I have
   worked on extensions of Separation Logic. I am grateful to Jacques-Henri
   Jourdan, who explained to me a number of techniques used in Iris. I also
   wish to thank the anonymous reviewers for their useful suggestions, as
   well as Andrew Appel, Lars Birkedal, Adam Chlipala, Magnus Myreen,
   Gerwin Klein, Peter Lammich, and Zhong Shao, who helped complete the
   related work section. This research was partly supported by the French
   National Research Organization (project VOCAL ANR-15-CE25-008).
CR Ahmed Amal J., 2004, Ph. D. Dissertation
   [Anonymous], 2016, BC PIERCE MANY CONTR
   Appel A.W., 2014, Program logics for certified compilers
   Appel AW, 2007, LECT NOTES COMPUT SC, V4732, P5
   Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   Appel Andrew W., 2020, VERIFIABLE C SOFTWAR, V5beta
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Arthur Chargueraud, 2020, SUPPLEMENTARY MAT
   Bannister C, 2018, LECT NOTES COMPUT SC, V10895, P68, DOI 10.1007/978-3-319-94821-8_5
   Bengtson Jesper, 2011, Interactive Theorem Proving. Proceedings Second International Conference, ITP 2011, P22, DOI 10.1007/978-3-642-22863-6_5
   Bengtson Jesper, 2012, INTERACTIVE THEOREM, DOI [10.1007/978-3-642-32347-8_21, DOI 10.1007/978-3-642-32347-8_21]
   Biering B, 2005, LECT NOTES COMPUT SC, V3444, P233
   Biering B, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275499
   Birkedal L, 2005, IEEE S LOG, P260
   Birkedal L, 2008, LECT NOTES COMPUT SC, V5126, P348, DOI 10.1007/978-3-540-70583-3_29
   Birkedal L, 2006, LOG METH COMPUT SCI, V2, DOI 10.2168/LMCS-2(5:1)2006
   Birkedal L, 2007, LECT NOTES COMPUT SC, V4423, P93
   Birkedal Lars, 2020, Lecture Notes on Iris: Higher-Order Concurrent Separation Logic
   Bizjak A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290378
   Burstall R. M., 1972, MACHINE INTELLIGENCE
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Calcagno C, 2015, LECT NOTES COMPUT SC, V9058, P3, DOI 10.1007/978-3-319-17524-9_1
   Cao QX, 2018, J AUTOM REASONING, V61, P367, DOI 10.1007/s10817-018-9457-5
   Cao Qinxiang, 2018, PROOF PEARL MA UNPUB
   Chargueraud A., 2010, Ph.D. thesis
   Charguéraud A, 2019, J AUTOM REASONING, V62, P331, DOI 10.1007/s10817-017-9431-7
   Charguéraud A, 2017, LECT NOTES COMPUT SC, V10201, P260, DOI 10.1007/978-3-662-54434-1_10
   Charguéraud A, 2015, LECT NOTES COMPUT SC, V9236, P137, DOI 10.1007/978-3-319-22102-1_9
   Chargueraud A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P418
   Chen HG, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P18, DOI 10.1145/2815400.2815402
   Chlipala A, 2015, ACM SIGPLAN NOTICES, V50, P609, DOI [10.1145/2676726.2677003, 10.1145/2775051.2677003]
   Chlipala A, 2013, ACM SIGPLAN NOTICES, V48, P391, DOI [10.1145/2544174.2500592, 10.1145/2500365.2500592]
   Chlipala A, 2011, ACM SIGPLAN NOTICES, V46, P234, DOI 10.1145/1993316.1993526
   Chlipala A, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P79
   Chlipala Adam., Formal reasoning about programs
   Costanzo David., 2012, Programming Languages and Systtms - 10th Asian Symposium, APLAS 2012, Kyoto, Japan, December 1U13, P332, DOI [10.1007/978-3-642-35182-2, DOI 10.1007/978-3-642-35182-2]
   Dockins R, 2009, LECT NOTES COMPUT SC, V5904, P161, DOI 10.1007/978-3-642-10672-9_13
   Dockins R, 2008, ELECTRON NOTES THEOR, V218, P5, DOI 10.1016/j.entcs.2008.10.002
   Ericsson AS, 2019, J AUTOM REASONING, V63, P463, DOI 10.1007/s10817-018-9487-z
   Feng XY, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P67, DOI 10.1145/1190315.1190325
   Feng X, 2006, ACM SIGPLAN NOTICES, V41, P401, DOI 10.1145/1133981.1134028
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   Gordon Michael J. C., 1989, MECH PROGRAMMING LOG, P387, DOI [10.1007/978-1-4612-3658-0_10, DOI 10.1007/978-1-4612-3658-0_10]
   Gotsman A, 2011, ELECTRON NOTES THEOR, V276, P171, DOI 10.1016/j.entcs.2011.09.021
   Guéneau A, 2017, LECT NOTES COMPUT SC, V10201, P584, DOI 10.1007/978-3-662-54434-1_22
   Gueneau Armael, 2019, INTERACTIVE THEOREM, V18, P1
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hobor A, 2008, LECT NOTES COMPUT SC, V4960, P353
   Hobor A, 2013, ACM SIGPLAN NOTICES, V48, P523, DOI 10.1145/2480359.2429131
   Hobor A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P171, DOI 10.1145/1706299.1706322
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Jensen JB, 2013, ACM SIGPLAN NOTICES, V48, P301, DOI 10.1145/2480359.2429105
   Jensen JB, 2012, LECT NOTES COMPUT SC, V7211, P377, DOI 10.1007/978-3-642-28869-2_19
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kennedy Andrew., 2013, P 15 S PRINCIPLES PR, P13, DOI DOI 10.1145/2505879.2505897
   Klein Gerwin, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P332, DOI 10.1007/978-3-642-32347-8_22
   Kolanski R, 2009, LECT NOTES COMPUT SC, V5674, P276, DOI 10.1007/978-3-642-03359-9_20
   Krebbers R, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236772
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krishnaswami NR, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P63
   Krishnaswami Neelakantan R., 2007, P FORM TECHN JAV PRO
   Krishnaswami Neelakantan R., 2012, THESIS US, DOI [10.5555/2519942, DOI 10.5555/2519942]
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Lammich P, 2019, J AUTOM REASONING, V62, P481, DOI 10.1007/s10817-017-9437-1
   Lammich Peter, 2019, LIPICS, V22, P1, DOI [10.4230/LIPIcs.ITP.2019.22, DOI 10.4230/LIPICS.ITP.2019.22]
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Marti N, 2006, LECT NOTES COMPUT SC, V4260, P400
   McCreight A, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P468, DOI 10.1145/1250734.1250788
   Mével G, 2019, LECT NOTES COMPUT SC, V11423, P3, DOI 10.1007/978-3-030-17184-1_1
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Myreen M. O., 2008, THESIS
   Myreen MO, 2007, LECT NOTES COMPUT SC, V4424, P568
   Nanevski A, 2008, ACM SIGPLAN NOTICES, V43, P229, DOI 10.1145/1411203.1411237
   Nanevski A, 2006, ACM SIGPLAN NOTICES, V41, P62, DOI 10.1145/1160074.1159812
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   Ni Z., 2006, Proc. of the 33rd Symp. on Principles of Programming Languages (POPL), P320, DOI DOI 10.1145/1111320.1111066
   Ni ZZ, 2007, LECT NOTES COMPUT SC, V4732, P189
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn P, 2019, COMMUN ACM, V62, P86, DOI 10.1145/3211968
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   Philippaerts P, 2014, SCI COMPUT PROGRAM, V82, P77, DOI 10.1016/j.scico.2013.01.006
   Pottier F, 2008, IEEE S LOG, P331, DOI 10.1109/LICS.2008.16
   Pottier F, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P3, DOI 10.1145/3018610.3018624
   Preoteasa V, 2006, LECT NOTES COMPUT SC, V4085, P508
   Reus B, 2006, LECT NOTES COMPUT SC, V4207, P575
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Reynolds John C, 2006, SHORT COURSE SEPARAT
   Schwinghammer J, 2010, LECT NOTES COMPUT SC, V6014, P2, DOI 10.1007/978-3-642-12032-9_2
   Schwinghammer J, 2009, LECT NOTES COMPUT SC, V5771, P440, DOI 10.1007/978-3-642-04027-6_32
   Svendsen Kasper, 2010, ECOOP 2010 S OBJECT, DOI [10.1007/978-3-642-14107-2_9, DOI 10.1007/978-3-642-14107-2_9]
   Tassarotti J, 2017, LECT NOTES COMPUT SC, V10201, P909, DOI 10.1007/978-3-662-54434-1_34
   Tuch H, 2007, ACM SIGPLAN NOTICES, V42, P97, DOI 10.1145/1190215.1190234
   Tuerk Thomas, 2010, VS THEOR WORKSH 3 IN
   Tuerk Thomas, 2011, UCAMCLTR799
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   Varming C, 2008, ELECTRON NOTES THEOR, V218, P371, DOI 10.1016/j.entcs.2008.10.022
   Weber T, 2004, LECT NOTES COMPUT SC, V3210, P250
   Wei Wang, 2011, Proceedings of the 2011 IEEE 5th International Symposium on Theoretical Aspects of Software Engineering (TASE 2011), P125, DOI 10.1109/TASE.2011.16
   Xu FW, 2016, LECT NOTES COMPUT SC, V9780, P59, DOI 10.1007/978-3-319-41540-6_4
   Yu DC, 2004, SCI COMPUT PROGRAM, V50, P101, DOI 10.1016/j.scico.2004.01.003
   Yu DC, 2003, LECT NOTES COMPUT SC, V2618, P363
NR 105
TC 15
Z9 17
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 116
DI 10.1145/3408998
PG 34
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700030
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Haudebourg, T
   Genet, T
   Jensen, T
AF Haudebourg, Timothee
   Genet, Thomas
   Jensen, Thomas
TI Regular Language Type Inference with Term Rewriting
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Verification; Term Rewriting; Regular Languages; Type Inference;
   Higher-Order; Functional Languages
ID PRINCIPAL TYPE-SCHEME
AB This paper defines a new type system applied to the fully automatic verification of safety properties of tree-processing higher-order functional programs. We use term rewriting systems to model the program and its semantics and tree automata to model algebraic data types. We define the regular abstract interpretation of the input term rewriting system where the abstract domain is a set of regular languages. From the regular abstract interpretation we derive a type system where each type is a regular language. We define an inference procedure for this type system which allows us check the validity of safety properties. The inference mechanism is built on an invariant learning procedure based on the tree automata completion algorithm. This invariant learning procedure is regularly-complete and complete in refutation, meaning that if it is possible to give a regular type to a term then we will eventually find it, and if there is no possible type (regular or not) then we will eventually find a counter-example.
C1 [Haudebourg, Timothee] Univ Rennes, INRIA, CNRS, IRISA, Rennes, France.
   [Genet, Thomas] Univ Rennes, IRISA, Rennes, France.
   [Jensen, Thomas] INRIA, Rennes, France.
C3 Inria; Universite de Rennes; Centre National de la Recherche
   Scientifique (CNRS); Universite de Rennes; Inria
RP Haudebourg, T (corresponding author), Univ Rennes, INRIA, CNRS, IRISA, Rennes, France.
EM timothee.haudebourg@irisa.fr; thomas.genet@irisa.fr;
   thomas.jensen@inria.fr
CR Baader Franz, 1998, TERM REWRITING ALL
   Blumensath A, 2000, IEEE S LOG, P51, DOI 10.1109/LICS.2000.855755
   Castagna G, 2016, ACM SIGPLAN NOTICES, V51, P378, DOI 10.1145/3022670.2951928
   Castagna G, 2014, ACM SIGPLAN NOTICES, V49, P5, DOI 10.1145/2535838.2535840
   Champion A, 2018, LECT NOTES COMPUT SC, V10805, P365, DOI 10.1007/978-3-319-89960-2_20
   Claessen K, 2015, LECT NOTES ARTIF INT, V9150, P332, DOI 10.1007/978-3-319-20615-8_23
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Comon H., 2007, TREE AUTOMATA TECHNI
   DELLAROCCA SR, 1988, THEOR COMPUT SCI, V59, P181, DOI 10.1016/0304-3975(88)90101-6
   Experiments, 2020, EXP REG LANG TYP INF
   Genet Thomas, 2013, Implementation and Application of Automata. 18th International Conference, CIAA 2013. Proceedings: LNCS 7982, P134, DOI 10.1007/978-3-642-39274-0_13
   Genet T, 2018, LECT NOTES COMPUT SC, V10803, P565, DOI 10.1007/978-3-319-89366-2_31
   Genet T, 2016, J LOG ALGEBR METHODS, V85, P3, DOI 10.1016/j.jlamp.2015.05.003
   Genet T, 2010, J SYMB COMPUT, V45, P574, DOI 10.1016/j.jsc.2010.01.009
   Genet Thomas, 2001, REACHABILITY ANAL TR
   Haudebourg Timothee, 2020, TIMBUK 4
   Haudebourg Timothee, 2020, REGULAR LANGUAGE TYP
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Inria, 2016, COQ PROOF ASSISTANT
   JOHNSSON T, 1985, LECT NOTES COMPUT SC, V201, P190
   Jones ND, 2007, THEOR COMPUT SCI, V375, P120, DOI 10.1016/j.tcs.2006.12.030
   Jones Neil D., 1987, ABSTRACT INTERPRETAT
   Kennaway R, 1996, J SYMB COMPUT, V21, P15, DOI 10.1006/jsco.1996.0002
   Khoussainov B., 1995, Logic and Computational Complexity. International Workshop LCC '94. Selected Papers, P367
   Kobayashi N, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P222
   Kobayashi N, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P495, DOI 10.1145/1706299.1706355
   Kobayashi N, 2009, ACM SIGPLAN NOTICES, V44, P416, DOI 10.1145/1594834.1480933
   Kobayashi Naoki, 2011, MOCHI MODEL CHECKER
   Le Gall T, 2007, LECT NOTES COMPUT SC, V4634, P52
   Matsumoto Y, 2015, LECT NOTES COMPUT SC, V9458, P295, DOI 10.1007/978-3-319-26529-2_16
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Nipkow Tobias, 2002, ISABELLE HOL PROOF A, V2283
   Ong CHL, 2006, IEEE S LOG, P81, DOI 10.1109/LICS.2006.38
   Ong CHL, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P587, DOI 10.1145/1926385.1926453
   REYNOLDS J. C., 1969, INFORMATION PROCESSI, V1, P456
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Sato R, 2017, LECT NOTES COMPUT SC, V10201, P831, DOI 10.1007/978-3-662-54434-1_31
   Vazou N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P48, DOI 10.1145/2784731.2784745
   Vazou N, 2014, ACM SIGPLAN NOTICES, V49, P39, DOI [10.1145/2633357.2633366, 10.1145/2775050.2633366]
   Vazou N, 2013, LECT NOTES COMPUT SC, V7792, P209, DOI 10.1007/978-3-642-37036-6_13
   Vazou Niki, 2016, THESIS U CALIFORNIA
NR 41
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 112
DI 10.1145/3408994
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700026
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Tejiscák, M
AF Tejiscak, Matus
TI A Dependently Typed Calculus with Pattern Matching and Erasure Inference
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE dependent types; erasure; inference
ID LANGUAGE
AB Some parts of dependently typed programs constitute evidence of their type-correctness and, once checked, are unnecessary for execution. These parts can easily become asymptotically larger than the remaining runtime-useful computation, which can cause normally linear-time programs run in exponential time, or worse. We should not make programs run slower by just describing them more precisely.
   Current dependently typed systems do not erase such computation satisfactorily. By modelling erasure indirectly through type universes or irrelevance, they impose the limitations of these means to erasure. Some useless computation then cannot be erased and idiomatic programs remain asymptotically sub-optimal.
   In this paper, we explain why we need erasure, that it is different from other concepts like irrelevance, and propose a dependently typed calculus with pattern matching with erasure annotations to model it. We show that erasure in well-typed programs is sound in that it commutes with reduction. Assuming the Church-Rosser property, erasure furthermore preserves convertibility in general.
   We also give an erasure inference algorithm for erasure-unannotated or partially annotated programs and prove it sound, complete, and optimal with respect to the typing rules of the calculus.
   Finally, we show that this erasure method is effective in that it can not only recover the expected asymptotic complexity in compiled programs at run time, but it can also shorten compilation times.
C1 [Tejiscak, Matus] Univ St Andrews, Sch Comp Sci, St Andrews, Fife, Scotland.
C3 University of St Andrews
RP Tejiscák, M (corresponding author), Univ St Andrews, Sch Comp Sci, St Andrews, Fife, Scotland.
EM ziman@functor.sk
FU University of St Andrews, School of Computer Science
FX This work has been supported by the University of St Andrews, School of
   Computer Science.
CR Abel A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110277
   Abel A, 2011, LECT NOTES COMPUT SC, V6604, P57, DOI 10.1007/978-3-642-19805-2_5
   Abel Andreas, 2017, AGDA MAILING LI 0729
   Ahman D, 2017, ACM SIGPLAN NOTICES, V52, P515, DOI 10.1145/3093333.3009878
   [Anonymous], 2020, CHICKEN SCHEM
   [Anonymous], 2020, AGDA 26 1 DOCUMENTAT
   [Anonymous], 1999, The Coq Proof Assistant
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Barras B, 2008, LECT NOTES COMPUT SC, V4962, P365, DOI 10.1007/978-3-540-78499-9_26
   Brady E, 2004, ANN NY ACAD SCI, V3085, P115
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Brady Edwin, 2020, IDRIS 2 QUANTI UNPUB
   Brady Edwin C., 2005, PRACTICAL IMPLEMENTA
   Dockins Robert, 2014, RE PROBLEM TACTIC GE
   Dowling W. F., 1984, Journal of Logic Programming, V1, P267, DOI 10.1016/0743-1066(84)90014-1
   Eisenberg Richard A, 2016, THESIS U PENNSYLVANI
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Gelfound M., 1988, Logic Programming: Proceedings of the Fifth International Conference and Symposium, P1070
   Goguen H, 2006, LECT NOTES COMPUT SC, V4060, P521, DOI 10.1007/11780274_27
   Gundry Adam, 2013, Ph. D. Dissertation
   Herbelin Hugo, 2014, RE PROBLEM TACTIC GE
   Hurkens A. J. C., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P266, DOI 10.1007/BFb0014058
   Leino KRM, 2010, LECT NOTES COMPUT SC, V6015, P312, DOI 10.1007/978-3-642-12002-2_26
   Leivent Jonathan, MINDLESS CODING
   Leivent Jonathan, RE PROBLEM TACTIC GE
   Letouzey P, 2002, LECT NOTES COMPUT SC, V2646, P200
   Letouzey P, 2008, LECT NOTES COMPUT SC, V5028, P359, DOI 10.1007/978-3-540-69407-6_39
   Letouzey Pierre, 2004, Ph. D. Dissertation
   Letouzey Pierre., 2005, IMPLICIT NONCOMPUTAT
   McBride Conor, 2016, LNCS, P207, DOI DOI 10.1007/978-3-319-30936-1
   McBride Conor, 2000, THESIS U EDINBURGH C
   Miquel Alexandre, 2001, INT C TYP LAMBD CALC, DOI [10.1007/3-540-45413-6_27, DOI 10.1007/3-540-45413-6_27]
   Mishra-Linger Richard Nathan, 2008, IRRELEVANCE POLYMORP
   Norell Ulf, 2007, PRACTICAL PROGRAMMIN
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sjoberg Vilhelm, 2015, THESIS U PENNSYLVANI
   Stump Aaron, 2018, ARXIV180604709
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   VANEMDEN MH, 1976, J ACM, V23, P733, DOI 10.1145/321978.321991
   Weirich S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110275
NR 40
TC 2
Z9 2
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 91
DI 10.1145/3408973
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700005
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Wang, D
   Kahn, DM
   Hoffmann, J
AF Wang, Di
   Kahn, David M.
   Hoffmann, Jan
TI Raising Expectations: Automating Expected Cost Analysis with Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE analysis of probabilistic programs; expected execution cost;
   resource-aware type system
ID LINEAR DEPENDENT TYPES; RANDOM-WALK MODELS; RESOURCE ANALYSIS
AB This article presents a type-based analysis for deriving upper bounds on the expected execution cost of probabilistic programs. The analysis is naturally compositional, parametric in the cost model, and supports higher-order functions and inductive data types. The derived bounds are multivariate polynomials that are functions of data structures. Bound inference is enabled by local type rules that reduce type inference to linear constraint solving. The type system is based on the potential method of amortized analysis and extends automatic amortized resource analysis (AARA) for deterministic programs. A main innovation is that bounds can contain symbolic probabilities, which may appear in data structures and function arguments. Another contribution is a novel soundness proof that establishes the correctness of the derived bounds with respect to a distribution-based operational cost semantics that also includes nontrivial diverging behavior. For cost models like time, derived bounds imply termination with probability one. To highlight the novel ideas, the presentation focuses on linear potential and a core language. However, the analysis is implemented as an extension of Resource Aware ML and supports polynomial bounds and user defined data structures. The effectiveness of the technique is evaluated by analyzing the sample complexity of discrete distributions and with a novel average-case estimation for deterministic programs that combines expected cost analysis with statistical methods.
C1 [Wang, Di; Kahn, David M.; Hoffmann, Jan] Carnegie Mellon Univ, Dept Comp Sci, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Wang, D (corresponding author), Carnegie Mellon Univ, Dept Comp Sci, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
EM diw3@andrew.cmu.edu; davidkah@andrew.cmu.edu; jhoffmann@cmu.edu
RI Wu, Di/HNP-3772-2023
OI Wang, Di/0000-0002-2418-7987; Hoffmann, Jan/0000-0001-8326-0788
FU DARPA [FA8750-18-C-0092]; National Science Foundation [1801369, 1845514,
   1812876, 2007784]; Division of Computing and Communication Foundations;
   Direct For Computer & Info Scie & Enginr [1845514, 2007784] Funding
   Source: National Science Foundation; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1812876] Funding Source: National Science Foundation
FX This article is based on research supported by DARPA under AA Contract
   FA8750-18-C-0092 and by the National Science Foundation under SaTC Award
   1801369, CAREER Award 1845514, and SHF Awards 1812876 and 2007784. Any
   opinions, findings, and conclusions contained in this document are those
   of the authors and do not necessarily reflect the views of the
   sponsoring organizations.
CR Albert E, 2009, ELECTRON NOTES THEOR, V258, P109, DOI 10.1016/j.entcs.2009.12.008
   Albert E., 2015, In Tools and Algs. for the Construct. and Anal. of Syst. (TACAS'15)
   [Anonymous], 2018, EUR S PROGR ESOP 18
   [Anonymous], 2012, PROBABILITY MEASURE
   [Anonymous], 1976, ALGORITHMS COMPLEXIT
   Atkey R, 2010, LECT NOTES COMPUT SC, V6012, P85, DOI 10.1007/978-3-642-11957-6_6
   Avanzini M., 2013, 24 INT C REWR TECHN
   Avanzini M, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785725
   Avanzini M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P152, DOI 10.1145/2784731.2784753
   Bar-Yossef Z, 2008, J ACM, V55, DOI 10.1145/1411509.1411514
   Barthe G, 2012, ACM SIGPLAN NOTICES, V47, P97, DOI 10.1145/2103621.2103670
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Bhat S, 2013, LECT NOTES COMPUT SC, V7795, P508, DOI 10.1007/978-3-642-36742-7_35
   Bhat S, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P545
   Blanc R., 2010, LOG PROG REAS AL REA
   Borgström J, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI [10.1145/2951913.2951942, 10.1145/3022670.2951942]
   Brockschmidt Marc, 2014, TOOLS ALGORITHMS CON, V8413, P140
   Burnim J, 2009, PROC INT CONF SOFTW, P463, DOI 10.1109/ICSE.2009.5070545
   Carbonneaux Q, 2017, LECT NOTES COMPUT SC, V10427, P64, DOI 10.1007/978-3-319-63390-9_4
   Carbonneaux Q, 2015, ACM SIGPLAN NOTICES, V50, P467, DOI [10.1145/2813885.2737955, 10.1145/2737924.2737955]
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   Charguéraud A, 2015, LECT NOTES COMPUT SC, V9236, P137, DOI 10.1007/978-3-319-22102-1_9
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Chatterjee K, 2016, ACM SIGPLAN NOTICES, V51, P327, DOI 10.1145/2914770.2837639
   Chen BH, 2016, PROC INT CONF SOFTW, P49, DOI 10.1145/2884781.2884794
   Cicek E., 2017, PRINC PROG LANG POPL
   Çiçek E, 2015, LECT NOTES COMPUT SC, V9032, P406, DOI 10.1007/978-3-662-46669-8_17
   Codling EA, 2008, J R SOC INTERFACE, V5, P813, DOI 10.1098/rsif.2008.0014
   Crary K., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P184, DOI 10.1145/325694.325716
   Da Silva J., 2006, ARCHITECTURAL SUPPOR
   Dal Lago U., 2018, INT WORKSH DEV IMP C
   Dal Lago U, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3293605
   Dal Lago U, 2013, ACM SIGPLAN NOTICES, V48, P167, DOI 10.1145/2480359.2429090
   Dal Lago U, 2011, IEEE S LOG, P133, DOI 10.1109/LICS.2011.22
   Danielsson NA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1328438.1328457
   Danner N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P140, DOI 10.1145/2784731.2784749
   Djuric Dragan, 2019, BILLIONS RANDOM NUMB
   Filieri A, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P437, DOI 10.1145/2635868.2635899
   Filieri A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P622, DOI 10.1109/ICSE.2013.6606608
   Flores-Montoya A., 2014, AS S PROG LANG SYST
   Frohn F, 2016, LECT NOTES ARTIF INT, V9706, P550, DOI 10.1007/978-3-319-40229-1_37
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Goodman N. D., 2014, DESIGN IMPLEMENTATIO
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Gulwani S, 2009, LECT NOTES COMPUT SC, V5643, P51, DOI 10.1007/978-3-642-02658-4_7
   Hark M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371105
   Harper R, 2016, Practical Foundations for Programming Languages
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6461, P172, DOI 10.1007/978-3-642-17164-2_13
   Hoffmann J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P357, DOI 10.1145/1926385.1926427
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6012, P287, DOI 10.1007/978-3-642-11957-6_16
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hofmann M., 2018, ANAL LOGARITHMIC AMO
   Hofmann M., 2015, P 13 TLCA, V38, P241
   Hongwei Xi, 2002, Higher-Order and Symbolic Computation, V15, P91, DOI 10.1023/A:1019916231463
   Jost S., 2009, S FORM METH FM 09
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   Kahn D. M., 2020, INT C FDN SOFTWARE S
   Kahn David M, 2020, ARXIV200614010CSPL
   Kaminski B. L., 2016, EUR S PROGR
   Kavvos G. A., 2020, Proceedings of the ACM on Programming Languages, V4, DOI 10.1145/3371083
   Kincaid Z, 2017, ACM SIGPLAN NOTICES, V52, P248, DOI [10.1145/3062341.3062373, 10.1145/3140587.3062373]
   Knoth T, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P253, DOI 10.1145/3314221.3314602
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Kura S., 2019, TOOLS ALGS CONSTRUCT
   Lew A. K., 2020, PRINC PROG LANG POPL
   MacLeod CL, 2010, ASTROPHYS J, V721, P1014, DOI 10.1088/0004-637X/721/2/1014
   Mansinghka VK, 2018, ACM SIGPLAN NOTICES, V53, P603, DOI [10.1145/3192366.3192409, 10.1145/3296979.3192409]
   McIver Annabelle., 2005, MG COMP SCI
   MEESE RA, 1983, J INT ECON, V14, P3, DOI 10.1016/0022-1996(83)90017-X
   Nipkow T, 2015, LECT NOTES COMPUT SC, V9236, P310, DOI 10.1007/978-3-319-22102-1_21
   Noller Y, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P322, DOI 10.1145/3213846.3213868
   Noschinski L, 2013, J AUTOM REASONING, V51, P27, DOI 10.1007/s10817-013-9277-6
   Olmedo F, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P672, DOI 10.1145/2933575.2935317
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Radicek I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158124
   Ramalingam G, 1996, ACM SIGPLAN NOTICES, V31, P267, DOI 10.1145/249069.231433
   Reed J, 2010, ACM SIGPLAN NOTICES, V45, P157, DOI 10.1145/1932681.1863568
   Saad F. A., 2020, PRINC PROG LANG POPL
   Sinn Moritz, 2014, COMPUTER AIDED VERIF
   TARJAN RE, 1985, SIAM J ALGEBRA DISCR, V6, P306, DOI 10.1137/0606031
   Tassarotti J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290377
   Ngo VC, 2018, ACM SIGPLAN NOTICES, V53, P496, DOI [10.1145/3192366.3192394, 10.1145/3296979.3192394]
   Ngo VC, 2017, P IEEE S SECUR PRIV, P710, DOI 10.1109/SP.2017.53
   Vasconcelos P. B, 2008, SPACE COST ANAL USIN
   Visser AW, 1997, MAR ECOL PROG SER, V158, P275, DOI 10.3354/meps158275
   Walker D., 2002, Advanced Topics in Types and Programming Languages
   Wang D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290326
   Wang Di, 2020, ARXIV200110150CSPL
   Wang PX, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P204, DOI 10.1145/3314221.3314581
   Wang P, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133903
   Williams D., 1991, Probability with Martingales
   Wingate David, 2013, Automated variational inference in probabilistic programming
   Zuleger F., 2011, STATIC ANAL S SAS 11
NR 94
TC 10
Z9 10
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 110
DI 10.1145/3408992
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700024
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Moler, C
   Little, J
AF Moler, Cleve
   Little, Jack
TI A History of MATLAB
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE linear algebra; MATLAB; matrix computation
AB The first MATLAB (R) (the name is short for "Matrix Laboratory") was not a programming language. Written in Fortran in the late 1970s, it was a simple interactive matrix calculator built on top of about a dozen subroutines from the LINPACK and EISPACK matrix software libraries. There were only 71 reserved words and built-in functions. It could be extended only by modifying the Fortran source code and recompiling it.
   The programming language appeared in 1984 when MATLAB became a commercial product. The calculator was reimplemented in C and significantly enhanced with the addition of user functions, toolboxes, and graphics. It was available initially on the IBM PC and clones; versions for Unix workstations and the Apple Macintosh soon followed.
   In addition to the matrix functions from the calculator, the 1984 MATLAB included fast Fourier transforms (FFT). The Control System ToolboxT appeared in 1985 and the Signal Processing ToolboxT in 1987. Built-in support for the numerical solution of ordinary differential equations also appeared in 1987.
   The first significant new data structure, the sparse matrix, was introduced in 1992. The Image Processing ToolboxT and the Symbolic Math Toolbox (TM) were both introduced in 1993.
   Several new data types and data structures, including single precision floating point, various integer and logical types, cell arrays, structures, and objects were introduced in the late 1990s.
   Enhancements to the MATLAB computing environment have dominated development in recent years. Included are extensions to the desktop, major enhancements to the object and graphics systems, support for parallel computing and GPUs, and the "Live Editor", which combines programs, descriptive text, output and graphics into a single interactive, formatted document.
   Today there are over 60 Toolboxes, many programmed in the MATLAB language, providing extended capabilities in specialized technical fields.
C1 [Moler, Cleve; Little, Jack] MathWorks, Natick, MA 01760 USA.
C3 MathWorks
RP Moler, C (corresponding author), MathWorks, Natick, MA 01760 USA.
EM moler@mathworks.com
CR [Anonymous], 1999, LAPACK Users' Guide, DOI DOI 10.1137/1.9780898719604
   [Anonymous], 1994, Associated Press
   [Anonymous], 1978, PRACTICAL GUIDE SPLI
   Bemer Bob, 2000, ASCII GOT ITS BACKSL
   Bogacki P., 1989, APPL MATH LETT, V2, P321, DOI [DOI 10.1016/0893-9659, 10.1016/0893-9659(89)90079-7, DOI 10.1016/0893-9659(89)90079-7]
   Boyle James M., 1972, P ACM ANN C, P630
   Cohen Stanley, 1973, ANL8000
   de Boor C., 1990, SIGNUM Newsletter, V25, P3, DOI 10.1145/101070.101072
   de Boor Carl, 2004, SPLINE TOOLBOX USE M
   Dongarra J.J., 1979, LINPACK Users' Guide, DOI DOI 10.1137/1.9781611971811
   Dormand J., 1980, J. Comput. Appl. Math., V6, P19, DOI DOI 10.1016/0771-050X(80)90013-3
   Engel Frank, 1976, SIGPLAN NOTICES, V11, P1, DOI [10.1145/956013.1070892, DOI 10.1145/956013.1070892]
   Fehlberg E., 1969, 315 NASA, V315
   Forsythe G., 1967, COMPUTER SOLUTION LI
   Forsythe GE., 1977, Computer methods for mathematical computations
   Frigo M, 1998, INT CONF ACOUST SPEE, P1381, DOI 10.1109/ICASSP.1998.681704
   Frigo M, 1999, ACM SIGPLAN NOTICES, V34, P169, DOI 10.1145/301631.301661
   Garbow B. S., 1977, LECT NOTES COMPUT SC, V51, DOI [10.1007/3-540-08254-9, DOI 10.1007/3-540-08254-9]
   Gates Bill, 2005, P 2005 ACM IEEE C SU, DOI [10.5555/1105760.1116037, DOI 10.5555/1105760.1116037]
   GILBERT JR, 1992, SIAM J MATRIX ANAL A, V13, P333, DOI 10.1137/0613024
   Gropp W., 1998, MPI: The Complete Reference (Vol. 2), V2
   Jensen K., 1974, PASCAL USER MANUAL R, V2nd
   Johnson S.C., 1978, LINT C PROGRAM CHECK
   Johnson S.C., 1978, P 5 ACM SIGACT SIGPL, P97, DOI [10.1145/512760.512771, DOI 10.1145/512760.512771]
   JOHNSON SC, 1994, PROCEEDINGS OF THE USENIX SYMPOSIUM ON VERY HIGH LEVEL LANGUAGES (VHLL), P119
   Johnson Stephen C., 2020, COMMUNICATION 0101
   Johnson Stephen C., 1979, TOUR PORTABLE C COMP
   Johnson StephenC., 1975, YACC YET ANOTHER COM
   Lawson C. L., 1979, ACM Transactions on Mathematical Software, V5, P324, DOI [10.1145/355841.355847, 10.1145/355841.355848]
   Ljung L., 1987, SYSTEM IDENTIFICATIO
   Ljung L., 2014, SYSTEM IDENTIFICATIO
   Ljung Lennart, 2012, PROFESSOR L LJUNG DE
   Ljung Lennart, 2012, INTRO SYSTEM IDENTIF
   Luszczek P, 2009, INT J HIGH PERFORM C, V23, P277, DOI 10.1177/1094342009106194
   Marcus Marvin, 1993, MATRICES MATLAB TM T
   Markoff J., 1994, The New York Times
   Martin W. A., 1971, P 2 ACM S SYMBOLIC A, P59, DOI DOI 10.1145/800204.806267
   MathWorks Inc., 2019, CO OV
   Moler C., 1980, AFIPS Conference Proceedings. 1980 National Computer Conference, P363
   Moler C., 1988, Digest of Papers: COMPCON Spring 88. Thirty-Third IEEE Computer Society International Conference (Cat. No.88CH2539-5), P480, DOI 10.1109/CMPCON.1988.4915
   MOLER CB, 1972, COMMUN ACM, V15, P268, DOI 10.1145/361284.361297
   Moler C, 2015, COMMUN ACM, V58, P90, DOI 10.1145/2814849
   Moler Cleve, 2014, BLOG POST CLEVES COR
   Moler Cleve, 1981, MATLAB USERS GUIDE
   Moler Cleve, 2013, BLOG POST CLEVES COR
   Moler Cleve, 1982, NUMERICAL ANAL, P84, DOI [10.1007/BFb0092962, DOI 10.1007/BFB0092962]
   Moler Cleve, 2014, PDE TOOLBOX
   Moler Cleve, 2015, BLOG POST CLEVES COR
   Moler Cleve, 2016, BLOG POST CLEVES COR
   Moler Cleve, 2006, MATHWORKS NEWS N JAN, P22
   Moler Cleve, 2014, EVOLUTION LOGO
   Moler Cleve, 2001, TECHNICAL ARTICLE FA
   Moler Cleve, 2014, FINITE DIFFERENCES
   Moler Cleve B., 1965, FINITE DIFFERENCE ME
   Moler Cleve B., 1969, SIGNUM NEWSLETTER, V4, P22, DOI [10.1145/1198450.1198454, DOI 10.1145/1198450.1198454]
   Moler Cleve B., 1967, P APR 18 20 1967 SPR, P321, DOI [10.1145/1465482.1465533, DOI 10.1145/1465482.1465533]
   Moler Cleve B., 2017, BLOG POST CLEVES COR
   Moler Cleve B., 2000, BLOG POST CLEVES COR
   Moler Cleve B., 2018, BLOG POST CLEVES COR
   Shampine L F, 1976, SAND760585
   Shampine LF, 1997, SIAM J SCI COMPUT, V18, P1, DOI 10.1137/S1064827594276424
   SHAMPINE LF, 1986, MATH COMPUT, V46, P135, DOI 10.1090/S0025-5718-1986-0815836-3
   Sharma G, 2009, INT J PARALLEL PROG, V37, P3, DOI 10.1007/s10766-008-0082-5
   Sizemore Jim, 2014, MATLAB DUMMIES
   Smith B. T., 1974, Matrix eigensystem routinesEISPACK guide
   Snir M., 1998, MPI-the complete reference: the MPI core, V1
   Stanford University, 1979, STANF U B COURS DEGR
   Takahashi Dean, 1994, MERCURY NEWS 1219
   Trefethen LN, 2015, COMMUN ACM, V58, P91, DOI 10.1145/2814847
   Trefethen Lloyd N., 2007, P 2007 INT WORKSH SY, P28, DOI [10.1145/1277500.1277505, DOI 10.1145/1277500.1277505]
   Trefethen Lloyd N., 2000, SPECTRAL METHODS MAT, DOI [10.1137/1.9781611971811, DOI 10.1137/1.9781611971811]
   Wilkinson J. H., 1971, HDB AUTOMATIC COMPUT, VII, DOI [10.1007/978-3-642-86940-2, DOI 10.1007/978-3-642-86940-2]
   Wirth N., 1976, ALGORITHMS DATA STRU
   Zitner Aaron, 1994, BOSTON GLOBE
NR 74
TC 12
Z9 13
U1 7
U2 25
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 81
DI 10.1145/3386331
PG 67
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900014
OA gold
DA 2024-07-18
ER

PT J
AU Van Roy, P
   Haridi, S
   Schulte, C
   Smolka, G
AF Van Roy, Peter
   Haridi, Seif
   Schulte, Christian
   Smolka, Gert
TI A History of the Oz Multiparadigm Language
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Computer programming; multiparadigm programming; concurrent programming;
   dataflow; functional programming; logic programming; lazy evaluation;
   programming education; distributed programming
AB Oz is a programming language designed to support multiple programming paradigms in a clean factored way that is easy to program despite its broad coverage. It started in 1991 as a collaborative effort by the DFKI (Germany) and SICS (Sweden) and led to an influential system, Mozart, that was released in 1999 and widely used in the 2000s for practical applications and education. We give the history of Oz as it developed from its origins in logic programming, starting with Prolog, followed by concurrent logic programming and constraint logic programming, and leading to its two direct precursors, the concurrent constraint model and the Andorra Kernel Language (AKL). We give the lessons learned from the Oz effort including successes and failures and we explain the principles underlying the Oz design. Oz is defined through a kernel language, which is a formal model similar to a foundational calculus, but that is designed to be directly useful to the programmer. The kernel language is organized in a layered structure, which makes it straightforward to write programs that use different paradigms in different parts. Oz is a key enabler for the book Concepts, Techniques, and Models of Computer Programming (MIT Press, 2004). Based on the book and the implementation, Oz has been used successfully in university-level programming courses starting from 2001 to the present day.
C1 [Van Roy, Peter] Catholic Univ Louvain, B-1348 Louvain La Neuve, Belgium.
   [Haridi, Seif; Schulte, Christian] Royal Inst Technol, Stockholm, Sweden.
   [Haridi, Seif] RISE, Stockholm, Sweden.
   [Smolka, Gert] Saarland Univ, Saarbrucken, Germany.
C3 Universite Catholique Louvain; Royal Institute of Technology; RISE
   Research Institutes of Sweden; Saarland University
RP Van Roy, P (corresponding author), Catholic Univ Louvain, B-1348 Louvain La Neuve, Belgium.
EM peter.vanroy@uclouvain.be; haridi@kth.se; cschulte@kth.se;
   smolka@ps.uni-saarland.de
RI Van Roy, Peter/GLV-4000-2022
OI Van Roy, Peter/0000-0002-5427-2445
CR AITKACI H, 1993, J LOGIC PROGRAM, V16, P195, DOI 10.1016/0743-1066(93)90043-G
   Anders T., 2007, Composing music by composing rules: design and usage of a generic music constraint system
   [Anonymous], 2004, Concepts, techniques, and models of computer programming
   [Anonymous], 1996, Structure and interpretation of computer programs
   [Anonymous], 1998, Purely Functional Data Structures
   [Anonymous], 1983, 309 SRI INT ART INT
   [Anonymous], 2019, MODELING PROGRAMMING
   [Anonymous], 1983, TR003 ICOT
   Ashenhurst Robert L., 1987, ACM TURING AWARD LEC
   Axling Tomas, 1996, VIRTUAL ENV SCI VISU
   Cambron Isabelle, 2006, PROGRAMMATION PREMIE
   Cardelli Luca, 1995, ACM T COMPUT SYST, V8, p27S59
   Carlsson Mats, 2001, SICSTUS PROLOG
   Clark Keith L., 1987, LECT NOTES COMPUTER, V259, p30S53
   Cochard Jean-Luc, 1995, WOZ 95 INT WORKSH OZ
   Collet Raphael, 2007, LIMITS NETWORK TRANS
   Colmerauer A., 1996, History of programming languagesII
   Colmerauer Alain., 1982, Prolog II Reference Manual and Theoretical Model
   Combefis Sebastien, 2015, 3 MOOC EUR STAK SUMM, p76S80
   Daloze Benoit, 2014, THESIS U CATHOLIQUE
   Darwin Charles., 2001, On the origin of species by means of natural selection or, the preservation of favoured races in the struggle for life
   de le Vingne Gregory, 2007, PROGRAMMATION PREMIE
   Deville Yves, 2005, J THEORY PRACTICE LO, V5, P595
   Doeraene Sebastien, 2011, THESIS U CATHOLIQUE
   Doeraene Sebastien, 2013, 4 ANN SCAL WORKSH CO
   Duchier Denys, 1998, HIGHER ORDER MODULE
   Duchier Denys, 1999, CONCURRENT CONSTRAIN
   FELLEISEN M, 1990, LECT NOTES COMPUT SC, V432, P134
   Fonteyn Francois, 2014, THESIS U CATHOLIQUE
   Fujise Tetsuro, 1994, 5 GEN COMP SYST FGCS, P66
   Gammie Peter, 2009, J FUNCT PROGRAM, V19
   Grolaux D, 2001, LECT NOTES COMPUT SC, V2254, P109
   Grolaux Donatien, 2002, 1 INT WORKSH TASK MO
   Grolaux Donatien, 1998, EDITEUR GRAPHIQUE RE
   Haridi S, 1999, ACM T PROGR LANG SYS, V21, P569, DOI 10.1145/319301.319347
   Haridi S, 1998, NEW GENERAT COMPUT, V16, P223, DOI 10.1007/BF03037481
   Haridi Seif, 1996, PERDIO PERSISTENCE D
   Haridi Seif, 1996, TUTORIAL OZ 2 0
   Haridi Seif, 1997, P 2 INT S PAR SYMB C
   Haridi Seif, 1994, DEV CONCURRENT CONST
   Henz M, 2000, IEEE INTELL SYST APP, V15, P5
   Henz M, 2001, OPER RES, V49, P163, DOI 10.1287/opre.49.1.163.11193
   Henz M, 1999, LOGIC PROGRAMM, P545
   Henz Martin, 1997, KLUWER INT SERIES EN, V426
   Henz Martin, THESIS U SAARLANDES
   Hoare Charles Antony Richard, 1987, 1980 TURING AWARD LE
   Institute for New Generation Computer Technology, 1992, 5 GENERATION COMPUTE, V1
   Jaffar J., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P111, DOI 10.1145/41625.41635
   JAFFAR J, 1992, ACM T PROGR LANG SYS, V14, P339, DOI 10.1145/129393.129398
   JANSON S, 1991, LOGIC PROGRAMM, P167
   Janson Sverker, 1993, RES DIRECTIONS CONCU
   Janson Sverker, 1994, THESIS UPPSALA U SIC
   Jaradin Yves, 2013, MOZART VM 2 0 DESIGN
   Kahn Gilles, 1977, Information Processing, P993
   Kernighan B.W., 1988, The C Programming Language
   Klintskog Erik, 2005, THESIS KTH SICS STOC
   Lelis Stelios, 2001, 2 KYOT WORKSH DIG CI, V2362, P41
   Lienhardt M., 2007, P 6 INT C GEN PROGR, P43
   Magnusson Peter S., 1998, USENIX ANN TECHN C J
   Magnusson PS, 2002, COMPUTER, V35, P50, DOI 10.1109/2.982916
   Maher M. J., 1987, Logic Programming. Proceedings of the Fourth International Conference, P858
   Marriott K, 2006, FOUND ARTIF INTELL, P409
   McGlashan Scott, 1996, 3 UK VR SIG C LEIC U
   Mehl Michael, 1999, THESIS U SAARLANDES
   Michiels Denis, 2014, THESIS U CATHOLIQUE
   Mozart Consortium, 2018, MOZ PROGR SYST OZ 3
   Nemhauser GL, 1998, OPER RES, V46, P1, DOI 10.1287/opre.46.1.1
   Niehren J, 2006, THEOR COMPUT SCI, V364, P338, DOI 10.1016/j.tcs.2006.08.016
   Norvig Peter, 2006, TEACH YOURSELF PROGR
   O'Keefe R.A., 1990, The Craft of Prolog
   Paquot Arthur, 2016, THESIS U CATHOLIQUE
   Popov K., 2003, PARALLEL PROCESSING, V13, P629
   Ritchie Dennis M, 1987, 1983 TURING AWARD LE
   Roverso Roberto, 2009, 18 IEEE INT C COMP C
   Roy P. V., 2015, P EUROPEAN MOOC STAK, P86
   SARASWAT VA, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P232, DOI 10.1145/96709.96733
   Saraswat Vijay A., 1993, Concurrent Constraint Programming
   Scheidhauer R., 1998, THESIS U SAARLANDES
   Schulte C., 1994, Principles and Practice of Constraint Programming. Second International Workshop, PPCP '94. Proceedings, P134
   SCHULTE C, 1994, MIT PS LOG, P505
   Schulte C, 1999, LOGIC PROGRAMM, P275
   Schulte C, 1997, LOGIC PROGRAMM, P286
   Schulte C, 2000, LECT NOTES COMPUT SC, V1753, P215
   Schulte Christian, LECT NOTES COMPUTER, V1330
   Schulte Christian., 2002, LECT NOTES ARTIFICIA, V2302
   Schulte Christian, 2000, PROGRAMMING CONSTRAI
   SHAPIRO E, 1989, COMPUT SURV, V21, P412, DOI 10.1145/72551.72555
   Shapiro E., 1987, CONCURRENT PROLOG CO, V1
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siekmann J., 2006, J APPL LOGIC, V4, P533, DOI DOI 10.1016/J.JAL.2005.10.008
   SMOLKA G, 1994, J LOGIC PROGRAM, V18, P229, DOI 10.1016/0743-1066(94)90044-2
   Smolka G., 1995, Constraint Programming: Basics and Trends. 1994 Chatillon Spring School. Selected Papers, P251
   Smolka Gert, 1995, LECT NOTES COMPUTER, V1000
   Smolka Gert, 1995, BMBF PROJECT PROPOSA
   Sommerville I., 1992, SOFTWARE ENG, V4th
   Spiessens Alfred, 2003, 2 INT WORKSH MULT CO
   Sterling Leon, 1986, ART PROLOGS ADV PROG
   Thompson Ken, 1987, 1983 TURING AWARD LE
   TICK E, 1995, J LOGIC PROGRAM, V23, P89, DOI 10.1016/0743-1066(94)00038-8
   UEDA K, 1986, LECT NOTES COMPUT SC, V221, P168
   UEDA K, 1990, COMPUT J, V33, P494, DOI 10.1093/comjnl/33.6.494
   Van Hentenryck Pascal, 1994, KNOWL ENG REV, V6, P151
   Van Roy P, 2003, THEOR PRACT LOG PROG, V3, P717, DOI 10.1017/S1471068403001741
   Van Roy P., 2009, Programming Paradigms for Dummies: What Every Programmer Should Know
   Van Roy P, 2006, LECT NOTES COMPUT SC, V3945, P2
   Van Roy Peter, 1999, AGENTLINK NEWS, V4
   Van Roy Peter, 2011, CTM APPROACH TEACHIN, V2, P101
   Van Roy Peter, 2004, LECT NOTES COMPUTER, V3389
   Van Roy Peter, 2008, PROGRAMMING PARADIGM
   Van Roy Peter, 1999, DISTRIBUTED PROGRAMM
   Van Roy Peter, 2018, WORKSH LOG PRACT PRO
   Van Roy Peter, 1996, 8 INT S PROGR LANG I
   Van Roy Peter, 1999, INT WORKSH PAR DISTR
   Van Roy Peter, 2003, 34 TECHN S COMP SCI
   VANROY P, 1994, J LOGIC PROGRAM, V20, P385, DOI 10.1016/0743-1066(94)90031-0
   VanRoy P, 1997, ACM T PROGR LANG SYS, V19, P804, DOI 10.1145/265943.265972
   Warren David H. D, 1983, DAI RES REPORTS
NR 117
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 83
DI 10.1145/3386333
PG 56
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900016
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Barthe, G
   Hsu, JT
   Ying, MS
   Yu, NK
   Zhou, L
AF Barthe, Gilles
   Hsu, Justin
   Ying, Mingsheng
   Yu, Nengkun
   Zhou, Li
TI Relational Proofs for Quantum Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantum programming; verification; relational properties; coupling
ID WALKS
AB Relational verification of quantum programs has many potential applications in quantum and post-quantum security and other domains. We propose a relational program logic for quantum programs. The interpretation of our logic is based on a quantum analogue of probabilistic couplings. We use our logic to verify non-trivial relational properties of quantum programs, including uniformity for samples generated by the quantum Bernoulli factory, reliability of quantum teleportation against noise (bit and phase flip), security of quantum one-time pad and equivalence of quantum walks.
C1 [Barthe, Gilles; Zhou, Li] Max Planck Inst Secur & Privacy, Bochum, Germany.
   [Barthe, Gilles] IMDEA Software Inst, Madrid, Spain.
   [Hsu, Justin] Univ Wisconsin Madison, Dept Comp Sci, Madison, WI USA.
   [Ying, Mingsheng; Yu, Nengkun] Univ Technol Sydney, Ctr Quantum Software & Informat, Sydney, NSW, Australia.
   [Ying, Mingsheng] Chinese Acad Sci, Inst Software, State Key Lab Comp Sci, Beijing, Peoples R China.
   [Ying, Mingsheng] Tsinghua Univ, Beijing, Peoples R China.
   [Ying, Mingsheng] Tsinghua Univ, Dept Comp Sci & Technol, Beijing, Peoples R China.
C3 IMDEA Software Institute; University of Wisconsin System; University of
   Wisconsin Madison; University of Technology Sydney; Chinese Academy of
   Sciences; Institute of Software, CAS; Tsinghua University; Tsinghua
   University
RP Barthe, G (corresponding author), Max Planck Inst Secur & Privacy, Bochum, Germany.; Barthe, G (corresponding author), IMDEA Software Inst, Madrid, Spain.
RI Ying, Mingsheng/AAA-8540-2019; yu, nengkun/HTP-0286-2023
OI Ying, Mingsheng/0000-0003-4847-702X; Yu, Nengkun/0000-0003-1188-3032;
   Zhou, Li/0000-0002-9868-8477; Hsu, Justin/0000-0002-8953-7060
FU University of Wisconsin; Facebook TAV award; Australian Research Council
   [DE180100156, DP180100691]; National Key R&D Program of China
   [2018YFA0306701]; National Natural Science Foundation of China
   [61832015]; Australian Research Council [DE180100156] Funding Source:
   Australian Research Council
FX This work is partially supported by the University of Wisconsin, a
   Facebook TAV award, the Australian Research Council (Grant No:
   DE180100156 and DP180100691), the National Key R&D Program of China
   (Grant No: 2018YFA0306701), and the National Natural Science Foundation
   of China (Grant No: 61832015). We are grateful to the Max Planck
   Institute for Software Systems for hosting some of the authors.
CR Aaronson S, 2019, ACM S THEORY COMPUT, P322, DOI 10.1145/3313276.3316378
   Abramsky S, 2004, IEEE S LOG, P415, DOI 10.1109/LICS.2004.1319636
   Ardeshir-Larijani E, 2013, LECT NOTES COMPUT SC, V7795, P478, DOI 10.1007/978-3-642-36742-7_33
   Barthe G., 2017, LPAR-21. 21st International Conference on Logic for Programming, V46, P385, DOI DOI 10.29007/VZ48
   Barthe G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158145
   Barthe G, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P749, DOI 10.1145/2933575.2934554
   Barthe G, 2015, LECT NOTES COMPUT SC, V9450, P387, DOI 10.1007/978-3-662-48899-7_27
   Barthe G, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2492061
   Barthe G, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P97
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Barthe Gilles, 2019, ABS190105184 CORR
   BENNETT CH, 1993, PHYS REV LETT, V70, P1895, DOI 10.1103/PhysRevLett.70.1895
   Boykin PO, 2003, PHYS REV A, V67, DOI 10.1103/PhysRevA.67.042317
   Chadha R, 2006, ELECTRON NOTES THEOR, V158, P19, DOI 10.1016/j.entcs.2006.04.003
   D'Hondt E, 2006, MATH STRUCT COMP SCI, V16, P429, DOI 10.1017/S0960129506005251
   Dale H, 2015, NAT COMMUN, V6, DOI 10.1038/ncomms9203
   de Wolf Ronald, 2000, QUANTPH0003101 ARXIV
   Venegas-Andraca SE, 2012, QUANTUM INF PROCESS, V11, P1015, DOI 10.1007/s11128-012-0432-5
   Feng Y, 2007, THEOR COMPUT SCI, V386, P151, DOI 10.1016/j.tcs.2007.06.011
   Feng Yuan, 2015, ARXIV150705278, V42, DOI 10.4230/LIPIcs
   Hsu Justin, 2017, THESIS U PENNSYLVANI
   Hung Shih-Han, 2018, ABS181103585 CORR
   Kakutani Y, 2009, LECT NOTES COMPUT SC, V5913, P79, DOI 10.1007/978-3-642-10622-4_7
   Keane M. S., 1994, ACM Transactions on Modeling and Computer Simulation, V4, P213, DOI 10.1145/175007.175019
   Kempe J, 2003, CONTEMP PHYS, V44, P307, DOI 10.1080/00107151031000110776
   Kubota Takahiro, 2013, EPiC Series in Computing, V15, P64
   Kümmerer B, 2016, INFIN DIMENS ANAL QU, V19, DOI 10.1142/S0219025716500120
   Kumar VSA, 2001, RANDOM STRUCT ALGOR, V18, P1, DOI 10.1002/1098-2418(200101)18:1<1::AID-RSA1>3.0.CO;2-7
   Li YH, 2019, IEEE I CONF COMP VIS, P6053, DOI 10.1109/ICCV.2019.00615
   Lindvall T., 2002, Lectures on the coupling method
   Mingsheng Ying, 2016, FDN QUANTUM PROGRAMM
   Nielsen M A., 2002, NORS SOFTW CORP NET
   Selinger P, 2004, MATH STRUCT COMP SCI, V14, P527, DOI 10.1017/S0960129504004256
   Selinger P, 2004, LECT NOTES COMPUT SC, V2998, P1
   STRASSEN V, 1965, ANN MATH STAT, V36, P423, DOI 10.1214/aoms/1177700153
   Thorisson H., 2000, PROB APPL S
   Unruh D, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785779
   Unruh D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290346
   Villani C, 2009, GRUNDLEHR MATH WISS, V338, P1, DOI 10.1007/978-3-540-71050-9
   Winter A, 2016, COMMUN MATH PHYS, V347, P291, DOI 10.1007/s00220-016-2609-8
   Ying MS, 2013, SCI COMPUT PROGRAM, V78, P1679, DOI 10.1016/j.scico.2013.03.016
   Ying MS, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2049706.2049708
   Zhou L, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1149, DOI 10.1145/3314221.3314584
   Zhou L, 2020, THEOR COMPUT SCI, V802, P67, DOI [10.1016/j.tcs.2619.08.026, 10.1016/j.tcs.2019.08.026]
NR 44
TC 11
Z9 11
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 21
DI 10.1145/3371089
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400022
OA Green Submitted, gold, Green Published
DA 2024-07-18
ER

PT J
AU Clochard, M
   Marché, C
   Paskevich, A
AF Clochard, Martin
   Marche, Claude
   Paskevich, Andrei
TI Deductive Verification with Ghost Monitors
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Deductive program verification; Ghost code; Unstructured programs;
   Infinite behaviors; Games; Floyd-Hoare logic; Predicate transformers
AB We present a new approach to deductive program verification based on auxiliary programs called ghost monitors. This technique is useful when the syntactic structure of the target program is not well suited for verification, for example, when an essentially recursive algorithm is implemented in an iterative fashion. Our approach consists in implementing, specifying, and verifying an auxiliary program that monitors the execution of the target program, in such a way that the correctness of the monitor entails the correctness of the target. The ghost monitor maintains the necessary data and invariants to facilitate the proof. It can be implemented and verified in any suitable framework, which does not have to be related to the language of the target programs. This technique is also applicable when we want to establish relational properties between two target programs written in different languages and having different syntactic structure.
   We then show how ghost monitors can be used to specify and prove fine-grained properties about the infinite behaviors of target programs. Since this cannot be easily done using existing verification frameworks, we introduce a dedicated language for ghost monitors, with an original construction to catch and handle divergent executions. The soundness of the underlying program logic is established using a particular flavor of transfinite games. This language and its soundness are formalized and mechanically checked.
C1 [Clochard, Martin] Swiss Fed Inst Technol, Dept Comp Sci, CH-8092 Zurich, Switzerland.
   [Marche, Claude] Univ Paris Saclay, INRIA, F-91120 Palaiseau, France.
   [Paskevich, Andrei] Univ Paris Sud, LRI, F-91405 Orsay, France.
   [Paskevich, Andrei] CNRS, F-91405 Orsay, France.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; Universite
   Paris Saclay; Universite Paris Cite; Inria; Universite Paris Cite;
   Universite Paris Saclay; Centre National de la Recherche Scientifique
   (CNRS)
RP Clochard, M (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, CH-8092 Zurich, Switzerland.
EM martin.clochard@inf.ethz.ch; claude.marche@inria.fr;
   andrei.paskevich@lri.fr
OI Marche, Claude/0000-0003-3035-1269
CR BACK RJR, 1990, ACTA INFORM, V27, P583, DOI 10.1007/BF00259469
   Banerjee A, 2016, LIPICS
   Barthe Gilles, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P200, DOI 10.1007/978-3-642-21437-0_17
   Bornat R, 2000, LECT NOTES COMPUT SC, V1837, P102
   Clochard Martin, 2018, THESIS U PARIS SACLA
   Clochard Martin, 2018, 9219 INR
   Clochard Martin, 2018, HOARE LOGIC GAMES FO
   Clochard Martin, 2018, VARIATIONS MCCARTHYS
   Clochard Martin, 2018, FORMAL DEV
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Filliâtre JC, 2016, FORM METHOD SYST DES, V48, P152, DOI 10.1007/s10703-016-0243-x
   Kiefer M, 2018, J AUTOM REASONING, V60, P337, DOI 10.1007/s10817-017-9433-5
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Mamouras K, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(3:6)2016
   Manna Zohar, 1970, PROPERTIES PROGRAMS, V5, P79
   Mével G, 2019, LECT NOTES COMPUT SC, V11423, P3, DOI 10.1007/978-3-030-17184-1_1
   Myreen MO, 2007, LECT NOTES COMPUT SC, V4424, P568
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   SCHORR H, 1967, COMMUN ACM, V10, P501, DOI 10.1145/363534.363554
   Tassarotti J, 2017, LECT NOTES COMPUT SC, V10201, P909, DOI 10.1007/978-3-662-54434-1_34
   Tuerk Thomas, 2010, VS THEOR WORKSH 3 IN
   Ulbrich Mattias, 2013, THESIS KARLSRUHE I T
   Yang H, 2007, THEOR COMPUT SCI, V375, P308, DOI 10.1016/j.tcs.2006.12.036
NR 23
TC 5
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 2
DI 10.1145/3371070
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400003
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Guo, Z
   James, M
   Justo, D
   Zhou, JX
   Wang, ZT
   Jhala, R
   Polikarpova, N
AF Guo, Zheng
   James, Michael
   Justo, David
   Zhou, Jiaxiao
   Wang, Ziteng
   Jhala, Ranjit
   Polikarpova, Nadia
TI Program Synthesis by Type-Guided Abstraction Refinement
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Type Systems; Abstract Interpretation
ID COMPLETION
AB We consider the problem of type-directed component-based synthesis where, given a set of (typed) components and a query type, the goal is to synthesize a term that inhabits the query. Classical approaches based on proof search in intuitionistic logics do not scale up to the standard libraries of modern languages, which span hundreds or thousands of components. Recent graph reachability based methods proposed for Java do scale, but only apply to monomorphic data and components: polymorphic data and components infinitely explode the size of the graph that must be searched, rendering synthesis intractable. We introduce type-guided abstraction refinement (TYGAR), a new approach for scalable type-directed synthesis over polymorphic datatypes and components. Our key insight is that we can overcome the explosion by building a graph over abstract types which represent a potentially unbounded set of concrete types. We show how to use graph reachability to search for candidate terms over abstract types, and introduce a new algorithm that uses proofs of untypeability of ill-typed candidates to iteratively refine the abstraction until a well-typed result is found.
   We have implemented TYGAR in H+, a tool that takes as input a set of Haskell libraries and a query type, and returns a Haskell term that uses functions from the provided libraries to implement the query type. Our support for polymorphism allows H+ to work with higher-order functions and type classes, and enables more precise queries due to parametricity. We have evaluated H+ on 44 queries using a set of popular Haskell libraries with a total of 291 components. H+ returns an interesting solution within the first five results for 32 out of 44 queries. Our results show that TYGAR allows H+ to rapidly return well-typed terms, with the median time to first solution of just 1.4 seconds. Moreover, we observe that gains from iterative refinement over exhaustive enumeration are more pronounced on harder queries.
C1 [Guo, Zheng; James, Michael; Justo, David; Zhou, Jiaxiao; Wang, Ziteng; Jhala, Ranjit; Polikarpova, Nadia] Univ Calif San Diego, La Jolla, CA 92093 USA.
C3 University of California System; University of California San Diego
RP Guo, Z (corresponding author), Univ Calif San Diego, La Jolla, CA 92093 USA.
EM zhg069@ucsd.edu; m3james@ucsd.edu; djusto@ucsd.edu; jiz417@ucsd.edu;
   ziw329@ucsd.edu; jhala@cs.ucsd.edu; npolikarpova@ucsd.edu
RI Wang, Ziteng/JQX-0611-2023
OI Wang, Ziteng/0009-0001-8487-8093
FU NSF [1814358, 1911149]; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [1814358] Funding
   Source: National Science Foundation
FX The authors would like to thank Neil Mitchell for providing the Hoogle
   data and helpful feedback on the H+ web interface. We are also grateful
   to the anonymous reviewers of this and older versions of the paper for
   their careful reading and many constructive suggestions. This research
   was supported by NSF grants 1814358 and 1911149.
CR Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Augusstson Lennart, 2005, DJINN
   BARENDREGT H, 1985, STUDIES LOGIC FDN MA, V103
   Clarke EM, 2010, LECT NOTES COMPUT SC, V6200, P61, DOI 10.1007/978-3-642-13754-9_4
   Cousot P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P316, DOI 10.1145/263699.263744
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Di Cosmo R., 1993, Journal of Functional Programming, V3, P485, DOI 10.1017/S0956796800000861
   Dyckhoff Roy, 1998, SETS PROOFS, P53
   Esparza J, 2014, LECT NOTES COMPUT SC, V8559, P603, DOI 10.1007/978-3-319-08867-9_40
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   Galenson J, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P653, DOI 10.1145/2568225.2568250
   Ganty P, 2007, LECT NOTES COMPUT SC, V4546, P124
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Guo Zheng, 2019, P ACM PROGR LANG POP, V4, p1S28
   Gvero T, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2499370.2462192
   Heineman GT, 2016, LECT NOTES COMPUT SC, V9952, P303, DOI 10.1007/978-3-319-47166-2_21
   Katayama Susumu., 2012, Proceedings of the ACM SIGPLAN 2012 Workshop on Partial Evaluation and Program Manipulation, PEPM '12, P43
   Kloos Johannes, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P158, DOI 10.1007/978-3-642-39799-8_10
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   Mandelin D, 2005, ACM SIGPLAN NOTICES, V40, P48, DOI 10.1145/1064978.1065018
   Mitchell Neil, 2004, HOOGLE
   Murali V, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P151, DOI 10.1145/3106237.3106284
   Norell Ulf., 2008, Revised Lectures, P230
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Perelman D, 2012, ACM SIGPLAN NOTICES, V47, P275, DOI 10.1145/2345156.2254098
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pierce Benjamin C., 2004, Advanced Topics in Types and Programming Languages
   Plotkin G, 1970, Technical report
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2594291.2594321, 10.1145/2666356.2594321]
   Sergey I, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796817000016
   Shi KS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290386
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Solarlezama Armando, 2008, PROGRAM SYNTHESIS SK
   Srivastava S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P313, DOI 10.1145/1706299.1706337
   Urzyczyn Pawel, 1997, TYPED LAMBDA CALCULI, DOI [10.1007/3-540-62688-3_47, DOI 10.1007/3-540-62688-3_47]
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
NR 42
TC 19
Z9 21
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 12
DI 10.1145/3371080
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400013
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Jaber, G
AF Jaber, Guilhem
TI SyTeCi: Automating Contextual Equivalence for Higher-Order Programs with
   References
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Contextual Equivalence; Higher-Order Stateful Programs; Operational Game
   Semantics
ID OBSERVATIONAL EQUIVALENCE; STATE
AB We propose a framework to study contextual equivalence of programs written in a call-by-value functional language with local integer references. It reduces the problem of contextual equivalence to the problem of non-reachability in a transition system of memory configurations. This reduction is complete for recursion-free programs. Restricting to programs that do not allocate references inside the body of functions, we encode this non-reachability problem as a set of constrained Horn clause that can then be checked for satisfiability automatically. Restricting furthermore to a language with finite data-types, we also get a new decidability result for contextual equivalence at any type.
C1 [Jaber, Guilhem] Univ Nantes, INRIA, LS2N CNRS, Nantes, France.
C3 Nantes Universite; Inria
RP Jaber, G (corresponding author), Univ Nantes, INRIA, LS2N CNRS, Nantes, France.
EM guilhem.jaber@univ-nantes.fr
FU ANR Project RAPIDO [ANR-14-CE25-000]; EPSRC [EP/L022478/1] Funding
   Source: UKRI
FX This work was partially funded by ANR Project RAPIDO ANR-14-CE25-000
CR Ahmed Amal, 2009, Proceedings of the 36th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2009, Savannah, GA, USA, January 21-23, 2009, P340, DOI DOI 10.1145/1594834.1480925
   Banerjee A, 2005, J ACM, V52, P894, DOI 10.1145/1101821.1101824
   Bjorner N, 2015, LECT NOTES COMPUT SC, V9300, P24, DOI 10.1007/978-3-319-23534-9_2
   Bjorner N, 2013, LECT NOTES COMPUT SC, V7935, P105
   Brotherston J, 2011, J LOGIC COMPUT, V21, P1177, DOI 10.1093/logcom/exq052
   Ciobâca S, 2016, FORM ASP COMPUT, V28, P469, DOI 10.1007/s00165-016-0361-7
   Cotton-Barratt C, 2017, LECT NOTES COMPUT SC, V10201, P314, DOI 10.1007/978-3-662-54434-1_12
   Cotton-Barratt C, 2015, LECT NOTES COMPUT SC, V9034, P249, DOI 10.1007/978-3-662-46678-0_16
   Dreyer D, 2010, ACM SIGPLAN NOTICES, V45, P143, DOI 10.1145/1932681.1863566
   Dreyer D, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P185, DOI 10.1145/1706299.1706323
   Dreyer D, 2009, IEEE S LOG, P71, DOI 10.1109/LICS.2009.34
   Felsing D, 2014, P 29 ACM IEEE INT C, P349, DOI [10.1145/2642937.2642987, DOI 10.1145/2642937.2642987]
   Godlin B, 2009, DES AUT CON, P466
   Gurfinkel A, 2015, LECT NOTES COMPUT SC, V9206, P343, DOI 10.1007/978-3-319-21690-4_20
   Hoder Krystof, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P457, DOI 10.1007/978-3-642-22110-1_36
   Hopkins David, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P774, DOI 10.1007/978-3-642-31424-7_63
   Hopkins D, 2011, LECT NOTES COMPUT SC, V6756, P149, DOI 10.1007/978-3-642-22012-8_11
   Hopkins D, 2009, LECT NOTES COMPUT SC, V5643, P654, DOI 10.1007/978-3-642-02658-4_51
   Hur CK, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P59
   Jaber G, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P585, DOI 10.1145/2933575.2934509
   Jaber Guilhem, 2015, P 13 AS S PROGR LANG
   Jaber Guilhem, 2015, P 18 INT C FDN SOFTW
   Lahiri Shuvendu K., 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P712, DOI 10.1007/978-3-642-31424-7_54
   Laird J, 2007, LECT NOTES COMPUT SC, V4596, P667
   Lassen SB, 2007, LECT NOTES COMPUT SC, V4646, P283
   Murawski AS, 2015, LECT NOTES COMPUT SC, V9364, P234, DOI 10.1007/978-3-319-24953-7_19
   Murawski AS, 2012, LECT NOTES COMPUT SC, V7392, P312, DOI 10.1007/978-3-642-31585-5_30
   Murawski AS, 2011, IEEE S LOG, P75, DOI 10.1109/LICS.2011.31
   Murawski AS, 2011, LECT NOTES COMPUT SC, V6602, P419, DOI 10.1007/978-3-642-19718-5_22
   Murawski AS, 2005, THEOR COMPUT SCI, V338, P315, DOI 10.1016/j.tcs.2004.12.036
   Pitts AM, 1996, IEEE S LOG, P152, DOI 10.1109/LICS.1996.561314
   Plotkin G., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P361, DOI 10.1007/BFb0037118
   Sangiorgi D, 2007, IEEE S LOG, P293, DOI 10.1109/LICS.2007.17
   Sumii E, 2005, ACM SIGPLAN NOTICES, V40, P63, DOI 10.1145/1047659.1040311
   Sumii E, 2009, LECT NOTES COMPUT SC, V5771, P455, DOI 10.1007/978-3-642-04027-6_33
   Tzevelekos N, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P295, DOI 10.1145/1926385.1926420
   Wang YP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158144
NR 37
TC 7
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 59
DI 10.1145/3371127
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400060
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Smolka, S
   Foster, N
   Hsu, J
   Kappé, T
   Kozen, D
   Silva, A
AF Smolka, Steffen
   Foster, Nate
   Hsu, Justin
   Kappe, Tobias
   Kozen, Dexter
   Silva, Alexandra
TI Guarded Kleene Algebra with Tests Verification of Uninterpreted Programs
   in Nearly Linear Time
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE uninterpreted programs; program equivalence; program schemes; guarded
   automata; coalgebra; Kleene algebra with Tests
ID FLOW DIAGRAMS; PROBABILITY
AB Guarded Kleene Algebra with Tests (GKAT) is a variation on Kleene Algebra with Tests (KAT) that arises by restricting the union (+) and iteration (*) operations from KAT to predicate-guarded versions. We develop the (co)algebraic theory of GKAT and show how it can be efficiently used to reason about imperative programs. In contrast to KAT, whose equational theory is PSPACE-complete, we show that the equational theory of GKAT is (almost) linear time. We also provide a full Kleene theorem and prove completeness for an analogue of Salomaa's axiomatization of Kleene Algebra.
C1 [Smolka, Steffen; Foster, Nate; Kozen, Dexter] Cornell Univ, Ithaca, NY 14853 USA.
   [Hsu, Justin] Univ Wisconsin, Madison, WI USA.
   [Kappe, Tobias; Silva, Alexandra] UCL, London, England.
C3 Cornell University; University of Wisconsin System; University of
   Wisconsin Madison; University of London; University College London
RP Smolka, S (corresponding author), Cornell Univ, Ithaca, NY 14853 USA.
EM smolka@cs.cornell.edu; jnfoster@cs.cornell.edu; email@justinh.su;
   tkappe@cs.ucl.ac.uk; kozen@cs.cornell.edu; silva@ucl.ac.uk
OI Hsu, Justin/0000-0002-8953-7060; Kozen, Dexter/0000-0002-8007-4725;
   Foster, Nate/0000-0002-6557-684X; Kappe, Tobias/0000-0002-6068-880X
FU University of Wisconsin; Facebook TAV award; ERC starting grant
   Profoundnet [679127]; Royal SocietyWolfson fellowship; Leverhulme Prize
   [PLP-2016-129]; NSF grants [AitF-1637532, CNS-1413978, SaTC-1717581]
FX We are grateful to the anonymous reviewers for their feedback and help
   in improving this paper, and thank Paul Brunet, Fredrik Dahlqvist, and
   Jonathan DiLorenzo for numerous discussions and suggestions on GKAT.
   Jonathan DiLorenzo and Simon Docherty provided helpful feedback on
   drafts of this paper. We thank the Bellairs Research Institute of McGill
   University for providing a wonderful research environment. This work was
   supported in part by the University of Wisconsin, a Facebook TAV award,
   ERC starting grant Profoundnet (679127), a Royal SocietyWolfson
   fellowship, a Leverhulme Prize (PLP-2016-129), NSF grants AitF-1637532,
   CNS-1413978, and SaTC-1717581, and gifts from Fujitsu and InfoSys.
CR Anderson CJ, 2014, ACM SIGPLAN NOTICES, V49, P113, DOI 10.1145/2535838.2535862
   Angus Allegra, 2001, TR20011844 COMP SCI
   [Anonymous], 1970, Modern applied algebra
   Ashcroft E., 1972, Proceedings of IFIP Congress 71, V1, P250
   Backhouse R., 1975, THESIS U LONDON
   Barth Adam, 2002, TR20021865 COMP SCI
   BOHM C, 1966, COMMUN ACM, V9, P366, DOI 10.1145/355592.365646
   Bonchi F, 2013, ACM SIGPLAN NOTICES, V48, P457, DOI 10.1145/2480359.2429124
   Cohen E., 1996, Technical Report TR96-1598
   Cohen Ernie., 1994, Using Kleene algebra to reason about concurrency control
   Cohen Ernie, 1994, LAZY CACHING KLEENE
   Conway J.H., 1971, Regular Algebra and Finite Machines
   EROSA AM, 1994, PROCEEDINGS OF THE 1994 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P229, DOI 10.1109/ICCL.1994.288377
   FISCHER MJ, 1979, J COMPUT SYST SCI, V18, P194, DOI 10.1016/0022-0000(79)90046-1
   Foster N, 2016, LECT NOTES COMPUT SC, V9632, P282, DOI 10.1007/978-3-662-49498-1_12
   Foster N, 2015, ACM SIGPLAN NOTICES, V50, P343, DOI [10.1145/10.1145/2676726.2677011, 10.1145/2775051.2677011]
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   Garland S. J., 1973, Journal of Computer and System Sciences, V7, P119, DOI 10.1016/S0022-0000(73)80040-6
   Hendren L., 1992, International Workshop on Languages and Compilers for Parallel Computing, P406, DOI [10.1007/3-540-57502-2_61, DOI 10.1007/3-540-57502-2-61]
   Hopcroft JohnE., 1971, A linear algorithm for testing equivalence of finite automata
   Ianov I., 1960, PROBLEMS CYBERNETICS, P82
   Kaplan D. M., 1969, J COMPUT SYST SCI, V3, P361, DOI 10.1016/S0022-0000(69)80027-9
   Kleene S., 1956, AUTOMATA STUDIES, P3
   Kozen D., 1996, Tools and Algorithms for the Construction and Analysis of Systems. Second International Workshop, TACAS '96. Proceedings, P14
   Kozen D, 1997, LECT NOTES COMPUT SC, V1258, P244
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Kozen D, 2000, LECT NOTES ARTIF INT, V1861, P568
   Kozen D., 2003, Matematica Contemporanea, V24, P117
   Kozen D, 2008, IEEE S LOG, P105, DOI 10.1109/LICS.2008.32
   Kozen D, 2008, LECT NOTES COMPUT SC, V5133, P177
   Luckham D. C., 1970, Journal of Computer and System Sciences, V4, P220, DOI 10.1016/S0022-0000(70)80022-8
   Mislove MW, 2006, ELECTRON NOTES THEOR, V162, P261, DOI 10.1016/j.entcs.2005.12.113
   Morris PH, 1997, J SOFTW MAINT-RES PR, V9, P47, DOI 10.1002/(SICI)1096-908X(199701)9:1<47::AID-SMR142>3.0.CO;2-V
   Nelson G., 1979, ACM Transactions on Programming Languages and Systems, V1, P245, DOI 10.1145/357073.357079
   OULSNAM G, 1982, COMPUT J, V25, P379, DOI 10.1093/comjnl/25.3.379
   Paterson Hewitt, 1970, Comparative Schematology, P119
   PETERSON WW, 1973, COMMUN ACM, V16, P503, DOI 10.1145/355609.362337
   Pous D, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2676726.2677007, 10.1145/2775051.2677007]
   RAMSHAW L, 1988, J ACM, V35, P893, DOI 10.1145/48014.48021
   Rao Kosaraju S., 1973, Proc. 5th ACM Symp. Theory of Computing (STOC'73), P240, DOI [10.1145/800125.804055, DOI 10.1145/800125.804055]
   RUTLEDGE JD, 1964, J ACM, V11, P1, DOI 10.1145/321203.321204
   Rutten JJMM, 2000, THEOR COMPUT SCI, V249, P3, DOI 10.1016/S0304-3975(00)00056-6
   SALOMAA A, 1966, J ACM, V13, P158, DOI 10.1145/321312.321326
   SHEPHERDSON JC, 1963, J ACM, V10, P217, DOI 10.1145/321160.321170
   Silva Alexandra, 2010, THESIS RADBOUD U
   Smolka S, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P190, DOI 10.1145/3314221.3314639
   Smolka Steffen, 2019, ARXIV190705920
   TARJAN RE, 1975, J ACM, V22, P215, DOI 10.1145/321879.321884
   THOMPSON K, 1968, COMMUN ACM, V11, P419, DOI 10.1145/363347.363387
   Varacca D, 2006, MATH STRUCT COMP SCI, V16, P87, DOI 10.1017/S0960129505005074
   WILLIAMS MH, 1978, COMPUT J, V21, P161, DOI 10.1093/comjnl/21.2.161
NR 51
TC 15
Z9 15
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 61
DI 10.1145/3371129
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400062
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Christiansen, DT
   Diatchki, IS
   Dockins, R
   Hendrix, J
   Ravitch, T
AF Christiansen, David Thrane
   Diatchki, Iavor S.
   Dockins, Robert
   Hendrix, Joe
   Ravitch, Tristan
TI Dependently Typed Haskell in Industry (Experience Report)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Haskell; dependent types; performance
AB Recent versions of the Haskell compiler GHC have a number of advanced features that allow many idioms from dependently typed programming to be encoded. We describe our experiences using this "dependently typed Haskell" to construct a performance-critical library that is a key component in a number of verification tools. We have discovered that it can be done, and it brings significant value, but also at a high cost. In this experience report, we describe the ways in which programming at the edge of what is expressible in Haskell's type system has brought us value, the difficulties that it has imposed, and some of the ways we coped with the difficulties.
C1 [Christiansen, David Thrane; Diatchki, Iavor S.; Dockins, Robert; Hendrix, Joe; Ravitch, Tristan] Galois Inc, Portland, OR 97204 USA.
C3 Galois, Inc.
RP Christiansen, DT (corresponding author), Galois Inc, Portland, OR 97204 USA.
CR [Anonymous], 2012, P 8 ACM SIGPLAN WORK, DOI [10.1145/2103786.2103795, DOI 10.1145/2103786.2103795]
   Augustsson Lennart., 1994, Silly Type Families * DRAFT
   Bertot Yves, 2004, PROOF REFLECTION, P433, DOI [10.1007/978-3-662-07964-5_16, DOI 10.1007/978-3-662-07964-5_16]
   Bobot F., 2011, BOOGIE 2011 1 INT WO, P53
   Bottu GJ, 2017, ACM SIGPLAN NOTICES, V52, P148, DOI 10.1145/3156695.3122967
   Breitner Joachim, 2014, P 19 ACM SIGPLAN INT
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P241, DOI 10.1145/1090189.1086397
   Clochard M, 2016, LECT NOTES COMPUT SC, V9593, P94, DOI 10.1007/978-3-319-29613-5_6
   DEBRUIJN NG, 1991, INFORM COMPUT, V91, P189, DOI 10.1016/0890-5401(91)90066-B
   Diatchki IS, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI 10.1145/2804302.2804307
   Dockins R, 2016, LECT NOTES COMPUT SC, V9971, P56, DOI 10.1007/978-3-319-48869-1_5
   Eisenberg RA, 2012, ACM SIGPLAN NOTICES, V47, P117, DOI 10.1145/2430532.2364522
   Gibbons J, 2009, J FUNCT PROGRAM, V19, P377, DOI 10.1017/S0956796809007291
   Jones Simon L. Peyton, 2006, P 11 ACM SIGPLAN INT, P50, DOI [DOI 10.1145/1160074.1159811, 10.1145/1159803.1159811, DOI 10.1145/1159803.1159811]
   KISELYOV O., 2004, HASKELL 04, P33, DOI DOI 10.1145/1017472.1017481
   LAUNCHBURY J, 1994, SIGPLAN NOTICES, V29, P24, DOI 10.1145/773473.178246
   Lewis JR, 2003, IEEE MILIT COMMUN C, P820
   Lindley S, 2013, ACM SIGPLAN NOTICES, V48, P81, DOI 10.1145/2503778.2503786
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   McKinney L, 2014, PORTL INT CONF MANAG, P7
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Schrijvers T, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Weirich Stephanie, 2013, INT C FUNCT PROGR IC
   Weirich Stephanie, 2011, POPL
   Yang Edward Z., 2017, Ph. D. Dissertation
NR 27
TC 2
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 100
DI 10.1145/3341704
PG 16
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900023
OA gold
DA 2024-07-18
ER

PT J
AU Timany, A
   Birkedal, L
AF Timany, Amin
   Birkedal, Lars
TI Mechanized Relational Verification of Concurrent Programs with
   Continuations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Logical relations; Continuations; Concurrency
AB Concurrent higher-order imperative programming languages with continuations are very flexible and allow for the implementation of sophisticated programming patterns. For instance, it is well known that continuations can be used to implement cooperative concurrency. Continuations can also simplify web server implementations. This, in particular, helps simplify keeping track of the state of server's clients. However, such advanced programming languages are very challenging to reason about. One of the main challenges in reasoning about programs in the presence of continuations is due to the fact that the non-local flow of control breaks the bind rule, one of the important modular reasoning principles of Hoare logic.
   In this paper we present the first completely formalized tool for interactive mechanized relational verification of programs written in a concurrent higher-order imperative programming language with continuations (call/cc and throw). We develop novel logical relations which can be used to give mechanized proofs of relational properties. In particular, we prove correctness of an implementation of cooperative concurrency with continuations. In addition, we show that that a rudimentary web server implemented using the continuation-based pattern is contextually equivalent to one implemented without the continuation-based pattern. We introduce context-local reasoning principles for our calculus which allows us to regain modular reasoning principles for the fragment of the language without non-local control flow. These novel reasoning principles can be used in tandem with our (non-context-local) Hoare logic for reasoning about programs that do feature non-local control flow. Indeed, we use the combination of context-local and non-context-local reasoning to simplify reasoning about the examples.
C1 [Timany, Amin] Katholieke Univ Leuven, imec Distrinet, Dept Comp Sci, Leuven, Belgium.
   [Birkedal, Lars] Aarhus Univ, Dept Comp Sci, Aarhus, Denmark.
C3 KU Leuven; Aarhus University
RP Timany, A (corresponding author), Katholieke Univ Leuven, imec Distrinet, Dept Comp Sci, Leuven, Belgium.
EM amin.timany@cs.kuleuven.be; birkedal@cs.au.dk
OI Timany, Amin/0000-0002-2237-851X
FU FWO [G.0962.17N]; FWO travel grant [V435817N]; EU [CA15123, 40667];
   ModuRes Sapere Aude Advanced Grant from The Danish Council for
   Independent Research for the Natural Sciences (FNU)
FX The first author is a postdoctoral fellow of the Flemish research fund
   (FWO). This project was supported in part by the FWO grant (grant no.
   G.0962.17N), the FWO travel grant (V435817N), the EU Types (CA15123)
   short scientific mission (STSM) grant (reference: 40667) and by the
   ModuRes Sapere Aude Advanced Grant from The Danish Council for
   Independent Research for the Natural Sciences (FNU).
CR Ahmed AJ, 2002, IEEE S LOG, P75, DOI 10.1109/LICS.2002.1029818
   Ahmed Amal J., 2004, Ph. D. Dissertation
   Delbianco GA, 2013, ACM SIGPLAN NOTICES, V48, P363, DOI [10.1145/2544174.2500593, 10.1145/2500365.2500593]
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Berger Martin, PROGRAM LOGICS SEQUE, P194
   Birkedal L, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1926385.1926401
   Birkedal Lars, 2012, 26 INT WORKSHOP21ST, V16, P107, DOI [10.4230/LIPIcs.CSL.2012.107, DOI 10.4230/LIPICS.CSL.2012.107]
   Cerone Andrea, 2014, ICALP
   Crolard T, 2012, J LOGIC ALGEBR PROGR, V81, P181, DOI 10.1016/j.jlap.2012.01.004
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Dreyer D, 2012, J FUNCT PROGRAM, V22, P477, DOI 10.1017/S095679681200024X
   Dreyer D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:16)2011
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Felleisen Matthias, 1988, Principles of Programming Languages (POPL), DOI DOI 10.1145/73560.73576
   Flatt Matthew, 2017, MORE SYSTEMS PROGRAM
   Friedman Daniel P., 1985, POPL, P245, DOI [10.1145/318593.318654, DOI 10.1145/318593.318654]
   Haynes Christopher T., 1984, CONT COR LFP 84 CONT COR LFP 84
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krishnamurthi Shriram, 2007, Higher-Order and Symbolic Computation, V20, P431, DOI 10.1007/s10990-007-9008-y
   Krogh-Jespersen M, 2017, ACM SIGPLAN NOTICES, V52, P218, DOI 10.1145/3093333.3009877
   Laird J, 1997, IEEE S LOG, P58, DOI 10.1109/LICS.1997.614931
   Ley-Wild R, 2013, ACM SIGPLAN NOTICES, V48, P561, DOI 10.1145/2480359.2429134
   Murawski Andrzej S., 2017, CONCUR 2017
   Nakata Keiko, 2013, FUNDAMENTALS SOFTWAR
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Pitts Andrew M., 2005, Advanced Topics in Types and Programming Languages, P245
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Queinnec C., 2004, Higher-Order and Symbolic Computation, V17, P277, DOI 10.1007/s10990-004-4866-z
   Schäfer S, 2015, LECT NOTES COMPUT SC, V9236, P359, DOI 10.1007/978-3-319-22102-1_24
   Sergey I, 2015, ACM SIGPLAN NOTICES, V50, P77, DOI [10.1145/2813885.2737964, 10.1145/2737924.2737964]
   Stovring K, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P161
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Timany A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158152
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P343, DOI 10.1145/2480359.2429111
NR 45
TC 10
Z9 10
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 105
DI 10.1145/3341709
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900028
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Vassena, M
   Russo, A
   Garg, D
   Rajani, V
   Stefan, D
AF Vassena, Marco
   Russo, Alejandro
   Garg, Deepak
   Rajani, Vineet
   Stefan, Deian
TI From Fine- to Coarse-Grained Dynamic Information Flow Control and Back
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Information-flow control; verified source-to-source transformations;
   Agda
ID SECURITY
AB We show that fine-grained and coarse-grained dynamic information-flow control (IFC) systems are equally expressive. To this end, we mechanize two mostly standard languages, one with a fine-grained dynamic IFC system and the other with a coarse-grained dynamic IFC system, and prove a semantics-preserving translation from each language to the other. In addition, we derive the standard security property of non-interference of each language from that of the other, via our verified translation. This result addresses a longstanding open problem in IFC: whether coarse-grained dynamic IFC techniques are less expressive than fine-grained dynamic IFC techniques (they are not!). The translations also stand to have important implications on the usability of IFC approaches. The coarse- to fine-grained direction can be used to remove the label annotation burden that fine-grained systems impose on developers, while the fine- to coarse-grained translation shows that coarse-grained systems-which are easier to design and implement-can track information as precisely as fine-grained systems and provides an algorithm for automatically retrofitting legacy applications to run on existing coarse-grained systems.
C1 [Vassena, Marco; Russo, Alejandro] Chalmers Univ Technol, Gothenburg, Sweden.
   [Garg, Deepak; Rajani, Vineet] Max Planck Inst Software Syst, Saarbrucken, Germany.
   [Stefan, Deian] Univ Calif San Diego, La Jolla, CA 92093 USA.
C3 Chalmers University of Technology; Max Planck Society; University of
   California System; University of California San Diego
RP Vassena, M (corresponding author), Chalmers Univ Technol, Gothenburg, Sweden.
EM vassena@chalmers.se; russo@chalmers.se; dg@mpi-sws.org;
   vrajani@mpi-sws.org; deian@cs.ucsd.edu
OI Russo, Alejandro/0000-0002-4338-6316
FU Swedish Foundation for Strategic Research (SSF) [RIT17-0023,
   RIT17-0011]; Swedish research agency Vetenskapsradet; DFG [SFB 1223];
   Cisco; CONIX Research Center, one of six centers in JUMP; DARPA
FX We thanks the anonymous POPL and POPL AEC reviewers for the insightful
   comments. This work was funded by the Swedish Foundation for Strategic
   Research (SSF) under the project Octopi (Ref. RIT17-0023) andWebSec
   (Ref. RIT17-0011) as well as the Swedish research agency
   Vetenskapsradet. Vineet Rajani was partly funded through the
   Collaborative Research Center "Methods and Tools for Understanding and
   Controlling Privacyz (SFB 1223) of the DFG, project "Programming
   Principles and Abstractions for Privacy". This work was also supported
   in part by a gift from Cisco and the CONIX Research Center, one of six
   centers in JUMP, a Semiconductor Research Corporation (SRC) program
   sponsored by DARPA.
CR Austin Thomas H., 2010, P 5 ACM SIGPLAN WORK P 5 ACM SIGPLAN WORK
   Austin Thomas H., 2009, P 9 ACM WORKSH PROGR P 9 ACM WORKSH PROGR
   Barthe G, 2007, COMPUT LANG SYST STR, V33, P35, DOI 10.1016/j.cl.2005.05.002
   Bauer Lujo, 2015, P 22 ANN NETW DISTR
   Bichhawat Abhishek, 2014, INT C PRINC SEC TRUS, P159
   Broberg Niklas, 2013, Programming Languages and Systems. 11th Asian Symposium, APLAS 2013. Proceedings: LNCS 8301, P217, DOI 10.1007/978-3-319-03542-0_16
   Buiras P, 2015, ACM SIGPLAN NOTICES, V50, P289, DOI [10.1145/2784731.2784758, 10.1145/2858949.2784758]
   Buiras P, 2014, P IEEE CSFW, P65, DOI 10.1109/CSF.2014.13
   Efstathopoulos Petros, 2005, P 20 ACM S OP SYST P P 20 ACM S OP SYST P
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   Fernandes E, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P531
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Hedin D, 2014, P ACM S APPL COMP SA P ACM S APPL COMP SA
   Heule Stefan., 2015, P C PRINC SEC TRUST P C PRINC SEC TRUST
   Hritcu C, 2013, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2013.10
   Jaskelioff M., 2011, P A ERSH INT C PERSP P A ERSH INT C PERSP
   Jia L., 2013, P 18 EUR S RES COMP
   Krohn M., 2007, INFORM FLOW CONTROL
   Levy Amit., 2012, 10 USENIX S OP SYST 10 USENIX S OP SYST
   Myers Andrew C., 2006, Jif 3.0: Java information flow
   Nadkarni A, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P1119
   Pottier F, 2003, ACM T PROGR LANG SYS, V25, P117, DOI 10.1145/596980.596983
   Rajani Vineet, 2017, ACM SIGLOG News, V4, P6, DOI 10.1145/3051528.3051531
   Rajani V, 2018, P IEEE COMPUT SECUR, P233, DOI 10.1109/CSF.2018.00024
   Roy I, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P63, DOI 10.1145/1542476.1542484
   Russo A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P280, DOI 10.1145/2784731.2784756
   Russo A, 2010, 2010 23RD IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P186, DOI 10.1109/CSF.2010.20
   Russo A, 2009, ACM SIGPLAN NOTICES, V44, P13, DOI 10.1145/1543134.1411289
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Schmitz T, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P1617, DOI 10.1145/3243734.3243806
   Stefan D, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000241
   Stefan D, 2011, HASKELL 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN HASKELL SYMPOSIUM, P95
   Stefan Deian, 2014, 11 USENIX S OPERATIN, P131
   Stefan Deian., 2012, INT C FUNCT PROGR IC INT C FUNCT PROGR IC
   Tsai TC, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P187, DOI 10.1109/CSF.2007.6
   Vassena M, 2018, J LOG ALGEBR METHODS, V95, P148, DOI 10.1016/j.jlamp.2017.12.003
   Vassena M, 2016, PROCEEDINGS OF THE 2016 ACM WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS'16), P15, DOI 10.1145/2993600.2993608
   Volpano D, 1997, P IEEE CSFW, P156, DOI 10.1109/CSFW.1997.596807
   Yang J, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P85
   Yip Alexander, 2009, P 4 ACM EUR C COMP S P 4 ACM EUR C COMP S
   Zdancewic Stephan Arthur, 2002, PROGRAMMING LANGUAGE
   Zeldovich N, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P263
   Zeldovich Nickolai, 2008, P 5 USENIX S NETW SY P 5 USENIX S NETW SY, P293
NR 43
TC 10
Z9 12
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 76
DI 10.1145/3290389
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300076
OA gold, Green Published
DA 2024-07-18
ER

EF