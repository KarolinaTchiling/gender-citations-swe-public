FN Clarivate Analytics Web of Science
VR 1.0
PT J
AU Murali, A
   Peña, L
   Jhala, R
   Madhusudan, P
AF Murali, Adithya
   Pena, Lucas
   Jhala, Ranjit
   Madhusudan, P.
TI Complete First-Order Reasoning for Properties of Functional Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE First-Order Logic; Completeness; Liquid Haskell; Refinement Types;
   Algebraic Datatypes (ADTs); Natural Proofs; Thrifty Instantiation
ID DECISION PROCEDURES; NATURAL PROOFS; SET
AB Several practical tools for automatically verifying functional programs (e.g., Liquid Haskell and Leon for Scala programs) rely on a heuristic based on unrolling recursive function definitions followed by quantifier-free reasoning using SMT solvers. We uncover foundational theoretical properties of this heuristic, revealing that it can be generalized and formalized as a technique that is in fact complete for reasoning with combined First-Order theories of algebraic datatypes and background theories, where background theories support decidable quantifier-free reasoning. The theory developed in this paper explains the efficacy of these heuristics when they succeed, explain why they fail when they fail, and the precise role that user help plays in making proofs succeed.
C1 [Murali, Adithya; Pena, Lucas; Madhusudan, P.] Univ Illinois, Urbana, IL 61820 USA.
   [Jhala, Ranjit] Univ Calif San Diego, San Diego, CA USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   University of California System; University of California San Diego
RP Murali, A (corresponding author), Univ Illinois, Urbana, IL 61820 USA.
EM adithya5@illinois.edu; lucaspena13@gmail.com; rjhala@eng.ucsd.edu;
   madhu@illinois.edu
OI Murali, Adithya/0000-0002-6311-1467; Parthasarathy,
   Madhusudan/0000-0002-9782-721X; Jhala, Ranjit/0000-0002-1802-9421
FU Amazon; Discovery Partners Institute (DPI) science team seed grant
FX This work is supported in part by a research grant from Amazon and a
   Discovery Partners Institute (DPI) science team seed grant.
CR Amin Nada, 2014, Tests and Proofs. 8th International Conference (TAP 2014). Held as Part of STAF 2014. Proceedings: LNCS 8570, P20, DOI 10.1007/978-3-319-09099-3_2
   [Anonymous], 2000, Computer-Aided Reasoning: An Approach
   [Anonymous], 1991, Hist. Philos. Logic
   Baader F, 2005, LECT NOTES ARTIF INT, V3632, P278
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Barrett Clark, P 23 INT C COMP AID, P171
   Barwise J., 1977, Handbook of Mathematical Logic
   Bjorner Nikolaj Skallerud, 1999, Integrating Decision Procedures for Temporal Veri~cation
   Blanchette JC, 2010, LECT NOTES COMPUT SC, V6397, P127, DOI 10.1007/978-3-642-16242-8_10
   Blank RH, 2013, BASIC BIOETH, P1
   Bobot F., 2011, BOOGIE 2011 1 INT WO, P53
   Bobot F, 2015, INT J SOFTW TOOLS TE, V17, P709, DOI 10.1007/s10009-014-0314-5
   Boyer R.S., 1988, A Computational Logic Handbook, V1st ed.
   Bradley A. R., 2007, The Calculus of Computation
   Chamarthi HR, 2011, LECT NOTES COMPUT SC, V6605, P291, DOI 10.1007/978-3-642-19835-9_27
   Claessen Koen, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P392, DOI 10.1007/978-3-642-38574-2_27
   Cruanes S, 2017, LECT NOTES ARTIF INT, V10483, P172, DOI 10.1007/978-3-319-66167-4_10
   De Angelis E, 2018, THEOR PRACT LOG PROG, V18, P452, DOI 10.1017/S1471068418000157
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Enderton H. B., 2001, A mathematical introduction to logic
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Fontaine Pascal, 2007, 4 INT VER WORKSH VER, V259, P37
   Ge YT, 2009, LECT NOTES COMPUT SC, V5643, P306
   Ghilardi S, 2004, J AUTOM REASONING, V33, P221, DOI 10.1007/s10817-004-6241-5
   github, 2022, The dafny-lang community
   Haifani F, 2021, LECT NOTES ARTIF INT, V12699, P327, DOI 10.1007/978-3-030-79876-5_19
   Hajdu Marton, 2020, Intelligent Computer Mathematics. 13th International Conference, CICM 2020. Proceedings. Lecture Notes in Artificial Intelligence. Subseries of Lecture Notes in Computer Science (LNAI 12236), P123, DOI 10.1007/978-3-030-53518-6_8
   Hajdu Marton, 2021, P 21 C FORM METH COM, P246, DOI [10.34727/2021/isbn.978-3-85448-046-4_34, DOI 10.34727/2021/ISBN.978-3-85448-046-4_34]
   Hamza J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360592
   Hodges Wilfrid, 1997, A shorter model theory
   Hojjat H, 2017, INT SYMP SYMB NUMERI, P145, DOI 10.1109/SYNASC.2017.00033
   Ihlemann C, 2008, LECT NOTES COMPUT SC, V4963, P265, DOI 10.1007/978-3-540-78800-3_19
   Ireland A, 1996, J AUTOM REASONING, V16, P79, DOI 10.1007/BF00244460
   Johansson M, 2010, LECT NOTES COMPUT SC, V6172, P291, DOI 10.1007/978-3-642-14052-5_21
   Kapur D., 2006, SIGSOFT FSE, P105, DOI [10.1145/1181775.1181789, DOI 10.1145/1181775.1181789]
   Kovacs Laura, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P1, DOI 10.1007/978-3-642-39799-8_1
   Kovács L, 2017, ACM SIGPLAN NOTICES, V52, P260, DOI 10.1145/3093333.3009887
   Krstic S, 2007, LECT NOTES COMPUT SC, V4424, P602
   Leino KRM, 2016, LECT NOTES COMPUT SC, V9779, P361, DOI 10.1007/978-3-319-41528-4_20
   Leino Rustan, 2013, Veri~ed Calculations
   Löding C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158098
   Maltsev A. I., 1962, Sibirsk. Mat. Zh., V3, P729
   Manna Z, 2007, LECT NOTES COMPUT SC, V4514, P363, DOI 10.1007/978-3-540-72734-7_26
   Matiyasevich Y, 1993, Hilbert's tenth problem. Foundations of Computing
   Moskal M, 2009, P 7 INT WORKSH SAT M, P20, DOI [DOI 10.1145/1670412.1670416, 10.1145/1670412.1670416]
   Murali A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563354
   Nelson Charles Gregory, 1980, Ph. D. Dissertation
   Nelson G., 1979, ACM Transactions on Programming Languages and Systems, V1, P245, DOI 10.1145/357073.357079
   Passmore G, 2020, LECT NOTES COMPUT SC, V12167, P464, DOI 10.1007/978-3-030-51054-1_30
   Pek E, 2014, ACM SIGPLAN NOTICES, V49, P440, DOI [10.1145/2594291.2594325, 10.1145/2666356.2594325]
   Pham Tuan-Hung., 2013, Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2013, P611, DOI [10.1145/2491411.2494597, DOI 10.1145/2491411.2494597]
   Qiu XK, 2013, ACM SIGPLAN NOTICES, V48, P231, DOI 10.1145/2499370.2462169
   Reger G., 2017, 15 INT WORKSH SAT MO, V1889, P63
   Reynolds A, 2017, J AUTOM REASONING, V58, P341, DOI 10.1007/s10817-016-9372-6
   Reynolds A, 2015, LECT NOTES COMPUT SC, V8931, P80
   Reynolds Andrew, 2017, EPiC Series in Computing, V44, P1, DOI [10.29007/jmd3, DOI 10.29007/JMD3]
   Reynolds John C., 1972, P ACM ANN C ACM 72 N, V2, P717, DOI [10.1145/800194.805852, DOI 10.1145/800194.805852]
   Rondon PM, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1379022.1375602
   Rümmer P, 2012, LECT NOTES COMPUT SC, V7180, P359, DOI 10.1007/978-3-642-28717-6_28
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Rustan K M Leino., 2008, This is Boogie 2
   Rybina Tatiana., 2001, ACM Transactions on Computational Logic, V2, P155, DOI [10.1145/371316.371494, DOI 10.1145/371316.371494]
   Sivaraman A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563306
   Skolem T., 1934, Fundamenta Mathematicae, V23, P150, DOI [10.4064/fm-23-1-150-161, DOI 10.4064/FM-23-1-150-161]
   Sofronie-Stokkermans V, 2009, LECT NOTES ARTIF INT, V5663, P67, DOI 10.1007/978-3-642-02959-2_5
   Suter P, 2011, LECT NOTES COMPUT SC, V6887, P298, DOI 10.1007/978-3-642-23702-7_23
   Suter P, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P199, DOI 10.1145/1706299.1706325
   Tinelli C, 1996, APPL LOG SER, V3, P103
   Tinelli C, 2004, LECT NOTES COMPUT SC, V3229, P641, DOI 10.1007/978-3-540-30227-8_53
   Tinelli C, 2005, J AUTOM REASONING, V34, P209, DOI 10.1007/s10817-005-5204-9
   Unno H, 2017, LECT NOTES COMPUT SC, V10427, P571, DOI 10.1007/978-3-319-63390-9_30
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158141
   Wadler P, 2015, COMMUN ACM, V58, P75, DOI 10.1145/2699407
   Wies T, 2009, LECT NOTES ARTIF INT, V5749, P366, DOI 10.1007/978-3-642-04222-5_23
   Winskel G., 1993, The Formal Semantics of Programming Languages
   WOS L, 1965, J ACM, V12, P536, DOI 10.1145/321296.321302
   Yang WK, 2019, LECT NOTES COMPUT SC, V11802, P600, DOI 10.1007/978-3-030-30048-7_35
   Zhang T, 2006, INFORM COMPUT, V204, P1526, DOI 10.1016/j.ic.2006.03.004
NR 79
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 259
DI 10.1145/3622835
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100039
OA gold
DA 2024-07-18
ER

PT J
AU Schröer, P
   Batz, K
   Kaminski, BL
   Katoen, JP
   Matheja, C
AF Schroeer, Philipp
   Batz, Kevin
   Kaminski, Benjamin Lucien
   Katoen, Joost-Pieter
   Matheja, Christoph
TI A Deductive Verification Infrastructure for Probabilistic Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE deductive verification; quantitative verification; probabilistic
   programs; weakest preexpectations; real-valued logics; automated
   reasoning
ID INVARIANT GENERATION; INDUCTION; CHECKING
AB This paper presents a quantitative program verification infrastructure for discrete probabilistic programs. Our infrastructure can be viewed as the probabilistic analogue of Boogie: its central components are an intermediate verification language (IVL) together with a real-valued logic. Our IVL provides a programming-language-style for expressing verification conditions whose validity implies the correctness of a program under investigation. As our focus is on verifying quantitative properties such as bounds on expected outcomes, expected run-times, or termination probabilities, off-the-shelf IVLs based on Boolean first-order logic do not suffice. Instead, a paradigm shift from the standard Boolean to a real-valued domain is required.
   Our IVL features quantitative generalizations of standard verification constructs such as assume- and assert-statements. Verification conditions are generated by a weakest-precondition-style semantics, based on our real-valued logic. We show that our verification infrastructure supports natural encodings of numerous verification techniques from the literature. With our SMT-based implementation, we automatically verify a variety of benchmarks. To the best of our knowledge, this establishes the first deductive verification infrastructure for expectation-based reasoning about probabilistic programs.
C1 [Schroeer, Philipp; Batz, Kevin; Katoen, Joost-Pieter] Rhein Westfal TH Aachen, Aachen, Germany.
   [Kaminski, Benjamin Lucien] Saarland Univ, Saarbrucken, Germany.
   [Kaminski, Benjamin Lucien] UCL, London, England.
   [Matheja, Christoph] Tech Univ Denmark, Lyngby, Denmark.
C3 RWTH Aachen University; Saarland University; University of London;
   University College London; Technical University of Denmark
RP Schröer, P (corresponding author), Rhein Westfal TH Aachen, Aachen, Germany.
EM phisch@cs.rwth-aachen.de; kevin.batz@cs.rwth-aachen.de;
   kaminski@cs.uni-saarland.de; katoen@cs.rwth-aachen.de; chmat@dtu.dk
RI ; Katoen, Joost-Pieter/O-3307-2018
OI Batz, Kevin/0000-0001-8705-2564; Katoen,
   Joost-Pieter/0000-0002-6143-1926; Kaminski, Benjamin
   Lucien/0000-0001-5185-2324; Schroer, Philipp/0000-0002-4329-530X
FU Digital Research Centre Denmark (DIREC); ERC Advanced Research Grant
   FRAPPANT [787914]; 2022 WhatsApp Privacy Aware Program Analysis Research
   Award
FX This work was partially supported by the Digital Research Centre Denmark
   (DIREC), the ERC Advanced Research Grant FRAPPANT (grant no. 787914),
   and the 2022 WhatsApp Privacy Aware Program Analysis Research Award.
CR Abate A, 2021, LECT NOTES COMPUT SC, V12760, P3, DOI 10.1007/978-3-030-81688-9_1
   Agrawal S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158122
   Amrollahi D, 2022, LECT NOTES COMPUT SC, V13790, P19, DOI 10.1007/978-3-031-22308-2_3
   [Anonymous], 1969, Machine intelligence
   [Anonymous], 1993, LNCS
   Avanzini M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428240
   Baaz M., 1996, LECT NOTES LOGIC, V6
   Bao JL, 2022, LECT NOTES COMPUT SC, V13371, P33, DOI 10.1007/978-3-031-13185-1_3
   Barthe Gilles, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P117, DOI 10.1007/978-3-319-89884-1_5
   Barthe Gilles, 2014, Foundations of Security Analysis and Design VII. FOSAD 2012/2013 Tutorial Lectures: LNCS 8604, P146, DOI 10.1007/978-3-319-10082-1_6
   Barthe G, 2016, LECT NOTES COMPUT SC, V9779, P43, DOI 10.1007/978-3-319-41528-4_3
   Barthe G, 2011, LECT NOTES COMPUT SC, V6841, P71, DOI 10.1007/978-3-642-22792-9_5
   Barthe Gilles, 2020, Foundations of Probabilistic Programming, DOI DOI 10.1017/9781108770750
   Bartocci Ezio, 2020, MORA AUTOMATIC GENER, V12078, P492, DOI [10.1007/978- 3- 030- 45190- 5_28, DOI 10.1007/978-3-030-45190-5_28]
   Batz Kevin, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P186, DOI 10.1007/978-3-319-89884-1_7
   Batz K, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571260
   Batz K, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527310
   Batz K, 2022, LECT NOTES COMPUT SC, V13240, P57, DOI 10.1007/978-3-030-99336-8_3
   Batz K, 2021, LECT NOTES COMPUT SC, V12760, P524, DOI 10.1007/978-3-030-81688-9_25
   Batz K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434320
   Batz K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290347
   Batz K, 2020, LECT NOTES COMPUT SC, V12225, P512, DOI 10.1007/978-3-030-53291-8_27
   Batz Kevin, 2023, TACAS, DOI DOI 10.1007/978-3-031-30820-8_25
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Chen YF, 2015, LECT NOTES COMPUT SC, V9206, P658, DOI 10.1007/978-3-319-21690-4_44
   Cousot P, 2013, LECT NOTES COMPUT SC, V7737, P128
   Cousot Patrick, 2011, VERIFICATION MODEL C, V6538, DOI [10.1007/978-3- 642- 18275-4_12, DOI 10.1007/978-3-642-18275-4_12]
   DArgenio PR, 1997, LECT NOTES COMPUT SC, V1217, P416, DOI 10.1007/BFb0035403
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Feng YJ, 2017, LECT NOTES COMPUT SC, V10482, P400, DOI 10.1007/978-3-319-68167-2_26
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Fioriti LMF, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI 10.1145/2676726.2677001
   Fu HF, 2019, LECT NOTES COMPUT SC, V11388, P468, DOI 10.1007/978-3-030-11245-5_22
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Hark M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371105
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hölzl J, 2016, LECT NOTES COMPUT SC, V9807, P475, DOI 10.1007/978-3-319-43144-4_30
   Hurd J, 2005, THEOR COMPUT SCI, V346, P96, DOI 10.1016/j.tcs.2005.08.005
   Kaminski BL, 2019, ACTA INFORM, V56, P255, DOI 10.1007/s00236-018-0321-1
   Kaminski BL, 2018, J ACM, V65, DOI 10.1145/3208102
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   Kaminski Benjamin Lucien, 2019, Ph. D. Dissertation, DOI [10.18154/RWTH-2019-01829, DOI 10.18154/RWTH-2019-01829]
   Kaminski Benjamin Lucien, 2020, FDN PROBABILISTIC PR, DOI [10.1017/9781108770750, DOI 10.1017/9781108770750]
   Katoen JP, 2010, LECT NOTES COMPUT SC, V6337, P390, DOI 10.1007/978-3-642-15769-1_24
   Kirchner F, 2015, FORM ASP COMPUT, V27, P573, DOI 10.1007/s00165-014-0326-7
   Kleene Stephen Cole, 1952, INTRO METAMATHEMATIC, DOI [10.2307/2268620, DOI 10.2307/2268620]
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Kozen Dexter, 1983, P ACM S THEORY COMPU, P291, DOI [10.1145/800061.808758, DOI 10.1145/800061.808758]
   Kushilevitz E., 1992, Proceedings of the Eleventh Annual ACM Symposium on Principles of Distributed Computing, P275, DOI 10.1145/135419.135468
   Leutgeb L, 2022, LECT NOTES COMPUT SC, V13372, P70, DOI 10.1007/978-3-031-13188-2_4
   Lumbroso Jeremie O., 2013, ABS13041916 CORR
   Matheja Christoph, 2020, THESIS, DOI [10.18154/RWTH-2020-00940, DOI 10.18154/RWTH-2020-00940]
   McIver A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158121
   McIver Annabelle., 2005, MG COMP SCI
   Meyer Fabian, 2021, Tools and Algorithms for the Construction and Analysis of Systems. 27th International Conference, TACAS 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12651), P250, DOI 10.1007/978-3-030-72016-2_14
   Moosbrugger M, 2021, LECT NOTES COMPUT SC, V13047, P667, DOI 10.1007/978-3-030-90870-6_36
   Moosbrugger M, 2021, LECT NOTES COMPUT SC, V12648, P491, DOI 10.1007/978-3-030-72019-3_18
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Muller Peter, 2019, ENG SECURE DEPENDABL
   Muller Peter, 2016, ONLINE APPENDIX VIPE
   Nipkow T., 2002, LNCS, V2283, DOI DOI 10.1007/3-540-45949-9
   Nori AV, 2014, AAAI CONF ARTIF INTE, P2476
   O'Hearn PW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371078
   Olmedo F, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3156018
   Olmedo F, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P672, DOI 10.1145/2933575.2935317
   Pardo Raul, 2022, POLYM CHEM-UK, V13572, P369
   Preining N, 2010, LECT NOTES COMPUT SC, V6397, P30, DOI 10.1007/978-3-642-16242-8_4
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Rustan K., 2008, THIS IS BOOGIE, V2
   Sheeran M, 2000, LECT NOTES COMPUT SC, V1954, P108
   Susag Z, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563344
   Takisaka T, 2021, ACM T PROGR LANG SYS, V43, DOI [10.1145/345096, 10.1145/3450967]
   Ngo VC, 2018, ACM SIGPLAN NOTICES, V53, P496, DOI [10.1145/3192366.3192394, 10.1145/3296979.3192394]
   Wikipedia, 2023, RAND WALK
   Wikipedia, 2023, COUP COLL PROBL
   Zhang LP, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527331
NR 78
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 294
DI 10.1145/3622870
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100074
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Bagnall, A
   Stewart, G
   Banerjee, A
AF Bagnall, Alexander
   Stewart, Gordon
   Banerjee, Anindya
TI Formally Verified Samplers from Probabilistic Programs with Loops and
   Conditioning
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Probabilistic Programming; Verified Compilers
AB We present Zar: a formally verified compiler pipeline from discrete probabilistic programs with unbounded loops in the conditional probabilistic guarded command language (cpGCL) to proved-correct executable samplers in the random bit model. We exploit the key idea that all discrete probability distributions can be reduced to unbiased coin-flipping schemes. The compiler pipeline first translates cpGCL programs into choice-fix trees, an intermediate representation suitable for reduction of biased probabilistic choices. Choice-fix trees are then translated to coinductive interaction trees for execution within the random bit model. The correctness of the composed translations establishes the sampling equidistribution theorem: compiled samplers are correct wrt. the conditional weakest pre-expectation semantics of cpGCL source programs. Zar is implemented and fully verified in the Coq proof assistant. We extract verified samplers to OCaml and Python and empirically validate them on a number of illustrative examples.
C1 [Bagnall, Alexander] Ohio Univ, Athens, OH 45701 USA.
   [Stewart, Gordon] BedRock Syst Inc, Boston, MA USA.
   [Banerjee, Anindya] IMDEA Software Inst, Madrid, Spain.
C3 University System of Ohio; Ohio University; IMDEA Software Institute
RP Bagnall, A (corresponding author), Ohio Univ, Athens, OH 45701 USA.
EM abagnalla@gmail.com; gordon@bedrocksystems.com;
   anindya.banerjee@imdea.org
FU National Science Foundation (NSF); NSF [1657358]
FX We thank the anonymous reviewers and the paper's shepherd, Jan Hoffmann,
   for their comments. Banerjee's research was based on work supported by
   the National Science Foundation (NSF), while working at the Foundation.
   Any opinions, findings, and conclusions or recommendations expressed in
   this article are those of the authors and do not necessarily reflect the
   views of the NSF. Bagnall and Stewart were partially supported by NSF
   award #1657358.
CR AKERS SB, 1978, IEEE T COMPUT, V27, P509, DOI 10.1109/TC.1978.1675141
   ALLEN R, 1987, ACM T PROGR LANG SYS, V9, P491, DOI 10.1145/29873.29875
   [Anonymous], 1985, Long-range forecasting: from crystal ball to computer
   [Anonymous], 1994, Handbook of logic in computer science
   [Anonymous], 1976, ALGORITHMS COMPLEXIT
   Aranha DF, 2020, CCS '20: PROCEEDINGS OF THE 2020 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P225, DOI 10.1145/3372297.3417268
   Bagnall Alexander, 2023, Zenodo, DOI 10.5281/ZENODO.7809333
   Bagnall Alexander, 2020, LAFI 2020 LANGUAGES
   Becher V, 2022, INFORM COMPUT, V285, DOI 10.1016/j.ic.2021.104857
   Bingham E, 2019, J MACH LEARN RES, V20
   Box G.E., 2011, Bayesian inference in statistical analysis
   Chargueraud Arthur., 2017, COQANDAXIOMS
   Chavira M, 2008, ARTIF INTELL, V172, P772, DOI 10.1016/j.artint.2007.11.002
   Chlipala A, 2013, Certified programming with dependent types
   Darwiche A, 2002, J ARTIF INTELL RES, V17, P229, DOI 10.1613/jair.989
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Downey RG, 2004, J SYMBOLIC LOGIC, V69, P533, DOI 10.2178/jsl/1082418542
   Dutta S, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P729, DOI 10.1145/3338906.3338972
   Dutta S, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P574, DOI 10.1145/3236024.3236057
   Elkins Derek., 2021, TYING KNOT
   Geyer CJ, 2011, CH CRC HANDB MOD STA, P3
   Ghosh A, 2009, ACM S THEORY COMPUT, P351
   Goodman Noah, 2012, arXiv
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Gunter C.A., 1993, Semantics of Programming Languages-Structures and Techniques
   Halmos P. R., 2013, Measure Theory, V18
   Holtzen S, 2019, Arxiv, DOI arXiv:1904.02079
   Holtzen S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428208
   Huang D, 2017, ACM SIGPLAN NOTICES, V52, P111, DOI [10.1145/3140587.3062375, 10.1145/3062341.3062375]
   Hur CK, 2013, ACM SIGPLAN NOTICES, V48, P193, DOI 10.1145/2480359.2429093
   Kamath Gautam, 2020, NEURIPS, V33, P15676, DOI DOI 10.29012/JPC.784
   Kaminski Benjamin Lucien, 2019, Advanced weakest precondition calculi for probabilistic programs
   Koh N, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P234, DOI 10.1145/3293880.3294106
   Kozen D, 2017, MATH STRUCT COMP SCI, V27, P1132, DOI 10.1017/S0960129515000493
   Kudelski Security, 2020, DEF GUID MOD BIAS AV
   Kuipers L., 2012, Uniform Distribution of Sequences
   KULLBACK S, 1951, ANN MATH STAT, V22, P79, DOI 10.1214/aoms/1177729694
   Lecun Y, 1998, P IEEE, V86, P2278, DOI 10.1109/5.726791
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Leroy Xavier, 2021, OCAML SYSTEM RELEASE, P1
   Lesani M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527324
   Letan T, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P32, DOI 10.1145/3372885.3373812
   Letouzey P, 2008, LECT NOTES COMPUT SC, V5028, P359, DOI 10.1007/978-3-540-69407-6_39
   MARTINLOF P, 1966, INFORM CONTROL, V9, P602, DOI 10.1016/S0019-9958(66)80018-9
   Olmedo F, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3156018
   Olmedo F, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P672, DOI 10.1145/2933575.2935317
   Patterson D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341689
   pythonlib, 2022, PYTHONLIB
   Raschka S., 2019, PYTHON MACHINE LEARN, V3rd
   Rubinstein R.Y., 2016, Simulation and the Monte Carlo method
   Saad FA, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371104
   Saad FA, 2020, PR MACH LEARN RES, V108, P1036
   SciPy, 2022, SCIPY STATS
   Selsam Daniel, 2018, WORKSHOP PROBABILIST
   SHANNON CE, 1948, BELL SYST TECH J, V27, P623, DOI 10.1002/j.1538-7305.1948.tb00917.x
   Szymczak M, 2020, Arxiv, DOI arXiv:2005.09013
   Wang D, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P788, DOI 10.1145/3453483.3454077
   Weyl H., 1916, Math. Ann., V77, P313
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Yedidia J.S., 2003, EXPLORING ARTIFICIAL, P239, DOI DOI 10.5555/779343.779352
   Zhang Hengchu., 2021, 12 INT C INTERACTIVE, V193, p32:1, DOI DOI 10.4230/LIPICS.ITP.2021.32
   Zhao RK, 2020, LECT NOTES COMPUT SC, V12100, P284, DOI 10.1007/978-3-030-44223-1_16
NR 63
TC 1
Z9 1
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 106
DI 10.1145/3591220
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900002
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Kovach, S
   Kolichala, P
   Gu, TC
   Kjolstad, F
AF Kovach, Scott
   Kolichala, Praneeth
   Gu, Tiancheng
   Kjolstad, Fredrik
TI Indexed Streams: A Formal Intermediate Representation for Fused
   Contraction Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE contractions; streams; operational semantics; functional programming
ID FUSION; LANGUAGE; ALGEBRA
AB We introduce indexed streams, a formal operational model and intermediate representation that describes the fused execution of a contraction language that encompasses both sparse tensor algebra and relational algebra. We prove that the indexed stream model is correct with respect to a functional semantics. We also develop a compiler for contraction expressions that uses indexed streams as an intermediate representation. The compiler is only 540 lines of code, but we show that its performance can match both the TACO compiler for sparse tensor algebra and the SQLite and DuckDB query processing libraries for relational algebra.
C1 [Kovach, Scott; Kolichala, Praneeth; Gu, Tiancheng; Kjolstad, Fredrik] Stanford Univ, Stanford, CA 94305 USA.
C3 Stanford University
RP Kovach, S (corresponding author), Stanford Univ, Stanford, CA 94305 USA.
EM dskovach@stanford.edu; pkolich@stanford.edu; timothygu@stanford.edu;
   kjolstad@stanford.edu
OI Kjolstad, Fredrik Berg/0000-0002-2267-903X; Gu,
   Tiancheng/0000-0002-2090-9735
FU National Science Foundation [CCF-2143061, CCF-2216964]
FX We thank Olivia Hsu, Shiv Sundram, Rohan Yadav, Bobby Yan, Manya Bansal,
   Ajay Brahmakshatriya, and Matthew Sotoudeh for feedback on drafts. We
   also thank Kyle Miller for sharing explanations of Lean techniques.
   Finally, we thank our anonymous reviewers and our shepherd, Adam
   Chlipala, for invaluable comments and suggestions. This work was in part
   supported by the National Science Foundation under Grant CCF-2143061 and
   CCF-2216964. Any opinions, findings, conclusions, or recommendations
   expressed in this material are those of the authors and do not
   necessarily reflect the views of the aforementioned funding agencies.
CR Aberger CR, 2018, PROC INT CONF DATA, P449, DOI 10.1109/ICDE.2018.00048
   Aberger CR, 2017, ACM T DATABASE SYST, V42, DOI 10.1145/3129246
   Ahrens P, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P269, DOI 10.1145/3519939.3523442
   Aji SM, 2000, IEEE T INFORM THEORY, V46, P325, DOI 10.1109/18.825794
   Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7809339
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Astrahan M. M., 1976, ACM Transactions on Database Systems, V1, P97, DOI 10.1145/320455.320457
   Bik A, 2022, ACM T ARCHIT CODE OP, V19, DOI 10.1145/3544559
   Blelloch GE, 1996, ACM SIGPLAN NOTICES, V31, P213, DOI 10.1145/232629.232650
   Blelloch Guy E., 1992, CMUCS92103 CARN MELL
   Boncz P, 2014, LECT NOTES COMPUT SC, V8391, P61, DOI 10.1007/978-3-319-04936-6_5
   Caspi Paul, 1995, 8 INT S LANGUAGES IN
   Chakravarty M., 2007, PROC WORKSHOP DECLAR, P10
   Chou S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276493
   CODD EF, 1970, COMMUN ACM, V13, P377, DOI 10.1145/357980.358007
   Colaco J.-L., 2006, EMSOFT, P73
   Coutts D, 2007, ACM SIGPLAN NOTICES, V42, P315, DOI 10.1145/1291220.1291199
   Davis TA, 2011, ACM T MATH SOFTWARE, V38, DOI 10.1145/2049662.2049663
   de Moura L, 2021, LECT NOTES ARTIF INT, V12699, P625, DOI 10.1007/978-3-030-79876-5_37
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Elliott C, 2019, Arxiv, DOI arXiv:1903.10677
   Green Todd J., 2007, PODS, DOI DOI 10.1145/1265530.1265535
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Hall P., 1975, Conference Record of the 2nd ACM Symposium on Principles of Programming Languages, P225
   HELD GD, 1975, P MAY 19 22 1975 NAT, P409, DOI DOI 10.1145/1499949.1500029
   Henriksen T, 2017, ACM SIGPLAN NOTICES, V52, P556, DOI [10.1145/3140587.3062354, 10.1145/3062341.3062354]
   Henry R, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485505
   Hipp R. D., 2020, SQLite
   Intel, 2009, INT MATH KERN LIBR R
   Kemper A, 2011, PROC INT CONF DATA, P195, DOI 10.1109/ICDE.2011.5767867
   Kersten T, 2018, PROC VLDB ENDOW, V11, P2209, DOI 10.14778/3275366.3275370
   Khamis MA, 2016, PODS'16: PROCEEDINGS OF THE 35TH ACM SIGMOD-SIGACT-SIGAI SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P13, DOI 10.1145/2902251.2902280
   Kiselyov O, 2017, ACM SIGPLAN NOTICES, V52, P285, DOI 10.1145/3093333.3009880
   Kjolstad F, 2019, INT SYM CODE GENER, P180, DOI [10.1109/cgo.2019.8661185, 10.1109/CGO.2019.8661185]
   Kjolstad F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133901
   Leis V, 2013, PROC INT CONF DATA, P38, DOI 10.1109/ICDE.2013.6544812
   Liu A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498717
   Mattson T, 2013, IEEE HIGH PERF EXTR
   McKinney W., 2010, P 9 PYTHON SCI C, P51, DOI DOI 10.25080/MAJORA-92BF1922-00A
   Menon P, 2017, PROC VLDB ENDOW, V11, P1, DOI 10.14778/3136610.3136611
   Minamide Y., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P75, DOI 10.1145/268946.268953
   Ngo Hung Q., 2018, Journal of the ACM, V65, DOI 10.1145/3180143
   Ngo HQ, 2013, SIGMOD REC, V42, P5, DOI 10.1145/2590989.2590991
   Page L., 1999, PAGERANK CITATION RA, DOI DOI 10.1109/IISWC.2012.6402911
   Raasveldt M, 2019, INT CONF MANAGE DATA, P1981, DOI 10.1145/3299869.3320212
   Ragan-Kelley J, 2012, ACM T GRAPHIC, V31, DOI 10.1145/2185520.2185528
   Schleich M, 2019, INT CONF MANAGE DATA, P1642, DOI 10.1145/3299869.3324961
   Senanayake R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428226
   Shaikhha A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527333
   Shaikhha A, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000102
   Shaikhha A, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON FUNCTIONAL HIGH-PERFORMANCE COMPUTING (FHPC '17), P12, DOI 10.1145/3122948.3122949
   Smith S, 2015, INT PARALL DISTRIB P, P61, DOI 10.1109/IPDPS.2015.27
   Steuwer M, 2017, INT SYM CODE GENER, P74, DOI 10.1109/CGO.2017.7863730
   Thies W, 2002, LECT NOTES COMPUT SC, V2304, P179
   Tian RQ, 2021, Arxiv, DOI [arXiv:2102.05187, 10.48550/ARXIV.2102.05187, DOI 10.48550/ARXIV.2102.05187]
   Transaction Processing Performance Council. TPCH, 2022, TPC BENCHM H STAND S
   Veldhuizen Todd L, 2014, **DATA OBJECT** **DATA OBJECT**, P96
   Yuan BH, 2021, PROC VLDB ENDOW, V14, P1338, DOI 10.14778/3457390.3457399
NR 58
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 154
DI 10.1145/3591268
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900050
OA gold
DA 2024-07-18
ER

PT J
AU Muller, SK
   Singer, K
   Keeney, DT
   Neth, A
   Agrawal, K
   Lee, ITA
   Acar, UA
AF Muller, Stefan K.
   Singer, Kyle
   Keeney, Devyn Terra
   Neth, Andrew
   Agrawal, Kunal
   Lee, I-Ting Angelina
   Acar, Umut A.
TI Responsive Parallelism with Synchronization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE condition variables; priority inversions; type systems; cost semantics
ID EFFICIENCY; LANGUAGE; TIME
AB Many concurrent programs assign priorities to threads to improve responsiveness. When used in conjunction with synchronization mechanisms such as mutexes and condition variables, however, priorities can lead to priority inversions, in which high-priority threads are delayed by low-priority ones. Priority inversions in the use of mutexes are easily handled using dynamic techniques such as priority inheritance, but priority inversions in the use of condition variables are not well-studied and dynamic techniques are not suitable.
   In this work, we use a combination of static and dynamic techniques to prevent priority inversion in code that uses mutexes and condition variables. A type system ensures that condition variables are used safely, even while dynamic techniques change thread priorities at runtime to eliminate priority inversions in the use of mutexes. We prove the soundness of our system, using a model of priority inversions based on cost models for parallel programs. To show that the type system is practical to implement, we encode it within the type systems of Rust and C++, and show that the restrictions are not overly burdensome by writing sizeable case studies using these encodings, including porting the Memcached object server to use our C++ implementation.
C1 [Muller, Stefan K.; Keeney, Devyn Terra; Neth, Andrew] Illinois Inst Technol, Chicago, IL 60661 USA.
   [Singer, Kyle; Agrawal, Kunal; Lee, I-Ting Angelina] Washington Univ St Louis, Washington, DC USA.
   [Acar, Umut A.] Carnegie Mellon Univ, Pittsburgh, PA USA.
C3 Illinois Institute of Technology; Washington University (WUSTL);
   Carnegie Mellon University
RP Muller, SK (corresponding author), Illinois Inst Technol, Chicago, IL 60661 USA.
EM smuller2@iit.edu; kdsinger@wustl.edu; dkeeney2@hawk.iit.edu;
   aneth@hawk.iit.edu; kunal@wustl.edu; angelee@wustl.edu; umut@cmu.edu
OI Lee, I-Ting/0000-0002-0687-5508; Muller, Stefan K/0000-0002-3210-9727
FU National Science Foundation [CCF-2107289, CCF-1910568, CCF-1943456,
   CCF-2107280, CCF-1901381, CCF-2115104, CCF-2119352, CCF-2107241,
   CCF-2216971, CCF-2106699]
FX The authors would like to thank Jonathan Aldrich and Yu David Liu as
   well as the anonymous reviewers. This work is partially funded by the
   National Science Foundation under grants CCF-2107289, CCF-1910568,
   CCF-1943456, CCF-2107280, CCF-1901381, CCF-2115104, CCF-2119352,
   CCF-2107241, CCF-2216971, and CCF-2106699.
CR Acar UA, 2018, ACM SIGPLAN NOTICES, V53, P769, DOI [10.1145/3192366.3192391, 10.1145/3296979.3192391]
   Acar UA, 2016, J FUNCT PROGRAM, V26, DOI 10.1017/S0956796816000101
   Ahmed A, 2007, FUND INFORM, V77, P397
   [Anonymous], 1973, Operating System Principles
   Arora J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434299
   Arvind, 1978, TR114 U CAL DEP INF
   BABAOGLU O, 1993, REAL-TIME SYST, V5, P285, DOI 10.1007/BF01088832
   Belloch G., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P226, DOI 10.1145/224164.224210
   Blelloch GE, 1996, ACM SIGPLAN NOTICES, V31, P213, DOI 10.1145/232629.232650
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   BRENT RP, 1974, J ACM, V21, P201, DOI 10.1145/321812.321815
   Chakravarty M., 2007, PROC WORKSHOP DECLAR, P10
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   Cornhill Dennis, 1987, ADA LETT, VVII, P30, DOI [10.1145/36072.36073, DOI 10.1145/36072.36073]
   Crary K., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P262, DOI 10.1145/292540.292564
   Cucinotta Tommaso, 2013, P 9 INT WORKSHOP OPE
   EAGER DL, 1989, IEEE T COMPUT, V38, P408, DOI 10.1109/12.21127
   Fluet M, 2010, J FUNCT PROGRAM, V20, P537, DOI 10.1017/S0956796810000201
   Fluet Matthew., 2007, Proceedings of the 2007 Workshop on Declarative Aspects of Multicore Programming, DAMP '07, P37
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Halstead R.H., 1984, P 1984 ACM S LISP FU, P9
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Hansen P. B., 1975, IEEE Transactions on Software Engineering, VSE-1, P199, DOI 10.1109/TSE.1975.6312840
   Heule Stefan, 2011, FTFJP 11 JULY 26 201
   Imam Shams., 2014, P 2014 INT C PRINCIP, P75
   Jones SP, 2008, LECT NOTES COMPUT SC, V5356, P138
   LAMPSON BW, 1980, COMMUN ACM, V23, P105, DOI 10.1145/358818.358824
   Memcached, 2009, US
   Muller SK, 2023, Arxiv, DOI arXiv:2304.03753
   Muller SK, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341685
   Muller SK, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P577, DOI 10.1145/3385412.3386013
   Muller SK, 2017, ACM SIGPLAN NOTICES, V52, P677, DOI [10.1145/3062341.3062370, 10.1145/3140587.3062370]
   Muller Stefan K., 2018, P 14 ACM SIGPLAN INT
   Naden K, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P557
   Raghunathan R, 2016, ACM SIGPLAN NOTICES, V51, P392, DOI 10.1145/3022670.2951935
   Reynolds J. C., 1974, Programming Symposium, P408
   Richard Hoare CharlesAntony., 1974, The origin of concurrent programming, P272
   Rosendahl M., 1989, FPCA 89, P144, DOI DOI 10.1145/99370.99381
   SANDS D, 1990, LECT NOTES COMPUT SC, V432, P361
   SHA L, 1990, IEEE T COMPUT, V39, P1175, DOI 10.1109/12.57058
   Silberschatz A., 2009, OPERATING SYSTEM CON
   Singer K, 2020, PROCEEDINGS OF THE 32ND ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES (SPAA '20), P465, DOI 10.1145/3350755.3400236
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   Westrick S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371115
NR 45
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 135
DI 10.1145/3591249
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900031
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Saha, S
   Ghentiyala, S
   Lu, SH
   Bang, L
   Bultan, T
AF Saha, Seemanta
   Ghentiyala, Surendra
   Lu, Shihua
   Bang, Lucas
   Bultan, Tevfik
TI Obtaining Information Leakage Bounds via Approximate Model Counting
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Quantitative Program Analysis; Symbolic Quantitative Information Flow
   Analysis; Model Counting; Information Leakage; Optimization
ID POLYHEDRA
AB Information leaks are a significant problem in modern software systems. In recent years, information theoretic concepts, such as Shannon entropy, have been applied to quantifying information leaks in programs. One recent approach is to use symbolic execution together with model counting constraints solvers in order to quantify information leakage. There are at least two reasons for unsoundness in quantifying information leakage using this approach: 1) Symbolic execution may not be able to explore all execution paths, 2) Model counting constraints solvers may not be able to provide an exact count. We present a sound symbolic quantitative information flow analysis that bounds the information leakage both for the cases where the program behavior is not fully explored and the model counting constraint solver is unable to provide a precise model count but provides an upper and a lower bound. We implemented our approach as an extension to KLEE for computing sound bounds for information leakage in C programs.
C1 [Saha, Seemanta; Ghentiyala, Surendra; Lu, Shihua; Bultan, Tevfik] Univ Calif Santa Barbara, Santa Barbara, CA 93106 USA.
   [Bang, Lucas] Harvey Mudd Coll, Claremont, CA USA.
C3 University of California System; University of California Santa Barbara;
   Claremont Colleges; Harvey Mudd College
RP Saha, S (corresponding author), Univ Calif Santa Barbara, Santa Barbara, CA 93106 USA.
EM seemantasaha@ucsb.edu; sg974@cornell.edu; shihualu@ucsb.edu;
   lbang@g.hmc.edu; bultan@ucsb.edu
RI Saha, Seemanta/KIJ-6833-2024
OI Bultan, Tevfik/0000-0003-2993-1215
FU NSF [CCF-2008660, CCF-1901098, CCF-1817242]
FX This material is based on research supported by NSF under Grants
   CCF-2008660, CCF-1901098, CCF-1817242.
CR Albanna BF, 2017, ENTROPY-SWITZ, V19, DOI 10.3390/e19080427
   [Anonymous], 2009, Proceedings of the ACM SIGPLAN Fourth Workshop on Programming Languages and Analysis for Security
   Antonopoulos T, 2017, ACM SIGPLAN NOTICES, V52, P362, DOI [10.1145/3140587.3062378, 10.1145/3062341.3062378]
   Aydin A, 2015, LECT NOTES COMPUT SC, V9206, P255, DOI 10.1007/978-3-319-21690-4_15
   Backes M, 2009, P IEEE S SECUR PRIV, P141, DOI 10.1109/SP.2009.18
   Bagnara R, 2008, SCI COMPUT PROGRAM, V72, P3, DOI 10.1016/j.scico.2007.08.001
   Baldoni V., 2014, LATTE INTEGRALE V1 7
   Bang L, 2018, 2018 3RD IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P 2018), P307, DOI 10.1109/EuroSP.2018.00029
   Bang L, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P193, DOI 10.1145/2950290.2950362
   BARVINOK AI, 1994, MATH OPER RES, V19, P769, DOI 10.1287/moor.19.4.769
   Bultan T, 2020, LECT NOTES COMPUT SC, V12031, P30, DOI 10.1007/978-3-030-41600-3_3
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Chakraborty S, 2013, LECT NOTES COMPUT SC, V8124, P200, DOI 10.1007/978-3-642-40627-0_18
   Chothia T, 2014, LECT NOTES COMPUT SC, V8713, P219, DOI 10.1007/978-3-319-11212-1_13
   Clark D, 2007, J COMPUT SECUR, V15, P321, DOI 10.3233/JCS-2007-15302
   Cover Thomas M, 1999, Elements of information theory
   CPLEX User's Manual, 1987, IBM ILOG CPLEX OPT S, P1
   Geldenhuys Jaco, 2012, P 2012 INT S SOFTWAR, P166, DOI DOI 10.1145/2338965.2336773
   GUIASU S, 1985, MATH INTELL, V7, P42, DOI 10.1007/BF03023004
   HOFFMAN KL, 1981, MATH PROGRAM, V20, P22, DOI 10.1007/BF01589330
   Kapus T, 2019, LECT NOTES COMPUT SC, V11823, P41, DOI 10.1007/978-3-030-31157-5_3
   Kim Seonmo, 2018, SEARCHMC
   Klebanov Vladimir, 2013, Quantitative Evaluation of Systems. 10th International Conference, QEST 2013. Proceedings: LNCS 8054, P177, DOI 10.1007/978-3-642-40196-1_16
   Köpf B, 2007, CCS'07: PROCEEDINGS OF THE 14TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P286
   Malacaria P, 2018, P IEEE COMPUT SECUR, P313, DOI 10.1109/CSF.2018.00030
   McCamant S, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P193, DOI 10.1145/1375581.1375606
   Pasareanu CS, 2016, P IEEE CSFW, P387, DOI 10.1109/CSF.2016.34
   Phan Q., 2014, Proceedings of the International Symposium on Model Checking of Software, SPIN 2014, P105
   Phan Q.-S., 2014, P 9 ACM S INFORM COM, P283, DOI DOI 10.1145/2590296.2590328
   Phan Quoc-Sang, 2012, ACM SIGSOFT SOFTWARE, V37, P1, DOI [10.1145/2382756.2382791, DOI 10.1145/2382756.2382791]
   PyParma, 2015, PYPARMA
   Phan QS, 2017, P IEEE CSFW, P328, DOI 10.1109/CSF.2017.8
   Saha S, 2019, Arxiv, DOI arXiv:1907.11710
   Saha Seemanta., 2019, SIGSOFT Softw. Eng. Notes, V44, p16. issn, DOI [DOI 10.1145/3364452.336445759, 10.1007/s10515-013-0122-2, DOI 10.1007/S10515-013-0122-2]
   Salehi K, 2019, ENTROPY-SWITZ, V21, DOI 10.3390/e21090885
   Smith G, 2009, LECT NOTES COMPUT SC, V5504, P288
   Val CG, 2016, 1ST IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY, P31, DOI 10.1109/EuroSP.2016.15
NR 37
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 167
DI 10.1145/3591281
PG 22
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900063
OA gold
DA 2024-07-18
ER

PT J
AU Zhang, YH
   Wang, YR
   Flatt, O
   Cao, D
   Zucker, P
   Rosenthal, E
   Tatlock, Z
   Willsey, M
AF Zhang, Yihong
   Wang, Yisu Remy
   Flatt, Oliver
   Cao, David
   Zucker, Philip
   Rosenthal, Eli
   Tatlock, Zachary
   Willsey, Max
TI Better Together: Unifying Datalog and Equality Saturation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program optimization; Rewrite systems; Equality saturation; Datalog
ID POINTS
AB We present egglog, a fixpoint reasoning system that unifies Datalog and equality saturation (EqSat). Like Datalog, it supports efficient incremental execution, cooperating analyses, and lattice-based reasoning. Like EqSat, it supports term rewriting, efficient congruence closure, and extraction of optimized terms.
   We identify two recent applications-a unification-based pointer analysis in Datalog and an EqSat-based floating-point term rewriter-that have been hampered by features missing from Datalog but found in EqSat or vice-versa. We evaluate egglog by reimplementing those projects in egglog. The resulting systems in egglog are faster, simpler, and fix bugs found in the original systems.
C1 [Zhang, Yihong; Wang, Yisu Remy; Flatt, Oliver; Tatlock, Zachary; Willsey, Max] Univ Washington, Seattle, WA USA.
   [Cao, David] Univ Calif San Diego, La Jolla, CA USA.
   [Zucker, Philip] Draper Lab, Cambridge, MA USA.
   [Rosenthal, Eli] Google, Mountain View, CA USA.
C3 University of Washington; University of Washington Seattle; University
   of California System; University of California San Diego; Google
   Incorporated
RP Zhang, YH (corresponding author), Univ Washington, Seattle, WA USA.
OI Tatlock, Zachary/0000-0002-4731-0124; Zhang, Yihong/0009-0006-5928-4396;
   Willsey, Max/0000-0001-8066-4218; Flatt, Oliver/0000-0002-0656-235X;
   Wang, Remy/0000-0002-6887-9395; Cao, David/0000-0002-6163-1821
FU National Science Foundation [1749570]; U.S. Department of Energy
   [DE-SC0022081]; DARPA; SRC; U.S. Department of Energy (DOE)
   [DE-SC0022081] Funding Source: U.S. Department of Energy (DOE)
FX We thank the anonymous reviewers for their thoughtful feedback. We are
   grateful to Martin Bidlingmaier for sharing his insights on EqLog, a
   concurrent work to egglog, to Martin Bravenboer for discussions on the
   Rel programming language, to Scott Moore and Langston Barrett for
   answering questions about cclyzer++, and to friends at the UW PLSE group
   for their feedback on the early draft. This material is based upon work
   supported by the National Science Foundation under Grant No. 1749570, by
   the U.S. Department of Energy under Award Number DE-SC0022081, by DARPA
   under contract FA8650-20-2-7008, and by the Applications Driving
   Architectures (ADA) Research Center, a JUMP Center co-sponsored by SRC
   and DARPA.
CR Abiteboul S., 1995, Foundations of Databases, DOI DOI 10.5555/551350
   Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7709794
   Aref M, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1371, DOI 10.1145/2723372.2742796
   Balatsouras G, 2016, LECT NOTES COMPUT SC, V9837, P84, DOI 10.1007/978-3-662-53413-7_5
   BALBIN I, 1987, J LOGIC PROGRAM, V4, P259, DOI 10.1016/0743-1066(87)90004-5
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Barrett Langston, 2022, CCLYZER SCALABLE PRE
   Bellomarini L, 2018, PROC VLDB ENDOW, V11, P975, DOI 10.14778/3213880.3213888
   Bembenek A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428209
   Benedikt M, 2017, PODS'17: PROCEEDINGS OF THE 36TH ACM SIGMOD-SIGACT-SIGAI SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P37, DOI 10.1145/3034786.3034796
   Bidlingmaier ME, 2023, Arxiv, DOI arXiv:2302.03167
   Bidlingmaier Martin E., ARXIV
   Bravenboer M, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P243
   Cali A, 2009, PODS'09: PROCEEDINGS OF THE TWENTY-EIGHTH ACM SIGMOD-SIGACT-SIGART SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P77, DOI 10.1145/1559795.1559809
   Cheli Alessandro, 2021, J OPEN SOURCE SOFTW, V6, P3078, DOI [10.21105/joss.03078, DOI 10.21105/JOSS.03078]
   Conway Neil, 2012, P 3 ACM S CLOUD COMP, DOI [10.1145/2391229.2391230, DOI 10.1145/2391229.2391230]
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Moura L, 2007, LECT NOTES ARTIF INT, V4603, P183
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Deutsch A., 2008, PODS, P149
   DOWNEY PJ, 1980, J ACM, V27, P758, DOI 10.1145/322217.322228
   Fagin R, 2003, LECT NOTES COMPUT SC, V2572, P207
   Flatt O, 2022, Form Comp Aid Design, V3, P75, DOI 10.34727/2022/isbn.978-3-85448-053-2_13
   Fruhwirth T, 1998, J LOGIC PROGRAM, V37, P95, DOI 10.1016/S0743-1066(98)10005-5
   Hu XW, 2021, LECT NOTES COMPUT SC, V13008, P163, DOI 10.1007/978-3-030-89051-3_10
   Jordan H, 2016, LECT NOTES COMPUT SC, V9780, P422, DOI 10.1007/978-3-319-41540-6_23
   Joshi R, 2002, ACM SIGPLAN NOTICES, V37, P304, DOI 10.1145/543552.512566
   KANELLAKIS PC, 1989, J SYMB COMPUT, V7, P427, DOI 10.1016/S0747-7171(89)80018-5
   Khamis MA, 2022, PROCEEDINGS OF THE 41ST ACM SIGMOD-SIGACT-SIGAI SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS (PODS '22), P105, DOI 10.1145/3517804.3524140
   Kolaitis P. G., 1988, Proceedings of the Seventh ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P231, DOI 10.1145/308386.308446
   Kostler G., 1995, Journal of Intelligent Information Systems: Integrating Artificial Intelligence and Database Technologies, V4, P123, DOI 10.1007/BF00961871
   Krishnamurthy R., 1988, Proceedings of the Third International Conference on Data and Knowledge Bases: Improving Usability and Responsiveness, P416
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lau T, 2003, MACH LEARN, V53, P111, DOI 10.1023/A:1025671410623
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   Nandi C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485496
   Nandi C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P31, DOI 10.1145/3385412.3386012
   Nappa P, 2019, INT CONFER PARA, P82, DOI 10.1109/PACT.2019.00015
   Nelson Greg, 1980, PhD thesis
   Ngo Hung Q., 2018, Journal of the ACM, V65, DOI 10.1145/3180143
   Nieuwenhuis R, 2005, LECT NOTES COMPUT SC, V3467, P453
   Panchekha P, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI 10.1145/2737924.2737959
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Rel developers, REL REF
   Ross K. A., 1992, Proceedings of the Eleventh ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P114, DOI 10.1145/137097.137852
   Rust, RUST PROGR LANG
   Sahebolamri A, 2022, CC'22: PROCEEDINGS OF THE 31ST ACM SIGPLAN INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P77, DOI 10.1145/3497776.3517779
   Smaragdakis Yannis, 2010, Datalog Reloaded. First International Workshop, Datalog 2010. Revised Selected Papers, P245, DOI 10.1007/978-3-642-24206-9_14
   Souffle Developers, SOUFFL ALG DAT TYP
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Szabó T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276509
   TARJAN RE, 1975, J ACM, V22, P215, DOI 10.1145/321879.321884
   Tate R, 2009, ACM SIGPLAN NOTICES, V44, P264, DOI 10.1145/1594834.1480915
   Van Gelder A., 1992, Proceedings of the Eleventh ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P127, DOI 10.1145/137097.137854
   VanHattum A, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P874, DOI 10.1145/3445814.3446707
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
   Wang XY, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133886
   Wang YR, 2020, PROC VLDB ENDOW, V13, P1919, DOI 10.14778/3407790.3407799
   Whaley J, 2005, LECT NOTES COMPUT SC, V3780, P97
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Yang Yichen, 2021, arXiv, DOI [DOI 10.48550/ARXIV.2101.01332, 10.48550/ARXIV.2101.01332]
   Zhang YH, 2023, Arxiv, DOI arXiv:2304.04332
   Zhang YH, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498696
NR 63
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 125
DI 10.1145/3591239
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900021
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Bavishi, R
   Joshi, H
   Cambronero, J
   Fariha, A
   Gulwani, S
   Le, V
   Radicek, I
   Tiwari, A
AF Bavishi, Rohan
   Joshi, Harshit
   Cambronero, Jose
   Fariha, Anna
   Gulwani, Sumit
   Le, Vu
   Radicek, Ivan
   Tiwari, Ashish
TI Neurosymbolic Repair for Low-Code Formula Languages
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Repair; Neurosymbolic; Low-Code
AB Most users of low-code platforms, such as Excel and PowerApps, write programs in domain-specific formula languages to carry out nontrivial tasks. Often users can write most of the program they want, but introduce small mistakes that yield broken formulas. These mistakes, which can be both syntactic and semantic, are hard for low-code users to identify and fix, even though they can be resolved with just a few edits. We formalize the problem of producing such edits as the last-mile repair problem. To address this problem, we developed LaMirage, a LAst-MIle RepAir-engine GEnerator that combines symbolic and neural techniques to perform last-mile repair in low-code formula languages. LaMirage takes a grammar and a set of domain-specific constraints/rules, which jointly approximate the target language, and uses these to generate a repair engine that can fix formulas in that language. To tackle the challenges of localizing errors and ranking candidate repairs, LaMirage leverages neural techniques, whereas it relies on symbolic methods to generate candidate edits. This combination allows LaMirage to find repairs that satisfy the provided grammar and constraints, and then pick the most natural repair. We compare LaMirage to state-of-the-art neural and symbolic approaches on 400 real Excel and Power Fx formulas, where LaMirage outperforms all baselines. We release these benchmarks to encourage subsequent work in low-code domains.
C1 [Bavishi, Rohan] Univ Calif Berkeley, Berkeley, CA USA.
   [Cambronero, Jose] Microsoft, Chennai, Tamil Nadu, India.
   [Cambronero, Jose; Fariha, Anna; Gulwani, Sumit; Le, Vu; Tiwari, Ashish] Microsoft, Redmond, WA USA.
   [Radicek, Ivan] Microsoft, Zagreb, Croatia.
C3 University of California System; University of California Berkeley;
   Microsoft
RP Bavishi, R (corresponding author), Univ Calif Berkeley, Berkeley, CA USA.
EM rbavishi@cs.berkeley.edu; t-hjoshi@microsoft.com;
   jcambronero@microsoft.com; annafariha@microsoft.com;
   sumitg@microsoft.com; levu@microsoft.com; ivradice@microsoft.com;
   astiwar@microsoft.com
OI Fariha, Anna/0000-0002-5275-7844; Le, Vu/0000-0003-3727-3291; Gulwani,
   Sumit/0000-0002-9226-9634
CR Ahmed T., 2021, SYNFIX: Automatically Fixing Syntax Errors using Compiler Diagnostics
   Aho A. V., 1972, SIAM Journal on Computing, V1, P305, DOI 10.1137/0201022
   Aho A.V., 1986, COMPILERS PRINCIPLES
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Appian, 2022, ABOUT US
   Bader J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360585
   Bavishi R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360594
   Berabi B, 2021, PR MACH LEARN RES, V139
   Cerecke Carl, 2003, Locally least-cost error repair in LR parsers
   Chen M., 2021, arXiv
   Chen Xinyun, 2018, INT C LEARN REPR
   Corchuelo R, 2002, ACM T PROGR LANG SYS, V24, P698, DOI 10.1145/586088.586092
   Cowan N, 2001, BEHAV BRAIN SCI, V24, P154
   Dai AM, 2015, ADV NEUR IN, V28
   DEGANO P, 1995, SOFTWARE PRACT EXPER, V25, P657, DOI 10.1002/spe.4380250606
   Devlin J, 2017, PR MACH LEARN RES, V70
   Diekmann Lukas, 2020, LIPICS, V166
   Drosos I, 2017, S VIS LANG HUM CEN C, P171, DOI 10.1109/VLHCC.2017.8103465
   Ellis Kevin, 2018, Advances in Neural Information Processing Systems, V31
   Feng ZY, 2020, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2020, P1536
   Fischer Charles, 1979, Technical Report
   Gao X, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485538
   Google Sheets, 2019, About us
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P317, DOI 10.1145/1925844.1926423
   Guo D., 2021, ICLR
   Gupta R, 2017, AAAI CONF ARTIF INTE, P1345
   Hallahan WT, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P220, DOI 10.23919/FMCAD.2017.8102263
   Henley Austin Zachary, 2018, Human-centric Tools for Navigating Code
   Nguyen HDT, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P772, DOI 10.1109/ICSE.2013.6606623
   Traver VJ, 2010, ADV HUM-COMPUT INTER, V2010, DOI 10.1155/2010/602570
   Kalyan A, 2018, Arxiv, DOI [arXiv:1804.01186, 10.48550/ARXIV.1804.01186]
   Kim D, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P802, DOI 10.1109/ICSE.2013.6606626
   Kim IS, 2010, ACTA INFORM, V47, P179, DOI 10.1007/s00236-010-0115-6
   Le Goues C, 2019, COMMUN ACM, V62, P56, DOI 10.1145/3318162
   Long F, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P727, DOI 10.1145/3106237.3106253
   Long F, 2016, ACM SIGPLAN NOTICES, V51, P298, DOI 10.1145/2914770.2837617
   Mechtaev S, 2016, PROC INT CONF SOFTW, P691, DOI 10.1145/2884781.2884807
   Microsoft Excel, 2021, About us
   Microsoft Power Apps, 2019, About us
   Microsoft Power Automate, 2019, About us
   Microsoft Power Fx overview, 2022, About us
   Microsoft PROSE Github, 2022, About us
   Miltner A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360569
   Monperrus M., 2020, The living review on automated program repair
   Morgan Stanley, 2015, M STANL TECHN MED TE
   MrExcel Message Board, 2021, About us
   Odena A., 2021, arXiv, DOI DOI 10.48550/ARXIV.2108.07732
   Open AI, 2022, New GPT-3 Capabilities: Edit & Insert.
   Poesia Gabriel, 2022, INT C LEARN REPR
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Power Apps Community, 2021, About us
   Premtoon V, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1066, DOI 10.1145/3385412.3386001
   Raffel C, 2023, Arxiv, DOI [arXiv:1910.10683, 10.48550/arXiv.1910.10683]
   Rahmani K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485535
   Rajasekaran Sanguthevar, 2014, CoRR abs/1406.3405
   Raza M, 2017, AAAI CONF ARTIF INTE, P882
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Santos EA, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P311, DOI 10.1109/SANER.2018.8330219
   SPENKE M, 1984, SOFTWARE PRACT EXPER, V14, P1095, DOI 10.1002/spe.4380141107
   Tang Y, 2021, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, ACL-IJCNLP 2021, P1300
   Tufano M, 2018, IEEE INT CONF AUTOM, P832, DOI 10.1145/3238147.3240732
   UiPath, 2019, About us
   Vasic Marko, 2018, INT C LEARN REPR
   Vaswani A, 2017, ADV NEUR IN, V30
   VentureBeat, 2022, Low-code app development platform Crowdbotics raises $22M.
   Verbruggen G, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485477
   Vinyals, 2015, 29 ANN C NEURAL INFO, V28
   Weimer W, 2009, PROC INT CONF SOFTW, P364, DOI 10.1109/ICSE.2009.5070536
   Yasunaga M, 2021, PR MACH LEARN RES, V139
   Yasunaga Michihiro, 2020, INT C MACHINE LEARNI, V119, P10799
   Yu ZX, 2019, Arxiv, DOI arXiv:1907.09282
   Zhu QH, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P341, DOI 10.1145/3468264.3468544
NR 73
TC 0
Z9 0
U1 6
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 164
DI 10.1145/3563327
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200041
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Frumin, D
   D'Osualdo, E
   Van Den Heuvel, B
   Perez, JA
AF Frumin, Dan
   D'Osualdo, Emanuele
   Van Den Heuvel, Bas
   Perez, Jorge A.
TI A Bunch of Sessions: A Propositions-as-Sessions Interpretation of
   Bunched Implications in Channel-Based Concurrency
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrency; session types; bunched implications; Curry-Howard
   correspondence
ID LOGICAL RELATIONS
AB The emergence of propositions-as-sessions, a Curry-Howard correspondence between propositions of Linear Logic and session types for concurrent processes, has settled the logical foundations of message-passing concurrency. Central to this approach is the resource consumption paradigm heralded by Linear Logic.
   In this paper, we investigate a new point in the design space of session type systems for message-passing concurrent programs. We identify O'Hearn and Pym's Logic of Bunched Implications (BI) as a fruitful basis for an interpretation of the logic as a concurrent programming language. This leads to a treatment of non-linear resources that is radically different from existing approaches based on Linear Logic. We introduce a new non-calculus with sessions, called pi BI; its most salient feature is a construct called spawn, which expresses new forms of sharing that are induced by structural principles in BI. We illustrate the expressiveness of pi BI and lay out its fundamental theory: type preservation, deadlock-freedom, and weak normalization results for well-typed processes; an operationally sound and complete typed encoding of an affine lambda-calculus; and a non-interference result for access of resources.
C1 [Frumin, Dan; Van Den Heuvel, Bas; Perez, Jorge A.] Univ Groningen, Groningen, Netherlands.
   [D'Osualdo, Emanuele] MPI SWS, Saarbrucken, Germany.
C3 University of Groningen
RP Frumin, D (corresponding author), Univ Groningen, Groningen, Netherlands.
EM d.frumin@rug.nl; dosualdo@mpi-sws.org; b.van.den.heuvel@rug.nl;
   j.a.perez@rug.nl
RI D'Osualdo, Emanuele/HOF-1125-2023; Pérez, Jorge/G-1629-2011
OI D'Osualdo, Emanuele/0000-0002-9179-5827; Pérez,
   Jorge/0000-0002-1452-6180; van den Heuvel, Bas/0000-0002-8264-7371
FU Dutch Research Council (NWO) [016.Vidi.189.046]; European Research
   Council (ERC) Consolidator Grant for the project lPERSISTz under the
   European Union's Horizon 2020 research and innovation programme
   [101003349]
FX The authors would like to thank Revantha Ramanayake for providing
   comments on an early version of the paper and the anonymous referees for
   their valuable comments and helpful suggestions. The authors also would
   like to thank Vasilios Andrikopoulos for helpful discussions.; This work
   was supported by the Dutch Research Council (NWO) under project No.
   016.Vidi.189.046 (Unifying Correctness for Communicating Software); and
   by a European Research Council (ERC) Consolidator Grant for the project
   lPERSISTz under the European Union's Horizon 2020 research and
   innovation programme (grant agreement No. 101003349).
CR Anderson G, 2016, THEOR COMPUT SCI, V614, P63, DOI 10.1016/j.tcs.2015.11.035
   [Anonymous], 1992, Mathematical Structures in Computer Science, DOI DOI 10.1017/S0960129500001407
   Arisaka Ryuta, 2012, 2012 IEEE Sixth International Symposium on Theoretical Aspects of Software Engineering (TASE 2012), P235, DOI 10.1109/TASE.2012.30
   Atkey R, 2004, LECT NOTES COMPUT SC, V3142, P158
   Atkey R, 2017, LECT NOTES COMPUT SC, V10201, P56, DOI 10.1007/978-3-662-54434-1_3
   Atkey Robert, 2006, Ph. D. Dissertation
   Balzer S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110281
   Berdine J, 2006, ELECTRON NOTES THEOR, V158, P81, DOI 10.1016/j.entcs.2006.04.006
   Brotherston J, 2012, STUD LOGICA, V100, P1223, DOI 10.1007/s11225-012-9449-0
   Brotherston J, 2010, LOG METH COMPUT SCI, V6, DOI 10.2168/LMCS-6(3:3)2010
   Brotherston James, 2015, LIPIcs, V41, P325, DOI [10.4230/LIPIcs.CSL.2015.325, DOI 10.4230/LIPICS.CSL.2015.325]
   Caires L, 2017, LECT NOTES COMPUT SC, V10201, P229, DOI 10.1007/978-3-662-54434-1_9
   Caires L, 2016, LECT NOTES COMPUT SC, V9688, P74, DOI 10.1007/978-3-319-39570-8_6
   Caires L, 2016, MATH STRUCT COMP SCI, V26, P367, DOI 10.1017/S0960129514000218
   Caires L, 2013, LECT NOTES COMPUT SC, V7792, P330, DOI 10.1007/978-3-642-37036-6_19
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Carbone Marco, 2016, LIPIcs, V59
   Collinson M, 2008, MATH STRUCT COMP SCI, V18, P1091, DOI 10.1017/S0960129508007159
   Derakhshan F, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470654
   DeYoung Henry, 2012, LIPIcs, V16, P228
   Docherty Simon, 2019, Bunched Logics: A Uniform Approach
   Fowler S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290341
   Frumin Dan, 2022, arXiv, DOI [10.48550/ARXIV.2209.05421, DOI 10.48550/ARXIV.2209.05421]
   Gorla D, 2010, INFORM COMPUT, V208, P1031, DOI 10.1016/j.ic.2010.05.002
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Kavanagh R, 2022, INFORM COMPUT, V285, DOI 10.1016/j.ic.2022.104892
   Kokke W, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290337
   Kouzapas D, 2011, LECT NOTES COMPUT SC, V6722, P228, DOI 10.1007/978-3-642-21461-5_15
   O'Hearn P, 2003, J FUNCT PROGRAM, V13, P747, DOI 10.1017/S0956796802004495
   O'Hearn P, 2019, COMMUN ACM, V62, P86, DOI 10.1145/3211968
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   OHearn Peter W., 2016, ACM SIGLOG NEWS, V3, P47, DOI DOI 10.1145/2984450.2984457
   Pérez JA, 2014, INFORM COMPUT, V239, P254, DOI 10.1016/j.ic.2014.08.001
   Peters K, 2019, ELECTRON P THEOR COM, P19, DOI 10.4204/EPTCS.300.2
   Pruiksma K, 2021, J LOG ALGEBR METHODS, V120, DOI 10.1016/j.jlamp.2020.100637
   Pym David J., 2002, Applied Logic Series, V26
   Pym DJ, 2004, THEOR COMPUT SCI, V315, P257, DOI 10.1016/j.tcs.2003.11.020
   Qian ZS, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473567
   Sangiorgi D., 2003, PI CALCULUS THEORY M
   Scalas A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290343
   Toninho B, 2012, LECT NOTES COMPUT SC, V7213, P346, DOI 10.1007/978-3-642-28729-9_23
   Vasconcelos VT, 2012, INFORM COMPUT, V217, P52, DOI 10.1016/j.ic.2012.05.002
   Wadler P, 2014, J FUNCT PROGRAM, V24, P384, DOI 10.1017/S095679681400001X
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
NR 46
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 155
DI 10.1145/3563318
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200032
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Laddad, S
   Power, C
   Milano, M
   Cheung, A
   Hellerstein, JM
AF Laddad, Shadaj
   Power, Conor
   Milano, Mae
   Cheung, Alvin
   Hellerstein, Joseph M.
TI Katara: Synthesizing CRDTs with Verified Lifting
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; distributed systems; verification; replication
ID REPLICATED DATA-TYPES; TIME; CONSISTENCY
AB Conflict-free replicated data types (CRDTs) are a promising tool for designing scalable, coordination-free distributed systems. However, constructing correct CRDTs is difficult, posing a challenge for even seasoned developers. As a result, CRDT development is still largely the domain of academics, with new designs often awaiting peer review and a manual proof of correctness. In this paper, we present Katara, a program synthesis-based system that takes sequential data type implementations and automatically synthesizes verified CRDT designs from them. Key to this process is a new formal definition of CRDT correctness that combines a reference sequential type with a lightweight ordering constraint that resolves conflicts between non-commutative operations. Our process follows the tradition of work in verified lifting, including an encoding of correctness into SMT logic using synthesized inductive invariants and hand-crafted grammars for the CRDT state and runtime. Katara is able to automatically synthesize CRDTs for a wide variety of scenarios, from reproducing classic CRDTs to synthesizing novel designs based on specifications in existing literature. Crucially, our synthesized CRDTs are fully, automatically verified, eliminating entire classes of common errors and reducing the process of producing a new CRDT from a painstaking paper proof of correctness to a lightweight specification.
C1 [Laddad, Shadaj; Power, Conor; Milano, Mae; Cheung, Alvin; Hellerstein, Joseph M.] Univ Calif Berkeley, Berkeley, CA 94720 USA.
   [Milano, Mae] Sutter Hill Ventures, Palo Alto, CA USA.
C3 University of California System; University of California Berkeley
RP Laddad, S (corresponding author), Univ Calif Berkeley, Berkeley, CA 94720 USA.
EM shadaj@cs.berkeley.edu; conorpower@cs.berkeley.edu;
   mpmilano@cs.berkeley.edu; akcheung@cs.berkeley.edu;
   hellerstein@cs.berkeley.edu
OI Hellerstein, Joseph/0000-0002-7712-4306; Milano,
   Mae/0000-0003-3126-7771; Power, Conor/0000-0002-0660-5110; Cheung,
   Alvin/0000-0001-6261-6263; Laddad, Shadaj/0000-0002-6658-6548
FU National Science Foundation CISE Expeditions Award [CCF-1730628,
   IIS-1955488, IIS-2027575]; DOE [DE-SC0016260]; ARO [W911NF2110339]; ONR
   [N00014-21-1-2724]; NSF Graduate Research Fellowship Program [DGE
   2146752]; U.S. Department of Defense (DOD) [W911NF2110339] Funding
   Source: U.S. Department of Defense (DOD)
FX We thank Audrey Cheng, David Chu, Natacha Crooks, and our anonymous
   reviewers for their insightful feedback on this paper. This work is
   supported in part by National Science Foundation CISE Expeditions Award
   CCF-1730628, IIS-1955488, IIS-2027575, DOE award DE-SC0016260, ARO award
   W911NF2110339, and ONR award N00014-21-1-2724, and by gifts from
   AmazonWeb Services, Ant Group, Ericsson, Futurewei, Google, Intel, Meta,
   Microsoft, Scotiabank, and VMware. Shadaj Laddad is supported in part by
   the NSF Graduate Research Fellowship Program under Grant No. DGE
   2146752. Any opinions, findings, and conclusions or recommendations
   expressed in this material are those of the authors and do not
   necessarily reflect the views of the National Science Foundation.
CR Ahmad MB, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3355089.3356549
   Ahmad MB, 2018, INT CONF MANAGE DATA, P1205, DOI 10.1145/3183713.3196891
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Alvaro P., 2011, CIDR, P249
   Alvaro P, 2014, PROC INT CONF DATA, P52, DOI 10.1109/ICDE.2014.6816639
   Alvaro P, 2011, LECT NOTES COMPUT SC, V6702, P262
   [Anonymous], 2010, ACM SIGPLAN COMMERCI, DOI [DOI 10.1145/1900160.1900176, 10.1145/1900160.1900176]
   Balegas V, 2018, PROC VLDB ENDOW, V12, P404, DOI 10.14778/3297753.3297760
   Balegas Valter, 2015, Proceedings of the Tenth European Conference on Computer Systems, DOI [10.1145/2741948.2741972, DOI 10.1145/2741948.2741972]
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Burckhardt S, 2014, ACM SIGPLAN NOTICES, V49, P271, DOI 10.1145/2535838.2535848
   Burckhardt S, 2012, LECT NOTES COMPUT SC, V7313, P283, DOI 10.1007/978-3-642-31057-7_14
   Cheung A, 2013, ACM SIGPLAN NOTICES, V48, P3, DOI 10.1145/2499370.2462180
   Cheung Alvin, 2021, C INN DAT SYST RES C
   Conway N, 2014, PROC VLDB ENDOW, V7, P481, DOI 10.14778/2732279.2732285
   Conway Neil, 2012, P 3 ACM S CLOUD COMP, DOI [10.1145/2391229.2391230, DOI 10.1145/2391229.2391230]
   Crooks N, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1615, DOI 10.1145/2882903.2882951
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   De Porre K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485484
   De Porre K, 2020, J PARALLEL DISTR COM, V144, P109, DOI 10.1016/j.jpdc.2020.05.010
   De Porre K, 2019, LECT NOTES COMPUT SC, V11534, P36, DOI 10.1007/978-3-030-22496-7_3
   DeCandia Giuseppe, 2007, Operating Systems Review, V41, P205, DOI 10.1145/1323293.1294281
   Demers Alan, 1987, P 6 ANN ACM S PRINCI, P1, DOI [DOI 10.1145/41840.41841, 10.1145/41840.41841]
   Gomes VBF, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133933
   Gotsman A, 2016, ACM SIGPLAN NOTICES, V51, P371, DOI 10.1145/2914770.2837625
   Hellerstein JM, 2020, COMMUN ACM, V63, P72, DOI 10.1145/3369736
   Hoff Todd, 2014, How League Of Legends Scaled Chat To 70 Million Players-It Takes Lots Of Minions
   Holt B, 2016, PROCEEDINGS OF THE SEVENTH ACM SYMPOSIUM ON CLOUD COMPUTING (SOCC 2016), P279, DOI 10.1145/2987550.2987559
   Houshmand F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290387
   Hunt Patrick, 2010, P 2010 USENIX ANN TE, P11, DOI DOI 10.5555/1855840.1855851
   Kaki G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276534
   Kaki G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360580
   Kamil S, 2016, ACM SIGPLAN NOTICES, V51, P711, DOI [10.1145/2980983.2908117, 10.1145/2908080.2908117]
   Kleppmann M, 2017, IEEE T PARALL DISTR, V28, P2733, DOI 10.1109/TPDS.2017.2697382
   Kleppmann Martin, 2018, Data structures as queries: Expressing CRDTs using Datalog
   Kleppmann Martin, 2022, Technical Report
   Kuper Lindsey, 2013, P 2 ACM SIGPLAN WORK, P71, DOI 10.1145/2502323.2502326
   Lakshman Avinash, 2010, Operating Systems Review, V44, P35, DOI 10.1145/1773912.1773922
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lamport L, 1998, ACM T COMPUT SYST, V16, P133, DOI 10.1145/279227.279229
   Li Cheng, 2012, 10 USENIX S OP SYST, P265
   Li Cheng, 2014, 2014 USENIX Annual Technical Conference (USENIX ATC 14), P281
   Li X, 2020, LECT NOTES COMPUT SC, V12224, P324, DOI 10.1007/978-3-030-53288-8_16
   Liu YY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428284
   Meiklejohn C, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P184, DOI 10.1145/2790449.2790525
   Milano M, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P226, DOI 10.1145/3192366.3192375
   Milano Matthew, 2019, LEIBNIZ INT P INFORM, V136, DOI [10.4230/LIPIcs.SNAPL.2019.11, DOI 10.4230/LIPICS.SNAPL.2019.11]
   Nagar K, 2019, Arxiv, DOI [arXiv:1905.05684, 10.48550/ARXIV.1905.05684, DOI 10.48550/ARXIV.1905.05684]
   Ongaro D., 2014, 2014 USENIX ANN TECH, P305
   Roestenburg R., 2016, Akka in Action
   Shapiro M., 2011, COMPREHENSIVE STUDY
   Shapiro M, 2011, LECT NOTES COMPUT SC, V6976, P386, DOI 10.1007/978-3-642-24550-3_29
   Sivaramakrishnan KC, 2015, ACM SIGPLAN NOTICES, V50, P413, DOI [10.1145/2813885.2737981, 10.1145/2737924.2737981]
   Sivaraman A, 2016, PROCEEDINGS OF THE 2016 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '16), P15, DOI 10.1145/2934872.2934900
   Soethout T, 2019, PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL (AGERE '19), P21, DOI 10.1145/3358499.3361222
   Soundarapandian Vimala, 2022, P 43 ACM SIGPLAN C P
   Torlak Emina, 2013, P 2013 ACM INT S NEW, P135, DOI DOI 10.1145/2509578.2509586
   Vogels W, 2009, COMMUN ACM, V52, P40, DOI 10.1145/1435417.1435432
   Wang C, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P980, DOI 10.1145/3314221.3314617
   Weiss S, 2009, INT CON DISTR COMP S, P404, DOI 10.1109/ICDCS.2009.75
   Wu CG, 2018, PROC INT CONF DATA, P401, DOI 10.1109/ICDE.2018.00044
   Zeller P, 2014, LECT NOTES COMPUT SC, V8461, P33, DOI 10.1007/978-3-662-43613-4_3
   Zhao X, 2020, J LOG ALGEBR METHODS, V114, DOI 10.1016/j.jlamp.2020.100561
   Zhao X, 2018, AGERE'18: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL, P23, DOI 10.1145/3281366.3281372
NR 64
TC 4
Z9 4
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 173
DI 10.1145/3563336
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200050
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Liu, S
   Meseguer, J
   Ölveczky, PC
   Zhang, M
   Basin, D
AF Liu, Si
   Meseguer, Jose
   Olveczky, Peter Csaba
   Zhang, Min
   Basin, David
TI Bridging the Semantic Gap between Qualitative and Quantitative Models of
   Distributed Systems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE distributed systems; actors; formal model transformation; statistical
   model checking; rewriting logic; Maude
ID CHECKING
AB Today's distributed systems must satisfy both qualitative and quantitative properties. These properties are analyzed using very different formal frameworks: expressive untimed and non-probabilistic frameworks, such as TLA+ and Hoare/separation logics, for qualitative properties; and timed/probabilistic-automaton-based ones, such as Uppaal and Prism, for quantitative ones. This requires developing two quite different models of the same system, without guarantees of semantic consistency between them. Furthermore, it is very hard or impossible to represent intrinsic features of distributed object systems-such as unbounded data structures, dynamic object creation, and an unbounded number of messages-using finite automata.
   In this paper we bridge this semantic gap, overcome the problem of manually having to develop two different models of a system, and solve the representation problem by: (i) defining a transformation from a very general class of distributed systems (a generalization of Agha's actor model) that maps an untimed non-probabilistic distributed system model suitable for qualitative analysis to a probabilistic timed model suitable for quantitative analysis; and (ii) proving the two models semantically consistent. We formalize our models in rewriting logic, and can therefore use the Maude tool to analyze qualitative properties, and statistical model checking with PVeStA to analyze quantitative properties. We have automated this transformation and integrated it, together with the PVeStA statistical model checker, into the Actors2PMaude tool. We illustrate the expressiveness of our framework and our tool's ease of use by automatically transforming untimed, qualitative models of numerous distributed system designs-including an industrial data store and a state-of-the-art transaction system-into quantitative models to analyze and compare the performance of different designs.
C1 [Liu, Si; Basin, David] Swiss Fed Inst Technol, Zurich, Switzerland.
   [Meseguer, Jose] Univ Illinois, Champaign, IL USA.
   [Olveczky, Peter Csaba] Univ Oslo, Oslo, Norway.
   [Zhang, Min] East China Normal Univ, Shanghai, Peoples R China.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; University of
   Illinois System; University of Illinois Urbana-Champaign; University of
   Oslo; East China Normal University
RP Liu, S (corresponding author), Swiss Fed Inst Technol, Zurich, Switzerland.
OI Basin, David/0000-0003-2952-939X; Zhang, Min/0000-0003-1938-2902; Liu,
   Si/0000-0003-3578-7432
CR Aceto L, 2011, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.58.1
   Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Agha G, 2006, ELECTRON NOTES THEOR, V153, P213, DOI 10.1016/j.entcs.2005.10.040
   Agha G, 2018, ACM T MODEL COMPUT S, V28, DOI 10.1145/3158668
   Agha Gul, 2005, WORKSH FDN COMP SEC
   AlTurki Musab, 2011, Algebra and Coalgebra in Computer Science. Proceedings 4th International Conference, CALCO 2011, P386, DOI 10.1007/978-3-642-22944-2_28
   AlTurki M, 2009, ELECTRON NOTES THEOR, V234, P3, DOI 10.1016/j.entcs.2009.02.069
   Alturki Musab A., 2019, FORMAL METHODS FM 20, V12232, P337
   Amazon, Amazon EC2
   [Anonymous], 2003, ROUTING IETF
   [Anonymous], **DATA OBJECT**, DOI DOI 10.5281/ZENODO.7071693
   [Anonymous], 2015, ACM SIGLOG NEWS, DOI DOI 10.1145/2723163
   [Anonymous], 2019, CSF, DOI DOI 10.1109/CSF.2019.00033
   Apache Cassandra, Open Source NoSQL Database
   Ashok P, 2019, LECT NOTES COMPUT SC, V11561, P497, DOI 10.1007/978-3-030-25540-4_29
   Baier C, 2018, HDB MODEL CHECKING, P963, DOI [DOI 10.1007/978-3-319-10575-8, DOI 10.1007/978-3-319-10575-828, DOI 10.1007/978-3-319-10575-8_28]
   Bailis P, 2016, ACM T DATABASE SYST, V41, DOI 10.1145/2909870
   Bakir ME, 2017, LECT NOTES COMPUT SC, V10105, P119, DOI 10.1007/978-3-319-54072-6_8
   Basu A, 2011, IEEE SOFTWARE, V28, P41, DOI 10.1109/MS.2011.27
   Benson T., 2010, P 10 ACM SIGCOMM C I, P267, DOI DOI 10.1145/1879141.1879175
   Bentea Lucian, 2011, Open Source NoSQL Database, V6919
   Bobba R., 2018, ASSURED CLOUD COMPUT, P10
   Bogdoll J, 2011, LECT NOTES COMPUT SC, V6722, P59, DOI 10.1007/978-3-642-21461-5_4
   Budde CE, 2017, LECT NOTES COMPUT SC, V10206, P151, DOI 10.1007/978-3-662-54580-5_9
   Clavel Manuel, 2007, Lecture Notes in Computer Science, V4350, DOI [10.1007/978-3-540-71999-1, DOI 10.1007/978-3-540-71999-1]
   CloudLab, CLOUDLAB FLEX SCI IN
   Cooper Brian F., 2010, P 1 ACM S CLOUD COMP, P143, DOI [DOI 10.1145/1807128.1807152, 10.1145/1807128.1807152]
   David Alexandre, 2015, Int. J. Softw. Tools Technol. Transf., V17, p397s415
   de Oliveira THM, 2012, PROCEEDINGS OF THE ACM SIGSPATIAL INTERNATIONAL WORKSHOP ON GEOSTREAMING (IWGS) 2012, P84
   Donaldson R, 2008, LECT N BIOINFORMAT, V5307, P269, DOI 10.1007/978-3-540-88562-7_20
   Duret-Lutz A, 2016, LECT NOTES COMPUT SC, V9938, P122, DOI 10.1007/978-3-319-46520-3_8
   Eckhardt J, 2012, LECT NOTES COMPUT SC, V7212, P78, DOI 10.1007/978-3-642-28872-2_6
   Ghosh A, 2018, ANN ALLERTON CONF, P757, DOI 10.1109/ALLERTON.2018.8635877
   Giuliari G, 2021, PROCEEDINGS OF THE 17TH INTERNATIONAL CONFERENCE ON EMERGING NETWORKING EXPERIMENTS AND TECHNOLOGIES, CONEXT 2021, P104, DOI 10.1145/3485983.3494871
   GOGUEN JA, 1992, THEOR COMPUT SCI, V105, P217, DOI 10.1016/0304-3975(92)90302-V
   Golab W, 2014, INT CON DISTR COMP S, P493, DOI 10.1109/ICDCS.2014.57
   Grimmett G., 2001, Probability and random processes, V3rd edn
   Grov Jon, 2014, LNCS, V8373
   Günther A, 2005, LECT NOTES COMPUT SC, V3462, P768
   Hansson H., 1994, Formal Aspects of Computing, V6, P512, DOI 10.1007/BF01211866
   Hartmanns Arnd, 2014, LNCS, V8413, P593
   Jafari A, 2016, SCI COMPUT PROGRAM, V128, P22, DOI 10.1016/j.scico.2016.03.004
   Jafari A, 2016, COMPUT LANG SYST STR, V45, P53, DOI 10.1016/j.cl.2016.01.004
   Kant Gijs, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P692, DOI 10.1007/978-3-662-46681-0_61
   Katelman M, 2008, LECT NOTES COMPUT SC, V5051, P150, DOI 10.1007/978-3-540-68863-1_10
   Klenke A., 2006, PROBABILITY THEORY
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Lassaigne R., 2012, SAC, P1314
   Liang L, 2021, 2021 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2021), P111, DOI 10.1109/TASE52547.2021.00026
   Liu SN, 2016, BIOL PLANTARUM, V60, P401, DOI 10.1007/s10535-016-0614-6
   Liu SH, 2019, SENSORS-BASEL, V19, DOI 10.3390/s19194063
   Liu S, 2022, ACM T SOFTW ENG METH, V31, DOI 10.1145/3494517
   Liu S, 2020, LECT NOTES COMPUT SC, V12229, P22, DOI 10.1007/978-3-030-55754-6_2
   Liu S, 2019, FORM ASP COMPUT, V31, P503, DOI 10.1007/s00165-019-00489-w
   Liu S, 2018, LECT NOTES COMPUT SC, V11152, P136, DOI 10.1007/978-3-319-99840-4_8
   Liu S, 2017, LECT NOTES COMPUT SC, V10610, P298, DOI 10.1007/978-3-319-68690-5_18
   Liu Si, 2022, TECHNICAL REPORT
   Liu Si, 2016, SAC
   Liu Si, 2014, LNCS, V8829
   Liu Si, 2015, LNCS, V8950, P231
   Liu SQ, 2017, IEEE I CONF COMP VIS, P873, DOI 10.1109/ICCV.2017.100
   Mediouni BL, 2018, LECT NOTES COMPUT SC, V11138, P536, DOI 10.1007/978-3-030-01090-4_33
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J., 1993, Research Directions in Concurrent Object-Oriented Programming, P314
   Meseguer J, 2006, LECT NOTES COMPUT SC, V3927, P460
   Meseguer J, 2010, J LOGIC ALGEBR PROGR, V79, P103, DOI 10.1016/j.jlap.2009.07.003
   Microsoft, 2018, HIGH LEV TLA SPEC 5
   Newcombe C, 2015, COMMUN ACM, V58, P66, DOI 10.1145/2699417
   Olveczky P.C., 2017, Designing Reliable Distributed Systems
   PRISM, PRISM SMC
   Rubinstein R.Y., 2016, Simulation and the Monte Carlo method
   Rubio R, 2021, J LOG ALGEBR METHODS, V123, DOI 10.1016/j.jlamp.2021.100700
   SCION, SCION SCAL CONTR IS
   Sebastio S., 2013, 7 INT C VALUETOOLS 1, P310, DOI DOI 10.4108/ICST.VALUETOOLS.2013.254377
   Sen K, 2005, INT CONF QUANT EVAL, P251, DOI 10.1109/QEST.2005.42
   Sen Koushik, 2005, LNCS, V3576
   Sirjani M, 2004, FUND INFORM, V63, P385
   Skeirik S, 2013, IEEE ACM INT SYMP, P636, DOI 10.1109/CCGrid.2013.98
   Wang AD, 2011, LECT NOTES COMPUT SC, V6722, P334, DOI 10.1007/978-3-642-21461-5_22
   Wang B.-Y., 2000, ICDCS Workshop on Distributed System Validation and Verification, pE49
   Wang Y, 2020, IEEE DECIS CONTR P, P1392, DOI 10.1109/CDC42340.2020.9303982
   Weghorn Thilo, 2022, CSF 2022
   White B, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE FIFTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P255, DOI 10.1145/1060289.1060313
   Younes HLS, 2006, INFORM COMPUT, V204, P1368, DOI 10.1016/j.ic.2006.05.002
NR 84
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 136
DI 10.1145/3563299
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200013
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Eremondi, J
   Garcia, R
   Tanter, É
AF Eremondi, Joseph
   Garcia, Ronald
   Tanter, Eric
TI Propositional Equality for Gradual Dependently Typed Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE dependent types; gradual types; propositional equality
AB Gradual dependent types can help with the incremental adoption of dependently typed code by providing a principled semantics for imprecise types and proofs, where some parts have been omitted. Current theories of gradual dependent types, though, lack a central feature of type theory: propositional equality. Lennon-Bertrand et al. show that, when the reflexive proof refl is the only closed value of an equality type, a gradual extension of the Calculus of Inductive Constructions (CIC) with propositional equality violates static observational equivalences. Extensionally-equal functions should be indistinguishable at run time, but they can be distinguished using a combination of equality and type imprecision.
   This work presents a gradual dependently typed language that supports propositional equality. We avoid the above issues by devising an equality type of which refl is not the only closed inhabitant. Instead, each equality proof is accompanied by a term that is at least as precise as the equated terms, acting as a witness of their plausible equality. These witnesses track partial type information as a program runs, raising errors when that information shows that two equated terms are undeniably inconsistent. Composition of type information is internalized as a construct of the language, and is deferred for function bodies whose evaluation is blocked by variables. We thus ensure that extensionally-equal functions compose without error, thereby preventing contexts from distinguishing them. We describe the challenges of designing consistency and precision relations for this system, along with solutions to these challenges. Finally, we prove important metatheory: type safety, conservative embedding of CIC, weak canonicity, and the gradual guarantees of Siek et al., which ensure that reducing a program's precision introduces no new static or dynamic errors.
C1 [Eremondi, Joseph; Garcia, Ronald] Univ British Columbia, Dept Comp Sci, Vancouver, BC, Canada.
   [Tanter, Eric] Univ Chile, Comp Sci Dept DCC, PLEIAD Lab, Santiago, Chile.
C3 University of British Columbia; Universidad de Chile
RP Eremondi, J (corresponding author), Univ British Columbia, Dept Comp Sci, Vancouver, BC, Canada.
EM jeremond@cs.ubc.ca; rxg@cs.ubc.ca; etanter@dcc.uchile.cl
RI ; Tanter, Eric/A-7955-2008
OI Eremondi, Joseph/0000-0002-9631-4826; Tanter, Eric/0000-0002-7359-890X;
   Garcia, Ronald/0000-0002-0982-1118
CR Altenkirch T, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P57, DOI 10.1145/1292597.1292608
   Brady Edwin., 2017, MANNING
   Dagand PÉ, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000011
   Dagand PE, 2016, ACM SIGPLAN NOTICES, V51, P298, DOI 10.1145/3022670.2951933
   Eremondi J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341692
   Eremondi Joseph., 2022, ARXIV, DOI [10.48550/ARXIV.2205.01241, DOI 10.48550/ARXIV.2205.01241]
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Goguen H, 2006, LECT NOTES COMPUT SC, V4060, P521, DOI 10.1007/11780274_27
   Hofmann M., 1998, Twenty-five years of constructive type theory, Oxf. Logic Guides, V36, P83
   Jacobs K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434288
   Lehmann N, 2017, ACM SIGPLAN NOTICES, V52, P775, DOI 10.1145/3093333.3009856
   Lemay Mark., THESIS BOSTON U
   Lennon-Bertrand M, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3495528
   Lennon-Bertrand Meven, 12 INT C INTERACTIVE, V193, DOI [10.4230/LIPIcs.ITP.2021, DOI 10.4230/LIPICS.ITP.2021]
   Martin-Lf P., 1982, Stud. Logic Found. Math, V104, P153, DOI [DOI 10.1016/S0049-237X(09)70189-2, 10.1016/ S0049-237X(09)70189-2.]
   Martin-Lof P., 1975, STUDIES LOGIC FDN MA, V82, P81
   McBride C., 2002, Types for Proofs and Programs. International Workshop, TYPES 2000. Selected Papers (Lecture Notes in Computer Science Vol.2277), P197
   McBride Conor, 2000, THESIS U EDINBURGH U
   New Max S, 2018, P ACM PROGR LANG, DOI [10.1145/3236768, DOI 10.1145/3236768]
   Osera Peter-Michael., PLPV 12 P 6 WORKSHOP, DOI [DOI 10.1145/2103776.2103779, 10.1145/2103776.2103779.]
   Ou XM, 2004, INT FED INFO PROC, V155, P437
   Pujet L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498693
   Schwerter FB, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434342
   Siek J, 2015, ACM SIGPLAN NOTICES, V50, P425, DOI [10.1145/2737924.2737968, 10.1145/2813885.2737968]
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000241
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Streicher T., 1993, Investigations into intensional type theory
   TAKAHASHI M, 1995, INFORM COMPUT, V118, P120, DOI 10.1006/inco.1995.1057
   Tanter É, 2016, ACM SIGPLAN NOTICES, V51, P26, DOI [10.1145/2816707.2816710, 10.1145/2936313.2816710]
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Zalewski Jakub., 2020, DB BLAME TRACKING HI
NR 35
TC 3
Z9 3
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 96
DI 10.1145/3547627
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000007
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Nguyen, M
   Perera, R
   Wang, M
   Wu, N
AF Nguyen, Minh
   Perera, Roly
   Wang, Meng
   Wu, Nicolas
TI Modular Probabilistic Models via Algebraic Effects
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programming; effect handlers; modularity; embedded
   domain-specific languages; functional programming
ID BAYESIAN-INFERENCE
AB Probabilistic programming languages (PPLs) allow programmers to construct statistical models and then simulate data or perform inference over them. Many PPLs restrict models to a particular instance of simulation or inference, limiting their reusability. In other PPLs, models are not readily composable. Using Haskell as the host language, we present an embedded domain specific language based on algebraic effects, where probabilistic models are modular, first-class, and reusable for both simulation and inference. We also demonstrate how simulation and inference can be expressed naturally as composable program transformations using algebraic effect handlers.
C1 [Nguyen, Minh; Wang, Meng] Univ Bristol, Bristol, Avon, England.
   [Perera, Roly] Alan Turing Inst, London, England.
   [Wu, Nicolas] Imperial Coll London, London, England.
C3 University of Bristol; Imperial College London
RP Nguyen, M (corresponding author), Univ Bristol, Bristol, Avon, England.
EM min.nguyen@bristol.ac.uk; rperera@turing.ac.uk; meng.wang@bristol.ac.uk;
   n.wu@imperial.ac.uk
OI Nguyen, Minh/0000-0003-3845-9928; Wang, Meng/0000-0001-7780-630X; Wu,
   Nicolas/0000-0002-4161-985X
FU EPSRC [EP/T008911/1]; EPSRC [EP/S028129/1] Funding Source: UKRI
FX Our sincere thanks to Matija Pretnar for shepherding this paper during
   the conditional acceptance phase, and to the anonymous reviewers for
   their valuable discussion. We also thank Alessio Zakaria who has been a
   constant source of support and drive behind our ideas, and the members
   of the Bristol Programming Languages research group for creating the
   wonderful environment for this work. This work is partly supported by
   the EPSRC grant EXHIBIT : Expressive High-Level Languages for
   Bidirectional Transformations (EP/T008911/1).
CR Ameen I, 2020, CHAOS SOLITON FRACT, V137, DOI 10.1016/j.chaos.2020.109892
   Bingham E, 2019, J MACH LEARN RES, V20
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   Chong Jike, 2010, P 2010 WORKSH PAR PR, DOI DOI 10.1145/1953611.1953626
   Chopin N, 2002, BIOMETRIKA, V89, P539, DOI 10.1093/biomet/89.3.539
   Cusumano-Towner MF, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P221, DOI 10.1145/3314221.3314642
   Ding ZH, 2019, MECH SYST SIGNAL PR, V132, P211, DOI 10.1016/j.ymssp.2019.06.029
   Doucet A, 2001, STAT ENG IN, P3
   Elliott C, 2003, J FUNCT PROGRAM, V13, P455, DOI 10.1017/S0956796802004574
   Erwig M, 2006, J FUNCT PROGRAM, V16, P21, DOI 10.1017/S0956796805005721
   Freeman Phil, 2017, PURESCRIPT EXAMPLE
   Fushiki T, 2010, J STAT PLAN INFER, V140, P65, DOI 10.1016/j.jspi.2009.06.007
   Ge H, 2018, PR MACH LEARN RES, V84
   Gibbons J, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P339, DOI 10.1145/2628136.2628138
   Gibbons J, 2011, ACM SIGPLAN NOTICES, V46, P2, DOI 10.1145/2034574.2034777
   Goodman N. D., 2014, DESIGN IMPLEMENTATIO
   Hillerstrom Daniel, 2018, Programming Languages and Systems. 16th Asian Symposium, APLAS 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11275), P415, DOI 10.1007/978-3-030-02768-1_22
   Hillerstrom Daniel, 2022, THESIS U EDINBURGH S, DOI [10.7488/era/2122, DOI 10.7488/ERA/2122]
   Hoffman MD, 2014, J MACH LEARN RES, V15, P1593
   Idreos S, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P277, DOI 10.1145/2723372.2731084
   Kiselyov Oleg, 2012, Generic and Indexed Programming. International Spring School, SSGIP 2010. Revised Lectures, P130, DOI 10.1007/978-3-642-32202-0_3
   Kiselyov O, 2016, P WORKSHOP PROBABILI
   Kiselyov O, 2016, LECT NOTES COMPUT SC, V10017, P357, DOI 10.1007/978-3-319-47958-3_19
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Kiselyov O, 2013, ACM SIGPLAN NOTICES, V48, P59, DOI 10.1145/2503778.2503791
   Kiselyov O, 2009, LECT NOTES COMPUT SC, V5658, P360, DOI 10.1007/978-3-642-03034-5_17
   Kline B, 2016, QUANT ECON, V7, P329, DOI 10.3982/QE399
   Kmett Edward, 2010, AD AUTOMATIC DIFFERE
   Kulkarni S, 2020, Arxiv, DOI arXiv:2010.08886
   Leijen D., 2005, P 2005 S TRENDS FUNC
   Leroy Xavier, 2020, The OCaml system release 4.10: Documentation and user's manua
   Letham B, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1695, DOI 10.1145/2939672.2939810
   Lew AK, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371087
   Liang Feng, 2021, 2020 4 INT C COMPUTA, P14, DOI DOI 10.1145/3449258.3449261
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Lunn DJ, 2000, STAT COMPUT, V10, P325, DOI 10.1023/A:1008929526011
   Maguire Sandy, 2019, polysemy: higher-order, low-boilerplate free monads
   Moon TK, 1996, IEEE SIGNAL PROC MAG, V13, P47, DOI 10.1109/79.543975
   Moore D, 2018, Arxiv, DOI [arXiv:1811.06150, 10.48550/arXiv.1811.06150, DOI 10.48550/ARXIV.1811.06150]
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Nguyen Minh, 2022, Zenodo, DOI 10.5281/ZENODO.6651953
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Polson NG, 2013, J AM STAT ASSOC, V108, P1339, DOI 10.1080/01621459.2013.829001
   Robert CP, 1998, STAT COMPUT, V8, P145, DOI 10.1023/A:1008938201645
   Salvatier J, 2016, PEERJ COMPUT SCI, DOI 10.7717/peerj-cs.55
   Schrijvers T, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '19), P98, DOI 10.1145/3331545.3342595
   Schuster-Bockler Benjamin, 2007, Curr Protoc Bioinformatics, VAppendix 3, p3A, DOI 10.1002/0471250953.bia03as18
   Scibior A, 2015, ACM SIGPLAN NOTICES, V50, P165, DOI 10.1145/2804302.2804317
   Scibior Adam, 2015, WORKSHOP HIGHERORDER
   Scibior Adam, 2018, P ACM PROGR LANG 2 I, DOI [10.1145/3236778, DOI 10.1145/3236778]
   Shi HJ, 2008, PHYSICA A, V387, P2133, DOI 10.1016/j.physa.2007.11.048
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Tolpin D., 2016, P 28 S IMPLEMENTATIO
   Tran D, 2017, Arxiv, DOI [arXiv:1701.03757, DOI 10.48550/ARXIV.1701.03757, 10.48550/arXiv.1701.03757]
   van de Meent Jan-Willem, 2018, arXiv, DOI DOI 10.48550/ARXIV.1809.10756
   Vaughn BK, 2008, J EDUC MEAS, V45, P94, DOI 10.1111/j.1745-3984.2007.00053_2.x
   Voigtländer J, 2008, LECT NOTES COMPUT SC, V5133, P388
   Wingate David, 2011, JMLR WORKSHOP C P, V15, P770
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Wu N, 2015, LECT NOTES COMPUT SC, V9129, P302, DOI 10.1007/978-3-319-19797-5_15
   Yekutieli D, 2012, J ROY STAT SOC B, V74, P515, DOI 10.1111/j.1467-9868.2011.01016.x
NR 62
TC 1
Z9 2
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 104
DI 10.1145/3547635
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000015
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Zhang, LP
   Kaminski, BL
AF Zhang, Linpeng
   Kaminski, Benjamin Lucien
TI Quantitative Strongest Post A Calculus for Reasoning about the Flow of
   Quantitative Information
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Incorrectness Logic; Quantitative Verification; Strongest Postcondition;
   Weakest Precondition
AB We present a novel strongest-postcondition-style calculus for quantitative reasoning about nondeterministic programs with loops. Whereas existing quantitative weakest pre allows reasoning about the value of a quantity after a program terminates on a given initial state, quantitative strongest post allows reasoning about the value that a quantity had before the program was executed and reached a given final state. We show how strongest post enables reasoning about the flow of quantitative information through programs.
   Similarly to weakest liberal preconditions, we also develop a quantitative strongest liberal post. As a byproduct, we obtain the entirely unexplored notion of strongest liberal postconditions and show how these foreshadow a potential new program logic - partial incorrectness logic - which would be a more liberal version of O'Hearn's recent incorrectness logic.
C1 [Zhang, Linpeng; Kaminski, Benjamin Lucien] UCL, London, England.
   [Kaminski, Benjamin Lucien] Saarland Univ, Saarland Informat Campus, Saarbrucken, Germany.
C3 University of London; University College London; Saarland University
RP Zhang, LP (corresponding author), UCL, London, England.
EM linpeng.zhang.20@ucl.ac.uk; b.kaminski@ucl.ac.uk
OI Zhang, Linpeng/0000-0002-1485-327X; Kaminski, Benjamin
   Lucien/0000-0001-5185-2324
CR Aguirre A, 2020, ELECTRON NOTES THEOR, V352, P5, DOI 10.1016/j.entcs.2020.09.002
   Amtoft Torben, 2004, STATIC ANAL, DOI [10.1007/978-3-540-27864-1_10, DOI 10.1007/978-3-540-27864-1_10]
   [Anonymous], 1977, Flow Analysis of Computer Programs
   [Anonymous], 1949, C HIGH SPEED AUT CAL
   [Anonymous], 1936, J. of Math
   BACK RJR, 1988, ACTA INFORM, V25, P593, DOI 10.1007/BF00291051
   Batz K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434320
   Batz Kevin, 2018, ABS180210467 CORR, DOI [10.48550/arXiv.1802.10467, DOI 10.48550/ARXIV.1802.10467]
   Bruni R, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470608
   COOK SA, 1978, SIAM J COMPUT, V7, P70, DOI 10.1137/0207005
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2019, LECT NOTES COMPUT SC, V11822, P389, DOI 10.1007/978-3-030-32304-2_19
   Cousot P, 2013, LECT NOTES COMPUT SC, V7737, P128
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   de Vries E, 2011, LECT NOTES COMPUT SC, V7041, P155, DOI 10.1007/978-3-642-24690-6_12
   Dijkstra Edsger W., 1990, Predicate Calculus and Program Semantics, DOI DOI 10.1007/978-1-4612-3228-5
   Dijkstra Edsger Wybe, 1975, GUARDED COMMANDS NON, V18, DOI [10.1145/360933.360975, DOI 10.1145/360933.360975]
   erbnk P., 1997, J FUNCT PROGRAM, V7, P557, DOI DOI 10.1017/S0956796897002906
   Ernst G, 2019, LECT NOTES COMPUT SC, V11562, P208, DOI 10.1007/978-3-030-25543-5_13
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   JACOBS D, 1985, ACTA INFORM, V22, P67, DOI 10.1007/BF00290146
   Jones C., 1990, PhD thesis
   Kaminski Benjamin Lucien, 2017, LICS, p1s12, DOI [10.48550/arXiv.1703.07682, DOI 10.48550/ARXIV.1703.07682]
   Kaminski Benjamin Lucien, 2019, Advanced weakest precondition calculi for probabilistic programs
   KNUTH DE, 1992, AM MATH MON, V99, P403, DOI 10.2307/2325085
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   McIver Annabelle., 2005, MG COMP SCI
   O'Hearn PW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371078
   OHearn Peter W., 2004, CONCUR, DOI [10.1007/978-3-540-28644-8_4, DOI 10.1007/978-3-540-28644-8_4]
   Raad A, 2020, LECT NOTES COMPUT SC, V12225, P225, DOI 10.1007/978-3-030-53291-8_14
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   RICE HG, 1953, T AM MATH SOC, V74, P358, DOI 10.2307/1990888
   Rival Xavier, 2020, INTRO STATIC ANAL S
   Smith G., 2009, FOSSACS, DOI [10.1007/978-3-642-00596-1_21, DOI 10.1007/978-3-642-00596-1_21]
   Urban Caterina, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P683, DOI 10.1007/978-3-319-89884-1_24
   Urban Caterina, 2019, ABS191202499 CORR, DOI [10.48550/arXiv.1912.02499, DOI 10.48550/ARXIV.1912.02499]
   Volpano D., 1997, TAPSOFT '97: Theory and Practice of Software Development. 7th International Joint Conference CAAP/FASE. Proceedings, P607, DOI 10.1007/BFb0030629
   Wulandari GS, 2020, ELECTRON P THEOR COM, P181, DOI 10.4204/EPTCS.330.11
   Zhang Linpeng, 2022, CORRABS220206765, DOI [10.48550/ARXIV.2202.06765, DOI 10.48550/ARXIV.2202.06765]
NR 39
TC 5
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 87
DI 10.1145/3527331
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300023
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Castagna, G
   Laurent, M
   Nguyen, K
   Lutze, M
AF Castagna, Giuseppe
   Laurent, Mickael
   Nguyen, Kim
   Lutze, Matthew
TI On Type-Cases, Union Elimination, and Occurrence Typing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE subtyping; union types; intersection types; type-case; dynamic
   languages; type systems
AB We extend classic union and intersection type systems with a type-case construction and show that the combination of the union elimination rule of the former and the typing rules for type-cases of our extension encompasses occurrence typing. To apply this system in practice, we define a canonical form for the expressions of our extension, called MSC-form. We show that an expression of the extension is typable if and only if its MSC-form is, and reduce the problem of typing the latter to the one of reconstructing annotations for that term. We provide a sound algorithm that performs this reconstruction and a proof-of-concept implementation.
C1 [Castagna, Giuseppe; Laurent, Mickael; Lutze, Matthew] Univ Paris, CNRS, Inst Rech Informat Fondamentale IRIF, 8 Pl Aurelie Nemours, F-75013 Paris, France.
   [Nguyen, Kim] Univ Paris Saclay, Lab Methodes Formelles LMF, CNRS, ENS Paris Saclay, F-91190 Gif Sur Yvette, France.
C3 Universite Paris Cite; Centre National de la Recherche Scientifique
   (CNRS); Universite Paris Saclay; Universite Paris Cite; Centre National
   de la Recherche Scientifique (CNRS)
RP Castagna, G (corresponding author), Univ Paris, CNRS, Inst Rech Informat Fondamentale IRIF, 8 Pl Aurelie Nemours, F-75013 Paris, France.
RI Nguyen, Kim/JWP-3649-2024; Nguyen, Kim Truc K/G-6693-2011
OI Lutze, Matthew/0000-0002-2904-5099; Laurent,
   Mickael/0000-0003-1590-2392; Nguyen, Kim/0000-0002-1729-870X; Castagna,
   Giuseppe/0000-0003-0951-7535
FU Labex DigiCosme [ANR-11-LABEX-0045-DIGI-COSME, ANR-11-IDEX-0003-02];
   "Chaire Langages Dynamiques pour les Donnees" of the Paris-Saclay
   foundation; Google PhD fellowship
FX This research was partially supported by Labex DigiCosme (project
   ANR-11-LABEX-0045-DIGI-COSME) operated by ANR as part of the program
   nInvestissement d'Avenirz Idex Paris-Saclay (ANR-11-IDEX-0003-02), by
   the "Chaire Langages Dynamiques pour les Donnees" of the Paris-Saclay
   foundation, and by a Google PhD fellowship. The authors would like to
   thank Delia Kesner for her help with the rewriting systems.
CR BARBANERA F, 1995, INFORM COMPUT, V119, P202, DOI 10.1006/inco.1995.1086
   Castagna G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110285
   Castagna G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290329
   Castagna G, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:15)2020
   Castagna G, 2016, ACM SIGPLAN NOTICES, V51, P378, DOI 10.1145/3022670.2951928
   Castagna G, 2015, ACM SIGPLAN NOTICES, V50, P289, DOI 10.1145/2775051.2676991
   Castagna Giuseppe, 2021, IN PRESS
   Castagna Giuseppe., 2011, ICFP 2011, P94, DOI DOI 10.1145/2034773.2034788
   CDuce, CDUCE COMP
   Charguéraud A, 2012, J AUTOM REASONING, V49, P363, DOI 10.1007/s10817-011-9225-2
   Chaudhuri A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133872
   Dezani-Ciancaglini Mariangiola, 2003, ELECTRON NOTES THEOR, V70, P105, DOI [10.1016/S1571- 0661(04)80492-4, DOI 10.1016/S1571-0661(04)80492-4]
   Dezani-Ciancaglini Mariangiola, 2020, COMMUNICATION
   Dunfield Jana, 2019, ABS190805839 CORR
   Dunfield J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290322
   Facebook, FLOW
   Frisch A, 2002, IEEE S LOG, P137, DOI 10.1109/LICS.2002.1029823
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Frisch Alain, 2004, Ph. D. Dissertation
   Hindley J. R., 2008, LAMBDA CALCULUS COMB
   Kent Andrew M., 2019, THESIS INDIANA U
   MACQUEEN D, 1986, INFORM CONTROL, V71, P95, DOI 10.1016/S0019-9958(86)80019-5
   Martin-Lof Per., 1994, Analytic and Synthetic Judgements in Type Theory, P87, DOI DOI 10.1007/978-94-011-0834-8_5
   Microsoft, TypeScript
   Petrucciani Tommaso, 2019, Ph.D. Dissertation.
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pottier F, 2006, ACM SIGPLAN NOTICES, V41, P232, DOI 10.1145/1111320.1111058
   Rastogi A, 2015, ACM SIGPLAN NOTICES, V50, P167, DOI [10.1145/2775051.2676971, 10.1145/2676726.2676971]
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tobin-Hochstadt S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P117
   Wikipedia, PET PARK PRINC
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 34
TC 7
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 13
DI 10.1145/3498674
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900014
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Chistikov, D
   Majumdar, R
   Schepper, P
AF Chistikov, Dmitry
   Majumdar, Rupak
   Schepper, Philipp
TI Subcubic Certificates for CFL Reachability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE CFL reachability; subcubic certification; pushdown reachability
ID CONTEXT-FREE GRAMMAR
AB Many problems in interprocedural program analysis can be modeled as the context-free language (CFL) reachability problem on graphs and can be solved in cubic time. Despite years of efforts, there are no known truly sub-cubic algorithms for this problem. We study the related certification task: given an instance of CFL reachability, are there small and efficiently checkable certificates for the existence and for the non-existence of a path? We show that, in both scenarios, there exist succinct certificates (O(n(2)) in the size of the problem) and these certificates can be checked in subcubic (matrix multiplication) time. The certificates are based on grammar-based compression of paths (for reachability) and on invariants represented as matrix inequalities (for non-reachability). Thus, CFL reachability lies in nondeterministic and co-nondeterministic subcubic time.
   A natural question is whether faster algorithms for CFL reachability will lead to faster algorithms for combinatorial problems such as Boolean satisfiability (SAT). As a consequence of our certification results, we show that there cannot be a fine-grained reduction from SAT to CFL reachability for a conditional lower bound stronger than n(omega), unless the nondeterministic strong exponential time hypothesis (NSETH) fails. In a nutshell, reductions from SAT are unlikely to explain the cubic bottleneck for CFL reachability.
   Our results extend to related subcubic equivalent problems: pushdown reachability and 2NPDA recognition; as well as to all-pairs CFL reachability. For example, we describe succinct certificates for pushdown non-reachability (inductive invariants) and observe that they can be checked in matrix multiplication time. We also extract a new hardest 2NPDA language, capturing the lhard corez of all these problems.
C1 [Chistikov, Dmitry] Univ Warwick, Ctr Discrete Math & Its Applicat DLMAP, Coventry, W Midlands, England.
   [Chistikov, Dmitry] Univ Warwick, Dept Comp Sci, Coventry, W Midlands, England.
   [Majumdar, Rupak] Max Planck Inst Software Syst, Kaiserslautern, Germany.
   [Schepper, Philipp] Helmholtz Ctr Informat Secur, CISPA, Saarbrucken, Germany.
C3 University of Warwick; University of Warwick; Max Planck Society
RP Chistikov, D (corresponding author), Univ Warwick, Ctr Discrete Math & Its Applicat DLMAP, Coventry, W Midlands, England.; Chistikov, D (corresponding author), Univ Warwick, Dept Comp Sci, Coventry, W Midlands, England.
EM d.chistikov@warwick.ac.uk; rupak@mpi-sws.org;
   philipp.schepper@cispa.saarland
OI Schepper, Philipp/0000-0002-5810-7949
FU European Research Council (ERC) [725978 SYSTEMATICGRAPH, 648701];
   Deutsche Forschungsgemeinschaft [389792660 TRR 248sCPEC]; European
   Research Council [610150]
FX This work started in 2016 when Dmitry Chistikov was a postdoctoral
   researcher in Joel Ouaknine's group, supported by the European Research
   Council (ERC) consolidator grant AVS-ISS (648701). Rupak Majumdar was
   supported in part by the the Deutsche Forschungsgemeinschaft project
   389792660 TRR 248sCPEC and by the European Research Council under the
   Grant Agreement 610150 (http://www.impact-erc.eu/) (ERC Synergy Grant
   ImPACT). Philipp Schepper is part of Saarbrucken Graduate School of
   Computer Science, Germany and was partially supported by the European
   Research Council (ERC) consolidator grant no. 725978 SYSTEMATICGRAPH.
CR Abboud A, 2015, ANN IEEE SYMP FOUND, P98, DOI 10.1109/FOCS.2015.16
   AHO AV, 1968, INFORM CONTROL, V13, P186, DOI 10.1016/S0019-9958(68)91087-5
   Alur R, 2005, ACM T PROGR LANG SYS, V27, P786, DOI 10.1145/1075382.1075387
   Babai L., 1985, SER STOC 85, P421, DOI DOI 10.1145/22145.22192
   Backurs A, 2016, ANN IEEE SYMP FOUND, P457, DOI 10.1109/FOCS.2016.56
   BIENSTOCK D, 1991, J COMB THEORY B, V52, P274, DOI 10.1016/0095-8956(91)90068-U
   BOASSON L, 1981, SIAM J COMPUT, V10, P284, DOI 10.1137/0210020
   Bouajjani A, 1997, LECT NOTES COMPUT SC, V1243, P135
   Bouajjani A, 2000, INFORM PROCESS LETT, V74, P221, DOI 10.1016/S0020-0190(00)00055-7
   Bradford Phillip G., 2018, ABS180205239 CORR, V5239
   Bringmann K, 2017, ANN IEEE SYMP FOUND, P307, DOI 10.1109/FOCS.2017.36
   Bringmann Karl., 2018, COMMUNICATION
   Carayol A, 2014, ELECTRON PROC THEOR, P1, DOI 10.4204/EPTCS.151.1
   Carmosino ML, 2016, ITCS'16: PROCEEDINGS OF THE 2016 ACM CONFERENCE ON INNOVATIONS IN THEORETICAL COMPUTER SCIENCE, P261
   Chatterjee K, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158118
   Chatterjee K, 2017, INFORM PROCESS LETT, V122, P25, DOI 10.1016/j.ipl.2017.02.003
   Chaudhuri S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P159, DOI 10.1145/1328438.1328460
   COPPERSMITH D, 1990, J SYMB COMPUT, V9, P251, DOI 10.1016/S0747-7171(08)80013-2
   DOLEV D, 1982, INFORM CONTROL, V55, P57, DOI 10.1016/S0019-9958(82)90401-6
   Fernau Henning, 2019, Language and Automata Theory and Applications. 13th International Conference, LATA 2019. Proceedings: Lecture Notes in Computer Science (LNCS 11417), P3, DOI 10.1007/978-3-030-13435-8_1
   Fernau H, 2017, ALGORITHMS, V10, DOI 10.3390/a10010024
   Finkel A., 1997, Electronic Notes in Theoretical Computer Science, V9, DOI 10.1016/S1571-0661(05)80426-8
   Freivalds R., 1979, P INT S MATH FOUND C, V74, P57, DOI DOI 10.1007/3-540-09526-8_5
   GALIL Z, 1977, MATH SYST THEORY, V10, P211
   GOLDSTINE J, 1982, THEOR COMPUT SCI, V18, P33, DOI 10.1016/0304-3975(82)90110-4
   GRAY JN, 1967, INFORM CONTROL, V11, P30, DOI 10.1016/S0019-9958(67)90369-5
   Greibach S. A., 1973, SIAM Journal on Computing, V2, P304, DOI 10.1137/0202025
   Heintze N, 1997, IEEE S LOG, P342, DOI 10.1109/LICS.1997.614960
   Hellings J., 2020, Communications in Computer and Information Science, V1281, P84
   Hopcroft J. E., 2006, INTRO AUTOMATA THEOR
   Impagliazzo R, 2001, J COMPUT SYST SCI, V62, P367, DOI 10.1006/jcss.2000.1727
   Jha S., 2004, Journal of Computer Security, V12, P317
   KIMBREL T, 1993, INFORM PROCESS LETT, V45, P107, DOI 10.1016/0020-0190(93)90224-W
   Korec I, 2014, LECT NOTES COMPUT SC, V8327, P375, DOI 10.1007/978-3-319-04298-5_33
   Kunnemann Marvin, 2018, LIPICS, V56, P1, DOI [10.4230/LIPIcs.ESA.2018.56, DOI 10.4230/LIPICS.ESA.2018.56]
   Lang B., 1994, Computational Intelligence, V10, P486, DOI 10.1111/j.1467-8640.1994.tb00011.x
   Lee L, 2002, J ACM, V49, P1, DOI 10.1145/505241.505242
   Lohrey M, 2012, GROUPS COMPLEX CRYPT, V4, P241, DOI 10.1515/gcc-2012-0016
   Mathiasen AA, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434315
   McConnell RM, 2011, COMPUT SCI REV, V5, P119, DOI 10.1016/j.cosrev.2010.09.009
   Melski D, 2000, THEOR COMPUT SCI, V248, P29, DOI 10.1016/S0304-3975(00)00049-9
   Neal Radford., 1989, COMPUT COMPLEX
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Oliveira MD, 2020, LECT NOTES COMPUT SC, V12086, P69, DOI 10.1007/978-3-030-48516-0_6
   Oliveira MD, 2018, LECT NOTES COMPUT SC, V11088, P282, DOI 10.1007/978-3-319-98654-8_23
   PIERRE L, 1992, THEOR COMPUT SCI, V95, P279, DOI 10.1016/0304-3975(92)90269-L
   Potechin A, 2020, INFORM PROCESS LETT, V162, DOI 10.1016/j.ipl.2020.105993
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   RYTTER W, 1985, INFORM CONTROL, V67, P12, DOI 10.1016/S0019-9958(85)80024-3
   RYTTER W, 1981, INFORM PROCESS LETT, V13, P145, DOI 10.1016/0020-0190(81)90045-4
   Rytter Wojciech, 1987, RR99 U WARW DEP COMP
   Schwoon Stefan., 2002, THESIS TU MUNICH GER
   Stearns Richard Edwin, 1965, DOI DOI 10.1109/FOCS.1965.11
   Swernofsky J, 2015, LECT NOTES COMPUT SC, V9135, P414, DOI 10.1007/978-3-662-47666-6_33
   Tell R, 2019, INFORM PROCESS LETT, V152, DOI 10.1016/j.ipl.2019.105841
   VALIANT LG, 1975, J COMPUT SYST SCI, V10, P308, DOI 10.1016/S0022-0000(75)80046-8
   Vyalyi MN, 2015, PROBL INFORM TRANSM+, V51, P349, DOI 10.1134/S0032946015040043
   Vyalyi MN, 2011, PROBL INFORM TRANSM+, V47, P342, DOI 10.1134/S003294601104003X
   Vyalyi Mikhail., 2019, COMMUNICATION
   Wehar M, 2014, LECT NOTES COMPUT SC, V8573, P354
   Williams VV, 2018, J ACM, V65, DOI [10.1145/318693, 10.1145/3186893]
   Williams VV, 2012, STOC'12: PROCEEDINGS OF THE 2012 ACM SYMPOSIUM ON THEORY OF COMPUTING, P887
   Williams Virginia Vassilevska., 2018, INT C MATH ICM 18
   YANNAKAKIS M, 1990, PROCEEDINGS OF THE NINTH ACM SIGACT-SIGMOD-SIGART SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P230, DOI 10.1145/298514.298576
NR 64
TC 6
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 41
DI 10.1145/3498702
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900042
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU He, WL
   Mestre, J
   Pupyrev, S
   Wang, L
   Yu, HT
AF He, Wenlei
   Mestre, Julian
   Pupyrev, Sergey
   Wang, Lei
   Yu, Hongtao
TI Profile Inference Revisited
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compilers; profile-guided optimizations; network flows
AB Profile-guided optimization (PGO) is an important component in modern compilers. By allowing the compiler to leverage the program's dynamic behavior, it can often generate substantially faster binaries. Samplingbased profiling is the state-of-the-art technique for collecting execution profiles in data-center environments. However, the lowered profile accuracy caused by sampling fully optimized binary often hurts the benefits of PGO; thus, an important problem is to overcome the inaccuracy in a profile after it is collected. In this paper we tackle the problem, which is also known as profile inference and profile rectification.
   We investigate the classical approach for profile inference, based on computing minimum-cost maximum flows in a control-flow graph, and develop an extended model capturing the desired properties of real-world profiles. Next we provide a solid theoretical foundation of the corresponding optimization problem by studying its algorithmic aspects. We then describe a new efficient algorithm for the problem along with its implementation in an open-source compiler. An extensive evaluation of the algorithm and existing profile inference techniques on a variety of applications, including Facebook production workloads and SPEC CPU benchmarks, indicates that the new method outperforms its competitors by significantly improving the accuracy of profile data and the performance of generated binaries.
C1 [He, Wenlei; Mestre, Julian; Pupyrev, Sergey; Wang, Lei; Yu, Hongtao] Facebook Inc, Menlo Pk, CA 94025 USA.
   [Mestre, Julian] Univ Sydney, Sydney, NSW, Australia.
C3 Facebook Inc; University of Sydney
RP He, WL (corresponding author), Facebook Inc, Menlo Pk, CA 94025 USA.
EM wenlei@fb.com; julianmestre@fb.com; spupyrev@fb.com; wlei@fb.com;
   hoy@fb.com
RI Yu, Hongtao/JRW-4958-2023
CR Ahuja R. K., 1993, Network flows: theory, algorithms, and applications
   BALL T, 1994, ACM T PROGR LANG SYS, V16, P1319, DOI 10.1145/183432.183527
   Bellman R., 1958, Q APPL MATH, V16, P87
   Bo Wu, 2013, ECOOP 2013 - Object-Oriented Programming. Proceedings of 27th European Conference: LNCS 7920, P654, DOI 10.1007/978-3-642-39038-8_27
   Calder B, 1997, ACM T PROGR LANG SYS, V19, P188, DOI 10.1145/239912.239923
   Chatterjee K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290366
   Chen DH, 2016, INT SYM CODE GENER, P12, DOI 10.1145/2854038.2854044
   Chen DH, 2013, IEEE T COMPUT, V62, P376, DOI 10.1109/TC.2011.233
   Feller W., 1968, An Introduction to Probability Theory and Its Applications, V1
   Ford L.R, 1956, Technical report
   Ford LR., 1956, CAN J MATH, V8, P399, DOI [10.4153/CJM-1956-045-5, DOI 10.4153/CJM-1956-045-5.12R]
   GOLDBERG AV, 1989, J ACM, V36, P873, DOI 10.1145/76359.76368
   He Wenlei., 2020, CONTEXT SENSITIVE SA
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lee B, 2016, ACM T ARCHIT CODE OP, V12, DOI 10.1145/2840806
   Letham B, 2019, BAYESIAN ANAL, V14, P495, DOI 10.1214/18-BA1110
   Levin R, 2008, LECT NOTES COMPUT SC, V4917, P291, DOI 10.1007/978-3-540-77560-7_20
   Liu XH, 2016, DESTECH TRANS COMP, P340
   Mannens Isja, GRAPH THEORETIC CONC, V12301, P52, DOI [10.1007/978- 3-030- 86838- 3_5, DOI 10.1007/978-3-030-86838-3_5]
   Mestre Julian, 2021, P 32 INT S ALG COMP
   Moore Edward F., 1959, P INT S SWITCH THEOR, P285
   Newell A, 2020, IEEE T COMPUT, V69, P1784, DOI 10.1109/TC.2020.2982888
   Novillo D, 2014, PROCEEDINGS OF LLVM-HPC 14 2014 LLVM COMPILER INFRASTRUCTURE IN HPC, P22, DOI 10.1109/LLVM-HPC.2014.8
   Nowak Andrzej., 2015, Proceedings of the 2015 USENIX Conference on Usenix Annual Technical Conference, USENIX ATC'15, P541
   Orlin J. B., 1988, Proceedings of the Twentieth Annual ACM Symposium on Theory of Computing, P377, DOI 10.1145/62212.62249
   Ottoni G, 2021, INT SYM CODE GENER, P340, DOI 10.1109/CGO51591.2021.9370314
   Ottoni G, 2018, ACM SIGPLAN NOTICES, V53, P151, DOI [10.1145/3192366.3192374, 10.1145/3296979.3192374]
   Panchenko M, 2019, INT SYM CODE GENER, P2, DOI [10.5281/zenodo.2542117, 10.1109/CGO.2019.8661201]
   Papadimitriou CH, 2006, COMBINATORICA, V26, P101, DOI 10.1007/s00493-006-0008-z
   PROBERT RL, 1982, IEEE T SOFTWARE ENG, V8, P34, DOI 10.1109/TSE.1982.234772
   Ramasamy Vinodha, 2008, P GCC SUMM 2008, P87
   Shih Ching-Yen, 2021, STATIC BRANCH PREDIC
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Thorup M, 1998, INFORM COMPUT, V142, P159, DOI 10.1006/inco.1997.2697
   Végh LA, 2016, SIAM J COMPUT, V45, P1729, DOI 10.1137/140978296
   Xu H, 2019, INTERNATIONAL CONFERENCE ON SUPERCOMPUTING (ICS 2019), P284, DOI 10.1145/3330345.3330371
   Yi J., 2020, P 11 ACM SIGOPS AS P, P98, DOI DOI 10.1145/3409963.3410490
   Youfeng Wu, 1994, Proceedings of the 27th Annual International Symposium on Microarchitecture. MICRO 27, P1, DOI 10.1109/MICRO.1994.717399
   Zhou MZ, 2016, ACM T ARCHIT CODE OP, V13, DOI 10.1145/2851502
NR 39
TC 5
Z9 5
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 52
DI 10.1145/3498714
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900053
OA gold
DA 2024-07-18
ER

PT J
AU Hirsch, AK
   Garg, D
AF Hirsch, Andrew K.
   Garg, Deepak
TI Pirouette: Higher-Order Typed Functional Choreographies
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Concurrency; Choreographies; Functional programming
ID CONCURRENT
AB We present Pirouette, a language for typed higher-order functional choreographic programming. Pirouette offers programmers the ability to write a centralized functional program and compile it via endpoint projection into programs for each node in a distributed system. Moreover, Pirouette is defined generically over a (local) language of messages, and lifts guarantees about the message type system to its own. Message type soundness also guarantees deadlock freedom. All of our results are verified in Coq.
C1 [Hirsch, Andrew K.; Garg, Deepak] Max Planck Inst Software Syst, Saarland Informat Campus, Saarbrucken, Germany.
C3 Max Planck Society
RP Hirsch, AK (corresponding author), Max Planck Inst Software Syst, Saarland Informat Campus, Saarbrucken, Germany.
EM akhirsch@mpi-sws.org; dg@mpi-sws.org
RI Hirsch, Andrew K./AAB-1055-2021
OI Hirsch, Andrew K./0000-0003-2518-614X
CR BURTON FW, 1987, COMPUT J, V30, P437, DOI 10.1093/comjnl/30.5.437
   Carbone Marco, 2018, Distributed Computing, V31, P51, DOI [10.1007/978-3-662-44584-6_5, 10.1007/s00446-017-0295-1]
   Carbone M, 2007, ELECTRON NOTES THEOR, V171, P127, DOI 10.1016/j.entcs.2006.12.041
   Carbone M, 2013, ACM SIGPLAN NOTICES, V48, P263, DOI 10.1145/2480359.2429101
   Cooper E, 2007, LECT NOTES COMPUT SC, V4709, P266
   Cooper EEK, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P231, DOI 10.1145/1599410.1599439
   Cruz-Filipe Luis, 2017, Formal Techniques for Distributed Objects, Components and Systems. 37th IFIP WG 6.1 International Conference, FORTE 2017, held as part of the 12th International Federated Conference on Distributed Computing Techniques, DisCoTec 2017. Proceedings: LNCS 10321, P92, DOI 10.1007/978-3-319-60225-7_7
   Cruz-Filipe L, 2017, LECT NOTES COMPUT SC, V10231, P17, DOI 10.1007/978-3-319-57666-4_3
   Cruz-Filipe Luis, 2021, CHOREOGRAPHIES UNPUB
   Cruz-Filipe Luis, 2021, Interactive Theorem Proving (ITP)
   Cruz-Filipe Luis, 2019, TYPES 2019
   Cruz-Filipe Luis, 2021, INT C THEOR ASP COMP
   Dardha Ornela, 2012, PROC PPDP 2012, P139, DOI DOI 10.1145/2370776.2370794
   DeYoung Henry, 2012, LIPIcs, V16, P228
   GIACALONE A, 1989, INT J PARALLEL PROG, V18, P121, DOI 10.1007/BF01491213
   Giallorenzo S., 2020, Choreographies as objects
   Hirsch Andrew K., 2021, PIROUETTE HIGHER ORD
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Lanese I, 2013, ELECTRON P THEOR COM, P34, DOI 10.4204/EPTCS.123.5
   Licata DR, 2010, ELECTRON P THEOR COM, P69, DOI 10.4204/EPTCS.34.7
   Montesi Fabrizio, 2013, Choreographic Programming
   Montesi Fabrizio., 2020, INTRO CHOREOGRAPHIES
   Murphy T, 2008, LECT NOTES COMPUT SC, V4912, P108
   Preda MD, 2015, LECT NOTES COMPUT SC, V9037, P67, DOI 10.1007/978-3-319-19282-6_5
   Qiu Zongyan, 2007, P WORLD WIDE WEB C W, P973, DOI 10.1145/1242572.1242704
   Scalas Alceste, 2019, PRINCIPLES PROGRAMMI, DOI DOI 10.1145/3291638
   The Racket Team, 2021, RACK DOC CONC SYNCHR
   The World Wide Web Consortium (W3C), 2004, WS CHOR MOD OV
   Toninho B, 2012, LECT NOTES COMPUT SC, V7213, P346, DOI 10.1007/978-3-642-28729-9_23
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
NR 30
TC 6
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 23
DI 10.1145/3498684
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900024
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Yao, PS
   Shi, QK
   Huang, HQ
   Zhang, C
AF Yao, Peisen
   Shi, Qingkai
   Huang, Heqing
   Zhang, Charles
TI Program Analysis via Efficient Symbolic Abstraction
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Abstract interpretation; symbolic abstraction; optimization; interval
   domain; polyhedral domain
AB This paper concerns the scalability challenges of symbolic abstraction: given a formula phi in a logic L and an abstract domainA, find a most precise element in the abstract domain that over-approximates the meaning of phi. Symbolic abstraction is an important point in the space of abstract interpretation, as it allows for automatically synthesizing the best abstract transformers. However, current techniques for symbolic abstraction can have difficulty delivering on its practical strengths, due to performance issues.
   In this work, we introduce two algorithms for the symbolic abstraction of quantifier-free bit-vector formulas, which apply to the bit-vector interval domain and a certain kind of polyhedral domain, respectively. We implement and evaluate the proposed techniques on two machine code analysis clients, namely static memory corruption analysis and constrained random fuzzing. Using a suite of 57,933 queries from the clients, we compare our approach against a diverse group of state-of-the-art algorithms. The experiments show that our algorithms achieve a substantial speedup over existing techniques and illustrate significant precision advantages for the clients. Our work presents strong evidence that symbolic abstraction of numeric domains can be efficient and practical for large and realistic programs.
C1 [Yao, Peisen; Huang, Heqing; Zhang, Charles] Hong Kong Univ Sci & Technol, Hong Kong, Peoples R China.
   [Shi, Qingkai] Ant Grp, Hangzhou, Zhejiang, Peoples R China.
C3 Hong Kong University of Science & Technology
RP Yao, PS (corresponding author), Hong Kong Univ Sci & Technol, Hong Kong, Peoples R China.
EM pyao@cse.ust.hk; qingkai.sqk@antgroup.com; hhuangaz@cse.ust.hk;
   charlesz@cse.ust.hk
OI Huang, Heqing/0000-0002-5328-3994; Shi, Qingkai/0000-0002-8297-8998
FU Hong Kong Research Grant Council, [RGC16206517, ITS/440/18FP]; Ant
   Research Program
FX We thank the anonymous reviewers and our shepherd for valuable feedback
   on earlier drafts of this paper, which helped improve its presentation.
   We also appreciate Dr. Jorg Brauer and Dr. Mianlai Zhou for insightful
   discussions. The authors are supported by the RGC16206517 and
   ITS/440/18FP grants from the Hong Kong Research Grant Council, Ant
   Research Program, and the donations from Microsoft and Huawei. Qingkai
   Shi is the corresponding author.
CR Alizadeh B, 2009, INT HIGH LEVEL DESIG, P138, DOI 10.1109/HLDVT.2009.5340162
   ARNON DS, 1988, J SYMB COMPUT, V5, P267, DOI 10.1016/S0747-7171(88)80016-6
   Assarf B, 2017, MATH PROGRAM COMPUT, V9, P1, DOI 10.1007/s12532-016-0104-z
   Backeman P, 2018, PROCEEDINGS OF THE 2018 18TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P50
   Bao T, 2017, P IEEE S SECUR PRIV, P824, DOI 10.1109/SP.2017.67
   Barrett C.W., 2018, Handbook of Model Checking, P305, DOI DOI 10.1007/978-3-319-10575-8_11
   Barrett E, 2010, ELECTRON NOTES THEOR, V267, P17, DOI 10.1016/j.entcs.2010.09.003
   Becker T., 1993, GRADUATE TEXTS MATH, V141
   Beyer Dirk, 2009, Proceedings of the 2009 9th International Conference Formal Methods in Computer-Aided Design (FMCAD), P25, DOI 10.1109/FMCAD.2009.5351147
   Biondi F, 2018, LECT NOTES COMPUT SC, V10747, P71, DOI 10.1007/978-3-319-73721-8_4
   Bjorner N., 2015, Tools and Algorithms for the Construction and Analysis of Systems, V9035, P194, DOI DOI 10.1007/978-3-662-46681-0
   Blanchet B, 2003, ACM SIGPLAN NOTICES, V38, P196, DOI 10.1145/780822.781153
   Brauer J, 2010, LECT NOTES COMPUT SC, V6337, P167, DOI 10.1007/978-3-642-15769-1_11
   Brickenstein M, 2009, J PURE APPL ALGEBRA, V213, P1612, DOI 10.1016/j.jpaa.2008.11.043
   Bygde S, 2012, ELECTRON NOTES THEOR, V288, P3, DOI 10.1016/j.entcs.2012.10.003
   Chen P, 2018, P IEEE S SECUR PRIV, P711, DOI 10.1109/SP.2018.00046
   Chen Y, 2018, COMPUT INTEL NEUROSC, V2018, DOI 10.1155/2018/3505371
   Chernozhukov V, 2003, J ECONOMETRICS, V115, P293, DOI 10.1016/S0304-4076(03)00100-3
   Cousot P., 1977, SIGPLAN Notices, V12, P77, DOI 10.1145/390017.808314
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Dasgupta S, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1133, DOI 10.1145/3314221.3314601
   Dathathri S, 2017, PROCEEDINGS OF THE TWENTY-SIXTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P592
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dolan-Gavitt B, 2016, P IEEE S SECUR PRIV, P110, DOI 10.1109/SP.2016.15
   Dutra R, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P549, DOI 10.1145/3180155.3180248
   DYER ME, 1988, SIAM J COMPUT, V17, P967, DOI 10.1137/0217060
   Ermon S., 2013, ICML PMLR
   Fazekas K, 2018, LECT NOTES ARTIF INT, V10900, P134, DOI 10.1007/978-3-319-94205-6_10
   Ganesh V, 2007, LECT NOTES COMPUT SC, V4590, P519
   Gange G, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2651360
   Gopan D, 2007, LECT NOTES COMPUT SC, V4590, P68
   Gulwani S, 2008, LECT NOTES COMPUT SC, V4960, P193
   He JX, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1112, DOI 10.1145/3385412.3386016
   Henry J, 2014, ACM SIGPLAN NOTICES, V49, P43, DOI [10.1145/2597809.2597817, 10.1145/2666357.2597817]
   Huang HQ, 2020, P IEEE S SECUR PRIV, P1613, DOI 10.1109/SP40000.2020.00063
   Jiang JH, 2017, LECT NOTES COMPUT SC, V10145, P310, DOI 10.1007/978-3-319-52234-0_17
   John Ajith K., 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P486, DOI 10.1007/978-3-642-22110-1_39
   John AK, 2013, LECT NOTES COMPUT SC, V7795, P78, DOI 10.1007/978-3-642-36742-7_6
   Jonás M, 2016, LECT NOTES COMPUT SC, V9710, P267, DOI 10.1007/978-3-319-40970-2_17
   Kannan R, 2009, ACM S THEORY COMPUT, P561
   Kannan R, 2012, MATH OPER RES, V37, P1, DOI 10.1287/moor.1110.0519
   Kincaid Z, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158142
   Kitchen N, 2007, IEEE IC CAD, P258, DOI 10.1109/ICCAD.2007.4397275
   Köksal AS, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P151
   Komuravelli A, 2016, FORM METHOD SYST DES, V48, P175, DOI 10.1007/s10703-016-0249-4
   Kong Soonho, 2018, DELTA DECISION PROCE, V10982, P219
   Lahiri SK, 2006, LECT NOTES COMPUT SC, V4144, P424, DOI 10.1007/11817963_39
   Li Y, 2014, ACM SIGPLAN NOTICES, V49, P607, DOI 10.1145/2535838.2535857
   Lim J, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2450136.2450139
   Lin F., 1994, Proceedings of AAAI Fall Symposium on Relevance, P154
   Lin FZ, 2001, ARTIF INTELL, V128, P143, DOI 10.1016/S0004-3702(01)00070-4
   Lisper Bjorn., 2003, WCET, P99
   Logozzo F, 2008, LECT NOTES COMPUT SC, V4959, P197
   LOOS R, 1993, COMPUT J, V36, P450, DOI 10.1093/comjnl/36.5.450
   Meel KS, 2020, IEEE S LOG, P728, DOI 10.1145/3373718.3394809
   Mevada P, 2017, IEEE MTTS INT MICRO, P50
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Miné A, 2001, LECT NOTES COMPUT SC, V2053, P155
   Monniaux D, 2010, LECT NOTES COMPUT SC, V6174, P585, DOI 10.1007/978-3-642-14295-6_51
   Monniaux D, 2009, ACM SIGPLAN NOTICES, V44, P140, DOI 10.1145/1594834.1480899
   Nadel A, 2016, LECT NOTES COMPUT SC, V9636, P851, DOI 10.1007/978-3-662-49674-9_53
   Narodytska N, 2014, AAAI CONF ARTIF INTE, P2717
   Naveh R, 2013, LECT NOTES COMPUT SC, V8124, P823, DOI 10.1007/978-3-642-40627-0_60
   Nethercote N, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P89, DOI 10.1145/1250734.1250746
   Niemetz Aina, 2021, Tools and Algorithms for the Construction and Analysis of Systems. 27th International Conference, TACAS 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12652), P145, DOI 10.1007/978-3-030-72013-1_8
   Nieuwenhuis R, 2006, LECT NOTES COMPUT SC, V4121, P156
   Poeplau S, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P181
   Preiner M, 2017, LECT NOTES COMPUT SC, V10205, P264, DOI 10.1007/978-3-662-54577-5_15
   REGEHR J, 2004, P 11 INT C ARCH SUPP, V39, P133
   Reps T, 2004, LECT NOTES COMPUT SC, V2937, P252
   Reps T, 2008, LECT NOTES COMPUT SC, V4959, P16
   Reps T, 2016, LECT NOTES COMPUT SC, V9583, P3, DOI 10.1007/978-3-662-49122-5_1
   Ritter Fabian, 2015, THESIS
   SANKARANARAYANAN S, 2006, P 13 INT C STAT AN S, V4134, P3
   Sebastiani R., 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P335, DOI 10.1007/978-3-662-46681-0_27
   Sebastiani R, 2015, LECT NOTES COMPUT SC, V9206, P447, DOI 10.1007/978-3-319-21690-4_27
   Sebastiani R, 2015, ACM T COMPUT LOG, V16, DOI 10.1145/2699915
   Sharma Tushar, 2013, TECHNICAL REPORT
   Shiyi Wei, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P653, DOI 10.1007/978-3-319-89884-1_23
   Shoshitaishvili Y, 2016, P IEEE S SECUR PRIV, P138, DOI 10.1109/SP.2016.17
   Simon A, 2007, LECT NOTES COMPUT SC, V4634, P121
   Singh C, 2018, DEBT MANAGEMENT IN INDIA, P211
   Singh G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158143
   Singh G, 2017, ACM SIGPLAN NOTICES, V52, P46, DOI 10.1145/3093333.3009885
   Singh G, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2813885.2738000, 10.1145/2737924.2738000]
   Song J, 2016, IEEE SECUR PRIV, V14, P76, DOI 10.1109/MSP.2016.14
   Stephens N, 2016, 23RD ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2016), DOI 10.14722/ndss.2016.23368
   Sullivan Allison, 2019, Formal Methods and Software Engineering. 21st International Conference on Formal Engineering Methods, ICFEM 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11852), P336, DOI 10.1007/978-3-030-32409-4_21
   Thakur A, 2015, ELECTRON NOTES THEOR, V311, P15, DOI 10.1016/j.entcs.2015.02.003
   Thakur Aditya, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P174, DOI 10.1007/978-3-642-31424-7_17
   THAKUR A, 2012, P 19 INT C STAT AN D, V7460, P111
   Wintersteiger CM, 2013, FORM METHOD SYST DES, V42, P3, DOI 10.1007/s10703-012-0156-2
   Wu BH, 2013, DES AUT CON
   Yorsh G, 2004, LECT NOTES COMPUT SC, V2988, P530
   Yun I, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P745
NR 96
TC 0
Z9 0
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 118
DI 10.1145/3485495
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200022
OA gold
DA 2024-07-18
ER

PT J
AU Avanzini, M
   Barthe, G
   Dal Lago, U
AF Avanzini, Martin
   Barthe, Gilles
   Dal Lago, Ugo
TI On Continuation-Passing Transformations and Expected Cost Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE cost analysis; probabilistic programming; CPS transformation
AB We define a continuation-passing style (CPS) translation for a typed lambda-calculus with probabilistic choice, unbounded recursion, and a tick operator D for modeling cost. The target language is a (non-probabilistic) lambda-calculus, enriched with a type of extended positive reals and a fixpoint operator. We then show that applying the CPS transform of an expression M to the continuation lambda(nu).0 yields the expected cost of M. We also introduce a formal system for higher-order logic, called EHOL, prove it sound, and show it can derive tight upper bounds on the expected cost of classic examples, including Coupon Collector and Random Walk. Moreover, we relate our translation to Kaminski et al.'s ert-calculus, showing that the latter can be recovered by applying our CPS translation to (a generalization of) the classic embedding of imperative programs into lambda-calculus. Finally, we prove that the CPS transform of an expression can also be used to compute pre-expectations and to reason about almost sure termination.
C1 [Avanzini, Martin; Dal Lago, Ugo] Inria Sophia Antipolis Mediterranee, Biot, France.
   [Barthe, Gilles] Max Planck Inst Secur & Privacy, Bochum, Germany.
   [Dal Lago, Ugo] Univ Bologna, Bologna, Italy.
C3 University of Bologna
RP Avanzini, M (corresponding author), Inria Sophia Antipolis Mediterranee, Biot, France.
EM martin.avanzini@inria.fr; gjbarthe@gmail.com; ugo.dallago@unibo.it
RI ; Dal Lago, Ugo/K-9621-2015
OI BARTHE, Gilles/0000-0002-3853-1777; Dal Lago, Ugo/0000-0001-9200-070X
FU Agence Nationale de la Recherge (ANR) [ANR-19-CE48-0014]; European
   Research Council under the ERC CoG DIAPASoN [818616]; European Research
   Council (ERC) [818616] Funding Source: European Research Council (ERC);
   Agence Nationale de la Recherche (ANR) [ANR-19-CE48-0014] Funding
   Source: Agence Nationale de la Recherche (ANR)
FX This work is partially supported by the Agence Nationale de la Recherge
   (ANR) under the Grant ANR-19-CE48-0014 (https://www.irif.fr/anrpps) and
   the European Research Council under the ERC CoG DIAPASoN GA 818616
   (https://site.unibo.it/diapason/en).
CR Agrawal S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158122
   Aguirre A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110265
   Albert E, 2012, THEOR COMPUT SCI, V413, P142, DOI 10.1016/j.tcs.2011.07.009
   [Anonymous], 1956, Automata Studies, Annals of Mathematics Studies
   Appel Andrew W., 1991, COMPILING CONTINUATI, DOI [10.1017/CBO9780511609619, DOI 10.1017/CBO9780511609619]
   Atkey R, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:17)2011
   Avanzini M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428240
   Avanzini M, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785725
   Avanzini M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P152, DOI 10.1145/2784731.2784753
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Batz K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434320
   Bournez O, 2005, LECT NOTES COMPUT SC, V3467, P323
   Brázdil T, 2015, J COMPUT SYST SCI, V81, P288, DOI 10.1016/j.jcss.2014.06.005
   Bucciarelli A., 2003, Mathematical Structures in Computer Science, V13, P15, DOI 10.1017/S0960129502003833
   Celiku O, 2005, LECT NOTES COMPUT SC, V3582, P107
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   CHAKAROV A, 2014, P 21 SAS, DOI [10.1007/978-3-319-10936-7_6, DOI 10.1007/978-3-319-10936-7_6]
   Chatterjee K, 2017, LECT NOTES COMPUT SC, V10426, P118, DOI 10.1007/978-3-319-63387-9_6
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cutler JW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408979
   Dal Lago U, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434313
   Dal Lago U, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:11)2012
   Dal Lago U, 2012, RAIRO-THEOR INF APPL, V46, P413, DOI 10.1051/ita/2012012
   DALLAGO U, 2017, LNCS
   Danielsson NA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1328438.1328457
   Danner N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P140, DOI 10.1145/2784731.2784749
   Danvy O, 2003, THEOR COMPUT SCI, V308, P239, DOI 10.1016/S0304-3975(02)00733-8
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   Dongsheng Wang, 2020, 2020 3rd International Conference on Electron Device and Mechanical Engineering (ICEDME). Proceedings, P110, DOI 10.1109/ICEDME50972.2020.00031
   Ehrhard T, 2018, J ACM, V65, DOI 10.1145/3164540
   Ehrhard T, 2014, ACM SIGPLAN NOTICES, V49, P309, DOI 10.1145/2535838.2535865
   Esparza J, 2005, IEEE S LOG, P117
   Filinski Andrzej, 1994, P 21 ANN ACM S PRINC, P446, DOI DOI 10.1145/174675.178047
   Flajolet, 1996, INTRO ANAL ALGORITHM
   GEHR T, 2016, P 28 CAV, DOI DOI 10.1007/978-3-319-41528-4_4
   Gill J., 1974, STOC 74 P 6 ANN ACM, P91
   GOLDWASSER S, 1984, J COMPUT SYST SCI, V28, P270, DOI 10.1016/0022-0000(84)90070-9
   Goodman Noah, 2008, UAI, DOI [10.5555/2969033.2969207, DOI 10.5555/2969033.2969207]
   GOUBAULTLARRECQ J, 2019, P 34 LICS IEEE, DOI DOI 10.1109/LICS.2019.8785809
   Heunen C, 2017, IEEE S LOG
   Hoffmann Jan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P781, DOI 10.1007/978-3-642-31424-7_64
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   Jung A., 1998, Electronic Notes in Theoretical Computer Science, V13, DOI 10.1016/S1571-0661(05)80216-6
   Kaminski BL, 2018, J ACM, V65, DOI 10.1145/3208102
   Kaminski BL, 2017, IEEE S LOG
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   Kaminski BL, 2015, LECT NOTES COMPUT SC, V9234, P307, DOI 10.1007/978-3-662-48057-1_24
   Katoen JP, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P31, DOI 10.1145/2933575.2934574
   Katoen JP, 2010, LECT NOTES COMPUT SC, V6337, P390, DOI 10.1007/978-3-642-15769-1_24
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   McIver A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158121
   Monniaux D, 2001, LECT NOTES COMPUT SC, V2126, P111
   Motwani Rajeev, 1995, RANDOMIZED ALGORITHM
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   NIELSON HR, 1987, SCI COMPUT PROGRAM, V9, P107, DOI 10.1016/0167-6423(87)90029-3
   Olmedo F, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P672, DOI 10.1145/2933575.2935317
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   RABIN MO, 1963, INFORM CONTROL, V6, P230, DOI 10.1016/S0019-9958(63)90290-0
   Radicek I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158124
   Ramsey N, 2002, ACM SIGPLAN NOTICES, V37, P154, DOI 10.1145/565816.503288
   Rosendahl M., 1989, FPCA 89, P144, DOI DOI 10.1145/99370.99381
   Saheb-Djahromi N., 1978, Mathematical Foundations of Computer Science 1978, P442
   SANTOS ES, 1969, P AM MATH SOC, V22, P704, DOI 10.2307/2037463
   Scibior A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158148
   Takisaka T, 2018, LECT NOTES COMPUT SC, V11138, P476, DOI 10.1007/978-3-030-01090-4_28
   Tassarotti J, 2018, LECT NOTES COMPUT SC, V10895, P560, DOI 10.1007/978-3-319-94821-8_33
   Tolpin David, 2016, P 28 IMPL APPL FUNCT, DOI DOI 10.1145/3064899.3064910
   Ngo VC, 2018, ACM SIGPLAN NOTICES, V53, P496, DOI [10.1145/3192366.3192394, 10.1145/3296979.3192394]
   WANG D, 2018, PROC
   Wang PX, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P204, DOI 10.1145/3314221.3314581
   WEGBREIT B, 1975, COMMUN ACM, V18, P528, DOI 10.1145/361002.361016
   Winskel G., 1993, The Formal Semantics of Programming Languages
   Yamada, 2019, SCP, V185
NR 76
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 87
DI 10.1145/3473592
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800027
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Handa, S
   Kallas, K
   Vasilakis, N
   Rinard, MC
AF Handa, Shivam
   Kallas, Konstantinos
   Vasilakis, Nikos
   Rinard, Martin C.
TI An Order-Aware Dataflow Model for Parallel Unix Pipelines
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Unix; POSIX; Shell; Parallelism; Dataflow; Order-awareness
ID MAPREDUCE
AB We present a dataflow model for modelling parallel Unix shell pipelines. To accurately capture the semantics of complex Unix pipelines, the dataflow model is order-aware, i.e., the order in which a node in the dataflow graph consumes inputs from different edges plays a central role in the semantics of the computation and therefore in the resulting parallelization. We use this model to capture the semantics of transformations that exploit data parallelism available in Unix shell computations and prove their correctness. We additionally formalize the translations from the Unix shell to the dataflow model and from the dataflow model back to a parallel shell script. We implement our model and transformations as the compiler and optimization passes of a system parallelizing shell pipelines, and use it to evaluate the speedup achieved on 47 pipelines.
C1 [Handa, Shivam; Vasilakis, Nikos; Rinard, Martin C.] MIT, CSAIL, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
   [Kallas, Konstantinos] Univ Penn, Philadelphia, PA 19104 USA.
   [Handa, Shivam; Vasilakis, Nikos; Rinard, Martin C.] MIT Comp Sci & Artificial Intelligence Lab, 32 Vassar St, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT); University of Pennsylvania;
   Massachusetts Institute of Technology (MIT)
RP Handa, S (corresponding author), MIT, CSAIL, 77 Massachusetts Ave, Cambridge, MA 02139 USA.; Handa, S (corresponding author), MIT Comp Sci & Artificial Intelligence Lab, 32 Vassar St, Cambridge, MA 02139 USA.
FU DARPA [HR00112020013, HR001120C0191]; NSF [CCF 1763514]
FX We thank Konstantinos Mamouras for preliminary discussions that helped
   spark an interest for this work, Dimitris Karnikis for help with the
   artifact, Diomidis Spinellis for benchmarks and discussions, Michael
   Greenberg and Jiasi Shen for comments on the presentation of our work,
   the anonymous ICFP reviewers and our shepherd Rishiyur Nikhil for
   extensive feedback, and the ICFP artifact reviewers for their comments
   that significantly improved the paper artifact. This research was funded
   in part by DARPA contracts HR00112020013 and HR001120C0191, and NSF
   award CCF 1763514. Any opinions, findings, conclusions, or
   recommendations expressed in this material are those of the authors and
   do not necessarily reflect those of DARPA or other agencies.
CR [Anonymous], 2005, SIGMOD, DOI DOI 10.1145/1066157.1066193
   [Anonymous], 1996, CONCURRENT PROGRAMMI
   [Anonymous], 1990, P SUMM 1990 UKUUG C
   [Anonymous], 1974, PROC IFIP C 74
   Arasu A, 2006, VLDB J, V15, P121, DOI 10.1007/s00778-004-0147-z
   ARVIND, 1990, IEEE T COMPUT, V39, P300, DOI 10.1109/12.48862
   Barak A, 1998, FUTURE GENER COMP SY, V13, P361, DOI 10.1016/S0167-739X(97)00037-X
   BENTLEY J, 1986, COMMUN ACM, V29, P471, DOI 10.1145/5948.315654
   BENTLEY J, 1985, COMMUN ACM, V28, P456, DOI [10.1145/3532.315102, 10.1145/3166.315010]
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   Bhandari Pawan, 2020, Solutions to unixgame.io
   Blatt Austin J, 2020, P ACM PROGRAM LANG, DOI [10.1145/3371111, DOI 10.1145/3371111]
   Bourke T., 2013, HSCC, P113
   Cvetkovic, 2021, PASH LIGHT TOUCH DAT, p49S66, DOI [10.1145/3447786.3456228, DOI 10.1145/3447786.3456228]
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Dennis J. B., 1974, Programming Symposium, P362
   Duff Tom., 1990, RCDA SHELL PLAN 9 UN
   EPSTEIN J, 2011, P 4 ACM S HASKELL HA
   Farzan A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P610, DOI 10.1145/3314221.3314612
   Farzan A, 2017, ACM SIGPLAN NOTICES, V52, P540, DOI [10.1145/3062341.3062355, 10.1145/3140587.3062355]
   Gentzsch W, 2001, FIRST IEEE/ACM INTERNATIONAL SYMPOSIUM ON CLUSTER COMPUTING AND THE GRID, PROCEEDINGS, P35, DOI 10.1109/CCGRID.2001.923173
   Gordon MI, 2006, ACM SIGPLAN NOTICES, V41, P151, DOI 10.1145/1168919.1168877
   Greenberg Michael, 2021, HotOS '21: Proceedings of the Workshop on Hot Topics in Operating Systems, P104, DOI 10.1145/3458336.3465294
   Greenberg Michael, 2018, The posix shell is an interactive dsl for concurrency
   Greenberg Michael, 2021, P WORKSH HOT TOP OP, P240, DOI [10.1145/3458336.3465296, DOI 10.1145/3458336.3465296]
   Gurd John, 1979, 1979 INT WORKSH MAN
   Hirzel M, 2014, ACM COMPUT SURV, V46, DOI 10.1145/2528412
   Jurafsky Dan, 2017, Unix for poets
   Kahn Gilles, 1977, Information Processing, P993
   Kallas K, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428221
   KARP RM, 1966, SIAM J APPL MATH, V14, P1390, DOI 10.1137/0114108
   Killian C, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P179, DOI 10.1145/1250734.1250755
   LEE EA, 1987, IEEE T COMPUT, V36, P24, DOI 10.1109/TC.1987.5009446
   LEE EA, 1987, P IEEE, V75, P1235, DOI 10.1109/PROC.1987.13876
   LEGUERNIC P, 1986, IEEE T ACOUST SPEECH, V34, P362, DOI 10.1109/TASSP.1986.1164809
   Mamouras K, 2020, LECT NOTES COMPUT SC, V12075, P394, DOI 10.1007/978-3-030-44914-8_15
   Mamouras K, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P670, DOI 10.1145/3314221.3314580
   Mamouras K, 2017, ACM SIGPLAN NOTICES, V52, P693, DOI [10.1145/3140587.3062369, 10.1145/3062341.3062369]
   Maraninchi F, 2001, COMPUT LANG, V27, P61, DOI 10.1016/S0096-0551(01)00016-9
   MCDONALD C, 1988, SOFTWARE PRACT EXPER, V18, P1011, DOI 10.1002/spe.4380181007
   MCILROY MD, 1978, AT&T TECH J, V57, P1899, DOI 10.1002/j.1538-7305.1978.tb02135.x
   MULLENDER SJ, 1990, COMPUTER, V23, P44, DOI 10.1109/2.53354
   Murray DG, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P439, DOI 10.1145/2517349.2522738
   OUSTERHOUT JK, 1988, COMPUTER, V21, P23, DOI 10.1109/2.16
   Perry Brandon, 2016, WICKED COOL SHELL SC
   Project Gutenberg, 1971, Project gutenberg
   Raghavan D, 2020, PROCEEDINGS OF THE 2020 USENIX ANNUAL TECHNICAL CONFERENCE, P617
   Raymond Pascal., 1991, PROGRAMMING VERIFYIN, DOI 10.1145/125083.123062
   Rinard Shivam., ORDER AWARE DATAFLOW, DOI [10.5281/zenodo.4776838, DOI 10.5281/ZENODO.4776838]
   Rugina R, 1999, ACM SIGPLAN NOTICES, V34, P72, DOI 10.1145/329366.301111
   Schneider S, 2015, IEEE T COMPUT, V64, P504, DOI 10.1109/TC.2013.221
   Sewell P, 2005, ACM SIGPLAN NOTICES, V40, P15, DOI 10.1145/1090189.1086370
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2980983.2908102, 10.1145/2908080.2908102]
   Spinellis D, 2017, IEEE T COMPUT, V66, P1547, DOI 10.1109/TC.2017.2695447
   Spinellis Diomidis, REAL STAT BUSES ATHE
   Tange O, 2011, TUSENIX Mag., V36, P42
   Tange Ole, 2020, DIFFERENCES GNU PARA
   Thies W, 2002, LECT NOTES COMPUT SC, V2304, P179
   Thomas K, 1984, TAGGED TOKEN DATAFLO
   Vasilakis Nikos, 2015, P 15 USENIX C HOT TO, P15
   Walker Edward., 2009, Proceedings of the 4th Workshop on Work ows in Support of Large-Scale Science, P11, DOI [10.1145/1645164.1645175, DOI 10.1145/1645164.1645175]
   Yoo AB, 2003, LECT NOTES COMPUT SC, V2862, P44
   Zaharia M, 2012, P 9 USENIX C NETW SY, P15
   Zhang Z, 2013, INT CONF HIGH PERFOR, DOI 10.1145/2503210.2503222
NR 64
TC 1
Z9 1
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 65
DI 10.1145/3473570
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800005
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Kidney, DO
   Wu, N
AF Kidney, Donnacha Oisin
   Wu, Nicolas
TI Algebras forWeighted Search
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Haskell; Agda; graph search; monad
ID MONAD TRANSFORMERS; BACKTRACKING
AB Weighted search is an essential component of many fundamental and useful algorithms. Despite this, it is relatively under explored as a computational effect, receiving not nearly as much attention as either depth- or breadth-first search. This paper explores the algebraic underpinning of weighted search, and demonstrates how to implement it as a monad transformer.
   The development first explores breadth-first search, which can be expressed as a polynomial over semirings. These polynomials are generalised to the free semimodule monad to capture a wide range of applications, including probability monads, polynomial monads, and monads for weighted search. Finally, a monad transformer based on the free semimodule monad is introduced. Applying optimisations to this type yields an implementation of pairing heaps, which is then used to implement Dijkstra's algorithm and efficient probabilistic sampling. The construction is formalised in Cubical Agda and implemented in Haskell.
C1 [Kidney, Donnacha Oisin; Wu, Nicolas] Imperial Coll London, London, England.
C3 Imperial College London
RP Kidney, DO (corresponding author), Imperial Coll London, London, England.
EM o.kidney21@imperial.ac.uk; n.wu@imperial.ac.uk
OI Wu, Nicolas/0000-0002-4161-985X; Kidney, Donnacha
   Oisin/0000-0003-4952-7359
FU Engineering and Physical Sciences Research Council [EP/S028129/1]; EPSRC
   [EP/S028129/1] Funding Source: UKRI
FX The authors would like to thank the anonymous referees for providing
   invaluable criticism, which greatly improved the presentation of this
   paper. Particular thanks are due to Jeremy Gibbons, who gave insightful
   feedback. This work is supported by the Engineering and Physical
   Sciences Research Council, grant number EP/S028129/1 on lSCOPE: Scoped
   Contextual Operations and Effectsz.
CR ALLISON L, 1989, SOFTWARE PRACT EXPER, V19, P99, DOI 10.1002/spe.4380190202
   Altenkirch Thorsten, 2011, DEFINABLE QUOTIENTS
   AMER K, 1984, ALGEBRA UNIV, V18, P129, DOI 10.1007/BF01182254
   [Anonymous], 2015, P FISITA 2014 WORLD, DOI 10.1142/9789814689977_0074
   Berger Ulrich, 2019, LEIBNIZ INT P INFORM, V130, P22
   Capriotti P, 2014, ELECTRON P THEOR COM, P2, DOI 10.4204/EPTCS.153.2
   Cayley A., 1854, THEORY GROUPS DEPEND
   CLARK KL, 1977, P IFIP 77, P939
   Easterly N., 2019, FUNCTIONS NEWTYPE WR
   Erwig M, 2006, J FUNCT PROGRAM, V16, P21, DOI 10.1017/S0956796805005721
   Erwig M, 2001, J FUNCT PROGRAM, V11, P467, DOI 10.1017/S0956796801004075
   Escardó M, 2010, MATH STRUCT COMP SCI, V20, P127, DOI 10.1017/S0960129509990351
   Fischer Sebastian, 2009, INFORM 2009 FOKUS LE, P15
   Fredman ML, 1986, ALGORITHMICA, V1, P111, DOI 10.1007/BF01840439
   Gibbons J., INT C FUNCTIONAL PRO, P273, DOI 10.1145/289423.289455
   Gill A., 1993, P C FUNCT PROGR LANG, P223, DOI DOI 10.1145/165180.165214
   Golan Jonathan S., 2003, SEMIRINGS AFFINE EQU, P1, DOI [10.1007/978-94-017-0383-3_1, DOI 10.1007/978-94-017-0383-3_1]
   Hedges J, 2014, ELECTRON PROC THEOR, P31, DOI 10.4204/EPTCS.153.3
   Hinze R, 2006, J FUNCT PROGRAM, V16, P197, DOI 10.1017/S0956796805005769
   Hinze R, 2000, ACM SIGPLAN NOTICES, V35, P186, DOI 10.1145/357766.351258
   Hinze Ralf, 1999, EFFICIENT MONADIC ST, P51
   Höfner P, 2012, FORM ASP COMPUT, V24, P459, DOI 10.1007/s00165-012-0245-4
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Hutton G, 2010, J FUNCT PROGRAM, V20, P353, DOI 10.1017/S0956796810000122
   Jacobson N., 1985, BASIC ALGEBRA, V2nd
   Jaskelioff M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P355, DOI 10.1145/2784731.2784743
   Jaskelioff M, 2010, THEOR COMPUT SCI, V411, P4441, DOI 10.1016/j.tcs.2010.09.011
   Jones Geraint, 1993, 71 U AUCKL DEP COMP, V71
   Jones M. P., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P97
   Kidney Donnacha Oisin, 2021, **DATA OBJECT**, DOI [10.5281/zenodo.4774319, DOI 10.5281/ZENODO.4774319]
   King D. J., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P344, DOI 10.1145/199448.199530
   Kiselyov O, 2005, ACM SIGPLAN NOTICES, V40, P192, DOI 10.1145/1090189.1086390
   Larkin D. H., 2014, 2014 P 16 WORKSH ALG, P61
   Launchbury John, 2000, ZIP FUSION HYPERFUNC
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   McIlroy M. D., 1999, Journal of Functional Programming, V9, P325, DOI 10.1017/S0956796899003299
   Meertens L., 1992, Formal Aspects of Computing, V4, P413, DOI 10.1007/BF01211391
   Mohri M., 2002, Journal of Automata, Languages and Combinatorics, V7, P321
   Okasaki C, 2000, ACM SIGPLAN NOTICES, V35, P131, DOI 10.1145/357766.351253
   Paterson Ross, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P300, DOI 10.1007/978-3-642-31113-0_15
   Piróg M, 2016, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.207.2
   Rivas E, 2018, SCI COMPUT PROGRAM, V152, P70, DOI 10.1016/j.scico.2017.09.007
   Rivas Exequiel, 2014, ARXIV14064823CSMATH
   SLEATOR DD, 1985, J ACM, V32, P652, DOI 10.1145/3828.3835
   Smith Leon P, 2009, MONAD READER JUL, V14, P28
   Spivey JM, 2009, J FUNCT PROGRAM, V19, P469, DOI 10.1017/S0956796809007321
   Spivey J. Michael, 2003, FUN PROGRAMMING
   Spivey M., 2000, Journal of Functional Programming, V10, P397, DOI 10.1017/S0956796800003749
   Vezzosi A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341691
   VITTER JS, 1985, ACM T MATH SOFTWARE, V11, P37, DOI 10.1145/3147.3165
   Voigtländer J, 2008, LECT NOTES COMPUT SC, V5133, P388
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
   WADLER P, 1985, LECT NOTES COMPUT SC, V201, P113
   WEHRUNG F, 1992, J PURE APPL ALGEBRA, V83, P83, DOI 10.1016/0022-4049(92)90105-O
NR 54
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 72
DI 10.1145/3473577
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800012
OA gold
DA 2024-07-18
ER

PT J
AU Angiuli, C
   Cavallo, E
   Mörtberg, A
   Zeuner, M
AF Angiuli, Carlo
   Cavallo, Evan
   Mortberg, Anders
   Zeuner, Max
TI Internalizing Representation Independence with Univalence
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Representation Independence; Univalence; Higher Inductive Types; Proof
   Assistants; Cubical Type Theory
ID PARAMETRICITY; MODEL
AB In their usual form, representation independence metatheorems provide an external guarantee that two implementations of an abstract interface are interchangeable when they are related by an operation-preserving correspondence. If our programming language is dependently-typed, however, we would like to appeal to such invariance results within the language itself, in order to obtain correctness theorems for complex implementations by transferring them from simpler, related implementations. Recent work in proof assistants has shown that Voevodsky's univalence principle allows transferring theorems between isomorphic types, but many instances of representation independence in programming involve non-isomorphic representations.
   In this paper, we develop techniques for establishing internal relational representation independence results in dependent type theory, by using higher inductive types to simultaneously quotient two related implementation types by a heterogeneous correspondence between them. The correspondence becomes an isomorphism between the quotiented types, thereby allowing us to obtain an equality of implementations by univalence. We illustrate our techniques by considering applications to matrices, queues, and finite multisets. Our results are all formalized in Cubical Agda, a recent extension of Agda which supports univalence and higher inductive types in a computationally well-behaved way.
C1 [Angiuli, Carlo; Cavallo, Evan] Carnegie Mellon Univ, Dept Comp Sci, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
   [Mortberg, Anders; Zeuner, Max] Stockholm Univ, Dept Math, Kraftriket Hus 6, S-10691 Stockholm, Sweden.
C3 Carnegie Mellon University; Stockholm University
RP Angiuli, C (corresponding author), Carnegie Mellon Univ, Dept Comp Sci, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
EM cangiuli@cs.cmu.edu; ecavallo@cs.cmu.edu; anders.mortberg@math.su.se;
   zeuner@math.su.se
OI Angiuli, Carlo/0000-0002-9590-3303; Zeuner, Max/0000-0003-3092-8144;
   Cavallo, Evan/0000-0001-8174-7496
FU Air Force Office of Scientific Research under MURI [FA9550-15-1-0053,
   FA9550-19-1-0216]; Swedish Research Council (Vetenskapsradet)
   [2019-04545]; Swedish Research Council [2019-04545] Funding Source:
   Swedish Research Council
FX The material in this paper is based upon research supported by the Air
   Force Office of Scientific Research under MURI grants FA9550-15-1-0053
   and FA9550-19-1-0216, and the Swedish Research Council (Vetenskapsradet)
   under Grant No. 2019-04545. The views and conclusions contained in this
   document are those of the authors and should not be interpreted as
   representing the official policies, either expressed or implied, of any
   sponsoring institution, the U.S. government, or any other entity.
CR Abel A, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000155
   Ahrens B, 2020, IEEE S LOG, P53, DOI 10.1145/3373718.3394755
   Ahrens Benedikt, 2017, LEIBNIZ INT P INFORM, V84, DOI 10.4230/LIPIcs.FSCD.2017.5
   Angiuli C., 2019, SYNTAX MODELS CARTES
   Angiuli C, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000198
   Angiuli Carlo, 2018, LIPIcs, V119, DOI DOI 10.4230/LIPICS.CSL.2018.6
   [Anonymous], 1989, FPCA 1989, DOI DOI 10.1145/99370.99404
   Awodey S, 2014, PHILOS MATH, V22, P1, DOI 10.1093/philmat/nkt030
   Barthe G, 2003, J FUNCT PROGRAM, V13, P261, DOI 10.1017/S0956796802004501
   Basold H, 2017, J UNIVERS COMPUT SCI, V23, P63
   Bauer A, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P164, DOI 10.1145/3018610.3018615
   BENACERRAF P, 1965, PHILOS REV, V74, P47, DOI 10.2307/2183530
   Bernardy JP, 2015, ELECTRON NOTES THEOR, V319, P67, DOI 10.1016/j.entcs.2015.12.006
   Bernardy JP, 2012, J FUNCT PROGRAM, V22, P107, DOI 10.1017/S0956796812000056
   Boulier S, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P182, DOI 10.1145/3018610.3018620
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Brunerie G., 2018, HOMOTOPY TYPE THEORY
   Carette J, 2014, LECT NOTES ARTIF INT, V8543, P252, DOI 10.1007/978-3-319-08434-3_19
   Cavallo E, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290314
   Cavallo Evan, 2020, 28 EACSL ANN C COMPU, DOI [10.4230/LIPIcs.CSL.2020.13, DOI 10.4230/LIPICS.CSL.2020.13]
   Chu S, 2017, ACM SIGPLAN NOTICES, V52, P510, DOI [10.1145/3062341.3062348, 10.1145/3140587.3062348]
   Chyzak Frederic, 2014, Interactive Theorem Proving, P160, DOI 10.1007/978-3-319-08970-6_11
   Cohen C., 2018, LEIBNIZ INT P INFORM, DOI [DOI 10.4230/LIPICS.TYPES.2015.5, 10.4230/LIPIcs]
   Cohen C, 2013, LECT NOTES COMPUT SC, V8307, P147, DOI 10.1007/978-3-319-03545-1_10
   Coq Development Team, 2020, COQ PROOF ASSISTANT
   Coquand T, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P255, DOI 10.1145/3209108.3209197
   Coquand T, 2013, INDAGAT MATH NEW SER, V24, P1105, DOI 10.1016/j.indag.2013.09.002
   Crary K, 2017, ACM SIGPLAN NOTICES, V52, P100, DOI 10.1145/3093333.3009892
   Danielsson Nils Anders, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P149, DOI 10.1007/978-3-642-32347-8_11
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Delaware B, 2015, ACM SIGPLAN NOTICES, V50, P689, DOI [10.1145/2775051.2677006, 10.1145/2676726.2677006]
   Dijkstra E.W., 1974, ROLE SCI THOUGHT
   Escardo, 2019, INTRO UNIVALENT FDN
   Fiore, 2019, INT C HOM TYP THEOR
   Forsberg FN, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P172, DOI 10.1145/3372885.3373835
   Frumin Dan, 2018, P 7 ACM SIGPLAN INT, P201, DOI DOI 10.1145/3167085
   Grayson, 2020, UNIMATH A COMPUTER C
   Gylterud HR, 2020, MATH PROC CAMBRIDGE, V169, P1, DOI 10.1017/S0305004119000045
   Haftmann F, 2013, LECT NOTES COMPUT SC, V7998, P100, DOI 10.1007/978-3-642-39634-2_10
   Hedberg M., 1998, Journal of Functional Programming, V8, P413, DOI 10.1017/S0956796898003153
   Kahrs S, 1997, THEOR COMPUT SCI, V173, P445, DOI 10.1016/S0304-3975(96)00163-6
   Kapulkin C, 2020, THEOR APPL CATEG, V35, P1546
   Keller C., 2012, CSL, P381
   Kraus N, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(1:15)2017
   Krishnaswami Neelakantan R., 2013, LIPIcs, V23, P432, DOI [10.4230/LIPICS, DOI 10.4230/LIPICS, 10.4230/LIPIcs.CSL.2013.432, DOI 10.4230/LIPICS.CSL.2013.432]
   Lammich P, 2013, LECT NOTES COMPUT SC, V7998, P84, DOI 10.1007/978-3-642-39634-2_9
   Leroy X., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P142, DOI 10.1145/199448.199476
   Licata D., 2016, WEAK UNIVALENCE BETA
   Lumsdaine PL, 2020, MATH PROC CAMBRIDGE, V169, P159, DOI 10.1017/S030500411900015X
   Magaud N, 2003, LECT NOTES COMPUT SC, V2758, P87
   Magaud N., 2002, Types for Proofs and Programs. International Workshop, TYPES 2000. Selected Papers (Lecture Notes in Computer Science Vol.2277), P181
   Martin-Lof Per, 1975, Logic Colloquium, V80, P73, DOI [10.1016/S0049-237X(08)71945-1, DOI 10.1016/S0049-237X(08)71945-1]
   Mitchell J.C., 1986, C RECORD 13 ANN ACM, P263, DOI [10.1145/512644.512669, DOI 10.1145/512644.512669]
   Morrisett Greg, 2017, ARXIV170501163CSLO
   Nuyts A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110276
   Nuyts A, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P779, DOI 10.1145/3209108.3209119
   Okasaki Chris, 1999, Purely functional data structures, DOI DOI 10.1017/CBO9780511530104
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Rijke Egbert, 2012, THESIS U LJUBLJANA
   Ringer Talia., 10 INT C INTERACTIVE, V141, p26:1, DOI [DOI 10.4230/LIPICS.ITP.2019.26, 10.4230/LIPIcs.ITP.2019.26]
   ROBINSON E, 1994, THEOR COMPUT SCI, V136, P163, DOI 10.1016/0304-3975(94)00126-4
   SANNELLA D, 1987, J COMPUT SYST SCI, V34, P150, DOI 10.1016/0022-0000(87)90023-7
   Sozeau, 2019, ARXIV190905027CSPL
   Streicher T., 1993, THESIS LUDWIG MAXIMI
   Tabareau N, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236787
   The Agda Development Team, 2020, AGD PROGR LANG
   The Mathematical Components Team, 2020, MATH COMP LIBR
   The Univalent Foundations Program, 2013, HOMY TYP THEOR UN FD
   TURNER DA, 1985, LECT NOTES COMPUT SC, V201, P1
   van Doorn F, 2017, LECT NOTES COMPUT SC, V10499, P479, DOI 10.1007/978-3-319-66107-0_30
   Vezzosi A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341691
   Vindum Simon Friis, 2019, CASE STUDY BATCHEDQU
   Voevodsky V., 2010, EQUIVALENCE AXIOM UN
   Voevodsky V., 2010, Univalent foundations
   Voevodsky V, 2015, MATH STRUCT COMP SCI, V25, P1278, DOI 10.1017/S0960129514000577
   Wood, 2019, BLOG POST
NR 76
TC 5
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 12
DI 10.1145/3434293
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100012
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Lee, W
AF Lee, Woosuk
TI Combining the Top-Down Propagation and Bottom-Up Enumeration for
   Inductive Program Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Programming by example; Syntax-guided Synthesis
ID FRAMEWORK; SEARCH
AB We present an effective method for scalable and general-purpose inductive program synthesis. There have been two main approaches for inductive synthesis: enumerative search, which repeatedly enumerates possible candidate programs, and the top-down propagation (TDP), which recursively decomposes a given large synthesis problem into smaller subproblems. Enumerative search is generally applicable but limited in scalability, and the TDP is efficient but only works for special grammars or applications. In this paper, we synergistically combine the two approaches. We generate small program subexpressions via enumerative search and put them together into the desired program by using the TDP. Enumerative search enables to bring the power of TDP into arbitrary grammars, and the TDP helps to overcome the limited scalability of enumerative search. We apply our approach to a standard formulation, syntax-guided synthesis (SyGuS), thereby supporting a broad class of inductive synthesis problems. We have implemented our approach in a tool called Duet and evaluate it on SyGuS benchmark problems from various domains. We show that Duet achieves significant performance gains over existing general-purpose as well as domain-specific synthesizers.
C1 [Lee, Woosuk] Hanyang Univ, Coll Comp, Seoul, South Korea.
C3 Hanyang University
RP Lee, W (corresponding author), Hanyang Univ, Coll Comp, Seoul, South Korea.
EM woosuk@hanyang.ac.kr
RI Lee, Woosuk/ITV-2754-2023
FU National Research Foundation of Korea (NRF) - Korea government (MSIT)
   [2020R1C1C1014518]; Hanyang University [HY-2020-2474]
FX We thank the reviewers for insightful comments. We are also grateful to
   Hangyeol Cho for his help in conducting the experiments. This research
   was supported by the National Research Foundation of Korea (NRF) grant
   funded by the Korea government (MSIT) (2020R1C1C1014518) and the
   research fund of Hanyang University (HY-2020-2474).
CR Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 2020, SYGUS COMPETITION
   Barrett Clark, 2010, P 8 INT WORKSH SAT M
   Caulfield Benjamin, 2015, ARXIV151008393CSLO
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Durbin R., 1998, BIOL SEQUENCE ANAL P, DOI [10.1017/CBO9780511790492, DOI 10.1017/CBO9780511790492, 10.1017/cbo9780511790492]
   Eldib H, 2016, LECT NOTES COMPUT SC, V9780, P343, DOI 10.1007/978-3-319-41540-6_19
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Frankle Jonathan, 2016, P 43 ANN ACM SIGPLAN
   Gulwani S., 2016, Verification and Synthesis of Correct and Secure Systems
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gulwani S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P50
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Hu QHP, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1128, DOI 10.1145/3385412.3385979
   Huang KJ, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1159, DOI 10.1145/3385412.3386027
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Kini D, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P776
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Lee D, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P503, DOI 10.1145/3385412.3385996
   Lee M, 2017, ACM SIGPLAN NOTICES, V52, P70, DOI [10.1145/3093335.2993244, 10.1145/2993236.2993244]
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   Mechtaev S, 2016, PROC INT CONF SOFTW, P691, DOI 10.1145/2884781.2884807
   NEEDLEMAN SB, 1970, J MOL BIOL, V48, P443, DOI 10.1016/0022-2836(70)90057-4
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Phothilimthana PM, 2016, ACM SIGPLAN NOTICES, V51, P297, DOI 10.1145/2954679.2872387
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Raza M, 2020, SIGMOD'20: PROCEEDINGS OF THE 2020 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1967, DOI 10.1145/3318464.3380608
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   So S, 2017, LECT NOTES COMPUT SC, V10422, P364, DOI 10.1007/978-3-319-66706-5_18
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Udupa Abhishek, 2013, P 34 ACM SIGPLAN C P
   Wang X., 2017, P ACM PROGRAM LANG, DOI [10.1145/3158151, DOI 10.1145/3158151]
NR 36
TC 16
Z9 17
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 54
DI 10.1145/3434335
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100054
OA gold
DA 2024-07-18
ER

PT J
AU Willsey, M
   Nandi, C
   Wang, YR
   Flatt, O
   Tatlock, Z
   Panchekha, P
AF Willsey, Max
   Nandi, Chandrakana
   Wang, Yisu Remy
   Flatt, Oliver
   Tatlock, Zachary
   Panchekha, Pavel
TI egg: Fast and Extensible Equality Saturation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE e-graphs; equality saturation
AB An e-graph efficiently represents a congruence relation over many expressions. Although they were originally developed in the late 1970s for use in automated theorem provers, a more recent technique known as equality saturation repurposes e-graphs to implement state-of-the-art, rewrite-driven compiler optimizations and program synthesizers. However, e-graphs remain unspecialized for this newer use case. Equality saturation workloads exhibit distinct characteristics and often require ad hoc e-graph extensions to incorporate transformations beyond purely syntactic rewrites.
   This work contributes two techniques that make e-graphs fast and extensible, specializing them to equality saturation. A new amortized invariant restoration technique called rebuilding takes advantage of equality saturation's distinct workload, providing asymptotic speedups over current techniques in practice. A general mechanism called e-class analyses integrates domain-specific analyses into the e-graph, reducing the need for ad hoc manipulation.
   We implemented these techniques in a new open-source library called egg. Our case studies on three previously published applications of equality saturation highlight how egg's performance and flexibility enable state-of-the-art results across diverse domains.
C1 [Willsey, Max; Nandi, Chandrakana; Wang, Yisu Remy; Tatlock, Zachary] Univ Washington, Seattle, WA 98195 USA.
   [Flatt, Oliver; Panchekha, Pavel] Univ Utah, Salt Lake City, UT USA.
C3 University of Washington; University of Washington Seattle; Utah System
   of Higher Education; University of Utah
RP Willsey, M (corresponding author), Univ Washington, Seattle, WA 98195 USA.
OI Willsey, Max/0000-0001-8066-4218; Tatlock, Zachary/0000-0002-4731-0124
FU Applications Driving Architectures (ADA) Research Center - SRC; DARPA;
   National Science Foundation [1813166, 1749570]; Division of Computing
   and Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1813166, 1749570] Funding Source: National Science Foundation
FX Thanks to our anonymous paper and artifact reviewers for their feedback.
   Special thanks to our shepherd Simon Peyton Jones, Leonardo de Moura,
   and many members of the PLSE group. This work was supported in part by
   the Applications Driving Architectures (ADA) Research Center, a JUMP
   Center co-sponsored by SRC and DARPA, as well as the National Science
   Foundation under Grant Nos. 1813166 and 1749570.
CR Andries M, 1999, SCI COMPUT PROGRAM, V34, P1, DOI 10.1016/S0167-6423(98)00023-9
   Boehm Matthias, 2019, ENCY BIG DATA TECHNO, P81, DOI [10.1007/978-3-319-77525-8_187, DOI 10.1007/978-3-319-77525-8_187]
   Boyle JM, 1997, MODERN SOFTWARE TOOLS FOR SCIENTIFIC COMPUTING, P353
   DAVIS M, 1960, J ACM, V7, P201, DOI 10.1145/321033.321034
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Moura L, 2007, LECT NOTES ARTIF INT, V4603, P183
   Dershowitz Nachum, 1990, Handbook of Theoretical Computer Science, Volume B: Formal Models and Semantics, P243, DOI 10.1016/b978-0-444-88074-1.50011-1
   Dershowitz Nachum, 1993, TASTE REWRITE SYSTEM, P199, DOI DOI 10.1007/3-540-56883-2_11
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   DOWNEY PJ, 1980, J ACM, V27, P758, DOI 10.1145/322217.322228
   Du T, 2018, ACM T GRAPHIC, V37, DOI 10.1145/3272127.3275006
   Ellis Kevin., 2018, NEURAL INFORM PROCES
   Jia ZH, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P47, DOI 10.1145/3341301.3359630
   Joshi R, 2002, ACM SIGPLAN NOTICES, V37, P304, DOI 10.1145/543552.512566
   Kozen Dexter, 1977, P 9 ANN ACM S THEOR, P164, DOI DOI 10.1145/800105.803406
   Massalin H., 1987, Proceedings of the Second International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS II) (Cat. No.87CH2440-6), P122
   Nandi C, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236794
   Nandi C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P31, DOI 10.1145/3385412.3386012
   Nelson Charles Gregory, 1980, AAI8011683
   NELSON G, 1980, J ACM, V27, P356, DOI 10.1145/322186.322198
   Nieuwenhuis R, 2005, LECT NOTES COMPUT SC, V3467, P453
   Panchekha P, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI 10.1145/2737924.2737959
   Premtoon V, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1066, DOI 10.1145/3385412.3386001
   Rust, RUST PROGRAMMING LAN
   Sharma G., 2017, CoRR
   Stepp Michael, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P737, DOI 10.1007/978-3-642-22110-1_59
   TARJAN RE, 1975, J ACM, V22, P215, DOI 10.1145/321879.321884
   Tate R, 2009, ACM SIGPLAN NOTICES, V44, P264, DOI 10.1145/1594834.1480915
   Tian Yonglong., 2019, INT C LEARNI REPR
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   Visser Eelco, 1998, ACM INT C FUNCT PROG, DOI DOI 10.1145/289423.289425
   Wang Yisu Remy, 2020, PROC VLDB ENDOW
   Wu CM, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3355089.3356518
NR 33
TC 53
Z9 61
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 23
DI 10.1145/3434304
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100023
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Ballantyne, M
   King, A
   Felleisen, M
AF Ballantyne, Michael
   King, Alexis
   Felleisen, Matthias
TI Macros for Domain-Specific Languages
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE macros; hygiene; extensible domain specific languages
AB Macros provide a powerful means of extending languages. They have proven useful in both general-purpose and domain-specific programming contexts. This paper presents an architecture for implementing macro-extensible DSLs on top of macro-extensible host languages. The macro expanders of these DSLs inherit the syntax system, hygienic expansion, and more from the host. They transform the extensible DSL syntax into a DSL core language. This arrangement has several important consequences. It becomes straightforward to integrate the syntax of various DSLs and the host language when their expanders share these inherited components. Also, a DSL compiler may be designed around a fixed core language, even for an extensible DSL. Finally, macros empower programmers to safely grow DSLs on their own and tailor them to their needs.
C1 [Ballantyne, Michael; Felleisen, Matthias] Northeastern Univ, PLT, Boston, MA 02115 USA.
   [King, Alexis] Northeastern Univ, Boston, MA 02115 USA.
C3 Northeastern University; Northeastern University
RP Ballantyne, M (corresponding author), Northeastern Univ, PLT, Boston, MA 02115 USA.
EM mballantyne@ccs.neu.edu; lexi.lambda@gmail.com; matthias@ccs.neu.edu
FU National Science Foundation [1823244, 20050550]; Direct For Computer &
   Info Scie & Enginr; Division Of Computer and Network Systems [1823244]
   Funding Source: National Science Foundation
FX William Hatch worked with us to adapt Rash to use a DSL expander. We
   thank Leif Andersen, William Byrd, Stephen Chang, Olek Gierczak,
   Benjamin Greenman, William Hatch, Jason Hemann, Benjamin Lerner, and the
   anonymous reviewers for their helpful comments on early drafts. This
   material is partially based upon work supported by the National Science
   Foundation under Grant No. 1823244 and 20050550.
CR Andersen L, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110274
   [Anonymous], 1991, POPL 91, DOI DOI 10.1145/99583.99607
   [Anonymous], 2004, TR2004854 NEW YORK U
   [Anonymous], 1993, LISP SYMBOLIC COMPUT
   AUGUSTSSON L, 1985, LECT NOTES COMPUT SC, V201, P368
   Byrd WE, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110252
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Chang S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371071
   Chang Stephen, P PRINC PROGR LANG P, DOI [10.1145/3009837.3009886, DOI 10.1145/3009837.3009886]
   Cheatham Thomas E., 1969, ACM SIGPLAN NOTICES, V4, P45, DOI [10.1145/1115858.1115869, DOI 10.1145/1115858.1115869]
   Culpepper R, 2012, J FUNCT PROGRAM, V22, P439, DOI 10.1017/S0956796812000275
   Erdweg S, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P391
   Felleisen M, 2018, COMMUN ACM, V61, P62, DOI 10.1145/3127323
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   Firth Jack, 2015, 5 RACKETCON
   Fisher D, 2008, J FUNCT PROGRAM, V18, P707, DOI 10.1017/S0956796808006928
   Flatt M, 2002, ACM SIGPLAN NOTICES, V37, P72, DOI 10.1145/583852.581486
   Flatt M, 2016, ACM SIGPLAN NOTICES, V51, P705, DOI 10.1145/2914770.2837620
   Flatt M, 2012, J FUNCT PROGRAM, V22, P181, DOI 10.1017/S0956796812000093
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Friedman D.P., 2018, The Reasoned Schemer, VSecond
   Gibbons J, 2014, ACM SIGPLAN NOTICES, V49, P339, DOI 10.1145/2628136.2628138
   Gill A, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P117
   Hatch WG, 2018, PROCEEDINGS OF THE 17TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'18), P28, DOI 10.1145/3278122.3278129
   Hilsdale Erik, 2000, P WORKSH SCH FUNCT P, P53
   Hudak P., 1996, ACM COMPUT SURV, V28, P196, DOI [10.1145/242224.242477, DOI 10.1145/242224.242477]
   Kaminski T, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3138224
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Knuth D. E., TEX METAFONT NEW DIR
   Kohlbecker Eugene., 1986, P 1986 ACM C LISP FU, P151
   Krishnamurthi Shriram, 2001, Ph. D. Dissertation
   Le Fessant F, 2001, ACM SIGPLAN NOTICES, V36, P26, DOI 10.1145/507669.507641
   Mainland GB, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P73
   Maranget Luc, 2008, P 2008 ACM SIGPLAN W, p35S46, DOI DOI 10.1145/1411304.1411311
   McCarthy J, 1965, LISP 1.5 Programmer's Manual
   McCarthy JA, 2010, ACM SIGPLAN NOTICES, V45, P567, DOI 10.1145/1932682.1869506
   Meunier Philippe., 2003, P 4 WORKSHOP SCHEME, P24
   Neron P, 2015, LECT NOTES COMPUT SC, V9032, P205, DOI 10.1007/978-3-662-46669-8_9
   Politz Joe Gibbs, 2013, P 2013 ACM SIGPLAN I, P217, DOI DOI 10.1145/2509136.2509536
   Rafkind Jon, 2012, P GEN PROGR CONC EXP, DOI [10.1145/2371401.2371420, DOI 10.1145/2371401.2371420]
   Ramos Pedro Palma, 2014, P S LANG APPL TECHN, P127, DOI [10.4230/OASIcs.SLATE.2014.127, DOI 10.4230/OASICS.SLATE.2014.127]
   Shivers O, 2005, ACM SIGPLAN NOTICES, V40, P2, DOI 10.1145/1090189.1086368
   SystemVerilog Language Working Group, 2005, 18002005 IEEE, p1S648, DOI [10.1109/IEEESTD.2005.97972, DOI 10.1109/IEEESTD.2005.97972]
   Thiemann P., 2008, PPDP 08 P 10 INT ACM, DOI [10.1145/1389449.1389465, DOI 10.1145/1389449.1389465]
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tobin-Hochstadt S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P132
   Tobin-Hochstadt Sam, 2011, ARXIV11062578V1
   van Antwerpen H, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276484
   van Antwerpen H, 2016, PEPM'16: PROCEEDINGS OF THE 2016 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P49, DOI 10.1145/2847538.2847543
   Van Wyk E, 2008, ELECTRON NOTES THEOR, V203, P103, DOI 10.1016/j.entcs.2008.03.047
   Volter M, 2011, INT SUMMER SCH GENER, V7680, P383
   WARD MP, 1994, SOFTWARE-CONC TOOL, V15, P147
   Wielemaker J, 2012, THEOR PRACT LOG PROG, V12, P67, DOI 10.1017/S1471068411000494
NR 53
TC 5
Z9 5
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 229
DI 10.1145/3428297
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900106
OA gold
DA 2024-07-18
ER

PT J
AU Campora, JP
   Chen, S
AF Campora, John Peter
   Chen, Sheng
TI Taming Type Annotations in Gradual Typing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE gradual typing; case errors; variational Types
ID INFERENCE
AB Gradual typing provides a methodology to integrate static and dynamic typing, harmonizing their often conflicting advantages in a single language. When a user wants to enjoy the advantages of static typing, most gradual languages require that they add type annotations. Many nontrivial tasks must be undertaken while adding type annotations, including understanding program behaviors and invariants. Unfortunately, if this is done incorrectly then the added type annotations can be wrong leading to inconsistencies between the program and the type annotations. Gradual typing implementations detect such inconsistencies at runtime, raise cast errors, and generate messages. However, solely relying on such error messages for understanding and fixing inconsistencies and their resulting cast errors is often insufficient for multiple reasons. One reason is that while such messages cover inconsistencies in one execution path, fixing them often requires reconciling information from multiple paths. Another is that users may add many wrong type annotations that they later find difficult to identify and fix, when considering all added annotations.
   Recent studies provide evidence that type annotations added during program migration are often wrong and that many programmers prefer compile-time warnings about wrong annotations. Motivated by these results, we develop exploratory typing to help with the static detection, understanding, and fixing of inconsistencies. The key idea of exploratory typing is that it systematically removes dynamic types and explores alternative types for static type annotations that can remedy inconsistencies. To demonstrate the feasibility of exploratory typing, we have implemented it in PYHOUND, which targets programs written in Reticulated Python, a gradual variant of Python. We have evaluated PYHOUND on a set of Python programs, and the evaluation results demonstrate that our idea can effectively detect inconsistencies in 98% of the tested programs and fix 93% of inconsistencies, significantly outperforming pytype, a widely used Python tool for enforcing type annotations.
C1 [Campora, John Peter; Chen, Sheng] Univ Louisiana Lafayette, CACS, Lafayette, LA 70504 USA.
C3 University of Louisiana Lafayette
RP Campora, JP (corresponding author), Univ Louisiana Lafayette, CACS, Lafayette, LA 70504 USA.
EM campora@louisiana.edu; chen@louisiana.edu
CR ABADI M, 1991, ACM T PROGR LANG SYS, V13, P237, DOI 10.1145/103135.103138
   Ahmed A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110283
   Ahmed A, 2011, ACM SIGPLAN NOTICES, V46, P201, DOI 10.1145/1925844.1926409
   Aiken Alexander., 1991, POPL 91, P279, DOI DOI 10.1145/99583.99621
   [Anonymous], 2004, INT WORKSH IMPL FUNC
   Bader J, 2018, LECT NOTES COMPUT SC, V10747, P25, DOI 10.1007/978-3-319-73721-8_2
   Schwerter FB, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283, DOI 10.1145/2628136.2628149
   Campora John, 2018, P 45 ACM SIGPLAN S P
   Campora John Peter, 2018, P ACM PROGR LANG, DOI [10.1145/3236793, DOI 10.1145/3236793]
   CARTWRIGHT R, 1991, SIGPLAN NOTICES, V26, P278, DOI 10.1145/113446.113469
   Castagna G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110285
   Chaudhuri A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133872
   Chen S, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2518190
   Chen S, 2012, ACM SIGPLAN NOTICES, V47, P29, DOI 10.1145/2398856.2364535
   Disney T., 2011, INT WORKSH SCRIPTS P
   Evans Oli, 2018, ASCIIFY
   Feldthaus A, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2660193.2660215
   Fennell L, 2013, P IEEE CSFW, P224, DOI 10.1109/CSF.2013.22
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia R, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2676726.2676992, 10.1145/2775051.2676992]
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Igarashi A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110282
   Igarashi Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110284
   Ina L, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P609
   Jafery KA, 2017, ACM SIGPLAN NOTICES, V52, P804, DOI 10.1145/3093333.3009865
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Kent AM, 2016, ACM SIGPLAN NOTICES, V51, P296, DOI [10.1145/2980983.2908091, 10.1145/2908080.2908091]
   Knowles K, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667051
   Kristensen EK, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133914
   Kristensen EK, 2017, LECT NOTES COMPUT SC, V10202, P99, DOI 10.1007/978-3-662-54494-5_6
   Lehmann N, 2017, ACM SIGPLAN NOTICES, V52, P775, DOI 10.1145/3093333.3009856
   Nguyen PC, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P139, DOI 10.1145/2628136.2628156
   Ningning Xie, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P3, DOI 10.1007/978-3-319-89884-1_1
   Schwerter FB, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000162
   Sergey I, 2012, LECT NOTES COMPUT SC, V7211, P579, DOI 10.1007/978-3-642-28869-2_29
   Siek J.G., 2008, Proceedings of the 2008 symposium on Dynamic languages, P7, DOI DOI 10.1145/1408681.1408688
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy, MONOTONIC REFERENCES, DOI [10.1007/978-3-662-46669-8_18, DOI 10.1007/978-3-662-46669-8_18]
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   St-Amour V, 2013, ACM SIGPLAN NOTICES, V48, P351, DOI [10.1145/2544174.2500616, 10.1145/2500365.2500616]
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   THATTE S, 1988, LECT NOTES COMPUT SC, V317, P615
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Tobin-Hochstadt Sam, 2017, SNAPL, V17, P1, DOI [DOI 10.4230/LIPICS.SNAPL.2017.17, 10.4230/LIPIcs.SNAPL.2017.17]
   Toro M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290330
   Toro Matias, 2017, SAS
   Vitousek MM, 2017, ACM SIGPLAN NOTICES, V52, P762, DOI 10.1145/3093333.3009849
   Vitousek MM, 2015, ACM SIGPLAN NOTICES, V50, P45, DOI 10.1145/2661088.2661101
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Williams Jack., 2017, EUROPEAN C OBJECT OR, DOI DOI 10.4230/LIPICS.ECOOP.2017.28
   Wilson PT, 2018, DLS'18: PROCEEDINGS OF THE 14TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES, P1, DOI 10.1145/3276945.3276947
   Wolff R, 2011, LECT NOTES COMPUT SC, V6813, P459, DOI 10.1007/978-3-642-22655-7_22
   Wu BJ, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133929
NR 57
TC 5
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 191
DI 10.1145/3428259
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900068
OA gold
DA 2024-07-18
ER

PT J
AU Geisler, D
   Yoon, I
   Kabra, A
   He, H
   Sanders, Y
   Sampson, A
AF Geisler, Dietrich
   Yoon, Irene
   Kabra, Aditi
   He, Horace
   Sanders, Yinnon
   Sampson, Adrian
TI Geometry Types for Graphics Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE computer graphics; language design; type systems; geometry
AB In domains that deal with physical space and geometry, programmers need to track the coordinate systems that underpin a computation. We identify a class of geometry bugs that arise from confusing which coordinate system a vector belongs to. These bugs are not ruled out by current languages for vector-oriented computing, are difficult to check for at run time, and can generate subtly incorrect output that can be hard to test for.
   We introduce a type system and language that prevents geometry bugs by reflecting the coordinate system for each geometric object. A value's geometry type encodes its reference frame, the kind of geometric object (such as a point or a direction), and the coordinate representation (such as Cartesian or spherical coordinates). We show how these types can rule out geometrically incorrect operations, and we show how to use them to automatically generate correct-by-construction code to transform vectors between coordinate systems. We implement a language for graphics programming, Gator, that checks geometry types and compiles to OpenGL's shading language, GLSL. Using case studies, we demonstrate that Gator can raise the level of abstraction for shader programming and prevent common errors without inducing significant annotation overhead or performance cost.
C1 [Geisler, Dietrich; He, Horace; Sanders, Yinnon; Sampson, Adrian] Cornell Univ, Ithaca, NY 14853 USA.
   [Yoon, Irene] Univ Penn, Philadelphia, PA 19104 USA.
   [Kabra, Aditi] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Cornell University; University of Pennsylvania; Carnegie Mellon
   University
RP Geisler, D (corresponding author), Cornell Univ, Ithaca, NY 14853 USA.
EM dag368@cornell.edu; ey222@cornell.edu; akabra@cs.cmu.edu;
   hh498@cornell.edu; yys4@cornell.edu; asampson@cs.cornell.edu
OI Sampson, Adrian/0000-0003-0837-8924
FU Center for Applications Driving Architectures, one of six centers of
   JUMP, a Semiconductor Research Corporation program - DARPA; NSF
   [1845952]; Division of Computing and Communication Foundations; Direct
   For Computer & Info Scie & Enginr [1845952] Funding Source: National
   Science Foundation
FX Thank you to Eric Campbell, Jonathan DiLorenzo, Ryan Doenges, Andrew
   Hirsch, Steve Marschner, Andrew Myers, Rachit Nigam, Rolph Recto, Eston
   Schweickart, Isaac Sheff, Steffen Smolka, and Alexa VanHattum for
   reading drafts of our paper and providing valuable feedback. Thank you
   to Henry Liu and Ben Gillott for providing work on the examples and
   compiler presented in this paper. This work was supported in part by the
   Center for Applications Driving Architectures (ADA), one of six centers
   of JUMP, a Semiconductor Research Corporation program co-sponsored by
   DARPA. Support also included NSF award #1845952.
CR Blau Taylor, 2018, P ACM PROGR LANG, V2, P1, DOI DOI 10.1145/3236794
   Foley Tim, 2011, SIGGRAPH
   Foster J. S., 1999, SIGPLAN Notices, V34, P192, DOI 10.1145/301631.301665
   Fremont Daniel J., 2019, ACM C PROGR LANG DES
   Hanrahan Pat, 1990, SIGGRAPH
   He Y, 2016, ACM T GRAPHIC, V35, DOI 10.1145/2897824.2925923
   Jackson D, 2015, WEBGL SPECIFICATION
   Kabra Aditi, 2020, WORKSH TOOLS AUT PRO
   Kennedy A., 1994, Programming Languages and Systems - ESOP '94. 5th European Symposium on Programming. Proceedings, P348
   Kennedy A. J., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P442, DOI 10.1145/263699.263761
   Microsoft, 2008, DIRECT3D
   Ou Jiawei, 2010, EUR C REND EGSR
   PHONG BT, 1975, COMMUN ACM, V18, P311, DOI 10.1145/360825.360839
   Sampson Adrian, 2017, ACM C OBJ OR PROGR S
   Sampson Adrian, 2017, SUMMIT ADV PROGRAMMI
   Schuirmann Donald J., 2005, J PHARMACOKINET BIOP, V15, p657s680
   Segal Mark, 2017, OPENGL 4 5 GRAPHICS
   Sylvan Sebastian, 2017, NAMING CONVENTION MA
   The Khronos Group Inc, OPENGL SHADING LANGU, V1.0
NR 19
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 173
DI 10.1145/3428241
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900050
OA gold
DA 2024-07-18
ER

PT J
AU Kabir, I
   Li, YF
   Lhoták, O
AF Kabir, Ifaz
   Li, Yufeng
   Lhotak, Ondrej
TI ιDOT: A DOT Calculus with Object Initialization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type safety; dependent objects; DOT; Scala; initialization
AB The Dependent Object Types (DOT) calculus serves as a foundation of the Scala programming language, with a machine-verified soundness proof However, Scala's type system has been shown to be unsound due to null references, which are used as default values of fields of objects before they have been initialized. This paper proposes iota DOT, an extension of DOT for ensuring safe initialization of objects. DOT was previously extended to kappa DOT with the addition of mutable fields and constructors. To kappa DOT, iota DOT adds an initialization effect system that statically prevents the possibility of reading a null reference from an uninitialized object. To design iota DOT, we have reformulated the Freedom Before Commitment object initialization scheme in terms of disjoint subheaps to make it easier to formalize in an effect system and prove sound. Soundness of iota DOT depends on the interplay of three systems of rules: a type system close to that of DOT, an effect system to ensure definite assignment of fields in each constructor, and an initialization system that tracks the initialization status of objects in a stack of subheaps. We have proven the overall system sound and verified the soundness proof using the Coq proof assistant.
C1 [Kabir, Ifaz] Univ Alberta, Edmonton, AB, Canada.
   [Li, Yufeng; Lhotak, Ondrej] Univ Waterloo, Waterloo, ON, Canada.
C3 University of Alberta; University of Waterloo
RP Kabir, I (corresponding author), Univ Alberta, Edmonton, AB, Canada.
EM ikabir@ualberta.ca; yufeng.li@uwaterloo.ca; olhotak@uwaterloo.ca
RI guo, ppdop/KAL-9865-2024
FU Natural Sciences and Engineering Research Council of Canada
FX This research was supported by the Natural Sciences and Engineering
   Research Council of Canada. There were many helpful discussions with
   many people while working on iota DOT.
CR Amin N, 2016, ACM SIGPLAN NOTICES, V51, P838, DOI 10.1145/3022671.2984004
   Amin N, 2014, ACM SIGPLAN NOTICES, V49, P233, DOI [10.1145/2660193.2660216, 10.1145/2714064.2660216]
   Amin Nada, 2016, Lecture Notes in Computer Science, V9600, P249, DOI [10.1007/978-3-319-30936-, DOI 10.1007/978-3-319-30936, 10.1007/978-3-319-3 0936-1\\_14, DOI 10.1007/978-3-319-30936-1]
   FAHNDRICH M, 2007, P 22 ANN ACM SIGPLAN, P337
   Haack Christian, 2009, P LECT NOTES COMPUTE, V5653, DOI [10.1007/978-3-642-03013-0_24, DOI 10.1007/978-3-642-03013-0_24]
   Kabir I, 2018, PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA (SCALA '18), P40, DOI 10.1145/3241653.3241659
   Kabir Ifaz, 2020, CS202006 U WAT
   Odersky Martin., 2006, An overview of the Scala programming language, V2nd
   Qi X, 2009, ACM SIGPLAN NOTICES, V44, P53, DOI 10.1145/1594834.1480890
   Rapoport M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133870
   Rapoport M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360571
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Servetto M, 2013, LECT NOTES COMPUT SC, V7920, P205, DOI 10.1007/978-3-642-39038-8_9
   Sestoft P., 1997, Journal of Functional Programming, V7, P231, DOI 10.1017/S0956796897002712
   Summers Alexander J., 2011, P 26 ANN ACM SIGPLAN, P1013, DOI [10.1145/2048066.2048142, DOI 10.1145/2048066.2048142]
   Summers Alexander J., 2011, 716 ETH ZUR
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 17
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 208
DI 10.1145/3428276
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900085
OA gold
DA 2024-07-18
ER

PT J
AU Chambers, JM
AF Chambers, John M.
TI S, R, and Data Science
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE data science; statistical computing; scientific computing
ID FUTURE
AB Data science is increasingly important and challenging. It requires computational tools and programming environments that handle big data and difficult computations, while supporting creative, high-quality analysis. The R language and related software play a major role in computing for data science. R is featured in most programs for training in the field. R packages provide tools for a wide range of purposes and users. The description of a new technique, particularly from research in statistics, is frequently accompanied by an R package, greatly increasing the usefulness of the description.
   The history of R makes clear its connection to data science. R was consciously designed to replicate in open-source software the contents of the S software. S in turn was written by data analysis researchers at Bell Labs as part of the computing environment for research in data analysis and collaborations to apply that research, rather than as a separate project to create a programming language. The features of S and the design decisions made for it need to be understood in this broader context of supporting effective data analysis (which would now be called data science). These characteristics were all transferred to R and remain central to its effectiveness. Thus, R can be viewed as based historically on a domain-specific language for the domain of data science.
C1 [Chambers, John M.] Stanford Univ, Stat Dept, 390 Serra Mall, Stanford, CA 94305 USA.
C3 Stanford University
RP Chambers, JM (corresponding author), Stanford Univ, Stat Dept, 390 Serra Mall, Stanford, CA 94305 USA.
EM jmc@stat.stanford.edu
CR Abelson H., 1983, STRUCTURE INTERPRETA
   ACM, 1998, ACM SOFTW SYST AW
   [Anonymous], 1965, Proceedings of the November 30-December 1, 1965, fall joint computer conference, part I, AFIPS '65 Fall, part I
   Becker R. A, 1988, NEW S LANGUAGE
   Becker RA, 1984, S: An Interactive Environment for Data Analysis and Graphics
   BECKER RA, 1985, EXTENDING S SYSTEM
   Becker Richard A., 1976, P 9 INT S COMP SCI S
   Chambers J.M., 1998, PROGRAMMING DATA GUI
   Chambers JM, 2016, R SERIES, P1
   Donoho D, 2017, J COMPUT GRAPH STAT, V26, P745, DOI 10.1080/10618600.2017.1384734
   Eddelbuettel D, 2011, J STAT SOFTW, V40, P1
   FREENY AE, 1969, AT&T TECH J, V48, P1789, DOI 10.1002/j.1538-7305.1969.tb01152.x
   Gertner Jon., 2013, The Idea Factory: Bell Labs and the Great Age of American Innovation
   Ihaka R, 1998, COMP SCI STAT, V30, P392
   Ihaka R., 1996, J COMPUTATIONAL GRAP, V5, P299, DOI [DOI 10.1080/10618600.1996.10474713, 10.2307/1390807, DOI 10.2307/1390807]
   Jaeckel Louis, 1974, EXPLORING DATA ANAL
   JOHNSON SC, 1978, AT&T TECH J, V57, P2021, DOI 10.1002/j.1538-7305.1978.tb02141.x
   Kaplan Daniel, 2015, DATA SCI, P45
   Lang Duncan Temple, 1997, THESIS U CALIFORNIA
   RITCHIE DM, 1984, AT&T TECH J, V63, P1577, DOI 10.1002/j.1538-7305.1984.tb00054.x
   Thieme N., 2018, SIGNIFICANCE, V15, P14, DOI [10.1111/j.1740-9713.2018.01169.x, DOI 10.1111/J.1740-9713.2018.01169.X]
   Tukey J.W., 1977, EXPLORATORY DATA ANA, V2
   TUKEY JW, 1962, ANN MATH STAT, V33, P1, DOI 10.1214/aoms/1177704711
   Wadsworth S., 1992, Statistical Models
   Wickham H, 2016, Tidyverse
   WILK MB, 1968, BIOMETRIKA, V55, P1
NR 26
TC 7
Z9 8
U1 1
U2 11
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 84
DI 10.1145/3386334
PG 17
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900019
OA gold
DA 2024-07-18
ER

PT J
AU Hark, M
   Kaminski, BL
   Giesl, J
   Katoen, JP
AF Hark, Marcel
   Kaminski, Benjamin Lucien
   Giesl, Juergen
   Katoen, Joost-Pieter
TI Aiming Low Is Harder Induction for Lower Bounds in Probabilistic Program
   Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programs; verification; weakest precondition; weakest
   preexpectation; lower bounds; optional stopping theorem; uniform
   integrability
ID PRINCIPLE
AB We present a new inductive rule for verifying lower bounds on expected values of random variables after execution of probabilistic loops as well as on their expected runtimes. Our rule is simple in the sense that loop body semantics need to be applied only finitely often in order to verify that the candidates are indeed lower bounds. In particular, it is not necessary to find the limit of a sequence as in many previous rules.
C1 [Hark, Marcel; Kaminski, Benjamin Lucien; Giesl, Juergen; Katoen, Joost-Pieter] Rhein Westfal TH Aachen, Aachen, Germany.
C3 RWTH Aachen University
RP Hark, M (corresponding author), Rhein Westfal TH Aachen, Aachen, Germany.
EM marcel.hark@cs.rwth-aachen.de; benjamin.kaminski@cs.rwth-aachen.de;
   giesl@cs.rwth-aachen.de; katoen@cs.rwth-aachen.de
RI Katoen, Joost-Pieter/O-3307-2018
OI Hark, Marcel/0000-0001-5111-3177; Kaminski, Benjamin
   Lucien/0000-0001-5185-2324; Giesl, Jurgen/0000-0003-0283-8520
FU German Research Council (DFG) Research Training Group 2236 UnRAVeL; ERC
   Advanced Grant [787914]; European Research Council (ERC) [787914]
   Funding Source: European Research Council (ERC)
FX The authors gratefully acknowledge the support of the German Research
   Council (DFG) Research Training Group 2236 UnRAVeL and ERC Advanced
   Grant 787914 FRAPPANT. Furthermore, we would like to thank Florian Frohn
   and Christoph Matheja for many fruitful discussions on examples and
   counterexamples.
CR Agrawal S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158122
   Audebaud P, 2009, SCI COMPUT PROGRAM, V74, P568, DOI 10.1016/j.scico.2007.09.002
   Back R.-J., 1998, Refinement Calculus
   BARANGA A, 1991, DISCRETE MATH, V98, P75, DOI 10.1016/0012-365X(91)90413-V
   Barthe G, 2016, LECT NOTES COMPUT SC, V9779, P43, DOI 10.1007/978-3-319-41528-4_3
   Batz K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290347
   Batz Kevin, 2018, LECT NOTES COMPUTER, V10801, P186
   Bauer Heinz, 1971, PROBABILITY THEORY E, Vfirst
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chakarov A, 2014, LECT NOTES COMPUT SC, V8723, P85, DOI 10.1007/978-3-319-10936-7_6
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chatterjee K, 2016, ACM SIGPLAN NOTICES, V51, P327, DOI 10.1145/2914770.2837639
   Chen YF, 2015, LECT NOTES COMPUT SC, V9206, P658, DOI 10.1007/978-3-319-21690-4_44
   Cock David, 2014, ARCH FORMAL PROOFS
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   FELLER W., 1971, An Introduction to Probability Theory and Its Applications, V2
   Feng YJ, 2017, LECT NOTES COMPUT SC, V10482, P400, DOI 10.1007/978-3-319-68167-2_26
   Fioriti LMF, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI 10.1145/2676726.2677001
   Frohn F, 2016, LECT NOTES ARTIF INT, V9706, P550, DOI 10.1007/978-3-319-40229-1_37
   Fu HF, 2019, LECT NOTES COMPUT SC, V11388, P468, DOI 10.1007/978-3-030-11245-5_22
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Grimmett G., 2001, Probability and random processes, V3rd edn
   Hark Marcel, 2019, CORRABS190401117
   Hehner ECR, 2011, FORM ASP COMPUT, V23, P391, DOI 10.1007/s00165-010-0157-0
   Hino W, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P682, DOI 10.1145/2933575.2935319
   Huang MZ, 2018, LECT NOTES COMPUT SC, V11275, P181, DOI 10.1007/978-3-030-02768-1_11
   Jachymski J, 2000, B AUST MATH SOC, V61, P247, DOI 10.1017/S0004972700022243
   Jansen N, 2016, LECT NOTES COMPUT SC, V9938, P68, DOI 10.1007/978-3-319-46520-3_5
   Jones C., 1990, PhD thesis
   Kaminski BL, 2019, ACTA INFORM, V56, P255, DOI 10.1007/s00236-018-0321-1
   Kaminski BL, 2018, J ACM, V65, DOI 10.1145/3208102
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   Kaminski Benjamin Lucien, 2017, 32 ANN ACMIEEE S LOG, P1
   Kaminski Benjamin Lucien, 2019, THESIS RWTH AACHEN U
   Katoen JP, 2010, LECT NOTES COMPUT SC, V6337, P390, DOI 10.1007/978-3-642-15769-1_24
   Keimel K, 2015, ELECTRON NOTES THEOR, V319, P255, DOI 10.1016/j.entcs.2015.12.016
   Kobayashi Naoki, 2018, CORRABS181102133
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Kozen Dexter, 1983, P ACM S THEORY COMPU, P291, DOI [10.1145/800061.808758, DOI 10.1145/800061.808758]
   LASSEZ JL, 1982, INFORM PROCESS LETT, V14, P112, DOI 10.1016/0020-0190(82)90065-5
   McIver AK, 2001, THEOR COMPUT SCI, V266, P513, DOI 10.1016/S0304-3975(00)00208-5
   McIver Annabelle., 2005, MG COMP SCI
   Monniaux D, 2005, SCI COMPUT PROGRAM, V58, P179, DOI 10.1016/j.scico.2005.02.008
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   Morgan C., 1996, P BCS FACS 7 REF WOR
   Morgan Carroll, 1999, LOG J IGPL, V7, P779
   Motwani Rajeev, 1995, RANDOMIZED ALGORITHM
   Olmedo F, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3156018
   Olmedo F, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P672, DOI 10.1145/2933575.2935317
   PARK D, 1969, MACH INTELL, V5
   POLYA G., 1930, Z ANGEW MATH MECH, V10, P96
   Ngo VC, 2018, ACM SIGPLAN NOTICES, V53, P496, DOI [10.1145/3192366.3192394, 10.1145/3296979.3192394]
   Vardi M. Y., 1985, 26th Annual Symposium on Foundations of Computer Science (Cat. No.85CH2224-4), P327, DOI 10.1109/SFCS.1985.12
   Wang PX, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P204, DOI 10.1145/3314221.3314581
NR 55
TC 14
Z9 14
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 37
DI 10.1145/3371105
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400038
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Saad, FA
   Freer, CE
   Rinard, MC
   Mansinghka, VK
AF Saad, Feras A.
   Freer, Cameron E.
   Rinard, Martin C.
   Mansinghka, Vikash K.
TI Optimal Approximate Sampling from Discrete Probability Distributions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE random variate generation; discrete random variables
ID RANDOM NUMBERS; INFORMATION; STATISTICS; ALGORITHM
AB This paper addresses a fundamental problem in random variate generation: given access to a random source that emits a stream of independent fair bits, what is the most accurate and entropy-efficient algorithm for sampling from a discrete probability distribution (p(1), . . . , p(n)), where the probabilities of the output distribution ((p) over cap (1), . . . , (p) over cap (n)) of the sampling algorithm must be specified using at most k bits of precision? We present a theoretical framework for formulating this problem and provide new techniques for finding sampling algorithms that are optimal both statistically (in the sense of sampling accuracy) and information-theoretically (in the sense of entropy consumption). We leverage these results to build a system that, for a broad family of measures of statistical accuracy, delivers a sampling algorithm whose expected entropy usage is minimal among those that induce the same distribution (i.e., is "entropy-optimal") and whose output distribution ((p) over cap (1), . . . , (p) over cap (n)) is a closest approximation to the target distribution (p(1), . . . , p(n)) among all entropy-optimal sampling algorithms that operate within the specified k-bit precision. This optimal approximate sampler is also a closer approximation than any (possibly entropy-suboptimal) sampler that consumes a bounded amount of entropy with the specified precision, a class which includes floating-point implementations of inversion sampling and related methods found in many software libraries. We evaluate the accuracy, entropy consumption, precision requirements, and wall-clock runtime of our optimal approximate sampling algorithms on a broad set of distributions, demonstrating the ways that they are superior to existing approximate samplers and establishing that they often consume significantly fewer resources than are needed by exact samplers.
C1 [Saad, Feras A.; Rinard, Martin C.] MIT, Dept Elect Engn & Comp Sci, Cambridge, MA 02139 USA.
   [Freer, Cameron E.; Mansinghka, Vikash K.] MIT, Dept Brain & Cognit Sci, E25-618, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT); Massachusetts Institute of
   Technology (MIT)
RP Saad, FA (corresponding author), MIT, Dept Elect Engn & Comp Sci, Cambridge, MA 02139 USA.
EM fsaad@mit.edu; freer@mit.edu; rinard@csail.mit.edu; vkm@mit.edu
CR Abrahams J, 1996, IEEE T INFORM THEORY, V42, P1541, DOI 10.1109/18.532895
   ALI SM, 1966, J ROY STAT SOC B, V28, P131
   [Anonymous], 1976, Algorithms and Complexity: New Directions and Recent Results
   [Anonymous], 2014, ARXIV14024914
   Bar-Yossef Z, 2004, J COMPUT SYST SCI, V68, P702, DOI 10.1016/j.jcss.2003.11.006
   Binder Kurt., 1986, Monte Carlo Methods in Statistical Physics, volume 7 of Topics in Current Physics, V7
   Blanca Antonio, 2012, ARXIV12045834
   Blum L., 1998, COMPLEXITY REAL COMP, DOI DOI 10.1007/978-1-4612-0701-6
   BLUM M, 1986, COMBINATORICA, V6, P97, DOI 10.1007/BF02579167
   Bringmann K, 2017, ALGORITHMICA, V79, P484, DOI 10.1007/s00453-016-0205-0
   Bringmann K, 2013, LECT NOTES COMPUT SC, V7965, P267, DOI 10.1007/978-3-642-39206-1_23
   Cicalese F, 2006, IEEE T INFORM THEORY, V52, P3772, DOI 10.1109/TIT.2006.878151
   Cover T. M., 1991, ELEMENTS INFORM THEO
   Cusumano-Towner MF, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P221, DOI 10.1145/3314221.3314642
   de Schryver C, 2012, INT J RECONFIGURABLE, V2012, DOI 10.1155/2012/675130
   DEVROYE L, 1982, J STAT COMPUT SIM, V14, P149, DOI 10.1080/00949658208810536
   Devroye L., 1986, Non-Uniform Random Variate Generation
   Dhillon I. S., 2003, Journal of Machine Learning Research, V3, P1265, DOI 10.1162/153244303322753661
   Djuric Dragan, 2019, BILLIONS RANDOM NUMB
   Du CH, 2015, I C FIELD PROG LOGIC
   Dwarakanath NC, 2014, APPL ALGEBR ENG COMM, V25, P159, DOI 10.1007/s00200-014-0218-3
   ELIAS P, 1972, ANN MATH STAT, V43, P865, DOI 10.1214/aoms/1177692552
   Follath Janos, 2014, Tatra Mountains Mathematical Publications, V60, P1, DOI 10.2478/tmmp-2014-0022
   Galassi M.C., 2019, GNU scientific library
   Glasserman P., 2003, MONTE CARLO METHODS
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Gravel, 2015, ARXIV150202539
   Han TS, 1997, IEEE T INFORM THEORY, V43, P599, DOI 10.1109/18.556116
   HAN TS, 1993, IEEE T INFORM THEORY, V39, P752, DOI 10.1109/18.256486
   HARLING J, 1958, OPER RES, V6, P307, DOI 10.1287/opre.6.3.307
   Jonas Eric, 2014, THESIS MIT
   Kozen D, 2018, LECT NOTES COMPUT SC, V11194, P298, DOI 10.1007/978-3-030-02149-8_18
   Kozen Dexter., 2014, HORIZONS MIND TRIBUT, V8464
   KULLBACK S, 1951, ANN MATH STAT, V22, P79, DOI 10.1214/aoms/1177729694
   Ladd AJC, 2009, COMPUT PHYS COMMUN, V180, P2140, DOI 10.1016/j.cpc.2009.06.019
   Lea D., 1992, User's Guide to the GNU C++ Library
   Leydold Josef, 2014, RVGTEST TOOLS ANAL N
   Liese F, 2006, IEEE T INFORM THEORY, V52, P4394, DOI 10.1109/TIT.2006.881731
   Liu J.S., 2001, Monte Carlo strategies in scientific computing
   Lumbroso Jermie, 2013, ARXIV13041916
   MONAHAN JF, 1985, MATH COMPUT, V45, P559, DOI 10.1090/S0025-5718-1985-0804945-X
   Nori AV, 2015, ACM SIGPLAN NOTICES, V50, P208, DOI [10.1145/2737924.2737982, 10.1145/2813885.2737982]
   Pae SI, 2006, IEEE T INFORM THEORY, V52, P4965, DOI 10.1109/TIT.2006.883555
   Pearson K, 1900, PHILOS MAG, V50, P157, DOI 10.1080/14786440009463897
   PERES Y, 1992, ANN STAT, V20, P590, DOI 10.1214/aos/1176348543
   R Core Team, 2018, R LANG ENV STAT COMP
   Roche James R., 1991, ISIT 1991 P IEEE INT
   Roy SS, 2014, LECT NOTES COMPUT SC, V8282, P383
   Saad Feras, 2016, ARXIV160805347
   Saad FA, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290350
   SHANNON CE, 1948, BELL SYST TECH J, V27, P379, DOI 10.1002/j.1538-7305.1948.tb01338.x
   Smith Warren D., 2002, 17 NEC RES
   Staton S, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P525, DOI 10.1145/2933575.2935313
   Steinberger J, 2012, 2012481 CRYPT EPRINT
   STOUT QF, 1984, ANN PROBAB, V12, P212, DOI 10.1214/aop/1176993384
   The MathWorks, 1993, STAT TOOLB US GUID
   Uyematsu T, 2003, IEICE T FUND ELECTR, VE86A, P2542
   VEMBU S, 1995, IEEE T INFORM THEORY, V41, P1322, DOI 10.1109/18.412679
   von Neumann J., 1951, NBS Applied Mathematics Series, V12, P36
   VOSE MD, 1991, IEEE T SOFTWARE ENG, V17, P972, DOI 10.1109/32.92917
   Walker A. J., 1977, ACM Transactions on Mathematical Software, V3, P253, DOI 10.1145/355744.355749
   WALKER AJ, 1974, ELECTRON LETT, V10, P127, DOI 10.1049/el:19740097
NR 62
TC 3
Z9 3
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 36
DI 10.1145/3371104
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400037
OA gold, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Keidel, S
   Erdweg, S
AF Keidel, Sven
   Erdweg, Sebastian
TI Sound and Reusable Components for Abstract Interpretation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Abstract Interpretation; Static Analysis; Soundness
AB interpretation is a methodology for defining sound static analysis. Yet, building sound static analyses for modern programming languages is difficult, because these static analyses need to combine sophisticated abstractions for values, environments, stores, etc. However, static analyses often tightly couple these abstractions in the implementation, which not only complicates the implementation, but also makes it hard to decide which parts of the analyses can be proven sound independently from each other. Furthermore, this coupling makes it hard to combine soundness lemmas for parts of the analysis to a soundness proof of the complete analysis.
   To solve this problem, we propose to construct static analyses modularly from reusable analysis components. Each analysis component encapsulates a single analysis concern and can be proven sound independently from the analysis where it is used. We base the design of our analysis components on arrow transformers, which allows us to compose analysis components. This composition preserves soundness, which guarantees that a static analysis is sound, if all its analysis components are sound. This means that analysis developers do not have to worry about soundness as long as they reuse sound analysis components. To evaluate our approach, we developed a library of 13 reusable analysis components in Haskell. We use these components to define a k-CFA analysis for PCF and an interval and reaching definition analysis for a While language.
C1 [Keidel, Sven; Erdweg, Sebastian] JGU Mainz, Mainz, Germany.
C3 Johannes Gutenberg University of Mainz
RP Keidel, S (corresponding author), JGU Mainz, Mainz, Germany.
OI Keidel, Sven/0000-0002-4278-2181
FU DFG grant "Evolute"
FX This research was supported by DFG grant "Evolute". We thank Arjen
   Rouvoet and Peter Mosses who provided helpful feedback.
CR [Anonymous], 1999, NATO ASI SERIES F
   COUSOT P, 1992, LECT NOTES COMPUT SC, V631, P269
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Darais D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110256
   Darais D, 2015, ACM SIGPLAN NOTICES, V50, P552, DOI [10.1145/2814270.2814308, 10.1145/2858965.2814308]
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Gibbons Jeremy., 2010, P 3 ACM SIGPLAN S HA
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   Hamana M, 2011, WGP 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P59
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Jourdan JH, 2015, ACM SIGPLAN NOTICES, V50, P247, DOI [10.1145/2775051.2676966, 10.1145/2676726.2676966]
   Knoop J, 1999, LECT NOTES COMPUT SC, V1710, P288
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Madsen Magnus, 2018, P 27 ACM SIGSOFT INT
   Meawad F, 2012, ACM SIGPLAN NOTICES, V47, P607, DOI 10.1145/2398857.2384660
   Nielson F., 1999, Principles of Program Analysis
   Ore O, 1944, T AM MATH SOC, V55, P493, DOI 10.2307/1990305
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Paterson R, 2001, ACM SIGPLAN NOTICES, V36, P229, DOI 10.1145/507669.507664
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Poulsen Casper Bach, 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236767
   Rutar N, 2004, 15TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P245, DOI 10.1109/ISSRE.2004.1
   Sergey I, 2013, ACM SIGPLAN NOTICES, V48, P399, DOI 10.1145/2499370.2491979
   Shivers O. G., 1991, THESIS CARNEGIE MELL
   Smaragdakis Y, 2015, LECT NOTES COMPUT SC, V9458, P485, DOI 10.1007/978-3-319-26529-2_26
   Van Horn D, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Venet A., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P366
NR 27
TC 6
Z9 6
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 176
DI 10.1145/3360602
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500061
OA gold
DA 2024-07-18
ER

PT J
AU Near, JP
   Darais, D
   Abuah, C
   Stevens, T
   Gaddamadugu, P
   Wang, L
   Somani, N
   Zhang, M
   Sharma, N
   Shan, A
   Song, D
AF Near, Joseph P.
   Darais, David
   Abuah, Chike
   Stevens, Tim
   Gaddamadugu, Pranav
   Wang, Lun
   Somani, Neel
   Zhang, Mu
   Sharma, Nikhil
   Shan, Alex
   Song, Dawn
TI DUET: An Expressive Higher-Order Language and Linear Type System for
   Statically Enforcing Differential Privacy
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Differential privacy; typechecking; machine learning
AB During the past decade, differential privacy has become the gold standard for protecting the privacy of individuals. However, verifying that a particular program provides differential privacy often remains a manual task to be completed by an expert in the field. Language-based techniques have been proposed for fully automating proofs of differential privacy via type system design, however these results have lagged behind advances 172 in differentially-private algorithms, leaving a noticeable gap in programs which can be automatically verified while also providing state-of-the-art bounds on privacy.
   We propose DUET, an expressive higher-order language, linear type system and tool for automatically verifying differential privacy of general-purpose higher-order programs. In addition to general purpose programming, DUET supports encoding machine learning algorithms such as stochastic gradient descent, as well as common auxiliary data analysis tasks such as clipping, normalization and hyperparameter tuning-each of which are particularly challenging to encode in a statically verified differential privacy framework.
   We present a core design of the DUET language and linear type system, and complete key proofs about privacy for well-typed programs. We then show how to extend DUET to support realistic machine learning applications and recent variants of differential privacy which result in improved accuracy for many practical differentially private algorithms. Finally, we implement several differentially private machine learning algorithms in DUET which have never before been automatically verified by a language-based tool, and we present experimental results which demonstrate the benefits of DUET'S language design in terms of accuracy of trained machine learning models.
C1 [Near, Joseph P.; Darais, David; Abuah, Chike; Stevens, Tim] Univ Vermont, Burlington, VT 05405 USA.
   [Gaddamadugu, Pranav; Wang, Lun; Somani, Neel; Sharma, Nikhil; Shan, Alex; Song, Dawn] Univ Calif Berkeley, Berkeley, CA 94720 USA.
   [Zhang, Mu] Univ Utah, Salt Lake City, UT 84112 USA.
C3 University of Vermont; University of California System; University of
   California Berkeley; Utah System of Higher Education; University of Utah
RP Near, JP (corresponding author), Univ Vermont, Burlington, VT 05405 USA.
EM jnear@uvm.edu; David.Darais@uvm.edu; cabuah@uvm.edu; Stevens@uvm.edu;
   pranaysaig@berkeley.edu; wanglun@berkeley.edu; neel@berkeley.edu;
   muzhang@cs.utah.edu; ennsharma@berkeley.edu; alexshan@berkeley.edu;
   dawnsong@cs.berkeley.edu
RI Abuah, Chiké/JWA-1851-2024
OI Abuah, Chike/0000-0003-1860-2360
FU Center for Long-Term Cybersecurity; Alibaba AIR; DARPA
   [N66001-15-C-4066]; SPAWAR [N66001-15-C-4066]; IARPA [2019-1902070008];
   NSF [1901278]; Division of Computing and Communication Foundations;
   Direct For Computer & Info Scie & Enginr [1901278] Funding Source:
   National Science Foundation
FX The authors would like to thank Arthur Azevedo de Amorim, Justin Hsu,
   and Om Thakkar for their helpful comments. This work was supported by
   the Center for Long-Term Cybersecurity, Alibaba AIR, DARPA & SPAWAR via
   N66001-15-C-4066, IARPA via 2019-1902070008, and NSF award 1901278. The
   U.S. Government is authorized to reproduce and distribute reprints for
   Governmental purposes not withstanding any copyright annotation therein.
   The views, opinions, and/or findings expressed are those of the authors
   and should not be interpreted as representing the official views or
   policies of any US Government agency.
CR Abadi M, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P308, DOI 10.1145/2976749.2978318
   [Anonymous], 2017, ABS170609479 CORR
   [Anonymous], 2016, APPLE PREVIEWS IOS 1
   [Anonymous], SCIKIT LEARN STANDAR
   Barber A., 1996, ECSLFCS96347 U ED
   Barthe G., 2016, ACM SIGLOG News, V3, P34, DOI 10.1145/2893582.2893591
   Barthe G, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P68, DOI 10.1145/2976749.2978371
   Barthe G, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P55, DOI 10.1145/2976749.2978391
   Barthe G, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P749, DOI 10.1145/2933575.2934554
   Barthe G, 2015, ACM SIGPLAN NOTICES, V50, P55, DOI [10.1145/2775051.2677000, 10.1145/10.1145/2676726.2677000]
   Barthe G, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2492061
   Barthe G, 2013, LECT NOTES COMPUT SC, V7966, P49, DOI 10.1007/978-3-642-39212-2_8
   Bassily R, 2014, ANN IEEE SYMP FOUND, P464, DOI 10.1109/FOCS.2014.56
   Bun M, 2018, ACM S THEORY COMPUT, P74, DOI 10.1145/3188745.3188946
   Bun M, 2016, LECT NOTES COMPUT SC, V9985, P635, DOI 10.1007/978-3-662-53641-4_24
   Chaudhuri K., 2013, P ADV NEUR INF PROC, P2652
   Chaudhuri K, 2011, J MACH LEARN RES, V12, P1069
   Cicek Ezgi, 2018, ABS181205067 CORR
   de Amorim AA, 2017, ACM SIGPLAN NOTICES, V52, P545, DOI [10.1145/3093333.3009890, 10.1145/3009837.3009890]
   de Amorim Arthur Azevedo, 2014, S IMPL APPL FUNCT PR
   de Amorim Arthur Azevedo, 2018, ABS180705091 CORR
   Dwork C, 2006, LECT NOTES COMPUT SC, V4052, P1
   Dwork C, 2006, LECT NOTES COMPUT SC, V3876, P265, DOI 10.1007/11681878_14
   Dwork C, 2013, FOUND TRENDS THEOR C, V9, P211, DOI 10.1561/0400000042
   Dwork C, 2009, ACM S THEORY COMPUT, P371
   Erlingsson U, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1054, DOI 10.1145/2660267.2660348
   Fredrikson M, 2015, CCS'15: PROCEEDINGS OF THE 22ND ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1322, DOI 10.1145/2810103.2813677
   Friedman A, 2016, USER MODEL USER-ADAP, V26, P425, DOI 10.1007/s11257-016-9177-7
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Haney S, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1339, DOI 10.1145/3035918.3035940
   Johnson N, 2018, PROC VLDB ENDOW, V11, P526, DOI 10.1145/3177732.3177733
   Machanavajjhala A, 2008, PROC INT CONF DATA, P277, DOI 10.1109/ICDE.2008.4497436
   McSherry F, 2007, ANN IEEE SYMP FOUND, P94, DOI 10.1109/FOCS.2007.66
   McSherry F, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P19
   Mironov I, 2017, P IEEE CSFW, P263, DOI 10.1109/CSF.2017.11
   Mohan P., 2012, P 2012 ACM SIGMOD IN, DOI [10.1145/2213836.2213876, DOI 10.1145/2213836.2213876]
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Narayan Arjun, 2012, OSDI, P149
   Near JP, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360598
   Papernot N., 2016, INT C LEARN REPR
   Proserpio D, 2014, PROC VLDB ENDOW, V7, P637, DOI 10.14778/2732296.2732300
   Reed J, 2010, ACM SIGPLAN NOTICES, V45, P157, DOI 10.1145/1932681.1863568
   Roy I., 2010, NSDI, P20
   Sato T., 2019, PROC IEEE NORDIC CIR, P1
   Sato T, 2016, ELECTRON NOTES THEOR, V325, P277, DOI 10.1016/j.entcs.2016.09.043
   Shokri R, 2017, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2017.41
   Talwar K., 2015, P 28 INT C NEUR INF, P3025
   Wang Yu-Xiang, 2018, ABS180800087 CORR
   Wu X, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1307, DOI 10.1145/3035918.3064047
   Wu X, 2016, P IEEE CSFW, P355, DOI 10.1109/CSF.2016.32
   Zhang D, 2017, ACM SIGPLAN NOTICES, V52, P888, DOI 10.1145/3093333.3009884
   Zhang Hengchu, 2019, PACMPL ICFP 2019
NR 53
TC 18
Z9 22
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 172
DI 10.1145/3360598
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500057
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Hirschowitz, T
AF Hirschowitz, Tom
TI Familial Monads and Structural Operational Semantics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Structural operational semantics; category theory; familial monads
AB We propose a categorical framework for structural operational semantics, in which we prove that under suitable hypotheses bisimilarity is a congruence. We then reline the framework to prove soundness of bisimulation up to context, an efficient method for reducing the size of bisimulation relations. Finally, we demonstrate the flexibility of our approach by reproving known results in three variants of the pi-calculus.
C1 [Hirschowitz, Tom] Univ Grenoble Alpes, Univ Savoie Mt Blanc, CNRS, LAMA, Chambery, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite Savoie
   Mont Blanc; Communaute Universite Grenoble Alpes; Universite Grenoble
   Alpes (UGA)
RP Hirschowitz, T (corresponding author), Univ Grenoble Alpes, Univ Savoie Mt Blanc, CNRS, LAMA, Chambery, France.
RI Hirschowitz, Tom/KJM-4727-2024
OI Hirschowitz, Tom/0000-0002-7220-4067
CR [Anonymous], 1981, Technical Report DAIMI FN-19
   Berger C, 2012, J PURE APPL ALGEBRA, V216, P2029, DOI 10.1016/j.jpaa.2012.02.039
   Bernstein KL, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P153, DOI 10.1109/LICS.1998.705652
   BLOOM B, 1995, J ASSOC COMPUT MACH, V42, P232, DOI 10.1145/200836.200876
   Bol R, 1996, J ACM, V43, P863, DOI 10.1145/234752.234756
   Bonchi F, 2017, ACTA INFORM, V54, P127, DOI 10.1007/s00236-016-0271-4
   Boudol Gerard., 1988, FUND INFORM, VXI
   Carboni A., 1995, Mathematical Structures in Computer Science, V5, P441, DOI 10.1017/S0960129500001183
   Cattani GL, 1998, LECT NOTES COMPUT SC, V1466, P581, DOI 10.1007/BFb0055649
   DIERS Y, 1978, CR ACAD SCI A MATH, V287, P985
   Dubut Jeremy, 2016, P 27 INT C CONC THEO, DOI [10.4230/LIPIcs.CONCUR.2016.25, DOI 10.4230/LIPICS.CONCUR.2016.25]
   Fiore M, 2001, IEEE S LOG, P93, DOI 10.1109/LICS.2001.932486
   Fiore M, 2006, IEEE S LOG, P49, DOI 10.1109/LICS.2006.7
   Garner R, 2018, J LOGIC COMPUT, V28, P33, DOI 10.1093/logcom/exx029
   Hirschowitz Tom., 2018, FAMILIAL MONADS STRU
   Hovey M., 1999, Mathematical Surveys and Monographs, V63, pxii+209
   Johnstone Peter T., 2002, Sketches of an Elephant: A Topos Theory Compendium, V2
   Joyal A., 1993, Proceedings of Eighth Annual IEEE Symposium on Logic in Computer Science (Cat. No.93CH3328-2), P418, DOI 10.1109/LICS.1993.287566
   Klin B, 2011, THEOR COMPUT SCI, V412, P5043, DOI 10.1016/j.tcs.2011.03.023
   Kock J, 2011, INT MATH RES NOTICES, V2011, P609, DOI 10.1093/imrn/rnq068
   LAWVERE FW, 1963, P NATL ACAD SCI USA, V50, P869, DOI 10.1073/pnas.50.5.869
   Mac Lane S., 1992, SHEAVES GEOMETRY LOG
   Mac Lane S, 1998, GRAD TEXT M, V5
   Middelburg CA, 2001, J LOGIC ALGEBR PROGR, V47, P15, DOI 10.1016/S1567-8326(00)00003-5
   Mousavi M, 2005, LECT NOTES COMPUT SC, V3653, P308, DOI 10.1007/11539452_25
   Mousavi MR, 2007, THEOR COMPUT SCI, V373, P238, DOI 10.1016/j.tcs.2006.12.019
   Pous Damien., 2011, ENHANCEMENTS BISIMUL
   Riehl E, 2014, NEW MATH MONOGRAPHS
   Sands D., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P428, DOI 10.1145/263699.263760
   SANGIORGI D, 1994, INFORM COMPUT, V111, P120, DOI 10.1006/inco.1994.1042
   Sangiorgi D., 2001, CALCULUS THEORY MOBI
   Sangiorgi Davide, 1998, LNCS, V1466
   Sangiorgi Davide, 2011, CAMBRIDGE TRACTS THE
   Sewell Peter., 1998, REWRITE RULES BISIMU, P269, DOI [10.1007/BFb0055628, DOI 10.1007/BFB0055628]
   Staton S, 2008, IEEE S LOG, P166, DOI 10.1109/LICS.2008.43
   Turi D, 1997, IEEE S LOG, P280, DOI 10.1109/LICS.1997.614955
   Weber Mark, 2007, Theory and Applications of Categories, V18, P665
NR 37
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 21
DI 10.1145/3290334
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300021
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Toro, M
   Labrada, E
   Tanter, É
AF Toro, Matias
   Labrada, Elizabeth
   Tanter, Eric
TI Gradual Parametricity, Revisited
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Gradual typing; polymorphism; parametricity
AB Bringing the benefits of gradual typing to a language with parametric polymorphism like System F, while preserving relational parametricity, has proven extremely challenging: first attempts were formulated a decade ago, and several designs were recently proposed. Among other issues, these proposals can however signal parametricity errors in unexpected situations, and improperly handle type instantiations when imprecise types are involved. These observations further suggest that existing polymorphic cast calculi are not well suited for supporting a gradual counterpart of System F. Consequently, we revisit the challenge of designing a gradual language with explicit parametric polymorphism, exploring the extent to which the Abstracting Gradual Typing methodology helps us derive such a language, GSF. We present the design and metatheory of GSF, and provide a reference implementation. In addition to avoiding the uncovered semantic issues, GSF satisfies all the expected properties of a gradual parametric language, save for one property: the dynamic gradual guarantee, which was left as conjecture in all prior work, is here proven to be simply incompatible with parametricity. We nevertheless establish a weaker property that allows us to disprove several claims about gradual free theorems, clarifying the kind of reasoning supported by gradual pararnetricity.
C1 [Toro, Matias; Labrada, Elizabeth; Tanter, Eric] Univ Chile, Comp Sci Dept DCC, Beauchef 851, Santiago, Chile.
   [Tanter, Eric] Inria Paris, Paris, France.
C3 Universidad de Chile
RP Toro, M (corresponding author), Univ Chile, Comp Sci Dept DCC, Beauchef 851, Santiago, Chile.
OI Toro, Matias/0000-0002-5315-0198
FU CONICYT/FONDECYT [1150017]; CONICYT/Doctorado Nacional/2015 [21150510,
   21151566]; European Research Council under ERC Starting Grant SECOMP
   [715753]
FX This work is partially funded by CONICYT/FONDECYT Regular/1150017,
   CONICYT/Doctorado Nacional/2015-21150510 & 21151566, and by the European
   Research Council under ERC Starting Grant SECOMP (715753).
CR ABADI M, 1991, ACM T PROGR LANG SYS, V13, P237, DOI 10.1145/103135.103138
   Abadi Martin, 1995, J FUNCT PROGRAM, V5, P111
   Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   Ahmed Amal, 2017, THEOREMS FREE FREE P, V39, P28
   Ahmed Amal, 2009, WORKSH SCRIPT PROGR
   [Anonymous], 2015, LEIBNIZ INT P INFORM, DOI DOI 10.4230/LIPICS.SNAPL.2015.274
   Bader J, 2018, LECT NOTES COMPUT SC, V10747, P25, DOI 10.1007/978-3-319-73721-8_2
   Schwerter FB, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283, DOI 10.1145/2628136.2628149
   Benton Nick, 2016, J FUNCT PROGRAM, V27, P24
   Bierman G, 2010, LECT NOTES COMPUT SC, V6183, P76, DOI 10.1007/978-3-642-14107-2_5
   CARTWRIGHT R, 1991, SIGPLAN NOTICES, V26, P278, DOI 10.1145/113446.113469
   Castagna Giuseppe, 2017, GRADUAL TYPING UNION, V41, P28
   Curry Haskell B., 1972, STUDIES LOGIC FDN MA, V65
   Devriese Dominique, 2018, P ACM PROGR LANG POP, V38, P23
   Disney T., 2011, THE STOP
   Fennell L, 2013, P IEEE CSFW, P224, DOI 10.1109/CSF.2013.22
   Fennell Luminous, 2016, LEIBNIZ INT P INFORM, V9, P26
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Garcia Ronald, 2015, ARXIV151101399
   Girard Jean-Yves, 1972, THESIS U PARIS 7 PAR
   GUHA A., 2007, DLS, P29
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Igarashi Atsushi, 2017, GRADUAL SESSION TYPE, V38, P28
   Igarashi Yuu, 2017, SEE ICFP 2017 2017, V40, P29
   Ina L, 2011, ACM SIGPLAN NOTICES, V46, P609, DOI 10.1145/2076021.2048114
   Lehmann N, 2017, ACM SIGPLAN NOTICES, V52, P775, DOI 10.1145/3093333.3009856
   LEROY X, 1991, LECT NOTES COMPUT SC, V523, P406
   Matthews J, 2008, LECT NOTES COMPUT SC, V4960, P16
   Matthews J, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P3
   MITCHELL JC, 1988, INFORM COMPUT, V76, P211, DOI 10.1016/0890-5401(88)90009-0
   MORRIS JH, 1973, COMMUN ACM, V16, P15, DOI 10.1145/361932.361937
   Muehlboeck F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133880
   Neis Georg, 2009, P 14 ACM SIGPLAN C F, P135
   New Max S., 2018, GRADUALITY EMBEDDING, V73, P1
   Ningning Xie, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P3, DOI 10.1007/978-3-319-89884-1_1
   Odersky H., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P54, DOI 10.1145/237721.237729
   Pierce Benjamin, 2000, RELATING CRYPT UNPUB
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rastogi A, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P481
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Reynolds J. C., 1974, Programming Symposium, P408
   Rossberg Andreas., 2003, PPDP '03, P241, DOI DOI 10.1145/888251.888274
   Schwerter FB, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000162
   Sergey I, 2012, LECT NOTES COMPUT SC, V7211, P579, DOI 10.1007/978-3-642-28869-2_29
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Toro M, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3229061
   Toro M, 2017, LECT NOTES COMPUT SC, V10422, P382, DOI 10.1007/978-3-319-66706-5_19
   Toro Matias, 2018, ARXIV180704596CSPL
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Wolff R, 2011, LECT NOTES COMPUT SC, V6813, P459, DOI 10.1007/978-3-642-22655-7_22
NR 55
TC 15
Z9 15
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 17
DI 10.1145/3290330
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300017
OA gold
DA 2024-07-18
ER

PT J
AU Yi, X
   Chen, LQ
   Mao, XG
   Ji, T
AF Yi, Xin
   Chen, Liqian
   Mao, Xiaoguang
   Ji, Tao
TI Efficient Automated Repair of High Floating-Point Errors in Numerical
   Libraries
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Floating-point errors; automated repair; numerical program
AB Floating point computation is by nature inexact, and numerical libraries that intensively involve floating-point computations may encounter high floating-point errors. Due to the wide use of numerical libraries, it is highly desired to reduce high floating-point errors in them. Using higher precision will degrade performance and may also introduce extra errors for certain precision-specific operations in numerical libraries. Using mathematical rewriting that mostly focuses on rearranging floating-point expressions or taking Taylor expansions may not fit for reducing high floating-point errors evoked by ill-conditioned problems that are in the nature of the mathematical feature of many numerical programs in numerical libraries.
   In this paper, we propose a novel approach for efficient automated repair of high floating-point errors in numerical libraries. Our main idea is to make use of the mathematical feature of a numerical program for detecting and reducing high floating-point errors. The key components include a detecting method based on two algorithms for detecting high floating-point errors and a repair method for deriving an approximation of a mathematical function to generate patch to satisfy a given repair criterion. We implement our approach by constructing a new tool called AutoRNP. Our experiments are conducted on 20 numerical programs in GNU Scientific Library (GSL). Experimental results show that our approach can efficiently repair (with 100% accuracy over all randomly sampled points) high floating-point errors for 19 of the 20 numerical programs.
C1 [Yi, Xin; Chen, Liqian; Mao, Xiaoguang; Ji, Tao] Natl Univ Def Technol, Coll Comp, Lab Software Engn Complex Syst, Changsha, Hunan, Peoples R China.
C3 National University of Defense Technology - China
RP Yi, X (corresponding author), Natl Univ Def Technol, Coll Comp, Lab Software Engn Complex Syst, Changsha, Hunan, Peoples R China.
EM yixin09@nudt.edu.cn; lqchen@nudt.edu.cn; xgmao@nudt.edu.cn;
   taoji@nudt.edu.cn
RI Yin, Jing/KDO-6274-2024
OI Yi, Xin/0000-0003-4511-1495
FU National Key R&D Program of China [2017YFB1001802]; National Natural
   Science Foundation of China [61672529, 61872445, 61502015]
FX We thank Pavel Panchekha for his discussions on using Herbie and
   Herbgrind, and Zhengfeng Yang for his helpful suggestions on this work.
   We also thank the anonymous reviewers for their valuable comments. This
   work is supported by the National Key R&D Program of China (No.
   2017YFB1001802), and the National Natural Science Foundation of China
   (Nos. 61672529, 61872445, 61502015).
CR Andrieu C, 2003, MACH LEARN, V50, P5, DOI 10.1023/A:1020281327116
   [Anonymous], 1974, HDB MATH FUNCTIONS F, DOI DOI 10.5555/1098650
   [Anonymous], 1996, LECT NOTES STATUS IE
   Bao T, 2013, ACM SIGPLAN NOTICES, V48, P817, DOI [10.1145/2509136.2509526, 10.1145/2544173.2509526]
   CAJORI F, 1911, B AM MATH SOC, V17, P409
   Chiang WF, 2014, ACM SIGPLAN NOTICES, V49, P43, DOI [10.1145/2692916.2555265, 10.1145/2555243.2555265]
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Damouche N, 2017, P 20 INT WORKSH SOFT, P1, DOI DOI 10.1145/3078659.3078662
   Damouche Nasrine, 2017, Kalpa Publications in Computing, V5, P63, DOI DOI 10.29007/J2FD
   DeMarco F, 2014, P 6 INT WORKSHOP CON, P30, DOI 10.1145/2593735.2593740
   Di Franco A, 2017, IEEE INT CONF AUTOM, P509, DOI 10.1109/ASE.2017.8115662
   Durieux T, 2016, 2016 IEEE/ACM 11TH INTERNATIONAL WORKSHOP IN AUTOMATION OF SOFTWARE TEST (AST), P85, DOI [10.1145/2896921.2896931, 10.1109/AST.2016.021]
   Fousse L, 2007, ACM T MATH SOFTWARE, V33, DOI 10.1145/1236463.1236468
   Fu ZL, 2017, ACM SIGPLAN NOTICES, V52, P306, DOI [10.1145/3062341.3062383, 10.1145/3140587.3062383]
   Fu ZL, 2015, ACM SIGPLAN NOTICES, V50, P639, DOI [10.1145/2814270.2814317, 10.1145/2858965.2814317]
   GOLDBERG D, 1991, COMPUT SURV, V23, P5, DOI 10.1145/103162.103163
   Gopinath D, 2011, LECT NOTES COMPUT SC, V6605, P173, DOI 10.1007/978-3-642-19835-9_15
   Nguyen HDT, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P772, DOI 10.1109/ICSE.2013.6606623
   Johansson F., 2013, FLINT: Fast Library for Number Theory
   Lee W, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158135
   Long F, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P166, DOI 10.1145/2786805.2786811
   Long F, 2016, ACM SIGPLAN NOTICES, V51, P298, DOI 10.1145/2914770.2837617
   Marcote Sebastian R. Lamelas, 2015, ABS150405078 CORR
   Mechtaev S, 2016, PROC INT CONF SOFTW, P691, DOI 10.1145/2884781.2884807
   Mechtaev S, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P448, DOI 10.1109/ICSE.2015.63
   Nethercote N, 2007, ACM SIGPLAN NOTICES, V42, P89, DOI 10.1145/1273442.1250746
   Panchekha P, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI 10.1145/2737924.2737959
   Qi YH, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P254, DOI 10.1145/2568225.2568254
   Sanchez-Stern A, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P256, DOI [10.1145/3192366.3192411, 10.1145/3296979.3192411]
   Schkufza E, 2014, ACM SIGPLAN NOTICES, V49, P53, DOI [10.1145/2666356.2594302, 10.1145/2594291.2594302]
   Sterbenz P.H., 1973, Floating-Point Computation
   Storn R, 1997, J GLOBAL OPTIM, V11, P341, DOI 10.1023/A:1008202821328
   Tang EY, 2017, IEEE T SOFTWARE ENG, V43, P975, DOI 10.1109/TSE.2016.2642956
   Wales DJ, 1997, J PHYS CHEM A, V101, P5111, DOI 10.1021/jp970984n
   Wang R, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P619, DOI 10.1145/2950290.2950355
   Weimer W, 2009, PROC INT CONF SOFTW, P364, DOI 10.1109/ICSE.2009.5070536
   Xuan JF, 2017, IEEE T SOFTWARE ENG, V43, P34, DOI 10.1109/TSE.2016.2560811
   Yi X, 2017, ASIA PAC SOFWR ENG, P11, DOI 10.1109/APSEC.2017.7
   Yi X, 2017, PROC IEEE INT CONF S, P514, DOI 10.1109/ICSME.2017.45
   Zou DM, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P529, DOI 10.1109/ICSE.2015.70
NR 40
TC 19
Z9 23
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 56
DI 10.1145/3290369
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300056
OA gold
DA 2024-07-18
ER

PT J
AU Cao, HQ
   Tang, SZ
   Zhu, QC
   Yu, BW
   Chen, WG
AF Cao, Huanqi
   Tang, Shizhi
   Zhu, Qianchao
   Yu, Bowen
   Chen, Wenguang
TI Mat2Stencil: A Modular Matrix-Based DSL for Explicit and Implicit
   Matrix-Free PDE Solvers on Structured Grid
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE domain-specific language; multi-stage programming; compiler; finite
   difference method; stencil; structured grid; polyhedral compilation;
   performance optimization
AB Partial differential equation (PDE) solvers are extensively utilized across numerous scientific and engineering fields. However, achieving high performance and scalability often necessitates intricate and low-level programming, particularly when leveraging deterministic sparsity patterns in structured grids.
   In this paper, we propose an innovative domain-specific language (DSL), Mat2Stencil, with its compiler, for PDE solvers on structured grids. Mat2Stencil introduces a structured sparse matrix abstraction, facilitating modular, flexible, and easy-to-use expression of solvers across a broad spectrum, encompassing components such as Jacobi or Gauss-Seidel preconditioners, incomplete LU or Cholesky decompositions, and multigrid methods built upon them. Our DSL compiler subsequently generates matrix-free code consisting of generalized stencils through multi-stage programming. The code allows spatial loop-carried dependence in the form of quasi-affine loops, in addition to the Jacobi-style stencil's embarrassingly parallel on spatial dimensions. We further propose a novel automatic parallelization technique for the spatially dependent loops, which offers a compile-time deterministic task partitioning for threading, calculates necessary inter-thread synchronization automatically, and generates an efficient multi-threaded implementation with fine-grained synchronization.
   Implementing 4 benchmarking programs, 3 of them being the pseudo-applications in NAS Parallel Benchmarks with 6.3% lines of code and 1 being matrix-free High Performance Conjugate Gradients with 16.4% lines of code, we achieve up to 1.67x and on average 1.03x performance compared to manual implementations.
C1 [Cao, Huanqi; Tang, Shizhi; Yu, Bowen; Chen, Wenguang] Tsinghua Univ, Beijing, Peoples R China.
   [Zhu, Qianchao] Peking Univ, Beijing, Peoples R China.
   [Chen, Wenguang] Pengcheng Lab, Shenzhen, Peoples R China.
C3 Tsinghua University; Peking University
RP Cao, HQ (corresponding author), Tsinghua Univ, Beijing, Peoples R China.
EM caohq18@mails.tsinghua.edu.cn; tsz19@mails.tsinghua.edu.cn;
   dysania@pku.edu.cn; yubowen@tsinghua.edu.cn; cwg@tsinghua.edu.cn
RI Yu, Bo-Wen/HHN-3521-2022
OI Yu, Bo-Wen/0000-0003-4748-7330; CHEN, WENGUANG/0000-0002-4281-1018; Cao,
   Huanqi/0000-0002-3870-106X; Tang, Shizhi/0000-0002-6543-0859
FU NSFC [U20B2044]; Major Key Project of PCL
FX This work is supported in part by NSFC U20B2044 and The Major Key
   Project of PCL.
CR Allen Randy, 2001, Optimizing compilers for modern architectures: a dependencebased approach
   Augustine T, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P625, DOI 10.1145/3314221.3314615
   Baghdadi R, 2019, INT SYM CODE GENER, P193, DOI [10.5281/zenodo.2375075, 10.1109/CGO.2019.8661197]
   BAILEY DH, 1991, INT J SUPERCOMPUT AP, V5, P63, DOI 10.1177/109434209100500306
   Bondhugula U, 2017, IEEE T PARALL DISTR, V28, P1285, DOI 10.1109/TPDS.2016.2615094
   Bondhugula U, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2896389
   Bondhugula U, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P101, DOI 10.1145/1375581.1375595
   Cao Huanqi, 2023, Zenodo, DOI 10.5281/ZENODO.8149701
   Chow E, 2015, SIAM J SCI COMPUT, V37, pC169, DOI 10.1137/140968896
   Datta Kaushik, 2008, 2008 SC - International Conference for High Performance Computing, Networking, Storage and Analysis, DOI 10.1109/SC.2008.5222004
   Davis Timothy A., 2006, arXiv, DOI [DOI 10.1137/1.9780898717938, 10.1137/1.9780898718881, DOI 10.1137/1.9780898718881]
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Decker James, 2019, Implementation of Lightweight Modular Staging (LMS) in Python
   Dongarra J, 2016, INT J HIGH PERFORM C, V30, P3, DOI 10.1177/1094342015593158
   Essadki Mohamed, 2023, P 21 ACM IEEE INT S, P2
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P313, DOI 10.1007/BF01407835
   Habich Johannes, 2009, Enabling temporal blocking for a lattice Boltzmann flow solver through multicore-aware wavefront parallelization
   Huang XM, 2019, GEOSCI MODEL DEV, V12, P4729, DOI 10.5194/gmd-12-4729-2019
   Intel, 2023, Intel oneAPI Math Kernel Library
   Kamil S., 2006, MSPC'06: Proceedings of the 2006 workshop on Memory system performance and correctness, P51, DOI [10.1145/1178597, DOI 10.1145/1178597]
   Krishnamoorthy S, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P235, DOI 10.1145/1250734.1250761
   Lengauer Christian, 2020, Software for Exascale Computing - SPPEXA 2016-2019. Lecture Notes in Computational Science and Engineering (LNCSE 136), P405, DOI 10.1007/978-3-030-47956-5_14
   Li XYS, 2011, ACM T MATH SOFTWARE, V37, DOI 10.1145/1916461.1916467
   Louboutin M, 2019, GEOSCI MODEL DEV, V12, P1165, DOI 10.5194/gmd-12-1165-2019
   MCMECHAN GA, 1983, GEOPHYS PROSPECT, V31, P413, DOI 10.1111/j.1365-2478.1983.tb01060.x
   Merrill D, 2016, SC '16: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, P678, DOI 10.1109/SC.2016.57
   Nguyen A., 2010, P 2010 ACM IEEE INT, P1, DOI DOI 10.1109/SC.2010.2
   Ofenbeck Georg, 2013, Spiral in scala: towards the systematic construction of generators for performance libraries, P125, DOI DOI 10.1145/2517208.2517228
   OpenAI, 2023, Gpt-4 technical report, 2023.
   PADUA DA, 1986, COMMUN ACM, V29, P1184, DOI 10.1145/7902.7904
   Pieper A, 2021, INT J HIGH PERFORM C, V35, P60, DOI 10.1177/1094342020959423
   Pinar A., 1999, ser. SC '99, P30, DOI [DOI 10.1145/331532.331562, 10.1145/331532.331562]
   Rompf T, 2012, COMMUN ACM, V55, P121, DOI 10.1145/2184319.2184345
   Saad Yousef., 2003, Iterative Methods for Sparse Linear Systems
   Shaikhha A, 2018, ACM T DATABASE SYST, V43, DOI 10.1145/3183653
   Skamarock W. C., 2019, NCAR Tech. Note TN-5561STR, P1, DOI [DOI 10.5065/1DFH-6P97, 10.5065/1dfh-6p97]
   Stucki N, 2018, PROCEEDINGS OF THE 17TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'18), P14, DOI 10.1145/3278122.3278139
   Sujeeth AK, 2014, ACM T EMBED COMPUT S, V13, DOI 10.1145/2584665
   Taha Walid, 1999, Ph. D. Dissertation
   Tang SZ, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P872, DOI 10.1145/3519939.3523448
   Tang Y, 2011, SPAA 11: PROCEEDINGS OF THE TWENTY-THIRD ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P117, DOI 10.1145/1989493.1989508
   Verdoolaege S, 2010, LECT NOTES COMPUT SC, V6327, P299, DOI 10.1007/978-3-642-15582-6_49
   Verdoolaege Sven, 2017, Scheduling for PPCG, DOI DOI 10.13140/RG.2.2.28998.68169
   Virtanen P, 2020, NAT METHODS, V17, P261, DOI 10.1038/s41592-019-0686-2
   William S, 2010, SCI COMPUTING MULTIC, P83, DOI [DOI 10.1201/B10376-8, 10.1201/b10376-8]
   Williams S, 2007, INT J PARALLEL PROG, V35, P263, DOI 10.1007/s10766-007-0034-5
   Yang C, 2016, SC '16: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, P57, DOI 10.1109/SC.2016.5
   Zhang N, 2017, IEEE SYM PARA DISTR, P795, DOI 10.1109/IPDPSW.2017.89
   Zhu QC, 2021, INT CONF HIGH PERFOR, DOI 10.1145/3458817.3476158
NR 49
TC 1
Z9 1
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 246
DI 10.1145/3622822
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100026
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Haas, T
   Maseli, R
   Meyer, R
   De León, HP
AF Haas, Thomas
   Maseli, Rene
   Meyer, Roland
   De Leon, Hernan Ponce
TI Static Analysis of Memory Models for SMT Encodings
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Abstract interpretation; weak memory models; bounded model checking
ID CONSISTENCY; CHECKING; VERIFICATION; JAVASMT; SOLVERS; ALLOY; LOGIC;
   C-11; SC
AB The goal of this work is to improve the efficiency of bounded model checkers that are modular in the memory model. Our first contribution is a static analysis for the given memory model that is performed as a preprocessing step and helps us significantly reduce the encoding size. Memory model make use of relations to judge whether an execution is consistent. The analysis computes bounds on these relations: which pairs of events may or must be related. What is new is that the bounds are relativized to the execution of events. This makes it possible to derive, for the first time, not only upper but also meaningful lower bounds. Another important feature is that the analysis can import information about the verification instance from external sources to improve its precision. Our second contribution are new optimizations for the SMT encoding. Notably, the lower bounds allow us to simplify the encoding of acyclicity constraints. We implemented our analysis and optimizations within a bounded model checker and evaluated it on challenging benchmarks. The evaluation shows up-to 40% reduction in verification time (including the analysis) over previous encodings. Our optimizations allow us to efficiently check safety, liveness, and data race freedom in Linux kernel code.
C1 [Haas, Thomas; Maseli, Rene; Meyer, Roland] TU Braunschweig, Braunschweig, Germany.
   [De Leon, Hernan Ponce] Huawei Dresden Res Ctr, Dresden, Germany.
C3 Braunschweig University of Technology
RP Haas, T (corresponding author), TU Braunschweig, Braunschweig, Germany.
EM t.haas@tu-braunschweig.de; r.maseli@tu-bs.de; roland.meyer@tu-bs.de;
   hernanl.leon@huawei.com
OI Ponce de Leon, Hernan/0000-0002-4225-8830; Haas,
   Thomas/0000-0002-3176-8552; Maseli, Rene/0000-0002-3608-2584
CR Abdulla Parosh Aziz, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P353, DOI 10.1007/978-3-662-46681-0_28
   Abdulla PA, 2021, LECT NOTES COMPUT SC, V12648, P1, DOI 10.1007/978-3-030-72019-3_1
   Abdulla PA, 2016, LECT NOTES COMPUT SC, V9780, P134, DOI 10.1007/978-3-319-41540-6_8
   Abdulla Parosh Aziz, 2020, Lecture Notes in Computer Science, V12129, P47, DOI [10.1007/978-3-030-67087-0_4, DOI 10.1007/978-3-030-67087-0_4]
   ADVE SV, 1990, 17TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P2, DOI 10.1109/ISCA.1990.134502
   Alglave J, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3458926
   Alglave J, 2018, ACM SIGPLAN NOTICES, V53, P405, DOI [10.1145/3296957.3177156, 10.1145/3173162.3177156]
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Alglave J, 2014, LECT NOTES COMPUT SC, V8559, P508, DOI 10.1007/978-3-319-08867-9_33
   Alglave Jade, 2017, Ogre and Pythia: an invariance proof method for weak consistency models, P3, DOI [10.1145/3009837.3009883, DOI 10.1145/3009837.3009883]
   Alglave Jade, 2010, These de doctorat
   [Anonymous], 2023, Linux Memory Model: Locks
   [Anonymous], 2023, C11: Bad Locking and Races
   [Anonymous], 2023, KCSAN
   [Anonymous], 2023, Linux Memory Model: Sanitization
   [Anonymous], 1985, P 5 ACM SIGACT SIGMO, DOI DOI 10.1145/6012.15399
   [Anonymous], 2023, Linux Memory Model: RCU
   Atig MF, 2012, LECT NOTES COMPUT SC, V7211, P26, DOI 10.1007/978-3-642-28869-2_2
   Atig MF, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P7, DOI 10.1145/1706299.1706303
   Baier D, 2021, LECT NOTES COMPUT SC, V12760, P195, DOI 10.1007/978-3-030-81688-9_9
   Batty M, 2016, ACM SIGPLAN NOTICES, V51, P634, DOI 10.1145/2914770.2837637
   Beck M, 2023, PROCEEDINGS OF THE 28TH ACM INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, VOL 2, ASPLOS 2023, P61, DOI 10.1145/3575693.3579849
   Bender J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360568
   Beyer Dirk, 2012, Conditional model checking: a technique to pass information between verifiers, P57, DOI [10.1145/2393596.2393664, DOI 10.1145/2393596.2393664]
   Burckhardt S, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P12, DOI 10.1145/1250734.1250737
   Burckhardt S, 2008, LECT NOTES COMPUT SC, V5123, P107
   Burckhardt S, 2006, LECT NOTES COMPUT SC, V4144, P489, DOI 10.1007/11817963_45
   Ceri S., 1989, IEEE Transactions on Knowledge and Data Engineering, V1, P146, DOI 10.1109/69.43410
   Cimatti A, 2013, LECT NOTES COMPUT SC, V7795, P93
   Clarke E, 2001, FORM METHOD SYST DES, V19, P7, DOI 10.1023/A:1011276507260
   Corbet Jonathan, 2013, C11 atomic variables and the kernel
   Corbet Jonathan, 2014, MCS locks and qspinlocks
   Corbet Jonathan, 2013, Improving ticket spinlocks
   Corbet Jonathan, 2008, TICKET SPINLOCKS
   COUSOT P, 1992, J LOGIC PROGRAM, V13, P103, DOI 10.1016/0743-1066(92)90030-7
   Cousot P., 2021, Principles of Abstract Interpretation
   Dan A, 2015, LECT NOTES COMPUT SC, V8931, P449
   de Leon H.P., 2018, FMCAD, P1, DOI DOI 10.23919/FMCAD.2018.8603021
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Demsky B, 2015, ACM SIGPLAN NOTICES, V50, P20, DOI [10.1145/2814270.2814297, 10.1145/2858965.2814297]
   Doherty S, 2022, ACM T COMPUT LOG, V23, DOI 10.1145/3545117
   Dutertre B, 2014, LECT NOTES COMPUT SC, V8559, P737, DOI 10.1007/978-3-319-08867-9_49
   Emerson EA, 1996, FORM METHOD SYST DES, V9, P105, DOI 10.1007/BF00625970
   Gavrilenko N, 2019, LECT NOTES COMPUT SC, V11561, P355, DOI 10.1007/978-3-030-25540-4_19
   Gebser M, 2014, LECT NOTES ARTIF INT, V8761, P137, DOI 10.1007/978-3-319-11558-0_10
   Godefroid P., 1996, Lecture Notes in Computer Science, V1032, DOI [DOI 10.1007/3-540-60761-7, 10.1007/3-540-60761-7_31]
   Gorjiara H, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428214
   Haas T, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563292
   He F, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1264, DOI 10.1145/3453483.3454108
   Jackson D, 2003, LECT NOTES COMPUT SC, V2651, P1
   Jackson D, 2019, COMMUN ACM, V62, P66, DOI 10.1145/3338843
   Karpenkov EG, 2016, LECT NOTES COMPUT SC, V9971, P139, DOI 10.1007/978-3-319-48869-1_11
   Kokologiannakis M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571212
   Kokologiannakis M, 2021, LECT NOTES COMPUT SC, V12759, P427, DOI 10.1007/978-3-030-81685-8_20
   Kokologiannakis M, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P1157, DOI 10.1145/3373376.3378480
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   Krishna Shankara Narayanan, 2022, Parameterized Verification under Release Acquire is PSPACE-complete, DOI [10.1145/3519270.3538445, DOI 10.1145/3519270.3538445]
   Kuperstein M, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P187
   Lahav O, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3505273
   Lahav O, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485475
   Lahav O, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P211, DOI 10.1145/3385412.3385966
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Mador-Haim Sela, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P495, DOI 10.1007/978-3-642-31424-7_36
   Mador-Haim S, 2010, LECT NOTES COMPUT SC, V6174, P273, DOI 10.1007/978-3-642-14295-6_26
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Metzler P, 2019, LECT NOTES COMPUT SC, V11636, P153, DOI 10.1007/978-3-030-30923-7_9
   Nguyen TL, 2017, IEEE INT CONF AUTOM, P753, DOI 10.1109/ASE.2017.8115686
   Norris B, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2806886
   Norris B, 2013, ACM SIGPLAN NOTICES, V48, P131, DOI [10.1145/2509136.2509514, 10.1145/2544173.2509514]
   Oberhauser J, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P530, DOI 10.1145/3445814.3446748
   Paolillo A, 2022, Arxiv, DOI arXiv:2111.15240
   Ponce-de-León H, 2017, LECT NOTES COMPUT SC, V10422, P299, DOI 10.1007/978-3-319-66706-5_15
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Rankooh MF, 2022, AAAI CONF ARTIF INTE, P5861
   Sarkar S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P175
   Sarkar S, 2009, ACM SIGPLAN NOTICES, V44, P379, DOI 10.1145/1594834.1480929
   Sevcik Jaroslav, 2011, C/C++11 mappings to processors
   Stern Alan, 2023, tools: memory-model: Add rmw-sequences to the LKMM
   Sun Z, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563321
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Torlak E, 2010, ACM SIGPLAN NOTICES, V45, P341, DOI 10.1145/1809028.1806635
   Torlak Emina, 2009, Ph. D. Dissertation
   Vafeiadis V, 2015, ACM SIGPLAN NOTICES, V50, P209, DOI [10.1145/2676726.2676995, 10.1145/2775051.2676995]
   Wang JW, 2022, PROCEEDINGS OF THE 2022 USENIX ANNUAL TECHNICAL CONFERENCE, P249, DOI 10.1109/GCCE56475.2022.10014427
   Weiyu Luo, 2021, ASPLOS 2021: Proceedings of the 26th International Conference on Architectural Support for Programming Languages and Operating Systems, P630, DOI 10.1145/3445814.3446711
   Wickerson J, 2017, ACM SIGPLAN NOTICES, V52, P190, DOI 10.1145/3093333.3009838
   Wittocx J, 2013, ACM T COMPUT LOG, V14, DOI 10.1145/2499937.2499938
NR 88
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 279
DI 10.1145/3622855
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100059
OA gold
DA 2024-07-18
ER

PT J
AU Castagna, G
AF Castagna, Giuseppe
TI Typing Records, Maps, and Structs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE dictionaries; subtyping; union types; intersection types; dynamic
   languages
ID SEMANTICS
AB Records are finite functions from keys to values. In this work we focus on two main distinct usages of records: structs and maps. The former associate different keys to values of different types, they are accessed by providing nominal keys, and trying to access a non-existent key yields an error. The latter associate all keys to values of the same type, they are accessed by providing expressions that compute a key, and trying to access a non-existent key usually yields some default value such as null or nil. Here, we propose a type theory that covers both kinds of usage, where record types may associate to different types either single keys (as for structs) or sets of keys (as for maps) and where the same record expression can be accessed and used both in the struct-like style and in the map-like style we just described. Since we target dynamically-typed languages our type theory includes union and intersection types, characterized by a subtyping relation. We define the subtyping relation for our record types via a semantic interpretation and derive the decomposition rules to decide it, define a backtracking-free subtyping algorithm that we prove to be correct, and provide a canonical representation for record types that is used to define various type operators needed to type record operations such as selection, concatenation, and field deletion.
C1 [Castagna, Giuseppe] Univ Paris Cite, CNRS, IRIF, Paris, France.
C3 Universite Paris Cite; Centre National de la Recherche Scientifique
   (CNRS)
RP Castagna, G (corresponding author), Univ Paris Cite, CNRS, IRIF, Paris, France.
OI Castagna, Giuseppe/0000-0003-0951-7535
CR Ballerina, Ballerina Language Specification
   Benzaken V, 2003, ACM SIGPLAN NOTICES, V38, P51, DOI 10.1145/944746.944711
   Bonnaire-Sergeant A, 2016, LECT NOTES COMPUT SC, V9632, P68, DOI 10.1007/978-3-662-49498-1_4
   Bruce K. B., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P38, DOI 10.1109/LICS.1988.5099
   CARDELLI L, 1990, LECT NOTES COMPUT SC, V442, P22
   CARDELLI L, 1984, LECT NOTES COMPUT SC, V173, P51
   Castagna Giuseppe, 2015, ACM SIGPLAN Notices, V50, P289, DOI 10.1145/2676726.2676991
   Castagna G, 2005, LECT NOTES COMPUT SC, V3580, P30
   Castagna G, 2024, Arxiv, DOI arXiv:2111.03354
   Castagna G, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498674
   Castagna G, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:15)2020
   Castagna G, 2014, ACM SIGPLAN NOTICES, V49, P5, DOI 10.1145/2535838.2535840
   Castagna G, 2011, ACM SIGPLAN NOTICES, V46, P94, DOI 10.1145/2034574.2034788
   Castagna Giuseppe, 2024, The Art, Science, and Engineering of Programming, V8, P2
   Chlipala A, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P122, DOI 10.1145/1806596.1806612
   Elixir, Elixir Typespecs
   Erlang, Erlang Reference Manual User's Guide
   Frisch A, 2002, IEEE S LOG, P137, DOI 10.1109/LICS.2002.1029823
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Frisch Alain, 2004, Ph. D. Dissertation
   Go, The Go Programming Language Specification
   Hive, Apache Hive Language Manual
   Hoare C. A. R., 1966, ALGOL Bull., V23, P5
   Hoare C. A. R., 1965, ALGOL Bull., V21, P39
   Hoare C. A. R., 1966, Record Handling
   Jategaonkar L. A., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P198, DOI 10.1145/62678.62702
   Je~rey Alan, 2022, Blog post
   Julia, Julia Documentation
   learn.microsoft, F#. F# documentation
   Lindahl T, 2004, LECT NOTES COMPUT SC, V3302, P91
   Lua, Lua Reference Manual
   Luau, about us
   Nardelli FZ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276483
   OCaml, Learn OCaml
   Pottier F., 2000, Nordic Journal of Computing, V7, P312
   REMY D, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P77, DOI 10.1145/75277.75284
   Remy Didier, 1995, WORKSH ADV TYP COMP
   Ruby, What is Ruby?
   Rust, The Rust Reference
   Scala, The Scala Programming Language
   Swift, The Swift Programming Language Book
   WAND M, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P92
   Wand M., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P37
   Xu H, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571224
NR 44
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 196
DI 10.1145/3607838
PG 44
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900009
OA gold
DA 2024-07-18
ER

PT J
AU Xie, NN
   White, L
   Nicole, O
   Yallop, J
AF Xie, Ningning
   White, Leo
   Nicole, Olivier
   Yallop, Jeremy
TI MacoCaml: Staging Composable and Compilable Macros
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Staging; Macros; Compile-time code generation; OCaml
ID SAFE
AB We introduce MacoCaml, a new design and implementation of compile-time code generation for the OCaml language. MacoCaml features a novel combination of macros with phase separation and quotation-based staging, where macros are considered as compile-time bindings, expression cross evaluation phases using staging annotations, and compile-time evaluation happens inside top-level splices. We provide a theoretical foundation for MacoCaml by formalizing a typed source calculus maco that supports interleaving typing and compile-time code generation, references with explicit compile-time heaps, and modules. We study various crucial properties including soundness and phase distinction. We have implemented MacoCaml in the OCaml compiler, and ported two substantial existing libraries to validate our implementation.
C1 [Xie, Ningning] Univ Toronto, Toronto, ON, Canada.
   [White, Leo] Jane St Capital, London, England.
   [Nicole, Olivier] Tarides, Paris, France.
   [Yallop, Jeremy] Univ Cambridge, Cambridge, England.
C3 University of Toronto; University of Cambridge
RP Xie, NN (corresponding author), Univ Toronto, Toronto, ON, Canada.
EM ningningxie@cs.toronto.edu; lwhite@janestreet.com; olivier@chnik.fr;
   jeremy.yallop@cl.cam.ac.uk
RI Nicole, Olivier/KJD-5378-2024
FU Isaac Newton Trust [G101121]; EPSRC [EP/K031724/2]; Natural Sciences and
   Engineering Research Council of Canada; Jane Street Capital
FX This work is funded by the Isaac Newton Trust (grant no. G101121), by
   EPSRC (EP/K031724/2), by the Natural Sciences and Engineering Research
   Council of Canada, by Jane Street Capital, and by Ahrefs.
CR Abrahams D, 2004, C++ template metaprogramming: concepts, tools, and techniques from Boost and beyond
   [Anonymous], 1991, POPL 91, DOI DOI 10.1145/99583.99607
   Burmako Eugene, 2013, P 4 WORKSHOP SCALA M, DOI [10.1145/2489837.2489840, DOI 10.1145/2489837.2489840, 10.1145/ 2489837.2489840]
   Calcagno C, 2003, LECT NOTES COMPUT SC, V2830, P57
   Calcagno C, 2003, J FUNCT PROGRAM, V13, P545, DOI 10.1017/S0956796802004598
   Carette J, 2005, LECT NOTES COMPUT SC, V3676, P256
   Culpepper Ryan, 2007, P 8 WORKSHOP SCHEME
   Davies R, 1996, IEEE S LOG, P184, DOI 10.1109/LICS.1996.561317
   Davies R., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P258, DOI 10.1145/237721.237788
   de Rauglaudre Daniel, 2007, Camlp5-Reference Manua
   Fischbach M, 2011, Arxiv, DOI arXiv:1110.1029
   Flatt M, 2002, ACM SIGPLAN NOTICES, V37, P72, DOI 10.1145/583852.581486
   Flatt M, 2014, ACM SIGPLAN NOTICES, V49, P13, DOI [10.1145/2637365.2517211, 10.1145/2517208.2517211]
   Flatt M, 2012, J FUNCT PROGRAM, V22, P181, DOI 10.1017/S0956796812000093
   Ganz SE, 2001, ACM SIGPLAN NOTICES, V36, P74, DOI 10.1145/507669.507646
   HARPER R, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P341, DOI 10.1145/96709.96744
   Inoue J, 2016, PEPM'16: PROCEEDINGS OF THE 2016 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P103, DOI 10.1145/2847538.2847548
   Jang J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498700
   Kiselyov O, 2017, ACM SIGPLAN NOTICES, V52, P285, DOI 10.1145/3093333.3009880
   Kiselyov O, 2016, LECT NOTES COMPUT SC, V10017, P271, DOI 10.1007/978-3-319-47958-3_15
   Kiselyov O, 2014, LECT NOTES COMPUT SC, V8475, P86, DOI 10.1007/978-3-319-07151-0_6
   Kohlbecker Eugene., 1986, P 1986 ACM C LISP FU, P151
   Kovács A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547641
   Leroy X., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P109, DOI 10.1145/174675.176926
   Lexifi, 2023, LRT: LexiFi runtime types
   Mitchell J. C., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P28, DOI 10.1145/73560.73563
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Parreaux L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158101
   Rompf T, 2011, ACM SIGPLAN NOTICES, V46, P127, DOI 10.1145/1942788.1868314
   Sato Y, 2020, PROCEEDINGS OF THE 2020 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM '20), P1, DOI 10.1145/3372884.3373160
   Sato Yuhi, 2021, P 20 ACM SIGPLAN INT, P184, DOI [10.1145/3486609.3487209, DOI 10.1145/3486609.3487209]
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Stucki N, 2018, PROCEEDINGS OF THE 17TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'18), P14, DOI 10.1145/3278122.3278139
   Taha W, 1998, LECT NOTES COMPUT SC, V1443, P918, DOI 10.1007/BFb0055113
   Vaugon Benoit, 2013, OCAML US DEV WORKSH
   Vouillon Jerome, 2023, Re: A regular expression library for OCaml
   White L, 2015, ELECTRON P THEOR COM, P22, DOI 10.4204/EPTCS.198.2
   White Leo, 2013, OCAML USERS DEVELOPE
   Xie NN, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498723
   Xie Ningning, 2023, MacoCaml: Staging Composable and Compilable Macros, DOI [10.5281/zenodo.7993994, DOI 10.5281/ZENODO.7993994]
   Yallop J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110273
   Yallop J, 2018, SCI COMPUT PROGRAM, V164, P82, DOI 10.1016/j.scico.2017.04.002
   Zhuang HZ, 2022, J ADV NURS, V78, P3261, DOI 10.1111/jan.15250
NR 43
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 209
DI 10.1145/3607851
PG 45
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900022
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Kang, CG
   Oh, H
AF Kang, Chan Gu
   Oh, Hakjoo
TI Modular Component-Based ∼antum Circuit Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Quantum circuit synthesis; Quantum programming
AB article, we present a novel method for synthesizing quantum circuits from user-supplied components. Given input-output state vectors and component quantum gates, our synthesizer aims to construct a quantum circuit that implements the provided functionality in terms of the supplied component gates. To achieve this, we basically use an enumerative search with pruning. To accelerate the procedure, however, we perform the search and pruning at the module level; instead of simply enumerating candidate circuits by appending component gates in sequence, we stack modules, which are groups of gate operations. With this modular approach, we can effectively reduce the search space by directing the search in a way that bridges the gap between the current circuit and the input-output specification. Evaluation on 17 benchmark problems shows that our technique is highly effective at synthesizing quantum circuits. Our method successfully synthesized 16 out of 17 benchmark circuits in 96.6 seconds on average. On the other hand, the conventional, gate-level synthesis algorithm succeeded in 10 problems with an average time of 639.1 seconds. Our algorithm increased the speed of the baseline by 20.3x for the 10 problems commonly solved by both approaches.
C1 [Kang, Chan Gu; Oh, Hakjoo] Korea Univ, Dept Comp Sci & Engn, 145 Anam Ro, Seoul 02841, South Korea.
C3 Korea University
RP Oh, H (corresponding author), Korea Univ, Dept Comp Sci & Engn, 145 Anam Ro, Seoul 02841, South Korea.
EM changukang@korea.ac.kr; hakjoo_oh@korea.ac.kr
FU Institute of Information & communications Technology Planning &
   Evaluation (IITP) - Korea government(MSIT); MSIT(Ministry of Science and
   ICT), Korea, under the ICT Creative Consilience program
   [IITP-2023-2020-0-01819]; National Research Foundation of Korea(NRF) -
   Korea government(MSIT) [2021R1A5A1021944]
FX This work was supported by Institute of Information & communications
   Technology Planning & Evaluation (IITP) grant funded by the Korea
   government(MSIT) (No.2020-0-01337,(SW STAR LAB) Research on
   Highly-Practical Automated Software Repair), the MSIT(Ministry of
   Science and ICT), Korea, under the ICT Creative Consilience
   program(IITP-2023-2020-0-01819) supervised by the IITP(Institute for
   Information & communications Technology Planning & Evaluation), and the
   National Research Foundation of Korea(NRF) grant funded by the Korea
   government(MSIT)(No. 2021R1A5A1021944).
CR Aleksandrowicz Gadi, 2019, Zenodo, DOI 10.5281/ZENODO.2562111
   Bichsel B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P286, DOI 10.1145/3385412.3386007
   Coppersmith D, 1994, arXiv
   Cruz D, 2019, ADV QUANTUM TECHNOL, V2, DOI 10.1002/qute.201900015
   Davis MG, 2020, IEEE INTERNATIONAL CONFERENCE ON QUANTUM COMPUTING AND ENGINEERING (QCE20), P223, DOI 10.1109/QCE49297.2020.00036
   de Brugière TG, 2020, COMPUT PHYS COMMUN, V248, DOI 10.1016/j.cpc.2019.107001
   Developers Cirq, 2022, Zenodo
   Draper T.G., 2000, ARXIV
   Dür W, 2000, PHYS REV A, V62, DOI 10.1103/PhysRevA.62.062314
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Gilyén A, 2019, ACM S THEORY COMPUT, P193, DOI 10.1145/3313276.3316366
   Davis MG, 2019, Arxiv, DOI [arXiv:1912.02727, 10.48550/arXiv.1912.02727, DOI 10.48550/ARXIV.1912.02727]
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Hein M, 2004, PHYS REV A, V69, DOI 10.1103/PhysRevA.69.062311
   Iten R, 2016, PHYS REV A, V93, DOI 10.1103/PhysRevA.93.032318
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Lee W, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434335
   Low GH, 2019, QUANTUM-AUSTRIA, V3, DOI 10.22331/q-2019-07-12-163
   Mastriani M, 2021, SCI REP-UK, V11, DOI 10.1038/s41598-021-01745-x
   McClung James., 2020, THESIS WORCESTER POL
   Möttönen M, 2004, PHYS REV LETT, V93, DOI 10.1103/PhysRevLett.93.130502
   Neeley M, 2010, NATURE, V467, P570, DOI 10.1038/nature09418
   Nielsen M. A, 2011, Quantum Computation and Quantum Information: 10th Anniversary Edition
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Paradis A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P222, DOI 10.1145/3453483.3454040
   Qiskit Transpiler, 2022, TRANSP QISK TRANSP
   QK, 2022, TASK 2 1
   QK, 2022, TASK 1 7
   QK, 2022, TASK 2 3
   Tucci RR, 2005, Arxiv, DOI arXiv:quant-ph/0507171
   Ross NJ, 2015, QUANTUM INF COMPUT, V15, P932
   SE, 2018, CAN STAT 10 M 1 2 MJ
   SE, 2018, CAN I BUILD CIRC GEN
   SE, 2018, I BUILD GAT MATR QIS
   SE, 2020, GEN CONSTR WBAS
   SE, 2020, QUANT CIRC EXPL
   SE, 2018, CREAT QUANT ALG PROD
   SE, 2020, TRANSF 100 STAT 000
   SE, 2019, QUANT CIRC 3 QUB BIT
   Shende VV, 2006, IEEE T COMPUT AID D, V25, P1000, DOI 10.1109/TCAD.2005.855930
   Shor PW, 1997, SIAM J COMPUT, V26, P1484, DOI 10.1137/S0036144598347011
   Smith E., 2021, PREPRINT, DOI DOI 10.1145/3548693
   So S, 2017, LECT NOTES COMPUT SC, V10422, P364, DOI 10.1007/978-3-319-66706-5_18
   Svore K, 2018, RWDSL2018: PROCEEDINGS OF THE REAL WORLD DOMAIN SPECIFIC LANGUAGES WORKSHOP 2018, DOI 10.1145/3183895.3183901
   Udupa A, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2499370.2462174
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Younis E, 2020, Arxiv, DOI arXiv:2003.04462
   Yuan CR, 2022, Arxiv, DOI arXiv:2205.10255
NR 51
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586039
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600014
OA gold
DA 2024-07-18
ER

PT J
AU D'Osualdo, E
   Raad, A
   Vafeiadis, V
AF D'Osualdo, Emanuele
   Raad, Azalea
   Vafeiadis, Viktor
TI The Path to Durable Linearizability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Persistency; Non-Volatile Memory; Px86; Weak Memory Models; Concurrency;
   Linearizability
AB There is an increasing body of literature proposing new and efficient persistent versions of concurrent data structures ensuring that a consistent state can be recovered after a power failure or a crash. Their correctness is typically stated in terms of durable linearizability (DL), which requires that individual library operations appear to be executed atomically in a sequence consistent with the real-time order and, moreover, that recovering from a crash return a state corresponding to a prefix of that sequence. Sadly, however, there are hardly any formal DL proofs, and those that do exist cover the correctness of rather simple persistent algorithms on specific (simplified) persistency models.
   In response, we propose a general, powerful, modular, and incremental proof technique that can be used to guide the development and establish DL. Our technique is (1) general, in that it is not tied to a specific persistency and/or consistency model, (2) powerful, in that it can handle the most advanced persistent algorithms in the literature, (3) modular, in that it allows the reuse of an existing linearizability argument, and (4) incremental, in that the additional requirements for establishing DL depend on the complexity of the algorithm to be verified. We illustrate this technique on various versions of a persistent set, leading to the link-free set of Zuriel et al.
C1 [D'Osualdo, Emanuele; Vafeiadis, Viktor] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Raad, Azalea] Imperial Coll London, London, England.
C3 Imperial College London
RP D'Osualdo, E (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
EM dosualdo@mpi-sws.org; azalea.raad@imperial.ac.uk; viktor@mpi-sws.org
RI D'Osualdo, Emanuele/HOF-1125-2023; Vafeiadis, Viktor/B-5809-2014
OI D'Osualdo, Emanuele/0000-0002-9179-5827; Vafeiadis,
   Viktor/0000-0001-8436-0334
FU European Research Council (ERC) Consolidator Grant for the project
   "PERSIST" under the European Union's Horizon 2020 research and
   innovation programme [101003349]; FLF [MR/V024299/1] Funding Source:
   UKRI; European Research Council (ERC) [101003349] Funding Source:
   European Research Council (ERC)
FX This work was supported by a European Research Council (ERC)
   Consolidator Grant for the project "PERSIST" under the European Union's
   Horizon 2020 research and innovation programme (grant agreement No.
   101003349).
CR Aguilera MarcosK., 2003, STRICT LINEARIZABILI
   Alglave J, 2012, FORM METHOD SYST DES, V41, P178, DOI 10.1007/s10703-012-0161-5
   Batty M, 2013, ACM SIGPLAN NOTICES, V48, P235, DOI 10.1145/2480359.2429099
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Burckhardt S, 2012, LECT NOTES COMPUT SC, V7211, P87, DOI 10.1007/978-3-642-28869-2_5
   Cohen N, 2018, SPAA'18: PROCEEDINGS OF THE 30TH ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P259, DOI 10.1145/3210377.3210400
   Derrick J, 2021, FORM ASP COMPUT, V33, P547, DOI 10.1007/s00165-021-00541-8
   DOsualdo Emanuele, 2022, ARXIV, DOI [10.48550/arxiv.2211.07631, DOI 10.48550/ARXIV.2211.07631]
   Friedman M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1218, DOI 10.1145/3453483.3454105
   Friedman M, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P377, DOI 10.1145/3385412.3386031
   Friedman M, 2018, ACM SIGPLAN NOTICES, V53, P28, DOI 10.1145/3200691.3178490
   Harris Timothy L, 2001, LNCS, DOI DOI 10.1007/3-540-45414-4_21
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Intel, 2015, Persistent Memory Programming
   Izraelevitz Joseph, 2016, Distributed Computing. 30th International Symposium, DISC 2016. Proceedings: LNCS 9888, P313, DOI 10.1007/978-3-662-53426-7_23
   Kawahara T, 2012, MICROELECTRON RELIAB, V52, P613, DOI 10.1016/j.microrel.2011.09.028
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lee BC, 2009, CONF PROC INT SYMP C, P2, DOI 10.1145/1555815.1555758
   Michael M. M., 1996, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, P267, DOI 10.1145/248052.248106
   O'Hearn PW, 2010, PODC 2010: PROCEEDINGS OF THE 2010 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P85, DOI 10.1145/1835698.1835722
   Pelley S, 2014, CONF PROC INT SYMP C, P265, DOI 10.1109/ISCA.2014.6853222
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360561
   Raad A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371079
   Raad A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276507
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290381
   Schellhorn G, 2014, ACM T COMPUT LOG, V15, DOI 10.1145/2629496
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   Storage Networking Industry Association (SNIA), 2017, NVM PROGR MOD NPM
   Strukov DB, 2008, NATURE, V453, P80, DOI 10.1038/nature06932
   Wei Y, 2022, PPOPP'22: PROCEEDINGS OF THE 27TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P309, DOI 10.1145/3503221.3508436
   Zuriel Y, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360554
NR 31
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571219
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500026
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Pulte, C
   Makwana, DC
   Sewell, T
   Memarian, K
   Sewell, P
   Krishnaswami, N
AF Pulte, Christopher
   Makwana, Dhruv C.
   Sewell, Thomas
   Memarian, Kayvan
   Sewell, Peter
   Krishnaswami, Neel
TI CN: Verifying Systems C Code with Separation-Logic Refinement Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE C; verification; separation logic; refinement types; pKVM; Android
ID VERIFICATION; CHECKING; LANGUAGE; MODEL; SEL4
AB Despite significant progress in the verification of hypervisors, operating systems, and compilers, and in verification tooling, there exists a wide gap between the approaches used in verification projects and conventional development of systems software. We see two main challenges in bringing these closer together: verification handling the complexity of code and semantics of conventional systems software, and verification usability. We describe an experiment in verification tool design aimed at addressing some aspects of both: we design and implement CN, a separation-logic refinement type system for C systems software, aimed at predictable proof automation, based on a realistic semantics of ISO C. CN reduces refinement typing to decidable propositional logic reasoning, uses first-class resources to support pointer aliasing and pointer arithmetic, features resource inference for iterated separating conjunction, and uses a novel syntactic restriction of ghost variables in specifications to guarantee their successful inference. We implement CN and formalise key aspects of the type system, including a soundness proof of type checking. To demonstrate the usability of CN we use it to verify a substantial component of Google's pKVM hypervisor for Android.
C1 [Pulte, Christopher; Makwana, Dhruv C.; Sewell, Thomas; Memarian, Kayvan; Sewell, Peter; Krishnaswami, Neel] Univ Cambridge, Cambridge, England.
C3 University of Cambridge
RP Pulte, C (corresponding author), Univ Cambridge, Cambridge, England.
EM Christopher.Pulte@cl.cam.ac.uk; Dhruv.Makwana@cl.cam.ac.uk;
   ThomasSewell@cl.cam.ac.uk; Kayvan.Memarian@cl.cam.ac.uk;
   Peter.Sewell@cl.cam.ac.uk; Neel.Krishnaswami@cl.cam.ac.uk
OI Makwana, Dhruv/0000-0001-7220-4991; Pulte,
   Christopher/0000-0002-7369-183X
FU European Research Council (ERC) under the European Union [101002277];
   European Research Council (ERC) Advanced Grant "ELVER" under the
   European Union's Horizon 2020 research and innovation programme
   [789108]; EPSRC Doctoral Training studentship; Google Research; European
   Research Council (ERC) [101002277] Funding Source: European Research
   Council (ERC)
FX We thank Jean Pichon-Pharabod for valuable discussions. We thank the
   anonymous reviewers for their helpful feedback. Finally, we thank Ben
   Laurie, Sarah de Haas, Hongseok Kim, the pKVM development team, and the
   Android Security and Android Platform teams for their support. This work
   was supported in part by a European Research Council (ERC) Consolidator
   Grant for the project "TypeFoundry", funded under the European Union's
   Horizon 2020 Framework Programme (grant agreement no. 101002277), in
   part by a European Research Council (ERC) Advanced Grant "ELVER" under
   the European Union's Horizon 2020 research and innovation programme
   (grant agreement no. 789108), in part by an EPSRC Doctoral Training
   studentship, and in part by funding from Google Research.
CR Ahmed A, 2007, FUND INFORM, V77, P397
   Amadio Roberto M., 2013, 2 INT C PERS TECHN, P1, DOI [10.1007/978-3- 319-12466- 7_1, DOI 10.1007/978-3-319-12466-7_1]
   Android Open Source, 2022, ANDR 13 REL NOT
   Appel A.W., 2014, Program logics for certified compilers
   Astrauskas V, 2022, LECT NOTES COMPUT SC, V13260, P88, DOI 10.1007/978-3-031-06773-0_5
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Baudin P, 2021, COMMUN ACM, V64, P56, DOI 10.1145/3470569
   Baumann C, 2016, 2016 EUROPEAN CONFERENCE ON NETWORKS AND COMMUNICATIONS (EUCNC), P210, DOI 10.1109/EuCNC.2016.7561034
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Bradley AR, 2006, LECT NOTES COMPUT SC, V3855, P427
   Brotherston J, 2016, ACM SIGPLAN NOTICES, V51, P84, DOI 10.1145/2914770.2837621
   Calcagno C, 2011, LECT NOTES COMPUT SC, V6617, P459, DOI 10.1007/978-3-642-20398-5_33
   Cao QX, 2018, J AUTOM REASONING, V61, P367, DOI 10.1007/s10817-018-9457-5
   Cui S, 2005, LECT NOTES COMPUT SC, V3717, P310
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Deacon Will, 2020, KVM FOR SLID
   Edge Jake, 2020, LINUXWEEKLY NEWS
   Fox A, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P125, DOI 10.1145/3018610.3018621
   Frumin D, 2019, LECT NOTES COMPUT SC, V11423, P60, DOI 10.1007/978-3-030-17184-1_3
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Guanciale R, 2016, J COMPUT SECUR, V24, P793, DOI 10.3233/JCS-160558
   Hawblitzel C., 2014, 11 USENIX S OPERATIN
   Heiser G, 2020, COMMUN ACM, V63, P72, DOI 10.1145/3378426
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Klein G, 2014, ACM T COMPUT SYST, V32, DOI 10.1145/2560537
   Klein G, 2010, COMMUN ACM, V53, P107, DOI 10.1145/1743546.1743574
   Krebbers R., 2015, Ph. D. Dissertation
   Krebbers R, 2016, J AUTOM REASONING, V57, P319, DOI 10.1007/s10817-016-9369-1
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leinenbach D, 2009, LECT NOTES COMPUT SC, V5850, P806, DOI 10.1007/978-3-642-05089-3_51
   Lepigre R, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498681
   Lepigre Rodolphe, 2022, REFINEDC FORM EARL A
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Li Shih-Wei, 2021, 42 IEEE S SECURITY P, P1782, DOI [10.1109/SP40001.2021.00049, DOI 10.1109/SP40001.2021.00049]
   Maksimovic Petar, 2021, ABS210514769 CORR
   Malecha G, 2022, IEEE SECUR PRIV, V20, P33, DOI 10.1109/MSEC.2022.3158196
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Melliès PA, 2015, ACM SIGPLAN NOTICES, V50, P3, DOI 10.1145/2775051.2676970
   Memarian K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290380
   Memarian K, 2016, ACM SIGPLAN NOTICES, V51, P1, DOI [10.1145/2908080.2908081, 10.1145/2980983.2908081]
   Müller P, 2017, NATO SCI PEAC SECUR, V50, P104, DOI 10.3233/978-1-61499-810-5-104
   Müller P, 2016, LECT NOTES COMPUT SC, V9779, P405, DOI 10.1007/978-3-319-41528-4_22
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   O'connor L, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S095679682100023X
   Pulte Christopher, 2022, CN VERIFYING SYSTEMS, DOI [10.5281/zenodo.7320414, DOI 10.5281/ZENODO.7320414]
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Reynolds John C, 2008, An Introduction to Separation Logic
   Reynolds John C., 1978, POPL, P39
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Sammler M, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P825, DOI 10.1145/3519939.3523434
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Tan YK, 2016, ACM SIGPLAN NOTICES, V51, P60, DOI 10.1145/3022670.2951924
   Tao RZ, 2021, PROCEEDINGS OF THE 28TH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, SOSP 2021, P866, DOI 10.1145/3477132.3483560
   Xi HW, 2007, J FUNCT PROGRAM, V17, P215, DOI 10.1017/S0956796806006216
NR 58
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
AR 1
DI 10.1145/3571194
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500001
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Ahrens, E
   Bozga, M
   Iosif, R
   Katoen, JP
AF Ahrens, Emma
   Bozga, Marius
   Iosif, Radu
   Katoen, Joost-Pieter
TI Reasoning about Distributed Reconfigurable Systems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE dynamic reconfiguration; parameterized systems; local reasoning
ID MODEL-CHECKING; ALGORITHM; LOGIC; REO
AB This paper presents a Hoare-style calculus for formal reasoning about reconfiguration programs of distributed systems. Such programs create and delete components and/or interactions (connectors) while the system components change state according to their internal behaviour. Our proof calculus uses a resource logic, in the spirit of Separation Logic, to give local specifications of reconfiguration actions. Moreover, distributed systems with an unbounded number of components are described using inductively defined predicates. The correctness of reconfiguration programs relies on havoc invariants, that are assertions about the ongoing interactions in a part of the system that is not affected by the structural change caused by the reconfiguration. We present a proof system for such invariants in an assume/rely-guarantee style. We illustrate the feasibility of our approach by proving the correctness of real-life distributed systems with reconfigurable (self-adjustable) tree architectures.
C1 [Ahrens, Emma; Katoen, Joost-Pieter] Rhein Westfal TH Aachen, Software Modeling & Verificat MOVES, D-52056 Aachen, Germany.
   [Bozga, Marius; Iosif, Radu] Univ Grenoble Alpes, CNRS, Grenoble INP, VERIMAG, F-38000 Grenoble, France.
C3 RWTH Aachen University; Communaute Universite Grenoble Alpes; Institut
   National Polytechnique de Grenoble; Universite Grenoble Alpes (UGA);
   Centre National de la Recherche Scientifique (CNRS)
RP Ahrens, E (corresponding author), Rhein Westfal TH Aachen, Software Modeling & Verificat MOVES, D-52056 Aachen, Germany.
EM Emma.Ahrens@inst1.edu; Marius.Bozga@univ-grenoble-alpes.fr;
   Radu.Iosif@univ-grenoble-alpes.fr; katoen@cs.rwth-aachen.de
RI ; Katoen, Joost-Pieter/O-3307-2018
OI Ahrens, Emma/0000-0002-6394-3351; Katoen,
   Joost-Pieter/0000-0002-6143-1926; Bozga, Marius/0000-0003-4412-5684
CR Abdulla PA, 2007, LECT NOTES COMPUT SC, V4424, P721
   Aiswarya C., 2015, LIPIcs, V42, P340
   [Anonymous], 1989, CWI Q.
   Arad C. I., 2013, Ph.D. Dissertation
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Bar-Hillel Y., 1961, Zeitschrift fr Phonetik, Sprachwissenschaft und Kommunikationsforschung, V14, P143, DOI [10.1524/stuf.1961.14.14.143, DOI 10.1524/STUF.1961.14.14.143]
   Basu A, 2006, I C SOFTW ENG FORM M, P3
   Bloem Roderick P., 2015, Decidability of parameterized verification.
   Bollig B, 2019, LECT NOTES COMPUT SC, V11425, P115, DOI 10.1007/978-3-030-17127-8_7
   Bozga Marius, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12078), P228, DOI 10.1007/978-3-030-45190-5_13
   Bozga M, 2021, LECT NOTES COMPUT SC, V13077, P95, DOI 10.1007/978-3-030-90636-8_6
   Bozga Marius, 2022, INT JOINT C AUT REAS
   Bozga Marius, 2021, arXiv
   Bozga Marius, 2022, 33 INT C CONC THEOR
   Bradbury J.S., 2004, Proceedings of the 1st ACM SIGSOFT Workshop on Self-managed Systems. WOSS '04, P28, DOI [10.1145/1075405.1075411, DOI 10.1145/1075405.1075411]
   Brotherston J, 2011, J LOGIC COMPUT, V21, P1177, DOI 10.1093/logcom/exq052
   Bucchiarone Antonio, 2008, Electron. Commun. Eur. Assoc. Softw. Sci. Technol., V10
   Butting Arvid, 2017, CEUR WORKSHOP P, V2019, P10
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Calcagno C, 2011, J ACM, V58, DOI 10.1145/2049697.2049700
   Cao Jiannong, 2005, GOP: A Graph-Oriented Programming Model for Parallel and Distributed Systems, P21, DOI [10.1007/0-387-28967-4_2, DOI 10.1007/0-387-28967-4_2]
   Cavalcante E, 2015, 2015 12TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA), P31, DOI 10.1109/WICSA.2015.21
   CHANG E, 1979, COMMUN ACM, V22, P281, DOI 10.1145/359104.359108
   Chen YF, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P76, DOI 10.23919/FMCAD.2017.8102244
   Chilton C, 2014, SCI COMPUT PROGRAM, V91, P115, DOI 10.1016/j.scico.2013.12.010
   Clarke D, 2008, FUND INFORM, V82, P361
   D'Antoni L, 2021, COMMUN ACM, V64, P86, DOI 10.1145/3419404
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   Demri S, 2018, LECT NOTES COMPUT SC, V10803, P476, DOI 10.1007/978-3-319-89366-2_26
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   DOLEV D, 1982, J ALGORITHM, V3, P245, DOI 10.1016/0196-6774(82)90023-2
   Dormoy Julien, 2012, Formal Aspects of Component Software. 7th International Workshop, FACS 2010. Revised Selected Papers, P200, DOI 10.1007/978-3-642-27269-1_12
   Echenim M., 2020, EPiC Series in Computing, V73, P191
   El Ballouli R, 2021, INT J SOFTW TOOLS TE, V23, P701, DOI 10.1007/s10009-020-00596-7
   El-Hokayem A, 2021, 36TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, SAC 2021, P1419, DOI 10.1145/3412841.3442017
   Farka F, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434286
   Feng XY, 2007, LECT NOTES COMPUT SC, V4421, P173
   Foerster Klaus-Tycho, 2019, ACM SIGACT News, V50, P62, DOI 10.1145/3351452.3351464
   Foster Ian, 2002, GRID today, V1, P32
   Gorogiannis N, 2011, LECT NOTES COMPUT SC, V6887, P25, DOI 10.1007/978-3-642-23702-7_7
   Hirsch D., 1998, 3 INT WORKSH SOFTW A, P69, DOI [10.1145/288408.288426, DOI 10.1145/288408.288426]
   Iosif R, 2022, Arxiv, DOI [arXiv:2208.01520, 10.48550/ARXIV.2208.01520, DOI 10.48550/ARXIV.2208.01520]
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Jacob Riko, 2014, Theory of Computing Systems (TOCS)
   Jones C.B., 1981, Ph.D. thesis
   Katelaan J., 2020, EPiC Series in Computing, V73, P390, DOI [DOI 10.29007/VKMJ,HTTPS, 10.29007/vkmj, DOI 10.29007/VKMJ]
   Konnov Igor V., 2016, LIPICS, V30
   Krause C, 2011, SCI COMPUT PROGRAM, V76, P23, DOI 10.1016/j.scico.2009.10.006
   Kruskal J. B., 1956, Proceedings of the American Mathematical Society, V7, P48
   LAMPORT L, 1982, ACM T PROGR LANG SYS, V4, P382, DOI 10.1145/357172.357176
   Lamport L, 1998, ACM T COMPUT SYST, V16, P133, DOI 10.1145/279227.279229
   Lanoix A, 2011, ELECTRON NOTES THEOR, V279, P43, DOI 10.1016/j.entcs.2011.11.011
   Le Metayer D, 1998, IEEE T SOFTWARE ENG, V24, P521, DOI 10.1109/32.708567
   Magee J., 1996, Software Engineering Notes, V21, P3, DOI 10.1145/250707.239104
   Mavridou A, 2017, J LOG ALGEBR METHODS, V86, P2, DOI 10.1016/j.jlamp.2016.05.002
   Michail Othon, 2020, PODC '20. Proceedings of the 39th Symposium on Principles of Distributed Computing, P448, DOI 10.1145/3382734.3405744
   Noormohammadpour M, 2018, IEEE COMMUN SURV TUT, V20, P1492, DOI 10.1109/COMST.2017.2782753
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   O'Hearn PW, 2004, ACM SIGPLAN NOTICES, V39, P268, DOI [10.1145/982962.964024, 10.1145/1498926.1498929]
   OHearn Peter W., 2016, ACM SIGLOG NEWS, V3, P47, DOI DOI 10.1145/2984450.2984457
   Owicki Susan, 1978, An Axiomatic Proof Technique for Parallel Programs, P130
   Peres B, 2019, IEEE INFOCOM SER, P145, DOI [10.1109/infocom.2019.8737417, 10.1109/INFOCOM.2019.8737417]
   PRIM RC, 1957, AT&T TECH J, V36, P1389, DOI 10.1002/j.1538-7305.1957.tb01515.x
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Schmid S, 2016, IEEE ACM T NETWORK, V24, P1421, DOI 10.1109/TNET.2015.2410313
   Sergey I, 2016, ACM SIGPLAN NOTICES, V51, P92, DOI 10.1145/3022671.2983999
   SHTADLER Z, 1990, LECT NOTES COMPUT SC, V407, P151
   SLEATOR DD, 1985, J ACM, V32, P652, DOI 10.1145/3828.3835
   Taentzer G, 2000, LECT NOTES COMPUT SC, V1764, P179
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   Wermelinger M., 2001, Software Engineering Notes, V26, P21, DOI 10.1145/503271.503213
   Wermelinger M, 2002, SCI COMPUT PROGRAM, V44, P133, DOI 10.1016/S0167-6423(02)00036-9
   Wermelinger M, 1998, FOURTH INTERNATIONAL CONFERENCE ON CONFIGURABLE DISTRIBUTED SYSTEMS, PROCEEDINGS, P111, DOI 10.1109/CDS.1998.675764
NR 75
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 130
DI 10.1145/3563293
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200007
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Bierhoff, K
AF Bierhoff, Kevin
TI Wildcards Need Witness Protection
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Java Wildcards; Null; Existential Types
ID JAVA
AB In this paper, we show that the unsoundness discovered by Amin and Tate (2016) in Java's wildcards is avoidable, even in the absence of a nullness-aware type system. The key insight of this paper is that soundness in type systems that implicitly introduce existential types through subtyping hinges on still making sure there are suitable witness types when introducing existentially quantified type variables. To show that this approach is viable, this paper formalizes a core calculus and proves it sound. We used a static analysis based on our approach to look for potential issues in a vast corpus of Java code and found none (with 1 false positive). This confirms both that Java's unsoundness has minimal practical consequence, and that our approach can avoid it entirely with minimal false positives.
C1 [Bierhoff, Kevin] Google, 1600 Amphitheatre Pkwy, Mountain View, CA 94043 USA.
C3 Google Incorporated
RP Bierhoff, K (corresponding author), Google, 1600 Amphitheatre Pkwy, Mountain View, CA 94043 USA.
EM kmb@google.com
CR Abel Nieto, 2020, 34 EUR C OBJ OR PROG, V166, DOI [10.4230/LIPIcs.ECOOP.2020.25, DOI 10.4230/LIPICS.ECOOP.2020.25]
   Amin N, 2016, ACM SIGPLAN NOTICES, V51, P838, DOI 10.1145/3022671.2984004
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Cameron N, 2008, LECT NOTES COMPUT SC, V5142, P2, DOI 10.1007/978-3-540-70592-5_2
   Chalin P, 2007, LECT NOTES COMPUT SC, V4609, P227
   Drossopoulou S, 1999, THEOR PRACT OBJ SYST, V5, P3, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<3::AID-TAPO2>3.0.CO;2-T
   Fähndrich M, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P337
   Fähndrich M, 2003, ACM SIGPLAN NOTICES, V38, P302, DOI 10.1145/949343.949332
   Gosling J., 2021, The Java language specification, V17
   Harper R, 2016, Practical Foundations for Programming Languages
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Liu FY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428243
   Papi Matthew M., 2008, P 2008 INT S SOFTW T, P201, DOI DOI 10.1145/1390630.1390656
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Smith Daniel., 2008, OOPSLA 2008, P505, DOI DOI 10.1145/1449764.1449804
   Summers AJ, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P1013
   Tate R, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P614
   Tate Ross, 2013, FOOL 13
   Torgersen Mads, 2005, FOOL: Foundations of Object-Oriented Languages
NR 19
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 138
DI 10.1145/3563301
PG 22
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200015
OA gold
DA 2024-07-18
ER

PT J
AU Chaliasos, S
   Gervais, A
   Livshits, B
AF Chaliasos, Stefanos
   Gervais, Arthur
   Livshits, Benjamin
TI A Study of Inline Assembly in Solidity Smart Contracts
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Solidity; Smart Contracts; Inline Assembly; Empirical Studies
AB The Solidity programming language is the most widely used language for smart contract development. Improving smart contracts' correctness, security, and performance has been the driving force for research in vulnerability detection, program analysis, and compiler techniques for Solidity. Similar to system-level languages such as C, Solidity enables the embedding of low-level code in programs, in the form of inline assembly code. Developers use inline assembly for low-level optimizations, extending the Solidity language through libraries, and using blockchain-specific opcodes only available through inline assembly. Nevertheless, inline assembly fragments are not well understood by an average developer and can introduce security threats as well as affect the optimizations that can be applied to programs by the compiler; it also significantly limits the effectiveness of source code static analyzers that operate on the Solidity level. A better understanding of how inline assembly is used in practice could in turn increase the performance, security, and support for inline assembly in Solidity.
   This paper presents a large-scale quantitative study of the use of inline assembly in 6.8M smart contracts deployed on the Ethereum blockchain. We find that 23% of the analyzed smart contracts contain inline assembly code, and that the use of inline assembly has become more widespread over time. We further performed a manual qualitative analysis for identifying usage patterns of inline assembly in Solidity smart contracts. Our findings are intended to help practitioners understand when they should use inline assembly and guide developers of Solidity tools in prioritizing which parts of inline assembly to implement first. Finally, the insights of this study could be used to enhance the Solidity language, improve the Solidity compiler, and to open up new research directions by driving future researchers to build appropriate methods and techniques for replacing inline assembly in Solidity programs when there is no real necessity to use it.
C1 [Chaliasos, Stefanos; Gervais, Arthur; Livshits, Benjamin] Imperial Coll, London, England.
C3 Imperial College London
RP Chaliasos, S (corresponding author), Imperial Coll, London, England.
EM s.chaliasos21@imperial.ac.uk; arthur@gervais.cc;
   b.livshits@imperial.ac.uk
OI Gervais, Arthur/0000-0002-3565-3410; Chaliasos,
   Stefanos/0000-0001-5414-4120
CR Akshintala A, 2019, SYSTOR '19: PROCEEDINGS OF THE 12TH ACM INTERNATIONAL SYSTEMS AND STORAGE CONFERENCE, P68, DOI 10.1145/3319647.3325833
   Bartoletti Massimo, 2017, Financial Cryptography and Data Security. FC 2017 International Workshops WAHC, BITCOIN, VOTING, WTSC, and TA. Revised Selected Papers: LNCS 10323, P494, DOI 10.1007/978-3-319-70278-0_31
   Brent Lexi, 2020, PLDI '20: Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation, P454, DOI 10.1145/3385412.3385990
   Brent Lexi, 2018, ARXIV180903981
   Chaliasos S, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485500
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Corteggiani N, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P309
   Durieux T, 2020, PROC INT CONF SOFTW, P530, DOI 10.1145/3377811.3380364
   Feist J, 2019, 2019 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB 2019), P8, DOI 10.1109/WETSEB.2019.00008
   Feldt R, 2010, 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING & KNOWLEDGE ENGINEERING (SEKE 2010), P374
   Goel A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485502
   Grech N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276486
   Hegedus P, 2019, TECHNOLOGIES, V7, DOI 10.3390/technologies7010006
   Jensen Simon Holm, 2012, International Symposium on Software Testing and Analysis, ISSTA 2012, Minneapolis, MN, USA, July 15-20, 2012, P34, DOI DOI 10.1145/2338965.2336758
   Kell S, 2016, ACM SIGPLAN NOTICES, V51, P607, DOI 10.1145/3022671.2983996
   Mariano B, 2020, IEEE INT CONF AUTOM, P262, DOI 10.1145/3324884.3416626
   Meawad F, 2012, ACM SIGPLAN NOTICES, V47, P607, DOI 10.1145/2398857.2384660
   Nakamoto S, 2008, BITCOIN PEER TO PEER, DOI DOI 10.1007/S10838-008-9062-0
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   Pinna A, 2019, IEEE ACCESS, V7, P78194, DOI 10.1109/ACCESS.2019.2921936
   Recoules F, 2021, PROC INT CONF SOFTW, P1236, DOI 10.1109/ICSE43902.2021.00113
   Recoules F, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P589, DOI 10.1109/ASE.2019.00060
   RICHARDS G, 2011, P 25 EUR C OBJ OR PR, V6813, P52
   Richards G, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P1, DOI 10.1145/1806596.1806598
   Rigger Manuel, 2019, ESEC/FSE 2019: Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, P74, DOI 10.1145/3338906.3338907
   Rigger M, 2018, ACM SIGPLAN NOTICES, V53, P84, DOI [10.1145/3296975.3186418, 10.1145/3186411.3186418]
   Solidity, 2022, SOL INL ASS DOC
   Szabo N., 1997, First Monday, V2
   Tikhomirov S, 2018, 2018 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB), P9, DOI 10.1145/3194113.3194115
   Tonelli Roberto, 2018, ARXIV180201517, DOI [10.13140/RG.2.2.25506.12483, DOI 10.13140/RG.2.2.25506.12483]
   Tsankov P, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P67, DOI 10.1145/3243734.3243780
   Wood G., 2014, Ethereum project yellow paper, V151, P1
   Zou WQ, 2021, IEEE T SOFTWARE ENG, V47, P2084, DOI 10.1109/TSE.2019.2942301
NR 33
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 165
DI 10.1145/3563328
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200042
OA gold
DA 2024-07-18
ER

PT J
AU Koppel, J
   Guo, Z
   De Vries, E
   Solar-Lezama, A
   Polikarpova, N
AF Koppel, James
   Guo, Zheng
   de Vries, Edsko
   Solar-Lezama, Armando
   Polikarpova, Nadia
TI Searching Entangled Program Spaces
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; e-graphs; Haskell; type systems
ID TREE AUTOMATA
AB Many problem domains, including program synthesis and rewrite-based optimization, require searching astronomically large spaces of programs. Existing approaches often rely on building specialized data structures-version-space algebras, finite tree automata, or e-graphs-to compactly represent such spaces. At their core, all these data structures exploit independence of subterms; as a result, they cannot efficiently represent more complex program spaces, where the choices of subterms are entangled.
   We introduce equality-constrained tree automata (ECTAs), a new data structure, designed to compactly represent large spaces of programs with entangled subterms. We present efficient algorithms for extracting programs from ECTAs, implemented in a performant Haskell library, ecta. Using the ecta library, we construct Hectare, a type-driven program synthesizer for Haskell. Hectare significantly outperforms a state-of-the-art synthesizer Hoogle+-providing an average speedup of 8x-despite its implementation being an order of magnitude smaller.
C1 [Koppel, James; Solar-Lezama, Armando] MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
   [Guo, Zheng; Polikarpova, Nadia] Univ Calif San Diego, La Jolla, CA USA.
   [de Vries, Edsko] Well Typed LLP, London, England.
C3 Massachusetts Institute of Technology (MIT); University of California
   System; University of California San Diego
RP Koppel, J (corresponding author), MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
EM jkoppel@mit.edu; zhg069@eng.ucsd.edu; edsko@well-typed.com;
   asolar@csail.mit.edu; npolikarpova@eng.ucsd.edu
OI Guo, Zheng/0000-0002-0927-4011; Solar Lezama,
   Armando/0000-0001-7604-8252; de Vries, Edsko/0000-0003-3979-3397
FU US Air Force; AFRL/RIKE; DARPA [FA8750-20-C-0208]; National Science
   Foundation [1943623]; Division of Computing and Communication
   Foundations; Direct For Computer & Info Scie & Enginr [1943623] Funding
   Source: National Science Foundation
FX Thank you to Joshua Pollock for discovering and informing us of the
   connection between e-graphs and tree automata. Without this initial
   insight, our discoveries in this paper may have never occurred. This
   work has been supported by the US Air Force, AFRL/RIKE, DARPA under
   Contract No. FA8750-20-C-0208, and the National Science Foundation under
   Grant No. 1943623. Any opinions, findings and conclusions or
   recommendations expressed in this material are those of the author(s)
   and do not necessarily reflect the views of the US Air Force, AFRL/RIKE,
   DARPA or NSF.
CR Adams MD, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133906
   BACHMAIR L, 1994, J ACM, V41, P236, DOI 10.1145/174652.174655
   Barguñó L, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(2:01)2013
   Barguñó L, 2010, IEEE S LOG, P263, DOI 10.1109/LICS.2010.28
   Bogaert B, 1999, LECT NOTES COMPUT SC, V1578, P150
   Bogaert Bruno, 1992, ANN S THEORETICAL AS, P159, DOI [10.1007/3-540-55210-3_181, DOI 10.1007/3-540-55210-3_181]
   Dauchet M, 1995, J SYMB COMPUT, V20, P215, DOI 10.1006/jsco.1995.1048
   Dauchet Max., 1993, FRENCH SCH THEORETIC, P95, DOI [10.1007/3-540-59340-3_8, DOI 10.1007/3-540-59340-3_8]
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Ferdowsifard K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485530
   Feuillade G, 2004, J AUTOM REASONING, V33, P341, DOI 10.1007/s10817-004-6246-0
   Geser A, 2007, INFORM COMPUT, V205, P512, DOI 10.1016/j.ic.2006.08.007
   Gissurarson MP, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P179, DOI 10.1145/3242744.3242760
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Guo Z, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371080
   Heineman GT, 2016, LECT NOTES COMPUT SC, V9952, P303, DOI 10.1007/978-3-319-47166-2_21
   James MB, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428273
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Koppel James, 2021, ARXIV, DOI [10.48550/ARXIV.2107.12568, DOI 10.48550/ARXIV.2107.12568]
   Koppel James, 2022, ARXIV, DOI [10.48550/ARXIV.2206.07828, DOI 10.48550/ARXIV.2206.07828]
   Krentel M W, 1986, P 18 ANN ACM S THEOR, P69
   Lau T, 2003, MACH LEARN, V53, P111, DOI 10.1023/A:1025671410623
   Mitchell Neil., 2004, HOOGL
   Nandi C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485496
   Nandi C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P31, DOI 10.1145/3385412.3386012
   NELSON G, 1980, J ACM, V27, P356, DOI 10.1145/322186.322198
   Nieuwenhuis R, 2006, J ACM, V53, P937, DOI 10.1145/1217856.1217859
   PAAKKI J, 1995, ACM COMPUT SURV, V27, P196, DOI 10.1145/210376.197409
   Pollock J., 2021, E GRAPHS ARE MINIMAL
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Premtoon V, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1066, DOI 10.1145/3385412.3386001
   Reuss A, 2010, LECT NOTES COMPUT SC, V6397, P581, DOI 10.1007/978-3-642-16242-8_41
   Tate R, 2009, ACM SIGPLAN NOTICES, V44, P264, DOI 10.1145/1594834.1480915
   Urzyczyn P, 1997, LECT NOTES COMPUT SC, V1210, P373
   Van Wyk E, 2010, SCI COMPUT PROGRAM, V75, P39, DOI 10.1016/j.scico.2009.07.004
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
   Wang XY, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133886
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Yang Yichen, 2021, P MACHINE LEARNING S, V3, P255
NR 40
TC 6
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 91
DI 10.1145/3547622
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000002
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Brachthäuser, JI
   Schuster, P
   Lee, E
   Boruch-Gruszecki, A
AF Brachthaeuser, Jonathan Immanuel
   Schuster, Philipp
   Lee, Edward
   Boruch-Gruszecki, Aleksander
TI Effects, Capabilities, and Boxes From Scope-Based Reasoning to
   Type-Based Reasoning and Back
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE effect systems; effect polymorphism; second-class values; capabilities
AB Reasoning about the use of external resources is an important aspect of many practical applications. Effect systems enable tracking such information in types, but at the cost of complicating signatures of common functions. Capabilities coupled with escape analysis offer safety and natural signatures, but are often overly coarse grained and restrictive. We present System C, which builds on and generalizes ideas from type-based escape analysis and demonstrates that capabilities and effects can be reconciled harmoniously. By assuming that all functions are second class, we can admit natural signatures for many common programs. By introducing a notion of boxed values, we can lift the restrictions of second-class values at the cost of needing to track degree-of-impurity information in types. The system we present is expressive enough to support effect handlers in full capacity. We practically evaluate System C in an implementation and prove its soundness.
C1 [Brachthaeuser, Jonathan Immanuel; Schuster, Philipp] Univ Tubingen, Tubingen, Germany.
   [Lee, Edward] Univ Waterloo, Waterloo, ON, Canada.
   [Boruch-Gruszecki, Aleksander] Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
C3 Eberhard Karls University of Tubingen; University of Waterloo; Swiss
   Federal Institutes of Technology Domain; Ecole Polytechnique Federale de
   Lausanne
RP Brachthäuser, JI (corresponding author), Univ Tubingen, Tubingen, Germany.
OI Brachthauser, Jonathan Immanuel/0000-0001-9128-0391; Boruch-Gruszecki,
   Aleksander/0000-0001-5769-6684; Schuster, Philipp/0000-0001-8011-0506
FU Deutsche Forschungsgemeinschaft (DFG s German Research Foundation)
   [DFG-448316946]
FX The work on this project was supported by the Deutsche
   Forschungsgemeinschaft (DFG s German Research Foundation) project number
   DFG-448316946.
CR Ahman D, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434305
   [Anonymous], 1992, Handbook of Logic in Computer Science
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   Bertot Y., 2004, TEXT THEORET COMP S
   Biernacki D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371116
   Brachthäuser JI, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276481
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Brachthäuser JI, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000027
   Brachthäuser JI, 2017, SCALA'17: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P67, DOI 10.1145/3136000.3136007
   Brachthauser Jonathan Immanuel, 2022, EXTENDED TECHNICAL R
   Brachthauser Jonathan Immanuel, 2019, MSRTR20197
   Choudhury V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408993
   Coblenz Michael, 2016, 2016 IEEE ACM 38 INT
   Cook William R, 2009, P C OBJ OR PROGR SYS
   Crary K., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P262, DOI 10.1145/292540.292564
   DENNIS JB, 1966, COMMUN ACM, V9, P143, DOI 10.1145/365230.365252
   Dolan Stephen, 2017, ML WORKSH
   Dyvbig RK, 2007, J FUNCT PROGRAM, V17, P687, DOI 10.1017/S0956796807006259
   Felleisen Matthias, 1988, Principles of Programming Languages (POPL), DOI DOI 10.1145/73560.73576
   Gaboardi M, 2016, ACM SIGPLAN NOTICES, V51, P476, DOI 10.1145/3022670.2951939
   Gordon Colin S., 2020, 34 EUR C OBJ OR PROG, V10
   Gunter C. A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P12, DOI 10.1145/224164.224173
   Hannan John., 1998, J FUNCT PROGRAM, V8
   Kiselyov Oleg, 2006, P INT C FUNCTIONAL P
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Leijen Daan, 2017, P THEWORKSHOP TYPE D
   Leijen Daan., 2005, P S TRENDS FUNCT PRO
   Levy Paul Blain, 1999, TYPED LAMBDA CALCULI
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Lindley Sam, 2018, DAGSTUHL REPORTS, V8, P4
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Melicher D., 2017, 31 EUR C OBJ OR PROG
   Miller M.S., 2006, Robust Composition: Towards a Unified Approach to Access Control and Concurrency Control
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Nielson Flemming., 1999, PRINCIPLES PROGRAM A
   Odersky Martin, 2021, SCALA 2021: Proceedings of the 12th ACM SIGPLAN International Symposium on Scala, DOI 10.1145/3486610.3486893
   Osvald L, 2017, SCALA'17: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P13, DOI 10.1145/3136000.3136010
   Osvald Leo, 2016, P C OBJ OR PROGR SYS
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin Gordon, 2009, EUROPEAN S PROGRAMMI, p80s94
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Rytz Lukas., 2012, P EUR C OBJ OR PROGR
   Scherer Gabriel., 2013, LOGIC PROGRAMMING AR
   Sitaram Dorai., 1993, P C PROGRAMMING LANG
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xie NN, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408981
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
   Zhang YZ, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428207
   Zhang Yizhou., 2016, P C PROGR LANG DES I
   Zyuzin N, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473580
NR 56
TC 8
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 76
DI 10.1145/3527320
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300012
OA gold
DA 2024-07-18
ER

PT J
AU Zhang, YH
   Wang, YR
   Willsey, M
   Tatlock, Z
AF Zhang, Yihong
   Wang, Yisu Remy
   Willsey, Max
   Tatlock, Zachary
TI Relational E-matching
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE E-matching; Relational Join Algorithms
ID JOIN
AB We present a new approach to e-matching based on relational join; in particular, we apply recent database query execution techniques to guarantee worst-case optimal run time. Compared to the conventional backtracking approach that always searches the e-graph "top downz, our new relational e-matching approach can better exploit pattern structure by searching the e-graph according to an optimized query plan. We also establish the first data complexity result for e-matching, bounding run time as a function of the e-graph size and output size. We prototyped and evaluated our technique in the state-of-the-art egg e-graph framework. Compared to a conventional baseline, relational e-matching is simpler to implement and orders of magnitude faster in practice.
C1 [Zhang, Yihong; Wang, Yisu Remy; Willsey, Max; Tatlock, Zachary] Univ Washington, Seattle, WA 98195 USA.
C3 University of Washington; University of Washington Seattle
RP Zhang, YH (corresponding author), Univ Washington, Seattle, WA 98195 USA.
EM yz489@cs.washington.edu; remywang@cs.washington.edu;
   mwillsey@cs.washington.edu; ztatlock@cs.washington.edu
OI Zhang, Yihong/0009-0006-5928-4396; Willsey, Max/0000-0001-8066-4218;
   Tatlock, Zachary/0000-0002-4731-0124
FU Applications Driving Architectures (ADA) Research Center, a JUMP Center
   - SRC; DARPA; National Science Foundation [1749570]; Direct For Computer
   & Info Scie & Enginr; Division of Computing and Communication
   Foundations [1749570] Funding Source: National Science Foundation
FX This work was supported by the Applications Driving Architectures (ADA)
   Research Center, a JUMP Center co-sponsored by SRC and DARPA. This
   material is based upon work supported by the National Science Foundation
   under Grant No. 1749570. Any opinions, findings, and conclusions or
   recommendations expressed in this material are those of the author(s)
   and do not necessarily reflect the views of the National Science
   Foundation.
CR Aberger CR, 2017, ACM T DATABASE SYST, V42, DOI 10.1145/3129246
   Amler Andreas., 2017, THESIS
   Antoniadis Tony, 2017, P 6 ACM SIGPLAN INT, P25, DOI [DOI 10.1145/3088515.3088522, 10.1145/3088515.3088522]
   Atserias A, 2008, ANN IEEE SYMP FOUND, P739, DOI 10.1109/FOCS.2008.43
   Avgustinov Pavel, 2016, 30 EUR C OBJ OR PROG
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   CERI S, 1991, PROC INT CONF VERY L, P577
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Moura L, 2007, LECT NOTES ARTIF INT, V4603, P183
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Freitag M, 2020, PROC VLDB ENDOW, V13, P1891, DOI 10.14778/3407790.3407797
   Kozen Dexter, 1977, P 9 ANN ACM S THEOR, P164, DOI DOI 10.1145/800105.803406
   Mhedhbi Amine, 2019, ARXIV190302076V2CSDB
   Moskal M, 2008, ELECTRON NOTES THEOR, V198, P19, DOI 10.1016/j.entcs.2008.04.078
   Nandi C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P31, DOI 10.1145/3385412.3386012
   Nappa P, 2019, INT CONFER PARA, P82, DOI 10.1109/PACT.2019.00015
   Ngo HQ, 2018, J ACM, V65, DOI 10.1145/3180143
   Ngo HQ, 2013, SIGMOD REC, V42, P5, DOI 10.1145/2590989.2590991
   Papadimitriou CH, 1999, J COMPUT SYST SCI, V58, P407, DOI 10.1006/jcss.1999.1626
   Rümmer P, 2012, LECT NOTES COMPUT SC, V7180, P359, DOI 10.1007/978-3-642-28717-6_28
   Salem K, 2000, SIGMOD RECORD, V29, P129, DOI 10.1145/335191.335393
   TARJAN RE, 1975, J ACM, V22, P215, DOI 10.1145/321879.321884
   Tate R, 2009, ACM SIGPLAN NOTICES, V44, P264, DOI 10.1145/1594834.1480915
   Urma Raoul-Gabriel, 2013, EXPRESSIVE SCALABLE
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Yang Yichen, ARXIV210101332
   Zhuge Y., 1995, SIGMOD Record, V24, P316, DOI 10.1145/568271.223848
NR 27
TC 5
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 35
DI 10.1145/3498696
PG 22
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900036
OA gold
DA 2024-07-18
ER

PT J
AU Gao, X
   Radhakrishna, A
   Soares, G
   Shariffdeen, R
   Gulwani, S
   Roychoudhury, A
AF Gao, Xiang
   Radhakrishna, Arjun
   Soares, Gustavo
   Shariffdeen, Ridwan
   Gulwani, Sumit
   Roychoudhury, Abhik
TI APIFIX: Output-Oriented Program Synthesis for Combating Breaking Changes
   in Libraries
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE API usage adaptation; Breaking changes; Program transformation; Program
   synthesis; Programming by example
ID SUPPORT
AB Use of third-party libraries is extremely common in application software. The libraries evolve to accommodate new features or mitigate security vulnerabilities, thereby breaking the Application Programming Interface (API) used by the software. Such breaking changes in the libraries may discourage client code from using the new library versions thereby keeping the application vulnerable and not up-to-date. We propose a novel output-oriented program synthesis algorithm to automate API usage adaptations via program transformation. Our aim is not only to rely on the few example human adaptations of the clients from the old library version to the new library version, since this can lead to over-fitting transformation rules. Instead, we also rely on example usages of the new updated library in clients, which provide valuable context for synthesizing and applying the transformation rules. Our tool APIFIX provides an automated mechanism to transform application code using the old library versions to code using the new library versions - thereby achieving automated API usage adaptation to fix the effect of breaking changes. Our evaluation shows that the transformation rules inferred by APIFIX achieve 98.7% precision and 91.5% recall. By comparing our approach to state-of-the-art program synthesis approaches, we show that our approach significantly reduces over-fitting while synthesizing transformation rules for API usage adaptations.
C1 [Gao, Xiang; Shariffdeen, Ridwan; Roychoudhury, Abhik] Natl Univ Singapore, Singapore, Singapore.
   [Radhakrishna, Arjun; Soares, Gustavo; Gulwani, Sumit] Microsoft, Redmond, WA USA.
C3 National University of Singapore; Microsoft
RP Gao, X (corresponding author), Natl Univ Singapore, Singapore, Singapore.
EM gaoxiang@comp.nus.edu.sg; arradha@microsoft.com;
   gustavo.soares@microsoft.com; ridwan@comp.nus.edu.sg;
   sumitg@microsoft.com; abhik@comp.nus.edu.sg
OI Radhakrishna, Arjun/0000-0002-5559-5932; Shariffdeen,
   Ridwan/0000-0001-5409-4864
CR Alur Rajeev, 2013, P ACM PROGR LANG
   [Anonymous], 2020, REFAZER PROGRAM SYNT
   Bavishi R, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P613, DOI 10.1145/3338906.3338952
   Cerny Pavol, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P243, DOI 10.1007/978-3-642-22110-1_20
   Dagenais B, 2011, ACM T SOFTW ENG METH, V20, DOI 10.1145/2000799.2000805
   Dagenais B, 2009, PROC INT CONF SOFTW, P599, DOI 10.1109/ICSE.2009.5070565
   Falleri Jean-Remy, 2014, P 29 ACM IEEE INT C, P313
   Fazzini M, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P204, DOI 10.1145/3293882.3330571
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Gao X, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428287
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P317, DOI 10.1145/1925844.1926423
   Haryono SA, 2020, INT C PROGRAM COMPRE, P401, DOI 10.1145/3387904.3389285
   Henkel J, 2005, PROC INT CONF SOFTW, P274
   Hoan AN, 2010, ACM SIGPLAN NOTICES, V45, P302, DOI 10.1145/1932682.1869486
   Kula RG, 2018, EMPIR SOFTW ENG, V23, P384, DOI 10.1007/s10664-017-9521-5
   Long F, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P727, DOI 10.1145/3106237.3106253
   Meng N, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P502, DOI 10.1109/ICSE.2013.6606596
   Meng N, 2011, ACM SIGPLAN NOTICES, V46, P329, DOI 10.1145/1993316.1993537
   Miltner A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360569
   Plotkin G. D., 1970, Machine Intelligence, V5, P153
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Singh R, 2016, PROC VLDB ENDOW, V9, P816, DOI 10.14778/2977797.2977807
   Singh Rishabh, 2011, FSE, P289, DOI DOI 10.1145/2025113.2025153
   Solar-Lezama A, 2005, ACM SIGPLAN NOTICES, V40, P281, DOI 10.1145/1064978.1065045
   Solar-Lezama A, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P136, DOI 10.1145/1375581.1375599
   Xavier L, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P138, DOI 10.1109/SANER.2017.7884616
   Xu SZ, 2019, INT C PROGRAM COMPRE, P335, DOI 10.1109/ICPC.2019.00052
NR 27
TC 2
Z9 2
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 161
DI 10.1145/3485538
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200063
OA gold
DA 2024-07-18
ER

PT J
AU Koparkar, C
   Rainey, M
   Vollmer, M
   Kulkarni, M
   Newton, RR
AF Koparkar, Chaitanya
   Rainey, Mike
   Vollmer, Michael
   Kulkarni, Milind
   Newton, Ryan R.
TI Efficient Tree-Traversals: Reconciling Parallelism and Dense Data
   Representations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Parallelism; Region Calculus; Compilers; Data Representation
AB Recent work showed that compiling functional programs to use dense, serialized memory representations for recursive algebraic datatypes can yield significant constant-factor speedups for sequential programs. But serializing data in a maximally dense format consequently serializes the processing of that data, yielding a tension between density and parallelism. This paper shows that a disciplined, practical compromise is possible. We present Parallel Gibbon, a compiler that obtains the benefits of dense data formats and parallelism. We formalize the semantics of the parallel location calculus underpinning this novel implementation strategy, and show that it is type-safe. Parallel Gibbon exceeds the parallel performance of existing compilers for purely functional programs that use recursive algebraic datatypes, including, notably, abstract-syntax-tree traversals as in compilers.
C1 [Koparkar, Chaitanya] Indiana Univ, Bloomington, IN 47405 USA.
   [Rainey, Mike] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Vollmer, Michael] Univ Kent, Sch Comp, Canterbury, Kent, England.
   [Kulkarni, Milind; Newton, Ryan R.] Purdue Univ, W Lafayette, IN 47907 USA.
C3 Indiana University System; Indiana University Bloomington; Carnegie
   Mellon University; University of Kent; Purdue University System; Purdue
   University
RP Koparkar, C (corresponding author), Indiana Univ, Bloomington, IN 47405 USA.
EM ckoparka@indiana.edu; me@mike-rainey.site; m.vollmer@kent.ac.uk;
   milind@purdue.edu; rrnewton@purdue.edu
OI Kulkarni, Milind/0000-0001-6827-345X
FU National Science Foundation [CCF-1725672, CCF1725679, CCF-1919197];
   Engineering and Physical Sciences Research Council [EP/T013516/1]; EPSRC
   [EP/T013516/1] Funding Source: UKRI
FX This work was supported in part by National Science Foundation awards
   CCF-1725672, CCF1725679 and CCF-1919197, as well as by the Engineering
   and Physical Sciences Research Council award EP/T013516/1. We would like
   to thank our shepherd, Cyrus Omar, as well as the anonymous reviewers
   for their suggestions and comments.
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   Acar UA, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P214, DOI 10.1145/3293883.3295725
   Acar Umut A, 2018, HEARTBEAT SCHEDULING
   Anderson Todd A., 2017, EUR C OBJ OR PROGR, V4, P1, DOI [10.4230/LIPIcs.ECOOP.2017.4, DOI 10.4230/LIPICS.ECOOP.2017.4]
   [Anonymous], 1997, The Definition of Standard ML
   Bergstrom L, 2013, ACM SIGPLAN NOTICES, V48, P81, DOI 10.1145/2517327.2442525
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Blelloch G.E., 1992, NESL NESTED DATA PAR
   BLUMOFE RD, 1995, SIGPLAN NOTICES, V30, P207
   Bocchino Robert L., 2010, P HIGH PERF GRAPH, P77
   Chakravarty M. M., 2011, P 6 WORKSH DECL ASP, P3, DOI DOI 10.1145/1926354.1926358
   Chlipala A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P10, DOI 10.1145/2784731.2784741
   Dagum L, 1998, IEEE COMPUT SCI ENG, V5, P46, DOI 10.1109/99.660313
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Friedman J. H., 1977, ACM Transactions on Mathematical Software, V3, P209, DOI 10.1145/355744.355745
   Goldfarb M, 2013, INT CONF HIGH PERFOR, DOI 10.1145/2503210.2503223
   Guatto Adrien, 2018, ACM SIGPLAN Notices, V53, P81, DOI 10.1145/3200691.3178494
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Harris T, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P251
   Keller G, 1998, LECT NOTES COMPUT SC, V1470, P709, DOI 10.1007/BFb0057920
   Koparkar Chaitanya, 2021, ARXIV210700522CSPL
   Kuper L, 2014, ACM SIGPLAN NOTICES, V49, P2, DOI 10.1145/2666356.2594312
   Lea Doug, 2000, JAVA, P36
   Leroy Xavier, 2020, OCAML SYSTEM RELEASE
   MAKINO J, 1990, J COMPUT PHYS, V87, P148, DOI 10.1016/0021-9991(90)90231-O
   Marlow S, 2011, ACM SIGPLAN NOTICES, V46, P71, DOI 10.1145/2096148.2034685
   Marlow S, 2009, ACM SIGPLAN NOTICES, V44, P65, DOI 10.1145/1631687.1596563
   Marlow S, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P11
   Meyerovich Leo A., 2011, HOTPAR
   NIKHIL A, 1989, ACM T PROGR LANG SYS, V11, P598, DOI 10.1145/69558.69562
   Paszke A, 2019, ADV NEUR IN, V32
   Raghunathan R, 2016, ACM SIGPLAN NOTICES, V51, P392, DOI 10.1145/3022670.2951935
   Rainey Mike, 2021, TASK PARALLEL ASSEMB
   Reppy J, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P257
   Sarkar D, 2004, ACM SIGPLAN NOTICES, V39, P201, DOI 10.1145/1016848.1016878
   Shun Julian, 2012, ACM Symposium on Parallelism in Algorithms and Architectures (SPAA), P68
   Siek Jeremy, 2020, ESSENTIALS COMPILATI
   Sivaramakrishnan KC, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408995
   Sivaramakrishnan KC, 2020, ARXIV PREPRINT ARXIV
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tofte M., 2004, Higher-Order and Symbolic Computation, V17, P245, DOI 10.1023/B:LISP.0000029446.78563.a4
   Ueno K, 2016, ACM SIGPLAN NOTICES, V51, P421, DOI 10.1145/3022670.2951944
   Varda Kenton, 2015, Cap'n Proto
   Vollmer M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P48, DOI 10.1145/3314221.3314631
   Vollmer Michael, 2017, Compiling Tree Transforms to Operate on Packed Representations, V74, DOI DOI 10.4230/LIPICS.ECOOP.2017.26
   Westrick S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371115
   Yang EZ, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P362, DOI 10.1145/2784731.2784735
NR 47
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 91
DI 10.1145/3473596
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800031
OA Green Accepted, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Barthe, G
   Chadha, R
   Krogmeier, P
   Sistla, AP
   Viswanathan, M
AF Barthe, Gilles
   Chadha, Rohit
   Krogmeier, Paul
   Sistla, A. Prasad
   Viswanathan, Mahesh
TI Deciding Accuracy of Differential Privacy Schemes
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE accuracy; differential privacy; decidability
AB Differential privacy is a mathematical framework for developing statistical computations with provable guarantees of privacy and accuracy. In contrast to the privacy component of differential privacy, which has a clear mathematical and intuitive meaning, the accuracy component of differential privacy does not have a generally accepted definition; accuracy claims of differential privacy algorithms vary from algorithm to algorithm and are not instantiations of a general definition. We identify program discontinuity as a common theme in existing ad hoc definitions and introduce an alternative notion of accuracy parametrized by, what we call, distance to disagreement - the distance to disagreement of an input x w.r.t. a deterministic computation f and a distance d, is the minimal distance d(x, y) over all y such that f (y) not equal f (x). We show that our notion of accuracy subsumes the definition used in theoretical computer science, and captures known accuracy claims for differential privacy algorithms. In fact, our general notion of accuracy helps us prove better claims in some cases. Next, we study the decidability of accuracy. We first show that accuracy is in general undecidable. Then, we define a non-trivial class of probabilistic computations for which accuracy is decidable (unconditionally, or assuming Schanuel's conjecture). We implement our decision procedure and experimentally evaluate the effectiveness of our approach for generating proofs or counterexamples of accuracy for common algorithms from the literature.
C1 [Barthe, Gilles] Max Planck Inst Secur & Privacy, Bochum, Germany.
   [Chadha, Rohit] Univ Missouri, Columbia, MO 65211 USA.
   [Krogmeier, Paul; Viswanathan, Mahesh] Univ Illinois, Urbana, IL USA.
   [Sistla, A. Prasad] Univ Illinois, Chicago, IL USA.
C3 University of Missouri System; University of Missouri Columbia;
   University of Illinois System; University of Illinois Urbana-Champaign;
   University of Illinois System; University of Illinois Chicago;
   University of Illinois Chicago Hospital
RP Barthe, G (corresponding author), Max Planck Inst Secur & Privacy, Bochum, Germany.
EM gjbarthe@gmail.com; chadhar@missouri.edu; paulmk2@illinois.edu;
   sistla@uic.edu; vmahesh@illinois.edu
FU National Science Foundation [NSF CNS 1553548, NSF CCF 1900924, NSF CCF
   1901069, NSF CCF 2007428]
FX The authors would like to thank anonymous reviewers for their
   interesting and useful comments. This work was partially supported by
   National Science Foundation grants NSF CNS 1553548, NSF CCF 1900924, NSF
   CCF 1901069 and NSF CCF 2007428.
CR Abrahám E, 2018, LECT NOTES COMPUT SC, V11024, P20, DOI 10.1007/978-3-319-99154-2_2
   Albarghouthi A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158146
   [Anonymous], 1995, Kreiseliana. About and Around Georg Kreisel
   [Anonymous], 1951, DECISION METHOD ELEM
   Barthe G., 2016, ACM SIGLOG News, V3, P34, DOI 10.1145/2893582.2893591
   Barthe G, 2020, IEEE S LOG, P141, DOI 10.1145/3373718.3394796
   Barthe G, 2016, LECT NOTES COMPUT SC, V9779, P43, DOI 10.1007/978-3-319-41528-4_3
   Barthe G, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2492061
   Barthe Gilles, 2016, INT C AUT LANG PROGR
   Barthe Gilles, 2020, ABS201106404 CORR
   Bhaskar R., 2010, P 16 ACM SIGKDD INT, P503, DOI DOI 10.1145/1835804.1835869
   Bichsel B, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P508, DOI 10.1145/3243734.3243863
   Blum A, 2013, J ACM, V60, DOI 10.1145/2450142.2450148
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chan THH, 2011, ACM T INFORM SYST SE, V14, DOI 10.1145/2043621.2043626
   Chatterjee K, 2016, ACM SIGPLAN NOTICES, V51, P327, DOI 10.1145/2914770.2837639
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   Cousot P, 2012, LECT NOTES COMPUT SC, V7211, P169, DOI 10.1007/978-3-642-28869-2_9
   Dimitrova R, 2020, LECT NOTES COMPUT SC, V12302, P484, DOI 10.1007/978-3-030-59152-6_27
   Ding ZY, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P475, DOI 10.1145/3243734.3243818
   Dwork C, 2006, LECT NOTES COMPUT SC, V3876, P265, DOI 10.1007/11681878_14
   Dwork C, 2013, FOUND TRENDS THEOR C, V9, P211, DOI 10.1561/0400000042
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Gupta A, 2010, PROC APPL MATH, V135, P1106
   Heizmann M, 2009, LECT NOTES COMPUT SC, V5673, P69, DOI 10.1007/978-3-642-03237-0_7
   Kaminski Benjamin Lucien, 2019, Advanced weakest precondition calculi for probabilistic programs
   Katoen JP, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P31, DOI 10.1145/2933575.2934574
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Kura S, 2019, LECT NOTES COMPUT SC, V11428, P135, DOI 10.1007/978-3-030-17465-1_8
   Kwiatkowska M., 2010, 2010 48th Annual Allerton Conference on Communication, Control, and Computing (Allerton), P1691, DOI 10.1109/ALLERTON.2010.5707120
   Lang S., 1966, INTRO TRANSCENDENTAL
   Ligett Katrina, 2017, P NEURIPS, P2566
   McCallum S, 2012, J SYMB COMPUT, V47, P16, DOI 10.1016/j.jsc.2011.08.004
   McSherry F, 2007, ANN IEEE SYMP FOUND, P94, DOI 10.1109/FOCS.2007.66
   Monniaux D, 2000, LECT NOTES COMPUT SC, V1824, P322
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   Motwani Rajeev, 1995, RANDOMIZED ALGORITHM
   Reed J, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P157
   Sankaranarayanan S, 2013, ACM SIGPLAN NOTICES, V48, P447, DOI 10.1145/2499370.2462179
   Sankaranarayanan Sriram, 2020, FDN PROBABILISTIC PR
   Sistla A. Prasad, 2020, ABS191004137 CORR
   Smith Calvin, 2019, PACMPL
   Vesga Elisabet Lobo, 2019, ABS190907918 CORR
   Wang D, 2018, ACM SIGPLAN NOTICES, V53, P513, DOI 10.1145/3192366.3192408
   Wang Di, 2020, ABS200110150 CORR
   Wang Yu, 2019, ABS190204111 CORR
   Zhang D, 2017, ACM SIGPLAN NOTICES, V52, P888, DOI 10.1145/3093333.3009884
NR 47
TC 5
Z9 5
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 8
DI 10.1145/3434289
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100008
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Khyzha, A
   Lahav, O
AF Khyzha, Artem
   Lahav, Ori
TI Taming x86-TSO Persistency
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE persistency; non-volatile memory; x86-TSO; weak memory models;
   concurrency
AB We study the formal semantics of non-volatile memory in the x86-TSO architecture. We show that while the explicit persist operations in the recent model of Raad et al. from POPL'20 only enforce order between writes to the non-volatile memory, it is equivalent, in terms of reachable states, to a model whose explicit persist operations mandate that prior writes are actually written to the non-volatile memory. The latter provides a novel model that is much closer to common developers' understanding of persistency semantics. We further introduce a simpler and stronger sequentially consistent persistency model, develop a sound mapping from this model to x86, and establish a data-race-freedom guarantee providing programmers with a safe programming discipline. Our operational models are accompanied with equivalent declarative formulations, which facilitate our formal arguments, and may prove useful for program verification under x86 persistency.
C1 [Khyzha, Artem; Lahav, Ori] Tel Aviv Univ, Tel Aviv, Israel.
C3 Tel Aviv University
RP Lahav, O (corresponding author), Tel Aviv Univ, Tel Aviv, Israel.
EM orilahav@tau.ac.il
OI Lahav, Ori/0000-0003-4305-6998
FU Israel Science Foundation [5166651, 2005/17]; Alon Young Faculty
   Fellowship
FX We thank Adam Morrison and the POPL'21 reviewers for their helpful
   feedback and insights. This research was supported by the Israel Science
   Foundation (grant number 5166651 and 2005/17). The second author was
   also supported by the Alon Young Faculty Fellowship.
CR Abdulla PA, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434337
   Abdulla PA, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276505
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   [Anonymous], 2012, HPL2012236
   Arulraj J, 2018, PROC VLDB ENDOW, V11, P553, DOI 10.1145/3164135.3164147
   Atig MF, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P7, DOI 10.1145/1706299.1706303
   Chen SM, 2015, PROC VLDB ENDOW, V8, P786, DOI 10.14778/2752939.2752947
   Condit J, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P133
   David T, 2018, PROCEEDINGS OF THE 2018 USENIX ANNUAL TECHNICAL CONFERENCE, P373
   Friedman M, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P377, DOI 10.1145/3385412.3386031
   Friedman M, 2018, ACM SIGPLAN NOTICES, V53, P28, DOI 10.1145/3200691.3178490
   Gogte Vaibhav, 2018, PLDI
   Intel, 2019, INT 64 IA 32 ARCH SO
   Intel, 2015, Persistent Memory Programming
   Izraelevitz Joseph, 2016, Distributed Computing. 30th International Symposium, DISC 2016. Proceedings: LNCS 9888, P313, DOI 10.1007/978-3-662-53426-7_23
   Izraelevitz J., 2016, P 28 ACM S PARALLELI, P157
   Joshi A, 2015, PROCEEDINGS OF THE 48TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO-48), P660, DOI 10.1145/2830772.2830805
   Khyzha Artem, 2020, TAM X86 TSO PERS EXT
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Kolli A, 2017, 44TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA 2017), P481, DOI [10.1145/3079856.3080229, 10.1145/3140659.3080229]
   Kolli Aasheesh, 2016, MICRO49
   Kozen D., 1977, 18th Annual Symposium on Foundations of Computer Science, P254, DOI 10.1109/SFCS.1977.16
   Lahav O, 2016, ACM SIGPLAN NOTICES, V51, P649, DOI 10.1145/2914770.2837643
   Lersch L, 2019, PROC VLDB ENDOW, V13, P574, DOI 10.14778/3372716.3372728
   Liu JH, 2020, PROC VLDB ENDOW, V13, P1078, DOI 10.14778/3384345.3384355
   Mapping, 2019, C C 11 MAPP PROC
   Marino D, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P199
   Morrison A, 2013, ACM SIGPLAN NOTICES, V48, P103, DOI 10.1145/2517327.2442527
   Oukid I, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P371, DOI 10.1145/2882903.2915251
   Owens S, 2010, LECT NOTES COMPUT SC, V6183, P478, DOI 10.1007/978-3-642-14107-2_23
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Pelley S, 2014, CONF PROC INT SYMP C, P265, DOI 10.1109/ISCA.2014.6853222
   Podkopaev A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290382
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360561
   Raad A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371079
   Raad A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276507
   Rudoff Andy M, 2019, DEPRECATING PCOMMIT
   Sarkar S., 2012, Proceedings of the 33rd ACM SIGPLAN conference on Programming Language Design and Implementation, PLDI '12, P311, DOI [10.1145/2254064.2254102, DOI 10.1145/2254064.2254102]
   Scargall Steve, 2020, Programming Persistent Memory: A Comprehensive Guide for Developers, DOI [10.1007/978-1-4842-4932-1, DOI 10.1007/978-1-4842-4932-1]
   Singh A, 2012, CONF PROC INT SYMP C, P524, DOI 10.1109/ISCA.2012.6237045
   Vafeiadis V, 2015, ACM SIGPLAN NOTICES, V50, P209, DOI [10.1145/2676726.2676995, 10.1145/2775051.2676995]
   Venkataraman Shivaram, 2011, P 9 USENIX C FIL STO, P5
   Wang TZ, 2018, PROC INT CONF DATA, P461, DOI 10.1109/ICDE.2018.00049
   Wickerson J, 2017, ACM SIGPLAN NOTICES, V52, P190, DOI 10.1145/3093333.3009838
   Yang Jun, 2015, P 13 USENIX C FIL ST, P167
   Zuriel Y, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360554
NR 46
TC 10
Z9 10
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 47
DI 10.1145/3434328
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100047
OA gold
DA 2024-07-18
ER

PT J
AU Li, JM
   Appel, AW
AF Li, John M.
   Appel, Andrew W.
TI Deriving Efficient Program Transformations from Rewrite Rules
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compiler correctness; compiler optimization; metaprogramming;
   domain-specific languages; interactive theorem proving; shrink reduction
ID COMPILER
AB An efficient optimizing compiler can perform many cascading rewrites in a single pass, using auxiliary data structures such as variable binding maps, delayed substitutions, and occurrence counts. Such optimizers often perform transformations according to relatively simple rewrite rules, but the subtle interactions between the data structures needed for efficiency make them tricky to write and trickier to prove correct. We present a system for semi-automatically deriving both an efficient program transformation and its correctness proof from a list of rewrite rules and specifications of the auxiliary data structures it requires. Dependent types ensure that the holes left behind by our system (for the user to fill in) are filled in correctly, allowing the user low-level control over the implementation without having to worry about getting it wrong. We implemented our system in Coq (though it could be implemented in other logics as well), and used it to write optimization passes that perform uncurrying, inlining, dead code elimination, and static evaluation of case expressions and record projections. The generated implementations are sometimes faster, and at most 40% slower, than hand-written counterparts on a small set of benchmarks; in some cases, they require significantly less code to write and prove correct.
C1 [Li, John M.; Appel, Andrew W.] Princeton Univ, Princeton, NJ 08544 USA.
C3 Princeton University
RP Li, JM (corresponding author), Princeton Univ, Princeton, NJ 08544 USA.
EM johnli@princeton.edu; appel@princeton.edu
FU National Science Foundation [CCF-1521602, CCF2005545]
FX This research was supported in part by National Science Foundation
   grants CCF-1521602 and CCF2005545. Any opinions, findings, and
   conclusions or recommendations expressed in this material are those of
   the author and do not necessarily reflect the views of the National
   Science Foundation.
CR Anand Abhishek, 2017, INT WORKSH COQ PROGR
   Appel A. W., 1994, LISP and Symbolic Computation, V7, P337, DOI 10.1007/BF01018615
   Appel A. W., 1997, Journal of Functional Programming, V7, P515, DOI 10.1017/S0956796897002839
   APPEL AW, 1991, LECT NOTES COMPUT SC, V528, P1
   Bélanger OS, 2017, PROCEEDINGS OF THE 19TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2017), P49, DOI 10.1145/3131851.3131859
   Benton N., 2004, Implementation and Application of Functional Languages. 16th International Workshop, IFL 2004. Revised Selected Papers (Lecture Notes in Computer Science Vol. 3474), P142
   Chambart Pierre, 2016, OPTIMIZATION FLAMBDA
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Erwig M., 2001, ELECTRON NOTES THEOR, V41, P3, DOI [10.1016/S1571-0661(05)80540-7, DOI 10.1016/S1571-0661(05)80540-7]
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   Jones SP, 2002, J FUNCT PROGRAM, V12, P393, DOI 10.1017/S0956796802004331
   Kennedy A, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P177
   Kohlbecker E. E., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P77, DOI 10.1145/41625.41632
   KRANZ D, 1986, SIGPLAN NOTICES, V21, P219, DOI 10.1145/13310.13333
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Lacey D., 2001, Compiler Construction. 10th International Conference, CC 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2027), P52
   Lerner S, 2005, ACM SIGPLAN NOTICES, V40, P364, DOI 10.1145/1047659.1040335
   Lerner S, 2005, ELECTRON NOTES THEOR, V132, P5, DOI 10.1016/j.entcs.2005.03.022
   Leroy Xavier., 2012, The CompCert Verified Compiler
   Mansky William, 2014, THESIS U ILLINOIS UR
   Matthews J, 2007, ACM SIGPLAN NOTICES, V42, P3, DOI 10.1145/1190215.1190220
   Neis G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P166, DOI 10.1145/2784731.2784764
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Sarkar D, 2005, J FUNCT PROGRAM, V15, P653, DOI 10.1017/S0956796805005605
   Sozeau M, 2020, J AUTOM REASONING, V64, P947, DOI 10.1007/s10817-019-09540-0
   Sozeau M, 2010, LECT NOTES COMPUT SC, V6172, P419, DOI 10.1007/978-3-642-14052-5_29
   Steele Guy L, 1978, RABBIT COMPILER SCHE
   Stewart G, 2012, ACM SIGPLAN NOTICES, V47, P3, DOI 10.1145/2398856.2364531
   Tate R, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P389, DOI 10.1145/1706299.1706345
   TJIANG SWK, 1992, SIGPLAN NOTICES, V27, P82, DOI 10.1145/143103.143120
   Visser Eelco, 2004, Domain-Specific Program Generation: International Seminar, Dagstuhl Castle, Germany, March 23-28, 2003, P216, DOI DOI 10.1007/978-3-540-25935-0_13
   Whitfield DL, 1997, ACM T PROGR LANG SYS, V19, P1053, DOI 10.1145/267959.267960
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
NR 33
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PY 2021
VL 5
AR 74
DI 10.1145/3473579
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UQ9LK
UT WOS:000696379100014
OA gold
DA 2024-07-18
ER

PT J
AU Guo, SJ
   Chen, YQ
   Yu, JY
   Wu, M
   Zuo, ZQ
   Li, P
   Cheng, YQ
   Wang, HB
AF Guo, Shengjian
   Chen, Yueqi
   Yu, Jiyong
   Wu, Meng
   Zuo, Zhiqiang
   Li, Peng
   Cheng, Yueqiang
   Wang, Huibo
TI Exposing Cache Timing Side-Channel Leaks through Out-of-Order Symbolic
   Execution
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Out-of-order execution; cache timing; side-channel leak; symbolic
   execution
AB As one of the fundamental optimizations in modem processors, the out-of-order execution boosts the pipeline throughput by executing independent instructions in parallel rather than in their program orders. However, due to the side effects introduced by such microarchitectural optimization to the CPU cache, secret-critical applications may suffer from timing side-channel leaks. This paper presents a symbolic execution-based technique, named SYMO3, for exposing cache timing leaks under the context of out-of-order execution. SYMO3 proposes new components that address the modeling, reduction, and reasoning challenges of accommodating program analysis to the software code out-of-order analysis. We implemented SYMO3 upon KLEE and conducted three evaluations on it. Experimental results show that SYMO3 successfully uncovers a set of cache timing leaks in five real-world programs. Also, SYMO3 finds that, in general, program transformation from compiler optimizations shrink the surface to timing leaks. Furthermore, augmented with a speculative execution modeling, SYMO3 identifies five more leaky programs based on the compound analysis.
C1 [Guo, Shengjian; Li, Peng; Cheng, Yueqiang; Wang, Huibo] Baidu Secur, Sunnyvale, CA 94089 USA.
   [Chen, Yueqi] Penn State Univ, University Pk, PA 16802 USA.
   [Yu, Jiyong] Univ Illinois, Champaign, IL USA.
   [Wu, Meng] Ant Grp, Hangzhou, Peoples R China.
   [Zuo, Zhiqiang] Nanjing Univ, State Key Lab Novel Software Technol, Nanjing, Peoples R China.
C3 Pennsylvania Commonwealth System of Higher Education (PCSHE);
   Pennsylvania State University; Pennsylvania State University -
   University Park; University of Illinois System; University of Illinois
   Urbana-Champaign; Nanjing University
RP Guo, SJ (corresponding author), Baidu Secur, Sunnyvale, CA 94089 USA.
EM sjguo@baidu.com; ychen@ist.psu.edu; jiyongy2@illinois.edu;
   bode.wm@antfin.com; zqzuo@nju.edu.cn; lipeng28@baidu.com;
   chengyueqiang@baidu.com; wanghuibo01@baidu.com
OI Yu, Jiyong/0000-0002-9150-0662
FU National Science Foundation of China [61932021, 61802168, 61972290];
   Natural Science Foundation of Jiangsu Province [BK20191247]
FX This work was partially supported by the National Science Foundation of
   China (No. 61932021 61802168, and 61972290), and the Natural Science
   Foundation of Jiangsu Province (No. BK20191247).
CR Abel A, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P673, DOI 10.1145/3297858.3304062
   [Anonymous], 2016, P IEEE S REAL TIM EM
   [Anonymous], 2017, P 15 ACM IEEE INT C
   Antonopoulos T, 2017, ACM SIGPLAN NOTICES, V52, P362, DOI [10.1145/3140587.3062378, 10.1145/3062341.3062378]
   Bang L, 2018, 2018 3RD IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P 2018), P307, DOI 10.1109/EuroSP.2018.00029
   Bang L, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P193, DOI 10.1145/2950290.2950362
   Barthe G., 2014, P 3 INT C PRINC SEC, P140
   Basu T, 2020, SOFTW TEST VERIF REL, V30, DOI 10.1002/stvr.1718
   Basu T, 2017, IEEE ICST WORKSHOP, P51, DOI 10.1109/ICSTW.2017.16
   Bergan T, 2014, ACM SIGPLAN NOTICES, V49, P491, DOI [10.1145/2714064.2660200, 10.1145/2660193.2660200]
   Brotzman R, 2019, P IEEE S SECUR PRIV, P505, DOI 10.1109/SP.2019.00022
   Bucur S, 2011, EUROSYS 11: PROCEEDINGS OF THE EUROSYS 2011 CONFERENCE, P183
   Burger D., 1997, Computer Architecture News, V25, P13, DOI 10.1145/268806.268810
   Cabrera Aldaya A., 2019, IACR Trans. Cryptogr. Hardw. Embed. Syst., V4, P213, DOI DOI 10.13154/TCHES.V2019.I4.213-242
   Cadar C., 2008, OSDI, V8, P209, DOI DOI 10.5555/1855741.1855756
   Cadar C, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P906, DOI 10.1145/2786805.2803205
   Cha SK, 2012, P IEEE S SECUR PRIV, P380, DOI 10.1109/SP.2012.31
   Chattopadhyay S, 2017, LECT NOTES COMPUT SC, V10206, P38, DOI 10.1007/978-3-662-54580-5_3
   Chen J., 2018, 32 EUR C OBJ OR PROG
   Chen J, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P875, DOI 10.1145/3133956.3134058
   Ciortea Liviu, 2009, Operating Systems Review, V43, P5, DOI 10.1145/1713254.1713257
   Clarke LoriA., 1976, Proc. of the 1976 annual conference, P488, DOI [10.1145/800191.805647, DOI 10.1145/800191.805647]
   Colin A, 2000, REAL-TIME SYST, V18, P249, DOI 10.1023/A:1008149332687
   Coppens B, 2009, P IEEE S SECUR PRIV, P45, DOI 10.1109/SP.2009.19
   Dellinger M, 2011, DES AUT CON, P474
   Dhem JF, 2000, LECT NOTES COMPUT SC, V1820, P167
   Dinu D., 2015, TRIATHLON TRIATHLON
   Disselkoen C, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P51
   Dong SY, 2015, 2015 IEEE 26TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P205, DOI 10.1109/ISSRE.2015.7381814
   Doychev G., 2013, USENIX SEC S, P431
   Doychev G, 2017, ACM SIGPLAN NOTICES, V52, P406, DOI [10.1145/3140587.3062388, 10.1145/3062341.3062388]
   Emmi Michael, 2019, ABS190407280 CORR
   Etsion Y, 2013, COMPUTER ARCHITECTUR
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Gras B, 2017, 24TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2017), DOI 10.14722/ndss.2017.23271
   Gruss Daniel, 2016, Detection of Intrusions and Malware, and Vulnerability Assessment. 13th International Conference, DIMVA 2016. Proceedings: LNCS 9721, P279, DOI 10.1007/978-3-319-40667-1_14
   Guarnieri M, 2020, P IEEE S SECUR PRIV, P1, DOI 10.1109/SP40000.2020.00011
   Guo SJ, 2020, PROC INT CONF SOFTW, P1235, DOI 10.1145/3377811.3380428
   Guo SJ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P377, DOI 10.1145/3236024.3236028
   Guo SJ, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P854, DOI 10.1145/2786805.2786841
   Gustafsson J, 2010, MALARDALEN WCET BENC
   Gysi T, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P816, DOI 10.1145/3314221.3314606
   Intel, 2016, SKYLAKE MICR
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   KLEE-Native, 2019, BIN SYMB EX KLEE NAT
   Kocher P. C., 1996, Advances in Cryptology - CRYPTO'96. 16th Annual International Cryptology Conference. Proceedings, P104
   Kocher P, 2019, P IEEE S SECUR PRIV, P1, DOI 10.1109/SP.2019.00002
   Kusano M, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P337, DOI 10.1145/3106237.3106243
   Lahiri SK, 2002, LECT NOTES COMPUT SC, V2517, P142
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lee CH, 1997, INT SYMP MICROARCH, P330, DOI 10.1109/MICRO.1997.645830
   Li XF, 2004, REAL TIM SYST SYMP P, P92
   Li XF, 2006, REAL-TIME SYST, V34, P195, DOI 10.1007/s11241-006-9205-5
   libfixedtimefixedpoint, 2017, LIBF
   Libgcrypt, 2018, LIBGCR 1 8 4
   Lipp M, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P973
   Metta R, 2016, ACM SIGPLAN NOTICES, V51, P72, DOI [10.1145/2907950.2907961, 10.1145/2980930.2907961]
   Moshovos A., 2000, P 6 INT S HIGH PERF, P301
   Nilizadeh S, 2019, PROC INT CONF SOFTW, P176, DOI 10.1109/ICSE.2019.00034
   Oleksenko O, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P1481
   Onder S, 1999, INT SYMP MICROARCH, P170, DOI 10.1109/MICRO.1999.809454
   OpenSSL, 2019, OPENSSL 1 1 1C
   Oren Y, 2015, CCS'15: PROCEEDINGS OF THE 22ND ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1406, DOI 10.1145/2810103.2813708
   Osvik DA, 2006, LECT NOTES COMPUT SC, V3860, P1
   Pai V. S., 1997, IEEE TECHNICAL COMMI
   Pasareanu Corina S., 2010, P 25 IEEE ACM INT C, P179, DOI [10.1145/1858996.1859035, DOI 10.1145/1858996.1859035]
   Poeplau S, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P181
   Poeplau S, 2019, 35TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSA), P163, DOI 10.1145/3359789.3359796
   Phan QS, 2017, P IEEE CSFW, P328, DOI 10.1109/CSF.2017.8
   Rapier C., 2008, P 15 ACM MARD GRAS C, P11
   Saudel F., 2013, TRITON DYNAMIC BINAR
   Schnarr E, 1998, ACM SIGPLAN NOTICES, V33, P283, DOI 10.1145/291006.291063
   Sha TT, 2005, INT SYMP MICROARCH, P159
   Shakkebaek J. U., 1998, Computer Aided Verification. 10th International Conference, CAV'98. Proceedings, P98, DOI 10.1007/BFb0028737
   Smith J. E., 1985, 12th Annual International Symposium on Computer Architecture Conference Proceedings (Cat. No. 85CH2144-4), P36
   Stephens N, 2016, 23RD ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2016), DOI 10.14722/ndss.2016.23368
   Tegra, 2018, KERN TREE NVIDIA TEG
   Van Bulck J, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P991
   Wang GH, 2020, ACM T SOFTW ENG METH, V29, DOI 10.1145/3385897
   Wang S, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P657
   Wang S, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P235
   Weisse O., 2018, Technical report
   Wichelmann J, 2018, 34TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2018), P161, DOI 10.1145/3274694.3274741
   Wilhelm R, 2010, LECT NOTES COMPUT SC, V5944, P3, DOI 10.1007/978-3-642-11319-2_3
   Wu M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P802, DOI 10.1145/3314221.3314647
   Xiao Y, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P859, DOI 10.1145/3133956.3134016
   Yang Y, 2008, LECT NOTES COMPUT SC, V5156, P288, DOI 10.1007/978-3-540-85114-1_20
   Yarom Y, 2014, PROCEEDINGS OF THE 23RD USENIX SECURITY SYMPOSIUM, P719
   Yu JY, 2019, 26TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2019), DOI 10.14722/ndss.2019.23061
   Yu Yang, 2010, International Journal on Software Tools for Technology Transfer, V12, P113, DOI 10.1007/s10009-010-0144-z
   Zhang YQ, 2011, P IEEE S SECUR PRIV, P313, DOI 10.1109/SP.2011.31
NR 91
TC 4
Z9 4
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 147
DI 10.1145/3428215
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900024
OA gold
DA 2024-07-18
ER

PT J
AU Jeon, M
   Lee, M
   Oh, H
AF Jeon, Minseok
   Lee, Myungho
   Oh, Hakjoo
TI Learning Graph-Based Heuristics for Pointer Analysis without
   Handcrafting Application-Specific Features
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Data-driven static analysis; Machine learning for program analysis;
   Pointer analysis; Context sensitivity; Heap abstraction
ID SENSITIVITY
AB We present GRAPHICK, a new technique for automatically learning graph-based heuristics for pointer analysis. Striking a balance between precision and scalability of pointer analysis requires designing good analysis heuristics. For example, because applying context sensitivity to all methods in a real-world program is impractical, pointer analysis typically uses a heuristic to employ context sensitivity only when it is necessary. Past research has shown that exploiting the program's graph structure is a promising way of developing cost-effective analysis heuristics, promoting the recent trend of "graph-based heuristics" that work on the graph representations of programs obtained from a pre-analysis. Although promising, manually developing such heuristics remains challenging, requiring a great deal of expertise and laborious effort. In this paper, we aim to reduce this burden by learning graph-based heuristics automatically, in particular without hand-crafted application-specific features. To do so, we present a feature language to describe graph structures and an algorithm for learning analysis heuristics within the language. We implemented GRAPHICK on top of Door and used it to learn graph-based heuristics for object sensitivity and heap abstraction. The evaluation results show that our approach is general and can generate high-quality heuristics. For both instances, the learned heuristics are as competitive as the existing state-of-the-art heuristics designed manually by analysis experts.
C1 [Jeon, Minseok; Lee, Myungho; Oh, Hakjoo] Korea Univ, Dept Comp Sci & Engn, 145 Anam Ro, Seoul 02841, South Korea.
C3 Korea University
RP Jeon, M (corresponding author), Korea Univ, Dept Comp Sci & Engn, 145 Anam Ro, Seoul 02841, South Korea.
EM minseok_jeon@korea.ac.kr; myungho_lee@korea.ac.kr; hakjoo_oh@korea.ac.kr
RI Jeon, Minseok/ISB-1622-2023
OI Jeon, Minseok/0000-0001-8320-8509
FU Samsung Research Funding & Incubation Center of Samsung Electronics
   [SRFC-IT1701-51]; Institute of Information & communications Technology
   Planning & Evaluation (IITP) - Korea government(MSIT)
FX We thank Donghoon Jeon for helpful comments on Algorithm 2. This work
   was supported by Samsung Research Funding & Incubation Center of Samsung
   Electronics under Project Number SRFC-IT1701-51. This work was partly
   supported by Institute of Information & communications Technology
   Planning & Evaluation (IITP) grant funded by the Korea government(MSIT)
   (No.20200-01337, (SW STAR LAB) Research on Highly-Practical Automated
   Software Repair and No.2017-000184, Self-Learning Cyber Immune
   Technology Development).
CR Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Avots Dzintars, 2005, P 27 INT C SOFTW ENG, DOI [10.1145/1062455.1062520, DOI 10.1145/1062455.1062520]
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Blackshear S, 2015, ACM SIGPLAN NOTICES, V50, P163, DOI [10.1145/2814270.2814293, 10.1145/2858965.2814293]
   Bravenboer M, 2009, ACM SIGPLAN NOTICES, V44, P243, DOI 10.1145/1639949.1640108
   Cha S, 2018, INFORM SOFTWARE TECH, V104, P1, DOI 10.1016/j.infsof.2018.07.002
   Cha S, 2016, LECT NOTES COMPUT SC, V10017, P25, DOI 10.1007/978-3-319-47958-3_2
   Chae K, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133925
   Fink SJ, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348255
   Gao Q, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P459, DOI 10.1109/ICSE.2015.64
   Grech N, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133926
   Hassanshahi B., 2017, P 6 ACM SIGPLAN INT, P13
   He JX, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1112, DOI 10.1145/3385412.3386016
   Heo K, 2017, PROC INT CONF SOFTW, P519, DOI 10.1109/ICSE.2017.54
   Heo K, 2016, LECT NOTES COMPUT SC, V9837, P237, DOI 10.1007/978-3-662-53413-7_12
   Hong S, 2020, PROC INT CONF SOFTW, P271, DOI 10.1145/3377811.3380323
   Jeon M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276510
   Jeon M, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3293607
   Jeong S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133924
   Kanvar V, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2931098
   Kapus T, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P774, DOI 10.1145/3338906.3338936
   Kastrinis G, 2013, ACM SIGPLAN NOTICES, V48, P423, DOI 10.1145/2499370.2462191
   Lee J, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P95, DOI 10.1145/3236024.3236079
   Li Y, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276511
   Li Y, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P129, DOI 10.1145/3236024.3236041
   Liang P, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P590
   Liang P, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P31, DOI 10.1145/1926385.1926391
   Livshits V. B., 2003, Software Engineering Notes, V28, P317, DOI 10.1145/949952.940114
   Lu JB, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360574
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Naik M, 2009, PROC INT CONF SOFTW, P386, DOI 10.1109/ICSE.2009.5070538
   Oh H, 2015, ACM SIGPLAN NOTICES, V50, P572, DOI [10.1145/2858965.2814309, 10.1145/2814270.2814309]
   Oh H, 2014, ACM SIGPLAN NOTICES, V49, P475, DOI [10.1145/2594291.2594318, 10.1145/2666356.2594318]
   Singh G, 2018, LECT NOTES COMPUT SC, V10981, P211, DOI 10.1007/978-3-319-96145-3_12
   Smaragdakis Y., 2015, FDN TRENDS PROGRAM L, V2, P1, DOI DOI 10.1561/2500000014
   Smaragdakis Y, 2014, ACM SIGPLAN NOTICES, V49, P485, DOI [10.1145/2666356.2594320, 10.1145/2594291.2594320]
   Smaragdakis Y, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P17, DOI 10.1145/1926385.1926390
   SPEC, 1999, REL 103
   Sui YL, 2014, IEEE T SOFTWARE ENG, V40, P107, DOI 10.1109/TSE.2014.2302311
   Tan T, 2017, ACM SIGPLAN NOTICES, V52, P278, DOI [10.1145/3140587.3062360, 10.1145/3062341.3062360]
   Tan T, 2016, LECT NOTES COMPUT SC, V9837, P489, DOI 10.1007/978-3-662-53413-7_24
   Tripp O, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P87, DOI 10.1145/1542476.1542486
   Xu G., 2008, ISSTA'08, P225, DOI DOI 10.1145/1390630.1390658
   Xu XZ, 2019, PROC INT CONF SOFTW, P512, DOI 10.1109/ICSE.2019.00063
   Yan H, 2017, ANN COMPUT SECURITY, P42, DOI 10.1145/3134600.3134620
   Zhang X, 2014, ACM SIGPLAN NOTICES, V49, P239, DOI [10.1145/2594291.2594327, 10.1145/2666356.2594327]
   Zhang X, 2013, ACM SIGPLAN NOTICES, V48, P365, DOI 10.1145/2499370.2462185
NR 48
TC 16
Z9 17
U1 0
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 179
DI 10.1145/3428247
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900056
OA gold
DA 2024-07-18
ER

PT J
AU Livinskii, V
   Babokin, D
   Regehr, J
AF Livinskii, Vsevolod
   Babokin, Dmitry
   Regehr, John
TI Random Testing for C and C++ Compilers with YARPGen
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compiler testing; compiler defect; automated testing; random testing;
   random program generation
AB Compilers should not crash and they should not miscompile applications. Random testing is an effective method for finding compiler bugs that have escaped other kinds of testing. This paper presents Yet Another Random Program Generator (YARPGen), a random test-case generator for C and C++ that we used to find and report more than 220 bugs in GCC, LLVM, and the Intel (R) C++ Compiler. Our research contributions include a method for generating expressive programs that avoid undefined behavior without using dynamic checks, and generation policies, a mechanism for increasing diversity of generated code and for triggering more optimizations. Generation policies decrease the testing time to find hard-to-trigger compiler bugs and, for the kinds of scalar optimizations YARPGen was designed to stress-test, increase the number of times these optimizations are applied by the compiler by an average of 20% for LLVM and 40% for GCC. We also created tools for automating most of the common tasks related to compiler fuzzing; these tools are also useful for fuzzers other than ours.
C1 [Livinskii, Vsevolod; Regehr, John] Univ Utah, Salt Lake City, UT 84112 USA.
   [Livinskii, Vsevolod; Babokin, Dmitry] Intel Corp, Santa Clara, CA 95051 USA.
C3 Utah System of Higher Education; University of Utah; Intel Corporation
RP Livinskii, V (corresponding author), Univ Utah, Salt Lake City, UT 84112 USA.; Livinskii, V (corresponding author), Intel Corp, Santa Clara, CA 95051 USA.
EM vlivinsk@cs.utah.edu; dmitry.y.babokin@intel.com; regehr@cs.utah.edu
FU Intel(R) Corporation
FX This material is based on work supported by a grant from the
   Intel<SUP>(R)</SUP> Corporation. The authors would like to thank GCC,
   LLVM, and Intel (R) C++ Compiler development teams for their help and
   cooperation.
CR Amalfitano D, 2015, 2ND ACM INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS MOBILESOFT 2015, P33, DOI 10.1109/MobileSoft.2015.11
   [Anonymous], 2012, INT C SOFTWARE ENG F
   Barany G, 2018, CC'18: PROCEEDINGS OF THE 27TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P82, DOI 10.1145/3178372.3179521
   Barany Gergo, LOGIC BASED PROGRAM, P112
   Bastani O, 2017, ACM SIGPLAN NOTICES, V52, P95, DOI [10.1145/3062341.3062349, 10.1145/3140587.3062349]
   Biagiola M, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P142, DOI 10.1145/3338906.3338970
   Bohme Marcel, 2020, P ACM S FDN SOFTWARE, P11
   Burgess CJ, 1996, INFORM SOFTWARE TECH, V38, P111, DOI 10.1016/0950-5849(95)01055-6
   Chen JJ, 2020, ACM COMPUT SURV, V53, DOI 10.1145/3363562
   Chen TY, 2010, J SYST SOFTWARE, V83, P60, DOI 10.1016/j.jss.2009.02.022
   Cummins C, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P95, DOI 10.1145/3213846.3213848
   Dewey K, 2015, IEEE INT CONF AUTOM, P482, DOI 10.1109/ASE.2015.65
   Eide Eric, 2008, EMSOFT '08: Proceedings of the 8th ACM International Conference on Embedded Software, P255, DOI DOI 10.1145/1450058.1450093
   Groce A., 2012, P INT S SOFTW TEST A, P78, DOI DOI 10.1145/2338965.2336763
   Hashimoto A., 2016, IPSJ Trans. System LSI Design Methodology, V9, P21
   Huang R., 2019, IEEE T SOFTWARE ENG
   International Organization for Standardization, 2012, N3337 ISOIEC
   International Organization for Standardization, 2011, 9899201X ISOIEC
   Le V, 2015, ACM SIGPLAN NOTICES, V50, P386, DOI [10.1145/2814270.2814319, 10.1145/2858965.2814319]
   Lindig C., 2005, AADEBUG, P3
   Liu X, 2019, AAAI CONF ARTIF INTE, P1044
   Marcozzi Michael, 2019, ARXIV PREPRINT ARXIV
   McKeeman William M., 1998, DIGIT TECH J, V10, P100
   Nagai E., 2013, Workshop on Synthesis And System Integration of Mixed Information Technologies (SASIMI 2013), P88
   Nagai E., 2012, WORKSH SYNTH SYST IN, P48
   Nagai E, 2014, IPSJ T SYSTEM LSI DE, V7, P91, DOI DOI 10.2197/IPSJTSLDM.7.91
   Nakamura K, 2016, 2016 IEEE ASIA PACIFIC CONFERENCE ON CIRCUITS AND SYSTEMS (APCCAS), P676, DOI 10.1109/APCCAS.2016.7804063
   Ofenbeck G, 2016, SCALA'16: PROCEEDINGS OF THE 2016 7TH ACM SIGPLAN SYMPOSIUM ON SCALA, P21, DOI 10.1145/2998392.2998397
   Pradel Michael, 2016, TUDCS201614664
   Regehr J, 2012, ACM SIGPLAN NOTICES, V47, P335, DOI 10.1145/2345156.2254104
   Sauder R.L., 1962, COMMUN ACM, P317, DOI 10.1145/1460833.1460869
   Sun CN, 2016, ACM SIGPLAN NOTICES, V51, P849, DOI 10.1145/3022671.2984038
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P216, DOI [10.1145/2666356.2594334, 10.1145/2594291.2594334]
   WHALLEY DB, 1994, ACM T PROGR LANG SYS, V16, P1648, DOI 10.1145/186025.186103
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
NR 35
TC 48
Z9 49
U1 2
U2 13
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 196
DI 10.1145/3428264
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900073
OA gold
DA 2024-07-18
ER

PT J
AU Zhang, HL
   Hao, Y
   Latif, S
   Bassily, R
   Rountev, A
AF Zhang, Hailong
   Hao, Yu
   Latif, Sufian
   Bassily, Raef
   Rountev, Atanas
TI Differentially-Private Software Frequency Profiling under Linear
   Constraints
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE frequency profiling; differential privacy; program analysis
AB Differential privacy has emerged as a leading theoretical framework for privacy-preserving data gathering and analysis. It allows meaningful statistics to be collected for a population without revealing "too much" information about any individual member of the population. For software profiling, this machinery allows profiling data from many users of a deployed software system to be collected and analyzed in a privacy-preserving manner. Such a solution is appealing to many stakeholders, including software users, software developers, infrastructure providers, and government agencies.
   We propose an approach for differentially-private collection of frequency vectors from software executions. Frequency information is reported with the addition of random noise drawn from the Laplace distribution. A key observation behind the design of our scheme is that event frequencies are closely correlated due to the static code structure. Differential privacy protections must account for such relationships; otherwise, a seemingly-strong privacy guarantee is actually weaker than it appears. Motivated by this observation, we propose a novel and general differentially-private profiling scheme when correlations between frequencies can be expressed through linear inequalities. Using a linear programming formulation, we show how to determine the magnitude of random noise that should be added to achieve meaningful privacy protections under such linear constraints. Next, we develop an efficient instance of this general machinery for an important subclass of constraints. Instead of LP, our solution uses a reachability analysis of a constraint graph. As an exemplar, we employ this approach to implement differentially-private method frequency profiling for Android apps.
   Any differentially-private scheme has to balance two competing aspects: privacy and accuracy. Through an experimental study to characterize these trade-offs, we (1) show that our proposed randomization achieves much higher accuracy compared to related prior work, (2) demonstrate that high accuracy and high privacy protection can be achieved simultaneously, and (3) highlight the importance of linear constraints in the design of the randomization. These promising results provide evidence that our approach is a good candidate for privacy-preserving frequency profiling of deployed software.
C1 [Zhang, Hailong] Fordham Univ, Bronx, NY 10458 USA.
   [Hao, Yu; Latif, Sufian; Bassily, Raef; Rountev, Atanas] Ohio State Univ, Columbus, OH 43210 USA.
C3 Fordham University; University System of Ohio; Ohio State University
RP Zhang, HL (corresponding author), Fordham Univ, Bronx, NY 10458 USA.
EM hzhang285@fordham.edu; hao.298@osu.edu; latif.28@osu.edu;
   bassily.1@osu.edu; rountev.1@osu.edu
RI Zhang, Hailong/HKE-3562-2023
OI Zhang, Hailong/0000-0003-4101-3943
FU National Science Foundation [CCF-1907715]
FX We thank the OOPSLA reviewers for their valuable feedback. This material
   is based upon work supported by the National Science Foundation under
   Grant No. CCF-1907715.
CR ACM SIGACT/EATCS, 2017, GOD PRIZ
   [Anonymous], 2017, LEARN PRIV SCAL
   Avent B, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P747
   BALL T, 1994, ACM T PROGR LANG SYS, V16, P1319, DOI 10.1145/183432.183527
   Bassily R., 2017, ADV NEURAL INFORM PR, P2288
   Budi A, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P447
   Bun M, 2018, PODS'18: PROCEEDINGS OF THE 37TH ACM SIGMOD-SIGACT-SIGAI SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P435, DOI 10.1145/3196959.3196981
   Clause J, 2007, PROC INT CONF SOFTW, P261
   Clause J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P21, DOI 10.1145/1985793.1985797
   Dajan A., 2017, MODERNIZATION STAT D
   Diep M, 2006, ISSRE 2006:17TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P331
   Ding B., 2017, P 31 C NEUR INF PROC, P3571
   Duchi JC, 2013, ANN IEEE SYMP FOUND, P429, DOI 10.1109/FOCS.2013.53
   Dwork C, 2006, LECT NOTES COMPUT SC, V4052, P1
   Dwork C, 2006, LECT NOTES COMPUT SC, V3876, P265, DOI 10.1007/11681878_14
   Dwork C, 2013, FOUND TRENDS THEOR C, V9, P211, DOI 10.1561/0400000042
   Elbaum S., 2004, Software Engineering Notes, V29, P65, DOI 10.1145/1013886.1007522
   Erlingsson U, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1054, DOI 10.1145/2660267.2660348
   Exodus Privacy, 2020, MOST FREQ APP TRACK
   Facebook, 2020, FAC AN
   Georges A, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P57
   Google, 2020, FIR
   Google, 2020, ANDR DEB BRIDG ADB
   Google, 2020, UI APPL EX MONK
   Han S, 2012, PROC INT CONF SOFTW, P145, DOI 10.1109/ICSE.2012.6227198
   Haran M., 2005, ESECSIGSOFT FSE, P146, DOI [10.1145/1095430.1081732, DOI 10.1145/1095430.1081732]
   Jin W, 2012, PROC INT CONF SOFTW, P474, DOI 10.1109/ICSE.2012.6227168
   Jin Wei., 2013, P 2013 INT S SOFTWAR, P213, DOI DOI 10.1145/2483760.2483763
   Kasiviswanathan SP, 2011, SIAM J COMPUT, V40, P793, DOI 10.1137/090756090
   Liblit B, 2003, ACM SIGPLAN NOTICES, V38, P141, DOI 10.1145/780822.781148
   Mitula, 2020, MIT HOM
   Nagpurkar Priya., 2006, ACM T ARCHIT CODE OP, V3, P35
   Narayanan A, 2008, P IEEE S SECUR PRIV, P111, DOI 10.1109/SP.2008.33
   Narayanan A, 2009, P IEEE S SECUR PRIV, P173, DOI 10.1109/SP.2009.22
   Near JP, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360598
   Nissim K., 2018, Algorithmic Learning Theory, ALT '18, P619
   Ohmann P, 2017, ACM SIGPLAN NOTICES, V52, P390, DOI [10.1145/3062341.3062368, 10.1145/3140587.3062368]
   Ohmann P, 2016, IEEE INT CONF AUTOM, P27, DOI 10.1145/2970276.2970351
   Orso A., 2003, Software Engineering Notes, V28, P128, DOI 10.1145/949952.940089
   Orso A., 2002, Software Engineering Notes, V27, P65, DOI 10.1145/566171.566182
   Pavlopoulou C., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P277, DOI 10.1109/ICSE.1999.841018
   Peters F, 2013, IEEE T SOFTWARE ENG, V39, P1054, DOI 10.1109/TSE.2013.6
   Sable, 2020, SOOT FRAM AN TRANSF
   Thakurta Abhradeep Guha, 2017, Granted US Patents, Patent No. [9594741 and 9645998, 95947419645998]
   The MathWorks, 2020, OPT TOOLB
   TianhaoWang Milan Lopuhaa-Zwakenberg, 2020, NDSS, P1
   Uber, 2017, UB REL OP SOURC PROJ
   Wang TH, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P729
   Wang YX, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P655, DOI 10.1145/3314221.3314619
   WARNER SL, 1965, J AM STAT ASSOC, V60, P63, DOI 10.2307/2283137
   Zhang D, 2017, ACM SIGPLAN NOTICES, V52, P888, DOI 10.1145/3093333.3009884
   Zhang Hailong, CC, P51
   Zhang Hailong., USENIX SECURITY, P1021
NR 53
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 203
DI 10.1145/3428271
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900080
OA gold
DA 2024-07-18
ER

PT J
AU Zhang, HC
   Roth, E
   Haeberlen, A
   Pierce, BC
   Roth, A
AF Zhang, Hengchu
   Roth, Edo
   Haeberlen, Andreas
   Pierce, Benjamin C.
   Roth, Aaron
TI Testing Differential Privacy with Dual Interpreters
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Differential privacy; testing; symbolic execution
AB Applying differential privacy at scale requires convenient ways to check that programs computing with sensitive data appropriately preserve privacy. We propose here a fully automated framework for testing differential privacy, adapting a well-known "pointwise" technique from informal proofs of differential privacy. Our framework, called DPCheck, requires no programmer annotations, handles all previously verified or tested algorithms, and is the first fully automated framework to distinguish correct and buggy implementations of PrivTree, a probabilistically terminating algorithm that has not previously been mechanically checked.
   We analyze the probability of DPCheck mistakenly accepting a non-private program and prove that, theoretically, the probability of false acceptance can be made exponentially small by suitable choice of test size.
   We demonstrate DPCheck's utility empirically by implementing all benchmark algorithms from prior work on mechanical verification of differential privacy, plus several others and their incorrect variants, and show DPCheck accepts the correct implementations and rejects the incorrect variants.
   We also demonstrate how DPCheck can be deployed in a practical workflow to test differentially privacy for the 2020 US Census Disclosure Avoidance System (DAS).
C1 [Zhang, Hengchu; Roth, Edo; Haeberlen, Andreas; Pierce, Benjamin C.; Roth, Aaron] Univ Penn, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Zhang, HC (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM hengchu@seas.upenn.edu; edoroth@seas.upenn.edu; ahae@cis.upenn.edu;
   bcpierce@cis.upenn.edu; aaroth@cis.upenn.edu
OI Roth, Aaron/0000-0002-0586-0515
FU National Science Foundation [CNS-1065060, CNS-1513694]
FX We are grateful to Danfeng Zhang, Daniel Winograd-Cort, Justin Hsu, and
   the Penn PLClub for discussion and comments, and we thank the anonymous
   reviewers for their detailed feedback. This work was supported in part
   by the National Science Foundation under grants CNS-1065060 and
   CNS-1513694.
CR Albarghouthi A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158146
   Apple, 2017, APPL DIFF PRIV WHIT
   Axelsson Emil, 2010, 2010 8th IEEE/ACM International Conference on Formal Methods and Models for Codesign (MEMOCODE 2010), P169, DOI 10.1109/MEMCOD.2010.5558637
   Barthe G, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P55, DOI 10.1145/2976749.2978391
   Barthe G, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P749, DOI 10.1145/2933575.2934554
   Barthe Gilles, 2019, ARXIV191004137CSCR
   Bichsel B, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P508, DOI 10.1145/3243734.3243863
   Chung EY, 2016, J ECONOMETRICS, V193, P76, DOI 10.1016/j.jeconom.2016.01.003
   Dajani A.N., 2017, The modernization of statistical disclosure limitation at the U . S . Census Bureau
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Ding ZY, 2019, PROC VLDB ENDOW, V13, P293, DOI 10.14778/3368289.3368295
   Ding ZY, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P475, DOI 10.1145/3243734.3243818
   Dwork C, 2006, LECT NOTES COMPUT SC, V3876, P265, DOI 10.1007/11681878_14
   Dwork C, 2013, FOUND TRENDS THEOR C, V9, P211, DOI 10.1561/0400000042
   Farina Gian Pietro, 2017, ABS171108349 CORR
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Ghosh A, 2009, ACM S THEORY COMPUT, P351
   Hall Robert, 2013, Journal of Privacy and Confidentiality, V4, DOI [DOI 10.29012/JPC.V4I2.621, 10.29012/ jpc.v4i2.621]
   Hsu J, 2014, P IEEE CSFW, P398, DOI 10.1109/CSF.2014.35
   Hsu Justin, 2017, THESIS U PENNSYLVANI
   Kasiviswanathan Shiva P., 2014, J PRIVACY CONFIDENTI, V6, DOI [10.29012/jpc.v6i1.634, DOI 10.29012/JPC.V6I1.634]
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Lyu M, 2017, PROC VLDB ENDOW, V10, P637, DOI 10.14778/3055330.3055331
   MASSEY FJ, 1951, J AM STAT ASSOC, V46, P68, DOI 10.2307/2280095
   Microsoft, 2017, COLL TEL DAT PRIV
   Mironov I, 2012, CCS, P650, DOI [DOI 10.1145/2382196.2382264, DOI 10.1145/2382196]
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Murdoch DJ, 2008, AM STAT, V62, P242, DOI 10.1198/000313008X332421
   Near JP, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360598
   Petti Samantha, 2019, Gates Open Res, V3, P1722, DOI 10.12688/gatesopenres.13089.1
   Reed J, 2010, ACM SIGPLAN NOTICES, V45, P157, DOI 10.1145/1932681.1863568
   Rogers Ryan M, 2016, ADV NEURAL INFORM PR, V29
   Sato T, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785668
   Steven Ruggles, 2020, INTEGRATED PUBLIC US, DOI DOI 10.18128/D010.V10.0
   Svenningsson J, 2013, TRENDS FUNCTIONAL PR, V7829, P21, DOI [10.1007/978-3-642-40447-4_2, DOI 10.1007/978-3-642-40447-42]
   Svenningsson J, 2015, COMPUT LANG SYST STR, V44, P143, DOI 10.1016/j.cl.2015.07.003
   Terei D, 2012, ACM SIGPLAN NOTICES, V47, P137, DOI 10.1145/2430532.2364524
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Wang YX, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P655, DOI 10.1145/3314221.3314619
   Wilson Royce J, 2019, ARXIV190901917CSCR
   Winograd-Cort D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110254
   Zhang D, 2017, ACM SIGPLAN NOTICES, V52, P888, DOI 10.1145/3093333.3009884
   Zhang J, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P155, DOI 10.1145/2882903.2882928
NR 43
TC 1
Z9 2
U1 1
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 165
DI 10.1145/3428233
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900042
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Xie, NN
   Eisenberg, RA
   Oliveira, BCDS
AF Xie, Ningning
   Eisenberg, Richard A.
   Oliveira, Bruno C. D. S.
TI Kind Inference for Datatypes
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Haskell; Dependent Types
ID UNIFICATION
AB In recent years, languages like Haskell have seen a dramatic surge of new features that significantly extends the expressive power of their type systems. With these features, the challenge of kind inference for datatype declarations has presented itself and become a worthy research problem on its own.
   This paper studies kind inference for datatypes. Inspired by previous research on type-inference, we offer declarative specifications for what datatype declarations should be accepted, both for Haskell98 and for a more advanced system we call PolyKinds, based on the extensions in modern Haskell, including a limited form of dependent types. We believe these formulations to be novel and without precedent, even for Haskell98. These specifications are complemented with implementable algorithmic versions. We study soundness, completeness and the existence of principal kinds in these systems, proving the properties where they hold. This work can serve as a guide both to language designers who wish to formalize their datatype declarations and also to implementors keen to have principled inference of principal types.
C1 [Xie, Ningning; Oliveira, Bruno C. D. S.] Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China.
   [Eisenberg, Richard A.] Bryn Mawr Coll, Dept Comp Sci, Bryn Mawr, PA 19010 USA.
   [Eisenberg, Richard A.] Tweag IO, Cambridge, England.
C3 University of Hong Kong; Bryn Mawr College
RP Xie, NN (corresponding author), Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China.
EM nnxie@cs.hku.hk; rae@richarde.dev; bruno@cs.hku.hk
RI dos Santos Oliveira, Bruno Cesar/I-7977-2013
OI Eisenberg, Richard/0000-0002-7669-9781
FU Hong Kong Research Grant Council [17210617, 17209519]; National Science
   Foundation [1704041]; Division of Computing and Communication
   Foundations; Direct For Computer & Info Scie & Enginr [1704041] Funding
   Source: National Science Foundation
FX We thank the anonymous reviewers for their helpful comments. This work
   has been sponsored by the Hong Kong Research Grant Council projects
   number 17210617 and 17209519. This material is based upon work supported
   by the National Science Foundation under Grant No. 1704041.
CR Abel A, 2011, LECT NOTES COMPUT SC, V6690, P10, DOI 10.1007/978-3-642-21691-6_5
   ANDREWS PB, 1971, J SYMBOLIC LOGIC, V36, P414, DOI 10.2307/2269949
   [Anonymous], 2012, P 8 ACM SIGPLAN WORK, DOI [10.1145/2103786.2103795, DOI 10.1145/2103786.2103795]
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Bird R., 1998, Mathematics of Program Construction. 4th International Conference, MPC'98. Proceedings, P52, DOI 10.1007/BFb0054285
   Breitner J, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000150
   Cardelli L., 1986, 10 DIG EQ CORP SRC
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P241, DOI 10.1145/1090189.1086397
   Cockx J, 2016, ACM SIGPLAN NOTICES, V51, P270, DOI 10.1145/3022670.2951917
   Comini M, 2008, LECT NOTES COMPUT SC, V5079, P144
   Cori R., 2002, Verification, Model Checking, and Abstract Interpretation. Third International Workshop, VMCAI 2002. Revised Papers (Lecture Notes in Computer Science Vol.2294), P225
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Damiani F, 2003, ACM T PROGR LANG SYS, V25, P401, DOI 10.1145/778559.778560
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   Eisenberg RA, 2016, LECT NOTES COMPUT SC, V9632, P229, DOI 10.1007/978-3-662-49498-1_10
   Eisenberg RA, 2014, ACM SIGPLAN NOTICES, V49, P671, DOI 10.1145/2535838.2535856
   Eisenberg Richard A, 2016, THESIS U PENNSYLAVAN
   Garcia R, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2676726.2676992, 10.1145/2775051.2676992]
   GOLDFARB WD, 1981, THEOR COMPUT SCI, V13, P225, DOI 10.1016/0304-3975(81)90040-2
   Gori R, 2003, LECT NOTES COMPUT SC, V2575, P132
   Gundry A., 2013, TUTORIAL IMPLEMENTAT
   Gundry A, 2010, MSFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON MATHEMATICALLY STRUCTURED FUNCTIONAL PROGRAMMING, P43
   Gundry Adam, 2013, Ph. D. Dissertation
   HENGLEIN F, 1993, ACM T PROGR LANG SYS, V15, P253, DOI 10.1145/169701.169692
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Huet G. P., 1975, Theoretical Computer Science, V1, P27, DOI 10.1016/0304-3975(75)90011-0
   Jim T., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P42, DOI 10.1145/237721.237728
   Jones Mark P, 1995, J FUNCT PROGRAM, V5, P1
   Jones Mark P., 1999, P 1999 HASK WORKSH H, P9
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Jones SP, 2006, ACM SIGPLAN NOTICES, V41, P50
   Kiss Csongor, 2019, P ACM SIGPLAN INT C
   Le Botlan Didier, 2003, MLF RAISING ML POWER, P12
   Leijen D, 2009, ACM SIGPLAN NOTICES, V44, P66, DOI 10.1145/1594834.1480891
   Miller D., 1991, Logic Programming. Proceedings of the Eighth International Conference, P255
   MYCROFT A, 1984, LECT NOTES COMPUT SC, V167, P217
   Odersky Martin., 1996, Proceedings of the 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL'96, page, P54
   Pottier Francois, 2005, ESSENCE ML TYPE INFE
   Reed Jason., 2009, P 4 INT WORKSHOP LOG, P49
   Remy Didier., 2008, Proceeding of the 13th ACM SIGPLAN international conference on Functional programming, ICFP 2008, Victoria, BC, Canada, September 20-28, 2008, P63, DOI [10.1145/1411204.1411216, DOI 10.1145/1411204.1411216]
   Sacerdoti Coen C., 2004, THESIS U BOLOGNA
   Schrijvers T, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P341
   Serrano A, 2018, ACM SIGPLAN NOTICES, V53, P783, DOI [10.1145/3192366.3192389, 10.1145/3296979.3192389]
   Simonet V, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180476
   StephanieWeirich Antoine Voizard, 2017, P 22 ACM SIGPLAN INT
   Vytiniotis D, 2011, J FUNCT PROGRAM, V21, P333, DOI 10.1017/S0956796811000098
   Vytiniotis Dimitrios, 2008, FPH 1 CLASS POLYMORP, P12
   Weirich S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341705
   Weirich S, 2013, ACM SIGPLAN NOTICES, V48, P275, DOI [10.1145/2544174.2500599, 10.1145/2500365.2500599]
   Xi HW, 2003, ACM SIGPLAN NOTICES, V38, P224, DOI 10.1145/640128.604150
   Xie Ningnign, 2018, HASKELL IMPLEMENTORS
   Ziliani B, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P179, DOI 10.1145/2784731.2784751
NR 52
TC 2
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 53
DI 10.1145/3371121
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400054
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Abdulla, PA
   Atig, MF
   Jonsson, B
   Lång, M
   Ngo, TP
   Sagonas, K
AF Abdulla, Parosh Aziz
   Atig, Mohamed Faouzi
   Jonsson, Bengt
   Lang, Magnus
   Tuan Phong Ngo
   Sagonas, Konstantinos
TI Optimal Stateless Model Checking for Reads-From Equivalence under
   Sequential Consistency
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrent programs; sequential consistency; program verification;
   stateless model checking; dynamic partial order reduction
AB We present a new approach for stateless model checking (SMC) of multithreaded programs under Sequential Consistency (SC) semantics. To combat state-space explosion, SMC is often equipped with a partial-order reduction technique, which defines an equivalence on executions, and only needs to explore one execution in each equivalence class. Recently, it has been observed that the commonly used equivalence of Mazurkiewicz traces can be coarsened but still cover all program crashes and assertion violations. However, for this coarser equivalence, which preserves only the reads-from relation from writes to reads, there is no SMC algorithm which is (i) optimal in the sense that it explores precisely one execution in each reads-from equivalence class, and (ii) efficient in the sense that it spends polynomial effort per class. We present the first SMC algorithm for SC that is both optimal and efficient in practice, meaning that it spends polynomial time per equivalence class on all programs that we have tried. This is achieved by a novel test that checks whether a given reads-from relation can arise in some execution. We have implemented the algorithm by extending NIDHUGG, an SMC tool for C/C++ programs, with a new mode called rfsc. Our experimental results show that NIDHUGG/rfsc, although slower than the fastest SMC tools in programs where tools happen to examine the same number of executions, always scales similarly or better than them, and outperforms them by an exponential factor in programs where the reads-from equivalence is coarser than the standard one. We also present two non-trivial use cases where the new equivalence is particularly effective, as well as the significant performance advantage that NIDHUGG/rfsc offers compared to state-of-the-art SMC and systematic concurrency testing tools.
C1 [Abdulla, Parosh Aziz; Atig, Mohamed Faouzi; Jonsson, Bengt; Lang, Magnus; Tuan Phong Ngo; Sagonas, Konstantinos] Uppsala Univ, Uppsala, Sweden.
C3 Uppsala University
RP Abdulla, PA (corresponding author), Uppsala Univ, Uppsala, Sweden.
EM parosh@it.uu.se; mohamed_faouzi.atig@it.uu.se; bengt@it.uu.se;
   magnus.lang@it.uu.se; tuan-phong.ngo@it.uu.se; kostis@it.uu.se
RI Sagonas, Konstantinos/IZD-8641-2023; Ngo, Tuan/KLB-9554-2024
OI Sagonas, Konstantinos/0000-0001-9657-0179; Lang,
   Magnus/0000-0003-0984-4229; Ngo, Tuan Phong/0000-0003-4993-0092
FU Swedish Research Council through UPMARC [621-2017-04812]; Swedish
   Foundation for Strategic Research through the aSSIsT project
FX We thank the OOPSLA 2019 reviewers for helpful feedback, and Martin
   Rinard for pointing us to code that we used for a benchmark. This work
   has been partially supported by the Swedish Research Council through
   UPMARC and grant #621-2017-04812, and by the Swedish Foundation for
   Strategic Research through the aSSIsT project.
CR Abdulla Parosh Aziz, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P353, DOI 10.1007/978-3-662-46681-0_28
   Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Abdulla PA, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276505
   Abdulla PA, 2017, J ACM, V64, DOI 10.1145/3073408
   Abdulla Parosh Aziz, 2019, OPTIMAL STATELESS MO, DOI [10.5281/zenodo.3401442, DOI 10.5281/ZENODO.3401442]
   Albert E, 2017, LECT NOTES COMPUT SC, V10426, P526, DOI 10.1007/978-3-319-63387-9_26
   [Anonymous], 2013, P 5 USENIX WORKSH HO
   [Anonymous], 2013, Runtime Verification, DOI DOI 10.1007/978-3-642
   [Anonymous], 2015, 26 INT C CONC THEOR, DOI DOI 10.4230/LIPICS.CONCUR.2015.456
   Aronis S, 2018, LECT NOTES COMPUT SC, V10806, P229, DOI 10.1007/978-3-319-89963-3_14
   Biswas Ranadeep, 2019, P ACM PROGR LANG OOP
   Burckhardt S, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P167
   Chalupa M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158119
   Christakis M, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P154, DOI 10.1109/ICST.2013.50
   Clarke E. M., 1999, International Journal on Software Tools for Technology Transfer, V2, P279, DOI 10.1007/s100090050035
   Esparza J., 2008, UNFOLDINGS PARTIAL O
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Gibbons PB, 1997, SIAM J COMPUT, V26, P1208, DOI 10.1137/S0097539794279614
   Godefroid P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P174, DOI 10.1145/263699.263717
   Godefroid P, 2005, FORM METHOD SYST DES, V26, P77, DOI 10.1007/s10703-005-1489-x
   Godefroid P., 1998, Software Engineering Notes, V23, P124, DOI 10.1145/271775.271800
   Godefroid P, 1996, LECT NOTES COMPUT SC, V1032, P11
   Hennessy M., 1980, Automata, Languages and Programming, Seventh Colloquium, P299
   Huang J, 2015, ACM SIGPLAN NOTICES, V50, P165, DOI [10.1145/2737924.2737975, 10.1145/2813885.2737975]
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Kokologiannakis M, 2017, SPIN'17: PROCEEDINGS OF THE 24TH ACM SIGSOFT INTERNATIONAL SPIN SYMPOSIUM ON MODEL CHECKING OF SOFTWARE, P172, DOI 10.1145/3092282.3092287
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Liqiang Wang, 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P137, DOI 10.1145/1122971.1122993
   MAZURKIEWICZ A, 1987, LECT NOTES COMPUT SC, V255, P279
   Musuvathi M., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, P267
   Norris B, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2806886
   Peled D., 1993, Computer Aided Verification. 5th International Conference, CAV '93 Proceedings, P409
   Sen K, 2005, LECT NOTES COMPUT SC, V3535, P211
   Sen K, 2007, LECT NOTES COMPUT SC, V4383, P166
   Sinha A., 2011, 2011 9th IEEE/ACM International Conference on Formal Methods and Models for Codesign (MEMOCODE 2011), P99, DOI 10.1109/MEMCOD.2011.5970516
   SV-COMP, 2019, COMP SOFTW VER
   Thomson P., 2016, ACM Transactions on Parallel Computing, V2, P1, DOI DOI 10.1145/2858651
   VALMARI A, 1991, LECT NOTES COMPUT SC, V483, P491
   Yuan XH, 2018, LECT NOTES COMPUT SC, V10982, P317, DOI 10.1007/978-3-319-96142-2_20
   Zhang NL, 2015, ACM SIGPLAN NOTICES, V50, P250, DOI [10.1145/2813885.2737956, 10.1145/2737924.2737956]
NR 40
TC 24
Z9 24
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 150
DI 10.1145/3360576
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500035
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Adams, U
AF Adams, Ulf
TI Ryu Revisited: Printf Floating Point Conversion
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE float; string; printf; performance
AB Ryu Printf is a new algorithm to convert floating-point numbers to decimal strings according to the printf %f, %e. and %g formats: %f generates 'full' output (integer part of the input, dot, configurable number of digits), %e generates scientific output (one leading digit, dot, configurable number of digits, exponent), and %g generates the shorter of the two. Ryu Printf is based on the Ryu algorithm, which converts binary floating-point numbers to the shortest equivalent decimal floating-point representation. We provide quantitative evidence that Ryu Printf is between 3.8 and 55 times faster than existing printf implementations.
   Furthermore, we show that both Ryu and Ryu Printf generalize to arbitrary number bases. This finding implies the existence of a fast algorithm to convert from base-10 to base-2, as long as the maximum precision of the input is known a priori.
C1 [Adams, Ulf] Google, Berlin, Germany.
C3 Google Incorporated
RP Adams, U (corresponding author), Google, Berlin, Germany.
EM ulfjack@google.com
CR Adams U, 2018, ACM SIGPLAN NOTICES, V53, P270, DOI [10.1145/3192366.3192369, 10.1145/3296979.3192369]
   Andrysco M, 2016, ACM SIGPLAN NOTICES, V51, P555, DOI 10.1145/2914770.2837654
   [Anonymous], 2018, PRINTF FORMAT STRING
   [Anonymous], 2011, IFIP Advances in Information and Communication Technology
   [Anonymous], 2019, ULF ADAMS, DOI [10.5281/zenodo.3366212, DOI 10.5281/ZENODO.3366212]
   Burger RG, 1996, ACM SIGPLAN NOTICES, V31, P108, DOI 10.1145/249069.231397
   COONEN JT, 1980, COMPUTER, V13, P68, DOI 10.1109/MC.1980.1653344
   COONEN JT, 1981, COMPUTER, V14, P62
   Free Software Foundation Inc, 2018, GNU LIBC PRINTF DOC GNU LIBC PRINTF DOC
   Gay David M., 1990, CORRECTLY ROUNDED BI CORRECTLY ROUNDED BI
   IBM, 2018, IBM PRINTF DOC IBM PRINTF DOC
   Jaffer Aubrey, 2013, EASY ACCURATE READIN
   Knuth Donald Ervin, 1997, ART COMPUTER PROGRAM, VII, P326
   Loitsch F, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P233, DOI 10.1145/1806596.1806623
   Microsoft, 2016, MICR VIS STUD 2017 F MICR VIS STUD 2017 F
   Samelson K., 1953, Zeirschrift fur Angewandte Mathematik und Physik, V4, P312, DOI DOI 10.1007/BF02074638
   STEELE GL, 1990, SIGPLAN NOTICES, V25, P112, DOI 10.1145/93548.93559
   Zuras D., 2008, 7542008 IEEE, V754-2008, P1, DOI [DOI 10.1109/IEEESTD.2008.4610935, DOI 10.1109/IEEESTD.2008.5976968]
NR 18
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 169
DI 10.1145/3360595
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500054
OA gold
DA 2024-07-18
ER

PT J
AU Caires, L
   Toninho, B
AF Caires, Luis
   Toninho, Bernardo
TI Refinement Kinds Type-Safe Programming with Practical Type-Level
   Computation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Refinement Kinds; Typed Meta-Programming; Type-level Computation; Type
   Theory
AB This work introduces the novel concept of kind refinement, which we develop in the context of an explicitly polymorphic ML-like language with type-level computation. Just as type refinements embed rich specifications by means of comprehension principles expressed by predicates over values in the type domain, kind refinements provide rich kind specifications by means of predicates over types in the kind domain. By leveraging our powerful refinement kind discipline, types in our language are not just used to statically classify program expressions and values, but also conveniently manipulated as tree-like data structures, with their kinds refined by logical constraints on such structures. Remarkably, the resulting typing and kinding disciplines allow for powerful forms of type reflection, ad-hoc polymorphism and type-directed meta-programming, which are often found in modern software development, but not typically expressible in a type-safe manner in general purpose languages. We validate our approach both formally and pragmatically by establishing the standard meta-theoretical results of type safety and via a prototype implementation of a kind checker, type checker and interpreter for our language.
C1 [Caires, Luis; Toninho, Bernardo] Univ Nova Lisboa, NOVA LINCS, FCT NOVA, Dept Informat, Lisbon, Portugal.
C3 Universidade Nova de Lisboa
RP Caires, L (corresponding author), Univ Nova Lisboa, NOVA LINCS, FCT NOVA, Dept Informat, Lisbon, Portugal.
EM lcaires@fct.unl.pt; btoninho@fct.unl.pt
RI Caires, Luís/C-8384-2009; Toninho, Bernardo/IUB-1256-2023
OI Toninho, Bernardo/0000-0002-0746-7514
FU NOVA LINCS [UID/CEC/04516/2019]; Fundacao para a Ciencia e Tecnologia
   project CLAY [PTDC/EEICTP/4293/2014]; OutSystems FLEX-AGILE project
FX The authors would like to thank the anonymous referees for their
   valuable comments and suggestions. This work is supported by NOVA LINCS
   (Ref. UID/CEC/04516/2019), Fundacao para a Ciencia e Tecnologia project
   CLAY (PTDC/EEICTP/4293/2014), and the NOVA LINCS & OutSystems FLEX-AGILE
   project.
CR ABADI M, 1991, ACM T PROGR LANG SYS, V13, P237, DOI 10.1145/103135.103138
   Altenkirch Thorsten, 2002, GENERIC PROGRAMMING, V243, P1
   Bansal K, 2018, LOG METH COMPUT SCI, V14, DOI 10.23638/LMCS-14(4:12)2018
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Bengtson J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890031
   Caires Luis, 2019, ABS190800441 CORR
   Calcagno C, 2003, J FUNCT PROGRAM, V13, P545, DOI 10.1017/S0956796802004598
   Cardelli L., 1991, IFIP STATE OF THE AR, P431
   Chlipala A, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P122, DOI 10.1145/1806596.1806612
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   CoqDevelopmentTeam, 2004, COQ PROOF ASS REF MA
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Fahndrich M., 2006, GPCE 06 P 5 INT C GE, P275, DOI DOI 10.1145/1173706.1173748
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Gaster Benedict R, 1996, TECHNICAL REPORT
   Giménez E, 1998, LECT NOTES COMPUT SC, V1443, P397, DOI 10.1007/BFb0055070
   GIRARD JY, 1986, THEOR COMPUT SCI, V45, P159, DOI 10.1016/0304-3975(86)90044-7
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   Harper Robert, 1991, C RECORD 18 ANN ACM, P131, DOI [10.1145/99583.99603, DOI 10.1145/99583.99603]
   Hofmann M., 1997, EXTENSIONAL CONSTRUC
   Huang SS, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P79, DOI 10.1145/1375581.1375592
   Kawaguchi M, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P304, DOI 10.1145/1542476.1542510
   Kazerounian M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P966, DOI 10.1145/3314221.3314630
   Kiselyov Oleg, 2004, HASKELL 04, P96, DOI DOI 10.1145/1017472.1017488
   Leijen D, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P109, DOI 10.1145/331963.331977
   Morris J. Garrett, 2019, PACMPL 3 POPL 2019, P1
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   Petricek T, 2016, ACM SIGPLAN NOTICES, V51, P477, DOI [10.1145/2980983.2908115, 10.1145/2908080.2908115]
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pierce Benjamin C., 2004, Advanced Topics in Types and Programming Languages
   Reynolds Andrew, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P377, DOI 10.1007/978-3-642-38574-2_26
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Rondon PM, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1379022.1375602
   Rushby J, 1998, IEEE T SOFTWARE ENG, V24, P709, DOI 10.1109/32.713327
   Smaragdakis Y, 2015, LECT NOTES COMPUT SC, V9458, P485, DOI 10.1007/978-3-319-26529-2_26
   Stone CA, 2006, ACM T COMPUT LOG, V7, P676, DOI 10.1145/1183278.1183281
   Stone Christopher A., 2000, POPL 2000, P214, DOI [10.1145/325694.325724, DOI 10.1145/325694.325724]
   Swamy N, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P266
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Vazou N, 2013, LECT NOTES COMPUT SC, V7792, P209, DOI 10.1007/978-3-642-37036-6_13
   Vekris P, 2016, ACM SIGPLAN NOTICES, V51, P310, DOI [10.1145/2980983.2908110, 10.1145/2908080.2908110]
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Weirich S, 2013, ACM SIGPLAN NOTICES, V48, P275, DOI [10.1145/2544174.2500599, 10.1145/2500365.2500599]
   Xi HW, 2007, J FUNCT PROGRAM, V17, P215, DOI 10.1017/S0956796806006216
   Xi HW, 1998, ACM SIGPLAN NOTICES, V33, P249, DOI 10.1145/277652.277732
NR 45
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 131
DI 10.1145/3360557
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500016
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Essertel, GM
   Wei, GN
   Rompf, T
AF Essertel, Gregory M.
   Wei, Guannan
   Rompf, Tiark
TI Precise Reasoning with Structured Time, Structured Heaps, and Collective
   Operations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE static analysis; verification; program transformation; semantics
AB Despite decades of progress, static analysis tools still have great difficulty dealing with programs that combine arithmetic, loops, dynamic memory allocation, and linked data structures. In this paper we draw attention to two fundamental reasons for this difficulty: First, typical underlying program abstractions are low-level and inherently scalar, characterizing compound entities like data structures or results computed through iteration only indirectly. Second, to ensure termination, analyses typically project away the dimension of time, and merge information per program point, which incurs a loss in precision.
   As a remedy, we propose to make collective operations first-class in program analysis-inspired by Sigma-notation in mathematics, and also by the success of high-level intermediate languages based on map/reduce operations in program generators and aggressive optimizing compilers for domain-specific languages (DSLs). We further propose a novel structured heap abstraction that preserves a symbolic dimension of time, reflecting the program's loop structure and thus unambiguously correlating multiple temporal points in the dynamic execution with a single point in the program text.
   This paper presents a formal model, based on a high-level intermediate analysis language, a practical realization in a prototype tool that analyzes C code, and an experimental evaluation that demonstrates competitive results on a series of benchmarks. Remarkably, our implementation achieves these results in a fully semantics-preserving strongest-postcondition model, which is a worst-case for analysis/verification. The underlying ideas, however, are not tied to this model and would equally apply in other settings, e.g., demand-driven invariant inference in a weakest-precondition model. Given its semantics-preserving nature, our implementation is not limited to analysis for verification, but can also check program equivalence, and translate legacy C code to high-performance DSLs.
C1 [Essertel, Gregory M.; Wei, Guannan; Rompf, Tiark] Purdue Univ, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Essertel, GM (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM gesserte@purdue.edu; guannanwei@purdue.edu; tiark@purdue.edu
OI Wei, Guannan/0000-0002-3150-2033
FU NSF [1553471, 1564207, 1918483]; DOE award [DE-SC0018050]; Division of
   Computing and Communication Foundations; Direct For Computer & Info Scie
   & Enginr [1918483] Funding Source: National Science Foundation; U.S.
   Department of Energy (DOE) [DE-SC0018050] Funding Source: U.S.
   Department of Energy (DOE)
FX The authors thank Suresh Jagannathan for providing extensive comments on
   draft versions of this paper. This work was supported in part by NSF
   awards 1553471, 1564207, 1918483, DOE award DE-SC0018050, as well as
   gifts from Google, Facebook, and VMware.
CR Ahmad MBS, 2016, ELECTRON P THEOR COM, P67, DOI 10.4204/EPTCS.229.7
   Amin N, 2017, ACM SIGPLAN NOTICES, V52, P666, DOI 10.1145/3093333.3009866
   [Anonymous], 2013, OPTIMIZING DATA STRU
   Appel AW, 1998, ACM SIGPLAN NOTICES, V33, P17, DOI 10.1145/278283.278285
   Bachmann O., 1994, ISSAC'94. Proceedings of the International Symposium on Symbolic and Algebraic Computation, P242, DOI 10.1145/190347.190423
   Baghdadi R, 2015, INT CONFER PARA, P138, DOI 10.1109/PACT.2015.17
   Benabderrahmane MW, 2010, LECT NOTES COMPUT SC, V6011, P283, DOI 10.1007/978-3-642-11970-5_16
   Bergstra J. A., 1996, Programming Languages and Systems - ESOP '96. 6th European Symposium on Programming. Proceedings, P92
   Beyer Dirk, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P184, DOI 10.1007/978-3-642-22110-1_16
   Beyer D, 2012, LECT NOTES COMPUT SC, V7214, P504, DOI 10.1007/978-3-642-28756-5_38
   Bingham J, 2006, LECT NOTES COMPUT SC, V3855, P207
   Brown Kevin J., 2016, CGO
   Brown Kevin J., 2011, PACT, DOI DOI 10.1109/PACT.2011.15
   Calcagno C, 2015, LECT NOTES COMPUT SC, V9058, P3, DOI 10.1007/978-3-319-17524-9_1
   Calcagno C, 2011, J ACM, V58, DOI 10.1145/2049697.2049700
   Chakravarty M. M., 2011, P 6 WORKSH DECL ASP, P3, DOI DOI 10.1145/1926354.1926358
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Dillig I, 2011, FORM METHOD SYST DES, V39, P246, DOI 10.1007/s10703-011-0127-z
   Dillig Isil, POPL
   Distefano D, 2006, LECT NOTES COMPUT SC, V3920, P287
   Farzan A, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P57, DOI 10.1109/FMCAD.2015.7542253
   Fourier Joseph, 1820, B SCI SOC PHILOMATHI, p58S70
   Gopan D, 2005, ACM SIGPLAN NOTICES, V40, P338, DOI 10.1145/1047659.1040333
   Gurfinkel A, 2015, LECT NOTES COMPUT SC, V9206, P343, DOI 10.1007/978-3-319-21690-4_20
   Henzinger TA, 2010, LECT NOTES COMPUT SC, V6397, P348, DOI 10.1007/978-3-642-16242-8_25
   IVERSON KE, 1980, COMMUN ACM, V23, P444, DOI 10.1145/358896.358899
   Jeannet B, 2014, ACM SIGPLAN NOTICES, V49, P529, DOI 10.1145/2535838.2535843
   Kamil S, 2016, ACM SIGPLAN NOTICES, V51, P711, DOI [10.1145/2980983.2908117, 10.1145/2908080.2908117]
   Kincaid Z., 2017, PLDI
   Knobe K., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P107, DOI 10.1145/268946.268956
   Kovács L, 2008, LECT NOTES COMPUT SC, V4963, P249, DOI 10.1007/978-3-540-78800-3_18
   Lee H, 2011, IEEE MICRO, V31, P42, DOI 10.1109/MM.2011.68
   Lerner S, 2003, ACM SIGPLAN NOTICES, V38, P220, DOI 10.1145/780822.781156
   Lerner S, 2002, ACM SIGPLAN NOTICES, V37, P270, DOI 10.1145/565816.503298
   Llopard I, 2017, ACM T EMBED COMPUT S, V16, DOI 10.1145/2990195
   McDonell TL, 2015, ACM SIGPLAN NOTICES, V50, P201, DOI 10.1145/2804302.2804313
   Mendis C, 2015, ACM SIGPLAN NOTICES, V50, P391, DOI [10.1145/2737924.2737974, 10.1145/2813885.2737974]
   Oh H, 2012, ACM SIGPLAN NOTICES, V47, P229, DOI 10.1145/2345156.2254092
   OHearn Peter W., 2016, ACM SIGLOG NEWS, V3, P47, DOI DOI 10.1145/2984450.2984457
   Owens S, 2016, LECT NOTES COMPUT SC, V9632, P589, DOI 10.1007/978-3-662-49498-1_23
   PUGH W, 1991, SUPERCOMPUTING 91, P4
   Radoi C, 2014, ACM SIGPLAN NOTICES, V49, P909, DOI [10.1145/2714064.2660228, 10.1145/2660193.2660228]
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   RAMSHAW L, 1988, J ACM, V35, P893, DOI 10.1145/48014.48021
   Raychev V, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P153, DOI 10.1145/2815400.2815418
   Reps T, 2016, ACM SIGPLAN NOTICES, V51, P663, DOI 10.1145/2914770.2837659
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rompf T, 2011, ELECTRON P THEOR COM, P93, DOI 10.4204/EPTCS.66.5
   Rompf T, 2017, PROCEEDINGS OF THE 2017 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'17), P83, DOI 10.1145/3018882.3018891
   Rompf T, 2014, ACM SIGPLAN NOTICES, V49, P41, DOI [10.1145/2594291.2594316, 10.1145/2666356.2594316]
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   Schwartz Jack., 1970, Courant Institute of Mathematical Sciences, New York University, V12, P193
   Siek Jeremy G., 2017, ARXIV170703762
   Siek Jeremy G, 2016, DENOTATIONAL SEMANTI
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2980983.2908102, 10.1145/2908080.2908102]
   Steuwer M, 2017, INT SYM CODE GENER, P74, DOI 10.1109/CGO.2017.7863730
   Steuwer M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P205, DOI 10.1145/2784731.2784754
   Sujeeth A.K., 2011, ICML
   Sujeeth AK, 2014, ACM T EMBED COMPUT S, V13, DOI 10.1145/2584665
   Svensson BJ, 2015, FHPC'15 PROCEEDINGS OF THE 4TH ACM SIGPLAN WORKSHOP ON FUNCTIONAL HIGH-PERFORMANCE COMPUTING, P12, DOI 10.1145/2808091.2808093
   Svensson BJ, 2014, COMMUN ACM, V57, P56, DOI 10.1145/2605685
   Tan T, 2017, ACM SIGPLAN NOTICES, V52, P278, DOI [10.1145/3140587.3062360, 10.1145/3062341.3062360]
   TARJAN RE, 1981, J ACM, V28, P594, DOI 10.1145/322261.322273
   Tate R, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(1:10)2011
   Tate R, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P389, DOI 10.1145/1706299.1706345
   Van Engelen Robert A., 2004, ICS
   Van Horn D, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Vollmer Michael, 2015, FHPC ICFP, p1S11
   Xin B, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P238, DOI 10.1145/1375581.1375611
   Yakdan K., 2015, NDSS
   Zhu H, 2018, ACM SIGPLAN NOTICES, V53, P707, DOI [10.1145/3192366.3192416, 10.1145/3296979.3192416]
NR 71
TC 2
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 157
DI 10.1145/3360583
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500042
OA gold
DA 2024-07-18
ER

PT J
AU Lu, JB
   Xue, JL
AF Lu, Jingbo
   Xue, Jingling
TI Precision-Preserving Yet Fast Object-Sensitive Pointer Analysis with
   Partial Context Sensitivity
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Pointer Analysis; Object Sensitivity; CFL Reachability
ID TO ANALYSIS
AB Object-sensitivity is widely used as a context abstraction for computing the points-to information context-sensitively for object-oriented languages like Java. Due to the combinatorial explosion of contexts in large programs, k-object-sensitive pointer analysis (under k-limiting), denoted k-obj, is scalable only for small values of k, where k <= 2 typically. A few recent solutions attempt to improve its efficiency by instructing k-obj to analyze only some methods in the program context-sensitively, determined heuristically by a pre-analysis. While already effective, these heuristics-based pre-analyses do not provide precision guarantees, and consequently, are limited in the efficiency gains achieved. We introduce a radically different approach, EAGLE, that makes k-obj run significantly faster than the prior art while maintaining its precision. The novelty of EAGLE is to enable k-obj to analyze a method with partial context-sensitivity, i.e., context-sensitively for only some of its selected variables/allocation sites. EAGLE makes these selections during a lightweight pre-analysis by reasoning about context-free-language (CFL) reachability at the level of variables/objects in the program, based on a new CFL-reachability formulation of k-obj. We demonstrate the advances made by EAGLE by comparing it with the prior art in terms of a set of popular Java benchmarks and applications.
C1 [Lu, Jingbo; Xue, Jingling] UNSW Sydney, Sydney, NSW, Australia.
C3 University of New South Wales Sydney
RP Lu, JB (corresponding author), UNSW Sydney, Sydney, NSW, Australia.
EM jlu@cse.unsw.edu.au; jingling@cse.unsw.edu.au
FU Australian Research Council [DP170103956, DP180104069]
FX We thank all the reviewers for their valuable inputs. This work has been
   supported by Australian Research Council Grants (DP170103956 and
   DP180104069).
CR Ali K, 2013, LECT NOTES COMPUT SC, V7920, P378, DOI 10.1007/978-3-642-39038-8_16
   Ali K, 2012, LECT NOTES COMPUT SC, V7313, P688, DOI 10.1007/978-3-642-31057-7_30
   [Anonymous], 1994, Program analysis and specialization for the C programming language
   [Anonymous], 1991, Ph.D. dissertation
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bodden E, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P241, DOI 10.1145/1985793.1985827
   Cai C, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P196, DOI 10.1145/3192366.3192378
   Chaudhuri S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P159, DOI 10.1145/1328438.1328460
   Chord, PROGRAM ANAL PLATFOR
   DOOP, SOPH FRAM JAV POINT
   Hassanshahi B., 2017, P 6 ACM SIGPLAN INT, P13
   Jeon M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276510
   Jeong S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133924
   Kodumal J, 2004, ACM SIGPLAN NOTICES, V39, P207, DOI 10.1145/996893.996867
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Lhoták O, 2008, ACM T SOFTW ENG METH, V18, DOI 10.1145/1391984.1391987
   Li Y, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276511
   Liu BZ, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3293606
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Raghothaman M, 2018, ACM SIGPLAN NOTICES, V53, P722, DOI [10.1145/3192366.3192417, 10.1145/3296979.3192417]
   Rasthofer S, 2016, 23RD ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2016), DOI 10.14722/ndss.2016.23066
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Reps T, 2000, ACM T PROGR LANG SYS, V22, P162, DOI 10.1145/345099.345137
   Shang Lei, 2012, P 10 INT S CODE GENE, P264
   Smaragdakis Y, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P17, DOI 10.1145/1926385.1926390
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Tan T, 2017, ACM SIGPLAN NOTICES, V52, P278, DOI [10.1145/3140587.3062360, 10.1145/3062341.3062360]
   Tan T, 2016, LECT NOTES COMPUT SC, V9837, P489, DOI 10.1007/978-3-662-53413-7_24
   Thiessen R, 2017, ACM SIGPLAN NOTICES, V52, P263, DOI [10.1145/3140587.3062359, 10.1145/3062341.3062359]
   Vall ~ee-Rai R., 2010, CASCON 1 DECADE HIGH, P214, DOI DOI 10.1145/1925805.1925818
   WALA, TJ WATSON LIB ANAL
   Wei Shiyi, 2015, 29 EUR C OBJ OR PROG
   Xu GQ, 2009, LECT NOTES COMPUT SC, V5653, P98
   Zhang X, 2014, ACM SIGPLAN NOTICES, V49, P239, DOI [10.1145/2594291.2594327, 10.1145/2666356.2594327]
NR 35
TC 27
Z9 28
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 148
DI 10.1145/3360574
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500033
OA gold
DA 2024-07-18
ER

PT J
AU Miltner, A
   Gulwani, S
   Le, V
   Leung, A
   Radhakrishna, A
   Soares, G
   Tiwari, A
   Udupa, A
AF Miltner, Anders
   Gulwani, Sumit
   Le, Vu
   Leung, Alan
   Radhakrishna, Arjun
   Soares, Gustavo
   Tiwari, Ashish
   Udupa, Abhishek
TI On the Fly Synthesis of Edit Suggestions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program transformation; Refactoring; Program synthesis; Programming by
   example
AB When working with a document, users often perform context-specific repetitive edits - changes to the document that are similar but specific to the contexts at their locations. Programming by demon-stration/examples (PBD/PBE) systems automate these tasks by learning programs to perform the repetitive edits from demonstration or examples. However, PBD/PBE systems are not widely adopted, mainly because they require modal UIs - users must enter a special mode to give the demonstration/examples. This paper presents BLUE-PENCIL, a modeless system for synthesizing edit suggestions on the fly. BLUE-PENCIL observes users as they make changes to the document, silently identifies repetitive changes, and automatically suggests transformations that can apply at other locations. BLUE-PENCIL is parameterized - it allows the "plug-and-play" of different PBE engines to support different document types and different kinds of transformations. We demonstrate this parameterization by instantiating BLUE-PENCIL to several domains - C# and SQL code, markdown documents, and spreadsheets - using various existing PBE engines. Our evaluation on 37 code editing sessions shows that BLUE-PENCIL synthesized edit suggestions with a precision of 0.89 and a recall of 1.0, and took 199 ms to return suggestions on average. Finally, we report on several improvements based on feedback gleaned from a field study with professional programmers to investigate the use of BLUE-PENCIL during long code editing sessions. BLUE-PENCIL has been integrated with Visual Studio IntelliCode to power the IntelliCode refactorings feature.
C1 [Miltner, Anders] Princeton Univ, Princeton, NJ 08544 USA.
   [Gulwani, Sumit; Le, Vu; Leung, Alan; Radhakrishna, Arjun; Soares, Gustavo; Tiwari, Ashish; Udupa, Abhishek] Microsoft, Redmond, WA USA.
C3 Princeton University; Microsoft
RP Miltner, A (corresponding author), Princeton Univ, Princeton, NJ 08544 USA.
EM amiltner@cs.princeton.edu; sumitg@microsoft.com; levu@microsoft.com;
   alan.leung@microsoft.com; arradha@microsoft.com;
   gustavo.soares@microsoft.com; ashish.tiwari@microsoft.com;
   abhishek.udupa@microsoft.com
OI Radhakrishna, Arjun/0000-0002-5559-5932; Miltner,
   Anders/0000-0002-8338-4008
CR Andersen Jesper, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P337, DOI 10.1109/ASE.2008.44
   Andersen J, 2012, IEEE INT CONF AUTOM, P382, DOI 10.1145/2351676.2351753
   Cypher Allen, 2019, WATCH WHAT I DO PROG
   Eclipse Foundation, 2019, ECLIPSE
   Edge Darren, 2015, P 33 ANN ACM C HUM F, DOI [10.1145/2702123, DOI 10.1145/2702123]
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Foster SR, 2012, PROC INT CONF SOFTW, P222, DOI 10.1109/ICSE.2012.6227191
   GNU Emacs, 2019, REP COMM
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Nguyen HA, 2013, IEEE INT CONF AUTOM, P180, DOI 10.1109/ASE.2013.6693078
   Hoan AN, 2010, ACM SIGPLAN NOTICES, V45, P302, DOI 10.1145/1932682.1869486
   JetBrains, 2019, RESHARPER
   JetBrains, 2019, INTELLIJ
   Jiang LX, 2007, PROC INT CONF SOFTW, P96
   Jihun Park, 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P40, DOI 10.1109/MSR.2012.6224298
   Kim M., 2012, P ACM SIGSOFT 20 INT, P1
   Kim M, 2009, PROC INT CONF SOFTW, P309, DOI 10.1109/ICSE.2009.5070531
   Lau Tessa, 2008, WHY PBD SYSTEMS FAIL
   Lau Tessa, 2001, YOUR WISH IS MY COMM
   Lau Tessa, 2001, PROGRAMMING DEMONSTR
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Leung A, 2015, ACM SIGPLAN NOTICES, V50, P565, DOI [10.1145/2813885.2738002, 10.1145/2737924.2738002]
   Lieberman H., 2001, YOUR WISH IS MY COMM
   Martin M, 2005, ACM SIGPLAN NOTICES, V40, P365, DOI 10.1145/1103845.1094840
   Meng N, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P502, DOI 10.1109/ICSE.2013.6606596
   Meng N, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P329
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Microsoft, 2019, VIS STUD
   Microsoft, CREAT RUN MACR
   Microsoft, 2019, MICR POWERPOINT
   Microsoft, 2019, MICR WORD
   Microsoft, 2019, REF SOURC COD VIS ST
   Miller Robert C., 2002, CHI 02
   Murphy-Hill E, 2009, PROC INT CONF SOFTW, P287, DOI 10.1109/ICSE.2009.5070529
   Murphy-Hill Emerson, 2007, P 2007 OOPSLA WORKSH, p1S5, DOI [10.1145/1328279, DOI 10.1145/1328279]
   Negara S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P803, DOI 10.1145/2568225.2568317
   Opdyke William F., 1992, GAX9305645 UMI
   Padhi S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276520
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2594291.2594321, 10.1145/2666356.2594321]
   Refsnes Data, 2019, XPATH TUT
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Singh Rishabh, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P634, DOI 10.1007/978-3-642-31424-7_44
   Stack Exchange, 2019, PROGR ED ALL HYP WOR
   Steimann F, 2012, IEEE INT CONF AUTOM, P290, DOI 10.1145/2351676.2351726
   Vim, 2019, MACR
   Yaghmazadeh N, 2018, PROC VLDB ENDOW, V11, P580, DOI 10.1145/3177732.3177735
   Yin Penghang, 2019, INT C LEARN REPR
NR 49
TC 23
Z9 27
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 143
DI 10.1145/3360569
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500028
OA gold
DA 2024-07-18
ER

PT J
AU Kiss, C
   Field, T
   Eisenbach, S
   Jones, SP
AF Kiss, Csongor
   Field, Tony
   Eisenbach, Susan
   Jones, Simon Peyton
TI Higher-Order Type-Level Programming in Haskell
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Type-level programming; Type families; Higher-order functions
AB Type family applications in Haskell must be fully saturated. This means that all type-level functions have to be first-order, leading to code that is both messy and longwinded. In this paper we detail an extension to GHC that removes this restriction. We augment Haskell's existing type arrow, ->, with an unmatchable arrow, ->, that supports partial application of type families without compromising soundness. A soundness proof is provided. We show how the techniques described can lead to substantial code-size reduction (circa 80%) in the type-level logic of commonly-used type-level libraries whilst simultaneously improving code quality and readability.
C1 [Kiss, Csongor] Imperial Coll London, Dept Comp, 180 Queens Gate, London SW7 1AZ, England.
   [Field, Tony; Eisenbach, Susan] Imperial Coll London, Comp, 180 Queens Gate, London SW7 1AZ, England.
   [Jones, Simon Peyton] Microsoft Res, 21 Stn Rd, Cambridge CB1 2FB, England.
C3 Imperial College London; Imperial College London; Microsoft
RP Kiss, C (corresponding author), Imperial Coll London, Dept Comp, 180 Queens Gate, London SW7 1AZ, England.
EM cak14@imperial.ac.uk; ajf@imperial.ac.uk; susan@imperial.ac.uk;
   simonpj@microsoft.com
CR Altenkirch Thorsten, 2006, INT SPRING SCH DATAT, P209
   [Anonymous], 2012, P 8 ACM SIGPLAN WORK, DOI [10.1145/2103786.2103795, DOI 10.1145/2103786.2103795]
   Bolingbroke M., 2011, CONSTRAINT KINDS GHC
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Chakravarty M.M. T., 2005, P 10 ACM SIGPLAN INT, P241, DOI [DOI 10.1145/1086365.1086397, DOI 10.1145/1090189.1086397]
   Eisenberg RA, 2017, ACM SIGPLAN NOTICES, V52, P525, DOI [10.1145/3062341.3062357, 10.1145/3140587.3062357]
   Eisenberg RA, 2014, ACM SIGPLAN NOTICES, V49, P95, DOI [10.1145/2775050.2633361, 10.1145/2633357.2633361]
   Eisenberg RA, 2014, ACM SIGPLAN NOTICES, V49, P671, DOI 10.1145/2535838.2535856
   Eisenberg Richard A., 2016, P LECT NOTES COMPUTE, V9632, DOI [10.1007/978-3, DOI 10.1007/978-3]
   Eisenberg Richard A, 2016, THESIS U PENNSYLVANI
   GHC, 2019, GHC US MAN TYP FAM
   Gundry Adam, 2013, Ph. D. Dissertation
   HUET GP, 1973, INFORM CONTROL, V22, P257, DOI 10.1016/S0019-9958(73)90301-X
   Hur Chung-Kil, 2010, AGDA EXCLUDED MIDDLE
   Kiselyov Oleg, 2004, HASKELL 04, P96, DOI DOI 10.1145/1017472.1017488
   Kiss Csongor, 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236780
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   Magalhaes JP, 2010, ACM SIGPLAN NOTICES, V45, P37, DOI 10.1145/2088456.1863529
   MILLER D, 1992, J SYMB COMPUT, V14, P321, DOI 10.1016/0747-7171(92)90011-R
   Nguyen My, 2018, COMMUNICATION
   Norell Ulf, 2007, PRACTICAL PROGRAMMIN
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Simonet V, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180476
   Stolarek J, 2015, ACM SIGPLAN NOTICES, V50, P118, DOI 10.1145/2804302.2804314
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Tondwalkar Anish, 2018, POPULARITY HASKELL E
   Vytiniotis D, 2011, J FUNCT PROGRAM, V21, P333, DOI 10.1017/S0956796811000098
   Weirich S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110275
   Weirich Stephanie, 2013, INT C FUNCT PROGR IC
   Weirich Stephanie, 2011, POPL
   Xi HW, 2003, ACM SIGPLAN NOTICES, V38, P224, DOI 10.1145/640128.604150
NR 32
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 102
DI 10.1145/3341706
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900025
OA gold
DA 2024-07-18
ER

PT J
AU Patterson, D
   Ahmed, A
AF Patterson, Daniel
   Ahmed, Amal
TI The Next 700 Compiler Correctness Theorems (Functional Pearl)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compilers; verification
AB Compiler correctness is an old problem, with results stretching back beyond the last half-century. Founding the field, John McCarthy and James Painter set out to build a "completely trustworthy compiler". And yet, until quite recently, even despite truly impressive verification efforts, the theorems being proved were only about the compilation of whole programs, a theoretically quite appealing but practically unrealistic simplification. For a compiler correctness theorem to assure complete trust, the theorem must reflect the reality of how the compiler will be used.
   There has been much recent work on more realistic "compositional" compiler correctness aimed at proving correct compilation of components while supporting linking with components compiled from different languages using different compilers. However, the variety of theorems, stated in remarkably different ways, raises questions about what researchers even mean by a "compiler is correct" In this pearl, we develop a new framework with which to understand compiler correctness theorems in the presence of linking, and apply it to understanding and comparing this diversity of results. In doing so, not only are we better able to assess their relative strengths and weaknesses, but gain insight into what we as a community should expect from compiler correctness theorems of the future.
C1 [Patterson, Daniel; Ahmed, Amal] Northeastern Univ, 410 Huntington Ave, Boston, MA 02115 USA.
C3 Northeastern University
RP Patterson, D (corresponding author), Northeastern Univ, 410 Huntington Ave, Boston, MA 02115 USA.
EM dbp@dbpmail.net; amal@ccs.neu.edu
RI Ahmed, Amal/IGC-9696-2023
OI Ahmed, Amal/0000-0001-7424-572X
FU National Science Foundation [CCF-1816837, CCF-1618732, CCF-1453796,
   CCF-1422133]
FX We thank the ICFP'19 reviewers for their valuable feedback and reviewers
   from POPL'18 for helpful feedback on an earlier version of this work. We
   also thank Lennart Beringer for an enlightening conversation at PLDI'17
   that helped us better understand Compositional CompCert. This material
   is based on research supported by the National Science Foundation under
   grants CCF-1816837, CCF-1618732, CCF-1453796, and CCF-1422133. Any
   opinions, findings, and conclusions or recommendations expressed in this
   material are those of the authors and do not necessarily reflect the
   views of the National Science Foundation.
CR Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Ahmed A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P431
   Ahmed A, 2009, ACM SIGPLAN NOTICES, V44, P340, DOI 10.1145/1594834.1480925
   Ahmed A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P157
   Ahmed Amal, 2015, 1 SUMMIT ADV PROGRAM, V32, P15
   Benton N, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P97
   Beringer L, 2014, LECT NOTES COMPUT SC, V8410, P107
   Bowman WJ, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P101, DOI 10.1145/2784731.2784733
   Chlipala A, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P54, DOI 10.1145/1250734.1250742
   FELLEISEN M, 1990, LECT NOTES COMPUT SC, V432, P134
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Hur CK, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1926385.1926402
   Jiang HR, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P111, DOI 10.1145/3314221.3314595
   Kang J, 2016, ACM SIGPLAN NOTICES, V51, P178, DOI 10.1145/2914770.2837642
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Lockwood Morris F., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P144
   Mates Phillip, 2019, ACM C PRINC PRACT DE ACM C PRINC PRACT DE
   Matthews J, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P3
   Mccarthy J., 1967, Correctness of a compiler for arithmetic expressions. pages, P33
   McCarthy John., 1959, Computer Programming and Formal Systems, volume 26 of Studies in Logic and the Foundations of Mathematics, V26, P33, DOI DOI 10.1016/S0049-237X(09)70099-0
   Minamide Y., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P271, DOI 10.1145/237721.237791
   Neis G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P166, DOI 10.1145/2784731.2784764
   New MS, 2016, ACM SIGPLAN NOTICES, V51, P103, DOI 10.1145/3022670.2951941
   O'Connor L, 2016, ACM SIGPLAN NOTICES, V51, P89, DOI 10.1145/3022670.2951940
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Patrignani M, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2699503
   Patterson D, 2017, ACM SIGPLAN NOTICES, V52, P495, DOI [10.1145/3062341.3062347, 10.1145/3140587.3062347]
   Patterson Daniel, 2019, 300 SUPPLEMENTARY MA
   Patterson Daniel, 2017, 2 SUMM ADV PROGR LAN, V71, P12
   Perconti James T., 2014, EUR S PROGR ESOP EUR S PROGR ESOP
   Ramananandro T, 2015, CPP'15: PROCEEDINGS OF THE 2015 ACM CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P3, DOI 10.1145/2676724.2693167
   SALTZER JH, 1975, P IEEE, V63, P1278, DOI 10.1109/PROC.1975.9939
   Sevcik J, 2011, ACM SIGPLAN NOTICES, V46, P43, DOI 10.1145/1925844.1926393
   Stewart G, 2015, ACM SIGPLAN NOTICES, V50, P275, DOI [10.1145/2676726.2676985, 10.1145/2775051.2676985]
   Stewart James Gordon, 2015, THESIS PRINCETON U THESIS PRINCETON U
   Wang Peng, 2014, ACM S OBJ OR PROGR S ACM S OBJ OR PROGR S
   Wang YT, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290375
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
NR 39
TC 16
Z9 17
U1 1
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 85
DI 10.1145/3341689
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900008
OA gold
DA 2024-07-18
ER

PT J
AU Bizjak, A
   Gratzer, D
   Krebbers, R
   Birkedal, L
AF Bizjak, Ales
   Gratzer, Daniel
   Krebbers, Robbert
   Birkedal, Lars
TI Iron: Managing Obligations in Higher-Order Concurrent Separation Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Separation logic; concurrency; resource management
AB Precise management of resources and the obligations they impose, such as the need to dispose of memory, close locks, and release file handles, is hard-especially in the presence of concurrency, when some resources are shared, and different threads operate on them concurrently. We present Iron, a novel higher-order concurrent separation logic that allows for precise reasoning about resources that are transferable among dynamically allocated threads. In particular, Iron can be used to show the correctness of challenging examples, where the reclamation of memory is delegated to a forked-off thread. We show soundness of Iron by means of a model of Iron, defined on top of the Iris base logic, and we use this model to prove that memory resources are accounted for precisely and not leaked. We have formalized all of the developments in the Coq proof assistant.
C1 [Bizjak, Ales; Gratzer, Daniel; Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
   [Krebbers, Robbert] Delft Univ Technol, Delft, Netherlands.
C3 Aarhus University; Delft University of Technology
RP Bizjak, A (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM abizjak@cs.au.dk; gratzer@cs.au.dk; mail@robbertkrebbers.nl;
   birkedal@cs.au.dk
OI Gratzer, Daniel/0000-0003-1944-0789
FU ModuRes Sapere Aude Advanced Grant from The Danish Council for
   Independent Research for the Natural Sciences (FNU)
FX This research was supported by the ModuRes Sapere Aude Advanced Grant
   from The Danish Council for Independent Research for the Natural
   Sciences (FNU).
CR Birkedal Lars, 2017, LECT NOTES IRIS HIGH
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Cao Qinxiang, 2017, APLAS
   DINSDALEYOUNG T, 2010, ECOOP
   Fahndrich M., 2006, EuroSys
   Feng X., 2007, ESOP
   Feng XY, 2009, ACM SIGPLAN NOTICES, V44, P315, DOI 10.1145/1594834.1480922
   Fu M., 2010, CONCUR
   Gotsman A., 2007, APLAS
   Hobor Aquinas., 2008, ESOP
   Ishtiaq Samin S., 2001, ACM SIGPLAN NOTICES
   Jung Ralf, 2018, JFP
   Jung Ralf, 2015 IRIS MONOIDS IN
   Jung Ralf, 2016, ICFP
   Krebbers Robbert, 2017, ESOP
   Krebbers Robbert, 2018, MOSEL GEN EXTENSIBLE
   Krebbers Robbert, INTERACTIVE PROOFS H
   Mansky William, 2017, OOPSLA
   Nanevski A., 2014, ESOP
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Pinto Pedro da Rocha, 2014, ECOOP
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Reynolds John C., 2000, MILLENNIAL PERSPECTI
   Svendsen K., 2014, ESOP
   Svendsen Kasper, 2013, ESOP
   Tassarotti Joseph, 2017, ESOP
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
NR 28
TC 10
Z9 12
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 65
DI 10.1145/3290378
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300065
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Chen, TL
   Hague, M
   Lin, AW
   Rümmer, P
   Wu, ZL
AF Chen, Taolue
   Hague, Matthew
   Lin, Anthony W.
   Rummer, Philipp
   Wu, Zhilin
TI Decision Procedures for Path Feasibility of String-Manipulating Programs
   with Complex Operations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE String Constraints; Transducers; ReplaceAll; Reverse; Decision
   Procedures; Straight-Line Programs
AB The design and implementation of decision procedures for checking path feasibility in string-manipulating programs is an important problem, with such applications as symbolic execution of programs with strings and automated detection of cross-site scripting (XSS) vulnerabilities in web applications. A (symbolic) path is given as a finite sequence of assignments and assertions (i.e. without loops), and checking its feasibility amounts to determining the existence of inputs that yield a successful execution. Modern programming languages (e.g. JavaScript, PHP, and Python) support many complex string operations, and strings are also often implicitly modified during a computation in some intricate fashion (e.g. by some autoescaping mechanisms).
   In this paper we provide two general semantic conditions which together ensure the decidability of path feasibility: (1) each assertion admits regular monadic decomposition (i.e. is an effectively recognisable relation), and (2) each assignment uses a (possibly nondeterministic) function whose inverse relation preserves regularity. We show that the semantic conditions are expressive since they are satisfied by a multitude of string operations including concatenation, one-way and two-way finite-state transducers, replaceAll functions (where the replacement string could contain variables), string-reverse functions, regular-expression matching, and some (restricted) forms of letter-counting/length functions. The semantic conditions also strictly subsume existing decidable string theories (e.g. straight-line fragments, and acyclic logics), and most existing benchmarks (e.g. most of Kaluza's, and all of SLOG's, Stranger's, and SLOTH's benchmarks). Our semantic conditions also yield a conceptually simple decision procedure, as well as an extensible architecture of a string solver in that a user may easily incorporate his/her own string functions into the solver by simply providing code for the pre-image computation without worrying about other parts of the solver. Despite these, the semantic conditions are unfortunately too general to provide a fast and complete decision procedure. We provide strong theoretical evidence for this in the form of complexity results. To rectify this problem, we propose two solutions. Our main solution is to allow only partial string functions (i.e., prohibit nondeterminism) in condition (2). This restriction is satisfied in many cases in practice, and yields decision procedures that are effective in both theory and practice. Whenever nondeterministic functions are still needed (e.g. the string function split), our second solution is to provide a syntactic fragment that provides a support of nondeterministic functions, and operations like one-way transducers, replaceAll (with constant replacement string), the string-reverse function, concatenation, and regular-expression matching. We show that this fragment can be reduced to an existing solver SLOTH that exploits fast model checking algorithms like IC3.
   We provide an efficient implementation of our decision procedure (assuming our first solution above, i.e., deterministic partial string functions) in a new string solver OSTRICH. Our implementation provides built-in support for concatenation, reverse, functional transducers (FFT), and replace All and provides a framework for extensibility to support further string functions. We demonstrate the efficacy of our new solver against other competitive solvers.
C1 [Chen, Taolue] Birkbeck Univ London, Dept Comp Sci & Informat Syst, Malet St, London WC1E 7HX, England.
   [Hague, Matthew] Royal Holloway Univ London, Dept Comp Sci, Egham Hill, Egham TW20 0EX, Surrey, England.
   [Lin, Anthony W.] Univ Oxford, Dept Comp Sci, Parks Rd, Oxford OX1 3QD, England.
   [Rummer, Philipp] Uppsala Univ, Dept Informat Technol, Box 337, SE-75105 Uppsala, Sweden.
   [Wu, Zhilin] Chinese Acad Sci, Inst Software, State Key Lab Comp Sci, Beijing, Peoples R China.
C3 University of London; Birkbeck University London; University of London;
   Royal Holloway University London; University of Oxford; Uppsala
   University; Chinese Academy of Sciences; Institute of Software, CAS
RP Chen, TL (corresponding author), Birkbeck Univ London, Dept Comp Sci & Informat Syst, Malet St, London WC1E 7HX, England.
EM taolue@dcs.bbk.ac.uk; matthew.hague@rhul.ac.uk; anthony.lin@cs.ox.ac.uk;
   philipp.ruemmer@it.uu.se
OI Hague, Matthew/0000-0003-4913-3800; Chen, Taolue/0000-0002-5993-1665;
   Lin, Anthony Widjaja/0000-0003-4715-5096
FU Engineering and Physical Sciences Research Council [EP/P00430X/1,
   EP/K009907/1]; Australian Research Council [DP160101652, DP180100691];
   European Research Council (ERC) under the European Union [759969];
   Swedish Research Council (VR) [2014-5484]; Swedish Foundation for
   Strategic Research (SSF) [RIT17-0011]; National Natural Science
   Foundation of China [61472474, 61572478, 61872340]; INRIA-CAS joint
   research project lVerification, Interaction, and Proofsz; EPSRC
   [EP/P00430X/2, EP/K009907/1, EP/P00430X/1] Funding Source: UKRI
FX We are grateful to the anonymous referees for their constructive and
   detailed comments. T. Chen is supported by the Engineering and Physical
   Sciences Research Council under Grant No. EP/P00430X/1 and theAustralian
   Research Council under Grant No. DP160101652, DP180100691. M. Hague is
   supported by the Engineering and Physical Sciences Research Council
   under Grant No. EP/K009907/1. A. Lin is supported by the European
   Research Council (ERC) under the European Union's Horizon 2020 research
   and innovation programme (grant agreement no 759969). P. Rummer is
   supported by the Swedish Research Council (VR) under grant 2014-5484,
   and by the Swedish Foundation for Strategic Research (SSF) under the
   project WebSec (Ref. RIT17-0011). Z. Wu is supported by the National
   Natural Science Foundation of China under Grant No. 61472474, 61572478,
   and 61872340, the INRIA-CAS joint research project lVerification,
   Interaction, and Proofsz.
CR Abdulla PA, 2017, ACM SIGPLAN NOTICES, V52, P602, DOI [10.1145/3062341.3062384, 10.1145/3140587.3062384]
   Abdulla PA, 2014, LECT NOTES COMPUT SC, V8559, P150, DOI 10.1007/978-3-319-08867-9_10
   Abdulla Parosh Aziz, 2018, FORMAL METHODS COMPU
   Alur R, 2011, LECT NOTES COMPUT SC, V6756, P1, DOI 10.1007/978-3-642-22012-8_1
   [Anonymous], 2005, International Conference on World Wide Web, DOI [10.1145/1060745.1060809, DOI 10.1145/1060745.1060809]
   Baier C., 2008, REPRESENTATION MIND
   Barceló P, 2013, LOG METH COMPUT SCI, V9, DOI [10.2168/LMCS-9, 10.2168/LMCS-9(3:01)2013]
   Barrett C, 2009, FRONT ARTIF INTEL AP, V185, P825, DOI 10.3233/978-1-58603-929-5-825
   Benedikt M, 2003, J ACM, V50, P694, DOI 10.1145/876638.876642
   Berzish M, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P55, DOI 10.23919/FMCAD.2017.8102241
   Bjorner N, 2009, LECT NOTES COMPUT SC, V5505, P307, DOI 10.1007/978-3-642-00768-2_27
   Buchi J. R., 1990, COLLECTED WORKS JR B, P671
   Cachat Thierry, 2007, ABS07050262 CORR
   Cadar C., 2008, OSDI, V8, P209, DOI DOI 10.5555/1855741.1855756
   Cadar C, 2013, COMMUN ACM, V56, P82, DOI 10.1145/2408776.2408795
   Cadar C, 2008, ACM T INFORM SYST SE, V12, DOI 10.1145/1455518.1455522
   Carton O, 2006, RAIRO-THEOR INF APPL, V40, P255, DOI 10.1051/ita:2006005
   Chen T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158091
   Chen Taolue, 2018, ABS181103167 CORR ABS181103167 CORR
   Chen Yan, Z3 REPLACEALL
   Chen Yan, 2018, SOLVING STRING CONST
   Choffrut C, 2006, BULL EUR ASSOC THEOR, P159
   D'Antoni L, 2013, LECT NOTES COMPUT SC, V7737, P209
   De Moura L, 2011, COMMUN ACM, V54, P69, DOI 10.1145/1995376.1995394
   Denes J., 1967, THEORY GRAPHS, P93
   Diekert Volker, 2002, Encyclopedia of Mathematics and its Applications, V90, P387, DOI DOI 10.1017/CBO9781107326019.013
   Engelfriet J., 2001, ACM T COMPUT LOG, V2, P216, DOI DOI 10.1145/371316.371512
   Filiot E, 2013, IEEE S LOG, P468, DOI 10.1109/LICS.2013.53
   Ganesh Vijay, 2013, Hardware and Software: Verification and Testing. 8th International Haifa Verification Conference, HVC 2012 Revised Selected Papers. LNCS 7857, P209, DOI 10.1007/978-3-642-39611-3_21
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Holík L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158092
   Hooimeijer Pieter, 2011, 20 USENIX SECURITY S
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Jez A, 2016, J ACM, V63, DOI 10.1145/2743014
   Jones ND, 2001, J FUNCT PROGRAM, V11, P55, DOI 10.1017/S0956796800003889
   Kern C, 2014, COMMUN ACM, V57, P38, DOI 10.1145/2643134
   Kiezun A, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2377656.2377662
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Kozen DC., 1997, Automata and Computability. Undergraduate Texts in Computer Science
   Kroening D, 2008, TEXTS THEOR COMPUT S, P1
   Liang TY, 2014, LECT NOTES COMPUT SC, V8559, P646, DOI 10.1007/978-3-319-08867-9_43
   Libkin L., 2003, ACM Transactions on Computational Logic, V4, P431, DOI 10.1145/937555.937557
   Lin AW, 2016, ACM SIGPLAN NOTICES, V51, P123, DOI 10.1145/2914770.2837641
   McMillan K. L., 1993, Symbolic model checking
   Trinh MT, 2016, LECT NOTES COMPUT SC, V9779, P218, DOI 10.1007/978-3-319-41528-4_12
   Trinh MT, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1232, DOI 10.1145/2660267.2660372
   Morvan C, 2000, LECT NOTES COMPUT SC, V1784, P252
   Nieuwenhuis R, 2005, LECT NOTES COMPUT SC, V3452, P36
   Pippenger Nicholas, 2010, THEOR COMP THEOR COMP
   Plandowski W, 2004, J ACM, V51, P483, DOI 10.1145/990308.990312
   Rummer P, 2008, LECT NOTES ARTIF INT, V5330, P274, DOI 10.1007/978-3-540-89439-1_20
   Saxena P, 2010, P IEEE S SECUR PRIV, P513, DOI 10.1109/SP.2010.38
   Sen Koushik, 2005, P 13 ACM SIGSOFT INT, DOI 10.1145/1081706.1081750
   Sen Koushik, 2013, JOINT M EUR SOFTW EN JOINT M EUR SOFTW EN, P488, DOI DOI 10.1145/2491411.2491447
   van der Stock Andrew, 2017, OWASP TOP 10 S 2017
   Veanes M, 2017, J ACM, V64, DOI 10.1145/3040488
   Wang HE, 2016, LECT NOTES COMPUT SC, V9779, P241, DOI 10.1007/978-3-319-41528-4_13
   Weinberger J, 2011, LECT NOTES COMPUT SC, V6879, P150, DOI 10.1007/978-3-642-23822-2_9
   Yu F, 2014, FORM METHOD SYST DES, V44, P44, DOI 10.1007/s10703-013-0189-1
   Yu F, 2010, LECT NOTES COMPUT SC, V6015, P154
   Zelinka B., 1981, CASOPIS PEST MAT, V106, P407, DOI [10.21136/CPM.1981.108493, DOI 10.21136/CPM.1981.108493]
   Zheng YH, 2015, LECT NOTES COMPUT SC, V9206, P235, DOI 10.1007/978-3-319-21690-4_14
   Zheng Yunhui, 2013, P 9 JOINT M FDN SOFT JOINT M EUROP SOFTW, P114
NR 63
TC 52
Z9 63
U1 1
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 49
DI 10.1145/3290362
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300049
OA Green Accepted, Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Dal Lago, U
   de Visme, M
   Mazza, D
   Yoshimizu, A
AF Dal Lago, Ugo
   de Visme, Marc
   Mazza, Damiano
   Yoshimizu, Akira
TI Intersection Types and Runtime Errors in the Pi-Calculus
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE intersection types; pi-calculus; runtime error analysis; linear logic
ID LAMBDA-CALCULUS; DEADLOCK
AB We introduce a type system for the pi-calculus which is designed to guarantee that typable processes are well-behaved, namely they never produce a run-time error and, even if they may diverge, there is always a chance for them to "finish their work", i.e., to reduce to an idle process. The introduced type system is based on non-idempotent intersections, and is thus very powerful as for the class of processes it can capture. Indeed, despite the fact that the underlying property is Pi(0)(2)-complete, there is a way to show that the system is complete, i.e., that any well-behaved process is typable, although for obvious reasons infinitely many derivations need to be considered.
C1 [Dal Lago, Ugo] Univ Bologna, Bologna, Italy.
   [Dal Lago, Ugo; Yoshimizu, Akira] INRIA Sophia Antipolis, Valbonne, France.
   [de Visme, Marc] Univ Lyon, UCB Lyon 1, CNRS, ENS Lyon,LIP, Lyon, France.
   [Mazza, Damiano] Univ Paris 13, Sorbonne Paris Cite, UMR 7030, CNRS,LIPN, Villetaneuse, France.
C3 University of Bologna; Universite Claude Bernard Lyon 1; Centre National
   de la Recherche Scientifique (CNRS); Ecole Normale Superieure de Lyon
   (ENS de LYON); Centre National de la Recherche Scientifique (CNRS);
   Universite Paris 13
RP Dal Lago, U (corresponding author), Univ Bologna, Bologna, Italy.; Dal Lago, U (corresponding author), INRIA Sophia Antipolis, Valbonne, France.
EM ugo.dallago@unibo.it; marc.de-visme@ens-lyon.fr;
   damiano.mazza@lipn.univ-paris13.fr; akira.yoshimizu@unibo.it
FU ANR [ANR-14-CE25-0005, ANR-16-CE25-0011]; INRIA/JSPS EA CRECOGI; Agence
   Nationale de la Recherche (ANR) [ANR-16-CE25-0011] Funding Source:
   Agence Nationale de la Recherche (ANR)
FX This work was partially supported by ANR grants ELICA (ANR-14-CE25-0005)
   and Repas (ANR-16-CE25-0011), and INRIA/JSPS EA CRECOGI.
CR ACCATTOLI B, 2018, P ICFP 2018 2 ICFP 2, DOI [10.1145/3236789, DOI 10.1145/3236789]
   [Anonymous], 1992, Mathematical Structures in Computer Science, DOI DOI 10.1017/S0960129500001407
   Barendregt H. P., 1984, The lambda calculus, V3
   Breuvart F, 2018, PPDP'18: PROCEEDINGS OF THE 20TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, DOI 10.1145/3236950.3236968
   CAIRES L, 2010, GASTIN LAROUSSINIE 2
   Castagna G, 2006, LECT NOTES COMPUT SC, V4137, P310
   Coppo M., 1980, Notre Dame Journal of Formal Logic, V21, P685, DOI 10.1305/ndjfl/1093883253
   COPPO M, 1981, Z MATH LOGIK, V27, P45, DOI 10.1002/malq.19810270205
   Coppo M., 1978, Archiv fur Mathematische Logik und Grundlagenforschung, V19, P139, DOI 10.1007/BF02011875
   Dal Lago U, 2017, P 32 ANN ACM IEEE S, P1
   Dal Lago U, 2011, IEEE S LOG, P133, DOI 10.1109/LICS.2011.22
   De Carvalho D, 2018, MATH STRUCT COMP SCI, V28, P1169, DOI 10.1017/S0960129516000396
   DEMANGEON R, 2010, SEE GASTIN LAROUSSIN
   Demangeon R, 2010, J LOGIC ALGEBR PROGR, V79, P550, DOI 10.1016/j.jlap.2010.07.007
   Deng YX, 2004, LECT NOTES COMPUT SC, V3142, P445
   Ehrhard T, 2010, INFORM COMPUT, V208, P606, DOI 10.1016/j.ic.2009.06.005
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Girard Jean-Yves, 1989, Studies in Logic and the Foundations of Mathematics, V127, P221, DOI [10.1016/S0049-237X(08)70271-4, DOI 10.1016/S0049-237X(08)70271-4]
   Girard Jean-Yves., 1971, P 2 SCANDINAVIAN LOG, V63, P63
   GIRARD JY, 1992, THEOR COMPUT SCI, V97, P1, DOI 10.1016/0304-3975(92)90386-T
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda K, 2010, THEOR COMPUT SCI, V411, P2223, DOI 10.1016/j.tcs.2010.01.028
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Kanellakis P. C., 1994, Automata, Languages and Programming. 21st International Colloquium, ICALP 94. Proceedings, P83
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Kobayashi N., 2000, Theoretical Computer Science. Exploring New Frontiers of Theoretical Informatics. International Conference IFIP TCS 2000. Proceedings (Lecture Notes in Computer Science Vol.1872), P365
   Kobayashi N, 2006, LECT NOTES COMPUT SC, V4137, P233
   Krivine Jean-Louis, 1993, LAMBDACALCULUS TYPES
   Laroussinie Francois, 2010, P LECT NOTES COMPUTE, V6269, DOI [10.1007/978-3-642-15375-4, DOI 10.1007/978-3-642-15375-4]
   Mazza D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158094
   Mazza Damiano, 2017, CONCURRENT MEANING L
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Padovani L., 2014, JOINT M 23 EACSL ANN, P72
   Piccolo M, 2012, FUND INFORM, V121, P227, DOI 10.3233/FI-2012-777
   Reynolds J. C., 1974, Programming Symposium, P408
   Sangiorgi Davide, 2001, -calculus: A Theory of Mobile Processes
   Simpson A, 2005, LECT NOTES COMPUT SC, V3467, P219
   Suenaga K, 2007, LECT NOTES COMPUT SC, V4421, P490
   van der Poel, 1962, NUMER MATH, V1, P420
   Wadler P, 2014, J FUNCT PROGRAM, V24, P384, DOI 10.1017/S095679681400001X
   WELLS JB, 1994, IEEE S LOG, P176
   Yoshida N, 2004, INFORM COMPUT, V191, P145, DOI 10.1016/j.ic.2003.08.004
NR 44
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 7
DI 10.1145/3290320
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300007
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Emmi, M
   Enea, C
AF Emmi, Michael
   Enea, Constantin
TI Weak-Consistency Specification via Visibility Relaxation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrency; specification; weak-consistency
AB Effective software specifications enable modular reasoning, allowing clients to establish program properties without knowing the details of module implementations. While some modules' operations behave atomically, others admit weaker consistencies to increase performance. Consequently, since current methodologies do not capture the guarantees provided by operations of varying non-atomic consistencies, specifications are ineffective, forfeiting the ability to establish properties of programs that invoke non-atomic operations.
   In this work we develop a methodology for specifying software modules whose operations satisfy multiple distinct consistency levels. In particular, we develop a simple annotation language for specifying weakly-consistent operations via visibility relaxation, wherein annotations impose varying constraints on the visibility among operations. To integrate with modern software platforms, we identify a novel characterization of consistency called sequential happens-before consistency, which admits effective validation. Empirically, we demonstrate the efficacy of our approach by deriving and validating relaxed-visibility specifications for Java concurrent objects. Furthermore, we demonstrate an optimality of our annotation language, empirically, by establishing that even finer-grained languages do not capture stronger specifications for Java objects.
C1 [Emmi, Michael] SRI Int, 333 Ravenswood Ave, Menlo Pk, CA 94025 USA.
   [Enea, Constantin] Univ Paris Diderot, IRIF, Paris, France.
   [Enea, Constantin] CNRS, Paris, France.
C3 SRI International; Universite Paris Cite; Centre National de la
   Recherche Scientifique (CNRS)
RP Emmi, M (corresponding author), SRI Int, 333 Ravenswood Ave, Menlo Pk, CA 94025 USA.
EM michael.emmi@sri.com; cenea@irif.fr
FU European Research Council (ERC) under the European Union's Horizon 2020
   research and innovation programme [678177]
FX This work is supported in part by the European Research Council (ERC)
   under the European Union's Horizon 2020 research and innovation
   programme (grant agreement No 678177).
CR AHAMAD M, 1995, DISTRIB COMPUT, V9, P37, DOI 10.1007/BF01784241
   Alglave J, 2017, ACM SIGPLAN NOTICES, V52, P3, DOI 10.1145/3093333.3009883
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   [Anonymous], 1994, The SPARC architecture manual
   Batty M, 2013, ACM SIGPLAN NOTICES, V48, P235, DOI 10.1145/2480359.2429099
   Burckhardt S, 2014, FOUND TRENDS PROGRAM, V1, P2
   Burckhardt S, 2014, ACM SIGPLAN NOTICES, V49, P271, DOI 10.1145/2535838.2535848
   Burckhardt S, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P330, DOI 10.1145/1806596.1806634
   Doherty S, 2018, LECT NOTES COMPUT SC, V11023, P110, DOI 10.1007/978-3-319-98938-9_7
   Dongol B, 2018, LECT NOTES COMPUT SC, V10747, P183, DOI 10.1007/978-3-319-73721-8_9
   Gilbert S., 2002, SIGACT News, V33, P51, DOI 10.1145/564585.564601
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Lahav O, 2015, LECT NOTES COMPUT SC, V9135, P311, DOI 10.1007/978-3-662-47666-6_25
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Mador-Haim S, 2010, LECT NOTES COMPUT SC, V6174, P273, DOI 10.1007/978-3-642-14295-6_26
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Perrin M, 2016, ACM SIGPLAN NOTICES, V51, P313, DOI [10.1145/2851141.2851170, 10.1145/3016078.2851170]
   Pradel M, 2012, ACM SIGPLAN NOTICES, V47, P521, DOI 10.1145/2345156.2254126
   Samak M, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P131, DOI 10.1145/2786805.2786874
   Sergey I, 2016, ACM SIGPLAN NOTICES, V51, P92, DOI 10.1145/3022671.2983999
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   Shacham O, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P51
   Terry D. B., 1995, Operating Systems Review, V29, P172, DOI 10.1145/224057.224070
   Terry D. B., 1994, Proceedings of the Third International Conference on Parallel and Distributed Information Systems (Cat. No.94TH0668-4), P140, DOI 10.1109/PDIS.1994.331722
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
NR 26
TC 10
Z9 10
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 60
DI 10.1145/3290373
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300060
OA gold
DA 2024-07-18
ER

PT J
AU Fowler, S
   Lindley, S
   Morris, JG
   Decova, S
AF Fowler, Simon
   Lindley, Sam
   Morris, J. Garrett
   Decova, Sara
TI Exceptional Asynchronous Session Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE session types; asynchrony; exceptions; web programming
AB Session types statically guarantee that communication complies with a protocol. However, most accounts of session typing do not account for failure, which means they are of limited use in real applications-especially distributed applications-where failure is pervasive.
   We present the first formal integration of asynchronous session types with exception handling in a functional programming language. We define a core calculus which satisfies preservation and progress properties, is deadlock free, confluent, and terminating.
   We provide the first implementation of session types with exception handling for a fully-fledged functional programming language, by extending the Links web programming language; our implementation draws on existing work on effect handlers. We illustrate our approach through a running example of two-factor authentication, and a larger example of a session-based chat application where communication occurs over session-typed channels and disconnections are handled gracefully.
C1 [Fowler, Simon; Lindley, Sam; Decova, Sara] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
   [Morris, J. Garrett] Univ Kansas, Lawrence, KS 66045 USA.
C3 University of Edinburgh; University of Kansas
RP Fowler, S (corresponding author), Univ Edinburgh, Edinburgh, Midlothian, Scotland.
EM simon.fowler@ed.ac.uk; sam.lindley@ed.ac.uk; garrett@ittc.ku.edu;
   sara.decova@gmail.com
RI Morris, J. Garrett/AAI-5463-2020
OI Morris, J. Garrett/0000-0002-3992-1080; Lindley,
   Sam/0000-0002-1360-4714; Fowler, Simon/0000-0001-5143-5475
FU EPSRC [EP/L01503X/1, EP/K034413/1]; LFCS internship; EPSRC
   [EP/K034413/1] Funding Source: UKRI
FX Thanks to James McKinna and the anonymous reviewers for detailed
   comments and suggestions. This work was supported by EPSRC grants
   EP/L01503X/1 (EPSRC CDT in Pervasive Parallelism) and EP/K034413/1 (From
   Data Types to Session TypesDA Basis for Concurrency and Distribution),
   and an LFCS internship.
CR Adameit Manuel, 2017, FORTE LECT NOTES COM, V10321, p1S16
   [Anonymous], 1984, LAMBDA CALCULUS ITS
   Benton N, 2001, J FUNCT PROGRAM, V11, P395, DOI 10.1017/S0956796801004099
   Caires L, 2017, LECT NOTES COMPUT SC, V10201, P229, DOI 10.1007/978-3-662-54434-1_9
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Carbone M, 2008, LECT NOTES COMPUT SC, V5201, P402, DOI 10.1007/978-3-540-85361-9_32
   Carbone M, 2014, LECT NOTES COMPUT SC, V8459, P49, DOI 10.1007/978-3-662-43376-8_4
   Carbone Marco, 2016, LIPICS, V33
   Chen TC, 2016, LECT NOTES COMPUT SC, V9688, P96, DOI 10.1007/978-3-319-39570-8_7
   Clarke David Gerard, 2003, THESIS AUSTRAILIA THESIS AUSTRAILIA
   Cooper E, 2007, LECT NOTES COMPUT SC, V4709, P266
   Cooper Ezra, 2009, PROGRAMMING LANGUAGE
   Dardha O, 2017, INFORM COMPUT, V256, P253, DOI 10.1016/j.ic.2017.06.002
   Demangeon R, 2012, LECT NOTES COMPUT SC, V7454, P272, DOI 10.1007/978-3-642-32940-1_20
   Fette I, 2011, 6455 RFC
   Fowler S, 2016, ELECTRON P THEOR COM, P36, DOI 10.4204/EPTCS.223.3
   Fowler Simon, 2018, EXCEPTIONAL ASYNCHRO
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Hillerstrom Daniel, 2017, LIPICS, V18
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Hu R, 2008, LECT NOTES COMPUT SC, V5142, P516, DOI 10.1007/978-3-540-70592-5_22
   Jespersen Thomas Bracht Laumann, 2015, P 11 ACM SIGPLAN WOR, P13, DOI DOI 10.1145/2808098.2808100
   Kobayashi N, 2003, LECT NOTES COMPUT SC, V2757, P439
   Kokke Wen, 2018, RUSTY VARIATION LIB
   Lindley S, 2017, RIV PUBL SER AUTOMAT, P265
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P434, DOI 10.1145/3022670.2951921
   Lindley S, 2015, LECT NOTES COMPUT SC, V9032, P560, DOI 10.1007/978-3-662-46669-8_23
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Mazurak K, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P77
   Milner Robin, 1999, LECT NOTES COMPUTER, V8459, P115
   Neykova R, 2017, CC'17: PROCEEDINGS OF THE 26TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P98, DOI 10.1145/3033019.3033031
   Neykova R, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(1:17)2017
   Neykova R, 2014, LECT NOTES COMPUT SC, V8459, P131, DOI 10.1007/978-3-662-43376-8_9
   Padovani L, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000289
   Pérez JA, 2012, LECT NOTES COMPUT SC, V7211, P539, DOI 10.1007/978-3-642-28869-2_27
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Remy Didier., 1994, THEORETICAL ASPECTS, P67
   Scalas Alceste, 2017, ECOOP LIPICS, V74
   Scalas Alceste, 2016, ECOOP LIPICS, V56
   Vouillon J, 2008, ML'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN WORKSHOP ON ML, P3
   Wadler P, 2014, J FUNCT PROGRAM, V24, P384, DOI 10.1017/S095679681400001X
NR 44
TC 31
Z9 33
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 28
DI 10.1145/3290341
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300028
OA Green Published, Green Accepted, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Polikarpova, N
   Sergey, I
AF Polikarpova, Nadia
   Sergey, Ilya
TI Structuring the Synthesis of Heap-Manipulating Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Separation Logic; Proof Systems; Type Theory
ID AUTOMATED VERIFICATION; SEPARATION; SIZE; FRAMEWORK; PROOFS; LOGIC;
   SHAPE
AB This paper describes a deductive approach to synthesizing imperative programs with pointers from declarative specifications expressed in Separation Logic. Our synthesis algorithm takes as input a pair of assertions-a pre- and a postcondition-which describe two states of the symbolic heap, and derives a program that transforms one state into the other, guided by the shape of the heap. Our approach to program synthesis is grounded in proof theory: we introduce the novel framework of Synthetic Separation Logic (SSL), which generalises the classical notion of heap entailment P proves Q to incorporate a possibility of transforming a heap satisfying an assertion P into a heap satisfying an assertion Q. A synthesized program represents a proof term for a transforming entailment statement P -> Q, and the synthesis procedure corresponds to a proof search. The derived programs are, thus, correct by construction, in the sense that they satisfy the ascribed pre/postconditions, and are accompanied by complete proof derivations, which can be checked independently.
   We have implemented a proof search engine for SSL in a form of the program synthesizer called SuSLIK. For efficiency, the engine exploits properties of SSI, rules, such as invertibility and commutativity of rule applications on separate heaps, to prune the space of derivations it has to consider. We explain and showcase the use of SSL on characteristic examples, describe the design of SuSLIK, and report on our experience of using it to synthesize a series of benchmark programs manipulating heap-based linked data structures.
C1 [Polikarpova, Nadia] Univ Calif San Diego, La Jolla, CA 92093 USA.
   [Sergey, Ilya] Natl Univ Singapore, Yale NUS Coll, Singapore, Singapore.
C3 University of California System; University of California San Diego;
   Yale NUS College; National University of Singapore
RP Polikarpova, N (corresponding author), Univ Calif San Diego, La Jolla, CA 92093 USA.
EM nadia.polikarpova@ucsd.edu; ilya.sergey@yale-nus.edu.sg
OI Sergey, Ilya/0000-0003-4250-5392
FU UK Research Institute in Verified Trustworthy Software Systems (VeTSS);
   Google
FX We wish to thank Aquinas Hobor and Reuben Rowe for their insightful and
   extremely detailed comments on presentation, formalism, and examples.
   Their technical feedback has helped immensely to bring out the best of
   this paper. We also wish to thank Shachar Itzhaky and Ranjit Jhala for
   their comments on the draft. We are very grateful to Franck Cassez for
   his help with configuring and using ScalaSMT. We thank the POPL'19 PC
   and AEC reviewers for the careful reading and many constructive
   suggestions on the logic, algorithm, and the implementation. Sergey's
   research was supported by a generous gift from Google and by the grant
   by the UK Research Institute in Verified Trustworthy Software Systems
   (VeTSS).
CR Albarghouthi Aws, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P934, DOI 10.1007/978-3-642-39799-8_67
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Antonopoulos T, 2014, LECT NOTES COMPUT SC, V8412, P411
   Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   Appel Andrew W, 2014, PROGRAM LOGICS CERTI, DOI DOI 10.1017/CBO9781107256552
   Berdine J, 2005, LECT NOTES COMPUT SC, V3780, P52
   Berdine Josh, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P178, DOI 10.1007/978-3-642-22110-1_15
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Bouajjani Ahmed, 2012, Automated Technology for Verification and Analysis. Proceedings of the 10th International Symposium, ATVA 2012, P167, DOI 10.1007/978-3-642-33386-6_14
   Brotherston J., 2012, Programming Languages and Systems, V7705, P350, DOI [10.1007/978-3-642-35182-225, 10.1007/978-3-642-35182-2_25]
   Brotherston J, 2017, LECT NOTES ARTIF INT, V10395, P472, DOI 10.1007/978-3-319-63046-5_29
   Brotherston J, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P101, DOI 10.1145/1328438.1328453
   Calcagno C, 2011, LECT NOTES COMPUT SC, V6617, P459, DOI 10.1007/978-3-642-20398-5_33
   Cao QX, 2017, LECT NOTES COMPUT SC, V10695, P190, DOI 10.1007/978-3-319-71237-6_10
   Cassez F, 2017, SCALA'17: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P51, DOI 10.1145/3136000.3136004
   Charguéraud A, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P321
   Chen HG, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P18, DOI 10.1145/2815400.2815402
   Chin WN, 2012, SCI COMPUT PROGRAM, V77, P1006, DOI 10.1016/j.scico.2010.07.004
   Chin Wei-Ngan., 2011, Proceedings of the ACM International Conference on Object-Oriented Programming Systems Languages and Applications, P9
   Chlipala A, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P234
   Delaware B, 2015, ACM SIGPLAN NOTICES, V50, P689, DOI [10.1145/2775051.2677006, 10.1145/2676726.2677006]
   Distefano D, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P213
   Eguchi Shingo, 2018, APLAS
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   Gonthier Georges, 2011, ICFP
   Gulwani S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P62
   Hobor A, 2013, ACM SIGPLAN NOTICES, V48, P523, DOI 10.1145/2480359.2429131
   Itzhaky S, 2016, ACM SIGPLAN NOTICES, V51, P145, DOI 10.1145/3022671.2983993
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jacobs S, 2013, LECT NOTES COMPUT SC, V7737, P88
   Kleymann T., 1999, Formal Aspects of Computing, V11, P541, DOI 10.1007/s001650050057
   Kneuss E, 2013, ACM SIGPLAN NOTICES, V48, P407, DOI [10.1145/2509136.2509555, 10.1145/2544173.2509555]
   Kuncak V, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P316, DOI 10.1145/1806596.1806632
   Le TC, 2014, LECT NOTES COMPUT SC, V8829, P267, DOI 10.1007/978-3-319-11737-9_18
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Le X.-B., 2018, LNCS, V10801, P385, DOI [10.1007/978-3-319-89884-1_14, DOI 10.1007/978-3-319-89884-1_14]
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   Leino KRM, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1488, DOI 10.1109/ICSE.2013.6606754
   Leino KRM, 2012, ACM SIGPLAN NOTICES, V47, P411, DOI 10.1145/2398857.2384646
   Liang C, 2009, THEOR COMPUT SCI, V410, P4747, DOI 10.1016/j.tcs.2009.07.041
   Madhusudan P, 2012, ACM SIGPLAN NOTICES, V47, P123, DOI 10.1145/2103621.2103673
   Manna Z., 1980, ACM Transactions on Programming Languages and Systems, V2, P90, DOI 10.1145/357084.357090
   Martin-Lof P., 1984, Intuitionistic type theory
   McCreight A, 2009, LECT NOTES COMPUT SC, V5674, P343, DOI 10.1007/978-3-642-03359-9_24
   MELLISH C, 1984, IMPLEMENTATIONS PROL, P147
   Miltner Anders, 2018, POPL, V2
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Murali V., 2018, 6 INT C LEARNING REP
   Nanevski A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P261, DOI 10.1145/1706299.1706331
   Nanevski Aleksandar, 2016, LECT NOTES OREGON PR
   Nguyen HH, 2007, LECT NOTES COMPUT SC, V4349, P251
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2004, ACM SIGPLAN NOTICES, V39, P268, DOI [10.1145/982962.964024, 10.1145/1498926.1498929]
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Pfenning Frank, 2010, LECT NOTES FOCUSING
   Piskac R, 2014, LECT NOTES COMPUT SC, V8559, P711, DOI 10.1007/978-3-319-08867-9_47
   Piskac T., 2014, LNCS, P124, DOI DOI 10.1007/978-3-642-54862-8_9
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Polikarpova Nadia, 2018, ABS180707022 CORR ABS180707022 CORR
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Qiu XK, 2013, ACM SIGPLAN NOTICES, V48, P231, DOI 10.1145/2499370.2462169
   Qiu Xiaokang, 2017, PACMPL 1 OOPSLA
   Reynolds A, 2015, LECT NOTES COMPUT SC, V9207, P198, DOI 10.1007/978-3-319-21668-3_12
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rowe RNS, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P53, DOI 10.1145/3018610.3018623
   Scherer Gabriel, 2017, SCHLOSS DAGSTUHL LEI, V15
   Si XJ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P515, DOI 10.1145/3236024.3236034
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2980983.2908102, 10.1145/2908080.2908102]
   So S, 2017, LECT NOTES COMPUT SC, V10422, P364, DOI 10.1007/978-3-319-66706-5_18
   Solar-Lezama Armando, 2013, International Journal on Software Tools for Technology Transfer, V15, P475, DOI 10.1007/s10009-012-0249-7
   Srivastava S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P313, DOI 10.1145/1706299.1706337
   The Coq Development Team, 2022, COQ PROOF ASSISTANT
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   van Tonder R, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P151, DOI 10.1145/3180155.3180250
   Yaghmazadeh N, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133887
NR 79
TC 26
Z9 28
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 72
DI 10.1145/3290385
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300072
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU He, DJ
   Gui, YJ
   Li, W
   Tao, YG
   Zou, CW
   Sui, YL
   Xue, JL
AF He, Dongjie
   Gui, Yujiang
   Li, Wei
   Tao, Yonggang
   Zou, Changwei
   Sui, Yulei
   Xue, Jingling
TI A Container-Usage-Pattern-Based Context Debloating Approach for
   Object-Sensitive Pointer Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE pointer analysis; context debloating; container usage patterns
ID TO ANALYSIS; PRECISE
AB In this paper, we introduce DEBLOATERX, a new approach for automatically identifying context-independent objects to debloat contexts in object-sensitive pointer analysis (kappa obj). Object sensitivity achieves high precision, but its context construction mechanism combines objects with their contexts indiscriminately. This leads to a combinatorial explosion of contexts in large programs, resulting in inefficiency. Previous research has proposed a context-debloating approach that inhibits a pre-selected set of context-independent objects from forming new contexts, improving the efficiency of kappa obj. However, this earlier context-debloating approach under-approximates the set of context-independent objects identified, limiting performance speedups.
   We introduce a novel context-debloating pre-analysis approach that identifies objects as context-dependent only when they are potentially precision-critical to kappa obj based on three general container-usage patterns. Our research finds that objects containing no fields of "abstract" (i.e., open) types can be analyzed context-insensitively with negligible precision loss in real-world applications. We provide clear rules and efficient algorithms to recognize these patterns, selecting more context-independent objects for better debloating. We have implemented DEBLOATERX in the Qilin framework and will release it as an open-source tool. Our experimental results on 12 standard Java benchmarks and real-world programs show that DEBLOATERX selects 92.4% of objects to be context-independent on average, enabling kappa obj to run significantly faster (an average of 19.3x when kappa = 2 and 150.2x when kappa = 3) and scale up to 8 more programs when kappa = 3, with only a negligible loss of precision (less than 0.2%). Compared to state-of-the-art alternative pre-analyses in accelerating kappa obj, DEBLOATERX outperforms ZIPPER significantly in both precision and efficiency, and outperforms CONCH (the earlier context-debloating approach) in efficiency substantially while achieving nearly the same precision.
C1 [He, Dongjie; Gui, Yujiang; Li, Wei; Tao, Yonggang; Zou, Changwei; Sui, Yulei; Xue, Jingling] Univ New South Wales, Sydney, NSW 2052, Australia.
C3 University of New South Wales Sydney
RP He, DJ (corresponding author), Univ New South Wales, Sydney, NSW 2052, Australia.
EM dongjieh@cse.unsw.edu.au; yujiang.gui@unsw.edu.au;
   liwei@cse.unsw.edu.au; yonggangtao@cse.unsw.edu.au;
   changwei.zou@unsw.edu.au; y.sui@unsw.edu.au; jingling@cse.unsw.edu.au
RI Sui, Yulei/AAL-5915-2020
OI Sui, Yulei/0000-0002-9510-6574; Gui, Yujiang/0009-0006-3999-5203; Li,
   Wei/0000-0003-0576-6243; He, Dongjie/0000-0003-0304-8942; Tao,
   Yonggang/0009-0006-3669-2047
FU ARC [DP210102409]
FX We thank the anonymous reviewers for their valuable comments. This
   research is supported by ARC Grant DP210102409.
CR Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bodden E, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P241, DOI 10.1145/1985793.1985827
   Bravenboer Martin, 2009, P 24 ACM SIGPLAN C O, P243, DOI [DOI 10.1145/1640089.1640108, 10.1145/1640089.1640108]
   Cai Yuandao, 2022, ESEC/FSE 2022: Proceedings of the 30th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering, P784, DOI 10.1145/3540250.3549110
   Garcia-Contreras I, 2022, LECT NOTES COMPUT SC, V13790, P227, DOI 10.1007/978-3-031-22308-2_11
   Hassanshahi B., 2017, P 6 ACM SIGPLAN INT, P13
   He DJ, 2023, ACM T SOFTW ENG METH, V32, DOI 10.1145/3579641
   He DJ, 2023, IEEE T SOFTWARE ENG, V49, P719, DOI 10.1109/TSE.2022.3162236
   He DJ, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P79, DOI 10.1109/ASE51524.2021.9678880
   He Dongjie, 35 EUR C OBJ OR PROG, V194, DOI [10.4230/LIPIcs.ECOOP.2021.16, DOI 10.4230/LIPICS.ECOOP.2021.16]
   He Dongjie, 2022, 36 EUROPEAN C OBJECT, V222, DOI [10.4230/LIPIcs.ECOOP.2022.30, DOI 10.4230/LIPICS.ECOOP.2022.30]
   Jeon M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498720
   Jeon M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276510
   Jeon M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428247
   Jeong S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133924
   Kastrinis G, 2013, ACM SIGPLAN NOTICES, V48, P423, DOI 10.1145/2499370.2462191
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Li HF, 2022, PROCEEDINGS OF THE 30TH ACM JOINT MEETING EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, ESEC/FSE 2022, P1110, DOI 10.1145/3540250.3549122
   Li Y, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276511
   Li Y, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3381915
   Liu BZ, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527332
   Liu BZ, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3293606
   Lu JB, 2021, LECT NOTES COMPUT SC, V12913, P261, DOI 10.1007/978-3-030-88806-0_13
   Lu JB, 2021, ACM T SOFTW ENG METH, V30, DOI 10.1145/3450492
   Lu JB, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360574
   Lu Jingbo, 2023, 38 IEEE ACM INT C AU
   Mathiasen AA, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434315
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Milanova A., 2002, Software Engineering Notes, V27, P1, DOI 10.1145/566171.566174
   Mohri M., 2001, ROBUSTNESS LANGUAGE, P153
   Phulia A, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P839, DOI 10.1145/3385412.3385962
   Reps T, 2000, ACM T PROGR LANG SYS, V22, P162, DOI 10.1145/345099.345137
   Shivers O. G., 1991, THESIS CARNEGIE MELL
   Smaragdakis Y, 2014, ACM SIGPLAN NOTICES, V49, P485, DOI [10.1145/2666356.2594320, 10.1145/2594291.2594320]
   Smaragdakis Y, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P17, DOI 10.1145/1926385.1926390
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Sridharan M, 2009, LECT NOTES COMPUT SC, V5673, P205, DOI 10.1007/978-3-642-03237-0_15
   Sridharan M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P112, DOI 10.1145/1250734.1250748
   Tan T, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485524
   Tan T, 2017, ACM SIGPLAN NOTICES, V52, P278, DOI [10.1145/3140587.3062360, 10.1145/3062341.3062360]
   Tan T, 2016, LECT NOTES COMPUT SC, V9837, P489, DOI 10.1007/978-3-662-53413-7_24
   Thakur M, 2020, PROCEEDINGS OF THE 29TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '20), P27, DOI 10.1145/3377555.3377902
   Thiessen R, 2017, ACM SIGPLAN NOTICES, V52, P263, DOI [10.1145/3140587.3062359, 10.1145/3062341.3062359]
   Trabish D, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P197, DOI 10.1145/3368089.3409698
   Vallee-Rai Raja, 2010, CASCON First Decade High Impact Papers, P214, DOI [10.1145/1925805.1925818, DOI 10.1145/1925805.1925818, 10.1145/1925 805.1925818]
   WALA, 2023, WALA: T.J. Watson Libraries for Analysis
   Yan Dacong, 2011, P 2011 INT S SOFTW T, P155, DOI [10.1145/2001420.2001440, DOI 10.1145/2001420.2001440]
   Zhang QR, 2013, ACM SIGPLAN NOTICES, V48, P435, DOI 10.1145/2499370.2462159
   Zhang QR, 2014, ACM SIGPLAN NOTICES, V49, P829, DOI [10.1145/2660193.2660213, 10.1145/2714064.2660213]
NR 50
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 256
DI 10.1145/3622832
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100036
OA gold
DA 2024-07-18
ER

PT J
AU Ho, S
   Fromherz, A
   Protzenko, J
AF Ho, Son
   Fromherz, Aymeric
   Protzenko, Jonathan
TI Modularity, Code Specialization, and Zero-Cost Abstractions for Program
   Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Proof Engineering; Cryptographic Primitives
AB For all the successes in verifying low-level, efficient, security-critical code, little has been said or studied about the structure, architecture and engineering of such large-scale proof developments. We present the design, implementation and evaluation of a set of language-based techniques that allow the programmer to modularly write and verify code at a high level of abstraction, while retaining control over the compilation process and producing high-quality, zero-overhead, low-level code suitable for integration into mainstream software.
   We implement our techniques within the F-star proof assistant, and specifically its shallowly-embedded Low(star) toolchain that compiles to C. Through our evaluation, we establish that our techniques were critical in scaling the popular HACL(star) library past 100,000 lines of verified source code, and brought about significant gains in proof engineer productivity. The exposition of our methodology converges on one final, novel case study: the streaming API, a finicky API that has historically caused many bugs in high-profile software. Using our approach, we manage to capture the streaming semantics in a generic way, and apply it "for free" to over a dozen use-cases. Six of those have made it into the reference implementation of the Python programming language, replacing the previous CVE-ridden code.
C1 [Ho, Son; Fromherz, Aymeric] INRIA, Paris, France.
   [Protzenko, Jonathan] Microsoft Res, Redmond, WA USA.
C3 Inria; Microsoft
RP Ho, S (corresponding author), INRIA, Paris, France.
OI Protzenko, Jonathan/0000-0001-7347-3050; Fromherz,
   Aymeric/0000-0003-2642-543X; Ho, Son/0000-0003-3297-9156
FU French National Research Agency under the France [ANR-22-PECY-0006]
FX We thank Marina Polubelova for invaluable help with the HACL. library,
   and Gregory P Smith and the Python maintainers for their feedback
   throughout the integration of our work in CPython. This work benefited
   from funding managed by the French National Research Agency under the
   France 2030 programme with the reference ANR-22-PECY-0006.
CR Ahman D, 2017, ACM SIGPLAN NOTICES, V52, P515, DOI 10.1145/3093333.3009878
   Almeida JB, 2020, P IEEE S SECUR PRIV, P965, DOI 10.1109/SP40000.2020.00028
   Almeida JB, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1807, DOI 10.1145/3133956.3134078
   Amani S, 2016, ACM SIGPLAN NOTICES, V51, P175, DOI 10.1145/2954679.2872404
   Anand A., 2017, 3 INT WORKSHOP COQ P
   [Anonymous], 2012, FEDERAL INFORM PROCE
   [Anonymous], 2023, Wall Street Journal
   Appel AW, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2701415
   Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Aumasson J.-P., 2013, APPL CRYPTOGRAPHY NE, P119, DOI [DOI 10.1007/978-3-642-38980-1_8, DOI 10.1007/978-3-642-38980-18]
   Barnes R., 2019, IRTF Internet-Draft draftirtf-cfrg-hpke- 02
   Benjamin David, 2016, poly1305-x86.pl produces incorrect output
   Beringer L, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P207
   Bernstein DJ, 2006, LECT NOTES COMPUT SC, V3958, P207
   Bernstein DJ, 2005, LECT NOTES COMPUT SC, V3557, P32
   Bhargavan K., 2017, LIPIcs, DOI DOI 10.4230/LIPICS.SNAPL.2017.1
   Biffle Cliff L., 2010, NaCl/x86 appears to leave return addresses unaligned when returning through the springboard
   Bock Hanno, 2016, Wrong results with Poly1305 functions
   Bond B, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P917
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Bugzilla, 2019, Crash in Hacl Chacha20Poly1305_128 aead_encrypt & Hacl Chacha20Poly1305_128 aead_decrypt
   Chlipala A, 2013, ACM SIGPLAN NOTICES, V48, P391, DOI [10.1145/2544174.2500592, 10.1145/2500365.2500592]
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Donenfeld Jason A., 2018, new 25519 measurements of formally verified implementations
   Dworkin M.J, 2015, Federal Information Processing Standards, DOI [DOI 10.6028/NIST.FIPS.202, 10.6028/NIST.FIPS.202]
   Erbsen A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P604, DOI 10.1145/3453483.3454065
   Erbsen A, 2019, P IEEE S SECUR PRIV, P1202, DOI 10.1109/SP.2019.00005
   Fromherz A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473590
   Fromherz A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290376
   Futz Paul, 2015, C Preprocessor tricks, tips and idioms
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Gueron S, 2014, 2014 11TH INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY: NEW GENERATIONS (ITNG), P333, DOI 10.1109/ITNG.2014.31
   Gueron Shay, 2012, Intel (R)Advanced Encryption Standard (AES) New Instructions Set
   Haskell-crypto, 2022, cryptonite
   Ho Son, 2023, Modularity, Code Specialization, and Zero-Cost Abstractions for Program Verification, DOI [10.5281/zenodo.8161357, DOI 10.5281/ZENODO.8161357]
   Ho Son, 2022, P IEEE S SECURITY PR, DOI [10.1109/SP46214.2022.9833621, DOI 10.1109/SP46214.2022.9833621]
   Kaiser JO, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236773
   Kassios IT, 2006, LECT NOTES COMPUT SC, V4085, P268
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Lammich P, 2019, J AUTOM REASONING, V62, P481, DOI 10.1007/s10817-017-9437-1
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Letouzey P, 2002, LECT NOTES COMPUT SC, V2646, P200
   MacQueen DavidB., 1986, P 13 ACM SIGPLAN S P, P277, DOI DOI 10.1145/512644.512670
   Martínez G, 2019, LECT NOTES COMPUT SC, V11423, P30, DOI 10.1007/978-3-030-17184-1_2
   McGrew David A., 2004, P INT C CRYPTOLOGY I, DOI [10.1007/978-3-540-30556-9_27, DOI 10.1007/978-3-540-30556-9_27]
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MITRE, 2013, CVE-2014-0160
   MITRE, 2018, CVE-2017-5753
   MITRE, 2018, CVE-2017-5715
   Mouha N, 2018, IEEE T RELIAB, V67, P870, DOI 10.1109/TR.2018.2847247
   Mouha Nicky, 2022, SHA-3 Buffer Overflow
   O'Connor L, 2016, Arxiv, DOI [arXiv:1601.05520, 10.48550/arXiv.1601.05520, DOI 10.48550/ARXIV.1601.05520]
   Oliveira T, 2018, LECT NOTES COMPUT SC, V10719, P172, DOI 10.1007/978-3-319-72565-9_9
   OpenSSL, 2016, Chase overflow bit on x86 and ARM platforms
   OpenSSL, 2016, GitHub commit 4b8736a22-758c371bc2f8b3534dc0c274acf42c
   OpenSSL, 2016, GitHub commit bbe9769ba66ab2512678a87b0d9b266ba970db05
   Pit-Claudel C, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P918, DOI 10.1145/3519939.3523706
   Pit-Claudel C, 2020, LECT NOTES COMPUT SC, V12167, P119, DOI 10.1007/978-3-030-51054-1_7
   Polubelova M, 2020, CCS '20: PROCEEDINGS OF THE 2020 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P899, DOI 10.1145/3372297.3423352
   Protzenko J, 2020, P IEEE S SECUR PRIV, P983, DOI 10.1109/SP40000.2020.00114
   Protzenko J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110261
   Ramananandro T, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1465
   Rastogi Aseem, 2021, Programming and Proving with Indexed Effects
   Ringer T, 2019, FOUND TRENDS PROGRAM, V5, P102, DOI 10.1561/2500000045
   Rossberg A, 2014, J FUNCT PROGRAM, V24, P529, DOI 10.1017/S0956796814000264
   Saarinen M. J, 2015, IETF RFC 7693
   Sewell T, 2013, ACM SIGPLAN NOTICES, V48, P471, DOI 10.1145/2499370.2462183
   Swamy N, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P31, DOI 10.1145/3519939.3523708
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Voight Forrest, 2012, CVE 2012 2459 BLOCK
   Vranken Guido, 2019, CryptoFuzz
   WARREN H.S.Jr., 2013, Hacker's Delight, V2nd
   Weeks Stephen, 2006, ML 06 P 2006 WORKSHO, P1
   Zinzindohoué JK, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1789, DOI 10.1145/3133956.3134043
NR 77
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 202
DI 10.1145/3607844
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900015
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Beurer-Kellner, L
   Fischer, M
   Vechev, M
AF Beurer-Kellner, Luca
   Fischer, Marc
   Vechev, Martin
TI Prompting Is Programming: A Query Language for Large Language Models
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE language model programming; prompt programming
AB Large language models have demonstrated outstanding performance on a wide range of tasks such as question answering and code generation. On a high level, given an input, a language model can be used to automatically complete the sequence in a statistically-likely way. Based on this, users prompt these models with language instructions or examples, to implement a variety of downstream tasks. Advanced prompting methods can even imply interaction between the language model, a user, and external tools such as calculators. However, to obtain state-of-the-art performance or adapt language models for specific tasks, complex task- and model-specific programs have to be implemented, which may still require ad-hoc interaction.
   Based on this, we present the novel idea of Language Model Programming (LMP). LMP generalizes language model prompting from pure text prompts to an intuitive combination of text prompting and scripting. Additionally, LMP allows constraints to be specified over the language model output. This enables easy adaption to many tasks while abstracting language model internals and providing high-level semantics.
   To enable LMP, we implement LMQL (short for Language Model Query Language), which leverages the constraints and control flow from an LMP prompt to generate an efficient inference procedure that minimizes the number of expensive calls to the underlying language model.
   We show that LMQL can capture a wide range of state-of-the-art prompting methods in an intuitive way, especially facilitating interactive flows that are challenging to implement with existing high-level APIs. Our evaluation shows that we retain or increase the accuracy on several downstream tasks, while also significantly reducing the required amount of computation or cost in the case of pay-to-use APIs (26-85% cost savings).
C1 [Beurer-Kellner, Luca; Fischer, Marc; Vechev, Martin] Swiss Fed Inst Technol, Zurich, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich
RP Beurer-Kellner, L (corresponding author), Swiss Fed Inst Technol, Zurich, Switzerland.
EM luca.beurer-kellner@inf.ethz.ch; marc.fischer@inf.ethz.ch;
   martin.vechev@inf.ethz.ch
FU Swiss State Secretariat for Education, Research and Innovation (SERI)
   (SERI)
FX This work has received funding from the Swiss State Secretariat for
   Education, Research and Innovation (SERI) (SERI-funded ERC Consolidator
   Grant).
CR Andor D, 2019, 2019 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING AND THE 9TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING (EMNLP-IJCNLP 2019), P5947
   Bach Stephen, 2022, P ACL, DOI [10.18653/v1/2022.acl-demo.9, DOI 10.18653/V1/2022.ACL-DEMO.9]
   Brown T., 2020, P ADV NEUR INF PROC, V33, P1877
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Chen WH, 2023, Arxiv, DOI [arXiv:2211.12588, DOI 10.48550/ARXIV.2211.12588]
   Cobbe K, 2021, Arxiv, DOI [arXiv:2110.14168, DOI 10.48550/ARXIV.2110.14168]
   Devlin J, 2019, 2019 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES (NAACL HLT 2019), VOL. 1, P4171
   Ding N, 2022, PROCEEDINGS OF THE 60TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2022): PROCEEDINGS OF SYSTEM DEMONSTRATIONS, P105
   Dohan D, 2022, Arxiv, DOI arXiv:2207.10342
   Gao L, 2020, Arxiv, DOI arXiv:2101.00027
   Gao LY, 2023, Arxiv, DOI [arXiv:2211.10435, 10.48550/arXiv.2211.10435]
   Harrison Chase, 2023, LANGCHAIN
   HuggingFace, 2023, MOD REP
   HuggingFace, 2023, GENERATIONS
   Lmql-Lang, 2023, Zenodo, DOI 10.5281/ZENODO.7711823
   OpenAI, 2022, CHATGPT OPT LANG MOD
   Ozturkler B, 2023, Arxiv, DOI arXiv:2210.01293
   Poesia G, 2022, Arxiv, DOI arXiv:2201.11227
   Radford A., 2019, LANGUAGE MODELS ARE
   Reppert J, 2023, Arxiv, DOI arXiv:2301.01751
   Reynolds L, 2021, EXTENDED ABSTRACTS OF THE 2021 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'21), DOI 10.1145/3411763.3451760
   Schick Timo, 2023, arXiv
   Scholak Torsten, 2021, PROC EMNLP, DOI [10.18653/v1/2021.emnlp-main.779, DOI 10.18653/V1/2021.EMNLP-MAIN.779]
   Shin R, 2021, 2021 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2021), P7699
   Srivastava Aarohi, 2022, arXiv
   Vaswani A, 2017, ADV NEUR IN, V30
   Wang Ben, 2021, GPTJ6B
   Wang Xuezhi, 2022, PREPRINT, DOI DOI 10.48550/ARXIV.2203.11171
   Wei JS, 2022, Arxiv, DOI [arXiv:2201.11903, DOI 10.48550/ARXIV.2201.11903]
   Wolf T, 2020, PROCEEDINGS OF THE 2020 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING: SYSTEM DEMONSTRATIONS, P38
   Wu TS, 2022, EXTENDED ABSTRACTS OF THE 2022 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, CHI 2022, DOI 10.1145/3491101.3519729
   Yang Z, 2018, 2018 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2018), P2369
   Yao SY, 2022, Arxiv, DOI arXiv:2210.03629
   Zhang SS, 2022, Arxiv, DOI arXiv:2205.01068
   Zhou YC, 2023, Arxiv, DOI [arXiv:2211.01910, DOI 10.48550/ARXIV.2211.01910]
NR 35
TC 5
Z9 5
U1 5
U2 21
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 186
DI 10.1145/3591300
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900082
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Wagner, C
   Jaber, N
   Samanta, R
AF Wagner, Christopher
   Jaber, Nouraldin
   Samanta, Roopsha
TI Enabling Bounded Verification of Doubly-Unbounded Distributed
   Agreement-Based Systems via Bounded Regions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Layered Verification; Data Saturation; Reduction
ID MODEL-CHECKING; SYMMETRY
AB The ubiquity of distributed agreement protocols, such as consensus, has galvanized interest in verification of such protocols as well as applications built on top of them. The complexity and unboundedness of such systems, however, makes their verification onerous in general, and, particularly prohibitive for full automation. An exciting, recent breakthrough reveals that, through careful modeling, it becomes possible to reduce verification of interesting distributed agreement-based (DAB) systems, that are unbounded in the number of processes, to model checking of small, finite-state systems. It is an open question if such reductions are also possible for DAB systems that are doubly-unbounded, in particular, DAB systems that additionally have unbounded data domains. We answer this question in the affirmative in this work thereby broadening the class of DAB systems which can be automatically and efficiently verified. We present a novel reduction which leverages value symmetry and a new notion of data saturation to reduce verification of doubly-unbounded DAB systems to model checking of small, finite-state systems. We develop a tool, Venus, that can efficiently verify sophisticated DAB system models such as the arbitration mechanism for a consortium blockchain, a distributed register, and a simple key-value store.
C1 [Wagner, Christopher; Jaber, Nouraldin; Samanta, Roopsha] Purdue Univ, Comp Sci, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Wagner, C (corresponding author), Purdue Univ, Comp Sci, W Lafayette, IN 47907 USA.
EM wagne279@purdue.edu; njaber@purdue.edu; roopsha@purdue.edu
OI Samanta, Roopsha/0009-0000-2456-217X
FU NSF [1846327]; Amazon Science
FX This work was partially funded by NSF grant 1846327 and Amazon Science.
CR Abdulla PA, 1996, IEEE S LOG, P313, DOI 10.1109/LICS.1996.561359
   Abdulla P, 2016, INT J SOFTW TOOLS TE, V18, P495, DOI 10.1007/s10009-015-0406-x
   Abdulla Parosh Aziz, 2007, PARAMETERIZED VERIFI, DOI [10.1007/978-3-540-73368-3_17, DOI 10.1007/978-3-540-73368-3_17]
   Alur R, 2015, LECT NOTES COMPUT SC, V9207, P395, DOI 10.1007/978-3-319-21668-3_23
   Aminof B, 2018, DISTRIB COMPUT, V31, P187, DOI 10.1007/s00446-017-0302-6
   Amsden Z., 2020, The Libra Blockchain.
   [Anonymous], 2021, ABOUT US
   Ausserlechner S, 2016, LECT NOTES COMPUT SC, V9583, P476, DOI 10.1007/978-3-662-49122-5_23
   Bloem Roderick P., 2015, Decidability of parameterized verification.
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   Clarke E, 2006, LECT NOTES COMPUT SC, V3855, P126
   CLARKE EM, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P353
   Clarke EM, 1998, LECT NOTES COMPUT SC, V1427, P147, DOI 10.1007/BFb0028741
   Emerson EA, 2003, LECT NOTES COMPUT SC, V2860, P247
   Emerson EA, 2003, LECT NOTES COMPUT SC, V2860, P216
   Emerson EA, 2000, LECT NOTES ARTIF INT, V1831, P236
   Emerson EA, 2000, IEEE S LOG, P121, DOI 10.1109/LICS.2000.855761
   Emerson EA, 1997, ACM T PROGR LANG SYS, V19, P617, DOI 10.1145/262004.262008
   Esparza J., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P352, DOI 10.1109/LICS.1999.782630
   Finkel A, 2001, THEOR COMPUT SCI, V256, P63, DOI 10.1016/S0304-3975(00)00102-X
   Gleissenthall KV, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290372
   Griffin J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409005
   Hyperledger, 2021, HYP PROJ
   Ip CN, 1996, FORM METHOD SYST DES, V9, P41, DOI 10.1007/BF00625968
   Jaber N, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485534
   Jaber N, 2020, LECT NOTES COMPUT SC, V12224, P299, DOI 10.1007/978-3-030-53288-8_15
   Jacobs S, 2018, LECT NOTES COMPUT SC, V10747, P247, DOI 10.1007/978-3-319-73721-8_12
   Kaiser A, 2010, LECT NOTES COMPUT SC, V6174, P645
   Krogh-Jespersen M, 2020, LECT NOTES COMPUT SC, V12075, P336, DOI 10.1007/978-3-030-44914-8_13
   LUBACHEVSKY BD, 1984, ACTA INFORM, V21, P125, DOI 10.1007/BF00289237
   Ma HJ, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P370, DOI 10.1145/3341301.3359651
   Maric O, 2017, LECT NOTES COMPUT SC, V10427, P217, DOI 10.1007/978-3-319-63390-9_12
   Padon O, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3140568
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Redis, 2021, About us
   Schmitz Sylvain, 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P5, DOI 10.1007/978-3-642-40184-8_2
   Sergey I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158116
   SUZUKI I, 1988, INFORM PROCESS LETT, V28, P213, DOI 10.1016/0020-0190(88)90211-6
   Taube M, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P662, DOI 10.1145/3192366.3192414
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
NR 40
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586033
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600008
OA gold
DA 2024-07-18
ER

PT J
AU Xu, ZY
   Tian, YQ
   Zhang, MX
   Zhao, GS
   Jiang, Y
   Sun, CN
AF Xu, Zhenyang
   Tian, Yongqiang
   Zhang, Mengxiao
   Zhao, Gaosen
   Jiang, Yu
   Sun, Chengnian
TI Pushing the Limit of 1-Minimality of Language-Agnostic Program Reduction
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Reduction; Automated Debugging; Test Input Minimization
ID COMPILER BUGS
AB Program reduction has demonstrated its usefulness in facilitating debugging language implementations in practice, by minimizing bug-triggering programs. There are two categories of program reducers: languageagnostic program reducers (AGRs) and language-speci similar to c program reducers (SPRs). AGRs, such as HDD and Perses, are generally applicable to various languages; SPRs are speci similar to cally designed for one language with meticulous thoughts and signi similar to cant engineering e similar to orts, e.g., C-Reduce for reducing C/C++ programs. Program reduction is an NP-complete problem: similar to nding the globally minimal program is usually infeasible. Thus all existing program reducers resort to producing 1-minimal results, a special type of local minima. However, 1-minimality can still be large and contain excessive bug-irrelevant program elements. This is especially the case for AGR-produced results because of the generic reduction algorithms used in AGRs. An SPR often yields smaller results than AGRs for the language for which the SPR has customized reduction algorithms. But SPRs are not language-agnostic, and implementing a new SPR for a di similar to erent language requires signi similar to cant engineering e similar to orts. This paper proposes Vulcan, a language-agnostic framework to further minimize AGRs-produced results by exploiting the formal syntax of the language to perform aggressive program transformations, in hope of creating reduction opportunities for other reduction algorithms to progress or even directly deleting bugirrelevant elements from the results. Our key insights are two-fold. First, the program transformations in all existing program reducers including SPRs are not diverse enough, which traps these program reducers early in 1-minimality. Second, compared with the original program, the results of AGRs are much smaller, and time-wise it is a similar to ordable to perform diverse program transformations that change programs but do not necessarily reduce the sizes of the programs directly. Within the Vulcan framework, we proposed three simple examples of similar to ne-grained program transformations to demonstrate that Vulcan can indeed further push the 1-minimality of AGRs. By performing these program transformations, a 1-minimal program might become a non-1-minimal one that can be further reduced later. Our extensive evaluations on multilingual benchmarks including C, Rust and SMT-LIBv2 programs strongly demonstrate the e similar to ectiveness and generality of Vulcan. Vulcan outperforms the state-of-the-art languageagnostic program reducer Perses in size in all benchmarks: On average, the result of Vulcan contains 33.55%,21.61%, and 31.34% fewer tokens than that of Perses on C, Rust, and SMT-LIBv2 subjects respectively. Vulcan can produce even smaller results if more reduction time is allocated. Moreover, for the C programs that are reduced by C-Reduce, Vulcan is even able to further minimize them by 10.07%.
C1 [Xu, Zhenyang; Tian, Yongqiang; Zhang, Mengxiao; Zhao, Gaosen; Sun, Chengnian] Univ Waterloo, Sch Comp Sci, Waterloo, ON, Canada.
   [Jiang, Yu] Tsinghua Univ, Sch Software, Beijing, Peoples R China.
   [Tian, Yongqiang] Hong Kong Univ Sci & Technol, Hong Kong, Peoples R China.
C3 University of Waterloo; Tsinghua University; Hong Kong University of
   Science & Technology
RP Xu, ZY (corresponding author), Univ Waterloo, Sch Comp Sci, Waterloo, ON, Canada.
EM zhenyang.xu@uwaterloo.ca; yongqiang.tian@uwaterloo.ca;
   m492zhan@uwaterloo.ca; gaosen.zhao@uwaterloo.ca;
   jy1989@mail.tsinghua.edu.cn; cnsun@uwaterloo.ca
OI Zhang, Mengxiao/0000-0002-3463-2802; Sun, Chengnian/0000-0002-0862-2491;
   Xu, Zhenyang/0000-0002-9451-4031; Jiang, Yu/0000-0003-0955-503X; TIAN,
   Yongqiang/0000-0003-1644-2965
FU Natural Sciences and Engineering Research Council of Canada (NSERC);
   CFI-JELF Project [40736]; Waterloo-Huawei Joint Innovation Lab
FX We thank all the anonymous reviewers in OOPSLA'23 for their insightful
   feedback and comments, which significantly improved this paper. This
   research is partially supported by the Natural Sciences and Engineering
   Research Council of Canada (NSERC) through the Discovery Grant, a
   project under Waterloo-Huawei Joint Innovation Lab, and CFI-JELF Project
   #40736.
CR [Anonymous], 2017, TJ WATS LIB AN
   [Anonymous], 2017, JS DELT
   Aschermann C, 2019, 26TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2019), DOI 10.14722/ndss.2019.23412
   Donaldson Alastair F., 2017, Proceedings of the ACM on Programming Languages, V1, DOI 10.1145/3133917
   GCC-Wiki, 2020, GUID TESTC RED
   Heo K, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P380, DOI 10.1145/3243734.3243838
   Hodován R, 2017, PROC IEEE INT CONF S, P194, DOI 10.1109/ICSME.2017.26
   JerryScript, 2022, JERRYSCRIPT
   Kalhauge CG, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1003, DOI 10.1145/3453483.3454091
   Kalhauge CG, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P556, DOI 10.1145/3338906.3338956
   Kremer G, 2021, LECT NOTES COMPUT SC, V12760, P231, DOI 10.1007/978-3-030-81688-9_11
   Kreutzer P, 2020, IEEE INT CONF SOFTW, P39, DOI 10.1109/ICST46399.2020.00015
   Le V, 2015, ACM SIGPLAN NOTICES, V50, P386, DOI [10.1145/2814270.2814319, 10.1145/2858965.2814319]
   Le Vu, 2014, COMPILER VALIDATION, P216, DOI [10.1145/2594291.2594334, DOI 10.1145/2594291.2594334]
   LLVM, 2022, How to submit an LLVM bug report
   LLVM Bugzilla, 2016, BUG LLVM 26760
   LLVM/Clang, 2022, CLANG DOC LIBTOOLING
   McPeak Scott, 2003, BERKELEY DELTA
   Misherghi G., 2006, 28th International Conference on Software Engineering Proceedings, P142, DOI 10.1145/1134285.1134307
   MozillaSecurity, 2022, US LITH
   Niemetz Aina, 2013, P 11 INT WORKSHOP SA, P8
   Regehr J, 2012, ACM SIGPLAN NOTICES, V47, P335, DOI 10.1145/2345156.2254104
   Regehr John, 2022, C REDUCER GITHUB REP
   Rust, 2022, RUST ISS
   Sun CN, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P361, DOI 10.1145/3180155.3180236
   Sun CN, 2016, ACM SIGPLAN NOTICES, V51, P849, DOI 10.1145/3022671.2984038
   Wang GC, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P881, DOI 10.1145/3468264.3468625
   Wang JJ, 2019, PROC INT CONF SOFTW, P724, DOI 10.1109/ICSE.2019.00081
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zeller A, 2002, IEEE T SOFTWARE ENG, V28, P183, DOI 10.1109/32.988498
NR 30
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586049
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600024
OA gold
DA 2024-07-18
ER

PT J
AU Rioux, N
   Huang, XJ
   Oliveira, BCDS
   Zdancewic, S
AF Rioux, Nick
   Huang, Xuejing
   Oliveira, Bruno C. D. S.
   Zdancewic, Steve
TI A Bowtie for a Beast
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE extensibility; polymorphism; type systems
ID INTERSECTION
AB The typed merge operator offers the promise of a compositional style of statically-typed programming in which solutions to the expression problem arise naturally. This approach, dubbed compositional programming, has recently been demonstrated by Zhang et al.
   Unfortunately, the merge operator is an unwieldy beast. Merging values from overlapping types may be ambiguous, so disjointness relations have been introduced to rule out undesired nondeterminism and obtain a well-behaved semantics. Past type systems using a disjoint merge operator rely on intersection types, but extending such systems to include union types or overloaded functions is problematic: naively adding either reintroduces ambiguity. In a nutshell: the elimination forms of unions and overloaded functions require values to be distinguishable by case analysis, but the merge operator can create exotic values that violate that requirement.
   This paper presents Fsec a core language that demonstrates how unions, intersections, and overloading can all coexist with a tame merge operator. The key is an underlying design principle that states that any two inhabited types can support either the deterministic merging of their values, or the ability to distinguish their values, but never both. To realize this invariant, we decompose previously studied notions of disjointness into two new, dual relations that permit the operation that best suits each pair of types. This duality respects the polarization of the type structure, yielding an expressive language that we prove to be both type safe and deterministic.
C1 [Rioux, Nick; Zdancewic, Steve] Univ Penn, Philadelphia, PA 19104 USA.
   [Huang, Xuejing; Oliveira, Bruno C. D. S.] Univ Hong Kong, Hong Kong, Peoples R China.
C3 University of Pennsylvania; University of Hong Kong
RP Rioux, N (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM nrioux@cis.upenn.edu; xjhuang@cs.hku.hk; bruno@cs.hku.hk;
   stevez@cis.upenn.edu
RI Zdancewic, Steve/JXL-6845-2024; dos Santos Oliveira, Bruno
   Cesar/I-7977-2013
FU Hong Kong Research Grants Council [17209519, 17209520, 17209821];
   National Science Foundation [1521539]; Office of Naval Research
   [N00014-17-12930]; NSF Graduate Research Fellowship [1845298]; Direct
   For Education and Human Resources; Division Of Graduate Education
   [1845298] Funding Source: National Science Foundation
FX This work has been partially funded by the Hong Kong Research Grants
   Council projects number 17209519, 17209520 and 17209821 and also
   supported by the National Science Foundation under grant number 1521539
   and the Office of Naval Research under grant number N00014-17-12930. The
   first author was supported by a NSF Graduate Research Fellowship under
   grant number 1845298. Any opinions, findings, and conclusions or
   recommendations expressed in this material are those of the authors and
   do not necessarily reflect the views of the NSF or the ONR.
CR Abel A, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2480359.2429075
   Andreoli J. M., 1992, Journal of Logic and Computation, V2, P297, DOI 10.1093/logcom/2.3.297
   [Anonymous], 2023, P ACM PROGRAM LANG, V7, P364
   [Anonymous], 1996, Algebra of Programming
   BARBANERA F, 1995, INFORM COMPUT, V119, P202, DOI 10.1006/inco.1995.1086
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Bi Xuan., 2018, EUROPEAN C OBJECT OR
   Bi Xuan., 2019, EUROPEAN S PROGRAMMI
   CARDELLI L, 1990, LECT NOTES COMPUT SC, V442, P22
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   CASTAGNA G, 1995, INFORM COMPUT, V117, P115, DOI 10.1006/inco.1995.1033
   Castagna G, 1997, THEOR COMPUT SCI, V176, P337, DOI 10.1016/S0304-3975(97)81497-1
   Castagna G, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498674
   Castagna G, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:15)2020
   Compagnoni A. B., 1996, Mathematical Structures in Computer Science, V6, P469
   COOK WR, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P125, DOI 10.1145/96709.96721
   Coppo M., 1978, Archiv fur Mathematische Logik und Grundlagenforschung, V19, P139, DOI 10.1007/BF02011875
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Davies R, 2000, ACM SIGPLAN NOTICES, V35, P198, DOI 10.1145/357766.351259
   Dunfield J, 2003, LECT NOTES COMPUT SC, V2620, P250
   Dunfield Jana, 2012, P 6 WORKSHOP INTERSE, V121, P35
   Dunfield J, 2014, J FUNCT PROGRAM, V24, P133, DOI 10.1017/S0956796813000270
   Ernst Erik., 2001, EUROPEAN C OBJECTORI
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Hosoya Haruo, 2003, ACM T INTERNET TECHN, V3, DOI DOI 10.1145/767193.767195
   Huang XJ, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000186
   Huang Xuejing., 2021, P ACM PROGRAMMING LA, V5, P1
   Igarashi A., 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P1435, DOI 10.1145/1141277.1141610
   King Gavin, 2013, CEYLON LANGUAGE SPEC
   MacQueen D., 1984, PRINCIPLES PROGRAMMI, P165, DOI DOI 10.1145/800017.800528
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Odersky M., 2004, An overview of the Scala programming language
   Oliveira Bruno C. d. S., 2012, EUROPEAN C OBJECTORI
   Oliveira Bruno C. d. S., 2016, P 21 ACM SIGPLAN INT
   Orchard D, 2010, LECT NOTES COMPUT SC, V6009, P56, DOI 10.1007/978-3-642-12251-4_6
   Pierce Benjamin C, 1991, PROGRAMMING INTERSEC
   Pierce Benjamin C, 1991, CMUCS91205
   Pottinger Garrel, 1980, ESSAYS COMBINATORY L, P561
   Rehman Baber, 2022, LIPICS, V222
   Reynolds John C., 1997, Design of the Programming Language Forsythe, P173, DOI DOI 10.1007/978-1-4612-4118-8_9
   Reynolds John C., 1988, Tech Report, CMU-CS-88-159
   Rioux Nick, 2022, MSCIS2202 U PENNS
   Rioux Nick, 2022, BOWTIE BEAST, DOI [10.5281/zenodo.7409103, DOI 10.5281/ZENODO.7409103]
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   van Bakel Steffen, 2000, TRARP052000 AUSTR NA
   Wadler P., 1998, JAVA GENERICITY MAIL
   WAND M, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P92
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Zeilberger N, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P359, DOI 10.1145/1328438.1328482
   Zhang WX, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3460228
   Zhiwu Xu, 2013, THESIS U PARIS DIDER
NR 53
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571211
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500018
OA gold
DA 2024-07-18
ER

PT J
AU Bianchini, R
   Dagnino, F
   Giannini, P
   Zucca, E
   Servetto, M
AF Bianchini, Riccardo
   Dagnino, Francesco
   Giannini, Paola
   Zucca, Elena
   Servetto, Marco
TI Coeffects for Sharing and Mutation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE coeffect systems; sharing; Java
ID UNIQUENESS
AB In type-and-coeffect systems, contexts are enriched by coeffects modeling how they are actually used, typically through annotations on single variables. Coeffects are computed bottom-up, combining, for each term, the coeffects of its subterms, through a fixed set of algebraic operators. We show that this principled approach can be adopted to track sharing in the imperative paradigm, that is, links among variables possibly introduced by the execution. This provides a significant example of non-structural coeffects, which cannot be computed by-variable, since the way a given variable is used can affect the coeffects of other variables. To illustrate the effectiveness of the approach, we enhance the type system tracking sharing to model a sophisticated set of features related to uniqueness and immutability. Thanks to the coeffect-based approach, we can express such features in a simple way and prove related properties with standard techniques.
C1 [Bianchini, Riccardo; Dagnino, Francesco; Zucca, Elena] Univ Genoa, DIBRIS, Genoa, Italy.
   [Giannini, Paola] Univ Piemonte Orientale, DiSSTE, Vercelli, Italy.
   [Servetto, Marco] Victoria Univ Wellington, ECS, Victoria, New Zealand.
C3 University of Genoa; University of Eastern Piedmont Amedeo Avogadro;
   Victoria University Wellington
RP Bianchini, R (corresponding author), Univ Genoa, DIBRIS, Genoa, Italy.
EM riccardo.bianchini@edu.unige.it; dagnino@dibris.unige.it;
   paola.giannini@uniupo.it; elena.zucca@unige.it; marco.servetto@vuw.ac.nz
OI Bianchini, Riccardo/0000-0003-0491-7652
FU MUR project lT-LADIESz [PRIN 2020TL3X8X]; Universita del Piemonte
   Orientale
FX The authorswould like to thank the anonymous referees who provided
   useful and detailed comments on a previous version of the paper. We also
   thank NicholasWebster for help with the Pony examples, and Peter Neuss
   for proofreading the paper. This work was partially funded by the MUR
   project lT-LADIESz (PRIN 2020TL3X8X) and has the financial support of
   the Universita del Piemonte Orientale.
CR Abel A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408972
   Almeida PS, 1997, LECT NOTES COMPUT SC, V1241, P32, DOI 10.1007/BFb0053373
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Bianchini Riccardo, 2022, arXiv, DOI [10.48550/arXiv.2209.07439, DOI 10.48550/ARXIV.2209.07439]
   Bianchini Riccardo, 2022, ICTCS 22 IT C THEOR
   Boyland JT, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1749608.1749611
   Breuvart Flavien, 2015, 24 EACSL ANN C COMP, V41, P567, DOI DOI 10.4230/LIPICS.CSL.2015.567
   Brunel A, 2014, LECT NOTES COMPUT SC, V8410, P351
   Castegren Elias, 2016, LIPICS, V5
   Choudhury P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434331
   Clarke D, 2003, LECT NOTES COMPUT SC, V2743, P176
   Clebsch S., 2015, P 5 INT WORKSHOP PRO, P1, DOI DOI 10.1145/2824815.2824816
   Clebsch S., 2017, Ph.D. thesis,
   Dal Lago U, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498692
   Dietl W, 2007, LECT NOTES COMPUT SC, V4609, P28
   Gaboardi M, 2016, ACM SIGPLAN NOTICES, V51, P476, DOI 10.1145/3022670.2951939
   Ghica DR, 2014, LECT NOTES COMPUT SC, V8410, P331
   Giannini P, 2019, THEOR COMPUT SCI, V764, P145, DOI 10.1016/j.tcs.2018.09.001
   Giannini P, 2019, SCI COMPUT PROGRAM, V172, P180, DOI 10.1016/j.scico.2018.11.007
   Gordon C S., 2020, 34th European Conference on Object-Oriented Programming, ECOOP 2020, November 15-17, 2020, Berlin, Germany (Virtual Conference), V166, p10:1, DOI DOI 10.4230/LIPICS.ECOOP.2020.10
   Gordon CS, 2012, ACM SIGPLAN NOTICES, V47, P21, DOI 10.1145/2398857.2384619
   Haller P, 2010, LECT NOTES COMPUT SC, V6183, P354
   HOGG J, 1991, SIGPLAN NOTICES, V26, P271
   Igarashi A, 1999, ACM SIGPLAN NOTICES, V34, P132, DOI 10.1145/320385.320395
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Marshall D, 2022, LECT NOTES COMPUT SC, V13240, P346, DOI 10.1007/978-3-030-99336-8_13
   McBride Conor, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P207, DOI 10.1007/978-3-319-30936-1_12
   Milano Mae, 2022, A Flexible Type System for Fearless Concurrency
   Müller P, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P461
   Orchard D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341714
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Petricek T, 2013, LECT NOTES COMPUT SC, V7966, P385, DOI 10.1007/978-3-642-39212-2_35
   Servetto Marco, 2013, WODET 2014 WORKSH DE
   Wood J, 2022, LECT NOTES COMPUT SC, V13240, P376, DOI 10.1007/978-3-030-99336-8_14
NR 34
TC 3
Z9 3
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 156
DI 10.1145/3563319
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200033
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Zou, D
   Gu, Y
   Shi, Y
   Wang, M
   Xiong, Y
   Su, Z
AF Zou, Daming
   Gu, Yuchen
   Shi, Yuanfeng
   Wang, Mingzhe
   Xiong, Yingfei
   Su, Zhendong
TI Oracle-Free Repair Synthesis for Floating-Point Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE floating-point error; micro-structure; program repair; dynamic analysis
ID ERROR ANALYSIS
AB The floating-point representation provides widely-used data types (such as "float" and "double") for modern numerical software. Numerical errors are inherent due to floating-point's approximate nature, and pose an important, well-known challenge. It is nontrivial to fix/repair numerical code to reduce numerical errors - it requires either numerical expertise (for manual fixing) or high-precision oracles (for automatic repair); both are difficult requirements. To tackle this challenge, this paper introduces a principled dynamic approach that is fully automated and oracle-free for effectively repairing floating-point errors. The key of our approach is the novel notion of micro-structure that characterizes structural patterns of floating-point errors. We leverage micro-structures' statistical information on floating-point errors to effectively guide repair synthesis and validation. Compared with existing state-of-the-art repair approaches, our work is fully automatic and has the distinctive benefit of not relying on the difficult to obtain high-precision oracles. Evaluation results on 36 commonly-used numerical programs show that our approach is highly efficient and effective: (1) it is able to synthesize repairs instantaneously, and (2) versus the original programs, the repaired programs have orders of magnitude smaller floating-point errors, while having faster runtime performance.
C1 [Zou, Daming; Su, Zhendong] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
   [Gu, Yuchen; Shi, Yuanfeng; Xiong, Yingfei] Peking Univ, Sch Comp Sci, Beijing, Peoples R China.
   [Wang, Mingzhe] Princeton Univ, Dept Comp Sci, Princeton, NJ USA.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; Peking
   University; Princeton University
RP Zou, D (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
EM daming.zou@inf.ethz.ch; llgyc@pku.edu.cn; saigyouji17@pku.edu.cn;
   mingzhew@cs.princeton.edu; xiongyf@pku.edu.cn; zhendong.su@inf.ethz.ch
OI Su, Zhendong/0000-0002-2970-1391
CR Abramowitz M., 1964, Handbook of mathematical functions with formulas, graphs, and mathematical tables, V55, DOI DOI 10.1119/1.15378
   [Anonymous], 1990, Cox and Hammarling [CH90]
   [Anonymous], 1996, ARIANE 5, Flight 501 Failure
   Babuska Ivo., 1968, IFIP Congress, P11
   Bao T, 2013, ACM SIGPLAN NOTICES, V48, P817, DOI [10.1145/2509136.2509526, 10.1145/2544173.2509526]
   Benz F, 2012, ACM SIGPLAN NOTICES, V47, P453, DOI 10.1145/2345156.2254118
   BROUCKE R, 1973, COMMUN ACM, V16, P254, DOI 10.1145/362003.362037
   Burden R. L., 2015, Cengage Learning
   Chiang WF, 2014, ACM SIGPLAN NOTICES, V49, P43, DOI [10.1145/2692916.2555265, 10.1145/2555243.2555265]
   Chowdhary S, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P615, DOI 10.1145/3468264.3468585
   Chowdhary S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P731, DOI 10.1145/3385412.3386004
   Clenshaw C.W., 1962, National Physical Laboratory Mathematical Tables, V5
   Corless RM, 1996, ADV COMPUT MATH, V5, P329, DOI 10.1007/BF02124750
   Damouche Nasrine, 2017, Kalpa Publications in Computing, V5, P63, DOI DOI 10.29007/J2FD
   Datta BN, 2010, NUMERICAL LINEAR ALGEBRA AND APPLICATIONS, SECOND EDITION, P1, DOI 10.1137/1.9780898717655
   Dekking F. M., 2005, A modern introduction to probability and statistics: Understanding why and how, DOI 10.1007/1-84628-168-7
   Dutta S, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P574, DOI 10.1145/3236024.3236057
   Eaton Morris L, 1983, Technical Report
   Epperson J. F., 2013, INTRO NUMERICAL METH
   Fousse L, 2007, ACM T MATH SOFTWARE, V33, DOI 10.1145/1236463.1236468
   Fu ZL, 2015, ACM SIGPLAN NOTICES, V50, P639, DOI [10.1145/2814270.2814317, 10.1145/2858965.2814317]
   Fukushima T, 2013, J COMPUT APPL MATH, V244, P77, DOI 10.1016/j.cam.2012.11.021
   Gil A, 2007, NUMERICAL METHODS FOR SPECIAL FUNCTIONS, P1, DOI 10.1137/1.9780898717822
   Guo H, 2020, PROC INT CONF SOFTW, P1261, DOI 10.1145/3377811.3380359
   Hamming R. W., 2012, Numerical Methods for Scientists and Engineers
   Higham NJ, 2019, SIAM J SCI COMPUT, V41, pA2815, DOI 10.1137/18M1226312
   Hildebrand F.B., 1987, Introduction to numerical analysis courier corporation
   Pham HV, 2019, PROC INT CONF SOFTW, P1027, DOI 10.1109/ICSE.2019.00107
   KAHAN W, 1965, COMMUN ACM, V8, P40, DOI 10.1145/363707.363723
   Kahan William, 2004, A Logarithm Too Clever by Half
   Larsson Peter, 2013, Exploring Quadruple Precision Floating Point Numbers in GCC and ICC
   Lim JP, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P359, DOI 10.1145/3453483.3454049
   Lim JP, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434310
   Lim JayP., 2021, RLIBM-ALL: A Novel Polynomial Approximation Method to Produce Correctly Rounded Results for Multiple Representations and Rounding Modes
   Mason J. C., 2003, CHEBYSHEV POLYNOMIAL
   Mendenhall William, 2012, INTRO PROBABILITY ST
   Muller Jean-Michel, 2005, Ph. D. Dissertation
   MULLER KH, 1983, COMPUTING, V30, P285, DOI 10.1007/BF02242136
   Nethercote N, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P89, DOI 10.1145/1250734.1250746
   NEWBERY ACR, 1974, MATH COMPUT, V28, P789, DOI 10.1090/S0025-5718-1974-0373227-8
   Oliver J, 1979, J COMPUT APPL MATH, V5, P85, DOI DOI 10.1016/0771-050X(79)90002-0(PAGE72
   Panchekha P, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI 10.1145/2737924.2737959
   Rudin W., 1976, PRINCIPLES MATH ANAL
   Ryan Thomas P, 2008, Modern regression methods, V655
   Sanchez-Stern A, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P256, DOI [10.1145/3192366.3192411, 10.1145/3296979.3192411]
   Skeel Robert., 1992, SIAM NEWS, V25, P11
   Solovyev A, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3230733
   Tienari M., 1970, BIT (Nordisk Tidskrift for Informationsbehandling), V10, P355, DOI 10.1007/BF01934204
   Valdes-Dapena Peter, 2010, Toyota: Software to blame for Prius brake problems
   Vanover Jackson, 2020, ISSTA '20: Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis, P488, DOI 10.1145/3395363.3397380
   Wang R, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P619, DOI 10.1145/2950290.2950355
   Wang X, 2019, PROC INT CONF SOFTW, P1131, DOI 10.1109/ICSE.2019.00116
   Yi X, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290369
   Yi X, 2017, ASIA PAC SOFWR ENG, P11, DOI 10.1109/APSEC.2017.7
   Zou DM, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371128
   Zou DM, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P529, DOI 10.1109/ICSE.2015.70
   Zuras D., 2008, 7542008 IEEE, V754-2008, P1, DOI [DOI 10.1109/IEEESTD.2008.4610935, DOI 10.1109/IEEESTD.2008.5976968]
NR 57
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 159
DI 10.1145/3563322
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200036
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Keuchel, S
   Huyghebaert, S
   Lukyanov, G
   Devriese, D
AF Keuchel, Steven
   Huyghebaert, Sander
   Lukyanov, Georgy
   Devriese, Dominique
TI Verified Symbolic Execution with Kripke Specification Monads (and No
   Meta-programming)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program verification; symbolic execution; predicate transformers;
   separation logic; refinement; logical relations
ID VERIFICATION
AB Verifying soundness of symbolic execution-based program verifiers is a significant challenge. This is especially true if the resulting tool needs to be usable outside of the proof assistant, in which case we cannot rely on shallowly embedded assertion logics and meta-programming. The tool needs to manipulate deeply embedded assertions, and it is crucial for efficiency to eagerly prune unreachable paths and simplify intermediate assertions in a way that can be justified towards the soundness proof. Only a few such tools exist in the literature, and their soundness proofs are intricate and hard to generalize or reuse. We contribute a novel, systematic approach for the construction and soundness proof of such a symbolic execution-based verifier. We first implement a shallow verification condition generator as an object language interpreter in a specification monad, using an abstract interface featuring angelic and demonic nondeterminism. Next, we build a symbolic executor by implementing a similar interpreter, in a symbolic specification monad. This symbolic monad lives in a universe that is Kripke-indexed by variables in scope and a path condition. Finally, we reduce the soundness of the symbolic execution to the soundness of the shallow execution by relating both executors using a Kripke logical relation. We report on the practical application of these techniques in KATAMARAN, a tool for verifying security guarantees offered by instruction set architectures (ISAs). The tool is fully verified by combining our symbolic execution machinery with a soundness proof of the shallow verification conditions against an axiomatized separation logic, and an Iris-based implementation of the axioms, proven sound against the operational semantics. Based on our experience with KATAMARAN, we can report good results on practicality and efficiency of the tool, demonstrating practical viability of our symbolic execution approach.
C1 [Keuchel, Steven; Huyghebaert, Sander] Vrije Univ Brussel, Brussels, Belgium.
   [Lukyanov, Georgy] Newcastle Univ, Newcastle Upon Tyne, Tyne & Wear, England.
   [Devriese, Dominique] Katholieke Univ Leuven, Leuven, Belgium.
C3 Vrije Universiteit Brussel; Newcastle University - UK; KU Leuven
RP Keuchel, S (corresponding author), Vrije Univ Brussel, Brussels, Belgium.
EM steven.keuchel@vub.be; sander.huyghebaert@vub.be; mail@geo2a.info;
   dominique.devriese@kuleuven.be
RI Devriese, Dominique/C-5493-2014
OI Devriese, Dominique/0000-0002-3862-6856; Huyghebaert,
   Sander/0000-0002-2878-7429; Keuchel, Steven/0000-0001-6411-438X
FU Research Foundation - Flanders (FWO); Flemish Research Programme
   Cybersecurity; European Research Council (ERC) - European Union
FX We would like to thank Thomas Van Strydonck and the anonymous reviewers
   for their invaluable comments on an earlier draft of this paper. This
   work was supported in part by the Research Foundation -Flanders (FWO),
   by the Flemish Research Programme Cybersecurity and by a European
   Research Council (ERC) Starting Grant for the project
   "UniversalContractsz, funded by the European Union. Views and opinions
   expressed are, however, those of the author(s) only and do not
   necessarily reflect those of the European Union or the European Research
   Council. Neither the European Union nor the European Research Council
   can be held responsible for them.
CR Abadi M., 1991, Journal of Functional Programming, V1, P375, DOI 10.1017/S0956796800000186
   Ahman D, 2017, ACM SIGPLAN NOTICES, V52, P515, DOI 10.1145/3093333.3009878
   Ahrendt Wolfgang, 2014, Verified Software: Theories, Tools and Experiments. 6th International Conference, VSTTE 2014. Revised Selected Papers: LNCS 8471, P55, DOI 10.1007/978-3-319-12154-3_4
   Altenkirch T, 1999, LECT NOTES COMPUT SC, V1683, P453
   Altenkirch Thorsten, 2003, GENERIC PROGRAMMING, DOI [10.1007/978-0-387-35672-3_1, DOI 10.1007/978-0-387-35672-3_1]
   [Anonymous], 1994, PRENTICE HALL INT SE
   [Anonymous], 2008, P OSDI
   [Anonymous], 2008, P 23 ACM SIGPLAN C O, DOI DOI 10.1145/1449764.1449782
   Appel Andrew W., 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P231
   Armstrong A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290384
   Baader Franz, 2001, Handbook of Automated Reasoning, P445, DOI DOI 10.1016/B978-044450813-3/50010-2
   Back R.-J., 1999, REFINEMENT CALCULUS, DOI [10.1007/978-1-4612-1674-2, DOI 10.1007/978-1-4612-1674-2]
   Baldoni R, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3182657
   Barendregt H, 2002, J AUTOM REASONING, V28, P321, DOI 10.1023/A:1015761529444
   Beeson M, 2016, J FORMALIZ REASON, V9, P71
   Benton N, 2012, J AUTOM REASONING, V49, P141, DOI 10.1007/s10817-011-9219-0
   Berdine J, 2005, LECT NOTES COMPUT SC, V3780, P52
   Berdine J, 2004, LECT NOTES COMPUT SC, V3328, P97
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Blackburn P., 2001, Modal Logic, V53
   Boutin S., 1997, Theoretical Aspects of Computer Software. Third International Symposium, TACS '97. Proceedings, P515, DOI 10.1007/BFb0014565
   Cao QX, 2018, J AUTOM REASONING, V61, P367, DOI 10.1007/s10817-018-9457-5
   Charguéraud A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408998
   Charguéraud A, 2011, ACM SIGPLAN NOTICES, V46, P418, DOI 10.1145/2034574.2034828
   Charguéraud A, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P321
   Chlipala A, 2011, ACM SIGPLAN NOTICES, V46, P234, DOI 10.1145/1993316.1993526
   Chlipala A, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P79
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   Devriese D, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '19), P1, DOI 10.1145/3331545.3342589
   Devriese D, 2016, 1ST IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY, P147, DOI 10.1109/EuroSP.2016.22
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Dodds Josiah, 2013, CERTIFIED PROGRAMS P, DOI [10.1007/978-3-319-03545-1_2, DOI 10.1007/978-3-319-03545-1_2]
   Filliâtre JC, 2007, LECT NOTES COMPUT SC, V4590, P173
   Flanagan C, 2001, ACM SIGPLAN NOTICES, V36, P193, DOI 10.1145/373243.360220
   Georges AL, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434287
   Gotsman A, 2009, ACM SIGPLAN NOTICES, V44, P16, DOI 10.1145/1594834.1480886
   Hendriks Dimitri., 2003, Automated Deduction - CADE-19, volume 2741 of Lecture Notes in Computer Science, V2741, P136, DOI [10.1007/978-3-540-45085-6_11, DOI 10.1007/978-3-540-45085-6_11]
   Hinze M, 2000, THESIS
   Hinze Ralf, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P324, DOI 10.1007/978-3-642-31113-0_16
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Hutton G, 2010, J FUNCT PROGRAM, V20, P353, DOI 10.1017/S0956796810000122
   Huyghebaert Sander, 2022, MINIMALCAPS CASE STU
   Jacobs Bart, 2014, Coalgebraic Methods in Computer Science. 12th IFIP WG 1.3 International Workshop (CMCS 2014), Colocated with ETAPS 2014. Revised Selected Papers. LNCS: 8446, P135, DOI 10.1007/978-3-662-44124-4_8
   Jacobs B, 2010, LECT NOTES COMPUT SC, V6461, P304, DOI 10.1007/978-3-642-17164-2_21
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Keuchel Steven, 2022, Zenodo, DOI 10.5281/ZENODO.6865817
   Keuchel Steven, 2022, KATAMARAN DEV REPOSI
   Kirchner F, 2015, FORM ASP COMPUT, V27, P573, DOI 10.1007/s00165-014-0326-7
   Klebanov V., 2011, LNCS, V6664, P154, DOI [10.1007/978-3-642-21437-0_14, DOI 10.1007/978-3-642-21437-0_14]
   Kobayashi S, 1997, THEOR COMPUT SCI, V175, P29, DOI 10.1016/S0304-3975(96)00169-7
   Krebbers R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236772
   Leino KRM, 2009, LECT NOTES COMPUT SC, V5705, P195, DOI 10.1007/978-3-642-03829-7_7
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Maillard K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341708
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   MORGAN C, 1988, ACM T PROGR LANG SYS, V10, P403, DOI 10.1145/44501.44503
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   NELSON G, 1989, ACM T PROGR LANG SYS, V11, P517, DOI 10.1145/69558.69559
   Nielson H. R., 2007, SER UNDERGRADUATE TO, DOI [10.1007/978-1-84628-692-6, DOI 10.1007/978-1-84628-692-6]
   O'Hearn PW, 2004, ACM SIGPLAN NOTICES, V39, P268, DOI [10.1145/982962.964024, 10.1145/1498926.1498929]
   Parthasarathy G, 2021, LECT NOTES COMPUT SC, V12760, P704, DOI 10.1007/978-3-030-81688-9_33
   Poulsen CB, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158104
   Reynolds J.C., 2000, MILLENNIAL PERSPECTI
   Rustan K, 2005, INFORM PROCESS LETT, V93, P281, DOI 10.1016/j.ipl.2004.10.015
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Simpson A., 1994, The proof theory and semantics of intuitionistic modal logic
   Sozeau M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341690
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   Swasey D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133913
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Tuerk T, 2009, LECT NOTES COMPUT SC, V5674, P469, DOI 10.1007/978-3-642-03359-9_32
   Van Strydonck T, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341688
   Visser Willem, 2012, P FSE, DOI DOI 10.1145/2393596.2393665
   Vogels F, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(3:19)2015
   Vogels Frederic, 2010, P 2010 ACM S APPL CO, P2517, DOI [10.1145/1774088.1774610, DOI 10.1145/1774088.1774610]
   Vogels Frederic, 2009, SOFSEM 2009 THEORY P, DOI [10.1007/978-3-540-95891-8_51, DOI 10.1007/978-3-540-95891-8_51]
   Voigtländer J, 2008, LECT NOTES COMPUT SC, V5133, P388
NR 78
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 97
DI 10.1145/3547628
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000008
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Ko, HS
   Chen, LT
   Lin, TC
AF Ko, Hsiang-Shang
   Chen, Liang-Ting
   Lin, Tzu-Chi
TI Datatype-Generic Programming Meets Elaborator Reflection
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE datatype-generic programming; dependently typed programming; inductive
   families; universe polymorphism; elaborator reflection; metaprogramming
AB Datatype-generic programming is natural and useful in dependently typed languages such as Agda. However, datatype-generic libraries in Agda are not reused as much as they should be, because traditionally they work only on datatypes decoded from a library's own version of datatype descriptions; this means that different generic libraries cannot be used together, and they do not work on native datatypes, which are preferred by the practical Agda programmer for better language support and access to other libraries. Based on elaborator reflection, we present a framework in Agda featuring a set of general metaprograms for instantiating datatype-generic programs as, and for, a useful range of native datatypes and functions - including universe-polymorphic ones - in programmer-friendly and customisable forms. We expect that datatype-generic libraries built with our framework will be more attractive to the practical Agda programmer. As the elaborator reflection features used by our framework become more widespread, our design can be ported to other languages too.
C1 [Ko, Hsiang-Shang; Chen, Liang-Ting; Lin, Tzu-Chi] Acad Sinica, Inst Informat Sci, 128 Acad Rd,Sect 2, Taipei 115201, Taiwan.
C3 Academia Sinica - Taiwan
RP Ko, HS (corresponding author), Acad Sinica, Inst Informat Sci, 128 Acad Rd,Sect 2, Taipei 115201, Taiwan.
EM joshko@iis.sinica.edu.tw; liang.ting.chen.tw@gmail.com;
   vik@iis.sinica.edu.tw
RI Ko, Hsiang-Shang/ABA-7755-2020
OI Ko, Hsiang-Shang/0000-0002-2439-1048; Lin, Tzu-Chi/0000-0002-7656-6225;
   Chen, Liang-Ting/0000-0002-3250-1331
FU Ministry of Science and Technology of Taiwan [MOST
   109-2222-E-001-002-MY3]
FX We thank the anonymous reviewers and shepherd for their great help in
   improving the presentation of this paper. The work is supported by the
   Ministry of Science and Technology of Taiwan under grant MOST
   109-2222-E-001-002-MY3.
CR Abou-Saleh Faris, 2018, Lecture Notes in Computer Science, V9715, P1, DOI [10.1007/978-3-319-79108-1_1, DOI 10.1007/978-3-319-79108-1_1]
   Agda Issue, 2022, LOSS SUBJECT REDUCTI
   Alimarine A, 2004, LECT NOTES COMPUT SC, V3125, P16
   Allais G, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796820000076
   Alon U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290353
   Altenkirch T, 2003, INT FED INFO PROC, V115, P1
   Altenkirch T, 2007, LECT NOTES COMPUT SC, V4719, P209
   [Anonymous], 1993, Prentice Hall international series in computer science
   Benke M., 2003, Nordic Journal of Computing, V10, P265
   Bird Richard, 1997, Algebra of Programming
   Brady E., 2017, Type-Driven Development with Idris
   Chapman J, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P3
   Christiansen D, 2016, ACM SIGPLAN NOTICES, V51, P284, DOI 10.1145/3022670.2951932
   Cockx J, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796819000182
   Cockx J, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000174
   Dagand PE, 2014, J FUNCT PROGRAM, V24, P316, DOI 10.1017/S0956796814000069
   de Vries Edsko, 2014, P 10 ACM SIGPLAN WOR, P83, DOI [10.1145/2633628.2633634, DOI 10.1145/2633628.2633634]
   de Vries Martijn, 2004, THESIS U GRONINGEN
   DEBRUIJN NG, 1991, INFORM COMPUT, V91, P189, DOI 10.1016/0890-5401(91)90066-B
   Devriese D, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Diehl Larry, 2016, WORKSHOP TYPE DRIVEN, P1, DOI [10.1145/2976022.2976031, DOI 10.1145/2976022.2976031]
   Dybjer P, 2006, J LOGIC ALGEBR PROGR, V66, P1, DOI 10.1016/j.jlap.2005.07.001
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   Filinski A, 1999, LECT NOTES COMPUT SC, V1702, P378
   Gibbons J, 2007, LECT NOTES COMPUT SC, V4719, P1
   Kaposi A, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:10)2020
   Ko HS, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000307
   Ko Hsiang-Shang, 2022, DATATYPE GENERIC PRO, DOI [10.5281/zenodo.6954977, DOI 10.5281/ZENODO.6954977]
   Ko Hsiang-Shang, ART SCI ENG PROGRAM, V5, P1, DOI [10.22152/programmingjournal.org/2021/5/7, DOI 10.22152/PROGRAMMINGJOURNAL.ORG/2021/5/7]
   Ko Hsiang-Shang, 2013, PROGR INFORM, V10, P65, DOI [10.2201/NiiPi.2013.10.5, DOI 10.2201/NIIPI.2013.10.5]
   Kovacs Andras, 2022, 30 EACSL ANN C COMPU, V28, P1
   Loh Andres, 2004, THESIS UTRECHT U
   Magalhaes Jose Pedro, 2013, Implementation and Application of Functional Languages. 24th International Symposium, IFL 2012. Revised Selected Papers: LNCS 8241, P104, DOI 10.1007/978-3-642-41582-1_7
   Magalhaes Jose Pedro, 2014, Practical Aspects of Declarative Languages. 16th International Symposium, PADL 2014. Proceedings: LNCS 8324, P216, DOI 10.1007/978-3-319-04132-2_15
   Magalhaes Jose Pedro, 2012, THESIS UTRECHT U
   Martin-Lof P., 1984, NOTES G SAMBIN SERIE
   Martin-Lof P., 1975, STUDIES LOGIC FDN MA, V80, P73
   McBride C, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P297, DOI 10.1145/2628136.2628163
   McBride Conor, 2011, Ornamental algebras, algebraic ornaments
   Nanevski A, 2005, J FUNCT PROGRAM, V15, P893, DOI 10.1017/S095679680500568X
   Nordvall Forsberg F., 2013, Ph.D. thesis
   Pickering Matthew, 2020, Haskell '20. Proceedings of the 13th ACM SIGPLAN International Symposium on Haskell, P122, DOI 10.1145/3406088.3409021
   Pickering M, 2016, ACM SIGPLAN NOTICES, V51, P80, DOI 10.1145/3241625.2976013
   Ringer Talia., 10 INT C INTERACTIVE, V141, p26:1, DOI [DOI 10.4230/LIPICS.ITP.2019.26, 10.4230/LIPIcs.ITP.2019.26]
   Schurmann Carsten, 2005, LECT NOTES COMPUTER, V3461, DOI [10.1007/11417170_2, DOI 10.1007/11417170_2]
   Sozeau Matthieu, 2014, Interactive Theorem Proving. 5th International Conference, ITP 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8558, P499, DOI 10.1007/978-3-319-08970-6_32
   Stump Aaron, 2016, VERIFIED FUNCTIONAL, DOI DOI 10.1145/2841316
   Wadler Philip, 2020, Programming Language Foundations in Agda
   Williams T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158109
   Yallop J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110273
   Yang Zhixuan, 2022, INT C MATH PROGRAM C
NR 51
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 98
DI 10.1145/3547629
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000009
OA gold
DA 2024-07-18
ER

PT J
AU Koppel, J
   Kearl, J
   Solar-Lezama, A
AF Koppel, James
   Kearl, Jackson
   Solar-Lezama, Armando
TI Automatically Deriving Control-Flow Graph Generators from Operational
   Semantics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE abstract machines; control flow; term rewriting
AB We develop the first theory of control-flow graphs from first principles, and use it to create an algorithm for automatically synthesizing many variants of control-flow graph generators from a language's operational semantics. Our approach first introduces a new algorithm for converting a large class of small-step operational semantics to an abstract machine. It next uses a technique called "abstract rewritingz to automatically abstract the semantics of a language, which is used both to directly generate a CFG from a program ("interpreted modez) and to generate standalone code, similar to a human-written CFG generator, for any program in a language. We show how the choice of two abstraction and projection parameters allow our approach to synthesize several families of CFG-generators useful for different kinds of tools. We prove the correspondence between the generated graphs and the original semantics. We provide and prove an algorithm for automatically proving the termination of interpreted-mode generators. In addition to our theoretical results, we have implemented this algorithm in a tool called Mandate, and show that it produces human-readable code on two medium-size languages with 60 - 80 rules, featuring nearly all intraprocedural control constructs common in modern languages. We then show these CFG-generators were sufficient to build two static analyses atop them. Our work is a promising step towards the grand vision of being able to synthesize all desired tools from the semantics of a programming language.
C1 [Koppel, James; Kearl, Jackson; Solar-Lezama, Armando] MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Koppel, J (corresponding author), MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
EM jkoppel@mit.edu; asolar@csail.mit.edu
OI Solar Lezama, Armando/0000-0001-7604-8252; Kearl,
   Jackson/0000-0003-0325-1836
FU US Air Force; DARPA [FA8750-20-C-0208]; AFRL/RIKE
FX This material is based upon work supported by the US Air Force,
   AFRL/RIKE and DARPA under Contract No. FA8750-20-C-0208. Any opinions,
   findings and conclusions or recommendations expressed in this material
   are those of the author(s) and do not necessarily reflect the views of
   the US Air Force, AFRL/RIKE or DARPA.
CR Ager Mads Sig, 2003, P 5 ACM SIGPLAN INT, P8
   [Anonymous], 1991, Ph.D. dissertation
   [Anonymous], 1998, Modern Compiler Implementation in C
   [Anonymous], 2015, Principles of program analysis
   Baader F., 1999, Term Rewriting and All that, P223
   Bert D., 1993, Static Analysis. Third International Workshop Proceedings, P178
   Bert Didier, 1995, LOGIC PROGRAMMING P, P162
   Bodin M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290357
   Bogdanas D, 2015, ACM SIGPLAN NOTICES, V50, P445, DOI [10.1145/2775051.2676982, 10.1145/2676726.2676982]
   Carbin Michael, 2018, MITSCRIPT LANG SPEC
   Cimini M, 2017, ACM SIGPLAN NOTICES, V52, P789, DOI 10.1145/3093333.3009863
   Cimini M, 2016, ACM SIGPLAN NOTICES, V51, P443, DOI 10.1145/2914770.2837632
   Click Clifford Noel, 1995, THESIS RICE U
   DANVY O, 2008, P 13 ACM SIGPLAN INT
   Danvy O., 2004, BRICS REP SER, V11
   Danvy O, 2012, THEOR COMPUT SCI, V435, P21, DOI 10.1016/j.tcs.2012.02.023
   Danvy O, 2010, J COMPUT SYST SCI, V76, P302, DOI 10.1016/j.jcss.2009.10.004
   Darais D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110256
   Darais D, 2015, ACM SIGPLAN NOTICES, V50, P552, DOI [10.1145/2814270.2814308, 10.1145/2858965.2814308]
   DERSHOWITZ N, 1987, J SYMB COMPUT, V3, P69, DOI 10.1016/S0747-7171(87)80022-6
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Hannan J., 1992, MATH STRUCT COMPUT S, V2, P415, DOI [DOI 10.1017/S0960129500001559, 10.1017/S0960129500001559]
   Hathhorn C, 2015, ACM SIGPLAN NOTICES, V50, P336, DOI [10.1145/2813885.2737979, 10.1145/2737924.2737979]
   Huizing C, 2010, LECT NOTES COMPUT SC, V5930, P66, DOI 10.1007/978-3-642-11512-7_5
   Hullot Jean-Marie., 1980, CADE, volume 87 of Lecture Notes in Computer Science, V87, P318
   Ibraheem Husain, 1997, ELECTRON NOTES THEOR, V10, P121, DOI DOI 10.1016/S1571-0661(05)80692-9
   Jagannathan S., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P393, DOI 10.1145/199448.199536
   Johnson JI, 2015, ACM SIGPLAN NOTICES, V50, P11, DOI 10.1145/2661088.2661098
   Johnson JI, 2013, ACM SIGPLAN NOTICES, V48, P443, DOI [10.1145/2544174.2500604, 10.1145/2500365.2500604]
   Jones N. D., 1981, Automata, Languages and Programming. Eighth Colloquium, P114
   Klein C, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P285
   Koppel James, 2018, Proceedings of the ACM on Programming Languages, V2, DOI 10.1145/3276492
   Koppel James, 2020, ARXIV
   Lakin Matthew R, 2007, S TRENDS FUNCTIONAL
   Lankford Dallas S, 1975, CANONICAL INFERENCE
   Lin Derrick, 2017, P COMPANION 2017 ACM, P55, DOI [10.1145/3135932, DOI 10.1145/3135932, 10.1145/3135932.3135941]
   Manolios Panagiotis, 2001, Ph.D. thesis
   MIDTGAARD J., 2009, P ACM INT C FUNCT PR, P287, DOI DOI 10.1145/1596550.1596592
   Midtgaard J, 2008, LECT NOTES COMPUT SC, V5079, P347
   Midtgaard J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187672
   Mulligan DP, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P175, DOI 10.1145/2628136.2628143
   Nystrom N, 2003, LECT NOTES COMPUT SC, V2622, P138
   Park D, 2015, ACM SIGPLAN NOTICES, V50, P346, DOI [10.1145/2813885.2737991, 10.1145/2737924.2737991]
   Pombrio J, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P812, DOI 10.1145/3192366.3192398
   Pombrio J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110288
   Poulsen CB, 2014, LECT NOTES COMPUT SC, V8410, P270
   Rocha C, 2017, J LOG ALGEBR METHODS, V86, P269, DOI 10.1016/j.jlamp.2016.10.001
   Rosu G, 2010, J LOGIC ALGEBR PROGR, V79, P397, DOI 10.1016/j.jlap.2010.03.012
   Sergey I, 2013, ACM SIGPLAN NOTICES, V48, P399, DOI 10.1145/2499370.2491979
   Sergey Ilya, 2011, P 11 WORKSHOP LANGUA, P2
   Szabó T, 2016, IEEE INT CONF AUTOM, P320, DOI 10.1145/2970276.2970298
   Van Horn D, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Vesely F, 2019, LECT NOTES COMPUT SC, V11423, P205, DOI 10.1007/978-3-030-17184-1_8
   Wei GN, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236800
   Yong Xiao, 2001, Higher-Order and Symbolic Computation, V14, P387, DOI 10.1023/A:1014408032446
   Zvayi C., 2006, THESIS U ZIMBABWE HA
NR 57
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 117
DI 10.1145/3547648
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000028
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Batz, K
   Gallus, A
   Kaminski, BL
   Katoen, JP
   Winkler, T
AF Batz, Kevin
   Gallus, Adrian
   Kaminski, Benjamin Lucien
   Katoen, Joost-Pieter
   Winkler, Tobias
TI Weighted Programming A Programming Paradigm for Specifying Mathematical
   Models
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE weighted programming; denotational semantics; weakest preconditions
AB We study weighted programming, a programming paradigm for specifying mathematical models. More specifically, the weighted programs we investigate are like usual imperative programs with two additional features: (1) nondeterministic branching and (2) weighting execution traces. Weights can be numbers but also other objects like words from an alphabet, polynomials, formal power series, or cardinal numbers. We argue that weighted programming as a paradigm can be used to specify mathematical models beyond probability distributions (as is done in probabilistic programming).
   We develop weakest-precondition- and weakest-liberal-precondition-style calculi a la Dijkstra for reasoning about mathematical models specified by weighted programs. We present several case studies. For instance, we use weighted programming to model the ski rental problem - an optimization problem. We model not only the optimization problem itself, but also the best deterministic online algorithm for solving this problem as weighted programs. By means of weakest-precondition-style reasoning, we can determine the competitive ratio of the online algorithm on source code level.
C1 [Batz, Kevin; Gallus, Adrian; Katoen, Joost-Pieter; Winkler, Tobias] Rhein Westfal TH Aachen, Aachen, Germany.
   [Kaminski, Benjamin Lucien] Saarland Univ, Saarland Informat Campus, Saarbrucken, Germany.
   [Kaminski, Benjamin Lucien] UCL, London, England.
C3 RWTH Aachen University; Saarland University; University of London;
   University College London
RP Batz, K (corresponding author), Rhein Westfal TH Aachen, Aachen, Germany.
EM kevin.batz@cs.rwth-aachen.de; adrian.gallus@rwth-aachen.de;
   b.karninski@ucl.ac.uk; katoen@cs.rwth-aachen.de;
   tobias.winkler@cs.rwth-aachen.de
RI ; Katoen, Joost-Pieter/O-3307-2018
OI Winkler, Tobias/0000-0003-1084-6408; Batz, Kevin/0000-0001-8705-2564;
   Katoen, Joost-Pieter/0000-0002-6143-1926; Kaminski, Benjamin
   Lucien/0000-0001-5185-2324
FU ERC AdG Frappant [787914]; RTG 2236 UnRAVeL - German Research Foundation
   [282652900]
FX This work was supported by the ERC AdG Frappant (787914)
   (https://cordis.europa.eu/project/id/787914) and RTG 2236 UnRAVeL
   (https://gepris.dfg.de/gepris/projekt/282652900) funded by the German
   Research Foundation. Part of this work was carried out at Schloss
   Dagstuhl s Leibniz Center for Informatics. We thank Lena Verscht and
   Linpeng Zhang for the fruitful discussions at Schloss Dagstuhl.
CR Aguirre A, 2020, ELECTRON NOTES THEOR, V352, P5, DOI 10.1016/j.entcs.2020.09.002
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Aminof B, 2009, PROCEEDINGS OF THE TWENTIETH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P835
   Aminof B, 2010, ACM T ALGORITHMS, V6, DOI 10.1145/1721837.1721844
   [Anonymous], 2013, ACM SIGPLAN NOTICES, V48, P101, DOI 10.1145/2500365.2500613
   [Anonymous], 1998, Online computation and competitive analysis
   [Anonymous], 1994, Handbook of logic in computer science
   Back R.-J., 1999, REFINEMENT CALCULUS, DOI [10.1007/978-1-4612-1674-2, DOI 10.1007/978-1-4612-1674-2]
   Bagnol Marc, 2014, THESIS AIX MARSEILLE
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Balkir E, 2020, 16TH INTERNATIONAL CONFERENCE ON PARSING TECHNOLOGIES AND IWPT 2020 SHARED TASK ON PARSING INTO ENHANCED UNIVERSAL DEPENDENCIES, P73
   Batz K, 2021, LECT NOTES COMPUT SC, V12760, P524, DOI 10.1007/978-3-030-81688-9_25
   Batz K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290347
   Batz Kevin, 2022, ABS220207577 CORR, DOI [10.48550/arXiv.2202.07577, DOI 10.48550/ARXIV.2202.07577]
   Belle V, 2020, INT J APPROX REASON, V126, P181, DOI 10.1016/j.ijar.2020.08.001
   Bistarelli S, 1997, INT JOINT CONF ARTIF, P352
   Brunel A, 2014, LECT NOTES COMPUT SC, V8410, P351
   Carbonneaux Q, 2015, ACM SIGPLAN NOTICES, V50, P467, DOI [10.1145/2813885.2737955, 10.1145/2737924.2737955]
   Carbonneaux Quentin, 2018, THESIS YALE U
   Cohen SB, 2008, LECT NOTES COMPUT SC, V5366, P114, DOI 10.1007/978-3-540-89982-2_18
   Dannert Katrin M., 2019, CORRABS191007910, DOI [10.48550/arXiv.1910.07910, DOI 10.48550/ARXIV.1910.07910]
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Droste Manfred, 2009, HDB WEIGHTED AUTOMAT, V1st, DOI DOI 10.1007/978-3-642-01492-5
   Fiat A., 1998, ONLINE ALGORITHMS ST, DOI [10.1007/BFb0029561, DOI 10.1007/BFB0029561]
   Gaboardi M, 2021, LECT NOTES COMPUT SC, V12648, P234, DOI 10.1007/978-3-030-72019-3_9
   Gavalec M, 2015, FUZZY SET SYST, V276, P131, DOI 10.1016/j.fss.2014.11.008
   Gerla Brunella, 2003, NEURAL NETW WORLD, V13
   Ghica DR, 2014, LECT NOTES COMPUT SC, V8410, P331
   Gomes L, 2019, SCI ANN COMPUT SCI, V29, P141, DOI 10.7561/SACS.2019.2.141
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Hino W, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P682, DOI 10.1145/2933575.2935319
   HOARE CAR, 1978, J ACM, V25, P461, DOI 10.1145/322077.322088
   Horen J., 1985, Networks, V15, P273, DOI DOI 10.1002/NET.3230150211
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Jones C., 1990, THESIS U EDINBURGH
   Kaminski Benjamin Lucien, 2019, THESIS RWTH AACHEN U, DOI [10.18154/RWTH-2019-01829, DOI 10.18154/RWTH-2019-01829]
   Keimel K, 2015, ELECTRON NOTES THEOR, V319, P255, DOI 10.1016/j.entcs.2015.12.016
   Komm D., 2016, An Introduction to Online Computation, DOI [10.1007/978-3-319-42749-2, DOI 10.1007/978-3-319-42749-2]
   Kozen D., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P167, DOI 10.1109/LICS.1999.782610
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Kozen Dexter, 2000, ACM Trans. Comput. Log., V1, P60, DOI DOI 10.1145/343369.343378
   Laird J, 2013, IEEE S LOG, P301, DOI 10.1109/LICS.2013.36
   Lofb J., 2004, P CACSD C, P284, DOI DOI 10.1109/CACSD.2004.1393890
   Manna Z., 1980, ACM Transactions on Programming Languages and Systems, V2, P90, DOI 10.1145/357084.357090
   Marcolli M, 2014, J NONCOMMUT GEOM, V8, P337, DOI 10.4171/JNCG/159
   Marcolli Matilde, 2011, CORRABS11082874, DOI [10.48550/arXiv.1108.2874, DOI 10.48550/ARXIV.1108.2874]
   McIver Annabelle., 2005, MG COMP SCI
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   Nethercote N, 2007, LECT NOTES COMPUT SC, V4741, P529
   Nola Antonio, 2005, CONTEMP MATH, V377, DOI [10.1090/conm/377/06988, DOI 10.1090/CONM/377/06988]
   OConner Russel, 2012, VERY GEN METHOD COMP
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   PLOTKIN GDA, 2004, JOURNAL OF LOGIC AND, V60, P17, DOI [DOI 10.1016/J.JLAP.2004.03.002, DOI 10.1016/J.JLAP.2004.05.001]
   Pouly Marc, 2010, SEMIRINGS BREAKFAST
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Schrijver Alexander, 1999, WILEY INTERSCIENCE S
   Sheeran M, 2000, LECT NOTES COMPUT SC, V1954, P108
   Sproat R, 2014, COMPUT LINGUIST, V40, P733, DOI 10.1162/COLI_a_00198
   Swierstra W, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341707
   TARJAN RE, 1985, SIAM J ALGEBRA DISCR, V6, P306, DOI 10.1137/0606031
   Wirsching Gunther J., 2010, CONFIDENCE PROBABILI
   Zhang LP, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527331
   Zhang Linpeng, 2022, CORRABS220206765, DOI [10.48550/ARXIV.2202.06765, DOI 10.48550/ARXIV.2202.06765]
NR 63
TC 7
Z9 7
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 66
DI 10.1145/3527310
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300002
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Liu, BZ
   Huang, J
AF Liu, Bozhen
   Huang, Jeff
TI SHARP: Fast Incremental Context-Sensitive Pointer Analysis for Java
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE incremental pointer analysis; context-sensitive algorithm;
   parallelization
ID TO ANALYSIS
AB We present SHARP, an incremental context-sensitive pointer analysis algorithm that scales to real-world large complex Java programs and can also be efficiently parallelized. To our knowledge, SHARP is the first algorithm to tackle context-sensitivity in the state-of-the-art incremental pointer analysis (with regards to code modifications including both statement additions and deletions), which applies to both k-CFA and k-obj. To achieve it, SHARP tackles several technical challenges: soundness, redundant computations, and parallelism to improve scalability without losing precision. We conduct an extensive empirical evaluation of SHARP on large and popular Java projects and their code commits, showing impressive performance improvement: our incremental algorithm only requires on average 31 seconds to handle a real-world code commit for k-CFA and k-obj, which has comparable performance to the state-of-the-art incremental context-insensitive pointer analysis. Our parallelization further improves the performance and enables SHARP to finish within 18 seconds per code commit on average on an eight-core machine.
C1 [Liu, Bozhen; Huang, Jeff] Texas A&M Univ, College Stn, TX 77843 USA.
C3 Texas A&M University System; Texas A&M University College Station
RP Liu, BZ (corresponding author), Texas A&M Univ, College Stn, TX 77843 USA.
EM april1989@tamu.edu; jeffhuang@tamu.edu
OI Liu, Bozhen/0000-0003-2137-2375
FU NSF [CCF-2006450]
FX We thank the anonymous reviewers for their constructive feedback on
   earlier versions of this paper. This work was supported by NSF award
   CCF-2006450.
CR [Anonymous], 1994, Program analysis and specialization for the C programming language
   Bender MA, 2016, ACM T ALGORITHMS, V12, DOI 10.1145/2756553
   Edvinsson M., 2011, P 6 INT C HIGH PERFO, P45
   Gupta A., 1993, SIGMOD Record, V22, P157, DOI 10.1145/170036.170066
   Guyer SZ, 2003, LECT NOTES COMPUT SC, V2694, P214
   Hardekopf B, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P290, DOI 10.1145/1250734.1250767
   Hardekopf B, 2011, INT SYM CODE GENER, P289, DOI 10.1109/CGO.2011.5764696
   Hassanshahi B., 2017, P 6 ACM SIGPLAN INT, P13
   Jeon M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276510
   Jeong S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133924
   Kastrinis George., 2013, ACM SIGPLAN NOTICES, V48, P423, DOI [DOI 10.1145/2499370.2462191, 10.1145/2491956.2462191, DOI 10.1145/2491956.2462191]
   Krainz J, 2017, PROCEEDINGS OF THE 12TH WORKSHOP ON IMPLEMENTATION, COMPILATION AND OPTIMIZATION OF OBJECT-ORIENTED LANGUAGES, PROGRAMS AND SYSTEMS (ICOOOLPS'17), DOI 10.1145/3098572.3098578
   Lei Shang, 2012, 2012 27th IEEE/ACM International Conference on Automated Software Engineering (ASE), P270, DOI 10.1145/2351676.2351720
   Lhotak O., 2003, Spark: A Flexible Points-to Analysis Framework for Java
   Lhoták O, 2008, ACM T SOFTW ENG METH, V18, DOI 10.1145/1391984.1391987
   Li Y., 2018, PRECISION GUIDED CON, DOI [10.1145/3276511, DOI 10.1145/3276511]
   Li Y, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P129, DOI 10.1145/3236024.3236041
   Liu BZ, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3293606
   Liu B, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P359, DOI 10.1145/3192366.3192390
   Lu Y, 2013, LECT NOTES COMPUT SC, V7791, P61, DOI 10.1007/978-3-642-37051-9_4
   Marron M., 2008, THESIS US
   Méndez-Lojo M, 2012, ACM SIGPLAN NOTICES, V47, P107, DOI 10.1145/2370036.2145831
   Méndez-Lojo M, 2010, ACM SIGPLAN NOTICES, V45, P428, DOI 10.1145/1932682.1869495
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Nagaraj V, 2013, INT CONFER PARA, P19, DOI 10.1109/PACT.2013.6618800
   Putta S, 2012, LECT NOTES COMPUT SC, V7210, P61, DOI 10.1007/978-3-642-28652-0_4
   Sagiv M, 1998, ACM T PROGR LANG SYS, V20, P1, DOI 10.1145/271510.271517
   Saha D, 2005, LECT NOTES COMPUT SC, V3668, P235, DOI 10.1007/11562931_19
   Saha D., 2006, LECT NOTES COMPUT SC, P56, DOI [DOI 10.1007/11799573_7, 10.1007/11799573_7]
   Saha Diptikalyan, 2005, P 7 ACM SIGPLAN INT, P117, DOI DOI 10.1145/1069774.1069785
   Shivers O. G., 1991, THESIS CARNEGIE MELL
   Shiyi WeiB.G. R., 2015, 29 EUROPEAN C OBJECT, P712
   SMARAGDAKIS Y, 2011, P 38 ANN ACM SIGPLAN, V38, P11, DOI DOI 10.1145/1926385.1926390
   Smaragdakis Y, 2014, ACM SIGPLAN NOTICES, V49, P485, DOI [10.1145/2666356.2594320, 10.1145/2594291.2594320]
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan Manu, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P196, DOI 10.1007/978-3-642-36946-9_8
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Su Y, 2014, PROC INT CONF PARAL, P451, DOI 10.1109/ICPP.2014.54
   Tan T, 2017, ACM SIGPLAN NOTICES, V52, P278, DOI [10.1145/3140587.3062360, 10.1145/3062341.3062360]
   WALA, 2017, T J WATSON LIB ANAL
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   Yur J.-S., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P442, DOI 10.1109/ICSE.1999.841034
   Zhan S, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P775, DOI 10.1145/2950290.2950332
   Zhao JS, 2018, CC'18: PROCEEDINGS OF THE 27TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P59, DOI 10.1145/3178372.3179517
NR 44
TC 6
Z9 6
U1 1
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 88
DI 10.1145/3527332
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300024
OA gold
DA 2024-07-18
ER

PT J
AU Mariano, B
   Chen, YJ
   Feng, Y
   Durrett, G
   Dillig, I
AF Mariano, Benjamin
   Chen, Yanju
   Feng, Yu
   Durrett, Greg
   Dillig, Isil
TI Automated Transpilation of Imperative to Functional Code using
   Neural-Guided Program Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE transpilation; program synthesis; neural networks
AB While many mainstream languages such as Java, Python, and C# increasingly incorporate functional APIs to simplify programming and improve parallelization/performance, there are no effective techniques that can be used to automatically translate existing imperative code to functional variants using these APIs. Motivated by this problem, this paper presents a transpilation approach based on inductive program synthesis for modernizing existing code. Our method is based on the observation that the overwhelming majority of source/target programs in this setting satisfy an assumption that we call trace-compatibility: not only do the programs share syntactically identical low-level expressions, but these expressions also take the same values in corresponding execution traces. Our method leverages this observation to design a new neural-guided synthesis algorithm that (1) uses a novel neural architecture called cognate grammar network (CGN) and (2) leverages a form of concolic execution to prune partial programs based on intermediate values that arise during a computation. We have implemented our approach in a tool called NGST2 and use it to translate imperative Java and Python code to functional variants that use the Stream and f unctools APIs respectively. Our experiments show that NGST2 significantly outperforms several baselines and that our proposed neural architecture and pruning techniques are vital for achieving good results.
C1 [Mariano, Benjamin; Durrett, Greg; Dillig, Isil] Univ Texas Austin, Austin, TX 78712 USA.
   [Chen, Yanju; Feng, Yu] Univ Calif Santa Barbara, Santa Barbara, CA 93106 USA.
C3 University of Texas System; University of Texas Austin; University of
   California System; University of California Santa Barbara
RP Mariano, B (corresponding author), Univ Texas Austin, Austin, TX 78712 USA.
EM bmariano@cs.utexas.edu; yanju@cs.ucsb.edu; yufeng@cs.ucsb.edu;
   gdurrett@cs.utexas.edu; isil@cs.utexas.edu
OI Chen, Yanju/0000-0002-6494-3126; Dillig, Isil/0000-0001-8006-1230; Feng,
   Yu/0000-0003-1000-1229; Durrett, Greg/0000-0002-7061-7298
FU National Science Foundation [CCF-1908494, CCF-1811865, CCF-1918889];
   DARPA under the HARDEN program; Google; Intel; RelationalAI
FX We would like to thank Benjamin Sepanski, Shankara Pailoor, and Jocelyn
   Chen for their thoughtful feedback. This material is based upon work
   supported by the National Science Foundation under grant numbers
   CCF-1908494, CCF-1811865, CCF-1918889, DARPA under the HARDEN program,
   Google under the Google Faculty Research Grant, as well as both Intel
   and RelationalAI.
CR Aggarwal Karan, 2015, PeerJ Prepr., V3
   Ahmad MB, 2018, INT CONF MANAGE DATA, P1205, DOI 10.1145/3183713.3196891
   Albarghouthi Aws, 2013, INT C COMPUTER AIDED, P934
   Alur R, 2015, LECT NOTES COMPUT SC, V9207, P163, DOI 10.1007/978-3-319-21668-3_10
   [Anonymous], 2015, P 2015 C EMP METH NA, DOI [10.18653/v1/D15-1166, DOI 10.48550/ARXIV.1508.04025]
   Bahdanau D, 2016, Arxiv, DOI [arXiv:1409.0473, 10.48550/arXiv.1409.0473]
   Bhatia S, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P60, DOI 10.1145/3180155.3180219
   Chen QC, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P328, DOI 10.1145/3453483.3454047
   Chen Xinyun, 2018, ARXIV180203691
   Cheung A, 2013, ACM SIGPLAN NOTICES, V48, P3, DOI 10.1145/2499370.2462180
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   COUSOT P, 1994, PROCEEDINGS OF THE 1994 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P95, DOI 10.1109/ICCL.1994.288389
   Ellis K., 2020, DREAMCODER GROWING G, DOI DOI 10.48550/ARXIV.2006.08381
   Farzan A, 2017, ACM SIGPLAN NOTICES, V52, P540, DOI [10.1145/3062341.3062355, 10.1145/3140587.3062355]
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Gaunt Alexander L, 2016, ARXIV161101989, DOI [10.48550/arXiv.1611.01989, DOI 10.48550/ARXIV.1611.01989]
   Gu JT, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P1631
   Gyori A., 2013, CROSSING GAP IMPERAT, P543
   Hochreiter S, 1997, NEURAL COMPUT, V9, P1735, DOI [10.1162/neco.1997.9.1.1, 10.1007/978-3-642-24797-2]
   HUDAK P, 1991, ACM T PROGR LANG SYS, V13, P269, DOI 10.1145/103135.103139
   Jia R, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P12
   Kamil S, 2016, ACM SIGPLAN NOTICES, V51, P711, DOI [10.1145/2980983.2908117, 10.1145/2908080.2908117]
   Khatchadourian R, 2020, SCI COMPUT PROGRAM, V195, DOI 10.1016/j.scico.2020.102476
   Kingma D. P., 2014, arXiv
   Kitaev N, 2018, PROCEEDINGS OF THE 56TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL), VOL 1, P2676
   Koehn P., 2007, P 45 ANN M ASS COMPU, P177
   Lachaux Marie-Anne, 2020, ARXIV200603511, DOI [10.48550/arXiv.2006.03511, DOI 10.48550/ARXIV.2006.03511]
   Li J, 2018, PROCEEDINGS OF THE TWENTY-SEVENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P4159
   Mariano B, 2020, IEEE INT CONF AUTOM, P262, DOI 10.1145/3324884.3416626
   Mariano Benjamin, ARXIV220309452, DOI [10.48550/arXiv.2203.09452, DOI 10.48550/ARXIV.2203.09452]
   Nye M., 2020, ArXiv preprint ArXiv:2003.05562, DOI [10.48550/arXiv.2003.05562, DOI 10.48550/ARXIV.2003.05562]
   Pascanu R., 2013, INT C MACH LEARN, P1310
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Rabinovich Maxim, 2017, ARXIV170407535, DOI [10.48550/arXiv.1704.07535, DOI 10.48550/ARXIV.1704.07535]
   Radoi C, 2014, ACM SIGPLAN NOTICES, V49, P909, DOI [10.1145/2714064.2660228, 10.1145/2660193.2660228]
   Raychev V, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P153, DOI 10.1145/2815400.2815418
   See A, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P1073, DOI 10.18653/v1/P17-1099
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2980983.2908102, 10.1145/2908080.2908102]
   Solar-Lezama A., 2007, P 28 ACM SIGPL C, P167, DOI DOI 10.1145/1250734.1250754
   Srivastava Nitish, 2014, J MACH LEARN RES, V15
   Torlak Emina, 2013, P 2013 ACM INT S NEW, P135, DOI DOI 10.1145/2509578.2509586
   Vinyals Oriol, 2014, ARXIV14093215, DOI [10.48550/arXiv.1409.3215, DOI 10.48550/ARXIV.1409.3215]
   Ye Xi, 2020, ARXIV201001678, DOI [10.48550/arXiv.2010.01678, DOI 10.48550/ARXIV.2010.01678]
NR 45
TC 2
Z9 2
U1 1
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 71
DI 10.1145/3527315
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300007
OA gold
DA 2024-07-18
ER

PT J
AU Wang, CP
   Yao, PS
   Tang, WS
   Shi, QK
   Zhang, C
AF Wang, Chengpeng
   Yao, Peisen
   Tang, Wensheng
   Shi, Qingkai
   Zhang, Charles
TI Complexity-Guided Container Replacement Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; program optimization; data structure specification
AB Containers, such as lists and maps. are fundamental data structures in modern programming languages. However, improper choice of container types may lead to significant performance issues. This paper presents CRES, an approach that automatically synthesizes container replacements to improve runtime performance. The synthesis algorithm works with static analysis techniques to identify how containers are utilized in the program, and attempts to select a method with lower time complexity for each container method call. Our approach can preserve program behavior and seize the opportunity of reducing execution time effectively for general inputs. We implement CRES and evaluate it on 12 real-world Java projects. It is shown that CRES synthesizes container replacements for the projects with 384.2 KLoC in 14 minutes and discovers six categories of container replacements, which can achieve an average performance improvement of 8.1%.
C1 [Wang, Chengpeng; Yao, Peisen; Tang, Wensheng; Zhang, Charles] Hong Kong Univ Sci & Technol, Dept Comp Sci & Engn, Hong Kong, Peoples R China.
   [Shi, Qingkai] Ant Grp, Hangzhou, Peoples R China.
C3 Hong Kong University of Science & Technology
RP Wang, CP (corresponding author), Hong Kong Univ Sci & Technol, Dept Comp Sci & Engn, Hong Kong, Peoples R China.
EM cwangch@ust.cse.hk; pyao@cse.ust.hk; wtangae@cse.ust.hk;
   qingkai.sqk@antgroup.com; charlesz@cse.ust.hk
OI Wang, Chengpeng/0000-0003-0617-5322; Shi, Qingkai/0000-0002-8297-8998
FU Hong Kong Research Grant Council [RGC16206517, ITS/440/18FP,
   PRP/004/21FX]; Innovation and Technology Commission; Ant Group
FX We thank the anonymous reviewers for valuable feedback on earlier drafts
   of this paper, which helped improve its presentation. We also appreciate
   Dr. Xiao Xiao and Dr. Gang Fan for insightful discussions. The authors
   are supported by the RGC16206517, ITS/440/18FP and PRP/004/21FX grants
   from the Hong Kong Research Grant Council and the Innovation and
   Technology Commission, Ant Group, and the donations from Microsoft and
   Huawei. Peisen Yao is the corresponding author.
CR Alur R, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P26
   Arcuri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1, DOI 10.1145/1985793.1985795
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Basios M, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P118, DOI 10.1145/3236024.3236043
   Bastani O, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P678, DOI 10.1145/3192366.3192383
   Chang BYE, 2020, FOUND TRENDS PROGRAM, V6, P1, DOI 10.1561/2500000037
   CHASE DR, 1990, SIGPLAN NOTICES, V25, P296, DOI 10.1145/93548.93585
   Cheung A, 2013, ACM SIGPLAN NOTICES, V48, P3, DOI 10.1145/2499370.2462180
   Cres, 2021, REP CONT REPL SYNTH
   De Nicola Rocco, 2011, ENCY PARALLEL COMPUT, P120, DOI [10.1007/978-0-387-09766-4_517, DOI 10.1007/978-0-387-09766-4_517]
   Eberhardt J, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P745, DOI 10.1145/3314221.3314640
   Fay MP, 2010, STAT SURV, V4, P1, DOI 10.1214/09-SS051
   Fiedor T, 2018, LECT NOTES COMPUT SC, V10747, P205, DOI 10.1007/978-3-319-73721-8_10
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P239, DOI 10.1145/1594834.1480912
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Gulwani S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P375, DOI 10.1145/1542476.1542518
   Gulwani Sumit, 2011, P 32 ACM SIGPLAN C P, V62s73, DOI [10.1145/1993498, DOI 10.1145/1993498]
   Hasan S, 2016, PROC INT CONF SOFTW, P225, DOI 10.1145/2884781.2884869
   Hawkins P, 2012, ACM SIGPLAN NOTICES, V47, P417, DOI [10.1145/2345156.2254114, 10.1145/2345156.1993504]
   Hawkins P, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P38
   Idreos S, 2018, INT CONF MANAGE DATA, P535, DOI 10.1145/3183713.3199671
   Jin GL, 2012, ACM SIGPLAN NOTICES, V47, P77, DOI 10.1145/2345156.2254075
   Jung CH, 2011, ACM SIGPLAN NOTICES, V46, P86, DOI 10.1145/1993316.1993509
   Kanvar V, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2931098
   Kennedy Oliver, 2015, 7 BIENN C INN DAT SY
   Kim D, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P528
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lemieux C, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P254, DOI 10.1145/3213846.3213874
   Li L, 2011, PROCEEDINGS OF THE 8TH INTERNATIONAL SYMPOSIUM ON COMPUTER SCIENCE IN SPORT (IACSS2011), P343
   Loncaric C, 2016, ACM SIGPLAN NOTICES, V51, P355, DOI [10.1145/2908080.2908122, 10.1145/2980983.2908122]
   Lu TH, 2021, LECT NOTES COMPUT SC, V12913, P286, DOI 10.1007/978-3-030-88806-0_14
   Manotas I, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P503, DOI 10.11455/2568225.2568297
   Mudduluru R., 2016, P 25 INT S SOFTWARE
   Oliveira Wellington, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P160, DOI 10.1109/MSR.2019.00033
   Oliveira W, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-021-09950-y
   Olivo O, 2015, ACM SIGPLAN NOTICES, V50, P369, DOI [10.1145/2813885.2737966, 10.1145/273924.2737966]
   Pailoor S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P574, DOI 10.1145/3453483.3454063
   Petsios Theofilos, 2017, P 2017 ACM SIGSAC C
   Reps T.W., 2007, The Compiler Design Handbook: Optimizations and Machine Code Generation, V2nd, P12
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   Samak M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371120
   Shacham O, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P408, DOI 10.1145/1542476.1542522
   Shi QK, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P930, DOI 10.1145/3453483.3454086
   Shi QK, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P693, DOI 10.1145/3192366.3192418
   Solar-Lezama A, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P136, DOI 10.1145/1375581.1375599
   Song LH, 2017, PROC INT CONF SOFTW, P370, DOI 10.1109/ICSE.2017.41
   Spath J., 2016, PROC EUR C OBJECT OR, p22:1, DOI [10.4230/DARTS.2.1.12, DOI 10.4230/LIPICS.ECOOP.2016.22]
   Srikanth A, 2017, ACM SIGPLAN NOTICES, V52, P639, DOI 10.1145/3093333.3009864
   Sui YL, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P265, DOI 10.1145/2892208.2892235
   Wen Cheng, 2020, ICSE 20 42 INT C SOF, DOI 10.1145
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
   Xie XF, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P61, DOI 10.1145/2950290.2950340
   Xu GQ, 2013, LECT NOTES COMPUT SC, V7920, P1, DOI 10.1007/978-3-642-39038-8_1
   Xu GQ, 2012, LECT NOTES COMPUT SC, V7313, P738, DOI 10.1007/978-3-642-31057-7_32
   Xu GQ, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P174, DOI 10.1145/1806596.1806617
   Xu GQ, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P160, DOI 10.1145/1806596.1806616
   Yaghmazadeh N, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133887
   Yang JW, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P800, DOI 10.1145/3180155.3180194
   Zee K, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P349, DOI 10.1145/1375581.1375624
   Zhang QR, 2013, ACM SIGPLAN NOTICES, V48, P435, DOI 10.1145/2499370.2462159
NR 60
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 68
DI 10.1145/3527312
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300004
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Heunen, C
   Kaarsgaard, R
AF Heunen, Chris
   Kaarsgaard, Robin
TI Quantum Information Effects
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantum computation; reversible computation; information effects;
   measurement; effects; arrows; categorical semantics
AB We study the two dual quantum information effects to manipulate the amount of information in quantum computation: hiding and allocation. The resulting type-and-effect system is fully expressive for irreversible quantum computing, including measurement. We provide universal categorical constructions that semantically interpret this arrow metalanguage with choice, starting with any rig groupoid interpreting the reversible base language. Several properties of quantum measurement follow in general, and we translate (noniterative) quantum flow charts into our language. The semantic constructions turn the category of unitaries between Hilbert spaces into the category of completely positive trace-preserving maps, and they turn the category of bijections between finite sets into the category of functions with chosen garbage. Thus they capture the fundamental theorems of classical and quantum reversible computing of Toffoli and Stinespring.
C1 [Heunen, Chris; Kaarsgaard, Robin] Univ Edinburgh, Sch Informat, 10 Crichton St, Edinburgh EH8 9AB, Midlothian, Scotland.
C3 University of Edinburgh
RP Heunen, C (corresponding author), Univ Edinburgh, Sch Informat, 10 Crichton St, Edinburgh EH8 9AB, Midlothian, Scotland.
EM chris.heunen@ed.ac.uk; robin.kaarsgaard@ed.ac.uk
RI Heunen, Chris/AAG-8798-2020; Kaarsgaard, Robin/M-2569-2016
OI Heunen, Chris/0000-0001-7393-2640; Kaarsgaard, Robin/0000-0002-7672-799X
FU EPSRC [EP/R044759/1] Funding Source: UKRI
CR Altenkirch T., 2010, SEMANTIC TECHNIQUES, P173, DOI 10.1017/CBO9781139193313.006
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   BENNETT CH, 1973, IBM J RES DEV, V17, P525, DOI 10.1147/rd.176.0525
   Bichsel B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P286, DOI 10.1145/3385412.3386007
   Bowman W. J., 2011, WORK IN PROGR REP 3
   Carette J, 2016, LECT NOTES COMPUT SC, V9632, P123, DOI 10.1007/978-3-662-49498-1_6
   Chen CH, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434290
   Chen CH, 2020, LECT NOTES COMPUT SC, V12227, P169, DOI [10.1109/CISCE50729.2020.00040, 10.1007/978-3-030-52482-1_10]
   Cho K., 2016, ARXIV160302133CSLO
   Chuang I., 2000, Quantum Information and Quantum Computation
   Cruttwell G. S. H., 2021, ARXIV210301931CSLG
   Fong BD, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785665
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Green AS, 2008, ELECTRON NOTES THEOR, V210, P65, DOI 10.1016/j.entcs.2008.04.018
   Hatcliff J, 1999, LECT NOTES COMPUT SC, V1706, P20
   Hermida C, 2012, THEOR COMPUT SCI, V430, P3, DOI 10.1016/j.tcs.2012.01.001
   Heunen C., P 18 INT C QUANT PHY, V343, P102, DOI [10.4204/EPTCS.343.5, DOI 10.4204/EPTCS.343.5]
   Heunen C., 2019, Oxford Graduate Texts in Mathematics, DOI DOI 10.1093/OSO/9780198739623.001.0001
   Houghton-Larsen N. G., 2021, THESIS U COPENHAGEN
   Hughes J, 2004, LECT NOTES COMPUT SC, V3622, P73
   Huot M, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785700
   Huot M, 2019, ELECTRON P THEOR COM, P213, DOI 10.4204/EPTCS.287.12
   Jacobs B, 2009, J FUNCT PROGRAM, V19, P403, DOI 10.1017/S0956796809007308
   James Rosham P., 2014, THESEUS HIGH LEVEL L
   James RP, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P73
   Kaarsgaard R, 2019, LECT NOTES COMPUT SC, V11825, P366, DOI 10.1007/978-3-030-33636-3_13
   Kelly G., 1974, CATEGORY SEMINAR, P281, DOI DOI 10.1007/BFB0063106
   LANDAUER R, 1961, IBM J RES DEV, V5, P183, DOI 10.1147/rd.53.0183
   Laplaza, 1972, Lecture Notes in Mathematics), V281, P29, DOI [10.1007/BFb0059555, DOI 10.1007/BFB0059555]
   Leinster Tom, 2016, BASIC CATEGORY THEOR
   Paykin J, 2017, ACM SIGPLAN NOTICES, V52, P846, DOI 10.1145/3093333.3009894
   Péchoux R, 2020, LECT NOTES COMPUT SC, V12077, P562, DOI 10.1007/978-3-030-45231-5_29
   Power J., 1997, Mathematical Structures in Computer Science, V7, P453, DOI 10.1017/S0960129597002375
   Rennela M, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:30)2020
   Sabry A, 2018, LECT NOTES COMPUT SC, V10803, P348, DOI 10.1007/978-3-319-89366-2_19
   Saxena A, 2017, NEUROCOMPUTING, V267, P664, DOI 10.1016/j.neucom.2017.06.053
   Selinger P, 2004, MATH STRUCT COMP SCI, V14, P527, DOI 10.1017/S0960129504004256
   Toffoli T., 1980, Automata, Languages and Programming, Seventh Colloquium, P632
   Vizzotto J, 2006, MATH STRUCT COMP SCI, V16, P453, DOI 10.1017/S0960129506005287
   Vizzotto JK, 2009, LECT NOTES ARTIF INT, V5514, P379, DOI 10.1007/978-3-642-02261-6_30
   Westerbaan A, 2017, ELECTRON P THEOR COM, P215, DOI 10.4204/EPTCS.236.14
   Yanofsky N. S., 2008, QUANTUM COMPUTING CO
NR 42
TC 4
Z9 4
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 2
DI 10.1145/3498663
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900003
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Laurel, J
   Yang, R
   Singh, G
   Misailovic, S
AF Laurel, Jacob
   Yang, Rem
   Singh, Gagandeep
   Misailovic, Sasa
TI A Dual Number Abstraction for Static Analysis of Clarke Jacobians
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Abstract Interpretation; Differentiable Programming; Robustness
AB We present a novel abstraction for bounding the Clarke Jacobian of a Lipschitz continuous, but not necessarily differentiable function over a local input region. To do so, we leverage a novel abstract domain built upon dual numbers, adapted to soundly over-approximate all first derivatives needed to compute the Clarke Jacobian. We formally prove that our novel forward-mode dual interval evaluation produces a sound, interval domain-based over-approximation of the true Clarke Jacobian for a given input region.
   Due to the generality of our formalism, we can compute and analyze interval Clarke Jacobians for a broader class of functions than previous works supported - specifically, arbitrary compositions of neural networks with Lipschitz, but non-differentiable perturbations. We implement our technique in a tool called DeepJ and evaluate it on multiple deep neural networks and non-differentiable input perturbations to showcase both the generality and scalability of our analysis. Concretely, we can obtain interval Clarke Jacobians to analyze Lipschitz robustness and local optimization landscapes of both fully-connected and convolutional neural networks for rotational, contrast variation, and haze perturbations, as well as their compositions.
C1 [Laurel, Jacob; Yang, Rem; Singh, Gagandeep; Misailovic, Sasa] Univ Illinois, Urbana, IL 61801 USA.
   [Singh, Gagandeep] VMware Res, Palo Alto, CA USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   VMware, Inc.
RP Laurel, J (corresponding author), Univ Illinois, Urbana, IL 61801 USA.
EM jlaurel2@illinois.edu; remyang2@illinois.edu; ggnds@illinois.edu;
   misailo@illinois.edu
OI Yang, Rem/0000-0001-9693-6820; Singh, Gagandeep/0000-0002-9299-2961
FU NSF [CCF-1846354, CCF-1956374, CCF-2008883]; USDA NIFA [NIFA-2024827];
   Sloan Graduate Fellowship
FX We thank the anonymous reviewers for their comments and Ben Sherman for
   helpful discussions during the early stages of this work. This research
   was supported in part by NSF Grants No. CCF-1846354, CCF-1956374,
   CCF-2008883, USDA NIFA Grant No. NIFA-2024827, a gift from Facebook, and
   a Sloan Graduate Fellowship.
CR Alvarez-Melis David., 2018, NEURAL INFORM PROCES
   Balunovic Mislav., 2019, NEURAL INFORM PROCES
   BECK T, 1994, J COMPUT APPL MATH, V50, P119, DOI 10.1016/0377-0427(94)90294-1
   Chaudhuri S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P57, DOI 10.1145/1706299.1706308
   Chaudhuri S, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P279, DOI 10.1145/1806596.1806629
   Chaudhuri Swarat, 2011, P 19 ACM SIGSOFT S 1
   Chaudhuri Swarat., 2011, INT C COMP AID VER
   Choi Y, 2018, IEEE T INTELL TRANSP, V19, P934, DOI 10.1109/TITS.2018.2791533
   Clarke F. H., 1990, OPTIMIZATION NONSMOO, P24
   Darulova E, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/3014426
   de Figueiredo LH, 2004, NUMER ALGORITHMS, V37, P147, DOI 10.1023/B:NUMA.0000049462.70970.b6
   Di Gianantonio Pietro, 2013, INT C FDN SOFTW SCI
   Dwork C., 2012, P 3 INNOVATIONS THEO, P214
   Dwork C, 2006, LECT NOTES COMPUT SC, V3876, P265, DOI 10.1007/11681878_14
   Edalat A, 2004, MATH STRUCT COMP SCI, V14, P771, DOI 10.1017/S0960129504004359
   Edalat A, 2017, IEEE S LOG
   Edalat A, 2013, INFORM COMPUT, V224, P23, DOI 10.1016/j.ic.2012.11.006
   Edalat Abbas., 2018, INT C FDN SOFTW SCI
   Ehlers R, 2017, LECT NOTES COMPUT SC, V10482, P269, DOI 10.1007/978-3-319-68167-2_19
   Esteva A, 2019, NAT MED, V25, P24, DOI 10.1038/s41591-018-0316-z
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Gouk Henry, 2021, Machine Learning, V110
   Griewank A, 2013, OPTIM METHOD SOFTW, V28, P1139, DOI 10.1080/10556788.2013.796683
   Griewank A, 2008, OTHER TITL APPL MATH, V105, P1
   Huang XW, 2017, LECT NOTES COMPUT SC, V10426, P3, DOI 10.1007/978-3-319-63387-9_1
   Jordan Matt, 2020, Neural Information Processing Systems
   Katz G, 2019, LECT NOTES COMPUT SC, V11561, P443, DOI 10.1007/978-3-030-25540-4_26
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Khan KA, 2013, ACM T MATH SOFTWARE, V39, DOI 10.1145/2491491.2491493
   Khan Kamil A, 2012, RECENT ADV ALGORITHM
   King DB, 2015, ACS SYM SER, V1214, P1
   Krizhevsky Alex, 2009, LEARNING MULTIPLE LA
   Laurel Jacob., 2020, 29 EUR S PROGR ESOP
   Laurel Jacob., 2022, APPENDIX DEEPJ
   Lecun Y, 1998, P IEEE, V86, P2278, DOI 10.1109/5.726791
   Lin J., 2019, INT C LEARN REPR
   Mangal Ravi., 2020, INT STAT AN S
   Miné A, 2004, LECT NOTES COMPUT SC, V2986, P3
   Miné A, 2017, FOUND TRENDS PROGRAM, V4, pI, DOI 10.1561/2500000034
   Mirman M, 2018, PR MACH LEARN RES, V80
   Mirman Matthew., 2019, ABS190312519 CORR, V2519
   Moore R. E., 2009, INTERVAL, V110
   Muller Christoph, MACHINE LEARNING SYS, V3
   Paterson Colin, 2021, ARXIV210301629
   RICHARDSON D, 1968, J SYMBOLIC LOGIC, V33, P514, DOI 10.2307/2271358
   Scaman K, 2018, ADV NEUR IN, V31
   Scholtes Stefan, 2012, INTRO PIECEWISE DIFF, DOI DOI 10.1007/978-1-4614-4340-7
   Sherman Benjamin, 2021, S PRINC PROGR LANG P
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Singh G, 2018, ADV NEUR IN, V31
   Sotoudeh Matthew., 2020, INT STAT AN S
   Tsuzuku Yusuke, 2018, NEURAL INFORM PROCES
   Urban C, 2021, ARXIV PREPRINT ARXIV
   Weng T.-W., 2018, INT C LEARN REPR, P1
   Weng TW, 2018, PR MACH LEARN RES, V80
   Zhang B., 2021, INT C MACH LEARN
   Zhang HM, 2020, ROUTL STUD CHIN LING, P1
   Zhang Huan, 2019, 33 AAAI C ART INT
NR 58
TC 5
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 56
DI 10.1145/3498718
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900057
OA gold
DA 2024-07-18
ER

PT J
AU Bui, TL
   Chatterjee, K
   Gautam, T
   Pavlogiannis, A
   Toman, V
AF Bui, Truc Lam
   Chatterjee, Krishnendu
   Gautam, Tushar
   Pavlogiannis, Andreas
   Toman, Viktor
TI The Reads-From Equivalence for the TSO and PSO Memory Models
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrency; relaxed memory models; execution-consistency verification;
   stateless model checking
ID CONSISTENCY; REDUCTION
AB The verification of concurrent programs remains an open challenge due to the non-determinism in inter-process communication. One recurring algorithmic problem in this challenge is the consistency verification of concurrent executions. In particular, consistency verification under a reads-from map allows to compute the reads-from (RF) equivalence between concurrent traces, with direct applications to areas such as Stateless Model Checking (SMC). Importantly, the RF equivalence was recently shown to be coarser than the standard Mazurkiewicz equivalence, leading to impressive scalability improvements for SMC under SC (sequential consistency). However, for the relaxed memory models of TSO and PSO (total/partial store order), the algorithmic problem of deciding the RF equivalence, as well as its impact on SMC, has been elusive.
   In this work we solve the algorithmic problem of consistency verification for the TSO and PSO memory models given a reads-from map, denoted VTSO-rf and VPSO-rf, respectively. For an execution of n events over k threads and d variables, we establish novel bounds that scale as n(k+1) for TSO and as n(k+1) . min(n(k2), 2(k.d)) for PSO. Moreover, based on our solution to these problems, we develop an SMC algorithm under TSO and PSO that uses the RF equivalence. The algorithm is exploration-optimal, in the sense that it is guaranteed to explore each class of the RF partitioning exactly once, and spends polynomial time per class when k is bounded. Finally, we implement all our algorithms in the SMC tool Nidhugg, and perform a large number of experiments over benchmarks from existing literature. Our experimental results show that our algorithms for VTSO-rf and VPSO-rf provide significant scalability improvements over standard alternatives. Moreover, when used for SMC, the RF partitioning is often much coarser than the standard Shasha Snir partitioning for TSO/PSO, which yields a significant speedup in the model checking task.
C1 [Bui, Truc Lam] Comenius Univ, Bratislava 84248, Slovakia.
   [Chatterjee, Krishnendu; Toman, Viktor] IST Austria, Campus 1, A-3400 Klosterneuburg, Austria.
   [Gautam, Tushar] Indian Inst Technol, Main Gate Rd, Mumbai 400076, Maharashtra, India.
   [Pavlogiannis, Andreas] Aarhus Univ, Nordre Ringgade 1, DK-8000 Aarhus, Denmark.
C3 Comenius University Bratislava; Institute of Science & Technology -
   Austria; Indian Institute of Technology System (IIT System); Indian
   Institute of Technology (IIT) - Bombay; Aarhus University
RP Bui, TL (corresponding author), Comenius Univ, Bratislava 84248, Slovakia.
EM bujtuclam@gmail.com; krishnendu.chatterjee@ist.ac.at;
   tushargautam.gautam@gmail.com; pavlogiannis@cs.au.dk;
   viktor.toman@ist.ac.at
RI ; Pavlogiannis, Andreas/X-6831-2018
OI Toman, Viktor/0000-0001-9036-063X; Pavlogiannis,
   Andreas/0000-0002-8943-0722; Chatterjee, Krishnendu/0000-0002-4561-241X
FU ERC [CoG 863818]; Vienna Science and Technology Fund (WWTF) [ICT15-003]
FX The research was partially funded by the ERC CoG 863818 (ForM-SMArt) and
   the Vienna Science and Technology Fund (WWTF) through project ICT15-003.
CR Abdulla Parosh Aziz, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P353, DOI 10.1007/978-3-662-46681-0_28
   Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Abdulla PA, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360576
   Abdulla PA, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276505
   Adve SV, 1996, COMPUTER, V29, P66, DOI 10.1109/2.546611
   Albert E, 2018, LECT NOTES COMPUT SC, V10982, P392, DOI 10.1007/978-3-319-96142-2_24
   Albert E, 2017, LECT NOTES COMPUT SC, V10426, P526, DOI 10.1007/978-3-319-63387-9_26
   Alglave Jade, 2017, DAGSTUHL REPORTS, V11, DOI DOI 10.4230/DAGREP.6.11.108
   Alglave Jade, 2010, THESIS PARIS DIDEROT
   [Anonymous], 2015, 26 INT C CONC THEOR, DOI DOI 10.4230/LIPICS.CONCUR.2015.456
   Aronis S, 2018, LECT NOTES COMPUT SC, V10806, P229, DOI 10.1007/978-3-319-89963-3_14
   Biswas R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360591
   Bouajjani A, 2013, LECT NOTES COMPUT SC, V7792, P533, DOI 10.1007/978-3-642-37036-6_29
   Bui Truc Lam, 2021, ABS201111763 CORR
   Cain Harold W., 2002, P 14 ANN ACM S PAR A, DOI [10.1145/564870.564897, DOI 10.1145/564870.564897]
   Chalupa M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158119
   Chatterjee K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360550
   Chen YJ, 2009, INT S HIGH PERF COMP, P381, DOI 10.1109/HPCA.2009.4798276
   Chini Peter, 2020, LIPICS, V42, p1s42
   Clarke E. M., 1999, International Journal on Software Tools for Technology Transfer, V2, P279, DOI 10.1007/s100090050035
   CORPORATE SPARC International Inc., 1994, SPARC ARCHITECTURE M
   Demsky Brian, 2015, SATCHECK SAT DIRECTE, p20s36, DOI [10.1145/2814270.2814297, DOI 10.1145/2814270.2814297]
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Furbach F, 2015, ACM T EMBED COMPUT S, V14, DOI 10.1145/2753761
   Gibbons PB, 1997, SIAM J COMPUT, V26, P1208, DOI 10.1137/S0097539794279614
   Godefroid P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P174, DOI 10.1145/263699.263717
   Godefroid P, 2005, FORM METHOD SYST DES, V26, P77, DOI 10.1007/s10703-005-1489-x
   Godefroid P, 1996, LECT NOTES COMPUT SC, V1032, P11
   Henzinger Monika, 2011, AUTOMATA LANGUAGES P, V5, DOI [10.1007/978- 3- 642- 22012, DOI 10.1007/978-3-642-22012]
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Hu WW, 2012, IEEE T COMPUT, V61, P502, DOI 10.1109/TC.2011.41
   Huang J, 2015, ACM SIGPLAN NOTICES, V50, P165, DOI [10.1145/2737924.2737975, 10.1145/2813885.2737975]
   Huang SY, 2016, ACM SIGPLAN NOTICES, V51, P447, DOI 10.1145/3022671.2984025
   Huang Shiyou, 2017, 31 EUR C OBJ OR PROG, DOI 10.4230/LIPIcs.ECOOP.2017.16
   Kahlon V, 2009, LECT NOTES COMPUT SC, V5643, P398, DOI 10.1007/978-3-642-02658-4_31
   Kini D, 2017, ACM SIGPLAN NOTICES, V52, P157, DOI [10.1145/3062341.3062374, 10.1145/3140587.3062374]
   Kokologiannakis M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360599
   Kokologiannakis M, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P1157, DOI 10.1145/3373376.3378480
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lång M, 2020, LECT NOTES COMPUT SC, V12302, P377, DOI 10.1007/978-3-030-59152-6_21
   Manovit C, 2006, INT S HIGH PERF COMP, P168, DOI 10.1109/HPCA.2006.1598123
   Mathur U, 2020, IEEE S LOG, P713, DOI 10.1145/3373718.3394783
   Mathur Umang, 2021, OPTIMAL PREDICTION S, DOI [10.1145/3434317, DOI 10.1145/3434317]
   Musuvathi Tom Ball Madan, 2007, CHESS SYSTEMATIC TES
   Norris Brian, 2013, CDSCHECKER CHECKING, DOI [10.1145/2509136.2509514, DOI 10.1145/2509136.2509514]
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Pavlogiannis A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371085
   Peled D., 1993, Computer Aided Verification. 5th International Conference, CAV '93 Proceedings, P409
   Podkopaev A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290382
   Roemer J, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P747, DOI 10.1145/3385412.3385993
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   SHASHA D, 1988, ACM T PROGR LANG SYS, V10, P282, DOI 10.1145/42190.42277
   Smaragdakis Y, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P387
   Zennou R, 2019, LECT NOTES COMPUT SC, V11562, P267, DOI 10.1007/978-3-030-25543-5_16
   Zhang NL, 2015, ACM SIGPLAN NOTICES, V50, P250, DOI [10.1145/2813885.2737956, 10.1145/2737924.2737956]
NR 58
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 164
DI 10.1145/3485541
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200066
OA gold, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Yamaguchi, M
   Matsuda, K
   David, C
   Wang, M
AF Yamaguchi, Masaomi
   Matsuda, Kazutaka
   David, Cristina
   Wang, Meng
TI SYNBIT: Synthesizing Bidirectional Programs using Unidirectional
   Sketches
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; bidirectional transformation
AB We propose a technique for synthesizing bidirectional programs from the corresponding unidirectional code plus a few input/output examples. The core ideas are: (1) constructing a sketch using the given unidirectional program as a specification, and (2) filling the sketch in a modular fashion by exploiting the properties of bidirectional programs. These ideas are enabled by our choice of programming language, HOBiT, which is specifically designed to maintain the unidirectional program structure in bidirectional programming, and keep the parts that control bidirectional behavior modular. To evaluate our approach, we implemented it in a tool called SYNBIT and used it to generate bidirectional programs for intricate microbenchmarks, as well as for a few larger, more realistic problems. We also compared SYNBIT to a state-of-the-art unidirectional synthesis tool on the task of synthesizing backward computations.
C1 [Yamaguchi, Masaomi; Matsuda, Kazutaka] Tohoku Univ, Grad Sch Informat Sci, Sendai, Miyagi, Japan.
   [David, Cristina; Wang, Meng] Univ Bristol, Bristol BS8 1QU, Avon, England.
C3 Tohoku University; University of Bristol
RP Yamaguchi, M (corresponding author), Tohoku Univ, Grad Sch Informat Sci, Sendai, Miyagi, Japan.
EM masaomi.yamaguchi.t4@dc.tohoku.ac.jp; kztk@ecei.tohoku.ac.jp;
   cristina.david@bristol.ac.uk; meng.wang@bristol.ac.uk
OI Matsuda, Kazutaka/0000-0002-9747-4899; Yamaguchi,
   Masaomi/0000-0002-7347-6021
FU JSPS KAKENHI [15H02681, 19K11892, 20H04161]; JSPS Bilateral Program
   [JPJSBP120199913]; Kayamori Foundation of Informational Science
   Advancement, EPSRC Grant EXHIBIT: Expressive High-Level Languages for
   Bidirectional Transformations [EP/T008911/1]; Royal SocietyGrant
   Bidirectional Compiler for Software Evolution [IES\R3\170104]; Royal
   Society University Research Fellowship On Advancing Inductive Program
   Synthesis [UF160079]; Grants-in-Aid for Scientific Research [19K11892,
   20H04161] Funding Source: KAKEN; EPSRC [EP/T008911/1] Funding Source:
   UKRI
FX We thank Eijiro Sumii and Oleg Kiselyov for their helpful and
   instructive comments on an earlier stage of this research, and Hiroshi
   Unno for fruitful discussions on future directions. This work was
   partially supported by JSPS KAKENHI Grant Numbers 15H02681, 19K11892 and
   20H04161, JSPS Bilateral Program, Grant Number JPJSBP120199913, the
   Kayamori Foundation of Informational Science Advancement, EPSRC Grant
   EXHIBIT: Expressive High-Level Languages for Bidirectional
   Transformations (EP/T008911/1), Royal Society Grant Bidirectional
   Compiler for Software Evolution (IES\R3\170104), and Royal Society
   University Research Fellowship On Advancing Inductive Program Synthesis
   (UF160079).
CR Abate A, 2018, LECT NOTES COMPUT SC, V10981, P270, DOI 10.1007/978-3-319-96145-3_15
   Abate A, 2017, LECT NOTES COMPUT SC, V10426, P462, DOI 10.1007/978-3-319-63387-9_23
   Albarghouthi Aws, 2013, INT C COMPUTER AIDED, P934
   Almendros-Jimenez Jesus Manuel, 2006, LECT NOTES COMPUTER, V4449
   [Anonymous], 1981, SCI PROGRAMMING, DOI DOI 10.1007/978-1-4612-5983-1
   [Anonymous], 2008, P 13 ACM SIGPLAN INT, DOI DOI 10.1145/1411204.1411257
   [Anonymous], 1989, FPCA 1989, DOI DOI 10.1145/99370.99404
   BANCILHON F, 1981, ACM T DATABASE SYST, V6, P557, DOI 10.1145/319628.319634
   Bohannon A, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P407, DOI 10.1145/1328438.1328487
   Bureau I, 2012, WPOPCT
   Chong N, 2020, 2020 IEEE/ACM 42ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP), P11, DOI 10.1145/3377813.3381347
   David C, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3174802
   David C, 2015, LECT NOTES COMPUT SC, V9032, P183, DOI 10.1007/978-3-662-46669-8_8
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   de Jonge Maartje, 2012, Software Language Engineering. 4th International Conference, SLE 2011. Revised Selected Papers, P40, DOI 10.1007/978-3-642-28830-2_3
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Fischer S, 2011, J FUNCT PROGRAM, V21, P413, DOI 10.1017/S0956796811000189
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Glück R, 2005, ACM SIGPLAN NOTICES, V40, P8, DOI 10.1145/1071221.1071222
   Gomard C. K., 1991, Journal of Functional Programming, V1, P21, DOI 10.1017/S0956796800000058
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Hegner SJ, 1990, ICDT, P422, DOI DOI 10.1007/3-540-53507-1_93
   Hofmann M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P371, DOI 10.1145/1926385.1926428
   Hu Z, 2016, TUTORIAL LECT LECT N, P100, DOI DOI 10.1007/978-3-319-79108-1_4
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Katayama Susumu, 2005, Trends Function. Program., V6, P111
   Kneuss E, 2013, ACM SIGPLAN NOTICES, V48, P407, DOI [10.1145/2509136.2509555, 10.1145/2544173.2509555]
   Ko HS, 2016, PEPM'16: PROCEEDINGS OF THE 2016 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P61, DOI 10.1145/2847538.2847544
   Korf RE, 1981, INT JOINT C ART INT, P1007
   Kort J, 2003, THIRD IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION - PROCEEDINGS, P161, DOI 10.1109/SCAM.2003.1238042
   Koukoutos M, 2016, ELECTRON P THEOR COM, P100, DOI 10.4204/EPTCS.229.9
   Lubin J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408991
   Lutz C, 1986, Janus: a time-reversible language
   Maina Solomon, 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236775
   Matsuda Kazutaka, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P31, DOI 10.1007/978-3-319-89884-1_2
   Matsuda K., 2012, Higher-Order Symb. Comput, V25, P3
   Matsuda K, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409000
   Matsuda K, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000096
   Matsuda K, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P62, DOI 10.1145/2784731.2784750
   Matsuda K, 2015, SCI COMPUT PROGRAM, V111, P79, DOI 10.1016/j.scico.2014.07.008
   Matsuda K, 2010, LECT NOTES COMPUT SC, V6012, P448, DOI 10.1007/978-3-642-11957-6_24
   Matsuda K, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P47
   Miltner A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341699
   Miltner A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158089
   Nishida N, 2005, LECT NOTES COMPUT SC, V3467, P264
   Nishida N, 2011, LEIBNIZ INT PR INFOR, V10, P283, DOI 10.4230/LIPIcs.RTA.2011.283
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Pacheco H, 2014, PEPM '14: PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P39, DOI 10.1145/2543728.2543737
   Pombrio J, 2014, ACM SIGPLAN NOTICES, V49, P361, DOI [10.1145/2666356.2594319, 10.1145/2594291.2594319]
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Smith C, 2019, LECT NOTES COMPUT SC, V11388, P24, DOI 10.1007/978-3-030-11245-5_2
   Solar-Lezama A, 2009, LECT NOTES COMPUT SC, V5904, P4, DOI 10.1007/978-3-642-10672-9_3
   Solar-Lezama A, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P136, DOI 10.1145/1375581.1375599
   Srivastava Saurabh., 2011, P 32 ACM SIGPLAN C P, DOI [10.1145/1993498, DOI 10.1145/1993498.1993557]
   Stevens Perdita., 2008, LANDSCAPE BIDIRECTIO, DOI DOI 10.1007/978-3-540-88643-3_10
   Voigtländer J, 2013, J FUNCT PROGRAM, V23, P515, DOI 10.1017/S0956796813000130
   Voigtländer J, 2009, ACM SIGPLAN NOTICES, V44, P165, DOI 10.1145/1594834.1480904
   Voigtlander Janis, 2012, IDEAS CONNECTING IND, P39, DOI DOI 10.1145/2103746.2103757
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Yamaguchi Masaomi., ABS210813783 CORR
   Yokoyama Tetsuo, 2012, Reversible Computation. Third International Workshop, RC 2011. Revised Papers, P14, DOI 10.1007/978-3-642-29517-1_2
   Yokoyama T., 2008, P 5 C COMPUTING FRON, P43, DOI DOI 10.1145/1366230.1366239
NR 63
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 105
DI 10.1145/3485482
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200009
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Zhang, GQ
   Xu, YC
   Shen, XP
   Dillig, I
AF Zhang, Guoqiang
   Xu, Yuanchao
   Shen, Xipeng
   Dillig, Isil
TI UDF to SQL Translation through Compositional Lazy Inductive Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; source-to-source compiler; query optimization
AB Many data processing systems allow SQL queries that call user-defined functions (UDFs) written in conventional programming languages. While such SQL extensions provide convenience and flexibility to users, queries involving UDFs are not as efficient as their pure SQL counterparts that invoke SQL's highly-optimized built-in functions. Motivated by this problem, we propose a new technique for translating SQL queries with UDFs to pure SQL expressions. Unlike prior work in this space, our method is not based on syntactic rewrite rules and can handle a much more general class of UDFs. At a high-level, our method is based on counterexample-guided inductive synthesis (CEGIS) but employs a novel compositional strategy that decomposes the synthesis task into simpler sub-problems. However, because there is no universal decomposition strategy that works for all UDFs, we propose a novel lazy inductive synthesis approach that generates a sequence of decompositions that correspond to increasingly harder inductive synthesis problems. Because most realistic UDF-to-SQL translation tasks are amenable to a fine-grained decomposition strategy, our lazy inductive synthesis method scales significantly better than traditional CEGIS.
   We have implemented our proposed technique in a tool called CLIS for optimizing Spark SQL programs containing Scala UDFs. To evaluate CLIS, we manually study 100 randomly selected UDFs and find that 63 of them can be expressed in pure SQL. Our evaluation on these 63 UDFs shows that CLIS can automatically synthesize equivalent SQL expressions in 92% of the cases and that it can solve 2.4x more benchmarks compared to a baseline that does not use our compositional approach. We also show that CLIS yields an average speed-up of 3.5x for individual UDFs and 1.3x to 3.1x in terms of end-to-end application performance.
C1 [Zhang, Guoqiang; Xu, Yuanchao; Shen, Xipeng] North Carolina State Univ, Raleigh, NC 27695 USA.
   [Dillig, Isil] Univ Texas Austin, Austin, TX 78712 USA.
C3 North Carolina State University; University of Texas System; University
   of Texas Austin
RP Zhang, GQ (corresponding author), North Carolina State Univ, Raleigh, NC 27695 USA.
EM gzhang9@ncsu.edu; yxu47@ncsu.edu; xshen5@ncsu.edu; isil@cs.utexas.edu
RI Xu, Yuanchao/HPG-6310-2023
OI Xu, Yuanchao/0000-0003-4165-9138; Shen, Xipeng/0000-0003-3599-8010
FU National Science Foundation (NSF) [CCF-1811865, CCF-1712067,
   CCF-1762299, CCF-1703487]
FX This material is based upon work supported by the National Science
   Foundation (NSF) under Grants No. : CCF-1811865, CCF-1712067,
   CCF-1762299, and CCF-1703487. Any opinions, findings, and conclusions or
   recommendations expressed in this material are those of the authors and
   do not necessarily reflect the views of NSF.
CR Ahmad MB, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3355089.3356549
   Ahmad MB, 2018, INT CONF MANAGE DATA, P1205, DOI 10.1145/3183713.3196891
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Biere A, 2003, ADV COMPUT, V58, P117
   Chen J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360567
   Cheung A, 2013, ACM SIGPLAN NOTICES, V48, P3, DOI 10.1145/2499370.2462180
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Crotty A, 2015, PROC VLDB ENDOW, V8, P1466
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Emani KV, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1781, DOI 10.1145/2882903.2882926
   Emani KV, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1663, DOI 10.1145/3035918.3058747
   Essertel GM, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P799
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   gao zhenyu, 2012, P 10 US C OP SYST DE, P121
   Gupta S, 2020, SIGMOD'20: PROCEEDINGS OF THE 2020 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P559, DOI 10.1145/3318464.3389736
   Huang KJ, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1159, DOI 10.1145/3385412.3386027
   Hueske F, 2013, PROC INT CONF DATA, P1292, DOI 10.1109/ICDE.2013.6544927
   Lahiri Shuvendu K., 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P712, DOI 10.1007/978-3-642-31424-7_54
   Martins R, 2019, PROC VLDB ENDOW, V12, P1914, DOI 10.14778/3352063.3352098
   Park Kwanghyun, 2017, ABS171200498 CORR
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Ramachandra K, 2019, PROC VLDB ENDOW, V12, P1810, DOI 10.14778/3352063.3352072
   Ramachandra K, 2017, PROC VLDB ENDOW, V11, P432, DOI 10.1145/3164135.3164140
   Raza M, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P792
   Rheinländer A, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P685, DOI 10.1145/2588555.2594517
   Rompf T, 2012, COMMUN ACM, V55, P121, DOI 10.1145/2184319.2184345
   Schkufza E, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI 10.1145/2499368.2451150
   Schlaipfer M, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P631, DOI 10.1145/3132747.3132773
   Simhadri V, 2014, PROC INT CONF DATA, P532, DOI 10.1109/ICDE.2014.6816679
   Sivaraman A, 2016, PROCEEDINGS OF THE 2016 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '16), P15, DOI 10.1145/2934872.2934900
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Sousa M, 2014, ACM SIGPLAN NOTICES, V49, P554, DOI [10.1145/2594291.2594305, 10.1145/2666356.2594305]
   TPC, 2005, TPC H BENCHM SPEC
   Van Geffen J, 2020, LECT NOTES COMPUT SC, V12225, P564, DOI 10.1007/978-3-030-53291-8_29
   Wang YP, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P286, DOI 10.1145/3314221.3314588
   Wiedermann Ben, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P199, DOI 10.1145/1190216.1190248
   Wiedermann B, 2008, ACM SIGPLAN NOTICES, V43, P19, DOI 10.1145/1449955.1449767
   Zaharia Matei, 2010, 2 USENIX WORKSHOP HO
NR 39
TC 3
Z9 4
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 112
DI 10.1145/3485489
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200016
OA gold
DA 2024-07-18
ER

PT J
AU Abdulla, PA
   Atig, MF
   Bouajjani, A
   Kumar, KN
   Saivasan, P
AF Abdulla, Parosh Aziz
   Atig, Mohamed Faouzi
   Bouajjani, Ahmed
   Kumar, K. Narayan
   Saivasan, Prakash
TI Deciding Reachability under Persistent x86-TSO
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE model checking; program verification; TSO memory model; persistent
   memories
ID SEMANTICS; MODEL
AB We address the problem of verifying the reachability problem in programs running under the formal model Px86 defined recently by Raad et al. in POPL'20 for the persistent Intel x86 architecture. We prove that this problem is decidable. To achieve that, we provide a new formal model that is equivalent to Px86 and that has the feature of being a well structured system. Deriving this new model is the result of a deep investigation of the properties of Px86 and the interplay of its components.
C1 [Abdulla, Parosh Aziz; Atig, Mohamed Faouzi] Uppsala Univ, Uppsala, Sweden.
   [Bouajjani, Ahmed] Univ Paris, Paris, France.
   [Kumar, K. Narayan] Chennai Math Inst, Siruseri, Tamil Nadu, India.
   [Kumar, K. Narayan] CNRS UMI RelaX, Chennai, Tamil Nadu, India.
   [Saivasan, Prakash] Inst Math Sci, Chennai, Tamil Nadu, India.
C3 Uppsala University; Universite Paris Cite; Chennai Mathematical
   Institute; Institute of Mathematical Sciences (IMSc) India
RP Abdulla, PA (corresponding author), Uppsala Univ, Uppsala, Sweden.
EM parosh@it.uu.se; mohamed_faouzi.atig@it.uu.se; abou@irif.fr;
   kumar@cmi.ac.in; prakashs@imsc.res.in
FU Infosys (India); Department of Science and Technology (India); Swedish
   Research Council (Sweden); Project AdeCoDS of the french National
   Research Agency ANR (France)
FX This research was partially supported by Infosys (India), the Department
   of Science and Technology (India), the Swedish Research Council (Sweden)
   and the Project AdeCoDS of the french National Research Agency ANR
   (France).
CR Abdulla Parosh Aziz, 2018, Proceedings of the ACM on Programming Languages, V2, DOI 10.1145/3276505
   Abdulla P.A., 2015, TACAS, V9035
   Abdulla PA, 1996, IEEE S LOG, P313, DOI 10.1109/LICS.1996.561359
   Abdulla PA, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1117, DOI 10.1145/3314221.3314649
   Abdulla PA, 2018, LOG METH COMPUT SCI, V14, DOI 10.23638/LMCS-14(1:9)2018
   Abdulla PA, 2017, ACTA INFORM, V54, P789, DOI 10.1007/s00236-016-0275-0
   Abdulla PA, 2016, LECT NOTES COMPUT SC, V9780, P134, DOI 10.1007/978-3-319-41540-6_8
   Abdulla Parosh Aziz, TACAS, p56S74
   Abdulla Parosh Aziz, 1993, P 8 ANN S LOG COMP S, DOI [10.1109/LICS.1993.287591, DOI 10.1109/LICS.1993.287591]
   Abdulla Parosh Aziz, 2020, LECT NOTES COMPUTER
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Alglave Jade, 2013, LECT NOTES COMPUTER, V8044, DOI [10.1007/978-3-642-39799, DOI 10.1007/978-3-642-39799]
   Alglave Jade, 2013, LECT NOTES COMPUTER, V7792
   Arm Limited, 2020, Arm Architecture Reference Manual: Armv8
   Arulraj J, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1753, DOI 10.1145/3035918.3054780
   Atig MF, 2012, LECT NOTES COMPUT SC, V7211, P26, DOI 10.1007/978-3-642-28869-2_2
   Atig MF, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P7, DOI 10.1145/1706299.1706303
   Atig Mohamed Faouzi, 2014, PROGRAMS SYSTEMS SYS
   Atig Mohamed Faouzi, 2011, CAV, V6806
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Burckhardt S, 2014, FOUND TRENDS PROGRAM, V1, P2
   Cohen N., 2018, PACMPL, V2, p153:1
   Demsky B, 2015, ACM SIGPLAN NOTICES, V50, P20, DOI [10.1145/2814270.2814297, 10.1145/2858965.2814297]
   Finkel A, 2001, THEOR COMPUT SCI, V256, P63, DOI 10.1016/S0304-3975(00)00102-X
   Flur S, 2016, ACM SIGPLAN NOTICES, V51, P608, DOI 10.1145/2914770.2837615
   Gotsman A, 2016, ACM SIGPLAN NOTICES, V51, P371, DOI 10.1145/2914770.2837625
   Intel, 2019, ARCH SOFTW DEV MAN C
   Intel, 2019, INT OPT TECHN
   Intel, 2019, INT 64 IA 32 ARCH SO
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Khyzha A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434328
   Kokologiannakis M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360599
   Kokologiannakis M, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P1157, DOI 10.1145/3373376.3378480
   Kokologiannakis Michalis, 2018, PACMPL, V2
   Lahav O, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P211, DOI 10.1145/3385412.3385966
   Lahav O, 2016, ACM SIGPLAN NOTICES, V51, P649, DOI 10.1145/2914770.2837643
   Liu SH, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P411, DOI 10.1145/3297858.3304015
   Liu Sihang, 2020, ASPLOS
   Mador-Haim Sela, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P495, DOI 10.1007/978-3-642-31424-7_36
   Nienhuis K, 2016, ACM SIGPLAN NOTICES, V51, P111, DOI 10.1145/3022671.2983997
   Pelley S, 2014, CONF PROC INT SYMP C, P265, DOI 10.1109/ISCA.2014.6853222
   Podkopaev A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290382
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360561
   Raad A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371079
   Raad A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276507
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   Xia F, 2017, 2017 USENIX ANNUAL TECHNICAL CONFERENCE (USENIX ATC '17), P349
NR 47
TC 5
Z9 5
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 56
DI 10.1145/3434337
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100056
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Paszke, A
   Johnson, DD
   Duvenaud, D
   Vytiniotis, D
   Radul, A
   Johnson, MJ
   Ragan-Kelley, J
   Maclaurin, D
AF Paszke, Adam
   Johnson, Daniel D.
   Duvenaud, David
   Vytiniotis, Dimitrios
   Radul, Alexey
   Johnson, Matthew J.
   Ragan-Kelley, Jonathan
   Maclaurin, Dougal
TI Getting to the Point Index Sets and Parallelism-Preserving Autodiff for
   Pointful Array Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Array programming; automatic differentiation; parallel computing
ID LANGUAGE; COMPILER
AB We present a novel programming language design that attempts to combine the clarity and safety of high-level functional languages with the efficiency and parallelism of low-level numerical languages. We treat arrays as eagerly-memoized functions on typed index sets, allowing abstract function manipulations, such as currying, to work on arrays. In contrast to composing primitive bulk-array operations, we argue for an explicit nested indexing style that mirrors application of functions to arguments. We also introduce a fine-grained typed effects system which affords concise and automatically-parallelized in-place updates. Specifically, an associative accumulation effect allows reverse-mode automatic differentiation of in-place updates in a way that preserves parallelism. Empirically, we benchmark against the Futhark array programming language, and demonstrate that aggressive inlining and type-driven compilation allows array programs to be written in an expressive, "pointful" style with little performance penalty.
C1 [Paszke, Adam] Google Res, Warsaw, Poland.
   [Johnson, Daniel D.] Google Res, Montreal, PQ, Canada.
   [Duvenaud, David] Univ Toronto, Toronto, ON, Canada.
   [Vytiniotis, Dimitrios] DeepMind, London, England.
   [Radul, Alexey; Johnson, Matthew J.; Maclaurin, Dougal] Google Res, Mountain View, CA USA.
   [Ragan-Kelley, Jonathan] MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
C3 Google Incorporated; University of Toronto; Google Incorporated;
   Massachusetts Institute of Technology (MIT)
RP Paszke, A (corresponding author), Google Res, Warsaw, Poland.
EM apaszke@google.com; ddjohnson@google.com; duvenaud@cs.toronto.edu;
   dvytin@google.com; axch@google.com; mattjj@google.com; jrk@mit.edu;
   dougalm@google.com
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   [Anonymous], 1997, The Definition of Standard ML
   Baydin AG, 2018, J MACH LEARN RES, V18
   Bergstra J., 2010, Proc. Python Sci. Comput. Conf., V1, P3
   Bernstein Gilbert, 2020, ARXIV200811256
   Bezanson J, 2017, SIAM REV, V59, P65, DOI 10.1137/141000671
   Bischof C., 1992, Sci. Program., V1, P11, DOI [10.1155/1992/717832, DOI 10.1155/1992/717832]
   Blelloch GuyE., 1993, NESL: A Nested Data-Parallel Language (Version 2.6)
   Bondhugula U, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P101, DOI 10.1145/1375581.1375595
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Bradbury J., 2018, JAX: Composable transformations of Python + NumPy programs
   Chakravarty M. M., 2011, P 6 WORKSH DECL ASP, P3, DOI DOI 10.1145/1926354.1926358
   Che SA, 2009, I S WORKL CHAR PROC, P44, DOI 10.1109/IISWC.2009.5306797
   Elliott Conal, 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236765
   Frostig Roy, LAFI 21 POPL 2021 WO
   Griewank A, 2008, OTHER TITL APPL MATH, V105, P1, DOI 10.1137/1.9780898717761
   Grosser T, 2012, PARALLEL PROCESS LET, V22, DOI 10.1142/S0129626412500107
   Harris CR, 2020, NATURE, V585, P357, DOI 10.1038/s41586-020-2649-2
   Hascoet L, 2013, ACM T MATH SOFTWARE, V39, DOI 10.1145/2450153.2450158
   Henriksen T, 2020, PROCEEDINGS OF SC20: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS (SC20), DOI 10.1109/SC41405.2020.00101
   Henriksen T, 2017, ACM SIGPLAN NOTICES, V52, P556, DOI [10.1145/3140587.3062354, 10.1145/3062341.3062354]
   Hovgaard AK, 2019, LECT NOTES COMPUT SC, V11457, P136, DOI 10.1007/978-3-030-18506-0_7
   Hu YM, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3355089.3356506
   Hu Yuanming, 2020, INT C LEARN REPR
   Hückelheim J, 2019, PROC INT CONF PARAL, DOI 10.1145/3337821.3337906
   Innes Michael, 2018, ABS181007951 CORR
   Iverson K. E., 1962, A Programming Language
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Jones SP, 2008, LECT NOTES COMPUT SC, V5356, P138
   Jones SP, 2002, J FUNCT PROGRAM, V12, P393, DOI 10.1017/S0956796802004331
   Larsen RW, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON FUNCTIONAL HIGH-PERFORMANCE COMPUTING (FHPC '17), P42, DOI 10.1145/3122948.3122952
   LAUNCHBURY J, 1994, SIGPLAN NOTICES, V29, P24, DOI 10.1145/773473.178246
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Li TM, 2018, ACM T GRAPHIC, V37, DOI 10.1145/3197517.3201383
   Maclaurin Dougal, 2014, ICML 15 AUTOML WORKS
   Manzyuk O, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S095679681900008X
   Matsuzaki K, 2009, LECT NOTES COMPUT SC, V6041, P72
   McDonell TL, 2013, ACM SIGPLAN NOTICES, V48, P49, DOI [10.1145/2544174.2500595, 10.1145/2500365.2500595]
   Mitchell Neil, 2010, P 15 ACM SIGPLAN INT, P309, DOI DOI 10.1145/1863543.1863588
   Najd S, 2016, PEPM'16: PROCEEDINGS OF THE 2016 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P25, DOI 10.1145/2847538.2847541
   Oancea Cosmin E., 2016, P 3 ACM SIGPLAN INT, p17S24
   Paszke A., 2019, ADV NEURAL INFORM PR, P8024
   Pearlmutter BA, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330018
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Ritchie Sam, 2021, AD HIGHER ORDE UNPUB
   Roesch J, 2018, MAPL'18: PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON MACHINE LEARNING AND PROGRAMMING LANGUAGES, P58, DOI 10.1145/3211346.3211348
   Shaikhha A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341701
   Slepak J, 2014, LECT NOTES COMPUT SC, V8410, P27
   Steele Guy L., 2011, FORTRESS SUN HPCS LA, DOI [10.1007/978-0-387-09766-4_190, DOI 10.1007/978-0-387-09766-4_190]
   Steuwer M, 2017, INT SYM CODE GENER, P74, DOI 10.1109/CGO.2017.7863730
   Stratton J. A., 2012, IMPACT1201 U ILL URB
   Swamy N, 2011, ACM SIGPLAN NOTICES, V46, P266, DOI 10.1145/2034574.2034811
   Tokui S, 2019, KDD'19: PROCEEDINGS OF THE 25TH ACM SIGKDD INTERNATIONAL CONFERENCCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P2002, DOI 10.1145/3292500.3330756
   Vasilache Nicolas., 2018, Technical report
NR 54
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PY 2021
VL 5
AR 88
DI 10.1145/3473593
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UQ9LK
UT WOS:000696379100028
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Castro-Perez, D
   Yoshida, N
AF Castro-Perez, David
   Yoshida, Nobuko
TI CAMP: Cost-Aware Multiparty Session Protocols
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE cost models; parallel progranuning; session types; message optimisations
AB This paper presents CAMP, a new static performance analysis framework for message-passing concurrent and distributed systems, based on the theory of multiparty session types (MPST). Understanding the runtime performance of concurrent and distributed systems is of great importance for the identification of bottlenecks and optimisation opportunities. In the message-passing setting, these bottlenecks are generally communication overheads and synchronisation times. Despite its importance, reasoning about these intensional properties of software, such as performance, has received little attention, compared to verifying extensional properties, such as correctness. Behavioural protocol specifications based on sessions types capture not only extensional, but also intensional properties of concurrent and distributed systems. CAMP augments MPST with annotations of communication latency and local computation cost, defined as estimated execution times, that we use to extract cost equations from protocol descriptions. CAMP is also extendable to analyse asynchronous communication optimisation built on a recent advance of session type theories. We apply our tool to different existing benchmarks and use cases in the literature with a wide range of communication protocols, implemented in C, MPI-C, Scala, Go, and OCaml. Our benchmarks show that, in most of the cases, we predict an upper-bound on the real execution costs with < 15% error.
C1 [Castro-Perez, David; Yoshida, Nobuko] Imperial Coll London, Comp, 180 Queens Gate, London SW7 2AZ, England.
C3 Imperial College London
RP Castro-Perez, D (corresponding author), Imperial Coll London, Comp, 180 Queens Gate, London SW7 2AZ, England.
EM d.castro-perez@imperial.ac.uk; n.yoshida@imperial.ac.uk
RI Yoshida, Nobuko/AAL-6082-2020
OI Yoshida, Nobuko/0000-0002-3925-8557; Castro-Perez,
   David/0000-0002-6939-4189
FU EPSRC [EP/T006544/1, EP/K011715/1, EP/K034413/1, EP/L00058X/1,
   EP/N027833/1, EP/N028201/1, EP/T014709/1, EP/V000462/1]; EPSRC
   [EP/N027833/1, EP/K011715/1, EP/T006544/1] Funding Source: UKRI
FX We thank the OOPSLA reviewers for their careful reviews and suggestions;
   and Lorenzo Gheri and Fangyi Zhou for their comments. Francisco Ferreira
   and Keigo Imai helped testing our artifact submission. The work is
   supported by EPSRC EP/T006544/1, EP/K011715/1, EP/K034413/1,
   EP/L00058X/1, EP/N027833/1, EP/N028201/1, EP/T006544/1, EP/T014709/1 and
   EP/V000462/1, and NCSS/EPSRC VeTSS.
CR [Anonymous], 2015, LIPIcs, DOI DOI 10.4230/LIPICS.CONCUR.2015.283
   [Anonymous], 1997, CONCURRENT PROGRAMMI
   Asanovic K, 2009, COMMUN ACM, V52, P56, DOI 10.1145/1562764.1562783
   Avanzini M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110287
   Bartoletti M, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(4:25)2017
   Bocchi Laura, 2014, CONCUR 2014 - Concurrency Theory. 25th International Conference, CONCUR 2014. Proceedings: LNCS 8704, P419, DOI 10.1007/978-3-662-44584-6_29
   Bocchi L, 2019, LECT NOTES COMPUT SC, V11423, P583, DOI 10.1007/978-3-030-17184-1_21
   Bravetti M, 2018, THEOR COMPUT SCI, V722, P19, DOI 10.1016/j.tcs.2018.02.010
   Bravetti M, 2017, INFORM COMPUT, V256, P300, DOI 10.1016/j.ic.2017.07.010
   Bravetti Mario, 2019, 30 INT C CONC THEOR, V140
   Caires L, 2016, MATH STRUCT COMP SCI, V26, P367, DOI 10.1017/S0960129514000218
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Castro David, 2019, DISTRIBUTED PROGRAMM
   Castro-Perez D, 2020, PROCEEDINGS OF THE 29TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '20), P143, DOI 10.1145/3377555.3377889
   Chen TC, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(2:12)2017
   Chen TC, 2014, PPDP'14: PROCEEDINGS OF THE 16TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P135, DOI 10.1145/2643135.2643138
   Coppo Mario, 2015, LNCS, V9104
   Curien PierreLouis, 2009, P LECT NOTES COMP SC, V5608, p203S218, DOI [10.1007/978-3-642-02273-9_16, DOI 10.1007/978-3-642-02273-9_16]
   Das A, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236786
   Das A, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P305, DOI 10.1145/3209108.3209146
   Demangeon R, 2012, LECT NOTES COMPUT SC, V7454, P272, DOI 10.1007/978-3-642-32940-1_20
   Demangeon Romain, 2015, LEIBNIZ INT P INFORM, V45, DOI 10.4230/LIPIcs.FSTTCS.2015.560
   Deniélou PM, 2013, LECT NOTES COMPUT SC, V7966, P174, DOI 10.1007/978-3-642-39212-2_18
   Deniélou PM, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:6)2012
   Dezani-Ciancaglini Mariangiola, 2016, Theory and Practice of Formal Methods. Essays Dedicated to Frank de Boer on the Occasion of His 60th Birthday. LNCS 9660, P155, DOI 10.1007/978-3-319-30734-3_12
   Gabet Julia, 2020, ECOOP 20
   Gay S, 2017, RIV PUBL SER AUTOMAT, pXV
   Ghilezan Silvia, P ACM PROGR LANG POP
   Gimenez S, 2016, ACM SIGPLAN NOTICES, V51, P243, DOI 10.1145/2914770.2837646
   Goetz B, 2006, JAVA CONCURRENCY PRA
   Handley MAT, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371092
   Hoffmann J, 2015, LECT NOTES COMPUT SC, V9032, P132, DOI 10.1007/978-3-662-46669-8_6
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Hu R, 2017, RIV PUBL SER AUTOMAT, P287
   Hu R, 2017, LECT NOTES COMPUT SC, V10202, P116, DOI 10.1007/978-3-662-54494-5_7
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Imai Keigo, 2020, MULTIPARTY SESSION P
   Imam S.M., 2014, P 4 INT WORKSH PROGR, P67, DOI [10.1145/2687357.2687368, DOI 10.1145/2687357.2687368]
   Jin GL, 2012, ACM SIGPLAN NOTICES, V47, P77, DOI 10.1145/2345156.2254075
   Krcal Pavel, 2006, COMMUNICATING TIMED, DOI [10.1007/11817963_24, DOI 10.1007/11817963_24]
   Krommydas K, 2016, J SIGNAL PROCESS SYS, V85, P373, DOI 10.1007/s11265-015-1051-z
   Lange J, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1137, DOI 10.1145/3180155.3180157
   Lange J, 2017, LECT NOTES COMPUT SC, V10203, P441, DOI 10.1007/978-3-662-54458-7_26
   Mostrous D, 2015, INFORM COMPUT, V241, P227, DOI 10.1016/j.ic.2015.02.002
   Mostrous D, 2009, LECT NOTES COMPUT SC, V5608, P203, DOI 10.1007/978-3-642-02273-9_16
   Mostrous D, 2009, LECT NOTES COMPUT SC, V5502, P316, DOI 10.1007/978-3-642-00590-9_23
   Neykova R, 2017, FORM ASP COMPUT, V29, P877, DOI 10.1007/s00165-017-0420-8
   Ng N, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P174, DOI 10.1145/2892208.2892232
   Ng N, 2015, LECT NOTES COMPUT SC, V9031, P212, DOI 10.1007/978-3-662-46663-6_11
   Ng Nicholas, 2012, P LECT NOTES COMPUTE, V7304, p202S218, DOI [10.1007/978-3, DOI 10.1007/978-3]
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Portillo Alvaro J. Rebon, 2002, LNCS, V2670, DOI [10.1007/3-540-44854-3, DOI 10.1007/3-540-44854-3]
   Rauber T, 2010, PARALLEL PROGRAMMING: FOR MULTICORE AND CLUSTER SYSTEMS, P1, DOI 10.1007/978-3-642-04818-0
   Taubenfeld Gadi, 2006, SYNCHRONIZATION ALGO
   The scribble authors, 2008, SCRIBBL HOM
   USENIX, 2020, DOUBL BUFF ALG
   Vasconcelos Pedro, 2008, Ph.D. Dissertation
   Yoshida Nobuko, 2008, LECT NOTES COMPUTER, V5751
   Yoshida Nobuko, ARXIV201004449CSPL
   Zhou Fangyi, 2020, CONDITIONALLY ACCEPT
NR 61
TC 6
Z9 6
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 155
DI 10.1145/3428223
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900032
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Dragoi, C
   Enea, C
   Ozkan, BK
   Majumdar, R
   Niksic, F
AF Dragoi, Cezara
   Enea, Constantin
   Ozkan, Burcu Kulahcioglu
   Majumdar, Rupak
   Niksic, Filip
TI Testing Consensus Implementations using Communication Closure
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Distributed consensus; Communication closure; Randomized testing
AB Large scale production distributed systems are difficult to design and test. Correctness must be ensured when processes run asynchronously, at arbitrary rates relative to each other, and in the presence of failures, e.g., process crashes or message losses. These conditions create a huge space of executions that is difficult to explore in a principled way. Current testing techniques focus on systematic or randomized exploration of all executions of an implementation while treating the implemented algorithms as black boxes. On the other hand, proofs of correctness of many of the underlying algorithms often exploit semantic properties that reduce reasoning about correctness to a subset of behaviors. For example, the communication-closure property, used in many proofs of distributed consensus algorithms, shows that every asynchronous execution of the algorithm is equivalent to a lossy synchronous execution, thus reducing the burden of proof to only that subset. In a lossy synchronous execution, processes execute in lock-step rounds, and messages are either received in the same round or lost forever such executions form a small subset of all asynchronous ones.
   We formulate the communication-closure hypothesis, which states that bugs in implementations of distributed consensus algorithms will already manifest in lossy synchronous executions and present a testing algorithm based on this hypothesis. We prioritize the search space based on a bound on the number of failures in the execution and the rate at which these failures are recovered. We show that a random testing algorithm based on sampling lossy synchronous executions can empirically find a number of bugs-including previously unknown ones-in production distributed systems such as Zookeeper, Cassandra, and Ratis, and also produce more understandable bug traces.
C1 [Dragoi, Cezara] INRIA, Le Chesnay Rocquencourt, France.
   [Dragoi, Cezara] Informal Syst, Paris, France.
   [Enea, Constantin] Univ Paris, IRIF, CNRS, Paris, France.
   [Ozkan, Burcu Kulahcioglu; Majumdar, Rupak] MPI SWS, Kaiserslautern, Germany.
   [Niksic, Filip] Univ Penn, Philadelphia, PA 19104 USA.
C3 Inria; Centre National de la Recherche Scientifique (CNRS); Universite
   Paris Cite; University of Pennsylvania
RP Dragoi, C (corresponding author), INRIA, Le Chesnay Rocquencourt, France.; Dragoi, C (corresponding author), Informal Syst, Paris, France.
OI Kulahcioglu Ozkan, Burcu/0000-0002-7038-165X
FU Deutsche Forschungsgemeinschaft [389792660 TRR 248]; European Research
   Council [610150]; European Research Council (ERC) under the European
   Union [678177]; French National Research Agency ANR project SAFTA
   [12744-ANR-17-CE25-0008-01]
FX Kulahcioglu Ozkan and Majumdar were supported in part by the Deutsche
   Forschungsgemeinschaft project 389792660 TRR 248 and by the European
   Research Council under the Grant Agreement 610150 (ERC Synergy Grant
   ImPACT). Constantin Enea was supported in part by the European Research
   Council (ERC) under the European Union's Horizon 2020 research and
   innovation programme (grant agreement No 678177). This work was done
   mainly when Cezara Dragoi was affiliated with INRIA supported by the
   French National Research Agency ANR project SAFTA
   (12744-ANR-17-CE25-0008-01).
CR Apache, 2013, CASSANDRA6023 AP
   Apache, 2020, AP RAT
   Birman K. P., 1987, Operating Systems Review, V21, P123, DOI 10.1145/37499.37515
   Birman Kenneth P., 1991, ACM SIGOPS OPER SYST, V25, DOI [10.1145/122120.122133, DOI 10.1145/122120.122133]
   Burckhardt S, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P167
   Chandra T, 2007, PODC'07: PROCEEDINGS OF THE 26TH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P398
   Chaouch-Saad Mouna, 2009, LNCS, V5797
   Charalambos A Charalambides, 2018, ENUMERATIVE COMBINAT
   Charron-Bost B, 2009, DISTRIB COMPUT, V22, P49, DOI 10.1007/s00446-009-0084-6
   Chaudhuri Kaustuv, 2010, LECT NOTES COMPUTER, V6173, DOI [10.1007/978-3-642-14203, DOI 10.1007/978-3-642-14203]
   Cheung P., 2001, Quantum Calculus
   Chou C., 1988, P 7 ACM PODC, P44, DOI DOI 10.1145/62546.62556
   Desai A, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P73, DOI 10.1145/2786805.2786861
   Dragoi Cezara, 2016, POPL
   DWORK C, 1988, J ACM, V35, P288, DOI 10.1145/42282.42283
   ELRAD T, 1982, SCI COMPUT PROGRAM, V2, P155, DOI 10.1016/0167-6423(83)90013-8
   Emmi M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P411, DOI 10.1145/1926385.1926432
   Fekete Alan, 1990, LECT NOTES COMPUTER, V458, DOI [10.1007/BFb0039061, DOI 10.1007/BFB0039061]
   FISCHER MJ, 1985, J ACM, V32, P374, DOI 10.1145/3149.214121
   Fonseca P, 2017, PROCEEDINGS OF THE TWELFTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS 2017), P328, DOI 10.1145/3064176.3064163
   Gafni Eli, 1998, P 17 ANN ACM S PRINC, DOI [10.1145/277697.277724, DOI 10.1145/277697.277724]
   Gao Yu, 2018, P 2018 ACM JOINT M E, DOI [10.1145/3236024, DOI 10.1145/3236024]
   Gleissenthall KV, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290372
   Gunawi H. S., 2015, LOGIN USENIX MAG, V40
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Hunt P., 2010, 2010 USENIX ANN TECH, V8, P9
   Izrailevsky Yury., 2011, The Netflix Tech Blog
   Junqueira FP, 2011, I C DEPEND SYS NETWO, P245, DOI 10.1109/DSN.2011.5958223
   Killian Charles Edwin, 2007, 4 S NETW SYST DES IM
   Kingsbury Kyle, 2018, JEPSEN
   Lakshman Avinash, 2010, Operating Systems Review, V44, P35, DOI 10.1145/1773912.1773922
   Lamport Leslie, 2005, Generalized Consensus and Paxos
   Leesatapornwongsa Tanakorn, 2014, P 11 USENIX S OPERAT, P399
   Lu J, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P114, DOI 10.1145/3341301.3359645
   Lukman JF, 2019, PROCEEDINGS OF THE FOURTEENTH EUROSYS CONFERENCE 2019 (EUROSYS '19), DOI 10.1145/3302424.3303986
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Moraru I, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P358, DOI 10.1145/2517349.2517350
   Moses Y, 2002, SIAM J COMPUT, V31, P989, DOI 10.1137/S0097539799364006
   Musuvathi M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P446, DOI 10.1145/1250734.1250785
   Oki Brian M., 1988, PODC
   Ongaro Diego, 2014, 2014 USENIX ANN TECH, DOI DOI 10.5555/2643634.2643666
   Ozkan BK, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276530
   Ozkan BK, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360606
   Padon O, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3140568
   Qadeer S, 2005, LECT NOTES COMPUT SC, V3440, P93
   Santoro Nicola, 1989, LECT NOTES COMPUTER, V349, DOI [10.1007/BFb0028994, DOI 10.1007/BFB0028994]
   Sutra Pierre, 2019, ABS190610917 CORR
   Thomson P, 2014, ACM SIGPLAN NOTICES, V49, P15, DOI [10.1145/2692916.2555260, 10.1145/2555243.2555260]
   VALIANT LG, 1990, COMMUN ACM, V33, P103, DOI 10.1145/79173.79181
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Yuan XH, 2018, LECT NOTES COMPUT SC, V10982, P317, DOI 10.1007/978-3-319-96142-2_20
NR 51
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 210
DI 10.1145/3428278
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900087
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Gorjiara, H
   Xu, GQHRR
   Demsky, B
AF Gorjiara, Hamed
   Xu, Guoqing Harry
   Demsky, Brian
TI SATUNE: Synthesizing Efficient SAT Encoders
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Auto-tuning; SAT encoding; Constraint Solvers
ID SMT SOLVER; CHECKING
AB Modern SAT solvers are extremely efficient at solving boolean satisfiability problems, enabling a wide spectrum of techniques for checking, verifying, and validating real-world programs. What remains challenging, though, is how to encode a domain problem (e.g., model checking) into a SAT formula because the same problem can have multiple distinct encodings, which can yield performance results that are orders-of-magnitude apart, regardless of the underlying solvers used. We develop SATUNE, a tool that can automatically synthesize SAT encoders for different problem domains. SATUNE employs a DSL that allows developers to express domain problems at a high level and a search algorithm that can effectively find efficient solutions. The search process is guided by observations made over example encodings and their performance for the domain and hence SATUNE can quickly synthesize a high-performance encoder by incorporating patterns from examples that yield good performance. A thorough evaluation with JMCR, SyPet, Dirk, Hexiom, Sudoku, and KillerSudoku demonstrates that SATUNE can easily synthesize high-performance encoders for different domains including model checking, synthesis, and games. These encoders generate constraint problems that are often several orders of magnitude faster to solve than the original encodings used by the tools.
C1 [Gorjiara, Hamed] Univ Calif Irvine, Elect Engn & Comp Sci, Irvine, CA 92717 USA.
   [Xu, Guoqing Harry] Univ Calif Los Angeles, Comp Sci, Los Angeles, CA 90024 USA.
   [Demsky, Brian] Univ Calif Irvine, Comp Sci, Irvine, CA 92717 USA.
C3 University of California System; University of California Irvine;
   University of California System; University of California Los Angeles;
   University of California System; University of California Irvine
RP Gorjiara, H (corresponding author), Univ Calif Irvine, Elect Engn & Comp Sci, Irvine, CA 92717 USA.
EM hgorjiar@uci.edu; harryxu@cs.ucla.edu; bdemsky@uci.edu
FU National Science Foundation [CNS-1703598, OAC-1740210, CNS-1763172,
   CCF-2006948, CNS-2007737, CNS-2006437]; ONR [N00014-16-1-2913,
   N00014-18-1-2037]
FX We thank the anonymous reviewers for their thorough and insightful
   comments that helped us substantially improve the paper. This work is
   supported by the National Science Foundation grants CNS-1703598,
   OAC-1740210, CNS-1703598, CNS-1763172, CCF-2006948, CNS-2007737, and
   CNS-2006437, as well as ONR grants N00014-16-1-2913 and
   N00014-18-1-2037.
CR Aavani A, 2011, LECT NOTES COMPUT SC, V6695, P357
   Aavani A, 2012, LECT NOTES COMPUT SC, V7180, P15, DOI 10.1007/978-3-642-28717-6_4
   Abío I, 2014, LECT NOTES COMPUT SC, V8656, P75, DOI 10.1007/978-3-319-10428-7_9
   Airobert, 2016, SAT BASED KILLER SUD
   [Anonymous], 2010, Journal on Satisfiability, Boolean Modeling and Computation, DOI DOI 10.3233/SAT190075
   [Anonymous], 2013, P 2013 9 JOINT M FDN, DOI [10.1145/2491411.2491447, DOI 10.1145/2491411.2491447]
   [Anonymous], 2008, J. Satisf. Boolean Model. Comput., DOI 10.3233/sat190039
   [Anonymous], 2006, Technical Report
   Ardi T., 2015, SAT based sudoku solver in Python
   Audemard G., 2015, Glucose and syrup in the sat race 2015
   Audemard G, 2014, LECT NOTES COMPUT SC, V8561, P197, DOI 10.1007/978-3-319-09284-3_15
   Audemard G, 2009, 21ST INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI-09), PROCEEDINGS, P399
   Bailleux O, 2003, LECT NOTES COMPUT SC, V2833, P108
   Bailleux O, 2009, LECT NOTES COMPUT SC, V5584, P181, DOI 10.1007/978-3-642-02777-2_19
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Batty Mark, 2011, P 38 ANN ACM SIGPLAN
   Béjar R, 2000, SEVENTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE (AAAI-2001) / TWELFTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE (IAAI-2000), P262
   Biere A, 2014, LECT NOTES COMPUT SC, V8561, P285, DOI 10.1007/978-3-319-09284-3_22
   Bjork M., 2009, J. Satisfiability, Boolean Model. Comput, V7, P189
   Blanchette JC, 2011, PPDP 11 - PROCEEDINGS OF THE 2011 SYMPOSIUM ON PRINCIPLES AND PRACTICES OF DECLARATIVE PROGRAMMING, P113
   Bordeaux L, 2012, LECT NOTES COMPUT SC, V7147, P612
   Bouton Thomas, 2009, INT C AUT DED
   Brain M, 2016, LECT NOTES COMPUT SC, V9583, P536, DOI 10.1007/978-3-662-49122-5_26
   Brummayer R, 2009, LECT NOTES COMPUT SC, V5505, P174, DOI 10.1007/978-3-642-00768-2_16
   Bruttomesso R, 2008, LECT NOTES COMPUT SC, V5123, P299
   Burckhardt S, 2007, ACM SIGPLAN NOTICES, V42, P12, DOI 10.1145/1273442.1250737
   Cabon B., 1999, Constraints, V4, P79, DOI 10.1023/A:1009812409930
   Cadar C., 2008, OSDI, V8, P209, DOI DOI 10.5555/1855741.1855756
   Chambers B., 2009, 2009 DES AUT TEST EU
   Chebiryak Yury, 2008, 2008 INT S INF THEOR, p1s4
   Chen J., 2010, P 10 INT WORKSH CONS
   Chung I., 2017, International Journal of Applied Engineering Research, V12, P7294
   CLAESSEN K, 2003, P CADE 19 WORKSH MOD
   Corzilius F, 2015, LECT NOTES COMPUT SC, V9340, P360, DOI 10.1007/978-3-319-24318-4_26
   DAVIS M, 1960, J ACM, V7, P201, DOI 10.1145/321033.321034
   DAVIS M, 1962, COMMUN ACM, V5, P394, DOI 10.1145/368273.368557
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Demsky B, 2015, ACM SIGPLAN NOTICES, V50, P20, DOI [10.1145/2814270.2814297, 10.1145/2858965.2814297]
   Desai A, 2013, ACM SIGPLAN NOTICES, V48, P321, DOI 10.1145/2499370.2462184
   Dillig I, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P270, DOI 10.1145/1375581.1375615
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Feng Yu, 2017, SYPET
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P191, DOI 10.1145/565816.503291
   Frisch Alan M., 2010, P 10 INT WORKSH CONS
   Ganesh V, 2007, LECT NOTES COMPUT SC, V4590, P519
   Gecode, 2016, GEN CONSTR DEV ENV
   Gent I.P., 2005, Modelling and Solving Problems with Constraints, V2
   Gent Ian, 2010, ARXIV10084326
   Godefroid Patrice, 2005, ACM SIGPLAN NOTICES, P213, DOI DOI 10.1145/1064978.1065036
   Gualandi H.M., 2012, Using an industrial-strength SAT solver to solve the Hexiom puzzle
   Haim S, 2009, LECT NOTES COMPUT SC, V5584, P312, DOI 10.1007/978-3-642-02777-2_30
   Holldobler Steffen, 2013, EFFICIENT ENCODING A
   Huang J, 2015, ACM SIGPLAN NOTICES, V50, P165, DOI [10.1145/2737924.2737975, 10.1145/2813885.2737975]
   Huang J, 2014, ACM SIGPLAN NOTICES, V49, P337, DOI [10.1145/2666356.2594315, 10.1145/2594291.2594315]
   HUANG JG, 2018, INT C THEOR APPL SAT, P94
   Inala JP, 2016, LECT NOTES COMPUT SC, V9710, P302, DOI 10.1007/978-3-319-40970-2_19
   Iser M., 2012, Theory and Applications of Satisfiability Testing - SAT 2012, P483
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Jha S, 2009, LECT NOTES COMPUT SC, V5643, P668, DOI 10.1007/978-3-642-02658-4_53
   Kalhauge CG, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276516
   Kautz H, 2003, LECT NOTES COMPUT SC, V2833, P1
   Kautz H., 2006, Working Notes on the Fifth International Planning Competition (IPC-2006), P45
   Klieber Will, 2007, EFFICIENT CNF ENCODI
   Klieber Will, 2007, P 4 WORKSH CONSTR FO
   Küchlin W, 2000, J AUTOM REASONING, V24, P145, DOI 10.1023/A:1006370506164
   Kurin V., 2019, ARXIV190911830CSLG
   Liang JH, 2016, LECT NOTES COMPUT SC, V9710, P123, DOI 10.1007/978-3-319-40970-2_9
   Lynce InAls, 2006, SUDOKU SAT PROBLEM
   Manolios Panagiotis, 2007, P 10 INT C THEOR APP
   Manthey Norbert, 2013, Hardware and Software: Verification and Testing. 8th International Haifa Verification Conference, HVC 2012 Revised Selected Papers. LNCS 7857, P102, DOI 10.1007/978-3-642-39611-3_14
   Martins R, 2011, PROC INT C TOOLS ART, P313, DOI 10.1109/ICTAI.2011.54
   Matsunaga Y, 2015, ASIA S PACIF DES AUT, P255, DOI 10.1109/ASPDAC.2015.7059014
   Metodi A., 2012, THEOR PRACT LOG PROG, V12, P4
   Musliu Nysret, APPL MACHINE LEARNIN
   Nguyen Cuong M., 2015, 2015 IEEE MTT-S International Microwave Symposium (IMS2015), P1, DOI 10.1109/MWSYM.2015.7166995
   O'Mahony E., 2008, Irish conference on artificial intelligence and cognitive science, P210
   Peter J., 1987, Simulated annealing
   Pfeiffer U., 2013, LPAR-17-short. short papers for 17th International Conference on Logic for Programming, Artificial intelligence, and Reasoning., P52, DOI DOI 10.29007/79MC
   Rintanen J., 2014, P 8 INT PLANN COMP I, P1
   Robinson Nathan, 2008, PROC INT C AUTOMATED, P296
   Samer M, 2009, LECT NOTES COMPUT SC, V5584, P45, DOI 10.1007/978-3-642-02777-2_6
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Shi QK, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P693, DOI 10.1145/3192366.3192418
   Sigurbjarnarson H, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P1
   Singh R., 2009, Technical Report MIT-CSAIL-TR-2009-039
   Singh R, 2016, PROCEEDINGS OF THE 2016 16TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2016), P185, DOI 10.1109/FMCAD.2016.7886678
   Sinz C, 2005, LECT NOTES COMPUT SC, V3709, P827, DOI 10.1007/11564751_73
   SMT LIB Initiative, 2018, SMT LIB SAT MOD THEO
   Tamura N, 2013, PROC INT C TOOLS ART, P1020, DOI 10.1109/ICTAI.2013.153
   Tamura N, 2009, CONSTRAINTS, V14, P254, DOI 10.1007/s10601-008-9061-0
   Tanjo T., 2012, THEORY APPL SATISFIA, P456
   Tanjo T, 2011, LECT NOTES COMPUT SC, V6695, P375
   Tanno H, 2015, 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, Vol 2, P717, DOI 10.1109/ICSE.2015.231
   Timm N, 2017, LECT NOTES COMPUT SC, V10522, P244, DOI 10.1007/978-3-319-68972-2_16
   Torlak E, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P341, DOI 10.1145/1806596.1806635
   Tortak E, 2007, LECT NOTES COMPUT SC, V4424, P632
   Turkmen Fatih, 2015, Principles of Security and Trust. 4th International Conference, POST 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9036, P115, DOI 10.1007/978-3-662-46666-7_7
   Warners JP, 1998, INFORM PROCESS LETT, V68, P63, DOI 10.1016/S0020-0190(98)00144-6
   Weber Tjark., 2005, LPAR, P11
   WINOGRAD TED, 2009, REVERSE ENG
   Wu HZ, 2017, PROCEEDINGS OF THE 2017 ACM SIGCSE TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION (SIGCSE'17), P787, DOI 10.1145/3017680.3022464
   Xie YC, 2005, LECT NOTES COMPUT SC, V3576, P139
   Xu L, 2008, J ARTIF INTELL RES, V32, P565, DOI 10.1613/jair.2490
   Yu CX, 2017, IEEE T COMPUT AID D, V36, P1647, DOI 10.1109/TCAD.2017.2652220
   Zhang Hantao, 2004, SAT
   Zhou Neng-Fa, 2020, ARXIV200506274CSLO
   Zuo Zhiqiang, 2019, P EUR COMP SYST C
NR 107
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 146
DI 10.1145/3428214
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900023
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU James, MB
   Guo, Z
   Wang, ZT
   Doshi, S
   Peleg, H
   Jhala, R
   Polikarpova, N
AF James, Michael B.
   Guo, Zheng
   Wang, Ziteng
   Doshi, Shivani
   Peleg, Hila
   Jhala, Ranjit
   Polikarpova, Nadia
TI Digging for Fold: Synthesis-Aided API Discovery for Haskell
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Type Inference; Human-Computer Interaction
AB We present HOOGLE+, a web-based API discovery tool for Haskell. A HOOGLE+ user can specify a programming task using either a type, a set of input-output tests, or both. Given a specification, the tool returns a list of matching programs composed from functions in popular Haskell libraries, and annotated with automatically-generated examples of their behavior. These features of HOOGLE+ are powered by three novel techniques. First, to enable efficient type-directed synthesis from tests only, we develop an algorithm that infers likely type specifications from tests. Second, to return high-quality programs even with ambiguous specifications, we develop a technique that automatically eliminates meaningless and repetitive synthesis results. Finally, we show how to extend this elimination technique to automatically generate informative inputs that can be used to demonstrate program behavior to the user. To evaluate the effectiveness of HOOGLE+ compared with traditional API search techniques, we perform a user study with 30 participants of varying Haskell proficiency. The study shows that programmers equipped with HOOGLE+ generally solve tasks faster and were able to solve 50% more tasks overall.
C1 [James, Michael B.; Guo, Zheng; Wang, Ziteng; Doshi, Shivani; Peleg, Hila; Jhala, Ranjit; Polikarpova, Nadia] Univ Calif San Diego, La Jolla, CA 92093 USA.
C3 University of California System; University of California San Diego
RP James, MB (corresponding author), Univ Calif San Diego, La Jolla, CA 92093 USA.
EM m3james@ucsd.edu; zhg069@ucsd.edu; ziw329@ucsd.edu; s1doshi@ucsd.edu;
   hpeleg@eng.ucsd.edu; jhala@cs.ucsd.edu; npolikarpova@ucsd.edu
RI Wang, Ziteng/JQX-0611-2023
OI Wang, Ziteng/0009-0001-8487-8093
FU National Science Foundation [1943623, 1911149]; Division of Computing
   and Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1943623, 1911149] Funding Source: National Science Foundation
FX The authors would like to thank the anonymous reviewers for their
   feedback on the draft of this paper. This work was supported by the
   National Science Foundation under Grants No. 1943623 and 1911149.
CR An JH, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P459, DOI 10.1145/1926385.1926437
   Augusstson Lennart, 2005, DJINN
   Bonnaire-Sergeant Ambrose, 2019, THESIS INDIANA U
   Chasins SE, 2018, UIST 2018: PROCEEDINGS OF THE 31ST ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P963, DOI 10.1145/3242587.3242661
   Chugh R, 2016, ACM SIGPLAN NOTICES, V51, P341, DOI [10.1145/2980983.2908103, 10.1145/2908080.2908103]
   Chugh Ravi, 2011, WORKSHOP SCRIPTS PRO
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Danielsson NA, 2004, LECT NOTES COMPUT SC, V3125, P85
   Di Cosmo Roberto, 1993, Journal ofFunctional Programming, V3, P485
   Drosos I, 2020, PROCEEDINGS OF THE 2020 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'20)
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P317, DOI 10.1145/1925844.1926423
   Guo Z, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371080
   Heineman GT, 2016, LECT NOTES COMPUT SC, V9952, P303, DOI 10.1007/978-3-319-47166-2_21
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Mandelin D, 2005, ACM SIGPLAN NOTICES, V40, P48, DOI 10.1145/1064978.1065018
   Miltner Anders, 2019, P ACM PROGR LANG
   Mitchell Neil, 2004, HOOGLE
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   Peleg H, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1114, DOI 10.1145/3180155.3180189
   Perelman D, 2012, ACM SIGPLAN NOTICES, V47, P275, DOI 10.1145/2345156.2254098
   Plotkin Gordon, 1970, LATTICE THEORETIC PR
   Polozov O., 2017, ARXIV170303539 CORR
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2594291.2594321, 10.1145/2666356.2594321]
   Reynolds John C., 1969, TRANSFORMATIONAL SYS
   Runciman C, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P37
   Singh R, 2015, LECT NOTES COMPUT SC, V9206, P398, DOI 10.1007/978-3-319-21690-4_23
   Urzyczyn P, 1997, LECT NOTES COMPUT SC, V1210, P373
   ViktorKuncak IvanKuraj, 2013, PLDI2013
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
NR 31
TC 10
Z9 10
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 205
DI 10.1145/3428273
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900082
OA gold
DA 2024-07-18
ER

PT J
AU Lagouvardos, S
   Grech, N
   Tsatiris, I
   Smaragdakis, Y
AF Lagouvardos, Sifis
   Grech, Neville
   Tsatiris, Ilias
   Smaragdakis, Yannis
TI Precise Static Modeling of Ethereum "Memory"
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE ethereum; EVM; static analysis
AB Static analysis of smart contracts as-deployed on the Ethereum blockchain has received much recent attention. However, high-precision analyses currently face significant challenges when dealing with the Ethereum VM (EVM) execution model. A major such challenge is the modeling of low-level, transient "memory" (as opposed to persistent, on-blockchain "storage") that smart contracts employ. Statically understanding the usage patterns of memory is non-trivial, due to the dynamic allocation nature of in-memory buffers. We offer an analysis that models EVM memory, recovering high-level concepts (e.g., arrays, buffers, call arguments) via deep modeling of the flow of values. Our analysis opens the door to Ethereum static analyses with drastically increased precision. One such analysis detects the extraction of ERC20 tokens by unauthorized users. For another practical vulnerability (redundant calls, possibly used as an attack vector), our memory modeling yields analysis precision of 89%, compared to 16% for a state-of-the-art tool without precise memory modeling. Additionally, precise memory modeling enables the static computation of a contract's gas cost. This gas-cost analysis has recently been instrumental in the evaluation of the impact of the EIP-1884 repricing (in terms of gas costs) of EVM operations, leading to a reward and significant publicity from the Ethereum Foundation.
C1 [Lagouvardos, Sifis; Grech, Neville; Tsatiris, Ilias; Smaragdakis, Yannis] Univ Athens, Dept Informat & Telecommun, Athens, Greece.
C3 National & Kapodistrian University of Athens
RP Lagouvardos, S (corresponding author), Univ Athens, Dept Informat & Telecommun, Athens, Greece.
EM sifis.lag@di.uoa.gr; me@nevillegrech.com; ilsatiris@di.uoa.gr;
   yannis@smaragd.org
OI Lagouvardos, Sifis/0000-0002-6233-1548
FU Hellenic Foundation for Research and Innovation
FX We gratefully acknowledge funding by the Hellenic Foundation for
   Research and Innovation (project DEAN-BLOCK).
CR Albert Elvira, 2018, AUTOMATED TECHNOLOGY
   Brent Lexi, 2020, PLDI '20: Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation, P454, DOI 10.1145/3385412.3385990
   Brent Lexi, 2018, ARXIVCSPL180903981
   ChainSecurity, 2020, SECURIFY2
   ChainSecurity, 2019, DANG REP CALLS UNTR
   ConsenSys, 2020, CONSENSYS QUOR
   DEDAUB, 2019, CONTR LIB
   Feist J, 2019, 2019 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB 2019), P8, DOI 10.1109/WETSEB.2019.00008
   Grech N., 2015, P 18 INT WORKSHOP SO, P12
   Grech N., 2018, P ACM PROGRAM LANG, DOI DOI 10.1145/3276486
   Grech N, 2019, PROC INT CONF SOFTW, P1176, DOI 10.1109/ICSE.2019.00120
   He JX, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P531, DOI 10.1145/3319535.3363230
   Hildenbrandt E, 2018, P IEEE COMPUT SECUR, P204, DOI 10.1109/CSF.2018.00022
   Holst Martin, 2019, SECURITY CONSIDERATI
   Jiang B, 2018, IEEE INT CONF AUTOM, P259, DOI 10.1145/3238147.3238177
   Jordan H, 2016, LECT NOTES COMPUT SC, V9780, P422, DOI 10.1007/978-3-319-41540-6_23
   Kolinko Tomasz, 2018, EVEEM PANORAMIX S SH
   Kolluri A, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P363, DOI 10.1145/3293882.3330560
   Krupp J, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P1317
   Lagouvardos Sifis, 2020, MEMORY, DOI [10.5281/zenodo.4059797, DOI 10.5281/ZENODO.4059797]
   Levi Adam, 2019, TECHNICAL ANAL GENES
   Luu L, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P254, DOI 10.1145/2976749.2978309
   Mavridou A, 2018, LECT NOTES COMPUT SC, V10957, P523, DOI 10.1007/978-3-662-58387-6_28
   Mossberg M, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P1186, DOI 10.1109/ASE.2019.00133
   Mueller B., 2018, HITB SECCONF AMSTERD, V9, P54
   Nikolic I, 2018, 34TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2018), P653, DOI 10.1145/3274694.3274743
   Permenev Anton, 2019, VERX SAFETY VERIFICA
   Smaragdakis Y, 2019, PROCEEDINGS OF THE 2019 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD!' 19), P187, DOI 10.1145/3359591.3359739
   Tsankov P, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P67, DOI 10.1145/3243734.3243780
   Valentin WA., 2020, INT C SOFTW ENG ICSE
   Various, 2018, RATTL EVM BIN STAT A
   Various, 2018, TRON DEC WEB
   Various, 2019, GITHUB EW DES MET
   Various, 2015, HYP AASAAOPEN SOURC
NR 34
TC 11
Z9 11
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 190
DI 10.1145/3428258
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900067
OA gold
DA 2024-07-18
ER

PT J
AU Stiévenart, Q
   Madsen, M
AF Stievenart, Quentin
   Madsen, Magnus
TI Fuzzing Channel-Based Concurrency Runtimes using Types and Effects
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE automatic test generation; channels and processes; effect systems
AB Modern programming languages support concurrent programming based on channels and processes. Channels enable synchronous and asynchronous message-passing between independent light-weight processes making it easy to express common concurrency patterns.
   The implementation of channels and processes in compilers and language runtimes is a difficult task that relies heavily on traditional and error-prone low-level concurrency primitives, raising concerns about correctness and reliability.
   In this paper, we present an automatic program generation technique to test such programming language implementations. We define a type and effect system for programs that communicate over channels and where every execution is guaranteed to eventually terminate. We can generate and run such programs, and if a program fails to terminate, we have found a bug in the programming language implementation.
   We implement such an automatic program generator and apply it to Go, Kotlin, Crystal, and Flix. We find two new bugs in Flix, and reproduce two bugs; one in Crystal and one in Kotlin.
C1 [Stievenart, Quentin] Vrije Univ Brussel, Pl Laan 2, Brussels, Belgium.
   [Madsen, Magnus] Aarhus Univ, Abogade 34, Aarhus, Denmark.
C3 Vrije Universiteit Brussel; Aarhus University
RP Stiévenart, Q (corresponding author), Vrije Univ Brussel, Pl Laan 2, Brussels, Belgium.
EM quentin.slievenart@vub.be; magnusm@cs.au.dk
OI Stievenart, Quentin/0000-0001-9985-9808
CR [Anonymous], 2015, Principles of program analysis
   Böhme M, 2019, IEEE T SOFTWARE ENG, V45, P489, DOI 10.1109/TSE.2017.2785841
   Cummins C, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P95, DOI 10.1145/3213846.3213848
   Dewey K, 2015, IEEE INT CONF AUTOM, P482, DOI 10.1109/ASE.2015.65
   Dewey Kyle, 2014, P 29 ACMIEEE INT C A, P725
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Fetscher B, 2015, LECT NOTES COMPUT SC, V9032, P383, DOI 10.1007/978-3-662-46669-8_16
   Godefroid P, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P206, DOI 10.1145/1375581.1375607
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Holler Christian, 2012, USENIX SEC S
   Koroglu Y, 2019, INT WORKSH AUTOMAT, P28, DOI 10.1109/AST.2019.00010
   Lemieux C, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P254, DOI 10.1145/3213846.3213874
   Lidbury C, 2015, ACM SIGPLAN NOTICES, V50, P65, DOI [10.1145/2737924.2737986, 10.1145/2813885.2737986]
   Mathis B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P548, DOI 10.1145/3314221.3314651
   Midtgaard J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110259
   MILLER BP, 1990, COMMUN ACM, V33, P32, DOI 10.1145/96267.96279
   Nielson F, 1999, LECT NOTES COMPUT SC, V1710, P114
   Palka Michal H, 2011, P 6 INT WORKSH AUT S, P91, DOI DOI 10.1145/1982595.1982615
   Stephens N, 2016, 23RD ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2016), DOI 10.14722/ndss.2016.23368
   TIOBE, 2020, TIOBE IND AUG 2020
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P216, DOI [10.1145/2666356.2594334, 10.1145/2594291.2594334]
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
NR 22
TC 2
Z9 2
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 186
DI 10.1145/3428254
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900063
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Winterer, D
   Zhang, CY
   Su, ZD
AF Winterer, Dominik
   Zhang, Chengyu
   Su, Zhendong
TI On the Unusual Effectiveness of Type-Aware Operator Mutations for
   Testing SMT Solvers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE SMT solvers; Fuzz testing; Type-aware operator mutation
AB We propose type-aware operator mutation, a simple, but unusually effective approach for testing SMT solvers. The key idea is to mutate operators of conforming types within the seed formulas to generate well-typed mutant formulas. These mutant formulas are then used as the test cases for SMT solvers. We realized type-aware operator mutation within the OpFuzz tool and used it to stress-test Z3 and CVC4, two state-of-the-art SMT solvers. Type-aware operator mutations are unusually effective: During one year of extensive testing with OpFuzz, we reported 1,092 bugs on Z3's and CVC4's respective GitHub issue trackers, out of which 819 unique bugs were confirmed and 685 of the confirmed bugs were fixed by the developers. The detected bugs are highly diverse - we found bugs of many different types (soundness bugs, invalid model bugs, crashes, etc.), logics and solver configurations. We have further conducted an in-depth study of the bugs found by OpFuzz. The study results show that the bugs found by OpFuzz are of high quality. Many of them affect core components of the SMT solvers' codebases, and some required major changes for the developers to fix. Among the 819 confirmed bugs found by OpFuzz, 184 were soundness bugs, the most critical bugs in SMT solvers, and 489 were in the default modes of the solvers. Notably, OpFuzz found 27 critical soundness bugs in CVC4, which has proved to be a very stable SMT solver.
C1 [Winterer, Dominik; Su, Zhendong] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
   [Zhang, Chengyu] East China Normal Univ, Software Engn Inst, Shanghai, Peoples R China.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; East China
   Normal University
RP Winterer, D (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
EM dominik.winterer@inf.ethz.ch; dale.chengyu.zhang@gmail.com;
   zhendong.su@inf.ethz.ch
OI Zhang, Chengyu/0000-0002-7285-289X; Su, Zhendong/0000-0002-2970-1391
FU China Scholarship Council; NSFC [61632005, 61532019]
FX We thank the anonymous SPLASH/OOPSLA reviewers for their valuable
   feedback. Our special thanks go to the Z3 and CVC4 developers,
   especially Nikolaj Bjurner, Lev Nachmanson, Christoph M. Wintersteiger,
   Murphy Berzish, Arie Gurfinkel, Andrew Reynolds, Andres Notzli, Haniel
   Barbosa, Clark Barrett, etc., for useful information and addressing our
   bug reports. Chengyu Zhang was partially supported by the China
   Scholarship Council, NSFC Projects No. 61632005 and No. 61532019.
CR Aschermann C, 2019, 26TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2019), DOI 10.14722/ndss.2019.23412
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Barrett C., 2010, P 8 INT WORKSHOP SAT, V13, P14
   Barrett C., 2020, The satisfiability modulo theories library (SMT-LIB)
   Berzish M, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P55, DOI 10.23919/FMCAD.2017.8102241
   Blotsky D, 2018, LECT NOTES COMPUT SC, V10982, P45, DOI 10.1007/978-3-319-96142-2_6
   Brummayer R, 2009, LECT NOTES COMPUT SC, V5505, P174, DOI 10.1007/978-3-642-00768-2_16
   Brummayer Robert, 2009, INT WORKSH SAT MOD T, P1
   Bugariu A, 2018, IEEE INT CONF AUTOM, P768, DOI 10.1145/3238147.3240464
   Bugariu Alexandra, 2020, ICSE, P459
   Cadar C., 2008, OSDI, V8, P209, DOI DOI 10.5555/1855741.1855756
   Cadar C, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P765, DOI 10.1145/2889160.2889206
   Cha SK, 2015, P IEEE S SECUR PRIV, P725, DOI 10.1109/SP.2015.50
   Cimatti A, 2013, LECT NOTES COMPUT SC, V7795, P93
   Corina J, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2123
   Cummins C, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P95, DOI 10.1145/3213846.3213848
   CVC4, 2020, CVC4 REGR TEST SUIT
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DeLine Rob, 2005, BOOGIEPL TYPED PROCE
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Han H, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2345, DOI 10.1145/3133956.3134103
   Jung JH, 2019, PROC VLDB ENDOW, V13, P57, DOI 10.14778/3357377.3357382
   Klinger C, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P239, DOI 10.1145/3293882.3330553
   Lampropoulos Leonidas, 2019, OOPSLA, V181
   Lemieux C, 2018, IEEE INT CONF AUTOM, P475, DOI 10.1145/3238147.3238176
   Li YK, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P627, DOI 10.1145/3106237.3106295
   Lidbury C, 2015, ACM SIGPLAN NOTICES, V50, P65, DOI [10.1145/2737924.2737986, 10.1145/2813885.2737986]
   Mishra C., 2008, SIGMOD, P499, DOI DOI 10.1145/1376616.1376668
   Niemetz Aina., 2017, Proceedings of the 15th International Workshop on Satisfiability Modulo Theories, SMT 2017), affiliated with the 29th International Conference on Computer Aided Verification, CAV 2017, Heidelberg, Germany, July 24-28, 2017, P10
   Niemetz Aina, 2013, P 11 INT WORKSHOP SA, P8
   Numair Mansur, 2020, DETECTING CRITICAL B
   Pauck F, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P331, DOI 10.1145/3236024.3236029
   Pham Van-Thuan, 2019, TSE
   Qiu LN, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P176, DOI 10.1145/3213846.3213873
   Regehr J, 2012, ACM SIGPLAN NOTICES, V47, P335, DOI 10.1145/2345156.2254104
   Reynolds Andrew, 2015, CAV
   Rigger Manuel, 2020, ESEC/FSE 2020: Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, P1140, DOI 10.1145/3368089.3409710
   Schumilo S, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P167
   Scott Joseph, 2020, CAV
   Seltenreich A, 2020, SQLSMITH
   SMT-LIB, 2020, SMT LIB BENCHMARKS
   Solarlezama Armando, 2008, PROGRAM SYNTHESIS SK
   The International SMT Competition, 2020, SMT COMP
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P216, DOI [10.1145/2666356.2594334, 10.1145/2594291.2594334]
   Wang JJ, 2019, PROC INT CONF SOFTW, P724, DOI 10.1109/ICSE.2019.00081
   Winterer D, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P718, DOI 10.1145/3385412.3385985
   Wu J., 2013, P 2013 9 JOINT M FDN, DOI [10.1145/2491411.2491439, DOI 10.1145/2491411.2491439]
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Z3, 2020, Z3 REGRESSION TEST S
   Zalewski Michal, 2020, American fuzz lop
   Zhang CY, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P763, DOI 10.1145/3338906.3338932
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P347, DOI [10.1145/3062341.3062379, 10.1145/3140587.3062379]
NR 54
TC 23
Z9 23
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 193
DI 10.1145/3428261
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900070
OA Green Submitted, gold, Green Published
DA 2024-07-18
ER

PT J
AU Xie, NN
   Brachthäuser, JI
   Hillerström, D
   Schuster, P
   Leijen, D
AF Xie, Ningning
   Brachthaeuser, Jonathan Immanuel
   Hillerstroem, Daniel
   Schuster, Philipp
   Leijen, Daan
TI Effect Handlers, Evidently
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Algebraic Effects; Handlers; Evidence Passing Translation
AB Algebraic effect handlers are a powerful way to incorporate effects in a programming language. Sometimes perhaps even too powerful. In this article we define a restriction of general effect handlers with scoped resumption. We argue one can still express all important effects, while improving reasoning about effect handlers. Using the newly gained guarantees, we define a sound and coherent evidence translation for effect handlers, which directly passes the handlers as evidence to each operation. We prove full soundness and coherence of the translation into plain lambda calculus:The evidence in turn enables efficient implementations of effect operations; in particular, we show we can execute tail-resumptive operations in place (without needing to capture the evaluation context), and how we can replace the runtime search for a handler by indexing with a constant offset.
C1 [Xie, Ningning; Leijen, Daan] Microsoft Res, Redmond, WA 98052 USA.
   [Brachthaeuser, Jonathan Immanuel; Schuster, Philipp] Univ Tubingen, Tubingen, Germany.
   [Hillerstroem, Daniel] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
C3 Microsoft; Eberhard Karls University of Tubingen; University of
   Edinburgh
RP Xie, NN (corresponding author), Microsoft Res, Redmond, WA 98052 USA.
EM nnxie@cs.hku.hk; jonathan.brachthaeuser@uni-tuebingen.de;
   daniel.hillerstrom@ed.ac.uk; philipp.schuster@uni-tuebingen.de;
   daan@microsoft.com
OI Hillerstrom, Daniel/0000-0003-4730-9315; Brachthauser, Jonathan
   Immanuel/0000-0001-9128-0391
CR [Anonymous], 1995, LISP SYMB COMPUT, DOI DOI 10.1007/BF01018827
   [Anonymous], 1994, THEORETICAL ASPECTS
   Baars AI, 2002, ACM SIGPLAN NOTICES, V37, P157, DOI 10.1145/583852.581494
   Bauer A, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:9)2014
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Biernacki D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371116
   Biernacki Dariusz, 2017, P ACM PROGR LANG
   Brachthäuser JI, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276481
   Brachthäuser JI, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000027
   Brachthauser Jonathan Immanuel, 2017, SCALA 17
   Brachthauser Jonathan Immanuel, 2020, EFFEKT LIGHTWEIGHT E
   Daan Leijen, 2019, KOKA REPOSITORY
   de Moura Leonardo, 2019, P 31 S IMPL APPL FUN
   Dolan S., 2015, OCAML WORKSHOP
   Dolan Stephen, 2017, P S TRENDS FUNCT PRO, DOI DOI 10.1007/978-3-319-89719-6_6
   Dyvbig RK, 2007, J FUNCT PROGRAM, V17, P687, DOI 10.1017/S0956796807006259
   Forster Y, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000121
   Gaster Ben R., 1996, NOTTCSTR963 U NOTT
   Gunter C. A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P12, DOI 10.1145/224164.224173
   Hillerstrom Daniel, 2018, Programming Languages and Systems. 16th Asian Symposium, APLAS 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11275), P415, DOI 10.1007/978-3-030-02768-1_22
   Hillerstrom Daniel, 2017, Formal Structures for Computation and Deduction (LIPIcs, V84
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   JONES MP, 1992, LECT NOTES COMPUT SC, V582, P287
   Kammar O, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000320
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kiselyov O, 2006, ACM SIGPLAN NOTICES, V41, P26, DOI 10.1145/1160074.1159808
   Kiselyov O, 2013, ACM SIGPLAN NOTICES, V48, P59, DOI 10.1145/2503778.2503791
   Kiselyov O, 2009, LECT NOTES COMPUT SC, V5658, P360, DOI 10.1007/978-3-642-03034-5_17
   Leijen D., 2005, P 2005 S TRENDS FUNC, P297
   Leijen D, 2017, LECT NOTES COMPUT SC, V10695, P339, DOI 10.1007/978-3-319-71237-6_17
   Leijen D, 2017, PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE' 17), P16, DOI 10.1145/3122975.3122977
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Lindley Sam, 2012, TLDI, P91, DOI DOI 10.1145/2103786.2103798
   Pitts AM, 1998, LECT NOTES COMPUT SC, V1443, P309, DOI 10.1007/BFb0055063
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pretnar M., 2017, CW REPORTS
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Pretnar Matija, 2010, Phdthesis
   Schuster P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408975
   van der Ploeg A, 2014, ACM SIGPLAN NOTICES, V49, P133, DOI [10.1145/2633357.2633360, 10.1145/2775050.2633360]
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Xie NN, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408981
   Xie Ningning., P 13 ACM SIGPLAN INT, P2020, DOI DOI 10.1145/3406088.3409022
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
NR 48
TC 14
Z9 15
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 99
DI 10.1145/3408981
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700013
OA gold
DA 2024-07-18
ER

PT J
AU Hui, RKW
   Kromberg, MJ
AF Hui, Roger K. W.
   Kromberg, Morten J.
TI APL Since 1978
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
C1 [Hui, Roger K. W.] Dyalog Ltd, Toronto, ON, Canada.
   [Kromberg, Morten J.] Dyalog Ltd, Bramley RG26 5BH, Hants, England.
RP Hui, RKW (corresponding author), Dyalog Ltd, Toronto, ON, Canada.; Kromberg, MJ (corresponding author), Dyalog Ltd, Bramley RG26 5BH, Hants, England.
EM roger@dyalog.com; morten@dyalog.com
CR Abramowitz M., 1964, Handbook of mathematical functions with formulas, graphs, and mathematical tables, V55, DOI DOI 10.1119/1.15378
   Abrams P. S., 1970, THESIS STANFORD U
   ACM, 1973, GRAC MURR HOPP AW
   Aho AV., 1974, DESIGN ANAL COMPUTER
   Amazon, 2018, AL PRES LANG APL OV
   [Anonymous], 1940, A Mathematician's Apology
   [Anonymous], 2003, ONL A REF MAN
   [Anonymous], 1978, ACM SIGPLAN NOTICES, DOI DOI 10.1145/960118.808391
   [Anonymous], 1973, The art of computer programming
   Astrachan Owen L, 2003, P 34 SIGCSE TECHN S
   BACKUS J, 1978, COMMUN ACM, V21, P613, DOI 10.1145/359576.359579
   Baker Henry G., 1977, P S ART INT PROGR LA, V12, P8
   Barzun Jacques., 2000, From Dawn to Decadence : 500 Years of Western Cultural Life : 1500 to the Present
   BENTLEY J, 1983, COMMUN ACM, V26, P623, DOI 10.1145/358172.358176
   Bernecky R., 1990, APL Quote Quad, V20, P40, DOI 10.1145/97811.97821
   Bernecky Robert, 1977, I P SHARP NEWSLETTER, V5, P1
   Bernecky Robert, 2016, DYAL US M 2016 5 OCT
   Bernecky Robert, 1980, 1980 APL US M P 6 8
   Bernecky Robert, 1983, SATN 45 LANGUAGE EXT
   Bernecky Robert, 1987, APL QUOTE QUAD, V18, P2, DOI [10.1145/55626.55632, DOI 10.1145/55626.55632]
   Bernecky Robert, 1997, THESIS U TORONTO
   Bernecky Robert, 1973, P APL C, V73
   BERRY P, 1979, SHARP APL REFERENCE
   Brooks Frederick P., 2006, VECTOR AUG, V22
   Brooks Jr Frederick P., 1999, MAKINNUMBERS HOWARD, P137
   Brown James A., 1988, MY FAVORITE IDIOM
   Brown James A., 2017, E COMMUNCIATION 1101
   Brown James A., 2016, APL J, V35, P3
   Brown James A, 1971, THESIS SYRACUSE U
   Brown James A, 1984, 03247 TR IBM SANTA T
   Brudzewsky Adam, 2018, TAO AXIOMS
   Bunda J., 1987, APL Quote Quad, V17, P253, DOI 10.1145/384282.28346
   Burke Chris, 1996, J PHRASES
   Cantrill Bryan M, 2009, QUEUE, V7, DOI [10.1145/1515964.1531242, DOI 10.1145/1515964.1531242]
   Cassani O.G., 2018, MATH INTELL, V40
   Chen Hanfeg, 2017, PLDI ARRAY 2017, DOI [10.1145/3091966.3091969, DOI 10.1145/3091966.3091969]
   Cheney Carl M, 1981, APL PLUS NESTED ARRA
   Christensen Gitte, 2006, VECTOR AUG, V22, P3
   Christensen Gitte, 2014, 4 HIST NORDIC COMPUT
   Dijkstra W, 1982, EWD831, V11
   DRISCOLL GC, 1986, IBM J RES DEV, V30, P583, DOI 10.1147/rd.306.0583
   Dyalog, DYAL APL LANG REF GU
   Dyalog, 2008, REL NOT VERS 12 0
   Dyalog, 2016, PAR LANG FEAT VERS 1
   Dyalog, 2008, VECTOR SEP
   Dyalog, 2018, DYAL PROGR REF GUID
   Dyalog, 2019, RIDE US GUID VERS 4
   Dyalog, 2015, DY APL VERS 14 0 REL
   Dyalog, 2014, DYAL APL ID
   Ewald William., 1996, KANT HILBERT SOURCE, V1
   Falkoff A. D., 1978, SIGPLAN Notices, V13, P47, DOI 10.1145/960118.808372
   FALKOFF AD, 1991, IBM SYST J, V30, P416, DOI 10.1147/sj.304.0416
   FALKOFF AD, 1973, IBM J RES DEV, V17, P324, DOI 10.1147/rd.174.0324
   FALKOFF AD, 1964, IBM SYST J, V3, P198, DOI 10.1147/sj.32.0198
   Falkoff Adin D., 1982, APL QUOTE QUAD, V13, P1, DOI [10.1145/800071.802230, DOI 10.1145/800071.802230]
   Falkoff Adin D, 1973, APLSV USERS MANUAL
   Falkoff Adin D., 1968, APL 360 US MAN
   Falkoff Adin D., 1969, P APL US C SUNY BING
   Falkoff Adin D, 1967, RC1922 IBM CORP
   Fielding Roy Thomas, 2000, Architectural styles and the design of network-based software architectures, Patent No. AAI9980887
   FinnAPL, 2008, FINNAPL ID LIB 2008
   Foad Jay M., 2017, DYAL US M 2017 11 SE
   Friedman D. P., 1976, Proceedings of the 1976 International Conference on Parallel Processing, P263
   GARDNER M, 1970, SCI AM, V223, P120, DOI 10.1038/scientificamerican1070-120
   Gauss C.F, 1831, GOTTINGISCHE GELEHRT
   Goldsmith Leslie H., 1980, 1980 APL US M P OCT
   Gosling J., 2015, JAVA LANGUAGE SPECIF
   Graham A., 1989, APL Quote Quad, V19, P178, DOI 10.1145/75145.75169
   Graham RL., 1989, Concrete Mathematics
   Gregory Kate, 2003, MANAGED UNMANAGED NA
   Herstein Israel Nathan, 1975, Topics in Algebra, V2nd
   Hillis W.Daniel., 1985, CONNECTION MACHINE
   Hodgkinson Rob D, 2017, J PROGRAMMING F 1019
   Hsu Aaron W., 2019, THESIS INDIANA U
   Hui K.W, 2010, JWIKI ESSAY
   Hui K.W., 2016, HIST APL 50 FUNCTION
   Hui R. K. W., 1995, APL Quote Quad, V25, P83, DOI 10.1145/206944.206968
   Hui RKW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3386319
   Hui Roger K.W., 2004, REMEMBERING K IVERSO
   Hui Roger K.W., 2006, J WIKI ESSAY
   Hui Roger K.W., 2017, CALCULATION V LOOK U
   Hui Roger K.W., 2010, APL 2010 LPA C P
   Hui Roger K.W., 1989, J INTRO DICT
   Hui Roger K.W., 2012, VECTOR MAR, V25
   Hui Roger K.W., 2016, APL LANGUAGE DESIGN
   Hui Roger K.W., 2005, J WIKI ESSAY
   Hui Roger K.W., 2010, 2010E IS ORIGIN 0 HI
   Hui Roger K.W., 2020, DYALOG APL CHAT FORU
   Hui Roger K.W, 1979, APL QUOTE QUAD, V10, DOI [10.1145/602312.602317, DOI 10.1145/602312.602317]
   Hui Roger K.W., 2010, JWIKI ESSAY
   Hui Roger K.W., 1998, SPARSE ARRAYS J
   Hui Roger K.W., 2009, BRIT APL ASS C 2009
   Hui Roger K.W., 1990, APL QUOTE QUAD, V20, P4
   Hui Roger K.W., 1987, APL QUOTE QUAD, V17, P4
   Hui Roger K.W., 1996, J IMPLEMENTATION STA
   Hui Roger K.W., 2018, DYADIC GRADE
   Hui Roger K.W., 2016, VECTOR MAR, V26
   Hui Roger K.W., 1991, APL QUOTE QUAD, V21, P4
   Hui Roger K.W., 2013, DYAL US C 2013 22 OC
   Hui Roger K.W., 1992, IMPLEMENTATION J
   Hui Roger K.W., 2007, J WIKI ESSAY
   Hui Roger K.W., 2015, PERMUTATIONS
   Hui Roger K.W., 2010, APL QUOTATIONS ANECD
   Hui Roger K.W., 1981, APL QUOTE QUAD, V11
   Hui Roger K.W., 1992, VECTOR OCT, V9
   Hui Roger K.W., 2014, J C 2014
   Hui Roger K.W., 2000, JSOFTWARE RELEASE NO
   Hui Roger K.W., 2005, INTERVAL INDEX IMPLE
   Hui Roger K.W., 2010, VECTOR DEC, V24
   Hui Roger K.W, 1993, VECTOR APR, V9
   Hui Roger K.W., 2018, DYAL US M 2018 1 NOV
   Hui Roger K.W., 2017, DYAL US M 2017 10 SE
   Hui Roger K.W., 2005, K IVERSON QUOTATIONS
   Hui Roger K.W., 2016, DYAL US M 2016 10 OC
   Hui Roger K.W, 2013, VECTOR SEP, V26
   Hui Roger K.W., 2017, DYAL US M 2017 11 SE
   IBM, 1994, APL2 PROGR LANG REF, V2
   IBM, 1975, APL LANG GC26 3847
   Iliffe John K., 1961, ANN REV AUTOMATIC PR, V2, P1, DOI [10.1016/S0066-4138(61)80002-5, DOI 10.1016/S0066-4138(61)80002-5]
   Intel, 2019, INT INTR GUID BIT MA
   IPSA, 1975, I P SHARP NEWSL, P6
   IPSA, 1979, I P SHARP NEWSL, V7, P5
   IPSA, 1978, I P SHARP NEWSL, V6, P1
   ISO/IEC, 2011, 19075 ISOIEC TR
   ISO/IEC, 1993, 10646 ISOIEC
   ISO/IEC, 2001, 137512001E ISOIEC
   Iverson Eric B., 1978, 1978 APL US M P SEPT, P13
   Iverson Eric B., 2016, E COMMUNICATION 0412
   Iverson Eric B., 1982, 1982 APL US M P 1982, P83
   Iverson K. E., 1981, APL Quote Quad, V12, P142, DOI 10.1145/390007.805349
   Iverson K. E., 1988, APL Quote Quad, V19, P3, DOI 10.1145/379279.379330
   Iverson K. E., 1983, APL Quote Quad, V13, P223, DOI 10.1145/390005.801221
   Iverson K. E., 1962, A Programming Language
   IVERSON KE, 1980, COMMUN ACM, V23, P444, DOI 10.1145/358896.358899
   IVERSON KE, 1964, COMMUN ACM, V7, P80, DOI 10.1145/363921.363933
   IVERSON KE, 1991, IBM SYST J, V30, P582, DOI 10.1147/sj.304.0582
   IVERSON KE, 1966, ELEMENTARY FUNCTIONS
   IVERSON KE, 1969, USE APL TEACHING
   Iverson Kenneth E., 1980, I P SHARP NEWSL, V8, P1
   Iverson Kenneth E, 1973, INTRO APL SCI ENG
   Iverson Kenneth E., 1984, APL QUOTE QUAD, V14, P4
   Iverson Kenneth E., 1986, APPL MATH PROGRAMMER
   Iverson Kenneth E, 1954, THESIS HARVARD U
   Iverson Kenneth E., 1990, VECTOR OCT, V7
   Iverson Kenneth E., 1954, P 1 C TRAIN PERS COM
   Iverson Kenneth E., 1989, APL QUOTE QUAD, V19, P4
   Iverson Kenneth E., 1972, INTRO APL TEACHERS
   Iverson Kenneth E., 2008, KE IVERSON
   Iverson Kenneth E, 1978, 1978 APL US M P 18 S
   Iverson Kenneth E., 1972, ALGEBRA ALGORITHMIC
   Iverson Kenneth E, 1981, SATN 41 COMPOSITION
   Iverson Kenneth E., 1986, MATH PROGRAMMING
   Iverson Kenneth E., 1987, APL QUOTE QUAD, V18, P1, DOI [10.1145/36983.36984, DOI 10.1145/36983.36984]
   Iverson Kenneth E., 1982, APL QUOTE QUAD, V13, P1
   Iverson Kenneth E, 1974, ELEMENTARY FUNCTIONS
   Iverson Kenneth E, 1976, ELEMENTARY ANAL
   Iverson Kenneth E, 1978, RC7091
   Iverson Kenneth E, PROGRAMMING J
   Iverson Kenneth E., 1983, RATIONALIZED APL
   Iverson Kenneth E., 1989, COMMUNICATION
   JENKINS MA, 1989, SOFTWARE PRACT EXPER, V19, P111, DOI 10.1002/spe.4380190203
   Johnston Ronald L., 1977, HEWLETT PACKARD J
   Jonathan Barman, 1991, VECTOR OCT, V8, P2
   Jsoftware, 2017, JD INDEX
   Jsoftware, 2018, GIT REPOSITORIES
   KELLEY RA, 1973, IBM J RES DEV, V17, P69, DOI 10.1147/rd.171.0069
   Kelley Robert A, 1972, 3203299 IBM PAL ALT
   Knuth D., 1968, The Art of Computer Programming
   KNUTH DE, 1974, COMMUN ACM, V17, P667, DOI 10.1145/361604.361612
   KNUTH DE, 1992, AM MATH MON, V99, P403, DOI 10.2307/2325085
   Kondrashev A., 1991, APL Quote Quad, V22, P8, DOI 10.1145/130647.130656
   Kromberg Morten J., 2007, P 2007 S DYN LANG DL, DOI DOI 10.1145/1297081.1297087
   Lochbaum Marshall W., 2017, DYAL US M 2017 12 SE
   McCarthy John, 1959, LISP PROGRAMMERS MAN
   McDonnell E. E., 1986, APL Quote Quad, V16, P289, DOI 10.1145/22008.22050
   McDonnell Eugene E., 1981, SATN 40 COMPLEX NUMB
   McDonnell Eugene E., 1977, APL QUOTE QUAD, V8, P2
   McDonnell Eugene E., 1976, APL76 C P
   McDonnell Eugene E., 2003, VECTOR OCT, V20, P2
   McDonnell Eugene E., 1980, APL80 C P
   McDonnell Eugene E., 1981, SOURCE BOOK APL INTR
   McGrew Jon, 2016, APL J, V35, P21
   Microsoft, 2017, OV NET FRAM
   Moore Roger D., 2005, IPSANET DOCUMENTS
   Moore Roger D., 2017, E COMMUNICATION 1101
   Munsey Grant J., 1977, HEWLETT PACKARD J
   Nickolov Nikolay G., 2013, VECTOR SEP, V26
   Orth Donald L., 1981, APL QUOTE QUAD, V12, DOI [10.1145/586656.586662, DOI 10.1145/586656.586662]
   Orth Donald L, 2006, KDB DATABASE REFEREN
   Pakin Sandra, 1972, APL 360 REFERENCE MA, V2nd
   Penfield Paul L., 1981, APL QUOTE QUAD, V12, P1, DOI [10.1145/800142.805368, DOI 10.1145/800142.805368]
   Penfield Paul L, 1975, APL QUOTE QUAD, V6, P1, DOI [10.1145/585923.585930, DOI 10.1145/585923.585930]
   Penfield Paul L., 1979, APL QUOTE QUAD, V9, P4, DOI [10.1145/800136.804438, DOI 10.1145/800136.804438]
   Perlis Alan J, 1977, APL IDIOM LIST
   Perlis Alan J., 1978, APL78 C 29 MARCH
   Pesch R. H., 1981, APL Quote Quad, V12, P258, DOI 10.1145/390007.805370
   Pesch Roland H., 2004, E COMMUNICATION 1111
   Phil Last, 2010, COMP LANG APL N 0826
   Potyok R. L., 1987, APL Quote Quad, V18, P264, DOI 10.1145/377719.55663
   Rich Henry H., 2020, E COMMUNICATION 0207
   Saigusa Kyosuke, 1994, APL QUOTE QUAD, V25, P1, DOI [10.1145/190271.190305, DOI 10.1145/190271.190305]
   Sauermann Jurgen, 2013, GNU APL
   Scholes John, 2013, DYAL US M 2013 22 OC
   Scholes John, 1996, VECTOR OCT, V13
   Scholes John, 2018, DYAL US M 2018 31 OC
   Scholes John, 1998, D FUNCTIONS WORKSPAC
   SciPy.org, 2017, BROADC NUMPY US GUID
   Shallit J. O., 1981, APL Quote Quad, V12, P281, DOI 10.1145/390007.805375
   Shaw Lynne C, 1992, APL QUOTE QUAD, V23, P1, DOI [10.1145/144045, DOI 10.1145/144045]
   Sinkarovs A, 2019, ARRAY '2019: PROCEEDINGS OF THE 6TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON LIBRARIES, LANGUAGES AND COMPILERS FOR ARRAY PROGRAMMING, P69, DOI 10.1145/3315454.3329960
   Smith Adrian, 2004, VECTOR APR, V20
   Smith Bob, 2019, E COMMUNICATION 0223
   Smith Bob, 2018, E COMMUNICTION 1118
   Smith Jr Howard J., 1979, APL QUOTE QUAD, V9, P4, DOI [10.1145/800136.804449, DOI 10.1145/800136.804449]
   Stachniak Z, 2011, INVENTING THE PC: THE MCM/70 STORY, P1
   Steinbrook David H, 1986, SAX REFERENCE
   STSC, 1983, APL PLUS PC SYST US
   Sykes Jr Roy A., 2019, E COMMUNICATION 0811
   WADLER P, 1989, COMPUT J, V32, P97, DOI 10.1093/comjnl/32.2.97
   Weigang J., 1985, APL Quote Quad, V15, P231, DOI 10.1145/255315.255676
   Whitney Arthur T., 1989, APL89 PLENARY SESSIO
   Whitney Arthur T., 2006, ABRIDGED KDB DATABAS
   Whitney Arthur T., 2009, ABRIDGED Q LANGUAGE
   Whitney Arthur T., 1992, COMMUNICATION
   Whitney Arthur T., 2006, VECTOR AUG, V22
   Whitney Arthur T., 2016, E COMMUNICATION 0413
   Whitney Arthur T, 1993, VECTOR JUL, V10, P1
   Whitney Arthur T., 2004, E COMMUNICATION 1111
   Wikipedia, 2019, DIR FUNCT
   Wooster Peter K, 1980, SATN 35 EXTENDED UPG
NR 230
TC 3
Z9 3
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 69
DI 10.1145/3386319
PG 108
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900002
OA gold
DA 2024-07-18
ER

PT J
AU An, SW
   Singh, R
   Misailovic, S
   Samanta, R
AF An, Shengwei
   Singh, Rishabh
   Misailovic, Sasa
   Samanta, Roopsha
TI Augmented Example-Based Synthesis using Relational Perturbation
   Properties
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Example Based Synthesis; Ambiguity Resolution
AB Example-based specifications for program synthesis are inherently ambiguous and may cause synthesizers to generate programs that do not exhibit intended behavior on unseen inputs. Existing synthesis techniques attempt to address this problem by either placing a domain-specific syntactic bias on the hypothesis space or heavily relying on user feedback to help resolve ambiguity.
   We present a new framework to address the ambiguity/generalizability problem in example-based synthesis. The key feature of our framework is that it places a semantic bias on the hypothesis space using relational perturbation properties that relate the perturbation/change in a program output to the perturbation/change in a program input. An example of such a property is permutation invariance: the program output does not change when the elements of the program input (array) are permuted. The framework is portable across multiple domains and synthesizers and is based on two core steps: (1) automatically augment the set of user-provided examples by applying relational perturbation properties and (2) use a generic example-based synthesizer to generate a program consistent with the augmented set of examples. Our framework can be instantiated with three different user interfaces, with varying degrees of user engagement to help infer relevant relational perturbation properties. This includes an interface in which the user only provides examples and our framework automatically infers relevant properties. We implement our framework in a tool SKETCHAX specialized to the SKETCH synthesizer and demonstrate that SKETCHAX is effective in significantly boosting the performance of SKETCH for all three user interfaces.
C1 [An, Shengwei; Samanta, Roopsha] Purdue Univ, W Lafayette, IN 47907 USA.
   [Singh, Rishabh] Google Brain, Mountain View, CA USA.
   [Misailovic, Sasa] UIUC, Urbana, IL USA.
C3 Purdue University System; Purdue University; Google Incorporated;
   University of Illinois System; University of Illinois Urbana-Champaign
RP An, SW (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM an93@purdue.edu; rising@google.com; misailo@illinois.edu;
   roopsha@purdue.edu
FU National Science Foundation [1846327, 1846354]; Purdue Research
   Foundation; Purdue University Integrated Data Science Initiative; Direct
   For Computer & Info Scie & Enginr; Division of Computing and
   Communication Foundations [1846354, 1846327] Funding Source: National
   Science Foundation
FX We are grateful to Armando Solar-Lezama for his insightful comments at
   different stages of this work. We also thank our shepherd, Eran Yahav,
   and the anonymous reviewers for their feedback and guidance in improving
   this paper. This material is based upon work supported, in part, by the
   National Science Foundation under Grant No. 1846327 and Grant No.
   1846354 and by grants from the Purdue Research Foundation and the Purdue
   University Integrated Data Science Initiative. Any opinions, findings,
   and conclusions in this paper are those of the authors only and do not
   necessarily reflect the views of our sponsors.
CR Alur R, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P26
   Chen TY, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3143561
   Cimatti Alessandro, 2010, TOOLS ALGORITHMS CON
   Devlin J, 2017, PR MACH LEARN RES, V70
   Drachsler-Cohen D, 2017, LECT NOTES COMPUT SC, V10426, P254, DOI 10.1007/978-3-319-63387-9_13
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gulwani S, 2016, LECT NOTES ARTIF INT, V9706, P9, DOI 10.1007/978-3-319-40229-1_2
   Gulwani S, 2012, COMMUN ACM, V55, P97, DOI 10.1145/2240236.2240260
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P317, DOI 10.1145/1925844.1926423
   Inala Jeevana Priya, 2017, P ACM PROGR LANG PAC, V2
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Kanewala U, 2016, SOFTW TEST VERIF REL, V26, P245, DOI 10.1002/stvr.1594
   Krizhevsky Alex, 2012, ADV NEURAL INFORM PR, V25
   Leung A, 2015, ACM SIGPLAN NOTICES, V50, P565, DOI [10.1145/2813885.2738002, 10.1145/2737924.2738002]
   Lieberman H., 2001, YOUR WISH IS MY COMM
   Lieberman Henry, 2000, COMMUN ACM, V43, p72S74
   Mayer M, 2015, UIST'15: PROCEEDINGS OF THE 28TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P291, DOI 10.1145/2807442.2807459
   Nowozin Sebastian, 2017, INT C LEARN REPR
   Parisotto E., 2017, INT C LEARN REPR ICL
   Peleg H, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1114, DOI 10.1145/3180155.3180189
   Raychev V, 2016, ACM SIGPLAN NOTICES, V51, P761, DOI 10.1145/2914770.2837671
   Simard PY, 2003, PROC INT CONF DOC, P958
   Singh Rishabh, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P634, DOI 10.1007/978-3-642-31424-7_44
   Singh R, 2016, PROC VLDB ENDOW, V9, P816, DOI 10.14778/2977797.2977807
   Singh R, 2015, LECT NOTES COMPUT SC, V9206, P398, DOI 10.1007/978-3-319-21690-4_23
   Singh Rishabh, 2011, FSE, P289, DOI DOI 10.1145/2025113.2025153
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2980983.2908102, 10.1145/2908080.2908102]
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang Yuepeng, 2018, P ACM PROGR LANG PAC, V155
   Zhang Jie, 2014, P 29 ACM IEEE INT C, P701, DOI DOI 10.1145/2642937.2642994
NR 32
TC 3
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 56
DI 10.1145/3371124
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400057
OA gold
DA 2024-07-18
ER

PT J
AU Feldman, YMY
   Immerman, N
   Sagiv, M
   Shoham, S
AF Feldman, Yotam M. Y.
   Immerman, Neil
   Sagiv, Mooly
   Shoham, Sharon
TI Complexity and Information in Invariant Inference
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE invariant inference; complexity; synthesis; exact learning;
   property-directed reachability
ID GENERATION
AB This paper addresses the complexity of SAT-based invariant inference, a prominent approach to safety verification. We consider the problem of inferring an inductive invariant of polynomial length given a transition system and a safety property. We analyze the complexity of this problem in a black-box model, called the Hoare-query model, which is general enough to capture algorithms such as IC3/PDR and its variants. An algorithm in this model learns about the system's reachable states by querying the validity of Hoare triples.
   We show that in general an algorithm in the Hoare-query model requires an exponential number of queries. Our lower bound is information-theoretic and applies even to computationally unrestricted algorithms, showing that no choice of generalization from the partial information obtained in a polynomial number of Hoare queries can lead to an efficient invariant inference procedure in this class.
   We then show, for the first time, that by utilizing rich Hoare queries, as done in PDR, inference can be exponentially more efficient than approaches such as ICE learning, which only utilize inductiveness checks of candidates. We do so by constructing a class of transition systems for which a simple version of PDR with a single frame infers invariants in a polynomial number of queries, whereas every algorithm using only inductiveness checks and counterexamples requires an exponential number of queries.
   Our results also shed light on connections and differences with the classical theory of exact concept learning with queries, and imply that learning from counterexamples to induction is harder than classical exact learning from labeled examples. This demonstrates that the convergence rate of Counterexample-Guided Inductive Synthesis depends on the form of counterexamples.
C1 [Feldman, Yotam M. Y.; Sagiv, Mooly; Shoham, Sharon] Tel Aviv Univ, Tel Aviv, Israel.
   [Immerman, Neil] UMass Amherst, Amherst, MA USA.
C3 Tel Aviv University; University of Massachusetts System; University of
   Massachusetts Amherst
RP Feldman, YMY (corresponding author), Tel Aviv Univ, Tel Aviv, Israel.
EM yotam.feldman@gmail.com; immerman@cs.umass.edu; msagivp@acm.org;
   sharon.shoham@gmail.com
OI Feldman, Yotam/0000-0001-6922-0982
FU European Research Council under the European Union's Horizon 2020
   research and innovation programme [759102-SVIS]; National Science
   Foundation (NSF) [CCF-1617498]; Len Blavatnik and the Blavatnik Family
   foundation; Blavatnik Interdisciplinary Cyber Research Center, Tel Aviv
   University; United States-Israel Binational Science Foundation (BSF)
   [2016260]; Israeli Science Foundation (ISF) [1810/18]
FX We thank our shepherd and the anonymous referees for comments that
   improved the paper. We thank Kalev Alpernas, Nikolaj Bjurner, P.
   Madhusudan, Yishay Mansour, Oded Padon, Hila Peleg, Muli Safra, and
   James R. Wilcox for insightful discussions and suggestions, and Gil
   Buchbinder for saving a day. The research leading to these results has
   received funding from the European Research Council under the European
   Union's Horizon 2020 research and innovation programme (grant agreement
   No [759102-SVIS]). This research was partially supported by the National
   Science Foundation (NSF) grant no. CCF-1617498, by Len Blavatnik and the
   Blavatnik Family foundation, the Blavatnik Interdisciplinary Cyber
   Research Center, Tel Aviv University, the United States-Israel
   Binational Science Foundation (BSF) grant No. 2016260, and the Israeli
   Science Foundation (ISF) grant No. 1810/18.
CR Alur Rajeev., 2015, Dependable Software Systems Engineering
   ANGLUIN D, 1990, MACH LEARN, V5, P121, DOI 10.1007/BF00116034
   Angluin D., 1988, Machine Learning, V2, P319, DOI 10.1007/BF00116828
   Bjorner N, 2015, LECT NOTES COMPUT SC, V8931, P263
   Bradley AR, 2011, LECT NOTES COMPUT SC, V6538, P70, DOI 10.1007/978-3-642-18275-4_7
   Bshouty Nader H., 2017, P 30 C LEARN THEOR C, P346
   Cimatti A., 2014, P 20 INT C TOOLS ALG, P46
   Colón MA, 2003, LECT NOTES COMPUT SC, V2725, P420
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Csallner C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P281, DOI 10.1145/1368088.1368127
   Dillig I, 2013, ACM SIGPLAN NOTICES, V48, P443, DOI [10.1145/2509136.2509511, 10.1145/2544173.2509511]
   Drachsler-Cohen D, 2017, LECT NOTES COMPUT SC, V10426, P254, DOI 10.1007/978-3-319-63387-9_13
   Een N., 2011, 2011 Formal Methods in Computer-Aided Design (FMCAD), P125
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   Ezudheen P., 2018, PACMPL, V131
   Fedyukovich G, 2018, LECT NOTES COMPUT SC, V10805, P251, DOI 10.1007/978-3-319-89960-2_14
   Feldman YMY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371073
   Flanagan C., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P500
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P191, DOI 10.1145/565816.503291
   Garg P, 2016, ACM SIGPLAN NOTICES, V51, P499, DOI 10.1145/2914770.2837664
   Garg P, 2014, LECT NOTES COMPUT SC, V8559, P69, DOI 10.1007/978-3-319-08867-9_5
   GOLDMAN SA, 1995, J COMPUT SYST SCI, V50, P20, DOI 10.1006/jcss.1995.1003
   Goldreich O, 2006, LECT NOTES COMPUT SC, V3895, P254, DOI 10.1007/11685654_12
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Gulwani S, 2012, INT SYMP SYMB NUMERI, P8, DOI 10.1109/SYNASC.2012.69
   HAKEN A, 1985, THEOR COMPUT SCI, V39, P297, DOI 10.1016/0304-3975(85)90144-6
   Hellerstein Lisa, 2012, COLT 2012
   Henzinger TA, 2004, ACM SIGPLAN NOTICES, V39, P232, DOI 10.1145/982962.964021
   Hoder Krystof, 2012, LNCS, P157, DOI [10.1007/978-3-642-31612-8_13, DOI 10.1007/978-3-642-31612-8_13, DOI 10.1007/978-3-642-31612-813]
   Ivrii A, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P65, DOI 10.1109/FMCAD.2015.7542254
   Jeannet B, 2014, ACM SIGPLAN NOTICES, V49, P529, DOI 10.1145/2535838.2535843
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Jha S, 2017, ACTA INFORM, V54, P693, DOI 10.1007/s00236-017-0294-5
   Jhala R, 2007, LOG METH COMPUT SCI, V3, DOI 10.2168/LMCS-3(4:1)2007
   Karbyshev A, 2017, J ACM, V64, DOI 10.1145/3022187
   Komuravelli A, 2014, LECT NOTES COMPUT SC, V8559, P17
   Lahiri SK, 2009, LECT NOTES ARTIF INT, V5663, P214, DOI 10.1007/978-3-642-02959-2_18
   Löding C, 2016, LECT NOTES COMPUT SC, V9636, P167, DOI 10.1007/978-3-662-49674-9_10
   McMillan KL, 2006, LECT NOTES COMPUT SC, V4144, P123
   McMillan KL, 2003, LECT NOTES COMPUT SC, V2725, P1
   Nidhra S, 2012, Int. J. Embed. Syst. Appl, V2, P29, DOI [DOI 10.5121/IJESA.2012.2204, 10.5121/ijesa.2012.2204]
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Pipatsrisawat K, 2011, ARTIF INTELL, V175, P512, DOI 10.1016/j.artint.2010.10.002
   Polozov O., 2017, ARXIV170303539 CORR
   Reps T, 2004, LECT NOTES COMPUT SC, V2937, P252
   Robere R, 2018, LECT NOTES COMPUT SC, V10982, P275, DOI 10.1007/978-3-319-96142-2_18
   Sankaranarayanan S, 2004, LECT NOTES COMPUT SC, V3148, P53
   Sankaranarayanan Sriram, 2008, ISSTA, P295, DOI [10.1145/1390630, DOI 10.1145/1390630]
   Sharma Rahul, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P71, DOI 10.1007/978-3-642-31424-7_11
   Sharma R, 2016, FORM METHOD SYST DES, V48, P235, DOI 10.1007/s10703-016-0248-5
   Sharma R, 2013, LECT NOTES COMPUT SC, V7935, P388, DOI 10.1007/978-3-642-38856-9_21
   Sharma R, 2013, LECT NOTES COMPUT SC, V7792, P574, DOI 10.1007/978-3-642-37036-6_31
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Srivastava Saurabh, 2013, International Journal on Software Tools for Technology Transfer, V15, P497, DOI 10.1007/s10009-012-0223-4
   Srivastava S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P223, DOI 10.1145/1542476.1542501
   Thakur A, 2015, ELECTRON NOTES THEOR, V311, P15, DOI 10.1016/j.entcs.2015.02.003
   VALIANT LG, 1984, COMMUN ACM, V27, P1134, DOI 10.1145/1968.1972
   Vizel Yakir, 2009, Proceedings of the 2009 9th International Conference Formal Methods in Computer-Aided Design (FMCAD), P1, DOI 10.1109/FMCAD.2009.5351148
   Vizel Y, 2017, LECT NOTES COMPUT SC, V10145, P521, DOI 10.1007/978-3-319-52234-0_28
   Vizel Y, 2014, LECT NOTES COMPUT SC, V8559, P260, DOI 10.1007/978-3-319-08867-9_17
   Vizel Y, 2013, LECT NOTES COMPUT SC, V7795, P308, DOI 10.1007/978-3-642-36742-7_22
NR 61
TC 9
Z9 10
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 5
DI 10.1145/3371073
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400006
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Kim, SK
   Venet, AJ
   Thakur, A
AF Kim, Sung Kook
   Venet, Arnaud J.
   Thakur, Aditya, V
TI Deterministic Parallel Fixpoint Computation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Abstract interpretation; Program analysis; Concurrency
ID STATIC ANALYSIS; LOOPS
AB A Abstract interpretation is a general framework for expressing static program analyses. It reduces the problem of extracting properties of a program to computing an approximation of the least fixpoint of a system of equations. The de facto approach for computing this approximation uses a sequential algorithm based on weak topological order (WTO). This paper presents a deterministic parallel algorithm for fixpoint computation by introducing the notion of weak partial order (WPO). We present an algorithm for constructing a WPO in almost-linear time. Finally, we describe PIKOS, our deterministic parallel abstract interpreter, which extends the sequential abstract interpreter IKOS. We evaluate the performance and scalability of PIKOS on a suite of 1017 C programs. When using 4 cores, PIKOS achieves an average speedup of 2.06x over IKOS, with a maximum speedup of 3.63x. When using 16 cores, PIKOS achieves a maximum speedup of 10.97x.
C1 [Kim, Sung Kook; Thakur, Aditya, V] Univ Calif Davis, Comp Sci, Davis, CA 95616 USA.
   [Venet, Arnaud J.] Facebook Inc, Menlo Pk, CA 94025 USA.
C3 University of California System; University of California Davis;
   Facebook Inc
RP Kim, SK (corresponding author), Univ Calif Davis, Comp Sci, Davis, CA 95616 USA.
EM sklkim@ucdavis.edu; ajv@fb.com
RI Thakur, Aditya/AAZ-1336-2021
FU Facebook Testing and Verification research award; AWS Cloud Credits for
   Research
FX The authors would like to thank Maxime Arthaud for help with IKOS. This
   material is based upon work supported by a Facebook Testing and
   Verification research award, and AWS Cloud Credits for Research.
CR Albarghouthi A, 2012, ACM SIGPLAN NOTICES, V47, P217, DOI 10.1145/2345156.2254091
   Amato G, 2016, SCI COMPUT PROGRAM, V120, P1, DOI 10.1016/j.scico.2015.12.005
   Amato G, 2013, LECT NOTES COMPUT SC, V7935, P25, DOI 10.1007/978-3-642-38856-9_4
   Balakrishnan Gogul, 2010, P 10 INT C FORM METH
   Ball T, 2004, LECT NOTES COMPUT SC, V2999, P1
   Bessey A, 2010, COMMUN ACM, V53, P66, DOI 10.1145/1646353.1646374
   Beyer D, 2019, LECT NOTES COMPUT SC, V11429, P133, DOI 10.1007/978-3-030-17502-3_9
   Beyer D, 2019, INT J SOFTW TOOLS TE, V21, P1, DOI 10.1007/s10009-017-0469-y
   Bourdoncle F., 1993, Formal Methods in Programming and Their Applications International Conference Proceedings, P128, DOI 10.1007/BFb0039704
   Brat G, 2005, AEROSP CONF PROC, P3028
   Brat Guillaume., 2014, International Conference on Software Engineering and Formal Methods. SEFM'14, P271
   Cormen T.H., 2009, INTRO ALGORITHMS
   Cousot P, 2005, LECT NOTES COMPUT SC, V3444, P21
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290355
   Cousot P, 2015, LECT NOTES COMPUT SC, V8931, P19
   Cousot Patrick, 1977, ASYNCHRONOUS ITERATI, V88
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Delmas David., 2007, Static Analysis Symposium (SAS), volume 4634 of Lecture Notes in Computer Science, V4634, P437, DOI DOI 10.1007/978-3-540-74061-2_27
   Dewey K, 2015, INT SYM CODE GENER, P34, DOI 10.1109/CGO.2015.7054185
   Gange G, 2016, LECT NOTES COMPUT SC, V9583, P85, DOI 10.1007/978-3-662-49122-5_4
   Garbervetsky D, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P442, DOI 10.1145/3106237.3106261
   Garey M. R., 1979, Computers and intractability. A guide to the theory of NP-completeness
   Giacobazzi R, 2004, ACM SIGPLAN NOTICES, V39, P186, DOI 10.1145/982962.964017
   Gopan Denis, 2006, COMPUTER AIDED VERIF, DOI [10.1007/11817963_41, DOI 10.1007/11817963_41]
   GRANGER P, 1989, INT J COMPUT MATH, V30, P165, DOI 10.1080/00207168908803778
   Halbwachs Nicolas, 2012, Static Analysis
   Havlak P, 1997, ACM T PROGR LANG SYS, V19, P557, DOI 10.1145/262004.262005
   Hecht M. S., 1972, SIAM Journal on Computing, V1, P188, DOI 10.1137/0201014
   Hintze JL, 1998, AM STAT, V52, P181, DOI 10.2307/2685478
   Jetley Raoul Praful, 2008, Proceedings of the 2008 Workshop on Static Analysis, SAW '08, p22S29, DOI 10.1145/1394504.1394507
   Karp R, 1972, COMPLEXITY COMPUTER, V40, P85, DOI 10.1007/978-3-540-68279-08
   Kim S, 2016, SOFTWARE PRACT EXPER, V46, P1317, DOI 10.1002/spe.2381
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Miné A, 2004, LECT NOTES COMPUT SC, V2986, P3
   Miné A, 2001, LECT NOTES COMPUT SC, V2053, P155
   Monniaux David, 2005, PROGRAMMING LANGUAGE, DOI [10.1007/11575467_7, DOI 10.1007/11575467_7]
   Oh H, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2590811
   Oh H, 2012, ACM SIGPLAN NOTICES, V47, P229, DOI 10.1145/2345156.2254092
   Oulamara M, 2015, LECT NOTES COMPUT SC, V9206, P415, DOI 10.1007/978-3-319-21690-4_24
   Ramalingam G, 1999, ACM T PROGR LANG SYS, V21, P175, DOI 10.1145/316686.316687
   Ramalingam G, 2002, ACM T PROGR LANG SYS, V24, P455, DOI 10.1145/570886.570887
   Ramanathan Murali Krishna, 2013, P 9 JOINT M EUR SOFT, DOI DOI 10.1145/2491411.2501854
   Reinders James, 2007, Intel threading building blocks-outfitting C++ for multi-core processor parallelism
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/3024084
   Rinetzky N, 2005, ACM SIGPLAN NOTICES, V40, P296, DOI 10.1145/1047659.1040330
   Sadowski C, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P598, DOI 10.1109/ICSE.2015.76
   Singh Gagandeep, 2017, ACM SIGPLAN Notices, V52, P46, DOI 10.1145/3093333.3009885
   Singh G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158143
   Singh G, 2018, LECT NOTES COMPUT SC, V10981, P211, DOI 10.1007/978-3-319-96145-3_12
   Su Y, 2014, PROC INT CONF PARAL, P451, DOI 10.1109/ICPP.2014.54
   Szpilrajn Edward, 1930, FUND MATH, V16
   TARJAN RE, 1979, J ACM, V26, P690, DOI 10.1145/322154.322161
   TARJAN RE, 1974, J COMPUT SYST SCI, V9, P355, DOI 10.1016/S0022-0000(74)80049-8
   Thomas W., 2018, NETW SYST 6 INT C NE, V3s16, DOI [10.1007/978-3-030-05529-5_1, DOI 10.1007/978-3-030-05529-5_1]
   Tukey J.W., 1977, EXPLORATORY DATA ANA, V2
   Venet A, 2004, ACM SIGPLAN NOTICES, V39, P231, DOI 10.1145/996893.996869
   Venet Arnaud, 2012, COMPUTER AIDED VERIF, DOI [10.1007/978-3-642-31424-7_15, DOI 10.1007/978-3-642-31424-7_15]
   Wang K, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P389, DOI 10.1145/3037697.3037744
   Weiss C, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P586, DOI 10.1109/ICSE.2015.75
   Wilhelm R, 2000, LECT NOTES COMPUT SC, V1781, P1
NR 63
TC 5
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 14
DI 10.1145/3371082
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400015
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Wang, YP
   Hu, XQ
   Zou, ZX
   Tan, WD
   Tan, G
AF Wang, Yu-Ping
   Hu, Xu-Qiang
   Zou, Zi-Xin
   Tan, Wende
   Tan, Gang
TI IVT: An Efficient Method for Sharing Subtype Polymorphic Objects
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Shared memory management; Inter-process communication; Virtual table;
   Preprocessors & parsers
AB Shared memory provides the fastest form of inter-process communication. Sharing polymorphic objects between different address spaces requires solving the issue of sharing pointers. In this paper, we propose a method, named Indexed Virtual Tables (IVT for short), to share polymorphic objects efficiently. On object construction, the virtual table pointers are replaced with indexes, which are used to find the actual virtual table pointers on dynamic dispatch. Only a few addition and load instructions are needed for both operations. Experimental results show that the IVT can outperform prior techniques on both object construction time and dynamic dispatch time. We also apply the proposed IVT technique to several practical scenarios, resulting the improvement of overall performance.
C1 [Wang, Yu-Ping; Hu, Xu-Qiang; Zou, Zi-Xin; Tan, Wende] Tsinghua Univ, Key Lab Informat Syst Secur, Dept Comp Sci & Technol, BNRist,MoE, Beijing, Peoples R China.
   [Tan, Gang] Penn State Univ, Dept Comp Sci & Engn, University Pk, PA 16802 USA.
   [Tan, Gang] Penn State Univ, Inst CyberSci, University Pk, PA 16802 USA.
C3 Tsinghua University; Pennsylvania Commonwealth System of Higher
   Education (PCSHE); Pennsylvania State University; Pennsylvania State
   University - University Park; Pennsylvania Commonwealth System of Higher
   Education (PCSHE); Pennsylvania State University; Pennsylvania State
   University - University Park
RP Wang, YP (corresponding author), Tsinghua Univ, Key Lab Informat Syst Secur, Dept Comp Sci & Technol, BNRist,MoE, Beijing, Peoples R China.
EM wyp@tsinghua.edu.cn; huxq18@mails.tsinghua.edu.cn;
   zouzx19@mails.tsinghua.edu.cn; twd15@mails.tsinghua_edu.cn;
   gtan@cse.psu.edu
OI Wang, Yu-Ping/0000-0003-4129-7704
FU Natural Science Foundation of China [61872210]
FX The authors deeply thank the anonymous reviewers for their constructive
   comments. This work was supported by the Natural Science Foundation of
   China (Project Number 61872210).
CR [Anonymous], 2018, ROS ROB OP SYST
   [Anonymous], 1999, Using MPI: Portable Parallel Programming with the Message Passing Interface
   Bacon DF, 2002, LECT NOTES COMPUT SC, V2374, P111
   Berryhill R., 2015, 19 INT C PRINCIPLES
   Bhandari K, 2016, ACM SIGPLAN NOTICES, V51, P677, DOI 10.1145/3022671.2984019
   Boost C++ Libraries, 2018, CLASS TEMPL OFFSE PT
   Boost C++ Libraries, 2018, SHAR MEM PROC
   Boost C++ Libraries, 2018, MAN MEM SEGM
   Bray T., 2017, RFC 8259: The JavaScript object notation (JSON) data interchange format, DOI [10.17487/RFC8259, DOI 10.17487/RFC8259]
   Burshteyn B, 2014, METHOD SYSTEM ACCESS
   Chakrabarti DR, 2014, ACM SIGPLAN NOTICES, V49, P433, DOI [10.1145/2660193.2660224, 10.1145/2714064.2660224]
   Doudali TD, 2017, MEMSYS 2017: PROCEEDINGS OF THE INTERNATIONAL SYMPOSIUM ON MEMORY SYSTEMS, P251, DOI 10.1145/3132402.3132418
   Druschel P., 1993, Operating Systems Review, V27, P189, DOI 10.1145/173668.168634
   El Hajj I, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133869
   Ellis MargaretA., 1990, The annotated C++ reference manual
   Goglin B, 2013, J PARALLEL DISTR COM, V73, P176, DOI 10.1016/j.jpdc.2012.09.016
   HERLIHY M, 1982, ACM T PROGR LANG SYS, V4, P527, DOI 10.1145/69622.357182
   Jin HW, 2005, PROC INT CONF PARAL, P184
   Karimi Kamran, 2006, 20 ANN INT S HIGH PE, P13, DOI [10.1109/HPCS.2006.50, DOI 10.1109/HPCS.2006.50]
   Kurmann C, 2003, 12TH IEEE INTERNATIONAL SYMPOSIUM ON HIGH PERFORMANCE DISTRIBUTED COMPUTING, PROCEEDINGS, P4
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lenny Hon, 1994, P 1994 C CTR ADV STU, P29, DOI 10.1145/782214
   Liu S, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2359, DOI 10.1145/3133956.3134066
   LLVM, 2018, CLANG C LANGUAGE FAM
   Magnenat S, 2018, ETHZASL MESSAGE TRAN
   MYERS AC, 1995, SIGPLAN NOTICES, V30, P124, DOI 10.1145/217839.217849
   OpenCV team, 2018, OPENCV OFF SIT
   Otstott D, 2017, PARALLEL COMPUT, V63, P61, DOI 10.1016/j.parco.2017.01.003
   Qt Documentation, 2018, QSHAREDMEMORY CLASS
   Quigley M., 2009, ICRA WORKSH OP SOURC, V3, P5, DOI DOI 10.1109/IECON.2015.7392843
   Rheindt S, 2018, LECT NOTES COMPUT SC, V10793, P139, DOI 10.1007/978-3-319-77610-1_11
   Richard Stevens W., 1992, ADV PROGRAMMING UNIX
   Richie D, 2017, PROCEDIA COMPUT SCI, V108, P1093, DOI 10.1016/j.procs.2017.05.221
   ROS Wiki, 2018, NOD ROB OP SYST
   Schottner Michael, 2000, P INT C PAR DISTR PR
   Sustrik M, 2018, MQ THEORETICAL FDN
   Tanenbaum Andrew S., 1995, Distributed Operating Systems
   The Apache XML Project, 2004, XALAN C VERS 1 10
   The Object Management Group, 2018, COMM OBJ REQ BROK AR, V3.3
   The Object Management Group, 2018, DAT DISTR SERV SPEC
   Tip F, 1997, ACM SIGPLAN NOTICES, V32, P271, DOI 10.1145/263700.263748
   Varda K., 2018, PROTOCOL BUFFERS GOO
NR 42
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 130
DI 10.1145/3360556
PG 22
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500015
OA gold
DA 2024-07-18
ER

PT J
AU Zuriel, Y
   Friedman, M
   Sheffi, G
   Cohen, N
   Petrank, E
AF Zuriel, Yoav
   Friedman, Michal
   Sheffi, Gali
   Cohen, Nachshon
   Petrank, Erez
TI Efficient Lock-Free Durable Sets
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Concurrent Data Structures; Non-Volatile Memory; Lock Freedom; Hash
   Maps; Durable Linearizability; Durable Sets
ID SAFE
AB Non-volatile memory is expected to co-exist or replace DRAM in upcoming architectures. Durable concurrent data structures for non-volatile memories are essential building blocks for constructing adequate software for use with these architectures. In this paper, we propose a new approach for durable concurrent sets and use this approach to build the most efficient durable hash tables available today. Evaluation shows a performance improvement factor of up to 3.3x over existing technology.
C1 [Zuriel, Yoav; Friedman, Michal; Sheffi, Gali; Petrank, Erez] Technion, CS Dept, Jerusalem, Israel.
   [Cohen, Nachshon] Amazon, Jerusalem, Israel.
C3 Technion Israel Institute of Technology
RP Zuriel, Y (corresponding author), Technion, CS Dept, Jerusalem, Israel.
EM yoavzuriel@cs.technion.ac.il; michal.f@cs.technion.ac.il;
   galish@cs.technion.ac.il; nachshonc@gmail.com; erez@cs.technion.ac.il
OI Friedman, Michal/0009-0003-5588-8617
FU Israel Science Foundation [274/14]
FX This work was supported by the Israel Science Foundation grant No.
   274/14
CR Alistarh D, 2017, PROCEEDINGS OF THE TWELFTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS 2017), P483, DOI 10.1145/3064176.3064214
   [Anonymous], 2001, DISC
   Arulraj J, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P707, DOI 10.1145/2723372.2749441
   Avni H, 2016, PROC VLDB ENDOW, V10, P409
   Balmau Oana., 2016, P 28 ACM S PARALLELI, P349
   Ben-David N, 2019, SPAA'19: PROCEEDINGS OF THE 31ST ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURESS, 2019, P253, DOI 10.1145/3323165.3323187
   Brown T, 2015, PODC'15: PROCEEDINGS OF THE 2015 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P261, DOI 10.1145/2767386.2767436
   Chakrabarti DR, 2014, ACM SIGPLAN NOTICES, V49, P433, DOI [10.1145/2660193.2660224, 10.1145/2714064.2660224]
   Coburn J, 2011, ACM SIGPLAN NOTICES, V46, P105, DOI [10.1145/1961295.1950380, 10.1145/1961296.1950380]
   Cohen N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276513
   Cohen N, 2018, SPAA'18: PROCEEDINGS OF THE 30TH ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P259, DOI 10.1145/3210377.3210400
   Cohen N, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P441, DOI 10.1145/3297858.3304046
   Cohen N, 2015, SPAA'15: PROCEEDINGS OF THE 27TH ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P254, DOI 10.1145/2755573.2755579
   Cohen NL, 2017, PUBLIC HEALTH PERSPECTIVES ON DEPRESSIVE DISORDERS, P1, DOI 10.1145/3133891
   Colin A, 2016, ACM SIGPLAN NOTICES, V51, P514, DOI 10.1145/3022671.2983995
   Cooper Brian F., 2010, P 1 ACM S CLOUD COMP, P143, DOI [DOI 10.1145/1807128.1807152, 10.1145/1807128.1807152]
   David T, 2018, PROCEEDINGS OF THE 2018 USENIX ANNUAL TECHNICAL CONFERENCE, P373
   David T, 2015, ACM SIGPLAN NOTICES, V50, P631, DOI [10.1145/2775054.2694359, 10.1145/2694344.2694359]
   David T, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P33, DOI 10.1145/2517349.2522714
   Debnath B, 2010, PROC VLDB ENDOW, V3, P1414, DOI 10.14778/1920841.1921015
   Dice D, 2016, ACM SIGPLAN NOTICES, V51, P36, DOI [10.1145/3241624.2926699, 10.1145/2926697.2926699]
   Fraser Keir, 2004, Technical Report
   Friedman M, 2018, ACM SIGPLAN NOTICES, V53, P28, DOI 10.1145/3200691.3178490
   Heller S, 2006, LECT NOTES COMPUT SC, V3974, P3
   Herlihy M., 2008, ART MULTIPROCESSOR P
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Intel, 2019, INT 64 IA 32 ARCH SO
   Izraelevitz Joseph, 2016, Distributed Computing. 30th International Symposium, DISC 2016. Proceedings: LNCS 9888, P313, DOI 10.1007/978-3-662-53426-7_23
   Jayakumar H, 2015, ACM J EMERG TECH COM, V12, DOI 10.1145/2700249
   Kolli A, 2016, ACM SIGPLAN NOTICES, V51, P399, DOI 10.1145/2954679.2872381
   Lucia Brandon, 2017, LEIBNIZ INT P INFORM, V71
   Maeng K, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P129
   Maeng K, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133920
   Michael M. M., 2002, P 14 ANN ACM S PAR A, P73, DOI DOI 10.1145/564870.564881
   Michael MM, 2004, IEEE T PARALL DISTR, V15, P491, DOI 10.1109/TPDS.2004.8
   Natarajan A, 2014, ACM SIGPLAN NOTICES, V49, P317, DOI [10.1145/2692916.2555256, 10.1145/2555243.2555256]
   Nawab Faisal, 2017, 31 INT S DISTR COMP, V37, P1
   Nishtala R., 2013, Proceedings of the 10th USENIX Conference on Networked Systems Design and Implementation, NSDI '13, Berkeley, CA, USA, P385
   Ruppel E, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1085, DOI 10.1145/3314221.3314583
   Schwalb D., 2015, P 3 VLDB WORKSH IN M, DOI 10.1145/2803140.2803144
   Shalev O, 2006, J ACM, V53, P379, DOI 10.1145/1147954.1147958
   Van der Woude J, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P17
   Volos Haris, 2011, SIGPLAN Notices, V46, P91, DOI 10.1145/1961296.1950379
   Wang TZ, 2014, PROC VLDB ENDOW, V7, P865, DOI 10.14778/2732951.2732960
   Yildirim KS, 2018, SENSYS'18: PROCEEDINGS OF THE 16TH CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS, P41, DOI 10.1145/3274783.3274837
   Zhang Y., 2015, IEEE 31 S MASS STORA, P1, DOI [DOI 10.1109/MSST.2015.7208275, 10.1109/MSST.2015.7208275, DOI 10.1007/S11042-015-2982-X]
NR 46
TC 33
Z9 36
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 128
DI 10.1145/3360554
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500013
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Miltner, A
   Maina, S
   Fisher, K
   Pierce, BC
   Walker, D
   Zdancewic, S
AF Miltner, Anders
   Maina, Solomon
   Fisher, Kathleen
   Pierce, Benjamin C.
   Walker, David
   Zdancewic, Steve
TI Synthesizing Symmetric Lenses
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Bidirectional Programming; Program Synthesis; Type-Directed Synthesis;
   Type Systems; Information Theory
AB Lenses are programs that can be run both "front to back" and "back to front:' allowing updates to either their source or their target data to be transferred in both directions. Since their introduction by Foster et al., lenses have been extensively studied, extended, and applied. Recent work has also demonstrated how techniques from type-directed program synthesis can be used to efficiently synthesize a simple class of lenses so-called bijective lenses over string data-given a pair of types (regular expressions) and a small number of examples.
   We extend this synthesis algorithm to a much broader class of lenses, called simple symmetric lenses, including all bijective lenses, all of the popular category of "asymmetric" lenses, and a rich subset of the more powerful "symmetric lenses" proposed by Hofmann et al. Intuitively, simple symmetric lenses allow some information to be present on one side but not the other and vice versa. They are of independent theoretical interest, being the largest class of symmetric lenses that do not rely on persistent internal state.
   Synthesizing simple symmetric lenses is substantially more challenging than synthesizing bijective lenses: Since some of the information on each side can be "disconnected" from the other side, there will, in general, be many lenses that agree with a given example. To guide the search process, we use stochastic regular expressions and ideas from information theory to estimate the amount of information propagated by a candidate lens, generally preferring lenses that propagate more information, as well as user annotations marking parts of the source and target data structures as either irrelevant or essential.
   We describe an implementation of simple symmetric lenses and our synthesis procedure as extensions to the Boomerang language. We evaluate its performance on 48 benchmark examples drawn from Flash Fill, Augeas, the bidirectional programming literature, and electronic file format synchronization tasks. Our implementation can synthesize each of these lenses in under 30 seconds.
C1 [Miltner, Anders; Walker, David] Princeton Univ, Princeton, NJ 08544 USA.
   [Maina, Solomon; Pierce, Benjamin C.; Zdancewic, Steve] Univ Penn, Philadelphia, PA 19104 USA.
   [Fisher, Kathleen] Tufts Univ, Medford, MA 02155 USA.
C3 Princeton University; University of Pennsylvania; Tufts University
RP Miltner, A (corresponding author), Princeton Univ, Princeton, NJ 08544 USA.
EM amiltner@cs.princeton.edu; smaina@seas.upenn.edu;
   kfisher@eecs.tufts.edu; bcpierce@cis.upenn.edu; dpw@cs.princeton.edu;
   stevez@cis.upenn.edu
RI Zdancewic, Steve/JXL-6845-2024
OI Walker, David/0000-0003-3681-149X; Miltner, Anders/0000-0002-8338-4008
FU DARPA award [FA8750-17-2-0028, ONR 568751]
FX We thank our anonymous reviewers for their useful feedback and
   discussions and Nate Foster and Michael Greenberg for their help
   integrating Optician into Boomerang. This research has been supported in
   part by DARPA award FA8750-17-2-0028 and ONR 568751 (SynCrypt).
CR Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Arasu A., 2003, P 2003 ACM SIGMOD IN, P337, DOI DOI 10.1145/872757.872799
   Augustsson Lennart., 2004, Mailing List
   Barbosa DMJ, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P193
   Bohannon A., 2006, Principles of Database Systems (PODS)
   Bohannon A, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P407, DOI 10.1145/1328438.1328487
   Carrasco R. C., 1996, Grammatical Inference: Learning Syntax from Sentences. Third International Colloquium, ICGI-96 Proceedings, P274, DOI 10.1007/BFb0033361
   Czarnecki K, 2009, LECT NOTES COMPUT SC, V5563, P260, DOI 10.1007/978-3-642-02408-5_19
   Ellis K, 2015, Advances in neural information processing systems, V28, P973
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Fisher K., 2008, DIRT SHOVELS FULLY A
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Foster JN, 2008, ACM SIGPLAN NOTICES, V43, P383, DOI 10.1145/1411203.1411257
   Frankle Jonathan, 2015, MSCIS1512 U PENNS
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Gvero T, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2499370.2462192
   Hofmann M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P371, DOI 10.1145/1926385.1926428
   Hu QHP, 2017, ACM SIGPLAN NOTICES, V52, P376, DOI [10.1145/3062341.3062345, 10.1145/3140587.3062345]
   Kushmerick N, 1997, INT JOINT CONF ARTIF, P729
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Lehmann D. J., 1977, Theoretical Computer Science, V4, P59, DOI 10.1016/0304-3975(77)90056-1
   Lutterkort David, 2007, AUGEAS LINUX CONFIGU
   Maina Solomon., 2018, Synthesizing quotient lenses
   Miltner Anders, 2018, ABS181011527 CORR
   Miltner Anders, P 45 ANN ACM SIGPLAN
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Pereira F, 2000, PHILOS T ROY SOC A, V358, P1239, DOI 10.1098/rsta.2000.0583
   Ross BJ, 2000, APPL INTELL, V13, P285, DOI 10.1023/A:1026524328760
   Scherer G., 2015, P 18 ACM SIGPLAN INT
   Schurr Andy., 1995, P 20 WORKSHOP GRAPH, V903, P151
   SHANNON CE, 1948, BELL SYST TECH J, V27, P379, DOI 10.1002/j.1538-7305.1948.tb01338.x
   Voigtländer J, 2009, ACM SIGPLAN NOTICES, V44, P165, DOI 10.1145/1594834.1480904
NR 32
TC 9
Z9 9
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 95
DI 10.1145/3341699
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900018
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Miraldo, VC
   Swierstra, W
AF Miraldo, Victor Cacciari
   Swierstra, Wouter
TI An Efficient Algorithm for Type-Safe Structural Diffing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Generic Programming; diff; Version Control; Haskell
AB Effectively computing the difference between two version of a source file has become an indispensable part of software development. The de facto standard tool used by most version control systems is the UNIX diff utility, that compares two files on a line-by-line basis without any regard for the structure of the data stored in these files. This paper presents an alternative datatype generic algorithm for computing the difference between two values of any algebraic datatype. This algorithm maximizes sharing between the source and target trees, while still running in linear time. Finally, this paper demonstrates that by instantiating this algorithm to the Lua abstract syntax tree and mining the commit history of repositories found on GitHub, the resulting patches can often be merged automatically, even when existing technology has failed.
C1 [Miraldo, Victor Cacciari; Swierstra, Wouter] Univ Utrecht, Informat & Comp Sci, Princetonpl 5, NL-3584 CC Utrecht, Netherlands.
C3 Utrecht University
RP Miraldo, VC (corresponding author), Univ Utrecht, Informat & Comp Sci, Princetonpl 5, NL-3584 CC Utrecht, Netherlands.
EM v.cacciarimiraldo@uu.nl; w.s.swierstra@uu.nl
CR Akutsu T, 2010, ALGORITHMICA, V57, P325, DOI 10.1007/s00453-008-9213-z
   Angiuli C, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P243, DOI 10.1145/2628136.2628158
   [Anonymous], 2012, P 8 ACM SIGPLAN WORK, DOI [10.1145/2103786.2103795, DOI 10.1145/2103786.2103795]
   Asenov D, 2017, LECT NOTES COMPUT SC, V10202, P152, DOI 10.1007/978-3-662-54494-5_9
   Bergroth L, 2000, SPIRE 2000: SEVENTH INTERNATIONAL SYMPOSIUM ON STRING PROCESSING AND INFORMATION RETRIEVAL - PROCEEDINGS, P39, DOI 10.1109/SPIRE.2000.878178
   Bille P, 2005, THEOR COMPUT SCI, V337, P217, DOI 10.1016/j.tcs.2004.12.030
   Brass P., 2008, ADV DATA STRUCTURES
   Bubenzer J, 2014, DISCRETE APPL MATH, V163, P238, DOI 10.1016/j.dam.2013.08.003
   de Vries Edsko, 2014, P 10 ACM SIGPLAN WOR, P83, DOI [10.1145/2633628.2633634, DOI 10.1145/2633628.2633634]
   Demaine ED, 2007, LECT NOTES COMPUT SC, V4596, P146
   Eisenberg RA, 2012, ACM SIGPLAN NOTICES, V47, P117, DOI 10.1145/2430532.2364522
   Falleri Jean-Remy, 2014, P 29 ACM IEEE INT C ACM IEEE INT C AUT S, P313, DOI [10.1145/2642937.2642982, DOI 10.1145/2642937.2642982]
   Filliatre Jean-Christophe, 2006, ML, P12, DOI DOI 10.1145/1159876.1159880
   GHC Trac, 2018, MEM US EXPL COMPL PA MEM US EXPL COMPL PA
   Huet Gerard., 1994, Journal of Functional Programming, V4, P371, DOI [10.1017/S0956796800001106, DOI 10.1017/S0956796800001106]
   Hunt J. W., 1976, 41 CSTR BELL LAB 41 CSTR BELL LAB
   Ierusalimschy R, 1996, SOFTWARE PRACT EXPER, V26, P635, DOI 10.1002/(SICI)1097-024X(199606)26:6<635::AID-SPE26>3.0.CO;2-P
   Klein P. N., 1998, Algorithms - ESA '98. 6th Annual European Symposium. Proceedings, P91
   KNUTH DE, 1990, LECT NOTES COMPUT SC, V461, P1
   Lempsink E, 2009, WGP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P61
   Lohrey M, 2015, LECT NOTES COMPUT SC, V9168, P46, DOI 10.1007/978-3-319-21500-6_3
   MERKLE RC, 1988, LECT NOTES COMPUT SC, V293, P369
   Miller A, 2014, ACM SIGPLAN NOTICES, V49, P411, DOI 10.1145/2535838.2535851
   Mimram Samuel, 2013, ABS13113903 CORR ABS13113903 CORR
   Miraldo VC, 2018, PROCEEDINGS OF THE 3RD ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE '18), P65, DOI 10.1145/3240719.3241786
   Miraldo VC, 2018, PROCEEDINGS OF THE 3RD ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE '18), P1, DOI 10.1145/3240719.3241790
   Miraldo VC, 2017, PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE' 17), P2, DOI 10.1145/3122975.3122976
   Paul van Oorschot Menezes A. J., 1997, HDB APPL CRYPTOGRAPH, Vxiii, P780
   Roundy David., 2005, P 2005 ACM SIGPLAN W, P1, DOI [10.1145/1088348.1088349, DOI 10.1145/1088348.1088349]
   Serrano A, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P41, DOI 10.1145/3242744.3242745
   Swierstra W., 2014, Proceedings of the 2014 ACM International Symposium on New Ideas, New Paradigms, and Re ections on Programming Software, Onward! 2014, P43, DOI [10.1145/2661136.2661137, DOI 10.1145/2661136.2661137]
   TAI KC, 1979, J ACM, V26, P422, DOI 10.1145/322139.322143
   Vassena Marco, 2016, P 1 INT WORKSH TYP D P 1 INT WORKSH TYP D, P62, DOI DOI 10.1145/2976022.2976026
   Wagner TA, 1998, ACM T PROGR LANG SYS, V20, P980, DOI 10.1145/293677.293678
NR 34
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 113
DI 10.1145/3341717
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900036
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Paraskevopoulou, Z
   Appel, AW
AF Paraskevopoulou, Zoe
   Appel, Andrew W.
TI Closure Conversion Is Safe for Space
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compiler correctness; closure conversion; continuation-passing style;
   garbage collection; logical relations; cost models
AB We formally prove that closure conversion with flat environments for CPS lambda calculus is correct (preserves semantics) and safe for time and space, meaning that produced code preserves the time and space required for the execution of the source program.
   We give a cost model to pre- and post-closure-conversion code by formalizing profiling semantics that keep track of the time and space resources needed for the execution of a program, taking garbage collection into account. To show preservation of time and space we set up a general, "garbage-collection compatible", binary logical relation that establishes invariants on resource consumption of the related programs, along with functional correctness. Using this framework, we show semantics preservation and space and time safety for 83 terminating source programs, and divergence preservation and space safety for diverging source programs.
   This is the first formal proof of space-safety of a closure-conversion transformation. The transformation and the proof are parts of the CertiCoq compiler pipeline from Coq (Gallina) through CompCert Clight to assembly language. Our results are mechanized in the Coq proof assistant.
C1 [Paraskevopoulou, Zoe; Appel, Andrew W.] Princeton Univ, Princeton, NJ 08544 USA.
C3 Princeton University
RP Paraskevopoulou, Z (corresponding author), Princeton Univ, Princeton, NJ 08544 USA.
EM zoe.paraskevopoulou@princeton.edu; appel@princeton.edu
RI Paraskevopoulou, Zoe/IWM-1463-2023
OI Appel, Andrew/0000-0001-6009-0325
FU National Science Foundation [CCF-1407794, CCF-1521602]
FX This material is based upon work supported by the National Science
   Foundation under Grants CCF-1407794 and CCF-1521602. Any opinions,
   findings, and conclusions or recommendations expressed in this material
   are those of the authors and do not necessarily reflect the views of the
   National Science Foundation.
CR Albert E, 2010, ACM SIGPLAN NOTICES, V45, P121
   Amadio RobertoM., 2012, P 2 INT C FDN PRACTI, P72, DOI [10.1007/978-3-642-32495-6_5, DOI 10.1007/978-3-642-32495-6_5]
   Anand Abhishek, 2017, INT WORKSH COQ PROGR
   [Anonymous], 1992, Compiling with Continuations
   Appel A. W., 1996, Journal of Functional Programming, V6, P47, DOI 10.1017/S095679680000157X
   Appel Andrew W, 1993, CSTR41293 PRINC U DE
   APPEL AW, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P293, DOI 10.1145/75277.75303
   Bélanger OS, 2017, PROCEEDINGS OF THE 19TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2017), P49, DOI 10.1145/3131851.3131859
   Besson F, 2017, LECT NOTES COMPUT SC, V10499, P81, DOI 10.1007/978-3-319-66107-0_6
   Carbonneaux Q, 2014, ACM SIGPLAN NOTICES, V49, P270, DOI [10.1145/2594291.2594301, 10.1145/2666356.2594301]
   Çiçek E, 2017, ACM SIGPLAN NOTICES, V52, P316, DOI 10.1145/3093333.3009858
   Çiçek E, 2016, ACM SIGPLAN NOTICES, V51, P132, DOI 10.1145/3022670.2951950
   Cicek Ezgi, 2015, PROGRAMMING LANGUAGE
   Crary Karl., 2000, POPL 2000 P 27 ACM S, P184
   DIWAN A, 1992, SIGPLAN NOTICES, V27, P273, DOI 10.1145/143103.143140
   Egorov Vyacheslav, 2012, GROKK V8 CLOS FUN PR
   Glasser David., 2013, INTERESTING KIND JAV
   Gustavsson J., 1999, Electronic Notes in Theoretical Computer Science, V26, DOI 10.1016/S1571-0661(05)80284-1
   Gustavsson J, 2001, ACM SIGPLAN NOTICES, V36, P265, DOI 10.1145/507669.507667
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Hur CK, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P59
   Hur CK, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1926385.1926402
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   Keep AndrewW., 2012, P 2012 ANN WORKSHOP, P30, DOI [10.1145/2661103.2661106, DOI 10.1145/2661103.2661106]
   KELSEY R, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P281, DOI 10.1145/75277.75302
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   McCreight A, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P273
   Minamide Y., 1999, Electronic Notes in Theoretical Computer Science, V26, DOI 10.1016/S1571-0661(05)80286-5
   Morrisett Greg., 1997, HIGHER ORDER OPERATI, P175
   Neis G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P166, DOI 10.1145/2784731.2784764
   Pitts A.M., 1998, HIGHER ORDER OPERATI, P275
   Sands D., 1992, Functional Programming, Glasgow 1991. Proceedings of the 1991 Glasgow Workshop, P298
   Shao Z, 2000, ACM T PROGR LANG SYS, V22, P129, DOI 10.1145/345099.345125
   Unnikrishnan L, 2009, ISMM'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P139
   Wang P, 2017, P ACM PROGRAM LANG, V1, P79
   Zhong Shao, 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P150, DOI 10.1145/182409.156783
NR 37
TC 11
Z9 13
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 83
DI 10.1145/3341687
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900006
OA gold
DA 2024-07-18
ER

PT J
AU Baldan, P
   König, B
   Mika-Michalski, C
   Padoan, T
AF Baldan, Paolo
   Koenig, Barbara
   Mika-Michalski, Christina
   Padoan, Tommaso
TI Fixpoint Games on Continuous Lattices
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE fixpoint equation systems; continuous lattices; parity games; p-calculus
AB Many analysis and verifications tasks, such as static program analyses and model-checking for temporal logics, reduce to the solution of systems of equations over suitable lattices. Inspired by recent work on lattice-theoretic progress measures, we develop a game-theoretical approach to the solution of systems of monotone equations over lattices, where for each single equation either the least or greatest solution is taken. A simple parity game, referred to as fixpoint game, is defined that provides a correct and complete characterisation of the solution of systems of equations over continuous lattices, a quite general class of lattices widely used in semantics. For powerset lattices the fixpoint game is intimately connected with classical parity games for p-calculus model-checking, whose solution can exploit as a key tool Jurdzinski's small progress measures. We show how the notion of progress measure can be naturally generalised to fixpoint games over continuous lattices and we prove the existence of small progress measures. Our results lead to a constructive formulation of progress measures as (least) fixpoints. We refine this characterisation by introducing the notion of selection that allows one to constrain the plays in the parity game, enabling an effective (and possibly efficient) solution of the game, and thus of the associated verification problem. We also propose a logic for specifying the moves of the existential player that can be used to systematically derive simplified equations for efficiently computing progress measures. We discuss potential applications to the model-checking of latticed p-calculi.
C1 [Baldan, Paolo; Padoan, Tommaso] Univ Padua, Dipartimento Matemat Tullio Levi Civita, Via Trieste 63, I-35121 Padua, Italy.
   [Koenig, Barbara; Mika-Michalski, Christina] Univ Duisburg Essen, Abt Informat & Angew Kognit Wissensch, Fak Ingn Wissensch, Lotharstr 65, D-47048 Duisburg, Germany.
C3 University of Padua; University of Duisburg Essen
RP Baldan, P (corresponding author), Univ Padua, Dipartimento Matemat Tullio Levi Civita, Via Trieste 63, I-35121 Padua, Italy.
EM baldan@niath.unipd.it; barbara_koenig@uni-due.de;
   christina.mika-michalski@uni-due.de; padoan@niath.unipd.it
FU DFG project BEMEGA; University of Padova project ASTA
FX Research is partially supported by DFG project BEMEGA and University of
   Padova project ASTA.
CR Almagor Shaull, 2014, LECT NOTES COMPUTER, V8413
   [Anonymous], 1994, HDB LOGIC COMPUTER S
   Baldan Paolo, 2018, ARXIV181011404
   Beohar Harsh, 2017, P TASE 17 IEEE XPL P TASE 17 IEEE XPL, P1
   Bonchi Filippo, 2018, P LICS 18 ACM P LICS 18 ACM
   Bradfield Julian, 2018, HDB MODEL CHECKING
   Browne A, 1997, THEOR COMPUT SCI, V178, P237, DOI 10.1016/S0304-3975(96)00228-9
   Calude CS, 2017, ACM S THEORY COMPUT, P252, DOI 10.1145/3055399.3055409
   CLEAVELAND R, 1990, ACTA INFORM, V27, P725, DOI 10.1007/BF00264284
   Cleaveland Rance, 1992, LECT NOTES COMPUTER, V663
   Cordy Maxime, 2012, P ICSE 12 IEEE P ICSE 12 IEEE
   COUSOT P, 1979, PAC J MATH, V82, P43, DOI 10.2140/pjm.1979.82.43
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   Delzanno G, 2000, LECT NOTES COMPUT SC, V1785, P426
   Eleftheriou PE, 2012, J LOGIC COMPUT, V22, P213, DOI 10.1093/logcom/exq005
   Emerson E. A., 1985, Logics of Programs. Proceedings, P79
   EMERSON EA, 1991, PROCEEDINGS - 32ND ANNUAL SYMPOSIUM ON FOUNDATIONS OF COMPUTER SCIENCE, P368, DOI 10.1109/SFCS.1991.185392
   Fitting M. C., 1991, Fundamenta Informaticae, V15, P235
   Fontaine G, 2008, LECT NOTES COMPUT SC, V5213, P139, DOI 10.1007/978-3-540-87531-4_12
   Gawlitza TM, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1961204.1961207
   Gierz G., 2003, CONTINUOUS LATTICES
   Grumberg O, 2005, LECT NOTES COMPUT SC, V3385, P233
   Hansen HH, 2018, LECT NOTES COMPUT SC, V10669, P115, DOI 10.1007/978-3-319-73579-5_8
   Hasuo I, 2016, ACM SIGPLAN NOTICES, V51, P718, DOI 10.1145/2914770.2837673
   Hirschkoff Daniel, 1998, P MFCS 98 WORKSH CON P MFCS 98 WORKSH CON, P75
   Huth M, 1997, IEEE S LOG, P111, DOI 10.1109/LICS.1997.614940
   Jurdzinski M, 2000, LECT NOTES COMPUT SC, V1770, P290
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Kupferman O, 2007, LECT NOTES COMPUT SC, V4762, P316
   Mader A., 1997, THESIS TU MUNCHEN
   McIver A, 2007, ACM T COMPUT LOG, V8, DOI 10.1145/1182613.1182616
   Mio M., 2012, LOG METHODS COMPUT S, P1
   Mio M, 2017, FUND INFORM, V150, P317, DOI 10.3233/FI-2017-1472
   Mio Matteo, 2015, ARXIV151000797
   Nielson F., 1999, Principles of Program Analysis
   Poltermann Katja, 2017, THESIS U DUISBURG ES THESIS U DUISBURG ES
   Pous D., 2011, ADV TOPICS BISIMULAT
   Sangiorgi Davide, 2011, Introduction to bisimulation and coinduction
   Schneider Klaus, 2004, TEXT THEORET COMP S, DOI 10.1007/978-3-662-10778-2
   Scott Dana, 1972, LECT NOTES MATH LECT NOTES MATH
   Seidl H, 1996, INFORM PROCESS LETT, V59, P303, DOI 10.1016/0020-0190(96)00130-5
   Stevens P, 1998, LECT NOTES COMPUT SC, V1384, P85, DOI 10.1007/BFb0054166
   Stirling C., 1995, CONCUR '95: Concurrency Theory. 6th International Conference. Proceedings, P1
   STIRLING C, 1991, THEOR COMPUT SCI, V89, P161, DOI 10.1016/0304-3975(90)90110-4
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   van Breugel F, 2005, THEOR COMPUT SCI, V331, P115, DOI 10.1016/j.tcs.2004.09.035
   Venema Y, 2008, LECT MODAL MU CALCUL
   Zielonka W, 1998, THEOR COMPUT SCI, V200, P135, DOI 10.1016/S0304-3975(98)00009-7
NR 49
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 26
DI 10.1145/3290339
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300026
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Kincaid, Z
   Breck, J
   Cyphert, J
   Reps, T
AF Kincaid, Zachary
   Breck, Jason
   Cyphert, John
   Reps, Thomas
TI Closed Forms for Numerical Loops
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Invariant generation; loop summarization; decision procedures
AB This paper investigates the problem of reasoning about non-linear behavior of simple numerical loops. Our approach builds on classical techniques for analyzing the behavior of linear dynamical systems. It is well-known that a closed-form representation of the behavior of a linear dynamical system can always be expressed using algebraic numbers, but this approach can create formulas that present an obstacle for automated-reasoning tools. This paper characterizes when linear loops have closed forms in simpler theories that are more amenable to automated reasoning. The algorithms for computing closed forms described in the paper avoid the use of algebraic numbers, and produce closed forms expressed using polynomials and exponentials over rational numbers. We show that the logic for expressing closed forms is decidable, yielding decision procedures for verifying safety and termination of a class of numerical loops over rational numbers. We also show that the procedure for computing closed forms for this class of numerical loops can be used to over-approximate the behavior of arbitrary numerical programs (with unrestricted control flow, non-deterministic assignments, and recursive procedures).
C1 [Kincaid, Zachary] Princeton Univ, Princeton, NJ 08544 USA.
   [Breck, Jason; Cyphert, John; Reps, Thomas] Univ Wisconsin, Madison, WI USA.
   [Reps, Thomas] GrammaTech Inc, Ithaca, NY USA.
C3 Princeton University; University of Wisconsin System; University of
   Wisconsin Madison
RP Kincaid, Z (corresponding author), Princeton Univ, Princeton, NJ 08544 USA.
EM zkincaid@cs.princeton.edu; jbreck@wisc.edu; jcyphert@wisc.edu;
   reps@cs.wisc.edu
OI Cyphert, John/0009-0007-6310-413X; Kincaid, Zachary/0000-0002-7294-9165
FU AFRL under DARPA MUSE award [FA8750-14-2-0270]; DARPA STAC award
   [FA8750-15-C-0082]; ONR [N00014-17-1-2889]; UW-Madison Office of the
   Vice Chancellor for Research and Graduate Education; WARF
FX This work was supported in part by a gift from Rajiv and Ritu Batra; by
   AFRL under DARPA MUSE award FA8750-14-2-0270 and DARPA STAC award
   FA8750-15-C-0082; by ONR under grant N00014-17-1-2889; and by the
   UW-Madison Office of the Vice Chancellor for Research and Graduate
   Education with funding from WARF. Opinions, findings, conclusions, or
   recommendations expressed herein are those of the authors and do not
   necessarily reflect the views of the sponsoring agencies.
CR Almagor S., 2017, ICALP
   [Anonymous], 1951, DECISION METHOD ELEM
   [Anonymous], 2013, OOPSLA
   Boigelot B, 2003, THEOR COMPUT SCI, V309, P413, DOI 10.1016/S0304-3975(03)00314-1
   Bozga M, 2006, LECT NOTES COMPUT SC, V4052, P577
   Bozga M, 2010, LECT NOTES COMPUT SC, V6174, P227, DOI 10.1007/978-3-642-14295-6_23
   Bozga M, 2009, LECT NOTES COMPUT SC, V5505, P337, DOI 10.1007/978-3-642-00768-2_29
   Braverman M., 2006, CAV
   Carbonneaux Q., 2015, PLDI
   Comon H, 1998, LECT NOTES COMPUT SC, V1427, P268, DOI 10.1007/BFb0028751
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Oliveira S, 2016, LECT NOTES COMPUT SC, V9938, P479, DOI 10.1007/978-3-319-46520-3_30
   Farzan A., 2015, FMCAD
   Finkel A, 2002, LECT NOTES COMPUT SC, V2556, P145
   Gurfinkel A., 2015, CAV
   Halava V., 2005, SKOLEMS PROBLEM BORD SKOLEMS PROBLEM BORD
   Heizmann M, 2018, LECT NOTES COMPUT SC, V10806, P447, DOI 10.1007/978-3-319-89963-3_30
   Humenberger A., 2017, ISSAC
   Humenberger A, 2018, LECT NOTES COMPUT SC, V10747, P226, DOI 10.1007/978-3-319-73721-8_11
   Jeannet B, 2014, ACM SIGPLAN NOTICES, V49, P529, DOI 10.1145/2535838.2535843
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   KANNAN R, 1986, J ACM, V33, P808, DOI 10.1145/6490.6496
   KELLERGEHRIG W, 1985, THEOR COMPUT SCI, V36, P309, DOI 10.1016/0304-3975(85)90049-0
   Kincaid Z., 2017, PLDI
   Kincaid Z., 2018, PACMPL 2 POPL
   Kincaid Z., 2018, SAS
   Konecny F, 2016, LECT NOTES COMPUT SC, V9636, P645, DOI 10.1007/978-3-662-49674-9_42
   Kovacs L., 2006, ISOLA, P67
   Kovacs L., 2006, P VERIFY P VERIFY, V6, P52
   Kovács L, 2008, LECT NOTES COMPUT SC, V4963, P249, DOI 10.1007/978-3-540-78800-3_18
   LENSTRA AK, 1982, MATH ANN, V261, P515, DOI 10.1007/BF01457454
   LOOS R, 1993, COMPUT J, V36, P450, DOI 10.1093/comjnl/36.5.450
   Miné A, 2016, LECT NOTES COMPUT SC, V9632, P560, DOI 10.1007/978-3-662-49498-1_22
   Ouaknine J., 2015, P 26 ANN ACM SIAM S, P957, DOI [10.1137/1.9781611973730.65, DOI 10.1137/1.9781611973730.65]
   Ouaknine J., 2012, RP
   Ouaknine Joel, 2015, ACM SIGLOG News, V2, P4
   Reps T., 2016, POPL
   RODRIGUEZCARBON.E, 2004, P INT S SYMB ALG COM, P266
   Shoup V., 2018, NTL: A library for doing number theory
   TARJAN RE, 1981, J ACM, V28, P577, DOI 10.1145/322261.322272
   TARJAN RE, 1981, J ACM, V28, P594, DOI 10.1145/322261.322273
   Terauchi T, 2005, LECT NOTES COMPUT SC, V3672, P352
   Tiwari A, 2004, LECT NOTES COMPUT SC, V3114, P70
NR 43
TC 20
Z9 21
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 55
DI 10.1145/3290368
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300055
OA gold
DA 2024-07-18
ER

PT J
AU Saad, FA
   Cusumano-Towner, MF
   Schaechtle, U
   Rinard, MC
   Mansinghka, VK
AF Saad, Feras A.
   Cusumano-Towner, Marco F.
   Schaechtle, Ulrich
   Rinard, Martin C.
   Mansinghka, Vikash K.
TI Bayesian Synthesis of Probabilistic Programs for Automatic Data Modeling
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic progranuning; Bayesian inference; synthesis; model
   discovery
ID GAUSSIAN-PROCESSES
AB We present new techniques for automatically constructing probabilistic programs for data analysis, interpretation, and prediction. These techniques work with probabilistic domain-specific data modeling languages that capture key properties of a broad class of data generating processes, using Bayesian inference to synthesize probabilistic programs in these modeling languages given observed data. We provide a precise formulation of Bayesian synthesis for automatic data modeling that identifies sufficient conditions for the resulting synthesis procedure to be sound. We also derive a general class of synthesis algorithms for domain-specific languages specified by probabilistic context-free grammars and establish the soundness of our approach for these languages. We apply the techniques to automatically synthesize probabilistic programs for time series data and multivariate tabular data. We show how to analyze the structure of the synthesized programs to compute, for key qualitative properties of interest, the probability that the underlying data generating process exhibits each of these properties. Second, we translate probabilistic programs in the domain-specific language into probabilistic programs in Venture, a general-purpose probabilistic programming system. The translated Venture programs are then executed to obtain predictions of new time series data and new multivariate data records. Experimental results show that our techniques can accurately infer qualitative structure in multiple real-world data sets and outperform standard data analysis methods in forecasting and predicting new data.
C1 [Saad, Feras A.; Cusumano-Towner, Marco F.; Schaechtle, Ulrich; Rinard, Martin C.; Mansinghka, Vikash K.] MIT, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Saad, FA (corresponding author), MIT, Cambridge, MA 02139 USA.
OI Saad, Feras/0000-0002-0505-795X
FU DARPA SD2 program [FA8750-17-C-0239]; MIT Media Lab; Harvard Berkman
   Klein Center Ethics and Governance of AI Fund; MIT CSAIL Systems That
   Learn Initiative
FX This research was supported by the DARPA SD2 program (contract
   FA8750-17-C-0239); grants from the MIT Media Lab, the Harvard Berkman
   Klein Center Ethics and Governance of AI Fund, and the MIT CSAIL Systems
   That Learn Initiative; as well as an anonymous philanthropic gift.
CR Abbott Martin L., 2016, USING STAT SOCIAL HL, P329
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 1966, APPL REGRESSION ANAL
   [Anonymous], INT C LEARN REPR ICL
   [Anonymous], 2006, Data Analysis using Regression and Multilevel/Hierarchical Models, DOI DOI 10.1017/CBO9780511790942
   [Anonymous], 2006, P 22 C UNC ART INT
   [Anonymous], 2009, Advances in Neural Information Processing Systems
   [Anonymous], 2005, APPL STAT SAS PROGRA
   [Anonymous], INT C LEARN REPR ICL
   [Anonymous], 1996, Bugs 0.5: Bayesian inference using Gibbs sampling, manual (version ii)
   [Anonymous], 2014, NEURAL TURING MACHIN
   Bernardo JM., 2009, BAYESIAN THEORY
   BOOTH TL, 1973, IEEE T COMPUT, VC 22, P442, DOI 10.1109/T-C.1973.223746
   Bosnak Matko, 2018, NEUR ABSTR MACH PROG, V2
   Box GEP, 1976, TIME SERIES ANAL FOR
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   Chasins S, 2017, LECT NOTES COMPUT SC, V10426, P279, DOI 10.1007/978-3-319-63387-9_14
   Dua D., 2017, UCI MACHINE LEARNING
   Ellis K, 2015, Advances in neural information processing systems, V28, P973
   Ellis Kevin, 2016, ADV NEURAL INFORM PR, P1297
   Ezekiel M., 1930, Methods of Correlation Analysis
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Ge H, 2018, PR MACH LEARN RES, V84
   Gecse R, 2010, MATH COMPUT MODEL, V52, P490, DOI 10.1016/j.mcm.2010.03.046
   Goodman N. D., 2014, DESIGN IMPLEMENTATIO
   Goodman ND., 2008, UAI, P220
   Grosse R.B., 2012, Proceedings of the 28th Conference on Uncertainty in AI (UAI), P306
   Gulwani S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P62
   Hwang I., 2011, ARXIV11105667
   Hyndman RJ, 2008, J STAT SOFTW, V27, P1, DOI 10.18637/jss.v027.i03
   James G, 2013, SPRINGER TEXTS STAT, V103, P1, DOI [10.1007/978-1-4614-7138-7, 10.1007/978-1-4614-7138-7_1]
   Jelinek F., 1992, Speech Recognition and Understanding. Recent Advances, Trends and Applications. Proceedings of the NATO Advanced Study Institute, P345
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Johnson M., 2007, ADV NEURAL INFORM PR, V19, P641
   Johnson MJ, 2013, J MACH LEARN RES, V14, P673
   Koza J. R., 1997, IEEE Transactions on Evolutionary Computation, V1, P109, DOI 10.1109/4235.687879
   Koza J.R., 1992, GENETIC PROGRAMMING, VVolume 1
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   Liang P., 2010, P 27 INT C INT C MAC, P639
   Lloyd James, 2013, P 30 INT C MACH LEAR, V28
   Lloyd James R, 2014, KERNEL STRUCTURE DIS
   Lloyd JR, 2014, AAAI CONF ARTIF INTE, P1242
   MANNA Z, 1979, IEEE T SOFTWARE ENG, V5, P294, DOI 10.1109/TSE.1979.234198
   Manna Z., 1980, ACM Transactions on Programming Languages and Systems, V2, P90, DOI 10.1145/357084.357090
   Mansinghka V, 2016, J MACH LEARN RES, V17
   Mansinghka VK, 2018, ACM SIGPLAN NOTICES, V53, P603, DOI [10.1145/3192366.3192409, 10.1145/3296979.3192409]
   Mansinghka Vikash K., 2014, Venture: A Higher-Order Probabilistic Programming Platform with Programmable Inference
   Milch B, 2005, 19TH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI-05), P1352
   Murphy KP, 2012, MACHINE LEARNING: A PROBABILISTIC PERSPECTIVE, P27
   Nie N.H., 1975, SPSS STAT PACKAGE SO, V227
   Nijholt A, 1980, CONTEXT FREE GRAMMAR
   Nori AV, 2015, ACM SIGPLAN NOTICES, V50, P208, DOI [10.1145/2737924.2737982, 10.1145/2813885.2737982]
   Pedregosa F, 2011, J MACH LEARN RES, V12, P2825
   Perov Yura N., 2014, ARXIV14072646
   Pfeffer A., 2001, IJCAI
   Pfeffer Avi, 2016, Practical probabilistic programming
   Plummer M., 2003, P 3 INT WORKSH DIS T, V124, P10, DOI DOI 10.1.1.13.3406
   Quiñonero-Candela JQ, 2005, J MACH LEARN RES, V6, P1939
   Racine J, 2004, J ECONOMETRICS, V119, P99, DOI 10.1016/S0304-4076(03)00157-X
   Rasmussen CE, 2010, J MACH LEARN RES, V11, P3011
   Rasmussen CE, 2005, ADAPT COMPUT MACH LE, P1
   Reed S.De Freitas., 2015, Neural programmer-interpreters
   Saad F., 2018, P 21 INT C ARTIFICIA, P755
   Saad F, 2017, PR MACH LEARN RES, V54, P632
   Saad Feras, 2016, ARXIV160805347
   Salvatier J, 2016, PEERJ COMPUT SCI, DOI 10.7717/peerj-cs.55
   Schkufza E, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI 10.1145/2499368.2451150
   Schonfinkel M, 1924, MATH ANN, V92, P305, DOI 10.1007/BF01448013
   Scott D.W, 2009, Multivariate Density Estimation: Theory, Practice, and Visualization, V2nd ed.
   Seabold S., 2010, P 9 PYTH SCI C, P57, DOI DOI 10.25080/MAJORA-92BF1922-011
   Silverman, 2018, DENSITY ESTIMATION S, DOI 10.1201/9781315140919
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Taylor SJ, 2018, AM STAT, V72, P37, DOI 10.1080/00031305.2017.1380080
   TIERNEY L, 1994, ANN STAT, V22, P1701, DOI 10.1214/aos/1176325750
   Tong Anh, 2016, ARXIV160700710
   Tukey J.W., 1977, EXPLORATORY DATA ANA, V2
   Turbak F, 2008, DESIGN CONCEPTS IN PROGRAMMING LANGUAGES, P1
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
NR 79
TC 14
Z9 17
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 37
DI 10.1145/3290350
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300037
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Ghorbani, M
   Huot, M
   Hashemian, S
   Shaikhha, A
AF Ghorbani, Mahdi
   Huot, Mathieu
   Hashemian, Shideh
   Shaikhha, Amir
TI Compiling Structured Tensor Algebra
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Tensor algebra; Structured tensors; Code generation; Program analysis;
   Program synthesis
ID FRAMEWORK
AB Tensor algebra is essential for data-intensive workloads in various computational domains. Computational scientists face a trade-off between the specialization degree provided by dense tensor algebra and the algorithmic efficiency that leverages the structure provided by sparse tensors. This paper presents StructTensor, a framework that symbolically computes structure at compilation time. This is enabled by Structured Tensor Unified Representation (STUR), an intermediate language that can capture tensor computations as well as their sparsity and redundancy structures. Through a mathematical view of lossless tensor computations, we show that our symbolic structure computation and the related optimizations are sound. Finally, for different tensor computation workloads and structures, we experimentally show how capturing the symbolic structure can result in outperforming state-of-the-art frameworks for both dense and sparse tensor algebra.
C1 [Ghorbani, Mahdi; Hashemian, Shideh; Shaikhha, Amir] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
   [Huot, Mathieu] Univ Oxford, Oxford, England.
C3 University of Edinburgh; University of Oxford
RP Ghorbani, M (corresponding author), Univ Edinburgh, Edinburgh, Midlothian, Scotland.
EM mahdi.ghorbani@ed.ac.uk; mathieu.huot@stx.ox.ac.uk;
   s.hashemian@sms.ed.ac.uk; amir.shaikhha@ed.ac.uk
RI Shaikhha, Amir/JXL-7753-2024
OI Huot, Mathieu/0000-0002-5294-9088; Hashemian, Shideh/0009-0004-3787-3136
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   Augustine T, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P625, DOI 10.1145/3314221.3314615
   Bastoul C, 2004, 13TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURE AND COMPILATION TECHNIQUES, PROCEEDINGS, P7, DOI 10.1109/PACT.2004.1342537
   Blalock D., 2020, What is the state of neural network pruning?, P129
   Bradbury J., 2018, JAX: Composable transformations of Python + NumPy programs
   Cheshmi K, 2017, SC'17: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, DOI 10.1145/3126908.3126936
   Chou S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276493
   Cichocki A, 2008, IEEE SIGNAL PROC MAG, V25, P142, DOI 10.1109/MSP.2008.4408452
   Corporacion Favorita, 2017, Corp. Favorita Grocery Sales Forecasting: Can you accurately predict sales for a large grocery chain?
   DONGARRA JJ, 1990, ACM T MATH SOFTWARE, V16, P1, DOI 10.1145/77626.79170
   Eisner Jason, 2010, Datalog Reloaded. First International Workshop, Datalog 2010. Revised Selected Papers, P181, DOI 10.1007/978-3-642-24206-9_11
   Gareev R, 2018, ACM T ARCHIT CODE OP, V15, DOI 10.1145/3235029
   Hansen P E, 1989, Math Popul Stud, V2, P37
   Hansen PC, 2002, NUMER ALGORITHMS, V29, P323, DOI 10.1023/A:1015222829062
   Harris CR, 2020, NATURE, V585, P357, DOI 10.1038/s41586-020-2649-2
   Hegde K, 2019, MICRO'52: THE 52ND ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, P319, DOI 10.1145/3352460.3358275
   Hirata S, 2003, J PHYS CHEM A, V107, P9887, DOI 10.1021/jp034596z
   Hirata S, 2006, THEOR CHEM ACC, V116, P2, DOI 10.1007/s00214-005-0029-5
   Jouppi NP, 2017, 44TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA 2017), P1, DOI 10.1145/3079856.3080246
   Kandemir M, 1999, IEEE T PARALL DISTR, V10, P115, DOI 10.1109/71.752779
   Khamis MA, 2020, ACM T DATABASE SYST, V45, DOI 10.1145/3375661
   Khamis MA, 2016, PODS'16: PROCEEDINGS OF THE 35TH ACM SIGMOD-SIGACT-SIGAI SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P13, DOI 10.1145/2902251.2902280
   Kjolstad F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133901
   Martín-García JM, 2008, COMPUT PHYS COMMUN, V179, P597, DOI 10.1016/j.cpc.2008.05.009
   Mohammadi MS, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P594, DOI 10.1145/3314221.3314646
   Nethercote N., 2006, IISWC, P2, DOI DOI 10.1109/IISWC.2006.302723
   Nethercote N, 2007, ACM SIGPLAN NOTICES, V42, P89, DOI 10.1145/1273442.1250746
   Nikolic M, 2018, INT CONF MANAGE DATA, P365, DOI 10.1145/3183713.3183758
   Paszke A, 2019, ADV NEUR IN, V32
   PolyMage, 2023, PolyBlocks
   Ran S.-J., 2020, Tensor Network Contractions: Methods and Applications to Quantum Many-Body Systems
   Schleich Maximilian, 2023, Proceedings of the ACM on Management of Data, V1, DOI 10.1145/3588717
   Shaikhha A, 2023, Arxiv, DOI arXiv:2303.07030
   Shaikhha A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527333
   Smith D. G. A., 2018, J. Open Source Softw, V3, P753, DOI DOI 10.21105/JOSS.00753
   Spampinato DG, 2016, INT SYM CODE GENER, P117, DOI 10.1145/2854038.2854060
   Strout MM, 2018, P IEEE, V106, P1921, DOI 10.1109/JPROC.2018.2857721
   Tang X, 2020, COMPUT GRAPH FORUM, V39, P209, DOI 10.1111/cgf.14080
   Titov AV, 2013, J CHEM THEORY COMPUT, V9, P213, DOI 10.1021/ct300321a
   Vasilache N, 2018, Arxiv, DOI arXiv:1802.04730
   Verdoolaege S, 2010, LECT NOTES COMPUT SC, V6327, P299, DOI 10.1007/978-3-642-15582-6_49
NR 41
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 229
DI 10.1145/3622804
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100009
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Mora, F
   Desai, A
   Polgreen, E
   Seshia, SA
AF Mora, Federico
   Desai, Ankush
   Polgreen, Elizabeth
   Seshia, Sanjit A.
TI Message Chains for Distributed System Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Formal verification; distributed systems; message passing
ID SYNCHRONIZATION; IVY
AB Verification of asynchronous distributed programs is challenging due to the need to reason about numerous control paths resulting from the myriad interleaving of messages and failures. In this paper, we propose an automated bookkeeping method based on message chains. Message chains reveal structure in asynchronous distributed system executions and can help programmers verify their systems at the message passing level of abstraction. To evaluate our contributions empirically we build a verification prototype for the P programming language that integrates message chains. We use it to verify 16 benchmarks from related work, one new benchmark that exemplifies the kinds of systems our method focuses on, and two industrial benchmarks. We find that message chains are able to simplify existing proofs and our prototype performs comparably to existing work in terms of runtime. We extend our work with support for specification mining and find that message chains provide enough structure to allow existing learning and program synthesis tools to automatically infer meaningful specifications using only execution examples.
C1 [Mora, Federico; Seshia, Sanjit A.] Univ Calif Berkeley, Berkeley, CA 94720 USA.
   [Desai, Ankush] Amazon Web Serv, Seattle, WA USA.
   [Polgreen, Elizabeth] Univ Edinburgh, Edinburgh, Scotland.
C3 University of California System; University of California Berkeley;
   Amazon.com; University of Edinburgh
RP Mora, F (corresponding author), Univ Calif Berkeley, Berkeley, CA 94720 USA.
EM fmora@berkeley.edu; ankushpd@amazon.com; elizabeth.polgreen@ed.ac.uk;
   sseshia@berkeley.edu
FU Qualcomm Innovation Fellowship; NSF [1837132]; DARPA [FA8750-20-C-0156];
   Amazon Research Award; Toyota under the iCyPhy center; Intel under the
   Scalable Assurance program; Amazon Web Services
FX We would like to thank Annamira O'Toole for help modelling and verifying
   the onion routing protocol. We would like to thank Adwait Godbole,
   Gabriel Matute, Hazem Torfah, and the anonymous reviewers for their
   feedback and comments. This work was supported in part by the Qualcomm
   Innovation Fellowship, NSF grant 1837132, DARPA contract
   FA8750-20-C-0156, an Amazon Research Award, summer internships at Amazon
   Web Services, Toyota under the iCyPhy center, and by Intel under the
   Scalable Assurance program.
CR Amazon.com Inc., 2023, Clock-Bound
   Ammons G, 2002, ACM SIGPLAN NOTICES, V37, P4, DOI 10.1145/565816.503275
   ANGLUIN D, 1980, J COMPUT SYST SCI, V21, P46, DOI 10.1016/0022-0000(80)90041-0
   [Anonymous], 2006, P 2006 INT S SOFTWAR
   Aspnes J, 2023, Arxiv, DOI arXiv:2001.04235
   Barrett C., 2016, The Satisfiability Modulo Theories Library (SMT-LIB)
   Barrett C, 2021, FRONT ARTIF INTEL AP, P1267, DOI 10.3233/FAIA201017
   Berkovits I, 2019, LECT NOTES COMPUT SC, V11562, P245, DOI 10.1007/978-3-030-25543-5_15
   BERNSTEIN PA, 1983, ACM T DATABASE SYST, V8, P465, DOI 10.1145/319996.319998
   Beschastnikh I, 2015, IEEE T SOFTWARE ENG, V41, P408, DOI 10.1109/TSE.2014.2369047
   BIERMANN AW, 1972, IEEE T COMPUT, VC 21, P592, DOI 10.1109/TC.1972.5009015
   Bjorner Nikolaj, 2012, SMT, V12, P76
   Bonacina Maria Paola, 2019, Description Logic, Theory Combination, and All That: Essays Dedicated to Franz Baader on the Occasion of His 60th Birthday. Lecture Notes in Computer Science (LNCS 11560), P57, DOI 10.1007/978-3-030-22102-7_3
   CHANG E, 1979, COMMUN ACM, V22, P281, DOI 10.1145/359104.359108
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   Day JD, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571203
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Desai A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276529
   Desai A, 2013, ACM SIGPLAN NOTICES, V48, P321, DOI 10.1145/2499370.2462184
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   Feldman YMY, 2019, LECT NOTES COMPUT SC, V11562, P405, DOI 10.1007/978-3-030-25543-5_23
   Feldman YMY, 2017, LECT NOTES COMPUT SC, V10205, P76, DOI 10.1007/978-3-662-54577-5_5
   Gray J, 2006, ACM T DATABASE SYST, V31, P133, DOI 10.1145/1132863.1132867
   Griffin J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409005
   Halbert Daniel Conrad, 1984, Programming by example, Patent No. AAI8512843
   Hance T, 2021, PROCEEDINGS OF THE 18TH USENIX SYMPOSIUM ON NETWORKED SYSTEM DESIGN AND IMPLEMENTATION, P115
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   ITU-T, 2011, Recommendation Z.120
   Jaber N, 2021, Arxiv, DOI arXiv:2004.04613
   Jaber N, 2020, LECT NOTES COMPUT SC, V12224, P299, DOI 10.1007/978-3-030-53288-8_15
   Jeppu NY, 2020, DES AUT CON, DOI 10.1109/dac18072.2020.9218613
   JIANG T, 1994, INT J COMPUT MATH, V50, P147, DOI 10.1080/00207169408804252
   Koenig JR, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P703, DOI 10.1145/3385412.3386018
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Lang K. J., 1998, Grammatical Inference. 4th International Colloquium, ICGI-98. Proceedings, P1, DOI 10.1007/BFb0054059
   Le Lann Gerard, 1977, INFORMATION PROCESSI, P155
   LEWIS HR, 1980, J COMPUT SYST SCI, V21, P317, DOI 10.1016/0022-0000(80)90027-6
   Lightbend Inc, 2022, Akka
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Ma HJ, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P370, DOI 10.1145/3341301.3359651
   McMillan K. L., 2001, Correct Hardware Design and Verification Methods. 11th IFIP WG 10.5 Advanced Research Working Conference, CHARME 2001. Proceedings (Lecture Notes in Computer Science Vol.2144), P179
   McMillan KL, 2020, LECT NOTES COMPUT SC, V12225, P190, DOI 10.1007/978-3-030-53291-8_12
   Miltner A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498682
   Montesi Fabrizio., 2014, Choreographic Programming
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Schuler D, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P69
   SCHWARZ R, 1994, DISTRIB COMPUT, V7, P149, DOI 10.1007/BF02277859
   Sethi D, 2014, LECT NOTES COMPUT SC, V8837, P330, DOI 10.1007/978-3-319-11936-6_24
   Sheng Y, 2020, LECT NOTES COMPUT SC, V12166, P238, DOI 10.1007/978-3-030-51074-9_14
   Shinohara Takeshi, 1982, P 7 IBM S MATH FDN C, P191
   Suter P, 2011, LECT NOTES COMPUT SC, V6887, P298, DOI 10.1007/978-3-642-23702-7_23
   Talupur M, 2008, 2008 FORMAL METHODS IN COMPUTER-AIDED DESIGN, P69
   Telefonaktiebolaget LM Ericsson, 2022, Erlang
   Widder J, 2007, DISTRIB COMPUT, V20, P115, DOI 10.1007/s00446-007-0026-0
   Yao JA, 2021, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '21), P405
NR 57
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 300
DI 10.1145/3622876
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100080
OA Green Published, gold, Green Accepted
DA 2024-07-18
ER

PT J
AU Müller, M
   Schuster, P
   Starup, JL
   Ostermann, K
   Brachthäuser, JI
AF Mueller, Marius
   Schuster, Philipp
   Starup, Jonathan Lindegaard
   Ostermann, Klaus
   Braechthauser, Jonathan Immanuel
TI From Capabilities to Regions: Enabling Efficient Compilation of Lexical
   Effect Handlers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE effect handlers; region inference; lift inference
AB Effect handlers are a high-level abstraction that enables programmers to use effects in a structured way. They have gained a lot of popularity within academia and subsequently also in industry. However, the abstraction often comes with a significant runtime cost and there has been intensive research recently on how to reduce this price.
   A promising approach in this regard is to implement effect handlers using a CPS translation and to provide sufficient information about the nesting of handlers. With this information the CPS translation can decide how effects have to be lifted through handlers, i.e., which handlers need to be skipped, in order to handle the effect at the correct place. A structured way to make this information available is to use a calculus with a region system and explicit subregion evidence. Such calculi, however, are quite verbose, which makes them impractical to use as a source-level language.
   We present a method to infer the lifting information for a calculus underlying a source-level language. This calculus uses second-class capabilities for the safe use of effects. To do so, we define a typed translation to a calculus with regions and evidence and we show that this lift-inference translation is typability- and semantics-preserving. On the one hand, this exposes the precise relation between the second-class property and the structure given by regions. On the other hand, it closes a gap in a compiler pipeline enabling efficient compilation of the source-level language. We have implemented lift inference in this compiler pipeline and conducted benchmarks which indicate that the approach is indeed working.
C1 [Mueller, Marius; Schuster, Philipp; Ostermann, Klaus; Braechthauser, Jonathan Immanuel] Univ Tubingen, Tubingen, Germany.
   [Starup, Jonathan Lindegaard] Aarhus Univ, Aarhus, Denmark.
C3 Eberhard Karls University of Tubingen; Aarhus University
RP Müller, M (corresponding author), Univ Tubingen, Tubingen, Germany.
EM mari.mueller@uni-tuebingen.de; philipp.schuster@uni-tuebingen.de;
   jls@cs.au.dk; klaus.ostermann@uni-tuebingen.de;
   jonathan.brachthaeuser@uni-tuebingen.de
OI Ostermann, Klaus/0000-0001-5294-5506; Schuster,
   Philipp/0000-0001-8011-0506; Brachthauser, Jonathan
   Immanuel/0000-0001-9128-0391
FU Deutsche Forschungsgemeinschaft (DFG -German Research Foundation)
   [DFG-448316946]
FX We thank Matthew Fluet for his helpful assistance with MLton. The work
   on this project was supported by the Deutsche Forschungsgemeinschaft
   (DFG -German Research Foundation) project number DFG-448316946.
CR Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Biernacki D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158096
   Biernacki D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371116
   Brachthäuser JI, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527320
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   Devriese D, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '19), P1, DOI 10.1145/3331545.3342589
   Dolan Stephen, 2014, OCAML WORKSH
   Dyvbig RK, 2007, J FUNCT PROGRAM, V17, P687, DOI 10.1017/S0956796807006259
   Farvardin K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P75, DOI 10.1145/3385412.3385994
   Figueroa I, 2016, SCI COMPUT PROGRAM, V119, P3, DOI 10.1016/j.scico.2015.11.010
   Hannan J., 1998, Journal of Functional Programming, V8, P239, DOI 10.1017/S0956796898003025
   Hillerström D, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000040
   Hillerstrom Daniel, 2017, Formal Structures for Computation and Deduction (LIPIcs, V84
   Hillerstrom Daniel, 2023, Effect handlers benchmarks suite
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Jones M. P., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P97
   Karachalias G, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485479
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Kiselyov O, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P1
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Milner Robin, 1997, The Definition of Standard ML, DOI [10.7551/mitpress/2319.001.0001, DOI 10.7551/MITPRESS/2319.001.0001]
   Muller Marius, 2023, Artifact of the paper ' From Capabilities to Regions: Enabling Efficient Compilation of Lexical Effect Handlers', DOI [10.5281/zenodo.8315298, DOI 10.5281/ZENODO.8315298]
   Muller Marius, 2023, Extended Technical Report
   Ningning Xie, 2021, Proceedings of the ACM on Programming Languages, V5, DOI 10.1145/3473576
   Osvald L, 2016, ACM SIGPLAN NOTICES, V51, P234, DOI 10.1145/3022671.2984009
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pretnar Matija, 2017, Technical Report
   Saleh Amr Hany, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P327, DOI 10.1007/978-3-319-89884-1_12
   Schrijvers T, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '19), P98, DOI 10.1145/3331545.3342595
   Schuster P, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P566, DOI 10.1145/3519939.3523710
   Schuster P, 2022, LECT NOTES COMPUT SC, V13240, P492, DOI 10.1007/978-3-030-99336-8_18
   Schuster P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408975
   Schuster P, 2018, PROCEEDINGS OF THE 3RD ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE '18), P14, DOI 10.1145/3240719.3241788
   Sheng Liang, 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P333, DOI 10.1145/199448.199528
   Sivaramakrishnan KC, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P206, DOI 10.1145/3453483.3454039
   Thielecke H, 2003, ACM SIGPLAN NOTICES, V38, P139, DOI 10.1145/640128.604144
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tofte M., 2001, PROGRAMMING REGIONS
   Xhebraj Anxhelo, 2022, 36 EUR C OBJ OR PROG, V222
   Xie NN, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408981
NR 44
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 255
DI 10.1145/3622831
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100035
OA gold
DA 2024-07-18
ER

PT J
AU Wan, CC
   Liu, YH
   Du, KT
   Hoffmann, H
   Jiang, JC
   Maire, M
   Lu, S
AF Wan, Chengcheng
   Liu, Yuhan
   Du, Kuntai
   Hoffmann, Henry
   Jiang, Junchen
   Maire, Michael
   Lu, Shan
TI Run-Time Prevention of Software Integration Failures of Machine Learning
   APIs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE software integration failure; machine learning API; run-time patching
ID RECOGNITION
AB Due to the under-specified interfaces, developers face challenges in correctly integrating machine learning (ML) APIs in software. Even when the ML API and the software are well designed on their own, the resulting application misbehaves when the API output is incompatible with the software. It is desirable to have an adapter that converts ML API output at runtime to better fit the software need and prevent integration failures.
   In this paper, we conduct an empirical study to understand ML API integration problems in real-world applications. Guided by this study, we present SmartGear, a tool that automatically detects and converts mismatching or incorrect ML API output at run time, serving as a middle layer between ML API and software. Our evaluation on a variety of open-source applications shows that SmartGear detects 70% incompatible API outputs and prevents 67% potential integration failures, outperforming alternative solutions.
C1 [Wan, Chengcheng] East China Normal Univ, Natl Trusted Embedded Software Engn Technol Res C, Shanghai, Peoples R China.
   [Liu, Yuhan; Du, Kuntai; Hoffmann, Henry; Jiang, Junchen; Maire, Michael] Univ Chicago, Dept Comp Sci, Chicago, IL 60637 USA.
   [Lu, Shan] Univ Chicago, Dept Comp Sci, Microsoft, Chicago, IL 60637 USA.
C3 East China Normal University; University of Chicago; Microsoft;
   University of Chicago
RP Wan, CC (corresponding author), East China Normal Univ, Natl Trusted Embedded Software Engn Technol Res C, Shanghai, Peoples R China.
EM ccwan@sei.ecnu.edu.cn; yuhanl@uchicago.edu; kuntai@uchicago.edu;
   hankhoffmann@cs.uchicago.edu; junchenj@uchicago.edu;
   mmaire@uchicago.edu; shanlu@uchicago.edu
RI Lu, Shan/J-8386-2015; Wan, Chengcheng/JWO-9549-2024
OI Lu, Shan/0000-0002-1419-5166; Wan, Chengcheng/0000-0001-9162-9688;
   Jiang, Junchen/0000-0002-6877-1683
FU NSF [CNS1764039, CNS1956180, CCF2119184, CNS1952050, CCF1823032]; ARO
   [W911NF1920321]; DOE Early Career Award [DESC0014195 0003]; CERES Center
   for Unstoppable Computing; Microsoft research dissertation grant;
   UChicago Marian and Stuart Rice Research Award
FX We thank the reviewers for their insightful feedback. The authors'
   research is supported by NSF (CNS1764039, CNS1956180, CCF2119184,
   CNS1952050, CCF1823032), ARO (W911NF1920321), and a DOE Early Career
   Award (grant DESC0014195 0003). Additional support comes from the CERES
   Center for Unstoppable Computing, UChicago Marian and Stuart Rice
   Research Award, Microsoft research dissertation grant, and research
   gifts from Facebook.
CR Aander-ETL, 2017, A smart album application
   Amazon, 2022, Amazon arti~cial intelligence service
   Amazon, 2022, Amazon Rekognition Image
   Amershi S, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2019), P291, DOI 10.1109/ICSE-SEIP.2019.00042
   Aué J, 2018, 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING - SOFTWARE ENGINEERING IN PRACTICE TRACK (ICSE-SEIP 2018), P13, DOI 10.1145/3183519.3183537
   Bai Yu, 2021, INT C MACHINE LEARNI, P566
   Ball T, 2015, NATO SCI PEAC SECUR, V40, P26, DOI 10.3233/978-1-61499-495-4-26
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Buchner Johannes, 2022, ImageHash: An image hashing library written in Python
   Chen DA, 2022, PROC CVPR IEEE, P295, DOI 10.1109/CVPR52688.2022.00039
   Chen LJ, 2019, INT CONF MANAGE DATA, P1535, DOI 10.1145/3299869.3300078
   Chen Lingjiao, 2022, PMLR, DOI [10.48550/arXiv.2102.09127, DOI 10.48550/ARXIV.2102.09127]
   Chen Lingjiao, 2022, ICLR Poster, DOI [10.48550/arXiv.2107.14203, DOI 10.48550/ARXIV.2107.14203]
   Chen Lingjiao, 2020, ADV NEURAL INFORM PR, V33, P10685, DOI DOI 10.48550/ARXIV:2006.07512
   Chen XJ, 2020, EXPERT SYST APPL, V141, DOI 10.1016/j.eswa.2019.112948
   Cheng Chih-Hong, 2018, INT S AUT TECHN VER, DOI [10.48550/arXiv.1805.04333, DOI 10.48550/ARXIV.1805.04333]
   Das K., 2017, Int. J. Innov. Res. Comput. Commun. Eng., V5, P1301, DOI [10.15680/IJIRCCE.2017.0502001, DOI 10.15680/IJIRCCE.2017.0502001]
   DequanWang Evan Shelhamer, 2021, ICLR, DOI [10.48550/arXiv.2006.10726, DOI 10.48550/ARXIV.2006.10726]
   Dietterich TG, 2000, LECT NOTES COMPUT SC, V1857, P1, DOI 10.1007/3-540-45014-9_1
   FESMKMITL, 2021, A smart album application
   Flood-Depths, 2021, A flood detection application
   FortniteTracker, 2019, Areal time game tracker application
   Google, 2022, Google Cloud AI
   Google, 2022, Google Cloud Natural Language
   Grandini M, 2020, Arxiv, DOI [arXiv:2008.05756, DOI 10.48550/ARXIV.2008.05756, 10.48550/arXiv.2008.05756]
   Grent H, 2021, 2021 IEEE/ACM 43RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2021), P71, DOI 10.1109/ICSE-SEIP52600.2021.00016
   Haller A, 2022, LECT NOTES COMPUT SC, V13261, P21, DOI 10.1007/978-3-031-06981-9_2
   Halter Dave, 2022, Jedi: an awesome auto-completion, static analysis and refactoring library for Python
   Helle Philipp, 2016, INCOSE International Symposium, DOI [10.1002/j.2334-5837.2016.00179.x, DOI 10.1002/J.2334-5837.2016.00179.X]
   Hendrycks D, 2019, ADV NEUR IN, V32
   Hill C, 2016, S VIS LANG HUM CEN C, P162, DOI 10.1109/VLHCC.2016.7739680
   Hosseini H, 2017, 2017 16TH IEEE INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA), P101, DOI 10.1109/ICMLA.2017.0-172
   Hou JH, 2019, INT WORKSH QUAL SERV, DOI 10.1145/3326285.3329042
   IBM, 2022, IBM Watson
   Jaiswal A, 2021, TECHNOLOGIES, V9, DOI 10.3390/technologies9010002
   Kim M, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P585, DOI 10.1145/3180155.3182515
   Kim M, 2016, PROC INT CONF SOFTW, P96, DOI 10.1145/2884781.2884783
   Kuehne H, 2011, IEEE I CONF COMP VIS, P2556, DOI 10.1109/ICCV.2011.6126543
   Kuznetsova A, 2020, INT J COMPUT VISION, V128, P1956, DOI 10.1007/s11263-020-01316-z
   Lewis C., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P275, DOI 10.1145/1810295.1810352
   Lindvall M, 2017, 2017 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON METAMORPHIC TESTING (MET 2017), P35, DOI 10.1109/MET.2017.6
   Linz T, 2020, FUTURE OF SOFTWARE QUALITY ASSURANCE, P61, DOI 10.1007/978-3-030-29509-7_5
   Lisa-Assistant, 2021, A voice assistant application
   Long F, 2014, ACM SIGPLAN NOTICES, V49, P227, DOI [10.1145/2666356.2594337, 10.1145/2594291.2594337]
   Marby David, 2021, Pyan3: Offline call graph generator for Python 3
   Messina R, 2015, PROC INT CONF DOC, P171
   Microsoft, 2022, Microsoft Azure Image Tagging
   Microsoft, 2022, Microsoft Azure Cognitive Services
   Minhee Hong, 2021, Python interface for Wikidata
   Mummadi Chaithanya Kumar, 2021, arXiv
   Nahar N, 2022, PROC INT CONF SOFTW, P413, DOI 10.1145/3510003.3510209
   Pajola L, 2021, 2021 IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P 2021), P198, DOI 10.1109/EuroSP51992.2021.00023
   Panetta K, 2021, AI-BASEL, V2, P684, DOI 10.3390/ai2040041
   Perkins JH, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P87
   Plant-Watcher, 2018, A plant management application
   ProjectSyn, 2020, A voice-activated light application
   RoomR, 2020, A property management application
   Royer A, 2015, PROC CVPR IEEE, P1401, DOI 10.1109/CVPR.2015.7298746
   SeeFarBeyond, 2022, A coin finder application
   Shewalkar A, 2019, J ARTIF INTELL SOFT, V9, P235, DOI 10.2478/jaiscr-2019-0006
   SmartCan, 2019, An garbage classiffcation application
   Smith Kevin D., 2022, PEP 318 aAS Decorators for Functions and Methods
   Stinner Victor, 2021, Bytecode: Python module to generate and modify bytecode
   Szegedy Christian, 2014, ICLR, DOI [10.1109/CRV.2019.00010, DOI 10.1109/CRV.2019.00010]
   Voigtlaender P, 2017, Arxiv, DOI arXiv:1706.09364
   Wan CC, 2022, PROC INT CONF SOFTW, P212, DOI 10.1145/3510003.3510068
   Wan CC, 2021, PROC INT CONF SOFTW, P125, DOI 10.1109/ICSE43902.2021.00024
   Wan Chengcheng, 2023, SmartGear
   Wan Chengcheng, 2023, Artifact for "Run-Time Prevention of Software Integration Failures of Machine Learning APIs
   Wang DB, 2021, ADV NEUR IN, V34
   Wehrmann Jonatas, 2018, PMLR, P5075
   Wikidata, 2022, A free and open knowledge base
   Wittern E, 2017, PROC INT CONF SOFTW, P244, DOI 10.1109/ICSE.2017.30
   Wu Ruihan, 2021, Advances in Neural Information Processing Systems, V34, P11745, DOI 10.48550/arXiv.2103.11766
   Xie SZ, 2022, IEEE INFOCOM SER, P2078, DOI 10.1109/INFOCOM48880.2022.9796701
   Yanai K, 2015, IEEE INT C MULTIMEDI
   Yao YS, 2017, PROCEEDINGS OF THE 2017 INTERNET MEASUREMENT CONFERENCE (IMC'17), P384, DOI 10.1145/3131365.3131372
   Zhang MS, 2018, IEEE INT CONF AUTOM, P132, DOI 10.1145/3238147.3238187
   Zhao XH, 2018, 2018 IEEE 18TH INTERNATIONAL CONFERENCE ON SOFTWARE QUALITY, RELIABILITY AND SECURITY COMPANION (QRS-C), P14, DOI 10.1109/QRS-C.2018.00017
   Zintgraf Luisa, 2019, PMLR, P7693
NR 80
TC 0
Z9 0
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 231
DI 10.1145/3622806
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100011
OA gold
DA 2024-07-18
ER

PT J
AU Goldstein, H
   Frohlich, S
   Wang, M
   Pierce, BC
AF Goldstein, Harrison
   Frohlich, Samantha
   Wang, Meng
   Pierce, Benjamin C.
TI Reflecting on Random Generation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE bidirectional programming; property-based testing; random generation
AB Expert users of property-based testing often labor to craft random generators that encode detailed knowledge about what it means for a test input to be valid and interesting. Fortunately, the fruits of this labor can also be put to other good uses. In the bidirectional programming literature, for example, generators have been repurposed as validity checkers, while Python's Hypothesis library uses them to shrink and mutate test inputs.
   To unify and generalize these uses (and more), we propose reflective generators, a new foundation for random data generators that can "reflect" on an input value to calculate the random choices that could have been made to produce it. Reflective generators combine ideas from two existing abstractions: free generators and partial monadic profunctors. They can be used to implement and enhance the aforementioned shrinking and mutation algorithms, generalizing them to work for any values that could have been produced by the generator, not just ones for which a trace of the generator's execution is available. Beyond shrinking and mutation, reflective generators simplify and generalize a published algorithm for example-based generation; they can also be used as checkers, partial value completers, and test data producers like enumerators.
C1 [Goldstein, Harrison; Pierce, Benjamin C.] Univ Penn, Philadelphia, PA 19104 USA.
   [Frohlich, Samantha; Wang, Meng] Univ Bristol, Bristol, Avon, England.
C3 University of Pennsylvania; University of Bristol
RP Goldstein, H (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM hgo@seas.upenn.edu; samantha.frohlich@bristol.ac.uk;
   meng.wang@bristol.ac.uk; bcpierce@cis.upenn.edu
OI Frohlich, Samantha/0000-0002-4423-6918; Pierce,
   Benjamin/0000-0001-7839-1636; Goldstein, Harrison/0000-0001-9631-1169;
   Wang, Meng/0000-0001-7780-630X
FU NSF [1421243]; Random Testing for Language Design [1521523]; EPSRC grant
   EXHIBIT: Expressive High-Level Languages for Bidirectional
   Transformations [EP/T008911/1]
FX This work was financially supported by NSF awards #1421243, Random
   Testing for Language Design and #1521523, Expeditions in Computing: The
   Science of Deep Specification, along with EPSRC grant EXHIBIT:
   Expressive High-Level Languages for Bidirectional Transformations
   (EP/T008911/1).
CR [Anonymous], 1975, Commentationes Mathematicae Universitatis Carolinae
   Aschermann C, 2019, 26TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2019), DOI 10.14722/ndss.2019.23412
   Braquehais R.M, 2017, Tools for Discovery, Refinement and Generalization of Functional Properties by Enumerative Testing
   Chasins SE, 2021, COMMUN ACM, V64, P98, DOI 10.1145/3469279
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Coblenz M, 2021, ACM T COMPUT-HUM INT, V28, DOI 10.1145/3452379
   Dodds Zac Hatfield, 2022, Personal communication
   Dolan Stephen, 2017, OCAML WORKSHOP
   Duregård J, 2012, ACM SIGPLAN NOTICES, V47, P61, DOI 10.1145/2430532.2364515
   Fioraldi Andrea, 2020, {AFL++} : Combining Incremental Steps of Fuzzing Research
   Foster John Nathan, 2009, Bidirectional Programming Languages
   GIRARD JY, 1986, THEOR COMPUT SCI, V45, P159, DOI 10.1016/0304-3975(86)90044-7
   Godefroid P, 2017, IEEE INT CONF AUTOM, P50, DOI 10.1109/ASE.2017.8115618
   Godefroid P, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P206, DOI 10.1145/1375581.1375607
   Goldstein H, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563291
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Holler Christian, 2012, P 21 USENIX C SEC S, P445
   Hughes J, 2020, LECT NOTES COMPUT SC, V12053, P58, DOI 10.1007/978-3-030-47147-7_4
   James MB, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428273
   Kiselyov Oleg, 2012, Generic and Indexed Programming. International Spring School, SSGIP 2010. Revised Lectures, P130, DOI 10.1007/978-3-642-32202-0_3
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Kmett Ed, 2023, free: Haskell Package
   KULLBACK S, 1951, ANN MATH STAT, V22, P79, DOI 10.1214/aoms/1177729694
   Leijen Daan, 2001, Parsec: Direct Style Monadic Parser Combinators For The Real World, P22
   LIN JH, 1991, IEEE T INFORM THEORY, V37, P145, DOI 10.1109/18.61115
   MacIver D.R, 2020, TEST CASE REDUCTION, V166
   MacIver David R., 2019, Journal of Open Source Software, V4, P1891, DOI DOI 10.21105/JOSS.01891
   Magalhaes JP, 2010, ACM SIGPLAN NOTICES, V45, P37, DOI 10.1145/2088456.1863529
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Palka M.H., 2011, Proceeding of the 6th international workshop on Automation of software test, AST '11, P91, DOI 10.1145/1982595.1982615
   Paraskevopoulou Z, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P966, DOI 10.1145/3519939.3523707
   Pickering M., 2017, Art, Science, and Engineering of Programming, V1, P2
   Pike L, 2014, ACM SIGPLAN NOTICES, V49, P53, DOI [10.1145/2775050.2633365, 10.1145/2633357.2633365]
   Reynolds J. C., 1974, Programming Symposium, P408
   Runciman C, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P37
   Scibior A, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236778
   Soremekun E, 2022, IEEE T SOFTWARE ENG, V48, P1138, DOI 10.1109/TSE.2020.3013716
   Srivastava P, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P244, DOI 10.1145/3460319.3464814
   Stanley Jacob, 2023, Hedgehog will eat all your bugs
   Veggalam S, 2016, LECT NOTES COMPUT SC, V9878, P581, DOI 10.1007/978-3-319-45744-4_29
   Wang JJ, 2019, PROC INT CONF SOFTW, P724, DOI 10.1109/ICSE.2019.00081
   Xia LY, 2019, LECT NOTES COMPUT SC, V11423, P147, DOI 10.1007/978-3-030-17184-1_6
   Zalewski Michal, 2022, American Fuzzy Lop (AFL)
NR 43
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 200
DI 10.1145/3607842
PG 34
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900013
OA gold
DA 2024-07-18
ER

PT J
AU Barnaby, C
   Chen, QC
   Samanta, R
   Dillig, I
AF Barnaby, Celeste
   Chen, Qiaochu
   Samanta, Roopsha
   Dillig, Isil
TI ImageEye: Batch Image Processing using Program Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Neuro-symbolic Synthesis; Computer Vision
ID FRAMEWORK
AB This paper presents a new synthesis-based approach for batch image processing. Unlike existing tools that can only apply global edits to the entire image, our method can apply fine-grained edits to individual objects within the image. For example, our method can selectively blur or crop specific objects that have a certain property. To facilitate such fine-grained image editing tasks, we propose a neuro-symbolic domain-specific language (DSL) that combines pre-trained neural networks for image classification with other language constructs that enable symbolic reasoning. Our method can automatically learn programs in this DSL from user demonstrations by utilizing a novel synthesis algorithm. We have implemented the proposed technique in a tool called ImageEye and evaluated it on 50 image editing tasks. Our evaluation shows that ImageEye is able to automate 96% of these tasks.
C1 [Barnaby, Celeste; Chen, Qiaochu; Dillig, Isil] Univ Texas Austin, Austin, TX 78712 USA.
   [Samanta, Roopsha] Purdue Univ, W Lafayette, IN USA.
C3 University of Texas System; University of Texas Austin; Purdue
   University System; Purdue University
RP Barnaby, C (corresponding author), Univ Texas Austin, Austin, TX 78712 USA.
EM celestebarnaby@utexas.edu; qchen@cs.utexas.edu; roopsha@purdue.edu;
   isil@cs.utexas.edu
OI Dillig, Isil/0000-0001-8006-1230; Samanta, Roopsha/0009-0000-2456-217X;
   Barnaby, Celeste/0000-0001-7688-6133
FU National Science Foundation [CCF-1811865, CCF-1918889]; Google under the
   Google Faculty Research Grant; Facebook; Amazon; Intel; RelationalAI
FX We would like to thank Michelle Ding, fellow graduate students on GDC
   5S, and the anonymous reviewers for their help and feedback on this
   paper. This material is based upon work supported by the National
   Science Foundation under grant numbers CCF-1811865 and CCF-1918889,
   Google under the Google Faculty Research Grant, as well as Facebook,
   Amazon, Intel, and RelationalAI.
CR Albarghouthi Aws, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P934, DOI 10.1007/978-3-642-39799-8_67
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7810841
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Argall BD, 2009, ROBOT AUTON SYST, V57, P469, DOI 10.1016/j.robot.2008.10.024
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Barman S, 2016, ACM SIGPLAN NOTICES, V51, P748, DOI 10.1145/3022671.2984020
   Barnaby C, 2023, Arxiv, DOI [arXiv:2304.03253, 10.48550/arXiv.2304.03253, DOI 10.48550/ARXIV.2304.03253]
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Billard A., 2008, SPRINGER HDB ROBOTIC, P1371, DOI [10.1007/978-3-540-30301-5_60, DOI 10.1007/978-3-540-30301-5_60]
   Boyle JM, 1997, MODERN SOFTWARE TOOLS FOR SCIENTIFIC COMPUTING, P353
   Brock Andrew, 2017, INT C LEARNING REPRE
   Chasins S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133875
   Chen QC, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P487, DOI 10.1145/3385412.3385988
   Choi Y, 2018, PROC CVPR IEEE, P8789, DOI 10.1109/CVPR.2018.00916
   DERSHOWITZ N, 1993, J SYMB COMPUT, V15, P467, DOI 10.1016/S0747-7171(06)80002-7
   Dershowitz Nachum, 1990, Handbook of Theoretical Computer Science, Volume B: Formal Models and Semantics, P243, DOI 10.1016/b978-0-444-88074-1.50011-1
   Dillmann R., 1996, Artificial Intelligence and Symbolic Mathematical Computation. International Conference, AISMC-3. Proceedings, P87
   Dong R, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P152, DOI 10.1145/3519939.3523711
   Ellis Kevin, 2018, Advances in Neural Information Processing Systems, V31
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Holtz J, 2021, IEEE INT C INT ROBOT, P6256, DOI 10.1109/IROS51168.2021.9636540
   Huang J., 2020, P 37 INT C MACHINE L, P4495
   Johnson J, 2017, IEEE I CONF COMP VIS, P3008, DOI 10.1109/ICCV.2017.325
   Lample Guillaume, 2017, P ANN C NEUR INF PRO, P5967
   Lau T, 2003, MACH LEARN, V53, P111, DOI 10.1023/A:1025671410623
   Lau Tessa A., 1998, International Conference on Intelligent User Interfaces: Proceedings of the 4 th international conference on Intelligent user interfaces, P145
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Lee M, 2017, ACM SIGPLAN NOTICES, V52, P70, DOI [10.1145/3093335.2993244, 10.1145/2993236.2993244]
   Lin James., 2009, Proceedings of the 14th international conference on Intelligent user interfaces. IUI'09, P97, DOI 10.1145/1502650.1502667
   Lubin J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408991
   Mao J., 2019, INT C LEARNING REPRE
   Nandi C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P31, DOI 10.1145/3385412.3386012
   Nazeri K, 2019, IEEE INT CONF COMP V, P3265, DOI 10.1109/ICCVW.2019.00408
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Reddy U. S., 1989, Rewriting Techniques and Applications. 3rd International Conference, RTA-89. Proceedings, P388
   Reed Scott E., 2016, 4 INT C LEARNING REP
   Smith C, 2019, LECT NOTES COMPUT SC, V11388, P24, DOI 10.1007/978-3-030-11245-5_2
   Solarlezama Armando, 2008, PROGRAM SYNTHESIS SK
   Tian Yonglong, 2019, INT C LEARNING REPRE
   Torlak E, 2013, P 2013 ACM INT S NEW, P135, DOI DOI 10.1145/2509578.2509586
   Visser Eelco, 1998, ACM INT C FUNCT PROG, DOI DOI 10.1145/289423.289425
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang Y, 2019, PROC CVPR IEEE, P1399, DOI 10.1109/CVPR.2019.00149
   Xiong W, 2019, PROC CVPR IEEE, P5833, DOI 10.1109/CVPR.2019.00599
   Yaghmazadeh N, 2018, PROC VLDB ENDOW, V11, P580, DOI 10.1145/3177732.3177735
   Ye X, 2021, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2021, P1691
   Young H, 2019, PR MACH LEARN RES, V97
   Yu JH, 2019, IEEE I CONF COMP VIS, P4470, DOI 10.1109/ICCV.2019.00457
   Zhao B, 2018, LECT NOTES COMPUT SC, V11218, P157, DOI 10.1007/978-3-030-01264-9_10
   Zhou XY, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P168, DOI 10.1145/3519939.3523712
   Zhou Y, 2018, ACM T GRAPHIC, V37, DOI 10.1145/3197517.3201285
NR 55
TC 0
Z9 0
U1 1
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 134
DI 10.1145/3591248
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900030
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Huang, YL
   Yallop, J
AF Huang, Yulong
   Yallop, Jeremy
TI Defunctionalization with Dependent Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compilation; type preservation; type systems; dependent types
ID CLOSURE CONVERSION; CALCULUS
AB The defunctionalization translation that eliminates higher-order functions from programs forms a key part of many compilers. However, defunctionalization for dependently-typed languages has not been formally studied.
   We present the first formally-specified defunctionalization translation for a dependently-typed language and establish key metatheoretical properties such as soundness and type preservation. The translation is suitable for incorporation into type-preserving compilers for dependently-typed languages.
C1 [Huang, Yulong; Yallop, Jeremy] Univ Cambridge, Cambridge, England.
C3 University of Cambridge
RP Huang, YL (corresponding author), Univ Cambridge, Cambridge, England.
EM yh419@cam.ac.uk; jeremy.yallop@cl.cam.ac.uk
RI Huang, Yulong/K-2458-2013
OI Huang, Yulong/0009-0001-4288-5690
CR Abadi M., 1991, Journal of Functional Programming, V1, P375, DOI 10.1017/S0956796800000186
   Ahrens B, 2018, LOG METH COMPUT SCI, V14, DOI 10.23638/LMCS-14(3:18)2018
   Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7709681
   [Anonymous], 1992, Compiling with Continuations
   Banerjee Anindya, 2001, Lecture Notes in Computer Science, V2215, P420, DOI [DOI 10.1007/3-540-45500-0_21, 10.1007/3-540-45500-0_21]
   Barthe G, 2002, ACM SIGPLAN NOTICES, V37, P131, DOI 10.1145/509799.503043
   Barthe G., 1999, Higher-Order and Symbolic Computation, V12, P125, DOI 10.1023/A:1010000206149
   Bell JM, 1997, ACM SIGPLAN NOTICES, V32, P25, DOI 10.1145/258949.258953
   Berghofer Stefan, 2009, P LECT NOTES COMPUTE, V5674, P73, DOI [10.1007/978-3-642-03359-9_6, DOI 10.1007/978-3-642-03359-9_6]
   Boulier S, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P182, DOI 10.1145/3018610.3018620
   Bove A, 2009, LECT NOTES COMPUT SC, V5674, P73, DOI 10.1007/978-3-642-03359-9_6
   Bowman WJ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158110
   Bowman WJ, 2018, ACM SIGPLAN NOTICES, V53, P797, DOI [10.1145/3192366.3192372, 10.1145/3296979.3192372]
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Brassel Bernd, 2011, THESIS
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Cejtin H, 2000, LECT NOTES COMPUT SC, V1782, P56
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Danvy O, 2009, SCI COMPUT PROGRAM, V74, P534, DOI 10.1016/j.scico.2007.10.007
   Danvy Olivier, 2001, Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming. PPDP'01, P162, DOI DOI 10.1145/773184.773202
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   Guillemette LJ, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P75
   Huang YL, 2023, Arxiv, DOI arXiv:2304.04574
   Koronkevich P, 2022, J FUNCT PROGRAM, V32, DOI 10.1017/S0956796822000090
   Kovács A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408983
   Lasse R, 2000, BRICS REPORT SERIES, V7, P47
   Leshchinskiy R, 2006, LECT NOTES COMPUT SC, V3992, P920, DOI 10.1007/11758525_122
   Mates P, 2019, PROCEEDINGS OF THE 21ST INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2019), DOI 10.1145/3354166.3354181
   Mauny Michel., 1986, LFP 86, P266, DOI [10.1145/319838.319869, DOI 10.1145/319838.319869]
   Minamide Y., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P271, DOI 10.1145/237721.237791
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   Paraskevopoulou Z, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341687
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Pettyjohn G, 2005, ACM SIGPLAN NOTICES, V40, P216, DOI 10.1145/1090189.1086393
   Podlovics PD, 2022, ACTA CYBERN, V25, P847, DOI 10.14232/actacyb.282969
   Pottier F, 2004, ACM SIGPLAN NOTICES, V39, P89, DOI 10.1145/982962.964009
   Pottier F., 2006, Higher-Order and Symbolic Computation, V19, P125, DOI 10.1007/s10990-006-8611-7
   Reynolds John C., 1972, P ACM ANN C ACM 72 N, V2, P717, DOI [10.1145/800194.805852, DOI 10.1145/800194.805852]
   Siek Jeremy, 2012, ESSENCE CLOSURE CONV
   Steele Guy L., 1978, Rabbit: A Compiler for Scheme
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Tarditi D, 1996, ACM SIGPLAN NOTICES, V31, P181, DOI 10.1145/249069.231414
   The Coq Development Team, 2022, COQ REF MAN
   Timany A, 2020, Arxiv, DOI arXiv:1710.03912
   Tolmach A., 1998, Journal of Functional Programming, V8, P367, DOI 10.1017/S0956796898003086
   Vouillon J, 2014, SOFTWARE PRACT EXPER, V44, P951, DOI 10.1002/spe.2187
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wang DC, 2001, ACM SIGPLAN NOTICES, V36, P166, DOI 10.1145/373243.360218
   Weeks Stephen, 2006, ML 06 P 2006 WORKSHO, P1
   Wei-Ngan Chin, 1996, LISP and Symbolic Computation, V9, P287, DOI 10.1007/BF01806315
   Weirich Stephanie., 2010, Generic and Indexed Programming - International Spring School, SSGIP 2010, Oxford, UK, March 22-26, 2010, Revised Lectures, volume 7470 of Lecture Notes in Computer Science, P217, DOI [10.1007/978-3-642-32202-0_5, DOI 10.1007/978-3-642-32202-0_5]
   Xi HW, 2001, ACM SIGPLAN NOTICES, V36, P169, DOI 10.1145/507669.507657
   Yallop J, 2014, LECT NOTES COMPUT SC, V8475, P119, DOI 10.1007/978-3-319-07151-0_8
   Zhaohui Luo, 1990, THESIS U EDINBURGH U
NR 57
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 127
DI 10.1145/3591241
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900023
OA gold, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Liu, ZY
   Stepanenko, S
   Pichon-Pharabod, J
   Timany, A
   Askarov, A
   Birkedal, L
AF Liu, Zongyuan
   Stepanenko, Sergei
   Pichon-Pharabod, Jean
   Timany, Amin
   Askarov, Aslan
   Birkedal, Lars
TI VMSL: A Separation Logic for Mechanised Robust Safety of Virtual
   Machines Communicating above FF-A
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE hypercall; FF-A; robust safety; separation logic; logical relation; Iris
ID SYSTEM
AB Thin hypervisors make it possible to isolate key security components like keychains, fingerprint readers, and digital wallets from the easily-compromised operating system. To work together, virtual machines running on top of the hypervisor can make hypercalls to the hypervisor to share pages between each other in a controlled way. However, the design of such hypercall ABIs remains a delicate balancing task between conflicting needs for expressivity, performance, and security. In particular, it raises the question of what makes the specification of a hypervisor, and of its hypercall ABIs, good enough for the virtual machines. In this paper, we validate the expressivity and security of the design of the hypercall ABIs of Arm's FF-A. We formalise a substantial fragment of FF-A as a machine with a simplified ISA in which hypercalls are steps of the machine. We then develop VMSL, a novel separation logic, which we prove sound with respect to the machine execution model, and use it to reason modularly about virtual machines which communicate through the hypercall ABIs, demonstrating the hypercall ABIs' expressivity. Moreover, we use the logic to prove robust safety of communicating virtual machines, that is, the guarantee that even if some of the virtual machines are compromised and execute unknown code, they cannot break the safety properties of other virtual machines running known code. This demonstrates the intended security guarantees of the hypercall ABIs. All the results in the paper have been formalised in Coq using the Iris framework.
C1 [Liu, Zongyuan; Stepanenko, Sergei; Pichon-Pharabod, Jean; Timany, Amin; Askarov, Aslan; Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
C3 Aarhus University
RP Liu, ZY (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM zy.liu@cs.au.dk; sergei.stepanenko@cs.au.dk; jean.pichon@cs.au.dk;
   timany@cs.au.dk; aslan@cs.au.dk; birkedal@cs.au.dk
RI Stepanenko, Sergei/JVP-3661-2024; LIU, ZONGYUAN/GTP-4199-2022
OI Stepanenko, Sergei/0000-0002-7322-5644; Timany,
   Amin/0000-0002-2237-851X; Birkedal, Lars/0000-0003-1320-0098; Liu,
   Zongyuan/0000-0001-9652-4869
FU Villum Investigator grant [25804]; Center for Basic Research in Program
   Verification (CPV), from the VILLUM Foundation; Google Android Security
   and PrIvacy REsearch (ASPIRE) Awards
FX We thank the anonymous reviewers for comments and suggestions. This work
   was supported in part by a Villum Investigator grant (no. 25804), Center
   for Basic Research in Program Verification (CPV), from the VILLUM
   Foundation, and in part by Google Android Security and PrIvacy REsearch
   (ASPIRE) Awards to Pharabod-Pichon and Birkedal. We would also like to
   thank Alix Trieu for earlier discussions.
CR Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7813157
   [Anonymous], 1979, The Cambridge CAP computer and its operating system
   Appel AW, 2017, PHILOS T R SOC A, V375, DOI 10.1098/rsta.2016.0331
   Appel AW, 2001, IEEE S LOG, P247, DOI 10.1109/LICS.2001.932501
   Arm, 2021, MOR PROJ
   Arm Ltd, 2022, ARM FIRMW FRAM ARM
   Armstrong A, 2021, LECT NOTES COMPUT SC, V12759, P303, DOI 10.1007/978-3-030-81685-8_14
   Bauereiss T, 2022, LECT NOTES COMPUT SC, V13240, P174, DOI 10.1007/978-3-030-99336-8_7
   Baumann C, 2019, J CRYPTOGR ENG, V9, P243, DOI 10.1007/s13389-019-00216-4
   Baumann C, 2016, 2016 EUROPEAN CONFERENCE ON NETWORKS AND COMMUNICATIONS (EUCNC), P210, DOI 10.1109/EuCNC.2016.7561034
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Cai HX, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P66, DOI 10.1145/1250734.1250743
   CARTER NP, 1994, SIGPLAN NOTICES, V29, P319, DOI 10.1145/195470.195579
   Chidambaram Vijay, 2018, TWITTER
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   Deacon Will, 2020, VIRTUALISATION MASSE
   Devriese D, 2016, 1ST IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY, P147, DOI 10.1109/EuroSP.2016.22
   Erbsen A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P604, DOI 10.1145/3453483.3454065
   Feng XY, 2005, ACM SIGPLAN NOTICES, V40, P254, DOI 10.1145/1090189.1086399
   Georges AL, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527318
   Georges AL, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434287
   Georges Aina Linn, 2022, CERISE PROGRAM VERIF
   Georges Aina Linn, 2021, JOURNEES FRANCOPHONE
   Google LLC, 2021, PKVM
   Hafnium development team, 2022, HAF SEC FOC TYP 1 HY
   Honda K, 2011, LECT NOTES COMPUT SC, V6536, P55, DOI 10.1007/978-3-642-19056-8_4
   Jensen JB, 2013, ACM SIGPLAN NOTICES, V48, P301, DOI 10.1145/2480359.2429105
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kennedy Andrew., 2013, P 15 S PRINCIPLES PR, P13, DOI DOI 10.1145/2505879.2505897
   Klein G, 2014, ACM T COMPUT SYST, V32, DOI 10.1145/2560537
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Leinenbach D, 2009, LECT NOTES COMPUT SC, V5850, P806, DOI 10.1007/978-3-642-05089-3_51
   Murray T, 2013, P IEEE S SECUR PRIV, P415, DOI 10.1109/SP.2013.35
   Myreen MO, 2007, LECT NOTES COMPUT SC, V4424, P568
   Ni ZZ, 2007, LECT NOTES COMPUT SC, V4732, P189
   Nienhuis K, 2020, P IEEE S SECUR PRIV, P1003, DOI 10.1109/SP40000.2020.00055
   Perret Quentin, 2020, PROTECTED KVM MEMORY
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sammler M, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P825, DOI 10.1145/3519939.3523434
   Sewell Thomas, 2011, Interactive Theorem Proving. Proceedings Second International Conference, ITP 2011, P325, DOI 10.1007/978-3-642-22863-6_24
   Li SW, 2021, PROCEEDINGS OF THE 30TH USENIX SECURITY SYMPOSIUM, P3953
   Shih-Wei Li, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P1782, DOI 10.1109/SP40001.2021.00049
   Simner B, 2022, LECT NOTES COMPUT SC, V13240, P143, DOI 10.1007/978-3-030-99336-8_6
   Skorstengaard L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290332
   Swasey D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133913
   Tao RZ, 2021, PROCEEDINGS OF THE 28TH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, SOSP 2021, P866, DOI 10.1145/3477132.3483560
   Watson R. N. M., 2019, Capability Hardware Enhanced RISC In- structions: CHERI Instruction-Set Architecture (Version 7). Technical Report UCAM-CL-TR-927
   Yoshida N, 2020, LECT NOTES COMPUT SC, V11969, P73, DOI 10.1007/978-3-030-36987-3_5
   Yu DC, 2004, ACM SIGPLAN NOTICES, V39, P175, DOI 10.1145/1016848.1016875
NR 53
TC 1
Z9 1
U1 2
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 165
DI 10.1145/3591279
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900061
OA gold
DA 2024-07-18
ER

PT J
AU Pick, L
   Desai, A
   Gupta, A
AF Pick, Lauren
   Desai, Ankush
   Gupta, Aarti
TI PSYM: Efficient Symbolic Exploration of Distributed Systems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE distributed systems; systematic exploration; binary decision diagrams
ID PARTIAL-ORDER REDUCTION; MODEL-CHECKING; VERIFICATION; PROGRAMS
AB Verification of distributed systems using systematic exploration is daunting because of the many possible interleavings of messages and failures. When faced with this scalability challenge, existing approaches have traditionally mitigated state space explosion by avoiding exploration of redundant states (e.g., via state hashing) and redundant interleavings of transitions (e.g., via partial-order reductions). In this paper, we present an efficient symbolic exploration method that not only avoids redundancies in states and interleavings, but additionally avoids redundant computations that are performed during updates to states on transitions. Our symbolic explorer leverages a novel, fine-grained, canonical representation of distributed system configurations (states) to identify opportunities for avoiding such redundancies on-the-fly. The explorer also includes an interface that is compatible with abstractions for state-space reduction and with partial-order and other reductions for avoiding redundant interleavings. We implement our approach in the tool Psym and empirically demonstrate that it outperforms a state-of-the-art exploration tool, can successfully verify many common distributed protocols, and can scale to multiple real-world industrial case studies across Amazon.
C1 [Pick, Lauren] Univ Calif Berkeley, Berkeley, CA 94720 USA.
   [Pick, Lauren] Univ Wisconsin Madison, Madison, WI 53706 USA.
   [Desai, Ankush] Amazon Web Serv, Seattle, WA USA.
   [Gupta, Aarti] Princeton Univ, Princeton, NJ USA.
C3 University of California System; University of California Berkeley;
   University of Wisconsin System; University of Wisconsin Madison;
   Amazon.com; Princeton University
RP Pick, L (corresponding author), Univ Calif Berkeley, Berkeley, CA 94720 USA.; Pick, L (corresponding author), Univ Wisconsin Madison, Madison, WI 53706 USA.
EM pick@berkeley.edu; ankushpd@amazon.com; aartig@cs.princeton.edu
OI Gupta, Aarti/0000-0001-6676-9400
FU National Science Foundation [2127309, NSF-1837030]; Amazon research
   award
FX We would like to thank Aman Goel, Cambridge Yang, William Brandon, and
   Eric Ge who contributed to PSYM as well as our anonymous reviewers for
   their valuable suggestions. This work was supported in part by the
   National Science Foundation under Grant # 2127309 to the Computing
   Research Association for the CIFellows project, NSF-1837030, and an
   Amazon research award.
CR Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Agha G. A., 1997, Journal of Functional Programming, V7, P1, DOI 10.1017/S095679689700261X
   Anand S, 2008, LECT NOTES COMPUT SC, V4963, P367, DOI 10.1007/978-3-540-78800-3_28
   Andrews T, 2004, LECT NOTES COMPUT SC, V3114, P484
   Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7814715
   [Anonymous], 2008, P OSDI
   Aronis S, 2018, LECT NOTES COMPUT SC, V10806, P229, DOI 10.1007/978-3-319-89963-3_14
   Barrett C, 2009, FRONT ARTIF INTEL AP, V185, P825, DOI 10.3233/978-1-58603-929-5-825
   Ben-Or M., 1983, P 2 ANN ACM S PRINC, P27, DOI DOI 10.1145/800221.806707
   Beyer D, 2021, LECT NOTES COMPUT SC, V12971, P144, DOI 10.1007/978-3-030-88885-5_10
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   Chaki S, 2018, HDB MODEL CHECKING, P219, DOI [10.1007/978-3-319-10575-8_8, DOI 10.1007/978-3-319-10575-8]
   Chan Benjamin Y., 2020, STREAMLET TXB STREAM, P1, DOI [10.1145/3419614.3423256, DOI 10.1145/3419614.3423256]
   CHANG E, 1979, COMMUN ACM, V22, P281, DOI 10.1145/359104.359108
   Clarke Edmund M., 2001, Model Checking
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2013, LECT NOTES COMPUT SC, V7737, P128
   Deligiannis Pantazis, 2015, ACM SIGPLAN Notices, V50, P154, DOI 10.1145/2737924.2737996
   Demirbas Murat, 2019, BEN OR DEC CONS ALG
   Demirbas Murat, 2017, TLA PLUSC MOD 2 PHAS
   Demirbas Murat, 2017, MUR DEM
   Desai A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276529
   Desai A, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P73, DOI 10.1145/2786805.2786861
   Desai A, 2014, ACM SIGPLAN NOTICES, V49, P709, DOI [10.1145/2660193.2660211, 10.1145/2714064.2660211]
   Desai A, 2013, ACM SIGPLAN NOTICES, V48, P321, DOI 10.1145/2499370.2462184
   Desai Ankush, 2022, FORMAL MODELING ANAL
   Desai Ankush, 2021, AMAZON S3 STRONG CON
   Fähndrich M, 2011, LECT NOTES COMPUT SC, V6528, P10
   Farzan A., 2013, Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, P37
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P191, DOI 10.1145/565816.503291
   Gacek A, 2018, LECT NOTES COMPUT SC, V10982, P20, DOI 10.1007/978-3-319-96142-2_3
   github, 2017, MUR DEM
   Godefroid P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P174, DOI 10.1145/263699.263717
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   GODEFROID P, 1991, LECT NOTES COMPUT SC, V531, P176, DOI 10.1007/BFb0023731
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Gray J, 2006, ACM T DATABASE SYST, V31, P133, DOI 10.1145/1132863.1132867
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Henzinger TA, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/565816.503279
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Howard Heidi, 2022, TLA SPECIFICATION FL
   Howard Heidi, 2016, 20 INT C PRINCIPLES, V25, P1
   Iosif R, 2002, LECT NOTES COMPUT SC, V2318, P22
   Jepsen, 2021, JEPS TOOL
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kahlon V, 2009, LECT NOTES COMPUT SC, V5643, P398, DOI 10.1007/978-3-642-02658-4_31
   KILLIAN C., 2007, NSDI
   Konnov I, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360549
   Kulkarni SS, 2014, LECT NOTES COMPUT SC, V8878, P17, DOI 10.1007/978-3-319-14472-6_2
   Kuznetsov Volodymyr, 2012, EFFICIENT STATE MERG, P193, DOI [10.1145/2254064, DOI 10.1145/2254064]
   La Torre S, 2009, LECT NOTES COMPUT SC, V5643, P477, DOI 10.1007/978-3-642-02658-4_36
   Lal A, 2008, LECT NOTES COMPUT SC, V5123, P37
   Lamport L., 2001, ACM SIGACT NEWS, V32
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Leesatapornwongsa Tanakorn, 2014, P 11 S OP SYST DES I
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Liu PZ, 2019, LECT NOTES COMPUT SC, V11562, P386, DOI 10.1007/978-3-030-25543-5_22
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Ma HJ, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P370, DOI 10.1145/3341301.3359651
   Majumdar Rupak., 2017, Proc. ACM Program. Lang, V2, p46:1, DOI DOI 10.1145/3158134
   McMillan KL, 2006, LECT NOTES COMPUT SC, V4144, P123
   Microsoft Coyote, 2022, FEARL COD REL AS SOF
   Mukherjee S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428298
   Musuvathi M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P446, DOI 10.1145/1250734.1250785
   Newcombe C, 2014, LECT NOTES COMPUT SC, V8477, P25, DOI 10.1007/978-3-662-43652-3_3
   Nguyen HTT, 2018, LECT NOTES COMPUT SC, V10982, P354, DOI 10.1007/978-3-319-96142-2_22
   Ozkan BK, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276530
   P GitHub, 2021, P CAS STUD
   P-GitHub, 2023, P PROGR LANG
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Peled Doron, 2018, HDB MODEL CHECKING, P173, DOI [10.1007/978-3-319-10575-8_6, DOI 10.1007/978-3-319-10575-8_6]
   Pick Lauren, 2023, PSYM EFFICIENT SYMBO
   Pnuelil A., 2001, Tools and Algorithms for the Construction and Analysis of Systems. 7th International Conference, TACAS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2031), P82
   Schemmel D, 2020, LECT NOTES COMPUT SC, V12224, P376, DOI 10.1007/978-3-030-53288-8_18
   Sen K, 2006, LECT NOTES COMPUT SC, V3922, P339
   Sen K, 2006, LECT NOTES COMPUT SC, V4144, P419
   Sen K, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P842, DOI 10.1145/2786805.2786830
   Sergey I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158116
   Seshia SA, 2018, PROCEEDINGS OF THE 2018 16TH ACM/IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR SYSTEM DESIGN (MEMOCODE), P1
   Tasharofi Samira, 2012, Formal Techniques for Distributed Systems. Joint 14th IFIP WG 6.1 International Conference, FMOODS 2012 and 32nd IFIP WG 6.1 International Conference, FORTE 2012, P219, DOI 10.1007/978-3-642-30793-5_14
   TLA+, 2021, CHANG ROB ALG LEAD E
   TLA+, 2023, TLA EX
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Visser W, 2005, LECT NOTES COMPUT SC, V3639, P27
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Yao JA, 2021, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '21), P405
   Yu Y, 1999, LECT NOTES COMPUT SC, V1703, P54
NR 91
TC 0
Z9 0
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 133
DI 10.1145/3591247
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900029
OA gold
DA 2024-07-18
ER

PT J
AU Krogmeier, P
   Madhusudan, P
AF Krogmeier, Paul
   Madhusudan, P.
TI Languages with Decidable Learning: A Meta-theorem
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE exact learning; learning symbolic languages; tree automata; version
   space; algebra; program synthesis; interpretable learning
ID CONTEXT-FREE GRAMMARS
AB We study expression learning problems with syntactic restrictions and introduce the class of similar to nite-aspect checkable languages to characterize symbolic languages that admit decidable learning. The semantics of such languages can be de similar to ned using a bounded amount of auxiliary information that is independent of expression size but depends on a similar to xed structure over which evaluation occurs. We introduce a generic programming language for writing programs that evaluate expression syntax trees, and we give a meta-theorem that connects such programs for similar to nite-aspect checkable languages to similar to nite tree automata, which allows us to derive new decidable learning results and decision procedures for several expression learning problems by writing programs in the programming language.
C1 [Krogmeier, Paul; Madhusudan, P.] Univ Illinois, Dept Comp Sci, 1304 W Springfield Ave, Urbana, IL 61801 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign
RP Krogmeier, P (corresponding author), Univ Illinois, Dept Comp Sci, 1304 W Springfield Ave, Urbana, IL 61801 USA.
EM paulmk2@illinois.edu; madhu@illinois.edu
OI Parthasarathy, Madhusudan/0000-0002-9782-721X
CR Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 1970, Journal of Computer and System Sciences, DOI DOI 10.1016/S0022-0000(70)80041-1
   [Anonymous], 1961, Transactions of the American Mathematical Society, DOI DOI 10.1090/S0002-9947-1961-0139530-9
   [Anonymous], 1960, Z. Math. Logik Grundlag. Math., DOI [DOI 10.1002/MALQ.19600060105, https://doi.org/10.1002/malq.19600060105]
   [Anonymous], 1972, Automata on infinite objects and Church's problem
   [Anonymous], 1992, CMUCS92131
   Astorga A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485481
   Astorga A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P775, DOI 10.1145/3314221.3314641
   Blackburn P., 2001, Modal Logic. Cambridge Tracts in Theoretical Computer Science
   Bodirsky Manuel, 2021, Lecture Notes in Logic, V52
   Buchi J. R, 1990, On a Decision Method in Restricted Second Order Arithmetic, P425, DOI [DOI 10.1007/978-1-4613-8928-6_23, 10.1007/978-1-4613-8928-6_23, 10.1007%2F978-1-4613-8928-6_23]
   BUCHI JR, 1969, T AM MATH SOC, V138, P295, DOI 10.2307/1994916
   Cachat T, 2002, LECT NOTES COMPUT SC, V2500, P303
   Cambronero Jose, 2023, Principles of Programming Languages
   Church A., 1963, Application of recursive arithmetic to the problem of circuit synthesis
   Comon H., 2007, TREE AUTOMATA TECHNI
   COURCELLE B, 1990, INFORM COMPUT, V85, P12, DOI 10.1016/0890-5401(90)90043-H
   Courcelle Professor Bruno, 2012, GRAPH STRUCTURE MONA, V1st
   Esparza J., 2021, Handbook of Automata Theory, P1415, DOI [10.4171/AUTOMATA-2/16, DOI 10.4171/AUTOMATA-2/16]
   Evans R, 2018, J ARTIF INTELL RES, V61, P1
   Farzan A, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P244, DOI 10.1145/3519939.3523726
   Fernau H, 2009, INFORM COMPUT, V207, P521, DOI 10.1016/j.ic.2008.12.008
   Flum J., 2006, TEXT THEORET COMP S
   Funk M, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P1682
   Garg P, 2015, FORM METHOD SYST DES, V47, P120, DOI 10.1007/s10703-015-0231-6
   Garg P, 2014, LECT NOTES COMPUT SC, V8559, P69, DOI 10.1007/978-3-319-08867-9_5
   Gradel E., 2002, Automata, logics, and infinite games: a guide to current research
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Habel Annegret, 1992, GRAPH THEORETIC ASPE, P117, DOI [10.1007/BFb0013882, DOI 10.1007/BFB0013882]
   Hance T, 2021, PROCEEDINGS OF THE 18TH USENIX SYMPOSIUM ON NETWORKED SYSTEM DESIGN AND IMPLEMENTATION, P115
   Handa S, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P87, DOI 10.1145/3368089.3409732
   Hodges Wilfrid, 1993, COUNTABLE CASE, P323, DOI [10.1017/CBO9780511551574.009, DOI 10.1017/CBO9780511551574.009]
   Hu QHP, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1128, DOI 10.1145/3385412.3385979
   Ivanov R, 2021, ACM T EMBED COMPUT S, V20, DOI 10.1145/3477023
   Kearns M. J., 1994, An Introduction to Computational Learning Theory
   Koenig JR, 2022, LECT NOTES COMPUT SC, V13243, P338, DOI 10.1007/978-3-030-99524-9_18
   Koenig JR, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P703, DOI 10.1145/3385412.3386018
   Koppel J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547622
   Koppel James, 2021, ARXIV, DOI [10.48550/ARXIV.2107.12568, DOI 10.48550/ARXIV.2107.12568]
   Krogmeier P, 2023, Arxiv, DOI [arXiv:2302.05741, 10.48550/ARXIV.2302.05741, DOI 10.48550/ARXIV.2302.05741]
   Krogmeier P, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498671
   Krogmeier P, 2020, LECT NOTES COMPUT SC, V12225, P634, DOI 10.1007/978-3-030-53291-8_32
   Kupferman O., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P92
   Kupferman O, 2010, LECT NOTES COMPUT SC, V6200, P202, DOI 10.1007/978-3-642-13754-9_11
   Langley P, 2000, LECT NOTES ARTIF INT, V1810, P220
   Li Y., 2008, EMNLP
   Madhusudan Parthasarathy., 2011, CSL, P428, DOI 10.4230/LIPIcs.CSL
   Miltner A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498682
   Miltner A, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1, DOI 10.1145/3385412.3385967
   Mitchell T. M., 1997, MACH LEARN
   MITCHELL TM, 1982, ARTIF INTELL, V18, P203, DOI 10.1016/0004-3702(82)90040-6
   MONCKE U, 1991, LECT NOTES COMPUT SC, V545, P151
   Muggleton SH, 2014, MACH LEARN, V94, P25, DOI 10.1007/s10994-013-5358-3
   Neider D, 2020, J AUTOM REASONING, V64, P1523, DOI 10.1007/s10817-020-09570-z
   Neider D, 2018, PROCEEDINGS OF THE 2018 18TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P148
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   PNUELI A, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P179, DOI 10.1145/75277.75293
   PNUELI A, 1990, ANN IEEE SYMP FOUND, P746
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   RABIN MO, 1969, T AM MATH SOC, V141, P1, DOI 10.2307/1995086
   Sakakibara Y, 2005, PATTERN RECOGN, V38, P1372, DOI 10.1016/j.patcog.2004.03.021
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Thatcher J. W., 1968, Mathematical Systems Theory, V2, P57, DOI 10.1007/BF01691346
   Trakhtenbrot Boris A., 1961, DOKL AKAD NAUK SSSR+, V140, P122
   van Bergerem S, 2022, PROCEEDINGS OF THE 41ST ACM SIGMOD-SIGACT-SIGAI SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS (PODS '22), P337, DOI 10.1145/3517804.3524151
   van Berkel SL, 2019, INT CONF INFRA MILLI, DOI 10.1109/irmmw-thz.2019.8874183
   Vanlehn K., 1987, Machine Learning, V2, P39, DOI 10.1007/BF00058754
   Vardi MY, 1998, LECT NOTES COMPUT SC, V1443, P628, DOI 10.1007/BFb0055090
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
   Wang XY, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133886
   Wang YP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276525
   Yao JA, 2021, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '21), P405
   Zhu H, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P707, DOI 10.1145/3192366.3192416
NR 75
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586032
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600007
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Fu, P
   Kishida, K
   Ross, NJ
   Selinger, P
AF Fu, Peng
   Kishida, Kohei
   Ross, Neil J.
   Selinger, Peter
TI Proto-Quipper with Dynamic Lifting
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Quipper; Proto-Quipper; quantum programming languages; dynamic; lifting;
   categorical semantics
AB Quipper is a functional programming language for quantum computing. Proto-Quipper is a family of languages aiming to provide a formal foundation for Quipper. In this paper, we extend Proto-Quipper-M with a construct called dynamic lifting, which is present in Quipper. By virtue of being a circuit description language, ProtoQuipper has two separate runtimes: circuit generation time and circuit execution time. Values that are known at circuit generation time are called parameters, and values that are known at circuit execution time are called states. Dynamic lifting is an operation that enables a state, such as the result of a measurement, to be lifted to a parameter, where it can influence the generation of the next portion of the circuit. As a result, dynamic lifting enables Proto-Quipper programs to interleave classical and quantum computation. We describe the syntax of a language we call Proto-Quipper-Dyn. Its type system uses a system of modalities to keep track of the use of dynamic lifting. We also provide an operational semantics, as well as an abstract categorical semantics for dynamic lifting based on enriched category theory. We prove that both the type system and the operational semantics are sound with respect to our categorical semantics. Finally, we give some examples of Proto-Quipper-Dyn programs that make essential use of dynamic lifting.
C1 [Fu, Peng; Ross, Neil J.; Selinger, Peter] Dalhousie Univ, Halifax, NS, Canada.
   [Kishida, Kohei] Univ Illinois, Urbana, IL 61801 USA.
C3 Dalhousie University; University of Illinois System; University of
   Illinois Urbana-Champaign
RP Fu, P (corresponding author), Dalhousie Univ, Halifax, NS, Canada.
EM frank-fu@dal.ca; kkishida@illinois.edu; neil.jr.ross@dal.ca;
   selinger@mathstat.dal.ca
OI Fu, Peng/0000-0002-3123-0867; Selinger, Peter/0000-0003-3161-856X; Ross,
   Neil/0000-0003-0941-4333
FU Natural Sciences and Engineering Research Council of Canada (NSERC); Air
   Force Office of Scientific Research [FA9550-21-1-0041]
FX We thank the referees for their thoughtful comments. This work was
   supported by the Natural Sciences and Engineering Research Council of
   Canada (NSERC) and by the Air Force Office of Scientific Research under
   Award No. FA9550-21-1-0041.
CR [Anonymous], 2009, Semantic techniques in quantum computation, DOI DOI 10.1017/CBO9781139193313.005
   Benton PN, 1995, LECT NOTES COMPUT SC, V933, P121, DOI 10.1007/BFb0022251
   Bichsel B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P286, DOI 10.1145/3385412.3386007
   Borceux F., 1994, Handbook of Categorical Algebra
   Bravyi S, 2005, PHYS REV A, V71, DOI 10.1103/PhysRevA.71.022316
   Chuang I., 2000, Quantum Information and Quantum Computation
   Colledan A, 2022, Arxiv, DOI [arXiv:2202.07636, 10.48550/ARXIV.2202.07636, DOI 10.48550/ARXIV.2202.07636]
   Fu P., 2022, arXiv, DOI [DOI 10.48550/ARXIV.2204.13041, 10.48550/ARXIV.2204.13041]
   Fu P, 2023, Arxiv, DOI arXiv:2204.13039
   Fu P, 2020, IEEE S LOG, P440, DOI 10.1145/3373718.3394765
   Fu P, 2020, LECT NOTES COMPUT SC, V12227, P153, DOI 10.1007/978-3-030-52482-1_9
   Green Alexander S., 2013, Reversible Computation. 5th International Conference, RC 2013. Proceedings. LNCS 7936, P110, DOI 10.1007/978-3-642-38986-3_10
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Ross NJ, 2017, Arxiv, DOI arXiv:1510.02198
   KELLY GM, 1982, BASIC CONCEPTS ENRIC
   Lee D., 2021, LIPICS, V213, DOI DOI 10.4230/LIPICS.FSTTCS.2021.51
   Lindenhovius B, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P659, DOI 10.1145/3209108.3209196
   MetaOCaml, 2020, METAOCAML OCAML DIAL
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Omer B, 1998, THESIS TU VIENNA
   Paetznick A, 2014, QUANTUM INF COMPUT, V14, P1277
   Paykin J, 2017, ACM SIGPLAN NOTICES, V52, P846, DOI 10.1145/3093333.3009894
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Rennela M, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:30)2020
   Rios F, 2018, ELECTRON P THEOR COM, P164, DOI 10.4204/EPTCS.266.11
   Selinger P, 2004, MATH STRUCT COMP SCI, V14, P527, DOI 10.1017/S0960129504004256
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
NR 27
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571204
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500011
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Koutris, P
   Deep, S
AF Koutris, Paraschos
   Deep, Shaleen
TI The Fine-Grained Complexity of CFL Reachability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE ne-grained complexity; Dyck reachability; static pointer analysis;
   Datalog; sparse graphs
ID FLOW-ANALYSIS; DATALOG; BUGS
AB Many problems in static program analysis can be modeled as the context-free language (CFL) reachability problem on directed labeled graphs. The CFL reachability problem can be generally solved in time O (n(3)), where n is the number of vertices in the graph, with some specific cases that can be solved faster. In this work, we ask the following question: given a specific CFL, what is the exact exponent in the monomial of the running time? In other words, for which cases do we have linear, quadratic or cubic algorithms, and are there problems with intermediate runtimes? This question is inspired by recent efforts to classify classic problems in terms of their exact polynomial complexity, known as fine-grained complexity. Although recent efforts have shown some conditional lower bounds (mostly for the class of combinatorial algorithms), a general picture of the fine-grained complexity landscape for CFL reachability is missing. Our main contribution is lower bound results that pinpoint the exact running time of several classes of CFLs or specific CFLs under widely believed lower bound conjectures (e.g., Boolean Matrix Multiplication, : -Clique, APSP, 3SUM). We particularly focus on the family of Dyck-: languages (which are strings with well-matched parentheses), a fundamental class of CFL reachability problems. Remarkably, we are able to show a O(=2.5) lower bound for Dyck-2 reachability, which to the best of our knowledge is the first super-quadratic lower bound that applies to all algorithms, and shows that CFL reachability is strictly harder that Boolean Matrix Multiplication. We also present new lower bounds for the case of sparse input graphs where the number of edges < is the input parameter, a common setting in the database literature. For this setting, we show a cubic lower bound for Andersen's Pointer Analysis which significantly strengthens prior known results.
C1 [Koutris, Paraschos] Univ Wisconsin, Dept Comp Sci, Madison, WI 53706 USA.
   [Deep, Shaleen] Microsoft Gray Syst Lab, Madison, WI USA.
C3 University of Wisconsin System; University of Wisconsin Madison
RP Koutris, P (corresponding author), Univ Wisconsin, Dept Comp Sci, Madison, WI 53706 USA.
EM paris@cs.wisc.edu; shaleen.deep@microsoft.com
OI Deep, Shaleen/0000-0003-2342-4060
CR Abboud A, 2018, SIAM J COMPUT, V47, P2527, DOI 10.1137/16M1061771
   Abboud A, 2014, ANN IEEE SYMP FOUND, P434, DOI 10.1109/FOCS.2014.53
   Afrati F, 2003, THEOR COMPUT SCI, V308, P199, DOI 10.1016/S0304-3975(02)00730-2
   Afrati F., 1996, Perspectives of System Informatics. Second International Andrei Ershov Memorial Conference. Proceedings, P433
   Afrati Foto., 1997, Deductive Databases and Logic Programming (DDLP), P49
   Alon N, 1997, J COMPUT SYST SCI, V54, P255, DOI 10.1006/jcss.1997.1388
   Andersen L. O., 1994, Ph.D. thesis
   Bagan G., 2013, P 32 ACM SIGMOD SIGA, P261
   Barcelo P, 2013, P ACM S PRINC DAT SY, P175, DOI [10.1145/2463664.2465216, DOI 10.1145/2463664.2465216]
   Berkholz C, 2017, PODS'17: PROCEEDINGS OF THE 36TH ACM SIGMOD-SIGACT-SIGAI SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P303, DOI 10.1145/3034786.3034789
   Berkholz Christoph, 2018, ICDT, DOI [10.4230/LIPIcs.ICDT.2018.8, DOI 10.4230/LIPICS.ICDT.2018.8]
   Bessey A, 2010, COMMUN ACM, V53, P66, DOI 10.1145/1646353.1646374
   Carmeli N, 2021, ACM T DATABASE SYST, V46, DOI 10.1145/3450263
   Casel Katrin, 2021, 24 INT C DAT THEOR I, DOI [10.4230/LIPIcs.ICDT.2021.19, DOI 10.4230/LIPICS.ICDT.2021.19]
   Chatterjee K, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158118
   Chaudhuri S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P159, DOI 10.1145/1328438.1328460
   Chini P, 2020, J AUTOM REASONING, V64, P1419, DOI 10.1007/s10817-020-09572-x
   Chini P, 2018, LECT NOTES COMPUT SC, V10806, P20, DOI 10.1007/978-3-319-89963-3_2
   Chini Peter, 2022, THESIS
   Chini Peter, 2020, 40 IARCS ANN C FDN S, V42, P1, DOI [10.4230/LIPIcs.FSTTCS.2020.42, DOI 10.4230/LIPICS.FSTTCS.2020.42]
   Chini Peter, 2017, 25 ANN EUROPEAN S AL, DOI DOI 10.4230/LIPICS.ESA.2017.27
   Chistikov D, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498702
   Christodorescu M, 2003, P 12 C USENIX SEC S, V12, P12, DOI DOI 10.21236/ADA449067
   Dong Guozhu, 1992, THEORETICAL STUDIES, P181, DOI [10.1016/b978-0-12-708240-0.50012-5, DOI 10.1016/B978-0-12-708240-0.50012-5]
   Fischer M. J., 1971, Conference record 1971 12th annual symposium on switching and automata theory, P129
   GAJENTAAN A, 1995, COMP GEOM-THEOR APPL, V5, P165, DOI 10.1016/0925-7721(95)00022-2
   Golovnev A, 2020, ACM S THEORY COMPUT, P294, DOI 10.1145/3357713.3384342
   Greibach S., 1968, Mathematical Systems Theory, V2, P1, DOI 10.1007/BF01691341
   Greibach S. A., 1973, SIAM Journal on Computing, V2, P304, DOI 10.1137/0202025
   Hansen JC, 2021, INFORM PROCESS LETT, V171, DOI 10.1016/j.ipl.2021.106135
   Heintze N, 1997, IEEE S LOG, P342, DOI 10.1109/LICS.1997.614960
   Henzinger M, 2015, ACM S THEORY COMPUT, P21, DOI 10.1145/2746539.2746609
   Hirzel M, 2004, LECT NOTES COMPUT SC, V3086, P96
   Keppeler Jens, 2020, ANSWERING CONJUNCTIV, DOI [10.4230/LIPIcs.ICDT.2018.8, DOI 10.4230/LIPICS.ICDT.2018.8]
   Kjelstrom AH, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498673
   Kulkarni Rucha, 2021, 32 INT C CONCURRENCY, DOI [10.4230/LIPIcs.CONCUR.2021.16, DOI 10.4230/LIPICS.CONCUR.2021.16]
   LaVigne R, 2019, LECT NOTES COMPUT SC, V11694, P605, DOI 10.1007/978-3-030-26954-8_20
   Li YB, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434340
   Li YB, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P780, DOI 10.1145/3385412.3386021
   Lincoln A, 2018, SODA'18: PROCEEDINGS OF THE TWENTY-NINTH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P1236
   Lincoln Andrea, 2020, SCHLOSS DAGSTUHL LEI, V11, P1, DOI [10.4230/LIPIcs.ITCS.2020.11, DOI 10.4230/LIPICS.ITCS.2020.11]
   Livshits VB, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 14TH USENIX SECURITY SYMPOSIUM, P271
   Lyde S, 2016, ACM SIGPLAN NOTICES, V51, P54, DOI [10.1145/2816707.2816712, 10.1145/2936313.2816712]
   Martens Wim, 2018, 21 INT C DAT THEOR I, p19:1, DOI DOI 10.4230/LIPICS.ICDT.2018.19
   Mathiasen AA, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434315
   Mathur U, 2020, IEEE S LOG, P713, DOI 10.1145/3373718.3394783
   MATOUSEK J, 1991, INFORM PROCESS LETT, V38, P277, DOI 10.1016/0020-0190(91)90071-O
   Melski D, 2000, THEOR COMPUT SCI, V248, P29, DOI 10.1016/S0304-3975(00)00049-9
   Olivo O, 2015, ACM SIGPLAN NOTICES, V50, P369, DOI [10.1145/2813885.2737966, 10.1145/273924.2737966]
   Pearce DJ, 2004, SOFTWARE QUAL J, V12, P311, DOI 10.1023/B:SQJO.0000039791.93071.a2
   Rehof J, 2001, ACM SIGPLAN NOTICES, V36, P54, DOI 10.1145/373243.360208
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T., 1995, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics- Based Program Manipulation. PEPM'95, P1, DOI 10.1145/215465.215466
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Schepper Philipp Johann, 2018, COMPLEXITY FORMAL LA
   Shang Lei, 2012, P 10 INT S CODE GENE, P264
   Smaragdakis Yannis, 2010, Datalog Reloaded. First International Workshop, Datalog 2010. Revised Selected Papers, P245, DOI 10.1007/978-3-642-24206-9_14
   Smaragdakis Y., 2015, FDN TRENDS PROGRAM L, V2, P1, DOI DOI 10.1561/2500000014
   STRASSEN V, 1969, NUMER MATH, V13, P354, DOI 10.1007/BF02165411
   ULLMAN JD, 1988, ALGORITHMICA, V3, P5, DOI 10.1007/BF01762108
   Whaley J, 2005, LECT NOTES COMPUT SC, V3780, P97
   Whaley J, 2002, LECT NOTES COMPUT SC, V2477, P180
   Williams V.V., 2018, WORLD SCI, P3447, DOI [/10.1142/9789813272880_0188, DOI 10.1142/9789813272880_0188]
   Williams VV, 2020, ANN IEEE SYMP FOUND, P786, DOI 10.1109/FOCS46700.2020.00078
   Williams VV, 2018, J ACM, V65, DOI [10.1145/318693, 10.1145/3186893]
   YANNAKAKIS M, 1990, PROCEEDINGS OF THE NINTH ACM SIGACT-SIGMOD-SIGART SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P230, DOI 10.1145/298514.298576
   Zhang QR, 2021, Arxiv, DOI arXiv:2007.05569
   Zheng X, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P197, DOI 10.1145/1328438.1328464
NR 68
TC 1
Z9 1
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571252
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500059
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Lew, AK
   Huot, M
   Staton, S
   Mansinghka, VK
AF Lew, Alexander K.
   Huot, Mathieu
   Staton, Sam
   Mansinghka, Vikash K.
TI ADEV: Sound Automatic Differentiation of Expected Values of
   Probabilistic Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programming; automatic differentiation; denotational
   semantics; logical relations; functional programming; correctness;
   machine learning theory
AB Optimizing the expected values of probabilistic processes is a central problem in computer science and its applications, arising in fields ranging from artificial intelligence to operations research to statistical computing. Unfortunately, automatic differentiation techniques developed for deterministic programs do not in general compute the correct gradients needed for widely used solutions based on gradient-based optimization. In this paper, we present ADEV, an extension to forward-mode AD that correctly differentiates the expectations of probabilistic processes represented as programs that make random choices. Our algorithm is a source-to-source program transformation on an expressive, higher-order language for probabilistic computation, with both discrete and continuous probability distributions. The result of our transformation is a new probabilistic program, whose expected return value is the derivative of the original program's expectation. This output program can be run to generate unbiased Monte Carlo estimates of the desired gradient, which can then be used within the inner loop of stochastic gradient descent. We prove ADEV correct using logical relations over the denotations of the source and target probabilistic programs. Because it modularly extends forward-mode AD, our algorithm lends itself to a concise implementation strategy, which we exploit to develop a prototype in just a few dozen lines of Haskell (https://github.com/probcomp/adev).
C1 [Lew, Alexander K.; Mansinghka, Vikash K.] MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
   [Huot, Mathieu; Staton, Sam] Univ Oxford, Oxford, England.
C3 Massachusetts Institute of Technology (MIT); University of Oxford
RP Lew, AK (corresponding author), MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
EM alexlew@mit.edu; mathieu.huot@cs.ox.ac.uk; sam.staton@cs.ox.ac.uk;
   vkm@mit.edu
OI Huot, Mathieu/0000-0002-5294-9088
FU NSF Graduate Research Fellowship [1745302]; Royal Society University
   Research Fellowship; ERC BLAST grant; Air Force Office of Scientific
   Research [FA9550-21-1-0038]; DARPA Machine Common Sense; SAIL-ON
   projects
FX We have benefited from discussing this work with many friends and
   colleagues, including Martin Rinard, Tan Zhi-Xuan, Wonyeol Lee, Faustyna
   Krawiec, Gaurav Arya, Ohad Kammar, Feras Saad, Cathy Wong, McCoy Becker,
   Cameron Freer, Michele Pagani, Jesse Michel, Ben Sherman, Kevin Mu,
   Jesse Sigal, Paolo Perrone, Sean Moss, Younesse Kaddar and the Oxford
   group. We are also grateful to anonymous referees for very helpful
   feedback. This material is based on work supported by the NSF Graduate
   Research Fellowship under Grant No. 1745302. Our work is also supported
   by a Royal Society University Research Fellowship, the ERC BLAST grant,
   the Air Force Office of Scientific Research (Award No.
   FA9550-21-1-0038), and the DARPA Machine Common Sense and SAIL-ON
   projects.
CR Abadi M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371106
   Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   [Anonymous], 2011, Neural Information Processing Systems
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   Arya G, 2023, Arxiv, DOI [arXiv:2210.08572, 10.48550/ARXIV.2210.08572, DOI 10.48550/ARXIV.2210.08572, 10.48550/arXiv.2210.08572]
   Bangaru SP, 2021, ACM T GRAPHIC, V40, DOI 10.1145/3450626.3459775
   Barthe G, 2020, LECT NOTES COMPUT SC, V12075, P56, DOI 10.1007/978-3-030-44914-8_3
   Bingham E, 2019, J MACH LEARN RES, V20
   Brunel A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371132
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   Cusumano-Towner M, 2020, Arxiv, DOI arXiv:2007.09871
   Cusumano-Towner MF, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P221, DOI 10.1145/3314221.3314642
   DIRECTOR SW, 1969, IEEE T CIRCUITS SYST, VCT16, P330, DOI 10.1109/TCT.1969.1082967
   Ehrhard T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158147
   Foerster J, 2018, PR MACH LEARN RES, V80
   Griewank A, 2008, OTHER TITL APPL MATH, V105, P1, DOI 10.1137/1.9780898717761
   Heidergott Bernd, 2000, MEASURE VALUED DIFFE
   Heunen Chris, 2017, 2017 32nd Annual ACM/IEEE Symposium on Logic in Computer Science (LICS), DOI 10.1109/LICS.2017.8005137
   Huot M, 2020, LECT NOTES COMPUT SC, V12077, P319, DOI 10.1007/978-3-030-45231-5_17
   Katsumata S, 2013, INFORM COMPUT, V222, P228, DOI 10.1016/j.ic.2012.10.014
   Kingma D. P., 2014, arXiv
   Kleinman NL, 1999, MANAGE SCI, V45, P1570, DOI 10.1287/mnsc.45.11.1570
   Kock A, 2011, Arxiv, DOI arXiv:1108.5952
   Krawiec F, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498710
   Lee WY, 2022, Arxiv, DOI [arXiv:2208.10530, 10.48550/arXiv.2208.10530, DOI 10.48550/ARXIV.2208.10530]
   Lee W, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371084
   Lee W, 2018, ADV NEUR IN, V31
   Lee Wonyeol, 2020, ADV NEURAL INFORM PR
   Lew AK, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371087
   Lew Alexander K., 2021, CORR
   Mak C, 2021, LECT NOTES COMPUT SC, V12648, P432, DOI 10.1007/978-3-030-72019-3_16
   Mansinghka V, 2014, Arxiv, DOI arXiv:1404.0099
   Mansinghka VK, 2018, ACM SIGPLAN NOTICES, V53, P603, DOI [10.1145/3192366.3192409, 10.1145/3296979.3192409]
   Mazza D, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434309
   Mnih A., 2018, Advances in Neural Information Processing Systems, P439
   Mnih A, 2014, PR MACH LEARN RES, V32, P1791
   Mohamed S, 2020, J MACH LEARN RES, V21
   Naesseth CA, 2017, PR MACH LEARN RES, V54, P489
   Paszke A, 2019, ADV NEUR IN, V32
   Pientka Brigitte, 2019, 34 ANN ACM IEEE S LO, P1, DOI [10.1109/LICS.2019.8785683, DOI 10.1109/LICS.2019.8785683]
   Rall Louis B., 1981, Lecture Notes in Computer Science, V120, DOI [10.1007/3-540-10861-0, DOI 10.1007/3-540-10861-0]
   Ranganath R, 2014, JMLR WORKSH CONF PRO, V33, P814
   Schulman J, 2015, ADV NEUR IN, V28
   Schulman John, 2016, THESIS UC BERKELEY
   Scibior A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158148
   Scibior Adam, 2021, arXiv
   Sherman B, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434284
   Siddharth N., 2017, NIPS
   Vákár M, 2024, Arxiv, DOI arXiv:2007.05282
   Vákár M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290349
   van Krieken Emile, 2021, ADV NEURAL INFORM PR, P7574
   Weber T, 2019, PR MACH LEARN RES, V89
   Zhang YZ, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498677
NR 53
TC 5
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
AR 5
DI 10.1145/3571198
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500005
OA gold, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Unno, H
   Terauchi, T
   Gu, Y
   Koskinen, E
AF Unno, Hiroshi
   Terauchi, Tachio
   Gu, Yu
   Koskinen, Eric
TI Modular Primal-Dual Fixpoint Logic Solving for Temporal Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE temporal verification; fixpoint logics; constraint logic programming
ID TERMINATION; SOFTWARE; PROGRAMS
AB We present a novel approach to deciding the validity of formulas in first-order fixpoint logic with background theories and arbitrarily nested inductive and co-inductive predicates defining least and greatest fixpoints. Our approach is constraint-based, and reduces the validity checking problem of the given first-order-fixpoint logic formula (formally, an instance in a language called mu CLP) to a constraint satisfaction problem for a recently introduced predicate constraint language.
   Coupled with an existing sound-and-relatively-complete solver for the constraint language, this novel reduction alone already gives a sound and relatively complete method for deciding mu CLP validity, but we further improve it to a novel modular primal-dual method. The key observations are (1) mu CLP is closed under complement such that each (co-)inductive predicate in the original primal instance has a corresponding (co-)inductive predicate representing its complement in the dual instance obtained by taking the standard De Morgans dual of the primal instance, and (2) partial solutions for (co-)inductive predicates synthesized during the constraint solving process of the primal side can be used as sound upper-bounds of the corresponding (co-)inductive predicates in the dual side, and vice versa. By solving the primal and dual problems in parallel and exchanging each others partial solutions as sound bounds, the two processes mutually reduce each others solution spaces, thus enabling rapid convergence. The approach is also modular in that the bounds are synthesized and exchanged at granularity of individual (co-)inductive predicates.
   We demonstrate the utility of our novel fixpoint logic solving by encoding a wide variety of temporal verification problems in mu CLP, including termination/non-termination, LTL, CTL, and even the full modal mu-calculus model checking of infinite state programs. The encodings exploit the modularity in both the program and the property by expressing each loops and (recursive) functions in the program and sub-formulas of the property as individual (possibly nested) (co-)inductive predicates. Together with our novel modular primal-dual mu CLP solving, we obtain a novel approach to efficiently solving a wide range of temporal verification problems.
C1 [Unno, Hiroshi; Gu, Yu] Univ Tsukuba, Tsukuba, Ibaraki, Japan.
   [Unno, Hiroshi] RIKEN AIP, Tokyo, Japan.
   [Terauchi, Tachio] Waseda Univ, Tokyo, Japan.
   [Koskinen, Eric] Stevens Inst Technol, Hoboken, NJ 07030 USA.
C3 University of Tsukuba; RIKEN; Waseda University; Stevens Institute of
   Technology
RP Unno, H (corresponding author), Univ Tsukuba, Tsukuba, Ibaraki, Japan.; Unno, H (corresponding author), RIKEN AIP, Tokyo, Japan.
EM uhiro@cs.tsukuba.ac.jp; terauchi@waseda.jp; kou@logic.cs.tsukuba.ac.jp;
   eric.koskinen@stevens.edu
RI Unno, Hiroshi/IWM-2419-2023
OI Unno, Hiroshi/0000-0002-4225-8195; Terauchi, Tachio/0000-0001-5305-4916;
   Koskinen, Eric/0000-0001-7363-634X
FU JSPS KAKENHI [JP20H04162, JP20K20625, JP22H03564, JP20H05703,
   JP22H03570]; Office of Naval Research [N00014-17-1-2787,
   N0001422-1-2643]; NSF [CCF-1618059]
FX We thank anonymous reviewers for useful comments. This work was
   supported by JSPS KAKENHI Grant Numbers JP20H04162, JP20K20625,
   JP22H03564, JP20H05703, and JP22H03570. Koskinen was partially supported
   by Office of Naval Research under Grant Nos. N00014-17-1-2787 and
   N0001422-1-2643 and by NSF under Grant No. CCF-1618059.
CR [Anonymous], 2013, Proceedings (Lecture Notes in Computer Science, DOI DOI 10.1007/978-3-642-39799
   Babiak T, 2012, LECT NOTES COMPUT SC, V7214, P95, DOI 10.1007/978-3-642-28756-5_8
   Ball T, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/565816.503274
   Ben-Amram AM, 2014, J ACM, V61, DOI 10.1145/2629488
   Bjorner N, 2015, LECT NOTES COMPUT SC, V9300, P24, DOI 10.1007/978-3-319-23534-9_2
   Bradfield JC, 1999, LECT NOTES COMPUT SC, V1683, P350
   Bradley AR, 2011, LECT NOTES COMPUT SC, V6538, P70, DOI 10.1007/978-3-642-18275-4_7
   Brockschmidt M, 2016, LECT NOTES COMPUT SC, V9636, P387, DOI 10.1007/978-3-662-49674-9_22
   Champion A, 2018, LECT NOTES COMPUT SC, V10805, P365, DOI 10.1007/978-3-319-89960-2_20
   Charatonik W, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P58, DOI 10.1109/LICS.1998.705643
   Chen H.-Y., 2014, International Conference on Tools and Algorithms for the Construction and Analysis of Systems, P156
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Cook Byron, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P384, DOI 10.1007/978-3-662-46681-0_30
   Cook Byron, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P333, DOI 10.1007/978-3-642-22110-1_26
   Cook B, 2006, ACM SIGPLAN NOTICES, V41, P415, DOI 10.1145/1133981.1134029
   Cook B, 2017, J ACM, V64, DOI 10.1145/3060257
   Cook B, 2014, 2014 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P67, DOI 10.1109/FMCAD.2014.6987597
   Cook B, 2013, ACM SIGPLAN NOTICES, V48, P219, DOI 10.1145/2499370.2491969
   Cook B, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P399, DOI 10.1145/1926385.1926431
   Cook Byron., CAV 15, P13
   Delzanno G., 2001, International Journal on Software Tools for Technology Transfer, V3, P250, DOI 10.1007/s100090100049
   Dietsch D, 2015, LECT NOTES COMPUT SC, V9206, P49, DOI 10.1007/978-3-319-21690-4_4
   Falke S, 2011, LEIBNIZ INT PR INFOR, V10, P41, DOI 10.4230/LIPIcs.RTA.2011.41
   Fedyukovich G, 2018, LECT NOTES COMPUT SC, V10981, P124, DOI 10.1007/978-3-319-96145-3_7
   Fioravanti F, 2013, THEOR PRACT LOG PROG, V13, P175, DOI 10.1017/S1471068411000627
   Fribourg L, 2000, LECT NOTES COMPUT SC, V1817, P30, DOI 10.1007/10720327_3
   Giesl J, 2017, J AUTOM REASONING, V58, P3, DOI 10.1007/s10817-016-9388-y
   Godefroid P, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P43, DOI 10.1145/1706299.1706307
   Grebenshchikov S, 2012, ACM SIGPLAN NOTICES, V47, P405, DOI 10.1145/2345156.2254112
   Gupta AK, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P147, DOI 10.1145/1328438.1328459
   Gur~nkel Arie., 2015, CAV 15, P343
   Heizmann M, 2014, LECT NOTES COMPUT SC, V8559, P797, DOI 10.1007/978-3-319-08867-9_53
   Henzinger TA, 2004, ACM SIGPLAN NOTICES, V39, P232, DOI 10.1145/982962.964021
   Hojjat H, 2018, PROCEEDINGS OF THE 2018 18TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P158
   JAFFAR J, 1994, J LOGIC PROGRAM, V20, P503, DOI 10.1016/0743-1066(94)90033-7
   Jhala R, 2006, LECT NOTES COMPUT SC, V3920, P459
   Kahsai T, 2016, LECT NOTES COMPUT SC, V9779, P352, DOI 10.1007/978-3-319-41528-4_19
   Kobayashi Naoki, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P711, DOI 10.1007/978-3-319-89884-1_25
   Kobayashi N, 2019, LECT NOTES COMPUT SC, V11822, P413, DOI 10.1007/978-3-030-32304-2_20
   Komuravelli A, 2014, LECT NOTES COMPUT SC, V8559, P17
   Komuravelli A, 2016, FORM METHOD SYST DES, V48, P175, DOI 10.1007/s10703-016-0249-4
   Kura S, 2021, LECT NOTES COMPUT SC, V12760, P75, DOI 10.1007/978-3-030-81688-9_4
   Kuwahara T, 2014, LECT NOTES COMPUT SC, V8410, P392
   Le TC, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI [10.1145/2813885.2737993, 10.1145/2737924.2737993]
   LUBARSKY RS, 1993, J SYMBOLIC LOGIC, V58, P291, DOI 10.2307/2275338
   McMillan KL, 2014, LECT NOTES COMPUT SC, V8559, P243
   Nanjo Y, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P759, DOI 10.1145/3209108.3209204
   Nilsson U, 2000, LECT NOTES ARTIF INT, V1861, P384
   Padon Oded, 2022, INDUCTION DUALITY PR, V6
   Satake Y, 2020, AAAI CONF ARTIF INTE, V34, P1644
   Tellez G, 2020, J AUTOM REASONING, V64, P555, DOI 10.1007/s10817-019-09532-0
   Terauchi T, 2015, LECT NOTES COMPUT SC, V9032, P610, DOI 10.1007/978-3-662-46669-8_25
   Tsukada T, 2020, IEEE S LOG, P886, DOI 10.1145/3373718.3394766
   Unno H, 2020, Arxiv, DOI arXiv:2007.03656
   Unno H, 2021, LECT NOTES COMPUT SC, V12759, P742, DOI 10.1007/978-3-030-81685-8_35
   Unno H, 2017, LECT NOTES COMPUT SC, V10427, P571, DOI 10.1007/978-3-319-63390-9_30
   Unno H, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P277, DOI 10.1145/1599410.1599445
   Unno Hiroshi., 2017, P ACM PROGRAMMING LA
   Urban C, 2018, LECT NOTES COMPUT SC, V11002, P402, DOI 10.1007/978-3-319-99725-4_24
   Urban C, 2016, LECT NOTES COMPUT SC, V9636, P54, DOI 10.1007/978-3-662-49674-9_4
   Urban C, 2014, LECT NOTES COMPUT SC, V8410, P412
   Urban C, 2013, LECT NOTES COMPUT SC, V7935, P43, DOI 10.1007/978-3-642-38856-9_5
NR 62
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
AR 72
DI 10.1145/3571265
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500072
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Ghica, D
   Lindley, S
   Bravo, MM
   Piróg, M
AF Ghica, Dan
   Lindley, Sam
   Bravo, Marcos Maronas
   Pirog, Maciej
TI High-Level Effect Handlers in C++
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Effect handlers; algebraic effects; lightweight concurrency; context
   switching
AB Effect handlers allow the programmer to implement computational effects, such as custom error handling, various forms of lightweight concurrency, and dynamic binding, inside the programming language. We introduce cpp-effects, a C++ library for effect handlers with a typed high-level, object-oriented interface. We demonstrate that effect handlers can be successfully applied in imperative systems programming languages with manual memory management. Through a collection of examples, we explore how to program effectively with effect handlers in C++, discuss the intricacies and challenges of the implementation, and show that despite its limitations, cpp-effects performance is competitive and in some cases even outperforms state-of-the-art approaches such as C++20 coroutines and the libmprompt library for multiprompt delimited control.
C1 [Ghica, Dan; Bravo, Marcos Maronas; Pirog, Maciej] Huawei Cent Software Inst, Edinburgh, Scotland.
   [Lindley, Sam] Univ Edinburgh, Edinburgh, Scotland.
C3 University of Edinburgh
RP Ghica, D (corresponding author), Huawei Cent Software Inst, Edinburgh, Scotland.
OI Lindley, Sam/0000-0002-1360-4714
FU FLF [MR/T043830/1] Funding Source: UKRI
CR Armstrong Joe, 1996, Concurrent Programming in Erlang
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Biernacki D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290319
   Biernacki D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371116
   Bingham E, 2019, J MACH LEARN RES, V20
   Boost, 2022, Boost.context library
   Brachthäuser JI, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276481
   Brachthäuser JI, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000027
   Combette Guillaume, 2018, LOLA 2018 WORKSH SYN, P1
   Convent L, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000039
   Ghica Dan, 2022, High-Level Effect Handlers in C++, DOI [10.1145/3554330, DOI 10.1145/3554330]
   GitHub, 2022, Semantic library
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   Hillerstrom Daniel, 2022, WebAssembly Typed Continuations Proposal
   Hillerstrom Daniel, 2016, TyDe, DOI [10.1145/2976022.2976033, DOI 10.1145/2976022.2976033]
   Inostroza P, 2018, ONWARD!'18: PROCEEDINGS OF THE 2018 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE, P111, DOI 10.1145/3276954.3276955
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Klein C, 2012, ACM SIGPLAN NOTICES, V47, P285, DOI 10.1145/2103621.2103691
   Leijen D, 2017, LECT NOTES COMPUT SC, V10695, P339, DOI 10.1007/978-3-319-71237-6_17
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Leijen Daan, 2022, libmprompt
   Leijen Daan, 2019, libhandler
   Meta, 2022, React library
   Ningning Xie, 2021, Proceedings of the ACM on Programming Languages, V5, DOI 10.1145/3473576
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Plotkin Gordon D., 2001, Electr. Notes Theor. Comput. Sci., V45, P332, DOI [10.1016/S1571-0661(04)80970-8, DOI 10.1016/S1571-0661(04)80970-8]
   Sivaramakrishnan KC, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P206, DOI 10.1145/3453483.3454039
   WebAssembly Community Group, 2022, WebAssembly Stack Switching Extension
   Xie NN, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408981
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
NR 33
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 183
DI 10.1145/3563445
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200060
OA gold
DA 2024-07-18
ER

PT J
AU Yuan, C
   Carbin, M
AF Yuan, Charles
   Carbin, Michael
TI Tower: Data Structures in Quantum Superposition
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantum programming; data structures; quantum random-access memory;
   reversible programming; history independence
AB Emerging quantum algorithms for problems such as element distinctness, subset sum, and closest pair demonstrate computational advantages by relying on abstract data structures. Practically realizing such an algorithm as a program for a quantum computer requires an efficient implementation of the data structure whose operations correspond to unitary operators that manipulate quantum superpositions of data.
   To correctly operate in superposition, an implementation must satisfy three properties D reversibility, history independence, and bounded-time execution. Standard implementations, such as the representation of an abstract set as a hash table, fail these properties, calling for tools to develop specialized implementations.
   In this work, we present Core Tower, the first language for quantum programming with random-access memory. Core Tower enables the developer to implement data structures as pointer-based, linked data. It features a reversible semantics enabling every valid program to be translated to a unitary quantum circuit.
   We present Boson, the first memory allocator that supports reversible, history-independent, and constant-time dynamic memory allocation in quantum superposition. We also present Tower, a language for quantum programming with recursively defined data structures. Tower features a type system that bounds all recursion using classical parameters as is necessary for a program to execute on a quantum computer.
   Using Tower, we implement Ground, the first quantum library of data structures, including lists, stacks, queues, strings, and sets. We provide the first executable implementation of sets that satisfies all three mandated properties of reversibility, history independence, and bounded-time execution.
C1 [Yuan, Charles; Carbin, Michael] MIT CSAIL, 32 Vassar St, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Yuan, C (corresponding author), MIT CSAIL, 32 Vassar St, Cambridge, MA 02139 USA.
EM chenhuiy@csail.mit.edu; mcarbin@csail.mit.edu
RI Yuan, Charles/KLY-8817-2024
OI Yuan, Charles/0000-0002-4918-4467
FU MIT-IBM Watson AI Lab; Sloan Foundation
FX Wewould like to thank Jesse Michel, LoganWeber, Tian Jin, and anonymous
   reviewers who provided feedback on drafts of this paper. We thank Scott
   Aaronson for directing us to the quantum algorithms that were critical
   to the motivation of this work. We also give special thanks to Chris
   McNally for invaluable discussions on the nature of quantum
   random-access memory, and introducing to the authors the physical
   concept of exchange symmetry.; This work was supported in part by the
   MIT-IBM Watson AI Lab and the Sloan Foundation. Any opinions, findings,
   and conclusions or recommendations expressed in this material are those
   of the authors and do not necessarily reflect the views of the funding
   agencies.
CR Aaronson Scott, 2019, arXiv
   Aaronson Scott, 2002, arXiv, DOI DOI 10.48550/ARXIV.QUANTPH/0209060
   Abraham H., 2019, Qiskit: An open-source framework for quantum computing, DOI 10.5281/zenodo.2562110
   Abrams DS, 1997, PHYS REV LETT, V79, P2586, DOI 10.1103/PhysRevLett.79.2586
   Altenkirch T, 2005, IEEE S LOG, P249
   Ambainis A, 2014, Arxiv, DOI arXiv:quant-ph/0311001
   [Anonymous], 2014, Liqui: A software design architecture and domain-specific language for quantum computing
   Arunachalam S, 2015, NEW J PHYS, V17, DOI 10.1088/1367-2630/17/12/123010
   Axelsen Holger Bock, 2013, Reversible Computation
   Bajaj S, 2016, IEEE T INF FOREN SEC, V11, P303, DOI 10.1109/TIFS.2015.2491309
   Barenco A, 1997, SIAM J COMPUT, V26, P1541, DOI 10.1137/S0097539796302452
   Bell J.S., 1964, Physics, V1, P195, DOI [10.1103/PhysicsPhysiqueFizika.1.195, DOI 10.1103/PHYSICSPHYSIQUEFIZIKA.1.195, 10.1103/Physics-PhysiqueFizika.1.195]
   BENNETT CH, 1989, SIAM J COMPUT, V18, P766, DOI 10.1137/0218053
   BENNETT CH, 1973, IBM J RES DEV, V17, P525, DOI 10.1147/rd.176.0525
   Bennett CH, 2014, THEOR COMPUT SCI, V560, P7, DOI 10.1016/j.tcs.2014.05.025
   Bernstein DJ, 2013, LECT NOTES COMPUT SC, V7932, P16, DOI 10.1007/978-3-642-38616-9_2
   Berry DW, 2018, NPJ QUANTUM INFORM, V4, DOI 10.1038/s41534-018-0071-5
   Bichsel B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P286, DOI 10.1145/3385412.3386007
   Bohannon A, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P407, DOI 10.1145/1328438.1328487
   Booth K.E.C., 2021, Quantum, V5, P550, DOI [10.22331/q-2021-09-28-550, DOI 10.22331/Q-2021-09-28-550]
   Bowman WilliamJ., 2011, RC
   Buhrman H, 2022, Arxiv, DOI [arXiv:2203.05599, 10.48550/ARXIV.2203.05599, DOI 10.48550/ARXIV.2203.05599]
   Buhrman H, 2021, Arxiv, DOI arXiv:2106.02005
   Chakraborty S, 2018, Arxiv, DOI [arXiv:1804.01973, 10.48550/arXiv.1804.01973, DOI 10.48550/ARXIV.1804.01973, 10.4230/LIPIcs.ICALP.2019.33, DOI 10.4230/LIPICS.ICALP.2019.33]
   Chen LJ, 2024, Arxiv, DOI [arXiv:2112.14317, DOI 10.48550/ARXIV.2112.14317]
   Cheng KW, 2002, ELECTRON LETT, V38, P1343, DOI 10.1049/el:20020949
   Chiew M, 2019, QUANTUM INF PROCESS, V18, DOI 10.1007/s11128-019-2407-2
   Childs AM, 2018, P NATL ACAD SCI USA, V115, P9456, DOI 10.1073/pnas.1801723115
   COPPERSMITH D, 1994, APPROXIMATE FOURIER
   Di Matteo Olivia, 2020, IEEE Transactions on Quantum Engineering, V1, DOI 10.1109/TQE.2020.2965803
   Ding YS, 2020, ANN I S COM, P570, DOI 10.1109/ISCA45697.2020.00054
   Draper T.G., 2000, ARXIV
   Farhi E, 2014, Arxiv, DOI arXiv:1411.4028
   FREDKIN E, 1982, INT J THEOR PHYS, V21, P219, DOI 10.1007/BF01857727
   Gidney Craig, 2022, arXiv, DOI [10.48550/ARXIV.2204.13835, DOI 10.48550/ARXIV.2204.13835]
   Giovannetti V, 2008, PHYS REV LETT, V100, DOI 10.1103/PhysRevLett.100.160501
   Goldreich O, 1996, J ACM, V43, P431, DOI 10.1145/233551.233553
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Harrow AW, 2009, PHYS REV LETT, V103, DOI 10.1103/PhysRevLett.103.150502
   Hartline Jason D., 2002, Algorithms and Computation
   Haulund Tue, 2017, arXiv, DOI DOI 10.48550/ARXIV.1707.07845
   Islam M. S., 2009, Information Technology Journal, V8, P208, DOI 10.3923/itj.2009.208.213
   Jeffery S, 2013, PROCEEDINGS OF THE TWENTY-FOURTH ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS (SODA 2013), P1474
   Kassal I, 2011, ANNU REV PHYS CHEM, V62, P185, DOI 10.1146/annurev-physchem-032210-103512
   Kerenidis I, 2016, Arxiv, DOI [arXiv:1603.08675, DOI 10.48550/ARXIV.1603.08675]
   Knill E, 1996, CONVENTIONS QUANTUM
   Li GS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428218
   Liboff R L., 1980, INTRO QUANTUM MECH
   Lutz C, 1986, Janus: a time-reversible language
   MORRISON DR, 1968, J ACM, V15, P514, DOI 10.1145/321479.321481
   Naor Moni, 2001, ACM S THEOR COMP, DOI DOI 10.1145/380752.380844
   Nielsen M. A., 2010, QUANTUM COMPUTATION, DOI [10.1017/cbo9780511976667, DOI 10.1017/CBO9780511976667]
   Paler A, 2020, PHYS REV A, V102, DOI 10.1103/PhysRevA.102.032608
   Paradis A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P222, DOI 10.1145/3453483.3454040
   Paykin J, 2017, ACM SIGPLAN NOTICES, V52, P846, DOI 10.1145/3093333.3009894
   Péchoux R, 2020, LECT NOTES COMPUT SC, V12077, P562, DOI 10.1007/978-3-030-45231-5_29
   Run-Hua Shi, 2021, IEEE Transactions on Quantum Engineering, V2, DOI 10.1109/TQE.2021.3054623
   Selinger P, 2006, MATH STRUCT COMP SCI, V16, P527, DOI 10.1017/S0960129506005238
   Shor PW, 1997, SIAM J COMPUT, V26, P1484, DOI 10.1137/S0036144598347011
   Svore K, 2018, RWDSL2018: PROCEEDINGS OF THE REAL WORLD DOMAIN SPECIFIC LANGUAGES WORKSHOP 2018, DOI 10.1145/3183895.3183901
   Thomsen Michael Kirkedal, 2015, S IMPL APPL FUNCT PR, DOI DOI 10.1145/2897336.2897345
   Vieri Carlin, 1995, Pendulumsa reversible computer architecture
   Wang XS, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P215, DOI 10.1145/2660267.2660314
   Yao Andrew C., 1982, S FDN COMP SCI, DOI [10.5555/1382436.1382751, DOI 10.5555/1382436.1382751]
   Yokoyama T., 2007, P 2007 ACM SIGPLAN W, P144, DOI DOI 10.1145/1244381.1244404
   Yuan Charles, 2022, Zenodo, DOI 10.5281/ZENODO.6819031
   Zahur S, 2013, P IEEE S SECUR PRIV, P493, DOI 10.1109/SP.2013.40
NR 68
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 134
DI 10.1145/3563297
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200011
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Bahr, P
   Hutton, G
AF Bahr, Patrick
   Hutton, Graham
TI Monadic Compiler Calculation (Functional Pearl)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program calculation; bisimilarity; divergence; non-determinism
AB Bahr and Hutton recently developed a new approach to calculating correct compilers directly from specifications of their correctness. However, the methodology only considers converging behaviour of the source language, which means that the compiler could potentially produce arbitrary, erroneous code for source programs that diverge. In this article, we show how the methodology can naturally be extended to support the calculation of compilers that address both convergent and divergent behaviour simultaneously, without the need for separate reasoning for each aspect. Our approach is based on the use of the partiality monad to make divergence explicit, together with the use of strong bisimilarity to support equational-style calculations, but also generalises to other forms of effect by changing the underlying monad.
C1 [Bahr, Patrick] IT Univ Copenhagen, Copenhagen, Denmark.
   [Hutton, Graham] Univ Nottingham, Nottingham, England.
C3 IT University Copenhagen; University of Nottingham
RP Bahr, P (corresponding author), IT Univ Copenhagen, Copenhagen, Denmark.
OI Bahr, Patrick/0000-0003-1600-8261; Hutton, Graham/0000-0001-9584-5150
FU EPSRC [EP/P00587X/1]; Unified Reasoning About Program Correctness and
   Efficiency
FX We thank the reviewers for their useful comments and suggestions. This
   work was funded by EPSRC grant EP/P00587X/1, Unified Reasoning About
   Program Correctness and Efficiency.
CR Ager M.S., 2003, RS0314 BRICS U AARH
   [Anonymous], 2003, ACM SIGSOFT Softw. Eng. Notes, DOI DOI 10.1145/966221.966235
   Backhouse Roland, 2003, PROGRAM CONSTRUCTION
   Bahr Patrick, 2022, Zenodo, DOI 10.5281/ZENODO.6794696
   Bahr P, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000209
   Bahr P, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000180
   Bahr P, 2015, LECT NOTES COMPUT SC, V9129, P159, DOI 10.1007/978-3-319-19797-5_8
   Beringer Lennart, 2014, PROGRAMMING LANGUAGE, DOI [10.1007/978-3-642-54833-8_7, DOI 10.1007/978-3-642-54833-8_7]
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Capretta V, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:1)2005
   Danielsson NA, 2012, ACM SIGPLAN NOTICES, V47, P127, DOI 10.1145/2398856.2364546
   Gibbons J, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P2
   Grégoire B, 2002, ACM SIGPLAN NOTICES, V37, P235, DOI 10.1145/583852.581501
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Hutton G, 2007, J FUNCT PROGRAM, V17, P777, DOI 10.1017/S0956796807006363
   Kang J, 2016, ACM SIGPLAN NOTICES, V51, P178, DOI 10.1145/2914770.2837642
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leroy Xavier, 2006, P EUROPEAN S PROGRAM, DOI [10.1007/11693024_5, DOI 10.1007/11693024_5]
   Meijer E., 1992, THESIS KATHOLIEKE U
   Mogelberg RE, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290317
   Neis G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P166, DOI 10.1145/2784731.2784764
   Park D., 1981, LNCS, P167, DOI [DOI 10.1007/BFB0017309, 10.1007/BFb0017309]
   Patterson D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341689
   Perconti JT, 2014, LECT NOTES COMPUT SC, V8410, P128
   Pickard M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473587
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Sestoft P., 1997, Journal of Functional Programming, V7, P231, DOI 10.1017/S0956796897002712
   SPIVEY M, 1990, SCI COMPUT PROGRAM, V14, P25, DOI 10.1016/0167-6423(90)90056-J
   Stewart G, 2015, ACM SIGPLAN NOTICES, V50, P275, DOI [10.1145/2676726.2676985, 10.1145/2775051.2676985]
   WAND M, 1982, ACM T PROGR LANG SYS, V4, P496, DOI 10.1145/357172.357179
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Zakowski Y, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P71, DOI 10.1145/3372885.3373813
   Zúñiga A, 2020, MATHEMATICS-BASEL, V8, DOI 10.3390/math8091573
NR 33
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 93
DI 10.1145/3547624
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000004
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Dal Lago, U
   Gavazzo, F
AF Dal Lago, Ugo
   Gavazzo, Francesco
TI A Relational Theory of Effects and Coeffects
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Coeffects; Graded Modal Types; (Algebraic) Effects; Relational
   Reasoning; Program Equivalence and Refinement; Logical Relations;
   Applicative Bisimulation; Lax Extension; (Co)Relator
ID CALL-BY-VALUE; LINEAR LOGIC; SEMANTICS
AB Graded modal types systems and coeffects are becoming a standard formalism to deal with context-dependent, usage-sensitive computations, especially when combined with computational effects. From a semantic perspective, effectful and coeffectful languages have been studied mostly by means of denotational semantics and almost nothing has been done from the point of view of relational reasoning. This gap in the literature is quite surprising, since many cornerstone results D such as non-interference, metric preservation, and proof irrelevance D on concrete coeffects are inherently relational. In this paper, we fill this gap by developing a general theory and calculus of program relations for higher-order languages with combined effects and coeffects. The relational calculus builds upon the novel notion of a corelator (or comonadic lax extension) to handle coeffects relationally. Inside such a calculus, we define three notions of effectful and coeffectful program refinements: contextual approximation, logical preorder, and applicative similarity. These are the first operationally-based notions of program refinement (and, consequently, equivalence) for languages with combined effects and coeffects appearing in the literature. We show that the axiomatics of a corelator (together with the one of a relator) is precisely what is needed to prove all the aforementioned program refinements to be precongruences, this way obtaining compositional relational techniques for reasoning about combined effects and coeffects.
C1 [Dal Lago, Ugo; Gavazzo, Francesco] Univ Bologna, Bologna, Italy.
   [Dal Lago, Ugo; Gavazzo, Francesco] INRIA, Inria Sophia Mediterranee, Sophia Antipolis, France.
C3 University of Bologna; Inria
RP Dal Lago, U (corresponding author), Univ Bologna, Bologna, Italy.; Dal Lago, U (corresponding author), INRIA, Inria Sophia Mediterranee, Sophia Antipolis, France.
EM ugo.dallago@unibo.it; francesco.gavazzo2@unibo.it
RI ; Dal Lago, Ugo/K-9621-2015
OI GAVAZZO, FRANCESCO/0000-0002-2159-0615; Dal Lago,
   Ugo/0000-0001-9200-070X
FU ERC CoG lDIAPASoNz [GA 818616]; MIUR PRIN lASPRAz [201784YSZ5]
FX This work is supported by the ERC CoG lDIAPASoNz under Grant No. GA
   818616 and MIUR PRIN lASPRAz under Grant No. 201784YSZ5
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Abel A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408972
   Abramsky S., 1990, RES TOPICS FUNCTIONA
   [Anonymous], 2006, Lecture Notes in Computer Science, DOI 10.1007/116930246
   [Anonymous], 1968, Mathematical Systems Theory
   [Anonymous], 2021, MODAL REASONING METR
   [Anonymous], 1994, Handbook of logic in computer science
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Backhouse Roland Carl, 1991, P AMAST 91 WORKSH CO
   Barr Michael, 1970, LECT NOTES MATH, V137, P39, DOI [10.1007/BFb0060439, DOI 10.1007/BFB0060439]
   Barthe G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158145
   Benton N, 1996, IEEE S LOG, P420, DOI 10.1109/LICS.1996.561458
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Bierman G. M., 2000, Studia Logica, V65, P383, DOI 10.1023/A:1005291931660
   Bizjak A, 2015, LECT NOTES COMPUT SC, V9034, P279, DOI 10.1007/978-3-662-46678-0_18
   Breuvart Flavien, 2015, 24 EACSL ANN C COMP, V41, P567, DOI DOI 10.4230/LIPICS.CSL.2015.567
   Brunel A, 2014, LECT NOTES COMPUT SC, V8410, P351
   Choudhury P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434331
   Clementino MM, 2004, APPL CATEGOR STRUCT, V12, P127, DOI 10.1023/B:APCS.0000018144.87456.10
   Culpepper R, 2017, LECT NOTES COMPUT SC, V10201, P368, DOI 10.1007/978-3-662-54434-1_14
   Dal Lago DLG21b Ugo, 2021, LIPICS, V195, p23:1, DOI [10.4230/LIPIcs.FSCD.2021.23, DOI 10.4230/LIPICS.FSCD.2021.23]
   Dal Lago U, 2017, P 32 ANN ACM IEEE S, P1
   Dal Lago U, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498680
   Dal Lago U, 2021, THEOR COMPUT SCI, V895, P34, DOI 10.1016/j.tcs.2021.09.027
   Dal Lago U, 2019, ELECTRON NOTES THEOR, V347, P121, DOI 10.1016/j.entcs.2019.09.007
   Dal Lago U, 2020, THEOR COMPUT SCI, V813, P234, DOI 10.1016/j.tcs.2019.12.025
   Dal Lago U, 2019, LECT NOTES COMPUT SC, V11423, P263, DOI 10.1007/978-3-030-17184-1_10
   Dal Lago U, 2014, ACM SIGPLAN NOTICES, V49, P297, DOI 10.1145/2535838.2535872
   Dal Lago Ugo, P ICTCS 2017
   Dal Lago Ugo, 2019, P ICALP 2019, p111:1, DOI DOI 10.4230/LIPICS.ICALP.2019.111
   Dal Lago Ugo, 2020, P ICTCS 2020
   de Amorim AA, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785715
   de Amorim AA, 2017, ACM SIGPLAN NOTICES, V52, P545, DOI [10.1145/3093333.3009890, 10.1145/3009837.3009890]
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   Gaboardi M, 2016, ACM SIGPLAN NOTICES, V51, P476, DOI 10.1145/3022670.2951939
   Gavazzo F, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P452, DOI 10.1145/3209108.3209149
   Gavazzo Francesco, 2019, PhD thesis
   Ghica DR, 2014, LECT NOTES COMPUT SC, V8410, P331
   GIRARD JY, 1992, THEOR COMPUT SCI, V97, P1, DOI 10.1016/0304-3975(92)90386-T
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   GOGUEN JA, 1977, J ACM, V24, P68, DOI 10.1145/321992.321997
   Gordon A.D., 1992, THESIS U CAMBRIDGE U
   Gordon A.D., 1994, WORKSH COMP, DOI [10.1007/978-1-4471-3573-9_6, DOI 10.1007/978-1-4471-3573-9_6]
   Goubault-Larrecq J, 2008, MATH STRUCT COMP SCI, V18, P1169, DOI 10.1017/S0960129508007172
   Harper R, 2016, Practical Foundations for Programming Languages
   Hoffman D., 2015, CATEG GEN ALGEBRAIC, V3
   Hofmann D, 2014, ENCYCLOP MATH APPL, V153, P1, DOI 10.1017/CBO9781107517288
   Howe DJ, 1996, INFORM COMPUT, V124, P103, DOI 10.1006/inco.1996.0008
   Hyland M, 2006, THEOR COMPUT SCI, V357, P70, DOI 10.1016/j.tcs.2006.03.013
   Johann P, 2010, IEEE S LOG, P209, DOI 10.1109/LICS.2010.29
   Katsumata SY, 2018, LECT NOTES COMPUT SC, V10803, P110, DOI 10.1007/978-3-319-89366-2_6
   Kawahara Yasuo, 1973, MEMOIRS FS KYUSHU A, V27
   Lassen S, 2005, IEEE S LOG, P345
   Lassen S. B., 1999, Electronic Notes in Theoretical Computer Science, V20, DOI 10.1016/S1571-0661(04)80083-5
   Lassen S.B., 1998, HIGHER ORDER OPERATI
   Lassen Soren Bogh, 1998, THESIS U AARHUS
   Lawvere F.W., 1973, REND SEM MAT FIS, V43
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   MacLane S, 2013, GRADUATE TEXTS MATH
   Maraist J, 1999, THEOR COMPUT SCI, V228, P175, DOI 10.1016/S0304-3975(98)00358-2
   Mason I., 1991, Journal of Functional Programming, V1, P287, DOI 10.1017/S0956796800000125
   McCarthy J., 1961, Proceedings of the Western Joint Computer Conference, P225, DOI DOI 10.1145/1460690.1460715
   McCarthy John, 1963, STUDIES LOGIC FDN MA, V35, P70
   McCarthy John, 1962, P IFIP 1962, p21s28
   Mitchell John C., 1996, Foundation of computing series
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moggi E., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P14, DOI 10.1109/LICS.1989.39155
   Morris J, 1969, THESIS MIT
   Ong C.-H. Luke, 1993, P LICS 1993, DOI [10.1109/LICS.1993.287580, DOI 10.1109/LICS.1993.287580]
   Orchard D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341714
   Orchard Dominic A., 2014, THESIS U CAMBRIDGE U
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   Pfenning F, 2001, IEEE S LOG, P221, DOI 10.1109/LICS.2001.932499
   Pfenning Frank, 1995, P MFPS 1995, DOI [10.1016/S1571- 0661(04)00028-3, DOI 10.1016/S1571-0661(04)00028-3]
   Pitts A.M., 2011, ADV TOPICS BISIMULAT, V52
   Pitts A. M., 1997, SEMANTICS LOGICS COM
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin Gordon, 1973, SAIRM4 U ED SCH A I
   Plotkin Gordon D., 2001, Lecture Notes in Computer Science, V2030, P1, DOI [10.1007/3-540-45315-6_1, DOI 10.1007/3-540-45315-6_1]
   Plotkin Gordon D., 2001, Electr. Notes Theor. Comput. Sci., V45, P332, DOI [10.1016/S1571-0661(04)80970-8, DOI 10.1016/S1571-0661(04)80970-8]
   REED J, 2010, P ICFP, DOI 10.1145/1863543.1863568
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Routley Richard, 1973, TRUTH SYNTAX MODALIT, V68, P243
   SANGIORGI D, 1994, INFORM COMPUT, V111, P120, DOI 10.1006/inco.1994.1042
   Searcoid, 2006, METRIC SPACES
   Simpson A., 2018, P ESOP 2018, DOI [10.1007/978- 3- 319-89884- 1_11, DOI 10.1007/978-3-319-89884-1_11]
   Simpson A, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3363518
   Simpson Alex K., 1994, THESIS U EDINBURGH U
   URQUHART A, 1972, J SYMBOLIC LOGIC, V37, P159, DOI 10.2307/2272559
   Volpano D., 1996, Journal of Computer Security, V4, P167
NR 93
TC 7
Z9 7
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 31
DI 10.1145/3498692
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900032
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Jacobs, J
   Balzer, S
   Krebbers, R
AF Jacobs, Jules
   Balzer, Stephanie
   Krebbers, Robbert
TI Connectivity Graphs: A Method for Proving Deadlock Freedom Based on
   Separation Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Message passing; concurrency; session types; separation logic; deadlock
   freedom; graphs; Coq
ID GLOBAL PROGRESS; SESSION
AB We introduce the notion of a connectivity graph-an abstract representation of the topology of concurrently interacting entities, which allows us to encapsulate generic principles of reasoning about deadlock freedom. Connectivity graphs are parametric in their vertices (representing entities like threads and channels) and their edges (representing references between entities) with labels (representing interaction protocols). We prove deadlock and memory leak freedom in the style of progress and preservation and use separation logic as a meta theoretic tool to treat connectivity graph edges and labels substructurally. To prove preservation locally, we distill generic separation logic rules for local graph transformations that preserve acyclicity of the connectivity graph. To prove global progress locally, we introduce a waiting induction principle for acyclic connectivity graphs. We mechanize our results in Coq, and instantiate our method with a higher-order binary session-typed language to obtain the first mechanized proof of deadlock and leak freedom.
C1 [Jacobs, Jules; Krebbers, Robbert] Radboud Univ Nijmegen, Nijmegen, Netherlands.
   [Balzer, Stephanie] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Radboud University Nijmegen; Carnegie Mellon University
RP Jacobs, J (corresponding author), Radboud Univ Nijmegen, Nijmegen, Netherlands.
EM j.jacobs@science.ru.nl; balzers@cs.cmu.edu; mail@robbertkrebbers.nl
OI Jacobs, Jules/0000-0003-1976-3182
FU National Science Foundation [CCF-1718267]; Dutch Research Council (NWO)
   [016]
FX We thank the anonymous reviewers for their helpful feedback, and
   especially for the criticism that global progress is a very weak
   property if one thread is in an infinite loop, which is what led us to
   develop g6.3. We are grateful to Herman Geuvers, Fabrizio Montesi, Ike
   Mulder, Arjen Rouvoet, Bernardo Toninho, and Jorge Perez for discussions
   about this paper and related work. The second author (Stephanie Balzer)
   was supported by National Science Foundation Award No. CCF-1718267. The
   third author (Robbert Krebbers) was supported by the Dutch Research
   Council (NWO), project 016.Veni.192.259.
CR Avron A., 1991, Annals of Mathematics and Artificial Intelligence, V4, P225, DOI 10.1007/BF01531058
   Balzer S, 2019, LECT NOTES COMPUT SC, V11423, P611, DOI 10.1007/978-3-030-17184-1_22
   Balzer S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110281
   Balzer Stephanie, 2018, CONCUR, DOI DOI 10.4230/LIPICS.CONCUR.2018.30
   Benton PN, 1995, LECT NOTES COMPUT SC, V933, P121, DOI 10.1007/BFb0022251
   Bettini L, 2008, LECT NOTES COMPUT SC, V5201, P418, DOI 10.1007/978-3-540-85361-9_33
   Caires L, 2013, LECT NOTES COMPUT SC, V7792, P330, DOI 10.1007/978-3-642-37036-6_19
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Carbone M, 2010, ELECTRON P THEOR COM, P13, DOI 10.4204/EPTCS.38.4
   Castro-Perez D, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P237, DOI 10.1145/3453483.3454041
   Castro-Perez David, 2020, TACAS, DOI [DOI 10.1007/978-3-030-45237-7, 10.1007/978-3-030-45237-7_17, DOI 10.1007/978-3-030-45237-7_17]
   Chaudhuri K, 2019, THEOR COMPUT SCI, V781, P24, DOI 10.1016/j.tcs.2019.02.023
   Chen Ruo Fei, 2022, 36 EUR C OBJ OR PROG, V222, DOI [10.4230/LIPIcs.ECOOP.2022.22, DOI 10.4230/LIPICS.ECOOP.2022.22]
   Ciccone Luca, 2020, PPDP 20 22 INT S PRI, DOI [10.1145/3414080.3414109, DOI 10.1145/3414080.3414109]
   Coppo M, 2016, MATH STRUCT COMP SCI, V26, P238, DOI 10.1017/S0960129514000188
   Craciun F, 2015, IEEE INT C ENG COMP, P140, DOI 10.1109/ICECCS.2015.33
   Cruz-Filipe L, 2021, LECT NOTES COMPUT SC, V12819, P115, DOI 10.1007/978-3-030-85315-0_8
   Cruz-Filipe Luis, 2021, P 12 INT C INTERACTI, DOI [DOI 10.4230/LIPICS.ITP.2021.15, 10.4230/LIPIcs., DOI 10.4230/LIPICS]
   Dardha O, 2018, LECT NOTES COMPUT SC, V10803, P91, DOI 10.1007/978-3-319-89366-2_5
   Das A, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P305, DOI 10.1145/3209108.3209146
   Derakhshan F, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470654
   Dezani-Ciancaglini M, 2006, LECT NOTES COMPUT SC, V4067, P328
   Duy-Khanh Le, 2013, Automated Technology for Verification and Analysis. 11th International Symposium, ATVA 2013. Proceedings: LNCS 8172, P287, DOI 10.1007/978-3-319-02444-8_21
   Fowler S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290341
   Fowler Simon, 2021, CONCUR, DOI [10.4230/LIPIcs.CONCUR.2021.36, DOI 10.4230/LIPICS.CONCUR.2021.36]
   Francalanza A, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(3:07)2011
   Gay SJ, 2020, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.314.3
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Goto M, 2016, MATH STRUCT COMP SCI, V26, P465, DOI 10.1017/S0960129514000231
   Hamin Jafar, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P415, DOI 10.1007/978-3-319-89884-1_15
   Harper Robert, 2016, PRACTICAL FDN PROGRA, V2nd, DOI DOI 10.5555/3002812
   Hinrichsen JK, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371074
   Hinrichsen JK, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P178, DOI 10.1145/3437992.3439914
   Hinrichsen Jonas Kastberg, 2021, COQ MECH ACTRIS
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Igarashi A, 2004, THEOR COMPUT SCI, V311, P121, DOI 10.1016/S0304-3975(03)00325-6
   Igarashi A., 1997, Static Analysis. 4th International Symposium, SAS '97 Proceedings, P187, DOI 10.1007/BFb0032742
   Igarashi A, 2001, ACM SIGPLAN NOTICES, V36, P128, DOI 10.1145/373243.360215
   Igarashi A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110282
   Imai K, 2019, SCI COMPUT PROGRAM, V172, P135, DOI 10.1016/j.scico.2018.08.005
   Imai K, 2011, ELECTRON P THEOR COM, P74, DOI 10.4204/EPTCS.69.6
   Jacobs Jules, 2021, CONNECTIVITY G UNPUB
   Jespersen Thomas Bracht Laumann, 2015, P 11 ACM SIGPLAN WOR, P13, DOI DOI 10.1145/2808098.2808100
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kassios IT, 2013, LECT NOTES COMPUT SC, V7792, P149, DOI 10.1007/978-3-642-37036-6_10
   Keizer AC, 2021, LECT NOTES COMPUT SC, V12648, P375, DOI 10.1007/978-3-030-72019-3_14
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Kobayashi N, 2002, INFORM COMPUT, V177, P122, DOI 10.1006/inco.2002.3171
   Kobayashi N., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P489
   Kobayashi N, 1997, IEEE S LOG, P128, DOI 10.1109/LICS.1997.614941
   Kobayashi N, 2006, LECT NOTES COMPUT SC, V4137, P233
   Kokke W, 2019, ELECTRON P THEOR COM, P48, DOI 10.4204/EPTCS.304.4
   Kokke W, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290337
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krebbers Robbert, 2018, P ACM PROGR LANG, DOI [10.1145/3236772, DOI 10.1145/3236772]
   Lindley S, 2017, RIV PUBL SER AUTOMAT, P265
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P133, DOI [10.1145/2976002.2976018, 10.1145/3241625.2976018]
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P434, DOI 10.1145/3022670.2951921
   Lindley S, 2015, LECT NOTES COMPUT SC, V9032, P560, DOI 10.1007/978-3-662-46669-8_23
   Lozes É, 2012, ELECTRON P THEOR COM, P17, DOI 10.4204/EPTCS.104.3
   Montesi Fabrizio, 2021, INTRO CHOREOGRAPHIES
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   Oortwijn W, 2016, ELECTRON P THEOR COM, P65, DOI 10.4204/EPTCS.211.7
   Padovani L, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000289
   Peressotti Marco, 2018, ABS180301049
   Pérez JA, 2014, INFORM COMPUT, V239, P254, DOI 10.1016/j.ic.2014.08.001
   Pfenning F, 2015, LECT NOTES COMPUT SC, V9034, P3, DOI 10.1007/978-3-662-46678-0_1
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st, DOI DOI 10.5555/509043
   Pucella R, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P25
   Qian ZS, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473567
   Reed Jason, 2009, Ph. D. Dissertation
   Reed Jason, 2009, JUDGMENTAL DEC UNPUB
   Rocha Pedro, 2021, PROPOSITIONS AS TYPE
   Rouvoet A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434303
   Rouvoet A, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P284, DOI 10.1145/3372885.3373818
   Scalas Alceste, 2016, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, DOI [DOI 10.4230/LIPICS, DOI 10.4230/LIPICS.ECOOP.2016.21]
   Sozeau M, 2009, J FORMALIZ REASON, V2, P41
   Tassarotti J, 2017, LECT NOTES COMPUT SC, V10201, P909, DOI 10.1007/978-3-662-54434-1_34
   The Coq Development Team, 2021, COQ PROOF ASSISTANT, DOI DOI 10.5281/ZENODO.4501022
   The Coq-std++ Team, 2021, EXT STAND LIB COQ
   Thiemann Peter, 2019, PPDP, V19, DOI [10. 1145/3354166.335418, DOI 10.1145/3354166.335418]
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   Toninho Bernardo, 2015, THESIS CARNEGIE MELL
   Vasconcelos VT, 2012, INFORM COMPUT, V217, P52, DOI 10.1016/j.ic.2012.05.002
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Zhang Dan, 2016, MODELSWARD 2016, DOI [10.1007/978-3-319-66302-9_13, DOI 10.1007/978-3-319-66302-9_13]
NR 92
TC 10
Z9 12
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 1
DI 10.1145/3498662
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900002
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Raad, A
   Berdine, J
   Dreyer, D
   O'Hearn, PW
AF Raad, Azalea
   Berdine, Josh
   Dreyer, Derek
   O'Hearn, Peter W.
TI Concurrent Incorrectness Separation Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Concurrency; program logics; separation logic; bug catching
AB Incorrectness separation logic (ISL) was recently introduced as a theory of under-approximate reasoning, with the goal of proving that compositional bug catchers find actual bugs. However, ISL only considers sequential programs. Here, we develop concurrent incorrectness separation logic (CISL), which extends ISL to account for bug catching in concurrent programs. Inspired by the work on Views, we design CISL as a parametric framework, which can be instantiated for a number of bug catching scenarios, including race detection, deadlock detection, and memory safety error detection. For each instance, the CISL meta-theory ensures the soundness of incorrectness reasoning for free, thereby guaranteeing that the bugs detected are true positives.
C1 [Raad, Azalea] Imperial Coll London, London, England.
   [Raad, Azalea; Berdine, Josh; O'Hearn, Peter W.] Meta, London, England.
   [Dreyer, Derek] MPI SWS, Saarbrucken, Germany.
   [O'Hearn, Peter W.] UCL, London, England.
C3 Imperial College London; University of London; University College London
RP Raad, A (corresponding author), Imperial Coll London, London, England.; Raad, A (corresponding author), Meta, London, England.
EM azalea.raad@imperial.ac.uk; josh@berdine.net; dreyer@mpi-sws.org;
   p.ohearn@ucl.ac.uk
OI Dreyer, Derek/0000-0002-3884-6867; Berdine, Josh/0000-0002-9691-1348
FU UKRI Future Leaders Fellowship [MR/V024299/1]; European Research Council
   (ERC) under the European Union [683289]
FX We thank the POPL 2022 reviewers and Viktor Vafeiadis for their valuable
   feedback. This research was supported in part by a UKRI Future Leaders
   Fellowship [grant number MR/V024299/1] and a European Research Council
   (ERC) Consolidator Grant for the project lRustBeltz, funded under the
   European Union's Horizon 2020 Framework Programme (grant agreement no.
   683289).
CR Berdine J, 2008, LECT NOTES COMPUT SC, V5123, P399
   Blackshear S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276514
   Brotherston James, 2021, P ASE 36 ACM
   Burckhardt S, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P167
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Distefano D, 2019, COMMUN ACM, V62, P62, DOI 10.1145/3338112
   Gorogiannis N, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290370
   Gotsman A, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P266, DOI 10.1145/1250734.1250765
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Li YZ, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2019), P75, DOI 10.1109/ICSE-Companion.2019.00042
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn P, 2018, LECT NOTES COMPUT SC, V11002, P56, DOI 10.1007/978-3-319-99725-4_5
   O'Hearn PW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371078
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   OHearn Peter W., 2016, ACM SIGLOG NEWS, V3, P47, DOI DOI 10.1145/2984450.2984457
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Parkinson M, 2010, LECT NOTES COMPUT SC, V6217, P169, DOI 10.1007/978-3-642-15057-9_12
   Qadeer S, 2005, LECT NOTES COMPUT SC, V3440, P93
   Raad A, 2020, LECT NOTES COMPUT SC, V12225, P225, DOI 10.1007/978-3-030-53291-8_14
   Raad A, 2015, LECT NOTES COMPUT SC, V9032, P710, DOI 10.1007/978-3-662-46669-8_29
   Raad Azalea, 2022, TECHNICAL APPENDIX
   Sadowski C, 2018, COMMUN ACM, V61, P58, DOI 10.1145/3188720
   Serebryany Konstantin, 2009, Proceedings of the Workshop on Binary Instrumentation and Applications, WBIA'09, P62, DOI DOI 10.1145/1791194.1791203
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
NR 27
TC 8
Z9 8
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 34
DI 10.1145/3498695
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900035
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Bavishi, R
   Lemieux, C
   Sen, K
   Stoica, I
AF Bavishi, Rohan
   Lemieux, Caroline
   Sen, Koushik
   Stoica, Ion
TI Gauss: Program Synthesis by Reasoning over Graphs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; graphs; reasoning; table transformations;
   data-science
AB While input-output examples are a natural form of specification for program synthesis engines, they can be imprecise for domains such as table transformations. In this paper, we investigate how extracting readily-available information about the user intent behind these input-output examples helps speed up synthesis and reduce overfitting. We present Gauss, a synthesis algorithm for table transformations that accepts partial input-output examples, along with user intent graphs. Gauss includes a novel conflict-resolution reasoning algorithm over graphs that enables it to learn from mistakes made during the search and use that knowledge to explore the space of programs even faster. It also ensures the final program is consistent with the user intent specification, reducing overfitting. We implement Gauss for the domain of table transformations (supporting Pandas and R), and compare it to three state-of-the-art synthesizers accepting only input-output examples. We find that it is able to reduce the search space by 56x, 73x and 664x on average, resulting in 7x, 26x and 7x speedups in synthesis times on average, respectively.
C1 [Bavishi, Rohan; Lemieux, Caroline; Sen, Koushik; Stoica, Ion] Univ Calif Berkeley, Berkeley, CA 94720 USA.
C3 University of California System; University of California Berkeley
RP Bavishi, R (corresponding author), Univ Calif Berkeley, Berkeley, CA 94720 USA.
EM rbavishi@cs.berkeley.edu; clemieux@cs.berkeley.edu;
   ksen@cs.berkeley.edu; istoica@cs.berkeley.edu
FU Fujitsu Research of America; NSF [CCF-1900968, CCF-1908870, CNS1817122];
   NSF CISE Expeditions Award [CCF-1730628]
FX We thank Benjamin Brock, Kevin Lauefer, and all our anonymous reviewers
   for their invaluable feedback on this paper. This research was conducted
   at the UC Berkeley RISE Lab and is supported in part by a grant from
   Fujitsu Research of America, NSF grants CCF-1900968, CCF-1908870,
   CNS1817122, and NSF CISE Expeditions Award CCF-1730628. Additionally,
   this research is supported by gifts from Amazon Web Services, Ant Group,
   Ericsson, Facebook, Futurewei, Google, Intel, Microsoft, Nvidia,
   Scotiabank, Splunk and VMware.
CR Balog Matej, 2016, ARXIV161101989
   Bastani Osbert, 2019, ABS191212659 CORR
   Bavishi R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360594
   Bavishi R, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P613, DOI 10.1145/3338906.3338952
   Chen YJ, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P602, DOI 10.1145/3338906.3338951
   Drosos I, 2020, PROCEEDINGS OF THE 2020 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'20)
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Gascón A, 2017, LECT NOTES COMPUT SC, V10427, P86, DOI 10.1007/978-3-319-63390-9_5
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Peleg H, 2020, ACTA INFORM, V57, P165, DOI 10.1007/s00236-019-00340-y
   Peleg H, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1114, DOI 10.1145/3180155.3180189
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Rattenbury Tye, 2017, Principles of Data Wrangling: Practical Techniques for Data Preparation
   Raza M, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P792
   Singh Rishabh, 2011, FSE, P289, DOI DOI 10.1145/2025113.2025153
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Wang CL, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371117
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang X., 2017, P ACM PROGRAM LANG, DOI [10.1145/3158151, DOI 10.1145/3158151]
   Wang XY, 2018, LECT NOTES COMPUT SC, V10981, P407, DOI 10.1007/978-3-319-96145-3_22
   Yu T, 2018, 2018 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2018), P3911
NR 26
TC 5
Z9 5
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 134
DI 10.1145/3485511
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200037
OA gold
DA 2024-07-18
ER

PT J
AU Jia, XD
   Kumar, A
   Tan, G
AF Jia, Xiaodong
   Kumar, Ashish
   Tan, Gang
TI A Derivative-Based Parser Generator for Visibly Pushdown Grammars
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE parser generators; formal verification; derivative-based parsing
ID RECOGNITION
AB In this paper, we present a derivative-based, functional recognizer and parser generator for visibly pushdown grammars. The generated parser accepts ambiguous grammars and produces a parse forest containing all valid parse trees for an input string in linear time. Each parse tree in the forest can then be extracted also in linear time. Besides the parser generator, to allow more flexible forms of the visibly pushdown grammars, we also present a translator that converts a tagged CFG to a visibly pushdown grammar in a sound way, and the parse trees of the tagged CFG are further produced by running the semantic actions embedded in the parse trees of the translated visibly pushdown grammar. The performance of the parser is compared with a popular parsing tool ANTLR and other popular hand-crafted parsers. The correctness of the core parsing algorithm is formally verified in the proof assistant Coq.
C1 [Jia, Xiaodong; Kumar, Ashish; Tan, Gang] Penn State Univ, 201 Old Main, State Coll, PA 16802 USA.
C3 Pennsylvania Commonwealth System of Higher Education (PCSHE);
   Pennsylvania State University
RP Jia, XD (corresponding author), Penn State Univ, 201 Old Main, State Coll, PA 16802 USA.
OI Tan, Gang/0000-0001-6109-6091; Jia, Xiaodong/0000-0003-2493-9111
FU DARPA [HR0011-19-C-0073]
FX The authors would like to thank anonymous reviewers for their insightful
   comments. This work was supported by DARPA research grant
   HR0011-19-C-0073.
CR Alur R, 2009, J ACM, V56, DOI 10.1145/1516512.1516518
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Cocke J., 1969, Programming Languages and Their Compilers: Preliminary Notes
   Deremer F. L, 1969, Practical translators for LR(k) languages
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   Edelmann R, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1036, DOI 10.1145/3385412.3385992
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Henriksen I, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360553
   Jia Xiaodong, 2021, ARXIV210904258CSPL
   Jourdan JH, 2012, LECT NOTES COMPUT SC, V7211, P397, DOI 10.1007/978-3-642-28869-2_20
   Kasami Tadao., 1965, An efficient recognition and syntax analysis algorithm for context-free languages
   Koprowski A, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:18)2011
   Lasser S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P420, DOI 10.1145/3453483.3454053
   Lasser Sam, 2019, LIPICS, V141, DOI [10.4230/LIPICS.ITP.2019.24, DOI 10.4230/LIPICS.ITP.2019.24]
   Might M, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P189
   Morrisett G, 2012, ACM SIGPLAN NOTICES, V47, P395, DOI 10.1145/2345156.2254111
   Owens S, 2009, J FUNCT PROGRAM, V19, P173, DOI 10.1017/S0956796808007090
   Parr T, 2014, ACM SIGPLAN NOTICES, V49, P579, DOI [10.1145/2714064.2660202, 10.1145/2660193.2660202]
   Petsios T, 2017, P IEEE S SECUR PRIV, P615, DOI 10.1109/SP.2017.27
   Ramananandro T, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1465
   YOUNGER DH, 1967, INFORM CONTROL, V10, P189, DOI 10.1016/S0019-9958(67)80007-X
NR 21
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 151
DI 10.1145/3485528
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200054
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Smaragdakis, Y
   Grech, N
   Lagouvardos, S
   Triantafyllou, K
   Tsatiris, I
AF Smaragdakis, Yannis
   Grech, Neville
   Lagouvardos, Sifis
   Triantafyllou, Konstantinos
   Tsatiris, Ilias
TI Symbolic Value-Flow Static Analysis: Deep, Precise, Complete Modeling of
   Ethereum Smart Contracts
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Analysis; Smart Contracts; Security; Ethereum; Blockchain
ID CHECKING; VERIFICATION
AB We present a static analysis approach that combines concrete values and symbolic expressions. This symbolic value-flow ("symvalic") analysis models program behavior with high precision, e.g., full path sensitivity. To achieve deep modeling of program semantics, the analysis relies on a symbiotic relationship between a traditional static analysis fixpoint computation and a symbolic solver: the solver does not merely receive a complex "path condition" to solve, but is instead invoked repeatedly (often tens or hundreds of thousands of times), in close cooperation with the flow computation of the analysis.
   The result of the symvalic analysis architecture is a static modeling of program behavior that is much more complete than symbolic execution, much more precise than conventional static analysis, and domain-agnostic: no special-purpose definition of anti-patterns is necessary in order to compute violations of safety conditions with high precision.
   We apply the analysis to the domain of Ethereum smart contracts. This domain represents a fundamental challenge for program analysis approaches: despite numerous publications, research work has not been effective at uncovering vulnerabilities of high real-world value.
   In systematic comparison of symvalic analysis with past tools, we find significantly increased completeness (shown as 83-96% statement coverage and more true error reports) combined with much higher precision, as measured by rate of true positive reports. In terms of real-world impact, since the beginning of 2021, the analysis has resulted in the discovery and disclosure of several critical vulnerabilities, over funds in the many millions of dollars. Six separate bug bounties totaling over $350K have been awarded for these disclosures.
C1 [Smaragdakis, Yannis; Lagouvardos, Sifis; Triantafyllou, Konstantinos; Tsatiris, Ilias] Univ Athens, Athens, Greece.
   [Grech, Neville] Univ Malta, Msida, Malta.
C3 National & Kapodistrian University of Athens; University of Malta
RP Smaragdakis, Y (corresponding author), Univ Athens, Athens, Greece.
EM smaragd@di.uoa.gr; me@nevillegrech.com; sifis.lag@di.uoa.gr;
   kotriant@di.uoa.gr; i.tsatiris@di.uoa.gr
OI Lagouvardos, Sifis/0000-0002-6233-1548
FU Hellenic Foundation for Research and Innovation (HFRI project
   DEAN-BLOCK)
FX We gratefully acknowledge funding by the Hellenic Foundation for
   Research and Innovation (HFRI project DEAN-BLOCK).
CR ABADI M, 1993, ACM T PROGR LANG SYS, V15, P73, DOI 10.1145/151646.151649
   Albert E, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428277
   Albert Elvira., INT C TOOLS ALG CONS
   Albert Elvira, COMPUTER AIDED VERIF
   Anand S, 2008, LECT NOTES COMPUT SC, V4963, P367, DOI 10.1007/978-3-540-78800-3_28
   Baldoni R, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3182657
   Bembenek Aaron, 2020, ABS200908361 CORR
   Bodden E, 2013, ACM SIGPLAN NOTICES, V48, P355, DOI 10.1145/2499370.2491976
   Böhme M, 2019, IEEE T SOFTWARE ENG, V45, P489, DOI 10.1109/TSE.2017.2785841
   Brent L, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P454, DOI 10.1145/3385412.3385990
   Brent Lexi, 2018, ARXIV180903981
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Chen T, 2021, IEEE T EMERG TOP COM, V9, P1433, DOI 10.1109/TETC.2020.2979019
   Chipounov Vitaly, 2011, P ACM PROGRAM LAN, V46, DOI [10.1145/1961296, DOI 10.1145/1961296]
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   CLARKE EM, 1994, ACM T PROGR LANG SYS, V16, P1512, DOI 10.1145/186025.186051
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Czech Mike, 2016, SOFTWARE ENG 2016, P17
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dedaub, 2021, YIELD SKIMM FORC BAD
   Dedaub, 2021, ETHEREUM PAWN STARS
   Dedaub, 2021, KILLING BAD ARBITRAG
   Dedaub, 2021, LOOK MA NO SOURC HAC
   Dudina IA, 2017, PROGRAM COMPUT SOFT+, V43, P277, DOI 10.1134/S0361768817050024
   Durieux T, 2020, PROC INT CONF SOFTW, P530, DOI 10.1145/3377811.3380364
   Emerson EA, 1996, FORM METHOD SYST DES, V9, P105, DOI 10.1007/BF00625970
   Feist J, 2019, 2019 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB 2019), P8, DOI 10.1109/WETSEB.2019.00008
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Godefroid P., 2007, SIGPLAN Notices, V42, P47, DOI [10.1145/1190216.1190226, 10.1145/1190215.1190226]
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Godefroid P, 2012, COMMUN ACM, V55, P40, DOI 10.1145/2093548.2093564
   Godefroid Patrice, 2008, Network and Distributed Systems Security
   Grech N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276486
   Grech N, 2019, PROC INT CONF SOFTW, P1176, DOI 10.1109/ICSE.2019.00120
   Grieco Gustavo, 2020, P 29 ACM SIGSOFT INT, DOI [DOI 10.1145/3395363.3404366, 10.1145/3395363.3404366]
   Grossman S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158136
   Hajdu A, 2020, LECT NOTES COMPUT SC, V12031, P161, DOI 10.1007/978-3-030-41600-3_11
   He JX, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P531, DOI 10.1145/3319535.3363230
   Hildenbrandt E, 2018, P IEEE COMPUT SECUR, P204, DOI 10.1109/CSF.2018.00022
   Honig J.J, 2020, INCREMENTAL SYMBOLIC
   IP CN, 1993, IFIP TRANS A, V32, P97
   Jhala R, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592438
   Jiang B, 2018, IEEE INT CONF AUTOM, P259, DOI 10.1145/3238147.3238177
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Ko Y, 2017, LECT NOTES COMPUT SC, V10695, P148, DOI 10.1007/978-3-319-71237-6_8
   Kolluri A, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P363, DOI 10.1145/3293882.3330560
   Konstantopoulos Georgios., 2021, INFORMAL PUBLIC COMM
   Krupp J, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P1317
   Lagouvardos S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428258
   Li Y, 2013, ACM SIGPLAN NOTICES, V48, P19, DOI [10.1145/2509136.2509553, 10.1145/2544173.2509553]
   Livshits Benjamin, 2018, AUTOMATED TECHNOLOGY
   Luu L, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P254, DOI 10.1145/2976749.2978309
   Meyer B, 2008, COMPUTER, V41, P99, DOI 10.1109/MC.2008.306
   Michales Jonah., 2021, INSIDE WAR ROOM SAVE
   Mossberg M, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P1186, DOI 10.1109/ASE.2019.00133
   Muller Anders, 2018, STATIC PROGRAM ANAL
   Nguyen Tai D., 2020, 2020 IEEE/ACM 42nd International Conference on Software Engineering (ICSE), P778, DOI 10.1145/3377811.3380334
   Nielsen B.B., 2020, 34th European Conference on Object-Oriented Programming (ECOOP 2020), volume 166 of Leibniz International Proceedings in Informatics (LIPIcs), p16:1, DOI DOI 10.4230/LIPICS.ECOOP.2020.16
   Nielson Flemming, 1999, P 34 ANN COMPUTER SE
   Padhye Rohan., 2013, P 2 ACM SIGPLAN INT, P31
   Park S., 2012, P ACM SIGSOFT 20 INT, P35
   Perez Daniel., 30 USENIX SEC S USEN
   Permenev A, 2020, P IEEE S SECUR PRIV, P1661, DOI 10.1109/SP40000.2020.00024
   Primitive Finance, 2021, PRIMITIVEFI POSTMORT
   Rival X, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275501
   Schneidewind Clara, 2020, ACM SIGSAC C COMPUTE, DOI 10.1145/3372297.3417250
   Sen K., 2005, P 10 EUR SOFTW ENG C, V30, P263, DOI DOI 10.1145/1081706.1081750
   Sen K, 2006, LECT NOTES COMPUT SC, V4144, P419
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Smaragdakis Yannis, **DATA OBJECT**, DOI 10.5281/zenodo.5494813
   Stein B, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360566
   The Certora team, 2017, CERT PROV
   Tikhomirov S, 2018, 2018 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB), P9, DOI 10.1145/3194113.3194115
   Tillmann N, 2008, LECT NOTES COMPUT SC, V4966, P134
   Tillmann N, 2006, IEEE SOFTWARE, V23, P38, DOI 10.1109/MS.2006.117
   Torres CF, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1591
   Torres CF, 2018, 34TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2018), P664, DOI 10.1145/3274694.3274737
   Trail of Bits, 2020, TWEET SYMB EX COV
   Trail of Bits, 2020, TRAIL BITS COMM AV C
   Tsankov P, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P67, DOI 10.1145/3243734.3243780
   Various, 2017, LIBFUZZER S LIB COVE
   Various, 2020, SMARTBUGS FRAMEWORK
   Wood G., 2014, Ethereum project yellow paper, V151, P1
   Wüstholz V, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P1398, DOI 10.1145/3368089.3417064
   Wuestholz V, 2020, PROC INT CONF SOFTW, P789, DOI 10.1145/3377811.3380388
NR 85
TC 6
Z9 6
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 163
DI 10.1145/3485540
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200065
OA gold
DA 2024-07-18
ER

PT J
AU Barrière, A
   Blazy, S
   Flückiger, O
   Pichardie, D
   Vitek, J
AF Barriere, Aurele
   Blazy, Sandrine
   Fluckiger, Olivier
   Pichardie, David
   Vitek, Jan
TI Formally Verified Speculation and Deoptimization in a JIT Compiler
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE verified compilation; just-in-time compilation; CompCert compiler
AB Just-in-time compilers for dynamic languages routinely generate code under assumptions that may be invalidated at run-time, this allows for specialization of program code to the common case in order to avoid unnecessary overheads due to uncommon cases. This form of software speculation requires support for deoptimization when some of the assumptions fail to hold. This paper presents a model just-in-time compiler with an intermediate representation that explicits the synchronization points used for deoptimization and the assumptions made by the compiler's speculation. We also present several common compiler optimizations that can leverage speculation to generate improved code. The optimizations are proved correct with the help of a proof assistant. While our work stops short of proving native code generation, we demonstrate how one could use the verified optimization to obtain significant speed ups in an end-to-end setting.
C1 [Barriere, Aurele; Blazy, Sandrine; Pichardie, David] Univ Rennes, IRISA, CNRS, INRIA, Rennes, France.
   [Fluckiger, Olivier; Vitek, Jan] Northeastern Univ, Boston, MA 02115 USA.
   [Vitek, Jan] Czech Tech Univ, Prague, Czech Republic.
C3 Universite de Rennes; Centre National de la Recherche Scientifique
   (CNRS); Inria; Northeastern University; Czech Technical University
   Prague
RP Barrière, A (corresponding author), Univ Rennes, IRISA, CNRS, INRIA, Rennes, France.
EM aurele.barriere@irisa.fr; sandrine.blazy@irisa.fr; o@o1o.ch;
   david.pichardie@ens-rennes.fr; j.vitek@neu.edu
RI Vitek, Jan/J-9051-2014
OI Blazy, Sandrine/0000-0002-0189-0223; Barriere,
   Aurele/0000-0002-7297-2170; Fluckiger, Olivier/0000-0003-0512-9607
FU European Research Council (ERC); European Union's Horizon 2020 Framework
   Programme [772568]; National Science Foundation [1544542, 1618732];
   Czech Ministry of Education from the Czech Operational Programme
   Research, Development, and Education
   [CZ.02.1.01/0.0/0.0/15_003/0000421]; European Research Council [695412];
   European Research Council (ERC) [695412, 772568] Funding Source:
   European Research Council (ERC); Direct For Computer & Info Scie &
   Enginr; Division of Computing and Communication Foundations [1544542]
   Funding Source: National Science Foundation; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1618732] Funding Source: National Science Foundation
FX This work supported by a European Research Council (ERC) Consolidator
   Grant for the project VESTA, funded under the European Union's Horizon
   2020 Framework Programme (grant agreement 772568), the National Science
   Foundation awards 1544542 and 1618732, the Czech Ministry of Education
   from the Czech Operational Programme Research, Development, and
   Education, under agreement CZ.02.1.01/0.0/0.0/15_003/0000421, and the
   European Research Council under grant agreement 695412.
CR Aycock J, 2003, ACM COMPUT SURV, V35, P97, DOI 10.1145/857076.857077
   Béra C, 2016, J OBJECT TECHNOL, V15, DOI 10.5381/jot.2016.15.2.a1
   Burke M. G., 1999, Proceedings of the ACM 1999 Java Grande Conference, P129, DOI 10.1145/304065.304113
   D'Elia DC, 2016, INT SYM CODE GENER, P250, DOI 10.1145/2854038.2854061
   Flückiger O, 2019, PROCEEDINGS OF THE 15TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES (DLS '19), P55, DOI 10.1145/3359619.3359744
   Flückiger O, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158137
   Gal A, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P465, DOI 10.1145/1542476.1542528
   Guo SY, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P563, DOI 10.1145/1926385.1926450
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   HOLZLE U, 1992, SIGPLAN NOTICES, V27, P32, DOI 10.1145/143103.143114
   HOLZLE U, 1994, SIGPLAN NOTICES, V29, P229, DOI 10.1145/191081.191116
   Lameed N, 2013, ACM SIGPLAN NOTICES, V48, P143, DOI 10.1145/2517326.2451541
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Myreen MO, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P107, DOI 10.1145/1706299.1706313
   Paleczny M., 2001, JAVA VIRTUAL MACHINE
   Project Chromium, 2020, V8 JAVASCRIPT ENG
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Song Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371091
   Stadler L., 2013, P 7 ACM WORKSH VIRT, P1, DOI [10.1145/2542142.2542143, DOI 10.1145/2542142.2542143]
NR 20
TC 7
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 46
DI 10.1145/3434327
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100046
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Cockx, J
   Tabareau, N
   Winterhalter, T
AF Cockx, Jesper
   Tabareau, Nicolas
   Winterhalter, Theo
TI The Taming of the Rew A Type Theory with Computational Assumptions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type theory; dependent types; rewriting theory; confluence; termination
AB Dependently typed programming languages and proof assistants such as Agda and Coq rely on computation to automatically simplify expressions during type checking. To overcome the lack of certain programming primitives or logical principles in those systems, it is common to appeal to axioms to postulate their existence. However, one can only postulate the bare existence of an axiom, not its computational behaviour. Instead, users are forced to postulate equality proofs and appeal to them explicitly to simplify expressions, making axioms dramatically more complicated to work with than built-in primitives. On the other hand, the equality reflection rule from extensional type theory solves these problems by collapsing computation and equality, at the cost of having no practical type checking algorithm.
   This paper introduces Rewriting Type Theory (RTT), a type theory where it is possible to add computational assumptions in the form of rewrite rules. Rewrite rules go beyond the computational capabilities of intensional type theory, but in contrast to extensional type theory, they are applied automatically so type checking does not require input from the user. To ensure type soundness of RTTDas well as effective type checkingDwe provide a framework where confluence of user-defined rewrite rules can be checked modularly and automatically, and where adding new rewrite rules is guaranteed to preserve subject reduction. The properties of RTT have been formally verified using the MetaCoq framework and an implementation of rewrite rules is already available in the Agda proof assistant.
C1 [Cockx, Jesper] Delft Univ Technol, Delft, Netherlands.
   [Tabareau, Nicolas; Winterhalter, Theo] INRIA, Gallinette Project Team, Nantes, France.
C3 Delft University of Technology; Inria
RP Cockx, J (corresponding author), Delft Univ Technol, Delft, Netherlands.
OI Winterhalter, Theo/0000-0002-9881-3696; tabareau,
   nicolas/0000-0003-3366-2273
CR Abel A, 2011, LECT NOTES COMPUT SC, V6690, P10, DOI 10.1007/978-3-642-21691-6_5
   Abel Andreas, 2018, P ACM PROGR LANG JA, V2
   Agda Development Team, 2020, AGDA 2 6 1 DOC
   Allais Guillaume, 2013, P 2013 ACM SIGPLAN W, P13, DOI [10.1145/2502409.2502411, DOI 10.1145/2502409.2502411]
   Appel C, 2010, LEIBNIZ INT PR INFOR, V6, P17, DOI 10.4230/LIPIcs.RTA.2010.17
   Assaf A, 2015, ELECTRON PROC THEOR, P74, DOI 10.4204/EPTCS.186.8
   Barbanera Franco, 1997, J FUNCT PROGRAM, V7
   Barendregt Henk, 1984, STUDIES LOGIC FDN MA, V103, DOI [10.1016/B978-0-444-87508-2.50001-0, DOI 10.1016/B978-0-444-87508-2.50001-0]
   Barras B, 2011, IEEE S LOG, P143, DOI 10.1109/LICS.2011.37
   Berger Ulrich, 2019, LEIBNIZ INT P INFORM, V1, P22
   Blanqui F, 2005, MATH STRUCT COMP SCI, V15, P37, DOI 10.1017/S0960129504004426
   Blanqui F, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000072
   Blanqui Frederic, 2020, LIPICS, V13, P14, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Blanqui Frederic, 2004, P LECT NOTES COMPUTE, V3091, p24S39
   Blanqui Frederic, 2008, P LECT NOTES COMPUTE, V5213, p1S14, DOI [10.1007/978-3-540-87531, DOI 10.1007/978-3-540-87531]
   Boespflug Mathieu, 2012, 2 INT WORKSH PROOF E, V878, p28S43
   Chrzaszcz Jacek, 2007, LECT NOTES COMPUTER, V4600, DOI [10.1007/978-3-540-73147, DOI 10.1007/978-3-540-73147]
   Cockx Jesper, 2020, TYPES C
   Coq Development Team, 2016, COQ PROOF ASS REF MA
   Cousineau Denis, 2007, P LECT NOTES COMPUTE, V4583, DOI DOI 10.1007/978-3-540-73228-0_9
   Felgenhauer Bertram, 2013, LIPICS, V21, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Ferey Gaspard, 2019, CONFLUENCE UN TYPED
   Genestier Guillaume, 2019, HOR 2019
   Gilbert Gaetan, 2019, P ACM PROGR LANG JAN, V3, p1S28, DOI [10.1145/329031610.1145/3290316, DOI 10.1145/329031610.1145/3290316]
   Hofmann Martin, 1993, NONSTRICTLY POSITIVE
   Jouannaud J.-P., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P402, DOI 10.1109/LICS.1999.782635
   Jouannaud J.-P., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P350, DOI 10.1109/LICS.1991.151659
   Jouannaud Jean-Pierre, 2015, LIPICS, V38, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Jouannaud Jean-Pierre, 2017, LPAR 21
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   Liu J., 2016, THESIS U PARIS SACLA
   Martin-Lof P., 1975, STUDIES LOGIC FDN MA, V80, P73
   Paulin-Mohring Christine, 2015, STUDIES LOGIC MATH L, V55
   Pedrot Pierre-Marie, 2019, P ACM PROGR LANG 3 I
   Pedrot Pierre-Marie, 2018, LECT NOTES COMPUTER, V10801, P245, DOI [10.1007/978-3-319-89884-1_9, DOI 10.1007/978-3-319-89884-1_9]
   Saillard Ronan, 2015, THESIS MINES PARIS T
   Smolka Gert, 2015, CONFLUENCE NORMALIZA
   Sozeau M, 2020, P ACM PROGRAM LANG, V0004
   Sozeau M, 2020, J AUTOM REASONING, V64, P947, DOI 10.1007/s10817-019-09540-0
   Stehr Mark-Oliver, 2005, FUND INFORM, V68
   Stehr MO, 2005, FUND INFORM, V68, P131
   Strub Pierre-Yves, 2010, P LECT NOTES COMPUTE, V6247, DOI [10.1007/978-3-642-15205-4_40, DOI 10.1007/978-3-642-15205-4_40]
   TAKAHASHI M, 1995, INFORM COMPUT, V118, P120, DOI 10.1006/inco.1995.1057
   Tannen Val, 1988, P 3 ANN S LOG COMP S, p82S90, DOI [10.1109/LICS.1988.5103, DOI 10.1109/LICS.1988.5103]
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   van Oostrom V., 1994, PhD thesis
   van Oostrom Vincent, 1995, PROC 2 INT WORKSHOP, V1074, P185, DOI DOI 10.1007/3-540-61254-8_26
   VANOOSTROM V, 1994, THEOR COMPUT SCI, V126, P259, DOI 10.1016/0304-3975(92)00023-K
   Walukiewicz-Chrzaszcz D, 2003, J FUNCT PROGRAM, V13, P339, DOI 10.1017/S0956796802004641
   Walukiewicz-Chrzaszcz Daria, 2006, P LECT NOTES COMPUTE, V4130, DOI [10.1007/11814771_, DOI 10.1007/11814771]
   2003, CAMBRIDGE TRACTS THE, V55
NR 51
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 60
DI 10.1145/3434341
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100060
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Brachthäuser, JI
   Schuster, P
   Ostermann, K
AF Brachthaeuser, Jonathan Immanuel
   Schuster, Philipp
   Ostermann, Klaus
TI Effects as Capabilities: Effect Handlers and Lightweight Effect
   Polymorphism
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE effect handlers; algebraic effects; effect polymorphism
AB Effect handlers have recently gained popularity amongst programming language researchers. Existing type-and effect systems for effect handlers are often complicated and potentially hinder a wide-spread adoption. We present the language Effekt with the goal to close the gap between research languages with effect handlers and languages for working programmers. The design of Effekt revolves around a different view of effects and effect types. Traditionally, effect types express which side effects a computation might have. In Effekt, effect types express which capabilities a computation requires from its context. While this new point in the design space of effect systems impedes reasoning about purity, we demonstrate that it simplifies the treatment of effect polymorphism and the related issues of effect parametricity and effect encapsulation. To guarantee effect safety, we separate functions from values and treat all functions as second-class. We define the semantics of Effekt as a translation to System E, a calculus in explicit capability-passing style.
C1 [Brachthaeuser, Jonathan Immanuel] Ecole Polytech Fed Lausanne, IC Lamp, INR 319, Stn 14, CH-1015 Lausanne, Switzerland.
   [Schuster, Philipp; Ostermann, Klaus] Univ Tubingen, Sand 13, D-72076 Tubingen, Germany.
C3 Swiss Federal Institutes of Technology Domain; Ecole Polytechnique
   Federale de Lausanne; Eberhard Karls University of Tubingen
RP Brachthäuser, JI (corresponding author), Ecole Polytech Fed Lausanne, IC Lamp, INR 319, Stn 14, CH-1015 Lausanne, Switzerland.
EM jonathan.brachthauser@epfl.ch; philipp.schuster@uni-tuebingen.de;
   klaus.ostermann@uni-tuebingen.de
OI Brachthauser, Jonathan Immanuel/0000-0001-9128-0391
FU DFG [282458149]
FX We are very grateful for the valuable feedback by the anonymous
   reviewers. This work was supported by DFG project 282458149.
CR [Anonymous], 1992, Handbook of Logic in Computer Science
   Bauer Andrej, 2013, Algebra and Coalgebra in Computer Science. 5th International Conference, CALCO 2013. Proceedings: LNCS 8089, P1, DOI 10.1007/978-3-642-40206-7_1
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Benton N, 2012, J AUTOM REASONING, V49, P141, DOI 10.1007/s10817-011-9219-0
   Biernacki D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290319
   Biernacki D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371116
   Biernacki Dariusz, 2017, P ACM PROGR LANG
   Bingham E, 2019, J MACH LEARN RES, V20
   Brachthäuser JI, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276481
   Brachthäuser JI, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000027
   Brachthäuser JI, 2017, SCALA'17: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P67, DOI 10.1145/3136000.3136007
   Brachthauser Jonathan Immanuel, 2019, MSRTR20197
   Brachthauser Jonathan Immanuel, EXTENDED TECHNICAL R
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Convent L, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000039
   Danvy O., 1989, 8912 DIKU U COP
   Dolan S., 2015, OCAML WORKSHOP
   Dolan Stephen, 2014, OCAML WORKSH
   Dolan Stephen, 2017, P S TRENDS FUNCT PRO, DOI DOI 10.1007/978-3-319-89719-6_6
   Dyvbig RK, 2007, J FUNCT PROGRAM, V17, P687, DOI 10.1017/S0956796807006259
   Eisenberg RA, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P94, DOI 10.1145/3242744.3242753
   Felleisen M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P180, DOI 10.1145/73560.73576
   Gunter C. A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P12, DOI 10.1145/224164.224173
   Hillerstrom Daniel, 2017, Formal Structures for Computation and Deduction (LIPIcs, V84
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kiselyov O, 2006, ACM SIGPLAN NOTICES, V41, P26, DOI 10.1145/1160074.1159808
   Leijen D., 2005, P 2005 S TRENDS FUNC, P297
   Leijen D, 2018, PROCEEDINGS OF THE 3RD ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE '18), P51, DOI 10.1145/3240719.3241789
   Leijen D, 2017, PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE' 17), P16, DOI 10.1145/3122975.3122977
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Leijen Daan, 2016, MSRTR201629
   Leijen Daan, 2018, MSRTR201810
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Marsik J., 2016, FORMAL GRAMMAR, P257
   Mokhov Andrey, 2018, P ACM PROGR LANG, DOI [10.1145/3236774, DOI 10.1145/3236774]
   Moore Dave, 2018, INT C PROB PROGR PRO
   Oppen D. C., 1980, ACM Transactions on Programming Languages and Systems, V2, P465, DOI 10.1145/357114.357115
   Osvald L, 2016, ACM SIGPLAN NOTICES, V51, P234, DOI 10.1145/3022671.2984009
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Phan Dung, 2019, ARXIV PREPRINT ARXIV
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Rytz L, 2012, LECT NOTES COMPUT SC, V7313, P258, DOI 10.1007/978-3-642-31057-7_13
   Schuster P, 2018, PROCEEDINGS OF THE 3RD ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE '18), P14, DOI 10.1145/3240719.3241788
   Schuster Philipp, 2020, COMPILING EFFECT HAN, V4, DOI [10.1145/3408975, DOI 10.1145/3408975]
   SITARAM D, 1993, SIGPLAN NOTICES, V28, P147, DOI 10.1145/173262.155104
   Swierstra SD, 2009, J FUNCT PROGRAM, V19, P1, DOI 10.1017/S0956796808006990
   Wang Fei, 2019, P ACM PROGR LANG
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Xie Ningning, 2020, EFFECT HANDLERS EVID, DOI DOI 10.1145/3408981
   Yallop J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110273
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
   Zhang YZ, 2016, ACM SIGPLAN NOTICES, V51, P281, DOI [10.1145/2908080.2908086, 10.1145/2980983.2908086]
NR 57
TC 25
Z9 26
U1 0
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 126
DI 10.1145/3428194
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900003
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Devore-McDonald, B
   Berger, ED
AF Devore-McDonald, Breanna
   Berger, Emery D.
TI MOSSAD: Defeating Software Plagiarism Detection
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE cryptography and security; computers and society; neural and
   evolutionary computing; programming languages
AB Automatic software plagiarism detection tools are widely used in educational settings to ensure that submitted work was not copied. These tools have grown in use together with the rise in enrollments in computer science programs and the widespread availability of code on-line. Educators rely on the robustness of plagiarism detection tools; the working assumption is that the effort required to evade detection is as high as that required to actually do the assigned work.
   This paper shows this is not the case. It presents an entirely automatic program transformation approach, MOSSAD, that defeats popular software plagiarism detection tools. MOSSAD comprises a framework that couples techniques inspired by genetic programming with domain-specific knowledge to effectively undermine plagiarism detectors. MOSSAD is effective at defeating four plagiarism detectors, including Moss and JPlag. MOSSAD is both fast and effective: it can, in minutes, generate modified versions of programs that are likely to escape detection. More insidiously, because of its non-deterministic approach, MOSSAD can, from a single program, generate dozens of variants, which are classified as no more suspicious than legitimate assignments. A detailed study of MOSSAD across a corpus of real student assignments demonstrates its efficacy at evading detection. A user study shows that graduate student assistants consistently rate MOSSAD-generated code as just as readable as authentic student code. This work motivates the need for both research on more robust plagiarism detection tools and greater integration of naturally plagiarism-resistant methodologies like code review into computer science education.
C1 [Devore-McDonald, Breanna; Berger, Emery D.] Univ Massachusetts, CICS, 140 Governors Dr, Amherst, MA 01002 USA.
C3 University of Massachusetts System; University of Massachusetts Amherst
RP Devore-McDonald, B (corresponding author), Univ Massachusetts, CICS, 140 Governors Dr, Amherst, MA 01002 USA.
EM bdevorem@cs.umass.edu; emery@cs.umass.edu
FU National Science Foundation [CCF-1439008, CCF-1617892]
FX We thank Don Porter for providing our anonymized C code datasets. We
   also thank Neena Thota for providing time and space in her classroom for
   our case study, and her students for volunteering to be a part of the
   case study. Finally, we thank Alex Aiken for his thoughtful comments and
   for providing us with a research installation of Moss. This material is
   based upon work supported by the National Science Foundation under
   Grants No. CCF-1439008 and CCF-1617892.
CR Aiken Alex, 2018, COMMUNICATION
   Aiken Alex, 2020, PLAGIARISM DETECTION
   Baron Ethan, 2017, BILICONBEAT MAY
   Bidgood Jess, 2017, The New York Times
   Bowyer KW, 1999, FIE 99 FRONT ED 29 A
   Camp Tracy, 2017, ACM Inroads, V8, P44, DOI 10.1145/3084362
   Chae DK, 2013, PROCEEDINGS OF THE 22ND ACM INTERNATIONAL CONFERENCE ON INFORMATION & KNOWLEDGE MANAGEMENT (CIKM'13), P1577, DOI 10.1145/2505515.2507848
   Chen X, 2004, IEEE T INFORM THEORY, V50, P1545, DOI 10.1109/TIT.2004.830793
   Coehoorn Joel, 2019, DO I ASK ANSWER HOME
   Collberg Christian, 2020, TIGRESS C OBFUSCATOR
   EAB, 2017, EAB DAILY BRIEFI AUG
   Gradescope, 2019, GRAD SIGCSE 2019
   Jhi YC, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P756, DOI 10.1145/1985793.1985899
   Joy M, 1999, IEEE T EDUC, V42, P129, DOI 10.1109/13.762946
   Joy Mike, 2020, COMMUNICATION
   Jue Kylie, 2014, STANFORD DAILY JUN
   Kundu S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P327, DOI 10.1145/1542476.1542513
   Le Goues C, 2012, IEEE T SOFTWARE ENG, V38, P54, DOI 10.1109/TSE.2011.104
   Liu Chao, 2006, Proc. 12th ACMSIGKDD Int'l Con. on Knowledge Discovery and Data Mining (KDD 06), P872, DOI DOI 10.1145/1150402.1150522
   Lopes CV, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133908
   Luo LN, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P389, DOI 10.1145/2635868.2635900
   McMillan Robert, 2015, Wired
   Murray William Hugh, 2010, UB CHEAT COMP SCI
   National Academies of Sciences Engineering and Medicine, 2018, Assessing and Responding to the Growth of Computer Science Undergraduate Enrollments, DOI DOI 10.17226/24926
   Nichols L, 2019, PROCEEDINGS OF THE 2019 ACM CONFERENCE ON INNOVATION AND TECHNOLOGY IN COMPUTER SCIENCE EDUCATION (ITICSE '19), P555, DOI 10.1145/3304221.3319789
   Picheta Dominik, 2020, OBFUSCATOR
   Picheta Dominik, 2020, CODE OBFUSCATION 200
   Prechelt L, 2002, J UNIVERS COMPUT SCI, V8, P1016
   Rosen B. K., 1972, 13 ANN S SWITCH AUT, P7, DOI [10.1109/SWAT.1972.18, DOI 10.1109/SWAT.1972.18]
   Roychoudhury A, 2000, LECT NOTES COMPUT SC, V1785, P172
   Sajnani Hitesh, 2015, SOURCERERCC SCALING
   Schleimer Saul, 2003, P 2003 ACM SIGMOD IN, P76, DOI [10.1145/872757.872770, DOI 10.1145/872757.872770]
   Singh A, 2017, PROCEEDINGS OF THE FOURTH (2017) ACM CONFERENCE ON LEARNING @ SCALE (L@S'17), P81, DOI 10.1145/3051457.3051466
   SMITH TF, 1981, J MOL BIOL, V147, P195, DOI 10.1016/0022-2836(81)90087-5
   Son JW, 2006, LECT NOTES ARTIF INT, V4099, P1000
   stunnix.com, 2020, C C OBF
   Wise M. J., 1996, SIGCSE Bulletin, V28, P130, DOI 10.1145/236462.236525
   Yan L, 2018, SIGCSE'18: PROCEEDINGS OF THE 49TH ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P110, DOI 10.1145/3159450.3159490
   2018, FORBES
NR 39
TC 9
Z9 10
U1 0
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 138
DI 10.1145/3428206
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900015
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Flanagan, C
   Freund, SN
AF Flanagan, Cormac
   Freund, Stephen N.
TI The Anchor Verifier for Blocking and Non-blocking Concurrent Software
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrent program verification; reduction; synchronization
ID MODULAR VERIFICATION; REDUCTION; PROGRAMS
AB Verifying the correctness of concurrent software with subtle synchronization is notoriously challenging. We present the ANCHOR verifier, which is based on a new formalism for specifying synchronization disciplines that describes both (1) what memory accesses are permitted, and (2) how each permitted access commutes with concurrent operations of other threads (to facilitate reduction proofs). ANCHOR supports the verification of both lock-based blocking and cas-based non-blocking algorithms. Experiments on a variety concurrent data structures and algorithms show that ANCHOR significantly reduces the burden of concurrent verification.
C1 [Flanagan, Cormac] Univ Calif Santa Cruz, Santa Cruz, CA 95064 USA.
   [Freund, Stephen N.] Williams Coll, Williamstown, MA 01267 USA.
C3 University of California System; University of California Santa Cruz;
   Williams College
RP Flanagan, C (corresponding author), Univ Calif Santa Cruz, Santa Cruz, CA 95064 USA.
FU National Science Foundation [1812951, 1813133]; Direct For Computer &
   Info Scie & Enginr; Division of Computing and Communication Foundations
   [1812951] Funding Source: National Science Foundation; Division of
   Computing and Communication Foundations; Direct For Computer & Info Scie
   & Enginr [1813133] Funding Source: National Science Foundation
FX We thank James Wilcox, Shaz Qadeer, and the anonymous reviewers for
   feedback on earlier drafts of this paper, and also Jay Lorch for his
   assistance with Armada. This paper is based upon work supported by the
   National Science Foundation under Grants 1812951 and 1813133.
CR [Anonymous], 2001, DISC
   BACK RJR, 1989, LECT NOTES COMPUT SC, V366, P199
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Bayer R., 1977, Acta Informatica, V9, P1, DOI 10.1007/BF00263762
   Blom Stefan, 2017, Integrated Formal Methods. 13th International Conference, IFM 2017. Proceedings: LNCS 10510, P102, DOI 10.1007/978-3-319-66845-1_7
   Brookes S, 2007, THEOR COMPUT SCI, V375, P227, DOI 10.1016/j.tcs.2006.12.034
   Chajed Tej, 2018, USENIX S OPERATING S
   Chamillard A. T., 1996, 96084 U MASS AMH DEP
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Cohen E, 1998, LECT NOTES COMPUT SC, V1466, P317, DOI 10.1007/BFb0055631
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   Coq, 2019, **NON-TRADITIONAL**
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Doeppner Jr Thomas W., 1977, POPL 155S169
   Elmas T., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P507, DOI 10.1145/1810295.1810454
   Farzan Azadeh, 2020, P ACM PROGR LANG
   Feng XY, 2009, ACM SIGPLAN NOTICES, V44, P315, DOI 10.1145/1594834.1480922
   Flanagan C, 2005, THEOR COMPUT SCI, V338, P153, DOI 10.1016/j.tcs.2004.12.006
   Flanagan C, 2002, LECT NOTES COMPUT SC, V2305, P262
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Flanagan C, 2010, COMMUN ACM, V53, P93, DOI 10.1145/1839676.1839699
   Flanagan C, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1377492.1377495
   Flanagan Cormac, 2020, SOFTWARE ARTIFACT AR, DOI [10.5281/zenodo.4032624, DOI 10.5281/ZENODO.4032624]
   Flanagan Cormac, 2018, VERIFIEDFT CIVL IMPL
   Freund StephenN., 2004, Journal of Object Technology, V3, P81
   Godefroid P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P174, DOI 10.1145/263699.263717
   GODEFROID P, 1991, SIXTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P406
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Hawblitzel C, 2015, LECT NOTES COMPUT SC, V9207, P449, DOI 10.1007/978-3-319-21668-3_26
   Heller S, 2006, LECT NOTES COMPUT SC, V3974, P3
   Herlihy M., 2008, ART MULTIPROCESSOR P
   HOARE CAR, 1974, COMMUN ACM, V17, P549, DOI 10.1145/355620.361161
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   LAMPORT L, 1983, ACM T PROGR LANG SYS, V5, P190, DOI 10.1145/69624.357207
   Lamport Leslie, 1989, 44 SYSTM RES CTR
   Le Goues C, 2011, LECT NOTES COMPUT SC, V7041, P407, DOI 10.1007/978-3-642-24690-6_28
   Lea Doug, 2019, CONCURRENCY JSR 166
   Leino KRM, 2009, LECT NOTES COMPUT SC, V5705, P195, DOI 10.1007/978-3-642-03829-7_7
   LibLFDS, 2019, LFDS 7 11 QUEUE IMPL
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Lorch JR, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P197, DOI 10.1145/3385412.3385971
   Lorch Jacob R., ARMADA LOW EFFORT VE, DOI [10.1145/3395653, DOI 10.1145/3395653]
   Michael M. M., 1996, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, P267, DOI 10.1145/248052.248106
   Michael M. M., 2002, P 14 ANN ACM S PAR A, P73, DOI DOI 10.1145/564870.564881
   Michael MM, 2004, IEEE T PARALL DISTR, V15, P491, DOI 10.1109/TPDS.2004.8
   Misra J., 2001, A Discipline of Multiprogramming
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Musuvathi M., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, P267
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   Peled D., 1994, Computer Aided Verification. 6th International Conference, CAV '94. Proceedings, P377
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   Treiber R. K, 1986, Technical Report RJ 5118
   Wang L., 2005, P ACM SIGPLAN S PRIN, P61, DOI DOI 10.1145/1065944.1065953
   Wilcox JR, 2018, ACM SIGPLAN NOTICES, V53, P354, DOI 10.1145/3200691.3178514
   Xu FW, 2016, LECT NOTES COMPUT SC, V9780, P59, DOI 10.1007/978-3-319-41540-6_4
   Yahav E, 2001, ACM SIGPLAN NOTICES, V36, P27, DOI 10.1145/373243.360206
   Yi Jaeheon., 2012, Proceedings of the 2012 International Symposium on Software Testing and Analysis, ISSTA 2012, P232
NR 59
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 156
DI 10.1145/3428224
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900033
OA gold
DA 2024-07-18
ER

PT J
AU Kirkham, J
   Sorensen, T
   Tureci, E
   Martonosi, M
AF Kirkham, Jake
   Sorensen, Tyler
   Tureci, Esin
   Martonosi, Margaret
TI Foundations of Empirical Memory Consistency Testing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE memory consistency; autotuning; conformance testing; GPUs; OpenCL
AB Modern memory consistency models are complex, and it is difficult to reason about the relaxed behaviors that current systems allow. Programming languages, such as C and OpenCL, offer a memory model interface that developers can use to safely write concurrent applications. This abstraction provides functional portability across any platform that implements the interface, regardless of differences in the underlying systems. This powerful abstraction hinges on the ability of the system to correctly implement the interface. Many techniques for memory consistency model validation use empirical testing, which has been effective at uncovering undocumented behaviors and even finding bugs in trusted compilation schemes. Memory model testing consists of small concurrent unit tests called "litmus tests". In these tests, certain observations, including potential bugs, are exceedingly rare, as they may only be triggered by precise interleaving of system steps in a complex processor, which is probabilistic in nature. Thus, each test must be run many times in order to provide a high level of confidence in its coverage.
   In this work, we rigorously investigate empirical memory model testing. In particular, we propose methodologies for navigating complex stressing routines and analyzing large numbers of testing observations. Using these insights, we can more efficiently tune stressing parameters, which can lead to higher confidence results at a faster rate. We emphasize the need for such approaches by performing a meta-study of prior work, which reveals results with low reproducibility and inefficient use of testing time.
   Our investigation is presented alongside empirical data. We believe that OpenCL targeting CPUs is a pragmatic choice in this domain as there exists a variety of different platforms to test, from large I-IPC servers to power-efficient edge devices. The tests presented in the work span 3 CPUs from 3 different vendors. We show that our methodologies are applicable across the GPUs, despite significant variances in the results. Concretely, our results show: lossless speedups of more than 5x in tuning using data peeking; a definition of portable stressing parameters which loses only 12% efficiency when generalized across our domain; a priority order of litmus tests for tuning. We stress test a conformance test suite for the OpenCL 2.0 memory model and discover a bug in Intel's compiler. Our methods are evaluated on the other two CPUs using mutation testing. We end with recommendations for official memory model conformance tests.
C1 [Kirkham, Jake; Tureci, Esin; Martonosi, Margaret] Princeton Univ, Princeton, NJ 08544 USA.
   [Sorensen, Tyler] UC Santa Cruz, Santa Cruz, CA USA.
C3 Princeton University; University of California System; University of
   California Santa Cruz
RP Kirkham, J (corresponding author), Princeton Univ, Princeton, NJ 08544 USA.
EM jak4@alumni.princeton.edu; tyler.sorensen@ucsc.edu;
   esin.tureci@princeton.edu; mrm@cs.princeton.edu
OI Martonosi, Margaret/0000-0001-9683-8032; Sorensen,
   Tyler/0000-0003-1646-7935
FU MacCracken Independent Work/Senior Thesis Fund from the School of
   Engineering and Applied Science (SEAS) at Princeton University; National
   Science Foundation [1739674]; Division Of Computer and Network Systems;
   Direct For Computer & Info Scie & Enginr [1739674] Funding Source:
   National Science Foundation
FX We thank the anonymous reviewers for their valuable feedback which
   greatly improved the clarity of the paper. We thank Sreepathi Pai for
   the use of the GPU Zoo at the University of Rochester, which was our
   main source of GPUs for this work. We thank Mariusz Merecki and Jacek
   Jankowski at Intel for their feedback and insights around the the Iris.
   We thank the Khronos SPIR Memory Model TSG, (especially Rob Simpson,
   Alan Baker, David Neto, Jeff Bolz, Nicolai Hahnle, Graeme Leese, Brian
   Sumner) for their support and feedback on this work over the last year.
   The early-stage equipment for this project was partially funded by the
   MacCracken Independent Work/Senior Thesis Fund from the School of
   Engineering and Applied Science (SEAS) at Princeton University. This
   material is based upon work supported by the National Science Foundation
   under Grant No. 1739674. Any opinions, findings, and conclusions or
   recommendations expressed in this material are those of the author(s)
   and do not necessarily reflect the views of the National Science
   Foundation.
CR Alglave J, 2015, ACM SIGPLAN NOTICES, V50, P577, DOI [10.1145/2775054.2694391, 10.1145/2694344.2694391]
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Alglave J, 2010, LECT NOTES COMPUT SC, V6174, P258, DOI 10.1007/978-3-642-14295-6_25
   Alglave Jade, 2011, TOOLS ALGORITHMS CON, DOI [10.1007/978-3-642-19835-9_5, DOI 10.1007/978-3-642-19835-9_5]
   [Anonymous], 2012, 2012 INNOVATIVE PARA, DOI DOI 10.1109/INPAR.2012.6339596
   [Anonymous], 2015, OPENCL SPECIFICATION
   ARM, CORT A9 MPCORE PROGR
   Batty M, 2016, ACM SIGPLAN NOTICES, V51, P634, DOI 10.1145/2914770.2837637
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Batty Mark, 2012, PRINCIPLES PROGRAMMI, DOI [10.1145/1926385.1926394, DOI 10.1145/1926385.1926394]
   Choi J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110268
   Chong N, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P211, DOI [10.1145/3192366.3192373, 10.1145/3296979.3192373]
   Collier WilliamW., 1992, Reasoning about Parallel Architectures
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Flur S, 2017, ACM SIGPLAN NOTICES, V52, P429, DOI 10.1145/3093333.3009839
   Hangal S., 2004, Computer Architecture News, V32, P114, DOI 10.1145/1028176.1006710
   Hower DR, 2014, ACM SIGPLAN NOTICES, V49, P427, DOI 10.1145/2541940.2541981
   Iorga D, 2020, IEEE REAL TIME, P200, DOI 10.1109/RTAS48715.2020.000-6
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   LEVESON NG, 1993, COMPUTER, V26, P18, DOI 10.1109/MC.1993.274940
   Lustig D, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P257, DOI 10.1145/3297858.3304043
   Manerkar Yatin A., 2016, ARXIV161101507
   Norris B, 2013, ACM SIGPLAN NOTICES, V48, P131, DOI [10.1145/2509136.2509514, 10.1145/2544173.2509514]
   Nvidia, CUDA C++ Programming Guide
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   SIGWORTH FJ, 1987, BIOPHYS J, V52, P1047, DOI 10.1016/S0006-3495(87)83298-8
   Sorensen T, 2016, ACM SIGPLAN NOTICES, V51, P100, DOI [10.1145/2980983.2908114, 10.1145/2908080.2908114]
   Sorensen Tyler, 2016, ACM INT C OBJ OR PRO, DOI [10.1145/3022671.2984032, DOI 10.1145/3022671.2984032, 10.1145/2983990.2984032, DOI 10.1145/2983990.2984032]
   Sorin Daniel J, 2011, PRIMER MEMORY CONSIS, V1st, DOI [10.2200/S00346ED1V01Y201104CAC016, DOI 10.2200/S00346ED1V01Y201104CAC016]
   Ta Tuan, 2019, INT S WORKL CHAR ISW, DOI [10.1109/IISWC47752.2019.9042019, DOI 10.1109/IISWC47752.2019.9042019]
   United States Department of Energy, FIN REP AUG 14 2003
   Watt Conrad, 2020, PLDI '20: Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation, P346, DOI 10.1145/3385412.3385973
   Wickerson J, 2017, ACM SIGPLAN NOTICES, V52, P190, DOI 10.1145/3093333.3009838
   Xiao Shucai, 2010, INT S PAR DISTR PROC, DOI [10.1109/IPDPS.2010, DOI 10.1109/IPDPS.2010]
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
NR 37
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 226
DI 10.1145/3428294
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900103
OA gold
DA 2024-07-18
ER

PT J
AU Xiang, TT
   Luo, JY
   Dietl, W
AF Xiang, Tongtong
   Luo, Jeff Y.
   Dietl, Werner
TI Precise Inference of Expressive Units of Measurement Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Pluggable type system; Type inference; Units of measurements;
   Dimensional analysis; Scientific computing
AB Ensuring computations are unit-wise consistent is an important task in software development. Numeric computations are usually performed with primitive types instead of abstract data types, which results in very weak static guarantees about correct usage and conversion of units. This paper presents PUnits, a pluggable type system for expressive units of measurement types and a precise, whole-program inference approach for these types. PUnits can be used in three modes: (1) modularly check the correctness of a program, (2) ensure a possible unit typing exists, and (3) annotate a program with units. Annotation mode allows human inspection and is essential since having a valid typing does not guarantee that the inferred specification expresses design intent. PUnits is the first units type system with this capability. Compared to prior work, PUnits strikes a novel balance between expressiveness, inference complexity, and annotation effort. We implement PUnits for Java and evaluate it by specifying the correct usage of frequently used JDK methods. We analyze 234k lines of code from eight open-source scientific computing projects with PUnits. We compare PUnits against an encapsulation-based units API (the javax . measure package) and discovered unit errors that the API failed to find. PUnits infers 90 scientific units for five of the projects and generates well-specified applications. The experiments show that PUnits is an effective, sound, and scalable alternative to using encapsulation-based units APIs, enabling Java developers to reap the performance benefits of using primitive types instead of abstract data types for unit-wise consistent scientific computations.
C1 [Xiang, Tongtong; Luo, Jeff Y.; Dietl, Werner] Univ Waterloo, Elect & Comp Engn, Waterloo, ON, Canada.
C3 University of Waterloo
RP Xiang, TT (corresponding author), Univ Waterloo, Elect & Comp Engn, Waterloo, ON, Canada.
EM txiang@uwaterloo.ca; j36luo@uwaterloo.ca; wdietl@uwaterloo.ca
OI Xiang, Tongtong/0000-0002-0939-3256
FU Natural Sciences and Engineering Research Council of Canada (NSERC)
   [RGPIN-05799-2014, RGPIN-2020-05502]; Government of Ontario; AFRL
   [FA8750-15-C-0010]
FX We thank the reviewers for their valuable feedback on this paper. We
   acknowledge the support of the Natural Sciences and Engineering Research
   Council of Canada (NSERC) Discovery Grants program, RGPIN-05799-2014 and
   RGPIN-2020-05502, and an Early Researcher Award from the Government of
   Ontario. This work was also supported by AFRL contract FA8750-15-C-0010.
   The views and conclusions contained herein are those of the authors and
   should not be interpreted as necessarily representing the official
   policies or endorsements, either expressed or implied, of AFRL, DARPA,
   NSERC, or the Governments of Ontario, Canada, or the United States.
CR Allen E, 2004, ACM SIGPLAN NOTICES, V39, P384, DOI 10.1145/1035292.1029008
   Bennich-Björkman O, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING (SLE '18), P121, DOI 10.1145/3276604.3276613
   Benson Tom, 2014, REYNOLDS NUMBER
   Bracha Gilad, 2004, OOPSLA WORKSH REV DY, V4
   Carlson T, 2017, PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'17), P91, DOI 10.1145/3136040.3136055
   Chen CZ, 2018, LECT NOTES COMPUT SC, V10811, P87, DOI 10.1007/978-3-319-77935-5_6
   Daikon, 2003, FIX BUG PRINT MILL N
   Daikon, 2004, MULT DKCONF COMP TIM
   Dautelle Jean-Marie, 2010, JSR 275 UNITS SPECIF
   Dautelle Jean-Marie, 2016, JSR 363
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dietl W, 2007, LECT NOTES COMPUT SC, V4609, P28
   Dietl W, 2011, LECT NOTES COMPUT SC, V6813, P333, DOI 10.1007/978-3-642-22655-7_16
   Dietl W, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P681, DOI 10.1145/1985793.1985889
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Ernst Michael D, 2012, JSR 308
   GEHANI N, 1977, COMPUT LANG, V2, P93, DOI 10.1016/0096-0551(77)90010-8
   GEHANI NH, 1985, SOFTWARE PRACT EXPER, V15, P555, DOI 10.1002/spe.4380150604
   Hangal S, 2009, PROC INT CONF SOFTW, P155, DOI 10.1109/ICSE.2009.5070517
   Hills M, 2012, ELECTRON NOTES THEOR, V290, P51, DOI 10.1016/j.entcs.2012.11.011
   Johnston Wesley, 2012, CLOSE SWIPE VELOCITY
   Juma N, 2020, THEOR COMPUT SCI, V814, P189, DOI 10.1016/j.tcs.2020.01.035
   Kaminski T, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3138224
   Kennedy A., 2009, Central European Functional Programming School, P268, DOI [DOI 10.1007/978-3-642-17685-2_8, DOI 10.1007/978-3-642-17685-2_8(SPRINGER]
   Kennedy A. J., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P442, DOI 10.1145/263699.263761
   Krings S, 2013, LECT NOTES COMPUT SC, V8137, P137, DOI 10.1007/978-3-642-40561-7_10
   Larsen Andreas Gullberg, 2018, UNITS NET
   Lingxiao Jiang, 2006, 28th International Conference on Software Engineering Proceedings, P262, DOI 10.1145/1134285.1134323
   Mars Climate Orbiter Mishap Investigation Board, 1999, Mars Climate Orbiter Mishap Investigation Board Phase I Report'
   Melzer Jens, 2015, AUTOBOXING PERFORMAN
   Orchard D, 2015, J COMPUT SCI-NETH, V9, P156, DOI 10.1016/j.jocs.2015.04.018
   Owre Sam, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P356, DOI 10.1007/978-3-642-32759-9_30
   Papi Matthew M., 2008, P 2008 INT S SOFTW T, P201, DOI DOI 10.1145/1390630.1390656
   Schabel Matthias C., 2010, BOOST UNITS
   The Coq Development Team, 2004, COQ PROOF ASSISTANT
   Wlaschin Scott, 2012, UNITS MEASURE TYPE S
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 37
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 142
DI 10.1145/3428210
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900019
OA gold
DA 2024-07-18
ER

PT J
AU Hagedorn, B
   Lenfers, J
   Koehler, T
   Qin, XY
   Gorlatch, S
   Steuwer, M
AF Hagedorn, Bastian
   Lenfers, Johannes
   Koehler, Thomas
   Qin, Xueying
   Gorlatch, Sergei
   Steuwer, Michel
TI Achieving High-Performance the Functional Way A Functional Pearl on
   Expressing High-Performance Optimizations as Rewrite Strategies
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Rewrite Rules; Optimization Strategies; Strategy Languages; ELEVATE
AB Optimizing programs to run efficiently on modern parallel hardware is hard but crucial for many applications. The predominantly used imperative languages - like C or OpenCL - force the programmer to intertwine the code describing functionality and optimizations. This results in a portability nightmare that is particularly problematic given the accelerating trend towards specialized hardware devices to further increase efficiency.
   Many emerging DSLs used in performance demanding domains such as deep learning or high-performance image processing attempt to simplify or even fully automate the optimization process. Using a high-level - often functional - language, programmers focus on describing functionality in a declarative way. In some systems such as Halide or TVM, a separate schedule specifies how the program should be optimized. Unfortunately, these schedules are not written in well-defined programming languages. Instead, they are implemented as a set of ad-hoc predefined APIs that the compiler writers have exposed.
   In this functional pearl, we show how to employ functional programming techniques to solve this challenge with elegance. We present two functional languages that work together - each addressing a separate concern. RISE is a functional language for expressing computations using well known functional data-parallel patterns. ELEVATE is a functional language for describing optimization strategies. A high-level RISE program is transformed into a low-level form using optimization strategies written in ELEVATE. From the rewritten low-level program high-performance parallel code is automatically generated. In contrast to existing high-performance domain-specific systems with scheduling APIs, in our approach programmers are not restricted to a set of built-in operations and optimizations but freely define their own computational patterns in RISE and optimization strategies in ELEVATE in a composable and reusable way. We show how our holistic functional approach achieves competitive performance with the state-of-the-art imperative systems Halide and TVM.
C1 [Hagedorn, Bastian; Lenfers, Johannes; Gorlatch, Sergei] Univ Munster, Munster, Germany.
   [Koehler, Thomas; Qin, Xueying; Steuwer, Michel] Univ Glasgow, Glasgow, Lanark, Scotland.
C3 University of Munster; University of Glasgow
RP Hagedorn, B (corresponding author), Univ Munster, Munster, Germany.
EM b.hagedorn@wwu.de; j.le@wwu.de; t.koehler.1@research.gla.ac.uk;
   2335466q@student.gla.ac.uk; gorlatch@wwu.de;
   michel.steuwer@glasgow.ac.uk
OI Koehler, Thomas/0000-0001-8461-8075; Qin, Xueying/0000-0003-4825-2023;
   Hagedorn, Bastian/0000-0003-1833-5514; Steuwer,
   Michel/0000-0001-5048-0741
FU NVIDIA Research Fellowship
FX We thank the entire RISE (rise-lang.org) and ELEVATE (elevate-lang.org)
   teams for their development efforts. We thank our reviewers and our
   shepherd Stefan Muller for their valuable feedback. The first author was
   financially supported by an NVIDIA Research Fellowship.
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   Andrei O, 2011, ELECTRON P THEOR COM, P54, DOI 10.4204/EPTCS.48.7
   Atkey Robert, 2017, ABS171008332 CORR
   Baghdadi R, 2019, INT SYM CODE GENER, P193, DOI [10.5281/zenodo.2375075, 10.1109/CGO.2019.8661197]
   Barham P, 2019, PROCEEDINGS OF THE WORKSHOP ON HOT TOPICS IN OPERATING SYSTEMS (HOTOS '19), P177, DOI 10.1145/3317550.3321441
   Bird Richard, 1997, Algebra of Programming
   Borovansky P., 1998, Electronic Notes in Theoretical Computer Science, V15, DOI 10.1016/S1571-0661(05)82552-6
   Borovansky Peter, 1996, Electronic Notes in Theoretical Computer Science, V4, P35, DOI [DOI 10.1016/S1571-0661(04)00032-5.FIRSTINTERNATIONALWORKSHOPONREWRITINGLOGICANDITSAPPLICATIONS(RWLW96, 10.1016/S1571-0661(04)00032-5]
   Boyle JM, 1997, MODERN SOFTWARE TOOLS FOR SCIENTIFIC COMPUTING, P353
   Bravenboer M, 2002, LECT NOTES COMPUT SC, V2378, P237
   Chakravarty M. M., 2011, P 6 WORKSH DECL ASP, P3, DOI DOI 10.1145/1926354.1926358
   Chen Chun, 2008, TECHNICAL REPORT
   Chen TQ, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P579
   CHIKOFSKY EJ, 1990, IEEE SOFTWARE, V7, P13, DOI 10.1109/52.43044
   Clavel M, 2002, THEOR COMPUT SCI, V285, P187, DOI 10.1016/S0304-3975(01)00359-0
   Collberg C., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P184, DOI 10.1145/268946.268962
   Collins Alexander., 2014, Proceedings of ACM SIGPLAN International Workshop on Libraries, Languages, p8:8, DOI DOI 10.1145/2627373.2627375
   Delahaye D, 2000, LECT NOTES ARTIF INT, V1955, P85, DOI 10.1007/3-540-44404-1_7
   Dolstra E., 2002, Electronic Notes in Theoretical Computer Science, V65, DOI 10.1016/S1571-0661(04)80427-4
   FELTY A, 1993, J AUTOM REASONING, V11, P43, DOI 10.1007/BF00881900
   Fernandez Maribel, 2011, LOGIC BASED PROGRAM, P173, DOI [10.1007/978-3-642-32211-2_12, DOI 10.1007/978-3-642-32211-2_12]
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Girbal S, 2006, INT J PARALLEL PROG, V34, P261, DOI 10.1007/s10766-006-0012-3
   GOGUEN J, 1988, LECT NOTES COMPUT SC, V308, P258
   Hagedorn B, 2018, INT SYM CODE GENER, P100, DOI 10.1145/3168824
   Halide, 2020, TUT SCH
   Hall Mary, 2009, Languages and Compilers for Parallel Computing. 22nd International Workshop, LCPC 2009, Revised Selected Papers, P50
   Hennessy JL, 2019, COMMUN ACM, V62, P48, DOI 10.1145/3282307
   Henriksen T, 2017, ACM SIGPLAN NOTICES, V52, P556, DOI [10.1145/3140587.3062354, 10.1145/3062341.3062354]
   Jones Simon Peyton, 2001, HASK WORKSH
   Kirchner H, 2015, LECT NOTES COMPUT SC, V9200, P380, DOI 10.1007/978-3-319-23165-5_18
   Lattner C., 2020, MLIR COMPILER INFRAS
   Luttik S.P., 1997, SPECIFICATION REWRIT
   McDonell TL, 2013, ACM SIGPLAN NOTICES, V48, P49, DOI [10.1145/2544174.2500595, 10.1145/2500365.2500595]
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   Olmos Karina, 2002, ELECT NOTES THEOR CO, V70, P156, DOI [10.1016/S1571-0661(04)80605-4, DOI 10.1016/S1571-0661(04)80605-4]
   Paszke A., 2017, NIPS W
   Pinaud B, 2017, EXTRACTION GESTION C, P473
   Ragan-Kelley J, 2018, COMMUN ACM, V61, P106, DOI 10.1145/3150211
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Steuwer M, 2017, INT SYM CODE GENER, P74, DOI 10.1109/CGO.2017.7863730
   Steuwer M, 2016, 2016 INTERNATIONAL CONFERENCE ON COMPILERS, ARCHITECTURE AND SYNTHESIS FOR EMBEDDED SYSTEMS (CASES), DOI 10.1145/2968455.2968521
   Steuwer M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P205, DOI 10.1145/2784731.2784754
   Svensson Joel., 2008, Symposium on Implementation and Application of Functional Languages, P156
   TVM, 2020, OPT GEMM CPU
   Visser E, 2005, J SYMB COMPUT, V40, P831, DOI 10.1016/j.jsc.2004.12.011
   Visser E., 2001, Electronic Notes in Theoretical Computer Science, V57, DOI 10.1016/S1571-0661(04)00270-1
   Visser E, 1999, ACM SIGPLAN NOTICES, V34, P13, DOI 10.1145/291251.289425
   Visser Eelco, 2004, Domain-Specific Program Generation: International Seminar, Dagstuhl Castle, Germany, March 23-28, 2003, P216, DOI DOI 10.1007/978-3-540-25935-0_13
   Visser Eelco, 2001, REWRITING TECHNIQUES, P357, DOI [10.1007/3-540-45127-7_27, DOI 10.1007/3-540-45127-7_27]
   Wadler P, 2015, COMMUN ACM, V58, P75, DOI 10.1145/2699407
   Yuki T., 2012, INT WORKSHOP LANGUAG, P17
   Zhang YM, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276491
NR 53
TC 11
Z9 11
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 92
DI 10.1145/3408974
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700006
OA Green Accepted, gold, Green Published
DA 2024-07-18
ER

PT J
AU King, P
AF King, Paul
TI A History of the Groovy Programming Language
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Dynamic typing; Static typing; Object-oriented; Functional programming;
   Closure; Scripting; Domain Specific Languages; Metaprogramming;
   Extensibility
AB This paper describes the history of the Groovy programming language. At the time of Groovy's inception, Java was a dominant programming language with a wealth of useful libraries. Despite this, it was perceived by some to be evolving slowing and to have shortcomings for scripting, rapid prototyping and when trying to write minimalistic code. Other languages seemed to be innovating faster than Java and, while overcoming some of Java's shortcomings, used syntax that was less familiar to Java developers. Integration with Java libraries was also non-optimal. Groovy was created as a complementary language to JavaDits dynamic counterpart. It would look and feel like Java but focus on extensibility and rapid innovation. Groovy would borrow ideas from dynamic languages like Ruby, Python and Smalltalk where needed to provide compelling JVM solutions for some of Java's shortcomings.
   Groovy supported innovation through its runtime and compile-time metaprogramming capabilities. It supported simple operator overloading, had a flexible grammar and was extensible. These characteristics made it suitable for growing the language to have new commands (verbs) and properties (nouns) specific to a particular domain, a so called Domain Specific Language (DSL). While still intrinsically linked with Java, over time Groovy has evolved from a niche dynamic scripting language into a compelling mainstream language.
   After many years as a principally dynamically-typed language, a static nature was added to Groovy. Code could be statically type checked or when dynamic features weren't needed, they could be turned off entirely for Java-like performance. A number of nuances to the static nature came about to support the style of coding used by Groovy developers.
   Many choices made by Groovy in its design, later appeared in other languages (Swift, C#, Kotlin, Ceylon, PHP, Ruby, Coffeescript, Scala, Frege, TypeScript and Java itself). This includes Groovy's dangling closure, Groovy builders, null-safe navigation, the Elvis operator, ranges, the spaceship operator, and flow typing. For most languages, we don't know to what extent Groovy played a part in their choices. We do know that Kotlin took inspiration from Groovy's dangling closures, builder concept, default it parameter for closures, templates and interpolated strings, null-safe navigation and the Elvis operator.
   The leadership, governance and sponsorship arrangements of Groovy have evolved over time, but Groovy has always been a successful highly collaborative open source project driven more by the needs of the community than by a vision of a particular company or person.
C1 [King, Paul] Object Comp, Brisbane, Qld, Australia.
RP King, P (corresponding author), Object Comp, Brisbane, Qld, Australia.
CR [Anonymous], 2009, NEW FEAT CONS STAT T
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 2009, NEW FEAT POW ASS
   [Anonymous], Jenkins 2020b. Jenkins build automation server (website). nonarchival.
   [Anonymous], APACH SOFTW FDN
   [Anonymous], 2007, GROOVY ORG CODEHAUS
   [Anonymous], ASF 2020c. The Apache Software Foundation: Corporate Governance Overview. nonarchival
   [Anonymous], Jenkins 2020a. Grails web application framework (website). nonarchival.
   [Anonymous], CommonsMath 2020b. Real Matrix class usage (Apache Commons Math documentation)
   [Anonymous], 2021, NATURESERVE EXPLORER
   [Anonymous], CommonsMath 2020a. Apache Commons Math: Java mathematics library (website)
   Antao Tiago, 2008, CHLOROQUINE MALARIA
   Antao Tiago, 2008, P 2008 INT C BIO COM
   Beanshell, 2020, BEANSH SCR LANG
   Bloch J., 2017, EFFECTIVE JAVA, V3rd
   Breslav Andrey, 2020, AUTHOR DISCUSSED GRO
   Breslav Andrey, 2018, GE 2018 C PRES
   BSF 2020, APACH COMM BEAN SCR
   Calder M, 2003, COMPUT NETW, V41, P115, DOI 10.1016/S1389-1286(02)00352-3
   Codehaus, 2015, COD GOV MAN
   Conservancy, 2020, SOFTW FRE CONS
   Devcon10, 2014, GEO DEV C 10 5 JUN 2
   Devcon3, 2007, GRO DEV C 3 29 30 JA
   Devcon7, 2012, GRO DEV C 7 6 7 JUN
   Devcon8, 2013, GRO DEV C 8 21 22 MA
   Devcon9, 2013, GRO DEV C 9 10 11 DE
   Eclipse, 2020, ECL FDN
   Frege, 2013, FREG HASK LIK LANG J
   Gabriel Richard P., 1994, AI, V6, P31
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GEP-10, 2011, GEP STAT COMPILATION
   GEP-12, 2013, GEP SAM COERCION
   GEP-6, 2010, GEP NIO2 SUPPORT GRO
   GEP-8, 2011, GEP STAT TYPE CHECKI
   GEPs, 2020, LIST GRO ENH PROP
   Gibbons Jeremy, 2010, DESIGN PATTERNS HIGH, V36
   Goodtimes, 2017, GOOD JAV TIM EXT LIB
   Gradle, 2020, GRADL BUILD TOOL
   Grengine, 2020, GRENG EMB GRO ENG
   Griffon, 2020, GRIFF DESKT APPL DEV
   Groovy, 2020, GRO DOC
   GROOVY-1884, 2008, GEP ADD PROP GRO BEA
   InfoQ, 2015, DEM OPEN SOURC HOST
   JEP 118, 2015, 118 JEP
   JEP 120, 2015, 120 JEP
   JSR 223, 2006, 223 JSR
   JSR 241, 2004, 241 JSR
   JSR 308, 2014, 308 JSR
   JSR 310, 2014, 310 JSR
   Kimberlin Michael, 2010, REDUCING BOILERPLATE
   Konig Dierk., 2015, Groovy in Action, VSecond
   Laforge Guillaume, 2017, JAVAONE 2017 C PRES
   Laforge Guillaume, 2008, DOMAIN SPECIFIC LANG
   Laforge Guillaume, 2007, GROOVY 10 IS THERE G
   Laforge Guillaume, 2007, GROOVY ORG CODEHAUS
   Marx Dustin, 2015, CODEHAUS ONCE GREAT
   McWhirter Bob, 2003, GROOVY ORG CODEHAUS
   Microsoft, 2020, TYPE PROV DOC
   Muller Jesper Steen, 2015, GROOVY ORG APACHE GR
   Nice, 2020, NICE PROGR LANG
   Niederwieser Peter, 2009, GROOVY ORG CODEHAUS
   Niederwieser Peter, 2020, SPOCK FRAMEWORK
   Norvig Peter, 1998, Design Patterns in Dynamic Languages
   Odersky Martin., 2006, PIMP MY LIB
   OpenJDK, 2012, LAMBDA DEV MAILING L
   Prehofer Christian, 1997, INFORMATIK 97 INFORM
   Rayner Jeremy, 2007, GROOVY 10 RELEASED
   RedMonk, 2020, RED MONK IND JAN 202
   Rocher Graeme, 2006, GROOVY ORG CODEHAUS
   Rocher Graeme, 2007, INDIC THREADS INTERV
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   SoapUI, 2020, SOAP TEST AUT FRAM S
   Spring, 2020, SPR INT DYN LANG SUP
   Steele Guy L., 1998, 1998 P C OBJ ORI PRO, DOI [10.1145/346852.346922, DOI 10.1145/346852.346922]
   Steingress Andre, 2020, GCONTRACTS DESIGN CO
   Strachan James, 2003, GROOVY ORG CODEHAUS
   Strachan James, 2003, GROOVY BIRTH NEW DYN
   Strachan James, 2003, GROOVY ORG CODEHAUS
   Sun, 1997, JAV BEANS TAPI SPEC
   TIOBE, 2019, TIOBE IND OCT 2019
   Tkachman Alex, 2011, GROOVYPP PROTOTYPING
   uehaj, 2010, JAP GRO DSL
   Wikipedia, 2020, FEAT INT PROBL
   Wikipedia, FLOW SENS TYP
   Wikipedia 2018b, SAFE NAV OPER
   Winder Russel, 2011, GROOVY ORG CODEHAUS
NR 86
TC 1
Z9 1
U1 2
U2 7
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 76
DI 10.1145/3386326
PG 53
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900009
OA gold
DA 2024-07-18
ER

PT J
AU Meyer, R
   Wolff, S
AF Meyer, Roland
   Wolff, Sebastian
TI Pointer Life Cycle Types for Lock-Free Data Structures with Memory
   Reclamation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE lock-free data structures; safe memory reclamation; garbage collection;
   linearizability; verification; type systems; type inference
ID FORMAL VERIFICATION; LINEARIZABILITY; REFINEMENT; LOGIC; ABSTRACTION;
   CONCURRENCY; REDUCTION; CALCULUS; SAFETY; TIME
AB We consider the verification of lock-free data structures that manually manage their memory with the help of a safe memory reclamation (SMR) algorithm. Our first contribution is a type system that checks whether a program properly manages its memory. If the type check succeeds, it is safe to ignore the SMR algorithm and consider the program under garbage collection. Intuitively, our types track the protection of pointers as guaranteed by the SMR algorithm. There are two design decisions. The type system does not track any shape information, which makes it extremely lightweight. Instead, we rely on invariant annotations that postulate a protection by the SMR. To this end, we introduce angels, ghost variables with an angelic semantics. Moreover, the SMR algorithm is not hard-coded but a parameter of the type system definition. To achieve this, we rely on a recent specification language for SMR algorithms. Our second contribution is to automate the type inference and the invariant check. For the type inference, we show a quadratic-time algorithm. For the invariant check, we give a source-to-source translation that links our programs to off-the-shelf verification tools. It compiles away the angelic semantics. This allows us to infer appropriate annotations automatically in a guess-and-check manner. To demonstrate the effectiveness of our type-based verification approach, we check linearizability for various list and set implementations from the literature with both hazard pointers and epoch-based memory reclamation. For many of the examples, this is the first time they are verified automatically. For the ones where there is a competitor, we obtain a speed-up of up to two orders of magnitude.
C1 [Meyer, Roland; Wolff, Sebastian] TU Braunschweig, Braunschweig, Germany.
C3 Braunschweig University of Technology
RP Meyer, R (corresponding author), TU Braunschweig, Braunschweig, Germany.
EM roland.meyer@tu-bs.de; sebastian.wolff@tu-bs.de
OI Wolff, Sebastian/0000-0002-3974-7713
CR Abdulla PA, 2016, LECT NOTES COMPUT SC, V9837, P61, DOI 10.1007/978-3-662-53413-7_4
   Abdulla PA, 2013, LECT NOTES COMPUT SC, V7795, P324, DOI 10.1007/978-3-642-36742-7_23
   Aghazadeh Z, 2014, PROCEEDINGS OF THE 2014 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC'14), P385, DOI 10.1145/2611462.2611483
   Alistarh D., 2014, P 9 EUR C COMP SYST, P1
   Alistarh D, 2015, SPAA'15: PROCEEDINGS OF THE 27TH ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P123, DOI 10.1145/2755573.2755600
   Amit D, 2007, LECT NOTES COMPUT SC, V4590, P477
   Ancona D, 2016, FOUND TRENDS PROGRAM, V3, pI, DOI 10.1561/2500000031
   [Anonymous], 2011, 148822011 ISO IEC
   [Anonymous], 2001, DISC
   BACK RJR, 1989, LECT NOTES COMPUT SC, V366, P199
   Bäumler S, 2011, FORM ASP COMPUT, V23, P91, DOI 10.1007/s00165-009-0130-y
   Balmau Oana., 2016, P 28 ACM S PARALLELI, P349
   Berdine J, 2008, LECT NOTES COMPUT SC, V5123, P399
   Berdine J., 2011, LNCS, V6806, P178, DOI DOI 10.1007/978-3-642-22110-1
   Beyer D, 2005, LECT NOTES COMPUT SC, V3442, P2, DOI 10.1007/978-3-540-31984-9_2
   Bierhoff K, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P301
   Birkhoff Garrett, 1948, Lattice Theory, VSecond third
   Bizjak A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290378
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Bouajjani A, 2018, LECT NOTES COMPUT SC, V10982, P336, DOI 10.1007/978-3-319-96142-2_21
   Bouajjani A, 2017, LECT NOTES COMPUT SC, V10427, P542, DOI 10.1007/978-3-319-63390-9_28
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Braginsky A., 2013, P 25 ANN ACM S PAR A, P33
   Brookes S, 2004, LECT NOTES COMPUT SC, V3170, P16
   Brown T, 2015, PODC'15: PROCEEDINGS OF THE 2015 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P261, DOI 10.1145/2767386.2767436
   Burckhardt S, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P330, DOI 10.1145/1806596.1806634
   Calcagno C, 2011, LECT NOTES COMPUT SC, V6617, P459, DOI 10.1007/978-3-642-20398-5_33
   Castegren Elias, 2017, LEIBNIZ INT P INFORM, V6, P1, DOI DOI 10.4230/LIPICS.ECOOP.2017.6
   Cerny P, 2010, LECT NOTES COMPUT SC, V6174, P465, DOI 10.1007/978-3-642-14295-6_41
   Cohen N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276513
   Cohen N, 2015, SPAA'15: PROCEEDINGS OF THE 27TH ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P254, DOI 10.1145/2755573.2755579
   Cohen N, 2015, ACM SIGPLAN NOTICES, V50, P260, DOI [10.1145/2814270.2814298, 10.1145/2858965.2814298]
   Colvin R, 2005, ELECTRON NOTES THEOR, V137, P93, DOI 10.1016/j.entcs.2005.04.026
   Colvin R, 2006, LECT NOTES COMPUT SC, V4144, P475, DOI 10.1007/11817963_44
   Coppo M., 1978, Archiv fur Mathematische Logik und Grundlagenforschung, V19, P139, DOI 10.1007/BF02011875
   Crary K., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P262, DOI 10.1145/292540.292564
   Das M, 2002, ACM SIGPLAN NOTICES, V37, P57, DOI 10.1145/543552.512538
   De Wulf M, 2006, LECT NOTES COMPUT SC, V4144, P17, DOI 10.1007/11817963_5
   Delbianco German Andres, 2017, LIPICS, V74, DOI DOI 10.4230/LIPICS
   DeLine R, 2004, LECT NOTES COMPUT SC, V3086, P465
   Derrick J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1889997.1890001
   Detlefs David L, 2001, P 20 ANN ACM S PRINC, P190
   Dice D, 2016, ACM SIGPLAN NOTICES, V51, P36, DOI [10.1145/3241624.2926699, 10.1145/2926697.2926699]
   Dijkstra W., 1982, MAKING SOLUTIONS MOR, P292, DOI [10.1007/978-1-4612-5695-3_53, DOI 10.1007/978-1-4612-5695-3_53]
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Dodds M, 2015, ACM SIGPLAN NOTICES, V50, P233, DOI [10.1145/2676726.2676963, 10.1145/2775051.2676963]
   Dodds M, 2009, LECT NOTES COMPUT SC, V5502, P363, DOI 10.1007/978-3-642-00590-9_26
   DOEPPNER TW, 1977, P ACM S PRINC PROGR, P155
   Doherty S, 2004, LECT NOTES COMPUT SC, V3235, P97
   Doherty S, 2009, LECT NOTES COMPUT SC, V5805, P274, DOI 10.1007/978-3-642-04355-0_28
   Dongol B, 2015, ACM COMPUT SURV, V48, DOI 10.1145/2796550
   Dragojevic A, 2011, PODC 11: PROCEEDINGS OF THE 2011 ACM SYMPOSIUM PRINCIPLES OF DISTRIBUTED COMPUTING, P99
   Dudka K, 2013, LECT NOTES COMPUT SC, V7935, P215, DOI 10.1007/978-3-642-38856-9_13
   Elmas T, 2010, LECT NOTES COMPUT SC, V6015, P296, DOI 10.1007/978-3-642-12002-2_25
   Elmas T, 2009, ACM SIGPLAN NOTICES, V44, P2, DOI 10.1145/1594834.1480885
   Emmi M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158113
   Emmi M, 2015, ACM SIGPLAN NOTICES, V50, P260, DOI [10.1145/2813885.2737983, 10.1145/2737924.2737983]
   Fähndrich M, 2002, ACM SIGPLAN NOTICES, V37, P13, DOI 10.1145/543552.512532
   Feng XY, 2007, LECT NOTES COMPUT SC, V4421, P173
   Feng XY, 2009, ACM SIGPLAN NOTICES, V44, P315, DOI 10.1145/1594834.1480922
   Fink Stephen., 2006, INT S SOFTWARE TESTI, P133, DOI DOI 10.1145/1146238.1146254
   Flanagan C, 2005, THEOR COMPUT SCI, V338, P153, DOI 10.1016/j.tcs.2004.12.006
   Flanagan C, 2003, ACM SIGPLAN NOTICES, V38, P338, DOI 10.1145/780822.781169
   Flanagan C., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P180
   Flanagan C, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1377492.1377495
   Foster JS, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/543552.512531
   Fraser Keir, 2004, THESIS U CAMBRIDGE U
   Freund StephenN., 2004, Journal of Object Technology, V3, P81
   Fu M, 2010, LECT NOTES COMPUT SC, V6269, P388, DOI 10.1007/978-3-642-15375-4_27
   Gidenstam A, 2005, 8TH INTERNATIONAL SYMPOSIUM ON PARALLEL ARCHITECTURES, ALGORITHMS AND NETWORKS, PROCEEDINGS, P202, DOI 10.1109/ISPAN.2005.42
   Gotsman A, 2013, LECT NOTES COMPUT SC, V7792, P249, DOI 10.1007/978-3-642-37036-6_15
   Gradel E, 2002, AUTOMATA LOGICS INFI, V2500, DOI DOI 10.1007/3-540-36387-4
   Groves L, 2007, IEEE INT C ENG COMP, P107, DOI 10.1109/ICECCS.2007.39
   Groves Lindsay., 2008, P 14 S COMPUTING AUS, P133
   Hawblitzel C, 2015, LECT NOTES COMPUT SC, V9207, P449, DOI 10.1007/978-3-319-21668-3_26
   Haziza F, 2016, LECT NOTES COMPUT SC, V9583, P393, DOI 10.1007/978-3-662-49122-5_19
   Hemed N, 2015, LECT NOTES COMPUT SC, V9363, P371, DOI 10.1007/978-3-662-48653-5_25
   Henzinger Thomas A., 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P242, DOI 10.1007/978-3-642-40184-8_18
   Henzinger TA, 2003, LECT NOTES COMPUT SC, V2648, P235
   Herlihy M, 2005, ACM T COMPUT SYST, V23, P146, DOI 10.1145/1062247.1062249
   Herlihy M., 2008, ART MULTIPROCESSOR P
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Holik Lukes, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P740, DOI 10.1007/978-3-642-39799-8_52
   Holík L, 2017, LECT NOTES COMPUT SC, V10422, P169, DOI 10.1007/978-3-319-66706-5_9
   Holík L, 2016, LECT NOTES COMPUT SC, V10028, P202, DOI 10.1007/978-3-319-49052-6_13
   Horn A, 2015, LECT NOTES COMPUT SC, V9039, P50, DOI 10.1007/978-3-319-19195-9_4
   Hunt S, 2006, ACM SIGPLAN NOTICES, V41, P79, DOI 10.1145/1111320.1111045
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Jonsson B, 2012, FORM ASP COMPUT, V24, P537, DOI 10.1007/s00165-012-0250-7
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Khyzha A, 2017, LECT NOTES COMPUT SC, V10201, P639, DOI 10.1007/978-3-662-54434-1_24
   Kragl B, 2018, LECT NOTES COMPUT SC, V10981, P79, DOI 10.1007/978-3-319-96145-3_5
   Krishna S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158125
   Kuru I, 2019, LECT NOTES COMPUT SC, V11423, P88, DOI 10.1007/978-3-030-17184-1_4
   Lamport Leslie, 1989, 44 SRC RES
   Laviron V, 2010, LECT NOTES COMPUT SC, V6012, P387, DOI 10.1007/978-3-642-11957-6_21
   Liang HJ, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2576235
   Liang HJ, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P455
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Liu Y, 2013, IEEE T SOFTWARE ENG, V39, P1018, DOI 10.1109/TSE.2012.82
   Liu Y, 2009, LECT NOTES COMPUT SC, V5850, P321
   Lowe G, 2017, CONCURR COMP-PRACT E, V29, DOI 10.1002/cpe.3928
   McKenney P. E., 1998, PARALLEL DISTRIBUTED, V509518
   Meyer R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290371
   Meyer Roland, 2019, ABS191011714 CORR
   Michael M. M., 1996, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, P267, DOI 10.1145/248052.248106
   Michael M. M., 2002, P 14 ANN ACM S PAR A, P73, DOI DOI 10.1145/564870.564881
   Michael Maged M., 2002, P 21 ANN S PRINC DIS, P21, DOI [10.1145/571825.571829, DOI 10.1145/571825.571829]
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   Necula GC, 2002, ACM SIGPLAN NOTICES, V37, P128, DOI 10.1145/565816.503286
   Nikolaev R, 2019, PROCEEDINGS OF THE 2019 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC '19), P419, DOI 10.1145/3293611.3331575
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2010, PODC 2010: PROCEEDINGS OF THE 2010 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P85, DOI 10.1145/1835698.1835722
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Parkinson M, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P297
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Ramalhete P, 2017, PROCEEDINGS OF THE 29TH ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES (SPAA'17), P367, DOI 10.1145/3087556.3087588
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Schellhorn Gerhard, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P243, DOI 10.1007/978-3-642-31424-7_21
   Segalov M, 2009, LECT NOTES COMPUT SC, V5904, P30, DOI 10.1007/978-3-642-10672-9_5
   Sergey I, 2015, LECT NOTES COMPUT SC, V9032, P333, DOI 10.1007/978-3-662-46669-8_14
   Sergey I, 2015, ACM SIGPLAN NOTICES, V50, P77, DOI [10.1145/2813885.2737964, 10.1145/2737924.2737964]
   Sethi Divjyot, 2013, Model Checking Software. 20th International Symposium, SPIN 2013. Proceedings, P320, DOI 10.1007/978-3-642-39176-7_20
   Ströder T, 2017, J AUTOM REASONING, V58, P33, DOI 10.1007/s10817-016-9389-x
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Tofan Bogdan, 2011, Theoretical Aspects of Computing - ICTAC 2011. Proceedings 8th International Colloquium, P239, DOI 10.1007/978-3-642-23283-1_16
   Travkin Oleg, 2013, Hardware and Software: Verification and Testing. 9th International Haifa Verification Conference, HVC 2013. Proceedings: LNCS 8244, P311, DOI 10.1007/978-3-319-03077-7_21
   Treiber R. K, 1986, Technical Report RJ 5118
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   Vafeiadis V, 2010, LECT NOTES COMPUT SC, V6174, P450, DOI 10.1007/978-3-642-14295-6_40
   Vafeiadis V, 2009, LECT NOTES COMPUT SC, V5403, P335, DOI 10.1007/978-3-540-93900-9_27
   Vafeiadis Viktor., LNCS, V5944, DOI [10.1007/978-3-642-11319-2_25, DOI 10.1007/978-3-642-11319-2_25]
   Vechev M, 2009, LECT NOTES COMPUT SC, V5578, P261, DOI 10.1007/978-3-642-02652-2_21
   Vechev M, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P125, DOI 10.1145/1375581.1375598
   Wen H, 2018, ACM SIGPLAN NOTICES, V53, P1, DOI 10.1145/3200691.3178488
   Yang AM, 2017, ACM SIGPLAN NOTICES, V52, P14, DOI 10.1145/3156685.3092274
   Yang H, 2008, LECT NOTES COMPUT SC, V5123, P385
   Yang Xiaoxiao, 2017, ABS170106104 CORR
   Zhang SJ, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1185, DOI 10.1145/1985793.1986037
   Zhu H, 2015, LECT NOTES COMPUT SC, V9207, P3, DOI 10.1007/978-3-319-21668-3_1
NR 145
TC 5
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 68
DI 10.1145/3371136
PG 36
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400069
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Chatterjee, K
   Pavlogiannis, A
   Toman, V
AF Chatterjee, Krishnendu
   Pavlogiannis, Andreas
   Toman, Viktor
TI Value-Centric Dynamic Partial Order Reduction
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrency; stateless model checking; partial-order reduction
AB The verification of concurrent programs remains an open challenge, as thread interaction has to be accounted for, which leads to state-space explosion. Stateless model checking battles this problem by exploring traces rather than states of the program. As there are exponentially many traces, dynamic partial-order reduction (DPOR) techniques are used to partition the trace space into equivalence classes, and explore a few representatives from each class. The standard equivalence that underlies most DPOR techniques is the happens-before equivalence, however recent works have spawned a vivid interest towards coarser equivalences. The efficiency of such approaches is a product of two parameters: (i) the size of the partitioning induced by the equivalence, and (ii) the time spent by the exploration algorithm in each class of the partitioning.
   In this work, we present a new equivalence, called value-happens-before and show that it has two appealing features. First, value-happens-before is always at least as coarse as the happens-before equivalence, and can be even exponentially coarser. Second, the value-happens-before partitioning is efficiently explorable when the number of threads is bounded. We present an algorithm called value-centric DPOR (VC-DPOR), which explores the underlying partitioning using polynomial time per class. Finally, we perform an experimental evaluation of VC-DPOR on various benchmarks, and compare it against other state-of-the-art approaches. Our results show that value-happens-before typically induces a significant reduction in the size of the underlying partitioning, which leads to a considerable reduction in the running time for exploring the whole partitioning.
C1 [Chatterjee, Krishnendu; Toman, Viktor] IST Austria, Campus 1, A-3400 Klosterneuburg, Austria.
   [Pavlogiannis, Andreas] Ecole Polytech Fed Lausanne, Route Cantonale, CH-1015 Lausanne, Switzerland.
C3 Institute of Science & Technology - Austria; Swiss Federal Institutes of
   Technology Domain; Ecole Polytechnique Federale de Lausanne
RP Chatterjee, K (corresponding author), IST Austria, Campus 1, A-3400 Klosterneuburg, Austria.
EM chatterjee@ist.ac.at; pavlogiannis@cs.au.dk; viktortoman@ist.ac.al
RI ; Pavlogiannis, Andreas/X-6831-2018
OI Toman, Viktor/0000-0001-9036-063X; Pavlogiannis,
   Andreas/0000-0002-8943-0722
FU Austrian Science Fund (FWF) NFN [S11407N23, S11402-N23]; Vienna Science
   and Technology Fund (WWTF) [ICT15-003]; Austrian Science Fund(FWF)
   [J-4220]
FX The authors would also like to thank anonymous referees for their
   valuable comments and helpful suggestions. This work is supported by the
   Austrian Science Fund (FWF) NFN grants S11407N23 (RiSE/SHiNE) and
   S11402-N23 (RiSE/SHiNE), by the Vienna Science and Technology Fund
   (WWTF) Project ICT15-003, and by the Austrian Science Fund (FWF)
   Schrodinger grant J-4220.
CR Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Abdulla Parosh Aziz, 2015, TACAS
   Albert E, 2017, LECT NOTES COMPUT SC, V10426, P526, DOI 10.1007/978-3-319-63387-9_26
   Alglave Jade, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P141, DOI 10.1007/978-3-642-39799-8_9
   Andrews T, 2004, LECT NOTES COMPUT SC, V3114, P484
   [Anonymous], 1996, LECT NOTES COMPUTER, DOI DOI 10.1007/3-540-60761-7
   [Anonymous], 2008, OSDI 2008
   [Anonymous], 1991, Applications and Theory of Petri Nets, volume 483 of Lecture Notes in Computer Science
   Aronis S, 2018, LECT NOTES COMPUT SC, V10806, P229, DOI 10.1007/978-3-319-89963-3_14
   Burns James, 1980, P 18 ANN ALL C COMM
   Cadiou Jean-Marie, 1973, SWAT
   Chalupa Marek, 2017, PROC ACM PROGRAM LAN
   Chatterjee K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360550
   Clarke E. M., 1999, International Journal on Software Tools for Technology Transfer, V2, P279, DOI 10.1007/s100090050035
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Clarke EM, 1999, MODEL CHECKING, P1
   Correia Andreia, 2016, 2 THREAD SOFTWARE SO
   Demsky B, 2015, ACM SIGPLAN NOTICES, V50, P20, DOI [10.1145/2814270.2814297, 10.1145/2858965.2814297]
   Dijkstra E. W., 1983, Communications of the ACM, V26, P21, DOI 10.1145/357980.357989
   Farzan A, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P297
   Farzan A, 2009, LECT NOTES COMPUT SC, V5505, P155, DOI 10.1007/978-3-642-00768-2_14
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   GODEFROID P, 1995, FORM METHOD SYST DES, V7, P227, DOI 10.1007/BF01384077
   Godefroid P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P174, DOI 10.1145/263699.263717
   Godefroid P, 2005, FORM METHOD SYST DES, V26, P77, DOI 10.1007/s10703-005-1489-x
   Huang J, 2015, ACM SIGPLAN NOTICES, V50, P165, DOI [10.1145/2737924.2737975, 10.1145/2813885.2737975]
   Huang SY, 2016, ACM SIGPLAN NOTICES, V51, P447, DOI 10.1145/3022671.2984025
   Huang Shiyou, 2017, 31 EUR C OBJ OR PROG, DOI 10.4230/LIPIcs.ECOOP.2017.16
   Kähkönen K, 2012, IEEE INT CONF AUTOM, P150, DOI 10.1145/2351676.2351698
   KATZ S, 1992, THEOR COMPUT SCI, V101, P337, DOI 10.1016/0304-3975(92)90054-J
   KESSELS JLW, 1982, ACTA INFORM, V17, P135, DOI 10.1007/BF00288966
   KNUTH DE, 1966, COMMUN ACM, V9, P321, DOI 10.1145/355592.365595
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Lal A, 2009, FORM METHOD SYST DES, V35, P73, DOI 10.1007/s10703-009-0078-9
   Lauterburg S, 2010, LECT NOTES COMPUT SC, V6013, P308, DOI 10.1007/978-3-642-12029-9_22
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   MAZURKIEWICZ A, 1987, LECT NOTES COMPUT SC, V255, P279
   MCMILLAN KL, 1995, FORM METHOD SYST DES, V6, P45, DOI 10.1007/BF01384314
   Musuvathi M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P446, DOI 10.1145/1250734.1250785
   Musuvathi Tom Ball Madan, 2007, CHESS SYSTEMATIC TES
   Nguyen HTT, 2018, LECT NOTES COMPUT SC, V10982, P354, DOI 10.1007/978-3-319-96142-2_22
   Peled D., 1993, Computer Aided Verification. 5th International Conference, CAV '93 Proceedings, P409
   Peterson Gary L., 1977, P 9 ANN ACM S THEOR, P91, DOI [10.1145/800105.803398, DOI 10.1145/800105.803398]
   PETERSON GL, 1981, INFORM PROCESS LETT, V12, P115, DOI 10.1016/0020-0190(81)90106-X
   Petri C. A., 1962, THESIS U HAMBURG
   Rodriguez C., 2015, CONCUR LIPICS, V42, P456, DOI 10.4230/LIPIcs.CONCUR.2015.456
   Saarikivi O., 2012, ACSD
   Sen K, 2007, LECT NOTES COMPUT SC, V4383, P166
   Sen Koushik, 2006, FASE
   Szymanski B. K., 1988, Conference Proceedings. 1988 International Conference on Supercomputing, P621, DOI 10.1145/55364.55425
   Tasharofi Samira, 2012, Formal Techniques for Distributed Systems. Joint 14th IFIP WG 6.1 International Conference, FMOODS 2012 and 32nd IFIP WG 6.1 International Conference, FORTE 2012, P219, DOI 10.1007/978-3-642-30793-5_14
   Tsay YK, 1998, LECT NOTES COMPUT SC, V1499, P393, DOI 10.1007/BFb0056497
   Wang C, 2008, LECT NOTES COMPUT SC, V4963, P382, DOI 10.1007/978-3-540-78800-3_29
NR 53
TC 13
Z9 13
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 124
DI 10.1145/3360550
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500009
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Henriksen, I
   Bilardi, G
   Pingali, K
AF Henriksen, Ian
   Bilardi, Gianfranco
   Pingali, Keshav
TI Derivative Grammars: A Symbolic Approach to Parsing with Derivatives
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE context-free grammars; parsing with derivatives; Earley's algorithm
AB We present a novel approach to context-free grammar parsing that is based on generating a sequence of grammars called derivative grammars from a given context-free grammar and input string. The generation of the derivative grammars is described by a few simple inference rules. We present an O(n(2)) space and O(n(3)) time recognition algorithm, which can be extended to generate parse trees in O(n(3)) time and O(n(2) log n) space. Derivative grammars can be viewed as a symbolic approach to implementing the notion of derivative languages, which was introduced by Brzozowski.
   Might and others have explored an operational approach to implementing derivative languages in which the context-free grammar is encoded as a collection of recursive algebraic data types in a functional language like Haskell. Functional language implementation features like knot-tying and lazy evaluation are exploited to ensure that parsing is done correctly and efficiently in spite of complications like left-recursion. In contrast, our symbolic approach using inference rules can be implemented easily in any programming language and we obtain better space bounds for parsing.
   Reifying derivative languages by encoding them symbolically as grammars also enables formal connections to be made for the first time between the derivatives approach and classical parsing methods like the Earley and LL/LR parsers. In particular, we show that the sets of Earley items maintained by the Earley parser implicitly encode derivative grammars and we give a procedure for producing derivative grammars from these sets. Conversely, we show that our derivative grammar recognizer can be transformed into the Earley recognizer by optimizing some of its bookkeeping. These results suggest that derivative grammars may provide a new foundation for context-free grammar recognition and parsing.
C1 [Henriksen, Ian] Univ Texas Austin, Oden Inst Computat Engn & Sci, 201 E 24th St,POB 4-102, Austin, TX 78712 USA.
   [Bilardi, Gianfranco] Univ Padua, Dipartimento Ingn Informaz, Via Gradenigo 6-B, I-35131 Padua, Italy.
   [Pingali, Keshav] Univ Texas Austin, Dept Comp Sci, 2317 Speedway, Austin, TX 78712 USA.
C3 University of Texas System; University of Texas Austin; University of
   Padua; University of Texas System; University of Texas Austin
RP Henriksen, I (corresponding author), Univ Texas Austin, Oden Inst Computat Engn & Sci, 201 E 24th St,POB 4-102, Austin, TX 78712 USA.
EM ian@oden.utexas.edu; bilardi@unipd.it; pingali@cs.utexas.edu
OI Henriksen, Ian/0000-0002-2053-7265
FU NSF [1406355, 1618425, 1705092, 1725322]; DARPA [FA8750-16-2-0004,
   FA8650-15-C-7563]; Direct For Computer & Info Scie & Enginr; Division of
   Computing and Communication Foundations [1725322] Funding Source:
   National Science Foundation; Division Of Computer and Network Systems;
   Direct For Computer & Info Scie & Enginr [1705092] Funding Source:
   National Science Foundation
FX This research was supported by NSF grants 1406355, 1618425, 1705092, and
   1725322, and by DARPA contracts FA8750-16-2-0004 and FA8650-15-C-7563.
CR Adams MD, 2016, ACM SIGPLAN NOTICES, V51, P224, DOI [10.1145/2908080.2908128, 10.1145/2980983.2908128]
   [Anonymous], 2000, Programming Perl
   Brachthauser Jonathan Immanuel, 2016, P 2016 ACM SIGPLAN I
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Danielsson NA, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P285
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Kegler Jeffrey, 2017, MARPASR2
   LEO JMIM, 1991, THEOR COMPUT SCI, V82, P165, DOI 10.1016/0304-3975(91)90180-A
   MatthewFlatt and PLT, 2010, PLTTR20101
   Meurer A, 2017, PEERJ COMPUT SCI, DOI 10.7717/peerj-cs.103
   Might M, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P189
   Cardona PAN, 2015, CUAD ACT, P154
   Parr Terence, 2011, PLDI, DOI [10.1145/1993498.1993548, DOI 10.1145/1993498.1993548]
   Scott E, 2008, ELECTRON NOTES THEOR, V203, P53, DOI 10.1016/j.entcs.2008.03.044
   Sippu S., 1988, PARSING THEORY
   Thiemann P, 2017, LECT NOTES COMPUT SC, V10203, P248, DOI 10.1007/978-3-662-54458-7_15
NR 17
TC 5
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 127
DI 10.1145/3360553
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500012
OA gold
DA 2024-07-18
ER

PT J
AU Li, Y
   Wang, SH
   Nguyen, TN
   Nguyen, SV
AF Li, Yi
   Wang, Shaohua
   Nguyen, Tien N.
   Son Van Nguyen
TI Improving Bug Detection via Context-Based Code Representation Learning
   and Attention-Based Neural Networks
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Bug Detection; Deep Learning; Code Representation Learning; Network
   Embedding; Program Graphs; Attention Neural Networks
AB Bug detection has been shown to be an effective way to help developers in detecting bugs early, thus, saving much effort and time in software development process. Recently, deep learning-based bug detection approaches have gained successes over the traditional machine learning-based approaches, the rule-based program analysis approaches, and mining-based approaches. However, they are still limited in detecting bugs that involve multiple methods and suffer high rate of false positives. In this paper, we propose a combination approach with the use of contexts and attention neural network to overcome those limitations. We propose to use as the global context the Program Dependence Graph (PDG) and Data Flow Graph (DFG) to connect the method under investigation with the other relevant methods that might contribute to the buggy code. The global context is complemented by the local context extracted from the path on the AST built from the method's body. The use of PDG and DR; enables our model to reduce the false positive rate, while to complement for the potential reduction in recall, we make use of the attention neural network mechanism to put more weights on the buggy paths in the source code. That is, the paths that are similar to the buggy paths will be ranked higher, thus, improving the recall of our model. We have conducted several experiments to evaluate our approach on a very large dataset with +4.973M methods in 92 different project versions. The results show that our tool can have a relative improvement up to 160% on F-score when comparing with the state-of-the-art bug detection approaches. Our tool can detect 48 true bugs in the list of top 100 reported bugs, which is 24 more true bugs when comparing with the baseline approaches. We also reported that our representation is better suitable for bug detection and relatively improves over the other representations up to 206% in accuracy.
C1 [Li, Yi; Wang, Shaohua] New Jersey Inst Technol, Dept Informat, Newark, NJ 07102 USA.
   [Nguyen, Tien N.; Son Van Nguyen] Univ Texas Dallas, Comp Sci Dept, 800 W Campbell Rd, Richardson, TX 75080 USA.
C3 New Jersey Institute of Technology; University of Texas System;
   University of Texas Dallas
RP Wang, SH (corresponding author), New Jersey Inst Technol, Dept Informat, Newark, NJ 07102 USA.
EM yl622@njit.edu; davidsw@njit.edu; tien.n.nguyen@utdallas.edu;
   sonnguyen@utdallas.edu
RI Li, Yi/ISA-9366-2023; Wang, Shaohua/AAF-7235-2019; Nguyen,
   Son/AFV-2985-2022
FU US National Science Foundation (NSF) [CCF-1723215, CCF-1723432,
   TWC-1723198, CCF-1518897, CNS-1513263]
FX This material is based upon work partially supported by the US National
   Science Foundation (NSF) under Grant No. CCF-1723215, Grant No.
   CCF-1723432, Grant No. TWC-1723198, Grant No. CCF-1518897, and Grant No.
   CNS-1513263. Any opinions, findings, and conclusions or recommendations
   expressed in this material are those of the author and do not
   necessarily reflect the views of the National Science Foundation.
CR Allamanis M, 2016, PR MACH LEARN RES, V48
   [Anonymous], 2010, P 19 INT S SOFTW TES, DOI [10.1145/1831708.1831723, DOI 10.1145/1831708.1831723]
   [Anonymous], 2019, GITHUB REPOSITORY TH
   [Anonymous], 2007, 6th joint meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC/FSE), DOI DOI 10.1145/1287624.1287632
   [Anonymous], 2015, COMPUT SCI
   [Anonymous], 2018, ABS180309473 CORR
   [Anonymous], 2006, COMP 21 ACM SIGPLAN, DOI DOI 10.1145/1176617
   Ayewah N, 2007, PASTE'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN- SIGSOFT WORKSHOP ON PROGRAM ANALYSIS FOR SOFTWARE TOOLS & ENGINEERING, P1, DOI 10.1145/1251535.1251536
   Bhatia Sahil, 2016, ABS160306129 CORR
   Bian P, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P411, DOI 10.1145/3236024.3236032
   Bielik P, 2016, PR MACH LEARN RES, V48
   Chen K., 2013, EFFICIENT ESTIMATION, P2
   Cho K., 2014, PROCS C EMPIRICAL ME, P1724, DOI DOI 10.3115/V1/D14-1179
   Engler D., 2001, Operating Systems Review, V35, P57, DOI 10.1145/502059.502041
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Grover A, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P855, DOI 10.1145/2939672.2939754
   Henkel J, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P163, DOI 10.1145/3236024.3236085
   Hindle A, 2012, PROC INT CONF SOFTW, P837, DOI 10.1109/ICSE.2012.6227135
   Hovemeyer D, 2007, PASTE'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN- SIGSOFT WORKSHOP ON PROGRAM ANALYSIS FOR SOFTWARE TOOLS & ENGINEERING, P9, DOI 10.1145/1251535.1251537
   Jin GL, 2012, ACM SIGPLAN NOTICES, V47, P77, DOI 10.1145/2345156.2254075
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   Kim H., 2020, IEEE J SEL AREAS INF, V1, P9436, DOI [10.1109/jsait.2020.2986752, DOI 10.1109/JSAIT.2020.2986752, 10.1109/JSAIT.2020.2986752]
   Krizhevsky Alex, 2012, Advances in neural information processing systems
   Le Cun Yann, 1989, ADV NEURAL INFORM PR, V1
   Li Ge, 2014, ABS14095718 ARXIV
   Li LQ, 2017, PROC IEEE INT CONF S, P249, DOI 10.1109/ICSME.2017.46
   Li Zhenmin, 2005, P ACM SIGSOFT SOFTW, P306, DOI DOI 10.1145/1081706.1081755
   Liang B, 2016, PROC INT CONF SOFTW, P333, DOI 10.1145/2884781.2884870
   Livshits V.B., 2005, ESEC SIGSOFT FSE, P296, DOI [DOI 10.1145/1095430.1081754, DOI 10.1145/1081706.1081754]
   Mikolov Tomas, 27 ANN C NEUR INF PR
   Mockus A, 2000, PROC IEEE INT CONF S, P120, DOI 10.1109/ICSM.2000.883028
   Nam J, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P508, DOI 10.1145/2786805.2786814
   Nguyen HA, 2009, LECT NOTES COMPUT SC, V5503, P440
   Nguyen Tung Thanh, P 7 JOINT M EUR SOFT
   Olivo O, 2015, ACM SIGPLAN NOTICES, V50, P369, DOI [10.1145/2813885.2737966, 10.1145/273924.2737966]
   Pradel Michael, 2016, LEARNING FUZZ APPL I
   Pradel Michael, 2018, ABS180511683 CORR
   Ray B, 2016, PROC INT CONF SOFTW, P428, DOI 10.1145/2884781.2884848
   Ray B, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P155, DOI 10.1145/2635868.2635922
   Reps Thomas W., 2017, ABS170509231 CORR
   Smith R., 2009, DETECTING MEASURING
   Soot, SOOT INTR
   Tai KS, 2015, PROCEEDINGS OF THE 53RD ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS AND THE 7TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING, VOL 1, P1556
   Toman John, 2017, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V18, P1
   Tufano M, 2018, IEEE WORK CONF MIN S, P542, DOI 10.1145/3196398.3196431
   Vaswani A, 2017, ADV NEUR IN, V30
   WALA, WALA DOC
   Wang S, 2016, PROC INT CONF SOFTW, P297, DOI 10.1145/2884781.2884804
   Wang S, 2016, IEEE INT CONF AUTOM, P708, DOI 10.1145/2970276.2970341
   White M, 2016, IEEE INT CONF AUTOM, P87, DOI 10.1145/2970276.2970326
   Zhao G, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P141, DOI 10.1145/3236024.3236068
NR 51
TC 79
Z9 86
U1 2
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 162
DI 10.1145/3360588
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500047
OA gold
DA 2024-07-18
ER

PT J
AU Rahmani, K
   Nagar, K
   Delaware, B
   Jagannathan, S
AF Rahmani, Kia
   Nagar, Kartik
   Delaware, Benjamin
   Jagannathan, Suresh
TI CLOTHO: Directed Test Generation for Weakly Consistent Database Systems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Static Analysis; Serializability; Weak Consistency
ID SERIALIZABILITY
AB Relational database applications are notoriously difficult to test and debug. Concurrent execution of database transactions may violate complex structural invariants that constraint how changes to the contents of one (shared) table affect the contents of another. Simplifying the underlying concurrency model is one way to ameliorate the difficulty of understanding how concurrent accesses and updates can affect database state with respect to these sophisticated properties. Enforcing serializable execution of all transactions achieves this simplification, but it comes at a significant price in performance, especially at scale, where database state is often replicated to improve latency and availability.
   To address these challenges, this paper presents a novel testing framework for detecting serializability violations in (SQL) database-backed Java applications executing on weakly-consistent storage systems. We manifest our approach in a tool named CLOTHO, that combines a static analyzer and a model checker to generate abstract executions, discover serializability violations in these executions, and translate them back into concrete test inputs suitable for deployment in a test environment. To the best of our knowledge, CLOTHO is the first automated test generation facility for identifying serializability anomalies of Java applications intended to operate in geo-replicated distributed environments. An experimental evaluation on a set of industry-standard benchmarks demonstrates the utility of our approach.
C1 [Rahmani, Kia; Nagar, Kartik; Delaware, Benjamin; Jagannathan, Suresh] Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Rahmani, K (corresponding author), Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
EM rahmani@purdue.edu; nagark@purdue.edu; bendy@purdue.edu;
   suresh@cs.purdue.edu
CR Adya A., 2000, Proceedings of 16th International Conference on Data Engineering (Cat. No.00CB37073), P67, DOI 10.1109/ICDE.2000.839388
   Adya A., 1999, THESIS
   Alvaro P., 2011, CIDR, P249
   [Anonymous], 1995, P 1995 ACM SIGMOD IN
   Bailis P, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P27, DOI 10.1145/2588555.2588562
   Bailis P, 2014, PROC VLDB ENDOW, V8, P185, DOI 10.14778/2735508.2735509
   Balegas Valter, 2015, P 10 EUR C COMP SYST
   Bernardi G., 27th International Conference on Concurrency Theory, CONCUR 2016, August 23-26, 2016, Quebec City, Canada, 2016, p7:1, DOI DOI 10.4230/LIPICS.CONCUR.2016.7
   Brutschy L, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P90, DOI 10.1145/3192366.3192415
   Brutschy L, 2017, ACM SIGPLAN NOTICES, V52, P458, DOI 10.1145/3093333.3009895
   Burckhardt S, 2014, ACM SIGPLAN NOTICES, V49, P271, DOI 10.1145/2535838.2535848
   Cerone A., 28th International Conference on Concurrency Theory, CONCUR 2017, September 5-8, 2017, Berlin, Germany, 2017, p26:1, DOI DOI 10.4230/LIPICS.CONCUR.2017.26
   Cerone A, 2016, PROCEEDINGS OF THE 2016 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC'16), P55, DOI 10.1145/2933057.2933096
   Cerone Andrea, 2015, CONCUR, P58
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Difallah DE, 2013, PROC VLDB ENDOW, V7, P277, DOI 10.14778/2732240.2732246
   Fekete A, 2005, ACM T DATABASE SYST, V30, P492, DOI 10.1145/1071610.1071615
   Flanagan C, 2004, ACM SIGPLAN NOTICES, V39, P256, DOI 10.1145/982962.964023
   Flanagan C, 2003, ACM SIGPLAN NOTICES, V38, P338, DOI 10.1145/780822.781169
   Gotsman A, 2016, ACM SIGPLAN NOTICES, V51, P371, DOI 10.1145/2914770.2837625
   Hammer C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P231, DOI 10.1145/1368088.1368120
   Huang J, 2013, ACM SIGPLAN NOTICES, V48, P141, DOI 10.1145/2499370.2462167
   Jorwekar Sudhir., 2007, VLDB 07, P1263
   Kaki G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276534
   Killian Charles., 2007, P 4 USENIX C NETWORK, P18
   Lesani M, 2016, ACM SIGPLAN NOTICES, V51, P357, DOI 10.1145/2914770.2837622
   Li Cheng, 2012, 10 USENIX S OP SYST, P265
   Li Cheng, 2014, 2014 USENIX Annual Technical Conference (USENIX ATC 14), P281
   Lu S, 2006, ACM SIGPLAN NOTICES, V41, P37, DOI 10.1145/1168918.1168864
   Lucia B, 2010, CONF PROC INT SYMP C, P222, DOI 10.1145/1816038.1815988
   Machado N, 2015, ACM SIGPLAN NOTICES, V50, P586, DOI [10.1145/2813885.2737973, 10.1145/2737924.2737973]
   McCloskey B, 2006, ACM SIGPLAN NOTICES, V41, P346, DOI 10.1145/1111320.1111068
   Nagar K., 29th International Conference on Concurrency Theory, CONCUR 2018, September 4-7, 2018, Beijing, China, 2018, p41:1, DOI [DOI 10.4230/LIPICS.CONCUR.2018.41, 10.4230/LIPIcs.CONCUR. 2018.41]
   PAPADIMITRIOU CH, 1979, J ACM, V26, P631, DOI 10.1145/322154.322158
   Rahmani K, 2018, PROCEEDINGS OF THE 5TH WORKSHOP ON THE PRINCIPLES AND PRACTICE OF CONSISTENCY FOR DISTRIBUTED DATA (PAPOC'18), DOI 10.1145/3194261.3194267
   Rahmani Kia, 2019, CLOTHO DIRECTED TEST
   Rajamani S, 2009, ACM SIGPLAN NOTICES, V44, P181, DOI 10.1145/1508284.1508266
   Shan Lu, 2007, Operating Systems Review, V41, P103, DOI 10.1145/1323293.1294272
   Shasha D.E., 2003, Database Tuning: Principles, Experiments, and Troubleshooting Techniques
   Sivaramakrishnan KC, 2015, ACM SIGPLAN NOTICES, V50, P413, DOI [10.1145/2813885.2737981, 10.1145/2737924.2737981]
   Tahboub RY, 2018, INT CONF MANAGE DATA, P307, DOI 10.1145/3183713.3196893
   Vallee-Rai R., 1999, Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'99, page, P13
   Warszawski T, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P5, DOI 10.1145/3035918.3064037
   Xu M, 2005, ACM SIGPLAN NOTICES, V40, P1, DOI 10.1145/1064978.1065013
   Zhang Y, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P276, DOI 10.1145/2517349.2522729
NR 45
TC 7
Z9 8
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 117
DI 10.1145/3360543
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500002
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Siraichi, MY
   dos Santos, VF
   Collange, C
   Pereira, FMQ
AF Siraichi, Marcos Yukio
   dos Santos, Vinicius Fernandes
   Collange, Caroline
   Quintao Pereira, Fernando Magno
TI Qubit Allocation as a Combination of Subgraph Isomorphism and Token
   Swapping
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Quantum computing; Qubit allocation; Graph isomorphism; Token swapping
ID REGISTER ALLOCATION; QUANTUM; ALGORITHM
AB In 2016, the first quantum processors have been made available to the general public. The possibility of programming an actual quantum device has elicited much enthusiasm. Yet, such possibility also brought challenges. One challenge is the so called Qubit Allocation problem: the mapping of a virtual quantum circuit into an actual quantum architecture. There exist solutions to this problem; however, in our opinion, they fail to capitalize on decades of improvements on graph theory. In contrast, this paper shows how to model qubit allocation as the combination of Subgraph Isomorphism and Token Swapping. This idea has been made possible by the publication of an approximative solution to the latter problem in 2016. We have compared our algorithm against five other qubit allocators, all independently designed in the last two years, including the winner of the IBM Challenge. When evaluated in "Tokyo", a quantum architecture with 20 qubits, our technique outperforms these state-of-the-art approaches in terms of the quality of the solutions that it finds and the amount of memory that it uses, while showing practical runtime.
C1 [Siraichi, Marcos Yukio; dos Santos, Vinicius Fernandes; Quintao Pereira, Fernando Magno] Univ Fed Minas Gerais, Belo Horizonte, MG, Brazil.
   [Collange, Caroline] Univ Rennes, IRISA, CNRS, INRIA, Rennes, France.
C3 Universidade Federal de Minas Gerais; Inria; Universite de Rennes;
   Centre National de la Recherche Scientifique (CNRS)
RP Siraichi, MY (corresponding author), Univ Fed Minas Gerais, Belo Horizonte, MG, Brazil.
EM yukio.siraichi@dcc.ufmg.br; viniciussantos@dcc.ufmg.br;
   caroline.collange@inria.fr; fernando@dcc.ufmg.br
RI Pereira, Fernando/HNR-7786-2023
FU FAPEMIG [APQ-03832-14]; CNPq [406377/2018-9]; CAPES
FX This project was funded by grants from FAPEMIG (Grant APQ-03832-14
   lCooperation FAPs-INRIA-CNRS"), CNPq (Grant 406377/2018-9) and CAPES. We
   thank the referees for the time and expertise they have put into
   reviewing our work. Their suggestions have greatly improved our paper.
CR Amy M, 2013, IEEE T COMPUT AID D, V32, P818, DOI 10.1109/TCAD.2013.2244643
   BARENCO A, 1995, PHYS REV A, V52, P3457, DOI 10.1103/PhysRevA.52.3457
   Bellman R., 1958, Q APPL MATH, V16, P87
   Blais A, 2001, PHYS REV A, V64, DOI 10.1103/PhysRevA.64.022312
   Bonnet Edouard, 2016, ARXIV160707676
   CHAITIN GJ, 1981, COMPUT LANG, V6, P47, DOI 10.1016/0096-0551(81)90048-5
   Cook S. A., 1971, Proceedings of the 3rd annual ACM symposium on theory of computing, P151
   Copsey D., 2003, PROC 15 ACM S PARALL, P65, DOI DOI 10.1145/777412.777424
   Cordella LP, 2004, IEEE T PATTERN ANAL, V26, P1367, DOI 10.1109/TPAMI.2004.75
   Cross A. W., 2017, OPEN QUANTUM ASSEMBL
   Dang AD, 2019, QUANTUM-AUSTRIA, V3, DOI 10.22331/q-2019-01-25-116
   Devitt SJ, 2016, PHYS REV A, V94, DOI 10.1103/PhysRevA.94.032329
   Devoret M. H., 2004, ARXIVCONDMAT0411174
   Erdos P., 1959, PUBL MATH-DEBRECEN, V6
   Gambetta JM, 2017, NPJ QUANTUM INFORM, V3, DOI 10.1038/s41534-016-0004-0
   Gil Dario, 2017, FUTURE COMPUTING AIQ
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Han Wook-Shin, 2013, P ACM SIGMOD INT C M, P337
   Haner Thomas, 2016, ARXIV160401401, P1
   IBM, 2016, IBM QX DEV
   Itoko T, 2019, 24TH ASIA AND SOUTH PACIFIC DESIGN AUTOMATION CONFERENCE (ASP-DAC 2019), P191, DOI 10.1145/3287624.3287701
   JavadiAbhari A., 2014, Proceedings of the 11th ACM Conference on Computing Frontiers, page, P1, DOI DOI 10.1145/2597917
   Jeffrey E, 2014, PHYS REV LETT, V112, DOI 10.1103/PhysRevLett.112.190504
   Kawahara J, 2017, LECT NOTES COMPUT SC, V10167, P448, DOI 10.1007/978-3-319-53925-6_35
   Kelly J, 2015, NATURE, V519, P66, DOI 10.1038/nature14270
   Kuhn H., 1955, NAV RES LOGIST Q, V2
   Lao L, 2018, ARXIV180511127
   Li Gushu, 2018, ASPLOS 19
   Lin CC, 2015, IEEE T VLSI SYST, V23, P1221, DOI 10.1109/TVLSI.2014.2337302
   Lin YB, 2018, IEEE T COMPUT AID D, V37, P1574, DOI 10.1109/TCAD.2017.2760511
   Magnard Paul, 2018, ARXIV180107689, P1
   Markou IN, 2018, SUSTAIN CIV INFRASTR, P1, DOI 10.1007/978-3-319-63570-5_1
   Maslov D, 2008, IEEE T COMPUT AID D, V27, P752, DOI 10.1109/TCAD.2008.917562
   Miltzow Tillmann, 2016, ESA J-EUR SPACE AGEN
   Oskin M, 2002, COMPUTER, V35, P79, DOI 10.1109/2.976922
   Pednault Edwin, 2018, ARXIV171005867, P1
   Pedram M, 2016, IEEE CIRC SYST MAG, V16, P62, DOI 10.1109/MCAS.2016.2549950
   Pereira FMQ, 2005, LECT NOTES COMPUT SC, V3780, P315
   Saito A., 2000, ARXIVQUANTPH0001113
   Shafaei A, 2014, ASIA S PACIF DES AUT, P495, DOI 10.1109/ASPDAC.2014.6742940
   Shrivastwa RR, 2015, 2015 IEEE International Symposium on Nanoelectronic and Information Systems, P95, DOI 10.1109/iNIS.2015.59
   Siraichi MY, 2018, INT SYM CODE GENER, P113, DOI 10.1145/3168822
   Surynek Pavel, 2018, ARXIV180609487
   Svore KM, 2006, COMPUTER, V39, P74, DOI 10.1109/MC.2006.4
   Svore Krysta Marie, 2004, SOFTWARE ARCHITECTUR
   Tannu SS, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P987, DOI 10.1145/3297858.3304007
   Wille R, 2008, INT SYM MVL, P220, DOI 10.1109/ISMVL.2008.43
   WOOTTERS WK, 1982, NATURE, V299, P802, DOI 10.1038/299802a0
   Yamanaka K, 2017, LECT NOTES COMPUT SC, V10167, P435, DOI 10.1007/978-3-319-53925-6_34
   Yamanaka K, 2014, LECT NOTES COMPUT SC, V8496, P364, DOI 10.1007/978-3-319-07890-8_31
   Zhao PX, 2010, PROC VLDB ENDOW, V3, P340, DOI 10.14778/1920841.1920887
   Zulehner A, 2019, 24TH ASIA AND SOUTH PACIFIC DESIGN AUTOMATION CONFERENCE (ASP-DAC 2019), P185, DOI 10.1145/3287624.3287704
   Zulehner A, 2018, DES AUT TEST EUROPE, P1135, DOI 10.23919/DATE.2018.8342181
NR 53
TC 25
Z9 28
U1 2
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 120
DI 10.1145/3360546
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500005
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Wu, BJ
   Campora, JP
   He, Y
   Schlecht, A
   Chen, S
AF Wu, Baijun
   Campora, John Peter, III
   He, Yi
   Schlecht, Alexander
   Chen, Sheng
TI Generating Precise Error Specifications for C: A Zero Shot Learning
   Approach
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Error specification generation; machine learning; project-specific
   features
AB In C programs, error specifications, which specify the value range that each function returns to indicate failures, are widely used to check and propagate errors for the sake of reliability and security. Various kinds of C analyzers employ error specifications for different purposes, e.g., to detect error handling bugs, yet a general approach for generating precise specifications is still missing. This limits the applicability of those tools.
   In this paper, we solve this problem by developing a machine learning-based approach named MLPEx. It generates error specifications by analyzing only the source code, and is thus general. We propose a novel machine learning paradigm based on transfer learning, enabling MLPEx to require only one-time minimal data labeling from us (as the tool developers) and zero manual labeling efforts from users. To improve the accuracy of generated error specifications, MLPEx extracts and exploits project-specific information. We evaluate MLPEx on 10 projects, including 6 libraries and 4 applications. An investigation of 3,443 functions and 17,750 paths reveals that MLPEx generates error specifications with a precision of 91% and a recall of 94%, significantly higher than those of state-of-the-art approaches. To further demonstrate the usefulness of the generated error specifications, we use them to detect 57 bugs in 5 tested projects.
C1 [Wu, Baijun; Campora, John Peter, III; He, Yi; Schlecht, Alexander; Chen, Sheng] UL Lafayette, Sch Scomp & Informat, 301 E Lewis St, Lafayette, LA 70503 USA.
RP Wu, BJ (corresponding author), UL Lafayette, Sch Scomp & Informat, 301 E Lewis St, Lafayette, LA 70503 USA.
EM bj.wu@louisiana.edu; campora@louisiana.edu; yi.he1@louisiana.edu;
   ads1937@louisiana.edu; chen@louisiana.edu
OI He, Yi/0000-0002-5357-6623
FU National Science Foundation [CCF-1750886]
FX We thank anonymous OOPSLA reviewers for their constructive feedback,
   which has improved both the contents and the presentation of this paper.
   This work is partially supported by the National Science Foundation
   under the grant CCF-1750886.
CR ACHARYA M, 2009, P 12 INT C FUND APPR
   Allamanis M, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3212695
   Allamanis Miltiadis, P 6 INT C LEARN REPR
   Alon U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290353
   Alon U, 2018, ACM SIGPLAN NOTICES, V53, P404, DOI [10.1145/3192366.3192412, 10.1145/3296979.3192412]
   Alpaydin E., 2009, INTRO MACHINE LEARNI
   [Anonymous], 2007, OWASP top 10
   [Anonymous], 2019, CVE201912818
   Arnold Robert S., 1996, Software Change Impact Analysis
   Bengio Y, 2013, IEEE T PATTERN ANAL, V35, P1798, DOI 10.1109/TPAMI.2013.50
   Blewitt ME, 2008, NAT GENET, V40, P663, DOI 10.1038/ng.142
   Breiman L., 2001, Machine Learning, V45, P5, DOI 10.1023/A:1010933404324
   Chae K, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133925
   Cheon Yoonsik, 2007, UTEPCS0707
   CRISTIAN F, 1982, IEEE T COMPUT, V31, P531, DOI 10.1109/TC.1982.1676035
   David Y, 2016, ACM SIGPLAN NOTICES, V51, P266, DOI [10.1145/2908080.2908126, 10.1145/2980983.2908126]
   DeFreez D, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P423, DOI 10.1145/3236024.3236059
   Dillig I, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P270, DOI 10.1145/1375581.1375615
   Dillig I, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P435, DOI 10.1145/1250734.1250784
   Geman S., 1992, Neural Computation, V4, P1, DOI 10.1162/neco.1992.4.1.1
   Goodenough J. B., 1975, Conference Record of the 2nd ACM Symposium on Principles of Programming Languages, P204
   Gunawi HS, 2008, PROCEEDINGS OF THE 6TH USENIX CONFERENCE ON FILE AND STORAGE TECHNOLOGIES (FAST '08), P207
   Hastie T., 2009, The Elements of Statistical Learning
   Hua JP, 2005, BIOINFORMATICS, V21, P1509, DOI 10.1093/bioinformatics/bti171
   JANA S, 2016, USENIX SEC S
   Kang Y, 2016, IEEE INT CONF AUTOM, P472, DOI 10.1145/2970276.2970354
   Kleinbaum D.G., 2002, Logistic Regression
   Kopanas Ioannis, 2002, METHODS APPL ARTIFIC, P746
   Li JD, 2018, ACM COMPUT SURV, V50, DOI 10.1145/3136625
   Liang B, 2016, PROC INT CONF SOFTW, P333, DOI 10.1145/2884781.2884870
   Liu H, 1995, PROC INT C TOOLS ART, P388, DOI 10.1109/TAI.1995.479783
   Long F, 2016, ACM SIGPLAN NOTICES, V51, P298, DOI 10.1145/2914770.2837617
   Marinescu PD, 2011, ACM T COMPUT SYST, V29, DOI 10.1145/2063509.2063511
   McCallum A, 1999, IJCAI-99: PROCEEDINGS OF THE SIXTEENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, VOLS 1 & 2, P662
   Meagher M, 2007, IEEE INT CONF INF VI, P601
   Muchnick S., 1997, ADV COMPILER DESIGN
   Murphy KP, 2012, MACHINE LEARNING: A PROBABILISTIC PERSPECTIVE, P27
   Myers BA, 2016, COMMUN ACM, V59, P62, DOI 10.1145/2896587
   Nagappan M, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P404, DOI 10.1145/2786805.2786834
   NEJMEH BA, 1988, COMMUN ACM, V31, P188, DOI 10.1145/42372.42379
   Nowozin Sebastian, 2017, INT C LEARN REPR
   Pan SJ, 2010, IEEE T KNOWL DATA EN, V22, P1345, DOI 10.1109/TKDE.2009.191
   Pedregosa F, 2011, J MACH LEARN RES, V12, P2825
   PERSON S, 2011, P 32 ACM SIGPLAN C P
   Pradel M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276517
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2594291.2594321, 10.1145/2666356.2594321]
   ROBBINS H, 1951, ANN MATH STAT, V22, P400, DOI 10.1214/aoms/1177729586
   Rubino-Gonzalez Cindy., 2010, Proc. 9th PASTE, P73
   RUBIOGONZALEZ C, 2009, P 30 ACM SIGPLAN C P
   Russakovsky O, 2015, INT J COMPUT VISION, V115, P211, DOI 10.1007/s11263-015-0816-y
   SEIDEL EL, 2017, ACM SIGPLAN INT C OB
   Sheng V. S., 2008, P 14 ACM SIGKDD INT, P614, DOI DOI 10.1145/1401890.1401965
   Shimodaira H, 2000, J STAT PLAN INFER, V90, P227, DOI 10.1016/S0378-3758(00)00115-4
   Süsskraut M, 2006, EDCC 2006: SIXTH EUROPEAN DEPENDABLE COMPUTING CONFERENCE, PROCEEDINGS, P13
   Sugiyama Masashi, 2008, Advances in Neural Information Processing Systems, P1433
   Tian Y, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P752, DOI 10.1145/3106237.3106300
   van der Maaten L, 2008, J MACH LEARN RES, V9, P2579
   Vapnik V., 2013, The nature of statistical learning theory
   Wang W, 2019, ACM T INTEL SYST TEC, V10, DOI 10.1145/3293318
   Weimer W, 2005, LECT NOTES COMPUT SC, V3440, P461
   Wu Baijun, 2017, ACM SIGPLAN INT C OB
   Wu Baijun, 2019, GENERATING PRECISE E
   Wu Mike, P 33 AAAI C ART INT
   Yamaguchi F, 2014, P IEEE S SECUR PRIV, P590, DOI 10.1109/SP.2014.44
   Zadrozny Bianca, 2004, ICML, P114, DOI DOI 10.1145/1015330.1015425
   Zhang Y, 2018, NPJ COMPUT MATER, V4, DOI [10.1186/s41016-018-0133-8, 10.1038/s41524-018-0081-z]
   Zhu H, 2016, ACM SIGPLAN NOTICES, V51, P491, DOI [10.1145/2980983.2908125, 10.1145/2908080.2908125]
   Zhu X, 2009, Synthesis Lectures on Artificial Intelligence and Machine Learning, V3, P1, DOI 10.1007/978-3-031-01548-9
NR 68
TC 3
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 160
DI 10.1145/3360586
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500045
OA gold
DA 2024-07-18
ER

PT J
AU Cavallo, E
   Harper, R
AF Cavallo, Evan
   Harper, Robert
TI Higher Inductive Types in Cubical Computational Type Theory
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE cubical type theory; higher inductive types; homotopy type theory
AB Homotopy type theory proposes higher inductive types (Has) as a means of defining and reasoning about inductively-generated objects with higher-dimensional structure. As with the univalence axiom, however, homotopy type theory does not specify the computational behavior of HITs. Computational interpretations have now been provided for univalence and specific HITs by way of cubical type theories, which use a judgmental infrastructure of dimension variables. We extend the cartesian cubical computational type theory introduced by Angiuli et al. with a schema for indexed cubical inductive types (CITs), an adaptation of higher inductive types to the cubical setting. In doing so, we isolate the canonical values of a cubical inductive type and prove a canonicity theorem with respect to these values.
C1 [Cavallo, Evan; Harper, Robert] Carnegie Mellon Univ, Comp Sci Dept, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Cavallo, E (corresponding author), Carnegie Mellon Univ, Comp Sci Dept, Pittsburgh, PA 15213 USA.
EM ecavallo@cs.cmu.edu; rwh@cs.cmu.edu
RI Harper, Robert/HLH-3752-2023
OI Harper, Robert/0000-0002-9400-2941; Cavallo, Evan/0000-0001-8174-7496
CR Allen Stuart F., 2006, J. Applied Logic, P428
   Altenkirch T, 2009, IEEE S LOG, P277, DOI 10.1109/LICS.2009.33
   Angiuli C., 2017, CARTESIAN CUBICAL TY
   Angiuli C., 2017, PREPRINT
   Angiuli C, 2017, ACM SIGPLAN NOTICES, V52, P680, DOI 10.1145/3093333.3009861
   Angiuli Carlo, 2018, 27 EACSL ANN C COMP 27 EACSL ANN C COMP
   [Anonymous], 2014, TYPES PROOFS PROGRAM
   Awodey S, 2012, IEEE S LOG, P95, DOI 10.1109/LICS.2012.21
   Basold H, 2017, J UNIVERS COMPUT SCI, V23, P63
   Cavallo Evan, 2018, ARXIV180101568
   Cohen C., 2018, 21 INT C TYPES PROOF, V5, P34
   COQUAND T, 1990, LECT NOTES COMPUT SC, V417, P50
   Coquand T, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P255, DOI 10.1145/3209108.3209197
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   Dybjer Peter, 2017, MATH FDN PROGR SEM 3 MATH FDN PROGR SEM 3
   Hofmann M., 1998, Twenty-five years of constructive type theory, Oxf. Logic Guides, V36, P83
   Huber Simon, 2016, THESIS U GOTHENBURG THESIS U GOTHENBURG
   Kaposi Ambrus, 2018, 3 INT C FORM STRUCT 3 INT C FORM STRUCT
   Kraus N, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P595, DOI 10.1145/2933575.2933586
   Lumsdaine Peter LeFanu, 2017, ARXIV170507088
   Lumsdaine Peter LeFanu, 2011, MODEL STRUCTURES HIG
   Martin-Lf P., 1982, Stud. Logic Found. Math, V104, P153, DOI [DOI 10.1016/S0049-237X(09)70189-2, 10.1016/ S0049-237X(09)70189-2.]
   Martin-Lof P., 1975, STUDIES LOGIC FDN MA, V80, P73
   Rijke Egbert, 2017, ARXIV170107538
   Sojakova K, 2015, ACM SIGPLAN NOTICES, V50, P31, DOI [10.1145/2676726.2676983, 10.1145/2775051.2676983]
   Swan A, 2018, ARXIV180800915
   Swan Andrew, 2018, ARXIV180800920
   Swan Andrew, 2014, ARXIV14091829
   The RedPRL Development Team, 2018, REDPRL PEOPL REF LOG REDPRL PEOPL REF LOG
   The RedPRL Development Team, 2018, REDTT
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   van Doorn F, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P122, DOI 10.1145/2854065.2854076
   Voevodsky V., 2010, EQUIVALENCE AXIOM UN
NR 33
TC 14
Z9 14
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 1
DI 10.1145/3290314
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300001
OA gold
DA 2024-07-18
ER

PT J
AU Florence, SP
   You, SH
   Tov, JA
   Findler, RB
AF Florence, Spencer P.
   You, Shu-Hung
   Tov, Jesse A.
   Findler, Robert Bruce
TI A Calculus for Esterel If can, can. If no can, no can
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Esterel; Synchronous Reactive Programming; Semantics
AB The language Esterel has found success in many safety-critical applications, such as fly-by-wire systems and nuclear power plant control software. Its imperative style is natural to programmers building such systems and its precise semantics makes it work well for reasoning about programs.
   Existing semantics of Esterel generally fall into two categories: translation to Boolean circuits, or operational semantics that give a procedure for running a whole program. In contrast, equational theories enable reasoning about program behavior via equational rewrites at the source level. Such theories form the basis for proofs of transformations inside compilers or for program refactorings, and defining program evaluation syntactically.
   This paper presents the first such equational calculus for Esterel. It also illustrates the calculus's usefulness with a series of example equivalences and discuss how it enabled us to find bugs in Esterel implementations.
C1 [Florence, Spencer P.; You, Shu-Hung; Tov, Jesse A.; Findler, Robert Bruce] Northwestern Univ, Evanston, IL 60208 USA.
C3 Northwestern University
RP Florence, SP (corresponding author), Northwestern Univ, Evanston, IL 60208 USA.
EM spencer.florence@eecs.northwestern.edu;
   shu-hung.you@eecs.northwestern.edu; jesse@eecs.northwestern.edu;
   robby@eecs.northwestern.edu
FU NSF [CCF-1526109]
FX Thanks to Daniel Feltey, Christos Dimoulas, and Vincent St-Amour for
   their feedback on drafts of this paper. Thanks to Colin Vidal, Gerard
   Berry, and Manuel Serrano for their help with Hiphop.js, Esterel v5 and,
   more generally, understanding Esterel's semantics and feedback on this
   work. Thanks to Matthias Felleisen for his help with how to structure
   the proofs and help understanding the semantics of state. A special
   thanks to Gerard Berry for suggesting that we use Newman's lemma;
   without it we would probably never have finished the proof of
   confluence. This work was supported by NSF proposal CCF-1526109.
CR [Anonymous], 2010, PLTTR20101 INC
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   BENVENISTE A, 1991, P IEEE, V79, P1270, DOI 10.1109/5.97297
   Benveniste A, 2003, P IEEE, V91, P64, DOI 10.1109/JPROC.2002.805826
   Berry G, 2000, SCI COMPUT PROGRAM, V36, P5, DOI 10.1016/S0167-6423(99)00015-5
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   Berry G., 2000, ESTEREL V5 LANGUAGE
   Berry Gerard, 2011, P PLASTIC P PLASTIC
   Berry Gerard., 2002, The Constructive Semantics of Pure Esterel (Draft Version 3)
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Florence Spencer P., 2015, P GPCE P GPCE
   Kuper Lindsey, 2013, P WORKSH FUNCT HIGH P WORKSH FUNCT HIGH
   Mendler M, 2012, FORM METHOD SYST DES, V40, P283, DOI 10.1007/s10703-012-0144-6
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Potop-Butucaru Dumitru., 2007, Compiling Esterel, V1st
   Potop-Butucaru Dumitru, 2002, THESIS ECOLE MINES P THESIS ECOLE MINES P
   Schneider Klaus, 2001, P INT C COMP ARCH SY P INT C COMP ARCH SY
   Serrano Manuel, 1995, P STAT AN S P STAT AN S
   Tardieu O, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1216374.1216376
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
NR 22
TC 3
Z9 3
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 61
DI 10.1145/3290374
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300061
OA gold
DA 2024-07-18
ER

PT J
AU Gorinova, MI
   Gordon, AD
   Sutton, C
AF Gorinova, Maria, I
   Gordon, Andrew D.
   Sutton, Charles
TI Probabilistic Programming with Densities in SlicStan: Efficient,
   Flexible, and Deterministic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programming; information flow analysis
ID SEMANTICS; SAMPLER
AB Stan is a probabilistic programming language that has been increasingly used for real-world scalable projects. However, to make practical inference possible, the language sacrifices some of its usability by adopting a block syntax, which lacks compositionality and flexible user-defined functions. Moreover, the semantics of the language has been mainly given in terms of intuition about implementation, and has not been formalised.
   This paper provides a formal treatment of the Stan language, and introduces the probabilistic programming language SlicStan - a compositional, self-optimising version of Stan. Our main contributions are (1) the formalisation of a core subset of Stan through an operational density-based semantics; (2) the design and semantics of the Stan-like language SlicStan, which facilities better code reuse and abstraction through its compositional syntax, more flexible functions, and information-flow type system; and (3) a formal, semantic-preserving procedure for translating SlicStan to Stan.
C1 [Gorinova, Maria, I; Gordon, Andrew D.; Sutton, Charles] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
   [Gordon, Andrew D.] Microsoft Res Cambridge, Cambridge, England.
   [Sutton, Charles] Google Brain, Mountain View, CA USA.
C3 University of Edinburgh; Microsoft; Google Incorporated
RP Gorinova, MI (corresponding author), Univ Edinburgh, Edinburgh, Midlothian, Scotland.
FU EPSRC Centre for Doctoral Training in Data Science - UK Engineering and
   Physical Sciences Research Council [EP/L016427/1]; University of
   Edinburgh
FX We thank Bob Carpenter and the Stan team for insightful discussions, and
   the anonymous reviewers and George Papamakarios for useful comments.
   Maria Gorinova was supported by the EPSRC Centre for Doctoral Training
   in Data Science, funded by the UK Engineering and Physical Sciences
   Research Council (grant EP/L016427/1) and the University of Edinburgh.
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   [Anonymous], 2013, THE BUGS BOOK
   [Anonymous], 2003, P 3 INT C DISTRIBUTE
   [Anonymous], 2014, Infer.NET 2.6
   [Anonymous], WORKSH MACH LEARN PR
   [Anonymous], 2018, greta: Simple and Scalable Statistical Modelling in R
   [Anonymous], 2013, ESEC SIGSOFT FSE
   [Anonymous], 2007, Advances in Markov chain Monte Carlo methods
   Bates D., 2014, LME4 LINEAR MIXED EF, DOI [10.18637/jss.v067.i01, DOI 10.18637/JSS.V067.I01]
   Betancourt Michael, 2014, LECT NOTES
   Betancourt Michael, 2017, ARXIV PREPRINT ARXIV
   Bishop C., 2002, Advances in Neural Information Processing Systems, V15, P777
   Borgström J, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI [10.1145/2951913.2951942, 10.1145/3022670.2951942]
   Borgström J, 2011, LECT NOTES COMPUT SC, V6602, P77, DOI 10.1007/978-3-642-19718-5_5
   Borgstrom Johannes, P 43 ANN ACM SIGPLAN, P271, DOI [10.1145/28376142837653, DOI 10.1145/28376142837653]
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   Chasins S, 2017, LECT NOTES COMPUT SC, V10426, P279, DOI 10.1007/978-3-319-63387-9_14
   Dal Lago U, 2012, RAIRO-THEOR INF APPL, V46, P413, DOI 10.1051/ita/2012012
   Ge H, 2018, PR MACH LEARN RES, V84
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   Gelman A., 2013, BAYESIAN DATA ANAL, Vthird, DOI DOI 10.1201/B16018
   GILKS WR, 1994, STATISTICIAN, V43, P169, DOI 10.2307/2348941
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Goodman Noah, 2012, ARXIV PREPRINT ARXIV
   Gordon AD, 2014, ACM SIGPLAN NOTICES, V49, P321, DOI 10.1145/2535838.2535850
   Gordon Andrew D., FUTURE SOFTWARE ENG, P167
   Gorinova MI, 2016, 34TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, CHI 2016, P2533, DOI 10.1145/2858036.2858221
   Gorinova Maria I., STANCON, DOI [10.5281/zenodo.1284348, DOI 10.5281/ZENODO.1284348]
   Gorinova Maria I., 2018, ARXIV PREPRINT ARXIV
   Gorinova Maria I., 2018, PROBABILISTIC PROGRA
   Heunen Chris, 2017, ARXIV PREPRINT ARXIV
   Hoffman MD, 2014, J MACH LEARN RES, V15, P1593
   Huang D, 2016, LECT NOTES COMPUT SC, V9632, P337, DOI 10.1007/978-3-662-49498-1_14
   Hur CK, 2014, ACM SIGPLAN NOTICES, V49, P133, DOI [10.1145/2666356.2594303, 10.1145/2594291.2594303]
   Hur Chung-Kil, 2015, 35 IARCS ANN C FDN S, P475
   JONES C, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P186
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Mansinghka Vikash, 2014, ARXIV PREPRINT ARXIV
   Mansinghka Vikash, 2015, ARXIV PREPRINT ARXIV
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Neal RM, 2011, CH CRC HANDB MOD STA, P113
   Nori AV, 2014, AAAI CONF ARTIF INTE, P2476
   Nori AV, 2015, ACM SIGPLAN NOTICES, V50, P208, DOI [10.1145/2737924.2737982, 10.1145/2813885.2737982]
   Paszke A., 2017, AUTOMATIC DIFFERENTI
   Pfeffer Avi, 2009, Figaro: An object-oriented probabilistic programming language, V137, P96
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Salvatier J, 2016, PEERJ COMPUT SCI, DOI 10.7717/peerj-cs.55
   Scibior A, 2015, ACM SIGPLAN NOTICES, V50, P165, DOI 10.1145/2804302.2804317
   Smith G, 2007, ADV INF SEC, P291
   Stan Development Team, 2018, STAN GITHUB REP
   Stan Development Team, 2017, Stan modeling language users guide and reference manual, version 2.17.0
   Stan Development Team, RStan: the R interface to Stan
   Staton S, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P525, DOI 10.1145/2933575.2935313
   Szymczak Marcin, 2018, PROGRAMMING LANGUAGE
   Taylor Sean J., 2017, FORECASTING SCALE
   Toronto N, 2015, LECT NOTES COMPUT SC, V9032, P53, DOI 10.1007/978-3-662-46669-8_3
   Tran D, 2016, ARXIV PREPRINT ARXIV
   Tran Dustin, 2018, EDWARD2 SIMPLE DISTR
   Uber AI Labs, 2017, PYR DEEP PROB PROGR
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
NR 62
TC 11
Z9 12
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 35
DI 10.1145/3290348
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300035
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU New, MS
   Licata, DR
   Ahmed, A
AF New, Max S.
   Licata, Daniel R.
   Ahmed, Amal
TI Gradual Type Theory
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE gradual typing; graduality; call-by-push-value
ID SPACE
AB Gradually typed languages are designed to support both dynamically typed and statically typed programming styles while preserving the benefits of each. While existing gradual type soundness theorems for these languages aim to show that type-based reasoning is preserved when moving from the fully static setting to a gradual one, these theorems do not imply that correctness of type-based refactorings and optimizations is preserved. Establishing correctness of program transformations is technically difficult, because it requires reasoning about program equivalence, and is often neglected in the metatheory of gradual languages.
   In this paper, we propose an axiomatic account of program equivalence in a gradual cast calculus, which we formalize in a logic we call gradual type theory (GTT). Based on Levy's call-by-push-value, GTT gives an axiomatic account of both call-by-value and call-by-name gradual languages. Based on our axiomatic account we prove many theorems that justify optimizations and refactorings in gradually typed languages. For example, uniqueness principles for gradual type connectives show that if the fin laws hold for a connective, then casts between that connective must be equivalent to the so-called "lazy" cast semantics. Contrapositively, this shows that "eager" cast semantics violates the extensionality of function types. As another example, we show that gradual upcasts are pure functions and, dually, gradual downcasts are strict functions. We show the consistency and applicability of our axiomatic theory by proving that a contract-based implementation using the lazy cast semantics gives a logical relations model of our type theory, where equivalence in GTT implies contextual equivalence of the programs. Since all' also axiomatizes the dynamic gradual guarantee, our model also establishes this central theorem of gradual typing. The model is parametrized by the implementation of the dynamic types, and so gives a family of implementations that validate type-based optimization and the gradual guarantee.
C1 [New, Max S.; Ahmed, Amal] Northeastern Univ, Boston, MA 02115 USA.
   [Licata, Daniel R.] Wesleyan Univ, Middletown, CT 06459 USA.
   [Ahmed, Amal] Inria Paris, Paris, France.
C3 Northeastern University; Wesleyan University
RP New, MS (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
EM maxnew@ccs.neu.edu; dlicata@wesleyan.edu; amal@ccs.neu.edu
RI Ahmed, Amal/IGC-9696-2023
OI Ahmed, Amal/0000-0001-7424-572X
FU National Science Foundation [CCF-1453796]; United States Air Force
   Research Laboratory [FA9550-15-1-0053, FA9550-16-1-0292]
FX We thank Ron Garcia, Kenji Maillard and Gabriel Scherer for helpful
   discussions about this work. We thank the anonymous reviewers for
   helpful feedback on this article. This material is based on research
   sponsored by the National Science Foundation under grant CCF-1453796 and
   the United States Air Force Research Laboratory under agreement number
   FA9550-15-1-0053 and FA9550-16-1-0292. The views and conclusions
   contained herein are those of the authors and should not be interpreted
   as necessarily representing the official policies or endorsements,
   either expressed or implied, of the United States Air Force Research
   Laboratory, the U.S. Government, or Carnegie Mellon University.
CR Abadi Martin, 1993, TYP LAMBD CALC APPL
   Ahman D, 2016, LECT NOTES COMPUT SC, V9634, P36, DOI 10.1007/978-3-662-49630-5_3
   Ahmed, 2018, GRADUAL TYPE THEORY
   Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Ahmed A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110283
   Ahmed A, 2009, ACM SIGPLAN NOTICES, V44, P340, DOI 10.1145/1594834.1480925
   Bauer Andrej, 2013, Algebra and Coalgebra in Computer Science. 5th International Conference, CALCO 2013. Proceedings: LNCS 8089, P1, DOI 10.1007/978-3-642-40206-7_1
   Cimini M, 2017, ACM SIGPLAN NOTICES, V52, P789, DOI 10.1145/3093333.3009863
   Cimini M, 2016, ACM SIGPLAN NOTICES, V51, P443, DOI 10.1145/2914770.2837632
   Dagand PÉ, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000011
   Degen M., 2012, Proceedings of the ACM SIGPLAN 2012 workshop on Partial evaluation and program manipulation, PEPM '12, P97
   Dunphy BrianPatrick., 2002, PARAMETRICITY NOTION
   Findler RB, 2004, LECT NOTES COMPUT SC, V3086, P364
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Fuhrmann C., 1999, Electronic Notes in Theoretical Computer Science, V20, DOI 10.1016/S1571-0661(04)80078-1
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia Sam, P 24 EUR S PROGR PRO, V9032
   Girard, 2001, MATH STRUCT COMP SCI, V11
   Greenberg M, 2015, ACM SIGPLAN NOTICES, V50, P181, DOI [10.1145/2775051.2676967, 10.1145/2676726.2676967]
   Greenman Ben, 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236766
   Griffith Dennis, 2015, INT C FDN SOFTW SCI
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Herman David., 2010, HIGHER ORDER SYMBOLI
   Hinze R, 2006, LECT NOTES COMPUT SC, V3945, P208
   Igarashi A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110282
   Igarashi Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110284
   Levy Paul Blain, 2003, CALL BY PUSH VALUE F
   Licata Daniel R., 2018, FSCD 2018
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Matthews J, 2008, LECT NOTES COMPUT SC, V4960, P16
   Munch-Maccagnoni G, 2014, LECT NOTES COMPUT SC, V8412, P396
   Neis G, 2009, ACM SIGPLAN NOTICES, V44, P135, DOI 10.1145/1631687.1596572
   New Max S., 2018, INT C FUNCT PROGR IC
   Siek J, 2009, LECT NOTES COMPUT SC, V5502, P17, DOI 10.1007/978-3-642-00590-9_2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Siek Jeremy G., 2017, BIG TYPES LITTLE RUN
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Strickland T.Stephen., 2012, Proc. Conf. Object-Oriented Programming Systems, Languages, P943
   Tobin-Hochstadt, 2016, SPRINGER LNCS, V9600
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Weirich Michael., 2010, CONTRACTS MADE MANIF
   Xu DN, 2009, ACM SIGPLAN NOTICES, V44, P41, DOI 10.1145/1594834.1480889
   Zeilberger N., 2009, The Logical Basis of Evaluation Order and Pattern-Matching
NR 45
TC 13
Z9 14
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 15
DI 10.1145/3290328
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300015
OA gold
DA 2024-07-18
ER

PT J
AU Santos, JF
   Maksimovic, P
   Sampaio, G
   Gardner, P
AF Santos, Jose Fragoso
   Maksimovic, Petar
   Sampaio, Gabriela
   Gardner, Philippa
TI JaVerT 2.0: Compositional Symbolic Execution for JavaScript
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE symbolic execution; compositionality; bi-abduction; dynamic languages
AB We propose a novel, unified approach to the development of compositional symbolic execution tools, bridging the gap between classical symbolic execution and compositional program reasoning based on separation logic. Using this approach, we build JaVerT 2.0, a symbolic analysis tool for JavaScript that follows the language semantics without simplifications. JaVerT 2.0 supports whole-program symbolic testing, verification, and, for the first time, automatic compositional testing based on bi-abduction. The meta-theory underpinning JaVerT 2.0 is developed modularly, streamlining the proofs and informing the implementation. Our explicit treatment of symbolic execution errors allows us to give meaningful feedback to the developer during whole-program symbolic testing and guides the inference of resource of the bi-abductive execution. We evaluate the performance of JaVerT 2.0 on a number of JavaScript data-structure libraries, demonstrating: the scalability of our whole-program symbolic testing; an improvement over the state-of-the-art in JavaScript verification; and the feasibility of automatic compositional testing for JavaScript.
C1 [Santos, Jose Fragoso; Maksimovic, Petar; Sampaio, Gabriela; Gardner, Philippa] Imperial Coll London, London, England.
   [Maksimovic, Petar] SASA, Math Inst, Belgrade, Serbia.
C3 Imperial College London
RP Santos, JF (corresponding author), Imperial Coll London, London, England.
EM jose.fragoso.santos@imperial.ac.uk; pmaksimo@ic.ac.uk;
   g.sampaio17@imperial.ac.uk; pg@doc.ic.ac.uk
OI Maksimovic, Petar/0000-0002-0400-7467; Cunha Sampaio,
   Gabriela/0000-0003-3701-277X; Fragoso Santos, Jose/0000-0001-5077-300X
FU EPSRC [EP/K008528/1]; Serbian Ministry of Education and Science through
   the Mathematical Institute of the Serbian Academy of Sciences and Arts
   [ON174026, III44006]; CAPES Foundation Scholarship
   [88881.129599/2016-01]; EPSRC [EP/K008528/1, EP/K032089/1] Funding
   Source: UKRI; SPF [EP/R034567/1] Funding Source: UKRI
FX Fragoso Santos, Gardner, and Maksimovic were supported by the EPSRC
   Programme Grant 'REMS: Rigorous Engineering for Mainstream Systems'
   (EP/K008528/1). Maksimovic was partially supported by the Serbian
   Ministry of Education and Science through the Mathematical Institute of
   the Serbian Academy of Sciences and Arts, projects ON174026 and
   III44006. Sampaio was supported by a CAPES Foundation Scholarship,
   process number 88881.129599/2016-01.
CR Anand Saswat, 2009, International Journal on Software Tools for Technology Transfer, V11, P53, DOI 10.1007/s10009-008-0090-1
   Anand S, 2007, LECT NOTES COMPUT SC, V4424, P134
   Baldoni R, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3182657
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Blazy S, 2016, ACM SIGPLAN NOTICES, V51, P325, DOI 10.1145/3022670.2951937
   Boyapati C., 2002, Software Engineering Notes, V27, P123, DOI 10.1145/566171.566191
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Cadar C, 2013, COMMUN ACM, V56, P82, DOI 10.1145/2408776.2408795
   Cadar C, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1066, DOI 10.1145/1985793.1985995
   Cadar C, 2008, ACM T INFORM SYST SE, V12, DOI 10.1145/1455518.1455522
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Calcagno C, 2015, LECT NOTES COMPUT SC, V9058, P3, DOI 10.1007/978-3-319-17524-9_1
   Calcagno C, 2011, J ACM, V58, DOI 10.1145/2049697.2049700
   Calcagno C, 2011, LECT NOTES COMPUT SC, V6617, P459, DOI 10.1007/978-3-642-20398-5_33
   Calcagno C, 2009, LECT NOTES COMPUT SC, V5904, P259, DOI 10.1007/978-3-642-10672-9_19
   Calcagno C, 2009, ACM SIGPLAN NOTICES, V44, P289, DOI 10.1145/1594834.1480917
   Cho CY, 2013, IEEE INT CONF AUTOM, P136, DOI 10.1109/ASE.2013.6693074
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Claessen K., 2015, J FUNCT PROGRAM, V25
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Darais D, 2015, ACM SIGPLAN NOTICES, V50, P552, DOI [10.1145/2814270.2814308, 10.1145/2858965.2814308]
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Deng XH, 2007, SEFM 2007: FIFTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P273, DOI 10.1109/SEFM.2007.33
   Deng XH, 2012, AUTOMAT SOFTW ENG, V19, P233, DOI 10.1007/s10515-011-0089-9
   Dillig I, 2012, ACM SIGPLAN NOTICES, V47, P181, DOI [10.1145/2345156.2254087, 10.1145/2345156.1993565]
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Distefano D, 2008, ACM SIGPLAN NOTICES, V43, P213, DOI 10.1145/1449955.1449782
   Dolby Julian, 2007, P 6 JOINT M EUR SOFT, P195
   ECMA TC39, 2011, ECMASCRIPT LANGUAGE
   ECMA TC39, 2017, 262 ECMA
   Engler D., 2007, P 2007 INT S SOFTW T, P1, DOI DOI 10.1145/1273463.1273464
   Gardner P, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P31
   Gardner PhilippaA., 2008, Proceedings of the twenty-seventh ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems, PODS '08, P261
   Geldenhuys Jaco, 2013, NASA Formal Methods. 5th International Symposium, NFM 2013. Proceedings, P229, DOI 10.1007/978-3-642-38088-4_16
   Godefroid P., 2007, SIGPLAN Notices, V42, P47, DOI [10.1145/1190216.1190226, 10.1145/1190215.1190226]
   Godefroid P, 2005, ACM SIGPLAN NOTICES, V40, P213, DOI 10.1145/1064978.1065036
   Godefroid P, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P43, DOI 10.1145/1706299.1706307
   Godefroid Patrice, 2008, Network and Distributed Systems Security
   Harman M, 2018, IEEE INT WORK C SO, P1, DOI 10.1109/SCAM.2018.00009
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Khurshid S, 2003, LECT NOTES COMPUT SC, V2619, P553
   Lal Akash, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P427, DOI 10.1007/978-3-642-31424-7_32
   Le QL, 2014, LECT NOTES COMPUT SC, V8559, P52, DOI 10.1007/978-3-319-08867-9_4
   Li GD, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P449, DOI 10.1145/2635868.2635913
   Milicevic A, 2007, PROC INT CONF SOFTW, P771
   Minh-Thai Trinh, 2013, Programming Languages and Systems. 11th Asian Symposium, APLAS 2013. Proceedings: LNCS 8301, P107, DOI 10.1007/978-3-319-03542-0_8
   Nguyen H. H., 2008, VMCAI
   Nguyen HH, 2007, LECT NOTES COMPUT SC, V4349, P251
   npm Inc., 2018, NPM PACKAGE MANAGER
   O'Hearn P, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P13, DOI 10.1145/3209108.3209109
   Park D, 2015, ACM SIGPLAN NOTICES, V50, P346, DOI [10.1145/2813885.2737991, 10.1145/2737924.2737991]
   Ramos DA, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P49
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rosner N, 2015, IEEE T SOFTWARE ENG, V41, P639, DOI 10.1109/TSE.2015.2389225
   Runciman C, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P37
   Santos J. Fragoso, 2018, PPDP, V11
   Santos Jose Fragoso, 2018, P ACM PROGR LANG 2, V2
   Santos Mauricio, 2016, BUCKETS JS JAVASCRIP
   Saxena P, 2010, P IEEE S SECUR PRIV, P513, DOI 10.1109/SP.2010.38
   Seidel EL, 2015, LECT NOTES COMPUT SC, V9032, P812, DOI 10.1007/978-3-662-46669-8_33
   Sen K, 2006, LECT NOTES COMPUT SC, V4144, P419
   Sen K, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P842, DOI 10.1145/2786805.2786830
   Sinha Nishant, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P599, DOI 10.1007/978-3-642-31424-7_42
   Stefanescu A, 2016, ACM SIGPLAN NOTICES, V51, P74, DOI [10.1145/2983990.2984027, 10.1145/3022671.2984027]
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   Torlak E., 2013, GROWING SOLVER AIDED, P135
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Van Horn D, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Wittern E, 2017, PROC INT CONF SOFTW, P244, DOI 10.1109/ICSE.2017.30
   Yang H, 2008, LECT NOTES COMPUT SC, V5123, P385
NR 72
TC 8
Z9 9
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 66
DI 10.1145/3290379
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300066
OA gold
DA 2024-07-18
ER

PT J
AU Chitre, K
   Kedia, P
   Purandare, R
AF Chitre, Khushboo
   Kedia, Piyus
   Purandare, Rahul
TI RAPID: Region-Based Pointer Disambiguation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE alias analysis; LLVM; optimizations; regions; dynamic checks; memory
   allocation; allocation site
ID LINEAR-SCAN
AB Interprocedural alias analyses often sacrifice precision for scalability. Thus, modern compilers such as GCC and LLVM implement more scalable but less precise intraprocedural alias analyses. This compromise makes the compilers miss out on potential optimization opportunities, affecting the performance of the application. Modern compilers implement loop-versioning with dynamic checks for pointer disambiguation to enable the missed optimizations. Polyhedral access range analysis and symbolic range analysis enable O (1) range checks for non-overlapping of memory accesses inside loops. However, these approaches work only for the loops in which the loop bounds are loop invariants. To address this limitation, researchers proposed a technique that requires O (log n) memory accesses for pointer disambiguation. Others improved the performance of dynamic checks to single memory access by constraining the object size and alignment. However, the former approach incurs noticeable overhead due to its dynamic checks, whereas the latter has a noticeable allocator overhead. Thus, scalability remains a challenge.
   In this work, we present a tool, RAPID, that further reduces the overheads of the allocator and dynamic checks proposed in the existing approaches. The key idea is to identify objects that need disambiguation checks using a profiler and allocate them in different regions, which are disjoint memory areas. The disambiguation checks simply compare the regions corresponding to the objects. The regions are aligned such that the top 32 bits in the addresses of any two objects allocated in different regions are always different. As a consequence, the dynamic checks do not require any memory access to ensure that the objects belong to different regions, making them efficient.
   RAPID achieved a maximum performance benefit of around 52.94% for Polybench and 1.88% for CPU SPEC 2017 benchmarks. The maximum CPU overhead of our allocator is 0.57% with a geometric mean of -0.2% for CPU SPEC 2017 benchmarks. Due to the low overhead of the allocator and dynamic checks, RAPID could improve the performance of 12 out of 16 CPU SPEC 2017 benchmarks. In contrast, a state-of-the-art approach used in the comparison could improve only five CPU SPEC 2017 benchmarks.
C1 [Chitre, Khushboo; Kedia, Piyus] IIIT Delhi, Comp Sci & Engn, Okhla Phase 3, Delhi 110020, India.
   [Purandare, Rahul] Univ Nebraska Lincoln, Sch Comp, 256 Avery Hall, Lincoln, NE 68588 USA.
C3 Indraprastha Institute of Information Technology Delhi; University of
   Nebraska System; University of Nebraska Lincoln
RP Chitre, K (corresponding author), IIIT Delhi, Comp Sci & Engn, Okhla Phase 3, Delhi 110020, India.
EM khushbooc@iiitd.ac.in; piyus@iiitd.ac.in; rahul@unl.edu
OI Purandare, Rahul/0000-0001-8677-0601
FU TCS Foundation
FX We would like to thank the anonymous reviewers for their valuable
   feedback, that helped improve the presentation of the paper. The first
   author would like to acknowledge TCS Foundation for supporting her
   research through the TCS Research Scholar Program.
CR Alves P, 2015, ACM SIGPLAN NOTICES, V50, P589, DOI 10.1145/2814270.2814285
   Andersen Lars Ole, 2005, Program Analysis and Specialization for the C Programming Language
   [Anonymous], 2023, Rapid Artifact Github Repository
   [Anonymous], 2016, Tutorial-Perf Wiki
   Bondhugula U., 2008, Ph. D. Dissertation, DOI 10.5555/1559029
   Bondhugula U, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P101, DOI 10.1145/1375581.1375595
   Chaitin G. J., 1982, SIGPLAN Notices, V17, P98, DOI 10.1145/872726.806984
   CHAITIN GJ, 1981, COMPUT LANG, V6, P47, DOI 10.1016/0096-0551(81)90048-5
   Chen Tong, 2004, Data Dependence Profiling for Speculative Optimizations, V2985, P2733, DOI [10.1007/978-3-540-24723-4_5, DOI 10.1007/978-3-540-24723-4_5]
   Chitre K, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563316
   Chow F, 1997, ACM SIGPLAN NOTICES, V32, P273, DOI 10.1145/258916.258940
   COOPER KD, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P49, DOI 10.1145/75277.75282
   doi, 2023, Rapid Artifact, DOI [10.5281/zenodo.8321488, DOI 10.5281/ZENODO.8321488]
   Engelen Robert, 2000, Symbolic Evaluation of Chains of Recurrences for Loop Optimization
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P313, DOI 10.1007/BF01407835
   Fernández M, 2002, 2002 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P222, DOI 10.1109/PACT.2002.1106020
   github, 2023, Mimalloc source code
   Hardekopf B, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P290, DOI 10.1145/1250734.1250767
   Hardekopf B, 2011, INT SYM CODE GENER, P289, DOI 10.1109/CGO.2011.5764696
   Hardekopf B, 2009, ACM SIGPLAN NOTICES, V44, P226, DOI 10.1145/1594834.1480911
   Hind M, 1999, ACM T PROGR LANG SYS, V21, P848, DOI 10.1145/325478.325519
   HUANG AS, 1994, CONF PROC INT SYMP C, P200
   Karrenberg R, 2011, INT SYM CODE GENER, P141, DOI 10.1109/CGO.2011.5764682
   Lattner C, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P278, DOI 10.1145/1250734.1250766
   Leijen D, 2019, LECT NOTES COMPUT SC, V11893, P244, DOI 10.1007/978-3-030-34175-6_13
   Lin J, 2003, ACM SIGPLAN NOTICES, V38, P289, DOI 10.1145/780822.781164
   llvm, 2023, Runtime Checks of Pointers
   Naishlos D., 2004, P 2004 GCC DEV SUMM, P105
   Nazaré H, 2014, ACM SIGPLAN NOTICES, V49, P791, DOI [10.1145/2714064.2660205, 10.1145/2660193.2660205]
   Paisante V, 2016, INT SYM CODE GENER, P171, DOI 10.1145/2854038.2854050
   Pearce DJ, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1290520.1290524
   Pereira FMQ, 2009, INT SYM CODE GENER, P126, DOI 10.1109/CGO.2009.9
   Poletto M, 1999, ACM T PROGR LANG SYS, V21, P895, DOI 10.1145/330249.330250
   Rugina R, 2000, ACM SIGPLAN NOTICES, V35, P182, DOI 10.1145/358438.349325
   Sarkar V, 2007, LECT NOTES COMPUT SC, V4420, P141
   Campos VHS, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P163, DOI 10.1145/2892208.2892225
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Sui YL, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P265, DOI 10.1145/2892208.2892235
   Surendran Rishi, 2014, Inter-iteration Scalar Replacement Using Array SSA Form
   Traub O, 1998, ACM SIGPLAN NOTICES, V33, P142, DOI 10.1145/277652.277714
   van Engelen R. A., 2001, Compiler Construction. 10th International Conference, CC 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2027), P118
   Wimmer C, 2010, INT SYM CODE GENER, P170
   Zheng X, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P197, DOI 10.1145/1328438.1328464
NR 43
TC 0
Z9 0
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 283
DI 10.1145/3622859
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100063
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Cui, C
   Jiang, SY
   Oliveira, BCDS
AF Cui, Chen
   Jiang, Shengyi
   Oliveira, Bruno C. D. S.
TI Greedy Implicit Bounded Quantification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Bounded Quantification; Mechanical Formalization; Type Inference
ID INFERENCE; POLYMORPHISM
AB Mainstream object-oriented programming languages such as Java, Scala, C#, or TypeScript have polymorphic type systems with subtyping and bounded quantification. Bounded quantification, despite being a pervasive and widely used feature, has attracted little research work on type-inference algorithms to support it. A notable exception is local type inference, which is the basis of most current implementations of type inference for mainstream languages. However, support for bounded quantification in local type inference has important restrictions, and its non-algorithmic specification is complex.
   In this paper, we present a variant of kernel F-<=, which is the canonical calculus with bounded quantification, with implicit polymorphism. Our variant, called F-<=(b), comes with a declarative and an algorithmic formulation of the type system. The declarative type system is based on previous work on bidirectional typing for predicative higher-rank polymorphism and a greedy approach to implicit instantiation. This allows for a clear declarative specification where programs require few type annotations and enables implicit polymorphism where applications omit type parameters. Just as local type inference, explicit type applications are also available in F-<=(b) if desired. This is useful to deal with impredicative instantiations, which would not be allowed otherwise in F-<=(b). Due to the support for impredicative instantiations, we can obtain a completeness result with respect to kernel F-<=, showing that all the well-typed kernel F-<= programs can type-check in F-<=(b). The corresponding algorithmic version of the type system is shown to be sound, complete, and decidable. All the results have been mechanically formalized in the Abella theorem prover.
C1 [Cui, Chen; Jiang, Shengyi; Oliveira, Bruno C. D. S.] Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China.
C3 University of Hong Kong
RP Cui, C (corresponding author), Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China.
EM ccui@cs.hku.hk; shengyi.jiang@outlook.com; bruno@cs.hku.hk
FU Huawei [TC20230508031]; University of Hong Kong [TC20230508031]; Hong
   Kong Research Grants Council [17209821]
FX We are grateful to the anonymous reviewers for their valuable comments,
   to Yaoda Zhou for his helpful feedback on the draft, and especially to
   Jinxu Zhao for his help in the earlier designs of ~ 1=. The research is
   supported by the Practical Type Inference with Bounded Quantification
   and Union and Intersection Types collaboration project (TC20230508031)
   between Huawei and The University of Hong Kong and project number
   17209821 of Hong Kong Research Grants Council.
CR Andre Guillaume, 2023, Ph. D. Dissertation, DOI [10.5075/epflthesis-8218, DOI 10.5075/EPFLTHESIS-8218]
   BREAZUTANNEN V, 1991, INFORM COMPUT, V93, P172, DOI 10.1016/0890-5401(91)90055-7
   CARDELLI L, 1991, LECT NOTES COMPUT SC, V526, P750
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   Cardelli Luca, 1993, Technical Report
   Cui Chen, 2023, Greedy Implicit Bounded Quantification, DOI [10.5281/zenodo.8336774, DOI 10.5281/ZENODO.8336774]
   Curien Pierre-Louis, 1992, MATH STRUCT COMP SCI, V2, p55S91, DOI DOI 10.1017/S0960129500001134
   Dolan S, 2017, ACM SIGPLAN NOTICES, V52, P60, DOI 10.1145/3093333.3009882
   Dunfield J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290322
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   EIFRIG J, 1995, SIGPLAN NOTICES, V30, P169, DOI 10.1145/217839.217858
   Eifrig Jonathan, 1995, Electronic Notes in Theoretical Computer Science, V1, P132, DOI [10.1016/S1571-0661(04)80008-2, DOI 10.1016/S1571-0661(04)80008-2]
   Eisenberg RA, 2016, LECT NOTES COMPUT SC, V9632, P229, DOI 10.1007/978-3-662-49498-1_10
   Gacek A, 2008, LECT NOTES ARTIF INT, V5195, P154, DOI 10.1007/978-3-540-71070-7_13
   Girard Jean-Yves, 1972, These d'etat, P7
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Hosoya Haruo, 1999, Technical Report
   Jenkins C, 2018, PROCEEDINGS OF THE 30TH SYMPOSIUM ON IMPLEMENTATION AND APPLICATION OF FUNCTIONAL LANGUAGES (IFL 2018), P37, DOI 10.1145/3310232.3310233
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Jones SimonPeyton., 2004, LEXICALLY SCOPED TYP
   Le Botlan D, 2003, ACM SIGPLAN NOTICES, V38, P27, DOI 10.1145/944746.944709
   Leijen D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283
   Mercer Henry, 2022, arXiv, DOI [10.48550/arXiv.2203.01835, DOI 10.48550/ARXIV.2203.01835]
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Odersky H., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P54, DOI 10.1145/237721.237729
   Odersky M, 2001, ACM SIGPLAN NOTICES, V36, P41, DOI 10.1145/373243.360207
   Parreaux L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563304
   Parreaux L, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409006
   Pierce B. C., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P252, DOI 10.1145/268946.268967
   Pierce B. C., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P305, DOI 10.1145/143165.143228
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plociniczak Hubert, 2016, Ph. D. Dissertation
   Pottier Francois, 1998, Ph. D. Dissertation
   Rémy D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P63
   Reynolds J. C., 1974, Programming Symposium, P408
   Sequeira Dilip, 1998, Ph. D. Dissertation
   Serrano A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408971
   Serrano A, 2018, ACM SIGPLAN NOTICES, V53, P783, DOI [10.1145/3192366.3192389, 10.1145/3296979.3192389]
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Vytiniotis D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P295
   Xie NN, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3310339
   Zhao JX, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341716
   Zhao Jinxu, 2022, 36 EUR C OBJ OR PROG, V2, P1, DOI [10.4230/LIPIcs.ECOOP.2022.2, DOI 10.4230/LIPICS.ECOOP.2022.2]
   Zhou LT, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571241
NR 44
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 295
DI 10.1145/3622871
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100075
OA gold
DA 2024-07-18
ER

PT J
AU Flatt, M
   Allred, T
   Angle, N
   De Gabrielle, S
   Findler, RB
   Firth, J
   Gopinathan, K
   Greenman, B
   Kasivajhula, S
   Knauth, A
   Mccarthy, J
   Phillips, S
   Porncharoenwase, S
   Sogaard, JA
   Tobin-Hochstadt, S
AF Flatt, Matthew
   Allred, Taylor
   Angle, Nia
   De Gabrielle, Stephen
   Findler, Robert Bruce
   Firth, Jack
   Gopinathan, Kiran
   Greenman, Ben
   Kasivajhula, Siddhartha
   Knauth, Alex
   Mccarthy, Jay
   Phillips, Sam
   Porncharoenwase, Sorawee
   Sogaard, Jens Axel
   Tobin-Hochstadt, Sam
TI Rhombus: A New Spin on Macros without All the Parentheses
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE macros; infix syntax; binding spaces
ID LANGUAGE
AB Rhombus is a new language that is built on Racket. It offers the same kind of language extensibility as Racket itself, but using conventional (infix) notation. Although Rhombus is far from the first language to support Lisp-style macros without Lisp-style parentheses, Rhombus offers a novel synthesis of macro technology that is practical and expressive. A key element is the use of multiple binding spaces for context-specific sublanguages. For example, expressions and pattern-matching forms can use the same operators with different meanings and without creating conflicts. Context-sensitive bindings, in turn, facilitate a language design that reduces the notational distance between the core language and macro facilities. For example, repetitions can be defined and used in binding and expression contexts generally, which enables a smoother transition from programming to metaprogramming. Finally, since handling static information (such as types) is also a necessary part of growing macros beyond Lisp, Rhombus includes support in its expansion protocol for communicating static information among bindings and expressions. The Rhombus implementation demonstrates that all of these pieces can work together in a coherent and user-friendly language.
C1 [Flatt, Matthew; Allred, Taylor] Univ Utah, Salt Lake City, UT USA.
   [Findler, Robert Bruce] Northwestern Univ, Evanston, IL USA.
   [Gopinathan, Kiran] Natl Univ Singapore, Singapore, Singapore.
   [Greenman, Ben] Brown Univ, Providence, RI USA.
   [Porncharoenwase, Sorawee] Univ Washington, Seattle, WA USA.
   [Tobin-Hochstadt, Sam] Indiana Univ, Bloomington, IN USA.
C3 Utah System of Higher Education; University of Utah; Northwestern
   University; National University of Singapore; Brown University;
   University of Washington; University of Washington Seattle; Indiana
   University System; Indiana University Bloomington
RP Flatt, M (corresponding author), Univ Utah, Salt Lake City, UT USA.
EM mflatt@cs.utah.edu; taylor.c.allred@utah.edu; rokitna@hotmail.com;
   spdegabrielle@gmail.com; robby@cs.northwestern.edu;
   jackhfirth@gmail.com; kirang@comp.nus.sg.edu;
   benjaminlgreenman@gmail.com; sid@countvajhula.com; alexander@knauth.org;
   jay.mccarthy@gmail.com; samdphillips@gmail.com;
   sorawee@cs.washington.edu; jensaxel@soegaard.net; samth@cs.indiana.edu
OI Gopinathan, Kiran/0000-0002-1877-9871; Greenman,
   Ben/0000-0001-7078-9287; Tobin-Hochstadt, Sam/0000-0003-1302-6499; De
   Gabrielle, Stephen/0009-0000-1706-5212; Knauth, Alex/0009-0006-7286-0044
FU National Science Foundation
FX This work was supported by the National Science Foundation. Matthew
   thanks Ilya Sergey and National University of Singapore for hosting his
   sabbatical; much of Rhombus's implementation took place in that
   productive environment. Thanks to Wing Hei Chan for technical
   corrections.
CR Aasa A., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P96, DOI 10.1145/62678.62688
   Adams MD, 2015, ACM SIGPLAN NOTICES, V50, P457, DOI [10.1145/2775051.2677013, 10.1145/2676726.2677013]
   Allen Eric, 2009, P FDN OBJ OR LANG
   [Anonymous], 1991, POPL 91, DOI DOI 10.1145/99583.99607
   Babenhauserheide Arne., 2015, SRFI-119: Wisp: Simpler Indentation-Sensitive Scheme
   Bachrach J, 2001, ACM SIGPLAN NOTICES, V36, P31, DOI 10.1145/504311.504285
   Bachrach Jonathan, 1999, D-expressions: Lisp power, Dylan style
   Baker J, 2002, ACM SIGPLAN NOTICES, V37, P270, DOI 10.1145/543552.512562
   Ballantyne M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428297
   Barrett Langston, 2020, P WORKSH TYP DRIV DE
   Barzilay Eli., 2009, P SCHEM WORKSH
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   Bowman WJ, 2015, ACM SIGPLAN NOTICES, V50, P403, DOI [10.1145/2813885.2737990, 10.1145/2737924.2737990]
   Burmako Eugene, 2017, Unification of Compile-Time and Runtime Metaprogramming in Scala, DOI [10.5075/epfl-thesis-7159, DOI 10.5075/EPFL-THESIS-7159]
   Cardelli Luca, 1993, P WORKSH DAT PROGR L, DOI [10.1007/978-1-4471-3564-7_2, DOI 10.1007/978-1-4471-3564-7_2]
   Chang S, 2017, ACM SIGPLAN NOTICES, V52, P694, DOI 10.1145/3093333.3009886
   Culpepper R, 2012, J FUNCT PROGRAM, V22, P439, DOI 10.1017/S0956796812000275
   Diekmann L, 2014, LECT NOTES COMPUT SC, V8706, P82, DOI 10.1007/978-3-319-11245-9_5
   Disney Tim, 2014, P DYN LANG S, DOI [10.1145/2775052.2661097, DOI 10.1145/2775052.2661097]
   Dybvig R. K., 1993, LISP and Symbolic Computation, V5, P295, DOI 10.1007/BF01806308
   Dybvig R. Kent, 1986, P LISP FUNCT PROGR, DOI [10.1145/319838.319858, DOI 10.1145/319838.319858]
   Erdweg S, 2011, ACM SIGPLAN NOTICES, V46, P391, DOI 10.1145/2076021.2048099
   Eysholdt M., 2010, P ACM INT C COMPANIO, P307, DOI DOI 10.1145/1869542.1869625
   Falcon Jose, 2009, P IFIP TC 2 WORK C D, DOI [10.1007/978-3-642-03034-5, DOI 10.1007/978-3-642-03034-5]
   Feeley Marc., 2019, Gambit: Scheme Infix Syntax Extension
   Felleisen M, 2018, COMMUN ACM, V61, P62, DOI 10.1145/3127323
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   Flatt M, 2002, ACM SIGPLAN NOTICES, V37, P72, DOI 10.1145/583852.581486
   Flatt M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341642
   Flatt M, 2016, ACM SIGPLAN NOTICES, V51, P705, DOI 10.1145/2914770.2837620
   Flatt M, 2012, J FUNCT PROGRAM, V22, P181, DOI 10.1017/S0956796812000093
   Flatt M, 2009, ACM SIGPLAN NOTICES, V44, P109, DOI 10.1145/1631687.1596569
   Flatt Matthew, 2023, Artifact for Rhombus: A New Spin on Macros without All the Parentheses, DOI [10.1145/3580417, DOI 10.1145/3580417]
   Ganz SE, 2001, ACM SIGPLAN NOTICES, V36, P74, DOI 10.1145/507669.507646
   Hart Timothy P, 1963, AIM-057
   Inkle, 2023, Ink
   JetBrains, 2003, MPS
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   King Alexis., 2018, The Hackett Programming Language
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   Kohlbecker E. E., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P77, DOI 10.1145/41625.41632
   Kohlbecker Eugene., 1986, P 1986 ACM C LISP FU, P151
   Krishnamurthi S., 2006, Programming Languages
   Krishnamurthi Shriram, 1999, P GEN PROGR CONC EXP, DOI [10.1007/3-540-40048-6_9, DOI 10.1007/3-540-40048-6_9]
   LEAVENWORTH BM, 1966, COMMUN ACM, V9, P790, DOI 10.1145/365876.365879
   McCarthy J., 1978, SIGPLAN Notices, V13, P217, DOI 10.1145/960118.808387
   McCord Chris., 2015, Metaprogramming Elixir: Write Less Code, Get More Done (and Have Fun!)
   Moller Egil., 2003, SRFI-49: Indentation-Sensitive Syntax
   Nia Angle, 2017, Parendown
   Nipkow T., 2002, Isabelle/HOL: a proof assistant for higher-order logic, V1st ed., DOI [10.1007/3-540-45949-9, DOI 10.1007/3-540-45949-9]
   OCaml, 2023, Preprocessors
   Odersky Martin, 2006, LAMP-REPORT-2006-001
   Omar Cyrus, 2018, P INT C FUNCT PROGR, DOI [10.1145/3236801, DOI 10.1145/3236801]
   Omar Cyrus, 2014, P EUR C OBJ OR PROGR, DOI [10.1007/978-3-662-44202-9_5, DOI 10.1007/978-3-662-44202-9_5]
   Phoenix, 2023, Phoenix Framework
   Pratt V. R., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P41
   Rafkind Jon, 2012, P GEN PROGR CONC EXP, DOI [10.1145/2371401.2371420, DOI 10.1145/2371401.2371420]
   Rust, 2023, Macros
   Ryu Sukyoung., 2009, PPPJ 09, P76, DOI DOI 10.1145/1596655.1596667
   Scala, 2023, Macros in Scala 3
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Steele Guy L., 2011, Encyclopedia of Parallel Computing, DOI [10.1007/978-0-387-09766-4_190, DOI 10.1007/978-0-387-09766-4_190]
   Syme D, 2007, ACM SIGPLAN NOTICES, V42, P29, DOI 10.1145/1291220.1291159
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   Tobin-Hochstadt S, 2011, Arxiv, DOI arXiv:1106.2578
   Tobin-Hochstadt S, 2011, ACM SIGPLAN NOTICES, V46, P132, DOI 10.1145/1993316.1993514
   Tomita Masaru., 1985, P INT JOINT C ART IN, DOI [10.1145/362007.362035, DOI 10.1145/362007.362035]
   Ullrich S, 2020, LECT NOTES COMPUT SC, V12167, P167, DOI 10.1007/978-3-030-51054-1_10
   Wadler P., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P307, DOI 10.1145/41625.41653
   Wheeler David A, 2013, Readable Lisp S-expressions Project
NR 70
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 242
DI 10.1145/3622818
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100022
OA gold
DA 2024-07-18
ER

PT J
AU Madsen, M
   van de Pol, J
   Henriksen, T
AF Madsen, Magnus
   van de Pol, Jaco
   Henriksen, Troels
TI Fast and Efficient Boolean Unification for Hindley-Milner-Style Type and
   Effect Systems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Boolean unification; Hindley-Milner type systems; type inference
ID HANDLERS
AB As type and effect systems become more expressive there is an increasing need for efficient type inference. We consider a polymorphic effect system based on Boolean formulas where inference requires Boolean unification. Since Boolean unification involves semantic equivalence, conventional syntax-driven unification is insufficient. At the same time, existing Boolean unification techniques are ill-suited for type inference.
   We propose a hybrid algorithm for solving Boolean unification queries based on Boole's Successive Variable Elimination (SVE) algorithm. The proposed approach builds on several key observations regarding the Boolean unification queries encountered in practice, including: (i) most queries are simple, (ii) most queries involve a few flexible variables, (iii) queries are likely to repeat due similar programming patterns, and (iv) there is a long tail of complex queries. We exploit these observations to implement several strategies for formula minimization, including ones based on tabling and binary decision diagrams.
   We implement the new hybrid approach in the Flix programming language. Experimental results show that by reducing the overhead of Boolean unification, the compilation throughput increases from 8,580 lines/sec to 15,917 lines/sec corresponding to a 1.8x speed-up. Further, the overhead on type and effect inference time is only 16% which corresponds to an overhead of less than 7% on total compilation time. We study the hybrid approach and demonstrate that each design choice improves performance.
C1 [Madsen, Magnus; van de Pol, Jaco] Aarhus Univ, Aarhus, Denmark.
   [Henriksen, Troels] Univ Copenhagen, Copenhagen, Denmark.
C3 Aarhus University; University of Copenhagen
RP Madsen, M (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM magnusm@cs.au.dk; jaco@cs.au.dk; athas@sigkill.dk
OI van de Pol, J.C./0000-0003-4305-0625; Madsen, Magnus/0000-0002-7510-8724
CR AKERS SB, 1978, IEEE T COMPUT, V27, P509, DOI 10.1109/TC.1978.1675141
   [Anonymous], 2001, Handbook of automated reasoning
   [Anonymous], 1974, Boolean functions and equations
   Baader F, 1998, INFORM PROCESS LETT, V67, P215, DOI 10.1016/S0020-0190(98)00106-9
   BAADER F, 1988, THEOR COMPUT SCI, V56, P345, DOI 10.1016/0304-3975(88)90140-5
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Beyer D, 2021, LECT NOTES COMPUT SC, V12971, P144, DOI 10.1007/978-3-030-88885-5_10
   Biere A., 2021, Handbook of Satisfiability, VVolume 336, DOI DOI 10.3233/FAIA336
   Bockmayr Alexander, 1991, Logic Programming with Pseudo-Boolean Constraints
   Boole G., 1847, The mathematical analysis of logic
   BOUDET A, 1989, J SYMB COMPUT, V8, P449, DOI 10.1016/S0747-7171(89)80054-9
   Brachthäuser JI, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276481
   Brachthäuser JI, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000027
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2500365.2500581, 10.1145/2544174.2500581]
   BRYANT RE, 1992, COMPUT SURV, V24, P293, DOI 10.1145/136035.136043
   BUTTNER W, 1987, J SYMB COMPUT, V4, P191, DOI 10.1016/S0747-7171(87)80065-2
   Convent L, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000039
   Damas Luis, 1984, Ph. D. Dissertation
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   De Moura L, 2011, COMMUN ACM, V54, P69, DOI 10.1145/1995376.1995394
   de Vries E, 2008, LECT NOTES COMPUT SC, V5083, P201, DOI 10.1007/978-3-540-85373-2_12
   Gaster B.R., 1996, Technical Report, Technical Report NOTTCS-TR-96-3
   GERHARD JA, 1994, THEOR COMPUT SCI, V126, P237, DOI 10.1016/0304-3975(94)90011-6
   Ghilardi S, 1999, J SYMBOLIC LOGIC, V64, P859, DOI 10.2307/2586506
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   JONES MP, 1994, SCI COMPUT PROGRAM, V22, P231, DOI 10.1016/0167-6423(94)00005-0
   Kammar O, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000320
   Kiselyov O, 2018, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.285.2
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Leijen Daan, 2005, Trends in Functional Programming, V6, P179
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Lindley Sam, 2012, TLDI, P91, DOI DOI 10.1145/2103786.2103798
   Lovato Alberto, 2014, Software Engineering and Formal Methods. 12th International Conference, SEFM 2014. Proceedings: LNCS 8702, P35, DOI 10.1007/978-3-319-10431-7_4
   Lowenheim Leopold, 1908, Uber das Auflosungsproblem im logischen Klassenkalkul
   Lucassen J. M., 1988, 15TH P ACM S PRINC P, P47, DOI DOI 10.1145/73560.73564
   Macii E, 1998, CONF REC ASILOMAR C, P1052, DOI 10.1109/ACSSC.1998.751423
   Madsen M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485487
   Madsen M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428193
   Madsen M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428222
   Madsen Magnus, 2023, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, DOI [10.4230/LIPICS.ECOOP.2023.18, DOI 10.4230/LIPICS.ECOOP.2023.18]
   Madsen Magnus, 2023, Fast and Efficient Boolean Unification for Hindley-Milner-Style Type and Effect Systems, DOI [10.5281/zenodo.8318658, DOI 10.5281/ZENODO.8318658]
   MARTELLI A, 1982, ACM T PROGR LANG SYS, V4, P258, DOI 10.1145/357162.357169
   MARTIN U, 1989, J SYMB COMPUT, V7, P275, DOI 10.1016/S0747-7171(89)80013-6
   MCCLUSKEY EJ, 1956, BELL SYST TECH J, V35, P1417, DOI 10.1002/j.1538-7305.1956.tb03835.x
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Nielson Flemming, 2015, Principles of Program Analysis, DOI [10.1007/978-3-662-03811-6, DOI 10.1007/978-3-662-03811-6]
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Pretnar M, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(3:21)2014
   Quine Willard V, 1952, AM MATH MON, V59, P521, DOI [DOI 10.2307/2308219, 10.1080/00029890.1952.11988183, DOI 10.1080/00029890.1952.11988183]
   Rytz L, 2012, LECT NOTES COMPUT SC, V7313, P258, DOI 10.1007/978-3-642-31057-7_13
   Simonis Helmut, 1987, IEEE INT WORKSH AI A
   Sulzmann M, 2001, LECT NOTES COMPUT SC, V2024, P248
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wansbrough K., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P15, DOI 10.1145/292540.292545
   Whaley John, 2023, JavaBDD
NR 60
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 240
DI 10.1145/3622816
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100020
OA gold
DA 2024-07-18
ER

PT J
AU Pacak, A
   Erdweg, S
AF Pacak, Andre
   Erdweg, Sebastian
TI Interactive Debugging of Datalog Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE debugging; Datalog; small-step operational semantics; QSQR
AB Datalog is used for complex programming tasks nowadays, consisting of numerous inter-dependent predicates. But Datalog lacks interactive debugging techniques that support the stepwise execution and inspection of the execution state. In this paper, we propose interactive debugging of Datalog programs following a top-down evaluation strategy called recursive query/subquery. While the recursive query/subquery approach is wellknown in the literature, we are the first to provide a complete programming-language semantics based on it. Specifically, we develop the first small-step operational semantics for top-down Datalog, where subqueries occur as nested intermediate terms. The small-step semantics forms the basis of step-into interactions in the debugger. Moreover, we show how step-over interactions can be realized efficiently based on a hybrid Datalog semantics that adds a bottom-up database to our top-down operational semantics. We implemented a debugger for core Datalog following these semantics and explain how to adopt it for debugging the frontend languages of Souffle and IncA. Our evaluation shows that our hybrid Datalog semantics can be used to debug real-world Datalog programs with realistic workloads.
C1 [Pacak, Andre; Erdweg, Sebastian] JGU, Mainz, Germany.
C3 Johannes Gutenberg University of Mainz
RP Pacak, A (corresponding author), JGU, Mainz, Germany.
EM pacak@uni-mainz.de; erdweg@uni-mainz.de
FU German Research Foundation (DFG) [451545561, 508316729]
FX We thank Sebastian Mies, David Klopp, Runqing Xu, Prashant Kumar, and
   the anonymous reviewers for their valuable feedback. This work was
   funded in part by German Research Foundation (DFG)-451545561 and
   508316729.
CR Abiteboul S., 1995, Foundations of Databases, DOI DOI 10.5555/551350
   Abiteboul Serge., 2005, PODS 05, P358, DOI DOI 10.1145/1065167
   Alvaro P., 2011, CIDR, P249
   Alvaro P, 2010, EUROSYS'10: PROCEEDINGS OF THE EUROSYS 2010 CONFERENCE, P223
   Arora T., 1993, Deductive and Object-Oriented Databases. Third International Conference, DOOD '93. Proceedings, P101
   BEERI C, 1991, J LOGIC PROGRAM, V10, P255, DOI 10.1016/0743-1066(91)90038-Q
   Bembenek A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428209
   Bravenboer Martin, 2009, P 24 ACM SIGPLAN C O, P243, DOI [DOI 10.1145/1640089.1640108, 10.1145/1640089.1640108]
   Caballero R, 2008, ELECTRON NOTES THEOR, V216, P79, DOI 10.1016/j.entcs.2008.06.035
   Caballero R, 2008, LECT NOTES COMPUT SC, V4925, P143, DOI 10.1007/978-3-540-88594-8_8
   Green TJ, 2012, FOUND TRENDS DATABAS, V5, P105, DOI 10.1561/1900000017
   Jordan H, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P327, DOI 10.1145/3293883.3295719
   Kohler Sven, 2012, Datalog in Academia and Industry. Proceedings of the Second International Workshop, Datalog 2.0, P111, DOI 10.1007/978-3-642-32925-8_12
   Lausen G., 1998, Transactions and Change in Logic Databases. International Seminar on Logic Databases and the Meaning of Change and ILPS'97 Post-Conference Workshop on (Trans) Actions and Change in Logic Programming and Deductive Databases, (DYNAMICS'97). Invited Surveys and Selected Papers, P69, DOI 10.1007/BFb0055496
   Madalinska-Bugaj E, 2008, STUD COMP INTELL, V134, P145
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   Maier David., 2018, Declarative Logic Programming: Theory, Systems, and Applications, P3, DOI DOI 10.1145/3191315.3191317
   Nejdl W., 1987, Proceedings of the Thirteenth International Conference on Very Large Data Bases: 1987 13th VLDB, P43
   Pacak Andre, 2022, GPCE 2022: Proceedings of the 21st ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences, P20, DOI 10.1145/3564719.3568686
   Pacak A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428195
   Pacak Andre, 2022, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V7, P28, DOI [10.4230/LIPIcs.ECOOP.2022, DOI 10.4230/LIPICS.ECOOP.2022]
   Russo Francesco, 1991, Lecture Notes in Computer Science, V592, P433, DOI [10.1007/3-540-55460-2_32, DOI 10.1007/3-540-55460-2_32]
   Ryzhyk Leonid, 2019, Datalog
   Szabó T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276509
   Szabó T, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1, DOI 10.1145/3453483.3454026
   Szabó T, 2016, IEEE INT CONF AUTOM, P320, DOI 10.1145/2970276.2970298
   Ujhelyi Z, 2016, LECT NOTES COMPUT SC, V9761, P137, DOI 10.1007/978-3-319-40530-8_9
   Ullman J. D., 1989, Proceedings of the Eighth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P140, DOI 10.1145/73721.73736
   Vieille Laurent., 1987, PROC 4 INT C LOGIC P, P74
   Vieille Laurent., 1986, EXPERT DATABASE C, P253
   Vorobyov BSK, 2015, 2015 24TH AUSTRALASIAN SOFTWARE ENGINEERING CONFERENCE (ASWEC 2015), P28, DOI 10.1109/ASWEC.2015.15
   Wieland C., 1990, P 9 INT C ENTITY REL, P189
   Zhao D, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3379446
NR 33
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 248
DI 10.1145/3622824
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100028
OA gold
DA 2024-07-18
ER

PT J
AU Gondelman, L
   Hinrichsen, JK
   Pereira, M
   Timany, A
   Birkedal, L
AF Gondelman, Leon
   Hinrichsen, Jonas Kastberg
   Pereira, Mario
   Timany, Amin
   Birkedal, Lars
TI Verifying Reliable Network Components in a Distributed Separation Logic
   with Dependent Separation Protocols
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Distributed systems; separation logic; refinement; higher-order logic;
   concurrency; formal verification
AB We present a foundationally verified implementation of a reliable communication library for asynchronous client-server communication, and a stack of formally verified components on top thereof. Our library is implemented in an OCaml-like language on top of UDP and features characteristic traits of existing protocols, such as a simple handshaking protocol, bidirectional channels, and retransmission/acknowledgement mechanisms. We verify the library in the Aneris distributed separation logic using a novel proof pattern-dubbed the session escrow pattern-based on the existing escrow proof pattern and the so-called dependent separation protocols, which hitherto have only been used in a non-distributed concurrent setting. We demonstrate how our specification of the reliable communication library simplifies formal reasoning about applications, such as a remote procedure call library, which we in turn use to verify a lazily replicated key-value store with leader-followers and clients thereof. Our development is highly modular-each component is verified relative to specifications of the components it uses (not the implementation). All our results are formalized in the Coq proof assistant.
C1 [Gondelman, Leon; Hinrichsen, Jonas Kastberg; Timany, Amin; Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
   [Pereira, Mario] NOVA Sch Sci & Technol, NOVA LINCS, Lisbon, Portugal.
C3 Aarhus University
RP Gondelman, L (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM gondelman@cs.au.dk; hinrichsen@cs.au.dk; mjp.pereira@fct.unl.pt;
   timany@cs.au.dk; birkedal@cs.au.dk
OI Birkedal, Lars/0000-0003-1320-0098; Timany, Amin/0000-0002-2237-851X;
   Gondelman, Leon/0000-0001-8262-6397; Pereira, Mario/0000-0003-4234-5376;
   Hinrichsen, Jonas Kastberg/0000-0001-6143-9031
FU Villum Investigator grant [25804]; Center for Basic Research in Program
   Verification (CPV); VILLUM Foundation
FX We are grateful to Chet Murthy for helpful discussions. This work was
   supported in part by a Villum Investigator grant (no. 25804), Center for
   Basic Research in Program Verification (CPV), from the VILLUM
   Foundation.
CR Badban B, 2005, FORM ASP COMPUT, V17, P342, DOI 10.1007/s00165-004-0070-0
   Birkedal Lars, 2017, Lecture Notes on Iris: Higher-Order Concurrent Separation Log
   Bishop S, 2006, ACM SIGPLAN NOTICES, V41, P55, DOI 10.1145/1111320.1111043
   Castro D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290342
   Chajed T, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P243, DOI 10.1145/3341301.3359632
   Compton Michael, 2005, CRPIT, V41, P21
   FEKETE A, 1993, J ACM, V40, P1087, DOI 10.1145/174147.169676
   Fonseca P, 2017, PROCEEDINGS OF THE TWELFTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS 2017), P328, DOI 10.1145/3064176.3064163
   Gondelman L, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434323
   Gondelman Leon, 2023, Verifying Reliable Network Components in a Distributed Separation Logic with Dependent Separation Protocols, DOI [10.5281/zenodo.8121688, DOI 10.5281/ZENODO.8121688]
   Gray J.N., 1979, A discussion of distributed systems
   Guo Zhenyu, 2013, 14 WORKSHOP HOT TOPI
   HALPERN JY, 1987, ANNU REV COMPUT SCI, V2, P37, DOI 10.1146/annurev.cs.02.060187.000345
   Hawblitzel C, 2017, COMMUN ACM, V60, P83, DOI 10.1145/3068608
   Hinrichsen JK, 2022, LOG METH COMPUT SCI, V18, DOI 10.46298/LMCS-18(2:16)2022
   Hinrichsen JK, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371074
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Ivaki N, 2018, J SYST SOFTWARE, V137, P713, DOI 10.1016/j.jss.2017.03.028
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Kaiser Jan-Oliver, 2017, EUR C OBJ OR PROGR E, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.17, 10.4230/LIPIcs.ECOOP.2017]
   Koh N, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P234, DOI 10.1145/3293880.3294106
   Kouzapas D, 2024, Arxiv, DOI arXiv:1902.01353
   Krogh-Jespersen M, 2020, LECT NOTES COMPUT SC, V12075, P336, DOI 10.1007/978-3-030-44914-8_13
   Lesani M, 2016, ACM SIGPLAN NOTICES, V51, P357, DOI 10.1145/2914770.2837622
   Matsushita Y, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P841, DOI 10.1145/3519939.3523704
   Mével G, 2019, LECT NOTES COMPUT SC, V11423, P3, DOI 10.1007/978-3-030-17184-1_1
   Miu Anson, 2021, CC 2021: Proceedings of the 30th ACM SIGPLAN International Conference on Compiler Construction, P94, DOI 10.1145/3446804.3446854
   Nieto Abel, 2022, Modular Verification of Op -Based CRDTs in Separation Logic
   Sergey I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158116
   Smith M. A. S., 1996, Formal Description Techniques IX. Theory, Application and Tools. IFIP TC6/6.1 International Conference on Formal Description Techniques IX/Protocol Specification, Testing and Verification XVI, P129
   Spies S, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547631
   Svendsen K, 2013, LECT NOTES COMPUT SC, V7792, P169, DOI 10.1007/978-3-642-37036-6_11
   Terry D. B., 1994, Proceedings of the Third International Conference on Parallel and Distributed Information Systems (Cat. No.94TH0668-4), P140, DOI 10.1109/PDIS.1994.331722
   Timany A, 2021, Arxiv, DOI arXiv:2109.07863
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Zhang Hengchu., 2021, 12 INT C INTERACTIVE, V193, p32:1, DOI DOI 10.4230/LIPICS.ITP.2021.32
NR 37
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 217
DI 10.1145/3607859
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900030
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Matsuda, K
   Frohlich, S
   Wang, M
   Wu, N
AF Matsuda, Kazutaka
   Frohlich, Samantha
   Wang, Meng
   Wu, Nicolas
TI Embedding by Unembedding
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE EDSL; functional programming; higher-order abstract syntax
AB Embedding is a language development technique that implements the object language as a library in a host language. There are many advantages of the approach, including being lightweight and the ability to inherit features of the host language. A notable example is the technique of Higher-Order Abstract Syntax (HOAS), which makes crucial use of higher-order functions to represent abstract syntax trees with binders. Despite its popularity, HOAS has its limitations. We observe that HOAS struggles with semantic domains that cannot be naturally expressed as functions, particularly when open expressions are involved. Prominent examples of this include incremental computation and reversible/bidirectional languages.
   In this paper, we pin-point the challenge faced by HOAS as a mismatch between the semantic domain of host and object language functions, and propose a solution. The solution is based on the technique of unembedding, which converts from the finally-tagless representation to de Bruijn-indexed terms with strong correctness guarantees. We show that this approach is able to extend the applicability of HOAS while preserving its elegance. We provide a generic strategy for Embedding by Unembedding, and then demonstrate its effectiveness with two substantial case studies in the domains of incremental computation and bidirectional transformations. The resulting embedded implementations are comparable in features to the state-of-the-art language implementations in the respective areas.
C1 [Matsuda, Kazutaka] Tohoku Univ, Grad Sch Informat Sci, Aoba Ku, Aramaki Aza aoba 6-3-09, Sendai, Miyagi, Japan.
   [Frohlich, Samantha; Wang, Meng] Univ Bristol, Bristol BS8 1QU, Avon, England.
   [Wu, Nicolas] Imperial Coll London, London SW7 2AZ, England.
C3 Tohoku University; University of Bristol; Imperial College London
RP Matsuda, K (corresponding author), Tohoku Univ, Grad Sch Informat Sci, Aoba Ku, Aramaki Aza aoba 6-3-09, Sendai, Miyagi, Japan.
EM kztk@tohoku.ac.jp; samantha.frohlich@bristol.ac.uk;
   meng.wang@bristol.ac.uk; n.wu@imperial.ac.uk
OI Frohlich, Samantha/0000-0002-4423-6918; Wang, Meng/0000-0001-7780-630X;
   Wu, Nicolas/0000-0002-4161-985X; Matsuda, Kazutaka/0000-0002-9747-4899
FU EPSRC [EP/T008911/1] Funding Source: UKRI
CR Abramsky S, 2005, THEOR COMPUT SCI, V347, P441, DOI 10.1016/j.tcs.2005.07.002
   Acar UA, 2006, ACM T PROGR LANG SYS, V28, P990, DOI 10.1145/1186632.1186634
   Acar Umut A., 2013, Proceedings of the 2013 workshop on Data driven functional programming, P15, DOI [10.1145/2429376.2429382, DOI 10.1145/2429376.2429382]
   Atkey R, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P37
   Atkey R, 2009, LECT NOTES COMPUT SC, V5608, P35, DOI 10.1007/978-3-642-02273-9_5
   BANCILHON F, 1981, ACM T DATABASE SYST, V6, P557, DOI 10.1145/319628.319634
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Bingham Eli, 2021, HOPE 2021 8 ACM SIGP
   Cai YF, 2014, ACM SIGPLAN NOTICES, V49, P145, DOI 10.1145/2666356.2594304
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Chen CH, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434290
   Chen Y, 2014, J FUNCT PROGRAM, V24, P56, DOI 10.1017/S0956796814000033
   Chen Y, 2012, ACM SIGPLAN NOTICES, V47, P299, DOI 10.1145/2345156.2254100
   Chlipala A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Ehrhard T, 2003, THEOR COMPUT SCI, V309, P1, DOI 10.1016/S0304-3975(03)00392-X
   Elliott C, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110271
   Fegaras L., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P284, DOI 10.1145/237721.237792
   Fegaras L, 2010, PROC INT CONF DATA, P309, DOI 10.1109/ICDE.2010.5447896
   Ferreira F, 2017, LECT NOTES COMPUT SC, V10201, P504, DOI 10.1007/978-3-662-54434-1_19
   Fiore M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P193, DOI 10.1109/LICS.1999.782615
   Fiore M, 2010, LECT NOTES COMPUT SC, V6247, P320, DOI 10.1007/978-3-642-15205-4_26
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Giarrusso PG, 2019, LECT NOTES COMPUT SC, V11423, P553, DOI 10.1007/978-3-030-17184-1_20
   Gibbons J, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P339, DOI 10.1145/2628136.2628138
   Gill A., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P223, DOI 10.1145/165180.165214
   Hamana M, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000157
   Hamana M, 2018, LECT NOTES COMPUT SC, V10818, P99, DOI 10.1007/978-3-319-90686-7_7
   Hammer MA, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P25, DOI 10.1145/1542476.1542480
   HEGNER SJ, 1990, LECT NOTES COMPUT SC, V470, P422
   Hegner SJ, 2004, ANN MATH ARTIF INTEL, V40, P63, DOI 10.1023/A:1026158013113
   HUET G, 1978, ACTA INFORM, V11, P31, DOI 10.1007/BF00264598
   Huot M, 2020, LECT NOTES COMPUT SC, V12077, P319, DOI 10.1007/978-3-030-45231-5_17
   Kiselyov O, 2019, ELECTRON P THEOR COM, P15, DOI 10.4204/EPTCS.294.2
   Kiselyov Oleg, 2004, HASKELL 04, P96, DOI DOI 10.1145/1017472.1017488
   Krawiec F, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498710
   Matsuda Kazutaka, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P31, DOI 10.1007/978-3-319-89884-1_2
   Matsuda K, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409000
   Matsuda K, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P158, DOI 10.1145/3242744.3242758
   Matsuda K, 2018, NEW GENERAT COMPUT, V36, P173, DOI 10.1007/s00354-018-0033-7
   Matsuda K, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000096
   Matsuda K, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P62, DOI 10.1145/2784731.2784750
   Matsuda K, 2013, LECT NOTES COMPUT SC, V7792, P101, DOI 10.1007/978-3-642-37036-6_6
   Mazza D, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434309
   McDonell TL, 2022, Arxiv, DOI arXiv:2108.13114
   McDonell TL, 2013, ACM SIGPLAN NOTICES, V48, P49, DOI [10.1145/2544174.2500595, 10.1145/2500365.2500595]
   Miller D., 1987, Proceedings of the 1987 Symposium on Logic Programming (Cat. No.87CH2472-9), P379
   Miltner A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158089
   Moggi E, 1998, LECT NOTES COMPUT SC, V1378, P211, DOI 10.1007/BFb0053552
   Morihata Akimasa., 2020, INFORMAL P WPTE 2020
   Obermeyer F, 2020, Arxiv, DOI arXiv:1910.10775
   Pacheco H, 2010, LECT NOTES COMPUT SC, V6120, P331, DOI 10.1007/978-3-642-13321-3_19
   Perera Roly, 2023, Effect handlers for programmable inference, DOI [10.1145/3609026.3609729, DOI 10.1145/3609026.3609729]
   Perez I, 2015, ACM SIGPLAN NOTICES, V50, P47, DOI 10.1145/2804302.2804316
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Pientka B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P371, DOI 10.1145/1328438.1328483
   Polakow J, 2015, ACM SIGPLAN NOTICES, V50, P177, DOI 10.1145/2804302.2804309
   Rajkumar Raghu, 2013, ECEASST, V57, DOI [10.14279/tuj.eceasst.57.879, DOI 10.14279/TUJ.ECEASST.57.879]
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Shankar A, 2007, ACM SIGPLAN NOTICES, V42, P310, DOI 10.1145/1273442.1250770
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Sherman B, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434284
   Stevens P, 2008, LECT NOTES COMPUT SC, V5235, P408, DOI 10.1007/978-3-540-88643-3_10
   Stewart Don, 2010, yices-painless: An embedded language for programming the Yices SMT solver
   Tran VD, 2020, PROC VLDB ENDOW, V13, P726, DOI 10.14778/3377369.3377380
   Voigtländer J, 2009, ACM SIGPLAN NOTICES, V44, P165, DOI 10.1145/1594834.1480904
   Vytiniotis Dimitrios, 2019, PROGRAM TRANSFORMATI
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Wallace M, 1999, ACM SIGPLAN NOTICES, V34, P148, DOI 10.1145/317765.317794
   Wang F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341700
   Wang M, 2013, SCI COMPUT PROGRAM, V78, P2216, DOI 10.1016/j.scico.2012.07.014
   Wang M, 2010, LECT NOTES COMPUT SC, V6120, P397, DOI 10.1007/978-3-642-13321-3_22
   Wei-Ngan Chin, 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P119, DOI 10.1145/154630.154643
   Werk Michael Flaeno, 2012, FHPC ICFP, P93
   Xiong B, 2007, IEEE INT CON AUTO SC, P1016
   Yokoyama Tetsuo, 2012, Reversible Computation. Third International Workshop, RC 2011. Revised Papers, P14, DOI 10.1007/978-3-642-29517-1_2
   Yu YJ, 2012, PROC INT CONF SOFTW, P540, DOI 10.1109/ICSE.2012.6227162
NR 78
TC 1
Z9 1
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 189
DI 10.1145/3607830
PG 47
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900002
OA gold
DA 2024-07-18
ER

PT J
AU Cho, K
   Jeon, S
   Raad, A
   Kang, J
AF Cho, Kyeongmin
   Jeon, Seungmin
   Raad, Azalea
   Kang, Jeehoon
TI MEMENTO: A Framework for Detectable Recoverability in Persistent Memory
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE persistent memory; detectable recovery; concurrent data structure
AB Persistent memory (PM) is an emerging class of storage technology that combines the performance of DRAM with the durability of SSD, offering the best of both worlds. This had led to a surge of research on persistent objects in PM. Among such persistent objects, concurrent data structures (DSs) are particularly interesting thanks to their performance and scalability. One of the most widely used correctness criteria for persistent concurrent DSs is detectable recoverability, ensuring both thread safety (for correctness in non-crashing concurrent executions) and crash consistency (for correctness in crashing executions). However, the existing approaches to designing detectably recoverable concurrent DSs are either limited to simple algorithms or suffer from high runtime overheads.
   We present Memento: a general and high-performance programming framework for detectably recoverable concurrent DSs in PM. To ensure general applicability to various DSs, Memento supports primitive operations such as checkpoint and compare-and-swap and their composition with control constructs. To ensure high performance, Memento employs a timestamp-based recovery strategy that requires fewer writes and flushes to PM than the existing approaches. We formally prove that Memento ensures detectable recoverability in the presence of crashes. To showcase Memento, we implement a lock-free stack, list, queue, and hash table, and a combining queue that detectably recovers from random crashes in stress tests and performs comparably to existing hand-tuned persistent DSs with and without detectable recoverability.
C1 [Cho, Kyeongmin; Jeon, Seungmin; Kang, Jeehoon] Korea Adv Inst Sci & Technol, Daejeon, South Korea.
   [Raad, Azalea] Imperial Coll London, London, England.
C3 Korea Advanced Institute of Science & Technology (KAIST); Imperial
   College London
RP Cho, K (corresponding author), Korea Adv Inst Sci & Technol, Daejeon, South Korea.
EM kyeongmin.cho@kaist.ac.kr; seungmin.jeon@kaist.ac.kr;
   azalea.raad@imperial.ac.uk; jeehoon.kang@kaist.ac.kr
RI Cho, Kyeongmin/JOK-5398-2023
OI Cho, Kyeongmin/0000-0003-3685-2320; Jeon, Seungmin/0009-0007-3256-5398;
   Kang, Jeehoon/0000-0002-2115-0871
FU Samsung Electronics Co., Ltd [IO220407-09486-01]; Institute for
   Information & Communications Technology Planning & Evaluation (IITP) -
   Korea Government (MSIT) [2018-0-00503]; UKRI Future Leaders Fellowship
   [MR/V024299/1]
FX We thank the PLDI 2023 reviewers and Minseong Jang for their valuable
   feedback. Kyeongmin Cho, Seungmin Jeon, and Jeehoon Kang are partly
   supported by Samsung Electronics Co., Ltd (No. IO220407-09486-01), and
   the Institute for Information & Communications Technology Planning &
   Evaluation (IITP) grant funded by the Korea Government (MSIT) (No.
   2018-0-00503, Researches on next generation memory-centric computing
   system architecture). Azalea Raad is supported by a UKRI Future Leaders
   Fellowship under grant number MR/V024299/1.
CR [Anonymous], 1986, Technical Report RJ 5118
   [Anonymous], 2023, RUST
   Arulraj J, 2018, PROC VLDB ENDOW, V11, P553, DOI 10.1145/3164135.3164147
   Attiya H, 2021, Arxiv, DOI [arXiv:1905.13600, 10.48550/ARXIV.1905.13600, DOI 10.48550/ARXIV.1905.13600]
   Attiya H, 2022, PPOPP'22: PROCEEDINGS OF THE 27TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P262, DOI 10.1145/3503221.3508444
   Attiya H, 2018, PODC'18: PROCEEDINGS OF THE 2018 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P7, DOI 10.1145/3212734.3212753
   Ben-David N, 2019, SPAA'19: PROCEEDINGS OF THE 31ST ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURESS, 2019, P253, DOI 10.1145/3323165.3323187
   Blandy Jim, 2022, COMP RUST ASYNC LINU
   Blankenship Robert, 2020, 140 11 PROTOCOL EXTE
   Cai WT, 2020, PROCEEDINGS OF THE 25TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '20), P421, DOI [10.1145/3332466.3374502, 10.1145/3381898.3397212]
   Chen YM, 2021, PROCEEDINGS OF THE 19TH USENIX CONFERENCE ON FILE AND STORAGE TECHNOLOGIES (FAST '21), P81
   Chen ZY, 2022, ASPLOS '22: PROCEEDINGS OF THE 27TH ACM INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P873, DOI 10.1145/3503222.3507755
   Chen ZY, 2020, PROCEEDINGS OF THE 2020 USENIX ANNUAL TECHNICAL CONFERENCE, P799
   Cho Kyeongmin, 2023, Zenodo, DOI 10.5281/ZENODO.7811928
   Cho K, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P16, DOI 10.1145/3453483.3454027
   Choe Jeongdong, 2022, REV THINGS KNOW FLAS
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   CYTRON R, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P25, DOI 10.1145/75277.75280
   David T, 2018, PROCEEDINGS OF THE 2018 USENIX ANNUAL TECHNICAL CONFERENCE, P373
   Fatourou P, 2022, PPOPP'22: PROCEEDINGS OF THE 27TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P337, DOI 10.1145/3503221.3508426
   Fatourou P, 2012, ACM SIGPLAN NOTICES, V47, P257, DOI 10.1145/2370036.2145849
   Fatourou P, 2011, SPAA 11: PROCEEDINGS OF THE TWENTY-THIRD ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P325
   Friedman M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1218, DOI 10.1145/3453483.3454105
   Friedman M, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P377, DOI 10.1145/3385412.3386031
   Friedman M, 2018, ACM SIGPLAN NOTICES, V53, P28, DOI 10.1145/3200691.3178490
   github, 2022, CROSSBEAM
   Goodman J. R., 1989, ASPLOS-III Proceedings. Third International Conference on Architectural Support for Programming Languages and Operating Systems, P64, DOI 10.1145/70082.68188
   Gorjiara H, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P490, DOI 10.1145/3519939.3523723
   Gorjiara H, 2022, ASPLOS '22: PROCEEDINGS OF THE 27TH ACM INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P830, DOI 10.1145/3503222.3507766
   Harris Timothy L., 2001, DISC LNCS, P300, DOI DOI 10.1007/3-540-45414-4_21
   Hendler D, 2010, SPAA '10: PROCEEDINGS OF THE TWENTY-SECOND ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P355
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Hoseinzadeh M, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P429, DOI 10.1145/3445814.3446710
   Hu DK, 2021, PROC VLDB ENDOW, V14, P785, DOI 10.14778/3446095.3446101
   Intel, 2021, eADR: New opportunities for persistent memory applications
   Intel, 2019, INT OPT PERS MEM
   Intel, 2023, PERS MEM PROGR
   Intel, 2023, LIBPMEM2 LIB
   Intel, 2022, INT 64 IA 32 ARCH SO
   Izraelevitz Joseph, 2016, Distributed Computing. 30th International Symposium, DISC 2016. Proceedings: LNCS 9888, P313, DOI 10.1007/978-3-662-53426-7_23
   Kadekodi Rohan, 2021, SOSP '21: Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles CD-ROM, P804, DOI 10.1145/3477132.3483567
   Kashyap S, 2018, EUROSYS '18: PROCEEDINGS OF THE THIRTEENTH EUROSYS CONFERENCE, DOI 10.1145/3190508.3190510
   Kim J, 2021, PROCEEDINGS OF THE 28TH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, SOSP 2021, P756, DOI 10.1145/3477132.3483565
   Kim WH, 2021, PROCEEDINGS OF THE 28TH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, SOSP 2021, P424, DOI 10.1145/3477132.3483589
   Krishnan RM, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P335, DOI 10.1145/3373376.3378483
   Kwon Y, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P460, DOI 10.1145/3132747.3132770
   Lee SK, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P462, DOI 10.1145/3341301.3359635
   Lersch L, 2019, PROC VLDB ENDOW, V13, P574, DOI 10.14778/3372716.3372728
   Li N, 2021, PROCEEDINGS OF THE 2021 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC '21), P557, DOI 10.1145/3465084.3467943
   Lu BT, 2020, PROC VLDB ENDOW, V13, P1147, DOI 10.14778/3389133.3389134
   McKenney Paul E, 2005, LINUX J, V136, P2
   Meehan J, 2015, PROC VLDB ENDOW, V8, P2134, DOI 10.14778/2831360.2831367
   Memaripour A, 2017, PROCEEDINGS OF THE TWELFTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS 2017), P499, DOI 10.1145/3064176.3064215
   Michael M. M., 1996, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, P267, DOI 10.1145/248052.248106
   Microsoft, 2023, HIGH CONT SWITCH RAT
   Nam M, 2019, PROCEEDINGS OF THE 17TH USENIX CONFERENCE ON FILE AND STORAGE TECHNOLOGIES, P31
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Raad A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371079
   Raad A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428219
   Ramalingam G, 2013, ACM SIGPLAN NOTICES, V48, P249, DOI 10.1145/2480359.2429100
   Rusanovsky Matan, 2021, ARXIV
   Samsung, 2023, MEM SEM SSD
   Samsung, 2022, API LIST SCAL MEM DE
   Setty S, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P501
   Shalev O, 2006, J ACM, V53, P379, DOI 10.1145/1147954.1147958
   Timnat S, 2014, ACM SIGPLAN NOTICES, V49, P357, DOI [10.1145/2555243.2555261, 10.1145/2692916.2555261]
   van Renen A, 2020, VLDB J, V29, P1223, DOI 10.1007/s00778-020-00622-9
   Vindum Simon Friis, 2022, SPIREA MECHANIZED CO
   Wang GZ, 2021, INT CONF MANAGE DATA, P2602, DOI 10.1145/3448016.3457556
   Wang TZ, 2018, PROC INT CONF DATA, P461, DOI 10.1109/ICDE.2018.00049
   Wei Y, 2022, PPOPP'22: PROCEEDINGS OF THE 27TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P309, DOI 10.1145/3503221.3508436
   Xu J, 2016, 14TH USENIX CONFERENCE ON FILE AND STORAGE TECHNOLOGIES (FAST '16), P323
   Xu Y, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P346, DOI 10.1145/3445814.3446730
   Zhang HR, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P1187
   Zhu BH, 2021, ACM T STORAGE, V17, DOI 10.1145/3448418
   Zuo PF, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P461
   Zuriel Y, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360554
NR 77
TC 0
Z9 0
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 118
DI 10.1145/3591232
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900014
OA gold
DA 2024-07-18
ER

PT J
AU Elsman, M
   Henriksen, T
AF Elsman, Martin
   Henriksen, Troels
TI Parallelism in a Region Inference Context
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Region Inference; Parallelism; Memory Management
ID MEMORY MANAGEMENT
AB Region inference is a type-based program analysis that takes a non-annotated program as input and constructs a program that explicitly manages memory allocation and deallocation by dividing the heap into a stack of regions, each of which can grow and shrink independently from other regions, using constant-time operations.
   Whereas region-based memory management has shown useful in the contexts of explicit region-based memory management, and in particular, in combination with parallel execution of code, combining region inference with techniques for higher-order parallel programming has not been investigated.
   In this paper, we present an implementation of a fork-join parallel construct suitable for a compiler based on region inference. We present a minimal higher-order language incorporating the parallel construct, including typing rules and a dynamic semantics for the language, and demonstrate type soundness. We present a novel effect-based region-protection inference algorithm and discuss benefits and shortcomings of the approach. We also describe an efficient implementation embedded in the MLKit Standard ML compiler. Finally, we evaluate the approach and the implementation based on a number of parallel benchmarks, and thereby demonstrate that the technique effectively utilises multi-core architectures in a higher-order functional setting.
C1 [Elsman, Martin; Henriksen, Troels] Univ Copenhagen, Dept Comp Sci, Univ Pk 5, DK-2100 Copenhagen, Denmark.
C3 University of Copenhagen
RP Elsman, M (corresponding author), Univ Copenhagen, Dept Comp Sci, Univ Pk 5, DK-2100 Copenhagen, Denmark.
EM mael@di.ku.dk; athas@di.ku.dk
RI Elsman, Martin/L-8791-2016
OI Elsman, Martin/0000-0002-6061-5993
CR AIKEN A, 1995, SIGPLAN NOTICES, V30, P174, DOI 10.1145/223428.207137
   Aldrich J, 2002, ACM SIGPLAN NOTICES, V37, P311, DOI 10.1145/583854.582448
   [Anonymous], 1995, Ph. D. Dissertation
   Armstrong Joe L., 2003, MAKING RELIABLE DIST
   Arora J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434299
   Birkedal L., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P171, DOI 10.1145/237721.237771
   BLACK F, 1973, J POLIT ECON, V81, P637, DOI 10.1086/260062
   Boyapati C, 2003, ACM SIGPLAN NOTICES, V38, P324, DOI 10.1145/780822.781168
   BRATLEY P, 1988, ACM T MATH SOFTWARE, V14, P88, DOI 10.1145/42288.214372
   Chakravarty M. M., 2011, P 6 WORKSH DECL ASP, P3, DOI DOI 10.1145/1926354.1926358
   Cooper E., 1990, CMUCS90186
   Davis Matthew, 2012, P 2012 ACM SIGPLAN W, P58, DOI DOI 10.1145/2247684.2247695
   Davis Matthew, 2013, P ACM SIGPLAN WORKSH, DOI [10.1145/2492408.2492415, DOI 10.1145/2492408.2492415]
   Elsman M, 2003, LECT NOTES COMPUT SC, V2562, P74
   Elsman M, 2003, ACM SIGPLAN NOTICES, V38, P123, DOI 10.1145/640136.604190
   Elsman M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591229
   Elsman M, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000010
   Elsman Martin, 2018, P ML FAMILY WORKSHOP
   Elsman Martin., 2004, INT S PRACTICAL ASPE, DOI [10.1007/978-3-540-24836-1_16, DOI 10.1007/978-3-540-24836-1_16]
   Elsman Martin., 2008, FRAMEWORK CUT OFF IN
   Elsman Martin, 1995, Student Project 95-7-8.
   Farvardin K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P75, DOI 10.1145/3385412.3385994
   Fluet M, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P119
   Gay D, 2001, ACM SIGPLAN NOTICES, V36, P70, DOI 10.1145/381694.378815
   Gerakios P, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P15
   Grelck Clemens, 2007, P 2007WORKSHOP DECLA, P25, DOI [10.1145/1248648.1248654, DOI 10.1145/1248648.1248654]
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Hallenberg N, 2002, ACM SIGPLAN NOTICES, V37, P141, DOI 10.1145/543552.512547
   Harris Tim., 2005, PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on Principles and practice of parallel programming, P48, DOI DOI 10.1145/1065944.1065952
   Henriksen T, 2017, ACM SIGPLAN NOTICES, V52, P556, DOI [10.1145/3140587.3062354, 10.1145/3062341.3062354]
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Li M, 2016, SIGBED REV, V13, P8
   Marlow S, 2011, HASKELL 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN HASKELL SYMPOSIUM, P71
   Marlow S, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P11
   Nakashima J, 2014, LECT NOTES COMPUT SC, V8665, P222, DOI 10.1007/978-3-662-44471-9_10
   Newman MHA, 1942, ANN MATH, V43, P223, DOI 10.2307/1968867
   Ohori Atsushi, 2017, DRAFT P ML FAMILY WO
   Raghunathan R, 2016, ACM SIGPLAN NOTICES, V51, P392, DOI 10.1145/3022670.2951935
   Reppy J, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P257
   Salagnac Guillaume, 2006, WORKSHOP IMPLEMENTAT
   Seo SM, 2018, IEEE T PARALL DISTR, V29, P512, DOI 10.1109/TPDS.2017.2766062
   Shavit N., 1995, Proceedings of the Fourteenth Annual ACM Symposium on Principles of Distributed Computing, P204, DOI 10.1145/224964.224987
   Sivaramakrishnan KC, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408995
   Sivaramakrishnan KC, 2014, J FUNCT PROGRAM, V24, P613, DOI 10.1017/S0956796814000161
   Sivaramakrishnan KC, 2010, DAMP'10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON DECLARATIVE ASPECTS OF MULTICORE PROGRAMMING, P63
   Swamy N, 2006, SCI COMPUT PROGRAM, V62, P122, DOI 10.1016/j.scico.2006.02.003
   Tofte M, 1998, ACM T PROGR LANG SYS, V20, P724, DOI 10.1145/291891.291894
   Tofte M., 2004, Higher-Order and Symbolic Computation, V17, P245, DOI 10.1023/B:LISP.0000029446.78563.a4
   Tofte M, 2000, FOUNDAT COMPUT, P389
   Tofte Mads, 2022, PROGRAMMING REGIONS
   Vollmer M, 2017, ACM SIGPLAN NOTICES, V52, P283, DOI [10.1145/3155284.3018746, 10.1145/3018743.3018746]
   Weeks Stephen, 2006, ML 06 P 2006 WORKSHO, P1
   Westrick S, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547646
   Westrick S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371115
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 55
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 142
DI 10.1145/3591256
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900038
OA gold
DA 2024-07-18
ER

PT J
AU Lecoeur, B
   Mohsin, H
   Donaldson, AF
AF Lecoeur, Bastien
   Mohsin, Hasan
   Donaldson, Alastair F.
TI Program Reconditioning: Avoiding Undefined Behaviour When Finding and
   Reducing Compiler Bugs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Randomised testing; test-case reduction; compiler testing; undefined
   behaviour; OpenGL; WebGPU
AB We introduce program reconditioning, a method for allowing program generation and differential testing to be used to find miscompilation bugs, and test-case reduction to be used to simplify bug-triggering programs, even when (a) the programming language of interest features undefined behaviour (UB) and (b) no tools exist to detect and avoid this UB. We present two program generation tools based on our reconditioning idea: GLSLsmith for the OpenGL Shading Language (GLSL), a widely-used language for graphics programming, and WGSLsmith for the WebGPU Shading Language (WGSL), a new language for web-based graphics rendering. GLSL features many UBs, but unlike for languages such as C and C++ no tools exist to detect them automatically. While the WGSL language specification features very limited UB, early WGSL implementations do exhibit UB, for reasons of initial implementation simplicity, making it challenging to test them to quickly detect and eliminate unrelated miscompilation bugs. Thanks to reconditioning, we show that GLSLsmith and WGSLsmith allow differential testing and test-case reduction to be applied to compilers for GLSL and WGSL for the first time, despite the unavailability of UB detection techniques for these languages. Through a large testing campaign, we have found 24 and 33 bugs in GLSL and WGSL compilers, respectively. We present experiments showing that when reconditioning is disabled, compiler testing leads to a high rate of test programs that appear to trigger miscompilation bugs, but actually just feature UB. We also present a novel approach to managing floating-point roundoff error using reconditioning, implemented for both GLSL and WGSL.
C1 [Lecoeur, Bastien; Mohsin, Hasan; Donaldson, Alastair F.] Imperial Coll London, Dept Comp, London, England.
C3 Imperial College London
RP Lecoeur, B (corresponding author), Imperial Coll London, Dept Comp, London, England.
EM bastien.lecoeur20@imperial.ac.uk; hasan.mohsin18@imperial.ac.uk;
   alastair.donaldson@imperial.ac.uk
OI Lecoeur, Bastien/0000-0002-0516-0551
FU IRIS EPSRC Programme Grant [EP/R006865/1]
FX We are grateful to Jack Clark, John Wickerson, Pingshi Yu and the
   anonymous reviewers of the PLDI 2022, FSE 2022 and PLDI 2023 conferences
   for their valuable feedback on earlier drafts of this work. This work
   was supported by the IRIS EPSRC Programme Grant (EP/R006865/1).
CR Apple, 2022, MET SHAD LANG SPEC
   Apple, 2023, MET
   C-Reduce Project, 2023, US C RED
   Chen JJ, 2021, IEEE T SOFTWARE ENG, V47, P261, DOI 10.1109/TSE.2018.2889771
   Chen JJ, 2020, ACM COMPUT SURV, V53, DOI 10.1145/3363562
   Chen JJ, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P305, DOI 10.1109/ASE.2019.00037
   Chen T.Y., 1998, Metamorphic testing: a new approach for generating next test cases
   Chen Y, 2013, ACM SIGPLAN NOTICES, V48, P197, DOI 10.1145/2499370.2462173
   Cuoq Pascal, 2012, Software Engineering and Formal Methods. Proceedings of the 10th International Conference, SEFM 2012, P233, DOI 10.1007/978-3-642-33826-7_16
   Donaldson AF, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1017, DOI 10.1145/3453483.3454092
   Donaldson AF, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133917
   Donaldson Alastair F., 2023, P 16 IEEE INT C SOFT
   Even-Mendoza Karine, 2020, 2020 35th IEEE/ACM International Conference on Automated Software Engineering (ASE), P1219, DOI 10.1145/3324884.3418933
   Even-Mendoza K, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-022-10146-1
   Freedesktop.org, 2021, MISC SWITCH CAS
   Google, 2023, SHAD GITH REP
   Google, 2023, ANGLE
   Google, 2023, DAWN WEBGP IMPL
   GraphicsFuzz project authors, 2023, GRAPHICSFUZZ
   Herklotz Y, 2020, 2020 ACM/SIGDA INTERNATIONAL SYMPOSIUM ON FIELD-PROGRAMMABLE GATE ARRAYS (FPGA '20), P277, DOI 10.1145/3373087.3375310
   IEEE Computer Society, 1985, 7541985 IEEE
   Kessenich J., 2019, The OpenGL Shading Language Version 4.60.7
   Kessenich John, 2022, SPIRV SPECIFICATION
   Khronos Group, 2023, GLSL GITH REP
   Khronos Group, 2023, OPENCL SPECIFICATION
   Le V, 2015, ACM SIGPLAN NOTICES, V50, P386, DOI [10.1145/2814270.2814319, 10.1145/2858965.2814319]
   Lecoeur Bastien, 2023, GLSLSMITH GITHUB REP
   Lecoeur Bastien, 2023, PLDI 2023, DOI [10.5281/zenodo.7819755, DOI 10.5281/ZENODO.7819755]
   Leech Jon., 2019, OpenGL ES
   Leroy Xavier, 2023, COMPCERT C VER COMP
   Lidbury C, 2015, ACM SIGPLAN NOTICES, V50, P65, DOI [10.1145/2737924.2737986, 10.1145/2813885.2737986]
   Livinskii V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428264
   LLVM, 2023, UNDEFINEDBEHAVIORSAN
   McKeeman William M., 1998, DIGIT TECH J, V10, P100
   Microsoft, 2021, DIRECT3D 12 GRAPH
   Microsoft, 2019, REF HLSL
   Misherghi G., 2006, 28th International Conference on Software Engineering Proceedings, P142, DOI 10.1145/1134285.1134307
   Mohsin Hasan, 2023, WGSLSMITH GITH REP
   Nagai E, 2014, IPSJ T SYSTEM LSI DE, V7, P91, DOI DOI 10.2197/IPSJTSLDM.7.91
   Nvidia, 2021, Cuda c++ programming guide
   Parr Terence, 2023, ANTLR
   pest project authors, 2023, PEST EL PARS
   Pflanzer M., 2016, P 4 INT WORKSH OPENC, P1, DOI DOI 10.1145/2909437.2909439
   Picire Project, 2012, PIC PAR DELT DEB FRA
   Regehr J, 2012, ACM SIGPLAN NOTICES, V47, P335, DOI 10.1145/2345156.2254104
   Regehr John, 2012, RESPONSIBLE EFFECTIV
   Rust Graphics Mages, 2023, WGPU PROJ
   Rust Graphics Mages, 2022, INV RES US IMPL IN A
   Segal Mark, 2019, OPL GRAPH SYST SPEC
   Serebryany K., 2012, USENIX ATC 2012, P309
   Simpson Robert J., 2019, OPENGL SHADING LANGU
   Sorensen T., 2016, P 4 INT WORKSH OPENC, p2:1, DOI DOI 10.1145/2909437.2909440
   Stepanov E, 2015, INT SYM CODE GENER, P46, DOI 10.1109/CGO.2015.7054186
   Sun CN, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P361, DOI 10.1145/3180155.3180236
   Sun CN, 2016, ACM SIGPLAN NOTICES, V51, P849, DOI 10.1145/3022671.2984038
   The Khronos Vulkan Working Group, 2019, VULK 1 1 1 41 A SPEC
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P216, DOI [10.1145/2666356.2594334, 10.1145/2594291.2594334]
   W3C, 2023, WEBGPU SHAD LANG W3C
   W3C, 2023, WEBGPU W3C WORK DRAF
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zeller A, 2002, IEEE T SOFTWARE ENG, V28, P183, DOI 10.1109/32.988498
NR 61
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 180
DI 10.1145/3591294
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900076
OA gold
DA 2024-07-18
ER

PT J
AU Arrial, V
   Guerrieri, G
   Kesner, D
AF Arrial, Victor
   Guerrieri, Giulio
   Kesner, Delia
TI Quantitative Inhabitation for Different Lambda Calculi in a Unifying
   Framework
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE inhabitation; call-by-push-value; quantitative types; lambda-calculus
AB We solve the inhabitation problem for a language called _ !, a subsuming paradigm (inspired by call-by-pushvalue) being able to encode, among others, call-by-name and call-by-value strategies of functional programming. The type specification uses a non-idempotent intersection type system, which is able to capture quantitative properties about the dynamics of programs. As an application, we show how our general methodology can be used to derive inhabitation algorithms for different lambda-calculi that are encodable into lambda!.
C1 [Arrial, Victor; Kesner, Delia] Univ Paris Cite, CNRS, IRIF, Paris, France.
   [Guerrieri, Giulio] Aix Marseille Univ, LIS, CNRS, Marseille, France.
   [Guerrieri, Giulio] Edinburgh Res Ctr, Cent Software Inst, Huawei, Edinburgh, Midlothian, Scotland.
   [Kesner, Delia] Inst Univ France, Paris, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite Paris
   Cite; Centre National de la Recherche Scientifique (CNRS); Aix-Marseille
   Universite; Huawei Technologies; Institut Universitaire de France
RP Arrial, V (corresponding author), Univ Paris Cite, CNRS, IRIF, Paris, France.
EM arrial@irif.fr; giulio.guerrieri@lis-lab.fr; kesner@irif.fr
RI Guerrieri, Giulio/GZA-5767-2022
OI Guerrieri, Giulio/0000-0002-0469-4279; Arrial,
   Victor/0000-0002-1607-7403; Kesner, Delia/0000-0003-4254-3129
CR Accattoli B, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547652
   Accattoli B, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S095679682000012X
   Accattoli B, 2012, LECT NOTES COMPUT SC, V7294, P4, DOI 10.1007/978-3-642-29822-6_4
   Accattoli B, 2010, LECT NOTES COMPUT SC, V6247, P381, DOI 10.1007/978-3-642-15205-4_30
   Accattoli Beniamino, 2022, ARXIV
   Arrial Victor, 2023, IMPLEMENTATION QUANT
   Barendregt H.P., 1984, Studies in logic and the foundations of mathematics
   Bessai J, 2018, LOG METH COMPUT SCI, V14, DOI 10.23638/LMCS-14(1:18)2018
   Bessai J, 2014, LECT NOTES COMPUT SC, V8802, P26, DOI 10.1007/978-3-662-45234-9_3
   Bessai Jan, 2013, THESIS TU DORTMUND
   Blain Levy P., 1999, Typed Lambda Calculi and Applications. 4th International Conference, TLCA'99. Proceedings, P228
   Bucciarelli Antonio, 2014, Theoretical Computer Science. 8th IFIP TC 1/WG 2.2 International Conference, TCS 2014. Proceedings: LNCS 8705, P341, DOI 10.1007/978-3-662-44602-7_26
   Bucciarelli A, 2021, LOG METH COMPUT SCI, V17, DOI 10.23638/LMCS-17(1:7)2021
   Bucciarelli A, 2018, LOG METH COMPUT SCI, V14, DOI 10.23638/LMCS-14(3:7)2018
   Bucciarelli Antonio, 2020, Lecture Notes in Computer Science, V12073, P13, DOI [DOI 10.1007/978-3-030-59025, 10.1007/978-3-030-59025-3_2]
   Carraro A, 2014, LECT NOTES COMPUT SC, V8412, P103
   Cervesato I, 2000, THEOR COMPUT SCI, V232, P133, DOI 10.1016/S0304-3975(99)00173-5
   Comon H., 2007, TREE AUTOMATA TECHNI
   Coppo M., 1980, Notre Dame Journal of Formal Logic, V21, P685, DOI 10.1305/ndjfl/1093883253
   COPPO M, 1981, Z MATH LOGIK, V27, P45, DOI 10.1002/malq.19810270205
   Coppo M., 1978, Archiv fur Mathematische Logik und Grundlagenforschung, V19, P139, DOI 10.1007/BF02011875
   de Carvalho D., 2007, Semantiques de la logique lineaire et temps de calcul
   De Carvalho D, 2018, MATH STRUCT COMP SCI, V28, P1169, DOI 10.1017/S0960129516000396
   Dudder Boris, 2014, THESIS, DOI [10.17877/DE290R-6528, DOI 10.17877/DE290R-6528]
   Ehrhard T, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P174, DOI 10.1145/2967973.2968608
   Ehrhard T, 2016, LECT NOTES COMPUT SC, V9632, P202, DOI 10.1007/978-3-662-49498-1_9
   Faggian C, 2021, LECT NOTES COMPUT SC, V12650, P205, DOI 10.1007/978-3-030-71995-1_11
   Gardner P., 1994, Theoretical Aspects of Computer Software. International Symposium TACS '94 Proceedings, P555
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Guerrieri G, 2019, ELECTRON P THEOR COM, P15, DOI 10.4204/EPTCS.292.2
   Guerrieri Giulio, 2021, LEIBNIZ INT P INFORM, V183, DOI [10.4230/LIPIcs. CSL.2021.25, DOI 10.4230/LIPICS.CSL.2021.25]
   HODAS JS, 1994, INFORM COMPUT, V110, P327, DOI 10.1006/inco.1994.1036
   Hughes Jack, 2020, LOGIC BASED PROGRAM, P151, DOI [10.1007/978-3-030-68446-4_8, DOI 10.1007/978-3-030-68446-4_8, 10.1007/978-3-030-68446-48, DOI 10.1007/978-3-030-68446-48]
   Kerinec Axel, 2021, LIPICS, V195, DOI [10.4230/LIPIcs.FSCD.2021.7, DOI 10.4230/LIPICS.FSCD.2021.7]
   Kesner D, 2021, Arxiv, DOI arXiv:2105.00564
   KLOP JW, 1993, THEOR COMPUT SCI, V121, P279, DOI 10.1016/0304-3975(93)90091-7
   Manna Z., 1980, ACM Transactions on Programming Languages and Systems, V2, P90, DOI 10.1145/357084.357090
   MILLER D, 1991, ANN PURE APPL LOGIC, V51, P125, DOI 10.1016/0168-0072(91)90068-W
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Orchard D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341714
   Paolini L, 1999, RAIRO-INF THEOR APPL, V33, P507, DOI 10.1051/ita:1999130
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Pottinger Garrel, 1980, ESSAYS COMBINATORY L, P561
   PWolf, 2013, THESIS U DORTMUND
   S Plate, 2013, THESIS U DORTMUND
   Urzyczyn P, 1999, J SYMBOLIC LOGIC, V64, P1195, DOI 10.2307/2586625
   Vasileva Anna, 2013, THESIS U DORTMUND
NR 47
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571244
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500051
OA gold
DA 2024-07-18
ER

PT J
AU Bembenek, A
   Greenberg, M
   Chong, S
AF Bembenek, Aaron
   Greenberg, Michael
   Chong, Stephen
TI From SMT to ASP: Solver-Based Approaches to Solving Datalog
   Synthesis-as-Rule-Selection Problems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; Datalog; inductive logic programming; satisfiability
ID ANSWER; SAT; CONSTRAINTS; GROUNDER; PROGRAM
AB Given a set of candidate Datalog rules, the Datalog synthesis-as-rule-selection problem chooses a subset of these rules that satisfies a specification (such as an input-output example). Building off prior work using counterexample-guided inductive synthesis, we present a progression of three solver-based approaches for solving Datalog synthesis-as-rule-selection problems. Two of our approaches offer some advantages over existing approaches, and can be used more generally to solve arbitrary SMT formulas containing Datalog predicates; the third-an encoding into standard, off-the-shelf answer set programming (ASP)-leads to significant speedups (similar to 9x geomean) over the state of the art while synthesizing higher quality programs. Our progression of solutions explores the space of interactions between SAT/SMT and Datalog, identifying ASP as a promising tool for working with and reasoning about Datalog. Along the way, we identify Datalog programs as monotonic SMT theories, which enjoy particularly efficient interactions in SMT; our plugins for popular SMT solvers make it easy to load an arbitrary Datalog program into the SMT solver as a custom monotonic theory. Finally, we evaluate our approaches using multiple underlying solvers to provide a more thorough and nuanced comparison against the current state of the art.
C1 [Bembenek, Aaron; Chong, Stephen] Harvard Univ, Cambridge, MA 02138 USA.
   [Greenberg, Michael] Stevens Inst Technol, Hoboken, NJ 07030 USA.
C3 Harvard University; Stevens Institute of Technology
RP Bembenek, A (corresponding author), Harvard Univ, Cambridge, MA 02138 USA.
EM bembenek@g.harvard.edu; michael@greenberg.science;
   chong@seas.harvard.edu
OI Greenberg, Michael/0000-0003-0014-7670; Chong,
   Stephen/0000-0002-6734-5383; Bembenek, Aaron/0000-0002-3677-701X
FU Defense Advanced Research Projects Agency (DARPA)
FX This material is based upon work supported by the Defense Advanced
   Research Projects Agency (DARPA) Contract No. FA8750-19-C-0004. Any
   opinions, findings and conclusions or recommendations expressed in this
   material are those of the author(s) and do not necessarily reflect the
   views of the Defense Advanced Research Projects Agency (DARPA). Emery
   Berger gave valuable presentation advice. Noam Ross helped with the
   charts, and Alice Feng helped with the narrative. Aaditya Naik, Aalok
   Thakkur, and Mukund Raghothaman answered our questions about ProSynth,
   GenSynth, and the benchmark suite, and Mark Law answered our questions
   about ILASP2. We thank Nada Amin, Andrew Cropper, Mayur Naik, and
   Bernhard Scholz for their thoughtful feedback on drafts of this paper.
   We also thank Nada Amin for introducing us to truth maintenance systems.
CR Aiken A, 2007, PASTE'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN- SIGSOFT WORKSHOP ON PROGRAM ANALYSIS FOR SOFTWARE TOOLS & ENGINEERING, P43, DOI 10.1145/1251535.1251543
   Albarghouthi A, 2017, LECT NOTES COMPUT SC, V10416, P689, DOI 10.1007/978-3-319-66158-2_44
   Alvaro Peter, 2010, Datalog Reloaded. First International Workshop, Datalog 2010. Revised Selected Papers, P262, DOI 10.1007/978-3-642-24206-9_16
   Alvaro P, 2010, EUROSYS'10: PROCEEDINGS OF THE EUROSYS 2010 CONFERENCE, P223
   Alviano M, 2013, LECT NOTES COMPUT SC, V8148, P54, DOI 10.1007/978-3-642-40564-8_6
   Apt K.R., 1988, THEORY DECLARATIVE K, P89
   Athakravi D, 2014, LECT NOTES ARTIF INT, V8812, P31, DOI 10.1007/978-3-662-44923-3_3
   Backes J, 2019, LECT NOTES COMPUT SC, V11562, P231, DOI 10.1007/978-3-030-25543-5_14
   Balai Evgenii, 2016, P 25 INT JOINT C ART, P915
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Barrett C., 2016, The Satisfiability Modulo Theories Library (SMT-LIB)
   Bayless S, 2020, ARTIF INTELL, V278, DOI 10.1016/j.artint.2019.103196
   Bayless S, 2015, AAAI CONF ARTIF INTE, P3702
   Bembenek Aaron, 2022, Zenodo, DOI 10.5281/ZENODO.7150677
   Bembenek A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428209
   Bjorner N, 2015, LECT NOTES COMPUT SC, V9300, P24, DOI 10.1007/978-3-319-23534-9_2
   Bravenboer M, 2009, ACM SIGPLAN NOTICES, V44, P243, DOI 10.1145/1639949.1640108
   Brewka G, 2011, COMMUN ACM, V54, P92, DOI 10.1145/2043174.2043195
   Buneman P, 2001, LECT NOTES COMPUT SC, V1973, P316
   Calimeri F, 2017, INTELL ARTIF, V11, P5, DOI 10.3233/IA-170104
   Clark K. L., 1978, Logic and data bases, P293
   Corapi Domenico, 2012, Inductive Logic Programming. 21st International Conference, ILP 2011. Revised Selected Papers, P91, DOI 10.1007/978-3-642-31951-8_12
   Cropper A, 2022, MACH LEARN, V111, P147, DOI 10.1007/s10994-021-06089-1
   Cropper A, 2021, MACH LEARN, V110, P801, DOI 10.1007/s10994-020-05934-z
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dougherty DJ, 2006, LECT NOTES ARTIF INT, V4130, P632
   DOYLE J, 1979, ARTIF INTELL, V12, P231, DOI 10.1016/0004-3702(79)90008-0
   Evans R, 2021, ARTIF INTELL, V293, DOI 10.1016/j.artint.2020.103438
   Fages F., 1994, Methods of Logic in Computer Science, V1, P51
   Flores-Montoya A, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P1075
   Gallaire H., 1978, LOGIC DATA BASES
   Gebser M, 2007, LECT NOTES COMPUT SC, V4483, P266, DOI 10.1007/978-3-540-72200-7_24
   Gebser M, 2014, FRONT ARTIF INTEL AP, V263, P351, DOI 10.3233/978-1-61499-419-0-351
   Gebser M, 2011, LECT NOTES ARTIF INT, V6645, P345
   Gebser M, 2012, ARTIF INTELL, V187, P52, DOI 10.1016/j.artint.2012.04.001
   Gebser M, 2011, AI COMMUN, V24, P107, DOI 10.3233/AIC-2011-0491
   Gebser M, 2009, LECT NOTES COMPUT SC, V5649, P235, DOI 10.1007/978-3-642-02846-5_22
   Gelfond M., 1988, P 5 INT C LOG PROGR, P1070, DOI DOI 10.2307/2275201
   Giunchiglia E, 2004, PROCEEDING OF THE NINETEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE SIXTEENTH CONFERENCE ON INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE, P61
   Grebenshchikov S, 2012, ACM SIGPLAN NOTICES, V47, P405, DOI 10.1145/2345156.2254112
   Grech N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276486
   Grech N, 2019, PROC INT CONF SOFTW, P1176, DOI 10.1109/ICSE.2019.00120
   Green TJ, 2012, FOUND TRENDS DATABAS, V5, P105, DOI 10.1561/1900000017
   Green Todd J., 2007, PODS, DOI DOI 10.1145/1265530.1265535
   Guarnieri S., 2009, USENIX SEC S, V10, P78
   Gurfinkel A, 2015, LECT NOTES COMPUT SC, V9206, P343, DOI 10.1007/978-3-319-21690-4_20
   Hackett Brian, 2010, THESIS STANFORD U
   Herschel M, 2009, PROC VLDB ENDOW, V2, P1550, DOI 10.14778/1687553.1687588
   Hoder Krystof, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P457, DOI 10.1007/978-3-642-22110-1_36
   Hoder Krystof, 2012, LNCS, P157, DOI [10.1007/978-3-642-31612-8_13, DOI 10.1007/978-3-642-31612-8_13, DOI 10.1007/978-3-642-31612-813]
   Jaffar J., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P111, DOI 10.1145/41625.41635
   JAFFAR J, 1994, J LOGIC PROGRAM, V20, P503, DOI 10.1016/0743-1066(94)90033-7
   Jordan H, 2016, LECT NOTES COMPUT SC, V9780, P422, DOI 10.1007/978-3-319-41540-6_23
   Kaminski T, 2018, THEOR PRACT LOG PROG, V18, P571, DOI 10.1017/S1471068418000261
   Klenze T, 2016, LECT NOTES COMPUT SC, V9779, P136, DOI 10.1007/978-3-319-41528-4_8
   Law M., 2021, P 30 INT JOINT C ART, P1936, DOI [DOI 10.24963/IJCAI.2021/267, 10.24963/ijcai.2021/267]
   Law M, 2020, AAAI CONF ARTIF INTE, V34, P2877
   Law M, 2015, THEOR PRACT LOG PROG, V15, P511, DOI 10.1017/S1471068415000198
   Law Mark, 2020, ALP NEWSLETTER
   Lee J, 2017, THEOR PRACT LOG PROG, V17, P942, DOI 10.1017/S1471068417000400
   Lee S, 2019, VLDB J, V28, P47, DOI 10.1007/s00778-018-0518-5
   Li NH, 2003, LECT NOTES COMPUT SC, V2562, P58
   Lin FZ, 2004, ARTIF INTELL, V157, P115, DOI 10.1016/j.artint.2004.04.004
   Livshits VB, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 14TH USENIX SECURITY SYMPOSIUM, P271
   Loo Boon Thau, 2006, SIGMOD C, P97, DOI [10.1145/1142473.1142485, DOI 10.1145/1142473.1142485]
   MARKOVITCH S, 1993, MACH LEARN, V10, P113, DOI 10.1007/BF00993503
   MCALLESTER D, 1990, PROCEEDINGS : EIGHTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE, VOLS 1 AND 2, P1109
   Mellarkod VS, 2008, ANN MATH ARTIF INTEL, V53, P251, DOI 10.1007/s10472-009-9116-y
   Mendelson J, 2021, AAAI CONF ARTIF INTE, V35, P6444
   MUGGLETON S, 1990, NEW GENERAT COMPUT, V8, P295
   Nieuwenhuis R, 2006, J ACM, V53, P937, DOI 10.1145/1217856.1217859
   Papadimitriou C. H., 1985, Bulletin of the European Association for Theoretical Computer Science, P21
   Przymusinski T. C., 1988, F DEDUCTIVE DATABASE, P193
   Raghothaman Mukund, 2019, P ACM PROGR LANG POP, V4, P1
   Reps T. W., 1995, Applications of Logic Databases, P163
   Ryzhyk Leonid, 2019, Datalog
   Scholz B, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P196, DOI 10.1145/2892208.2892226
   Schüller P, 2018, MACH LEARN, V107, P1141, DOI 10.1007/s10994-018-5708-2
   Sebastiani R., 2007, J SAT, V3, P141, DOI [DOI 10.3233/978-1-58603-929-5-825, 10.3233/SAT190034, 10.3233/sat190034, DOI 10.3233/SAT190034]
   Si XJ, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P6117
   Si XJ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P515, DOI 10.1145/3236024.3236034
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Thakkar A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1110, DOI 10.1145/3453483.3454098
   Tsankov P, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P67, DOI 10.1145/3243734.3243780
   VANGELDER A, 1991, J ACM, V38, P620, DOI 10.1145/116825.116838
   VANGELDER A, 1989, J LOGIC PROGRAM, V6, P109, DOI 10.1016/0743-1066(89)90032-0
   Vardi M.Y., 1982, P 14 ANN ACM S THEOR, P137, DOI DOI 10.1145/800070.802186
   Weinzierl A, 2017, LECT NOTES ARTIF INT, V10377, P191, DOI 10.1007/978-3-319-61660-5_17
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   Woodruff A, 1997, PROC INT CONF DATA, P91, DOI 10.1109/ICDE.1997.581742
   Zhao D, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3379446
NR 91
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
AR 7
DI 10.1145/3571200
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500007
OA gold
DA 2024-07-18
ER

PT J
AU Kobayashi, N
   Tanahashi, K
   Sato, R
   Tsukada, T
AF Kobayashi, Naoki
   Tanahashi, Kento
   Sato, Ryosuke
   Tsukada, Takeshi
TI HFL(Z) Validity Checking for Automated Program Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Automated Program Verification; Higher-Order Functional Programs;
   Fixpoint Logic
ID TERMINATION
AB We propose an automated method for checking the validity of a formula of HFL(Z), a higher-order logic with fixpoint operators and integers. Combined with Kobayashi et al.'s reduction from higher-order program verification to HFL(Z) validity checking, our method yields a fully automated, uniform verification method for arbitrary temporal properties of higher-order functional programs expressible in the modal mu-calculus, including termination, non-termination, fair termination, fair non-termination, and also branching-time properties. We have implemented our method and obtained promising experimental results.
C1 [Kobayashi, Naoki; Tanahashi, Kento; Sato, Ryosuke] Univ Tokyo, Tokyo, Japan.
   [Tsukada, Takeshi] Chiba Univ, Chiba, Japan.
C3 University of Tokyo; Chiba University
RP Kobayashi, N (corresponding author), Univ Tokyo, Tokyo, Japan.
EM koba@is.s.u-tokyo.ac.jp; kentotanahashi@kb.is.s.u-tokyo.ac.jp;
   rsato@is.s.u-tokyo.ac.jp; tsukada@math.s.chiba-u.ac.jp
RI Sato, Ryosuke/KCY-8676-2024
OI Sato, Ryosuke/0000-0001-8679-2747; Tsukada, Takeshi/0000-0002-2824-8708;
   Kobayashi, Naoki/0000-0002-0537-0604
FU JSPS KAKENHI [JP20H05703]
FX We would like to thank anonymous referees for useful comments. This work
   was supported by JSPS KAKENHI Grant Number JP20H05703.
CR [Anonymous], 2013, Proceedings (Lecture Notes in Computer Science, DOI DOI 10.1007/978-3-642-39799
   Bjorner Nikolaj, 2013, Static Analysis. Proceedings of 20th International Symposium (SAS 2013): LNCS 7935, P105, DOI 10.1007/978-3-642-38856-9_8
   Bjorner N, 2015, LECT NOTES COMPUT SC, V9300, P24, DOI 10.1007/978-3-319-23534-9_2
   Brad~eld Julian, 2018, Handbook of Model Checking, P871, DOI DOI 10.1007/978-3-319-10575-8_26
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3576, P491
   Burn TC, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158099
   Cook Byron, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P265, DOI 10.1145/1190216.1190257
   Cook B, 2013, ACM SIGPLAN NOTICES, V48, P219, DOI 10.1145/2499370.2491969
   Cook B, 2013, LECT NOTES COMPUT SC, V7795, P47, DOI 10.1007/978-3-642-36742-7_4
   Delzanno G., 2001, International Journal on Software Tools for Technology Transfer, V3, P250, DOI 10.1007/s100090100049
   Fedyukovich G, 2018, LECT NOTES COMPUT SC, V10981, P124, DOI 10.1007/978-3-319-96145-3_7
   HAREL D, 1986, J ACM, V33, P224, DOI 10.1145/4904.4993
   Hofmann M, 2014, Arxiv, DOI arXiv:1401.5107
   Hofmann M, 2014, IEEE S LOG, DOI 10.1145/2603088.2603127
   Iwayama N, 2020, LECT NOTES COMPUT SC, V12389, P134, DOI 10.1007/978-3-030-65474-0_7
   Jaffar J, 2006, LECT NOTES COMPUT SC, V3855, P17
   Katsura Hiroyuki, 2020, P LECT NOTES COMPUTE, V2470, P86, DOI [DOI 10.1007/978-3-030-64437-6_5, DOI 10.1007/978-3-030-64437-6]
   Kobayashi Naoki, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P711, DOI 10.1007/978-3-319-89884-1_25
   Kobayashi N, 2022, Arxiv, DOI [arXiv:2203.07601, 10.48550/arXiv.2203.07601, DOI 10.48550/ARXIV.2203.07601]
   Kobayashi N, 2018, Arxiv, DOI arXiv:1710.08614
   Kobayashi N, 2019, LECT NOTES COMPUT SC, V11822, P413, DOI 10.1007/978-3-030-32304-2_20
   Kobayashi N, 2017, ACM SIGPLAN NOTICES, V52, P246, DOI 10.1145/3093333.3009854
   Kobayashi N, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P222
   Koskinen E, 2014, IEEE S LOG, DOI 10.1145/2603088.2603138
   Kuwahara T, 2015, LECT NOTES COMPUT SC, V9207, P287, DOI 10.1007/978-3-319-21668-3_17
   Kuwahara T, 2014, LECT NOTES COMPUT SC, V8410, P392
   Lester M. M., 2011, P ML WORKSHOP 2011
   Murase A, 2016, ACM SIGPLAN NOTICES, V51, P57, DOI 10.1145/2914770.2837667
   Nanjo Y, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P759, DOI 10.1145/3209108.3209204
   Nielson F., 1999, Principles of Program Analysis
   Ong CHL, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P587, DOI 10.1145/1926385.1926453
   Palsberg J, 2001, ACM SIGPLAN NOTICES, P20
   Pavlinovic Z, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434300
   Podelski A, 2004, IEEE S LOG, P32, DOI 10.1109/LICS.2004.1319598
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Sato Ryosuke, 2013, P PEPM 2013, P53
   Terauchi T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1706299.1706315
   Tsukada T, 2020, IEEE S LOG, P886, DOI 10.1145/3373718.3394766
   Unno H, 2013, ACM SIGPLAN NOTICES, V48, P75, DOI 10.1145/2480359.2429081
   Viswanathan M, 2004, LECT NOTES COMPUT SC, V3170, P512
   Watanabe K, 2019, PROCEEDINGS OF THE 2019 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM '19), P22, DOI 10.1145/3294032.3294077
   Watanabe K, 2016, ACM SIGPLAN NOTICES, V51, P243, DOI 10.1145/3022670.2951919
   Zhu H, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P400, DOI 10.1145/2784731.2784766
NR 43
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
AR 6
DI 10.1145/3571199
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500006
OA gold
DA 2024-07-18
ER

PT J
AU Lemerre, M
AF Lemerre, Matthieu
TI SSA Translation Is an Abstract Interpretation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Static Single Assignment (SSA); Abstract interpretation; Cyclic term
   graph
ID SINGLE-ASSIGNMENT FORM; DESIGN; IMPLEMENTATION; VERIFICATION;
   GENERATION; FRAMEWORK
AB Static single assignment (SSA) form is a popular intermediate representation that helps implement useful static analyses, including global value numbering (GVN), sparse dataflow analyses, or SMT-based abstract interpretation or model checking. However, the precision of the SSA translation itself depends on static analyses, and a priori static analysis is even indispensable in the case of low-level input languages like machine code. To solve this chicken-and-egg problem, we propose to turn the SSA translation into a standard static analysis based on abstract interpretation. This allows the SSA translation to be combined with other static analyses in a single pass, taking advantage of the fact that it is more precise to combine analyses than applying passes in sequence. We illustrate the practicality of these results by writing a simple dataflow analysis that performs SSA translation, optimistic global value numbering, sparse conditional constant propagation, and loop-invariant code motion in a single small pass; and by presenting a multi-language static analyzer for both C and machine code that uses the SSA abstract domain as its main intermediate representation.
C1 [Lemerre, Matthieu] Univ Paris Saclay, CEA, List, F-91120 Palaiseau, France.
C3 Universite Paris Cite; CEA; Universite Paris Saclay
RP Lemerre, M (corresponding author), Univ Paris Saclay, CEA, List, F-91120 Palaiseau, France.
EM matthieu.lemerre@cea.fr
RI Lemerre, Matthieu/KOD-8479-2024
OI Lemerre, Matthieu/0000-0002-1081-0467
CR Alpern B., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P1, DOI 10.1145/73560.73561
   Appel AW, 1998, ACM SIGPLAN NOTICES, V33, P17, DOI 10.1145/278283.278285
   Ariola Z. M., 1996, Fundamenta Informaticae, V26, P207
   Aycock J, 2000, LECT NOTES COMPUT SC, V1781, P110
   Bardin S, 2011, LECT NOTES COMPUT SC, V6538, P54, DOI 10.1007/978-3-642-18275-4_6
   Barthe G, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2579080
   Blanchet B, 2002, LECT NOTES COMPUT SC, V2566, P85
   Blazy S, 2017, LECT NOTES COMPUT SC, V10145, P112, DOI 10.1007/978-3-319-52234-0_7
   Bourdoncle F., 1993, Formal Methods in Programming and Their Applications International Conference Proceedings, P128, DOI 10.1007/BFb0039704
   Brain M, 2015, LECT NOTES COMPUT SC, V9291, P145, DOI 10.1007/978-3-662-48288-9_9
   BRANDIS MM, 1994, ACM T PROGR LANG SYS, V16, P1684, DOI 10.1145/197320.197331
   Braun M, 2013, LECT NOTES COMPUT SC, V7791, P102, DOI 10.1007/978-3-642-37051-9_6
   Brumley D., 2013, P 22TH USENIX SECURI, P353
   Buchwald S, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P67, DOI 10.1145/2892208.2892211
   Chang Bor-Yuh Evan, 2013, FESTSCHRIFT DAVE SCH, V129, DOI [10.48550/arXiv.1309.5138, DOI 10.48550/ARXIV.1309.5138]
   Chang BYE, 2005, LECT NOTES COMPUT SC, V3385, P147
   Choi Jong-Deok, 1991, P 18 ACM SIGPLANSIGA, P55, DOI DOI 10.1145/99583.99594
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   CLICK C, 1995, ACM T PROGR LANG SYS, V17, P181, DOI 10.1145/201059.201061
   CLICK C, 1995, SIGPLAN NOTICES, V30, P35, DOI 10.1145/202530.202534
   Cooper Keith D, 1995, SCC BASED VALUE NUMB
   Cousot P, 2002, ACM SIGPLAN NOTICES, V37, P178, DOI 10.1145/565816.503290
   Cousot P, 2002, THEOR COMPUT SCI, V277, P47, DOI 10.1016/S0304-3975(00)00313-3
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2007, LECT NOTES COMPUT SC, V4435, P272
   Cousot Patrick., 1977, ASYNCHRONOUS ITERATI
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   DEBAKKER JW, 1975, J COMPUT SYST SCI, V11, P323, DOI 10.1016/S0022-0000(75)80056-0
   Demange D, 2018, CC'18: PROCEEDINGS OF THE 27TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P163, DOI 10.1145/3178372.3179503
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Djoudi A, 2016, LECT NOTES COMPUT SC, V9995, P235, DOI 10.1007/978-3-319-48989-6_15
   Farinier Benjamin, 2018, EPIC SERIES COMPUTIN, V57, P363, DOI [10.29007/dc9b, DOI 10.29007/DC9B]
   Gange G, 2016, LECT NOTES COMPUT SC, V9583, P85, DOI 10.1007/978-3-662-49122-5_4
   Gulwani S, 2004, LECT NOTES COMPUT SC, V3148, P212
   Gurfinkel A, 2015, LECT NOTES COMPUT SC, V9206, P343, DOI 10.1007/978-3-319-21690-4_20
   Hack Sebastian., 2016, SSA RECONSTRUCTION, V1st
   Henry J, 2012, ELECTRON NOTES THEOR, V289, P15, DOI 10.1016/j.entcs.2012.11.003
   Illous H, 2021, FORM METHOD SYST DES, V57, P343, DOI 10.1007/s10703-021-00366-4
   Journault M, 2020, LECT NOTES COMPUT SC, V12031, P1, DOI 10.1007/978-3-030-41600-3_1
   KELSEY RA, 1995, SIGPLAN NOTICES, V30, P13, DOI 10.1145/202530.202532
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   Kinder J, 2009, LECT NOTES COMPUT SC, V5403, P214, DOI 10.1007/978-3-540-93900-9_19
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Lemerre Matthieu., 2023, SSA TRANSLATION IS A
   Lemerre Matthieu, 2023, SSA TRANSLATION IS A, DOI [10.1145/3554341, DOI 10.1145/3554341]
   Lerner S, 2002, ACM SIGPLAN NOTICES, V37, P270, DOI 10.1145/565816.503298
   Mansky W, 2010, LECT NOTES COMPUT SC, V6172, P371, DOI 10.1007/978-3-642-14052-5_26
   Miné A, 2006, LECT NOTES COMPUT SC, V3855, P348
   Mirliaz S, 2022, LECT NOTES COMPUT SC, V13182, P197, DOI 10.1007/978-3-030-94583-1_10
   Nelson Greg, 1980, THESIS STANFORD U CA
   Nicole O, 2022, LECT NOTES COMPUT SC, V13182, P219, DOI 10.1007/978-3-030-94583-1_11
   Nicole O, 2021, IEEE REAL TIME, P27, DOI 10.1109/RTAS52030.2021.00011
   Nicole Olivier, 2021, BINSEC CODEZ ABSTRAC
   Okasaki C., 1998, WORKSHOP ML, P77
   Patrick Cousot, 1978, THESIS U J FOURIER G
   Ramsey N, 2010, ACM SIGPLAN NOTICES, V45, P121, DOI 10.1145/2088456.1863539
   Rastello F., 2016, SSA-based Compiler Design
   REIF JH, 1982, SIAM J COMPUT, V11, P81, DOI 10.1137/0211007
   REIF JH, 1986, J COMPUT SYST SCI, V32, P280, DOI 10.1016/0022-0000(86)90031-0
   Reinbacher T., 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P117
   Reps T, 2004, LECT NOTES COMPUT SC, V2937, P252
   Rompf Tiark, 2012, THESIS ECOLE POLYTEC
   Rosen B. K., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P12, DOI 10.1145/73560.73562
   Rustan K, 2005, INFORM PROCESS LETT, V93, P281, DOI 10.1016/j.ipl.2004.10.015
   Rüthing O, 1999, LECT NOTES COMPUT SC, V1694, P232
   Sangiorgi D, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1516507.1516510
   Schneider S., 2013, THESIS SAARLAND U
   Sreedhar V. C., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P62, DOI 10.1145/199448.199464
   Stanier James, 2016, GRAPHS GATING FUNCTI, V1st
   Tavares A, 2014, LECT NOTES COMPUT SC, V8409, P18
   van Emmerik Michael James, 2007, THESIS U QUEENSLAND
   WEGMAN MN, 1991, ACM T PROGR LANG SYS, V13, P181, DOI 10.1145/103135.103136
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Yadavalli S. B., 2019, P 20 ACM SIGPLANSIGB, P213
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
   Zhao JZ, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P427
NR 77
TC 1
Z9 1
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571258
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500065
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Song, Y
   Cho, M
   Lee, D
   Hur, CK
   Sammler, M
   Dreyer, D
AF Song, Youngju
   Cho, Minki
   Lee, Dongjae
   Hur, Chung-Kil
   Sammler, Michael
   Dreyer, Derek
TI Conditional Contextual Refinement
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE contextual refinement; separation logic; Coq; verification
ID LOGIC
AB Much work in formal verification of low-level systems is based on one of two approaches: refinement or separation logic. These two approaches have complementary benefits: refinement supports the use of programs as specifications, as well as transitive composition of proofs, whereas separation logic supports conditional specifications, aswell as modular ownership reasoning about shared state. A number of verification frameworks employ these techniques in tandem, but in all such cases the benefits of the two techniques remain separate. For example, in frameworks that use relational separation logic to prove contextual refinement, the relational separation logic judgment does not support transitive composition of proofs, while the contextual refinement judgment does not support conditional specifications. In this paper, we propose Conditional Contextual Refinement (or CCR, for short), the first verification system to not only combine refinement and separation logic in a single framework but also to truly marry them together into a unified mechanism enjoying all the benefits of refinement and separation logic simultaneously. Specifically, unlike in prior work, CCR's refinement specifications are both conditional (with separation logic pre- and post-conditions) and transitively composable. We implement CCR in Coq and evaluate its effectiveness on a range of interesting examples.
C1 [Song, Youngju; Cho, Minki; Lee, Dongjae; Hur, Chung-Kil] Seoul Natl Univ, Seoul, South Korea.
   [Song, Youngju; Sammler, Michael; Dreyer, Derek] SIC, MPI SWS, Saarbrucken, Germany.
C3 Seoul National University (SNU)
RP Song, Y (corresponding author), Seoul Natl Univ, Seoul, South Korea.; Song, Y (corresponding author), SIC, MPI SWS, Saarbrucken, Germany.
EM youngju@mpi-sws.org; minki.cho@sf.snu.ac.kr; dongjaelee@sf.snu.ac.kr;
   gil.hur@sf.snu.ac.kr; msammler@mpi-sws.org; dreyer@mpi-sws.org
OI Song, Youngju/0000-0001-7093-3824; Hur, Chung-Kil/0000-0002-1656-0913;
   Lee, Dongjae/0000-0003-2576-1220; Cho, Minki/0000-0002-6684-0921;
   Dreyer, Derek/0000-0002-3884-6867
FU Samsung Research Funding Center of Samsung Electronics [SRFC-IT2102-03];
   Google PhD Fellowship; Android Security's ASPIRE program; Google
   Research
FX We thank Ralf Jung and Simon Spies for helpful feedback. Chung-Kil Hur
   is the corresponding author. This research was funded in part by Samsung
   Research Funding Center of Samsung Electronics under Project Number
   SRFC-IT2102-03, a Google PhD Fellowship (Sammler), and awards from
   Android Security's ASPIRE program and from Google Research.
CR Appel A.W., 2014, Program logics for certified compilers
   Back R. J., 2012, REFINEMENT CALCULUS
   BACK RJR, 1981, J COMPUT SYST SCI, V23, P49, DOI 10.1016/0022-0000(81)90005-2
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Birkedal Lars, 2020, Lecture Notes on Iris: Higher-Order Concurrent Separation Logic
   Charguéraud A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408998
   Dreyer D, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P185, DOI 10.1145/1706299.1706323
   Frumin D, 2021, LOG METH COMPUT SCI, V17, DOI 10.46298/LMCS-17(3:9)2021
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Gäher L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498689
   Gu Liang, 2011, P 2 ACM SIGOPS ASIA
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Hur CK, 2013, ACM SIGPLAN NOTICES, V48, P193, DOI 10.1145/2480359.2429093
   Hur Chung-Kil, 2012, P 39 ACM SIGPLANSIGA
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Kleymann T., 1999, Formal Aspects of Computing, V11, P541, DOI 10.1007/s001650050057
   Koenig J, 2020, IEEE S LOG, P633, DOI 10.1145/3373718.3394799
   Koenig Jeremie, 2020, REFINEMENT BASED GAM
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Liang HJ, 2016, ACM SIGPLAN NOTICES, V51, P385, DOI 10.1145/2914770.2837635
   Lorch JR, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P197, DOI 10.1145/3385412.3385971
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Schreiber T., 1997, TAPSOFT '97: Theory and Practice of Software Development. 7th International Joint Conference CAAP/FASE. Proceedings, P697, DOI 10.1007/BFb0030635
   Shih-Wei Li, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P1782, DOI 10.1109/SP40001.2021.00049
   Song Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371091
   Song Youngju, 2022, CCR TECHNICAL DOCUME
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Yang H, 2007, THEOR COMPUT SCI, V375, P308, DOI 10.1016/j.tcs.2006.12.036
NR 33
TC 7
Z9 8
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571232
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500039
OA gold
DA 2024-07-18
ER

PT J
AU Kovács, A
AF Kovacs, Andras
TI Staged Compilation with Two-Level Type Theory
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type theory; two-level type theory; staged compilation
AB The aim of staged compilation is to enable metaprogramming in a way such that we have guarantees about the well-formedness of code output, and we can also mix together object-level and meta-level code in a concise and convenient manner. In this work, we observe that two-level type theory (2LTT), a system originally devised for the purpose of developing synthetic homotopy theory, also serves as a system for staged compilation with dependent types. 2LTT has numerous good properties for this use case: it has a concise specification, well-behaved model theory, and it supports a wide range of language features both at the object and the meta level. First, we give an overview of 2LTT's features and applications in staging. Then, we present a staging algorithm and prove its correctness. Our algorithm is "staging-by-evaluation", analogously to the technique of normalization-by-evaluation, in that staging is given by the evaluation of 2LTT syntax in a semantic domain. The staging algorithm together with its correctness constitutes a proof of strong conservativity of 2LLT over the object theory. To our knowledge, this is the first description of staged compilation which supports full dependent types and unrestricted staging for types.
C1 [Kovacs, Andras] Eotvos Lorand Univ, Budapest, Hungary.
C3 Eotvos Lorand University
RP Kovács, A (corresponding author), Eotvos Lorand Univ, Budapest, Hungary.
EM kovacsandras@inf.elte.hu
OI Kovacs, Andras/0000-0002-6375-9781
FU National Research, Development and Innovation Fund of Hungary
   [TKP2020-NKA-06]
FX The author was supported by the lApplication Domain Specific Highly
   Reliable IT Solutionsz project which has been implemented with support
   from the National Research, Development and Innovation Fund of Hungary,
   financed under the Thematic Excellence Programme TKP2020-NKA-06
   (National Challenges Subprogramme) funding scheme.
CR Abel A, 2007, FUND INFORM, V77, P345
   Abel A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158111
   Abel A, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:4)2011
   Agda developers, 2022, AGD DOC
   Altenkirch T, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(4:1)2017
   Altenkirch T, 2016, ACM SIGPLAN NOTICES, V51, P18, DOI 10.1145/2914770.2837638
   Annenkov Danil, 2017, arXiv
   [Anonymous], 1993, Prentice Hall international series in computer science
   Bocquet R., 2021, arXiv
   BOHM C, 1985, THEOR COMPUT SCI, V39, P135, DOI 10.1016/0304-3975(85)90135-5
   Brady EC, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P297
   Capriotti P, 2017, Arxiv, DOI arXiv:1702.04912
   Cavallo Evan, 2020, LIPIcs, V152, DOI [10.4230/LIPIcs.CSL.2020.14, DOI 10.4230/LIPICS.CSL.2020.14]
   Chapman J, 2010, ACM SIGPLAN NOTICES, V45, P3, DOI 10.1145/1932681.1863547
   Clairambault Pierre, 2019, ABS190400827
   Coquand T, 1996, SCI COMPUT PROGRAM, V26, P167, DOI 10.1016/0167-6423(95)00021-6
   Coquand T, 2019, THEOR COMPUT SCI, V777, P184, DOI 10.1016/j.tcs.2019.01.015
   Coutts D, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P315
   Dagand PE, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000356
   Danvy O, 1996, ACM T PROGR LANG SYS, V18, P730, DOI 10.1145/236114.236119
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   Diehl Larry, 2017, THESIS PORTLAND STAT
   Dunfield J, 2021, ACM COMPUT SURV, V54, DOI 10.1145/3450952
   Gill A., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P223, DOI 10.1145/165180.165214
   Gratzer D, 2020, IEEE S LOG, P492, DOI 10.1145/3373718.3394736
   Hofmann M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P204, DOI 10.1109/LICS.1999.782616
   Hofmann M., 1997, SEMANTICS LOGICS COM
   Hofmann M, 1995, THESIS
   Hu Z. S., 2022, ABS220602831
   Huber Simon, 2016, PhD thesis
   Jang J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498700
   Kameyama Y, 2011, J FUNCT PROGRAM, V21, P617, DOI 10.1017/S0956796811000256
   Kaposi A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290315
   Kaposi Ambrus, LIPICS, V131, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Kawata A, 2019, LECT NOTES COMPUT SC, V11893, P53, DOI 10.1007/978-3-030-34175-6_4
   Kiselyov O, 2022, Arxiv, DOI arXiv:2201.00495
   Kiselyov O, 2014, LECT NOTES COMPUT SC, V8475, P86, DOI 10.1007/978-3-319-07151-0_6
   Kovacs Andras, 2022, Zenodo, DOI 10.5281/ZENODO.6757373
   Löh A, 2011, WGP 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN WORKSHOP ON GENERIC PROGRAMMING, P1
   LOPS18 Daniel R., 2018, 3 INT C FORMAL STRUC, p22:1, DOI [10.4230/LIPIcs.FSCD.2018.22, DOI 10.4230/LIPICS.FSCD.2018.22]
   Mac Lane S., 1998, Categories for the Working Mathematician. Graduate Texts in Mathematics, V2nd
   Orton I., 2016, 25 EACSL ANN C 30 WO, P19, DOI [DOI 10.4230/LIPICS.CSL, 10.4230/LIPIcs.CSL.2016.24.Id/No24, DOI 10.4230/LIPICS.CSL.2016.24.ID/NO24]
   Pédrot PM, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371126
   Pujet L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498693
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Sterling Jonathan, 2021, 2021 36th Annual ACM/IEEE Symposium on Logic in Computer Science (LICS), DOI 10.1109/LICS52264.2021.9470719
   Sterling Jonathan, 2021, THESIS CARNEGIE MELL
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   Voevodsky Vladimir., 2013, SIMPLE TYPE SYSTEM 2
   Winterhalter T, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P91, DOI 10.1145/3293880.3294095
   YALLOP J, 2018, PROC ACM PROGRAM LAN, DOI [10.1145/3236795, DOI 10.1145/3236795]
NR 51
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 110
DI 10.1145/3547641
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000021
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Paltenghi, M
   Pradel, M
AF Paltenghi, Matteo
   Pradel, Michael
TI Bugs in Quantum Computing Platforms: An Empirical Study
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantum computing platform; software bugs; empirical study
AB The interest in quantum computing is growing, and with it, the importance of software platforms to develop quantum programs. Ensuring the correctness of such platforms is important, and it requires a thorough understanding of the bugs they typically suffer from. To address this need, this paper presents the first in-depth study of bugs in quantum computing platforms. We gather and inspect a set of 223 real-world bugs from 18 open-source quantum computing platforms. Our study shows that a significant fraction of these bugs (39.9%) are quantum-specific, calling for dedicated approaches to prevent and find them. The bugs are spread across various components, but quantum-specific bugs occur particularly often in components that represent, compile, and optimize quantum programming abstractions. Many quantum-specific bugs manifest through unexpected outputs, rather than more obvious signs of misbehavior, such as crashes. Finally, we present a hierarchy of recurrent bug patterns, including ten novel, quantum-specific patterns. Our findings not only show the importance and prevalence bugs in quantum computing platforms, but they help developers to avoid common mistakes and tool builders to tackle the challenge of preventing, finding, and fixing these bugs.
C1 [Paltenghi, Matteo; Pradel, Michael] Univ Stuttgart, Stuttgart, Germany.
C3 University of Stuttgart
RP Paltenghi, M (corresponding author), Univ Stuttgart, Stuttgart, Germany.
EM mattepalte@live.it; michael@binaervarianz.de
RI Paltenghi, Matteo/JCD-7289-2023
OI Paltenghi, Matteo/0000-0003-2266-453X
FU European Research Council (ERC) [851895]; German Research Foundation
FX This work was supported by the European Research Council (ERC, grant
   agreement 851895), and by the German Research Foundation within the
   ConcSys and Perf4JS projects.
CR Aftandilian E., 2012, 2012 12th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2012), P14, DOI 10.1109/SCAM.2012.28
   Allamanis M., 2018, INT C LEARN REPR ICL
   [Anonymous], 2021, QISKIT QISKIT
   [Anonymous], 2021, OVERVIEW QUANTUM INI
   Bader J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360585
   Barany G, 2018, CC'18: PROCEEDINGS OF THE 27TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P82, DOI 10.1145/3178372.3179521
   Berabi B, 2021, PR MACH LEARN RES, V139
   Bergholm Ville, 2020, arXiv
   Bichsel B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P286, DOI 10.1145/3385412.3386007
   Campos Jose., 2021, ARXIV210316968 CS
   Chen JJ, 2020, ACM COMPUT SURV, V53, DOI 10.1145/3363562
   Chou A., 2001, Operating Systems Review, V35, P73, DOI 10.1145/502059.502042
   Developers Cirq, 2021, Zenodo, DOI 10.5281/ZENODO.5182845
   Cross A.W., 2017, arXiv
   Dinella E, 2020, ICLR
   Eghbali A, 2020, IEEE INT CONF AUTOM, P956, DOI 10.1145/3324884.3416576
   Farhi Edward, 2014, ARXIV
   Fingerhuth M, 2018, PLOS ONE, V13, DOI 10.1371/journal.pone.0208561
   Finke Doug, 2021, RELATIVE POPULARITY
   Gao X, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428287
   Gonzalez C., 2021, DIGIT WELT, V5, P14, DOI [10.1007/s42354-021-0330-z, DOI 10.1007/S42354-021-0330-Z]
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Häner T, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428201
   Han X, 2016, ESEM'16: PROCEEDINGS OF THE 10TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, DOI 10.1145/2961111.2962602
   Harrow AW, 2009, PHYS REV LETT, V103, DOI 10.1103/PhysRevLett.103.150502
   Hellendoorn V.J., 2019, INT C LEARN REPR
   Hietala K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434318
   Huang YP, 2019, PROCEEDINGS OF THE 2019 46TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA '19), P541, DOI 10.1145/3307650.3322213
   Huang Yipeng, 2019, ARXIV, DOI [10.4230/OASIcs.PLATEAU.2018.4, DOI 10.4230/OASICS.PLATEAU.2018.4]
   Pham HV, 2019, PROC INT CONF SOFTW, P1027, DOI 10.1109/ICSE.2019.00107
   Islam MJ, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P510, DOI 10.1145/3338906.3338955
   Jin GL, 2012, ACM SIGPLAN NOTICES, V47, P77, DOI 10.1145/2345156.2254075
   Kanade A, 2020, PR MACH LEARN RES, V119
   Karampatsis RM, 2020, IEEE WORK CONF MIN S, P573, DOI 10.1145/3379597.3387491
   Kottmann JS, 2021, QUANTUM SCI TECHNOL, V6, DOI 10.1088/2058-9565/abe567
   LaRose Ryan, 2021, ARXIV
   Le Goues C, 2019, COMMUN ACM, V62, P56, DOI 10.1145/3318162
   Le V, 2015, ACM SIGPLAN NOTICES, V50, P386, DOI [10.1145/2814270.2814319, 10.1145/2858965.2814319]
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Li GS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428218
   Li ZM, 2006, IEEE T SOFTWARE ENG, V32, P176, DOI 10.1109/TSE.2006.28
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   McDonnell T, 2013, PROC IEEE INT CONF S, P70, DOI 10.1109/ICSM.2013.18
   McKeeman William M., 1998, DIGIT TECH J, V10, P100
   Meuli G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428198
   Miltner A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360569
   Murali P, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P1001, DOI 10.1145/3373376.3378477
   Paradis A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P222, DOI 10.1145/3453483.3454040
   Pengzhan Zhao, 2021, 2021 IEEE/ACM 2nd International Workshop on Quantum Software Engineering (Q-SE), P16, DOI 10.1109/Q-SE52541.2021.00011
   Rabin MRI, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P441, DOI 10.1145/3468264.3468539
   Ray B, 2016, PROC INT CONF SOFTW, P428, DOI 10.1145/2884781.2884848
   Rice A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133928
   Selakovic M, 2016, PROC INT CONF SOFTW, P61, DOI 10.1145/2884781.2884829
   Shen QC, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P968, DOI 10.1145/3468264.3468591
   Shi Y., 2020, ARXIV
   Shor PW, 1999, SIAM REV, V41, P303, DOI 10.1137/S0036144598347011
   Sun Chengnian, 2016, P 25 INT S SOFTW TES, P294, DOI DOI 10.1145/2931037.2931074
   Suzuki Yasunari, 2021, QULACS
   Svore K, 2018, RWDSL2018: PROCEEDINGS OF THE REAL WORLD DOMAIN SPECIFIC LANGUAGES WORKSHOP 2018, DOI 10.1145/3183895.3183901
   Tao Runzhou, 2021, P 42 ACM SIGPLAN INT, P48, DOI [10.1145/3453483.3454029, DOI 10.1145/3453483.3454029]
   Vafeiadis V, 2015, ACM SIGPLAN NOTICES, V50, P209, DOI [10.1145/2676726.2676995, 10.1145/2775051.2676995]
   Vasic Marko, 2018, INT C LEARN REPR
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P216, DOI [10.1145/2666356.2594334, 10.1145/2594291.2594334]
   Wang JY, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P692, DOI 10.1109/ASE51524.2021.9678792
   Wang S, 2021, PROC INT CONF SOFTW, P1548, DOI 10.1109/ICSE43902.2021.00138
   WOOTTERS WK, 1982, NATURE, V299, P802, DOI 10.1038/299802a0
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
   Yi Li, 2020, 2020 IEEE/ACM 42nd International Conference on Software Engineering (ICSE), P602, DOI 10.1145/3377811.3380345
   Yu NK, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P542, DOI 10.1145/3453483.3454061
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P347, DOI [10.1145/3062341.3062379, 10.1145/3140587.3062379]
   Zhao J., 2021, ARXIV
   Zhao PZ, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P1373, DOI 10.1109/ASE51524.2021.9678908
   Zhong H, 2020, PROC INT CONF SOFTW, P899, DOI 10.1145/3377811.3380922
NR 74
TC 10
Z9 12
U1 2
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 86
DI 10.1145/3527330
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300022
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Tsukada, T
   Unno, H
AF Tsukada, Takeshi
   Unno, Hiroshi
TI Software Model-Checking as Cyclic-Proof Search
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE software model-checking; fixed-point logic; cyclic proof system;
   property-directed reachability
ID VERIFICATION
AB This paper shows that a variety of software model-checking algorithms can be seen as proof-search strategies for a non-standard proof system, known as a cyclic proof system. Our use of the cyclic proof system as a logical foundation of software model checking enables us to compare different algorithms, to reconstruct well-known algorithms from a few simple principles, and to obtain soundness proofs of algorithms for free. Among others, we show the significance of a heuristics based on a notion that we call maximal conservativity; this explains the cores of important algorithms such as property-directed reachability (PDR) and reveals a surprising connection to an efficient solver of games over infinite graphs that was not regarded as a kind of PDR.
C1 [Tsukada, Takeshi] Chiba Univ, Chiba, Japan.
   [Unno, Hiroshi] Univ Tsukuba, Tsukuba, Ibaraki, Japan.
   [Unno, Hiroshi] RIKEN AIP, Tokyo, Japan.
C3 Chiba University; University of Tsukuba; RIKEN
RP Tsukada, T (corresponding author), Chiba Univ, Chiba, Japan.
EM tsukada@math.s.chiba-u.ac.jp; uhiro@cs.tsukuba.ac.jp
RI Unno, Hiroshi/IWM-2419-2023
OI Unno, Hiroshi/0000-0002-4225-8195; Tsukada, Takeshi/0000-0002-2824-8708
FU JST ERATO HASUO Metamathematics for Systems Design Project [JPMJER1603];
   JSPS KAKENHI [JP20H05703, JP19K22842, JP20H04162, JP17H01720,
   JP19H04084]
FX This work was supported by JST ERATO HASUO Metamathematics for Systems
   Design Project (No. JPMJER1603) and JSPS KAKENHI Grant Numbers
   JP20H05703, JP19K22842, JP20H04162, JP17H01720, and JP19H04084.
CR [Anonymous], 1971, Studies in Logic and the Foundations of Mathematics, DOI DOI 10.1016/S0049
   [Anonymous], 2013, Proceedings of the 25th International Conference on Computer Aided Verification, CAV'13, DOI 10.1007/978-3-642-39799-8
   Ball T, 2004, LECT NOTES COMPUT SC, V2999, P1
   Ball T, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/565816.503274
   Ball T, 2001, ACM SIGPLAN NOTICES, V36, P203, DOI 10.1145/381694.378846
   Berdine Josh, 2004, LNCS, V3328, P16, DOI [10.1007/b104325, DOI 10.1007/B104325]
   Beyer Dirk, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12078), P3, DOI 10.1007/978-3-030-45190-5_1
   Beyer Dirk, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P184, DOI 10.1007/978-3-642-22110-1_16
   Beyer Dirk, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P29, DOI 10.1109/ASE.2008.13
   Beyer D, 2007, LECT NOTES COMPUT SC, V4590, P504
   Beyer D, 2018, J AUTOM REASONING, V60, P299, DOI 10.1007/s10817-017-9432-6
   Beyer D, 2012, PROCEEDINGS OF THE 12TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2012), P106
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Birgmeier J, 2014, LECT NOTES COMPUT SC, V8559, P831, DOI 10.1007/978-3-319-08867-9_55
   Bjorner N, 2015, LECT NOTES COMPUT SC, V9300, P24, DOI 10.1007/978-3-319-23534-9_2
   Bradley AR, 2011, LECT NOTES COMPUT SC, V6538, P70, DOI 10.1007/978-3-642-18275-4_7
   Brotherston J, 2005, LECT NOTES ARTIF INT, V3702, P78
   Brotherston J., 2012, Programming Languages and Systems, V7705, P350, DOI [10.1007/978-3-642-35182-225, 10.1007/978-3-642-35182-2_25]
   Brotherston J, 2011, J LOGIC COMPUT, V21, P1177, DOI 10.1093/logcom/exq052
   Brotherston J, 2011, LECT NOTES ARTIF INT, V6803, P131, DOI 10.1007/978-3-642-22438-6_12
   Brotherston J, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P101, DOI 10.1145/1328438.1328453
   Bundy A., 2001, HDB AUTOMATED REASON, P845, DOI DOI 10.1016/B978-044450813-3/50015-1
   Chin WN, 2012, SCI COMPUT PROGRAM, V77, P1006, DOI 10.1016/j.scico.2010.07.004
   Chu DH, 2015, ACM SIGPLAN NOTICES, V50, P457, DOI [10.1145/2813885.2737984, 10.1145/2737924.2737984]
   Cimatti Alessandro, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P277, DOI 10.1007/978-3-642-31424-7_23
   Cimatti A., 2014, P 20 INT C TOOLS ALG, P46
   Clarke E, 2003, J ACM, V50, P752, DOI 10.1145/876638.876643
   Colón MA, 2003, LECT NOTES COMPUT SC, V2725, P420
   Craig W., 1957, J SYMBOLIC LOGIC, V22, P269
   Een N., 2011, 2011 Formal Methods in Computer-Aided Design (FMCAD), P125
   Enea C, 2015, LECT NOTES COMPUT SC, V9364, P80, DOI 10.1007/978-3-319-24953-7_7
   Farzan A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158149
   Farzan Azadeh., 2016, IJCAI, P735
   Flanagan C, 2004, SCI COMPUT PROGRAM, V50, P253, DOI 10.1016/j.scico.2004.01.006
   Garg P, 2016, ACM SIGPLAN NOTICES, V51, P499, DOI 10.1145/2914770.2837664
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Henzinger TA, 2004, ACM SIGPLAN NOTICES, V39, P232, DOI 10.1145/982962.964021
   Henzinger TA, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/565816.503279
   Hoder Krystof, 2012, LNCS, P157, DOI [10.1007/978-3-642-31612-8_13, DOI 10.1007/978-3-642-31612-8_13, DOI 10.1007/978-3-642-31612-813]
   Iosif Radu, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P21, DOI 10.1007/978-3-642-38574-2_2
   Jhala R, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592438
   Khoroshilov A, 2010, LECT NOTES COMPUT SC, V5947, P165, DOI 10.1007/978-3-642-11486-1_14
   Kimura Daisuke, 2020, COMPUTER SOFTWARE, V37, DOI DOI 10.11309/JSSST.37.1_39
   Komuravelli Anvesh, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P846, DOI 10.1007/978-3-642-39799-8_59
   Komuravelli A, 2014, LECT NOTES COMPUT SC, V8559, P17
   Komuravelli A, 2016, FORM METHOD SYST DES, V48, P175, DOI 10.1007/s10703-016-0249-4
   Komuravelli A, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P89, DOI 10.1109/FMCAD.2015.7542257
   Masuoka Yukihiro, 2021, ABS210611798 CORR
   McMillan KL, 2006, LECT NOTES COMPUT SC, V4144, P123
   Podelski A, 2007, LECT NOTES COMPUT SC, V4354, P245
   Qiu XK, 2013, ACM SIGPLAN NOTICES, V48, P231, DOI 10.1145/2499370.2462169
   Quang LL, 2017, LECT NOTES COMPUT SC, V10427, P495, DOI 10.1007/978-3-319-63390-9_26
   Reynolds A, 2015, LECT NOTES COMPUT SC, V8931, P80
   Sankaranarayanan S, 2004, ACM SIGPLAN NOTICES, V39, P318, DOI 10.1145/982962.964028
   Sharma R, 2013, LECT NOTES COMPUT SC, V7935, P388, DOI 10.1007/978-3-642-38856-9_21
   Sheeran M, 2000, LECT NOTES COMPUT SC, V1954, P108
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Sprenger Christoph, 2003, FOSSACS 03, P425, DOI [10.1007/3-540- 36576- 1_27, DOI 10.1007/3-540-36576-1_27]
   Suter P, 2011, LECT NOTES COMPUT SC, V6887, P298, DOI 10.1007/978-3-642-23702-7_23
   Suter P, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P199, DOI 10.1145/1706299.1706325
   Ta QT, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158097
   Ta QT, 2016, LECT NOTES COMPUT SC, V9995, P659, DOI 10.1007/978-3-319-48989-6_40
   Tellez G, 2020, J AUTOM REASONING, V64, P555, DOI 10.1007/s10817-019-09532-0
   Tsukada Takeshi, 2021, ARXIV211105617
   Unno H, 2017, LECT NOTES COMPUT SC, V10427, P571, DOI 10.1007/978-3-319-63390-9_30
   Vizel Y, 2014, LECT NOTES COMPUT SC, V8559, P260, DOI 10.1007/978-3-319-08867-9_17
NR 66
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 63
DI 10.1145/3498725
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900064
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Chaliasos, S
   Sotiropoulos, T
   Drosos, GP
   Mitropoulos, C
   Mitropoulos, D
   Spinellis, D
AF Chaliasos, Stefanos
   Sotiropoulos, Thodoris
   Drosos, Georgios-Petros
   Mitropoulos, Charalambos
   Mitropoulos, Dimitris
   Spinellis, Diomidis
TI Well-Typed Programs Can Go Wrong: A Study of Typing-Related Bugs in JVM
   Compilers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compiler bugs; compiler testing; static typing; Java; Scala; Kotlin;
   Groovy
ID CONCURRENCY BUGS
AB Despite the substantial progress in compiler testing, research endeavors have mainly focused on detecting compiler crashes and subtle miscompilations caused by bugs in the implementation of compiler optimizations. Surprisingly, this growing body of work neglects other compiler components, most notably the front-end. In statically-typed programming languages with rich and expressive type systems and modern features, such as type inference or a mix of object-oriented with functional programming features, the process of static typing in compiler front-ends is complicated by a high-density of bugs. Such bugs can lead to the acceptance of incorrect programs (breaking code portability or the type system's soundness), the rejection of correct (e.g. well-typed) programs, and the reporting of misleading errors and warnings.
   We conduct, what is to the best of our knowledge, the first empirical study for understanding and characterizing typing-related compiler bugs. To do so, we manually study 320 typing-related bugs (along with their fixes and test cases) that are randomly sampled from four mainstream JVM languages, namely Java, Scala, Kotlin, and Groovy. We evaluate each bug in terms of several aspects, including their symptom, root cause, bug fix's size, and the characteristics of the bug-revealing test cases. Some representative observations indicate that: (1) more than half of the typing-related bugs manifest as unexpected compile-time errors: the buggy compiler wrongly rejects semantically correct programs, (2) the majority of typing-related bugs lie in the implementations of the underlying type systems and in other core components related to operations on types, (3) parametric polymorphism is the most pervasive feature in the corresponding test cases, (4) one third of typing-related bugs are triggered by non-compilable programs.
   We believe that our study opens up a new research direction by driving future researchers to build appropriate methods and techniques for a more holistic testing of compilers.
C1 [Chaliasos, Stefanos; Sotiropoulos, Thodoris; Drosos, Georgios-Petros; Spinellis, Diomidis] Athens Univ Econ & Business, Athens, Greece.
   [Mitropoulos, Charalambos] Tech Univ Crete, Khania, Greece.
   [Mitropoulos, Dimitris] Univ Athens, Athens, Greece.
   [Spinellis, Diomidis] Delft Univ Technol, Delft, Netherlands.
C3 Athens University of Economics & Business; Technical University of
   Crete; National & Kapodistrian University of Athens; Delft University of
   Technology
RP Chaliasos, S (corresponding author), Athens Univ Econ & Business, Athens, Greece.
EM schaliasos@aueb.gr; theosotr@aueb.gr; t8180024@aueb.gr;
   cmitropoulos@isc.tuc.gr; dimitro@ba.uoa.gr; dds@aueb.gr
RI Spinellis, Diomidis/E-3600-2010
OI Spinellis, Diomidis/0000-0003-4231-1897
FU European Union [825328]
FX We thank Alex Delis and the anonymous reviewers for their constructive
   comments. We also thank the Groovy developers, Eric Miles and Paul King,
   for fixing our bug reports quickly and providing feedback in an earlier
   draft of this paper. This work has received funding from the European
   Union's Horizon 2020 research and innovation programme under grant
   agreement No. 825328.
CR Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   [Anonymous], 2010, 1152009 IEEE, P1, DOI [DOI 10.1109/IEEESTD.2010.5439063, 10.1109/IEEESTD.2010.5439063]
   Bagherzadeh M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428282
   Bracha G, 1998, ACM SIGPLAN NOTICES, V33, P183, DOI 10.1145/286942.286957
   Bruno Gois Mateus, 2020, P 14 ACM IEEE INT S, DOI [10.1145/3382494.3410676, DOI 10.1145/3382494.3410676]
   Chen JJ, 2020, ACM COMPUT SURV, V53, DOI 10.1145/3363562
   Chen JJ, 2017, PROC INT CONF SOFTW, P700, DOI 10.1109/ICSE.2017.70
   Chen JJ, 2016, IEEE INT CONF SOFTW, P266, DOI 10.1109/ICST.2016.19
   Chen YT, 2019, PROC INT CONF SOFTW, P1257, DOI 10.1109/ICSE.2019.00127
   Chen YT, 2016, ACM SIGPLAN NOTICES, V51, P85, DOI [10.1145/2980983.2908095, 10.1145/2908080.2908095]
   Chowdhury SA, 2020, PROC INT CONF SOFTW, P335, DOI 10.1145/3377811.3380381
   Dewey K, 2015, IEEE INT CONF AUTOM, P482, DOI 10.1109/ASE.2015.65
   Di Franco A, 2017, IEEE INT CONF AUTOM, P509, DOI 10.1109/ASE.2017.8115662
   Donaldson AF, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133917
   Donaldson Alastair F., 2020, 34 EUROPEAN C OBJECT, V166, DOI 10.4230/LIPIcs.ECOOP.2020.22
   Dutta S, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P574, DOI 10.1145/3236024.3236057
   GitHub, 2021, STAT OCT
   Gosling J., 2015, JAVA LANGUAGE SPECIF
   Holler Christian, 2012, P 21 USENIX C SEC S, P445
   Jin GL, 2012, ACM SIGPLAN NOTICES, V47, P77, DOI 10.1145/2345156.2254075
   Krikava F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360589
   Le V, 2015, ACM SIGPLAN NOTICES, V50, P386, DOI [10.1145/2814270.2814319, 10.1145/2858965.2814319]
   Leesatapornwongsa T, 2016, ACM SIGPLAN NOTICES, V51, P517, DOI 10.1145/2954679.2872374
   Lidbury C, 2015, ACM SIGPLAN NOTICES, V50, P65, DOI [10.1145/2737924.2737986, 10.1145/2813885.2737986]
   Livinskii V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428264
   Marcozzi M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360581
   Mastrangelo L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360584
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Moors A, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P423
   Nagai E., 2012, WORKSH SYNTH SYST IN, P48
   Nagai E, 2014, IPSJ T SYSTEM LSI DE, V7, P91, DOI DOI 10.2197/IPSJTSLDM.7.91
   Odersky M., 2004, An overview of the Scala programming language
   Park S, 2020, P IEEE S SECUR PRIV, P1628, DOI 10.1109/SP40000.2020.00067
   Regehr J, 2012, ACM SIGPLAN NOTICES, V47, P335, DOI 10.1145/2345156.2254104
   Sun CN, 2016, PROC INT CONF SOFTW, P203, DOI 10.1145/2884781.2884879
   Sun CN, 2016, ACM SIGPLAN NOTICES, V51, P849, DOI 10.1145/3022671.2984038
   Sun Chengnian, 2016, P 25 INT S SOFTW TES, P294, DOI DOI 10.1145/2931037.2931074
   TIOBE Software BV, 2021, TIOBE IND
   Tisue Seth, 2017, BYE BYE JIRA SCALA I
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P216, DOI [10.1145/2666356.2594334, 10.1145/2594291.2594334]
   Wang J, 2017, IEEE INT CONF AUTOM, P520, DOI 10.1109/ASE.2017.8115663
   Wang JJ, 2019, PROC INT CONF SOFTW, P724, DOI 10.1109/ICSE.2019.00081
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zalewski M, 2013, AM FUZZY LOP
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P347, DOI [10.1145/3062341.3062379, 10.1145/3140587.3062379]
   Zhou ZD, 2021, J SYST SOFTWARE, V174, DOI 10.1016/j.jss.2020.110884
NR 46
TC 8
Z9 8
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 123
DI 10.1145/3485500
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200027
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Ji, RY
   Xia, JT
   Xiong, YF
   Hu, ZJ
AF Ji, Ruyi
   Xia, Jingtao
   Xiong, Yingfei
   Hu, Zhenjiang
TI Generalizable Synthesis through Unification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Programming by Example; Synthesis through Unification; Occam Learning
AB The generalizability of PBE solvers is the key to the empirical synthesis performance. Despite the importance of generalizability, related studies on PBE solvers are still limited. In theory, few existing solvers provide theoretical guarantees on generalizability, and in practice, there is a lack of PBE solvers with satisfactory generalizability on important domains such as conditional linear integer arithmetic (CLIA). In this paper, we adopt a concept from the computational learning theory, Occam learning, and perform a comprehensive study on the framework of synthesis through unification (STUN), a state-of-the-art framework for synthesizing programs with nested if-then-else operators. We prove that Eusolver, a state-of-the-art STUN solver, does not satisfy the condition of Occam learning, and then we design a novel STUN solver, PolyGen, of which the generalizability is theoretically guaranteed by Occam learning. We evaluate PolyGen on the domains of CLIA and demonstrate that PolyGen significantly outperforms two state-of-the-art PBE solvers on CLIA, Eusolver and Euphony, on both generalizability and efficiency.
C1 [Ji, Ruyi; Xia, Jingtao; Xiong, Yingfei; Hu, Zhenjiang] Peking Univ, Key Lab High Confidence Software Technol, Minist Educ, Dept Comp Sci & Technol,EECS, Beijing, Peoples R China.
C3 Peking University
RP Xiong, YF (corresponding author), Peking Univ, Key Lab High Confidence Software Technol, Minist Educ, Dept Comp Sci & Technol,EECS, Beijing, Peoples R China.
EM jiruyi910387714@pku.edu.cn; xiajt@pku.edu.cn; xiongyf@pku.edu.cn;
   huzj@pku.edu.cn
FU National Key Research and Development Program of China [2019YFE0198100];
   National Natural Science Foundation of China [61922003]
FX We sincerely thank the anonymous OOPSLA reviewers for their valuable
   feedback on this work. This work is supported in part by National Key
   Research and Development Program of China No. 2019YFE0198100 and
   National Natural Science Foundation of China under Grant No. 61922003.
CR ALDOUS D, 1995, INFORM COMPUT, V117, P181, DOI 10.1006/inco.1995.1037
   Alur R., 2019, ABS190407146 CORR
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, LECT NOTES COMPUT SC, V9207, P163, DOI 10.1007/978-3-319-21668-3_10
   Alur R, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P26
   Angluin D., 1988, Machine Learning, V2, P343, DOI 10.1007/BF00116829
   Blazytko T, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P643
   BLUMER A, 1987, INFORM PROCESS LETT, V24, P377, DOI 10.1016/0020-0190(87)90114-1
   Chen YJ, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P602, DOI 10.1145/3338906.3338951
   Chvatal V., 1979, Mathematics of Operations Research, V4, P233, DOI 10.1287/moor.4.3.233
   Cohen W. W., 1995, Journal of Artificial Intelligence Research, V2, P541
   Cohen W. W., 1995, Journal of Artificial Intelligence Research, V2, P501
   David R., 2020, BAR 2020 WORKSH
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Devlin J, 2017, PR MACH LEARN RES, V70
   Drews S, 2019, LECT NOTES COMPUT SC, V11561, P278, DOI 10.1007/978-3-030-25540-4_15
   Dzeroski S., 1992, P 5 ANN WORKSHOP COM, P128, DOI [10.1145/130385.130399, DOI 10.1145/130385.130399]
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   Farzan A, 2017, ACM SIGPLAN NOTICES, V52, P540, DOI [10.1145/3062341.3062355, 10.1145/3140587.3062355]
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Hancock T., 1995, STACS 95. 12th Annual Symposium on Theoretical Aspects of Computer Science. Proceedings, P527
   Hu QHP, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1128, DOI 10.1145/3385412.3385979
   Huang KJ, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1159, DOI 10.1145/3385412.3386027
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Jha S, 2017, ACTA INFORM, V54, P693, DOI 10.1007/s00236-017-0294-5
   Ji RY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428292
   Ji RY, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1143, DOI 10.1145/3385412.3386025
   Ji Ruyi, 2021, **DATA OBJECT**, DOI 10.5281/zenodo.5499720
   Kalyan Ashwin, 2018, ICLR
   Kearns M., 1988, Proceedings of the Twentieth Annual ACM Symposium on Theory of Computing, P267, DOI 10.1145/62212.62238
   KEARNS MJ, 1994, J COMPUT SYST SCI, V48, P464, DOI 10.1016/S0022-0000(05)80062-5
   Kim J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434311
   Lau T, 2003, MACH LEARN, V53, P111, DOI 10.1023/A:1025671410623
   Le XBD, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P593, DOI 10.1145/3106237.3106309
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   Liang P., 2010, P 27 INT C INT C MAC, P639
   Mayer M, 2015, UIST'15: PROCEEDINGS OF THE 28TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P291, DOI 10.1145/2807442.2807459
   Mechtaev S, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P389, DOI 10.1145/3236024.3236049
   Mechtaev S, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P448, DOI 10.1109/ICSE.2015.63
   Menon Aditya Krishna, 2013, INT C MACHINE LEARNI, P187
   Morita K, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P146
   Moshkovitz Dana, 2011, ELECT C COMPUT COMPL, V18, P112
   Natarajan B. K., 1993, Proceeding of the Sixth Annual ACM Conference on Computational Learning Theory, P370, DOI 10.1145/168304.168380
   Nowozin Sebastian, 2017, INT C LEARN REPR
   Padhi S., 2017, ABS170702029 CORR
   Padhi S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276520
   Quinlan J. R., 1986, Machine Learning, V1, P81, DOI 10.1007/BF00116251
   Raychev V, 2016, ACM SIGPLAN NOTICES, V51, P761, DOI 10.1145/2914770.2837671
   Raza M, 2018, AAAI CONF ARTIF INTE, P1403
   Reynolds A, 2019, LECT NOTES COMPUT SC, V11562, P74, DOI 10.1007/978-3-030-25543-5_5
   Rivest R. L., 1987, Machine Learning, V2, P229, DOI 10.1007/BF00058680
   Shaw David E., 1975, ADV PAPERS 4 INT JOI
   Singh R, 2015, LECT NOTES COMPUT SC, V9206, P398, DOI 10.1007/978-3-319-21690-4_23
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   VALIANT LG, 1984, COMMUN ACM, V27, P1134, DOI 10.1145/1968.1972
   Wang C, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1631, DOI 10.1145/3035918.3058738
   Zhai J, 2016, PROC INT CONF SOFTW, P380, DOI 10.1145/2884781.2884881
NR 57
TC 6
Z9 6
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 167
DI 10.1145/3485544
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200069
OA gold
DA 2024-07-18
ER

PT J
AU Huang, XJ
   Oliveira, BCDS
AF Huang, Xuejing
   Oliveira, Bruno C. D. S.
TI Distributing Intersection and Union Types with Splits and Duality
   (Functional Pearl)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE intersection types; union types; subtyping; distributivity
AB Subtyping with intersection and union types is nowadays common in many programming languages. From the perspective of logic, the subtyping problem is essentially the problem of determining logical entailment: does a logical statement follow from another one? Unfortunately, algorithms for deciding subtyping and logical entailment with intersections, unions and various distributivity laws can be highly non-trivial.
   This functional pearl presents a novel algorithmic formulation for subtyping (and logical entailment) in the presence of various distributivity rules between intersections, unions and implications (i.e. function types). Unlike many existing algorithms which first normalize types and then apply a subtyping algorithm on the normalized types, our new subtyping algorithm works directly on source types. Our algorithm is based on two recent ideas: a generalization of subtyping based on the duality of language constructs called duotyping; and splittable types, which characterize types that decompose into two simpler types. We show that our algorithm is sound, complete and decidable with respect to a declarative formulation of subtyping based on the minimal relevant logic B+. Moreover, it leads to a simple and compact implementation in under 50 lines of functional code.
C1 [Huang, Xuejing; Oliveira, Bruno C. D. S.] Univ Hong Kong, Hong Kong, Peoples R China.
C3 University of Hong Kong
RP Huang, XJ (corresponding author), Univ Hong Kong, Hong Kong, Peoples R China.
EM xjhuang@cs.hku.hk; bruno@cs.hku.hk
RI dos Santos Oliveira, Bruno Cesar/I-7977-2013
OI Huang, Xuejing/0000-0002-8496-491X
FU Hong Kong Research Grant Council [17209519, 17209520]
FX We would like to thank Jinxu Zhao for his insightful discussions
   throughout the metatheory's development. We appreciate the valuable
   comments from Yaoda Zhou and the anonymous reviewers that improved the
   manuscript and the accompanying artifact. We are also grateful to Fabian
   Muehlboeck and Ross Tate for their detailed reply about their algorithm.
   This work has been sponsored by the Hong Kong Research Grant Council
   projects number 17209519 and 17209520.
CR Amin Nada, 2016, Lecture Notes in Computer Science, V9600, P249, DOI [10.1007/978-3-319-30936-, DOI 10.1007/978-3-319-30936, 10.1007/978-3-319-3 0936-1\\_14, DOI 10.1007/978-3-319-30936-1]
   [Anonymous], 2012, Microsoft
   BARBANERA F, 1995, INFORM COMPUT, V119, P202, DOI 10.1006/inco.1995.1086
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Benzaken V, 2003, ACM SIGPLAN NOTICES, V38, P51, DOI 10.1145/944746.944711
   Bezanson J, 2017, SIAM REV, V59, P65, DOI 10.1137/141000671
   Bi Xuan, 2018, LIPICS, V109, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Coppo M., 1980, Notre Dame Journal of Formal Logic, V21, P685, DOI 10.1305/ndjfl/1093883253
   COPPO M, 1981, Z MATH LOGIK, V27, P45, DOI 10.1002/malq.19810270205
   Davies R, 2000, ACM SIGPLAN NOTICES, V35, P198, DOI 10.1145/357766.351259
   Facebook, 2014, FLOW
   Frisch A., 2004, THESIS U PARIS 7, V7
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Jones, 2000, HASK WORKSH 2000
   Motohama Yoko, 2000, TRARP052000
   Muehlboeck F, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276482
   Nardelli FZ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276483
   Oliveira, TR202101 U HONG KONG
   Oliveira Bruno C. d. S., 2020, VIRTUAL C LIPICS, DOI [10.4230/LIPIcs.ECOOP.2020.29, DOI 10.4230/LIPICS.ECOOP.2020.29]
   PEARCE DJ, 2013, VERIFICATION MODEL C
   PIERCE B, 1991, THESIS CARNEGIE MELL
   Pierce Benjamin C., 2018, DECISION PROCEDURE S, DOI [10.1184/R1/6587339.v1, DOI 10.1184/R1/6587339.V1]
   Pottier, TLC NONC LIB COQ
   Redhat, 2011, CEYL
   Reynolds John C, 1997, ALGOL LIKE LANGUAGES
   Reynolds John C., 1988, Tech Report, CMU-CS-88-159
   Rossetto Didier, 1995, LOG ANAL, V38, P329
   ROUTLEY R, 1972, J PHILOS LOGIC, V1, P53, DOI 10.1007/BF00649991
   Seldin J., 1980, HB CURRY ESSAYS COMB
   Sewell Peter, 2007, SIGPLAN Notices, V42, P1, DOI 10.1145/1291220.1291155
   Stolze, 2019, THESIS U COTE AZUR
   The Coq Development Team, 2021, COQ REF MAN VERS 8 1
   The Scala Center team and community contributors, 2020, SCAL 3
   Venneri, 1980, PROCEEDINGS OF THE E, P535
   Vigano L., 2000, Studia Logica, V66, P385, DOI 10.1023/A:1005212701420
NR 35
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 89
DI 10.1145/3473594
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800029
OA gold
DA 2024-07-18
ER

PT J
AU Paszke, A
   Johnson, DD
   Duvenaud, D
   Vytiniotis, D
   Radul, A
   Johnson, MJ
   Ragan-Kelley, J
   Maclaurin, D
AF Paszke, Adam
   Johnson, Daniel D.
   Duvenaud, David
   Vytiniotis, Dimitrios
   Radul, Alexey
   Johnson, Matthew J.
   Ragan-Kelley, Jonathan
   Maclaurin, Dougal
TI Getting to the Point Index Sets and Parallelism-Preserving Autodiff for
   Pointful Array Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Array programming; automatic differentiation; parallel computing
ID COMPILER
AB We present a novel programming language design that attempts to combine the clarity and safety of high-level functional languages with the efficiency and parallelism of low-level numerical languages. We treat arrays as eagerly-memoized functions on typed index sets, allowing abstract function manipulations, such as currying, to work on arrays. In contrast to composing primitive bulk-array operations, we argue for an explicit nested indexing style that mirrors application of functions to arguments. We also introduce a fine-grained typed effects system which affords concise and automatically-parallelized in-place updates. Specifically, an associative accumulation effect allows reverse-mode automatic differentiation of in-place updates in a way that preserves parallelism. Empirically, we benchmark against the Futhark array programming language, and demonstrate that aggressive inlining and type-driven compilation allows array programs to be written in an expressive, lpointfulz style with little performance penalty.
C1 [Paszke, Adam] Google Res, Warsaw, Poland.
   [Johnson, Daniel D.] Google Res, Montreal, PQ, Canada.
   [Duvenaud, David] Univ Toronto, Toronto, ON, Canada.
   [Vytiniotis, Dimitrios] DeepMind, London, England.
   [Radul, Alexey; Johnson, Matthew J.; Maclaurin, Dougal] Google Res, Mountain View, CA USA.
   [Ragan-Kelley, Jonathan] MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
C3 Google Incorporated; University of Toronto; Google Incorporated;
   Massachusetts Institute of Technology (MIT)
RP Paszke, A (corresponding author), Google Res, Warsaw, Poland.
EM apaszke@google.com; ddjohnson@google.com; duvenaud@cs.toronto.edu;
   dvytin@google.com; axch@google.com; mattjj@google.com; jrk@mit.edu;
   dougalm@google.com
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   [Anonymous], 1997, The Definition of Standard ML
   Baydin AG, 2018, J MACH LEARN RES, V18
   Bergstra J., 2010, Proc. Python Sci. Comput. Conf., V1, P3
   Bernstein Gilbert, 2020, ARXIV200811256
   Bezanson J, 2017, SIAM REV, V59, P65, DOI 10.1137/141000671
   Bischof C., 1992, Sci. Program., V1, P11, DOI [10.1155/1992/717832, DOI 10.1155/1992/717832]
   Blelloch GuyE., 1993, NESL: A Nested Data-Parallel Language (Version 2.6)
   Bondhugula U, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P101, DOI 10.1145/1375581.1375595
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Bradbury J., 2018, JAX: Composable transformations of Python + NumPy programs
   Chakravarty M. M., 2011, P 6 WORKSH DECL ASP, P3, DOI DOI 10.1145/1926354.1926358
   Che SA, 2009, I S WORKL CHAR PROC, P44, DOI 10.1109/IISWC.2009.5306797
   Elliott C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236765
   Frostig Roy, LAFI 21
   Griewank A, 2008, OTHER TITL APPL MATH, V105, P1, DOI 10.1137/1.9780898717761
   Grosser T, 2012, PARALLEL PROCESS LET, V22, DOI 10.1142/S0129626412500107
   Harris CR, 2020, NATURE, V585, P357, DOI 10.1038/s41586-020-2649-2
   Hascoet L, 2013, ACM T MATH SOFTWARE, V39, DOI 10.1145/2450153.2450158
   Henriksen T, 2020, PROCEEDINGS OF SC20: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS (SC20), DOI 10.1109/SC41405.2020.00101
   Henriksen T, 2017, ACM SIGPLAN NOTICES, V52, P556, DOI [10.1145/3140587.3062354, 10.1145/3062341.3062354]
   Hovgaard Anders Kiel, 2018, INT S TRENDS FUNCT P, P136, DOI [10.1007/978-3-030-88, DOI 10.1007/978-3-030-88]
   Hu YM, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3355089.3356506
   Hu Yuanming, 2020, INT C LEARN REPR
   Hückelheim J, 2019, PROC INT CONF PARAL, DOI 10.1145/3337821.3337906
   Innes Michael, 2018, ABS181007951 CORR
   Iverson K. E., 1962, A Programming Language
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Jones SP, 2008, LECT NOTES COMPUT SC, V5356, P138
   Jones SP, 2002, J FUNCT PROGRAM, V12, P393, DOI 10.1017/S0956796802004331
   Larsen RW, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON FUNCTIONAL HIGH-PERFORMANCE COMPUTING (FHPC '17), P42, DOI 10.1145/3122948.3122952
   LAUNCHBURY J, 1994, SIGPLAN NOTICES, V29, P24, DOI 10.1145/773473.178246
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Li TM, 2018, ACM T GRAPHIC, V37, DOI 10.1145/3197517.3201383
   Maclaurin Dougal, 2014, ICML 15 AUTOML WORKS
   Manzyuk O, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S095679681900008X
   Matsuzaki K, 2009, LECT NOTES COMPUT SC, V6041, P72
   McDonell TL, 2013, ACM SIGPLAN NOTICES, V48, P49, DOI [10.1145/2544174.2500595, 10.1145/2500365.2500595]
   Mitchell Neil, 2010, P 15 ACM SIGPLAN INT, P309, DOI DOI 10.1145/1863543.1863588
   Najd S, 2016, PEPM'16: PROCEEDINGS OF THE 2016 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P25, DOI 10.1145/2847538.2847541
   Oancea Cosmin E., 2016, P 3 ACM SIGPLAN INT, p17S24
   Paszke A, 2019, ADV NEUR IN, V32
   Pearlmutter BA, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330018
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Ritchie Sam., 2021, AD HIGHER ORDE UNPUB
   Roesch J, 2018, MAPL'18: PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON MACHINE LEARNING AND PROGRAMMING LANGUAGES, P58, DOI 10.1145/3211346.3211348
   Shaikhha A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341701
   Slepak J, 2014, LECT NOTES COMPUT SC, V8410, P27
   Steele Guy L., 2011, FORTRESS SUN HPCS LA, DOI [10.1007/978-0-387-09766-4_190, DOI 10.1007/978-0-387-09766-4_190]
   Steuwer M, 2017, INT SYM CODE GENER, P74, DOI 10.1109/CGO.2017.7863730
   Stratton J. A., 2012, IMPACT1201 U ILL URB
   Swamy N, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P266
   Tokui S, 2019, KDD'19: PROCEEDINGS OF THE 25TH ACM SIGKDD INTERNATIONAL CONFERENCCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P2002, DOI 10.1145/3292500.3330756
   Vasilache Nicolas., 2018, Technical report
NR 54
TC 16
Z9 18
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 88
DI 10.1145/3473593
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800028
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Jacobs, K
   Timany, A
   Devriese, D
AF Jacobs, Koen
   Timany, Amin
   Devriese, Dominique
TI Fully Abstract from Static to Gradual
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE gradual typing; fully abstract compilation; fully abstract embedding
AB What is a good gradual language? Siek et al. have previously proposed the refined criteria, a set of formal ideas that characterize a range of guarantees typically expected from a gradual language. While these go a long way, they are mostly focused on syntactic and type safety properties and fail to characterize how richer semantic properties and reasoning principles that hold in the static language, like non-interference or parametricity for instance, should be upheld in the gradualization.
   In this paper, we investigate and argue for a new criterion previously hinted at by Devriese et al.: the embedding from the static to the gradual language should be fully abstract. Rather than preserving an arbitrarily chosen interpretation of source language types, this criterion requires that all source language equivalences are preserved. We demonstrate that the criterion weeds out erroneous gradualizations that nevertheless satisfy the refined criteria. At the same time, we demonstrate that the criterion is realistic by reporting on a mechanized proof that the property holds for a standard example: GTLC(mu), the natural gradualization of STLC mu, the simply typed lambda-calculus with equirecursive types. We argue thus that the criterion is useful for understanding, evaluating, and guiding the design of gradual languages, particularly those which are intended to preserve source language guarantees in a rich way.
C1 [Jacobs, Koen] Katholieke Univ Leuven, Imec DistriNet, Leuven, Belgium.
   [Timany, Amin] Aarhus Univ, Aarhus, Denmark.
   [Devriese, Dominique] Vrije Univ Brussel, Brussels, Belgium.
C3 KU Leuven; Aarhus University; Vrije Universiteit Brussel
RP Jacobs, K (corresponding author), Katholieke Univ Leuven, Imec DistriNet, Leuven, Belgium.
EM koen.jacobs@kuleuven.be; timany@cs.au.dk; devriese@vub.be
RI Devriese, Dominique/C-5493-2014
OI Devriese, Dominique/0000-0002-3862-6856; Jacobs,
   Koen/0000-0002-1645-6876; Timany, Amin/0000-0002-2237-851X
FU Internal Funds KU Leuven [C14/18/064]; Air Force Office of Scientific
   Research [FA9550-21-1-0054]; Fund for Scientific Research - Flanders
   (FWO)
FX This work was funded in part by Internal Funds KU Leuven grant
   C14/18/064. Amin Timany was a postdoctoral fellow of the Flemish
   research fund (FWO) during parts of this project. This material is based
   upon work supported by the Air Force Office of Scientific Research under
   award number FA9550-21-1-0054. This work was partly supported by the
   Fund for Scientific Research -Flanders (FWO).
CR Abadi M, 1998, LECT NOTES COMPUT SC, V1543, P291
   Abadi M, 1998, LECT NOTES COMPUT SC, V1443, P868, DOI 10.1007/BFb0055109
   Abate C, 2019, P IEEE COMPUT SECUR, P256, DOI 10.1109/CSF.2019.00025
   Ahmed A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110283
   Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   Ahmed Amal, PARAMETRIC POLYMORPH
   [Anonymous], 2015, LEIBNIZ INT P INFORM, DOI DOI 10.4230/LIPICS.SNAPL.2015.274
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Schwerter FB, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283, DOI 10.1145/2628136.2628149
   Devriese D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158126
   Devriese D, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(4:2)2017
   Devriese D, 2016, ACM SIGPLAN NOTICES, V51, P164, DOI 10.1145/2914770.2837618
   Devriese Dominique, 2020, J ACM UNPUB
   Dreyer D, 2009, IEEE S LOG, P71, DOI 10.1109/LICS.2009.34
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia Ronald, 2015, ARXIV PREPRINT ARXIV
   Garcia Ronald, 2020, WORKSH GRAD TYP
   Greenberg Michael, 2019, 3 SUMMIT ADV PROGRAM, V6, P1, DOI [10.4230/LIPIcs.SNAPL.2019.6, DOI 10.4230/LIPICS.SNAPL.2019.6]
   Greenman B, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360548
   Igarashi A, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000169
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Matthews Jacob., 2008, P EUR S PROGR, DOI [10.1007/978-3-540-78739-6_2, DOI 10.1007/978-3-540-78739-6_2]
   New MS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371114
   New MS, 2016, ACM SIGPLAN NOTICES, V51, P103, DOI 10.1145/3022670.2951941
   Parrow J, 2008, ELECTRON NOTES THEOR, V209, P173, DOI 10.1016/j.entcs.2008.04.011
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Patrignani M, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2699503
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Sergey I, 2012, LECT NOTES COMPUT SC, V7211, P579, DOI 10.1007/978-3-642-28869-2_29
   Siek Jeremy, 2019, GITHUB JSIEK GRADUAL
   Siek Jeremy G, 2006, SCHEM FUNCT PROGR WO, V6, p81S92
   Timany A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341709
   Timany A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158152
   Timany Amin, COQPL
   Tobin-Hochstadt S, 2008, ACM SIGPLAN NOTICES, V43, P395, DOI 10.1145/1328897.1328486
   Toro M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290330
   Toro M, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3229061
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 40
TC 9
Z9 9
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 7
DI 10.1145/3434288
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100007
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Kokologiannakis, M
   Kaysin, I
   Raad, A
   Vafeiadis, V
AF Kokologiannakis, Michalis
   Kaysin, Ilya
   Raad, Azalea
   Vafeiadis, Viktor
TI PerSeVerE: Persistency Semantics for Verification under Ext4
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE File Systems; Persistency; Weak Consistency; Model Checking
ID CONSISTENCY
AB Although ubiquitous, modern filesystems have rather complex behaviours that are hardly understood by programmers and lead to severe software bugs such as data corruption. As a first step to ensure correctness of software performing file I/O, we formalize the semantics of the Linux ext4 filesystem, which we integrate with the weak memory consistency semantics of C/C++. We further develop an effective model checking approach for verifying programs that use the filesystem. In doing so, we discover and report bugs in commonly-used text editors such as vim, emacs and nano.
C1 [Kokologiannakis, Michalis; Vafeiadis, Viktor] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Kaysin, Ilya] Natl Res Univ Higher Sch Econ, JetBrains Res, Moscow, Russia.
   [Raad, Azalea] Imperial Coll London, London, England.
C3 HSE University (National Research University Higher School of
   Economics); Imperial College London
RP Kokologiannakis, M (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
EM michalis@mpi-sws.org; ilya.s.kaysin@gmail.com; azalea@imperial.ac.uk;
   viktor@mpi-sws.org
RI ; Vafeiadis, Viktor/B-5809-2014
OI Kokologiannakis, Michalis/0000-0002-7905-9739; Vafeiadis,
   Viktor/0000-0001-8436-0334; Kaysin, Ilya/0000-0002-6301-152X
FU RFBR [18-01-00380]; European Research Council (ERC) Consolidator Grant
   under the European Union Horizon 2020 Framework Programme [683289]
FX We thank Luc Maranget and the POPL 2021 reviewers for their valuable
   feedback. Ilya Kaysin was supported by RFBR (grant number 18-01-00380).
   Azalea Raad was supported in part by a European Research Council (ERC)
   Consolidator Grant for the project lRustBeltz, under the European Union
   Horizon 2020 Framework Programme (grant agreement number 683289).
CR Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   [Anonymous], 2005, ZFS LAST WORD FILESY
   [Anonymous], 2009, EXT4 DATA LOSS
   [Anonymous], 2012, EXT4 FILE SYSTEM TUN
   [Anonymous], 2015, EXT4 FILESYSTEM CORR
   [Anonymous], 2020, COPY ON WRITE
   Bornholt J, 2016, ACM SIGPLAN NOTICES, V51, P83, DOI 10.1145/2954679.2872406
   Chen HG, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P18, DOI 10.1145/2815400.2815402
   Chen Ran, 2016, HAL01406848
   Cui HM, 2013, ACM SIGPLAN NOTICES, V48, P329, DOI 10.1145/2499368.2451152
   ext4 Linux kernel, 2020, EXT4 DAT STRUCT ALG
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   GNU Emacs, 2019, GNU EM EXT CUST FREE
   Godefroid P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P174, DOI 10.1145/263699.263717
   Godefroid P, 2005, FORM METHOD SYST DES, V26, P77, DOI 10.1007/s10703-005-1489-x
   Gooch Richard, 1999, OVERVIEW LINUX VIRTU
   Joshi R, 2007, FORM ASP COMPUT, V19, P269, DOI 10.1007/s00165-006-0022-3
   Kang E, 2008, LECT NOTES COMPUT SC, V5238, P294
   Keller Gabriele, 2013, PLOS 2013, P1, DOI [10.1145/2525528.2525530, DOI 10.1145/2525528.2525530]
   Kokologiannakis Michalis, LPERSEVERE PERSISTEN
   Kokologiannakis Michalis, 2019, PLDI 2019, DOI [10.1145/3314221.3314609, DOI 10.1145/3314221.3314609]
   Kokologiannakis Michalis, 2020, FILES IMPROVE BACKUP
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Mohan J, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P33
   Musuvathi M., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, P267
   Ntzik G, 2015, ACM SIGPLAN NOTICES, V50, P201, DOI [10.1145/2814270.2814306, 10.1145/2858965.2814306]
   Park D, 2017, 2017 USENIX ANNUAL TECHNICAL CONFERENCE (USENIX ATC '17), P787
   Pillai TS, 2017, ACM T STORAGE, V13, DOI 10.1145/3119897
   Pillai Thanumalayan Sankaranarayana, 2014, P 11 USENIX S OP SYS, P433
   Podkopaev A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290382
   POSIX, 2018, OPEN GROUP BASE SPEC
   Prabhakaran Vijayan, 2005, LANALYSIS EVOLUTION, P16
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360561
   Raad A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371079
   Raad Azalea, 2018, P ACM PROGR LANG, DOI [10.1145/3276507, DOI 10.1145/3276507]
   Ridge T, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P38, DOI 10.1145/2815400.2815411
   Rodeh O, 2013, ACM T STORAGE, V9, DOI 10.1145/2501620.2501623
   Rubio-González C, 2009, ACM SIGPLAN NOTICES, V44, P270, DOI 10.1145/1543135.1542506
   Schellhorn G, 2014, LECT NOTES COMPUT SC, V8477, P9, DOI 10.1007/978-3-662-43652-3_2
   Sigurbjarnarson H, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P1
   Son Seongbae, 2017, APSYS 2017, P1, DOI [10.1145/3124680.3124722, DOI 10.1145/3124680.3124722]
   Sweeney A, 1996, PROCEEDINGS OF THE USENIX 1996 ANNUAL TECHNICAL CONFERENCE, P1
   Ts'o TY, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE FREENIX TRACK, P235
   Tweedie Stephen C, 1998, LINUXEXPO 1998
   Vim, 2019, VIM UB TEXT ED
   Yang JF, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P131
   Zheng Mai., 2014, Proceedings of the 11th USENIX Symposium on Operating Systems Design and Implementation OSDI '14, P449
NR 48
TC 7
Z9 7
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 43
DI 10.1145/3434324
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100043
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Brody, S
   Alon, U
   Yahav, E
AF Brody, Shaked
   Alon, Uri
   Yahav, Eran
TI A Structural Model for Contextual Code Changes
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Edit Completions; Neural Models of Code; Machine Learning
AB We address the problem of predicting edit completions based on a learned model that was trained on past edits. Given a code snippet that is partially edited, our goal is to predict a completion of the edit for the rest of the snippet. We refer to this task as the EDITCOMPLETION task and present a novel approach for tackling it. The main idea is to directly represent structural edits. This allows us to model the likelihood of the edit itself, rather than learning the likelihood of the edited code. We represent an edit operation as a path in the program's Abstract Syntax Tree (AST), originating from the source of the edit to the target of the edit. Using this representation, we present a powerful and lightweight neural model for the EDITCOMPLETION task.
   We conduct a thorough evaluation, comparing our approach to a variety of representation and modeling approaches that are driven by multiple strong models such as LSTMs, Transformers, and neural CRFs. Our experiments show that our model achieves a 28% relative gain over state-of-the-art sequential models and 2x higher accuracy than syntactic models that learn to generate the edited code, as opposed to modeling the edits directly.
C1 [Brody, Shaked; Alon, Uri; Yahav, Eran] Technion, Haifa, Israel.
C3 Technion Israel Institute of Technology
RP Brody, S (corresponding author), Technion, Haifa, Israel.
EM shakedbr@cs.technion.ac.il; urialon@cs.technion.ac.il;
   yahave@cs.technion.ac.il
CR Aharoni R, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 2, P132, DOI 10.18653/v1/P17-2021
   Allamams M, 2019, PROCEEDINGS OF THE 2019 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD!' 19), P143, DOI 10.1145/3359591.3359735
   Allamanis M., 2018, INT C LEARN REPR ICL
   Allamanis M, 2016, PR MACH LEARN RES, V48
   Allamanis M, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P38, DOI 10.1145/2786805.2786849
   Alon U., 2019, 7 INT C LEARNING REP
   Alon U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290353
   Alon U, 2018, ACM SIGPLAN NOTICES, V53, P404, DOI [10.1145/3192366.3192412, 10.1145/3296979.3192412]
   Alon Uri, ARXIV191000577CSLG
   [Anonymous], 2015, Advances in neural information processing systems
   Bahdanau D, 2016, Arxiv, DOI [arXiv:1409.0473, 10.48550/arXiv.1409.0473]
   Birney E, 1996, NUCLEIC ACIDS RES, V24, P2730, DOI 10.1093/nar/24.14.2730
   Brockschmidt M., 2019, ICLR
   Chakraborty Saikat, 2018, ABS181000314 ARXIV
   Chan W, 2016, INT CONF ACOUST SPEE, P4960, DOI 10.1109/ICASSP.2016.7472621
   Chawathe S. S., 1996, SIGMOD Record, V25, P493, DOI 10.1145/235968.233366
   Chen Z., 2019, TSE
   Dinella Elizabeth, 2020, INT C LEARN REPR
   Falleri Jean-Remy, 2014, P 29 ACM IEEE INT C, P313
   Fernandes P, 2019, 7 INT C LEARNING REP
   Gu JT, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P1631
   Hellendoorn V.J., 2019, INT C LEARN REPR
   Hinton G. E., 2012, 12070580 ARXIV
   Hoang T, 2020, PROC INT CONF SOFTW, P518, DOI 10.1145/3377811.3380361
   Hochreiter S, 1997, NEURAL COMPUT, V9, P1735, DOI [10.1162/neco.1997.9.1.1, 10.1007/978-3-642-24797-2]
   Hunt James W., 1975, LONG PAPERS, V1, P2073, DOI [10.18653/v1, DOI 10.18653/V1]
   King DB, 2015, ACS SYM SER, V1214, P1
   Lopes CV, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133908
   Luong M.-T., 2015, P 2015 C EMPIRICAL M, DOI DOI 10.18653/V1/D15-1166
   Ma XZ, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P1064
   Malmi Eric, 2019, EMNLP IJCNLP
   Mesbah A, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P925, DOI 10.1145/3338906.3340455
   Rubinstein R., 1999, Methodology and computing in applied probability, V1, P127
   Sutskever Ilya, 2014, P 27 INT C NEURAL IN, P3104
   Tarlow Daniel, 2019, ARXIV191101205CSLG
   Tufano Michele, 2018, ABS181208693 CORR
   Vasic M., 2019, Neural program repair by jointly learning to localize and repair
   Vaswani A, 2017, ADV NEUR IN, V30
   Yin Penghang, 2019, INT C LEARN REPR
NR 39
TC 15
Z9 17
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 215
DI 10.1145/3428283
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900092
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU He, F
   Han, JT
AF He, Fei
   Han, Jitao
TI Termination Analysis for Evolving Programs An Incremental Approach by
   Reusing Certified Modules
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Termination analysis; incremental analysis; Buchi automaton; ranking
   function
AB Research on program termination has a long tradition. However, most of the existing techniques target a single program only. We propose in this paper an incremental termination analysis approach by reusing certified modules across different program versions. A transformation-based procedure is further developed to increase the reusability of certified modules. The proposed approach has wide applicability, applicable to various program changes. The proposed technique, to the best of our knowledge, represents a novel attempt to the termination analysis of evolving programs. We implemented the approach on top of ULTIMATE AUTOMIZER. Experimental results show dramatic improvement of our approach over the state-of-the-art tool.
C1 [He, Fei; Han, Jitao] Tsinghua Univ, Sch Software, Beijing, Peoples R China.
   [He, Fei; Han, Jitao] MoE, Key Lab Informat Syst Secur, Beijing, Peoples R China.
   [He, Fei; Han, Jitao] Beijing Natl Res Ctr Informat Sci & Technol, Beijing, Peoples R China.
C3 Tsinghua University
RP He, F (corresponding author), Tsinghua Univ, Sch Software, Beijing, Peoples R China.; He, F (corresponding author), MoE, Key Lab Informat Syst Secur, Beijing, Peoples R China.; He, F (corresponding author), Beijing Natl Res Ctr Informat Sci & Technol, Beijing, Peoples R China.
EM hefei@tsinghua.edu.cn; hanjt18@mails.tsinghua.edu.cn
OI He, Fei/0000-0002-4266-875X
FU National Key R&D Program of China [2018YFB1308601]; NSF of China
   [61672310, 62072267]; CDZ project CAP [GZ 1023]; Guangdong Science and
   Technology Department [2018B010107004]
FX This work was partially funded by the National Key R&D Program of China
   (No. 2018YFB1308601), the NSF of China (No. 61672310 and No. 62072267),
   the CDZ project CAP (No. GZ 1023) and the Guangdong Science and
   Technology Department (No. 2018B010107004).
CR Alt Leonardo, 2017, TOOLS ALGORITHMS CON
   [Anonymous], 2009, SOFTWARE MAINTENANCE, DOI DOI 10.1109/ICSM.2009
   Aquino Andrea., 2015, Proceedings of the 2015 International Symposium on Software Testing and Analysis, P305
   Backes John, 2013, Model Checking Software. 20th International Symposium, SPIN 2013. Proceedings, P99, DOI 10.1007/978-3-642-39176-7_7
   Bagnara R, 2012, INFORM COMPUT, V215, P47, DOI 10.1016/j.ic.2012.03.003
   Bakhirkin A, 2016, LECT NOTES COMPUT SC, V9636, P17, DOI 10.1007/978-3-662-49674-9_2
   Ben-Amram AM, 2015, LECT NOTES COMPUT SC, V9207, P304, DOI 10.1007/978-3-319-21668-3_18
   Ben-Amram AM, 2017, LECT NOTES COMPUT SC, V10427, P601, DOI 10.1007/978-3-319-63390-9_32
   Ben-Amram AM, 2014, J ACM, V61, DOI 10.1145/2629488
   Ben-Amram AM, 2013, ACM SIGPLAN NOTICES, V48, P51, DOI 10.1145/2480359.2429078
   Beyer D., 2013, ESEC FSE, P389, DOI [10.1145/2491411.2491429, DOI 10.1145/2491411.2491429]
   Beyer D., 2012, P FSE ACM, P57, DOI DOI 10.1145/2393596.2393664
   Böhme M, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P302, DOI 10.1109/ICSE.2013.6606576
   Borralleras C, 2017, LECT NOTES COMPUT SC, V10205, P99, DOI 10.1007/978-3-662-54577-5_6
   Bradley A. R., 2007, The Calculus of Computation
   Bradley Aaron R., CONCUR 2005 S CONCUR, DOI [10.1007/11539452_37, DOI 10.1007/11539452_37]
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3576, P491
   Brockschmidt Marc, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P413, DOI 10.1007/978-3-642-39799-8_28
   Brockschmidt M., 2012, FORMAL VERIFICATION, V7421, P123, DOI 10.1007/978-3
   Chen H.-Y., 2014, International Conference on Tools and Algorithms for the Construction and Analysis of Systems, P156
   Colon M. A., 2001, Tools and Algorithms for the Construction and Analysis of Systems. 7th International Conference, TACAS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2031), P67
   Conway Christopher L., 2005, COMPUTER AIDED VERIF, DOI [10.1007/11513988_45, DOI 10.1007/11513988_45]
   Cook B, 2006, LECT NOTES COMPUT SC, V4144, P415, DOI 10.1007/11817963_37
   Cook B, 2006, ACM SIGPLAN NOTICES, V41, P415, DOI 10.1145/1133981.1134029
   Cook B, 2014, 2014 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P67, DOI 10.1109/FMCAD.2014.6987597
   Cook B, 2013, LECT NOTES COMPUT SC, V7795, P47, DOI 10.1007/978-3-642-36742-7_4
   Cook B, 2010, LECT NOTES COMPUT SC, V6015, P236, DOI 10.1007/978-3-642-12002-2_19
   Cuoq Pascal, 2012, Software Engineering and Formal Methods. Proceedings of the 10th International Conference, SEFM 2012, P233, DOI 10.1007/978-3-642-33826-7_16
   Fedyukovich G, 2016, LECT NOTES COMPUT SC, V9780, P433, DOI 10.1007/978-3-319-41540-6_24
   Fedyukovich Grigory, 2013, TOOLS ALGORITHMS CON, DOI [10.1007/978-3-642-36742-7_21, DOI 10.1007/978-3-642-36742-7_21]
   Felsing D, 2014, P 29 ACM IEEE INT C, P349, DOI [10.1145/2642937.2642987, DOI 10.1145/2642937.2642987]
   Godlin B, 2009, DES AUT CON, P466
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Gulwani S, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P281, DOI 10.1145/1375581.1375616
   Gupta AK, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P147, DOI 10.1145/1328438.1328459
   Harris WR, 2010, LECT NOTES COMPUT SC, V6337, P304, DOI 10.1007/978-3-642-15769-1_19
   He F, 2016, LECT NOTES COMPUT SC, V9779, P310, DOI 10.1007/978-3-319-41528-4_17
   Heizmann Matthias, 2013, Automated Technology for Verification and Analysis. 11th International Symposium, ATVA 2013. Proceedings: LNCS 8172, P365, DOI 10.1007/978-3-319-02444-8_26
   Heizmann Matthias, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P36, DOI 10.1007/978-3-642-39799-8_2
   Heizmann Matthias, 2014, COMPUTER AIDED VERIF, DOI [10.1007/978-3-319-08867-9_53, DOI 10.1007/978-3-319-08867-9_53]
   Henzinger Thomas A., 2003, EXTREME MODEL CHECKI, DOI [10.1007/978-3-540-39910-0_16, DOI 10.1007/978-3-540-39910-0_16]
   Jia Xiangyang, 2015, P 2015 INT S SOFTWAR, P177
   Kroening D, 2010, LECT NOTES COMPUT SC, V6174, P89, DOI 10.1007/978-3-642-14295-6_9
   Kroening Daniel, 2008, AUTOMATED TECHNOLOGY, DOI [10.1007/978-3-540-88387, DOI 10.1007/978-3-540-88387]
   Larraz D, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P218
   Lauterburg S, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P291, DOI 10.1145/1368088.1368128
   Le Ton Chanh, 2015, P 36 ACM SIGPLAN C P, DOI [10.1145/2737924, DOI 10.1145/2737924]
   Leike J, 2018, LECT NOTES COMPUT SC, V10806, P266, DOI 10.1007/978-3-319-89963-3_16
   Leike Jan, 2014, LNCS, V8413, P172
   Mora F, 2018, IEEE INT CONF AUTOM, P441, DOI [10.1145/3238147.3238178, 10.1145/3238117.3238178]
   Nori Aditya V., 2013, ESECSIGSOFT FSE, P246, DOI 10.1145/2491411
   Pastore F., 2014, PROC INT S SOFTW TES, P37, DOI [10.1145/2610384.2610387, DOI 10.1145/2610384.2610387]
   Podelski A., 2005, SIGPLAN Notices, V40, P132, DOI 10.1145/1047659.1040317
   Podelski A, 2004, IEEE S LOG, P32, DOI 10.1109/LICS.2004.1319598
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   Podelski A, 2011, LECT NOTES COMPUT SC, V6605, P3, DOI 10.1007/978-3-642-19835-9_2
   Rothenberg BC, 2018, LECT NOTES COMPUT SC, V11002, P364, DOI 10.1007/978-3-319-99725-4_22
   Rungta N, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P109, DOI 10.1109/ICSM.2012.6405261
   Rybalchenko Andrey., 2012, VERIFICATION MODEL C, DOI [DOI 10.1007/978-3-642-27940-9_9, 10.1007/978-3-642-27940-9]
   Sery O, 2012, PROCEEDINGS OF THE 12TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2012), P114
   Ströder T, 2017, J AUTOM REASONING, V58, P33, DOI 10.1007/s10817-016-9389-x
   Trostanetski A, 2017, LECT NOTES COMPUT SC, V10422, P405, DOI 10.1007/978-3-319-66706-5_20
   Urban C, 2016, LECT NOTES COMPUT SC, V9636, P54, DOI 10.1007/978-3-662-49674-9_4
   Velroyen H., 2008, LECT NOTES COMPUT SC, V4966, P154, DOI 10.1007/978-3-540-79124-9_11
   Visser W, 2012, P FSE, P58, DOI DOI 10.1145/2393596.2393665
   Yang GW, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1059, DOI 10.1145/2568225.2568319
NR 66
TC 1
Z9 2
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 199
DI 10.1145/3428267
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900076
OA gold
DA 2024-07-18
ER

PT J
AU Liu, FY
   Lhoták, O
   Biboudis, A
   Giarrusso, PG
   Odersky, M
AF Liu, Fengyun
   Lhotak, Ondrej
   Biboudis, Aggelos
   Giarrusso, Paolo G.
   Odersky, Martin
TI A Type-and-Effect System for Object Initialization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Object initialization; Type-and-effect system
AB Every newly created object goes through several initialization states: starting from a state where all fields are uninitialized until all of them are assigned. Any operation on the object during its initialization process, which usually happens in the constructor via this, has to observe the initialization states of the object for correctness, i.e. only initialized fields may be used. Checking safe usage of this statically, without manual annotation of initialization states in the source code, is a challenge, due to abasing and virtual method calls on this.
   Mainstream languages either do not check initialization errors, such as Java, C++, Scala, or they defend against them by not supporting useful initialization patterns, such as Swift. In parallel, past research has shown that safe initialization can be achieved for varying degrees of expressiveness but by sacrificing syntactic simplicity.
   We approach the problem by upholding local reasoning about initialization which avoids whole-program analysis, and we achieve typestate polymorphism via subtyping. On this basis, we put forward a novel type-and-effect system that can effectively ensure initialization safety while allowing flexible initialization patterns. We implement an initialization checker in the Scala 3 compiler and evaluate on several real-world projects.
C1 [Liu, Fengyun; Biboudis, Aggelos; Odersky, Martin] Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
   [Lhotak, Ondrej] Univ Waterloo, Waterloo, ON, Canada.
   [Giarrusso, Paolo G.] Delft Univ Technol, Delft, Netherlands.
C3 Swiss Federal Institutes of Technology Domain; Ecole Polytechnique
   Federale de Lausanne; University of Waterloo; Delft University of
   Technology
RP Liu, FY (corresponding author), Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
FU Swiss National Science Foundation [200021_166154]; Natural Sciences and
   Engineering Research Council of Canada; Swiss National Science
   Foundation (SNF) [200021_166154] Funding Source: Swiss National Science
   Foundation (SNF)
FX We thank the anonymous reviewers of OOPSLA 2020 for their constructive
   comments. We thank Clement Blaudeau for his work on mechanization of the
   theory in Coq. We gratefully acknowledge funding by the Swiss National
   Science Foundation under Grant 200021_166154 (Effects as Implicit
   Capabilities). This research was also supported by the Natural Sciences
   and Engineering Research Council of Canada.
CR Amin N, 2017, ACM SIGPLAN NOTICES, V52, P666, DOI 10.1145/3093333.3009866
   Bloch J., 2016, Effective Java
   Clarke Dave, 2013, ALIASING OBJECT ORIE, V7850, DOI [10.1007/978-3-642-36946-9, DOI 10.1007/978-3-642-36946-9]
   Duffy Joe., 2010, PARTIALLY CONSTRUCTE
   Ernst Michael D., 2010, P 18 ACM SIGSOFT INT, DOI [10.1145/1882291.1882356, DOI 10.1145/1882291.1882356]
   FAHNDRICH M, 2007, P 22 ANN ACM SIGPLAN, P337
   Fahndrich Manuel, 2003, INT WORKSH AL CONF O
   Gil J, 2009, LECT NOTES COMPUT SC, V5653, P495, DOI 10.1007/978-3-642-03013-0_23
   Gosling J., 2015, JAVA LANGUAGE SPECIF
   Hogg J., 1992, OOPS Messenger, V3, P11
   Liu Fengyun, 2020, SAFE INITIALIZATION, P141
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Nielson Flemming, 2015, Principles of Program Analysis, DOI [10.1007/978-3-662-03811-6, DOI 10.1007/978-3-662-03811-6]
   Odersky Martin, 2013, DOTTY COMPILER NEXT
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Qi X, 2009, ACM SIGPLAN NOTICES, V44, P53, DOI 10.1145/1594834.1480890
   Reynaud Alban, 2018, ABS181108134 CORR
   Servetto Marco, 2013, P LECT NOTES COMPUTE, V7920, DOI [10.1007/978-3-642-39038, DOI 10.1007/978-3-642-39038]
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Summers Alexander J., 2011, P 26 ANN ACM SIGPLAN, P1013, DOI [10.1145/2048066.2048142, DOI 10.1145/2048066.2048142]
   Zibin Y, 2012, LECT NOTES COMPUT SC, V7313, P207, DOI 10.1007/978-3-642-31057-7_10
NR 21
TC 6
Z9 6
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 175
DI 10.1145/3428243
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900052
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Ingalls, D
AF Ingalls, Daniel
TI The Evolution of Smalltalk From Smalltalk-72 through Squeak
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Smalltalk; Squeak; Alto; NoteTaker; OOZE; BitBlt; Morphic; EToys;
   Objects; Blocks; Bytecode; Interpreter; Virtual Machine; Bootstrap
AB This paper presents a personal view of the evolution of six generations of Smalltalk in which the author played a part, starting with Smalltalk-72 and progressing through Smalltalk-80 to Squeak and Etoys. It describes the forces that brought each generation into existence, the technical innovations that characterized it, and the growth in understanding of object-orientation and personal computing that emerged. It summarizes what that generation achieved and how it affected the future, both within the evolving group of developers and users, and in the outside world.
   The early Smalltalks were not widely accessible because they ran only on proprietary Xerox hardware; because of this, few people have experience with these important historical artifacts. To make them accessible, the paper provides links to live simulations that can be run in present-day web browsers. These simulations offer the ability to run predefined scripts, but also allow the user to go off-script, browse the details of the implementation, and try anything that could be done in the original system. An appendix includes anecdotal and technical aspects of how examples of each generation of Smalltalk were recovered, and how order was teased out of chaos to the point that these old systems could be brought back to life.
EM DanHHIngalls@mail.com
CR Baecker R. M., 1976, Computer Graphics, V10, P32, DOI 10.1145/965143.563281
   BORNING A, 1981, ACM T PROGR LANG SYS, V3, P353, DOI 10.1145/357146.357147
   BORNING A, 1979, THESIS STANFORD U
   Borning Alan H., P 2 AAAI C ART INT P
   Borning Alan H., 1982, 820602 U MICH DEP CO
   Borning AlanH., 1982, Proceedings of the 9th Symposium on Principles of Programming Languages (POPL), P133
   Deutsch L. Peter, 1973, P 3 INT JOINT C ART
   Deutsch PeterL., 1984, Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles of Programming Languages, POPL '84, P297, DOI [10.1145/800017.800542, DOI 10.1145/800017.800542]
   Doug Englebart Institute, 2008, DEMO 50
   Engelbart Douglas C., 1968, P DEC 9 11 1968 FA 1
   Freudenberg Bert, 2014, SIGPLAN NOTICES, V50
   Goldberg A.J., 1983, SMALLTALKS 80 INTERA
   Goldberg Adele, 1983, SMALLTALKS 80 LANGUA
   Goldstein Ira P., 1981, CSL814 XER PAL ALT R
   Ingalls D, 1997, ACM SIGPLAN NOTICES, V32, P318, DOI 10.1145/263700.263754
   INGALLS D, 1988, SIGPLAN NOTICES, V23, P176, DOI 10.1145/62084.62100
   Ingalls D. H, 1978, P 5 ACM SIGACT SIGPL, P9
   Ingalls D. H. H., 1981, BYTE, V6, P168
   Ingalls Dan, 2014, P 6 ED INT WORKSH SM, P109
   Ingalls Daniel, 2016, P 2016 ACM INT S NEW
   INGALLS DHH, 1985, J S ASIAN LIT, V20, P17
   Iverson Kenneth E., 1967, PROGRAMMING LANGUAGE
   Kaehler T., 1981, BYTE, V6, P378
   Kay A.C., 1972, A personal computer for children of all ages, DOI [10.1145/800193.1971922, DOI 10.1145/800193.1971922]
   KAY AC, 1977, SCI AM, V237, P230, DOI 10.1038/scientificamerican0977-230
   KAY AC, 1993, SIGPLAN NOTICES, V28, P69, DOI 10.1145/155360.155364
   Krasner Glenn, 1983, SMALLTALKS 80 BITS H
   LaLonde Wilf., 1991, INSIDE SMALLTALK, V2
   LAMPSON BW, 1966, PR INST ELECTR ELECT, V54, P1766, DOI 10.1109/PROC.1966.5260
   Latta Craig, 2015, DETAILED NAIAD DESCR
   Ludolph Frank, 1988, IEEE WORKSH VIS LANG, DOI [10.1109/WVL.1988.18032, DOI 10.1109/WVL.1988.18032]
   McCarthy J., 1978, SIGPLAN Notices, V13, P217, DOI 10.1145/960118.808387
   MCCARTHY J, 1960, COMMUN ACM, V3, P184, DOI 10.1145/367177.367199
   McCarthy J., 1965, LISP 1 5 PROGRAMMERS
   Miranda E, 2018, PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON VIRTUAL MACHINES AND INTERMEDIATE LANGUAGES (VMIL '18), P57, DOI 10.1145/3281287.3281295
   Miranda Eliot, 2011, P 5 WORKSH VIRT MACH, P7
   Nygaard Kristen, 1981, HIST PROGRAMMING LAN, DOI [10.1145/800025.1198392, DOI 10.1145/800025.1198392]
   Nygaard Kristen, 1970, S35 NORW COMP CTR
   Pakin Sandra, 1968, APL 360 REFERENCE MA
   Pierce Jeff, 2002, SQUEAK OPEN PERSONAL, P69
   Reenskaug Trygve, 1979, MODELS VIEWSS CONTRO, DOI [10.5281/zenodo.3676092, DOI 10.5281/ZENODO.3676092]
   SAMPLES AD, 1986, SIGPLAN NOTICES, V21, P107, DOI 10.1145/960112.28708
   Saunders Steve, 1977, COMPUT MUSIC J, V1, P53
   Schorre D. V., 1964, P 1964 19 ACM NAT C, DOI [10.1145/800257.808896, DOI 10.1145/800257.808896]
   Schumacher E. F., 1973, Small is beautiful: a study of economics as if people mattered.
   Smith DA, 2003, FIRST CONFERENCE ON CREATING, CONNECTING AND COLLABORATING THROUGH COMPUTING, PROCEEDINGS, P2, DOI 10.1109/C5.2003.1222325
   Starkweather Gary, 1997, BIRTH LASER PRINTER
   Thomas Dave, 1995, CELEBRATING 25 YEARS
   UNGAR D, 1987, SIGPLAN NOTICES, V22, P227, DOI 10.1145/38807.38828
   Wadlow T. A., 1981, BYTE, V6, P58
NR 50
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 85
DI 10.1145/3386335
PG 101
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900020
OA gold
DA 2024-07-18
ER

PT J
AU Dahlqvist, F
   Kozen, D
AF Dahlqvist, Fredrik
   Kozen, Dexter
TI Semantics of Higher-Order Probabilistic Programs with Conditioning
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Probabilistic programming; semantics; type system
ID TENSOR-PRODUCTS
AB We present a denotational semantics for higher-order probabilistic programs in terms of linear operators between Banach spaces. Our semantics is rooted in the classical theory of Banach spaces and their tensor products, but bears similarities with the well-known semantics of higher-order programs a la Scott through the use of ordered Banach spaces which allow definitions in terms of fixed points. Our semantics is a model of intuitionistic linear logic: it is based on a symmetric monoidal closed category of ordered Banach spaces which treats randomness as a linear resource, but by constructing an exponential comonad we can also accommodate non-linear reasoning. We apply our semantics to the verification of the classical Gibbs sampling algorithm.
C1 [Dahlqvist, Fredrik] UCL, Comp Sci, London, England.
   [Dahlqvist, Fredrik] Imperial Coll London, Elect & Elect Engn, London, England.
   [Kozen, Dexter] Cornell Univ, Comp Sci, Ithaca, NY USA.
C3 University of London; University College London; Imperial College
   London; Cornell University
RP Dahlqvist, F (corresponding author), UCL, Comp Sci, London, England.; Dahlqvist, F (corresponding author), Imperial Coll London, Elect & Elect Engn, London, England.
EM f.dahlqvist09@imperial.ac.uk; dexter.kozen@cornell.edu
OI Dahlqvist, Fredrik/0000-0003-2555-0490; Kozen,
   Dexter/0000-0002-8007-4725
FU National Science Foundation [1637532]; ERC grant ProfoundNet; EPSRC
   platform grant [EP/P010040/1]; EPSRC [EP/P010040/1] Funding Source:
   UKRI; Direct For Computer & Info Scie & Enginr; Division of Computing
   and Communication Foundations [1637532] Funding Source: National Science
   Foundation
FX This material is based upon work supported by the National Science
   Foundation under Grant No. 1637532. Any opinions, findings, and
   conclusions or recommendations expressed in this material are those of
   the authors and do not necessarily reflect the views of the National
   Science Foundation. The first author also wishes to acknowledge support
   from the ERC grant ProfoundNet and the EPSRC platform grant
   EP/P010040/1.
CR Abramsky S, 1999, J PURE APPL ALGEBRA, V143, P3, DOI 10.1016/S0022-4049(98)00106-6
   Aliprantis C., 1999, INFINITE DIMENSIONAL, V32006
   Aliprantis C. D., 2006, Positive operators, V119
   Borgström J, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI [10.1145/2951913.2951942, 10.1145/3022670.2951942]
   Chang JT, 1997, STAT NEERL, V51, P287, DOI 10.1111/1467-9574.00056
   Chaput P, 2014, J ACM, V61, DOI 10.1145/2537948
   Clerc F., 2017, FDN SOFTW SCI COMP S
   Crubillé R, 2017, LECT NOTES COMPUT SC, V10203, P20, DOI 10.1007/978-3-662-54458-7_2
   Dahlqvist F., 2018, MATH FDN PROGRAMMING
   DAVIES EB, 1968, T AM MATH SOC, V131, P544, DOI 10.2307/1994962
   Dieudonne J., 1951, J. Analyse Math., V1, P81, DOI DOI 10.1007/BF02790084
   Dunford N., 1971, LINEAR OPERATORS
   Ehrhard T., 2017, P ACM PROGRAMMING LA, V2, P59
   Ehrhard T, 2014, ACM SIGPLAN NOTICES, V49, P309, DOI 10.1145/2535838.2535865
   Eisner T., 2015, OPERATOR THEORETIC A, V272
   FREMLIN DH, 1972, AM J MATH, V94, P777, DOI 10.2307/2373758
   FREMLIN DH, 1974, MATH ANN, V211, P87, DOI 10.1007/BF01344164
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   GEMAN S, 1984, IEEE T PATTERN ANAL, V6, P721, DOI 10.1109/TPAMI.1984.4767596
   Grothendieck A., 1955, Produits tensoriels topologiques et espaces nucleaires, V16
   Hayes B, 2001, AM SCI, V89, P300, DOI 10.1511/2001.4.300
   Heunen C, 2017, IEEE S LOG
   Kechris A. S., 1995, Graduate Text in Mathematics, V156
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Licata DR, 2014, IEEE S LOG, DOI 10.1145/2603088.2603153
   Mellies P., 2009, Panoramas et Syntheses, V27, P15
   Melliès PA, 2018, MATH STRUCT COMP SCI, V28, P1253, DOI 10.1017/S0960129516000426
   Min K. C., 1983, CAHIERS TOPOLOGIE GE, V24, P279
   Ryan R. A., 2013, Introduction to tensor products of Banach spaces
   Scibior A., 2017, P ACM PROGRAMMING LA, V2, P60
   Selinger P, 2008, LECT NOTES COMPUT SC, V4962, P81, DOI 10.1007/978-3-540-78499-9_7
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   Staton S, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P525, DOI 10.1145/2933575.2935313
   Vákár M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290349
   Wickstead AW, 2007, TRENDS MATH, P255, DOI 10.1007/978-3-7643-8478-4_9
   Wittstock G., 1974, Lecture Notes in Phys., P67
   Wong Y., 1973, Partially ordered topological spaces
   Zaanen A. C., 2012, INTRO OPERATOR THEOR
NR 39
TC 9
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 57
DI 10.1145/3371125
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400058
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Greenberg, M
   Blatt, AJ
AF Greenberg, Michael
   Blatt, Austin J.
TI Executable Formal Semantics for the POSIX Shell
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE command line interfaces; POSIX; formalization; small-step semantics
AB The POSIX shell is a widely deployed, powerful tool for managing computer systems. The shell is the expert's control panel, a necessary tool for configuring, compiling, installing, maintaining, and deploying systems. Even though it is powerful, critical infrastructure, the POSIX shell is maligned and misunderstood. Its power and its subtlety are a dangerous combination.
   We define a formal, mechanized, executable small-step semantics for the POSIX shell, which we call Smoosh. We compared Smoosh against seven other shells that aim for some measure of POSIX compliance (bash, dash, zsh, OSH, mksh, ksh93, and yash). Using three test suites-the POSIX test suite, the Modernish test suite and shell diagnostic, and a test suite of our own device-we found Smoosh's semantics to be the most conformant to the POSIX standard. Modemish judges Smoosh to have the fewest bugs (just one, from using dash's parser) and no quirks. To show that our semantics is useful beyond yielding a conformant, executable shell, we also implemented a symbolic stepper to illuminate the subtle behavior of the shell.
   Smoosh will serve as a foundation for formal study of the POSIX shell, supporting research on and development of new shells, new tooling for shells, and new shell designs.
C1 [Greenberg, Michael; Blatt, Austin J.] Pomona Coll, Dept Comp Sci, Claremont, CA 91711 USA.
   [Blatt, Austin J.] Puppet Labs, Portland, OR USA.
C3 Claremont Colleges; Pomona College
RP Greenberg, M (corresponding author), Pomona Coll, Dept Comp Sci, Claremont, CA 91711 USA.
EM michael@cs.pomona.edu; austinblatt@gmail.com
OI Greenberg, Michael/0000-0003-0014-7670
CR Blazy S, 2009, J AUTOM REASONING, V43, P263, DOI 10.1007/s10817-009-9148-3
   Chu Andy, 2019, OIL SHELL
   Collins N., 2003, Organised sound, V8, P321, DOI DOI 10.1017/S135577180300030X
   DAntoni Loris, 2016, ABS160808219 CORR
   Dekker Martijn, 2019, MODERNISH
   DENNIS JB, 1966, COMMUN ACM, V9, P143, DOI 10.1145/365230.365252
   Ellison C, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P533
   Fisher K, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P292
   Garfinkel Simson, 1994, UNIX HATERS HDB
   Gonzalez Gabriel., 2018, TURTLE SHELL PROGRAM
   Greenberg Michael, 2018, POSIX SHELL IS INTER
   Greenberg Michael, 2018, PROGR COMP PROGR EXP, DOI [10.1145/3191697.3214336, DOI 10.1145/3191697.3214336]
   Guha A, 2010, LECT NOTES COMPUT SC, V6183, P126, DOI 10.1007/978-3-642-14107-2_7
   Hatch WG, 2018, PROCEEDINGS OF THE 17TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'18), P28, DOI 10.1145/3278122.3278129
   Heller A, 2008, ML'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN WORKSHOP ON ML, P79
   Jeannerod N., 2017, LECT NOTES COMPUTER, V10712
   Jeannerod N., 2017, HAVING FUN 31 521 SH
   Jeannerod Nicolas, 2017, JFLA 2017 VINGT 8 JO
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Kamara Idan., 2016, EXPLAINSHELL
   Kang J, 2015, ACM SIGPLAN NOTICES, V50, P326, DOI [10.1145/2737924.2738005, 10.1145/2813885.2738005]
   koalaman, 2016, SHELLCH
   Krebbers Robbert, 2014, Interactive Theorem Proving. 5th International Conference, ITP 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8558, P543, DOI 10.1007/978-3-319-08970-6_36
   Maffeis Sergio, 2008, S PROGR LANG SYST AP, DOI [10.1007/978-3-540-89330-1_22, DOI 10.1007/978-3-540-89330-1_22]
   Mazurak K, 2007, PLAS'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY, P105, DOI 10.1145/1255329.1255347
   Memarian K, 2016, ACM SIGPLAN NOTICES, V51, P1, DOI [10.1145/2908080.2908081, 10.1145/2980983.2908081]
   Moore Scott, 2014, P 11 USENIX C OP SYS
   Mulligan DP, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P175, DOI 10.1145/2628136.2628143
   Nita M, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P209, DOI 10.1145/1328438.1328465
   Ntzik G., 2018, ECOOP, V109, DOI DOI 10.4230/LIPICS.ECOOP.2018.4
   Ntzik Gian, 2017, THESIS IMPERIAL COLL
   Philipp Emanuel Weidmann, 2016, MAYBE
   Politz Joe Gibbs, 2012, DYN LANG S DLS, p1S16, DOI [10.1145/2384577.2384579, DOI 10.1145/2384577.2384579]
   Régis-Gianas Y, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING (SLE '18), P29, DOI 10.1145/3276604.3276615
   Richards G, 2011, LECT NOTES COMPUT SC, V6813, P52, DOI 10.1007/978-3-642-22655-7_4
   Ridge T, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P38, DOI 10.1145/2815400.2815411
   Rosu G, 2010, J LOGIC ALGEBR PROGR, V79, P397, DOI 10.1016/j.jlap.2010.03.012
   Schreiner Henry, 2018, PLUMBUM SHELL COMBIN
   Scopatz Anthony, 2019, XONSH
   Shivers Olin, 2006, SCSH MANUAL 0 6 7
   The Austin Group, 2018, 100312008 IEEE SUST
   Weiss A, 2019, ARXIV190300982
   Weiss Aaron, 2018, ARXIV180602693
NR 43
TC 9
Z9 10
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 43
DI 10.1145/3371111
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400044
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Sozeau, M
   Boulier, S
   Forster, Y
   Tabareau, N
   Winterhalter, T
AF Sozeau, Matthieu
   Boulier, Simon
   Forster, Yannick
   Tabareau, Nicolas
   Winterhalter, Theo
TI COQ Cock Correct! Verification of Type Checking and Erasure for COQ, in
   COQ
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE proof assistants; type checker; certification
ID CALCULUS
AB COQ is built around a well-delimited kernel that perfoms typechecking for definitions in a variant of the Calculus of Inductive Constructions (CIC). Although the metatheory of CIC is very stable and reliable, the correctness of its implementation in COQ is less clear. Indeed, implementing an efficient type checker for CIC is a rather complex task, and many parts of the code rely on implicit invariants which can easily be broken by further evolution of the code. Therefore, on average, one critical bug has been found every year in COQ. This paper presents the first implementation of a type checker for the kernel of COQ (without the module system and template polymorphism), which is proven correct in COQ with respect to its formal specification and axiomatisation of part of its metatheory. Note that because of Godel's incompleteness theorem, there is no hope to prove completely the correctness of the specification of COQ inside COQ (in particular strong normalisation or canonicity), but it is possible to prove the correctness of the implementation assuming the correctness of the specification, thus moving from a trusted code base (TCB) to a trusted theory base (TTB) paradigm. Our work is based on the METACoQ project which provides metaprogramming facilities to work with terms and declarations at the level of this kernel. Our type checker is based on the specification of the typing relation of the Polymorphic, Cumulative Calculus of Inductive Constructions (PCUIC) at the basis of COQ and the verification of a relatively efficient and sound type-checker for it. In addition to the kernel implementation, an essential feature of COQ is the so-called extraction: the production of executable code in functional languages from COQ definitions. We present a verified version of this subtle type-and-proof erasure step, therefore enabling the verified extraction of a safe type-checker for COQ.
C1 [Sozeau, Matthieu] Inria Paris, Paris, France.
   [Sozeau, Matthieu] Univ Paris Diderot, CNRS, IRIF, Paris, France.
   [Boulier, Simon; Tabareau, Nicolas; Winterhalter, Theo] Inria Nantes, Nantes, France.
   [Forster, Yannick] Saarland Univ, Saarbrucken, Germany.
C3 Centre National de la Recherche Scientifique (CNRS); Universite Paris
   Cite; Saarland University
RP Sozeau, M (corresponding author), Inria Paris, Paris, France.; Sozeau, M (corresponding author), Univ Paris Diderot, CNRS, IRIF, Paris, France.
EM matthieu.sozeau@inria.fr; forster@ps.uni-saarland.de
OI Forster, Yannick/0000-0002-8676-9819; tabareau,
   nicolas/0000-0003-3366-2273; Winterhalter, Theo/0000-0002-9881-3696
FU CoqHoTT ERC Grant [637339]; European Research Council (ERC) [637339]
   Funding Source: European Research Council (ERC)
FX This research has been funded by the CoqHoTT ERC Grant 637339.
CR Abadi M., 1991, Journal of Functional Programming, V1, P375, DOI 10.1017/S0956796800000186
   Abel A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158111
   Abel A, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2480359.2429075
   Anand A, 2018, LECT NOTES COMPUT SC, V10895, P20, DOI 10.1007/978-3-319-94821-8_2
   Anand Abhishek, 2017, INT WORKSH COQ PROGR
   BARRAS B, 1999, THESIS U PARIS 7
   Barras B, 2008, LECT NOTES COMPUT SC, V4962, P365, DOI 10.1007/978-3-540-78499-9_26
   Bender MA, 2016, ACM T ALGORITHMS, V12, DOI 10.1145/2756553
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Forster Yannick, 2019, 10 INT C INT THEO PR
   Gallium Marelle, 2008, COMPCERT PROJECT COM
   Gilbert G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290316
   Gimenez Carlos Eduardo, 1996, THESIS ECOLE NORMALE
   Glondu Stephane, 2012, THESIS U PARIS DIDER
   Gueneau Armael, 2019, INTERACTIVE THEOREM
   Hupel Lars, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P999, DOI 10.1007/978-3-319-89884-1_35
   Letouzey P, 2002, LECT NOTES COMPUT SC, V2646, P200
   Letouzey Pierre, 2004, Ph. D. Dissertation
   Martin-Lof Per, 1995, OXFORD LOGIC GUIDES, V36, P127
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   Mullen Eric., 2018, P 7 ACM SIGPLAN INT, P172, DOI 10.1145/3167089
   Myreen MO, 2014, J FUNCT PROGRAM, V24, P284, DOI 10.1017/S0956796813000282
   Pédrot PM, 2017, IEEE S LOG, DOI 10.1109/LICS.2017.8005113
   Rossberg A, 2014, J FUNCT PROGRAM, V24, P529, DOI 10.1017/S0956796814000264
   Schäfer S, 2015, LECT NOTES COMPUT SC, V9236, P359, DOI 10.1007/978-3-319-22102-1_24
   Smolka Gert, 2015, CONFLUENCE NORMALIZA
   Sozeau Matthieu, 2014, Interactive Theorem Proving. 5th International Conference, ITP 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8558, P499, DOI 10.1007/978-3-319-08970-6_32
   Sozeau M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341690
   Sozeau Matthieu, 2019, METACOQ PROJECT
   Strub Pierre-Yves, 2012, 39 ACM SIGPLAN SIGAC
   TAKAHASHI M, 1989, J SYMB COMPUT, V7, P113, DOI 10.1016/S0747-7171(89)80045-8
   The Coq Development Team, 2019, The Coq Proof Assistant, version 8.9.0, DOI 10.5281/zenodo.2554024
   Timany A., 2017, RR9105 KU LEUV BELG
NR 33
TC 17
Z9 19
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 8
DI 10.1145/3371076
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400009
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Antonopoulos, T
   Koskinen, E
   Le, TC
AF Antonopoulos, Timos
   Koskinen, Eric
   Ton Chanh Le
TI Specification and Inference of Trace Refinement Relations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program refinement; trace refinement; Kleene Algebra with Tests
ID KLEENE ALGEBRA
AB The modern software engineering process is evolutionary, with commits/patches begetting new versions of code, progressing steadily toward improved systems. In recent years, program analysis and verification tools have exploited version-based reasoning, where new code can be seen in terms of how it has changed from the previous version. When considering program versions, refinement seems a natural fit and, in recent decades, researchers have weakened classical notions of concrete refinement and program equivalence to capture similarities as well as differences between programs. For example, Benton, Yang and others have worked on state-based refinement relations.
   In this paper, we explore a form of weak refinement based on trace relations rather than state relations. The idea begins by partitioning traces of a program C-1 into trace classes, each identified via a restriction r(1). For each class, we specify similar behavior in the other program C-2 via a separate restriction r(2) on C-2. Still, these two trace classes may not yet be equivalent so we further permit a weakening via a binary relation A on traces, that allows one to, for instance disregard unimportant events, relate analogous atomic events, etc.
   We address several challenges that arise. First, we explore one way to specify trace refinement relations by instantiating the framework to Kleene Algebra with Tests (KAT) due to Kozen. We use KAT intersection for restriction, KAT hypotheses for A, KAT inclusion for refinement, and have proved compositionality. Next, we present an algorithm for automatically synthesizing refinement relations, based on a mixture of semantic program abstraction, KAT inclusion, a custom edit-distance algorithm on counterexamples, and case-analysis on nondeterministic branching. We have proved our algorithm to be sound. Finally, we implemented our algorithm as a tool called KNOTICAL, on top of INTERPROC and SYMKAT. We demonstrate promising first steps in synthesizing trace refinement relations across a hand-crafted collection of 37 benchmarks that include changing fragments of array programs, models of systems code, and examples inspired by the thttpd and Merecat web servers.
C1 [Antonopoulos, Timos] Yale Univ, New Haven, CT 06520 USA.
   [Koskinen, Eric; Ton Chanh Le] Stevens Inst Technol, Hoboken, NJ 07030 USA.
C3 Yale University; Stevens Institute of Technology
RP Antonopoulos, T (corresponding author), Yale Univ, New Haven, CT 06520 USA.
RI Le, Ton Chanh/AAB-4349-2021
FU Office of Naval Research [N00014-17-1-2787]
FX The authors would also like to thank James Brotherston, David Naumann,
   Matthew Parkinson and the anonymous referees for their valuable comments
   and helpful suggestions. This work is supported by Office of Naval
   Research under Grant No.: N00014-17-1-2787.
CR Antonopoulos T, 2017, ACM SIGPLAN NOTICES, V52, P362, DOI [10.1145/3140587.3062378, 10.1145/3062341.3062378]
   Antonopoulos Timos, 2019, EXPT RESULTS KNOTICA
   Antonopoulos Timos, 2019, KNOTICAL INFERENCE S, DOI [10.5281/zenodo.3368626, DOI 10.5281/ZENODO.3368626]
   Barringer Howard, 1984, P 16 ANN ACM S THEOR, p51S63
   Barthe G, 2004, P IEEE CSFW, P100, DOI 10.1109/CSFW.2004.1310735
   Barthe Gilles, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P200, DOI 10.1007/978-3-642-21437-0_17
   Beckett Ryan, 2017, ABS170702894 CORR ABS170702894 CORR
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Bille P, 2005, THEOR COMPUT SCI, V337, P217, DOI 10.1016/j.tcs.2004.12.030
   Bouajjani A, 2017, LECT NOTES COMPUT SC, V10422, P46, DOI 10.1007/978-3-319-66706-5_3
   Clarkson B., 2014, INT C PRINC SEC TRUS, P265, DOI [10.1007/978-3-642-54792-8_15, DOI 10.1007/978-3-642-54792-8_15]
   Desharnais J, 2006, ACM T COMPUT LOG, V7, P798, DOI 10.1145/1183278.1183285
   Godlin B, 2009, DES AUT CON, P466
   Gulwani S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P375, DOI 10.1145/1542476.1542518
   Gyori A, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P318, DOI 10.1145/3092703.3092719
   JACKSON D, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P243, DOI 10.1109/ICSM.1994.336770
   Kawaguchi M., 2010, MSRTR2010119
   Kozen D., 1996, Tools and Algorithms for the Construction and Analysis of Systems. Second International Workshop, TACAS '96. Proceedings, P14
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Kozen D., 2001, AUTOMATA GUARDED STR
   Kozen D, 2006, LECT NOTES COMPUT SC, V4162, P73
   Kozen Dexter, 1990, MATH FDN COMPUTER SC, p26S47
   Kumazawa T, 2011, LECT NOTES COMPUT SC, V6617, P222, DOI 10.1007/978-3-642-20398-5_17
   Lahiri Shuvendu K., 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P712, DOI 10.1007/978-3-642-31424-7_54
   Lahiri S.K., 2015, AUTOMATED DIFFERENTI
   Lahiri ShuvenduK., 2013, ACM SIGSOFT S FDN SO, P345, DOI DOI 10.1145/2491411.2491452
   Lalire Gael, 2009, INTERPROC ANALYZER R
   Logozzo F, 2014, ACM SIGPLAN NOTICES, V49, P294, DOI [10.1145/2594291.2594326, 10.1145/2666356.2594326]
   Mathieu V, 2006, LECT NOTES COMPUT SC, V3929, P188
   Mauborgne L, 2005, LECT NOTES COMPUT SC, V3444, P5
   Morgan Carroll, 1994, Programming from specifications
   Nilsson Joachim, 2019, MERECAT EMBEDDED WEB MERECAT EMBEDDED WEB
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn P, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P13, DOI 10.1145/3209108.3209109
   Partush N, 2014, ACM SIGPLAN NOTICES, V49, P811, DOI [10.1145/2660193.2660245, 10.1145/2714064.2660245]
   Partush Nimrod, 2013, STATIC ANAL STATIC ANAL
   Person Suzette, 2008, P 16 INT S FDN SOFTW, P226, DOI [DOI 10.1145/1453101.1453131, 10.1145/1453101.1453131]
   Pick L, 2018, LECT NOTES COMPUT SC, V10981, P164, DOI 10.1007/978-3-319-96145-3_9
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Poskanzer Jef, 2018, THTTPD HTTP SERVER
   Pous D, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2676726.2677007, 10.1145/2775051.2677007]
   Smith C, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P616, DOI 10.1145/3106237.3106279
   Sousa M, 2016, ACM SIGPLAN NOTICES, V51, P57, DOI 10.1145/2908080.2908092
   Sousa Marcelo, 2018, PACMPL OOPSLA
   Sung C, 2018, IEEE INT CONF AUTOM, P656, DOI 10.1145/3238147.3238211
   Terauchi Tachio, 2017, STATIC ANAL STATIC ANAL
   Unno Hiroshi, 2017, COMPUTER AIDED VERIF, DOI DOI 10.1007/978-3-319-63390-9_30
   Wang YP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158144
   Wood T, 2017, LECT NOTES COMPUT SC, V10201, P937, DOI 10.1007/978-3-662-54434-1_35
   Yahav E, 2006, LOG J IGPL, V14, P755, DOI 10.1093/jigpal/jzl009
   Yang H, 2007, THEOR COMPUT SCI, V375, P308, DOI 10.1016/j.tcs.2006.12.036
NR 51
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 178
DI 10.1145/3360604
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500063
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Fernando, V
   Joshi, K
   Misailovic, S
AF Fernando, Vimuth
   Joshi, Keyur
   Misailovic, Sasa
TI Verifying Safety and Accuracy of Approximate Parallel Programs via
   Canonical Sequentialization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Approximate Computing; Reliability; Accuracy; Safety
AB We present Parallely, a programming language and a system for verification of approximations in parallel message-passing programs. Parallely's language can express various software and hardware level approximations that reduce the computation and communication overheads at the cost of result accuracy.
   Parallely's safety analysis can prove the absence of deadlocks in approximate computations and its type system can ensure that approximate values do not interfere with precise values. Parallely's quantitative accuracy analysis can reason about the frequency and magnitude of error. To support such analyses, Parallely presents an approximation-aware version of canonical sequentialization, a recently proposed verification technique that generates sequential programs that capture the semantics of well-structured parallel programs (i.e., ones that satisfy a symmetric nondeterminism property). To the best of our knowledge, Parallely is the first system designed to analyze parallel approximate programs.
   We demonstrate the effectiveness of Parallely on eight benchmark applications from the domains of graph analytics, image processing, and numerical analysis. We also encode and study five approximation mechanisms from literature. Our implementation of Parallely automatically and efficiently proves type safety, reliability, and accuracy properties of the approximate benchmarks.
C1 [Fernando, Vimuth; Joshi, Keyur; Misailovic, Sasa] Univ Illinois, Champaign, IL 61820 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign
RP Fernando, V (corresponding author), Univ Illinois, Champaign, IL 61820 USA.
OI Joshi, Keyur/0000-0002-5794-6257
FU NSF [CCF-1629431, CCF-1703637, CCF-1846354]; DARPA Domain-specific
   Systems on Chip (DSSOC) program, part of the Electronics Resurgence
   Initiative (ERI) [HR0011-18-C-0122]
FX We thank the anonymous reviewers for useful suggestions. The research
   presented in this paper was supported in part by NSF Grants CCF-1629431,
   CCF-1703637, and CCF-1846354, and DARPA Domain-specific Systems on Chip
   (DSSOC) program, part of the Electronics Resurgence Initiative (ERI),
   under Contract No. HR0011-18-C-0122.
CR Abadi M., 2016, 12 USENIX S OPERATIN, P265
   Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Achour S., 2015, OOPSLA
   AGHA G, 1986, SIGPLAN NOTICES, V21, P58, DOI 10.1145/323648.323743
   AGHA G, 1985, LECT NOTES COMPUT SC, V206, P19
   Ahmad M, 2015, I S WORKL CHAR PROC, P44, DOI 10.1109/IISWC.2015.11
   Akram R., 2016, ISSRE
   [Anonymous], 2019, ICSE
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 1996, LECT NOTES COMPUTER, DOI DOI 10.1007/3-540-60761-7
   Ansel J, 2014, INT CONFER PARA, P303, DOI 10.1145/2628071.2628092
   Ansel J, 2011, INT SYM CODE GENER, P85, DOI 10.1109/CGO.2011.5764677
   Baek W, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P198, DOI 10.1145/1806596.1806620
   Bakst A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133934
   Betzel F, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3145812
   Bienia C., 2011, Ph.D. dissertation
   Blom S, 2015, LECT NOTES COMPUT SC, V9033, P202, DOI 10.1007/978-3-662-46675-9_14
   Boston B., 2015, PROBABILITY TYPE INF
   Boston B., 2018, OOPSLA
   Boyapati R, 2017, 44TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA 2017), P666, DOI [10.1145/3079856.3080241, 10.1145/3140659.3080241]
   Campanoni S, 2015, INT SYM CODE GENER, P235, DOI 10.1109/CGO.2015.7054203
   Canino A., 2017, PLDI
   Carbin M., 2013, PEPM
   Carbin M., OOPSLA
   Carbin M, 2012, ACM SIGPLAN NOTICES, V47, P169, DOI 10.1145/2345156.2254086
   Chakradhar S., 2009, IPDPS
   Chaudhuri S., 2011, P 19 ACM SIGSOFT S 1, P102, DOI DOI 10.1145/2025113.2025131
   D'Osualdo E, 2013, LECT NOTES COMPUT SC, V7935, P454, DOI 10.1007/978-3-642-38856-9_24
   Darulova Eva., 2018, TACAS
   Dean J, 2008, COMMUN ACM, V51, P107, DOI 10.1145/1327452.1327492
   Deiana EA, 2018, ACM SIGPLAN NOTICES, V53, P432, DOI [10.1145/3173162.3173181, 10.1145/3296957.3173181]
   Desai A, 2014, ACM SIGPLAN NOTICES, V49, P709, DOI [10.1145/2660193.2660211, 10.1145/2714064.2660211]
   Ding YF, 2015, ACM SIGPLAN NOTICES, V50, P379, DOI [10.1145/2813885.2737969, 10.1145/2737924.2737969]
   Fernando V., 2019, WORKSH APPR COMP STA
   Fernando V., 2019, APPENDIX PARALLELY P
   Fernando V, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P849, DOI 10.1145/3297858.3304033
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Fredlund LÅ, 2007, ACM SIGPLAN NOTICES, V42, P125, DOI 10.1145/1291220.1291171
   Gaffar A., 2002, FPT
   Gleissenthall K.V., 2019, POPL
   Goiri I, 2015, ACM SIGPLAN NOTICES, V50, P383, DOI [10.1145/2694344.2694351, 10.1145/2775054.2694351]
   He SB, 2018, J AUTOM REASONING, V60, P23, DOI 10.1007/s10817-017-9421-9
   Hoffmann H, 2011, ACM SIGPLAN NOTICES, V46, P199, DOI 10.1145/1961296.1950390
   Huch F, 1999, ACM SIGPLAN NOTICES, V34, P261, DOI 10.1145/317765.317908
   Huisman M, 2017, PPDP
   Khatamifard S. K., 2018, IEEE T MULTI-SCALE C, V2
   La Torre S, 2009, LECT NOTES COMPUT SC, V5643, P477, DOI 10.1007/978-3-642-02658-4_36
   Lal A, 2008, LECT NOTES COMPUT SC, V5123, P37
   Lidman J, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3156017
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Liu S, 2011, ACM SIGPLAN NOTICES, V46, P213, DOI 10.1145/1961296.1950391
   Magron V, 2017, ACM T MATH SOFTWARE, V43, DOI 10.1145/3015465
   Michael E., 2019, EUROSYS
   Misailovic S, 2014, ACM SIGPLAN NOTICES, V49, P309, DOI [10.1145/10.1145/2660193.2660231, 10.1145/2714064.2660231]
   Misailovic S, 2013, ACM T EMBED COMPUT S, V12, DOI 10.1145/2465787.2465790
   Misailovic S, 2011, LECT NOTES COMPUT SC, V6887, P316, DOI 10.1007/978-3-642-23702-7_24
   Misailovic Sasa, 2010, 32 INT C SOFTW ENG, p25S34, DOI [10.1145/1806799.1806808, DOI 10.1145/1806799.1806808]
   Mitra S., 2017, CGO
   Nongpoh B, 2017, IEEE T SOFTWARE ENG, V43, P1110, DOI 10.1109/TSE.2017.2654251
   Osborne WG, 2007, I C FIELD PROG LOGIC, P617, DOI 10.1109/FPL.2007.4380730
   Page L., 1999, PAGERANK CITATION RA
   PETERSON JL, 1977, COMPUT SURV, V9, P223, DOI 10.1145/356698.356702
   Recht B., 2011, ADV NEURAL INFORM PR, P693
   Renganarayana L., 2012, RELAXWORKSHOP
   Rinard M., 2006, ICS
   Rinard M, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P369
   Rubio-González C, 2013, INT CONF HIGH PERFOR, DOI 10.1145/2503210.2503296
   Samadi M, 2014, ACM SIGPLAN NOTICES, V49, P35, DOI 10.1145/2541940.2541948
   Sampson A, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P164
   Sampson Adrian., 2015, ACCEPT PROGRAMMER GU
   Schkufza E, 2014, ACM SIGPLAN NOTICES, V49, P53, DOI [10.1145/2666356.2594302, 10.1145/2594291.2594302]
   Sidiroglou S., 2011, FSE
   Siegel S. F., 2005, PPOPP
   Siegel S. F., 2011, VMCAI
   Siegel SF, 2005, LECT NOTES COMPUT SC, V3385, P413
   Smith G., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P355, DOI 10.1145/268946.268975
   Stanley-Marbell P, 2018, IEEE MICRO, V38, P20, DOI 10.1109/MM.2018.043191122
   Stevens JR, 2018, ICCAD-IEEE ACM INT, DOI 10.1145/3240765.3240782
   Udupa A., 2011, PLDI
   Xu R, 2018, PROCEEDINGS OF THE 2018 USENIX ANNUAL TECHNICAL CONFERENCE, P43
   Yazdanbakhsh A, 2017, IEEE DES TEST, V34, P60, DOI 10.1109/MDAT.2016.2630270
   Zhu ZA, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P441
NR 82
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 119
DI 10.1145/3360545
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500004
OA gold
DA 2024-07-18
ER

PT J
AU Lampropoulos, L
   Hicks, M
   Pierce, BC
AF Lampropoulos, Leonidas
   Hicks, Michael
   Pierce, Benjamin C.
TI Coverage Guided, Property Based Testing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE random testing; property-based testing; fuzz testing; coverage;
   QuickChick; AFL; FuzzChick
AB Property-based random testing, exemplified by frameworks such as Haskell's QuickCheck, works by testing an executable predicate (a property) on a stream of randomly generated inputs. Property testing works very well in many cases, but not always. Some properties are conditioned on the input satisfying demanding semantic invariants that are not consequences of its syntactic structure e.g., that an input list must be sorted or have no duplicates. Most randomly generated inputs fail to satisfy properties with such sparse preconditions, and so are simply discarded. As a result, much of the target system may go untested.
   We address this issue with a novel technique called coverage guided, property based testing (CGPT). Our approach is inspired by the related area of coverage guided fuzzing, exemplified by tools like AFL. Rather than just generating a fresh random input at each iteration, CGPT can also produce new inputs by mutating previous ones using type-aware, generic mutation operators. The target program is instrumented to track which control flow branches are executed during a run and inputs whose runs expand control-flow coverage are retained for future mutations. This means that, when sparse conditions in the target are satisfied and new coverage is observed, the input that triggered them will be retained and used as a springboard to go further.
   We have implemented CGPT as an extension to the QuickChick property testing tool for Coq programs; we call our implementation FuzzChick. We evaluate FuzzChick on two Coq developments for abstract machines that aim to enforce flavors of noninterference, which has a (very) sparse precondition. We systematically inject bugs in the machines' checking rules and use FuzzChick to look for counterexamples to the claim that they satisfy a standard noninterference property. We find that vanilla QuickChick almost always fails to find any bugs after a long period of time, as does an earlier proposal for combining property testing and fuzzing. In contrast, FuzzChick often finds them within seconds to minutes. Moreover, FuzzChick is almost fully automatic; although highly tuned, hand-written generators can find the bugs faster than FuzzChick, they require substantial amounts of insight and manual effort.
C1 [Lampropoulos, Leonidas; Hicks, Michael] Univ Maryland, College Pk, MD 20742 USA.
   [Lampropoulos, Leonidas; Pierce, Benjamin C.] Univ Penn, Philadelphia, PA 19104 USA.
C3 University System of Maryland; University of Maryland College Park;
   University of Pennsylvania
RP Lampropoulos, L (corresponding author), Univ Maryland, College Pk, MD 20742 USA.; Lampropoulos, L (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM llamp@seas.upenn.edu; mwh@cs.umd.edu; bcpierce@cs.upenn.edu
OI Lampropoulos, Leonidas/0000-0003-0269-9815
FU NSF [1421243]; Random Testing for Language Design [1521523]; Defense
   Advanced Research Projects Agency (DARPA) [HR0011-18-C-0011]; United
   States Air Force; DARPA [FA8750-16-C-0022]; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1421243] Funding Source: National Science Foundation
FX We thank Pei-jo Yang for contributions to this work, and Yishuai Li,
   Nicolas Koh, and Gabriel Scherer for comments on earlier drafts. This
   work was supported by NSF awards #1421243, Random Testing for Language
   Design and #1521523, Expeditions in Computing: The Science of Deep
   Specification, by the Defense Advanced Research Projects Agency (DARPA)
   under Contract No. HR0011-18-C-0011, and by the United States Air Force
   and DARPA under Contract No FA8750-16-C-0022. Any opinions, findings and
   conclusions or recommendations expressed in this material are those of
   the author(s) and do not necessarily reflect the views of the NSF, the
   United States Air Force, or DARPA. The
CR AFL, 2018, AM FUZZ LOP AFL
   Austin Thomas H., 2009, P ACM SIGPLAN 4 WORK, P113, DOI DOI 10.1145/1554339.1554353
   Bastani O, 2017, ACM SIGPLAN NOTICES, V52, P95, DOI [10.1145/3062341.3062349, 10.1145/3140587.3062349]
   Blanchette JC, 2010, LECT NOTES COMPUT SC, V6172, P131, DOI 10.1007/978-3-642-14052-5_11
   Blanchette Jasmin Christian, 2012, THESIS TECHNICAL U M
   Bohme Marcel, 2016, ACM SIGSAC C COMP CO
   Bulwahn Lukas, 2012, Certified Programs and Proofs. Second International Conference (CPP 2012). Proceedings, P92, DOI 10.1007/978-3-642-35308-6_10
   Bulwahn L, 2012, LECT NOTES COMPUT SC, V7180, P153, DOI 10.1007/978-3-642-28717-6_14
   Cadar C., 2008, OSDI, V8, P209, DOI DOI 10.5555/1855741.1855756
   Chen P, 2018, P IEEE S SECUR PRIV, P711, DOI 10.1109/SP.2018.00046
   Chiricescu Silviu, 2013, P IEEE INT C TECHN H
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Claessen K, 2014, LECT NOTES COMPUT SC, V8475, P18, DOI 10.1007/978-3-319-07151-0_2
   Claessen K, 2013, ACM SIGPLAN NOTICES, V48, P47, DOI 10.1145/2503778.2503784
   Corina J, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2123
   Cruanes S, 2016, ELECTRON P THEOR COM, P3, DOI 10.4204/EPTCS.210.3
   de Amorim AA, 2014, ACM SIGPLAN NOTICES, V49, P165, DOI 10.1145/2535838.2535839
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Denes M., 2014, COQ WORKSH
   Fetscher B, 2015, LECT NOTES COMPUT SC, V9032, P383, DOI 10.1007/978-3-662-46669-8_16
   Gan ST, 2018, P IEEE S SECUR PRIV, P679, DOI 10.1109/SP.2018.00040
   Giffin Daniel B, 2012, 10 USENIX S OPERATIN, P47
   Gligoric M., 2010, P 32 ACM IEEE INT C, P225, DOI 10.1145/1806799.1806835
   Godefroid P, 2017, IEEE INT CONF AUTOM, P50, DOI 10.1109/ASE.2017.8115618
   Godefroid P, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P206, DOI 10.1145/1375581.1375607
   Godefroid Patrice, 2008, Network and Distributed Systems Security
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Grieco G, 2016, ACM SIGPLAN NOTICES, V51, P13, DOI [10.1145/2976002.2976017, 10.1145/3241625.2976017]
   Grieco Gustavo, 2017, J SYST SOFTW, V2017
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Hritcu C, 2016, J FUNCT PROGRAM, V26, DOI 10.1017/S0956796816000058
   Hritcu C, 2013, ACM SIGPLAN NOTICES, V48, P455, DOI [10.1145/2500365.2500574, 10.1145/2544174.2500574]
   Hritcu C, 2013, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2013.10
   Jackson D., 2011, Software Abstractions: Logic, Language, and Anlysis
   Jain V, 2018, 34TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2018), P505, DOI 10.1145/3274694.3274746
   Klees G, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P2123, DOI 10.1145/3243734.3243804
   Lampropoulos L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158133
   Lampropoulos L, 2017, ACM SIGPLAN NOTICES, V52, P114, DOI 10.1145/3093333.3009868
   Lampropoulos Leonidas, 2018, QuickChick: Property-Based Testing in Coq
   Lampropoulos Leonidas, 2018, Ph. D. Dissertation
   lcamtuf, 2019, AFL DICT
   lcamtuf, 2019, AFL GENERATED MINIMI
   Lemieux C, 2018, IEEE INT CONF AUTOM, P475, DOI 10.1145/3238147.3238176
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   libFuzzer, 2019, LIBFUZZER
   MILLER BP, 1990, COMMUN ACM, V33, P32, DOI 10.1145/96267.96279
   Montagu B, 2013, P IEEE CSFW, P3, DOI 10.1109/CSF.2013.8
   Padhye Rohan, 2018, CORRABS181200078
   Papadakis M, 2011, ERLANG 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN ERLANG WORKSHOP, P39
   Paraskevopoulou Z, 2015, LECT NOTES COMPUT SC, V9236, P325, DOI 10.1007/978-3-319-22102-1_22
   Paraskevopoulou Zoe, 2015, WORKSH COQ PL
   Peng H, 2018, P IEEE S SECUR PRIV, P697, DOI 10.1109/SP.2018.00056
   Pham Van-Thuan, 2018, CORRABS181109447
   Rawat S, 2017, 24TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2017), DOI 10.14722/ndss.2017.23404
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Seidel EL, 2015, LECT NOTES COMPUT SC, V9032, P812, DOI 10.1007/978-3-662-46669-8_33
   Shastry B, 2017, LECT NOTES COMPUT SC, V10453, P26, DOI 10.1007/978-3-319-66332-6_2
   Stefan D, 2011, HASKELL 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN HASKELL SYMPOSIUM, P95
   Stefan Deian, 2012, NORDSEC
   Stephens N, 2016, 23RD ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2016), DOI 10.14722/ndss.2016.23368
   Tortak E, 2007, LECT NOTES COMPUT SC, V4424, P632
   Wang JJ, 2017, P IEEE S SECUR PRIV, P579, DOI 10.1109/SP.2017.23
   Wang Junjie, 2018, CORRABS181201197
   Weber T, 2005, ELECTRON NOTES THEOR, V125, P103, DOI 10.1016/j.entcs.2004.10.027
   Yun I, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P745
   Zdancewic Stephan A., THESIS CORNELL U
NR 66
TC 20
Z9 23
U1 2
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 181
DI 10.1145/3360607
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500066
OA gold
DA 2024-07-18
ER

PT J
AU Ter-Gabrielyan, A
   Summers, AJ
   Müller, P
AF Ter-Gabrielyan, Arshavir
   Summers, Alexander J.
   Mueller, Peter
TI Modular Verification of Heap Reachability Properties in Separation Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE graphs; heap leachability; separation logic; SMT; specification
AB The correctness of many algorithms and data structures depends on Teachability properties, that is, on the existence of chains of references between objects in the heap. Reasoning about Teachability is difficult for two main reasons. First, any heap modification may affect an unbounded number of reference chains, which complicates modular verification, in particular, framing. Second, general graph leachability is not supported by first-order SMT solvers, which impedes automatic verification.
   In this paper, we present a modular specification and verification technique for reachability properties in separation logic. For each method, we specify Teachability only locally within the fragment of the heap on which the method operates. We identify relative convexity, a novel relation between the heap fragments of a client and a callee, which enables (first-order) leachability framing, that is, extending leachability properties from the heap fragment of a callee to the larger fragment of its client, enabling precise procedure-modular reasoning. Our technique supports practically important heap structures, namely acyclic graphs with a bounded outdegree as well as (potentially cyclic) graphs with at most one path (modulo cycles) between each pair of nodes. The integration into separation logic allows us to reason about leachability and other properties in a uniform way, to verify concurrent programs, and to automate our technique via existing separation logic verifiers. We demonstrate that our verification technique is amenable to SMT-based verification by encoding a number of benchmark examples into the Viper verification infrastructure.
C1 [Ter-Gabrielyan, Arshavir; Summers, Alexander J.; Mueller, Peter] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich
RP Ter-Gabrielyan, A (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
EM ter-gabrielyan@inf.ethz.ch; alexander.summers@inf.ethz.ch;
   peter.mueller@inf.ethz.ch
FU Swiss National Science Foundation [200021-156980]; Swiss National
   Science Foundation (SNF) [200021_156980] Funding Source: Swiss National
   Science Foundation (SNF)
FX We are grateful to the anonymous referees for their thoughtful comments.
   We also thank Uri Juhasz, Marco Eilers, Gishor Sivanrupan, Jerome
   Dohrau, Sviatlana-Maryia Zdobnikava, Alexandra Bugariu, Siddharth
   Krishna, FelixWolf, Vytautas Astrauskas, Federico Poli, Martin Clochard,
   Shachar Itzhaky, and K. Rustan M. Leino for their help. This work was
   funded in part by the Swiss National Science Foundation under project
   200021-156980.
CR AKERS SB, 1978, IEEE T COMPUT, V27, P509, DOI 10.1109/TC.1978.1675141
   Barrett C., 2017, Technical Report
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Cormen T.H., 2009, INTRO ALGORITHMS
   CROES GA, 1958, OPER RES, V6, P791, DOI 10.1287/opre.6.6.791
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   DONG GZ, 1995, INFORM COMPUT, V120, P101, DOI 10.1006/inco.1995.1102
   Fredman ML, 1986, ALGORITHMICA, V1, P111, DOI 10.1007/BF01840439
   Itzhaky S, 2014, ACM SIGPLAN NOTICES, V49, P385, DOI 10.1145/2535838.2535854
   Itzhaky Shachar., 2013, CAV, P756, DOI 10.1007/978-3-642-39799-8_53
   Jobstmann Barbara, LNCS, V9583, P41
   Krishna S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158125
   LEE CY, 1959, BELL SYST TECH J, V38, P985, DOI 10.1002/j.1538-7305.1959.tb01585.x
   Lev-Ami T, 2009, LOG METH COMPUT SCI, V5, DOI 10.2168/LMCS-5(2:12)2009
   LIN S, 1965, AT&T TECH J, V44, P2245, DOI 10.1002/j.1538-7305.1965.tb04146.x
   Moskal M, 2009, P 7 INT WORKSH SAT M, P20, DOI [DOI 10.1145/1670412.1670416, 10.1145/1670412.1670416]
   Müller P, 2016, LECT NOTES COMPUT SC, V9779, P405, DOI 10.1007/978-3-319-41528-4_22
   Muller Peter., 2018, PRINCIPLED SOFTWARE, P203
   Parkinson M, 2005, ACM SIGPLAN NOTICES, V40, P247, DOI 10.1145/1047659.1040326
   Parkinson MJ, 2011, LECT NOTES COMPUT SC, V6602, P439, DOI 10.1007/978-3-642-19718-5_23
   Piskac T., 2014, LNCS, P124, DOI DOI 10.1007/978-3-642-54862-8_9
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rustan K, 2008, TECHNICAL REPORT
   SHA L, 1990, IEEE T COMPUT, V39, P1175, DOI 10.1109/12.57058
   Shin Sung Y., 2009, SAC, P615
   Smans J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160911
   TARJAN RE, 1975, J ACM, V22, P215, DOI 10.1145/321879.321884
   Ter-Gabrielyan Arshavir, 2019, Zenodo, DOI 10.5281/ZENODO.3367478
   Ter-Gabrielyan Arshavir., ARXIV190805799
   Yang H., 2001, SPACE
   Yang Hongseok., 2001, THESIS US REDDY
NR 32
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 121
DI 10.1145/3360547
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500006
OA Green Submitted, gold, Green Published
DA 2024-07-18
ER

PT J
AU Batz, K
   Kaminski, BL
   Katoen, JP
   Matheja, C
   Noll, T
AF Batz, Kevin
   Kaminski, Benjamin Lucien
   Katoen, Joost-Pieter
   Matheja, Christoph
   Noll, Thomas
TI Quantitative Separation Logic A Logic for Reasoning about Probabilistic
   Pointer Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantitative separation logic; probabilistic programs; randomized
   algorithms; formal verification; quantitative reasoning
AB We present quantitative separation logic (QSL). In contrast to classical separation logic, QSL employs quantities which evaluate to real numbers instead of predicates which evaluate to Boolean values. The connectives of classical separation logic, separating conjunction and separating implication, are lifted from predicates to quantities. This extension is conservative: Both connectives are backward compatible to their classical analogs and obey the same laws, e.g. modus ponens, adjointness, etc.
   Furthermore, we develop a weakest precondition calculus for quantitative reasoning about probabilistic pointer programs in QSL. This calculus is a conservative extension of both Ishtiaq's, O'Hearn's and Reynolds' separation logic for heap-manipulating programs and Kozen's/Mclver and Morgan's weakest preexpectatioris for probabilistic programs. Soundness is proven with respect to an operational semantics based on Markov decision processes. Our calculus preserves O'Hearn's frame rule, which enables local reasoning. We demonstrate that our calculus enables reasoning about quantities such as the probability of terminating with an empty heap, the probability of reaching a certain array permutation, or the expected length of a list.
C1 [Batz, Kevin; Kaminski, Benjamin Lucien; Katoen, Joost-Pieter; Matheja, Christoph; Noll, Thomas] Rhein Westfal TH Aachen, Aachen, Germany.
C3 RWTH Aachen University
RP Batz, K (corresponding author), Rhein Westfal TH Aachen, Aachen, Germany.
EM kevin.batz@rwth-aachen.de; benjamin.kaminski@cs.rwth-aachen.de;
   katoen@cs.rwth-aachen.de; matheja@cs.rwth-aachen.de;
   noll@cs.rwth-aachen.de
RI Matheja, Christoph/HZK-7338-2023; Katoen, Joost-Pieter/O-3307-2018
OI Matheja, Christoph/0000-0001-9151-0441; Kaminski, Benjamin
   Lucien/0000-0001-5185-2324; Noll, Thomas/0000-0002-1865-1798; Batz,
   Kevin/0000-0001-8705-2564
FU DFG research training group 2236 UnRAVeL; DFG [401/2-1]
FX Furthermore, we acknowledge the support of this work by DFG research
   training group 2236 UnRAVeL and by DFG grant NO 401/2-1.
CR Albers S, 2002, INFORM PROCESS LETT, V81, P213, DOI 10.1016/S0020-0190(01)00230-7
   [Anonymous], 2001, J OPER RES SOC
   Apt Krzysztof R, 1986, J ACM JACM, V33
   ARAGON CR, 1989, ANN IEEE SYMP FOUND, P540, DOI 10.1109/SFCS.1989.63531
   Atkey R, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:17)2011
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Barthe Gilles, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P117, DOI 10.1007/978-3-319-89884-1_5
   Barthe Gilles, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P1, DOI 10.1007/978-3-642-31113-0_1
   Batz Kevin, 2018, ABS180210467 CORR
   Blelloch Guy E, 1998, SPAA
   Bozga M, 2010, J AUTOM REASONING, V45, P131, DOI 10.1007/s10817-010-9179-9
   Brotherston James, 2007, SAS
   Carbin M, 2016, COMMUN ACM, V59, P83, DOI 10.1145/2958738
   Chakarov Aleksandar, 2013, CAV LNCS, V8044
   Chang BYE, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P247, DOI 10.1145/1328438.1328469
   Chatterjee K, 2016, ACM SIGPLAN NOTICES, V51, P327, DOI 10.1145/2914770.2837639
   Chin WN, 2012, SCI COMPUT PROGRAM, V77, P1006, DOI 10.1016/j.scico.2010.07.004
   COUSOT P, 1979, PAC J MATH, V82, P43, DOI 10.2140/pjm.1979.82.43
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Freivalds R., 1977, IFIP C
   Gretz F, 2014, PERFORM EVALUATION, V73, P110, DOI 10.1016/j.peva.2013.11.004
   Henzinger Thomas A., 2013, COMPUTER SCI R D, V28
   Hesselink Wim H., 1993, FORM ASP COMPUT, V5
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   HOARE CAR, 1962, COMPUT J, V5, P10, DOI 10.1093/comjnl/5.1.10
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Jones C., 1990, PhD thesis
   Kaminski Benjamin Lucien, 2016, ESOP LNCS, V9632
   KNUTH DE, 1992, AM MATH MON, V99, P403, DOI 10.2307/2325085
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Kozen Dexter, 1979, FOCS
   Krebbers Robbert, 2017, POPL
   Magill Stephen, 2006, SPACE, V1, p5S7
   Martinez C, 1998, J ACM, V45, P288, DOI 10.1145/274787.274812
   McIver A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158121
   McIver Annabelle., 2005, MG COMP SCI
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   Ngo Van Chan, 2018, PLDI
   OHearn Peter W., 2012, SOFTWARE SAFETY SECU
   Olmedo F, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P672, DOI 10.1145/2933575.2935317
   PUGH W, 1990, COMMUN ACM, V33, P668, DOI 10.1145/78973.78977
   Puterman M., 2005, MARKOV DECISION PROC
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Scott Dana, 2008, ANDRZEJ MOSTOWSKI FD
   Tassarotti Joseph, 2018, ABS180202951 CORR
   Yang Hongseok, 2002, FOSSAC, DOI [10.1007/3- 540-45931- 6_28, DOI 10.1007/3-540-45931-6_28]
NR 46
TC 25
Z9 26
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 34
DI 10.1145/3290347
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300034
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Crary, K
AF Crary, Karl
TI Fully Abstract Module Compilation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Modules; full abstraction; phase separation
AB We give a translation suitable for compilation of modern module calculi supporting sealing, generativity, translucent signatures, applicative functors, higher-order functors and/or first-class modules. Ours is the first module-compilation translation with a dynamic correctness theorem. The theorem states that the translation produces target terms that are contextually equivalent to the source, in an appropriate sense. A corollary of the theorem is that the translation is fully abstract. Consequently, the translation preserves all abstraction present in the source. In passing, we also show that modules are a definitional extension of the underlying core language. All of our proofs are formalized in Coq.
C1 [Crary, Karl] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Crary, K (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
CR BREAZUTANNEN V, 1991, INFORM COMPUT, V93, P172, DOI 10.1016/0890-5401(91)90055-7
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P50, DOI 10.1145/301631.301641
   Crary Karl, 2017, 44 ACM S PRINC PROGR 44 ACM S PRINC PROGR
   Cross N, 1998, RES ENG DES, V10, P141, DOI 10.1007/BF01607156
   Curien Pierre-Louis, 1992, MATH STRUCT COMP SCI, V2, p55S91, DOI DOI 10.1017/S0960129500001134
   Dreyer D, 2003, ACM SIGPLAN NOTICES, V38, P236, DOI 10.1145/640128.604151
   Dreyer D., 2005, THESIS CARNEGIE MELL
   Elsman M, 1999, ACM SIGPLAN NOTICES, V34, P208, DOI 10.1145/317765.317800
   Elsman Martin, 2018, 2018 ACM INT C FUNCT
   HARPER R, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P341, DOI 10.1145/96709.96744
   Harper R, 2000, FOUNDAT COMPUT, P341
   Harper R., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P130, DOI 10.1145/199448.199475
   HARPER R, 1993, ACM T PROGR LANG SYS, V15, P211, DOI 10.1145/169701.169696
   Harper R., 1994, PRINCIPLES PROGRAMMI, P123, DOI [DOI 10.1145/174675.176927, 10.1145/174675.176927]
   Harper Robert., 2005, Advanced Topics in Types and Programming Languages, chapter Design Considerations for ML-Style Module Systems
   Harper Robert, 1986, Standard ml
   Lee Daniel K, 2007, 34 ACM S PRINC PROGR 34 ACM S PRINC PROGR
   Leroy X., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P109, DOI 10.1145/174675.176926
   Leroy X., 1995, 22 ACM S PRINC PROGR
   Leroy X., 2016, OCAML SYSTEM RELEASE
   Leroy X., 2003, PROPOSAL RECURSIVE M
   MacQueen D. B., 1994, Programming Languages and Systems - ESOP '94. 5th European Symposium on Programming. Proceedings, P409
   MacQueen DavidB., 1986, P 13 ACM SIGPLAN S P, P277, DOI DOI 10.1145/512644.512670
   Milner R., 1990, The Definition of Standard ML
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   Patrignani Marco, 2019, COMPUT SURVEYS 2019
   Pitts Andrew M., 2005, Advanced Topics in Types and Programming Languages, P245
   Rossberg A, 2014, J FUNCT PROGRAM, V24, P529, DOI 10.1017/S0956796814000264
   RUSSO C, 1998, THESIS EDINBURGH U
   Russo Claudio V, 2000, NORDIC J COMPUTING, V7, P4
   Russo Claudio V, 2001, 2001 ACM INT C FUNCT
   Shan Chung-chieh, 2006, HIGHER ORDER MODULES
   Stone CA, 2006, ACM T COMPUT LOG, V7, P676, DOI 10.1145/1183278.1183281
   Stone Christopher A., 2000, 27 ACM S PRINC PROGR 27 ACM S PRINC PROGR
   Zhong S, 1999, ACM SIGPLAN NOTICES, V34, P220, DOI 10.1145/317765.317801
NR 35
TC 2
Z9 2
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 10
DI 10.1145/3290323
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300010
OA gold
DA 2024-07-18
ER

PT J
AU Houshmand, F
   Lesani, M
AF Houshmand, Farzin
   Lesani, Mohsen
TI Hamsaz: Replication Coordination Analysis and Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Well-Coordination; Distributed Systems; Invariant-Preserving;
   Consistency; Program Synthesis
ID EVENTUAL CONSISTENCY; TIME
AB Distributed system replication is widely used as a means of fault-tolerance and scalability. However, it provides a spectrum of consistency choices that impose a dilemma for clients between correctness, responsiveness and availability. Given a sequential object and its integrity properties, we automatically synthesize a replicated object that guarantees state integrity and convergence and avoids unnecessary coordination. Our approach is based on a novel sufficient condition for integrity and convergence called well-coordination that requires certain orders between conflicting and dependent operations. We statically analyze the given sequential object to decide its conflicting and dependent methods and use this information to avoid coordination. We present novel coordination protocols that are parametric in terms of the analysis results and provide the well-coordination requirements. We implemented a tool called Hamsaz that can automatically analyze the given object, instantiate the protocols and synthesize replicated objects. We have applied Hamsaz to a suite of use-cases and synthesized replicated objects that are significantly more responsive than the strongly consistent baseline.
C1 [Houshmand, Farzin; Lesani, Mohsen] Univ Calif Riverside, Riverside, CA 92521 USA.
C3 University of California System; University of California Riverside
RP Houshmand, F (corresponding author), Univ Calif Riverside, Riverside, CA 92521 USA.
EM fhous001@ucr.edu; lesani@cs.ucr.edu
RI Houshmand, Farzin/AAY-9285-2021
FU National Science Foundation; CRII: SHF: Certified Byzantine
   Fault-tolerant Systems [1657204]
FX This work was partially funded by the National Science Foundation grant,
   CRII: SHF: Certified Byzantine Fault-tolerant Systems (1657204).
CR Abadi DJ, 2012, COMPUTER, V45, P37, DOI 10.1109/MC.2012.33
   AHAMAD M, 1995, DISTRIB COMPUT, V9, P37, DOI 10.1007/BF01784241
   Alvaro P, 2017, ACM T DATABASE SYST, V42, DOI 10.1145/3110214
   Anderson Z, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P98, DOI 10.1145/1542476.1542488
   [Anonymous], 2014, USENIX NSDI
   Bailis P, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1327, DOI 10.1145/2723372.2737784
   Bailis P, 2014, PROC VLDB ENDOW, V8, P185, DOI 10.14778/2735508.2735509
   Bailis P, 2012, PROC VLDB ENDOW, V5, P776, DOI 10.14778/2212351.2212359
   Bailis Peter., 2012, Proceedings of the Third ACM Symposium on Cloud Computing, P22, DOI DOI 10.1145/2391229.2391251
   Balegas Valter, 2015, ACM SIGOPS Operating Systems Review, V49, P121
   Balegas Valter, 2015, Proceedings of the Tenth European Conference on Computer Systems, DOI [10.1145/2741948.2741972, DOI 10.1145/2741948.2741972]
   Bansal K, 2016, LECT NOTES ARTIF INT, V9706, P82, DOI 10.1007/978-3-319-40229-1_7
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Barrett Clark, 2010, P 8 INT WORKSH SAT M
   Belaramani N, 2006, USENIX ASSOCIATION PROCEEDINGS OF THE 3RD SYMPOSIUM ON NETWORKED SYSTEMS DESIGN & IMPLEMENTATION (NSDI 06), P59
   Bernardi Giovanni, 2016, LIPICS LEIBNIZ INT P, V59
   Birman K. P., 1985, Operating Systems Review, V19, P79, DOI 10.1145/323627.323636
   Bouajjani A, 2014, ACM SIGPLAN NOTICES, V49, P285, DOI 10.1145/2535838.2535877
   BRON C, 1973, COMMUN ACM, V16, P575, DOI 10.1145/362342.362367
   Brutschy L, 2017, ACM SIGPLAN NOTICES, V52, P458, DOI 10.1145/3093333.3009895
   Burckhardt S, 2014, ACM SIGPLAN NOTICES, V49, P271, DOI 10.1145/2535838.2535848
   Cachin Christian, 2011, INTRO RELIABLE SECUR, V2nd
   Cantone D, 2000, LECT NOTES ARTIF INT, V1761, P126
   Cantone Domenico., 2013, Set theory for computing: from decision procedures to declarative programming with sets
   Carvalho Nuno, 2011, APPIA FRAMEWORK
   Cerone Andrea., 2015, LIPIcs-Leibniz International Proceedings in Informatics, V42
   Clancy Kevin., 2017, Proceedings of the Programming Models and Languages for Distributed Computing, page, P2
   Cooper BF, 2008, PROC VLDB ENDOW, V1, P1277
   Corbett JC, 2013, ACM T COMPUT SYST, V31, DOI 10.1145/2491245
   DeCandia Giuseppe, 2007, Operating Systems Review, V41, P205, DOI 10.1145/1323293.1294281
   Emmi Michael, 2018, P CAV
   Fekete A, 2005, ACM T DATABASE SYST, V30, P492, DOI 10.1145/1071610.1071615
   Fekete A., 2005, PODS, P206
   FISCHER MJ, 1985, J ACM, V32, P374, DOI 10.1145/3149.214121
   Gilbert S., 2002, SIGACT News, V33, P51, DOI 10.1145/564585.564601
   Gilbert S, 2012, COMPUTER, V45, P30, DOI 10.1109/MC.2011.389
   Gotsman A, 2016, ACM SIGPLAN NOTICES, V51, P371, DOI 10.1145/2914770.2837625
   Guerraoui R, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P169
   Hoffmann Jan, 2013, Proceedings of the 2013 28th Annual ACM/IEEE Symposium on Logic in Computer Science, P124, DOI 10.1109/LICS.2013.18
   Holt B, 2016, PROCEEDINGS OF THE SEVENTH ACM SYMPOSIUM ON CLOUD COMPUTING (SOCC 2016), P279, DOI 10.1145/2987550.2987559
   Jin X, 2018, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI'18), P35
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Kaki G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158115
   Kraska T, 2009, PROC VLDB ENDOW, V2
   Kuncak V, 2007, LECT NOTES ARTIF INT, V4603, P215
   LADIN R, 1992, ACM T COMPUT SYST, V10, P360, DOI 10.1145/138873.138877
   Lahav O, 2015, LECT NOTES COMPUT SC, V9135, P311, DOI 10.1007/978-3-662-47666-6_25
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lamport L, 1998, ACM T COMPUT SYST, V16, P133, DOI 10.1145/279227.279229
   Li Cheng, 2012, 10 USENIX S OP SYST, P265
   Li Cheng, 2014, 2014 USENIX Annual Technical Conference (USENIX ATC 14), P281
   Li Cheng., 2015, Proceedings of the First Workshop on Principles and Practice of Consistency for Distributed Data, page, P8
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Lloyd W, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P401
   Lloyd Wyatt, 2013, P NSDI
   Lu SY, 2004, IEEE T KNOWL DATA EN, V16, P1070, DOI 10.1109/TKDE.2004.34
   Madhusudan P, 2001, LECT NOTES COMPUT SC, V2076, P396
   Meng BL, 2017, LECT NOTES ARTIF INT, V10395, P148, DOI 10.1007/978-3-319-63046-5_10
   Milano Matthew., 2018, Mixt: A language for mixing consistency in geodistributed transactions
   Najafzadeh M, 2016, PROCEEDINGS OF THE 2ND WORKSHOP ON THE PRINCIPLES AND PRACTICE OF CONSISTENCY FOR DISTRIBUTED DATA, PAPOC 2016, DOI [10.1145/2911151.2911160, 10.1109/CPE-POWERENG50821.2021.9501173]
   Nardelli Francesco Zappa, 2009, EXPL CONC EFF CORR W
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Oki B. M., 1988, Proceedings of the Seventh Annual ACM Symposium on Principles of Distributed Computing, P8, DOI 10.1145/62546.62549
   Ongaro Diego, 2014, 2014 USENIX ANN TECH, P305, DOI DOI 10.1007/0-387-34805-0_21
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Petersen Karin, 1997, P SOSP
   Ramamritham K, 1995, IEEE T KNOWL DATA EN, V7, P997, DOI 10.1109/69.476504
   Roy S, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1311, DOI 10.1145/2723372.2723720
   Shapiro Marc, 2011, RR7506 INRIA
   Sivaramakrishnan KC, 2015, ACM SIGPLAN NOTICES, V50, P413, DOI [10.1145/2813885.2737981, 10.1145/2737924.2737981]
   Sovran Y, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P385
   Suter P, 2011, LECT NOTES COMPUT SC, V6538, P403, DOI 10.1007/978-3-642-18275-4_28
   Terry DB, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P309, DOI 10.1145/2517349.2522731
   Tsukiyama S., 1977, SIAM Journal on Computing, V6, P505, DOI 10.1137/0206036
   Vogels W, 2009, COMMUN ACM, V52, P40, DOI 10.1145/1435417.1435432
   Yu HF, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE FOURTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P305
NR 76
TC 23
Z9 31
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 74
DI 10.1145/3290387
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300074
OA gold
DA 2024-07-18
ER

PT J
AU Kaposi, A
   Kovács, A
   Altenkirch, T
AF Kaposi, Ambrus
   Kovacs, Andras
   Altenkirch, Thorsten
TI Constructing Quotient Inductive-Inductive Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE homotopy type theory; inductive-inductive types; higher inductive types;
   quotient inductive types; logical relations; category with families;
   generalised algebraic theory
AB Quotient inductive-inductive types (QIITs) generalise inductive types in two ways: a QIIT can have more than one sort and the later sorts can be indexed over the previous ones. In addition, equality constructors are also allowed. We work in a setting with uniqueness of identity proofs, hence we use the term QIIT instead of higher inductive-inductive type. An example of a QIIT is the well-typed (intrinsic) syntax of type theory quotiented by conversion. In this paper first we specify finitary QIITs using a domain-specific type theory which we call the theory of signatures. The syntax of the theory of signatures is given by a QIIT as well. Then, using this syntax we show that all specified QIITs exist and they have a dependent elimination principle. We also show that algebras of a signature form a category with families (CwF) and use the internal language of this CwF to show that dependent elimination is equivalent to initiality.
C1 [Kaposi, Ambrus; Kovacs, Andras] Eotvos Lorand Univ, Dept Programming Languages & Compilers, Budapest, Hungary.
   [Altenkirch, Thorsten] Univ Nottingham, Sch Comp Sci, Nottingham, England.
C3 Eotvos Lorand University; University of Nottingham
RP Kaposi, A (corresponding author), Eotvos Lorand Univ, Dept Programming Languages & Compilers, Budapest, Hungary.
EM akaposi@inf.elte.hu; kovacsandras@inf.elte.hu;
   Thorsten.Altenkirch@nottingham.ac.uk
RI ; Kaposi, Ambrus/H-5385-2017
OI Kovacs, Andras/0000-0002-6375-9781; Kaposi, Ambrus/0000-0001-9897-8936
FU European Union; European Social Fund [EFOP-3.6.3-VEKOP-16-2017-00002];
   COST Action EUTypes [CA15123]; EPSRC [EP/M016994/1] Funding Source: UKRI
FX This work was supported by the European Union, co-financed by the
   European Social Fund (EFOP-3.6.3-VEKOP-16-2017-00002) and COST Action
   EUTypes CA15123.
CR Abbott M, 2005, THEOR COMPUT SCI, V342, P3, DOI 10.1016/j.tcs.2005.06.002
   Ahrens Benedikt, 2017, ARXIV170504296
   Altenkirch T, 2018, LECT NOTES COMPUT SC, V10803, P293, DOI 10.1007/978-3-319-89366-2_16
   Altenkirch T, 2016, ACM SIGPLAN NOTICES, V51, P18, DOI 10.1145/2914770.2837638
   Altenkirch T, 2009, IEEE S LOG, P277, DOI 10.1109/LICS.2009.33
   Atkey R, 2014, ACM SIGPLAN NOTICES, V49, P503, DOI 10.1145/2535838.2535852
   Awodey S, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P76, DOI 10.1145/3209108.3209130
   Basold H, 2017, J UNIVERS COMPUT SCI, V23, P63
   Basold H, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P327, DOI 10.1145/2933575.2934514
   Bernardy JP, 2012, J FUNCT PROGRAM, V22, P107, DOI 10.1017/S0956796812000056
   Capriotti P, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158132
   CARTMELL J, 1986, ANN PURE APPL LOGIC, V32, P209, DOI 10.1016/0168-0072(86)90053-9
   Chapman J, 2010, ACM SIGPLAN NOTICES, V45, P3, DOI 10.1145/1932681.1863547
   Clairambault P, 2014, MATH STRUCT COMP SCI, V24, DOI 10.1017/S0960129513000881
   Cockx J, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P257, DOI 10.1145/2628136.2628139
   Cohen Cyril, 2016, ABS161102108 CORR
   Coquand T, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P255, DOI 10.1145/3209108.3209197
   Dybjer P, 1996, LECT NOTES COMPUT SC, V1158, P120
   Dybjer P., 1994, Formal Aspects of Computing, V6, P440, DOI 10.1007/BF01211308
   Dybjer P, 2000, J SYMBOLIC LOGIC, V65, P525, DOI 10.2307/2586554
   Dybjer P, 2018, ELECTRON NOTES THEOR, V336, P119, DOI 10.1016/j.entcs.2018.03.019
   Hofmann Martin, 1995, TYPES, V95, P153
   Hofmann Martin, 1995, EXTENSIONAL CONCEPTS
   Kaposi Ambrus, 2017, THESIS U NOTTINGHAM
   Kaposi Ambrus, 2018, 3 INT C FORM STRUCT, V108, P18, DOI [10.4230/LIPIcs.FSCD.2018.20, DOI 10.4230/LIPICS.FSCD.2018.20]
   Lumsdaine Peter LeFanu, 2017, ARXIV170507088
   Nordvall Forsberg F., 2013, Ph.D. thesis
   Oury Nicolas, 2005, EXTENSIONALITY CALCU, DOI [10.1007/11541868_18, DOI 10.1007/11541868_18]
   Paulin-Mohring C., 1993, Typed Lambda Calculi and Applications, V664, DOI [10.1007/BFb0037116., DOI 10.1007/BFB0037116]
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Sojakova K, 2015, ACM SIGPLAN NOTICES, V50, P31, DOI [10.1145/2676726.2676983, 10.1145/2775051.2676983]
   The Univalent Foundations Program, 2013, HOM TYP THEOR UN FDN HOM TYP THEOR UN FDN
   van der Weide Niels, 2016, THESIS RADBOUD U NIJ
   Winterhalter Theo, 2018, 24 INT C TYP PROOFS
NR 34
TC 23
Z9 24
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 2
DI 10.1145/3290315
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300002
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Miyazaki, Y
   Sekiyama, T
   Igarashi, A
AF Miyazaki, Yusuke
   Sekiyama, Taro
   Igarashi, Atsushi
TI Dynamic Type Inference for Gradual H ndley-Milner Typing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE gradual typing; dynamic type inference; gradual guarantee
AB Garcia and Cimini study a type inference problem for the ITGL, an implicitly and gradually typed language with let-polymorphism, and develop a sound and complete inference algorithm for it. Soundness and completeness mean that, if the algorithm succeeds, the input term can be translated to a well-typed term of an explicitly typed blame calculus by cast insertion and vice versa. However, in general, there are many possible translations depending on how type variables that were left undecided by static type inference are instantiated with concrete static types. Worse, the translated terms may behave differently-some evaluate to values but others raise blame.
   In this paper, we propose and formalize a new blame calculus lambda(DTI)(B) that avoids such divergence as an intermediate language for the ITGL. A main idea is to allow a term to contain type variables (that have not been instantiated during static type inference) and defer instantiation of these type variables to run time. We introduce dynamic type inference (DTI) into the semantics of lambda(DTI)(B) so that type variables are instantiated along reduction. The DTI-based semantics not only avoids the divergence described above but also is sound and complete with respect to the semantics of fully instantiated terms in the following sense: if the evaluation of a term succeeds (i.e., terminates with a value) in the DTI-based semantics, then there is a fully instantiated version of the term that also succeeds in the explicitly typed blame calculus and vice versa.
   Finally, we prove the gradual guarantee, which is an important correctness criterion of a gradually typed language, for the ITGL.
C1 [Miyazaki, Yusuke; Igarashi, Atsushi] Kyoto Univ, Grad Sch Informat, Kyoto, Japan.
   [Sekiyama, Taro] Natl Inst Informat, Tokyo, Japan.
C3 Kyoto University; Research Organization of Information & Systems (ROIS);
   National Institute of Informatics (NII) - Japan
RP Miyazaki, Y (corresponding author), Kyoto Univ, Grad Sch Informat, Kyoto, Japan.
EM miyazaki@fos.kuis.kyoto-u.ac.jp; tsekiyama@acm.org;
   igarashi@kuis.kyoto-u.ac.jp
OI Igarashi, Atsushi/0000-0002-5143-9764; Miyazaki,
   Yusuke/0000-0003-3884-2636
FU JSPS KAKENHI [JP17H01723]; ERATO HASUO Metamathematics for Systems
   Design Project, JST [JPMJER1603]
FX We would like to thank anonymous reviewers from both PC and AEC for
   valuable comments and Yuu Igarashi for the fruitful discussions. This
   work was supported in part by the JSPS KAKENHI Grant Number JP17H01723
   (Igarashi) and ERATO HASUO Metamathematics for Systems Design Project
   (No. JPMJER1603), JST (Sekiyama).
CR ABADI M, 1991, ACM T PROGR LANG SYS, V13, P237, DOI 10.1145/103135.103138
   Ahmed A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110283
   Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   [Anonymous], 2015, LEIBNIZ INT P INFORM, DOI DOI 10.4230/LIPICS.SNAPL.2015.274
   Schwerter FB, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283, DOI 10.1145/2628136.2628149
   Bawden A., 1999, Proceedings of the 1999 ACM SIGPLAN. Workshop on Partial Evaluation and Semantics-Based Program Manipulation (PEPM'99), P4
   Bjorner Nikolaj Skallerud, 1994, ACM SIGPLAN WORKSHOP, P120
   BRACHA G, 1993, SIGPLAN NOTICES, V28, P215, DOI 10.1145/167962.165893
   BREAZUTANNEN V, 1991, INFORM COMPUT, V93, P172, DOI 10.1016/0890-5401(91)90055-7
   CARTWRIGHT R, 1991, SIGPLAN NOTICES, V26, P278, DOI 10.1145/113446.113469
   Cimini M, 2017, ACM SIGPLAN NOTICES, V52, P789, DOI 10.1145/3093333.3009863
   Cimini M, 2016, ACM SIGPLAN NOTICES, V51, P443, DOI 10.1145/2914770.2837632
   Davies R, 1996, IEEE S LOG, P184, DOI 10.1109/LICS.1996.561317
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Flanagan C, 1999, ACM T PROGR LANG SYS, V21, P370, DOI 10.1145/316686.316703
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia R, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2676726.2676992, 10.1145/2775051.2676992]
   Garrigue J, 2004, LECT NOTES COMPUT SC, V2998, P196
   Girard Jean-Yves, 1972, U PARIS 7 SUMMARY P, P63
   HARPER R, 1993, ACM T PROGR LANG SYS, V15, P211, DOI 10.1145/169701.169696
   Henglein F., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P192, DOI 10.1145/224164.224203
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Herman David., 2007, Proc. Symposium on Trends in Functional Programming, P1
   Igarashi Yuu, 2017, PROC ACM PROGRAM LAN, V40, DOI [10.1145/3110284, DOI 10.1145/3110284]
   Ina L, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P609
   Kim LS, 2006, ACM SIGPLAN NOTICES, V41, P257, DOI 10.1145/1111320.1111060
   Leroy X., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P220, DOI 10.1145/158511.158632
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Ningning Xie, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P3, DOI 10.1007/978-3-319-89884-1_1
   Odersky H., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P54, DOI 10.1145/237721.237729
   Quine Willard van Orman., 1981, Mathematical Logic
   Rastogi A, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P481
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Reynolds J. C., 1974, Programming Symposium, P408
   Schwerter FB, 2016, J FUNCT PROGRAM, V26, P1, DOI 10.1017/S0956796816000162
   Sergey I, 2012, LECT NOTES COMPUT SC, V7211, P579, DOI 10.1007/978-3-642-28869-2_29
   Shields M., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P289, DOI 10.1145/268946.268970
   Siek J.G., 2008, Proceedings of the 2008 symposium on Dynamic languages, P7, DOI DOI 10.1145/1408681.1408688
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   Taha W, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640128.604134
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   THATTE SR, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P367, DOI 10.1145/96709.96747
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tsukada T, 2010, LOG METH COMPUT SCI, V6, DOI 10.2168/LMCS-6(4:8)2010
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 53
TC 6
Z9 7
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 18
DI 10.1145/3290331
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300018
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Feser, J
   Dillig, I
   Solar-Lezama, A
AF Feser, Jack
   Dillig, Isil
   Solar-Lezama, Armando
TI Inductive Program Synthesis Guided by Observational Program Similarity
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; inverse csg; regular expression inference; distance
   metric
AB We present a new general-purpose synthesis technique for generating programs from input-output examples. Our method, called metric program synthesis, relaxes the observational equivalence idea (used widely in bottom-up enumerative synthesis) into a weaker notion of observational similarity, with the goal of reducing the search space that the synthesizer needs to explore. Our method clusters programs into equivalence classes based on an expert-provided distance metric and constructs a version space that compactly represents "approximately correct" programs. Then, given a "close enough" program sampled from this version space, our approach uses a distance-guided repair algorithm to find a program that exactly matches the given input-output examples. We have implemented our proposed metric program synthesis technique in a tool called SYMETRIC and evaluate it in three different domains considered in prior work. Our evaluation shows that SyMetric outperforms other domain-agnostic synthesizers that use observational equivalence and that it achieves results competitive with domain-specific synthesizers that are either designed for or trained on those domains.
C1 [Feser, Jack; Solar-Lezama, Armando] MIT, Cambridge, MA 02139 USA.
   [Dillig, Isil] Univ Texas Austin, Austin, TX USA.
C3 Massachusetts Institute of Technology (MIT); University of Texas System;
   University of Texas Austin
RP Feser, J (corresponding author), MIT, Cambridge, MA 02139 USA.
EM feser@csail.mit.edu; isil@cs.utexas.edu; asolar@mit.edu
OI Dillig, Isil/0000-0001-8006-1230
FU National Science Foundation [1918889]
FX This material is based upon work supported by the National Science
   Foundation under Grant No. 1918889. Any opinions, findings, and
   conclusions or recommendations expressed in this material are those of
   the author and do not necessarily reflect the views of the National
   Science Foundation.
CR Achiam OJ, 2023, Arxiv, DOI [arXiv:2303.08774, DOI 10.48550/ARXIV.2303.08774]
   Alayrac Jean-Baptiste, 2022, Flamingo: a Visual Language Model for Few-Shot Learning. In Advances in Neural Information Processing Systems, V35, P23716
   Albarghouthi Aws, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P934, DOI 10.1007/978-3-642-39799-8_67
   [Anonymous], 2019, Advances in Neural Information Processing Systems
   Burke EK, 2004, IEEE T EVOLUT COMPUT, V8, P47, DOI 10.1109/TEVC.2003.819263
   Cerny P., 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P149
   Chen QC, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P328, DOI 10.1145/3453483.3454047
   Chen QC, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P487, DOI 10.1145/3385412.3385988
   Chen X, 2019, PROC INT CONF PARAL, DOI 10.1145/3337821.3337838
   Ciaccia P, 1997, PROCEEDINGS OF THE TWENTY-THIRD INTERNATIONAL CONFERENCE ON VERY LARGE DATABASES, P426
   Collet Pierre, 2006, Proceedings. Lecture Notes in Computer Science, V3905, DOI [10.1007/11729976, DOI 10.1007/11729976]
   Devlin J, 2017, PR MACH LEARN RES, V70
   Du T, 2018, ACM T GRAPHIC, V37, DOI 10.1145/3272127.3275006
   Ellis K, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P835, DOI 10.1145/3453483.3454080
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feser John, 2023, Zenodo, DOI 10.5281/ZENODO.8200210
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Glover F, 1998, Handbook of combinatorial optimization, P2093, DOI [DOI 10.1007/978-1-4613-0303-9_33, DOI 10.1007/978-1-4613-0303-933]
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Handa S, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P87, DOI 10.1145/3368089.3409732
   Helmuth T, 2015, IEEE T EVOLUT COMPUT, V19, P630, DOI 10.1109/TEVC.2014.2362729
   Jones RK, 2021, ACM T GRAPHIC, V40, DOI 10.1145/3450626.3459821
   La Cava W, 2016, GECCO'16: PROCEEDINGS OF THE 2016 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P741, DOI 10.1145/2908812.2908898
   Lau T, 2003, MACH LEARN, V53, P111, DOI 10.1023/A:1025671410623
   Lee M, 2017, ACM SIGPLAN NOTICES, V52, P70, DOI [10.1145/3093335.2993244, 10.1145/2993236.2993244]
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   Miltner A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498682
   Moraglio Alberto, 2012, Parallel Problem Solving from Nature - PPSN XII. Proceedings of the 12th International Conference, P21, DOI 10.1007/978-3-642-32937-1_3
   Nandi C, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236794
   Nandi C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P31, DOI 10.1145/3385412.3386012
   Nowozin Sebastian, 2017, INT C LEARN REPR
   Nye Maxwell I., 2021, 9 INT C LEARN REPR I
   OpenAI, 2022, Technical Report
   Pan R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360565
   Pharr Matt., 2012, INNOVATIVE PARALLEL, P1
   Raychev V, 2016, ACM SIGPLAN NOTICES, V51, P761, DOI 10.1145/2914770.2837671
   Rebele T, 2018, LECT NOTES ARTIF INT, V10938, P67, DOI 10.1007/978-3-319-93037-4_6
   Santolucito Mark, 2018, P 6 ACM SIGPLAN INT, P18, DOI [10.1145/3242903.3242906, DOI 10.1145/3242903.3242906]
   Schkufza E, 2014, ACM SIGPLAN NOTICES, V49, P53, DOI [10.1145/2666356.2594302, 10.1145/2594291.2594302]
   Schkufza E, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI 10.1145/2499368.2451150
   SHAPIRO V, 1991, COMPUT AIDED DESIGN, V23, P4, DOI 10.1016/0010-4485(91)90077-A
   Sharma G, 2018, PROC CVPR IEEE, P5515, DOI 10.1109/CVPR.2018.00578
   Si C., 2023, 11 INT C LEARN REPR
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Tian Yonglong, 2019, International Conference on Learning Representations (ICLR)
   Udupa A, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2499370.2462174
   Vijayakumar AK, 2018, AAAI CONF ARTIF INTE, P7371
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
   Wang XY, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133886
   Willis KDD, 2021, ACM T GRAPHIC, V40, DOI 10.1145/3450626.3459818
NR 52
TC 0
Z9 0
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 254
DI 10.1145/3622830
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100034
OA gold
DA 2024-07-18
ER

PT J
AU Porncharoenwase, S
   Pombrio, J
   Torlak, E
AF Porncharoenwase, Sorawee
   Pombrio, Justin
   Torlak, Emina
TI A Pretty Expressive Printer
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE pretty printing
AB Pretty printers make trade-offs between the expressiveness of their pretty printing language, the optimality objective that they minimize when choosing between different ways to lay out a document, and the performance of their algorithm. This paper presents a new pretty printer, Pi(e) , that is strictly more expressive than all pretty printers in the literature and provably minimizes an optimality objective. Furthermore, the time complexity of Pi(e) is better than many existing pretty printers. When choosing among different ways to lay out a document, Pi(e) consults a user-supplied cost factory, which determines the optimality objective, giving Pi(e) a unique degree of flexibility. We use the Lean theorem prover to verify the correctness (validity and optimality) of Pi(e), and implement Pi(e) concretely as a pretty printer that we call PRETTYEXPRESSIVE. To evaluate our pretty printer against others, we develop a formal framework for reasoning about the expressiveness of pretty printing languages, and survey pretty printers in the literature, comparing their expressiveness, optimality, worst-case time complexity, and practical running time. Our evaluation shows that PRETTYEXPRESSIVE is efficient and effective at producing optimal layouts. PRETTYEXPRESSIVE has also seen real-world adoption: it serves as a foundation of a code formatter for Racket.
C1 [Porncharoenwase, Sorawee; Torlak, Emina] Univ Washington, Paul G Allen Sch Comp Sci & Engn, Seattle, WA 98195 USA.
C3 University of Washington; University of Washington Seattle
RP Porncharoenwase, S (corresponding author), Univ Washington, Paul G Allen Sch Comp Sci & Engn, Seattle, WA 98195 USA.
EM sorawee@cs.washington.edu; jpombrio@cs.brown.edu;
   emina@cs.washington.edu
OI Porncharoenwase, Sorawee/0000-0003-3900-5602
FU National Science Foundation [CF-1651225, CCF-1836724, CNS-1844807]
FX We are thankful to the anonymous reviewers and the anonymous artifact
   reviewers for their very helpful feedback. This work is supported by the
   National Science Foundation under Grant Nos. CF-1651225, CCF-1836724,
   CNS-1844807, and by a gift from the VMware University Research Fund.
CR Alcocer Pablo R Azero, 1998, Optimal pretty-printing combinators
   Bernardy JP, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110250
   Bernardy Jean-Philippe, 2017, Disjunctionless
   Bernardy Jean-Philippe., 2017, prettiest
   Chitil O, 2005, ACM T PROGR LANG SYS, V27, P163, DOI 10.1145/1053468.1053473
   Coutaz Joelle, 1984, The box, a layout abstraction for user interface toolkits, DOI DOI 10.1184/R1/6610382.V1
   Daan Leijen, 2000, wl-pprint: The Wadler/Leijen Pretty Printer
   de Jonge M, 2002, PROC IEEE INT CONF S, P550, DOI 10.1109/ICSM.2002.1167816
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Moura L, 2021, LECT NOTES ARTIF INT, V12699, P625, DOI 10.1007/978-3-030-79876-5_37
   ESLint, 2014, Change no-comma-dangle to comma-dangle
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   Felleisen M, 2018, COMMUN ACM, V61, P62, DOI 10.1145/3127323
   Hughes John, 1995, LNCS, V925, P53
   Kiselyov Oleg, 2012, Programming Languages and Systems, P190
   Oppen D. C., 1980, ACM Transactions on Programming Languages and Systems, V2, P465, DOI 10.1145/357114.357115
   OWICKI S, 1976, COMMUN ACM, V19, P279, DOI 10.1145/360051.360224
   Peyton-Jones Simon, 1997, A pretty printer library in Haskell
   Podkopaev A, 2015, LECT NOTES COMPUT SC, V8974, P257, DOI 10.1007/978-3-662-46823-4_21
   Porncharoenwase S, 2023, Arxiv, DOI arXiv:2310.01530
   Porncharoenwase S, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498709
   Porncharoenwase Sorawee, 2023, Artifact for A Pretty Expressive Printer, DOI DOI 10.5281/ZENODO.8332960
   Prettier, 2016, Technical Details
   Swierstra SD, 1999, LECT NOTES COMPUT SC, V1608, P150
   The Python Language Reference, 2010, Lexical analysis
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Wadler Philip, 2003, The Fun of Programming Cornerstones of Computing, P223
   Yelland Phillip, 2015, rfmt: A code formatter for R
   Yelland Phillip., 2016, A New Approach to Optimal Code Formatting
NR 29
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 261
DI 10.1145/3622837
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100041
OA gold
DA 2024-07-18
ER

PT J
AU Fiala, J
   Itzhaky, S
   Müller, P
   Polikarpova, N
   Sergey, I
AF Fiala, Jonas
   Itzhaky, Shachar
   Muller, Peter
   Polikarpova, Nadia
   Sergey, Ilya
TI Leveraging Rust Types for Program Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; program logic; Rust; type systems
AB The Rust type system guarantees memory safety and data-race freedom. However, to satisfy Rust's type rules, many familiar implementation patterns must be adapted substantially. These necessary adaptations complicate programming and might hinder language adoption. In this paper, we demonstrate that, in contrast to manual programming, automatic synthesis is not complicated by Rust's type system, but rather benefits in two major ways. First, a Rust synthesizer can get away with significantly simpler specifications. While in more traditional imperative languages, synthesizers often require lengthy annotations in a complex logic to describe the shape of data structures, aliasing, and potential side effects, in Rust, all this information can be inferred from the types, letting the user focus on specifying functional properties using a slight extension of Rust expressions. Second, the Rust type system reduces the search space for synthesis, which improves performance. In this work, we present the first approach to automatically synthesizing correct-by-construction programs in safe Rust. The key ingredient of our synthesis procedure is Synthetic Ownership Logic, a new program logic for deriving programs that are guaranteed to satisfy both a user-provided functional specification and, importantly, Rust's intricate type system. We implement this logic in a new tool called RusSOL. Our evaluation shows the effectiveness of RusSOL, both in terms of annotation burden and performance, in synthesizing provably correct solutions to common problems faced by new Rust developers.
C1 [Fiala, Jonas; Muller, Peter] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
   [Itzhaky, Shachar] Technion, Haifa, Israel.
   [Polikarpova, Nadia] Univ Calif San Diego, San Diego, CA USA.
   [Sergey, Ilya] Natl Univ Singapore, Singapore, Singapore.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; Technion
   Israel Institute of Technology; University of California System;
   University of California San Diego; National University of Singapore
RP Fiala, J (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
EM jonas.fiala@inf.ethz.ch; shachari@cs.technion.ac.il;
   peter.mueller@inf.ethz.ch; nadia.polikarpova@ucsd.edu; ilya@nus.edu.sg
OI Sergey, Ilya/0000-0003-4250-5392; Fiala, Jonas/0009-0001-2121-7044
FU National Science Foundation [1911149]; Singapore MoE Tier 3 grant
   "Automated Program Repair" [MOE-MOET32021-0001]
FX We thank the anonymous PLDI'23 reviewers for their insightful comments.
   This work has been supported by the National Science Foundation under
   Grant No. 1911149, and by a Singapore MoE Tier 3 grant "Automated
   Program Repair", MOE-MOET32021-0001.
CR Abadi M., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P165, DOI 10.1109/LICS.1988.5115
   Astrauskas V, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360573
   Beingessner Aria, 2015, LEARNING RUST ENTIRE
   Boyland J., 2013, LNCS, V7850, P270, DOI [DOI 10.1007/978-3-642-36946-910, 10.1007/978-3-642-36946-9_10, DOI 10.1007/978-3-642-36946-9_10]
   Costea A, 2020, LECT NOTES COMPUT SC, V12075, P141, DOI 10.1007/978-3-030-44914-8_6
   Denis Xavier, 2021, RR9448
   Fiala Jonas, 2023, REPROD PACKAGE ARTIC, DOI [10.5281/zenodo.7811786, DOI 10.5281/ZENODO.7811786]
   Ho S, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547647
   Itzhaky S, 2021, LECT NOTES COMPUT SC, V12759, P110, DOI 10.1007/978-3-030-81685-8_5
   Itzhaky S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P944, DOI 10.1145/3453483.3454087
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371109
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Kneuss E, 2013, ACM SIGPLAN NOTICES, V48, P407, DOI [10.1145/2509136.2509555, 10.1145/2544173.2509555]
   Lattuada A, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586037
   Lehmann Nico, 2023, PROC ACM PROGRAM LAN, V7
   Manna Z., 1980, ACM Transactions on Programming Languages and Systems, V2, P90, DOI 10.1145/357084.357090
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Matsushita Y, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P841, DOI 10.1145/3519939.3523704
   Matsushita Y, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3462205
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   Polikarpova N, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290385
   Smans J, 2010, LECT NOTES COMPUT SC, V6117, P170
   Takashima Y, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P899, DOI 10.1145/3453483.3454084
   The Rust Team, 2017, The Rust programming language.
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Weiss A, 2021, Arxiv, DOI arXiv:1903.00982
   Wolff F, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485522
NR 28
TC 1
Z9 1
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 164
DI 10.1145/3591278
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900060
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Guria, SN
   Foster, JS
   Van Horn, D
AF Guria, Sankha Narayan
   Foster, Jeffrey S.
   Van Horn, David
TI Absynthe: Abstract Interpretation-Guided Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; abstract interpretation
AB Synthesis tools have seen significant success in recent times. However, past approaches often require a complete and accurate embedding of the source language in the logic of the underlying solver, an approach difficult for industrial-grade languages. Other approaches couple the semantics of the source language with purpose-built synthesizers, necessarily tying the synthesis engine to a particular language model. In this paper, we propose Absynthe, an alternative approach based on user-defined abstract semantics that aims to be both lightweight and language agnostic, yet effective in guiding the search for programs. A synthesis goal in Absynthe is specified as an abstract specification in a lightweight user-defined abstract domain and concrete test cases. The synthesis engine is parameterized by the abstract semantics and independent of the source language. Absynthe validates candidate programs against test cases using the actual concrete language implementation to ensure correctness. We formalize the synthesis rules for Absynthe and describe how the key ideas are scaled-up in our implementation in Ruby. We evaluated Absynthe on SyGuS strings benchmark and found it competitive with other enumerative search solvers. Moreover, Absynthe's ability to combine abstract domains allows the user to move along a cost spectrum, i.e., expressive domains prune more programs but require more time. Finally, to verify Absynthe can act as a general purpose synthesis tool, we use Absynthe to synthesize Pandas data frame manipulating programs in Python using simple abstractions like types and column labels of a data frame. Absynthe reaches parity with AutoPandas, a deep learning based tool for the same benchmark suite. In summary, our results demonstrate Absynthe is a promising step forward towards a general-purpose approach to synthesis that may broaden the applicability of synthesis to more full-featured languages.
C1 [Guria, Sankha Narayan; Van Horn, David] Univ Maryland, College Pk, MD 20742 USA.
   [Foster, Jeffrey S.] Tufts Univ, Medford, MA 20742 USA.
C3 University System of Maryland; University of Maryland College Park;
   Tufts University
RP Guria, SN (corresponding author), Univ Maryland, College Pk, MD 20742 USA.
EM sankha@cs.umd.edu; jfoster@cs.tufts.edu; dvanhorn@cs.umd.edu
RI Guria, Sankha Narayan/JGD-4056-2023
OI Guria, Sankha Narayan/0000-0002-5155-0964; Foster,
   Jeffrey/0000-0001-8043-1166
FU National Science Foundation [1900563, 1846350]
FX Thanks to the anonymous reviewers for their helpful comments. This
   research was supported in part by National Science Foundation awards
   #1900563 and #1846350.
CR Alur R, 2017, ELECTRON P THEOR COM, P97, DOI 10.4204/EPTCS.260.9
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Anderson Greg, 2020, ADV NEURAL INFORM PR, V33
   Barke S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428295
   Bavishi R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360594
   Cousot P, 2005, LECT NOTES COMPUT SC, V3444, P21
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Foster Jeffrey, 2020, RDL TYPES TYPE CHECK
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Guria Sankha Narayan, 2023, Zenodo, DOI 10.5281/ZENODO.7824175
   Guria SN, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P15, DOI 10.1145/3519939.3523725
   Guria SN, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P344, DOI 10.1145/3453483.3454048
   Huang KJ, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1159, DOI 10.1145/3385412.3386027
   Kim J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434311
   Komuravelli A, 2016, FORM METHOD SYST DES, V48, P175, DOI 10.1007/s10703-016-0249-4
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   Nowozin S., 2017, 5 INT C LEARNING REP
   Oh H, 2012, ACM SIGPLAN NOTICES, V47, P229, DOI 10.1145/2345156.2254092
   Ortega A, 2007, IEEE T EVOLUT COMPUT, V11, P77, DOI 10.1109/TEVC.2006.880327
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Phothilimthana PM, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P65, DOI 10.1145/3297858.3304059
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Raghothaman M, 2016, Arxiv, DOI arXiv:1405.5590
   Reback Jeff, 2022, Zenodo, DOI 10.5281/ZENODO.7037953
   Reynolds A, 2017, ELECTRON P THEOR COM, P81, DOI 10.4204/EPTCS.260.8
   Reynolds A, 2015, LECT NOTES COMPUT SC, V9207, P198, DOI 10.1007/978-3-319-21668-3_12
   So S, 2017, LECT NOTES COMPUT SC, V10422, P364, DOI 10.1007/978-3-319-66706-5_18
   Solar-Lezama Armando, 2013, International Journal on Software Tools for Technology Transfer, V15, P475, DOI 10.1007/s10009-012-0249-7
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Vechev M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P327, DOI 10.1145/1706299.1706338
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
NR 37
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 171
DI 10.1145/3591285
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900067
OA gold, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Jin, E
   Amin, N
   Zhang, YZ
AF Jin, Ende
   Amin, Nada
   Zhang, Yizhou
TI Extensible Metatheory Mechanization via Family Polymorphism
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Proof engineering; interactive theorem proving; expression problem;
   inductive types; extensible frameworks; modules; mixins; reuse; late
   binding; dependent type theory; Coq
AB With the growing practice of mechanizing language metatheories, it has become ever more pressing that interactive theorem provers make it easy to write reusable, extensible code and proofs. This paper presents a novel language design geared towards extensible metatheory mechanization in a proof assistant. The new design achieves reuse and extensibility via a form of family polymorphism, an object-oriented idea, that allows code and proofs to be polymorphic to their enclosing families. Our development addresses technical challenges that arise from the underlying language of a proof assistant being simultaneously functional, dependently typed, a logic, and an interactive tool. Our results include (1) a prototypical implementation of the language design as a Coq plugin, (2) a dependent type theory capturing the essence of the language mechanism and its consistency and canonicity results, and (3) case studies showing how the new expressiveness naturally addresses real programming challenges in metatheory mechanization.
C1 [Jin, Ende; Zhang, Yizhou] Univ Waterloo, Cheriton Sch Comp Sci, Waterloo, ON, Canada.
   [Amin, Nada] Harvard Univ, Paulson Sch Engn & Appl Sci, Cambridge, MA USA.
C3 University of Waterloo; Harvard University
RP Jin, E (corresponding author), Univ Waterloo, Cheriton Sch Comp Sci, Waterloo, ON, Canada.
EM ende.jin@uwaterloo.ca; namin@seas.harvard.edu; yizhou@uwaterloo.ca
OI Amin, Nada/0000-0002-0830-7248; Zhang, Yizhou/0000-0002-8206-4694
CR ABADI M, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P31, DOI 10.1145/96709.96712
   Altenkirch T, 2016, ACM SIGPLAN NOTICES, V51, P18, DOI 10.1145/2914770.2837638
   Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7800226
   [Anonymous], 1972, INDAGATIONES MATHEMA, DOI DOI 10.1016/1385-7258(72)90034-0
   Aracic I, 2006, LECT NOTES COMPUT SC, V3880, P135
   Aspinall D, 1995, LECT NOTES COMPUT SC, V933, P1, DOI 10.1007/BFb0022243
   Batory D, 2011, GPCE 11: PROCEEDINGS OF THE TENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P13
   Blume M, 2006, ACM SIGPLAN NOTICES, V41, P239, DOI 10.1145/1160074.1159836
   Boite O, 2004, LECT NOTES COMPUT SC, V3223, P50
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Clarke Dave, 2007, P 6 INT C ASP OR SOF, P121
   COOK WR, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P125, DOI 10.1145/96709.96721
   coq, The Coq Proof Assistant
   Coquand T, 2019, THEOR COMPUT SCI, V777, P184, DOI 10.1016/j.tcs.2019.01.015
   Coquand Thierry, 2013, PRESHEAF MODEL TYPE
   Cousot P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P316, DOI 10.1145/263699.263744
   Delaware B, 2013, ACM SIGPLAN NOTICES, V48, P319, DOI [10.1145/2500365.2500587, 10.1145/2544174.2500587]
   Delaware B, 2013, ACM SIGPLAN NOTICES, V48, P207, DOI 10.1145/2480359.2429094
   Delaware B, 2011, ACM SIGPLAN NOTICES, V46, P595, DOI 10.1145/2076021.2048113
   Ernst E, 2006, ACM SIGPLAN NOTICES, V41, P270, DOI 10.1145/1111320.1111062
   Ernst E., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P303
   Felleisen Matthias, 1986, CONTROL OPERATORS SE
   Flatt Matthew, 1998, POPL, P171, DOI [10.1145/268946.268961, DOI 10.1145/268946.268961]
   Forster Y, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P186, DOI 10.1145/3372885.3373817
   Hugunin Jasper, 2020, 26 INT C TYPES PROOF, V8, P1, DOI [10.4 230/LIPIcs.TYPES. 2020.8, DOI 10.4230/LIPICS.TYPES.2020.8]
   Igarashi Atsushi, 2007, ACM SIGPLAN C OBJECT, DOI [10.1145/1297027.1297037, DOI 10.1145/1297027.1297037]
   Jin Ende, 2023, CS202301 U WAT SCH C
   Johnsen EB, 2004, LECT NOTES COMPUT SC, V3223, P152
   Kaposi Ambrus, 2019, LEIBNIZ INT P INFORM, V131, DOI [DOI 10.4230/LIPICS.FSCD.2019.25, 10.4230/LIPIcs.FSCD, DOI 10.4230/LIPICS.FSCD]
   Keuchel Steven, 2013, 9 ACM SIGPLAN WORKSH
   Li Y, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547632
   Luo Zhaohui., 2012, NOTES UNIVERSES TYPE
   MADSEN OL, 1989, SIGPLAN NOTICES, V24, P397, DOI 10.1145/74878.74919
   Martin-Lof P., 1980, An Intuitionistic Type Theory: Notes by Giovanni Sambin of a Series of Lectures Given in Padua
   Martin-Lof Per, 1982, LOGIC METHODOLOGY PH, V104, DOI [10.1016/S0049-237X(09)70189-2, DOI 10.1016/S0049-237X(09)70189-2]
   Mulhern Anne., 2006, 1 INFORMAL ACM SIGPL
   Nystrom N, 2004, ACM SIGPLAN NOTICES, V39, P99, DOI 10.1145/1035292.1028986
   Odersky M, 2005, ACM SIGPLAN NOTICES, V40, P41, DOI 10.1145/1103845.1094815
   Pierce Benjamin C., 2022, SOFTWARE FDN, V2
   Reynolds John C., 1975, NEW DIRECTIONS ALGOR, DOI [10.1007/978-1-4612-6315-9_22, DOI 10.1007/978-1-4612-6315-9_22]
   Ringer T, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P112, DOI 10.1145/3453483.3454033
   Rossberg A, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2450136.2450137
   Schwaab Christopher, 2013, P 7 WORKSH PROGR LAN, P3, DOI [10.1145/2428116.2428120, DOI 10.1145/2428116.2428120]
   Sterling J, 2019, Arxiv, DOI arXiv:1902.08848
   Stone C. A., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P214, DOI 10.1145/325694.325724
   Stone Christopher A., 2000, THESIS CARNEGIE MELL
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Thorup KK, 1997, LECT NOTES COMPUT SC, V1241, P444
   Program TUF, 2013, Arxiv, DOI arXiv:1308.0729
   Van der Rest C, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563355
   Wadler Philip, 1998, The Expression Problem
   Zhang YZ, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133894
NR 52
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 172
DI 10.1145/3591286
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900068
OA gold
DA 2024-07-18
ER

PT J
AU Lee, SH
   Cho, M
   Margalit, R
   Hur, CK
   Lahav, O
AF Lee, Sung-Hwan
   Cho, Minki
   Margalit, Roy
   Hur, Chung-Kil
   Lahav, Ori
TI PuttingWeak Memory in Order via a Promising Intermediate Representation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Relaxed Memory Concurrency; Operational Semantics; Compiler
   Optimizations; Intermediate Representation
AB We investigate the problem of developing an "in-order" shared-memory concurrency model for languages like C and C++, which executes instructions following their program order, and is thus more amenable to reasoning and verification compared to recent complex proposals with out-of-order execution. We demonstrate that it is possible to fully support non-atomic accesses in an in-order model in a way that validates all compiler optimizations that are performed in single-threaded code (including irrelevant load introduction). The key to doing so is to utilize the distinction between a source model (with catch-fire semantics) and an intermediate representation (IR) model (with undefined value for racy reads) and formally establish the soundness of mapping from source to IR. As for relaxed atomic accesses, an in-order model must forbid load-store reordering. We discuss the rather limited performance impact of this fact and present a pragmatic approach to this problem, which, in the long term, requires a new kind of hardware store instructions for implementing relaxed stores. The source and IR semantics proposed in this paper are based on recent versions of the promising semantics, and the correctness proofs of the mappings from the source to the IR and from the IR to Armv8 are mechanized in Coq. This work is the first to formally relate an in-order source model and an out-of-order IR model with the goal of having an in-order source semantics without any performance overhead for non-atomics.
C1 [Lee, Sung-Hwan; Cho, Minki; Hur, Chung-Kil] Seoul Natl Univ, Seoul, South Korea.
   [Margalit, Roy; Lahav, Ori] Tel Aviv Univ, Tel Aviv, Israel.
C3 Seoul National University (SNU); Tel Aviv University
RP Lee, SH (corresponding author), Seoul Natl Univ, Seoul, South Korea.
EM sunghwan.lee@sf.snu.ac.kr; minki.cho@sf.snu.ac.kr;
   roy.margalit@cs.tau.ac.il; gil.hur@sf.snu.ac.kr; orilahav@tau.ac.il
OI Lahav, Ori/0000-0003-4305-6998; Hur, Chung-Kil/0000-0002-1656-0913; Cho,
   Minki/0000-0002-6684-0921
FU Samsung Research Funding Center of Samsung Electronics [SRFC-IT2102-03];
   European Research Council (ERC) under the European Union [851811];
   Israel Science Foundation [1566/18, 814/22]
FX We thank the anonymous reviewers for their valuable feedback. Chung-Kil
   Hur is the corresponding author. Minki Cho, Sung-Hwan Lee, and Chung-Kil
   Hur were supported by Samsung Research Funding Center of Samsung
   Electronics under Project Number SRFC-IT2102-03. Roy Margalit and Ori
   Lahav were supported by the European Research Council (ERC) under the
   European Union's Horizon 2020 research and innovation programme (grant
   agreement no. 851811) and the Israel Science Foundation (grant numbers
   1566/18 and 814/22).
CR Abdulla PA, 2021, LECT NOTES COMPUT SC, V12648, P1, DOI 10.1007/978-3-030-72019-3_1
   ADVE SV, 1990, 17TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P2, DOI 10.1109/ISCA.1990.134502
   Alglave J, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3458926
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Batty M, 2015, LECT NOTES COMPUT SC, V9032, P283, DOI 10.1007/978-3-662-46669-8_12
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Boehm H.-J., 2014, MSPC, p7:1, DOI DOI 10.1145/2618128.2618134
   Boehm HJ, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P68, DOI 10.1145/1375581.1375591
   Chakraborty S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290383
   Chakraborty S, 2017, INT SYM CODE GENER, P100, DOI 10.1109/CGO.2017.7863732
   Cho M, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P213, DOI 10.1145/3519939.3523718
   Cho M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P867, DOI 10.1145/3453483.3454082
   Dang HH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371102
   Dodds Mike, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P1027, DOI 10.1007/978-3-319-89884-1_36
   Doherty S, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P355, DOI 10.1145/3293883.3295702
   Doko M, 2017, LECT NOTES COMPUT SC, V10201, P448, DOI 10.1007/978-3-662-54434-1_17
   Dang HH, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P792, DOI 10.1145/3519939.3523451
   Jagadeesan R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428262
   Jeffrey A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498716
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Lahav O, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P126, DOI 10.1145/3314221.3314604
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lee SH, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P362, DOI 10.1145/3385412.3386010
   Lee Sung-Hwan, 2023, COQ DEV SUPPLEMENTAR
   Liu L, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3462206
   Margalit R, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434285
   Marino D, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P199
   Moiseenko Evgenii, 2020, ECOOP SCHLOSS DAGSTU, V5, P1, DOI [10.4230/LIPIcs.ECOOP.2020.5, DOI 10.4230/LIPICS.ECOOP.2020.5]
   Ou PZ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276506
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Paviotti M, 2020, LECT NOTES COMPUT SC, V12075, P599, DOI 10.1007/978-3-030-44914-8_22
   Podkopaev A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290382
   Pulte C, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1, DOI 10.1145/3314221.3314624
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290381
   Sarkar S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P175
   Sinclair MD, 2017, 44TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA 2017), P161, DOI [10.1145/3079856.3080206, 10.1145/3140659.3080206]
   Singh AK, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571246
   Svendsen Kasper, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P357, DOI 10.1007/978-3-319-89884-1_13
   Vafeiadis V, 2015, ACM SIGPLAN NOTICES, V50, P209, DOI [10.1145/2676726.2676995, 10.1145/2775051.2676995]
   Weiyu Luo, 2021, ASPLOS 2021: Proceedings of the 26th International Conference on Architectural Support for Programming Languages and Operating Systems, P630, DOI 10.1145/3445814.3446711
   Zha JP, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P903, DOI 10.1145/3519939.3523734
NR 44
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 183
DI 10.1145/3591297
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900079
OA gold
DA 2024-07-18
ER

PT J
AU Antonopoulos, T
   Koskinen, E
   Le, TC
   Nagasamudram, R
   Naumann, DA
   Ngo, M
AF Antonopoulos, Timos
   Koskinen, Eric
   Ton Chanh Le
   Nagasamudram, Ramana
   Naumann, David A.
   Minh Ngo
TI An Algebra of Alignment for Relational Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE relational verification; hyperproperties; program algebra; Kleene
   algebra; with tests
ID SECURE INFORMATION-FLOW; KLEENE ALGEBRA; EQUIVALENCE; SEPARATION
AB Relational verification encompasses information flow security, regression verification, translation validation for compilers, and more. Effective alignment of the programs and computations to be related facilitates use of simpler relational invariants and relational procedure specs, which in turn enables automation and modular reasoning. Alignment has been explored in terms of trace pairs, deductive rules of relational Hoare logics (RHL), and several forms of product automata. This article shows how a simple extension of Kleene Algebra with Tests (KAT), called BiKAT, subsumes prior formulations, including alignment witnesses for forall-exists properties, which brings to light new RHL-style rules for such properties. Alignments can be discovered algorithmically or devised manually but, in either case, their adequacy with respect to the original programs must be proved; an explicit algebra enables constructive proof by equational reasoning. Furthermore our approach inherits algorithmic benefits from existing KAT-based techniques and tools, which are applicable to a range of semantic models.
C1 [Antonopoulos, Timos] Yale Univ, New Haven, CT 06520 USA.
   [Koskinen, Eric; Ton Chanh Le; Nagasamudram, Ramana; Naumann, David A.; Minh Ngo] Stevens Inst Technol, Hoboken, NJ 07030 USA.
C3 Yale University; Stevens Institute of Technology
RP Antonopoulos, T (corresponding author), Yale Univ, New Haven, CT 06520 USA.
RI Le, Ton Chanh/AAB-4349-2021
OI Nagasamudram, Ramana/0000-0003-2779-2071; Naumann,
   David/0000-0002-7634-6150; Koskinen, Eric/0000-0001-7363-634X
FU Office of Naval Research [N00014-17-1-2787]; NSF [CCF-2106845,
   CCF-2131476, CNS-1718713]
FX The authors would like to thank Anindya Banerjee, Lennart Beringer and
   Michael Greenberg for helpful discussions and the anonymous reviewers
   for their valuable feedback. Authors Antonopoulos, Koskinen, Le, and
   Naumann were supported in part by the Office of Naval Research under
   Grant No. N00014-17-1-2787. Antonopoulos, Koskinen and Le were supported
   in part by NSF award CCF-2106845. Antonopoulos was supported in part by
   NSF award CCF-2131476. Naumann, Nagasamudram, and Ngo were supported in
   part by NSF award CNS-1718713.
CR Abadi Martin, 1988, THEOR COMPUT SCI
   Antonopoulos Timos, 2022, Zenodo, DOI 10.5281/ZENODO.7144067
   Antonopoulos T, 2022, Arxiv, DOI arXiv:2202.04278
   Antonopoulos T, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360604
   Apt Krzysztof R., 2009, VERIFICATION SEQUENT, V3, DOI DOI 10.1007/978-1-84882-745-5
   Badihi S, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P13, DOI 10.1145/3368089.3409757
   Banerjee A, 2022, Arxiv, DOI [arXiv:1910.14560, 10.48550/arXiv.1910.14560, DOI 10.48550/ARXIV.1910.14560]
   Banerjee Anindya., 2016, 36th IARCS Annual Conference on Foundations of Software Technology and Theoretical Computer Science, FSTTCS 2016, December 13-15, 2016, Chennai, India, p11:1
   Barthe G, 2004, P IEEE CSFW, P100, DOI 10.1109/CSFW.2004.1310735
   Barthe G, 2019, 2019 FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P170, DOI 10.23919/FMCAD.2019.8894277
   Barthe G, 2017, ACM SIGPLAN NOTICES, V52, P161, DOI 10.1145/3093333.3009896
   Barthe G, 2016, J LOG ALGEBR METHODS, V85, P847, DOI 10.1016/j.jlamp.2016.05.004
   Barthe G, 2011, MATH STRUCT COMP SCI, V21, P1207, DOI 10.1017/S0960129511000193
   Barthe Gilles, 2013, LOGICAL FDN COMPUTER, V7734, P29, DOI [10.1007/978--3-642--35722--0_3, DOI 10.1007/978--3-642--35722--0_3, DOI 10.1007/978-3-642-35722-03]
   Barthe Gilles, 2011, FORMAL METHODS
   Beckert Bernhard, 2018, Principled Software Development, P41, DOI [DOI 10.1007/978-3-319-98047-8_3, 10.1007/978-3-319-98047-8_3]
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Beringer Lennart., 2011, INTERACTIVE THEOREM, V6898
   Beutner R, 2022, LECT NOTES COMPUT SC, V13371, P341, DOI 10.1007/978-3-031-13185-1_17
   Braibant T, 2010, LECT NOTES COMPUT SC, V6172, P163, DOI 10.1007/978-3-642-14052-5_13
   Churchill B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1027, DOI 10.1145/3314221.3314596
   Clarkson B., 2014, INT C PRINC SEC TRUS, P265, DOI [10.1007/978-3-642-54792-8_15, DOI 10.1007/978-3-642-54792-8_15]
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   Clochard M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371070
   Cohen E, 2000, LECT NOTES COMPUT SC, V1837, P45
   D'Osualdo E, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563298
   de Roever Willem-Paul, 1998, Data Refinement Model-Oriented Proof methods and their Comparison
   de Roever Willem-Paul, 2001, Concurrency Verification: Introduction to Compositional and Noncompositional Proof Methods
   Doumane A, 2019, LECT NOTES COMPUT SC, V11425, P207, DOI 10.1007/978-3-030-17127-8_12
   Eilers Marco, 2018, EUROPEAN S PROGRAMMI
   Farzan A, 2019, LECT NOTES COMPUT SC, V11561, P200, DOI 10.1007/978-3-030-25540-4_11
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   FRANCEZ N, 1983, ACTA INFORM, V20, P329, DOI 10.1007/BF00264278
   Freyd P.J., 1990, Categories, Allegories
   Frumin D, 2021, Arxiv, DOI arXiv:2006.13635
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Gaher Lennard, 2022, PROC ACM PROGRAM LAN, V6
   Godlin B, 2008, ACTA INFORM, V45, P403, DOI 10.1007/s00236-008-0075-2
   Goyal M, 2021, Arxiv, DOI [arXiv:2109.01864, 10.48550/ARXIV.2109.01864, DOI 10.48550/ARXIV.2109.01864]
   Greenberg M, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P594, DOI 10.1145/3519939.3523722
   Hawblitzel Chris, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P282, DOI 10.1007/978-3-642-38574-2_20
   HOARE CAR, 1987, COMMUN ACM, V30, P672, DOI 10.1145/27651.27653
   Hoare T, 2016, J LOG ALGEBR METHODS, V85, P617, DOI 10.1016/j.jlamp.2015.09.012
   Höfner P, 2019, J LOG ALGEBR METHODS, V106, P198, DOI 10.1016/j.jlamp.2019.05.005
   Kovacs Mate, 2013, ACM COMPUTER COMMUNI
   Kozen D, 2004, SCI COMPUT PROGRAM, V51, P3, DOI 10.1016/j.scico.2003.09.004
   Kozen D, 1997, LECT NOTES COMPUT SC, V1258, P244
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Kozen Dexter, 2003, KLEENE ALGEBRA TESTS
   Kozen Dexter, 2000, ACM Trans. Comput. Log., V1, P60, DOI DOI 10.1145/343369.343378
   Lamport Leslie, 2021, IEEE COMPUTER SECURI, P1
   Maillard K, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371072
   Mamouras K, 2017, LECT NOTES COMPUT SC, V10203, P88, DOI 10.1007/978-3-662-54458-7_6
   Mordvinov D, 2019, 2019 FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P152, DOI [10.23919/fmcad.2019.8894274, 10.23919/FMCAD.2019.8894274]
   MORGAN C, 1988, INFORM PROCESS LETT, V29, P293, DOI 10.1016/0020-0190(88)90227-X
   Murray T, 2020, Arxiv, DOI [arXiv:2003.04791, DOI 10.48550/ARXIV.2003.04791]
   Nagaraj R, 2021, INDUSTRIALISATION FOR EMPLOYMENT AND GROWTH IN INDIA, P1, DOI 10.1109/LICS52264.2021.9470690
   Naumann David A., 2020, Leveraging Applications of Formal Methods, Verification and Validation. Engineering Principles. 9th International Symposium on Leveraging Applications of Formal Methods, ISoLA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12477), P93, DOI 10.1007/978-3-030-61470-6_7
   O'Hearn PW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371078
   Pick L, 2018, LECT NOTES COMPUT SC, V10981, P164, DOI 10.1007/978-3-319-96145-3_9
   Pous D, 2021, LECT NOTES COMPUT SC, V13027, P378, DOI 10.1007/978-3-030-88701-8_23
   Pous D, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2676726.2677007, 10.1145/2775051.2677007]
   Pous Damien., Relation algebra and kat in coq
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Shemer R, 2019, LECT NOTES COMPUT SC, V11561, P161, DOI 10.1007/978-3-030-25540-4_9
   Sousa M, 2016, ACM SIGPLAN NOTICES, V51, P57, DOI 10.1145/2908080.2908092
   Terauchi T, 2005, LECT NOTES COMPUT SC, V3672, P352
   Unno H, 2021, LECT NOTES COMPUT SC, V12759, P742, DOI 10.1007/978-3-030-81685-8_35
   Wagemaker J, 2019, LECT NOTES COMPUT SC, V11825, P385, DOI 10.1007/978-3-030-33636-3_14
   Yang H, 2007, THEOR COMPUT SCI, V375, P308, DOI 10.1016/j.tcs.2006.12.036
   Zhang C, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498690
NR 71
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571213
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500020
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Moine, A
   Charguéraud, A
   Pottier, F
AF Moine, Alexandre
   Chargueraud, Arthur
   Pottier, Francois
TI A High-Level Separation Logic for Heap Space under Garbage Collection
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE separation logic; tracing garbage collection; live data; program
   verification
ID MEMORY USAGE VERIFICATION; CHECKING
AB We present a Separation Logic with space credits for reasoning about heap space in a sequential call-byvalue _-calculus equipped with garbage collection and mutable state. A key challenge is to design sound, modular, lightweight mechanisms for establishing the unreachability of a block. Prior work in this area uses pointed-by assertions to keep track of the predecessors of every block, but is carried out in the setting of an assembly-like programming language. We take up the challenge in the setting of a high-level language, where a key problem is to identify and reason about the memory locations that the garbage collector considers as roots. For this purpose, we propose novel "stackable" assertions, which keep track of the existence of stack-to-heap pointers without explicitly recording their origin. Furthermore, we explain how to reason about closures-concrete heap-allocated data structures that implement the abstract concept of a first-class function. We demonstrate the expressiveness and tractability of our program logic via a range of examples, including recursive functions on linked lists, objects implemented using closures and mutable internal state, recursive functions in continuation-passing style, and three stack implementations that exhibit different space bounds. These last three examples illustrate reasoning about the reachability of the items stored in a container as well as amortized reasoning about space. All of our results are proved in Coq on top of Iris.
C1 [Moine, Alexandre; Chargueraud, Arthur; Pottier, Francois] INRIA, Paris, France.
   [Chargueraud, Arthur] Univ Strasbourg, CNRS, ICube, Strasbourg, France.
C3 Inria; Centre National de la Recherche Scientifique (CNRS); Universites
   de Strasbourg Etablissements Associes; Universite de Strasbourg
RP Moine, A (corresponding author), INRIA, Paris, France.
EM alexandre.moine@inria.fr; arthur.chargueraud@inria.fr;
   francois.pottier@inria.fr
RI Moine, Alexandre/HTQ-9914-2023
OI Moine, Alexandre/0000-0002-2169-1977; Pottier,
   Francois/0000-0002-4069-1235
CR Amadio RM, 2014, LECT NOTES COMPUT SC, V8552, P1, DOI 10.1007/978-3-319-12466-7_1
   [Anonymous], 1992, Compiling with Continuations
   Aspinall D, 2002, LECT NOTES COMPUT SC, V2305, P36
   Aspinall D, 2007, THEOR COMPUT SCI, V389, P411, DOI 10.1016/j.tcs.2007.09.003
   Atkey R, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:17)2011
   Besson F, 2019, J AUTOM REASONING, V63, P369, DOI 10.1007/s10817-018-9496-y
   Blizard W. D., 1990, Notre Dame Journal of Formal Logic, V31, P346, DOI 10.1305/ndjfl/1093635499
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Carbonneaux Q, 2014, ACM SIGPLAN NOTICES, V49, P270, DOI [10.1145/2594291.2594301, 10.1145/2666356.2594301]
   Carbonneaux Q, 2015, ACM SIGPLAN NOTICES, V50, P467, DOI [10.1145/2813885.2737955, 10.1145/2737924.2737955]
   Chargueraud Arthur, 2017, Journal of Automated Reasoning
   Chin WN, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P151
   Chin WN, 2005, LECT NOTES COMPUT SC, V3672, P70
   Clarke Dave, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P15, DOI 10.1007/978-3-642-36946-9_3
   Cook WR, 2009, ACM SIGPLAN NOTICES, V44, P557, DOI 10.1145/1639949.1640133
   Crary Karl., 2000, POPL 2000 P 27 ACM S, P184
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Filliatre Jean-Christophe, 2011, International Journal on Software Tools for Technology Transfer, V13, P397, DOI 10.1007/s10009-011-0211-0
   Gómez-Londoño A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428272
   Hailperin Theodore, 1986, BOOLES LOGIC PROBABI, V85, P135, DOI [10.1016/S0049-237X(08)70247-7, DOI 10.1016/S0049-237X(08)70247-7]
   Hallet Joseph J., 2005, FORMAL SEMANTICS WEA
   Haslbeck MPL, 2021, LECT NOTES COMPUT SC, V12648, P292, DOI 10.1007/978-3-030-72019-3_11
   Haslbeck MPL, 2018, LECT NOTES COMPUT SC, V10805, P155, DOI 10.1007/978-3-319-89960-2_9
   Hayes B., 1997, SIGPLAN Notices, V32, P176, DOI 10.1145/263700.263733
   He GH, 2009, LECT NOTES COMPUT SC, V5799, P166
   Hoffmann Jan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P781, DOI 10.1007/978-3-642-31424-7_64
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Hofman M., 2000, Nordic Journal of Computing, V7, P258
   Hofmann M, 2006, LECT NOTES COMPUT SC, V3924, P22
   Hofmann M, 2003, INFORM COMPUT, V183, P57, DOI 10.1016/S0890-5401(03)00009-9
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hofmann M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P464, DOI 10.1109/LICS.1999.782641
   Hofmann M, 2013, LECT NOTES COMPUT SC, V7792, P593, DOI 10.1007/978-3-642-37036-6_32
   Hofmann M, 2009, LECT NOTES COMPUT SC, V5771, P317, DOI 10.1007/978-3-642-04027-6_24
   Hur CK, 2011, IEEE S LOG, P247, DOI 10.1109/LICS.2011.46
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Kassios IT, 2013, LECT NOTES COMPUT SC, V7792, P149, DOI 10.1007/978-3-642-37036-6_10
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Leroy Xavier, 2021, COMPCERT C COMPILER
   LOEB D, 1992, ADV MATH, V91, P64, DOI 10.1016/0001-8708(92)90011-9
   Madiot JM, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498672
   Mével G, 2019, LECT NOTES COMPUT SC, V11423, P3, DOI 10.1007/978-3-030-17184-1_1
   Moine Alexandre, 2022, Zenodo, DOI 10.5281/ZENODO.7129301
   Moine Alexandre, 2022, HIGH LEVEL SEPARATIO
   Morrisett G., 1995, P 7 INT C FUNCT PROG, P66, DOI DOI 10.1145/224164.224182
   Mulder I, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P809, DOI 10.1145/3519939.3523432
   Niu Yue, 2018, LOGIC PROGRAMMING AR, V57, P543
   O'Hearn P, 2019, COMMUN ACM, V62, P86, DOI 10.1145/3211968
   OHearn Peter W., 2016, ACM SIGLOG NEWS, V3, P47, DOI DOI 10.1145/2984450.2984457
   Paraskevopoulou Z, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341687
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Reynolds John C., 1975, 1278 CARN MELL U
   Whitney H, 1933, ANN MATH, V34, P405, DOI 10.2307/1968168
NR 55
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571218
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500025
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Radul, A
   Paszke, A
   Frostig, R
   Johnson, MJ
   Maclaurin, D
AF Radul, Alexey
   Paszke, Adam
   Frostig, Roy
   Johnson, Matthew J.
   Maclaurin, Dougal
TI You Only Linearize Once
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE automatic differentiation; decomposition; transpose; partial evaluation
AB Automatic differentiation (AD) is conventionally understood as a family of distinct algorithms, rooted in two "modes"-forward and reverse-which are typically presented (and implemented) separately. Can there be only one? Following up on the AD systems developed in the JAX and Dex projects, we formalize a decomposition of reverse-mode AD into (i) forward-mode AD followed by (ii) unzipping the linear and non-linear parts and then (iii) transposition of the linear part. To that end, we define a (substructurally) linear type system that can prove a class of functions are (algebraically) linear. Our main results are that forward-mode AD produces such linear functions, and that we can unzip and transpose any such linear function, conserving cost, size, and linearity. Composing these three transformations recovers reverse-mode AD. This decomposition also sheds light on checkpointing, which emerges naturally from a free choice in unzipping let expressions. As a corollary, checkpointing techniques are applicable to general-purpose partial evaluation, not just AD. We hope that our formalization will lead to a deeper understanding of automatic differentiation and that it will simplify implementations, by separating the concerns of differentiation proper from the concerns of gaining efficiency (namely, separating the derivative computation from the act of running it backward).
C1 [Radul, Alexey; Frostig, Roy; Johnson, Matthew J.; Maclaurin, Dougal] Google Res, Belmont, MA 02478 USA.
   [Paszke, Adam] Google Res, Warsaw, Poland.
C3 Google Incorporated; Google Incorporated
RP Radul, A (corresponding author), Google Res, Belmont, MA 02478 USA.
EM axch@google.com; apaszke@google.com; frostig@google.com;
   mattjj@google.com; dougalm@google.com
CR Abadi M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371106
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Bradbury J., 2018, JAX: Composable transformations of Python + NumPy programs
   Brunel A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371132
   Elliott C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236765
   Elliott CM, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P191
   Frostig R., 2018, Systems for Machine Learning, P23
   Frostig Roy, 2021, LAFI POPL WORKSHOP L
   FUTAMURA Y, 1983, LECT NOTES COMPUT SC, V147, P1
   Griewank A, 2008, OTHER TITL APPL MATH, V105, P1, DOI 10.1137/1.9780898717761
   Huot M, 2020, LECT NOTES COMPUT SC, V12077, P319, DOI 10.1007/978-3-030-45231-5_17
   Karczmarczuk J., 1998, P 3 ACM SIGPLAN INT, P195, DOI [10.1145/289423.289442, DOI 10.1145/289423.289442]
   Krawiec F, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498710
   Mazza D, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434309
   Paszke A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473593
   Pearlmutter BA, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330018
   Piponi Dan, 2009, Journal of Graphics Tools, V14, P63
   Piponi D., 2004, Journal of Graphics Tools, V9, P41, DOI 10.1080/10867651.2004.10504901
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   WALTHER A., 2003, PAMM, V2, P41, DOI DOI 10.1002/PAMM.200310011
   Wang F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341700
NR 21
TC 5
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571236
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500043
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Voichick, F
   Li, LY
   Rand, R
   Hicks, M
AF Voichick, Finn
   Li, Liyi
   Rand, Robert
   Hicks, Michael
TI Qunity
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE algebraic data types; Kraus operators; quantum subroutines; reversible;
   computing
AB We introduce Qunity, a new quantum programming language designed to treat quantum computing as a natural generalization of classical computing. Qunity presents a unified syntax where familiar programming constructs can have both quantum and classical effects. For example, one can use sum types to implement the direct sum of linear operators, exception-handling syntax to implement projective measurements, and aliasing to induce entanglement. Further, Qunity takes advantage of the overlooked bqp subroutine theorem, allowing one to construct reversible subroutines from irreversible quantum algorithms through the uncomputation of "garbage" outputs. Unlike existing languages that enable quantum aspects with separate add-ons (like a classical language with quantum gates bolted on), Qunity provides a unified syntax and a novel denotational semantics that guarantees that programs are quantum mechanically valid. We present Qunity's syntax, type system, and denotational semantics, showing how it can cleanly express several quantum algorithms. We also detail how Qunity can be compiled into a low-level qubit circuit language like OpenQasm, proving the realizability of our design.
C1 [Voichick, Finn; Li, Liyi; Hicks, Michael] Univ Maryland, College Pk, MD 20742 USA.
   [Rand, Robert] Univ Chicago, Chicago, IL 60637 USA.
   [Hicks, Michael] Amazon, College Pk, MD USA.
C3 University System of Maryland; University of Maryland College Park;
   University of Chicago; Amazon.com
RP Voichick, F (corresponding author), Univ Maryland, College Pk, MD 20742 USA.
EM finn@umd.edu; liyili2@unad.edu; rand@uchicago.edu; mwh@cs.umd.edu
RI Rand, Robert/AAI-8340-2020
OI Rand, Robert/0000-0001-6842-5505; Voichick, Finn/0000-0002-1913-4178;
   Li, Liyi/0000-0001-8184-0244; Hicks, Michael/0000-0002-2759-9223
FU U.S. Department of Energy, Office of Science, Office of Advanced
   Scientific Computing Research, Quantum Testbed Pathfinder Program
   [DE-SC0019040]; Air Force Office of Scientific Research [FA95502110051];
   EPiQC, an NSF Expedition in Computing [CCF-1730449]
FX We thank Andrew Childs for helping us to understand the quantum
   algorithm designer's perspective and for originally pointing us toward
   the BQP subroutine theorem, and we thank the anonymous referees for
   their helpful comments on a draft of this paper. This material is based
   upon work supported by the U.S. Department of Energy, Office of Science,
   Office of Advanced Scientific Computing Research, Quantum Testbed
   Pathfinder Program under Award Number DE-SC0019040, and the Air Force
   Office of Scientific Research under Grant No. FA95502110051. This work
   is funded in part by EPiQC, an NSF Expedition in Computing, under award
   CCF-1730449.
CR Altenkirch T, 2005, IEEE S LOG, P249
   Ambainis A, 2010, SIAM J COMPUT, V39, P2513, DOI 10.1137/080712167
   Amy M, 2017, LECT NOTES COMPUT SC, V10427, P3, DOI 10.1007/978-3-319-63390-9_1
   [Anonymous], 2011, MATH LANGUAGE QUANTU, DOI DOI 10.1017/CBO9781139031103
   [Anonymous], 2009, Semantic techniques in quantum computation, DOI DOI 10.1017/CBO9781139193313.005
   Arrighi P, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(1:8)2017
   Axler S, 2015, LINEAR ALGEBRA DONE, Vthird, DOI DOI 10.1007/978-3-319-11080-6
   Badescu C, 2015, ELECTRON PROC THEOR, P33, DOI 10.4204/EPTCS.195.3
   Bennett CH, 1997, SIAM J COMPUT, V26, P1510, DOI 10.1137/S0097539796300933
   Bichsel B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P286, DOI 10.1145/3385412.3386007
   Chardonnet K, 2023, Arxiv, DOI arXiv:2206.10234
   Childs AM, 2007, Arxiv, DOI [arXiv:quant-ph/0703015, DOI 10.48550/ARXIV.QUANT-PH/0703015]
   Childs AM, 2010, REV MOD PHYS, V82, P1, DOI 10.1103/RevModPhys.82.1
   Cross AW, 2022, Arxiv, DOI arXiv:2104.14722
   DEUTSCH D, 1985, P ROY SOC LOND A MAT, V400, P97, DOI 10.1098/rspa.1985.0070
   Fu P, 2020, IEEE S LOG, P440, DOI 10.1145/3373718.3394765
   Gottesman D, 2010, PROC SYM AP, V68, P13
   Grattage J., 2006, Qml: A functional quantum programming language
   Grattage J, 2011, ELECTRON NOTES THEOR, V270, P165, DOI 10.1016/j.entcs.2011.01.015
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Griffiths RB, 1996, PHYS REV LETT, V76, P3228, DOI 10.1103/PhysRevLett.76.3228
   HUET G, 1980, J ACM, V27, P797, DOI 10.1145/322217.322230
   Ross NJ, 2017, Arxiv, DOI arXiv:1510.02198
   James RP, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P73
   Kaye P., 2007, An Introduction to Quantum Computing
   Knill E., 1996, Los Alamos Technical Report LA-UR-96-2724, DOI [DOI 10.2172/366453, 10.2172/366453]
   Kothari R., 2014, Efficient algorithms in quantum query complexity
   Li GS, 2020, Arxiv, DOI arXiv:1911.12855
   Li LY, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563309
   Newman MHA, 1942, ANN MATH, V43, P223, DOI 10.2307/1968867
   Nielsen M. A., 2010, QUANTUM COMPUTATION, DOI [10.1017/cbo9780511976667, DOI 10.1017/CBO9780511976667]
   Paykin J, 2017, ACM SIGPLAN NOTICES, V52, P846, DOI 10.1145/3093333.3009894
   Pierce Benjamin C., 2004, Advanced Topics in Types and Programming Languages
   Preskill J, 2018, QUANTUM-AUSTRIA, V2, DOI 10.22331/q-2018-08-06-79
   Rand R, 2019, ELECTRON P THEOR COM, P299, DOI 10.4204/EPTCS.287.17
   Roman Steven, 2008, GRADUATE TEXTS MATH, V135, DOI [10.1007/978-0-387-72831-5, DOI 10.1007/978-0-387-72831-5]
   Sabry A, 2018, LECT NOTES COMPUT SC, V10803, P348, DOI 10.1007/978-3-319-89366-2_19
   Selinger P, 2004, MATH STRUCT COMP SCI, V14, P527, DOI 10.1017/S0960129504004256
   van de Wetering J, 2020, Arxiv, DOI arXiv:2012.13966
   van Tonder A, 2004, SIAM J COMPUT, V33, P1109, DOI 10.1137/S0097539703432165
   Voichick Finn, 2022, Zenodo, DOI 10.5281/ZENODO.7150282
   Voichick F, 2022, Arxiv, DOI arXiv:2204.12384
   Cross AW, 2017, Arxiv, DOI arXiv:1707.03429
   Watrous J., 2009, ENCY COMPLEXITY SYST, P7174, DOI 10.1007/978-0-387-30440-3.428
   WOOTTERS WK, 1982, NATURE, V299, P802, DOI 10.1038/299802a0
   Ying M., 2016, Foundations of Quantum Programming
NR 46
TC 1
Z9 1
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571225
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500032
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Wang, YJ
   Li, ZX
   Jiang, C
   Qiu, XK
   Rao, S
AF Wang, Yanjun
   Li, Zixuan
   Jiang, Chuan
   Qiu, Xiaokang
   Rao, Sanjay
TI Comparative Synthesis: Learning Near-Optimal Network Designs by Query
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Traffic Engineering; Optimization; Query; User
   Interaction
ID OPTIMIZATION
AB When managing wide-area networks, network architects must decide how to balance multiple conflicting metrics, and ensure fair allocations to competing traffic while prioritizing critical traffic. The state of practice poses challenges since architects must precisely encode their intent into formal optimization models using abstract notions such as utility functions, and ad-hoc manually tuned knobs. In this paper, we present the first effort to synthesize optimal network designs with indeterminate objectives using an interactive programsynthesis-based approach. We make three contributions. First, we present comparative synthesis, an interactive synthesis framework which produces near-optimal programs (network designs) through two kinds of queries ( Propose and Compare), without an objective explicitly given. Second, we develop the first learning algorithm for comparative synthesis in which a voting-guided learner picks the most informative query in each iteration. We present theoretical analysis of the convergence rate of the algorithm. Third, we implemented Net10Q, a system based on our approach, and demonstrate its effectiveness on four real-world network case studies using black-box oracles and simulation experiments, as well as a pilot user study comprising network researchers and practitioners. Both theoretical and experimental results show the promise of our approach.
C1 [Wang, Yanjun; Li, Zixuan; Jiang, Chuan; Qiu, Xiaokang; Rao, Sanjay] Purdue Univ, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Wang, YJ (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM wang3204@purdue.edu; li3566@purdue.edu; jiang486@purdue.edu;
   xkqiu@purdue.edu; sanjay@ecn.purdue.edu
OI Wang, Yanjun/0000-0002-9459-9813; Qiu, Xiaokang/0000-0001-9476-7349
FU National Science Foundation [CCF-1837023, CCF-2046071]
FX We thank Aarti Gupta for her valuable comments that helped improve the
   paper. This research was supported in part by the National Science
   Foundation under Grant Nos. CCF-1837023 and CCF-2046071.
CR Ammons G, 2002, ACM SIGPLAN NOTICES, V37, P4, DOI 10.1145/565816.503275
   Angluin D, 2004, THEOR COMPUT SCI, V313, P175, DOI 10.1016/j.tcs.2003.11.004
   [Anonymous], 1997, Numerical analysis: an introduction
   [Anonymous], 2023, P ACM PROGR LANG, V7
   Beckett R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371110
   Birkner R, 2020, PROCEEDINGS OF THE 17TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P969
   Bogle J, 2019, SIGCOMM '19 - PROCEEDINGS OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION, P29, DOI 10.1145/3341302.3342069
   Bornholt J, 2016, ACM SIGPLAN NOTICES, V51, P775, DOI 10.1145/2914770.2837666
   Boyd S.P., 2004, Convex optimization, DOI [10.1017/CBO9780511804441, DOI 10.1017/CBO9780511804441]
   Cerny P., 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P149
   CHAITIN GJ, 1975, J ACM, V22, P329, DOI 10.1145/321892.321894
   Chang YY, 2017, PROCEEDINGS OF NSDI '17: 14TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P347
   Chaudhuri S, 2014, ACM SIGPLAN NOTICES, V49, P207, DOI 10.1145/2535838.2535859
   Danna E, 2012, IEEE INFOCOM SER, P846, DOI 10.1109/INFCOM.2012.6195833
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dietterich TG, 2000, LECT NOTES COMPUT SC, V1857, P1, DOI 10.1007/3-540-45014-9_1
   Drachsler-Cohen D, 2017, LECT NOTES COMPUT SC, V10426, P254, DOI 10.1007/978-3-319-63387-9_13
   Drosos I, 2020, PROCEEDINGS OF THE 2020 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'20)
   El-Hassany A, 2018, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI'18), P579
   El-Hassany A, 2017, LECT NOTES COMPUT SC, V10427, P261, DOI 10.1007/978-3-319-63390-9_14
   Fortz B., 2000, Proceedings IEEE INFOCOM 2000. Conference on Computer Communications. Nineteenth Annual Joint Conference of the IEEE Computer and Communications Societies (Cat. No.00CH37064), P519, DOI 10.1109/INFCOM.2000.832225
   Gao XY, 2019, PROCEEDINGS OF THE EIGHTEENTH ACM WORKSHOP ON HOT TOPICS IN NETWORKS (HOTNETS '19), P150, DOI 10.1145/3365609.3365858
   Garg P, 2014, LECT NOTES COMPUT SC, V8559, P69, DOI 10.1007/978-3-319-08867-9_5
   Ghosh A, 2013, IEEE J SEL AREA COMM, V31, P2673, DOI 10.1109/JSAC.2013.131208
   Gulwani Sumit., 2019, QUANTITATIVE PROGRAM
   Gurobi Optimization LLC, 2023, Gurobi optimizer reference manual
   Gvozdiev N, 2018, PROCEEDINGS OF THE 2018 CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '18), P88, DOI 10.1145/3230543.3230575
   Hong CY, 2013, ACM SIGCOMM COMP COM, V43, P15, DOI 10.1145/2534169.2486012
   Hu QP, 2018, LECT NOTES COMPUT SC, V10981, P386, DOI 10.1007/978-3-319-96145-3_21
   Jain S, 2013, ACM SIGCOMM COMP COM, V43, P3, DOI 10.1145/2534169.2486019
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Jha S, 2017, ACTA INFORM, V54, P693, DOI 10.1007/s00236-017-0294-5
   Ji RY, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1143, DOI 10.1145/3385412.3386025
   Jiang C, 2020, SIGCOMM '20: PROCEEDINGS OF THE 2020 ANNUAL CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION ON THE APPLICATIONS, TECHNOLOGIES, ARCHITECTURES, AND PROTOCOLS FOR COMPUTER COMMUNICATION, P139, DOI 10.1145/3387514.3405858
   Knight S, 2011, IEEE J SEL AREA COMM, V29, P1765, DOI 10.1109/JSAC.2011.111002
   Kumar A, 2015, ACM SIGCOMM COMP COM, V45, P1, DOI 10.1145/2785956.2787478
   Kumar P, 2018, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI'18), P157
   Lei Shi, 2021, Tools and Algorithms for the Construction and Analysis of Systems. 27th International Conference, TACAS 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12651), P430, DOI 10.1007/978-3-030-72016-2_23
   Li Y, 2014, ACM SIGPLAN NOTICES, V49, P607, DOI 10.1145/2535838.2535857
   Liu HH, 2014, SIGCOMM'14: PROCEEDINGS OF THE 2014 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION, P527, DOI 10.1145/2619239.2626314
   Mayer M, 2015, UIST'15: PROCEEDINGS OF THE 28TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P291, DOI 10.1145/2807442.2807459
   McClurg J, 2016, ACM SIGPLAN NOTICES, V51, P369, DOI [10.1145/2980983.2908097, 10.1145/2908080.2908097]
   McClurg J, 2015, ACM SIGPLAN NOTICES, V50, P196, DOI [10.1145/2737924.2737980, 10.1145/2813885.2737980]
   Miettinen K, 2008, LECT NOTES COMPUT SC, V5252, P27, DOI 10.1007/978-3-540-88908-3_2
   Peleg H, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1114, DOI 10.1145/3180155.3180189
   Ryzhyk L, 2017, PROCEEDINGS OF NSDI '17: 14TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P683
   Saha Shambwaditya., 2015, Proceedings of the 1st ACM SIG-COMM Symposium on Software Defined Networking Research, P1, DOI DOI 10.1145/2774993.2775006
   Schkufza E, 2014, ACM SIGPLAN NOTICES, V49, P53, DOI [10.1145/2666356.2594302, 10.1145/2594291.2594302]
   Schkufza E, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI 10.1145/2499368.2451150
   Settles B., 2012, ACTIVE LEARNING
   Seung H. S., 1992, Proceedings of the Fifth Annual ACM Workshop on Computational Learning Theory, P287, DOI 10.1145/130385.130417
   Sivaraman A, 2016, PROCEEDINGS OF THE 2016 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '16), P15, DOI 10.1145/2934872.2934900
   Solar-Lezama A., 2016, The sketch programmers manual
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Soulé R, 2014, PROCEEDINGS OF THE 2014 CONFERENCE ON EMERGING NETWORKING EXPERIMENTS AND TECHNOLOGIES (CONEXT'14), P213, DOI 10.1145/2674005.2674989
   Srikant R., 2004, Systems Control: Foundations Applications, DOI DOI 10.1007/978-0-8176-8216-3
   Steffen S, 2020, SIGCOMM '20: PROCEEDINGS OF THE 2020 ANNUAL CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION ON THE APPLICATIONS, TECHNOLOGIES, ARCHITECTURES, AND PROTOCOLS FOR COMPUTER COMMUNICATION, P750, DOI 10.1145/3387514.3405900
   Subramanian K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P974, DOI 10.1145/3385412.3385976
   Subramanian K, 2017, ACM SIGPLAN NOTICES, V52, P572, DOI 10.1145/3093333.3009845
   Wang YJ, 2019, PROCEEDINGS OF THE EIGHTEENTH ACM WORKSHOP ON HOT TOPICS IN NETWORKS (HOTNETS '19), P69, DOI 10.1145/3365609.3365861
   Wang Y, 2010, ACM SIGCOMM COMP COM, V40, P291, DOI 10.1145/1851275.1851218
   Wang Y, 2009, IEEE J SEL AREA COMM, V27, P336, DOI 10.1109/JSAC.2009.090409
   Yuan Yifei., 2015, Proceedings of the 11th ACM Conference on Emerging Networking Experiments and Technologies, p34:1, DOI DOI 10.1145/2716281.2836119
NR 63
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
AR 4
DI 10.1145/3571197
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500004
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Dexter, P
   Liu, YD
   Chiu, K
AF Dexter, Philip
   Liu, Yu David
   Chiu, Kenneth
TI The Essence of Online Data Processing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Formal Reasoning; Online Data Processing; Incremental Evaluation; Online
   Data Optimization
ID LANGUAGE; OPTIMIZATION; SEMANTICS
AB Data processing systems are a fundamental component of the modern computing stack. These systems are routinely deployed online: they continuously receive the requests of data processing operations, and continuously return the results to end users or client applications. Online data processing systems have unique features beyond conventional data processing, and the optimizations designed for them are complex, especially when data themselves are structured and dynamic. This paper describes DON Calculus, the first rigorous foundation for online data processing. It captures the essential behavior of both the backend data processing engine and the frontend application, with the focus on two design dimensions essential yet unique to online data processing systems: incremental operation processing (IOP) and temporal locality optimization (TLO). A novel design insight is that the operations continuously applied to the data can be defined as an operation stream flowing through the data structure, and this abstraction unifies diverse designs of IOP and TLO in one calculus. DON Calculus is endowed with a mechanized metatheory centering around a key observable equivalence property: despite the significant non-deterministic executions introduced by IOP and TLO, the observable result of DON Calculus data processing is identical to that of conventional data processing without IOP and TLO. Broadly, DON Calculus is a novel instance in the active pursuit of providing rigorous guarantees to the software system stack. The specification and mechanization of DON Calculus provide a sound base for the designers of future data processing systems to build upon, helping them embrace rigorous semantic engineering without the need of developing from scratch.
C1 [Dexter, Philip; Liu, Yu David; Chiu, Kenneth] State Univ New York SUNY, 4400 Vestal Pkwy East, Binghamton, NY 13902 USA.
RP Dexter, P (corresponding author), State Univ New York SUNY, 4400 Vestal Pkwy East, Binghamton, NY 13902 USA.
EM pdexter1@binghamton.edu; davidl@binghamton.edu; kchiu@binghamton.edu
OI Liu, Yu David/0000-0002-2768-3898
FU US National Science Foundation [NSF CCF-1815949]
FX This work is sponsored by the US National Science Foundation, award NSF
   CCF-1815949.
CR Acar UA, 2006, ACM T PROGR LANG SYS, V28, P990, DOI 10.1145/1186632.1186634
   [Anonymous], 2011, P 8 USENIX C NETWORK
   Appel Andrew W., 2021, The DeepSpec Project: The Science of Deep Specification
   Arasu A, 2004, SIGMOD REC, V33, P6, DOI 10.1145/1031570.1031572
   ASHCROFT EA, 1977, COMMUN ACM, V20, P519, DOI 10.1145/359636.359715
   Bartenstein TW, 2014, ACM SIGPLAN NOTICES, V49, P213, DOI [10.1145/2714064.2660225, 10.1145/2660193.2660225]
   Bertsekas D.P., 1989, Parallel and Distributed Computation: Numerical Methods
   Brin S, 1998, COMPUT NETWORKS ISDN, V30, P107, DOI 10.1016/S0169-7552(98)00110-X
   Buneman P., 1996, SIGMOD Record, V25, P505, DOI 10.1145/235968.233368
   Calcagno C, 2003, LECT NOTES COMPUT SC, V2830, P57
   Cardelli L., 1988, Phase distinctions in type theory
   Caspi P., 1987, P 14 ACM SIGACT SIGP, P178, DOI DOI 10.1145/41625.41641
   Cheng Raymond, 2012, P 7 ACM EUR C COMP S, P85, DOI 10.1145/2168836.2168846
   Cipar J., 2012, Pro- ceedings of the 7th ACM European Conference on Computer Systems, EuroSys '12, P169, DOI [10.1145/2168836.2168854, DOI 10.1145/2168836.2168854]
   Cohen A, 2006, ACM SIGPLAN NOTICES, V41, P180, DOI 10.1145/1111320.1111054
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Dexter P, 2016, ACM SIGPLAN NOTICES, V51, P182, DOI 10.1145/3241625.2976014
   Dexter Philip, 2022, The Essence of Online Data Processing-Coq Mechanization, DOI [10.5281/zenodo.7051651, DOI 10.5281/ZENODO.7051651]
   Dhulipala L, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P918, DOI 10.1145/3314221.3314598
   Ediger D, 2012, IEEE HIGH PERF EXTR
   Elteir M., 2010, Proceedings 2010 IEEE 16th International Conference on Parallel and Distributed Systems (ICPADS 2010), P397, DOI 10.1109/ICPADS.2010.116
   Emoto K, 2016, ACM SIGPLAN NOTICES, V51, P200, DOI 10.1145/3022670.2951938
   Eymer Jeff, 2022, The PitStop System
   Eymer Jeffrey, 2019, 2 WORKSH INCR COMP I
   Flanagan C., 1999, Journal of Functional Programming, V9, P1, DOI 10.1017/S0956796899003329
   Flanagan Cormac, 1995, POP95 22 ACM SIGPLAN, P209, DOI [10.1145/199448.199484, DOI 10.1145/199448.199484]
   Gonzalez Joseph E., 2012, 10 USENIX S OP SYST, P17
   Grossman S, 2018, ACM SIGPLAN NOTICES, V53, P246, DOI 10.1145/3200691.3178506
   Gurevich Y, 2007, LECT NOTES COMPUT SC, V4797, P153, DOI 10.1007/978-3-540-75987-4_11
   Haller P, 2019, J LOG ALGEBR METHODS, V105, P75, DOI 10.1016/j.jlamp.2019.03.002
   Haller P, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000035
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Hammer MA, 2014, ACM SIGPLAN NOTICES, V49, P156, DOI [10.1145/2594291.2594324, 10.1145/2666356.2594324]
   Han W., 2014, P 9 EUR C, DOI DOI 10.1145/2592798.2592799
   Harkes Daco C, 2017, 31 EUR C OBJ OR PROG, DOI [10.4230/LIPIcs.ECOOP.2017.14, DOI 10.4230/LIPICS.ECOOP.2017.14]
   Harkes Daco C, 2016, ECOOP 16, DOI [10.4230/LIPIcs.ECOOP.2016.11, DOI 10.4230/LIPICS.ECOOP.2016.11]
   HARPER R, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P341, DOI 10.1145/96709.96744
   Hirzel M, 2014, ACM COMPUT SURV, V46, DOI 10.1145/2528412
   HUET G, 1980, J ACM, V27, P797, DOI 10.1145/322217.322230
   Ju XE, 2016, PROCEEDINGS OF USENIX ATC '16: 2016 USENIX ANNUAL TECHNICAL CONFERENCE, P523
   Kumar P, 2020, ACM T STORAGE, V15, DOI 10.1145/3364180
   Le WC, 2012, PROC INT CONF DATA, P666, DOI 10.1109/ICDE.2012.37
   LEE EA, 1987, P IEEE, V75, P1235, DOI 10.1109/PROC.1987.13876
   Liu Yu David, 2009, Higher-Order and Symbolic Computation, V24, P341, DOI [10.1145/1596614.1596622, DOI 10.1145/1596614.1596622]
   Low Y, 2012, PROC VLDB ENDOW, V5, P716, DOI 10.14778/2212351.2212354
   Malewicz Grzegorz, 2010, P ACM SIGMOD INT C M, P135, DOI [DOI 10.1145/1807167.1807184, 10.1145/1807167.1807184]
   Mariappan M, 2021, PROCEEDINGS OF THE SIXTEENTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS '21), P83, DOI 10.1145/3447786.3456230
   Mariappan M, 2019, PROCEEDINGS OF THE FOURTEENTH EUROSYS CONFERENCE 2019 (EUROSYS '19), DOI 10.1145/3302424.3303974
   Meyerovich LA, 2009, ACM SIGPLAN NOTICES, V44, P1, DOI 10.1145/1639949.1640091
   Mitschke R, 2014, ACM SIGPLAN NOTICES, V49, P417, DOI [10.1145/2660193.2660242, 10.1145/2714064.2660242]
   Murray DG, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P439, DOI 10.1145/2517349.2522738
   neo4j, 2010, Neo4j Graph Database
   Ousterhout K., 2015, NSDI, V15, P293
   PAPAKONSTANTINOU Y, 1995, PROC INT CONF DATA, P251, DOI 10.1109/ICDE.1995.380386
   Park J., 1988, Proceedings Fourth International Conference on Data Engineering (Cat. No.88CH2550-2), P311, DOI 10.1109/ICDE.1988.105474
   PUGH W, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P315, DOI 10.1145/75277.75305
   Ramachandra K, 2012, P ACM SIGMOD INT C M, P133, DOI DOI 10.1145/2213836.2213852
   Ren XG, 2016, PROC VLDB ENDOW, V10, P121
   Roy A, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P472, DOI 10.1145/2517349.2522740
   Scully Z, 2017, ACM SIGPLAN NOTICES, V52, P271, DOI 10.1145/3093333.3009891
   Sellis T. K., 1985, SIGMOD Record, V14, P424, DOI 10.1145/971699.318993
   SELLIS TK, 1988, ACM T DATABASE SYST, V13, P23, DOI 10.1145/42201.42203
   Sheng F, 2018, PROCEEDINGS OF THE 2018 ACM SYMPOSIUM ON CLOUD COMPUTING (SOCC '18), P301, DOI 10.1145/3267809.3267811
   Shi XG, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P417, DOI 10.1145/2882903.2882950
   Shun JL, 2013, ACM SIGPLAN NOTICES, V48, P135, DOI 10.1145/2517327.2442530
   Soulé R, 2010, LECT NOTES COMPUT SC, V6012, P507, DOI 10.1007/978-3-642-11957-6_27
   Sousa M, 2014, ACM SIGPLAN NOTICES, V49, P554, DOI [10.1145/2594291.2594305, 10.1145/2666356.2594305]
   Spring JH, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P211
   Stucki Nicolas, 2021, GPCE 2021: Proceedings of the 20th ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences, P110, DOI 10.1145/3486609.3487203
   Suzumura T, 2014, WWW'14 COMPANION: PROCEEDINGS OF THE 23RD INTERNATIONAL CONFERENCE ON WORLD WIDE WEB, P1321, DOI 10.1145/2567948.2580051
   Taha W., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P203, DOI 10.1145/258994.259019
   Tangwongsan K, 2015, PROC VLDB ENDOW, V8, P702, DOI 10.14778/2752939.2752940
   Thies W, 2002, LECT NOTES COMPUT SC, V2304, P179
   Vaziri M, 2014, LECT NOTES COMPUT SC, V8586, P360
   Venkataramani V., 2012, Proceedings of the 2012 ACM SIGMOD International Conference on Management of Data, P791
   Vora K, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P237, DOI 10.1145/3037697.3037748
   Wang G., 2013, CIDR, V13, P3
   Wang Kai., 2015, USENIX ATC, P387
   Wang YZH, 2016, ACM SIGPLAN NOTICES, V51, P123, DOI [10.1145/2851141.2851145, 10.1145/3016078.2851145]
   Zaharia M, 2016, COMMUN ACM, V59, P56, DOI 10.1145/2934664
   Zaharia M, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P423, DOI 10.1145/2517349.2522737
   Zhang KY, 2015, ACM SIGPLAN NOTICES, V50, P183, DOI [10.1145/2688500.2688507, 10.1145/2858788.2688507]
NR 82
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 157
DI 10.1145/3563320
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200034
OA gold
DA 2024-07-18
ER

PT J
AU Titzer, BL
AF Titzer, Ben L.
TI A Fast In-Place Interpreter for WebAssembly
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE WebAssembly; virtual machines; runtime systems; interpreters;
   performance
AB WebAssembly (Wasm) is a compact, well-specified bytecode format that offers a portable compilation target with near-native execution speed. The bytecode format was specifically designed to be fast to parse, validate, and compile, positioning itself as a portable alternative to native code. It was pointedly not designed to be interpreted directly. Instead, design considerations at the time focused on competing with native code, utilizing optimizing compilers as the primary execution tier. Yet, in JIT scenarios, compilation time and memory consumption critically impact application startup, leading many Wasm engines to later deploy faster single-pass (baseline) compilers. Though faster, baseline compilers still take time and waste code space for infrequently executed code. A typical interpreter being infeasible, some engines resort to compiling Wasm not to machine code, but to a more compact, but easy to interpret format. This still takes time and wastes memory. Instead, we introduce in this article a fast in-place interpreter for WebAssembly, where no rewrite and no separate format is necessary. Our evaluation shows that in-place interpretation ofWasm code is space-efficient and fast, achieving performance on-par with interpreting a custom-designed internal format. This fills a hole in the execution tier space for Wasm, allowing for even faster startup and lower memory footprint than previous engine configurations.
C1 [Titzer, Ben L.] Carnegie Mellon Univ, 4665 Forbes Ave, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Titzer, BL (corresponding author), Carnegie Mellon Univ, 4665 Forbes Ave, Pittsburgh, PA 15213 USA.
EM btitzer@andrew.cmu.edu
OI Titzer, Ben/0000-0002-9690-2089
CR Amin N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158140
   Anton Ertl M., 2004, P 2004 WORKSH INT VI, P7, DOI [10.1145/1059579.1059583, DOI 10.1145/1059579.1059583]
   Barany G., 2014, P WORKSHOP DYNAMIC L, P1, DOI DOI 10.1145/2617548.2617552
   BELL JR, 1973, COMMUN ACM, V16, P370, DOI 10.1145/362248.362270
   Bolz Carl Friedrich, 2009, P 4 WORKSH IMPL COMP, P18, DOI [10.1145/1565824.1565827, DOI 10.1145/1565824.1565827]
   Borui Li, 2021, MobiSys '21: Proceedings of the 19th Annual International Conference on Mobile Systems, Applications, and Services, P487, DOI 10.1145/3458864.3466910
   Brunthaler S, 2010, ACM SIGPLAN NOTICES, V45, P1, DOI 10.1145/1899661.1869633
   Casey K, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1286821.1286828
   Casey Kevin, 2005, P 14 INT C COMP CONS, P246, DOI [10.1007/978-3-540-31985-6_18, DOI 10.1007/978-3-540-31985-6_18]
   Chang PY, 1997, ACM COMP AR, P274, DOI 10.1145/384286.264209
   Curtsinger C, 2013, ACM SIGPLAN NOTICES, V48, P219, DOI 10.1145/2499368.2451141
   Davis Brian, 2003, Proceedings of the 2003 workshop on Interpreters, virtual machines and emulators, P41
   DEMERS A, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P261, DOI 10.1145/96709.96735
   DEWAR RBK, 1975, COMMUN ACM, V18, P330, DOI 10.1145/360825.360849
   DIWAN A, 1992, SIGPLAN NOTICES, V27, P273, DOI 10.1145/143103.143140
   Ertl MA, 2002, SOFTWARE PRACT EXPER, V32, P265, DOI 10.1002/spe.434
   fastly, 2020, The edge of the multi-cloud
   Futamura Y, 1983, Lecture Notes in Computer Science, V147
   Gal A, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P465, DOI 10.1145/1542476.1542528
   gcc.gnu, 2022, Labels as Values (GNU Compiler Collection)
   github, 2021, Wasmtime: a standalone runtime for WebAssembly
   github, 2020, Wasm3: The fastest WebAssembly interpreter, and the most universal runtime
   github, 2021, Wasmer: A Fast and Secure WebAssembly Runtime
   github, 2018, WAVM: a non-browser WebAssembly virtual machine
   github, 2022, WebAssembly Micro Runtime (WAMR)
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   Hu Xiaowen, 2021, An Efficient Interpreter for Datalog by De-Specializing Relations (PLDI 2021), P681, DOI [10.1145/3453483.3454070, DOI 10.1145/3453483.3454070]
   intel, 2021, A fast WebAssembly Interpreter design in WASM-Micro-Runtime
   Kalibera Toms., C VIRTUAL EXECUTION, DOI DOI 10.1145/2576195.2576205
   Kataoka T, 2018, 33RD ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P1238, DOI 10.1145/3167132.3167266
   Kim C, 2016, CONF PROC INT SYMP C, P291, DOI 10.1109/ISCA.2016.34
   llvm, 2015, lli-directly execute programs from LLVM bitcode
   MCCARTHY J, 1960, COMMUN ACM, V3, P184, DOI 10.1145/367177.367199
   Microsoft, 2021, ChakraCore: a JavaScript engine with a C API
   Mytkowicz T, 2009, ACM SIGPLAN NOTICES, V44, P265, DOI 10.1145/1508284.1508275
   Nieke M, 2021, PROCEEDINGS OF THE 4TH INTERNATIONAL WORKSHOP ON EDGE SYSTEMS, ANALYTICS AND NETWORKING (EDGESYS'21), P13, DOI 10.1145/3434770.3459731
   Niephaus Fabio, 2018, P 13 WORKSH IMPL COM, P30, DOI [10.1145/3242947.3242948, DOI 10.1145/3242947.3242948]
   Nurul-Hoque M, 2021, INT CONF CLOUD ENG, P168, DOI 10.1109/IC2E52221.2021.00032
   Ogata K, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/605432.605404
   openjdk.java, 1998, Hotspot internals: interpreter
   Palsberg Jens, 2014, From Java to Mips in Four Nifty Steps
   Peng Jinzhan., 2004, IVME 04, P15, DOI DOI 10.1145/1059579.1059584
   Piumarta I, 1998, ACM SIGPLAN NOTICES, V33, P291, DOI 10.1145/277652.277743
   Pizlo Filip, 2016, Introducing the B3 JIT Compiler
   Proebsting T. A., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P322, DOI 10.1145/199448.199526
   Prokopski GB, 2008, OOPSLA 2008 NASHVILLE, CONFERENCE PROCEEDINGS, P403
   Rohou E, 2015, INT SYM CODE GENER, P103, DOI 10.1109/CGO.2015.7054191
   Savrun-Yeniçeri G, 2014, ACM T ARCHIT CODE OP, V11, DOI 10.1145/2532642
   Shi Y., 2005, VEE 05, P153, DOI DOI 10.1145/1064979.1065001
   Singh RG, 2019, PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON MANAGED PROGRAMMING LANGUAGES AND RUNTIMES (MPLR '19), P27, DOI 10.1145/3357390.3361029
   spidermonkey.dev, 2021, SpiderMonkey: Mozilla's JavaScript and WebAssembly engine
   Titzer Ben L, 2022, Zenodo, DOI 10.5281/ZENODO.7093079
   Titzer BL, 2013, ACM SIGPLAN NOTICES, V48, P85, DOI 10.1145/2499370.2491962
   Titzer Ben L., 2022, Oopsla 2022 Artifact
   Titzer Ben L., 2021, Wizard, An advanced WebAssembly Engine for Research
   Titzer BL, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1070891.1065919
   trac.webkit, 2021, JavaScriptCore, the built-in JavaScript engine for WebKit
   v8.dev, 2018, TurboFan: V8's Optimizing Compiler
   v8.dev, 2021, V8 Development Site
   v8.dev, 2022, Ignition: a fast low-level interpreter
   v8.dev, 2018, ABOUT US
   webkit, 2019, A New Bytecode Format for JavaScriptCore
   wikipedia, 2022, LEB128
   Williams K, 2010, INT SYM CODE GENER, P278
   Williams Kevin, 2008, P 5 C COMP FRONT ISC, P189, DOI [10.1145/1366230.1366265, DOI 10.1145/1366230.1366265]
   Würthinger T, 2013, ACM SIGPLAN NOTICES, V48, P73, DOI 10.1145/2480360.2384587
   Yee B, 2010, COMMUN ACM, V53, P91, DOI 10.1145/1629175.1629203
   Zakai Alon, 2013, asm.js: an extraordinarily optimizable, low-level subset of JavaScript
   Zaleski Mathew., 2005, CASCON 05, P305
   Zhang Q, 2022, SCI COMPUT PROGRAM, V215, DOI 10.1016/j.scico.2021.102759
   Zilli M, 2015, MICROPROCESS MICROSY, V39, P1076, DOI 10.1016/j.micpro.2015.05.004
   Zilli Massimiliano, 2015, SIGBED Rev., V11, P13, DOI [10.1145/2724942.2724944, DOI 10.1145/2724942.2724944]
NR 72
TC 3
Z9 3
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 148
DI 10.1145/3563311
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200025
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Ullrich, S
   De Moura, L
AF Ullrich, Sebastian
   De Moura, Leonardo
TI 'do' Unchained: Embracing Local Imperativity in a Purely Functional
   Language (Functional Pearl)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE functional programming; interactive theorem proving; Lean
AB Purely functional programming languages pride themselves with reifying effects that are implicit in imperative languages into reusable and composable abstractions such as monads. This reification allows for more exact control over effects as well as the introduction of new or derived effects. However, despite libraries of more and more powerful abstractions over effectful operations being developed, syntactically the common do notation still lags behind equivalent imperative code it is supposed to mimic regarding verbosity and code duplication. In this paper, we explore extending do notation with other imperative language features that can be added to simplify monadic code: local mutation, early return, and iteration. We present formal translation rules that compile these features back down to purely functional code, show that the generated code can still be reasoned over using an implementation of the translation in the Lean 4 theorem prover, and formally prove the correctness of the translation rules relative to a simple static and dynamic semantics in Lean.
C1 [Ullrich, Sebastian] Karlsruhe Inst Technol, Kaiserstr 12, D-76131 Karlsruhe, Germany.
   [De Moura, Leonardo] Microsoft Res, One Microsoft Way, Redmond, WA 98052 USA.
C3 Helmholtz Association; Karlsruhe Institute of Technology; Microsoft
RP Ullrich, S (corresponding author), Karlsruhe Inst Technol, Kaiserstr 12, D-76131 Karlsruhe, Germany.
EM sebastian.ullrich@kit.edu; leonardo@microsoft.com
OI Ullrich, Sebastian/0000-0002-2777-8117
CR [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Bove A, 2009, LECT NOTES COMPUT SC, V5674, P73, DOI 10.1007/978-3-642-03359-9_6
   Brady E, 2015, LECT NOTES COMPUT SC, V8843, P18, DOI 10.1007/978-3-319-14675-1_2
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Bulow N., 2022, Proof visualization for the lean 4 theorem prover
   COQUAND T, 1988, INFORM COMPUT, V76, P95, DOI 10.1016/0890-5401(88)90005-3
   Coquand T., 1988, LNCS, V417, P50, DOI DOI 10.1007/3-540-52335-9_47
   de Moura L, 2021, LECT NOTES ARTIF INT, V12699, P625, DOI 10.1007/978-3-030-79876-5_37
   Erkok L., 2002, Haskell '02: Proceedings of the ACM SIGPLAN Haskell Workshop, P29, DOI DOI 10.1145/581690.581693
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Gibbons J, 2009, J FUNCT PROGRAM, V19, P377, DOI 10.1017/S0956796809007291
   Ho Son, 2022, INT C FUNCTIONAL PRO
   KELSEY RA, 1995, SIGPLAN NOTICES, V30, P13, DOI 10.1145/202530.202532
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Marlow S, 2016, ACM SIGPLAN NOTICES, V51, P92, DOI [10.1145/3241625.2976007, 10.1145/2976002.2976007]
   Matsakis Nicholas D., 2014, ADA LETT, P103, DOI DOI 10.1145/2692956.2663188
   Maurer L, 2017, ACM SIGPLAN NOTICES, V52, P482, DOI [10.1145/3062341.3062380, 10.1145/3140587.3062380]
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Nipkow T., 1998, Formal Aspects of Computing, V10, P171, DOI 10.1007/s001650050009
   Paterson R, 2001, ACM SIGPLAN NOTICES, V36, P229, DOI 10.1145/507669.507664
   Peyton Simon L., 1996, PROC EUROPEAN S PROG, P18, DOI [10.1007/3-540-61055-3_27, DOI 10.1007/3-540-61055-3_27]
   Pit-Claudel C, 2020, PROCEEDINGS OF THE 13TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING, SLE 2020, P155, DOI 10.1145/3426425.3426940
   Rosen B. K., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P12, DOI 10.1145/73560.73562
   Ullrich Sebastian, 2022, Zenodo, DOI 10.5281/ZENODO.6684085
   Ullrich S, 2022, LOG METH COMPUT SCI, V18, DOI 10.46298/LMCS-18(2:1)2022
   Ullrich Sebastian, 2016, THESIS KIT
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
NR 29
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 109
DI 10.1145/3547640
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000020
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Baumann, P
   Majumdar, R
   Thinniyam, RS
   Zetzsche, G
AF Baumann, Pascal
   Majumdar, Rupak
   Thinniyam, Ramanathan S.
   Zetzsche, Georg
TI Context-Bounded Verification of Thread Pools
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE verification; safety; multithreaded programs; thread pool; context
   bounded; computational complexity
ID PROGRAMS
AB Thread pooling is a common programming idiom in which a fixed set of worker threads are maintained to execute tasks concurrently. The workers repeatedly pick tasks and execute them to completion. Each task is sequential, with possibly recursive code, and tasks communicate over shared memory. Executing a task can lead to more new tasks being spawned. We consider the safety verification problem for thread-pooled programs. We parameterize the problem with two parameters: the size of the thread pool as well as the number of context switches for each task. The size of the thread pool determines the number of workers running concurrently. The number of context switches determines how many times a worker can be swapped out while executing a single taskDlike many verification problems for multithreaded recursive programs, the context bounding is important for decidability.
   We show that the safety verification problem for thread-pooled, context-bounded, Boolean programs is EXPSPACE-complete, even if the size of the thread pool and the context bound are given in binary. Our main result, the EXPSPACE upper bound, is derived using a sequence of new succinct encoding techniques of independent language-theoretic interest. In particular, we show a polynomial-time construction of downward closures of languages accepted by succinct pushdown automata as doubly succinct nondeterministic finite automata. While there are explicit doubly exponential lower bounds on the size of nondeterministic finite automata accepting the downward closure, our result shows these automata can be compressed. We show that thread pooling significantly reduces computational power: in contrast, if only the context bound is provided in binary, but there is no thread pooling, the safety verification problem becomes 3EXPSPACE-complete. Given the high complexity lower bounds of related problems involving binary parameters, the relatively low complexity of safety verification with thread-pooling comes as a surprise.
C1 [Baumann, Pascal; Majumdar, Rupak; Thinniyam, Ramanathan S.; Zetzsche, Georg] Max Planck Inst Software Syst MPI SWS, Paul Ehrlich Str,Bldg G26, D-67663 Kaiserslautern, Germany.
C3 Max Planck Society
RP Baumann, P (corresponding author), Max Planck Inst Software Syst MPI SWS, Paul Ehrlich Str,Bldg G26, D-67663 Kaiserslautern, Germany.
EM pbaumann@mpi-sws.org; rupak@mpi-sws.org; thinniyam@mpi-sws.org;
   georg@mpi-sws.org
RI Thinniyam Srinivasan, Ramanathan/KVB-6618-2024; Zetzsche,
   Georg/I-5335-2018
OI Thinniyam Srinivasan, Ramanathan/0000-0002-9926-0931; Zetzsche,
   Georg/0000-0002-6421-4388; Baumann, Pascal/0000-0002-9371-0807
FU Deutsche Forschungsgemeinschaft [389792660 TRR 248sCPEC]; European
   Research Council [610150]
FX This research was sponsored in part by the Deutsche
   Forschungsgemeinschaft project 389792660 TRR 248sCPEC and by the
   European Research Council under the Grant Agreement 610150
   (http://www.impact-erc.eu/) (ERC Synergy Grant ImPACT).
CR [Anonymous], 1976, Rep. 62
   Atig MF, 2009, LECT NOTES COMPUT SC, V5505, P107, DOI 10.1007/978-3-642-00768-2_11
   Bachmeier Georg, 2015, 9 INT C LANG AUT THE, DOI [10.1007/978-3-319-15579-1_37, DOI 10.1007/978-3-319-15579-1_37]
   Ball T, 2001, LECT NOTES COMPUT SC, V2102, P260
   Ball T, 2000, LECT NOTES COMPUT SC, V1885, P113
   Baumann P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434325
   Baumann Pascal, 2020, LIPICS, V168, P1, DOI [10.4230/LIPIcs.ICALP.2020.111, DOI 10.4230/LIPICS.ICALP.2020.111]
   Chini Peter, 2017, 25 ANN EUROPEAN S AL, DOI DOI 10.4230/LIPICS.ESA.2017.27
   Courcelle B., 1991, Bull. EATCS, V44, P178
   Czerwinski Wojciech, 2022, P 62 ANN IEEE S FDN
   Esparza J., 1998, Lectures on Petri Nets I: Basic Models. Advances in Petri Nets, P374
   Ganty P, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160915
   Ginsburg S., 1966, The mathematical theory of context-free languages
   Gruber H, 2009, FUND INFORM, V91, P105, DOI 10.3233/FI-2009-0035
   Haines Leonard H., 1969, Journal of Combinatorial Theory, V6, P94, DOI [DOI 10.1016/S0021-9800(69)80111-0, 10.1016/s0021-9800(69) 80111-0, 10.1016/S0021-9800(69)80111-0]
   Higman G., 1952, Proc. Lond. Math. Soc., V3, P326
   Jhala Ranjit, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P339, DOI 10.1145/1190216.1190266
   La Torre S, 2010, LECT NOTES COMPUT SC, V6034, P96, DOI 10.1007/978-3-642-12200-2_10
   La Torre S, 2009, LECT NOTES COMPUT SC, V5643, P477, DOI 10.1007/978-3-642-02658-4_36
   Lal A, 2009, FORM METHOD SYST DES, V35, P73, DOI 10.1007/s10703-009-0078-9
   Leroux J, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785796
   Leroux Jerome, 2022, P 62 ANN IEEE S FDN
   Li JX, 2018, EUROSYS '18: PROCEEDINGS OF THE THIRTEENTH EUROSYS CONFERENCE, DOI 10.1145/3190508.3190552
   Majumdar Rupak, 2021, Tools and Algorithms for the Construction and Analysis of Systems. 27th International Conference, TACAS 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12651), P449, DOI 10.1007/978-3-030-72016-2_24
   Meyer Roland, 2018, LIPICS, V118, DOI [10.4230/ LIPIcs, DOI 10.4230/LIPICS]
   Musuvathi M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P446, DOI 10.1145/1250734.1250785
   PAPADIMITRIOU CH, 1986, INFORM CONTROL, V71, P181, DOI 10.1016/S0019-9958(86)80009-2
   Qadeer S, 2005, LECT NOTES COMPUT SC, V3440, P93
   Rackoff C., 1978, Theoretical Computer Science, V6, P223, DOI 10.1016/0304-3975(78)90036-1
   Ramalingam G, 2000, ACM T PROGR LANG SYS, V22, P416, DOI 10.1145/349214.349241
   ROSIER LE, 1986, J COMPUT SYST SCI, V32, P105, DOI 10.1016/0022-0000(86)90006-1
   Sen K, 2006, LECT NOTES COMPUT SC, V4144, P300, DOI 10.1007/11817963_29
   VANLEEUWEN J, 1978, DISCRETE MATH, V21, P237, DOI 10.1016/0012-365X(78)90156-5
NR 33
TC 1
Z9 1
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 17
DI 10.1145/3498678
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900018
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Müller, MN
   Makarchuk, G
   Singh, G
   Püschel, M
   Vechev, M
AF Muller, Mark Niklas
   Makarchuk, Gleb
   Singh, Gagandeep
   Puschel, Markus
   Vechev, Martin
TI PRIMA: General and Precise Neural Network Certification via Scalable
   Convex Hull Approximations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Robustness; Convexity; Polyhedra; Abstract Interpretation
ID ALGORITHM
AB Formal verification of neural networks is critical for their safe adoption in real-world applications. However, designing a precise and scalable verifier which can handle different activation functions, realistic network architectures and relevant specifications remains an open and difficult challenge.
   In this paper, we take a major step forward in addressing this challenge and present a new verification framework, called Prima. Prima is both (i) general: it handles any non-linear activation function, and (ii) precise: it computes precise convex abstractions involving multiple neurons via novel convex hull approximation algorithms that leverage concepts from computational geometry. The algorithms have polynomial complexity, yield fewer constraints, and minimize precision loss.
   We evaluate the effectiveness of Prima on a variety of challenging tasks from prior work. Our results show that Prima is significantly more precise than the state-of-the-art, verifying robustness to input perturbations for up to 20%, 30%, and 34% more images than existing work on ReLU-, Sigmoid-, and Tanh-based networks, respectively. Further, Prima enables, for the first time, the precise verification of a realistic neural network for autonomous driving within a few minutes.
C1 [Muller, Mark Niklas; Makarchuk, Gleb; Puschel, Markus; Vechev, Martin] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
   [Singh, Gagandeep] UIUC, Champaign, IL USA.
   [Singh, Gagandeep] VMware Res, Palo Alto, CA USA.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; University of
   Illinois System; University of Illinois Urbana-Champaign; VMware, Inc.
RP Müller, MN (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
EM mark.mueller@inf.ethz.ch; gleb.makarchuk@gmail.com; ggnds@illinois.edu;
   gasingli@vmware.com; martin.vechev@inf.ethz.ch
OI Singh, Gagandeep/0000-0002-9299-2961
CR Anderson G, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P731, DOI 10.1145/3314221.3314614
   Anderson R, 2020, MATH PROGRAM, V183, P3, DOI 10.1007/s10107-020-01474-5
   AVIS D, 1992, DISCRETE COMPUT GEOM, V8, P295, DOI 10.1007/BF02293050
   AVIS D, 1991, APPL MATH LETT, V4, P39, DOI 10.1016/0893-9659(91)90141-H
   Balunovic M., 2019, ADV NEURAL INFORM PR, P15313
   Barber CB, 1996, ACM T MATH SOFTWARE, V22, P469, DOI 10.1145/235815.235821
   BENTLEY JL, 1982, COMMUN ACM, V25, P64, DOI 10.1145/358315.358392
   Boopathy A, 2019, AAAI CONF ARTIF INTE, P3240
   Botoeva E, 2020, AAAI CONF ARTIF INTE, V34, P3291
   CHAZELLE B, 1993, DISCRETE COMPUT GEOM, V10, P377, DOI 10.1007/BF02573985
   Choi Y, 2018, IEEE T INTELL TRANSP, V19, P934, DOI 10.1109/TITS.2018.2791533
   Clarisó R, 2007, SCI COMPUT PROGRAM, V64, P115, DOI 10.1016/j.scico.2006.03.009
   Cohen J, 2019, PR MACH LEARN RES, V97
   Cousot P, 1996, ACM COMPUT SURV, V28, P324, DOI 10.1145/234528.234740
   Dantzig George Bernard, 1998, LINEAR PROGRAMMING E, V48, DOI [DOI 10.1515/9781400884179, 10. 1515/9781400884179]
   Dathathri Sumanth, 2020, Advances in Neural Information Processing Systems 33: Annual Conference on Neural Information Processing Systems 2020, NeurIPS 2020, December 6-12, 2020
   De Palma Alessandro, 2021, 9 INT C LEARN REPR I
   Edelsbrunner Herbert, 2012, ALGORITHMS COMBINATO, V10, DOI [10.1007/978-3- 642-61568-9, DOI 10.1007/978-3-642-61568-9]
   Ehlers R, 2017, LECT NOTES COMPUT SC, V10482, P269, DOI 10.1007/978-3-319-68167-2_19
   Fukuda Komei, 2020, Polyhedral Computation, DOI [DOI 10.3929/ETHZ-B-000426218, 10.3929/ethz-b- 000426218]
   Gehr T, 2018, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2018.00058
   Genov Blagoy., 2015, THESIS
   Gowal S, 2019, IEEE I CONF COMP VIS, P4841, DOI 10.1109/ICCV.2019.00494
   Gurobi Optimization LLC, 2023, Gurobi optimizer reference manual
   Huang XW, 2017, LECT NOTES COMPUT SC, V10426, P3, DOI 10.1007/978-3-319-63387-9_1
   Joswig M, 2003, ALGEBRA, GEOMETRY, AND SOFTWARE SYSTEMS, P1
   Katz G, 2019, LECT NOTES COMPUT SC, V11561, P443, DOI 10.1007/978-3-030-25540-4_26
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Khosravani HR, 2013, 2013 IEEE 8TH INTERNATIONAL SYMPOSIUM ON INTELLIGENT SIGNAL PROCESSING (WISP), P109, DOI 10.1109/WISP.2013.6657492
   Lecuyer M, 2019, P IEEE S SECUR PRIV, P656, DOI 10.1109/SP.2019.00044
   Lu J., 2020, 8 INT C LEARN REPR I
   Lyu ZY, 2020, AAAI CONF ARTIF INTE, V34, P5037
   Marechal Alexandre, 2017, EFFICIENT ELIMINATIO
   Mirman M, 2018, PR MACH LEARN RES, V80
   Morrison DR, 2016, DISCRETE OPTIM, V19, P79, DOI 10.1016/j.disopt.2016.01.005
   Motzkin Theodore S, 1953, Annals of Mathematics Studies, V28, P51, DOI 10.1515/9781400881970-004
   Mudigonda P, 2020, J MACH LEARN RES, V21, P2020
   Muller Christoph, 2021, P MACH LEARN SYST ML
   Muller Christoph, 2020, ARXIVCSLG200710868
   Raghunathan Aditi, 2018, Advances in neural information processing systems
   Ruoss Anian, 2020, ADV NEURAL INFORM PR
   Ruoss Anian, 2020, ABS200909318 ARXIV
   Salman H, 2019, 33 C NEURAL INFORM P, V32
   Salman H., 2019, ADV NEURAL INFORM PR, V32, P9832
   Sartipizadeh Hossein, 2016, ABS160304422 ARXIV
   SEIDEL R, 1995, COMP GEOM-THEOR APPL, V5, P115, DOI 10.1016/0925-7721(95)00013-Y
   Singh G, 2019, 33 C NEURAL INFORM P, V32
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Singh G, 2018, ADV NEUR IN, V31
   Singh G, 2017, ACM SIGPLAN NOTICES, V52, P46, DOI 10.1145/3093333.3009885
   Singh Gagandeep, 2019, INT C LEARN REPR
   Szegedy C, 2014, Arxiv, DOI [arXiv:1312.6199, DOI 10.1109/CVPR.2015.7298594]
   Tjandraatmadja Christian, 2020, ADV NEURAL INFORM PR
   Tjeng V, 2019, ICLR
   Udacity, 2016, US DEEP LEARN PRED S
   Urban Caterina, 2021, ABS210402466 ARXIV
   Vladu Adrian, 2018, PROC 6 INT C LEARN R
   Wang S., 2021, 9 INT C LEARN REPR I
   Wang SQ, 2018, ADV NEUR IN, V31
   Wang Shiqi, 2021, ABS210306624 ARXIV
   Weng TW, 2018, PR MACH LEARN RES, V80
   Wong E, 2018, ADV NEUR IN, V31
   Xiang WM, 2018, IEEE T NEUR NET LEAR, V29, P5777, DOI 10.1109/TNNLS.2018.2808470
   Xu Kaidi, 2020, P ADV NEURAL INFORM
   Xu ZB, 1998, APPL MATH COMPUT, V94, P193, DOI 10.1016/S0096-3003(97)10043-1
   Zhang H, 2018, ADV NEUR IN, V31
   Zhong JH, 2014, IEEE IJCNN, P1587, DOI 10.1109/IJCNN.2014.6889699
NR 67
TC 26
Z9 28
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 43
DI 10.1145/3498704
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900044
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Porncharoenwase, S
   Nelson, L
   Wang, X
   Torlak, E
AF Porncharoenwase, Sorawee
   Nelson, Luke
   Wang, Xi
   Torlak, Emina
TI A Formal Foundation for Symbolic Evaluation with Merging
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE symbolic evaluation; state merging
AB Reusable symbolic evaluators are a key building block of solver-aided verification and synthesis tools. A reusable evaluator reduces the semantics of all paths in a program to logical constraints, and a client tool uses these constraints to formulate a satisfiability query that is discharged with SAT or SMT solvers. The correctness of the evaluator is critical to the soundness of the tool and the domain properties it aims to guarantee. Yet so far, the trust in these evaluators has been based on an ad-hoc foundation of testing and manual reasoning.
   This paper presents the first formal framework for reasoning about the behavior of reusable symbolic evaluators. We develop a newsymbolic semantics for these evaluators that incorporates state merging. Symbolic evaluators use state merging to avoid path explosion and generate compact encodings. To accommodate a wide range of implementations, our semantics is parameterized by a symbolic factory, which abstracts away the details of merging and creation of symbolic values. The semantics targets a rich language that extends Core Scheme with assumptions and assertions, and thus supports branching, loops, and (first-class) procedures. The semantics is designed to support reusability, by guaranteeing two key properties: legality of the generated symbolic states, and the reducibility of symbolic evaluation to concrete evaluation. Legality makes it simpler for client tools to formulate queries, and reducibility enables testing of client tools on concrete inputs. We use the Lean theorem prover to mechanize our symbolic semantics, prove that it is sound and complete with respect to the concrete semantics, and prove that it guarantees legality and reducibility.
   To demonstrate the generality of our semantics, we develop Leanette, a reference evaluator written in Lean, and Rosette 4, an optimized evaluator written in Racket. We prove Leanette correct with respect to the semantics, and validate Rosette 4 against Leanette via solver-aided differential testing. To demonstrate the practicality of our approach, we port 16 published verification and synthesis tools from Rosette 3 to Rosette 4. Rosette 3 is an existing reusable evaluator that implements the classic merging semantics, adopted from bounded model checking. Rosette 4 replaces the semantic core of Rosette 3 but keeps its optimized symbolic factory. Our results show that Rosette 4 matches the performance of Rosette 3 across a wide range of benchmarks, while providing a cleaner interface that simplifies the implementation of client tools.
C1 [Porncharoenwase, Sorawee; Nelson, Luke; Wang, Xi; Torlak, Emina] Univ Washington, Paul G Allen Sch, Seattle, WA 98195 USA.
C3 University of Washington; University of Washington Seattle
RP Porncharoenwase, S (corresponding author), Univ Washington, Paul G Allen Sch, Seattle, WA 98195 USA.
EM sorawee@cs.washington.edu; lukenels@cs.washington.edu;
   xi@cs.washington.edu; emina@cs.washington.edu
FU National Science Foundation [CCF-1651225, CCF-1836724, CNS-1844807];
   VMware University Research Fund
FX We thank the anonymous reviewers for their helpful feedback. This work
   is supported by the National Science Foundation under Grant Nos.
   CCF-1651225, CCF-1836724, CNS-1844807, and by a gift from the VMware
   University Research Fund.
CR .Amazon Web Services, 2018, QUIV
   Barman S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P339
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Blanchette JasminChristian., 2017, Proceedings of the 26th International Joint Conference on Artificial Intelligence (IJCAI), P4786, DOI DOI 10.24963/IJCAI.2017/667
   Bornholt J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276519
   Bornholt J, 2017, ACM SIGPLAN NOTICES, V52, P467, DOI [10.1145/3140587.3062353, 10.1145/3062341.3062353]
   Bornholt J, 2016, ACM SIGPLAN NOTICES, V51, P83, DOI 10.1145/2954679.2872406
   Borning A, 2016, COMPANION PROCEEDINGS OF THE 15TH INTERNATIONAL CONFERENCE ON MODULARITY (MODULARITY COMPANION'16), P45, DOI 10.1145/2892664.2892667
   Butler E, 2017, PROCEEDINGS OF THE 12TH INTERNATIONAL CONFERENCE ON THE FOUNDATIONS OF DIGITAL GAMES (FDG'17), DOI 10.1145/3102071.3102084
   Chandra K, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158150
   Chlipala A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P93, DOI 10.1145/1706299.1706312
   Chu Shumo, 2017, P 8 BIENN C INN DAT
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Clarke Edmund, 2003, CMUCS03126, DOI [10.1145/775832.775928, DOI 10.1145/775832.775928]
   Clarke L. A., 1976, IEEE Transactions on Software Engineering, VSE-2, P215, DOI 10.1109/TSE.1976.233817
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cruz-Filipe L, 2017, LECT NOTES ARTIF INT, V10395, P220, DOI 10.1007/978-3-319-63046-5_14
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Moura Leonardo, 2015, P 25 INT C AUT DED C
   Felleisen M, 2018, COMMUN ACM, V61, P62, DOI 10.1145/3127323
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Flatt Matthew., 2010, Technical Report PLT-TR-2010-1
   Fleming M., 2017, Linux Weekly News
   Jourdan JH, 2015, ACM SIGPLAN NOTICES, V50, P247, DOI [10.1145/2775051.2676966, 10.1145/2676726.2676966]
   Jourdan Jacques-Henri., 2016, THESIS U PARIS DIDER
   Kazerounian Milod, 2018, P 19 INT C VER MOD C
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Lucanu D, 2017, J SYMB COMPUT, V80, P125, DOI 10.1016/j.jsc.2016.07.012
   McKeeman William M.., 1998, DIGITAL TECHNICAL J, V10
   Nelson L, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P225, DOI 10.1145/3341301.3359641
   Nelson Luke., 2020, P 14 USENIX S OP SYS, p41s61
   New MS, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796817000107
   Nguyên PC, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000216
   Niemetz Aina, 2014, J. Satisf. Boolean Model. Comput, V9, P53, DOI [10.3233/sat190101, DOI 10.3233/SAT190101]
   Phothilimthana PM, 2016, ACM SIGPLAN NOTICES, V51, P297, DOI 10.1145/2954679.2872387
   Santos Jose Fragoso, 2020, PROGRAMMING LANGUAGE, DOI DOI 10.1145/3385412.3386014
   Sen K, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P842, DOI 10.1145/2786805.2786830
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Swords Sol Otis., 2010, THESIS U TEXAS AUSTI
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Torlak Emina, 2013, P 2013 ACM INT S NEW, P135, DOI DOI 10.1145/2509578.2509586
   Uhler R, 2014, ACM SIGPLAN NOTICES, V49, P157, DOI [10.1145/2660193.2660208, 10.1145/2714064.2660208]
   Wang Xi, 2016, P 28 INT C COMP AID, V2, p23s41
   Weitz K, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110269
   Weitz K, 2016, ACM SIGPLAN NOTICES, V51, P765, DOI 10.1145/3022671.2984012
   Willsey M, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P183, DOI 10.1145/3297858.3304027
   Winterer D, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P718, DOI 10.1145/3385412.3385985
NR 49
TC 5
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 47
DI 10.1145/3498709
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900048
OA gold
DA 2024-07-18
ER

PT J
AU Goel, A
   Donat-Bouillud, P
   Krikava, F
   Kirsch, CM
   Vitek, J
AF Goel, Aviral
   Donat-Bouillud, Pierre
   Krikava, Filip
   Kirsch, Christoph M.
   Vitek, Jan
TI What We Eval in the Shadows A Large-Scale Study of Eval in R Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE eval; dynamic languages
AB Most dynamic languages allow users to turn text into code using various functions, often named eval, with language-dependent semantics. The widespread use of these reflective functions hinders static analysis and prevents compilers from performing optimizations. This paper aims to provide a better sense of why programmers use eval. Understanding why eval is used in practice is key to finding ways to mitigate its negative impact. We have reasons to believe that reflective feature usage is language and application domain-specific; we focus on data science code written in R and compare our results to previous work that analyzed web programming in JavaScript. We analyze 49,296,059 calls to eval from 240,327 scripts extracted from 15,401 R packages. We find that eval is indeed in widespread use; R's eval is more pervasive and arguably dangerous than what was previously reported for JavaScript.
C1 [Goel, Aviral; Vitek, Jan] Northeastern Univ, Boston, MA 02115 USA.
   [Donat-Bouillud, Pierre; Krikava, Filip; Kirsch, Christoph M.; Vitek, Jan] Czech Tech Univ, Prague, Czech Republic.
   [Kirsch, Christoph M.] Univ Salzburg, Salzburg, Austria.
C3 Northeastern University; Czech Technical University Prague; Salzburg
   University
RP Goel, A (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
RI Vitek, Jan/J-9051-2014
OI Donat-Bouillud, Pierre/0000-0003-4455-1130; Goel,
   Aviral/0000-0002-0814-5015
FU National Science Foundation [1759736, 1544542, 1925644, 1910850]; Czech
   Ministry of Education, Youth and Sports from the Czech Operational
   Programme Research, Development, and Education
   [CZ.02.1.01/0.0/0.0/15_003/0000421]; European Research Council (ERC)
   under the European Union [695412]; Direct For Biological Sciences; Div
   Of Biological Infrastructure [1759736] Funding Source: National Science
   Foundation; Direct For Computer & Info Scie & Enginr; Division Of
   Computer and Network Systems [1925644] Funding Source: National Science
   Foundation; Direct For Computer & Info Scie & Enginr; Division of
   Computing and Communication Foundations [1910850, 1544542] Funding
   Source: National Science Foundation
FX This work has received funding from the National Science Foundation
   awards 1759736, 1544542, 1925644, and 1910850, the Czech Ministry of
   Education, Youth and Sports from the Czech Operational Programme
   Research, Development, and Education, under grant agreement No.
   CZ.02.1.01/0.0/0.0/15_003/0000421, and the European Research Council
   (ERC) under the European Union's Horizon 2020 research and innovation
   programme, under grant agreement No. 695412.
CR Allaire J J., rmarkdown: Dynamic Documents for R 2021
   Arceri V, 2021, ACM T PRIV SECUR, V24, DOI 10.1145/3426470
   Belyakova J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428275
   Bezanson J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276490
   Bezanson Jeff, 2012, Julia: A fast dynamic language for technical computing
   Bodden E, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P241, DOI 10.1145/1985793.1985827
   Callaú O, 2013, EMPIR SOFTW ENG, V18, P1156, DOI 10.1007/s10664-012-9203-2
   Chen ZF, 2018, SCI CHINA INFORM SCI, V61, DOI 10.1007/s11432-017-9153-3
   Christensen AS, 2003, LECT NOTES COMPUT SC, V2694, P1
   Flückiger O, 2019, PROCEEDINGS OF THE 15TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES (DLS '19), P55, DOI 10.1145/3359619.3359744
   Goel A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360579
   Gong L., 2018, THESIS U CALIFORNIA
   Ihaka R., 1996, J COMPUTATIONAL GRAP, V5, P299, DOI [DOI 10.1080/10618600.1996.10474713, 10.2307/1390807, DOI 10.2307/1390807]
   Jensen Simon Holm, 2012, International Symposium on Software Testing and Analysis, ISSTA 2012, Minneapolis, MN, USA, July 15-20, 2012, P34, DOI DOI 10.1145/2338965.2336758
   Krikava F, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P232, DOI 10.1145/3213846.3213863
   Liang S, 1998, ACM SIGPLAN NOTICES, V33, P36, DOI 10.1145/286942.286945
   Livshits B, 2015, COMMUN ACM, V58, P44, DOI 10.1145/2644805
   McCarthy J., 1978, SIGPLAN Notices, V13, P217, DOI 10.1145/960118.808387
   Meawad F, 2012, ACM SIGPLAN NOTICES, V47, P607, DOI 10.1145/2398857.2384660
   Morandat F, 2012, LECT NOTES COMPUT SC, V7313, P104, DOI 10.1007/978-3-642-31057-7_6
   Raats M. M., 1991, Food Quality and Preference, V3, P89, DOI 10.1016/0950-3293(91)90028-D
   Richards G, 2011, LECT NOTES COMPUT SC, V6813, P52, DOI 10.1007/978-3-642-22655-7_4
   Richards Gregor, 2010, PROGRAMMING LANGUAGE, DOI [10.1145/1809028, DOI 10.1145/1809028]
   Tange O., 2018, GNU Parallel
   Wang B, 2015, Soc. Sci. Res, P134
   Wickham H., 2019, J OPEN SOURCE SOFTW, V4, P1686, DOI [10.21105/joss.01686, DOI 10.21105/JOSS.01686]
   Wickham H., 2016, GGPLOT2 ELEGANT GRAP, DOI [10.1007/978-3-319-24277-4, DOI 10.1007/978-3-319-24277-4]
NR 27
TC 1
Z9 1
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 125
DI 10.1145/3485502
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200029
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU He, P
   Westbrook, E
   Carmer, B
   Phifer, C
   Robert, V
   Smeltzer, K
   Stefanescu, A
   Tomb, A
   Wick, A
   Yacavone, M
   Zdancewic, S
AF He, Paul
   Westbrook, Eddy
   Carmer, Brent
   Phifer, Chris
   Robert, Valentin
   Smeltzer, Karl
   Stefanescu, Andrei
   Tomb, Aaron
   Wick, Adam
   Yacavone, Matthew
   Zdancewic, Steve
TI A Type System for Extracting Functional Specifications from Memory-Safe
   Imperative Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Specification extraction; type systems; pointers; memory safety
AB Verifying imperative programs is hard. A key difficulty is that the specification of what an imperative program does is often intertwined with details about pointers and imperative state. Although there are a number of powerful separation logics that allow the details of imperative state to be captured and managed, these details are complicated and reasoning about them requires significant time and expertise. In this paper, we take a different approach: a memory-safe type system that, as part of type-checking, extracts functional specifications from imperative programs. This disentangles imperative state, which is handled by the type system, from functional specifications, which can be verified without reference to pointers. A key difficulty is that sometimes memory safety depends crucially on the functional specification of a program; e.g., an array index is only memory-safe if the index is in bounds. To handle this case, our specification extraction inserts dynamic checks into the specification. Verification then requires the additional proof that none of these checks fail. However, these checks are in a purely functional language, and so this proof also requires no reasoning about pointers.
C1 [He, Paul; Zdancewic, Steve] Univ Penn, Philadelphia, PA 19104 USA.
   [Westbrook, Eddy; Carmer, Brent; Phifer, Chris; Robert, Valentin; Smeltzer, Karl; Stefanescu, Andrei; Tomb, Aaron; Wick, Adam; Yacavone, Matthew] Galois Inc, Portland, OR USA.
C3 University of Pennsylvania; Galois, Inc.
RP He, P (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
RI Zdancewic, Steve/JXL-6845-2024
FU National Science Foundation [1521539]; ONR [N00014-17-1-2930]
FX This material is based upon work supported by the National Science
   Foundation under Grant No. 1521539 and the ONR under Grant No.
   N00014-17-1-2930. Any opinions, findings, and conclusions or
   recommendations expressed in this material are those of the author and
   do not necessarily reflect the views of the National Science Foundation
   or the ONR.
CR Appel Andrew W, 2014, PROGRAM LOGICS CERTI, DOI DOI 10.1017/CBO9781107256552
   Astrauskas V, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360573
   Beringer Lennart, 2019, Formal Methods - The Next 30 Years. Third World Congress, FM 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11800), P573, DOI 10.1007/978-3-030-30942-8_34
   Bizjak Ales, 2017, P 33 C MATH FDN PROG
   Boutin S., 1997, Theoretical Aspects of Computer Software. Third International Symposium, TACS '97. Proceedings, P515, DOI 10.1007/BFb0014565
   BROWNE MC, 1988, THEOR COMPUT SCI, V59, P115, DOI 10.1016/0304-3975(88)90098-9
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Chudnov A, 2018, LECT NOTES COMPUT SC, V10982, P430, DOI 10.1007/978-3-319-96142-2_26
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Clarke EM, 1999, MODEL CHECKING, P1
   de Nicola Rocco, 1990, P 5 ANN IEEE S LOG C
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Dockins R, 2016, LECT NOTES COMPUT SC, V9971, P56, DOI 10.1007/978-3-319-48869-1_5
   Dodds M, 2009, LECT NOTES COMPUT SC, V5502, P363, DOI 10.1007/978-3-642-00590-9_26
   Feng XY, 2009, ACM SIGPLAN NOTICES, V44, P315, DOI 10.1145/1594834.1480922
   Gondelman Leon, P 48 ANN ACM SIGPLAN
   Gordon CS, 2013, ACM SIGPLAN NOTICES, V48, P73, DOI 10.1145/2499370.2462160
   Jeker Claudio, 2008, P ASIABSDCON
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Koh N, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P234, DOI 10.1145/3293880.3294106
   Krishna S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P181, DOI 10.1145/3385412.3386029
   Leroy X, 2008, J AUTOM REASONING, V41, P1, DOI 10.1007/s10817-008-9099-0
   Maillard K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341708
   Malecha Gregory, 2014, Interactive Theorem Proving. 5th International Conference, ITP 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8558, P374, DOI 10.1007/978-3-319-08970-6_24
   Matsushita Yusuke, 2020, LECT NOTES COMPUT SC, P484, DOI DOI 10.1007/978-3-030-44914-8_18
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Parkinson MJ, 2011, LECT NOTES COMPUT SC, V6602, P439, DOI 10.1007/978-3-642-19718-5_23
   Redox Developers, RED OP SYST
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Silver L, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434307
   Smans J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160911
   Sprenger C, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428220
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Ullrich Sebastian, 2016, THESIS KARLSRUHE I T
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
NR 39
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 135
DI 10.1145/3485512
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200038
OA gold
DA 2024-07-18
ER

PT J
AU Karachalias, G
   Koprivec, F
   Pretnar, M
   Schrijvers, T
AF Karachalias, Georgios
   Koprivec, Filip
   Pretnar, Matija
   Schrijvers, Tom
TI Efficient Compilation of Algebraic Effect Handlers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE algebraic effect handlers; optimising compilation; OCAML
AB The popularity of algebraic effect handlers as a programming language feature for user-defined computational effects is steadily growing. Yet, even though efficient runtime representations have already been studied, most handler-based programs are still much slower than hand-written code.
   This paper shows that the performance gap can be drastically narrowed (in some cases even closed) by means of type-and-effect directed optimising compilation. Our approach consists of source-to-source transformations in two phases of the compilation pipeline. Firstly, elementary rewrites, aided by judicious function specialisation, exploit the explicit type and effect information of the compiler's core language to aggressively reduce handler applications. Secondly, after erasing the effect information further rewrites in the backend of the compiler emit tight code.
   This work comes with a practical implementation: an optimising compiler from EFF, an ML style language with algebraic effect handlers, to OCAML. Experimental evaluation with this implementation demonstrates that in a number of benchmarks, our approach eliminates much of the overhead of handlers, outperforms capability-passing style compilation and yields competitive performance compared to hand-written OCAML code as well Multicore OCAML'S dedicated runtime support.
C1 [Karachalias, Georgios] Tweag, Paris, France.
   [Koprivec, Filip; Pretnar, Matija] Univ Ljubljana, Ljubljana, Slovenia.
   [Koprivec, Filip; Pretnar, Matija] Inst Math Phys & Mech, Ljubljana, Slovenia.
   [Schrijvers, Tom] Katholieke Univ Leuven, Leuven, Belgium.
C3 University of Ljubljana; KU Leuven
RP Karachalias, G (corresponding author), Tweag, Paris, France.
EM georgios.karachalias@tweag.io; filip.koprivec@fmf.uni-lj.si;
   matija.pretnar@fmf.uni-lj.si; tom.schrijvers@kuleuven.be
RI Schrijvers, Tom/A-6696-2016
OI Schrijvers, Tom/0000-0001-8771-5559; Pretnar,
   Matija/0000-0001-7755-2303; Koprivec, Filip/0000-0001-9624-9369
FU Air Force Office of Scientific Research [FA9550-14-1-0096,
   FA9550-17-1-0326, FA9550-21-1-0024]; Flemish Fund for Scientific
   Research (FWO)
FX We are indebted to Amr Hany Saleh, Brecht Serckx and Philipp Schuster
   for valuable contributions and support. We are grateful to Nicolas Wu,
   Mauro Jaskelioff, Ruben Pieters, Alexander Vandenbroucke, Klara
   Mardirosian, and the members of IFIP WG 2.1 as well as the anonymous
   reviewers of ICFP 2017 and OOPSLA 2021 for their helpful comments. We
   also appreciate the feedback from the participants of Dagstuhl seminars
   16112, 18172, 21292 and Shonan meeting 146. This material is partly
   based upon work supported by the Air Force Office of Scientific Research
   under award numbers FA9550-14-1-0096, FA9550-17-1-0326 and
   FA9550-21-1-0024, and partly funded by the Flemish Fund for Scientific
   Research (FWO).
CR Bauer A, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:9)2014
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Brachthauser Jonathan Immanuel, 2020, P ACM PROGRAM LANG, DOI [10.1145/3408975, DOI 10.1145/3408975]
   Dolan S., 2015, OCAML WORKSHOP
   Dolan Stephen, 2017, P S TRENDS FUNCT PRO, DOI DOI 10.1007/978-3-319-89719-6_6
   Hillerström D, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000040
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kammar O, 2012, ACM SIGPLAN NOTICES, V47, P349, DOI 10.1145/2103621.2103698
   Karachalias G, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000131
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Kiselyov O, 2013, ACM SIGPLAN NOTICES, V48, P59, DOI 10.1145/2503778.2503791
   Kiselyov O, 2012, THEOR COMPUT SCI, V435, P56, DOI 10.1016/j.tcs.2012.02.025
   Kiselyov  Oleg, 2016, ML WORKSH, DOI [10.4204/eptcs.285.2, 10.4204/EPTCS.285.2, DOI 10.4204/EPTCS.285.2]
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Lindley S., 2016, OCAML WORKSH
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Luksic Z, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796819000212
   Ningning Xie, 2021, Proceedings of the ACM on Programming Languages, V5, DOI 10.1145/3473576
   Ohori Atsushi, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P143, DOI 10.1145/1190216.1190241
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Saleh Amr Hany, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P327, DOI 10.1007/978-3-319-89884-1_12
   Saleh AH, 2016, THEOR PRACT LOG PROG, V16, P884, DOI 10.1017/S147106841600034X
   Schrijvers T, 2013, THEOR PRACT LOG PROG, V13, P533, DOI 10.1017/S1471068413000331
   van der Ploeg A, 2014, ACM SIGPLAN NOTICES, V49, P133, DOI [10.1145/2633357.2633360, 10.1145/2775050.2633360]
   Wu N, 2015, LECT NOTES COMPUT SC, V9129, P302, DOI 10.1007/978-3-319-19797-5_15
NR 28
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 102
DI 10.1145/3485479
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200006
OA Green Accepted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Madsen, M
   Van de Pol, J
AF Madsen, Magnus
   van de Pol, Jaco
TI Relational Nullable Types with Boolean Unification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE relational nullable type system; relational pattern matching; choose
   construct; type inference; Algorithm W; Boolean unification; successive
   variable elimination algorithm
AB We present a simple, practical, and expressive relational nullable type system. A relational nullable type system captures whether an expression may evaluate to null based on its type, but also based on the type of other related expressions. The type system extends the Hindley-Milner type system with Boolean constraints, supports parametric polymorphism, and preserves principal types modulo Boolean equivalence. We show how to support full Hindley-Milner style type inference with an extension of Algorithm W.
   We conduct a preliminary study of open source projects showing that there is a need for relational nullable type systems across a wide range of programming languages. The most important findings from the study are: (i) programmers use programming patterns where the nullability of one expression depends on the nullability of other related expressions, (ii) such invariants are commonly enforced with run-time exceptions, and (iii) reasoning about these programming patterns requires not only knowledge of when an expression may evaluate to null, but also when it may evaluate to a non-null value. We incorporate these observations in the design of the proposed relational nullable type system.
C1 [Madsen, Magnus; van de Pol, Jaco] Aarhus Univ, Dept Comp Sci, Abogade 34, DK-8210 Aarhus, Denmark.
C3 Aarhus University
RP Madsen, M (corresponding author), Aarhus Univ, Dept Comp Sci, Abogade 34, DK-8210 Aarhus, Denmark.
EM magnusm@cs.au.dk; jaco@cs.au.dk
OI van de Pol, J.C./0000-0003-4305-0625
CR Amin N, 2016, ACM SIGPLAN NOTICES, V51, P838, DOI 10.1145/3022671.2984004
   [Anonymous], 1974, Boolean functions and equations
   Baader F, 1998, INFORM PROCESS LETT, V67, P215, DOI 10.1016/S0020-0190(98)00106-9
   Banerjee S, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P740, DOI 10.1145/3338906.3338919
   Boole G., 1847, The mathematical analysis of logic
   BOUDET A, 1989, J SYMB COMPUT, V8, P449, DOI 10.1016/S0747-7171(89)80054-9
   Brotherston D, 2017, CC'17: PROCEEDINGS OF THE 26TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P87, DOI 10.1145/3033019.3033032
   BUTTNER W, 1987, J SYMB COMPUT, V4, P191, DOI 10.1016/S0747-7171(87)80065-2
   Chalin P, 2007, LECT NOTES COMPUT SC, V4609, P227
   Chitil O, 2001, ACM SIGPLAN NOTICES, V36, P193, DOI 10.1145/507669.507659
   Damas Luis, 1984, Ph. D. Dissertation
   Fähndrich M, 2003, ACM SIGPLAN NOTICES, V38, P302, DOI 10.1145/949343.949332
   Fahndrich Manuel, 2007, P OBJECT ORIENTED PR
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Hubert L, 2008, LECT NOTES COMPUT SC, V5051, P132, DOI 10.1007/978-3-540-68863-1_9
   Jones Mark P, 2003, Qualified types: theory and practice
   Lowenheim Leopold, 1908, AUFLOSUNGSPROBLEM LO
   Madsen M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428193
   Madsen M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428222
   Madsen M, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P38, DOI 10.1145/3213846.3213847
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   Male C, 2008, LECT NOTES COMPUT SC, V4959, P229
   MARTELLI A, 1982, ACM T PROGR LANG SYS, V4, P258, DOI 10.1145/357162.357169
   MARTIN U, 1989, J SYMB COMPUT, V7, P275, DOI 10.1016/S0747-7171(89)80013-6
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Nieto Abel, 2020, P EUR C OBJ OR PROGR
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Qi X, 2009, ACM SIGPLAN NOTICES, V44, P53, DOI 10.1145/1594834.1480890
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Spoto F, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P21, DOI 10.1109/SEFM.2008.8
   Summers Alexander J, 2011, P OBJECT ORIENTED PR
   Tobin-Hochstadt S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P117
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Vazou Niki, 2014, P INT C FUNCT PROGR
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 36
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 110
DI 10.1145/3485487
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200014
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Popescu, N
   Xu, ZY
   Apostolakis, S
   August, DI
   Levy, A
AF Popescu, Natalie
   Xu, Ziyang
   Apostolakis, Sotiris
   August, David, I
   Levy, Amit
TI Safer at Any Speed: Automatic Context-Aware Safety Enhancement for Rust
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Rust; bounds checks; safety-performance trade-off
AB Type-safe languages improve application safety by eliminating whole classes of vulnerabilities-such as buffer overflows-by construction. However, this safety sometimes comes with a performance cost. As a result, many modern type-safe languages provide escape hatches that allow developers to manually bypass them. The relative value of performance to safety and the degree of performance obtained depends upon the application context, including user goals and the hardware upon which the application is to be executed. Since libraries may be used in many different contexts, library developers cannot make safety-performance trade-off decisions appropriate for all cases. Application developers can tune libraries themselves to increase safety or performance, but this requires extra effort and makes libraries less reusable. To address this problem, we present NADER, a Rust development tool that makes applications safer by automatically transforming unsafe code into equivalent safe code according to developer preferences and application context. In end-to-end system evaluations in a given context, NADER automatically reintroduces numerous library bounds checks, in many cases making application code that uses popular Rust libraries safer with no corresponding loss in performance.
C1 [Popescu, Natalie; Xu, Ziyang; August, David, I; Levy, Amit] Princeton Univ, Princeton, NJ 08544 USA.
   [Apostolakis, Sotiris] Google, Mountain View, CA 94043 USA.
C3 Princeton University; Google Incorporated
RP Popescu, N (corresponding author), Princeton Univ, Princeton, NJ 08544 USA.
EM npopescu@princeton.edu; ziyangx@princeton.edu; apostolakis@google.com;
   august@princeton.edu; aalevy@cs.princeton.edu
OI Xu, Ziyang/0000-0002-8297-7573; Levy, Amit/0000-0003-1479-8917
FU Google; National Science Foundation (NSF) [CCF-2028733, CCF-1814654,
   CCF-2119070]
FX We thank the reviewers for their invaluable comments and suggestions.
   This work was supported by Google and the National Science Foundation
   (NSF) through Grants CCF-2028733, CCF-1814654, and CCF-2119070. All
   opinions, findings, conclusions, and recommendations expressed in this
   paper are those of the authors and do not necessarily reflect the views
   of the NSF.
CR Akritidis P., 2009, P 18 C USENIX SEC S, V10, P51
   Akritidis P, 2008, P IEEE S SECUR PRIV, P263, DOI 10.1109/SP.2008.30
   Alakuijala J, 2019, ACM T INFORM SYST, V37, DOI 10.1145/3231935
   Apple, 2021 SWIFT PROGR LAN
   Astrauskas V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428204
   AWS, 2021, FIR
   BLAKE3 Team, 2021, BLAKE3
   Bodik R, 2000, ACM SIGPLAN NOTICES, V35, P321, DOI 10.1145/358438.349342
   Cloudflare, 2021, BOR TUN
   Cloudflare, 2021, QUICH
   Curtsinger C, 2018, COMMUN ACM, V61, P91, DOI 10.1145/3205911
   Deorowicz S., 2003, SILESIA COMPRESSION
   Dhurjati D, 2006, ACM SIGPLAN NOTICES, V41, P144, DOI 10.1145/1133981.1133999
   Diesel Team, 2021, DIESEL SAF EXT ORM Q
   Donovan Alan A.A., 2015, The Go Programming Language, V1st
   Dropbox, 2020, DROPB RUST BROTL DEC
   Durumeric Z, 2014, PROCEEDINGS OF THE 2014 ACM INTERNET MEASUREMENT CONFERENCE (IMC'14), P475, DOI 10.1145/2663716.2663755
   Evans AN, 2020, PROC INT CONF SOFTW, P246
   fnm Team, 2021, FAST NOD MAN
   Google, 2021, FLATBUFFERS
   Hyperium, 2021, TON
   InfluxData, 2021, FLUX INFL DAT LANG
   Iron Team, 2021, IRON
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Kocher P, 2019, P IEEE S SECUR PRIV, P1, DOI 10.1109/SP.2019.00002
   KOLTE P, 1995, SIGPLAN NOTICES, V30, P270, DOI 10.1145/223428.207160
   Kulkarni C, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P627
   Lipp M, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P973
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   McSherry Frank, 2015, 15 WORKSH HOT TOP OP
   Mozilla, 2021, Geckoview
   Nagarakatte S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P245, DOI 10.1145/1542476.1542504
   OpenSSL, 2021, OPENSSL
   Panda A, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P203
   PATTERSON JRC, 1995, SIGPLAN NOTICES, V30, P67, DOI 10.1145/223428.207117
   Qian F, 2002, LECT NOTES COMPUT SC, V2304, P325
   Qin BQ, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P763, DOI 10.1145/3385412.3386036
   rage Team, 2021, RAGE
   Rugina R, 1999, ACM SIGPLAN NOTICES, V34, P72, DOI 10.1145/329366.301111
   Rust Graphics Mages, 2021, GFX
   Rust Language Team, 2021, UNS RUST
   RustPython Team, 2021, RUSTPYTHON
   Ruwase Olatunji, 2004, NDSS, P159
   Servo Project Developers, 2021, SERV PROJ
   Sonic Team, 2021, SON
   swc Team, 2021, SWC
   tantivy Team, 2021, TANT
   Terei D, 2012, ACM SIGPLAN NOTICES, V47, P137, DOI 10.1145/2430532.2364524
   TiKV Project, 2021, TIKV
   Timber, 2021, VECT
   Warp Team, 2021, WARP
   Wasmer, 2021, WASM
   Weidendorfer J, 2004, LECT NOTES COMPUT SC, V3038, P440
   wrk Project, 2021, WRK
   Wurthinger Thomas., 2007, PPPJ 07, P125
   Zhao X, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P565, DOI 10.1145/3132747.3132778
   Zola Team, 2021, ZOLA
NR 57
TC 3
Z9 4
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 103
DI 10.1145/3485480
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200007
OA gold
DA 2024-07-18
ER

PT J
AU Schwerter, FB
   Clark, AM
   Jafery, KA
   Garcia, R
AF Schwerter, Felipe Banados
   Clark, Alison M.
   Jafery, Khurram A.
   Garcia, Ronald
TI Abstracting Gradual Typing Moving Forward: Precise and Space-Efficient
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE gradual typing; cast calculi; abstract interpretation; subtyping
AB Gradual Typing (AGT) is a systematic approach to designing gradually-typed languages. Languages developed using AGT automatically satisfy the formal semantic criteria for gradual languages identified by Siek et al. Nonetheless, vanilla AGT semantics can still have important shortcomings. First, a gradual language's runtime checks should preserve the space-efficiency guarantees inherent to the underlying static and dynamic languages. To the contrary, the default operational semantics of AGT break proper tail calls. Second, a gradual language's runtime checks should enforce basic modular type-based invariants expected from the static type discipline. To the contrary, the default operational semantics of AGT may fail to enforce some invariants in surprising ways. We demonstrate this in the GTFL. language of Garcia et al.
   This paper addresses both problems at once by refining the theory underlying AGT's dynamic checks. Garcia et al. observe that AGT involves two abstractions of static types: one for the static semantics and one for the dynamic semantics. We recast the latter as an abstract interpretation of subtyping itself, while gradual types still abstract static types. Then we show how forward-completeness (Giacobazzi and Quintarelli) is key to supporting both space-efficient execution and reliable runtime type enforcement.
C1 [Schwerter, Felipe Banados; Garcia, Ronald] Univ British Columbia, Dept Comp Sci, Software Practices Lab, 201-2366 Main Mall, Vancouver, BC V6T 124, Canada.
   [Clark, Alison M.] Univ British Columbia, Vancouver, BC, Canada.
   [Jafery, Khurram A.] Amazon, Vancouver, BC, Canada.
C3 University of British Columbia; University of British Columbia
RP Schwerter, FB (corresponding author), Univ British Columbia, Dept Comp Sci, Software Practices Lab, 201-2366 Main Mall, Vancouver, BC V6T 124, Canada.
EM fbanados@cs.ubc.ca; alison.marie.clark@gmail.com;
   khurram.jafery@gmail.com; rxg@cs.ubc.ca
FU Natural Sciences and Engineering Research Council of Canada (NSERC);
   Cette recherche a ete financee par le Conseil de recherches en sciences
   naturelles et en genie du Canada (CRSNG)
FX We acknowledge the support of the Natural Sciences and Engineering
   Research Council of Canada (NSERC). Cette recherche a ete financee par
   le Conseil de recherches en sciences naturelles et en genie du Canada
   (CRSNG). The authors also thank Phil Wadler, Yuchong Pan, Peter
   Thiemann, and the anonymous reviewers.
CR Ahmed A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110283
   [Anonymous], 2015, LEIBNIZ INT P INFORM, DOI DOI 10.4230/LIPICS.SNAPL.2015.274
   Schwerter FB, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283, DOI 10.1145/2628136.2628149
   Clark Alison M, 2020, ARXIV201014094
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Disney Tim, 2011, GRADUAL INFORM FLOW
   Felipe Banados Schwerter, 2020, Coquihalla/agt-moving-forward: Supporting Artifacts from POPL '21 submission, DOI 10.5281/zenodo.4111019
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia R, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2676726.2676992, 10.1145/2775051.2676992]
   Giacobazzi R, 2001, LECT NOTES COMPUT SC, V2126, P356
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Ina L, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P609
   Munkres J.R., 2000, Topology, a First Course, Vsecond
   New MS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371114
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   REMY D, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P77, DOI 10.1145/75277.75284
   Sangiorgi Davide, 2011, Introduction to bisimulation and coinduction
   Sergey I, 2012, LECT NOTES COMPUT SC, V7211, P579, DOI 10.1007/978-3-642-28869-2_29
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Toro M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290330
   Toro M, 2020, SCI COMPUT PROGRAM, V197, DOI 10.1016/j.scico.2020.102496
   Toro M, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3229061
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Wilson PT, 2018, DLS'18: PROCEEDINGS OF THE 14TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES, P1, DOI 10.1145/3276945.3276947
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 29
TC 8
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
DI 10.1145/3434342
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100061
OA gold
DA 2024-07-18
ER

PT J
AU Madsen, M
   Lhoták, O
AF Madsen, Magnus
   Lhotak, Ondrej
TI Fixpoints for the Masses: Programming with First-Class Datalog
   Constraints
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE functional programming; logic programming; first-class datalog
AB Datalog is a declarative logic programming language that has been used in a variety of applications, including big-data analytics, language processing, networking and distributed systems, and program analysis.
   In this paper, we propose first-class Datalog constraints as a mechanism to construct, compose. and solve Datalog programs at run time. The benefits are twofold: We gain the full power of a functional programming language to operate on Datalog constraints-as-values, while simultaneously we can use Datalog where it really shines: to declaratively express and solve fixpoint problems.
   We present an extension of the lambda calculus with first-class Datalog constraints, including its semantics and a type system with row polymorphism based on Hindley-Milner. We prove soundness of the type system and implement it as an extension of the Flix programming language.
C1 [Madsen, Magnus] Aarhus Univ, Dept Comp Sci, Abogade 34, DK-8210 Aarhus, Denmark.
   [Lhotak, Ondrej] Univ Waterloo, Cheriton Sch Comp Sci, 200 Univ Ave West, Waterloo, ON N2L 3G1, Canada.
C3 Aarhus University; University of Waterloo
RP Madsen, M (corresponding author), Aarhus Univ, Dept Comp Sci, Abogade 34, DK-8210 Aarhus, Denmark.
EM magnusm@cs.au.dk; olhotak@uwaterloo.ca
FU Natural Sciences and Engineering Research Council of Canada
FX This research was supported by the Natural Sciences and Engineering
   Research Council of Canada.
CR Alvaro P., 2011, CIDR, P249
   Alvaro Peter, 2010, INT DAT 2 0 WORKSH
   [Anonymous], 2011, P 2011 ACM SIGMOD IN, DOI DOI 10.1145/1989323.1989456
   [Anonymous], 1985, P 5 ACM SIGACT SIGMO, DOI DOI 10.1145/6012.15399
   Arntzenius M, 2016, ACM SIGPLAN NOTICES, V51, P214, DOI 10.1145/3022670.2951948
   Arntzenius Michael, 2019, P ACM PROGR LANG PRI
   Avgustinov Pavel., 2016, 30th European Conference on Object-Oriented Programming, ECOOP 2016, July 18-22, 2016, Rome, Italy, p2:1, DOI DOI 10.4230/LIPICS.ECOOP.2016.2
   Bembenek Aaron, 2018, ARXIV PREPRINT ARXIV
   Bravenboer M, 2009, ACM SIGPLAN NOTICES, V44, P243, DOI 10.1145/1639949.1640108
   Ceri S., 1989, IEEE Transactions on Knowledge and Data Engineering, V1, P146, DOI 10.1109/69.43410
   Ceri S., 2012, Logic Programming and Databases
   COHEN J, 1990, COMMUN ACM, V33, P52, DOI 10.1145/79204.79209
   Conway Neil, 2012, SOCC, DOI 10.1145/2391229.2391230
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   de Moor O, 2011, DAT REL 1 INT WORKSH, DOI [10.1007/978-3-642-24206-9, DOI 10.1007/978-3-642-24206-9]
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Fitting M, 2002, THEOR COMPUT SCI, V278, P25, DOI 10.1016/S0304-3975(00)00330-3
   Gelfond M., 1991, New Generation Computing, V9, P365, DOI 10.1007/BF03037169
   Gelfound M., 1988, Logic Programming: Proceedings of the Fifth International Conference and Symposium, P1070
   GRAEFE G, 1993, COMPUT SURV, V25, P73, DOI 10.1145/152610.152611
   GREGORY S, 1987, PARALLEL LOGIC PROGR
   Hajiyev E, 2006, LECT NOTES COMPUT SC, V4067, P2
   Halperin D, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P881, DOI 10.1145/2588555.2594530
   Henderson Fergus, 1996, MERCURY LANGUAGE REF
   Jaffar J., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P111, DOI 10.1145/41625.41635
   JAFFAR J, 1994, J LOGIC PROGRAM, V20, P503, DOI 10.1016/0743-1066(94)90033-7
   Jordan H, 2016, LECT NOTES COMPUT SC, V9780, P422, DOI 10.1007/978-3-319-41540-6_23
   Jordan Herbert, 2018, P S PRINC PRACT PAR
   Kastrinis G, 2013, ACM SIGPLAN NOTICES, V48, P423, DOI 10.1145/2499370.2462191
   King Ross D, 2004, AI MAG
   KUNEN K, 1987, J LOGIC PROGRAM, V4, P289, DOI 10.1016/0743-1066(87)90007-0
   Lam M.S., 2005, Proceedings of the twenty-fourth ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems - PODS '05, P1
   Leijen D., 2005, P 2005 S TRENDS FUNC, P297
   Li Ninghui, 2003, P PRACT ASP DECL LAN, DOI [10.1007/3-540-36388-2_6, DOI 10.1007/3-540-36388-2_6]
   Loo BT, 2009, COMMUN ACM, V52, P87, DOI 10.1145/1592761.1592785
   Madsen M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428193
   Madsen Magnus, 2016, PROGRAMMING LANGUAGE
   Minker J., 1988, Foundations of Deductive Databases and Logic Programming
   Mooney Raymond J., 1996, INT C IND LOG PROGR
   Papadimitriou Christos H, 1985, B EUROPEAN ASS THEOR
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Sagiv M, 1996, THEOR COMPUT SCI, V167, P131, DOI 10.1016/0304-3975(96)00072-2
   Schafer Max, 2010, P S PRINC PRORGR LAN
   Scholz B, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P196, DOI 10.1145/2892208.2892226
   Seo J, 2013, PROC INT CONF DATA, P278, DOI 10.1109/ICDE.2013.6544832
   Shkapsky Alexander, 2016, P INT C MAN DAT
   SMARAGDAKIS Y, 2011, P 38 ANN ACM SIGPLAN, V38, P11, DOI DOI 10.1145/1926385.1926390
   Smaragdakis Y, 2014, ACM SIGPLAN NOTICES, V49, P485, DOI [10.1145/2666356.2594320, 10.1145/2594291.2594320]
   Smaragdakis Y, 2013, ACM SIGPLAN NOTICES, V48, P253, DOI [10.1145/2509136.2509524, 10.1145/2544173.2509524]
   Smaragdakis Yannis, 2011, DATALOG RELOADED, DOI [10.1145/1926385.1926390, DOI 10.1145/1926385.1926390]
   Somogyi Z, 1996, J LOGIC PROGRAM, V29, P17, DOI 10.1016/S0743-1066(96)00068-4
   Somogyi Zoltan, 1995, AUSTR COMPUTER SCI C
   Souffle Authors, 2018, SOUFFL
   Subotic Pavle, 2018, AUTOMATIC INDEX SELE
   Ullman J., 1988, PRINCIPLES DATABASE, V1
   ULLMAN JD, 1984, PRINCIPLES DATABASE
   Veldhuizen Todd L, 2012, ARXIV PREPRINT ARXIV
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Zook D, 2009, LECT NOTES COMPUT SC, V5418, P168, DOI 10.1007/978-3-540-92995-6_12
NR 59
TC 9
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 125
DI 10.1145/3428193
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900002
OA gold
DA 2024-07-18
ER

PT J
AU Griffin, J
   Lesani, M
   Shadab, N
   Yin, XZ
AF Griffin, Jeremiah
   Lesani, Mohsen
   Shadab, Narges
   Yin, Xizhe
TI TLC: Temporal Logic of Distributed Components
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Distributed Protocols; Temporal Logic; Program Logic; Composition;
   Operational Semantics
ID CONSENSUS
AB Distributed systems are critical to reliable and scalable computing; however, they are complicated in nature and prone to bugs. To manage this complexity, network middleware has been traditionally built in layered stacks of components. We present a novel approach to compositional verification of distributed stacks to verify each component based on only the specification of lower components. We present TLC (Temporal Logic of Components), a novel temporal program logic that offers intuitive inference rules for verification of both safety and liveness properties of functional implementations of distributed components. To support compositional reasoning, we define a novel transformation on the assertion language that lowers the specification of a component to be used as a subcomponent. We prove the soundness of TLC and the lowering transformation with respect to a novel operational semantics for stacks of composed components in partially synchronous networks. We successfully apply TLC to compose and verify a stack of fundamental distributed components.
C1 [Griffin, Jeremiah; Lesani, Mohsen; Shadab, Narges; Yin, Xizhe] Univ Calif Riverside, Riverside, CA 92521 USA.
C3 University of California System; University of California Riverside
RP Griffin, J (corresponding author), Univ Calif Riverside, Riverside, CA 92521 USA.
EM fhous001@ucr.edu; lesani@cs.ucr.edu; nshad001@ucr.edu; xyin014@ucr.edu
CR Alur R, 2004, LECT NOTES COMPUT SC, V2988, P467
   Alur R, 1999, FORM METHOD SYST DES, V15, P7, DOI 10.1023/A:1008739929481
   [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], 2018, BITC SPIN HACK RAR 5
   [Anonymous], 2018, HACK HAV STOL 14 BIG
   Appendix, 2020, DOC UNPUB S
   Bakst A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133934
   Biagioni E., 2001, Higher-Order and Symbolic Computation, V14, P309, DOI 10.1023/A:1014403914699
   Biely Martin., 2013, Proceedings of the 2013 43rd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), DSN'13, P1
   Boichat R., 2003, SIGACT News, V34, P47, DOI 10.1145/637437.637447
   Burckhardt S, 2012, LECT NOTES COMPUT SC, V7313, P283, DOI 10.1007/978-3-642-31057-7_14
   Cachin C, 2011, INTRODUCTION TO RELIABLE AND SECURE DISTRIBUTED PROGRAMMING, SECOND EDITION, P1, DOI 10.1007/978-3-642-15260-3
   Cave A, 2014, ACM SIGPLAN NOTICES, V49, P361, DOI 10.1145/2535838.2535881
   Cejtin H, 1995, ACM T PROGR LANG SYS, V17, P704, DOI 10.1145/213978.213986
   Chand S, 2016, LECT NOTES COMPUT SC, V9995, P119, DOI 10.1007/978-3-319-48989-6_8
   Charguéraud A, 2012, J AUTOM REASONING, V49, P363, DOI 10.1007/s10817-011-9225-2
   Charron-Bost B, 2009, DISTRIB COMPUT, V22, P49, DOI 10.1007/s00446-009-0084-6
   Chaudhuri K, 2010, LECT NOTES COMPUT SC, V6255, P44, DOI 10.1007/978-3-642-14808-8_3
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   Cook Byron, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P333, DOI 10.1007/978-3-642-22110-1_26
   Das A, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236786
   Dragana C., 2016, 8 INT C EL COMP ART, P1
   Dutertre B, 2018, LECT NOTES COMPUT SC, V10811, P113, DOI 10.1007/978-3-319-77935-5_8
   DWORK C, 1988, J ACM, V35, P288, DOI 10.1145/42282.42283
   FISCHER MJ, 1985, J ACM, V32, P374, DOI 10.1145/3149.214121
   Garcia-Perez Alvaro, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P912, DOI 10.1007/978-3-319-89884-1_32
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Guo Zhenyu., 2013, 14 WORKSH HOT TOP OP, P8
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   He Jifeng, 1986, P ESOP
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Jeffrey Alan., 2012, Proceedings of the sixth workshop on Programming languages meets program verification, P49
   John A, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P201
   Kato Kazuhiko, 1993, DISTRIBUTED C LANGUA
   Ketsman B, 2020, THEOR COMPUT SYST, V64, P965, DOI 10.1007/s00224-019-09959-3
   Killian C, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P179, DOI 10.1145/1250734.1250755
   Koh N, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P234, DOI 10.1145/3293880.3294106
   Konnov I, 2017, ACM SIGPLAN NOTICES, V52, P719, DOI 10.1145/3093333.3009860
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   Lamport L, 1998, ACM T COMPUT SYST, V16, P133, DOI 10.1145/279227.279229
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Lamport Leslie, 2000, P 19 ANN ACM S PRINC, P3, DOI [10.1145/343477.343497, DOI 10.1145/343477.343497]
   Lesani M, 2016, ACM SIGPLAN NOTICES, V51, P357, DOI 10.1145/2914770.2837622
   Liu YHA, 2012, ACM SIGPLAN NOTICES, V47, P395, DOI 10.1145/2398857.2384645
   LYNCH N, 1995, INFORM COMPUT, V121, P214, DOI 10.1006/inco.1995.1134
   Lynch NancyA., 1989, CWI Quarterly, V2
   Maric O, 2017, LECT NOTES COMPUT SC, V10427, P217, DOI 10.1007/978-3-319-63390-9_12
   Merten Samuel, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P561, DOI 10.1007/978-3-319-89884-1_20
   Miller H, 2016, ONWARD!'16: PROCEEDINGS OF THE 2016 ACM INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE, P82, DOI 10.1145/2986012.2986014
   Musuvathi Madanlal, 2004, P NSDI
   Newcombe C, 2015, COMMUN ACM, V58, P66, DOI 10.1145/2699417
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Peterson LL, 2003, COMPUTER NETWORKS SY
   Rahli Vincent, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P619, DOI 10.1007/978-3-319-89884-1_22
   Rahli Vincent, 2012, 10 INT WORKSH US INT
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Salvaneschi Guido, 2019, PROC ACM PROGRAM LAN, V3, P1
   Samanta R, 2013, LECT NOTES COMPUT SC, V7737, P229
   Schiper N, 2014, I C DEPEND SYS NETWO, P395, DOI 10.1109/DSN.2014.45
   Sergey I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158116
   Taube M, 2018, ACM SIGPLAN NOTICES, V53, P662, DOI [10.1145/3296979.3192414, 10.1145/3192366.3192414]
   Weisenburger P, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276499
   Wilcox James R., 2015, P PLDI
   Wilcox James R., 2017, 2 SUMM ADV PROGR LAN, V71, DOI [10.4230/LIPIcs.SNAPL.2017.19, DOI 10.4230/LIPICS.SNAPL.2017.19]
   Woos D, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P154, DOI 10.1145/2854065.2854081
   Yabandeh Maysam, 2009, P NSDI
   Yang Junfeng, 2009, P NSDI
   Zave P, 2012, ACM SIGCOMM COMP COM, V42, P50, DOI 10.1145/2185376.2185383
NR 70
TC 3
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 123
DI 10.1145/3409005
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700037
OA gold
DA 2024-07-18
ER

PT J
AU Montagu, B
   Jensen, T
AF Montagu, Benoit
   Jensen, Thomas
TI Stable Relations and Abstract Interpretation of Higher-Order Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE static analysis; lambda-calculus; abstract interpretation; correlations
ID SYSTEM
AB We present a novel denotational semantics for the untyped call-by-value lambda-calculus, where terms are interpreted as stable relations, i.e. as binary relations between substitutions and values, enjoying a monotonicity property. The denotation captures the input-output behaviour of higher-order programs, and is proved sound and complete with respect to the operational semantics. The definition also admits a presentation as a program logic. Following the principles of abstract interpretation, we use our denotational semantics as a collecting semantics to derive a modular relational analysis for higher-order programs. The analysis infers equalities between the arguments of a program and its result-a form of frame condition for functional programs.
C1 [Montagu, Benoit; Jensen, Thomas] INRIA, Campus Univ Beaulieu,Ave Gen Leclerc, F-35042 Rennes, France.
C3 Inria; Universite de Rennes
RP Montagu, B (corresponding author), INRIA, Campus Univ Beaulieu,Ave Gen Leclerc, F-35042 Rennes, France.
EM benoit.montagu@inria.fr; thomas.jensen@inria.fr
OI Montagu, Benoit/0009-0005-6153-6276
CR ABRAMSKY S, 1991, ANN PURE APPL LOGIC, V51, P1, DOI 10.1016/0168-0072(91)90065-T
   Andreescu OF, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290360
   [Anonymous], 1993, Program Verification: Fundamental Issues in Computer Science, DOI [10.1090/psapm/019/0235771, DOI 10.1090/PSAPM/019/0235771]
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   Banerjee A., 2003, Mathematical Structures in Computer Science, V13, P87, DOI 10.1017/S0960129502003845
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Barnett Mike, 2005, LNCS, V3362, p49S69, DOI [10.1007/978-3, DOI 10.1007/978-3]
   Bird Richard., 1996, ALGEBRA PROGRAMMING, DOI [10.1007/978-3-642-61455-2_12, DOI 10.1007/978-3-642-61455-2_12]
   Cachera David., 2010, INTERACTIVE THEOREM, p9S24, DOI [10.1007/978-3-642-14052-5_3, DOI 10.1007/978-3-642-14052-5_3]
   Charguéraud A, 2012, J AUTOM REASONING, V49, P363, DOI 10.1007/s10817-011-9225-2
   Chargueraud Arthur, 2010, P 15 ACM SIGPLAN INT, DOI DOI 10.1145/1863543.1863590
   COOK SA, 1978, SIAM J COMPUT, V7, P70, DOI 10.1137/0207005
   Cousot P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P316, DOI 10.1145/263699.263744
   Cousot P, 2002, LECT NOTES COMPUT SC, V2304, P159
   COUSOT P, 1994, PROCEEDINGS OF THE 1994 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P95, DOI 10.1109/ICCL.1994.288389
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Das M, 2000, ACM SIGPLAN NOTICES, V35, P35, DOI 10.1145/358438.349309
   Dreyer D, 2003, ACM SIGPLAN NOTICES, V38, P236, DOI 10.1145/640128.604151
   Earl Christopher, 2010, WORKSH SCHEM FUNCT P
   Farzan A, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P57, DOI 10.1109/FMCAD.2015.7542253
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Gabbay M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P214, DOI 10.1109/LICS.1999.782617
   Gu Liang., 2011, P 2 ASIA PACIFIC WOR, P3
   Heintze N., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P306, DOI 10.1145/182409.182495
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Honda K, 2006, LECT NOTES COMPUT SC, V4052, P360
   HUDAK P, 1991, ACM T PROGR LANG SYS, V13, P269, DOI 10.1145/103135.103139
   Illous H, 2017, LECT NOTES COMPUT SC, V10227, P212, DOI 10.1007/978-3-319-57288-8_15
   Jeannet B, 2004, LECT NOTES COMPUT SC, V3148, P246
   Jones N. D., 1980, 21st Annual Symposium on Foundations of Computer Science, P185, DOI 10.1109/SFCS.1980.16
   Jones N.D., 1986, POPL, P296, DOI DOI 10.1145/512644.512672
   KAHN G, 1987, LECT NOTES COMPUT SC, V247, P22
   Kaki G, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P311, DOI 10.1145/2628136.2628159
   Kincaid Z, 2017, ACM SIGPLAN NOTICES, V52, P248, DOI [10.1145/3062341.3062373, 10.1145/3140587.3062373]
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Kripke Saul A., 1965, Studies in Logic and the Foundations of Mathematics, V40, P92, DOI [10.1016/S0049-237X(08)71685-9, DOI 10.1016/S0049-237X(08)71685-9]
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Marché C, 2005, LECT NOTES COMPUT SC, V3603, P179
   Meyer B, 2015, NATO SCI PEAC SECUR, V40, P193, DOI 10.3233/978-1-61499-495-4-193
   MIDTGAARD J., 2009, P ACM INT C FUNCT PR, P287, DOI DOI 10.1145/1596550.1596592
   Midtgaard J, 2008, LECT NOTES COMPUT SC, V5079, P347
   Midtgaard J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187672
   Nielson Flemming, 2015, Principles of Program Analysis, DOI [10.1007/978-3-662-03811-6, DOI 10.1007/978-3-662-03811-6]
   Pitts Andrew, 2016, ACM SIGLOG NEWS, V3, P5772
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   SHIVERS O, 1991, SIGPLAN NOTICES, V26, P190, DOI 10.1145/115866.115884
   Stone CA, 2006, ACM T COMPUT LOG, V7, P676, DOI 10.1145/1183278.1183281
   Urban C, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(2:14)2012
   van Benthem J, 2009, SYNTHESE, V167, P251, DOI 10.1007/s11229-008-9408-5
   Van Horn D, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158141
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
NR 53
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 119
DI 10.1145/3409001
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700033
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Selsam, D
   Hudon, S
   De Moura, L
AF Selsam, Daniel
   Hudon, Simon
   de Moura, Leonardo
TI Sealing Pointer-Based Optimizations behind Pure Functions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE functional programming; interactive theorem proving; Lean
AB Functional programming languages are particularly well-suited for building automated reasoning systems, since (among other reasons) a logical term is well modeled by an inductive type, traversing a term can be implemented generically as a higher-order combinator, and backtracking search is dramatically simplified by persistent datastructures. However, existing pure functional programming languages all suffer a major limitation in these domains: traversing a term requires time proportional to the tree size of the term as opposed to its graph size. This limitation would be particularly devastating when building automation for interactive theorem provers such as Lean and Coq, for which the exponential blowup of term-tree sizes has proved to be both common and difficult to prevent. All that is needed to recover the optimal scaling is the ability to perform simple operations on the memory addresses of terms, and yet allowing these operations to be used freely would clearly violate the basic premise of referential transparency. We show how to use dependent types to seal the necessary pointer-address manipulations behind pure functional interfaces while requiring only a negligible amount of additional trust. We have implemented our approach for the upcoming version (v4) of Lean, and our approach could be adopted by other languages based on dependent type theory as well.
C1 [Selsam, Daniel; de Moura, Leonardo] Microsoft Res, One Microsoft Way, Redmond, WA 98052 USA.
   [Hudon, Simon] Carnegie Mellon Univ, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
C3 Microsoft; Carnegie Mellon University
RP Selsam, D (corresponding author), Microsoft Res, One Microsoft Way, Redmond, WA 98052 USA.
EM daselsam@microsoft.com; simon.hudon@gmail.com; leonardo@microsoft.org
CR Altenkirch T, 2016, ACM SIGPLAN NOTICES, V51, P18, DOI 10.1145/2914770.2837638
   [Anonymous], 2011, THESIS
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Bagwell P., 2001, ES GRANDS CHAMPS, V1195
   Blanchette J, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P367, DOI 10.1145/3372885.3373824
   Bortin M, 2010, LECT NOTES ARTIF INT, V6167, P34, DOI 10.1007/978-3-642-14128-7_5
   Bove A, 2009, LECT NOTES COMPUT SC, V5674, P73, DOI 10.1007/978-3-642-03359-9_6
   Boyer Robert S, 2006, P 6 INT WORKSH ACL2
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Braibant T, 2014, J AUTOM REASONING, V53, P271, DOI 10.1007/s10817-014-9306-0
   Cohen C, 2013, LECT NOTES COMPUT SC, V7998, P213, DOI 10.1007/978-3-642-39634-2_17
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Ellis Margaret A, 1990, ANNOTATED C REFERECE
   Freeman Phil, 2015, PURESCRIPT
   Goubault Jean, 1994, JOURNEES FRANCOPHONE, P222
   Hickey R., 2008, P 2008 S DYN LANG, P1
   Hofmann Martin, 1995, EXTENSIONAL CONCEPTS
   Huet Gerard, 1992, INT C FDN SOFTW TECH, P229
   Jones SP, 2000, LECT NOTES COMPUT SC, V1868, P37
   Kaufmann M, 1997, IEEE T SOFTWARE ENG, V23, P203, DOI 10.1109/32.588534
   Leroy Xavier, 2018, OCAML SYSTEM RELEASE
   MATTHEWS DCJ, 1985, SIGPLAN NOTICES, V20, P52, DOI 10.1145/988364.988371
   McGraw James., 1983, Technical Report
   Nipkow Tobias, 2002, ISABELLE HOL PROOF A, V2283
   Nogin A., 2002, Theorem Proving in Higher Order Logics. 15th International Conference, TPHOLs 2002. Proceedings (Lecture Notes in Computer Science Vol.2410), P263
   Odersky M, 2004, TECHNICAL REPORT
   OWRE S, 1992, LECT NOTES ARTIF INT, V607, P748
   Scholz Sven-Bodo, 1994, P 6 INT WORKSH IMPL
   Selsam Daniel, 2020, ARXIV200104301
   Sozeau M, 2008, LECT NOTES COMPUT SC, V5170, P278, DOI 10.1007/978-3-540-71067-7_23
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   TURNER D, 1986, SIGPLAN NOTICES, V21, P158, DOI 10.1145/15042.15053
   Ullrich Sebastian, 2019, ARXIV190805647
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
NR 36
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 115
DI 10.1145/3408997
PG 20
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700029
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Clinger, WD
   Wand, M
AF Clinger, William D.
   Wand, Mitchell
TI Hygienic Macro Technology
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE macro; hygiene; Lisp; Scheme
AB The fully parenthesized Cambridge Polish syntax of Lisp, originally regarded as a temporary expedient to be replaced by more conventional syntax, possesses a peculiar virtue: A read procedure can parse it without knowing the syntax of any expressions, statements, definitions, or declarations it may represent. The result of that parsing is a list structure that establishes a standard representation for uninterpreted abstract syntax trees.
   This representation provides a convenient basis for macro processing, which allows the programmer to specify that some simple piece of abstract syntax should be replaced by some other, more complex piece of abstract syntax. As is well-known, this yields an abstraction mechanism that does things that procedural abstraction cannot, such as introducing new binding structures.
   The existence of that standard representation for uninterpreted abstract syntax trees soon led Lisp to a greater reliance upon macros than was common in other high-level languages. The importance of those features is suggested by the ten pages devoted to macros in an earlier ACM HOPL paper, lThe Evolution of Lisp."
   However, naive macro expansion was a leaky abstraction, because the movement of a piece of syntax from one place to another might lead to the accidental rebinding of a program's identifiers. Although this problem was recognized in the 1960s, it was 20 years before a reliable solution was discovered, and another 10 before a solution was discovered that was reliable, flexible, and efficient.
   In this paper, we summarize that early history with greater focus on hygienic macros, and continue the story by describing the further development, adoption, and influence of hygienic and partially hygienic macro technology in Scheme. The interplay between the desire for standardization and the development of new algorithms is a major theme of that story.
   We then survey the ways in which hygienic macro technology has been adapted into recent non-parenthetical languages. Finally, we provide a short history of attempts to provide a formal account of macro processing.
C1 [Wand, Mitchell] Northeastern Univ, Boston, MA 02115 USA.
C3 Northeastern University
EM will@larcenists.org; wand@ccs.neu.edu
CR Abadi M., 1991, Journal of Functional Programming, V1, P375, DOI 10.1017/S0956796800000186
   ABADI M, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P31, DOI 10.1145/96709.96712
   Abelson Hal., 1989, RRRS AUTHORS EMAIL S
   Abelson Hal., 1988, RRRS AUTHORS EMAIL S
   Adams MD, 2015, ACM SIGPLAN NOTICES, V50, P457, DOI [10.1145/2775051.2677013, 10.1145/2676726.2677013]
   Adams Norman., 1992, RRRS AUTHORS EMAIL S
   Adams Norman., 1987, RRRS AUTHORS EMAIL S
   Amtoft Torben., 1993, WSA 93 P 3 INT WORKS, DOI [10.5555/647164.717823, DOI 10.5555/647164.717823]
   [Anonymous], 1991, POPL 91, DOI DOI 10.1145/99583.99607
   [Anonymous], 1997, SC22WG16 ISO
   [Anonymous], 1989, P 16 ACM SIGPLAN SIG, DOI DOI 10.1145/75277.75302
   [Anonymous], 1992, Handbook of Logic in Computer Science
   [Anonymous], 2003, GPCE, DOI DOI 10.1007/978-3-540-39815-8_6
   Appel Andrew, 2016, DEEPSPEC SCI DEEP SP
   Arai Hiroshi, 2010, WORKSH SELF SUST SYS, DOI [10.1145/1942793.1942798, DOI 10.1145/1942793.1942798]
   Barendregt H. P, 1985, LAMBDA CALCULUSDITS
   Bartlett Joel., 1989, RRRS AUTHORS EMAIL S
   Bartley David., 1984, E COMMUNICATION 0914
   Bartley David., 1987, RRRS AUTHORS EMAIL S
   Bartley David., 1984, TI CSL POSITION STAN
   Bartley David, 1991, IEEE STANDARD SCHEME, P1178
   Bawden A., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P86, DOI 10.1145/62678.62687
   Bawden Alan, 2010, SCHEME STANDARDIZATI
   Bawden Alan, 2009, STEERING COMMITTEE R
   Bawden Alan, 2007, R6RS RATIFICATION VO
   Bawden Alan, 2007, R6RS RATIFICATION
   Bawden Alan, 2006, SCHEME LANGUAGE STEE
   Bawden Alan, 2004, SCHEME STANDARDIZATI
   Bawden Alan, 2009, STEERING COMMITTEE E
   Bawden Alan., 1987, RRRS AUTHORS EMAIL S
   Blume Matthias., 1995, TRH171
   BOBROW DG, 1967, COMMUN ACM, V10, P155, DOI 10.1145/363162.363185
   Bove Ana, 1992, 1992 ACM C LISP FUNC, DOI [10.1145/141471.141562, DOI 10.1145/141471.141562]
   Bradner S., 1997, Key words for use in RFCs to Indicate Requirement Levels
   Brooks Gary., 1984, RRRS AUTHORS EMAIL S
   Brown P.J., 1974, MACROPROCESSORS TECH
   Burmako Eugene., 2013, SCALA 13
   Burmako Eugene, 2012, 3 INT VAL TURCH WORK
   Camp Clyde., 1988, RRRS AUTHORS EM SUBJ
   Cardelli Luca, 1993, DAT PROGR LANG DBPL, p11S31, DOI [10.1007/978-1-4471, DOI 10.1007/978-1-4471]
   Cheatham T. E, 1966, AFIPS P FALL JOINT C, V29, DOI [10.1145/1464291.1464359, DOI 10.1145/1464291.1464359]
   Clements Laura., 2020, WALES ONLINE
   Clinger Will., 1987, RRRS AUTHORS EMAIL S
   Clinger Will, 1984, RRRS AUTHORS EMAIL S
   Clinger Will, 2009, ANNOUNCEMENT SCHEME
   Clinger Will., 1985, RRRS AUTHORS EMAIL S
   Clinger Will., 1986, RRRS AUTHORS EMAIL S
   Clinger Will, 2005, SRFI 76 R6RS RECORDS
   Clinger William., 1993, RRRS AUTHORS EMAIL S
   Clinger William, 2007, ANN LARCENY V0 95 IF
   Clinger William., 1992, RRRS AUTHORS EM SUBJ
   Clinger William., 1988, JUNE 1987 M ACM SIGP, V5, P25, DOI [10.1145/1317273.1317276, DOI 10.1145/1317273.1317276]
   Clinger William, 1991, ACM SIGPLAN LISP POI, V4, P17
   Clinger William., 1989, RRRS AUTHORS EMAIL S
   Clinger William, 1985, 848 MIT AI
   Clinger William, ACM LISP POINTERS, V4, p1S55, DOI [10.1145/382130.382133, DOI 10.1145/382130.382133]
   Clinger William, 1988, ACM SIGPLAN LISP POI, V2, P43, DOI [10.1145/1317250.1317254, DOI 10.1145/1317250.1317254]
   Clinger William., 1991, SIGPLAN LISP POINTER, VIV, P25
   Clinger William D., 2017, APPARENT BUG SAMPLE
   Clinger William D, 2006, FORMAL COMMENT 90 RE
   Clinger William D., 1984, LONG NOT DAT 28 AUG
   Clinger William D., 2007, RE R6RS DISCUSS ESSA
   Clinger William D., 1994, P 1994 ACM C LISP FU, VVII, DOI [10.1145/182590.156786, DOI 10.1145/182590.156786]
   Clinger William D., 2009, SRFI 99 ERR5RS RECOR
   Clinger William D, 2007, VOTE RATIFICATION R6
   Clinger William D, 1984, E COMMUNICATION SEP
   Clinger William D., 2017, RE APPARENT BUG SAMP
   Clinger William D, 1998, MY NOT SCHEM WORKSH
   Clinger William D., 2015, SCHEM FUNCT PROGR WO
   Clinger William D, 1984, AGEND OCT 1984 M BRA
   Clinger William D, 2008, LISP50 CELEBRATING 5, DOI [10.1145/1529966, DOI 10.1145/1529966]
   Clinger William D, 1984, E COMMUNICATION 1027
   Clinger William D, 2007, FORMAL COMMENT 267 S
   Clinger William D, 2007, RATIONALE ISSUES POS
   Clinger William D., 2016, CLARIFYING FIELD NAM
   Courtes Ludovic., 2007, R6RS FORMAL COMMENT
   Courtes Ludovic, 2007, VERSIONED STANDARD L
   Cowan John., 2017, REDEDITION VERSION 8
   Cowan John., 2016, R7RS SMALL ERRATA UN
   Cowan John, 2016, R7RS LARGE DISCUSSIO
   Cowan John, 2019, TANGERINE EDITION FI
   Cowan John., COLORDOCKETS
   Culpepper R, 2004, LECT NOTES COMPUT SC, V3286, P225
   Culpepper Ryan, 2007, 2007 WORKSH SCHEM FU, DOI [10.1145/1328438.1328486, DOI 10.1145/1328438.1328486]
   CURTIS P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P13, DOI 10.1145/91556.91573
   Curtis Pavel., 1989, RRRS AUTHORS EMAIL S
   Disney T, 2015, ACM SIGPLAN NOTICES, V50, P35, DOI 10.1145/2661088.2661097
   Disney Timothy Charles, 2015, THESIS UC SANTA CRUZ
   Dybvig Kent., 1985, RRRS AUTHORS EMAIL S
   Dybvig Kent., 2005, SRFI 93 R6RS SYNTAX
   Dybvig Kent, 2006, R6RS STATUS REPORT
   Dybvig R. K., 1993, LISP and Symbolic Computation, V5, P295, DOI 10.1007/BF01806308
   Dybvig R. K., 1988, LISP and Symbolic Computation, V1, P53, DOI 10.1007/BF01806176
   Dybvig R. Kent, 1993, RRRS AUTHORS EMAIL S
   Dybvig R.Kent., 1987, SCHEME PROGRAMMING L
   Dybvig R. Kent, 2000, PORTABLE SYNTAX CASE
   Dybvig R. Kent, 1992, 356 IND U COMP SCI D
   Dybvig R. Kent, 1986, P LISP FUNCT PROGR, DOI [10.1145/319838.319858, DOI 10.1145/319838.319858]
   Dybvig R. Kent, 1996, RRRS AUTHORS EMAIL S
   Dybvig R. Kent, 2007, RE R6RS DISCUSS ESSA
   Erdweg Sebastian, 2014, ECOOP 2014 OBJ OR PR, DOI [10.1007/978-3-662-44202-9_20, DOI 10.1007/978-3-662-44202-9_20]
   Ethier Justin., 2013, ANSWER GIVEN STACK O
   Feeley Marc., GITHUB REPOSITORY GA
   Feeley Marc, 2010, VOLUNTEERING SCHEME
   Feeley Marc, 2004, P 5 WORKSH SCHEM FUN
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Felleisen M, 2018, COMMUN ACM, V61, P62, DOI 10.1145/3127323
   Fessenden Carol, 1983, 137 IND U COMP SCI D
   Flatt M, 2002, ACM SIGPLAN NOTICES, V37, P72, DOI 10.1145/583852.581486
   Flatt M, 2012, J FUNCT PROGRAM, V22, P181, DOI 10.1017/S0956796812000093
   Flatt Matthew, 2016, P 43 ANN ACM SIGPLAN, P705, DOI [DOI 10.1145/2837614.2837620, DOI 10.1145/2914770.2837620]
   Flatt Matthew, 2006, SRFI 83 R6RS LIB SYN
   Foderaro John K., 1980, FRANZ LISP MANUAL DO
   Freeman Andy., 1988, RRRS AUTHORS EMAIL S
   Friedman Daniel P., 1985, SCHEME 84 INTERIM RE
   Friedman Daniel P., 1984, SCHEME 84 REFERENCE
   Fujita Yoshikatsu, YPSILON
   Gabbay M. J., 2002, Formal Aspects of Computing, V13, P341, DOI 10.1007/s001650200016
   Gabriel Dick., 1987, RRRS AUTHORS EMAIL S
   Gabriel Dick., 1988, RRRS AUTHORS EMAIL S
   Gabriel R. P., 1988, LISP and Symbolic Computation, V1, P81, DOI 10.1007/BF01806178
   Ganz SE, 2001, ACM SIGPLAN NOTICES, V36, P74, DOI 10.1145/507669.507646
   Ghuloum Abdulaziz, 2007, SIGPLAN Notices, V42, P303, DOI 10.1145/1291220.1291197
   Ghuloum Abdulaziz., 2012, Portable syntax-case
   Graf Albert., 2018, PURE MANUAL SUBSECTI
   Graham Paul., 1993, On LISP: Advanced Techniques for Common LISP
   Griffin Timothy., 1988, P 3 ANN S LOGIC COMP, DOI [10.1109/LICS.1988.5134, DOI 10.1109/LICS.1988.5134]
   Hansen Lars Thomas, 1992, THESIS U OREGON
   Hanson Chris., 1991, ACM SIGPLAN LISP POI, V4, DOI [10.1145/1317265.1317267, DOI 10.1145/1317265.1317267]
   Hanson Chris., 1984, RRRS AUTHORS EM SUBJ
   Hanson Chris, 1984, E COMMUNICATION 1004
   Hanson Chris., 1986, MIT GNU SCHEME
   Hara Yutaka., BIWA SCHEME
   Hart Timothy P, 1963, MACRO DEFINITIONS LI
   Haynes Chris., 1990, RRRS AUTHORS EM SUBJ
   Haynes Chris., 1988, RRRS AUTHORS EM SUBJ
   Herman D, 2008, LECT NOTES COMPUT SC, V4960, P48
   Herman David, 2010, THESIS NE U BOSTON, DOI [10.5555/1925552, DOI 10.5555/1925552]
   Hickey Rich, CLOJURE PROGRAMMING
   Hieb Robert, 1992, TR355 IND U COMP SC
   IEEE, 2008, IEEE 1178 1990 IEEE
   Jaffer Aubrey., 2007, SRFI 96 SLIB PREREQU
   Jerram Neil, GUILE MANUAL G76 R6R
   Jonathan Rees, 2013, SCHEME WORKING GROUP
   Joseph Weizenbaum, 1968, FUNARG PROBLEM EXPLA
   Kato Takashi., SAGITTARIUS SCHEME
   Kato Takashi., 2014, SCHEM FUNCT PROGR WO
   Keep Andrew W., 2012, P 2012 ANN WORKSH SC, DOI [10.1145/2661103.2661107, DOI 10.1145/2661103.2661107]
   Keep Daniel., LITTLE BOOK RUST MAC
   Kelsey R, 1998, ACM SIGPLAN NOTICES, V33, P26, DOI 10.1145/290229.290234
   Kelsey R., 1999, SRFI 9: Defining Record Types
   Kelsey Richard, 1989, 702 YALE U COMPUTER, DOI 10.5555/916124
   Kent Dybvig R., 2000, Higher-Order and Symbolic Computation, V13, P57, DOI 10.1023/A:1010041423101
   Kiselyov Oleg., 2001, RE WRITING ABSTRACTI
   Kiselyov Oleg, 2002, SCHEM WORKSH
   Klabnik S., 2018, The Rust Programming Language
   Kohlbecker E. E., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P77, DOI 10.1145/41625.41632
   Kohlbecker Eugene., 1986, P 1986 ACM C LISP FU, P151
   Kohlbecker Eugene., 1984, POSITION STATEMENT M
   Kohlbecker Eugene E., 1986, THESIS IND U
   KRANZ D, 1986, SIGPLAN NOTICES, V21, P219, DOI 10.1145/13310.13333
   KRANZ D. A., 1988, 632 YAL U COMP SCI D
   Krishnamurthi Shriram, LECTURE NOTES COMPUT, V1799, DOI [10.1007/3-540-40048-6_9, DOI 10.1007/3-540-40048-6_9]
   Krishnamurthi Shriram, 2001, Ph. D. Dissertation
   Krishnamurthi Shriram., 1996, RRRS AUTHORS EMAIL S
   Krishnamurthi Shriram, 2000, MACROS REUSABLE GENE
   LEAVENWORTH BM, 1966, COMMUN ACM, V9, P790, DOI 10.1145/365876.365879
   Lerner Ben, PYRET IS PROGRAMMING
   Lightship Software, 1985, MACSCHEME
   Lorenz Juergen., 2009, MINI TUTORIAL EXPLIC
   MacLaren M. Donald, 1969, SIGPLAN, V4, P32, DOI [10.1145/1115858.1115866, DOI 10.1145/1115858.1115866]
   Maggi Marco., 2016, NAMING VICARE
   Maggi Marco, VICARE SCHEME
   Maggi Marco., 2016, HARD CHOICES R6RS HA
   Marc Feeley, 2007, IMPLEMENTORS INTENTI
   Masinter van Roggen, 1990, ISSUE LISP SYMBOL RE
   McCarthy J., 1978, SIGPLAN Notices, V13, P217, DOI 10.1145/960118.808387
   McCarthy John., 1981, History of programming languages I, P173
   McCarthy John, 1962, LISP 15 PROGRAMMER S
   Miller James., 1988, RRRS AUTHORS EMAIL S
   Mitchell J., 2002, CONCEPTS PROGRAMMING
   Moses Joel., 1970, SIGSAM B, P13
   Muehlboeck Fabian, 2013, THESIS NE U BOSTON
   Neron P, 2015, LECT NOTES COMPUT SC, V9032, P205, DOI 10.1007/978-3-662-46669-8_9
   Nieper-Wikirchen Marc, 2018, SRFI 150 HYGIENIC ER
   Nieper-Wikirchen Marc, 2017, SRFI 148 EAGER SYNTA
   Nieper-Wikirchen Marc., 2016, SRFI 136 EXTENSIBLE
   Ohlander Ronald B, 1984, WORKSH COMM LISP INV
   Park David M. R., 1982, P 1982 ACM S LISP FU
   Petrofsky Al., 1991, WRITE SEEMINGLY UNHY
   Petrofsky Al., 1992, HOLEY MACROS WAS RE
   Pitman Kent, 1983, REVISED MACLISP MANU, V#14
   Pitman Kent, 1984, E COMMUNICATION 1016
   Pombrio J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110288
   Pottier F, 2007, IEEE S LOG, P356, DOI 10.1109/LICS.2007.44
   Pratt V. R., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P41
   Pritchard Llewellyn, IRONSCHEME
   Queinnec Christian, 1990, DETERMINISTIC MODEL
   Queinnec Christian, BIGRE B INFORM GROUP, V1, p1S8
   Queinnec Christian, 1991, COMPUTER SCI RES APP, V1, DOI [10.1007/978-1-4613-6513-6, DOI 10.1007/978-1-4613-6513-6]
   Rafkind Jon, 2012, P GEN PROGR CONC EXP, DOI [10.1145/2371401.2371420, DOI 10.1145/2371401.2371420]
   Ramsdell John D, 1987, RRRS AUTHORS EMAIL S
   Rees Jonathan, 2010, CHARTER WORKING GROU
   Rees Jonathan, 2013, SCHEME WORKING GROUP
   Rees Jonathan, T PROJECT
   Rees Jonathan, 1986, ACM SIGPLAN NOTICES, V21, p37S79, DOI [10.1145/15042.15043, DOI 10.1145/15042.15043]
   Rees Jonathan, 1989, THESIS MIT
   Rees Jonathan, 1993, IMPLEMENTING LEXICAL, DOI [10.1145/173770.173774, DOI 10.1145/173770.173774]
   Rees Jonathan A, 1987, RRRS AUTHORS EMAIL S
   Rees Jonathan A, 1988, RRRS AUTHORS EMAIL S
   Rees Jonathan A., 1982, Conference Record of the 1982 ACM Symposium on Lisp and Functional Programming, P114, DOI [10.1145/800068.802142, DOI 10.1145/800068.802142]
   Rees JonathanA., 1984, T MANUAL, V4th
   Reistad Brian., 1992, MACROS WORK MODULA 2
   Rettke Grant, 2008, WAS THERE SCHISM R4R
   Rettke Grant., 2008, RE WAS THERE SCHISM
   Rozas Guillermo J, 1996, RRRS AUTHORS EMAIL S
   Scala, The Scala Programming Language
   Secretariat ISO/JTC1/SC22, 1988, DRAFT REPORT 1 M SC2
   Shinn Alex., 2011, INITIAL RESULTS IMPL
   Shinn Alex, 2013, REVISED7 REPORT ALGO
   Shinn Alex., 2017, RE APPARENT BUG SAMP
   Shinn Alex., CHIBI SCHEME
   Shinn Alex., 2010, WELCOME WORKING GROU
   Shivers Olin, 2009, SCHEME STEERING COMM
   Shivers Olin., HIST T NON ARCHIVAL
   Soegaard Jens Axel., 2008, RE WAS THERE SCHISM
   Sperber M., 2009, J. Funct. Program, V19, P1
   Sperber Michael., 2012, FORMAL RESPONSE 456
   Sperber Michael., 2009, J FUNCT PROGRAM, V19, P1
   Sperber Michael, 2007, REVISED 5 97 REPORT
   Stansifer P, 2016, J FUNCT PROGRAM, V26, DOI 10.1017/S0956796816000137
   Stansifer P, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P53, DOI 10.1145/2628136.2628162
   Stansifer Paul, 2016, THESIS NE U
   Stansifer Paul., 2016, GITHUB COMMENT
   Steckler Paul, 1994, INT STAT AN S, DOI [10.1007/3-540-58485-4_39, DOI 10.1007/3-540-58485-4_39]
   Steele G.L., 1984, Common LISP: The Language, V2nd
   STEELE GL, 1993, SIGPLAN NOTICES, V28, P231, DOI 10.1145/155360.155373
   Steele Guy L., 1993, EVOLUTION LISP NON A
   Steele Guy L, 1978, RABBIT COMPILER SCHE
   Steele Guy Lewis, 1977, 474 MIT AI
   Steele Guy Lewis, 1978, MEMO, V452
   Steele Jr Guy L., 1982, P 1982 ACM S LISP FU, P98
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   Sussman G. J., 1998, Higher-Order and Symbolic Computation, V11, P405, DOI 10.1023/A:1010035624696
   Sussman Gerald Jay, 1985, STRUCTURE INTERPRETA
   Sussman Gerald Jay, 1975, 349 MIT AI
   Sweet, BUILD YOUR DREAM LAN
   TEITELMAN W, 1974, INTERLISP REFERENCE
   Texas Instruments, 1990, PC SCHEM US GUID SOF
   Texas Instruments, 1987, PC SCHEM SOURC COD
   van Tonder Andre., R6RS LIB MACROS
   van Tonder Andre, 2007, FORMAL COMMENT 276 R
   van Tonder Andre, 2007, R6RS DISCUSS EMAIL 2
   van Tonder Andre., 2005, SRFI 57 RECORDS
   van Tonder Andre, 2005, SRFI 72 HYGIENIC MAC
   Various Larcenists, 2004, LARCENY
   Volkmann R. Mark, 2009, CLOJURE FUNCTIONAL P
   Waddell Oscar, 1999, THESIS IND U COMP SC
   Wakita Ken, 2014, P ILC 2014 8 INT LIS, P12, DOI [10.1145/2635648, DOI 10.1145/2635648]
   Wand Mitchell., 1984, RRRS AUTHORS EMAIL S
   Weinberg G.M, 1985, The Psychology of Computer Programming
   Weinreb D.., 1981, Lisp machine manual
NR 262
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 80
DI 10.1145/3386330
PG 110
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900013
OA gold
DA 2024-07-18
ER

PT J
AU Biernacki, D
   Piróg, M
   Polesiuk, P
   Sieczkowski, F
AF Biernacki, Dariusz
   Pirog, Maciej
   Polesiuk, Piotr
   Sieczkowski, Filip
TI Binders by Day, Labels by Night Effect Instances via Lexically Scoped
   Handlers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE algebraic effects; effect handlers; logical relations
AB Handlers of algebraic effects aspire to be a practical and robust programming construct that allows one to define, use, and combine different computational effects. Interestingly, a critical problem that still bars the way to their popular adoption is how to combine different uses of the same effect in a program, particularly in a language with a static type-and-effect system. For example, it is rudimentary to define the "mutable memory cell" effect as a pair of operations, put and get, together with a handler, but it is far from obvious how to use this effect a number of times to operate a number of memory cells in a single context. In this paper, we propose a solution based on lexically scoped effects in which each use (an "instance") of an effect can be singled out by name, bound by an enclosing handler and tracked in the type of the expression. Such a setting proves to be delicate with respect to the choice of semantics, as it depends on the explosive mixture of effects, polymorphism, and reduction under binders. Hence, we devise a novel approach to Kripke-style logical relations that can deal with open terms, which allows us to prove the desired properties of our calculus. We formalise our core results in Coq, and introduce an experimental surface-level programming language to show that our approach is applicable in practice.
C1 [Biernacki, Dariusz; Pirog, Maciej; Polesiuk, Piotr; Sieczkowski, Filip] Univ Wroclaw, Inst Comp Sci, Joliot Curie 15, PL-53206 Wroclaw, Poland.
C3 University of Wroclaw
RP Biernacki, D (corresponding author), Univ Wroclaw, Inst Comp Sci, Joliot Curie 15, PL-53206 Wroclaw, Poland.
EM dabi@cs.uni.wroc.pl; mpirog@cs.uni.wroc.pl; ppolesiuk@cs.uni.wroc.pl;
   efes@cs.uni.wroc.pl
OI Sieczkowski, Filip/0000-0001-5011-3458; Biernacki,
   Dariusz/0000-0002-1477-4635; Polesiuk, Piotr/0000-0002-7012-4346
FU National Science Centre, Poland [2018/31/D/ST6/03951,
   2016/23/D/ST6/01387]
FX We would like to thank the anonymous reviewers for helpful comments
   regarding the presentation and related work. We are also grateful to the
   participants of the NII Shonan Meeting "Programming and reasoning with
   algebraic effectsz and of the ChoCoLa seminar at ENS Lyons for useful
   discussions that led to this work. This work was supported by the
   National Science Centre, Poland under grant no. 2018/31/D/ST6/03951 and
   grant no. 2016/23/D/ST6/01387.
CR Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Ahmed A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110283
   Ahmed A, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709094
   Ahmed Amal, 2009, Proceedings of the 36th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2009, Savannah, GA, USA, January 21-23, 2009, P340, DOI DOI 10.1145/1594834.1480925
   [Anonymous], 1997, The Definition of Standard ML
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Bauer A, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:9)2014
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Benton N, 2001, J FUNCT PROGRAM, V11, P395, DOI 10.1017/S0956796801004099
   Biernacki D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158096
   Biernacki D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290319
   Bingham E., 2018, Journal of Machine Learning Research
   Birkedal L., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P171, DOI 10.1145/237721.237771
   Brachthäuser JI, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276481
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2500365.2500581, 10.1145/2544174.2500581]
   Castagna Giuseppe, 2017, P 44 ACM SIGPLAN S P, DOI [10.1145/3009837, DOI 10.1145/3009837]
   Chakravarty Manuel M. T, 2011, P 16 ACM SIGPLAN INT
   Devriese D, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '19), P1, DOI 10.1145/3331545.3342589
   Di Gianantonio P, 2002, LECT NOTES COMPUT SC, V2646, P148
   Dolan S., 2015, OCAML WORKSHOP
   Dreyer D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:16)2011
   Forster Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110257
   Gibbons J, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P2
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Kammar O, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000320
   Leijen D, 2017, LECT NOTES COMPUT SC, V10695, P339, DOI 10.1007/978-3-319-71237-6_17
   Leijen D, 2017, PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE' 17), P16, DOI 10.1145/3122975.3122977
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Leijen Daan, 2018, MSRTR201810
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Lindley Sam, 2019, DOO BEE DOO BEE DOO
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Pirog Maciej, 2019, FSCD SCHLOSS DAGSTUH, V30, P1, DOI 10.4230/LIPICS.FSCD.2019.30
   Pitts Andrew, 1998, Higher Order Operational Techniques in Semantics, P227
   Plotkin Gordon, 2004, Electronic Notes in Theoretical Computer Science, V73, P149, DOI DOI 10.1016/J.ENTCS.2004.08.008
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Schrijvers T, 2011, ACM SIGPLAN NOTICES, V46, P32, DOI 10.1145/2034574.2034781
   Sekiyama T, 2019, LECT NOTES COMPUT SC, V11423, P353, DOI 10.1007/978-3-030-17184-1_13
   Snyder Mark, 2010, Trends in Functional Programming. 11th International Symposium (TFP 2010). Revised Selected Papers, P198, DOI 10.1007/978-3-642-22941-1_13
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   TALPIN JP, 1994, INFORM COMPUT, V111, P245, DOI 10.1006/inco.1994.1046
   Toro M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290330
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
   Wadler P., 1992, P MARKT SUMM SCH PRO
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
NR 51
TC 22
Z9 22
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 48
DI 10.1145/3371116
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400049
OA gold
DA 2024-07-18
ER

PT J
AU Mackay, J
   Potanin, A
   Aldrich, J
   Groves, L
AF Mackay, Julian
   Potanin, Alex
   Aldrich, Jonathan
   Groves, Lindsay
TI Decidable Subtyping for Path Dependent Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Language Design; Path Dependent Types; Decidability; Subtyping; Nominal
   Subtyping; Structural Subtyping; Object Oriented Languages; Functional
   Languages; Wyvern; Scala
AB Path dependent types have long served as an expressive component of the Scala programming language. They allow for the modelling of both bounded polymorphism and a degree of nominal subtyping. Nominality in turn provides the ability to capture first class modules. Thus a single language feature gives rise to a rich array of expressiveness. Recent work has proven path dependent types sound in the presence of both intersection and recursive types, but unfortunately typing remains undecidable, posing problems for programmers who rely on the results of type checkers. The Wyvern programming language is an object oriented language with path dependent types, recursive types and first class modules. In this paper we define two variants of Wyvern that feature decidable typing, along with machine checked proofs of decidability. Despite the restrictions, our approaches retain the ability to encode the parameteric polymorphism of Java generics along with many idioms of the Scala module system.
C1 [Mackay, Julian; Potanin, Alex; Groves, Lindsay] Victoria Univ Wellington, Sch Engn & Comp Sci, Wellington, New Zealand.
   [Aldrich, Jonathan] Carnegie Mellon Univ, Sch Comp Sci, Pittsburgh, PA 15213 USA.
C3 Victoria University Wellington; Carnegie Mellon University
RP Mackay, J (corresponding author), Victoria Univ Wellington, Sch Engn & Comp Sci, Wellington, New Zealand.
EM julian.mackay@ecs.vuw.ac.nz; alex@ecs.vuw.ac.nz; aldrich@cs.cmu.edu;
   lindsay@ecs.vuw.ac.nz
OI Potanin, Alex/0000-0002-4242-2725; Aldrich,
   Jonathan/0000-0003-0631-5591; Mackay, Julian/0000-0003-3098-3901
FU United States, Department of Defense [H98230-14-C-0140]; Oracle Labs
FX We would like to acknowledge Ross Tate, for his invaluable insight, and
   the reviewers for their comments and feedback. This work was supported
   by the United States, Department of Defense under contract
   #H98230-14-C-0140, and Oracle Labs.
CR Amin N., 2012, FOOL
   Amin N, 2014, ACM SIGPLAN NOTICES, V49, P233, DOI [10.1145/2660193.2660216, 10.1145/2714064.2660216]
   Amin Nada, 2016, THESIS LAUSANNE
   Amin Nada, 2016, Lecture Notes in Computer Science, V9600, P249, DOI [10.1007/978-3-319-30936-, DOI 10.1007/978-3-319-30936, 10.1007/978-3-319-3 0936-1\\_14, DOI 10.1007/978-3-319-30936-1]
   [Anonymous], 1997, The Definition of Standard ML
   Biagioni E., 2001, Higher-Order and Symbolic Computation, V14, P309, DOI 10.1023/A:1014403914699
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   Castagna Giuseppe, 1994, POPL 94
   Cook William R., 2009, OOPSLA 09
   Ernst E., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P303
   Greenman B, 2014, ACM SIGPLAN NOTICES, V49, P89, DOI [10.1145/2594291.2594308, 10.1145/2666356.2594308]
   Grigore R, 2017, ACM SIGPLAN NOTICES, V52, P73, DOI 10.1145/3093333.3009871
   Harper Robert, 2012, Practical Foundations for Programming Languages, DOI DOI 10.1017/CBO9781139342131
   Hu Jason, 2020, POPL 2020
   Igarashi A, 2002, INFORM COMPUT, V175, P34, DOI 10.1006/inco.2001.2942
   Kristensen Bent, 1987, DAIMI REPORT SERIES, V16, P229
   MADSEN OL, 1989, SIGPLAN NOTICES, V24, P397, DOI 10.1145/74878.74919
   Melicher D., 2017, 31 EUR C OBJ OR PROG
   Muehlboeck Fabian, 2018, OOPSLA 2018
   Nieto A, 2017, SCALA'17: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P2, DOI 10.1145/3136000.3136003
   Nistor L, 2013, MASPEGHI 13, P9, DOI [DOI 10.1145/2489828, 10.1145/2489828.2489830]
   Odersky M, 2005, ACM SIGPLAN NOTICES, V40, P41, DOI 10.1145/1103845.1094815
   Odersky Martin., 2004, The Scala Language Specification
   Omar Cyrus, 2014, ECOOP 14
   PIERCE BC, 1994, INFORM COMPUT, V112, P131, DOI 10.1006/inco.1994.1055
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rapoport M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133870
   Reynolds J. C., 1974, Programming Symposium, P408
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Thorup KK, 1997, LECT NOTES COMPUT SC, V1241, P444
   Torgersen Mads, 1998, 5 WORKSH FDN OBJ OR, V544, P1
   Yu Xiang Zhu, 2019, THESIS CARNEGIE MELL
NR 32
TC 4
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 66
DI 10.1145/3371134
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400067
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Mathur, U
   Murali, A
   Krogmeier, P
   Madhusudan, P
   Viswanathan, M
AF Mathur, Umang
   Murali, Adithya
   Krogmeier, Paul
   Madhusudan, P.
   Viswanathan, Mahesh
TI Deciding Memory Safety for Single-Pass Heap-Manipulating Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Memory Safety; Program Verification; Aliasing; Decidability;
   Uninterpreted Programs; Streaming-Coherence; Forest Data-Structures
ID VERIFICATION
AB We investigate the decidability of automatic program verification for programs that manipulate heaps, and in particular, decision procedures for proving memory safety for them. We extend recent work that identified a decidable subclass of uninterpreted programs to a class of alias-aware programs that can update maps. We apply this theory to develop verification algorithms for memory safety- determining if a heap-manipulating program that allocates and frees memory locations and manipulates heap pointers does not dereference an unallocated memory location. We show that this problem is decidable when the initial allocated heap forms a forest data-structure and when programs are streaming-coherent, which intuitively restricts programs to make a single pass over a data-structure. Our experimental evaluation on a set of library routines that manipulate forest data-structures shows that common single-pass algorithms on data-structures often fall in the decidable class, and that our decision procedure is efficient in verifying them.
C1 [Mathur, Umang; Murali, Adithya; Krogmeier, Paul; Madhusudan, P.; Viswanathan, Mahesh] Univ Illinois, Dept Comp Sci, 1304 W Springfield Ave, Urbana, IL 61801 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign
RP Mathur, U (corresponding author), Univ Illinois, Dept Comp Sci, 1304 W Springfield Ave, Urbana, IL 61801 USA.
EM umathur3e@illinois.edu; adithya5@illinois.edu; paulmk2@illinois.edu;
   madhu@illinois.edu; vmahesh@illinois.edu
OI Murali, Adithya/0000-0002-6311-1467; Mathur, Umang/0000-0002-7610-0660
FU Google PhD Fellowship; National Science Foundation [NSF CCF 1901069, NSF
   CCF 1527395]
FX We thank the anonymous reviewers of POPL for several comments that
   helped improve the paper. Umang Mathur is partially supported by a
   Google PhD Fellowship. This material is based upon work supported by the
   National Science Foundation under Grants NSF CCF 1901069 and NSF CCF
   1527395.
CR Alur R, 2011, ACM SIGPLAN NOTICES, V46, P599, DOI 10.1145/1925844.1926454
   [Anonymous], 2014, WHAT IS MEMORY SAFET
   AUSTIN TM, 1994, SIGPLAN NOTICES, V29, P290, DOI 10.1145/773473.178446
   Balaban Ittai, 2005, P 6 INT C VER MOD CH, DOI [10.1007/978-3-540-30579-8_12, DOI 10.1007/978-3-540-30579-8_12]
   Ball T, 2001, ACM SIGPLAN NOTICES, V36, P203, DOI 10.1145/381694.378846
   Bardin Sebastien, 2004, SYMBOLIC VERIFICATIO
   Berdine J, 2004, LECT NOTES COMPUT SC, V3328, P97
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Bouajjani A, 2005, LECT NOTES COMPUT SC, V3440, P13
   Bouajjani A, 2006, LECT NOTES COMPUT SC, V4144, P517, DOI 10.1007/11817963_47
   Bozga M, 2007, LECT NOTES COMPUT SC, V4349, P122
   Bradley A. R., 2007, The Calculus of Computation
   Calcagno C, 2011, J ACM, V58, DOI 10.1145/2049697.2049700
   Condit J, 2003, ACM SIGPLAN NOTICES, V38, P232, DOI 10.1145/780822.781157
   Cook B, 2011, LECT NOTES COMPUT SC, V6901, P235, DOI 10.1007/978-3-642-23217-6_16
   Criswell John, 2007, Operating Systems Review, V41, P351, DOI 10.1145/1323293.1294295
   Dor Nurit, 2000, SAS
   Floyd R. W., 1967, MATH ASPECTS COMPUTE, V19, P1
   Godoy G, 2009, LECT NOTES COMPUT SC, V5673, P326, DOI 10.1007/978-3-642-03237-0_22
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   Joannou A, 2017, PR IEEE COMP DESIGN, P641, DOI 10.1109/ICCD.2017.112
   Lev-Ami T, 2000, LECT NOTES COMPUT SC, V1824, P280
   lowRISC, 2019, LOWRISC FULLY OPEN S
   Luding Christof, 2019, ABS191009089 CORR
   Manevich R, 2005, LECT NOTES COMPUT SC, V3385, P181
   Mathur U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290359
   Mathur Umang, 2019, ABS191010889 CORR
   Mathur Umang, STREAMVERIF AUTOMATA
   Mathur Umang, 2019, ABS191000298 CORR
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Microsoft, 2019, 70 PERC ALL SEC BUGS
   Moller A, 2001, ACM SIGPLAN NOTICES, V36, P221, DOI 10.1145/381694.378851
   NAGARAKATTE S., 2015, SUMMIT ADV PROGRAMMI, P190
   Necula GC, 2005, ACM T PROGR LANG SYS, V27, P477, DOI 10.1145/1065887.1065892
   Necula GC, 2002, ACM SIGPLAN NOTICES, V37, P128, DOI 10.1145/565816.503286
   Neider D, 2018, LECT NOTES COMPUT SC, V10805, P232, DOI 10.1007/978-3-319-89960-2_13
   Nethercote N, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P89, DOI 10.1145/1250734.1250746
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   Oleksenko O, 2018, P ACM MEAS ANAL COMP, V2, DOI 10.1145/3224423
   Perez Juan Antonio Navarro, 2011, SIGPLAN Notices, V46, P556, DOI 10.1145/1993316.1993563
   Perez Juan Antonio Navarro, 2013, Programming Languages and Systems. 11th Asian Symposium, APLAS 2013. Proceedings: LNCS 8301, P90, DOI 10.1007/978-3-319-03542-0_7
   Piskac Ruzica, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P773, DOI 10.1007/978-3-642-39799-8_54
   Piskac R, 2014, LECT NOTES COMPUT SC, V8559, P711, DOI 10.1007/978-3-319-08867-9_47
   Piskac T., 2014, LNCS, P124, DOI DOI 10.1007/978-3-642-54862-8_9
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rosu G, 2009, LECT NOTES COMPUT SC, V5779, P132, DOI 10.1007/978-3-642-04694-0_10
   Safe-C, 2019, SAFE C LIB
   Sagiv M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P105, DOI 10.1145/292540.292552
   Serebryany K., 2012, USENIX ATC 2012, P309
   Stepanov E, 2018, Memory tagging and how it improves C/C++ memory safety
   Szekeres L, 2013, P IEEE S SECUR PRIV, P48, DOI 10.1109/SP.2013.13
   The Rust Team, 2019, RUST PROGR LANG
   Watson RNM, 2015, P IEEE S SECUR PRIV, P20, DOI 10.1109/SP.2015.9
   Yahav E, 2001, ACM SIGPLAN NOTICES, V36, P27, DOI 10.1145/373243.360206
NR 55
TC 6
Z9 6
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 35
DI 10.1145/3371103
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400036
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU O'Hearn, PW
AF O'Hearn, Peter W.
TI Incorrectness Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Proofs; Bugs; Static Analysis
ID SYMBOLIC EXECUTION; CORRECTNESS
AB Program correctness and incorrectness are two sides of the same coin. As a programmer, even if you would like to have correctness, you might find yourself spending most of your time reasoning about incorrectness. This includes informal reasoning that people do while looking at or thinking about their code, as well as that supported by automated testing and static analysis tools. This paper describes a simple logic for program incorrectness which is, in a sense, the other side of the coin to Hoare's logic of correctness.
C1 [O'Hearn, Peter W.] Facebook, London, England.
   [O'Hearn, Peter W.] UCL, London, England.
C3 Facebook Inc; University of London; University College London
RP O'Hearn, PW (corresponding author), Facebook, London, England.; O'Hearn, PW (corresponding author), UCL, London, England.
FU EPSRC [EP/R006865/1] Funding Source: UKRI
CR [Anonymous], 2001, P SSGRR
   [Anonymous], 1949, C HIGH SPEED AUT CAL
   [Anonymous], 1996, Phrack Magazine
   APT KR, 1981, ACM T PROGR LANG SYS, V3, P431, DOI 10.1145/357146.357150
   APT KR, 1986, J ACM, V33, P724, DOI 10.1145/6490.6494
   Back R.-J., 1998, Refinement Calculus
   Blackshear S., 2018, P ACM PROGRAM LANG, DOI DOI 10.1145/3276514
   Blackshear S, 2013, ACM SIGPLAN NOTICES, V48, P275, DOI 10.1145/2499370.2462186
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   Bush WR, 2000, SOFTWARE PRACT EXPER, V30, P775, DOI 10.1002/(SICI)1097-024X(200006)30:7<775::AID-SPE309>3.0.CO;2-H
   Cadar C, 2013, COMMUN ACM, V56, P82, DOI 10.1145/2408776.2408795
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Calcagno C, 2011, J ACM, V58, DOI 10.1145/2049697.2049700
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Clint M., 1972, Acta Informatica, V1, P214, DOI 10.1007/BF00288686
   Constine Josh., 2013, TechCrunch
   Cook B, 2011, COMMUN ACM, V54, P88, DOI 10.1145/1941487.1941509
   COOK SA, 1978, SIAM J COMPUT, V7, P70, DOI 10.1137/0207005
   Cousot P, 2002, THEOR COMPUT SCI, V277, P47, DOI 10.1016/S0304-3975(00)00313-3
   Cousot P., 2013, AUTOMATIC INFERENCE
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   de Vries E, 2011, LECT NOTES COMPUT SC, V7041, P155, DOI 10.1007/978-3-642-24690-6_12
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Distefano D, 2019, COMMUN ACM, V62, P62, DOI 10.1145/3338112
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   Godefroid P., 2007, SIGPLAN Notices, V42, P47, DOI [10.1145/1190216.1190226, 10.1145/1190215.1190226]
   Godefroid Patrice, 2008, Network and Distributed Systems Security
   Gorogiannis N, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290370
   Gotsman A, 2011, ELECTRON NOTES THEOR, V276, P171, DOI 10.1016/j.entcs.2011.09.021
   HAREL D, 1980, THEOR COMPUT SCI, V12, P61, DOI 10.1016/0304-3975(80)90005-5
   Harel D., 1979, Lecture Notes in Computer Science (LNCS), V68
   HAREL D, 2000, FOUNDAT COMPUT, P3
   Harman M, 2018, IEEE INT WORK C SO, P1, DOI 10.1109/SCAM.2018.00009
   Hayes I. J., 2017, TUTORIAL LECT LECT N, P1, DOI DOI 10.1007/978-3-030-02928
   HOARE CAR, 1978, J ACM, V25, P461, DOI 10.1145/322077.322088
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hoare T, 2011, J LOGIC ALGEBR PROGR, V80, P266, DOI 10.1016/j.jlap.2011.04.005
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Kozen Dexter, 2000, ACM Trans. Comput. Log., V1, P60, DOI DOI 10.1145/343369.343378
   Kroening D, 2015, FORM METHOD SYST DES, V47, P75, DOI 10.1007/s10703-015-0228-1
   LAMPORT L, 1977, IEEE T SOFTWARE ENG, V3, P125, DOI 10.1109/TSE.1977.229904
   Manolios P, 2001, IEEE S LOG, P366, DOI 10.1109/LICS.2001.932512
   Nipkow T, 2002, NATO SCI SER II-MATH, V62, P341
   O'Hearn P, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P13, DOI 10.1145/3209108.3209109
   O'Hearn P, 2019, COMMUN ACM, V62, P86, DOI 10.1145/3211968
   OHearn Peter W., 2016, ACM SIGLOG NEWS, V3, P47, DOI DOI 10.1145/2984450.2984457
   PNUELI A, 1981, THEOR COMPUT SCI, V13, P45, DOI 10.1016/0304-3975(81)90110-9
   Potvin R, 2016, COMMUN ACM, V59, P78, DOI 10.1145/2854146
   Ramanathan Murali Krishna, 2013, P 9 JOINT M EUR SOFT, DOI DOI 10.1145/2491411.2501854
   Ranzato F, 2013, LECT NOTES COMPUT SC, V7737, P15
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rummer P., 2007, TAP
   Santos JF, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290379
   Schmidt DA, 2007, SCI COMPUT PROGRAM, V64, P29, DOI 10.1016/j.scico.2006.03.008
   STOUGHTON A, 1988, THEOR COMPUT SCI, V59, P317, DOI 10.1016/0304-3975(88)90149-1
   Yang H., 2001, THESIS U ILLINOIS
NR 57
TC 40
Z9 42
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 10
DI 10.1145/3371078
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400011
OA gold
DA 2024-07-18
ER

PT J
AU Raad, A
   Wickerson, J
   Neiger, G
   Vafeiadis, V
AF Raad, Azalea
   Wickerson, John
   Neiger, Gil
   Vafeiadis, Viktor
TI Persistency Semantics of the Intel-x86 Architecture
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE weak memory; memory persistency; non-volatile memory; Intel-x86
ID MEMORY; TRANSACTIONS; X86
AB Emerging non-volatile memory (NVM) technologies promise the durability of disks with the performance of RAM. To describe the persistency guarantees of NVM, several memory persistency models have been proposed in the literature. However, the persistency semantics of the ubiquitous x86 architecture remains unexplored to date. To close this gap, we develop the Px86 ('persistent x86') model, formalising the persistency semantics of Intel-x86 for the first time. We formulate Px86 both operationally and declaratively, and prove that the two characterisations are equivalent. To demonstrate the application of Px86, we develop two persistent libraries over Px86: a persistent transactional library, and a persistent variant of the Michael-Scott queue. Finally, we encode our declarative Px86 model in Alloy and use it to generate persistency litmus tests automatically.
C1 [Raad, Azalea; Vafeiadis, Viktor] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Wickerson, John] Imperial Coll London, London, England.
   [Neiger, Gil] Intel Labs, Hillsboro, OR USA.
C3 Imperial College London; Intel Corporation
RP Raad, A (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
EM azalea@inpi-sws.org; j.wickerson@imperial.ac.uk; gil.neiger@intel.com;
   viktor@mpi-sws.org
RI Vafeiadis, Viktor/B-5809-2014
OI Vafeiadis, Viktor/0000-0001-8436-0334
FU European Research Council (ERC) Consolidator Grant for the project
   lRustBelt", under the European Union Horizon 2020 Framework Programme
   [683289]; EPSRC grant [EP/R006865/1]; EPSRC [EP/R006865/1] Funding
   Source: UKRI
FX We thank Nathan Chong, Stephen Dolan, William Wang, and the POPL 2020
   reviewers for helpful discussions and valuable feedback. The first
   author was supported in part by a European Research Council (ERC)
   Consolidator Grant for the project lRustBelt", under the European Union
   Horizon 2020 Framework Programme (grant agreement number 683289). The
   second author was supported in part by the EPSRC grant EP/R006865/1.
CR Abdulla PA, 2015, LECT NOTES COMPUT SC, V9032, P308, DOI 10.1007/978-3-662-46669-8_13
   [Anonymous], 2014, Intel Architecture Instruction Set Extensions Programming Reference (319433-022)
   Avni H, 2015, LECT NOTES COMPUT SC, V9363, P617, DOI 10.1007/978-3-662-48653-5_41
   Boehm HJ, 2016, ACM SIGPLAN NOTICES, V51, P55, DOI [10.1145/2926697.2926704, 10.1145/3241624.2926704]
   Chakrabarti DR, 2014, ACM SIGPLAN NOTICES, V49, P433, DOI [10.1145/2660193.2660224, 10.1145/2714064.2660224]
   Chatzistergiou A, 2015, PROC VLDB ENDOW, V8, P497, DOI 10.14778/2735479.2735483
   Chong N, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P211, DOI [10.1145/3192366.3192373, 10.1145/3296979.3192373]
   Coburn J, 2011, ACM SIGPLAN NOTICES, V46, P105, DOI [10.1145/1961295.1950380, 10.1145/1961296.1950380]
   Condit J, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P133
   Cooper Harold, 2008, PERSISTENT COLLECTIO
   Friedman M, 2018, ACM SIGPLAN NOTICES, V53, P28, DOI 10.1145/3200691.3178490
   GHARACHORLOO K, 1990, 17TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P15, DOI 10.1109/ISCA.1990.134503
   Gogte V, 2018, ACM SIGPLAN NOTICES, V53, P46, DOI [10.1145/3192366.3192367, 10.1145/3296979.3192367]
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Intel, 2019, 325462069US INT
   Intel, 2019, 3D XPOINT
   Intel, 2015, Persistent Memory Programming
   ITRS, 2011, PROCESS INTEGRATION
   Izraelevitz Joseph, 2016, Distributed Computing. 30th International Symposium, DISC 2016. Proceedings: LNCS 9888, P313, DOI 10.1007/978-3-662-53426-7_23
   Izraelevitz J, 2016, ACM SIGPLAN NOTICES, V51, P427, DOI 10.1145/2954679.2872410
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Jain AK, 2018, ANN IEEE SYM FIELD P, P173, DOI 10.1109/FCCM.2018.00035
   Jishen Zhao, 2013, 2013 46th Annual IEEE/ACM International Symposium on Microarchitecture (MICRO). Proceedings, P421, DOI 10.1145/2540708.2540744
   Joshi A, 2015, PROCEEDINGS OF THE 48TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO-48), P660, DOI 10.1145/2830772.2830805
   Kawahara T, 2012, MICROELECTRON RELIAB, V52, P613, DOI 10.1016/j.microrel.2011.09.028
   Kokologiannakis M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360599
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   Kolli A, 2017, 44TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA 2017), P481, DOI [10.1145/3079856.3080229, 10.1145/3140659.3080229]
   Kolli A, 2016, ACM SIGPLAN NOTICES, V51, P399, DOI 10.1145/2954679.2872381
   Kolli Aasheesh, 49 ANN IEEE ACM INT
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lee BC, 2009, CONF PROC INT SYMP C, P2, DOI 10.1145/1555815.1555758
   Liu SH, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P411, DOI 10.1145/3297858.3304015
   Lustig D, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P661, DOI 10.1145/3037697.3037723
   Michael M. M., 1996, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, P267, DOI 10.1145/248052.248106
   Milicevic Aleksandar, 2015, 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering (ICSE). Proceedings, P609, DOI 10.1109/ICSE.2015.77
   Nawab Faisal, 2017, 31 INT S DISTR COMP, V37, P1
   Owens S, 2010, LECT NOTES COMPUT SC, V6183, P478, DOI 10.1007/978-3-642-14107-2_23
   PCJ, 2016, PERS COLL JAV
   Pelley S, 2014, CONF PROC INT SYMP C, P265, DOI 10.1109/ISCA.2014.6853222
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360561
   Raad A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276507
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290381
   Raad Azalea, 2018, P ESOP, P940, DOI DOI 10.1007/978-3-319-89884-1_33
   Raad Azalea, VERIFICATION MODEL C, P1
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   Shu Hongping, 2018, EMPIRICAL STUDY T MA, P61, DOI [10.1109/NVMSA.2018.00015, DOI 10.1109/NVMSA.2018.00015]
   SPARC, 1992, SPARC ARCHITECTURE M
   Strukov DB, 2008, NATURE, V453, P80, DOI 10.1038/nature06932
   Tavakkol Arash, 2018, ARXIV181009360
   Volos Haris, 2011, SIGPLAN Notices, V46, P91, DOI 10.1145/1961296.1950379
   Wu Xiaojian., 2011, Proceedings of 2011 International Conference for High Performance Computing, Networking, Storage and Analysis (SC '11), p39:1
   Zuriel Y, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360554
NR 53
TC 32
Z9 32
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 11
DI 10.1145/3371079
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400012
OA gold
DA 2024-07-18
ER

PT J
AU Stein, B
   Nielsen, BB
   Chang, BYE
   Moller, A
AF Stein, Benno
   Nielsen, Benjamin Barslev
   Chang, Bor-Yuh Evan
   Moller, Anders
TI Static Analysis with Demand-Driven Value Refinement
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE JavaScript; dataflow analysis; abstract interpretation
AB Static analysis tools for JavaScript must strike a delicate balance, achieving the level of precision required by the most complex features of target programs without incurring prohibitively high analysis time. For example, reasoning about dynamic property accesses sometimes requires precise relational information connecting the object, the dynamically-computed property name, and the property value. Even a minor precision loss at such critical program locations can result in a proliferation of spurious dataflow that renders the analysis results useless.
   We present a technique by which a conventional non-relational static dataflow analysis can be combined soundly with a value refinement mechanism to increase precision on demand at critical locations. Crucially, our technique is able to incorporate relational information from the value refinement mechanism into the non-relational domain of the dataflow analysis.
   We demonstrate the feasibility of this approach by extending an existing JavaScript static analysis with a demand-driven value refinement mechanism that relies on backwards abstract interpretation. Our evaluation finds that precise analysis of widely used JavaScript utility libraries depends heavily on the precision at a small number of critical locations that can be identified heuristically, and that backwards abstract interpretation is an effective mechanism to provide that precision on demand.
C1 [Stein, Benno; Chang, Bor-Yuh Evan] Univ Colorado, Boulder, CO 80309 USA.
   [Nielsen, Benjamin Barslev; Moller, Anders] Aarhus Univ, Aarhus, Denmark.
C3 University of Colorado System; University of Colorado Boulder; Aarhus
   University
RP Stein, B (corresponding author), Univ Colorado, Boulder, CO 80309 USA.
EM benno.stein@colorado.edu; barslev@cs.au.dk; evan.chang@colorado.edu;
   amoeller@cs.au.dk
RI Möller, Andrea/GNP-5183-2022
OI Möller, Andrea/0000-0002-2345-1299; Moller, Anders/0000-0003-1333-2314;
   Chang, Bor-Yuh Evan/0000-0002-1954-0774; Stein,
   Benno/0000-0002-0070-891X
FU European Research Council (ERC) under the European Union [647544]; NSF
   [CCF-1619282, CCF-1055066]; DARPA [FA8750-14-2-0263]; European Research
   Council (ERC) [647544] Funding Source: European Research Council (ERC)
FX We are grateful to Esben Andreasen for his contributions to the early
   phases of this research. This work was supported by the European
   Research Council (ERC) under the European Union's Horizon 2020 research
   and innovation program (grant agreement No 647544) and in part by NSF
   under grants CCF-1619282 and CCF-1055066 and by DARPA under agreement
   number FA8750-14-2-0263.
CR Amadini R, 2017, LECT NOTES COMPUT SC, V10205, P41, DOI 10.1007/978-3-662-54577-5_3
   Andreasen E. S., 2017, P 6 ACM SIGPLAN INT, P31, DOI [10.1145/3088515.3088521, DOI 10.1145/3088515.3088521]
   Andreasen E, 2014, ACM SIGPLAN NOTICES, V49, P17, DOI [10.1145/2714064.2660214, 10.1145/2660193.2660214]
   Ball T., 2001, Model Checking Software. 8th International SPIN Workshop. Proceedings (Lecture Notes in Computer Science Vol.2057), P103
   Ball T, 2005, LECT NOTES COMPUT SC, V3576, P67
   Blackshear S, 2013, ACM SIGPLAN NOTICES, V48, P275, DOI 10.1145/2499370.2462186
   Chandra S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P363, DOI 10.1145/1542476.1542517
   Chang Bor-Yuh Evan, 2005, VERIFICATION MODEL C
   Changhee Park, 2017, ACM SIGPLAN Notices, V52, P25, DOI 10.1145/3093334.2989228
   CHASE DR, 1990, SIGPLAN NOTICES, V25, P296, DOI 10.1145/93548.93585
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Consot P, 2011, LECT NOTES COMPUT SC, V6538, P150, DOI 10.1007/978-3-642-18275-4_12
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2007, LECT NOTES COMPUT SC, V4435, P272
   Cox A, 2014, LECT NOTES COMPUT SC, V8723, P134, DOI 10.1007/978-3-319-10936-7_9
   Dewey K, 2015, INT SYM CODE GENER, P34, DOI 10.1109/CGO.2015.7054185
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Gardner P, 2012, ACM SIGPLAN NOTICES, V47, P31, DOI 10.1145/2103621.2103663
   Guha A, 2010, LECT NOTES COMPUT SC, V6183, P126, DOI 10.1007/978-3-642-14107-2_7
   Gulavani BS, 2006, LECT NOTES COMPUT SC, V3920, P474
   Guyer SZ, 2005, SCI COMPUT PROGRAM, V58, P83, DOI 10.1016/j.scico.2005.02.005
   Henzinger TA, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/565816.503279
   IBM Research, 2018, T J WATSON LIB ANAL
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Jensen SH, 2009, LECT NOTES COMPUT SC, V5673, P238, DOI 10.1007/978-3-642-03237-0_17
   KAM JB, 1977, ACTA INFORM, V7, P305, DOI 10.1007/BF00290339
   Kashyap V, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P121, DOI 10.1145/2635868.2635904
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   Ko Y, 2019, SOFTWARE PRACT EXPER, V49, P840, DOI 10.1002/spe.2676
   Ko Y, 2017, LECT NOTES COMPUT SC, V10695, P148, DOI 10.1007/978-3-319-71237-6_8
   Lee H, 2012, FOOL 2012 19 INT WOR, P96
   Lerner S, 2002, ACM SIGPLAN NOTICES, V37, P270, DOI 10.1145/565816.503298
   Liang P, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P590
   Madsen M, 2014, LECT NOTES COMPUT SC, V8409, P197
   Manevich R., 2004, Software Engineering Notes, V29, P63, DOI 10.1145/1041685.1029907
   Oh H, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2821504
   Park Changhee, 2015, P 29 EUR C OBJ OR PR, V37, P735, DOI 10
   Rival X, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275501
   Santos JF, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290379
   Santos Jose Fragoso, 2018, P ACM PROGR LANG 2, V2
   Spath J., 2016, PROC EUR C OBJECT OR, p22:1, DOI [10.4230/DARTS.2.1.12, DOI 10.4230/LIPICS.ECOOP.2016.22]
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Sridharan M, 2012, LECT NOTES COMPUT SC, V7313, P435, DOI 10.1007/978-3-642-31057-7_20
   Toubhans A, 2013, LECT NOTES COMPUT SC, V7737, P375
   Wei SY, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P487, DOI 10.1145/2950290.2950338
NR 47
TC 8
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 140
DI 10.1145/3360566
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500025
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Mokhov, A
   Lukyanov, G
   Marlow, S
   Dimino, J
AF Mokhov, Andrey
   Lukyanov, Georgy
   Marlow, Simon
   Dimino, Jeremie
TI Selective Applicative Functors
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE applicative functors; selective functors; monads; effects
AB Applicative functors and monads have conquered the world of functional programming by providing general and powerful ways of describing effectful computations using pure functions. Applicative functors provide a way to compose independent effects that cannot depend on values produced by earlier computations, and all of which are declared statically. Monads extend the applicative interface by making it possible to compose dependent effects, where the value computed by one effect determines all subsequent effects, dynamically.
   This paper introduces an intermediate abstraction called selective applicative functors that requires all effects to be declared statically, but provides a way to select which of the effects to execute dynamically. We demonstrate applications of the new abstraction on several examples, including two industrial case studies.
C1 [Mokhov, Andrey; Lukyanov, Georgy] Newcastle Univ, Newcastle Upon Tyne, Tyne & Wear, England.
   [Marlow, Simon] Facebook, London, England.
   [Dimino, Jeremie] Jane St, London, England.
C3 Newcastle University - UK; Facebook Inc
RP Mokhov, A (corresponding author), Newcastle Univ, Newcastle Upon Tyne, Tyne & Wear, England.
EM andrey.mokhov@ncl.ac.uk; g.lukyanov2@ncl.ac.uk; smarlow@fb.com;
   jdimino@janestreet.com
FU Royal Society Industry Fellowship [IF160117]; EPSRC [1948936] Funding
   Source: UKRI
FX Andrey Mokhov's research is supported by a Royal Society Industry
   Fellowship IF160117 on the topic lTowards Cloud Build Systems with
   Dynamic Dependency Graphsz.
CR [Anonymous], 1989, FPCA 1989, DOI DOI 10.1145/99370.99404
   Benton N, 2001, J FUNCT PROGRAM, V11, P395, DOI 10.1017/S0956796801004099
   Bertot Yves, 2013, Interactive theorem proving and program development: Coq'Art: the calculus of inductive constructions
   Capriotti P, 2014, ELECTRON P THEOR COM, P2, DOI 10.4204/EPTCS.153.2
   Dickson Hamish., 2019, IMPL SEL APPL FUNCT
   Doaitse Swierstra S., 1996, Advanced Functional Programming. Second International School. Tutorial Text, P184
   Fancher Will., 2016, MORE APPL EFFECTS FR
   Fancher Will., 2017, PROFUNCTORS ARROWS S
   Gibbons J, 2016, ACM SIGPLAN NOTICES, V51, P45, DOI 10.1145/3241625.2976005
   Gibson Richard., 2019, IMPLEMENTATION SELEC
   Gill A, 2015, ACM SIGPLAN NOTICES, V50, P59, DOI 10.1145/2804302.2804311
   Harper Robert., 2011, BOOLEAN BLINDNESS
   Holvikari Antti., 2018, IMPLEMENTATION SELEC
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Hutton G., 1998, Journal of Functional Programming, V8, P437, DOI 10.1017/S0956796898003050
   Jane Street, 2018, DUNE COMPOSABLE BUIL
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Leijen D, 2000, ACM SIGPLAN NOTICES, V35, P109, DOI 10.1145/331963.331977
   Lindley S, 2011, ELECTRON NOTES THEOR, V229, P97, DOI 10.1016/j.entcs.2011.02.018
   Lukyanov Georgy., 2019, IMPLEMENTATION SELEC
   Marlow S, 2016, ACM SIGPLAN NOTICES, V51, P92, DOI [10.1145/3241625.2976007, 10.1145/2976002.2976007]
   Marlow S, 2014, ACM SIGPLAN NOTICES, V49, P325, DOI 10.1145/2692915.2628144
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Megacz, 2011, LNCS, P164
   Menendez Dave., 2013, FREE APPLICATIVE FUN
   Misunas, 1975, ACM SIGARCH COMPUTER, V3
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Mokhov A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236774
   Mokhov Andrey., 2009, THESIS NEWCASTLE U
   Mokhov Andrey., 2019, IMPLEMENTATION SELEC
   Mokhov Andrey., 2018, SELECTIVE APPLICATIV
   Paterson R, 2001, ACM SIGPLAN NOTICES, V36, P229, DOI 10.1145/507669.507664
   Peebles Daniel., 2019, SIGMA SELECTIVE
   Permyakov Evgeny., 2012, APPLICATIVE FUNCTORS
   Piessens Frank., 2013, P ACM SIGPLAN 2013 W
   Rivas E, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796817000132
   Ruiz-Lopez, 2019, IMPLEMENTATION SELEC
   Runciman C, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P37
   Scott Ryan., 2018, P 11 ACM HASK S HASK
   Sokolov D, 2018, DES AUT TEST EUROPE, P1562, DOI 10.23919/DATE.2018.8342264
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   The OPAM team, 2018, OCAML PACK MAN
   Wadler, 1995, INT SCH ADV FUNCTION, p24S52
   Wu Nicolas., 2017, ART SCI ENG PROGRAM, V1
   Yallop Jeremy., 2010, THESIS U EDINGURGH
   Yorgey Brent., 2009, IRC CONVERSATION BRA
NR 46
TC 6
Z9 7
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 90
DI 10.1145/3341694
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900013
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Smith, C
   Albarghouthi, AWS
AF Smith, Calvin
   Albarghouthi, A. W. S.
TI Synthesizing Differentially Private Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; differential privacy; linear type systems
AB Inspired by the proliferation of data-analysis tasks, recent research in program synthesis has had a strong focus on enabling users to specify data-analysis programs through intuitive specifications, like examples and natural language. However, with the ever-increasing threat to privacy through data analysis, we believe it is imperative to reimagine program synthesis technology in the presence of formal privacy constraints.
   In this paper, we study the problem of automatically synthesizing randomized, differentially private programs, where the user can provide the synthesizer with a constraint on the privacy of the desired algorithm. We base our technique on a linear dependent type system that can track the resources consumed by a program, and hence its privacy cost. We develop a novel type-directed synthesis algorithm that constructs randomized differentially private programs. We apply our technique to the problems of synthesizing database-like queries as well as recursive differential privacy mechanisms from the literature.
C1 [Smith, Calvin; Albarghouthi, A. W. S.] Univ Wisconsin Madison, 1210 Dayton St, Madison, WI 53706 USA.
C3 University of Wisconsin System; University of Wisconsin Madison
RP Smith, C (corresponding author), Univ Wisconsin Madison, 1210 Dayton St, Madison, WI 53706 USA.
EM cjsmith@cs.wisc.edu; aws@cs.wisc.edu
FU National Science Foundation CCF [1566015, 1652140]; Division of
   Computing and Communication Foundations; Direct For Computer & Info Scie
   & Enginr [1652140, 1566015] Funding Source: National Science Foundation
FX We would like to thank Marco Gaboardi for their extensive comments and
   advice on earlier drafts, Justin Hsu for the discussion and feedback,
   and all reviewers for their suggestions. This work is supported by the
   National Science Foundation CCF under awards 1566015 and 1652140.
CR Albarghouthi A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158146
   Bache K, 2013, UCI machine learning repository
   Barthe G., 2016, ICALP 2016, p107:1, DOI [10.4230/LIPIcs.ICALP.2016.107, DOI 10.4230/LIPICS.ICALP.2016.107]
   Datta Anupam., 2017, P 2017 ACM SIGSAC C, DOI [DOI 10.1145/3133956.3134097, 10.1145/3133956.3134097]
   de Amorim Arthur Azevedo, 2014, S IMPL APPL FUNCT PR
   de Amorim Arthur Azevedo, 2017, P 44 ACM SIGPLAN S P
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dwork C, 2013, FOUND TRENDS THEOR C, V9, P211, DOI 10.1561/0400000042
   Erlingsson U, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1054, DOI 10.1145/2660267.2660348
   Feldman M, 2015, KDD'15: PROCEEDINGS OF THE 21ST ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P259, DOI 10.1145/2783258.2783311
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   Gaboardi Marco, 2013, P POPL 2013, P357, DOI DOI 10.1145/2480359.2429113
   Gulwani S, 2012, COMMUN ACM, V55, P97, DOI 10.1145/2240236.2240260
   Gupta A, 2012, LECT NOTES COMPUT SC, V7194, P339, DOI 10.1007/978-3-642-28914-9_19
   Haney S, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1339, DOI 10.1145/3035918.3035940
   Hardt Moritz, 2012, Advances in Neural Information Processing Systems (NeuRIPS'12), V25, P2348
   Johnson Noah M., 2018, PRACTICAL DIFFERENTI
   Kirchner Lauren., How we analyzed the compas recidivism algorithm
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   McSherry F, 2007, ANN IEEE SYMP FOUND, P94, DOI 10.1109/FOCS.2007.66
   McSherry F, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P19
   Miltner A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158089
   Narayan Arjun, 2012, OSDI, P149
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Proserpio D, 2014, PROC VLDB ENDOW, V7, P637, DOI 10.14778/2732296.2732300
   Rondon PM, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1379022.1375602
   Roy I., 2010, NSDI, P20
   Smith C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290352
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2980983.2908102, 10.1145/2908080.2908102]
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang XY, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133886
   Yaghmazadeh Navid., 2017, SQLIZER QUERY SYNTHE
   Yu Y., 2008, OSDI, V8, P1
   Zaharia Matei., 2012, NSDI 12
   Zhang S, 2013, IEEE INT CONF AUTOM, P224, DOI 10.1109/ASE.2013.6693082
NR 39
TC 3
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 94
DI 10.1145/3341698
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900017
OA gold
DA 2024-07-18
ER

PT J
AU Castellan, S
   Yoshida, N
AF Castellan, Simon
   Yoshida, Nobuko
TI Two Sides of the Same Coin: Session Types and Game Semantics A
   Synchronous Side and an Asynchronous Side
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE pi-calculus; session types; event structures; game semantics
AB Game semantics and session types are two formalisations of the same concept: message-passing open programs following certain protocols. Game semantics represents protocols as games, and programs as strategies; while session types specify protocols, and well-typed pi-calculus processes model programs. Giving faithful models of the pi-calculus and giving a precise description of strategies as a programming language are two difficult problems. In this paper, we show how these two problems can be tackled at the same time by building an accurate game semantics model of the session pi-calculus.
   Our main contribution is to fill a semantic gap between the synchrony of the (session) pi-calculus and the asynchrony of game semantics, by developing an event-structure based game semantics for synchronous concurrent computation. This model supports the first truly concurrent fully abstract (for barbed congruence) interpretation of the synchronous (session) pi-calculus. We further strengthen this correspondence, establishing finite definability of asynchronous strategies by the internal session pi-calculus. As an application of these results, we propose a faithful encoding of synchronous strategies into asynchronous strategies by call-return protocols, which induces automatically an encoding at the level of processes. Our results bring session types and game semantics into the same picture, proposing the session calculus as a programming language for strategies, and strategies as a very accurate model of the session calculus. We implement a prototype which computes the interpretation of session processes as synchronous strategies.
C1 [Castellan, Simon; Yoshida, Nobuko] Imperial Coll London, London, England.
C3 Imperial College London
RP Castellan, S (corresponding author), Imperial Coll London, London, England.
EM s.castellan@ic.ac.uk; n.yoshida@ic.ac.uk
RI Yoshida, Nobuko/AAL-6082-2020
OI Yoshida, Nobuko/0000-0002-3925-8557
FU EPSRC [EP/K034413/1, EP/K011715/1, EP/L00058X/1, EP/N027833/1,
   EP/N028201/1]; EPSRC [EP/N027833/1, EP/K011715/1, EP/K034413/1] Funding
   Source: UKRI
FX This work has been partially sponsored by: EPSRC EP/K034413/1,
   EP/K011715/1, EP/L00058X/1, EP/N027833/1, and EP/N028201/1. We would
   like to thank Pierre Clairambault, Sung-Shik Jongmans, and Hugo Paquet
   for helpful comments and discussions, as well as the POPL reviewers for
   their feedback.
CR Abadi M, 2018, J ACM, V65, DOI 10.1145/3127586
   Abramsky S, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P334, DOI 10.1109/LICS.1998.705669
   Abramsky S., 1994, Theoretical Aspects of Computer Software. International Symposium TACS '94 Proceedings, P1
   Abramsky S., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P431, DOI 10.1109/LICS.1999.782638
   Abramsky S, 1999, THEOR COMPUT SCI, V227, P3, DOI 10.1016/S0304-3975(99)00047-X
   Abramsky S, 2000, INFORM COMPUT, V163, P409, DOI [10.1006/inco.2000.2930, 10.1006/inco2000.2930]
   [Anonymous], 1992, Mathematical Structures in Computer Science, DOI DOI 10.1017/S0960129500001407
   Atkey R, 2017, LECT NOTES COMPUT SC, V10201, P56, DOI 10.1007/978-3-662-54434-1_3
   Baelde D., 2015, LIPICS, V42, P497
   Berger M, 2001, LECT NOTES COMPUT SC, V2044, P29
   Castellan S, 2018, LECT NOTES COMPUT SC, V10803, P3, DOI 10.1007/978-3-319-89366-2_1
   Castellan S, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(3:35)2017
   Castellan Simon, 2018, 2 SIDES SAME COIN SE
   Cattani GL, 1997, LECT NOTES COMPUT SC, V1258, P58
   Chen TC, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(2:12)2017
   Crafa S, 2007, LECT NOTES COMPUT SC, V4703, P317
   Cristescu ID, 2015, LECT NOTES COMPUT SC, V9399, P223, DOI 10.1007/978-3-319-25150-9_14
   Danos V., 2002, ACM Transactions on Computational Logic, V3, P359, DOI 10.1145/507382.507385
   Disney T, 2015, IEEE S LOG, P104, DOI 10.1109/LICS.2015.20
   Eberhart Clovis, 2013, ABS13104306 CORR
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Ghica DR, 2011, LECT NOTES COMPUT SC, V6604, P350, DOI 10.1007/978-3-642-19805-2_24
   Harmer R., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P422, DOI 10.1109/LICS.1999.782637
   Hennessy M, 2007, DISTRIBUTED PI-CALCULUS, P1
   HONDA K, 1991, LECT NOTES COMPUT SC, V512, P133
   HONDA K, 1995, THEOR COMPUT SCI, V151, P437, DOI 10.1016/0304-3975(95)00074-7
   Honda K, 1999, THEOR COMPUT SCI, V221, P393, DOI 10.1016/S0304-3975(99)00039-0
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Hyland J. M. E., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P96, DOI 10.1145/224164.224189
   Hyland JME, 2000, INFORM COMPUT, V163, P285, DOI [10.1006/inco.2000.2917, 10.1006/inco2000.2917]
   Kouzapas D, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:20)2014
   Laird J, 2005, LECT NOTES COMPUT SC, V3653, P51, DOI 10.1007/11539452_8
   Laird J, 1997, IEEE S LOG, P58, DOI 10.1109/LICS.1997.614931
   Laird James, 2001, Electronic Notes in Theoretical Computer Science, V45, P232, DOI [10.1016/S1571-0661(04)80965-4, DOI 10.1016/S1571-0661(04)80965-4]
   Martin J., 1994, FULL ABSTRACTION PCF
   Melliès PA, 2005, IEEE S LOG, P386
   Melliès PA, 2007, LECT NOTES COMPUT SC, V4703, P395
   Melliès PA, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P699, DOI 10.1145/3209108.3209116
   Melliès PA, 2006, THEOR COMPUT SCI, V358, P200, DOI 10.1016/j.tcs.2006.01.016
   Mellies Paul-Andre, 2019, POPL 19
   MILNER R, 1992, LECT NOTES COMPUT SC, V623, P685
   Mostrous D, 2015, INFORM COMPUT, V241, P227, DOI 10.1016/j.ic.2015.02.002
   Pratt V., 1984, SEM CONC, P180, DOI DOI 10.1007/3-540-15670-4_9.
   Rideau S, 2011, IEEE S LOG, P409, DOI 10.1109/LICS.2011.13
   Sakayori K, 2017, LECT NOTES COMPUT SC, V10203, P389, DOI 10.1007/978-3-662-54458-7_23
   Sangiorgi D, 1996, THEOR COMPUT SCI, V167, P235, DOI 10.1016/0304-3975(96)00075-8
   Sangiorgi Davide, 1995, P ICALP 95
   Selinger P, 1997, LECT NOTES COMPUT SC, V1243, P376
   Takeuchi K., 1994, PARLE '94. Parallel Architectures and Languages Europe. 6th International PARLE Conference Proceedings, P398
   Thiagarajan P. S., 2002, Formal and natural computing. Essays dedicated to Grzegorz Rozenberg (Lecture Notes in Computer Science Vol.2300), P244
   van Glabbeek R, 2003, LECT NOTES COMPUT SC, V2761, P57
   WINSKEL G, 1982, LECT NOTES COMPUT SC, V140, P561
   WINSKEL G, 1987, LECT NOTES COMPUT SC, V255, P325
   Yoshida N., 1996, Foundations of Software Technology and Theoretical Computer Science. 16th Conference Proceedings, P371
   Yoshida N, 2007, ELECTRON NOTES THEOR, V171, P73, DOI 10.1016/j.entcs.2007.02.056
NR 57
TC 9
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 27
DI 10.1145/3290340
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300027
OA gold
DA 2024-07-18
ER

PT J
AU Cousot, P
   Giacobazzi, R
   Ranzato, F
AF Cousot, Patrick
   Giacobazzi, Roberto
   Ranzato, Francesco
TI A<SUP>2</SUP>I - Abstract<SUP>2</SUP> Interpretation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Abstract interpretation; program analysis; meta-abstract interpretation
AB The fundamental idea of Abstract 2 Interpretation (A(2)I), also called meta-abstract interpretation, is to apply abstract interpretation to abstract interpretation-based static program analyses. A(2)I is generally meant to use abstract interpretation to analyse properties of program analysers. A(2)I can be either offline or online. Offline A(2)I is performed either before the program analysis, such as variable packing used by the Astree program analyser, or after the program analysis, such as in alarm diagnosis. Online A(2)I is performed during the program analysis, such as Venet's cofibred domains or Halbwachs et ars and Singh et al:s variable partitioning techniques for fast polyhedra/numerical abstract domains. We formalize offline and online meta-abstract interpretation and illustrate this notion with the design of widenings and the decomposition of relational abstract domains to speed-up program analyses. This shows how novel static analyses can be extracted as meta-abstract interpretations to design efficient and precise program analysis algorithms.
C1 [Cousot, Patrick] NYU, Courant Inst Math Sci, New York, NY 10003 USA.
   [Giacobazzi, Roberto] Univ Verona, Dipartimento Informat, Verona, Italy.
   [Giacobazzi, Roberto] IMDEA Software Inst, Madrid, Spain.
   [Ranzato, Francesco] Univ Padua, Dipartimento Matemat, Padua, Italy.
C3 New York University; University of Verona; IMDEA Software Institute;
   University of Padua
RP Cousot, P (corresponding author), NYU, Courant Inst Math Sci, New York, NY 10003 USA.
EM pcousot@cs.nyu.edu; roberto.giacobazzi@univr.it; ranzato@math.unipd.it
RI Ranzato, Francesco/X-7250-2019; Ranzato, Francesco/G-5170-2012
OI Ranzato, Francesco/0000-0003-0159-0068
FU NSF [CNS-1446511, CCF-1617717]; ATEN Project by Fondazione Cariverona;
   Talento Grant of the Comunidad de Madrid, Fundacion IMDEA Software &
   Universidad Politecnica de Madrid [2016-T3/TIC-1995]
FX This work is supported by the NSF under Grants CNS-1446511 and
   CCF-1617717, by the ATEN Project by Fondazione Cariverona and by the
   Talento Grant 2016-T3/TIC-1995 of the Comunidad de Madrid, Fundacion
   IMDEA Software & Universidad Politecnica de Madrid.
CR ALPERN B, 1987, DISTRIB COMPUT, V2, P117, DOI 10.1007/BF01782772
   [Anonymous], 1999, NATO ASI SERIES F
   [Anonymous], 1994, Handbook of logic in computer science
   Bagnara R, 2005, SCI COMPUT PROGRAM, V58, P28, DOI 10.1016/j.scico.2005.02.003
   Bertrane J., 2015, FDN TRENDS PROGRAM L, V2, P71, DOI DOI 10.1561/2500000002
   Besson F, 1999, LECT NOTES COMPUT SC, V1694, P51
   Blanchet B, 2003, ACM SIGPLAN NOTICES, V38, P196, DOI 10.1145/780822.781153
   Bourdoncle F., 1992, Journal of Functional Programming, V2, P407, DOI 10.1017/S0956796800000496
   Cadar C, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P765, DOI 10.1145/2889160.2889206
   COUSOT P, 1992, LECT NOTES COMPUT SC, V631, P269, DOI 10.1007/3-540-55844-6_142
   COUSOT P, 1977, FORMAL DESCRIPTIONS, P237
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2015, LECT NOTES COMPUT SC, V8931, P19
   Cousot Patrick, 1993, LNCS, V735, P98, DOI [10.1007/BFb0039703, DOI 10.1007/BFB0039703]
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Cousot Patrick, 1977, 88 U SCI MED GREN LA 88 U SCI MED GREN LA, V88
   Gange G, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2651360
   Giacobazzi R, 2015, ACM SIGPLAN NOTICES, V50, P261, DOI [10.1145/2775051.2676987, 10.1145/2676726.2676987]
   Grätzer G, 2011, LATTICE THEORY: FOUNDATION, P1, DOI 10.1007/978-3-0348-0018-1
   Halbwachs N, 2006, FORM METHOD SYST DES, V29, P79, DOI 10.1007/s10703-006-0013-2
   Halbwachs N, 2003, LECT NOTES COMPUT SC, V2694, P355
   Halbwachs N, 1997, FORM METHOD SYST DES, V11, P157, DOI 10.1023/A:1008678014487
   Halbwachs Nicolas, 1979, THESIS U GRENOBLE AL THESIS U GRENOBLE AL
   HANKIN C, 1994, SCI COMPUT PROGRAM, V22, P283, DOI 10.1016/0167-6423(94)00007-7
   Heo K, 2017, SOFTWARE PRACT EXPER, V47, P1677, DOI 10.1002/spe.2493
   Heo K, 2016, LECT NOTES COMPUT SC, V9837, P237, DOI 10.1007/978-3-662-53413-7_12
   Jones NeilD., 1995, HDB LOGIC COMPUTER S, V4, P527
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   Lee W, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/3095021
   Li HS, 2017, ACM SIGPLAN NOTICES, V52, P32, DOI 10.1145/3093333.3009881
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Mycroft Alan, 1982, THESIS U EDINBURGH U THESIS U EDINBURGH U
   Oh H, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2821504
   Scott D., 1972, AFIPS Conference Proceedings Vol. 40, the 1972 Spring Joint Computer Conference, P225
   Singh G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158143
   Singh G, 2017, ACM SIGPLAN NOTICES, V52, P46, DOI 10.1145/3093333.3009885
   Singh G, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2813885.2738000, 10.1145/2737924.2738000]
   Venet A., 1996, Static Analysis. Third International Symposium, SAS'96 Proceedings, P366
NR 40
TC 11
Z9 13
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 42
DI 10.1145/3290355
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300042
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Gilbert, G
   Cockx, J
   Sozeau, M
   Tabareau, N
AF Gilbert, Gaetan
   Cockx, Jesper
   Sozeau, Matthieu
   Tabareau, Nicolas
TI Definitional Proof-Irrelevance without K
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type theory; proof assistants; proof irrelevance
AB Definitional equality or conversion for a type theory with a decidable type checking is the simplest tool to prove that two objects are the same, letting the system decide just using computation. Therefore, the more things are equal by conversion, the simpler it is to use a language based on type theory. Proof-irrelevance, stating that any two proofs of the same proposition are equal, is a possible way to extend conversion to make a type theory more powerful. However, this new power comes at a price if we integrate it naively, either by making type checking undecidable or by realizing new axioms-such as uniqueness of identity proofs (UIP)-that are incompatible with other extensions, such as univalence. In this paper, taking inspiration from homotopy type theory, we propose a general way to extend a type theory with definitional proof irrelevance, in a way that keeps type checking decidable and is compatible with univalence. We provide a new criterion to decide whether a proposition can be eliminated over a type (correcting and improving the so-called singleton elimination of Coq) by using techniques coming from recent development on dependent pattern matching without UIP. We show the generality of our approach by providing implementations for both Coq and Agda, both of which are planned to be integrated in future versions of those proof assistants.
C1 [Gilbert, Gaetan; Tabareau, Nicolas] INRIA, Gallinette Project Team, Nantes, France.
   [Cockx, Jesper] Chalmers Gothenburg Univ, Gothenburg, Sweden.
   [Sozeau, Matthieu] INRIA, Paris, France.
   [Sozeau, Matthieu] IRIF, Pi R2 Project Team, Paris, France.
C3 Inria; Inria; Universite Paris Cite
RP Gilbert, G (corresponding author), INRIA, Gallinette Project Team, Nantes, France.
OI tabareau, nicolas/0000-0003-3366-2273
FU CoqHoTT ERC [64399]
FX This work is supported by the CoqHoTT ERC Grant 64399.
CR Abel A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158111
   Abel A, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:29)2012
   Altenkirch T., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P412, DOI 10.1109/LICS.1999.782636
   Altenkirch Thorsten, 2016, CSL
   Awodey S, 2004, J LOGIC COMPUT, V14, P447, DOI 10.1093/logcom/14.4.447
   Boulier S, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P182, DOI 10.1145/3018610.3018620
   Brady E, 2004, ANN NY ACAD SCI, V3085, P115
   Capriotti P., 2017, MODELS TYPE THEORY S
   Cockx J, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S095679681800014X
   Cockx J, 2014, ACM SIGPLAN NOTICES, V49, P257, DOI 10.1145/2692915.2628139
   Cockx Jesper, 2018, P 23TH ACM SIGPLAN C
   Coquand Thierry, 2016, UNIVERSE BISHOP SETS
   Dybjer P, 1996, LECT NOTES COMPUT SC, V1158, P120
   Hofmann M, 1996, LECT NOTES COMPUT SC, V1158, P153
   Letouzey P, 2004, THESIS U PARIS STUD
   Mangin Cyprien, 2018, EQUATIONS RELOADED
   Martin-Lof P., 1975, STUDIES LOGIC FDN MA, V80, P73
   Pfenning F, 2001, IEEE S LOG, P221, DOI 10.1109/LICS.2001.932499
   Stump A, 2018, ANN PURE APPL LOGIC, V169, P637, DOI 10.1016/j.apal.2018.03.002
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   Voevodsky V., 2013, A simple type system with two identity types
   Voevodsky Vladimir, 2011, RESISING RULES THEIR
   Werner B, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(3:13)2008
NR 23
TC 24
Z9 24
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 3
DI 10.1145/3290316
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300003
OA gold
DA 2024-07-18
ER

PT J
AU Mogelberg, RE
   Veltri, N
AF Mogelberg, Rasmus Ejlers
   Veltri, Niccolo
TI Bisimulation as Path Type for Guarded Recursive Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Dependent types; coinductive types; cubical type theory; homotopy type
   theory; guarded recursion; bisimulation; labelled transition systems;
   CCS
AB In type theory, coinductive types are used to represent processes, and are thus crucial for the formal verification of non-terminating reactive programs in proof assistants based on type theory, such as Coq and Agda. Currently, programming and reasoning about coinductive types is difficult for two reasons: The need for recursive definitions to be productive, and the lack of coincidence of the built-in identity types and the important notion of bisimilarity.
   Guarded recursion in the sense of Nakano has recently been suggested as a possible approach to dealing with the problem of productivity, allowing this to be encoded in types. Indeed, coinductive types can be encoded using a combination of guarded recursion and universal quantification over clocks. This paper studies the notion of bisimilarity for guarded recursive types in Ticked Cubical Type Theory, an extension of Cubical Type Theory with guarded recursion. We prove that, for any functor, an abstract, category theoretic notion of bisimilarity for the final guarded coalgebra is equivalent (in the sense of homotopy type theory) to path equality (the primitive notion of equality in cubical type theory). As a worked example we study a guarded notion of labelled transition systems, and show that, as a special case of the general theorem, path equality coincides with an adaptation of the usual notion of bisimulation for processes. In particular, this implies that guarded recursion can be used to give simple equational reasoning proofs of bisimilarity. This work should be seen as a step towards obtaining bisimilarity as path equality for coinductive types using the encodings mentioned above.
C1 [Mogelberg, Rasmus Ejlers; Veltri, Niccolo] IT Univ Copenhagen, Dept Comp Sci, Rued Langgaards Vej 7, DK-2300 Copenhagen, Denmark.
C3 IT University Copenhagen
RP Mogelberg, RE (corresponding author), IT Univ Copenhagen, Dept Comp Sci, Rued Langgaards Vej 7, DK-2300 Copenhagen, Denmark.
EM mogel@itu.dk; nive@itu.dk
RI Veltri, Niccolò/AAK-1292-2020
OI Veltri, Niccolò/0000-0002-7230-3436; Mogelberg, Rasmus
   Ejlers/0000-0003-0386-4376
FU VILLUM FONDEN [13156]; DFF-Research Project 1 from Danish Council for
   Independent Research for the Natural Sciences (FNU) [4002-00442]
FX This work was supported by a research grant (13156) from VILLUM FONDEN,
   and by DFF-Research Project 1 Grant no. 4002-00442, from The Danish
   Council for Independent Research for the Natural Sciences (FNU). We
   thank the anonymous referees for valuable comments.
CR Abel Andreas, 2017, J FUNCT PROGRAM, V27, P8, DOI [10.1017/S0956796816000319, DOI 10.1017/S0956796816000319]
   Adámek J, 2015, APPL CATEGOR STRUCT, V23, P609, DOI 10.1007/s10485-014-9372-9
   Ahrens B., 2015, LEIBNIZ INT P INFORM, P17
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 2014, TYPES PROOFS PROGRAM
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Atkey R, 2013, ACM SIGPLAN NOTICES, V48, P197, DOI [10.1145/2544174.2500597, 10.1145/2500365.2500597]
   Bahr P, 2017, IEEE S LOG
   Birkedal L, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:1)2012
   Birkedal Lars, 2016, 25 EACSL ANN C COMP, DOI [10.4230/LIPIcs.CSL.2016.23, DOI 10.4230/LIPICS.CSL.2016.23]
   Bizjak Ales, 2016, LECT NOTES COMPUT SC, P20, DOI [10.1007/978- 3- 662- 49630- 5_2, DOI 10.1007/978-3-662-49630-5_2]
   Bizjak Ales, 2014, P TLCA, V8560, P108, DOI [10.1007/978- 3- 319-08918- 8_8, DOI 10.1007/978-3-319-08918-8_8]
   Brady Edwin., 2016, TYPE DRIVEN DEV IDRI
   Cohen C., 2018, LEIBNIZ INT P INFORM, DOI [DOI 10.4230/LIPICS.TYPES.2015.5, 10.4230/LIPIcs]
   Coquand Thierry, 1993, V806, p62S78, DOI 10.1007/3-540-58085-9_72
   Coquand Thierry, 2018, LICS18 P 33 ANN ACM, DOI [10.1145/3209108.3209197, DOI 10.1145/3209108.3209197]
   Danielsson NA, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158131
   Dybjer P, 1996, LECT NOTES COMPUT SC, V1158, P120
   Frumin Dan, 2018, P 7 ACM SIGPLAN INT, P201, DOI [10.1145/3167085, DOI 10.1145/3167085]
   Hennessy Matthew, 1980, AUTOMATA LANGUAGES P, V85, P299, DOI 10.1007/3-540-10003-2_79
   Hermida C, 1998, INFORM COMPUT, V145, P107, DOI 10.1006/inco.1998.2725
   Jacobs B, 2017, INTRO COALGEBRA, V59, DOI [10.1017/CBO9781316823187, DOI 10.1017/CBO9781316823187]
   Jung Ralf, 2018, IRIS GROUND
   Kurz A, 2016, J LOG ALGEBR METHODS, V85, P475, DOI 10.1016/j.jlamp.2015.08.002
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   MacLane Saunders, 2012, SHEAVES GEOMETRY LOG
   Mannaa Bassel, 2018, Schloss Dagstuhl-LeibnizZentrum fur Informatik, V23, DOI [10.4230/LIPICS.FSCD.2018.23, DOI 10.4230/LIPICS.FSCD.2018.23]
   MILNER R, 1983, THEOR COMPUT SCI, V25, P267, DOI 10.1016/0304-3975(83)90114-7
   Milner R., 1980, A calculus of communicating systems
   Mugelberg R. E., 2014, CSL LICS, V71, P1
   Mugelberg Rasmus Ejlers, 2016, P 31 ANN ACM S LOG, DOI [10.1145/2933575.2934516, DOI 10.1145/2933575.2934516]
   Nakano Hiroshi, 2000, IEEE S LOG, DOI 10.1109/LICS.2000.855774
   Orton Ian, 2016, 25 EACSL ANN C COMP, V24, P1, DOI [10.4230/LIPIcs..CSL.2016.24, DOI 10.4230/LIPICS..CSL.2016.24]
   Pareto Lars, 1996, POPL 1996, P410, DOI 10.1145/237721.240882
   Pous D., 2012, ADV TOPICS BISIMULAT
   Rutten JJMM, 2000, THEOR COMPUT SCI, V249, P3, DOI 10.1016/S0304-3975(00)00056-6
   Schwencke D, 2010, INFORM COMPUT, V208, P1469, DOI 10.1016/j.ic.2009.10.010
   Spiwack Arnaud, 2010, CONTRIBUCIONES CIENT, P217
   Staton S, 2009, LECT NOTES COMPUT SC, V5728, P191, DOI 10.1007/978-3-642-03741-2_14
   The Agda Team, 2018, AGD WIK
   The Project Everest Team, 2018, EV PROJ
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   Veltri Niccolo, 2017, PhD thesis
   Vezzosi Andrea, 2017, STREAMS CUBICAL TYPE
NR 44
TC 9
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 4
DI 10.1145/3290317
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300004
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Tassarotti, J
   Harper, R
AF Tassarotti, Joseph
   Harper, Robert
TI A Separation Logic for Concurrent Randomized Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE separation logic; concurrency; probability
AB We present Polaris, a concurrent separation logic with support for probabilistic reasoning. As part of our logic, we extend the idea of coupling, which underlies recent work on probabilistic relational logics, to the setting of programs with both probabilistic and non-deterministic choice. To demonstrate Polaris, we verify a variant of a randomized concurrent counter algorithm and a two-level concurrent skip list. All of our results have been mechanized in Coq.
C1 [Tassarotti, Joseph; Harper, Robert] Carnegie Mellon Univ, Comp Sci Dept, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Tassarotti, J (corresponding author), Carnegie Mellon Univ, Comp Sci Dept, Pittsburgh, PA 15213 USA.
EM jtassaro@andrew.cmu.edu; rwh@cs.cmu.edu
RI Harper, Robert/HLH-3752-2023
OI Harper, Robert/0000-0002-9400-2941
FU DoD, Air Force Office of Scientific Research, National Defense Science
   and Engineering Graduate (NDSEG) Fellowship [32 CFR 168a]; U.S.
   Government
FX This work was supported by a gift from Oracle Labs. This research was
   conducted with U.S. Government support under and awarded by DoD, Air
   Force Office of Scientific Research, National Defense Science and
   Engineering Graduate (NDSEG) Fellowship, 32 CFR 168a. Any opinions,
   findings and conclusions or recommendations expressed in this material
   are those of the authors and do not necessarily reflect the views of
   these organizations.
CR Aguirre Alejandro, 2018, ESOP
   Appel Andrew W, 2014, PROGRAM LOGICS CERTI, DOI DOI 10.1017/CBO9781107256552
   Audebaud P, 2009, SCI COMPUT PROGRAM, V74, P568, DOI 10.1016/j.scico.2007.09.002
   Barthe G., 2017, LPAR
   Barthe G, 2017, ACM SIGPLAN NOTICES, V52, P161, DOI 10.1145/3093333.3009896
   Barthe Gilles, 2016, ICALP, V107
   Barthe Gilles, 2012, MATH PROGRAM CONSTRU
   Barthe Gilles, 2015, LOGIC PROGRAMMING AR
   Barthe Gilles, 2017, 44 INT C AUT LANG PR 44 INT C AUT LANG PR, V102
   Batz Kevin, 2018, ABS180210467 CORR ABS180210467 CORR
   Beck J., 1969, SEMINAR TRIPLES CATE, P119, DOI [10.1007/BFb0083084, DOI 10.1007/BFB0083084]
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Bizjak Ales, 2015, FDN SOFTW SCI COMP S FDN SOFTW SCI COMP S
   Boyd-Wickizer Silas., 2010, P 9 USENIX C OPERATI, P1
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Chlipala Adam., 2017, Certified Programming with Dependent Types
   Dice Dave, 2013, 25 ACM S PAR ALG ARC, P43, DOI 10.1145/2486159.2486182
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Dinsdale-Young T., 2013, POPL
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Feng XY, 2007, LECT NOTES COMPUT SC, V4421, P173
   Feng XY, 2009, ACM SIGPLAN NOTICES, V44, P315, DOI 10.1145/1594834.1480922
   FLAJOLET P, 1985, BIT, V25, P113, DOI 10.1007/BF01934993
   Fraser Keir, 2004, Ph.D. Dissertation
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Fu M, 2010, LECT NOTES COMPUT SC, V6269, P388, DOI 10.1007/978-3-642-15375-4_27
   Gibbons J, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P2
   Golab W, 2011, ACM S THEORY COMPUT, P373
   Goubault-Larrecq J, 2007, LECT NOTES COMPUT SC, V4646, P542
   Goubault-Larrecq J, 2015, J LOG ALGEBR METHODS, V84, P155, DOI 10.1016/j.jlamp.2014.09.003
   Herlihy M., 2006, OPODIS
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Hsu J., 2017, ARXIVCSLO171009951
   Iris Team, 2017, IR 3 0 DOC IR 3 0 DOC
   Jones C., 1990, PhD thesis
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Jung Ralf, 2016, ICFP
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krogh-Jespersen M, 2017, ACM SIGPLAN NOTICES, V52, P218, DOI 10.1145/3093333.3009877
   Lindvall T., 2002, Lectures on the coupling method
   McIver A, 2016, THEOR COMPUT SCI, V655, P120, DOI 10.1016/j.tcs.2016.01.016
   Mislove M., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P350
   Mislove MW, 2006, ELECTRON NOTES THEOR, V162, P261, DOI 10.1016/j.entcs.2005.12.113
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   MORRIS R, 1978, COMMUN ACM, V21, P840, DOI 10.1145/359619.359627
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   Nanevski A, 2008, J FUNCT PROGRAM, V18, P865, DOI 10.1017/S0956796808006953
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Petcher Adam, 2015, Principles of Security and Trust. 4th International Conference, POST 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9036, P53, DOI 10.1007/978-3-662-46666-7_4
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   PUGH W, 1990, COMMUN ACM, V33, P668, DOI 10.1145/78973.78977
   RAMSHAW LH, 1979, THESIS STANFORD U
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sergey I, 2016, ACM SIGPLAN NOTICES, V51, P92, DOI 10.1145/3022671.2983999
   Swierstra W, 2009, LECT NOTES COMPUT SC, V5674, P440, DOI 10.1007/978-3-642-03359-9_30
   Tassarotti J, 2017, LECT NOTES COMPUT SC, V10201, P909, DOI 10.1007/978-3-662-54434-1_34
   Tix R, 2009, ELECTRON NOTES THEOR, V222, P3, DOI 10.1016/j.entcs.2009.01.002
   Tristan JB, 2015, PR MACH LEARN RES, V37, P59
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Vafeiadis V, 2007, THESIS U CAMBRIDGE
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   van der Weegen E, 2009, LECT NOTES COMPUT SC, V5497, P256, DOI 10.1007/978-3-642-02444-3_16
   Varacca D, 2006, MATH STRUCT COMP SCI, V16, P87, DOI 10.1017/S0960129505005074
   Varacca D, 2002, IEEE S LOG, P299, DOI 10.1109/LICS.2002.1029838
NR 67
TC 23
Z9 23
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 64
DI 10.1145/3290377
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300064
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Cho, MK
   Song, YJ
   Lee, D
   Gäher, L
   Dreyer, D
AF Cho, Minki
   Song, Youngju
   Lee, Dongjae
   Gaeher, Lennard
   Dreyer, Derek
TI Stuttering for Free
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE stuttering simulation; Coq; verification
ID REFINEMENT
AB One of the most common tools for proving behavioral refinements between transition systems is the method of simulation proofs, which has been explored extensively over the past several decades. Stuttering simulations are an extension of traditional simulations-used, for example, in CompCert-in which either the source or target of the simulation is permitted to "stutter" (stay in place) while the other side steps forward. In the interest of ensuring soundness, however, existing stuttering simulations restrict proofs to only perform a finite number of stuttering steps before making synchronous progress-a step of reasoning in which both sides of the simulation progress forward together. This restriction guarantees that a terminating program cannot be proven to simulate a non-terminating one.
   In this paper, we observe that the requirement to eventually achieve synchronous progress is burdensome and, what's more, unnecessary: it is possible to ensure soundness of stuttering simulations while only requiring asynchronous progress (progress on both sides of the simulation that may be achieved with only stuttering steps). Building on this observation, we develop a new simulation technique we call FreeSim (short for "freely-stuttering simulations"), mechanized in Coq, and we demonstrate its effectiveness on a range of interesting case studies. These include a simplification of the meta-theory of CompCert, as well as the DTrees library, which enriches the ITrees (Interaction Trees) library with dual non-determinism.
C1 [Cho, Minki; Lee, Dongjae] Seoul Natl Univ, Seoul, South Korea.
   [Song, Youngju; Gaeher, Lennard; Dreyer, Derek] MPI SWS, Saarbrucken, Germany.
C3 Seoul National University (SNU)
RP Cho, MK (corresponding author), Seoul Natl Univ, Seoul, South Korea.
EM minki.cho@sf.snu.ac.kr; youngju@mpi-sws.org; dongjae.lee@sf.snu.ac.kr;
   gaeher@mpi-sws.org; dreyer@mpi-sws.org
OI Dreyer, Derek/0000-0002-3884-6867; Gaher, Lennard/0000-0003-2917-375X
FU Samsung Research Funding Center of Samsung Electronics [SRFC-IT2102-03];
   Amazon Research Award
FX Minki Cho and Dongjae were supported by Samsung Research Funding Center
   of Samsung Electronics under Project Number SRFC-IT2102-03. Lennard
   Gaher was supported by an Amazon Research Award.
CR Back Ralph-Johan, 2012, Refinement calculus: a systematic introduction, DOI [10.5555/551462, DOI 10.5555/551462]
   Biernacki D, 2019, ELECTRON NOTES THEOR, V347, P25, DOI 10.1016/j.entcs.2019.09.003
   Biernacki Dariusz, 2019, Logical Methods in Computer Science, V15
   Chappe N, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571254
   Cho Minki, 2023, Stuttering for Free (OOPSLA 2023 Artifact), DOI [10.5281/zenodo.8331740, DOI 10.5281/ZENODO.8331740]
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Gäher L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498689
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Hur CK, 2013, ACM SIGPLAN NOTICES, V48, P193, DOI 10.1145/2480359.2429093
   Koenig J, 2020, IEEE S LOG, P633, DOI 10.1145/3373718.3394799
   Lee D, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591253
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leroy Xavier, 2023, Implication proof from forward simulation to backward simulation
   Lorch JR, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P197, DOI 10.1145/3385412.3385971
   Milner R., 1989, Communication and concurrency
   Milner Robin, 1971, INT JOINT C ART INT, DOI [10.5555/1622876.1622926, DOI 10.5555/1622876.1622926]
   Namjoshi K. S., 1997, Foundations of Software Technology and Theoretical Computer Science. 17th Conference. Proceedings, P284, DOI 10.1007/BFb0058037
   Pous D, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P307, DOI 10.1145/2933575.2934564
   Pous Damien, 2011, Enhancements of the bisimulation proof method, DOI [10.1017/CBO9780511792588.007, DOI 10.1017/CBO9780511792588.007]
   Sammler M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571220
   Sammler M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371100
   Sangiorgi D., 1998, Mathematical Structures in Computer Science, V8, P447, DOI 10.1017/S0960129598002527
   Song Y, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571232
   Song Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371091
   The Coq Development Team, 2021, The Coq Proof Assistant 8.13.2 Reference Manual
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Zakowski Y, 2020, Arxiv, DOI arXiv:2001.02659
   Zhao JZ, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P427
NR 29
TC 0
Z9 0
U1 1
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 281
DI 10.1145/3622857
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100061
OA gold
DA 2024-07-18
ER

PT J
AU Gourdin, L
   Bonneau, B
   Boulmé, S
   Monniaux, D
   Bérard, A
AF Gourdin, Leo
   Bonneau, Benjamin
   Boulme, Sylvain
   Monniaux, David
   Berard, Alexandre
TI Formally Verifying Optimizations with Block Simulations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Formal verification of compiler optimizations; the Coq proof assistant;
   Translation validation; Symbolic execution
AB CompCert (ACM Software System Award 2021) is the first industrial-strength compiler with a mechanically checked proof of correctness. Yet, CompCert remains a moderately optimizing C compiler. Indeed, some optimizations of " gcc -O1" such as Lazy Code Motion (LCM) or Strength Reduction (SR) were still missing: developing these efficient optimizations together with their formal proofs remained a challenge.
   Cyril Six et al. have developed efficient formally verified translation validators for certifying the results of superblock schedulers and peephole optimizations. We revisit and generalize their approach into a framework (integrated into CompCert) able to validate many more optimizations: an enhanced superblock scheduler, but also Dead Code Elimination (DCE), Constant Propagation (CP), and more noticeably, LCM and SR. In contrast to other approaches to translation validation, we co-design our untrusted optimizations and their validators. Our optimizations provide hints, in the forms of invariants or CFG morphisms, that help keep the formally verified validators both simple and efficient. Such designs seem applicable beyond CompCert.
C1 [Gourdin, Leo; Bonneau, Benjamin; Boulme, Sylvain; Monniaux, David; Berard, Alexandre] Univ Grenoble Alpes, CNRS, Grenoble INP, Verimag, St Martin Dheres, France.
C3 Communaute Universite Grenoble Alpes; Institut National Polytechnique de
   Grenoble; Universite Grenoble Alpes (UGA); Centre National de la
   Recherche Scientifique (CNRS)
RP Gourdin, L (corresponding author), Univ Grenoble Alpes, CNRS, Grenoble INP, Verimag, St Martin Dheres, France.
EM Leo.Gourdin@grenoble-inp.org; Benjamin.Bonneau@univ-grenoble-alpes.fr;
   sylvain.boulme@univ-grenoble-alpes.fr;
   david.monniaux@univ-grenoble-alpes.fr;
   Alexandre.Berard2@univ-grenoble-alpes.fr
OI Berard, Alexandre/0009-0000-4848-6749; Bonneau,
   Benjamin/0009-0005-9688-1299
FU LabEx PERSYVAL-Lab [ANR-11-LABX-0025-01]; IRT Nanoelec by the French
   national program "Investissements d'Avenir" [ANR-10-AIRT-05]
FX This work was partially supported by LabEx PERSYVAL-Lab
   (ANR-11-LABX-0025-01) and IRT Nanoelec (ANR-10-AIRT-05), funded by the
   French national program "Investissements d'Avenir".
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Abrial Jean-Raymond, 1996, The Bbook-assigning programs to meanings, DOI [10.1017/CBO9780511624162, DOI 10.1017/CBO9780511624162]
   [Anonymous], 1999, Technical Report
   Appel AW, 1998, ACM SIGPLAN NOTICES, V33, P17, DOI 10.1145/278283.278285
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Besson F, 2019, J AUTOM REASONING, V63, P369, DOI 10.1007/s10817-018-9496-y
   Bodik R, 1998, ACM SIGPLAN NOTICES, V33, P1, DOI 10.1145/277652.277653
   Boulme Sylvain, 2021, Habilitation Thesis
   Churchill B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1027, DOI 10.1145/3314221.3314596
   Clément B, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527328
   Clement Basile, 2022, Ph. D. Dissertation
   Curtsinger C, 2013, ACM SIGPLAN NOTICES, V48, P219, DOI 10.1145/2499368.2451141
   Demange D, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P77, DOI 10.1145/2892208.2892222
   Demange D, 2015, LECT NOTES COMPUT SC, V9031, P233, DOI 10.1007/978-3-662-46663-6_12
   Demange Delphine, 2012, Semantic Foundations of Intermediate Program Representations
   Falk H., 2016, Proceedings of the 16th International Workshop on Worst-Case Execution Time Analysis (WCET'16), P1, DOI [DOI 10.4230/OASICS.WCET.2016.2, 10.4230/OASIcs.WCET.2016.2]
   Fasse Justus, 2021, Master Thesis
   Gourdin Leo, 2023, ICOOOLPS 2023: Proceedings of the 18th ACM International Workshop on Implementation, Compilation, Optimization of OO Languages, Programs and Systems, P3, DOI 10.1145/3605158.3605848
   Gourdin Leo, 2023, OOPSLA 23 P ACM PROG, DOI [10.5281/zenodo.8314677, DOI 10.5281/ZENODO.8314677]
   Gourdin Leo, Chamois CompCert Software Heritage Archive
   Guthaus MR, 2001, WWC-4: IEEE INTERNATIONAL WORKSHOP ON WORKLOAD CHARACTERIZATION, P3, DOI 10.1109/WWC.2001.990739
   HWU WMW, 1993, J SUPERCOMPUT, V7, P229, DOI 10.1007/BF01205185
   Kang J, 2018, ACM SIGPLAN NOTICES, V53, P631, DOI 10.1145/3192366.3192377
   Kasampalis T, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P1004, DOI 10.1145/3445814.3446751
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Kirchner Claude, 2014, History of Logic and Computation in the 20th Century, V9
   KNOOP J, 1992, SIGPLAN NOTICES, V27, P224, DOI 10.1145/143103.143136
   KNOOP J, 1994, ACM T PROGR LANG SYS, V16, P1117, DOI 10.1145/183432.183443
   KNOOP J, 1993, J PROGRAM LANG, V1, P71
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Lam M., 1988, SIGPLAN Notices, V23, P318, DOI 10.1145/960116.54022
   Lebeltel Olivier, 2023, Chamois Benches Software Heritage Archive
   Leroy X, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P1, DOI 10.1145/1926385.1926387
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Livinskii V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428264
   Monniaux D, 2023, ACM T EMBED COMPUT S, V22, DOI 10.1145/3529507
   Monniaux D, 2022, LECT NOTES COMPUT SC, V13240, P204, DOI 10.1007/978-3-030-99336-8_8
   Monniaux D, 2021, LCTES '21: PROCEEDINGS OF THE 22ND ACM SIGPLAN/SIGBED INTERNATIONAL CONFERENCE ON LANGUAGES, COMPILERS, AND TOOLS FOR EMBEDDED SYSTEMS, P85, DOI 10.1145/3461648.3463850
   Monniaux David, 2023, Tests and Proofs, V4066, DOI [10.1007/978- 3-031-38828- 6_3, DOI 10.1007/978-3-031-38828-6_3]
   Mullen E, 2016, ACM SIGPLAN NOTICES, V51, P448, DOI [10.1145/2980983.2908109, 10.1145/2908080.2908109]
   Mytkowicz T, 2009, ACM SIGPLAN NOTICES, V44, P265, DOI 10.1145/1508284.1508275
   Nardino Nicolas, 2021, Bachelor Thesis
   Necula GC, 2000, ACM SIGPLAN NOTICES, V35, P83, DOI 10.1145/358438.349314
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Pouchet Louis-Noel, 2012, the Polyhedral Benchmark suite
   Regehr J, 2012, ACM SIGPLAN NOTICES, V47, P335, DOI 10.1145/2345156.2254104
   Rideau S, 2010, LECT NOTES COMPUT SC, V6011, P224, DOI 10.1007/978-3-642-11970-5_13
   Rinard Martin C., 1999, P FLOC WORKSH RUN TI
   Samet Hanan, 1976, P 1976 ANN C, P492
   Sewell T, 2013, ACM SIGPLAN NOTICES, V48, P471, DOI 10.1145/2499370.2462183
   Six C, 2022, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP '22), P40, DOI 10.1145/3497775.3503679
   Six C, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428197
   Six Cyril, 2021, Ph. D. Dissertation
   Tate R, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(1:10)2011
   Tatlock Z, 2010, ACM SIGPLAN NOTICES, V45, P111, DOI 10.1145/1809028.1806611
   Tristan JB, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P295
   Tristan JB, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P83, DOI 10.1145/1706299.1706311
   Tristan JB, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P316, DOI 10.1145/1542476.1542512
   Tristan JB, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P17, DOI 10.1145/1328438.1328444
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zhao JZ, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P427
   Zhou ZD, 2021, J SYST SOFTWARE, V174, DOI 10.1016/j.jss.2020.110884
NR 63
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 224
DI 10.1145/3622799
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100004
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Mohan, A
   Liu, YH
   Foster, N
   Kappé, T
   Kozen, D
AF Mohan, Anshuman
   Liu, Yunhe
   Foster, Nate
   Kappe, Tobias
   Kozen, Dexter
TI Formal Abstractions for Packet Scheduling
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE packet scheduling; formal semantics; programmable scheduling
AB Early programming models for software-defined networking (SDN) focused on basic features for controlling network-wide forwarding paths, but more recentwork has considered richer features, such as packet scheduling and queueing, that affect performance. In particular, PIFO trees, proposed by Sivaraman et al., offer a flexible and efficient primitive for programmable packet scheduling. Prior work has shown that PIFO trees can express a wide range of practical algorithms including strict priority, weighted fair queueing, and hierarchical schemes. However, the semantic properties of PIFO trees are not well understood.
   This paper studies PIFO trees from a programming language perspective. We formalize the syntax and semantics of PIFO trees in an operational model that decouples the scheduling policy running on a tree from the topology of the tree. Building on this formalization, we develop compilation algorithms that allow the behavior of a PIFO tree written against one topology to be realized using a tree with a different topology. Such a compiler could be used to optimize an implementation of PIFO trees, or realize a logical PIFO tree on a target with a fixed topology baked into the hardware. To support experimentation, we develop a software simulator for PIFO trees, and we present case studies illustrating its behavior on standard and custom algorithms.
C1 [Mohan, Anshuman; Liu, Yunhe; Foster, Nate; Kozen, Dexter] Cornell Univ, Ithaca, NY 14853 USA.
   [Kappe, Tobias] Open Univ, Heerlen, Netherlands.
   [Kappe, Tobias] Univ Amsterdam, ILLC, Amsterdam, Netherlands.
C3 Cornell University; Open University Netherlands; University of Amsterdam
RP Mohan, A (corresponding author), Cornell Univ, Ithaca, NY 14853 USA.
EM amohan@cs.cornell.edu; yunheliu@cs.cornell.edu; jnfoster@cs.cornell.edu;
   t.kappe@uva.nl; kozen@cs.cornell.edu
OI Foster, Nate/0000-0002-6557-684X; Kappe, Tobias/0000-0002-6068-880X;
   Mohan, Anshuman/0000-0002-6803-9767
FU NSF [2118709, CCF-2008083, FMiTF-1918396]; ONR [N68335-22-C-0411]; DARPA
   [HR001120C0107]; EU [101027412]; Marie Curie Actions (MSCA) [101027412]
   Funding Source: Marie Curie Actions (MSCA)
FX Thanks to Eva Tardos for suggesting the more general embedding algorithm
   for arbitrary target trees. This work was supported by the NSF under
   award 2118709, grant CCF-2008083, and grant FMiTF-1918396, the ONR under
   contract N68335-22-C-0411, and DARPA under contract HR001120C0107. T.
   Kappe was partially supported by the EU's Horizon 2020 research and
   innovation program under Marie Sklodowska-Curie grant VERLAN
   (101027412).
CR Aiello WA, 2005, J ALGORITHMS, V55, P113, DOI 10.1016/j.jalgor.2004.04.004
   Alcoz AG, 2020, PROCEEDINGS OF THE 17TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P59
   Anderson CJ, 2014, ACM SIGPLAN NOTICES, V49, P113, DOI 10.1145/2535838.2535862
   [Anonymous], 1971, IJCAI
   Arashloo MT, 2020, PROCEEDINGS OF THE 17TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P93
   Arashloo MT, 2016, PROCEEDINGS OF THE 2016 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '16), P29, DOI 10.1145/2934872.2934892
   Bennett J. C. R., 1996, Computer Communication Review, V26, P143, DOI 10.1145/248157.248170
   Bingzhe Liu, 2020, HotNets '20: Proceedings of the 19th Workshop on Hot Topics in Networks, P96, DOI 10.1145/3422604.3425949
   Chakareski J, 2011, IEEE T MULTIMEDIA, V13, P1092, DOI 10.1109/TMM.2011.2157673
   Cover Thomas M, 1999, Elements of information theory
   D'Angelo K, 2023, IEEE DATA COMPR CONF, P336, DOI 10.1109/DCC55655.2023.00077
   DEMERS A, 1989, COMP COMM R, V19, P1, DOI 10.1145/75247.75248
   Dürr F, 2016, PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON REAL-TIME NETWORKS AND SYSTEMS PROCEEDINGS (RTNS 2016), P203, DOI 10.1145/2997465.2997494
   Foster N, 2020, ACM SIGCOMM COMP COM, V50, P82, DOI 10.1145/3431832.3431842
   Goldwasser Michael H., 2010, SIGACT News, V41, P100, DOI 10.1145/1753171.1753195
   Hongmei Dang, 2015, 2015 IEEE 42nd Photovoltaic Specialist Conference (PVSC). Proceedings, P1, DOI 10.1109/PVSC.2015.7356118
   Intel, 2022, Technical Report
   Jin X, 2018, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI'18), P35
   Jin X, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P121, DOI 10.1145/3132747.3132764
   Kesselman A, 2004, SIAM J COMPUT, V33, P563, DOI 10.1137/S0097539701399666
   Kleinberg J., 2006, Algorithm Design
   LEUNG JYT, 1989, ALGORITHMICA, V4, P209, DOI 10.1007/BF01553887
   Mansour Y, 2004, DISTRIB COMPUT, V17, P77, DOI 10.1007/s00446-003-0101-0
   Mittal R, 2016, 13TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI '16), P501
   Mohan A, 2023, Arxiv, DOI arXiv:2211.11659
   Mohan Anshuman, 2023, Code repository in support of 'Formal Abstractions for Packet Scheduling'
   Mohan Anshuman, 2023, Software artifact in Support of 'Formal Abstractions for Packet Scheduling', DOI [10.5281/zenodo.8329703, DOI 10.5281/ZENODO.8329703]
   Nagaraj K, 2016, PROCEEDINGS OF THE 2016 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '16), P188, DOI 10.1145/2934872.2934890
   Rutten JJMM, 2000, THEOR COMPUT SCI, V249, P3, DOI 10.1016/S0304-3975(00)00056-6
   Saeed A, 2017, SIGCOMM '17: PROCEEDINGS OF THE 2017 CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION, P404, DOI 10.1145/3098822.3098852
   Schlesinger Cole., 2015, Technical Report
   Sharma NK, 2018, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI'18), P1, DOI 10.1145/3209281.3209402
   Shrivastav V, 2019, SIGCOMM '19 - PROCEEDINGS OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION, P367, DOI 10.1145/3341302.3342090
   Sivaraman A, 2016, PROCEEDINGS OF THE 2016 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '16), P44, DOI 10.1145/2934872.2934899
   Sivaraman A, 2016, PROCEEDINGS OF THE 2016 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '16), P15, DOI 10.1145/2934872.2934900
   Stephens B, 2019, PROCEEDINGS OF THE 16TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P33
   Vass B, 2022, IEEE CONF COMPUT, DOI 10.1109/INFOCOMWKSHPS54753.2022.9798055
   Zhang CW, 2021, I C NETWORK PROTOCOL, DOI 10.1109/ICNP52444.2021.9651944
NR 38
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 269
DI 10.1145/3622845
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100049
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Thakkar, A
   Sands, N
   Petrou, G
   Alur, R
   Naik, M
   Raghothaman, M
AF Thakkar, Aalok
   Sands, Nathaniel
   Petrou, George
   Alur, Rajeev
   Naik, Mayur
   Raghothaman, Mukund
TI Mobius: Synthesizing Relational Queries with Recursive and Invented
   Predicates
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Programming by example; example-guided synthesis; recursive program
   synthesis
ID SQL QUERIES
AB Synthesizing relational queries from data is challenging in the presence of recursion and invented predicates. We propose a fully automated approach to synthesize such queries. Our approach comprises of two steps: it first synthesizes a non-recursive query consistent with the given data, and then identifies recursion schemes in it and thereby generalizes to arbitrary data. This generalization is achieved by an iterative predicate unification procedure which exploits the notion of data provenance to accelerate convergence. In each iteration of the procedure, a constraint solver proposes a candidate query, and a query evaluator checks if the proposed program is consistent with the given data. The data provenance for a failed query allows us to construct additional constraints for the constraint solver and refine the search. We have implemented our approach in a tool named MOBIUS. On a suite of 21 challenging recursive query synthesis tasks, MOBIUS outperforms three state-of-the-art baselines GENSYNTH, ILASP, and POPPER, both in terms of runtime and accuracy. We also demonstrate that the synthesized queries generalize well to unseen data.
C1 [Thakkar, Aalok; Alur, Rajeev; Naik, Mayur] Univ Penn, Philadelphia, PA 19104 USA.
   [Sands, Nathaniel; Petrou, George; Raghothaman, Mukund] Univ Southern Calif, Los Angeles, CA USA.
C3 University of Pennsylvania; University of Southern California
RP Thakkar, A (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM athakkar@seas.upenn.edu; njsands@usc.edu; gpetrou@usc.edu;
   alur@cis.upenn.edu; mhnaik@cis.upenn.edu; raghotha@usc.edu
OI NAIK, MAYUR/0000-0003-1348-8618; Raghothaman, Mukund/0000-0003-2879-0932
FU NSF [2146518, 2124431, 2107261]
FX We thank the anonymous reviewers whose feedback greatly improved this
   paper. The research described in this paper was supported by the NSF
   under grants CCF #2146518, #2124431, and #2107261.
CR Abiteboul S., 1995, Foundations of Databases, DOI DOI 10.5555/551350
   Albarghouthi Aws, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P934, DOI 10.1007/978-3-642-39799-8_67
   Albarghouthi A, 2017, LECT NOTES COMPUT SC, V10416, P689, DOI 10.1007/978-3-319-66158-2_44
   [Anonymous], 1994, Program Analysis and Specialization for the C Programming Language
   [Anonymous], 1984, Ph. D. Dissertation
   Cheney J, 2007, FOUND TRENDS DATABAS, V1, P379, DOI 10.1561/1900000006
   Cropper A, 2020, PROCEEDINGS OF THE TWENTY-NINTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P4833
   Cropper A, 2021, MACH LEARN, V110, P801, DOI 10.1007/s10994-020-05934-z
   Dong H., 2019, INT C LEARN REPR
   Evans R, 2018, J ARTIF INTELL RES, V61, P1
   Farzan A, 2021, LECT NOTES COMPUT SC, V12759, P832, DOI 10.1007/978-3-030-81685-8_39
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Itzhaky S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P944, DOI 10.1145/3453483.3454087
   Ji RY, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485544
   Ji RY, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1143, DOI 10.1145/3385412.3386025
   Law M., 2020, ILASP SYSTEM INDUCTI
   Le V, 2017, Arxiv, DOI arXiv:1703.03539
   Mechtaev S, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P448, DOI 10.1109/ICSE.2015.63
   Mendelson J, 2021, AAAI CONF ARTIF INTE, V35, P6444
   Milanova A., 2002, Software Engineering Notes, V27, P1, DOI 10.1145/566171.566174
   Muggleton SH, 2015, MACH LEARN, V100, P49, DOI 10.1007/s10994-014-5471-y
   Padhi S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276520
   Raghothaman Mukund, 2020, P ACM S PRINC PROGR
   Raychev V, 2016, ACM SIGPLAN NOTICES, V51, P761, DOI 10.1145/2914770.2837671
   Rocktaschel T., 2017, ADV NEURAL INFORM PR
   Si XJ, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P6117
   Si XJ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P515, DOI 10.1145/3236024.3236034
   Sipser M., 2013, INTRO THEORY COMPUTA, V3
   Smaragdakis Y, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P17, DOI 10.1145/1926385.1926390
   Thakkar A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1110, DOI 10.1145/3453483.3454098
   Wang C, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1631, DOI 10.1145/3035918.3058738
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   Yang F, 2017, 31 ANN C NEURAL INFO, V30
   Zhang S, 2013, IEEE INT CONF AUTOM, P224, DOI 10.1109/ASE.2013.6693082
   Zhao D, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3379446
NR 37
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 271
DI 10.1145/3622847
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100051
OA gold
DA 2024-07-18
ER

PT J
AU Ye, FK
   Zhao, JS
   Shirako, J
   Sarkar, V
AF Ye, Fangke
   Zhao, Jisheng
   Shirako, Jun
   Sarkar, Vivek
TI Concrete Type Inference for Code Optimization using Machine Learning
   with SMT Solving
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Type Inference; Code Optimization; Python; Machine Learning
AB Despite the widespread popularity of dynamically typed languages such as Python, it is well known that they pose significant challenges to code optimization due to the lack of concrete type information. To overcome this limitation, many ahead-of-time optimizing compiler approaches for Python rely on programmers to provide optional type information as a prerequisite for extensive code optimization. Since few programmers provide this information, a large majority of Python applications are executed without the benefit of code optimization, thereby contributing collectively to a significant worldwide wastage of compute and energy resources.
   In this paper, we introduce a new approach to concrete type inference that is shown to be effective in enabling code optimization for dynamically typed languages, without requiring the programmer to provide any type information. We explore three kinds of type inference algorithms in our approach based on: 1) machine learning models including GPT-4, 2) constraint-based inference based on SMT solving, and 3) a combination of 1) and 2). Our approach then uses the output from type inference to generate multi-version code for a bounded number of concrete type options, while also including a catch-all untyped version for the case when no match is found. The typed versions are then amenable to code optimization. Experimental results show that the combined algorithm in 3) delivers far superior precision and performance than the separate algorithms for 1) and 2). The performance improvement due to type inference, in terms of geometric mean speedup across all benchmarks compared to standard Python, when using 3) is 26.4x with Numba as an AOT optimizing back-end and 62.2x with the Intrepydd optimizing compiler as a back-end. These vast performance improvements can have a significant impact on programmers' productivity, while also reducing their applications' use of compute and energy resources.
C1 [Ye, Fangke; Zhao, Jisheng; Shirako, Jun; Sarkar, Vivek] Georgia Inst Technol, Atlanta, GA 30332 USA.
C3 University System of Georgia; Georgia Institute of Technology
RP Ye, FK (corresponding author), Georgia Inst Technol, Atlanta, GA 30332 USA.
EM yefangke@gatech.edu; jisheng.zhao@cc.gatech.edu; shirako@gatech.edu;
   vsarkar@gatech.edu
OI Shirako, Jun/0000-0002-7900-7680
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   Abella-Gonzalez Miguel A., 2021, CC 2021: Proceedings of the 30th ACM SIGPLAN International Conference on Compiler Construction, P59, DOI 10.1145/3446804.3446842
   Achiam OJ, 2023, Arxiv, DOI [arXiv:2303.08774, DOI 10.48550/ARXIV.2303.08774]
   Agesen O, 1995, LECT NOTES COMPUT SC, V952, P2
   Allamanis M, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P91, DOI 10.1145/3385412.3385997
   Allamanis M, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3212695
   Brown TB, 2020, Arxiv, DOI [arXiv:2005.14165, DOI 10.48550/ARXIV.2005.14165]
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Barrett C., 2018, Satisfiability Modulo Theories
   Barrett C, 2017, The SMT-LIB Standard: Version 2.6
   Bradbury J., 2018, JAX: Composable transformations of Python + NumPy programs
   Cho KYHY, 2014, Arxiv, DOI arXiv:1409.1259
   Chowdhery A, 2022, Arxiv, DOI [arXiv:2204.02311, DOI 10.48550/ARXIV.2204.02311]
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Hassan M, 2018, LECT NOTES COMPUT SC, V10982, P12, DOI 10.1007/978-3-319-96142-2_2
   Hellendoorn VJ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P152, DOI 10.1145/3236024.3236051
   Huang Q, 2022, IEEE INT CONF AUTOM, DOI 10.1145/3551349.3556912
   Jesse K, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P1483, DOI 10.1145/3468264.3473135
   Johnson Ben, 2019, SinkhornWord Movers Distance (sinkhorn_wmd)
   Johnson Ben, 2019, lgc (local graph clustering)
   Johnson Ben, 2019, IP-NSW
   Johnson Ben, 2018, graph-changepoint
   Lam S. K., 2015, P 2 WORKSHOP LLVM CO, P1, DOI [DOI 10.1145/2833157.2833162, 10.1145/2833157.2833162]
   Le H, 2022, Arxiv, DOI arXiv:2207.01780
   Loshchilov I, 2019, Arxiv, DOI arXiv:1711.05101
   Malik RS, 2019, PROC INT CONF SOFTW, P304, DOI 10.1109/ICSE.2019.00045
   McKinney W., 2010, DATA STRUCTURES STAT, P56, DOI [DOI 10.25080/MAJORA-92BF1922-00A, 10.25080/Majora-92bf1922-00a]
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Mir AM, 2021, Arxiv, DOI arXiv:2104.04706
   Mir AM, 2022, PROC INT CONF SOFTW, P2241, DOI 10.1145/3510003.3510124
   Paszke A, 2019, ADV NEUR IN, V32
   Peng Y, 2022, PROC INT CONF SOFTW, P2019, DOI 10.1145/3510003.3510038
   PLEVYAK J, 1994, SIGPLAN NOTICES, V29, P324, DOI 10.1145/191081.191130
   Pradel M, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P209, DOI 10.1145/3368089.3409715
   Radford A., 2019, LANGUAGE MODELS ARE
   Raychev V, 2016, ACM SIGPLAN NOTICES, V51, P731, DOI 10.1145/3022671.2984041
   Romijnders Rob, 2017, RobRomijnders/bigclam: Implements the bigCLAM algorithm
   Sennrich R, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P1715
   Shajii A, 2023, PROCEEDINGS OF THE 32ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, CC 2023, P191, DOI 10.1145/3578360.3580275
   Virtanen P, 2020, NAT METHODS, V17, P261, DOI 10.1038/s41592-019-0686-2
   Pandi IV, 2021, Arxiv, DOI arXiv:2004.00348
   Wang Y, 2021, 2021 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2021), P8696
   Wei JY, 2023, Arxiv, DOI arXiv:2303.09564
   Wei Jiayi, 2020, 8 INT C LEARNING REP
   Xu Frank F., 2022, MAPS 2022: Proceedings of the 6th ACM SIGPLAN International Symposium on Machine Programming, P1, DOI 10.1145/3520312.3534862
   Ye FK, 2021, Arxiv, DOI arXiv:2009.05949
   Zhou T, 2020, PROCEEDINGS OF THE 2020 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD! '20), P65, DOI 10.1145/3426428.3426915
NR 47
TC 0
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 249
DI 10.1145/3622825
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100029
OA gold
DA 2024-07-18
ER

PT J
AU Amin, N
   Burnham, J
   Garillot, F
   Gennaro, R
   Künzang, C
   Rogozin, D
   Wong, C
AF Amin, Nada
   Burnham, John
   Garillot, Francois
   Gennaro, Rosario
   Kunzang, ChhI'Med
   Rogozin, Daniel
   Wong, Cameron
TI LURK: Lambda, the Ultimate Recursive Knowledge (Experience Report)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Lisp; Rust
ID COMPUTATION
AB We introduce Lurk, a new LISP-based programming language for zk-SNARKs. Traditional approaches to programming over zero-knowledge proofs require compiling the desired computation into a flat circuit, imposing serious constraints on the size and complexity of computations that can be achieved in practice. Lurk programs are instead provided as data to the universal Lurk interpreter circuit, allowing the resulting language to be Turing-complete without compromising the size of the resulting proof artifacts. Our work describes the design and theory behind Lurk, along with detailing how its implementation of content addressing can be used to sidestep many of the usual concerns of programming zero-knowledge proofs.
C1 [Amin, Nada; Wong, Cameron] Harvard Univ, Cambridge, MA 02138 USA.
   [Burnham, John; Kunzang, ChhI'Med] Lurk Lab, W Hollywood, CA USA.
   [Garillot, Francois] Lurk Lab, Montreal, PQ, Canada.
   [Gennaro, Rosario] CUNY City Coll, New York, NY USA.
   [Rogozin, Daniel] UCL, London, England.
C3 Harvard University; City University of New York (CUNY) System; City
   College of New York (CUNY); University of London; University College
   London
RP Amin, N (corresponding author), Harvard Univ, Cambridge, MA 02138 USA.
EM namin@seas.harvard.edu; john@lurk-lab.com; francois@lurk-lab.com;
   rosario@ccny.cuny.edu; clwk@lurk-lab.com; d.rogozin@ucl.ac.uk;
   cwong@g.harvard.edu
OI Amin, Nada/0000-0002-0830-7248; Kunzang, Chhi'med/0009-0009-4389-6488;
   Burnham, John/0009-0006-6945-2090
CR Ager M.S., 2003, RS0314 BRICS U AARH
   [Anonymous], 2010, INNOVATIONS COMPUTER
   Appel Andrew W., 1991, COMPILING CONTINUATI, DOI [10.1017/CBO9780511609619, DOI 10.1017/CBO9780511609619]
   Aumasson Jean-Philippe, 2022, ZK SUMMIT 7 WORKSHOP
   Bellés-Muñoz M, 2023, IEEE T DEPEND SECURE, V20, P4733, DOI 10.1109/TDSC.2022.3232813
   Ben-Sasson E, 2014, PROCEEDINGS OF THE 23RD USENIX SECURITY SYMPOSIUM, P781
   Ben-Sasson E, 2014, LECT NOTES COMPUT SC, V8617, P276, DOI 10.1007/978-3-662-44381-1_16
   Benarroch Daniel, 2019, 2 ZKPROOF WORKSHOP
   Boneh Dan, 2021, Cryptology ePrint Archive
   Bonneau Joseph, 2021, Technical Report
   Bowe S, 2020, P IEEE S SECUR PRIV, P947, DOI 10.1109/SP40000.2020.00050
   Bruestle Jeremy, 2023, Technical Report
   Bünz B, 2020, LECT NOTES COMPUT SC, V12551, P1, DOI 10.1007/978-3-030-64378-2_1
   Chiesa A, 2020, LECT NOTES COMPUT SC, V12105, P738, DOI 10.1007/978-3-030-45721-1_26
   Chin Collin, 2021, 4 ZKPROOF WORKSHOP
   Danvy O, 2008, ACM SIGPLAN NOTICES, V43, P131, DOI 10.1145/1411203.1411206
   de Moura L, 2021, LECT NOTES ARTIF INT, V12699, P625, DOI 10.1007/978-3-030-79876-5_37
   Eberhardt J, 2018, IEEE 2018 INTERNATIONAL CONGRESS ON CYBERMATICS / 2018 IEEE CONFERENCES ON INTERNET OF THINGS, GREEN COMPUTING AND COMMUNICATIONS, CYBER, PHYSICAL AND SOCIAL COMPUTING, SMART DATA, BLOCKCHAIN, COMPUTER AND INFORMATION TECHNOLOGY, P1084, DOI 10.1109/Cybermatics_2018.2018.00199
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Felleisen Matthias, 1986, P C FORMAL DESCRIPTI
   Fisch Ben, 2018, Blockchain Protocol Analysis and Security Engineering, V2018
   Gailly Nicolas, 2022, Financial Cryptography and Data Security: 26th International Conference, FC 2022, Revised Selected Papers. Lecture Notes in Computer Science (13411), P203, DOI 10.1007/978-3-031-18283-9_10
   Gennaro R, 2013, LECT NOTES COMPUT SC, V7881, P626, DOI 10.1007/978-3-642-38348-9_37
   Gluchowski Alex, 2021, Introducing zkSync
   Goto Eiichi, 1974, Information Science Laboratory 74-03
   Grassi L, 2021, PROCEEDINGS OF THE 30TH USENIX SECURITY SYMPOSIUM, P519
   Groth J, 2016, LECT NOTES COMPUT SC, V9666, P305, DOI 10.1007/978-3-662-49896-5_11
   Hughes R J. M., 1982, P 1982 ACM S LISP FU, P1, DOI DOI 10.1145/800068.802129
   KAHN G, 1987, LECT NOTES COMPUT SC, V247, P22
   Kothapalli A., 2022, Report 2022/1758
   Kothapalli A, 2022, LECT NOTES COMPUT SC, V13510, P359, DOI 10.1007/978-3-031-15985-5_13
   Libert B., 2016, 43 INT C AUT LANG PR
   MCCARTHY J, 1960, COMMUN ACM, V3, P184, DOI 10.1145/367177.367199
   Ozdemir A, 2022, P IEEE S SECUR PRIV, P2248, DOI [10.1109/SP46214.2022.00093, 10.1109/SP46214.2022.9833782]
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Polygon, 2022, Polygon zkEVM
   Starkware, 2021, StarkNet
   Thaler J, 2013, LECT NOTES COMPUT SC, V8043, P71, DOI 10.1007/978-3-642-40084-1_5
   Valiant P, 2008, LECT NOTES COMPUT SC, V4948, P1, DOI 10.1007/978-3-540-78524-8_1
   WAND M, 1982, ACM T PROGR LANG SYS, V4, P496, DOI 10.1145/357172.357179
   Wand Mitchell, 1983, 10 ACM SIGACT SIGPLA, P190, DOI [10.1145/567067.567086, DOI 10.1145/567067.567086]
   Wand Mitchell., 1982, Proceedings of the 9th ACM SIGPLAN-SIGACT symposium on Principles of Programming Languages, POPL '82, P234, DOI 10.1145/582153.582179
   Zhang Ye, 2019, Scroll Overview
NR 43
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 197
DI 10.1145/3607839
PG 16
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900010
OA gold
DA 2024-07-18
ER

PT J
AU Jacobs, J
   Hinrichsen, JK
   Krebbers, R
AF Jacobs, Jules
   Hinrichsen, Jonas Kastberg
   Krebbers, Robbert
TI Dependent Session Protocols in Separation Logic from First Principles
   (Functional Pearl)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE message passing; concurrency; session types; separation logic
AB We develop an account of dependent session protocols in concurrent separation logic for a functional language with message-passing. Inspired by minimalistic session calculi, we present a layered design: starting from mutable references, we build one-shot channels, session channels, and imperative channels. Whereas previous work on dependent session protocols in concurrent separation logic required advanced mechanisms such as recursive domain equations and higher-order ghost state, we only require the most basic mechanisms to verify that our one-shot channels satisfy one-shot protocols, and subsequently treat their specification as a black box on top of which we define dependent session protocols. This has a number of advantages in terms of simplicity, elegance, and flexibility: support for subprotocols and guarded recursion automatically transfers from the one-shot protocols to the dependent session protocols, and we easily obtain various forms of channel closing. Because the meta theory of our results is so simple, we are able to give all definitions as part of this paper, and mechanize all our results using the Iris framework in less than 1000 lines of Coq.
C1 [Jacobs, Jules; Krebbers, Robbert] Radboud Univ Nijmegen, Nijmegen, Netherlands.
   [Hinrichsen, Jonas Kastberg] Aarhus Univ, Aarhus, Denmark.
C3 Radboud University Nijmegen; Aarhus University
RP Jacobs, J (corresponding author), Radboud Univ Nijmegen, Nijmegen, Netherlands.
EM julesjacobs@gmail.com; hinrichsen@cs.au.dk; mail@robbertkrebbers.nl
OI Hinrichsen, Jonas Kastberg/0000-0001-6143-9031; Jacobs,
   Jules/0000-0003-1976-3182
FU Villum Investigator grant [25804]; Center for Basic Research in Program
   Verification (CPV)
FX We thank the anonymous reviewers and artifact reviewers for their
   helpful comments. This work was supported in part by a Villum
   Investigator grant (no. 25804), Center for Basic Research in Program
   Verification (CPV).
CR Ahmed Amal J., 2004, Ph. D. Dissertation
   America Pierre, 1989, JCSS, DOI [10.1007/3-540-19020-1_13, DOI 10.1007/3-540-19020-1_13]
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Bocchi L, 2010, LECT NOTES COMPUT SC, V6269, P162, DOI 10.1007/978-3-642-15375-4_12
   Brookes Stephen D., 2004, CONCUR, DOI [10.1007/978-3-540-28644-8_2, DOI 10.1007/978-3-540-28644-8_2]
   Castro-Perez D, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P237, DOI 10.1145/3453483.3454041
   Castro-Perez David, 2020, TACAS, DOI [DOI 10.1007/978-3-030-45237-7, 10.1007/978-3-030-45237-7_17, DOI 10.1007/978-3-030-45237-7_17]
   Chen Ruo Fei, 2022, 36 EUR C OBJ OR PROG, V222, DOI [10.4230/LIPIcs.ECOOP.2022.22, DOI 10.4230/LIPICS.ECOOP.2022.22]
   Ciccone Luca, 2020, PPDP 20 22 INT S PRI, DOI [10.1145/3414080.3414109, DOI 10.1145/3414080.3414109]
   Costea Andreea, 2018, Programming Languages and Systems. 16th Asian Symposium, APLAS 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11275), P284, DOI 10.1007/978-3-030-02768-1_16
   Craciun F, 2015, IEEE INT C ENG COMP, P140, DOI 10.1109/ICECCS.2015.33
   Dang HH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371102
   Dardha O, 2017, INFORM COMPUT, V256, P253, DOI 10.1016/j.ic.2017.06.002
   Dardha Ornela, 2012, PROC PPDP 2012, P139, DOI DOI 10.1145/2370776.2370794
   Dreyer D, 2009, IEEE S LOG, P71, DOI 10.1109/LICS.2009.34
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay SJ, 2020, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.314.3
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Gondelman Leon, 2023, Zenodo, DOI 10.5281/ZENODO.7993620
   Goto M, 2016, MATH STRUCT COMP SCI, V26, P465, DOI 10.1017/S0960129514000231
   Hinrichsen JK, 2022, LOG METH COMPUT SCI, V18, DOI 10.46298/LMCS-18(2:16)2022
   Hinrichsen JK, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371074
   Hinrichsen JK, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P178, DOI 10.1145/3437992.3439914
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Hu R, 2008, LECT NOTES COMPUT SC, V5142, P516, DOI 10.1007/978-3-540-70592-5_22
   Jacobs J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498662
   Jacobs Jules, 2023, Dependent Session Protocols in Separation Logic from First Principles (Archived Artifact)., DOI [10.5281/zenodo.7993904, DOI 10.5281/ZENODO.7993904]
   Jacobs Jules, 2022, ECOOP, DOI [10.4230/LIPIcs.ECOOP.2022.23, DOI 10.4230/LIPICS.ECOOP.2022.23]
   Jespersen Thomas Bracht Laumann, 2015, P 11 ACM SIGPLAN WOR, P13, DOI DOI 10.1145/2808098.2808100
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kaiser Jan-Oliver, 2017, ECOOP, DOI [10.4230/LIPIcs.ECOOP.2017.17, DOI 10.4230/LIPICS.ECOOP.2017.17]
   Kobayashi Naoki., 2002, Type Systems for Concurrent Programs, DOI [10.1007/978-3-540-40007-3_26, DOI 10.1007/978-3-540-40007-3_26]
   Kokke W, 2021, HASKELL '21: PROCEEDINGS OF THE 14TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL, P1, DOI 10.1145/3471874.3472979
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krebbers Robbert, 2018, P ACM PROGR LANG, DOI [10.1145/3236772, DOI 10.1145/3236772]
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P133, DOI [10.1145/2976002.2976018, 10.1145/3241625.2976018]
   Lozes É, 2012, ELECTRON P THEOR COM, P17, DOI 10.4204/EPTCS.104.3
   Mével G, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473571
   Mostrous D, 2015, INFORM COMPUT, V241, P227, DOI 10.1016/j.ic.2015.02.002
   Mostrous D, 2009, LECT NOTES COMPUT SC, V5502, P316, DOI 10.1007/978-3-642-00590-9_23
   Nakano H, 2000, IEEE S LOG, P255, DOI 10.1109/LICS.2000.855774
   Niehren J, 2006, THEOR COMPUT SCI, V364, P338, DOI 10.1016/j.tcs.2006.08.016
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   OHearn Peter W., 2004, CONCUR, DOI [10.1007/978-3-540-28644-8_4, DOI 10.1007/978-3-540-28644-8_4]
   OWICKI S, 1976, COMMUN ACM, V19, P279, DOI 10.1145/360051.360224
   Padovani L, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000289
   Pfenning F, 2015, LECT NOTES COMPUT SC, V9034, P3, DOI 10.1007/978-3-662-46678-0_1
   Pucella R, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P25
   Rouvoet A, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P284, DOI 10.1145/3372885.3373818
   Saffrich H, 2022, Arxiv, DOI [arXiv:2010.08261, 10.46298/lmcs-18(3:33)2022, DOI 10.46298/LMCS-18(3:33)2022]
   Saffrich Hannes, 2022, arXiv, DOI [10.48550/arXiv.2210.17335, DOI 10.48550/ARXIV.2210.17335]
   Scalas A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290343
   Scalas Alceste, 2016, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, DOI [DOI 10.4230/LIPICS, DOI 10.4230/LIPICS.ECOOP.2016.21]
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Tassarotti J, 2017, LECT NOTES COMPUT SC, V10201, P909, DOI 10.1007/978-3-662-54434-1_34
   The Coq Development Team, 2023, Zenodo, DOI 10.5281/ZENODO.1003420
   Thiemann P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371135
   Thiemann P, 2019, PROCEEDINGS OF THE 21ST INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2019), DOI 10.1145/3354166.3354184
   Toninho B, 2018, LECT NOTES COMPUT SC, V10803, P128, DOI 10.1007/978-3-319-89366-2_7
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   Toninho B, 2011, PPDP 11 - PROCEEDINGS OF THE 2011 SYMPOSIUM ON PRINCIPLES AND PRACTICES OF DECLARATIVE PROGRAMMING, P161
   Toninho Bernardo, 2015, Ph. D. Dissertation
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
   Zhou FY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428216
NR 69
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 214
DI 10.1145/3607856
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900027
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Gao, FJ
   Wang, Y
   Wang, K
AF Gao, Fengjuan
   Wang, Yu
   Wang, Ke
TI Discrete Adversarial Attack to Models of Code
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Discrete Adversarial Attack; Adversarial Training; Models of code
ID ROBUSTNESS
AB The pervasive brittleness of deep neural networks has attracted significant attention in recent years. A particularly interesting finding is the existence of adversarial examples, imperceptibly perturbed natural inputs that induce erroneous predictions in state-of-the-art neural models. In this paper, we study a different type of adversarial examples specific to code models, called discrete adversarial examples, which are created through program transformations that preserve the semantics of original inputs. In particular, we propose a novel, general method that is highly effective in attacking a broad range of code models. From the defense perspective, our primary contribution is a theoretical foundation for the application of adversarial training - the most successful algorithm for training robust classifiers - to defending code models against discrete adversarial attack. Motivated by the theoretical results, we present a simple realization of adversarial training that substantially improves the robustness of code models against adversarial attacks in practice.
   We extensively evaluate both our attack and defense methods. Results show that our discrete attack is significantly more effective than state-of-the-art whether or not defense mechanisms are in place to aid models in resisting attacks. In addition, our realization of adversarial training improves the robustness of all evaluated models by the widest margin against state-of-the-art adversarial attacks as well as our own.
C1 [Gao, Fengjuan] Nanjing Univ Sci & Technol, Sch Comp Sci & Engn, Nanjing, Peoples R China.
   [Wang, Yu] Nanjing Univ, Dept Comp Sci & Technol, State Key Lab Novel Software Technol, Nanjing, Peoples R China.
   [Wang, Ke] Visa Res, Palo Alto, CA USA.
C3 Nanjing University of Science & Technology; Nanjing University
RP Gao, FJ (corresponding author), Nanjing Univ Sci & Technol, Sch Comp Sci & Engn, Nanjing, Peoples R China.
EM fjgao@njust.edu.cn; yuwang_cs@nju.edu.cn; kewang@visa.com
RI Gao, Fengjuan/AAJ-9728-2020
OI Wang, Ke/0000-0003-0844-5023
FU National Natural Science Foundation of China [62232001, 62032010,
   62202220]; Jiangsu Funding Program for Excellent Postdoctoral Talent;
   CCF-Huawei Populus Grove Fund
FX This work was supported by the National Natural Science Foundation of
   China under Grant No. 62232001, No. 62032010 and No. 62202220, Jiangsu
   Funding Program for Excellent Postdoctoral Talent, and CCF-Huawei
   Populus Grove Fund.
CR Allamanis M., 2018, INT C LEARN REPR ICL
   Alon U., 2019, 7 INT C LEARNING REP
   Alon U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290353
   Alzantot M, 2018, 2018 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2018), P2890
   [Anonymous], 2015, FOUND TRENDS MACH LE, V8, P232, DOI 10.1561/2200000050
   Bader J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360585
   Bielik P, 2020, PR MACH LEARN RES, V119
   Brockschmidt Marc, 2020, PR MACH LEARN RES, V119, P1144
   Carlini N, 2017, P IEEE S SECUR PRIV, P39, DOI 10.1109/SP.2017.49
   Chen ZM, 2021, IEEE T SOFTWARE ENG, V47, P1943, DOI 10.1109/TSE.2019.2940179
   Devlin J, 2019, 2019 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES (NAACL HLT 2019), VOL. 1, P4171
   Dinella E., 2020, INT C LEARN REPR ICL
   Ebrahimi J, 2018, PROCEEDINGS OF THE 56TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 2, P31
   Feng ZY, 2020, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2020, P1536
   Fernandes Patrick, 2018, INT C LEARNING REPRE
   Goodfellow I.J., 2015, PROC 3 INT C LEARN R
   He KM, 2016, PROC CVPR IEEE, P770, DOI 10.1109/CVPR.2016.90
   Husain H, 2020, Arxiv, DOI arXiv:1909.09436
   KeWang Rishabh Singh, 2018, INT C LEARNING REPRE
   Kim T, 2019, IEEE T INF FOREN SEC, V14, P773, DOI 10.1109/TIFS.2018.2866319
   Krizhevsky A, 2017, COMMUN ACM, V60, P84, DOI 10.1145/3065386
   Li Ge, 2022, ACM Transactions on Software Engineering and Methodology (TOSEM), V31, P1
   Li Y., 2016, ICLR, P1, DOI DOI 10.48550/ARXIV.1511.05493
   Li Z, 2022, PROC INT CONF SOFTW, P1906, DOI 10.1145/3510003.3510181
   Madry A., 2018, ARXIV
   Moosavi-Dezfooli SM, 2016, PROC CVPR IEEE, P2574, DOI 10.1109/CVPR.2016.282
   Pierazzi F, 2020, P IEEE S SECUR PRIV, P1332, DOI 10.1109/SP40000.2020.00073
   Pradel M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276517
   Quiring E, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P479
   Rabin MRI, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P441, DOI 10.1145/3468264.3468539
   Raychev V, 2015, ACM SIGPLAN NOTICES, V50, P111, DOI [10.1145/2775051.2677009, 10.1145/2676726.2677009]
   RUMELHART DE, 1986, NATURE, V323, P533, DOI 10.1038/323533a0
   Srikant Shashank, 2020, INT C LEARNING REPRE
   Sutskever I, 2014, ADV NEUR IN, V27
   Szegedy Christian, 2014, INT C LEARN REPR INT
   Vaswani A, 2017, ADV NEUR IN, V30
   Vinayakumar R, 2019, IEEE ACCESS, V7, P46717, DOI 10.1109/ACCESS.2019.2906934
   Wang K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P121, DOI 10.1145/3385412.3385999
   Wang Y, 2022, Arxiv, DOI arXiv:2102.04625
   Wang Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428205
   Wang Yuxin, 2022, Advances in Neural Information Processing Systems
   Wong E., 2020, INT C LEARNING REPRE
   Yang Z, 2022, Arxiv, DOI arXiv:2201.08698
   Yefet N, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428230
   Yuan ZL, 2014, SIGCOMM'14: PROCEEDINGS OF THE 2014 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION, P371, DOI [10.1145/2619239.2631434, 10.1145/2740070.2631434]
   Zhou Y, 2022, ACM T SOFTW ENG METH, V31, DOI 10.1145/3501256
NR 46
TC 1
Z9 1
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 113
DI 10.1145/3591227
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900009
OA gold
DA 2024-07-18
ER

PT J
AU Goens, A
   Chakraborty, S
   Sarkar, S
   Agarwal, S
   Oswald, N
   Nagarajan, V
AF Goens, Andres
   Chakraborty, Soham
   Sarkar, Susmit
   Agarwal, Sukarn
   Oswald, Nicolai
   Nagarajan, Vijay
TI Compound Memory Models
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compound memory models; consistency models; coherence protocols
ID CONCURRENCY
AB Today's mobile, desktop, and server processors are heterogeneous, consisting not only of CPUs but also GPUs and other accelerators. Such heterogeneous processors are starting to expose a shared memory interface across these devices. Given that each of these individual devices typically supports a distinct instruction set architecture and a distinct memory consistency model, it is not clear what the memory consistency model of the heterogeneous machine should be. In this paper, we answer this question by formalizing "compound memory models": we present a compositional operational model describing the resulting model when devices with distinct consistency models are fused together. We instantiate our model with the compound x86TSO/PTX model - a CPU enforcing x86TSO and a GPU enforcing the PTX model. A key result is that the x86TSO/PTX compound model retains compiler mappings from the language-based (scoped) C memory model. This means that threads mapped to the x86TSO device can continue to use the already proven C-to-x86TSO compiler mapping, and the same for PTX.
C1 [Goens, Andres; Agarwal, Sukarn; Nagarajan, Vijay] Univ Edinburgh, Edinburgh, Scotland.
   [Chakraborty, Soham] Delft Univ Technol, Delft, Netherlands.
   [Sarkar, Susmit] Univ St Andrews, St Andrews, Scotland.
   [Oswald, Nicolai] NVIDIA, Zurich, Switzerland.
C3 University of Edinburgh; Delft University of Technology; University of
   St Andrews
RP Goens, A (corresponding author), Univ Edinburgh, Edinburgh, Scotland.
EM andres.goens@ed.ac.uk; s.s.chakraborty@tudelft.nl;
   Susmit.Sarkar@st-andrews.ac.uk; sagarwa2@ed.ac.uk; noswald@nvidia.com;
   vijay.nagarajan@ed.ac.uk
RI Goens, Andres/JXN-8742-2024
OI Sarkar, Susmit/0000-0002-4259-9213; Agarwal, Sukarn/0000-0003-1292-3235;
   Chakraborty, Soham/0000-0002-4454-2050
FU Engineering and Physical Sciences Research Council [EP/V038699/1,
   EP/V028154/1]
FX We thank Daniel Lustig, Chengsong Tan, Brandon Lucia (our shepherd) and
   the anonymous reviewers for their helpful comments and suggestions. This
   work was funded by the Engineering and Physical Sciences Research
   Council, through grant references EP/V038699/1 and EP/V028154/1.
CR Alglave J, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3458926
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Alglave Jade, 2022, HERD7 CONSISTENCY MO
   AMD, AMD ROCM MEM MOD
   AMD, 2022, AMD INST T MI200 SER
   Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7798646
   ARM, 2011, AT ARM ARCH
   ARM, 2021, AMBA CHI SPEC
   Arm Limited, 2020, Arm Architecture Reference Manual: Armv8
   Batty M, 2017, PHILOS T R SOC A, V375, DOI 10.1098/rsta.2015.0406
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Chakraborty S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290383
   Chakraborty S, 2017, INT SYM CODE GENER, P100, DOI 10.1109/CGO.2017.7863732
   CXL, 2022, COMP EXPR LINK
   de Moura L, 2021, LECT NOTES ARTIF INT, V12699, P625, DOI 10.1007/978-3-030-79876-5_37
   Flur S, 2017, ACM SIGPLAN NOTICES, V52, P429, DOI 10.1145/3093333.3009839
   Flur S, 2016, ACM SIGPLAN NOTICES, V51, P608, DOI 10.1145/2914770.2837615
   Hower Derek R., 2014, P 19 INT C ARCHITECT
   HSA Foundation, 2012, HETEROGENEOUS SYSTEM
   Iorga D, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485497
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lowe-Power J, 2020, Arxiv, DOI arXiv:2007.03152
   Lustig D, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P257, DOI 10.1145/3297858.3304043
   MCKENNEY P. E., 2021, arXiv
   Nagarajan V., 2020, Synthesis Lectures on Computer Architecture, DOI [DOI 10.2200/S00962ED2V01Y201910CAC049, 10.2200/S00962ED2V01Y201910CAC049]
   NVIDIA, 2019, CUDA TOOLK DOC PTX I
   NVIDIA, 2022, NVIDIA DEB GRAC CPU
   Oswald N, 2022, INT S HIGH PERF COMP, P756, DOI 10.1109/HPCA53966.2022.00061
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Podkopaev A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290382
   Sarkar S., 2012, Proceedings of the 33rd ACM SIGPLAN conference on Programming Language Design and Implementation, PLDI '12, P311, DOI [10.1145/2254064.2254102, DOI 10.1145/2254064.2254102]
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   Sewell Peter, 2022, C C 11 MAPP PROC
   The OpenCAPI Consortium, 2021, OPENCAPI CONS
   Waterman Andrew, 2019, RISC V INSTR SET MAN, VI
   Zhang SZ, 2017, INT CONFER PARA, P288, DOI 10.1109/PACT.2017.29
NR 39
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 153
DI 10.1145/3591267
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900049
OA Green Accepted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Milovancevic, D
   Kuncak, V
AF Milovancevic, Dragana
   Kuncak, Viktor
TI Proving and Disproving Equivalence of Functional Programming Assignments
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE equivalence checking; functional induction; automated grading
ID REGRESSION VERIFICATION; FEEDBACK GENERATION; REPAIR; LOGIC
AB We present an automated approach to verify the correctness of programming assignments, such as the ones that arise in a functional programming course. Our approach takes as input student submissions and reference solutions, and uses equivalence checking to automatically prove or disprove correctness of each submission. To be effective in the context of a real-world programming course, an automated grading system must be both robust, to support programs written in a variety of style, and scalable, to treat hundreds of submissions at once. We achieve robustness by handling recursion using functional induction and by handling auxiliary functions using function call matching. We achieve scalability using a clustering algorithm that leverages the transitivity of equivalence to discover intermediate reference solutions among student submissions. We implement our approach on top of the Stainless verification system, to support equivalence checking of Scala programs. We evaluate our system and its components on over 4000 programs drawn from a functional programming course and from the program equivalence checking literature; this is the largest such evaluation to date. We show that our system is capable of proving program correctness by generating inductive equivalence proofs, and providing counterexamples for incorrect programs, with a high success rate.
C1 [Milovancevic, Dragana; Kuncak, Viktor] Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; Ecole Polytechnique
   Federale de Lausanne
RP Milovancevic, D (corresponding author), Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
EM dragana.milovancevic@epfl.ch; viktor.kuncak@epfl.ch
OI Milovancevic, Dragana/0009-0003-0795-881X
FU Swiss National Science Foundation [200021_197288]; Swiss National
   Science Foundation (SNF) [200021_197288] Funding Source: Swiss National
   Science Foundation (SNF)
FX This work is supported in part by the Swiss National Science Foundation
   Project number 200021_197288. We thank our shepherd Sam Tobin-Hochstadt
   and the anonymous reviewers for their thoughtful and helpful comments
   and suggestions. The authors would also like to thank Julie Giunta for
   the translation of OCaml benchmarks, Mario Bucev for advice on
   implementation aspects, as well as Simon Guilloud, Georg Schmid, Olivier
   Blanvillain, and Jad Hamza for their feedback and help on this work.
CR Agarwal Nimisha, 2022, L@S '22: Proceedings of the Ninth ACM Conference on Learning @ Scale, P102, DOI 10.1145/3491140.3528282
   Alur R, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P599, DOI 10.1145/1926385.1926454
   [Anonymous], 2000, Computer-Aided Reasoning: An Approach
   [Anonymous], 1963, Studies in Logic and the Foundations of Mathematics, DOI DOI 10.1016/S0049-237X(08)72018-4
   Badihi S, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P13, DOI 10.1145/3368089.3409757
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Bertot Y., 2004, INTERACTIVE THEOREM
   Chajed T, 2017, COMMUN ACM, V60, P75, DOI 10.1145/3051092
   Churchill B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1027, DOI 10.1145/3314221.3314596
   Claessen K, 2010, LECT NOTES COMPUT SC, V6143, P6, DOI 10.1007/978-3-642-13977-2_3
   Claessen Koen, 2012, ATx/WInG@ IJCAR, P16, DOI [10.29007/3qwr, DOI 10.29007/3QWR]
   Clune J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428239
   Dahiya M, 2017, LECT NOTES COMPUT SC, V10695, P127, DOI 10.1007/978-3-319-71237-6_7
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   EPFL, 2023, STAINLESS
   Felsing D, 2014, P 29 ACM IEEE INT C, P349, DOI [10.1145/2642937.2642987, DOI 10.1145/2642937.2642987]
   Fuhs C, 2017, ACM T COMPUT LOG, V18, DOI 10.1145/3060143
   Glassman EL, 2015, ACM T COMPUT-HUM INT, V22, DOI 10.1145/2699751
   Godlin B, 2013, SOFTW TEST VERIF REL, V23, P241, DOI 10.1002/stvr.1472
   Guilloud Simon, 2023, FORMULA NORMALIZATIO, P18
   Gulwani S, 2018, ACM SIGPLAN NOTICES, V53, P465, DOI [10.1145/3192366.3192387, 10.1145/3296979.3192387]
   Gupta S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428289
   Hamza J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360592
   Heiser G, 2020, COMMUN ACM, V63, P72, DOI 10.1145/3378426
   INRIA, 2007, CAMLP5
   INRIA, 2007, BATCH COMP OC
   INRIA, 2021, FUNCT IND COQ
   Janicic MV, 2020, COMPUT SCI INF SYST, V17, P205, DOI 10.2298/CSIS181220019V
   Johansson M, 2014, LECT NOTES ARTIF INT, V8543, P108, DOI 10.1007/978-3-319-08434-3_9
   Johansson M, 2006, LECT NOTES COMPUT SC, V4155, P83
   Kaleeswaran S, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P739, DOI 10.1145/2950290.2950363
   Klein G, 2018, COMMUN ACM, V61, P68, DOI 10.1145/3230627
   Kolesar JC, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563340
   Kundu S, 2009, ACM SIGPLAN NOTICES, V44, P327, DOI 10.1145/1543135.1542513
   Lahiri Shuvendu K., 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P712, DOI 10.1007/978-3-642-31424-7_54
   Lahiri ShuvenduK., 2013, ACM SIGSOFT S FDN SO, P345, DOI DOI 10.1145/2491411.2491452
   Lee J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276528
   Leino KRM, 2012, LECT NOTES COMPUT SC, V7148, P315, DOI 10.1007/978-3-642-27940-9_21
   Lopes NP, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P65, DOI 10.1145/3453483.3454030
   Milovancevic Dragana, 2023, Zenodo, DOI 10.5281/ZENODO.7810840
   Nagashima Yutaka, 2020, 2020 Formal Methods in Computer Aided Design (FMCAD), P245, DOI 10.34727/2020/isbn.978-3-85448-042-6_32
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   Nipkow Tobias, 2022, Programming and Proving in Isabelle/HOL
   Odersky M., 2019, PROGRAMMING SCALA, VFourth
   Pu YW, 2016, COMPANION PROCEEDINGS OF THE 2016 ACM SIGPLAN INTERNATIONAL CONFERENCE ON SYSTEMS, PROGRAMMING, LANGUAGES AND APPLICATIONS: SOFTWARE FOR HUMANITY (SPLASH COMPANION'16), P39, DOI 10.1145/2984043.2989222
   Reger G, 2019, LECT NOTES ARTIF INT, V11716, P477, DOI 10.1007/978-3-030-29436-6_28
   Reynolds A, 2015, LECT NOTES COMPUT SC, V8931, P80
   Rummer P, 2008, LECT NOTES ARTIF INT, V5330, P274, DOI 10.1007/978-3-540-89439-1_20
   Sayedoff CRJ, 2022, Arxiv, DOI [arXiv:2207.14364, 10.48550/ARXIV.2207.14364, DOI 10.48550/ARXIV.2207.14364]
   Seidel EL, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3138818
   Seidel Eric L, 2017, Zenodo, Vv1.0, DOI 10.5281/zenodo.806814
   Sharma R, 2013, ACM SIGPLAN NOTICES, V48, P391, DOI [10.1145/2544173.2509509, 10.1145/2509136.2509509]
   Siegel SF, 2011, MATH COMPUT SCI, V5, P427, DOI 10.1007/s11786-011-0101-6
   Singh R, 2013, ACM SIGPLAN NOTICES, V48, P15, DOI 10.1145/2499370.2462195
   Singher E, 2021, LECT NOTES COMPUT SC, V12760, P125, DOI 10.1007/978-3-030-81688-9_6
   Song D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360614
   Song Dowon, 2021, ContextAware and DataDriven Feedback Generation for Programming Assignments, P328, DOI [10.1145/3468264, DOI 10.1145/3468264]
   Sonnex W, 2012, LECT NOTES COMPUT SC, V7214, P407, DOI 10.1007/978-3-642-28756-5_28
   Sousa M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276535
   Strichman O, 2008, LECT NOTES COMPUT SC, V4171, P496
   Strichman O, 2016, LECT NOTES COMPUT SC, V9995, P645, DOI 10.1007/978-3-319-48989-6_39
   Suter P, 2011, LECT NOTES COMPUT SC, V6887, P298, DOI 10.1007/978-3-642-23702-7_23
   Voirol N, 2015, P 6 ACM SIGPLAN S SC, P18, DOI [10.1145/2774975.2774978, DOI 10.1145/2774975.2774978]
   Voirol Nicolas Charles Yves, 2019, VERIFIED FUNCTIONAL, P229, DOI [10.5075/epfl-thesis-9479, DOI 10.5075/EPFL-THESIS-9479]
   Vujosevic-Janicic M, 2012, LECT NOTES COMPUT SC, V7152, P98, DOI 10.1007/978-3-642-27705-4_9
   Wang K, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P481, DOI 10.1145/3192366.3192384
   Wood T, 2017, LECT NOTES COMPUT SC, V10201, P937, DOI 10.1007/978-3-662-54434-1_35
   Wrenn J, 2018, ICER'18: PROCEEDINGS OF THE 2018 ACM CONFERENCE ON INTERNATIONAL COMPUTING EDUCATION RESEARCH, P51, DOI 10.1145/3230977.3230999
   Zuck L, 2005, FORM METHOD SYST DES, V27, P335, DOI 10.1007/s10703-005-3402-z
NR 69
TC 0
Z9 0
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 144
DI 10.1145/3591258
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900040
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Zhou, Z
   Mishra, A
   Delaware, B
   Jagannathan, S
AF Zhou, Zhe
   Mishra, Ashish
   Delaware, Benjamin
   Jagannathan, Suresh
TI Covering All the Bases: Type-Based Verification of Test Input Generators
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE refinement types; property-based testing; underapproximate reasoning
ID REFINEMENT TYPES
AB Test input generators are an important part of property-based testing (PBT) frameworks. Because PBT is intended to test deep semantic and structural properties of a program, the outputs produced by these generators can be complex data structures, constrained to satisfy properties the developer believes is most relevant to testing the function of interest. An important feature expected of these generators is that they be capable of producing all acceptable elements that satisfy the function's input type and generator-provided constraints. However, it is not readily apparent how we might validate whether a particular generator's output satisfies this coverage requirement. Typically, developers must rely on manual inspection and post-mortem analysis of test runs to determine if the generator is providing sufficient coverage; these approaches are error-prone and difficult to scale as generators become more complex. To address this important concern, we present a new refinement type-based verification procedure for validating the coverage provided by input test generators, based on a novel interpretation of types that embeds "must-style" underapproximate reasoning principles as a fundamental part of the type system. The types associated with expressions now capture the set of values guaranteed to be produced by the expression, rather than the typical formulation that uses types to represent the set of values an expression may produce. Beyond formalizing the notion of coverage types in the context of a rich core language with higher-order procedures and inductive datatypes, we also present a detailed evaluation study to justify the utility of our ideas.
C1 [Zhou, Zhe; Mishra, Ashish; Delaware, Benjamin; Jagannathan, Suresh] Purdue Univ, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Zhou, Z (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM zhou956@purdue.edu; mishr115@purdue.edu; bendy@purdue.edu;
   suresh@cs.purdue.edu
OI Delaware, Benjamin/0000-0002-1016-6261; Mishra,
   Ashish/0000-0002-0513-3107
FU DARPA [HR0011-19-C-0073, HR0011-22-90062]; Department of Defense
   [FA8649-21-P-1511]
FX We thank our shepherd Leonidas Lampropoulos and the anonymous reviewers
   for their detailed comments and suggestions. This work was supported in
   part by DARPA grants HR0011-19-C-0073 and HR0011-22-90062, and the
   Department of Defense under grant FA8649-21-P-1511.
CR Albarghouthi A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133904
   Bastani O, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360544
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Claessen K, 2014, LECT NOTES COMPUT SC, V8475, P18, DOI 10.1007/978-3-319-07151-0_2
   Claessen Koen, 2020, QUICKCHECK
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Vries E, 2011, LECT NOTES COMPUT SC, V7041, P155, DOI 10.1007/978-3-642-24690-6_12
   Dolan Stephen, 2022, CROWBAR
   Dunfield J, 2021, ACM COMPUT SURV, V54, DOI 10.1145/3450952
   Dybjer P, 2003, LECT NOTES COMPUT SC, V2758, P188
   Dybjer P., 2004, Theoretical Aspects of Computing - ICTAC 2004. First International Colloquium. Revised Selected Papers (Lecture Notes in Computer Science Vol.3407), P341
   FastCheck, 2022, FAST CHECK PROP BAS
   Fetscher B, 2015, LECT NOTES COMPUT SC, V9032, P383, DOI 10.1007/978-3-662-46669-8_16
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Germane K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473601
   Godefroid P, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P43, DOI 10.1145/1706299.1706307
   Hatcliff J., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P458, DOI 10.1145/174675.178053
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hypothesis, 2022, Hypothesis
   Jagannathan S., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P329, DOI 10.1145/268946.268973
   Jhala R, 2021, FOUND TRENDS PROGRAM, V6, P159, DOI 10.1561/2500000032
   Lampropoulos L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360607
   Lampropoulos L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158133
   Lampropoulos L, 2017, ACM SIGPLAN NOTICES, V52, P114, DOI 10.1145/3093333.3009868
   Lampropoulos Leonidas, 2022, SOFTWARE FDN, V4
   Leonidas Lampropoulos, 2018, THESIS U PENNSYLVANI
   Mishra A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563310
   O'Hearn PW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371078
   Padhye R, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P329, DOI 10.1145/3293882.3330576
   Palka M.H., 2011, Proceeding of the 6th international workshop on Automation of software test, AST '11, P91, DOI 10.1145/1982595.1982615
   Paraskevopoulou Z, 2015, LECT NOTES COMPUT SC, V9236, P325, DOI 10.1007/978-3-319-22102-1_22
   Pratt V.R., 1976, 17 ANN S FDN COMPUTE, P109, DOI [10.1109/SFCS.1976.27, DOI 10.1109/SFCS.1976.27]
   Le QL, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527325
   Raad A, 2020, LECT NOTES COMPUT SC, V12225, P225, DOI 10.1007/978-3-030-53291-8_14
   RustCheck, 2021, CRAT PBT RUST
   ScalaCheck, 2021, ABOUT US
   Seidel EL, 2015, LECT NOTES COMPUT SC, V9032, P812, DOI 10.1007/978-3-662-46669-8_33
   Vazou N, 2014, ACM SIGPLAN NOTICES, V49, P269, DOI 10.1145/2692915.2628161
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zalewski Michal, 2007, American fuzzy lop
   Zhou Z, 2023, Arxiv, DOI arXiv:2304.03393
   Zhou Z, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485493
   Zhou Zhe, 2023, PLDI2023 ARTIFACT CO, DOI [10.5281/zenodo.7811004, DOI 10.5281/ZENODO.7811004]
NR 43
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 157
DI 10.1145/3591271
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900053
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Chiang, D
   McDonald, C
   Shan, CC
AF Chiang, David
   McDonald, Colin
   Shan, Chung-chieh
TI Exact Recursive Probabilistic Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programming; recursive types; linear types
ID INFERENCE; DIAGRAMS; LANGUAGE; MODELS
AB Recursive calls over recursive data are useful for generating probability distributions, and probabilistic programming allows computations over these distributions to be expressed in a modular and intuitive way. Exact inference is also useful, but unfortunately, existing probabilistic programming languages do not perform exact inference on recursive calls over recursive data, forcing programmers to code many applications manually. We introduce a probabilistic language in which a wide variety of recursion can be expressed naturally, and inference carried out exactly. For instance, probabilistic pushdown automata and their generalizations are easy to express, and polynomial-time parsing algorithms for them are derived automatically. We eliminate recursive data types using program transformations related to defunctionalization and refunctionalization. These transformations are assured correct by a linear type system, and a successful choice of transformations, if there is one, is guaranteed to be found by a greedy algorithm.
C1 [Chiang, David; McDonald, Colin] Univ Notre Dame, Dept Comp Sci & Engn, Notre Dame, IN 46556 USA.
   [Shan, Chung-chieh] Indiana Univ, Dept Comp Sci, Bloomington, IN USA.
C3 University of Notre Dame; Indiana University System; Indiana University
   Bloomington
RP Chiang, D (corresponding author), Univ Notre Dame, Dept Comp Sci & Engn, Notre Dame, IN 46556 USA.
EM dchiang@nd.edu; cmcdona8@nd.edu; ccshan@indiana.edu
OI Chiang, David/0000-0002-0435-4864; McDonald, Colin/0009-0000-8581-0237
CR ABRAMSKY S, 1993, THEOR COMPUT SCI, V111, P3, DOI 10.1016/0304-3975(93)90181-R
   Alonso Miguel A., 2000, P 5 INT WORKSHOP TRE, P19
   [Anonymous], 1999, THESIS U PENNSYLVANI
   [Anonymous], 2008, ACL
   Atkinson Eric, 2022, PACM PROGRAMMING LAN, V6
   Aumann Robert J., 1961, Illinois Journal of Mathematics, V5, P614
   Bahar RI, 1997, FORM METHOD SYST DES, V10, P171, DOI 10.1023/A:1008699807402
   Banerjee Anindya, 2001, Lecture Notes in Computer Science, V2215, P420, DOI [DOI 10.1007/3-540-45500-0_21, 10.1007/3-540-45500-0_21]
   Barber Andrew, 1996, ECSLFCS96347 DEP COM
   Bartocci E, 2019, LECT NOTES COMPUT SC, V11781, P255, DOI 10.1007/978-3-030-31784-3_15
   BAUDERON M, 1987, MATH SYST THEORY, V20, P83, DOI 10.1007/BF01692060
   BOOTH TL, 1973, IEEE T COMPUT, VC 22, P442, DOI 10.1109/T-C.1973.223746
   Borgström J, 2011, LECT NOTES COMPUT SC, V6602, P77, DOI 10.1007/978-3-642-19718-5_5
   Bouissou O, 2016, LECT NOTES COMPUT SC, V9636, P225, DOI 10.1007/978-3-662-49674-9_13
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Buntine WL, 1994, J ARTIF INTELL RES, V2, P159, DOI 10.1613/jair.62
   Butoi Alexandra, 2022, PROC EMNLP
   Cai Shu., 2011, PROC NAACL HLT, P212
   Chandra A.K., 1977, P 9 ANN ACM S THEOR, P77, DOI [DOI 10.1145/800105.803397, 10.1145/800105.803397]
   Chen SF, 1999, COMPUT SPEECH LANG, V13, P359, DOI 10.1006/csla.1999.0128
   Chiang David, 2020, PROC C NEURAL INFORM, P6648
   Claret Guillaume., 2013, Foundations of Software Engineering, P92, DOI DOI 10.1145/2491411.2491423
   COOPER GF, 1990, ARTIF INTELL, V42, P393, DOI 10.1016/0004-3702(90)90060-D
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Danvy O, 2009, SCI COMPUT PROGRAM, V74, P534, DOI 10.1016/j.scico.2007.10.007
   Danvy Olivier, 2001, Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming. PPDP'01, P162, DOI DOI 10.1145/773184.773202
   Drewes F., 1997, Handbook of Graph Grammars and Computing by Graph Transformation, V1, P95, DOI [10.1142/9789812384720, DOI 10.1142/9789812384720, DOI 10.1142/9789812384720_0002]
   Ehrhard T, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(1:3)2019
   Ehrhard T, 2018, J ACM, V65, DOI 10.1145/3164540
   Esparza J, 2008, INT FED INFO PROC, V273, P285
   Esparza J, 2007, LECT NOTES COMPUT SC, V4393, P296
   Esparza J, 2010, J ACM, V57, DOI 10.1145/1857914.1857917
   Etessami K, 2009, J ACM, V56, DOI 10.1145/1462153.1462154
   Gehr T, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P883, DOI 10.1145/3385412.3386006
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   Girard Jean-Yves, 1991, Mathematical Structures in Computer Science, V1, P255, DOI 10.1017/S0960129500001328
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Goodman N. D., 2014, DESIGN IMPLEMENTATIO
   Graves A., 2006, P 23 INT C MACHINE L, P369
   HABEL A, 1987, LECT NOTES COMPUT SC, V291, P15
   Heunen C, 2017, IEEE S LOG
   Holtzen S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428208
   Huang ZH, 2015, Arxiv, DOI arXiv:1508.01991
   Koller D., 2009, Probabilistic graphical models: principles and techniques
   Koller Daphne, 1997, P 14 NAT C ART INT 1, P740
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Kschischang FR, 2001, IEEE T INFORM THEORY, V47, P498, DOI 10.1109/18.910572
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Lafferty John, 2001, INT C MACH LEARN ICM
   Laird J, 2020, INFORM COMPUT, V275, DOI 10.1016/j.ic.2020.104645
   Laird J, 2013, IEEE S LOG, P301, DOI 10.1109/LICS.2013.36
   Lang B., 1994, Computational Intelligence, V10, P486, DOI 10.1111/j.1467-8640.1994.tb00011.x
   Lang Bernard, 1974, P C AUT LANG PROGR, P255, DOI [10.1007/978-3-662-21545-6_18, DOI 10.1007/978-3-662-21545-6_18]
   Lasse R., 2000, RS0047 BRICS
   Lehmann D. J., 1977, Theoretical Computer Science, V4, P59, DOI 10.1016/0304-3975(77)90056-1
   May J, 2006, LECT NOTES COMPUT SC, V4094, P102
   McAllester D, 2008, J COMPUT SYST SCI, V74, P84, DOI 10.1016/j.jcss.2007.04.015
   Minka T., 2008, PROC NEURIPS, V21, P1073
   Mohri M, 1997, COMPUT LINGUIST, V23, P269
   Moosbrugger Marcel, 2022, Zenodo, DOI 10.5281/ZENODO.6807521
   Paszke A, 2019, ADV NEUR IN, V32
   Pereira Fernando C. N., 1987, Prolog and Natural-Language Analysis
   Pfeffer A., 2001, IJCAI
   Pfeffer Avi, 2016, Practical probabilistic programming
   Pfeffer Avi, 2005, TR1205 HARV COMP SCI
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Poon H., 2011, 2011 IEEE INT C COMP, P337, DOI [DOI 10.1109/ICCVW.2011.6130310, DOI 10.1109/ICCVW.2011]
   Pottier F., 2006, Higher-Order and Symbolic Computation, V19, P125, DOI 10.1007/s10990-006-8611-7
   RABINER LR, 1989, P IEEE, V77, P257, DOI 10.1109/5.18626
   Rendel T, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P269, DOI 10.1145/2784731.2784763
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Riley Michael, 2009, P HUM LANG TECHN 200, P9
   Saad FA, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P804, DOI 10.1145/3453483.3454078
   Sankaranarayanan Sriram, 2020, P NEURIPS, V33, P17502
   Sitaram D., 1990, LISP and Symbolic Computation, V3, P67, DOI 10.1007/BF01806126
   Stern M, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P818, DOI 10.18653/v1/P17-1076
   Stewart A, 2015, J ACM, V62, DOI 10.1145/2789208
   Stuhlmuller Andreas, 2012, PROC WORKSHOP STAT R
   TASKAR B, 2004, P C EMP METH NAT LAN, P1
   van de Meent Jan-Willem, 2018, arXiv, DOI DOI 10.48550/ARXIV.1809.10756
   Vijay-Shankar K., 1985, 23rd Annual Meeting of the Association for Computational Linguistics. Proceedings of the Conference, P82
   Vijayashanker K., 1994, THESIS U PENNSYLVANI
   von Neumann J., 1951, NBS Applied Mathematics Series, V12, P36
   Walia R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341702
   Walker David, 2005, Advanced Topics in Types and Programming Languages, chapter Substructural Type Systems, P3
   Wand M, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236782
   WEIR DJ, 1992, THEOR COMPUT SCI, V104, P235, DOI 10.1016/0304-3975(92)90124-X
NR 87
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586050
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600025
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Goharshady, AK
   Hitarth, S
   Mohammadi, F
   Motwani, HJ
AF Goharshady, Amir Kafshdar
   Hitarth, S.
   Mohammadi, Fatemeh
   Motwani, Harshit Jitendra
TI Algebro-geometric Algorithms for Template-Based Synthesis of Polynomial
   Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; sketching; syntax-guided synthesis
AB Template-based synthesis, also known as sketching, is a localized approach to program synthesis in which the programmer provides not only a specification, but also a high-level "sketch" of the program. The sketch is basically a partial program that models the general intuition of the programmer, while leaving the low-level details as unimplemented "holes". The role of the synthesis engine is then to fill in these holes such that the completed program satisfies the desired specification. In this work, we focus on template-based synthesis of polynomial imperative programs with real variables, i.e. imperative programs in which all expressions appearing in assignments, conditions and guards are polynomials over program variables. While this problem can be solved in a sound and complete manner by a reduction to the first-order theory of the reals, the resulting formulas will contain a quantifier alternation and are extremely hard for modern SMT solvers, even when considering toy programs with a handful of lines. Moreover, the classical algorithms for quantifier elimination are notoriously unscalable and not at all applicable to this use-case. In contrast, our main contribution is an algorithm, based on several well-known theorems in polyhedral and real algebraic geometry, namely Putinar's Positivstellensatz, the Real Nullstellensatz, Handelman's Theorem and Farkas' Lemma, which sidesteps the quantifier elimination difficulty and reduces the problem directly to Quadratic Programming (QP). Alternatively, one can view our algorithm as an efficient way of eliminating quantifiers in the particular formulas that appear in the synthesis problem. The resulting QP instances can then be handled quite easily by SMT solvers. Notably, our reduction to QP is sound and semi-complete, i.e. it is complete if polynomials of a sufficiently high degree are used in the templates. Thus, we provide the first method for sketching-based synthesis of polynomial programs that does not sacrifice completeness, while being scalable enough to handle meaningful programs. Finally, we provide experimental results over a variety of examples from the literature.
C1 [Goharshady, Amir Kafshdar; Hitarth, S.] Hong Kong Univ Sci & Technol, Kowloon, Clear Water Bay, Hong Kong, Peoples R China.
   [Mohammadi, Fatemeh] Katholieke Univ Leuven, Leuven, Belgium.
   [Motwani, Harshit Jitendra] Univ Ghent, Ghent, Belgium.
C3 Hong Kong University of Science & Technology; KU Leuven; Ghent
   University
RP Goharshady, AK (corresponding author), Hong Kong Univ Sci & Technol, Kowloon, Clear Water Bay, Hong Kong, Peoples R China.
EM goharshady@cse.ust.hk; hsinghab@connect.ust.hk;
   fatemeh.mohammadi@kuleuven.be; harshitjitendra.motwani@ugent.be
RI Mohammadi, Fatemeh/AAR-9028-2020; Motwani, Harshit
   Jitendra/ISB-6485-2023
OI Mohammadi, Fatemeh/0000-0001-5187-0995; Motwani, Harshit
   Jitendra/0000-0002-2142-4254; /0000-0001-7419-3560
FU Hong Kong RGC ECS Project [26208122]; HKUSTKaisa Grant [HKJRI3A-055];
   HKUST Startup Grant [R9272]; FWO [G0F5921N, G023721N]; UiT Aurora
   project MASCOT; KU Leuven [iBOF/23/064]; UGent Grant [BOF21/DOC/182];
   Sofina-Boel Fellowship Program
FX The research was partially supported by the Hong Kong RGC ECS Project
   26208122, the HKUSTKaisa Grant HKJRI3A-055, the HKUST Startup Grant
   R9272, FWO Grants G0F5921N (Odysseus) and G023721N, the UiT Aurora
   project MASCOT, KU Leuven Grant iBOF/23/064, UGent Grant BOF21/DOC/182
   and the Sofina-Boel Fellowship Program. Authors are ordered
   alphabetically.
CR Abate A, 2018, LECT NOTES COMPUT SC, V10981, P270, DOI 10.1007/978-3-319-96145-3_15
   Agrawal Sheshansh, 2017, POPL
   Alur R, 2018, COMMUN ACM, V61, P84, DOI 10.1145/3208071
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Alur Rajeev, 2019, SYGUS COMP SYNTAX GU
   Asadi A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P772, DOI 10.1145/3453483.3454076
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Blekherman G, 2013, MOS-SIAM SER OPTIMIZ, V13, P1
   Bochnak J., 2013, REAL ALGEBRAIC GEOME, V36, DOI DOI 10.1007/978-3-662-03718-8
   Bornholt James, 2018, OOPSLA, P1
   Chatterjee K., 2022, CAV
   Chatterjee K, 2018, PROCEEDINGS OF THE TWENTY-SEVENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P4700
   Chatterjee K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P672, DOI 10.1145/3385412.3385969
   Chatterjee K, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3339984
   Chatterjee K, 2017, LECT NOTES COMPUT SC, V10427, P41, DOI 10.1007/978-3-319-63390-9_3
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Chatterjee Krishnendu, 2020, TERMINATION ANAL PRO, P221, DOI [10.1017/9781108770750.008, DOI 10.1017/9781108770750.008]
   Church A., 1963, Application of recursive arithmetic to the problem of circuit synthesis
   Cimatti A, 2013, LECT NOTES COMPUT SC, V7795, P93
   Colón MA, 2003, LECT NOTES COMPUT SC, V2725, P420
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Farkas J, 1902, J REINE ANGEW MATH, V124, P1
   Fedyukovich G, 2019, LECT NOTES COMPUT SC, V11561, P259, DOI 10.1007/978-3-030-25540-4_14
   Feng YJ, 2017, LECT NOTES COMPUT SC, V10482, P400, DOI 10.1007/978-3-319-68167-2_26
   Goharshady Amir, 2020, Ph.D. Dissertation
   Goharshady Amir, 2023, ALGEBRO GEOMETRIC AL
   Goharshady Amir Kafshdar, 2023, ALGEBROGEOMETRIC ALG, DOI [10.5281/zenodo.7697453, DOI 10.5281/ZENODO.7697453]
   Green Cordell, 1981, Readings in Artificial Intelligence, P202
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gulwani S, 2012, COMMUN ACM, V55, P97, DOI 10.1145/2240236.2240260
   Gulwani S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P62
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P317, DOI 10.1145/1925844.1926423
   Guo Z, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371080
   HANDELMAN D, 1988, PAC J MATH, V132, P35, DOI 10.2140/pjm.1988.132.35
   Hartshorne R., 1977, Graduate Texts in Mathematics, V52
   Hu QHP, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3532849
   Huang Mingzhang, 2019, OOPSLA
   Humenberger A, 2018, LECT NOTES COMPUT SC, V10747, P226, DOI 10.1007/978-3-319-73721-8_11
   Knoth T, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P253, DOI 10.1145/3314221.3314602
   Kolmogoroff A, 1932, MATH Z, V35, P58, DOI 10.1007/BF01186549
   KOZA JR, 1994, STAT COMPUT, V4, P87, DOI 10.1007/BF00175355
   Krawiec K, 2016, STUD COMPUT INTELL, V618, P1, DOI 10.1007/978-3-319-27565-9
   Liu Hongming, 2022, OOPSLA
   Mai NHA, 2022, J COMPLEXITY, V72, DOI 10.1016/j.jco.2022.101663
   MANNA Z, 1971, COMMUN ACM, V14, P151, DOI 10.1145/362566.362568
   Meurer A, 2017, PEERJ COMPUT SCI, DOI 10.7717/peerj-cs.103
   Neumann Eike, 2020, CONCUR, DOI [10.4230/LIPIcs.CONCUR.2020.15, DOI 10.4230/LIPICS.CONCUR.2020.15]
   Pan R, 2020, LECT NOTES COMPUT SC, V12075, P572, DOI 10.1007/978-3-030-44914-8_21
   PNUELI A, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P179, DOI 10.1145/75277.75293
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Preiner M, 2017, LECT NOTES COMPUT SC, V10205, P264, DOI 10.1007/978-3-662-54577-5_15
   PUTINAR M, 1993, INDIANA U MATH J, V42, P969, DOI 10.1512/iumj.1993.42.42045
   Reynolds A, 2015, LECT NOTES COMPUT SC, V9207, P198, DOI 10.1007/978-3-319-21668-3_12
   RICE HG, 1953, T AM MATH SOC, V74, P358, DOI 10.2307/1990888
   Rodriguez-Carbonell Enric, 2018, SOME PROGRAMS NEED P
   Sankaranarayanan S, 2004, LECT NOTES COMPUT SC, V3148, P53
   Sankaranarayanan S, 2004, ACM SIGPLAN NOTICES, V39, P318, DOI 10.1145/982962.964028
   Shaw David E., 1975, ADV PAPERS 4 INT JOI
   Si XJ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P515, DOI 10.1145/3236024.3236034
   Smith David Canfield, 1975, PYGMALION CREATIVE P
   Sobania Dominik, 2022, IEEE Transactions on Evolutionary Computation
   Solar-Lezama A, 2009, LECT NOTES COMPUT SC, V5904, P4, DOI 10.1007/978-3-642-10672-9_3
   Solarlezama Armando, 2008, PROGRAM SYNTHESIS SK
   Srivastava Saurabh, 2013, International Journal on Software Tools for Technology Transfer, V15, P497, DOI 10.1007/s10009-012-0223-4
   Srivastava S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P313, DOI 10.1145/1706299.1706337
   Takisaka T, 2018, LECT NOTES COMPUT SC, V11138, P476, DOI 10.1007/978-3-030-01090-4_28
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Troelstra AS., 1977, Stud. Logic Found. Math, V90, P973, DOI DOI 10.1016/S0049-237X(08)71127-3
   Wang JY, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1171, DOI 10.1145/3453483.3454102
   Wang PX, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P204, DOI 10.1145/3314221.3314581
   Watkins D.S., 2004, FUNDAMENTALS MATRIX, V64, DOI 10.1002/0471249718
NR 71
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586052
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600027
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Li, SH
   Su, ZD
AF Li, Shaohua
   Su, Zhendong
TI Accelerating Fuzzing through Prefix-Guided Execution
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE fuzzing; code coverage; software testing
AB Coverage-guided fuzzing is one of the most effective approaches for discovering software defects and vulnerabilities. It executes all mutated tests from seed inputs to expose coverage-increasing tests. However, executing all mutated tests incurs significant performance penalties-most of the mutated tests are discarded because they do not increase code coverage. Thus, determining if a test increases code coverage without actually executing it is beneficial, but a paradoxical challenge. In this paper, we introduce the notion of prefix-guided execution (PGE) to tackle this challenge. PGE leverages two key observations: (1) Only a tiny fraction of the mutated tests increase coverage, thus requiring full execution; and (2) whether a test increases coverage may be accurately inferred from its partial execution. PGE monitors the execution of a test and applies early termination when the execution prefix indicates that the test is unlikely to increase coverage. To demonstrate the potential of PGE, we implement a prototype on top of AFL++, which we call AFL++-PGE. We evaluate AFL++-PGE on MAGMA, a ground-truth benchmark set that consists of 21 programs from nine popular real-world projects. Our results show that, after 48 hours of fuzzing, AFL++-PGE finds more bugs, discovers bugs faster, and achieves higher coverage. Prefix-guided execution is general and can benefit the AFL-based family of fuzzers.
C1 [Li, Shaohua; Su, Zhendong] Swiss Fed Inst Technol, Zurich, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich
RP Li, SH (corresponding author), Swiss Fed Inst Technol, Zurich, Switzerland.
EM shaohua.li@inf.ethz.ch; zhendong.su@inf.ethz.ch
OI Li, Shaohua/0000-0001-7556-3615; Su, Zhendong/0000-0002-2970-1391
CR Aizatsky M., 2016, Google Testing Blog
   Appleby Austin, 2016, Murmurhash3
   Aschermann C, 2019, 26TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2019), DOI 10.14722/ndss.2019.23371
   Böhme M, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P713, DOI 10.1145/3368089.3409729
   Böhme M, 2019, IEEE T SOFTWARE ENG, V45, P489, DOI 10.1109/TSE.2017.2785841
   Böhme M, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2329, DOI 10.1145/3133956.3134020
   Chen HX, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P2095, DOI 10.1145/3243734.3243849
   Chen P, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P499, DOI 10.1145/3319535.3363225
   Chen P, 2018, P IEEE S SECUR PRIV, P711, DOI 10.1109/SP.2018.00046
   Chen YH, 2020, P IEEE S SECUR PRIV, P1580, DOI 10.1109/SP40000.2020.00002
   Chen Yaohui, 2020, 23 INT S RES ATT INT, P77
   Fioraldi A, 2021, PROCEEDINGS OF THE 30TH USENIX SECURITY SYMPOSIUM, P2829
   Fioraldi Andrea, 2020, 14 USENIX WORKSHOP O
   Fioraldi Andrea, 2022, AM FUZZY LOP PLUS PL
   Gan ST, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P2577
   Godefroid P, 2017, IEEE INT CONF AUTOM, P50, DOI 10.1109/ASE.2017.8115618
   Hazimeh A, 2020, P ACM MEAS ANAL COMP, V4, DOI [10.1145/3428334, 10.1145/3410220.3456276]
   Herrera A, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P230, DOI 10.1145/3460319.3464795
   Hsu C.C., 2018, S NETW DISTR SYST SE
   Huang HQ, 2020, P IEEE S SECUR PRIV, P1613, DOI 10.1109/SP40000.2020.00063
   KAPLAN EL, 1958, J AM STAT ASSOC, V53, P457, DOI 10.2307/2281868
   Klees G, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P2123, DOI 10.1145/3243734.3243804
   Lemieux C, 2018, IEEE INT CONF AUTOM, P475, DOI 10.1145/3238147.3238176
   Li Shaohua, 2023, ACCELERATING FUZZING, DOI [10.5281/zenodo.7727577, DOI 10.5281/ZENODO.7727577]
   Li YK, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P627, DOI 10.1145/3106237.3106295
   Li YW, 2021, PROCEEDINGS OF THE 30TH USENIX SECURITY SYMPOSIUM, P2777
   LLVM team, 2021, SANITIZERCOVERAGE
   Lyu CY, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1949
   Manès VJM, 2020, PROC INT CONF SOFTW, P1024, DOI 10.1145/3377811.3380421
   Manès VJM, 2021, IEEE T SOFTWARE ENG, V47, P2312, DOI 10.1109/TSE.2019.2946563
   MANTEL NATHAN, 1966, CANCERCHEMOTHERAP REP, V50, P163
   Mathis Bjorn., 2020, INT S SOFTWARE TESTI, P27, DOI DOI 10.1145/3395363.3397348
   Nagy S, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P351, DOI 10.1145/3460120.3484787
   Nagy S, 2019, P IEEE S SECUR PRIV, P787, DOI 10.1109/SP.2019.00069
   Noller Y, 2020, PROC INT CONF SOFTW, P1273, DOI 10.1145/3377811.3380363
   Noller Y, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P322, DOI 10.1145/3213846.3213868
   Peng H, 2018, P IEEE S SECUR PRIV, P697, DOI 10.1109/SP.2018.00056
   Rajpal M, 2017, Arxiv, DOI arXiv:1711.04596
   Rawat S, 2017, 24TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2017), DOI 10.14722/ndss.2017.23404
   Schum D.A., 2001, The evidential foundations of probabilistic reasoning
   She DD, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P737, DOI 10.1145/3368089.3409723
   She DD, 2019, P IEEE S SECUR PRIV, P803, DOI 10.1109/SP.2019.00052
   Song D, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P2541
   Stephens N, 2016, 23RD ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2016), DOI 10.14722/ndss.2016.23368
   Pham VT, 2020, IEEE INT CONF SOFTW, P460, DOI 10.1109/ICST46399.2020.00062
   Wagner J. B., 2017, Elastic program transformations: Automatically optimizing the reliability/performance trade-off in systems software
   Wang HJ, 2020, PROC INT CONF SOFTW, P999, DOI 10.1145/3377811.3380386
   Wang JJ, 2017, P IEEE S SECUR PRIV, P579, DOI 10.1109/SP.2017.23
   Wang MZ, 2018, PROC IEEE ACM INT C, P61, DOI 10.1145/3183440.3183494
   Wuestholz V, 2020, PROC INT CONF SOFTW, P789, DOI 10.1145/3377811.3380388
   Xu W, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2313, DOI 10.1145/3133956.3134046
   Yun I, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P745
   Zalewski M, 2014, American fuzzy lop
   Zhou CJ, 2020, IEEE INT CONF AUTOM, P858, DOI 10.1145/3324884.3416572
   Zong PY, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P2255
NR 55
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586027
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600002
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Zhang, X
   Guo, GC
   He, X
   Hu, ZJ
AF Zhang, Xing
   Guo, Guanchen
   He, Xiao
   Hu, Zhenjiang
TI Bidirectional Object-Oriented Programming: Towards Programmatic and
   Direct Manipulation of Objects
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Bidirectional Transformation; Direct Manipulation; Object-Oriented;
   Programming; Language Design and Implementation
AB Many bidirectional programming languages, which are mainly functional and relational, have been designed to support writing programs that run in both forward and backward directions. Nevertheless, there is little study on the bidirectionalization of object-oriented languages that are more popular in practice. This paper presents the first bidirectional object-oriented language that supports programmatic and direct manipulation of objects. Specifically, we carefully extend a core object-oriented language, which has a standard forward evaluation semantics, with backward updating semantics for class inheritance hierarchies and references. We formally prove that the bidirectional evaluation semantics satisfies the round-tripping properties if the output is altered consistently. To validate the utility of our approach, we have developed a tool called BiOOP for generating HTML documents through bidirectional GUI design. We evaluate the expressiveness and effectiveness of BiOOP for HTML webpage development by reproducing ten classic object-oriented applications from a Java Swing tutorial and one large project from GitHub. The experimental results show the response time of direct manipulation programming on object-oriented programs that produce HTML webpages is acceptable for developers.
C1 [Zhang, Xing; Guo, Guanchen; Hu, Zhenjiang] Peking Univ, Beijing, Peoples R China.
   [He, Xiao] Univ Sci & Technol Beijing, Beijing, Peoples R China.
C3 Peking University; University of Science & Technology Beijing
RP Zhang, X (corresponding author), Peking Univ, Beijing, Peoples R China.
EM zhangstar@stu.pku.edu.cn; guanchenguo@stu.pku.edu.cn;
   hexiao@ustb.edu.cn; huzj@pku.edu.cn
OI Guo, Guanchen/0009-0007-0690-2119; Zhang, Xing/0009-0008-2565-7769; he,
   xiao/0000-0002-3000-0795; Hu, Zhenjiang/0000-0002-9034-205X
FU Beijing Natural Science Foundation [4192036]; National Key Research and
   Development Program of China [2021ZD0110202]
FX The authors would like to thank anonymous reviewers for many helpful
   suggestions. This work was partly supported by the Beijing Natural
   Science Foundation (NO. 4192036) and the National Key Research and
   Development Program of China (No. 2021ZD0110202).
CR Avrahami G., 1989, Computer Graphics, V23, P137, DOI 10.1145/74334.74347
   Barbosa DMJ, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P193
   Bohannon A, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P407, DOI 10.1145/1328438.1328487
   Chugh R, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P781, DOI 10.1145/2889160.2889210
   Chugh R, 2016, ACM SIGPLAN NOTICES, V51, P341, DOI [10.1145/2980983.2908103, 10.1145/2908080.2908103]
   Eckstein R., 1998, JAVA SWING
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Foster Nate, 2012, Generic and Indexed Programming. International Spring School, SSGIP 2010. Revised Lectures, P1, DOI 10.1007/978-3-642-32202-0_1
   Fry Ben., 2001, PROCESSING
   Fukahori Koumei, 2014, C HUMAN FACTORS COMP, DOI [10.1145/2559206.2581138, DOI 10.1145/2559206.2581138]
   He X, 2022, SCI CHINA INFORM SCI, V65, DOI 10.1007/s11432-020-3276-5
   He X, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P434, DOI 10.1145/3236024.3236070
   Hempel B, 2019, PROCEEDINGS OF THE 32ND ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY (UIST 2019), P281, DOI 10.1145/3332165.3347925
   Hempel B, 2016, UIST 2016: PROCEEDINGS OF THE 29TH ANNUAL SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P379, DOI 10.1145/2984511.2984575
   Hevery Misko, 2010, ANGULAR
   Hidaka S, 2010, ACM SIGPLAN NOTICES, V45, P205, DOI 10.1145/1932681.1863573
   Hu Zhenjiang., 2004, PARTIAL EVALUATION P, P178
   JFormDesigner, 2003, ECL INTELLIJ IDEA NE
   Kawanaka S, 2006, ACM SIGPLAN NOTICES, V41, P201, DOI 10.1145/1160074.1159830
   Maloney John, 1995, Morphic: The Self User Interface Framework
   Mayer M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276497
   Nakano K, 2008, IEEE INTL SYMPOS WEB, P45, DOI 10.1109/WSE.2008.4655395
   Nord Haavard, 1995, QT CREATOR
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rajkumar Raghu, 2014, LENSES WEB DATA, DOI [10.14279/tuj.eceasst.57.879.869, DOI 10.14279/TUJ.ECEASST.57.879.869]
   UNGAR D, 1987, SIGPLAN NOTICES, V22, P227, DOI 10.1145/38807.38828
   Vaughan J.A., 2006, P PRINC DAT SYST, P338, DOI [10.1145/1142351.1142399, DOI 10.1145/1142351.1142399]
   Visualiser, 2004, ECLIPSE
   You Evan, 2014, ABOUT US
   Zhang Xing, 2023, BIDIRECTIONAL OBJECT, DOI [10.5281/zenodo.7698353, DOI 10.5281/ZENODO.7698353]
NR 30
TC 1
Z9 1
U1 3
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586035
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600010
OA gold
DA 2024-07-18
ER

PT J
AU Hainry, E
   Péchoux, R
AF Hainry, Emmanuel
   Pechoux, Romain
TI A General Noninterference Policy for Polynomial Time
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Polynomial time; Computational Complexity; Noninterference; Shape
   Analysis
ID COMPLEXITY ANALYSIS
AB We introduce a new noninterference policy to capture the class of functions computable in polynomial time on an object-oriented programming language. This policy makes a clear separation between the standard noninterference techniques for the control flow and the layering properties required to ensure that each "security" level preserves polynomial time soundness, and is thus very powerful as for the class of programs it can capture. This new characterization is a proper extension of existing tractable characterizations of polynomial time based on safe recursion. Despite the fact that this noninterference policy is.0 1 -complete, we show that it can be instantiated to some decidable and conservative instance using shape analysis techniques.
C1 [Hainry, Emmanuel; Pechoux, Romain] Univ Lorraine, CNRS, INRIA, LORIA, F-54000 Nancy, France.
C3 Inria; Centre National de la Recherche Scientifique (CNRS); Universite
   de Lorraine
RP Hainry, E (corresponding author), Univ Lorraine, CNRS, INRIA, LORIA, F-54000 Nancy, France.
EM emmanuel.hainry@loria.fr; romain.pechoux@loria.fr
OI Hainry, Emmanuel/0000-0002-9750-0460
FU Inria
FX We are grateful to the POPL reviewers for their careful feedback and
   many suggestions for improving this paper. The authors have been
   supported by Inria associate team TC(Pro)<SUP>3</SUP>.
CR [Anonymous], 1971, P 2 SCAND LOG S N HO
   [Anonymous], 1992, Computational Complexity, DOI [10.1007/bf01201998., DOI 10.1007/BF01201998]
   Atkey R, 2010, LECT NOTES COMPUT SC, V6012, P85, DOI 10.1007/978-3-642-11957-6_6
   BACKUS JW, 1963, COMMUN ACM, V6, P1, DOI 10.1145/366193.366201
   Baillot P, 2004, IEEE S LOG, P266, DOI 10.1109/LICS.2004.1319621
   Baillot P, 2010, THEOR COMPUT SCI, V411, P470, DOI 10.1016/j.tcs.2009.09.015
   Berdine J, 2006, LECT NOTES COMPUT SC, V4144, P386, DOI 10.1007/11817963_35
   Bouajjani A, 2011, FORM METHOD SYST DES, V38, P158, DOI 10.1007/s10703-011-0111-7
   Cousot P, 2002, ACM SIGPLAN NOTICES, V37, P178, DOI 10.1145/565816.503290
   Endrullis J, 2011, INFORM COMPUT, V209, P227, DOI 10.1016/j.ic.2010.09.003
   Gaboardi M, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P121, DOI 10.1145/1328438.1328456
   Girard JY, 1998, INFORM COMPUT, V143, P175, DOI 10.1006/inco.1998.2700
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Goguen J. A., 1984, Proceedings of the 1984 Symposium on Security and Privacy, P75
   Hainry E, 2022, LOG METH COMPUT SCI, V18, DOI 10.46298/LMCS-18(1:33)2022
   Hainry E, 2018, INFORM COMPUT, V261, P78, DOI 10.1016/j.ic.2018.05.006
   Hainry E, 2013, LECT NOTES COMPUT SC, V7794, P305, DOI 10.1007/978-3-642-37075-5_20
   Hajek P., 1979, Theoretical Computer Science, V8, P227, DOI 10.1016/0304-3975(79)90046-X
   Heintze N., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P365, DOI 10.1145/268946.268976
   Hofmann M, 2003, INFORM COMPUT, V183, P57, DOI 10.1016/S0890-5401(03)00009-9
   Hofmann M, 2002, ACM SIGPLAN NOTICES, V37, P260, DOI 10.1145/565816.503297
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Jones ND, 2001, J FUNCT PROGRAM, V11, P55, DOI 10.1017/S0956796800003889
   Kleene SC., 1952, Introduction to metamathematics
   Kop C, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(3:8)2017
   Lafont Y, 2004, THEOR COMPUT SCI, V318, P163, DOI 10.1016/j.tcs.2003.10.018
   Leivant D., 1993, Fundamenta Informaticae, V19, P167
   Leivant D, 2013, LECT NOTES COMPUT SC, V7966, P349, DOI 10.1007/978-3-642-39212-2_32
   Manevich R, 2016, LECT NOTES COMPUT SC, V9779, P426, DOI 10.1007/978-3-319-41528-4_23
   Marion JY, 2011, IEEE S LOG, P123, DOI 10.1109/LICS.2011.41
   McLean John., 1992, J COMPUT SECUR, V1, P37, DOI [10.3233/JCS-1992-1103, DOI 10.3233/JCS-1992-1103]
   Myers A. C., 1997, Operating Systems Review, V31, P129, DOI 10.1145/269005.266669
   Reps T, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1749608.1749613
   Reps TW, 2004, LECT NOTES COMPUT SC, V3114, P15
   Reynolds J. C., 1974, Programming Symposium, P408
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sagiv M., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P16, DOI 10.1145/237721.237725
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   Volpano D., 1997, TAPSOFT '97: Theory and Practice of Software Development. 7th International Joint Conference CAAP/FASE. Proceedings, P607, DOI 10.1007/BFb0030629
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Zdancewic Steve, 2004, PLID 04, V6
NR 41
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571221
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500028
OA gold
DA 2024-07-18
ER

PT J
AU Jin, C
   Phothilimthana, PM
   Roy, S
AF Jin, Charles
   Phothilimthana, Phitchaya Mangpo
   Roy, Sudip
TI Neural Architecture Search using Property Guided Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Neural Architecture Search; Program Synthesis; Abstract Interpretation
AB Neural architecture search (NAS) has become an increasingly important tool within the deep learning community in recent years, yielding many practical advancements in the design of deep neural network architectures. However, most existing approaches operate within highly structured design spaces, and hence (1) explore only a small fraction of the full search space of neural architectures while also (2) requiring significant manual effort from domain experts. In this work, we develop techniques that enable efficient NAS in a significantly larger design space. In particular, we propose to perform NAS in an abstract search space of program properties. Our key insights are as follows: (1) an abstract search space can be significantly smaller than the original search space, and (2) architectures with similar program properties should also have similar performance; thus, we can search more efficiently in the abstract search space. To enable this approach, we also introduce a novel efficient synthesis procedure, which performs the role of concretizing a set of promising program properties into a satisfying neural architecture. We implement our approach, alpha NAS, within an evolutionary framework, where the mutations are guided by the program properties. Starting with a ResNet-34 model, alpha NAS produces a model with slightly improved accuracy on CIFAR-10 but 96% fewer parameters. On ImageNet, alpha NAS is able to improve over Vision Transformer (30% fewer FLOPS and parameters), ResNet-50 (23% fewer FLOPS, 14% fewer parameters), and EfficientNet (7% fewer FLOPS and parameters) without any degradation in accuracy.
C1 [Jin, Charles] MIT, CSAIL, Cambridge, MA USA.
   [Phothilimthana, Phitchaya Mangpo] Google, Google Res, Mountain View, CA USA.
   [Roy, Sudip] Cohere, Palo Alto, CA USA.
C3 Massachusetts Institute of Technology (MIT); Google Incorporated
RP Jin, C (corresponding author), MIT, CSAIL, Cambridge, MA USA.
EM ccj@csail.mit.edu; mangpo@google.com
OI Phothilimthana, Phitchaya Mangpo/0000-0003-3492-3690; Roy,
   Sudip/0000-0002-0535-0531; Jin, Charles/0000-0001-6871-5764
CR Adams A, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3306346.3322967
   Banner R., 2018, Advances in neural information processing systems, P5145
   Bender Gabriel, 2020, 2020 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). Proceedings, P14311, DOI 10.1109/CVPR42600.2020.01433
   Bradbury J., 2018, JAX: Composable transformations of Python + NumPy programs
   Cai H, 2018, AAAI CONF ARTIF INTE, P2787
   Chen TQ, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P579
   Dosovitskiy A, 2021, arXiv, DOI [10.48550/ARXIV.2010.11929, DOI 10.48550/ARXIV.2010.11929]
   Franco J, 2021, PHYSIOTHER THEOR PR, V37, P1419, DOI 10.1080/09593985.2019.1709234
   Gholami A., 2021, arXiv
   Hassibi B., 1993, P ADV NEUR INF PROC, P164
   He KM, 2016, PROC CVPR IEEE, P770, DOI 10.1109/CVPR.2016.90
   He YH, 2018, LECT NOTES COMPUT SC, V11211, P815, DOI 10.1007/978-3-030-01234-2_48
   Huang YP, 2019, ADV NEUR IN, V32
   Jia ZH, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P47, DOI 10.1145/3341301.3359630
   Jia Zhihao, 2019, PROC MACH LEARN SYST, V1, P1
   Jia Zhihao., P 2 SYSML C SYSML 19
   Kjolstad F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133901
   Krizhevsky A, 2017, COMMUN ACM, V60, P84, DOI 10.1145/3065386
   LeCun Y., 1990, ADV NEURAL INFORM PR, P396
   Li L, 2020, PR MACH LEARN RES, V115, P367
   Li MY, 2020, PROC CVPR IEEE, P5283, DOI 10.1109/CVPR42600.2020.00533
   Liu Cheng, 2018, CaltechDATA
   Liu HaiJing Liu HaiJing, 2018, The Proceedings of the Fifteenth Congress of China Sheep Industry Development Sponsored by the China Animal Husbandry Association in 2018, Henan, China, 10-11 October, 2018, P13
   Luo JH, 2017, IEEE I CONF COMP VIS, P5068, DOI 10.1109/ICCV.2017.541
   Narayanan D, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P1, DOI 10.1145/3341301.3359646
   Phothilimthana PM, 2021, INT CONFER PARA, P1, DOI 10.1109/PACT52795.2021.00008
   Phothilimthana PM, 2016, ACM SIGPLAN NOTICES, V51, P297, DOI 10.1145/2954679.2872387
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Real E., 2020, INT C MACH LEARN ICM
   Real E, 2019, AAAI CONF ARTIF INTE, P4780
   Sciuto C., 2020, INT C LEARN REPR
   So David, 2021, ADV NEURAL INFORM PR
   Tan M., 2021, arXiv, DOI DOI 10.48550/ARXIV.2104.00298
   Tan Mingxing, 2021, P INT C INT C MACH L
   Turner J, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P915, DOI 10.1145/3445814.3446753
   Vasilache N, 2018, Arxiv, DOI arXiv:1802.04730
   Vaswani A, 2017, ADV NEUR IN, V30
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang NG, 2018, ADV NEUR IN, V31
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
   Wei T, 2016, PR MACH LEARN RES, V48
   Yang Yichen, 2021, MLSys
   Zhou Yanqi, 2020, NeurIPS 2020
   Zoph B., 2017, ICLR, P1, DOI DOI 10.1109/ICAIIC48513.2020.9065031
   Zoph B, 2018, PROC CVPR IEEE, P8697, DOI 10.1109/CVPR.2018.00907
NR 45
TC 2
Z9 2
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 166
DI 10.1145/3563329
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200043
OA Green Submitted, gold, Green Published
DA 2024-07-18
ER

PT J
AU Liu, MQ
   Shao, Z
   Chen, H
   Yoon, MK
   Kim, JE
AF Liu, Mengqi
   Shao, Zhong
   Chen, Hao
   Yoon, Man-Ki
   Kim, Jung-Eun
TI Compositional Virtual Timelines: Verifying Dynamic-Priority Partitions
   with Algorithmic Temporal Isolation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE earliest-deadline-first; dynamic-priority scheduling; partitioned
   scheduling; temporal isolation; formal verification; mechanized proof
ID PROOF
AB Real-time systems power safety-critical applications that require strong isolation among each other. Such isolation needs to be enforced at two orthogonal levels. On the micro-architectural level, this mainly involves avoiding interference through micro-architectural states, such as cache lines. On the algorithmic level, this is usually achieved by adopting real-time partitions to reserve resources for each application. Implementations of such systems are often complex and require formal verification to guarantee proper isolation.
   In this paper, we focus on algorithmic isolation, which is mainly related to scheduling-induced interferences. We address earliest-deadline-first (EDF) partitions to achieve compositionality and utilization, while imposing constraints on tasks' periods and enforcing budgets on these periodic partitions to ensure isolation between each other. The formal verification of such a real-time OS kernel is challenging due to the inherent complexity of the dynamic priority assignment on the partition level. We tackle this problem by adopting a dynamically constructed abstraction to lift the reasoning of a concrete scheduler into an abstract domain. Using this framework, we verify a real-time operating system kernel with budget-enforcing EDF partitions and prove that it indeed ensures isolation between partitions. All the proofs are mechanized in Coq.
C1 [Liu, Mengqi; Shao, Zhong; Chen, Hao; Yoon, Man-Ki; Kim, Jung-Eun] Yale Univ, New Haven, CT 06520 USA.
C3 Yale University
RP Liu, MQ (corresponding author), Yale Univ, New Haven, CT 06520 USA.
EM mengqi.liu@yale.edu; zhong.shao@yale.edu; hao.chen@yale.edu;
   man-ki.yoon@yale.edu; jung-eun.kim@yale.edu
OI Shao, Zhong/0000-0001-8184-7649
CR Abeni L, 1998, REAL TIM SYST SYMP P, P4, DOI 10.1109/REAL.1998.739726
   Aeronautical Radio Inc., 2010, Avionics Application Software Standard Interface: ARINC Specification 653P1-3
   Andronick J, 2016, LECT NOTES COMPUT SC, V9807, P52, DOI 10.1007/978-3-319-43144-4_4
   [Anonymous], 2022, LynxOS-178
   [Anonymous], 2022, Wind River VxWorks 653 Platform
   Cerqueira F, 2016, PROC EUROMICR, P273, DOI 10.1109/ECRTS.2016.28
   Costanzo D, 2016, ACM SIGPLAN NOTICES, V51, P648, DOI [10.1145/2908080.2908100, 10.1145/2980983.2908100]
   Davis RI, 2005, REAL TIM SYST SYMP P, P389
   Deng Z, 1997, EUROMICRO, P191, DOI 10.1109/EMWRTS.1997.613785
   Dutertre B, 2000, REAL TIM SYST SYMP P, P151, DOI 10.1109/REAL.2000.896005
   Fradet P, 2018, REAL TIM SYST SYMP P, P218, DOI 10.1109/RTSS.2018.00039
   Ge Q, 2019, PROCEEDINGS OF THE FOURTEENTH EUROSYS CONFERENCE 2019 (EUROSYS '19), DOI 10.1145/3302424.3303976
   Gu RH, 2019, COMMUN ACM, V62, P89, DOI 10.1145/3356903
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Guo XJ, 2019, LECT NOTES COMPUT SC, V11562, P496, DOI 10.1007/978-3-030-25543-5_28
   Heiser G, 2019, PROCEEDINGS OF THE WORKSHOP ON HOT TOPICS IN OPERATING SYSTEMS (HOTOS '19), P23, DOI 10.1145/3317550.3321431
   Heiser Gernot, 2020, White paper
   JOSEPH M, 1986, COMPUT J, V29, P390, DOI 10.1093/comjnl/29.5.390
   Kim JE, 2015, 21ST IEEE REAL-TIME AND EMBEDDED TECHNOLOGY AND APPLICATIONS SYMPOSIUM (RTAS 2015), P221, DOI 10.1109/RTAS.2015.7108445
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   LEHOCZKY J, 1989, REAL-TIME SYSTEMS SYMPOSIUM, PROCEEDINGS, P166
   Liu J., 2000, Real-Time Systems
   Liu MQ, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371088
   Lyons A, 2018, EUROSYS '18: PROCEEDINGS OF THE THIRTEENTH EUROSYS CONFERENCE, DOI 10.1145/3190508.3190539
   Maida M., 2022, LEIBNIZ INT P INFORM, V231, DOI [10.4230/LIPIcs.ECRTS.2022.19, DOI 10.4230/LIPICS.ECRTS.2022.19]
   Murray T, 2013, P IEEE S SECUR PRIV, P415, DOI 10.1109/SP.2013.35
   Nelson L, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P252, DOI 10.1145/3132747.3132748
   Roux Pierre, 2022, Leibniz International Proceedings in Informatics (LIPIcs), V231, DOI [10.4230/LIPIcs.ECRTS.2022.5, DOI 10.4230/LIPICS.ECRTS.2022.5]
   Sha L, 2016, COMPUTER, V49, P69, DOI 10.1109/MC.2016.271
   Shin I, 2003, RTSS 2003: 24TH IEEE INTERNATIONAL REAL-TIME SYSTEMS SYMPOSIUM, PROCEEDINGS, P2, DOI 10.1109/REAL.2003.1253249
   Sprunt B., 1989, Real-Time Systems, V1, P27, DOI 10.1007/BF02341920
   Vanhems F, 2022, IEEE REAL TIME, P281, DOI 10.1109/RTAS54340.2022.00030
   Wilding M, 1998, LECT NOTES COMPUT SC, V1427, P369, DOI 10.1007/BFb0028759
   Xingyuan Zhang, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P217, DOI 10.1007/978-3-642-32347-8_15
   Xu FW, 2016, LECT NOTES COMPUT SC, V9780, P59, DOI 10.1007/978-3-319-41540-6_4
   Yoon Man-Ki, 2021, P 30 USENIX SEC S US
NR 37
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 127
DI 10.1145/3563290
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200004
OA gold
DA 2024-07-18
ER

PT J
AU Moosbrugger, M
   Stankovic, M
   Bartocci, E
   Kovács, L
AF Moosbrugger, Marcel
   Stankovic, Miroslav
   Bartocci, Ezio
   Kovacs, Laura
TI This Is the Moment for Probabilistic Loops
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Probabilistic Programs; Higher Moments; Linear Recurrences; Distribution
   Recovery
ID MODEL CHECKING; MARKOV-CHAINS
AB We present a novel static analysis technique to derive higher moments for program variables for a large class of probabilistic loops with potentially uncountable state spaces. Our approach is fully automatic, meaning it does not rely on externally provided invariants or templates. We employ algebraic techniques based on linear recurrences and introduce program transformations to simplify probabilistic programs while preserving their statistical properties. We develop power reduction techniques to further simplify the polynomial arithmetic of probabilistic programs and define the theory of moment-computable probabilistic loops for which higher moments can precisely be computed. Our work has applications towards recovering probability distributions of random variables and computing tail probabilities. The empirical evaluation of our results demonstrates the applicability of our work on many challenging examples.
C1 [Moosbrugger, Marcel; Stankovic, Miroslav; Bartocci, Ezio; Kovacs, Laura] TU Wien, Vienna, Austria.
C3 Technische Universitat Wien
RP Moosbrugger, M (corresponding author), TU Wien, Vienna, Austria.
EM marcel.moosbrugger@tuwien.ac; miroslav.stankovic@tuwien.ac.at;
   ezio.bartocci@tuwien.ac.at; laura.kovacs@tuwien.ac.at
OI Moosbrugger, Marcel/0000-0002-2006-3741; Kovacs,
   Laura/0000-0002-8299-2714; Stankovic, Miroslav/0000-0001-5978-7475;
   Bartocci, Ezio/0000-0002-8004-6601
FU WWTF [ICT19-018]; ERC [101002685]; Austrian FWF [W1255-N23]; SecInt
   Doctoral College - TU Wien
FX This research was supported by the WWTF ICT19-018 grant ProbInG, the ERC
   Consolidator Grant ARTIST 101002685, the Austrian FWF project W1255-N23,
   and the SecInt Doctoral College funded by TU Wien. We thank the
   anonymous reviewers for their outstanding and detailed feedback.
CR Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Bao JL, 2022, LECT NOTES COMPUT SC, V13371, P33, DOI 10.1007/978-3-031-13185-1_3
   Barthe G, 2016, LECT NOTES COMPUT SC, V9779, P43, DOI 10.1007/978-3-319-41528-4_3
   Barthe Gilles, 2012, PROC MPC, DOI DOI 10.1007/978-3-642-31113-0
   Barthe Gilles, 2020, Foundations of Probabilistic Programming, DOI DOI 10.1017/9781108770750
   Bartocci Ezio, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12078), P492, DOI 10.1007/978-3-030-45190-5_28
   Bartocci E, 2020, LECT NOTES COMPUT SC, V12545, P221, DOI 10.1007/978-3-030-64276-1_12
   Bartocci E, 2019, LECT NOTES COMPUT SC, V11781, P255, DOI 10.1007/978-3-030-31784-3_15
   Batz K, 2021, LECT NOTES COMPUT SC, V12760, P524, DOI 10.1007/978-3-030-81688-9_25
   Beguelin Santiago Zanella, 2012, P POPL, DOI DOI 10.1145/2103656.2103670
   Boucheron S., 2013, CONCENTRATION INEQUA, DOI [DOI 10.1093/ACPROF:OSO/9780199535255.001.0001, 10.1093/acprof:oso/9780199535255.001.0001]
   Bouissou O, 2016, LECT NOTES COMPUT SC, V9636, P225, DOI 10.1007/978-3-662-49674-9_13
   Breck J, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P688, DOI 10.1145/3385412.3386035
   Chakarov A, 2014, LECT NOTES COMPUT SC, V8723, P85, DOI 10.1007/978-3-319-10936-7_6
   Chatterjee K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P672, DOI 10.1145/3385412.3385969
   Chen YF, 2015, LECT NOTES COMPUT SC, V9206, P658, DOI 10.1007/978-3-319-21690-4_44
   Chou Y, 2020, IEEE INT C INT ROBOT, P2111, DOI 10.1109/IROS45743.2020.9340755
   Claret Guillaume., 2013, Foundations of Software Engineering, P92, DOI DOI 10.1145/2491411.2491423
   de Oliveira S, 2016, LECT NOTES COMPUT SC, V9938, P479, DOI 10.1007/978-3-319-46520-3_30
   Dehnert C, 2017, LECT NOTES COMPUT SC, V10427, P592, DOI 10.1007/978-3-319-63390-9_31
   Durrett R., 2019, PROBABILITY THEORY E, V49, DOI [DOI 10.1017/9781108591034, 10.1017/9781108591034]
   Farzan A, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P57, DOI 10.1109/FMCAD.2015.7542253
   Feng YJ, 2017, LECT NOTES COMPUT SC, V10482, P400, DOI 10.1007/978-3-319-68167-2_26
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   Ghahramani Z, 2015, NATURE, V521, P452, DOI 10.1038/nature14541
   Gretz Friedrich, 2013, Quantitative Evaluation of Systems. 10th International Conference, QEST 2013. Proceedings: LNCS 8054, P193, DOI 10.1007/978-3-642-40196-1_17
   Gruntz Dominik, 1996, Ph. D. Dissertation, DOI [10.3929/ETHZA-001631582, DOI 10.3929/ETHZA-001631582]
   HASTINGS WK, 1970, BIOMETRIKA, V57, P97, DOI 10.1093/biomet/57.1.97
   HERMAN T, 1990, INFORM PROCESS LETT, V35, P63, DOI 10.1016/0020-0190(90)90107-9
   Holtzen S, 2021, LECT NOTES COMPUT SC, V12760, P577, DOI 10.1007/978-3-030-81688-9_27
   Holtzen S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428208
   Humenberger A, 2017, PROCEEDINGS OF THE 2017 ACM INTERNATIONAL SYMPOSIUM ON SYMBOLIC AND ALGEBRAIC COMPUTATION (ISSAC'17), P221, DOI 10.1145/3087604.3087623
   Humenberger A, 2018, LECT NOTES COMPUT SC, V10747, P226, DOI 10.1007/978-3-319-73721-8_11
   Kaminski BL, 2019, ACTA INFORM, V56, P255, DOI 10.1007/s00236-018-0321-1
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   KARP RM, 1994, J ASSOC COMPUT MACH, V41, P1136, DOI 10.1145/195613.195632
   Katoen JP, 2010, LECT NOTES COMPUT SC, V6337, P390, DOI 10.1007/978-3-642-15769-1_24
   Katoen JP, 2011, PERFORM EVALUATION, V68, P90, DOI 10.1016/j.peva.2010.04.001
   Kauers M, 2011, TEXT MG SYMB COMPUT, P1, DOI 10.1007/978-3-7091-0445-3
   Kincaid Z, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290368
   Kincaid Z, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158142
   Kolassa John E., 2006, Series Approximation Methods in Statistics, DOI [10.1007/0-387-32227-2, DOI 10.1007/0-387-32227-2]
   Kovács L, 2008, LECT NOTES COMPUT SC, V4963, P249, DOI 10.1007/978-3-540-78800-3_18
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Kura S, 2019, LECT NOTES COMPUT SC, V11428, P135, DOI 10.1007/978-3-030-17465-1_8
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Kwiatkowska M, 2012, FORM ASP COMPUT, V24, P661, DOI 10.1007/s00165-012-0227-6
   Maritz MF, 2020, CHAOS, V30, DOI 10.1063/1.5125097
   MAY RM, 1976, NATURE, V261, P459, DOI 10.1038/261459a0
   McIver Annabelle., 2005, MG COMP SCI
   Moosbrugger Marcel, 2022, This is the Moment for Probabilistic Loops-Artifact (Polar), DOI [10.5281/zenodo.7055030, DOI 10.5281/ZENODO.7055030]
   Motwani R., 1995, RANDOMIZED ALGORITHM, DOI DOI 10.1017/CBO9780511814075
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Rodriguez-Carbonell E, 2004, P ISSAC, P266, DOI DOI 10.1145/1005285.1005324
   Saad FA, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P804, DOI 10.1145/3453483.3454078
   Selyunin K, 2015, IEEE DECIS CONTR P, P6978, DOI 10.1109/CDC.2015.7403319
   Stankovic M, 2022, THEOR COMPUT SCI, V903, P113, DOI 10.1016/j.tcs.2021.12.021
   Wang D, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P559, DOI 10.1145/3453483.3454062
   WARNER SL, 1965, J AM STAT ASSOC, V60, P63, DOI 10.2307/2283137
   Younes HLS, 2006, INFORM COMPUT, V204, P1368, DOI 10.1016/j.ic.2006.05.002
NR 60
TC 8
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 178
DI 10.1145/3563341
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200055
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Zhang, YZ
   Amin, N
AF Zhang, Yizhou
   Amin, Nada
TI Reasoning about "Reasoning about Reasoning" Semantics and Contextual
   Equivalence for Probabilistic Programs with Nested Queries and Recursion
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Metareasoning; nested queries; logical relations; program equivalence
AB Metareasoning can be achieved in probabilistic programming languages (PPLs) using agent models that recursively nest inference queries inside inference queries. However, the semantics of this powerful, reflectionlike language feature has defied an operational treatment, much less reasoning principles for contextual equivalence.
   We give formal semantics to a core PPL with continuous distributions, scoring, general recursion, and nested queries. Unlike prior work, the presence of nested queries and general recursion makes it impossible to stratify the definition of a sampling-based operational semantics and that of a measure-theoretic semanticsDthe two semantics must be defined mutually recursively. A key yet challenging property we establish is that probabilistic programs have well-defined meanings: limits exist for the step-indexed measures they induce.
   Beyond a semantics, we offer relational reasoning principles for probabilistic programs making nested queries. We construct a step-indexed, biorthogonal logical-relations model. A soundness theorem establishes that logical relatedness implies contextual equivalence. We demonstrate the usefulness of the reasoning principles by proving novel equivalences of practical relevanceDin particular, game-playing and decisionmaking agents. We mechanize our technical developments leading to the soundness proof using the Coq proof assistant. Nested queries are an important yet theoretically underdeveloped linguistic feature in PPLs; we are first to give them semantics in the presence of general recursion and to provide them with sound reasoning principles for contextual equivalence.
C1 [Zhang, Yizhou] Univ Waterloo, David R Cheriton Sch Comp Sci, Davis Ctr, 200 Univ Ave West, Waterloo, ON N2L 3G1, Canada.
   [Amin, Nada] Harvard Univ, John A Paulson Sch Engn & Appl Sci, 4-413 Sci & Engn Complex,150 Western Ave, Allston, MA 02134 USA.
C3 University of Waterloo; Harvard University
RP Zhang, YZ (corresponding author), Univ Waterloo, David R Cheriton Sch Comp Sci, Davis Ctr, 200 Univ Ave West, Waterloo, ON N2L 3G1, Canada.
OI Zhang, Yizhou/0000-0002-8206-4694
FU NSERC
FX We thank the anonymous reviewers for their valuable feedback. We thank
   Elena Glassman, Jianlin Li, Andrew Myers, Francois-Rene Rideau, Armando
   Solar-Lezama, and ZekunWang for discussions and help. This work was
   partially supported by NSERC. The views and opinions expressed are those
   of the authors and do not necessarily reflect the position of any
   government agency.
CR Ackerman NL, 2011, IEEE S LOG, P107, DOI 10.1109/LICS.2011.49
   [Anonymous], 2006, Lecture Notes in Computer Science, DOI 10.1007/116930246
   [Anonymous], 1960, DYNAMIC PROGRAMMING
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   BELLMAN R, 1966, SCIENCE, V153, P34, DOI 10.1126/science.153.3731.34
   Bichsel Benjamin, 2018, EUR S PROGR ESOP, DOI [10.1007/978- 3- 319-89884- 1_6, DOI 10.1007/978-3-319-89884-1_6]
   Bizjak A, 2015, LECT NOTES COMPUT SC, V9034, P279, DOI 10.1007/978-3-662-46678-0_18
   Borgström J, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI [10.1145/2951913.2951942, 10.1145/3022670.2951942]
   Culpepper R, 2017, LECT NOTES COMPUT SC, V10201, P368, DOI 10.1007/978-3-662-54434-1_14
   Evans Owain, 2017, MODELING AGENTS PROB
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Freer Cameron E., 2014, TURINGS LEGACY, V42
   Gershman Samuel J., 2014, ANN M COGN SCI SOC C
   Goodman N. D., 2014, DESIGN IMPLEMENTATIO
   Goodman ND., 2008, UAI, P220
   Heunen Chris, 2017, 2017 32nd Annual ACM/IEEE Symposium on Logic in Computer Science (LICS), DOI 10.1109/LICS.2017.8005137
   Holtzen S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428208
   Holtzen Steven, 2019, ARXIV190402079
   Huang Daniel, 2020, APPL COMPUTABLE DIST, DOI [10.1017/9781108770750.004, DOI 10.1017/9781108770750.004]
   Icard Thomas, 2017, ANN M COGN SCI SOC
   Kozen D, 1979, 20 ANN S FDN COMP SC, P101
   Liu JS, 1998, J AM STAT ASSOC, V93, P1032, DOI 10.2307/2669847
   Mantadelis T., 2011, ARXIV11123785
   Mason I., 1991, Journal of Functional Programming, V1, P287, DOI 10.1017/S0956796800000125
   Mayero Micaela, 2001, THESIS U PARIS
   Morris James H., 1968, THESIS MASSACHUSETTS
   Olmedo F, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3156018
   Park S, 2008, ACM T PROGR LANG SYS, V31, DOI 10.1145/1452044.1452048
   Pitts A. M., 1998, HIGHER ORDER OPERATI
   Rainforth T, 2018, UNCERTAINTY IN ARTIFICIAL INTELLIGENCE, P249
   Schelling T.C., 1980, The Strategy of Conflict: with a new Preface by the Author
   Seaman Iris Rubi, 2020, ARXIV181201569
   Smith B.C., 1982, Ph.D. thesis
   STATMAN R, 1985, INFORM CONTROL, V65, P85, DOI 10.1016/S0019-9958(85)80001-2
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   Staton S, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P525, DOI 10.1145/2933575.2935313
   Stein EM., 2009, Real Analysis: Measure Theory, Integration, and Hilbert Spaces, DOI [10.2307/j.ctvd58v18, DOI 10.2307/J.CTVD58V18]
   Stuhlmüller A, 2014, COGN SYST RES, V28, P80, DOI 10.1016/j.cogsys.2013.07.003
   Stuhlmuller Andreas, 2012, ARXIV12063555
   Sutton RS, 2018, ADAPT COMPUT MACH LE, P1
   Szymczak Marcin, 2019, INT SCH ENG TRUSTWOR, DOI [10.1007/978-3-030-55089-9_3, DOI 10.1007/978-3-030-55089-9_3]
   TAO T., 2011, INTRO MEASURE THEORY, V126, DOI DOI 10.1090/GSM/126
   Tavares Z., 2019, ARXIV190310556
   Tolpin David, 2021, ARXIV201000282
   Wand M., 1998, LISP SYMBOLIC COMPUT, V10, P189, DOI DOI 10.1023/A:1007720632734
   Wand M, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236782
   Zhang Yizhou, 2021, CS202102 U WAT SCH C
NR 47
TC 14
Z9 14
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 16
DI 10.1145/3498677
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900017
OA gold
DA 2024-07-18
ER

PT J
AU Astorga, A
   Saha, S
   Dinkins, A
   Wang, F
   Madhusudan, P
   Xie, T
AF Astorga, Angello
   Saha, Shambwaditya
   Dinkins, Ahmad
   Wang, Felicia
   Madhusudan, P.
   Xie, Tao
TI Synthesizing Contracts Correct Modulo a Test Generator
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Specification Mining; Data-Driven Inference; Synthesis; Software
   Testing; One-Class Classification
AB We present an approach to learn contracts for object-oriented programs where guarantees of correctness of the contracts are made with respect to a test generator. Our contract synthesis approach is based on a novel notion of tight contracts and an online learning algorithm that works in tandem with a test generator to synthesize tight contracts. We implement our approach in a tool called Precis and evaluate it on a suite of programs written in C#, studying the safety and strength of the synthesized contracts, and compare them to those synthesized by DAIKON.
C1 [Astorga, Angello; Dinkins, Ahmad; Wang, Felicia; Madhusudan, P.] Univ Illinois, Champaign, IL 61820 USA.
   [Saha, Shambwaditya] Tufts Univ, Medford, MA 02155 USA.
   [Xie, Tao] Peking Univ, Beijing, Peoples R China.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   Tufts University; Peking University
RP Astorga, A (corresponding author), Univ Illinois, Champaign, IL 61820 USA.
EM aastorg2@illinois.edu; shambwaditya_saha@tufts.edu;
   ahmadid2@illinois.edu; felicia5@illinois.edu; madhu@illinois.edu;
   taoxie@pku.edu.cn
OI Parthasarathy, Madhusudan/0000-0002-9782-721X; Astorga,
   Angello/0000-0002-7996-4798; Xie, Tao/0000-0002-6731-216X
FU NSF [CCF-1816615]; Amazon; GEM fellowship; Discovery Partner's Institute
   (DPI) science team seed grant
FX This work is supported in part by NSF under grant no. CCF-1816615, a
   research grant from Amazon, a Discovery Partner's Institute (DPI)
   science team seed grant, and the GEM fellowship. We thank the anonymous
   reviewers for their valuable reviews and comments.
CR Alur R, 2005, ACM SIGPLAN NOTICES, V40, P98, DOI 10.1145/1047659.1040314
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Ammons G, 2002, ACM SIGPLAN NOTICES, V37, P4, DOI 10.1145/565816.503275
   [Anonymous], 2000, THESIS U WASHINGTON
   [Anonymous], 2005, P 10 EUROPEAN SOFTWA, DOI [10.1145/1095430.1081713, DOI 10.1145/1095430.1081713]
   [Anonymous], 2011, Proceedings of the 2011 International Symposium on Software Testing and Analysis, ISSTA'11
   Astorga A, 2018, I C DEPEND SYS NETWO, P678, DOI 10.1109/DSN.2018.00074
   Astorga Angello, 2019, P 40 ACM SIGPL C, DOI [10.1145/3314221.3314641, DOI 10.1145/3314221.3314641]
   BARNETT M, 2004, LNCS, V3362, P49, DOI [DOI 10.1007/978-3-540-30569-9_3, 10.1007]
   Betts A, 2012, ACM SIGPLAN NOTICES, V47, P113, DOI 10.1145/2398857.2384625
   Chen F, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P569
   Churchill B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1027, DOI 10.1145/3314221.3314596
   Cousot P, 2013, LECT NOTES COMPUT SC, V7737, P128
   Csallner C, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P281, DOI 10.1145/1368088.1368127
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DeFreez D, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P466, DOI 10.1145/3338906.3338960
   Dillig I, 2013, ACM SIGPLAN NOTICES, V48, P443, DOI [10.1145/2509136.2509511, 10.1145/2544173.2509511]
   Dodoo Nii, 2003, MITLCSTR914
   Ernst M. D., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P213, DOI 10.1109/ICSE.1999.841011
   Ezudheen P, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276501
   Fähndrich M, 2010, LECT NOTES COMPUT SC, V6337, P2, DOI 10.1007/978-3-642-15769-1_2
   FLOYD RW, 1960, COMMUN ACM, V3, P170, DOI 10.1145/367149.367170
   Garg P, 2016, ACM SIGPLAN NOTICES, V51, P499, DOI 10.1145/2914770.2837664
   Gligoric M., 2010, P 32 ACM IEEE INT C, P225, DOI 10.1145/1806799.1806835
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jahangirova G., 2016, INT S SOFTWARE TESTI, P247
   Le TC, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P788, DOI 10.1145/3314221.3314634
   Leavens Gary T, 2006, SIGSOFT Softw. Eng. Notes, V31, P1, DOI [10.1145/1127878.1127884, DOI 10.1145/1127878.1127884]
   Meyer B., 1988, Object-Oriented Software Construction
   Mitchell T. M, 1997, Mach Learn, V1
   Molina F, 2021, PROC INT CONF SOFTW, P1223, DOI 10.1109/ICSE43902.2021.00112
   Moya MM, 1996, NEURAL NETWORKS, V9, P463, DOI 10.1016/0893-6080(95)00120-4
   Neider D, 2016, LECT NOTES COMPUT SC, V9636, P186, DOI 10.1007/978-3-662-49674-9_11
   Newcomb JL, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428234
   Nie PY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428285
   Pacheco Carlos, 2007, COMPANION 22 ACM SIG, P815, DOI DOI 10.1145/1297846.1297902
   Padhi S, 2016, ACM SIGPLAN NOTICES, V51, P42, DOI [10.1145/2908080.2908099, 10.1145/2980983.2908099]
   Pandita R, 2012, PROC INT CONF SOFTW, P815, DOI 10.1109/ICSE.2012.6227137
   Polikarpova N, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P93
   Reynolds A, 2019, LECT NOTES COMPUT SC, V11562, P74, DOI 10.1007/978-3-030-25543-5_5
   Schiller TW, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P596, DOI 10.1145/2568225.2568285
   SPIVEY JM, 1988, UNDERSTANDING Z SPEC
   Tao Xie, 2006, 28th International Conference on Software Engineering Proceedings, P835
   Terragni V, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P1178, DOI 10.1145/3368089.3409758
   Tillmann N, 2008, LECT NOTES COMPUT SC, V4966, P134
   Whaley J., 2002, Software Engineering Notes, V27, P221, DOI 10.1145/566171.566212
   Zhai J, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P25, DOI 10.1145/3368089.3409716
   Zhu H, 2018, ACM SIGPLAN NOTICES, V53, P707, DOI [10.1145/3192366.3192416, 10.1145/3296979.3192416]
NR 49
TC 4
Z9 4
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 104
DI 10.1145/3485481
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200008
OA gold
DA 2024-07-18
ER

PT J
AU Goel, A
   Jecmen, J
   Krynski, S
   Flückiger, O
   Vitek, J
AF Goel, Aviral
   Jecmen, Jan
   Krynski, Sebastian
   Fluckiger, Olivier
   Vitek, Jan
TI Promises Are Made to Be Broken Migrating R to Strict Semantics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE R language; delayed or lazy evaluation
AB Function calls in the R language do not evaluate their arguments, these are passed to the callee as suspended computations and evaluated if needed. After 25 years of experience with the language, there are very few cases where programmers leverage delayed evaluation intentionally and laziness comes at a price in performance and complexity. This paper explores how to evolve the semantics of a lazy language towards strictness-by-default and laziness-on-demand. To provide a migration path, it is necessary to provide tooling for developers to migrate libraries without introducing errors. This paper reports on a dynamic analysis that infers strictness signatures for functions to capture both intentional and accidental laziness. Over 99% of the inferred signatures were correct when tested against clients of the libraries.
C1 [Goel, Aviral; Fluckiger, Olivier; Vitek, Jan] Northeastern Univ, Boston, MA 02115 USA.
   [Jecmen, Jan; Krynski, Sebastian; Vitek, Jan] Czech Tech Univ, Prague, Czech Republic.
C3 Northeastern University; Czech Technical University Prague
RP Goel, A (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
RI Vitek, Jan/J-9051-2014
OI Vitek, Jan/0000-0003-4052-3458; Goel, Aviral/0000-0002-0814-5015;
   Fluckiger, Olivier/0000-0003-0512-9607
FU National Science Foundation [1759736, 1544542, 1925644, 1910850]; Czech
   Ministry of Education, Youth and Sports from the Czech Operational
   Programme Research, Development, and Education
   [CZ.02.1.01/0.0/0.0/15_003/0000421]; European Research Council (ERC)
   under the European Union [695412]; Direct For Computer & Info Scie &
   Enginr; Division of Computing and Communication Foundations [1544542]
   Funding Source: National Science Foundation; Direct For Computer & Info
   Scie & Enginr; Division of Computing and Communication Foundations
   [1910850] Funding Source: National Science Foundation; Division Of
   Computer and Network Systems; Direct For Computer & Info Scie & Enginr
   [1925644] Funding Source: National Science Foundation; Div Of Biological
   Infrastructure; Direct For Biological Sciences [1759736] Funding Source:
   National Science Foundation
FX This work has received funding from the National Science Foundation
   awards 1759736, 1544542, 1925644, and 1910850, the Czech Ministry of
   Education, Youth and Sports from the Czech Operational Programme
   Research, Development, and Education, under grant agreement No.
   CZ.02.1.01/0.0/0.0/15_003/0000421, and the European Research Council
   (ERC) under the European Union's Horizon 2020 research and innovation
   programme, under grant agreement No. 695412.
CR Aggarwal Karan, 2015, PeerJ Prepr., V3
   Becker R. A, 1988, NEW S LANGUAGE
   Chang Stephen, 2014, PROFILING LAZINESS, V49, P1, DOI [10.1145/2578855.2535887, DOI 10.1145/2578855.2535887]
   Collie B, 2020, IEEE INT CONF AUTOM, P90, DOI 10.1145/3324884.3416618
   Ennals R, 2003, ACM SIGPLAN NOTICES, V38, P287, DOI 10.1145/944746.944731
   Fazzini M, 2020, 2020 IEEE/ACM 7TH INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS, MOBILESOFT, P77, DOI 10.1145/3387905.3388608
   Flückiger O, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428288
   Flückiger O, 2019, PROCEEDINGS OF THE 15TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES (DLS '19), P55, DOI 10.1145/3359619.3359744
   Goel A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360579
   Ihaka R., 1996, J COMPUTATIONAL GRAP, V5, P299, DOI [DOI 10.1080/10618600.1996.10474713, 10.2307/1390807, DOI 10.2307/1390807]
   Jones Simon Peyton, 1993, GLASGOWWORKSHOP FUNC, DOI [10.1007/978-1-4471-3236-3_17, DOI 10.1007/978-1-4471-3236-3_17]
   Jones SLP, 1998, SCI COMPUT PROGRAM, V32, P3, DOI 10.1016/S0167-6423(97)00029-4
   Ligges Uwe., 2017, USER C
   Morandat F, 2012, LECT NOTES COMPUT SC, V7313, P104, DOI 10.1007/978-3-642-31057-7_6
   Okasaki C., 1995, Journal of Functional Programming, V5, P583, DOI 10.1017/S0956796800001489
   Pradel Michael, 2020, TYPEWRITER NEURAL TY, DOI [10.1145/3368089.3409715, DOI 10.1145/3368089.3409715]
   Stadler Lukas, 2017, ACM SIGPLAN Notices, V52, P84, DOI 10.1145/3093334.2989236
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Turcotte A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428249
   Wang YR, 2016, ACM SIGPLAN NOTICES, V51, P114, DOI 10.1145/3241625.2976009
   Wirfs-Brock A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3386327
   Xu SZ, 2019, INT C PROGRAM COMPRE, P335, DOI 10.1109/ICPC.2019.00052
NR 22
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 101
DI 10.1145/3485478
PG 20
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200005
OA gold
DA 2024-07-18
ER

PT J
AU Henry, R
   Hsu, O
   Yadav, R
   Chou, S
   Olukotun, K
   Amarasinghe, S
   Kjolstad, F
AF Henry, Rawn
   Hsu, Olivia
   Yadav, Rohan
   Chou, Stephen
   Olukotun, Kunle
   Amarasinghe, Saman
   Kjolstad, Fredrik
TI Compilation of Sparse Array Programming Models
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Sparse Array Programming; Sparse Arrays; Compilation
AB This paper shows how to compile sparse array programming languages. A sparse array programming language is an array programming language that supports element-wise application, reduction, and broadcasting of arbitrary functions over dense and sparse arrays with any fill value. Such a language has great expressive power and can express sparse and dense linear and tensor algebra, functions over images, exclusion and inclusion filters, and even graph algorithms.
   Our compiler strategy generalizes prior work in the literature on sparse tensor algebra compilation to support any function applied to sparse arrays, instead of only addition and multiplication. To achieve this, we generalize the notion of sparse iteration spaces beyond intersections and unions. These iteration spaces are automatically derived by considering how algebraic properties annotated onto functions interact with the fill values of the arrays. We then show how to compile these iteration spaces to efficient code.
   When compared with two widely-used Python sparse array packages, our evaluation shows that we generate built-in sparse array library features with a performance of 1.4x to 53.7x when measured against PyData/Sparse for user-defined functions and between 0.98x and 5.53x when measured against SciPy/Sparse for sparse array slicing. Our technique outperforms PyData/Sparse by 6.58x to 70.3x, and (where applicable) performs between 0.96x and 28.9x that of a dense NumPy implementation, on end-to-end sparse array applications. We also implement graph linear algebra kernels in our system with a performance of between 0.56x and 3.50x compared to that of the hand-optimized SuiteSparse:GraphBLAS library.
C1 [Henry, Rawn; Chou, Stephen; Amarasinghe, Saman] MIT, 32 Vassar St, Cambridge, MA 02139 USA.
   [Hsu, Olivia; Yadav, Rohan; Olukotun, Kunle; Kjolstad, Fredrik] Stanford Univ, 353 Jane Stanford Way, Stanford, CA 94305 USA.
C3 Massachusetts Institute of Technology (MIT); Stanford University
RP Henry, R (corresponding author), MIT, 32 Vassar St, Cambridge, MA 02139 USA.
EM rawn@mit.edu; owhsu@stanford.edu; rohany@cs.stanford.edu;
   s3chou@csail.mit.edu; kunle@stanford.edu; saman@csail.wit.edu;
   kjolstad@stanford.edu
OI Hsu, Olivia/0000-0002-4195-8106; Olukotun, Kunle/0000-0002-8779-0636;
   Yadav, Rohan/0000-0003-0746-066X; Kjolstad, Fredrik
   Berg/0000-0002-2267-903X
FU NSF GRFP Fellowship; Application Driving Architectures (ADA) Research
   Center, a JUMP Center; SRC; DARPA [HR0011-18-3-0007, HR0011-20-9-0017];
   U.S. Department of Energy, Office of Science, Office of Advanced
   Scientific Computing Research [DE-SC0008923, DE-SC0018121]; NSF
   [1937301, 2028602, CCF-1563078, 1563113]; Stanford Data Analytics for
   What's Next (DAWN) Affiliate Program; Facebook; Google; VMware; DARPA;
   U.S. Department of Energy (DOE) [DE-SC0018121] Funding Source: U.S.
   Department of Energy (DOE); Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [1563113] Funding
   Source: National Science Foundation; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [2028602] Funding Source: National Science Foundation
FX We thank Alex Aiken, Axel Feldmann, Charles Yuan, Aviral Pandey, and
   Peter Ahrens for their helpful feedback. Olivia Hsu and Rohan Yadav were
   supported by an NSF GRFP Fellowship. This work was supported in part by
   the Application Driving Architectures (ADA) Research Center, a JUMP
   Center co-sponsored by SRC and DARPA; the U.S. Department of Energy,
   Office of Science, Office of Advanced Scientific Computing Research
   under Award Numbers DE-SC0008923 and DE-SC0018121; DARPA under Awards
   HR0011-18-3-0007 and HR0011-20-9-0017; and NSF under Grant Numbers
   1937301, 2028602, CCF-1563078, 1563113. This research was also supported
   in part by a Google Research Scholar and the Stanford Data Analytics for
   What's Next (DAWN) Affiliate ProgramDwith affiliate members Ant
   Financial, Facebook, Google, and VMware. Any opinions, findings, and
   conclusions or recommendations expressed in this material are those of
   the authors and do not necessarily reflect the views of the
   aforementioned funding agencies.
CR Abadi M, ARXIV, DOI DOI 10.48550/ARXIV.1603.04467
   Abbasi Hameer, 2018, P 17 PYTHON SCI C, P27
   [Anonymous], 2015, ARXIV151200066
   Backus J. W., 1957, Papers presented at the February 26-28, 1957, western joint computer conference: Techniques for reliability, P188
   Bader BW, 2007, SIAM J SCI COMPUT, V30, P205, DOI 10.1137/060676489
   Bik A. J., 1993, P 7 INT C SUP, P416
   Chakrabarty N, 2019, Brain MRI Images for Brain Tumor Detection
   Chou S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P823, DOI 10.1145/3385412.3385963
   Chou S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276493
   Davis TA, 2011, ACM T MATH SOFTWARE, V38, DOI 10.1145/2049662.2049663
   Davis TA, 2019, ACM T MATH SOFTWARE, V45, DOI 10.1145/3322125
   Harris CR, 2020, NATURE, V585, P357, DOI 10.1038/s41586-020-2649-2
   Hu YM, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3355089.3356506
   Huang S, 2006, J DIGIT IMAGING, V19, P17, DOI 10.1007/s10278-005-9247-6
   Iverson Kenneth E, 1962, Proceedings of the May 1-3, 1962, spring joint computer conference, P345, DOI DOI 10.1145/1460833.1460872
   Kepner J, 2011, SOFTW ENVIRON TOOLS, V22, P1, DOI 10.1137/1.9780898719918
   Kepner J., 2016, 2016 IEEE HIGH PERF, P1
   Kim J., 2000, ACM INT C P SERIES, V9, P89
   Kjolstad F, 2019, INT SYM CODE GENER, P180, DOI [10.1109/cgo.2019.8661185, 10.1109/CGO.2019.8661185]
   Kjolstad F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133901
   Kjulstad Fredrik Berg., 2020, THESIS MIT
   Kotlyar V., 1997, Euro-Par '97 Parallel Processing. Third International Euro-Par Conference. Proceedings, P318
   LAMPORT L, 1974, COMMUN ACM, V17, P83, DOI 10.1145/360827.360844
   Lin Calvin, 1993, INT WORKSH LANG COMP, P96
   Mattson T, 2013, IEEE HIGH PERF EXTR
   Paszke A, 2019, ADV NEUR IN, V32
   SciPy, 2021, SCIPY ROADM V1 6 2
   Senanayake R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428226
   Smith Shaden, 2017, FROSTT: The formidable repository of open sparse tensors and tools
   Somkantha K, 2011, IEEE T BIO-MED ENG, V58, P567, DOI 10.1109/TBME.2010.2091129
   Venkat A, 2015, ACM SIGPLAN NOTICES, V50, P521, DOI [10.1145/2813885.2738003, 10.1145/2737924.2738003]
   Virtanen P, 2020, NAT METHODS, V17, P261, DOI 10.1038/s41592-019-0686-2
   Wollny G, 2013, SOURCE CODE BIOL MED, V8, DOI 10.1186/1751-0473-8-20
NR 33
TC 10
Z9 12
U1 1
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 128
DI 10.1145/3485505
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200032
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Kazerounian, M
   Foster, JS
   Min, BN
AF Kazerounian, Milod
   Foster, Jeffrey S.
   Min, Bonan
TI SimTyper: Sound Type Inference for Ruby using Type Equality Prediction
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type inference; dynamic languages; machine learning; Ruby
AB Many researchers have explored type inference for dynamic languages. However, traditional type inference computes most general types which, for complex type systems-which are often needed to type dynamic languages-can be verbose, complex, and difficult to understand. In this paper, we introduce SIMTYPER, a Ruby type inference system that aims to infer usable types-specifically, nominal and generic types-that match the types programmers write. SIMTYPER builds on InferDL, a recent Ruby type inference system that soundly combines standard type inference with heuristics. The key novelty of SIMTYPER is type equality prediction, a new, machine learning-based technique that predicts when method arguments or returns are likely to have the same type. SIMTYPER finds pairs of positions that are predicted to have the same type yet one has a verbose, overly general solution and the other has a usable solution. It then guesses the two types are equal, keeping the guess if it is consistent with the rest of the program, and discarding it if not. In this way, types inferred by SIMTYPER are guaranteed to be sound. To perform type equality prediction, we introduce the deep similarity (DeepSim) neural network. DeepSim is a novel machine learning classifier that follows the Siamese network architecture and uses CodeBERT, a pre-trained model, to embed source tokens into vectors that capture tokens and their contexts. DeepSim is trained on 100,000 pairs labeled with type similarity information extracted from 371 Ruby programs with manually documented, but not checked, types. We evaluated SIMTYPER on eight Ruby programs and found that, compared to standard type inference, SIMTYPER finds 69% more types that match programmer-written type information. Moreover, DeepSim can predict rare types that appear neither in the Ruby standard library nor in the training data. Our results show that type equality prediction can help type inference systems effectively produce more usable types.
C1 [Kazerounian, Milod] Univ Maryland, College Pk, MD 20742 USA.
   [Foster, Jeffrey S.] Tufts Univ, Medford, MA 02155 USA.
   [Min, Bonan] Raytheon BBN Technol, Cambridge, MA 02138 USA.
C3 University System of Maryland; University of Maryland College Park;
   Tufts University; Raytheon Technologies; Raytheon BBN Technologies
RP Kazerounian, M (corresponding author), Univ Maryland, College Pk, MD 20742 USA.
EM milod@cs.umd.edu; jfoster@cs.tufts.edu; bonan.min@raytheon.com
FU NSF [CCF-1918233, DGE-1840340]; IARPA BETTER Program [2019-19051600006]
FX We thank the anonymous reviewers for their helpful comments. This
   research was supported in part by NSF grants CCF-1918233 and
   DGE-1840340, by the IARPA BETTER Program via Contract No.:
   2019-19051600006.
CR Aiken A., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P163, DOI 10.1145/174675.177847
   Aiken Alexander., 1991, POPL 91, P279, DOI DOI 10.1145/99583.99621
   Allamanis M, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P91, DOI 10.1145/3385412.3385997
   Anderson C, 2005, LECT NOTES COMPUT SC, V3586, P428
   Brown T., 2020, P ADV NEUR INF PROC, V33, P1877
   Budin Nat, 2021, JOURNEY ONLINE QUEST
   CARTWRIGHT R, 1991, SIGPLAN NOTICES, V26, P278, DOI 10.1145/113446.113469
   Civilized Discourse Construction Kit Inc, 2021, DISC PLATF COMM DISC
   Code.org,, 2021, COD POW COD ORG STUD
   CURRY H, 1968, COMBINATORY LOGIC, V1
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Emmons Shane, 2021, MONEY
   Feng Z., 2020, EMNLP
   Flanagan C, 1997, ACM SIGPLAN NOTICES, V32, P235, DOI 10.1145/258916.258937
   Foster Jeffrey, 2018, RDL TYPES TYPE CHECK
   Foster Jeffrey S., 2021, TALKS
   Furr Michael, 2009, P 2009 ACM S APPL CO, P1859
   Hackett B, 2012, ACM SIGPLAN NOTICES, V47, P239, DOI 10.1145/2345156.2254094
   Hellendoorn VJ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P152, DOI 10.1145/3236024.3236051
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Hinnant Howard., 2013, chrono-compatible low-level date algorithms
   John Aycock, 2000, AGGRESSIVE TYPE INFE
   Kanade Aditya, 2020, PMLR, V119
   Kazerounian M, 2020, DLS '2020: PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES, P112, DOI 10.1145/3426422.3426985
   Kazerounian M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P966, DOI 10.1145/3314221.3314630
   Kazerounian Milod, **DATA OBJECT**, DOI 10.5281/zenodo.5449078
   Kazerounian Milod, 2021, COMMUNICATION
   Kingma D. P., 2014, arXiv
   Lerner BS, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2508168.2508170
   Malik RS, 2019, PROC INT CONF SOFTW, P304, DOI 10.1109/ICSE.2019.00045
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Petrashko Dmitry, 2020, COMMUNICATION
   Postmodern, 2021, RON
   Pottier F, 1999, ACM SIGPLAN NOTICES, V34, P228, DOI 10.1145/291251.289448
   Pradel Michael, 2019, ARXIV PREPRINT ARXIV
   Raychev V, 2015, ACM SIGPLAN NOTICES, V50, P111, DOI [10.1145/2775051.2677009, 10.1145/2676726.2677009]
   Reimers N, 2019, 2019 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING AND THE 9TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING (EMNLP-IJCNLP 2019), P3982
   Ren BM, 2016, ACM SIGPLAN NOTICES, V51, P462, DOI [10.1145/2980983.2908127, 10.1145/2908080.2908127]
   Ross Phil, 2021, TZINFO
   Segal Loren., 2020, Yard: Yay! a ruby documentation tool
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Strickland TS, 2015, ACM SIGPLAN NOTICES, V50, P23, DOI 10.1145/2661088.2661092
   Stripe, 2020, SORB STAT TYP CHECK
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Vaswani A, 2017, ADV NEUR IN, V30
   Vitousek MM, 2015, ACM SIGPLAN NOTICES, V50, P45, DOI 10.1145/2661088.2661101
   Wright AK, 1997, ACM T PROGR LANG SYS, V19, P87, DOI 10.1145/239912.239917
NR 47
TC 6
Z9 7
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 106
DI 10.1145/3485483
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200010
OA gold
DA 2024-07-18
ER

PT J
AU Lanzinger, F
   Weigl, A
   Ulbrich, M
   Dietl, W
AF Lanzinger, Florian
   Weigl, Alexander
   Ulbrich, Mattias
   Dietl, Werner
TI Scalability and Precision by Combining Expressive Type Systems and
   Deductive Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Pluggable type systems; Deductive verification; Refinement types
AB Type systems and modern type checkers can be used very successfully to obtain formal correctness guarantees with little specification overhead. However, type systems in practical scenarios have to trade precision for decidability and scalability. Tools for deductive verification, on the other hand, can prove general properties in more cases than a typical type checker can, but they do not scale well. We present a method to complement the scalability of expressive type systems with the precision of deductive program verification approaches. This is achieved by translating the type uses whose correctness the type checker cannot prove into assertions in a specification language, which can be dealt with by a deductive verification tool. Type uses whose correctness the type checker can prove are instead turned into assumptions to aid the verification tool in finding a proof. Our novel approach is introduced both conceptually for a simple imperative language, and practically by a concrete implementation for the Java programming language. The usefulness and power of our approach has been evaluated by discharging known false positives from a real-world program and by a small case study.
C1 [Lanzinger, Florian; Weigl, Alexander; Ulbrich, Mattias] Karlsruhe Inst Technol, Fasanengarten 5, Karlsruhe, BW, Germany.
   [Dietl, Werner] Univ Waterloo, 200 Univ Ave W, Waterloo, ON, Canada.
C3 Helmholtz Association; Karlsruhe Institute of Technology; University of
   Waterloo
RP Lanzinger, F (corresponding author), Karlsruhe Inst Technol, Fasanengarten 5, Karlsruhe, BW, Germany.
EM lanzinger@kit.edu; weigl@kit.edu; ulbrich@kit.edu; wdietl@uwaterloo.ca
OI Weigl, Alexander/0000-0001-8446-4598; Ulbrich,
   Mattias/0000-0002-2350-1831; Lanzinger, Florian/0000-0001-8560-6324
FU topic Engineering Secure Systems of the Helmholtz Association (HGF);
   KASTEL Security Research Labs; Natural Sciences and Engineering Research
   Council of Canada (NSERC) Discovery Grants program [RGPIN-2020-05502];
   Early Researcher Award from the Government of Ontario
FX This work was supported by funding from the topic Engineering Secure
   Systems of the Helmholtz Association (HGF) and by KASTEL Security
   Research Labs.; We also acknowledge the support of the Natural Sciences
   and Engineering Research Council of Canada (NSERC) Discovery Grants
   program, RGPIN-2020-05502, and an Early Researcher Award from the
   Government of Ontario. The views and conclusions contained herein are
   those of the authors and should not be interpreted as necessarily
   representing the official policies or endorsements, either expressed or
   implied, of NSERC or the Governments of Ontario or Canada.
CR Ahrendt W., 2016, LNCS, V10001, DOI DOI 10.1007/978-3-319-49812-6
   [Anonymous], 1980, Essays on Combinatory Logic, Lambda Calculus and Formalism
   Bertot Y., 2004, TEXT THEORET COMP S
   Bracha Gilad, 2004, OOPSLA WORKSH REV DY
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Checker Framework developers, 2020, CHECK FRAM MAN
   Cheon Yoonsik., 2002, Proceedings of the International Conference on Software Engineering Research and Practice (SERP'02), P322
   Chin B, 2005, ACM SIGPLAN NOTICES, V40, P85, DOI 10.1145/1064978.1065022
   Chlipala Adam., 2017, Certified Programming with Dependent Types
   Clarke Dave, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P15, DOI 10.1007/978-3-642-36946-9_3
   Cok DR, 2011, LECT NOTES COMPUT SC, V6617, P472, DOI 10.1007/978-3-642-20398-5_35
   Dietl W, 2011, LECT NOTES COMPUT SC, V6813, P333, DOI 10.1007/978-3-642-22655-7_16
   Dietl W, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P681, DOI 10.1145/1985793.1985889
   Dietl Werner, 2012, ALIASING OBJECT ORIE, P289, DOI [10.1007/978-3-642-36946-9_11, DOI 10.1007/978-3-642-36946-9_11]
   Dietl Werner, 2004, J OBJECT TECHNOLOGY
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Huang W, 2012, ACM SIGPLAN NOTICES, V47, P879, DOI 10.1145/2398857.2384680
   Intermetrics Inc, 2016, AD REF MAN
   Jhala R, 2017, PROGRAMMING REFINEME
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Knowles K, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667051
   Lanzinger Florian, 2021, THESIS KARLSRUHER I
   Lanzinger Florian, Property Checker s Scalability and Precision by Combining Expressive Type Systems and Deductive Verification, DOI 10.5281/zenodo.5483138
   Leino KRM, 2017, IEEE SOFTWARE, V34, P94
   Mandelbaum Y, 2003, ACM SIGPLAN NOTICES, V38, P213, DOI 10.1145/944746.944725
   Markstrum S, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667049
   Morling Gunnar, 2019, BEAN VALIDATION SPEC
   Okasaki C, 1995, J FUNCT PROGRAM, V5, P583, DOI DOI 10.1017/S0956796800001489
   Papi Matthew M., 2008, INT S SOFT TEST AN I, P201
   Potanin Alex, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P233, DOI 10.1007/978-3-642-36946-9_9
   Rudich A, 2008, LECT NOTES COMPUT SC, V5014, P68, DOI 10.1007/978-3-540-68237-0_7
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   Stump Aaron, 2006, 13 INT WORKSH FDN DE
   Summers AJ, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P1013
   Toman J, 2020, LECT NOTES COMPUT SC, V12075, P684, DOI 10.1007/978-3-030-44914-8_25
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Xiang TT, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428210
NR 38
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 143
DI 10.1145/3485520
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200046
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Baumann, P
   Majumdar, R
   Thinniyam, RS
   Zetzsche, G
AF Baumann, Pascal
   Majumdar, Rupak
   Thinniyam, Ramanathan S.
   Zetzsche, Georg
TI Context-Bounded Verification of Liveness Properties for Multithreaded
   Shared-Memory Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE verification; liveness; multithreaded programs; decidability;
   computational complexity
ID CONCURRENT PROGRAMS; DECIDABILITY
AB We study context-bounded verification of liveness properties of multi-threaded, shared-memory programs, where each thread can spawn additional threads. Our main result shows that context-bounded fair termination is decidable for the model; context-bounded implies that each spawned thread can be context switched a fixed constant number of times. Our proof is technical, since fair termination requires reasoning about the composition of unboundedly many threads each with unboundedly large stacks. In fact, techniques for related problems, which depend crucially on replacing the pushdown threads with finite-state threads, are not applicable. Instead, we introduce an extension of vector addition systems with states (VASS), called VASS with balloons (VASSB), as an intermediate model; it is an infinite-state model of independent interest. A VASSB allows tokens that are themselves markings (balloons). We show that context bounded fair termination reduces to fair termination for VASSB. We show the latter problem is decidable by showing a series of reductions: from fair termination to configuration reachability for VASSB and thence to the reachability problem for VASS. For a lower bound, fair termination is known to be non-elementary already in the special case where threads run to completion (no context switches).
   We also show that the simpler problem of context-bounded termination is 2EXPSPACE-complete, matching the complexity boundDand indeed the techniquesDfor safety verification. Additionally, we show the related problem of fair starvation, which checks if some thread can be starved along a fair run, is also decidable in the context-bounded case. The decidability employs an intricate reduction from fair starvation to fair termination. Like fair termination, this problem is also non-elementary.
C1 [Baumann, Pascal; Majumdar, Rupak; Thinniyam, Ramanathan S.; Zetzsche, Georg] Max Planck Inst Software Syst MPI SWS, Paul Ehrlich Str,Bldg G26, D-67663 Kaiserslautern, Germany.
C3 Max Planck Society
RP Baumann, P (corresponding author), Max Planck Inst Software Syst MPI SWS, Paul Ehrlich Str,Bldg G26, D-67663 Kaiserslautern, Germany.
EM pbaumann@mpi-sws.org; rupak@mpi-sws.org; thinniyam@mpi-sws.org;
   georg@mpi-sws.org
RI Thinniyam Srinivasan, Ramanathan/KVB-6618-2024; Zetzsche,
   Georg/I-5335-2018
OI Thinniyam Srinivasan, Ramanathan/0000-0002-9926-0931; Zetzsche,
   Georg/0000-0002-6421-4388; Baumann, Pascal/0000-0002-9371-0807
FU Deutsche Forschungsgemeinschaft [389792660 TRR 248sCPEC]; European
   Research Council [610150]
FX This research was sponsored in part by the Deutsche
   Forschungsgemeinschaft project 389792660 TRR 248sCPEC and by the
   European Research Council under the Grant Agreement 610150
   (http://www.impact-erc.eu/) (ERC Synergy Grant ImPACT).
CR Abdulla PA, 1996, IEEE S LOG, P313, DOI 10.1109/LICS.1996.561359
   [Anonymous], 1981, P STOC, DOI DOI 10.1145/800076.802477
   [Anonymous], 1982, PROC STOC 1982, DOI [10.1145/800070.802201, DOI 10.1145/800070.802201]
   Apt K.R., 1991, VERIFICATION SEQUENT
   Atig Mohamed Faouzi, 2017, Networked Systems. 5th International Conference, NETYS 2017. Proceedings: LNCS 10299, P272, DOI 10.1007/978-3-319-59647-1_21
   Atig Mohamed Faouzi, 2012, Automated Technology for Verification and Analysis. Proceedings of the 10th International Symposium, ATVA 2012, P152, DOI 10.1007/978-3-642-33386-6_13
   Atig Mohamed Faouzi, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P210, DOI 10.1007/978-3-642-31424-7_19
   Atig MF, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(4:04)2011
   Atig MF, 2009, LECT NOTES COMPUT SC, V5505, P107, DOI 10.1007/978-3-642-00768-2_11
   Bachmeier Georg, 2015, Language and Automata Theory and Applications. 9th International Conference, LATA 2015. Proceedings: LNCS 8977, P473, DOI 10.1007/978-3-319-15579-1_37
   Baumann Pascal, 2020, ICALP, V168, P1
   Baumann Pascal, 2020, ARXIV201104581
   Buchi J. R., 1964, Archiv fur mathematische Logik und Grundlagenforschung, V6, P91, DOI DOI 10.1007/BF01969548
   CARSTENSEN H, 1987, LECT NOTES COMPUT SC, V247, P396
   Cook B, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P320, DOI 10.1145/1250734.1250771
   Cook B, 2011, COMMUN ACM, V54, P88, DOI 10.1145/1941487.1941509
   Courcelle B., 1991, Bull. EATCS, V44, P178
   Czerwinski W, 2019, ACM S THEORY COMPUT, P24, DOI 10.1145/3313276.3316369
   Durand-Gasselin A, 2017, FORM METHOD SYST DES, V50, P140, DOI 10.1007/s10703-016-0258-3
   Erd6s P., 1952, Proc. Lond. Math. Soc., V3, P417, DOI 10.1112/plms/s3-2.1.417
   Farzan A, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P185, DOI 10.1145/2933575.2935310
   Finkel A, 2001, THEOR COMPUT SCI, V256, P63, DOI 10.1016/S0304-3975(00)00102-X
   Fortin M, 2017, LECT NOTES COMPUT SC, V10427, P155, DOI 10.1007/978-3-319-63390-9_9
   Ganty P, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160915
   Haines Leonard H., 1969, Journal of Combinatorial Theory, V6, P94, DOI [DOI 10.1016/S0021-9800(69)80111-0, 10.1016/s0021-9800(69) 80111-0, 10.1016/S0021-9800(69)80111-0]
   HAREL D, 1986, J ACM, V33, P224, DOI 10.1145/4904.4993
   HOWELL RR, 1991, THEOR COMPUT SCI, V82, P341, DOI 10.1016/0304-3975(91)90228-T
   JANCAR P, 1990, THEOR COMPUT SCI, V74, P71, DOI 10.1016/0304-3975(90)90006-4
   Kahlon V, 2008, IEEE S LOG, P181, DOI 10.1109/LICS.2008.37
   Kragl B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P227, DOI 10.1145/3385412.3385980
   La Torre S, 2016, INT J FOUND COMPUT S, V27, P215, DOI 10.1142/S0129054116400074
   Lal A, 2008, LECT NOTES COMPUT SC, V4963, P282, DOI 10.1007/978-3-540-78800-3_20
   Lal A, 2009, FORM METHOD SYST DES, V35, P73, DOI 10.1007/s10703-009-0078-9
   Leroux J, 2015, LECT NOTES COMPUT SC, V9135, P324, DOI 10.1007/978-3-662-47666-6_26
   Lomazova IA, 2000, LECT NOTES COMPUT SC, V1755, P208
   Muscholl A, 2017, LECT NOTES COMPUT SC, V10145, P424, DOI 10.1007/978-3-319-52234-0_23
   Musuvathi M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P446, DOI 10.1145/1250734.1250785
   Padon Oded, 2018, POPL POPL, V26, P1
   PARIKH RJ, 1966, J ACM, V13, P570, DOI 10.1145/321356.321364
   Qadeer S, 2005, LECT NOTES COMPUT SC, V3440, P93
   Rackoff C., 1978, Theoretical Computer Science, V6, P223, DOI 10.1016/0304-3975(78)90036-1
   Ramalingam G, 2000, ACM T PROGR LANG SYS, V22, P416, DOI 10.1145/349214.349241
   Ramsey FP, 1930, P LOND MATH SOC, V30, P264, DOI 10.1112/plms/s2-30.1.264
   VARDI MY, 1991, ANN PURE APPL LOGIC, V51, P79, DOI 10.1016/0168-0072(91)90066-U
   Verma KN, 2005, DISCRETE MATH THEOR, V7, P217
   Zetzsche Georg, 2013, P ICALP P ICALP
NR 46
TC 6
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 44
DI 10.1145/3434325
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100044
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Farka, F
   Nanevski, A
   Banerjee, A
   Delbianco, GA
   Fábregas, I
AF Farka, Frantisek
   Nanevski, Aleksandar
   Banerjee, Anindya
   Delbianco, German Andres
   Fabregas, Ignacio
TI On Algebraic Abstractions for Concurrent Separation Logics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Logics for Concurrency; Hoare/Separation Logics; Coq
ID MEMORY
AB Concurrent separation logic is distinguished by transfer of state ownership upon parallel composition and framing. The algebraic structure that underpins ownership transfer is that of partial commutative monoids (PCMs). Extant research considers ownership transfer primarily from the logical perspective while comparatively less attention is drawn to the algebraic considerations. This paper provides an algebraic formalization of ownership transfer in concurrent separation logic by means of structure-preserving partial functions (i.e., morphisms) between PCMs, and an associated notion of separating relations. Morphisms of structures are a standard concept in algebra and category theory, but haven't seen ubiquitous use in separation logic before. Separating relations are binary relations that generalize disjointness and characterize the inputs on which morphisms preserve structure. The two abstractions facilitate verification by enabling concise ways of writing specs, by providing abstract views of threads' states that are preserved under ownership transfer, and by enabling user-level construction of new PCMs out of existing ones.
C1 [Farka, Frantisek; Nanevski, Aleksandar; Banerjee, Anindya] IMDEA Software Inst, Madrid, Spain.
   [Delbianco, German Andres] Nomadic Labs, Paris, France.
   [Fabregas, Ignacio] Univ Complutense Madrid, Madrid, Spain.
C3 IMDEA Software Institute; Complutense University of Madrid
RP Farka, F (corresponding author), IMDEA Software Inst, Madrid, Spain.
EM frantisek.farka@imdea.org; aleks.nanevski@imdea.org;
   anindya.banerjee@imdea.org; german@nomadic-labs.com; fabregas@fdi.ucm.es
RI Fabregas, Ignacio/W-4154-2017
OI Fabregas, Ignacio/0000-0002-3045-4180; Banerjee,
   Anindya/0000-0001-9979-1292; Nanevski, Aleksandar/0000-0002-4851-1075
FU Spanish MICINN project BOSCO [PGC2018-102210-B-I00]; European Research
   Council [ERC2016-COG-724464]; US National Science Foundation (NSF);
   Spanish MICINN project ProCode-UCM [PID2019-108528RB-C22]
FX We thank Gordon Stewart and Joe Tassarotti for their comments on various
   drafts of the paper. We thank the anonymous reviewers from the POPL'21
   PC and AEC for their feedback. This research was partially supported by
   the Spanish MICINN projects BOSCO (PGC2018-102210-B-I00) and ProCode-UCM
   (PID2019-108528RB-C22), the European Research Council project Mathador
   (ERC2016-COG-724464) and the US National Science Foundation (NSF). Any
   opinions, findings, and conclusions or recommendations expressed in the
   material are those of the authors and do not necessarily reflect the
   views of the funding agencies.
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Abramsky Samson, 1995, DOMAIN THEORY, P1
   Appel A.W., 2014, Program logics for certified compilers
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371089
   Batz K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290347
   Berdine J, 2005, LECT NOTES COMPUT SC, V3780, P52
   Bizjak A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290378
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Cao QX, 2017, LECT NOTES COMPUT SC, V10695, P190, DOI 10.1007/978-3-319-71237-6_10
   Cho KT, 2015, ELECTRON PROC THEOR, P116, DOI 10.4204/EPTCS.195.9
   Cho Kenta, 2015, ABS151205813 CORR
   COURTOIS PJ, 1971, COMMUN ACM, V14, P667, DOI 10.1145/362759.362813
   Delbianco German Andres, 2017, LIPICS, V74, DOI DOI 10.4230/LIPICS
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Farka F., 2021, PROC ACM PROGRAM LAN, V5, P1
   Farka Frantisek, 2020, ALGEBRAIC ABSTRACTIO
   Gotsman A, 2007, LECT NOTES COMPUT SC, V4807, P19
   Harper R., 2011, HOLY TRINITY
   Herlihy M., 2008, The Art of Multiprocessor Programming
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Hinrichsen J.K., 2020, PACMPL, V4, DOI 10.1145/3371074
   Hobor A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P171, DOI 10.1145/1706299.1706322
   Jacobs B, 2018, J LOG ALGEBR METHODS, V94, P200, DOI 10.1016/j.jlamp.2016.11.006
   Jensen J. B., 2012, ESOP
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Krebbers Robbert, 2015, THESIS RADBOUD U NIJ
   Krishnaswami N. R., 2012, ICFP
   LAMPORT L, 1974, COMMUN ACM, V17, P453, DOI 10.1145/361082.361093
   Ley-Wild R, 2013, ACM SIGPLAN NOTICES, V48, P561, DOI 10.1145/2480359.2429134
   Liao Kevin., 2020, Proc. ACM Program. Lang. 4, POPL, DOI 10.1145/3371123
   MELLORCRUMMEY JM, 1991, ACM T COMPUT SYST, V9, P21, DOI 10.1145/103727.103729
   Nanevski A, 2006, ACM SIGPLAN NOTICES, V41, P62, DOI 10.1145/1160074.1159812
   Nanevski A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360587
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Pym DJ, 2004, THEOR COMPUT SCI, V315, P257, DOI 10.1016/j.tcs.2003.11.020
   Sato T, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290351
   Sergey I, 2016, ACM SIGPLAN NOTICES, V51, P92, DOI 10.1145/3022671.2983999
   Sergey I, 2015, LECT NOTES COMPUT SC, V9032, P333, DOI 10.1007/978-3-662-46669-8_14
   Sergey I, 2015, ACM SIGPLAN NOTICES, V50, P77, DOI [10.1145/2813885.2737964, 10.1145/2737924.2737964]
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Svendsen K, 2013, LECT NOTES COMPUT SC, V7792, P169, DOI 10.1007/978-3-642-37036-6_11
   Swamy N, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409003
   Tassarotti J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290377
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Unruh D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290346
   Unruh Dominique., 2019, 34 ANN ACM IEEE S LO, P1, DOI [10.1109/LICS.2019, DOI 10.1109/LICS.2019]
NR 52
TC 5
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
DI 10.1145/3434286
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100005
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Ferles, K
   Stephens, J
   Dillig, I
AF Ferles, Kostas
   Stephens, Jon
   Dillig, Isil
TI Verifying Correct Usage of Context-Free API Protocols
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Context-Free API Protocols; Program Verification; Abstraction Refinement
ID POINTS-TO ANALYSIS; CHECKING; VERIFICATION; REFINEMENT
AB Several real-world libraries (e.g., reentrant locks, GUI frameworks, serialization libraries) require their clients to use the provided API in a manner that conforms to a context-free specification. Motivated by this observation, this paper describes a new technique for verifying the correct usage of context-free API protocols. The key idea underlying our technique is to over-approximate the program's feasible API call sequences using a context-free grammar (CFG) and then check language inclusion between this grammar and the specification. However, since this inclusion check may fail due to imprecision in the program's CFG abstraction, we propose a novel refinement technique to progressively improve the CFG. In particular, our method obtains counterexamples from CFG inclusion queries and uses them to introduce new non-terminals and productions to the grammar while still over-approximating the program's relevant behavior.
   We have implemented the proposed algorithm in a tool called CFPChecker and evaluate it on 10 popular Java applications that use at least one API with a context-free specification. Our evaluation shows that CFPChecker is able to verify correct usage of the API in clients that use it correctly and produces counterexamples for those that do not. We also compare our method against three relevant baselines and demonstrate that CFPChecker enables verification of safety properties that are beyond the reach of existing tools.
C1 [Ferles, Kostas; Stephens, Jon; Dillig, Isil] Univ Texas Austin, Austin, TX 78712 USA.
C3 University of Texas System; University of Texas Austin
RP Ferles, K (corresponding author), Univ Texas Austin, Austin, TX 78712 USA.
EM kferles@cs.utexas.edu; jon@cs.utexas.edu; isil@cs.utexas.edu
FU NSF [1453386]; DARPA Award [FA8750-20-C-0208]; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1453386] Funding Source: National Science Foundation
FX We would like to thank our shepherd Pierre Ganty, the anonymous
   reviewers, Kenneth McMillan, Swarat Chaudhuri, and the members of the
   UToPiA group for their insightful feedback. This work is supported in
   part by NSF Award #1453386 and DARPA Award #FA8750-20-C-0208.
CR Albarghouthi A, 2013, LECT NOTES COMPUT SC, V7795, P637, DOI 10.1007/978-3-642-36742-7_52
   Aldrich J., 2009, OOPSLA COMPANION, P1015, DOI DOI 10.1145/1639950
   Allan C, 2005, ACM SIGPLAN NOTICES, V40, P345, DOI 10.1145/1103845.1094839
   Alur R., 2004, P 36 ANN ACM S THEOR, P202, DOI [DOI 10.1145/1007352.1007390, 10.1145/1007352.1007390]
   [Anonymous], 2008, INTRO AUTOMATA THEOR
   [Anonymous], 2020, ANDROID DEVELOPERS D
   [Anonymous], 2015, Proceedings of the ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software Onward
   Artho C, 2019, LECT NOTES COMPUT SC, V11429, P224, DOI 10.1007/978-3-030-17502-3_18
   Balakrishnan Gogul, 2009, P 7 ACM INT C EMBEDD, P49, DOI [10.1145/1629335.1629343, DOI 10.1145/1629335.1629343]
   Ball T., 2001, Model Checking Software. 8th International SPIN Workshop. Proceedings (Lecture Notes in Computer Science Vol.2057), P103
   Ball T, 2005, ACM T PROGR LANG SYS, V27, P314, DOI 10.1145/1057387.1057391
   Ball T., 2006, Operating Systems Review, V40, P73, DOI 10.1145/1218063.1217943
   Beckman NE, 2011, LECT NOTES COMPUT SC, V6813, P2, DOI 10.1007/978-3-642-22655-7_2
   Beckman NE, 2010, IEEE T SOFTWARE ENG, V36, P495, DOI 10.1109/TSE.2010.49
   Bierhoff K, 2007, ACM SIGPLAN NOTICES, V42, P301, DOI 10.1145/1297105.1297050
   Bierhoff K, 2009, LECT NOTES COMPUT SC, V5653, P195, DOI 10.1007/978-3-642-03013-0_10
   Blanc Regis, 2013, Logic for Programming, Artificial Intelligence and Reasoning. 19th International Conference, LPAR-19, Proceedings: LNCS 8312, P173, DOI 10.1007/978-3-642-45221-5_13
   Bodden Eric, 2012, International Journal on Software Tools for Technology Transfer, V14, P307, DOI 10.1007/s10009-010-0183-5
   Bodden E., 2010, Proceedings of the 32nd ACM/IEEE international Conference on Software Engineering, P5
   Carotenuto D, 2007, LECT NOTES COMPUT SC, V4588, P132
   Chatterjee Krishnendu., 2017, Proceedings of the ACM on Programming Languages, V2, P30
   Chen F, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P569
   Chen H., 2002, P 9 ACM C COMPUTER C, P235
   Chomsky N., 1959, INFORM CONTR, V2, P137, DOI [10.1016/S0019-9958(59)90362-6, DOI 10.1016/S0019-9958(59)90362-6]
   Clarke E, 2003, J ACM, V50, P752, DOI 10.1145/876638.876643
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Cyphert J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290358
   d'Amorim M., 2005, ACM SIGSOFT SOFTWARE, V30, P1
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DeLine Robert, 2004, EUR C OBJ ORIENT PRO
   Esparza J, 2003, INFORM COMPUT, V186, P355, DOI 10.1016/S0890-5401(03)00139-1
   Ferles Kostas, 2020, ARXIVCSPL201009652
   Fink SJ, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1348250.1348255
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Flores-Montoya Antonio, 2014, Programming Languages and Systems. 12th Asian Symposium (APLAS 2014), Proceedings: LNCS 8858, P275, DOI 10.1007/978-3-319-12736-1_15
   Ganty P, 2010, LECT NOTES COMPUT SC, V6174, P600, DOI 10.1007/978-3-642-14295-6_52
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Godefroid P, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P43, DOI 10.1145/1706299.1706307
   Grebenshchikov S, 2012, LECT NOTES COMPUT SC, V7214, P549, DOI 10.1007/978-3-642-28756-5_46
   Gulavani B.S., 2006, P FSE ACM, P117, DOI DOI 10.1145/1181775.1181790
   Gulwani S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P375, DOI 10.1145/1542476.1542518
   Gurfinkel A, 2015, LECT NOTES COMPUT SC, V9206, P343, DOI 10.1007/978-3-319-21690-4_20
   Harrison M. A., 1979, Theoretical Computer Science, V9, P173, DOI 10.1016/0304-3975(79)90024-0
   Heizmann Matthias, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P36, DOI 10.1007/978-3-642-39799-8_2
   Heizmann M, 2018, LECT NOTES COMPUT SC, V10806, P447, DOI 10.1007/978-3-319-89963-3_30
   Heizmann M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P471, DOI 10.1145/1706299.1706353
   Henzinger TA, 2004, ACM SIGPLAN NOTICES, V39, P232, DOI 10.1145/982962.964021
   Henzinger TA, 2003, LECT NOTES COMPUT SC, V2648, P235
   Henzinger TA, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/565816.503279
   Hughes G, 2008, IEEE T SOFTWARE ENG, V34, P614, DOI 10.1109/TSE.2008.72
   Jin D, 2012, PROC INT CONF SOFTW, P1427, DOI 10.1109/ICSE.2012.6227231
   Joshi Pallavi, 2008, P 2008 23 IEEEACM IN
   Kahsai Temesghen, 2016, COMPUTER AIDED VERIF
   Korenjak Allen J, 1966, 7 ANN S SWITCHING AU, p36S46
   La Torre S, 2007, IEEE S LOG, P161, DOI 10.1109/LICS.2007.9
   La Torre Salvatore., 2013, On multistack visibly pushdown languages
   Lam P, 2004, ACM SIGPLAN NOTICES, V39, P46, DOI 10.1145/981009.981016
   Li YB, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P780, DOI 10.1145/3385412.3386021
   Livshits B, 2015, COMMUN ACM, V58, P44, DOI 10.1145/2644805
   Long Z, 2012, LECT NOTES COMPUT SC, V7212, P362, DOI 10.1007/978-3-642-28872-2_25
   Madhavan R, 2015, ACM SIGPLAN NOTICES, V50, P183, DOI [10.1145/2814270.2814304, 10.1145/2858965.2814304]
   Martin M, 2005, ACM SIGPLAN NOTICES, V40, P365, DOI 10.1145/1103845.1094840
   McMillan KL, 2006, LECT NOTES COMPUT SC, V4144, P123
   McMillan KL, 2005, LECT NOTES COMPUT SC, V3440, P1
   Meredith PO, 2010, AUTOMAT SOFTW ENG, V17, P149, DOI 10.1007/s10515-010-0063-y
   Olshansky T., 1977, Theoretical Computer Science, V4, P321, DOI 10.1016/0304-3975(77)90016-0
   Parker David, 2012, Proceedings. Lecture Notes in Computer Science, P248, DOI [10.1007/978-3-642-31759-0_19, DOI 10.1007/978-3-642-31759-0_19, DOI 10.1007/978-3-642-31759-019]
   Pradel M, 2012, PROC INT CONF SOFTW, P925, DOI 10.1109/ICSE.2012.6227127
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T, 2000, ACM T PROGR LANG SYS, V22, P162, DOI 10.1145/345099.345137
   Späth J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290361
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Sridharan M, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P112, DOI 10.1145/1250734.1250748
   Strom Robert E, 1986, IEEE T SOFTWARE ENG, V1
   Tang H, 2015, ACM SIGPLAN NOTICES, V50, P83, DOI [10.1145/2676726.2676997, 10.1145/2775051.2676997]
   Thakur A, 2010, LECT NOTES COMPUT SC, V6174, P288, DOI 10.1007/978-3-642-14295-6_27
   Vallee-Rai R., 1999, Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON'99, page, P13
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Xu GQ, 2009, LECT NOTES COMPUT SC, V5653, P98
   Yu HB, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P871, DOI 10.1145/3180155.3180227
   Zhang QR, 2013, ACM SIGPLAN NOTICES, V48, P435, DOI 10.1145/2499370.2462159
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P344, DOI 10.1145/3093333.3009848
NR 83
TC 5
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 17
DI 10.1145/3434298
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100017
OA gold
DA 2024-07-18
ER

PT J
AU Barke, S
   Peleg, H
   Polikarpova, N
AF Barke, Shraddha
   Peleg, Hila
   Polikarpova, Nadia
TI Just-in-Time Learning for Bottom-Up Enumerative Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Probabilistic models; Domain-specific languages
AB A key challenge in program synthesis is the astronomical size of the search space the synthesizer has to explore. In response to this challenge, recent work proposed to guide synthesis using learned probabilistic models. Obtaining such a model, however, might be infeasible for a problem domain where no high-quality training data is available. In this work we introduce an alternative approach to guided program synthesis: instead of training a model ahead of time we show how to bootstrap one just in time, during synthesis, by learning from partial solutions encountered along the way. To make the best use of the model, we also propose a new program enumeration algorithm we dub guided bottom-up search, which extends the efficient bottom-up search with guidance from probabilistic models.
   We implement this approach in a tool called PROBE, which targets problems in the popular syntax-guided synthesis (SYGuS) format. We evaluate PROBE on benchmarks from the literature and show that it achieves significant performance gains both over unguided bottom-up search and over a state-of-the-art probability-guided synthesizer, which had been trained on a corpus of existing solutions. Moreover, we show that these performance gains do not come at the cost of solution quality: programs generated by PROBE are only slightly more verbose than the shortest solutions and perform no unnecessary case-splitting.
C1 [Barke, Shraddha; Peleg, Hila; Polikarpova, Nadia] Univ Calif San Diego, San Diego, CA 92093 USA.
C3 University of California System; University of California San Diego
RP Barke, S (corresponding author), Univ Calif San Diego, San Diego, CA 92093 USA.
EM sbarke@eng.ucsd.edu; hpeleg@eng.ucsd.edu; npolikarpova@eng.ucsd.edu
OI , Shraddha/0000-0002-8663-5175
FU National Science Foundation [1955457, 1911149, 1943623]; Direct For
   Computer & Info Scie & Enginr; Division of Computing and Communication
   Foundations [1955457] Funding Source: National Science Foundation;
   Division of Computing and Communication Foundations; Direct For Computer
   & Info Scie & Enginr [1911149, 1943623] Funding Source: National Science
   Foundation
FX The authors would like to thank the anonymous reviewers for their
   feedback on the draft of this paper. This work was supported by the
   National Science Foundation under Grants No. 1955457, 1911149, and
   1943623.
CR Albarghouthi Aws, 2013, INT C COMPUTER AIDED, P934
   Allamanis M, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3212695
   Alpaydin E, 2014, ADAPT COMPUT MACH LE, P1
   ALUR R, 2018, COMMUN ACM, V61, P84, DOI DOI 10.1145/3208071
   Alur R, 2017, ELECTRON P THEOR COM, P97, DOI 10.4204/EPTCS.260.9
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2016, ELECTRON P THEOR COM, P178, DOI 10.4204/EPTCS.229.13
   Alur R, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P26
   [Anonymous], 2013, HACKERS DELIGHT
   [Anonymous], 2018, EUPHONY BENCHMARK SU
   Barke Shraddha, 2020, JUST IN TIME LEARNIN
   Bielik P, 2016, PR MACH LEARN RES, V48
   Brockschmidt Marc, 2016, ICLR
   Chen YJ, 2020, LECT NOTES COMPUT SC, V12225, P587, DOI 10.1007/978-3-030-53291-8_30
   Ellis Kevin., 2018, 32 C NEURAL INFORM P, P6062
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   Gao Jianhang, 2012, ABS12020082 CORR
   Gulwani S., 2016, Verification and Synthesis of Correct and Secure Systems
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P62, DOI 10.1145/1993316.1993506
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Gvero T, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2499370.2462192
   Inala JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158090
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Kalyan Ashwin, 2018, ICLR
   Kneuss E, 2013, ACM SIGPLAN NOTICES, V48, P407, DOI [10.1145/2509136.2509555, 10.1145/2544173.2509555]
   Koukoutos M, 2016, ELECTRON P THEOR COM, P100, DOI 10.4204/EPTCS.229.9
   Koukoutos Manos, 2017, ARXIV PREPRINT ARXIV
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   Menon Aditya Krishna, 2013, INT C MACHINE LEARNI, P187
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Peleg Hila, 2020, P ECOOP
   Perelman D, 2014, ACM SIGPLAN NOTICES, V49, P408, DOI [10.1145/2594291.2594297, 10.1145/2666356.2594297]
   Phothilimthana PM, 2016, ACM SIGPLAN NOTICES, V51, P297, DOI 10.1145/2954679.2872387
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2594291.2594321, 10.1145/2666356.2594321]
   Reynolds A, 2019, LECT NOTES COMPUT SC, V11562, P74, DOI 10.1007/978-3-030-25543-5_5
   Shah Rohin, 2018, SCALABLE SYNTHESIS S
   Shi KS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290386
   Si Xujie, 2019, LEARNING METASOLVER
   Smith C, 2019, LECT NOTES COMPUT SC, V11388, P24, DOI 10.1007/978-3-030-11245-5_2
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Udupa A, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2499370.2462174
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang X., 2017, P ACM PROGRAM LANG, DOI [10.1145/3158151, DOI 10.1145/3158151]
   Wang XY, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133886
NR 48
TC 20
Z9 21
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 227
DI 10.1145/3428295
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900104
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Dragoi, C
   Widder, J
   Zufferey, D
AF Dragoi, Cezara
   Widder, Josef
   Zufferey, Damien
TI Programming at the Edge of Synchrony
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Distributed systems; Fault-tolerance; Round Model; Synchrony
ID CONSENSUS
AB Synchronization primitives for fault-tolerant distributed systems that ensure an effective and efficient cooperation among processes are an important challenge in the programming languages community. We present a new progranuning abstraction, RESYNC, for implementing benign and Byzantine fault-tolerant protocols. RESYNC has a new round structure that offers a simple abstraction for group communication, like it is customary in synchronous systems, but also allows messages to be received one by one, like in the asynchronous systems. This extension allows implementing network and algorithm-specific policies for the message reception, which is not possible in classic round models.
   The execution of RESYNC programs is based on a new generic round switch protocol that generalizes the famous theoretical result about consensus in the presence of partial synchrony by of Dwork, Lynch, and Stockmeyer. We evaluate experimentally the performance of RESYNC'S execution platform, by comparing consensus implementations in RESYNC with LIBPAXOS3, ETCD, and BFT-SMART, three consensus libraries tolerant to benign, resp. byzantine faults.
C1 [Dragoi, Cezara] PSL, CNRS, ENS, INRIA, Paris, France.
   [Dragoi, Cezara] Informal Syst, Paris, France.
   [Widder, Josef] Informal Syst, Vienna, Austria.
   [Zufferey, Damien] Max Planck Inst Software Syst, Kaiserslautern, Germany.
C3 Inria; Centre National de la Recherche Scientifique (CNRS); Max Planck
   Society
RP Dragoi, C (corresponding author), PSL, CNRS, ENS, INRIA, Paris, France.; Dragoi, C (corresponding author), Informal Syst, Paris, France.
EM cezara.dragoi@ens.fr; josef@informal.systems; zufferey@mpi-sws.org
OI /0000-0002-3197-8736
FU Deutsche Forschungsgemeinschaft [389792660-TRR 248]; European Research
   Council [610150]; French National Research Agency ANR project SAFTA
   [12744ANR-17-CE25-0008-01]; Interchain Foundation
FX We thank the OOPSLA reviewers and Alexey Gotsman for useful comments and
   suggestions. Damien Zufferey is supported in part by the Deutsche
   Forschungsgemeinschaft project 389792660-TRR 248 and by the European
   Research Council under the Grant Agreement 610150
   (http://www.impacterc.eu/) (ERC Synergy Grant ImPACT). Most of the work
   was done while Cezara Dragoi was at INRIA, France, supported by the
   French National Research Agency ANR project SAFTA
   (12744ANR-17-CE25-0008-01). Cezara Dragoi and JosefWidder are supported
   by Interchain Foundation.
CR Aminof B, 2018, LECT NOTES COMPUT SC, V10747, P1, DOI 10.1007/978-3-319-73721-8_1
   Baudet M., 2019, State Machine Replication in the Libra Blockchain
   Bessani A, 2014, I C DEPEND SYS NETWO, P355, DOI 10.1109/DSN.2014.43
   Biely M, 2007, PODC'07: PROCEEDINGS OF THE 26TH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P244
   Birman K. P., 1987, Operating Systems Review, V21, P123, DOI 10.1145/37499.37515
   Bravo Manuel, 2020, INT S DISTR COMP
   Buchman E., 2016, THESIS U GUELPH
   CASSANDRA, 2013, BUG REP
   Castro M, 2002, ACM T COMPUT SYST, V20, P398, DOI 10.1145/571637.571640
   Chandra TD, 1996, J ACM, V43, P225, DOI 10.1145/226643.226647
   Chaouch-Saad Mouna, 2009, LNCS, V5797
   Charron-Bost B., 2009, INT J SOFTWARE INFOR, V3, P273
   Charron-Bost B, 2009, DISTRIB COMPUT, V22, P49, DOI 10.1007/s00446-009-0084-6
   Crain T, 2018, 2018 IEEE 17TH INTERNATIONAL SYMPOSIUM ON NETWORK COMPUTING AND APPLICATIONS (NCA)
   Damian A, 2019, LECT NOTES COMPUT SC, V11562, P344, DOI 10.1007/978-3-030-25543-5_20
   Debrat Henri, 2012, ARCH FORMAL PROOFS 2, V2012
   Desai A, 2013, ACM SIGPLAN NOTICES, V48, P321, DOI 10.1145/2499370.2462184
   Dragoi C, 2016, ACM SIGPLAN NOTICES, V51, P400, DOI [10.1145/2837614.2837650, 10.1145/2914770.2837650]
   Dragoi C, 2014, LECT NOTES COMPUT SC, V8318, P161, DOI 10.1007/978-3-642-54013-4_10
   Dutta P, 2005, I C DEPEND SYS NETWO, P22, DOI 10.1109/DSN.2005.54
   DWORK C, 1988, J ACM, V35, P288, DOI 10.1145/42282.42283
   ELRAD T, 1982, SCI COMPUT PROGRAM, V2, P155, DOI 10.1016/0167-6423(83)90013-8
   FIDGE C, 1991, COMPUTER, V24, P28, DOI 10.1109/2.84874
   Filipovic I, 2009, LECT NOTES COMPUT SC, V5502, P252, DOI 10.1007/978-3-642-00590-9_19
   FISCHER MJ, 1985, J ACM, V32, P374, DOI 10.1145/3149.214121
   Gafni E., 1998, Proceedings of the Seventeenth Annual ACM Symposium on Principles of Distributed Computing, P143, DOI 10.1145/277697.277724
   Gleissenthall KV, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290372
   Junqueira FP, 2011, I C DEPEND SYS NETWO, P245, DOI 10.1109/DSN.2011.5958223
   Kotla R, 2009, ACM T COMPUT SYST, V27, DOI [10.1145/1323293.1294267, 10.1145/1658357.1658358]
   Lakshman Avinash, 2010, Operating Systems Review, V44, P35, DOI 10.1145/1773912.1773922
   Lamport Leslie, 2005, Generalized Consensus and Paxos
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Liu YHA, 2012, ACM SIGPLAN NOTICES, V47, P395, DOI 10.1145/2398857.2384645
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Maric O, 2017, LECT NOTES COMPUT SC, V10427, P217, DOI 10.1007/978-3-319-63390-9_12
   Milosevic Z., 2018, ABS180704938 CORR
   Milosevic Z, 2009, LECT NOTES COMPUT SC, V5923, P300, DOI 10.1007/978-3-642-10877-8_24
   Naor Oded, 2019, ABS190905204 CORR
   Oki B. M., 1988, Proceedings of the Seventh Annual ACM Symposium on Principles of Distributed Computing, P8, DOI 10.1145/62546.62549
   Ongaro Diego, 2014, 2014 USENIX ANN TECH, DOI DOI 10.5555/2643634.2643666
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   SANTORO N, 1989, LECT NOTES COMPUT SC, V349, P304
   Santoro N, 2007, THEOR COMPUT SCI, V384, P232, DOI 10.1016/j.tcs.2007.04.036
   Sciascia Daniele., 2016, LIBPAXOS3
   Shirako J, 2008, ICS'08: PROCEEDINGS OF THE 2008 ACM INTERNATIONAL CONFERENCE ON SUPERCOMPUTING, P277
   SRIKANTH TK, 1987, DISTRIB COMPUT, V2, P80, DOI 10.1007/BF01667080
   Stoilkovska I, 2019, LECT NOTES COMPUT SC, V11428, P357, DOI 10.1007/978-3-030-17465-1_20
   Sutra Pierre, 2019, ABS190610917 CORR
   VALIANT LG, 1990, COMMUN ACM, V33, P103, DOI 10.1145/79173.79181
   vanRenesse R, 1996, COMMUN ACM, V39, P76, DOI 10.1145/227210.227229
   Widder J, 2009, DISTRIB COMPUT, V22, P29, DOI 10.1007/s00446-009-0080-x
   Yin MF, 2019, PROCEEDINGS OF THE 2019 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC '19), P347, DOI 10.1145/3293611.3331591
   ZOOKEEPER, 2017, ZOOKEEPER2832
NR 53
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 213
DI 10.1145/3428281
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900090
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Turonová, L
   Holík, L
   Lengál, O
   Saarikivi, O
   Veanes, M
   Vojnar, T
AF Turonova, Lenka
   Holik, Lukas
   Lengal, Ondrej
   Saarikivi, Olli
   Veanes, Margus
   Vojnar, Tomas
TI Regex Matching with Counting-Set Automata
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE regular expression matching; bounded repetition; ReDos; determinization;
   Antimirov's derivatives; counting automata; counting-set automata
ID REGULAR EXPRESSIONS; DERIVATIVES
AB We propose a solution to the problem of efficient matching regular expressions (regexes) with bounded repetition, such as (ab){1 ,100}, using deterministic automata. For this, we introduce novel counting-set automata (CsAs), automata with registers that can hold sets of bounded integers and can be manipulated by a limited portfolio of constant-time operations. We present an algorithm that compiles a large sub-class of regexes to deterministic CsAs. This includes (1) a novel Antimirov-style translation of regexes with counting to counting automata (CAs), nondeterministic automata with bounded counters, and (2) our main technical contribution, a determinization of CAs that outputs CsAs. The main advantage of this workflow is that the size of the produced CsAs does not depend on the repetition bounds used in the regex (while the size of the DFA is exponential to them). Our experimental results confirm that deterministic CsAs produced from practical regexes with repetition are indeed vastly smaller than the corresponding DFAs. More importantly, our prototype matcher based on CsA simulation handles practical regexes with repetition regardless of sizes of counter bounds. It easily copes with regexes with repetition where state-of-the-art matchers struggle.
C1 [Turonova, Lenka; Holik, Lukas; Lengal, Ondrej; Vojnar, Tomas] Brno Univ Technol, Fac Informat Technol, Bozetechova 2, Brno 61200, Czech Republic.
   [Saarikivi, Olli; Veanes, Margus] Microsoft, MSR, One Microsoft Way, Redmond, WA 98052 USA.
C3 Brno University of Technology; Microsoft
RP Turonová, L (corresponding author), Brno Univ Technol, Fac Informat Technol, Bozetechova 2, Brno 61200, Czech Republic.
EM ituronova@fit.vutbr.cz; holik@fit.vutbr.cz; lengal@fit.vutbr.cz;
   Olli.Saarikivi@microsoft.com; margus@microsoft.com; vojnar@fit.vutbr.cz
RI Vojnar, Tomas/K-5057-2015
OI Vojnar, Tomas/0000-0002-2746-8792; Lengal, Ondrej/0000-0002-3038-5875;
   Saarikivi, Olli/0000-0001-7596-4734
FU Czech Ministry of Education, Youth and Sports of the ERC.CZ programme
   [LL1908]; FIT BUT internal project [FIT-S-20-6427]
FX We thank the anonymous reviewers and also Juraj Sic for their valuable
   comments and suggestions. This work is supported by the Czech Ministry
   of Education, Youth and Sports project LL1908 of the ERC.CZ programme,
   and the FIT BUT internal project FIT-S-20-6427.
CR Abdulla PA, 2008, LECT NOTES COMPUT SC, V5201, P67, DOI 10.1007/978-3-540-85361-9_9
   Allauzen C, 2006, LECT NOTES COMPUT SC, V4162, P110
   [Anonymous], 1961, Surveys, DOI [10.1070/RM1961v016n05ABEH004112, DOI 10.1070/RM1961V016N05ABEH004112]
   Antimirov V, 1996, THEOR COMPUT SCI, V155, P291, DOI 10.1016/0304-3975(95)00182-4
   Baldwin Adam, 2016, REGULAR EXPRESSION D
   Bardin Sebastien, 2008, International Journal on Software Tools for Technology Transfer, V10, P401, DOI 10.1007/s10009-008-0064-3
   BERRY G, 1986, THEOR COMPUT SCI, V48, P117, DOI 10.1016/0304-3975(86)90088-5
   Berstel J, 1996, THEOR COMPUT SCI, V155, P439, DOI 10.1016/0304-3975(95)00104-2
   Bjorklund Henrik, 2015, CIKM 15, DOI [10.1145/2806416.2806434, DOI 10.1145/2806416.2806434]
   BOYER RS, 1977, COMMUN ACM, V20, P762, DOI 10.1145/359842.359859
   Bruggemann-Klein A, 1998, INFORM COMPUT, V140, P229, DOI 10.1006/inco.1997.2688
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Caron P, 2011, LECT NOTES COMPUT SC, V6638, P179, DOI 10.1007/978-3-642-21254-3_13
   Ceska M, 2018, LECT NOTES COMPUT SC, V10806, P155, DOI 10.1007/978-3-319-89963-3_9
   Champarnaud J.-M., 2001, Combinatorial Pattern Matching. 12th Annual Symposium, CPM 2001. Proceedings (Lecture Notes in Computer Science Vol. 2089), P157
   Chen HM, 2015, INFORM COMPUT, V241, P302, DOI 10.1016/j.ic.2014.12.001
   CHENG KT, 1993, ACM IEEE D, P86
   Cox R., 2010, Regular expression matching in the wild
   DAntoni Loris, 2020, COMMUN ACM
   Davis JC, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P443, DOI 10.1145/3338906.3338909
   Davis JC, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P1256, DOI 10.1145/3338906.3342509
   Davis JC, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P246, DOI 10.1145/3236024.3236027
   Fischer S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P357
   Gelade W, 2006, LECT NOTES COMPUT SC, V4353, P269, DOI 10.1007/11965893_19
   Gelade W, 2012, SIAM J COMPUT, V41, P160, DOI 10.1137/100814196
   Google, RE2
   Graham-Cumming John, 2019, DETAILS CLOUD ARE OU
   Haertel Mike, GNU GREP
   Haertel Mike, WHY GNU GREP IS FAST
   Holík L, 2019, LECT NOTES COMPUT SC, V11893, P468, DOI 10.1007/978-3-030-34175-6_24
   Holik Lukas, 2020, DATASET OOPSLA 20 PA, DOI [10.5281/zenodo.3974360, DOI 10.5281/ZENODO.3974360]
   Hovland Dag, 2012, Language and Automata Theory and Applications. Proceedings 6th International Conference, LATA 2012, P313, DOI 10.1007/978-3-642-28332-1_27
   Hovland D, 2009, LECT NOTES COMPUT SC, V5684, P231, DOI 10.1007/978-3-642-03466-4_15
   Ilie L, 2003, INFORM COMPUT, V186, P140, DOI 10.1016/S0890-5401(03)00090-7
   Kilpeläinen P, 2007, INFORM COMPUT, V205, P890, DOI 10.1016/j.ic.2006.12.003
   Lombardy S, 2005, THEOR COMPUT SCI, V332, P141, DOI 10.1016/j.tcs.2004.10.016
   Monero Project, MON
   Owens S, 2009, J FUNCT PROGRAM, V19, P173, DOI 10.1017/S0956796808007090
   RegExLib.com, INT 1 REG EXPR LIB INT 1 REG EXPR LIB
   Roesch M, Snort-network intrusion detection & prevention system
   Saarikivi O, 2019, LECT NOTES COMPUT SC, V11427, P372, DOI 10.1007/978-3-030-17462-0_24
   Shiple TR, 1998, LECT NOTES COMPUT SC, V1427, P280, DOI 10.1007/BFb0028752
   Sipser M., 1996, Introduction to the Theory of Computation, DOI [10.1145/230514.571645, DOI 10.1145/230514.571645]
   Smith R, 2008, LECT NOTES COMPUT SC, V5352, P158, DOI 10.1007/978-3-540-89862-7_15
   Smith R, 2008, P IEEE S SECUR PRIV, P187, DOI 10.1109/SP.2008.14
   Sommer Robin, BRO NETWORK SECURITY
   Spencer H., 1994, SOFTWARE SOLUTIONS C, P35
   Sperberg-McQueen M., NOTES FINITE STATE A
   Stack Exchange, 2016, OUT POSTM
   The Sagan team, SAG LOG AN ENG SAG LOG AN ENG
   THOMPSON K, 1968, COMMUN ACM, V11, P419, DOI 10.1145/363347.363387
   TUHKANEN P. KILPELAINEN AND R., 2003, P 8 S PROGR LANG SOF, P163
   Turonova Lenka, 2020, MSRTR202031, DOI [10.5281/zenodo.3975566, DOI 10.5281/ZENODO.3975566]
   Turonova Lenka, AUTOMATA LIB
   Veanes Margus, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P498, DOI 10.1109/ICST.2010.15
   Wikipedia contributors, 2019, REG EXPR WIK
   Yang L, 2010, LECT NOTES COMPUT SC, V6307, P58, DOI 10.1007/978-3-642-15512-3_4
NR 57
TC 9
Z9 9
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 218
DI 10.1145/3428286
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900095
OA gold
DA 2024-07-18
ER

PT J
AU Flake, P
   Moorby, P
   Golson, S
   Salz, A
   Davidmann, S
AF Flake, Peter
   Moorby, Phil
   Golson, Steve
   Salz, Arturo
   Davidmann, Simon
TI Verilog HDL and Its Ancestors and Descendants
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Verilog; SystemVerilog; HILO; Superlog; Vera; HDL; HVL
ID TEMPORAL LOGIC
AB This paper describes the history of the Verilog hardware description language (HDL), including its influential predecessors and successors. Since its creation in 1984 and first sale in 1985, Verilog has completely revolutionized the design of hardware. Verilog enabled the development and wide acceptance of logic synthesis. For large-scale digital logic design, previous schematic-based techniques have transformed into textual register-ransfer level (RTL) descriptions written in Verilog. As of 2018 about 80% of integrated circuit design teams worldwide use Verilog and its compatible descendant SystemVerilog.
C1 [Flake, Peter] Elda Technol Ltd, Camberley, Surrey, England.
   [Golson, Steve] Trilobyte Syst, Carlisle, MA USA.
   [Salz, Arturo] Synopsys Inc, Menlo Pk, CA USA.
   [Davidmann, Simon] Imperas Software Ltd, North Weston Thame, England.
C3 Synopsys Inc
RP Flake, P (corresponding author), Elda Technol Ltd, Camberley, Surrey, England.
EM flake@elda.demon.co.uk; prm1024@gmail.com; sgolson@trilobyte.com;
   arturo.salz@synopsys.com; simond@imperas.com
CR Accellera, 2002, SYSTEMVERILOG 3 0 AC
   Accellera, 2003, SYSTEMVERILOG 3 1 AC
   Accellera, 2004, SystemVerilog 3.1a Language Reference Manual
   Accellera, 2011, UN VER METH UVM 1 0
   Accellera, 2014, VER AMS LANG REF MAN
   Accellera, 2002, ACC COLL C P
   [Anonymous], 13642001 IEEE
   [Anonymous], 16472006 IEEE
   [Anonymous], 2017, 18002017 IEEE
   [Anonymous], 180022017 IEEE
   [Anonymous], 18002009 IEEE
   [Anonymous], 10761993 IEEE
   [Anonymous], 18002005 IEEE
   [Anonymous], 13642002 IEEE
   [Anonymous], 18002012 IEEE
   [Anonymous], 11641993 IEEE
   [Anonymous], 18502010 IEEE
   [Anonymous], 18502005 IEEE
   [Anonymous], 1988, MILSTD454L
   [Anonymous], 14972001 IEEE
   [Anonymous], 16662011 IEEE
   [Anonymous], 13641995 IEEE
   [Anonymous], 13642005 IEEE
   [Anonymous], 10761987 IEEE
   [Anonymous], 2004, PROP SPEC LANG REF M
   [Anonymous], 107641995 IEEE
   Armoni R, 2002, LECT NOTES COMPUT SC, V2280, P296
   Arnold K., 1998, JAVA PROGRAMMING LAN
   Aycinena Peggy, 2005, P MOORBY 2005 KAUFMA
   Baird Mike, 1998, IVC VIUF HDL C OVI V
   Baird Mike, 1999, INT HDL C EXH HDLCON
   Barbacci M., 1972, Digest of Papers of the Six Annual IEEE Computer Society International Conference, P219
   BARTEE TC, 1960, DIGITAL COMPUTER FUN
   Beer I, 2001, LECT NOTES COMPUT SC, V2102, P363
   Bell C.G., 1991, High tech ventures
   Bell C. Gordon, 2003, SYN US GROUP C SAN J, P1
   Belnap N., 1977, MODERN USES MULTIPLE, P8, DOI [10.1007/978-94-010-1161-7_2, DOI 10.1007/978-94-010-1161-7_2]
   BENDING MJ, 1984, IEEE DES TEST COMPUT, V1, P83, DOI 10.1109/MDT.1984.5005617
   Bergeron Janick., 2005, Verification Methodology Manual for SystemVerilog
   BERGLUND NC, 1979, ELECTRONICS, V52, P108
   BORRIONE D, 1992, IEEE DES TEST COMPUT, V9, P54, DOI 10.1109/54.156158
   Cadence, 2000, TESTBUILDER
   Cadence and Mentor Graphics, 2008, OP VER METH
   CARROLL M, 1993, IEEE SPECTRUM, V30, P34, DOI 10.1109/6.214581
   Chang KH, 2012, DES AUT CON, P936
   CHM, 2015, COMP HIST MUS ANN IT
   CHM, 2016, P MOORBY
   Clarke Peter, 1999, ELECT ENG TIMES 0601
   Collett Ronald, 1993, ELECT ENG TIMES 0104, P42
   Cooley John, 1995, IND GADFLY FALL VIUF
   Cooley John, 1996, ELECT ENG TIMES 0205
   Darringer John A., 1968, P 5 ANN DES AUT WORK, DOI [10.1145/800167.805400, DOI 10.1145/800167.805400]
   Domic Antun, 2015, EPFL WORKSH LOG SYNT, P1
   Dudani Surrendra, 2003, AUTH ASS IP US OPENV
   DULEY JR, 1968, IEEE T COMPUT, VC 17, P850, DOI 10.1109/TC.1968.229145
   EDAC, 2005, P MOORB SEL REC EDA
   EICHELBE.EB, 1965, IBM J RES DEV, V9, P90, DOI 10.1147/rd.92.0090
   Eichelberger E.B., 1977, P DAC, P462
   Fix L, 2008, LECT NOTES COMPUT SC, V5000, P139
   Flake P, 2004, IEE REVIEW, V50, P22, DOI 10.1049/ir:20040803
   Flake P. L., 1980, Proceedings of the IEEE International Conference on Circuits and Computers ICCC 80, P594
   Flake P. L., 1975, International Symposium on Computer Hardware Description Languages and their Applications, P134
   Flake P. L., 1983, ACM IEEE 20th Design Automation Conference Proceedings, P615, DOI 10.1109/DAC.1983.1585718
   Flake P. L., 1981, Computer Hardware Description Languages and Their Applications. Proceedings of the IFIP TC-10 Fifth International Conference, P95
   Flake P. L., 2000, Proceedings ASP-DAC 2000. Asia and South Pacific Design Automation Conference 2000 with EDA TechnoFair 2000. (Cat. No.00EX389), P583, DOI 10.1109/ASPDAC.2000.835168
   Flake P. L., 1975, Digital Processes, V1, P39
   Flake Peter L., 1974, IEE C PUBLICATION, V111, P130
   Foster Harry, 2019, 2018 WILSON RES GROU
   FSF, 2000, BIS
   Goel P., 1980, PROC INT FAULT TOLER, P145
   Goel Prabhu, 2017, 8 MAN, P51
   Goering Richard, 2005, ELECT ENG TIMES
   HARRIS RL, 1984, COMPUT AIDED DESIGN, V16, P104, DOI 10.1016/0010-4485(84)90181-7
   Hartenstein Reiner, 2018, HIST CHDL C
   Huang Chi-lai, 1981, THESIS SUNY BINGHAMT
   Hunter Brian, 2016, ADV UVM, Vsecond
   IEEE, 1974, IEEE COMPUTER, V7, P1, DOI [10.1109/MC.1974.6323396, DOI 10.1109/MC.1974.6323396]
   Iman Sasan, 2004, HARDWARE VERIFICATIO, DOI [10.1007/b117092, DOI 10.1007/B117092]
   Jain Mahendra, 1993, IEEE SPECTRUM, V30, P34, DOI [10.1109/6.214581, DOI 10.1109/6.214581]
   Jain Mahendra, 1993, IEEE SPECTRUM, V30, P36, DOI [10.1109/6.214581, DOI 10.1109/6.214581]
   John Michael., 1993, APPL SPECIFIC INTEGR
   Johnson S.C., 1975, COMPUTER SCI TECHNIC
   Jones Harvey, 2009, ORAL HIST H JONES
   Jordan Harry F., 1973, P 1 ANN S COMP ARCH, P31, DOI [10.1145/800123.803968, DOI 10.1145/800123.803968]
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   KLEEMAN L, 1987, IEEE DES TEST COMPUT, V4, P4, DOI 10.1109/MDT.1987.295189
   Lukasiewicz Jan, 2017, RUCH FILOZOFICZNY, V5, P170
   Madhavan Rajeev, 1997, IVC
   Mentor Graphics, 2006, MENT GRAPH DEL NEXT
   Mills Don, 1999, 9 ANN SYNOPSYS EPIC
   Moorby P. R., 1983, IEEE International Conference on Computer-Aided Design. ICCAD-83. Digest of Technical Papers, P101
   Moorby Phil, 2003, DES VER C SAN JOS CA, P1
   Moorby Philip, 2013, ORAL HIST P RAYMOND
   Moretti Gabe, 2015, CHIP DESIGN MAG 0220
   Nenni D., 2019, FABLESS TRANSFORMATI
   Newton A. Richard, 2005, PRESENTATION 2005 P
   Nikhil Rishiyur S., 2009, SIGDA Newsl, V39, P1, DOI [10.1145/1862876.1862877, DOI 10.1145/1862876.1862877]
   Reed Irving S., 1952, P 1952 ACM NAT M TOR, P90, DOI [10.1145/800259.809004, DOI 10.1145/800259.809004]
   Reed Irving S., 1956, TR141 MIT LINC LAB
   REED IS, 1972, COMPUTER, V5, P46, DOI 10.1109/C-M.1972.216916
   Salemi R., 2013, The UVM Primer: A Step-By-Step Introduction to the Universal Verification Methodology
   Salz Arturo, 2012, SYN US GROUP C SANT, P1
   SHANNON CE, 1940, THESIS MIT CAMBRIDGE
   SIGARCH, 1974, SIGARCH COMPUT ARCHI, V3, P40
   SIGARCH, 1973, SIGARCH COMPUT ARCHI, V2, P8
   Stellfox Mike, 2010, CADENCE DESIGN SYSTE
   Sutherland S., 2000, P 9 INT HDL C HDLCON, P1
   Sutherland Stuart., 2017, RTL MODELING SYSTEMV
   Sutherland Stuart, 2006, SYSTEMVERILOG DESIGN, Vsecond, DOI [10.1007/0-387-36495-1, DOI 10.1007/0-387-36495-1]
   Thomas D. E., 1995, The Verilog Hardware Description Language, V2
   Thomas DonaldE., 1991, VERILOG HARDWARE DES
   ULRICH EG, 1969, COMMUN ACM, V12, P102, DOI 10.1145/362848.362870
   Vardi MY, 1995, LECT NOTES COMPUTER, P238, DOI DOI 10.1007/3-540-60915-6
   Vasudevan Srivatsa, 2016, PRACTICAL UVM
   Verisity Design, 2002, ERM REUS METH
   Weiler Frank, 2003, DVCON
   White Ian John, 1975, THESIS U BRADFORD BR
   Wlilkes D., 1999, Proceedings 1999 Design Automation Conference (Cat. No. 99CH36361), P778, DOI 10.1109/DAC.1999.782124
NR 118
TC 7
Z9 8
U1 2
U2 16
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 87
DI 10.1145/3386337
PG 90
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900018
OA gold
DA 2024-07-18
ER

PT J
AU MacQueen, D
   Harper, R
   Reppy, J
AF MacQueen, David
   Harper, Robert
   Reppy, John
TI The History of Standard ML
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Standard ML; Language design; Operational semantics; Type checking
ID GARBAGE COLLECTION; REGION INFERENCE; ALGOL 60; SYSTEM; COMPILER;
   CALCULUS; LANGUAGE; OBJECT
AB The ML family of strict functional languages, which includes F#, OCaml, and Standard ML, evolved from the Meta Language of the LCF theorem proving system developed by Robin Milner and his research group at the University of Edinburgh in the 1970s. This paper focuses on the history of Standard ML, which plays a central role in this family of languages, as it was the first to include the complete set of features that we now associate with the name "ML" (i.e., polymorphic type inference, datatypes with pattern matching, modules, exceptions, and mutable state).
   Standard ML, and the ML family of languages, have had enormous influence on the world of programming language design and theory. ML is the foremost exemplar of a functional programming language with strict evaluation (call-by-value) and static typing. The use of parametric polymorphism in its type system, together with the automatic inference of such types, has influenced a wide variety of modern languages (where polymorphism is often referred to as generics). It has popularized the idea of datatypes with associated case analysis by pattern matching. The module system of Standard ML extends the notion of type-level parameterization to large-scale programming with the notion of parametric modules, or functors.
   Standard ML also set a precedent by being a language whose design included a formal definition with an associated metatheory of mathematical proofs (such as soundness of the type system). A formal definition was one of the explicit goals from the beginning of the project. While some previous languages had rigorous definitions, these definitions were not integral to the design process, and the formal part was limited to the language syntax and possibly dynamic semantics or static semantics, but not both.
   The paper covers the early history of ML, the subsequent efforts to define a standard ML language, and the development of its major features and its formal definition. We also review the impact that the language had on programming-language research.
C1 [MacQueen, David; Reppy, John] Univ Chicago, Comp Sci, 5730 S Ellis Ave, Chicago, IL 60637 USA.
   [Harper, Robert] Carnegie Mellon Univ, Comp Sci, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
C3 University of Chicago; Carnegie Mellon University
RP MacQueen, D (corresponding author), Univ Chicago, Comp Sci, 5730 S Ellis Ave, Chicago, IL 60637 USA.
EM dmacqueen@mac.com; rwh@cs.cmu.edu; jhr@cs.uchicago.edu
RI Harper, Robert/HLH-3752-2023
OI Harper, Robert/0000-0002-9400-2941; Reppy, John/0000-0002-5881-298X
CR Aiken A., 1998, Types im Compilation. Second International Workshop, TIC '98 Proceedings, P78, DOI 10.1007/BFb0055513
   Aitken William E., 1992, 921290 TR CORN U DEP
   [Anonymous], 1991, Commentary on Standard ML
   [Anonymous], 1977, P 5 INT JOINT C ARTI
   [Anonymous], 1997, CAMBRIDGE TRACTS THE
   [Anonymous], 1992, Compiling with Continuations
   [Anonymous], 1975, The psychology of computer vision
   [Anonymous], 1965, Universal algebra
   [Anonymous], 1991, STANDARD STANDARD ML
   [Anonymous], 1992, Handbook of Logic in Computer Science
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 1998, Modern Compiler Implementation in C
   [Anonymous], 1984, LISP and Functional Programming
   Appel A. W., 1992, LISP and Symbolic Computation, V5, P191, DOI 10.1007/BF01807505
   Appel A. W., 1993, Journal of Functional Programming, V3, P391, DOI 10.1017/S0956796800000836
   Appel A. W., 1990, LISP and Symbolic Computation, V3, P343, DOI 10.1007/BF01807697
   Appel A. W., 1989, LISP and Symbolic Computation, V2, P153, DOI 10.1007/BF01811537
   Appel Andrew, 1988, ECSLFCS8855 LFCS U E
   Appel Andrew W, 1993, CSTR41293 PRINC U DE
   Appel Andrew W., 2001, P ACM SIGPLAN 2001 C, DOI [10.1145/378795.378854, DOI 10.1145/378795.378854]
   Appel Andrew W., 1994, NEW INITIAL BASIS ST
   Appel Andrew W., 1994, PROPOSED INTERFACE S
   Appel Andrew W., 1995, PROPOSED INTERFACE S
   Appel Andrew W., 1995, NEW INITIAL BASIS ST
   APPEL AW, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P293, DOI 10.1145/75277.75303
   APPEL AW, 1987, LECT NOTES COMPUT SC, V274, P301
   APPEL AW, 1989, SOFTWARE PRACT EXPER, V19, P171, DOI 10.1002/spe.4380190206
   APPEL AW, 1987, INFORM PROCESS LETT, V25, P275, DOI 10.1016/0020-0190(87)90175-X
   APPEL AW, 1994, SIGPLAN NOTICES, V29, P13, DOI 10.1145/773473.178245
   APPEL AW, 1991, LECT NOTES COMPUT SC, V528, P1
   Aspinall D, 1995, LECT NOTES COMPUT SC, V933, P1, DOI 10.1007/BFb0022243
   Astarte Troy K., 2019, Formalising Meaning: A History of Programming Language Semantics
   Auhagen Sven., 2011, Proceedings of the 2011 ACM SIGPLAN Workshop on Memory Systems Performance and Correctness, MSPC '11, P51
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   BARRON DW, 1963, COMPUT J, V6, P134, DOI 10.1093/comjnl/6.2.134
   Baudinet Marianne, 1985, TREE PATT MATCH ML E
   Beaven M., 1993, ACM Letters on Programming Languages and Systems, V2, P17, DOI 10.1145/176454.176460
   Benton N, 2005, LECT NOTES COMPUT SC, V3474, P142
   Benton N., 1999, Electronic Notes in Theoretical Computer Science, V26, DOI 10.1016/S1571-0661(05)80280-4
   Benton N, 2001, J FUNCT PROGRAM, V11, P395, DOI 10.1017/S0956796801004099
   Benton Nick, 2004, P 6 INT ACM SIGPLAN, P215, DOI [10.1145/1013963.1013987, DOI 10.1145/1013963.1013987]
   Benton Nick., 1998, P 3 ACM SIGPLAN INT, P129, DOI [10.1145/289423.289435, DOI 10.1145/289423.289435]
   Bernstein K.L., 1995, Debugging Type Errors
   Biagioni E., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P55, DOI 10.1145/182409.182431
   BIRKEDAL L, 1993, 9314 U COP DEP COMP
   Blume M., 2001, Electronic Notes in Theoretical Computer Science, V59, DOI 10.1016/S1571-0661(05)80452-9
   Blume M, 1999, ACM T PROGR LANG SYS, V21, P813, DOI 10.1145/325478.325518
   Blume M, 2006, ACM SIGPLAN NOTICES, V41, P239, DOI 10.1145/1160074.1159836
   Blume M, 2008, LECT NOTES COMPUT SC, V5356, P273
   Brown Mark R, 1989, 53 DIG SYST RES CTR
   Burstall R. M., 1977, SOFTWARE REVOLUTION, P45
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   Burstall Rod M., 1969, MACHINE INTELLIGENCE, V4, P17
   Burstall Rod M., 1968, MACHINE INTELLIGENCE, V2, P207
   Burstall Rod M., 1977, PROGRAMMING POP 2
   Burstall RodM., 1980, Proceedings of the 1980 ACM conference on LISP and Functional Programming, LFP '80, P136, DOI 10.1145/800087.802799
   Cantor Georg, 1874, Journal fur die reine und angewandte Mathematik, P258
   CARDELLI L, 1990, PROGRAMMING CONCEPTS AND METHODS, P479
   Cardelli Luca, 1983, POLYMORPHISM ML LCF, V1, P16
   Cardelli Luca, 1981, DIFFERENCES VAX DEC
   Cardelli Luca, 1980, MODULE EXCHANGE FORM
   Cardelli Luca, 1982, POLYMORPHISM ML LCF, V0, P4
   Cardelli Luca, ML UNIX
   Cardelli Luca, 1980, ML ABSTRACT MACHINE
   Cardelli Luca, 1982, EDINBURGH ML
   Cardelli Luca., ML VMS
   Cardelli Luca, 1983, MANUAL ML UNIX POSE
   Cardelli Luca, 1983, POLYMORPHISM ML LCF, V3, P9
   Cardelli Luca, 1982, THESIS U EDINBURGH
   Cardone Felice, 2009, HDB HIST LOGIC, V5
   Carnap R., 1929, Abriss der Logistik mit besonderer Berucksichtigung der Relationstheorie und ihrer Anwendungen
   Cejtin H, 2000, LECT NOTES COMPUT SC, V1782, P56
   Cejtin Henry, 2004, FORMAL SPECIFICATION
   Cheng P, 2001, ACM SIGPLAN NOTICES, V36, P125, DOI 10.1145/381694.378823
   Chitil O, 2001, ACM SIGPLAN NOTICES, V36, P193, DOI 10.1145/507669.507659
   Chiw C, 2012, ACM SIGPLAN NOTICES, V47, P111, DOI 10.1145/2345156.2254079
   Chlipala A, 2015, ACM SIGPLAN NOTICES, V50, P153, DOI [10.1145/2775051.2677004, 10.1145/2676726.2677004]
   Choppella Venkatesh., 2002, THESIS U INDIANA BLO
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   CLEAVELAND R, 1993, ACM T PROGR LANG SYS, V15, P36, DOI 10.1145/151646.151648
   Cooper Robert, 1992, P 1992 ACM SIGPLAN W, P134
   Coquand Thierry, 2018, STANFORD ENCY PHILOS
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P50, DOI 10.1145/301631.301641
   Crary Karl, 2009, MECHANIZATION TYPE S, DOI [10.5281/zenodo.3700588, DOI 10.5281/ZENODO.3700588]
   Cregut Pierre, 1994, P 1994 ACM SIGPLAN W, P13
   Curry H. B., 1958, COMBINATORY LOGIC, VI
   Curry HaskellB., 1969, DIALECTICA-SWITZ, V23, P83, DOI DOI 10.1111/J.1746-8361.1969.TB01183.X
   Curry HB, 1930, AM J MATH, V52, P789, DOI 10.2307/2370716
   Curry HB, 1934, P NATL ACAD SCI USA, V20, P584, DOI 10.1073/pnas.20.11.584
   Curry HB, 1932, AM J MATH, V54, P551, DOI 10.2307/2370900
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Damas Luis., 1984, THESIS U EDINBURGH E
   Dimock A, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/507669.507640
   Dreyer D, 2003, ACM SIGPLAN NOTICES, V38, P236, DOI 10.1145/640128.604151
   Dreyer D., 2005, THESIS CARNEGIE MELL
   Dreyer D, 2007, ACM SIGPLAN NOTICES, V42, P63, DOI 10.1145/1190215.1190229
   Dreyer D, 2007, ACM SIGPLAN NOTICES, V42, P289, DOI 10.1145/1291220.1291196
   Dreyer Derek R., 2001, CMUCS01112 CARN MELL
   Duggan D, 1996, SCI COMPUT PROGRAM, V27, P37, DOI 10.1016/0167-6423(95)00007-0
   Duggan D, 1996, ACM SIGPLAN NOTICES, V31, P262, DOI 10.1145/232629.232654
   Ehrig H., 1980, Automata, Languages and Programming, Seventh Colloquium, P157
   Eidorff P. H., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P1, DOI 10.1145/292540.292543
   Elsman M, 2003, LECT NOTES COMPUT SC, V2562, P74
   Elsman M, 1999, ACM SIGPLAN NOTICES, V34, P208, DOI 10.1145/317765.317800
   Elsman Martin, 1999, CARILLON D A SYSTEM
   Elsman Martin, 2011, P 1 ACM SIGPLAN INT, P39, DOI [10.1145/2093328.2093336, DOI 10.1145/2093328.2093336]
   Elsman Martin, 1998, LECT NOTES COMPUTER, P136, DOI [10.1007/BFb0055516, DOI 10.1007/BFB0055516]
   Elsman Martin, 1999, THESIS U COPENHAGEN
   Evans Arthur., 1970, PAL PEDAGIGIC ALGORI
   Evans Arthur, 1968, PAL REFERENCE MANUAL
   Evans Arthur, 1968, P 1968 23 ACM NAT C, P395, DOI [10.1145/800186.810604, DOI 10.1145/800186.810604]
   Felleisen Matthias, 1998, LITTLE MLER
   Fisher K, 1999, ACM SIGPLAN NOTICES, V34, P37, DOI 10.1145/301631.301638
   Fisher K, 2002, INFORM COMPUT, V177, P28, DOI 10.1006/inco.2002.3169
   Fluet M, 2010, J FUNCT PROGRAM, V20, P537, DOI 10.1017/S0956796810000201
   Francois Pottier, 2011, TYPES SYST F OM EQ T
   Frege Gottlob., 1967, BEGRIFFSSCHRIFT ARIT, P1
   Frege Gottlob, 1893, Grundgesetze der Arithmetik, begriffsschriftlich abgeleitet
   Gansner E.R., 2004, The Standard ML basis library
   Gansner Emden R, 1991, 3 INT WORKSH STAND M
   Gansner EmdenR., 1993, USER INTERFACE SOFTW, V1, P61
   George L, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/780822.781135
   George L, 1996, ACM T PROGR LANG SYS, V18, P300, DOI 10.1145/229542.229546
   George L., 1994, Compiler Construction. 5th International Conference, CC'94. Proceedings, P83
   Gilmore Stephen., 1997, ECSLFCS97364 U ED ED
   Girard J.-Y., 1972, PhD thesis
   GOLDBERG B, 1991, SIGPLAN NOTICES, V26, P165, DOI 10.1145/113446.113460
   Goldberg B., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P53, DOI 10.1145/141471.141504
   Gordon M. J., 1979, Edinburgh LCF
   Gordon Michael J., 1978, P 5 ACM SIGACT SIGPL, P119, DOI DOI 10.1145/512760.512773
   Gordon Michael J. C, 1980, LOCATIONS 1 CLASS OB
   Griffin T., 1994, SPEC ISSUE DATABASE, V17, P43
   Haack C, 2004, SCI COMPUT PROGRAM, V50, P189, DOI 10.1016/j.scico.2004.01.004
   Hage J, 2007, LECT NOTES COMPUT SC, V4449, P199
   Haines Nick, 1991, 3 INT WORKSH STAND M, P11
   Hallenberg N, 2002, ACM SIGPLAN NOTICES, V37, P141, DOI 10.1145/543552.512547
   Hammond Kevin., 1988, PARALLEL SML FUNCTIO
   HANSEN WJ, 1992, ACM T PROGR LANG SYS, V14, P471, DOI 10.1145/133233.133234
   HANSON DR, 1990, SOFTWARE PRACT EXPER, V20, P5, DOI 10.1002/spe.4380200104
   HARPER R, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P341, DOI 10.1145/96709.96744
   HARPER R, 1987, LECT NOTES COMPUT SC, V250, P308
   Harper R., 1993, Journal of Functional Programming, V3, P465, DOI 10.1017/S095679680000085X
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   Harper R, 2000, FOUNDAT COMPUT, P341
   HARPER R, 1994, INFORM PROCESS LETT, V51, P201, DOI 10.1016/0020-0190(94)90120-1
   HARPER R, 1993, ACM T PROGR LANG SYS, V15, P211, DOI 10.1145/169701.169696
   Harper R., 1994, PRINCIPLES PROGRAMMI, P123, DOI [DOI 10.1145/174675.176927, 10.1145/174675.176927]
   Harper R, 2016, Practical Foundations for Programming Languages
   Harper R., 2011, Programming in Standard ML
   Harper Robert, 1994, CMUCS94104 CARN MELL
   Harper Robert, 1985, STAND ML M ED MAY 23
   Harper Robert, 1986, Standard ml
   Harper Robert, 1988, ECSLFCS8862 U ED DEP
   Harper Robert, 1987, ECSLFCS8736 U ED DEP
   Harper Robert, 1986, LFCS REPORT SERIES
   Harper Robert, 1994, INRIA TECHNICAL REPO, P136
   Harper Robert, 1989, ECSLFCS8981 U ED DEP
   Harper Robert, 2006, P 2006 ACM SIGPLAN W, P32, DOI [10.1145/1159876, DOI 10.1145/1159876]
   Hilbert D., 1928, Grundzuge der theoretischen Logik
   Hindley JR, 2008, J LOGIC COMPUT, V18, P229, DOI 10.1093/logcom/exm001
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Hirschowitz T, 2005, ACM T PROGR LANG SYS, V27, P857, DOI 10.1145/1086642.1086644
   HOL, 2019, HOL INT THEOE PROV
   Holmstrom S., 1983, DECL PROGR WORKSH U, P114
   IEEE, 1993, 10031 IEEE
   IEEE Computer Society, 1985, 7541985 IEEE
   INRIA, 2019, HIST OCAML
   Jagannathan Suresh, 2010, ML 10, P2
   Jensen Kathleen, 1978, PASC US MAN REP, V2nd
   Jeremy Wazny, 2006, THESIS U MELBOURNE M
   Johnson-acsadi G, 1986, Popul Bull UN, P44, DOI 10.1145/512644.512649
   KAHN G, 1987, LECT NOTES COMPUT SC, V247, P22
   Kahrs S, 1998, LECT NOTES COMPUT SC, V1382, P154, DOI 10.1007/BFb0053589
   Kahrs S, 1997, THEOR COMPUT SCI, V173, P445, DOI 10.1016/S0304-3975(96)00163-6
   Kahrs Stefan, 1993, ECSLFCS93257 U ED DE
   Kahrs Stefan, 1994, ECSLFCS94300 U ED DE
   Kamareddine FairouzD., 2004, APPL LOG SER, V29
   Kennedy A, 2001, ACM SIGPLAN NOTICES, V36, P1, DOI 10.1145/381694.378797
   Kennedy A, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P177
   Kennedy Andrew John., 1996, Programming Languages and Dimensions
   Krumvieda Clifford D, 1993, THESIS CORNELL U ITH
   Kuan G, 2007, ML'07: PROCEEDINGS OF THE 2007 WORKSHOP ON ML, P3
   Kuan G, 2009, LECT NOTES COMPUT SC, V6041, P218
   Kuan George., 2010, THESIS U CHICAGO CHI
   Landin P. J., 1998, Higher-Order and Symbolic Computation, V11, P125, DOI 10.1023/A:1010068630801
   Landin P.J., 1966, ADV PROGRAMMING NONN, P97
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   LANDIN PJ, 1966, COMMUN ACM, V9, P157, DOI 10.1145/365230.365257
   LANDIN PJ, 1965, COMMUN ACM, V8, P89, DOI 10.1145/363744.363749
   LANDIN PJ, 1965, COMMUN ACM, V8, P158, DOI 10.1145/363791.363804
   Lee Daniel K., 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P173, DOI 10.1145/1190216.1190245
   Lee OS, 1998, ACM T PROGR LANG SYS, V20, P707, DOI 10.1145/291891.291892
   Leijen D, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P109, DOI 10.1145/331963.331977
   Lerner BS, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P425, DOI 10.1145/1250734.1250783
   Leroy X., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P109, DOI 10.1145/174675.176926
   Leroy X., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P142, DOI 10.1145/199448.199476
   Leroy X., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P220, DOI 10.1145/158511.158632
   Leroy X., 1996, Journal of Functional Programming, V6, P667, DOI 10.1017/S0956796800001933
   Leung A, 1999, ACM SIGPLAN NOTICES, V34, P204, DOI 10.1145/301631.301667
   Lillibridge Mark, 1991, POSTING TYPES MAILIN
   Lillibridge Mark., 1997, THESIS CARNEGIE MELL
   Lindsey C. H., 1996, HIST ALGOL 68, P27, DOI [10.1145/234286.1057810, DOI 10.1145/234286.1057810]
   LISKOV B, 1977, COMMUN ACM, V20, P564, DOI 10.1145/359763.359789
   Liskov Barbara, 1981, LECT NOTES COMPUTER, V114, DOI [10.1007/BFb0035014, DOI 10.1007/BFB0035014]
   Lucas P., 1968, 25037 TR IBM LAB VIE
   Luo Zhaohui, 1992, ECSLFCS92211 U ED ED
   MacQueen D., 2002, Formal Aspects of Computing, V13, P214, DOI 10.1007/s001650200010
   MacQueen D. B., 1994, Programming Languages and Systems - ESOP '94. 5th European Symposium on Programming. Proceedings, P409
   MacQueen D.B., 1984, LISP FUNCTIONAL PROG, P198
   MacQueen David, 2010, P 2010 ACM SIGPLAN W, P2
   MacQueen David, 1985, STAND ML M ED 6 8 JU, V1, P16
   MacQueen David, 1983, MODIFIED DAMAS ALGOR
   MacQueen David B., 1994, FUNCTIONAL PROGRAMMI, V693, P32, DOI 10.1007/3-540-56883-2_2
   MacQueen David B, 1985, DEPENDENT TYPES MODU
   MacQueen David B., POLYMORPHISM ML LCF, V2, P37
   MacQueen David B., 1981, S FUNCT LANG COMP AR, P524
   MacQueen David B., 1983, POLYMORPHISM ML LCF, V3, P31
   MacQueen David B., 2015, NOTES NEWMANS LSTRAT
   MacQueen DavidB., 1986, P 13 ACM SIGPLAN S P, P277, DOI DOI 10.1145/512644.512670
   Mailloux B. J., 1969, REPORT ALGORITHMIC L, P80, DOI [10.1007/978-3-662-39502-8_1, DOI 10.1007/978-3-662-39502-8_1]
   Maranget L, 2008, ML'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN WORKSHOP ON ML, P35
   Martin-Lf P., 1982, Stud. Logic Found. Math, V104, P153, DOI [DOI 10.1016/S0049-237X(09)70189-2, 10.1016/ S0049-237X(09)70189-2.]
   Martin-Lof Per, 1984, STUDIES PROOF THEORY, V1
   Matthews David C. J., 1988, DATA TYPES PERSISTEN, P43
   Matthews David C. J, 1989, 161 U CAMBR COMP LAB
   McAdam Bruce J, 2002, THESIS U EDINBURGH
   McAdam Bruce J, 1998, ECSLFCS98384 U ED DE
   MCCARTHY J, 1960, COMMUN ACM, V3, P184, DOI 10.1145/367177.367199
   MCCARTHY J, 1963, COMPUTER PROGRAMMING
   MCCARTHY J, 1966, FORMAL LANGUAGE DESC, P1
   Milne Robert, 1974, THESIS OXFORD U
   Milner R., 1972, Proceedings of an ACM Conference on Proving Assertations about Programs, P1, DOI 10.1145/800235.807067
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Milner R., 1990, The Definition of Standard ML
   Milner R., 1984, Proceedings of the 1984 ACM Symposium on LISP and functional programming, P184
   Milner Robin, 1987, ECSLFCS8733 U ED DEP
   Milner Robin, 1985, WEBS
   Milner Robin, 1985, SCHED STAND ML M 23
   Milner Robin, 1983, CHANGES PROPOSAL STA
   Milner Robin, 1986, LFCS REPORT SERIES
   Milner Robin, 1985, DYNAMIC OPERATIONAL
   Milner Robin, 1984, ML M SKEL TIM JUN 19
   Milner Robin, 1984, SIMPLIFIED SYNTAX IN
   Milner Robin., 1980, CALCULUS COMMUNICATI, DOI DOI 10.1007/3-540-10235-3
   Milner Robin, 1983, PROPOSAL STANDARD ML
   Mitchell J, 1996, INFORM COMPUT, V127, P102, DOI 10.1006/inco.1996.0054
   MITCHELL JC, 1988, ACM T PROGR LANG SYS, V10, P470, DOI 10.1145/44501.45065
   Mitchell John C., 1988, P 15 ACM SIGPLAN SIG, P28, DOI 10.1145/73560.73563
   Mitchell Kevin, 1983, ML PROGR REPORT
   Mitchell Kevin, 1985, ML WORKSH 85 STAND M, P7
   Mitchell Kevin, 1985, EDINBURGH STANDARD M
   ML2000 Working Group, 1999, PRINC PREL DES ML200
   MLton, 2014, MLTON HIST
   Moggi E., 1991, Math. Struct. Comput. Sci, V1, P103, DOI DOI 10.1017/S0960129500000074
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Morrisett Greg, 1995, CMUCS95226 CARN MELL
   MORRISETT JG, 1993, SIGPLAN NOTICES, V28, P198, DOI 10.1145/173284.155353
   Moscaow ML., 2014, MOSCOW ML
   Newman MHA, 1943, P CAMB PHILOS SOC, V39, P69
   Nielson Flemming., 1997, ML CONCURRENCY DESIG
   Ohori A, 1995, ACM T PROGR LANG SYS, V17, P844, DOI 10.1145/218570.218572
   Ohori A., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P154, DOI 10.1145/143165.143200
   Ohori A, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P167, DOI 10.1145/2628136.2628164
   Paulson L, 1996, ML for the Working Programmer
   Pavlinovic Z, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P412, DOI 10.1145/2784731.2784765
   Peano G., 1889, Arithmetices principia: Nova methodo exposita
   Petersen Leaf, 2000, CMUCS00180 CARN MELL
   Petersen Leaf Eames, 2005, THESIS CARNEGIE MELL
   PETTERSSON M, 1992, LECT NOTES COMPUT SC, V641, P258
   Pfenning F., 1999, Automated Deduction - CADE-16. 16th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.1632), P202
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plotkin G. D., 1981, TECHNICAL REPORT
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P3, DOI 10.1016/j.jlap.2004.03.009
   Popplestone R. J., 1968, MACHINE INTELLIGENCE, P393
   Popplestone R. J., 1968, MACHINE INTELLIGENCE, V2, P185
   Pottier Francois., 2005, ADV TOPICS TYPES PRO, P387
   Pucella Riccardo, 2001, NOTES PROGRAMMING ST
   Ramsey FP, 1926, P LOND MATH SOC, V25, P338
   Ramsey N, 2005, ACM SIGPLAN NOTICES, V40, P27, DOI 10.1145/1090189.1086371
   Ramsey Norman, 1990, CSTR26290 PRINC U DE
   Remy D., 1993, Extension of ML type system with a sorted equation theory on types
   Reppy J, 1996, ACM SIGPLAN NOTICES, V31, P171, DOI 10.1145/249069.231412
   REPPY JH, 1991, SIGPLAN NOTICES, V26, P293, DOI 10.1145/113446.113470
   REPPY JH, 1988, SIGPLAN NOTICES, V23, P250, DOI 10.1145/960116.54015
   Reppy J, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P257
   Reppy John H., 1996, SAFE INTERFACE SOCKE
   Reppy John H, 1989, 891068 CORN U DEP CO
   Reppy John H., 1993, BL01126194032912TM A
   Reppy JohnH., 1999, CONCURRENT PROGRAMMI
   Reynolds J. C., 1974, Programming Symposium, P408
   REYNOLDS JC, 1970, COMMUN ACM, V13, P308, DOI 10.1145/362349.362364
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Robin Milner, 1983, DISCUSSION ROD BURST
   ROBINSON JA, 1965, J ACM, V12, P23, DOI 10.1145/321250.321253
   Rossberg A, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000205
   Rossberg A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P35, DOI 10.1145/2784731.2784738
   Rossberg A, 2014, J FUNCT PROGRAM, V24, P529, DOI 10.1017/S0956796814000264
   Rossberg A, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2450136.2450137
   Rossberg Andreas., 2008, HAMLET S BECOME NOT
   Rossberg Andreas., 2013, DEFECTS REVISED DEFI
   Rossberg Andreas., HAMLET NOT STANDARD
   Russell B., 1913, PRINCIPIA MATH
   Russell Bertrand., 1967, FREGE G DEL, P124
   Russo Claudio, 1999, DEFINITION NONSTANDA
   Russo Claudio V., 1998, ECSLFCS98389 U ED
   Russo CV, 2001, ACM SIGPLAN NOTICES, V36, P50, DOI 10.1145/507669.507644
   Russo CV, 1999, LECT NOTES COMPUT SC, V1702, P80
   Ryan Mark, 1992, HDB LOGIC COMPUTER S, V1, P1
   Saha B., 1998, Types im Compilation. Second International Workshop, TIC '98 Proceedings, P156, DOI 10.1007/BFb0055517
   Saito Nobuo, 1982, ML SYSTEM VAX UNIX
   Sannella Donald, 1985, C 12 ANN ACM S PRINC, P67, DOI [10.1145/318593.318614, DOI 10.1145/318593.318614]
   Sannella Donald, 1985, DENOTATIONAL SEMANTI
   Schilling Thomas, 2011, TRENDS FUNCTIONAL PR, P1, DOI 10.1007/978-3-642-32037-8_1
   Schonfinkel M, 1924, MATH ANN, V92, P305, DOI 10.1007/BF01448013
   School of Computer Science The University of Birmingham, 2019, INF POPL POP 11
   Schürmann C, 2009, LECT NOTES COMPUT SC, V5674, P79, DOI 10.1007/978-3-642-03359-9_7
   Scott Dana., 1971, P S COMPUTERS AUTOMA, P19
   Seldin Jonathan P., 2009, HDB HIST LOGIC, V5
   Sestoft P., 1996, Partial Evaluation. International Seminar. Selected Papers, P446
   Shao Z, 2000, ACM T PROGR LANG SYS, V22, P129, DOI 10.1145/345099.345125
   SHAO Z, 1995, SIGPLAN NOTICES, V30, P116, DOI 10.1145/223428.207123
   Shao Zhong., 1998, ICFP 98, DOI DOI 10.1145/289423.289460
   Sharrad J, 2018, PROCEEDINGS OF THE 30TH SYMPOSIUM ON IMPLEMENTATION AND APPLICATION OF FUNCTIONAL LANGUAGES (IFL 2018), P13, DOI 10.1145/3310232.3310243
   Shipman A. L., 2002, UNIX SYSTEM PROGRAMM
   Sivaramakrishnan KC, 2014, J FUNCT PROGRAM, V24, P613, DOI 10.1017/S0956796814000161
   Solomon Marvin H., 1978, P 5 ACM SIGACTSIGPLA, P31, DOI DOI 10.1145/512760.512765
   Steel T. B., 1966, Formal Language Description Languages.for Computer Programming
   Stone C. A., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P214, DOI 10.1145/325694.325724
   Stone CA, 2006, ACM T COMPUT LOG, V7, P676, DOI 10.1145/1183278.1183281
   Stone Christopher A., 2000, THESIS CARNEGIE MELL
   Strachey C., 2000, Higher-Order and Symbolic Computation, V13, P11, DOI 10.1023/A:1010000313106
   Strachey C., 1966, CPL REFERENCE MANUAL
   Stuckey P.J., 2004, WORKSHOP HASKELL, P80, DOI DOI 10.1145/1017472.1017486
   Swasey David, 2006, CMUCS06113 CARN MELL
   Tack Guido, 2006, ALICE LOOKING GLASS, V5, P79
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   Tarditi D, 2004, ACM SIGPLAN NOTICES, V39, P554, DOI 10.1145/989393.989449
   Tarditi D, 1996, ACM SIGPLAN NOTICES, V31, P181, DOI 10.1145/249069.231414
   Tarditi David., 1996, DESIGN IMPLEMENTATIO
   THATCHER JW, 1982, ACM T PROGR LANG SYS, V4, P711, DOI 10.1145/69622.357192
   The University of Cambridge, 2019, IS
   Tip F, 2001, ACM T SOFTW ENG METH, V10, P5, DOI 10.1145/366378.366379
   Tofte M, 1998, ACM T PROGR LANG SYS, V20, P724, DOI 10.1145/291891.291894
   TOFTE M, 1990, INFORM COMPUT, V89, P1, DOI 10.1016/0890-5401(90)90018-D
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tofte M., 2004, Higher-Order and Symbolic Computation, V17, P245, DOI 10.1023/B:LISP.0000029446.78563.a4
   TOFTE M, 1988, THESIS U EDINBURGH
   Tofte Mads, 1987, POLYMORPHIC REFERENC
   Tofte Mads, 1994, P 21 ACM SIGPLAN SIG, P188, DOI DOI 10.1145/174675.177855
   Tofte Mads, 1989, ECSLFCS8973 U ED DEP
   Tolmach A., 1998, Journal of Functional Programming, V8, P367, DOI 10.1017/S0956796898003086
   Tolmach A., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P1, DOI 10.1145/182409.182411
   Tolmach Andrew Peter, 1992, THESIS PRINCETON U P
   Ullman JeffreyD., 1998, Elements of ML Programming
   Universitat des Saarlandes, 2014, ALICE
   University of Copenhagen, 2019, TRY MLKIT STAND ML C
   van Wijngaarden A., 1969, REPORT ALGORITHMIC L
   VANINWEGEN M, 1993, LECT NOTES COMPUTER, V780, P61, DOI DOI 10.1007/3-540-57826-9_125
   VanInwegen Myra., 1996, THESIS U PENNSYLVANI
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wadsworth Christopher, 1983, POLYMORPHISM ML LCF, V1, P5
   Wand Mitchell, 1986, POPL, P38, DOI [DOI 10.1145/512644.512648, 10.1145/512644.512648]
   Wells JB, 2002, J FUNCT PROGRAM, V12, P183, DOI 10.1017/S0956796801004245
   Westrick S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371115
   Wong L, 2000, ACM SIGPLAN NOTICES, V35, P1, DOI 10.1145/357766.351241
   Wozencraft J. M., 1970, NOTES PROGRAMMING LI
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
   WRIGHT AK, 1992, LECT NOTES COMPUT SC, V582, P473
   Wright Andrew K, 1993, TR93200 RIC U
   Wright Andrew K, 1991, TR91160 COMP RIC U
   Wu B, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133930
   Wulf W. A., 1976, IEEE Transactions on Software Engineering, VSE-2, P253, DOI 10.1109/TSE.1976.233830
   Zhang DF, 2014, ACM SIGPLAN NOTICES, V49, P569, DOI 10.1145/2535838.2535870
NR 373
TC 5
Z9 6
U1 0
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 86
DI 10.1145/3386336
PG 100
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900017
OA gold
DA 2024-07-18
ER

PT J
AU Beckett, R
   Gupta, A
   Mahajan, R
   Walker, D
AF Beckett, Ryan
   Gupta, Aarti
   Mahajan, Ratul
   Walker, David
TI Abstract Interpretation of Distributed Network Control Planes
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Network Verification; Network Simulation; Network Reliability; Abstract
   Interpretation; Network Control Plane; Distributed Routing Protocols;
   Router Configuration Verification
AB The control plane of most computer networks runs distributed routing protocols that determine if and how traffic is forwarded. Errors in the configuration of network control planes frequently knock down critical online services, leading to economic damage for service providers and significant hardship for users. Validation via ahead-of-time simulation can help find configuration errors but such techniques are expensive or even intractable for large industrial networks. We explore the use of abstract interpretation to address this fundamental scaling challenge and find that the right abstractions can reduce the asymptotic complexity of network simulation. Based on this observation, we build a tool called ShapeShifter for reachability analysis. On a suite of 127 production networks from a large cloud provider, ShapeShifter provides an asymptotic improvement in runtime and memory over the state-of-the-art simulator. These gains come with a minimal loss in precision. Our abstract analysis accurately predicts reachability for all destinations for 95% of the networks and for most destinations for the remaining 5%. We also find that abstract interpretation of network control planes not only speeds up existing analyses but also facilitates new kinds of analyses. We illustrate this advantage through a new destination "hijacking" analysis for the border gateway protocol (BGP), the globally-deployed routing protocol.
C1 [Beckett, Ryan] Microsoft Res, Redmond, WA 98052 USA.
   [Gupta, Aarti; Walker, David] Princeton Univ, Princeton, NJ 08544 USA.
   [Mahajan, Ratul] Univ Washington, Seattle, WA 98195 USA.
C3 Microsoft; Princeton University; University of Washington; University of
   Washington Seattle
RP Beckett, R (corresponding author), Microsoft Res, Redmond, WA 98052 USA.
EM rbeckett@princeton.edu; aartig@princeton.edu; ratul@cs.washington.edu;
   dpw@princeton.edu
OI Gupta, Aarti/0000-0001-6676-9400; Walker, David/0000-0003-3681-149X;
   Mahajan, Ratul/0009-0005-8005-6948
FU National Science Foundation [NeTS 1704336, FMitF 1837030]; DARPA
   Dispersed Computing program [HR0011-17-C-0047]; Facebook Research Award
   on "Network control plane verification at scale."
FX This work was supported in part by the National Science Foundation
   awards NeTS 1704336 and FMitF 1837030, DARPA Dispersed Computing program
   under award number HR0011-17-C-0047 and a Facebook Research Award on
   "Network control plane verification at scale."
CR Al-Fares M, 2008, ACM SIGCOMM COMP COM, V38, P63, DOI 10.1145/1402946.1402967
   Alpernas Kalev, 2018, STAT AN S
   Anderson CJ, 2014, ACM SIGPLAN NOTICES, V49, P113, DOI 10.1145/2535838.2535862
   [Anonymous], 2012, HEADER SPACE ANAL ST
   Ball T, 2001, ACM SIGPLAN NOTICES, V36, P203, DOI 10.1145/381694.378846
   Beckett R, 2018, PROCEEDINGS OF THE 2018 CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '18), P476, DOI 10.1145/3230543.3230583
   Beckett Ryan, 2017, SIGCOMM
   Blanchet B, 2003, ACM SIGPLAN NOTICES, V38, P196, DOI 10.1145/780822.781153
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Daggitt ML, 2018, PROCEEDINGS OF THE 2018 CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '18), P103, DOI 10.1145/3230543.3230561
   Daggitt ML, 2018, I C NETWORK PROTOCOL, P335, DOI [10.1109/ICNP.2018.00049, 10.1109/1CNP.2018.00049]
   Dimitropoulos XA, 2006, COMPUT NETW, V50, P2013, DOI 10.1016/j.comnet.2005.09.033
   Fabrikant A, 2011, IEEE INFOCOM SER, P2975, DOI 10.1109/INFCOM.2011.5935139
   Fayaz SK, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P217
   Feamster Nick, 2005, THESIS MIT
   Filé G, 1999, THEOR COMPUT SCI, V222, P77, DOI 10.1016/S0304-3975(98)00007-3
   Fogel Ari, 2015, NSDI
   Foster N, 2016, LECT NOTES COMPUT SC, V9632, P282, DOI 10.1007/978-3-662-49498-1_12
   Gao LX, 2001, IEEE ACM T NETWORK, V9, P681, DOI 10.1109/90.974523
   Gember-Jacobson A, 2016, PROCEEDINGS OF THE 2016 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '16), P300, DOI 10.1145/2934872.2934876
   Giannarakis N, 2019, LECT NOTES COMPUT SC, V11562, P305, DOI 10.1007/978-3-030-25543-5_18
   Griffin TG, 2005, ACM SIGCOMM COMP COM, V35, P1, DOI 10.1145/1090191.1080094
   Griffin TG, 2002, IEEE ACM T NETWORK, V10, P232, DOI 10.1109/90.993304
   Kazemian P., 2013, NSDI
   Khurshid A, 2012, ACM SIGCOMM COMP COM, V42, P467, DOI 10.1145/2377677.2377766
   Lapukhov P., 2015, INTERNET DRAFT
   Liljenzin Olle, 2013, ABS13013388 CORR
   Lopes NP, 2019, LECT NOTES COMPUT SC, V11388, P386, DOI 10.1007/978-3-030-11245-5_18
   Lopes NunoP., 2015, NSDI
   Mai H, 2011, ACM SIGCOMM COMP COM, V41, P290, DOI 10.1145/2043164.2018470
   Miné A, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P310, DOI 10.1109/WCRE.2001.957836
   Monat R, 2017, LECT NOTES COMPUT SC, V10145, P386, DOI 10.1007/978-3-319-52234-0_21
   Narain Sanjay, 2016, J CYBER SECURITY INF, V1
   PLOTKIN G. D., 2016, POPL
   Prabhu S, 2017, PROCEEDINGS OF THE 2017 ASIA-PACIFIC WORKSHOP ON NETWORKING (APNET '17), P92, DOI 10.1145/3106989.3106991
   Redistributing Routing Protocols, 2012, REDISTRIBUTING ROUTI
   Roberts D., 2018, It's been a week and customers are still mad at BB&T
   Sharwood Simon., 2016, Google cloud wobbles as workers patch wrong routers
   Sobrinho JL, 2005, IEEE ACM T NETWORK, V13, P1160, DOI 10.1109/TNET.2005.857111
   Sverdlik Y., 2017, United says it outage resolved, dozen flights canceled monday
   Sverdlik Yevgenly., 2012, Microsoft: misconfigured network device led to azure outage
   Tweney D., 2013, 5 MINUTE OUTAGE COST
   Varadhan K., 1996, PERSISTENT ROUTE OSC
   Wang Anduo, 2012, IEEE ACM T NETWORK, V20, P6
   Weitz K., 2016, NetPL
NR 49
TC 21
Z9 25
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 42
DI 10.1145/3371110
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400043
OA gold
DA 2024-07-18
ER

PT J
AU Clairambault, P
   de Visme, M
AF Clairambault, Pierre
   de Visme, Marc
TI Full Abstraction for the Quantum Lambda-Calculus
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Quantum Programming; Full Abstraction; Game Semantics
ID GAME SEMANTICS; MODEL
AB Quantum programming languages permit a hardware independent, high-level description of quantum algorithms. In particular, the quantum lambda-calculus is a higher-order language with quantum primitives, mixing quantum data and classical control. Giving satisfactory denotational semantics to the quantum lambda-calculus is a challenging problem that has attracted significant interest. In the past few years, both static (the quantum relational model) and dynamic (quantum game semantics) denotational models were given, with matching computational adequacy results. However, no model was known to be fully abstract.
   Our first contribution is a full abstraction result for the games model of the quantum lambda-calculus. Full abstraction holds with respect to an observational quotient of strategies, obtained by summing valuations of all states matching a given observable. Our proof method for full abstraction extends a technique recently introduced to prove full abstraction for probabilistic coherence spaces with respect to probabilistic PCF.
   Our second contribution is an interpretation-preserving functor from quantum games to the quantum relational model, extending a long line of work on connecting static and dynamic denotational models. From this, it follows that the quantum relational model is fully abstract as well.
   Altogether, this gives a complete denotational landscape for the semantics of the quantum lambda-calculus, with static and dynamic models related by a clean functorial correspondence, and both fully abstract.
C1 [Clairambault, Pierre; de Visme, Marc] Univ Lyon, EnsL, UCBL, CNRS,LIP, F-69364 Lyon 07, France.
C3 Ecole Normale Superieure de Lyon (ENS de LYON); Centre National de la
   Recherche Scientifique (CNRS)
RP Clairambault, P (corresponding author), Univ Lyon, EnsL, UCBL, CNRS,LIP, F-69364 Lyon 07, France.
EM Pierre.Clairambault@ens-lyon.fr; Marc.de-Visme@ens-lyon.fr
FU ANR project DyVerSe [ANR-19-CE48-0010-01]; Labex MiLyon of Universite de
   Lyon, within the program lInvestissements d'Avenirz [ANR-10-LABX-0070,
   ANR11-IDEX-0007]; Agence Nationale de la Recherche (ANR)
   [ANR-19-CE48-0010] Funding Source: Agence Nationale de la Recherche
   (ANR)
FX We are grateful to the anonymous reviewers for their helpful comments
   and suggestions. This work is supported by ANR project DyVerSe
   (ANR-19-CE48-0010-01) and Labex MiLyon (ANR-10-LABX-0070) of Universite
   de Lyon, within the program lInvestissements d'Avenirz
   (ANR11-IDEX-0007), operated by the French National Research Agency
   (ANR).
CR Abramsky S., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P431, DOI 10.1109/LICS.1999.782638
   Abramsky S, 2000, INFORM COMPUT, V163, P409, DOI [10.1006/inco.2000.2930, 10.1006/inco2000.2930]
   [Anonymous], 1996, ELECT NOTES THEOR CO, DOI DOI 10.1016/S1571-0661(05)80398-6
   Baillot Patrick, 1997, SELECTED PAPERS SER, P56, DOI 10.1007/BFb0028007
   Bierman Gavin, 1993, THESIS U CAMBRIDGE C
   Boudes P, 2009, LECT NOTES COMPUT SC, V5608, P65, DOI 10.1007/978-3-642-02273-9_7
   Calderon AC, 2010, ELECTRON NOTES THEOR, V265, P231, DOI 10.1016/j.entcs.2010.08.014
   Castellan S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290340
   Castellan S, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P215, DOI 10.1145/3209108.3209187
   Castellan S, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(1:18)2019
   Castellan S, 2015, IEEE S LOG, P232, DOI 10.1109/LICS.2015.31
   Castellan Simon, 2017, THESIS U LYON FRANCE
   Castellan Simon, 2014, JOINT M 23 EACSL ANN, V28, P10, DOI [10.1145/2603088.2603141, DOI 10.1145/2603088.2603141]
   Castellan Simon, 2017, LMCS, V13
   Castellan Simon, 2016, 27 INT C CONCURRENCY, DOI DOI 10.4230/LIPICS.CONCUR.2016.32
   Clairambault P, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290345
   Clairambault P, 2012, IEEE S LOG, P235, DOI 10.1109/LICS.2012.34
   Cockett JRB, 1997, J PURE APPL ALGEBRA, V114, P133, DOI 10.1016/0022-4049(95)00160-3
   Dal Lago U, 2008, LECT NOTES COMPUT SC, V5213, P230, DOI 10.1007/978-3-540-87531-4_18
   Delbecquea Y, 2011, ELECTRON NOTES THEOR, V270, P41, DOI 10.1016/j.entcs.2011.01.005
   Dybjer P, 2002, LECT NOTES COMPUT SC, V2395, P137
   Ehrhard T, 2014, ACM SIGPLAN NOTICES, V49, P309, DOI 10.1145/2535838.2535865
   Ehrhard T, 2012, THEOR COMPUT SCI, V424, P20, DOI 10.1016/j.tcs.2011.11.027
   Gisin N, 2002, REV MOD PHYS, V74, P145, DOI 10.1103/RevModPhys.74.145
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Harmer R., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P422, DOI 10.1109/LICS.1999.782637
   Hasuo I, 2017, ANN PURE APPL LOGIC, V168, P404, DOI 10.1016/j.apal.2016.10.010
   Hyland JME, 2000, INFORM COMPUT, V163, P285, DOI [10.1006/inco.2000.2917, 10.1006/inco2000.2917]
   Hyland M., 1999, Electronic Notes in Theoretical Computer Science, V29
   Hyland M, 2003, THEOR COMPUT SCI, V294, P183, DOI 10.1016/S0304-3975(01)00241-9
   Joyal A, 1996, MATH PROC CAMBRIDGE, V119, P447, DOI 10.1017/S0305004100074338
   Laird J, 2013, INFORM COMPUT, V222, P247, DOI 10.1016/j.ic.2012.10.015
   Malherbe Octavio, 2013, Computation, Logic, Games, and Quantum Foundations. The Many Facets of Samson Abramsky. Essays Dedicated to Samson Abramsky on the Occasion of His 60th Birthday: LNCS 7860, P178, DOI 10.1007/978-3-642-38164-5_13
   Malherbe Octavio, 2013, THESIS U OTTAWA
   Mellies P., 2009, Panoramas et Syntheses, V27, P15
   Melliès PA, 2005, IEEE S LOG, P386
   Melliès PA, 2006, THEOR COMPUT SCI, V358, P200, DOI 10.1016/j.tcs.2006.01.016
   Melliès PA, 2010, ANN PURE APPL LOGIC, V161, P632, DOI 10.1016/j.apal.2009.07.018
   Milner R., 1977, Theoretical Computer Science, V4, P1, DOI 10.1016/0304-3975(77)90053-6
   Murawski AS, 2003, THEOR COMPUT SCI, V294, P269, DOI 10.1016/S0304-3975(01)00244-4
   Pagani M, 2014, ACM SIGPLAN NOTICES, V49, P647, DOI 10.1145/2535838.2535879
   Power J., 1997, Mathematical Structures in Computer Science, V7, P453, DOI 10.1017/S0960129597002375
   Power John, 1999, LNCS, V1644
   Rideau S, 2011, IEEE S LOG, P409, DOI 10.1109/LICS.2011.13
   Selinger P, 2004, MATH STRUCT COMP SCI, V14, P527, DOI 10.1017/S0960129504004256
   Selinger P, 2006, MATH STRUCT COMP SCI, V16, P527, DOI 10.1017/S0960129506005238
   Selinger P, 2008, ELECTRON NOTES THEOR, V210, P123, DOI 10.1016/j.entcs.2008.04.022
   Selinger P, 2007, ELECTRON NOTES THEOR, V170, P139, DOI 10.1016/j.entcs.2006.12.018
   Shor PW, 1997, SIAM J COMPUT, V26, P1484, DOI 10.1137/S0036144598347011
   Tsukada T, 2015, IEEE S LOG, P220, DOI 10.1109/LICS.2015.30
   Winskel G, 2015, LECT NOTES COMPUT SC, V9399, P69, DOI 10.1007/978-3-319-25150-9_6
   Winskel G, 2007, ELECTRON NOTES THEOR, V172, P611, DOI 10.1016/j.entcs.2007.02.022
   Zhao DS, 2010, THEOR COMPUT SCI, V411, P2167, DOI 10.1016/j.tcs.2010.02.020
NR 53
TC 7
Z9 7
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 63
DI 10.1145/3371131
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400064
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Pavlogiannis, A
AF Pavlogiannis, Andreas
TI Fast, Sound, and Effectively Complete Dynamic Race Prediction
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrency; race detection; predictive analyses
ID DATARACE DETECTION
AB Writing concurrent programs is highly error-prone due to the nondeterminism in interprocess communication. The most reliable indicators of errors in concurrency are data races, which are accesses to a shared resource that can be executed concurrently. We study the problem of predicting data races in lock-based concurrent programs. The input consists of a concurrent trace t, and the task is to determine all pairs of events oft that constitute a data race. The problem lies at the heart of concurrent verification and has been extensively studied for over three decades. However, existing polynomial-time sound techniques are highly incomplete and can miss simple races.
   In this work we develop M2: a new polynomial-time algorithm for this problem, which has no false positives. In addition, our algorithm is complete for input traces that consist of two processes, i.e., it provably detects all races in the trace. We also develop sufficient criteria for detecting completeness dynamically in cases of more than two processes. We make an experimental evaluation of our algorithm or a challenging set of benchmarks taken from recent literature on the topic. Our algorithm soundly reports hundreds of real races, many of which are missed by existing methods. In addition, using our dynamic completeness criteria, M2 concludes that it has detected all races in the benchmark set, hence the reports are both sound and complete. Finally, its running times are comparable, and often smaller than the theoretically fastest, yet highly incomplete, existing methods. To our knowledge, M2 is the first sound algorithm that achieves such a level of performance on both running time and completeness of the reported races.
C1 [Pavlogiannis, Andreas] Aarhus Univ, Aabogade 34, DK-8200 Aarhus, Denmark.
C3 Aarhus University
RP Pavlogiannis, A (corresponding author), Aarhus Univ, Aabogade 34, DK-8200 Aarhus, Denmark.
EM pavlogiannis@cs.au.dk
RI Pavlogiannis, Andreas/X-6831-2018
OI Pavlogiannis, Andreas/0000-0002-8943-0722
FU Austrian Science Fund (FWF) [J-4220]
FX I am grateful to Umang Mathur for his valuable assistance in the
   experimental part of the paper, to Viktor Kuncak for his insightful
   comments in earlier drafts, and to anonymous reviewers for their
   constructive feedback. This work is partly supported by the Austrian
   Science Fund (FWF) Schrodinger grant J-4220.
CR Banerjee U., 2006, PADTAD 06, P69, DOI [10.1145/1147403.1147416, DOI 10.1145/1147403.1147416]
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bond, 2019, DEPENDENCE AWARE UNB
   Bond MD, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P255, DOI 10.1145/1806596.1806626
   Chen F, 2007, LECT NOTES COMPUT SC, V4590, P240
   Chen F, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P221, DOI 10.1145/1368088.1368119
   Choi JD, 2002, ACM SIGPLAN NOTICES, V37, P258, DOI 10.1145/543552.512560
   Christiaens M, 2001, LECT NOTES COMPUT SC, V2074, P761
   DINNING A, 1991, SIGPLAN NOTICES, V26, P85, DOI 10.1145/127695.122767
   Elmas T, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P245, DOI 10.1145/1250734.1250762
   Farchi E., 2003, IPDPS 03, p286.2
   Farzan A, 2009, LECT NOTES COMPUT SC, V5643, P248, DOI 10.1007/978-3-642-02658-4_21
   FENWICK PM, 1994, SOFTWARE PRACT EXPER, V24, P327, DOI 10.1002/spe.4380240306
   Flanagan C, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P121, DOI 10.1145/1542476.1542490
   Gray Jim, 1985, WHY DO COMPUTERS STO
   Helmbold D. P., 1991, Proceedings of the Twenty-Fourth Annual Hawaii International Conference on System Sciences (Cat. No.91TH0350-9), P408, DOI 10.1109/HICSS.1991.184003
   Huang J, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P439, DOI 10.1145/2786805.2786840
   Huang J, 2014, ACM SIGPLAN NOTICES, V49, P337, DOI [10.1145/2666356.2594315, 10.1145/2594291.2594315]
   Kahlon V, 2005, LECT NOTES COMPUT SC, V3576, P505
   Kim K, 2009, IEEE INT CONF AUTOM, P495, DOI 10.1109/ASE.2009.82
   Kini D, 2017, ACM SIGPLAN NOTICES, V52, P157, DOI [10.1145/3062341.3062374, 10.1145/3140587.3062374]
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lidbury C, 2017, ACM SIGPLAN NOTICES, V52, P443, DOI 10.1145/3093333.3009857
   Liu Peng., 2016, ISSTA, P59
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Marino D, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P134, DOI 10.1145/1542476.1542491
   Mathur Umang, 2018, P ACM PROGR LANG, DOI DOI 10.1145/3276515
   Mattern F., 1989, Parallel and Distributed Algorithms. Proceedings of the International Workshop, P215
   MAZURKIEWICZ A, 1987, LECT NOTES COMPUT SC, V255, P279
   Musuvathi M., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, P267
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   O'Callahan R, 2003, ACM SIGPLAN NOTICES, V38, P166
   Pavlogiannis, 2019, ARXIVARXIV190108857
   Pozniansky E, 2003, ACM SIGPLAN NOTICES, V38, P178, DOI 10.1145/966049.781529
   Pratikakis P, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1889997.1890000
   Raman R, 2012, ACM SIGPLAN NOTICES, V47, P531, DOI [10.1145/2345156.2254127, 10.1145/2345156.1993502]
   Roemer J, 2018, ACM SIGPLAN NOTICES, V53, P374, DOI [10.1145/3296979.3192385, 10.1145/3192366.3192385]
   Said M, 2011, LECT NOTES COMPUT SC, V6617, P313, DOI 10.1007/978-3-642-20398-5_23
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   SCHONBERG E, 1989, SIGPLAN NOTICES, V24, P285, DOI 10.1145/74818.74844
   Sen K, 2005, LECT NOTES COMPUT SC, V3535, P211
   Sen K, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P11, DOI 10.1145/1375581.1375584
   Shi Y, 2010, ACM SIGPLAN NOTICES, V45, P160, DOI 10.1145/1932682.1869474
   Smaragdakis Y, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P387
   Smith L. A., 2001, P 2001 ACMIEEE C SUP, P8, DOI [10.1145/582034.582042, DOI 10.1145/582034.582042]
   Sorrentino Francesco, 2010, P 18 ACM SIGSOFT INT, P37, DOI DOI 10.1145/1882291.1882300
   SPEC, 2008, SPEC REL FREE SPECJV
   von Praun C, 2001, ACM SIGPLAN NOTICES, V36, P70, DOI 10.1145/504311.504288
   Voung J. W., 2007, P 6 JOINT M EUROPEAN, P205
   Wang C, 2009, LECT NOTES COMPUT SC, V5850, P256, DOI 10.1007/978-3-642-05089-3_17
   Yu M, 2019, INT J PARALLEL PROG, V47, P805, DOI 10.1007/s10766-018-0579-5
   Yu Y., 2005, P 20 ACM S OP SYST P, P221
   Zhai K., 2012, P 2012 INT S SOFTW T, P221
NR 53
TC 23
Z9 24
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 17
DI 10.1145/3371085
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400018
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Bavishi, R
   Lemieux, C
   Fox, R
   Sen, K
   Stoica, I
AF Bavishi, Rohan
   Lemieux, Caroline
   Fox, Roy
   Sen, Koushik
   Stoica, Ion
TI AutoPandas: Neural-Backed Generators for Program Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE pandas; python; program synthesis; programming-by-example; generators;
   graph neural networks
AB Developers nowadays have to contend with a growing number of APIs. While in the long-term they are very useful to developers, many modern APIs have an incredibly steep learning curve, due to their hundreds of functions handling many arguments, obscure documentation, and frequently changing semantics. For APIs that perform data transformations, novices can often provide an I/O example demonstrating the desired transformation, but may be stuck on how to translate it to the API. A programming-by-example synthesis engine that takes such I/O examples and directly produces programs in the target API could help such novices. Such an engine presents unique challenges due to the breadth of real-world APIs, and the often-complex constraints over function arguments. We present a generator-based synthesis approach to contend with these problems. This approach uses a program candidate generator, which encodes basic constraints on the space of programs. We introduce neural-backed operators which can be seamlessly integrated into the program generator. To improve the efficiency of the search, we simply use these operators at non-deterministic decision points, instead of relying on domain-specific heuristics. We implement this technique for the Python pandas library in AUTOPANDAS. AUTOPANDAS supports 119 pandas dataframe transformation functions. We evaluate AUTOPANDAS on 26 real-world benchmarks and find it solves 17 of them.
C1 [Bavishi, Rohan; Lemieux, Caroline; Sen, Koushik; Stoica, Ion] Univ Calif Berkeley, Comp Sci Div, Berkeley, CA 94720 USA.
   [Fox, Roy] Univ Calif Irvine, Dept Comp Sci, Irvine, CA 92717 USA.
C3 University of California System; University of California Berkeley;
   University of California System; University of California Irvine
RP Bavishi, R (corresponding author), Univ Calif Berkeley, Comp Sci Div, Berkeley, CA 94720 USA.
EM rbavishi@cs.berkeley.edu; clemieux@cs.berkeley.edu; royf@uci.edu;
   ksen@cs.berkeley.edu; istoica@cs.berkeley.edu
FU National Science Foundation [1409872, 1817122]; Direct For Computer &
   Info Scie & Enginr [1409872, 1817122] Funding Source: National Science
   Foundation; Division Of Computer and Network Systems [1817122] Funding
   Source: National Science Foundation; Division of Computing and
   Communication Foundations [1409872] Funding Source: National Science
   Foundation
FX This material is based upon work supported by the National Science
   Foundation under Grant No. 1409872 and Grant No. 1817122. Any opinions,
   findings, and conclusions or recommendations expressed in this material
   are those of the author and do not necessarily reflect the views of the
   National Science Foundation.
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   Allamanis M., 2018, INT C LEARN REPR ICL
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 2017, SIGPLAN NOT, DOI DOI 10.1145/3140587.3062351
   [Anonymous], 2014, PANDAS PROJECT
   [Anonymous], 2016, SIGPLAN NOT, DOI DOI 10.1145/2980983.2908093
   Balog Matej, 2016, ARXIV161101989
   Böttinger K, 2018, 2018 IEEE SYMPOSIUM ON SECURITY AND PRIVACY WORKSHOPS (SPW 2018), P116, DOI 10.1109/SPW.2018.00026
   Bunel R., 2018, ARXIV180504276
   Cho K., 2014, ARXIV14061078
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Dai HJ, 2017, ADV NEUR IN, V30
   Devlin Jacob, 2017, ICML
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   He YY, 2018, PROC VLDB ENDOW, V11, P1165, DOI 10.14778/3231751.3231766
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Kalyan Ashwin, 2018, ICLR
   Kingma D. P., 2014, arXiv
   Kool W., 2019, P INT C LEARN REPR
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   Li Y., 2015, ARXIV
   Löscher A, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P46, DOI 10.1145/3092703.3092711
   Microsoft, 2017, GAT GRAPH NEUR NETW
   Padhye R, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P329, DOI 10.1145/3293882.3330576
   Parisotto E., 2017, INT C LEARN REPR ICL
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2594291.2594321, 10.1145/2666356.2594321]
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2980983.2908102, 10.1145/2908080.2908102]
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Solar-Lezama Armando, 2008, THESIS
   Wang XD, 2017, ADV SOC SCI EDUC HUM, V72, P63
   Yaghmazadeh N, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133887
   Yaghmazadeh N, 2018, PROC VLDB ENDOW, V11, P580, DOI 10.1145/3177732.3177735
NR 37
TC 39
Z9 49
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 168
DI 10.1145/3360594
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500053
OA gold
DA 2024-07-18
ER

PT J
AU Hamza, J
   Voirol, N
   Kuncak, V
AF Hamza, Jad
   Voirol, Nicolas
   Kuncak, Viktor
TI System FR: Formalized Foundations for the Stainless Verifier
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE software verification; dependent types; recursive types; System F; SMT
ID TERMINATION
AB We present the design, implementation, and foundation of a verifier for higher-order functional programs with generics and recursive data types. Our system supports proving safety and termination using preconditions, postconditions and assertions. It supports writing proof hints using assertions and recursive calls. To formalize the soundness of the system we introduce System FR, a calculus supporting System F polymorphism, dependent refinement types, and recursive types (including recursion through contravariant positions of function types). Through the use of sized types, System FR supports reasoning about termination of lazy data structures such as streams. We formalize a reducibility argument using the Coq proof assistant and prove the soundness of a type-checker with respect to call-by-value semantics, ensuring type safety and normalization for typeable programs. Our program verifier is implemented as an alternative verification-condition generator for the Stainless tool, which relies on the Inox SMT-based solver backend for automation. We demonstrate the efficiency of our approach by verifying a collection of higher-order functional programs comprising around 14000 lines of polymorphic higher-order Scala code, including graph search algorithms, basic number theory, monad laws, functional data structures, and assignments from popular Functional Programming MOOCs.
C1 [Hamza, Jad; Voirol, Nicolas] Ecole Polytech Fed Lausanne, LARA, Lausanne, Switzerland.
   [Kuncak, Viktor] Ecole Polytech Fed Lausanne, EPFI IC LARA INR 318 Stn 14, Lausanne, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; Ecole Polytechnique
   Federale de Lausanne; Swiss Federal Institutes of Technology Domain;
   Ecole Polytechnique Federale de Lausanne
RP Hamza, J (corresponding author), Ecole Polytech Fed Lausanne, LARA, Lausanne, Switzerland.
EM jad.hamza@epfl.ch; nicolas.voirol@epfl.ch; viktor.kuncak@epfl.ch
OI Kuncak, Viktor/0000-0001-7044-9522
FU Swiss National Science Foundation [200021_175676]; Swiss National
   Science Foundation (SNF) [200021_175676] Funding Source: Swiss National
   Science Foundation (SNF)
FX Work supported in part by Swiss National Science Foundation project
   200021_175676 lScaling Predicate Typesz. We thank Ravichandhran
   Kandhadai Madhavan for numerous discussions about termination for
   higher-order functional programs; Romain Ruetschi for his valuable
   contributions to Stainless implementation; Paolo G. Giarrusso for
   interesting discussions and very relevant pointers on type theory;
   Andreas Abel for explaining us how to mix induction and co-induction in
   Agda. Thanks to Yoan Geran who implemented another prototype of our
   algorithm, found formalization discrepancies and proposed improvements
   to the typing rules.
CR Abel A, 2004, RAIRO-THEOR INF APPL, V38, P277, DOI 10.1051/ita:2004015
   Abel A, 2013, ACM SIGPLAN NOTICES, V48, P185, DOI [10.1145/2500365.2500591, 10.1145/2544174.2500591]
   Abel A, 2012, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.77.1
   Abel A, 2010, ELECTRON P THEOR COM, P14, DOI 10.4204/EPTCS.43.2
   Abel A, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(2:3)2008
   Abel Andreas, 2007, Ph. D. Dissertation
   Ahman D, 2017, ACM SIGPLAN NOTICES, V52, P515, DOI 10.1145/3093333.3009878
   Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Amin Nada, 2016, THESIS EPFL, DOI [10.5075/epfl-thesis-7156, DOI 10.5075/EPFL-THESIS-7156]
   Anand Abhishek, 2014, Interactive Theorem Proving. 5th International Conference, ITP 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8558, P27, DOI 10.1007/978-3-319-08970-6_3
   [Anonymous], 1998, Purely Functional Data Structures
   Barnett M, 2005, LECT NOTES COMPUT SC, V3362, P49
   Barras B, 2010, J FORMALIZ REASON, V3, P29
   Barthe G, 2004, MATH STRUCT COMP SCI, V14, P97, DOI 10.1017/S0960129503004122
   Barthe G, 2009, LECT NOTES COMPUT SC, V5520, P100, DOI 10.1007/978-3-642-03153-3_3
   Bertot Y., 2004, TEXT THEORET COMP S
   Blanc Regis, 2015, P 6 ACM SIGPLAN S SC, P35, DOI [10.1145/2774975.2774980, DOI 10.1145/2774975.2774980]
   Blanchette JC, 2017, LECT NOTES COMPUT SC, V10201, P111, DOI 10.1007/978-3-662-54434-1_5
   Brady Edwin., 2013, Proceedings of the 7th Workshop on Programming languages meets program verification, PLPV 2013, Rome, Italy, January 22, 2013, P1, DOI DOI 10.1145/2428116.2428118
   Casinghino C, 2014, ACM SIGPLAN NOTICES, V49, P33, DOI 10.1145/2535838.2535883
   Charguéraud A, 2012, J AUTOM REASONING, V49, P363, DOI 10.1007/s10817-011-9225-2
   Constable R L, 1986, Implementing mathematics with the Nuprl proof development system
   de Moura Leonardo, 2016, INT S ART INT MATH I
   Detlefs David L., 1998, 159 COMPAQ SYST RES
   Di Gianantonio P, 2002, LECT NOTES COMPUT SC, V2646, P148
   EPFL IC LARA, 2019, STAINL FORM VER SCAL
   Giesl J, 2006, LECT NOTES COMPUT SC, V4098, P297
   Giesl J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890030
   Giesl R, 2004, LECT NOTES COMPUT SC, V3091, P210
   Girard Jean-Yves., 1990, PROOFS TYPES
   Girard Jean-Yves., 1971, P 2 SCANDINAVIAN LOG, V63, P63
   Gordon M.J.C., 1993, Introduction to HOL: A theorem proving environment for higher order logic
   Hallahan WT, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P411, DOI 10.1145/3314221.3314618
   Hamza Jad, 2019, ARXIVCSLO190403482
   Harper R, 2016, Practical Foundations for Programming Languages
   Harrison J, 2009, Handbook of Practical Logic and Automated Reasoning
   Harrison J., 2017, The HOL Light tutorial
   Hupel Lars, 2016, INT JOINT C AUT REAS
   Jacob-Rao R., 3 INT C FORMAL STRUC, p19:1, DOI [10.4230/LIPIcs. FSCD.2018.19, DOI 10.4230/LIPICS.FSCD.2018.19]
   Lepigre Rodolphe, 2017, THESIS GRENOBLE ALPE
   Miquel Alexandre, 2001, INT C TYP LAMBD CALC, DOI [10.1007/3-540-45413-6_27, DOI 10.1007/3-540-45413-6_27]
   Nguyên PC, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000216
   Nipkow T., 2002, LECT NOTES COMPUTER, V2283, DOI [10.1007/3-540-45949-9, DOI 10.1007/3-540-45949-9]
   Norell Ulf, 2007, SE41296 CHALM U TECH
   Odersky M., 2008, PROGRAMMING SCALA CO
   Odersky M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158130
   Prokopec Aleksandar, 2016, Languages and Compilers for Parallel Computing. 28th International Workshop, LCPC 2015. Revised Selected Papers: LNCS 9519, P254, DOI 10.1007/978-3-319-29778-1_16
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sacchini JL, 2013, IEEE S LOG, P233, DOI 10.1109/LICS.2013.29
   Schmid GS, 2016, SCALA'16: PROCEEDINGS OF THE 2016 7TH ACM SIGPLAN SYMPOSIUM ON SCALA, P31, DOI 10.1145/2998392.2998398
   Sozeau M, 2010, LECT NOTES COMPUT SC, V6172, P419, DOI 10.1007/978-3-642-14052-5_29
   Sozeau Matthieu, 2019, METACOQ PROJECT
   Suter Philippe, 2011, SAS
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   TAIT WW, 1967, J SYMBOLIC LOGIC, V32, P198, DOI 10.2307/2271658
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Vazou N, 2013, LECT NOTES COMPUT SC, V7792, P209, DOI 10.1007/978-3-642-37036-6_13
   Vazou Niki, 2018, POPL
   Voirol N, 2015, P 6 ACM SIGPLAN S SC, P18, DOI [10.1145/2774975.2774978, DOI 10.1145/2774975.2774978]
   Voirol Nicolas, 2019, THESIS EPFL
   Xi HW, 2001, IEEE S LOG, P231, DOI 10.1109/LICS.2001.932500
NR 62
TC 13
Z9 13
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 166
DI 10.1145/3360592
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500051
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Mastrangelo, L
   Hauswirth, M
   Nystrom, N
AF Mastrangelo, Luis
   Hauswirth, Matthias
   Nystrom, Nathaniel
TI Casting about in the Dark An Empirical Study of Cast Operations in Java
   Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE cast; type safety; Java
AB The main goal of a static type system is to prevent certain kinds of errors from happening at run time. A type system is formulated as a set of constraints that gives any expression or term in a program a well-defined type. Yet mainstream programming languages are endowed with type systems that provide the means to circumvent their constraints through casting.
   We want to understand how and when developers escape the static type system to use dynamic typing. We empirically study how casting is used by developers in more than seven thousand Java projects. We find that casts are widely used (8.7% of methods contain at least one cast) and that 50% of casts we inspected are not guarded locally to ensure against potential run-time errors.
   To help us better categorize use cases and thus understand how casts are used in practice, we identify 25 cast-usage patterns recurrent programming idioms using casts to solve a specific issue. This knowledge can be: (a) a recommendation for current and future language designers to make informed decisions (b) a reference for tool builders, e.g., by providing more precise or new refactoring analyses, (c) a guide for researchers to test new language features, or to carry out controlled programming experiments, and (d) a guide for developers for better practices.
C1 [Mastrangelo, Luis; Hauswirth, Matthias; Nystrom, Nathaniel] Univ Svizzera Italiana, Fac Informat, CH-6900 Lugano, Switzerland.
C3 Universita della Svizzera Italiana
RP Mastrangelo, L (corresponding author), Univ Svizzera Italiana, Fac Informat, CH-6900 Lugano, Switzerland.
EM luis.mastrangelo@usi.ch; matthias.hauswirth@usi.ch; nate.nystrom@usi.ch
FU Swiss National Science Foundation [CRSII2_136225/2]; Swiss National
   Science Foundation (SNF) [CRSII2_136225] Funding Source: Swiss National
   Science Foundation (SNF)
FX This paper is based upon work supported by the Swiss National Science
   Foundation under Grant CRSII2_136225/2. The authors thank Max Schafer at
   Semmle for helping us with QL and for running queries on their code
   database.
CR Allamanis M, 2013, IEEE WORK CONF MIN S, P207, DOI 10.1109/MSR.2013.6624029
   Altidor John, 2011, P ACM PROGRAM LANG, V3
   Avgustinov Pavel., 2016, 30th European Conference on Object-Oriented Programming, ECOOP 2016, July 18-22, 2016, Rome, Italy, p2:1, DOI DOI 10.4230/LIPICS.ECOOP.2016.2
   Bajracharya S, 2009, 2009 ICSE WORKSHOP ON SEARCH-DRIVEN DEVELOPMENT-USERS, INFRASTRUCTURE, TOOLS AND EVALUATION, P1, DOI 10.1109/SUITE.2009.5070010
   Bierman Gavin, 2019, JEP 354 SWITCH EXPRE
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bravo Ahuja Marcela, 2009, Estud. polít. (Méx.), P11
   Bruce K.B., 2003, ELECT NOTES THEOR CO, V82, P1
   Callaú O, 2013, EMPIR SOFTW ENG, V18, P1156, DOI 10.1007/s10664-012-9203-2
   Canning Peter, 1989, C FUNCT PROGR LANG C, P273, DOI [10.1145/99370.99392, DOI 10.1145/99370.99392]
   Chakravarty M.M. T., 2005, P 10 ACM SIGPLAN INT, P241, DOI [DOI 10.1145/1086365.1086397, DOI 10.1145/1090189.1086397]
   Coelho R, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P134, DOI 10.1109/MSR.2015.20
   Cohen T, 2006, ACM SIGPLAN NOTICES, V41, P89, DOI 10.1145/1167515.1167481
   Costa D., 2017, P 8 ACM SPEC INT C P, P389, DOI [10.1145/3030207.3030221, DOI 10.1145/3030207.3030221]
   DAHSE J., 2015, Proceedings of the 2015 International Symposium on Software Testing and Analysis, P60
   de Moor O, 2007, SEVENTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P3, DOI 10.1109/SCAM.2007.31
   De Roover Coen, 2011, P 9 INT C PRINCIPLES, P71, DOI [10.1145/2093157.2093168, DOI 10.1145/2093157.2093168]
   De Volder K, 2006, LECT NOTES COMPUT SC, V3819, P88
   Dietrich J, 2017, J OBJECT TECHNOL, V16, DOI 10.5381/jot.2017.16.4.a1.
   Dietrich J, 2014, 2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE), P64, DOI 10.1109/CSMR-WCRE.2014.6747226
   Dietrich Jens, 31 EUR C OBJ OR PROG, V74
   Doyle Maureen., 2011, SECURITY MEASUREMENT, P11
   Dyer R, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P779, DOI 10.1145/2568225.2568295
   Dyer R, 2014, ACM SIGPLAN NOTICES, V49, P23, DOI [10.1145/2637365.2517226, 10.1145/2517208.2517226]
   Dyer R, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P422, DOI 10.1109/ICSE.2013.6606588
   Ernst E., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P303
   Ernst Erik, 2000, DAIMI REPORT SERIES, V29, P549, DOI [10.7146/dpb.v29i549.7654, DOI 10.7146/DPB.V29I549.7654]
   Fourtounis G, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P209, DOI 10.1145/3213846.3213864
   Goetz Brian, 2017, JEP 325 SWITCH EXPRE
   Goetz Brian, 2017, JEP 305 PATTERN MATC
   Goetz Brian, 2018, JEP 286 LOCAL VARIAB
   Gorla A, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1025, DOI 10.1145/2568225.2568276
   Grechanik M., 2010, P 2010 ACM IEEE INT, P11
   Greenman B, 2014, ACM SIGPLAN NOTICES, V49, P89, DOI [10.1145/2594291.2594308, 10.1145/2666356.2594308]
   Hills M., 2013, Proceedings of ISSTA 2013, P325, DOI DOI 10.1145/2483760.2483786
   Jang D, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P270, DOI 10.1145/1866307.1866339
   Jones SP, 2006, ACM SIGPLAN NOTICES, V41, P50
   Kechagia M., 2014, Proceedings of the 11th ACM Working Conference on Mining Software Repositories, P312
   Kiselyov Oleg, 2009, FUN TYPE FUNCTIONS
   Kiselyov Oleg, 2004, HASKELL 04, P96, DOI DOI 10.1145/1017472.1017488
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   Landman D, 2017, PROC INT CONF SOFTW, P507, DOI 10.1109/ICSE.2017.53
   Livshits B, 2005, LECT NOTES COMPUT SC, V3780, P139
   Livshits Benjamin, 2006, THESIS STANDFORD U
   Lopes CV, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133908
   Madsen M, 2014, LECT NOTES COMPUT SC, V8409, P197
   Mastrangelo L, 2015, ACM SIGPLAN NOTICES, V50, P695, DOI [10.1145/2814270.2814313, 10.1145/2858965.2814313]
   Mastrangelo Luis, 2019, THESIS U SVIZZERA IT
   Mazinanian D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133909
   Milner R., 1984, Proceedings of the 1984 ACM Symposium on LISP and functional programming, P184
   Nagappan M, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P404, DOI 10.1145/2786805.2786834
   Nystrom N, 2003, LECT NOTES COMPUT SC, V2622, P138
   Nystrom N, 2006, ACM SIGPLAN NOTICES, V41, P21, DOI 10.1145/1167515.1167476
   Odersky Martin, 2005, P 12 INT WORKSH FDN
   Oliveira BCDS, 2016, ACM SIGPLAN NOTICES, V51, P364, DOI 10.1145/3022670.2951945
   Oliveira BCDS, 2012, LECT NOTES COMPUT SC, V7313, P2, DOI 10.1007/978-3-642-31057-7_2
   Oostvogels N., 2018, PROC 32 EUR C OBJECT, P1
   Palomba F, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P482, DOI 10.1109/MSR.2015.69
   Palomba F, 2013, IEEE INT CONF AUTOM, P268, DOI 10.1109/ASE.2013.6693086
   Parnin C., 2011, PROCEEDING 8 WORKING, P3
   Parnin C, 2013, EMPIR SOFTW ENG, V18, P1047, DOI 10.1007/s10664-012-9236-6
   Rebouças M, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P634, DOI 10.1109/SANER.2016.66
   Richards G, 2011, LECT NOTES COMPUT SC, V6813, P52, DOI 10.1007/978-3-642-22655-7_4
   Richards G, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P1, DOI 10.1145/1806596.1806598
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Stuchlik A, 2012, ACM SIGPLAN NOTICES, V47, P97, DOI 10.1145/2168696.2047861
   Tempero E, 2010, ASIA PAC SOFWR ENG, P336, DOI 10.1109/APSEC.2010.46
   Tsantalis N, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P329
   Tufano M, 2017, IEEE T SOFTWARE ENG, V43, P1063, DOI 10.1109/TSE.2017.2653105
   Tufano M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P403, DOI 10.1109/ICSE.2015.59
   Uesbeck PM, 2016, PROC INT CONF SOFTW, P760, DOI 10.1145/2884781.2884849
   Urma Raoul-Gabriel, 2012, P ACM 4 ANN WORKSH E, P35, DOI DOI 10.1145/2414721.2414728
   Vaziri M, 2007, LECT NOTES COMPUT SC, V4609, P54
   Vinju Jurgen, 2006, TRANSFORMATION TECHN
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Wadler Philip, 1998, The Expression Problem
   Wang YL, 2016, PROCEEDINGS OF THE 15TH INTERNATIONAL CONFERENCE ON MODULARITY (MODULARITY'16), P37, DOI 10.1145/2889443.2889448
   Wei SY, 2016, SOFTWARE PRACT EXPER, V46, P867, DOI 10.1002/spe.2334
   Winther Johnni, 2011, P 13 WORKSHOP FORMAL, DOI [10.1145/2076674.2076680, DOI 10.1145/2076674.2076680]
   Zhang YZ, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133894
   Zhang YZ, 2015, ACM SIGPLAN NOTICES, V50, P436, DOI [10.1145/2737924.2738008, 10.1145/2813885.2738008]
   Zhitnitsky Alex, 2016, TOP 10 EXCEPTION TYP
NR 82
TC 6
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 158
DI 10.1145/3360584
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500043
OA gold
DA 2024-07-18
ER

PT J
AU Mogk, R
   Drechsler, J
   Salvaneschi, G
   Mezini, M
AF Mogk, Ragnar
   Drechsler, Joscha
   Salvaneschi, Guido
   Mezini, Mira
TI A Fault-Tolerant Programming Model for Distributed Interactive
   Applications
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE distributed systems; interactive applications; fault tolerance
ID SEMANTICS; MAPREDUCE
AB Ubiquitous connectivity of web, mobile, and IoT computing platforms has fostered a variety of distributed applications with decentralized state. These applications execute across multiple devices with varying reliability and connectivity. Unfortunately, there is no declarative fault-tolerant programming model for distributed interactive applications with an inherently decentralized system model.
   We present a novel approach to automating fault tolerance using high-level programming abstractions tailored to the needs of distributed interactive applications. Specifically, we propose a calculus that enables formal reasoning about applications' dataflow within and across individual devices. Our calculus reinterprets the functional reactive programming model to seamlessly integrate its automated state change propagation with automated crash recovery of device-local dataflow and disconnection-tolerant distribution with guaranteed automated eventual consistency semantics based on conflict-free replicated datatypes. As a result, programmers are relieved of handling intricate details of distributing change propagation and coping with distribution failures in the presence of interactivity. We also provides proofs of our claims, an implementation of our calculus, and an empirical evaluation using a common interactive application.
C1 [Mogk, Ragnar; Drechsler, Joscha; Salvaneschi, Guido; Mezini, Mira] Tech Univ Darmstadt, Darmstadt, Germany.
C3 Technical University of Darmstadt
RP Mogk, R (corresponding author), Tech Univ Darmstadt, Darmstadt, Germany.
OI Salvaneschi, Guido/0000-0002-9324-8894
FU German Research Foundation (DFG) [415626024, 383964710, 322196540, SFB
   1053, 1119]; European Research Council (ERC) [321217, 862535]; LOEWE
   initiative in Hessen, Germany; European Research Council (ERC) [862535]
   Funding Source: European Research Council (ERC)
FX We thank the reviewers of this paper, their valuable feedback was very
   helpful to improve the paper. We thank Alexander Kopp for contributing
   the first version of the operational semantics and properties of
   propagation. This work is supported by the German Research Foundation
   (DFG, No. 415626024, 383964710 and 322196540, SFB 1053 and 1119), by the
   European Research Council (ERC, Advanced Grant No. 321217 and 862535),
   and by the LOEWE initiative in Hessen, Germany (HMWK, NICER,
   emergenCITY, Software-Factory 4.0).
CR Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Akka, 2019, DISTRIBUTED DATA CLU
   Akka, 2019, DOCUMENTATION
   Alexandrov A, 2014, VLDB J, V23, P939, DOI 10.1007/s00778-014-0357-y
   Almeida PS, 2018, J PARALLEL DISTR COM, V111, P162, DOI 10.1016/j.jpdc.2017.08.003
   [Anonymous], 1980, FORMULAE AS TYPES NO
   [Anonymous], 2015, ARXIV150608603
   [Anonymous], 2014, P 8 ACM INT C DISTR
   Armstrong J, 2010, COMMUN ACM, V53, P68, DOI 10.1145/1810891.1810910
   Atkey R, 2017, LECT NOTES COMPUT SC, V10201, P56, DOI 10.1007/978-3-662-54434-1_3
   Attiya Hagit, 2013, PODC 2013, P309
   Bernstein P., 2014, MSRTR20144124
   Bernstein PA, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133931
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   Bracevac O, 2016, PROCEEDINGS OF THE 15TH INTERNATIONAL CONFERENCE ON MODULARITY (MODULARITY'16), P94, DOI 10.1145/2889443.2889452
   Burckhardt S., 2015, 29th European Conference on Object-Oriented Programming (ECOOP 2015), volume 37 of Leibniz International Proceedings in Informatics (LIPIcs), P568
   Burckhardt S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276522
   Burckhardt S, 2012, LECT NOTES COMPUT SC, V7313, P283, DOI 10.1007/978-3-642-31057-7_14
   Caires L, 2017, LECT NOTES COMPUT SC, V10201, P229, DOI 10.1007/978-3-662-54434-1_9
   Cardelli L., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P79, DOI 10.1145/292540.292550
   Chambers C, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P363, DOI 10.1145/1806596.1806638
   Conway Neil, 2012, SOCC, DOI 10.1145/2391229.2391230
   Cooper GH, 2006, LECT NOTES COMPUT SC, V3924, P294
   Czaplicki E, 2013, ACM SIGPLAN NOTICES, V48, P411, DOI 10.1145/2499370.2462161
   Dal Lago U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290320
   Dean J, 2008, COMMUN ACM, V51, P107, DOI 10.1145/1327452.1327492
   Drechsler J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276477
   Drechsler J, 2014, ACM SIGPLAN NOTICES, V49, P361, DOI [10.1145/2660193.2660240, 10.1145/2714064.2660240]
   Dzik Jan, 2013, P 7 WORKSH PROGR LAN, DOI 10.1145/2525528.2525531
   Elliott C, 1997, ACM SIGPLAN NOTICES, V32, P263, DOI 10.1145/258949.258973
   Enes V, 2019, PROC INT CONF DATA, P148, DOI 10.1109/ICDE.2019.00022
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Filipovic I, 2010, THEOR COMPUT SCI, V411, P4379, DOI 10.1016/j.tcs.2010.09.021
   Florence SP, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290374
   Fournet C., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P372, DOI 10.1145/237721.237805
   Gilbert S., 2002, SIGACT News, V33, P51, DOI 10.1145/564585.564601
   Gleissenthall KV, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290372
   Goldstein Jonathan., 2018, Ambrosia: Providing performant virtual resiliency for distributed applications
   Gotsman A., 2017, DISC SCHLOSS DAGSTUH, V91, DOI [DOI 10.4230/LIPICS.DISC.2017.23, 10.4230/LIPIcs.DISC.2017.23]
   Haller P, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000035
   Hellerstein JM, 2010, SIGMOD REC, V39, P5, DOI 10.1145/1860702.1860704
   Hellerstein Joseph M., 2019, ABS190101930 CORR
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Isard M, 2009, ACM SIGMOD/PODS 2009 CONFERENCE, P987
   Jagadeesan Radha, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P968, DOI 10.1007/978-3-319-89884-1_34
   Jarraya Y., 2012, 2012 International Conference on Collaboration Technologies and Systems (CTS), P447, DOI 10.1109/CTS.2012.6261089
   Jeffrey A., 2013, P 7 WORKSHOP PROGRAM, P57, DOI DOI 10.1145/2428116.2428127
   Jeffrey A, 2014, IEEE S LOG, DOI 10.1145/2603088.2603106
   Jeffrey Alan, P 18 ACM SIGPLAN INT, P233, DOI [10.1145/2500365.2500584, DOI 10.1145/2500365.2500584]
   Kamina Tetsuo, 2018, The Art, Science, and Engineering of Programming, V2, P3, DOI [10.22152/programmingjournal.org/2018/2/5, DOI 10.22152/PROGRAMMINGJOURNAL.ORG/2018/2/5]
   Karmani R.K., 2011, Encyclopedia of Parallel Computing, P1, DOI DOI 10.1007/978-0-387-09766-4_125
   Kleppmann Martin, 2019, LOCAL 1 SOFTWARE YOU
   Kreps Jay, 2011, P NETDB, P1, DOI DOI 10.1007/BF00640482
   Kuper Lindsey, 2013, P 2 ACM SIGPLAN WORK, P71, DOI 10.1145/2502323.2502326
   Kuper Lindsey, 2014, WODET
   Lämmel R, 2008, SCI COMPUT PROGRAM, V70, P1, DOI 10.1016/j.scico.2007.07.001
   LANDIN PJ, 1966, COMMUN ACM, V9, P157, DOI 10.1145/365230.365257
   Margara A, 2018, IEEE T SOFTWARE ENG, V44, P689, DOI 10.1109/TSE.2018.2833109
   Meiklejohn C, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P184, DOI 10.1145/2790449.2790525
   Meiklejohn Christopher, 2015, P 14 ACM SIGPLAN WOR, P39, DOI [10.1145/2804295.2804300, DOI 10.1145/2804295.2804300]
   Meiklejohn Christopher S., 2017, P PROGR MOD LANG DIS, DOI [10.1145/3166089.3166093, DOI 10.1145/3166089.3166093]
   Miller H, 2016, ONWARD!'16: PROCEEDINGS OF THE 2016 ACM INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE, P82, DOI 10.1145/2986012.2986014
   Miller MarkS., 2005, Proc. Int. Symp. on Trustworthy Global Computing, P195, DOI DOI 10.1007/11580850_12
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Milner R, 1982, CALCULUS COMMUNICATI
   Mogk Ragnar, 2018, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V109, DOI [10.4230/LIPIcs.ECOOP.2018.1, DOI 10.4230/LIPICS.ECOOP.2018.1]
   Myter F., 2016, P 3 INT WORKSH REACT, P1
   Myter F, 2018, ONWARD!'18: PROCEEDINGS OF THE 2018 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE, P88, DOI 10.1145/3276954.3276957
   Olston C., 2008, Proceedings of the 2008 ACM SIGMOD International Conference on Manage- ment of Data, P1099
   Salvaneschi G, 2017, IEEE T SOFTWARE ENG, V43, P1125, DOI 10.1109/TSE.2017.2655524
   Salvaneschi Guido, 2014, P 13 INT C MOD, P25, DOI DOI 10.1145/2577080.2577083
   Shapiro M, 2011, LECT NOTES COMPUT SC, V6976, P386, DOI 10.1007/978-3-642-24550-3_29
   Shapiro Marc, 2018, ABS180106340 CORR
   Shapiro Marc, 2011, Research Report RR- 7506
   Van Cutsem T, 2014, COMPUT LANG SYST STR, V40, P112, DOI 10.1016/j.cl.2014.05.002
   Viering Malte, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P799, DOI 10.1007/978-3-319-89884-1_28
   Wang C, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P980, DOI 10.1145/3314221.3314617
   Weisenburger P, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276499
   Yu W, 2018, IEEE ACCESS, V6, P6900, DOI 10.1109/ACCESS.2017.2778504
   Zaharia Matei., 2012, NSDI 12
   Zhang Irene., 2014, OSDI'14: Proceedings of the 11th USENIX Symposium on Operating Systems Design and Implementation; 2014 Oct 6-8; Broomfield, CO, P97
NR 81
TC 6
Z9 6
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 144
DI 10.1145/3360570
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500029
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Rapoport, M
   Lhoták, O
AF Rapoport, Marianna
   Lhotak, Ondrej
TI A Path to DOT: Formalizing Fully Path-Dependent Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE DOT; Scala; dependent types; paths
AB The Dependent Object Types (DOT) calculus aims to formalize the Scala programming language with a focus on path-dependent types - types such as x.a(1 )... a(n).T that depend on the runtime value of a path x.a(1) ... a(n) to an object. Unfortunately, existing formulations of DOT can model only types of the form x.A which depend on variables rather than general paths. This restriction makes it impossible to model nested module dependencies. Nesting small components inside larger ones is a necessary ingredient of a modular, scalable language. DOT's variable restriction thus undermines its ability to fully formalize a variety of programming-language features including Scala's module system, family polymorphism, and covariant specialization.
   This paper presents the pDOT calculus, which generalizes DOT to support types that depend on paths of arbitrary length, as well as singleton types to track path equality. We show that naive approaches to add paths to DOT make it inherently unsound, and present necessary conditions for such a calculus to be sound. We discuss the key changes necessary to adapt the techniques of the DOT soundness proofs so that they can be applied to pDOT. Our paper comes with a Coq-mechanized type-safety proof of pDOT. With support for paths of arbitrary length, pDOT can realize DOT's full potential for formalizing Scala-like calculi.
C1 [Rapoport, Marianna; Lhotak, Ondrej] Univ Waterloo, Waterloo, ON, Canada.
C3 University of Waterloo
RP Rapoport, M (corresponding author), Univ Waterloo, Waterloo, ON, Canada.
EM mrapopot@uwaterloo.ca; olhotak@uwaterloo.ca
FU Natural Sciences and Engineering Research Council of Canada
FX We would like to thank Martin Odersky for suggesting the idea of
   extending DOT with paths of arbitrary length, and for the helpful
   discussions on early variants of pDOT. We thank Jaemin Hong, Abel Nieto,
   and the anonymous reviewers for their careful reading of our paper and
   the insightful suggestions that greatly helped improve it. We thank Lu
   Wang and Yaoyu Zhao for their contributions to the Coq proof. We thank
   Paolo Giarrusso and Ifaz Kabir for their thoughtful proofreading, and
   the helpful discussions on the DOT calculus which improved our
   understanding of the the expressiveness and limitations of DOT. We had
   other helpful discussions on DOT with Zhong Sheng Hu, Sukyoung Ryu,
   Derek Dreyer, Ilya Sergey, and Prabhakar Ragde. This research was
   supported by the Natural Sciences and Engineering Research Council of
   Canada.
CR Amin N., 2012, FOOL
   Amin N, 2017, ACM SIGPLAN NOTICES, V52, P666, DOI 10.1145/3093333.3009866
   Amin N, 2016, ACM SIGPLAN NOTICES, V51, P838, DOI 10.1145/3022671.2984004
   Amin N, 2014, ACM SIGPLAN NOTICES, V49, P233, DOI [10.1145/2660193.2660216, 10.1145/2714064.2660216]
   Amin Nada, 2016, Lecture Notes in Computer Science, V9600, P249, DOI [10.1007/978-3-319-30936-, DOI 10.1007/978-3-319-30936, 10.1007/978-3-319-3 0936-1\\_14, DOI 10.1007/978-3-319-30936-1]
   Bruce Kim B, 1998, ECOOP 98 OBJECT ORIE
   Clarke Dave., 2007, P 6 INT C ASP OR SOF
   Cremet V, 2006, LECT NOTES COMPUT SC, V4162, P1
   Dreyer D, 2003, ACM SIGPLAN NOTICES, V38, P236, DOI 10.1145/640128.604151
   Ernst E, 2006, ACM SIGPLAN NOTICES, V41, P270, DOI 10.1145/1111320.1111062
   Ernst E., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P303
   Harper R., 1994, PRINCIPLES PROGRAMMI, P123, DOI [DOI 10.1145/174675.176927, 10.1145/174675.176927]
   Hill Gary, 1999, EXHIBITION CATALOGUE
   Hong J, 2018, PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA (SCALA '18), P35, DOI 10.1145/3241653.3241657
   Hu Jason., 2019, ABS190805294 CORR
   Kabir I, 2018, PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA (SCALA '18), P40, DOI 10.1145/3241653.3241659
   Leroy X., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P109, DOI 10.1145/174675.176926
   MADSEN OL, 1989, SIGPLAN NOTICES, V24, P397, DOI 10.1145/74878.74919
   Moors Adriaan, 2008, INT WORKSH FDN OBJ O
   Odersky M, 2005, ACM SIGPLAN NOTICES, V40, P41, DOI 10.1145/1103845.1094815
   Odersky M, 2003, LECT NOTES COMPUT SC, V2743, P201
   Pierce Benjamin C, 1992, 19 ANN ACM SIGPLAN S
   Rapoport M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133870
   Rapoport M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360571
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Rompf Tiark, 2017, ECOOP LIPICS, V74
   Rossberg A, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000205
   Rossberg A, 2014, J FUNCT PROGRAM, V24, P529, DOI 10.1017/S0956796814000264
   Rossberg A, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2450136.2450137
   Scala Documentation, 2018, PATHS
   Stone CA, 2006, ACM T COMPUT LOG, V7, P676, DOI 10.1145/1183278.1183281
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 32
TC 8
Z9 8
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 145
DI 10.1145/3360571
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500030
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Sergey, I
   Nagaraj, V
   Johannsen, J
   Kumar, A
   Trunov, A
   Hao, KCG
AF Sergey, Ilya
   Nagaraj, Vaivaswatha
   Johannsen, Jacob
   Kumar, Amrit
   Trunov, Anton
   Hao, Ken Chan Guan
TI Safer Smart Contract Programming with SCILLA
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Blockchain; Smart Contracts; Domain-Specific languages; Static Analysis
AB The rise of programmable open distributed consensus platforms based on the blockchain technology has aroused a lot of interest in replicated stateful computations, aka smart contracts. As blockchains are used predominantly in financial applications, smart contracts frequently manage millions of dollars worth of virtual coins. Since smart contracts cannot be updated once deployed, the ability to reason about their correctness becomes a critical task. Yet, the de facto implementation standard, pioneered by the Ethereum platform, dictates smart contracts to be deployed in a low-level language, which renders independent audit and formal verification of deployed code infeasible in practice.
   We report an ongoing experiment held with an industrial blockchain vendor on designing, evaluating, and deploying SCILLA, a new programming language for safe smart contracts. SCILLA is positioned as an intermediate-level language, suitable to serve as a compilation target and also as an independent programming framework. Taking System F as a foundational calculus, SCILLA offers strong safety guarantees by means of type soundness. It provides a clean separation between pure computational, state-manipulating, and communication aspects of smart contracts, avoiding many known pitfalls due to execution in a byzantine environment. We describe the motivation, design principles, and semantics of SCILLA, and we report on SCILLA use cases provided by the developer community. Finally, we present a framework for lightweight verification of SCILLA programs, and showcase it with two domain-specific analyses on a suite of real-world use cases.
C1 [Sergey, Ilya] Yale NUS Coll, Singapore, Singapore.
   [Sergey, Ilya] Natl Univ Singapore, Singapore, Singapore.
   [Nagaraj, Vaivaswatha] Zilliqa Res, Mysore, Karnataka, India.
   [Johannsen, Jacob] Zilliqa Res, Copenhagen, Denmark.
   [Kumar, Amrit] Zilliqa Res, London, England.
   [Trunov, Anton] Zilliqa Res, St Petersburg, Russia.
   [Hao, Ken Chan Guan] Zilliqa Res, Kuala Lumpur, Malaysia.
C3 Yale NUS College; National University of Singapore
RP Sergey, I (corresponding author), Yale NUS Coll, Singapore, Singapore.; Sergey, I (corresponding author), Natl Univ Singapore, Singapore, Singapore.
EM ilya.sergey@yale-rms.edu.sg; vaivaswalha@zilliqa.com; jacob@zilliqa.com;
   amrit@zilliqa.com; anton@zilliqa.com; ken.changuanhao@gmail.com
FU Crystal Centre at the School of Computing of National University of
   Singapore
FX First and foremost we wish to thank the amazing Zilliqa team, whose
   involvement helped a lot to shape up the design and implementation of
   Scilla, and deploy it on the main-net blockchain. In particular, we
   thank Sandip Bhoir, Han Wen Chua, Sophia Fang, Deli Gong, Sheng Guang
   Xiao, Yaoqi Jia, Saiba Kataruka, Edison Lim, Haichuan Liu, Antonio
   Nicolas Nunez, Advay Pal, Kaustubh Shamshery, Hugh Sipiere, Bryan Tan
   Yao Hong, Jun Hao Tan, Ian Tan, Clark Yang, and Noel Yoo. We are
   thankful to Xinshu Dong, Aquinas Hobor, Prateek Saxena, Max Kantelia,
   and Juzar Motiwalla for their encouragement and support of the Scilla
   initiative. We feel very grateful to the vibrant community of Zilliqa
   early adopters, whose feedback and technical contributions were
   instrumental for adapting the initial design of Scilla to make it more
   development-and verification-friendly.; Finally, we thank the sponsors
   of the Crystal Centre at the School of Computing of National University
   of Singapore that has supported Ilya Sergey's research.
CR Albert E, 2008, LECT NOTES COMPUT SC, V5079, P221
   Alfour Gabriel, 2019, INTRO LIGO NEW SMART
   Alois J, 2017, ETHEREUM PARITY HACK
   Alt Leonardo, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Industrial Practice. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11247), P376, DOI 10.1007/978-3-030-03427-6_28
   Amani S, 2018, P 7 INT C CERT PROGR, P66, DOI DOI 10.1145/3167084
   Amin N, 2017, ACM SIGPLAN NOTICES, V52, P666, DOI 10.1145/3093333.3009866
   [Anonymous], 2018, P 25 ANN NETW DISTR
   Atzei N, 2017, LECT NOTES COMPUT SC, V10204, P164, DOI 10.1007/978-3-662-54455-6_8
   Bano S., 2017, CONSENSUS AGE BLOCKC
   Bansal Kshitij, 2018, TACAS LNCS, V10805
   Bhargavan K, 2016, PROCEEDINGS OF THE 2016 ACM WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS'16), P91, DOI 10.1145/2993600.2993611
   Bitcoin Wiki, 2017, BITC SCRIPT
   Blackshear Sam, 2019, MOVE LANGUAGE PROGRA
   Charguéraud A, 2013, LECT NOTES COMPUT SC, V7792, P41, DOI 10.1007/978-3-642-37036-6_3
   Chen T, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P442, DOI 10.1109/SANER.2017.7884650
   Coblenz M, 2017, PROC IEEE ACM INT C, P97, DOI 10.1109/ICSE-C.2017.150
   Coq Development Team, 2019, The Coq proof assistant reference manual. The Gallina specification language. Co-inductive types
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Danvy O, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000042
   Danvy O, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P41
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   del Castillo Michael, 2016, The DAO Attacked: Code Issue Leads to $60 Million Ether Theft
   Dietl W, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P681, DOI 10.1145/1985793.1985889
   Emin Gun Sirer, 2016, REENTRANCY WOES SMAR
   Ethereum Foundation, 2018, ERC20 TOK STAND
   Ethereum Foundation, 2018, VYP
   Ethereum Foundation, LIST KNOWN SOL BUGS
   Ethereum Foundation, 2018, YUL
   Ethereum Foundation, 2018, SOL DOC
   Filinski Andrzej, 1994, P 21 ANN ACM S PRINC, P446, DOI DOI 10.1145/174675.178047
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Flora Sun, 2018, UTXO VS ACC BAL MOD
   Girard Jean-Yves, 1972, These d'etat, P7
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Grech Neville, 2018, PACMPL 2 OOPSLA
   Grishchenko I, 2018, LECT NOTES COMPUT SC, V10804, P243, DOI 10.1007/978-3-319-89722-6_10
   Grossman Shelly, 2018, PACMPL, V2
   Harper Robert, 2012, Practical Foundations for Programming Languages, DOI DOI 10.1017/CBO9781139342131
   Hirai Yoichi, 2018, BAMBOO
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   IOHK Foundation, MARL CONTR LANG FIN
   IOHK Foundation, 2019, PLUTUS FUNCTIONAL CO
   Jones M. P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P483, DOI 10.1145/263699.263765
   Kennedy A. J., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P442, DOI 10.1145/263699.263761
   Kolluri Aashish, 2018, ABS181011605 CORR
   Krupp J, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P1317
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   LAUNCHBURY J, 1994, SIGPLAN NOTICES, V29, P24, DOI 10.1145/773473.178246
   Leifer JJ, 2003, ACM SIGPLAN NOTICES, V38, P87, DOI 10.1145/944746.944714
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   LSP, 2018, LANG SERV PROT
   Luu L, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P254, DOI 10.1145/2976749.2978309
   Lynch NancyA., 1989, CWI Quarterly, V2
   Marescotti Matteo, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Industrial Practice. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11247), P450, DOI 10.1007/978-3-030-03427-6_33
   Minsky Yaron, 2016, BLOG POST
   MITCHELL JohnC., 2003, CONCEPTS PROGRAMMING
   Muchnick S., 1997, ADV COMPILER DESIGN
   Nakamoto S., 2008, DECENT BUS REV, V21260, DOI https://bitcoin.org/bitcoin.pdf
   Nikolic I, 2018, 34TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2018), P653, DOI 10.1145/3274694.3274743
   nternity Blockchain, 2019, SOPH
   O'Connor R, 2017, PROCEEDINGS OF THE 2017 WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS' 17), P107, DOI 10.1145/3139337.3139340
   Owens S, 2016, LECT NOTES COMPUT SC, V9632, P589, DOI 10.1007/978-3-662-49498-1_23
   Peng Wang, 2019, THESIS MIT
   Pirlea George, 2018, P 7 ACM SIGPLAN INT, P78
   Pollack R., 1990, INF P 1 WORKSH LOG F
   Popejoy Stuart, 2017, PACT SMART CONTR LAN
   RChain Cooperative, 2019, Rholang
   Reitwiessner C, 2017, BABBAGE MECH SMART C
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P363, DOI 10.1023/A:1010027404223
   Reynolds J. C., 1974, Programming Symposium, P408
   Rodler Michael, 2019, NDSS
   Rosu Grigore, 2018, IELE NEW VIRTUAL MAC
   Schrans F., 2018, P C COMP 2 INT C ART, P218
   Sergey Ilya, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Industrial Practice. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11247), P323, DOI 10.1007/978-3-030-03427-6_25
   Sergey I, 2014, ACM SIGPLAN NOTICES, V49, P335, DOI 10.1145/2535838.2535861
   Sergey I, 2013, ACM SIGPLAN NOTICES, V48, P399, DOI 10.1145/2499370.2491979
   Sergey Ilya, 2018, ABS180100687 CORR
   Sestoft P., 1996, Partial Evaluation. International Seminar. Selected Papers, P446
   Shali A, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P375
   Shirley Dieter, 2018, ERC721
   Siek Jeremy, 2012, BIG STEP DIVERGING S
   Siek Jeremy, 2013, TYPE SAFETY 3 EASY L
   Simon L., 2013, LNCS, V7941
   Simon L. Peyton, 1987, IMPLEMENTATION FUNCT
   Sun Jun, 2018, ABS180800624 CORR
   Szabo N., 1994, SMART CONTRACTS
   Tezos Foundation, 2018, MICH LANG SMART CONT
   Tezos Foundation, 2018, LIQ
   Tikhomirov S, 2018, 2018 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB), P9, DOI 10.1145/3194113.3194115
   Trunov Anton, 2019, SCILLA VS MOVE CASE
   Tsankov P, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P67, DOI 10.1145/3243734.3243780
   Wood G., 2014, Ethereum project yellow paper, V151, P1
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Zilliqa Team, 2017, ZILL TECHN WHIT
NR 96
TC 44
Z9 50
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 185
DI 10.1145/3360611
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500070
OA gold
DA 2024-07-18
ER

PT J
AU Sozeau, M
   Mangin, C
AF Sozeau, Matthieu
   Mangin, Cyprien
TI Equations Reloaded High-Level Dependently-Typed Functional Programming
   and Proving in CoQ
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE dependent pattern-matching; proof assistants; recursion
AB EQUATIONS is a plugin for the COQ proof assistant which provides a notation for defining programs by dependent pattern-matching and structural or well-founded recursion. It additionally derives useful high-level proof principles for demonstrating properties about them, abstracting away from the implementation details of the function and its compiled form. We present a general design and implementation that provides a robust and expressive function definition package as a definitional extension to the COQ kernel. At the core of the system is a new simplifier for dependent equalities based on an original handling of the no-confusion property of constructors.
C1 [Sozeau, Matthieu; Mangin, Cyprien] Univ Paris 7 Diderot, Inria Paris, Paris, France.
   [Sozeau, Matthieu; Mangin, Cyprien] Univ Paris 7 Diderot, IRIF, Paris, France.
C3 Universite Paris Cite; Universite Paris Cite
RP Sozeau, M (corresponding author), Univ Paris 7 Diderot, Inria Paris, Paris, France.; Sozeau, M (corresponding author), Univ Paris 7 Diderot, IRIF, Paris, France.
EM matthieu.sozeau@inria.fr; cyprien.mangin@m4x.org
FU ERC CoQHoTT [64399]
FX We are grateful to Hugo Herbelin, Gert Smolka and the anonymous
   reviewers for their useful comments. This material is based upon work
   supported by the ERC CoQHoTT, Grant No. 64399
CR Abel A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110277
   Abel A, 2016, J FUNCT PROGRAM, V26, DOI 10.1017/S0956796816000022
   Abel Andreas, 2006, LECT NOTES COMPUTER, V4207, p72S88, DOI [10.1007/11874683_5, DOI 10.1007/11874683_5]
   Altenkirch T, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P57, DOI 10.1145/1292597.1292608
   Anand Abhishek, 2017, INT WORKSH COQ PROGR
   Avigad Jeremy, 2017, LEAN REFERENCE MANUA
   Barthe Gilles, 2006, FUNCTIONAL LOGIC PRO, DOI [10.1007/11737414_9, DOI 10.1007/11737414_9]
   Brady Edwin, 2003, TYPES PROOFS PROGRAM, V3085, DOI [10.1007/978-3-540-24849, DOI 10.1007/978-3-540-24849]
   Chlipala Adam., 2011, Certified programming with dependent types, V20
   Cockx J, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236770
   Cockx J, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S095679681800014X
   Cockx J, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P173, DOI 10.1145/3018610.3018612
   Cockx J, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P257, DOI 10.1145/2628136.2628139
   Cockx Jesper, 2017, THESIS KATHOLIEKE U
   Coquand Thierry, 1992, PATTERN MATCHING DEP
   Gilbert G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290316
   Goguen Healfdene, 2006, LECT NOTES COMPUTER, V4060
   Hancock Peter, 2000, THESIS LFCS
   Hofmann Martin, 1994, LICS
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Kraus N, 2013, LECT NOTES COMPUT SC, V7941, P173, DOI 10.1007/978-3-642-38946-7_14
   Krauss A, 2006, LECT NOTES ARTIF INT, V4130, P589
   Lumsdaine PL, 2010, LOG METH COMPUT SCI, V6, DOI 10.2168/LMCS-6(3:24)2010
   Mahboubi A., 2018, MATH COMPONENTS
   Mangin Cyprien, 2015, P 10 INT WORKSH LOG, V185, DOI [10.4204/EPTCS.185, DOI 10.4204/EPTCS.185]
   Martin-Lof Per, 1984, INTUITIONISTIC TYPE, V1
   McBride C, 2004, J FUNCT PROGRAM, V14, P69, DOI 10.1017/S0956796803004829
   McBride Conor, 1999, PhD thesis
   McBride Conor, 2004, REVISED SELECTED PAP, V3839, P186, DOI [10.1007/11617990_12, DOI 10.1007/11617990_12]
   Monin Jean-Francois, 2013, HANDCRAFTED INVERSIO, DOI [10.1007/978-3-642-39634-2_25, DOI 10.1007/978-3-642-39634-2_25]
   Norell Ulf, 2007, PRACTICAL PROGRAMMIN
   PAULINMOHRING C, 1996, DEFINITIONS INDUCTIV
   PAULSON LC, 1986, J SYMB COMPUT, V2, P325, DOI 10.1016/S0747-7171(86)80002-5
   Pedrot Pierre-Marie, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P245, DOI 10.1007/978-3-319-89884-1_9
   Pelayo Alvaro, 2012, ARXIV12105658
   Poulsen CB, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158104
   Schepler Daniel, 2013, POST COQ CLUB
   Sozeau M, 2010, LECT NOTES COMPUT SC, V6172, P419, DOI 10.1007/978-3-642-14052-5_29
   Sozeau Matthieu, EQUATIONS RELOADED A, DOI [10.1145/3342526, DOI 10.1145/3342526]
   Sozeau Matthieu, EQUATIONS V1 2, DOI [10.5281/zenodo.3012649, DOI 10.5281/ZENODO.3012649]
   Sozeau Matthieu, 2007, ICFP 07, p13S24, DOI [10.1145/1291151.1291156, DOI 10.1145/1291151.1291156]
   Spector-Zabusky A., 2018, P 7 ACM SIGPLAN INT, P14, DOI [10.1145/3167092, DOI 10.1145/3167092]
   Streicher T., 1993, Semantical investigations into intensional type theory
   The Univalent Foundations Program, 2013, HOM TYP THEOR UN FDN HOM TYP THEOR UN FDN
   van den Berg B, 2011, P LOND MATH SOC, V102, P370, DOI 10.1112/plms/pdq026
   Vazou Niki, 2017, P 10 ACM SIGPLAN INT, p63S74, DOI [10.1145/3122955.3122963, DOI 10.1145/3122955.3122963]
   Vytiniotis Dimitrios, 2012, LECT NOTES COMPUTER, V7406, DOI [10.1007/978-3, DOI 10.1007/978-3]
NR 47
TC 24
Z9 27
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 86
DI 10.1145/3341690
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900009
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Morris, JG
   McKinna, J
AF Morris, J. Garrett
   McKinna, James
TI Abstracting Extensible Data Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Extensible data types; row types; row polymorphism; qualified types
AB We present a novel typed language for extensible data types, generalizing and abstracting existing systems of row types and row polymorphism. Extensible data types are a powerful addition to traditional functional programming languages, capturing ideas from OOP-like record extension and polymorphism to modular compositional interpreters. We introduce row theories, a monoidal generalization of row types, giving a general account of record concatenation and projection (dually, variant injection and branching). We realize them via qualified types, abstracting the interpretation of records and variants over different row theories. Our approach naturally types terms untypable in other systems of extensible data types, while maintaining strong metatheoretic properties, such as coherence and principal types. Evidence for type qualifiers has computational content, determining the implementation of record and variant operations; we demonstrate this in giving a modular translation from our calculus, instantiated with various row theories, to polymorphic lambda-calculus.
C1 [Morris, J. Garrett] Univ Kansas, Informat & Telecommun Technol Ctr, 2335 Irving Hill Rd, Lawrence, KS 66045 USA.
   [McKinna, James] Univ Edinburgh, Lab Fdn Comp Sci, 10 Crichton St, Edinburgh, Midlothian, Scotland.
C3 University of Kansas; University of Edinburgh
RP Morris, JG (corresponding author), Univ Kansas, Informat & Telecommun Technol Ctr, 2335 Irving Hill Rd, Lawrence, KS 66045 USA.
EM garrett@ittc.ku.edu; James.McKinna@ed.ac.uk
RI Morris, J. Garrett/AAI-5463-2020
OI Morris, J. Garrett/0000-0002-3992-1080
FU LFCS, University of Edinburgh; U.S. Air Force Office of Scientific
   Research, Air Force Materiel Command, USAF [FA8655-13-1-3006]; EPSRC
   [EP/K034413/1] Funding Source: UKRI
FX We are grateful to the reviewers for their help and encouragement in
   improving the presentation of this work. The second author gratefully
   acknowledges the support of LFCS, University of Edinburgh, and the U.S.
   Air Force Office of Scientific Research, Air Force Materiel Command,
   USAF, under grant number FA8655-13-1-3006 (PI: James Cheney). The U.S.
   Government, the University of Edinburgh, and the University of Kansas
   are authorised to reproduce and distribute reprints for their purposes
   notwithstanding any copyright notation thereon.
CR Bahr Patrick, 2014, P 10 ACM SIGPLAN WOR, P71
   Berthomieu Bernard, 1995, WORKSH TYP PROGR AN
   Blume M, 2006, ACM SIGPLAN NOTICES, V41, P239, DOI 10.1145/1160074.1159836
   Boisseau G, 2018, P ACM PROGRAM LANG, V2
   Chlipala A, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P122, DOI 10.1145/1806596.1806612
   Dunfield J, 2012, ACM SIGPLAN NOTICES, V47, P17, DOI 10.1145/2398856.2364534
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Garrigue J, 1998, ML WORKSH, P1
   Gaster B.R., 1996, Technical Report, Technical Report NOTTCS-TR-96-3
   Harper Robert, 1991, C RECORD 18 ANN ACM, P131, DOI [10.1145/99583.99603, DOI 10.1145/99583.99603]
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Hofmann M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P371, DOI 10.1145/1926385.1926428
   Jones M.P., 1993, Technical Report YALEU/DCS/RR- 989
   Jones MarkP., 1994, Qualified Types: Theory and Practice
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   Kiselyov Oleg, 2004, HASKELL 04, P96, DOI DOI 10.1145/1017472.1017488
   Kmett E, 2018, LENS PACKAGE VERSION
   Lee OS, 1998, ACM T PROGR LANG SYS, V20, P707, DOI 10.1145/291891.291892
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Leijen Daan, 2005, Trends in Functional Programming, V6, P179
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Lindley S, 2017, RIV PUBL SER AUTOMAT, P265
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Lindley Sam, 2012, TLDI, P91, DOI DOI 10.1145/2103786.2103798
   Makholm H, 2005, ACM SIGPLAN NOTICES, V40, P156, DOI 10.1145/1090189.1086386
   McKinna J., 2016, CEUR WORKSHOP P CEUR WORKSHOP P, P90
   MITCHELL JC, 1988, INFORM COMPUT, V76, P211, DOI 10.1016/0890-5401(88)90009-0
   Morris JG, 2015, ACM SIGPLAN NOTICES, V50, P71, DOI 10.1145/2804302.2804320
   Morris JG, 2014, ACM SIGPLAN NOTICES, V49, P107, DOI [10.1145/2633357.2633364, 10.1145/2775050.2633364]
   Oliveira BCDS, 2016, ACM SIGPLAN NOTICES, V51, P364, DOI 10.1145/3022670.2951945
   Oliveira BCDS, 2015, ACM SIGPLAN NOTICES, V50, P82, DOI 10.1145/2804302.2804315
   Pickering M., 2017, PROGRAMMING J, V1, DOI [DOI 10.22152/PROGRAMMING-JOURNAL.ORG/2017/1/7, DOI 10.22152/PROGRAMMINGJOURNAL.ORG/2017/1/7]
   Pottier Francois, 2005, ESSENCE ML TYPE INFE
   REMY D, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P77, DOI 10.1145/75277.75284
   Sheard T, 2004, J FUNCT PROGRAM, V14, P547, DOI 10.1017/S095679680300488X
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Wadler Philip, 1998, The Expression Problem
   WAND M, 1991, INFORM COMPUT, V93, P1, DOI 10.1016/0890-5401(91)90050-C
   Wand M., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P37
NR 40
TC 10
Z9 11
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 12
DI 10.1145/3290325
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300012
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Hance, T
   Howell, J
   Padon, O
   Parno, B
AF Hance, Travis
   Howell, Jon
   Padon, Oded
   Parno, Bryan
TI Leaf: Modularity for Temporary Sharing in Separation Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrent separation logic; verification; fractional permissions;
   counting permissions; reader-writer lock; read-sharing
AB In concurrent verification, separation logic provides a strong story for handling both resources that are owned exclusively and resources that are shared persistently (i.e., forever). However, the situation is more complicated for temporarily shared state, where state might be shared and then later reclaimed as exclusive. We believe that a framework for temporarily-shared state should meet two key goals not adequately met by existing techniques. One, it should allow and encourage users to verify new sharing strategies. Two, it should provide an abstraction where users manipulate shared state in a way agnostic to the means with which it is shared.
   We present Leaf, a library in the Iris separation logic which accomplishes both of these goals by introducing a novel operator, which we call guarding, that allows one proposition to represent a shared version of another. We demonstrate that Leaf meets these two goals through a modular case study: we verify a reader-writer lock that supports shared state, and a hash table built on top of it that uses shared state.
C1 [Hance, Travis; Parno, Bryan] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Howell, Jon] VMware Res, Bellevue, WA USA.
   [Padon, Oded] VMware Res, Palo Alto, CA USA.
C3 Carnegie Mellon University; VMware, Inc.
RP Hance, T (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM thance@andrew.cmu.edu; howell@vmware.com; oded.padon@gmail.com;
   parno@cmu.edu
OI Parno, Bryan/0000-0002-9113-1684
FU Amazon Research Award; Future Enterprise Security initiative at Carnegie
   Mellon CyLab (FutureEnterprise@CyLab); NSF/VMware Partnership on
   Software Defined Infrastructure as a Foundation for Clean-Slate
   Computing Security (SDI-CSCS) program [CNS-1700521]
FX Work at CMU was supported, in part, by an Amazon Research Award (Fall
   2022 CFP), a gift from VMware, the Future Enterprise Security initiative
   at Carnegie Mellon CyLab (FutureEnterprise@CyLab), and the NSF/VMware
   Partnership on Software Defined Infrastructure as a Foundation for
   Clean-Slate Computing Security (SDI-CSCS) program under Award No.
   CNS-1700521.
CR [Anonymous], 1998, The art of computer programming: Sorting and searching
   Bizjak A, 2018, ELECTRON NOTES THEOR, V336, P57, DOI 10.1016/j.entcs.2018.03.016
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Calciu I, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P206, DOI 10.1145/3037697.3037721
   Calciu I, 2013, ACM SIGPLAN NOTICES, V48, P157, DOI 10.1145/2517327.2442532
   Charguéraud A, 2017, LECT NOTES COMPUT SC, V10201, P260, DOI 10.1007/978-3-662-54434-1_10
   Clausen E, 2017, Verifying Hash Tables in Iris
   Dang HH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371102
   Dice D, 2019, PROCEEDINGS OF THE 2019 USENIX ANNUAL TECHNICAL CONFERENCE, P315
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Dockins R, 2009, LECT NOTES COMPUT SC, V5904, P161, DOI 10.1007/978-3-642-10672-9_13
   Guerraoui R, 2019, ACM T COMPUT SYST, V36, DOI 10.1145/3301501
   Hance T, 2023, Arxiv, DOI [arXiv:2309.04851, 10.48550/arXiv.2309.04851, DOI 10.48550/ARXIV.2309.04851]
   Hance T, 2023, PROCEEDINGS OF THE 17TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, OSDI 2023, P911
   Hance Travis, 2023, Leaf: Modularity for Temporary Sharing in Separation Logic (Artifact), DOI [10.5281/zenodo.8327489, DOI 10.5281/ZENODO.8327489]
   Ho S, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547647
   Hsieh W. C., 1992, Proceedings. Sixth International Parallel Processing Symposium (Cat. No.92TH0419-2), P656, DOI 10.1109/IPPS.1992.222989
   Jensen JB, 2012, LECT NOTES COMPUT SC, V7211, P377, DOI 10.1007/978-3-642-28869-2_19
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kashyap S, 2017, 2017 USENIX ANNUAL TECHNICAL CONFERENCE (USENIX ATC '17), P603
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krishnaswami NR, 2012, ACM SIGPLAN NOTICES, V47, P41, DOI 10.1145/2398856.2364536
   Ley-Wild R, 2013, ACM SIGPLAN NOTICES, V48, P561, DOI 10.1145/2480359.2429134
   Liu Ran, 2014, P USENIX ANN TECHN C, P219
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Parkinson Matthew, 2005, Ph. D. Dissertation
   Polikarpova N, 2018, FORM ASP COMPUT, V30, P495, DOI 10.1007/s00165-017-0435-1
   Pottier F, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P3, DOI 10.1145/3018610.3018624
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Reynolds John C, 2008, An Introduction to Separation Logic
   Shirako J., 2012, P 24 ANN ACM S PAR A, P48, DOI DOI 10.1145/2312005.2312015
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   The cppreference Team, 2011, std::lock_guard
   The Rust Team, 2014, Struct std::sync::RwLockReadGuard
NR 40
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 223
DI 10.1145/3622798
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100003
OA gold
DA 2024-07-18
ER

PT J
AU Miltner, A
   Loehr, D
   Mong, A
   Fisher, K
   Walker, D
AF Miltner, Anders
   Loehr, Devon
   Mong, Arnold
   Fisher, Kathleen
   Walker, David
TI Saggitarius: A DSL for Specifying Grammatical Domains
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Grammar Induction; Syntax-Guided Synthesis; Semiring Parsing
ID INFERENCE
AB Common data types like dates, addresses, phone numbers and tables can have multiple textual representations, and many heavily-used languages, such as SQL, come in several dialects. These variations can cause data to be misinterpreted, leading to silent data corruption, failure of data processing systems, or even security vulnerabilities. Saggitarius is a new language and system designed to help programmers reason about the format of data, by describing grammatical domains-that is, sets of context-free grammars that describe the many possible representations of a datatype. We describe the design of Saggitarius via example and provide a relational semantics. We show how Saggitarius may be used to analyze a data set: given example data, it uses an algorithm based on semi-ring parsing and MaxSAT to infer which grammar in a given domain best matches that data. We evaluate the effectiveness of the algorithm on a benchmark suite of 110 example problems, and we demonstrate that our system typically returns a satisfying grammar within a few seconds with only a small number of examples. We also delve deeper into a more extensive case study on using Saggitarius for CSV dialect detection. Despite being general-purpose, we find that Saggitarius offers comparable results to hand-tuned, specialized tools; in the case of CSV, it infers grammars for 84% of benchmarks within 60 seconds, and has comparable accuracy to custom-built dialect detection tools.
C1 [Miltner, Anders] Simon Fraser Univ, Burnaby, BC, Canada.
   [Loehr, Devon; Mong, Arnold; Walker, David] Princeton Univ, Princeton, NJ USA.
   [Fisher, Kathleen] Tufts Univ, Medford, MA USA.
C3 Simon Fraser University; Princeton University; Tufts University
RP Miltner, A (corresponding author), Simon Fraser Univ, Burnaby, BC, Canada.
EM miltner@cs.sfu.ca; dloehr@princeton.edu; among@alumni.princeton.edu;
   kfisher@cs.tufts.edu; dpw@cs.princeton.edu
OI Miltner, Anders/0000-0002-8338-4008; Walker, David/0000-0003-3681-149X
FU Defense Advanced Research Projects Agency (DARPA) [HR001118S0054]
FX Thank you to our reviewers for their helpful comments. This research was
   developed with funding from the Defense Advanced Research Projects
   Agency (DARPA) under the SafeDocs program (2019-020, PRIME DARPA BAA
   #HR001118S0054). The views, opinions and/or findings expressed are those
   of the authors and should not be interpreted as representing the oficial
   views or policies of the Department of Defense or the U.S. Government.
CR Alur R, 2018, COMMUN ACM, V61, P84, DOI 10.1145/3208071
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   ANGLUIN D, 1978, INFORM CONTROL, V39, P337, DOI 10.1016/S0019-9958(78)90683-6
   ANGLUIN D, 1987, INFORM COMPUT, V75, P87, DOI 10.1016/0890-5401(87)90052-6
   Barowy DW, 2015, ACM SIGPLAN NOTICES, V50, P218, DOI [10.1145/2813885.2737952, 10.1145/2737924.2737952]
   Bastani O, 2017, ACM SIGPLAN NOTICES, V52, P95, DOI [10.1145/3062341.3062349, 10.1145/3140587.3062349]
   Carmony C, 2016, 23RD ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2016), DOI 10.14722/ndss.2016.23483
   Chen QC, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P487, DOI 10.1145/3385412.3385988
   darpa, 2020, Sergey Bratus
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   De Raedt L, 2008, LECT NOTES ARTIF INT, V5249, P1, DOI 10.1007/978-3-540-88190-2_1
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   Firoiu L, 1998, PROCEEDINGS OF THE TWENTIETH ANNUAL CONFERENCE OF THE COGNITIVE SCIENCE SOCIETY, P350
   Fisher K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P421, DOI 10.1145/1328438.1328488
   Fisher Kathleen, 2009, Pads Manual: Appendix B All Pads Base Types
   Fisher Kathleen, 2011, P 14 INT C DAT THEOR, P11, DOI [DOI 10.1145/1938551.1938556, 10.1145/1938551.1938556]
   GARCIA P, 1990, IEEE T PATTERN ANAL, V12, P920, DOI 10.1109/34.57687
   GOLD EM, 1967, INFORM CONTROL, V10, P447, DOI 10.1016/S0019-9958(67)91165-5
   Goodman J, 1999, COMPUT LINGUIST, V25, P573
   Goodman Joshua., 1998, Parsing Inside-Out, P19
   Green Todd J., 2007, PODS, DOI DOI 10.1145/1265530.1265535
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Herman G, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1022, DOI 10.1145/3385412.3386032
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Lee M, 2017, ACM SIGPLAN NOTICES, V52, P70, DOI [10.1145/3093335.2993244, 10.1145/2993236.2993244]
   Leijen Daan, 2023, parsec: Monadic parser combinators
   Liu Ke, 2017, Dig Into the Attack Surface of PDF and Gain 100+ CVEs in 1 Year
   Miltner A, 2023, Arxiv, DOI arXiv:2308.12329
   Miltner A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341699
   Miltner A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158089
   Network Working Group, 2005, Common Format and MIME Type for Comma-Separated Values (CSV) Files
   Nozohoor-Farshi Rahman., 1991, GEN LR PARSING, P61, DOI DOI 10.1007/978-1-4615-4034-2_5
   ONCINA J, 1992, S MACH PERC, V1, P49
   Padhi S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276520
   Pan R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360565
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Python Software Foundation, 2020, CSV File Reading and Writing
   Raghothaman M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371130
   Raza M, 2017, AAAI CONF ARTIF INTE, P882
   Rivest R. L., 1989, Proceedings of the Twenty First Annual ACM Symposium on Theory of Computing, P411, DOI 10.1145/73007.73047
   Si XJ, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P6117
   Solar-Lezama A, 2005, ACM SIGPLAN NOTICES, V40, P281, DOI 10.1145/1064978.1065045
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Stolcke Andreas, 1994, Grammatical Inference and Applications, P106, DOI [10.1007/3-540-58473-0_141, DOI 10.1007/3-540-58473-0_141]
   Vaillant Loup, 2020, Earley Parsing Explained
   van den Burg GJJ, 2019, DATA MIN KNOWL DISC, V33, P1799, DOI 10.1007/s10618-019-00646-y
   van den Burg Gerrit J. J., 2019, CSV_Wrangling
   Vidal Enrique., 1994, Grammatical Inference and Applications, volume 862 of Lecture Notes in Computer Science, V862, P1, DOI DOI 10.1007/3-540-58473-0_131
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
   Wang XY, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133886
   Wikipedia contributors, 2023, National conventions for writing telephone numbers-Wikipedia, The Free Encyclopedia
   Wikipedia contributors, 2023, List of postal codes-Wikipedia, The Free Encyclopedia
NR 52
TC 0
Z9 0
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 293
DI 10.1145/3622869
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100073
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Shadab, N
   Gharat, P
   Tiwari, S
   Ernst, MD
   Kellogg, M
   Lahiri, SK
   Lal, A
   Sridharan, M
AF Shadab, Narges
   Gharat, Pritam
   Tiwari, Shrey
   Ernst, Michael D.
   Kellogg, Martin
   Lahiri, Shuvendu K.
   Lal, Akash
   Sridharan, Manu
TI Inference of Resource Management Specifications
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Pluggable type systems; accumulation analysis; static analysis;
   typestate analysis; resource leaks; specify-and-check;
   specify-and-verify
AB A resource leak occurs when a program fails to free some finite resource after it is no longer needed. Such leaks are a significant cause of real-world crashes and performance problems. Recent work proposed an approach to prevent resource leaks based on checking resource management specifications. A resource management specification expresses how the program allocates resources, passes them around, and releases them; it also tracks the ownership relationship between objects and resources, and aliasing relationships between objects. While this specify-and-verify approach has several advantages compared to prior techniques, the need to manually write annotations presents a significant barrier to its practical adoption.
   This paper presents a novel technique to automatically infer a resource management specification for a program, broadening the applicability of specify-and-check verification for resource leaks. Inference in this domain is challenging because resource management specifications differ significantly in nature from the types that most inference techniques target. Further, for practical effectiveness, we desire a technique that can infer the resource management specification intended by the developer, even in cases when the code does not fully adhere to that specification. We address these challenges through a set of inference rules carefully designed to capture real-world coding patterns, yielding an effective fixed-point-based inference algorithm.
   We have implemented our inference algorithm in two different systems, targeting programs written in Java and C#. In an experimental evaluation, our technique inferred 85.5% of the annotations that programmers had written manually for the benchmarks. Further, the verifier issued nearly the same rate of false alarms with the manually-written and automatically-inferred annotations.
C1 [Shadab, Narges; Sridharan, Manu] Univ Calif Riverside, Riverside, CA 92521 USA.
   [Gharat, Pritam; Tiwari, Shrey; Lal, Akash] Microsoft Res, Bengaluru, India.
   [Ernst, Michael D.] Univ Washington, Seattle, WA USA.
   [Kellogg, Martin] New Jersey Inst Technol, Newark, NJ USA.
   [Lahiri, Shuvendu K.] Microsoft Res, Redmond, WA USA.
C3 University of California System; University of California Riverside;
   University of Washington; University of Washington Seattle; New Jersey
   Institute of Technology; Microsoft
RP Shadab, N (corresponding author), Univ Calif Riverside, Riverside, CA 92521 USA.
EM nshad001@ucr.edu; t-prgharat@microsoft.com; shreymt@gmail.com;
   mernst@cs.washington.edu; martin.kellogg@njit.edu;
   Shuvendu.Lahiri@microsoft.com; akashl@microsoft.com; manu@cs.ucr.edu
RI lal, Akash/JLL-1244-2023
OI LAHIRI, SHUVENDU/0000-0002-4446-4777; Gharat,
   Pritam/0000-0002-5961-8142; Kellogg, Martin/0000-0002-3185-2340; Lal,
   Akash/0009-0002-4359-9378; Sridharan, Manu/0000-0001-7993-302X
FU National Science Foundation [2005889, 2007024, 2312262, 2312263]; DARPA
   [FA8750-20-C-0226]; Google Research Award
FX We thank the anonymous reviewers for their detailed and helpful
   feedback. This research was supported in part by the National Science
   Foundation under grants 2005889, 2007024, 2312262, and 2312263, DARPA
   contract FA8750-20-C-0226, a gift from Oracle Labs, and a Google
   Research Award.
CR Calcagno C, 2015, LECT NOTES COMPUT SC, V9058, P3, DOI 10.1007/978-3-319-17524-9_1
   Campora JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158103
   CheckerRLC, 2023, Resource Leak Checker for must-call obligations
   CheckerWPI, 2023, Checker Framework Whole-Program Inference
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   CodeQLCSharpDataflow, 2023, Analyzing data flow in C#
   Eclipse developers, 2023, Avoiding resource leaks
   EF Core, 2023, Entity Framework Core
   Flanagan C., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P500
   Foster JS, 1999, ACM SIGPLAN NOTICES, V34, P192, DOI 10.1145/301631.301665
   Gharat Pritam, 2023, Resource Leak Checker (RLC#) for C# code using CodeQL
   Hackett B., 2006, 28th International Conference on Software Engineering Proceedings, P232, DOI 10.1145/1134285.1134319
   Hellendoorn VJ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P152, DOI 10.1145/3236024.3236051
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   InferSharp developers, 2023, InferSharp
   KAM JB, 1977, ACTA INFORM, V7, P305, DOI 10.1007/BF00290339
   Kellogg M, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P181, DOI 10.1145/3468264.3468576
   Kellogg Martin, 2023, ASE 2023
   Kellogg Martin, 2022, 36 EUROPEAN C OBJECT, V10, P1, DOI [10.4230/LIPIcs.ECOOP.2022.10, DOI 10.4230/LIPICS.ECOOP.2022.10]
   Klabnik S., 2018, The Rust Programming Language
   Lucene.NET, 2023, Lucene.NET is a high performance search library for.NET
   Microsoft, CodeQL
   Migeed Zeina, 2020, POPL 2020, DOI [10.1145/3373104, DOI 10.1145/3373104]
   Papi Matthew M., 2008, P 2008 INT S SOFTW T, P201, DOI DOI 10.1145/1390630.1390656
   Peng Y, 2022, PROC INT CONF SOFTW, P2019, DOI 10.1145/3510003.3510038
   Phipps-Costin L, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485488
   Pierce Benjamin C., 2002, Types and Programming Languages, DOI [10.7551/mitpress/1104.003.0005, DOI 10.7551/MITPRESS/1104.003.0005]
   PMD developers, 2023, CloseResource
   Pradel M, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P209, DOI 10.1145/3368089.3409715
   Shadab Narges, 2023, Inference of Resource Management Specifications (Artifact), DOI [10.5281/zenodo.8333055, DOI 10.5281/ZENODO.8333055]
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Stroustrup B., 1994, The Design and Evolution of C++
   Torlak Emina., 2010, P 32 ACMIEEE INT C S, P535
   Vogels F, 2011, LECT NOTES COMPUT SC, V6722, P319, DOI 10.1007/978-3-642-21461-5_21
   Zuo ZQ, 2019, PROCEEDINGS OF THE FOURTEENTH EUROSYS CONFERENCE 2019 (EUROSYS '19), DOI 10.1145/3302424.3303972
NR 35
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 282
DI 10.1145/3622858
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100062
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Zhou, J
   Silvestro, S
   Tang, S
   Yang, HM
   Liu, HY
   Zeng, GM
   Wu, B
   Liu, C
   Liu, TP
AF Zhou, Jin
   Silvestro, Sam
   Tang, Steven (Jiaxun)
   Yang, Hanmei
   Liu, Hongyu
   Zeng, Guangming
   Wu, Bo
   Liu, Cong
   Liu, Tongping
TI MemPerf: Profiling Allocator-Induced Performance Slowdowns
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Memory Allocator; Performance Slowdowns
ID MEMORY
AB The memory allocator plays a key role in the performance of applications, but none of the existing profilers can pinpoint performance slowdowns caused by a memory allocator. Consequently, programmers may spend time improving application code incorrectly or unnecessarily, achieving low or no performance improvement. This paper designs the first profiler-MemPerf-to identify allocator-induced performance slowdowns without comparing against another allocator. Based on the key observation that an allocator may impact the whole life-cycle of heap objects, including the accesses (or uses) of these objects, MemPerf proposes a life-cycle based detection to identify slowdowns caused by slow memory management operations and slow accesses separately. For the prior one, MemPerf proposes a thread-aware and type-aware performance modeling to identify slow management operations. For slow memory accesses, MemPerf utilizes a top-down approach to identify all possible reasons for slow memory accesses introduced by the allocator, mainly due to cache and TLB misses, and further proposes a unified method to identify them correctly and efficiently. Based on our extensive evaluation, MemPerf reports 98% medium and large allocator-reduced slowdowns (larger than 5%) correctly without reporting any false positives. MemPerf also pinpoints multiple known and unknown design issues in widely-used allocators.
C1 [Zhou, Jin; Tang, Steven (Jiaxun); Yang, Hanmei; Liu, Tongping] Univ Massachusetts, Amherst, MA 01003 USA.
   [Silvestro, Sam; Liu, Hongyu] Univ Texas San Antonio, San Antonio, TX USA.
   [Zeng, Guangming] Synopsys, Sunnyvale, CA USA.
   [Wu, Bo] Colorado Sch Mines, Golden, CO USA.
   [Liu, Cong] Univ Texas Dallas, Dallas, TX USA.
C3 University of Massachusetts System; University of Massachusetts Amherst;
   University of Texas System; University of Texas at San Antonio (UTSA);
   Synopsys Inc; Colorado School of Mines; University of Texas System;
   University of Texas Dallas
RP Zhou, J (corresponding author), Univ Massachusetts, Amherst, MA 01003 USA.
EM jinzhou@umass.edu; Sam.Silvestro@utsa.edu; jtang@umass.edu;
   hanmeiyang@umass.edu; hongyu.liu@my.utsa.edu; zenggming@gmail.com;
   bwu@mines.edu; cong@utdallas.edu; tongping@umass.edu
RI Liu, Tongping/D-5861-2017
FU National Science Foundation [DUE-2215193, CCF-2024253, CNS-1750760]
FX We thank our anonymous reviewers for their helpful comments on improving
   this paper. This material is based upon work supported by the National
   Science Foundation under Awards DUE-2215193, CCF-2024253, and
   CNS-1750760. Any opinions, findings, and conclusions or recommendations
   expressed in this material are those of the author(s) and do not
   necessarily reflect the views of the National Science Foundation.
CR Aigner M, 2015, ACM SIGPLAN NOTICES, V50, P451, DOI [10.1145/2814270.2814294, 10.1145/2858965.2814294]
   Android Community, 2020, View the Java heap and memory allocations with citep
   [Anonymous], 2010, P ACM IEEE 32 INT C, DOI DOI 10.1145/1806799.1806874
   Barroso LA, 1998, CONF PROC INT SYMP C, P3, DOI 10.1109/ISCA.1998.694758
   Berger ED, 2000, ACM SIGPLAN NOTICES, V35, P117, DOI 10.1145/384264.379232
   Bienia Christian, 2009, PARSEC 2.0: A New Benchmark Suite for Chip-Multiprocessors
   Chabbi M, 2018, ACM SIGPLAN NOTICES, V53, P152, DOI 10.1145/3200691.3178499
   Chang KC, 2014, 2014 IEEE 3RD GLOBAL CONFERENCE ON CONSUMER ELECTRONICS (GCCE), P634, DOI 10.1109/GCCE.2014.7031343
   Chihaia I, 2004, INT SYM PERFORM ANAL, P98, DOI 10.1109/ISPASS.2004.1291361
   Coppeard Jon, 2017, Allocate all JS data in a separate jemalloc arena
   Curtsinger C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P184, DOI 10.1145/2815400.2815409
   Daan Leijen, 2020, mimalloc
   Eranian Stephane, 2015, Linux kernel pro~ling with perf
   Evans Jason, 2016, Scalable memory allocation using jemalloc
   Ferreira TB, 2011, BRAZ SYM COMPUT SYST, P200, DOI 10.1109/SBESC.2011.29
   Free Software Foundation Inc., 2015, The GNU C Library: Allocation Debugging
   Ghemawat S., 2007, TCMALLOC THREAD CACH
   Ghemawat Sanjay, 2005, Pro~ling heap usage
   Gorman Mel, 2015, malloc: Reduce worst-case behaviour with madvise and refault overhead
   Graham S. L., 1982, SIGPLAN Notices, V17, P120, DOI 10.1145/872726.806987
   Intel Corporation, 1997, Techn. Ber., Tech. Rep., P22
   Khan TA, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P453, DOI 10.1145/3314221.3314644
   Kuszmaul BC, 2015, ACM SIGPLAN NOTICES, V50, P41, DOI 10.1145/2754169.2754178
   Lawrence Livermore National Laboratory, 2018, CORAL-2 Benchmarks
   Lee WH, 2000, 3RD IEEE SYMPOSIUM ON APPLICATION SPECIFIC SYSTEMS AND SOFTWARE ENGINEERING TECHNOLOGY, PROCEEDINGS, P155, DOI 10.1109/ASSET.2000.888070
   Levon J., 2004, OPROFILE SYSTEM PROF
   Liu TP, 2016, INT SYM CODE GENER, P1, DOI 10.1145/2854038.2854039
   Liu TP, 2014, ACM SIGPLAN NOTICES, V49, P3, DOI [10.1145/2555243.2555244, 10.1145/2692916.2555244]
   Liu TP, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P3
   Liu X, 2014, INT CONFER PARA, P405, DOI 10.1145/2628071.2628102
   Liu Xu, 2013, A Data-Centric Pro~ler for Parallel Programs, DOI [10.1145/2503210.2503297, DOI 10.1145/2503210.2503297]
   Lucia Brandon, MultiCacheSim: A coherent multiprocessor cache simulator
   Luk CK, 2005, ACM SIGPLAN NOTICES, V40, P190, DOI 10.1145/1064978.1065034
   Luo L, 2016, INT S HIGH PERF COMP, P261, DOI 10.1109/HPCA.2016.7446070
   LUPASC Adrian, 2014, Dynamic Memory Allocation-Clr Pro~ler
   Matias R, 2011, IEEE SYS MAN CYBERN, P2431, DOI 10.1109/ICSMC.2011.6084042
   Perks O, 2011, LECT NOTES COMPUT SC, V6977, P148, DOI 10.1007/978-3-642-24749-1_12
   Pesterev A, 2010, EUROSYS'10: PROCEEDINGS OF THE EUROSYS 2010 CONFERENCE, P335
   Rogozhin Kirill, 2014, Controlling memory consumption with Intel<(R)> Threading Building Blocks (Intel<(R)> TBB) scalable allocator
   Roy P, 2018, INT SYM CODE GENER, P200, DOI 10.1145/3168819
   Serebryany Konstantin, 2012, P 2012 USENIX C ANN, P28, DOI DOI 10.5555/2342821.2342849
   Sheng TW, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P401, DOI 10.1145/1985793.1985848
   The Open MPI Project, 2022, Open MPI: Open Source High Performance Computing
   The OpenMP ARB, 2022, The OpenMP API Speci~cation For Parallel Programming
   ul Alam MM, 2017, PROCEEDINGS OF THE TWELFTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS 2017), P298, DOI 10.1145/3064176.3064186
   Yang Oliver, 2015, Pitfalls of TSC usage
   Yu T., 2016, P 25 INT S SOFTW TES, P389
   Zavrtanik Matej, Experimental Evaluation and Comparison of Memory Allocators in the GNU/Linux Operating System
   Zhao Q, 2011, ACM SIGPLAN NOTICES, V46, P27, DOI 10.1145/2007477.1952688
   Zhou F, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P527
   Zorn Benjamin, 1988, Technical Report UCB/CSD-88-404
NR 51
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 272
DI 10.1145/3622848
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100052
OA gold
DA 2024-07-18
ER

PT J
AU Bourgeat, T
   Clester, I
   Erbsen, A
   Gruetter, S
   Singh, P
   Wright, A
   Chlipala, A
AF Bourgeat, Thomas
   Clester, Ian
   Erbsen, Andres
   Gruetter, Samuel
   Singh, Pratap
   Wright, Andy
   Chlipala, Adam
TI Flexible Instruction-Set Semantics via Abstract Monads (Experience
   Report)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE instruction-set semantics; type classes; interactive proof assistants
AB Instruction sets, from families like x86 and ARM, are at the center of many ambitious formal-methods projects. Many verification, synthesis, programming, and debugging tools rely on formal semantics of instruction sets, but different tools can use semantics in rather different ways. The best-known work applying single semantics across diverse tools relies on domain-specific languages like Sail, where the language and its translation tools are specialized to the realm of instruction sets. In the context of the open RISC-V instruction-set family, we decided to explore a different approach, with semantics written in a carefully chosen subset of Haskell. This style does not depend on any new language translators, relying instead on parameterization of semantics over type-class instances. We have used a single core semantics to support testing, interactive proof, and model checking of both software and hardware, demonstrating that monads and the ability to abstract over them using type classes can support pleasant prototyping of ISA semantics.
C1 [Bourgeat, Thomas; Clester, Ian] Georgia Inst Technol, Atlanta, GA 30332 USA.
   [Erbsen, Andres; Gruetter, Samuel; Wright, Andy; Chlipala, Adam] MIT, Cambridge, MA 02139 USA.
   [Singh, Pratap] CMU, Pittsburgh, PA USA.
C3 University System of Georgia; Georgia Institute of Technology;
   Massachusetts Institute of Technology (MIT); Carnegie Mellon University
RP Bourgeat, T (corresponding author), Georgia Inst Technol, Atlanta, GA 30332 USA.
OI Gruetter, Samuel/0000-0001-8369-9117; Clester, Ian/0009-0006-2383-4739;
   Bourgeat, Thomas/0000-0002-8468-8409
FU National Science Foundation Expedition on the Science of Deep
   Specification [CCF-1521584]; Defense Advanced Research Projects Agency
   [HR001118C0018]
FX We would like to thank Rishiyur Nikhil for feedback on this paper as
   well as on the development of our semantics over the years, alongside
   the other members of the ISA-semantics working group of the RISC-V
   Foundation. This research was supported by the National Science
   Foundation Expedition on the Science of Deep Specification (award
   CCF-1521584) and the Defense Advanced Research Projects Agency (award
   HR001118C0018). Part of this work was carried out while the non-MIT
   authors had appointments at MIT.
CR Alkassar E, 2008, LECT NOTES COMPUT SC, V5295, P209, DOI 10.1007/978-3-540-87873-5_18
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   Armstrong A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290384
   Bevier W. R., 1989, Journal of Automated Reasoning, V5, P411
   Bjesse P, 1999, ACM SIGPLAN NOTICES, V34, P174, DOI 10.1145/291251.289440
   Bourgeat Thomas, 2023, A RISC-V Formal Semantics in Haskell, DOI [10.5281/zenodo.7992509, DOI 10.5281/ZENODO.7992509]
   Boyer R. S., 2002, Practical Aspects of Declarative Languages. 4th International Symposium, PADL 2002. Proceedings (Lecture Notes in Computer Science Vol.2257), P9
   Breitner J, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236784
   Erbsen A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P604, DOI 10.1145/3453483.3454065
   Erbsen Andres., 2022, An End-to-End Verified Garage-Door Opener
   Flur Shaked, 2019, Litmus Test for the RISC-V Memory Model
   Fox Anthony, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P338, DOI 10.1007/978-3-642-32347-8_23
   Fox A, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P125, DOI 10.1145/3018610.3018621
   Fox A, 2010, LECT NOTES COMPUT SC, V6172, P243, DOI 10.1007/978-3-642-14052-5_18
   Goel Shilpi, 2014, Verified Software: Theories, Tools, Experiments. 5th International Conference, VSTTE 2013. Revised Selected Papers: LNCS 8164, P222, DOI 10.1007/978-3-642-54108-7_12
   Goel Shilpi, 2016, Thesis
   Gruetter Samuel, 2023, Technical Report
   Gruetter Samuel., 2021, AModel of an OpenTitan Root-of-Trust System Running HardwareAccelerators and Their C/Bedrock2 Device Drivers
   Kanabar Hrutvik, 2022, Leibniz International Proceedings in Informatics (LIPIcs, V237, DOI [10.4230/LIPIcs.ITP.2022.20, DOI 10.4230/LIPICS.ITP.2022.20]
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Liang Sheng, 1995, Proceedings of 22nd ACM Symposium on Principles of Programming Languages
   Lööw A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1041, DOI 10.1145/3314221.3314622
   Lustig Daniel., 2018, A Formalization of the RVWMO (RISC-V) Memory Model
   Mundkur Prashanth, 2020, Sail RISC-V Model
   QBayLogic, 2020, Clash
   Reid A, 2016, PROCEEDINGS OF THE 2016 16TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2016), P161
   Sammler M, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P825, DOI 10.1145/3519939.3523434
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Waterman A., 2019, Tech. Rep. 20191213
   Waterman A., 2019, The risc-v instruction set manual, volume i: User-level isa, document version 20191213, VI
   Wenzel M., 1997, Theorem Proving in Higher Order Logics. 10th International Conference, TPHOLs'97 Proceedings, P307, DOI 10.1007/BFb0028402
   Wolf C., 2018, Risc-v formal verification framework
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
NR 33
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 192
DI 10.1145/3607833
PG 17
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900005
OA gold
DA 2024-07-18
ER

PT J
AU Lazarek, L
   Greenman, B
   Felleisen, M
   Dimoulas, C
AF Lazarek, Lukas
   Greenman, Ben
   Felleisen, Matthias
   Dimoulas, Christos
TI How to Evaluate Blame for Gradual Types, Part 2
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE gradual typing; blame
ID IMPACT
AB Equipping an existing programming language with a gradual type system requires two major steps. The first and most visible one in academia is to add a notation for types and a type checking apparatus. The second, highly practical one is to provide a type veneer for the large number of existing untyped libraries; doing so enables typed components to import pieces of functionality and get their uses type-checked, without any changes to the libraries. When programmers create such typed veneers for libraries, they make mistakes that persist and cause trouble. The question is whether the academically investigated run-time checks for gradual type systems assist programmers with debugging such mistakes. This paper provides a first, surprising answer to this question via a rational-programmer investigation: run-time checks alone are typically less helpful than the safety checks of the underlying language. Combining Natural run-time checks with blame, however, provides significantly superior debugging hints.
C1 [Lazarek, Lukas; Dimoulas, Christos] Northwestern Univ, Evanston, IL 60201 USA.
   [Greenman, Ben] Brown Univ, Providence, RI 02912 USA.
   [Felleisen, Matthias] Northeastern Univ, Boston, MA 02115 USA.
C3 Northwestern University; Brown University; Northeastern University
RP Lazarek, L (corresponding author), Northwestern Univ, Evanston, IL 60201 USA.
EM lukas.lazarek@eecs.northwestern.edu; benjaminlgreenman@gmail.com;
   matthias@ccs.neu.edu; chrdimo@northwestern.edu
OI Greenman, Ben/0000-0001-7078-9287; Dimoulas,
   Christos/0000-0002-9338-7034
FU NSF [2030859, SHF 1763922]; NSF Career Award [2237984]
FX Felleisen and Greenman were partly supported by NSF grant SHF 1763922.
   Greenman was partly supported by NSF grant 2030859 to the CRA for the
   CIFellows program. Lazarek and Dimoulas were partly supported by NSF
   Career Award 2237984. We also thank the anonymous ICFP reviewers for
   their constructive feedback.
CR Becker BA, 2016, COMPUT SCI EDUC, V26, P148, DOI 10.1080/08993408.2016.1225464
   Brown NCC, 2018, ICER'18: PROCEEDINGS OF THE 2018 ACM CONFERENCE ON INTERNATIONAL COMPUTING EDUCATION RESEARCH, P196, DOI 10.1145/3230977.3230991
   Campora JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158103
   Campora JP, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428259
   Chen S, 2014, ACM SIGPLAN NOTICES, V49, P583, DOI 10.1145/2535838.2535863
   Coblenz M, 2021, ACM T COMPUT-HUM INT, V28, DOI 10.1145/3452379
   Coblenz M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428200
   Cristiani F, 2021, PROCEEDINGS OF THE 18TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON MANAGED PROGRAMMING LANGUAGES AND RUNTIMES (MPLR '2021), P97, DOI 10.1145/3475738.3480941
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Denny Paul, 2021, P 2021 CHI C HUMAN F, P1, DOI [DOI 10.1145/3411764.3445696, 10.1145/3411764, DOI 10.1145/3411764]
   DUBOULAY B, 1984, LECT NOTES COMPUT SC, V178, P132
   Feldthaus A, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2660193.2660215
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Flatt Matthew, 1998, POPL, P171, DOI [10.1145/268946.268961, DOI 10.1145/268946.268961]
   Garcia R, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2676726.2676992, 10.1145/2775051.2676992]
   Greenman B, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360548
   Greenman B, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000217
   Greenman Ben, 2020, Ph. D. Dissertation
   Greenman Ben, 2022, Art Sci. Eng. Program., V6, P9, DOI [10.22152/programmingjournal.org/2022/6/9, DOI 10.22152/PROGRAMMINGJOURNAL.ORG/2022/6/9]
   Hanenberg S, 2014, EMPIR SOFTW ENG, V19, P1335, DOI 10.1007/s10664-013-9289-1
   Hanenberg S, 2010, ACM SIGPLAN NOTICES, V45, P22, DOI 10.1145/1932682.1869462
   Henrich J, 2001, AM ECON REV, V91, P73, DOI 10.1257/aer.91.2.73
   Hoeflich J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563305
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Keller R., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P307, DOI 10.1007/BFb0054097
   Kristensen EK, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133914
   Kristensen EK, 2017, LECT NOTES COMPUT SC, V10202, P99, DOI 10.1007/978-3-662-54494-5_6
   Lazarek L, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473573
   Lazarek Lukas, 2020, POPL, V65, P1
   Lipton R.J., 1971, FAULT DIAGNOSIS COMP
   Lubin J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485532
   Matzel Kai-Uwe, 1997, Technical Report
   Microsoft, TypeScript
   Migeed Z, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371097
   Mill JohnStuart., 1874, ESSAYS SOME UNSETTLE, V2nd
   Milner R., 1990, The Definition of Standard ML
   Milner Robin, 1998, The De~nition of Standard ML
   Miyazaki Y, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290331
   Mytkowicz T, 2009, ACM SIGPLAN NOTICES, V44, P265, DOI 10.1145/1508284.1508275
   Phipps-Costin L, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485488
   Rastogi A, 2012, ACM SIGPLAN NOTICES, V47, P481, DOI 10.1145/2103621.2103714
   Seidel EL, 2016, ACM SIGPLAN NOTICES, V51, P228, DOI 10.1145/3022670.2951915
   Seidel Eric L., 2018, Dynamic Witnesses for Static Type Errors (or, Ill-Typed Programs Usually Go Wrong)., V28, pe13, DOI [10.1017/S0956796818000126, DOI 10.1017/S0956796818000126]
   Simon H.A., 2013, ADM BEHAV
   Spiza Samuel., 2014, 13th International Conference on Modularity, MODULARITY '14, Lugano, Switzerland, April 22-26, 2014, P99, DOI 10.1145/2577080.2577098
   St-Amour V, 2013, ACM SIGPLAN NOTICES, V48, P351, DOI [10.1145/2544174.2500616, 10.1145/2500365.2500616]
   Strickland TS, 2012, ACM SIGPLAN NOTICES, V47, P943, DOI 10.1145/2398857.2384685
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tobin-Hochstadt S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P117
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Tobin-Hochstadt Sam, 2017, SNAPL, V17, P1, DOI [DOI 10.4230/LIPICS.SNAPL.2017.17, 10.4230/LIPIcs.SNAPL.2017.17]
   Vitousek MM, 2019, PROCEEDINGS OF THE 15TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES (DLS '19), P28, DOI 10.1145/3359619.3359742
   Vitousek MM, 2017, ACM SIGPLAN NOTICES, V52, P762, DOI 10.1145/3093333.3009849
   Vitousek MM, 2015, ACM SIGPLAN NOTICES, V50, P45, DOI 10.1145/2661088.2661101
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Wexelblat R. L., 1976, 2nd International Conference on Software Engineering, P331
   Williams Jack., 2017, EUROPEAN C OBJECT OR, DOI DOI 10.4230/LIPICS.ECOOP.2017.28
   Wilson PT, 2018, DLS'18: PROCEEDINGS OF THE 14TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES, P1, DOI 10.1145/3276945.3276947
   Wu BJ, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133929
   Zhang DF, 2014, ACM SIGPLAN NOTICES, V49, P569, DOI 10.1145/2535838.2535870
NR 61
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 194
DI 10.1145/3607836
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900007
OA gold
DA 2024-07-18
ER

PT J
AU Eilers, M
   Dardinier, T
   Müller, P
AF Eilers, Marco
   Dardinier, Thibault
   Mueller, Peter
TI CommCSL: Proving Information Flow Security for Concurrent Programs using
   Abstract Commutativity
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Commutativity; information flow; separation logic; concurrency
ID PROBABILISTIC NONINTERFERENCE; SEPARATION LOGIC; VERIFICATION
AB Information flow security ensures that the secret data manipulated by a program does not influence its observable output. Proving information flow security is especially challenging for concurrent programs, where operations on secret data may influence the execution time of a thread and, thereby, the interleaving between threads. Such internal timing channels may affect the observable outcome of a program even if an attacker does not observe execution times. Existing verification techniques for information flow security in concurrent programs attempt to prove that secret data does not influence the relative timing of threads. However, these techniques are often restrictive (for instance because they disallow branching on secret data) and make strong assumptions about the execution platform (ignoring caching, processor instructions with data-dependent execution time, and other common features that affect execution time). In this paper, we present a novel verification technique for secure information flow in concurrent programs that lifts these restrictions and does not make any assumptions about timing behavior. The key idea is to prove that all mutating operations performed on shared data commute, such that different thread interleavings do not influence its final value. Crucially, commutativity is required only for an abstraction of the shared data that contains the information that will be leaked to a public output. Abstract commutativity is satisfied by many more operations than standard commutativity, which makes our technique widely applicable. We formalize our technique in CommCSL, a relational concurrent separation logic with support for commutativity-based reasoning, and prove its soundness in Isabelle/HOL. We have implemented CommCSL in HyperViper, an automated verifier based on the Viper verification infrastructure, and demonstrate its ability to verify challenging examples.
C1 [Eilers, Marco; Dardinier, Thibault; Mueller, Peter] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich
RP Eilers, M (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
EM marco.eilers@inf.ethz.ch; thibault.dardinier@inf.ethz.ch;
   peter.mueller@inf.ethz.ch
OI Dardinier, Thibault/0000-0003-2719-4856; Eilers,
   Marco/0000-0003-4891-6950
FU Werner Siemens-Stiftung; Swiss National Science Foundation (SNSF)
   [197065]
FX We gratefully acknowledge support by the Werner Siemens-Stiftung (WSS),
   and by the Swiss National Science Foundation (SNSF) under Grant No.
   197065. We thank the reviewers and especially our shepherd, Toby Murray,
   for their insightful comments that significantly improved this paper.
CR Andrysco M, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P1369, DOI 10.1145/3243734.3243766
   Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7813862
   [Anonymous], 1995, J COMPUT SECUR, DOI [DOI 10.3233/JCS-1994/1995-3103, 10.3233/JCS-1994/1995-3103]
   Bansal K, 2018, LECT NOTES COMPUT SC, V10805, P115, DOI 10.1007/978-3-319-89960-2_7
   Barthe G, 2018, P IEEE COMPUT SECUR, P328, DOI 10.1109/CSF.2018.00031
   Benton Nick, 2007, Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP'07), P87, DOI 10.1145/1273920.1273932
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Brookes S, 2004, LECT NOTES COMPUT SC, V3170, P16
   Brutschy L, 2017, ACM SIGPLAN NOTICES, V52, P458, DOI 10.1145/3093333.3009895
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   Dardinier Thibault, 2023, ARCH FORMAL PROOF MA
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dimitrov D, 2014, ACM SIGPLAN NOTICES, V49, P305, DOI [10.1145/2594291.2594322, 10.1145/2666356.2594322]
   Eilers Marco, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P502, DOI 10.1007/978-3-319-89884-1_18
   Eilers M, 2023, Arxiv, DOI [arXiv:2211.08459, 10.48550/arXiv.2211.08459, DOI 10.48550/ARXIV.2211.08459]
   Eilers M, 2021, LECT NOTES COMPUT SC, V12759, P718, DOI 10.1007/978-3-030-81685-8_34
   Ernst G, 2019, LECT NOTES COMPUT SC, V11562, P208, DOI 10.1007/978-3-030-25543-5_13
   Farzan A, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571242
   Frumin Dan, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P1416, DOI 10.1109/SP40001.2021.00003
   Giffhorn D, 2015, INT J INF SECUR, V14, P263, DOI 10.1007/s10207-014-0257-6
   Golan-Gueta G, 2015, ACM SIGPLAN NOTICES, V50, P31, DOI [10.1145/2858788.2688511, 10.1145/2688500.2688511]
   Jancar Jan, 2022, 2022 IEEE S SECURITY
   Kim D, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P528
   Kocher P, 2019, P IEEE S SECUR PRIV, P1, DOI 10.1109/SP.2019.00002
   Koskinen E, 2021, LECT NOTES COMPUT SC, V12597, P81, DOI 10.1007/978-3-030-67067-2_5
   Kragl Bernhard, 2021, 2021 Formal Methods in Computer Aided Design (FMCAD), P143, DOI 10.34727/2021/isbn.978-3-85448-046-4_23
   Lipp M, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P973
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Murray T, 2018, 2018 3RD IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P 2018), P16, DOI 10.1109/EuroSP.2018.00010
   Nipkow T., 2002, LECT NOTES COMPUTER, V2283, DOI [10.1007/3-540-45949-9, DOI 10.1007/3-540-45949-9]
   O'Hearn PW, 2004, ACM SIGPLAN NOTICES, V39, P268, DOI [10.1145/982962.964024, 10.1145/1498926.1498929]
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   Parkinson M, 2005, ACM SIGPLAN NOTICES, V40, P247, DOI 10.1145/1047659.1040326
   Pincus Jared, 2022, THESIS STEVENS I TEC
   Russo A, 2007, LECT NOTES COMPUT SC, V4435, P120
   Rustan K, 2009, LECT NOTES COMPUT SC, V5502, P378, DOI 10.1007/978-3-642-00590-9_27
   Sabelfeld A, 2000, P IEEE CSFW, P200, DOI 10.1109/CSFW.2000.856937
   Schoepe D, 2020, Arxiv, DOI arXiv:2001.11142
   Smith G., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P355, DOI 10.1145/268946.268975
   Smith G, 2007, ADV INF SEC, P291
   Smith G, 2006, J COMPUT SECUR, V14, P591, DOI 10.3233/JCS-2006-14605
   Stefan Deian, 2013, Computer Security - ESORICS 2013. 18th European Symposium on Research in Computer Security. Proceedings: LNCS 8134, P718, DOI 10.1007/978-3-642-40203-6_40
   Stefan D, 2012, ACM SIGPLAN NOTICES, V47, P201, DOI 10.1145/2398856.2364557
   Vafeiadis V, 2011, ELECTRON NOTES THEOR, V276, P335, DOI 10.1016/j.entcs.2011.09.029
   Van Cleemput J, 2012, ACM T ARCHIT CODE OP, V8, DOI 10.1145/2086696.2086702
   Vassena Marco, 2019, Principles of Security and Trust. 8th International Conference, POST 2019. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2019. Proceedings: Lecture Notes in Computer Science (11426), P1, DOI 10.1007/978-3-030-17138-4_1
   Vechev M, 2010, LECT NOTES COMPUT SC, V6337, P455, DOI 10.1007/978-3-642-15769-1_28
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Volpano D, 1998, 11TH IEEE COMPUTER SECURITY FOUNDATIONS WORKSHOP - PROCEEDINGS, P34, DOI 10.1109/CSFW.1998.683153
   Yan PB, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485476
   Zdancewic S, 2003, P IEEE CSFW, P29, DOI 10.1109/CSFW.2003.1212703
NR 52
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 175
DI 10.1145/3591289
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900071
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Mordido, A
   Spaderna, J
   Thiemann, P
   Vasconcelos, VT
AF Mordido, Andreia
   Spaderna, Janek
   Thiemann, Peter
   Vasconcelos, Vasco T.
TI Parameterized Algebraic Protocols
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Algebraic datatypes; Session types; Parameterized protocols; Nominal
   types; Isorecursive types
ID SESSION TYPES
AB We propose algebraic protocols that enable the definition of protocol templates and session types analogous to the definition of domain-specific types with algebraic datatypes. Parameterized algebraic protocols subsume all regular as well as most context-free and nested session types and, at the same time, replace the expensive superlinear algorithms for type checking by a nominal check that runs in linear time. Algebraic protocols in combination with polymorphism increase expressiveness and modularity by facilitating new ways of parameterizing and composing session types.
C1 [Mordido, Andreia; Vasconcelos, Vasco T.] Univ Lisbon, Fac Ciencias, LASIGE, Lisbon, Portugal.
   [Spaderna, Janek; Thiemann, Peter] Univ Freiburg, Freiburg, Germany.
C3 Universidade de Lisboa; University of Freiburg
RP Mordido, A (corresponding author), Univ Lisbon, Fac Ciencias, LASIGE, Lisbon, Portugal.
EM afmordido@ciencias.ulisboa.pt; janek.spaderna@pluto.uni-freiburg.de;
   thiemann@acm.org; vmvasconcelos@ciencias.ulisboa.pt
OI Vasconcelos, Vasco/0000-0002-9539-8861
FU Fundacao para a Ciencia e a Tecnologia through project SafeSessions
   [PTDC/CCI-COM/6453/2020]; Fundacao para a Ciencia e a Tecnologia through
   LASIGE Research Unit [UIDB/00408/2020, UIDP/00408/2020]; COST Action
   EuroProofNet [CA20111]
FX We thank the reviewers for their suggestions that greatly contributed to
   a more solid version of the paper. Support for this research was
   provided by the Fundacao para a Ciencia e a Tecnologia through project
   SafeSessions, ref. PTDC/CCI-COM/6453/2020, and the LASIGE Research Unit,
   ref. UIDB/00408/2020 and ref. UIDP/00408/2020, and by the COST Action
   EuroProofNet (CA20111).
CR Abadi M, 1996, IEEE S LOG, P242, DOI 10.1109/LICS.1996.561324
   Almeida Bernardo, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12079), P39, DOI 10.1007/978-3-030-45237-7_3
   Almeida B, 2022, INFORM COMPUT, V289, DOI 10.1016/j.ic.2022.104948
   Almeida B, 2019, ELECTRON P THEOR COM, P12, DOI 10.4204/EPTCS.291.2
   Alves Sandra, 2010, Higher-Order and Symbolic Computation, V23, P1, DOI 10.1007/s10990-010-9060-x
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Bartoletti Massimo, 2014, CONCUR 2014 - Concurrency Theory. 25th International Conference, CONCUR 2014. Proceedings: LNCS 8704, P402, DOI 10.1007/978-3-662-44584-6_28
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Burstall Rod M., 1977, INFOTECH STATE ART C
   Burstall RodM., 1980, Proceedings of the 1980 ACM conference on LISP and Functional Programming, LFP '80, P136, DOI 10.1145/800087.802799
   Caires L, 2016, MATH STRUCT COMP SCI, V26, P367, DOI 10.1017/S0960129514000218
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Castagna G, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P219, DOI 10.1145/1599410.1599437
   Costa D, 2022, ELECTRON P THEOR COM, P24, DOI 10.4204/EPTCS.356.3
   Costa Diana, 2023, LECT NOTES COMPUTER
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   Das A, 2021, LECT NOTES COMPUT SC, V12648, P178, DOI 10.1007/978-3-030-72019-3_7
   Dunfield J, 2021, ACM COMPUT SURV, V54, DOI 10.1145/3450952
   Felleisen M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P180, DOI 10.1145/73560.73576
   Fowler S, 2023, Arxiv, DOI [arXiv:2105.08996, 10.48550/arXiv.2105.08996, DOI 10.48550/ARXIV.2105.08996]
   Fowler Simon, 2021, CONCUR, DOI [10.4230/LIPIcs.CONCUR.2021.36, DOI 10.4230/LIPICS.CONCUR.2021.36]
   FreeST, FREEST PROGR LANG
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay S, 1999, LECT NOTES COMPUT SC, V1576, P74
   Gay SJ, 2022, LECT NOTES COMPUT SC, V13242, P347, DOI 10.1007/978-3-030-99253-8_18
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Jones S. P., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P295, DOI 10.1145/237721.237794
   Krishnaswami NR, 2015, ACM SIGPLAN NOTICES, V50, P17, DOI [10.1145/2676726.2676969, 10.1145/2775051.2676969]
   Lindley S, 2017, RIV PUBL SER AUTOMAT, P265
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P434, DOI 10.1145/3022670.2951921
   Mazurak K, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P77
   McBride Conor, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P207, DOI 10.1007/978-3-319-30936-1_12
   MILNER R, 1992, INFORM COMPUT, V100, P41, DOI 10.1016/0890-5401(92)90009-5
   Montesi F, 2021, Arxiv, DOI arXiv:2106.11818
   Mordido A, 2023, Arxiv, DOI [arXiv:2304.03764, 10.48550/arXiv.2304.03764, DOI 10.48550/ARXIV.2304.03764]
   OSullivan Bryan, GAUGE SMALL FRAMEWOR
   Padovani L, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3229062
   Padovani L, 2017, LECT NOTES COMPUT SC, V10201, P804, DOI 10.1007/978-3-662-54434-1_30
   Patrignani M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434302
   Pfenning Frank, 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P21
   Pfenning F, 2015, LECT NOTES COMPUT SC, V9034, P3, DOI 10.1007/978-3-662-46678-0_1
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Spaderna Janek, 2023, Zenodo, DOI 10.5281/ZENODO.7804667
   Spiwack A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547626
   Takeuchi K., 1994, PARLE '94. Parallel Architectures and Languages Europe. 6th International PARLE Conference Proceedings, P398
   Thiemann P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371135
   Thiemann P, 2016, ACM SIGPLAN NOTICES, V51, P462, DOI 10.1145/3022670.2951926
   Toninho Bernardo, 2014, Trustworthy Global Computing 9th International Symposium, TGC 2014. Revised Selected Papers: LNCS 8902, P159, DOI 10.1007/978-3-662-45917-1_11
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   Vasconcelos VT, 2012, INFORM COMPUT, V217, P52, DOI 10.1016/j.ic.2012.05.002
   Walker David, 2005, Advanced Topics in Types and Programming Languages, chapter Substructural Type Systems, P3
NR 53
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 163
DI 10.1145/3591277
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900059
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Wilkinson, L
   Cheshmi, K
   Dehnavi, MM
AF Wilkinson, Lucas
   Cheshmi, Kazem
   Dehnavi, Maryam Mehri
TI Register Tiling for Unstructured Sparsity in Neural Network Inference
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Loop Tiling; Sparse Matrix; Pruned Neural Networks
AB Unstructured sparse neural networks are an important class of machine learning (ML) models, as they compact model size and reduce floating point operations. The execution time of these models is frequently dominated by the sparse matrix multiplication (SpMM) kernel, C = A x B, where A is a sparse matrix, and B and C are dense matrices. The unstructured sparsity pattern of matrices in pruned machine learning models along with their sparsity ratio has rendered useless the large class of libraries and systems that optimize sparse matrix multiplications. Reusing registers is particularly difficult because accesses to memory locations should be known statically. This paper proposes Sparse Register Tiling, a new technique composed of an unrolland-sparse-jam transformation followed by data compression that is specifically tailored to sparsity patterns in ML matrices. Unroll-and-sparse-jam uses sparsity information to jam the code while improving register reuse. Sparse register tiling is evaluated across 2396 weight matrices from transformer and convolutional models with a sparsity range of 60-95% and provides an average speedup of 1.72x and 2.65x over MKL SpMM and dense matrix multiplication, respectively, on a multicore CPU processor. It also provides an end-to-end speedup of 2.12x for MobileNetV1 with 70% sparsity on an ARM processor commonly used in edge devices.
C1 [Wilkinson, Lucas; Dehnavi, Maryam Mehri] Univ Toronto, Toronto, ON, Canada.
   [Cheshmi, Kazem] McMaster Univ, Hamilton, ON, Canada.
C3 University of Toronto; McMaster University
RP Wilkinson, L (corresponding author), Univ Toronto, Toronto, ON, Canada.
EM lwilkinson@cs.toronto.edu; cheshmi@mcmaster.ca; mmehride@cs.toronto.edu
OI Mehri Dehnavi, Maryam/0000-0002-2719-8788; Cheshmi,
   Kazem/0000-0002-2968-5176
FU NSERC Discovery Grants [RGPIN-06516, DGECR00303]; Canada Research Chairs
   program; Ontario Early Researcher Award; Digital Research Alliance of
   Canada
FX We thank the shepherd and the reviewers for their constructive feedback,
   Faraz Shahsavan for help in improving the paper, and Mythic Beasts Ltd.
   for access to Raspberry Pis. This work is supported by NSERC Discovery
   Grants (RGPIN-06516, DGECR00303), the Canada Research Chairs program,
   the Ontario Early Researcher Award, and the Digital Research Alliance of
   Canada (www.alliancecan.ca).
CR Abel A, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P673, DOI 10.1145/3297858.3304062
   Aktulga HM, 2014, INT PARALL DISTRIB P, DOI 10.1109/IPDPS.2014.125
   ARM, 2015, 0016A ARM UAN
   ARM, 2022, ARM performance libraries
   ARM, 2022, ARM COMP LIB
   Augustine T, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P625, DOI 10.1145/3314221.3314615
   Bik A, 2022, ACM T ARCHIT CODE OP, V19, DOI 10.1145/3544559
   Buluç A, 2009, SPAA'09: PROCEEDINGS OF THE TWENTY-FIRST ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P233
   CARR S, 1994, ACM T PROGR LANG SYS, V16, P1768, DOI 10.1145/197320.197366
   Cheshmi K, 2022, INT CONF HIGH PERFOR, DOI 10.1109/SC41404.2022.00037
   Cheshmi K, 2018, PROCEEDINGS OF THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE, AND ANALYSIS (SC'18)
   Cheshmi K, 2017, SC'17: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, DOI 10.1145/3126908.3126936
   Davis TA, 2011, ACM T MATH SOFTWARE, V38, DOI 10.1145/2049662.2049663
   Ding Xiaohan, 2019, GLOBAL SPARSE MOMENT
   Elsen Erich, 2020, 2020 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). Proceedings, P14617, DOI 10.1109/CVPR42600.2020.01464
   Eun-Jin Im, 2001, Computational Science - ICCS 2001. International Conference. Proceedings, Part I (Lecture Notes in Computer Science Vol.2073), P127
   Howard AG, 2017, Arxiv, DOI arXiv:1704.04861
   Gale T, 2019, Arxiv, DOI [arXiv:1902.09574, DOI 10.48550/ARXIV.1902.09574]
   Gale T, 2020, PROCEEDINGS OF SC20: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS (SC20), DOI 10.1109/SC41405.2020.00021
   google, 2022, XNNPACK
   Goto K, 2008, ACM T MATH SOFTWARE, V34, DOI 10.1145/1356052.1356053
   Guo C, 2020, PROCEEDINGS OF SC20: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS (SC20), DOI 10.1109/SC41405.2020.00020
   Han S, 2015, ADV NEUR IN, V28
   Hoefler T, 2021, J MACH LEARN RES, V23
   Hong CW, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P300, DOI 10.1145/3293883.3295712
   Hong CW, 2018, HPDC '18: PROCEEDINGS OF THE 27TH INTERNATIONAL SYMPOSIUM ON HIGH-PERFORMANCE PARALLEL AND DISTRIBUTED COMPUTING, P66, DOI 10.1145/3208040.3208062
   Horro M, 2022, PROCEEDINGS OF THE 2022 31ST INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PACT 2022, P160, DOI 10.1145/3559009.3569668
   Huang GY, 2022, PROCEEDINGS OF THE 59TH ACM/IEEE DESIGN AUTOMATION CONFERENCE, DAC 2022, P1153, DOI 10.1145/3489517.3530588
   Intel, 2022, Intel math Kernel library
   Kingma DP, 2015, ADV NEUR IN, V28
   Kjolstad F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133901
   Kung HT, 2021, INT CONF HIGH PERFOR, DOI 10.1145/3458817.3476166
   Kurt SE, 2020, PROCEEDINGS OF SC20: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS (SC20), DOI 10.1109/SC41405.2020.00091
   Lagunas F, 2021, 2021 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2021), P10619
   Liu S., 2021, P ADV NEUR INF PROC, V34, P9908
   Louizos Christos, 2017, INT C LEARN REPR ICL
   Low TM, 2016, ACM T MATH SOFTWARE, V43, DOI 10.1145/2925987
   Mao HZ, 2017, Arxiv, DOI arXiv:1705.08922
   Miao Lu, 2022, INT C LEARNING REPRE
   Mishra A, 2021, Arxiv, DOI arXiv:2104.08378
   Mohammadi MS, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P594, DOI 10.1145/3314221.3314646
   Mohammadi MS, 2019, LECT NOTES COMPUT SC, V11882, P78, DOI 10.1007/978-3-030-34627-0_7
   MOSEK ApS, 2022, MOSEK OPT SUIT
   Niu W, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P907, DOI 10.1145/3373376.3378534
   Rajbhandari S, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P267, DOI 10.1145/3037697.3037745
   Rasmussen C. E, 2000, P 13 INT C NEURAL IN, P276
   Sanh Victor, 2020, P 34 INT C NEURAL IN
   Senanayake R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428226
   Terpstra D, 2010, TOOLS FOR HIGH PERFORMANCE COMPUTING 2009, P157, DOI 10.1007/978-3-642-11261-4_11
   Venkat A, 2015, ACM SIGPLAN NOTICES, V50, P521, DOI [10.1145/2813885.2738003, 10.1145/2737924.2738003]
   Vuduc R, 2005, J PHYS CONF SER, V16, P521, DOI 10.1088/1742-6596/16/1/071
   Vuduc R., 2002, PERFORMANCE OPTIMIZA, P26, DOI DOI 10.1109/SC.2002.10025
   Vuduc RW, 2005, LECT NOTES COMPUT SC, V3726, P807
   Wilkinson Lucas, 2023, Zenodo, DOI 10.5281/ZENODO.7832346
   Williams S, 2009, COMMUN ACM, V52, P65, DOI 10.1145/1498765.1498785
   Yang C, 2018, LECT NOTES COMPUT SC, V11014, P672, DOI 10.1007/978-3-319-96983-1_48
   Yu X., 2022, INT C MACHINE LEARNI, V162
   Zhao TW, 2022, ACM T ARCHIT CODE OP, V20, DOI 10.1145/3566054
   Zheng NX, 2022, PROCEEDINGS OF THE 16TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, OSDI 2022, P213
   Zhu MH, 2019, MICRO'52: THE 52ND ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, P359, DOI 10.1145/3352460.3358269
   Zhu MC, 2017, Arxiv, DOI arXiv:1710.01878
NR 61
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 188
DI 10.1145/3591302
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900084
OA gold
DA 2024-07-18
ER

PT J
AU Dardinier, T
   Parthasarathy, G
   Müller, P
AF Dardinier, Thibault
   Parthasarathy, Gaurav
   Mueller, Peter
TI Verification-Preserving Inlining in Automatic Separation Logic Verifiers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Modular Verification; Bounded Verification; Inlining; Loop Unrolling
ID CHECKING
AB Bounded verification has proved useful to detect bugs and to increase confidence in the correctness of a program. In contrast to unbounded verification, reasoning about calls via (bounded) inlining and about loops via (bounded) unrolling does not require method specifications and loop invariants and, therefore, reduces the annotation overhead to the bare minimum, namely specifications of the properties to be verified. For verifiers based on traditional program logics, verification is preserved by inlining (and unrolling): successful unbounded verification of a program w.r.t. some annotation implies successful verification of the inlined program. That is, any error detected in the inlined program reveals a true error in the original program. However, this essential property might not hold for automatic separation logic verifiers such as Caper, GRASShopper, RefinedC, Steel, VeriFast, and verifiers based on Viper. In this setting, inlining generally changes the resources owned by method executions, which may affect automatic proof search algorithms and introduce spurious errors. In this paper, we present the first technique for verification-preserving inlining in automatic separation logic verifiers. We identify a semantic condition on programs and prove in Isabelle/HOL that it ensures verification-preserving inlining for state-of-the-art automatic separation logic verifiers. We also prove a dual result: successful verification of the inlined program ensures that there are method and loop annotations that enable the verification of the original program for bounded executions. To check our semantic condition automatically, we present two approximations that can be checked syntactically and with a program verifier, respectively. We implement these checks in Viper and demonstrate that they are effective for non-trivial examples from different verifiers.
C1 [Dardinier, Thibault; Parthasarathy, Gaurav; Mueller, Peter] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich
RP Dardinier, T (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
EM thibault.dardinier@inf.ethz.ch; gaurav.parthasarathy@inf.ethz.ch;
   peter.mueller@inf.ethz.ch
OI Parthasarathy, Gaurav/0000-0002-1816-9256; Dardinier,
   Thibault/0000-0003-2719-4856
FU Swiss National Science Foundation (SNSF) [197065]
FX We thank the following people for their help: Vytautas Astrauskas and
   Marco Eilers (Nagini), Felix Wolf (Caper), Michael Sammler (RefinedC),
   Denis Merigoux (Steel), Malte Schwerhoff (VeriFast), and Christoph
   Matheja (giving feedback on previous drafts). This work was partially
   funded by the Swiss National Science Foundation (SNSF) under Grant No.
   197065.
CR Agten P, 2015, ACM SIGPLAN NOTICES, V50, P581, DOI [10.1145/2676726.2676972, 10.1145/2775051.2676972]
   Astrauskas V, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360573
   Barthe G, 2011, MATH STRUCT COMP SCI, V21, P1207, DOI 10.1017/S0960129511000193
   Beckert Bernhard, 2020, Leveraging Applications of Formal Methods, Verification and Validation. Verification. Principles. 9th International Symposium on Leveraging Applications of Formal Methods, ISoLA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12476), P60, DOI 10.1007/978-3-030-61362-4_4
   Blom Stefan, 2017, Integrated Formal Methods. 13th International Conference, IFM 2017. Proceedings: LNCS 10510, P102, DOI 10.1007/978-3-319-66845-1_7
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Brotherston J, 2016, ACM SIGPLAN NOTICES, V51, P84, DOI 10.1145/2914770.2837621
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Clarkson MR, 2008, CSF 2008: 21ST IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, PROCEEDINGS, P51, DOI 10.1109/CSF.2008.7
   Cordeiro L, 2018, LECT NOTES COMPUT SC, V10981, P183, DOI 10.1007/978-3-319-96145-3_10
   Dardinier T, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563326
   Dardinier T, 2022, Arxiv, DOI [arXiv:2208.10456, 10.48550/ARXIV.2208.10456, DOI 10.48550/ARXIV.2208.10456]
   Dardinier T, 2022, LECT NOTES COMPUT SC, V13372, P130, DOI 10.1007/978-3-031-13188-2_7
   Dardinier Thibault, 2023, VERIFICATION PRESERV, DOI [10.5281/zenodo.7711788, DOI 10.5281/ZENODO.7711788]
   Dinsdale-Young T, 2017, LECT NOTES COMPUT SC, V10201, P420, DOI 10.1007/978-3-662-54434-1_16
   Dockins R, 2009, LECT NOTES COMPUT SC, V5904, P161, DOI 10.1007/978-3-642-10672-9_13
   Doko M, 2017, LECT NOTES COMPUT SC, V10201, P448, DOI 10.1007/978-3-662-54434-1_17
   Eilers M, 2018, LECT NOTES COMPUT SC, V10981, P596, DOI 10.1007/978-3-319-96145-3_33
   Fromherz A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473590
   Jacobs B, 2015, INT J SOFTW TOOLS TE, V17, P659, DOI 10.1007/s10009-014-0310-9
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Lal Akash, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P427, DOI 10.1007/978-3-642-31424-7_32
   Lal A, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P202, DOI 10.1145/2635868.2635894
   Leavens G.T., 2006, SIGSOFT SOFTWARE ENG, V31, P1, DOI DOI 10.1145/1127878.1127884
   Leino KRM, 2015, LECT NOTES COMPUT SC, V9206, P380, DOI 10.1007/978-3-319-21690-4_22
   Lourenco CB, 2019, FME WORKS FORM, P75, DOI 10.1109/FormaliSE.2019.00017
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Nguyen HH, 2008, LECT NOTES COMPUT SC, V4905, P203, DOI 10.1007/978-3-540-78163-9_19
   Parkinson MJ, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(3:01)2012
   Piskac T., 2014, LNCS, P124, DOI DOI 10.1007/978-3-642-54862-8_9
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rustan K., 2008, This is Boogie, V2
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   Schwerhoff Malte, 2015, LIPIcs, V37, P614
   Summers AJ, 2018, LECT NOTES COMPUT SC, V10805, P190, DOI 10.1007/978-3-319-89960-2_11
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Vafeiadis V, 2013, ACM SIGPLAN NOTICES, V48, P867, DOI [10.1145/2544173.2509532, 10.1145/2509136.2509532]
   Yang HS, 2002, LECT NOTES COMPUT SC, V2303, P402
NR 40
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586054
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600029
OA Green Submitted, gold, Green Published
DA 2024-07-18
ER

PT J
AU Batz, K
   Kaminski, BL
   Katoen, JP
   Matheja, C
   Verscht, L
AF Batz, Kevin
   Kaminski, Benjamin Lucien
   Katoen, Joost-Pieter
   Matheja, Christoph
   Verscht, Lena
TI A Calculus for Amortized Expected Runtimes
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantitative verification; randomized data structures; amortized
   analysis
ID COMPLEXITY
AB We develop a weakest-precondition-style calculus a la Dijkstra for reasoning about amortized expected runtimes of randomized algorithms with access to dynamic memory - the aert calculus. Our calculus is truly quantitative, i.e. instead of Boolean valued predicates, it manipulates real-valued functions. En route to the aert calculus, we study the ert calculus for reasoning about expected runtimes of Kaminski et al. [2018] extended by capabilities for handling dynamic memory, thus enabling compositional and local reasoning about randomized data structures. This extension employs runtime separation logic, which has been foreshadowed by Matheja [2020] and then implemented in Isabelle/HOL by Haslbeck [2021]. In addition to Haslbeck's results, we further prove soundness of the so-extended ert calculus with respect to an operational Markov decision process model featuring countably-branching nondeterminism, provide extensive intuitive explanations, and provide proof rules enabling separation logic-style verification for upper bounds on expected runtimes. Finally, we build the so-called potential method for amortized analysis into the ert calculus, thus obtaining the aert calculus. Soundness of the aert calculus is obtained from the soundness of the ert calculus and some probabilistic form of telescoping. Since one needs to be able to handle changes in potential which can in principle be both positive or negative, the aert calculus needs to be - essentially - capable of handling certain signed random variables. A particularly pleasing feature of our solution is that, unlike e. g. Kozen [1985], we obtain a loop rule for our signed random variables, and furthermore, unlike e. g. Kaminski and Katoen [2017], the aert calculus makes do without the need for involved technical machinery keeping track of the integrability of the random variables. Finally, we present case studies, including a formal analysis of a randomized delete-insert-find-any set data structure [Brodal et al. 1996], which yields a constant expected runtime per operation, whereas no deterministic algorithm can achieve this.
C1 [Batz, Kevin; Katoen, Joost-Pieter; Verscht, Lena] Rhein Westfal TH Aachen, Aachen, Germany.
   [Kaminski, Benjamin Lucien] Saarland Univ, Saarland Informat Campus, Saarbrucken, Germany.
   [Kaminski, Benjamin Lucien] UCL, London, England.
   [Matheja, Christoph] Tech Univ Denmark, Lyngby, Denmark.
C3 RWTH Aachen University; Saarland University; University of London;
   University College London; Technical University of Denmark
RP Batz, K (corresponding author), Rhein Westfal TH Aachen, Aachen, Germany.
EM kevin.batz@cs.rwth-aachen.de; kaminski@cs.uni-saarland.de;
   katoen@cs.rwth-aachen.de; chmat@dtu.dk; lena.verscht@rwth-aachen.de
RI Matheja, Christoph/HZK-7338-2023; Katoen, Joost-Pieter/O-3307-2018
OI Matheja, Christoph/0000-0001-9151-0441; Batz, Kevin/0000-0001-8705-2564;
   Katoen, Joost-Pieter/0000-0002-6143-1926; Kaminski, Benjamin
   Lucien/0000-0001-5185-2324
CR Albers S, 2002, INFORM PROCESS LETT, V81, P213, DOI 10.1016/S0020-0190(01)00230-7
   Atkey R, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:17)2011
   Avanzini M, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785725
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Batz K, 2022, LECT NOTES COMPUT SC, V13240, P57, DOI 10.1007/978-3-030-99336-8_3
   Batz K, 2021, LECT NOTES COMPUT SC, V12760, P524, DOI 10.1007/978-3-030-81688-9_25
   Batz K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434320
   Batz K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290347
   Batz Kevin, 2022, CALCULUS AMORTIZED E
   Blackwell D., 1967, P 5 BERKELEY S MATH, V1, P415
   Brázdil T, 2015, J COMPUT SYST SCI, V81, P288, DOI 10.1016/j.jcss.2014.06.005
   Brodal G. S., 1996, Nordic Journal of Computing, V3, P337
   Carbonneaux Q, 2014, ACM SIGPLAN NOTICES, V49, P270, DOI [10.1145/2594291.2594301, 10.1145/2666356.2594301]
   Celiku O, 2005, LECT NOTES COMPUT SC, V3582, P107
   Charguéraud A, 2019, J AUTOM REASONING, V62, P331, DOI 10.1007/s10817-017-9431-7
   Cormen T.H., 2009, INTRO ALGORITHMS
   Furer Martin, 1999, PROC 10 SODA, P903
   Gueneau Armael, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P533, DOI 10.1007/978-3-319-89884-1_19
   Haslbeck MPL, 2018, LECT NOTES COMPUT SC, V10805, P155, DOI 10.1007/978-3-319-89960-2_9
   Hoffmann J, 2022, MATH STRUCT COMP SCI, V32, P729, DOI 10.1017/S0960129521000487
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Jan Ho~mann, 2011, THESIS LMU MUNICH
   Kahn DM, 2020, LECT NOTES COMPUT SC, V12077, P359, DOI 10.1007/978-3-030-45231-5_19
   Kaminski BL, 2018, J ACM, V65, DOI 10.1145/3208102
   Kaminski Benjamin Lucien, 2019, Ph. D. Dissertation, DOI [10.18154/RWTH-2019-01829, DOI 10.18154/RWTH-2019-01829]
   Kaminski Benjamin Lucien, 2017, 32 ANN ACMIEEE S LOG, P1
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Leutgeb Lorenz, 2022, LECT NOTES INN COMPU
   Matheja Christoph, 2020, DISSERTATION
   McIver Annabelle., 2005, MG COMP SCI
   Mével G, 2019, LECT NOTES COMPUT SC, V11423, P3, DOI 10.1007/978-3-030-17184-1_1
   Meyer Fabian, 2021, Tools and Algorithms for the Construction and Analysis of Systems. 27th International Conference, TACAS 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12651), P250, DOI 10.1007/978-3-030-72016-2_14
   Monniaux D, 2001, LECT NOTES COMPUT SC, V2126, P111
   Moosbrugger M, 2021, LECT NOTES COMPUT SC, V12648, P491, DOI 10.1007/978-3-030-72019-3_18
   Nipkow T, 2019, J AUTOM REASONING, V62, P367, DOI 10.1007/s10817-018-9459-3
   Nipkow T, 2015, LECT NOTES COMPUT SC, V9236, P310, DOI 10.1007/978-3-319-22102-1_21
   Paul Maximilian, 2021, DISSERTATION
   PUGH W, 1989, LECT NOTES COMPUT SC, V382, P437
   Puterman M., 2005, MARKOV DECISION PROC
   Rajani V, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434308
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   SLEATOR DD, 1985, J ACM, V32, P652, DOI 10.1145/3828.3835
   TARJAN RE, 1985, SIAM J ALGEBRA DISCR, V6, P306, DOI 10.1137/0606031
   Ngo VC, 2018, ACM SIGPLAN NOTICES, V53, P496, DOI [10.1145/3192366.3192394, 10.1145/3296979.3192394]
   Wang D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408992
NR 45
TC 5
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571260
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500067
OA gold, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Gu, Y
   Tsukada, T
   Unno, H
AF Gu, Yu
   Tsukada, Takeshi
   Unno, Hiroshi
TI Optimal CHC Solving via Termination Proofs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE specification synthesis; termination analysis; constrained Horn clause
ID PROGRAM TERMINATION; RANKING FUNCTIONS; LINEAR RANKING; INFERENCE
AB Motivated by applications to open program reasoning such as maximal specification inference, this paper studies optimal CHC solving, a problem to compute maximal and/or minimal solutions of constrained Horn clauses (CHCs). This problem and its subproblems have been studied in the literature, and a major approach is to iteratively improve a solution of CHCs until it becomes optimal. So a key ingredient of optimization methods is the optimality checking of a given solution.
   We propose a novel optimality checking method, as well as an optimization method using the proposed optimality checker, based on a computational theoretical analysis of the optimality checking problem. The key observation is that the optimality checking problem is closely related to the termination analysis of programs, and this observation is useful both theoretically and practically. From a theoretical perspective, it clarifies a limitation of an existing method and incorrectness of another method in the literature. From a practical perspective, it allows us to apply techniques of termination analysis to the optimality checking of a solution of CHCs. We present an optimality checking method based on constraint-based synthesis of termination arguments, implemented our method, evaluated it on CHCs that encode maximal specification synthesis problems, and obtained promising results.
C1 [Gu, Yu; Unno, Hiroshi] Univ Tsukuba, Tsukuba, Ibaraki, Japan.
   [Tsukada, Takeshi] Chiba Univ, Chiba, Japan.
   [Unno, Hiroshi] RIKEN AIP, Tokyo, Japan.
C3 University of Tsukuba; Chiba University; RIKEN
RP Gu, Y (corresponding author), Univ Tsukuba, Tsukuba, Ibaraki, Japan.
EM kou@logic.cs.tsukuba.ac.jp; tsukada@math.s.chiba-u.ac.jp;
   uhiro@cs.tsukuba.ac.jp
RI Unno, Hiroshi/IWM-2419-2023
OI Unno, Hiroshi/0000-0002-4225-8195; Tsukada, Takeshi/0000-0002-2824-8708
FU JSPS KAKENHI [JP20H05703, JP22H03564, JP20H04162, JP22H03570,
   JP19H04084]; Grants-in-Aid for Scientific Research [22H03564] Funding
   Source: KAKEN
FX This work was supported by JSPS KAKENHI Grant Numbers JP20H05703,
   JP22H03564, JP20H04162, JP22H03570 and JP19H04084.
CR Albarghouthi A, 2016, ACM SIGPLAN NOTICES, V51, P789, DOI 10.1145/2914770.2837628
   Alias C, 2010, LECT NOTES COMPUT SC, V6337, P117, DOI 10.1007/978-3-642-15769-1_8
   [Anonymous], 2013, Proceedings (Lecture Notes in Computer Science, DOI DOI 10.1007/978-3-642-39799
   [Anonymous], 1968, First-Order Logic
   Ben-Amram AM, 2017, LECT NOTES COMPUT SC, V10427, P601, DOI 10.1007/978-3-319-63390-9_32
   Ben-Amram AM, 2014, J ACM, V61, DOI 10.1145/2629488
   Beyene TA, 2014, ACM SIGPLAN NOTICES, V49, P221, DOI 10.1145/2535838.2535860
   Blackshear S, 2013, ACM SIGPLAN NOTICES, V48, P209, DOI 10.1145/2499370.2462188
   Bradley AR, 2005, LECT NOTES COMPUT SC, V3576, P491
   Cook B, 2006, ACM SIGPLAN NOTICES, V41, P415, DOI 10.1145/1133981.1134029
   Cousot P, 2013, LECT NOTES COMPUT SC, V7737, P128
   Das A, 2015, LECT NOTES COMPUT SC, V9206, P324, DOI 10.1007/978-3-319-21690-4_19
   Fedyukovich G, 2018, LECT NOTES COMPUT SC, V10981, P124, DOI 10.1007/978-3-319-96145-3_7
   Giesl J, 2017, J AUTOM REASONING, V58, P3, DOI 10.1007/s10817-016-9388-y
   Gonnord L, 2015, ACM SIGPLAN NOTICES, V50, P608, DOI [10.1145/2737924.2737976, 10.1145/2813885.2737976]
   Hashimoto K, 2015, LECT NOTES COMPUT SC, V9291, P199, DOI 10.1007/978-3-662-48288-9_12
   Heizmann M, 2014, LECT NOTES COMPUT SC, V8559, P797, DOI 10.1007/978-3-319-08867-9_53
   Kura S, 2021, LECT NOTES COMPUT SC, V12760, P75, DOI 10.1007/978-3-030-81688-9_4
   Kuwahara T, 2014, LECT NOTES COMPUT SC, V8410, P392
   Lahiri Shuvendu K., 2020, 2020 Formal Methods in Computer Aided Design (FMCAD), P169, DOI 10.34727/2020/isbn.978-3-85448-042-6_24
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   Leike Jan, 2014, LNCS, V8413, P172
   Padhi S, 2016, ACM SIGPLAN NOTICES, V51, P42, DOI [10.1145/2908080.2908099, 10.1145/2980983.2908099]
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   Prabhu S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1203, DOI 10.1145/3453483.3454104
   Sankaranarayanan Sriram, 2008, ISSTA, P295, DOI [10.1145/1390630, DOI 10.1145/1390630]
   Satake Y, 2020, AAAI CONF ARTIF INTE, V34, P1644
   Seghir MN, 2013, LECT NOTES COMPUT SC, V7792, P451, DOI 10.1007/978-3-642-37036-6_25
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Srivastava S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P223, DOI 10.1145/1542476.1542501
   Unno H, 2021, LECT NOTES COMPUT SC, V12759, P742, DOI 10.1007/978-3-030-81685-8_35
   Urban C, 2016, LECT NOTES COMPUT SC, V9636, P54, DOI 10.1007/978-3-662-49674-9_4
   Urban C, 2014, LECT NOTES COMPUT SC, V8410, P412
   Urban C, 2013, LECT NOTES COMPUT SC, V7935, P43, DOI 10.1007/978-3-642-38856-9_5
   Zhou Z, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485493
NR 35
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571214
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500021
OA gold
DA 2024-07-18
ER

PT J
AU Xu, H
   Huang, XJ
   Oliveira, BCDS
AF Xu, Han
   Huang, Xuejing
   Oliveira, Bruno C. D. S.
TI Making a Type Difference
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE functional languages; object oriented languages; type systems
ID INTERSECTION; CALCULUS; EXTENSION; SEMANTICS; SYNTAX
AB In programming languages with records, objects, or traits, it is common to have operators that allow dropping, updating or renaming some components. These operators are useful for programmers to explicitly deal with conflicts and override or update some components. While such operators have been studied for record types, little work has been done to generalize and study their theory for other types.
   This paper shows that, given subtyping and disjointness relations, we can specify and derive algorithmic implementations for a general type difference operator that works for other types, including function types, record types and intersection types. When defined in this way, the type difference algebra has many desired properties that are expected from a subtraction operator. Together with a generic merge operator, using type difference we can generalize many operations on records formalized in the literature. To illustrate the usefulness of type difference we create an intermediate calculus with a rich set of operators on expressions of arbitrary type, and demonstrate applications of these operators in CP, a prototype language for Compositional Programming. The semantics of the calculus is given by elaborating into a calculus with disjoint intersection types and a merge operator. We have implemented type difference and all the operators in the CP language. Moreover, all the calculi and related proofs are mechanically formalized in the Coq theorem prover.
C1 [Xu, Han] Peking Univ, Beijing, Peoples R China.
   [Huang, Xuejing; Oliveira, Bruno C. D. S.] Univ Hong Kong, Hong Kong, Peoples R China.
C3 Peking University; University of Hong Kong
RP Xu, H (corresponding author), Peking Univ, Beijing, Peoples R China.
EM 1800012917@pku.edu.cn; xjhuang@cs.hku.hk; bruno@cs.hku.hk
RI dos Santos Oliveira, Bruno Cesar/I-7977-2013
OI Huang, Xuejing/0000-0002-8496-491X; Xu, Han/0000-0002-2548-6866;
   Oliveira, Bruno/0000-0002-1846-7210
CR Alpuim J, 2017, LECT NOTES COMPUT SC, V10201, P1, DOI 10.1007/978-3-662-54434-1_1
   Alves S, 2021, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.351.1
   Ancona D, 2003, ACM T PROGR LANG SYS, V25, P641, DOI 10.1145/937563.937567
   Ancona D, 2002, J FUNCT PROGRAM, V12, P91, DOI 10.1017/S0956796801004257
   Ancona D., 1998, Mathematical Structures in Computer Science, V8, P401, DOI 10.1017/S0960129598002576
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   BARBANERA F, 1995, INFORM COMPUT, V119, P202, DOI 10.1006/inco.1995.1086
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Benzaken V, 2013, ACM SIGPLAN NOTICES, V48, P101, DOI 10.1145/2480359.2429083
   Bi X, 2019, LECT NOTES COMPUT SC, V11423, P381, DOI 10.1007/978-3-030-17184-1_14
   Bi Xuan, 2018, ECOOP, DOI [10.4230/LIPIcs.ECOOP.2018.9, DOI 10.4230/LIPICS.ECOOP.2018.9]
   Bi Xuan, 2018, LIPICS, V109, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Bracha Gilad., 1992, The Programming Language Jigsaw: Mixins, Modularity, and Multiple Inheritance
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   CARDELLI L, 1994, INFORM COMPUT, V109, P4, DOI 10.1006/inco.1994.1013
   Cardelli Luca., 1991, Mathematical structures in computer science, V1, P3, DOI DOI 10.1017/S0960129500000049
   Castagna G, 2005, LECT NOTES COMPUT SC, V3580, P30
   Castagna G, 2022, Arxiv, DOI arXiv:1809.01427
   Castagna G, 2016, ACM SIGPLAN NOTICES, V51, P378, DOI 10.1145/3022670.2951928
   Castagna G, 2015, ACM SIGPLAN NOTICES, V50, P289, DOI 10.1145/2775051.2676991
   Castagna G, 2014, ACM SIGPLAN NOTICES, V49, P5, DOI 10.1145/2535838.2535840
   Castagna G, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P94
   COOK W, 1989, SIGPLAN NOTICES, V24, P433, DOI 10.1145/74878.74922
   COPPO M, 1981, Z MATH LOGIK, V27, P45, DOI 10.1002/malq.19810270205
   Coppo M., 1978, Archiv fur Mathematische Logik und Grundlagenforschung, V19, P139, DOI 10.1007/BF02011875
   Davies R, 2000, ACM SIGPLAN NOTICES, V35, P198, DOI 10.1145/357766.351259
   Duggan D, 1996, ACM SIGPLAN NOTICES, V31, P262, DOI 10.1145/232629.232654
   Dunfield J, 2014, J FUNCT PROGRAM, V24, P133, DOI 10.1017/S0956796813000270
   Fan Andong, 2022, 36 EUROPEAN C OBJECT, V18, P1
   Fisher Kathleen, 2004, EL P FOOL, V2004
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Harper Robert, 1991, C RECORD 18 ANN ACM, P131, DOI [10.1145/99583.99603, DOI 10.1145/99583.99603]
   Huang Xuejing, 2021, TAMING MERGE OPERATO, V31, DOI [10.1017/S0956796821000186, DOI 10.1017/S0956796821000186]
   Jun Young Bae, 2004, SCI MATH JPN ONLINE, V2004, P397
   Lagorio G, 2009, LECT NOTES COMPUT SC, V5653, P244, DOI 10.1007/978-3-642-03013-0_12
   Luo ZH, 1999, J LOGIC COMPUT, V9, P105, DOI 10.1093/logcom/9.1.105
   Marntirosian K, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428274
   Ohori A, 1995, ACM T PROGR LANG SYS, V17, P844, DOI 10.1145/218570.218572
   Ohori A., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P154, DOI 10.1145/143165.143200
   Oliveira BCDS, 2016, ACM SIGPLAN NOTICES, V51, P364, DOI 10.1145/3022670.2951945
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pottier F, 2000, LECT NOTES COMPUT SC, V1782, P320
   Pottinger Garrel, 1980, ESSAYS COMBINATORY L, P561
   Remy D., 1993, Theoretical Aspects Of Object-Oriented Programming. Types
   Remy Didier, 1995, WORKSH ADV TYP COMP
   REYNOLDS JC, 1991, LECT NOTES COMPUT SC, V526, P675
   Reynolds John C., 1988, Preliminary design of the programming language Forsythe
   Reynolds JohnC., 1997, ALGOLLIKE LANGUAGES, V1, P173, DOI DOI 10.1007/978-1-4612-4118-8_9
   Scala Community, 2022, TOUR SCAL SELF TYP
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   SCHEIN BM, 1992, COMMUN ALGEBRA, V20, P2153, DOI 10.1080/00927879208824453
   Shields M, 2001, ACM SIGPLAN NOTICES, V36, P261, DOI 10.1145/373243.360230
   Tesonea P, 2020, SCI COMPUT PROGRAM, V195, DOI 10.1016/j.scico.2020.102470
   Wadler P., 1998, JAVA GENERICITY MAIL
   WAND M, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P92
   Xie Ningning, 2020, 34 EUR C OBJ OR PROG, V166, DOI [10.4230/LIPIcs.ECOOP.2020.27, DOI 10.4230/LIPICS.ECOOP.2020.27]
   Xu Han, 2022, MAKING TYPE DIFFEREN, DOI [10.5281/zenodo.7472859, DOI 10.5281/ZENODO.7472859]
   Zhang W, 2023, ANN OPER RES, V329, P573, DOI 10.1007/s10479-020-03896-y
   Zwanenburg Jan, 1995, 9534 EINDH U TECHN
NR 60
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571224
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500031
OA gold
DA 2024-07-18
ER

PT J
AU Chen, QC
   Pailoor, S
   Barnaby, C
   Criswell, A
   Wang, CL
   Durrett, G
   Dillig, I
AF Chen, Qiaochu
   Pailoor, Shankara
   Barnaby, Celeste
   Criswell, Abby
   Wang, Chenglong
   Durrett, Greg
   Dillig, Isil
TI Type-Directed Synthesis of Visualizations from Natural Language Queries
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Programming by Natural Languages; Data Visualization
AB We propose a new technique based on program synthesis for automatically generating visualizations from natural language queries. Our method parses the natural language query into a refinement type specification using the intents-and-slots paradigm and leverages type-directed synthesis to generate a set of visualization programs that are most likely to meet the user's intent. Our refinement type system captures useful hints present in the natural language query and allows the synthesis algorithm to reject visualizations that violate well-established design guidelines for the input data set. We have implemented our ideas in a tool called Graphy and evaluated it on NLVCorpus, which consists of 3 popular datasets and over 700 real-world natural language queries. Our experiments show that Graphy significantly outperforms state-of-the-art natural language based visualization tools, including transformer and rule-based ones.
C1 [Chen, Qiaochu; Pailoor, Shankara; Barnaby, Celeste; Criswell, Abby; Durrett, Greg; Dillig, Isil] Univ Texas Austin, Austin, TX 78712 USA.
   [Wang, Chenglong] Microsoft Res, New York, NY USA.
C3 University of Texas System; University of Texas Austin; Microsoft
RP Chen, QC (corresponding author), Univ Texas Austin, Austin, TX 78712 USA.
EM qchen@cs.utexas.edu; spailoor@cs.utexas.edu; celestebarnaby@utexas.edu;
   abbycriswell@utexas.edu; chenglong.wang@microsoft.com;
   gdurrett@cs.utexas.edu; isil@cs.utexas.edu
OI Dillig, Isil/0000-0001-8006-1230; Durrett, Greg/0000-0002-7061-7298;
   Barnaby, Celeste/0000-0001-7688-6133; Criswell, Abby/0000-0002-2596-1831
FU National Science Foundation [CCF-1811865, CCF-1712067, CCF-1762299,
   CCF-1918889]; Google under the Google Faculty Research Grant; Facebook;
   Amazon; RelationalAI
FX We would like to thank Anders Miltner, Ben Mariano, Xi Ye, fellow
   graduate students on GDC 5S, and the anonymous reviewers for their help
   and feedback for this paper. This material is based upon work supported
   by the National Science Foundation under grant number CCF-1811865,
   CCF-1712067, CCF-1762299, CCF-1918889, Google under the Google Faculty
   Research Grant, as well as Facebook, Amazon and RelationalAI.
CR [Anonymous], 1957, J. Symb. Log., DOI DOI 10.2307/2963593
   [Anonymous], 2006, P COLING ACL 2006 MA
   [Anonymous], 2005, P 21 C UNCERTAINTY A, DOI DOI 10.3115/1690219.1690283
   Bahdanau D, 2016, Arxiv, DOI [arXiv:1409.0473, 10.48550/arXiv.1409.0473]
   Brown T., 2020, Advances in Neural Information Processing Systems, V33, P1877, DOI [DOI 10.48550/ARXIV.2005.14165, DOI 10.5555/3495724.3495883]
   Chen Qiaochu, 2022, arXiv, DOI [10.48550/ARXIV.2209.01081, DOI 10.48550/ARXIV.2209.01081]
   Chen YJ, 2020, LECT NOTES COMPUT SC, V12225, P587, DOI 10.1007/978-3-030-53291-8_30
   Dahl D. A., 1994, HUMAN LANGUAGE TECHN, P43
   Devlin J, 2019, 2019 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES (NAACL HLT 2019), VOL. 1, P4171
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   Gao T, 2015, UIST'15: PROCEEDINGS OF THE 28TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P489, DOI 10.1145/2807442.2807478
   Gulwani S, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P803, DOI 10.1145/2588555.2612177
   Gvero T, 2015, ACM SIGPLAN NOTICES, V50, P416, DOI [10.1145/2858965.2814295, 10.1145/2814270.2814295]
   Hemphill C. T., 1990, SPEECH NATURAL LANGU, V90, P96
   Knoth T, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P253, DOI 10.1145/3314221.3314602
   Knowles K., 2009, Proceedings of the 3rd workshop on Programming languages meets program veri cation, PLPV '09, P27, DOI [10.1145/1481848.1481853, DOI 10.1145/1481848.1481853]
   Lewis M., 2020, P 58 ANN M ASS COMP, P7871, DOI 10.18653/v1/2020.acl-main.703
   Lin XV, 2020, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2020, P4870
   Lin XV, 2018, PROCEEDINGS OF THE ELEVENTH INTERNATIONAL CONFERENCE ON LANGUAGE RESOURCES AND EVALUATION (LREC 2018), P3107
   Loshchilov I., 2019, DECOUPLED WEIGHT DEC
   Luo YY, 2021, INT CONF MANAGE DATA, P1235, DOI 10.1145/3448016.3457261
   Luo YY, 2022, IEEE T VIS COMPUT GR, V28, P217, DOI 10.1109/TVCG.2021.3114848
   Mackinlay JD, 2007, IEEE T VIS COMPUT GR, V13, P1137, DOI 10.1109/TVCG.2007.70594
   MARTINLOF P, 1984, PHILOS T R SOC A, V312, P501, DOI 10.1098/rsta.1984.0073
   Moritz D, 2019, IEEE T VIS COMPUT GR, V25, P438, DOI 10.1109/TVCG.2018.2865240
   Narechania A, 2021, IEEE T VIS COMPUT GR, V27, P369, DOI 10.1109/TVCG.2020.3030378
   Osera PM, 2019, TYDE '19: PROCEEDINGS OF THE 4TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT, P64, DOI 10.1145/3331554.3342608
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Poesia Gabriel, 2022, INT C LEARN REPR
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Qin XD, 2018, BIG DATA MIN ANAL, V1, P75, DOI 10.26599/BDMA.2018.9020007
   Rondon PM, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1379022.1375602
   See A, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P1073, DOI 10.18653/v1/P17-1099
   Srinivasan A, 2021, CHI '21: PROCEEDINGS OF THE 2021 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, DOI 10.1145/3411764.3445400
   Sun YW, 2010, LECT NOTES COMPUT SC, V6133, P184
   Tur G., 2010, Proceedings 2010 IEEE Spoken Language Technology Workshop (SLT 2010), P19, DOI 10.1109/SLT.2010.5700816
   Vaswani A, 2017, ADV NEUR IN, V30
   Wang Bailin, 2020, ACL, P7567
   Wang CL, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371117
   Wolf T, 2020, PROCEEDINGS OF THE 2020 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING: SYSTEM DEMONSTRATIONS, P38
   Wongsuphasawat K, 2016, IEEE T VIS COMPUT GR, V22, P649, DOI 10.1109/TVCG.2015.2467191
   Yaghmazadeh N, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133887
   Ye X, 2021, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2021, P1691
   Yu BW, 2020, IEEE T VIS COMPUT GR, V26, P1, DOI 10.1109/TVCG.2019.2934668
   Zelle JM, 1996, PROCEEDINGS OF THE THIRTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE EIGHTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE, VOLS 1 AND 2, P1050
NR 48
TC 3
Z9 3
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 144
DI 10.1145/3563307
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200021
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Ritschel, N
   Fronchetti, F
   Holmes, R
   Garcia, R
   Shepherd, DC
AF Ritschel, Nico
   Fronchetti, Felipe
   Holmes, Reid
   Garcia, Ronald
   Shepherd, David C.
TI Can Guided Decomposition Help End-UsersWrite Larger Block-Based
   Programs? A Mobile Robot Experiment
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Block-based programming; program decomposition; mobile robots
AB Block-based programming environments, already popular in computer science education, have been successfully used to make programming accessible to end-users in domains like robotics, mobile apps, and even DevOps. Most studies of these applications have examined small programs that fit within a single screen, yet real-world programs often grow large, and editing these large block-based programs quickly becomes unwieldy. Traditional programming language features, like functions, allow programmers to decompose their programs. Unfortunately, both previous work, and our own findings, suggest that end-users rarely use these features, resulting in large monolithic code blocks that are hard to understand. In this work, we introduce a block-based system that provides users with a hierarchical, domain-specific program structure and requires them to decompose their programs accordingly. Through a user study with 92 users, we compared this approach, which we call guided program decomposition, to a traditional system that supports functions, but does not require decomposition. We found that while almost all users could successfully complete smaller tasks, those who decomposed their programs were significantly more successful as the tasks grew larger. As expected, most users without guided decomposition did not decompose their programs, resulting in poor performance on larger problems. In comparison, users of guided decomposition performed significantly better on the same tasks. Though this study investigated only a limited selection of tasks in one specific domain, it suggests that guided decomposition can benefit end-user programmers. While no single decomposition strategy fits all domains, we believe that similar domain-specific sub-hierarchies could be found for other application areas, increasing the scale of code end-users can create and understand.
C1 [Ritschel, Nico; Holmes, Reid; Garcia, Ronald] Univ British Columbia, Vancouver, BC, Canada.
   [Fronchetti, Felipe; Shepherd, David C.] Virginia Commonwealth Univ, Richmond, VA USA.
C3 University of British Columbia; Virginia Commonwealth University
RP Ritschel, N (corresponding author), Univ British Columbia, Vancouver, BC, Canada.
EM ritschel@cs.ubc.ca; fronchettl@vcu.edu; rtholmes@cs.ubc.ca;
   rxg@cs.ubc.ca; shepherdd@vcu.edu
OI Ritschel, Nico/0000-0001-5600-2978; Garcia, Ronald/0000-0002-0982-1118;
   Fronchetti Dias, Luiz Felipe/0000-0003-2104-6676
FU National Science Foundation [2024561, 2050958]; NSERC Collaborative
   Research and Development Grant
FX We thank the anonymous reviewers for their thorough and insightful
   feedback. This work has been funded by the National Science Foundation
   through grants 2024561 and 2050958, as well as an NSERC Collaborative
   Research and Development Grant.
CR ABB Group, 2021, Wizard easy programming.
   Abbes M, 2011, EUR CON SFTWR MTNCE, P181, DOI 10.1109/CSMR.2011.24
   Amanullah Kashif, 2019, P FRONT ED C FIE, P1
   [Anonymous], 2013, Blockly: A visual programming editor
   Argall BD, 2009, ROBOT AUTON SYST, V57, P469, DOI 10.1016/j.robot.2008.10.024
   Barricelli BR, 2019, J SYST SOFTWARE, V149, P101, DOI 10.1016/j.jss.2018.11.041
   Benedetelli Daniele, 2013, Lego Mindstorms EV3 Laboratory: Build, Program, and Experiment with Five Wicked Cool Robots
   Biggs G., 2003, Proceedings of the Australasian conference on robotics and automation, P27, DOI DOI 10.1109/ROBOT.2001.932554
   Bragdon A, 2010, CHI2010: PROCEEDINGS OF THE 28TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P2503
   Burger B, 2020, NATURE, V583, P237, DOI 10.1038/s41586-020-2442-2
   Charalampidou Sofia, 2015, P INT C PRED MOD DAT, P1
   Chen Chiu-Liang, 2012, P INT C FRONT ED COM, P1
   Conway Matthew John, 1998, Ph. D. Dissertation
   Dorn Brian James, 2010, Ph. D. Dissertation
   Elmqvist N, 2010, IEEE T VIS COMPUT GR, V16, P439, DOI 10.1109/TVCG.2009.84
   Fowler M., 1999, Refactoring: Improving the Design of Existing Code
   Fraser N, 2015, 2015 IEEE BLOCKS AND BEYOND WORKSHOP (BLOCKS AND BEYOND), P49, DOI 10.1109/BLOCKS.2015.7369000
   Gonçalves MC, 2021, BEHAV INFORM TECHNOL, V40, P974, DOI 10.1080/0144929X.2021.1921028
   Green TRG, 1996, J VISUAL LANG COMPUT, V7, P131, DOI 10.1006/jvlc.1996.0009
   Harvey B, 2014, PROCEEDINGS OF THE 45TH ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION (SIGCSE'14), P749
   Hazzan Orit, 2008, SIGCSE Bulletin, V40, P40, DOI 10.1145/1383602.1383631
   Hermans F, 2016, S VIS LANG HUM CEN C, P68, DOI 10.1109/VLHCC.2016.7739666
   Holwerda R, 2018, 2018 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING (VL/HCC), P217, DOI 10.1109/VLHCC.2018.8506483
   Hvilshuj Mads, 2009, C EM TECHN FACT AUT, P1
   Jost B, 2014, 2014 IEEE INTERNATIONAL SYMPOSIUM ON MULTIMEDIA (ISM), P381, DOI 10.1109/ISM.2014.24
   Kallia M, 2017, PROCEEDINGS OF THE 12TH WORKSHOP IN PRIMARY AND SECONDARY COMPUTING EDUCATION (WIPSCE 2017), P15, DOI 10.1145/3137065.3137085
   Kennedy Cazembe, 2018, P KOL CALL INT C COM, P1
   Ko AJ, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1922649.1922658
   Kramer J, 2007, COMMUN ACM, V50, P37
   Lahtinen E., 2005, SIGCSE Bulletin, V37, P14, DOI 10.1145/1151954.1067453
   Maloney J., 2010, ACM T COMPUT EDUC, V10, P16, DOI DOI 10.1145/1868358.1868363
   McCauley R, 2015, COMPUT SCI EDUC, V25, P37, DOI 10.1080/08993408.2015.1033205
   Mota JM, 2018, COMPUT ELECTR ENG, V65, P250, DOI 10.1016/j.compeleceng.2017.08.025
   Pan Zengxi, 2010, INT S ROB ROBOTIK, P1
   Paolacci G, 2010, JUDGM DECIS MAK, V5, P411
   Pradel Michael, 2015, ECOOP, DOI DOI 10.4230/LIPIcs.ECOOP.2015.519
   Ritschel N., 2020, IEEE Transactions on Software Engineering (TSE)
   Robles Gregorio, 2017, INT WORKSH SOFTW CLO, P1
   Rose SP, 2017, ELECTRON J E-LEARN, V15, P297
   SCAFFIDI C., 2005, The ?55M End User Programmers Estimate Revisited
   Siegwart R., 2011, Introduction to Autonomous Mobile Robots, VSecond
   TIOBE The Software Quality Company, 2021, TIOBE Index.
   Universal Robots, 2013, PolyScope Manual.
   US Department of Labor, 2021, Occupational outlook handbook.
   Weintrop D, 2018, PROCEEDINGS OF THE 2018 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI 2018), DOI 10.1145/3173574.3173940
   Weintrop D, 2019, COMMUN ACM, V62, P22, DOI 10.1145/3341221
   Weintrop D, 2017, 2017 IEEE BLOCKS AND BEYOND WORKSHOP (B&B), P29, DOI 10.1109/BLOCKS.2017.8120406
   Weintrop D, 2017, PROCEEDINGS OF THE 2017 ACM SIGCSE TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION (SIGCSE'17), P633, DOI 10.1145/3017680.3017707
   Wiedenbeck S., 1995, Human Factors in Computing Systems. CHI'95 Conference Proceedings, P74
   Wolber David., 2011, APP INVENTOR
NR 50
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 133
DI 10.1145/3563296
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200010
OA gold
DA 2024-07-18
ER

PT J
AU Zhang, YH
   Bajpai, Y
   Gupta, P
   Ketkar, A
   Allamanis, M
   Barik, T
   Gulwani, S
   Radhakrishna, A
   Raza, M
   Soares, G
   Tiwari, A
AF Zhang, Yuhao
   Bajpai, Yasharth
   Gupta, Priyanshu
   Ketkar, Ameya
   Allamanis, Miltiadis
   Barik, Titus
   Gulwani, Sumit
   Radhakrishna, Arjun
   Raza, Mohammad
   Soares, Gustavo
   Tiwari, Ashish
TI Overwatch: Learning Patterns in Code Edit Sequences
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Generation; Artificial Intelligence; Program Synthesis
AB Integrated Development Environments (IDEs) provide tool support to automate many source code editing tasks. Traditionally, IDEs use only the spatial context, i.e., the location where the developer is editing, to generate candidate edit recommendations. However, spatial context alone is often not sufficient to confidently predict the developer's next edit, and thus IDEs generate many suggestions at a location. Therefore, IDEs generally do not actively offer suggestions and instead, the developer is usually required to click on a specific icon or menu and then select from a large list of potential suggestions. As a consequence, developers often miss the opportunity to use the tool support because they are not aware it exists or forget to use it.
   To better understand common patterns in developer behavior and produce better edit recommendations, we can additionally use the temporal context, i.e., the edits that a developer was recently performing. To enable edit recommendations based on temporal context, we present Overwatch, a novel technique for learning edit sequence patterns from traces of developers' edits performed in an IDE. Our experiments show that Overwatch has 78% precision and that Overwatch not only completed edits when developers missed the opportunity to use the IDE tool support but also predicted new edits that have no tool support in the IDE.
C1 [Zhang, Yuhao] Univ Wisconsin, Madison, WI 53706 USA.
   [Zhang, Yuhao; Bajpai, Yasharth; Gupta, Priyanshu] Microsoft, Hyderabad, India.
   [Ketkar, Ameya] Uber, San Francisco, CA USA.
   [Allamanis, Miltiadis] Microsoft Res, Cambridge, England.
   [Barik, Titus; Gulwani, Sumit; Radhakrishna, Arjun; Raza, Mohammad; Soares, Gustavo; Tiwari, Ashish] Microsoft, Redmond, WA USA.
C3 University of Wisconsin System; University of Wisconsin Madison; Uber
   Technologies, Inc.; Microsoft; Microsoft
RP Zhang, YH (corresponding author), Univ Wisconsin, Madison, WI 53706 USA.; Zhang, YH (corresponding author), Microsoft, Hyderabad, India.
EM yuhaoz@cs.wisc.edu; ybajpai@microsoft.com; priyansgupta@microsoft.com;
   ketkara@uber.com; miltos@allamanis.com; tbarik@acm.org;
   sumitg@microsoft.com; arradha@microsoft.com; moraza@microsoft.com;
   gsoares@microsoft.com; astiwar@microsoft.com
RI Ketkar, Ameya/KVX-7963-2024
OI Gupta, Priyanshu/0000-0002-5599-5004; Barik, Titus/0000-0002-4877-0739;
   Gulwani, Sumit/0000-0002-9226-9634; Bajpai,
   Yasharth/0000-0002-9042-1946; Radhakrishna, Arjun/0000-0002-5559-5932
CR Andersen Jesper, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P337, DOI 10.1109/ASE.2008.44
   [Anonymous], 2011, Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering, DOI [DOI 10.1145/2025113.2025185, 10.1145/2025113.2025185]
   Bader J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360585
   Bloem R, 2006, FORM METHOD SYST DES, V28, P37, DOI 10.1007/s10703-006-4341-z
   Brody S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428283
   Campbell JL, 2013, SOCIOL METHOD RES, V42, P294, DOI 10.1177/0049124113500475
   CHINCHOR N, 1992, FOURTH MESSAGE UNDERSTANDING CONFERENCE (MUC-4), P22
   DAY WHE, 1984, J CLASSIF, V1, P7, DOI 10.1007/BF01890115
   Foster SR, 2012, PROC INT CONF SOFTW, P222, DOI 10.1109/ICSE.2012.6227191
   Gao X, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428287
   Ge X, 2012, PROC INT CONF SOFTW, P211, DOI 10.1109/ICSE.2012.6227192
   JetBrains, 2021, ReSharper
   Ketkar A, 2022, PROC INT CONF SOFTW, P1206, DOI 10.1145/3510003.3510115
   Kim M, 2013, IEEE T SOFTWARE ENG, V39, P45, DOI 10.1109/TSE.2012.16
   Lamothe M, 2022, IEEE T SOFTWARE ENG, V48, P417, DOI 10.1109/TSE.2020.2988396
   Meng N, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P502, DOI 10.1109/ICSE.2013.6606596
   Mesbah A, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P925, DOI 10.1145/3338906.3340455
   Microsoft, 2021, Visual Studio
   Miltner A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360569
   Murphy-Hill E, 2009, PROC INT CONF SOFTW, P287, DOI 10.1109/ICSE.2009.5070529
   Negara S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P803, DOI 10.1145/2568225.2568317
   Negara S, 2012, LECT NOTES COMPUT SC, V7313, P79, DOI 10.1007/978-3-642-31057-7_5
   Plotkin G. D., 1970, Machine Intelligence, V5, P153
   Ray Baishakhi, 2012, P ACM SIGSOFT 20 INT, DOI DOI 10.1145/2393596.2393603
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Saldana J., 2016, CODING MANUAL QUALIT, DOI DOI 10.1017/CBO9781107415324.004
   Sousa Reudismam, 2021, SBES '21: Brazilian Symposium on Software Engineering, P74, DOI 10.1145/3474624.3474650
   Tsantalis N, 2022, IEEE T SOFTWARE ENG, V48, P930, DOI 10.1109/TSE.2020.3007722
   Vakilian M, 2012, PROC INT CONF SOFTW, P233, DOI 10.1109/ICSE.2012.6227190
   van Rijsbergen C. J., 1979, Information Retrieval, P133, DOI DOI 10.1002/ASI.4630300621
   Xu SZ, 2019, INT C PROGRAM COMPRE, P335, DOI 10.1109/ICPC.2019.00052
   Yin Pengcheng, 2019, ICLR 2019
NR 32
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 139
DI 10.1145/3563302
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200016
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Grech, N
   Lagouvardos, S
   Tsatiris, I
   Smaragdakis, Y
AF Grech, Neville
   Lagouvardos, Sifis
   Tsatiris, Ilias
   Smaragdakis, Yannis
TI Elipmoc: Advanced Decompilation of Ethereum Smart Contracts
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Analysis; Smart Contracts; Decompilation; Datalog; Security;
   Ethereum; Blockchain
AB Smart contracts on the Ethereum blockchain greatly benefit from cutting-edge analysis techniques and pose significant challenges. A primary challenge is the extremely low-level representation of deployed contracts. We present Elipmoc, a decompiler for the next generation of smart contract analyses. Elipmoc is an evolution of Gigahorse, the top research decompiler, dramatically improving over it and over other state-of-the-art tools, by employing several high-precision techniques and making them scalable. Among these techniques are a new kind of context sensitivity (termed "transactional sensitivity") that provides a more effective static abstraction of distinct dynamic executions; a path-sensitive (yet scalable, through path merging) algorithm for inference of function arguments and returns; and a fully context sensitive private function reconstruction process. As a result, smart contract security analyses and reverse-engineering tools built on top of Elipmoc achieve high scalability, precision and completeness.
   Elipmoc improves over all notable past decompilers, including its predecessor, Gigahorse, and the stateof-the-art industrial tool, Panoramix, integrated into the primary Ethereum blockchain explorer, Etherscan. Elipmoc produces decompiled contracts with fully resolved operands at a rate of 99.5% (compared to 62.8% for Gigahorse), and achieves much higher completeness in code decornpilation than Panoramix-e.g., up to 67% more coverage of external call statements-while being over 5x faster. Elipmoc has been the enabler for recent (independent) discoveries of several exploitable vulnerabilities on popular protocols, over funds in the many millions of dollars.
C1 [Grech, Neville] Univ Malta, Msida, Malta.
   [Grech, Neville; Lagouvardos, Sifis; Tsatiris, Ilias; Smaragdakis, Yannis] Dedaub Ltd, Birkirkara, Malta.
   [Lagouvardos, Sifis; Tsatiris, Ilias; Smaragdakis, Yannis] Univ Athens, Athens, Greece.
C3 University of Malta; National & Kapodistrian University of Athens
RP Grech, N (corresponding author), Univ Malta, Msida, Malta.; Grech, N (corresponding author), Dedaub Ltd, Birkirkara, Malta.
EM me@nevillegrech.com; sifis.lag@di.uoa.gr; i.tsatiris@di.uoa.gr;
   smaragd@di.uoa.gr
OI Lagouvardos, Sifis/0000-0002-6233-1548; Smaragdakis,
   Yannis/0000-0002-0499-0182
FU Hellenic Foundation for Research and Innovation (HFRI project
   DEAN-BLOCK)
FX We gratefully acknowledge funding by the Hellenic Foundation for
   Research and Innovation (HFRI project DEAN-BLOCK).
CR [Anonymous], 2018, ONLINE SOLIDITY DECO
   [Anonymous], 2020, ETHEREUM SECURE DECE
   Ben Khadra MA, 2016, 2016 INTERNATIONAL CONFERENCE ON COMPILERS, ARCHITECTURE AND SYNTHESIS FOR EMBEDDED SYSTEMS (CASES), DOI 10.1145/2968455.2968505
   Brent L, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P454, DOI 10.1145/3385412.3385990
   Brent Lexi, 2018, ARXIV180903981
   Brumley D., 2013, P 22TH USENIX SECURI, P353
   Chen T, 2022, IEEE T SOFTWARE ENG, V48, P3066, DOI 10.1109/TSE.2021.3078342
   Cifuentes Cristina., 1994, Reverse Compilation Techniques
   Contro F, 2021, INT C PROGRAM COMPRE, P127, DOI 10.1109/ICPC52881.2021.00021
   Dedaub, 2021, YIELD SKIMM FORC BAD
   Dedaub, 2019, RIS GAS PRIC AR THRE
   Dedaub, 2021, KILL BAD ARB BOT SAV
   Dedaub, 2021, LOOK MA SOURC HACK D
   Dedaub, 2021, VERKL GAS COST CHANG
   Dedaub, 2021, ETH PAWN STARS 5 7M
   Dedaub, 2021, EIP 3074 IMP STUD
   Dupuy E., 2020, JAVA DECOMPILER
   Falliere Nicolas, 2019, ETHEREUM SMART CONTR
   Flores-Montoya Antonio, 2020, DATALOG DISASSEMBLY, P1075
   Gómez-Zamalloa M, 2009, INFORM SOFTWARE TECH, V51, P1409, DOI 10.1016/j.infsof.2009.04.010
   Grech N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276486
   Grech N, 2019, PROC INT CONF SOFTW, P1176, DOI 10.1109/ICSE.2019.00120
   Grech Neville, GIGAHORSE THOROUGH D, DOI [10.5281/zenodo.2578692, DOI 10.5281/ZENODO.2578692]
   Hamilton J, 2009, IEEE INT WORK C SO, P129, DOI 10.1109/SCAM.2009.24
   Harrand N, 2019, IEEE INT WORK C SO, P92, DOI 10.1109/SCAM.2019.00019
   Immunefi, 2021, HARV FIN UN PROX BUG
   Jeong S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133924
   JP Morgan Chase, 2020, QUOR PERM IMPL ETH S
   Katz DS, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P346, DOI 10.1109/SANER.2018.8330222
   Kolinko Tomasz, 2020, PANORAMIX S DECOMPIL
   Kruegel C, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE 13TH USENIX SECURITY SYMPOSIUM, P255
   Lagouvardos S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428258
   Lee Benfield, 2020, CFR ANOTHER JAVA DEC
   Michales Jonah., 2021, INSIDE WAR ROOM SAVE
   Miecznikowski J, 2002, LECT NOTES COMPUT SC, V2304, P111
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Primitive Finance, 2021, PRIMITIVEFI POSTM AN
   Schwartz EJ, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P426, DOI 10.1145/3243734.3243793
   Shivers Olin, 1991, CONTROL FLOW ANAL HI
   SMARAGDAKIS Y, 2011, P 38 ANN ACM SIGPLAN, V38, P11, DOI DOI 10.1145/1926385.1926390
   Smaragdakis Y, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485540
   Strobel Mike, 2020, PROCYON
   Thiessen R, 2017, ACM SIGPLAN NOTICES, V52, P263, DOI [10.1145/3140587.3062359, 10.1145/3062341.3062359]
   TrustLook, 2019, SMART CONTR GUARD TR
   Tsankov P, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P67, DOI 10.1145/3243734.3243780
   Vallee-Rai Raja, 1999, P 1999 C CTR ADV STU, p13s
   Van Emmerik M.J., 2007, STATIC SINGLE ASSIGN
   Various, 2018, GITHUB ETH SOL SOL C
   Various, 2017, GITHUB VYP VYP PYTH
   Various, 2018, POR S DEC EVM BYT RE
   Various, 2020, FERNFL
   Various, GITHUB OP OP CONTR O
   Watterson Scott A., 1997, P 3 C USENIX C OBJ O, P14
   Yakdan K, 2016, P IEEE S SECUR PRIV, P158, DOI 10.1109/SP.2016.18
   Yakdan Khaled, 2015, NO MORE GOTOS DECOMP, DOI [10.14722/ndss.2015.23185, DOI 10.14722/NDSS.2015.23185]
   Zhou Y, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P1371
NR 56
TC 4
Z9 4
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 77
DI 10.1145/3527321
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300013
OA gold
DA 2024-07-18
ER

PT J
AU Tan, B
   Mariano, B
   Lahiri, SK
   Dillig, I
   Feng, Y
AF Tan, Bryan
   Mariano, Benjamin
   Lahiri, Shuvendu K.
   Dillig, Isil
   Feng, Yu
TI SolType: Refinement Types for Arithmetic Overflow in Solidity
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE refinement type inference; smart contracts; integer overflow
AB As smart contracts gain adoption in financial transactions, it becomes increasingly important to ensure that they are free of bugs and security vulnerabilities. Of particular relevance in this context are arithmetic overflow bugs, as integers are often used to represent financial assets like account balances. Motivated by this observation, this paper presents SolType, a refinement type system for Solidity that can be used to prevent arithmetic over- and under-flows in smart contracts. SolType allows developers to add refinement type annotations and uses them to prove that arithmetic operations do not lead to over- and under-flows. SolType incorporates a rich vocabulary of refinement terms that allow expressing relationships between integer values and aggregate properties of complex data structures. Furthermore, our implementation, called Solid, incorporates a type inference engine and can automatically infer useful type annotations, including non-trivial contract invariants.
   To evaluate the usefulness of our type system, we use Solid to prove arithmetic safety of a total of 120 smart contracts. When used in its fully automated mode (i.e., using Solid's type inference capabilities), Solid is able to eliminate 86.3% of redundant runtime checks used to guard against overflows. We also compare Solid against a state-of-the-art arithmetic safety verifier called VeriSmart and show that Solid has a significantly lower false positive rate, while being significantly faster in terms of verification time.
C1 [Tan, Bryan; Feng, Yu] Univ Calif Santa Barbara, Santa Barbara, CA 93106 USA.
   [Mariano, Benjamin; Dillig, Isil] Univ Texas Austin, Austin, TX 78712 USA.
   [Lahiri, Shuvendu K.] Microsoft Res, Redmond, WA USA.
C3 University of California System; University of California Santa Barbara;
   University of Texas System; University of Texas Austin; Microsoft
RP Tan, B (corresponding author), Univ Calif Santa Barbara, Santa Barbara, CA 93106 USA.
EM bryantan@cs.ucsb.edu; bmariano@cs.utexas.edu;
   Shuvendu.Lahiri@microsoft.com; isil@cs.utexas.edu; yufeng@cs.ucsb.edu
OI Feng, Yu/0000-0003-1000-1229; Tan, Bryan/0000-0002-4008-3846; Dillig,
   Isil/0000-0001-8006-1230
FU NSF [2027977, 1908494, 1811865, 1762299]; Google Faculty Research Award;
   Direct For Computer & Info Scie & Enginr [2027977, 1908494] Funding
   Source: National Science Foundation; Division Of Computer and Network
   Systems [1908494] Funding Source: National Science Foundation; Division
   of Computing and Communication Foundations [2027977] Funding Source:
   National Science Foundation; Division of Computing and Communication
   Foundations; Direct For Computer & Info Scie & Enginr [1762299, 1811865]
   Funding Source: National Science Foundation
FX This work was partially supported by NSF Grants 2027977, 1908494,
   1811865, 1762299, and the Google Faculty Research Award.
CR Adriana M., 2018, REAL ESTATE BUSINESS
   Atzei N, 2017, LECT NOTES COMPUT SC, V10204, P164, DOI 10.1007/978-3-662-54455-6_8
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Bjorner N, 2015, LECT NOTES COMPUT SC, V9300, P24, DOI 10.1007/978-3-319-23534-9_2
   Blanchet B, 2003, ACM SIGPLAN NOTICES, V38, P196, DOI 10.1145/780822.781153
   ConsenSys, 2020, MYTHR
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Etherscan, 2021, The Ethereum Blockchain Explorer
   Feist J, 2019, 2019 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB 2019), P8, DOI 10.1109/WETSEB.2019.00008
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Grech N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276486
   Grishchenko I, 2018, LECT NOTES COMPUT SC, V10804, P243, DOI 10.1007/978-3-319-89722-6_10
   Grossman S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158136
   Hirai Yoichi, 2017, Financial Cryptography and Data Security. FC 2017 International Workshops WAHC, BITCOIN, VOTING, WTSC, and TA. Revised Selected Papers: LNCS 10323, P520, DOI 10.1007/978-3-319-70278-0_33
   Hojjat H, 2016, PROCEEDINGS OF THE 2016 16TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2016), P73, DOI 10.1109/FMCAD.2016.7886663
   Kalra S, 2018, 25TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2018), DOI 10.14722/ndss.2018.23082
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Komuravelli A, 2014, LECT NOTES COMPUT SC, V8559, P17
   Li A, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P438, DOI 10.1145/3385412.3385982
   Luu L, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P254, DOI 10.1145/2976749.2978309
   Mariano B, 2020, IEEE INT CONF AUTOM, P262, DOI 10.1145/3324884.3416626
   Mix, 2018, ETHEREUM BUG CAUSES
   Mossberg M, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P1186, DOI 10.1109/ASE.2019.00133
   Oh H, 2014, ACM SIGPLAN NOTICES, V49, P475, DOI [10.1145/2594291.2594318, 10.1145/2666356.2594318]
   Palladino S., 2017, PARITY WALLET HACK E
   Park D, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P912, DOI 10.1145/3236024.3264591
   Permenev A, 2020, P IEEE S SECUR PRIV, P1661, DOI 10.1109/SP40000.2020.00024
   Rakamaric Z, 2014, LECT NOTES COMPUT SC, V8559, P106, DOI 10.1007/978-3-319-08867-9_7
   Rondon P, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P131, DOI 10.1145/1706299.1706316
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Siegel D., 2016, Understanding The DAO Attack
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   So S, 2020, P IEEE S SECUR PRIV, P1678, DOI 10.1109/SP40000.2020.00032
   Solar-Lezama A, 2009, LECT NOTES COMPUT SC, V5904, P4, DOI 10.1007/978-3-642-10672-9_3
   Straight Brian, 2020, FREIGHTWAVES
   Tan Bryan, 2021, ARXIV211000677CSPL
   The Coq Development Team, 2021, COQ PROOF ASSISTANT, DOI DOI 10.5281/ZENODO.4501022
   Tsankov P, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P67, DOI 10.1145/3243734.3243780
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Vekris P, 2016, ACM SIGPLAN NOTICES, V51, P310, DOI [10.1145/2980983.2908110, 10.1145/2908080.2908110]
NR 41
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 4
DI 10.1145/3498665
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900005
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Biswas, R
   Kakwani, D
   Vedurada, J
   Enea, C
   Lal, A
AF Biswas, Ranadeep
   Kakwani, Diptanshu
   Vedurada, Jyothi
   Enea, Constantin
   Lal, Akash
TI MonkeyDB: Effectively Testing Correctness under Weak Isolation Levels
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Applications of Storage Systems; Transactional Databases; Weak Isolation
   Levels; Testing
AB Modern applications, such as social networking systems and e-commerce platforms are centered around using large-scale storage systems for storing and retrieving data. In the presence of concurrent accesses, these storage systems trade off isolation for performance. The weaker the isolation level, the more behaviors a storage system is allowed to exhibit and it is up to the developer to ensure that their application can tolerate those behaviors. However, these weak behaviors only occur rarely in practice and outside the control of the application, making it difficult for developers to test the robustness of their code against weak isolation levels.
   This paper presents MonkeyDB, a mock storage system for testing storage-backed applications. MonkeyDB supports a key-value interface as well as SQL queries under multiple isolation levels. It uses a logical specification of the isolation level to compute, on a read operation, the set of all possible return values. MonkeyDB then returns a value randomly from this set. We show that MonkeyDB provides good coverage of weak behaviors, which is complete in the limit. We test a variety of applications for assertions that fail only under weak isolation. MonkeyDB is able to break each of those assertions in a small number of attempts.
C1 [Biswas, Ranadeep] Informal Syst, Paris, France.
   [Kakwani, Diptanshu] Microsoft, Hyderabad, India.
   [Vedurada, Jyothi] IIT Hyderabad, Hyderabad, India.
   [Enea, Constantin] Univ Paris, IRIF, Paris, France.
   [Enea, Constantin] CNRS, Paris, France.
   [Lal, Akash] Microsoft Res, Bengaluru, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Hyderabad; Universite Paris Cite; Centre National de
   la Recherche Scientifique (CNRS)
RP Biswas, R (corresponding author), Informal Syst, Paris, France.
EM ranadeep@informal.systems; dkakwani@microsoft.com;
   jyothiv@cse.iith.ac.in; cenea@irif.fr; akashl@microsoft.com
RI lal, Akash/JLL-1244-2023
FU European Research Council (ERC) under the European Union's Horizon 2020
   research and innovation programme [678177]
FX This work is supported in part by the European Research Council (ERC)
   under the European Union's Horizon 2020 research and innovation
   programme (grant agreement No 678177).
CR Abdulla Parosh Aziz, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P353, DOI 10.1007/978-3-662-46681-0_28
   Adya A., 2000, Proceedings of 16th International Conference on Data Engineering (Cat. No.00CB37073), P67, DOI 10.1109/ICDE.2000.839388
   Adya A, 1999, Weak consistency: a generalized theory and optimistic implementations for distributed transactions
   Akkoorath Deepthi Devaki, 2016, ANTIDOTE HIGHLY AVAI
   ANSI X3,, 1992, ANSI X3, P135
   Balegas Valter, 2015, Proceedings of the Tenth European Conference on Computer Systems, DOI [10.1145/2741948.2741972, DOI 10.1145/2741948.2741972]
   Beillahi SM, 2019, LECT NOTES COMPUT SC, V11562, P286, DOI 10.1007/978-3-030-25543-5_17
   Beillahi Sidi Mohamed, 2019, LIPICS, V140
   Berenson H., 1995, SIGMOD Record, V24, P1, DOI 10.1145/568271.223785
   Bernardi G., 27th International Conference on Concurrency Theory, CONCUR 2016, August 23-26, 2016, Quebec City, Canada, 2016, p7:1, DOI DOI 10.4230/LIPICS.CONCUR.2016.7
   Biswas R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360591
   Biswas Ranadeep, ABS2103028302021
   Biswas Ranadeep, **DATA OBJECT**, DOI 10.5281/zenodo.5504052
   Bronson N., 2013, P 2013 USENIX C ANN, P49
   Brutschy L, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P90, DOI 10.1145/3192366.3192415
   Brutschy L, 2017, ACM SIGPLAN NOTICES, V52, P458, DOI 10.1145/3093333.3009895
   Cerone A, 2018, J ACM, V65, DOI 10.1145/3152396
   Cerone Andrea, 2015, CONCUR, P58
   DeCandia Giuseppe, 2007, Operating Systems Review, V41, P205, DOI 10.1145/1323293.1294281
   Difallah DE, 2013, PROC VLDB ENDOW, V7, P277, DOI 10.14778/2732240.2732246
   Fekete A, 2005, ACM T DATABASE SYST, V30, P492, DOI 10.1145/1071610.1071615
   Galera, 2020, GAL CLUST MYSQL
   Gan Yifan, 2020, PVLDB, V13, DOI DOI 10.14778/3407790.3407860
   Gotsman A, 2016, ACM SIGPLAN NOTICES, V51, P371, DOI 10.1145/2914770.2837625
   Guay Paz Jos Rolando, 2018, Microsoft Azure Cosmos DB Revealed: A Multi-Modal Database Designed for the Cloud, V1st
   Java Platform,, JDBC JAV DAT CONN AP
   Jepsen, 2020, DISTRIBUTED SYSTEMS
   Jepsen Nemesis, 2021, TUT JEPS NEM VAR
   Jorwekar Sudhir., 2007, VLDB 07, P1263
   Kaki G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276534
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Li Cheng, 2014, 2014 USENIX Annual Technical Conference (USENIX ATC 14), P281
   Lidbury C, 2017, ACM SIGPLAN NOTICES, V52, P443, DOI 10.1145/3093333.3009857
   Lloyd W, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P401
   Lu HN, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P295, DOI 10.1145/2815400.2815426
   MariaDB Foundation, 2020, MARIADB OP SOURC REL
   Microsoft, 2020, AZ COSM DB LOC EM
   Microsoft Coyote, 2019, FEARL COD REL AS SOF
   Musuvathi M, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P362, DOI 10.1145/1375581.1375625
   Nagar K., 29th International Conference on Concurrency Theory, CONCUR 2018, September 4-7, 2018, Beijing, China, 2018, p41:1, DOI [DOI 10.4230/LIPICS.CONCUR.2018.41, 10.4230/LIPIcs.CONCUR. 2018.41]
   Nagar K, 2020, LECT NOTES COMPUT SC, V12224, P251, DOI 10.1007/978-3-030-53288-8_13
   Nair SS, 2020, LECT NOTES COMPUT SC, V12075, P544, DOI 10.1007/978-3-030-44914-8_20
   Norris B, 2013, ACM SIGPLAN NOTICES, V48, P131, DOI [10.1145/2509136.2509514, 10.1145/2544173.2509514]
   PAPADIMITRIOU CH, 1979, J ACM, V26, P631, DOI 10.1145/322154.322158
   Pavlo A, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P3, DOI 10.1145/3035918.3056096
   Rahmani K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360543
   Rahmani Kia, 2018, LIFTING JEPSEN TESTS
   Sivaramakrishnan KC, 2015, ACM SIGPLAN NOTICES, V50, P413, DOI [10.1145/2813885.2737981, 10.1145/2737924.2737981]
   Transaction Processing Performance Council,, 2020, TPC C BENCHM SPEC
   Twissandra, TWITT CLON CASS
   Warszawski T, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P5, DOI 10.1145/3035918.3064037
NR 52
TC 5
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 132
DI 10.1145/3485546
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200070
OA gold, Green Accepted
DA 2024-07-18
ER

PT J
AU Muehlboeck, F
   Tate, R
AF Muehlboeck, Fabian
   Tate, Ross
TI Transitioning from Structural to Nominal Code with Efficient Gradual
   Typing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Gradual Typing; Gradual Guarantee; Nominal; Structural; Call Tags
AB Gradual typing is a principled means for mixing typed and untyped code. But typed and untyped code often exhibit different programming patterns. There is already substantial research investigating gradually giving types to code exhibiting typical untyped patterns, and some research investigating gradually removing types from code exhibiting typical typed patterns. This paper investigates how to extend these established gradual-typing concepts to give formal guarantees not only about how to change types as code evolves but also about how to change such programming patterns as well.
   In particular, we explore mixing untyped "structural" code with typed "nominal" code in an object-oriented language. But whereas previous work only allowed "nominal" objects to be treated as "structural" objects, we also allow "structural" objects to dynamically acquire certain nominal types, namely interfaces. We present a calculus that supports such "cross-paradigm" code migration and interoperation in a manner satisfying both the static and dynamic gradual guarantees, and demonstrate that the calculus can be implemented efficiently.
C1 [Muehlboeck, Fabian] IST Austria, Klosterneuburg, Austria.
   [Tate, Ross] Cornell Univ, Comp Sci, Ithaca, NY 14853 USA.
C3 Institute of Science & Technology - Austria; Cornell University
RP Muehlboeck, F (corresponding author), IST Austria, Klosterneuburg, Austria.
EM fabian.nmehlboeck@ist.ac.at; ross@cs.cornell.edu
OI Tate, Ross/0000-0002-7608-4605; Muehlboeck, Fabian/0000-0003-1548-0177
FU National Science Foundation (NSF) [CCF-1350182]; Austrian Science Fund
   (FWF) [Z211-N23]
FX This material is based upon work supported in part by the National
   Science Foundation (NSF) through grant CCF-1350182 and the Austrian
   Science Fund (FWF) through grant Z211-N23 (Wittgenstein Award). Any
   opinions, findings, and conclusions or recommendations expressed in this
   material are those of the authors and do not necessarily reflect the
   views of the NSF or the FWF.
CR Alpern B, 2001, ACM SIGPLAN NOTICES, V36, P108, DOI 10.1145/504311.504291
   Anderson C., 2003, Electronic Notes in Theoretical Computer Science, V82, P53, DOI [10.1016/S1571-0661(04)80802-8, DOI 10.1016/S1571-0661(04)80802-8]
   Bauman S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133878
   Bierman G, 2010, LECT NOTES COMPUT SC, V6183, P76, DOI 10.1007/978-3-642-14107-2_5
   Campora JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158103
   CHAMBERS C, 1989, SIGPLAN NOTICES, V24, P49, DOI 10.1145/74878.74884
   Feltey D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276503
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Greenman B, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236766
   Gronski Jessica, 2006, SCHEM FUNCT PROGR WO, P93
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Kuhlenschmidt A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P517, DOI 10.1145/3314221.3314627
   Kuhlenschmidt Andre, 2018, SCHEM FUNCT PROGR WO, V18
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   Matthews Jacob, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P3, DOI 10.1145/1190216.1190220
   Moy C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434334
   Muehlboeck F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133880
   Muehlboeck Fabian, 2021, TRANSITIONING STRUCT
   Muehlboeck Fabian, 2021a. Transitioning from Structural to Nominal Code with Efficient Gradual Typing: Artifact, DOI 10.5281/zenodo.5518181
   New MS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290328
   Richards G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133879
   Roberts Richard, 2019, ECOOP, V15, P1, DOI DOI 10.4230/LIPICS.ECOOP.2019.5
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Tobin-Hochstadt Sam, 2017, SNAPL, V17, P1, DOI [DOI 10.4230/LIPICS.SNAPL.2017.17, 10.4230/LIPIcs.SNAPL.2017.17]
   Vitousek MM, 2017, ACM SIGPLAN NOTICES, V52, P762, DOI 10.1145/3093333.3009849
   Vitousek MM, 2015, ACM SIGPLAN NOTICES, V50, P45, DOI 10.1145/2661088.2661101
   Wrigstad T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P377, DOI 10.1145/1706299.1706343
NR 32
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 127
DI 10.1145/3485504
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200031
OA gold
DA 2024-07-18
ER

PT J
AU Shen, XP
   Zhang, GQ
   Dea, I
   Andow, S
   Arroyo-Fang, E
   Gafter, N
   George, J
   Grueter, M
   Meijer, E
   Shivers, OG
   Stumpos, S
   Tempest, A
   Warden, C
   Yang, SO
AF Shen, Xipeng
   Zhang, Guoqiang
   Dea, Irene
   Andow, Samantha
   Arroyo-Fang, Emilio
   Gafter, Neal
   George, Johann
   Grueter, Melissa
   Meijer, Erik
   Shivers, Olin Grigsby
   Stumpos, Steffi
   Tempest, Alanna
   Warden, Christy
   Yang, Shannon
TI Coarsening Optimization for Differentiable Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE differentiable programming; compiler; program optimizations; SSA;
   Calculus
AB This paper presents a novel optimization for differentiable programming named coarsening optimization. It offers a systematic way to synergize symbolic differentiation and algorithmic differentiation (AD). Through it, the granularity of the computations differentiated by each step in AD can become much larger than a single operation, and hence lead to much reduced runtime computations and data allocations in AD. To circumvent the difficulties that control flow creates to symbolic differentiation in coarsening, this work introduces.. calculus, a novel method to allow symbolic reasoning and differentiation of computations that involve branches and loops. It further avoids "expression swell" in symbolic differentiation and balance reuse and coarsening through the design of reuse-centric segment of interest identification. Experiments on a collection of real-world applications show that coarsening optimization is effective in speeding up AD, producing several times to two orders of magnitude speedups.
C1 [Shen, Xipeng; Zhang, Guoqiang; Dea, Irene; Andow, Samantha; Arroyo-Fang, Emilio; Gafter, Neal; George, Johann; Grueter, Melissa; Meijer, Erik; Shivers, Olin Grigsby; Stumpos, Steffi; Tempest, Alanna; Warden, Christy; Yang, Shannon] Facebook Inc, Menlo Pk, CA 94025 USA.
   [Shen, Xipeng; Zhang, Guoqiang] North Carolina State Univ, Raleigh, NC 27695 USA.
C3 Facebook Inc; North Carolina State University
RP Shen, XP (corresponding author), Facebook Inc, Menlo Pk, CA 94025 USA.; Shen, XP (corresponding author), North Carolina State Univ, Raleigh, NC 27695 USA.
EM xshen5@ncsu.edu; gzhang9@ncsu.edu; irenedea@tb.com; sanidow@fb.com;
   earroyof@fb.com; nmgafter@fb.com; jog@fb.com; melissagrueter@fb.com;
   erikm@fb.com; olinshivers@fb.com; stumpos@fb.com; atem@fb.com;
   christywarden@fb.com; shannony@fb.com
OI Shen, Xipeng/0000-0003-3599-8010
CR [Anonymous], 2017, ACM T MATH SOFTWARE, V45
   [Anonymous], 1988, PERSPECT COMPUT, V19
   [Anonymous], 2006, COMPILERS PRINCIPLES
   Aubert P., 2001, Computing and Visualization in Science, V3, P197, DOI 10.1007/s007910000048
   BALLANCE RA, 1990, SIGPLAN NOTICES, V25, P257, DOI 10.1145/93548.93578
   Baydin AG, 2018, J MACH LEARN RES, V18
   Bradbury J., 2018, JAX: Composable transformations of Python + NumPy programs
   Breuleux O., 2018, ADV NEUR IN, V31
   Brooks S, 2011, CH CRC HANDB MOD STA, P1, DOI 10.1201/b10905
   Considine Breandan, 2019, KOTLIN SHAPE SAFE ED
   CYTRON R, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P25, DOI 10.1145/75277.75280
   Dauvergne B, 2006, LECT NOTES COMPUT SC, V3994, P566
   Ding YF, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133898
   DIXON LCW, 1991, SIAM PROC S, P114
   Hogan RJ, 2014, ACM T MATH SOFTWARE, V40, DOI 10.1145/2560359
   Innes Michael, 2018, ABS181007951 CORR
   Innes Michael J, 2020, P 3 MLSYS C
   Knobe K., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P107, DOI 10.1145/268946.268956
   Laue Soren, 2019, ABS190402990
   Maclaurin Dougal, 2016, THESIS HARVARD U
   Margossian CC, 2019, WIRES DATA MIN KNOWL, V9, DOI 10.1002/widm.1305
   Meijer E., 2020, P 10 INT C PROB GRAP
   Paszke A., 2017, AUTOMATIC DIFFERENTI
   Peng Tu, 1995, Conference Proceedings of the 1995 International Conference on Supercomputing, P414
   Phipps E., 2012, Recent Advances in Algorithmic Differentiation, P309
   Rojas Junior, 2019, NEURIPS WORKSH MACH
   Rompf Tiark, 2018, ABS180310228 CORR
   Shaikhha A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341701
   Sherman Benjamin, 2021, P ACM SIGPLANSIGACT
   van Engelen R.A., 2004, ICS 04, P106, DOI DOI 10.1145/1006209.1006226
   van Engelen Robert A., 2001, P INT C COMP CONSTR
   Zhu Yun, 2010, P INT C CYB PHYS SYS
NR 32
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 130
DI 10.1145/3485507
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200034
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Birkedal, L
   Dinsdale-Young, T
   Guéneau, A
   Jaber, G
   Svendsen, K
   Tzevelekos, N
AF Birkedal, Lars
   Dinsdale-Young, Thomas
   Gueneau, Armael
   Jaber, Guilhem
   Svendsen, Kasper
   Tzevelekos, Nikos
TI Theorems for Free from Separation Logic Specifications
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Separation Logic; Program Specifications; Linearizability; Iris
ID LANGUAGE
AB Separation logic specifications with abstract predicates intuitively enforce a discipline that constrains when and how calls may be made between a client and a library. Thus a separation logic specification of a library intuitively enforces a protocol on the trace of interactions between a client and the library. We show how to formalize this intuition and demonstrate how to derive "free theoremsz about such interaction traces from abstract separation logic specifications. We present several examples of free theorems. In particular, we prove that a so-called logically atomic concurrent separation logic specification of a concurrent module operation implies that the operation is linearizable. All the results presented in this paper have been mechanized and formally proved in the Coq proof assistant using the Iris higher-order concurrent separation logic framework.
C1 [Birkedal, Lars; Gueneau, Armael] Aarhus Univ, Aarhus, Denmark.
   [Dinsdale-Young, Thomas] Concordium, Copenhagen, Denmark.
   [Jaber, Guilhem] Univ Nantes, Nantes, France.
   [Svendsen, Kasper] Uber, Copenhagen, Denmark.
   [Tzevelekos, Nikos] Queen Mary Univ London, London, England.
C3 Aarhus University; Nantes Universite; Uber Technologies, Inc.;
   University of London; Queen Mary University London
RP Birkedal, L (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM birkedal@cs.au.dk; tyoung@cs.au.dk; armael@cs.au.dk;
   guilhem.jaber@univ-nantes.fr; ksvendsen@cs.au.dk;
   nikos.tzevelekos@qmul.ac.uk
OI Gueneau, Armael/0000-0003-3072-4045; Birkedal, Lars/0000-0003-1320-0098
FU Center for Basic Research in Program Verification (CPV), from the VILLUM
   Foundation [25804]; EPSRC [EP/L022478/1]; RAEng Research Fellowship
   [10216/111]; EPSRC [EP/P004172/1, EP/L022478/1] Funding Source: UKRI
FX We thank the anonymous reviewers for their helpful comments and
   suggestions. We also thank Jeremy Ledent for answering the third
   author's questions regarding linearizability. This work was supported in
   part by a Villum Investigator grant (no. 25804), Center for Basic
   Research in Program Verification (CPV), from the VILLUM Foundation.
   Guilhem Jaber was supported by the EPSRC grant EP/L022478/1. Nikos
   Tzevelekos was supported by the RAEng Research Fellowship 10216/111.
CR Alur R., 2004, P 36 ANN ACM S THEOR, P202, DOI [DOI 10.1145/1007352.1007390, 10.1145/1007352.1007390]
   Balabonski T, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2837022
   Bengtson J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890031
   Bierhoff K, 2009, LECT NOTES COMPUT SC, V5653, P195, DOI 10.1007/978-3-642-03013-0_10
   Bierhoff K, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P301
   Biering B, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275499
   Birkedal Lars, 2020, LECT NOTES IRIS HIGH
   Borgström J, 2011, J FUNCT PROGRAM, V21, P159, DOI 10.1017/S0956796810000134
   Cao QX, 2018, J AUTOM REASONING, V61, P367, DOI 10.1007/s10817-018-9457-5
   DeLine R, 2004, LECT NOTES COMPUT SC, V3086, P465
   DeLine R, 2001, ACM SIGPLAN NOTICES, V36, P59, DOI 10.1145/381694.378811
   Fluet M, 2006, LECT NOTES COMPUT SC, V3924, P7
   Fu M, 2010, LECT NOTES COMPUT SC, V6269, P388, DOI 10.1007/978-3-642-15375-4_27
   Gardner Philippa, 2014, ESOP, DOI [10.1007/978-3-642-54833-8_10, DOI 10.1007/978-3-642-54833-8_10]
   Gommerstadt Hannah, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P771, DOI 10.1007/978-3-319-89884-1_27
   Gotsman A, 2013, LECT NOTES COMPUT SC, V7792, P249, DOI 10.1007/978-3-642-37036-6_15
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   IGARASHI A, 2002, P ACM SIGPLAN SIGACT, P331
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kobayashi N, 2009, ACM SIGPLAN NOTICES, V44, P416, DOI 10.1145/1594834.1480933
   Koh N, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P234, DOI 10.1145/3293880.3294106
   Krishnaswami Neelakantan R., 2009, TLDI, DOI [10.1145/1481861.1481874, DOI 10.1145/1481861.1481874]
   Maslov A. N, 1976, PROBLEMS INFORM TRAN, V12, p38S42
   Mazurak K, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P77
   Morrisett G, 2005, LECT NOTES COMPUT SC, V3461, P293
   Naeem Nomair A, 2008, OOPSLA 08 P OBJ OR P, DOI [10.1145/1449764.1449792, DOI 10.1145/1449764.1449792]
   Parkinson M, 2005, ACM SIGPLAN NOTICES, V40, P247, DOI 10.1145/1047659.1040326
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Pottier Francois., 2015, 1 SUMMIT ADV PROGRAM, P221, DOI DOI 10.4230/LIPICS.SNAPL.2015.221
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   REYNOLDS JC, 1993, INFORM COMPUT, V105, P1, DOI 10.1006/inco.1993.1037
   Sergey I, 2015, LECT NOTES COMPUT SC, V9032, P333, DOI 10.1007/978-3-662-46669-8_14
   Skalka Christian, 2008, Higher-Order and Symbolic Computation, V21, P239, DOI 10.1007/s10990-008-9032-6
   Skalka C, 2008, J FUNCT PROGRAM, V18, P179, DOI 10.1017/S0956796807006466
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Swamy N, 2013, J FUNCT PROGRAM, V23, P402, DOI 10.1017/S0956796813000142
   Vasconcelos VT, 2012, INFORM COMPUT, V217, P52, DOI 10.1016/j.ic.2012.05.002
   Wadler Philip., 1989, THEOREMS FREE 347 35, DOI [10.1145/99370.99404, DOI 10.1145/99370.99404]
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
NR 42
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 81
DI 10.1145/3473586
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800021
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Elliott, C
AF Elliott, Conal
TI Symbolic and Automatic Differentiation of Languages
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program calculation; language derivatives; tries
ID DERIVATIVES; EXPRESSIONS
AB Formal languages are usually defined in terms of set theory. Choosing type theory instead gives us languages as type-level predicates over strings. Applying a language to a string yields a type whose elements are language membership proofs describing how a string parses in the language. The usual building blocks of languages (including union, concatenation, and Kleene closure) have precise and compelling specifications uncomplicated by operational strategies and are easily generalized to a few general domain-transforming and codomain-transforming operations on predicates.
   A simple characterization of languages (and indeed functions from lists to any type) captures the essential idea behind language "differentiation" as used for recognizing languages, leading to a collection of lemmas about type-level predicates. These lemmas are the heart of two dual parsing implementations-using (inductive) regular expressions and (coinductive) tries-each containing the same code but in dual arrangements (with representation and primitive operations trading places). The regular expression version corresponds to symbolic differentiation, while the trie version corresponds to automatic differentiation.
   The relatively easy-to-prove properties of type-level languages transfer almost effortlessly to the decidable implementations. In particular, despite the inductive and coinductive nature of regular expressions and tries respectively, we need neither inductive nor coinductive/bisimulation arguments to prove algebraic properties.
EM conal@conal.net
CR Abel A, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2480359.2429075
   Abel A, 2016, J FUNCT PROGRAM, V26, DOI 10.1017/S0956796816000022
   Abel A, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(2:3)2008
   Abel Andreas, 2016, EQUATIONAL REASONING
   Agda Team, 2020, AGDA STAND LIB
   [Anonymous], 1998, The art of computer programming: Sorting and searching
   [Anonymous], 2008, EVALUATING DERIVATIV
   Antimirov V, 1996, THEOR COMPUT SCI, V155, P291, DOI 10.1016/0304-3975(95)00182-4
   Bove A, 2009, LECT NOTES COMPUT SC, V5674, P73, DOI 10.1007/978-3-642-03359-9_6
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Chomsky N., 1959, STUDIES LOGIC FDN MA, V26, P118
   Conal Elliott, 2021, SOURC REP SYMB AUT D
   Connelly R. H., 1995, Mathematical Structures in Computer Science, V5, P381, DOI 10.1017/S0960129500000803
   Darais, 2010, ABS10105023 CORR
   Doczkal C, 2013, LECT NOTES COMPUT SC, V8307, P82, DOI 10.1007/978-3-319-03545-1_6
   Dongol B, 2016, ACM T COMPUT LOG, V17, DOI 10.1145/2874773
   Elliott, 2019, ABS190310677 CORR
   Elliott C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236765
   Firsov D, 2013, LECT NOTES COMPUT SC, V8307, P98, DOI 10.1007/978-3-319-03545-1_7
   Golan, 2005, INT C ALG MEM KOST B
   Goodman J, 1999, COMPUT LINGUIST, V25, P573
   GOODMAN J, 1998, THESIS HARVARD U
   Gordon A., 1995, WORKSHOPS COMPUTING, P78, DOI [10.1007/978-1-4471-3573-9_6, DOI 10.1007/978-1-4471-3573-9_6]
   Griewank A., 1989, Mathematical Programming: recent developments and applications, V6, P83
   Hinze R., 2000, Journal of Functional Programming, V10, P327, DOI 10.1017/S0956796800003713
   Korkut Joomy, 2016, INTRINSIC VERIFICATI
   Kuske Dietrich, 2019, WEIGHT AUT
   Leijen Daan, 2001, ELECT NOTES THEORETI, V41, P1
   Liu Yudong, 2004, THESIS SIMON FRASER
   Lombardy S, 2005, THEOR COMPUT SCI, V332, P141, DOI 10.1016/j.tcs.2004.10.016
   Mannaa, 2009, REG EXP SIO AGD
   Martin-Lof P., 1984, INTUITIONISTIC TYPE, V9
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Meijer, 1996, MONADIC PARSER COMBI
   NORELL U, 2008, REVISED LECT 6 INT S
   Ostermann Klaus, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P60, DOI 10.1007/978-3-319-89884-1_3
   SCHUTZENBERGER MP, 1961, INFORM CONTROL, V4, P245, DOI 10.1016/S0019-9958(61)80020-X
   Swierstra SD, 2009, LECT NOTES COMPUT SC, V5520, P252, DOI 10.1007/978-3-642-03153-3_6
   Swierstra Wouter, 2020, P 8 WORKSH MATH EMAT
   Thue, 1912, GEGENSEITIGE LAGE GL
   Traytel D, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(3:28)2017
   Wadler P, 2015, COMMUN ACM, V58, P75, DOI 10.1145/2699407
NR 42
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 78
DI 10.1145/3473583
PG 18
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800018
OA gold
DA 2024-07-18
ER

PT J
AU Mével, G
   Jourdan, JH
AF Mevel, Glen
   Jourdan, Jacques-Henri
TI Formal Verification of a Concurrent Bounded Queue in a Weak Memory Model
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE separation logic; program verification; concurrency; weak memory;
   concurrent queue
AB We use Cosmo, a modern concurrent separation logic, to formally specify and verify an implementation of a multiple-producer multiple-consumer concurrent queue in the setting of the Multicore OCaml weak memory model. We view this result as a demonstration and experimental verification of the manner in which Cosmo allows modular and formal reasoning about advanced concurrent data structures. In particular, we show how the joint use of logically atomic triples and of Cosmo's views makes it possible to describe precisely in the specification the interaction between the queue library and the weak memory model.
C1 [Mevel, Glen; Jourdan, Jacques-Henri] Univ Paris Saclay, ENS Paris Saclay, CNRS, INRIA,Lab Methodes Formelles, F-91190 Gif Sur Yvette, France.
C3 Universite Paris Saclay; Inria; Universite Paris Cite; Centre National
   de la Recherche Scientifique (CNRS)
RP Mével, G (corresponding author), Univ Paris Saclay, ENS Paris Saclay, CNRS, INRIA,Lab Methodes Formelles, F-91190 Gif Sur Yvette, France.
EM glen.mevel@inria.fr; jacques-henri.jourdan@universite-paris-saclay.fr
OI Jourdan, Jacques-Henri/0000-0002-9781-7097
CR BATTY M, 2011, PRINCIPLES PROGRAMMI, DOI DOI 10.1145/1926385.1926394
   Bender J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360568
   Birkedal, 2021, MECHANIZED VERIFICAT
   Birkedal, CERTIFIED PROGRAMS P, DOI 10.1145/3437992.3439930
   Birkedal Lars, 2021, PROC ACM PROGRAM LAN, DOI [10.1145/3473586, DOI 10.1145/3473586]
   Brookes S, 2004, LECT NOTES COMPUT SC, V3170, P16
   Coq Development Team, 2020, COQ PROOF ASSISTANT
   Dang HH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371102
   Doko M, 2016, LECT NOTES COMPUT SC, V9583, P413, DOI 10.1007/978-3-662-49122-5_20
   Dolan S, 2018, ACM SIGPLAN NOTICES, V53, P242, DOI [10.1145/3192366.3192421, 10.1145/3296979.3192421]
   Dongol B, 2015, ACM COMPUT SURV, V48, DOI 10.1145/2796550
   Emmi M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290373
   Fraser K., 2004, UCAM-CL-TR-579
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Frumin Dan, LMCS, V17, DOI [10.46298/lmcs-17(3:9)2021, DOI 10.46298/LMCS-17(3:9)2021]
   Iris developers and contributors, 2021, IR EX
   Jacobs B, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P271, DOI 10.1145/1926385.1926417
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Jung Ralf, 2019, IR WORKSH
   Kaiser Jan-Oliver, 2017, EUR C OBJ OR PROGR E, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.17, 10.4230/LIPIcs.ECOOP.2017]
   Krishna S, 2020, LECT NOTES COMPUT SC, V12075, P280, DOI 10.1007/978-3-030-44914-8_11
   LAHAV O, 2015, INT C AUT LANG PROGR
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Lochbihler A, 2012, LECT NOTES COMPUT SC, V7211, P497, DOI 10.1007/978-3-642-28869-2_25
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Mével G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408978
   Lê NM, 2013, ACM SIGPLAN NOTICES, V48, P69, DOI 10.1145/2517327.2442524
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   OHearn Peter W., 2016, ACM SIGLOG NEWS, V3, P47, DOI DOI 10.1145/2984450.2984457
   Parkinson Matthew, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P297, DOI 10.1145/1190216.1190261
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Pop Antoniu, 2013 25 INT S COMP A, DOI 10.1109/SBACPAD.2013.8
   Pottier, 2021, COQ PROOFS COSMO EXA
   Raad A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290381
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rigtorp, 2021, MPMCQUEUE
   Sivaramakrishnan, 2020, MULTICORE OCAML
   Smith G, 2020, FORM ASP COMPUT, V32, P1, DOI 10.1007/s00165-019-00499-8
   SVENDSEN K, 2013, LECT NOTES COMPUTER, V7792
   Timany A, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P91, DOI 10.1145/3437992.3439931
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Vafeiadis V, 2013, ACM SIGPLAN NOTICES, V48, P867, DOI [10.1145/2544173.2509532, 10.1145/2509136.2509532]
   ZAKOWSKI Y, 2018, P 33 ANN ACM S APPL
NR 46
TC 8
Z9 8
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 66
DI 10.1145/3473571
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800006
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Ghilezan, S
   Pantovic, J
   Prokic, I
   Scalas, A
   Yoshida, N
AF Ghilezan, Silvia
   Pantovic, Jovanka
   Prokic, Ivan
   Scalas, Alceste
   Yoshida, Nobuko
TI Precise Subtyping for Asynchronous Multiparty Sessions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE session types; pi-calculus; typing systems; subtyping; asynchronous
   multiparty session types; soundness; completeness
ID COMPLETENESS; MODEL
AB Session subtyping is a cornerstone of refinement of communicating processes: a process implementing a session type (i.e., a communication protocol) T can be safely used whenever a process implementing one of its supertypes T' is expected, in any context, without introducing deadlocks nor other communication errors. As a consequence, whenever T <= T' holds, it is safe to replace an implementation of T' with an implementation of the subtype T, which may allow for more optimised communication patterns.
   We present the first formalisation of the precise subtyping relation for asynchronous multiparty sessions. We show that our subtyping relation is sound (i.e., guarantees safe process replacement, as outlined above) and also complete: any extension of the relation is unsound. To achieve our results, we develop a novel session decomposition technique, from full session types (including internal/external choices) into single input/output session trees (without choices).
   Previous work studies precise subtyping for binary sessions (with just two participants), or multiparty sessions (with any number of participants) and synchronous interaction. Here, we cover multiparty sessions with asynchronous interaction, where messages are transmitted via FIFO queues (as in the TCP/IP protocol), and prove that our subtyping is both operationally and denotationally precise. In the asynchronous multiparty setting, finding the precise subtyping relation is a highly complex task: this is because, under some conditions, participants can permute the order of their inputs and outputs, by sending some messages earlier or receiving some later, without causing errors; the precise subtyping relation must capture all such valid permutations D and consequently, its formalisation, reasoning and proofs become challenging. Our session decomposition technique overcomes this complexity, expressing the subtyping relation as a composition of refinement relations between single input/output trees, and providing a simple reasoning principle for asynchronous message optimisations.
C1 [Ghilezan, Silvia; Pantovic, Jovanka; Prokic, Ivan] Univ Novom Sadu, Novi Sad, Serbia.
   [Scalas, Alceste] Tech Univ Denmark, Richard Petersens Plads,Bygning 324, DK-2800 Lyngby, Denmark.
   [Scalas, Alceste] Aston Univ, Birmingham, W Midlands, England.
   [Yoshida, Nobuko] Imperial Coll London, South Kensington Campus, London SW7 2AZ, England.
C3 Technical University of Denmark; Aston University; Imperial College
   London
RP Ghilezan, S (corresponding author), Univ Novom Sadu, Novi Sad, Serbia.
EM gsilvia@uns.ac.rs; pantovic@uns.ac.rs; prokic@uns.ac.rs; alcsc@dtu.dk;
   n.yoshida@imperial.ac.uk
RI Yoshida, Nobuko/AAL-6082-2020; Pantovic, Jovanka/H-5049-2018
OI Yoshida, Nobuko/0000-0002-3925-8557; Pantovic,
   Jovanka/0000-0002-3974-5064; Prokic, Ivan/0000-0001-5420-1527; Ghilezan,
   Silvia/0000-0003-2253-8285; Scalas, Alceste/0000-0002-1153-6164
FU EU [830929]; EU COST Actions [CA15123, IC1201]; EPSRC [EP/T006544/1,
   EP/K011715/1, EP/K034413/1, EP/L00058X/1, EP/N027833/1, EP/N028201/1,
   EP/T014709/1, EP/V000462/1]; NCSS/EPSRC VeTSS; MPNTR; SFRS [6526707];
   EPSRC [EP/N027833/1, EP/K011715/1, EP/T006544/1, EP/T014709/1] Funding
   Source: UKRI
FX We thank the POPL reviewers for their insightful comments and
   suggestions, Mariangiola DezaniCiancaglini for her initial
   collaboration, and Simon Castellan for the fruitful discussion. This
   work was supported by: EU Horizon 2020 project 830929
   (lCyberSec4Europez); EU COST Actions CA15123 (lEUTypesz) and IC1201
   (lBETTYz); EPSRC EP/T006544/1, EP/K011715/1, EP/K034413/1, EP/L00058X/1,
   EP/N027833/1, EP/N028201/1, EP/T006544/1, EP/T014709/1 and EP/V000462/1,
   and NCSS/EPSRC VeTSS; MPNTR and SFRS #6526707 (lAI4TrustBCz).
CR Ancona D, 2016, FOUND TRENDS PROGRAM, V3, pI, DOI 10.1561/2500000031
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Bettini L, 2008, LECT NOTES COMPUT SC, V5201, P418, DOI 10.1007/978-3-540-85361-9_33
   Blackburn Jeremy, 2012, CSE071012 U S FLOR
   BRAND D, 1983, J ACM, V30, P323, DOI 10.1145/322374.322380
   Bravetti M, 2018, THEOR COMPUT SCI, V722, P19, DOI 10.1016/j.tcs.2018.02.010
   Bravetti Mario, 2019, SOUND ALGORITHM ASYN
   Bravetti Mario, 2019, SOUND ALGORITHM ASYN, V140, DOI [10.4230/LIPIcs.CONCUR.2019.38, DOI 10.4230/LIPICS.CONCUR.2019.38]
   Castagna G, 2005, LECT NOTES COMPUT SC, V3580, P30
   Castagna G, 2008, THEOR COMPUT SCI, V398, P217, DOI 10.1016/j.tcs.2008.01.049
   Castagna G, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P219, DOI 10.1145/1599410.1599437
   Castagna G, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1538917.1538920
   Castro-Perez David, 29 INT C COMP CONSTR, P143, DOI [10.1145/3377555.3377889, DOI 10.1145/3377555.3377889]
   Castro-Perez David, 2020, CAMP COST AWARE MULT
   Chen TC, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(2:12)2017
   Chen TC, 2014, PPDP'14: PROCEEDINGS OF THE 16TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P135, DOI 10.1145/2643135.2643138
   Demangeon R, 2011, LECT NOTES COMPUT SC, V6901, P280, DOI 10.1007/978-3-642-23217-6_19
   Demangeon Romain, 2015, LEIBNIZ INT P INFORM, V45, DOI 10.4230/LIPIcs.FSTTCS.2015.560
   Deniélou PM, 2013, LECT NOTES COMPUT SC, V7966, P174, DOI 10.1007/978-3-642-39212-2_18
   Deniélou PM, 2012, LECT NOTES COMPUT SC, V7211, P194, DOI 10.1007/978-3-642-28869-2_10
   Dezani-Ciancaglini M, 1998, SIAM J COMPUT, V27, P1376, DOI 10.1137/S0097539794275860
   Dezani-Ciancaglini Mariangiola, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P194, DOI 10.1007/978-3-319-08918-8_14
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay S, 2017, RIV PUBL SER AUTOMAT, pXV
   Ghilezan Silvia, 2020, PRECISE SUBTYPING FO
   HINDLEY R, 1983, THEOR COMPUT SCI, V22, P1, DOI 10.1016/0304-3975(83)90136-6
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Horne R., 2020, LIPIcs, V171, P12
   Hu Raymond, 2017, DISTRIBUTED PROGRAMM, P287, DOI [10.13052/rp-9788793519817, DOI 10.13052/RP-9788793519817]
   Huang H, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P303
   Lange J, 2019, LECT NOTES COMPUT SC, V11561, P97, DOI 10.1007/978-3-030-25540-4_6
   Lange J, 2017, LECT NOTES COMPUT SC, V10203, P441, DOI 10.1007/978-3-662-54458-7_26
   Ligatti J, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/2994596
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   Mostrous D, 2015, INFORM COMPUT, V241, P227, DOI 10.1016/j.ic.2015.02.002
   Mostrous D, 2009, LECT NOTES COMPUT SC, V5502, P316, DOI 10.1007/978-3-642-00590-9_23
   Ng N, 2015, LECT NOTES COMPUT SC, V9031, P212, DOI 10.1007/978-3-662-46663-6_11
   Ng N, 2012, LECT NOTES COMPUT SC, V7304, P202, DOI 10.1007/978-3-642-30561-0_15
   Pierce B., 1996, Mathematical Structures in Computer Science, V6, P409
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Sangiorgi Davide, 2011, Introduction to Bisimulation and Coinduction, DOI DOI 10.1017/CBO9780511777110
   Scalas A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290343
   Takeuchi K., 1994, Parallel Architectures and Languages Europe'94, V817, P398, DOI [DOI 10.1007/3-540-58184-7_118, 10.1007/3540581847118]
   Yoshida Nobuko, 2008, Formal Methods for Components and Objects. 7th International Symposium, FMCO 2008. Revised Lectures, P226
NR 47
TC 8
Z9 8
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 16
DI 10.1145/3434297
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100016
OA Green Submitted, Green Published, gold, Green Accepted
DA 2024-07-18
ER

PT J
AU Muller, SK
   Hoffmann, J
AF Muller, Stefan K.
   Hoffmann, Jan
TI Modeling and Analyzing Evaluation Cost of CUDA Kernels
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE resource-aware type system; performance analysis; CUDA; thread-level
   parallelism; program logics
AB General-purpose programming on GPUs (GPGPU) is becoming increasingly in vogue as applications such as machine learning and scientific computing demand high throughput in vector-parallel applications. NVIDIA's CUDA toolkit seeks to make GPGPU programming accessible by allowing programmers to write GPU functions, called kernels, in a small extension of C/C++. However, due to CUDA's complex execution model, the performance characteristics of CUDA kernels are difficult to predict, especially for novice programmers.
   This paper introduces a novel quantitative program logic for CUDA kernels, which allows programmers to reason about both functional correctness and resource usage of CUDA kernels, paying particular attention to a set of common but CUDA-specific performance bottlenecks. The logic is proved sound with respect to a novel operational cost semantics for CUDA kernels. The semantics, logic and soundness proofs are formalized in Coq. An inference algorithm based on LP solving automatically synthesizes symbolic resource bounds by generating derivations in the logic. This algorithm is the basis of RaCuda, an end-to-end resource-analysis tool for kernels, which has been implemented using an existing resource-analysis tool for imperative programs. An experimental evaluation on a suite of CUDA benchmarks shows that the analysis is effective in aiding the detection of performance bugs in CUDA kernels.
C1 [Muller, Stefan K.] IIT, Chicago, IL 60616 USA.
   [Hoffmann, Jan] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Illinois Institute of Technology; Carnegie Mellon University
RP Muller, SK (corresponding author), IIT, Chicago, IL 60616 USA.
EM smuller2@iit.edu; jhoffmann@cmu.edu
OI Hoffmann, Jan/0000-0001-8326-0788
FU United States Air Force and DARPA [FA8750-18-C-0092]; National Science
   Foundation under SaTC Award [1801369]; National Science Foundation under
   CAREER Award [1845514]; National Science Foundation under SHF Awards
   [1812876, 2007784]; Direct For Computer & Info Scie & Enginr; Division
   of Computing and Communication Foundations [1812876] Funding Source:
   National Science Foundation; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [1845514, 2007784]
   Funding Source: National Science Foundation; Division Of Computer and
   Network Systems; Direct For Computer & Info Scie & Enginr [1801369]
   Funding Source: National Science Foundation
FX This article is based upon work supported by the United States Air Force
   and DARPA under Contract No. FA8750-18-C-0092 and by the National
   Science Foundation under SaTC Award 1801369, CAREER Award 1845514, and
   SHF Awards 1812876 and 2007784. Any opinions, findings, and conclusions
   contained in this document are those of the authors and do not
   necessarily reflect the views of the sponsoring organizations.
CR Alur R, 2017, LECT NOTES COMPUT SC, V10426, P507, DOI 10.1007/978-3-319-63387-9_25
   [Anonymous], 2008, 3 WORKSH SOFTW TOOLS
   Belloch G., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P226, DOI 10.1145/224164.224210
   Bialas P, 2016, LECT NOTES COMPUT SC, V9573, P570, DOI 10.1007/978-3-319-32149-3_53
   Blelloch GE, 1996, ACM SIGPLAN NOTICES, V31, P213, DOI 10.1145/232629.232650
   BRENT RP, 1974, J ACM, V21, P201, DOI 10.1145/321812.321815
   Carbonneaux Q, 2017, LECT NOTES COMPUT SC, V10427, P64, DOI 10.1007/978-3-319-63390-9_4
   Carbonneaux Q, 2014, ACM SIGPLAN NOTICES, V49, P270, DOI [10.1145/2594291.2594301, 10.1145/2666356.2594301]
   Carbonneaux Q, 2015, ACM SIGPLAN NOTICES, V50, P467, DOI [10.1145/2813885.2737955, 10.1145/2737924.2737955]
   Dal Lago U, 2011, IEEE S LOG, P133, DOI 10.1109/LICS.2011.22
   Danner N, 2015, ACM SIGPLAN NOTICES, V50, P140, DOI [10.1145/2784731.2784749, 10.1145/2858949.2784749]
   Das Ankush, 2018, 23 INT C FUNCT PROGR
   EAGER DL, 1989, IEEE T COMPUT, V38, P408, DOI 10.1109/12.21127
   Eizenberg A, 2017, ACM SIGPLAN NOTICES, V52, P126, DOI [10.1145/3140587.3062342, 10.1145/3062341.3062342]
   Gueneau Armael, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P533, DOI 10.1007/978-3-319-89884-1_19
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Han Tianyi David, 2011, P 4 WORKSH GEN PURP, DOI [10.1145/1964179.1964184, DOI 10.1145/1964179.1964184]
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Hoffmann J, 2015, LECT NOTES COMPUT SC, V9032, P132, DOI 10.1007/978-3-662-46669-8_6
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Kincaid Zachary, 2017, C PROGRAMMING LANGUA, DOI [10.1145/3062341, DOI 10.1145/3062341]
   Kojima K, 2017, ACM T COMPUT LOG, V18, DOI 10.1145/3001834
   Li GD, 2012, ACM SIGPLAN NOTICES, V47, P215, DOI 10.1145/2370036.2145844
   Li Guodong, 2010, P INT S FDN SOFTWARE, DOI [10.1145/1882291.1882320, DOI 10.1145/1882291.1882320]
   Muller S.K., 2016, P 28 ACM S PARALLELI, P71, DOI DOI 10.1145/2935764.2935793
   Ngo Van Chan, 2018, ACM SIGPLAN NOTICES, DOI [10.1145/3192366.3192394, DOI 10.1145/3192366.3192394]
   NVIDIA, 2019, CUDA C Programming Guide v.10.1.168
   Peng YF, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P390, DOI 10.1145/3192366.3192368
   Pereira P., 2016, P SAC, P1648, DOI [10.1145/2851613.2851830, DOI 10.1145/2851613.2851830]
   Radicek I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158124
   Shumailov Ilia, 2020, ARXIVCSLG200603463
   Singhania Nimit, 2018, Ph.D. Dissertation. Computer and Information Science,
   Sinn Moritz, 2014, P 26 INT C COMPUTER, DOI [10.1007/978-3-319-08867-9_50, DOI 10.1007/978-3-319-08867-9_50]
   Wu Mingyuan, 2019, ABS190501833 CORR
   Zheng M, 2011, ACM SIGPLAN NOTICES, V46, P135, DOI 10.1145/2038037.1941574
NR 36
TC 7
Z9 7
U1 2
U2 10
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 25
DI 10.1145/3434306
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100025
OA gold
DA 2024-07-18
ER

PT J
AU Pavlinovic, Z
   Su, YS
   Wies, T
AF Pavlinovic, Zvonimir
   Su, Yusen
   Wies, Thomas
TI Data Flow Refinement Type Inference
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE refinement type inference; abstract interpretation; Liquid types
ID POLYHEDRA; VERIFICATION; LIBRARY
AB Refinement types enable lightweight verification of functional programs. Algorithms for statically inferring refinement types typically work by reduction to solving systems of constrained Horn clauses extracted from typing derivations. An example is Liquid type inference, which solves the extracted constraints using predicate abstraction. However, the reduction to constraint solving in itself already signifies an abstraction of the program semantics that affects the precision of the overall static analysis. To better understand this issue, we study the type inference problem in its entirety through the lens of abstract interpretation. We propose a new refinement type system that is parametric with the choice of the abstract domain of type refinements as well as the degree to which it tracks context-sensitive control flow information. We then derive an accompanying parametric inference algorithm as an abstract interpretation of a novel data flow semantics of functional programs. We further show that the type system is sound and complete with respect to the constructed abstract semantics. Our theoretical development reveals the key abstraction steps inherent in refinement type inference algorithms. The trade-off between precision and efficiency of these abstraction steps is controlled by the parameters of the type system. Existing refinement type systems and their respective inference algorithms, such as Liquid types, are captured by concrete parameter instantiations. We have implemented our framework in a prototype tool and evaluated it for a range of new parameter instantiations (e.g., using octagons and polyhedra for expressing type refinements). The tool compares favorably against other existing tools. Our evaluation indicates that our approach can be used to systematically construct new refinement type inference algorithms that are both robust and precise.
C1 [Pavlinovic, Zvonimir; Su, Yusen; Wies, Thomas] NYU, New York, NY 10003 USA.
   [Pavlinovic, Zvonimir] Google, Mountain View, CA 94043 USA.
   [Su, Yusen] Univ Waterloo, Waterloo, ON, Canada.
C3 New York University; Google Incorporated; University of Waterloo
RP Pavlinovic, Z (corresponding author), NYU, New York, NY 10003 USA.; Pavlinovic, Z (corresponding author), Google, Mountain View, CA 94043 USA.
EM zvonimir.pavlinovic@gmail.com; ys3547@nyu.edu; wies@cs.nyu.edu
FU National Science Foundation [CCF-1350574, CCF-1618059]
FX This work is funded in parts by the National Science Foundation under
   grants CCF-1350574 and CCF-1618059. We thank Patrick Cousot, Kedar
   Namjoshi, and the anonymous reviewers for their feedback on an earlier
   draft of this paper.
CR Antoine Mine, 2007, ABSCS0703084 CORR
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Arceri V, 2019, LECT NOTES COMPUT SC, V11884, P255, DOI 10.1007/978-3-030-32505-3_15
   Bagnara R, 2008, SCI COMPUT PROGRAM, V72, P3, DOI 10.1016/j.scico.2007.08.001
   Blanchet Bruno, 2007, ABSCS0701193 CORR
   Champion A, 2018, LECT NOTES COMPUT SC, V11275, P146, DOI 10.1007/978-3-030-02768-1_8
   Champion A, 2018, LECT NOTES COMPUT SC, V10805, P365, DOI 10.1007/978-3-319-89960-2_20
   Chen L, 2009, LECT NOTES COMPUT SC, V5673, P309, DOI 10.1007/978-3-642-03237-0_21
   Chugh R, 2012, ACM SIGPLAN NOTICES, V47, P587, DOI 10.1145/2398857.2384659
   Cori R., 2002, Verification, Model Checking, and Abstract Interpretation. Third International Workshop, VMCAI 2002. Revised Papers (Lecture Notes in Computer Science Vol.2294), P225
   Cousot P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P316, DOI 10.1145/263699.263744
   COUSOT P, 1994, PROCEEDINGS OF THE 1994 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P95, DOI 10.1109/ICCL.1994.288389
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2009, FORM METHOD SYST DES, V35, P229, DOI 10.1007/s10703-009-0089-6
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Dunfield J, 2004, ACM SIGPLAN NOTICES, V39, P281, DOI 10.1145/982962.964025
   Dunfield J, 2003, LECT NOTES COMPUT SC, V2620, P250
   Flanagan C., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P500
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garg P, 2014, LECT NOTES COMPUT SC, V8559, P69, DOI 10.1007/978-3-319-08867-9_5
   Gilray T, 2016, ACM SIGPLAN NOTICES, V51, P691, DOI 10.1145/2914770.2837631
   Gori R, 2003, LECT NOTES COMPUT SC, V2575, P132
   HARPER R, 1992, J SYMB COMPUT, V14, P71, DOI 10.1016/0747-7171(92)90026-Z
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Jagannathan S., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P393, DOI 10.1145/199448.199536
   Jeannet B, 2009, LECT NOTES COMPUT SC, V5643, P661, DOI 10.1007/978-3-642-02658-4_52
   Jones N.D., 1986, POPL, P296, DOI DOI 10.1145/512644.512672
   Jones ND, 2007, THEOR COMPUT SCI, V375, P120, DOI 10.1016/j.tcs.2006.12.030
   Jones Neil D., 1997, J FUNCT LOG PROGRAM, V1997, P2
   Kazerounian M, 2018, LECT NOTES COMPUT SC, V10747, P269, DOI 10.1007/978-3-319-73721-8_13
   Kim SW, 2011, LECT NOTES COMPUT SC, V6538, P294, DOI 10.1007/978-3-642-18275-4_21
   Kobayashi N, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P222
   Lahiri SK, 2009, LECT NOTES ARTIF INT, V5663, P214, DOI 10.1007/978-3-642-02959-2_18
   Lehmann N, 2017, ACM SIGPLAN NOTICES, V52, P775, DOI 10.1145/3093333.3009856
   Mauborgne L, 2005, LECT NOTES COMPUT SC, V3444, P5
   Midtgaard J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187672
   MONSUEZ B, 1992, LECT NOTES COMPUT SC, V652, P217
   Monsuez B., 1995, Static Analysis. Second International Symposium, SAS'95. Proceedings, P279
   Monsuez B., 1993, Static Analysis. Third International Workshop Proceedings, P267
   Monsuez B., 1995, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics- Based Program Manipulation. PEPM'95, P122, DOI 10.1145/215465.215574
   Mossen C., 1998, Nordic Journal of Computing, V5, P214
   Nielsen F., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P332, DOI 10.1145/263699.263745
   Okuyama Y, 2019, LECT NOTES COMPUT SC, V11822, P437, DOI 10.1007/978-3-030-32304-2_21
   Ong L, 2015, IEEE S LOG, P1, DOI 10.1109/LICS.2015.9
   Pavlinovic Zvonimir, 2020, ABS201104876 CORR
   Plevyak J., 1995, Iterative flow analysis
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Singh G, 2017, ACM SIGPLAN NOTICES, V52, P46, DOI 10.1145/3093333.3009885
   Toman J, 2020, LECT NOTES COMPUT SC, V12075, P684, DOI 10.1007/978-3-030-44914-8_25
   Unno H, 2013, ACM SIGPLAN NOTICES, V48, P75, DOI 10.1145/2480359.2429081
   Unno H, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P277, DOI 10.1145/1599410.1599445
   Van Horn D, 2011, COMMUN ACM, V54, P101, DOI 10.1145/1995376.1995400
   Vardoulakis D, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P69
   Vardoulakis D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:3)2011
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276502
   Vazou N, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P132, DOI 10.1145/3242744.3242756
   Vazou N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P48, DOI 10.1145/2784731.2784745
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Vazou N, 2013, LECT NOTES COMPUT SC, V7792, P209, DOI 10.1007/978-3-642-37036-6_13
   Vekris P, 2016, ACM SIGPLAN NOTICES, V51, P310, DOI [10.1145/2980983.2908110, 10.1145/2908080.2908110]
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
   Zhu H, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P400, DOI 10.1145/2784731.2784766
   Zhu H, 2016, ACM SIGPLAN NOTICES, V51, P491, DOI [10.1145/2980983.2908125, 10.1145/2908080.2908125]
   Zhu H, 2013, LECT NOTES COMPUT SC, V7737, P295
NR 67
TC 5
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 19
DI 10.1145/3434300
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100019
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Atkinson, E
   Carbin, M
AF Atkinson, Eric
   Carbin, Michael
TI Programming and Reasoning with Partial Observability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE programming languages; logic; partial observability; uncertainty
AB Computer programs are increasingly being deployed in partially-observable environments. A partially observable environment is an environment whose state is not completely visible to the program, but from which the program receives partial observations. Developers typically deal with partial observability by writing a state estimator that, given observations, attempts to deduce the hidden state of the environment. In safety-critical domains, to formally verify safety properties developers may write an environment model. The model captures the relationship between observations and hidden states and is used to prove the software correct.
   In this paper, we present a new methodology for writing and verifying programs in partially observable environments. We present belief programming, a programming methodology where developers write an environment model that the program runtime automatically uses to perform state estimation. A belief program dynamically updates and queries a belief state that captures the possible states the environment could be in. To enable verification, we present Epistemic Hoare Logic that reasons about the possible belief states of a belief program the same way that classical Hoare logic reasons about the possible states of a program. We develop these concepts by defining a semantics and a program logic for a simple core language called BLIMP. In a case study, we show how belief programming could be used to write and verify a controller for the Mars Polar Lander in BLIMP. We present an implementation of BLIMP called CBLIMP and evaluate it to determine the feasibility of belief programming.
C1 [Atkinson, Eric; Carbin, Michael] MIT, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Atkinson, E (corresponding author), MIT, Cambridge, MA 02139 USA.
EM eatkinson@csail.mit.edu; mcarbin@csail.mit.edu
FU Office of Naval Research [ONR-N00014-17-1-2699]
FX We would like to thank Alex Renda, Deokhwan Kim, Ben Sherman, Jesse
   Michel, Cambridge Yang, Jonathan Frankle, and anonymous reviewers for
   their helpful comments and suggestions. This work was supported in part
   by the Office of Naval Research (ONR-N00014-17-1-2699). Any opinions,
   findings, and conclusions or recommendations expressed in this material
   are those of the author and do not necessarily reflect the views of the
   Office of Naval Research.
CR Areces Carlos, 2015, SOFTWARE SERVICES SY
   Back Ralph-Johan, 1978, THESIS U HELSINKI
   Baltag Alexandru, 2004, SYNTHESE, V139
   Baudart Guillaume, 2020, C PROGRAMMING LANGUA
   Bertsekas Dimitri P., 1971, THESIS MIT
   Caridroit Thomas, 2017, AAAI C ART INT
   Chatterjee S, 2018, ANN APPL PROBAB, V28, P1099, DOI 10.1214/17-AAP1326
   Cimmino G., 1938, RICERA SCI 2, V9
   COMBETTES PL, 1993, P IEEE, V81, P182, DOI 10.1109/5.214546
   Cowles MK, 1996, J AM STAT ASSOC, V91, P883, DOI 10.2307/2291683
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Del Moral P, 2006, J R STAT SOC B, V68, P411, DOI 10.1111/j.1467-9868.2006.00553.x
   Delaware B, 2015, ACM SIGPLAN NOTICES, V50, P689, DOI [10.1145/2775051.2677006, 10.1145/2676726.2677006]
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Flanagan Cormac, 2001, INT S FORM METH EUR
   Floyd R.W., 1967, S APPL MATH
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   JPL Special Review Board, 2000, REP LOSS MARS POL LA
   Kaczmarz Stefan, 1937, B INT ACAD POLONAI A
   Lau Tessa, 2000, INT C MACH LEARN
   Liu JS, 1996, STAT COMPUT, V6, P113, DOI 10.1007/BF00162521
   Plaza J, 2007, SYNTHESE, V158, P165, DOI 10.1007/s11229-007-9168-7
   Russel Stuart, 2020, ARTIFICIAL INTELLIGE, V4
   Samimi Hesam, 2010, EUR C OBJ OR PROGR
   Sampson A, 2014, ACM SIGPLAN NOTICES, V49, P112, DOI [10.1145/2666356.2594294, 10.1145/2594291.2594294]
   Sato Tetsuya, 2019, S PRINC PROGR LANG
   Schweppe Fred C., 1973, UNCERTAIN DYNAMIC SY
   SMALLWOOD RD, 1973, OPER RES, V21, P1071, DOI 10.1287/opre.21.5.1071
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Sparkfun, 2020, GPS BUYING GUID SPAR
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   Wan J, 2018, IEEE T AUTOMAT CONTR, V63, P4317, DOI 10.1109/TAC.2018.2816262
   Winskel Glynn, 1993, FORMAL SEMANTICS PRO
   Yang J, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P85
NR 34
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 200
DI 10.1145/3428268
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900077
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Bagherzadeh, M
   Fireman, N
   Shawesh, A
   Khatchadourian, R
AF Bagherzadeh, Mehdi
   Fireman, Nicholas
   Shawesh, Anas
   Khatchadourian, Raffi
TI Actor Concurrency Bugs: A Comprehensive Study on Symptoms, Root Causes,
   API Usages, and Differences
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Akka actor bugs; Actor bug symptoms; Actor bug root causes; Actor bug
   API usages; Actor bug differences; Stack Overflow; GitHub
AB Actor concurrency is becoming increasingly important in the development of real-world software systems. Although actor concurrency may be less susceptible to some multithreaded concurrency bugs, such as low-level data races and deadlocks, it comes with its own bugs that may be different. However, the fundamental characteristics of actor concurrency bugs, including their symptoms, root causes, API usages, examples, and differences when they come from different sources are still largely unknown. Actor software development can significantly benefit from a comprehensive qualitative and quantitative understanding of these characteristics, which is the focus of this work, to foster better API documentation, development practices, testing, debugging, repairing, and verification frameworks. To conduct this study, we take the following major steps. First, we construct a set of 186 real-world Akka actor bugs from Stack Overflow and GitHub via manual analysis of 3,924 Stack Overflow questions, answers, and comments and 3,315 GitHub commits, messages, original and modified code snippets, issues, and pull requests. Second, we manually study these actor bugs and their fixes to understand and classify their symptoms, root causes, and API usages. Third, we study the differences between the commonalities and distributions of symptoms, root causes, and API usages of our Stack Overflow and GitHub actor bugs. Fourth, we discuss real-world examples of our actor bugs with these symptoms and root causes. Finally, we investigate the relation of our findings with those of previous work and discuss their implications. A few findings of our study are: (1) symptoms of our actor bugs can be classified into five categories, with Error as the most common symptom and Incorrect Exceptions as the least common, (2) root causes of our actor bugs can be classified into ten categories, with Logic as the most common root cause and Untyped Communication as the least common, (3) a small number of Akka API packages are responsible for most of API usages by our actor bugs, and (4) our Stack Overflow and GitHub actor bugs can differ significantly in commonalities and distributions of their symptoms, root causes, and API usages. While some of our findings agree with those of previous work, others sharply contrast.
C1 [Bagherzadeh, Mehdi; Fireman, Nicholas; Shawesh, Anas] Oakland Univ, Rochester, MI 48063 USA.
   [Khatchadourian, Raffi] CUNY Hunter Coll, New York, NY 10021 USA.
C3 Oakland University; City University of New York (CUNY) System; Hunter
   College (CUNY)
RP Bagherzadeh, M (corresponding author), Oakland Univ, Rochester, MI 48063 USA.
EM mbagherzadeh@oakland.edu; nfireman@oakland.edu; ashaweshn@oakland.edu;
   raffi.khatchadourian@hunter.cuny.edu
RI Khatchadourian, Raffi/AAH-2180-2019
OI Khatchadourian, Raffi/0000-0002-7930-0182
CR AGHA G, 1985, LECT NOTES COMPUT SC, V206, P19
   Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Ahmed S, 2018, PROCEEDINGS OF THE 12TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT (ESEM 2018), DOI 10.1145/3239235.3239524
   [Anonymous], 2020, AKKA TYPED
   [Anonymous], 2014, MSR-TR-2014-41
   [Anonymous], 2020, SCALA 2 13 2 API
   [Anonymous], 2019, STACK EXCHANGE
   [Anonymous], 2020, AKK ACT REF CONF
   [Anonymous], 2020, AKK 2 6 5 API
   [Anonymous], AKK
   Apache, 2015, AKK ACT SPARK
   Armstrong J., 2007, Programming Erlang: Software for a Concurrent World, V1st
   Bagherzadeh M, 2017, PROCEEDINGS OF THE 7TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL (AGERE'17), P21, DOI 10.1145/3141834.3141837
   Bagherzadeh M, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P432, DOI 10.1145/3338906.3338939
   Bagherzadeh Mehdi., 2015, P 14 INT C MODULARIT, P93, DOI [10.1145/2724525.2724568, DOI 10.1145/2724525.2724568]
   Ball T, 2003, ACM SIGPLAN NOTICES, V38, P97, DOI 10.1145/640128.604140
   Barua A, 2014, EMPIR SOFTW ENG, V19, P619, DOI 10.1007/s10664-012-9231-y
   Bhattacharya P, 2012, J SYST SOFTWARE, V85, P2275, DOI 10.1016/j.jss.2012.04.053
   Bianchi FA, 2018, IEEE T SOFTWARE ENG, V44, P747, DOI 10.1109/TSE.2017.2707089
   Biswas Sumon, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P577, DOI 10.1109/MSR.2019.00086
   Caballero R, 2019, J LOG ALGEBR METHODS, V107, P1, DOI 10.1016/j.jlamp.2019.05.002
   Casalnuovo C, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P755, DOI 10.1109/ICSE.2015.88
   Charalambides Minas, 2019, TYP PROGR ACT PROGR, P315, DOI [10.1007/978-3-030-21485-2_18, DOI 10.1007/978-3-030-21485-2_18]
   Clebsch S., 2015, P 5 INT WORKSHOP PRO, P1, DOI DOI 10.1145/2824815.2824816
   Colaco J-L., 1997, SET CONSTRAINT BASED, P107, DOI [10.1007/978-0-387-35261-9_8, DOI 10.1007/978-0-387-35261-9_8]
   D'Osualdo E, 2013, LECT NOTES COMPUT SC, V7935, P454, DOI 10.1007/978-3-642-38856-9_24
   De Koster J, 2016, PROCEEDINGS OF THE 6TH INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL (AGERE'16), P31, DOI 10.1145/3001886.3001890
   Fincher S, 2005, EXPERT SYST, V22, P89, DOI 10.1111/j.1468-0394.2005.00299.x
   GitHub, 2013, SPRAY PROJ
   GitHub, 2019, STAT OCT
   GitHub, 2013, FIX GARBL BIG TCP WR
   Gordon CS, 2019, PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL (AGERE '19), P11, DOI 10.1145/3358499.3361221
   Gu XD, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P631, DOI 10.1145/2950290.2950334
   Gunawi H. S., 2014, P ACM S CLOUD COMP S, P1
   Haller P, 2016, ACM SIGPLAN NOTICES, V51, P272, DOI 10.1145/3022671.2984042
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Hanam Q, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P144, DOI 10.1145/2950290.2950308
   Hayduk Yaroslav, 2015, Distributed Applications and Interoperable Systems. 15th IFIP WG 6.1 International Conference, DAIS 2015, held as part of the 10th International Federated Conference on Distributed Computing Techniques, DisCoTec 2015. Proceedings: LNCS 9038, P94, DOI 10.1007/978-3-319-19129-4_8
   Hedden B, 2018, PROC INT CONF PARAL, DOI 10.1145/3225058.3225139
   Hovemeyer D, 2004, ACM SIGPLAN NOTICES, V39, P92, DOI 10.1145/1052883.1052895
   Islam MJ, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P510, DOI 10.1145/3338906.3338955
   Islam Md Johirul, 2020, P 42 INT C SOFTW ENG
   Johnson Khari, 2018, GITHUB PASSES 100000
   KHATCHADOURIAN R, 2008, P 7 WORKSH FDN ASP O, P19
   Khatchadourian R, 2020, LECT NOTES COMPUT SC, V12076, P97, DOI 10.1007/978-3-030-45234-6_5
   Khatchadourian R, 2019, PROC INT CONF SOFTW, P619, DOI 10.1109/ICSE.2019.00072
   Khatchadourian R, 2018, IEEE INT WORK C SO, P34, DOI 10.1109/SCAM.2018.00011
   Khot A. S., 2018, CONCURRENT PATTERNS
   Kim S, 2006, Proceedings of the 2006 international workshop on Mining software repositories, P173
   Lauterburg S, 2010, LECT NOTES COMPUT SC, V6013, P308, DOI 10.1007/978-3-642-12029-9_22
   Lauterburg S, 2009, IEEE INT CONF AUTOM, P468, DOI 10.1109/ASE.2009.88
   Lee EA, 2006, COMPUTER, V39, P33, DOI 10.1109/MC.2006.180
   Leesatapornwongsa T, 2016, ACM SIGPLAN NOTICES, V51, P517, DOI 10.1145/2954679.2872374
   Lewis Mark C., 2016, OBJECT ORIENTATION A, VSecond 2nd
   Li H, 2014, SCI CHINA INFORM SCI, V57, DOI 10.1007/s11432-014-5150-4
   Li Sihan, 2018, 32 EUR C OBJ OR PROG, V109, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Li Zhenmin, 2005, P ACM SIGSOFT SOFTW, P306, DOI DOI 10.1145/1081706.1081755
   Liang B, 2016, PROC INT CONF SOFTW, P333, DOI 10.1145/2884781.2884870
   Lightbend, 2020, PAYP BLOWS 100000000
   Lightbend, 2020, AKK ACT DOC
   Lightbend, 2020, GROUP SCAL PERS OFF
   Lightbend, 2020, AKK DOC SUP MON
   Lightbend, 2019, CUST CAS STUD
   Long Y, 2016, PROCEEDINGS OF THE 15TH INTERNATIONAL CONFERENCE ON MODULARITY (MODULARITY'16), P54, DOI 10.1145/2889443.2889444
   Lopez CT, 2017, PROCEEDINGS OF THE 7TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON PROGRAMMING BASED ON ACTORS, AGENTS, AND DECENTRALIZED CONTROL (AGERE'17), P41, DOI 10.1145/3141834.3141839
   Lopez CT, 2018, LECT NOTES COMPUT SC, V10789, P155, DOI 10.1007/978-3-030-00302-9_6
   Lopez CarmenTorres., 2019, 33 EUROPEAN C OBJECT, V134, p27:1, DOI DOI 10.4230/LIPICS.ECOOP.2019.27
   Lu S, 2008, ACM SIGPLAN NOTICES, V43, P329, DOI 10.1145/1353536.1346323
   Manuel Bernhardt, 2020, AKK ANT RAC COND
   Meng N, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P372, DOI 10.1145/3180155.3180201
   Monperrus M, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P234, DOI 10.1145/2568225.2568324
   Nadi S, 2016, PROC INT CONF SOFTW, P935, DOI 10.1145/2884781.2884790
   Negara S, 2011, ACM SIGPLAN NOTICES, V46, P81, DOI 10.1145/2038037.1941566
   NLTK Project, 2020, PORTER STEMMING ALGO
   Rajan H, 2015, 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, Vol 2, P611, DOI 10.1109/ICSE.2015.205
   Ray B, 2016, PROC INT CONF SOFTW, P428, DOI 10.1145/2884781.2884848
   Rosen C, 2016, EMPIR SOFTW ENG, V21, P1192, DOI 10.1007/s10664-015-9379-3
   Scholliers C, 2014, SCI COMPUT PROGRAM, V80, P52, DOI 10.1016/j.scico.2013.03.011
   Sen K, 2006, LECT NOTES COMPUT SC, V3922, P339
   Stack Overflow, 2018, SEND MESS ACT REST S
   Stack Overflow, 2013, SHOULD AKK ACT BE CR
   Stack Overflow, 2018, SCAL AKK ACT DEAD LE
   Stack Overflow, 2017, DOESNT IMM STOP CHIL
   Stack Overflow, 2017, US FUT AKK ASY RES
   Stack Overflow, 2016, POSTRESTART PRERESTA
   Stack Overflow, ACT NAM IS NOT UN IN
   Stack Overflow, 2012, AKK ACT APP HANG HIG
   Stack Overflow, 2018, CANN EST REM COMM AK
   Stack Overflow, 2012, CORR TERM AKK ACT SC
   Stack Overflow, 2019, AKK ROUT REPL SEND R
   StackOverflow, 2020, HOWT CREAT MIN REPR
   Stievenart Q., 2017, 31 EUR C OBJ OR PROG, DOI [10.4230/LIPIcs.ECOOP.2017.25, DOI 10.4230/LIPICS.ECOOP.2017.25]
   Swalens J, 2014, ELECTRON PROC THEOR, P54, DOI 10.4204/EPTCS.155.8
   Tasharofi Samira, 2012, Formal Techniques for Distributed Systems. Joint 14th IFIP WG 6.1 International Conference, FMOODS 2012 and 32nd IFIP WG 6.1 International Conference, FORTE 2012, P219, DOI 10.1007/978-3-642-30793-5_14
   Tasharofi S, 2013, IEEE INT CONF AUTOM, P114, DOI 10.1109/ASE.2013.6693072
   Tasharofi S, 2013, LECT NOTES COMPUT SC, V7920, P302, DOI 10.1007/978-3-642-39038-8_13
   Tu TF, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P865, DOI 10.1145/3297858.3304069
   Wang J, 2017, IEEE INT CONF AUTOM, P520, DOI 10.1109/ASE.2017.8115663
   Wessels L., 2013, THESIS
   Yang XL, 2016, J COMPUT SCI TECH-CH, V31, P910, DOI 10.1007/s11390-016-1672-0
   Zhang YH, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P129, DOI 10.1145/3213846.3213866
   Zhou Bo, 2015, P 19 INT C EV ASS SO, DOI [10.1145/2745802.2745807, DOI 10.1145/2745802.2745807]
   Zimmermann T, 2012, PROC INT CONF SOFTW, P1074, DOI 10.1109/ICSE.2012.6227112
NR 103
TC 5
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 214
DI 10.1145/3428282
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900091
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Farooq, U
   Zhao, ZJ
   Sridharan, M
   Neamtiu, I
AF Farooq, Umar
   Zhao, Zhijia
   Sridharan, Manu
   Neamtiu, Iulian
TI LIVEDROID: Identifying and Preserving Mobile App State in Volatile
   Runtime Environments
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Runtime Configuration Change; Software Restart; Static Analysis; Android
AB Mobile operating systems, especially Android, expose apps to a volatile runtime environment. The app state that reflects past user interaction and system environment updates (e.g., battery status changes) can be destroyed implicitly, in response to runtime configuration changes (e.g., screen rotations) or memory pressure. Developers are therefore responsible for identifying app state affected by volatility and preserving it across app lifecycles. When handled inappropriately, the app may lose state or end up in an inconsistent state after a runtime configuration change or when users return to the app.
   To free developers from this tedious and error-prone task, we propose a systematic solution, LIVEDROID, which precisely identifies the necessary part of the app state that needs to be preserved across app lifecycles, and automatically saves and restores it. LIVEDROID consists of: (i) a static analyzer that reasons about app source code and resource files to pinpoint the program variables and GUI properties that represent the necessary app state, and (ii) a runtime system that manages the state saving and recovering. We implemented LIVEDROID as a plugin in Android Studio and a patching tool for APKs. Our evaluation shows that LIVEDROID can be successfully applied to 966 Android apps. A focused study with 36 Android apps shows that LIVEDROID identifies app state much more precisely than an existing solution that includes all mutable program variables but ignores GUI properties. As a result, on average, LIVEDROID is able to reduce the costs of state saving and restoring by 16.6X (1.7X - 141.1X) and 9.5X (1.1X - 43.8X), respectively. Furthermore, compared with the manual state handling performed by developers, our analysis reveals a set of 46 issues due to incomplete state saving/restoring, all of which can be successfully eliminated by LIVEDROID.
C1 [Farooq, Umar; Zhao, Zhijia; Sridharan, Manu] Univ Calif Riverside, Riverside, CA 92521 USA.
   [Neamtiu, Iulian] New Jersey Inst Technol, Newark, NJ 07102 USA.
C3 University of California System; University of California Riverside; New
   Jersey Institute of Technology
RP Farooq, U (corresponding author), Univ Calif Riverside, Riverside, CA 92521 USA.
EM ufaro001@ucr.edu; zhijia@cs.ucr.edu; manu@cs.ucr.edu; ineamtiu@njit.edu
RI Zhao, Zhijia/S-9316-2019
OI Zhao, Zhijia/0000-0002-1646-5967; Farooq, Umar/0000-0001-7229-9847
FU National Science Foundation [CCF-2007024, CNS-1617584]; Google Research
   Award
FX We are grateful to anonymous reviewers for the careful reading of the
   paper, and for many insightful comments and suggestions. This work is
   based upon the work supported in part by National Science Foundation
   Grant No. CCF-2007024, CNS-1617584, and a Google Research Award.
CR Albert E, 2009, ISMM'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P129
   [Anonymous], 2020, SOOT JAV OPT FRAM
   [Anonymous], 2015, P 2015 INT S SOFTWAR, P83
   [Anonymous], 2020, TILEVIEW LIB
   [Anonymous], 2006, COMPILERS PRINCIPLES
   Apple, 2020, PRES YOUR APPS UI LA
   Apple, 2020, RED YOUR APPS MEM US
   Apple, 2020, RED DISK WRIT
   Arijo Niaz., 2011, ACM SIGSOFT SOFTWARE, V36, P329, DOI [10.1145/2160803.2160839, DOI 10.1145/2160803.2160839]
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Bavota G., 2012, 2012 12th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2012), P104, DOI 10.1109/SCAM.2012.20
   Berardinelli L, 2010, LECT NOTES COMPUT SC, V6013, P353, DOI 10.1007/978-3-642-12029-9_25
   Blackshear Sam, 2018, P ACM PROGRAM LANG, V2, P1, DOI DOI 10.1145/3276514
   Bodden Eric, 2012, P ACM SIGPLAN INT WO, P3, DOI DOI 10.1145/2259051.2259052
   De A, 2012, LECT NOTES COMPUT SC, V7313, P665, DOI 10.1007/978-3-642-31057-7_29
   Farooq U, 2018, MOBISYS'18: PROCEEDINGS OF THE 16TH ACM INTERNATIONAL CONFERENCE ON MOBILE SYSTEMS, APPLICATIONS, AND SERVICES, P110, DOI 10.1145/3210240.3210327
   Fourtounis George, 2019, 33 EUR C OBJ OR PROG
   Google, 2020, OV MEM MAN
   Google, 2020, ANDR DEV GUID HANDL
   Google, 2020, JAV SER DES LIB CONV
   Google, 2020, INT
   Google, 2020, ANDR SAV UI STAT
   Google, 2020, ANDR NAT ACT
   Google, 2020, SERV OV
   Google, 2020, ANDR AS TASK
   Google, 2020, ANDR PROC APPL LIF
   Google, 2020, VIEWM OV
   Hsiao CH, 2014, ACM SIGPLAN NOTICES, V49, P326, DOI [10.1145/2666356.2594330, 10.1145/2594291.2594330]
   Hu Cuixiong, 2011, Proceedings of the 6th International Workshop on Automation of Software Test, P77
   Hu G., 2014, P 9 EUR C COMP SYST
   Lebeck Niel, 2020, 2020 USENIX ANN TECH, P873
   Leino KRM, 2004, LECT NOTES COMPUT SC, V3086, P491
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Liang CJM, 2014, PROCEEDINGS OF THE 20TH ANNUAL INTERNATIONAL CONFERENCE ON MOBILE COMPUTING AND NETWORKING (MOBICOM '14), P519, DOI 10.1145/2639108.2639131
   Lillack Max, 2014, Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering, P445, DOI 10.1145/2642937.2643001
   Lin Y, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P341, DOI 10.1145/2635868.2635903
   Liu YP, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1013, DOI 10.1145/2568225.2568229
   Maiya P, 2014, ACM SIGPLAN NOTICES, V49, P316, DOI [10.1145/2666356.2594311, 10.1145/2594291.2594311]
   Muccini H., 2012, 2012 Proceedings of 7th International Workshop on Automation of Software Test (AST 2012), P29, DOI 10.1109/IWAST.2012.6228987
   Okur S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1117, DOI 10.1145/2568225.2568309
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Sahin Cagri., 2014, Proceedings of the 8th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, p36:1, DOI 10.1145/2652524.2652538
   Samak M, 2016, ACM SIGPLAN NOTICES, V51, P430, DOI 10.1145/3022671.2984040
   Samak M, 2015, ACM SIGPLAN NOTICES, V50, P175, DOI [10.1145/2737924.2737998, 10.1145/2813885.2737998]
   Schäfer M, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P71, DOI 10.1145/1985793.1985804
   Schäfer M, 2010, LECT NOTES COMPUT SC, V6183, P225, DOI 10.1007/978-3-642-14107-2_11
   Shan ZY, 2016, ACM SIGPLAN NOTICES, V51, P864, DOI 10.1145/3022671.2984011
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan Manu, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P196, DOI 10.1007/978-3-642-36946-9_8
   Statista, 2020, MOBILE OPERATING SYS
   Statista, 2020, EM SUPP PREV SUIC WO
   Tripp O, 2013, LECT NOTES COMPUT SC, V7793, P210, DOI 10.1007/978-3-642-37057-1_15
   Xu GQ, 2009, LECT NOTES COMPUT SC, V5653, P98
   Yan DC, 2013, PROC INT SYMP SOFTW, P411, DOI 10.1109/ISSRE.2013.6698894
   Yan Dacong, 2011, DEM DRIV CONT SENS A, P155
   Zaeem RN, 2014, 2014 IEEE SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST), P183, DOI 10.1109/ICST.2014.31
NR 56
TC 9
Z9 9
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 160
DI 10.1145/3428228
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900037
OA gold
DA 2024-07-18
ER

PT J
AU Feldman, YMY
   Khyzha, A
   Enea, C
   Morrison, A
   Nanevski, A
   Rinetzky, N
   Shoham, S
AF Feldman, Yotam M. Y.
   Khyzha, Artem
   Enea, Constantin
   Morrison, Adam
   Nanevski, Aleksandar
   Rinetzky, Noam
   Shoham, Sharon
TI Proving Highly-Concurrent Traversals Correct
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrent data structures; traversal; traversal correctness; proof
   framework; linearizability
ID ABSTRACTION
AB Modern highly-concurrent search data structures, such as search trees, obtain multi-core scalability and performance by having operations traverse the data structure without any synchronization. As a result, however, these algorithms are notoriously difficult to prove linearizable, which requires identifying a point in time in which the traversal's result is correct. The problem is that traversing the data structure as it undergoes modifications leads to complex behaviors, necessitating intricate reasoning about all interleavings of reads by traversals and writes mutating the data structure.
   In this paper, we present a general proof technique for proving unsynchronized traversals correct in a significantly simpler manner, compared to typical concurrent reasoning and prior proof techniques. Our framework relies only on sequential properties of traversals and on a conceptually simple and widely-applicable condition about the ways an algorithm's writes mutate the data structure. Establishing that a target data structure satisfies our condition requires only simple concurrent reasoning, without considering interactions of writes and reads. This reasoning can be further simplified by using our framework.
   To demonstrate our technique, we apply it to prove several interesting and challenging concurrent binary search trees: the logical-ordering AVL tree, the Citrus tree, and the full contention-friendly tree. Both the logical-ordering tree and the full contention-friendly tree are beyond the reach of previous approaches targeted at simplifying linearizability proofs.
C1 [Feldman, Yotam M. Y.; Khyzha, Artem; Morrison, Adam; Rinetzky, Noam; Shoham, Sharon] Tel Aviv Univ, Tel Aviv, Israel.
   [Enea, Constantin] Univ Paris, IRIF, Paris, France.
   [Nanevski, Aleksandar] IMDEA Software Inst, Madrid, Spain.
C3 Tel Aviv University; Universite Paris Cite; IMDEA Software Institute
RP Feldman, YMY (corresponding author), Tel Aviv Univ, Tel Aviv, Israel.
EM yotam.feldman@gmail.com; artkhyzha@mail.tau.ac.il; cenea@irif.ir;
   mad@cs.tau.ac.il; nanevski@imdea.org; maon@cs.tau.ac.il;
   sharon.shoham@gmail.com
OI Nanevski, Aleksandar/0000-0002-4851-1075
FU European Union [678177, 724464, 759102]; Spanish MICINN project BOSCO
   [PGC2018-102210-B-I00]; United States-Israel Binational Science
   Foundation (BSF) [2016260]; Len Blavatnik and the Blavatnik Family
   foundation; Blavatnik Interdisciplinary Cyber Research Center at Tel
   Aviv University; Pazy Foundation; Israel Science Foundation (ISF)
   [1996/18, 2005/17, 1810/18]; European Research Council (ERC) [724464,
   759102] Funding Source: European Research Council (ERC)
FX We thank the anonymous referees for their helpful comments. This
   research was partially supported by the European Union's Horizon 2020
   research and innovation program (grant agreement No. 678177, 724464, and
   759102), the Spanish MICINN project BOSCO (PGC2018-102210-B-I00), the
   United States-Israel Binational Science Foundation (BSF) grant No.
   2016260, the Len Blavatnik and the Blavatnik Family foundation, the
   Blavatnik Interdisciplinary Cyber Research Center at Tel Aviv
   University, the Pazy Foundation, and the Israel Science Foundation (ISF)
   grant No. 1996/18, 2005/17, and 1810/18.
CR Abdulla PA, 2013, LECT NOTES COMPUT SC, V7795, P324, DOI 10.1007/978-3-642-36742-7_23
   Amit D, 2007, LECT NOTES COMPUT SC, V4590, P477
   [Anonymous], 2001, DISC
   Arbel M, 2014, PROCEEDINGS OF THE 2014 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC'14), P196, DOI 10.1145/2611462.2611471
   Attiya H, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P31, DOI 10.1145/1706299.1706305
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Bouajjani A, 2017, LECT NOTES COMPUT SC, V10427, P542, DOI 10.1007/978-3-319-63390-9_28
   Bouajjani A, 2015, LECT NOTES COMPUT SC, V9135, P95, DOI 10.1007/978-3-662-47666-6_8
   Bouajjani A, 2013, LECT NOTES COMPUT SC, V7792, P290, DOI 10.1007/978-3-642-37036-6_17
   Bronson Nathan G, 2010, PPOPP 2010
   Brookes S, 2004, LECT NOTES COMPUT SC, V3170, P16
   Brown Trevor, 2014, PPOPP 2014
   Clements AT, 2012, ASPLOS XVII: SEVENTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P199
   Crain T, 2016, PARALLEL PROCESS LET, V26, DOI 10.1142/S0129626416500158
   Crain T, 2013, INT CON DISTR COMP S, P196, DOI 10.1109/ICDCS.2013.42
   Crain T, 2013, LECT NOTES COMPUT SC, V8097, P229, DOI 10.1007/978-3-642-40047-6_25
   David T, 2015, ACM SIGPLAN NOTICES, V50, P631, DOI [10.1145/2775054.2694359, 10.1145/2694344.2694359]
   Desnoyers M, 2012, IEEE T PARALL DISTR, V23, P375, DOI 10.1109/TPDS.2011.159
   Drachsler D, 2014, ACM SIGPLAN NOTICES, V49, P343, DOI [10.1145/2555243.2555269, 10.1145/2692916.2555269]
   Dragoi Cezara, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P174, DOI 10.1007/978-3-642-39799-8_11
   Ellen F, 2010, PODC 2010: PROCEEDINGS OF THE 2010 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P131, DOI 10.1145/1835698.1835736
   Feldman Yotam M. Y., 2018, DISC 2018
   Feldman Yotam M. Y., 2020, PROVING HIGHLY CONCU PROVING HIGHLY CONCU
   Fraser Keir, 2004, Ph.D. Dissertation
   Gramoli V, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI [10.1145/2688500.2688501, 10.1145/2858788.2688501]
   Heller Steve, 2005, OPODIS 2005
   Henzinger Thomas A., 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P242, DOI 10.1007/978-3-642-40184-8_18
   Herlihy M., 2008, ART MULTIPROCESSOR P
   Herlihy Maurice, 2007, SIROCCO 2007
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Howley Shane V, 2012, SPAA 2012
   Jones C. B., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P321
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Krishna S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P181, DOI 10.1145/3385412.3386029
   Krishna S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158125
   Lev-Ari Kfir, 2015, Distributed Computing. 29th International Symposium, DISC 2015. Proceedings: LNCS 9363, P356, DOI 10.1007/978-3-662-48653-5_24
   Lev-Ari K, 2015, LECT NOTES COMPUT SC, V9363, P356, DOI 10.1007/978-3-662-48653-5_24
   Ley-Wild R, 2013, ACM SIGPLAN NOTICES, V48, P561, DOI 10.1145/2480359.2429134
   Liang HJ, 2013, ACM SIGPLAN NOTICES, V48, P459, DOI 10.1145/2499370.2462189
   Mao Yandong, 2012, P 7 ACM EUR C COMP S
   McKenney Paul, 2004, THESIS OGI THESIS OGI
   McKenney Paul E., 1998, PDCS
   Michael M. M., 2002, P 14 ANN ACM S PAR A, P73, DOI DOI 10.1145/564870.564881
   Nanevski A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360587
   Natarajan A, 2014, ACM SIGPLAN NOTICES, V49, P317, DOI [10.1145/2692916.2555256, 10.1145/2555243.2555256]
   O'Hearn PW, 2010, PODC 2010: PROCEEDINGS OF THE 2010 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P85, DOI 10.1145/1835698.1835722
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   OWICKI S, 1976, COMMUN ACM, V19, P279, DOI 10.1145/360051.360224
   Parkinson Matthew, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P297, DOI 10.1145/1190216.1190261
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Raad A, 2015, LECT NOTES COMPUT SC, V9032, P710, DOI 10.1007/978-3-662-46669-8_29
   Ramachandran A, 2015, PROCEEDINGS OF THE 16TH INTERNATIONAL CONFERENCE ON DISTRIBUTED COMPUTING AND NETWORKING, DOI 10.1145/2684464.2684472
   Sergey I, 2016, ACM SIGPLAN NOTICES, V51, P92, DOI 10.1145/3022671.2983999
   Sergey I, 2015, LECT NOTES COMPUT SC, V9032, P333, DOI 10.1007/978-3-662-46669-8_14
   SHASHA D, 1988, ACM T DATABASE SYST, V13, P53, DOI 10.1145/42201.42204
   Triplett Josh., 2011, PROC USENIX ATC, P11
   Tu S, 2013, SOSP'13: PROCEEDINGS OF THE TWENTY-FOURTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P18, DOI 10.1145/2517349.2522713
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Vafeiadis V., 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P129, DOI 10.1145/1122971.1122992
   Vafeiadis V, 2008, THESIS U CAMBRIDGE THESIS U CAMBRIDGE
   Vafeiadis V, 2010, LECT NOTES COMPUT SC, V6174, P450, DOI 10.1007/978-3-642-14295-6_40
   Vafeiadis V, 2009, LECT NOTES COMPUT SC, V5403, P335, DOI 10.1007/978-3-540-93900-9_27
   Vafeiadis Viktor, 2006, UCAMCLTR659 U CAMBR UCAMCLTR659 U CAMBR
   Zhu H, 2015, LECT NOTES COMPUT SC, V9207, P3, DOI 10.1007/978-3-319-21668-3_1
NR 65
TC 6
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 128
DI 10.1145/3428196
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900005
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Häner, T
   Hoefler, T
   Troyer, M
AF Haener, Thomas
   Hoefler, Torsten
   Troyer, Matthias
TI Assertion-Based Optimization of Quantum Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantum computing; quantum circuit optimization
ID ALGORITHMS
AB Quantum computers promise to perform certain computations exponentially faster than any classical device. Precise control over their physical implementation and proper shielding from unwanted interactions with the environment become more difficult as the space/time volume of the computation grows. Code optimization is thus crucial in order to reduce resource requirements to the greatest extent possible. Besides manual optimization, previous work has adapted classical methods such as constant-folding and common subexpression elimination to the quantum domain. However, such classically-inspired methods fail to exploit certain optimization opportunities across subroutine boundaries, limiting the effectiveness of software reuse. To address this insufficiency, we introduce an optimization methodology which employs annotations that describe how subsystems are entangled in order to exploit these optimization opportunities. We formalize our approach, prove its correctness, and present benchmarks: Without any prior manual optimization, our methodology is able to reduce, e.g., the qubit requirements of a 64-bit floating-point subroutine by 34x.
C1 [Haener, Thomas; Hoefler, Torsten] Swiss Fed Inst Technol, Zurich, Switzerland.
   [Troyer, Matthias] Microsoft, Redmond, WA USA.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; Microsoft
RP Häner, T (corresponding author), Swiss Fed Inst Technol, Zurich, Switzerland.
RI Hoefler, Torsten/AAB-7478-2022; Troyer, Matthias/B-7826-2008; Hoefler,
   Torsten/HKF-3023-2023
OI Troyer, Matthias/0000-0002-1469-9444; Hoefler,
   Torsten/0000-0002-1333-9797
FU Microsoft; Swiss National Science Foundation through the National
   Competence Center for Research NCCR QSIT
FX We thank the anonymous referees for their valuable comments and
   suggestions. This work was supported by Microsoft and by the Swiss
   National Science Foundation through the National Competence Center for
   Research NCCR QSIT.
CR Amy M, 2014, IEEE T COMPUT AID D, V33, P1476, DOI 10.1109/TCAD.2014.2341953
   Amy M, 2013, IEEE T COMPUT AID D, V32, P818, DOI 10.1109/TCAD.2013.2244643
   Babbush R, 2016, NEW J PHYS, V18, DOI 10.1088/1367-2630/18/3/033032
   BARENCO A, 1995, PHYS REV A, V52, P3457, DOI 10.1103/PhysRevA.52.3457
   BENNETT CH, 1973, IBM J RES DEV, V17, P525, DOI 10.1147/rd.176.0525
   Bundy A., 1999, AUTOMATION PROOF MAT
   Cao YD, 2013, NEW J PHYS, V15, DOI 10.1088/1367-2630/15/1/013021
   Chong FT, 2017, NATURE, V549, P180, DOI 10.1038/nature23459
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Fowler AG, 2012, PHYS REV A, V86, DOI 10.1103/PhysRevA.86.032324
   Gidney C., 2019, ARXIV190509749
   Gidney C, 2018, QUANTUM-AUSTRIA, V2, DOI 10.22331/q-2018-06-18-74
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Grosse D, 2007, GLSVLSI'07: PROCEEDINGS OF THE 2007 ACM GREAT LAKES SYMPOSIUM ON VLSI, P96
   Grosse D, 2009, IEEE T COMPUT AID D, V28, P703, DOI 10.1109/TCAD.2009.2017215
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Haener T, 2018, LECT NOTES COMPUT SC, V11106, P162, DOI 10.1007/978-3-319-99498-7_11
   Häner T, 2018, QUANTUM SCI TECHNOL, V3, DOI 10.1088/2058-9565/aaa5cc
   Häner T, 2017, QUANTUM INF COMPUT, V17, P673
   Haner Thomas, 2018, ARXIV PREPRINT ARXIV
   Harrow AW, 2009, PHYS REV LETT, V103, DOI 10.1103/PhysRevLett.103.150502
   Hastings MB, 2015, QUANTUM INF COMPUT, V15, P1
   IBM, 2018, Qiskit
   JavadiAbhari A., 2014, Proceedings of the 11th ACM Conference on Computing Frontiers, page, P1, DOI DOI 10.1145/2597917
   Jones NC, 2012, NEW J PHYS, V14, DOI 10.1088/1367-2630/14/11/115023
   Kelly J, 2015, NATURE, V519, P66, DOI 10.1038/nature14270
   Kliuchnikov V, 2013, QUANTUM INF COMPUT, V13, P607
   Kutin Samuel A, 2006, QUANTPH0609001 ARXIV
   Kutin Samuel A, 2007, QUANTPH0701194 ARXIV
   Meuli G, 2018, LECT NOTES COMPUT SC, V11106, P175, DOI 10.1007/978-3-319-99498-7_12
   Nam Y, 2018, NPJ QUANTUM INFORM, V4, DOI 10.1038/s41534-018-0072-4
   Nielsen Michael A., 2010, Quantum Computation and Quantum Information
   Paykin J, 2017, ACM SIGPLAN NOTICES, V52, P846, DOI 10.1145/3093333.3009894
   Reiher M, 2017, P NATL ACAD SCI USA, V114, P7555, DOI 10.1073/pnas.1619152114
   SHOR PW, 1994, AN S FDN CO, P124
   Smith RS., 2016, ARXIV PREPRINT ARXIV
   Steiger DS, 2018, QUANTUM-AUSTRIA, V2, DOI 10.22331/q-2018-01-31-49
   Svore K, 2018, RWDSL2018: PROCEEDINGS OF THE REAL WORLD DOMAIN SPECIFIC LANGUAGES WORKSHOP 2018, DOI 10.1145/3183895.3183901
   Takahashi Yasuhiro, 2010, QUANTUM INFO COMPUT, V10
   Ying MS, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2049706.2049708
NR 40
TC 5
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 133
DI 10.1145/3428201
PG 20
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900010
OA gold, Green Published, Green Accepted
DA 2024-07-18
ER

PT J
AU Marntirosian, K
   Schrijvers, T
   Oliveira, BCDS
   Karachalias, G
AF Marntirosian, Koar
   Schrijvers, Tom
   Oliveira, Bruno C. D. S.
   Karachalias, Georgios
TI Resolution as Intersection Subtyping via Modus Ponens
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE resolution; nested composition; family polymorphism; intersection types;
   coherence; modus ponens
AB Resolution and subtyping are two common mechanisms in programming languages. Resolution is used by features such as type classes or Scala-style implicits to synthesize values automatically from contextual type information. Subtyping is commonly used to automatically convert the type of a value into another compatible type. So far the two mechanisms have been considered independently of each other. This paper shows that, with a small extension, subtyping with intersection types can subsume resolution. This has three main consequences. Firstly, resolution does not need to be implemented as a separate mechanism. Secondly, the interaction between resolution and subtyping becomes apparent. Finally, the integration of resolution into subtyping enables first-class (implicit) environments. The extension that recovers the power of resolution via subtyping is the modus ponens rule of propositional logic. While it is easily added to declarative subtyping, significant care needs to be taken to retain desirable properties, such as transitivity and decidability of algorithmic subtyping, and coherence. To materialize these ideas we develop lambda(MP)(i), a calculus that extends a previous calculus with disjoint intersection types, and develop its metatheory in the Coq theorem prover.
C1 [Marntirosian, Koar; Schrijvers, Tom] Katholieke Univ Leuven, Leuven, Belgium.
   [Oliveira, Bruno C. D. S.] Univ Hong Kong, Hong Kong, Peoples R China.
   [Karachalias, Georgios] Tweag, Paris, France.
C3 KU Leuven; University of Hong Kong
RP Marntirosian, K (corresponding author), Katholieke Univ Leuven, Leuven, Belgium.
EM mardikoh15@gmail.com; bruno@cs.hku.hk; georgios.karachalias@tweag.io
RI dos Santos Oliveira, Bruno Cesar/I-7977-2013; Schrijvers,
   Tom/A-6696-2016
OI Schrijvers, Tom/0000-0001-8771-5559
FU Hong Kong Research Grant Council [17210617, 17209519]; Flemish Fund for
   Scientific Research [G073816N]; KU Leuven [C14/20/079]
FX We are grateful to anonymous reviewers that helped improving the
   presentation of our work. This work has been sponsored by Hong Kong
   Research Grant Council projects number 17210617 and 17209519, Flemish
   Fund for Scientific Research project number G073816N and KU Leuven
   project number C14/20/079.
CR Alpuim J, 2017, LECT NOTES COMPUT SC, V10201, P1, DOI 10.1007/978-3-662-54434-1_1
   Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   Amin Nada, 2012, DEPENDENT OBJECT TYP
   Andreoli J. M., 1992, Journal of Logic and Computation, V2, P297, DOI 10.1093/logcom/2.3.297
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Benzaken V, 2003, ACM SIGPLAN NOTICES, V38, P51, DOI 10.1145/944746.944711
   Bessai Jan, 2016, EXTRACTING FORMALLY
   Bessai Jan, 2014, ITRS EPTCS, V177, P79
   Bi X, 2019, LECT NOTES COMPUT SC, V11423, P381, DOI 10.1007/978-3-030-17184-1_14
   Bi Xuan, 2018, ECOOP, DOI [10.4230/LIPIcs.ECOOP.2018.22, DOI 10.4230/LIPICS.ECOOP.2018.22]
   Biernacki D., 2015, LEIBNIZ INT P INFORM, V38, P107
   Bottu GJ, 2017, ACM SIGPLAN NOTICES, V52, P148, DOI 10.1145/3156695.3122967
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   BREAZUTANNEN V, 1991, INFORM COMPUT, V93, P172, DOI 10.1016/0890-5401(91)90055-7
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   Castagna G., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P182, DOI 10.1145/141471.141537
   Chen G., 2003, SIGPLAN Notices, V38, P150, DOI 10.1145/640128.604145
   COPPO M, 1981, Z MATH LOGIK, V27, P45, DOI 10.1002/malq.19810270205
   Curien Pierre-Louis., 1994, Theoretical aspects of object-oriented programming, P247
   Davies R, 2000, ACM SIGPLAN NOTICES, V35, P198, DOI 10.1145/357766.351259
   Devriese D, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Dunfield J, 2015, ACM SIGPLAN NOTICES, V50, P256, DOI [10.1145/2858949.2784744, 10.1145/2784731.2784744]
   Dunfield J, 2012, ACM SIGPLAN NOTICES, V47, P17, DOI 10.1145/2398856.2364534
   Dunfield J, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P21, DOI 10.1145/1292597.1292602
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Giesl J, 2017, J AUTOM REASONING, V58, P3, DOI 10.1007/s10817-016-9388-y
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   Jeffery A, 2019, SCALA'19: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P1, DOI 10.1145/3337932.3338811
   Kurata T., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P297, DOI 10.1007/BFb0014060
   Laurent O, 2012, FUND INFORM, V121, P203, DOI 10.3233/FI-2012-776
   Liang C, 2009, THEOR COMPUT SCI, V410, P4747, DOI 10.1016/j.tcs.2009.07.041
   Luo ZH, 1999, J LOGIC COMPUT, V9, P105, DOI 10.1093/logcom/9.1.105
   Miller Dale, 1989, UNIFORM PROOFS FDN L
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Odersky Martin, 2017, P ACM PROGR LANG 2 P
   Odersky Martin, 2010, SCALA LANGUAGE SPECI
   Oliveira BCDS, 2016, ACM SIGPLAN NOTICES, V51, P364, DOI 10.1145/3022670.2951945
   Oliveira BCD, 2012, ACM SIGPLAN NOTICES, V47, P35, DOI 10.1145/2345156.2254070
   Oliveira BCDS, 2010, ACM SIGPLAN NOTICES, V45, P341, DOI 10.1145/1932682.1869489
   Pierce B., 1996, Mathematical Structures in Computer Science, V6, P409
   PIERCE B, 1991, THESIS CARNEGIE MELL
   Pierce B. C., 1997, Mathematical Structures in Computer Science, V7, P129, DOI 10.1017/S096012959600223X
   Pierce Benjamin C., 1989, DECISION PROCEDURE S
   Pottinger Garrel, 1980, ESSAYS COMBINATORY L, P561
   RASKIN J, 1974, COMPUT HUMANITIES, V8, P231, DOI 10.1007/BF02402344
   Rehof J, 2011, LECT NOTES COMPUT SC, V6690, P169, DOI 10.1007/978-3-642-21691-6_15
   Reynolds J. C., 1974, Programming Symposium, P408
   REYNOLDS JC, 1991, LECT NOTES COMPUT SC, V526, P675
   Reynolds John C., 1988, Preliminary design of the programming language Forsythe
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Schrijvers T, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000242
   Schwinghammer J, 2009, J FUNCT PROGRAM, V19, P157, DOI 10.1017/S0956796808006886
   Sozeau M, 2008, LECT NOTES COMPUT SC, V5170, P278, DOI 10.1007/978-3-540-71067-7_23
   Statman R, 2015, ELECTRON PROC THEOR, P1, DOI 10.4204/EPTCS.177.1
   VANEMDEN MH, 1976, J ACM, V23, P733, DOI 10.1145/321978.321991
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wadler P, 2015, COMMUN ACM, V58, P75, DOI 10.1145/2699407
   White Leo, 2015, ELECTRON P THEOR COM, V198
   Winant T, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P81, DOI 10.1145/3242744.3242752
NR 60
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 206
DI 10.1145/3428274
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900083
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Sotiropoulos, T
   Chaliasos, S
   Mitropoulos, D
   Spinellis, D
AF Sotiropoulos, Thodoris
   Chaliasos, Stefanos
   Mitropoulos, Dimitris
   Spinellis, Diomidis
TI A Model for Detecting Faults in Build Specifications
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Gradle; Make; parallel builds; incremental builds; JVM-based builds
AB Incremental and parallel builds are crucial features of modern build systems. Parallelism enables fast builds by running independent tasks simultaneously, while incrementality saves time and computing resources by processing the build operations that were affected by a particular code change. Writing build definitions that lead to error-free incremental and parallel builds is a challenging task. This is mainly because developers are often unable to predict the effects of build operations on the file system and how different build operations interact with each other. Faulty build scripts may seriously degrade the reliability of automated builds, as they cause build failures, and non-deterministic and incorrect outputs.
   To reason about arbitrary build executions, we present Buildrs, a generally-applicable model that takes into account the specification (as declared in build scripts) and the actual behavior (low-level file system operation) of build operations. We then formally define different types of faults related to incremental and parallel builds in terms of the conditions under which a file system operation violates the specification of a build operation. Our testing approach, which relies on the proposed model, analyzes the execution of single full build, translates it into Buildrs, and uncovers faults by checking for corresponding violations.
   We evaluate the effectiveness, efficiency, and applicability of our approach by examining 612 Make and Gradle projects. Notably, thanks to our treatment of build executions, our method is the first to handle JVM-oriented build systems. The results indicate that our approach is (1) able to uncover several important issues (247 issues found in 47 open-source projects have been confirmed arid fixed by the upstream developers), and (2) much faster than a state-of-the-art tool for Make builds (the median and average speedup is 39x and 74x respectively).
C1 [Sotiropoulos, Thodoris; Chaliasos, Stefanos; Mitropoulos, Dimitris; Spinellis, Diomidis] Athens Univ Econ & Business, Athens, Greece.
C3 Athens University of Economics & Business
RP Sotiropoulos, T (corresponding author), Athens Univ Econ & Business, Athens, Greece.
EM theosotr@aueb.gr; schaliasos@aueb.gr; dimitro@aueb.gr; dds@aueb.gr
RI Spinellis, Diomidis/E-3600-2010
OI Spinellis, Diomidis/0000-0003-4231-1897
FU European Union [825328]
FX We thank Stefanos Georgiou for helping us during the experimental setup
   of the work. We also thank Vaggelis Atlidakis and the anonymous
   reviewers for their constructive feedback. This work has received
   funding from the European Union's Horizon 2020 research and innovation
   programme under grant agreement No. 825328.
CR Adams Bram, 2007, 2007 IEEE International Conference on Software Maintenance, P114, DOI 10.1109/ICSM.2007.4362624
   Al-Kofahi J, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P600, DOI 10.1145/2591062.2591135
   Ammons G., 2006, P 2006 INT WORKSH DY, P81, DOI [10.1145/1138912.1138928, DOI 10.1145/1138912.1138928]
   Bazel, 2020, BUILD TEST SOFTW AN
   Bezemer CP, 2017, EMPIR SOFTW ENG, V22, P3117, DOI 10.1007/s10664-017-9510-8
   Bruening D, 2012, ACM SIGPLAN NOTICES, V47, P133, DOI 10.1145/2365864.2151043
   Calcote J, 2020, AUTOTOOLS PRACTITION
   Celik A, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P809, DOI 10.1145/3106237.3106297
   Celik A, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P643, DOI 10.1145/2950290.2950358
   Christakis M, 2014, LECT NOTES COMPUT SC, V8442, P643, DOI 10.1007/978-3-319-06410-9_43
   Coetzee D., 2011, 2011 USENIX ANN TECH
   Dashenkov D, 2020, GRADLE TASK ORDERING
   Debian, 2020, ULT
   Debian, 2020, SBUILD
   Derr E, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2187, DOI 10.1145/3133956.3134059
   Erdweg S, 2015, ACM SIGPLAN NOTICES, V50, P89, DOI [10.1145/2814270.2814316, 10.1145/2858965.2814316]
   FELDMAN SI, 1979, SOFTWARE PRACT EXPER, V9, P255, DOI 10.1002/spe.4380090402
   Gligoric M., 2015, P 2015 INT S SOFTWAR, P211, DOI 10.1145/2771783.2771784
   Gligoric M, 2014, ACM SIGPLAN NOTICES, V49, P599, DOI [10.1145/2660193.2660239, 10.1145/2714064.2660239]
   GNU Make, 2020, GEN PRER AUT
   GNU Make, 2020, HANDL TOOLS PROD MAN
   Gradle Inc, 2020, DEV CUST GRADL PLUG
   Gradle Inc, GRADL VS MAV PERF CO
   Gradle Inc, 2020, BUILD CACH
   Greene Sterling, 2015, Introducing Incremental Build Support
   Hassan F, 2017, INT SYMP EMP SOFTWAR, P38, DOI 10.1109/ESEM.2017.11
   Hilton M, 2016, IEEE INT CONF AUTOM, P426, DOI 10.1145/2970276.2970358
   Karanpuria R., 2018, KOTLIN PROGRAMMING C
   Konat G, 2018, IEEE INT CONF AUTOM, P76, DOI 10.1145/3238147.3238196
   Licker N, 2019, PROC INT CONF SOFTW, P1234, DOI 10.1109/ICSE.2019.00125
   Martin Ken, 2010, MASTERING CMAKE CROS
   McDougall R., 2006, Solaris Performance and Tools: DTrace and MDB Techniques for Solaris 10 and OpenSolaris
   McIntosh S, 2015, EMPIR SOFTW ENG, V20, P1587, DOI 10.1007/s10664-014-9324-x
   McIntosh S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P141, DOI 10.1145/1985793.1985813
   Morgenthaler J.D., 2012, Proc. of the 3rd Int'l Workshop on Managing Technical Debt (MTD), P1, DOI DOI 10.1109/MTD.2012.6225994
   Nethercote N, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P89, DOI 10.1145/1250734.1250746
   Pelgrims K, 2015, GRADLE ANDROID
   Pennarun B. A. Avery, 2020, DEBIAN POPULARITY CO
   Ren ZL, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P527, DOI 10.1109/ASE.2019.00056
   Ren ZL, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P71, DOI 10.1145/3180155.3180224
   Rodriguez R., 1986, USENIX Association Summer Conference Proceedings, Atlanta 1986, P72
   Scott RG, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133897
   Sotiropoulos T, 2020, PROC INT CONF SOFTW, P26, DOI 10.1145/3377811.3380384
   Tamrawi A, 2012, IEEE INT CONF AUTOM, P366, DOI 10.1145/2351676.2351749
   Vakilian M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P123, DOI 10.1109/ICSE.2015.34
   vander Burg S., 2014, P 29 ACM IEEE INT C, P731, DOI [10.1145/2642937.2643013, DOI 10.1145/2642937.2643013]
   Visser Joost, 2016, BUILDING SOFTWARE TE
   Wang KY, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P233, DOI 10.1145/3180155.3180254
   Zhang LM, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P199, DOI 10.1145/3180155.3180198
NR 49
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 144
DI 10.1145/3428212
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900021
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Matsuda, K
   Wang, M
AF Matsuda, Kazutaka
   Wang, Meng
TI SPARCL: A Language for Partially-Invertible Computation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE reversible computation; linear types
ID PARTIAL INVERSION
AB Invertibility is a fundamental concept in computer science, with various manifestations in software development (serializer/deserializer, parser/printer, redo/undo, compressor/decompressor, and so on). Full invertibility necessarily requires bijectivity, but the direct approach of composing bijective functions to develop invertible programs is too restrictive to be useful. In this paper, we take a different approach by focusing on partially-invertible functions functions that become invertible if some of their arguments are fixed. The simplest example of such is addition, which becomes invertible when fixing one of the operands. More involved examples include entropy-based compression methods (e.g., Huffman coding), which carry the occurrence frequency of input symbols (in certain formats such as Huffman tree), and fixing this frequency information makes the compression methods invertible.
   We develop a language SPARCL for programming such functions in a natural way, where partial-invertibility is the norm and bijectivity is a special case, hence gaining significant expressiveness without compromising correctness. The challenge in designing such a language is to allow ordinary programming (the "partially" part) to interact with the invertible part freely, and yet guarantee invertibility by construction. The language SPARCL is linear-typed, and has a type constructor to distinguish data that are subject to invertible computation' and those that are not. We present the syntax, type system, and semantics of the language, and prove that SPARCL correctly guarantees invertibility for its programs. We demonstrate the expressiveness of SPARCL with examples including tree rebuilding from preorder and inorder traversals and Huffman coding.
C1 [Matsuda, Kazutaka] Tohoku Univ, Sendai, Miyagi, Japan.
   [Wang, Meng] Univ Bristol, Bristol BS8 1TH, Avon, England.
   [Matsuda, Kazutaka] Tohoku Univ, Aoba Ku, 6-3-09 Aramaki, Sendai, Miyagi, Japan.
C3 Tohoku University; University of Bristol; Tohoku University
RP Matsuda, K (corresponding author), Tohoku Univ, Sendai, Miyagi, Japan.; Matsuda, K (corresponding author), Tohoku Univ, Aoba Ku, 6-3-09 Aramaki, Sendai, Miyagi, Japan.
EM kztk@ecei.tohoku.ac.jp; meng.wang@bristol.ac.uk
OI Wang, Meng/0000-0001-7780-630X
FU JSPS KAKENHI [15H02681, 19K11892, 20H04161]; JSPS Bilateral Program
   [JPJSBP120199913]; EPSRC Grant EXHIBIT: Expressive High-Level Languages
   for Bidirectional Transformations [EP/T008911/1]; Royal Society
   [IES\R3\170104]; Kayamori Foundation of Informational Science
   Advancement; EPSRC [EP/T008911/1] Funding Source: UKRI; Grants-in-Aid
   for Scientific Research [15H02681, 20H04161, 19K11892] Funding Source:
   KAKEN
FX We thank the IFIP 2.1 members for their critical but constructive
   comments on a preliminary version of this research, and Samantha
   Frohlich for her helpful suggestions and comments on the presentation of
   this paper. We also thank the anonymous reviewers of ICFP 2020 for their
   constructive comments. This work was partially supported by JSPS KAKENHI
   Grant Numbers 15H02681, 19K11892 and 20H04161, JSPS Bilateral Program,
   Grant Number JPJSBP120199913, the Kayamori Foundation of Informational
   Science Advancement, EPSRC Grant EXHIBIT: Expressive High-Level
   Languages for Bidirectional Transformations (EP/T008911/1), and Royal
   Society Grant Bidirectional Compiler for Software Evolution
   (IES\R3\170104).
CR Abel A, 2014, ELECTRON P THEOR COM, P51, DOI 10.4204/EPTCS.153.4
   Abramov S, 2007, LECT NOTES COMPUT SC, V4378, P27
   Abramsky S, 2005, THEOR COMPUT SCI, V347, P441, DOI 10.1016/j.tcs.2005.07.002
   Abramsky S., 2002, Mathematical Structures in Computer Science, V12, P625, DOI 10.1017/S0960129502003730
   Almendros-Jiménez JM, 2007, LECT NOTES COMPUT SC, V4449, P253
   Altenkirch T, 2005, IEEE S LOG, P249
   Altenkirch T, 2010, LECT NOTES COMPUT SC, V6014, P297, DOI 10.1007/978-3-642-12032-9_21
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Antoy S, 2000, J ACM, V47, P776, DOI 10.1145/347476.347484
   Axelsen HB, 2007, LECT NOTES COMPUT SC, V4649, P56
   BAKER HG, 1992, LECT NOTES COMPUT SC, V637, P507
   BENNETT CH, 1973, IBM J RES DEV, V17, P525, DOI 10.1147/rd.176.0525
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Capretta V, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:1)2005
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   Eppstein D., 1985, IJCAI, P219
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI [10.1145/1232420.1232424, 10.1145/1047659.1040325]
   Frank M.P., 1997, REVERSIBLE COMPUTING
   Gibbons Jeremy, 2002, CALCULATING FUNCTION, P151, DOI [10.1007/3-540-47797-7_5, DOI 10.1007/3-540-47797-7_5]
   Glück R, 2004, LECT NOTES COMPUT SC, V2998, P291
   Glück R, 2003, LECT NOTES COMPUT SC, V2895, P246
   Gluck R., 2016, Comput. Softw, V33, p3_108
   Glück R, 2019, INFORM PROCESS LETT, V147, P32, DOI 10.1016/j.ipl.2019.03.002
   Gomard C. K., 1991, Journal of Functional Programming, V1, P21, DOI 10.1017/S0956796800000058
   Hidaka S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P205
   Hu Zhenjiang., 2004, PARTIAL EVALUATION P, P178
   Hu ZJ, 1997, ACM SIGPLAN NOTICES, V32, P164, DOI 10.1145/258949.258964
   Jacobsen PAH, 2018, LECT NOTES COMPUT SC, V11106, P304, DOI 10.1007/978-3-319-99498-7_21
   James RP, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P73
   Jones MarkP., 1995, Qualified types: theory and practice
   Joyal A, 1996, MATH PROC CAMBRIDGE, V119, P447, DOI 10.1017/S0305004100074338
   Kennedy AJ, 2012, J FUNCT PROGRAM, V22, P529, DOI 10.1017/S0956796812000263
   Kuhnemann A., 2001, Rewriting Techniques and Applications. 12th International Conference, RTA 2001. Proceedings (Lecture Notes in Computer Science Vol.2051), P154
   LANDAUER R, 1961, IBM J RES DEV, V5, P183, DOI 10.1147/rd.53.0183
   LAUNCHBURY J, 1994, SIGPLAN NOTICES, V29, P24, DOI 10.1145/773473.178246
   Lutz C, 1986, Janus: a time-reversible language
   Mac Lane S, 1998, GRAD TEXT M, V5
   Matsuda Kazutaka, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P31, DOI 10.1007/978-3-319-89884-1_2
   Matsuda K., 2012, Higher-Order Symb. Comput, V25, P3
   Matsuda K, 2020, LECT NOTES COMPUT SC, V12075, P456, DOI 10.1007/978-3-030-44914-8_17
   Matsuda K, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P158, DOI 10.1145/3242744.3242758
   Matsuda K, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000096
   Matsuda K, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P62, DOI 10.1145/2784731.2784750
   Matsuda K, 2015, SCI COMPUT PROGRAM, V111, P79, DOI 10.1016/j.scico.2014.07.008
   Matsuda K, 2013, LECT NOTES COMPUT SC, V7792, P101, DOI 10.1007/978-3-642-37036-6_6
   Matsuda K, 2010, LECT NOTES COMPUT SC, V6012, P448, DOI 10.1007/978-3-642-11957-6_24
   Matsuda K, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P47
   Mazurak K, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P77
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Mogensen TAE, 2005, LECT NOTES COMPUT SC, V3676, P189
   Mogensen TA, 2007, LECT NOTES COMPUT SC, V4378, P322
   Mogensen TA, 2008, PEPM'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PARTIAL EVALUATION AND SEMANTICS-BASED PROGRAM MANIPULATION, P21, DOI 10.1145/1328408.1328413
   Moggi E, 1998, LECT NOTES COMPUT SC, V1378, P211, DOI 10.1007/BFb0053552
   Morris JG, 2016, ACM SIGPLAN NOTICES, V51, P448, DOI 10.1145/3022670.2951925
   Mu SC, 2004, LECT NOTES COMPUT SC, V3302, P2
   Mu SC, 2003, LECT NOTES COMPUT SC, V2895, P265
   Mu Shin-Cheng, 2004, C MATH PROGR CONSTR, V3125, DOI 10.1007/978-3-540-27764-4_16
   Nielson Flemming, 1992, 2 LEVEL FUNCTIONAL L, DOI [10.1017/CBO9780511526572, DOI 10.1017/CBO9780511526572]
   Nishida N, 2005, LECT NOTES COMPUT SC, V3467, P264
   Nishida N, 2011, LEIBNIZ INT PR INFOR, V10, P283, DOI 10.4230/LIPIcs.RTA.2011.283
   Paterson Ross, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P300, DOI 10.1007/978-3-642-31113-0_15
   Rendel T, 2010, ACM SIGPLAN NOTICES, V45, P1
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P363, DOI 10.1023/A:1010027404223
   Rios F, 2018, ELECTRON P THEOR COM, P164, DOI 10.4204/EPTCS.266.11
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Salomon D., 2008, A concise introduction to data compression, DOI [10.1007/978-1-84800-072-8, DOI 10.1007/978-1-84800-072-8]
   Selinger P, 2006, MATH STRUCT COMP SCI, V16, P527, DOI 10.1017/S0960129506005238
   Srivastava S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P492
   Tov JA, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P447, DOI 10.1145/1926385.1926436
   Vytiniotis D, 2011, J FUNCT PROGRAM, V21, P333, DOI 10.1017/S0956796811000098
   Wadler P., 1993, Mathematical Foundations of Computer Science 1993. 18th International Symposium, MFCS '93 Proceedings, P185
   Walker D., 2004, ADV TOPICS TYPES PRO, P3
   Wang M, 2013, SCI COMPUT PROGRAM, V78, P2216, DOI 10.1016/j.scico.2012.07.014
   Wei-Ngan Chin, 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P119, DOI 10.1145/154630.154643
   Xi HW, 1998, ACM SIGPLAN NOTICES, V33, P249, DOI 10.1145/277652.277732
   Yokoyama Tetsuo, 2012, Reversible Computation. Third International Workshop, RC 2011. Revised Papers, P14, DOI 10.1007/978-3-642-29517-1_2
   Yokoyama T., 2008, P 5 C COMPUTING FRON, P43, DOI DOI 10.1145/1366230.1366239
   Yokoyama T, 2012, J MULT-VALUED LOG S, V18, P5
NR 78
TC 8
Z9 8
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 118
DI 10.1145/3409000
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700032
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Willis, J
   Wu, N
   Pickering, M
AF Willis, Jamie
   Wu, Nicolas
   Pickering, Matthew
TI Staged Selective Parser Combinators
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE parsers; combinators; meta-programming
ID EFFICIENT
AB Parser combinators are a middle ground between the fine control of hand-rolled parsers and the high-level almost grammar-like appearance of parsers created via parser generators. They also promote a cleaner, compositional design for parsers. Historically, however, they cannot match the performance of their counterparts.
   This paper describes how to compile parser combinators into parsers of hand-written quality. This is done by leveraging the static information present in the grammar by representing it as a tree. However, in order to exploit this information, it will be necessary to drop support for monadic computation since this generates dynamic structure. Selective functors can help recover lost functionality in the absence of monads, and the parser tree can be partially evaluated with staging. This is implemented in a library called Parsley.
C1 [Willis, Jamie; Wu, Nicolas] Imperial Coll London, London, England.
   [Pickering, Matthew] Univ Bristol, Bristol, Avon, England.
C3 Imperial College London; University of Bristol
RP Willis, J (corresponding author), Imperial Coll London, London, England.
EM j.willis19@imperial.ac.uk; n.wu@imperial.ac.uk;
   matthew.pickering@bristol.ac.uk
OI Wu, Nicolas/0000-0002-4161-985X; Willis, Jamie/0000-0003-3834-4741
FU EPSRC [EP/S028129/1]; EPSRC [EP/S028129/1] Funding Source: UKRI
FX The authors would like to dedicate this paper to the memory of Doaitse
   Swierstra. He was an inspiring academic and a wonderful friend that we
   will dearly miss. We would also like to thank all the anonymous
   reviewers for their helpful and constructive comments on draft versions
   of this paper and Jonathan Protzenko for shepherding this paper. This
   work has been supported by EPSRC grant number EP/S028129/1 on lSCOPE:
   Scoped Contextual Operations and Effectsz.
CR Adams MD, 2016, ACM SIGPLAN NOTICES, V51, P224, DOI [10.1145/2908080.2908128, 10.1145/2980983.2908128]
   Adams MD, 2014, ACM SIGPLAN NOTICES, V49, P121, DOI 10.1145/2775050.2633369
   [Anonymous], 2004, P 2004 ACM SIGPLAN W
   [Anonymous], 2006, COMPILERS PRINCIPLES
   Appel A., 2007, COMPILING CONTINUATI
   Benton N, 2005, LECT NOTES COMPUT SC, V3780, P364
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Danvy O, 1996, ACM T PROGR LANG SYS, V18, P730, DOI 10.1145/236114.236119
   Delbianco German Andres, 2012, Trends in Functional Programming. 12th International Symposium, TFP 2011. Revised Selected Papers, P179, DOI 10.1007/978-3-642-32037-8_12
   Devriese D, 2012, J FUNCT PROGRAM, V22, P757, DOI 10.1017/S0956796812000226
   Doaitse Swierstra S., 1996, Advanced Functional Programming. Second International School. Tutorial Text, P184
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Ford B., 2002, THESIS
   Fowler M., 2010, Domain-specific languages
   Gibbons J, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P339, DOI 10.1145/2628136.2628138
   Gibbons J, 2011, ACM SIGPLAN NOTICES, V46, P2, DOI 10.1145/2034574.2034777
   Gill A, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P117
   Gill Andy, 1995, HAPPY PARSER GENERAT
   Hagino T., 1987, PhD thesis
   Henriksen I, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360553
   Hinze Ralf, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P324, DOI 10.1007/978-3-642-31113-0_16
   Hinze R, 2013, P 9 ACM SIGPLAN WORK, P1, DOI DOI 10.1145/2502488.2502496
   Hinze R, 2013, ACM SIGPLAN NOTICES, V48, P209, DOI [10.1145/2500365.2500578, 10.1145/2544174.2500578]
   Hudak P., 1996, ACM COMPUT SURV, V28, P196, DOI [10.1145/242224.242477, DOI 10.1145/242224.242477]
   Hutton G., 1992, Journal of Functional Programming, V2, P323, DOI 10.1017/S0956796800000411
   Hutton Graham, 1996, Monadic Parser Combinators
   Jonnalagedda M, 2014, ACM SIGPLAN NOTICES, V49, P637, DOI [10.1145/2660193.2660241, 10.1145/2714064.2660241]
   Kennedy A, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P177
   Kiss Csongor, 2018, P ACM PROGR LANG, DOI [10.1145/3236780, DOI 10.1145/3236780]
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Krishnaswami NR, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P379, DOI 10.1145/3314221.3314625
   LAUNCHBURY J, 1994, SIGPLAN NOTICES, V29, P24, DOI 10.1145/773473.178246
   Leijen D, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P109, DOI 10.1145/331963.331977
   Leijen Daan, 2001, Technical Report
   Ljunglof Peter, 2002, THESIS CHALMERS U TE
   Marlow S, 2014, ACM SIGPLAN NOTICES, V49, P325, DOI 10.1145/2692915.2628144
   Maurer L, 2017, ACM SIGPLAN NOTICES, V52, P482, DOI [10.1145/3062341.3062380, 10.1145/3140587.3062380]
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   McBride Conor, 2011, J FUNCT PROGRAM
   MCCRACKEN N, 1984, LECT NOTES COMPUT SC, V173, P301
   Mokhov A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341694
   Morrisett G, 2002, J FUNCT PROGRAM, V12, P43, DOI 10.1017/S0956796801004178
   Rompf T, 2011, ACM SIGPLAN NOTICES, V46, P127, DOI 10.1145/1942788.1868314
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Swierstra SD, 2009, LECT NOTES COMPUT SC, V5520, P252, DOI 10.1007/978-3-642-03153-3_6
   Taha W., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P203, DOI 10.1145/258994.259019
   Uustalu T., 1999, Informatica, V10, P5
   Viera M, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P63
   Voigtländer J, 2008, LECT NOTES COMPUT SC, V5133, P388
   WADLER P, 1985, LECT NOTES COMPUT SC, V201, P113
   Willis J, 2018, PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA (SCALA '18), P24, DOI 10.1145/3241653.3241656
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Yallop J, 2019, PROCEEDINGS OF THE 2019 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM '19), P75, DOI 10.1145/3294032.3294078
   Yallop J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110273
NR 54
TC 9
Z9 10
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 120
DI 10.1145/3409002
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700034
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Kavvos, GA
   Morehouse, E
   Licata, DR
   Danner, N
AF Kavvos, G. A.
   Morehouse, Edward
   Licata, Daniel R.
   Danner, Norman
TI Recurrence Extraction for Functional Programs through Call-by-Push-Value
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE recurrence extraction; resource analysis; cost semantics; higher order
   recurrences; denotational semantics; call by push value; general
   recursion
AB The main way of analyzing the complexity of a program is that of extracting and solving a recurrence that expresses its running time in terms of the size of its input. We develop a method that automatically extracts such recurrences from the syntax of higher-order recursive functional programs. The resulting recurrences, which are programs in a call-by-name language with recursion, explicitly compute the running time in terms of the size of the input. In order to achieve this in a uniform way that covers both call-by-name and call-by-value evaluation strategies, we use Call-by-Push-Value (CBPV) as an intermediate language. Finally, we use domain theory to develop a denotational cost semantics for the resulting recurrences.
C1 [Kavvos, G. A.; Morehouse, Edward; Licata, Daniel R.; Danner, Norman] Wesleyan Univ, Dept Math & Comp Sci, 265 Church St, Middletown, CT 06459 USA.
   [Kavvos, G. A.] Aarhus Univ, Dept Comp Sci, Aarhus, Denmark.
C3 Wesleyan University; Aarhus University
RP Kavvos, GA (corresponding author), Wesleyan Univ, Dept Math & Comp Sci, 265 Church St, Middletown, CT 06459 USA.
EM g.a.kavvos@gmail.com; emorehouse@wesleyan.edu; dlicata@wesleyan.edu;
   ndanner@wesleyan.edu
FU Air Force Office of Scientific Research [FA9550-16-1-0292]; National
   Science Foundation [1618203]; Division of Computing and Communication
   Foundations; Direct For Computer & Info Scie & Enginr [1618203] Funding
   Source: National Science Foundation
FX This material is based upon work supported by the Air Force Office of
   Scientific Research under award number FA9550-16-1-0292. Any opinions,
   finding, and conclusions or recommendations expressed in this material
   are those of the author(s) and do not necessarily reflect the views of
   the United States Air Force. Additionally, this material is based upon
   work supported by the National Science Foundation under Grant Number
   1618203.
CR Abramsky S, 2000, INFORM COMPUT, V163, P409, DOI [10.1006/inco.2000.2930, 10.1006/inco2000.2930]
   Abramsky S., 1990, LAZY LAMBDA CALCULUS, P65
   Albert E, 2018, ACM T COMPUT LOG, V19, DOI 10.1145/3274278
   Albert E, 2013, ACM T COMPUT LOG, V14, DOI 10.1145/2499937.2499943
   Albert E, 2012, THEOR COMPUT SCI, V413, P142, DOI 10.1016/j.tcs.2011.07.009
   [Anonymous], 1993, MATH STRUCT COMP SCI, DOI DOI 10.1017/S0960129500000293
   [Anonymous], 1994, Handbook of logic in computer science
   [Anonymous], 1985, LECT PREDOMAINS PART
   [Anonymous], 1992, Semantics of programming languages: structures and techniques
   Avanzini M, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110287
   Avanzini M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P152, DOI 10.1145/2784731.2784753
   Belloch G., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P226, DOI 10.1145/224164.224210
   Benzinger R, 2004, THEOR COMPUT SCI, V318, P79, DOI 10.1016/j.tcs.2003.10.022
   Bird Richard, 2014, THINKING FUNCTIONALL, DOI [10.1017/ CBO9781316092415, DOI 10.1017/CBO9781316092415]
   Danielsson NA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1328438.1328457
   Danner N., 2013, WORKSH PROGR LANG ME, P25
   Danner N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P140, DOI 10.1145/2784731.2784749
   Danner N, 2007, LOG METH COMPUT SCI, V3, DOI 10.2168/LMCS-3(1:9)2007
   Elliott C, 1997, ACM SIGPLAN NOTICES, V32, P263, DOI 10.1145/258949.258973
   Escardó M, 2009, INFORM COMPUT, V207, P411, DOI 10.1016/j.ic.2008.12.003
   Fiore M. P., 1994, AXIOMATIC DOMAIN THE, DOI DOI 10.1017/CBO9780511526565
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   KARP RM, 1994, J ASSOC COMPUT MACH, V41, P1136, DOI 10.1145/195613.195632
   Kim Theodore Seok, 2016, COST SEMANTICS PLOTK
   Kincaid Z, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158142
   Levy P. B., 2006, Higher-Order and Symbolic Computation, V19, P377, DOI 10.1007/s10990-006-0480-6
   Levy Paul Blain, 2004, Call-by-push-value: A Functional/ Imperative Synthesis, V2, DOI DOI 10.1007/978-94-007-0954-6
   Milner R., 1977, Theoretical Computer Science, V4, P1, DOI 10.1016/0304-3975(77)90053-6
   Mitchell John C., 1996, Foundation of computing series
   Niu Yue, 2018, LOGIC PROGRAMMING AR, V57, P543
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pitts A. M., 1994, SOME NOTES INDUCTIVE
   PITTS AM, 1997, SEMANTICS LOGICS COM, P241, DOI DOI 10.1017/CBO9780511526619
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Plotkin Gordon D., 2001, Lecture Notes in Computer Science, V2030, P1, DOI [10.1007/3-540-45315-6_1, DOI 10.1007/3-540-45315-6_1]
   Stoltenberg-Hansen V., 1994, MATH THEORY DOMAINS, DOI DOI 10.1017/CBO9781139166386
   Streicher Thomas., 2006, Domain-theoretic foundations of functional programming
   TARJAN RE, 1985, SIAM J ALGEBRA DISCR, V6, P306, DOI 10.1137/0606031
   WEGBREIT B, 1975, COMMUN ACM, V18, P528, DOI 10.1145/361002.361016
NR 39
TC 6
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 15
DI 10.1145/3371083
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400016
OA gold, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Nanevski, A
   Banerjee, A
   Delbianco, GA
   Fábregas, I
AF Nanevski, Aleksandar
   Banerjee, Anindya
   Delbianco, German Andres
   Fabregas, Ignacio
TI Specifying Concurrent Programs in Separation Logic: Morphisms and
   Simulations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Logics for Concurrency; Floare/Separation Logics; Coq
AB In addition to pre- and postconditions, program specifications in recent separation logics for concurrency have employed an algebraic structure of resources-a form of state transition systems-to describe the state-based program invariants that must be preserved, and to record the permissible atomic changes to program state. In this paper we introduce a novel notion of resource morphism, i.e. structure-preserving function on resources, and show how to effectively integrate it into separation logic, using an associated notion of morphism-specific simulation. We apply morphisms and simulations to programs verified under one resource, to compositionally adapt them to operate under another resource, thus facilitating proof reuse.
C1 [Nanevski, Aleksandar; Banerjee, Anindya; Fabregas, Ignacio] IMDEA Software Inst, Madrid, Spain.
   [Delbianco, German Andres] Univ Paris, IRIF, Paris, France.
C3 IMDEA Software Institute; Universite Paris Cite
RP Nanevski, A (corresponding author), IMDEA Software Inst, Madrid, Spain.
EM aleks.nanevski@imdea.org; anindya.banerjee@imdea.org; gad@irif.fr;
   ignacio.labregas@imdea.org
RI ; Fabregas, Ignacio/W-4154-2017
OI Delbianco, German Andres/0000-0002-2249-1168; Fabregas,
   Ignacio/0000-0002-3045-4180; Banerjee, Anindya/0000-0001-9979-1292
FU Spanish MICINN project [PGC2018-102210-B-I00, TIN2015-67522-C3-3-R];
   European Research Council [ERC2016-COG-724464, ERC2015-STG-678177]; US
   National Science Foundation (NSF)
FX We thank Jesus Dominguez, Constantin Enea, Frantisek Farka, Joakim
   Ohman, Exequiel Rivas Gadda, Mihaela Sighireanu, Ana Sokolova, Gordon
   Stewart, Anton Trunov and Nikita Zyuzin for their comments on the
   various drafts of the paper. We thank the anonymous reviewers from
   OOPSLA'19 PC and AEC for their feedback. This research was partially
   supported by the Spanish MICINN projects BOSCO (PGC2018-102210-B-I00)
   and TRACES (TIN2015-67522-C3-3-R), the European Research Council
   projects Mathador (ERC2016-COG-724464) and FOVEDIS (ERC2015-STG-678177),
   and the US National Science Foundation (NSF). Any opinions, findings,
   and conclusions or recommendations expressed in the material are those
   of the authors and do not necessarily reflect the views of the funding
   agencies.
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Amighi Afshin, 2018, ELECTRON P THEOR COM, DOI [10.4204/eptcs.272.9, DOI 10.4204/EPTCS.272.9]
   ASPNES J, 1994, J ACM, V41, P1020, DOI 10.1145/185675.185815
   Barras B, 2008, LECT NOTES COMPUT SC, V4962, P365, DOI 10.1007/978-3-540-78499-9_26
   Blom Stefan, 2014, V8442, P127, DOI 10.1007/978-3-319-06410-9_9
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Bouajjani Ahmed, 2017, LECT NOTES COMPUT SC, DOI [10.1007/978-3-319-63390-9_28, DOI 10.1007/978-3-319-63390-9_28]
   Brookes S, 2007, THEOR COMPUT SCI, V375, P227, DOI 10.1016/j.tcs.2006.12.034
   Cerone Andrea, 2014, LECT NOTES COMPUT SC, P98, DOI 10.1007/978-3-662-43951-7_9
   COURTOIS PJ, 1971, COMMUN ACM, V14, P667, DOI 10.1145/362759.362813
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   Derrick J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1889997.1890001
   Dinsdale-Young Thomas, 2010, LECT NOTES COMPUT SC, DOI 10.1007/978-3-642-14107-2_24
   Feng Xinyu, 2012, P455, DOI 10.1145/2103656.2103711
   Filipovic I, 2010, THEOR COMPUT SCI, V411, P4379, DOI 10.1016/j.tcs.2010.09.021
   Filipovic I, 2010, FORM ASP COMPUT, V22, P547, DOI 10.1007/s00165-009-0125-8
   Frumin Dan, 2018, LICS18 P 33 ANN ACM, DOI [10.1145/3209108.3209174, DOI 10.1145/3209108.3209174]
   Gilbert G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290316
   Ginzburg Abraham, 1968, ALGEBRAIC THEORY AUT, DOI [10.1016/b978-1-4832-0016-3.50006-8, DOI 10.1016/B978-1-4832-0016-3.50006-8]
   Gotsman Alexey, 2012, LECT NOTES COMPUT SC, DOI 10.1007/978-3-642-32940-1_19
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Hasuo I, 2009, LECT NOTES COMPUT SC, V5728, P64, DOI 10.1007/978-3-642-03741-2_6
   Henzinger Thomas A., 2013, DOI 10.1007/978-3-642-40184-8_18
   Herlihy Maurice, 2008, ART MULTIPROCESSOR P, DOI [10.1108/03684920810907904, DOI 10.1108/03684920810907904]
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Hoare C. A. R., 1972, OPERATING SYSTEMS TE, P61, DOI DOI 10.1145/361227.361234
   Incze Itai, 2010, SPAA 10 P 22 ANN S, DOI 10.1145/1810479.1810540
   Jacobs B., 2016, Cambridge Tracts in Theoretical Computer Science, V59, DOI DOI 10.1017/CBO9781316823187
   Jacobs B, 2011, ACM SIGPLAN NOTICES, V46, P271, DOI 10.1145/1925844.1926417
   Jacobs Bart, 2011, LECT NOTES COMPUT SC, DOI 10.1007/978-3-642-20398-5_4
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Khyzha Artem, 2017, LECT NOTES COMPUT SC, DOI [10.1007/978-3-662-54434-1_24, DOI 10.1007/978-3-662-54434-1_24]
   Ley-Wild R, 2013, ACM SIGPLAN NOTICES, V48, P561, DOI 10.1145/2480359.2429134
   Liang HJ, 2014, IEEE S LOG, DOI 10.1145/2603088.2603123
   Liang HJ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158108
   Liang HJ, 2013, ACM SIGPLAN NOTICES, V48, P459, DOI 10.1145/2499370.2462189
   LYNCH N, 1995, INFORM COMPUT, V121, P214, DOI 10.1006/inco.1995.1134
   MELLORCRUMMEY JM, 1991, ACM T COMPUT SYST, V9, P21, DOI 10.1145/103727.103729
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Nanevski A, 2008, ACM SIGPLAN NOTICES, V43, P229, DOI 10.1145/1411203.1411237
   Nanevski A, 2006, ACM SIGPLAN NOTICES, V41, P62, DOI 10.1145/1160074.1159812
   Nanevski A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360587
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   Nanevski Aleksandar, 2016, LECT NOTES OREGON PR
   Nanevski Aleksandar, 2019, SPECIFYING CONCURREN, DOI [10.5281/zenodo.3365991, DOI 10.5281/ZENODO.3365991]
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   OHearn Peter W., 2001, p1S19, DOI 10.1007/3-540-44802-0_1
   OWICKI S, 1976, COMMUN ACM, V19, P279, DOI 10.1145/360051.360224
   Pfenning Frank, 2001, IEEE S LOG, P221, DOI 10.1109/lics.2001.932499
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Riely James, 2014, LECT NOTES COMPUT SC, P220, DOI 10.1007/978-3-662-43951-7_19
   Rutten JJMM, 2000, THEOR COMPUT SCI, V249, P3, DOI 10.1016/S0304-3975(00)00056-6
   Schellhorn Gerhard, 2012, Computer Aided Verification (CAV), DOI 10.1007/978-3-642-31424-7_21
   Sergey I, 2016, ACM SIGPLAN NOTICES, V51, P92, DOI 10.1145/3022671.2983999
   Sergey I, 2015, LECT NOTES COMPUT SC, V9032, P333, DOI 10.1007/978-3-662-46669-8_14
   Sergey I, 2015, ACM SIGPLAN NOTICES, V50, P77, DOI [10.1145/2813885.2737964, 10.1145/2737924.2737964]
   Sergey Ilya, 2017, EUR C OBJ OR PROGR E, DOI [10.4230/LIPIcs.ECOOP.2017.8, DOI 10.4230/LIPICS.ECOOP.2017.8]
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Svendsen Kasper, 2013, LECT NOTES COMPUT SC, DOI 10.1007/978-3-642-37036-6_11
   Svendsen Kasper, 2011, INT C TYP LAMBD CALC, DOI [10.1007/978-3-642-21691-6_17, DOI 10.1007/978-3-642-21691-6_17]
   Treiber R. K, 1986, Technical Report RJ 5118
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Wilcox James R., 2018, P ACM PROGRAM LANG, DOI [10.1145/3158116, DOI 10.1145/3158116]
NR 68
TC 10
Z9 10
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 161
DI 10.1145/3360587
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500046
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Surbatovich, M
   Jia, LM
   Lucia, B
AF Surbatovich, Milijana
   Jia, Limin
   Lucia, Brandon
TI I/O Dependent Idempotence Bugs in Intermittent Systems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE intermittent computing; energy harvesting
AB Intermittently-powered, energy-harvesting devices operate on energy collected from their environment and must operate intermittently as energy is available. Runtime systems for such devices often rely on checkpoints or redo-logs to save execution state between power cycles, causing arbitrary code regions to re-execute on reboot. Any non-idempotent program behavior behavior that can change on each execution-can lead to incorrect results.
   This work investigates non-idempotent behavior caused by repeating I/O operations, not addressed by prior work. If such operations affect a control statement or address of a memory update, they can cause programs to take different paths or write to different memory locations on re-executions, resulting in inconsistent memory states. We provide the first characterization of input-dependent idempotence bugs and develop IBIS-S, a program analysis tool for detecting such bugs at compile time, and IBIS-D, a dynamic information flow tracker to detect bugs at runtime. These tools use taint propagation to determine the reach of input. IBIS-S searches for code patterns leading to inconsistent memory updates, while IBIS-D detects concrete memory inconsistencies. We evaluate IBIS on embedded system drivers and applications. IBIS can detect I/O-dependent idempotence bugs, giving few (IBIS-S) or no (IBIS-I)) false positives and providing actionable bug reports. These bugs are common in sensor-driven applications and are not fixed by existing intermittent systems.
C1 [Surbatovich, Milijana; Jia, Limin; Lucia, Brandon] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Surbatovich, M (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM milijans@andrew.cmu.edu; liminjia@cmu.edu; blucia@cmu.edu
RI Li, Jiaxi/HTS-3430-2023; li, jia/GVT-7587-2022
OI Li, Jiaxi/0000-0002-8197-8590; Surbatovich,
   Milijana/0009-0004-6948-6683; Jia, Limin/0000-0002-8160-349X
FU NSF [1751029]; Division of Computing and Communication Foundations;
   Direct For Computer & Info Scie & Enginr [1751029] Funding Source:
   National Science Foundation
FX This work was funded in part by NSF Career Award 1751029.
CR Aantjes H, 2017, IEEE INFOCOM SER
   [Anonymous], 2015, EPC RAD FREQ ID PROT
   [Anonymous], 2013, Proceedings of the 2013 ACM SIGSAC Conference on Computer Communications Security, CCS'13, page, DOI DOI 10.1145/2508859.2516703
   [Anonymous], 2017, P 16 ACM IEEE INT C
   [Anonymous], 2010, P USENIX S OP SYST D
   [Anonymous], 2015, Proteus Digital Health
   Arreola AR, 2018, SENSORS-BASEL, V18, DOI 10.3390/s18010172
   Balsamo D, 2016, IEEE T COMPUT AID D, V35, P1968, DOI 10.1109/TCAD.2016.2547919
   Balsamo D, 2015, IEEE EMBED SYST LETT, V7, P15, DOI 10.1109/LES.2014.2371494
   Ben-David N, 2019, SPAA'19: PROCEEDINGS OF THE 31ST ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURESS, 2019, P253, DOI 10.1145/3323165.3323187
   Berthou G, 2017, 2017 GLOBAL INTERNET OF THINGS SUMMIT (GIOTS 2017), P189
   Chen Q, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P1687, DOI 10.1145/3243734.3243823
   Coburn J, 2011, ACM SIGPLAN NOTICES, V46, P105, DOI [10.1145/1961295.1950380, 10.1145/1961296.1950380]
   Colin A, 2018, CC'18: PROCEEDINGS OF THE 27TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P116, DOI 10.1145/3178372.3179525
   Colin A, 2018, ACM SIGPLAN NOTICES, V53, P767, DOI [10.1145/3296957.3173210, 10.1145/3173162.3173210]
   Colin A, 2016, ACM SIGPLAN NOTICES, V51, P514, DOI 10.1145/3022671.2983995
   Colin A, 2016, ACM SIGPLAN NOTICES, V51, P577, DOI 10.1145/2954679.2872409
   Dahiya M, 2018, LECT NOTES COMPUT SC, V10747, P161, DOI 10.1007/978-3-319-73721-8_8
   De Kruijf Marc., 2013, P 2013 IEEE ACM INT, DOI 10.1109/CGO.2013.6495002
   de Kruijf Marc A., 2012, P 33 ACM SIGPLAN C P, DOI DOI 10.1145/2254064.2254120
   Dulloor Subramanya R., 2014, P EUR C COMP SYST EU, P1, DOI [10.1145/2592798.2592814, DOI 10.1145/2592798.2592814]
   Guo XC, 2010, CONF PROC INT SYMP C, P371, DOI 10.1145/1816038.1816012
   Hester J, 2017, PROCEEDINGS OF THE 15TH ACM CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS (SENSYS'17), DOI 10.1145/3131672.3131673
   Hester J, 2017, PROCEEDINGS OF THE 15TH ACM CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS (SENSYS'17), DOI 10.1145/3131672.3131674
   Hicks M, 2017, 44TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA 2017), P228, DOI 10.1145/3079856.3080238
   Huang J, 2014, ACM SIGPLAN NOTICES, V49, P337, DOI [10.1145/2666356.2594315, 10.1145/2594291.2594315]
   Izraelevitz J, 2016, ACM SIGPLAN NOTICES, V51, P427, DOI 10.1145/2954679.2872410
   Jayakumar H, 2014, I CONF VLSI DESIGN, P330, DOI 10.1109/VLSID.2014.63
   Jovanovic N, 2010, J COMPUT SECUR, V18, P861, DOI 10.3233/JCS-2009-0385
   Kang Chih-Kai, 2018, P INT S LOW POW EL D
   Kim S, 2007, PROCEEDINGS OF THE SIXTH INTERNATIONAL SYMPOSIUM ON INFORMATION PROCESSING IN SENSOR NETWORKS, P254, DOI 10.1145/1236360.1236395
   Liu QR, 2018, 2018 51ST ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO), P258, DOI 10.1109/MICRO.2018.00029
   Livshits VB, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 14TH USENIX SECURITY SYMPOSIUM, P271
   Lu S, 2007, IEEE MICRO, V27, P26, DOI 10.1109/MM.2007.5
   Lucia Brandon, 2009, Proceedings of the 2009 42nd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO 2009), P553, DOI 10.1145/1669112.1669181
   Lucia B, 2015, ACM SIGPLAN NOTICES, V50, P575, DOI [10.1145/2737924.2737978, 10.1145/2813885.2737978]
   Lucia B, 2011, ACM SIGPLAN NOTICES, V46, P378, DOI 10.1145/1993316.1993543
   Lucia B, 2010, CONF PROC INT SYMP C, P222, DOI 10.1145/1816038.1815988
   Lucia Brandon, 2016, SIGPLAN NOTICES, V51, DOI [10.1145/3016078.2851149, DOI 10.1145/3016078.2851149]
   Ma KS, 2018, ACM SIGPLAN NOTICES, V53, P782, DOI [10.1145/3173162.3177154, 10.1145/3296957.3177154]
   Ma KS, 2015, INT S HIGH PERF COMP, P526, DOI 10.1109/HPCA.2015.7056060
   Ma KS, 2015, IEEE MICRO, V35, P32, DOI 10.1109/MM.2015.88
   Machiry A, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P1007
   Maeng K, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1101, DOI 10.1145/3314221.3314613
   Maeng K, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133920
   Melicher William., 2018, NDSS
   Ming J, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P65
   Mirhoseini A, 2013, INT CONF PERVAS COMP, P216, DOI 10.1109/PerCom.2013.6526735
   Moraru Iulian., 2013, Proceedings of the First ACM SIGOPS Conference on Timely Results in Operating Systems, P1
   Narayanan D, 2012, ASPLOS XVII: SEVENTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P401
   Nethercote N, 2007, ACM SIGPLAN NOTICES, V42, P89, DOI 10.1145/1273442.1250746
   Nistor A, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P902, DOI 10.1109/ICSE.2015.100
   Nistor A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P562, DOI 10.1109/ICSE.2013.6606602
   Park Sangmin, 2010, P 32 ACM IEEE INT C
   Park Sangmin, 2012, SOFTW TEST VERIF REL, V25
   Park S, 2009, ACM SIGPLAN NOTICES, V44, P25, DOI 10.1145/1508284.1508249
   Pelley S, 2015, IEEE MICRO, V35, P125, DOI 10.1109/MM.2015.46
   Pelley S, 2014, CONF PROC INT SYMP C, P265, DOI 10.1109/ISCA.2014.6853222
   Prabhu P, 2010, ACM SIGPLAN NOTICES, V45, P50, DOI 10.1145/1809028.1806603
   Ramalingam G., 2013, ACM SIGPLANSIGACT S
   Ransford Benjamin, 2011, P 16 INT C ARCH SUPP
   Ruppel E, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1085, DOI 10.1145/3314221.3314583
   Sample AP, 2008, IEEE T INSTRUM MEAS, V57, P2608, DOI 10.1109/TIM.2008.925019
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   Shan Lu, 2007, Operating Systems Review, V41, P103, DOI 10.1145/1323293.1294272
   Shi Y, 2010, ACM SIGPLAN NOTICES, V45, P160, DOI 10.1145/1932682.1869474
   Tan Jethro, 2016, P 35 ANN IEEE INT C
   TI Inc, 2017, TI RTOS REAL TIM OP
   TI Inc, 2017, MSP430FR59XX MIX SIG
   Van der Woude J, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P17
   Yamaguchi F, 2015, P IEEE S SECUR PRIV, P797, DOI 10.1109/SP.2015.54
   Yildirim KS, 2018, SENSYS'18: PROCEEDINGS OF THE 16TH CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS, P41, DOI 10.1145/3274783.3274837
   Zac Manchester, 2015, KICKSAT
   Zhang H., 2011, MOO BATTERYLESS COMP
   Zhang Hong, P 4 WORKSH POW AW CO
   Zhang W, 2013, ACM SIGPLAN NOTICES, V48, P113, DOI 10.1145/2499368.2451129
NR 76
TC 18
Z9 18
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 183
DI 10.1145/3360609
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500068
OA gold
DA 2024-07-18
ER

PT J
AU Cong, YY
   Osvald, L
   Essertel, GM
   Rompf, T
AF Cong, Youyou
   Osvald, Leo
   Essertel, Gregory M.
   Rompf, Tiark
TI Compiling with Continuations, or without? Whatever
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE control operators; CPS translation; compiler intermediate languages
AB What makes a good compiler IR? In the context of functional languages, there has been an extensive debate on the advantages and disadvantages of continuation-passing-style (CPS). The consensus seems to be that some form of explicit continuations is necessary to model jumps in a functional style, but that they should have a 2nd-class status, separate from regular functions, to ensure efficient code generation. Building on this observation, a recent study from PLDI 2017 proposed a direct-style IR with explicit join points, which essentially represent local continuations, i.e., functions that do not return or escape. While this IR can work well in practice, as evidenced by the implementation of join points in the Glasgow Haskell Compiler (GHC), there still seems to be room for improvement, especially with regard to the way continuations are handled in the course of optimization.
   In this paper, we contribute to the CPS debate by developing a novel IR with the following features. First, we integrate a control operator that resembles Felleisen's C, eliminating certain redundant rewrites observed in the previous study. Second, we treat the non-returning and non-escaping aspects of continuations separately, allowing efficient compilation of well-behaved functions defined by the user. Third, we define a selective CPS translation of our IR, which erases control operators while preserving the meaning and typing of programs. These features enable optimizations in both direct style and full CPS, as well as in any intermediate style with selectively exposed continuations. Thus, we change the spectrum of available options from "CPS yes or no" to "as much or as little CPS as you want, when you want it".
C1 [Cong, Youyou] Tokyo Inst Technol, Tokyo, Japan.
   [Osvald, Leo; Essertel, Gregory M.; Rompf, Tiark] Purdue Univ, W Lafayette, IN 47907 USA.
C3 Tokyo Institute of Technology; Purdue University System; Purdue
   University
RP Cong, YY (corresponding author), Tokyo Inst Technol, Tokyo, Japan.
OI Rompf, Tiark/0000-0002-2068-3238
FU NSF [1553471, 1564207]; DOE [DE-SC0018050]; Direct For Computer & Info
   Scie & Enginr; Division of Computing and Communication Foundations
   [1564207, 1553471] Funding Source: National Science Foundation; U.S.
   Department of Energy (DOE) [DE-SC0018050] Funding Source: U.S.
   Department of Energy (DOE)
FX We gratefully acknowledge the anonymous reviewers for their valuable
   feedback, which improved the paper in various ways. This work was
   supported in part by NSF awards 1553471 and 1564207, DOE award
   DE-SC0018050, as well as gifts from Google, Facebook, and VMware.
CR Adams K, 2014, ACM SIGPLAN NOTICES, V49, P777, DOI [10.1145/2714064.2660199, 10.1145/2660193.2660199]
   [Anonymous], 2013, OPTIMIZING DATA STRU
   [Anonymous], 1992, Compiling with Continuations
   Appel AW, 1998, ACM SIGPLAN NOTICES, V33, P17, DOI 10.1145/278283.278285
   Asai K, 2018, PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'18), P40, DOI 10.1145/3162069
   Benton Nick., 1998, P 3 ACM SIGPLAN INT, P129, DOI [10.1145/289423.289435, DOI 10.1145/289423.289435]
   Benton Peter Nicholas, 1993, THESIS U CAMBRIDGE
   Click Cliff, 1995, ACM SIGPLAN NOTICES, V30
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   Downen Paul, 2016, ICFP
   ERSHOV AP, 1958, COMMUN ACM, V1, P3, DOI 10.1145/368892.368907
   FELLEISEN M, 1987, THEOR COMPUT SCI, V52, P205, DOI 10.1016/0304-3975(87)90109-5
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Gerakios P, 2014, SCI COMPUT PROGRAM, V80, P223, DOI 10.1016/j.scico.2013.06.005
   Girard J. Y., 1989, PROOFS TYPES, V7
   Jones Simon L. Peyton, 2002, J FUNCT PROGRAM, V12
   Kalibera Toms., C VIRTUAL EXECUTION, DOI DOI 10.1145/2576195.2576205
   KELSEY RA, 1995, SIGPLAN NOTICES, V30, P13, DOI 10.1145/202530.202532
   Kennedy A, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P177
   Kranz David A., BEST PLDI
   Kranz David A., 1986, SIGPLAN S COMP CONST
   Redondo JM, 2013, J SYST SOFTWARE, V86, P278, DOI 10.1016/j.jss.2012.08.016
   Maurer Luke, 2017, PLDI
   Morandat F, 2012, LECT NOTES COMPUT SC, V7313, P104, DOI 10.1007/978-3-642-31057-7_6
   Nielsen L.R., 2001, ELECTRON NOTES THEOR, V45, P311, DOI 10.1016/S1571-0661(04)80969-1
   Okasaki C., 1994, LISP and Symbolic Computation, V7, P57, DOI 10.1007/BF01019945
   Osvald L, 2016, ACM SIGPLAN NOTICES, V51, P234, DOI 10.1145/3022671.2984009
   Reppy John, 2001, P 3 ACM SIGPLAN WORK, p13S22
   Rompf T, 2011, ACM SIGPLAN NOTICES, V46, P127, DOI 10.1145/1942788.1868314
   Rompf T, 2009, ACM SIGPLAN NOTICES, V44, P317, DOI 10.1145/1631687.1596596
   Rompf Tiark, 2012, THESIS EPFL, DOI [10.5075/epflthesis-5456, DOI 10.5075/EPFLTHESIS-5456]
   Rompf Tiark, 2016, LIST SUCCESSES CAN C, V9600
   Steele Guy L, 1978, RABBIT COMPILER SCHE
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 34
TC 11
Z9 12
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 79
DI 10.1145/3341643
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900002
OA gold
DA 2024-07-18
ER

PT J
AU Andreescu, OF
   Jensen, T
   Lescuyer, S
   Montagu, B
AF Andreescu, Oana F.
   Jensen, Thomas
   Lescuyer, Stephane
   Montagu, Benoit
TI Inferring Frame Conditions with Static Correlation Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Static analysis; Equality analysis; Function summaries; Frame
   conditions; Correlations; Invariant preservation
AB We introduce the abstract domain of correlations to denote equality relations between parts of inputs and outputs of programs. We formalise the theory of correlations, and mechanically verify their semantic properties. We design a static inter-procedural dataflow analysis for automatically inferring correlations for programs written in a first-order language equipped with algebraic data-types and arrays. The analysis, its precision and execution cost, have been evaluated on the code and functional specification of an industrial-size micro-kernel. We exploit the inferred correlations to automatically discharge two thirds of the proof obligations related to the preservation of invariants for this micro-kernel.
C1 [Andreescu, Oana F.] Internet Trust, Paris, France.
   [Jensen, Thomas] INRIA, Rennes, France.
   [Jensen, Thomas; Lescuyer, Stephane; Montagu, Benoit] Prove & Run, Paris, France.
C3 Inria
RP Andreescu, OF (corresponding author), Internet Trust, Paris, France.
EM oana.andreescu@internetoftrust.com; thomas.jensen@inria.fr;
   stephane.lescuyer@provenrun.com; benoit.montagu@provenrun.com
OI Montagu, Benoit/0009-0005-6153-6276
FU Prove Run
FX This material is based upon work developed at Prove & Run, and funded by
   Prove & Run. We thank the anonymous reviewers, and Olivier Delande,
   whose questions and remarks helped improve the presentation of this
   work.
CR Andreescu OF, 2016, LECT NOTES COMPUT SC, V9763, P85, DOI 10.1007/978-3-319-41591-8_7
   Andreescu Oana Fabiana, 2017, THESIS U RENNES 1 THESIS U RENNES 1
   Barrett Clark, 2017, LNCS LNCS, V10227, P212
   BORGIDA A, 1995, IEEE T SOFTWARE ENG, V21, P785, DOI 10.1109/32.469460
   Chang BYE, 2005, LECT NOTES COMPUT SC, V3385, P147
   Conchon S, 2007, ML'07: PROCEEDINGS OF THE 2007 WORKSHOP ON ML, P37
   Cousot P, 2002, LECT NOTES COMPUT SC, V2304, P159
   Das M, 2000, ACM SIGPLAN NOTICES, V35, P35, DOI 10.1145/358438.349309
   Dietsch Daniel, 2018, LNCS LNCS, V11294
   Farzan A, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P57, DOI 10.1109/FMCAD.2015.7542253
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Gulwani S, 2004, LECT NOTES COMPUT SC, V3328, P311
   Hughes J, 2007, LECT NOTES COMPUT SC, V4354, P1
   Inria, 2017, COQ PROOF ASS REF MA
   Jeannet B, 2004, LECT NOTES COMPUT SC, V3148, P246
   Kaki G, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P311, DOI 10.1145/2628136.2628159
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   Kincaid Z, 2017, ACM SIGPLAN NOTICES, V52, P248, DOI [10.1145/3062341.3062373, 10.1145/3140587.3062373]
   KNIGHT K, 1989, COMPUT SURV, V21, P93, DOI 10.1145/62029.62030
   Leavens Gary T, 2006, SIGSOFT Softw. Eng. Notes, V31, P1, DOI [10.1145/1127878.1127884, DOI 10.1145/1127878.1127884]
   Leroy Xavier, 2017, OBJECTIVE CAML SYSTE
   Lescuyer Stephane, 2015, INT WORKSH MILS ARCH INT WORKSH MILS ARCH
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   McCarthy J., 1969, Machine Intelligence, VVol. 4, P463
   Meyer B, 2015, NATO SCI PEAC SECUR, V40, P193, DOI 10.3233/978-1-61499-495-4-193
   NELSON G, 1980, J ACM, V27, P356, DOI 10.1145/322186.322198
   Nielson F., 2010, Principles of Program Analysis
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Vazou Niki, 2018, POPL
   Whaley John, 2002, LNCS LNCS, V2477
NR 31
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 47
DI 10.1145/3290360
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300047
OA gold
DA 2024-07-18
ER

PT J
AU Bae, K
   Lee, J
AF Bae, Kyungmin
   Lee, Jia
TI Bounded Model Checking of Signal Temporal Logic Properties using
   Syntactic Separation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Signal temporal logic; Bounded model checking; Syntactic separation;
   Satisfiability modulo theories (SMT)
AB Signal temporal logic (STL) is a temporal logic formalism for specifying properties of continuous signals. STL is widely used for analyzing programs in cyber-physical systems (CPS) that interact with physical entities. However, existing methods for analyzing STL properties are incomplete even for bounded signals, and thus cannot guarantee the correctness of CPS programs. This paper presents a new symbolic model checking algorithm for CPS programs that is refutationally complete for general STL properties of bounded signals. To address the difficulties of dealing with an infinite state space over a continuous time domain, we first propose a syntactic separation of STL, which decomposes an STL formula into an equivalent formula so that each subformula depends only on one of the disjoint segments of a signal. Using the syntactic separation, an sit model checking problem can be reduced to the satisfiability of a first-order logic formula, which is decidable for CPS programs with polynomial dynamics using satisfiability modulo theories (SKI). Unlike the previous methods, our method can verify the correctness of CPS programs for STL properties up to given bounds.
C1 [Bae, Kyungmin; Lee, Jia] Pohang Univ Sci & Technol, Dept Comp Sci & Engn, 77 Cheongam Ro, Pohang 37673, Gyeongbuk, South Korea.
C3 Pohang University of Science & Technology (POSTECH)
RP Bae, K (corresponding author), Pohang Univ Sci & Technol, Dept Comp Sci & Engn, 77 Cheongam Ro, Pohang 37673, Gyeongbuk, South Korea.
EM kmbae@postech.ac.kr; cee5539@postech.ac.kr
OI Bae, Kyungmin/0000-0002-6430-5175
FU Next-Generation Information Computing Development Program through the
   National Research Foundation of Korea (NRF) - Ministry of Science, ICT
   [2017M3C4A7068175]; Basic Science Research Program through the National
   Research Foundation of Korea (NRF) - Ministry of Education
   [2016R1D1A1B03935275]; POSTECH Basic Science Research Institute; POSTECH
   Information Research Laboratories
FX This work was partly supported by Next-Generation Information Computing
   Development Program through the National Research Foundation of Korea
   (NRF) funded by the Ministry of Science, ICT (No. 2017M3C4A7068175),
   Basic Science Research Program through the National Research Foundation
   of Korea (NRF) funded by the Ministry of Education
   (2016R1D1A1B03935275), POSTECH Basic Science Research Institute, and
   POSTECH Information Research Laboratories.
CR Abbas H, 2013, ACM T EMBED COMPUT S, V12, DOI 10.1145/2465787.2465797
   Althoff M., 2013, P 16 INT C HYBR SYST, P173
   ALUR R, 1994, J ACM, V41, P181, DOI 10.1145/174644.174651
   Alur R, 2015, PRINCIPLES OF CYBER-PHYSICAL SYSTEMS, P1
   Alur R, 1996, J ACM, V43, P116, DOI 10.1145/227595.227602
   Annapureddy Y, 2011, LECT NOTES COMPUT SC, V6605, P254, DOI 10.1007/978-3-642-19835-9_21
   [Anonymous], 2005, We Will Show Them!
   Bae K, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P180, DOI 10.23919/FMCAD.2017.8102258
   Bak S, 2017, LECT NOTES COMPUT SC, V10426, P401, DOI 10.1007/978-3-319-63387-9_20
   Bersani MM, 2016, ACTA INFORM, V53, P171, DOI 10.1007/s00236-015-0229-y
   Bersani MM, 2015, INFORM COMPUT, V245, P72, DOI 10.1016/j.ic.2015.06.007
   Biere A, 2003, ADV COMPUT, V58, P117
   Biere A, 2009, FRONT ARTIF INTEL AP, V185, P457, DOI 10.3233/978-1-58603-929-5-457
   Bouyer P, 2005, LECT NOTES COMPUT SC, V3821, P432, DOI 10.1007/11590156_35
   Cimatti Alessandro, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P52, DOI 10.1007/978-3-662-46681-0_4
   Cimatti A, 2012, PROCEEDINGS OF THE 12TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2012), P187
   Cimatti Alessandro, AAAI C ART INT AAAI AAAI C ART INT AAAI
   Clarke E, 2015, Tools and Algorithms for the Construction and Analysis of Systems-21st International Conference, TACAS 2015, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015, London, UK, April 11-18, P200
   Clarke EM, 1999, MODEL CHECKING, P1
   Cordeiro L, 2012, IEEE T SOFTWARE ENG, V38, P957, DOI 10.1109/TSE.2011.59
   Dang T., 2012, RELIAB COMPUT, V17, P128
   Dang T, 2009, FORM METHOD SYST DES, V34, P183, DOI 10.1007/s10703-009-0066-0
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Deshmukh JV, 2017, FORM METHOD SYST DES, V51, P5, DOI 10.1007/s10703-017-0286-7
   Dokhanchi A, 2015, 2015 ACM/IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR CODESIGN (MEMOCODE), P70, DOI 10.1109/MEMCOD.2015.7340472
   Donze A., 2013, COMPUTER AIDED VERIF
   Donzé A, 2010, LECT NOTES COMPUT SC, V6174, P167, DOI 10.1007/978-3-642-14295-6_17
   Eggers A, 2015, SOFTW SYST MODEL, V14, P121, DOI 10.1007/s10270-012-0295-3
   Fan CC, 2016, LECT NOTES COMPUT SC, V9779, P531, DOI 10.1007/978-3-319-41528-4_29
   Fox M, 2012, J ARTIF INTELL RES, V44, P335, DOI 10.1613/jair.3643
   Fränzle M, 2007, FORM METHOD SYST DES, V30, P179, DOI 10.1007/s10703-006-0031-0
   Frehse G., 2011, COMPUTER AIDED VERIF, P379, DOI [DOI 10.1007/978-3-642-22110-1, 10.1007/978-3-642-22110-1_30]
   Gabbay D.M., 1981, ASPECTS PHILOS LOGIC, P91
   Gao SC, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P105
   Geilen M, 2003, LECT NOTES COMPUT SC, V2725, P394
   Gerth R., 1995, INT C PROTOCOL SPECI, P3
   Girard A, 2006, LECT NOTES COMPUT SC, V3927, P272
   Goldman RP, 2016, LECT NOTES COMPUT SC, V9690, P388, DOI 10.1007/978-3-319-40648-0_29
   Gulwani S, 2008, LECT NOTES COMPUT SC, V5123, P190
   Havelund K., 2004, International Journal on Software Tools for Technology Transfer, V6, P158, DOI 10.1007/s10009-003-0117-6
   Henzinger TA, 1998, J COMPUT SYST SCI, V57, P94, DOI 10.1006/jcss.1998.1581
   Henzinger TA, 2000, NATO ADV SCI I F-COM, V170, P265
   Ho HM, 2014, LECT NOTES COMPUT SC, V8734, P178, DOI 10.1007/978-3-319-11164-3_15
   Hunter P, 2013, IEEE S LOG, P349, DOI 10.1109/LICS.2013.41
   Ishii Daisuke, 2011, International Journal on Software Tools for Technology Transfer, V13, P449, DOI 10.1007/s10009-011-0193-y
   Jaksic S, 2016, LECT NOTES COMPUT SC, V10012, P201, DOI 10.1007/978-3-319-46982-9_13
   Jin X., 2014, P 17 INT C HYBR SYST, P253
   Jovanovic Dejan, 2012, Automated Reasoning. Proceedings 6th International Joint Conference, IJCAR 2012, P339, DOI 10.1007/978-3-642-31365-3_27
   Kamp Johan Anthony Willem., 1968, Tense Logic and the Theory of Linear Order
   KOYMANS R, 1990, REAL-TIME SYST, V2, P255, DOI 10.1007/BF01995674
   LaValle S. M., 2006, Planning algorithms
   Maler O, 2004, LECT NOTES COMPUT SC, V3253, P152, DOI 10.1007/978-3-540-30206-3_12
   Nickovic D, 2007, LECT NOTES COMPUT SC, V4763, P304
   Nickovic D, 2018, LECT NOTES COMPUT SC, V10806, P303, DOI 10.1007/978-3-319-89963-3_18
   Ouaknine J, 2008, LECT NOTES COMPUT SC, V5215, P1, DOI 10.1007/978-3-540-85778-5_1
   Platzer A, 2008, J AUTOM REASONING, V41, P143, DOI 10.1007/s10817-008-9103-8
   Platzer A, 2009, FORM METHOD SYST DES, V35, P98, DOI 10.1007/s10703-009-0079-8
   Prajna S, 2007, IEEE T AUTOMAT CONTR, V52, P1415, DOI 10.1109/TAC.2007.902736
   Raisch J, 1999, LECT NOTES COMPUT SC, V1567, P279
   Raman V., 2015, P 18 INT C HYBRID SY, P239, DOI DOI 10.1145/2728606.2728628
   Roehm H, 2016, LECT NOTES COMPUT SC, V9938, P412, DOI 10.1007/978-3-319-46520-3_26
   Roohi N, 2018, HSCC 2018: PROCEEDINGS OF THE 21ST INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL (PART OF CPS WEEK), P187, DOI 10.1145/3178126.3178140
   Sicun Gao, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P208, DOI 10.1007/978-3-642-38574-2_14
   Sicun Gao, 2012, Automated Reasoning. Proceedings 6th International Joint Conference, IJCAR 2012, P286, DOI 10.1007/978-3-642-31365-3_23
   Tiwari A, 2015, LECT NOTES COMPUT SC, V9206, P504, DOI 10.1007/978-3-319-21690-4_34
   Xin Chen, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P258, DOI 10.1007/978-3-642-39799-8_18
NR 66
TC 15
Z9 17
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 51
DI 10.1145/3290364
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300051
OA gold
DA 2024-07-18
ER

PT J
AU Castro, D
   Hu, R
   Jongmans, SS
   Ng, N
   Yoshida, N
AF Castro, David
   Hu, Raymond
   Jongmans, Sung-Shik
   Ng, Nicholas
   Yoshida, Nobuko
TI Distributed Programming using Role-Parametric Session Types in Go
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE multiparty session types; indexed roles; distributed programming; Go
AB This paper presents a framework for the static specification and safe programming of message passing protocols where the number and kinds of participants are dynamically instantiated.
   We develop the first theory of distributed multiparty session types (MPST) to support parameterised protocols with indexed roles-our framework statically infers the different kinds of participants induced by a protocol definition as role variants, and produces decoupled endpoint projections of the protocol onto each variant. This enables safe MPST-based programming of the parameterised endpoints in distributed settings: each endpoint can be implemented separately by different programmers, using different techniques (or languages). We prove the decidability of role variant inference and well-formedness checking, and the correctness of projection.
   We implement our theory as a toolchain for programming such role-parametric MPST protocols in Go. Our approach is to generate API families of lightweight, protocol- and variant-specific type wrappers for I/O. The APIs ensure a well-typed Go endpoint program (by native Go type checking) will perform only compliant I/O actions w.r.t. the source protocol. We leverage the abstractions of MPST to support the specification and implementation of Go applications involving multiple channels, possibly over mixed transports (e.g., Go channels, TCP), and channel passing via a unified programming interface. We evaluate the applicability and run-time performance of our generated APIs using microbenchmarks and real-world applications.
C1 [Castro, David; Hu, Raymond; Jongmans, Sung-Shik; Ng, Nicholas; Yoshida, Nobuko] Imperial Coll London, Dept Comp, London, England.
   [Jongmans, Sung-Shik] Open Univ Netherlands, Dept Comp Sci, Heerlen, Netherlands.
C3 Imperial College London; Open University Netherlands
RP Castro, D (corresponding author), Imperial Coll London, Dept Comp, London, England.
EM d.castro-perez@imperial.ac.uk; raymond.hu@imperial.ac.uk; ssj@ou.nl;
   nickng@imperial.ac.uk; n.yoshida@imperial.ac.uk
RI Yoshida, Nobuko/AAL-6082-2020
OI Yoshida, Nobuko/0000-0002-3925-8557
FU EU COST Action ARVI [IC1402]; EPSRC [EP/K034413/1, EP/K011715/1,
   EP/L00058X/1, EP/N027833/1, EP/N028201/1]; EPSRC [EP/N027833/1,
   EP/K011715/1, EP/K034413/1] Funding Source: UKRI
FX We thank the anonymous reviewers and Simon Castellan for their feedback.
   This work is partially supported by EU COST Action IC1402 ARVI, EPSRC
   projects EP/K034413/1, EP/K011715/1, EP/L00058X/1, EP/N027833/1 and
   EP/N028201/1.
CR Adameit Manuel, 2017, P LECT NOTES COMPUTE, V10321, p1S16
   Akhmadeev Foat, 2016, WEB CRAWLING AKKA
   Ancona D, 2016, FOUND TRENDS PROGRAM, V3, pI, DOI 10.1561/2500000031
   Austin D., 2004, WEB SERVICES CHOREOG
   Bejleri A, 2010, ELECTRON PROC THEOR, P17, DOI 10.4204/EPTCS.17.2
   BRAND D, 1983, J ACM, V30, P323, DOI 10.1145/322374.322380
   Brunthaler S, 2010, LECT NOTES COMPUT SC, V6183, P429, DOI 10.1007/978-3-642-14107-2_21
   Charalambides M, 2016, SCI COMPUT PROGRAM, V115, P100, DOI 10.1016/j.scico.2015.10.006
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   Coppo M, 2016, MATH STRUCT COMP SCI, V26, P238, DOI 10.1017/S0960129514000188
   Coppo M, 2015, LECT NOTES COMPUT SC, V9104, P146, DOI 10.1007/978-3-319-18941-3_4
   Deniélou PM, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:6)2012
   Denielou Pierre-Malo, 2012, P LECT NOTES COMPUTE, V7211, DOI [10.1007/978-3, DOI 10.1007/978-3]
   Denielou Pierre-Malo, 2013, P PART 2 LECT NOTES
   Gay Simon J., 2010, P 37 ANN ACM SIGPLAN, DOI [10.1145/1706299, DOI 10.1145/1706299]
   Gouy I., 2017, COMPUTER LANGUAGE BE
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Hu Raymond, 2017, P LECT NOTES COMPUTE, V10202
   Hu Raymond, 2016, P LECT NOTES COMPUTE, V9633
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   Kouzapas D, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P146, DOI 10.1145/2967973.2968595
   Lange J, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1137, DOI 10.1145/3180155.3180157
   Lange J, 2015, ACM SIGPLAN NOTICES, V50, P221, DOI [10.1145/2775051.2676964, 10.1145/2676726.2676964]
   Lange Julien, 2017, P 44 ACM SIGPLAN S P
   López HA, 2015, ACM SIGPLAN NOTICES, V50, P280, DOI [10.1145/2858965.2814302, 10.1145/2814270.2814302]
   Neykova R, 2017, CC'17: PROCEEDINGS OF THE 26TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P98, DOI 10.1145/3033019.3033031
   Ng N, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P174, DOI 10.1145/2892208.2892232
   Ng N, 2015, SERV ORIENTED COMPUT, V9, P269, DOI 10.1007/s11761-014-0172-8
   Ng Nicholas, 2015, P LECT NOTES COMPUTE, V9031
   Padovani L, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000289
   Rastogi A, 2014, P IEEE S SECUR PRIV, P655, DOI 10.1109/SP.2014.48
   Samofalov Victor, 2005, JOHN NEUMANN I COMPU, V33
   Scalas A., 2017, 31 EUR C OBJ OR PROG, p24:1, DOI [10.4230/LIPIcs.ECOOP.2017.24, DOI 10.4230/LIPICS.ECOOP.2017.24]
   Shirako J., 2009, P 2009 IEEE INT S PA, P1, DOI [10.1109/IPDPS.2009.5161071, DOI 10.1109/IPDPS.2009.5161071]
   St-Amour Vincent, 2012, P 27 ANN ACM SIGPLAN, V163s178
   Stadtmüller K, 2016, LECT NOTES COMPUT SC, V10017, P116, DOI 10.1007/978-3-319-47958-3_7
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Sulzmann M, 2016, LECT NOTES COMPUT SC, V9618, P194, DOI 10.1007/978-3-319-30000-9_15
   Tov JA, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P447, DOI 10.1145/1926385.1926436
   Viering Malte, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P799, DOI 10.1007/978-3-319-89884-1_28
   Wrigstad Tobias, 2010, P 37 ACM SIGPLAN SIG
   Yoshida Nobuko, 2010, P LECT NOTES COMPUTE, V6014
NR 42
TC 8
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 29
DI 10.1145/3290342
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300029
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Unruh, D
AF Unruh, Dominique
TI Quantum Relational Hoare Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Quantum cryptography; Hoare logics; formal verification
AB We present a logic for reasoning about pairs of interactive quantum programs - quantum relational Hoare logic (qRHL). This logic follows the spirit of probabilistic relational Hoare logic (Barthe et al. 2009) and allows us to formulate how the outputs of two quantum programs relate given the relationship of their inputs. Probabilistic RHL was used extensively for computer-verified security proofs of classical cryptographic protocols. Since pRHL is not suitable for analyzing quantum cryptography, we present qRHL as a replacement, suitable for the security analysis of post-quantum cryptography and quantum protocols. The design of qRHL, poses some challenges unique to the quantum setting, e.g., the definition of equality on quantum registers. Finally, we implemented a tool for verifying proofs in qRHL, and developed several example security proofs in it.
C1 [Unruh, Dominique] Univ Tartu, Tartu, Estonia.
C3 University of Tartu
RP Unruh, D (corresponding author), Univ Tartu, Tartu, Estonia.
EM unruh@ut.ee
FU Estonian Ministry of Education and Research [IUT2-1]; Estonian Centre of
   Exellence in IT (EXCITE) - ERDF; Air Force Office of Scientific Research
   through the project lVerification of quantum cryptographyz (AOARD Grant)
   [FA2386-17-1-4022]; National Science Foundation [DMS-0821725]
FX We thank Gilles Barthe, Tore Vincent Carstens, Francois Dupressoir,
   Benjamin Gregoire, Yangjia Li, Pierre-Yves Strub for valuable
   discussions. This work was supported by institutional research funding
   IUT2-1 of the Estonian Ministry of Education and Research, by the
   Estonian Centre of Exellence in IT (EXCITE) funded by ERDF, and by the
   Air Force Office of Scientific Research through the project
   lVerification of quantum cryptographyz (AOARD Grant FA2386-17-1-4022).
   We also used Sage [Stein et al. 2014] for calculations and experiments,
   and the Sage Cluster funded by National Science Foundation Grant No.
   DMS-0821725.
CR Abadi M, 2002, J CRYPTOL, V15, P103, DOI 10.1007/s00145-001-0014-7
   Ambainis A, 2014, ANN IEEE SYMP FOUND, P474, DOI 10.1109/FOCS.2014.57
   [Anonymous], 2019, LCP ISABELLE 2019
   [Anonymous], 2018, DOM UNR QRHL TOOL PR
   [Anonymous], 2018, DOM UNR
   Ardeshir-Larijani E., 2014, LNCS, P500
   Ardeshir-Larijani E, 2013, LECT NOTES COMPUT SC, V7795, P478, DOI 10.1007/978-3-642-36742-7_33
   Barthe Gilles, 2014, Foundations of Security Analysis and Design VII. FOSAD 2012/2013 Tutorial Lectures: LNCS 8604, P146, DOI 10.1007/978-3-319-10082-1_6
   Barthe G, 2015, LECT NOTES COMPUT SC, V9450, P387, DOI 10.1007/978-3-662-48899-7_27
   Barthe G, 2011, LECT NOTES COMPUT SC, V6841, P71, DOI 10.1007/978-3-642-22792-9_5
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Barthe Gilles, LNCS, V6558
   Barthe Gilles, 2017, P 44 ACM SIGPLAN S P, DOI [10.1145/3009837.3009896, DOI 10.1145/3009837.3009896]
   Basin David A., 2017, 2017753 IACR
   Bellare M, 2006, LECT NOTES COMPUT SC, V4004, P409
   Bellare Mihir, 1994, LNCS, V950
   Bennett Charles H., 1984, COMPUTERS SYSTEMS SI
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Berg Matthias, 2013, THESIS SAARLAND U
   Blanchet B, 2006, P IEEE S SECUR PRIV, P140, DOI 10.1109/SP.2006.1
   Boneh D, 2011, LECT NOTES COMPUT SC, V7073, P41, DOI 10.1007/978-3-642-25385-0_3
   CertiCrypt authors, 2013, CERTICRYPT COMP AID
   Chadha R, 2006, ELECTRON NOTES THEOR, V158, P19, DOI 10.1016/j.entcs.2006.04.003
   CIRELSON BS, 1980, LETT MATH PHYS, V4, P93, DOI 10.1007/BF00417500
   CLAUSER JF, 1969, PHYS REV LETT, V23, P880, DOI 10.1103/PhysRevLett.23.880
   Cleve R, 2004, ANN IEEE CONF COMPUT, P236, DOI 10.1109/CCC.2004.1313847
   CryptoVerif authors, 2018, CRYPTOVERIF CRYPT PR
   D'Hondt E, 2006, MATH STRUCT COMP SCI, V16, P429, DOI 10.1017/S0960129506005251
   DOLEV D, 1983, IEEE T INFORM THEORY, V29, P198, DOI 10.1109/TIT.1983.1056650
   Dominique Unruh, 2018, QRHL TOOL BIN DIS VE
   Feng Y, 2007, THEOR COMPUT SCI, V386, P151, DOI 10.1016/j.tcs.2007.06.011
   Feng Yuan, 2015, LIPIcs, V42, P441, DOI [10.4230/LIPIcs.CONCUR.2015.441, DOI 10.4230/LIPICS.CONCUR.2015.441]
   Fujisaki E, 2004, J CRYPTOL, V17, P81, DOI 10.1007/s00145-002-0204-y
   Fujisaki Eiichiro, 2001, LNCS, V2139
   Kakutani Yoshihiko, 2009, ASIAN 2009, p79S93
   Katz J., 2014, INTRO MODERN CRYPTOG
   Kubota Takahiro, 2012, FCS 12
   Kubota Takahiro, 2013, EPIC SERIES COMPUTIN, V15, p64S69
   Nielsen Michael A., 2010, Quantum Computation and Quantum Information
   Petcher Adam, 2015, Principles of Security and Trust. 4th International Conference, POST 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9036, P53, DOI 10.1007/978-3-662-46666-7_4
   Shor PW, 2000, PHYS REV LETT, V85, P441, DOI 10.1103/PhysRevLett.85.441
   Shoup V, 2002, J CRYPTOL, V15, P223, DOI 10.1007/s00145-002-0133-9
   Stein W. A., 2014, SAGE MATH SOFTWARE V
   Tavala AM, 2011, ELECTRON NOTES THEOR, V270, P175, DOI 10.1016/j.entcs.2011.01.016
   The PG dev team, 2018, PROOF GEN GEN EM INT
   Unruh D, 2015, J ACM, V62, DOI 10.1145/2817206
   Unruh D, 2015, LECT NOTES COMPUT SC, V9057, P755, DOI 10.1007/978-3-662-46803-6_25
   Unruh Dominique, 2018, ARXIV180203188QUANTP
   Unruh Dominique, 2012, LNCS, V7237
   Unruh Dominique, VERIFICATION TOOL QU, DOI [10.1145/3291619, DOI 10.1145/3291619]
   Watrous J, 2009, SIAM J COMPUT, V39, P25, DOI 10.1137/060670997
   Ying MS, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2049706.2049708
   Zhandry M, 2012, LECT NOTES COMPUT SC, V7417, P758
   Zhandry M, 2012, ANN IEEE SYMP FOUND, P679, DOI 10.1109/FOCS.2012.37
   Zhou Li, 2018, ARXIV180310393QUANTP
NR 55
TC 27
Z9 28
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 33
DI 10.1145/3290346
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300033
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Bracevac, O
   Wei, GN
   Jia, SL
   Abeysinghe, S
   Jiang, YX
   Bao, YY
   Rompf, T
AF Bracevac, Oliver
   Wei, Guannan
   Jia, Songlin
   Abeysinghe, Supun
   Jiang, Yuxuan
   Bao, Yuyan
   Rompf, Tiark
TI Graph IRs for Impure Higher-Order Languages
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE intermediate representations; higher-order languages; effects; compilers
ID CODE MOTION; PROGRAMS; INFERENCE
AB Graph-based intermediate representations (IRs) are widely used for powerful compiler optimizations, either interprocedurally in pure functional languages, or intraprocedurally in imperative languages. Yet so far, no suitable graph IR exists for aggressive global optimizations in languages with both effects and higher-order functions: aliasing and indirect control transfers make it difficult to maintain sufficiently granular dependency information for optimizations to be effective. To close this long-standing gap, we propose a novel typed graph IR combining a notion of reachability types to track aliasing with an expressive effect systemto compute precise and granular effect dependencies, while supporting local reasoning and separate compilation. Our high-level graph IR imposes lexical structure to represent structured control flow and nesting, enabling aggressive and yet inexpensive code motion, instruction selection, and other optimizations for impure higher-order programs. We formalize the new graph IR based on a lambda-calculus with a reachability type-and-effect system along with a specification of various optimizations. We present performance case studies for CUDA tensor kernel fusion, symbolic execution of LLVM IR, and SQL query compilation in the Scala LMS compiler framework using the new graph IR. We observe significant speedups of up to 21x.
C1 [Bracevac, Oliver; Wei, Guannan; Jia, Songlin; Abeysinghe, Supun; Jiang, Yuxuan; Rompf, Tiark] Purdue Univ, W Lafayette, IN 47907 USA.
   [Bracevac, Oliver] Galois Inc, Portland, OR 97204 USA.
   [Bao, Yuyan] Augusta Univ, Augusta, GA USA.
C3 Purdue University System; Purdue University; Galois, Inc.; University
   System of Georgia; Augusta University
RP Bracevac, O (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.; Bracevac, O (corresponding author), Galois Inc, Portland, OR 97204 USA.
EM oliver@galois.com; guannanwei@purdue.edu; jia137@purdue.edu;
   tabeysin@purdue.edu; jiang700@purdue.edu; yubao@augusta.edu;
   tiark@purdue.edu
RI Yuxuan, Jiang/GOV-6662-2022
OI Yuxuan, Jiang/0000-0003-1026-8038; Wei, Guannan/0000-0002-3150-2033;
   Rompf, Tiark/0000-0002-2068-3238; Tennakoon Mudiyanselage, Supun Madusha
   Bandara Abeysinghe/0000-0001-6054-2432; Jia,
   Songlin/0009-0008-2526-0438; Bao, Yuyan/0000-0002-3832-3134
FU NSF [1553471, 1564207, 1918483, 1910216]; DOE [DE-SC0018050]
FX A large number of people have contributed to the design of the LMS graph
   IR over the years, and in particular to the system of effect
   dependencies: Nada Amin, Thais Baudon, Kevin J. Brown, James M. Decker,
   Gregory Essertel, Georg Ofenbeck, Alen Stojanov, Arvind K. Sujeeth, Fei
   Wang, and Yushuo Xiao. This work was supported in part by NSF awards
   1553471, 1564207, 1918483, 1910216, DOE award DE-SC0018050, as well as
   gifts from Meta, Google, Microsoft, and VMware.
CR Bao YY, 2023, Arxiv, DOI arXiv:2309.05885
   Bao Yuyan, 2021, P ACM PROGR LANG OOP, V139, P1
   Barany G, 2013, LECT NOTES COMPUT SC, V7791, P21, DOI 10.1007/978-3-642-37051-9_2
   BARENDREGT HP, 1987, LECT NOTES COMPUT SC, V259, P141
   Benton N, 2006, LECT NOTES COMPUT SC, V4279, P114
   Benton N, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P301, DOI 10.1145/1599410.1599447
   Bracevac Oliver, 2023, Technical Report
   Clarke Dave, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P15, DOI 10.1007/978-3-642-36946-9_3
   CLICK C, 1995, SIGPLAN NOTICES, V30, P246, DOI 10.1145/223428.207154
   CLICK C, 1995, SIGPLAN NOTICES, V30, P35, DOI 10.1145/202530.202534
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Cytron R., 1986, 13 ACM SIGACT SIGPLA, P70, DOI DOI 10.1145/512644.512651
   Danvy O, 2000, THEOR COMPUT SCI, V248, P243, DOI 10.1016/S0304-3975(00)00054-2
   Danvy O, 2011, LECT NOTES COMPUT SC, V6564, P1, DOI 10.1007/978-3-642-20551-4_1
   Danvy Olivier., 2004, J. Funct. Log. Program, V2004
   Dolan S, 2017, ACM SIGPLAN NOTICES, V52, P60, DOI 10.1145/3093333.3009882
   Dunfield J, 2021, ACM COMPUT SURV, V54, DOI 10.1145/3450952
   Elliott C, 2003, J FUNCT PROGRAM, V13, P455, DOI 10.1017/S0956796802004574
   Essertel GM, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P799
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Filipovic J, 2015, J SUPERCOMPUT, V71, P3934, DOI 10.1007/s11227-015-1483-z
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Gordon CS, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3450272
   Hagedorn B, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408974
   Hatcliff J., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P458, DOI 10.1145/174675.178053
   Henriksen T, 2017, ACM SIGPLAN NOTICES, V52, P556, DOI [10.1145/3140587.3062354, 10.1145/3062341.3062354]
   JOHNSSON T, 1984, SIGPLAN NOTICES, V19, P58, DOI 10.1145/502949.502880
   JOHNSSON T, 1985, LECT NOTES COMPUT SC, V201, P190
   Jung R, 2021, COMMUN ACM, V64, P144, DOI 10.1145/3418295
   Kennedy R, 1999, ACM T PROGR LANG SYS, V21, P627, DOI 10.1145/319301.319348
   KNOOP J, 1992, SIGPLAN NOTICES, V27, P224, DOI 10.1145/143103.143136
   KNOOP J, 1994, ACM T PROGR LANG SYS, V16, P1117, DOI 10.1145/183432.183443
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lattner C, 2021, INT SYM CODE GENER, P2, DOI 10.1109/CGO51591.2021.9370308
   Leissa R, 2015, INT SYM CODE GENER, P202, DOI 10.1109/CGO.2015.7054200
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Midtgaard J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187672
   Might M, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P305, DOI 10.1145/1806596.1806631
   Might Matthew, 2007, Ph.D. Dissertation
   Morazan Marco T, 2007, Lecture Notes in Computer Science, V5083, P37
   Mossenbock H., 2013, P AS PAC PROGR LANG
   NELSON G, 1980, J ACM, V27, P356, DOI 10.1145/322186.322198
   Neumann T, 2011, PROC VLDB ENDOW, V4, P539, DOI 10.14778/2002938.2002940
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Odersky M, 2001, ACM SIGPLAN NOTICES, V36, P41, DOI 10.1145/373243.360207
   Odersky Martin., 1996, Proceedings of the 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL'96, page, P54
   Paleczny M, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P1
   Parreaux L, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409006
   Peyton Jones SimonL., 1989, FPCA '89: Proceedings of the 4th ACM Conference on Functional Programming Languages and Computer Architecture, P184, DOI 10.1145/99370.99385
   Peyton-Jones Simon, 1987, IMPLEMENTATION FUNCT
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Roesch J, 2018, MAPL'18: PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON MACHINE LEARNING AND PROGRAMMING LANGUAGES, P58, DOI 10.1145/3211346.3211348
   Rompf Tiark, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P318, DOI 10.1007/978-3-319-30936-1_17
   Rompf T, 2011, ACM SIGPLAN NOTICES, V46, P127, DOI 10.1145/1942788.1868314
   Rompf T, 2011, ELECTRON P THEOR COM, P93, DOI 10.4204/EPTCS.66.5
   Rompf T, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P2, DOI 10.1145/2784731.2784760
   Rompf T, 2013, ACM SIGPLAN NOTICES, V48, P497, DOI 10.1145/2480359.2429128
   Rompf Tiark, 2012, Ph. D. Dissertation
   Shaikhha A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341701
   Shivers O, 2004, ACM SIGPLAN NOTICES, V39, P257, DOI 10.1145/989393.989421
   SHIVERS O, 1988, SIGPLAN NOTICES, V23, P164, DOI 10.1145/960116.54007
   Shivers O. G., 1991, THESIS CARNEGIE MELL
   Stadler Lukas, 2014, P ANN IEEE ACM INT S, P165, DOI DOI 10.1145/2544137.2544157
   Steuwer M, 2017, INT SYM CODE GENER, P74, DOI 10.1109/CGO.2017.7863730
   Sujeeth AK, 2014, ACM T EMBED COMPUT S, V13, DOI 10.1145/2584665
   Tahboub RY, 2018, INT CONF MANAGE DATA, P307, DOI 10.1145/3183713.3196893
   Tate R, 2009, ACM SIGPLAN NOTICES, V44, P264, DOI 10.1145/1594834.1480915
   Timany Amin, 2022, A Logical Approach to Type Soundness
   Titzer Ben L., 2015, Digging into the TurboFan JIT
   TPC, 1999, TPC Benchmark H
   TURNER DA, 1979, SOFTWARE PRACT EXPER, V9, P31, DOI 10.1002/spe.4380090105
   Van Horn D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P275
   Visser E, 1999, ACM SIGPLAN NOTICES, V34, P13, DOI 10.1145/291251.289425
   Wadsworth Christopher Peter, 1971, Ph.D. Dissertation
   Wang F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341700
   Wang F, 2019, IEEE INT CONF BIG DA, P3430, DOI 10.1109/BigData47090.2019.9006180
   Wang Fei, 2018, ADV NEURAL INFORM PR, P10201
   Weeks Stephen, 2006, P ACM WORKSH ML 2006, P1
   Wei GN, 2023, Arxiv, DOI arXiv:2307.13844
   Wei GN, 2023, PROC INT CONF SOFTW, P1316, DOI 10.1109/ICSE48619.2023.00116
   Wei GN, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P1495, DOI 10.1145/3468264.3473108
   Wei GN, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428232
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Wrthinger T., 2013, P 2013 ACM INT S NEW, P187, DOI [10.1145/2509578.2509581, DOI 10.1145/2509578.2509581]
   Zerny Ian., 2013, High. Order Symb. Comput., V26, P63
NR 87
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 236
DI 10.1145/3622813
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100016
OA gold
DA 2024-07-18
ER

PT J
AU Iraci, G
   Chuang, CE
   Hu, R
   Ziarek, L
AF Iraci, Grant
   Chuang, Cheng-En
   Hu, Raymond
   Ziarek, Lukasz
TI Validating IoT Devices with Rate-Based Session Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE session types; type systems; rate-based systems
ID LANGUAGE PRIMITIVES; DISCIPLINE; CLOUD
AB We develop a session types based framework for implementing and validating rate-based message passing systems in Internet of Things (IoT) domains. To model the indefinite repetition present in many embedded and IoT systems, we introduce a timed process calculus with a periodic recursion primitive. This allows us to model rate-based computations and communications inherent to these application domains. We introduce a definition of rate based session types in a binary session types setting and a new compatibility relationship, which we call rate compatibility. Programs which type check enjoy the standard session types guarantees as well as rate error freedom - meaning processes which exchanges messages do so at the same rate. Rate compatibility is defined through a new notion of type expansion, a relation that allows communication between processes of differing periods by synthesizing and checking a common superperiod type. We prove type preservation and rate error freedom for our system, and show a decidable method for type checking based on computing superperiods for a collection of processes. We implement a prototype of our type system including rate compatibility via an embedding into the native type system of Rust. We apply this framework to a range of examples from our target domain such as Android software sensors, wearable devices, and sound processing.
C1 [Iraci, Grant; Chuang, Cheng-En; Ziarek, Lukasz] SUNY Buffalo, Buffalo, NY 14068 USA.
   [Hu, Raymond] Queen Mary Univ London, London, England.
C3 State University of New York (SUNY) System; State University of New York
   (SUNY) Buffalo; University of London; Queen Mary University London
RP Iraci, G (corresponding author), SUNY Buffalo, Buffalo, NY 14068 USA.
EM grantira@buffalo.edu; chengenc@buffalo.edu; r.hu@qmul.ac.uk;
   lziarek@buffalo.edu
OI Iraci, Grant/0009-0005-4138-5001
FU National Science Foundation [SHF 2211997, SHF 1749539]; Graduate
   Research Fellowships Program
FX This material is based upon work supported by the National Science
   Foundation under Grant No. SHF 2211997, SHF 1749539, and the Graduate
   Research Fellowships Program.
CR Alam KM, 2017, IEEE ACCESS, V5, P2050, DOI 10.1109/ACCESS.2017.2657006
   Android, 2009, Motion Sensors
   [Anonymous], 1998, Multi-sensor fusion: fundamentals and applications with software
   Balzer S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110281
   Bettini L, 2008, LECT NOTES COMPUT SC, V5201, P418, DOI 10.1007/978-3-540-85361-9_33
   Bluetooth SIG, 2023, Bluetooth SIG. 5.4
   Bocchi Laura, 2014, CONCUR 2014 - Concurrency Theory. 25th International Conference, CONCUR 2014. Proceedings: LNCS 8704, P419, DOI 10.1007/978-3-662-44584-6_29
   Bocchi L, 2019, LECT NOTES COMPUT SC, V11423, P583, DOI 10.1007/978-3-030-17184-1_21
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Chen Ruo Fei, 2022, 36 EUR C OBJ OR PROG, V222, DOI [10.4230/LIPIcs.ECOOP.2022.22, DOI 10.4230/LIPICS.ECOOP.2022.22]
   Collins TF, 2018, ARTECH HSE MOB COMM, P1
   Das A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236786
   FreeRTOS, 2003, FreeRTOS Kernel
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Iraci Grant, 2023, Rate Based Session Types: Rust Implementation, DOI [10.1145/3580415, DOI 10.1145/3580415]
   Jespersen Thomas Bracht Laumann, 2015, P 11 ACM SIGPLAN WOR, P13, DOI DOI 10.1145/2808098.2808100
   Lin J, 2017, IEEE INTERNET THINGS, V4, P1125, DOI 10.1109/JIOT.2017.2683200
   LIU CL, 1973, J ACM, V20, P46, DOI 10.1145/321738.321743
   Madria S, 2014, IEEE SOFTWARE, V31, P70, DOI 10.1109/MS.2013.141
   Maniscalco U, 2017, J AMB INTEL HUM COMP, V8, P69, DOI 10.1007/s12652-016-0350-y
   Martin D, 2021, BUS INFORM SYST ENG+, V63, P315, DOI 10.1007/s12599-021-00689-w
   Munksgaard Philip, 2015, Master's thesis
   Pine64, 2019, PineTime
   QNX, 2001, QNX Neutrino
   Scalas A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290343
   Tao F, 2019, IEEE T IND INFORM, V15, P2405, DOI 10.1109/TII.2018.2873186
   Tegen A, 2019, SENSORS-BASEL, V19, DOI 10.3390/s19030477
   Vallecillo A., 2003, FOCLASA, P439
   Vallecillo A, 2006, FUND INFORM, V73, P583
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
   Warden P., 2020, TINYML MACHINE LEARN
   Wechselberger P, 2013, BIOPROC BIOSYST ENG, V36, P1205, DOI 10.1007/s00449-012-0848-4
   Wouters L., 2019, IACR Transactions on Cryptographic Hardware and Embedded Systems, V2019, P66, DOI [10.46586/tches.v2019.i3.66-85, DOI 10.46586/TCHES.V2019.I3.66-85]
   Yick J, 2008, COMPUT NETW, V52, P2292, DOI 10.1016/j.comnet.2008.04.002
   Yoshida N, 2007, ELECTRON NOTES THEOR, V171, P73, DOI 10.1016/j.entcs.2007.02.056
NR 38
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 278
DI 10.1145/3622854
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100058
OA gold
DA 2024-07-18
ER

PT J
AU Larose, O
   Kaleba, S
   Burchell, H
   Marr, S
AF Larose, Octave
   Kaleba, Sophie
   Burchell, Humphrey
   Marr, Stefan
TI AST vs. Bytecode: Interpreters in the Age of Meta-Compilation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE bytecode; abstract-syntax-tree; language implementation; just-in-time
   compilation; meta-tracing; partial evaluation; comparison; case study;
   interpreters
ID LANGUAGE
AB Thanks to partial evaluation and meta-tracing, it became practical to build language implementations that reach state-of-the-art peak performance by implementing only an interpreter. Systems such as RPython and GraalVM provide components such as a garbage collector and just-in-time compiler in a language-agnostic manner, greatly reducing implementation effort. However, meta-compilation-based language implementations still need to improve further to reach the low memory use and fast warmup behavior that custom-built systems provide. A key element in this endeavor is interpreter performance. Folklore tells us that bytecode interpreters are superior to abstract-syntax-tree (AST) interpreters both in terms of memory use and run-time performance.
   This work assesses the trade-offs between AST and bytecode interpreters to verify common assumptions and whether they hold in the context of meta-compilation systems. We implemented four interpreters, each an AST and a bytecode one using RPython and GraalVM. We keep the difference between the interpreters as small as feasible to be able to evaluate interpreter performance, peak performance, warmup, memory use, and the impact of individual optimizations.
   Our results show that both systems indeed reach performance close to Node.js/V8. Looking at interpreteronly performance, our AST interpreters are on par with, or even slightly faster than their bytecode counterparts. After just-in-time compilation, the results are roughly on par. This means bytecode interpreters do not have their widely assumed performance advantage. However, we can confirm that bytecodes are more compact in memory than ASTs, which becomes relevant for larger applications. However, for smaller applications, we noticed that bytecode interpreters allocate more memory because boxing avoidance is not as applicable, and because the bytecode interpreter structure requires memory, e.g., for a reified stack.
   Our results show AST interpreters to be competitive on top of meta-compilation systems. Together with possible engineering benefits, they should thus not be discounted so easily in favor of bytecode interpreters.
C1 [Larose, Octave; Kaleba, Sophie; Burchell, Humphrey; Marr, Stefan] Univ Kent, Canterbury, Kent, England.
C3 University of Kent
RP Larose, O (corresponding author), Univ Kent, Canterbury, Kent, England.
EM O.Larose@kent.ac.uk; S.Kaleba@kent.ac.uk; H.Burchell@kent.ac.uk;
   S.Marr@kent.ac.uk
RI Marr, Stefan/JXN-7556-2024
OI Marr, Stefan/0000-0001-9059-5180
FU Engineering and Physical Sciences Research Council [EP/V007165/1]; Royal
   Society Industry Fellowship [INF\R1\211001]
FX This work was supported by a grant from the Engineering and Physical
   Sciences Research Council (EP/V007165/1) and a Royal Society Industry
   Fellowship (INF\R1\211001).
CR Anton Ertl M., 2003, The Journal of Instruction-Level Parallelism, V5, P1
   Aycock J, 2003, ACM COMPUT SURV, V35, P97, DOI 10.1145/857076.857077
   Bala V, 2000, ACM SIGPLAN NOTICES, V35, P1, DOI 10.1145/358438.349303
   Barrett E, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133876
   BELL JR, 1973, COMMUN ACM, V16, P370, DOI 10.1145/362248.362270
   Bolz CF, 2015, SCI COMPUT PROGRAM, V98, P408, DOI 10.1016/j.scico.2013.02.001
   Bolz CF, 2013, ACM SIGPLAN NOTICES, V48, P167, DOI [10.1145/2544173.2509531, 10.1145/2509136.2509531]
   Bolz Carl Friedrich, 2009, P 4 WORKSH IMPL COMP, P18, DOI [10.1145/1565824.1565827, DOI 10.1145/1565824.1565827]
   Brunthaler S, 2021, Arxiv, DOI arXiv:2109.02958
   Brunthaler S, 2010, ACM SIGPLAN NOTICES, V45, P1, DOI 10.1145/1899661.1869633
   Brunthaler S, 2010, LECT NOTES COMPUT SC, V6183, P429, DOI 10.1007/978-3-642-14107-2_21
   CHAMBERS C, 1989, SIGPLAN NOTICES, V24, P49, DOI 10.1145/74878.74884
   D'Hondt T, 2008, LECT NOTES COMPUT SC, V5146, P140
   ERTL MA, 1995, SIGPLAN NOTICES, V30, P315, DOI 10.1145/223428.207165
   Futamura Y., 1999, Higher-Order and Symbolic Computation, V12, P381, DOI 10.1023/A:1010095604496
   Gal A., 2006, VEE 2006. Proceedings of the Second International Conference on Virtual Execution Environments, P144
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Grimmer M, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3201898
   Haupt M, 2010, ITICSE 2010: PROCEEDINGS OF THE 2010 ACM SIGCSE ANNUAL CONFERENCE ON INNOVATION AND TECHNOLOGY IN COMPUTER SCIENCE EDUCATION, P18
   HOLZLE U, 1991, LECT NOTES COMPUT SC, V512, P21, DOI 10.1007/BFb0057013
   Humer C, 2015, ACM SIGPLAN NOTICES, V50, P123, DOI 10.1145/2658761.2658776
   Humer Christian, 2022, TRUFFL WORKSH 22
   Izawa Y, 2022, J OBJECT TECHNOL, V21, DOI 10.5381/jot.2022.21.2.a1
   Kaleba Sophie, 2022, P 18 S DYN LANG AUCK, DOI [10.1145/3563834.3567538, DOI 10.1145/3563834.3567538]
   Kalibera Toms., C VIRTUAL EXECUTION, DOI DOI 10.1145/2576195.2576205
   Koparkar C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473596
   Korner Philipp, 2021, On the Performance of Bytecode Interpreters in Prolog, V12560, P41, DOI [10.1007/978-3-030-75333-7_3, DOI 10.1007/978-3-030-75333-7_3]
   Larose Octave., 2023, AST vs. Bytecode: Interpreters in the Age of Meta-Compilation (Artifact), DOI [10.5281/zenodo.8333815, DOI 10.5281/ZENODO.8333815]
   Larose Octave, 2022, MOREVMS 22 WORKSH
   Marr Stefan, 2017, ACM SIGPLAN Notices, V52, P120, DOI 10.1145/3093334.2989232
   Marr Stefan, 2023, Zenodo
   Marr S, 2015, ACM SIGPLAN NOTICES, V50, P821, DOI [10.1145/2814270.2814275, 10.1145/2858965.2814275]
   Niephaus Fabio, 2018, P 13 WORKSH IMPL COM, P30, DOI [10.1145/3242947.3242948, DOI 10.1145/3242947.3242948]
   Ottoni G, 2021, INT SYM CODE GENER, P340, DOI 10.1109/CGO51591.2021.9370314
   Pape T, 2017, SCI COMPUT PROGRAM, V140, P17, DOI 10.1016/j.scico.2016.08.003
   Pape T, 2016, ACM SIGPLAN NOTICES, V51, P104, DOI [10.1145/2816707.2816716, 10.1145/2936313.2816716]
   Pape Tobias, 2021, Doctoral Thesis, DOI [10.25932/publishup-49913, DOI 10.25932/PUBLISHUP-49913]
   Piumarta I, 1998, ACM SIGPLAN NOTICES, V33, P291, DOI 10.1145/277652.277743
   Proebsting T. A., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P322, DOI 10.1145/199448.199526
   Qunaibit Mohaned, 2018, Accelerating DynamicallyTyped Languages on Heterogeneous Platforms Using Guards Optimization, DOI [10.4230/LIPIcs.ECOOP.2018.16, DOI 10.4230/LIPICS.ECOOP.2018.16]
   Shi YH, 2007, ACM T ARCHIT CODE OP, V4, DOI 10.1145/1328195.1328197
   Titzer BL, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563311
   Van de Vanter Michael L., 2018, Art Sci. Eng. Program., V2, P14, DOI DOI 10.22152/PROGRAMMING-JOURNAL.ORG/2018/2/14
   Vollmer Michael, 2017, Compiling Tree Transforms to Operate on Packed Representations, V74, DOI DOI 10.4230/LIPICS.ECOOP.2017.26
   Wimmer C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360610
   Woss Andreas, 2014, P 2014 INT C PRINCIP, P133, DOI DOI 10.1145/2647508.2647517
   Wrthinger T., 2013, P 2013 ACM INT S NEW, P187, DOI [10.1145/2509578.2509581, DOI 10.1145/2509578.2509581]
   Würthinger T, 2013, ACM SIGPLAN NOTICES, V48, P73, DOI 10.1145/2480360.2384587
   Würthinger T, 2017, ACM SIGPLAN NOTICES, V52, P662, DOI [10.1145/3062341.3062381, 10.1145/3140587.3062381]
   Zhang Q, 2022, ACM T ARCHIT CODE OP, V20, DOI 10.1145/3568973
NR 50
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 233
DI 10.1145/3622808
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100013
OA gold
DA 2024-07-18
ER

PT J
AU Abel, A
   Danielsson, NA
   Eriksson, O
AF Abel, Andreas
   Danielsson, Nils Anders
   Eriksson, Oskar
TI A Graded Modal Dependent Type Theory with a Universe and Erasure,
   Formalized
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE graded modal type theory; dependent types; erasure; modalities;
   linearity; formalization
ID POLYMORPHISM; IRRELEVANCE
AB We present a graded modal type theory, a dependent type theory with grades that can be used to enforce various properties of the code. The theory has Pi-types, weak and strong Sigma-types, natural numbers, an empty type, and a universe, and we also extend the theory with a unit type and graded Sigma-types. The theory is parameterized by a modality, a kind of partially ordered semiring, whose elements (grades) are used to track the usage of variables in terms and types. Different modalities are possible. We focus mainly on quantitative properties, in particular erasure: with the erasure modality one can mark function arguments as erasable.
   The theory is fully formalized in Agda. The formalization, which uses a syntactic Kripke logical relation at its core and is based on earlier work, establishes major meta-theoretic properties such as subject reduction, consistency, normalization, and decidability of definitional equality. We also prove a substitution theorem for grade assignment, and preservation of grades under reduction. Furthermore we study an extraction function that translates terms to an untyped lambda-calculus and removes erasable content, in particular function arguments with the "erasable" grade. For a certain class of modalities we prove that extraction is sound, in the sense that programs of natural number type have the same value before and after extraction. Soundness of extraction holds also for open programs, as long as all variables in the context are erasable, the context is consistent, and erased matches are not allowed for weak Sigma-types.
C1 [Abel, Andreas; Danielsson, Nils Anders; Eriksson, Oskar] Chalmers Univ Technol, Dept Comp Sci & Engn, Gothenburg, Sweden.
   [Abel, Andreas; Danielsson, Nils Anders; Eriksson, Oskar] Univ Gothenburg, Gothenburg, Sweden.
C3 Chalmers University of Technology; University of Gothenburg
RP Abel, A (corresponding author), Chalmers Univ Technol, Dept Comp Sci & Engn, Gothenburg, Sweden.; Abel, A (corresponding author), Univ Gothenburg, Gothenburg, Sweden.
EM andreas.abel@gu.se; nad@cse.gu.se; os-kar.eriksson@gu.se
FU Vetenskapsradet (the Swedish Research Council) [2019-04216]; Swedish
   Research Council [2019-04216] Funding Source: Swedish Research Council
FX We would like to thank the anonymous reviewers of this and a previous
   submission for their engaging and valuable feedback. Andreas Abel and
   Oskar Eriksson acknowledge support by Vetenskapsradet (the Swedish
   Research Council) via project 2019-04216 Modal typteori med beroende
   typer (Modal Dependent Type Theory).
CR Abel A, 2006, LECT NOTES COMPUT SC, V3967, P381
   Abel A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408972
   Abel A, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:29)2012
   Abel Andreas, 2023, An Agda Formalization of a Graded Modal Type Theory with a Universe and Erasure, DOI [10.5281/zenodo.8119348, DOI 10.5281/ZENODO.8119348]
   Abel Andreas, 2021, Compiling Programs with Erased Univalence
   Abel Andreas., 2018, 24 INT C TYPES PROOF, P7
   Abel Andreas, 2016, TYPES 2016 TYPES PRO, P5
   Abel Andreas, 2017, PROC ACM PROGRAM LAN, V2, DOI DOI 10.1145/3158111
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Brady Edwin C., 2021, 35 EUROPEAN C OBJECT, V9, DOI 10.4230/LIPIcs. ECOOP.2021.9
   Brunel A, 2014, LECT NOTES COMPUT SC, V8410, P351
   Choudhury P, 2022, LECT NOTES COMPUT SC, V13240, P403, DOI 10.1007/978-3-030-99336-8_15
   Choudhury P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434331
   Cohen C., 2018, LEIBNIZ INT P INFORM, DOI [DOI 10.4230/LIPICS.TYPES.2015.5, 10.4230/LIPIcs]
   Crary K, 2002, J FUNCT PROGRAM, V12, P567, DOI 10.1017/S0956796801004282
   Fu P, 2020, IEEE S LOG, P440, DOI 10.1145/3373718.3394765
   Geuvers H., 1995, Types for Proofs and Programs. International Workshop TYPES '94. Selected Papers, P14
   Ghica DR, 2014, LECT NOTES COMPUT SC, V8410, P331
   Gratzer D, 2021, LOG METH COMPUT SCI, V17, DOI 10.46298/LMCS-17(3:11)2021
   Letouzey P, 2002, LECT NOTES COMPUT SC, V2646, P200
   McBride Conor, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P207, DOI 10.1007/978-3-319-30936-1_12
   Mishra-Linger N, 2008, LECT NOTES COMPUT SC, V4962, P350, DOI 10.1007/978-3-540-78499-9_25
   Moon B, 2021, LECT NOTES COMPUT SC, V12648, P462, DOI 10.1007/978-3-030-72019-3_17
   Orchard D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341714
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Pfenning F, 2001, IEEE S LOG, P221, DOI 10.1109/LICS.2001.932499
   Reed J, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P157
   Rijke E, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:2)2020
   Steffen Martin, 1998, Ph. D. Dissertation
   Stucki Sandro, 2021, Proceedings of the ACM on Programming Languages, V5, DOI 10.1145/3473574
   Tejiscák M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408973
   The Agda Team, 2023, Agda User Manual, Release 2.6.3.
   The Coq Development Team, 2023, The Coq Reference Manual, Release 8.17.1
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Wood J, 2021, ELECTRON P THEOR COM, P195, DOI 10.4204/EPTCS.353.10
NR 37
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 220
DI 10.1145/36078620
PG 35
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900033
DA 2024-07-18
ER

PT J
AU Katsura, H
   Kobayashi, N
   Sato, R
AF Katsura, Hiroyuki
   Kobayashi, Naoki
   Sato, Ryosuke
TI Higher-Order Property-Directed Reachability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Automated Program Verification; Higher-order Functional Programs
ID MODEL-CHECKING; TREES
AB The property-directed reachability (PDR) has been used as a successful method for automated verification of first-order transition systems. We propose a higher-order extension of PDR, called HoPDR, where higher-order recursive functions may be used to describe transition systems. We formalize HoPDR for the validity checking problem for conjunctive aHFL(Z), a higher-order fixpoint logic with integers and greatest fixpoint operators. The validity checking problem can also be viewed as a higher-order extension of the satisfiability problem for Constrained Horn Clauses (CHC), and safety property verification of higher-order programs can naturally be reduced to the validity checking problem. We have implemented a prototype verification tool based on HoPDR and confirmed its effiectiveness. We also compare our HoPDR procedure with the PDR procedure for first-order systems and previous methods for fully automated higher-order program verification.
C1 [Katsura, Hiroyuki; Kobayashi, Naoki; Sato, Ryosuke] Univ Tokyo, Bunkyo Ku, Tokyo 1130033, Japan.
C3 University of Tokyo
RP Katsura, H (corresponding author), Univ Tokyo, Bunkyo Ku, Tokyo 1130033, Japan.
EM katsura@kb.is.s.u-tokyo.ac.jp; koba@is.s.u-tokyo.ac.jp;
   rsato@is.s.u-tokyo.ac.jp
RI Sato, Ryosuke/KCY-8676-2024
OI Sato, Ryosuke/0000-0001-8679-2747; Kobayashi, Naoki/0000-0002-0537-0604
FU JSPS KAKENHI [JP23KJ0546, JP20H05703]; JST SPRING [JPMJSP2108]
FX We would like to thank anonymous referees for useful comments. This work
   was supported by JSPS KAKENHI Grant Numbers JP23KJ0546 and JP20H05703,
   and JST SPRING Grant Number JPMJSP2108.
CR Arie Gurfinkel, 2015, IC3 PDR FRIENDS
   Asada Kazuyuki, 2022, Reachability Problems: 16th International Conference, RP 2022, Proceedings. Lecture Notes in Computer Science (13608), P108, DOI 10.1007/978-3-031-19135-0_8
   Batz K, 2020, LECT NOTES COMPUT SC, V12225, P512, DOI 10.1007/978-3-030-53291-8_27
   Bjorner N, 2015, LECT NOTES COMPUT SC, V9300, P24, DOI 10.1007/978-3-319-23534-9_2
   Bradley AR, 2011, LECT NOTES COMPUT SC, V6538, P70, DOI 10.1007/978-3-642-18275-4_7
   Burn TC, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158099
   Champion A, 2020, J AUTOM REASONING, V64, P1393, DOI 10.1007/s10817-020-09571-y
   Een N., 2011, 2011 Formal Methods in Computer-Aided Design (FMCAD), P125
   Gulwani S, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P281, DOI 10.1145/1375581.1375616
   Heizmann M, 2013, LECT NOTES COMPUT SC, V7795, P641, DOI 10.1007/978-3-642-36742-7_53
   Hoder Krystof, 2012, LNCS, P157, DOI [10.1007/978-3-642-31612-8_13, DOI 10.1007/978-3-642-31612-8_13, DOI 10.1007/978-3-642-31612-813]
   Iwayama N, 2020, LECT NOTES COMPUT SC, V12389, P134, DOI 10.1007/978-3-030-65474-0_7
   Jhala Ranjit, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P470, DOI 10.1007/978-3-642-22110-1_38
   Katsura H, 2020, LECT NOTES COMPUT SC, V12470, P86, DOI 10.1007/978-3-030-64437-6_5
   Katsura Hiroyuki, 2023, HIGHER ORDER PROPERT
   Knapik T, 2002, LECT NOTES COMPUT SC, V2303, P205
   Kobayashi Naoki, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P711, DOI 10.1007/978-3-319-89884-1_25
   Kobayashi N, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571199
   Kobayashi N, 2019, LECT NOTES COMPUT SC, V11822, P413, DOI 10.1007/978-3-030-32304-2_20
   Kobayashi N, 2013, J ACM, V60, DOI 10.1145/2487241.2487246
   Kobayashi N, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P222
   Kobayashi N, 2009, IEEE S LOG, P179, DOI 10.1109/LICS.2009.29
   Kobayashi N, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P25, DOI 10.1145/1599410.1599415
   Kobayashi N, 2009, ACM SIGPLAN NOTICES, V44, P416, DOI 10.1145/1594834.1480933
   Kori M, 2022, LECT NOTES COMPUT SC, V13371, P235, DOI 10.1007/978-3-031-13185-1_12
   Ong CHL, 2006, IEEE S LOG, P81, DOI 10.1109/LICS.2006.38
   Pavlinovic Z, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434300
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Sato Ryosuke, 2013, P PEPM 2013, P53
   Suenaga K, 2020, LECT NOTES COMPUT SC, V11990, P293, DOI 10.1007/978-3-030-39322-9_14
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Terauchi T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1706299.1706315
   Tobita Y, 2012, LECT NOTES COMPUT SC, V7294, P275, DOI 10.1007/978-3-642-29822-6_22
   Unno H, 2013, ACM SIGPLAN NOTICES, V48, P75, DOI 10.1145/2480359.2429081
   Unno H, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P277, DOI 10.1145/1599410.1599445
   Viswanathan M, 2004, LECT NOTES COMPUT SC, V3170, P512
   Watanabe K, 2019, PROCEEDINGS OF THE 2019 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM '19), P22, DOI 10.1145/3294032.3294077
   Zhu H, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P400, DOI 10.1145/2784731.2784766
NR 38
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 190
DI 10.1145/3607831
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900003
OA gold
DA 2024-07-18
ER

PT J
AU Arora, J
   Westrick, S
   Acar, UA
AF Arora, Jatin
   Westrick, Sam
   Acar, Umut A.
TI Efficient Parallel Functional Programming with Effects
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE functional programming; memory management; parallel; concurrent
ID HIERARCHICAL MEMORY MANAGEMENT
AB Although functional programming languages simplify writing safe parallel programs by helping programmers to avoid data races, they have traditionally delivered poor performance. Recent work improved performance by using a hierarchical memory architecture that allows processors to allocate and reclaim memory independently without any synchronization, solving thus the key performance challenge afflicting functional programs. The approach, however, restricts mutation, or memory effects, so as to ensure "disentanglement", a low-level memory property that guarantees independence between different heaps in the hierarchy. This paper proposes techniques for supporting entanglement and for allowing functional programs to use mutation at will. Our techniques manage entanglement by distinguishing between disentangled and entangled objects and shielding disentangled objects from the cost of entanglement management. We present a semantics that formalizes entanglement as a property at the granularity of memory objects, and define several cost metrics to reason about and bound the time and space cost of entanglement. We present an implementation of the techniques by extending the MPL compiler for Parallel ML. The extended compiler supports all features of the Parallel ML language, including unrestricted effects. Our experiments using a variety of benchmarks show that MPL incurs a small time and space overhead compared to sequential runs, scales well, and is competitive with languages such as C++, Go, Java, OCaml. These results show that our techniques can marry the safety benefits of functional programming with performance.
C1 [Arora, Jatin; Westrick, Sam; Acar, Umut A.] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Arora, J (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM jatina@andrew.cmu.edu; swestric@cs.cmu.edu; umut@cs.cmu.edu
OI Westrick, Sam/0000-0003-2848-9808; Arora, Jatin/0000-0001-8302-6844
FU National Science Foundation [CCF-1901381, CCF-2115104, CCF-2119352,
   CCF-2107241]
FX We thank the anonymous PLDI reviewers and our shepherd, KC
   Sivaramakrishnan, for their feedback. This work was partially supported
   by the National Science Foundation under grant numbers CCF-1901381,
   CCF-2115104, CCF-2119352, and CCF-2107241.
CR Acar UA, 2002, THEOR COMPUT SYST, V35, P321, DOI 10.1007/s00224-002-1057-3
   Acar UA, 2018, ACM SIGPLAN NOTICES, V53, P769, DOI [10.1145/3192366.3192391, 10.1145/3296979.3192391]
   Acar UA, 2017, ACM SIGPLAN NOTICES, V52, P75, DOI [10.1145/3018743.3018762, 10.1145/3155284.3018762]
   Acar UA, 2016, ACM SIGPLAN NOTICES, V51, P18, DOI 10.1145/3022670.2951946
   Acar UA, 2016, J FUNCT PROGRAM, V26, DOI 10.1017/S0956796816000101
   Adve S, 2010, COMMUN ACM, V53, P84, DOI 10.1145/1839676.1839697
   Alpern B., 1995, Proceedings 1995. Programming Models for Massively Parallel Computers (Cat. No.95TB8112), P10, DOI 10.1109/PMMPC.1995.504336
   Anderson D, 2022, PPOPP'22: PROCEEDINGS OF THE 27TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P445, DOI 10.1145/3503221.3508422
   [Anonymous], 1998, SIGPLAN Fortran Forum, DOI [10.1145/289918.289920, DOI 10.1145/289918.289920]
   [Anonymous], 2011, FIN PROT AGN RPC SYS
   [Anonymous], 2012, The Garbage Collection Handbook
   [Anonymous], 2015, FOLL FAC OP SOURC LI
   [Anonymous], 2001, DISC
   Arora Jatin, 2023, Zenodo, DOI 10.5281/ZENODO.7824069
   Arora J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434299
   Attardi G, 1998, SOFTWARE PRACT EXPER, V28, P1143, DOI 10.1002/(SICI)1097-024X(199809)28:11<1143::AID-SPE194>3.0.CO;2-7
   Attardi Giuseppe, 1994, TECHNICAL REPORT T 9
   Auhagen Sven., 2011, Proceedings of the 2011 ACM SIGPLAN Workshop on Memory Systems Performance and Correctness, MSPC '11, P51
   Bartlett J.F., 1989, Mostly-Copying garbage collection picks up generations and C++
   Bartlett Joel F., 1988, 882 DEC W RES LAB, P2
   Bauer M, 2012, INT CONF HIGH PERFOR
   Berger ED, 2009, ACM SIGPLAN NOTICES, V44, P81, DOI 10.1145/1639949.1640096
   Blelloch GE, 1996, COMMUN ACM, V39, P85, DOI 10.1145/227234.227246
   BLELLOCH GE, 1994, J PARALLEL DISTR COM, V21, P4, DOI 10.1006/jpdc.1994.1038
   Blelloch GE, 1999, J ACM, V46, P281, DOI 10.1145/301970.301974
   Blelloch GE, 1999, ACM SIGPLAN NOTICES, V34, P104, DOI 10.1145/301631.301648
   Blelloch GE, 2020, PROCEEDINGS OF THE 32ND ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES (SPAA '20), P507, DOI 10.1145/3350755.3400254
   BLUMOFE RD, 1995, SIGPLAN NOTICES, V30, P207
   Bocchino Robert L, 2009, 1 USENIX C HOT TOP P
   Boehm H., 2011, 3rd USENIX Workshop on Hot Topics in Parallelism, HotPar'11, Berkeley, CA, USA, May 26-27, 2011
   Brown T, 2015, PODC'15: PROCEEDINGS OF THE 2015 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P261, DOI 10.1145/2767386.2767436
   Chakravarty M., 2007, PROC WORKSHOP DECLAR, P10
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   Collins Alexander., 2014, Proceedings of ACM SIGPLAN International Workshop on Libraries, Languages, p8:8, DOI DOI 10.1145/2627373.2627375
   CULLER DE, 1993, SUPERCOMP PROC, P262
   Dawson CM, 2006, QUANTUM INFORM COMPU, V6, P81
   Evans Jason, 2006, P BSDCAN C OTT CAN
   Feldman YMY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428196
   Fluet M, 2010, J FUNCT PROGRAM, V20, P537, DOI 10.1017/S0956796810000201
   Fluet M, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P241
   Fraser K., 2003, Practical lock-freedom
   Frigo M, 2009, SPAA'09: PROCEEDINGS OF THE TWENTY-FIRST ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P79
   Gramoli V, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI [10.1145/2688500.2688501, 10.1145/2858788.2688501]
   Guatto A, 2018, ACM SIGPLAN NOTICES, V53, P81, DOI 10.1145/3200691.3178494
   Halstead R.H., 1984, P 1984 ACM S LISP FU, P9
   Hammond K, 2011, LECT NOTES COMPUT SC, V6652, P201, DOI 10.1007/978-3-642-21338-0_17
   Hosking A.L., 2006, Proceedings of the 5th International Symposium on Memory Management, ISMM 2006, Ottawa, Ontario, Canada, June 10-11, 2006, P40, DOI [10.1145/1133956.1133963, DOI 10.1145/1133956.1133963]
   Imam Shams., 2014, P 2014 INT C PRINCIP, P75
   Intel Corporation, 2009, 322581001US INT CORP
   Intel Corporation, 2009, INT R THREAD BUILD B
   Jones SP, 2008, LECT NOTES COMPUT SC, V5356, P138
   Keller G, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P261
   Kitaev A.Yu, 2002, CLASSICAL QUANTUM CO
   Koparkar C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473596
   Kumar A, 2017, ACM SIGPLAN NOTICES, V52, P706, DOI 10.1145/3093333.3009869
   Le M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P230, DOI 10.1145/2784731.2784736
   Lea Doug, 2000, JAVA, P36
   Li P, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P107
   Linden Jonatan, 2013, Principles of Distributed Systems. 17th International Conference, OPODIS 2013. Proceedings: LNCS 8304, P206, DOI 10.1007/978-3-319-03850-6_15
   Marlow S, 2011, ACM SIGPLAN NOTICES, V46, P71, DOI 10.1145/2096148.2034685
   Michael M. M., 1996, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, P267, DOI 10.1145/248052.248106
   MLton, MLton web site
   Muller S.K., 2016, P 28 ACM S PARALLELI, P71, DOI DOI 10.1145/2935764.2935793
   Muller SK, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236790
   Muller SK, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P577, DOI 10.1145/3385412.3386013
   Muller SK, 2017, ACM SIGPLAN NOTICES, V52, P677, DOI [10.1145/3062341.3062370, 10.1145/3140587.3062370]
   Muller Stefan K., 2018, P 14 ACM SIGPLAN INT
   NIKHIL A, 1989, ACM T PROGR LANG SYS, V11, P598, DOI 10.1145/69558.69562
   Ohori Atsushi, 2018, Making SML# a General-purpose High-performance Language
   Prabhu P, 2018, 27TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES (PACT 2018), DOI 10.1145/3243176.3243193
   Raghunathan R, 2016, ACM SIGPLAN NOTICES, V51, P392, DOI 10.1145/3022670.2951935
   Rust Team, 2019, RUST LANG
   Shun JL, 2014, PROCEEDINGS OF THE 26TH ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES (SPAA'14), P96, DOI 10.1145/2612669.2612687
   Shun Julian, 2012, ACM Symposium on Parallelism in Algorithms and Architectures (SPAA), P68
   Singer K., 2020, Proceedings of the Symposium on Algorithmic Principles of Computer Systems, P147, DOI [10.1137/1.9781611976021.11, DOI 10.1137/1.9781611976021.11]
   Singer K, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P257, DOI 10.1145/3293883.3295735
   Sivaramakrishnan KC, 2014, J FUNCT PROGRAM, V24, P613, DOI 10.1017/S0956796814000161
   Sivaramakrishnan K. C., 2020, PROC ACM PROGRAM LAN, V113
   Spoonhower Daniel, 2009, THESIS CARN MELL U
   Westrick S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371115
   Westrick Sam, 2022, P 24 ACM SIGPLAN INT
   Yelick K, 1998, CONCURRENCY-PRACT EX, V10, P825, DOI 10.1002/(SICI)1096-9128(199809/11)10:11/13<825::AID-CPE383>3.0.CO;2-H
   Ziarek L, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P628
NR 83
TC 3
Z9 3
U1 2
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 170
DI 10.1145/3591284
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900066
OA gold
DA 2024-07-18
ER

PT J
AU Koval, N
   Khalanskiy, D
   Alistarh, D
AF Koval, Nikita
   Khalanskiy, Dmitry
   Alistarh, Dan
TI CQS: A Formally-Verified Framework for Fair and Abortable
   Synchronization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Concurrent Data Structures; Iris; Synchronization Primitives;
   Abortability; Kotlin Coroutines
AB Writing concurrent code that is both correct and efficient is notoriously difficult. Thus, programmers often prefer to use synchronization abstractions, which render code simpler and easier to reason about. Despite a wealth of work on this topic, there is still a gap between the rich semantics provided by synchronization abstractions in modern programming languages-specifically, fair FIFO ordering of synchronization requests and support for abortable operations-and frameworks for implementing it correctly and efficiently. Supporting such semantics is critical given the rising popularity of constructs for asynchronous programming, such as coroutines, which abort frequently and are cheaper to suspend and resume compared to native threads.
   This paper introduces a new framework called CancellableQueueSynchronizer (CQS), which enables simple yet efficient implementations of a wide range of fair and abortable synchronization primitives: mutexes, semaphores, barriers, count-down latches, and blocking pools. Our main contribution is algorithmic, as implementing both fairness and abortability efficiently at this level of generality is non-trivial. Importantly, all our algorithms, including the CQS framework and the primitives built on top of it, come with formal proofs in the Iris framework for Coq for many of their properties. These proofs are modular, so it is easy to show correctness for new primitives implemented on top of CQS. From a practical perspective, implementation of CQS for native threads on the JVM improves throughput by up to two orders of magnitude over Java's AbstractQueuedSynchronizer, the only practical abstraction offering similar semantics. Further, we successfully integrated CQS as a core component of the popular Kotlin Coroutines library, validating the framework's practical impact and expressiveness in a real-world environment. In sum, CancellableQueueSynchronizer is the first framework to combine expressiveness with formal guarantees and solid practical performance. Our approach should be extensible to other languages and families of synchronization primitives.
C1 [Koval, Nikita] JetBrains, Amsterdam, Netherlands.
   [Khalanskiy, Dmitry] JetBrains, Munich, Germany.
   [Alistarh, Dan] IST Austria, Klosterneuburg, Austria.
C3 Institute of Science & Technology - Austria
RP Koval, N (corresponding author), JetBrains, Amsterdam, Netherlands.
EM nikita.koval@jetbrains.com; dmitry.khalanskiy@jetbrains.com;
   dan.alistarh@ist.ac.at
CR Alon A, 2018, PODC'18: PROCEEDINGS OF THE 2018 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P27, DOI 10.1145/3212734.3212759
   [Anonymous], 2001, Pioneers and Their Contributions to Software Engineering
   [Anonymous], 2023, CQS FORMAL PROOFS
   [Anonymous], 1976, COROUTINES NETWORKS
   [Anonymous], 2022, ABOUT US
   [Anonymous], 2022, KOTLIN COROUTINES
   [Anonymous], 2021, JMH JAVA MICROBENCHM
   Bierman G, 2012, LECT NOTES COMPUT SC, V7313, P233, DOI 10.1007/978-3-642-31057-7_12
   Carbonneaux Q, 2022, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP '22), P116, DOI 10.1145/3497775.3503681
   Chajed T, 2021, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '21), P423
   Chaoran Yang, 2016, ACM SIGPLAN Notices, V51, P1, DOI 10.1145/3016078.2851168
   Cutner Zak, 2021, Coordination Models and Languages. 23rd IFIP WG 6.1 International Conference, COORDINATION 2021 Held as Part of the 16th International Federated Conference on Distributed Computing Techniques, DisCoTec 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12717), P80, DOI 10.1007/978-3-030-78142-2_5
   Danek R, 2010, DISTRIB COMPUT, V23, P87, DOI 10.1007/s00446-010-0096-2
   Dang HH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371102
   Giakkoupis G, 2017, PROCEEDINGS OF THE ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC'17), P221, DOI 10.1145/3087801.3087837
   Haller P, 2019, J LOG ALGEBR METHODS, V105, P75, DOI 10.1016/j.jlamp.2019.03.002
   Izraelevitz J, 2017, ACM TRANS PARALLEL C, V3, DOI 10.1145/3040220
   Jayanti Prasad., 2003, P 22 ANN S PRINCIPLE, P295, DOI 10.1145/872035. 872079
   Jia X, 2015, CPP'15: PROCEEDINGS OF THE 2015 ACM CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P119, DOI 10.1145/2676724.2693179
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Kaiser Jan-Oliver, 2017, EUR C OBJ OR PROGR E, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.17, 10.4230/LIPIcs.ECOOP.2017]
   KNUTH DE, 1966, COMMUN ACM, V9, P321, DOI 10.1145/355592.365595
   Koval N, 2023, Arxiv, DOI arXiv:2111.12682
   Koval N, 2020, PROCEEDINGS OF THE 25TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '20), P423, DOI 10.1145/3332466.3374503
   Koval N, 2019, LECT NOTES COMPUT SC, V11725, P317, DOI 10.1007/978-3-030-29400-7_23
   Koval Nikita, 2023, P 28 ACM SIGPLAN ANN, P107, DOI DOI 10.1145/3572848.3577481
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krishna S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P181, DOI 10.1145/3385412.3386029
   Krogh-Jespersen Morten, 2016, VERIFYING CONCURRENT
   Lea D, 2005, SCI COMPUT PROGRAM, V58, P293, DOI 10.1016/j.scico.2005.03.007
   Lee H, 2010, LECT NOTES COMPUT SC, V6490, P364, DOI 10.1007/978-3-642-17653-1_27
   Magnusson P., 1994, Proceedings Eighth International Parallel Processing Symposium (Cat. No.94TH0652-8), P165, DOI 10.1109/IPPS.1994.288305
   MELLORCRUMMEY JM, 1991, ACM T COMPUT SYST, V9, P21, DOI 10.1145/103727.103729
   Michael M. M., 1996, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, P267, DOI 10.1145/248052.248106
   Michael MM, 2004, IEEE T PARALL DISTR, V15, P491, DOI 10.1109/TPDS.2004.8
   Okur S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P1117, DOI 10.1145/2568225.2568309
   Pareek A, 2012, LECT NOTES COMPUT SC, V7611, P267, DOI 10.1007/978-3-642-33651-5_19
   Prokopec Aleksandar, 2018, LIPICS, DOI [10.4230/LIPIcs.ECOOP, DOI 10.4230/LIPICS.ECOOP]
   Ramalhete P, 2017, PROCEEDINGS OF THE 29TH ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES (SPAA'17), P367, DOI 10.1145/3087556.3087588
   Scherer W. N.  III, 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P147, DOI 10.1145/1122971.1122994
   Vindum SF, 2022, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP '22), P100, DOI 10.1145/3497775.3503689
   Vindum SF, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P76, DOI 10.1145/3437992.3439930
NR 43
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 116
DI 10.1145/3591230
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900012
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Wang, JB
   Gupta, A
   Wang, C
AF Wang, Jingbo
   Gupta, Aarti
   Wang, Chao
TI Synthesizing MILP Constraints for Efficient and Robust Optimization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Syntax Guided Synthesis; Data Science; Statistics; Machine Learning
ID PROGRAM SYNTHESIS
AB While mixed integer linear programming (MILP) solvers are routinely used to solve a wide range of important science and engineering problems, it remains a challenging task for end users to write correct and effcient MILP constraints, especially for problems specified using the inherently non-linear Boolean logic operations. To overcome this challenge, we propose a syntax guided synthesis (SyGuS) method capable of generating high-quality MILP constraints from the specifications expressed using arbitrary combinations of Boolean logic operations. At the center of our method is an extensible domain specification language (DSL) whose expressiveness may be improved by adding new integer variables as decision variables, together with an iterative procedure for synthesizing linear constraints from non-linear Boolean logic operations using these integer variables. To make the synthesis method effcient, we also propose an over-approximation technique for soundly proving the correctness of the synthesized linear constraints, and an under-approximation technique for safely pruning away the incorrect constraints. We have implemented and evaluated the method on a wide range of benchmark specifications from statistics, machine learning, and data science applications. The experimental results show that the method is effcient in handling these benchmarks, and the quality of the synthesized MILP constraints is close to, or higher than, that of manually-written constraints in terms of both compactness and solving time.
C1 [Wang, Jingbo; Wang, Chao] Univ Southern Calif, Los Angeles, CA 90007 USA.
   [Gupta, Aarti] Princeton Univ, Princeton, NJ USA.
C3 University of Southern California; Princeton University
RP Wang, JB (corresponding author), Univ Southern Calif, Los Angeles, CA 90007 USA.
EM jingbow@usc.edu; aartig@cs.princeton.edu; wang626@usc.edu
OI Wang, Jingbo/0000-0001-5877-2677; Gupta, Aarti/0000-0001-6676-9400
FU U.S. National Science Foundation [CCF-2220345]
FX We thank our shepherd Rastislav Bodik and the anonymous reviewers for
   their helpful feedback. This work was partially funded by the U.S.
   National Science Foundation grant CCF-2220345.
CR Aghaei S, 2019, AAAI CONF ARTIF INTE, P1418
   Allison An, 2012, THESIS MIT
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Belotti Pietro, 2011, WILEY ENCY OPERATION, V2, P1441
   Bertsimas D, 2022, J MACH LEARN RES, V23
   Bertsimas D, 2021, SIAM J OPTIMIZ, V31, P2340, DOI 10.1137/20M1346778
   Bertsimas D, 2020, ANN STAT, V48, P300, DOI 10.1214/18-AOS1804
   Bertsimas D, 2017, MACH LEARN, V106, P1039, DOI 10.1007/s10994-017-5633-9
   Bezanson J, 2017, SIAM REV, V59, P65, DOI 10.1137/141000671
   Bixby B., 2007, Transp. Research Part B, V41, P159, DOI DOI 10.1016/S0965-8564(07)00058-4
   Blazytko T, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P643
   Chai D, 2003, DES AUT CON, P830
   Chang A, 2012, ADV NEUR INF PROCESS, P269
   Cococcioni M, 2021, OPTIM LETT, V15, P2455, DOI 10.1007/s11590-020-01644-6
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Devriendt J, 2021, CONSTRAINTS, V26, P26, DOI 10.1007/s10601-020-09318-x
   Eldib H, 2016, LECT NOTES COMPUT SC, V9780, P343, DOI 10.1007/978-3-319-41540-6_19
   Eldib H, 2014, LECT NOTES COMPUT SC, V8559, P114, DOI 10.1007/978-3-319-08867-9_8
   Feng WJ, 2020, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2020, P635
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Forrester Richard John, 2008, ALGORITHMIC OPERATIO, V3, P2
   Fourer R., 1987, AMPL: A mathematical programming language
   Fourer Robert, 2014, 5 INFORMS OPTIMIZATI
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   GLOVER F, 1975, MANAGE SCI, V22, P455, DOI 10.1287/mnsc.22.4.455
   Guo Z, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371080
   Gurobi Optimization LLC, 2023, Gurobi optimizer reference manual
   Hu QHP, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1128, DOI 10.1145/3385412.3385979
   Hu QP, 2019, LECT NOTES COMPUT SC, V11561, P335, DOI 10.1007/978-3-030-25540-4_18
   IBM ILOG CPLEX, 2015, V12 6 US MAN CPLEX 2
   King T, 2014, 2014 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P139, DOI 10.1109/FMCAD.2014.6987606
   Kohavi R., 1996, KDD-96 Proceedings. Second International Conference on Knowledge Discovery and Data Mining, P202
   Lee W, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434335
   Liem C, 2008, PLAS'08: PROCEEDINGS OF THE ACM SIGPLAN THIRD WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY, P33, DOI 10.1145/1375696.1375702
   Liu BB, 2021, LECT NOTES COMPUT SC, V12918, P276, DOI 10.1007/978-3-030-86890-1_16
   Mahé P, 2014, BIOINFORMATICS, V30, P1280, DOI 10.1093/bioinformatics/btu022
   McDermott J, 2016, PATTERN RECOGN LETT, V73, P41, DOI 10.1016/j.patrec.2016.01.004
   Nuzzo P., 2010, 2010 Formal Methods in Computer-Aided Design (FMCAD 2010), P71
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Paulsen B, 2022, LECT NOTES COMPUT SC, V13371, P149, DOI 10.1007/978-3-031-13185-1_8
   Paulsen B, 2022, LECT NOTES COMPUT SC, V13243, P357, DOI 10.1007/978-3-030-99524-9_19
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Reynolds A, 2019, LECT NOTES COMPUT SC, V11562, P74, DOI 10.1007/978-3-030-25543-5_5
   Shen Junfu, 2021, MBA BLAST UNVEILING
   Shoukry Y, 2018, P IEEE, V106, P1655, DOI 10.1109/JPROC.2018.2849003
   Torlak Emina, 2013, P 2013 ACM INT S NEW, P135, DOI DOI 10.1145/2509578.2509586
   Wang JB, 2022, LECT NOTES COMPUT SC, V13372, P364, DOI 10.1007/978-3-031-13188-2_18
   Wang JB, 2021, PROC INT CONF SOFTW, P810, DOI 10.1109/ICSE43902.2021.00079
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
   Williams H.P., 2013, Model Building in Mathematical Programming
   Zhou Y, 2007, LECT NOTES COMPUT SC, V4867, P61
NR 54
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 184
DI 10.1145/3591298
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900080
OA gold
DA 2024-07-18
ER

PT J
AU Watt, C
   Trela, M
   Lammich, P
   Märkl, F
AF Watt, Conrad
   Trela, Maja
   Lammich, Peter
   Maerkl, Florian
TI WasmRef-Isabelle: A Verified Monadic Interpreter and Industrial Fuzzing
   Oracle for WebAssembly
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE theorem proving; refinement; virtual machine; WasmCert
ID SEMANTICS; MACHINE; MODEL; JAVA
AB We present WasmRef-Isabelle, a monadic interpreter for WebAssembly written in Isabelle/HOL and proven correct with respect to the WasmCert-Isabelle mechanisation of WebAssembly. WasmRef-Isabelle has been adopted and deployed as a fuzzing oracle in the continuous integration infrastructure of Wasmtime, a widely usedWebAssembly implementation. Previous efforts to fuzzWasmtime againstWebAssembly's official OCaml reference interpreter were abandoned by Wasmtime's developers after the reference interpreter exhibited unacceptable performance characteristics, which its maintainers decided not to fix in order to preserve the interpreter's close definitional correspondence with the official specification. With WasmRef-Isabelle, we achieve the best of both worlds - an interpreter fast enough to be useable as a fuzzing oracle that also maintains a close correspondence with the specification through a mechanised proof of correctness.
   We verify the correctness of WasmRef-Isabelle through a two-step refinement proof in Isabelle/HOL. We demonstrate thatWasmRef-Isabelle significantly outperforms the official reference interpreter, has performance comparable to a Rust debug build of the industry WebAssembly interpreter Wasmi, and competes with unverified oracles on fuzzing throughput when deployed in Wasmtime's fuzzing infrastructure. We also present several new extensions to WasmCert-Isabelle which enhance WasmRef-Isabelle's utility as a fuzzing oracle: we add support for a number of upcoming WebAssembly features, and fully mechanise the numeric semantics of WebAssembly's integer operations.
C1 [Watt, Conrad; Trela, Maja] Univ Cambridge, Cambridge, England.
   [Lammich, Peter] Univ Twente, Enschede, Netherlands.
   [Maerkl, Florian] Tech Univ Munich, Munich, Germany.
C3 University of Cambridge; University of Twente; Technical University of
   Munich
RP Watt, C (corresponding author), Univ Cambridge, Cambridge, England.
EM conrad.watt@cl.cam.ac.uk
OI Watt, Conrad/0000-0002-0596-877X
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Alagar V. S., 1998, VIENNA DEV METHOD, P219, DOI [10.1007/978-1-4757-2920-7_9, DOI 10.1007/978-1-4757-2920-7_9]
   [Anonymous], 1998, C FORMALISED HOL
   Back R.-J., 1998, Refinement Calculus
   Barr ET, 2015, IEEE T SOFTWARE ENG, V41, P507, DOI 10.1109/TSE.2014.2372785
   Blazy S, 2009, J AUTOM REASONING, V43, P263, DOI 10.1007/s10817-009-9148-3
   Bodin M, 2014, ACM SIGPLAN NOTICES, V49, P87, DOI 10.1145/2535838.2535876
   Bogdanas D, 2015, ACM SIGPLAN NOTICES, V50, P445, DOI [10.1145/2775051.2676982, 10.1145/2676726.2676982]
   Bulwahn L, 2008, LECT NOTES COMPUT SC, V5170, P134, DOI 10.1007/978-3-540-71067-7_14
   Bytecode Alliance, 2022, wasmtime
   Bytecode Alliance, 2022, ABOUT US
   Chapman J, 2019, LECT NOTES COMPUT SC, V11825, P255, DOI 10.1007/978-3-030-33636-3_10
   ClusterFuzz, 2022, WASMT DIFF SPEC ASSE
   Cohen C, 2013, LECT NOTES COMPUT SC, V8307, P147, DOI 10.1007/978-3-319-03545-1_10
   Crichton Alex, 2021, TIMEOUTS SPEC INTERP
   Ellison C, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P533
   Fallin Chris, 2021, FIX QUADRATIC BEHAV
   Gal-On Shay, 2009, COREMARK
   GOSLING J, 1995, SIGPLAN NOTICES, V30, P111, DOI 10.1145/202530.202541
   Guha A, 2010, LECT NOTES COMPUT SC, V6183, P126, DOI 10.1007/978-3-642-14107-2_7
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   Haftmann Florian, 2021, CODE GENERATION ISAB
   He J, 1999, INT FED INFO PROC, V21, P131
   Heule M, 2017, LECT NOTES COMPUT SC, V10499, P269, DOI 10.1007/978-3-319-66107-0_18
   Hierons RM, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1459352.1459354
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   Jiao J, 2020, P IEEE S SECUR PRIV, P1695, DOI 10.1109/SP40000.2020.00066
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Klein G, 2006, ACM T PROGR LANG SYS, V28, P619, DOI 10.1145/1146809.1146811
   Klein G, 2014, ACM T COMPUT SYST, V32, DOI 10.1145/2560537
   Krebbers R., 2015, Ph. D. Dissertation
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Lammich P, 2020, J AUTOM REASONING, V64, P513, DOI 10.1007/s10817-019-09525-z
   Lammich P, 2015, LECT NOTES COMPUT SC, V9236, P253, DOI 10.1007/978-3-319-22102-1_17
   Lammich P, 2013, LECT NOTES COMPUT SC, V7998, P84, DOI 10.1007/978-3-642-39634-2_9
   Lammich Peter., 2012, ARCH FORMAL PROOFS
   Lee DK, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P173
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   LLVM Progect, 2022, LIBFUZZER
   Lochbihler A, 2018, LECT NOTES COMPUT SC, V10895, P388, DOI 10.1007/978-3-319-94821-8_23
   Parity Technologies, 2022, WASM
   Park D, 2015, ACM SIGPLAN NOTICES, V50, P346, DOI [10.1145/2813885.2737991, 10.1145/2737924.2737991]
   Pit-Claudel C, 2020, LECT NOTES COMPUT SC, V12167, P119, DOI 10.1007/978-3-030-51054-1_7
   Pollack Robert H., 1996, BELIEVE MACHINE CHEC, P1
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Ridge T, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P38, DOI 10.1145/2815400.2815411
   Rosu G, 2010, J LOGIC ALGEBR PROGR, V79, P397, DOI 10.1016/j.jlap.2010.03.012
   Schumi R, 2021, LECT NOTES COMPUT SC, V12649, P269, DOI 10.1007/978-3-030-71500-7_14
   Siegl S, 2011, DES AUT TEST EUROPE, P118
   TC39, 2018, SIMD JS
   Titzer BL, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563311
   W3C, 2019, WEBASSEMBLY COR SPEC
   wasm3, 2021, WAS COR
   WasmCert, 2023, WASMREF IS
   Watt C, 2021, LECT NOTES COMPUT SC, V13047, P61, DOI 10.1007/978-3-030-90870-6_4
   Watt Conrad, 2023, SUPPLEMENTARY MAT WA, DOI [10.5281/zenodo.7815663, DOI 10.5281/ZENODO.7815663]
   Watt Conrad., 2018, Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs. CPP 2018, P53, DOI DOI 10.1145/3167082
   WebAssembly Community Group, WEBASSEMBLY SPEC INT
   WebAssembly Community Group, US
   WebAssembly Community Group, 2021, REF TYP
   WebAssembly Community Group, 2021, THREADS
   WebAssembly Community Group, 2021, US
   WebAssembly Community Group, 2020, MULT
   WebAssembly Community Group, 2021, BULK MEM
   WebAssembly Community Group, 2019, NONTR FLOAT TO INT C
   Wimmer S, 2018, LECT NOTES COMPUT SC, V10895, P579, DOI 10.1007/978-3-319-94821-8_34
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
NR 67
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 110
DI 10.1145/3591224
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900006
OA gold
DA 2024-07-18
ER

PT J
AU Lattuada, A
   Hance, T
   Cho, C
   Brun, M
   Subasinghe, I
   Zhou, Y
   Howell, J
   Parno, B
   Hawblitzel, C
AF Lattuada, Andrea
   Hance, Travis
   Cho, Chanhee
   Brun, Matthias
   Subasinghe, Isitha
   Zhou, Yi
   Howell, Jon
   Parno, Bryan
   Hawblitzel, Chris
TI Verus: Verifying Rust Programs using Linear Ghost Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Rust; linear types; systems verification
AB The Rust programming language provides a powerful type system that checks linearity and borrowing, allowing code to safely manipulate memory without garbage collection and making Rust ideal for developing low-level, high-assurance systems. For such systems, formal verification can be useful to prove functional correctness properties beyond type safety. This paper presents Verus, an SMT-based tool for formally verifying Rust programs. With Verus, programmers express proofs and specifications using the Rust language, allowing proofs to take advantage of Rust's linear types and borrow checking. We show how this allows proofs to manipulate linearly typed permissions that let Rust code safely manipulate memory, pointers, and concurrent resources. Verus organizes proofs and specifications using a novel mode system that distinguishes specifications, which are not checked for linearity and borrowing, from executable code and proofs, which are checked for linearity and borrowing. We formalize Verus' linearity, borrowing, and modes in a small lambda calculus, for which we prove type safety and termination of specifications and proofs. We demonstrate Verus on a series of examples, including pointer-manipulating code (an xor-based doubly linked list), code with interior mutability, and concurrent code.
C1 [Lattuada, Andrea] VMware Res, Zurich, Switzerland.
   [Hance, Travis; Cho, Chanhee; Zhou, Yi; Parno, Bryan] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Lattuada, Andrea; Brun, Matthias; Subasinghe, Isitha] Swiss Fed Inst Technol, Zurich, Switzerland.
   [Subasinghe, Isitha] UNSW Sydney, Sydney, NSW, Australia.
   [Howell, Jon] VMware Res, Bellevue, WA USA.
   [Hawblitzel, Chris] Microsoft Res, Redmond, WA USA.
   [Subasinghe, Isitha] Univ Melbourne, Melbourne, Vic, Australia.
C3 Carnegie Mellon University; Swiss Federal Institutes of Technology
   Domain; ETH Zurich; University of New South Wales Sydney; Microsoft;
   University of Melbourne
RP Lattuada, A (corresponding author), VMware Res, Zurich, Switzerland.
EM lattuada@vmware.com; thance@andrew.cmu.edu; chanheec@andrew.cmu.edu;
   matthias.brun@inf.ethz.ch; i.subasinghe@unsw.edu.au;
   yizhou5@andrew.cmu.edu; howell@vmware.com; parno@cmu.edu;
   chris.hawblitzel@microsoft.com
OI Brun, Matthias/0009-0004-5349-4347; Lattuada,
   Andrea/0000-0002-9303-452X; Howell, Jon/0000-0002-1781-2473; Parno,
   Bryan/0000-0002-9113-1684; Hance, Travis/0009-0003-1104-7795; Zhou,
   Yi/0000-0001-7597-1176; Hawblitzel, Chris/0000-0002-5676-0362
FU Alfred P. Sloan Foundation; Intel Corporation; Future Enterprise
   Security initiative at Carnegie Mellon CyLab
FX The authors would like to thank Jay Bosamiya, Nikhil Swamy, Guido
   Martinez, and the anonymous reviewers for their help and suggestions on
   the paper. Work at CMU was supported, in part, by a gift from VMware,
   the Alfred P. Sloan Foundation, the Intel Corporation, and the Future
   Enterprise Security initiative at Carnegie Mellon CyLab
   (FutureEnterprise@CyLab).At ETH Zurich Andrea Lattuada was supported, in
   part, by a gift from VMware.
CR Ahmed A., 2007, Fundamenta Informaticae, V77, DOI DOI 10.1007/11417170_22
   Amani S, 2016, ACM SIGPLAN NOTICES, V51, P175, DOI 10.1145/2954679.2872404
   [Anonymous], 2023, P ACM PROGRAM LANG, V7
   Astrauskas V, 2022, LECT NOTES COMPUT SC, V13260, P88, DOI 10.1007/978-3-031-06773-0_5
   Astrauskas V, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360573
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Barrett Clark W., 2010, P 8 INT WORKSH SAT M
   Bobot F., 2011, BOOGIE 2011 1 INT WO, P53
   BORGIDA A, 1995, IEEE T SOFTWARE ENG, V21, P785, DOI 10.1109/32.469460
   Coq Development Team, 2022, COQ PROOF ASSISTANT
   Crary K., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P262, DOI 10.1145/292540.292564
   Dang HH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371102
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Moura L, 2007, LECT NOTES ARTIF INT, V4603, P183
   de Moura Leonardo, 2015, AUTOMATED DEDUCTION
   Denis Xavier, 2022, P ICFEM 2022 INT C F, DOI [10.1007/978-3-031-17244-1_6, DOI 10.1007/978-3-031-17244-1_6]
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Fromherz A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473590
   Google Security Blog, 2021, Apache LOG4J Vulnerability
   Hance Travis, 2022, CMUCYLAB22003 CARN M
   Ho S, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547647
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371109
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Klabnik S., 2018, The Rust Programming Language
   Lattuada A, 2023, Arxiv, DOI [arXiv:2303.05491, 10.48550/ARXIV.2303.05491, DOI 10.48550/ARXIV.2303.05491]
   Lattuada Andrea, 2023, Zenodo, DOI 10.5281/ZENODO.7511039
   Lattuada Andrea, 2023, VERUS VERIFYING RUST, DOI [10.5281/zenodo.7718486, DOI 10.5281/ZENODO.7718486]
   Leino KRM, 2010, LECT NOTES COMPUT SC, V6015, P312, DOI 10.1007/978-3-642-12002-2_26
   Li JL, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527313
   Matsakis Nicholas D., 2014, ADA LETT, P103, DOI DOI 10.1145/2692956.2663188
   Matsushita Y, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P841, DOI 10.1145/3519939.3523704
   Matsushita Y, 2020, LECT NOTES COMPUT SC, V12075, P484, DOI 10.1007/978-3-030-44914-8_18
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Pearce DJ, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3443420
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Vaughan-Nichols Steven, 2022, Linus Torvalds: Rust will go into Linux 6.1-- zdnet.com
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
   Weiss A, 2021, Arxiv, DOI arXiv:1903.00982
   Yanovski J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473597
   Zhu DP, 2005, LECT NOTES COMPUT SC, V3350, P83
NR 46
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586037
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600012
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU D'Osualdo, E
   Farzan, A
   Dreyer, D
AF D'Osualdo, Emanuele
   Farzan, Azadeh
   Dreyer, Derek
TI Proving Hypersafety Compositionally
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Hyperproperties; Modularity; Compositionality; Weakest Precondition
AB Hypersafety properties of arity n are program properties that relate.. traces of a program (or, more generally, traces of.. programs). Classic examples include determinism, idempotence, and associativity. A number of relational program logics have been introduced to target this class of properties. Their aim is to construct simpler proofs by capitalizing on structural similarities between the.. related programs. We propose unexplored, complementary proof principles that establish hyper-triples (i.e. hypersafety judgments) as a unifying compositional building block for proofs, and we use them to develop a Logic for Hyper-triple Composition (LHC), which supports forms of proof compositionality that were not achievable in previous relational logics. We prove LHC sound and apply it to a number of challenging examples.
C1 [D'Osualdo, Emanuele; Dreyer, Derek] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Farzan, Azadeh] Univ Toronto, Toronto, ON, Canada.
C3 University of Toronto
RP D'Osualdo, E (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
EM dosualdo@mpi-sws.org; azadeh@cs.toronto.edu; dreyer@mpi-sws.org
RI D'Osualdo, Emanuele/HOF-1125-2023
OI D'Osualdo, Emanuele/0000-0002-9179-5827; Farzan,
   Azadeh/0000-0001-9005-2653; Dreyer, Derek/0000-0002-3884-6867
FU European Research Council (ERC) Consolidator Grant for the project
   lPERSISTz under the European Union [101003349]
FX This work was supported by a European Research Council (ERC)
   Consolidator Grant for the project lPERSISTz under the European Union's
   Horizon 2020 research and innovation programme (grant agreement No.
   101003349).
CR Aguirre A, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000145
   Barthe G, 2004, P IEEE CSFW, P100, DOI 10.1109/CSFW.2004.1310735
   Barthe Gilles, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P200, DOI 10.1007/978-3-642-21437-0_17
   Barthe G, 2017, ACM SIGPLAN NOTICES, V52, P161, DOI 10.1145/3093333.3009896
   Barthe G, 2016, J LOG ALGEBR METHODS, V85, P847, DOI 10.1016/j.jlamp.2016.05.004
   Barthe G, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2492061
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Beringer Lennart, 2011, Interactive Theorem Proving. Proceedings Second International Conference, ITP 2011, P39, DOI 10.1007/978-3-642-22863-6_6
   Beringer L, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P233, DOI 10.1109/CSF.2007.30
   Clarkson B., 2014, INT C PRINC SEC TRUS, P265, DOI [10.1007/978-3-642-54792-8_15, DOI 10.1007/978-3-642-54792-8_15]
   Clarkson MR, 2008, CSF 2008: 21ST IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, PROCEEDINGS, P51, DOI 10.1109/CSF.2008.7
   D'Osualdo E, 2022, Arxiv, DOI [arXiv:2209.07448, 10.48550/arxiv.2209.07448, DOI 10.48550/ARXIV.2209.07448]
   Darvas A, 2005, LECT NOTES COMPUT SC, V3450, P193
   Eilers M, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3324783
   Farzan A, 2019, LECT NOTES COMPUT SC, V11561, P200, DOI 10.1007/978-3-030-25540-4_11
   Flanagan C., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P180
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Godlin B, 2013, SOFTW TEST VERIF REL, V23, P241, DOI 10.1002/stvr.1472
   Goudsmid O, 2021, LECT NOTES COMPUT SC, V12597, P55, DOI 10.1007/978-3-030-67067-2_4
   Gupta A., 2011, Computer Aided Verification, P412, DOI [10.1007/978-3-642-22110-1_32, DOI 10.1007/978-3-642-22110-1_32]
   Kovacs Mate., 2013, 2013 ACM SIGSAC Conference on Computer and Communications Security, CCS'13, Berlin, Germany, November 4-8, 2013, P211, DOI [DOI 10.1145/2508859.2516721, 10.1145/2508859.2516721]
   Liang HJ, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P455
   McMillan KL, 1999, LECT NOTES COMPUT SC, V1703, P342
   Nagaraj R, 2021, INDUSTRIALISATION FOR EMPLOYMENT AND GROWTH IN INDIA, P1, DOI 10.1109/LICS52264.2021.9470690
   Shemer R, 2019, LECT NOTES COMPUT SC, V11561, P161, DOI 10.1007/978-3-030-25540-4_9
   Sousa M, 2016, ACM SIGPLAN NOTICES, V51, P57, DOI 10.1145/2908080.2908092
   Terauchi T, 2005, LECT NOTES COMPUT SC, V3672, P352
   Unno H, 2021, LECT NOTES COMPUT SC, V12759, P742, DOI 10.1007/978-3-030-81685-8_35
   Yang H, 2007, THEOR COMPUT SCI, V375, P308, DOI 10.1016/j.tcs.2006.12.036
NR 29
TC 1
Z9 1
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 135
DI 10.1145/3563298
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200012
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Sundararajah, K
   Saumya, C
   Kulkarni, M
AF Sundararajah, Kirshanthan
   Saumya, Charitha
   Kulkarni, Milind
TI UNIREC: A Unimodular-Like Framework for Nested Recursions and Loops
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Recursion; Scheduling Transformations; Skewing
ID AFFINE SCHEDULING PROBLEM; EFFICIENT SOLUTIONS
AB Scheduling transformations reorder operations in a program to improve locality and/or parallelism. There are mature loop transformation frameworks such as the polyhedral model for composing and applying instance-wise scheduling transformations for loop nests. In recent years, there have been efforts to build frameworks for composing and applying scheduling transformations for nested recursion and loops, but these frameworks cannot employ the full power of transformations for loop nests since they have overly-restrictive representations. This paper describes a new framework, UNIREC, that not only generalizes prior frameworks for reasoning about transformations on recursion, but also generalizes the unimodular framework, and hence unifies reasoning about perfectly-nested loops and recursion.
C1 [Sundararajah, Kirshanthan; Saumya, Charitha; Kulkarni, Milind] Purdue Univ, W Lafayette, IN USA.
C3 Purdue University System; Purdue University
RP Sundararajah, K (corresponding author), Purdue Univ, W Lafayette, IN USA.
EM ksundar@purdue.edu; cgusthin@purdue.edu; milind@purdue.edu
OI Sundararajah, Kirshanthan/0000-0001-6384-062X; Kulkarni,
   Milind/0000-0001-6827-345X
FU National Science Foundation [CCF-1908504, CCF-1919197]
FX We appreciate the feedback from the anonymous reviewers for their
   suggestions and comments that helped to improve this paper. This work
   was supported in part by the National Science Foundation awards
   CCF-1908504 and CCF-1919197. Any opinions, findings, and conclusions or
   recommendations expressed in this paper are those of the authors and do
   not necessarily reflect the views of the National Science Foundation.
CR Allen Randy, 2001, Optimizing compilers for modern architectures: a dependencebased approach
   Amiranoff P, 2006, LECT NOTES COMPUT SC, V4134, P161
   [Anonymous], 2015, Polybench: Polyhedral benchmark suite
   Bandishti V, 2012, INT CONF HIGH PERFOR
   BANERJEE U, 1991, RES MG PAR, P192
   Bertolacci IJ, 2015, PROCEEDINGS OF THE 29TH ACM INTERNATIONAL CONFERENCE ON SUPERCOMPUTING (ICS'15), P197, DOI 10.1145/2751205.275122
   Bondhugula U, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P101, DOI 10.1145/1375581.1375595
   Chou SP, 2021, Arxiv, DOI [arXiv:2112.01394, 10.48550/ARXIV.2112.01394]
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P389, DOI 10.1007/BF01379404
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P313, DOI 10.1007/BF01407835
   Iannetta Paul, 2021, Technical Report RR-9405
   Jo Y, 2012, ACM SIGPLAN NOTICES, V47, P355, DOI 10.1145/2398857.2384643
   Jo Y, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P463
   Kennedy Ken., 2002, Optimizing compilers for modern architectures: a dependence-based approach
   Kobeissi S, 2020, LECT NOTES COMPUT SC, V12471, P96, DOI 10.1007/978-3-030-60939-9_7
   Larus JamesR., 1988, ACM SIGPLAN Notices, V23, P24, DOI DOI 10.1145/53990.53993
   Pugh W., 1991, Proceedings Supercomputing '91 (Cat. No.91CH3058-5), P4, DOI 10.1145/125826.125848
   RABIN MO, 1959, IBM J RES DEV, V3, P114, DOI 10.1147/rd.32.0114
   Rajbhandari S, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P152, DOI 10.1145/2892208.2892228
   Rajbhandari Samyam., 2016, Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis, SC '16, p40:1
   Sakka L, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P830, DOI 10.1145/3314221.3314626
   Sakka L, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133900
   Simecek Ivan, 2020, HPDC '20: Proceedings of the 29th International Symposium on High-Performance Parallel and Distributed Computing, P29, DOI 10.1145/3369583.3392692
   Sundararajah K, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P902, DOI 10.1145/3314221.3314592
   Sundararajah K, 2017, ACM SIGPLAN NOTICES, V52, P281, DOI 10.1145/3093336.3037720
   Weijiang YS, 2015, ACM SIGPLAN NOTICES, V50, P314, DOI [10.1145/2813885.2737972, 10.1145/2737924.2737972]
   WOLFE M, 1986, INT J PARALLEL PROG, V15, P279, DOI 10.1007/BF01407876
NR 27
TC 0
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 170
DI 10.1145/3563333
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200047
OA gold
DA 2024-07-18
ER

PT J
AU Katsumata, SY
   McDermott, D
   Uustalu, T
   Wu, N
AF Katsumata, Shin-ya
   McDermott, Dylan
   Uustalu, Tarmo
   Wu, Nicolas
TI Flexible Presentations of Graded Monads
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE monad; graded monad; flexible grading; algebraic theory; presentation
   computational effect
ID NOTIONS
AB A large class of monads used to model computational effects have natural presentations by operations and equations, for example, the list monad can be presented by a constant and a binary operation subject to unitality and associativity. Graded monads are a generalization of monads that enable us to track quantitative information about the effects being modelled. Correspondingly, a large class of graded monads can be presented using an existing notion of graded presentation. However, the existing notion has some deficiencies, in particular many effects do not have natural graded presentations.
   We introduce a notion of flexibly graded presentation that does not suffer from these issues, and develop the associated theory. We show that every flexibly graded presentation induces a graded monad equipped with interpretations of the operations of the presentation, and that all graded monads satisfying a particular condition on colimits have a flexibly graded presentation. As part of this, we show that the usual algebra-preserving correspondence between presentations and a class of monads transfers to an algebra-preserving correspondence between flexibly graded presentations and a class of flexibly graded monads.
C1 [Katsumata, Shin-ya] Natl Inst Informat, Tokyo, Japan.
   [McDermott, Dylan; Uustalu, Tarmo] Reykjavik Univ, Reykjavik, Iceland.
   [Uustalu, Tarmo] Tallinn Univ Technol, Tallinn, Estonia.
   [Wu, Nicolas] Imperial Coll London, London, England.
C3 Research Organization of Information & Systems (ROIS); National
   Institute of Informatics (NII) - Japan; Reykjavik University; Tallinn
   University of Technology; Imperial College London
RP Katsumata, SY (corresponding author), Natl Inst Informat, Tokyo, Japan.
EM s-katsumata@nii.ac.jp; dylanm@ru.is; tarmo@ru.is; n.wu@imperial.ac.uk
RI Uustalu, Tarmo/I-1242-2015
OI Uustalu, Tarmo/0000-0002-1297-0579; Katsumata,
   Shin-ya/0000-0001-7529-5489; Wu, Nicolas/0000-0002-4161-985X; McDermott,
   Dylan/0000-0002-6705-1449
FU Icelandic Research Fund [196323-053, 228684-051]; JST [JPMJER1603];
   EPSRC [EP/S028129/1]; EPSRC [EP/S028129/1] Funding Source: UKRI
FX We thank Nathanael Arkor and Georgy Lukyanov for helpful discussions.
   D.M. and T.U. were supported by the Icelandic Research Fund grants no.
   196323-053 and 228684-051. S.K. was supported by the JST project no.
   JPMJER1603 (ERATO HASUO), N.W. by the EPSRC grant no. EP/S028129/1.
CR Adamek J., 2001, Theory and Applications of Categories, V8, P33
   Altenkirch T, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:3)2015
   Cohn Paul M., 1981, MATH ITS APPL, V6, DOI [10.1007/978-94-009-8399-1, DOI 10.1007/978-94-009-8399-1]
   Dorsch Ulrich, 2019, CONCUR
   Durov N., PREPRINT
   Fritz T, 2019, THEOR APPL CATEG, V34, P170
   Fujii S, 2016, LECT NOTES COMPUT SC, V9634, P513, DOI 10.1007/978-3-662-49630-5_30
   Gaboardi M, 2021, LECT NOTES COMPUT SC, V12648, P234, DOI 10.1007/978-3-030-72019-3_9
   Goncharov Sergey, 2013, Algebra and Coalgebra in Computer Science. 5th International Conference, CALCO 2013. Proceedings: LNCS 8089, P158, DOI 10.1007/978-3-642-40206-7_13
   Gordon R, 1999, J PURE APPL ALGEBRA, V137, P29, DOI 10.1016/S0022-4049(97)00167-9
   Hyland M, 2006, THEOR COMPUT SCI, V357, P70, DOI 10.1016/j.tcs.2006.03.013
   Kammar O, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P349
   Katsumata S, 2014, ACM SIGPLAN NOTICES, V49, P633, DOI 10.1145/2535838.2535846
   KELLY GM, 1993, J PURE APPL ALGEBRA, V89, P163, DOI 10.1016/0022-4049(93)90092-8
   Kelly Gregory Maxwell, 1982, London Math. Soc. Lecture Notes Series, V64, DOI 1.3B,2.2E,2.5B,2.6.35,2.8,3,3.1,3.1A,3.1B,3.1B,3.1.27,3.1B,3.1B,3.1.30,3.2A
   Kura S, 2020, LECT NOTES COMPUT SC, V12077, P401, DOI 10.1007/978-3-030-45231-5_21
   Lack S, 2011, APPL CATEGOR STRUCT, V19, P363, DOI 10.1007/s10485-009-9215-2
   Levy Paul B., 2019, Locally Graded Categories
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   McDermott Dylan, 2022, LECT NOTES COMPUT SC
   Mellies P.-A., 2012, PARAMETRIC MON UNPUB
   Melliès PA, 2010, IEEE S LOG, P150, DOI 10.1109/LICS.2010.46
   Milius S., 2015, LIPICS, V35, P253, DOI DOI 10.4230/LIPICS.CALCO.2015.253
   Mycroft A, 2016, LECT NOTES COMPUT SC, V9560, P1, DOI 10.1007/978-3-319-27810-0_1
   Piróg M, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796817000077
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Smirnov A., 2008, J MATH SCI, V151, P3032, DOI DOI 10.1007/S10958-008-9013-7
   Staton S, 2013, LECT NOTES COMPUT SC, V7794, P401, DOI 10.1007/978-3-642-37075-5_26
   Str72b Ross Street, 1972, Cah. Topol. Geom. Differ., V13, P217
   Szlachányi K, 2017, J PURE APPL ALGEBRA, V221, P185, DOI 10.1016/j.jpaa.2016.06.003
   Wood Richard James, 1976, PhD thesis
NR 32
TC 3
Z9 3
U1 1
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 123
DI 10.1145/3547654
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000034
OA gold
DA 2024-07-18
ER

PT J
AU Georges, AL
   Trieu, A
   Birkedal, L
AF Georges, Aina Linn
   Trieu, Alix
   Birkedal, Lars
TI Le Temps des Cerises: Efficient Temporal Stack Safety on Capability
   Machines using Directed Capabilities
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE capability machines; logical relation; Iris; separation logic; full
   absraction; security; stack safety
AB Capability machines are a type of CPUs that support fine-grained privilege separation using capabilities, machine words that include forms of authority. Formal models of capability machines and associated calling conventions have so far focused on establishing two forms of stack safety properties, namely local state encapsulation and well-bracketed control flow. We introduce a novel kind of directed capabilities and show how to use them to make an earlier suggested calling convention more efficient. In contrast to earlier work on capability machine models we do not only consider integrity properties but also confidentiality properties; we provide a unary logical relation to reason about the former and a binary logical relation to reason about the latter, each expressive enough to reason about temporal stack safety. While the logical relations are useful for reasoning about concrete examples, they do not on their own demonstrate that stack safety holds for a large class of programs. Therefore, we also show full abstraction of a compiler from an overlay semantics that internalizes the calling convention as a single call step and explicitly keeps track of the call stack and frame lifetimes to a base capability machine. All results have been mechanized in Coq.
C1 [Trieu, Alix] ANSSI, Paris, France.
RP Georges, AL (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM ageorges@cs.au.dk; alix.trieu@ssi.gouv.fr; birkedal@cs.au.dk
OI Birkedal, Lars/0000-0003-1320-0098; Georges, Aina
   Linn/0000-0002-5951-4642
FU Villum Investigator grant [25804]; Center for Basic Research in Program
   Verification (CPV); VILLUM Foundation
FX We thank the anonymous reviewers for excellent comments and suggestions.
   This work was supported in part by a Villum Investigator grant (no.
   25804), Center for Basic Research in Program Verification (CPV), from
   the VILLUM Foundation. We would also like to thank Dominique Devriese,
   Thomas Van Strydonck, Amin Timany, Armael Gueneau and Frank Piessens for
   invaluable discussions and feedback.
CR Abadi M., 1999, Secure Internet programming. Security issues for mobile and distributed objects, P19
   Abate C, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P1351, DOI 10.1145/3243734.3243745
   Ahmed Amal, 2009, Proceedings of the 36th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2009, Savannah, GA, USA, January 21-23, 2009, P340, DOI DOI 10.1145/1594834.1480925
   Ahmed Amal J., 2004, Ph. D. Dissertation
   Anderson Sean Noble, CORR ABS210500417 20
   [Anonymous], 1984, Capability-Based Computer Systems
   Arm, 2021, MOR PROJ
   Bauereiss Thomas., 2022, ESOP, V13240, P174, DOI [10.1007/978-3-030-99336-8_7, DOI 10.1007/978-3-030-99336-8_7]
   Birkedal L, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1926385.1926401
   CARTER NP, 1994, SIGPLAN NOTICES, V29, P319, DOI 10.1145/195470.195579
   Chromium, 2020, MEM SAF
   de Amorim AA, 2015, P IEEE S SECUR PRIV, P813, DOI 10.1109/SP.2015.55
   de Amorim AA, 2014, ACM SIGPLAN NOTICES, V49, P165, DOI 10.1145/2535838.2535839
   de Amorim Arthur Azevedo, 2018, P LECT NOTES COMPUTE, V10804, DOI 10.1007
   DENNIS JB, 1966, COMMUN ACM, V9, P143, DOI 10.1145/365230.365252
   Devriese D, 2016, 1ST IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY, P147, DOI 10.1109/EuroSP.2016.22
   Dreyer D, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P185, DOI 10.1145/1706299.1706323
   Dreyer Derek, 2010, P 15 ACM SIGPLAN INT, DOI [10.1145/1863543.1863566, DOI 10.1145/1863543.1863566]
   Dreyer Derek, 2011, LMCS, V7, p1s37
   El-Korashy Akram, 2021 IEEE 34 COMP SE, DOI [10.1109/CSF51468.2021, DOI 10.1109/CSF51468.2021]
   Filardo NW, 2020, P IEEE S SECUR PRIV, P608, DOI 10.1109/SP40000.2020.00098
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Georges AL, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434287
   Georges Aina Linn, 2022, ARTIFACT TEMPS CERIS, DOI [10.5281/zenodo.5821862, DOI 10.5281/ZENODO.5821862]
   Georges Aina Linn, 2022, TEMPS CERISES EFFICI
   Joly Nicolas, 2020, Technical Report
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kolosick Matthew, 2022, ACM SIGPLAN S PRINC
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krebbers Robbert, 2018, PACMPL 2 ICFP, V77, p1s77:30, DOI [10.1145/3236772, DOI 10.1145/3236772]
   Krebbers Robbert, 2017, PROGRAMMING LANGUAGE, DOI [10.1007/978, DOI 10.1007/978]
   Krogh-Jespersen M, 2017, ACM SIGPLAN NOTICES, V52, P218, DOI 10.1145/3093333.3009877
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Nienhuis K, 2020, P IEEE S SECUR PRIV, P1003, DOI 10.1109/SP40000.2020.00055
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Roessler N, 2018, P IEEE S SECUR PRIV, P478, DOI 10.1109/SP.2018.00066
   Skorstengaard, 2019, THESIS AARHUS U
   Skorstengaard L., 2018, PROGRAMMING LANGUAGE, P475
   Skorstengaard L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290332
   Skorstengaard L, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3363519
   Sumii E, 2007, J ACM, V54, DOI 10.1145/1284320.1284325
   Szekeres L, 2013, P IEEE S SECUR PRIV, P48, DOI 10.1109/SP.2013.13
   Thomas Gavin, 2019, A proactive approach to more secure code
   Tsampas S, 2019, P IEEE COMPUT SECUR, P243, DOI 10.1109/CSF.2019.00024
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Van Strydonck T, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000022
   Wahbe R., 1993, Operating Systems Review, V27, P203, DOI 10.1145/173668.168635
   Watson R. N. M., 2020, Tech. Rep. UCAM-CL-TR-951
   Watson Robert NM, 2015, IEEE S SECURITY PRIV
   Woodruff Jonathan, 2019, IEEE T COMPUTERS, V68, DOI [10.1109/TC, DOI 10.1109/TC]
   Xia HY, 2019, MICRO'52: THE 52ND ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, P545, DOI 10.1145/3352460.3358288
NR 53
TC 7
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 74
DI 10.1145/3527318
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300010
OA gold
DA 2024-07-18
ER

PT J
AU Bao, JL
   Gaboardi, M
   Hsu, J
   Tassarotti, J
AF Bao, Jialu
   Gaboardi, Marco
   Hsu, Justin
   Tassarotti, Joseph
TI A Separation Logic for Negative Dependence
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Probabilistic programs; separation logic; negative dependence
ID SEMANTICS
AB Formal reasoning about hashing-based probabilistic data structures often requires reasoning about random variables where when one variable gets larger (such as the number of elements hashed into one bucket), the others tend to be smaller (like the number of elements hashed into the other buckets). This is an example of negative dependence, a generalization of probabilistic independence that has recently found interesting applications in algorithm design and machine learning. Despite the usefulness of negative dependence for the analyses of probabilistic data structures, existing verification methods cannot establish this property for randomized programs.
   To fill this gap, we design LINA, a probabilistic separation logic for reasoning about negative dependence. Following recent works on probabilistic separation logic using separating conjunction to reason about the probabilistic independence of random variables, we use separating conjunction to reason about negative dependence. Our assertion logic features two separating conjunctions, one for independence and one for negative dependence. We generalize the logic of bunched implications (BI) to support multiple separating conjunctions, and provide a sound and complete proof system. Notably, the semantics for separating conjunction relies on a non-deterministic, rather than partial, operation for combining resources. By drawing on closure properties for negative dependence, our program logic supports a Frame-like rule for negative dependence and monotone operations. We demonstrate how LINA can verify probabilistic properties of hash-based data structures and balls-into-bins processes.
C1 [Bao, Jialu; Hsu, Justin] Cornell Univ, Ithaca, NY 14853 USA.
   [Gaboardi, Marco] Boston Univ, Boston, MA 02215 USA.
   [Tassarotti, Joseph] Boston Coll, Chestnut Hill, MA 02167 USA.
C3 Cornell University; Boston University; Boston College
RP Bao, JL (corresponding author), Cornell Univ, Ithaca, NY 14853 USA.
RI Gaboardi, Marco/JPX-6816-2023
OI Hsu, Justin/0000-0002-8953-7060
FU NSF [2035314, 1943130, 2040249, 2040222, 2152831]; Direct For Computer &
   Info Scie & Enginr; Division of Computing and Communication Foundations
   [2040222, 2035314] Funding Source: National Science Foundation; Division
   Of Computer and Network Systems; Direct For Computer & Info Scie &
   Enginr [2040249, 2152831] Funding Source: National Science Foundation;
   Division of Computing and Communication Foundations; Direct For Computer
   & Info Scie & Enginr [1943130] Funding Source: National Science
   Foundation
FX We thank the anonymous reviewers for their helpful feedback and
   suggestions. This work benefited from discussions with Simon Docherty.
   This work was supported in part by the NSF under Grant No. 2035314,
   1943130, 2040249, 2040222 and 2152831.
CR Anari Nima, 2016, 29 ANN C LEARN THEOR, P103
   Bao JL, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470712
   Bao Jialu, 2022, P ACM PROGR LANG 6 P, V6
   Barthe Gilles, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P1, DOI 10.1007/978-3-642-31113-0_1
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371123
   Batz K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290347
   Becchetti L, 2019, DISTRIB COMPUT, V32, P59, DOI 10.1007/s00446-017-0320-4
   Bercea Ioana Oriana, 2019, CoRR abs/1911.05060
   BLOOM BH, 1970, COMMUN ACM, V13, P422, DOI 10.1145/362686.362692
   Borcea J, 2009, J AM MATH SOC, V22, P521
   Bose P, 2008, INFORM PROCESS LETT, V108, P210, DOI 10.1016/j.ipl.2008.05.018
   Brändén P, 2012, SCAND J STAT, V39, P830, DOI 10.1111/j.1467-9469.2011.00766.x
   Brookes S, 2007, THEOR COMPUT SCI, V375, P227, DOI 10.1016/j.tcs.2006.12.034
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Ding B, 2011, PROC VLDB ENDOW, V4, P255, DOI 10.14778/1938545.1938550
   Docherty S. R., 2019, THESIS UCL
   Dubhashi D, 1998, RANDOM STRUCT ALGOR, V13, P99, DOI 10.1002/(SICI)1098-2418(199809)13:2<99::AID-RSA1>3.0.CO;2-M
   Dubhashi D, 2007, COMB PROBAB COMPUT, V16, P29, DOI 10.1017/S0963548306007772
   Gopinathan K, 2020, LECT NOTES COMPUT SC, V12225, P279, DOI 10.1007/978-3-030-53291-8_16
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   JOAGDEV K, 1983, ANN STAT, V11, P286, DOI 10.1214/aos/1176346079
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Kulesza A, 2012, FOUND TRENDS MACH LE, V5, P123, DOI 10.1561/2200000044
   Mitzenmacher Michael, 2017, PROBABILITY COMPUTIN
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   Pagel J, 2021, LECT NOTES COMPUT SC, V12648, P664, DOI 10.1007/978-3-030-72019-3_24
   Pemantle R, 2000, J MATH PHYS, V41, P1371, DOI 10.1063/1.533200
   Pym David J., 2002, Applied Logic Series, V26
   Pym DJ, 2004, THEOR COMPUT SCI, V315, P257, DOI 10.1016/j.tcs.2003.11.020
   Reynolds John C., 2001, MILLENNIAL PERSPECTI, V2, P303
   Sergey I, 2015, ACM SIGPLAN NOTICES, V50, P77, DOI [10.1145/2813885.2737964, 10.1145/2737924.2737964]
   Srinivasan A, 2001, ANN IEEE SYMP FOUND, P588, DOI 10.1109/SFCS.2001.959935
   Tassarotti J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290377
   Wang JY, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1171, DOI 10.1145/3453483.3454102
NR 38
TC 4
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 57
DI 10.1145/3498719
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900058
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Choudhury, V
   Karwowski, J
   Sabry, A
AF Choudhury, Vikraman
   Karwowski, Jacek
   Sabry, Amr
TI Symmetries in Reversible Programming From Symmetric Rig Groupoids to
   Reversible Programming Languages
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE reversible computing; reversible programming languages; homotopy type
   theory; univalent foundations; groupoids; groups; rewriting;
   permutations; type isomorphisms
ID LOGIC; ALGORITHM
AB The. family of reversible programming languages for boolean circuits is presented as a syntax of combinators witnessing type isomorphisms of algebraic data types. In this paper, we give a denotational semantics for this language, using weak groupoids a la Homotopy Type Theory, and show how to derive an equational theory for it, presented by 2-combinators witnessing equivalences of type isomorphisms.
   We establish a correspondence between the syntactic groupoid of the language and a formally presented univalent subuniverse of finite types. The correspondence relates 1-combinators to 1-paths, and 2-combinators to 2-paths in the universe, which is shown to be sound and complete for both levels, forming an equivalence of groupoids. We use this to establish a Curry-Howard-Lambek correspondence between Reversible Logic, Reversible Programming Languages, and Symmetric Rig Groupoids, by showing that the syntax of. is presented by the free symmetric rig groupoid, given by finite sets and bijections.
   Using the formalisation of our results, we perform normalisation-by-evaluation, verification and synthesis of reversible logic gates, motivated by examples from quantum computing. We also show how to reason about and transfer theorems between different representations of reversible circuits.
C1 [Choudhury, Vikraman; Sabry, Amr] Indiana Univ, Dept Comp Sci, Bloomington, IN 47408 USA.
   [Choudhury, Vikraman] Univ Cambridge, Cambridge CB3 0FD, England.
   [Karwowski, Jacek] Univ Warsaw, Fac Math Informat & Mech, PL-00927 Warsaw, Poland.
   [Choudhury, Vikraman] Dept Comp Sci & Technol, Cambridge CB3 0FD, England.
C3 Indiana University System; Indiana University Bloomington; University of
   Cambridge; University of Warsaw
RP Choudhury, V (corresponding author), Indiana Univ, Dept Comp Sci, Bloomington, IN 47408 USA.; Choudhury, V (corresponding author), Univ Cambridge, Cambridge CB3 0FD, England.; Choudhury, V (corresponding author), Dept Comp Sci & Technol, Cambridge CB3 0FD, England.
EM vikraman@indiana.edu; jk359713@students.mimuw.edu.pl; sabry@indiana.edu
OI Choudhury, Vikraman/0000-0003-2030-8056; Karwowski,
   Jacek/0000-0002-8361-2912; Sabry, Amr/0000-0002-1025-7331
CR Aaronson S., 2017, 8 INN THEOR COMP SCI, V23, P34, DOI DOI 10.4230/LIPICS.ITCS.2017.23
   Abramsky S, 2005, THEOR COMPUT SCI, V347, P441, DOI 10.1016/j.tcs.2005.07.002
   Abramsky Samson, 2005, LECT NOTES COMPUTER, p1s29, DOI DOI 10.1007/11548133_1
   Aleksandrowicz Gadi, 2019, Zenodo, DOI 10.5281/ZENODO.2562111
   Angiuli Carlo, 2019, PhD thesis
   Angiuli Carlo, 2021, P ACM PROGR LANG POP, DOI 10.1145/
   [Anonymous], 1997, ART COMPUTER PROGRAM
   [Anonymous], 1970, Computational Problems in Abstract Algebra, DOI DOI 10.1016/B978-0-08-012975-4.50028-X
   Baez J.C., 2001, MATH UNLIMITED 2001, P29, DOI DOI 10.1007/978-3-642-56478-9_3
   Baez JC, 2010, THEOR APPL CATEG, V24, P489
   Baez John C., 2021, ARXIV210104238CSMATH
   Baker Henry G., LECT NOTES COMPUTER, DOI [10.1007/BFb0017210, DOI 10.1007/BFB0017210]
   BAKER HG, 1992, SIGPLAN NOTICES, V27, P89, DOI 10.1145/142137.142162
   Beauregard S, 2003, QUANTUM INF COMPUT, V3, P175
   Beke T, 2011, J PURE APPL ALGEBRA, V215, P728, DOI 10.1016/j.jpaa.2010.06.019
   Bellman Richard., 1960, Proceedings of Symposia in Applied Mathematics, V10
   BENNETT CH, 1985, SCI AM, V253, P48, DOI 10.1038/scientificamerican0785-48
   Berger S, 2019, ENTROPY-SWITZ, V21, DOI 10.3390/e21101023
   Beylin I, 1996, LECT NOTES COMPUT SC, V1158, P47
   Bezem M., 2021, Symmetry
   BLACKWELL R, 1989, J PURE APPL ALGEBRA, V59, P1, DOI 10.1016/0022-4049(89)90160-6
   Bowman WilliamJ., 2011, RC
   Buchholtz U, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P205, DOI 10.1145/3209108.3209150
   Buchholtz U, 2017, IEEE S LOG
   Carette J, 2018, ELECTRON NOTES THEOR, V336, P5, DOI 10.1016/j.entcs.2018.03.013
   Carette J, 2016, LECT NOTES COMPUT SC, V9632, P123, DOI 10.1007/978-3-662-49498-1_6
   Carette Jacques, 2021, ADV COMPUT, V126
   Chao-Hong Chen, 2020, Reversible Computation. 12th International Conference, RC 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12227), P169, DOI 10.1007/978-3-030-52482-1_10
   Chen CH, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434290
   Choudhury Vikraman., 2021, SYMMETRIES REVERSIBL
   Choudhury Vikraman, 2021, FREE COMMUTATIVE MON
   Choudhury Vikraman, 2019, FINITE MULTISET CONS, P40
   Choudhury Vikraman, Zenodo, DOI 10.5281/zenodo.5671746
   Christensen Dan, 2015, CHARACTERIZATION UNI, P53
   Cohen Cyril., 2018, Cubical Type Theory: A Constructive Interpretation of the Univalence Axiom", P34, DOI [DOI 10.4230/LIPICS.TYPES.2015.5, 10.4230/LIPIcs.TYPES.2015.5]
   Cohen Jonathan Asher, 2009, ARXIV 09040125CSMATH
   Curry H.B., 1980, HB CURRY ESSAYS COMB
   Danos V, 2004, LECT NOTES COMPUT SC, V3170, P292
   Di Pierro A, 2006, MATH STRUCT COMP SCI, V16, P621, DOI 10.1017/S0960129506005391
   Dubois C, 2018, FORM ASP COMPUT, V30, P659, DOI 10.1007/s00165-018-0459-1
   Elgueta J, 2021, J PURE APPL ALGEBRA, V225, DOI 10.1016/j.jpaa.2021.106738
   FEYNMAN RP, 1982, INT J THEOR PHYS, V21, P467, DOI 10.1007/BF02650179
   Fiore M, 2008, J LOND MATH SOC, V77, P203, DOI 10.1112/jlms/jdm096
   Fiore M, 2002, IEEE S LOG, P147, DOI 10.1109/LICS.2002.1029824
   Fiore M, 2010, LECT NOTES COMPUT SC, V6281, P368, DOI 10.1007/978-3-642-15155-2_33
   Forest Simon., 2018, Coherence of Gray Categories via Rewriting", P16, DOI [DOI 10.4230/LIPICS.FSCD.2018.15, 10.4230/LIPICS.FSCD.2018.15]
   Frank Michael, 1999, Ph. D. Dissertation., DOI 1721.1/9464
   FREDKIN E, 1982, INT J THEOR PHYS, V21, P219, DOI 10.1007/BF01857727
   Gurski N, 2013, ADV MATH, V246, P1, DOI 10.1016/j.aim.2013.06.028
   Gylterud HR, 2020, MATH PROC CAMBRIDGE, V169, P1, DOI 10.1017/S0305004119000045
   Hey AnthonyJG., 1999, Feynman and computation
   Hiver Florent, MATH COMPONENTS
   Huelsbergen Lorenz., 1996, InterJournal Complex Systems, V46
   HUET G, 1980, J ACM, V27, P797, DOI 10.1145/322217.322230
   Hyland JME, 2017, MATH STRUCT COMP SCI, V27, P762, DOI 10.1017/S0960129515000377
   Hyland Martin, 2004, ELECTRON NOTES THEOR, V100, P31, DOI [10.1016/j.entcs.2004.09.004, DOI 10.1016/J.ENTCS.2004.09.004]
   James RP, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P73
   James RoshanP., 2014, Reversible Computation
   JOYAL A, 1993, ADV MATH, V102, P20, DOI 10.1006/aima.1993.1055
   Kapulkin Chris, 2012, UNIVALENCE SIMPLICIA
   Kapulkin K, 2021, J EUR MATH SOC, V23, P2071, DOI 10.4171/JEMS/1050
   Kelly G., 1974, CATEGORY SEMINAR, P281, DOI DOI 10.1007/BFB0063106
   Kluge W, 2000, LECT NOTES COMPUT SC, V1868, P95
   Kraus N, 2020, IEEE S LOG, P662, DOI 10.1145/3373718.3394800
   Krogmeier P, 2020, LECT NOTES COMPUT SC, V12225, P634, DOI 10.1007/978-3-030-53291-8_32
   Lafont Y, 2003, J PURE APPL ALGEBRA, V184, P257, DOI 10.1016/S0022-4049(03)00069-0
   Laisant CA, 1888, Bulletin de la Societe Mathematique de France, V16, P176, DOI [10.24033/bsmf.378, DOI 10.24033/BSMF.378]
   LANDAUER R, 1961, IBM J RES DEV, V5, P183, DOI 10.1147/rd.53.0183
   Laplaza, 1972, Lecture Notes in Mathematics), V281, P29, DOI [10.1007/BFb0059555, DOI 10.1007/BFB0059555]
   LAWVERE FW, 1963, P NATL ACAD SCI USA, V50, P869, DOI 10.1073/pnas.50.5.869
   Lehmer D. H., 1960, Combinatorial Analysis, V10, P179
   Mac Lane S., 1963, Rice. Univ. Stud., V49, P28
   Malliès PA, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785830
   Maslov Dmitri., 2003, REVERSIBLE LOGIC SYN
   MATSUMOTO H, 1964, CR HEBD ACAD SCI, V258, P3419
   Miller DM, 2003, DES AUT CON, P318
   Molzer Martin, CUBICAL AGDA SIMPLE
   Mu SC, 2004, LECT NOTES COMPUT SC, V3125, P289
   Orton Ian, 2018, LEIBNIZ INT P INF LI
   PERES A, 1985, PHYS REV A, V32, P3266, DOI 10.1103/PhysRevA.32.3266
   Petrakis I., 2019, Univalent Typoids"
   Piceghello Stefano., 2019, Coherence for Symmetric Monoidal Groupoids in HoTT/UF", P2
   Piceghello Stefano, 2020, LEIBNIZ INT P INFORM, V8, P20, DOI 10.4230
   Sabry Amr, [JacquesCarette/Pi-Dual: Second Alpha Release, Zenodo], DOI 10.5281/zenodo.5620828
   Shende VV, 2003, IEEE T COMPUT AID D, V22, P710, DOI 10.1109/TCAD.2003.811448
   Sparks Zachary., 2014, Superstructural Reversible Logic", P12
   Spiwack Arnaud, 2010, CONSTRUCTIVELY FINIT
   Tabareau N, 2021, J ACM, V68, DOI 10.1145/3429979
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   Toffoli T., 1980, Automata, Languages and Programming, Seventh Colloquium, P632
   Vajnovszki V, 2011, DISCRETE APPL MATH, V159, P1453, DOI 10.1016/j.dam.2011.05.012
   van Tonder A, 2004, SIAM J COMPUT, V33, P1109, DOI 10.1137/S0097539703432165
   Vezzosi A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341691
   Yanofsky N, 2000, CAHIERS TOPOLOGIE GE, V41, P255
   Yokoyama T., 2008, P 5 C COMPUTING FRON, P43, DOI DOI 10.1145/1366230.1366239
   Yokoyama T., 2007, P 2007 ACM SIGPLAN W, P144, DOI DOI 10.1145/1244381.1244404
   Yorgey Brent Abraham, 2014, COMBINATORIAL SPECIE, P1
NR 97
TC 2
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 6
DI 10.1145/3498667
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900007
OA Green Accepted, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Sangiorgi, D
AF Sangiorgi, Davide
TI From Enhanced Coinduction towards Enhanced Induction
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE coinduction; behavioural relations; process calculi; proof techniques
ID SEMANTICS; ALGEBRA; BISIMULATION; SYSTEMS; LAWS
AB There exist a rich and well-developed theory of enhancements of the coinduction proof method, widely used on behavioural relations such as bisimilarity. We study how to develop an analogous theory for inductive behaviour relations, i.e., relations defined from inductive observables. Similarly to the coinductive setting, our theory makes use of (semi)-progressions of the form R (sic) F (R), where R is a relation on processes and F is a function on relations, meaning that there is an appropriate match on the transitions that the processes in R can perform in which the process derivatives are in F (R). For a given preorder, an enhancement corresponds to a sound function, i.e., one for which R (sic) F (R) implies that R is contained in the preorder; and similarly for equivalences. We introduce weights on the observables of an inductive relation, and a weight-preserving condition on functions that guarantees soundness. We show that the class of weight-preserving functions contains non-trivial functions and enjoys closure properties with respect to desirable function constructors, so to be able to derive sophisticated sound functions (and hence sophisticated proof techniques) from simpler ones. We consider both strong semantics (in which all actions are treated equally) and weak semantics (in which one abstracts from internal transitions). We test our enhancements on a few non-trivial examples.
C1 [Sangiorgi, Davide] Univ Bologna, Dept Comp Sci DISI, Bologna, Italy.
   [Sangiorgi, Davide] INRIA, Inria Sophia Mediterranee, Sophia Antipolis, France.
C3 University of Bologna; Inria
RP Sangiorgi, D (corresponding author), Univ Bologna, Dept Comp Sci DISI, Bologna, Italy.; Sangiorgi, D (corresponding author), INRIA, Inria Sophia Mediterranee, Sophia Antipolis, France.
EM Davide.Sangiorgi@unibo.it
OI SANGIORGI, DAVIDE/0000-0001-5823-3235
FU MIUR-PRIN project 'Analysis of Program Analyses' (ASPRA)
   [201784YSZ5_004]
FX This material is based upon work supported by the MIUR-PRIN project
   'Analysis of Program Analyses' (ASPRA, ID 201784YSZ5_004).
CR [Anonymous], 2001, Modal and Temporal properties of processes
   [Anonymous], 2001, HDB PROCESS ALGEBRA, DOI DOI 10.1016/B978-044482830-9/50019-9
   BAETEN JCM, 1987, COMPUT J, V30, P498, DOI 10.1093/comjnl/30.6.498
   Bartels F., 2003, Mathematical Structures in Computer Science, V13, P321, DOI 10.1017/S0960129502003900
   Bartels F., 2004, THESIS CWI AMSTERDAM
   Bergstra Jan A., 1987, LECT NOTES COMPUTER, P77
   BLOOM B, 1995, J ASSOC COMPUT MACH, V42, P232, DOI 10.1145/200836.200876
   Bonchi F, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P175, DOI 10.1145/3209108.3209169
   Bonchi F, 2017, LECT NOTES COMPUT SC, V10205, P535, DOI 10.1007/978-3-662-54577-5_31
   Bonchi F, 2017, ACTA INFORM, V54, P127, DOI 10.1007/s00236-016-0271-4
   Bonchi F, 2013, ACM SIGPLAN NOTICES, V48, P457, DOI 10.1145/2480359.2429124
   Bonchi Filippo, 2017, LIPICS, V72, DOI [10.4230/LIPIcs.CALCO.2017.5, DOI 10.4230/LIPICS.CALCO.2017.5]
   Bonchi Filippo, 2018, LEIBNIZ INT P INFORM, V118
   Brandt M., 1998, Fundamenta Informaticae, V33, P309
   BROOKES SD, 1984, J ACM, V31, P560, DOI 10.1145/828.833
   BROOKES SD, 1985, LECT NOTES COMPUT SC, V197, P281
   Cleaveland R., 1993, Formal Aspects of Computing, V5, P1, DOI 10.1007/BF01211314
   DENICOLA R, 1984, THEOR COMPUT SCI, V34, P83, DOI 10.1016/0304-3975(84)90113-0
   Durier A, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(3:12)2019
   Endrullis J, 2013, LECT NOTES COMPUT SC, V7998, P354, DOI 10.1007/978-3-642-39634-2_26
   Escrig DD, 2009, INFORM COMPUT, V207, P146, DOI 10.1016/j.ic.2007.12.003
   GROOTE JF, 1992, INFORM COMPUT, V100, P202, DOI 10.1016/0890-5401(92)90013-6
   HENNESSY M, 1985, J ACM, V32, P137, DOI 10.1145/2455.2460
   Hennessy M., 1988, An algebraic theory of processes
   Hennessy M, 2017, LECT NOTES COMPUT SC, V10460, P449, DOI 10.1007/978-3-319-63121-9_22
   Hopcroft J. E., 2006, INTRO AUTOMATA THEOR
   Jacobs B, 2006, INFORM COMPUT, V204, P561, DOI 10.1016/j.ic.2005.03.006
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   Lenisa M., 2000, Electronic Notes in Theoretical Computer Science, V33, DOI 10.1016/S1571-0661(05)80350-0
   Lenisa M., 1999, Electronic Notes in Theoretical Computer Science, V19, DOI 10.1016/S1571-0661(05)80265-8
   Milius S, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(3:28)2013
   Milner R., 1989, Communication and concurrency
   OLDEROG ER, 1986, ACTA INFORM, V23, P9, DOI 10.1007/BF00268075
   PARK D, 1981, B EATCS, V14, P78
   Parrow J, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(2:11)2016
   PHILLIPS I, 1987, THEOR COMPUT SCI, V50, P241, DOI 10.1016/0304-3975(87)90117-4
   PNUELI A, 1985, LECT NOTES COMPUT SC, V194, P15
   POMELLO L, 1986, LECT NOTES COMPUT SC, V222, P381
   Pons D, 2007, LECT NOTES COMPUT SC, V4807, P351
   Pous D, 2019, FORM ASP COMPUT, V31, P733, DOI 10.1007/s00165-019-00497-w
   Pous D, 2017, LECT NOTES COMPUT SC, V10203, P106, DOI 10.1007/978-3-662-54458-7_7
   Pous D, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P307, DOI 10.1145/2933575.2934564
   Rabinovich AM., 1994, LECT NOTES COMPUTER, P530, DOI 10.1007/3-540-58027-1_25
   Roscoe A.W., 1998, THEORY PRACTICE CONC
   Rot J, 2017, MATH STRUCT COMP SCI, V27, P1236, DOI 10.1017/S0960129515000523
   Rot J, 2016, INFORM COMPUT, V246, P62, DOI 10.1016/j.ic.2015.11.009
   SALOMAA A, 1966, J ACM, V13, P158, DOI 10.1145/321312.321326
   SANGIORGI D, 1992, LECT NOTES COMPUT SC, V630, P32
   Sangiorgi D., 1998, Mathematical Structures in Computer Science, V8, P447, DOI 10.1017/S0960129598002527
   Sangiorgi D., 2012, Cambridge tracts in theoretical computer science, V52, P233
   Sangiorgi D, 2017, ACM T COMPUT LOG, V18, DOI 10.1145/2971339
   Sangiorgi Davide, 2011, Introduction to Bisimulation and Coinduction, DOI DOI 10.1017/CBO9780511777110
   Silva A, 2010, LEIBNIZ INT PR INFOR, V8, P272, DOI 10.4230/LIPIcs.FSTTCS.2010.272
   Uustalu T., 2001, Nordic Journal of Computing, V8, P366
   van Glabbeek R. J., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P66
NR 55
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 18
DI 10.1145/3498679
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900019
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Burckhardt, S
   Gillum, C
   Justo, D
   Kallas, K
   McMahon, C
   Meiklejohn, CS
AF Burckhardt, Sebastian
   Gillum, Chris
   Justo, David
   Kallas, Konstantinos
   McMahon, Connor
   Meiklejohn, Christopher S.
TI Durable Functions: Semantics for Stateful Serverless
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Durable Functions; Serverless; Services; Service Composition;
   Programming; Workflows; Reliable
AB Serverless, or Functions-as-a-Service (FaaS), is an increasingly popular paradigm for application development, as it provides implicit elastic scaling and load based billing. However, the weak execution guarantees and intrinsic compute-storage separation of FaaS create serious challenges when developing applications that require persistent state, reliable progress, or synchronization. This has motivated a new generation of serverless frameworks that provide stateful abstractions. For instance, Azure's Durable Functions (DF) programming model enhances FaaS with actors, workflows, and critical sections.
   As a programming model, DF is interesting because it combines task and actor parallelism, which makes it suitable for a wide range of serverless applications. We describe DF both informally, using examples, and formally, using an idealized high-level model based on the untyped lambda calculus. Next, we demystify how the DF runtime can (1) execute in a distributed unreliable serverless environment with compute-storage separation, yet still conform to the fault-free high-level model, and (2) persist execution progress without requiring checkpointing support by the language runtime. To this end we define two progressively more complex execution models, which contain the compute-storage separation and the record-replay, and prove that they are equivalent to the high-level model.
C1 [Burckhardt, Sebastian] Microsoft Res, Redmond, WA 98052 USA.
   [Gillum, Chris; Justo, David; McMahon, Connor] Microsoft Azure, Redmond, WA USA.
   [Kallas, Konstantinos] Univ Penn, Philadelphia, PA 19104 USA.
   [Meiklejohn, Christopher S.] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Microsoft; University of Pennsylvania; Carnegie Mellon University
RP Burckhardt, S (corresponding author), Microsoft Res, Redmond, WA 98052 USA.
EM sburckha@microsoft.com; cgillum@microsoft.com; dajusto@microsoft.com;
   kallas@seas.upenn.edu; comcmaho@microsoft.com; cmeiklej@cs.cmu.edu
CR Amazon, 2020, AWS STEP FUNCT
   Armstrong J, 1997, ACM SIGPLAN NOTICES, V32, P196, DOI 10.1145/258949.258967
   Baldini I, 2017, PROCEEDINGS OF THE 2017 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD!'17), P89, DOI 10.1145/3133850.3133855
   Boner Jonas, 2020, STATEFUL SERVERLESS
   Burckhardt Sebastian, 2021, ARXIV PREPRINT ARXIV
   Carbone P., 2015, IEEE DATA ENG B, V36, P28, DOI DOI 10.1109/IC2EW.2016.56
   CloudFlare, 2020, US DUR OBJ
   CloudFlare, 2020, WORK DUR OBJ BET NEW
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Flanagan C., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P209, DOI 10.1145/199448.199484
   Fouladi S, 2019, PROCEEDINGS OF THE 2019 USENIX ANNUAL TECHNICAL CONFERENCE, P475
   Fouladi S, 2017, PROCEEDINGS OF NSDI '17: 14TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P363
   Garcia Lopez Pedro, 2020, DEBS '20: Proceedings of the 14th ACM International Conference on Distributed and Event-based Systems, P3, DOI 10.1145/3401025.3401731
   López PG, 2018, INT CONF UTIL CLOUD, P148, DOI 10.1109/UCC-Companion.2018.00049
   Geller A., 2011, Proceedings of the 2nd ACM Symposium on Cloud Computing, ser. SOCC'11, Cascais, P16, DOI [DOI 10.1145/2038916.2038932, 10.1145/2038916.2038932]
   github, 2021, DUR TASK NETH BACK
   github, DUR TASK FRAM
   github, 2021, DUR TASK MSSQL BACK
   Goldstein J, 2020, PROC VLDB ENDOW, V13, P588, DOI 10.14778/3377369.3377370
   Haller P., 2012, Proceedings of the 2nd edition on Programming systems, languages and applications based on actors, agents, and decentralized control abstractions, P1, DOI DOI 10.1145/2414639.2414641
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Hellerstein Joseph M, 2020, ARXIV PREPRINT ARXIV
   Jangda A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360575
   Jonas E, 2017, PROCEEDINGS OF THE 2017 SYMPOSIUM ON CLOUD COMPUTING (SOCC '17), P445, DOI 10.1145/3127479.3128601
   Microsoft, 2020, WHAT AR DUR FUNCT MI
   Microsoft Azure, 2021, AZ SQL
   Microsoft Azure, 2020, AZ LOG APPS DOC
   Miller H, 2014, LECT NOTES COMPUT SC, V8586, P308
   Moreau L, 1996, ACM SIGPLAN NOTICES, V31, P146, DOI 10.1145/232629.232644
   Müller I, 2020, SIGMOD'20: PROCEEDINGS OF THE 2020 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P115, DOI 10.1145/3318464.3389758
   Perron M, 2020, SIGMOD'20: PROCEEDINGS OF THE 2020 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P131, DOI 10.1145/3318464.3380609
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Ramalingam G, 2013, ACM SIGPLAN NOTICES, V48, P249, DOI 10.1145/2480359.2429100
   Shegalov G, 2001, VLDB J, V10, P91
   Sreekanti V, 2020, PROCEEDINGS OF THE FIFTEENTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS'20), DOI 10.1145/3342195.3387535
   Wen Zhang, 2020, SoCC '20: Proceedings of the 11th ACM Symposium on Cloud Computing, P328, DOI 10.1145/3419111.3421277
   Zaharia M, 2012, P 9 USENIX C NETW SY, P15
   Zhang HR, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P1187
NR 38
TC 21
Z9 22
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 133
DI 10.1145/3485510
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200036
OA gold
DA 2024-07-18
ER

PT J
AU Zhou, ZQ
   Reiter, MK
AF Zhou, Ziqiao
   Reiter, Michael K.
TI Interpretable Noninterference Measurement and Its Application to
   Processor Designs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE information flow; interference; declassification; interpretability
ID MODEL
AB Noninterference measurement quantifies the secret information that might leak to an adversary from what the adversary can observe and influence about the computation. Static and high-fidelity noninterference measurement has been difficult to scale to complex computations, however. This paper scales a recent framework for noninterference measurement to the open-source RISC-V BOOM core as specified in Verilog, through three key innovations: logically characterizing the core's execution incrementally, applying specific optimizations between each cycle; permitting information to be declassified, to focus leakage measurement to only secret information that cannot be inferred from the declassified information; and interpreting leakage measurements for the analyst in terms of simple rules that characterize when leakage occurs. Case studies on cache-based side channels generally, and on specific instances including SPECTRE attacks, show that the resulting toolchain, called DINoMe, effectively scales to this modern processor design.
C1 [Zhou, Ziqiao] Microsoft Res, Redmond, WA 98052 USA.
   [Reiter, Michael K.] Duke Univ, Durham, NC 27706 USA.
   [Zhou, Ziqiao; Reiter, Michael K.] Univ N Carolina, Chapel Hill, NC 27515 USA.
C3 Microsoft; Duke University; University of North Carolina; University of
   North Carolina Chapel Hill
RP Zhou, ZQ (corresponding author), Microsoft Res, Redmond, WA 98052 USA.
EM ziqiaozhou@microsoft.com; michael.reiter@duke.edu
RI Zhou, Ziqiao/AHA-5918-2022; Zhou, Ziqiao/AAB-7949-2021
FU National Science Foundation [2113345]; Direct For Computer & Info Scie &
   Enginr; Division Of Computer and Network Systems [2113345] Funding
   Source: National Science Foundation
FX We are grateful to our shepherd, Prof. Andrew Myers, and to the
   anonymous reviewers for numerous constructive suggestions for improving
   this paper. Thiswork was supported in part by grant 2113345 from the
   National Science Foundation and by a gift from Intel.
CR Aciicmez Onur, 2007, CSAW, P11, DOI DOI 10.1145/1314466.1314469
   Almeida JB, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P53
   [Anonymous], INT AN SPEC EX SID C
   [Anonymous], 2017, P 15 ACM IEEE INT C
   Aziz RA, 2015, LECT NOTES COMPUT SC, V9340, P121
   Backes M, 2009, P IEEE S SECUR PRIV, P141, DOI 10.1109/SP.2009.18
   Ball T, 2004, LECT NOTES COMPUT SC, V2999, P1
   Banerjee A, 2008, P IEEE S SECUR PRIV, P339, DOI 10.1109/SP.2008.20
   Barthe G, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1267, DOI 10.1145/2660267.2660283
   Bernstein DJ, 2017, LECT NOTES COMPUT SC, V10529, P555, DOI 10.1007/978-3-319-66787-4_27
   Blazy S, 2019, J COMPUT SECUR, V27, P137, DOI 10.3233/JCS-181136
   Celio Christopher, 2017, 1 WORKSH COMP ARCH R
   Chakraborty S, 2013, LECT NOTES COMPUT SC, V8124, P200, DOI 10.1007/978-3-642-40627-0_18
   Chapman P, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P263
   Chattopadhyay S, 2018, IEEE T COMPUT AID D, V37, P2812, DOI 10.1109/TCAD.2018.2858402
   Chen C., 2018, COMPUT RES REPOS
   Chong Stephen., 2004, CCS 04 P 11 ACM C CO, P198
   Cohen WW, 1999, SIXTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE (AAAI-99)/ELEVENTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE (IAAI-99), P335
   Doychev G., 2013, USENIX SEC S, P431
   Dutertre B., 2015, WORKSH SAT MOD THEOR
   Dwork C, 2006, LECT NOTES COMPUT SC, V3876, P265, DOI 10.1007/11681878_14
   FAN JQ, 1993, ANN STAT, V21, P196, DOI 10.1214/aos/1176349022
   Fan RE, 2008, J MACH LEARN RES, V9, P1871
   Ferraiuolo A, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P555, DOI 10.1145/3037697.3037739
   Fokkema M, 2020, J STAT SOFTW, V92, P1, DOI 10.18637/jss.v092.i12
   Friedman JH, 2001, ANN STAT, V29, P1189, DOI 10.1214/aos/1013203451
   Frieman JH, 2008, ANN APPL STAT, V2, P916, DOI 10.1214/07-AOAS148
   Giacobazzi R, 2004, ACM SIGPLAN NOTICES, V39, P186, DOI 10.1145/982962.964017
   Giacobazzi R, 2018, ACM T PRIV SECUR, V21, DOI 10.1145/3175660
   Godefroid P, 2012, COMMUN ACM, V55, P40, DOI 10.1145/2093548.2093564
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Gray J. W.  III, 1991, Proceedings. 1991 IEEE Computer Society Symposium on Research in Security and Privacy (Cat. No.91CH2986-8), P21, DOI 10.1109/RISP.1991.130769
   Guo XL, 2019, PROCEEDINGS OF THE 2019 IEEE INTERNATIONAL SYMPOSIUM ON HARDWARE ORIENTED SECURITY AND TRUST (HOST), P91, DOI 10.1109/HST.2019.8740840
   Kelsey J, 2002, LECT NOTES COMPUT SC, V2365, P263
   Kocher P, 2019, P IEEE S SECUR PRIV, P1, DOI 10.1109/SP.2019.00002
   Lipp M, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P973
   Malacaria P, 2018, P IEEE COMPUT SECUR, P313, DOI 10.1109/CSF.2018.00030
   McCall M, 2018, P IEEE COMPUT SECUR, P175, DOI 10.1109/CSF.2018.00020
   Molnar Christoph, 2022, Interpretable Machine Learning: A Guide for Making Black Box Models Explainable
   Nilizadeh S, 2019, PROC INT CONF SOFTW, P176, DOI 10.1109/ICSE.2019.00034
   Oleksii O., 2020, 29 USENIX SEC S
   Osvik DA, 2006, LECT NOTES COMPUT SC, V3860, P1
   Percival C., 2005, P BSDCAN 2005
   Phan Q.-S., 2014, P 9 ACM S INFORM COM, P283, DOI DOI 10.1145/2590296.2590328
   Pnueli A, 2002, INFORM COMPUT, V178, P279, DOI 10.1006/inco.2002.3175
   Ribeiro MT, 2018, AAAI CONF ARTIF INTE, P1527
   Ribeiro MT, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1135, DOI 10.1145/2939672.2939778
   Sabelfeld A, 2004, LECT NOTES COMPUT SC, V3233, P174
   Sabelfeld A, 2009, J COMPUT SECUR, V17, P517, DOI 10.3233/JCS-2009-0352
   Sahai S, 2020, LECT NOTES COMPUT SC, V12224, P201, DOI 10.1007/978-3-030-53288-8_11
   SEIDENFELD T, 1986, PHILOS SCI, V53, P467, DOI 10.1086/289336
   Smith G., 2011, Proceedings of the 2011 Eighth International Conference on Quantitative Evaluation of Systems (QEST 2011), P159, DOI 10.1109/QEST.2011.31
   Smith G, 2009, LECT NOTES COMPUT SC, V5504, P288
   Song DXD, 2001, USENIX ASSOCIATION PROCEEDINGS OF THE 10TH USENIX SECURITY SYMPOSIUM, P337
   Soos M, 2019, AAAI CONF ARTIF INTE, P1592
   Tan QH, 2020, 27TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2020), DOI 10.14722/ndss.2020.24086
   v Gleissenthall K, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1411
   Wang Tielei, 2009, NDSS
   Wang ZH, 2007, CONF PROC INT SYMP C, P494, DOI 10.1145/1273440.1250723
   Werner M, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P675
   Wolf C., Yosys open synthesis suite
   Xiao Y, 2020, 27TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2020), DOI 10.14722/ndss.2020.23105
   Yarom Y, 2014, PROCEEDINGS OF THE 23RD USENIX SECURITY SYMPOSIUM, P719
   Yasuoka H, 2014, THEOR COMPUT SCI, V538, P167, DOI 10.1016/j.tcs.2013.07.031
   Zhang DF, 2015, ACM SIGPLAN NOTICES, V50, P503, DOI 10.1145/2694344.2694372
   Zhang KH, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P595, DOI 10.1145/1866307.1866374
   Zhang R, 2018, 2018 51ST ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO), P815, DOI 10.1109/MICRO.2018.00071
   Zhang Y., 2012, 2012 ACM SIGSAC C CO, P305, DOI DOI 10.1145/2382196.2382230
   Zhou Z, 2020, THESIS U N CAROLINA
   Zhou ZQ, 2018, P IEEE S SECUR PRIV, P514, DOI 10.1109/SP.2018.00052
   Zhou Ziqiao, 2016, P 2016 ACM SIGSAC C, P871, DOI DOI 10.1145/2976749.2978324
NR 71
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 141
DI 10.1145/3485518
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200044
OA gold
DA 2024-07-18
ER

PT J
AU Yanovski, J
   Dang, HH
   Jung, R
   Dreyer, D
AF Yanovski, Joshua
   Dang, Hoang-Hai
   Jung, Ralf
   Dreyer, Derek
TI GhostCell: Separating Permissions from Data in Rust
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Rust; type systems; separation logics
AB The Rust language offers a promising approach to safe systems programming based on the principle of aliasing XOR mutability: a value may be either aliased or mutable, but not both at the same time. However, to implement pointer-based data structures with internal sharing, such as graphs or doubly-linked lists, we need to be able to mutate aliased state. To support such data structures, Rust provides a number of APIs that offer so-called interior mutability: the ability to mutate data via method calls on a shared reference. Unfortunately, the existing APIs sacrifice flexibility, concurrent access, and/or performance, in exchange for safety.
   In this paper, we propose a new Rust API called GhostCell which avoids such sacrifices by separating permissions from data: it enables the user to safely synchronize access to a collection of data via a single permission. GhostCell repurposes an old trick from typed functional programming: branded types (as exemplified by Haskell's ST monad), which combine phantom types and rank-2 polymorphism to simulate a lightweight form of state-dependent types. We have formally proven the soundness of GhostCell by adapting and extending RustBelt, a semantic soundness proof for a representative subset of Rust, mechanized in Coq.
C1 [Yanovski, Joshua; Dang, Hoang-Hai; Jung, Ralf; Dreyer, Derek] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
RP Yanovski, J (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
EM pythonsq@mpi-sws.org; haidang@mpi-sws.org; jung@mpi-sws.org;
   dreyer@mpi-sws.org
OI Jung, Ralf/0000-0001-7669-6348; Dang, Hai/0000-0003-1029-1772
FU European Research Council (ERC) under the European Union [683289,
   101003349]; European Research Council (ERC) [101003349] Funding Source:
   European Research Council (ERC)
FX We thank the anonymous reviewers for their constructive suggestions for
   improvement. This research was supported in part by European Research
   Council (ERC) Consolidator Grants for the projects lRustBeltz and
   lPERSISTz, funded under the European Union's Horizon 2020 Framework
   Programme (grant agreements 683289 and 101003349, respectively).
CR [Anonymous], 1995, LISP SYMB COMPUT, DOI DOI 10.1007/BF01018827
   [Anonymous], 2021, FIXEDBITSET
   [Anonymous], 2021, PETGRAPH
   Aparicio, 2020, CRITERION LIBRARY
   Balabonski T, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2837022
   Beingessner Alexis, 2015, YOU CANT SPELL TRUST
   Boyland JT, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1749608.1749611
   Dreyer, 2021, COQ DEV SUPPLEMENTAR
   Fähndrich M, 2002, ACM SIGPLAN NOTICES, V37, P13, DOI 10.1145/543552.512532
   Fluet M, 2006, J FUNCT PROGRAM, V16, P751, DOI 10.1017/S0956796806006046
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jung R, 2021, COMMUN ACM, V64, P144, DOI 10.1145/3418295
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Jung Ralf, 2020, Ph. D. Dissertation
   Kfoury A. J., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P196, DOI 10.1145/182409.182456
   Kiselyov O, 2007, ELECTRON NOTES THEOR, V174, P79, DOI 10.1016/j.entcs.2006.10.039
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krebbers Robbert, 2018, P ACM PROGR LANG, DOI [10.1145/3236772, DOI 10.1145/3236772]
   Matsakis, 2017, RAYON LIB
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Matsakis Nicholas, 2018, An alias-based formulation of the borrow checker
   Matsakis Nicholas D., 2016, Non-lexical lifetimes: introduction
   Moggi E, 2001, J FUNCT PROGRAM, V11, P591, DOI 10.1017/S0956796801004154
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Peters, 2019, QCELL LIBRARY
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   RUSTAN K, 2009, ESOP, DOI DOI 10.1007/978-3-642-00590-9_27
   Sapin, 2020, TYPED ARENA LIB
   SMANS J, 2009, ECOOP, DOI DOI 10.1007/978-3-642-03013-0_8
   Timany A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158152
   Tofte M., 2004, Higher-Order and Symbolic Computation, V17, P245, DOI 10.1023/B:LISP.0000029446.78563.a4
NR 34
TC 9
Z9 9
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 92
DI 10.1145/3473597
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800032
OA gold
DA 2024-07-18
ER

PT J
AU Feser, J
   Madden, S
   Tang, N
   Solar-Lezama, A
AF Feser, John
   Madden, Sam
   Tang, Nan
   Solar-Lezama, Armando
TI Deductive Optimization of Relational Data Storage
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE databases; deductive synthesis; data representation synthesis
AB Optimizing the physical data storage and retrieval of data are two key database management problems. In this paper, we propose a language that can express both a relational query and the layout of its data. Our language can express a wide range of physical database layouts, going well beyond the row- and column-based methods that are widely used in database management systems. We use deductive program synthesis to turn a high-level relational representation of a database query into a highly optimized low-level implementation which operates on a specialized layout of the dataset. We build an optimizing compiler for this language and conduct experiments using a popular database benchmark, which shows that the performance of our specialized queries is better than a state-of-the-art in memory compiled database system while achieving an order-of-magnitude reduction in memory use.
C1 [Feser, John; Madden, Sam; Solar-Lezama, Armando] MIT, CSAIL, 32 Vassar St, Cambridge, MA 02139 USA.
   [Tang, Nan] QCRI HBKU, Qatar Comp Res Inst, Doha, Qatar.
C3 Massachusetts Institute of Technology (MIT); Qatar Foundation (QF);
   Hamad Bin Khalifa University-Qatar; Qatar Computing Research Institute
RP Feser, J (corresponding author), MIT, CSAIL, 32 Vassar St, Cambridge, MA 02139 USA.
EM feser@csail.mit.edu; madden@csail.mit.edu; ntang@hbku.edu.qa;
   asolar@csail.mit.edu
RI Madden, Samuel/ABD-8552-2021
OI Solar Lezama, Armando/0000-0001-7604-8252; Feser,
   John/0000-0001-8577-1784
CR Ailamaki A., 2001, Proceedings of the 27th International Conference on Very Large Data Bases, P169
   Blaine L, 1998, 13TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P270, DOI 10.1109/ASE.1998.732672
   Boncz PA, 1999, VLDB J, V8, P101, DOI 10.1007/s007780050076
   Botelho Fabiano C., 2007, P LECT NOTES COMPUTE, V4619, DOI [10.1007/978-3- 540-73951- 7_13, DOI 10.1007/978-3-540-73951-7_13]
   Bruno Nicolas., 2005, ACM SIGMOD INT C MAN, P227, DOI [10.1145/1066157.1066184, DOI 10.1145/1066157.1066184]
   Chaudhuri S., 1998, Proceedings of the Seventeenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems. PODS 1998, P34, DOI 10.1145/275487.275492
   Cheung A, 2013, ACM SIGPLAN NOTICES, V48, P3, DOI 10.1145/2499370.2462180
   Chirkova R, 2000, LECT NOTES ARTIF INT, V1861, P987
   Codd E. F., 1971, P 1971 ACM SIGFIDTWO, p35S68
   CODD EF, 1970, COMMUN ACM, V13, P377, DOI 10.1145/357980.358007
   Cudre-Mauroux Philippe, 2009, CIDR 2009
   de Castro Reis Davi, 2011, CMPH C MINIMAL PERFE
   Delaware B, 2015, ACM SIGPLAN NOTICES, V50, P689, DOI [10.1145/2775051.2677006, 10.1145/2676726.2677006]
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   GRAEFE G, 1994, IEEE T KNOWL DATA EN, V6, P120, DOI 10.1109/69.273032
   Gupta H, 1997, PROC INT CONF DATA, P208, DOI 10.1109/ICDE.1997.581755
   Gutierrez Angelica Garcia., 2007, Proc. - IEEE Int. Conf. Data Mining, V7, P607, DOI DOI 10.1109/ICDMW.2007.53
   Halevy AY, 2001, VLDB J, V10, P270, DOI 10.1007/s007780100054
   Hawkins P, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P38
   Hawkins P, 2010, LECT NOTES COMPUT SC, V6461, P204, DOI 10.1007/978-3-642-17164-2_15
   JARKE M, 1984, COMPUT SURV, V16, P111, DOI 10.1145/356924.356928
   Klonatos Y, 2014, PROC VLDB ENDOW, V7, P853, DOI 10.14778/2732951.2732959
   Loncaric C, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P958, DOI 10.1145/3180155.3180211
   Loncaric C, 2016, ACM SIGPLAN NOTICES, V51, P355, DOI [10.1145/2908080.2908122, 10.1145/2980983.2908122]
   Neumann T, 2011, PROC VLDB ENDOW, V4, P539, DOI 10.14778/2002938.2002940
   Neumann Thomas, 2015, BTW 2015 (LNI), VP-241, P383
   Pottinger R., 2000, P 26 INT C VER LARG, P484
   Püschel M, 2005, P IEEE, V93, P232, DOI 10.1109/JPROC.2004.840306
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Rompf T, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P2, DOI 10.1145/2784731.2784760
   Shaikhha A, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1907, DOI 10.1145/2882903.2915244
   Stonebraker M., 1974, International Journal of Computer & Information Sciences, V3, P167, DOI 10.1007/BF00976642
   Stonebraker M, 2012, ERCIM NEWS, P13
   Stonebraker Mike., 2005, VLDB'05
   Sujeeth AK, 2014, ACM T EMBED COMPUT S, V13, DOI 10.1145/2584665
   Tahboub RY, 2018, INT CONF MANAGE DATA, P307, DOI 10.1145/3183713.3196893
   Talebi ZohrehAsgharzadeh., 2008, EDBT, P311
   Transaction Processing Performance Council, 2008, TPC H BENCHM SPEC, V21
   Visser E, 2005, J SYMB COMPUT, V40, P831, DOI 10.1016/j.jsc.2004.12.011
   Yan C, 2019, PROC VLDB ENDOW, V12, P1513, DOI 10.14778/3342263.3342630
   Yessenov K, 2017, ACM SIGPLAN NOTICES, V52, P64, DOI [10.1145/3062341.3062386, 10.1145/3140587.3062386]
NR 41
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 170
DI 10.1145/3428238
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900047
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Madsen, M
   Van de Pol, J
AF Madsen, Magnus
   van de Pol, Jaco
TI Polymorphic Types and Effects with Boolean Unification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE polymorphic types and effects; Boolean unification; type inference
AB We present a simple, practical, and expressive type and effect system based on Boolean constraints. The effect system extends the Hindley-Milner type system, supports parametric polymorphism, and preserves principal types modulo Boolean equivalence. We show how to support type inference by extending Algorithm W with Boolean unification based on the successive variable elimination algorithm.
   We implement the type and effect system in the Rix programming language. We perform an in-depth evaluation on the impact of Boolean unification on type inference time and end-to-end compilation time. While the computational complexity of Boolean unification is NP-hard, the experimental results demonstrate that it works well in practice. We find that the impact on type inference time is on average a 1.4x slowdown and the overall impact on end-to-end compilation time is a 1.1x slowdown.
C1 [Madsen, Magnus; van de Pol, Jaco] Aarhus Univ, Dept Comp Sci, Abogade 34, DK-8210 Aarhus, Denmark.
C3 Aarhus University
RP Madsen, M (corresponding author), Aarhus Univ, Dept Comp Sci, Abogade 34, DK-8210 Aarhus, Denmark.
EM magnusm@cs.au.dk; jaco@cs.au.dk
OI van de Pol, J.C./0000-0003-4305-0625
CR [Anonymous], 1974, Boolean functions and equations
   Asai K, 2007, LECT NOTES COMPUT SC, V4807, P239
   Baader F, 1998, INFORM PROCESS LETT, V67, P215, DOI 10.1016/S0020-0190(98)00106-9
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Bockmayr Alexander, 1991, Logic Programming with Pseudo-Boolean Constraints
   Boole G., 1847, The mathematical analysis of logic
   BOUDET A, 1989, J SYMB COMPUT, V8, P449, DOI 10.1016/S0747-7171(89)80054-9
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2500365.2500581, 10.1145/2544174.2500581]
   Buttner W., 1987, Journal of Symbolic Computation, V4, P191, DOI 10.1016/S0747-7171(87)80065-2
   Damas Luis, 1984, Ph. D. Dissertation
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Dolan S., 2015, OCAML WORKSHOP
   Garrigue J, 2004, LECT NOTES COMPUT SC, V2998, P196
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Jones Mark P, 2003, Qualified types: theory and practice
   Jones Simon Peyton, 2001, HASK WORKSH
   Kiselyov O, 2018, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.285.2
   Leijen D., 2005, P 2005 S TRENDS FUNC, P297
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Leroy X., 2000, ACM Transactions on Programming Languages and Systems, V22, P340, DOI 10.1145/349214.349230
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Lowenheim Leopold, 1908, Uber das Auflosungsproblem im logischen Klassenkalkul
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Macii Enrico, 1998, P AS C SIGN SYST COM
   Madsen M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428193
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   Madsen Magnus, 2018, P INT S SOFTW TEST A
   MAIRSON HG, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P382, DOI 10.1145/96709.96748
   MARTELLI A, 1982, ACM T PROGR LANG SYS, V4, P258, DOI 10.1145/357162.357169
   Martin U., 1989, Journal of Symbolic Computation, V7, P275, DOI 10.1016/S0747-7171(89)80013-6
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Rytz L, 2012, LECT NOTES COMPUT SC, V7313, P258, DOI 10.1007/978-3-642-31057-7_13
   Schuster Philipp, 2020, P INT C FUNCT PROGR
   Simonis Helmut, 1987, IEEE INT WORKSH AI A
   TALPIN JP, 1994, INFORM COMPUT, V111, P245, DOI 10.1006/inco.1994.1046
   TOFTE M, 1990, INFORM COMPUT, V89, P1, DOI 10.1016/0890-5401(90)90018-D
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Toro M, 2015, ACM SIGPLAN NOTICES, V50, P935, DOI [10.1145/2814270.2814315, 10.1145/2858965.2814315]
   Vytiniotis D, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P39
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xie YC, 2003, IEEE T SOFTWARE ENG, V29, P915, DOI 10.1109/TSE.2003.1237172
NR 45
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 154
DI 10.1145/3428222
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900031
OA gold
DA 2024-07-18
ER

PT J
AU Majumdar, R
   Yoshida, N
   Zufferey, D
AF Majumdar, Rupak
   Yoshida, Nobuko
   Zufferey, Damien
TI Multiparty Motion Coordination: From Choreographies to Robotics Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Robotics; Message-passing; Session Types and Choreography;
   Continuous-time Motion Primitives
AB We present a programming model and typing discipline for complex multi-robot coordination programming. Our model encompasses both synchronisation through message passing and continuous-time dynamic motion primitives in physical space. We specify continuous-time motion primitives in an assume-guarantee logic that ensures compatibility of motion primitives as well as collision freedom. We specify global behaviour of programs in a choreographic type system that extends multiparty session types with jointly executed motion primitives, predicated refinements, as well as a separating conjunction that allows reasoning about subsets of interacting robots. We describe a notion of well-formedness for global types that ensures motion and communication can be correctly synchronised and provide algorithms for checking well-formedness, projecting a type, and local type checking. A well-typed program is communication safe, motion compatible, and collision free. Our type system provides a compositional approach to ensuring these properties.
   We have implemented our model on top of the ROS framework. This allows us to program multi-robot coordination scenarios on top of commercial and custom robotics hardware platforms. We show through case studies that we can model and statically verify quite complex manoeuvres involving multiple manipulators and mobile robots-such examples are beyond the scope of previous approaches.
C1 [Majumdar, Rupak; Zufferey, Damien] Max Planck Inst Software Syst, Kaiserslautern, Germany.
   [Yoshida, Nobuko] Imperial Coll London, Comp, 180 Queens Gate, London SW7 2A2, England.
C3 Max Planck Society; Imperial College London
RP Majumdar, R (corresponding author), Max Planck Inst Software Syst, Kaiserslautern, Germany.
EM rupak@mpi-sws.org; n.yoshida@imperial.ac.uk; zufferey@mpi-sws.org
RI Yoshida, Nobuko/AAL-6082-2020
OI Yoshida, Nobuko/0000-0002-3925-8557; /0000-0002-3197-8736
FU Deutsche Forschungsgemeinschaft [389792660 TRR 248sCPEC]; European
   Research Council (ERC) [610150]; EPSRC [EP/T006544/1, EP/K011715/1,
   EP/K034413/1, EP/L00058X/1, EP/N027833/1, EP/N028201/1, EP/T014709/1,
   EP/V000462/1]; NCSS/EPSRC VeTSS; EPSRC [EP/T006544/1, EP/K011715/1,
   EP/N027833/1] Funding Source: UKRI
FX We thank the OOPSLA reviewers for useful comments and suggestions; and
   Julia Gabet for testing the artifact. Majumdar and Zufferey are
   supported in part by the Deutsche Forschungsgemeinschaft project
   389792660 TRR 248sCPEC and by the European Research Council under the
   Grant Agreement 610150 (http://www.impact-erc.eu/) (ERC Synergy Grant
   ImPACT). Yoshida is supported in part by EPSRC EP/T006544/1,
   EP/K011715/1, EP/K034413/1, EP/L00058X/1, EP/N027833/1, EP/N028201/1,
   EP/T006544/1, EP/T014709/1 and EP/V000462/1, and NCSS/EPSRC VeTSS.
CR ABADI M, 1993, ACM T PROGR LANG SYS, V15, P73, DOI 10.1145/151646.151649
   ALUR R, 1995, THEOR COMPUT SCI, V138, P3, DOI 10.1016/0304-3975(94)00202-T
   Ancona D, 2016, FOUND TRENDS PROGRAM, V3, pI, DOI 10.1561/2500000031
   [Anonymous], 2015, LIPIcs, DOI DOI 10.4230/LIPICS.CONCUR.2015.283
   Banusic GB, 2019, ACM IEEE INT CONF CY, P57, DOI 10.1145/3302509.3311052
   Benveniste A, 2018, FOUND TRENDS ELECTRO, V12, pI, DOI 10.1561/1000000053
   Bergstra JA, 2005, THEOR COMPUT SCI, V335, P215, DOI 10.1016/j.tcs.2004.04.019
   Bocchi Laura, 2014, CONCUR 2014 - Concurrency Theory. 25th International Conference, CONCUR 2014. Proceedings: LNCS 8704, P419, DOI 10.1007/978-3-662-44584-6_29
   Bocchi L, 2019, LECT NOTES COMPUT SC, V11423, P583, DOI 10.1007/978-3-030-17184-1_21
   Bohrer B, 2018, ACM SIGPLAN NOTICES, V53, P617, DOI [10.1145/3192366.3192406, 10.1145/3296979.3192406]
   Castagna G, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:24)2012
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   Demangeon R, 2012, LECT NOTES COMPUT SC, V7454, P272, DOI 10.1007/978-3-642-32940-1_20
   Deniélou PM, 2012, LECT NOTES COMPUT SC, V7211, P194, DOI 10.1007/978-3-642-28869-2_10
   Desai A, 2017, ACM IEEE INT CONF CY, P239, DOI 10.1145/3055004.3055022
   Dezani-Ciancaglini Mariangiola, 2016, Theory and Practice of Formal Methods. Essays Dedicated to Frank de Boer on the Occasion of His 60th Birthday. LNCS 9660, P155, DOI 10.1007/978-3-319-30734-3_12
   Dezani-Ciancaglini M, 2016, ELECTRON P THEOR COM, P29, DOI 10.4204/EPTCS.203.3
   Fulton N, 2015, LECT NOTES ARTIF INT, V9195, P527, DOI 10.1007/978-3-319-21401-6_36
   Gavran I, 2017, ACM T EMBED COMPUT S, V16, DOI 10.1145/3126513
   Gay S, 2017, RIV PUBL SER AUTOMAT, pXV
   Ghilezan S, 2019, J LOG ALGEBR METHODS, V104, P127, DOI 10.1016/j.jlamp.2018.12.002
   Ghilezan Silvia, 2019, J LOG ALGEBR METHODS
   Henzinger T. A., 2001, Hybrid Systems: Computation and Control. 4th International Workshop, HSCC 2001. Proceedings (Lecture Notes in Computer Science Vol.2034), P275
   Henzinger TA, 1996, IEEE S LOG, P278, DOI 10.1109/LICS.1996.561342
   Henzinger TA, 2007, COMPUTER, V40, P32, DOI 10.1109/MC.2007.364
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Kouzapas Dimitrios, 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P395, DOI 10.1007/978-3-642-40184-8_28
   Kouzapas D, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:20)2014
   Lange J, 2015, ACM SIGPLAN NOTICES, V50, P221, DOI [10.1145/2775051.2676964, 10.1145/2676726.2676964]
   LaValle S. M., 2006, Planning algorithms
   LaValle Steven M., 2012, SENSING FILTERING
   Liu J, 2010, LECT NOTES COMPUT SC, V6461, P1, DOI [10.1109/PCSPA.2010.9, 10.1007/978-3-642-17164-2_1]
   LOZANOPEREZ T, 1983, P IEEE, V71, P821, DOI 10.1109/PROC.1983.12681
   Lynch N, 2003, INFORM COMPUT, V185, P105, DOI 10.1016/S0890-5401(03)00067-1
   Majumdar R., 2019, LIPIcs
   Majumdar Rupak, 2020, ARXIVCSRO201005484
   McIver Annabelle., 2005, MG COMP SCI
   Nuzzo P., 2015, THESIS U CALIFORNIA
   Nuzzo P, 2015, P IEEE, V103, P2104, DOI 10.1109/JPROC.2015.2453253
   Platzer A., 2018, Logical Foundations of Cyber-Physical Systems, DOI DOI 10.1007/978-3-319-63588-0
   Platzer A, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P819, DOI 10.1145/3209108.3209147
   Quigley M, 2009, IEEE INT CONF ROBOT, P3604
   Rondon PM, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1379022.1375602
   Rounds WC, 2003, LECT NOTES COMPUT SC, V2623, P435
   Scalas A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290343
   Shuling Wang, 2015, Formal Methods and Software Engineering. 17th International Conference on Formal Engineering Methods (ICFEM 2015). Proceedings: LNCS 9407, P382, DOI 10.1007/978-3-319-25423-4_25
   Sicun Gao, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P208, DOI 10.1007/978-3-642-38574-2_14
   Siegwart R., 2011, Introduction to Autonomous Mobile Robots, VSecond
   Thrun S., 2005, INTELLIGENT ROBOTICS
   Tripakis S, 2016, P IEEE, V104, P960, DOI 10.1109/JPROC.2015.2510366
   Yan GG, 2020, ACM T SOFTW ENG METH, V29, DOI 10.1145/3360002
   Yoshida N, 2020, LECT NOTES COMPUT SC, V11969, P73, DOI 10.1007/978-3-030-36987-3_5
   Zamani M, 2014, IEEE T AUTOMAT CONTR, V59, P3135, DOI 10.1109/TAC.2014.2351652
NR 56
TC 5
Z9 5
U1 1
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 134
DI 10.1145/3428202
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900011
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Trinh, MT
   Chu, DH
   Jaffar, J
AF Minh-Thai Trinh
   Chu, Duc-Hiep
   Jaffar, Joxan
TI Inter-theory Dependency Analysis for SMT String Solvers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Automated Reasoning; String Constraints; SMT; Inter-theory; Dependency
   Analysis; Web Security
ID CONSTRAINTS
AB Solvers in the framework of Satisfiability Modulo Theories (SMT) have been widely successful in practice. Recently there has been an increasing interest in solvers for string constraints to address security issues in web programming, for example. To be practically useful, the solvers need to support an expressive constraint language over unbounded strings, and in particular, over string lengths. Satisfiability checking for these formulas, especially in the SMT context, is very hard; it is generally undecidable for a rich fragment. In this paper, we propose a form of dependency analysis for a rich fragment of string constraints including high-level operations such as length, contains to deal with their inter-theory interaction so as to solve them more efficiently. We implement our dependency analysis in the string theory of the Z3 solver to obtain a new one, called S3N. Finally, we demonstrate the superior performance of S3N over state-of-the-art string solvers such as Z3str3, CVC4, S3P, and Z3 on several large industrial-strength benchmarks.
C1 [Minh-Thai Trinh] Illinois Singapore, Adv Digital Sci Ctr, 1 Create Way,Create Tower, Singapore 138602, Singapore.
   [Chu, Duc-Hiep; Jaffar, Joxan] Natl Univ Singapore, Singapore, Singapore.
   [Chu, Duc-Hiep] Google, Mountain View, CA 94043 USA.
C3 National University of Singapore; Google Incorporated
RP Trinh, MT (corresponding author), Illinois Singapore, Adv Digital Sci Ctr, 1 Create Way,Create Tower, Singapore 138602, Singapore.
EM minhthai.t@adsc-create.edu.sg
RI Trinh, Minh-Thai/HTO-3686-2023
OI Trinh, Minh-Thai/0000-0002-5716-9400
FU National Research Foundation, Prime Minister's Office, Singapore under
   its Campus for Research Excellence and Technological Enterprise (CREATE)
   programme
FX We warmly thank the anonymous OOPSLA reviewers for helping us improve
   the presentation. This research is partly supported by the National
   Research Foundation, Prime Minister's Office, Singapore under its Campus
   for Research Excellence and Technological Enterprise (CREATE) programme.
CR Abdulla PA, 2019, LECT NOTES COMPUT SC, V11781, P277, DOI 10.1007/978-3-030-31784-3_16
   Abdulla PA, 2017, ACM SIGPLAN NOTICES, V52, P602, DOI [10.1145/3062341.3062384, 10.1145/3140587.3062384]
   Abdulla PA, 2015, LECT NOTES COMPUT SC, V9206, P462, DOI 10.1007/978-3-319-21690-4_29
   Axelsson R, 2008, LECT NOTES COMPUT SC, V5126, P410, DOI 10.1007/978-3-540-70583-3_34
   Aydin A, 2015, LECT NOTES COMPUT SC, V9206, P255, DOI 10.1007/978-3-319-21690-4_15
   Berzish M, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P55, DOI 10.23919/FMCAD.2017.8102241
   Bjorner N, 2009, LECT NOTES COMPUT SC, V5505, P307, DOI 10.1007/978-3-642-00768-2_27
   Chen TL, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290362
   Christensen AS, 2003, LECT NOTES COMPUT SC, V2694, P1
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Ganesh Vijay, 2013, Hardware and Software: Verification and Testing. 8th International Haifa Verification Conference, HVC 2012 Revised Selected Papers. LNCS 7857, P209, DOI 10.1007/978-3-642-39611-3_21
   Ganesh Vijay, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P1, DOI 10.1007/978-3-642-22110-1_1
   He J, 2013, LECT NOTES COMPUT SC, V8124, P381, DOI 10.1007/978-3-642-40627-0_31
   Holík L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158092
   Liang TY, 2014, LECT NOTES COMPUT SC, V8559, P646, DOI 10.1007/978-3-319-08867-9_43
   Lin AW, 2018, LECT NOTES COMPUT SC, V11138, P352, DOI 10.1007/978-3-030-01090-4_21
   MAKANIN GS, 1977, MATH USSR SB+, V32, P129, DOI 10.1070/SM1977v032n02ABEH002376
   Trinh MT, 2017, LECT NOTES COMPUT SC, V10427, P399, DOI 10.1007/978-3-319-63390-9_21
   Trinh MT, 2016, LECT NOTES COMPUT SC, V9779, P218, DOI 10.1007/978-3-319-41528-4_12
   Trinh MT, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1232, DOI 10.1145/2660267.2660372
   OWASP, 2013, TOP 10 PROJ
   Redelinghuys G, 2012, PROCEEDINGS OF THE SOUTH AFRICAN INSTITUTE FOR COMPUTER SCIENTISTS AND INFORMATION TECHNOLOGISTS CONFERENCE, P139
   Reynolds A, 2019, LECT NOTES COMPUT SC, V11562, P23, DOI 10.1007/978-3-030-25543-5_2
   Reynolds A, 2017, LECT NOTES COMPUT SC, V10427, P453, DOI 10.1007/978-3-319-63390-9_24
   Richard Buchi J., 1990, DEFINABILITY EXISTEN, P671, DOI [10.1007/978-1-4613-8928-6_37, DOI 10.1007/978-1-4613-8928-6_37]
   Saxena P, 2010, P IEEE S SECUR PRIV, P513, DOI 10.1109/SP.2010.38
   Shannon D., 2009, P 2 INT WORKSHOP DEF, P22, DOI [DOI 10.1145/1555860.1555868, 10.1145/1555860, DOI 10.1145/1555860]
   Zheng YH, 2015, LECT NOTES COMPUT SC, V9206, P235, DOI 10.1007/978-3-319-21690-4_14
   Zheng Yunhui, 2013, P 9 JOINT M FDN SOFT, P114, DOI [10.1145/2491411.2491456, DOI 10.1145/2491411.2491456]
NR 29
TC 1
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 192
DI 10.1145/3428260
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900069
OA gold
DA 2024-07-18
ER

PT J
AU Senanayake, R
   Hong, CW
   Wang, ZH
   Wilson, A
   Chou, S
   Kamil, S
   Amarasinghe, S
   Kjolstad, F
AF Senanayake, Ryan
   Hong, Changwan
   Wang, Ziheng
   Wilson, Amalee
   Chou, Stephen
   Kamil, Shoaib
   Amarasinghe, Saman
   Kjolstad, Fredrik
TI A Sparse Iteration Space Transformation Framework for Sparse Tensor
   Algebra
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Sparse Tensor Algebra; Sparse Iteration Spaces; Optimizing
   Transformations
ID COMPILER
AB We address the problem of optimizing sparse tensor algebra in a compiler and show how to define standard loop transformations-split, collapse, and reorder-on sparse iteration spaces. The key idea is to track the transformation functions that map the original iteration space to derived iteration spaces. These functions are needed by the code generator to emit code that maps coordinates between iteration spaces at runtime, since the coordinates in the sparse data structures remain in the original iteration space. We further demonstrate that derived iteration spaces can tile both the universe of coordinates and the subset of nonzero coordinates: the former is analogous to tiling dense iteration spaces, while the latter tiles sparse iteration spaces into statically load-balanced blocks of nonzeros. Tiling the space of nonzeros lets the generated code efficiently exploit heterogeneous compute resources such as threads, vector units, and GPUs.
   We implement these concepts by extending the sparse iteration theory implementation in the TACO system. The associated scheduling API can be used by performance engineers or it can be the target of an automatic scheduling system. We outline one heuristic autoscheduling system, but other systems are possible. Using the scheduling API, we show how to optimize mixed sparse-dense tensor algebra expressions on CPUs and GPUs. Our results show that the sparse transformations are sufficient to generate code with competitive performance to hand-optimized implementations from the literature, while generalizing to all of the tensor algebra.
C1 [Senanayake, Ryan] Reservoir Labs, 632 Broadway Suite 803, New York, NY 10012 USA.
   [Hong, Changwan; Wang, Ziheng; Chou, Stephen] MIT, 32 Vassar St,32-G778, Cambridge, MA 02139 USA.
   [Wilson, Amalee; Kjolstad, Fredrik] Stanford Univ, 353 Serra St, Stanford, CA 94305 USA.
   [Kamil, Shoaib] Adobe Res, 104 Filth Ave,4th Floor, New York, NY 10011 USA.
   [Amarasinghe, Saman] MIT, 32 Vassar St,32-G744, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT); Stanford University; Adobe
   Systems Inc.; Massachusetts Institute of Technology (MIT)
RP Senanayake, R (corresponding author), Reservoir Labs, 632 Broadway Suite 803, New York, NY 10012 USA.
EM senanayake@reservoir.com; changwan@mit.edu; ziheng@mit.edu;
   amalee@cs.stanford.edu; s3chou@csail.mit.edu; kamil@adobe.com;
   saman@csail.mit.edu; kjolstad@cs.stanford.edu
OI Kjolstad, Fredrik Berg/0000-0002-2267-903X
FU DARPA [HR0011-18-3-0007]; Application Driving Architectures (ADA)
   Research Center, a JUMP Center; SRC; DARPA; U.S. Department of Energy,
   Office of Advanced Scientific Computing Research [DE-SC0018121];
   National Science Foundation [CCF-1533753]; Toyota Research Institute;
   U.S. Department of Energy (DOE) [DE-SC0018121] Funding Source: U.S.
   Department of Energy (DOE)
FX We would like to thank our anonymous reviewers, and especially our
   shepherd, for their valuable comments that helped us improve this
   manuscript. We also thank Michael Pellauer, Ajay Brahmakshatriya,
   Michael Garland, Rawn Henry, Suzy Mueller, Peter Ahrens, Joel Emer, and
   Yunming Zhang for helpful discussion, suggestions, and reviews. Finally,
   we thank Jessica Shi for adding the scheduling language to the TACO web
   tool GUI. This work was supported by DARPA under Award Number
   HR0011-18-3-0007; the Application Driving Architectures (ADA) Research
   Center, a JUMP Center co-sponsored by SRC and DARPA; the U.S. Department
   of Energy, Office of Advanced Scientific Computing Research under Award
   Number DE-SC0018121; the National Science Foundation under Grant No.
   CCF-1533753; and the Toyota Research Institute. Any opinions, findings,
   and conclusions or recommendations expressed in this material are those
   of the authors and do not necessarily reflect the views of the funding
   agencies.
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   Adams A, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3306346.3322967
   Allen F. E., 1972, Design and Optimization of Compilers, P1
   ANCOURT C, 1991, SIGPLAN NOTICES, V26, P39, DOI 10.1145/109626.109631
   [Anonymous], CUSPARSE SOFTW LIB
   Auer AA, 2006, MOL PHYS, V104, P211, DOI 10.1080/00268970500275780
   Baghdadi R, 2019, INT SYM CODE GENER, P193, DOI [10.5281/zenodo.2375075, 10.1109/CGO.2019.8661197]
   BANERJEE U, 1991, RES MG PAR, P192
   Baskaran M, 2014, IEEE HIGH PERF EXTR
   Baskaran Muthu., 2017, 2017 IEEE High Performance Extreme Computing Conference (HPEC), P1
   Bell N, 2009, PROCEEDINGS OF THE CONFERENCE ON HIGH PERFORMANCE COMPUTING NETWORKING, STORAGE AND ANALYSIS
   Bik A. J., 1993, P 7 INT C SUP, P416
   Chen Chun, 2008, TECHNICAL REPORT
   Chen Tianqi, 2018, ARXIV180508166, V31
   Chen Tianqi, 2018, S OP SYST DES IMPL, P578
   Chou S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P823, DOI 10.1145/3385412.3385963
   Chou S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276493
   Davis TA, 2011, ACM T MATH SOFTWARE, V38, DOI 10.1145/2049662.2049663
   Epifanovsky E, 2013, J COMPUT CHEM, V34, P2293, DOI 10.1002/jcc.23377
   FEAUTRIER P, 1988, RAIRO-RECH OPER, V22, P243
   Guennebaud G., 2010, Eigen
   Hong CW, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P300, DOI 10.1145/3293883.3295712
   Intel, 2012, 630813051US INT
   Jeon I, 2015, PROC INT CONF DATA, P1047, DOI 10.1109/ICDE.2015.7113355
   Jia YQ, 2014, PROCEEDINGS OF THE 2014 ACM CONFERENCE ON MULTIMEDIA (MM'14), P675, DOI 10.1145/2647868.2654889
   Kjolstad F., 2020, THESIS MIT CAMBRIDGE
   Kjolstad F, 2019, INT SYM CODE GENER, P180, DOI [10.1109/cgo.2019.8661185, 10.1109/CGO.2019.8661185]
   Kjolstad F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133901
   Kjolstad F, 2017, IEEE INT CONF AUTOM, P943, DOI 10.1109/ASE.2017.8115709
   Kotlyar V., 1997, Euro-Par '97 Parallel Processing. Third International Euro-Par Conference. Proceedings, P318
   LAMPORT L, 1974, COMMUN ACM, V17, P83, DOI 10.1145/360827.360844
   Lee S, 2009, ACM SIGPLAN NOTICES, V44, P101, DOI 10.1145/1594835.1504194
   Merrill D, 2016, SC '16: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, P678, DOI 10.1109/SC.2016.57
   Mullapudi RT, 2016, ACM T GRAPHIC, V35, DOI 10.1145/2897824.2925952
   Nisa I, 2019, INT PARALL DISTRIB P, P123, DOI 10.1109/IPDPS.2019.00023
   Pai S, 2016, ACM SIGPLAN NOTICES, V51, P1, DOI [10.1145/2983990.2984015, 10.1145/3022671.2984015]
   Paszke A., 2017, AUTOMATIC DIFFERENTI
   Pugh W, 1999, LECT NOTES COMPUT SC, V1656, P213, DOI 10.1007/3-540-48319-5_14
   Ragan-Kelley J, 2012, ACM T GRAPHIC, V31, DOI 10.1145/2185520.2185528
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Senanayake Ryan, 2020, THESIS MIT CAMBRIDGE
   Smith S, 2015, INT PARALL DISTRIB P, P61, DOI 10.1109/IPDPS.2015.27
   Smith Shaden, 2017, FROSTT: The formidable repository of open sparse tensors and tools
   Smith SC, 2015, WILSON-JOHNSON CORRESPONDENCE, 1964-69, P1
   Solomonik E, 2014, J PARALLEL DISTR COM, V74, P3176, DOI 10.1016/j.jpdc.2014.06.002
   Strout MM, 2018, P IEEE, V106, P1921, DOI 10.1109/JPROC.2018.2857721
   Suriana P, 2017, INT SYM CODE GENER, P281, DOI 10.1109/CGO.2017.7863747
   Vasilache Nicolas., 2018, Technical report
   Venkat A, 2015, ACM SIGPLAN NOTICES, V50, P521, DOI [10.1145/2813885.2738003, 10.1145/2737924.2738003]
   Wang Ziheng, 2020, THESIS MIT CAMBRIDGE
   Wolfe Michael J, 1982, THESIS U ILLINOIS UR, DOI [10.5555/910705, DOI 10.5555/910705]
   Wonnacott David, 1995, P 3 WORKSH LANG COMP
   Yang C, 2018, LECT NOTES COMPUT SC, V11014, P672, DOI 10.1007/978-3-319-96983-1_48
   Zhang YM, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276491
NR 54
TC 27
Z9 30
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 158
DI 10.1145/3428226
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900035
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Wirfs-Brock, A
   Eich, B
AF Wirfs-Brock, Allen
   Eich, Brendan
TI JavaScript: The First 20 Years
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE JavaScript; ECMAScript; Standards; Web browsers; Browser game theory;
   History of programming languages
AB How a sidekick scripting language for Java, created at Netscape in a ten-day hack, ships first as a de facto Web standard and eventually becomes the world's most widely used programming language. This paper tells the story of the creation, design, evolution, and standardization of the JavaScript language over the period of 1995-2015. But the story is not only about the technical details of the language. It is also the story of how people and organizations competed and collaborated to shape the JavaScript language which dominates the Web of 2020.
C1 [Wirfs-Brock, Allen] Wirfs Brock Associates Inc, Sherwood, OR 97140 USA.
   [Eich, Brendan] Brave Software Inc, San Francisco, CA USA.
RP Wirfs-Brock, A (corresponding author), Wirfs Brock Associates Inc, Sherwood, OR 97140 USA.
EM allen@wirfs-brock.com; brendan@brave.com
CR Adobe, 2007, ACTIONSCRIPT VIRT MA
   Adobe, 2013, FLASH PLAYER PEN
   ADsafe, 2007, MAK JAVASCRIPT SAF A
   Aho AV, 1988, The AWK Programming Language
   Allaire J., 2002, MACROMEDIA FLASH MX
   Alman Ben, 2010, BLOG POST
   Anderson Tim, 2007, BLOG POST T AND 1015
   [Anonymous], 2008, ECMATC392008067
   [Anonymous], 1998, ECMATC391998007
   [Anonymous], 2007, PROP MOD SPEC
   [Anonymous], 2009, E COMMUNICATION 1107
   [Anonymous], 1998, ECMATC391998005
   [Anonymous], 1998, X3J20 ANSI
   [Anonymous], 2019, SGI IND HIGH INT VIN
   [Anonymous], 1997, ECMATC391997028
   [Anonymous], 1995, COMMUNICATION 0526
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], 2013, 2013 M NOT
   [Anonymous], 2007, CLAR TYP SYST
   ANSI X3, 1989, X3 ANSI
   Apple Computer, 1988, HYP SCRIPT LANG GUID
   Arvidsson Erik, 2015, ECMASCRIPT OBJECT OB
   Ashkenas Jeremy, 2011, JASHKENAS MINIMALIST
   Ashkenas Jeremy, 2009, HAPPY HOLIDAYS  1224
   Ashkenas Jeremy, 2010, COFFEESCRIPT 1 0 ONL
   Ashkenas Jeremy, 2011, LIST LANGUAGES COMPI
   Ashkenas Jeremy, 2018, LIST LANGUAGES COMPI
   Awad A.B., 2010, STRAWMAN MODULES EMA
   Awad A.B., 2010, MODULE PROPOSALS STA
   Awad Ihab A.B., 2009, ECMATC392009012
   Awad Ihab A.B., 2010, ECMATC392010004
   Babel Project, 2015, BAB JO
   Barth A., 2009, Proceedings of the 18th Conference on USENIX Security Symposium, SSYM'09, P187
   BENTLEY J, 1986, COMMUN ACM, V29, P711, DOI 10.1145/6424.315691
   Berners-Lee Tim, 2003, BRIEF HIST WEB
   Bilic Nino, 2007, MICROSOFT EXCHA 0613
   Borland International, 1996, ECMATC391996006 BORL
   Borland John, 2003, ZDNET           0415
   Bos Bert, 2005, JAVASCRIPT WORST INV
   Byous Jon, 1998, HAPPY 3 BIRTHDAY
   Caja Project, 2012, GOOGL CAJ
   Cardy Jonathan, 2011, COLLECTION JAVASCRIP
   CAUDILL PJ, 1986, SIGPLAN NOTICES, V21, P119, DOI 10.1145/960112.28709
   Clavel M, 2003, LECT NOTES COMPUT SC, V2706, P76
   Clinick Andrew, 2000, INTRO JSCRIPT NET
   Clinick Andrew, 1997, ECMATC391997033
   Clinick Andrew, 1999, ECMA TC39 WORK GROUP
   CommonJS Project, 2009, MOD 1 0
   Cook William R., 2007, P 3 ACM SIGPLAN C HI
   Cowlishaw Mike, 1999, ECMATC391999003
   Cowlishaw Mike, 1999, ECMATC39WG990803E3ST
   Cowlishaw Mike, 1999, ECMA262
   Cowlishaw Mike, 1998, ECMASCRIPT LANGUAGE
   Cowlishaw Mike, 1998, ECMA262
   Crockford D., 2001, JAVASCRIPT WORLDS MO
   Crockford D., 2008, JAVASCRIPT GOOD PART
   Crockford D., 2002, Introducing JSON
   Crockford Douglas, 2008, YAHOO USER INTE 0814
   Crockford Douglas, 2001, SURVEY JAVASCRIPT PR
   Crockford Douglas., 2001, Private members in JavaScript
   Crockford Douglas, 2019, BLOG POST
   Crockford Douglas, 2006, PROTOTYPAL INHERITAN
   Crockford Douglas, 2002, JSON JAVASCRIPT
   Crockford Douglas, 2007, E COMMUNICATION 1021
   Crockford Douglas, 2008, ES3 1 GOALS
   Crockford Douglas, 2003, LITTLE JAVASCRIPTER
   Crockford Douglas, 2007, RECOMMENDATIONS MODI
   Crockford Douglas, 2007, PROPOSAL REFOCUS TC3
   Crockford Douglas, 2008, ECMATC392008086
   Crockford Douglas, 2002, RECOMMENDATIONS MODI
   Crockford Douglas, 2002, CLASSICAL INHERITANC
   Crockford Douglas, 2001, JSLINT JAVASCRIPT VE
   Crockford Douglas, 2001, JSMIN JAVASCRIPT MIN
   Dahl Ryan, 2009, VID EUR JAVASCRIPT C
   Dangoor Kevin, 2010, BLOG POST
   Dangoor Kevin, 2009, BLOG POST
   Danvy Olivier, 2005, COMMENT BLOG PO 1027
   Dashevsky Ilana, 2008, 2008 IEEE AER C IEEE, p1s7
   Dave Raggett, 1999, WORK GROUP TECHN M 1
   Denicola Domenic, 2014, MODULEIMPORT ES DISC
   Denicola Domenic, 2016, BLOG POST WHATW 0413
   Dickey K., 1992, AI Expert, V7, P24
   DiNucci Darcy, 1999, PRINT, V53, P4
   Dollin Chris, 2002, HPL2002229
   Dyer Jeff, 2008, ES4 WORK ES4 DISCUSS
   Dyer Jeff, 2008, E COMMUNICATION 0417
   Ecma International, 2008, ECMATC392008073
   Ecma International, 2015, ECMAGA2015065
   Ecma International, 1996, ECMATC391996001
   Ecma International, 1997, ECMAGA1997063
   Ecma International, 1996, ECMAGA1996083
   Ecma International, 1999, ECMAGA1999137
   Ecma International, 2007, ECMAGA2007088
   Ecma International, 2007, ECMAGA2007202
   Ecma International, 2009, ECMAGA2009203
   Eich Brendan, 2011, STRAWMAN ARROW FUNCT
   Eich Brendan, 2009, E COMMUNICATION 0504
   Eich Brendan, 2013, ECMATC392013040
   Eich Brendan, 2012, E COMMUNICATION 0315
   Eich Brendan, 2007, BRENDANS ROADMA 0725
   Eich Brendan, 2006, E COMMUNICATION 1003
   Eich Brendan, 2010, E COMMUNICATION 0429
   Eich Brendan, 2009, HARMONY HARMONY
   Eich Brendan, 2012, NARCISSUS METACIRCUL
   Eich Brendan, 2006, XTECH 2006 SLID DECK
   Eich Brendan, 2009, STRAWMAN CATCHALLS
   Eich Brendan, 2007, ECMATC39TG12007001
   Eich Brendan, 1998, SPIDERMONKEY JS 1 4
   Eich Brendan, 2012, HARMONY ARROW FUNCTI
   Eich Brendan, 2008, BLOG POST
   Eich Brendan, 2008, E COMMUNICATION 0813
   Eich Brendan, 2012, E COMMUNICATION 0316
   Eich Brendan, 2011, BLOG POST
   Eich Brendan, 2008, ECMATC392008074
   Eich Brendan, 2011, STRAWMAN BLOCK LAMBD
   Eich Brendan, 2005, BLOG POST
   Eich Brendan, 1996, ECMATC391996002
   Eich Brendan, 2011, SLID DECK CAPITOLJS
   Eich Brendan, 2008, ALLENS LAMBDA SYNTAX
   Eich Brendan, 2010, HARMONY HARMONY
   Eich Brendan, 2011, BRENDANEICH MINIMALI
   Eich Brendan, 2004, BLOG POST
   Eich Brendan, 2005, ICFP 05 SLID DECK 26
   ES4, 2007, ES4 PRE REL M0 SOURC
   ES4, 2007, CLAR FORM TYP SYST
   ES4, 2006, PROP STRUCT TYP TYP
   ES4, 2007, PROP IN
   ES4, 2007, ECMASCRIPT DOC
   ES4. 2006a, 2006, CATCH PROP
   ES4. 2006b, 2006, CLAR TYP SYST
   ES4. 2006c, 2006, EXPR CLOS PROP
   ES5conform, 2009, ECMASCRIPT 5 CONF SU
   Fair Erik, 1998, JAVASCRIPT MUST BE E
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Flanagan C, 2006, ACM SIGPLAN NOTICES, V41, P245, DOI 10.1145/1111320.1111059
   Flanagan Cormac, 2008, ES HARMONY CLASS SYS
   Gabriel Richard P, 1990, LISP GOOD NEWS BAD N, P31
   Gal A, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P465, DOI 10.1145/1542476.1542528
   Garrett JJ, 2005, AJAX NEW APPROACH WE
   Gay Jonathan, 2006, HIST FLASH ADOBE SHO
   General Magic, 1995, TEL LANG REF
   Gibbons Bill, 1999, ECMASCRIPT LANGUAGE
   Gillam Richard, 1999, PROPOSAL IMPROVING I
   Gillam Richard, 1998, I18N M MINUTES
   Google, 2006, GOOGL WEB TOOLK BET
   Google, 2008, V8 JAVASCRIPT ENG DE
   Google, 2012, CHROMIUM
   Google, 2008, V8 BENCHM SUIT VERS
   Google, 2012, CHROM DART VM
   Gosling James, 1996, The Java Language Specification
   Greenman B, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000217
   Greif Sacha, 2019, STATE JAVASCRIPT SUR
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   Hallam Peter, 2011, VID NODECONF 2011 12
   Hansen Christian Plesner, 2009, CHROMIUM BLOG   0629
   Hansen Lars T, 2007, ECMATC39TG12007044
   Hansen Lars T, 2007, ECMATC39TG12007046
   Hansen Lars T, 2007, ECMATC39TG12007045
   Hansen Lars T, 2008, E COMMUNICATION 0226
   Hansen Lars T, 2008, E COMMUNICATION 0516
   Hansen Lars T, 2007, PROPOSED ECMASCRIPT
   Hansen Lars T, 2008, ECMATC392008042
   Hansen Lars T, 2008, ECMATC392008041
   Harel D., 2007, P 3 ACM SIGPLAN C HI, P5, DOI [10.1145/1238844.1238849, DOI 10.1145/1238844.1238849]
   Harmony, 2011, STRAWM PROP
   Harmony, 2011, HARM PROP
   Harmony, 2014, HARM PROP
   Harmony, 2010, STRAWM PROP
   Harmony, 2010, DEF PROP
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Herman David, 2007, P 2007 WORKSH WORKSH, p47s52, DOI DOI 10.1145/1292535.1292543
   Herman David, 2010, STRAWMAN SIMPLE MODU
   Herman David, 2011, MODULES JAVASCRIPT S
   Herman David, 2011, DHERMAN LITERAL CLAS
   Herman David, 2011, STRAWMAN PATTERN MAT
   Herman David, 2010, STRAWMAN ARRAY COMPR
   Herman David, 2011, STRAWMAN MINIMAL CLA
   Herman David, 2010, HARMONY GENERATOR EX
   Herman David, 2007, ECMASCRIPT EDITION 4
   Herman David, 2014, ECMATC392014045
   Herman David, 2013, HARMONY MODULE LOADE
   Herman David, 2010, E COMMUNICATION 0513
   Herman David, 2010, E COMMUNICATION 0129
   Herman David, 2013, COMMUNICATION   0312
   Herman David, 2014, ASM JS SPECIFICATION
   Herman David, 2012, ECMATC392012005
   Herman David, 2014, REALMS API
   Herman David, 2005, CLASSICJAVASCRIPT CE
   Herman David, 2008, STRAWMAN LAMBDAS
   Herman David, 2013, JORENDORFF JS LOADER
   Herman David, 2011, E COMMUNICATION 0627
   Herman David, 2014, ECMATC392014021
   Herman David, 2011, E COMMUNICATION 1231
   Herman David, 2010, STRAWMAN MODULE LOAD
   Hickson Ian, 2004, WHAT OPEN MAILING LI
   Hoare Graydon, 2010, RUST LANGUAGE WIKI
   Hobbs Darren, 2008, BLOG POST
   Hopmann Alex, 2006, BLOG POST
   Horwat Waldemar, 2000, NOTES AUG 22 2000 M
   Horwat Waldemar, 2008, E COMMUNICATION 1013
   Horwat Waldemar, 2009, E COMMUNICATION 0129
   Horwat Waldemar, 1998, REVISED SECTION 12
   Horwat Waldemar, 1999, JAVASCRIPT 2 0 FEBRU
   Horwat Waldemar, 2003, EPIMETHEUS
   Horwat Waldemar, 2003, JAVASCRIPT 2 0
   Horwat Waldemar, 2008, COMMUNICATION   0321
   Horwat Waldemar, 2010, E COMMUNICATION 0930
   Horwat Waldemar, 2001, LL
   Horwat Waldemar, 2000, ECMASCRIPT 4 NETSCAP
   Horwat Waldemar, 1999, JAVASCRIPT 2 0 MEMBE
   Horwat Waldemar, 2003, ECMASCRIPT EDITION 3
   Horwat Waldemar, 2005, JS2 SOURCE CODE ARCH
   Hudson Rick, 2014, STRAWMAN PARALLEL EC
   Hudson Rick, 2012, ECMATC392012016
   Hunt Oliver, 2009, E COMMUNICATION 0817
   Iansiti M, 1997, HARVARD BUS REV, V75, P108
   JavaScript Jabber, 2014, JAVASCRIPT JABB PODC
   Judge Mike, 1996, BEAVIS BUTT HEAD DO
   Kanaracus Chris, 2007, ITWORLD         1101
   Kangax, 2010, BLOG POST
   Katz Yahuda, 2014, JAVASCRIPT MODULES
   Kennedy Niall, 2008, BLOG POST
   Khronos Group, 2011, TECHNICAL REPORT
   Kiczales Gregor, 1991, ART METAOBJECT PROTO
   Klein Adam, 2015, E COMMUNICATION 1102
   Koch Peter-Paul, 2003, LEVEL 0 DOM
   Kowal Kris, 2009, ARSTECHNICA     1201
   Kowal Kris, 2009, E COMMUNICATION 0930
   Kowal Kris, 2009, ECMATC392009011
   Kowal Kris, 2009, ONLINE DOCUMENT
   Krill P., 2011, INFOWORLD
   Lakshman Pratap, 2007, JSCRIPT DEVIATIONS E
   Lakshman Pratap, 2009, ECMATC3972009025
   Lakshman Pratap, 2008, E COMMUNICATION 0528
   Lakshman Pratap, 2008, ECMASCRIPT 3 1 DRAFT
   Lakshman Pratap, 2007, ES4 MINIMALIST PROPO
   Lakshman Pratap, 2009, ECMA262
   Lakshman Pratap, 2007, DISCUSSION BROWSER P
   Lakshman Pratap, 2007, ES3 1 PROPOSAL WORKI
   LaMonica Martin, 1995, INFOWORLD, V17, P16
   Lars THansen, 2008, ECMATC392008040
   Lazar Bill, 1997, SOFTW DEV, V5, P1070
   Leach Steve, 2018, GINGER PROJECT
   Leggett Russell, 2012, E COMMUNICATION 0319
   Leroux Brian, 2010, WTFJS
   Leung Ted, 2011, BLOG POST
   Lewis Clayton, 1999, ECMATC391999016
   Lewis Clayton, 1999, ECMATC391999008
   Lindenberg Norbert, 2012, ECMA402
   Lindsey C. H., 1993, 2 ACM SIGPLAN C HIST, DOI DOI 10.1145/154766.155365
   Macromedia, 2003, SYMB OP TYP ONL REF
   Macromedia, 2005, ACTIONSCRIPT 3 LANG
   Marcey Joel, 2004, ECMATC392004018
   Matthews J, 2004, LECT NOTES COMPUT SC, V3091, P301
   McCarthy J., 1965, LISP 1 5 PROGRAMMERS
   McFarland Tom, 1998, E COMMUNICATION 0519
   McKenzie Sebastian, 2016, BLOG POST
   Melton Don, 2003, E COMMUNICATION 0107
   Meyer R., 2014, The Atlantic
   Microsoft, 1997, ECMATC391997032 MICR
   Microsoft, 2009, ECMATC392009030 MICR
   Microsoft, 2009, JSCRIPT VERS INF
   Microsoft, 2016, WPF OV
   Miller Jim, 2007, ECMATC392007002
   Miller M. J., 2006, THESIS
   Miller M.S., 2008, Technical Report
   Miller Mark S., 2011, HARMONY CLASSES
   Miller Mark S., 2008, E COMMUNICATION 1122
   Miller Mark S., 2008, E COMMUNICATION 0313
   Miller Mark S., 2010, STATES TRANSITIONS A
   Miller Mark S., 2010, STRAWMAN GUARDS
   Miller Mark S., 2018, REGARDING PRIVATE ME
   Miller Mark S., 2010, SYNTAX EFFICIENT TRA
   Miller Mark S., 2011, CLASSES TRAIT COMPOS
   Miller Mark S., 2008, E COMMUNICATION 0819
   Miller Mark S., 2009, E COMMUNICATION 0330
   Miller Mark S., 2010, CLASSES SUGAR
   Miller Mark S., 2008, E COMMUNICATION 0423
   Miniwatts Marketing Group, 2019, INT GROWTH STAT
   Miraglia Eric, 2007, BLOG POST YAHOO 0612
   Mix Neil, 2008, E COMMUNICATION 0821
   Mix Neil, 2008, E COMMUNICATION 0313
   Moore G. E., 1975, 1975 International Electron Devices Meeting. (Technical digest), P11
   Mozilla, 2008, COR JAVASCRIPT 1 5 R
   Mozilla, 2006, TAM PROJ
   Mozilla, 2004, MOZ FDN REL HIGHL AN
   Mozilla, 2008, NEW JAVASCRIPT 1 8
   Mozilla, 2006, NEW JAVASCRIPT 1 7
   Mozilla Organization, 1998, WHO WE AR
   NASH JF, 1950, P NATL ACAD SCI USA, V36, P48, DOI 10.1073/pnas.36.1.48
   Netscape, 2000, COR JAVASCRIPT GUID
   Netscape, 1995, REL NOT NETSC NAV 2
   Netscape, 1996, NAV SCRIPT
   Netscape, 1997, WHATS NEW JAVASCRIPT
   Netscape, 1997, JAVASCRIPT SEC COMM
   Netscape, 1996, NAV OBJ
   Netscape, 1996, FEAT ADD VERS 1
   Netscape, 1996, NETSC 3 0 JAVASCRIPT
   Netscape, 1996, NETSC 2 0 JAVASCRIPT
   Nierstrasz Oscar, 2000, PATTERN LANGUAGES PR, V4, P539
   Niyogi Shanku, 2010, MICROSOFT IEBLO 0318
   Node Foundation, 2018, NOD JS FDN
   Node Project, 2009, TIN ORG NOD
   Noorda Brent, 2012, HIST NOMBAS
   Nystrom Bob, 2011, HARMONIOUS CLASSES
   Openweb, 2008, OP PODC EP 2
   Opera, 2013, OP VERS HIST
   Orendorff Jason, 2014, JS LOADERS REPOSITOR
   Ousterhout J. K., 1997, IEEE COMPUT, V31, P23
   Papert S., 1980, MINDSTORMS CHILDREN
   Prasanna S, 2002, EXPRESS COMPUTE 0729
   Proietti Valerio, 2006, MOOTOOLS NET
   Raggett Dave, 1998, ECMASCRIPT PROPOSALS
   Raggett Dave, 1998, W3C SPICE DETAILS
   Raggett Dave, 2000, M 20 JAN 2000
   Raggett Dave, 1998, WORK GROUP M 19 NOV
   Raggett Dave, 1998, SPICE DOCUMENTATION
   Raggett Dave, 1999, ECMATC391999006
   Raggett Dave, 1999, M 14 OCT 1999
   Rein Lisa, 1997, NETSCAPE WORLD, V2, P5
   Resig John, 2006, JQUERY NEW WAVE JAVA
   Reuters, 2000, PC WORLD        0627
   RobertWelland Shon Katzenberger, 2018, ORAL HIST MEMBERS OR
   Rossberg Andreas, 2013, HARMONY REFUTABLE PA
   Russell Alex, 2005, DOJO OVERLINEO BROWS
   Sampath Srivats, 1996, ECMAGA1996098
   Schneider John, 2005, ECMA357
   Schulze William A., 2004, ECMATC39TG12004005
   Schulze William A., 2004, ECMATC39TG12004006
   Seibel Peter., 2009, Coders at Work: Reflections on the Craft of Programming
   Shah Rawn, 1996, JAVAWORLD, V1, P2
   Sharp Remy, 2010, BLOG POST
   Singer David, 1998, W3C SHAP FUT HTML WO
   Smith Walter R., 1995, P 10 ANN C OBJ OR PR, DOI DOI 10.1145/217838.217844
   Stachowiak Maciej, 2008, E COMMUNICATION 0527
   Stachowiak Maciej, 2007, COMMUNICATION   0316
   Stachowiak Maciej, 2007, WEBKIT ORG BLOG 1218
   Stachowiak Maciej, 2008, WEBKIT ORG BLOG 0918
   Stack Overflow, 2018, STACK SURV 2018 DEV
   Steele Guy L., 1997, ECMA262
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   Stephenson Sam, 2007, PROTOTYPE JAVASCRIPT
   Sussman Gerald Jay, 1975, SCHEME INTERPRETER E, DOI DOI 10.1023/A:1010035624696
   Taly A, 2011, P IEEE S SECUR PRIV, P363, DOI 10.1109/SP.2011.39
   TC39, 1998, ECMATC391998010
   TC39, 2003, TC39 EM REFL
   TC39, 1997, ECMATC391997017B
   TC39, 1997, ECMATC391997030
   TC39, 1996, ECMATC391996004
   TC39, 2008, ECMATC392008054
   TC39, 2009, ECMATC392009037
   TC39, 1999, M 14 15 NOV 1999
   TC39, 2010, ECMATC392010028
   TC39, 1997, ECMATC391997001
   TC39, 2008, ECMATC392008013
   TC39, 1997, ECMATC391997039
   TC39, 1997, ECMATC391997018
   TC39, 1998, TECHN M MARCH 20 199
   TC39, 1998, TECHN M 19 FEBR 1998
   TC39, 1997, ES1 ISS RES HIST
   TC39, 1997, ECMATC391997007
   TC39, 2014, ECMATC392014051
   TC39, 1999, TC39 TC39 WORKING GR
   TC39, 1999, ECMATC391999004
   TC39, 2007, ECMATC392007012
   TC39, 2008, ECMATC392008028
   TC39, 2008, ECMATC392008105
   TC39. 1999b, 1999, ECMA TC39 M 23 24 SE
   TC39. 1999e, 1999, ECMATC391999015
   TC39. 2008b, 2008, ECMATC392008079
   TC39. 2008e, 2008, ECMATC392008086
   TC39. 2009b, 2009, ECMATC392009045
   TC39. 2009c, 2009, ECMATC392009008
   TC39. 2009d, 2009, ECMATC392009022
   TC39. 2011a, 2011, ECMATC392011037
   TC39. 2011b, 2011, ECMATC392011028
   TC39. 2012a, 2012, ECMATC392012020
   TC39. 2012b, 2012, ECMATC392012034
   TC39. 2012c, 2012, ECMATC392012056
   TC39. 2013b, 2013, ECMATC392013009
   TC39. 2015b, 2015, ECMATC392015031
   TC39 ES4, 2007, PUBL SNAPSH TC39 TG1
   TC39 Harmony, 2010, STRAWM SHORT FUNCT S
   TC39 Harmony, 2009, STRAWM PROP
   TC39 Harmony, 2015, HARM SPEC DRAFTS
   TC39 Harmony, 2008, STRAWM PROP
   TC39-TG1, 2007, ECMATC39TG12007013
   TC39-TG1, 2006, ECMATC39TG12006015
   TC39-TG1, 2007, ECMATC39TG12007036
   TC39-TG1, 2005, ECMATC39TG12005006
   TC39-TG1, 2007, ECMATC39TG12007025
   TC39-TG1, 2006, ECMATC39TG12006041
   TC39-TG1, 2007, ECMATC39TG12007017
   TC39-TG1, 2006, ECMATC39TG12006020
   TC39-TG1. 2006b, 2006, ECMATC39TG12006011
   TC39-TG1. 2006c, 2006, ECMATC39TG12006032
   Tennent R.D., 1981, PRINCIPLES PROGRAMMI
   Terlson Brian, 2012, E COMMUNICATION 1226
   Tobin-Hochstadt Sam, 2010, ECMATC392010017
   Tobin-Hochstadt Sam, 2010, E COMMUNICATION 0204
   Traceur Project, 2011, TRAC COMP PROJ
   Traceur Project, 2011, TRAC LANG FEAT CLASS
   UNGAR D, 1987, SIGPLAN NOTICES, V22, P227, DOI 10.1145/38807.38828
   Van Cutsem T., 2011, P ACM INT WORKSH PRO, P1, DOI [10.1145/2093328.2093330, DOI 10.1145/2093328.2093330]
   Van Cutsem Tom, 2011, E COMMUNICATION 1017
   Van Cutsem Tom, 2012, PROPOSAL DIRECT PROX
   Van Cutsem Tom, 2009, E COMMUNICATION 1207
   Van Cutsem Tom, 2013, BLOG POST
   Van Cutsem Tom, 2011, DIRECT PROXY SPEC
   Van Cutsem Tom, 2010, ECMATC392010007
   Van Cutsem Tom, 2011, STRAWMAN DIRECT PROX
   Van Cutsem Tom, 2010, CATCH ALL PROXIES
   Van Cutsem Tom, 2013, P EUR C OBJ OR PROGR
   Van Eaton Jim, 2005, MICROSOFT EXCHA 0621
   VANCUTSEM T, 2010, P DLS 2010, V45, P59
   Vartiainen Markku, 2001, ECMA327
   Venter Herman, 1998, UPDATES SECTION 12
   Venter Herman, 1998, INSTANCEOF PROPOSAL
   Venter Herman, 1998, REVISED SECTION 12
   Visser Eelco, 2001, LNCS
   W3C, 1998, SHAP FUT HTML
   W3Techs, 2010, US JAV LIB WEBS
   Wagner Richard, 1999, ECMA290
   Wagner Richard, 1998, ECMATC391998011
   Walker Joe, 2018, BRAVE COOKIE MONSTER
   Weinstein Rafael, 2012, HARMONY OBSERVE
   Weinstein Rafael, 2013, COMMUNICATION   0918
   Weinstein Rafael, 2013, ECMATC392013062
   Welland Robert, 1996, ECMATC391996005
   Wikinews, 2007, WIKINEWS        0816
   Wiltamuth Scott, 1997, ECMATC391997024
   Wiltamuth Scott, 1997, ECMATC391997009
   Wiltamuth Scott, 1997, ECMATC391997026
   Wiltamuth Scott, 1997, ECMATC391997025
   Wiltamuth Scott, 1997, ECMATC391997010
   Wiltamuth Scott, 1997, ECMATC391997015
   Wiltamuth Scott, 1997, ECMATC391997002
   Wiltamuth Scott, 1997, ECMATC391997012
   Wiltamuth Scott, 1997, ECMATC391997008
   Wiltamuth Scott, 1997, ECMATC391997005
   Wingfield Nick, 1995, INFOWORLD, V17, P1
   Wirfs-Brock Allen, 2008, PROPOSED ECMASCRIPT
   Wirfs-Brock Allen, 2012, SUBCLASSING BUILT IN
   Wirfs-Brock Allen, 2014, ECMATC392014032
   Wirfs-Brock Allen, 2007, IMPLEMENTATION LOOPH
   Wirfs-Brock Allen, 2015, ECMATC392015030
   Wirfs-Brock Allen, 2007, NOTES 8 16 07 ALLEN
   Wirfs-Brock Allen, 2011, DRAFT SPECIFICATION
   Wirfs-Brock Allen, 2007, MOZILLA EXTENSIONS E
   Wirfs-Brock Allen, 2012, STRAWMAN MAXIMALLY M
   Wirfs-Brock Allen, 2012, ECMATC392012071
   Wirfs-Brock Allen, 2011, OTHER OBJECT INITIAL
   Wirfs-Brock Allen, 2007, ECMATC39TG12007042
   Wirfs-Brock Allen, 2009, ECMATC392009052
   Wirfs-Brock Allen, 2013, ECMATC392013MISC1
   Wirfs-Brock Allen, 2010, E COMMUNICATION 0203
   Wirfs-Brock Allen, 2011, STRAWMAN DECLARATIVE
   Wirfs-Brock Allen, 2014, ECMATC392014046
   Wirfs-Brock Allen, 2012, ECMATC392012MISC5
   Wirfs-Brock Allen, 2011, ECMATC392011032
   Wirfs-Brock Allen, 2012, ECMATC392012054
   Wirfs-Brock Allen, 2007, RE ECMASCRIPT 4 LANG
   Wirfs-Brock Allen, 2012, DRAFT SPECIFICATION
   Wirfs-Brock Allen, 2015, DRAFT SPECIFICATION
   Wirfs-Brock Allen, 2015, ECMATC392015MISC1
   Wirfs-Brock Allen, 2014, DRAFT SPECIFICATION
   Wirfs-Brock Allen, 2012, E COMMUNICATION 0114
   Wirfs-Brock Allen, 2011, ECMATC392011019
   Wirfs-Brock Allen, 2011, ECMA262
   WirfsBrock A., 2015, ECMA262
   Yahoo! Developer Network, 2008, YUI COR ONL DOC
   Zakai A., 2011, Proceedings of the ACM international conference companion on object oriented programming systems languages and applications companion, P301, DOI DOI 10.1145/2048147.2048224
   Zawinski Jamie, 1999, NETSCAPE DORM
   Zbarsky Boris, 2014, E COMMUNICATION 0617
   Zuras D., 2008, 7542008 IEEE, V754-2008, P1, DOI [DOI 10.1109/IEEESTD.2008.4610935, DOI 10.1109/IEEESTD.2008.5976968]
NR 475
TC 12
Z9 13
U1 0
U2 16
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 77
DI 10.1145/3386327
PG 189
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900010
OA gold
DA 2024-07-18
ER

PT J
AU Aschieri, F
   Genco, FA
AF Aschieri, Federico
   Genco, Francesco A.
TI Par Means Parallel: Multiplicative Linear Logic Proofs as Concurrent
   Functional Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Proofs-as-programs; concurrency; classical multiplicative linear logic
ID CALCULUS
AB Along the lines of Abramsky's lProofs-as-Processesz program, we present an interpretation of multiplicative linear logic as typing system for concurrent functional programming. In particular, we study a linear multipleconclusion natural deduction system and show it is isomorphic to a simple and natural extension of lambda-calculus with parallelism and communication primitives, called lambda(sic)(sic) We shall prove that lambda(sic)(sic) satisfies all the desirable properties for a typed programming language: subject reduction, progress, strong normalization and confluence.
C1 [Aschieri, Federico] TU Wien, Vienna, Austria.
   [Genco, Francesco A.] Univ Paris 1 Pantheon Sorbonne, IHPST, Paris, France.
C3 Technische Universitat Wien
RP Aschieri, F (corresponding author), TU Wien, Vienna, Austria.
FU FWF; ANR JCJC project Intuitions Bolzaniennes; Austrian Science Fund
   (FWF) [Y544] Funding Source: Austrian Science Fund (FWF)
FX Funded by FWF grant P32080-N31.; Funded by ANR JCJC project Intuitions
   Bolzaniennes and by FWF project P32080-N31.
CR ABRAMSKY S, 1994, THEOR COMPUT SCI, V135, P5, DOI 10.1016/0304-3975(94)00103-0
   Abramsky S., 1996, P NATO ADV STUD I DE, P35
   [Anonymous], 2017, 32 ANN ACMIEEE S LOG
   Aschieri F, 2018, ELECTRON P THEOR COM, P43, DOI 10.4204/EPTCS.277.4
   Aschieri F, 2016, THEOR COMPUT SCI, V625, P125, DOI 10.1016/j.tcs.2016.02.028
   Avron A., 1991, Annals of Mathematics and Artificial Intelligence, V4, P225, DOI 10.1007/BF01531058
   Beffara E, 2006, ELECTRON NOTES THEOR, V155, P147, DOI 10.1016/j.entcs.2005.11.055
   BELLIN G, 1994, THEOR COMPUT SCI, V135, P11, DOI 10.1016/0304-3975(94)00104-9
   Boudol Gerard, 1992, RES REP RR 1702
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Carbone M, 2017, ACTA INFORM, V54, P243, DOI 10.1007/s00236-016-0285-y
   CELLUCCI C, 1992, ANN PURE APPL LOGIC, V58, P111, DOI 10.1016/0168-0072(92)90002-H
   Dardha O, 2018, LECT NOTES COMPUT SC, V10803, P91, DOI 10.1007/978-3-319-89366-2_5
   Dardha Ornela, 2012, PROC PPDP 2012, P139, DOI DOI 10.1145/2370776.2370794
   Eades H, 2016, LECT NOTES COMPUT SC, V9537, P90, DOI 10.1007/978-3-319-27683-0_7
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Girard J.-Y., 1989, Cambridge Tracts in Theoretical Computer Science, V7
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Honda K, 2010, THEOR COMPUT SCI, V411, P2223, DOI 10.1016/j.tcs.2010.01.028
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Kokke W, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290337
   Krivine Jean-Louis, 2009, PANOR SYNTHESES, V27, P197
   Lindley S, 2015, LECT NOTES COMPUT SC, V9032, P560, DOI 10.1007/978-3-662-46669-8_23
   Mazurak K, 2010, ACM SIGPLAN NOTICES, V45, P39, DOI 10.1145/1932681.1863551
   Merro M, 2004, MATH STRUCT COMP SCI, V14, P715, DOI 10.1017/S0960129504004323
   MILNER R, 1985, LECT NOTES COMPUT SC, V197, P197
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Milner R., 1980, A calculus of communicating systems
   PARIGOT M, 1992, LECT NOTES ARTIF INT, V624, P190
   PARIGOT M, 1992, LECT NOTES ARTIF INT, V592, P361
   Paykin Jennifer, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P273, DOI 10.1007/978-3-319-30936-1_15
   Pérez JA, 2012, LECT NOTES COMPUT SC, V7211, P539, DOI 10.1007/978-3-642-28869-2_27
   Prawitz D., 1971, P 2 SCAND LOG S
   Pruiksma K, 2019, ELECTRON P THEOR COM, P60, DOI 10.4204/EPTCS.291.6
   Sangiorgi D., 1993, Ph.D. thesis
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   Wadler P, 2015, COMMUN ACM, V58, P75, DOI 10.1145/2699407
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
NR 38
TC 4
Z9 4
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 18
DI 10.1145/3371086
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400019
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Binder, D
   Jabs, J
   Skupin, I
   Ostermann, K
AF Binder, David
   Jabs, Julian
   Skupin, Ingo
   Ostermann, Klaus
TI Decomposition Diversity with Symmetric Data and Codata
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Types; Codata; Defunctionalization; Refunctionalization
AB The expression problem describes a fundamental trade-off in program design: Should a program's primary decomposition be determined by the way its domain objects are constructed ("functional" decomposition), or by the way they are destructed ("object-oriented" decomposition)? We argue that programming languages should not force one of these decompositions on the programmer; rather, a programming language should support both ways of decomposing a program in a symmetric way, with an easy translation between these decompositions. However, current programming languages are usually not symmetric and hence make it unnecessarily hard to switch the decomposition.
   We propose a language that is symmetric in this regard and allows a fully automatic translation between "functional" and "object-oriented" decomposition. We present a language with algebraic data types and pattern matching for "functional" decomposition and codata types and copattern matching for "objectoriented" decomposition, together with a bijective translation that turns a data type into a codata type ("destructorization") or vice versa ("constructorization"). We present the first symmetric programming language with support for local (co)pattern matching, which includes local anonymous function or object definitions, that allows an automatic translation as described above. We also present the first mechanical formalization of such a language and prove i) that the type system is sound, that the translations between data and codata types are ii) type-preserving, iii) behavior-preserving and iv) inverses of each other. We also extract a mechanically verified implementation from our formalization and have implemented an IDE with direct support for these translations.
C1 [Binder, David; Jabs, Julian; Skupin, Ingo; Ostermann, Klaus] Univ Tubingen, Dept Comp Sci, Sand 14, D-72076 Tubingen, Germany.
C3 Eberhard Karls University of Tubingen
RP Binder, D (corresponding author), Univ Tubingen, Dept Comp Sci, Sand 14, D-72076 Tubingen, Germany.
EM david.binder@uni-tuebingen.de; julian.jabs@uni-tuebingen.de;
   skupin@informatik.uni-tuebingen.de; klaus.ostermann@uni-tuebingen.de
OI Binder, David/0000-0003-1272-0972
CR Abel A, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2480359.2429075
   [Anonymous], 1991, J FUNCT PROGRAM
   Baelde D, 2012, ACM T COMPUT LOG, V13, DOI 10.1145/2071368.2071370
   Boquist Urban, 1996, S IMPL APPL FUNCT LA, P58
   Carette J, 2007, LECT NOTES COMPUT SC, V4807, P222
   Cook WR, 2009, ACM SIGPLAN NOTICES, V44, P557, DOI 10.1145/1639949.1640133
   COOK WR, 1991, LECT NOTES COMPUT SC, V489, P151
   Danvy O., 2011, Proceedings of the 2011 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation, PEPM 2011, Austin, TX, USA, January 24-25, 2011, P1, DOI DOI 10.1145/1929501.1929503
   Danvy O, 2009, SCI COMPUT PROGRAM, V74, P534, DOI 10.1016/j.scico.2007.10.007
   Danvy Olivier, 2001, Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming. PPDP'01, P162, DOI DOI 10.1145/773184.773202
   Downen P, 2019, LECT NOTES COMPUT SC, V11423, P119, DOI 10.1007/978-3-030-17184-1_5
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gimenez Eduardo, 1996, TYPES PROOFS PROGRAM
   Grust T, 2013, PROC VLDB ENDOW, V6, P1214, DOI 10.14778/2536274.2536279
   HAGINO T, 1989, J SYMB COMPUT, V8, P629, DOI 10.1016/S0747-7171(89)80065-3
   Jacobs Bart, 1995, OBJECT ORIENTATION P, P83
   JOHNSSON T, 1985, LECT NOTES COMPUT SC, V201, P190
   Krishnamurthi S., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P91, DOI 10.1007/BFb0054088
   Laforgue P, 2017, PROCEEDINGS OF THE 19TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2017), P97, DOI 10.1145/3131851.3131869
   Lammel Ralf, 2008, LNCS, V5133
   Oliveira BCDS, 2012, LECT NOTES COMPUT SC, V7313, P2, DOI 10.1007/978-3-642-31057-7_2
   Ostermann Klaus, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P60, DOI 10.1007/978-3-319-89884-1_3
   Rendel T, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P269, DOI 10.1145/2784731.2784763
   Reynolds J.C., 1975, NEW DIRECTIONS ALGOR, P157
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Wadler P, 2003, ACM SIGPLAN NOTICES, V38, P189, DOI 10.1145/944746.944723
   Zeilberger N, 2008, ANN PURE APPL LOGIC, V153, P66, DOI 10.1016/j.apal.2008.01.001
NR 27
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 30
DI 10.1145/3371098
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400031
OA gold
DA 2024-07-18
ER

PT J
AU Dang, HH
   Jourdan, JH
   Kaiser, JO
   Dreyer, D
AF Dang, Hoang-Hai
   Jourdan, Jacques-Henri
   Kaiser, Jan-Oliver
   Dreyer, Derek
TI RustBelt Meets Relaxed Memory
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Rust; semantic soundness; relaxed memory models; Iris
AB The Rust programming language supports safe systems programming by means of a strong ownership-tracking type system. In their prior work on RustBelt, Jung et al. began the task of setting Rust's safety claims on a more rigorous formal foundation. Specifically, they used Iris, a Coq-based separation logic framework, to build a machine-checked proof of semantic soundness for a lambda-calculus model of Rust, as well as for a number of widely-used Rust libraries that internally employ unsafe language features. However, they also made the significant simplifying assumption that the language is sequentially consistent. In this paper, we adapt RustBelt to account for the relaxed-memory operations that concurrent Rust libraries actually use, in the process uncovering a data race in the Arc library. We focus on the most interesting technical problem: how to reason about resource reclamation under relaxed memory, using a logical construction we call synchronized ghost state.
C1 [Dang, Hoang-Hai; Kaiser, Jan-Oliver; Dreyer, Derek] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Jourdan, Jacques-Henri] Univ Paris Saclay, CNRS, Lab Rech Informat, F-91405 Orsay, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite Paris
   Cite; Universite Paris Saclay
RP Dang, HH (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
EM haidang@mpi-sws.org; jacques-henri.jourdan@lri.fr; janno@mpi-sws.org;
   dreyer@mpi-sws.org
OI Jourdan, Jacques-Henri/0000-0002-9781-7097; Dang,
   Hai/0000-0003-1029-1772
FU European Research Council (ERC) under the European Union's Horizon 2020
   Framework Programme [683289]
FX We would like to thank Jeehoon Kang, Ori Lahav, and Viktor Vafeiadis for
   their suggestions on building the race detector of ORC11. We would also
   like to thank Ralf Jung and Robbert Krebbers for various discussions on
   the original RustBelt development, as well as for their maintanance
   effort on both Iris and RBrlx. Finally, we would like to thank the
   anonymous reviewers from both PLDI 2019 and POPL 2020 for their
   constructive suggestions concerning presentation. This research was
   supported in part by a European Research Council (ERC) Consolidator
   Grant for the project lRustBeltz, funded under the European Union's
   Horizon 2020 Framework Programme (grant agreement no. 683289).
CR Ahmed A, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709094
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Boehm H.-J., 2014, MSPC, p7:1, DOI DOI 10.1145/2618128.2618134
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyland J., 2003, LNCS, V2694, P55, DOI [10.1007/3-540-44898-54, DOI 10.1007/3-540-44898-54]
   Chase David, 2005, P 17 ANN ACM S PAR A, P21, DOI DOI 10.1145/1073970.1073974
   Dang Hoang-Hai, 2019, RUSTBELT MEETS RELAX, DOI [10.5281/zenodo.3539237, DOI 10.5281/ZENODO.3539237]
   Doherty S, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P355, DOI 10.1145/3293883.3295702
   Doko M, 2017, LECT NOTES COMPUT SC, V10201, P448, DOI 10.1007/978-3-662-54434-1_17
   Doko M, 2016, LECT NOTES COMPUT SC, V9583, P413, DOI 10.1007/978-3-662-49122-5_20
   Dreyer Derek, 2016, RUSTBELT PROJECT WEB
   Gotsman A, 2007, LECT NOTES COMPUT SC, V4807, P19
   He MD, 2018, INT J PARALLEL PROG, V46, P1157, DOI 10.1007/s10766-017-0518-x
   Hobor A, 2008, LECT NOTES COMPUT SC, V4960, P353
   Jourdan Jacques-Henri, 2018, RUST
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Kaiser Jan-Oliver, 2017, EUR C OBJ OR PROGR E, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.17, 10.4230/LIPIcs.ECOOP.2017]
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Klabnik S., 2018, The Rust Programming Language
   Krebbers R, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236772
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Podkopaev Anton, 2016, ABS160601400 CORR
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Svendsen Kasper, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P357, DOI 10.1007/978-3-319-89884-1_13
   Tassarotti J, 2015, ACM SIGPLAN NOTICES, V50, P110, DOI [10.1145/2737924.2737992, 10.1145/2813885.2737992]
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Turon Aaron, 2016, CROSSBEAM SUPPORT CO
   Vafeaidis Viktor, 2013, OOPSLA
NR 31
TC 39
Z9 41
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 34
DI 10.1145/3371102
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400035
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Bastani, O
   Zhang, X
   Solar-Lezama, A
AF Bastani, Osbert
   Zhang, Xin
   Solar-Lezama, Armando
TI Probabilistic Verification of Fairness Properties via Concentration
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic verification; machine learning; fairness
ID STATISTICAL-MODEL CHECKING; ABSTRACT INTERPRETATION; DISCRIMINATION
AB As machine learning systems are increasingly used to make real world legal and financial decisions, it is of paramount importance that we develop algorithms to verify that these systems do not discriminate against minorities. We design a scalable algorithm for verifying fairness specifications. Our algorithm obtains strong correctness guarantees based on adaptive concentration inequalities; such inequalities enable our algorithm to adaptively take samples until it has enough data to make a decision. We implement our algorithm in a tool called VERIFAIR, and show that it scales to large machine learning models, including a deep recurrent neural network that is more than five orders of magnitude larger than the largest previously-verified neural network. While our technique only gives probabilistic guarantees due to the use of random samples, we show that we can choose the probability of error to be extremely small.
C1 [Bastani, Osbert] Univ Penn, Philadelphia, PA 19104 USA.
   [Zhang, Xin; Solar-Lezama, Armando] MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
C3 University of Pennsylvania; Massachusetts Institute of Technology (MIT)
RP Bastani, O (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM obastani@seas.upenn.edu; xzhang@csail.mit.edu; asolar@csail.mit.edu
OI Bastani, Osbert/0000-0001-9990-7566; Solar Lezama,
   Armando/0000-0001-7604-8252
FU ONR [N00014-17-1-2699]
FX This work was supported by ONR N00014-17-1-2699.
CR Albarghouthi A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133904
   [Anonymous], 2017, arXiv preprint arXiv:1704.03477
   [Anonymous], 2008, P 14 ACM SIGKDD INT, DOI DOI 10.1145/1401890.1401959
   [Anonymous], 2018, P INT C LEARN REPR
   Barocas S, 2016, CALIF LAW REV, V104, P671, DOI 10.15779/Z38BG31
   Bastani O, 2016, ADV NEUR IN, V29
   Biddle D., 2006, Adverse Impact and Test Validation: A Practitioner's Guide to Valid andDefensible Employment Testing
   Calders T, 2010, DATA MIN KNOWL DISC, V21, P277, DOI 10.1007/s10618-010-0190-x
   Calders T, 2009, INT CONF DAT MIN WOR, P13, DOI 10.1109/ICDMW.2009.83
   Calmon FP, 2017, ADV NEUR IN, V30
   Chen YS, 2018, J MACH LEARN RES, V19, P1
   Claret Guillaume., 2013, Foundations of Software Engineering, P92, DOI DOI 10.1145/2491411.2491423
   Clarke EM, 2011, LECT NOTES COMPUT SC, V6996, P1, DOI 10.1007/978-3-642-24372-1_1
   Corbett-Davies S, 2017, KDD'17: PROCEEDINGS OF THE 23RD ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P797, DOI 10.1145/3097983.3098095
   Datta A, 2017, STUD BIG DATA, V32, P71, DOI 10.1007/978-3-319-54024-5_4
   Dwork C., 2012, P 3 INNOVATIONS THEO, P214
   Dwork Cynthia, 2018, C FAIRNESS ACCOUNTAB, P119
   Esteva A, 2017, NATURE, V542, P115, DOI 10.1038/nature21056
   Feldman M, 2015, KDD'15: PROCEEDINGS OF THE 21ST ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P259, DOI 10.1145/2783258.2783311
   Filieri A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P622, DOI 10.1109/ICSE.2013.6606608
   Fish B, 2016, P 2016 SIAM INT C DA, P144, DOI DOI 10.1137/1.9781611974348.17
   Galhotra S, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P498, DOI 10.1145/3106237.3106277
   Gehr T, 2018, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2018.00058
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   Geldenhuys Jaco, 2012, P 2012 INT S SOFTWAR, P166, DOI DOI 10.1145/2338965.2336773
   Goodfellow I. J., 2015, 3 INT C LEARNING REP
   Google, 2018, RECURRENT NEURAL NET
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Grosu R, 2005, LECT NOTES COMPUT SC, V3440, P271
   Hajian S, 2013, IEEE T KNOWL DATA EN, V25, P1445, DOI 10.1109/TKDE.2012.72
   Hardt M, 2016, ADV NEUR IN, V29
   Hérault T, 2004, LECT NOTES COMPUT SC, V2937, P73
   Hérault T, 2006, INT CONF QUANT EVAL, P129
   HOEFFDING W, 1963, J AM STAT ASSOC, V58, P13, DOI 10.2307/2282952
   Huang XW, 2017, LECT NOTES COMPUT SC, V10426, P3, DOI 10.1007/978-3-319-63387-9_1
   Johari R, 2017, KDD'17: PROCEEDINGS OF THE 23RD ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1517, DOI 10.1145/3097983.3097992
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Kilbertus N, 2017, ADV NEUR IN, V30
   Kleinberg Jon, 2017, 8 INN THEOR COMP SCI, V67
   Kusner Matt J, 2017, ADV NEURAL INFORM PR, P4066, DOI DOI 10.48550/ARXIV.1703.06856
   Kwiatkowska M, 2002, LECT NOTES COMPUT SC, V2324, P200
   Lakkaraju Himabindu, 2017, KDD
   LAWRENCE J, 1991, MATH COMPUT, V57, P259, DOI 10.1090/S0025-5718-1991-1079024-2
   Legay A, 2010, LECT NOTES COMPUT SC, V6418, P122, DOI 10.1007/978-3-642-16612-9_11
   Lorens Hakan, 2004, THESIS PITTSBURGH PA THESIS PITTSBURGH PA
   Monniaux D, 2001, LECT NOTES COMPUT SC, V2028, P367
   Monniaux D, 2000, LECT NOTES COMPUT SC, V1824, P322
   Monniaux D, 2001, ACM SIGPLAN NOTICES, V36, P93, DOI 10.1145/373243.360211
   Nabi R, 2018, AAAI CONF ARTIF INTE, P1931
   Picchi A., 2019, CBS NEWS
   Sampson A, 2014, ACM SIGPLAN NOTICES, V49, P112, DOI [10.1145/2666356.2594294, 10.1145/2594291.2594294]
   Sankaranarayanan S, 2013, ACM SIGPLAN NOTICES, V48, P447, DOI 10.1145/2499370.2462179
   Sen K, 2005, LECT NOTES COMPUT SC, V3576, P266
   Sen K, 2004, LECT NOTES COMPUT SC, V3114, P202
   Simon Mallory., 2009, HP LOOKING CLAIM WEB
   Tjeng Vincent, 2017, ARXIV171107356
   Valiant L. G., 1979, Theoretical Computer Science, V8, P189, DOI 10.1016/0304-3975(79)90044-6
   WALD A, 1945, ANN MATH STAT, V16, P117, DOI 10.1214/aoms/1177731118
   Wen Min, 2019, ARXIV PREPRINT ARXIV
   Younes H. L. S., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P223
   Younes H.L. S., 2002, A IP S Workshop on Planning via Model Checking, P81
   Younes HLS, 2006, INFORM COMPUT, V204, P1368, DOI 10.1016/j.ic.2006.05.002
   Zafar MB, 2017, PROCEEDINGS OF THE 26TH INTERNATIONAL CONFERENCE ON WORLD WIDE WEB (WWW'17), P1171, DOI 10.1145/3038912.3052660
   Zarsky TZ, 2014, WASH LAW REV, V89, P1375
   Zemel Rich, 2013, PMLR, P325
   Zhao S., 2016, Advances In Neural Information Processing Systems, P1343
NR 66
TC 31
Z9 35
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 118
DI 10.1145/3360544
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500003
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Shi, A
   Hadzi-Tanovic, M
   Zhang, LM
   Marinov, D
   Legunsen, O
AF Shi, August
   Hadzi-Tanovic, Milica
   Zhang, Lingming
   Marinov, Darko
   Legunsen, Owolabi
TI Reflection-Aware Static Regression Test Selection
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE regression test selection; reflection; regression testing; static
   analysis; class firewall; string analysis
AB Regression test selection (RTS) aims to speed up regression testing by rerunning only tests that are affected by code changes. RTS can be performed using static or dynamic analysis techniques. Our prior study showed that static and dynamic RTS perform similarly for medium-sized Java projects. However, the results of that prior study also showed that static RTS can be unsafe, missing to select tests that dynamic RTS selects, and that reflection was the only cause of unsafety observed among the evaluated projects.
   In this paper, we investigate live techniques-three purely static techniques and two hybrid static-dynamic techniques-that aim to make static RTS safe with respect to reflection. We implement these reflection-aware (RA) techniques by extending the reflection-unaware (RU) class-level static RTS technique in a tool called STARTS. To evaluate these RA techniques, we compare their end-to-end times with RU, and with RetestAll, which reruns all tests after every code change. We also compare safety and precision of the RA techniques with Ekstazi, a state-of-the-art dynamic RTS technique; precision is a measure of unaffected tests selected.
   Our evaluation on 1173 versions of 24 open-source Java projects shows negative results. The RA techniques improve the safety of RU but at very high costs. The purely static techniques are safe in our experiments but decrease the precision of RU, with end-to-end time at best 85.8% of RetestAll time, versus 69.1% for RU. One hybrid static-dynamic technique improves the safety of RU but at high cost, with end-to-end time that is 91.2% of RetestAll. The other hybrid static-dynamic technique provides better precision, is safer than RU, and incurs lower end-to-end time-75.8% of RetestAll, but it can still be unsafe in the presence of test-order dependencies. Our study highlights the challenges involved in making static RTS safe with respect to reflection.
C1 [Shi, August; Hadzi-Tanovic, Milica; Marinov, Darko; Legunsen, Owolabi] Univ Illinois, Champaign, IL 61820 USA.
   [Zhang, Lingming] Univ Texas Dallas, Richardson, TX 75083 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   University of Texas System; University of Texas Dallas
RP Shi, A (corresponding author), Univ Illinois, Champaign, IL 61820 USA.
EM awshi2@illinois.edu; milicah2@illinois.edu; lingming.zhang@utdallas.edu;
   marinov@illinois.edu; legunse2@illinois.edu
FU NSF [CCF-1421503, CCF-1566589, CNS-1646305, CNS-1740916, CCF-1763788,
   CCF-1763906]; Microsoft; Qualcomm
FX We thank David Craig, Alex Gyori, Farah Hariri, and Sasa Misailovic for
   discussions about this work. We are grateful to the anonymous reviewers
   for their comments and feedback; we used their words in framing the
   conclusions. This work was partially supported by NSF grants
   CCF-1421503, CCF-1566589, CNS-1646305, CNS-1740916, CCF-1763788, and
   CCF-1763906. We gratefully acknowledge support for research on
   regression testing from Microsoft and Qualcomm.
CR [Anonymous], 2016, ISSTA
   [Anonymous], 2014, P 2014 INT S SOFTW T
   [Anonymous], INT S SOFTW TEST AN
   Apache Software Foundation, 2019, AP CAM
   Apache Software Foundation, 2019, AP CXF
   Apache Software Foundation, 2019, AP COMM MATH
   Badri L, 2005, 12TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P167, DOI 10.1109/APSEC.2005.100
   Barros P, 2015, IEEE INT CONF AUTOM, P669, DOI 10.1109/ASE.2015.69
   Bell J, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P550, DOI 10.1145/2568225.2568248
   Bell J, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P770, DOI 10.1145/2786805.2786823
   Bodden E, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P241, DOI 10.1145/1985793.1985827
   Celik A, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P845, DOI 10.1145/3236024.3275527
   Celik A, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P809, DOI 10.1145/3106237.3106297
   Chen LC, 2018, IEEE INT CONF SOFTW, P58, DOI 10.1109/ICST.2018.00016
   CHEN YF, 1994, PROC INT CONF SOFTW, P211
   Chiba S, 2000, LECT NOTES COMPUT SC, V1850, P313
   Christensen AS, 2003, LECT NOTES COMPUT SC, V2694, P1
   de Oliveira Guimaraes J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P440, DOI 10.1007/BFb0054103
   Dini N, 2016, PROC INT SYMP SOFTW, P47, DOI 10.1109/ISSRE.2016.28
   Elbaum S, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P235, DOI 10.1145/2635868.2635910
   Esfahani H, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P11, DOI 10.1145/2889160.2889222
   Gambi A, 2018, IEEE INT CONF SOFTW, P1, DOI 10.1109/ICST.2018.00011
   Gligoric M., 2015, P 2015 INT S SOFTWAR, P211, DOI 10.1145/2771783.2771784
   Gligoric M, 2015, 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, Vol 2, P713, DOI 10.1109/ICSE.2015.230
   Grech Neville, 2018, P 32 EUR C OBJ ORJ O, V26, P1
   Greiler M, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P322, DOI 10.1109/ICST.2013.45
   Gupta Pooja., 2011, Testing at the speed and scale of google
   Gyori A, 2018, PROC INT SYMP SOFTW, P112, DOI 10.1109/ISSRE.2018.00022
   Gyori Alex., 2015, Proceedings of the 2015 International Symposium on Software Testing and Analysis, P223
   Hadzi-Tanovic Milica, 2018, THESIS U ILLINOIS UR
   Harrold MJ, 2001, ACM SIGPLAN NOTICES, V36, P312, DOI 10.1145/504311.504305
   Herzig K, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P39, DOI 10.1109/ICSE.2015.133
   Huo C, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P621, DOI 10.1145/2635868.2635917
   Karlsson Henrik, 2019, THESIS KTH ROYAL I T
   Kirkegaard C, 2004, IEEE T SOFTWARE ENG, V30, P181, DOI 10.1109/TSE.2004.1271173
   KUNG DC, 1995, J OBJECT-ORIENT PROG, V8, P51
   Lam W, 2019, IEEE INT CONF SOFTW, P312, DOI 10.1109/ICST.2019.00038
   Lam Wing, 2015, TESTS COLLIDE EVALUA
   Landman D, 2017, PROC INT CONF SOFTW, P507, DOI 10.1109/ICSE.2017.53
   Legunsen O, 2019, IEEE INT CONF SOFTW, P300, DOI 10.1109/ICST.2019.00037
   Legunsen O, 2017, IEEE INT CONF AUTOM, P949, DOI 10.1109/ASE.2017.8115710
   Legunsen O, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P583, DOI 10.1145/295029.2950361
   Legunsen O, 2015, 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, Vol 2, P615, DOI 10.1109/ICSE.2015.206
   Leung H. K. N., 1990, Proceedings. Conference on Software Maintenance 1990 (Cat. No.90CH2921-5), P290, DOI 10.1109/ICSM.1990.131377
   Li D, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P661, DOI 10.1145/2786805.2786879
   Li L, 2016, IEEE INT CONF AUTOM, P756, DOI 10.1145/2970276.2970277
   Li Y, 2015, LECT NOTES COMPUT SC, V9291, P162, DOI 10.1007/978-3-662-48288-9_10
   Li Y, 2014, LECT NOTES COMPUT SC, V8586, P27
   Lingming Zhang, 2011, 2011 IEEE 27th International Conference on Software Maintenance, P23, DOI 10.1109/ICSM.2011.6080769
   Livshits B, 2015, COMMUN ACM, V58, P44, DOI 10.1145/2644805
   Lundsten Erik, 2019, Master's thesis
   Machalica M, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2019), P91, DOI 10.1109/ICSE-SEIP.2019.00018
   Memon A, 2017, 2017 IEEE/ACM 39TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE TRACK (ICSE-SEIP 2017), P233, DOI 10.1109/ICSE-SEIP.2017.16
   Oracle, 2018, JDEPS
   Orso A., 2004, Software Engineering Notes, V29, P241, DOI 10.1145/1041685.1029928
   Palomba F, 2017, PROC IEEE INT CONF S, P1, DOI 10.1109/ICSME.2017.12
   qvist J. O, 2016, P INT C PRINCIPLES P, P1
   Ren Xiaoxia, 2003, Technical Report DCS-TR-533
   Ren XX, 2004, ACM SIGPLAN NOTICES, V39, P432, DOI 10.1145/1035292.1029012
   Rothermel G., 1997, ACM Transactions on Software Engineering and Methodology, V6, P173, DOI 10.1145/248233.248262
   Rothermel G., 1993, Proceedings. Conference on Software Maintenance 1993. CSM-93 (Cat. No.93CH3360-5), P358, DOI 10.1109/ICSM.1993.366926
   Shi A, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P545, DOI 10.1145/3338906.3338925
   Shi A, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P237, DOI 10.1145/2786805.2786878
   Smaragdakis Y, 2015, LECT NOTES COMPUT SC, V9458, P485, DOI 10.1007/978-3-319-26529-2_26
   Spadini D, 2018, PROC IEEE INT CONF S, P1, DOI 10.1109/ICSME.2018.00010
   STARTS Team, 2018, STARTS WEBP
   Thies A., 2012, P 2012 INT S SOFTWAR, P1, DOI [10.1145/2338965.2336754., DOI 10.1145/2338965.2336754]
   Tufano M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P403, DOI 10.1109/ICSE.2015.59
   Wang KY, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P233, DOI 10.1145/3180155.3180254
   Yilmaz Ugur, 2019, THESIS HACETTEPE U T
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   York Nathan, 2011, Tools for Continuous Integration at Google Scale
   Zhang LM, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P199, DOI 10.1145/3180155.3180198
   Zhu CG, 2019, PROC INT CONF SOFTW, P430, DOI 10.1109/ICSE.2019.00056
NR 74
TC 15
Z9 16
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 187
DI 10.1145/3360613
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500072
OA gold
DA 2024-07-18
ER

PT J
AU Morihata, A
AF Morihata, Akimasa
TI Lambda Calculus with Algebraic Simplification for Reduction
   Parallelization by Equational Reasoning
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Parallel Reduction; Lambda Calculus; Algebraic Simplification;
   Equational Reasoning
ID DERIVATION
AB Parallel reduction is a major component of parallel programming and widely used for summarization and aggregation. It is not well understood, however, what sorts of nontrivial summarizations can be implemented as parallel reductions. This paper develops a calculus named lambda(AS), a simply typed lambda calculus with algebraic simplification. This calculus provides a foundation for studying parallelization of complex reductions by equational reasoning. Its key feature is delta abstraction. A delta abstraction is observationally equivalent to the standard lambda abstraction, but its body is simplified before the arrival of its arguments by using algebraic properties such as associativity and commutativity. In addition, the type system of lambda(AS) guarantees that simplifications due to delta abstractions do not lead to serious overheads. The usefulness of lambda(AS) is demonstrated on examples of developing complex parallel reductions, including those containing more than one reduction operator, loops with jumps, prefix-sum patterns, and even tree manipulations.
C1 [Morihata, Akimasa] Univ Tokyo, Tokyo, Japan.
C3 University of Tokyo
RP Morihata, A (corresponding author), Univ Tokyo, Grad Sch Arts & Sci, Meguro Ku, 3-8-1 Komaba, Tokyo 1538902, Japan.
EM morihata@graco.c.u-tokyo.ac.jp
RI Morihata, Akimasa/KFR-7683-2024
OI Morihata, Akimasa/0000-0003-2741-5954
FU JSPS [15K15965]; Grants-in-Aid for Scientific Research [15K15965]
   Funding Source: KAKEN
FX The author is grateful to Makoto Hamana for his suggestion of related
   articles that were useful for proving Theorem 3.1, and Shigeyuki Sato
   for insightful discussion with him. The author is also grateful to the
   reviewers for their valuable comments helping to improve this paper. The
   author is supported by JSPS Grant-in-Aid for Young Scientists (B),
   15K15965.
CR [Anonymous], 1993, Synthesis of Parallel Algorithms
   Breazu-Tannen V., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P82, DOI 10.1109/LICS.1988.5103
   BREAZUTANNEN V, 1991, THEOR COMPUT SCI, V83, P3, DOI 10.1016/0304-3975(91)90037-3
   Buneman P., 2006, VLDB, P211
   CALLAHAN D, 1992, LECT NOTES COMPUT SC, V589, P169
   Castro D, 2018, FUTURE GENER COMP SY, V79, P653, DOI 10.1016/j.future.2017.04.035
   Castro D, 2016, ACM SIGPLAN NOTICES, V51, P4, DOI 10.1145/3022670.2951920
   Chi Yun-Yan, 2011, LECT NOTES COMPUTER, V7078, P74
   Chin WN, 1998, 1998 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, PROCEEDINGS, P153, DOI 10.1109/ICCL.1998.674166
   Cole M., 1989, DEV CHILDREN
   Cong G., 2007, SIGMOD Conference, P509
   Cong G, 2012, ACM T DATABASE SYST, V37, DOI 10.1145/2389241.2389251
   Consel C., 1992, LISP SYMB COMPUT, V5, P327
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Deitz S. J., 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P40, DOI 10.1145/1122971.1122980
   Emoto K, 2012, FORM ASP COMPUT, V24, P623, DOI 10.1007/s00165-012-0241-8
   Emoto K, 2010, LECT NOTES COMPUT SC, V6272, P26, DOI 10.1007/978-3-642-15291-7_4
   Farzan A, 2017, ACM SIGPLAN NOTICES, V52, P540, DOI [10.1145/3062341.3062355, 10.1145/3140587.3062355]
   Fedyukovich G, 2017, ACM SIGPLAN NOTICES, V52, P572, DOI [10.1145/3062341.3062382, 10.1145/3140587.3062382]
   FISHER AL, 1994, SIGPLAN NOTICES, V29, P135, DOI 10.1145/773473.178255
   Fluet M, 2006, J FUNCT PROGRAM, V16, P751, DOI 10.1017/S0956796806006046
   Fluet M, 2010, J FUNCT PROGRAM, V20, P537, DOI 10.1017/S0956796810000201
   Gorlatch S, 1999, SCI COMPUT PROGRAM, V33, P1, DOI 10.1016/S0167-6423(97)00014-2
   Henriksen T, 2017, ACM SIGPLAN NOTICES, V52, P556, DOI [10.1145/3140587.3062354, 10.1145/3062341.3062354]
   Hu ZJ, 1997, ACM T PROGR LANG SYS, V19, P444, DOI 10.1145/256167.256201
   Jiang P, 2018, 27TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES (PACT 2018), DOI 10.1145/3243176.3243204
   Jones ND, 1996, ACM COMPUT SURV, V28, P480, DOI 10.1145/243439.243447
   Keller G, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P261
   Kobayashi Naoki, 2012, HIGHER ORDER SYMBOLI, V25, P39
   LADNER RE, 1980, J ACM, V27, P831, DOI 10.1145/322217.322232
   Launchbury J., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P144, DOI 10.1145/158511.158618
   Levy J.-J., 1976, Theoretical Computer Science, V2, P97, DOI 10.1016/0304-3975(76)90009-8
   Marlow S, 2010, ACM SIGPLAN NOTICES, V45, P91, DOI 10.1145/2088456.1863535
   Matsuzaki K, 2005, PARALLEL PROCESS LET, V15, P321, DOI 10.1142/S0129626405002246
   Minamide Y., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P75, DOI 10.1145/268946.268953
   Morihata A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P117
   Morihata A, 2010, LECT NOTES COMPUT SC, V6009, P321, DOI 10.1007/978-3-642-12251-4_23
   Morihata A, 2009, ACM SIGPLAN NOTICES, V44, P177, DOI 10.1145/1594834.1480905
   Morita K, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P146
   Morita Z.H. M., 2006, P 18 ANN ACM S PARAL, P39
   Nishimura S., 1999, J FUNCT PROGRAM, V9, P427
   Raychev V, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P153, DOI 10.1145/2815400.2815418
   Sato S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P470
   Suganuma T., 1996, ICS'96: Proceedings of the 10th international conference on Supercomputing, P18, DOI DOI 10.1145/237578.237581
   Terui Kazushige, 2012, 23 INT C REWRITING T, P323, DOI [10.4230/LIPIcs.RTA.2012.323, DOI 10.4230/LIPICS.RTA.2012.323]
   Xu DN, 2004, LECT NOTES COMPUT SC, V3302, P197
   Zhenjiang Hu, 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P316
NR 47
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 80
DI 10.1145/3341644
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900003
OA gold
DA 2024-07-18
ER

PT J
AU Wang, F
   Zheng, D
   Decker, J
   Wu, XL
   Essertel, GM
   Rompf, T
AF Wang, Fei
   Zheng, Daniel
   Decker, James
   Wu, Xilun
   Essertel, Gregory M.
   Rompf, Tiark
TI Demystifying Differentiable Programming: Shift/Reset the Penultimate
   Backpropagator
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Delimited Continuations; Multi-stage Progranuning; Differentiable
   Programming; Automated Differentiation
AB Deep learning has seen tremendous success over the past decade in computer vision, machine translation, and gameplay. This success rests crucially on gradient-descent optimization and the ability to "learn" parameters of a neural network by backpropagating observed errors. However, neural network architectures are growing increasingly sophisticated and diverse, which motivates an emerging quest for even more general forms of differentiable programming, where arbitrary parameterized computations can be trained by gradient descent. In this paper, we take a fresh look at automatic differentiation (AD) techniques, and especially aim to demystify the reverse-mode form of AD that generalizes backpropagation in neural networks.
   We uncover a tight connection between reverse-mode AD and delimited continuations, which permits implementing reverse-mode AD purely via operator overloading and without managing any auxiliary data structures. We further show how this formulation of AD can be fruitfully combined with multi-stage programming (staging), leading to an efficient implementation that combines the performance benefits of deep learning frameworks based on explicit reified computation graphs (e.g., TensorFlow) with the expressiveness of pure library approaches (e.g., PyTorch).
C1 [Wang, Fei; Zheng, Daniel; Decker, James; Wu, Xilun; Essertel, Gregory M.; Rompf, Tiark] Purdue Univ, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Wang, F (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
OI Rompf, Tiark/0000-0002-2068-3238
FU NSF [1553471, 1564207]; DOE [DE-SC0018050]
FX We thank the anonymous reviewers and especially our anonymous shepherd
   for numerous thorough and thoughtful comments and suggestions,
   especially the suggestion of encoding multi-level CPS via nesting
   explicit CPS transformation in shift/reset. This work was supported in
   part by NSF awards 1553471 and 1564207, DOE award DE-SC0018050, as well
   as gifts from Google, Facebook, and VMware.
CR Abadi M, ARXIV, DOI DOI 10.48550/ARXIV.1603.04467
   Abadi M, 2017, MAPL'17: PROCEEDINGS OF THE 1ST ACM SIGPLAN INTERNATIONAL WORKSHOP ON MACHINE LEARNING AND PROGRAMMING LANGUAGES, P1, DOI 10.1145/3088525.3088527
   Adve Vikram, NIPS AUTODIFF WORKSH
   Al-Rfou R., 2016, Theano: A Python framework for fast computation of mathematical expressions
   [Anonymous], 1986, Principles of programminglanguages
   [Anonymous], 2017, ICLR
   [Anonymous], DyNet: The Dynamic Neural Network Toolkit
   [Anonymous], 1980, THESIS
   [Anonymous], 2015, ICML
   [Anonymous], 1962, Journal of Applied Mechanics, DOI DOI 10.1115/1.3640537
   [Anonymous], 2018, ICLR WORKSH TRACK
   [Anonymous], 2016, ABS161103423 CORR
   [Anonymous], 2017, NIPS
   Beda LM., 1959, PROGRAMS AUTOMATIC D
   Bondorf A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P1, DOI 10.1145/141471.141483
   Brown K. J., 2011, Proceedings 2011 International Conference on Parallel Architectures and Compilation Techniques (PACT), P89, DOI 10.1109/PACT.2011.15
   Brown KJ, 2016, INT SYM CODE GENER, P194, DOI 10.1145/2854038.2854042
   Bryson A. E., 1975, APPL OPTIMAL CONTROL
   Chen TH, 2015, DES AUT CON, DOI 10.1145/2744769.2744837
   CHRISTIANSON B, 1992, IMA J NUMER ANAL, V12, P135, DOI 10.1093/imanum/12.2.135
   Chuang J., 2013, Stanford sentiment treebank
   Collobert R, 2011, BIGLEARN NIPS WORKSH, P1
   Danvy O, 2005, FUND INFORM, V66, P397
   Danvy O, 2003, THEOR COMPUT SCI, V308, P239, DOI 10.1016/S0304-3975(02)00733-8
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Danvy O, 2009, SCI COMPUT PROGRAM, V74, P534, DOI 10.1016/j.scico.2007.10.007
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   Danvy Olivier, 2001, Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming. PPDP'01, P162, DOI DOI 10.1145/773184.773202
   Duchi J, 2011, J MACH LEARN RES, V12, P2121
   Elliott, 2017, PACMPL 1 ICFP
   ELLIOTT C, 2018, PACMPL 2 ICFP 2018, V70
   Elliott CM, 2009, ACM SIGPLAN NOTICES, V44, P191, DOI 10.1145/1631687.1596579
   ELMAN JL, 1990, COGNITIVE SCI, V14, P179, DOI 10.1207/s15516709cog1402_1
   Felleisen M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P180, DOI 10.1145/73560.73576
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Graves Alex, 2014, Generating sequences with recurrent neural networks
   Grefenstette E, 2015, ADV NEUR IN, V28
   He KM, 2016, PROC CVPR IEEE, P770, DOI 10.1109/CVPR.2016.90
   Hecht-Nielsen R., 1989, IJCNN: International Joint Conference on Neural Networks (Cat. No.89CH2765-6), P593, DOI 10.1109/IJCNN.1989.118638
   Iandola Forrest N, 2016, SQUEEZENET ALEXNET L
   Jia YQ, 2014, PROCEEDINGS OF THE 2014 ACM CONFERENCE ON MULTIMEDIA (MM'14), P675, DOI 10.1145/2647868.2654889
   Kingma D. P., 2014, arXiv
   Koch Christoph, 2018, ABS180602136 CORR
   Krishnamurthy, 2018, OSDI
   Krizhevsky A., 2009, LEARNING MULTIPLE LA, DOI DOI 10.1145/3065386
   LAUNCHBURY J, 1994, SIGPLAN NOTICES, V29, P24, DOI 10.1145/773473.178246
   LeCun Y., 1990, ADV NEURAL INFORM PR, P396
   LeCun Y., 2018, DEEP LEARNING EST MO
   Levenstein, 2018, ARXIV PREPRINT ARXIV
   Linnainmaa Seppo, 1976, BIT, V16
   Maclaurin Dougal, 2016, THESIS
   mlperf.org, 2018, BROAD ML BENCHM SUIT
   Moldovan, 2017, ARXIVCSMS171102712
   Nolan John F, 1953, THESIS MIT
   Olah Christopher, 2015, Neural Networks, Types, and Functional Programming
   ONNX working groups, 2017, ONNX OP NEUR NETW EX
   Panayotov V, 2015, INT CONF ACOUST SPEE, P5206, DOI 10.1109/ICASSP.2015.7178964
   Parker D. B., 1985, Learning-Logic: Casting the Cortex of the Human Brain in Silicon
   Paszke A., 2017, NIPS W
   Paszke Adam, 2017, Pytorch
   Pearlmutter, 2016, ABS161103416 CORR
   Pearlmutter BA, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330018
   PyTorch, 2019, TORCH SCRIPT
   Qian N, 1999, NEURAL NETWORKS, V12, P145, DOI 10.1016/S0893-6080(98)00116-6
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P363, DOI 10.1023/A:1010027404223
   Rompf, 2018, NEURIPS
   Rompf Tiark, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P318, DOI 10.1007/978-3-319-30936-1_17
   Rompf T, 2011, ACM SIGPLAN NOTICES, V46, P127, DOI 10.1145/1942788.1868314
   Rompf T, 2011, ELECTRON P THEOR COM, P93, DOI 10.4204/EPTCS.66.5
   Rompf T, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P2, DOI 10.1145/2784731.2784760
   Rompf T, 2013, ACM SIGPLAN NOTICES, V48, P497, DOI 10.1145/2480359.2429128
   Rompf T, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P317
   Rompf Tiark., 2015, First Summit on Advances in Programming Languages | SNAPL 2015, volume 32 of Leibniz International Proceedings in Informatics (LIPIcs '15), P238, DOI DOI 10.4230/LIPICS.SNAPL.2015.238
   Rompf Tiark, 2018, ABS180310228 CORR
   RUMELHART DE, 1986, NATURE, V323, P533, DOI 10.1038/323533a0
   Seide F, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P2135, DOI 10.1145/2939672.2945397
   Siskind Jeffrey Mark, 2008, Higher-Order and Symbolic Computation, V21, P361, DOI 10.1007/s10990-008-9037-1
   Siskind Jeffrey Mark, 2018, ABS150205767 CORR
   Sujeeth A.K., 2011, ICML
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   Tai KS, 2015, PROCEEDINGS OF THE 53RD ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS AND THE 7TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING, VOL 1, P1556
   Tatlock Zachary, 2018, ABS181000952 CORR
   TensorFlow, 2019, SWIFT TENSORFLOW
   Tokui S., 2015, P WORKSH MACH LEARN
   Tuyeras Remy, 2017, ARXIV PREPRINT ARXIV
   Wei R., 2017, ARXIV171103016
   WENGERT RE, 1964, COMMUN ACM, V7, P463, DOI 10.1145/355586.364791
   Werbos P. J., 1974, REGRESSION NEW TOOLS
   Wiltschko Alex, 2017, TANGENT SOURCE TO SO
NR 89
TC 27
Z9 28
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 96
DI 10.1145/3341700
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900019
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Park, G
   Hong, J
   Steele, GL
   Ryu, S
AF Park, Gyunghee
   Hong, Jaemin
   Steele, Guy L., Jr.
   Ryu, Sukyoung
TI Polymorphic Symmetric Multiple Dispatch with Variance
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Method Overloading; Symmetric Multiple Dispatch; Parametric
   Polymorphism; Variance
AB Many object-oriented languages provide method overloading, which allows multiple method declarations with the same name. For a given method invocation, in order to choose what method declaration to invoke, multiple dispatch considers the run-time types of the arguments. While multiple dispatch can support binary methods (such as mathematical operators) intuitively and consistently, it is difficult to guarantee that calls will be neither ambiguous nor undefined at run time, especially in the presence of expressive language features such as multiple inheritance and parametric polymorphism. Previous efforts have formalized languages that include such features by using overloading rules that guarantee a unique and type-sound resolution of each overloaded method call; in many cases, such rules resolve ambiguity by treating the arguments asymmetrically. Here we present the first formal specification of a strongly typed object-oriented language with symmetric multiple dispatch, multiple inheritance, and parametric polymorphism with variance. We define both a static (type-checking) semantics and a dynamic (dispatching) semantics and prove the type soundness of the language, thus demonstrating that our novel dynamic dispatch algorithm is consistent with the static semantics. Details of our dynamic dispatch algorithm address certain technical challenges that arise from structural asymmetries inherent in object-oriented languages (e.g., classes typically declare ancestors explicitly but not descendants).
C1 [Park, Gyunghee; Hong, Jaemin; Ryu, Sukyoung] Korea Adv Inst Sci & Technol, Daejeon, South Korea.
   [Park, Gyunghee; Steele, Guy L., Jr.] Oracle Labs, Austin, TX 78741 USA.
C3 Korea Advanced Institute of Science & Technology (KAIST); Oracle
RP Park, G (corresponding author), Korea Adv Inst Sci & Technol, Daejeon, South Korea.; Park, G (corresponding author), Oracle Labs, Austin, TX 78741 USA.
RI Ryu, Sukyoung/A-8543-2015
OI Hong, Jaemin/0000-0003-4067-7369
FU National Research Foundation of Korea (NRF) [NRF2017R1A2B3012020,
   2017M3C4A7068177]
FX This work has received funding from National Research Foundation of
   Korea (NRF) (Grants NRF2017R1A2B3012020 and 2017M3C4A7068177).
CR Allen E, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P1117, DOI 10.1145/1244002.1244245
   Allen Eric, 2011, C OBJ OR PROGR SYST, DOI [10.1145/2048066.2048140, DOI 10.1145/2048066.2048140]
   Allen Eric., 2008, FORTRESS LANGUAGE SP
   [Anonymous], 2012, COMMUNICATION
   Bezanson J, 2017, SIAM REV, V59, P65, DOI 10.1137/141000671
   Bezanson Jeff, 2015, CORRABS14111607, P1
   Bourdoncle F., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P302, DOI 10.1145/263699.263743
   CASTAGNA G, 1995, INFORM COMPUT, V117, P115, DOI 10.1006/inco.1995.1033
   Castagna G., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P182, DOI 10.1145/141471.141537
   Castagna G, 2015, ACM SIGPLAN NOTICES, V50, P289, DOI 10.1145/2775051.2676991
   Clifton C, 2000, ACM SIGPLAN NOTICES, V35, P130, DOI 10.1145/354222.353181
   Clifton C, 2006, ACM T PROGR LANG SYS, V28, P517, DOI 10.1145/1133651.1133655
   Coughlin D, 2014, ACM SIGPLAN NOTICES, V49, P73, DOI 10.1145/2535838.2535855
   EPFL, 2017, CLASS IMM LINK LISTS
   Garrigue J, 2015, MATH STRUCT COMP SCI, V25, P867, DOI 10.1017/S0960129513000066
   Garrigue J, 2010, LECT NOTES COMPUT SC, V6461, P360, DOI 10.1007/978-3-642-17164-2_25
   Garrigue Jacques, 2002, 9 INT WORKSH FDN OBJ, P1
   Garrigue Jacques, 2001, APLAS, P329
   Igarashi A, 2006, ACM T PROGR LANG SYS, V28, P795, DOI 10.1145/1152649.1152650
   Jieung Kim, 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P264
   Lee K, 2006, LECT NOTES COMPUT SC, V4067, P353
   Millstein T, 2002, INFORM COMPUT, V175, P76, DOI 10.1006/inco.2002.3103
   Millstein T, 1999, LECT NOTES COMPUT SC, V1628, P279
   Millstein Todd David, 2003, THESIS U WASHINGTON
   Odersky M., 2016, Programming in Scala: Updated for Scala 2.12, V3rd
   Park Gyunghee, 2018, POLYMORPHIC SYYMMETR
   Steele Jr Guy L., 2017, PPOPP 17 22 ACM SIGP
   Taft ST, 2011, LECT NOTES COMPUT SC, V6652, P196, DOI 10.1007/978-3-642-21338-0_16
   Taft S. Tucker, 2016, DESIGNING PARASAIL N
   Vytiniotis D, 2013, ACM SIGPLAN NOTICES, V48, P431, DOI 10.1145/2480359.2429121
   Wang Yanlin, 2018, 32 EUR C OBJ OR PROG
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 32
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 11
DI 10.1145/3290324
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300011
OA gold
DA 2024-07-18
ER

PT J
AU Raad, A
   Doko, M
   Rozic, L
   Lahav, O
   Vafeiadis, V
AF Raad, Azalea
   Doko, Marko
   Rozic, Lovro
   Lahav, Ori
   Vafeiadis, Viktor
TI On Library Correctness under Weak Memory Consistency Specifying and
   Verifying Concurrent Libraries under Declarative Consistency Models
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Weak memory consistency; concurrent libraries; linearisability
ID LINEARIZABILITY
AB Concurrent libraries are the building blocks for concurrency. They encompass a range of abstractions (e.g. locks, exchangers, stacks, queues, sets) built in a layered fashion: more advanced libraries are built out of simpler ones. While there has been a lot of work on verifying such libraries in a sequentially consistent (SC) environment, little is known about how to specify and verify them under weak memory consistency (WMC).
   We propose a general declarative framework that allows us to specify concurrent libraries declaratively, and to verify library implementations against their specifications compositionally. Our framework is sufficient to encode standard models such as SC, (R)C11 and TSO. Additionally, we specify several concurrent libraries, including mutual exclusion locks, reader-writer locks, exchangers, queues, stacks and sets. We then use our framework to verify multiple weakly consistent implementations of locks, exchangers, queues and stacks.
C1 [Raad, Azalea; Doko, Marko; Rozic, Lovro; Vafeiadis, Viktor] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Lahav, Ori] Tel Aviv Univ, Tel Aviv, Israel.
C3 Tel Aviv University
RP Raad, A (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
RI ; Vafeiadis, Viktor/B-5809-2014
OI Doko, Marko/0000-0001-6573-8346; Vafeiadis, Viktor/0000-0001-8436-0334
FU European Research Council (ERC) Consolidator Grant for the project
   lRustBelt", under the European Union Horizon 2020 Framework Programme
   [683289]; Israel Science Foundation [5166651]; Len Blavatnik and the
   Blavatnik Family foundation
FX We thank the POPL 2019 reviewers for their constructive feedback. We
   thank Derek Dreyer and Michalis Kokologiannakis for their helpful
   suggestions and feedback. The first and second authors were supported in
   part by a European Research Council (ERC) Consolidator Grant for the
   project lRustBelt", under the European Union Horizon 2020 Framework
   Programme (grant agreement number 683289). The fourth author was
   supported by the Israel Science Foundation (grant number 5166651), and
   by Len Blavatnik and the Blavatnik Family foundation.
CR Abdulla PA, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276505
   Abdulla PA, 2017, ACTA INFORM, V54, P789, DOI 10.1007/s00236-016-0275-0
   Alglave J, 2018, ACM SIGPLAN NOTICES, V53, P405, DOI [10.1145/3296957.3177156, 10.1145/3173162.3177156]
   Alglave J, 2017, ACM SIGPLAN NOTICES, V52, P3, DOI 10.1145/3093333.3009883
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Batty M, 2013, ACM SIGPLAN NOTICES, V48, P235, DOI 10.1145/2480359.2429099
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Boehm H.-J., 2014, MSPC, p7:1, DOI DOI 10.1145/2618128.2618134
   Bouajjani A, 2013, LECT NOTES COMPUT SC, V7792, P533, DOI 10.1007/978-3-642-37036-6_29
   Bouajjani A, 2011, LECT NOTES COMPUT SC, V6756, P428, DOI 10.1007/978-3-642-22012-8_34
   Bouajjani Ahmed, 2017, LIPICS, V85, DOI [10.4230/LIPIcs.CONCUR.2017.16, DOI 10.4230/LIPICS.CONCUR.2017.16]
   Burckhardt S, 2014, ACM SIGPLAN NOTICES, V49, P271, DOI 10.1145/2535838.2535848
   Burckhardt S, 2012, LECT NOTES COMPUT SC, V7211, P87, DOI 10.1007/978-3-642-28869-2_5
   Castañeda A, 2015, LECT NOTES COMPUT SC, V9363, P420, DOI 10.1007/978-3-662-48653-5_28
   Cerone Andrea, 2015, CONCUR, P58
   Chakraborty S, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:20)2015
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Doherty S, 2018, LECT NOTES COMPUT SC, V11023, P110, DOI 10.1007/978-3-319-98938-9_7
   Doko M, 2017, LECT NOTES COMPUT SC, V10201, P448, DOI 10.1007/978-3-662-54434-1_17
   Doko M, 2016, LECT NOTES COMPUT SC, V9583, P413, DOI 10.1007/978-3-662-49122-5_20
   Dongol B, 2018, LECT NOTES COMPUT SC, V10747, P183, DOI 10.1007/978-3-319-73721-8_9
   Hemed N, 2015, LECT NOTES COMPUT SC, V9363, P371, DOI 10.1007/978-3-662-48653-5_25
   Hendler Danny, 2004, SPAA 2004, P206, DOI [10.1145/1007912.1007944, DOI 10.1145/1007912.1007944]
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Kaiser Jan-Oliver, 2017, LIPICS, V74, DOI [10.4230/LIPIcs.ECOOP.2017, DOI 10.4230/LIPICS.ECOOP.2017]
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lahav O, 2016, ACM SIGPLAN NOTICES, V51, P649, DOI 10.1145/2914770.2837643
   Lahav O, 2015, LECT NOTES COMPUT SC, V9135, P311, DOI 10.1007/978-3-662-47666-6_25
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   LAMPORT L, 1986, DISTRIB COMPUT, V1, P77, DOI 10.1007/BF01786227
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   Neiger G., 1994, Proceedings of the Thirteenth Annual ACM Symposium on Principles of Distributed Computing, DOI 10.1145/197917.198176
   Norris B, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2806886
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   Perrin M, 2015, INT PARALL DISTRIB P, P219, DOI 10.1109/IPDPS.2015.39
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Raad A, 2015, LECT NOTES COMPUT SC, V9032, P710, DOI 10.1007/978-3-662-46669-8_29
   Ridge T, 2010, LECT NOTES COMPUT SC, V6217, P55, DOI 10.1007/978-3-642-15057-9_4
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Sergey I, 2015, LECT NOTES COMPUT SC, V9032, P333, DOI 10.1007/978-3-662-46669-8_14
   Shavit N, 2011, COMMUN ACM, V54, P76, DOI 10.1145/1897852.1897873
   Sieczkowski F, 2015, LECT NOTES COMPUT SC, V9032, P736, DOI 10.1007/978-3-662-46669-8_30
   Svendsen Kasper, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P357, DOI 10.1007/978-3-319-89884-1_13
   Tassarotti J, 2015, ACM SIGPLAN NOTICES, V50, P110, DOI [10.1145/2737924.2737992, 10.1145/2813885.2737992]
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Vafeiadis V, 2013, ACM SIGPLAN NOTICES, V48, P867, DOI [10.1145/2544173.2509532, 10.1145/2509136.2509532]
   Vafeiadis V, 2010, LECT NOTES COMPUT SC, V6174, P450, DOI 10.1007/978-3-642-14295-6_40
   Vafeiadis Viktor, 2018, TECHNICAL APPENDIX
   Zhu H, 2015, LECT NOTES COMPUT SC, V9207, P3, DOI 10.1007/978-3-319-21668-3_1
NR 53
TC 16
Z9 17
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 68
DI 10.1145/3290381
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300068
OA gold
DA 2024-07-18
ER

PT J
AU Sato, T
   Aguirre, A
   Barthe, G
   Gaboardi, M
   Garg, D
   Hsu, J
AF Sato, Tetsuya
   Aguirre, Alejandro
   Barthe, Gilles
   Gaboardi, Marco
   Garg, Deepak
   Hsu, Justin
TI Formal Verification of Higher-Order Probabilistic Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programming; formal reasoning; relational type systems
ID SEMANTICS
AB Probabilistic programming provides a convenient lingua franca for writing succinct and rigorous descriptions of probabilistic models and inference tasks. Several probabilistic programming languages, including Anglican, Church or Hakaru, derive their expressiveness from a powerful combination of continuous distributions, conditioning, and higher-order functions. Although very important for practical applications, these features raise fundamental challenges for program semantics and verification. Several recent works offer promising answers to these challenges, but their primary focus is on foundational semantics issues.
   In this paper, we take a step further by developing a suite of logics, collectively named PPV, for proving properties of programs written in an expressive probabilistic higher-order language with continuous sampling operations and primitives for conditioning distributions. Our logics mimic the comfortable reasoning style of informal proofs using carefully selected axiomatizations of key results from probability theory. The versatility of our logics is illustrated through the formal verification of several intricate examples from statistics, probabilistic inference, and machine learning. We further show expressiveness by giving sound embeddings of existing logics. In particular, we do this in a parametric way by showing how the semantics idea of (unary and relational) TT-lifting can be internalized in our logics. The soundness of PPV follows by interpreting programs and assertions in quasi-Borel spaces (QBS), a recently proposed variant of Borel spaces with a good structure for interpreting higher order probabilistic programs.
C1 [Sato, Tetsuya; Gaboardi, Marco] Univ Buffalo SUNY, Buffalo, NY 14260 USA.
   [Aguirre, Alejandro; Barthe, Gilles] IMDEA Software Inst, Madrid, Spain.
   [Garg, Deepak] Max Planck Inst Software Syst, Saarbrucken, Germany.
   [Hsu, Justin] Univ Wisconsin, Madison, WI USA.
C3 State University of New York (SUNY) System; State University of New York
   (SUNY) Buffalo; IMDEA Software Institute; Max Planck Society; University
   of Wisconsin System; University of Wisconsin Madison
RP Sato, T (corresponding author), Univ Buffalo SUNY, Buffalo, NY 14260 USA.
EM tetsuyas@buffalo.edu; alejandro.aguirre@imdea.org; gjbarthe@gmail.com;
   gaboardi@buffalo.edu; dg@mpi-sws.org; email@justinh.su
RI Gaboardi, Marco/JPX-6816-2023
OI Aguirre, Alejandro/0000-0001-6746-2734; Sato,
   Tetsuya/0000-0001-9895-9209; Hsu, Justin/0000-0002-8953-7060
FU National Science Foundation under CCF [1637532, 1565365]; Direct For
   Computer & Info Scie & Enginr; Division Of Computer and Network Systems
   [1565365] Funding Source: National Science Foundation; Direct For
   Computer & Info Scie & Enginr; Division of Computing and Communication
   Foundations [1637532] Funding Source: National Science Foundation
FX This material is based on work supported by the National Science
   Foundation under CCF Grant No. 1637532 and under CNS Grant No. 1565365.
CR Aguirre Alejandro, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P214, DOI 10.1007/978-3-319-89884-1_8
   Aguirre A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110265
   Amtoft T, 2016, LECT NOTES COMPUT SC, V9634, P180, DOI 10.1007/978-3-662-49630-5_11
   Asadi Kavosh, 2018, ARXIVCSLG180601265
   Audebaud P, 2009, SCI COMPUT PROGRAM, V74, P568, DOI 10.1016/j.scico.2007.09.002
   Aumann Robert J., 1961, Illinois Journal of Mathematics, V5, P614
   Avigad Jeremy, 2014, CORRABS14057012
   Barthe G, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P68, DOI 10.1145/2976749.2978371
   Barthe Gilles, 2016, 43 INT C AUT LANG PR, V107, DOI [10.4230/LIPIcs.ICALP.2016.107, DOI 10.4230/LIPICS.ICALP.2016.107]
   Borgström J, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI [10.1145/2951913.2951942, 10.1145/3022670.2951942]
   Borgström J, 2011, LECT NOTES COMPUT SC, V6602, P77, DOI 10.1007/978-3-642-19718-5_5
   Castellan S, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P215, DOI 10.1145/3209108.3209187
   Chadha R, 2007, THEOR COMPUT SCI, V379, P142, DOI 10.1016/j.tcs.2007.02.040
   Chatterjee S, 2018, ANN APPL PROBAB, V28, P1099, DOI 10.1214/17-AAP1326
   Coble AR, 2010, UCAMCLTR785
   Culbertson Jared, 2013, ARXIVMATHCT13121445
   Culpepper R, 2017, LECT NOTES COMPUT SC, V10201, P368, DOI 10.1007/978-3-662-54434-1_14
   den Hartog Jerry, 2002, THESIS VRIJE U AMSTE
   Ehrhard T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158147
   Ehrhard T, 2014, ACM SIGPLAN NOTICES, V49, P309, DOI 10.1145/2535838.2535865
   Goodman ND., 2008, UAI, P220
   Goubault-Larrecq J, 2014, ELECTRON NOTES THEOR, V308, P167, DOI 10.1016/j.entcs.2014.10.010
   Gretz Friedrich, 2013, Quantitative Evaluation of Systems. 10th International Conference, QEST 2013. Proceedings: LNCS 8054, P193, DOI 10.1007/978-3-642-40196-1_17
   Heunen Chris, 2017, 2017 32nd Annual ACM/IEEE Symposium on Logic in Computer Science (LICS), DOI 10.1109/LICS.2017.8005137
   Holzl Johannes, 2011, Interactive Theorem Proving. Proceedings Second International Conference, ITP 2011, P135, DOI 10.1007/978-3-642-22863-6_12
   Holzl Johannes, 2016, MARKOV CHAINS MARKOV
   Hurd J, 2005, THEOR COMPUT SCI, V346, P96, DOI 10.1016/j.tcs.2005.08.005
   Hurd J, 2003, UCAMCLTR566
   Jacobs B., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P209, DOI 10.1007/BFb0037108
   Jacobs Bart, 1999, STUD LOGIC, V141
   Jones C., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P186, DOI 10.1109/LICS.1989.39173
   Jung A., 1998, Electronic Notes in Theoretical Computer Science, V13, DOI 10.1016/S1571-0661(05)80216-6
   Kaminski Benjamin Lucien, 2016, ARXIVCSLO160101001
   Katoen JP, 2010, LECT NOTES COMPUT SC, V6337, P390, DOI 10.1007/978-3-642-15769-1_24
   Katsumata S, 2014, ACM SIGPLAN NOTICES, V49, P633, DOI 10.1145/2535838.2535846
   Katsumata Shin-ya, 2015, LIPIcs, V35, P156, DOI [10.4230/LIPIcs.CALCO.2015.156, DOI 10.4230/LIPICS.CALCO.2015.156]
   Keimel K, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(1:2)2017
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   McIver Annabelle., 2005, MG COMP SCI
   Mislove Michael W., 2017, CONCURRENCY SECURITY, DOI [10.1007/978-3-319-51046-0_10, DOI 10.1007/978-3-319-51046-0_10]
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Panangaden P., 1999, Electronic Notes in Theoretical Computer Science, V22, DOI 10.1016/S1571-0661(05)80602-4
   Radicek I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158124
   Ramshaw Lyle Harold, 1979, THESIS COMPUTER SCI
   Rand Robert, 2015, MATH FDN PROGRAM SEM
   Richter S, 2004, LECT NOTES COMPUT SC, V3223, P271
   SAHEBDJAHROMI N, 1980, THEOR COMPUT SCI, V12, P19, DOI 10.1016/0304-3975(80)90003-1
   Sato T, 2018, J PURE APPL ALGEBRA, V222, P2888, DOI 10.1016/j.jpaa.2017.11.004
   Scibior A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158148
   Shan CC, 2017, ACM SIGPLAN NOTICES, V52, P130, DOI 10.1145/3093333.3009852
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   Tix R, 2009, ELECTRON NOTES THEOR, V222, P3, DOI 10.1016/j.entcs.2009.01.002
   Varacca D, 2004, LECT NOTES COMPUT SC, V3170, P481
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
NR 56
TC 14
Z9 15
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 38
DI 10.1145/3290351
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300038
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Brandon, W
   Driscoll, B
   Dai, F
   Berkow, W
   Milano, M
AF Brandon, William
   Driscoll, Benjamin
   Dai, Frank
   Berkow, Wilson
   Milano, Mae
TI Better Defunctionalization through Lambda Set Specialization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE monomorphization; defunctionalization; type systems
AB Higher-order functions pose a challenge for both static program analyses and optimizing compilers. To simplify the analysis and compilation of languages with higher-order functions, a rich body of prior work has proposed a variety of defunctionalization techniques, which can eliminate higher-order functions from a program by transforming the program to a semantically-equivalent first-order representation. Several modern languages take this a step further, specializing higher-order functions with respect to the functions on which they operate, and in turn allowing compilers to generate more efficient code. However, existing specializing defunctionalization techniques restrict how function values may be used, forcing implementations to fall back on costly dynamic alternatives. We propose lambda set specialization (LSS), the first specializing defunctionalization technique which imposes no restrictions on howfunction values may be used. We formulate LSS in terms of a polymorphic type system which tracks the flow of function values through the program, and use this type system to recast specialization of higher-order functions with respect to their arguments as a form of type monomorphization. We show that our type system admits a simple and tractable type inference algorithm, and give a formalization and fully-mechanized proof in the Isabelle/HOL proof assistant showing soundness and completeness of the type inference algorithm with respect to the type system. To show the benefits of LSS, we evaluate its impact on the run time performance of code generated by the MLton compiler for Standard ML, the OCaml compiler, and the new Morphic functional programming language. We find that pre-processing with LSS achieves run time speedups of up to 6.85x under MLton, 3.45x for OCaml, and 78.93x for Morphic.
C1 [Brandon, William] MIT, Cambridge, MA 02139 USA.
   [Driscoll, Benjamin] Stanford Univ, Stanford, CA USA.
   [Dai, Frank; Berkow, Wilson; Milano, Mae] Univ Calif Berkeley, Berkeley, CA USA.
C3 Massachusetts Institute of Technology (MIT); Stanford University;
   University of California System; University of California Berkeley
RP Brandon, W (corresponding author), MIT, Cambridge, MA 02139 USA.
EM wbrandon@csail.mit.edu; bdrisc@stanford.edu; fydai@berkeley.edu;
   wberkow@berkeley.edu; mpmilano@berkeley.edu
OI Driscoll, Benjamin/0000-0002-1901-1880; Milano, Mae/0000-0003-3126-7771
FU NSF CISE Expeditions Award [CCF-1730628]
FX We especially thank Jonathan Ragan-Kelley and Alex Reinking for their
   valuable guidance and suggestions, as well as Molly Feldman, Ethan
   Smith, and the anonymous reviewers for their helpful feedback. We thank
   Sanjit Seshia for supporting the class project that became this paper.
   In addition to Sutter Hill Ventures and NSF CISE Expeditions Award
   CCF-1730628, this research is supported by gifts from Amazon Web
   Services, Astronomer, Ant Group, Ericsson, Futurewei, Google, IBM,
   Intel, Lacework, Meta, Microsoft, Mohamed Bin Zayed University of
   Artificial Intelligence, Nexla, Samsung SDS, Scotiabank, Uber, and
   VMware.
CR Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7712285
   Banerjee A, 1997, ACM SIGPLAN NOTICES, V32, P1, DOI 10.1145/258949.258951
   Bell JM, 1997, ACM SIGPLAN NOTICES, V32, P25, DOI 10.1145/258949.258953
   Bergstrom L, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P81, DOI 10.1145/2628136.2628153
   Bezanson J, 2017, SIAM REV, V59, P65, DOI 10.1137/141000671
   Brandon William, 2023, MORPHIC RES LANGUAGE
   Cejtin H, 2000, LECT NOTES COMPUT SC, V1782, P56
   De Souza Corentin, 2022, 43 ACM SIGPLAN C PRO
   Dimock A, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/507669.507640
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Hovgaard AK, 2019, LECT NOTES COMPUT SC, V11457, P136, DOI 10.1007/978-3-030-18506-0_7
   Hovgaard Anders Kiel, 2018, THESIS U COPENHAGEN
   Jones SP, 2002, J FUNCT PROGRAM, V12, P393, DOI 10.1017/S0956796802004331
   Klabnik S., 2018, The Rust Programming Language
   Leroy X., 2022, The OCaml system, release 5. 0. Documentation and user's manual
   Midtgaard J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187672
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Minamide Y., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P271, DOI 10.1145/237721.237791
   Paszke A, 2021, Arxiv, DOI arXiv:2104.05372
   Pierce B., 2005, ADV TOPICS TYPES PRO
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pottier F., 2006, Higher-Order and Symbolic Computation, V19, P125, DOI 10.1007/s10990-006-8611-7
   Reynolds John C., 1972, P ACM ANN C ACM 72 N, V2, P717, DOI [10.1145/800194.805852, DOI 10.1145/800194.805852]
   Stroustrup Bjarne, 2013, The C++ programming language
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wansbrough K., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P15, DOI 10.1145/292540.292545
   Weeks S., 2006, P ACM WORKSHOP ML 20, P1, DOI [10.1145/1159876.1159877, DOI 10.1145/1159876.1159877]
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
NR 28
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 146
DI 10.1145/3591260
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900042
OA gold
DA 2024-07-18
ER

PT J
AU Kuepper, J
   Erbsen, A
   Gross, J
   Conoly, O
   Sun, CY
   Tian, S
   Wu, D
   Chlipala, A
   Chuengsatiansup, C
   Genkin, D
   Wagner, M
   Yarom, Y
AF Kuepper, Joel
   Erbsen, Andres
   Gross, Jason
   Conoly, Owen
   Sun, Chuyue
   Tian, Samuel
   Wu, David
   Chlipala, Adam
   Chuengsatiansup, Chitchanok
   Genkin, Daniel
   Wagner, Markus
   Yarom, Yuval
TI CryptOpt: Verified Compilation with Randomized Program Search for
   Cryptographic Primitives
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE elliptic-curve cryptography; assembly; search-based software engineering
ID SOFTWARE; FORGET
AB Most software domains rely on compilers to translate high-level code to multiple different machine languages, with performance not too much worse than what developers would have the patience to write directly in assembly language. However, cryptography has been an exception, where many performance-critical routines have been written directly in assembly (sometimes through metaprogramming layers). Some past work has shown how to do formal verification of that assembly, and other work has shown how to generate C code automatically along with formal proof, but with consequent performance penalties vs. the bestknown assembly. We present CryptOpt, the first compilation pipeline that specializes high-level cryptographic functional programs into assembly code significantly faster than what GCC or Clang produce, with mechanized proof (in Coq) whose final theorem statement mentions little beyond the input functional program and the operational semantics of x86-64 assembly. On the optimization side, we apply randomized search through the space of assembly programs, with repeated automatic benchmarking on target CPUs. On the formal-verification side, we connect to the Fiat Cryptography framework (which translates functional programs into C-like IR code) and extend it with a new formally verified program-equivalence checker, incorporating a modest subset of known features of SMT solvers and symbolic-execution engines. The overall prototype is quite practical, e.g. producing new fastest-known implementations of finite-field arithmetic for both Curve25519 (part of the TLS standard) and the Bitcoin elliptic curve secp256k1 for the Intel 12(th) and 13th generations.
C1 [Kuepper, Joel; Wu, David] Univ Adelaide, Adelaide, Australia.
   [Erbsen, Andres; Gross, Jason; Conoly, Owen; Tian, Samuel; Chlipala, Adam] MIT, Cambridge, MA USA.
   [Sun, Chuyue] Stanford Univ, Stanford, CA USA.
   [Chuengsatiansup, Chitchanok] Univ Melbourne, Melbourne, Australia.
   [Genkin, Daniel] Georgia Inst Technol, Atlanta, GA USA.
   [Wagner, Markus] Monash Univ, Clayton, Australia.
   [Yarom, Yuval] Ruhr Univ Bochum, Bochum, Germany.
C3 University of Adelaide; Massachusetts Institute of Technology (MIT);
   Stanford University; University of Melbourne; University System of
   Georgia; Georgia Institute of Technology; Monash University; Ruhr
   University Bochum
RP Kuepper, J (corresponding author), Univ Adelaide, Adelaide, Australia.
OI Chuengsatiansup, Chitchanok/0000-0002-0329-2681; Sun,
   Chuyue/0009-0005-9226-3688; Gross, Jason/0000-0002-9427-4891
FU Air Force Office of Scientific Research (AFOSR) [FA9550-20-1-0425];
   Australian Research Council [DE200101577, DP200102364, DP210102670];
   Blavatnik ICRC at Tel-Aviv University; CSIRO's Data61; Deutsche
   Forschungsgemeinschaft (DFG, Germany's Excellence Strategy) under
   Germany's Excellence Strategy [EXC 2092 CASA - 390781972]; National
   Science Foundation [CNS-1954712, CNS-2130671]; National Science
   Foundation Expedition on the Science of Deep Specification
   [CCF-1521584]; Phoenix HPC service at the University of Adelaide;
   Australian Research Council [DE200101577] Funding Source: Australian
   Research Council
FX This research was supported by the Air Force Office of Scientific
   Research (AFOSR) under award number FA9550-20-1-0425; the Australian
   Research Council projects DE200101577, DP200102364 and DP210102670; the
   Blavatnik ICRC at Tel-Aviv University; CSIRO's Data61; the Deutsche
   Forschungsgemeinschaft (DFG, Germany's Excellence Strategy) under
   Germany's Excellence Strategy EXC 2092 CASA - 390781972; the National
   Science Foundation under grants CNS-1954712 and CNS-2130671; the
   National Science Foundation Expedition on the Science of Deep
   Specification (award CCF-1521584); the Phoenix HPC service at the
   University of Adelaide; and gifts from Amazon Web Services, AMD,
   Facebook, Google, Intel and the Tezos Foundation.
CR Aho Alfred V., 1986, COMPILERS PRINCIPLES, V2, P8
   Almeida JB, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P53
   [Anonymous], 2015, IACR CRYPTOLOGY EPRI
   Armand Michael, 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P135
   Auger A., 2011, THEORY RANDOMIZED SE
   Azarderakhsh R., 2019, SUPERSINGULAR ISOGEN
   Bansal S, 2006, ACM SIGPLAN NOTICES, V41, P394, DOI 10.1145/1168918.1168906
   Barthe G, 2018, P IEEE COMPUT SECUR, P328, DOI 10.1109/CSF.2018.00031
   Belyavsky D, 2020, ANN COMPUT SECURITY, P760, DOI 10.1145/3427228.3427291
   Bergmann S. D., 2003, ENCY INFORM SYSTEMS, P141
   Bernstein DJ, 2006, LECT NOTES COMPUT SC, V3958, P207
   Bernstein DJ, 2018, LECT NOTES COMPUT SC, V10719, P235, DOI 10.1007/978-3-319-72565-9_12
   Bernstein DJ, 2014, LECT NOTES COMPUT SC, V8873, P317, DOI 10.1007/978-3-662-45611-8_17
   Bernstein DJ, 2014, LECT NOTES COMPUT SC, V8731, P316, DOI 10.1007/978-3-662-44709-3_18
   Bernstein DJ, 2013, LECT NOTES COMPUT SC, V8086, P250, DOI 10.1007/978-3-642-40349-1_15
   Bernstein Daniel J, 2022, EBACS ECRYPT BENCHMA
   Bernstein DJ, 2005, LECT NOTES COMPUT SC, V3557, P32
   Bhargavan K, 2017, P IEEE S SECUR PRIV, P483, DOI 10.1109/SP.2017.26
   Bitcoin Core, 2021, LIBSECP256K1 OPT C L
   Bosamiya Jay, 2020, VSTTE
   Celio C, 2016, Arxiv, DOI arXiv:1607.02318
   Certicom Research, 2000, SEC 2 REC EL CURV DO
   Chakrapani LN, 2005, LECT NOTES COMPUT SC, V3602, P32, DOI 10.1007/11532378_4
   Chen YF, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P299, DOI 10.1145/2660267.2660370
   Chou T, 2016, LECT NOTES COMPUT SC, V9813, P280, DOI 10.1007/978-3-662-53140-2_14
   Chuengsatiansup Chitchanok, 2014, Pairing-Based Cryptography - Pairing 2013. 6th International Conference. Revised Selected Papers: LNCS 8365, P229, DOI 10.1007/978-3-319-04873-4_14
   Chuengsatiansup Chitchanok, 2019, SAC, P693
   Clang, 2022, CLANG C LANGUAGE FAM
   Cooper K. D., 2012, ENG COMPILER, VSecond, P597
   D'Silva V, 2015, 2015 IEEE SECURITY AND PRIVACY WORKSHOPS (SPW), P73, DOI 10.1109/SPW.2015.33
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Doerr Benjamin, 2019, THEORY EVOLUTIONARY, V4
   Erbsen A, 2019, P IEEE S SECUR PRIV, P1202, DOI 10.1109/SP.2019.00005
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Fischetti M, 2014, OPER RES, V62, P114, DOI 10.1287/opre.2013.1231
   Fromherz A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290376
   Fu YF, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P1591, DOI 10.1145/3319535.3354199
   gcc, 2022, GCC GNU COMP COLL
   Ge Q, 2018, J CRYPTOGR ENG, V8, P1, DOI 10.1007/s13389-016-0141-6
   HACL, 2022, US
   Haraldsson SO, 2017, PROCEEDINGS OF THE 2017 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE COMPANION (GECCO'17 COMPANION), P1513, DOI 10.1145/3067695.3082517
   Harman M, 2001, INFORM SOFTWARE TECH, V43, P905, DOI 10.1016/S0950-5849(01)00196-3
   Hooker Rodney E., 2013, US Patent, Patent No. [8533438.5, 85334385]
   Joshi R, 2002, ACM SIGPLAN NOTICES, V37, P304, DOI 10.1145/543552.512566
   Kannwischer MJ, 2019, LECT NOTES COMPUT SC, V11464, P281, DOI 10.1007/978-3-030-21568-2_14
   Karthikeyan Bhargavan, 2017, PROC SNAPL
   Kaufmann T, 2016, LECT NOTES COMPUT SC, V10052, P573, DOI 10.1007/978-3-319-48965-0_36
   Langdon WB, 2015, GECCO'15: PROCEEDINGS OF THE 2015 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1063, DOI 10.1145/2739480.2754652
   Langley Adam, 2022, CURVE25519 DONNA
   Lepak KM, 2000, PROCEEDING OF THE 27TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P182, DOI 10.1109/ISCA.2000.854389
   Leroy X., 2016, ERTS 2016 EMBEDDED R
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Lopes NP, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P65, DOI 10.1145/3453483.3454030
   Massalin H., 1987, Proceedings of the Second International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS II) (Cat. No.87CH2440-6), P122
   NIST, 2000, FIPS PUB, P19
   OpenSSL, 2022, about us
   Peeler H, 2022, Arxiv, DOI arXiv:2201.13305
   Pekhimenko G., 2010, SOFTWARE AUTOMATIC T, P335
   Petke J, 2018, IEEE T EVOLUT COMPUT, V22, P415, DOI 10.1109/TEVC.2017.2693219
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Polyakov Andy, 2018, CONCUR LIPICS VOL 11, V118, P41
   Protzenko J, 2020, P IEEE S SECUR PRIV, P983, DOI 10.1109/SP40000.2020.00114
   Protzenko J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110261
   Recoules F, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P589, DOI 10.1109/ASE.2019.00060
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Ronen Ronny, 2004, US Patent, Patent No. [6675376B2.5, 667537625]
   Sasnauskas R, 2018, Arxiv, DOI [arXiv:1711.04422, DOI 10.48550/ARXIV.1711.04422]
   Schkufza E, 2014, ACM SIGPLAN NOTICES, V49, P53, DOI [10.1145/2666356.2594302, 10.1145/2594291.2594302]
   Schkufza E, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI 10.1145/2499368.2451150
   Schoolderman M, 2021, LECT NOTES COMPUT SC, V12673, P304, DOI 10.1007/978-3-030-76384-8_19
   Sewell T, 2013, ACM SIGPLAN NOTICES, V48, P471, DOI 10.1145/2499370.2462183
   Sharma R, 2015, ACM SIGPLAN NOTICES, V50, P147, DOI 10.1145/2814270.2814278
   Sharma R, 2013, ACM SIGPLAN NOTICES, V48, P391, DOI [10.1145/2544173.2509509, 10.1145/2509136.2509509]
   Stephenson M, 2003, LECT NOTES COMPUT SC, V2610, P238
   Subramaniam S, 2006, INT SYMP MICROARCH, P273
   Tristan JB, 2008, ACM SIGPLAN NOTICES, V43, P17, DOI 10.1145/1328897.1328444
   Tsai MH, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1973, DOI 10.1145/3133956.3134076
   Tung Chou, 2016, Selected Areas in Cryptography - SAC 2015. 22nd International Conference. Revised Selected Papers: LNCS 9566, P145, DOI 10.1007/978-3-319-31301-6_8
   Vila P, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P519, DOI 10.1145/3385412.3386008
   Weise T, 2019, AAAI CONF ARTIF INTE, P2395
NR 81
TC 1
Z9 1
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 158
DI 10.1145/3591272
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900054
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Livinskii, V
   Babokin, D
   Regehr, J
AF Livinskii, Vsevolod
   Babokin, Dmitry
   Regehr, John
TI Fuzzing Loop Optimizations in Compilers for C++ and Data-Parallel
   Languages
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compiler testing; compiler defect; automated testing; random testing;
   random program generation; YARPGen
ID AFFINE SCHEDULING PROBLEM; EFFICIENT SOLUTIONS; BUGS; GENERATION
AB Compilers are part of the foundation upon which software systems are built; they need to be as correct as possible. This paper is about stress-testing loop optimizers; it presents a major reimplementation of Yet Another Random Program Generator (YARPGen), an open-source generative compiler fuzzer. This new version has found 122 bugs, both in compilers for data-parallel languages, such as the Intel((R)) Implicit SPMD Program Compiler and the Intel((R)) oneAPI DPC++ compiler, and in C++ compilers such as GCC and Clang/LLVM. The first main contribution of our work is a novel method for statically avoiding undefined behavior when generating loops; the resulting programs conform to the relevant language standard, enabling automated testing. The second main contribution is a collection of mechanisms for increasing the diversity of generated loop code; in our evaluation, we demonstrate that these make it possible to trigger loop optimizations significantly more often, providing opportunities to discover bugs in the optimizers.
C1 [Livinskii, Vsevolod; Regehr, John] Univ Utah, Salt Lake City, UT 84112 USA.
   [Babokin, Dmitry] Intel Corp, Santa Clara, CA USA.
C3 Utah System of Higher Education; University of Utah; Intel Corporation
RP Livinskii, V (corresponding author), Univ Utah, Salt Lake City, UT 84112 USA.
EM vlivinsk@cs.utah.edu; dmitry.y.babokin@intel.com; regehr@cs.utah.edu
OI Livinskii, Vsevolod/0009-0005-4802-1702
FU Intel(R) Corporation
FX This material is based on work supported by a grant from the Intel (R)
   Corporation. The authors would like to thank the GCC, LLVM, Intel (R)
   Implicit SPMD Program Compiler, and the Intel (R) oneAPI DPC++ compiler
   development teams for their help and cooperation. We would also like to
   especially thank Martin Liska, Richard Biener, and Jakub Jelinek for
   their overwhelming support and help with the GCC bugs that we reported.
   The authors would also like to thank the Flux research group12 at the
   University of Utah for providing access to the Emulab cluster13 that we
   used for our experiments. Finally, we thank the anonymous reviewers and
   our shepherd-Ayal Zaks-for their valuable feedback and suggestions.
CR [Anonymous], 1962, P SPRING JOINT COMP, DOI DOI 10.1145/1460833.1460869
   Boujarwah AS, 1997, INFORM SOFTWARE TECH, V39, P617, DOI 10.1016/S0950-5849(97)00017-7
   Boushehri Nader, 2022, 2022 LLVM DEVELOPERS
   Burgess CJ, 1996, INFORM SOFTWARE TECH, V38, P111, DOI 10.1016/0950-5849(95)01055-6
   Chen JJ, 2020, ACM COMPUT SURV, V53, DOI 10.1145/3363562
   Cummins C, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P95, DOI 10.1145/3213846.3213848
   Even-Mendoza Karine, 2020, 2020 35th IEEE/ACM International Conference on Automated Software Engineering (ASE), P1219, DOI 10.1145/3324884.3418933
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P389, DOI 10.1007/BF01379404
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P313, DOI 10.1007/BF01407835
   Groce A., 2012, P INT S SOFTW TEST A, P78, DOI DOI 10.1145/2338965.2336763
   Hatch William., 2023, Xsmith
   Jiang H, 2021, IEEE T SOFTWARE ENG, V48, P2339, DOI 10.1109/TSE.2021.3058671
   Khronos <(R)> SYCL T Working Group, 2020, SYCL T SPECIFICATION
   Le V, 2015, ACM SIGPLAN NOTICES, V50, P386, DOI [10.1145/2814270.2814319, 10.1145/2858965.2814319]
   Lidbury C, 2015, ACM SIGPLAN NOTICES, V50, P65, DOI [10.1145/2737924.2737986, 10.1145/2813885.2737986]
   Liska Martin, 2022, C VISE
   Liu X, 2019, AAAI CONF ARTIF INTE, P1044
   Livinskii V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428264
   Lopes NP, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P65, DOI 10.1145/3453483.3454030
   McCool M, 2012, STRUCTURED PARALLEL PROGRAMMING: PATTERNS FOR EFFICIENT COMPUTATION, P1, DOI 10.1016/B978-0-12-415993-8.00001-3
   Nagai E., 2013, Workshop on Synthesis And System Integration of Mixed Information Technologies (SASIMI 2013), P88
   Nagai E., 2012, WORKSH SYNTH SYST IN, P48
   Nagai E, 2014, IPSJ T SYSTEM LSI DE, V7, P91, DOI DOI 10.2197/IPSJTSLDM.7.91
   Nakamura K, 2016, 2016 IEEE ASIA PACIFIC CONFERENCE ON CIRCUITS AND SYSTEMS (APCCAS), P676, DOI 10.1109/APCCAS.2016.7804063
   Nakamura Kazuhiro, 2015, PROC THEWORKSHOP SYN, P226
   Pharr Matt., 2012, INNOVATIVE PARALLEL, P1
   Regehr J, 2012, ACM SIGPLAN NOTICES, V47, P335, DOI 10.1145/2345156.2254104
   Rong Yuyang, 2022, 2022 LLVM DEVELOPERS
   Sun CN, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P361, DOI 10.1145/3180155.3180236
   Sun CN, 2016, ACM SIGPLAN NOTICES, V51, P849, DOI 10.1145/3022671.2984038
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P216, DOI [10.1145/2666356.2594334, 10.1145/2594291.2594334]
   Wang Y, 2020, PLOS ONE, V15, DOI 10.1371/journal.pone.0237749
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zhou ZD, 2021, J SYST SOFTWARE, V174, DOI 10.1016/j.jss.2020.110884
NR 34
TC 2
Z9 2
U1 3
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 181
DI 10.1145/3591295
PG 22
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900077
OA gold
DA 2024-07-18
ER

PT J
AU Barke, S
   James, MB
   Polikarpova, N
AF Barke, Shraddha
   James, Michael B.
   Polikarpova, Nadia
TI Grounded Copilot: How Programmers Interact with Code-Generating Models
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; AI Assistants; Grounded Theory
AB Powered by recent advances in code-generating models, AI assistants like Github Copilot promise to change the face of programming forever. But what is this new face of programming? We present the first grounded theory analysis of how programmers interact with Copilot, based on observing 20 participants-with a range of prior experience using the assistant-as they solve diverse programming tasks across four languages. Our main finding is that interactions with programming assistants are bimodal: in acceleration mode, the programmer knows what to do next and uses Copilot to get there faster; in exploration mode, the programmer is unsure how to proceed and uses Copilot to explore their options. Based on our theory, we provide recommendations for improving the usability of future AI programming assistants.
C1 [Barke, Shraddha; James, Michael B.; Polikarpova, Nadia] Univ Calif San Diego, La Jolla, CA 92093 USA.
C3 University of California System; University of California San Diego
RP Barke, S (corresponding author), Univ Calif San Diego, La Jolla, CA 92093 USA.
EM sbarke@ucsd.edu; m3james@ucsd.edu; npolikarpova@ucsd.edu
OI James, Michael/0009-0007-2219-9355; , Shraddha/0000-0002-8663-5175
FU NSF [2107397, 1955457]
FX The authors would like to thank Devon Rifkin from GitHub for his
   assistance with getting Copilot access for our study participants. This
   work was supported by NSF grants 2107397 and 1955457.
CR [Anonymous], 2014, Ways Knowing HCI, DOI DOI 10.1007/978-1-4939-0378-82
   Balog M, 2017, Arxiv, DOI arXiv:1611.01989
   Barke Shraddha, 2023, GROUNDED COPILOT PRO, DOI [10.5281/zenodo.7713789, DOI 10.5281/ZENODO.7713789]
   Bavarian M, 2022, Arxiv, DOI arXiv:2207.14255
   Brown T., 2020, P ADV NEUR INF PROC, V33, P1877
   Bryant A., 2007, The sage handbook of grounded theory
   CARLSTON D.E., 2013, Dual-Process Theories
   Carver J, 2004, EMPIR SOFTW ENG, V9, P259, DOI 10.1023/B:EMSE.0000027786.04555.97
   Chasins SE, 2018, UIST 2018: PROCEEDINGS OF THE 31ST ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P963, DOI 10.1145/3242587.3242661
   Chen Mark, 2021, arXiv, DOI DOI 10.48550/ARXIV.2107.03374
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Coblenz M, 2021, ACM T COMPUT-HUM INT, V28, DOI 10.1145/3452379
   Csikszentmihalyi M., 2014, Flow and the foundations of positive psychology: The collected works of Mihaly Csikszentmihalyi, DOI [DOI 10.1007/978-94-017-9088-8_15, 10.1007/978-94-017-9088-8, DOI 10.1007/978-94-017-9088-8]
   Detienne Francoise, 2001, Software design cognitive aspects.
   Drosos I, 2020, PROCEEDINGS OF THE 2020 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'20)
   Xu FF, 2020, Arxiv, DOI [arXiv:2004.09015, 10.48550/ARXIV.2004.09015]
   Ferdowsifard Kasra, 2020, UIST '20: Proceedings of the 33rd Annual ACM Symposium on User Interface Software and Technology, P614, DOI 10.1145/3379337.3415869
   Ferdowsifard K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485530
   Fried D, 2023, Arxiv, DOI arXiv:2204.05999
   github.blog, 2021, NAT FRIEDMAN
   Glaser B, 1967, Discovery of grounded theory strategies for qualitative research, DOI [10.4324/9780203793206, DOI 10.4324/9780203793206]
   Glassman EL, 2015, ACM T COMPUT-HUM INT, V22, DOI 10.1145/2699751
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Guo D., 2021, ICLR
   James MB, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428273
   Jayagopal Dhanya, 2022, EXPLORING LEARNABILI, P15
   Jiang E, 2022, PROCEEDINGS OF THE 2022 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI' 22), DOI 10.1145/3491102.3501870
   Kahneman, 2011, THINKING FAST SLOW
   Kalyan A, 2018, Arxiv, DOI [arXiv:1804.01186, 10.48550/ARXIV.1804.01186]
   Kite, 2020, KITE AI POWERED COMP
   Lee MT, 2020, Arxiv, DOI arXiv:2006.10635
   Lerner S, 2020, PROCEEDINGS OF THE 2020 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'20), DOI 10.1145/3313831.3376494
   Li YJ, 2022, SCIENCE, V378, P1092, DOI 10.1126/science.abq1158
   Lubin J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485532
   Milli S, 2021, COGNITION, V217, DOI 10.1016/j.cognition.2021.104881
   Miltner A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360569
   Myers BA, 2016, COMPUTER, V49, P44, DOI 10.1109/MC.2016.200
   Omar C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290327
   Pearce H, 2021, Arxiv, DOI [arXiv:2108.09293, 10.48550/ARXIV.2108.09293]
   Peleg H, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428227
   Peleg H, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1114, DOI 10.1145/3180155.3180189
   PENNINGTON N, 1987, COGNITIVE PSYCHOL, V19, P295, DOI 10.1016/0010-0285(87)90007-7
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2594291.2594321, 10.1145/2666356.2594321]
   Sarkar A, 2022, Arxiv, DOI arXiv:2208.06213
   Solar-Lezama Armando, 2013, International Journal on Software Tools for Technology Transfer, V15, P475, DOI 10.1007/s10009-012-0249-7
   Stol KJ, 2016, PROC INT CONF SOFTW, P120, DOI 10.1145/2884781.2884833
   Strauss A.L., 1990, BASICS QUALITATIVE R
   TabNine, 2018, TABNINE AI ASS DEV T
   Taylor S. J., 2016, INTRO QUALITATIVE RE
   Vaithilingam Priyan, 2022, CHI LATE BREAKING WO
   Vaswani A, 2023, Arxiv, DOI [arXiv:1706.03762, DOI 10.48550/ARXIV.1706.03762, 10.48550/arXiv.1706.03762]
   Vollmeyer R, 2006, EDUC PSYCHOL REV, V18, P239, DOI 10.1007/s10648-006-9017-0
   Wang CL, 2021, CHI '21: PROCEEDINGS OF THE 2021 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, DOI 10.1145/3411764.3445249
   Wastl Eric, 2021, ADVENT CODE
   Weisz JD, 2021, IUI '21 - 26TH INTERNATIONAL CONFERENCE ON INTELLIGENT USER INTERFACES, P402, DOI 10.1145/3397481.3450656
   Wode Ni, 2021, UIST '21: The 34th Annual ACM Symposium on User Interface Software and Technology, P258, DOI 10.1145/3472749.3474748
   Xu Frank F., 2021, arXiv, DOI [DOI 10.1145/3487569, 10.48550/ARXIV.2101.11149]
   Zaremba Wojciech, 2021, CODEX
   Zhang T., 2020, P 33 ANN ACM S US IN, P627
   Zhang Tianyi, 2021, P 2021 CHI C HUMAN F, DOI DOI 10.1145/3411764.3445646
   Zhou XY, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P168, DOI 10.1145/3519939.3523712
NR 61
TC 19
Z9 21
U1 9
U2 16
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586030
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600005
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Chen, ZL
   Lafont, A
   O'Connor, L
   Keller, G
   McLaughlin, C
   Jackson, V
   Rizkallah, C
AF Chen, Zilin
   Lafont, Ambroise
   O'Connor, Liam
   Keller, Gabriele
   McLaughlin, Craig
   Jackson, Vincent
   Rizkallah, Christine
TI Dargent: A Silver Bullet for Verified Data Layout Refinement
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE certifying compiler; data refinement; systems programming
ID VERIFICATION; LANGUAGE
AB Systems programmers need fine-grained control over the memory layout of data structures, both to produce performant code and to comply withwell-defined interfaces imposed by existing code, standardised protocols or hardware. Code that manipulates these low-level representations in memory is hard to get right. Traditionally, this problem is addressed by the implementation of tedious marshalling code to convert between compilerselected data representations and the desired compact data formats. Such marshalling code is error-prone and can lead to a significant runtime overhead due to excessive copying. While there are many languages and systems that address the correctness issue, by automating the generation and, in some cases, the verification of the marshalling code, the performance overhead introduced by the marshalling code remains. In particular for systems code, this overhead can be prohibitive. In this work, we address both the correctness and the performance problems. We present a data layout description language and data refinement framework, called Dargent, which allows programmers to declaratively specify how algebraic data types are laid out in memory. Our solution is applied to the Cogent language, but the general ideas behind our solution are applicable to other settings. The Dargent framework generates C code that manipulates data directly with the desired memory layout, while retaining the formal proof that this generated C code is correct with respect to the Cogent functional semantics. This added expressivity removes the need for implementing and verifying marshalling code, which eliminates copying, smoothens interoperability with surrounding systems, and increases the trustworthiness of the overall system.
C1 [Chen, Zilin; McLaughlin, Craig] UNSW Sydney, Sydney, NSW, Australia.
   [Lafont, Ambroise] Univ Cambridge, Cambridge, England.
   [O'Connor, Liam] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
   [Keller, Gabriele] Univ Utrecht, Utrecht, Netherlands.
   [Jackson, Vincent; Rizkallah, Christine] Univ Melbourne, Melbourne, Vic, Australia.
C3 University of New South Wales Sydney; University of Cambridge;
   University of Edinburgh; Utrecht University; University of Melbourne
RP Chen, ZL (corresponding author), UNSW Sydney, Sydney, NSW, Australia.
EM zilin.chen@student.unsw.edu.au; ae162@cam.ac.uk; l.oconnor@ed.ac.uk;
   g.k.keller@uu.nl; c.mclaughlin@unsw.edu.au;
   vjjac@student.unimelb.edu.au; christine.rizkallah@unimelb.edu.au
OI O'Connor, Liam/0000-0003-2765-4269; Chen, Zilin/0000-0003-0854-2464;
   Rizkallah, Christine/0000-0003-4785-2836; McLaughlin,
   Craig/0000-0002-1323-8566; Jackson, Vincent/0000-0002-8737-4202
CR Amani S, 2016, ACM SIGPLAN NOTICES, V51, P175, DOI 10.1145/2954679.2872404
   Back G, 2002, LECT NOTES COMPUT SC, V2487, P66
   Bangert Julian, 2014, 11 USENIX S OPERATIN, P615
   Barendsen E., 1993, Foundations of Software Technology and Theoretical Computer Science. 13th Conference Proceedings, P41
   Blaise Paradeza, 2020, THESIS UNSW SYDNEY A
   Chen Zilin, 2022, Zenodo, DOI 10.5281/ZENODO.7220452
   Chen Zilin, 2022, P 15 ACM SIGPLAN INT, DOI [10.1145/3567512.3567520, DOI 10.1145/3567512.3567520]
   Cheung L, 2022, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP '22), P13, DOI 10.1145/3497775.3503686
   Cronburg K, 2019, PROCEEDINGS OF THE 18TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE '19), P81, DOI 10.1145/3357765.3359519
   Delaware B, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341686
   Diatchki I.S., 2006, HASKELL 06, P72, DOI [10.1145/1159842.1159851, DOI 10.1145/1159842.1159851]
   Diatchki IS, 2005, ACM SIGPLAN NOTICES, V40, P168, DOI 10.1145/1090189.1086387
   Fisher K, 2005, ACM SIGPLAN NOTICES, V40, P295, DOI 10.1145/1064978.1065046
   Fisher Kathleen, 2011, P 14 INT C DAT THEOR, P11, DOI [DOI 10.1145/1938551.1938556, 10.1145/1938551.1938556]
   Franco J., 2019, arXiv
   Franco J, 2017, PROCEEDINGS OF THE 2017 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD!'17), P148, DOI 10.1145/3133850.3133861
   Greenaway D, 2014, ACM SIGPLAN NOTICES, V49, P429, DOI [10.1145/2594291.2594296, 10.1145/2666356.2594296]
   Klabnik Steve, 2022, The Rust Programming Language
   Mandelbaum Y, 2007, ACM SIGPLAN NOTICES, V42, P77, DOI 10.1145/1190215.1190231
   McCann PJ, 2000, ACM SIGCOMM COMP COM, V30, P321, DOI 10.1145/347057.347563
   Murray Emmet, 2019, THESIS UNSW SYDNEY A
   Nipkow T., 2002, LECT NOTES COMPUTER, V2283, DOI [10.1007/3-540-45949-9, DOI 10.1007/3-540-45949-9]
   O'Connor Liam, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Modeling. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11244), P134, DOI 10.1007/978-3-030-03418-4_9
   O'connor L, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S095679682100023X
   O'Connor L, 2016, ACM SIGPLAN NOTICES, V51, P89, DOI 10.1145/3022670.2951940
   OConnor Liam, 2019, THESIS UNSW SYDNEY A, DOI [10.26190/unsworks/21495, DOI 10.26190/UNSWORKS/21495]
   Ramananandro T, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1465
   Rizkallah C, 2016, LECT NOTES COMPUT SC, V9807, P323, DOI 10.1007/978-3-319-43144-4_20
   Schirmer N, 2005, LECT NOTES COMPUT SC, V3452, P398
   Slind Konrad, 2021, 12 INT C INTERACTIVE, V30, P1, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   van Geest M, 2017, PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE' 17), P30, DOI 10.1145/3122975.3122979
   Vollmer M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P48, DOI 10.1145/3314221.3314631
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
   Wang Yan, 2011, P 20 ACM SIGPLAN WOR, P63, DOI [10.1145/1929501.1929511, DOI 10.1145/1929501.1929511]
   Ye QC, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P222, DOI 10.1145/3293880.3294105
NR 35
TC 2
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571240
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500047
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Sammler, M
   Spies, S
   Song, YJ
   D'Osualdo, E
   Krebbers, R
   Garg, D
   Dreyer, D
AF Sammler, Michael
   Spies, Simon
   Song, Youngju
   D'Osualdo, Emanuele
   Krebbers, Robbert
   Garg, Deepak
   Dreyer, Derek
TI DimSum: A Decentralized Approach to Multi-language Semantics and
   Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE multi-language semantics; verification; compilers; non-determinism;
   separation logic; Iris; Coq
ID ABSTRACT TRACE SEMANTICS
AB Priorwork on multi-language program verification has achieved impressive results, including the compositional verification of complex compilers. But the existing approaches to this problem impose a variety of restrictions on the overall structure of multi-language programs (e.g., fixing the source language, fixing the set of involved languages, fixing the memory model, or fixing the semantics of interoperation). In this paper, we explore the problem of how to avoid such global restrictions.
   Concretely, we present DimSum: a new, decentralized approach to multi-language semantics and verification, which we have implemented in the Coq proof assistant. Decentralization means that we can define and reason about languages independently from each other (as independent modules communicating via events), but also combine and translate between them when necessary (via a library of combinators). We apply DimSum to a high-level imperative language Rec (with an abstract memory model and function calls), a low-level assembly language Asm (with a concrete memory model, arbitrary jumps, and syscalls), and a mathematical specification language Spec. We evaluate DimSum on two case studies: an Asm library extending Rec with support for pointer comparison, and a coroutine library for Rec written in Asm. In both cases, we show how DimSum allows the Asm libraries to be abstracted to Rec-level specifications, despite the behavior of the Asm libraries not being syntactically expressible in Rec itself. We also verify an optimizing multi-pass compiler from Rec to Asm, showing that it is compatible with these Asm libraries.
C1 [Sammler, Michael; Spies, Simon; Song, Youngju; D'Osualdo, Emanuele; Garg, Deepak; Dreyer, Derek] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Krebbers, Robbert] Radboud Univ Nijmegen, Nijmegen, Netherlands.
C3 Radboud University Nijmegen
RP Sammler, M (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
EM msammler@mpi-sws.org; spies@rnpi-sws.org; youngju@mpi-sws.org;
   dosualdo@mpi-sws.org; mail@robbertkrebbers.nl; dg@mpi-sws.org;
   dreyer@mpi-sws.org
RI D'Osualdo, Emanuele/HOF-1125-2023
OI D'Osualdo, Emanuele/0000-0002-9179-5827; Spies,
   Simon/0000-0001-5424-9002; Song, Youngju/0000-0001-7093-3824; Dreyer,
   Derek/0000-0002-3884-6867
FU Dutch Research Council (NWO) [016.Veni.192.259]; Google PhD Fellowships;
   Android Security's ASPIRE program; Google Research; European Research
   Council (ERC) under the European Union's Horizon 2020 research and
   innovation programme [101003349]; European Research Council (ERC)
   [101003349] Funding Source: European Research Council (ERC)
FX We would like to thank Ralf Jung and Chung-Kil Hur for many insightful
   discussions, and the anonymous reviewers for their helpful feedback.
   This work was funded in part by the Dutch Research Council (NWO),
   project 016.Veni.192.259, by Google PhD Fellowships for the first and
   second authors, by awards from Android Security's ASPIRE program and
   from Google Research, and by a European Research Council (ERC)
   Consolidator Grant for the project "PERSIST" under the European Union's
   Horizon 2020 research and innovation programme (grant agreement No.
   101003349).
CR Abadi M, 2010, 2010 23RD IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P337, DOI 10.1109/CSF.2010.30
   Ahmed A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P431
   Alur R, 1998, LECT NOTES COMPUT SC, V1466, P163, DOI 10.1007/BFb0055622
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   Benton N., 2010, MSRTR201062
   Benton N, 2009, ACM SIGPLAN NOTICES, V44, P97, DOI 10.1145/1631687.1596567
   Beringer L, 2014, LECT NOTES COMPUT SC, V8410, P107
   CHANDRA AK, 1981, J ACM, V28, P114, DOI 10.1145/322234.322243
   FLOYD RW, 1967, J ACM, V14, P636, DOI 10.1145/321420.321422
   Fritz C, 2005, THEOR COMPUT SCI, V338, P275, DOI 10.1016/j.tcs.2005.01.016
   Gäher L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498689
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Hur CK, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P59
   Hur CK, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1926385.1926402
   Jeffrey A, 2005, LECT NOTES COMPUT SC, V3444, P423
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kang J, 2016, ACM SIGPLAN NOTICES, V51, P178, DOI 10.1145/2914770.2837642
   Koenig J, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1095, DOI 10.1145/3453483.3454097
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krebbers Robbert, 2018, P ACM PROGR LANG, DOI [10.1145/3236772, DOI 10.1145/3236772]
   Laird J, 2007, LECT NOTES COMPUT SC, V4596, P667
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leroy X, 2008, J AUTOM REASONING, V41, P1, DOI 10.1007/s10817-008-9099-0
   Mates P, 2019, PROCEEDINGS OF THE 21ST INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2019), DOI 10.1145/3354166.3354181
   Matthews Jacob, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P3, DOI 10.1145/1190216.1190220
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Neis G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P166, DOI 10.1145/2784731.2784764
   New Max S, 2018, P ACM PROGR LANG, DOI [10.1145/3236768, DOI 10.1145/3236768]
   Padovani L, 2011, ELECTRON PROC THEOR, P71, DOI 10.4204/EPTCS.45.6
   Patrignani M, 2021, Arxiv, DOI arXiv:2001.11334
   Patrignani M, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2699503
   Patterson D, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P609, DOI 10.1145/3519939.3523703
   Patterson D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341689
   Patterson D, 2017, ACM SIGPLAN NOTICES, V52, P495, DOI [10.1145/3062341.3062347, 10.1145/3140587.3062347]
   Perconti JT, 2014, LECT NOTES COMPUT SC, V8410, P128
   Pit-Claudel C, 2020, LECT NOTES COMPUT SC, V12167, P119, DOI 10.1007/978-3-030-51054-1_7
   Ramananandro T, 2015, CPP'15: PROCEEDINGS OF THE 2015 ACM CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P3, DOI 10.1145/2676724.2693167
   Rewitzky I, 2003, LECT NOTES COMPUT SC, V2929, P256
   Roscoe AW, 2010, TEXTS COMPUT SCI, P3, DOI 10.1007/978-1-84882-258-0_1
   Sammler Michael, 2022, Zenodo, DOI 10.5281/ZENODO.7306313
   Sammler M, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P825, DOI 10.1145/3519939.3523434
   Song Y, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571232
   Song Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371091
   Sprenger C, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428220
   Stewart G, 2015, ACM SIGPLAN NOTICES, V50, P275, DOI [10.1145/2676726.2676985, 10.1145/2775051.2676985]
   Tanenbaum Andrew S., 2014, MODERN OPERATING SYS, V4th, DOI [10.5555/2655363, DOI 10.5555/2655363]
   Vale AO, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498703
   Vardi MY, 1995, LECT NOTES COMPUT SC, V1000, P471
   Wang P, 2014, ACM SIGPLAN NOTICES, V49, P675, DOI [10.1145/2660193.2660201, 10.1145/2714064.2660201]
   Wang YT, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290375
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
NR 55
TC 6
Z9 7
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571220
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500027
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Chowdhary, S
   Nagarakatte, S
AF Chowdhary, Sangeeta
   Nagarakatte, Santosh
TI Fast Shadow Execution for Debugging Numerical Errors using Error Free
   Transformations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE rounding errors; floating point; shadow execution; EFTSanitizer
ID LIBRARY
AB This paper proposes, EFTSANITIZER, a fast shadow execution framework for detecting and debugging numerical errors during late stages of testing especially for long-running applications. Any shadow execution framework needs an oracle to compare against the floating point (FP) execution. This paper makes a case for using error free transformations, which is a sequence of operations to compute the error of a primitive operation with existing hardware supported FP operations, as an oracle for shadow execution. Although the error of a single correctly rounded FP operation is bounded, the accumulation of errors across operations can result in exceptions, slow convergences, and even crashes. To ease the job of debugging such errors, EFTSANITIZER provides a directed acyclic graph (DAG) that highlights the propagation of errors, which results in exceptions or crashes. Unlike prior work, DAGs produced by EFTSANITIZER include operations that span various function calls while keeping the memory usage bounded. To enable the use of such shadow execution tools with long-running applications, EFTSANITIZER also supports starting the shadow execution at an arbitrary point in the dynamic execution, which we call selective shadow execution. EFTSANITIZER is an order of magnitude faster than prior state-of-art shadow execution tools such as FPSanitizer and Herbgrind. We have discovered new numerical errors and debugged them using EFTSANITIZER.
C1 [Chowdhary, Sangeeta; Nagarakatte, Santosh] Rutgers State Univ, Dept Comp Sci, New Brunswick, NJ 08901 USA.
C3 Rutgers University System; Rutgers University New Brunswick
RP Chowdhary, S (corresponding author), Rutgers State Univ, Dept Comp Sci, New Brunswick, NJ 08901 USA.
EM chowdhary@rutgers.edu; santosh.nagarakatte@cs.rutgers.edu
OI Nagarakatte, Santosh/0000-0002-5048-8548
FU National Science Foundation [1908798, 2110861]
FX We thank OOPSLA reviewers, Laura Titolo, Matan Shachnai, Harishankar
   Vishwanathan, and Mridul Aanjaneya for their feedback. This material is
   based upon work supported in part by the National Science Foundation
   under Grant No. 1908798 and Grant No. 2110861. Any opinions, findings,
   and conclusions or recommendations expressed in this material are those
   of the authors and do not necessarily reflect the views of the National
   Science Foundation.
CR Aanjaneya M, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P552, DOI 10.1145/3519939.3523447
   [Anonymous], 1974, Floating-Point Computation
   Bao T, 2013, ACM SIGPLAN NOTICES, V48, P817, DOI [10.1145/2509136.2509526, 10.1145/2544173.2509526]
   Barr ET, 2013, ACM SIGPLAN NOTICES, V48, P549, DOI 10.1145/2480359.2429133
   Benz F, 2012, ACM SIGPLAN NOTICES, V47, P453, DOI 10.1145/2345156.2254118
   Boldo S, 2003, P S COMP ARITHM, P79, DOI 10.1109/ARITH.2003.1207663
   Boldo S, 2017, ACM T MATH SOFTWARE, V44, DOI 10.1145/3054947
   Cadna, 2022, GAUSS METH
   Chiang WF, 2017, ACM SIGPLAN NOTICES, V52, P300, DOI 10.1145/3093333.3009846
   Chowdhary S, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P615, DOI 10.1145/3468264.3468585
   Chowdhary S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P731, DOI 10.1145/3385412.3386004
   Chowdhary Sangeeta., 2020, FPSanitizer - A debugger to detect and diagnose numerical errors in floating point programs
   Chowdhary Sangeeta, 2022, EFTSANTIZER FAST SHA
   Daramy C, 2003, P SOC PHOTO-OPT INS, V5205, P458, DOI 10.1117/12.505591
   Daramy-Loirat C., 2006, Research report.
   Darulova E, 2018, LECT NOTES COMPUT SC, V10805, P270, DOI 10.1007/978-3-319-89960-2_15
   Darulova E, 2014, ACM SIGPLAN NOTICES, V49, P235, DOI 10.1145/2535838.2535874
   Das A, 2020, PROCEEDINGS OF SC20: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS (SC20), DOI 10.1109/SC41405.2020.00055
   de Dinechin F., 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P1318, DOI 10.1145/1141277.1141584
   DEKKER TJ, 1971, NUMER MATH, V18, P224, DOI 10.1007/BF01397083
   Delmas David., 2007, Proceedings of the 14th International Conference on Static Analysis, SAS'07, P437, DOI DOI 10.1007/978-3-540-74061-2_27
   Demeure Nestor, 2020, THESIS
   Dinda Peter, 2020, HPDC '20: Proceedings of the 29th International Symposium on High-Performance Parallel and Distributed Computing, P5, DOI 10.1145/3369583.3392673
   Fevotte F., 2016, Verrou: Assessing Floating-Point Accuracy Without Recompiling
   Fousse L, 2007, ACM T MATH SOFTWARE, V33, DOI 10.1145/1236463.1236468
   Ghorbal K, 2012, LECT NOTES COMPUT SC, V7148, P235, DOI 10.1007/978-3-642-27940-9_16
   GOLDBERG D, 1991, COMPUT SURV, V23, P5, DOI 10.1145/103162.103163
   Goubault E, 2001, LECT NOTES COMPUT SC, V2126, P234
   GOUBAULT E, 2008, REV SEL PAP 12 INT W, V4916, P3, DOI DOI 10.1007/978-3-540-79707-4_3
   Higham Nicholas John, 2002, Accuracy and Stability of Numerical Algorithms, V2nd, DOI [10.1137/1.9780898718027, DOI 10.1137/1.9780898718027]
   Jeannerod CP, 2018, P S COMP ARITHM, P53, DOI 10.1109/ARITH.2018.8464793
   Jézéquel F, 2008, COMPUT PHYS COMMUN, V178, P933, DOI 10.1016/j.cpc.2008.02.003
   Kahan William, 1965, COMMUN ACM, V8, DOI [10.1145/363707.363723, DOI 10.1145/363707.363723.8464793]
   Karlin I., 2013, Technical Report LLNL-TR-641973
   Knuth D. E., 1997, ART COMPUTER PROGRAM, V2
   Langlois Philippe, 2006, ALGEBRAIC NUMERICAL, V5391, DOI [10.4230/DagSemProc.05391.3, DOI 10.4230/DAGSEMPR0C.05391.3]
   Lee WC, 2015, ACM SIGPLAN NOTICES, V50, P623, DOI [10.1145/2814270.2814299, 10.1145/2858965.2814299]
   Lim JP, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498664
   Lim JP, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P359, DOI 10.1145/3453483.3454049
   Lim JP, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434310
   Lim Jay P., 2020, ARXIV200705344
   Lim Jay P., 2021, ARXIV210806756
   Lim Jay P, 2021, ARXIV210404043
   LLNL, 2022, HIGH ORD LAGR HYDR M
   LLNL, 2022, AMG
   Muller Jean-Michel, 2016, Elementary Functions: Algorithms and Implementation, V3, DOI DOI 10.1007/978-1-4899-7983-4
   Muller Jean-Michel, 2018, Handbook of Floating -Point Arithmetic, V2nd, DOI [10.1007/978-3-319-76526-6, DOI 10.1007/978-3-319-76526-6]
   NAGARAKATTE S, 2010, P 2010 INT S MEM MAN, V45, P31, DOI DOI 10.1145/1806651.1806657
   Nagarakatte Santosh, 2012, THESIS
   NAS, 2022, NAS PAR BENCHM 3 0
   Nethercote N, 2007, ACM SIGPLAN NOTICES, V42, P89, DOI 10.1145/1273442.1250746
   Ogita T, 2005, SIAM J SCI COMPUT, V26, P1955, DOI 10.1137/030601818
   Panchekha P, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI 10.1145/2737924.2737959
   Priest Douglas M., 1992, GAX9330692 UMI
   Rump SM, 2009, SIAM J SCI COMPUT, V31, P3466, DOI 10.1137/080738490
   Sanchez-Stern A, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P256, DOI [10.1145/3192366.3192411, 10.1145/3296979.3192411]
   Shewchuk JR, 1997, DISCRETE COMPUT GEOM, V18, P305, DOI 10.1007/PL00009321
   Solovyev A, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3230733
   Titolo L, 2018, LECT NOTES COMPUT SC, V10747, P516, DOI 10.1007/978-3-319-73721-8_24
   US-GAO United States General Accounting Office, 1992, PATR MISS DEF SOFTW
   Zhang YH, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P826, DOI 10.1145/3368089.3409720
   Zou DM, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371128
NR 62
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 190
DI 10.1145/3563353
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200067
OA gold
DA 2024-07-18
ER

PT J
AU Hoeflich, J
   Findler, RB
   Serrano, M
AF Hoeflich, Joshua
   Findler, Robert Bruce
   Serrano, Manuel
TI Highly Illogical, Kirk: Spotting Type Mismatches in the Large Despite
   Broken Contracts, Unsound Types, and Too Many Linters
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Contracts; Gradual Typing; TypeScript; Definitely Typed; Buggy Types
AB The DefinitelyTyped repository hosts type declarations for thousands of JavaScript libraries. Given the lack of formal connection between the types and the corresponding code, a natural question is are the types right? An equally important question, as DefinitelyTyped and the libraries it supports change over time, is how can we keep the types from becoming wrong?
   In this paper we offer Scotty, a tool that detects mismatches between the types and code in the DefinitelyTyped repository. More specifically, Scotty checks each package by converting its types into contracts and installing the contracts on the boundary between the library and its test suite. Running the test suite in this environment can reveal mismatches between the types and the JavaScript code. As automation and generality are both essential if such a tool is going to remain useful in the long term, we focus on techniques that sacrifice completeness, instead preferring to avoid false positives. Scotty currently handles about 26% of the 8006 packages on DefinitelyTyped (61% of the packages whose code is available and whose test suite passes).
   Perhaps unsurprisingly, running the tests with these contracts in place revealed many errors in DefinitelyTyped. More surprisingly, despite the inherent limitations of the techniques we use, this exercise led to one hundred accepted pull requests that fix errors in DefinitelyTyped, demonstrating the value of this approach for the long-term maintenance of DefinitelyTyped. It also revealed a number of lessons about working in the JavaScript ecosystem and how details beyond the semantics of the language can be surprisingly important. Best of all, it also revealed a few places where programmers preferred incorrect types, suggesting some avenues of research to improve TypeScript.
C1 [Hoeflich, Joshua; Findler, Robert Bruce] Northwestern Univ, Evanston, IL 60208 USA.
   [Serrano, Manuel] UCA, Inria, Clermont Ferrand, France.
C3 Northwestern University; Inria
RP Hoeflich, J (corresponding author), Northwestern Univ, Evanston, IL 60208 USA.
OI Serrano, Manuel/0000-0002-5240-1610
FU National Science Foundation [CNS-1823244]; French ANR
   [ANR17-CE25-0014-01]
FX This material is based upon work supported by the National Science
   Foundation under Grant Number CNS-1823244 and the French ANR
   ANR17-CE25-0014-01 CISC project and the Inria SPAI project.
CR Ahmed A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110283
   Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   [Anonymous], 2013, P 2013 9 JOINT M FDN, DOI [10.1145/2491411.2491447, DOI 10.1145/2491411.2491447]
   [Anonymous], 2019, The TypeScript Handbook
   Beller M, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1, P470, DOI 10.1109/SANER.2016.105
   Bierman G, 2014, LECT NOTES COMPUT SC, V8586, P257
   Castagna G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110285
   Chaudhuri A, 2016, PROCEEDINGS OF THE 2016 ACM WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS'16), P1, DOI 10.1145/2993600.2996280
   Cristiani F, 2021, PROCEEDINGS OF THE 18TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON MANAGED PROGRAMMING LANGUAGES AND RUNTIMES (MPLR '2021), P97, DOI 10.1145/3475738.3480941
   Ecma International, 2015, Standard ECMA-262-ECMAScript Language Specification
   Feldthaus A, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2660193.2660215
   Feltey D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276503
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Gao Z, 2017, PROC INT CONF SOFTW, P758, DOI 10.1109/ICSE.2017.75
   Greenman B, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000217
   Gronski Jessica, 2006, SCHEM FUNCT PROGR WO, P93
   Guha A., 2007, Proceedings of the 2007 symposium on Dynamic languages, DLS '07, P29, DOI [10.1145/1297081.1297089, DOI 10.1145/1297081.1297089]
   Jensen SH, 2009, LECT NOTES COMPUT SC, V5673, P238, DOI 10.1007/978-3-642-03237-0_17
   Keil M, 2013, Arxiv, DOI arXiv:1312.5429
   Keil M, 2015, ACM SIGPLAN NOTICES, V50, P375, DOI [10.1145/2784731.2784737, 10.1145/2858949.2784737]
   Keil Matthias, 2015, P EUR C OBJ OR PROGR, DOI [10.4230/LIPIcs.ECOOP.2015.149, DOI 10.4230/LIPICS.ECOOP.2015.149]
   Kristensen EK, 2019, PROC INT CONF SOFTW, P83, DOI 10.1109/ICSE.2019.00026
   Kristensen EK, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133914
   Kristensen EK, 2017, LECT NOTES COMPUT SC, V10202, P99, DOI 10.1007/978-3-662-54494-5_6
   Malik RS, 2019, PROC INT CONF SOFTW, P304, DOI 10.1109/ICSE.2019.00045
   Matthews Jacob., 2008, P EUR S PROGR, DOI [10.1007/978-3-540-78739-6_2, DOI 10.1007/978-3-540-78739-6_2]
   Mitropoulos C, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P1202, DOI 10.1145/3338906.3342489
   Moller A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428255
   Moy C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434334
   Muehlboeck F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133880
   Nielsen BB, 2021, PROC INT CONF SOFTW, P74, DOI 10.1109/ICSE43902.2021.00020
   Ocariza FS, 2011, 22ND IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P100, DOI 10.1109/ISSRE.2011.28
   Rastogi A, 2015, ACM SIGPLAN NOTICES, V50, P167, DOI [10.1145/2775051.2676971, 10.1145/2676726.2676971]
   Rinetzky N., 2007, P EUR S PROGR, DOI [10.5555/1762174.1762197, DOI 10.5555/1762174.1762197]
   Siek Jeremy G, 2006, P WORKSH SCHEM FUNCT
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Tómasdóttir KF, 2020, IEEE T SOFTWARE ENG, V46, P863, DOI 10.1109/TSE.2018.2871058
   Tómasdóttir KF, 2017, IEEE INT CONF AUTOM, P578, DOI 10.1109/ASE.2017.8115668
   Van Cutsem T, 2013, LECT NOTES COMPUT SC, V7920, P154, DOI 10.1007/978-3-642-39038-8_7
   Vitousek MM, 2015, ACM SIGPLAN NOTICES, V50, P45, DOI 10.1145/2661088.2661101
   Williams J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276504
   Williams Jack, 2017, P EUR C OBJ OR PROGR
NR 43
TC 1
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 142
DI 10.1145/3563305
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200019
OA gold
DA 2024-07-18
ER

PT J
AU Kolesar, JC
   Piskac, R
   Hallahan, WT
AF Kolesar, John C.
   Piskac, Ruzica
   Hallahan, William T.
TI Checking Equivalence in a Non-strict Language
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE coinduction; non-strictness; equivalence; symbolic execution; Haskell
AB Program equivalence checking is the task of confirming that two programs have the same behavior on corresponding inputs. We develop a calculus based on symbolic execution and coinduction to check the equivalence of programs in a non-strict functional language. Additionally, we show that our calculus can be used to derive counterexamples for pairs of inequivalent programs, including counterexamples that arise from non-termination. We describe a fully automated approach for finding both equivalence proofs and counterexamples. Our implementation, nebula, proves equivalences of programs written in Haskell. We demonstrate nebula's practical effectiveness at both proving equivalence and producing counterexamples automatically by applying nebula to existing benchmark properties.
C1 [Kolesar, John C.; Piskac, Ruzica] Yale Univ, Comp Sci, New Haven, CT 06520 USA.
   [Hallahan, William T.] SUNY Binghamton, Comp Sci, Binghamton, NY USA.
C3 Yale University; State University of New York (SUNY) System; State
   University of New York (SUNY) Binghamton
RP Kolesar, JC (corresponding author), Yale Univ, Comp Sci, New Haven, CT 06520 USA.
EM john.kolesar@yale.edu; ruzica.piskac@yale.edu; whallahan@binghamton.edu
OI Piskac, Ruzica/0000-0002-3267-0776; Kolesar, John/0000-0002-6084-2387;
   Hallahan, William/0000-0003-4925-3861
FU National Science Foundation [CCF-2131476, CNS-1565208]
FX We thank the anonymous reviewers for their feedback on earlier versions
   of this paper. We thank Dorel Lucanu for answering our questions about
   CIRC. This work was supported by the National Science Foundation under
   Grant Numbers CCF-2131476 and CNS-1565208.
CR Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Breitner J, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236784
   Breitner Joachim, 2018, hs-to-coq supports coinduction
   Brotherston J., 2012, Programming Languages and Systems, V7705, P350, DOI [10.1007/978-3-642-35182-225, 10.1007/978-3-642-35182-2_25]
   Burnim J, 2009, IEEE INT CONF AUTOM, P161, DOI 10.1109/ASE.2009.87
   Campbell EH, 2021, PROCEEDINGS OF THE 18TH USENIX SYMPOSIUM ON NETWORKED SYSTEM DESIGN AND IMPLEMENTATION, P133
   Carbin M, 2011, LECT NOTES COMPUT SC, V6813, P609, DOI 10.1007/978-3-642-22655-7_28
   Claessen Koen, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P392, DOI 10.1007/978-3-642-38574-2_27
   Claessen Koen, 2012, ATx/WInG@ IJCAR, P16, DOI [10.29007/3qwr, DOI 10.29007/3QWR]
   Cook B, 2014, 2014 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P67, DOI 10.1109/FMCAD.2014.6987597
   Dixon L, 2003, LECT NOTES ARTIF INT, V2741, P279
   Elliot Conal, 2010, Non -strict memoization
   Farina GP, 2019, PROCEEDINGS OF THE 21ST INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2019), DOI 10.1145/3354166.3354175
   Farmer A, 2015, ACM SIGPLAN NOTICES, V50, P23, DOI 10.1145/2804302.2804303
   Gibbons J, 2005, FUND INFORM, V66, P353
   Gordon A., 1995, WORKSHOPS COMPUTING, P78, DOI [10.1007/978-1-4471-3573-9_6, DOI 10.1007/978-1-4471-3573-9_6]
   Gupta AK, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P147, DOI 10.1145/1328438.1328459
   Hallahan WT, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P411, DOI 10.1145/3314221.3314618
   Johansson M, 2010, LECT NOTES COMPUT SC, V6172, P291, DOI 10.1007/978-3-642-14052-5_21
   Jones S.P., 2001, HASK WORKSH, V1, P203
   Kling M, 2012, ACM SIGPLAN NOTICES, V47, P431, DOI 10.1145/2398857.2384648
   Kolesar John, 2022, Zenodo, DOI 10.5281/ZENODO.7083308
   Koutavas V, 2006, ACM SIGPLAN NOTICES, V41, P141, DOI 10.1145/1111320.1111050
   Kozen D, 2017, MATH STRUCT COMP SCI, V27, P1132, DOI 10.1017/S0960129515000493
   Le TC, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428257
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   Leino KRM, 2014, LECT NOTES COMPUT SC, V8442, P382, DOI 10.1007/978-3-319-06410-9_27
   Lucanu D, 2007, LECT NOTES COMPUT SC, V4624, P372
   Mastorou Lykourgos, 2022, HASKELL S
   Milovancevic Dragana, 2021, Technical Report
   Nguyen PC, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P845, DOI 10.1145/3314221.3314643
   Nguyen PC, 2015, ACM SIGPLAN NOTICES, V50, P446, DOI 10.1145/2737924.2737971
   Person Suzette, 2008, P 16 INT S FDN SOFTW, P226, DOI [DOI 10.1145/1453101.1453131, 10.1145/1453101.1453131]
   Peyton Jones S. L., 1996, Programming Languages and Systems - ESOP '96. 6th European Symposium on Programming. Proceedings, P18
   Rosu G, 2009, LECT NOTES COMPUT SC, V5728, P127, DOI 10.1007/978-3-642-03741-2_10
   Rutten JJMM, 2000, THEOR COMPUT SCI, V249, P3, DOI 10.1016/S0304-3975(00)00056-6
   Sangiorgi D, 2007, IEEE S LOG, P293, DOI 10.1109/LICS.2007.17
   Sangiorgi D, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1516507.1516510
   Schkufza E, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI 10.1145/2499368.2451150
   Schuts M, 2016, LECT NOTES COMPUT SC, V9681, P311, DOI 10.1007/978-3-319-33693-0_20
   Smith C, 2019, LECT NOTES COMPUT SC, V11388, P24, DOI 10.1007/978-3-030-11245-5_2
   Sonnex W, 2012, LECT NOTES COMPUT SC, V7214, P407, DOI 10.1007/978-3-642-28756-5_28
NR 42
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 177
DI 10.1145/3563340
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200054
OA gold
DA 2024-07-18
ER

PT J
AU Rivera, E
   Krishnamurthi, S
AF Rivera, Elijah
   Krishnamurthi, Shriram
TI Structural versus Pipeline Composition of Higher-Order Functions
   (Experience Report)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE higher-order functions; composition; program structure; plans
AB In teaching students to program with compositions of higher-order functions, we have encountered a sharp distinction in the difficulty of problems as perceived by students. This distinction especially matters as growing numbers of programmers learn about functional programming for data processing. We have made initial progress on identifying this distinction, which appears counter-intuitive to some. We describe the phenomenon, provide some preliminary evidence of the difference in difficulty, and suggest consequences for functional programming pedagogy.
C1 [Rivera, Elijah; Krishnamurthi, Shriram] Brown Univ, Providence, RI 02912 USA.
C3 Brown University
RP Rivera, E (corresponding author), Brown Univ, Providence, RI 02912 USA.
EM eerivera@brown.edu; shriram@brown.edu
OI Krishnamurthi, Shriram/0000-0001-5184-1975; Rivera,
   Elijah/0000-0002-5374-0171
FU US National Science Foundation
FX We thank Matthias Felleisen and Kathi Fisler for useful conversations
   and feedback. We appreciate the detailed reading by the reviewers. We
   especially appreciate our shepherd, Dan Grossman, who went well beyond
   the call of duty to help improve this paper. This work is partially
   supported by the US National Science Foundation.
CR Achten P, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000216
   [Anonymous], 2010, PLTTR20101 INC
   [Anonymous], 2001, INT C COGN SCI
   Castro FEV, 2020, SIGCSE 2020: PROCEEDINGS OF THE 51ST ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P487, DOI 10.1145/3328778.3366847
   Chen S., 2010, Encyclopedia of Research Design, DOI [DOI 10.4135/9781412961288, 10.4135/9781412961288]
   EBRAHIMI A, 1994, INT J HUM-COMPUT ST, V41, P457, DOI 10.1006/ijhc.1994.1069
   Felleisen Matthias, 2001, How to Design Programs
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Fisler Kathi, 2014, P 10 ANN C INT COMP, P35, DOI [DOI 10.1145/2632320.2632346, 10.1145/2632320.2632346]
   Fisler Kathi., 2016, P 47 ACM TECHNICAL S, P211
   Gibbons J, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000113
   JOHNSON W., 1986, INTENTION BASED DIAG
   Krishnamurthi S, 2020, COMMUN ACM, V63, P24, DOI 10.1145/3408056
   RIST RS, 1989, COGNITIVE SCI, V13, P389, DOI 10.1207/s15516709cog1303_3
   Rivera Elijah, 2022, ACM C INT COMPUTING, DOI [10.1145/3501385.3543965, DOI 10.1145/3501385.3543965]
   Seppala Otto, 2015, P 15 KOL CALL C COMP, P87
   Simon, 2013, 2013 LEARNING AND TEACHING IN COMPUTING AND ENGINEERING (LATICE 2013), P130, DOI 10.1109/LaTiCE.2013.44
   Thorndike EL, 1901, PSYCHOL REV, V8, P247, DOI 10.1037/h0071363
NR 18
TC 1
Z9 1
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 102
DI 10.1145/3547633
PG 14
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000013
OA gold
DA 2024-07-18
ER

PT J
AU Westrick, S
   Arora, J
   Acar, UA
AF Westrick, Sam
   Arora, Jatin
   Acar, Umut A.
TI Entanglement Detection with Near-Zero Cost
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE disentanglement; parallelism; functional; memory management
ID EFFICIENT
AB Recent research on parallel functional programming has culminated in a provably efficient (in work and space) parallel memory manager, which has been incorporated into the MPL (MaPLe) compiler for Parallel ML and shown to deliver practical efficiency and scalability. The memory manager exploits a property of parallel programs called disentanglement, which restricts computations from accessing concurrently allocated objects. Disentanglement is closely related to race-freedom, but subtly differs from it. Unlike race-freedom, however, no known techniques exists for ensuring disentanglement, leaving the task entirely to the programmer. This is a challenging task, because it requires reasoning about low-level memory operations (e.g., allocations and accesses), which is especially difficult in functional languages.
   In this paper, we present techniques for detecting entanglement dynamically, while the program is running. We first present a dynamic semantics for a functional language with references that checks for entanglement by consulting parallel and sequential dependency relations in the program. Notably, the semantics requires checks for mutable objects only. We prove the soundness of the dynamic semantics and present several techniques for realizing it efficiently, in particular by pruning away a large number of entanglement checks. We also provide bounds on the work and space of our techniques.
   We show that the entanglement detection techniques are practical by implementing them in the MPL compiler for Parallel ML. Considering a variety of benchmarks, we present an evaluation and measure time and space overheads of less than 5% on average with up to 72 cores. These results show that entanglement detection has negligible cost and can therefore remain deployed with little or no impact on efficiency, scalability, and space.
C1 [Westrick, Sam; Arora, Jatin; Acar, Umut A.] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Carnegie Mellon University
RP Westrick, S (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM swestric@cs.cmu.edu; jatina@andrew.cmu.edu; umut@cs.cmu.edu
OI Arora, Jatin/0000-0001-8302-6844; Westrick, Sam/0000-0003-2848-9808
FU National Science Foundation [CCF-1901381, CCF2107241, CCF-2119352,
   CCF-2115104]
FX We thank the anonymous reviewers for their thorough and insightful
   comments and suggestions. This work was supported by the National
   Science Foundation under grants CCF-1901381, CCF2107241, CCF-2119352,
   and CCF-2115104.
CR Acar UA, 2013, ACM SIGPLAN NOTICES, V48, P219, DOI 10.1145/2517327.2442538
   Acar Umut A., 2015, SUMMIT ADV PROGRAMMI
   Acar Umut A., 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236790
   Adve S, 2010, COMMUN ACM, V53, P84, DOI 10.1145/1839676.1839697
   Anderson D, 2022, PPOPP'22: PROCEEDINGS OF THE 27TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P445, DOI 10.1145/3503221.3508422
   Anderson TA, 2010, ACM SIGPLAN NOTICES, V45, P21
   [Anonymous], 2002, P 3 INT S MEM MAN BE, DOI [DOI 10.1145/512429.512439, 10.1145/512429.512439]
   Appel A. W., 1996, Journal of Functional Programming, V6, P47, DOI 10.1017/S095679680000157X
   APPEL AW, 1989, SOFTWARE PRACT EXPER, V19, P171, DOI 10.1002/spe.4380190206
   Arora J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434299
   Arora NS, 2001, THEOR COMPUT SYST, V34, P115, DOI 10.1007/s00224-001-0004-z
   Auhagen Sven., 2011, P 2011 ACM SIGPLAN W, P51
   Bender Michael A., 2004, SPAA, P133
   Blelloch GE, 1996, COMMUN ACM, V39, P85, DOI 10.1145/227234.227246
   BLELLOCH GE, 1994, J PARALLEL DISTR COM, V21, P4, DOI 10.1006/jpdc.1994.1038
   Blelloch GE, 1999, ACM SIGPLAN NOTICES, V34, P104, DOI 10.1145/301631.301648
   Blelloch GE, 2020, PROCEEDINGS OF THE 32ND ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES (SPAA '20), P507, DOI 10.1145/3350755.3400254
   Blelloch GE, 2012, ACM SIGPLAN NOTICES, V47, P181, DOI 10.1145/2370036.2145840
   Blumofe RD, 1998, SIAM J COMPUT, V27, P202, DOI 10.1137/S0097539793259471
   BLUMOFE RD, 1995, SIGPLAN NOTICES, V30, P207
   Bocchino Robert L, 2009, 1 USENIX C HOT TOP P
   Boehm Hans-Juergen, 2011, 3 USENIX WORKSH HOT
   Chakravarty M., 2007, PROC WORKSHOP DECLAR, P10
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   Cheng Guang-Ien, 1998, P 10 ACM S PAR ALG A
   Cheng P, 2001, ACM SIGPLAN NOTICES, V36, P125, DOI 10.1145/381694.378823
   Doligez D., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P113, DOI 10.1145/158511.158611
   Doligez D., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P70, DOI 10.1145/174675.174673
   Fineman Jeremy T., 2005, THESIS
   Flanagan C, 2009, ACM SIGPLAN NOTICES, V44, P121, DOI 10.1145/1543135.1542490
   Fluet M, 2010, J FUNCT PROGRAM, V20, P537, DOI 10.1017/S0956796810000201
   Fluet M, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P241
   Frigo M, 2009, SPAA'09: PROCEEDINGS OF THE TWENTY-FIRST ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P79
   Gifford David K, 1986, P ACM S LISP FUNCTIO, P22
   Goncalves Marcelo J. R, 1995, RECORD 1995 C FUNCTI
   Goncalves Marcelo J. R., 1995, THESIS PRINCETON U
   Guatto Adrien, 2018, ACM SIGPLAN Notices, V53, P81, DOI 10.1145/3200691.3178494
   Halstead R.H., 1984, P 1984 ACM S LISP FU, P9
   Hammond K, 2011, LECT NOTES COMPUT SC, V6652, P201, DOI 10.1007/978-3-642-21338-0_17
   Imam Shams., 2014, P 2014 INT C PRINCIP, P75
   Intel Corporation, 2009, 322581001US INT CORP
   Intel Corporation 2009b, INT R THREAD BUILD B
   Jones Richard, 2016, The garbage collection handbook: the art of automatic memory management
   Jones SP, 2008, LECT NOTES COMPUT SC, V5356, P138
   Keller Gabriele, 2010, P 15 ACM SIGPLAN INT, P261
   Kini D, 2017, ACM SIGPLAN NOTICES, V52, P157, DOI [10.1145/3062341.3062374, 10.1145/3140587.3062374]
   Kuper L, 2014, ACM SIGPLAN NOTICES, V49, P2, DOI 10.1145/2666356.2594312
   Kuper Lindsey, 2013, P 2 ACM SIGPLAN WORK, P71, DOI 10.1145/2502323.2502326
   LAUNCHBURY J, 1994, SIGPLAN NOTICES, V29, P24, DOI 10.1145/773473.178246
   Le M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P230, DOI 10.1145/2784731.2784736
   Lea Doug, 2000, JAVA, P36
   Li P, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P107
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Marlow S, 2011, ACM SIGPLAN NOTICES, V46, P71, DOI 10.1145/2096148.2034685
   MELLORCRUMMEY J, 1991, SUPERCOMPUTING 91, P24
   Mingdong Feng, 1997, SPAA '97. 9th Annual ACM Symposium on Parallel Algorithms and Architectures, P1, DOI 10.1145/258492.258493
   MLton, MLton web site
   Muller S.K., 2016, P 28 ACM S PARALLELI, P71, DOI DOI 10.1145/2935764.2935793
   Muller SK, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341685
   Muller SK, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P577, DOI 10.1145/3385412.3386013
   Muller SK, 2017, ACM SIGPLAN NOTICES, V52, P677, DOI [10.1145/3062341.3062370, 10.1145/3140587.3062370]
   NIKHIL A, 1989, ACM T PROGR LANG SYS, V11, P598, DOI 10.1145/69558.69562
   O'Callahan R., 2003, SIGPLAN Notices, V38, P166, DOI 10.1145/966049.781528
   Ohori Atsushi, 2018, Making SML# a General-purpose High-performance Language
   Park S, 2008, ACM T PROGR LANG SYS, V31, DOI 10.1145/1452044.1452048
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   Raghunathan R, 2016, ACM SIGPLAN NOTICES, V51, P392, DOI 10.1145/3022670.2951935
   Raman R, 2012, ACM SIGPLAN NOTICES, V47, P531, DOI [10.1145/2345156.2254127, 10.1145/2345156.1993502]
   Raman R, 2010, LECT NOTES COMPUT SC, V6418, P368, DOI 10.1007/978-3-642-16612-9_28
   Reynolds John C., 1978, POPL, P39
   Rust Team, 2019, RUST LANG
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   Shun JL, 2013, ACM SIGPLAN NOTICES, V48, P135, DOI 10.1145/2517327.2442530
   Shun Julian, 2012, ACM Symposium on Parallelism in Algorithms and Architectures (SPAA), P68
   Singer K., 2020, Proceedings of the Symposium on Algorithmic Principles of Computer Systems, P147, DOI [10.1137/1.9781611976021.11, DOI 10.1137/1.9781611976021.11]
   Singer K, 2020, PROCEEDINGS OF THE 32ND ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES (SPAA '20), P465, DOI 10.1145/3350755.3400236
   Singer K, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P257, DOI 10.1145/3293883.3295735
   Sivaramakrishnan KC, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408995
   Sivaramakrishnan KC, 2014, J FUNCT PROGRAM, V24, P613, DOI 10.1017/S0956796814000161
   Smaragdakis Y, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P387
   Spoonhower D, 2009, SPAA'09: PROCEEDINGS OF THE TWENTY-FIRST ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P91
   Spoonhower Daniel, 2009, Ph. D. Dissertation
   Steele G. L.  Jr., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P472, DOI 10.1145/174675.178068
   Sun YH, 2018, ACM SIGPLAN NOTICES, V53, P290, DOI 10.1145/3200691.3178509
   Terauchi T, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1353445.1353449
   Utterback R., 2016, P 28 ACM S PARALLELI, P83
   Westrick Sam, 2022, Zenodo, DOI 10.5281/ZENODO.6671887
   Westrick S, 2022, PPOPP'22: PROCEEDINGS OF THE 27TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P61, DOI 10.1145/3503221.3508434
   Westrick S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371115
   Westrick Sam, PROVABLY SPACE EFFIC
   Westrick Sam., ARXIV, DOI [10.48550/arXiv.2204.14168, DOI 10.48550/ARXIV.2204.14168]
   Xu YF, 2020, PROCEEDINGS OF THE 25TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '20), P217, DOI 10.1145/3332466.3374536
   Yu Y., 2005, P 20 ACM S OP SYST P, P221
   Ziarek L, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P628
NR 94
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 115
DI 10.1145/3547646
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000026
OA gold
DA 2024-07-18
ER

PT J
AU Li, YB
   Satya, K
   Zhang, QR
AF Li, Yuanbo
   Satya, Kris
   Zhang, Qirun
TI Efficient Algorithms for Dynamic Bidirected Dyck-Reachability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Dynamic Graph Algorithms; Dyck-Reachability; Bidirected Graphs;
   Incremental Analysis
ID POINTS-TO ANALYSIS; CFL-REACHABILITY; INCREMENTAL COMPUTATION;
   TRANSITIVE CLOSURE
AB Dyck-reachability is a fundamental formulation for program analysis, which has been widely used to capture properly-matched-parenthesis program properties such as function calls/returns and field writes/reads. Bidirected Dyck-reachability is a relaxation of Dyck-reachability on bidirected graphs where each edge mu -> (li) upsilon labeled by an open parenthesis "(sic)(i)" is accompanied with an inverse edge v (sic) u labeled by the corresponding close parenthesis "(sic)(i)", and vice versa. In practice, many client analyses such as alias analysis adopt the bidirected Dyck-reachability formulation. Bidirected Dyck-reachability admits an optimal reachability algorithm. Specifically, given a graph with.. nodes and.. edges, the optimal bidirected Dyck-reachability algorithm computes all-pairs reachability information in O(m) time.
   This paper focuses on the dynamic version of bidirected Dyck-reachability. In particular, we consider the problem of maintaining all-pairs Dyck-reachability information in bidirected graphs under a sequence of edge insertions and deletions. Dynamic bidirected Dyck-reachability can formulate many program analysis problems in the presence of code changes. Unfortunately, solving dynamic graph reachability problems is challenging. For example, even for maintaining transitive closure, the fastest deterministic dynamic algorithm requires O(n(2)) update time to achieve O(1) query time. All-pairs Dyck-reachability is a generalization of transitive closure. Despite extensive research on incremental computation, there is no algorithmic development on dynamic graph algorithms for program analysis with worst-case guarantees.
   Our work fills the gap and proposes the first dynamic algorithm for Dyck reachability on bidirected graphs. Our dynamic algorithms can handle each graph update (i.e., edge insertion and deletion) in O(n . alpha(n)) time and support any all-pairs reachability query in O(1) time, where alpha(n) is the inverse Ackermann function. We have implemented and evaluated our dynamic algorithm on an alias analysis and a context-sensitive datadependence analysis for Java. We compare our dynamic algorithms against a straightforward approach based on the O(m)-time optimal bidirected Dyck-reachability algorithm and a recent incremental Datalog solver. Experimental results show that our algorithm achieves orders of magnitude speedup over both approaches.
C1 [Li, Yuanbo; Satya, Kris; Zhang, Qirun] Georgia Inst Technol, Atlanta, GA 30332 USA.
C3 University System of Georgia; Georgia Institute of Technology
RP Li, YB (corresponding author), Georgia Inst Technol, Atlanta, GA 30332 USA.
EM yuanboli@gatech.edu; ksatya3@gatech.edu; qrzhang@gatech.edu
OI Zhang, Qirun/0000-0001-5367-9377
FU Amazon under an Amazon Research Award in automated reasoning; United
   States National Science Foundation (NSF) [1917924, 2114627]; Defense
   Advanced Research Projects Agency (DARPA) [N66001-21-C-4024]; Facebook
   Graduate Fellowship; Direct For Computer & Info Scie & Enginr; Division
   of Computing and Communication Foundations [1917924] Funding Source:
   National Science Foundation; Division of Computing and Communication
   Foundations; Direct For Computer & Info Scie & Enginr [2114627] Funding
   Source: National Science Foundation
FX We thank Shuo Ding, Benjamin Mikek, and the anonymous reviewers for
   their feedback on earlier drafts of this paper. Specifically, we would
   like to thank Leonid Ryzhyk for discussions on DDlog and for suggesting
   a better set of Datalog rules for Dyck-reachability. This work was
   supported, in part, by Amazon under an Amazon Research Award in
   automated reasoning; by the United States National Science Foundation
   (NSF) under grants No. 1917924 and No. 2114627; and by the Defense
   Advanced Research Projects Agency (DARPA) under grant N66001-21-C-4024.
   The first author was partially supported by the Facebook Graduate
   Fellowship. Any opinions, findings, and conclusions or recommendations
   expressed in this publication are those of the authors, and do not
   necessarily reflect the views of the above sponsoring entities.
CR Abboud A, 2014, ANN IEEE SYMP FOUND, P434, DOI 10.1109/FOCS.2014.53
   Acar UA, 2009, ACM T PROGR LANG SYS, V32, DOI 10.1145/1596527.1596530
   Acar UmutA., 2009, Proceedings of the 2009 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation, P1, DOI DOI 10.1145/1480945
   [Anonymous], 2004, P 36 ANN ACM S THEOR, DOI [10.1145/1007352.1007387, DOI 10.1145/1007352.1007387]
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Arzt S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P288, DOI 10.1145/2568225.2568243
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bravenboer Martin, 2009, P 24 ACM SIGPLAN C O, P243, DOI [DOI 10.1145/1640089.1640108, 10.1145/1640089.1640108]
   BURKE MG, 1990, IEEE T SOFTWARE ENG, V16, P723, DOI 10.1109/32.56098
   Carroll M. D., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P274, DOI 10.1145/73560.73584
   Chatterjee K, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158118
   Chaudhuri S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P159, DOI 10.1145/1328438.1328460
   Demetrescu C, 2000, ANN IEEE SYMP FOUND, P381, DOI 10.1109/SFCS.2000.892126
   Distefano D, 2019, COMMUN ACM, V62, P62, DOI 10.1145/3338112
   Eichberg M, 2007, LECT NOTES COMPUT SC, V4354, P109
   Frigioni D., 2001, ACM J. Exp. Algorithmics, V6, P9
   Hammer MA, 2015, ACM SIGPLAN NOTICES, V50, P748, DOI [10.1145/2814270.2814305, 10.1145/2858965.2814305]
   Hammer MA, 2014, ACM SIGPLAN NOTICES, V49, P156, DOI [10.1145/2594291.2594324, 10.1145/2666356.2594324]
   Henzinger M, 2015, ACM S THEORY COMPUT, P21, DOI 10.1145/2746539.2746609
   Kahlon V, 2009, IEEE S LOG, P27, DOI 10.1109/LICS.2009.45
   King V., 1999, Proceedings of the Thirty-First Annual ACM Symposium on Theory of Computing, P492, DOI 10.1145/301250.301380
   Kodumal J, 2004, ACM SIGPLAN NOTICES, V39, P207, DOI 10.1145/996893.996867
   Li YB, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P780, DOI 10.1145/3385412.3386021
   Liu BZ, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3293606
   Liu YA, 2005, ACM SIGPLAN NOTICES, V40, P473, DOI 10.1145/1103845.1094848
   Liu Yanhong A., 2003, ELECTRON NOTES THEOR, V90, P45, DOI [10.1016/S1571- 0661(03)00007-0, DOI 10.1016/S1571-0661(03)00007-0]
   Lu Y, 2013, LECT NOTES COMPUT SC, V7791, P61, DOI 10.1007/978-3-642-37051-9_4
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   Pacak A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428195
   Ramalingam G, 1996, THEOR COMPUT SCI, V158, P233, DOI 10.1016/0304-3975(95)00079-8
   Ramalingam G, 2000, ACM T PROGR LANG SYS, V22, P416, DOI 10.1145/349214.349241
   Ramalingam G., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P502, DOI 10.1145/158511.158710
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Reps T, 2000, ACM T PROGR LANG SYS, V22, P162, DOI 10.1145/345099.345137
   Reps Thomas W., 1993, ILPS, P163
   Roditty L, 2003, SIAM PROC S, P404
   RYDER BG, 1988, ACM T PROGR LANG SYS, V10, P1, DOI 10.1145/42192.42193
   Ryzhyk Leonid, 2019, Datalog
   Saha D, 2005, LECT NOTES COMPUT SC, V3668, P235, DOI 10.1007/11562931_19
   Saha D, 2006, LECT NOTES COMPUT SC, V4079, P56, DOI 10.1007/11799573_7
   Saha Diptikalyan, 2005, P 7 ACM SIGPLAN INT, P117, DOI DOI 10.1145/1069774.1069785
   Sankowski P, 2004, ANN IEEE SYMP FOUND, P509, DOI 10.1109/FOCS.2004.25
   Shankar A, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P310, DOI 10.1145/1250734.1250770
   Späth J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290361
   Sreedhar VC, 1997, ACM T PROGR LANG SYS, V19, P239, DOI 10.1145/244795.244799
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Szabó T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276509
   Szabó T, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1, DOI 10.1145/3453483.3454026
   Szabó T, 2016, IEEE INT CONF AUTOM, P320, DOI 10.1145/2970276.2970298
   Tang H, 2015, ACM SIGPLAN NOTICES, V50, P83, DOI [10.1145/2676726.2676997, 10.1145/2775051.2676997]
   TARJAN RE, 1975, J ACM, V22, P215, DOI 10.1145/321879.321884
   Xu GQ, 2009, LECT NOTES COMPUT SC, V5653, P98
   Yan Dacong, 2011, P 2011 INT S SOFTW T, P155, DOI [10.1145/2001420.2001440, DOI 10.1145/2001420.2001440]
   Yur J.-S., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P442, DOI 10.1109/ICSE.1999.841034
   Zhang Qirun, 2013, ACM SIGPLAN NOTICES, DOI 10.1145/ 2491956.2462159
NR 56
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 62
DI 10.1145/3498724
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900063
OA gold
DA 2024-07-18
ER

PT J
AU Emre, M
   Schroeder, R
   Dewey, K
   Hardekopf, B
AF Emre, Mehmet
   Schroeder, Ryan
   Dewey, Kyle
   Hardekopf, Ben
TI Translating C to Safer Rust
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Rust; C; Automatic Translation; Memory-Safety; Empirical Study
AB Rust is a relatively new programming language that targets efficient and safe systems-level applications. It includes a sophisticated type system that allows for provable memory- and thread-safety, and is explicitly designed to take the place of unsafe languages such as C and C++ in the coding ecosystem. There is a large existing C and C++ codebase (many of which have been affected by bugs and security vulnerabilities due to unsafety) that would benefit from being rewritten in Rust to remove an entire class of potential bugs. However, porting these applications to Rust manually is a daunting task.
   In this paper we investigate the problem of automatically translating C programs into safer Rust programs- that is, Rust programs that improve on the safety guarantees of the original C programs. We conduct an in-depth study into the underlying causes of unsafety in translated programs and the relative impact of fixing each cause. We also describe a novel technique for automatically removing a particular cause of unsafety and evaluate its effectiveness and impact. This paper presents the first empirical study of unsafety in translated Rust programs (as opposed to programs originally written in Rust) and also the first technique for automatically removing causes of unsafety in translated Rust programs.
C1 [Emre, Mehmet; Schroeder, Ryan; Hardekopf, Ben] Univ Calif Santa Barbara, Santa Barbara, CA 93106 USA.
   [Dewey, Kyle] Calif State Univ Northridge, Northridge, CA 91330 USA.
C3 University of California System; University of California Santa Barbara;
   California State University System; California State University
   Northridge
RP Emre, M (corresponding author), Univ Calif Santa Barbara, Santa Barbara, CA 93106 USA.
EM emre@cs.ucsb.edu; rschroeder@ucsb.edu; kyle.dewey@csun.edu;
   benh@cs.ucsb.edu
OI Hardekopf, Ben/0009-0008-1199-6129; Emre, Mehmet/0000-0001-8744-6459;
   Schroeder, Ryan/0009-0004-8940-5772; Dewey, Kyle/0000-0002-7998-3104
CR Andersen L. O., 1994, Technical Report
   [Anonymous], 2021, NVDCVE20213156
   [Anonymous], 2021, NVDCVE202121148
   Astrauskas V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428204
   Baranowski M, 2018, LECT NOTES COMPUT SC, V11138, P528, DOI 10.1007/978-3-030-01090-4_32
   Benitez S, 2016, PROCEEDINGS OF THE 2016 ACM WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS'16), P69, DOI 10.1145/2993600.2993604
   Boyapati C, 2003, ACM SIGPLAN NOTICES, V38, P324, DOI 10.1145/780822.781168
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Bryant David, 2016, QUANTUM LEAP WEB
   Cielecki Maciej., 2006, Proceedings of the 4th International Symposium on Principles and Practice of Programming in Java (PPPJ), P135, DOI 10.1145/1168054
   Citrus Developers, CITR CITR
   Durumeric Z, 2014, PROCEEDINGS OF THE 2014 ACM INTERNET MEASUREMENT CONFERENCE (IMC'14), P475, DOI 10.1145/2663716.2663755
   Emre Mehmet, 2021, SUPPLEMENTARY MAT LT
   Emre Mehmet, 2021, TRANSLATING C SAFER
   Emre Mehmet, 2021, Translating C to Safer Rust, DOI 10.5281/zenodo.5442253
   Evans Ana Nora, 2020, 2020 IEEE/ACM 42nd International Conference on Software Engineering (ICSE), P246
   Flanagan C., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P500
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Flanagan C, 2001, INFORM PROCESS LETT, V77, P97, DOI 10.1016/S0020-0190(00)00196-4
   Hutt Tim, 2021, WOULD RUST SECURE CU
   Immunant inc, 2020, C2RUST MAN EX
   Immunant inc, 2020, IMM C2RUST
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Klabnik S., 2018, The Rust Programming Language
   LEVESON NG, 1993, COMPUTER, V26, P18, DOI 10.1109/MC.1993.274940
   Levy Amit, 2015, P 8 WORKSH PROGR LAN, P21, DOI [DOI 10.1145/2818302, 10.1145/2818302.2818306, DOI 10.1145/2818302.2818306]
   Lin Y, 2016, ACM SIGPLAN NOTICES, V51, P89, DOI 10.1145/3241624.2926707
   McAllister Keegan, 2015, ARXIV150507383CS
   Qin BQ, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P763, DOI 10.1145/3385412.3386036
   Reed Eric, 2015, THESIS U WASHINGTON
   Sharp Jamey., 2020, JAMEYSHARP CORRODE
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   The Rust developers, RUST REF
   Vakilian M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P234, DOI 10.1109/ICSE.2015.44
   Vander Stoep Jeff, 2021, Rust in the Android platform
   Wang F, 2018, PROCEEDINGS 2018 12TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2018), P44, DOI 10.1109/TASE.2018.00014
   Weiss Aaron, OXIDE ESSENCE RUST, P27
NR 37
TC 9
Z9 12
U1 1
U2 11
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 121
DI 10.1145/3485498
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200025
OA gold
DA 2024-07-18
ER

PT J
AU Herklotz, Y
   Pollard, JD
   Ramanathan, N
   Wickerson, J
AF Herklotz, Yann
   Pollard, James D.
   Ramanathan, Nadesh
   Wickerson, John
TI Formal Verification of High-Level Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE CompCert; Coq; high-level synthesis; C; Verilog
ID COMPILER
AB High-level synthesis (HLS), which refers to the automatic compilation of software into hardware, is rapidly gaining popularity. In a world increasingly reliant on application-specific hardware accelerators, HLS promises hardware designs of comparable performance and energy efficiency to those coded by hand in a hardware description language such as Verilog, while maintaining the convenience and the rich ecosystem of software development. However, current HLS tools cannot always guarantee that the hardware designs they produce are equivalent to the software they were given, thus undermining any reasoning conducted at the software level. Furthermore, there is mounting evidence that existing HLS tools are quite unreliable, sometimes generating wrong hardware or crashing when given valid inputs.
   To address this problem, we present the first HLS tool that is mechanically verified to preserve the behaviour of its input software. Our tool, called Vericert, extends the CompCert verified C compiler with a new hardware-oriented intermediate language and a Verilog back end, and has been proven correct in Coq. Vericert supports most C constructs, including all integer operations, function calls, local arrays, structs, unions, and general control-flow statements. An evaluation on the PolyBench/C benchmark suite indicates that Vericert generates hardware that is around an order of magnitude slower (only around 2x slower in the absence of division) and about the same size as hardware generated by an existing, optimising (but unverified) HLS tool.
C1 [Herklotz, Yann; Pollard, James D.; Ramanathan, Nadesh; Wickerson, John] Imperial Coll London, London, England.
C3 Imperial College London
RP Herklotz, Y (corresponding author), Imperial Coll London, London, England.
EM yann.herklotz15@imperial.ac.uk; jamespollard@acm.org;
   n.ramanathan@ieee.org; j.wickerson@imperial.ac.uk
OI Pollard, James/0000-0003-1404-1527; Ramanathan,
   Nadesh/0000-0001-9083-8349; Herklotz, Yann/0000-0002-2329-1029;
   Wickerson, John/0000-0001-6735-5533
FU EPSRC via the Research Institute for Verified Trustworthy Software
   Systems (VeTSS); IRIS Programme Grant [EP/R006865/1]
FX We would like to thank Sandrine Blazy, Jianyi Cheng, Alastair Donaldson,
   Andreas Loow, and the anonymous reviewers for their helpful feedback.
   This work was financially supported by the EPSRC via the Research
   Institute for Verified Trustworthy Software Systems (VeTSS) and the IRIS
   Programme Grant (EP/R006865/1).
CR [Anonymous], 2005, 6222004 IEEE
   [Anonymous], 2006, IEEE Standard for Verilog Hardware Description Language, P1, DOI [DOI 10.1109/IEEESTD.2006.99495, DOI 10.1109/IEEESTD.2006.243731]
   [Anonymous], THESIS
   [Anonymous], 2013, P ACMSIGDA INT S FIE, DOI [DOI 10.1145/2435264.2435273, 10.1145/2435264.2435273]
   Aubury Matthew., 1996, Handel-c language reference guide
   Bachrach J, 2012, DES AUT CON, P1212
   Banerjee K, 2014, IEEE T COMPUT AID D, V33, P1180, DOI 10.1109/TCAD.2014.2314392
   Besson F, 2019, J AUTOM REASONING, V63, P369, DOI 10.1007/s10817-018-9496-y
   Blazy S, 2005, LECT NOTES COMPUT SC, V3785, P280
   Bourgeat T, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P243, DOI 10.1145/3385412.3385965
   Canis A, 2011, FPGA 11: PROCEEDINGS OF THE 2011 ACM/SIGDA INTERNATIONAL SYMPOSIUM ON FIELD PROGRAMMABLE GATE ARRAYS, P33
   Chapman R., 1992, Proceedings. The European Conference on Design Automation (Cat. No.92TH0414-3), P59, DOI 10.1109/EDAC.1992.205894
   Chauhan Pankaj, 2020, FORMALLY ENSURING EQ
   Choi YK, 2018, ICCAD-IEEE ACM INT, DOI 10.1145/3240765.3240815
   Chouksey R, 2020, IEEE T VLSI SYST, V28, P1638, DOI 10.1109/TVLSI.2020.2978242
   Chouksey R, 2019, IEEE T COMPUT AID D, V38, P1378, DOI 10.1109/TCAD.2018.2846654
   Clarke E., 2003, Proceedings 2003. Design Automation Conference (IEEE Cat. No.03CH37451), P368
   Cong J, 2011, IEEE T COMPUT AID D, V30, P473, DOI 10.1109/TCAD.2011.2110592
   Gajski D, 2010, DES AUT CON, P857
   Gauthier Stephane, 2020, HIGH LEVEL SYNTHESIS
   Greaves D, 2008, ANN IEEE SYM FIELD P, P3, DOI 10.1109/FCCM.2008.46
   Greaves David J., 2019, ARXIV190503746CSPL
   Herklotz Y, 2021, ANN IEEE SYM FIELD P, P219, DOI 10.1109/FCCM51124.2021.00034
   Herklotz Yann, 2021, YMHERKLOTZ VERICERT
   Homsirikamol Ekawat, 2014, 2014 International Conference on Reconfigurable Computing and FPGAs (ReConFig14), P1, DOI 10.1109/ReConFig.2014.7032504
   Hwang E, 1999, DESIGN, AUTOMATION AND TEST IN EUROPE CONFERENCE AND EXHIBITION 1999, PROCEEDINGS, P22, DOI 10.1109/DATE.1999.761092
   Intel, 2020, SDK OPENCL APPL
   Intel, 2020, HIGH LEVEL SYNTH COM
   Jourdan JH, 2012, LECT NOTES COMPUT SC, V7211, P397, DOI 10.1007/978-3-642-28869-2_20
   Karfa C, 2006, ISQED 2006: PROCEEDINGS OF THE 7TH INTERNATIONAL SYMPOSIUM ON QUALITY ELECTRONIC DESIGN, P71
   Kim Y, 2004, ISQED 2004: 5TH INTERNATIONAL SYMPOSIUM ON QUALITY ELECTRONIC DESIGN, PROCEEDINGS, P110
   Koeplinger D, 2018, ACM SIGPLAN NOTICES, V53, P296, DOI [10.1145/3296979.3192379, 10.1145/3192366.3192379]
   Kundu S, 2008, LECT NOTES COMPUT SC, V5123, P459
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Lidbury C, 2015, ACM SIGPLAN NOTICES, V50, P65, DOI [10.1145/2737924.2737986, 10.1145/2813885.2737986]
   Lööw A, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P46, DOI 10.1145/3437992.3439916
   Lööw A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1041, DOI 10.1145/3314221.3314622
   Lööw A, 2019, FME WORKS FORM, P99, DOI 10.1109/FormaliSE.2019.00020
   Mentor, 2020, CAT HIGH LEV SYNTH
   Meredith Patrick, 2010, 2010 8th IEEE/ACM International Conference on Formal Methods and Models for Codesign (MEMOCODE 2010), P179, DOI 10.1109/MEMCOD.2010.5558634
   Nigam R, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P393, DOI 10.1145/3385412.3385974
   Nikhil R, 2004, Second ACM and IEEE International Conference on Formal Methods and Models for Co-Design, Proceedings, P69
   Noronha DH, 2017, PROC INT CONF RECON
   Page Ian., 1991, FPGAs, Oxford Workshop on Field Programmable Logic and Applications, P271
   PAULIN PG, 1989, ACM IEEE D, P1, DOI 10.1145/74382.74383
   Pelcat M, 2016, PROCEEDINGS OF 2016 INTERNATIONAL CONFERENCE ON EMBEDDED COMPUTER SYSTEMS: ARCHITECTURES, MODELING AND SIMULATION (SAMOS), P140, DOI 10.1109/SAMOS.2016.7818341
   Perna J, 2012, SCI COMPUT PROGRAM, V77, P424, DOI 10.1016/j.scico.2010.02.007
   Perna J, 2011, ACTA INFORM, V48, P363, DOI 10.1007/s00236-011-0142-y
   Pilato C, 2013, I C FIELD PROG LOGIC
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Pouchet Louis-Noel, 2020, POLYBENCH C POLYHEDR
   Schuiki F, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P258, DOI 10.1145/3385412.3386024
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Six C, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428197
   Thomas DB, 2016, IEEE INT CONF ASAP, P91, DOI 10.1109/ASAP.2016.7760777
   Tristan JB, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P17, DOI 10.1145/1328438.1328444
   Venkataramani G, 2007, IEEE IC CAD, P442
   Wang YT, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428265
   Xilinx, 2020, VIV HIGH LEV SYNTH
   Xilinx, 2019, VIVADO DESIGN SUITE
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zhao JZ, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P427
   Zhao JR, 2017, ICCAD-IEEE ACM INT, P430, DOI 10.1109/ICCAD.2017.8203809
   Zuo W., 2013, 2013 International Conference on Hardware/Software Codesign and System Synthesis (CODES+ISSS), P1
NR 64
TC 7
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 117
DI 10.1145/3485494
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200021
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Ishimwe, D
   Nguyen, K
   Nguyen, T
AF Ishimwe, Didier
   KimHao Nguyen
   ThanhVu Nguyen
TI Dynaplex: Analyzing Program Complexity using Dynamically Inferred
   Recurrence Relations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE complexity analysis; program analysis; invariants; recurrence relations
AB Being able to detect program runtime complexity is useful in many tasks (e.g., checking expected performance and identifying potential security vulnerabilities). In this work, we introduce a new dynamic approach for inferring the asymptotic complexity bounds of recursive programs. From program execution traces, we learn recurrence relations and solve them using pattern matching to obtain closed-form solutions representing the complexity bounds of the program. This approach allows us to efficiently infer simple recurrence relations that represent nontrivial, potentially nonlinear polynomial and non-polynomial, complexity bounds.
   We present Dynaplex, a tool that implements these ideas to automatically generate recurrence relations from execution traces. Our preliminary results on popular and challenging recursive programs show that Dynaplex can learn precise relations capturing worst-case complexity bounds (e.g., O(n lg n) for mergesort, O(2(n)) for Tower of Hanoi and O(n(1.58)) for Karatsuba's multiplication algorithm).
C1 [Ishimwe, Didier; KimHao Nguyen] Univ Nebraska, Lincoln, NE 68588 USA.
   [ThanhVu Nguyen] George Mason Univ, Fairfax, VA 22030 USA.
C3 University of Nebraska System; University of Nebraska Lincoln; George
   Mason University
RP Ishimwe, D (corresponding author), Univ Nebraska, Lincoln, NE 68588 USA.
EM ishimwed@huskers.unl.edu; knguyen44@huskers.unl.edu; tvn@gmu.edu
OI Nguyen, KimHao/0000-0002-6599-2528; Nguyen, ThanhVu/0000-0002-4255-4592;
   Ishimwe, Didier/0000-0001-8470-3835
FU National Science Foundation [1948536, 2107035]; U.S. Army Research
   Office [W911NF-19-1-0054]; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [1948536] Funding
   Source: National Science Foundation; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [2107035] Funding Source: National Science Foundation
FX We thank the anonymous reviewers for helpful comments. This material is
   based in part upon work supported by the National Science Foundation
   under grant numbers 1948536, 2107035 and U.S. Army Research Office under
   grant number W911NF-19-1-0054.
CR Albert E, 2007, LECT NOTES COMPUT SC, V4421, P157
   Albert E, 2009, ELECTRON NOTES THEOR, V258, P109, DOI 10.1016/j.entcs.2009.12.008
   ALBERT E, 2008, INT STAT AN S
   [Anonymous], 2000, THESIS U WASHINGTON
   Ball Thomas, 2001, SPIN S MODEL CHECKIN
   BRECK J, 2020, P 41 ACM SIGPLAN C P
   Brockschmidt M, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2866575
   BURNIM J, 2009, 2009 IEEE 31 INT C S
   Chatterjee K, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3339984
   Cormen T. H., 2009, Introduction to Algorithms, VSecond
   Cutler JW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408979
   Das M, 2002, ACM SIGPLAN NOTICES, V37, P57, DOI 10.1145/543552.512538
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DEOLIVEIRA S, 2016, INT S AUT TECHN VER
   Drongowski P. J, 2007, ADV MICRODEVICES
   Eberl M, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P27, DOI 10.1145/3293880.3294090
   Erickson Jeff, 2013, SOLVING RECURRENCES
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Farzan A, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P57, DOI 10.1109/FMCAD.2015.7542253
   FLAJOLET P, 1991, THEOR COMPUT SCI, V79, P37, DOI 10.1016/0304-3975(91)90145-R
   Goldsmith Simon F., 2007, P 6 JOINT M EUR SOFT, P395, DOI 10.1145/1287624.1287681
   Graham Susan L, 1982, ACM SIGPLAN NOTICES, V17
   Grobauer B, 2001, ACM SIGPLAN NOTICES, V36, P253, DOI 10.1145/507669.507666
   GROSSMAN JW, 1988, THEOR COMPUT SCI, V57, P327, DOI 10.1016/0304-3975(88)90046-1
   Gulavani LS, 2008, LECT NOTES COMPUT SC, V5123, P370
   GULWANI S, 2009, COMPUTER AIDED VERIF
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Gulwani S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P375, DOI 10.1145/1542476.1542518
   Harris CR, 2020, NATURE, V585, P357, DOI 10.1038/s41586-020-2649-2
   Henzinger T.A., 2002, Principles of Programming Languages
   HOFFMANN J, 2010, EUR S PROGR
   Hoffmann J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P357, DOI 10.1145/1926385.1926427
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Ishimwe Didier, 2021, SOFTWARE ARTIFACT OO, DOI [10.5281/zenodo, DOI 10.5281/ZENODO]
   Jayaraman Anirudh, 2015, KARATSUBA MULTIPLICA
   KINCAID Z, 2019, P ACM PROGR LANG 3, V3
   Kincaid Z, 2017, ACM SIGPLAN NOTICES, V52, P248, DOI [10.1145/3062341.3062373, 10.1145/3140587.3062373]
   Le TC, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428257
   Le TC, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P788, DOI 10.1145/3314221.3314634
   Lemieux C, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P254, DOI 10.1145/3213846.3213874
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Nethercote Nicholas., 2003, Electronic Notes in Theoretical Computer Science, V89
   Ocaml.org, 2021, 99 PROBL OCAML
   PETSIOS T, 2017, P 2017 ACM SIGSAC C
   SINN M, 2014, INT C COMP AID VER
   Sinn M, 2017, J AUTOM REASONING, V59, P3, DOI 10.1007/s10817-016-9402-4
   Song LH, 2014, ACM SIGPLAN NOTICES, V49, P561, DOI [10.1145/2660193.2660234, 10.1145/2714064.2660234]
   Srikanth A, 2017, ACM SIGPLAN NOTICES, V52, P639, DOI 10.1145/3093333.3009864
   Termination Competitions, 2021, COMPL BENCHM
   ThanhVu Nguyen, 2020, SEAD 2020: Proceedings of the 3rd SIGSOFT International Workshop on Software Security from Design to Deployment, P11, DOI 10.1145/3416507.3423189
   Nguyen T, 2017, IEEE INT CONF AUTOM, P804
   Nguyen T, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P605, DOI 10.1145/3106237.3106281
   Nguyen T, 2012, PROC INT CONF SOFTW, P683, DOI 10.1109/ICSE.2012.6227149
   Wang D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290326
   Wang P, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133903
   Yao JN, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P106, DOI 10.1145/3385412.3385986
   Zaparanuks D, 2012, ACM SIGPLAN NOTICES, V47, P67, DOI 10.1145/2345156.2254074
NR 57
TC 3
Z9 4
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 138
DI 10.1145/3485515
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200041
OA gold
DA 2024-07-18
ER

PT J
AU Moreira, AA
   Ottoni, G
   Pereira, FMQ
AF Moreira, Angelica Aparecida
   Ottoni, Guilherme
   Quintao Pereira, Fernando Magno
TI VESPA: Static Profiling for Binary Optimization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Compiler; Optimization; Profiling; Prediction
ID JIT
AB Over the past few years, there has been a surge in the popularity of binary optimizers such as BOLT, Propeller, Janus and HALO. These tools use dynamic profiling information to make optimization decisions. Although effective, gathering runtime data presents developers with inconveniences such as unrepresentative inputs, the need to accommodate software modifications, and longer build times. In this paper, we revisit the static profiling technique proposed by Calder et al. in the late 90's, and investigate its application to drive binary optimizations, in the context of the BOLT binary optimizer, as a replacement for dynamic profiling. A few core modifications to Calder et al.'s original proposal, consisting of new program features and a new regression model, are sufficient to enable some of the gains obtained through runtime profiling. An evaluation of BOLT powered by our static profiler on four large benchmarks (clang, GCC, MySQL and PostgreSQL) yields binaries that are 5.47% faster than the executables produced by clang -O3.
C1 [Moreira, Angelica Aparecida; Quintao Pereira, Fernando Magno] Univ Fed Minas Gerais, Comp Sci, Belo Horizonte, MG, Brazil.
   [Ottoni, Guilherme] Facebook Inc, Menlo Pk, CA USA.
C3 Universidade Federal de Minas Gerais; Facebook Inc
RP Moreira, AA (corresponding author), Univ Fed Minas Gerais, Comp Sci, Belo Horizonte, MG, Brazil.
EM angelica.moreira@dcc.ufmg.br; ottoni@fb.com; fernando@dcc.ufmg.br
RI Pereira, Fernando/HNR-7786-2023
OI Quintao Pereira, Fernando Magno/0000-0002-0375-1657; Moreira,
   Angelica/0000-0001-5256-2054
FU CAPES; CNPq [406377/2018-9]; FAPEMIG [PPM-00333-18]; Facebook; CAPES
   (Edital CAPES PrInt)
FX The bulk of this work was developed by Angelica while visiting Facebook.
   During part of her PhD, Angelica was supported by scholarships from
   Facebook and CAPES. Fernando Pereira has been supported by CNPq (Grant
   406377/2018-9); FAPEMIG (Grant PPM-00333-18) and CAPES (Edital CAPES
   PrInt). We thank Antony Courtney, Maksim Panchenko, Rafael Auler,
   Shaunak Kishore and other Facebook engineers for fruitful discussions.
   We thank Jose Wesley Magalhaes, Luigi Soares, Vinicius Pacheco, Victor
   Campos and Andrei Alvares for reading a draft of this paper. Finally, we
   thank the OOPSLA reviewers for many comments and suggestions that
   greatly improved the final version of this work.
CR Alvares AR, 2021, J COMPUT LANG, V66, DOI 10.1016/j.cola.2021.101062
   Apicella A, 2021, NEURAL NETWORKS, V138, P14, DOI 10.1016/j.neunet.2021.01.026
   BALL T, 1993, SIGPLAN NOTICES, V28, P300, DOI 10.1145/173262.155119
   Bandyopadhyay S., 1987, Digest of Papers. COMPCON Spring '87. Thirty-Second IEEE Computer Society International Conference. Intellectual Leverage (Cat. No.87CH2409-1), P96
   Calder B, 1997, ACM T PROGR LANG SYS, V19, P188, DOI 10.1145/239912.239923
   Chen DH, 2016, INT SYM CODE GENER, P12, DOI 10.1145/2854038.2854044
   DEMPSTER AP, 1967, ANN MATH STAT, V38, P325, DOI 10.1214/aoms/1177698950
   Desmet V, 2005, LECT NOTES COMPUT SC, V3740, P336
   Fisher Joseph A., 1992, ASPLOS, p85s95, DOI [10.1145/143365, DOI 10.1145/143365]
   Hennessy John L, 2011, Computer Architecture: A Quantitative Approach
   HOLZLE U, 1994, SIGPLAN NOTICES, V29, P326
   Kalla B, 2017, IEEE INT C CL COMP, P651, DOI 10.1109/CLUSTER.2017.29
   Laurent C, 2016, INT CONF ACOUST SPEE, P2657, DOI 10.1109/ICASSP.2016.7472159
   Li XLD, 2010, INT SYM CODE GENER, P53
   Mao YH, 2018, IEEE ACCESS, V6, P10779, DOI 10.1109/ACCESS.2017.2772334
   Namolaru M, 2010, PROCEEDINGS OF THE 2010 INTERNATIONAL CONFERENCE ON COMPILERS, ARCHITECTURES AND SYNTHESIS FOR EMBEDDED SYSTEMS (CASES '10), P197, DOI 10.1145/1878921.1878951
   Ottoni G, 2018, ACM SIGPLAN NOTICES, V53, P151, DOI [10.1145/3192366.3192374, 10.1145/3296979.3192374]
   Ottoni G, 2017, INT SYM CODE GENER, P233, DOI 10.1109/CGO.2017.7863743
   Panchenko Maksim, 2021, CC 2021: Proceedings of the 30th ACM SIGPLAN International Conference on Compiler Construction, P119, DOI 10.1145/3446804.3446843
   Panchenko M, 2019, INT SYM CODE GENER, P2, DOI [10.5281/zenodo.2542117, 10.1109/CGO.2019.8661201]
   Panchenko Maksim., 2018, OPTIMIZING CLANG PRA
   Preuss Adam., 2010, IMPLEMENTATION PATH, DOI [10.7939/R3GF0MX64, DOI 10.7939/R3GF0MX64]
   Pereira FMQ, 2019, ACM T ARCHIT CODE OP, V15, DOI 10.1145/3280848
   RICE HG, 1953, T AM MATH SOC, V74, P358, DOI 10.2307/1990888
   Rimsa A, 2021, SOFTWARE PRACT EXPER, V51, P353, DOI 10.1002/spe.2907
   Rimsa A, 2019, XXIII BRAZILIAN SYMPOSIUM ON PROGRAMMING LANGUAGES, P19, DOI 10.1145/3355378.3355383
   Smith J. E., 1981, 8th Annual Symposium on Computer Architecture, P135
   Tallam Sriraman, 2019, PROFILE GUIDED OPTIM
   Tarsa Stephen J., 2019, ABS190609889 CORR, P1
   Wade AW, 2017, ACM SIGPLAN NOTICES, V52, P1, DOI [10.1145/3078633.3081037, 10.1145/3140582.3081037]
   Wang Z, 2018, P IEEE, V106, P1879, DOI 10.1109/JPROC.2018.2817118
   Youfeng Wu, 1994, Proceedings of the 27th Annual International Symposium on Microarchitecture. MICRO 27, P1, DOI 10.1109/MICRO.1994.717399
NR 32
TC 7
Z9 8
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 144
DI 10.1145/3485521
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200047
OA gold
DA 2024-07-18
ER

PT J
AU Xu, HR
   Kjolstad, F
AF Xu, Haoran
   Kjolstad, Fredrik
TI Copy-and-Patch Compilation A Fast Compilation Algorithm for High-Level
   Languages and Bytecode
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Fast Compilation; Binary Code Variant Library; Binary Code Patching
AB Fast compilation is important when compilation occurs at runtime, such as query compilers in modern database systems and WebAssembly virtual machines in modern browsers. We present copy-and-patch, an extremely fast compilation technique that also produces good quality code. It is capable of lowering both high-level languages and low-level bytecode programs to binary code, by stitching together code from a large library of binary implementation variants. We call these binary implementations stencils because they have holes where missing values must be inserted during code generation. We show how to construct a stencil library and describe the copy-and-patch algorithm that generates optimized binary code.
   We demonstrate two use cases of copy-and-patch: a compiler for a high-level C-like language intended for metaprogramming and a compiler for WebAssembly. Our high-level language compiler has negligible compilation cost: it produces code from an AST in less time than it takes to construct the AST. We have implemented an SQL database query compiler on top of this metaprogramming system and show that on TPC-H database benchmarks, copy-and-patch generates code two orders of magnitude faster than LLVM -O0 and three orders of magnitude faster than higher optimization levels. The generated code runs an order of magnitude faster than interpretation and 14% faster than LLVM -O0. Our WebAssembly compiler generates code 4.9x-6.5x faster than Liftoff, the WebAssembly baseline compiler in Google Chrome. The generated code also outperforms Liftoff's by 39%-63% on the Coremark and PolyBenchC WebAssembly benchmarks.
C1 [Xu, Haoran; Kjolstad, Fredrik] Stanford Univ, 353 Jane Stanford Way, Stanford, CA 94305 USA.
C3 Stanford University
RP Xu, HR (corresponding author), Stanford Univ, 353 Jane Stanford Way, Stanford, CA 94305 USA.
EM haoranxu@stanford.edu; kjolstad@cs.stanford.edu
RI xu, haodong/IAM-9132-2023; Xu, Hao Ran/JED-9378-2023; xu,
   hao/GWQ-7394-2022
OI Kjolstad, Fredrik Berg/0000-0002-2267-903X
FU Stanford Agile Hardware Center
FX We thank our anonymous reviewers for their comments that helped us
   improve this manuscript. We would also like to thank Alex Aiken, Saman
   Amarasinghe, Saam Barati, Ajay Brahmakshatriya, Cheng Chen, Stephen
   Chou, David Durst, Slava Egorov, Lang Hames, Pat Hanrahan, Scott Kovach,
   Richard Peng, Zhou Sun, Leszek Swirski, and Yinzhan Xu for helpful
   comments, review, and references. This work was supported by the
   Stanford Agile Hardware Center.
CR Akbary Syrus, 2018, WASMER CRANELIFT BAC
   Akbary Syrus, 2018, WASMER LEADINGWEBASS
   [Anonymous], 2002, THESIS U ILLINOIS UR
   AutoCAD, 2018, AUTOCAD WEB APP
   Backes Clemens, 2018, Liftoff a new baseline compiler for WebAssembly in V8
   Bastien JF, 2017, ASSEMBLING WEB ASSEM
   BELL JR, 1973, COMMUN ACM, V16, P370, DOI 10.1145/362248.362270
   Bellard F, 2005, USENIX Association Proceedings of the FREENIX/Open Source Track, P41
   Bezanson J, 2017, SIAM REV, V59, P65, DOI 10.1137/141000671
   Bytecode Alliance, 2018, CRANELIFT CODE GENER
   Casey K, 2003, LECT NOTES COMPUT SC, V2826, P329
   Clark Lin, 2018, MAKING WEBASSEMBLY E
   Consel Charles, 1998, COMPUT SURV, V30, P5
   DeVito Z, 2014, ACM SIGPLAN NOTICES, V49, P77, DOI [10.1145/2594291.2594307, 10.1145/2666356.2594307]
   DeVito Z, 2013, ACM SIGPLAN NOTICES, V48, P105, DOI 10.1145/2499370.2462166
   EEMBC, 2009, COREMARK BENCHM
   ENGLER DR, 1994, SIGPLAN NOTICES, V29, P263, DOI 10.1145/195470.195567
   Engler DR, 1996, ACM SIGPLAN NOTICES, V31, P160, DOI 10.1145/249069.231411
   Ertl Martin Anton, 2003, P EUROFORTH 2003, P9
   Finkel Hal, 2019, 2019 IEEE/ACM International Workshop on Performance, Portability and Productivity in HPC (P3HPC), P82, DOI 10.1109/P3HPC49587.2019.00013
   Fontaine Dimitri, 2018, POSTGRESQL 11 JUST T
   Frigo M, 1998, INT CONF ACOUST SPEE, P1381, DOI 10.1109/ICASSP.1998.681704
   GHC and LLVM, 2020, LLVM DOC GHC CALL CO
   Gohman Dan, 2018, WASMTIME CRANELIFT C
   Gohman Dan, 2018, WASMTIME SMALL EFFIC
   Gohman Dan, 2018, INTRO LIGHTBEAM OPTI
   Google, 2019, WEBASSEMBLY COMP PIP
   GRIES D, 1978, COMMUN ACM, V21, P999, DOI 10.1145/359657.359660
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   IBM Knowledge Center, 2020, DIS JAV JIT COMP
   Iliasov A, 2003, ACM SIGPLAN NOTICES, V38, P37, DOI 10.1145/944579.944588
   Kjolstad F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133901
   Kobalicek P., 2018, AsmJit Project: Machine Code Generation for C++
   Kost Marcel, 2018, PELOTONDB INTERPRETE
   Lewycky Nick, 2018, WASMER LLVM BACKEND
   LinuxBase, 1998, ARM ELF REL TYP
   Matz Michael, 2020, SYSTEM APPL BINARY I
   MemSQL, 2020, MEMSQL QUER COD GEN
   MemSQL, 2020, MEMSQL DATABASE
   Menon P, 2017, PROC VLDB ENDOW, V11, P1, DOI 10.14778/3136610.3136611
   Neumann T, 2011, PROC VLDB ENDOW, V4, P539, DOI 10.14778/2002938.2002940
   Newland Chris, 2020, JITWATCH S LOG AN VI
   Noel F, 1998, 1998 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, PROCEEDINGS, P132, DOI 10.1109/ICCL.1998.674164
   Oracle, 2020, 64BIT SPARC RELOCATI
   Oracle, 2020, JAVA HOTSPOT PERFORM
   Pall Mike, 1999, LUAJIT DYNASM
   Pavlo A., 2017, CIDR
   Pavlo Andrew, 2021, DATABASE DATABASES
   Piumarta I, 1998, ACM SIGPLAN NOTICES, V33, P291, DOI 10.1145/277652.277743
   PostgresSQL, 2020, POSTGR DOC WHY JIT
   Proebsting T. A., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P322, DOI 10.1145/199448.199526
   Ragan-Kelley J, 2012, ACM T GRAPHIC, V31, DOI 10.1145/2185520.2185528
   Scheidecker Andrew, 2020, WEBASSEMBLY VIRTUAL
   SETHI R, 1970, J ACM, V17, P715, DOI 10.1145/321607.321620
   Smith Ben, 2018, CLANG WEBASSEMBLY
   Steele G.L., 1977, Proceedings of the 1977 Annual ACM Conference, P153
   Thibault Scott, 2000, HIGHER ORDER SYMBOLI, V13
   TPC, 2020, TPCH
   W3C Community Group, 2017, WEBASSEMBLY 1 0 COR
   Wikipedia, 2021, SIMPL SETH ULLM ALG
   Wimmer C, 2013, ACM T ARCHIT CODE OP, V9, DOI 10.1145/2400682.2400689
   Wingo Andy, 2020, FIREFOXS LOW LATENCY
   Yuki Tomofumi, 2011, POLYBENCHC BENCHMARK
   Zhou Heyang, 2018, WASMER SINGLEPASS BA
NR 64
TC 3
Z9 4
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 136
DI 10.1145/3485513
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200039
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Accattoli, B
   Dal Lago, U
   Vanoni, G
AF Accattoli, Beniamino
   Dal Lago, Ugo
   Vanoni, Gabriele
TI The (In)Efficiency of Interaction
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE lambda-calculus; abstract machines; geometry of interaction
ID FULL ABSTRACTION
AB Evaluating higher-order functional programs through abstract machines inspired by the geometry of the interaction is known to induce space efficiencies, the price being time performances often poorer than those obtainable with traditional, environment-based, abstract machines. Although families of lambda-terms for which the former is exponentially less efficient than the latter do exist, it is currently unknown how general this phenomenon is, and how far the inefficiencies can go, in the worst case. We answer these questions formulating four different well-known abstract machines inside a common definitional framework, this way being able to give sharp results about the relative time efficiencies. We also prove that non-idempotent intersection type theories are able to precisely reflect the time performances of the interactive abstract machine, this way showing that its time-inefficiency ultimately descends from the presence of higher-order types.
C1 [Accattoli, Beniamino] Ecole Polytech, INRIA, LIX, UMR 7161, Paris, France.
   [Accattoli, Beniamino] Ecole Polytech, LIX, UMR 7161, Paris, France.
   [Dal Lago, Ugo; Vanoni, Gabriele] Univ Bologna, Bologna, Italy.
   [Dal Lago, Ugo; Vanoni, Gabriele] Inria Sophia Anlipolis, Biot, France.
C3 Inria; University of Bologna
RP Accattoli, B (corresponding author), Ecole Polytech, INRIA, LIX, UMR 7161, Paris, France.; Accattoli, B (corresponding author), Ecole Polytech, LIX, UMR 7161, Paris, France.
EM beniamino.accattoli@inria.fr; ugo.dallago@unibo.it;
   gabriele.vanoni2@unibo.it
RI Dal Lago, Ugo/K-9621-2015
OI Dal Lago, Ugo/0000-0001-9200-070X; Vanoni, Gabriele/0000-0001-8762-8674
FU ERC CoG lDIAPASoNz [GA 818616]; ANR JCJC grant lCOCA HOLAz
   [ANR-16-CE40-004-01]
FX The second author is funded by the ERC CoG lDIAPASoNz (GA 818616). This
   work has been partially funded by the ANR JCJC grant lCOCA HOLAz
   (ANR-16-CE40-004-01).
CR Abramsky S, 2000, INFORM COMPUT, V163, P409, DOI [10.1006/inco.2000.2930, 10.1006/inco2000.2930]
   Accattoli B, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S095679682000012X
   Accattoli B, 2019, PROCEEDINGS OF THE 21ST INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2019), DOI 10.1145/3354166.3354169
   Accattoli B, 2019, SCI COMPUT PROGRAM, V184, DOI 10.1016/j.scico.2019.03.002
   Accattoli B, 2019, LECT NOTES COMPUT SC, V11423, P410
   Accattoli B, 2018, LECT NOTES COMPUT SC, V11275, P45, DOI 10.1007/978-3-030-02768-1_3
   Accattoli B, 2018, ELECTRON NOTES THEOR, V338, P23, DOI 10.1016/j.entcs.2018.10.003
   Accattoli B, 2017, PROCEEDINGS OF THE 19TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2017), P4, DOI 10.1145/3131851.3131855
   Accattoli B, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P363, DOI 10.1145/2628136.2628154
   Accattoli B, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(1:4)2016
   Accattoli Beniamino, 2020, EFFICIENCY INTERACTI
   Accattoli Beniamino, 2012, LIPICS, V22s37, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Accattoli Beniamino, 2020, PPDP 20, V4, DOI [10.1145/3414080.3414108, DOI 10.1145/3414080.3414108]
   [Anonymous], 1984, The Lambda Calculus: Its Syntax and Semantics
   Aschieri F, 2017, J SYMBOLIC LOGIC, V82, P672, DOI 10.1017/jsl.2016.48
   Asperti A., 1994, Proceedings Symposium on Logic in Computer Science LICS '94 (Cat. No.94CH3464-5), P426, DOI 10.1109/LICS.1994.316048
   Baillot P, 2011, INFORM COMPUT, V209, P118, DOI 10.1016/j.ic.2010.10.002
   Baillot Patrick., 1999, THESIS THESIS U AIX
   Belloch G., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P226, DOI 10.1145/224164.224210
   Berezun Daniil, 2017, P 2017 ACM SIGPLAN W, p1S11
   Bernadet A, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:3)2013
   Blum W, 2020, THEOR COMPUT SCI, V802, P77, DOI 10.1016/j.tcs.2019.08.035
   Bucciarelli A, 2017, LOG J IGPL, V25, P431, DOI 10.1093/jigpal/jzx018
   Bucciarelli Antonio, 2020, Lecture Notes in Computer Science, V12073, P13, DOI [DOI 10.1007/978-3-030-59025, 10.1007/978-3-030-59025-3_2]
   Clairambault P, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(2:6)2015
   Clairambault Pierre, 2011, LECT NOTES COMPUTER, V6604
   Coppo M., 1980, Notre Dame Journal of Formal Logic, V21, P685, DOI 10.1305/ndjfl/1093883253
   Coppo M., 1978, Archiv fur Mathematische Logik und Grundlagenforschung, V19, P139, DOI 10.1007/BF02011875
   Curien P.-L., 1998, Third Fuji International Symposium on Functional and Logic Programming (FLOPS'98), P20
   Curien Pierre-Louis, 2007, ABSTRACT MACHINES DI
   Dal Lago U, 2017, P 32 ANN ACM IEEE S, P1
   Dal Lago U, 2015, ELECTRON PROC THEOR, P64, DOI 10.4204/EPTCS.176.6
   Dal Lago U, 2016, INFORM COMPUT, V248, P150, DOI 10.1016/j.ic.2015.04.006
   Dal Lago U, 2015, IEEE S LOG, P559, DOI 10.1109/LICS.2015.58
   Dal Lago Ugo, 2010, LECT NOTES COMPUTER, V6012, DOI [10.1007/978-3-642-11957-6, DOI 10.1007/978-3-642-11957-6]
   Dal Lago Ugo, 2014, JOINT M 23 EACSL ANN, V35, P1
   Danos V, 1999, THEOR COMPUT SCI, V227, P79, DOI 10.1016/S0304-3975(99)00049-3
   Danos V., 1996, Proceedings. 11th Annual IEEE Symposium on Logic in Computer Science (Cat. No.96CH35952), P394, DOI 10.1109/LICS.1996.561456
   Danos V., 1995, LONDON MATH SOC LECT
   Danos Vincent, 2004, Technical report
   Danos Vincent, 1993, P 8 ANN S LOG COMP S, DOI [10.1109/LICS.1993.287578, DOI 10.1109/LICS.1993.287578]
   de Carvalho D, 2011, THEOR COMPUT SCI, V412, P1884, DOI 10.1016/j.tcs.2010.12.017
   de Carvalho D., 2007, Semantiques de la logique lineaire et temps de calcul
   De Carvalho D, 2018, MATH STRUCT COMP SCI, V28, P1169, DOI 10.1017/S0960129516000396
   Fernández M, 2002, LECT NOTES COMPUT SC, V2505, P75
   Gardner Philippa., 1994, THEORETICAL ASPECTS, V789, DOI [10.1007/3-540-57887-0_115, DOI 10.1007/3-540-57887-0_115]
   Ghica Dan R., 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P363, DOI 10.1145/1190216.1190269
   Ghica DR, 2010, ELECTRON NOTES THEOR, V265, P301, DOI 10.1016/j.entcs.2010.08.018
   Girard Jean-Yves, 1989, STUDIES LOGIC FDN MA, V127
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Hoshino Naohiko, 2014, JOINT M 23 EACSL ANN, V52, p1S52
   Hyland JME, 2000, INFORM COMPUT, V163, P285, DOI [10.1006/inco.2000.2917, 10.1006/inco2000.2917]
   Kesner D, 2020, IEEE S LOG, P619, DOI 10.1145/3373718.3394774
   Kfoury AJ, 2000, J LOGIC COMPUT, V10, P411, DOI 10.1093/logcom/10.3.411
   Krishnaswami NR, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P45
   Krivine Jean-Louis, 2007, Higher-Order and Symbolic Computation, V20, P199, DOI 10.1007/S10990-007-9018-9
   Krivine J.L., 1993, LAMBDA CALCULUS TYPE
   Laurent Olivier, 2001, P LECT NOTES COMPUTE, V2044, DOI [10.1007/3-540-45413-6_23, DOI 10.1007/3-540-45413-6_23]
   Levy Jean-Jacques, 1978, THESIS U PARIS 7, V7
   Mackie Ian, 2017, Logic, Language, Information, and Computation. 24th International Workshop, WoLLIC 2017. Proceedings: LNCS 10388, P229, DOI 10.1007/978-3-662-55386-2_16
   Mackie I., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P198, DOI 10.1145/199448.199483
   Mazza D., 2015, LIPICS, P24, DOI DOI 10.4230/LIPICS.CSL.2015.24
   Mazza D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158094
   Mazza Damiano, 2015, LECT NOTES COMPUTER, V9135
   Milner R., 1977, Theoretical Computer Science, V4, P1, DOI 10.1016/0304-3975(77)90053-6
   MOLLER NEERGAARD P., 2004, P 9 ACM SIGPLAN INT, P138, DOI DOI 10.1145/1016850.1016871
   Muroya K, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(4:7)2019
   Muroya Koko, 2017, LIPICS, V32
   Ong CHL, 2006, IEEE S LOG, P81, DOI 10.1109/LICS.2006.38
   Pedicini M, 2007, ACM T COMPUT LOG, V8, DOI 10.1145/1243996.1243997
   Pinto Jorge Sousa, 2001, LNCS, V2044, DOI [10.1007/3-540-45413-6_30, DOI 10.1007/3-540-45413-6_30]
   Pottinger Garrel, 1980, ESSAYS COMBINATORY L, P561
   Sands D, 2002, LECT NOTES COMPUT SC, V2566, P60
   Schöpp U, 2007, IEEE S LOG, P411, DOI 10.1109/LICS.2007.45
   Schöpp U, 2015, LECT NOTES COMPUT SC, V9458, P251, DOI 10.1007/978-3-319-26529-2_14
   Schöpp U, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:10)2014
   Tsukada T, 2017, IEEE S LOG
   Venneri Betti, 1980, HB CURRY ESSAYS COMB
NR 78
TC 5
Z9 5
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 51
DI 10.1145/3434332
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100051
OA gold, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Georges, AL
   Guéneau, A
   Van Strydonck, T
   Timany, A
   Trieu, A
   Huyghebaert, S
   Devriese, D
   Birkedal, L
AF Georges, Aina Linn
   Gueneau, Armael
   Van Strydonck, Thomas
   Timany, Amin
   Trieu, Alix
   Huyghebaert, Sander
   Devriese, Dominique
   Birkedal, Lars
TI Efficient and Provable Local Capability Revocation using Uninitialized
   Capabilities
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE capability machines; local capabilities; uninitialized capabilities;
   capability safety; universal contracts; program logic; capability
   revocation; CHERI
ID STATE
AB Capability machines are a special form of CPUs that offer fine-grained privilege separation using a form of authority-carrying values known as capabilities. The CHERI capability machine offers local capabilities, which could be used as a cheap but restricted form of capability revocation. Unfortunately, local capability revocation is unrealistic in practice because large amounts of stack memory need to be cleared as a security precaution.
   In this paper, we address this shortcoming by introducing uninitialized capabilities: a new form of capabilities that represent read/write authority to a block of memory without exposing the memory's initial contents. We provide a mechanically verified program logic for reasoning about programs on a capability machine with the new feature and we formalize and prove capability safety in the form of a universal contract for untrusted code. We use uninitialized capabilities for making a previously-proposed secure calling convention efficient and prove its security using the program logic. Finally, we report on a proof-of-concept implementation of uninitialized capabilities on the CHERI capability machine.
C1 [Georges, Aina Linn; Gueneau, Armael; Timany, Amin; Trieu, Alix; Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
   [Van Strydonck, Thomas] Katholieke Univ Leuven, Leuven, Belgium.
   [Huyghebaert, Sander; Devriese, Dominique] Vrije Univ Brussel, Brussels, Belgium.
C3 Aarhus University; KU Leuven; Vrije Universiteit Brussel
RP Georges, AL (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM ageorges@cs.au.dk; armael@cs.au.dk; thomas.vanstrydonck@cs.kuleuven.be;
   timany@cs.au.dk; alix.trieu@cs.au.dk; sander.huyghebaert@vub.be;
   dominique.devriese@vub.be; birkedal@cs.au.dk
RI Devriese, Dominique/C-5493-2014
OI Devriese, Dominique/0000-0002-3862-6856; Timany,
   Amin/0000-0002-2237-851X; Trieu, Alix/0000-0002-8239-8125; Huyghebaert,
   Sander/0000-0002-2878-7429; Georges, Aina Linn/0000-0002-5951-4642;
   Birkedal, Lars/0000-0003-1320-0098
FU Villum Investigator grant, Center for Basic Research in Program
   Verification (CPV), from the VILLUM Foundation [25804]; Research
   Foundation - Flanders (FWO) [G0G0519N]; Danish Council for Independent
   Research for the Natural Sciences (FNU) [6108-00363]; Research
   Foundation - Flanders (FWO)
FX We thank the anonymous reviewers for valuable comments and suggestions.
   This work was supported in part by a Villum Investigator grant (no.
   25804), Center for Basic Research in Program Verification (CPV), from
   the VILLUM Foundation; by the Research Foundation -Flanders (FWO) under
   grant number G0G0519N; and by DFF project 6108-00363 from The Danish
   Council for Independent Research for the Natural Sciences (FNU). Thomas
   Van Strydonck holds a Research Fellowship of the Research Foundation
   -Flanders (FWO). Amin Timany was a postdoctoral fellow of the Flemish
   research fund (FWO) during parts of this project.
CR Ahmed A, 2009, ACM SIGPLAN NOTICES, V44, P340, DOI 10.1145/1594834.1480925
   Ahmed Amal J., 2004, Ph. D. Dissertation
   [Anonymous], 1984, Capability-Based Computer Systems
   Armstrong A., 2013, SAIL INSTRUCTION SET
   Birkedal L, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1926385.1926401
   Birkedal Lars, 2017, Lecture Notes on Iris: Higher-Order Concurrent Separation Log
   Cai HX, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P66, DOI 10.1145/1250734.1250743
   CARTER NP, 1994, INT C ARCH SUPP PROG
   Chisnall D, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P569, DOI 10.1145/3037697.3037725
   Chlipala A, 2011, ACM SIGPLAN NOTICES, V46, P234, DOI 10.1145/1993316.1993526
   DENNIS JB, 1966, COMMUN ACM, V9, P143, DOI 10.1145/365230.365252
   Devriese D, 2016, 1ST IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY, P147, DOI 10.1109/EuroSP.2016.22
   Dreyer D, 2010, ACM SIGPLAN NOTICES, V45, P143, DOI 10.1145/1932681.1863566
   Drossopoulou S, 2020, LECT NOTES COMPUT SC, V12076, P420, DOI 10.1007/978-3-030-45234-6_21
   El-Korashy Akram, 2016, THESIS SAARLAND U
   Filardo NW, 2020, P IEEE S SECUR PRIV, P608, DOI 10.1109/SP40000.2020.00098
   Huyghebaert, 2020, THESIS VRIJE U BRUSS, DOI [10.5281/zenodo.4073111, DOI 10.5281/ZENODO.4073111]
   Jensen JB, 2013, ACM SIGPLAN NOTICES, V48, P301, DOI 10.1145/2480359.2429105
   Joannou A, 2017, PR IEEE COMP DESIGN, P641, DOI 10.1109/ICCD.2017.112
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Krebbers, 2020, P ACM PROGR LANG ICF
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krebbers Robbert, 2018, PACMPL 2 ICFP, V77, p1s77:30, DOI [10.1145/3236772, DOI 10.1145/3236772]
   MAFFEIS S, 2010, 31 IEEE S SEC PRIV S
   Miller M. S., 2006, Ph.D. Dissertation
   Myreen MO, 2007, LECT NOTES COMPUT SC, V4424, P568
   Ni ZZ, 2006, ACM SIGPLAN NOTICES, V41, P320, DOI 10.1145/1111320.1111066
   Nienhuis K, 2020, P IEEE S SECUR PRIV, P1003, DOI 10.1109/SP40000.2020.00055
   Skorstengaard, 2019, THESIS AARHUS U
   Skorstengaard L., 2018, PROGRAMMING LANGUAGE, P475
   Skorstengaard L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290332
   Skorstengaard L, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3363519
   Swasey D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133913
   Timany A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341709
   Timany A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158152
   Van Strydonck T, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341688
   Watson R. N. M., 2019, Capability Hardware Enhanced RISC In- structions: CHERI Instruction-Set Architecture (Version 7). Technical Report UCAM-CL-TR-927
   Watson RNM, 2016, IEEE MICRO, V36, P38, DOI 10.1109/MM.2016.84
   Watson RNM, 2015, P IEEE S SECUR PRIV, P20, DOI 10.1109/SP.2015.9
   Woodruff J, 2019, IEEE T COMPUT, V68, P1455, DOI 10.1109/TC.2019.2914037
   Xia HY, 2019, MICRO'52: THE 52ND ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, P545, DOI 10.1145/3352460.3358288
NR 44
TC 16
Z9 16
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 6
DI 10.1145/3434287
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100006
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Mazza, D
   Pagani, M
AF Mazza, Damiano
   Pagani, Michele
TI Automatic Differentiation in PCF
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Differentiable Programming; Lambda-Calculus; Linear Logic
AB We study the correctness of automatic differentiation (AD) in the context of a higher-order, Turing-complete language (PCF with real numbers), both in forward and reverse mode. Our main result is that, under mild hypotheses on the primitive functions included in the language, AD is almost everywhere correct, that is, it computes the derivative or gradient of the program under consideration except for a set of Lebesgue measure zero. Stated otherwise, there are inputs on which AD is incorrect, but the probability of randomly choosing one such input is zero. Our result is in fact more precise, in that the set of failure points admits a more explicit description: for example, in case the primitive functions are just constants, addition and multiplication, the set of points where AD fails is contained in a countable union of zero sets of polynomials.
C1 [Mazza, Damiano] CNRS, Paris, France.
   [Pagani, Michele] Univ Paris, IRIF UMR CNRS 8243, Paris, France.
   [Mazza, Damiano] Univ Sorbonne Paris Nord, LIPN, CNRS, UMR 7030, Paris, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite Paris
   Cite; Centre National de la Recherche Scientifique (CNRS)
RP Mazza, D (corresponding author), Univ Sorbonne Paris Nord, LIPN, CNRS, UMR 7030, Paris, France.
EM Damiano.Mazza@lipn.univ-paris13.fr; pagani@irif.fr
FU ANR PRC project PPS [ANR-19-CE48-0014]; Agence Nationale de la Recherche
   (ANR) [ANR-19-CE48-0014] Funding Source: Agence Nationale de la
   Recherche (ANR)
FX We would like to thank A. Brunel, T. Ehrhard and B.A. Pearlmutter for
   useful comments and discussions. This work was partially supported by
   ANR PRC project PPS (ANR-19-CE48-0014).
CR Abadi Martin, 2016, arXiv
   Abadi M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371106
   Amadio R.M., 1998, DOMAINS LAMBDA CALCU, V46
   Barendregt H.P., 1985, STUDIES LOGIC FDN MA, V103
   Barthe G, 2020, LECT NOTES COMPUT SC, V12075, P56, DOI 10.1007/978-3-030-44914-8_3
   Baydin AG, 2018, J MACH LEARN RES, V18
   BECK T, 1994, J COMPUT APPL MATH, V50, P119, DOI 10.1016/0377-0427(94)90294-1
   Brunel A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371132
   DIGIANANTONIO P, 2013, P FOSSACS, P337
   Ehrhard T, 2008, THEOR COMPUT SCI, V403, P347, DOI 10.1016/j.tcs.2008.06.001
   Ehrhard T, 2006, LECT NOTES COMPUT SC, V3988, P186, DOI 10.1007/11780342_20
   Elliott C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236765
   Escardo MH, 1996, THEOR COMPUT SCI, V162, P79, DOI 10.1016/0304-3975(95)00250-2
   Goodfellow I, 2016, ADAPT COMPUT MACH LE, P1
   Griewank A, 2008, OTHER TITL APPL MATH, V105, P1
   Huot Mathieu, 2020, Foundations of Software Science and Computation Structures. 23rd International Conference, FOSSACS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12077), P319, DOI 10.1007/978-3-030-45231-5_17
   Joss Johan, 1976, THESIS ETH ZURICH
   LeCun Y., 2018, DEEP LEARNING EST MO
   Mak Carol, 2020, ABS200403924 CORR
   Mazza D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158094
   Mazza Damiano, 2017, POLYADIC APPROXIMATI, P13
   Mityagin, 2015, ARXIV151207276MATHCA
   Paszke Adam, 2017, NIPS 2017 WORKSH AUT
   Pearlmutter BA, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330018
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Shaikhha A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341701
   Speelpenning B., 1980, Compiling fast partial derivatives of functions given by algorithms
   Szendrei Agnes, 1986, CLONES UNIVERSAL ALG
   Wang F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341700
   Yang, 2020, ABS200606903 CORR
   ZHOU Y, 2019, P AISTATS, P148
NR 31
TC 23
Z9 23
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 28
DI 10.1145/3434309
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100028
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Yang, C
   Atkinson, E
   Carbin, M
AF Yang, Cambridge
   Atkinson, Eric
   Carbin, Michael
TI Simplifying Dependent Reductions in the Polyhedral Model
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE reductions; polyhedral model; program dependence
ID AFFINE SCHEDULING PROBLEM; EFFICIENT SOLUTIONS
AB A Reduction - an accumulation over a set of values, using an associative and commutative operator - is a common computation in many numerical computations, including scientific computations, machine learning, computer vision, and financial analytics.
   Contemporary polyhedral-based compilation techniques make it possible to optimize reductions, such as prefix sums, in which each component of the reduction's output potentially shares computation with another component in the reduction. Therefore an optimizing compiler can identify the computation shared between multiple components and generate code that computes the shared computation only once.
   These techniques, however, do not support reductions that - when phrased in the language of the polyhedral model - span multiple dependent statements. In such cases, existing approaches can generate incorrect code that violates the data dependences of the original, unoptimized program.
   In this work, we identify and formalize the optimization of dependent reductions as an integer bilinear program. We present a heuristic optimization algorithm that uses an affine sequential schedule of the program to determine how to simplfy reductions yet still preserve the program's dependences.
   We demonstrate that the algorithm provides optimal complexity for a set of benchmark programs from the literature on probabilistic inference algorithms, whose performance critically relies on simplifying these reductions. The complexities for 10 of the 11 programs improve siginifcantly by factors at least of the sizes of the input data, which are in the range of 10(4) to 10(6) for typical real application inputs. We also confirm the significance of the improvement by showing speedups in wall-clock time that range from 1.1x to over 10(6) x.
C1 [Yang, Cambridge; Atkinson, Eric; Carbin, Michael] MIT CSAIL, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Yang, C (corresponding author), MIT CSAIL, Cambridge, MA 02139 USA.
EM camyang@csail.mit.edu; eatkinson@csail.mit.edu; mcarbin@csail.mit.edu
RI Yang, Cambridge/JFS-1731-2023
FU Office of Naval Research [ONR-N00014-17-1-2699]
FX We would like to thank Alex Renda, Charith Mandis, Jesse Michel,
   Jonathan Frankle, Riyadh Baghdadi, Sanjay Rajopadhye, Sriram
   Krishnamoorthy, Tian Jin, and anonymous reviewers for their helpful
   comments and suggestions. This work was supported in part by the Office
   of Naval Research (ONR-N00014-17-1-2699). Any opinions, findings, and
   conclusions or recommendations expressed in this material are those of
   the author and do not necessarily reflect the views of the Office of
   Naval Research.
CR Alias Christophe, 2010, STAT AN S STAT AN S
   Atkinson Eric, 2018, VERIFYING HANDCODED
   Behnel S, 2011, COMPUT SCI ENG, V13, P31, DOI 10.1109/MCSE.2010.118
   Benabderrahmane MW, 2010, LECT NOTES COMPUT SC, V6011, P283, DOI 10.1007/978-3-642-11970-5_16
   Bingham E, 2019, J MACH LEARN RES, V20
   Bishop C, 2007, RECOGNITION PATTERN
   Blei DM, 2003, J MACH LEARN RES, V3, P993, DOI 10.1162/jmlr.2003.3.4-5.993
   Bondhugula U, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P101, DOI 10.1145/1375581.1375595
   Collard Jean-Francois, 1995, S PRINC PRACT PAR PR S PRINC PRACT PAR PR
   Collett D., 1993, MODELLING SURVIVAL D
   COX DR, 1972, J R STAT SOC B, V34, P187
   Cusumano-Towner Marco F., 2019, C PROGRAMMING LANGUA
   Doerfert J., 2015, INT WORKSH POL COMP
   Ehrhardt E., 1967, J REINE ANGEW MATH, P25
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P389, DOI 10.1007/BF01379404
   FEAUTRIER P, 1992, INT J PARALLEL PROG, V21, P313, DOI 10.1007/BF01407835
   Feautrier P, 1988, INT C SUP INT C SUP
   Fung Robert M, 1989, C UNC ART INT C UNC ART INT
   Gautam S, 2006, S PRINC PROGR LANG S PRINC PROGR LANG
   Gelman A, 2015, J EDUC BEHAV STAT, V40, P530, DOI 10.3102/1076998615606113
   GEMAN S, 1984, IEEE T PATTERN ANAL, V6, P721, DOI 10.1109/TPAMI.1984.4767596
   Ginsbach P, 2017, INT SYM CODE GENER, P269, DOI 10.1109/CGO.2017.7863746
   Goodman N. D., 2014, DESIGN IMPLEMENTATIO
   Goodman Noah D, 2008, C UNC ART INT C UNC ART INT
   Grauer-Gray Scott., 2011, WORKSH LANG COMP PAR WORKSH LANG COMP PAR
   Griffiths TL, 2004, P NATL ACAD SCI USA, V101, P5228, DOI 10.1073/pnas.0307752101
   Gupta Gautam, 2002, S PAR ALG ARCH S PAR ALG ARCH
   Gupta Gautam, 2007, INT PAR DISTR PROC S INT PAR DISTR PROC S
   HASTINGS WK, 1970, BIOMETRIKA, V57, P97, DOI 10.1093/biomet/57.1.97
   Holmes I, 2012, PLOS ONE, V7, DOI 10.1371/journal.pone.0030126
   Huang Greg Morisett Daniel., 2017, C PROGRAMMING LANGUA
   Iooss Guillaume., 2014, INT STAT AN S INT STAT AN S
   KIKUCHI R, 1951, PHYS REV, V81, P988, DOI 10.1103/PhysRev.81.988
   Kiselyov Oleg., 2016, AS S PROGR LANG SYST AS S PROGR LANG SYST
   LIU JS, 1994, J AM STAT ASSOC, V89, P958, DOI 10.2307/2290921
   Liu YA, 2005, ACM T PROGR LANG SYS, V27, P91, DOI 10.1145/1053468.1053471
   Mansingkha Vikash., 2018, C PROGRAMMING LANGUA
   METROPOLIS N, 1953, J CHEM PHYS, V21, P1087, DOI 10.1063/1.1699114
   Murphy KP, 2012, MACHINE LEARNING: A PROBABILISTIC PERSPECTIVE, P27
   Narayanan Praveen, 2016, INT S FUNCT LOG PROG INT S FUNCT LOG PROG
   Nemhauser G., 1988, INTEGER COMBINATORIA, DOI DOI 10.1002/9781118627372
   Newman David, 2008, UCI MACHINE LEARNING
   Nori Aditya V., 2015, C PROGRAMMING LANGUA
   Padua David, 2011, OMEGA CALCULATOR, P1355, DOI [10.1007/978-0-387-09766-4_2303, DOI 10.1007/978-0-387-09766-4_2303]
   Patricia M, 2013, MODELING SURVIVAL DA
   Plummer M., 2015, JAGS VERSION 4 0 0 U
   Pouchet LN, 2007, INT SYM CODE GENER, P144
   Pouchet LN, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P549, DOI 10.1145/1926385.1926449
   Pouchet LN, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P90, DOI 10.1145/1375581.1375594
   Rauchwerger L, 1999, IEEE T PARALL DISTR, V10, P160, DOI 10.1109/71.752782
   Reddy C, 2016, REDUCTION DRAWING LA
   Redon Xavier, 1994, INT C SUP INT C SUP
   Resnik Philip., 2010, Gibbs sampling for the uninitiated
   Ritchie Daniel., 2016, INT C ART INT STAT INT C ART INT STAT
   Rubiano T., 2017, THESIS
   SAOUTER Y, 1993, THEOR COMPUT SCI, V116, P317, DOI 10.1016/0304-3975(93)90326-O
   Schrijver A., 1998, THEORY LINEAR INTEGE
   Sun J, 2003, IEEE T PATTERN ANAL, V25, P787, DOI 10.1109/TPAMI.2003.1206509
   Susto GA, 2015, IEEE T IND INFORM, V11, P812, DOI 10.1109/TII.2014.2349359
   Tran Dustin, 2017, INT C LEARN REPR ICL
   Turnbaugh PJ, 2009, NATURE, V457, P480, DOI 10.1038/nature07540
   Verdoolaege S, 2007, ALGORITHMICA, V48, P37, DOI 10.1007/s00453-006-1231-0
   Verdoolaege S, 2010, LECT NOTES COMPUT SC, V6327, P299, DOI 10.1007/978-3-642-15582-6_49
   Verdoolaege Sven, 2016, Presburger Formulas and Polyhedral Compilation, DOI DOI 10.13140/RG.2.1.1174.6323
   Verdoolaege Sven., 2013, INT WORKSH POL COMP INT WORKSH POL COMP
   Walia Rajan., 2019, INT C FUNCT PROGR INT C FUNCT PROGR
   White N, 2016, PLOS ONE, V11, DOI 10.1371/journal.pone.0161407
   Wu Yi., 2016, INT JOINT C ART INT INT JOINT C ART INT
   Yang Lingfeng, 2014, INT C ART INT STAT INT C ART INT STAT
   Yuki Tomofumi, 2013, WORKSH LANG COMP PAR WORKSH LANG COMP PAR
   Zhang Jieyuan., 2019, C PROGRAMMING LANGUA
NR 71
TC 4
Z9 4
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 20
DI 10.1145/3434301
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100020
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU David, Y
   Alon, U
   Yahav, E
AF David, Yaniv
   Alon, Uri
   Yahav, Eran
TI Neural Reverse Engineering of Stripped Binaries using Augmented Control
   Flow Graphs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Neural Reverse Engineering; Static Binary Analysis
ID CODE
AB We address the problem of reverse engineering of stripped executables, which contain no debug information. This is a challenging problem because of the low amount of syntactic information available in stripped executables, and the diverse assembly code patterns arising from compiler optimizations.
   We present a novel approach for predicting procedure names in stripped executables. Our approach combines static analysis with neural models. The main idea is to use static analysis to obtain augmented representations of call sites; encode the structure of these call sites using the control-flow graph (CFG) and finally, generate a target name while attending to these call sites. We use our representation to drive graph-based, LSTM-based and Transformer-based architectures.
   Our evaluation shows that our models produce predictions that are difficult and time consuming for humans, while improving on existing methods by 28% and by 100% over state-of-the-art neural textual models that do not use any static analysis. Code and data for this evaluation are available at https://github.com/tech-srl/Nero.
C1 [David, Yaniv; Alon, Uri; Yahav, Eran] Technion, Haifa, Israel.
C3 Technion Israel Institute of Technology
RP David, Y (corresponding author), Technion, Haifa, Israel.
EM yanivd@cs.technion.ac.il; urialon@cs.technion.ac.il;
   yahave@cs.technion.ac.il
RI David, Yaniv/ADN-2185-2022
FU Israel Ministry of Science and Technology [3-9779]
FX The research leading to these results has received funding from the
   Israel Ministry of Science and Technology, grant no. 3-9779.
CR Alammar Jay, The Illustrated Transformer
   Allamanis M., 2018, INT C LEARN REPR ICL
   Allamanis M, 2016, PR MACH LEARN RES, V48
   Allamanis M, 2015, PR MACH LEARN RES, V37, P2123
   Allamanis M, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P38, DOI 10.1145/2786805.2786849
   Allamanis Miltiadis, 2018, ARXIV PREPRINT ARXIV
   Alon U., 2019, 7 INT C LEARNING REP
   Alon U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290353
   Alon U, 2018, ACM SIGPLAN NOTICES, V53, P404, DOI [10.1145/3192366.3192412, 10.1145/3296979.3192412]
   Alon Uri, 2019, ARXIV PREPRINT ARXIV
   [Anonymous], 2015, P 2015 C EMP METH NA, DOI [10.18653/v1/D15-1166, DOI 10.48550/ARXIV.1508.04025]
   Bahdanau Dzmitry, 2014, NEURAL MACHINE TRANS
   Bao T, 2014, PROCEEDINGS OF THE 23RD USENIX SECURITY SYMPOSIUM, P845
   Bavishi Rohan, 2018, ARXIV PREPRINT ARXIV
   Bielik P, 2016, PR MACH LEARN RES, V48
   Brockschmidt M., 2019, ICLR
   Chiu CC, 2018, 2018 IEEE INTERNATIONAL CONFERENCE ON ACOUSTICS, SPEECH AND SIGNAL PROCESSING (ICASSP), P4774, DOI 10.1109/ICASSP.2018.8462105
   Cho K., 2014, PROCS C EMPIRICAL ME, P1724, DOI DOI 10.3115/V1/D14-1179
   David Y, 2017, ACM SIGPLAN NOTICES, V52, P79, DOI [10.1145/3140587.3062387, 10.1145/3062341.3062387]
   DeFreez D, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P423, DOI 10.1145/3236024.3236059
   Devlin J., 2018, BERT PRE TRAINING DE
   Ding SHH, 2019, P IEEE S SECUR PRIV, P472, DOI 10.1109/SP.2019.00003
   Edmonds R, 2006, POLYUNPACK AUTOMATIN
   Fernandes P, 2019, 7 INT C LEARNING REP
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   He JX, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P1667, DOI 10.1145/3243734.3243866
   Hochreiter S, 1997, NEURAL COMPUT, V9, P1735, DOI [10.1162/neco.1997.9.1.1, 10.1007/978-3-642-24797-2]
   Host EW, 2009, LECT NOTES COMPUT SC, V5653, P294, DOI 10.1007/978-3-642-03013-0_14
   Iyer S, 2018, 2018 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2018), P1643
   Jacobson E., 2011, P 10 ACM SIGPLAN SIG, P1
   Jung HJ, 2011, 2011 INTERNATIONAL CONFERENCE ON DISTRIBUTED COMPUTING IN SENSOR SYSTEMS AND WORKSHOPS (DCOSS)
   Katz O, 2018, ACM SIGPLAN NOTICES, V53, P363, DOI [10.1145/3173162.3173202, 10.1145/3296957.3173202]
   King DB, 2015, ACS SYM SER, V1214, P1
   Kipf TN, 2017, INT C LEARN REPR
   Lacomis Jeremy, 2019, ARXIV PREPRINT ARXIV
   Lopes CV, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133908
   Lu Yanxin, 2017, ABS170509042 CORR
   Lyle James R, 1993, P 1993 SOFTW ENG RES, P255
   Maddison CJ, 2014, PR MACH LEARN RES, V32, P649
   Murali Vijayaraghavan, 2017, ABS170305698 CORR
   Pewny J, 2015, P IEEE S SECUR PRIV, P709, DOI 10.1109/SP.2015.49
   Pradel M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276517
   Radford A, 2018, LANGUAGE MODELS ARE
   Raychev Veselin, 2016, ACM SIGPLAN Notices, V51, P731, DOI 10.1145/3022671.2984041
   Raychev V, 2016, ACM SIGPLAN NOTICES, V51, P761, DOI 10.1145/2914770.2837671
   Raychev V, 2015, ACM SIGPLAN NOTICES, V50, P111, DOI [10.1145/2775051.2677009, 10.1145/2676726.2677009]
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2594291.2594321, 10.1145/2666356.2594321]
   Reps T, 2005, LECT NOTES COMPUT SC, V3780, P212
   Rice A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133928
   Sachdev S, 2018, MAPL'18: PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON MACHINE LEARNING AND PROGRAMMING LANGUAGES, P31, DOI 10.1145/3211346.3211353
   Srivastava N, 2014, J MACH LEARN RES, V15, P1929
   Sutskever I, 2014, ADV NEUR IN, V27
   Vaswani A, 2017, ADV NEUR IN, V30
   Votipka D, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P1875
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Xu XJ, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P363, DOI 10.1145/3133956.3134018
NR 56
TC 34
Z9 38
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 225
DI 10.1145/3428293
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900102
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU First, E
   Brun, Y
   Guha, A
AF First, Emily
   Brun, Yuriy
   Guha, Arjun
TI TacTok: Semantics-Aware Proof Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Formal software verification; Coq; proof script synthesis; automated
   proof script synthesis
ID VERIFICATION
AB Formally verifying software correctness is a highly manual process. However, because verification proof scripts often share structure, it is possible to learn from existing proof scripts to fully automate some formal verification. The goal of this paper is to improve proof script synthesis and enable fully automating more verification. Interactive theorem provers, such as the Coq proof assistant, allow programmers to write partial proof scripts, observe the semantics of the proof state thus far, and then attempt more progress. Knowing the proof state semantics is a significant aid. Recent research has shown that the proof state can help predict the next step. In this paper, we present TacTok, the first technique that attempts to fully automate proof script synthesis by modeling proof scripts using both the partial proof script written thus far and the semantics of the proof state. Thus, TacTok more completely models the information the programmer has access to when writing proof scripts manually. We evaluate TacTok on a benchmark of 26 software projects in Coq, consisting of over 10 thousand theorems. We compare our approach to five tools. Two prior techniques, Cogliammer, the state-of-the-art proof synthesis technique, and ASTactic, a proof script synthesis technique that models proof state. And three new proof script synthesis technique we create ourselves, Seq0nly, which models only the partial proof script and the initial theorem being proven, and WeightedRandom and WeightedGreedy, which use metaheuristic search biased by frequencies of proof tactics in existing, successful proof scripts. We find that TacTok outperforms WeightedRandom and WeightedGreedy, and is complementary to CoqHammer and ASTactic: for 24 out of the 26 projects, TacTok can synthesize proof scripts for some theorems the prior tools cannot. Together with TacTok, 11.5% more theorems can be proven automatically than by Cogliammer alone, and 20.0% than by ASTactic alone. Compared to a combination of Coqiiammer and ASTactic, TacTok can prove an additional 3.6% more theorems, proving 115 theorems no tool could previously prove. Overall, our experiments provide evidence that partial proof script and proof state semantics, together, provide useful information for proof script modeling, and that metaheuristic search is a promising direction for proof script synthesis. TacTok is open-source and we make public all our data and a replication package of our experiments.
C1 [First, Emily; Brun, Yuriy; Guha, Arjun] Univ Massachusetts, 140 Governors Dr, Amherst, MA 01003 USA.
C3 University of Massachusetts System; University of Massachusetts Amherst
RP First, E (corresponding author), Univ Massachusetts, 140 Governors Dr, Amherst, MA 01003 USA.
EM efirst@cs.umass.edu; brun@cs.umass.edu; arjun@cs.umass.edu
OI Brun, Yuriy/0000-0003-3027-7986; First, Emily/0000-0002-2896-2928; Guha,
   Arjun/0000-0002-7493-3271
FU National Science Foundation [CCF-1453474, CCF-1564162, CCF-2018393]
FX This work is supported in part by the National Science Foundation under
   grants no. CCF-1453474, no. CCF-1564162, and no. CCF-2018393. This work
   was performed in part using high performance computing equipment
   obtained under a grant from the Collaborative R&D Fund managed by the
   Massachusetts Technology Collaborative.
CR Abou-Assaleh T, 2004, P INT COMP SOFTW APP, P41
   Afzal A, 2021, IEEE T SOFTWARE ENG, V47, P2162, DOI 10.1109/TSE.2019.2944914
   Alama J, 2014, J AUTOM REASONING, V52, P191, DOI 10.1007/s10817-013-9286-5
   Alba E, 2007, GECCO 2007: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1066
   Andrews P.B., 2006, J APPL LOGIC, V4, P367
   [Anonymous], 2007, P 45 ANN M ASS COMPU
   Bahdanau Dzmitry, 2015, 3 INT C LEARN REP IC
   Barreto A, 2008, COMPUT OPER RES, V35, P3073, DOI 10.1016/j.cor.2007.01.010
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Bengio Y, 2003, J MACH LEARN RES, V3, P1137, DOI 10.1162/153244303322533223
   Bessey A, 2010, COMMUN ACM, V53, P66, DOI 10.1145/1646353.1646374
   Blanchette JC, 2016, J FORMALIZ REASON, V9, P101, DOI 10.6092/issn.1972-5787/4593
   Blanchette JC, 2011, LECT NOTES ARTIF INT, V6989, P12, DOI 10.1007/978-3-642-24364-6_2
   Brill E, 2000, 38TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE CONFERENCE, P286, DOI 10.3115/1075218.1075255
   Bundy A, 1998, LECT NOTES ARTIF INT, V1397, P10
   Bundy Alan, 1990, INT C AUT DED, P647
   Celik A, 2017, IEEE INT CONF AUTOM, P171, DOI 10.1109/ASE.2017.8115630
   Chlipala Adam., 2017, Certified Programming with Dependent Types
   Cho K., 2014, PROCS C EMPIRICAL ME, P1724, DOI DOI 10.3115/V1/D14-1179
   Chung J., 2014, NIPS 2014 WORKSH DEE
   Czajka L, 2018, J AUTOM REASONING, V61, P423, DOI 10.1007/s10817-018-9458-4
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Devlin J., 2018, BERT PRE TRAINING DE
   Ernst M. D., 2017, Leibniz International Proceedings in Informatics (LIPIcs), V71
   First Emily., 2020, REPLICATION PACKAGE, DOI [10.5281/zenodo.4088897, DOI 10.5281/ZENODO.4088897]
   Gauthier T, 2017, EPIC SERIES COMPUTIN, V46, P125, DOI DOI 10.29007/NTLB
   Gers FA, 2000, NEURAL COMPUT, V12, P2451, DOI 10.1162/089976600300015015
   Greff K, 2017, IEEE T NEUR NET LEAR, V28, P2222, DOI 10.1109/TNNLS.2016.2582924
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Guha A, 2013, ACM SIGPLAN NOTICES, V48, P483, DOI 10.1145/2499370.2462178
   Harman M, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P342, DOI 10.1109/FOSE.2007.29
   Harrison J, 1996, LECT NOTES COMPUT SC, V1166, P265, DOI 10.1007/BFb0031814
   Hellendoorn VJ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P724, DOI 10.1145/3236024.3264832
   Heras J, 2014, MATH COMPUT SCI, V8, P99, DOI 10.1007/s11786-014-0173-1
   Hindle A, 2016, COMMUN ACM, V59, P122, DOI 10.1145/2902362
   Hindle A, 2012, PROC INT CONF SOFTW, P837, DOI 10.1109/ICSE.2012.6227135
   Huang D, 2018, INT C LEARN REPR
   Ileri Atalay, 2018, P 12 USENIX C OP SYS
   Irving G., 2016, Advances in neural information processing systems, V29, P2235
   Jacky Jonathan, 2017, INT C ACC LARG EXPT, DOI [10.18429/JACOWICALEPCS2017-TUDPL02, DOI 10.18429/JACOWICALEPCS2017-TUDPL02]
   Jang D., 2012, P 21 USENIX C SEC S, V12, P113
   KATZ SM, 1987, IEEE T ACOUST SPEECH, V35, P400, DOI 10.1109/TASSP.1987.1165125
   Ke YL, 2015, IEEE INT CONF AUTOM, P295, DOI 10.1109/ASE.2015.60
   KNESER R, 1995, INT CONF ACOUST SPEE, P181, DOI 10.1109/ICASSP.1995.479394
   Komendantskaya E, 2013, ELECTRON P THEOR COM, P15, DOI 10.4204/EPTCS.118.2
   Kovacs Laura, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P1, DOI 10.1007/978-3-642-39799-8_1
   Lampropoulos L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158133
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Mauborgne L, 2004, INT FED INFO PROC, V156, P385
   Michael CC, 2001, IEEE T SOFTWARE ENG, V27, P1085, DOI 10.1109/32.988709
   Mikolov T, 2010, 11TH ANNUAL CONFERENCE OF THE INTERNATIONAL SPEECH COMMUNICATION ASSOCIATION 2010 (INTERSPEECH 2010), VOLS 1-2, P1045
   Morrisett G, 2012, ACM SIGPLAN NOTICES, V47, P395, DOI 10.1145/2345156.2254111
   Motwani M, 2022, IEEE T SOFTWARE ENG, V48, P637, DOI 10.1109/TSE.2020.2998785
   Nipkow Tobias, 2002, ISABELLE HOL PROOF A, V2283
   Radford Alec, 2018, IMPROVING LANGUAGE U, DOI DOI 10.18653/V1/N18-1202
   Ray B, 2016, PROC INT CONF SOFTW, P428, DOI 10.1145/2884781.2884848
   Ringer T., 2018, P 7 ACM SIGPLAN INT, P115, DOI [10.1145/3167094, DOI 10.1145/3167094]
   RUMELHART DE, 1986, NATURE, V323, P533, DOI 10.1038/323533a0
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Schulz Stephan, 2013, Logic for Programming, Artificial Intelligence and Reasoning. 19th International Conference, LPAR-19, Proceedings: LNCS 8312, P735, DOI 10.1007/978-3-642-45221-5_49
   Seng O, 2006, GECCO 2006: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1909
   Sergey I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158116
   Slind K, 2008, LECT NOTES COMPUT SC, V5170, P28, DOI 10.1007/978-3-540-71067-7_6
   Smith EK, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P532, DOI 10.1145/2786805.2786825
   Socher R., 2013, P 2013 C EMP METH NA, V2013, P1631, DOI DOI 10.1371/JOURNAL.PONE.0073791
   Stolcke A., 2002, 7 INT C SPOK LANG PR
   Sundermeyer M, 2012, 13TH ANNUAL CONFERENCE OF THE INTERNATIONAL SPEECH COMMUNICATION ASSOCIATION 2012 (INTERSPEECH 2012), VOLS 1-3, P194
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Tai KS, 2015, PROCEEDINGS OF THE 53RD ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS AND THE 7TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING, VOL 1, P1556
   The Coq Development Team, 2017, COQ V 8 7
   Trybulec Andrzej, 1985, P 9 INT JOINT C ART, P26
   Tu ZP, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P269, DOI 10.1145/2635868.2635875
   Vazou Niki., 2016, THESIS U CALIFORNIA
   Vechev M, 2016, FOUND TRENDS PROGRAM, V3, P231, DOI 10.1561/2500000028
   Walcott K.R., 2006, P INT S SOFTW TEST A, P1, DOI DOI 10.1145/1146238.1146240
   Wang MZ, 2017, ADV NEUR IN, V30
   Weimer W, 2009, PROC INT CONF SOFTW, P364, DOI 10.1109/ICSE.2009.5070536
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Yang KY, 2019, PR MACH LEARN RES, V97
   Yin PC, 2017, PROCEEDINGS OF THE 55TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2017), VOL 1, P440, DOI 10.18653/v1/P17-1041
NR 80
TC 12
Z9 13
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 231
DI 10.1145/3428299
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900108
OA gold
DA 2024-07-18
ER

PT J
AU Gao, X
   Barke, S
   Radhakrishna, A
   Soares, G
   Gulwani, S
   Leung, A
   Nagappan, N
   Tiwari, A
AF Gao, Xiang
   Barke, Shraddha
   Radhakrishna, Arjun
   Soares, Gustavo
   Gulwani, Sumit
   Leung, Alan
   Nagappan, Nachiappan
   Tiwari, Ashish
TI Feedback-Driven Semi-supervised Synthesis of Program Transformations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program transformation; Refactoring; Program synthesis; Programming by
   Example
ID COMPLETION
AB While editing code, it is common for developers to make multiple related repeated edits that are all instances of a more general program transformation. Since this process can be tedious and error-prone, we study the problem of automatically learning program transformations from past edits, which can then be used to predict future edits. We take a novel view of the problem as a semi-supervised learning problem: apart from the concrete edits that are instances of the general transformation, the learning procedure also exploits access to additional inputs (program subtrees) that are marked as positive or negative depending on whether the transformation applies on those inputs. We present a procedure to solve the semi-supervised transformation learning problem using anti-unification and programming-by-example synthesis technology. To eliminate reliance on access to marked additional inputs, we generalize the semi-supervised learning procedure to a feedback-driven procedure that also generates the marked additional inputs in an iterative loop. We apply these ideas to build and evaluate three applications that use different mechanisms for generating feedback. Compared to existing tools that learn program transformations from edits, our feedback-driven semi-supervised approach is vastly more effective in successfully predicting edits with significantly lesser amounts of past edit data.
C1 [Gao, Xiang] Natl Univ Singapore, Singapore, Singapore.
   [Barke, Shraddha] Univ Calif San Diego, San Diego, CA 92103 USA.
   [Radhakrishna, Arjun; Soares, Gustavo; Gulwani, Sumit; Leung, Alan; Nagappan, Nachiappan; Tiwari, Ashish] Microsoft, Redmond, WA USA.
C3 National University of Singapore; University of California System;
   University of California San Diego; Microsoft
RP Gao, X (corresponding author), Natl Univ Singapore, Singapore, Singapore.
EM gaoxiang@comp.nus.edu.sg; sbarke@eng.ucsd.edu; arradha@microsoft.com;
   gustavo.soares@microsoft.com; sumitg@microsoft.com;
   alan.leung@microsoft.com; nachin@microsoft.com;
   ashish.tiwari@microsoft.com
OI Radhakrishna, Arjun/0000-0002-5559-5932; , Shraddha/0000-0002-8663-5175
CR Alur Rajeev, 2014, Hardware and Software: Verification and Testing. 10th International Haifa Verification Conference, HVC 2014. Proceedings: LNCS 8855, P75, DOI 10.1007/978-3-319-13338-6_7
   Alur R., 2013, 2013 FORMAL METHODS
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, LECT NOTES COMPUT SC, V9207, P163, DOI 10.1007/978-3-319-21668-3_10
   An SW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371124
   [Anonymous], IntelliJ", At
   [Anonymous], 2018, LEARNING QUICK FIXES
   Bader J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360585
   Bessey A, 2010, COMMUN ACM, V53, P66, DOI 10.1145/1646353.1646374
   BUCHI JR, 1969, T AM MATH SOC, V138, P295, DOI 10.2307/1994916
   Cerny Pavol, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P243, DOI 10.1007/978-3-642-22110-1_20
   erny P., 2013, LNCS, P951, DOI DOI 10.1007/978-3-642-39799-8
   Evans WS, 2009, SOFTWARE QUAL J, V17, P309, DOI 10.1007/s11219-009-9074-y
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Gvero T, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2499370.2462192
   Nguyen HA, 2013, IEEE INT CONF AUTOM, P180, DOI 10.1109/ASE.2013.6693078
   Huang KJ, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1159, DOI 10.1145/3385412.3386027
   Jet Brains, RESHARPER
   Jha S., 2010, P 32 ACM IEEE INT C, V1, P215, DOI DOI 10.1145/1806799.1806833
   Jiang LX, 2007, PROC INT CONF SOFTW, P96
   Kim M., 2012, P ACM SIGSOFT 20 INT, P1
   Manna Z., 1980, ACM Transactions on Programming Languages and Systems, V2, P90, DOI 10.1145/357084.357090
   Mayer M, 2015, UIST'15: PROCEEDINGS OF THE 28TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P291, DOI 10.1145/2807442.2807459
   Meng N, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P502, DOI 10.1109/ICSE.2013.6606596
   Meng N, 2011, ACM SIGPLAN NOTICES, V46, P329, DOI 10.1145/1993316.1993537
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Microsoft, 2019, VIS STUD
   Microsoft, 2020, INT SUGG
   Miltner A., 2019, P ACM PROGRAMMING LA, V3, P1
   MITCHELL TM, 1982, ARTIF INTELL, V18, P203, DOI 10.1016/0004-3702(82)90040-6
   Opdyke W. F, 1992, THESIS CHAMPAIGN IL
   Perelman D, 2012, ACM SIGPLAN NOTICES, V47, P275, DOI 10.1145/2345156.2254098
   PNUELI A, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P179, DOI 10.1145/75277.75293
   Polozov O., 2017, ARXIV170303539 CORR
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2594291.2594321, 10.1145/2666356.2594321]
   Reynolds A, 2015, LECT NOTES COMPUT SC, V9207, P198, DOI 10.1007/978-3-319-21668-3_12
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Singh R, 2016, PROC VLDB ENDOW, V9, P816, DOI 10.14778/2977797.2977807
   Singh Rishabh, 2011, FSE, P289, DOI DOI 10.1145/2025113.2025153
   Solar-Lezama A, 2005, ACM SIGPLAN NOTICES, V40, P281, DOI 10.1145/1064978.1065045
   Solar-Lezama A, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P167, DOI 10.1145/1250734.1250754
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Solar-Lezama A, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P136, DOI 10.1145/1375581.1375599
   Steimann F, 2012, IEEE INT CONF AUTOM, P290, DOI 10.1145/2351676.2351726
   The Eclipse Foundation, 2020, ECLIPSE
   Udupa A, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2499370.2462174
   Vakilian M, 2012, PROC INT CONF SOFTW, P233, DOI 10.1109/ICSE.2012.6227190
   Vechev M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P327, DOI 10.1145/1706299.1706338
   Yaghmazadeh N, 2018, PROC VLDB ENDOW, V11, P580, DOI 10.1145/3177732.3177735
   Yessenov K, 2011, ACM SIGPLAN NOTICES, V46, P65, DOI 10.1145/2076021.2048075
   Zhang HY, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P956, DOI 10.1145/2950290.2983955
   Zhu X., 2005, Time-sensitive Dirichlet process mixture models
   Zhu X, 2009, Synthesis Lectures on Artificial Intelligence and Machine Learning, V3, P1, DOI 10.1007/978-3-031-01548-9
NR 56
TC 11
Z9 12
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 219
DI 10.1145/3428287
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900096
OA gold
DA 2024-07-18
ER

PT J
AU Leobas, GV
   Pereira, FMQ
AF Leobas, Guilherme Vieira
   Quintao Pereira, Fernando Magno
TI Semiring Optimizations: Dynamic Elision of Expressions with Identity and
   Absorbing Elements
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Compiler; Optimization; Profiling; Semiring
AB This paper describes a compiler optimization to eliminates dynamic occurrences of expressions in the format a <- 4 - a circle plus b circle plus c. The operation circle plus must admit an identity element z, such that a circle plus z = a. Also, z must be the absorbing element of circle plus, such that b circle plus z=z circle plus c = z. Sernirings where circle plus is the additive operator and is the multiplicative operator meet this contract. This pattern is common in high-performance benchmarks-its canonical representative being the multiply-add operation a <- a + b x c. However, several other expressions involving arithmetic and logic operations satisfy the required algebra. We show that the runtime elimination of such assignments can be implemented in a performance-safe way via online profiling. The elimination of dynamic redundancies involving identity and absorbing elements in 35 programs of the LLVM test suite that present semiring patterns brings an average speedup of 1.19x (total optimized time over total unoptimized time) on top of clang -O3. When projected onto the entire test suite (259 programs) the optimization leads to a speedup of 1.025x. Once added onto clang, semiring optimizations approximates it to TACO, a specialized tensor compiler.
C1 [Leobas, Guilherme Vieira; Quintao Pereira, Fernando Magno] Univ Fed Minas Gerais, Belo Horizonte, MG, Brazil.
C3 Universidade Federal de Minas Gerais
RP Leobas, GV (corresponding author), Univ Fed Minas Gerais, Belo Horizonte, MG, Brazil.
EM guilhermel@dcc.ufmg.br; fernando@dcc.ufmg.br
RI Pereira, Fernando/HNR-7786-2023
OI Quintao Pereira, Fernando Magno/0000-0002-0375-1657
FU CNPq; CAPES; FAPEMIG; ANR [ANR-15-CE25-0007-01]
FX This work has been made possible by grants from different research
   agencies, namely CNPq, CAPES, FAPEMIG and ANR (the CONTINUUM project:
   grant ANR-15-CE25-0007-01). Guilherme Leobas developed part of this
   project while interning at the Laboratoire d'Informatique, de Robotique
   et de Microelectronique de Montpellier (LIRMM). We thank Abdoulaye
   Gamatie and the other LIRMM researchers with whom we have interacted for
   many insightful discussions, which have greatly contributed to increase
   the quality of this work. We are also indebted to OOPSLA's referees, who
   made much effort to bring rigor and elegance to this paper.
CR Akbudak K, 2018, LECT NOTES COMPUT SC, V11014, P721, DOI 10.1007/978-3-319-96983-1_51
   Bell GB, 2000, 2000 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURES AND COMPILATION TECHNIQUES, PROCEEDINGS, P133, DOI 10.1109/PACT.2000.888338
   Boehm HJ, 2016, ACM SIGPLAN NOTICES, V51, P55, DOI [10.1145/2926697.2926704, 10.1145/3241624.2926704]
   Cai Q, 2003, INT SYM CODE GENER, P91, DOI 10.1109/CGO.2003.1191536
   Calder B, 1997, INT SYMP MICROARCH, P259, DOI 10.1109/MICRO.1997.645816
   Callahan D., 1988, Proceedings. Supercomputing '88 (IEEE Cat. No.88CH2617-9), P98, DOI 10.1109/SUPERC.1988.44642
   Chen TQ, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P579
   Cormen T.H., 2009, INTRO ALGORITHMS
   CYTRON R, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P25, DOI 10.1145/75277.75280
   Grant B, 1999, ACM SIGPLAN NOTICES, V34, P293, DOI 10.1145/301631.301683
   Hilbert David, 1904, THEORIE ALGEBRAISCHE
   Hough David G., 2019, IEEE STANDARD FLOATI
   HWU WMW, 1993, J SUPERCOMPUT, V7, P229, DOI 10.1007/BF01205185
   Jiménez DA, 2003, NINTH INTERNATIONAL SYMPOSIUM ON HIGH-PERFORMANCE COMPUTER ARCHITECTURE, PROCEEDINGS, P43, DOI 10.1109/HPCA.2003.1183523
   Khan S, 2017, 50TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO), P27, DOI 10.1145/3123939.3123945
   Kjolstad F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133901
   Knuth Donald, 1998, ARITHMETIC, P194
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lepak KM, 2002, ACM SIGPLAN NOTICES, V37, P30, DOI 10.1145/605432.605401
   Lepak KM, 2000, INT SYMP MICROARCH, P22, DOI 10.1109/MICRO.2000.898055
   Lepak KM, 2000, PROCEEDING OF THE 27TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P182, DOI 10.1109/ISCA.2000.854389
   Liu JH, 2019, INT J PARALLEL PROG, V47, P403, DOI 10.1007/s10766-018-0604-8
   Mahlke Scott A., 1992, MICRO PORTLAND OREGO, p45S54
   Mendonça G, 2017, ACM T ARCHIT CODE OP, V14, DOI 10.1145/3084540
   Muth R, 2000, LECT NOTES COMPUT SC, V1824, P340
   Nazaré H, 2014, ACM SIGPLAN NOTICES, V49, P791, DOI [10.1145/2714064.2660205, 10.1145/2660193.2660205]
   Pouchet Louis-Noel, 2018, POLYBENCH C 4 2 1 PO
   Pereira FMQ, 2019, ACM T ARCHIT CODE OP, V15, DOI 10.1145/3280848
   Rangan R, 2020, ACM T ARCHIT CODE OP, V17, DOI 10.1145/3394284
   Rocha RCO, 2019, SCI COMPUT PROGRAM, V173, P128, DOI 10.1016/j.scico.2018.01.004
   Rocha RCO, 2016, LECT NOTES COMPUT SC, V9889, P140, DOI 10.1007/978-3-319-45279-1_10
   Rodrigues B, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P110, DOI 10.1145/2892208.2892230
   Rong H, 2016, 2016 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURE AND COMPILATION TECHNIQUES (PACT), P247, DOI 10.1145/2967938.2967943
   Sato S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P470
   Sharma R, 2013, LECT NOTES COMPUT SC, V7792, P574, DOI 10.1007/978-3-642-37036-6_31
   Campos VHS, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P163, DOI 10.1145/2892208.2892225
   Weiser M., 1981, 5th International Conference on Software Engineering, P439
   Wen SS, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P47, DOI 10.1145/3037697.3037729
   Wen SS, 2018, ACM SIGPLAN NOTICES, V53, P332, DOI [10.1145/3173162.3177159, 10.1145/3296957.3177159]
NR 39
TC 2
Z9 2
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 131
DI 10.1145/3428199
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900008
OA gold
DA 2024-07-18
ER

PT J
AU Mukherjee, M
   Kant, P
   Liu, ZY
   Regehr, J
AF Mukherjee, Manasij
   Kant, Pranav
   Liu, Zhengyang
   Regehr, John
TI Dataflow-Based Pruning for Speeding up Superoptimization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; abstract interpretation; superoptimization; pruning
AB Superoptimization is a compilation strategy that uses search to improve code quality, rather than relying on a canned sequence of transformations, as traditional optimizing compilers do. This search can be seen as a program synthesis problem: from unoptimized code serving as a specification, the synthesis procedure attempts to create a more efficient implementation. An important family of synthesis algorithms works by enumerating candidates and then successively checking if each refines the specification, using an SMT solver. The contribution of this paper is a pruning technique which reduces the enumerative search space using fast datallow-based techniques to discard synthesis candidates that contain symbolic constants and uninstantiated instructions. We demonstrate the effectiveness of this technique by improving the runtime of an enumerative synthesis procedure in the Souper superoptimizer for the LLVM intemiediate representation. The techniques presented in this paper eliminate 65% of the solver calls made by Souper, making it 2.32x faster (14.54 hours vs 33.76 hours baseline, on a large multicore) at solving all 269,113 synthesis problems that Souper encounters when optimizing the C and C++ programs from SPEC CPU 2017.
C1 [Mukherjee, Manasij; Kant, Pranav; Liu, Zhengyang; Regehr, John] Univ Utah, Salt Lake City, UT 84112 USA.
C3 Utah System of Higher Education; University of Utah
RP Mukherjee, M (corresponding author), Univ Utah, Salt Lake City, UT 84112 USA.
EM manasij@cs.utah.edu; pranavk@cs.utah.edu; liuz@cs.utah.edu;
   regehr@cs.utah.edu
FU Office of Naval Research [N00014-17-1-2996]
FX This material is based upon work supported by the Office of Naval
   Research under Grant No. N00014-17-1-2996.
CR Akiba Takuya., 2013, CALIBRATING RES PROG
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, LECT NOTES COMPUT SC, V9207, P163, DOI 10.1007/978-3-319-21668-3_10
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Bansal S, 2006, ACM SIGPLAN NOTICES, V41, P394, DOI 10.1145/1168918.1168906
   Barbosa H, 2019, 2019 FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P212, DOI [10.23919/fmcad.2019.8894267, 10.23919/FMCAD.2019.8894267]
   Barthe G, 2013, ACM SIGPLAN NOTICES, V48, P123, DOI 10.1145/2517327.2442529
   Bornholt J, 2016, ACM SIGPLAN NOTICES, V51, P775, DOI 10.1145/2914770.2837666
   Bruttomesso R, 2006, LECT NOTES ARTIF INT, V4246, P557, DOI 10.1007/11916277_38
   Galenson J, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P653, DOI 10.1145/2568225.2568250
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P62, DOI 10.1145/1993316.1993506
   Guo Zheng, 2019, P ACM PROGR LANG POP, V4, p1S28
   Lee J, 2017, ACM SIGPLAN NOTICES, V52, P633, DOI [10.1145/3140587.3062343, 10.1145/3062341.3062343]
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   Lex A, 2014, IEEE T VIS COMPUT GR, V20, P1983, DOI 10.1109/TVCG.2014.2346248
   Loncaric C, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P958, DOI 10.1145/3180155.3180211
   Massalin H., 1987, Proceedings of the Second International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS II) (Cat. No.87CH2440-6), P122
   Phothilimthana PM, 2016, ACM SIGPLAN NOTICES, V51, P297, DOI 10.1145/2954679.2872387
   Polikarpova N, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290385
   Sasnauskas R., 2017, abs/1711.04422
   Schkufza E, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI 10.1145/2499368.2451150
   Solarlezama Armando, 2008, PROGRAM SYNTHESIS SK
   Srinivasan V, 2016, ACM SIGPLAN NOTICES, V51, P165, DOI 10.1145/3022671.2984006
   Srinivasan V, 2015, ACM SIGPLAN NOTICES, V50, P596, DOI [10.1145/2813885.2737960, 10.1145/2737924.2737960]
   Tiwari A, 2015, LECT NOTES ARTIF INT, V9195, P482, DOI 10.1007/978-3-319-21401-6_33
   Udupa A, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2499370.2462174
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
NR 27
TC 9
Z9 10
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 177
DI 10.1145/3428245
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900054
OA gold
DA 2024-07-18
ER

PT J
AU Spall, S
   Mitchell, N
   Tobin-Hochstadt, S
AF Spall, Sarah
   Mitchell, Neil
   Tobin-Hochstadt, Sam
TI Build Scripts with Perfect Dependencies
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE build systems; functional programming
AB Build scripts for most build systems describe the actions to run, and the dependencies between those actions- but often build scripts get those dependencies wrong. Most build scripts have both too few dependencies (leading to incorrect build outputs) and too many dependencies (leading to excessive rebuilds and reduced parallelism). Any programmer who has wondered why a small change led to excess compilation, or who resorted to a "clean" step, has suffered the ill effects of incorrect dependency specification. We outline a build system where dependencies are not specified, but instead captured by tracing execution. The consequence is that dependencies are always correct by construction and build scripts are easier to write. The simplest implementation of our approach would lose parallelism, but we are able to recover parallelism using speculation.
C1 [Spall, Sarah; Tobin-Hochstadt, Sam] Indiana Univ, Bloomington, IN 47405 USA.
   [Mitchell, Neil] Facebook, London, England.
C3 Indiana University System; Indiana University Bloomington; Facebook Inc
RP Spall, S (corresponding author), Indiana Univ, Bloomington, IN 47405 USA.
EM sjspall@iu.edu; ndmitchell@gmail.com; samth@cs.indiana.edu
OI Tobin-Hochstadt, Sam/0000-0003-1302-6499
CR Acereda Jorge, 2019, FSATRACE FILESYSTEM
   [Anonymous], 2013, COMPUTER ORG DESIGN
   Augustsson Lennart, 1994, JFP, V4
   Bezemer CP, 2017, EMPIR SOFTW ENG, V22, P3117, DOI 10.1007/s10664-017-9510-8
   Dolstra E, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE EIGHTEENTH LARGE INSTALLATION SYSTEM ADMINISTRATION CONFERENCE, P79
   Donovan Alan A.A., 2015, The Go Programming Language, V1st
   Erdweg S, 2015, ACM SIGPLAN NOTICES, V50, P89, DOI [10.1145/2814270.2814316, 10.1145/2858965.2814316]
   FELDMAN SI, 1979, SOFTWARE PRACT EXPER, V9, P255, DOI 10.1002/spe.4380090402
   Google, 2009, GENERATE YOUR PROJEC
   Google, 2016, BAZEL
   Hoyt Berwyn, 2009, FABRICATE BETTER BUI
   Jones M. P., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P97
   Kiselyov Oleg, 2015, POLYVARIADIC FUNCTIO
   Konat G, 2018, IEEE INT CONF AUTOM, P76, DOI 10.1145/3238147.3238196
   Konat Gabriel, 2018, ART SCI ENG PROGRAM, V2, DOI [10.22152/programmingjournal.org/2018/2/9, DOI 10.22152/PROGRAMMINGJOURNAL.ORG/2018/2/9]
   Licker N, 2019, PROC INT CONF SOFTW, P1234, DOI 10.1109/ICSE.2019.00125
   McCloskey Bill, 2008, MEMOIZE
   McIntosh S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P141, DOI 10.1145/1985793.1985813
   Microsoft, 2020, BUILD ACC
   Miller P, 1998, AUUGN Journal of AUUG Inc, V19, P14
   Mitchell N, 2012, ACM SIGPLAN NOTICES, V47, P55, DOI 10.1145/2398856.2364538
   Mitchell Neil, 2020, FILE ACCESS TRACING
   Mokhov A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236774
   Mokhov A, 2016, ACM SIGPLAN NOTICES, V51, P170, DOI [10.1145/3241625.2976011, 10.1145/2976002.2976011]
   Mokhov Andrey, 2019, STROLL EXPT BUILD SY
   Nightingale Edmund B, 2005, ACM Trans. Comput. Syst, V39, P191, DOI DOI 10.1145/1189256.1189258
   Roundy David, 2019, FAC BUILD SYSTEM
   Roundy David, 2019, BIGBRO
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Steffan JG, 2000, PROCEEDING OF THE 27TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P1, DOI [10.1145/342001.339650, 10.1109/ISCA.2000.854372]
   Steffan JG, 1998, 1998 FOURTH INTERNATIONAL SYMPOSIUM ON HIGH-PERFORMANCE COMPUTER ARCHITECTURE, PROCEEDINGS, P2, DOI 10.1109/HPCA.1998.650541
   Swanson S, 2003, ACM T COMPUT SYST, V21, P314, DOI 10.1145/859716.859720
   Tapus Cristian, 2006, THESIS CALIFORNIA I
   TOMASULO RM, 1967, IBM J RES DEV, V11, P25, DOI 10.1147/rd.111.0025
   Welc A, 2005, ACM SIGPLAN NOTICES, V40, P439, DOI 10.1145/1103845.1094845
NR 35
TC 3
Z9 4
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 169
DI 10.1145/3428237
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900046
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Wang, YT
   Xu, XZ
   Wilke, P
   Shao, Z
AF Wang, Yuting
   Xu, Xiangzhe
   Wilke, Pierre
   Shao, Zhong
TI CompCertELF: Verified Separate Compilation of C Programs into ELF Object
   Files
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Verified Separate Compilation; Assembler Verification; Generation of
   Object Files
ID FORMAL VERIFICATION
AB We present CompCertELF, the first extension to CompCert that supports verified compilation from C programs all the way to a standard binary file format, i.e., the ELF object format. Previous work on Stack-Aware CompCert provides a verified compilation chain from C programs to assembly programs with a realistic machine memory model. We build CompCertELF by modifying and extending this compilation chain with a verified assembler which further transforms assembly programs into ELF object files.
   CompCert supports large-scale verification via verified separate compilation: C modules can be written and compiled separately, and then linked together to get a target program that refines the semantics of the program linked from the source modules. However, verified separate compilation in CompCert only works for compilation to assembly programs, not to object files. For the latter, the main difficulty is to bridge the two different views of linking: one for CompCert's programs that allows arbitrary shuffling of global definitions by linking and the other for object files that treats blocks of encoded definitions as indivisible units.
   We propose a lightweight approach that solves the above problem without any modification to CompCert's framework for verified separate compilation: by introducing a notion of syntactical equivalence between programs and proving the commutativity between syntactical equivalence and the two different kinds of linking, we are able to transit from the more abstract linking operation in CompCert to the more concrete one for ELF object files. By applying this approach to CompCertELF, we obtain the first compiler that supports verified separate compilation of C programs into ELF object files.
C1 [Wang, Yuting] Shanghai Jiao Tong Univ, Shanghai, Peoples R China.
   [Xu, Xiangzhe] Nanjing Univ, Nanjing, Peoples R China.
   [Wilke, Pierre] Cent Supelec, Paris, France.
   [Shao, Zhong] Yale Univ, New Haven, CT 06520 USA.
C3 Shanghai Jiao Tong University; Nanjing University; Universite Paris
   Saclay; Yale University
RP Wang, YT (corresponding author), Shanghai Jiao Tong Univ, Shanghai, Peoples R China.
EM yuting.wang@sjtu.edu.cn; xxz@smail.nju.edu.cn;
   pierre.wilke@centralesupelec.fr; zhong.shao@yale.edu
OI Wang, Yuting/0000-0003-3990-2418; Shao, Zhong/0000-0001-8184-7649
FU NSF [1521523, 1715154, 1763399]; Direct For Computer & Info Scie &
   Enginr; Division Of Computer and Network Systems [1715154] Funding
   Source: National Science Foundation; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1763399] Funding Source: National Science Foundation
FX We would like to thank Jeremie Koenig and anonymous referees for helpful
   feedback that improved this paper significantly. This research is based
   on work supported in part by NSF grants 1521523, 1715154, and 1763399.
   The fourth author is a co-founder of and has an equity interest in
   CertiK Global Ltd. CertiK has licensed Yale University's intellectual
   property, which is related to the NSF grants 1521523, 1715154, and
   1763399. Any opinions, findings, and conclusions or recommendations
   expressed in this material are those of the authors and do not
   necessarily reflect the views of the National Science Foundation.
CR Amadio RM, 2014, LECT NOTES COMPUT SC, V8552, P1, DOI 10.1007/978-3-319-12466-7_1
   Appel AW, 2017, PHILOS T R SOC A, V375, DOI 10.1098/rsta.2016.0331
   Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Besson F, 2017, LECT NOTES COMPUT SC, V10499, P81, DOI 10.1007/978-3-319-66107-0_6
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Jiang HR, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P111, DOI 10.1145/3314221.3314595
   Kang J, 2016, ACM SIGPLAN NOTICES, V51, P178, DOI 10.1145/2914770.2837642
   Kell S, 2016, ACM SIGPLAN NOTICES, V51, P607, DOI 10.1145/3022671.2983996
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X., 2005, COMPCERT VERIFIED CO
   Leroy X, 2008, J AUTOM REASONING, V41, P1, DOI 10.1007/s10817-008-9099-0
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Leroy Xavier, 2012, Research Report RR-7987
   Lööw A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1041, DOI 10.1145/3314221.3314622
   Morrisett G, 2012, ACM SIGPLAN NOTICES, V47, P395, DOI 10.1145/2345156.2254111
   Mullen E, 2016, ACM SIGPLAN NOTICES, V51, P448, DOI [10.1145/2980983.2908109, 10.1145/2908080.2908109]
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Sevcík J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P43, DOI 10.1145/1926385.1926393
   Song Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371091
   Stewart G, 2015, ACM SIGPLAN NOTICES, V50, P275, DOI [10.1145/2676726.2676985, 10.1145/2775051.2676985]
   Stewart Gordon, 2015, THESIS PRINCETON U
   Tan G, 2018, J AUTOM REASONING, V60, P257, DOI 10.1007/s10817-017-9429-1
   Tan YK, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000229
   Wang YT, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290375
NR 26
TC 9
Z9 9
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 197
DI 10.1145/3428265
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900074
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Cutler, JW
   Licata, DR
   Danner, N
AF Cutler, Joseph W.
   Licata, Daniel R.
   Danner, Norman
TI Denotational Recurrence Extraction for Amortized Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE recurrence extraction; resource analysis; amortized analysis; cost
   semantics; higher order recurrences; denotational semantics
ID COST-ANALYSIS
AB A typical way of analyzing the time complexity of functional programs is to extract a recurrence expressing the running time of the program in terms of the size of its input, and then to solve the recurrence to obtain a big-O bound. For recurrence extraction to be compositional, it is also necessary to extract recurrences for the size of outputs of helper functions. Previous work has developed techniques for using logical relations to state a formal correctness theorem for a general recurrence extraction translation: a program is bounded by a recurrence when the operational cost is bounded by the extracted cost, and the output value is bounded, according to a value bounding relation defined by induction on types, by the extracted size. This previous work supports higher-order functions by viewing recurrences as programs in a lambda-calculus, or as mathematical entities in a denotational semantics thereof. In this paper, we extend these techniques to support amortized analysis, where costs are rearranged from one portion of a program to another to achieve more precise bounds. We give an intermediate language in which programs can be annotated according to the banker's method of amortized analysis; this language has an affine type system to ensure credits are not spent more than once. We give a recurrence extraction translation of this language into a recurrence language, a simply-typed lambda-calculus with a cost type, and state and prove a bounding logical relation expressing the correctness of this translation. The recurrence language has a denotational semantics in preorders, and we use this semantics to solve recurrences, e.g analyzing binary counters and splay trees.
C1 [Cutler, Joseph W.; Licata, Daniel R.; Danner, Norman] Wesleyan Univ, Middletown, CT 06459 USA.
C3 Wesleyan University
RP Cutler, JW (corresponding author), Wesleyan Univ, Middletown, CT 06459 USA.
EM jwcutler@wesleyan.edu; dlicata@wesleyan.edu; ndanner@wesleyan.edu
FU National Science Foundation [CCF-1618203]; Air Force Office of
   Scientific Research [FA9550-161-0292]; United States Air Force Research
   Laboratory [FA9550-151-0053]
FX The authors would like to thank the anonymous ICFP reviewers for their
   very thoughtful feedback. We also thank the reviewers from ESOP for
   suggesting an analysis of splay trees as a way to demonstrate the
   expressiveness of.A. Finally, the first author would like to thank Alex
   Kavvos for numerous clarifying conversations during the course of this
   work. This material is based upon work supported by the National Science
   Foundation under Grant Number CCF-1618203, the Air Force Office of
   Scientific Research under award number FA9550-161-0292, and the United
   States Air Force Research Laboratory under agreement number
   FA9550-151-0053. The U.S. Government is authorized to reproduce and
   distribute reprints for Governmental purposes notwithstanding any
   copyright notation thereon. The views and conclusions contained herein
   are those of the authors and should not be interpreted as necessarily
   representing the official policies or endorsements, either expressed or
   implied, of the United States Air Force Research Laboratory, the U.S.
   Government or Carnegie Mellon University.
CR Albert E, 2013, ACM T COMPUT LOG, V14, DOI 10.1145/2499937.2499943
   Albert E, 2012, THEOR COMPUT SCI, V413, P142, DOI 10.1016/j.tcs.2011.07.009
   Albert E, 2011, J AUTOM REASONING, V46, P161, DOI 10.1007/s10817-010-9174-1
   [Anonymous], 1998, Purely Functional Data Structures
   Atkey Robert, 2018, P 33 ANN ACM IEEE S, p56S65, DOI [10.1145/3209108, DOI 10.1145/3209108]
   Benzinger R, 2004, THEOR COMPUT SCI, V318, P79, DOI 10.1016/j.tcs.2003.10.022
   Cutler Joseph W., 2020, ARXIV200615036
   Danielsson NA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1328438.1328457
   Danner N., 2013, WORKSH PROGR LANG ME, P25
   Danner N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P140, DOI 10.1145/2784731.2784749
   Danner N, 2007, LOG METH COMPUT SCI, V3, DOI 10.2168/LMCS-3(1:9)2007
   Danner Norman, 2020, ARXIV200207262V1
   Alonso-Blas DE, 2012, LECT NOTES COMPUT SC, V7460, P405, DOI 10.1007/978-3-642-33125-1_27
   Flores-Montoya A, 2016, LECT NOTES COMPUT SC, V9995, P254, DOI 10.1007/978-3-319-48989-6_16
   GIRARD JY, 1992, THEOR COMPUT SCI, V97, P1, DOI 10.1016/0304-3975(92)90386-T
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Hoffmann J, 2015, LECT NOTES COMPUT SC, V9032, P132, DOI 10.1007/978-3-662-46669-8_6
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Hofmann M, 2003, INFORM COMPUT, V183, P57, DOI 10.1016/S0890-5401(03)00009-9
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hofmann M, 2002, ACM SIGPLAN NOTICES, V37, P260, DOI 10.1145/565816.503297
   Hudson Bowornmet, 2016, THESIS WESLEYAN U
   Jost S, 2017, J AUTOM REASONING, V59, P87, DOI 10.1007/s10817-016-9398-9
   Kavvos GA, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371083
   Kincaid Z, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158142
   Knoth T, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P253, DOI 10.1145/3314221.3314602
   LEMETAYER D, 1988, ACM T PROGR LANG SYS, V10, P248, DOI 10.1145/42190.42347
   Licata Daniel R., 2017, LIPIcs, V84, DOI [10.4230/LIPIcs.FSCD.2017.25, DOI 10.4230/LIPICS.FSCD.2017.25]
   McBride Conor, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P207, DOI 10.1007/978-3-319-30936-1_12
   Mitchell John C., 1985, POPL '85, P37, DOI DOI 10.1145/318593.318606
   Niu Yue, 2018, LOGIC PROGRAMMING AR, V57, P543
   Orchard D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341714
   Reed Jason., 3 INF ACM SIGPLAN WO
   Rosendahl M., 1989, FPCA 89, P144, DOI DOI 10.1145/99370.99381
   Sands D., 1990, THESIS U LONDON
   Shultis J, 1985, CUCS28885
   SLEATOR DD, 1985, J ACM, V32, P652, DOI 10.1145/3828.3835
   TARJAN RE, 1985, SIAM J ALGEBRA DISCR, V6, P306, DOI 10.1137/0606031
   Van Stone K., 2003, THESIS CARNEGIE MELL
   Wang P, 2017, P ACM PROGRAM LANG, V1, P79
   WEGBREIT B, 1975, COMMUN ACM, V18, P528, DOI 10.1145/361002.361016
NR 41
TC 7
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 97
DI 10.1145/3408979
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700011
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Mével, G
   Jourdan, JH
   Pottier, F
AF Mevel, Glen
   Jourdan, Jacques-Henri
   Pottier, Francois
TI Cosmo: A Concurrent Separation Logic for Multicore OCaml
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE separation logic; program verification; concurrency; weak memory
AB Multicore OCaml extends OCaml with support for shared-memory concurrency. It is equipped with a weak memory model, for which an operational semantics has been published. This begs the question: what reasoning rules can one rely upon while writing or verifying Multicore OCaml code? To answer it, we instantiate Iris, a modern descendant of Concurrent Separation Logic, for Multicore OCaml. This yields a low-level program logic whose reasoning rules expose the details of the memory model. On top of it, we build a higher-level logic, Cosmo, which trades off some expressive power in return for a simple set of reasoning rules that allow accessing nonatomic locations in a data-race-free manner, exploiting the sequentially-consistent behavior of atomic locations, and exploiting the release/acquire behavior of atomic locations. Cosmo allows both low-level reasoning, where the details of the Multicore OCaml memory model are apparent, and high-level reasoning, which is independent of this memory model. We illustrate this claim via a number of case studies: we verify several implementations of locks with respect to a classic, memory-model-independent specification. Thus, a coarse-grained application that uses locks as the sole means of synchronization can be verified in the Concurrent-Separation-Logic fragment of Cosrno, without any knowledge of the weak memory model.
C1 [Mevel, Glen] Univ Paris Saclay, Lab Rech Informat, CNRS, INRIA, F-91405 Orsay, France.
   [Jourdan, Jacques-Henri] Univ Paris Saclay, Lab Rech Informat, CNRS, F-91405 Orsay, France.
   [Pottier, Francois] INRIA, Orsay, France.
C3 Microsoft; Inria; Centre National de la Recherche Scientifique (CNRS);
   Universite Paris Cite; Universite Paris Saclay; Universite Paris Cite;
   Universite Paris Saclay; Centre National de la Recherche Scientifique
   (CNRS); Inria
RP Mével, G (corresponding author), Univ Paris Saclay, Lab Rech Informat, CNRS, INRIA, F-91405 Orsay, France.
EM glen.mevel@inria.fr; jacques-henri.jourdan@lri.fr;
   francois.pottier@inria.fr
OI Pottier, Francois/0000-0002-4069-1235; Jourdan,
   Jacques-Henri/0000-0002-9781-7097
CR Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Bender John, 2019, P ACM PROGR LANG 3 O
   Birkedal Lars, 2020, Lecture Notes on Iris: Higher-Order Concurrent Separation Logic
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Buisse A, 2011, ELECTRON NOTES THEOR, V276, P121, DOI 10.1016/j.entcs.2011.09.018
   Dang Hoang-Hai, 2020, P ACM PROGR LANG
   Doko M, 2017, LECT NOTES COMPUT SC, V10201, P448, DOI 10.1007/978-3-662-54434-1_17
   Doko M, 2016, LECT NOTES COMPUT SC, V9583, P413, DOI 10.1007/978-3-662-49122-5_20
   Dolan Stephan, 2018, MULTICORE OCAML DEV
   Dolan Stephen, PROGRAMMING LANGUAGE, P242
   Gotsman A, 2007, LECT NOTES COMPUT SC, V4807, P19
   Hobor A, 2008, LECT NOTES COMPUT SC, V4960, P353
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Jung Ralf, 2019, IRIS WORKSH
   Kaiser Jan-Oliver, 2017, EUR C OBJ OR PROGR E, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.17, 10.4230/LIPIcs.ECOOP.2017]
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Leroy Xavier, 2019, OCAML SYSTEM DOCUMEN
   Lochbihler A, 2012, LECT NOTES COMPUT SC, V7211, P497, DOI 10.1007/978-3-642-28869-2_25
   Mevel Glen, 2020, COQ PROOFS COSMO
   O'Hearn P, 2019, COMMUN ACM, V62, P86, DOI 10.1145/3211968
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Parkinson Matthew, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P297, DOI 10.1145/1190216.1190261
   Sieczkowski F, 2015, LECT NOTES COMPUT SC, V9032, P736, DOI 10.1007/978-3-662-46669-8_30
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Turon A, 2012, ACM SIGPLAN NOTICES, V47, P157, DOI 10.1145/2345156.2254084
   Vafeiadis V, 2017, LECT NOTES COMPUT SC, V10426, P30, DOI 10.1007/978-3-319-63387-9_2
   Vafeiadis V, 2013, ACM SIGPLAN NOTICES, V48, P867, DOI [10.1145/2544173.2509532, 10.1145/2509136.2509532]
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 33
TC 8
Z9 8
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 96
DI 10.1145/3408978
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700010
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Serrano, A
   Hage, J
   Jones, SP
   Vytiniotis, D
AF Serrano, Alejandro
   Hage, Jurriaan
   Jones, Simon Peyton
   Vytiniotis, Dimitrios
TI A Quick Look at Impredicativity
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Type systems; irnpredicative polymorphism; constraint-based inference
ID POLYMORPHISM; INFERENCE
AB Type inference for parametric polymorphism is wildly successful, but has always suffered from an embarrassing flaw: polymorphic types are themselves not first class. We present Quick Look, a practical, implemented, and deployable design for impredicative type inference. To demonstrate our claims, we have modified GHC, a production-quality Haskell compiler, to support impredicativity. The changes required are modest, localised, and are fully compatible with GHC's myriad other type system extensions.
C1 [Serrano, Alejandro] 47 Degrees, San Fernando, Spain.
   [Serrano, Alejandro; Hage, Jurriaan] Univ Utrecht, Utrecht, Netherlands.
   [Jones, Simon Peyton] Microsoft Res, Cambridge, England.
   [Vytiniotis, Dimitrios] DeepMind, London, England.
C3 Utrecht University; Microsoft
RP Serrano, A (corresponding author), 47 Degrees, San Fernando, Spain.; Serrano, A (corresponding author), Univ Utrecht, Utrecht, Netherlands.
EM alejandro.serrano@47deg.com; A.SerranoMena@uu.nl; J.Hage@uu.nl;
   dvytin@google.com
CR Dunfield J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290322
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   Eisenberg RA, 2018, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '18), P94, DOI 10.1145/3242744.3242753
   Eisenberg RA, 2016, LECT NOTES COMPUT SC, V9632, P229, DOI 10.1007/978-3-662-49498-1_10
   Emrich Frank, 2020, PLDI '20: Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation, P423, DOI 10.1145/3385412.3386003
   Garrigue J, 1999, INFORM COMPUT, V155, P134, DOI 10.1006/inco.1999.2830
   Jalali-Naini A.R., 2011, IMPREDICATIVE POLYMO, V6, P1
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Jones Simon Peyton, 2019, GHC PROPOSAL LSIMPLI
   Le Botlan D, 2003, ACM SIGPLAN NOTICES, V38, P27, DOI 10.1145/944746.944709
   Le Botlan D, 2009, INFORM COMPUT, V207, P726, DOI 10.1016/j.ic.2008.12.006
   Leijen D, 2005, ACM SIGPLAN NOTICES, V40, P144, DOI 10.1145/1090189.1086385
   Leijen D, 2009, ACM SIGPLAN NOTICES, V44, P66, DOI 10.1145/1594834.1480891
   Leijen D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283
   MILLER D, 1992, J SYMB COMPUT, V14, P321, DOI 10.1016/0747-7171(92)90011-R
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MITCHELL JC, 1988, INFORM COMPUT, V76, P211, DOI 10.1016/0890-5401(88)90009-0
   Odersky Martin., 1996, Proceedings of the 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL'96, page, P54
   OTOOLE JW, 1989, SIGPLAN NOTICES, V24, P207, DOI 10.1145/74818.74836
   Pfenning Frank., 1995, FUND INFORM, V19
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pottier F, 2006, ACM SIGPLAN NOTICES, V41, P232, DOI 10.1145/1111320.1111058
   Rémy D, 2005, ACM SIGPLAN NOTICES, V40, P130, DOI 10.1145/1090189.1086383
   Russo CV, 2009, ML'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN WORKSHOP ON ML, P3
   Serrano Alejandro, 2018, P 39 ACM SIGPLAN C P, DOI DOI 10.1145/3192366.3192389
   Vytiniotis D, 2006, ACM SIGPLAN NOTICES, V41, P251, DOI 10.1145/1160074.1159838
   Vytiniotis D, 2011, J FUNCT PROGRAM, V21, P333, DOI 10.1017/S0956796811000098
   Vytiniotis D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P295
   WELLS JB, 1994, IEEE S LOG, P176
NR 29
TC 8
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 89
DI 10.1145/3408971
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700003
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Raghothaman, M
   Mendelson, J
   Zhao, D
   Naik, M
   Scholz, B
AF Raghothaman, Mukund
   Mendelson, Jonathan
   Zhao, David
   Naik, Mayur
   Scholz, Bernhard
TI Provenance-Guided Synthesis of Datalog Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program synthesis; Syntax-Guided Synthesis (SyGuS); Datalog;
   Counter-Example Guided Inductive Synthesis (CEGIS); data provenance; SAT
   solvers
ID LOGIC PROGRAMS
AB We propose a new approach to synthesize Datalog programs from input-output specifications. Our approach leverages query provenance to scale the counterexample-guided inductive synthesis (CEGIS) procedure for program synthesis. In each iteration of the procedure, a SAT solver proposes a candidate Datalog program, and a Datalog solver evaluates the proposed program to determine whether it meets the desired specification. Failure to satisfy the specification results in additional constraints to the SAT solver. We propose efficient algorithms to learn these constraints based on "why" and "why not" provenance information obtained from the Datalog solver. We have implemented our approach in a tool called PROSYNTH and present experimental results that demonstrate significant improvements over the state-of-the-art, including in synthesizing invented predicates, reducing running times, and in decreasing variance in synthesis performance. On a suite of 40 synthesis tasks from three different domains, PROSYNTH is able to synthesize the desired program in 10 seconds on average per task-an order of magnitude faster than baseline approaches-and takes under a second for 28 of them.
C1 [Raghothaman, Mukund] Univ Southern Calif, Los Angeles, CA 90007 USA.
   [Mendelson, Jonathan; Naik, Mayur] Univ Penn, Philadelphia, PA 19104 USA.
   [Zhao, David; Scholz, Bernhard] Univ Sydney, Sydney, NSW, Australia.
C3 University of Southern California; University of Pennsylvania;
   University of Sydney
RP Raghothaman, M (corresponding author), Univ Southern Calif, Los Angeles, CA 90007 USA.
EM raghotha@usc.edu; jonom@seas.upenn.edu; dzha3983@uni.sydney.edu.au;
   mhnaik@cis.upenn.edu; bernhard.scholz@sydney.edu.au
OI Zhao, David/0000-0002-3857-5016; Raghothaman, Mukund/0000-0003-2879-0932
FU U.S. Government through NSF awards [1737858, 1836936]; U.S. Government
   through ONR award [N00014-18-1-2021]; Australian Government through the
   Australian Research Council [ARC DP180104030]; Facebook Research Award
FX We thank the anonymous reviewers and Sasha Rubin for their insightful
   feedback. This research was supported in part by the U.S. Government
   through NSF awards #1737858 and #1836936 and ONR award
   #N00014-18-1-2021, by the Australian Government through the Australian
   Research Council's Discovery Projects funding scheme (project ARC
   DP180104030), and by a Facebook Research Award.
CR Abiteboul Serge, 1994, FDN DATABASES LOGICA
   Albarghouthi A, 2017, LECT NOTES COMPUT SC, V10416, P689, DOI 10.1007/978-3-319-66158-2_44
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 1994, Program Analysis and Specialization for the C Programming Language
   [Anonymous], 1974, Proceedings of the 1974 ACM SIGFIDET (now SIGMOD) workshop on Data description, access and control, ACM, DOI DOI 10.1145/800296.811515
   Aref M, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1371, DOI 10.1145/2723372.2742796
   Buneman P, 2001, LECT NOTES COMPUT SC, V1973, P316
   Cheney J, 2007, FOUND TRENDS DATABAS, V1, P379, DOI 10.1561/1900000006
   Chiticariu L., 2006, VLDB, P79
   Cropper A, 2015, LECT NOTES ARTIF INT, V9046, P62, DOI 10.1007/978-3-319-23708-4_5
   Czerniak J, 2003, SPRINGER INT SER ENG, V752, P41
   Das Sarma A, 2008, PROC INT CONF DATA, P1023
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   De Raedt L, 2004, LECT NOTES ARTIF INT, V3244, P19
   De Raedt L, 2008, COGN TECHNOL, P1
   Deutch D, 2015, PROC VLDB ENDOW, V8, P1394
   Deutch Daniel., 2014, P 17 INT C DAT THEOR, P201, DOI [DOI 10.5441/002/ICDT.2014.22, 10.5441/002/icdt.2014.22]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Flener P, 1999, J LOGIC PROGRAM, V41, P141, DOI 10.1016/S0743-1066(99)00028-X
   Green Todd., P 33 INT C VER LARG, P675
   Green Todd J., 2007, PODS, DOI DOI 10.1145/1265530.1265535
   Jordan H, 2016, LECT NOTES COMPUT SC, V9780, P422, DOI 10.1007/978-3-319-41540-6_23
   Karvounarakis G., 2010, SIGMOD, P951, DOI DOI 10.1145/1807167.1807269
   Kitzelmann E, 2010, LECT NOTES COMPUT SC, V5812, P50
   Kohler Sven, 2012, Datalog in Academia and Industry. Proceedings of the Second International Workshop, Datalog 2.0, P111, DOI 10.1007/978-3-642-32925-8_12
   Lee S, 2019, VLDB J, V28, P47, DOI 10.1007/s00778-018-0518-5
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   MUGGLETON S, 1995, NEW GENERAT COMPUT, V13, P245, DOI 10.1007/BF03037227
   Muggleton S, 1999, COMMUN ACM, V42, P42, DOI 10.1145/319382.319390
   Muggleton SH, 2015, MACH LEARN, V100, P49, DOI 10.1007/s10994-014-5471-y
   Nieuwenhuis R, 2005, LECT NOTES COMPUT SC, V3452, P36
   QUINLAN JR, 1995, NEW GENERAT COMPUT, V13, P287, DOI 10.1007/BF03037228
   Si XJ, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P6117
   Si XJ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P515, DOI 10.1145/3236024.3236034
   Smaragdakis Y, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P17, DOI 10.1145/1926385.1926390
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang CK, 2018, IEEE RADIO WIRELESS, P157, DOI 10.1109/RWS.2018.8304973
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   Yun IS, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P363
   Zeller A, 1999, LECT NOTES COMPUT SC, V1687, P253, DOI 10.1145/318774.318946
   Zeng Q, 2014, PROC VLDB ENDOW, V8, P197, DOI 10.14778/2735508.2735510
   Zhang X, 2014, ACM SIGPLAN NOTICES, V49, P239, DOI [10.1145/2594291.2594327, 10.1145/2666356.2594327]
   Zhao David., 2019, ARXIV190705045
   Zloof MosheM., 1975, VLDB 75, P1
NR 45
TC 15
Z9 15
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 62
DI 10.1145/3371130
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400063
OA gold
DA 2024-07-18
ER

PT J
AU Wang, PX
   Fu, HF
   Chatterjee, K
   Deng, YX
   Xu, M
AF Wang, Peixin
   Fu, Hongfei
   Chatterjee, Krishnendu
   Deng, Yuxin
   Xu, Ming
TI Proving Expected Sensitivity of Probabilistic Programs with Randomized
   Variable-Dependent Termination Time
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Probabilistic Programs; Martingales; Expected Sensitivity
ID STABILITY; METRICS
AB The notion of program sensitivity (aka Lipschitz continuity) specifies that changes in the program input result in proportional changes to the program output. For probabilistic programs the notion is naturally extended to expected sensitivity. A previous approach develops a relational program logic framework for proving expected sensitivity of probabilistic while loops, where the number of iterations is fixed and bounded. In this work, we consider probabilistic while loops where the number of iterations is not fixed, but randomized and depends on the initial input values. We present a sound approach for proving expected sensitivity of such programs. Our sound approach is martingale-based and can be automated through existing martingale-synthesis algorithms. Furthermore, our approach is compositional for sequential composition of while loops under a mild side condition. We demonstrate the effectiveness of our approach on several classical examples from Gambler's Ruin, stochastic hybrid systems and stochastic gradient descent. We also present experimental results showing that our automated approach can handle various probabilistic programs in the literature.
C1 [Wang, Peixin] Shanghai Jiao Tong Univ, Basics Lab, Shanghai, Peoples R China.
   [Fu, Hongfei] Shanghai Jiao Tong Univ, John Floperoft Ctr Comp Sci, Shanghai, Peoples R China.
   [Chatterjee, Krishnendu] IST Austria, Klosterneuburg, Austria.
   [Deng, Yuxin; Xu, Ming] East China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai, Peoples R China.
   [Deng, Yuxin] Pengcheng Lab, Ctr Quantum Comp, Shenzhen, Peoples R China.
C3 Shanghai Jiao Tong University; Shanghai Jiao Tong University; Institute
   of Science & Technology - Austria; East China Normal University
RP Fu, HF (corresponding author), Shanghai Jiao Tong Univ, John Floperoft Ctr Comp Sci, Shanghai, Peoples R China.
EM wangpeixin@sjtu.edu.cn; fuhf@cs.sjtu.edu.cn;
   kristineridu.chatterjee@ist.ac.al; yxdeng@sei.ecnu.edu.cn;
   mxu@cs.ecnu.edu.cn
RI Deng, Yuxin/AHE-3663-2022; Xu, Ming/ISA-6191-2023
OI Deng, Yuxin/0000-0003-0753-418X; Fu, Hongfei/0000-0002-7947-3446
FU National Natural Science Foundation of China (NSFC) [61802254, 61672229,
   61832015, 61772336, 11871221]; Austrian Science Fund (FWF) NFN
   [S11407-N23]
FX We thank anonymous reviewers for helpful comments, especially for
   pointing to us a scenario of piecewise-linear approximation (Remark 5).
   The research was partially supported by the National Natural Science
   Foundation of China (NSFC) under Grant No. 61802254, 61672229, 61832015,
   61772336,11871221 andAustrian Science Fund (FWF) NFN under Grant No.
   S11407-N23 (RiSE/SHiNE). We thank Prof. Yuxi Fu, director of the BASICS
   Lab at Shanghai Jiao Tong University, for his support.
CR Abate A, 2010, EUR J CONTROL, V16, P624, DOI 10.3166/EJC.16.624-641
   Agrawal S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158122
   Aguirre Alejandro, 2019, ABS190106540 CORR
   ALDOUS D, 1983, LECT NOTES MATH, V986, P243
   Barthe G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158145
   Barthe G, 2017, ACM SIGPLAN NOTICES, V52, P161, DOI 10.1145/3093333.3009896
   Barthe G, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P97
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Barthe Gilles, 2016, IACR CRYPTOLOGY EPRI, V2016, P912
   Billingsley P., 1995, PROBABILITY MEASURE
   Bousquet O, 2002, J MACH LEARN RES, V2, P499, DOI 10.1162/153244302760200704
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chatterjee K, 2018, PROCEEDINGS OF THE TWENTY-SEVENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P4700
   Chatterjee K, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3174800
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Chatterjee Krishnendu, 2012, FDN SOFTW SCI COMP S, DOI [10.1007/978-3-642-28729-9_18, DOI 10.1007/978-3-642-28729-9_18]
   Chaudhuri S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P57, DOI 10.1145/1706299.1706308
   de Amorim AA, 2017, ACM SIGPLAN NOTICES, V52, P545, DOI [10.1145/3093333.3009890, 10.1145/3009837.3009890]
   Desharnais J, 2004, THEOR COMPUT SCI, V318, P323, DOI 10.1016/j.tcs.2003.09.013
   Dwork C, 2006, LECT NOTES COMPUT SC, V3876, P265, DOI 10.1007/11681878_14
   Dwork C, 2013, FOUND TRENDS THEOR C, V9, P211, DOI 10.1561/0400000042
   Eldib H, 2015, IEEE T COMPUT AID D, V34, P1558, DOI 10.1109/TCAD.2015.2424951
   Farkas J., 1894, Mathematikaies Termeszettudomanyi Ertesito, V12
   Feng YJ, 2017, LECT NOTES COMPUT SC, V10482, P400, DOI 10.1007/978-3-319-68167-2_26
   Fu HF, 2019, LECT NOTES COMPUT SC, V11388, P468, DOI 10.1007/978-3-030-11245-5_22
   Fu HF, 2012, LECT NOTES COMPUT SC, V7392, P227, DOI 10.1007/978-3-642-31585-5_23
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Hardt M., 2016, PR MACH LEARN RES, V48, P1225
   Huang MZ, 2018, LECT NOTES COMPUT SC, V11275, P181, DOI 10.1007/978-3-030-02768-1_11
   Huang Zixin, 2018, ATVA, DOI [10.1007/978-3-030-01090-4_23, DOI 10.1007/978-3-030-01090-4_23]
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Kupferman Orna, 1997, LECT NOTES COMPUTER, V1536, DOI [10.1007/3-540-49213-5_14, DOI 10.1007/3-540-49213-5_14]
   McIver Annabelle, 2017, P ACM PROGRAMMING LA, V2, P33
   Meyn S., 1993, COMMUNICATIONS CONTR, V92, DOI 10.2307/2965732
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   Nesterov Yurii, 2013, Introductory Lectures on Convex Optimization: A Basic Course
   Ngo Van Chan, 2018, ACM SIGPLAN NOTICES, DOI [10.1145/3192366.3192394, DOI 10.1145/3192366.3192394]
   van Breugel F, 2006, THEOR COMPUT SCI, V360, P373, DOI 10.1016/j.tcs.2006.05.021
   Wang PX, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P204, DOI 10.1145/3314221.3314581
   Wang Peixin, 2019, ABS190204744 CORR
   Williams D., 1991, Probability with Martingales
   Winograd-Cort D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110254
NR 44
TC 6
Z9 6
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 25
DI 10.1145/3371093
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400026
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Huang, MZ
   Fu, HF
   Chatterjee, K
   Goharshady, AK
AF Huang, Mingzhang
   Fu, Hongfei
   Chatterjee, Krishnendu
   Goharshady, Amir Kafshdar
TI Modular Verification for Almost-Sure Termination of Probabilistic
   Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Termination; Probabilistic Programs; Verification; Almost Sure
   Termination
AB In this work, we consider the almost-sure termination problem for probabilistic programs that asks whether a given probabilistic program terminates with probability 1. Scalable approaches for program analysis often rely on modularity as their theoretical basis. In non-probabilistic programs, the classical variant rule (V-rule) of Floyd-Hoare logic provides the foundation for modular analysis. Extension of this rule to almost-sure termination of probabilistic programs is quite tricky, and a probabilistic variant was proposed by Fioriti and Hermanns in POPL 2015. While the proposed probabilistic variant cautiously addresses the key issue of integrability, we show that the proposed modular rule is still not sound for almost-sure termination of probabilistic programs.
   Besides establishing unsoundness of the previous rule, our contributions are as follows: First, we present a sound modular rule for almost-sure termination of probabilistic programs. Our approach is based on a novel notion of descent supermartingales. Second, for algorithmic approaches, we consider descent supermartingales that are linear and show that they can be synthesized in polynomial time. Finally, we present experimental results on a variety of benchmarks and several natural examples that model various types of nested while loops in probabilistic programs arid demonstrate that our approach is able to efficiently prove their almost-sure termination property.
C1 [Huang, Mingzhang] Shanghai Jiao Tong Univ, BASICS Lab, Shanghai, Peoples R China.
   [Fu, Hongfei] East China Normal Univ, Shanghai Jiao Tong Univ, Shanghai Key Lab Trustworthy Comp, Shanghai, Peoples R China.
   [Chatterjee, Krishnendu; Goharshady, Amir Kafshdar] IST Austria Inst Sci & Technol Austria, Klosterneuburg, Austria.
C3 Shanghai Jiao Tong University; Shanghai Jiao Tong University; East China
   Normal University; Institute of Science & Technology - Austria
RP Fu, HF (corresponding author), East China Normal Univ, Shanghai Jiao Tong Univ, Shanghai Key Lab Trustworthy Comp, Shanghai, Peoples R China.
EM mingzhanghuang@gmail.com; fuhf@cs.sjtu.edu.cn;
   krishnendu.chatterjee@ist.ac.at; amir.goharshady@ist.ac.at
OI Fu, Hongfei/0000-0002-7947-3446; Kafshdar Goharshady,
   Amir/0000-0003-1702-6584
FU National Natural Science Foundation of China [61772336, 61802254]; Open
   Project of Shanghai Key Laboratory of Trustworthy Computing, Vienna
   Science and Technology Fund (WWTF) [ICT15-003]; Austrian Science Fund
   (FWF) NFN Grant [S11407-N23]; ERC [279307]; IBM PhD Fellowship; DOC
   Fellowship of the Austrian Academy of Sciences (OAW) [24956]
FX The research was partially supported by the National Natural Science
   Foundation of China (Grant No. 61772336, 61802254), Open Project of
   Shanghai Key Laboratory of Trustworthy Computing, Vienna Science and
   Technology Fund (WWTF) Project ICT15-003, Austrian Science Fund (FWF)
   NFN Grant No. S11407-N23 (RiSE/SHiNE), ERC Starting Grant (279307: Graph
   Games), an IBM PhD Fellowship, and DOC Fellowship No. 24956 of the
   Austrian Academy of Sciences (OAW). We are sincerely grateful to Prof.
   Yuxi Fu, director of the support of the BASICS Lab at Shanghai Jiao Tong
   University, for his support.
CR Agrawal S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158122
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Batz K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290347
   Berkelaar M., 2004, LPSOLVE OPEN SOURCE
   Bournez O, 2005, LECT NOTES COMPUT SC, V3467, P323
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chatterjee K, 2018, PROCEEDINGS OF THE TWENTY-SEVENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P4700
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Chatterjee Krishnendu, POPL
   Chatterjee Krishnendu, 2019, VMCAI
   Claret Guillaume., 2013, Foundations of Software Engineering, P92, DOI DOI 10.1145/2491411.2491423
   Colon Michael, 2003, CAV
   Esparza Javier, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P123, DOI 10.1007/978-3-642-31424-7_14
   Etessami K, 2009, J ACM, V56, DOI 10.1145/1462153.1462154
   Farkas J., 1894, Mathematikaies Termeszettudomanyi Ertesito, V12
   Fioriti LMF, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI 10.1145/2676726.2677001
   Floyd R.W., 1967, P S APPL MATH, V19, P19
   Foster N, 2016, LECT NOTES COMPUT SC, V9632, P282, DOI 10.1007/978-3-662-49498-1_12
   Goodman N. D., 2014, DESIGN IMPLEMENTATIO
   Goodman ND., 2008, UAI, P220
   Gordon AD, 2013, ACM SIGPLAN NOTICES, V48, P403, DOI 10.1145/2480359.2429119
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Hesselink Wim H., 1993, FORM ASP COMPUT, V5
   HOEFFDING W, 1963, J AM STAT ASSOC, V58, P13, DOI 10.2307/2282952
   Huang MZ, 2018, LECT NOTES COMPUT SC, V11275, P181, DOI 10.1007/978-3-030-02768-1_11
   Huang MN., 2019, Oxford Research Encyclopedia of Literature, P1
   Jones C., 1989, THESIS U EDINBURGH
   Kahn David M., 2017, MFCS 2017, V68, P17, DOI DOI 10.4230/LIPICS.MFCS.2017.68
   Kaminski BL, 2016, LECT NOTES COMPUT SC, V9632, P364, DOI 10.1007/978-3-662-49498-1_15
   Kaminski Benjamin Lucien, 2018, ACTA INFORM, p1S31
   Katz S., 1975, Acta Informatica, V5, P333, DOI 10.1007/BF00264565
   Kupferman Orna, 1997, LECT NOTES COMPUTER, V1536, DOI [10.1007/3-540-49213-5_14, DOI 10.1007/3-540-49213-5_14]
   Lukasiewycz Martin, 2008, JAVAILP JAVA INTERFA
   Mahmoud H., 2008, Polya Urn Models
   Manning C.D., 1999, FDN STAT NATURAL LAN
   McDiarmid Colin, 1998, PROBABILISTIC METHOD
   McIver A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158121
   McIver Annabelle, 2004, PSSE
   McIver Annabelle., 2005, MG COMP SCI
   Olmedo F, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P672, DOI 10.1145/2933575.2935317
   Roy DM, 2008, ICML, V22, P26
   Sankaranarayanan Sriram, 2004, SAS 2004, p53S68
   Schrijver A., 2003, COMBINATORIAL OPTIMI
   Scibior A, 2015, ACM SIGPLAN NOTICES, V50, P165, DOI 10.1145/2804302.2804317
   Smolka Steffen, 2017, ACM SIGPLAN Notices, V52, P557, DOI 10.1145/3093333.3009843
   Thrun S, 2002, COMMUN ACM, V45, P52, DOI 10.1145/504729.504754
   Thrun S, 2000, AI MAG, V21, P93
   Tolpin David, 2016, P 28 IMPL APPL FUNCT, DOI DOI 10.1145/3064899.3064910
   Ngo VC, 2018, ACM SIGPLAN NOTICES, V53, P496, DOI [10.1145/3192366.3192394, 10.1145/3296979.3192394]
   Wang D, 2018, ACM SIGPLAN NOTICES, V53, P513, DOI 10.1145/3192366.3192408
   Wang PX, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P204, DOI 10.1145/3314221.3314581
   Williams D., 1991, Probability with Martingales
NR 53
TC 14
Z9 15
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 129
DI 10.1145/3360555
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500014
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Krikava, F
   Miller, H
   Vitek, J
AF Krikava, Filip
   Miller, Heather
   Vitek, Jan
TI Scala Implicits Are Everywhere A Large-Scale Study of the Use of Scala
   Implicits in the Wild
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Implicit parameters; implicit conversions; corpora analysis; Scala
AB The Scala programming language offers two distinctive language features implicit parameters and implicit conversions, often referred together as implicits. Announced without fanfare in 2004, implicits have quickly grown to become a widely and pervasively used feature of the language. They provide a way to reduce the boilerplate code in Scala programs. They are also used to implement certain language features without having to modify the compiler. We report on a large-scale study of the use of implicits in the wild. For this, we analyzed 7,280 Scala projects hosted on GitHub, spanning over 8.1M call sites involving implicits and 370.7K implicit declarations across 18.7M lines of Scala code.
C1 [Krikava, Filip; Vitek, Jan] Czech Tech Univ, Prague, Czech Republic.
   [Miller, Heather] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Vitek, Jan] Northeastern Univ, Boston, MA 02115 USA.
C3 Czech Technical University Prague; Carnegie Mellon University;
   Northeastern University
RP Krikava, F (corresponding author), Czech Tech Univ, Prague, Czech Republic.
RI Vitek, Jan/J-9051-2014
FU Office of Naval Research (ONR) [503353]; European Research Council under
   the European Union's Horizon 2020 research and innovation program
   [695412]; NSF [1544542, 1617892]; Czech Ministry of Education, Youth and
   Sports [CZ.02.1.010.00.015_0030000421]; Direct For Computer & Info Scie
   & Enginr; Division of Computing and Communication Foundations [1617892]
   Funding Source: National Science Foundation
FX Borja Lorente Escobar implemented an early version of the pipeline
   presented in this paper, we thank him for his contributions. We thank
   the reviewers for constructive comments that helped us improve the
   presentation. We thank Olafur Pall Geirsson for his help with SemanticDB
   and Scalameta. We thank the members of the PRL lab in Boston and Prague
   for additional comments and encouragements. This work received funding
   from the Office of Naval Research (ONR) award 503353, from the European
   Research Council under the European Union's Horizon 2020 research and
   innovation program (grant agreement 695412), the NSF (awards 1544542,
   and 1617892), and the Czech Ministry of Education, Youth and Sports
   (grant agreement CZ.02.1.010.00.015_0030000421).
CR Burmako Eugene, 2017, UNIFICATION COMPILE, DOI [10.5075/epfl-thesis-7159, DOI 10.5075/EPFL-THESIS-7159]
   Cantero Jorge Vicente, 2018, SPEEDING COMPILATION
   De Bleser Jonas, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P457, DOI 10.1109/MSR.2019.00072
   De Koster Joeri, 2015, Ph. D. Dissertation. PhD thesis,
   Gousios G, 2013, IEEE WORK CONF MIN S, P233, DOI 10.1109/MSR.2013.6624034
   Lammel R, 2006, C GEN PROGR COMP ENG, DOI [10.1145/1173706.1173732, DOI 10.1145/1173706.1173732]
   Lewis J. R., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P108, DOI 10.1145/325694.325708
   Li Haoyi, 2016, IMPLICIT DESIGN PATT
   Lightbend, 2018, SCALA DEV SUVEY
   Lopes CV, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133908
   Miller H, 2014, LECT NOTES COMPUT SC, V8586, P308
   Miller H, 2013, ACM SIGPLAN NOTICES, V48, P183, DOI [10.1145/2509136.2509547, 10.1145/2544173.2509547]
   Odersky M., 2009, P 29 IARCS ANN C FDN, V4, P427, DOI DOI 10.4230/LIPICS.FSTTCS.2009.2338
   Odersky Martin, 2017, P ACM PROGR LANG 2 P
   Odersky Martin, 2017, SCALADAYS CHICAGO
   Oliveira BCD, 2012, ACM SIGPLAN NOTICES, V47, P35, DOI 10.1145/2345156.2254070
   Oliveira BCDS, 2010, ACM SIGPLAN NOTICES, V45, P341, DOI 10.1145/1932682.1869489
   Phillips Andrew, 2014, SCALA PUZZLERS
   Pradel Michael, 2015, ECOOP, DOI DOI 10.4230/LIPIcs.ECOOP.2015.519
   Reynolds John C., 1991, THEORETICAL ASPECTS, DOI [10.1007/3-540-54415-1_70, DOI 10.1007/3-540-54415-1_70]
   Rouvoet Arjen, 2016, THESIS TU DELFT
   Sabin Miles, 2019, SHAPELESS
   Schrijvers T, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000242
   Suereth Joshua D, 2013, IMPLICIT CLASSES
   Tange O, 2011, TUSENIX Mag., V36, P42
   Tasharofi S, 2013, LECT NOTES COMPUT SC, V7920, P302, DOI 10.1007/978-3-642-39038-8_13
   Torreborre Eric, 2017, ACHIEVING 3 2X FASTE
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
NR 28
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 163
DI 10.1145/3360589
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500048
OA gold
DA 2024-07-18
ER

PT J
AU Mariano, B
   Reese, J
   Xu, SY
   Nguyen, T
   Qiu, XK
   Foster, JS
   Solar-Lezama, A
AF Mariano, Benjamin
   Reese, Josh
   Xu, Siyuan
   Nguyen, ThanhVu
   Qiu, Xiaokang
   Foster, Jeffrey S.
   Solar-Lezama, Armando
TI Program Synthesis with Algebraic Library Specifications
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Sketch-based Program Synthesis; Algebraic Specification; Term Rewriting;
   Java
AB A key challenge in program synthesis is synthesizing programs that use libraries, which most real-world software does. The current state of the art is to model libraries with mock library implementations that perform the same function in a simpler way. However, mocks may still be large and complex, and must include many implementation details, both of which could limit synthesis performance. To address this problem, we introduce JLibSketch, a Java program synthesis tool that allows library behavior to be described with algebraic specifications, which are rewrite rules for sequences of method calls, e.g., encryption followed by decryption (with the same key) is the identity. JLibSketch implements rewrite rules by compiling JLibSketch problems into problems for the Sketch program synthesis tool. More specifically, after compilation, library calls are represented by abstract data types (ADTs), and rewrite rules manipulate those ADTs. We formalize compilation and prove it sound and complete if the rewrite rules are ordered and non-unifiable. We evaluated JLibSketch by using it to synthesize nine programs that use libraries from three domains: data structures, cryptography, and file systems. We found that algebraic specifications are, on average, about half the size of mocks. We also found that algebraic specifications perform better than mocks on seven of the nine programs, sometimes significantly so, and perform equally well on the last two programs. Thus, we believe that JLibSketch takes an important step toward synthesis of programs that use libraries.
C1 [Mariano, Benjamin; Reese, Josh] Univ Maryland, College Pk, MD 20742 USA.
   [Xu, Siyuan; Qiu, Xiaokang] Purdue Univ, W Lafayette, IN 47907 USA.
   [Nguyen, ThanhVu] Univ Nebraska, Lincoln, NE 68583 USA.
   [Foster, Jeffrey S.] Tufts Univ, Medford, MA 02155 USA.
   [Solar-Lezama, Armando] MIT, 77 Massachusetts Ave, Cambridge, MA 02139 USA.
C3 University System of Maryland; University of Maryland College Park;
   Purdue University System; Purdue University; University of Nebraska
   System; University of Nebraska Lincoln; Tufts University; Massachusetts
   Institute of Technology (MIT)
RP Mariano, B (corresponding author), Univ Maryland, College Pk, MD 20742 USA.
RI Xu, Siyuan/HZJ-0557-2023
OI Xu, Siyuan/0000-0002-7999-9712; Nguyen, ThanhVu/0000-0002-4255-4592;
   Solar Lezama, Armando/0000-0001-7604-8252; Qiu,
   Xiaokang/0000-0001-9476-7349
FU National Science Foundation [CCF-1139021, CCF-1837023]
FX Thanks to the anonymous reviewers for their helpful comments. This
   research was supported in part by the National Science Foundation under
   Grant Nos. CCF-1139021 and CCF-1837023.
CR Amin Nada, 2014, Tests and Proofs. 8th International Conference (TAP 2014). Held as Part of STAF 2014. Proceedings: LNCS 8570, P20, DOI 10.1007/978-3-319-09099-3_2
   [Anonymous], 2017, LECT NOTES COMPUT SC, DOI DOI 10.1007/978-3-662-54577-5_14
   [Anonymous], 1970, Computational Problems in Abstract Algebra, DOI DOI 10.1016/B978-0-08-012975-4.50028-X
   Baader Franz, 1998, TERM REWRITING ALL
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Bornholt J, 2017, ACM SIGPLAN NOTICES, V52, P467, DOI [10.1145/3140587.3062353, 10.1145/3062341.3062353]
   Bornholt J, 2016, ACM SIGPLAN NOTICES, V51, P775, DOI 10.1145/2914770.2837666
   Cardelli L, 2017, LECT NOTES COMPUT SC, V10427, P375, DOI 10.1007/978-3-319-63390-9_20
   CHEUNG A., 2012, Proceedings of the 21st ACM International Conference on Information and Knowledge Management, CIKM '12, page, P1732, DOI DOI 10.1145/2396761.2398507
   D'Antoni L, 2016, LECT NOTES COMPUT SC, V9780, P383, DOI 10.1007/978-3-319-41540-6_21
   de Moura L, 2007, LECT NOTES ARTIF INT, V4603, P183
   Dershowitz Nachum, 1990, Handbook of Theoretical Computer Science, Volume B: Formal Models and Semantics, P243, DOI 10.1016/b978-0-444-88074-1.50011-1
   Durán F, 2010, LECT NOTES COMPUT SC, V6381, P69, DOI 10.1007/978-3-642-16310-4_6
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Ghezzi Carlo., 2007, 9th International Workshop in conjunction with the 6th ESEC/FSE joint meeting on Principles of Software Evolution, P98
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P62, DOI 10.1145/1993316.1993506
   Henkel J, 2003, LECT NOTES COMPUT SC, V2743, P431
   Henkel J, 2007, IEEE T SOFTWARE ENG, V33, P526, DOI 10.1109/TSE.2007.70705
   Henkel J, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1363102.1363105
   Hua JR, 2017, SPIN'17: PROCEEDINGS OF THE 24TH ACM SIGSOFT INTERNATIONAL SPIN SYMPOSIUM ON MODEL CHECKING OF SOFTWARE, P162, DOI 10.1145/3092282.3092285
   HUET G, 1980, J ACM, V27, P797, DOI 10.1145/322217.322230
   INGERMAN PZ, 1961, COMMUN ACM, V4, P55, DOI 10.1145/366062.366084
   Jeon J, 2016, PROC INT CONF SOFTW, P156, DOI 10.1145/2884781.2884856
   Jeon J, 2015, LECT NOTES COMPUT SC, V9207, P377, DOI 10.1007/978-3-319-21668-3_22
   Jeon Jinseong, EUR SOFTW ENG C FDN
   Lindholm Tim, 2016, JAVA VIRTUAL MACHINE
   Löding C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158098
   Mandelin D, 2005, ACM SIGPLAN NOTICES, V40, P48, DOI 10.1145/1064978.1065018
   MANN HB, 1947, ANN MATH STAT, V18, P50, DOI 10.1214/aoms/1177730491
   Newman MHA, 1942, ANN MATH, V43, P223, DOI 10.2307/1968867
   Nguyen TT, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P383, DOI 10.1145/1595696.1595767
   Raabe A, 2009, DES AUT CON, P623
   Reynolds A, 2016, LECT NOTES ARTIF INT, V9706, P133, DOI 10.1007/978-3-319-40229-1_10
   Shi KS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290386
   Singh R, 2013, ACM SIGPLAN NOTICES, V48, P15, DOI 10.1145/2499370.2462195
   Singh R, 2014, LECT NOTES COMPUT SC, V8318, P395, DOI 10.1007/978-3-642-54013-4_22
   Smith C, 2019, LECT NOTES COMPUT SC, V11388, P24, DOI 10.1007/978-3-030-11245-5_2
   Solar-Lezama Armando, 2013, International Journal on Software Tools for Technology Transfer, V15, P475, DOI 10.1007/s10009-012-0249-7
   Solar-Lezama A., 2016, The sketch programmers manual
   Solar-Lezama A, 2007, ACM SIGPLAN NOTICES, V42, P167, DOI 10.1145/1273442.1250754
   Solar-Lezama A, 2008, ACM SIGPLAN NOTICES, V43, P136, DOI 10.1145/1379022.1375599
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Suter P, 2011, LECT NOTES COMPUT SC, V6887, P298, DOI 10.1007/978-3-642-23702-7_23
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   van der Merwe Heila, 2015, ACM SIGSOFT Software Engineering Notes, V40, P1, DOI 10.1145/2830719.2830727
   Vazou Niki, 2018, POPL
   Wang XY, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133886
   Wheeler David., 2009, Sloccount
NR 48
TC 4
Z9 4
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 132
DI 10.1145/3360558
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500017
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Salvaneschi, G
   Köhler, M
   Sokolowski, D
   Haller, P
   Erdweg, S
   Mezini, M
AF Salvaneschi, Guido
   Koehler, Mirko
   Sokolowski, Daniel
   Haller, Philipp
   Erdweg, Sebastian
   Mezini, Mira
TI Language-Integrated Privacy-Aware Distributed Queries
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Data Privacy; SQL; Information-Flow Type System; Operator Placement;
   Scala
AB Distributed query processing is an effective means for processing large amounts of data. To abstract from the technicalities of distributed systems, algorithms for operator placement automatically distribute sequential data queries over the available processing units. However, current algorithms for operator placement focus on performance and ignore privacy concerns that arise when handling sensitive data.
   We present a new methodology for privacy-aware operator placement that both prevents leakage of sensitive information and improves performance. Crucially, our approach is based on an information-flow type system for data queries to reason about the sensitivity of query subcomputations. Our solution unfolds in two phases. First, placement space reduction generates deployment candidates based on privacy constraints using a syntax-directed transformation driven by the information-flow type system. Second, constraint solving selects the best placement among the candidates based on a cost model that maximizes performance. We verify that our algorithm preserves the sequential behavior of queries and prevents leakage of sensitive data. We implemented the type system and placement algorithm for a new query language SecQL and demonstrate significant performance improvements in benchmarks.
C1 [Salvaneschi, Guido; Koehler, Mirko; Sokolowski, Daniel; Mezini, Mira] Tech Univ Darmstadt, Darmstadt, Germany.
   [Haller, Philipp] KTH Royal Inst Technol, Stockholm, Sweden.
   [Erdweg, Sebastian] Johannes Gutenberg Univ Mainz, Mainz, Germany.
C3 Technical University of Darmstadt; Royal Institute of Technology;
   Johannes Gutenberg University of Mainz
RP Salvaneschi, G (corresponding author), Tech Univ Darmstadt, Darmstadt, Germany.
EM salvaneschi@cs.tu-darmstadt.de; koehler@cs.tu-darmstadt.de;
   sokolowski@cs.tu-darmstadt.de; phaller@kth.se; erdweg@uni-mainz.de;
   mezini@cs.tu-darmstadt.de
RI Sokolowski, Daniel/HTT-1994-2023; Haller, Philipp/GWZ-7695-2022
OI Sokolowski, Daniel/0000-0003-2911-8304; Haller,
   Philipp/0000-0002-2659-5271; Salvaneschi, Guido/0000-0002-9324-8894;
   Kohler, Mirko/0000-0001-5497-9785
FU German Research Foundation (DFG) within the Collaborative Research
   Center (CRC) [1053 MAKI, 1119 CROSSING]; Hessian LOEWE initiative within
   the Software-Factory 4.0 project; German Federal Ministry of Education
   and Research; Hessian Ministry of Science and the Arts within CRISP; AWS
   Cloud Credits for Research program; DFG [SA 2918/2-1, SA 2918/3-1]
FX This work has been supported by the German Research Foundation (DFG)
   within the Collaborative Research Center (CRC) 1053 MAKI and 1119
   CROSSING, by the DFG projects SA 2918/2-1 and SA 2918/3-1, by the
   Hessian LOEWE initiative within the Software-Factory 4.0 project, by the
   German Federal Ministry of Education and Research, by the Hessian
   Ministry of Science and the Arts within CRISP, and by the AWS Cloud
   Credits for Research program. This work has been performed in the
   context of the LOEWE centre emergenCITY.
CR Akka, 2019, AKK TOOLK RUNT
   [Anonymous], 2013, Proceedings of the 2013 ACM SIGMOD International Conference on Management of Data
   [Anonymous], 2017, J COMPUT SECUR, DOI DOI 10.3233/JCS-15805
   [Anonymous], 1979, 1979 ACM SIGMOD INT, DOI DOI 10.1145/582095.582123
   AWS, 2019, AWS FARG
   Bajaj S, 2014, IEEE T KNOWL DATA EN, V26, P752, DOI 10.1109/TKDE.2013.38
   Bell D. E., 1973, ESDTR73278 MITRE COR
   Bender G, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1411
   Broberg N, 2006, LECT NOTES COMPUT SC, V3924, P180
   Cardellini Valeria, 2017, ACM SIGMETRICS Performance Evaluation Review, V44, P11, DOI 10.1145/3092819.3092823
   Cheney J, 2013, ACM SIGPLAN NOTICES, V48, P403, DOI [10.1145/2544174.2500586, 10.1145/2500365.2500586]
   Cherniack Mitch, 2003, CIDR AS CA
   Copeland G., 1984, SIGMOD Record, V14, P316, DOI 10.1145/971697.602300
   Cruz Raimil, 2017, V7, P27
   Cugola G, 2013, COMPUTING, V95, P129, DOI 10.1007/s00607-012-0217-9
   Dean J, 2010, COMMUN ACM, V53, P72, DOI 10.1145/1629175.1629198
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   Derbeko P, 2016, COMPUT SCI REV, V20, P1, DOI 10.1016/j.cosrev.2016.05.001
   di Vimercati SD, 2017, PROC VLDB ENDOW, V11, P256, DOI 10.14778/3157794.3157796
   Dimitrova EB, 2019, SAC '19: PROCEEDINGS OF THE 34TH ACM/SIGAPP SYMPOSIUM ON APPLIED COMPUTING, P431, DOI 10.1145/3297280.3299731
   Dyreson CE, 1998, ACM T DATABASE SYST, V23, P1, DOI 10.1145/288086.288087
   Farnan Nicholas L., 2010, P 9 ANN ACM WORKSH P, P43, DOI [10.1145/1866919.1866926, DOI 10.1145/1866919.1866926]
   Flyvbjerg B, 2006, QUAL INQ, V12, P219, DOI 10.1177/1077800405284363
   Fournet Cedric., 2013, Proceedings of the 22Nd USENIX Conference on Security, SEC'13, P163
   Gardner RM, 1999, INT J MED INFORM, V54, P169, DOI 10.1016/S1386-5056(99)00013-1
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Guarnieri M, 2019, 2019 4TH IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P), P79, DOI 10.1109/EuroSP.2019.00016
   Huebsch R., 2003, P 29 INT C VERY LARG, P321
   Ko S.Y., 2011, HOTCLOUD
   Kuchcinski Krzysztof, 2017, JACOP JAVA CONSTRAIN
   Lakshmanan GT, 2008, IEEE INTERNET COMPUT, V12, P50, DOI 10.1109/MIC.2008.129
   Mitschke R, 2014, ACM SIGPLAN NOTICES, V49, P417, DOI [10.1145/2660193.2660242, 10.1145/2714064.2660242]
   Myers A. C., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P228, DOI 10.1145/292540.292561
   Myers A. C., 1997, Operating Systems Review, V31, P129, DOI 10.1145/269005.266669
   Oktay KY, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P153, DOI 10.1145/2723372.2723741
   Oktay KY, 2017, PROC INT CONF DATA, P733, DOI 10.1109/ICDE.2017.125
   OpenClinical, 2004, HELP HLTH EV LOG PRO
   Pietzuch P., 2006, 22 INT C DAT ENG ICD, P49, DOI [10.1109/ICDE.2006, 10.1109/ICDE.2006.105, DOI 10.1109/ICDE.2006.105]
   Popa RA, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P85
   Rompf T, 2012, COMMUN ACM, V55, P121, DOI 10.1145/2184319.2184345
   Schoepe D, 2014, ACM SIGPLAN NOTICES, V49, P25, DOI 10.1145/2692915.2628151
   Sen S, 2014, P IEEE S SECUR PRIV, P327, DOI 10.1109/SP.2014.28
   Tetali SD, 2013, ACM SIGPLAN NOTICES, V48, P271, DOI [10.1145/2544173.2509554, 10.1145/2509136.2509554]
   Thoma C, 2014, 2014 IEEE 30TH INTERNATIONAL CONFERENCE ON DATA ENGINEERING WORKSHOPS (ICDEW), P310, DOI 10.1109/ICDEW.2014.6818346
   Tian F., 2003, VLDB, P333
   TPC, 2019, TPC H BENCHM SPEC
   Tu S, 2013, PROC VLDB ENDOW, V6, P289
   Ulusoy H., 2015, PROC 10 ACM S INFORM, P285
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Weisenburger Pascal, 2017, 2017 IEEE/ACM 12th International Symposium on Software Engineering for Adaptive and Self-Managing Systems (SEAMS). Proceedings, P140, DOI 10.1109/SEAMS.2017.10
   Xing Y, 2005, PROC INT CONF DATA, P791
   Yang J, 2016, ACM SIGPLAN NOTICES, V51, P631, DOI [10.1145/2980983.2908098, 10.1145/2908080.2908098]
   Zdancewic S., 2001, Operating Systems Review, V35, P1, DOI 10.1145/502059.502036
   Zdancewic S., 2003, ELECT NOTES THEORETI, V83, P263
   Zeng Q, 2015, IEEE T KNOWL DATA EN, V27, P979, DOI 10.1109/TKDE.2014.2357018
   Zhang KH, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P515
   Zheng LT, 2003, P IEEE S SECUR PRIV, P236, DOI 10.1109/SECPRI.2003.1199340
   Zhou YL, 2006, LECT NOTES COMPUT SC, V4275, P54
NR 59
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 167
DI 10.1145/3360593
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500052
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Zhao, JX
   Oliveira, BCDS
   Schrijvers, T
AF Zhao, Jinxu
   Oliveira, Bruno C. D. S.
   Schrijvers, Tom
TI A Mechanical Formalization of Higher-Ranked Polymorphic Type Inference
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type inference; higher-rank polymorphism; mechanization
AB Modern functional programming languages, such as Haskell or OCaml, use sophisticated forms of type inference. While an important topic in the Programming Languages research, there is little work on the mechanization of the metatheory of type inference in theorem provers. In particular we are unaware of any complete formalization of the type inference algorithms that are the backbone of modern functional languages.
   This paper presents the first full mechanical formalization of the metatheory for higher-ranked polymorphic type inference. The system that we formalize is the bidirectional type system by Dunfield and Krishnaswami (DK). The DK type system has two variants (a declarative and an algorithmic one) that have been manually proven sound, complete and decidable. We present a mechanical formalization in the Abella theorem prover of DK's declarative type system with a novel algorithmic system. We have a few reasons to use a new algorithm. Firstly, our new algorithm employs worklist judgments, which precisely capture the scope of variables and simplify the formalization of scoping in a theorem prover. Secondly, while DK's original formalization comes with very well-written manual proofs, there are several details missing and some incorrect proofs, which complicate the task of writing a mechanized proof. Despite the use of a different algorithm we prove the same results as DK, although with significantly different proofs and proof techniques. Since such type inference algorithms are quite subtle and have a complex metatheory, mechanical formalizations are an important advance in type-inference research.
C1 [Zhao, Jinxu; Oliveira, Bruno C. D. S.] Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China.
   [Schrijvers, Tom] Katholieke Univ Leuven, Dept Comp Sci, Leuven, Belgium.
C3 University of Hong Kong; KU Leuven
RP Zhao, JX (corresponding author), Univ Hong Kong, Dept Comp Sci, Hong Kong, Peoples R China.
EM jxzhao@cs.hku.hk; bruno@cs.hku.hk; tom.schrijvers@cs.kuleuven.be
RI dos Santos Oliveira, Bruno Cesar/I-7977-2013; Schrijvers,
   Tom/A-6696-2016
OI Schrijvers, Tom/0000-0001-8771-5559
FU Hong Kong Research Grant Council [17210617, 17258816]; Research
   Foundation - Flanders
FX We sincerely thank the anonymous reviewers for their insightful
   comments. Ningning Xie found the issue with Lemma 29 in DK's
   formalization that we reported on this article. This work has been
   sponsored by the Hong Kong Research Grant Council projects number
   17210617 and 17258816, and by the Research Foundation - Flanders.
CR Abel A, 2011, LECT NOTES COMPUT SC, V6690, P10, DOI 10.1007/978-3-642-21691-6_5
   Abel Andreas, 2018, J FUNCT PROGRAM
   Aydemir B.E, 2005, 18 INT C THEOR PROV
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   Bertot Yves, 2006, P 2004 INT C TYP PRO
   Chang Bor-Yuh Evan, 2006, P 7 INT C VER MOD CH
   Charguéraud A, 2012, J AUTOM REASONING, V49, P363, DOI 10.1007/s10817-011-9225-2
   Chiusano P., 2015, UNISON
   Chlipala A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Dubois C, 1999, J AUTOM REASONING, V23, P319, DOI 10.1023/A:1006285817788
   Dubois C, 2000, LECT NOTES COMPUT SC, V1869, P126
   Dunfield J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290322
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   Freeman P., 2017, PURESCRIPT
   Gacek Andrew, 2008, LECT NOTES ARTIFICIA
   Garrigue J, 2015, MATH STRUCT COMP SCI, V25, P867, DOI 10.1017/S0960129513000066
   Gundry A, 2010, P 3 ACM SIGPLAN WORK
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Jones SimonPeyton., 2004, LEXICALLY SCOPED TYP
   Klein C, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P285
   Le Botlan D, 2003, ACM SIGPLAN NOTICES, V38, P27, DOI 10.1145/944746.944709
   Leijen D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283
   Leroy Xavier., 2012, The CompCert Verified Compiler
   MARTELLI A, 1982, ACM T PROGR LANG SYS, V4, P258, DOI 10.1145/357162.357169
   Miller Dale, 2000, LECT NOTES ARTIFICIA
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Naraschewski W, 1999, J AUTOM REASONING, V23, P299, DOI 10.1023/A:1006277616879
   Ningning Xie, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P272, DOI 10.1007/978-3-319-89884-1_10
   Nipkow Tobias, 2002, ISABELLE HOL PROOF A, V2283
   Odersky Martin., 1996, Proceedings of the 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL'96, page, P54
   Pottier Francois., 2005, ADV TOPICS TYPES PRO, P387
   Reed J, 2009, P 4 INT WORKSH LOG F
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Serrano Alejandro, 2018, P 39 ACM SIGPLAN C P, DOI DOI 10.1145/3192366.3192389
   The Coq development team, 2017, COQ PROOF ASSISTANT
   Tiuryn J, 1996, IEEE S LOG, P74, DOI 10.1109/LICS.1996.561306
   Urban C, 2008, J AUTOM REASONING, V40, P327, DOI 10.1007/s10817-008-9097-2
   Urban Christian, 2008, SEMANTICS COMPUTER S, P363
   Vytiniotis D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P295
   Wells JB, 1999, ANN PURE APPL LOGIC, V98, P111, DOI 10.1016/S0168-0072(98)00047-5
   Zhao JX, 2018, LECT NOTES COMPUT SC, V10895, P604, DOI 10.1007/978-3-319-94821-8_36
NR 43
TC 3
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 112
DI 10.1145/3341716
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900035
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Clairambault, P
   De Visme, M
   Winskel, G
AF Clairambault, Pierre
   De Visme, Marc
   Winskel, Glynn
TI Game Semantics for Quantum Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Quantum lambda-calculus; Denotational Semantics; Game Semantics;
   Concurrent Games
ID FULL ABSTRACTION
AB Quantum programming languages permit a hardware independent, high-level description of quantum algorithms. In particular, the quantum lambda-calculus is a higher-order programming language with quantum primitives, mixing quantum data and classical control. Giving satisfactory denotational semantics to the quantum lambda-calculus is a challenging problem that has attracted significant interest in the past few years. Several models have been proposed but for those that address the whole quantum lambda-calculus, they either do not represent the dynamics of computation, or they lack the cornpositionality one often expects from denotational models.
   In this paper, we give the first compositional and interactive model of the full quantum lambda-calculus, based on game semantics. To achieve this we introduce a model of quantum games and strategies, combining quantum data with a representation of the dynamics of computation inspired from causal models of concurrent systems. In this model we first give a computationally adequate interpretation of the affine fragment. Then, we extend the model with a notion of symmetry, allowing us to deal with replication. In this refined setting, we interpret and prove adequacy for the full quantum lambda-calculus. We do this both from a sequential and a parallel interpretation, the latter representing faithfully the causal independence between sub-computations.
C1 [Clairambault, Pierre; De Visme, Marc] Univ Lyon, LIP, ENS Lyon, UCB Lyon 1,CNRS, 46 Allee Italie, F-69364 Lyon, France.
   [Winskel, Glynn] Univ Cambridge, Comp Lab, 15 JJ Thomson Ave, Cambridge CB3 0FD, England.
C3 Ecole Normale Superieure de Lyon (ENS de LYON); Universite Claude
   Bernard Lyon 1; Centre National de la Recherche Scientifique (CNRS);
   University of Cambridge
RP Clairambault, P (corresponding author), Univ Lyon, LIP, ENS Lyon, UCB Lyon 1,CNRS, 46 Allee Italie, F-69364 Lyon, France.
EM Pierre.Clairambault@ens-lyon.fr; Marc.de-Visme@ens-lyon.fr;
   Glynn.Winskel@cl.cam.ac.uk
FU French LABEX MILYON [ANR-10-LABX-0070]; ERC Advanced Grant ECSYM;
   Collegium de Lyon
FX We are grateful to Frank Roumen for numerous discussions on the
   mathematics of quantum computation. We acknowledge support of the French
   LABEX MILYON (ANR-10-LABX-0070), the ERC Advanced Grant ECSYM, and the
   Collegium de Lyon.
CR Abramsky S., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P431, DOI 10.1109/LICS.1999.782638
   Abramsky S, 2000, INFORM COMPUT, V163, P409, DOI [10.1006/inco.2000.2930, 10.1006/inco2000.2930]
   Abramsky S, 1998, LECT NOTES COMPUT SC, V1414, P1, DOI 10.1007/BFb0028004
   Castellan S, 2015, IEEE S LOG, P232, DOI 10.1109/LICS.2015.31
   Castellan Simon, 2014, JOINT M 23 EACSL ANN, DOI [10.1145/2603088.2603141, DOI 10.1145/2603088.2603141]
   Castellan Simon, 2016, CONCURRENT HYLAND ON
   Castellan Simon, 2017, LMCS, V13
   Castellan Simon, 2016, 27 INT C CONCURRENCY, DOI DOI 10.4230/LIPICS.CONCUR.2016.32
   Castellan Simon, 2018, P LICS 2018
   Clairambault P, 2012, IEEE S LOG, P235, DOI 10.1109/LICS.2012.34
   Dal Lago Ugo, 2017, P 44 ACM SIGPLAN S P
   Delbecquea Y, 2011, ELECTRON NOTES THEOR, V270, P41, DOI 10.1016/j.entcs.2011.01.005
   Faggian C, 2009, LECT NOTES COMPUT SC, V5608, P95, DOI 10.1007/978-3-642-02273-9_9
   Fuhrmann C., 1999, Electronic Notes in Theoretical Computer Science, V20, DOI 10.1016/S1571-0661(04)80078-1
   Gay SJ, 2006, MATH STRUCT COMP SCI, V16, P581, DOI 10.1017/S0960129506005378
   Girard Jean-Yves, 1989, SER STUDIES LOGIC FD, V127, P221
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Gisin N, 2002, REV MOD PHYS, V74, P145, DOI 10.1103/RevModPhys.74.145
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Harmer R., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P422, DOI 10.1109/LICS.1999.782637
   Hasuo I, 2017, ANN PURE APPL LOGIC, V168, P404, DOI 10.1016/j.apal.2016.10.010
   Honda K, 1999, THEOR COMPUT SCI, V221, P393, DOI 10.1016/S0304-3975(99)00039-0
   Hyland JME, 2000, INFORM COMPUT, V163, P285, DOI [10.1006/inco.2000.2917, 10.1006/inco2000.2917]
   Hyland M, 2003, THEOR COMPUT SCI, V294, P183, DOI 10.1016/S0304-3975(01)00241-9
   Joyal A, 1996, MATH PROC CAMBRIDGE, V119, P447, DOI 10.1017/S0305004100074338
   Laird J, 2013, IEEE S LOG, P301, DOI 10.1109/LICS.2013.36
   Malherbe Octavio, 2013, Computation, Logic, Games, and Quantum Foundations. The Many Facets of Samson Abramsky. Essays Dedicated to Samson Abramsky on the Occasion of His 60th Birthday: LNCS 7860, P178, DOI 10.1007/978-3-642-38164-5_13
   Malherbe Octavio, 2013, THESIS U OTTAWA
   Melliès PA, 2005, IEEE S LOG, P386
   Melliès PA, 2007, LECT NOTES COMPUT SC, V4703, P395
   Melliès PA, 2012, IEEE S LOG, P481, DOI 10.1109/LICS.2012.58
   Nielsen M A., 2002, NORS SOFTW CORP NET
   Pagani M, 2014, ACM SIGPLAN NOTICES, V49, P647, DOI 10.1145/2535838.2535879
   Power J., 1997, Mathematical Structures in Computer Science, V7, P453, DOI 10.1017/S0960129597002375
   Power John, 1999, LNCS, V1644
   Rideau S, 2011, IEEE S LOG, P409, DOI 10.1109/LICS.2011.13
   Selinger P, 2004, MATH STRUCT COMP SCI, V14, P527, DOI 10.1017/S0960129504004256
   Selinger P, 2006, MATH STRUCT COMP SCI, V16, P527, DOI 10.1017/S0960129506005238
   Selinger P, 2008, ELECTRON NOTES THEOR, V210, P123, DOI 10.1016/j.entcs.2008.04.022
   Shor PW, 1997, SIAM J COMPUT, V26, P1484, DOI 10.1137/S0036144598347011
   Winskel G., 1987, LECT NOTES COMPUT SC, V255, P325
   Winskel G, 2013, ELECTRON NOTES THEOR, V298, P403, DOI 10.1016/j.entcs.2013.09.024
   Winskel G, 2012, FORM ASP COMPUT, V24, P647, DOI 10.1007/s00165-012-0235-6
   Winskel G, 2007, ELECTRON NOTES THEOR, V172, P611, DOI 10.1016/j.entcs.2007.02.022
NR 44
TC 13
Z9 13
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 32
DI 10.1145/3290345
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300032
OA Green Published, gold, Green Accepted
DA 2024-07-18
ER

PT J
AU Dunfield, J
   Krishnaswami, NR
AF Dunfield, Joshua
   Krishnaswami, Neelakantan R.
TI Sound and Complete Bidirectional Typechecking for Higher-Rank
   Polymorphism with Existentials and Indexed Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE bidirectional typechecking; higher-rank polymorphism; indexed types;
   GADTs; equality types; existential types
AB Bidirectional typechecking, in which terms either synthesize a type or are checked against a known type, has become popular for its applicability to a variety of type systems, its error reporting, and its ease of implementation. Following principles from proof theory, bidirectional typing can be applied to many type constructs. The principles underlying a bidirectional approach to indexed types (generalized algebraic datatypes) are less clear. Building on proof-theoretic treatments of equality, we give a declarative specification of typing based on focalization. This approach permits declarative rules for coverage of pattern matching, as well as support for first-class existential types using a focalized subtyping judgment. We use refinement types to avoid explicitly passing equality proofs in our term syntax, making our calculus similar to languages such as Haskell and OCaml. We also extend the declarative specification with an explicit rules for deducing when a type is principal, permitting us to give a complete declarative specification for a rich type system with significant type inference. We also give a set of algorithmic typing rules, and prove that it is sound and complete with respect to the declarative system. The proof requires a number of technical innovations, including proving soundness and completeness in a mutually recursive fashion.
C1 [Dunfield, Joshua] Queens Univ, Goodwin Hall 557, Kingston, ON K7L 2N8, Canada.
   [Krishnaswami, Neelakantan R.] Univ Cambridge, Comp Lab, William Gates Bldg, Cambridge CB3 0FD, England.
C3 Queens University - Canada; University of Cambridge
RP Dunfield, J (corresponding author), Queens Univ, Goodwin Hall 557, Kingston, ON K7L 2N8, Canada.
EM joshuad@cs.queensu.ca; nk480@cl.cam.ac.uk
FU EPSRC [EP/N02706X/2]; EPSRC [EP/N02706X/1, EP/N02706X/2] Funding Source:
   UKRI
FX We thank the anonymous reviewers of this version, and of several
   previous versions, for their comments. We also thank Soham Chowdhury for
   his work on implementing the system presented in this paper. This work
   was partially funded by EPSRC grant EP/N02706X/2.
CR Abel A, 2008, LECT NOTES COMPUT SC, V5133, P29
   Abel Andreas, 2006, MATH PROGRAM CONSTRU, V4014
   BARENDREGT H, 1983, J SYMBOLIC LOGIC, V48, P931, DOI 10.2307/2273659
   Blume Matthias, 2001, ELECTRON NOTES THEOR, V59, P1
   Cheney James, 2003, Technical Report Future Leaders Fellowship EHOP (grant number MR/ T043830/ 1). CUCIS TR2003-1901
   Chrzaszcz J, 1998, LECT NOTES COMPUT SC, V1450, P346, DOI 10.1007/BFb0055784
   Coquand T, 1996, SCI COMPUT PROGRAM, V26, P167, DOI 10.1016/0167-6423(95)00021-6
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Davies R, 2000, ACM SIGPLAN NOTICES, V35, P198, DOI 10.1145/357766.351259
   Dolan S, 2017, ACM SIGPLAN NOTICES, V52, P60, DOI 10.1145/3093333.3009882
   Dunfield J, 2003, LECT NOTES COMPUT SC, V2620, P250
   DUNFIELD J, 2007, CMUCS07129
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   Dunfield J, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P21, DOI 10.1145/1292597.1292602
   Fluet Matthew, 2006, ARXIVCS0403034CSPL ARXIVCS0403034CSPL
   Garrigue Jacques, 2013, Programming Languages and Systems. 11th Asian Symposium, APLAS 2013. Proceedings: LNCS 8301, P257, DOI 10.1007/978-3-319-03542-0_19
   Garrigue J, 2017, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.241.2
   Girard Jean-Yves, 1992, A Fixpoint Theorem in Linear Logic
   Harper R., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P130, DOI 10.1145/199448.199475
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Jones SP, 2006, ACM SIGPLAN NOTICES, V41, P50
   Karachalias G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P424, DOI 10.1145/2784731.2784748
   Krishnaswami NR, 2009, ACM SIGPLAN NOTICES, V44, P366, DOI 10.1145/1594834.1480927
   LAUFER K, 1994, ACM T PROGR LANG SYS, V16, P1411, DOI 10.1145/186025.186031
   Leijen D, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P109, DOI 10.1145/331963.331977
   Odersky M, 2001, ACM SIGPLAN NOTICES, V36, P41, DOI 10.1145/373243.360207
   Pientka B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P371, DOI 10.1145/1328438.1328483
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pottier F, 2006, ACM SIGPLAN NOTICES, V41, P232, DOI 10.1145/1111320.1111058
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Schroeder-Heister P., 1994, Extensions of Logic Programming. 4th International Workshop, ELP '93 Proceedings, P333
   Simonet V, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180476
   Tiuryn Jerzy, 1996, LICS
   Vytiniotis D, 2011, J FUNCT PROGRAM, V21, P333, DOI 10.1017/S0956796811000098
   Vytiniotis D, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P39
   Watkins K, 2004, ANN NY ACAD SCI, V3085, P355
   Xi HW, 2003, ACM SIGPLAN NOTICES, V38, P224, DOI 10.1145/640128.604150
   Zeilberger Noam, 2009, PROGRAMMING LANGUAGE, P15, DOI [10.1145/1481848.1481852, DOI 10.1145/1481848.1481852]
NR 40
TC 12
Z9 13
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 9
DI 10.1145/3290322
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300009
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Hung, SH
   Hietala, K
   Zhu, SP
   Ying, MS
   Hicks, M
   Wu, XD
AF Hung, Shih-Han
   Hietala, Kesha
   Zhu, Shaopeng
   Ying, Mingsheng
   Hicks, Michael
   Wu, Xiaodi
TI Quantitative Robustness Analysis of Quantum Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantum programming; quantum noise; approximate computing
AB Quantum computation is a topic of significant recent interest, with practical advances coming from both research and industry. A major challenge in quantum programming is dealing with errors (quantum noise) during execution. Because quantum resources (e.g., qubits) are scarce, classical error correction techniques applied at the level of the architecture are currently cost-prohibitive. But while this reality means that quantum programs are almost certain to have errors, there as yet exists no principled means to reason about erroneous behavior. This paper attempts to fill this gap by developing a semantics for erroneous quantum while programs, as well as a logic for reasoning about them. This logic permits proving a property we have identified, called c-robustness, which characterizes possible "distance" between an ideal program and an erroneous one. We have proved the logic sound, and showed its utility on several case studies, notably: (1) analyzing the robustness of noisy versions of the quantum Bernoulli factory (QBF) and quantum walk (QW); (2) demonstrating the (in)effectiveness of different error correction schemes on single-qubit errors; and (3) analyzing the robustness of a fault-tolerant version of QBF.
C1 [Hung, Shih-Han; Hietala, Kesha; Zhu, Shaopeng; Hicks, Michael; Wu, Xiaodi] Univ Maryland, College Pk, MD 20742 USA.
   [Ying, Mingsheng] Univ Technol Sydney, Sydney, NSW, Australia.
   [Ying, Mingsheng] Chinese Acad Sci, Inst Software, State Key Lab Comp Sci, Beijing, Peoples R China.
   [Ying, Mingsheng] Tsinghua Univ, Beijing, Peoples R China.
C3 University System of Maryland; University of Maryland College Park;
   University of Technology Sydney; Chinese Academy of Sciences; Institute
   of Software, CAS; Tsinghua University
RP Hung, SH (corresponding author), Univ Maryland, College Pk, MD 20742 USA.
RI Ying, Mingsheng/A-8379-2008
OI Ying, Mingsheng/0000-0003-4847-702X; Hietala, Kesha/0000-0002-2724-0974
FU U.S. Department of Energy, Office of Science, Office of Advanced
   Scientific Computing Research Quantum Testbed Pathfinder Program
   [DE-SC0019040]; Canadian Institute for Advanced Research
FX We would like to thank Andrew Childs for helpful discussions on quantum
   walks. This material is based upon work supported by the U.S. Department
   of Energy, Office of Science, Office of Advanced Scientific Computing
   Research Quantum Testbed Pathfinder Program under Award Number
   DE-SC0019040, and the Canadian Institute for Advanced Research.
CR Abhari Ali Javadi, 2012, TR93412 TR93412
   Aharonov Dorit, 1997, STOC
   Aharonov Dorit, 2001, STOC
   Altenkirch T, 2005, IEEE S LOG, P249
   [Anonymous], 2014, CORR
   [Anonymous], 2014, ASPLOS
   [Anonymous], 2009, THEOR COMPUT
   [Anonymous], 2012, PLDI
   Baek W, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P198, DOI 10.1145/1806596.1806620
   Baltag A, 2011, SYNTHESE, V179, P285, DOI 10.1007/s11229-010-9783-6
   Boston B., 2015, OOPSLA
   Brunet O, 2004, INT J QUANTUM INF, V2, P45, DOI 10.1142/S0219749904000067
   Carbin M, 2013, ACM SIGPLAN NOTICES, V48, P33, DOI [10.1145/2544173.2509546, 10.1145/2509136.2509546]
   Chadha R, 2006, ELECTRON NOTES THEOR, V158, P19, DOI 10.1016/j.entcs.2006.04.003
   Chaudhuri S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P57, DOI 10.1145/1706299.1706308
   Chaudhuri Swarat, 2011, ESEC FSE ESEC FSE
   Chong FT, 2017, NATURE, V549, P180, DOI 10.1038/nature23459
   Chuang I., 2000, Quantum Information and Quantum Computation
   Chuang IL, 1997, J MOD OPTIC, V44, P2455, DOI 10.1080/095003497152609
   D'Hondt E, 2006, MATH STRUCT COMP SCI, V16, P429, DOI 10.1017/S0960129506005251
   da Silva M.P., 2015, matlab-diamond-norm
   Dale H, 2015, NAT COMMUN, V6, DOI 10.1038/ncomms9203
   Emerson J, 2005, J OPT B-QUANTUM S O, V7, pS347, DOI 10.1088/1464-4266/7/10/021
   Feng Y, 2007, THEOR COMPUT SCI, V386, P151, DOI 10.1016/j.tcs.2007.06.011
   Fowler AG, 2012, PHYS REV A, V86, DOI 10.1103/PhysRevA.86.032324
   Gay SJ, 2006, MATH STRUCT COMP SCI, V16, P581, DOI 10.1017/S0960129506005378
   Georgescu IM, 2014, REV MOD PHYS, V86, P153, DOI 10.1103/RevModPhys.86.153
   Gilchrist A, 2005, PHYS REV A, V71, DOI 10.1103/PhysRevA.71.062310
   Gottesman D, 2010, PROC SYM AP, V68, P13
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Gutiérrez M, 2013, PHYS REV A, V87, DOI 10.1103/PhysRevA.87.030302
   Hung Shih-Han, 2018, CORR CORR
   Kakutani Y, 2009, LECT NOTES COMPUT SC, V5913, P79, DOI 10.1007/978-3-642-10622-4_7
   Keane M. S., 1994, ACM T MODEL COMPUT S, V4
   Knill E, 2008, PHYS REV A, V77, DOI 10.1103/PhysRevA.77.012307
   Li Yangjia, 2018, POPL
   Magesan E, 2011, PHYS REV LETT, V106, DOI 10.1103/PhysRevLett.106.180504
   Mingsheng Ying., 2016, FDN QUANTUM PROGRAMM, V1st
   Misailovic S, 2014, ACM SIGPLAN NOTICES, V49, P309, DOI [10.1145/10.1145/2660193.2660231, 10.1145/2714064.2660231]
   Moll N, 2018, QUANTUM SCI TECHNOL, V3, DOI 10.1088/2058-9565/aab822
   Omer B., 2003, THESIS VIENNA U TECH
   Park J, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P745, DOI 10.1145/2786805.2786807
   Paykin J, 2017, ACM SIGPLAN NOTICES, V52, P846, DOI 10.1145/3093333.3009894
   PERRY F, 2007, PLDI
   Peruzzo A, 2014, NAT COMMUN, V5, DOI 10.1038/ncomms5213
   Preskill J, 2018, QUANTUM-AUSTRIA, V2, DOI 10.22331/q-2018-08-06-79
   Sabry Amr, 2003, HASKELL W HASKELL W
   Sampson A, 2014, ACM SIGPLAN NOTICES, V49, P112, DOI [10.1145/2666356.2594294, 10.1145/2594291.2594294]
   Sampson A, 2011, ACM SIGPLAN NOTICES, V46, P164, DOI 10.1145/1993316.1993518
   Sanders Jeff W, 2000, MPC
   Selinger P, 2004, MATH STRUCT COMP SCI, V14, P527, DOI 10.1017/S0960129504004256
   Selinger Peter, 2004, FLOPS
   Suchara M, 2013, 2013 IEEE 31ST INTERNATIONAL CONFERENCE ON COMPUTER DESIGN (ICCD), P419, DOI 10.1109/ICCD.2013.6657074
   Svore Krysta, 2018, RWDSL
   Terhal BM, 2015, REV MOD PHYS, V87, P307, DOI 10.1103/RevModPhys.87.307
   Walker David, 2006, ICFP
   Watrous J., 2013, Chicago J. Theor. Comput. Sci., V8, P1
   Watrous J., 2018, THEORY QUANTUM INFOR, DOI DOI 10.1017/9781316848142
   Watrous John, 2006, INTRO QUANTUM COMPUT
   Ying MS, 2017, ACM SIGPLAN NOTICES, V52, P818, DOI 10.1145/3093333.3009840
   Ying MS, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2049706.2049708
NR 61
TC 20
Z9 21
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 31
DI 10.1145/3290344
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300031
OA gold, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Watt, C
   Renner, J
   Popescu, N
   Cauligi, S
   Stefan, D
AF Watt, Conrad
   Renner, John
   Popescu, Natalie
   Cauligi, Sunjay
   Stefan, Deian
TI CT-Wasm: Type-Driven Secure Cryptography for the Web Ecosystem
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE WebAssembly; cryptography; constant-time; information flow control
ID SPEED
AB A significant amount of both client and server-side cryptography is implemented in JavaScript. Despite widespread concerns about its security, no other language has been able to match the convenience that comes from its ubiquitous support on the "web ecosystem"-the wide variety of technologies that collectively underpins the modern World Wide Web. With the introduction of the new WebAssembly bytecode language (Wasm) into the web ecosystem, we have a unique opportunity to advance a principled alternative to existing JavaScript cryptography use cases which does not compromise this convenience.
   We present Constant-Time WebAssembly (CT-Wasm), a type-driven, strict extension to WebAssembly which facilitates the verifiably secure implementation of cryptographic algorithms. CT-Wasm's type system ensures that code written in CT-Wasm is both information flow secure and resistant to timing side channel attacks; like base Wasm, these guarantees are verifiable in linear time. Building on an existing Wasm mechanization, we mechanize the full CT-Wasm specification, prove soundness of the extended type system, implement a verified type checker, and give several proofs of the language's security properties.
   We provide two implementations of CT-Wasm: an OCaml reference interpreter and a native implementation for Node.js and Chromium that extends Google's V8 engine. We also implement a CT-Wasm to Wasm rewrite tool that allows developers to reap the benefits of CT-Wasm's type system today, while developing cryptographic algorithms for base Wasm environments. We evaluate the language, our implementations, and supporting tools by porting several cryptographic primitives-Salsa20, SHA-256, and TEA and the full TweetNaCl library. We find that CT-Wasm is fast, expressive, and generates code that we experimentally measure to be constant-time.
C1 [Watt, Conrad] Univ Cambridge, Cambridge, England.
   [Renner, John; Popescu, Natalie; Cauligi, Sunjay; Stefan, Deian] Univ Calif San Diego, San Diego, CA 92103 USA.
C3 University of Cambridge; University of California System; University of
   California San Diego
RP Watt, C (corresponding author), Univ Cambridge, Cambridge, England.
EM conrad.watt@cl.cam.ac.uk; jmrenner@eng.ucsd.edu; npopescu@ucsd.edu;
   scauligi@eng.ucsd.edu; deian@cs.ucsd.edu
FU EPSRC Doctoral Training award; Semantic Foundations for Interactive
   Programs EPSRC [EP/N02706X/1]; REMS: Rigorous Engineering for Mainstream
   Systems EPSRC [EP/K008528/1]; Cisco; CONIX Research Center, one of six
   centers in JUMP; Semiconductor Research Corporation (SRC) program -
   DARPA; EPSRC [EP/K008528/1] Funding Source: UKRI
FX We thank the anonymous POPL and POPL AEC reviewers for their suggestions
   and insightful comments. We thank Andreas Rossberg and Peter Sewell for
   their support during this work. We thank Dan Gohman for insightful
   discussions. Conrad Watt is supported by an EPSRC Doctoral Training
   award, the Semantic Foundations for Interactive Programs EPSRC program
   grant (EP/N02706X/1), and the REMS: Rigorous Engineering for Mainstream
   Systems EPSRC program grant (EP/K008528/1). This work was supported in
   part by a gift from Cisco and by the CONIX Research Center, one of six
   centers in JUMP, a Semiconductor Research Corporation (SRC) program
   sponsored by DARPA.
CR Almeida JB, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P53
   Almeida JB, 2016, LECT NOTES COMPUT SC, V9783, P163, DOI 10.1007/978-3-662-52993-5_9
   Almeida Jose Bacelar, 2017, P ACM SIGSAC C COMP
   Andrysco Marc, 2018, P ACM SIGSAC C COMP
   Andrysco Marc, 2015, P IEEE S SEC PRIV IE
   [Anonymous], 2018, HACL FORMALLY VERIFI
   [Anonymous], 2018, ECMASCRIPT 2018 LANG
   Baldoni R, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3182657
   Barbosa Manuel, 2012, FUNDAMENTALS SOFTWAR
   Barbosa Manuel, 2014, P PRINCIPLES SECURIT
   Barthe G, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1267, DOI 10.1145/2660267.2660283
   Barthe Gilles, 2018, P IEEE COMP SEC FDN
   Barthe Gilles., 2017, CRYPTOLOGY EPRINT AR
   Bernstein D. J., 2005, CACHE TIMING ATTACKS
   Bernstein DJ, 2006, LECT NOTES COMPUT SC, V3958, P207
   Bernstein DJ, 2008, LECT NOTES COMPUT SC, V4986, P84
   Bernstein Daniel J, 2005, SALSA20 REF C 2005
   Bernstein Daniel J, 2014, P INT C CRYPT INF SE
   Bernstein DanielJ., 2007, WRITING HIGH SPEED S
   Bernstein DanielJ., 2016, NACL NETWORKING CRYP
   Bernstein DJ, 2005, LECT NOTES COMPUT SC, V3557, P32
   Beurdouche Benjamin., 2017, VERIFIED CRYPTOGRAPH
   Bhargavan Karthikeyan., 2014, FDN SECURITY ANAL DE
   Blazy Sandrine, 2017, P EUR S RES COMP SEC
   Bond B, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P917
   Boreale M, 2009, INFORM COMPUT, V207, P699, DOI 10.1016/j.ic.2008.12.007
   Brumley D, 2005, COMPUT NETW, V48, P701, DOI 10.1016/j.comnet.2005.01.010
   Bubelich Mykola., 2017, JS SALSA20
   Cauligi S, 2017, 2017 IEEE CYBERSECURITY DEVELOPMENT (SECDEV), P69, DOI 10.1109/SecDev.2017.24
   Chestnykh Dmitry., 2016, TWEETNACLJS
   Click C., 1995, P ACM SIGPLAN WORKSH
   Conte Brad., 2012, CRYPTO ALGORITHMS
   Cousens Daniel, 2014, PBKDF2
   Cryptography Coding Standard, 2016, CODING RULES
   Cuomo Jerry, 2013, CISC VIS NETW IND GL
   Denis Frank., 2018, LIBSODIUM
   Erbsen A., 2019, P IEEE S SEC PRIV
   Forster Richard, 1999, THESIS U CAMBRIDGE
   Galois, 2016, CRYPTOL LANGUAGE CRY
   Green Matthew., 2012, ANATOMY BAD IDEA
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   Halpin Harry, 2014, P INT WORKSH WEB API
   Hernandez JC, 2004, COMPUT INTELL-US, V20, P517, DOI 10.1111/j.0824-7935.2004.00250.x
   Homeier Peter V, 2001, SUPP P INT C THOR PR
   Hong Seokhie, 2003, P INT C INF SEC CRYP
   Huffman B, 2013, LECT NOTES COMPUT SC, V8307, P131, DOI 10.1007/978-3-319-03545-1_9
   Indutny Fedor., 2014, ELLIPTIC
   Intel, 2016, INT R 64 IA 32 ARCH, V2, pA
   Johnston Paul, 2017, SHA JS
   Kelsey J., 1997, Information and Communications Security. First International Conference, ICIS '97. Proceedings, P233, DOI 10.1007/BFb0028479
   Kobeissi N, 2017, 2017 IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P), P435, DOI 10.1109/EuroSP.2017.38
   Kocher Paul., 1996, P ADV CRYPTOLOGY
   Kohlbrenner D, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P69
   Mantel H, 2000, P IEEE CSFW, P185, DOI 10.1109/CSFW.2000.856936
   Myers A. C., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P228, DOI 10.1145/292540.292561
   Myers Andrew C, 2001, Jif: Java information flow. Software release
   Ndegwa Amos., 2016, WHAT IS PAGE LOAD TI
   NIST, 2002, FIPS PUB, V180
   Open Whisper Systems, 2016, SIGN PROT LIB JAVASC
   Oren Y, 2015, CCS'15: PROCEEDINGS OF THE 22ND ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1406, DOI 10.1145/2810103.2813708
   Osvik DA, 2006, LECT NOTES COMPUT SC, V3860, P1
   Page D., 2006, Cryptology ePrint archive
   Popescu Andrei, 2012, P ACM SIGPLAN INT C
   Pornin Thomas., 2017, WHY CONSTANT TIME CR
   Pottier F, 2003, ACM T PROGR LANG SYS, V25, P117, DOI 10.1145/596980.596983
   Renner John., 2018, PRINCIPLES SECURE CO
   Reparaz O, 2017, DES AUT TEST EUROPE, P1697, DOI 10.23919/DATE.2017.7927267
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sabelfeld A, 2000, P IEEE CSFW, P200, DOI 10.1109/CSFW.2000.856937
   Sabelfeld A., 2006, IEEE J SEL AREA COMM, V21, P1
   Sleevi Ryan, 2013, W3C WEB CRYPTO API U
   Sneff L., 2018, NEBULET
   Strohmeier Dominik, 2017, COMP BROWSER PAGE LO
   Stuber Torsten., 2017, TWEETNACL WEBASSEMBL
   Tarr Dominic., 2013, CRYPTO BROWSERIFY
   Terei D, 2012, ACM SIGPLAN NOTICES, V47, P137, DOI 10.1145/2430532.2364524
   Urban C., 2011, J COMPUTER SECURITY, V12, P2, DOI DOI 10.3233/JCS-1996-42-304
   Van Goethem T, 2015, CCS'15: PROCEEDINGS OF THE 22ND ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1382, DOI 10.1145/2810103.2813632
   Watt Conrad., 2018, CT WASM TYPE DRIVEN
   Watt Conrad, 2018, P ACM SIGPLAN INT C
   WebAssembly Community Group, 2018, REF TYP
   WebAssembly Community Group, 2018, MOD INST
   Wheeler DavidJ., 1994, LECT NOTES COMPUTER
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Yee B, 2009, P IEEE S SECUR PRIV, P79, DOI 10.1109/SP.2009.25
   Zakai Alon., 2015, COMPILING WEBASSEMBL
   Zinzindohoue Jean-Karim, 2017, P ACM SIGSAC C COMP
NR 87
TC 26
Z9 28
U1 0
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 77
DI 10.1145/3290390
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300077
OA gold, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Chen, QC
   Banerjee, A
   Demiralp, Ç
   Durrett, G
   Dillig, I
AF Chen, Qiaochu
   Banerjee, Arko
   Demiralp, Cagatay
   Durrett, Greg
   Dillig, Isil
TI Data Extraction via Semantic Regular Expression Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Regular Expression
ID PROGRAM SYNTHESIS; FRAMEWORK
AB Many data extraction tasks of practical relevance require not only syntactic pattern matching but also semantic reasoning about the content of the underlying text. While regular expressions are very well suited for tasks that require only syntactic pattern matching, they fall short for data extraction tasks that involve both a syntactic and semantic component. To address this issue, we introduce semantic regexes, a generalization of regular expressions that facilitates combined syntactic and semantic reasoning about textual data. We also propose a novel learning algorithm that can synthesize semantic regexes from a small number of positive and negative examples. Our proposed learning algorithm uses a combination of neural sketch generation and compositional type-directed synthesis for fast and effective generalization from a small number of examples. We have implemented these ideas in a new tool called Smore and evaluated it on representative data extraction tasks involving several textual datasets. Our evaluation shows that semantic regexes can better support complex data extraction tasks than standard regular expressions and that our learning algorithm significantly outperforms existing tools, including state-of-the-art neural networks and program synthesis tools.
C1 [Chen, Qiaochu; Banerjee, Arko; Durrett, Greg; Dillig, Isil] Univ Texas Austin, Austin, TX 78712 USA.
   [Demiralp, Cagatay] MIT, CSAIL, Cambridge, MA USA.
C3 University of Texas System; University of Texas Austin; Massachusetts
   Institute of Technology (MIT)
RP Chen, QC (corresponding author), Univ Texas Austin, Austin, TX 78712 USA.
EM qchen@cs.utexas.edu; arko.banerjee@utexas.edu; cagatay@csail.mit.edu;
   gdurrett@cs.utexas.edu; isil@cs.utexas.edu
OI Demiralp, Cagatay/0009-0003-2080-0443; Durrett,
   Greg/0000-0002-7061-7298; Dillig, Isil/0000-0001-8006-1230
FU National Science Foundation [1918889, 1762299]
FX We thank our anonymous reviewers, Shankara Pailoor, Anders Miltner, Xi
   Ye, Nathan Taylor, Josh Hoffman, Maxine Xin, Cole Vick, Sammy Thomas for
   their helpful feedback and support. This material is based upon work
   supported by the National Science Foundation under Grant No. 1918889 and
   Grant No. 1762299. Any opinions, findings, and conclusions or
   recommendations expressed in this material are those of the author and
   do not necessarily reflect the views of the National Science Foundation.
CR Alquezar R., 1994, P ACL 02 WORKSH UNS, P291
   Andreas J., 2016, P 2016 C N AM CHAPT, P1545, DOI DOI 10.18653/V1/N16-1181
   Andreas J, 2016, PROC CVPR IEEE, P39, DOI 10.1109/CVPR.2016.12
   ANGLUIN D, 1987, INFORM COMPUT, V75, P87, DOI 10.1016/0890-5401(87)90052-6
   Bansal Suguman, 2023, Verified Software. Theories, Tools and Experiments: 14th International Conference, VSTTE 2022, Revised Selected Papers. Lecture Notes in Computer Science (13800), P1, DOI 10.1007/978-3-031-25803-9_1
   Bastani O, 2022, LECT NOTES ARTIF INT, V13200, P207, DOI 10.1007/978-3-031-04083-2_11
   Bizer C, 2009, J WEB SEMANT, V7, P154, DOI 10.1016/j.websem.2009.07.002
   Brown T., 2020, Advances in Neural Information Processing Systems, V33, P1877, DOI [DOI 10.48550/ARXIV.2005.14165, DOI 10.5555/3495724.3495883]
   Chen Mark, 2021, arXiv, DOI DOI 10.48550/ARXIV.2107.03374
   Chen Qiaochu, 2023, Zenodo, DOI 10.5281/ZENODO.8144182
   Chen QC, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P328, DOI 10.1145/3453483.3454047
   Chen QC, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P487, DOI 10.1145/3385412.3385988
   Cheng Zhoujun, 2023, 11 INT C LEARN REPR
   Chowdhery A, 2022, Arxiv, DOI [arXiv:2204.02311, DOI 10.48550/ARXIV.2204.02311]
   Dunn A., 2022, PREPRINT, DOI [10.48550/arXiv.2212.05238, DOI 10.48550/ARXIV.2212.05238]
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3062341.3062351, 10.1145/3140587.3062351]
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Firoiu L, 1998, PROCEEDINGS OF THE TWENTIETH ANNUAL CONFERENCE OF THE COGNITIVE SCIENCE SOCIETY, P350
   Frankle J, 2016, ACM SIGPLAN NOTICES, V51, P802, DOI 10.1145/2914770.2837629
   Gaunt A., 2017, PR MACH LEARN RES, P1213
   GOLD EM, 1978, INFORM CONTROL, V37, P302, DOI 10.1016/S0019-9958(78)90562-4
   Greenberg M, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P594, DOI 10.1145/3519939.3523722
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Huang J., 2020, P 37 INT C MACHINE L, P4495
   Huang KJ, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1159, DOI 10.1145/3385412.3386027
   Jain N, 2022, PROC INT CONF SOFTW, P1219, DOI 10.1145/3510003.3510203
   Jiang CY, 2021, 2021 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2021), P9481
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Lee M, 2017, ACM SIGPLAN NOTICES, V52, P70, DOI [10.1145/3093335.2993244, 10.1145/2993236.2993244]
   Lin BY, 2020, KDD '20: PROCEEDINGS OF THE 26TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY & DATA MINING, P1092, DOI 10.1145/3394486.3403153
   Morris James Hiram, 1968, Ph.D. thesis
   Nijkamp E., 2023, 11 INT C LEARN REPR
   Odena A., 2021, arXiv, DOI DOI 10.48550/ARXIV.2108.07732
   OpenAI, 2022, Technical Report
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Parekh R., 1996, Grammatical Inference: Learning Syntax from Sentences. Third International Colloquium, ICGI-96 Proceedings, P238, DOI 10.1007/BFb0033358
   Parekh R, 2001, MACH LEARN, V44, P9, DOI 10.1023/A:1010822518073
   Pasupat P, 2015, PROCEEDINGS OF THE 53RD ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS AND THE 7TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING, VOL 1, P1470
   Pasupat P, 2014, PROCEEDINGS OF THE 52ND ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P391
   Poesia Gabriel, 2022, INT C LEARN REPR
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Rahmani K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485535
   Raza M, 2020, SIGMOD'20: PROCEEDINGS OF THE 2020 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1967, DOI 10.1145/3318464.3380608
   Raza M, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P792
   Rivest R. L., 1989, Proceedings of the Twenty First Annual ACM Symposium on Theory of Computing, P411, DOI 10.1145/73007.73047
   Shah Ameesh, 2020, P 34 INT C NEUR INF
   Shin R, 2022, NAACL 2022: THE 2022 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES, P5417
   Valkov Lazar, 2018, Advances in neural information processing systems, P8687
   Verbruggen G, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485477
   Wu S, 2018, INT CONF MANAGE DATA, P1301, DOI 10.1145/3183713.3183729
   Ye X, 2021, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2021, P1691
   Zhang GQ, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485489
   Zhou Shuyan, 2023, 11 INT C LEARN REPR
   Zhuo TY, 2023, Arxiv, DOI arXiv:2301.12868
NR 57
TC 2
Z9 2
U1 3
U2 4
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 287
DI 10.1145/3622863
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100067
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU New, MS
   Giovannini, E
   Licata, DR
AF New, Max S.
   Giovannini, Eric
   Licata, Daniel R.
TI Gradual Typing for Effect Handlers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE gradual typing; effect handlers; graduality; operational semantics;
   logical relation
AB We present a gradually typed language, GrEff, with effects and handlers that supports migration from unchecked to checked effect typing. This serves as a simple model of the integration of an effect typing discipline with an existing effectful typed language that does not track fine-grained effect information. Our language supports a simple module system to model the programming model of gradual migration from unchecked to checked effect typing in the style of Typed Racket.
   The surface language GrEff is given semantics by elaboration to a core language Core GrEff. We equip Core GrEff with an inequational theory for reasoning about the semantic error ordering and desired program equivalences for programming with effects and handlers. We derive an operational semantics for the language from the equations provable in the theory. We then showthat the theory is sound by constructing an operational logical relations model to prove the graduality theorem. This extends prior work on embedding-projection pair models of gradual typing to handle effect typing and subtyping.
C1 [New, Max S.; Giovannini, Eric] Univ Michigan, Comp Sci & Engn, Ann Arbor, MI 48109 USA.
   [Licata, Daniel R.] Wesleyan Univ, Math & Comp Sci, Middletown, CT USA.
C3 University of Michigan System; University of Michigan; Wesleyan
   University
RP New, MS (corresponding author), Univ Michigan, Comp Sci & Engn, Ann Arbor, MI 48109 USA.
EM maxsnew@umich.edu; ericgio@umich.edu; dlicata@wesleyan.edu
OI New, Max/0000-0001-8141-195X
CR Asai Kenichi, 2005, Trends in Functional Programming, V6, P63
   Bahr P, 2017, IEEE S LOG
   Schwerter FB, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283, DOI 10.1145/2628136.2628149
   Birkedal L, 2011, IEEE S LOG, P55, DOI 10.1109/LICS.2011.16
   Brachthäuser JI, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000027
   Castagna G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290329
   Cooper E, 2007, LECT NOTES COMPUT SC, V4709, P266
   Dreyer D, 2009, IEEE S LOG, P71, DOI 10.1109/LICS.2009.34
   Forster Y, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000121
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Garcia R, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2676726.2676992, 10.1145/2775051.2676992]
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Kiselyov O, 2013, ACM SIGPLAN NOTICES, V48, P59, DOI 10.1145/2503778.2503791
   Lehmann Nico, 2017, ACM SIGPLAN Notices, V52, P775, DOI 10.1145/3093333.3009856
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Malewski S, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485503
   Marino D., 2009, P 2009 ACM SIGPLAN I, P39, DOI DOI 10.1145/1481861.1481868
   Nakano H, 2000, IEEE S LOG, P255, DOI 10.1109/LICS.2000.855774
   New MS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290328
   New MS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371114
   New Max S, 2018, P ACM PROGR LANG, DOI [10.1145/3236768, DOI 10.1145/3236768]
   New Max S., 2023, Gradual Typing for Effct Handlers (Extended Version)
   New Max S., 2018, Formal Structures for Computation and Deduction, DOI [10.4230/LIPIcs.FSCD.2018.24, DOI 10.4230/LIPICS.FSCD.2018.24]
   Pirog Maciej, 2019, FSCD SCHLOSS DAGSTUH, V30, P1, DOI 10.4230/LIPICS.FSCD.2019.30
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Sekiyama T, 2015, LECT NOTES COMPUT SC, V9458, P189, DOI 10.1007/978-3-319-26529-2_11
   Siek J.G., 2008, Proceedings of the 2008 symposium on Dynamic languages, P7, DOI DOI 10.1145/1408681.1408688
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Sivaramakrishnan KC, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P206, DOI 10.1145/3453483.3454039
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Takikawa A, 2013, LECT NOTES COMPUT SC, V7792, P229, DOI 10.1007/978-3-642-37036-6_14
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Wadler P., 2021, Lecture Notes in Computer Science, V13036, P335, DOI [10.1007/978-3-030-89159-6_21, DOI 10.1007/978-3-030-89159-6_21]
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   WasmFX Contributors, WasmFX:Effect Handlers for WebAssembly
NR 38
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 284
DI 10.1145/3622860
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100064
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Rennels, L
   Chasins, SE
AF Rennels, Lisa
   Chasins, Sarah E.
TI How Domain Experts Use an Embedded DSL
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE embedded domain-specific languages; user experience; contextual inquiry;
   need finding; usability
ID SOFTWARE; LANGUAGE; USABILITY
AB Programming tools are increasingly integral to research and analysis in myriad domains, including specialized areas with no formal relation to computer science. Embedded domain-specific languages (eDSLs) have the potential to serve these programmers while placing relatively light implementation burdens on language designers. However, barriers to eDSL use reduce their practical value and adoption. In this paper, we aim to deepen our understanding of how programmers use eDSLs and identify user needs to inform future eDSL designs. We performed a contextual inquiry (9 participants) with domain experts using Mimi, an eDSL for climate change economics modeling. A thematic analysis identified five key themes, including: the interaction between the eDSL and the host language has significant and sometimes unexpected impacts on eDSL user experience, and users preferentially engage with domain-specific communities and code templates rather than host language resources. The needs uncovered in our study offer design considerations for future eDSLs and suggest directions for future DSL usability research.
C1 [Rennels, Lisa; Chasins, Sarah E.] Univ Calif Berkeley, Berkeley, CA 94720 USA.
C3 University of California System; University of California Berkeley
RP Rennels, L (corresponding author), Univ Calif Berkeley, Berkeley, CA 94720 USA.
EM lrennels@berkeley.edu; schasins@cs.berkeley.edu
OI Rennels, Lisa/0000-0002-5307-9336; Chasins, Sarah/0000-0003-0557-3580
CR Albuquerque D, 2015, J SYST SOFTWARE, V101, P245, DOI 10.1016/j.jss.2014.11.051
   Aleven V, 2016, PROCEEDINGS OF THE THIRD (2016) ACM CONFERENCE ON LEARNING @ SCALE (L@S 2016), P313, DOI 10.1145/2876034.2893442
   Alexandrova S, 2015, IEEE INT CONF ROBOT, P5537, DOI 10.1109/ICRA.2015.7139973
   Alonso-Ríos D, 2018, INT J HUM-COMPUT INT, V34, P1169, DOI 10.1080/10447318.2018.1424101
   [Anonymous], 2022, MAXQDA
   Anthoff David, 2023, Github-mimiframework/Mimi.jl: Integrated Assessment Modeling Framework-Models as Packages
   Anthoff David, 2022, Home-VegaLite.jl
   Anthoff David, 2019, Mimi Framework
   Anthoff David, 2020, YouTube
   Balaji V, 2018, GEOSCI MODEL DEV, V11, P3659, DOI 10.5194/gmd-11-3659-2018
   Ballantyne M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428297
   Barisic A, 2018, 33RD ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P1221, DOI 10.1145/3167132.3167264
   Barisic Ankica, 2017, P COMP 2017 ACM SIGP, P16, DOI [10.1145/3135932.3135953, DOI 10.1145/3135932.3135953]
   Barisic Ankica, 2011, P 3 ACM SIGPLAN WORK, P65, DOI [10.1145/2089155.2089170, DOI 10.1145/2089155.2089170]
   Barisic Ankica, 2012, P 19 C PATT LANG PRO, DOI [10.5555/2821679.2831284, DOI 10.5555/2821679.2831284]
   Barnaby Celeste, 2017, WORKSH EV US PROGR L
   Bastien-Olvera BA, 2021, NAT SUSTAIN, V4, P101, DOI 10.1038/s41893-020-00615-0
   Becker BA, 2019, PROCEEDINGS OF THE WORKING GROUP REPORTS ON INNOVATION AND TECHNOLOGY IN COMPUTER SCIENCE EDUCATION (ITICSE-WGR '19), P177, DOI 10.1145/3344429.3372508
   Bezanson J, 2017, SIAM REV, V59, P65, DOI 10.1137/141000671
   Bezanson Jeff, 2019, JuliaCon2019 | What ' s Bad About Julia | Jeff Bezanson-YouTube
   Blackwell A., 2003, HCI MODELS THEORIES, P103, DOI [DOI 10.1016/B978-155860808-5/50005-8, 10.1016/B978-155860808-5/50005-8]
   Bloch J., 2006, 21 ACM SIGPLAN S OBJ, P506, DOI DOI 10.1145/1176617.1176622
   Boudreau Emma, 2019, The Serious Downsides To The Julia Language In 1.0.3 | by Emma Boudreau | Towards Data Science
   Boudreau Emma, 2021, The Depressing Challenges Facing The Julia Programming Language In 2021 | by Emma Boudreau | Towards Data Science
   Brabrand C, 2002, ACM SIGPLAN NOTICES, V37, P31, DOI 10.1145/509799.503035
   Braun V., 2006, QUAL RES PSYCHOL, V3, P77, DOI [DOI 10.1191/1478088706QP063OA, 10.1191/1478088706qp063oa]
   Bush Rosemary, 2020, Harvard Data Science Review, V2, DOI DOI 10.1162/99608F92.00CD8F85
   Cave Vincent, 2010, Evaluation and Usability of Programming Languages and Tools, P1, DOI [10.1145/1937117.1937126, DOI 10.1145/1937117.1937126]
   Chasins Sarah, 2019, Ph. D. Dissertation
   Crabtree Andrew., 2012, Doing Design Ethnography, DOI DOI 10.1007/978-1-4471-2726-0
   Cuenca F., 2015, P 6 WORKSH EV US PRO, P31, DOI DOI 10.1145/2846680.2846686
   Culpepper R, 2004, LECT NOTES COMPUT SC, V3286, P225
   Culpepper R, 2012, J FUNCT PROGRAM, V22, P439, DOI 10.1017/S0956796812000275
   Culpepper Ryan., 2007, INT C GENERATIVE PRO, P135, DOI [10.1016/j.scico.2009.06.001, DOI 10.1016/J.SCICO.2009.06.001]
   de Balsch Jaan Tollander, 2021, How to Create Software Packages with Julia Language | Jaan Tollander de Balsch
   Denny Paul, 2021, P 2021 CHI C HUMAN F, P1, DOI [DOI 10.1145/3411764.3445696, 10.1145/3411764, DOI 10.1145/3411764]
   Dévai G, 2015, LECT NOTES COMPUT SC, V8606, P300, DOI 10.1007/978-3-319-15940-9_7
   Dietz S, 2021, P NATL ACAD SCI USA, V118, DOI 10.1073/pnas.2103081118
   DSB, 2020, Developing your Julia package. A Tutorial on how to quickly and easily develop your own Julia package. | by DSB | Coffee in a Bottle | Medium
   Easterbrook SM, 2009, COMPUT SCI ENG, V11, P64
   Easterbrook Steve M., 2010, P WORKSH FUT SOFTW E, P99, DOI DOI 10.1145/1882362.1882383
   Elsts Atis, 2013, 2013 39th Euromicro Conference on Software Engineering and Advanced Applications (SEAA), P220, DOI 10.1109/SEAA.2013.16
   Errickson FC, 2021, NATURE, V592, P564, DOI 10.1038/s41586-021-03386-6
   Felleisen Matthias, 2018, How to design programs: an introduction to programming and computing, DOI [10.5555/3265452, DOI 10.5555/3265452]
   Feulner Georg, 2016, Reproducibility: Principles, Problems, Practices, and Prospects, P269, DOI [10.1002/9781118865064.ch12, DOI 10.1002/9781118865064.CH12]
   Freeman S., 2006, Companion to the 21st ACM SIGPLAN Symposium on Object-oriented Programming Systems, Languages, and Applications, OOPSLA '06, P855, DOI DOI 10.1145/1176617.1176735
   Gabriel P, 2011, Arxiv, DOI arXiv:1109.6794
   Gentemann CL, 2021, AGU ADV, V2, DOI 10.1029/2020AV000354
   Ginosar Shiry, 2013, P 26 ANN ACM S US IN, P485, DOI [10.1145/2501988.2502053, DOI 10.1145/2501988.2502053]
   Goodwin C., 2015, AUFMERKSAMKEIT, P387
   Gray J., 2008, COMPANION 23 ACM SIG, P791, DOI DOI 10.1145/1449814.1449863
   Green M, 2016, IEEE SECUR PRIV, V14, P40, DOI 10.1109/MSP.2016.111
   Grundy JC, 2004, J VISUAL LANG COMPUT, V15, P243, DOI 10.1016/j.jvlc.2004.01.003
   H Wickham, 2016, GGPLOT2 ELEGANT GRAP
   HACKING I, 1991, PHILOS STUD, V61, P109, DOI 10.1007/BF00385836
   Head A, 2018, PROCEEDINGS OF THE 2018 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI 2018), DOI 10.1145/3173574.3173659
   Head A, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P1133, DOI 10.1145/2950290.2983973
   Hemel Z, 2011, J SYMB COMPUT, V46, P150, DOI 10.1016/j.jsc.2010.08.006
   Holtzblatt K., 1997, CONTEXTUAL DESIGN DE
   Holzblatt K, 2017, Contextual design: Design for Life, DOI [10.1007/978-3-031-02207-4_2, DOI 10.1007/978-3-031-02207-4_2]
   Hudak P, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P134, DOI 10.1109/ICSR.1998.685738
   Ingibergsson JTM, 2018, 33RD ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P2030, DOI 10.1145/3167132.3167436
   Johanson A, 2017, EMPIR SOFTW ENG, V22, P2206, DOI 10.1007/s10664-016-9483-z
   Julia Contributors, 2022, Methods-The Julia Language
   Julia Contributors, 2022, 3. Managing Packages-Pkg.jl
   Juno, 2022, Juno
   Kamin Samuel N, 1998, Electronic Notes in Theoretical Computer Science, V14, P149, DOI [10.1016/S1571-0661(05)80235-X, DOI 10.1016/S1571-0661(05)80235-X]
   Karsai G, 2014, Arxiv, DOI arXiv:1409.2378
   Kieburtz RB, 1996, PROC INT CONF SOFTW, P542, DOI 10.1109/ICSE.1996.493448
   Knott E, 2022, NAT REV METHOD PRIME, V2, DOI 10.1038/s43586-022-00150-6
   Kojouharov Chris, 2004, P 2004 OOPSLA WORKSH, P27, DOI DOI 10.1145/1066129.1066135
   Kosar T, 2008, INFORM SOFTWARE TECH, V50, P390, DOI 10.1016/j.infsof.2007.04.002
   Kosar T, 2012, EMPIR SOFTW ENG, V17, P276, DOI 10.1007/s10664-011-9172-x
   Krishnamurthi Shriram, 2019, Formal Methods - The Next 30 Years. Third World Congress, FM 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11800), P3, DOI 10.1007/978-3-030-30942-8_1
   Marceau G, 2011, SIGCSE 11: PROCEEDINGS OF THE 42ND ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P499
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Meyerovich LA, 2013, ACM SIGPLAN NOTICES, V48, P1, DOI 10.1145/2509136.2509515
   Microsoft, 2022, Visual Studio Code. Code Editing. Redefined
   Mosqueira-Rey E, 2020, PROCEEDINGS OF THE 35TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING (SAC'20), P1340, DOI 10.1145/3341105.3374234
   Natl Acad Sci Engn Med, 2017, VALUING CLIMATE DAMAGES: UPDATING ESTIMATION OF THE SOCIAL COST OF CARBON DIOXIDE, P1, DOI 10.17226/24651
   Niebler Eric, 2007, P 2007 S LIB CENTR S, P42, DOI [DOI 10.1145/1512762.1512767, 10.1145/1512762.1512767]
   Nishino H., 2012, CHI'12 Extended Abstracts on Human Factors in Computing Systems, P2673, DOI [10.1145/2212776.2223855, DOI 10.1145/2212776.2223855]
   Nissen Jakonb Nybo, 2022, How to optimise Julia code: A practical guide
   Nissen Jakonb Nybo, 2022, What's bad about Julia?
   NORDHAUS W, 1982, AM ECON REV, V72, P242
   Nosal M, 2017, COMPUT LANG SYST STR, V49, P101, DOI 10.1016/j.cl.2017.04.003
   Parham-Mocello J, 2022, PROCEEDINGS OF THE 27TH ACM CONFERENCE ON INNOVATION AND TECHNOLOGY IN COMPUTER SCIENCE EDUCATION, ITICSE 2022, VOL 1, P351, DOI 10.1145/3502718.3524812
   Patnaik N, 2019, PROCEEDINGS OF THE FIFTEENTH SYMPOSIUM ON USABLE PRIVACY AND SECURITY (SOUPS 2019), P245
   Poltronieri I, 2018, 33RD ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, P2013, DOI 10.1145/3167132.3167348
   Poltronieri I, 2018, APPL COMPUT REV, V18, P5, DOI 10.1145/3284971.3284973
   Project Jupyter, 2022, Project Jupyter
   Randall D, 2007, Fieldwork for design: theory and practice, DOI [DOI 10.1007/978-1-84628-768-8, 10.1007/978-1-84628-768-8]
   Rao A, 2018, 2018 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING (VL/HCC), P211, DOI 10.1109/VLHCC.2018.8506504
   Renggli L, 2010, LECT NOTES COMPUT SC, V6183, P380, DOI 10.1007/978-3-642-14107-2_19
   Rennert K, 2022, NATURE, V610, P687, DOI 10.1038/s41586-022-05224-9
   Rennert K, 2021, BROOKINGS PAP ECO AC, P223, DOI 10.1353/eca.2022.0003
   Robillard MP, 2011, EMPIR SOFTW ENG, V16, P703, DOI 10.1007/s10664-010-9150-8
   Robillard MP, 2009, IEEE SOFTWARE, V26, P27, DOI 10.1109/MS.2009.193
   Rodríguez-Gil L, 2019, IEEE ACCESS, V7, P5262, DOI 10.1109/ACCESS.2018.2883500
   Sacks Marc, 1994, On the Job Learning in the Software Industry: Corporate Culture and the Acquisition of Knowledge, DOI [10.1080/08109029608632033, DOI 10.1080/08109029608632033]
   Sauro J, 2016, QUANTIFYING THE USER EXPERIENCE: PRACTICAL STATISTICS FOR USER RESEARCH, 2ND EDITION, P143, DOI 10.1016/B978-0-12-802308-2.00007-2
   Soegaard Mads., 2012, The Encyclopedia of Human-Computer Interaction
   Taipalus T, 2024, ACM T SOFTW ENG METH, V33, DOI 10.1145/3607180
   Thayer K, 2021, ACM T COMPUT EDUC, V21, DOI 10.1145/3444945
   United States Environmental Protection Agency, 2022, EPA EXT REV DRAFT RE
   US EPA, 2022, Regulatory impact analysis for the proposed reconsideration of the national ambient air quality standards for particulate matter
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   Verne G, 2018, INTERACT DES ARCHIT, P89
   Wikipedia Conributors, 2022, Multiple Dispatch-Wikipedia
   Williams D. N., 2014, Eos T. Am. Geophys. Un., V95, P377, DOI [10.1002/2014-o420002, DOI 10.1002/2014-O420002]
   Wood L. E., 1997, Interactions, V4, P48, DOI 10.1145/245129.245134
NR 111
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 275
DI 10.1145/3622851
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100055
OA gold
DA 2024-07-18
ER

PT J
AU Sun, YC
   Peng, XY
   Xiong, YF
AF Sun, Yican
   Peng, Xuanyu
   Xiong, Yingfei
TI Synthesizing Efficient Memoization Algorithms
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Memoization Algorithms
AB In this paper, we propose an automated approach to finding correct and efficient memoization algorithms from a given declarative specification. This problem has two major challenges: (i) a memoization algorithm is too large to be handled by conventional program synthesizers; (ii) we need to guarantee the efficiency of the memoization algorithm. To address this challenge, we structure the synthesis of memoization algorithms by introducing the local objective function and the memoization partition function and reduce the synthesis task to two smaller independent program synthesis tasks. Moreover, the number of distinct outputs of the function synthesized in the second synthesis task also decides the efficiency of the synthesized memoization algorithm, and we only need to minimize the number of different output values of the synthesized function. However, the generated synthesis task is still too complex for existing synthesizers. Thus, we propose a novel synthesis algorithm that combines the deductive and inductive methods to solve these tasks. To evaluate our algorithm, we collect 42 real-world benchmarks from Leetcode, the National Olympiad in Informatics in Provinces-Junior (a national-wide algorithmic programming contest in China), and previous approaches. Our approach successfully synhesizes 39/42 problems in a reasonable time, outperforming the baselines.
C1 [Sun, Yican; Peng, Xuanyu; Xiong, Yingfei] Peking Univ, Minist Educ, Key Lab High Confidence Software Technol, Beijing, Peoples R China.
   [Sun, Yican; Xiong, Yingfei] Peking Univ, Sch Comp Sci, Beijing, Peoples R China.
   [Peng, Xuanyu] Peking Univ, Sch Elect Engn & Comp Sci, Beijing, Peoples R China.
C3 Peking University; Peking University; Peking University
RP Xiong, YF (corresponding author), Peking Univ, Minist Educ, Key Lab High Confidence Software Technol, Beijing, Peoples R China.; Xiong, YF (corresponding author), Peking Univ, Sch Comp Sci, Beijing, Peoples R China.
EM sycpku@pku.edu.cn; dofypxy@pku.edu.cn; xiongyf@pku.edu.cn
OI Peng, Xuanyu/0000-0001-8613-3506
FU National Key Research and Development Program of China [2022YFB4501902];
   National Natural Science Foundation of China [62161146003]
FX We sincerely thank the anonymous reviewers for their valuable feedback
   on this paper and the anonymous OOPSLA Artifacts reviewers for their
   suggestions for the artifact. This work is supported by the National Key
   Research and Development Program of China under Grant No.
   2022YFB4501902, and the National Natural Science Foundation of China
   under Grant No. 62161146003.
CR Acar UA, 2003, ACM SIGPLAN NOTICES, V38, P14, DOI 10.1145/640128.604133
   Adelsberger Heimo H., 2003, Encyclopedia of Physical Science and Technology, P155, DOI [10.1016/B0-12-227410-5/00853-X, DOI 10.1016/B0-12-227410-5/00853-X]
   Aho AV., 1974, DESIGN ANAL COMPUTER
   Alur R, 2018, COMMUN ACM, V61, P84, DOI 10.1145/3208071
   Badihi S, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P13, DOI 10.1145/3368089.3409757
   Bartak Roman., 1999, P WDS99 INV LECT
   Bird R., Algorithm Design with Haskell, P2020, DOI [DOI 10.1017/9781108869041, 10.1017/9781108869041]
   Bird Richard, 1997, Algebra of Programming
   Blasius Thomas, 2022, An Efficient Branch-and-Bound Solver for Hitting Set, P209, DOI [10.1137/1.9781611977042.17arXiv:https://epubs.siam.org/doi/pdf/10.1137/1.9781611977042.17, DOI 10.1137/1.9781611977042.17ARXIV:HTTPS://EPUBS.SIAM.ORG/DOI/PDF/10.1137/1.9781611977042.17]
   Bradley AR, 2006, LECT NOTES COMPUT SC, V3855, P427
   Brillout A, 2011, J AUTOM REASONING, V47, P341, DOI 10.1007/s10817-011-9237-y
   ccf, National Olympiad in Informatics in Provinces-Junior
   Churchill B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1027, DOI 10.1145/3314221.3314596
   COHEN NH, 1983, ACM T PROGR LANG SYS, V5, P265, DOI 10.1145/2166.2167
   Cormen T. H., 2009, Introduction to Algorithms, VSecond
   deMoor O, 1995, LECT NOTES COMPUT SC, V982, P1, DOI 10.1007/BFb0026809
   Farzan A, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P244, DOI 10.1145/3519939.3523726
   Farzan A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P974, DOI 10.1145/3453483.3454089
   Farzan A, 2017, ACM SIGPLAN NOTICES, V52, P540, DOI [10.1145/3062341.3062355, 10.1145/3140587.3062355]
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Giegerich R, 2004, SCI COMPUT PROGRAM, V51, P215, DOI 10.1016/j.scico.2003.12.005
   .github, Full version of this paper
   He M, 2011, LECT NOTES COMPUT SC, V7074, P160, DOI 10.1007/978-3-642-25591-5_18
   Hu QHP, 2021, LECT NOTES COMPUT SC, V12759, P783, DOI 10.1007/978-3-030-81685-8_37
   Itzhaky S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P944, DOI 10.1145/3453483.3454087
   Ji RY, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485544
   Kellerer Hans, 2004, Knapsack problems, V1, P1
   Kitzelmann E, 2006, J MACH LEARN RES, V7, P429
   Kneuss E, 2013, ACM SIGPLAN NOTICES, V48, P407, DOI [10.1145/2509136.2509555, 10.1145/2544173.2509555]
   Knoth T, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P253, DOI 10.1145/3314221.3314602
   Lee W, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571263
   leetcode, The world's leading online programming learning platform
   Liu YHA, 1999, LECT NOTES COMPUT SC, V1576, P288
   Lubin J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408991
   MAIER D, 1978, J ACM, V25, P322, DOI 10.1145/322063.322075
   Marche C, 1996, J SYMB COMPUT, V21, P253, DOI 10.1006/jsco.1996.0011
   Marché C, 1998, LECT NOTES COMPUT SC, V1379, P241
   Miltner A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498682
   Morihata A, 2014, LECT NOTES COMPUT SC, V8475, P186, DOI 10.1007/978-3-319-07151-0_12
   Morita K, 2007, ACM SIGPLAN NOTICES, V42, P146, DOI 10.1145/1273442.1250752
   Mu SC, 2008, PEPM'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PARTIAL EVALUATION AND SEMANTICS-BASED PROGRAM MANIPULATION, P31, DOI 10.1145/1328408.1328414
   Nethercote N, 2007, LECT NOTES COMPUT SC, V4741, P529
   Pettorossi A, 1996, ACM COMPUT SURV, V28, P360, DOI 10.1145/234528.234529
   Polikarpova N, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290385
   Presburger M., 1931, Uber die Vollstandigkeit eines gewissen Systems der Arithmetik ganzer Zahlen, in welchem die Addition als einzige Operation hervortritt
   Pu YW, 2011, ACM SIGPLAN NOTICES, V46, P83, DOI 10.1145/2076021.2048076
   Sauthoff G, 2011, PPDP 11 - PROCEEDINGS OF THE 2011 SYMPOSIUM ON PRINCIPLES AND PRACTICES OF DECLARATIVE PROGRAMMING, P29
   SCHENSTED C, 1961, CANADIAN J MATH, V13, P179, DOI 10.4153/CJM-1961-015-3
   Schrijver Alexander, 2003, COMBINATORIAL OPTIMI
   SHOSTAK RE, 1979, J ACM, V26, P351, DOI 10.1145/322123.322137
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2980983.2908102, 10.1145/2908080.2908102]
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Sun Yican, 2023, Artifact for "Synthesizing Efficient Memoization Functions", DOI [10.5281/zenodo.8325410, DOI 10.5281/ZENODO.8325410]
   Wang YP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276525
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
NR 55
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 225
DI 10.1145/3622800
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100005
OA gold
DA 2024-07-18
ER

PT J
AU Augustsson, L
   Breitner, J
   Claessen, K
   Jhala, R
   Jones, SP
   Shivers, O
   Steele, GL 
   Sweeney, T
AF Augustsson, Lennart
   Breitner, Joachim
   Claessen, Koen
   Jhala, Ranjit
   Jones, Simon Peyton
   Shivers, Olin
   Steele, Guy L., Jr.
   Sweeney, Tim
TI The Verse Calculus: A Core Calculus for Deterministic Functional Logic
   Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE choice operator; confluence; declarative programming; evaluation
   strategy; even/odd problem; functional programming; lambda calculus;
   lenient evaluation; logic programming; logical variables; normal forms;
   rewrite rules; skewconfluence; substitution; unification; Verse
   calculus; Verse language
ID LAMBDA-CALCULUS; SEMANTICS
AB Functional logic languages have a rich literature, but it is tricky to give them a satisfying semantics. In this paper we describe the Verse calculus, VC, a new core calculus for deterministic functional logic programming. Our main contribution is to equip VC with a small-step rewrite semantics, so that we can reason about a VC program in the same way as one does with lambda calculus; that is, by applying successive rewrites to it. We also show that the rewrite system is confluent for well-behaved terms.
C1 [Augustsson, Lennart; Claessen, Koen] Epic Games, Stockholm, Sweden.
   [Jhala, Ranjit; Shivers, Olin; Sweeney, Tim] Epic Games, Cary, NC USA.
   [Jones, Simon Peyton] Epic Games, Gerrards Cross, England.
   [Steele, Guy L., Jr.] Oracle Labs, Redwood City, CA USA.
C3 Oracle
RP Augustsson, L (corresponding author), Epic Games, Stockholm, Sweden.
EM lennart.augustsson@epicgames.com; mail@joachim-breitner.de;
   koen.claessen@epicgames.com; ranjit.jhala@epicgames.com;
   simonpj@epicgames.com; olin.shivers@epicgames.com;
   tim.sweeney@epicgames.com
OI Jhala, Ranjit/0000-0002-1802-9421; Breitner, Joachim/0000-0003-3753-6821
CR Albert E, 2005, J SYMB COMPUT, V40, P795, DOI 10.1016/j.jsc.2004.01.001
   [Anonymous], 1964, PhD thesis
   [Anonymous], 2003, Programming in Prolog: using the ISO standard (Fifth)
   Antoy S., 2021, Curry: A Tutorial Introduction
   Antoy S, 2011, THEOR PRACT LOG PROG, V11, P713, DOI 10.1017/S1471068411000263
   Antoy S, 2010, COMMUN ACM, V53, P74, DOI 10.1145/1721654.1721675
   Antoy S, 2007, ELECTRON NOTES THEOR, V176, P3, DOI 10.1016/j.entcs.2006.10.026
   Antoy S, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P73, DOI 10.1145/1599410.1599420
   Ariola Z. M., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P233, DOI 10.1145/199448.199507
   Ariola ZM, 2002, ANN PURE APPL LOGIC, V117, P95, DOI 10.1016/S0168-0072(01)00104-X
   Ariola ZM, 1997, INFORM COMPUT, V139, P154, DOI 10.1006/inco.1997.2651
   ARIOLA ZM, 1994, IEEE S LOG, P416, DOI 10.1109/LICS.1994.316066
   Arntzenius M, 2016, ACM SIGPLAN NOTICES, V51, P214, DOI 10.1145/3022670.2951948
   Asperti Andrea, 1999, The Optimal Implementation of Functional Programming Languages
   Augustsson Lennart, 2023, Technical Report
   Avgustinov Pavel., 2016, 30th European Conference on Object-Oriented Programming, ECOOP 2016, July 18-22, 2016, Rome, Italy, p2:1, DOI DOI 10.4230/LIPICS.ECOOP.2016.2
   Barenbaum P, 2021, Arxiv, DOI arXiv:2009.10929
   Barenbaum P, 2020, LECT NOTES COMPUT SC, V12545, P242, DOI 10.1007/978-3-030-64276-1_13
   Barendregt H.P., 1984, Studies in logic and the foundations of mathematics
   Bembenek A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428209
   Brassel B, 2007, LECT NOTES COMPUT SC, V4807, P122
   Brassel B, 2009, LECT NOTES ARTIF INT, V5437, P195, DOI 10.1007/978-3-642-00675-3_13
   Brassel Bernd, 2004, Journal of Functional and Logic Programming, V6
   Brassel Bernd, 2004, Technical Report AIB-2004-05, P74
   Ceri S., 1989, IEEE Transactions on Knowledge and Data Engineering, V1, P146, DOI 10.1109/69.43410
   Chakravarty MMT, 1998, SCI COMPUT PROGRAM, V30, P157, DOI 10.1016/S0167-6423(97)00010-5
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Dal Lago U, 2020, LECT NOTES COMPUT SC, V12077, P136, DOI 10.1007/978-3-030-45231-5_8
   DELIGUORO U, 1995, INFORM COMPUT, V122, P149, DOI 10.1006/inco.1995.1145
   FELLEISEN M, 1987, THEOR COMPUT SCI, V52, P205, DOI 10.1016/0304-3975(87)90109-5
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Felleisen Matthias, 1986, FORMAL DESCRIPTION P, P193
   González-Moreno JC, 1999, J LOGIC PROGRAM, V40, P47, DOI 10.1016/S0743-1066(98)10029-8
   Griswold R. E., 1979, SIGPLAN Notices, V14, P18, DOI 10.1145/988078.988082
   Griswold R.E., 1983, ICON PROGRAMMING LAN, V3
   Griswold Ralph E., 2002, The Icon Programming Language, Vthird
   Griswold Ralph E., 1979, Technical Report TR 78-14
   GRISWOLD RE, 1981, ACM T PROGR LANG SYS, V3, P144, DOI 10.1145/357133.357136
   Hanus Michael, 2013, Programming Logics. Essays in Memory of Harald Ganzinger: LNCS 7797, P123, DOI 10.1007/978-3-642-37651-1_6
   Hanus M., 2016, Curry: An Integrated Functional Logic Language (Vers. 0.9.0)
   HUET G, 1980, J ACM, V27, P797, DOI 10.1145/322217.322230
   Icon PC, 1980, Programming Corner from Icon Newsletter 4
   JOHNSSON T, 1985, LECT NOTES COMPUT SC, V201, P190
   Kiselyov O, 2005, ACM SIGPLAN NOTICES, V40, P192, DOI 10.1145/1090189.1086390
   Kutzner A, 1999, ACM SIGPLAN NOTICES, V34, P324, DOI 10.1145/291251.289462
   LAMPING J, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P16, DOI 10.1145/96709.96711
   Launchbury J., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P144, DOI 10.1145/158511.158618
   Levy Jean-Jacques, 1978, PhD thesis
   Lloyd John W., 1999, Journal of Functional and Logic Programming, V1999, P3
   Lopez-Fraguas Francisco J., 2007, Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP'07), P197, DOI 10.1145/1273920.1273947
   López-Fraguas FJ, 2014, THEOR PRACT LOG PROG, V14, P165, DOI 10.1017/S1471068412000373
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   Pacak Andre, 2022, Leibniz International Proceedings in Informatics (LIPIcs), V222, DOI [10.4230/LIPIcs.ECOOP.2022.7, DOI 10.4230/LIPICS.ECOOP.2022.7]
   Peyton Jones S. L., 1992, Journal of Functional Programming, V2, P127, DOI 10.1017/S0956796800000319
   Reynolds John C., 1972, P ACM ANN C ACM 72 N, V2, P717, DOI [10.1145/800194.805852, DOI 10.1145/800194.805852]
   ROBINSON JA, 1965, J ACM, V12, P23, DOI 10.1145/321250.321253
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   SARASWAT VA, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P232, DOI 10.1145/96709.96733
   Schauser K. E., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P216, DOI 10.1145/224164.224208
   Schmidt-Schauss M, 2008, LECT NOTES COMPUT SC, V5117, P321, DOI 10.1007/978-3-540-70590-1_22
   Smolka Gert, 1985, Technical Report TR 85-685
   Steele Jr Guy Lewis, 1978, Technical Report 474
   Warren D. H. D., 1977, SIGPLAN Notices, V12, P109, DOI 10.1145/872734.806939
NR 63
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 203
DI 10.1145/3607845
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900016
OA gold
DA 2024-07-18
ER

PT J
AU Shen, G
   Kashiwa, S
   Kuper, L
AF Shen, Gan
   Kashiwa, Shun
   Kuper, Lindsey
TI HasChor: Functional Choreographic Programming for All (Functional Pearl)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Choreographic programming; freer monads
ID MODEL
AB Choreographic programming is an emerging paradigm for programming distributed systems. In choreographic programming, the programmer describes the behavior of the entire system as a single, unified program - a choreography - which is then compiled to individual programs that run on each node, via a compilation step called endpoint projection. We present a new model for functional choreographic programming where choreographies are expressed as computations in a monad. Our model supports cutting-edge choreographic programming features that enable modularity and code reuse: in particular, it supports higher-order choreographies, in which a choreography may be passed as an argument to another choreography, and location-polymorphic choreographies, in which a choreography can abstract over nodes. Our model is implemented in a Haskell library, HasChor, which lets programmers write choreographic programs while using the rich Haskell ecosystem at no cost, bringing choreographic programming within reach of everyday Haskellers. Moreover, thanks to Haskell's abstractions, the implementation of the HasChor library itself is concise and understandable, boiling down endpoint projection to its short and simple essence.
C1 [Shen, Gan; Kashiwa, Shun; Kuper, Lindsey] Univ Calif Santa Cruz, Santa Cruz, CA 95064 USA.
C3 University of California System; University of California Santa Cruz
RP Shen, G (corresponding author), Univ Calif Santa Cruz, Santa Cruz, CA 95064 USA.
OI Kuper, Lindsey/0000-0002-1374-7715; Kashiwa, Shun/0009-0001-3665-0182
FU National Science Foundation [CCF-2145367]
FX This material is based upon work supported by the National Science
   Foundation under Grant No. CCF-2145367. Any opinions, findings, and
   conclusions or recommendations expressed in this material are those of
   the author(s) and do not necessarily reflect the views of the National
   Science Foundation.
CR Alsberg P. A., 1976, 2nd International Conference on Software Engineering, P562
   Ancona D, 2016, FOUND TRENDS PROGRAM, V3, pI, DOI 10.1561/2500000031
   Basu S, 2016, LECT NOTES COMPUT SC, V9633, P13, DOI 10.1007/978-3-662-49665-7_2
   Carbone M, 2007, LECT NOTES COMPUT SC, V4421, P2
   Carbone M, 2013, ACM SIGPLAN NOTICES, V48, P263, DOI 10.1145/2480359.2429101
   Carbone M, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2220365.2220367
   Chlipala A, 2015, ACM SIGPLAN NOTICES, V50, P153, DOI [10.1145/2775051.2677004, 10.1145/2676726.2677004]
   Cooper E, 2007, LECT NOTES COMPUT SC, V4709, P266
   Corin R, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P170, DOI 10.1109/CSF.2007.29
   Cruz-Filipe L, 2020, THEOR COMPUT SCI, V802, P38, DOI 10.1016/j.tcs.2019.07.005
   Cruz-Filipe Luis, 2022, P 19 INT C THEORETIC, P212, DOI [DOI 10.1007/978, 10.1007/978-3-031-17715-6, DOI 10.1007/978-3-031-17715-6]
   Dalla Preda M, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(2:1)2017
   DIFFIE W, 1976, IEEE T INFORM THEORY, V22, P644, DOI 10.1109/TIT.1976.1055638
   Giallorenzo S, 2023, Arxiv, DOI [arXiv:2005.09520, 10.48550/ARXIV.2005.09520]
   Giallorenzo Saverio, 2021, 35 EUROPEAN C OBJECT, V194
   Graversen E, 2023, Arxiv, DOI [arXiv:2303.04678, 10.48550/ARXIV.2303.04678]
   Gray J. N., 1978, Operating Systems. An Advanced Course, P393
   Hirsch AK, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498684
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Hüttel H, 2016, ACM COMPUT SURV, V49, DOI 10.1145/2873052
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Lampson Butler, 1979, Crash Recovery in a Distributed Data Storage System
   Lanese I, 2013, ELECTRON P THEOR COM, P34, DOI 10.4204/EPTCS.123.5
   Lanese I, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P323, DOI 10.1109/SEFM.2008.11
   McCarthy J, 2008, LECT NOTES COMPUT SC, V5283, P533
   Mendling J, 2005, LECT NOTES COMPUT SC, V3762, P506
   Mestanogullari Alp, 2015, P 11 ACM SIGPLAN WOR, P1, DOI [10.1145/2808098.2808099, DOI 10.1145/2808098.2808099]
   Montesi Fabrizio, 2013, Choreographic Programming
   Montesi Fabrizio, 2023, Introduction to Choreographies, DOI [10.1017/9781108981491, DOI 10.1017/9781108981491]
   Murphy T, 2008, LECT NOTES COMPUT SC, V4912, P108
   Preda Mila Dalla, 2014, arXiv
   Qiu Zongyan, 2007, P WORLD WIDE WEB C W, P973, DOI 10.1145/1242572.1242704
   Serrano M, 2016, ACM SIGPLAN NOTICES, V51, P180, DOI 10.1145/3022670.2951916
   Serrano Manuel, 2006, PROCEEEDINGS 21 ANN, P975, DOI [10.1145/1176617.1176756, DOI 10.1145/1176617.1176756]
   Shvachko K, 2010, IEEE S MASS STOR SYS
   The GHC Team, 2023, Controlling extensions-Glasgow Haskell Compiler 9.7.20230225 User's Guide
   The World Wide Web Consortium, 2005, Web Services Choreography Description Language Version 1.0
   The World Wide Web Consortium, 2006, Web Services Choreography Description Language: Primer
   The World Wide Web Consortium, 2004, WS Choreography Model Overview
   van Renesse R, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P91
   Weisenburger P, 2020, ACM COMPUT SURV, V53, DOI 10.1145/3397495
   Weisenburger P, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276499
NR 42
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 207
DI 10.1145/3607849
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900020
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Bouajjani, A
   Enea, C
   Román-Calvo, E
AF Bouajjani, Ahmed
   Enea, Constantin
   Roman-Calvo, Enrique
TI Dynamic Partial Order Reduction for Checking Correctness against
   Transaction Isolation Levels
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Applications of Storage Systems; Transactional Databases; Weak Isolation
   Levels; Dynamic Partial-Order Reduction
ID STATELESS MODEL CHECKING; SERIALIZABILITY
AB Modern applications, such as social networking systems and e-commerce platforms are centered around using large-scale databases for storing and retrieving data. Accesses to the database are typically enclosed in transactions that allow computations on shared data to be isolated from other concurrent computations and resilient to failures. Modern databases trade isolation for performance. The weaker the isolation level is, the more behaviors a database is allowed to exhibit and it is up to the developer to ensure that their application can tolerate those behaviors.
   In this work, we propose stateless model checking algorithms for studying correctness of such applications that rely on dynamic partial order reduction. These algorithms work for a number of widely-used weak isolation levels, including Read Committed, Causal Consistency, Snapshot Isolation and Serializability. We show that they are complete, sound and optimal, and run with polynomial memory consumption in all cases. We report on an implementation of these algorithms in the context of Java Pathfinder applied to a number of challenging applications drawn from the literature of distributed systems and databases.
C1 [Bouajjani, Ahmed; Roman-Calvo, Enrique] Univ Paris Cite, CNRS, IRIF, Paris, France.
   [Enea, Constantin] Ecole Polytech, CNRS, LIX, Paris, France.
   [Enea, Constantin] Inst Polytech Paris, Paris, France.
C3 Universite Paris Cite; Centre National de la Recherche Scientifique
   (CNRS); Centre National de la Recherche Scientifique (CNRS)
RP Bouajjani, A (corresponding author), Univ Paris Cite, CNRS, IRIF, Paris, France.
EM abou@irif.fr; cenea@lix.polytechnique.fr; calvo@irif.fr
FU project AdeCoDS of the French National Research Agency
FX We thank anonymous reviewers for their feedback, and Ayal Zaks for
   shepherding our paper. This work was partially supported by the project
   AdeCoDS of the French National Research Agency.
CR Abdulla PA, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360576
   Abdulla PA, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276505
   Abdulla PA, 2017, ACTA INFORM, V54, P789, DOI 10.1007/s00236-016-0275-0
   Abdulla PA, 2017, J ACM, V64, DOI 10.1145/3073408
   Abdulla PA, 2016, LECT NOTES COMPUT SC, V9780, P134, DOI 10.1007/978-3-319-41540-6_8
   Adya A., 2000, Proceedings of 16th International Conference on Data Engineering (Cat. No.00CB37073), P67, DOI 10.1109/ICDE.2000.839388
   Adya A, 1999, Weak consistency: a generalized theory and optimistic implementations for distributed transactions
   Agarwal P, 2021, LECT NOTES COMPUT SC, V12759, P341, DOI 10.1007/978-3-030-81685-8_16
   Akkoorath Deepthi Devaki, 2016, Technical Report
   Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7824546
   ANSI X3,, 1992, ANSI X3, P135
   Aronis S, 2018, LECT NOTES COMPUT SC, V10806, P229, DOI 10.1007/978-3-319-89963-3_14
   Balegas Valter, 2015, Proceedings of the Tenth European Conference on Computer Systems, DOI [10.1145/2741948.2741972, DOI 10.1145/2741948.2741972]
   Beillahi SM, 2019, LECT NOTES COMPUT SC, V11562, P286, DOI 10.1007/978-3-030-25543-5_17
   Beillahi Sidi Mohamed, 2019, LIPICS, V140
   Berenson H., 1995, SIGMOD Record, V24, P1, DOI 10.1145/568271.223785
   Bernini G, 2016, LINGUIST FILOL, P7
   Biswas R, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485546
   Biswas R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360591
   Bouajjani A, 2023, Arxiv, DOI arXiv:2303.12606
   Brain Martin, 2017, CEUR WORKSHOP PROC, V1974
   Bronson N., 2013, P 2013 USENIX C ANN, P49
   Brutschy L, 2018, ACM SIGPLAN NOTICES, V53, P90, DOI [10.1145/3192366.3192415, 10.1145/3296979.3192415]
   Brutschy L, 2017, ACM SIGPLAN NOTICES, V52, P458, DOI 10.1145/3093333.3009895
   Cerone A, 2018, J ACM, V65, DOI 10.1145/3152396
   Cerone Andrea, 2015, CONCUR, P58
   Chalupa M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158119
   Chatterjee K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360550
   Clarke E. M., 1999, International Journal on Software Tools for Technology Transfer, V2, P279, DOI 10.1007/s100090050035
   Clarke Edmund M., 1983, C RECORD 10 ANN ACM, P117, DOI [DOI 10.1145/567067.567080, 10.1145/567067]
   DeCandia Giuseppe, 2007, Operating Systems Review, V41, P205, DOI 10.1145/1323293.1294281
   Difallah DE, 2013, PROC VLDB ENDOW, V7, P277, DOI 10.14778/2732240.2732246
   Fekete A, 2005, ACM T DATABASE SYST, V30, P492, DOI 10.1145/1071610.1071615
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Gan Yifan, 2020, PVLDB, V13, DOI DOI 10.14778/3407790.3407860
   Godefroid P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P174, DOI 10.1145/263699.263717
   Gotsman A, 2016, ACM SIGPLAN NOTICES, V51, P371, DOI 10.1145/2914770.2837625
   Guay Paz Jos Rolando, 2018, Microsoft Azure Cosmos DB Revealed: A Multi-Modal Database Designed for the Cloud, V1st
   Jorwekar Sudhir., 2007, VLDB 07, P1263
   Kaki G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276534
   Kokologiannakis M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498711
   Kokologiannakis M, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P1157, DOI 10.1145/3373376.3378480
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Li Cheng, 2014, 2014 USENIX Annual Technical Conference (USENIX ATC 14), P281
   Lloyd W, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P401
   MAZURKIEWICZ A, 1987, LECT NOTES COMPUT SC, V255, P279
   Nagar K., 29th International Conference on Concurrency Theory, CONCUR 2018, September 4-7, 2018, Beijing, China, 2018, p41:1, DOI [DOI 10.4230/LIPICS.CONCUR.2018.41, 10.4230/LIPIcs.CONCUR. 2018.41]
   Nair SS, 2020, LECT NOTES COMPUT SC, V12075, P544, DOI 10.1007/978-3-030-44914-8_20
   Norris B, 2013, ACM SIGPLAN NOTICES, V48, P131, DOI [10.1145/2509136.2509514, 10.1145/2544173.2509514]
   Ozkan Burcu Kulahcioglu, 2020, P LECT NOTES COMPUTE, V12129, P261, DOI [10.1007/978-3-030-67087-0_17, DOI 10.1007/978-3-030-67087-0_17]
   PAPADIMITRIOU CH, 1979, J ACM, V26, P631, DOI 10.1145/322154.322158
   Pavlo A, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P3, DOI 10.1145/3035918.3056096
   Peled D., 1993, Computer Aided Verification. 5th International Conference, CAV '93 Proceedings, P409
   Queille JP, 2008, LECT NOTES COMPUT SC, V5000, P216
   Rahmani K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360543
   Sivaramakrishnan KC, 2015, ACM SIGPLAN NOTICES, V50, P413, DOI [10.1145/2813885.2737981, 10.1145/2737924.2737981]
   TPC, 2010, TECHN REP
   VALMARI A, 1991, LECT NOTES COMPUT SC, V483, P491
   Visser W., 2004, P 2004 ACM SIGSOFT I, P97, DOI [DOI 10.1145/1007512.1007526, 10.1145/1007512.1007526]
   Warszawski T, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P5, DOI 10.1145/3035918.3064037
NR 61
TC 1
Z9 1
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 129
DI 10.1145/3591243
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900025
OA Green Submitted, gold, Green Published
DA 2024-07-18
ER

PT J
AU Kanabar, H
   Vivien, S
   Abrahamsson, O
   Myreen, MO
   Norrish, M
   Pohjola, JA
   Zanetti, R
AF Kanabar, Hrutvik
   Vivien, Samuel
   Abrahamsson, Oskar
   Myreen, Magnus O.
   Norrish, Michael
   Pohjola, Johannes Aman
   Zanetti, Riccardo
TI PureCake: A Verified Compiler for a Lazy Functional Language
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compiler verification; Haskell; interactive theorem proving; HOL4
AB We present PureCake, a mechanically-verified compiler for PureLang, a lazy, purely functional programming language with monadic effects. PureLang syntax is Haskell-like and indentation-sensitive, and its constraint-based Hindley-Milner type system guarantees safe execution. We derive sound equational reasoning principles over its operational semantics, dramatically simplifying some proofs. We prove end-to-end correctness for the compilation of PureLang down to machine code-the first such result for any lazy language-by targeting CakeML and composing with its verified compiler. Multiple optimisation passes are necessary to handle realistic lazy idioms effectively. We develop PureCake entirely within the HOL4 interactive theorem prover.
C1 [Kanabar, Hrutvik] Univ Kent, Canterbury, Kent, England.
   [Vivien, Samuel] Ecole Normale Super PSL, Paris, France.
   [Vivien, Samuel; Abrahamsson, Oskar; Myreen, Magnus O.; Zanetti, Riccardo] Chalmers Univ Technol, Gothenburg, Sweden.
   [Norrish, Michael] Australian Natl Univ, Canberra, ACT, Australia.
   [Pohjola, Johannes Aman] Univ New South Wales, Kensington, NSW, Australia.
C3 University of Kent; Universite PSL; Ecole Normale Superieure (ENS);
   Chalmers University of Technology; Australian National University;
   University of New South Wales Sydney
RP Kanabar, H (corresponding author), Univ Kent, Canterbury, Kent, England.
EM hk324@kent.ac.uk; samuel.vivien@ens.psl.eu; oskar8192@gmail.com;
   myreen@chalmers.se; michael.norrish@anu.edu.au;
   j.amanpohjola@unsw.edu.au; znt.riccardo@gmail.com
OI Norrish, Michael/0000-0003-1163-8467; Kanabar,
   Hrutvik/0000-0003-3116-0392
FU UK Research Institute in Verified Trustworthy Software Systems (VeTSS);
   Swedish Foundation for Strategic Research; Swedish Research Council
   [2021-05165]; Swedish Research Council [2021-05165] Funding Source:
   Swedish Research Council
FX We thank our anonymous reviewers for their constructive feedback and
   helpful shepherding. We thank Maximilian Algehed and Ulf Norell of QuviQ
   for their real-world usage of PureCake ( 7) and for providing a thorough
   experience report. Kanabar is supported by the UK Research Institute in
   Verified Trustworthy Software Systems (VeTSS); Abrahamsson by the
   Swedish Foundation for Strategic Research; and Myreen by the Swedish
   Research Council (grant no. 2021-05165).
CR Adams Michael D., 2013, PRINCIPLES PROGRAMMI, DOI [10.1145/2429069.2429129, DOI 10.1145/2429069.2429129]
   Anonymous, 2023, Zenodo, DOI 10.5281/ZENODO.7782305
   [Anonymous], 1990, RES TOPICS FUNCTIONA
   Appel Andrew W., 2014, PROGRAM LOGICS FOR C
   Bastiaan Heeren, 2005, THESIS UTRECHT U
   Breitner J, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236784
   Breitner J, 2015, ACM SIGPLAN NOTICES, V50, P35, DOI 10.1145/2804302.2804312
   Capretta V, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:1)2005
   Felleisen Mattias, 1987, P 14 ACM SIGACT SIGP, P314, DOI [10.1145/41625.41654, DOI 10.1145/41625.41654]
   Filinski A., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P446, DOI 10.1145/174675.178047
   Filinski A, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P483, DOI 10.1145/1706299.1706354
   Foster Simon., 2021, 32 INT C CONCURRENCY, p20:1, DOI DOI 10.4230/LIPICS.CONCUR.2021.20
   Fox A, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P125, DOI 10.1145/3018610.3018621
   Graf S, 2019, Arxiv, DOI arXiv:1910.11717
   Gu Ronghui., 2016, P USENIX S OPERATING, P653, DOI DOI 10.5555/3026877.3026928
   Hackett J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341718
   Hancock P., 2000, Computer Science Logic. 14th International Workshop, CSL 2000. Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.1862), P317
   Heeren B., 2003, Proceedings of the ACM SIGPLAN Workshop on Haskell, Haskell 2003, Uppsala, Sweden, August 28, 2003, P62, DOI [DOI 10.1145/871895.871902, 10.1145/871895.871902]
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Howe DJ, 1996, INFORM COMPUT, V124, P103, DOI 10.1006/inco.1996.0008
   Hupel Lars, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P999, DOI 10.1007/978-3-319-89884-1_35
   Johnsson Thomas., 1984, SIGPLAN Notices, DOI DOI 10.1145/502874.502880
   Jones Simon Peyton, 1993, GLASGOWWORKSHOP FUNC, DOI [10.1007/978-1-4471-3236-3_17, DOI 10.1007/978-1-4471-3236-3_17]
   JONES SLP, 1991, LECT NOTES COMPUT SC, V523, P636
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Koh N, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P234, DOI 10.1145/3293880.3294106
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Launchbury J., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P144, DOI 10.1145/158511.158618
   Lee OS, 1998, ACM T PROGR LANG SYS, V20, P707, DOI 10.1145/291891.291892
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Letan T, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P32, DOI 10.1145/3372885.3373812
   Mansky W, 2020, LECT NOTES COMPUT SC, V12075, P428, DOI 10.1007/978-3-030-44914-8_16
   McBride C, 2015, LECT NOTES COMPUT SC, V9129, P257, DOI 10.1007/978-3-319-19797-5_13
   McCreight A, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P273
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Moran A., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P43, DOI 10.1145/292540.292547
   Muller O., 1999, Journal of Functional Programming, V9, P191, DOI 10.1017/S095679689900341X
   Myreen M.O., 2021, LIPICS, V193
   Myreen MO, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P32, DOI 10.1145/3437992.3439915
   Myreen MO, 2014, J FUNCT PROGRAM, V24, P284, DOI 10.1017/S0956796813000282
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Owens S, 2016, LECT NOTES COMPUT SC, V9632, P589, DOI 10.1007/978-3-662-49498-1_23
   Peyton Jones S. L., 1992, Journal of Functional Programming, V2, P127, DOI 10.1017/S0956796800000319
   Peyton Jones SimonL., 1989, FPCA '89: Proceedings of the 4th ACM Conference on Functional Programming Languages and Computer Architecture, P184, DOI 10.1145/99370.99385
   Piróg M, 2014, ELECTRON NOTES THEOR, V308, P273, DOI 10.1016/j.entcs.2014.10.015
   Pitts Andrew M., 2012, ADV TOPICS BISIMULAT, V52
   Pohjola Johannes Aman, 2022, P 13 INT C INTERACTI, V237, P1, DOI [10.4230/LIPIcs.ITP.2022.27, DOI 10.4230/LIPICS.ITP.2022.27]
   Pous D, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P307, DOI 10.1145/2933575.2934564
   Schmidt-Schauss M, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:7)2015
   Sergey Ilya, 2014, THEORY PRACTIC UNPUB
   Sewell T, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591266
   Stelle G, 2018, PROCEEDINGS OF THE 30TH SYMPOSIUM ON IMPLEMENTATION AND APPLICATION OF FUNCTIONAL LANGUAGES (IFL 2018), P49, DOI 10.1145/3310232.3310236
   Swamy N, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409003
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Wadler Philip, 1987, FUNCTIONAL PROGRAMMI, V274, DOI [10.1007/3-540-18317-5_21, DOI 10.1007/3-540-18317-5_21]
   Weirich S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110275
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Yao Li, 2021, Proceedings of the ACM on Programming Languages, V5, DOI 10.1145/3473585
NR 58
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 145
DI 10.1145/3591259
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900041
OA Green Published, gold, Green Accepted
DA 2024-07-18
ER

PT J
AU Lew, AK
   Ghavamizadeh, M
   Rinard, MC
   Mansinghka, VK
AF Lew, Alexander K.
   Ghavamizadeh, Matin
   Rinard, Martin C.
   Mansinghka, Vikash K.
TI Probabilistic Programming with Stochastic Probabilities
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programming; semantics; approximate computing
ID SOUND
AB We present a new approach to the design and implementation of probabilistic programming languages (PPLs), based on the idea of stochastically estimating the probability density ratios necessary for probabilistic inference. By relaxing the usual PPL design constraint that these densities be computed exactly, we are able to eliminate many common restrictions in current PPLs, to deliver a language that, for the first time, simultaneously supports first-class constructs for marginalization and nested inference, unrestricted stochastic control flow, continuous and discrete sampling, and programmable inference with custom proposals. At the heart of our approach is a new technique for compiling these expressive probabilistic programs into randomized algorithms for unbiasedly estimating their densities and density reciprocals. We employ these stochastic probability estimators within modified Monte Carlo inference algorithms that are guaranteed to be sound despite their reliance on inexact estimates of density ratios. We establish the correctness of our compiler using logical relations over the semantics of lambda(SP) a new core calculus for modeling and inference with stochastic probabilities. We also implement our approach in an open-source extension to Gen, called GenSP, and evaluate it on six challenging inference problems adapted from the modeling and inference literature. We find that: (1) GenSP can automate fast density estimators for programs with very expensive exact densities; (2) convergence of inference is mostly unaffected by the noise from these estimators; and (3) our sound-by-construction estimators are competitive with hand-coded density estimators, incurring only a small constant-factor overhead.
C1 [Lew, Alexander K.; Ghavamizadeh, Matin; Rinard, Martin C.; Mansinghka, Vikash K.] MIT, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Lew, AK (corresponding author), MIT, Cambridge, MA 02139 USA.
EM alexlew@mit.edu; mghavami@mit.edu; rinard@mit.edu; vkm@mit.edu
FU NSF Graduate Research Fellowship [1745302]; DARPA
FX We are grateful to Ben Sherman, Michael Carbin, Marco Cusumano-Towner,
   Alexey Radul, Jonathan Rees, Zane Shelby, and Joshua Thayer for their
   help on earlier versions of this work. We have also bene~ted greatly
   from conversations with and feedback from Tan Zhi-Xuan, Nishad
   Gothoskar, McCoy Becker, Mathieu Huot, Feras Saad, Joshua Tenenbaum, Eli
   Sennesh, Jan-Willem van de Meent, Lionel Wong, Matt Bowers, Tony Chen,
   Tracey Mills, Cameron Freer, Jean-Baptiste Tristan, and Jesse Michel.
   Our anonymous referees also contributed very helpful feedback. This
   material is based on work supported by the NSF Graduate Research
   Fellowship under Grant No. 1745302. Our work is also supported under the
   DARPA Machine Common Sense and SAIL-ON projects.
CR Andrieu C, 2010, J R STAT SOC B, V72, P269, DOI 10.1111/j.1467-9868.2009.00736.x
   Andrieu C, 2009, ANN STAT, V37, P697, DOI 10.1214/07-AOS574
   Baydin A. G, 2019, Proceedings of the international conference for high performance computing, networking, storage and analysis, P1
   Beaumont MA, 2003, GENETICS, V164, P1139
   Bingham E, 2019, J MACH LEARN RES, V20
   Calli B, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL CONFERENCE ON ADVANCED ROBOTICS (ICAR), P510, DOI 10.1109/ICAR.2015.7251504
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   Cheng EY, 2023, Arxiv, DOI arXiv:2110.10284
   Chopin Nicolas, 2020, An Introduction to Sequential Monte Carlo, DOI 10.1007/978-3-030-47845-2
   Cusumano-Towner MF, 2017, ADV NEUR IN, V30
   Cusumano-Towner MF, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P221, DOI 10.1145/3314221.3314642
   Cusumano-Towner Marco Francis, 2020, GEN HIGH LEVEL PROGR, V2020, P231
   Doucet A, 2015, BIOMETRIKA, V102, P295, DOI 10.1093/biomet/asu075
   Cusumano-Towner MF, 2018, Arxiv, DOI arXiv:1801.03612
   Cusumano-Towner MF, 2017, Arxiv, DOI arXiv:1704.04977
   Fearnhead P, 2010, J R STAT SOC B, V72, P497, DOI 10.1111/j.1467-9868.2010.00744.x
   FISCHLER MA, 1981, COMMUN ACM, V24, P381, DOI 10.1145/358669.358692
   Ge Hong, 2018, PMLR, V84, P1682
   Gehr T, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P883, DOI 10.1145/3385412.3386006
   Goodman ND., 2008, UAI, P220
   Goodman ND, 2016, TRENDS COGN SCI, V20, P818, DOI 10.1016/j.tics.2016.08.005
   Gothoskar N., 2021, Advances in Neural Information Processing Systems (NeurIPS)
   Heunen Chris, 2017, 2017 32nd Annual ACM/IEEE Symposium on Logic in Computer Science (LICS), DOI 10.1109/LICS.2017.8005137
   Holtzen S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428208
   Huot M, 2020, LECT NOTES COMPUT SC, V12077, P319, DOI 10.1007/978-3-030-45231-5_17
   Johnson J, 2018, PROC CVPR IEEE, P1219, DOI 10.1109/CVPR.2018.00133
   Johnson J, 2015, PROC CVPR IEEE, P3668, DOI 10.1109/CVPR.2015.7298990
   Lee W, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371084
   Lew AK, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571198
   Lew AK, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371087
   Lew Alexander K., 2021, 24 INT C ARTI CIAL I, V130, P1927
   Lew M., 2022, C UNCERTAINTY ARTIF, P1096
   Li JL, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571243
   Mansinghka V, 2014, Arxiv, DOI arXiv:1404.0099
   Mansinghka VK, 2018, ACM SIGPLAN NOTICES, V53, P603, DOI [10.1145/3192366.3192409, 10.1145/3296979.3192409]
   MAYS E, 1991, INFORM PROCESS MANAG, V27, P517, DOI 10.1016/0306-4573(91)90066-U
   Narayanan P, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3374208
   Neal RM, 2000, J COMPUT GRAPH STAT, V9, P249, DOI 10.2307/1390653
   Rainforth T, 2018, UNCERTAINTY IN ARTIFICIAL INTELLIGENCE, P249
   Ronquist F, 2021, COMMUN BIOL, V4, DOI 10.1038/s42003-021-01753-7
   Saad FA, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P804, DOI 10.1145/3453483.3454078
   Saad FA, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290350
   Scibior A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158148
   Shan CC, 2017, ACM SIGPLAN NOTICES, V52, P130, DOI 10.1145/3093333.3009852
   Stites Sam, 2021, UNCERTAINTY ARTIFICI, P1056
   Stuhlmuller Andreas, 2012, 2 INT WORKSHOP STAT
   Tran MN, 2016, Arxiv, DOI arXiv:1309.3339
   Wang D, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P788, DOI 10.1145/3453483.3454077
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
   Zhang YZ, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498677
   Zhi-Xuan Tan, 2020, ADV NEURAL INFORM PR
   Zinkov R, 2017, Arxiv, DOI arXiv:1603.01882
   Zucker M, 2007, IEEE INT CONF ROBOT, P1603, DOI 10.1109/ROBOT.2007.363553
NR 53
TC 0
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 176
DI 10.1145/3591290
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900072
OA gold
DA 2024-07-18
ER

PT J
AU Liu, JR
   Chen, YJ
   Atkinson, E
   Feng, Y
   Bodik, R
AF Liu, Junrui
   Chen, Yanju
   Atkinson, Eric
   Feng, Yu
   Bodik, Rastislav
TI Conflict-Driven Synthesis for Layout Engines
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis
AB Modern web browsers rely on layout engines to convert HTML documents to layout trees that specify color, size, and position. However, existing layout engines are notoriously difficult to maintain because of the complexity of web standards. This is especially true for incremental layout engines, which are designed to improve performance by updating only the parts of the layout tree that need to be changed.
   In this paper, we propose Medea, a new framework for automatically generating incremental layout engines. Medea separates the specification of the layout engine from its incremental implementation, and guarantees correctness through layout engine synthesis. The synthesis is driven by a new iterative algorithm based on detecting conflicts that prevent optimality of the incremental algorithm.
   We evaluated Medea on a fragment of HTML layout that includes challenging features such as margin collapse, floating layout, and absolute positioning. Medea successfully synthesized an incremental layout engine for this fragment. The synthesized layout engine is both correct and efficient. In particular, we demonstrated that it avoids real-world bugs that have been reported in the layout engines of Chrome, Firefox, and Safari. The incremental layout engine synthesized by Medea is up to 1.82x faster than a naive incremental baseline. We also demonstrated that our conflict-driven algorithm produces engines that are 2.74x faster than a baseline without conflict analysis.
C1 [Liu, Junrui; Chen, Yanju; Feng, Yu] Univ Calif Santa Barbara, Santa Barbara, CA 93106 USA.
   [Atkinson, Eric] MIT, Cambridge, MA USA.
   Google Res, Mountain View, CA USA.
C3 University of California System; University of California Santa Barbara;
   Massachusetts Institute of Technology (MIT); Google Incorporated
RP Liu, JR (corresponding author), Univ Calif Santa Barbara, Santa Barbara, CA 93106 USA.
EM junrui@cs.ucsb.edu; yanju@cs.ucsb.edu; eatkinson@csail.mit.edu;
   yufeng@cs.ucsb.edu; rastislavb@google.com
OI Feng, Yu/0000-0003-1000-1229; Chen, Yanju/0000-0002-6494-3126
FU NSF [SaTC-1908494, ITE-2132318, CCF-2122950, ITE-2029457, ITE-1936731,
   CCF-1918027, IIS-1924435, CAPA NSF CCF-1723352]; DARPA HARDEN; Google
   Faculty Research Award; Intel [CAPA NSF CCF-1723352]; CONIX Research
   Center (one of six centers in JUMP, a Semiconductor Research Corporation
   (SRC) program - DARPA [CMU 1042741-394324 AM01];  [FA8750-16-2-0032]
FX We thank the anonymous reviewers from both the current and the past
   submissions of this paper for their invaluable feedback. This work was
   partially funded by NSF awards SaTC-1908494, ITE-2132318, CCF-2122950,
   ITE-2029457, ITE-1936731, CCF-1918027, and IIS-1924435, grants from
   DARPA HARDEN and FA8750-16-2-0032, the Google Faculty Research Award,
   the Intel and NSF joint research center for Computer Assisted
   Programming for Heterogeneous Architectures (CAPA NSF CCF-1723352), the
   CONIX Research Center (one of six centers in JUMP, a Semiconductor
   Research Corporation (SRC) program sponsored by DARPA CMU 1042741-394324
   AM01), as well as gifts from Adobe, Facebook, Google, Intel, and
   Qualcomm.
CR Badros G. J., 1999, 99 UIST. Proceedings of the 12th Annual ACM Symposium on User Interface Software and Technology, P73, DOI 10.1145/320719.322588
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Bigham Jefrey P., 2014, P 27 ANN ACM S US IN, P117, DOI [DOI 10.1145/2642918, 10.1145/2642918.2647357, DOI 10.1145/2642918.2647357]
   Borning A, 1997, ACM MULTIMEDIA 97, PROCEEDINGS, P173, DOI 10.1145/266180.266361
   Bos B, 2011, TECHNICAL REPORT
   Bos Bert, 1998, CSS 2 COLLAPSING MAR
   Bos Bert, 2016, CSS 2 2 COLLAPSING M
   Browserling, 2018, US
   Brubeck Matt, 2014, INCORRECT LAYOUT ELE
   Brubeck Matt, 2021, ROBINSON LAYOUT ENGI
   caniuse, 2019, COMP FIR 51 FIR 58 C
   Chen Yanju, 2022, TREE TRAVERSAL SYNTH, P1030, DOI [10.1145/3503222.3507751, DOI 10.1145/3503222.3507751]
   Choudhary S. R., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P171, DOI 10.1109/ICST.2012.97
   Choudhary Shauvik Roy, 2010, P 2010 IEEE INT C SO, P1, DOI [10.1109/ICSM.2010.5609723, DOI 10.1109/ICSM.2010.5609723]
   Chugh R, 2016, ACM SIGPLAN NOTICES, V51, P341, DOI [10.1145/2980983.2908103, 10.1145/2908080.2908103]
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Eklund Emil, 2019, LAYOUTNG
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Github, 2013, EL BUILD CROSS PLATF
   Halle Sylvain., 2015, Software Testing, Verification and Validation (ICST), 2015 IEEE 8th International Conference on, P1, DOI [10.1109/ICST.2015.7102635, DOI 10.1109/ICST.2015.7102635]
   Hashimoto Osamu, 1992, P 5 ANN ACM S US INT, P117, DOI [DOI 10.1145/142621.142635, 10.1145/142621.142635, 19.1145/142621.142635]
   Keesara Anantha, 2007, BUG 15662 LAYOUT IS
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   LLC Gurobi Optimization, 2019, Gurobi Optimizer Reference Manual
   Mahajan S, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P140, DOI 10.1145/3180155.3180262
   Mahajan S, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P249, DOI 10.1145/3092703.3092726
   Mahajan S, 2018, IEEE INT CONF SOFTW, P215, DOI 10.1109/ICST.2018.00030
   Mesbah A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P561, DOI 10.1145/1985793.1985870
   Meyerovich LA, 2013, ACM SIGPLAN NOTICES, V48, P187, DOI 10.1145/2517327.2442535
   Mozilla, 2019, MARG COLL BOD EL CRE
   NELSON G, 1980, J ACM, V27, P356, DOI 10.1145/322186.322198
   Panchekha P, 2018, ACM SIGPLAN NOTICES, V53, P1, DOI [10.1145/3296979.3192407, 10.1145/3192366.3192407]
   Panchekha P, 2016, ACM SIGPLAN NOTICES, V51, P181, DOI 10.1145/3022671.2984010
   PatrickWalton, 2014, BLOCK FORMATTING CON
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sakka L, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P830, DOI 10.1145/3314221.3314626
   Schkufza E, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI 10.1145/2499368.2451150
   Silva JPM, 1996, IEEE IC CAD, P220, DOI 10.1109/ICCAD.1996.569607
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Solarlezama Armando, 2008, PROGRAM SYNTHESIS SK
   stshine, 2016, FLOATS FAILS INT INL
   Sutherland I. E., 1964, P SHARE DES AUT WORK, DOI DOI 10.1145/800265.810742
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Torlak Emina, 2013, P 2013 ACM INT S NEW, P135, DOI DOI 10.1145/2509578.2509586
   Uhler R, 2014, ACM SIGPLAN NOTICES, V49, P157, DOI [10.1145/2660193.2660208, 10.1145/2714064.2660208]
   Van Wyk C.J., 1982, ACM Transactions on Graphics, V1, P163, DOI DOI 10.1145/357299.357303
   Vander Zanden B., 1991, Human Factors in Computing Systems. Reaching Through Technology. CHI '91. Conference Proceedings, P465, DOI 10.1145/108844.109005
   W3C, 2007, CSS BAS BOX MOD
   Walsh TA, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P192, DOI 10.1145/3092703.3092712
   Walsh TA, 2015, IEEE INT CONF AUTOM, P709, DOI 10.1109/ASE.2015.31
   Wilkinson L., 2005, The Grammar of Graphics. Statistics and Computing, Ved 2
NR 51
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2023
VL 7
IS PLDI
AR 132
DI 10.1145/3591246
PG 22
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA I9DA7
UT WOS:001005701900028
OA gold
DA 2024-07-18
ER

PT J
AU Zhou, J
   Criswell, J
   Hicks, M
AF Zhou, Jie
   Criswell, John
   Hicks, Michael
TI Fat Pointers for Temporal Memory Safety of C
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Temporal Memory Safety; Fat Pointers; Checked C
AB Temporal memory safety bugs, especially use-after-free and double free bugs, pose a major security threat to C programs. Real-world exploits utilizing these bugs enable attackers to read and write arbitrary memory locations, causing disastrous violations of confidentiality, integrity, and availability. Many previous solutions retrofit temporal memory safety to C, but they all either incur high performance overhead and/or miss detecting certain types of temporal memory safety bugs. In this paper, we propose a temporal memory safety solution that is both efficient and comprehensive. Specifically, we extend Checked C, a spatially-safe extension to C, with temporally-safe pointers. These are implemented by combining two techniques: fat pointers and dynamic key-lock checks. We show that the fat-pointer solution significantly improves running time and memory overhead compared to the disjointmetadata approach that provides the same level of protection. With empirical program data and hands-on experience porting real-world applications, we also show that our solution is practical in terms of backward compatibility-one of the major complaints about fat pointers.
C1 [Zhou, Jie; Criswell, John] Univ Rochester, Rochester, NY 14627 USA.
   [Hicks, Michael] Amazon, Seattle, WA USA.
   [Hicks, Michael] Univ Maryland, College Pk, MD 20742 USA.
C3 University of Rochester; Amazon.com; University System of Maryland;
   University of Maryland College Park
RP Zhou, J (corresponding author), Univ Rochester, Rochester, NY 14627 USA.
EM jiezhou@rochester.edu; criswell@cs.rochester.edu; mwh@cs.umd.edu
OI Hicks, Michael/0000-0002-2759-9223; Zhou, Jie/0000-0001-7493-2212
FU NSF [CNS-1955498]
FX We thank the anonymous reviewers for their valuable feedback. We also
   thank David Tarditi for helping us initiate this project. In addition,
   we thank Sreepathi Pai, Deian Stefan, and Aravind Machiry for their
   insightful comments and suggestions on an early draft of the paper. This
   work was funded by a research gift from Microsoft Research and NSF award
   CNS-1955498.
CR Afek J., 2007, DANGLING POINTER SMA
   Agner Fog, 2021, 4 INSTRUCTION TABLES
   AIDanial, 2022, CLOC COUNT LINES COD
   Ainsworth S, 2020, P IEEE S SECUR PRIV, P578, DOI 10.1109/SP40000.2020.00058
   Akritidis Periklis., 2010, P 19 USENIX C SECURI, P12
   [Anonymous], 2001, P 2001 ACM SIGPLAN S, DOI DOI 10.1145/379605.379665
   [Anonymous], 2002, ACM SIGPLAN NOTICES, DOI [DOI 10.1145/565816.503286, 10.1145/503272.503286, DOI 10.1145/503272.503286]
   Apache Software Foundation, 2022, AB AP HTTP SERV BENC
   Apple Inc, 2017, LZFSE COMPR LIB COMM
   ARM Limited, 2019, ARM DDI 0487E.a (ID070919)
   Arm Ltd, 2019, ARMV8 5 MEM TAGG EXT
   Astrauskas V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428204
   AUSTIN TM, 1994, SIGPLAN NOTICES, V29, P290, DOI 10.1145/773473.178446
   Berger ED, 2006, ACM SIGPLAN NOTICES, V41, P158, DOI 10.1145/1133981.1134000
   Biswas P, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P183
   BOEHM HJ, 1993, SIGPLAN NOTICES, V28, P197, DOI 10.1145/173262.155109
   Boehm HJ, 2002, ACM SIGPLAN NOTICES, V37, P93, DOI 10.1145/565816.503282
   Burow N, 2018, PROCEEDINGS OF THE 2018 ACM ASIA CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (ASIACCS'18), P381, DOI 10.1145/3196494.3196540
   Cho H, 2022, ASPLOS '22: PROCEEDINGS OF THE 27TH ACM INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P271, DOI 10.1145/3503222.3507780
   Cimpanu Catalin, 2020, CHROME 70 ALL SECURI
   Common Weaknesses Enumeration, 2020, US FREE
   Condit J, 2007, LECT NOTES COMPUT SC, V4421, P520
   Criswell John, 2007, Operating Systems Review, V41, P351, DOI 10.1145/1323293.1294295
   curl, 2022, CURL SEC PROBL
   Dang THY, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P815
   Deorowicz Sebastian, Silesia compression corpus
   Dhurjati D, 2006, I C DEPEND SYS NETWO, P269, DOI 10.1109/DSN.2006.31
   Dhurjati D, 2006, ACM SIGPLAN NOTICES, V41, P144, DOI 10.1145/1133981.1133999
   Duan JH, 2020, 2020 IEEE SECURE DEVELOPMENT (SECDEV 2020), P15, DOI 10.1109/SecDev45635.2020.00018
   Elliott AS, 2018, 2018 IEEE CYBERSECURITY DEVELOPMENT CONFERENCE (SECDEV 2018), P53, DOI 10.1109/SecDev.2018.00015
   Evans AN, 2020, PROC INT CONF SOFTW, P246
   Farkhani Reza Mirzazade, 2021, 30 USENIX SECURITY S
   Filardo NW, 2020, P IEEE S SECUR PRIV, P608, DOI 10.1109/SP40000.2020.00098
   FISCHER CN, 1980, IEEE T SOFTWARE ENG, V6, P313, DOI 10.1109/TSE.1980.230482
   Gregg Brendan, 2020, Systems Performance: Enterprise and the Cloud, V2nd
   Gregg Brendan, 2018, MEASURE WORKING SET
   Gui BF, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P309, DOI 10.1145/3460319.3464835
   Intel Corporation, 2021, 253665075US INT CORP
   Intel Corporation, 2019, 325462069US INT CORP
   Jim T, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P275
   Kowshik S., 2002, International Conference on Architecture and Synthesis for Embedded Systems (CASES), P288, DOI DOI 10.1145/581630.581678
   Krzysztof Gabis, 2021, PARSON LIGHTWEIGHT J
   Kwon Albert, 2013, P 2013 ACM SIGSAC C, P721, DOI 10.1145
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lee B, 2015, 22ND ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2015), DOI 10.14722/ndss.2015.23238
   Lemire Daniel, 2016, MEMORY USAGE STL CON
   Li Liyi, 2022, P COMP SEC FDN S CSF
   Liu DP, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P1635, DOI 10.1145/3243734.3243826
   Liu S, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2359, DOI 10.1145/3133956.3134066
   LLVM Developer Group, 2022, PROM MEM REG
   LLVM Developer Group, 2022, LLVM TEST SUIT
   LLVM Document, 2022, LLVM POINTERTYPE CLA
   Lu H.J., 2020, SYSTEM 5 APPL BINARY
   Luk Chi-Keung, 1996, P 7 INT C ARCH SUPP, P222, DOI [DOI 10.1145/248209.237190, DOI 10.1145/237090.237190]
   Machiry A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527322
   Mahoney Matt, 2021, LARGE TEXT COMPRESSI
   Microsoft Incorporation, US PAG EX WIND XP WI
   Miller Matt, 2019, Trends, challenge, and shifts in software vulnerability mitigation
   Mozilla, 2023, RUST PROGR LANG
   Nagaraju S.S., 2013, Software vulnerability exploitation trends.
   Nagarakatte S., 2014, P ANN IEEE ACM INT S, P175
   NAGARAKATTE S., 2015, SUMMIT ADV PROGRAMMI, P190
   Nagarakatte S, 2012, CONF PROC INT SYMP C, P189, DOI 10.1109/ISCA.2012.6237017
   Nagarakatte S, 2010, ACM SIGPLAN NOTICES, V45, P31
   Nagarakatte S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P245, DOI 10.1145/1542476.1542504
   Nagarakatte Santosh, 2014, SOFTBOUNDCETS LLVM C
   Necula GC, 2005, ACM T PROGR LANG SYS, V27, P477, DOI 10.1145/1065887.1065892
   Novark G, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P573, DOI 10.1145/1866307.1866371
   Ozler Hakan, 2019, CURATED LIST JSON BS
   Patil H, 1997, SOFTWARE PRACT EXPER, V27, P87, DOI 10.1002/(SICI)1097-024X(199701)27:1<87::AID-SPE78>3.0.CO;2-P
   Pereira R, 2017, SLE'17: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING, P256, DOI 10.1145/3136014.3136031
   Perens Bruce, 1993, ELECT FENCE
   Phantasmal Phantasmagoria, 2005, MALL MAL
   Poskanzer Jef, 2018, THTTPD TINY TURBO TH
   Pratikakis P, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1889997.1890000
   ROGERS A, 1995, ACM T PROGR LANG SYS, V17, P233, DOI 10.1145/201059.201065
   Shen Z, 2020, ANN COMPUT SECURITY, P454, DOI 10.1145/3427228.3427645
   Shin Jangseop., 2019, NDSS
   Silvestro S, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P117
   Silvestro S, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2389, DOI 10.1145/3133956.3133957
   Simpson MS, 2013, SOFTWARE PRACT EXPER, V43, P93, DOI 10.1002/spe.2105
   Stenberg Daniel, 2022, CURL COMMAND LINE TO
   Tarditi D., 2021, Extending C with Bounds Safety and Improved Type Safety
   van der Kouwe E, 2017, PROCEEDINGS OF THE TWELFTH EUROPEAN CONFERENCE ON COMPUTER SYSTEMS (EUROSYS 2017), P405, DOI 10.1145/3064176.3064211
   WebAssembly, 2021, MEMORY64
   Wei Xu, 2004, Software Engineering Notes, V29, P117, DOI 10.1145/1041685.1029913
   Wickman B, 2021, PROCEEDINGS OF THE 30TH USENIX SECURITY SYMPOSIUM, P2453
   Woodruff J, 2014, CONF PROC INT SYMP C, P457, DOI 10.1109/ISCA.2014.6853201
   Xia HY, 2019, MICRO'52: THE 52ND ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, P545, DOI 10.1145/3352460.3358288
   Xu W, 2015, CCS'15: PROCEEDINGS OF THE 22ND ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P414, DOI 10.1145/2810103.2813637
   Younan Y, 2015, 22ND ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2015), DOI 10.14722/ndss.2015.23190
   Zeiss Mirco, 2012, REALLY BIG JSON FILE
   Zhang T, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P631, DOI 10.1145/3297858.3304017
   Zhang YC, 2022, IEEE INT CONF AUTOM, DOI 10.1145/3551349.3559494
NR 94
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2023
VL 7
IS OOPSLA
DI 10.1145/3586038
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA D3XF3
UT WOS:000968084600013
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Barrière, A
   Blazy, S
   Pichardie, D
AF Barriere, Aurele
   Blazy, Sandrine
   Pichardie, David
TI Formally Verified Native Code Generation in an Effectful JIT
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE verified compilation; just-in-time compilation; CompCert compiler
AB Modern Just-in-Time compilers (or JITs) typically interleave several mechanisms to execute a program. For faster startup times and to observe the initial behavior of an execution, interpretation can be initially used. But after a while, JITs dynamically produce native code for parts of the program they execute often. Although some time is spent compiling dynamically, this mechanism makes for much faster times for the remaining of the program execution. Such compilers are complex pieces of software with various components, and greatly rely on a precise interplay between the different languages being executed, including on-stack-replacement. Traditional static compilers like CompCert have been mechanized in proof assistants, but JITs have been scarcely formalized so far, partly due to their impure nature and their numerous components. This work presents a model JIT with dynamic generation of native code, implemented and formally verified in Coq. Although some parts of a JIT cannot be written in Coq, we propose a proof methodology to delimit, specify and reason on the impure effects of a JIT. We argue that the daunting task of formally verifying a complete JIT should draw on existing proofs of native code generation. To this end, our work successfully reuses CompCert and its correctness proofs during dynamic compilation. Finally, our prototype can be extracted and executed.
C1 [Barriere, Aurele; Blazy, Sandrine] Univ Rennes, INRIA, CNRS, IRISA, Rennes, France.
   [Pichardie, David] Meta, Paris, France.
C3 Centre National de la Recherche Scientifique (CNRS); Inria; Universite
   de Rennes
RP Barrière, A (corresponding author), Univ Rennes, INRIA, CNRS, IRISA, Rennes, France.
EM aurele.barriere@irisa.fr; sandrine.blazy@irisa.fr
OI Barriere, Aurele/0000-0002-7297-2170
CR Appel AW, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2701415
   Aurele Barriere, 2022, Zenodo, DOI 10.5281/ZENODO.7149192
   Barrière A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434327
   Barthe G, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2579080
   Brown F, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P135, DOI 10.1145/3385412.3385968
   Cock D, 2008, LECT NOTES COMPUT SC, V5170, P167, DOI 10.1007/978-3-540-71067-7_16
   Flückiger O, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158137
   HotSpot, 2022, JAV HOTSPOT PERF ENG
   Inria, 2022, COQ PROOF ASS REF MA
   Kang J, 2018, ACM SIGPLAN NOTICES, V53, P631, DOI 10.1145/3192366.3192377
   KASTNER D, 2018, ERTS2 2018 9 EUR C E, P1
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Lammich P, 2019, J AUTOM REASONING, V62, P261, DOI 10.1007/s10817-017-9442-4
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leroy X., 2016, ERTS 2016 EMBEDDED R
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Letan T, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P32, DOI 10.1145/3372885.3373812
   Lööw A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1041, DOI 10.1145/3314221.3314622
   Myreen MO, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P107, DOI 10.1145/1706299.1706313
   Owens S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110262
   Pit-Claudel C, 2020, LECT NOTES COMPUT SC, V12167, P119, DOI 10.1007/978-3-030-51054-1_7
   PyPy, 2022, PYPY PYTH IMPL
   Sakaguchi K, 2018, LECT NOTES COMPUT SC, V10818, P51, DOI 10.1007/978-3-319-90686-7_4
   Song Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371091
   Stewart G, 2015, ACM SIGPLAN NOTICES, V50, P275, DOI [10.1145/2676726.2676985, 10.1145/2775051.2676985]
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Tan YK, 2016, ACM SIGPLAN NOTICES, V51, P60, DOI 10.1145/3022670.2951924
   V8, 2022, V8 JAV ENG
   Wang YT, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290375
   Watt C, 2021, LECT NOTES COMPUT SC, V13047, P61, DOI 10.1007/978-3-030-90870-6_4
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Zakowski Y, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473572
   Zhao JZ, 2013, ACM SIGPLAN NOTICES, V48, P175, DOI 10.1145/2499370.2462164
   Zhao JZ, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P427
NR 35
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
AR 9
DI 10.1145/3571202
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500009
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Murali, A
   Peña, L
   Blanchard, E
   Löding, C
   Madhusudan, P
AF Murali, Adithya
   Pena, Lucas
   Blanchard, Eion
   Loeding, Christof
   Madhusudan, P.
TI Model-Guided Synthesis of Inductive Lemmas for FOL with Least Fixpoints
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Inductive Hypothesis Synthesis; Learning Logics; Counterexample-Guided
   Inductive Synthesis; First Order Logic with Least Fixpoints; Verifying
   Linked Data Structures
ID THEOREM PROVER; INSTANTIATION; LOGIC
AB Recursively defined linked data structures embedded in a pointer-based heap and their properties are naturally expressed in pure first-order logic with least fixpoint definitions (FO+lfp) with background theories. Such logics, unlike pure first-order logic, do not admit even complete procedures. In this paper, we undertake a novel approach for synthesizing inductive hypotheses to prove validity in this logic. The idea is to utilize several kinds of finite first-order models as counterexamples that capture the non-provability and invalidity of formulas to guide the search for inductive hypotheses. We implement our procedures and evaluate them extensively over theorems involving heap data structures that require inductive proofs and demonstrate the effectiveness of our methodology.
C1 [Murali, Adithya; Pena, Lucas; Madhusudan, P.] Univ Illinois, Dept Comp Sci, Champaign, IL 61820 USA.
   [Blanchard, Eion] Univ Illinois, Dept Mat, Champaign, IL USA.
   [Loeding, Christof] Rhein Westfal TH Aachen, Dept Comp Sci, Aachen, Germany.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   University of Illinois System; University of Illinois Urbana-Champaign;
   RWTH Aachen University
RP Murali, A (corresponding author), Univ Illinois, Dept Comp Sci, Champaign, IL 61820 USA.
EM adithya5@illinois.edu; lpena7@illinois.edu; eionmb2@illinois.edu;
   loeding@automata.rwth-aachen.de; madhu@illinois.edu
OI Parthasarathy, Madhusudan/0000-0002-9782-721X; Murali,
   Adithya/0000-0002-6311-1467; Blanchard, Eion/0000-0002-8270-8226
FU Amazon; Discovery Partners Institute (DPI) science team seed grant
FX This work is supported in part by a research grant from Amazon and a
   Discovery Partners Institute (DPI) science team seed grant.
CR Alur R., 2015, Syntax-guided synthesis
   Alur R, 2018, COMMUN ACM, V61, P84, DOI 10.1145/3208071
   [Anonymous], 2007, Finite Model Theory and Its Applications, DOI [10.1007/3-540-68804-8, DOI 10.1007/3-540-68804-8_3]
   Ball T, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/565816.503274
   Bansal Kshitij, 2019, arXiv, DOI 10.48550/ARXIV.1904.03241
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Boyer R.S., 1988, A Computational Logic Handbook, V1st ed.
   Bradley A.R., 2007, The Calculus of Computation-Decision Procedures with Applications to Verification, DOI [DOI 10.1007/978-3-540-74113-8, 10.1007/978-3-540-74113-8]
   Brotherston J, 2011, LECT NOTES ARTIF INT, V6803, P131, DOI 10.1007/978-3-642-22438-6_12
   Calcagno C, 2005, LECT NOTES COMPUT SC, V3441, P395
   Chu DH, 2015, ACM SIGPLAN NOTICES, V50, P457, DOI [10.1145/2813885.2737984, 10.1145/2737924.2737984]
   Claessen Koen, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P392, DOI 10.1007/978-3-642-38574-2_27
   Cruanes S, 2017, LECT NOTES ARTIF INT, V10483, P172, DOI 10.1007/978-3-319-66167-4_10
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Enderton H.B., 2001, A mathematical introduction to logic, DOI [10.1016/C2009-0-22107-6, DOI 10.1016/C2009-0-22107-6]
   Feldman YMY, 2017, LECT NOTES COMPUT SC, V10205, P76, DOI 10.1007/978-3-662-54577-5_5
   Garg P, 2014, LECT NOTES COMPUT SC, V8559, P69, DOI 10.1007/978-3-319-08867-9_5
   Ge YT, 2009, LECT NOTES COMPUT SC, V5643, P306
   Govind VKH, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498722
   Hajdu M., 2020, Intelligent Computer Mathematics, volume 12236 of Lecture Notes in Computer Science, P123, DOI 10.1007/978-3-030-53518
   Hodges Wilfrid, 1997, A shorter model theory
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Johansson M., 2019, LECT NOTES COMPUTER, V11617, P125, DOI DOI 10.1007/978-3-030-23250-4_9
   Kaufmann M, 1997, IEEE T SOFTWARE ENG, V23, P203, DOI 10.1109/32.588534
   Kaufmann Matt, 2000, ComputerAided Reasoning: An Approach, DOI DOI 10.1007/978-1-4615-4449-4
   Koenig JR, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P703, DOI 10.1145/3385412.3386018
   Kovács L, 2017, ACM SIGPLAN NOTICES, V52, P260, DOI 10.1145/3093333.3009887
   Krogmeier P, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498671
   Leino KRM, 2012, LECT NOTES COMPUT SC, V7148, P315, DOI 10.1007/978-3-642-27940-9_21
   Libkin Leonid, 2004, TEXT THEORET COMP S, DOI 10.1007/978-3-662-07003-1
   Löding C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158098
   Madhusudan P, 2012, ACM SIGPLAN NOTICES, V47, P123, DOI 10.1145/2103621.2103673
   Maltsev A. I., 1962, Sibirsk. Mat. Zh., V3, P729
   Murali A, 2020, LECT NOTES COMPUT SC, V12075, P515, DOI 10.1007/978-3-030-44914-8_19
   Murali Adithya, 2022, Artifact for OOPSLA 2022 Article Model-Guided Synthesis of Inductive Lemmas for FOL with Least Fixpoints, DOI [10.1145/3554331, DOI 10.1145/3554331]
   Namjoshi K. S., 2000, Computer Aided Verification, P435
   Neider D, 2018, LECT NOTES COMPUT SC, V10805, P232, DOI 10.1007/978-3-319-89960-2_13
   Nelson G., 1979, ACM Transactions on Programming Languages and Systems, V1, P245, DOI 10.1145/357073.357079
   Nelson Greg, 1980, PhD thesis
   Nguyen HH, 2008, LECT NOTES COMPUT SC, V5123, P355
   Passmore G, 2020, LECT NOTES COMPUT SC, V12167, P464, DOI 10.1007/978-3-030-51054-1_30
   Pek E, 2014, ACM SIGPLAN NOTICES, V49, P440, DOI [10.1145/2594291.2594325, 10.1145/2666356.2594325]
   Qiu XK, 2013, ACM SIGPLAN NOTICES, V48, P231, DOI 10.1145/2499370.2462169
   Quang LL, 2017, LECT NOTES COMPUT SC, V10427, P495, DOI 10.1007/978-3-319-63390-9_26
   Reynolds A, 2019, LECT NOTES COMPUT SC, V11562, P74, DOI 10.1007/978-3-030-25543-5_5
   Reynolds A, 2015, LECT NOTES COMPUT SC, V8931, P80
   Reynolds Andrew, 2017, EPiC Series in Computing, V44, P1, DOI [10.29007/jmd3, DOI 10.29007/JMD3]
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rümmer P, 2012, LECT NOTES COMPUT SC, V7180, P359, DOI 10.1007/978-3-642-28717-6_28
   Sighireanu M, 2019, LECT NOTES COMPUT SC, V11429, P116, DOI 10.1007/978-3-030-17502-3_8
   Solar-Lezama A, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P167, DOI 10.1145/1250734.1250754
   Solar-Lezama Armando, 2008, Program Synthesis By Sketching
   Sonnex W, 2012, LECT NOTES COMPUT SC, V7214, P407, DOI 10.1007/978-3-642-28756-5_28
   Suter P, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P199, DOI 10.1145/1706299.1706325
   Ta QT, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158097
   Ta QT, 2016, LECT NOTES COMPUT SC, V9995, P659, DOI 10.1007/978-3-319-48989-6_40
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Yang WK, 2019, LECT NOTES COMPUT SC, V11802, P600, DOI 10.1007/978-3-030-30048-7_35
   Zhang H, 2021, LECT NOTES COMPUT SC, V12597, P325, DOI 10.1007/978-3-030-67067-2_15
NR 60
TC 3
Z9 3
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 191
DI 10.1145/3563354
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200068
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Van der Rest, C
   Poulsen, CB
   Rouvoet, A
   Visser, E
   Mosses, P
AF Van der Rest, Cas
   Poulsen, Casper Bach
   Rouvoet, Arjen
   Visser, Eelco
   Mosses, Peter
TI Intrinsically-Typed Definitional Interpreters a la Carte
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Type Safety; Modularity; Reuse; Definitional Interpreters; Dependently
   Typed Programming
AB Specifying and mechanically verifying type safe programming languages requires significant effort. This effort can in theory be reduced by defining and reusing pre-verified, modular components. In practice, however, existing approaches to modular mechanical verification require many times as much specification code as plain, monolithic definitions. This makes it hard to develop new reusable components, and makes existing component specifications hard to grasp. We present an alternative approach based on intrinsically-typed interpreters, which reduces the size and complexity of modular specifications as compared to existing approaches. Furthermore, we introduce a new abstraction for safe-by-construction specification and composition of pre-verified type safe language components: language fragments. Language fragments are about as concise and easy to develop as plain, monolithic intrinsically-typed interpreters, but require about 10 times less code than previous approaches to modular mechanical verification of type safety.
C1 [Van der Rest, Cas; Poulsen, Casper Bach; Rouvoet, Arjen; Visser, Eelco; Mosses, Peter] Delft Univ Technol, Delft, Netherlands.
C3 Delft University of Technology
RP Van der Rest, C (corresponding author), Delft Univ Technol, Delft, Netherlands.
EM c.r.vanderrest@tudelft.nl; c.b.poulsen@tudelft.nl;
   a.j.rouvoet@tudelft.nl; p.d.mosses@tudelft.nl
RI ; Mosses, Peter/A-8206-2019
OI van der Rest, Cas/0000-0002-0059-5353; Bach Poulsen,
   Casper/0000-0003-0622-7639; Mosses, Peter/0000-0002-5826-7520
FU  [VI.Veni.192.259]
FX We thank the anonymous reviewers for their extensive comments and
   feedback, which helped to improve the paper enormously. Furthermore, we
   thank Benedikt Ahrens for helpful discussion about the generalization of
   language fragments to domain descriptions. This research was partially
   funded by the NWO VENI Composable and Safe-by-Construction Programming
   Language Definitions project (VI.Veni.192.259).
CR Abbott M, 2005, THEOR COMPUT SCI, V342, P3, DOI 10.1016/j.tcs.2005.06.002
   Ahmed AJ, 2002, IEEE S LOG, P75, DOI 10.1109/LICS.2002.1029818
   Allais G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236785
   Altenkirch T, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S095679681500009X
   Amin N, 2017, ACM SIGPLAN NOTICES, V52, P666, DOI 10.1145/3093333.3009866
   [Anonymous], 2004, Ph.D. Dissertation.
   Augustsson Lennart, 1999, WORKSH DEP TYP PROGR
   Bahr P, 2012, ELECTRON P THEOR COM, P3, DOI 10.4204/EPTCS.76.3
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Chapman J, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P3
   Chlipala A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Churchill M, 2015, LECT NOTES COMPUT SC, V8989, P132, DOI 10.1007/978-3-662-46734-3_4
   Churchill M, 2013, LECT NOTES COMPUT SC, V7794, P97, DOI 10.1007/978-3-642-37075-5_7
   Cimini M, 2020, PROCEEDINGS OF THE 13TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING, SLE 2020, P108, DOI 10.1145/3426425.3426936
   Cockx Jesper., 2017, Dependent Pattern Matching and Proof-Relevant Unification
   Coquand Thierry., 1992, P WORKSHOP TYPES PRO, P71
   Dagand P., 2013, Ph.D. thesis
   Dagand PE, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000356
   Dagand PE, 2014, J FUNCT PROGRAM, V24, P316, DOI 10.1017/S0956796814000069
   Delaware B, 2013, ACM SIGPLAN NOTICES, V48, P207, DOI 10.1145/2480359.2429094
   Delaware Benjamin, 2013, Modular monadic meta-theory, P319, DOI [10.1145/2500365.2500587, DOI 10.1145/2500365.2500587]
   Devriese D, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   HARPER R, 1994, INFORM PROCESS LETT, V51, P201, DOI 10.1016/0020-0190(94)90120-1
   Keuchel Steven, 2013, WORKSH GEN PROGR BOS, P13, DOI [10.1145/2502488.2502491, DOI 10.1145/2502488.2502491]
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Kiselyov O, 2013, ACM SIGPLAN NOTICES, V48, P59, DOI 10.1145/2503778.2503791
   Ko HS, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000307
   Kripke Saul A., 1963, Zeitschrift fur mathematische Logik und Grundlagen der Mathematik, V9, P67, DOI DOI 10.1002/MALQ.19630090502
   Madlener K, 2011, ELECTRON PROC THEOR, P17, DOI 10.4204/EPTCS.62.2
   McBride Conor, 2011, Ornamental algebras, algebraic ornaments
   Meertens L., 1992, Formal Aspects of Computing, V4, P413, DOI 10.1007/BF01211391
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Mosses PD, 2004, J LOGIC ALGEBR PROGR, V60-1, P195, DOI 10.1016/j.jlap.2004.03.008
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   Norell Ulf, 2009, P 4 INT WORKSHOP TYP, P1, DOI DOI 10.1145/1481861.1481862
   Oliveira BCDS, 2012, LECT NOTES COMPUT SC, V7313, P2, DOI 10.1007/978-3-642-31057-7_2
   Owens S, 2016, LECT NOTES COMPUT SC, V9632, P589, DOI 10.1007/978-3-662-49498-1_23
   Parreaux L, 2019, SCALA'19: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P12, DOI 10.1145/3337932.3338813
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Poulsen CB, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158104
   Schrijvers Tom, 2021, arXiv
   Schwaab Christopher, 2013, P 7 WORKSH PROGR LAN, P3, DOI [10.1145/2428116.2428120WouterSwierstra, DOI 10.1145/2428116.2428120WOUTERSWIERSTRA]
   Sheng Liang, 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P333, DOI 10.1145/199448.199528
   Torrini P, 2015, ELECTRON P THEOR COM, P143, DOI 10.4204/EPTCS.191.13
   Van Der Rest Cas, 2022, Zenodo, DOI 10.5281/ZENODO.7074690
   Wadler Philip, 2020, Programming Language Foundations in Agda
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Zakowski Y, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473572
NR 51
TC 2
Z9 2
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 192
DI 10.1145/3563355
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200069
OA gold
DA 2024-07-18
ER

PT J
AU Jacobs, J
   Balzer, S
   Krebbers, R
AF Jacobs, Jules
   Balzer, Stephanie
   Krebbers, Robbert
TI Multiparty GV: Functional Multiparty Session Types with Certified
   Deadlock Freedom
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Session types; message-passing concurrency; deadlock freedom
ID GLOBAL PROGRESS
AB Session types have recently been integrated with functional languages, bringing message-passing concurrency to functional programming. Channel endpoints then become first-class and can be stored in data structures, captured in closures, and sent along channels. Representatives of the GV (Wadler's lGood Variationz) session type family are of particular appeal because they not only assert session fidelity but also deadlock freedom, inspired by a Curry-Howard correspondence to linear logic. A restriction of current versions of GV, however, is the focus on binary sessions, limiting concurrent interactions within a session to two participants. This paper introduces Multiparty GV (MPGV), a functional language with multiparty session types, allowing concurrent interactions among several participants. MPGV upholds the strong guarantees of its ancestor GV, including deadlock freedom, despite session interleaving and delegation. MPGV has a novel redirecting construct for modular programming with first-class endpoints, thanks to which we give a type-preserving translation from binary session types to MPGV to show that MPGV is strictly more general than binary GV. All results in this paper have been mechanized using the Coq proof assistant.
C1 [Jacobs, Jules; Krebbers, Robbert] Radboud Univ Nijmegen, Nijmegen, Netherlands.
   [Balzer, Stephanie] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
C3 Radboud University Nijmegen; Carnegie Mellon University
RP Jacobs, J (corresponding author), Radboud Univ Nijmegen, Nijmegen, Netherlands.
EM mail@julesjacobs.com; balzers@cs.cmu.edu; mail@robbertkrebbers.nl
OI Jacobs, Jules/0000-0003-1976-3182
FU Dutch Research Council (NWO) [016]; AFOSR [FA9550-21-1-0385]; National
   Science Foundation [CCF-2211996]
FX We thank the anonymous reviewers for their helpful feedback and
   especially for their encouragement to explore a more permissive
   consistency condition than compliance with a global type, resulting in
   6. We are grateful to Jorge Perez, Bas van den Heuvel, Dan Frumin, and
   Bernardo Toninho for discussions on this paper and related work. Robbert
   Krebbers was supported by the Dutch Research Council (NWO), project
   016.Veni.192.259. Stephanie Balzer was supported in part by AFOSR under
   grant FA9550-21-1-0385 (Tristan Nguyen, program manager) and by the
   National Science Foundation under award number CCF-2211996. Any
   opinions, findings and conclusions or recommendations expressed in this
   material are those of the authors and do not necessarily reflect the
   views of the AFOSR or NSF.
CR [Anonymous], 2017, Acta Informatica, DOI DOI 10.1007/S00236-016-0285-Y
   Avron A., 1991, Annals of Mathematics and Artificial Intelligence, V4, P225, DOI 10.1007/BF01531058
   Balzer S, 2019, LECT NOTES COMPUT SC, V11423, P611, DOI 10.1007/978-3-030-17184-1_22
   Balzer S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110281
   Balzer Stephanie, 2018, CONCUR, DOI DOI 10.4230/LIPICS.CONCUR.2018.30
   Bettini L, 2008, LECT NOTES COMPUT SC, V5201, P418, DOI 10.1007/978-3-540-85361-9_33
   Caires L, 2016, LECT NOTES COMPUT SC, V9688, P74, DOI 10.1007/978-3-319-39570-8_6
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Carbone M, 2017, ACTA INFORM, V54, P243, DOI 10.1007/s00236-016-0285-y
   Carbone Marco, 2016, LIPIcs, V59
   Castro-Perez D, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P237, DOI 10.1145/3453483.3454041
   Castro-Perez David, 2020, TACAS, DOI [DOI 10.1007/978-3-030-45237-7, 10.1007/978-3-030-45237-7_17, DOI 10.1007/978-3-030-45237-7_17]
   Chen Ruo Fei, 2022, 36 EUR C OBJ OR PROG, V222, DOI [10.4230/LIPIcs.ECOOP.2022.22, DOI 10.4230/LIPICS.ECOOP.2022.22]
   Ciccone Luca, 2020, PPDP 20 22 INT S PRI, DOI [10.1145/3414080.3414109, DOI 10.1145/3414080.3414109]
   Coppo M, 2016, MATH STRUCT COMP SCI, V26, P238, DOI 10.1017/S0960129514000188
   Coppo M, 2013, LECT NOTES COMPUT SC, V7890, P45, DOI 10.1007/978-3-642-38493-6_4
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P50, DOI 10.1145/301631.301641
   Cruz-Filipe L, 2021, LECT NOTES COMPUT SC, V12819, P115, DOI 10.1007/978-3-030-85315-0_8
   Cruz-Filipe Luis, 2021, Interactive Theorem Proving (ITP)
   Dardha O, 2018, LECT NOTES COMPUT SC, V10803, P91, DOI 10.1007/978-3-319-89366-2_5
   Demangeon R, 2012, LECT NOTES COMPUT SC, V7454, P272, DOI 10.1007/978-3-642-32940-1_20
   Deniélou PM, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P435, DOI 10.1145/1926385.1926435
   Dezani-Ciancaglini M, 2006, LECT NOTES COMPUT SC, V4067, P328
   Fowler S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290341
   Fowler Simon, 2021, CONCUR, DOI [10.4230/LIPIcs.CONCUR.2021.36, DOI 10.4230/LIPICS.CONCUR.2021.36]
   Gay SJ, 2020, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.314.3
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Ghilezan S, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434297
   Giachino Elena, 2014, CONCUR 2014 - Concurrency Theory. 25th International Conference, CONCUR 2014. Proceedings: LNCS 8704, P63, DOI 10.1007/978-3-662-44584-6_6
   Goto M, 2016, MATH STRUCT COMP SCI, V26, P465, DOI 10.1017/S0960129514000231
   Hinrichsen JK, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P178, DOI 10.1145/3437992.3439914
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Hu R, 2017, LECT NOTES COMPUT SC, V10202, P116, DOI 10.1007/978-3-662-54494-5_7
   Imai K, 2019, SCI COMPUT PROGRAM, V172, P135, DOI 10.1016/j.scico.2018.08.005
   Imai K, 2011, ELECTRON P THEOR COM, P74, DOI 10.4204/EPTCS.69.6
   Jacobs J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498662
   Jacobs Jules, 2022, MPGV COQ DEV, DOI [10.5281/zenodo.6884760, DOI 10.5281/ZENODO.6884760]
   Jespersen Thomas Bracht Laumann, 2015, P 11 ACM SIGPLAN WOR, P13, DOI DOI 10.1145/2808098.2808100
   Keizer AC, 2021, LECT NOTES COMPUT SC, V12648, P375, DOI 10.1007/978-3-030-72019-3_14
   Kobayashi N, 2002, INFORM COMPUT, V177, P122, DOI 10.1006/inco.2002.3171
   Kobayashi N, 1997, IEEE S LOG, P128, DOI 10.1109/LICS.1997.614941
   Kobayashi N, 2006, LECT NOTES COMPUT SC, V4137, P233
   Kobayashi N, 2017, INFORM COMPUT, V252, P48, DOI 10.1016/j.ic.2016.03.004
   Kokke W, 2019, ELECTRON P THEOR COM, P48, DOI 10.4204/EPTCS.304.4
   Kokke W, 2021, HASKELL '21: PROCEEDINGS OF THE 14TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL, P1, DOI 10.1145/3471874.3472979
   Kokke W, 2021, LECT NOTES COMPUT SC, V12719, P100, DOI 10.1007/978-3-030-78089-0_6
   Kokke W, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290337
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krebbers Robbert, 2018, P ACM PROGR LANG, DOI [10.1145/3236772, DOI 10.1145/3236772]
   Lindley S, 2017, RIV PUBL SER AUTOMAT, P265
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P133, DOI [10.1145/2976002.2976018, 10.1145/3241625.2976018]
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P434, DOI 10.1145/3022670.2951921
   Lindley S, 2015, LECT NOTES COMPUT SC, V9032, P560, DOI 10.1007/978-3-662-46669-8_23
   Montesi Fabrizio., 2020, INTRO CHOREOGRAPHIES
   Mostrous D, 2009, LECT NOTES COMPUT SC, V5502, P316, DOI 10.1007/978-3-642-00590-9_23
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   Padovani L, 2014, IEEE S LOG, DOI 10.1145/2603088.2603116
   Padovani L, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000289
   Peressotti Marco, 2018, ABS180301049
   Pfenning F, 2015, LECT NOTES COMPUT SC, V9034, P3, DOI 10.1007/978-3-662-46678-0_1
   Pucella R, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P25
   Rouvoet A, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P284, DOI 10.1145/3372885.3373818
   Scalas A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290343
   Scalas Alceste, 2019, LESS IS MORE MULTIPA
   Scalas Alceste, 2016, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, DOI [DOI 10.4230/LIPICS, DOI 10.4230/LIPICS.ECOOP.2016.21]
   Tassarotti J, 2017, LECT NOTES COMPUT SC, V10201, P909, DOI 10.1007/978-3-662-54434-1_34
   Thiemann P, 2019, PROCEEDINGS OF THE 21ST INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2019), DOI 10.1145/3354166.3354184
   Toninho B, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3242173
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   Toninho Bernardo, 2015, Ph. D. Dissertation
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
   Zalakain Uma, 2021, FORTE, V2719, P157, DOI [10.1007/978-3-030-78089-0_9, DOI 10.1007/978-3-030-78089-0_9]
NR 76
TC 6
Z9 6
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 107
DI 10.1145/3547638
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000018
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Ostermann, K
   Binder, D
   Skupin, I
   Süberkrüb, T
   Downen, P
AF Ostermann, Klaus
   Binder, David
   Skupin, Ingo
   Sueberkrueb, Tim
   Downen, Paul
TI Introduction and Elimination, Left and Right
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Duality; Sequent Calculus; Natural Deduction
ID CALL-BY-VALUE
AB Functional programming language design has been shaped by the framework of natural deduction, in which language constructs are divided into introduction and elimination rules for producers of values. In sequent calculus-based languages, left introduction rules replace (right) elimination rules and provide a dedicated sublanguage for consumers of values. In this paper, we present and analyze a wider design space of programming languages which encompasses four kinds of rules: Introduction and elimination, both left and right. We analyze the influence of rule choice on program structure and argue that having all kinds of rules enriches a programmer's modularity arsenal. In particular, we identify four ways of adhering to the principle that "the structure of the program follows the structure of the data" and show that they correspond to the four possible choices of rules. We also propose the principle of bi-expressibility to guide and validate the design of rules for a connective. Finally, we deepen the well-known dualities between different connectives by means of the proof/refutation duality.
C1 [Ostermann, Klaus; Binder, David; Skupin, Ingo; Sueberkrueb, Tim] Univ Tubingen, Tubingen, Germany.
   [Downen, Paul] Univ Massachusetts Lowell, Lowell, MA USA.
C3 Eberhard Karls University of Tubingen; University of Massachusetts
   System; University of Massachusetts Lowell
RP Ostermann, K (corresponding author), Univ Tubingen, Tubingen, Germany.
EM klaus.ostermann@uni-tuebingen.de; david.binder@uni-tuebingen.de;
   skupin@informatik.uni-tuebingen.de;
   tim.sueberkrueb@student.uni-tuebingen.de; Paul_Downen@uml.edu
OI Downen, Paul/0000-0003-0165-9387; Ostermann, Klaus/0000-0001-5294-5506;
   Suberkrub, Tim/0000-0001-8709-6321; Binder, David/0000-0003-1272-0972
FU DFG project lEfficient Compilation of Control-Effectsz, DFG [OS
   293/5-1]; DFG [PI 1174/1-1]
FX David Binder, Klaus Ostermann, Ingo Skupin and Tim Suberkrub were
   supported by the DFG project lEfficient Compilation of Control-Effectsz,
   DFG grant OS 293/5-1. David Binder was also supported by the DFG project
   lConstructive Semantics and the Completeness Problemz, DFG grant PI
   1174/1-1.
CR Abel A, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2480359.2429075
   Andreoli J. M., 1992, Journal of Logic and Computation, V2, P297, DOI 10.1093/logcom/2.3.297
   [Anonymous], 1974, Studia Logica
   Binder D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371098
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Carraro A, 2013, ELECTRON PROC THEOR, P93, DOI 10.4204/EPTCS.113.10
   Crolard T, 2004, J LOGIC COMPUT, V14, P529, DOI 10.1093/logcom/14.4.529
   Curien PL, 2000, ACM SIGPLAN NOTICES, V35, P233, DOI 10.1145/357766.351262
   de Groote P., 1994, LECT NOTES COMPUTER, V822, P31, DOI DOI 10.1007/3-540-58216-9_27
   Downen P, 2019, LECT NOTES COMPUT SC, V11423, P119, DOI 10.1007/978-3-030-17184-1_5
   Downen P, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000023
   Downen P, 2014, LECT NOTES COMPUT SC, V8410, P249
   Downen Paul, 2021, LIPICS, V195, P1, DOI [10.4230/LIPIcs.FSCD.2021.1, DOI 10.4230/LIPICS.FSCD.2021.1]
   Felleisen Matthias, 2001, How to Design Programs
   Gentzen G, 1935, MATH Z, V39, P405, DOI 10.1007/BF01201363
   Gibbons J, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000113
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   HAGINO T, 1989, J SYMB COMPUT, V8, P629, DOI 10.1016/S0747-7171(89)80065-3
   Herbelin H, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P383, DOI 10.1145/1328438.1328484
   Hofmann M, 1997, IEEE S LOG, P387, DOI 10.1109/LICS.1997.614964
   Lovas W., 2006, STRUCTURAL NORMALIZA
   Munch-Maccagnoni G, 2009, LECT NOTES COMPUT SC, V5771, P409, DOI 10.1007/978-3-642-04027-6_30
   Nakazawa Koji, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P349, DOI 10.1007/978-3-319-08918-8_24
   Negri S, 2002, J PHILOS LOGIC, V31, P569, DOI 10.1023/A:1021264102972
   Negri S., 2001, STRUCTURAL PRO, DOI DOI 10.1017/CBO9780511527340
   Ostermann Klaus, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P60, DOI 10.1007/978-3-319-89884-1_3
   Ostermann Klaus, 2022, Zenodo, DOI 10.5281/ZENODO.6685674
   PARIGOT M, 1992, LECT NOTES ARTIF INT, V624, P190, DOI 10.1007/BFb0013061
   PARIGOT M, 1992, LECT NOTES ARTIF INT, V592, P361
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Prawitz Dag, 1965, NATURAL DEDUCTION PR
   Rendel T, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P269, DOI 10.1145/2784731.2784763
   Reynolds John C., 1972, ACM 72, V2, P717, DOI DOI 10.1023/A:1010027404223
   Saurin A, 2005, IEEE S LOG, P356
   Schroeder-Heister P, 2018, STANFORD ENCY PHILOS
   Shivers O, 2004, ACM SIGPLAN NOTICES, V39, P79, DOI 10.1145/1016848.1016864
   Spiwack Arnaud, 2014, THESIS
   Tranchini L, 2012, STUD LOGICA, V100, P631, DOI 10.1007/s11225-012-9417-8
   Wadler P, 2005, LECT NOTES COMPUT SC, V3467, P185
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
   Wadler P, 2003, ACM SIGPLAN NOTICES, V38, P189, DOI 10.1145/944746.944723
   Wadler P, 2014, J FUNCT PROGRAM, V24, P384, DOI 10.1017/S095679681400001X
   Zeilberger N., 2009, The Logical Basis of Evaluation Order and Pattern-Matching
   Zeilberger N, 2008, ANN PURE APPL LOGIC, V153, P66, DOI 10.1016/j.apal.2008.01.001
NR 44
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 106
DI 10.1145/3547637
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000017
OA gold
DA 2024-07-18
ER

PT J
AU Benzaken, V
   Contejean, É
   Hachmaoui, MH
   Keller, C
   Mandel, L
   Shinnar, A
   Siméon, J
AF Benzaken, Veronique
   Contejean, Evelyne
   Hachmaoui, Mohammed Houssem
   Keller, Chantal
   Mandel, Louis
   Shinnar, Avraham
   Simeon, Jerome
TI Translating Canonical SQL to Imperative Code in Coq
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Semantics preserving compiler; Query compiler; SQL; JavaScript; Coq
AB SQL is by far the most widely used and implemented query language. Yet, on some key features, such as correlated queries and NULL value semantics, many implementations diverge or contain bugs. We leverage recent advances in the formalization of SQL and query compilers to develop DBCert, the first mechanically verified compiler from SQL queries written in a canonical form to imperative code. Building DBCert required several new contributions which are described in this paper. First, we specify and mechanize a complete translation from SQL to the Nested Relational Algebra which can be used for query optimization. Second, we define Imp, a small imperative language sufficient to express SQL and which can target several execution languages including JavaScript. Finally, we develop a mechanized translation from the nested relational algebra to Imp, using the nested relational calculus as an intermediate step.
C1 [Benzaken, Veronique; Hachmaoui, Mohammed Houssem; Keller, Chantal] Univ Paris Saclay, LMF, Paris, France.
   [Contejean, Evelyne] Univ Paris Saclay, CNRS, LMF, Paris, France.
   [Mandel, Louis; Shinnar, Avraham] IBM Res, Yorktown Hts, NY USA.
   [Simeon, Jerome] DocuSign Inc, San Francisco, CA USA.
   [Simeon, Jerome] Clause Inc, New York, NY USA.
C3 Universite Paris Saclay; Universite Paris Cite; Universite Paris Cite;
   Universite Paris Saclay; Centre National de la Recherche Scientifique
   (CNRS); International Business Machines (IBM)
RP Benzaken, V (corresponding author), Univ Paris Saclay, LMF, Paris, France.
EM veronique.benzaken@universite-paris-saclay.fr; Evelyne.Contejean@lri.fr;
   mohammed.hachmaoui@lri.fr; Chantal.Keller@lri.fr; lmandel@us.ibm.com;
   shinnar@us.ibm.com; jerome.simeon@docusign.com
OI Shinnar, Avraham/0000-0001-6259-0016; Hachmaoui, Mohammed Houssem
   Eddine/0000-0001-8030-807X; Mandel, Louis/0000-0002-5291-6067; Benzaken,
   Veronique/0000-0002-1227-3327
CR Abiteboul S, 1995, FDN DATABASES
   AlaSQL, 2022, ALASQL JAVASCRIPT SQ
   Auerbach Joshua S., 2017, HANDLING ENV NESTED, P1555, DOI [10.1145/3035918.3035961, DOI 10.1145/3035918.3035961]
   Benzaken V, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P249, DOI 10.1145/3293880.3294107
   Benzaken Veronique, 2022, ABS220308941 CORR, DOI [10.48550/arXiv.2203.08941, DOI 10.48550/ARXIV.2203.08941]
   Benzaken Veronique, 2022, TRANSLATING CANONICA, DOI [10.5281/zenodo.6366579, DOI 10.5281/ZENODO.6366579]
   Biernacki D, 2008, LCTES'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN-SIGBED CONFERENCE ON LANGUAGES, COMPILERS, AND TOOLS FOR EMBEDDED SYSTEMS, P121
   Bodin M, 2014, ACM SIGPLAN NOTICES, V49, P87, DOI 10.1145/2535838.2535876
   Cao B, 2007, ACM T DATABASE SYST, V32, DOI 10.1145/1272743.1272748
   Chu S, 2017, ACM SIGPLAN NOTICES, V52, P510, DOI [10.1145/3062341.3062348, 10.1145/3140587.3062348]
   Claussen J, 2000, IEEE T KNOWL DATA EN, V12, P238, DOI 10.1109/69.842265
   Claussen J, 1997, PROCEEDINGS OF THE TWENTY-THIRD INTERNATIONAL CONFERENCE ON VERY LARGE DATABASES, P286
   Cluet Sophie, 1993, DATABASE PROGRAMMING, P226
   Green Todd J., 2007, PODS, DOI DOI 10.1145/1265530.1265535
   Grover Akshay, 2015, 2015 IEEE INT C BIG, DOI [10.1109/BigData.2015.7364068, DOI 10.1109/BIGDATA.2015.7364068]
   Guagliardo P, 2017, PROC VLDB ENDOW, V11, P27, DOI 10.14778/3151113.3151116
   Hirzel Martin, 2017, Q CERT PLATFORM IMPL, P1703, DOI [10.1145/3035918, DOI 10.1145/3035918]
   Jourdan JH, 2012, LECT NOTES COMPUT SC, V7211, P397, DOI 10.1007/978-3-642-28869-2_20
   Lee Taewhi, 2016, 6 INT C IT CONV SEC, p1s2, DOI [10.1109/ICITCS.2016.7740361, DOI 10.1109/ICITCS.2016.7740361]
   Malecha G, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P237, DOI 10.1145/1706299.1706329
   Moerkotte Guido, 2020, Building Query Compilers
   Salihoglu S., 2017, P 2017 ACM INT C MAN
   Shaikhha A, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1907, DOI 10.1145/2882903.2915244
   Shinnar A., 2015, EUR C OBJ OR PROGR E, P542, DOI DOI 10.4230/LIPICS.ECOOP.2015.542
   SQL.js 2022, SQLITE COMP JAVA
   SQLAlchemy, 2021, SQL ALCH PYTH SQL TO
   TU Jin-De, 2010, COMPUTER SYSTEMS APP, V3, P26
   Ullman J.D., 1982, PRINCIPLES DATABASE
   van den Bussche J, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1297658.1297661
NR 29
TC 0
Z9 0
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 27
DI 10.1145/3527327
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300019
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Gäher, L
   Sammler, M
   Spies, S
   Jung, R
   Dang, HH
   Krebbers, R
   Kang, J
   Dreyer, D
AF Gaeher, Lennard
   Sammler, Michael
   Spies, Simon
   Jung, Ralf
   Dang, Hoang-Hai
   Krebbers, Robbert
   Kang, Jeehoon
   Dreyer, Derek
TI Simuliris: A Separation Logic Framework for Verifying Concurrent Program
   Optimizations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE separation logic; program optimizations; data races; Iris
ID MODEL
AB Today's compilers employ a variety of non-trivial optimizations to achieve good performance. One key trick compilers use to justify transformations of concurrent programs is to assume that the source program has no data races: if it does, they cause the program to have undefined behavior (UB) and give the compiler free rein. However, verifying correctness of optimizations that exploit this assumption is a non-trivial problem. In particular, prior work either has not proven that such optimizations preserve program termination (particularly non-obvious when considering optimizations that move instructions out of loop bodies), or has treated all synchronization operations as external functions (losing the ability to reorder instructions around them).
   In this work we present Simuliris, the first simulation technique to establish termination preservation (under a fair scheduler) for a range of concurrent program transformations that exploit UB in the source language. Simuliris is based on the idea of using ownership to reason modularly about the assumptions the compiler makes about programs with well-defined behavior. This brings the benefits of concurrent separation logics to the space of verifying program transformations: we can combine powerful reasoning techniques such as framing and coinduction to perform thread-local proofs of non-trivial concurrent program optimizations. Simuliris is built on a (non-step-indexed) variant of the Coq-based Iris framework, and is thus not tied to a particular language. In addition to demonstrating the effectiveness of Simuliris on standard compiler optimizations involving data race UB, we also instantiate it with Jung et al.'s Stacked Borrows semantics for Rust and generalize their proofs of interesting type-based aliasing optimizations to account for concurrency.
C1 [Gaeher, Lennard; Sammler, Michael; Spies, Simon; Jung, Ralf; Dang, Hoang-Hai; Dreyer, Derek] MPI SWS, Saarland Informat Campus, Saarland, Germany.
   [Krebbers, Robbert] Radboud Univ Nijmegen, Nijmegen, Netherlands.
   [Kang, Jeehoon] Korea Adv Inst Sci & Technol, Seoul, South Korea.
C3 Radboud University Nijmegen; Korea Advanced Institute of Science &
   Technology (KAIST)
RP Gäher, L (corresponding author), MPI SWS, Saarland Informat Campus, Saarland, Germany.
EM gaeher@mpi-sws.org; msammler@mpi-sws.org; spies@mpi-sws.org;
   jung@mpi-sws.org; haidang@mpi-sws.org; robbert@cs.ru.nl;
   jeehoon.kang@kaist.ac.kr; dreyer@mpi-sws.org
OI Dreyer, Derek/0000-0002-3884-6867; Gaher, Lennard/0000-0003-2917-375X;
   Spies, Simon/0000-0001-5424-9002; Kang, Jeehoon/0000-0002-2115-0871;
   Jung, Ralf/0000-0001-7669-6348; Dang, Hai/0000-0003-1029-1772
FU European Research Council (ERC) under the European Union [683289,
   101003349]; Google PhD Fellowship; Dutch Research Council (NWO)
   [016.Veni.192.259]; International Max Planck Research School on
   Trustworthy Computing (IMPRS-TRUST); Android Security's ASPIRE program;
   European Research Council (ERC) [101003349] Funding Source: European
   Research Council (ERC)
FX We thank Ori Lahav and Viktor Vafeiadis for explanations of data races
   in weak memory models, as well as our shepherd Hongjin Liang and the
   anonymous reviewers for their helpful feedback. This research was
   supported, in part, by European Research Council (ERC) Consolidator
   Grants for the projects lRustBeltz and lPERSISTz, funded under the
   European Union's Horizon 2020 Framework Programme (grant agreements no.
   683289 and 101003349, respectively), by a Google PhD Fellowship for the
   second author, by the Dutch Research Council (NWO), project
   016.Veni.192.259, by the International Max Planck Research School on
   Trustworthy Computing (IMPRS-TRUST), and by generous awards from Android
   Security's ASPIRE program.
CR Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Beringer L, 2014, LECT NOTES COMPUT SC, V8410, P107
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Cuellar Santiago, 2020, THESIS PRINCETON U
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Gaher Lennard, 2022, Simuliris: Technical Documentation and Coq Development, DOI 10.5281/zenodo.5667545
   Gu RH, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Hur CK, 2013, ACM SIGPLAN NOTICES, V48, P193, DOI 10.1145/2480359.2429093
   Hur CK, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P59
   Jiang HR, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P111, DOI 10.1145/3314221.3314595
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371109
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Jung Ralf, 2020, Ph. D. Dissertation
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Kang J, 2015, ACM SIGPLAN NOTICES, V50, P326, DOI [10.1145/2737924.2738005, 10.1145/2813885.2738005]
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krebbers Robbert, 2018, P ACM PROGR LANG, DOI [10.1145/3236772, DOI 10.1145/3236772]
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Lee J, 2017, ACM SIGPLAN NOTICES, V52, P633, DOI [10.1145/3140587.3062343, 10.1145/3062341.3062343]
   Lehmann D., 1981, Automata, Languages and Programming. Eighth Colloquium, P264
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Liang HJ, 2014, IEEE S LOG, DOI 10.1145/2603088.2603123
   Liang HJ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158108
   Liang HJ, 2016, ACM SIGPLAN NOTICES, V51, P385, DOI 10.1145/2914770.2837635
   Morisset R, 2013, ACM SIGPLAN NOTICES, V48, P187, DOI 10.1145/2499370.2491967
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Sevcík J, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P306
   Sevcik Jaroslav., 2009, THESIS U EDINBURGH U
   Spies S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P80, DOI 10.1145/3453483.3454031
   Stewart G, 2015, ACM SIGPLAN NOTICES, V50, P275, DOI [10.1145/2676726.2676985, 10.1145/2775051.2676985]
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Tassarotti J, 2017, LECT NOTES COMPUT SC, V10201, P909, DOI 10.1007/978-3-662-54434-1_34
   Vafeiadis V, 2015, ACM SIGPLAN NOTICES, V50, P209, DOI [10.1145/2676726.2676995, 10.1145/2775051.2676995]
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Yang H, 2007, THEOR COMPUT SCI, V375, P308, DOI 10.1016/j.tcs.2006.12.036
NR 45
TC 12
Z9 12
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 28
DI 10.1145/3498689
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900029
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Jang, J
   Gélineau, S
   Monnier, S
   Pientka, B
AF Jang, Junyoung
   Gelineau, Samuel
   Monnier, Stefan
   Pientka, Brigitte
TI Moebius: Metaprogramming using Contextual Types The Stage Where System F
   Can Pattern Match on Itself
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Metaprogramming; Type Systems; Contextual Types; Polymorphism
ID METAML
AB We describe the foundation of the metaprogramming language, Moebius, which supports the generation of polymorphic code and, more importantly, the analysis of polymorphic code via pattern matching.
   Moebius has two main ingredients: 1) we exploit contextual modal types to describe open code together with the context in which it is meaningful. In Moebius, open code can depend on type and term variables (level 0) whose values are supplied at a later stage, as well as code variables (level 1) that stand for code templates supplied at a later stage. This leads to a multi-level modal lambda-calculus that supports System-F style polymorphism and forms the basis for polymorphic code generation. 2) we extend the multi-level modal lambda-calculus to support pattern matching on code. As pattern matching on polymorphic code may refine polymorphic type variables, we extend our type-theoretic foundation to generate and track typing constraints that arise. We also give an operational semantics and prove type preservation.
   Our multi-level modal foundation for Moebius provides the appropriate abstractions for both generating and pattern matching on open code without committing to a concrete representation of variable binding and contexts. Hence, our work is a step towards building a general type-theoretic foundation for multi-staged metaprogramming that, on the one hand, enforces strong type guarantees and, on the other hand, makes it easy to generate and manipulate code. This will allow us to exploit the full potential of metaprogramming without sacrificing the reliability of and trust in the code we are producing and running.
C1 [Jang, Junyoung; Pientka, Brigitte] McGill Univ, Sch Comp Sci, Montreal, PQ, Canada.
   [Gelineau, Samuel] SimSpace, Montreal, PQ, Canada.
   [Monnier, Stefan] Univ Montreal, Comp Sci, Montreal, PQ, Canada.
C3 McGill University; Universite de Montreal
RP Jang, J (corresponding author), McGill Univ, Sch Comp Sci, Montreal, PQ, Canada.
EM junyoung.jang@mail.mcgill.ca; monnier@iro.umontreal.ca;
   bpientka@cs.mcgill.ca
OI Jang, Junyoung/0000-0001-6338-2155; Pientka,
   Brigitte/0000-0002-2549-4276; Gelineau, Samuel/0000-0001-6070-485X
FU Natural Sciences and Engineering Research Council of Canada [206263];
   Fonds de recherche du Quebec -Nature et Technologies [304215]
FX This work was funded by the Natural Sciences and Engineering Research
   Council of Canada (grant number 206263), Fonds de recherche du Quebec
   -Nature et Technologies (grant number 253521), and a graduate fellowship
   from Fonds de recherche du Quebec -Nature et Technologies (grant number
   304215) awarded to the first author.
CR Anand A, 2018, LECT NOTES COMPUT SC, V10895, P20, DOI 10.1007/978-3-319-94821-8_2
   Benton N, 2012, J AUTOM REASONING, V49, P141, DOI 10.1007/s10817-011-9219-0
   Boespflug M, 2011, ELECTRON PROC THEOR, P29, DOI 10.4204/EPTCS.71.3
   Brown Matt, 2016, 43 ACM SIGPLAN SIGAC, p5s17, DOI [10.1145/2837614.2837623, DOI 10.1145/2837614.2837623]
   Chen CY, 2005, J FUNCT PROGRAM, V15, P797, DOI 10.1017/S0956796805005617
   Chen CY, 2003, ACM SIGPLAN NOTICES, V38, P275, DOI 10.1145/944746.944730
   Davies R, 1996, IEEE S LOG, P184, DOI 10.1109/LICS.1996.561317
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   Gratzer D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341711
   Jang Junyoung, 2021, ARXIV211108099CSPL
   Kawata A, 2019, LECT NOTES COMPUT SC, V11893, P53, DOI 10.1007/978-3-030-34175-6_4
   Kim LS, 2006, ACM SIGPLAN NOTICES, V41, P257, DOI 10.1145/1111320.1111060
   Kiselyov O, 2016, LECT NOTES COMPUT SC, V10017, P271, DOI 10.1007/978-3-319-47958-3_15
   Miller D., 1991, Logic Programming. Proceedings of the Eighth International Conference, P255
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Parreaux L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158101
   Pientka B., 2003, THESIS CARNEGIE MELL
   Pientka B, 2008, ACM SIGPLAN NOTICES, V43, P371, DOI 10.1145/1328897.1328483
   Pientka B, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785683
   Pientka B, 2015, LECT NOTES ARTIF INT, V9195, P272, DOI 10.1007/978-3-319-21401-6_18
   Pientka B, 2010, LECT NOTES ARTIF INT, V6173, P15
   Pientka Brigitte, 2008, P ACM SIGPLAN S PRIN, P163, DOI [10.1145/1389449.1389469, DOI 10.1145/1389449.1389469]
   Rhiger M, 2012, LECT NOTES COMPUT SC, V7211, P559, DOI 10.1007/978-3-642-28869-2_28
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Taha W, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640128.604134
   Taha W, 1999, ACM SIGPLAN NOTICES, V34, P34, DOI 10.1145/328691.328697
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   van der Walt Paul, 2013, Implementation and Application of Functional Languages. 24th International Symposium, IFL 2012. Revised Selected Papers: LNCS 8241, P157, DOI 10.1007/978-3-642-41582-1_10
   Viera Marcos, 2006, 5 INT C GEN PROGR CO, p11s20, DOI [10.1145/1173706.1173709, DOI 10.1145/1173706.1173709]
NR 29
TC 5
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 39
DI 10.1145/3498700
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900040
OA gold
DA 2024-07-18
ER

PT J
AU Krogmeier, P
   Madhusudan, P
AF Krogmeier, Paul
   Madhusudan, P.
TI Learning Formulas in Finite Variable Logics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE exact learning; learning formulas; tree automata; version space algebra;
   program synthesis; interpretable learning
AB We consider grammar-restricted exact learning of formulas and terms in finite variable logics. We propose a novel and versatile automata-theoretic technique for solving such problems. We first show results for learning formulas that classify a set of positively- and negatively-labeled structures. We give algorithms for realizability and synthesis of such formulas along with upper and lower bounds. We also establish positive results using our technique for other logics and variants of the learning problem, including first-order logic with least fixed point definitions, higher-order logics, and synthesis of queries and terms with recursively-defined functions.
C1 [Krogmeier, Paul; Madhusudan, P.] Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign
RP Krogmeier, P (corresponding author), Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA.
EM paulmk2@illinois.edu; madhu@illinois.edu
OI Parthasarathy, Madhusudan/0000-0002-9782-721X
FU Discovery Partner's Institute (DPI) science team seed grant; Amazon
FX We thank Victor Vianu for discussions and for suggesting the connection
   to logical types. This work was supported in part by a Discovery
   Partner's Institute (DPI) science team seed grant and a research grant
   from Amazon.
CR Albarghouthi A, 2017, LECT NOTES COMPUT SC, V10416, P689, DOI 10.1007/978-3-319-66158-2_44
   Alonzo Church, 1960, J SYMBOLIC LOGIC, V28, P30
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 2011, LEIBNIZ INT P INFORM, DOI DOI 10.4230/LIPICS.CSL.2011.428
   Bloem R, 2012, J COMPUT SYST SCI, V78, P911, DOI 10.1016/j.jcss.2011.08.007
   BUCHI JR, 1969, T AM MATH SOC, V138, P295, DOI 10.2307/1994916
   Caulfield Benjamin, 2015, ABS151008393 CORR
   Cheung A, 2013, ACM SIGPLAN NOTICES, V48, P3, DOI 10.1145/2499370.2462180
   Church A., 1960, J SYMBOLIC LOGIC, V28, p3A
   Comon H., 2007, TREE AUTOMATA TECHNI
   Cropper A, 2020, PROCEEDINGS OF THE TWENTY-NINTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P4833
   Dal Lago Ugo, 2012, SHORT INTRO IMPLICIT, P89, DOI [DOI 10.1007/978-3-642-31485-8_3, 10.1007/978-3-642- 31485-8_3]
   Ehrenfeucht A., 1960, FUND MATH, V49, P129, DOI 10.4064/fm-49-2-129-141
   Evans R, 2018, J ARTIF INTELL RES, V61, P1
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Flum J., 2006, TEXT THEORET COMP S
   Fraisse R., 1954, PUBL SCI U ALGER SER, V1
   Fritz Carsten, 2002, SOME FIXED POINT BAS, P359, DOI [10. 1007/3- 540-36387- 4_20, DOI 10.1007/3-540-36387-4_20, 10.1007/3-540-36387-4_20]
   Funk M, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P1682
   Garg P, 2015, FORM METHOD SYST DES, V47, P120, DOI 10.1007/s10703-015-0231-6
   Gradel E, 2002, AUTOMATA LOGICS INFI, V2500, DOI DOI 10.1007/3-540-36387-4
   Grohe M, 2004, THEOR COMPUT SYST, V37, P193, DOI [10.1007/s0224-003-1112-8, 10.1007/s00224-003-1112-8]
   Grohe Martin, 2017, P 28 INT C ALGORITHM, P434
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Herbert B. Enderton, 2001, A Mathematical Introduction to Logic, P67, DOI DOI 10.1016/B978-0-08-049646-7.50008-4
   Hu QHP, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1128, DOI 10.1145/3385412.3385979
   Hu QP, 2019, LECT NOTES COMPUT SC, V11561, P335, DOI 10.1007/978-3-030-25540-4_18
   Immerman Neil., 1982, P 14 ANN ACM S THEOR, P147
   Jung Jean Christoph, 2020, ABS200701610 CORR
   Khalimov A, 2018, LECT NOTES COMPUT SC, V11138, P494, DOI 10.1007/978-3-030-01090-4_29
   Koenig JR, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P703, DOI 10.1145/3385412.3386018
   Krogmeier P, 2020, LECT NOTES COMPUT SC, V12225, P634, DOI 10.1007/978-3-030-53291-8_32
   Krogmeier Paul, 2021, ARXIV211103534CSLO
   Kupferman O., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P92
   Kupferman O, 2010, LECT NOTES COMPUT SC, V6200, P202, DOI 10.1007/978-3-642-13754-9_11
   Law M, 2014, LECT NOTES ARTIF INT, V8761, P311, DOI 10.1007/978-3-319-11558-0_22
   Libkin Leonid, 2004, TEXT THEORET COMP S, DOI 10.1007/978-3-662-07003-1
   Madhusudan P, 2001, LECT NOTES COMPUT SC, V2076, P396
   Manna Z., 1980, ACM Transactions on Programming Languages and Systems, V2, P90, DOI 10.1145/357084.357090
   Mathur U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290359
   Mitchell T. M., 1997, MACHINE LEARNING
   MITCHELL TM, 1982, ARTIF INTELL, V18, P203, DOI 10.1016/0004-3702(82)90040-6
   MUGGLETON S, 1994, J LOGIC PROGRAM, V20, P629, DOI 10.1016/0743-1066(94)90035-3
   Muggleton SH, 2014, MACH LEARN, V94, P25, DOI 10.1007/s10994-013-5358-3
   Neider D, 2018, PROCEEDINGS OF THE 2018 18TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD), P148
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Pneuli A., 1990, Proceedings. 31st Annual Symposium on Foundations of Computer Science (Cat. No.90CH2925-6), P746, DOI 10.1109/FSCS.1990.89597
   PNUELI A, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P179, DOI 10.1145/75277.75293
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Rabin Michael Oser, 1972, AUTOMATA INFINITE OB, DOI DOI 10.5555/540412
   Shen YY, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P493, DOI 10.1145/2588555.2593664
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Thakkar A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1110, DOI 10.1145/3453483.3454098
   van Bergerem Steffen, 2021, ABS210212201 CORR
   van Berkel SL, 2019, INT CONF INFRA MILLI, DOI 10.1109/irmmw-thz.2019.8874183
   Vardi M.Y., 1982, P 14 ANN ACM S THEOR, P137, DOI DOI 10.1145/800070.802186
   Vardi MY, 1998, LECT NOTES COMPUT SC, V1443, P628, DOI 10.1007/BFb0055090
   Vianu Victor, 2020, COMMUNICATION
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
   Wang XY, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133886
   Wang YP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276525
NR 63
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 10
DI 10.1145/3498671
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900011
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Le, XB
   Lin, SW
   Sun, J
   Sanan, D
AF Le, Xuan-Bach
   Lin, Shang-Wei
   Sun, Jun
   Sanan, David
TI A Quantum Interpretation of Separating Conjunction for Local Reasoning
   of Quantum Programs Based on Separation Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Quantum Computing; Verification; Formal Semantics
AB It is well-known that quantum programs are not only complicated to design but also challenging to verify because the quantum states can have exponential size and require sophisticated mathematics to encode and manipulate. To tackle the state-space explosion problem for quantum reasoning, we propose a Hoare-style inference framework that supports local reasoning for quantum programs. By providing a quantum interpretation of the separating conjunction, we are able to infuse separation logic into our framework and apply local reasoning using a quantum frame rule that is similar to the classical frame rule. For evaluation, we apply our framework to verify various quantum programs including DeutschsJozsa's algorithm and Grover's algorithm.
C1 [Le, Xuan-Bach; Lin, Shang-Wei; Sanan, David] Nanyang Technol Univ, Singapore, Singapore.
   [Sun, Jun] Singapore Management Univ, Singapore, Singapore.
C3 Nanyang Technological University; Singapore Management University
RP Le, XB (corresponding author), Nanyang Technol Univ, Singapore, Singapore.
EM bach.le@ntu.edu.sg; shang-wei.lin@ntu.edu.sg; junsun@smu.edu.sg;
   sanan@ntu.edu.sg
RI Sanan, David/AAA-8320-2020
OI Sanan, David/0000-0003-2755-3089; Sun, Jun/0000-0002-3545-1392
FU Singapore Ministry of Education [MOE2018-T2-1-068, MOET32020-0004]
FX We would like to thank the anonymous reviewers and shepherds for their
   constructive comments, especially for the discussion on the probability
   reasoning and the construct of the Psrule for entailment. This work is
   supported by project MOE2018-T2-1-068 and project MOET32020-0004, both
   are funded by the Singapore Ministry of Education.
CR [Anonymous], 2014, Liqui: A software design architecture and domain-specific language for quantum computing
   Baez J, 2011, LECT NOTES PHYS, V813, P95, DOI 10.1007/978-3-642-12821-9_2
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371089
   Bennett CH, 1997, SIAM J COMPUT, V26, P1510, DOI 10.1137/S0097539796300933
   Bertot Y., 2004, TEXT THEORET COMP S
   Bichsel B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P286, DOI 10.1145/3385412.3386007
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Chadha R, 2006, ELECTRON NOTES THEOR, V158, P19, DOI 10.1016/j.entcs.2006.04.003
   Cross Andrew W, 2017, Open quantum assembly language
   D'Hondt E, 2006, MATH STRUCT COMP SCI, V16, P429, DOI 10.1017/S0960129506005251
   den Hartog J. I, 1999, P 5 AS COMP SCI C AD, DOI [10.1007/3-540- 46674-6_11, DOI 10.1007/3-540-46674-6_11]
   DEUTSCH D, 1992, P ROY SOC LOND A MAT, V439, P553, DOI 10.1098/rspa.1992.0167
   Feng Y, 2007, THEOR COMPUT SCI, V386, P151, DOI 10.1016/j.tcs.2007.06.011
   Feng Yuan, 2021, ARXIV200806812CSLO
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Huang YP, 2019, PROCEEDINGS OF THE 2019 46TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA '19), P541, DOI 10.1145/3307650.3322213
   JavadiAbhari A, 2015, PARALLEL COMPUT, V45, P2, DOI 10.1016/j.parco.2014.12.001
   Kakutani Y, 2009, LECT NOTES COMPUT SC, V5913, P79, DOI 10.1007/978-3-642-10622-4_7
   Li GS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428218
   Li YJ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158123
   Li Yangjia, ICALP LIPICS, V198, DOI [10.4230/LIPIcs.ICALP.2021.136, DOI 10.4230/LIPICS.ICALP.2021.136]
   Liu JY, 2019, LECT NOTES COMPUT SC, V11562, P187, DOI 10.1007/978-3-030-25543-5_12
   [刘树森 Liu Shusen], 2017, [中国科学. 信息科学, Scientia Sinica Informationis], V47, P1300
   Liu X, 2013, 2013 IEEE 31ST INTERNATIONAL CONFERENCE ON COMPUTER DESIGN (ICCD), P427, DOI 10.1109/ICCD.2013.6657075
   Naraschewski Wolfgang, 2020, IS HOL
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 1999, B SYMB LOG, V5, P215, DOI 10.2307/421090
   Paykin J, 2017, ACM SIGPLAN NOTICES, V52, P846, DOI 10.1145/3093333.3009894
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Selinger P, 2005, LECT NOTES COMPUT SC, V3461, P354
   Selinger P, 2008, ELECTRON NOTES THEOR, V210, P123, DOI 10.1016/j.entcs.2008.04.022
   Shi Wenjun, 2021, ARXIV200511023CSPL
   SHOR PW, 1994, AN S FDN CO, P124
   Steiger DS, 2018, QUANTUM-AUSTRIA, V2, DOI 10.22331/q-2018-01-31-49
   Svore K, 2018, RWDSL2018: PROCEEDINGS OF THE REAL WORLD DOMAIN SPECIFIC LANGUAGES WORKSHOP 2018, DOI 10.1145/3183895.3183901
   WOOTTERS WK, 1982, NATURE, V299, P802, DOI 10.1038/299802a0
   Xuan-Bach Le, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P385, DOI 10.1007/978-3-319-89884-1_14
   Yang Hongseok, 2002, FOSSAC, DOI [10.1007/3- 540-45931- 6_28, DOI 10.1007/3-540-45931-6_28]
   Ying MS, 2019, FORM ASP COMPUT, V31, P3, DOI 10.1007/s00165-018-0465-3
   Ying MS, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2049706.2049708
   Zhou L, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470673
   Zhou L, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1149, DOI 10.1145/3314221.3314584
NR 44
TC 5
Z9 6
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 36
DI 10.1145/3498697
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900037
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Lim, JP
   Nagarakatte, S
AF Lim, Jay P.
   Nagarakatte, Santosh
TI One Polynomial Approximation to Produce Correctly Rounded Results of an
   Elementary Function for Multiple Representations and Rounding Modes
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE floating point; round-to-odd; correctly rounded math libraries
ID TABLE-DRIVEN IMPLEMENTATION; ALGORITHMS
AB Mainstream math libraries for floating point (FP) do not produce correctly rounded results for all inputs. In contrast, CR-LIBM and RLibm provide correctly rounded implementations for a specific FP representation with one rounding mode. Using such libraries for a representation with a new rounding mode or with different precision will result in wrong results due to double rounding. This paper proposes a novel method to generate a single polynomial approximation that produces correctly rounded results for all inputs for multiple rounding modes and multiple precision configurations. To generate a correctly rounded library for..-bits, our key idea is to generate a polynomial approximation for a representation with n + 2-bits using the round-to-odd mode. We prove that the resulting polynomial approximation will produce correctly rounded results for all five rounding modes in the standard and for multiple representations with.. -bits such that vertical bar E vertical bar + 1 < k <= n, where vertical bar E vertical bar is the number of exponent bits in the representation. Similar to our prior work in the RLibm project, we approximate the correctly rounded result when we generate the library with n + 2-bits using the round-to-odd mode. We also generate polynomial approximations by structuring it as a linear programming problem but propose enhancements to polynomial generation to handle the round-to-odd mode. Our prototype is the first 32-bit float library that produces correctly rounded results with all rounding modes in the IEEE standard for all inputs with a single polynomial approximation. It also produces correctly rounded results for any FP configuration ranging from 10-bits to 32-bits while also being faster than mainstream libraries.
C1 [Lim, Jay P.; Nagarakatte, Santosh] Rutgers State Univ, Dept Comp Sci, New Brunswick, NJ 08901 USA.
C3 Rutgers University System; Rutgers University New Brunswick
RP Lim, JP (corresponding author), Rutgers State Univ, Dept Comp Sci, New Brunswick, NJ 08901 USA.
EM jpl169@cs.rutgers.edu; santosh.nagarakatte@cs.rutgers.edu
OI Lim, Jay/0000-0002-7572-4017; Nagarakatte, Santosh/0000-0002-5048-8548
FU National Science Foundation [1908798, 2110861, 1917897]; Direct For
   Computer & Info Scie & Enginr; Division of Computing and Communication
   Foundations [2110861] Funding Source: National Science Foundation;
   Direct For Computer & Info Scie & Enginr; Division of Computing and
   Communication Foundations [1917897, 1908798] Funding Source: National
   Science Foundation
FX We thank John Gustafson for his suggestion that we explore a generic
   math library for posits and his inputs on the Minefield method and the
   posit representation. We thank our shepherd James Wilcox, Mridul
   Aanjaneya, and the POPL reviewers for their feedback on the paper. This
   material is based upon work supported in part by the National Science
   Foundation under Grant No. 1908798, Grant No. 2110861, and Grant No.
   1917897. Any opinions, findings, and conclusions or recommendations
   expressed in this material are those of the authors and do not
   necessarily reflect the views of the National Science Foundation.
CR [Anonymous], 2009, PROOFS BOOK
   [Anonymous], 1975, Transcendental Number Theory
   [Anonymous], 2020, TensorFloat-32 in the A100 GPU Accelerates AI Training, HPC up to 20x
   Arzelier D, 2019, P S COMP ARITHM, P30, DOI 10.1109/ARITH.2019.00014
   Boldo S, 2008, IEEE T COMPUT, V57, P462, DOI 10.1109/TC.2007.70819
   Boldo S, 2009, IEEE T COMPUT, V58, P1139, DOI 10.1109/TC.2008.216
   Boldo Sylvie, 2005, 17 IMACS WORLD C PAR
   Borwein P, 1995, Graduate Texts in Mathematics, V161, DOI 10.1007/978-1-4612-0793-1
   Brisebarre N, 2007, P S COMP ARITHM, P169, DOI 10.1109/ARITH.2007.17
   Brunie N, 2015, P S COMP ARITHM, P66, DOI 10.1109/ARITH.2015.22
   Bui H., 1999, Engineering Solutions for the Next Millennium. 1999 IEEE Canadian Conference on Electrical and Computer Engineering (Cat. No.99TH8411), P450, DOI 10.1109/CCECE.1999.807240
   Chevillard S, 2011, THEOR COMPUT SCI, V412, P1523, DOI 10.1016/j.tcs.2010.11.052
   Chevillard S, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P153, DOI 10.1109/QSIC.2007.4385491
   Chevillard S, 2010, LECT NOTES COMPUT SC, V6327, P28, DOI 10.1007/978-3-642-15582-6_5
   Cody William J, 1980, Software manual for the elementary functions, DOI [10.1137/1024023, DOI 10.1137/1024023]
   Daramy C, 2003, P SOC PHOTO-OPT INS, V5205, P458, DOI 10.1117/12.505591
   Daramy-Loirat C., 2006, Research report.
   Fousse L, 2007, ACM T MATH SOFTWARE, V33, DOI 10.1145/1236463.1236468
   Gleixner AM, 2012, P 37 INT S SYMB ALG, P187, DOI DOI 10.1145/2442829.2442858
   GOLDBERG D, 1991, COMPUT SURV, V23, P5, DOI 10.1145/103162.103163
   Gustafson John L., 2017, [Supercomputing Frontiers and Innovations, Supercomputing Frontiers and Innovations], V4, P71
   Harrison J., 1997, Algebraic Methodology and Software Technology. 6th International Conference, AMAST '97. Proceedings, P246, DOI 10.1007/BFb0000475
   Harrison J., 1997, Theorem Proving in Higher Order Logics. 10th International Conference, TPHOLs'97 Proceedings, P137, DOI 10.1007/BFb0028391
   Harrison J, 2009, LECT NOTES COMPUT SC, V5674, P60, DOI 10.1007/978-3-642-03359-9_4
   Jeannerod CP, 2011, IEEE T COMPUT, V60, P214, DOI 10.1109/TC.2010.152
   Johnson J., 2018, arXiv
   Kalamkar Dhiraj., 2019, A study of bfloat16 for deep learning training
   Koster Urs, 2017, ADV NEURAL INFORM PR
   Kupriianova O., 2014, MATH SOFTWARE ICMS 2, V4, P713, DOI [10.1007/978-3-662-44199-2_106, DOI 10.1007/978-3-662-44199-2_106]
   Lee W, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158135
   Lefevre V, 1998, IEEE T COMPUT, V47, P1235, DOI 10.1109/12.736435
   Lim Jay, 2021, Ph. D. Dissertation.
   Lim JP, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P359, DOI 10.1145/3453483.3454049
   Lim JP, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434310
   Lim Jay P., 2020, ARXIV200705344
   Lim Jay P., ARXIV210806756ABS
   Lim Jay P, ARXIV210404043
   Lim Jay P., 2021, RLIBM ALL
   Muller Jean-Michel, 2016, Elementary Functions: Algorithms and Implementation, V3, DOI DOI 10.1007/978-1-4899-7983-4
   Niven I., 1956, IRRATIONAL NUMBERS
   P. M. (Paul Moritz) Cohn, 1974, ALGEBRA
   Remes Eugene, 1934, COMPTES RENDUS ACAD, V198
   Rouhani Bita, 2020, ADV NEURAL INFORM PR
   Sawada Jun., 2002, 3 INT WORKSHOP ACL2
   Story S, 1999, P S COMP ARITHM, P4, DOI 10.1109/ARITH.1999.762822
   Tagliavini G, 2018, DES AUT TEST EUROPE, P1051, DOI 10.23919/DATE.2018.8342167
   Tang P. T. P., 1991, Proceedings. 10th IEEE Symposium on Computer Arithmetic (Cat. No.91CH3015-5), P232, DOI 10.1109/ARITH.1991.145565
   TANG PTP, 1990, ACM T MATH SOFTWARE, V16, P378, DOI 10.1145/98267.98294
   TANG PTP, 1989, ACM T MATH SOFTWARE, V15, P144, DOI 10.1145/63522.214389
   Yi X, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290369
   ZIV A, 1991, ACM T MATH SOFTWARE, V17, P410, DOI 10.1145/114697.116813
   Zou DM, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371128
NR 52
TC 4
Z9 5
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 3
DI 10.1145/3498664
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900004
OA gold
DA 2024-07-18
ER

PT J
AU Muller, SK
AF Muller, Stefan K.
TI Static Prediction of Parallel Computation Graphs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE parallel programs; graph types; cost graphs; computation graphs; type
   systems; type inference
AB Many algorithms for analyzing parallel programs, for example to detect deadlocks or data races or to calculate the execution cost, are based on a model variously known as a cost graph, computation graph or dependency graph, which captures the parallel structure of threads in a program. In modern parallel programs, computation graphs are highly dynamic and depend greatly on the program inputs and execution details. As such, most analyses that use these graphs are either dynamic analyses or are specialized static analyses that gather a subset of dependency information for a specific purpose.
   This paper introduces graph types, which compactly represent all of the graphs that could arise from program execution. Graph types are inferred from a parallel program using a graph type system and inference algorithm, which we present drawing on ideas from Hindley-Milner type inference, affine logic and region type systems. We have implemented the inference algorithm over a subset of OCaml, extended with parallelism primitives, and we demonstrate how graph types can be used to accelerate the development of new graph-based static analyses by presenting proof-of-concept analyses for deadlock detection and cost analysis.
C1 [Muller, Stefan K.] IIT, Chicago, IL 60616 USA.
C3 Illinois Institute of Technology
RP Muller, SK (corresponding author), IIT, Chicago, IL 60616 USA.
EM smuller2@iit.edu
OI Muller, Stefan K/0000-0002-3210-9727
FU National Science Foundation [CCF-2107289]
FX The author would like to thank the anonymous reviewers, as well as Umut
   Acar, Jatin Arora, Guy Blelloch, and Sam Westrick for helpful
   discussions at various points in this work. This work was partially
   supported by the National Science Foundation under grant CCF-2107289.
CR [Anonymous], 1987, THESIS MASSACHUSETS
   Arvind, 1978, TR114 U CAL DEP INF
   BABAOGLU O, 1993, REAL-TIME SYST, V5, P285, DOI 10.1007/BF01088832
   Banerjee U., 2006, PADTAD 06, P69, DOI [10.1145/1147403.1147416, DOI 10.1145/1147403.1147416]
   Belloch G., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P226, DOI 10.1145/224164.224210
   Blazy S., 2013, Verified software: Theories, tools, experiments, P281, DOI DOI 10.1007/978-3-642-54108-7_15
   Blelloch GE, 1996, ACM SIGPLAN NOTICES, V31, P213, DOI 10.1145/232629.232650
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Chen ZQ, 2002, LECT NOTES COMPUT SC, V2361, P219
   CHENG JD, 1993, P INT COMP SOFTW APP, P231, DOI 10.1109/CMPSAC.1993.404187
   Cogumbreiro T, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3143359
   Cogumbreiro T, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3229060
   Engler D., 2003, Operating Systems Review, V37, P237, DOI 10.1145/1165389.945468
   Ermedahl Andreas, 2007, OpenAccess Series in Informatics (OASIcs), V6, DOI [10.4230/OASIcs.WCET.2007.1194, DOI 10.4230/OASICS.WCET.2007.1194]
   Flanagan C, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P121, DOI 10.1145/1542476.1542490
   Gansner ER, 2000, SOFTWARE PRACT EXPER, V30, P1203, DOI 10.1002/1097-024X(200009)30:11<1203::AID-SPE338>3.0.CO;2-N
   Gifford DK, 1986, P 1986 ACM C LISP FU, P28, DOI DOI 10.1145/319838.319848
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Henglein F., 2005, ADV TOPICS TYPES PRO, P87
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Hoffmann J, 2015, LECT NOTES COMPUT SC, V9032, P132, DOI 10.1007/978-3-662-46669-8_6
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   HUDAK P, 1987, LECT NOTES COMPUT SC, V274, P234
   JOUVELOT P, 1988, PROGRAMMING LANGUAGE, P218
   KARP RM, 1966, SIAM J APPL MATH, V14, P1390, DOI 10.1137/0114108
   Kasahara Y., 1995, Proceedings 1995 Asia Pacific Software Engineering Conference, P254, DOI 10.1109/APSEC.1995.496974
   KOREL B, 1987, INFORM PROCESS LETT, V24, P103, DOI 10.1016/0020-0190(87)90102-5
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Li YTS, 1997, IEEE T COMPUT AID D, V16, P1477, DOI 10.1109/43.664229
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Muller SK, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236790
   Muller SK, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P577, DOI 10.1145/3385412.3386013
   MYCROFT A, 1984, LECT NOTES COMPUT SC, V167, P217
   Nandivada VK, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2450136.2450138
   Navabi A, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P23, DOI 10.1145/1345206.1345212
   Rodriguez Bezos Jorge E, 1969, THESIS MIT CAMBRIDGE
   Rosendahl M., 1989, FPCA 89, P144, DOI DOI 10.1145/99370.99381
   SANDS D, 1990, LECT NOTES COMPUT SC, V432, P361
   Spoonhower Daniel, 2009, Ph. D. Dissertation
   Tofte M, 1998, ACM T PROGR LANG SYS, V20, P724, DOI 10.1145/291891.291894
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Utterback R., 2016, P 28 ACM S PARALLELI, P83
   Utterback R, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P340, DOI 10.1145/3293883.3295732
   Voss C, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P378, DOI 10.1145/3293883.3295724
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Xu YF, 2020, PROCEEDINGS OF THE 25TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '20), P217, DOI 10.1145/3332466.3374536
NR 46
TC 1
Z9 1
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 46
DI 10.1145/3498708
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900047
OA gold
DA 2024-07-18
ER

PT J
AU Sorensen, T
   Salvador, LF
   Raval, H
   Evrard, H
   Wickerson, J
   Martonosi, M
   Donaldson, AF
AF Sorensen, Tyler
   Salvador, Lucas F.
   Raval, Harmit
   Evrard, Hugues
   Wickerson, John
   Martonosi, Margaret
   Donaldson, Alastair F.
TI Specifying and Testing GPU Workgroup Progress Models
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE liveness; semantics; GPU; model checking; test case synthesis
ID WEAK MEMORY
AB As GPU availability has increased and programming support has matured, a wider variety of applications are being ported to these platforms. Many parallel applications contain fine-grained synchronization idioms; as such, their correct execution depends on a degree of relative forward progress between threads (or thread groups). Unfortunately, many GPU programming specifications (e.g. Vulkan and Metal) say almost nothing about relative forward progress guarantees between workgroups. Although prior work has proposed a spectrum of plausible progress models for GPUs, cross-vendor specifications have yet to commit to any model.
   This work is a collection of tools and experimental data to aid specification designers when considering forward progress guarantees in programming frameworks. As a foundation, we formalize a small parallel programming language that captures the essence of fine-grained synchronization. We then provide a means of formally specifying a progress model, and develop a termination oracle that decides whether a given program is guaranteed to eventually terminate with respect to a given progress model. Next, we formalize a set of constraints that describe concurrent programs that require forward progress to terminate. This allows us to synthesize a large set of 483 progress litmus tests. Combined with the termination oracle, we can determine the expected status of each litmus test s i.e. whether it is guaranteed to eventually terminate s under various progress models. We present a large experimental campaign running the litmus tests across 8 GPUs from 5 different vendors. Our results highlight that GPUs have significantly different termination behaviors under our test suite. Most notably, we find that Apple and ARM GPUs do not support the linear occupancy-bound model, as was hypothesized by prior work.
C1 [Sorensen, Tyler] UC Santa Cruz, Santa Cruz, CA 95064 USA.
   [Salvador, Lucas F.; Raval, Harmit; Martonosi, Margaret] Princeton Univ, Princeton, NJ 08544 USA.
   [Evrard, Hugues] Google, London, England.
   [Wickerson, John; Donaldson, Alastair F.] Imperial Coll London, London, England.
C3 University of California System; University of California Santa Cruz;
   Princeton University; Google Incorporated; Imperial College London
RP Sorensen, T (corresponding author), UC Santa Cruz, Santa Cruz, CA 95064 USA.
EM tyler.sorensen@ucsc.edu; ls24@alumni.princeton.edu;
   hraval@alumni.princeton.edu; hevrard@google.com;
   j.wickerson@imperial.ac.uk; mrm@princeton.edu; donaldson@imperial.ac.uk
OI Martonosi, Margaret/0000-0001-9683-8032; Sorensen,
   Tyler/0000-0003-1646-7935; Wickerson, John/0000-0001-6735-5533
FU EPSRC via the IRIS Programme Grant [EP/R006865/1]; HiPEDS Doctoral
   Training Centre [EP/L016796/1]
FX We thank the anonymous reviewers for their feedback, which greatly
   improved the clarity of the paper. We give special thanks to Alan Baker
   (Google) who provided detailed support for the Amber framework and gave
   many valuable comments on a draft of the paper. We thank the Khronos
   SPIR Memory Model TSG, especially Rob Simpson (Qualcomm), David Neto
   (Google), Jeff Bolz (Nvidia), Nicolai Hahnle (AMD), Graeme Leese
   (Broadcom), Brian Sumner (AMD), Tobias Hector (AMD), and Mariusz Merecki
   (Intel) for their support and feedback on this work over several years.
   We also thank the Inria Convecs team that maintains CADP for their
   support, especially Radu Mateescu for his feedback on our MCL formulas.
   This work was partially supported by the EPSRC via the IRIS Programme
   Grant (EP/R006865/1) and the HiPEDS Doctoral Training Centre
   (EP/L016796/1).
CR Alglave J, 2015, ACM SIGPLAN NOTICES, V50, P577, DOI [10.1145/2775054.2694391, 10.1145/2694344.2694391]
   AMD, 2019, RDNA ARCH
   [Anonymous], 1980, C REC 7 ANN ACM S PR
   [Anonymous], 2015, HETEROGENEOUS SYSTEM
   Apple, 2020, MET SHAD LANG SPEC V
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Beamer S., 2015, CoRR
   Betts A, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2743017
   Betts Adam, 2012, ACM SIGPLAN NOTICES, DOI DOI 10.1145/2398857.2384625
   BLELLOCH GE, 1989, IEEE T COMPUT, V38, P1526, DOI 10.1109/12.42122
   Cederman Daniel., 2008, GH 08 P 23 ACM SIGGR, P57
   Champelovier D, 2021, REFERENCE MANUAL LNT
   Chong N, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P211, DOI [10.1145/3192366.3192373, 10.1145/3296979.3192373]
   Collingbourne P, 2013, LECT NOTES COMPUT SC, V7792, P270, DOI 10.1007/978-3-642-37036-6_16
   Donaldson AF, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133917
   Donaldson Alastair F., 2020, 34 EUROPEAN C OBJECT, V166, DOI 10.4230/LIPIcs.ECOOP.2020.22
   Dutu A, 2020, ANN I S COM, P1022, DOI 10.1109/ISCA45697.2020.00087
   ElTantawy A, 2016, INT SYMP MICROARCH
   Garavel Hubert, 2013, International Journal on Software Tools for Technology Transfer, V15, P89, DOI 10.1007/s10009-012-0244-z
   Google, 2020, AMBER
   Gupta K., 2012, Innovative Parallel Computing - Foundations & Applications of GPU, Manycore, and Heterogeneous Systems (INPAR 2012), DOI 10.1109/InPar.2012.6339596
   Habermaier A, 2012, LECT NOTES COMPUT SC, V7211, P316, DOI 10.1007/978-3-642-28869-2_16
   HSA Foundation,, 2017, HSA PROGR REF MAN HS
   intel, 2021, ONEAPI GPU OPT GUID
   ISO/IEC,, 2017, WORK DRAFT STAND PRO
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Khronos Group, 2020, KHRON GROUP REL OPEN
   Khronos Group, 2020, VULK 1 2 174 SPEC
   Kim Y, 2019, INT SYM CODE GENER, P285, DOI [10.1109/cgo.2019.8661172, 10.1109/CGO.2019.8661172]
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Lahav O, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485475
   Levien Raph, 2020, PREFIX SUM VULKAN
   Li Guodong, 2012, Proceedings of the 17th ACM SIGPLAN symposium on Principles and Practice of Parallel Programming, DOI DOI 10.1145/2145816.2145844
   Lustig D, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P661, DOI 10.1145/3037697.3037723
   Maleki S, 2016, ACM SIGPLAN NOTICES, V51, P539, DOI [10.1145/2980983.2908089, 10.1145/2908080.2908089]
   Martinez G, 2011, INT C PAR DISTRIB SY, P300, DOI 10.1109/ICPADS.2011.48
   Mateescu R, 2008, LECT NOTES COMPUT SC, V5014, P148, DOI 10.1007/978-3-540-68237-0_12
   Mateescu R, 2010, LECT NOTES COMPUT SC, V6371, P180, DOI 10.1007/978-3-642-15898-8_12
   MCL, 2008, MCL MAN PAG
   Merry B, 2015, PARALLEL PROCESS LET, V25, DOI 10.1142/S0129626415500073
   Nelson J, 2019, PROCEEDINGS OF THE TENTH INTERNATIONAL WORKSHOP ON PROGRAMMING MODELS AND APPLICATIONS FOR MULTICORES AND MANYCORES (PMAM 2019), P11, DOI 10.1145/3303084.3309488
   Nvidia, 2017, NVID TESL V100 GPU A
   Nvidia, 2021, CUB V1 12 0
   Nvidia, 2021, CUDA C PROGRAMMING G
   Sorensen T, 2019, I S WORKL CHAR PROC, P155, DOI 10.1109/IISWC47752.2019.9042139
   Sorensen T, 2016, ACM SIGPLAN NOTICES, V51, P100, DOI [10.1145/2980983.2908114, 10.1145/2908080.2908114]
   Sorensen Tyler, **DATA OBJECT**, DOI 10.5281/zenodo.5501522
   Sorensen Tyler, 2018, LIPICS, V118, DOI 10.4230/ LIPIcs.CONCUR.2018.23
   Sorensen Tyler, 2016, ACM INT C OBJ OR PRO, DOI [10.1145/3022671.2984032, DOI 10.1145/3022671.2984032, 10.1145/2983990.2984032, DOI 10.1145/2983990.2984032]
   Ta T, 2019, I S WORKL CHAR PROC, P81, DOI 10.1109/IISWC47752.2019.9042019
   Tzeng Stanley, 2010, P C HIGH PERF GRAPH, P29
   Wang YZH, 2016, ACM SIGPLAN NOTICES, V51, P123, DOI [10.1145/2851141.2851145, 10.1145/3016078.2851145]
   Wickerson J, 2017, ACM SIGPLAN NOTICES, V52, P190, DOI 10.1145/3093333.3009838
   Wong Henry, 2010, 2010 IEEE International Symposium on Performance Analysis of Systems & Software (ISPASS 2010), P235, DOI 10.1109/ISPASS.2010.5452013
   Xiao Shucai., 2010, Proc. of the IEEE Parallel and Distributed Processing Symposium, P1, DOI [DOI 10.1109/IPDPS.2010.5470477, 10.1109/IPDPS.2010.5470477]
NR 55
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 131
DI 10.1145/3485508
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200035
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Giannarakis, N
   Silva, A
   Walker, D
AF Giannarakis, Nick
   Silva, Alexandra
   Walker, David
TI ProbNV: Probabilistic Verification of Network Control Planes
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Network Verification; Network Simulation; Probabilistic verification;
   Probabilistic Network Analysis; Control Plane Analysis; Router
   Configuration Analysis
ID INFERENCE
AB ProbNV is a new framework for probabilistic network control plane verification that strikes a balance between generality and scalability. ProbNV is general enough to encode a wide range of features from the most common protocols (eBGP and OSPF) and yet scalable enough to handle challenging properties, such as probabilistic all-failures analysis of medium-sized networks with 100-200 devices. When there are a small, bounded number of failures, networks with up to 500 devices may be verified in seconds. ProbNV operates by translating raw CISCO configurations into a probabilistic and functional programming language designed for network verification. This language comes equipped with a novel type system that characterizes the sort of representation to be used for each data structure: concrete for the usual representation of values; symbolic for a BDD-based representation of sets of values; and multi-value for an MTBDD-based representation of values that depend upon symbolics. Careful use of these varying representations speeds execution of symbolic simulation of network models. The MTBDD-based representations are also used to calculate probabilistic properties of network models once symbolic simulation is complete. We implement the language and evaluate its performance on benchmarks constructed from real network topologies and synthesized routing policies.
C1 [Giannarakis, Nick] Univ Wisconsin, 1210 W Dayton St, Madison, WI 53706 USA.
   [Silva, Alexandra] UCL, Comp Sci Dept, Gower St, London WC1E 6BT, England.
   [Silva, Alexandra] Cornell Univ, 402 Gates Hall, Ithaca, NY 14853 USA.
   [Walker, David] Princeton Univ, 35 Olden St, Princeton, NJ 08542 USA.
C3 University of Wisconsin System; University of Wisconsin Madison;
   University of London; University College London; Cornell University;
   Princeton University
RP Giannarakis, N (corresponding author), Univ Wisconsin, 1210 W Dayton St, Madison, WI 53706 USA.
EM nick.giannarakis@gmail.com; alexandra.silva@ucl.ac.uk;
   dpw@cs.princeton.edu
OI Walker, David/0000-0003-3681-149X
FU National Science Foundation [CNS-1703493, FMitF-1837030, 2030859]; Royal
   Society Wolfson fellowship; ERC [101002697]; European Research Council
   (ERC) [101002697] Funding Source: European Research Council (ERC)
FX HY7 yWe are grateful to the anonymous reviewers and our shepherd Arjun
   Guha for their feedback on improving this paper. This material is based
   upon work supported by the National Science Foundation under Grant
   #2030859 to the Computing Research Association for the CIFellows
   Project, and by the National Science Foundation awards CNS-1703493 and
   FMitF-1837030. Silva's research is partly funded by a Royal Society
   Wolfson fellowship and ERC consolidator grant AutoProbe (101002697).
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   ABHASHKUMAR A, 2020, 17 USENIX S NETW SYS, V5
   Anderson CJ, 2014, ACM SIGPLAN NOTICES, V49, P113, DOI 10.1145/2535838.2535862
   [Anonymous], PLDI 2018, P586, DOI [10.1145/3192366.3192400, DOI 10.1145/3192366.3192400]
   [Anonymous], 2021, P ACM PROGRAM LANG, V5
   BAHAR RI, 1993, 1993 IEEE/ACM INTERNATIONAL CONFERENCE ON COMPUTER-AIDED DESIGN - DIGEST OF TECHNICAL PAPERS, P188, DOI 10.1109/ICCAD.1993.580054
   BECKETT R, 2017, P C ACM SPEC INT GRO
   Beckett R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371110
   Beckett R, 2019, ACM SIGCOMM COMP COM, V49, P104, DOI 10.1145/3371934.3371965
   Beckett R, 2018, PROCEEDINGS OF THE 2018 CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '18), P476, DOI 10.1145/3230543.3230583
   Beckett Ryan, 2020, Proceedings of the 19th ACM Workshop on Hot Topics in Networks, P8, DOI [DOI 10.1145/3422604.3425930(P.117, 10.1145/3422604.3425930 (p. 117]
   Bollig B, 1996, IEEE T COMPUT, V45, P993, DOI 10.1109/12.537122
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Chaganty Arun, 2013, Artificial Intelligence and Statistics, V31
   Claret Guillaume., 2013, Foundations of Software Engineering, P92, DOI DOI 10.1145/2491411.2491423
   Clarke EdmundM., 1996, Representations of discrete functions, P93
   de Alfaro L, 2000, LECT NOTES COMPUT SC, V1785, P395
   Dehnert C, 2017, LECT NOTES COMPUT SC, V10427, P592, DOI 10.1007/978-3-319-63390-9_31
   Dupleich D, 2019, PROC EUR CONF ANTENN
   El-Hassany A, 2018, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI'18), P579
   Fogel Ari, 2015, 12 USENIX S NETWORKE
   Foster N, 2016, LECT NOTES COMPUT SC, V9632, P282, DOI 10.1007/978-3-662-49498-1_12
   GEHR T, 2016, INT C COMP AID VER
   Gehr T, 2018, ACM SIGPLAN NOTICES, V53, P543, DOI 10.1145/3192366.3192400
   Geldenhuys Jaco, 2012, P 2012 INT S SOFTWAR, P166, DOI DOI 10.1145/2338965.2336773
   Gember-Jacobson A, 2016, PROCEEDINGS OF THE 2016 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '16), P300, DOI 10.1145/2934872.2934876
   GIANNARAKIS N, 2019, INT C COMP AID VER
   Giannarakis N, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P958, DOI 10.1145/3385412.3386019
   Godfrey Joanne., 2016, The summer of network misconfigurations
   Goodman Noah D., 2012, ARXIV PREPRINT ARXIV
   Graham-Cumming J., 2020, Cloudflare Outage on July 17, 2020
   Holtzen S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428208
   Kazemian P., 2012, P 9 USENIX S NETWORK, P113
   Khurshid Ahmed., 2012, P ACM SIGCOMM HOTSDN, P15
   Knight S, 2011, IEEE J SEL AREA COMM, V29, P1765, DOI 10.1109/JSAC.2011.111002
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Lopes Nuno P., 2019, Verification, Model Checking, and Abstract Interpretation. 20th International Conference, VMCAI 2019. Proceedings: Lecture Notes in Computer Science (LNCS 11388), P386, DOI 10.1007/978-3-030-11245-5_18
   Lopes Nuno P., 2015, 12th {USENIX} symposium on networked systems design and implementation, P499, DOI 10.5555/2789770.2789805
   Mai H, 2011, ACM SIGCOMM COMP COM, V41, P290, DOI 10.1145/2043164.2018470
   Mansinghka VK, 2018, ACM SIGPLAN NOTICES, V53, P603, DOI [10.1145/3192366.3192409, 10.1145/3296979.3192409]
   McCarthy Kieren, 2019, BGP SUPER BLUNDER VE
   Plotkin GD, 2016, ACM SIGPLAN NOTICES, V51, P69, DOI 10.1145/2914770.2837657
   Pottier F, 2003, ACM T PROGR LANG SYS, V25, P117, DOI 10.1145/596980.596983
   Sampson A, 2014, ACM SIGPLAN NOTICES, V49, P112, DOI [10.1145/2666356.2594294, 10.1145/2594291.2594294]
   Sharwood Simon., 2016, Google cloud wobbles as workers patch wrong routers
   Smolka S, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P190, DOI 10.1145/3314221.3314639
   Somenzi Fabio, 1997, CUDD 3 0 0
   Steffen Samuel, 2020, P ANN C ACM SPEC INT, P750, DOI 10.1145/3387514
   Sverdlik Yevgenly., 2012, Microsoft: misconfigured network device led to azure outage
   Torlak Emina, 2013, P 2013 ACM INT S NEW, P135, DOI DOI 10.1145/2509578.2509586
   Walker David, 2021, APPENDIX PROBNV PROB
   Yang HK, 2016, IEEE ACM T NETWORK, V24, P887, DOI 10.1109/TNET.2015.2398197
NR 52
TC 0
Z9 0
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 90
DI 10.1145/3473595
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800030
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Zyuzin, N
   Nanevski, A
AF Zyuzin, Nikita
   Nanevski, Aleksandar
TI Contextual Modal Types for Algebraic Effects and Handlers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE algebraic effects; effect handlers; modal logic; modal types
AB Programming languages with algebraic effects often track the computations' effects using type-and-effect systems. In this paper, we propose to view an algebraic effect theory of a computation as a variable context; consequently, we propose to track algebraic effects of a computation with contextual modal types. We develop ECMTT, a novel calculus which tracks algebraic effects by a contextualized variant of the modal. (necessity) operator, that it inherits from Contextual Modal Type Theory (CMTT).
   Whereas type-and-effect systems add effect annotations on top of a prior programming language, the effect annotations in ECMTT are inherent to the language, as they are managed by programming constructs corresponding to the logical introduction and elimination forms for the. modality. Thus, the type-and-effect system of ECMTT is actually just a type system.
   Our design obtains the properties of local soundness and completeness, and determines the operational semantics solely by beta-reduction, as customary in other logic-based calculi. In this view, effect handlers arise naturally as a witness that one context (i.e., algebraic theory) can be reached from another, generalizing explicit substitutions from CMTT.
   To the best of our knowledge, ECMTT is the first system to relate algebraic effects to modal types. We also see it as a step towards providing a correspondence in the style of Curry and Howard that may transfer a number of results from the fields of modal logic and modal type theory to that of algebraic effects.
C1 [Zyuzin, Nikita; Nanevski, Aleksandar] IMDEA Software Inst, Campus Montegancedo S-N, Madrid 28223, Spain.
   [Zyuzin, Nikita] Univ Politecn Madrid, Madrid, Spain.
C3 IMDEA Software Institute; Universidad Politecnica de Madrid
RP Zyuzin, N (corresponding author), IMDEA Software Inst, Campus Montegancedo S-N, Madrid 28223, Spain.; Zyuzin, N (corresponding author), Univ Politecn Madrid, Madrid, Spain.
EM nikita.zyuzin@imdea.org; aleks.nanevski@imdea.org
OI Zyuzin, Nikita/0000-0001-9112-548X; Nanevski,
   Aleksandar/0000-0002-4851-1075
FU Spanish MICINN projects BOSCO [PGC2018-102210B-I00]; European Research
   Council [ERC2016-COG-724464]
FX This research was partially supported by the Spanish MICINN projects
   BOSCO (PGC2018-102210B-I00) and the European Research Council project
   Mathador (ERC2016-COG-724464). Any opinions, findings, and conclusions
   or recommendations expressed in the material are those of the authors
   and do not necessarily reflect the views of the funding agencies.
CR Ahman D, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434305
   Ahman D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158095
   Alechina N., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P292
   Bak M., 7 WORKSH INT MOD LOG
   Bauer, 2018, WHAT IS ALGEBRAIC AL
   Bauer A, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:9)2014
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Benton P. N., 1998, Journal of Functional Programming, V8, P177, DOI 10.1017/S0956796898002998
   Bierman G. M., 2000, Studia Logica, V65, P383, DOI 10.1023/A:1005291931660
   Biernacki D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290319
   Biernacki D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371116
   Blackburn P., 2001, Modal Logic, V53
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Bruggeman C, 1996, ACM SIGPLAN NOTICES, V31, P99, DOI 10.1145/249069.231395
   Cave A., 2013, 8 ACM SIGPLAN INT WO, P15, DOI [DOI 10.1145/2503887.2503889, 10.1145/2503887.2503889]
   Convent L, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000039
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   Davies Rowan, 1998, COMPUT SURV, V30, P3, DOI DOI 10.1145/289121.289129
   Gabbay MJ, 2013, J APPL LOGIC, V11, P1, DOI 10.1016/j.jal.2012.07.002
   Gaboardi M, 2016, ACM SIGPLAN NOTICES, V51, P476, DOI 10.1145/3022670.2951939
   Gratzer D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341711
   Hillerström D, 2018, LECT NOTES COMPUT SC, V11275, P415, DOI 10.1007/978-3-030-02768-1_22
   Hillerström D, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000040
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Ilik D, 2013, ANN PURE APPL LOGIC, V164, P651, DOI 10.1016/j.apal.2012.05.003
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Karachalias G, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000131
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Leijen Daan, 2020, ICFP, DOI 10.1145/3408981
   Luksic Z, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796819000212
   Nanevski, 2003, CMUCS03149 SCH COMP
   Nanevski, 2021, ARXIV210302976CSPL
   Nanevski A, 2005, J FUNCT PROGRAM, V15, P893, DOI 10.1017/S095679680500568X
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Nanevski Aleksandar, 2003, PPDP 03, P207, DOI [10.1145/888251.888271, DOI 10.1145/888251.888271]
   Nanevski Aleksandar, 2004, FUNCTIONAL PROGRAMMI
   Orchard D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341714
   Pfenning, 2009, LECT NOTES HARMONY
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   Pientka B, 2003, LECT NOTES ARTIF INT, V2741, P473
   Pientka B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P371, DOI 10.1145/1328438.1328483
   Pientka B, 2010, LECT NOTES COMPUT SC, V6009, P1, DOI 10.1007/978-3-642-12251-4_1
   Piróg M, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P809, DOI 10.1145/3209108.3209166
   Pitts AM, 2003, INFORM COMPUT, V186, P165, DOI 10.1016/S0890-5401(03)00138-X
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Plotkin Gordon D., 2001, Lecture Notes in Computer Science, V2030, P1, DOI [10.1007/3-540-45315-6_1, DOI 10.1007/3-540-45315-6_1]
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Schrijvers Tom, WORKSH PART EV PROGR
   Schuster P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408975
   Simpson A., 1994, The proof theory and semantics of intuitionistic modal logic
   Sivaramakrishnan KC, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P206, DOI 10.1145/3453483.3454039
   Stampoulis Antonios Michael, 2013, THESIS YALE U
   Stampoulis A, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P333
   Wei GN, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428232
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
NR 59
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 75
DI 10.1145/3473580
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800015
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU de Vilhena, PE
   Pottier, F
AF de Vilhena, Paulo Emilio
   Pottier, Francois
TI A Separation Logic for Effect Handlers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE separation logic; effect handlers; program verification
ID STYLE
AB User-defined effects and effect handlers are advertised and advocated as a relatively easy-to-understand and modular approach to delimited control. They offer the ability of suspending and resuming a computation and allow information to be transmitted both ways between the computation, which requests a certain service, and the handler, which provides this service. Yet, a key question remains, to this day, largely unanswered: how does one modularly specify and verify programs in the presence of both user-defined effect handlers and primitive effects, such as heap-allocated mutable state? We answer this question by presenting a Separation Logic with built-in support for effect handlers, both shallow and deep. The specification of a program fragment includes a protocol that describes the effects that the program may perform as well as the replies that it can expect to receive. The logic allows local reasoning via a frame rule and a bind rule. It is based on Iris and inherits all of its advanced features, including support for higher-order functions, user-defined ghost state, and invariants. We illustrate its power via several case studies, including (1) a generic formulation of control inversion, which turns a producer that lpushesz elements towards a consumer into a producer from which one can lpullz elements on demand, and (2) a simple system for cooperative concurrency, where several threads execute concurrently, can spawn new threads, and communicate via promises.
C1 [de Vilhena, Paulo Emilio; Pottier, Francois] INRIA, Paris, France.
C3 Inria
RP de Vilhena, PE (corresponding author), INRIA, Paris, France.
EM paulo-emilio.de-vilhena@inria.fr; francois.pottier@inria.fr
CR Delbianco GA, 2013, ACM SIGPLAN NOTICES, V48, P363, DOI [10.1145/2544174.2500593, 10.1145/2500365.2500593]
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Bauer Andrej, 2020, Eff
   Berger Martin, 2009, Fundamentals of Software Engineering. Third IPM International Conference, FSEN 2009. Revised Selected Papers, P194
   Biernacki Dariusz, 2019, P ACM PROGR LANG POP, V6, p1S6: 28
   Brachthäuser JI, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000027
   Brady E, 2015, LECT NOTES COMPUT SC, V8843, P18, DOI 10.1007/978-3-319-14675-1_2
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2500365.2500581, 10.1145/2544174.2500581]
   Crolard T, 2012, J LOGIC ALGEBR PROGR, V81, P181, DOI 10.1016/j.jlap.2012.01.004
   Daan Leijen, 2020, KOKA
   de Vilhena Paulo Emilio, CONTROL INVERSION MU
   de Vilhena Paulo Emilio, 2020, PROBLEMS MULTISHOT C
   de Vilhena Paulo Emilio, 2020, SEPARATION LOGIC EFF
   de Vilhena Paulo Emilio, 2020, COOP CONC MULT OCAMI
   Dolan Stephan, 2020, MULTICORE OCAML
   Dolan S, 2018, LECT NOTES COMPUT SC, V10788, P98, DOI 10.1007/978-3-319-89719-6_6
   Dreyer D, 2012, J FUNCT PROGRAM, V22, P477, DOI 10.1017/S095679681200024X
   Filliâtre JC, 2016, LECT NOTES COMPUT SC, V9690, P322, DOI 10.1007/978-3-319-40648-0_24
   Hillerstrom Daniel, 2018, Programming Languages and Systems. 16th Asian Symposium, APLAS 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11275), P415, DOI 10.1007/978-3-030-02768-1_22
   Hillerström D, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000040
   Hinrichsen Jonas Kastberg, 2020, P ACM PROGRAMMING LA, V6
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kloos Johannes, 2015, LIPICS, V37, P396, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Leijen D, 2017, PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT (TYDE' 17), P16, DOI 10.1145/3122975.3122977
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Letan T, 2018, LECT NOTES COMPUT SC, V10951, P338, DOI 10.1007/978-3-319-95582-7_20
   Lindley Sam, 2017, PRINCIPLES PROGRAMMI
   O'Hearn P, 2019, COMMUN ACM, V62, P86, DOI 10.1145/3211968
   Plotkin G, 2008, IEEE S LOG, P118, DOI 10.1109/LICS.2008.45
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Plotkin Gordon, 2004, Electronic Notes in Theoretical Computer Science, V73, P149, DOI DOI 10.1016/J.ENTCS.2004.08.008
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pottier F, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P3, DOI 10.1145/3018610.3018624
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Timany A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341709
   Zakowski Yannick, 2020, P ACM PROGRAM LANG, DOI DOI 10.1145/3371119
   Zhang Yizhou, 2019, P ACM PROGRAMMING LA, V5
NR 38
TC 6
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 33
DI 10.1145/3434314
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100033
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Gondelman, L
   Gregersen, SO
   Nieto, A
   Timany, A
   Birkedal, L
AF Gondelman, Leon
   Gregersen, Simon Oddershede
   Nieto, Abel
   Timany, Amin
   Birkedal, Lars
TI Distributed Causal Memory: Modular Specification and Verification in
   Higher-Order Distributed Separation Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Distributed systems; causal consistency; separation logic; higher-order
   logic; concurrency; formal verification
ID IMPLEMENTATION
AB We present the first specification and verification of an implementation of a causally-consistent distributed database that supports modular verification of full functional correctness properties of clients and servers. We specify and reason about the causally-consistent distributed database in Aneris, a higher-order distributed separation logic for an ML-like programming language with network primitives for programming distributed systems. We demonstrate that our specifications are useful, by proving the correctness of small, but tricky, synthetic examples involving causal dependency and by verifying a session manager library implemented on top of the distributed database. We use Aneris's facilities for modular specification and verification to obtain a highly modular development, where each component is verified in isolation, relying only on the specifications (not the implementations) of other components. We have used the Coq formalization of the Aneris logic to formalize all the results presented in the paper in the Coq proof assistant.
C1 [Gondelman, Leon; Gregersen, Simon Oddershede; Nieto, Abel; Timany, Amin; Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
C3 Aarhus University
RP Gondelman, L (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM gondelman@cs.au.dk; gregersen@cs.au.dk; abeln@cs.au.dk; timany@cs.au.dk;
   birkedal@cs.au.dk
OI Birkedal, Lars/0000-0003-1320-0098; Gregesen, Simon/0000-0001-6045-5232;
   Timany, Amin/0000-0002-2237-851X; Nieto, Abel/0000-0003-2741-8119
FU Villum Investigator grant, Center for Basic Research in Program
   Verification (CPV), from the VILLUM Foundation [25804]
FX This work was supported in part by a Villum Investigator grant (no.
   25804), Center for Basic Research in Program Verification (CPV), from
   the VILLUM Foundation.
CR Abe T, 2016, LECT NOTES COMPUT SC, V10017, P63, DOI 10.1007/978-3-319-47958-3_4
   Adya A., 2000, Proceedings of 16th International Conference on Data Engineering (Cat. No.00CB37073), P67, DOI 10.1109/ICDE.2000.839388
   AHAMAD M, 1995, DISTRIB COMPUT, V9, P37, DOI 10.1007/BF01784241
   Alglave J, 2010, LECT NOTES COMPUT SC, V6174, P258, DOI 10.1007/978-3-642-14295-6_25
   [Anonymous], 2012, P 2012 ACM SIGMOD IN, DOI 10.1145/2213836.2213945
   Bailis P., 2013, ACM SIGMOD International Conference on Management of Data, P761, DOI 10
   Birkedal Lars., 2020, DISTRIBUTED CAUSAL M
   Birkedal Lars, 2017, Lecture Notes on Iris: Higher-Order Concurrent Separation Log
   Boehm HJ, 2012, COMMUN ACM, V55, P48, DOI 10.1145/2076450.2076465
   Bouajjani A, 2017, ACM SIGPLAN NOTICES, V52, P626, DOI 10.1145/3093333.3009888
   Brzezinski J, 2004, 12TH EUROMICRO CONFERENCE ON PARALLEL, DISTRIBUTED AND NETWORK-BASED PROCESSING, PROCEEDINGS, P152, DOI 10.1109/EMPDP.2004.1271440
   Burckhardt S, 2012, LECT NOTES COMPUT SC, V7211, P67, DOI 10.1007/978-3-642-28869-2_4
   Cerone Andrea, 2015, CONCUR, P58
   Chang F, 2008, ACM T COMPUT SYST, V26, DOI 10.1145/1365815.1365816
   Chodorow Kristina., 2010, MONGODB DEFINITIVE G, V1st
   Cooper BF, 2008, PROC VLDB ENDOW, V1, P1277
   Crary K, 2015, ACM SIGPLAN NOTICES, V50, P623, DOI [10.1145/2775051.2676984, 10.1145/2676726.2676984]
   Crooks N, 2017, PROCEEDINGS OF THE ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC'17), P73, DOI 10.1145/3087801.3087802
   Dinsdale-Young T, 2018, J LOG ALGEBR METHODS, V98, P1, DOI 10.1016/j.jlamp.2018.03.003
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Doko M, 2016, LECT NOTES COMPUT SC, V9583, P413, DOI 10.1007/978-3-662-49122-5_20
   Gardner, 2019, ARXIV190110615
   Gilbert S., 2002, SIGACT News, V33, P51, DOI 10.1145/564585.564601
   Gotsman A, 2016, ACM SIGPLAN NOTICES, V51, P371, DOI 10.1145/2914770.2837625
   Guo Zhenyu., 2013, 14 WORKSH HOT TOP OP, P8
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kaiser Jan-Oliver, 2017, EUR C OBJ OR PROGR E, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.17, 10.4230/LIPIcs.ECOOP.2017]
   Kaki G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158115
   Killian C, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P179, DOI 10.1145/1250734.1250755
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krebbers Robbert, 2018, PACMPL 2 ICFP, V77, p1s77:30, DOI [10.1145/3236772, DOI 10.1145/3236772]
   Krogh-Jespersen M, 2020, LECT NOTES COMPUT SC, V12075, P336, DOI 10.1007/978-3-030-44914-8_13
   Lahav Ori, 2019, ACM SIGLOG News, V6, P43, DOI 10.1145/3326938.3326942
   Lahav O, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P211, DOI 10.1145/3385412.3385966
   Lamport Leslie, 1992, HYBRID SYSTEMS, P77, DOI [10.1007/3-540-57318-6_25, DOI 10.1007/3-540-57318-6_25]
   Lesani M, 2016, ACM SIGPLAN NOTICES, V51, P357, DOI 10.1145/2914770.2837622
   Lloyd W, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P401
   Mador-Haim Sela, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P495, DOI 10.1007/978-3-642-31424-7_36
   Nestmann Uwe, 2017, SCHLOSS DAGSTUHL LEI, V26
   Parkinson, 2015, ARXIV151201416
   Peter Sewell., 2019, P ACM PROGRAM LANG, V3
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sergey I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158116
   Sevcík J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P43, DOI 10.1145/1926385.1926393
   Svendsen K, 2013, LECT NOTES COMPUT SC, V7792, P169, DOI 10.1007/978-3-642-37036-6_11
   Tanenbaum AS., 2007, DISTRIBUTED SYSTEMS
   Terry D. B., 1994, Proceedings of the Third International Conference on Parallel and Distributed Information Systems (Cat. No.94TH0668-4), P140, DOI 10.1109/PDIS.1994.331722
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Tyulenev M, 2019, INT CONF MANAGE DATA, P636, DOI 10.1145/3299869.3314049
   Vafeiadis V, 2013, ACM SIGPLAN NOTICES, V48, P867, DOI [10.1145/2544173.2509532, 10.1145/2509136.2509532]
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Zhang Lijun, 2018, LIPICS, V118
NR 57
TC 7
Z9 7
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 42
DI 10.1145/3434323
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100042
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Reynaud, A
   Scherer, G
   Yallop, J
AF Reynaud, Alban
   Scherer, Gabriel
   Yallop, Jeremy
TI A Practical Mode System for Recursive Definitions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE recursion; call-by-value; types; semantics; ML; functional programming
AB We present a set of declarative inference rules, prove its soundness with respect to the reference sourcelevel semantics of Nordlander, Carlsson, and Gill [2008], and show that it can be directed into an algorithmic backwards analysis check in a surprisingly simple way.
   Our implementation of this new check replaced the existing check used by the OCaml programming language, a fragile syntactic criterion which let several subtle bugs slip through as the language kept evolving. We document some issues that arise when advanced features of a real-world functional language (exceptions in first-class modules, GADTs, etc.) interact with safety checking for recursive definitions.
C1 [Reynaud, Alban] ENS Lyon, Lyon, France.
   [Scherer, Gabriel] INRIA, Paris, France.
   [Yallop, Jeremy] Univ Cambridge, Cambridge, England.
C3 Ecole Normale Superieure de Lyon (ENS de LYON); Inria; University of
   Cambridge
RP Reynaud, A (corresponding author), ENS Lyon, Lyon, France.
OI Scherer, Gabriel/0000-0003-1758-3938
CR Abel A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408972
   Accattoli B, 2013, ELECTRON PROC THEOR, P41, DOI 10.4204/EPTCS.110.6
   Accattoli Beniamino, 2010, STRUCTURAL LAMBDA CA STRUCTURAL LAMBDA CA
   [Anonymous], 2003, PPDP
   [Anonymous], 1997, The Definition of Standard ML
   Ariola Zena M, 1997, J FUNCT PROGRAM, V7
   Bardou Romain, 2005, TYPAGE MODULES RECUR TYPAGE MODULES RECUR
   Boudol G, 2001, LECT NOTES COMPUT SC, V2028, P269
   Boudol Gerard., 2002, FICS, volume NS-02-2 of BRICS Notes Series, VNS-02-2, P61
   Bour Frederic, 2018, PACMPL 2
   Chang S, 2012, LECT NOTES COMPUT SC, V7211, P128, DOI 10.1007/978-3-642-28869-2_7
   Dreyer D, 2004, ACM SIGPLAN NOTICES, V39, P293, DOI 10.1145/982962.964026
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Garrigue Jacques, 2013, Programming Languages and Systems. 11th Asian Symposium, APLAS 2013. Proceedings: LNCS 8301, P257, DOI 10.1007/978-3-319-03542-0_19
   Genaim Samir, 2001, APPIA GULP PRODE 200, P229
   Ghuloum Abdulaziz, 2009, SCHEM WORKSH SCHEM WORKSH
   Hirschowitz Tom, 2005, PRACTICAL TYPE SYSTE PRACTICAL TYPE SYSTE
   Hirschowitz Tom, 2009, HIGHER ORDER SYMBOL, V22
   Hughes John, 1987, PARTIAL EVALUATION M
   Jeannin JB, 2017, FUND INFORM, V150, P347, DOI 10.3233/FI-2017-1473
   Kiselyov O, 2014, LECT NOTES COMPUT SC, V8475, P86, DOI 10.1007/978-3-319-07151-0_6
   Launchbury J., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P144, DOI 10.1145/158511.158618
   Nordlander Johan, 2008, ML WORKSH ML WORKSH
   Sergey I, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796817000016
   Sergey Ilya, 2017, THEORY PRACTICE DEMA
   Sperber M., 2009, J. Funct. Program, V19, P1
   Syme D, 2006, ELECTRON NOTES THEOR, V148, P3, DOI 10.1016/j.entcs.2005.11.038
   Syme Don, 2005, MSRTR200531 MSRTR200531
   Syme Don, 2012, FSHARP LANGUAGE REFE
   Waddell O., 2005, Higher-Order and Symbolic Computation, V18, P299, DOI 10.1007/s10990-005-4878-3
NR 30
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 45
DI 10.1145/3434326
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100045
OA gold, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Albert, E
   Grossman, S
   Rinetzky, N
   Rodríguez-Núñez, C
   Rubio, A
   Sagiv, M
AF Albert, Elvira
   Grossman, Shelly
   Rinetzky, Noam
   Rodriguez-Nunez, Clara
   Rubio, Albert
   Sagiv, Mooly
TI Taming Callbacks for Smart Contract Modularity
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program verification; program analysis; invariants; logic and
   verification; blockchain; smart contracts
AB Callbacks are an effective programming discipline for implementing event-driven programming, especially in environments like Ethereum which forbid shared global state and concurrency. Callbacks allow a callee to delegate the execution back to the caller. Though effective, they can lead to subtle mistakes principally in open environments where callbacks can be added in a new code. Indeed, several high profile bugs in smart contracts exploit callbacks. We present the first static technique ensuring modularity in the presence of callbacks and apply it to verify prominent smart contracts. Modularity ensures that external calls to other contracts cannot affect the behavior of the contract. Importantly, modularity is guaranteed without restricting programming.
   In general, checking modularity is undecidable -even for programs without loops. This paper describes an effective technique for soundly ensuring modularity harnessing SMT solvers. The main idea is to define a constructive version of modularity using commutativity and projection operations on program segments. We believe that this approach is also accessible to programmers, since counterexamples to modularity can be generated automatically by the SMT solvers, allowing programmers to understand and fix the error.
   We implemented our approach in order to demonstrate the precision of the modularity analysis and applied it to real smart contracts, including a subset of the 150 most active contracts in Ethereum. Our implementation decompiles bytecode programs into an intermediate representation and then implements the modularity checking using SMT queries. Overall, we argue that our experimental results indicate that the method can be applied to many realistic contracts, and that it is able to prove modularity where other methods fail.
C1 [Albert, Elvira; Rodriguez-Nunez, Clara; Rubio, Albert] Univ Complutense Madrid, Madrid, Spain.
   [Albert, Elvira; Rubio, Albert] Inst Knowledge Technol, Valencia, Spain.
   [Grossman, Shelly; Rinetzky, Noam; Sagiv, Mooly] Tel Aviv Univ, Tel Aviv, Israel.
C3 Complutense University of Madrid; Tel Aviv University
RP Albert, E (corresponding author), Univ Complutense Madrid, Madrid, Spain.; Albert, E (corresponding author), Inst Knowledge Technol, Valencia, Spain.
EM elvira@sip.ucm.es; shellygr@mail.tau.ac.il; maon@post.tau.ac.il;
   clarrodr@ucm.es; alberu04@ucm.es; msagiv@acm.org
FU Spanish MCIU; AEI; FEDER (EU) [RTI2018-094403-B-C31,
   RTI2018-094403-B-C33, S2018/TCS-4314]; Israeli Science Foundation (ISF)
   [1810/18]; United States-Israel Binational Science Foundation (BSF)
   [2016260]; Blavatnik Interdisciplinary Cyber Research Center, Tel Aviv
   University; Pazy Foundation [347853669]; Israel Science Foundation (ISF)
   [1996/18]
FX We would like to thank the anonymous referees for their comments that
   have helped improve the presentation and contents of this paper. This
   work was funded partially by the Spanish MCIU, AEI and FEDER (EU)
   projects RTI2018-094403-B-C31 and RTI2018-094403-B-C33, and by the CM
   project S2018/TCS-4314. This research was partially supported by the
   Israeli Science Foundation (ISF) grant No. 1810/18. This material is
   based upon work supported by the United States-Israel Binational Science
   Foundation (BSF) grant No. 2016260. The research was supported in part
   by the Blavatnik Interdisciplinary Cyber Research Center, Tel Aviv
   University, and Pazy Foundation grant No. 347853669; The Israel Science
   Foundation (ISF) grant No. 1996/18.
CR Albert Elvira, 2018, LECT NOTES COMPUT SC, DOI DOI 10.1007/978-3-319-96142-2_24
   [Anonymous], 2016, EIP-150 revision
   [Anonymous], 2016, PHIL DAIAN
   [Anonymous], 1987, Concurrency Control and Recovery in Database Systems
   Atzei Nicola, 2017, LECT NOTES COMPUT SC, V10204, DOI [10.1007/978-3-662-54455-6_8, DOI 10.1007/978-3-662-54455-6_8]
   Bansal Kshitij, 2018, LECT NOTES COMPUT SC, P115, DOI DOI 10.1007/978-3-319-89960-2_7
   Barthe Gilles, 2019, 2019 FORM METH COMP, P170
   Beillahi S.M., 2020, P 41 C PROGR LANG DE, P470
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Bernardi T., 2020, PREVENTING REENTRANC
   Bizga A., 2020, HACKERS DREAM PAYDAY
   Brent Lexi, 2020, ETHAINTER SMART CONT
   Buterin V., 2016, CRITICAL UPDATE Re: DAO Vulnerability
   Cecchetti E., 2020, P 3 INT S FDN APPL B, P1
   Consensys, 2019, ETH SMART CONTR BEST
   Cooper Turley, 2020, IMBTC UNISWAP POOL D
   Dan Andrei, 2018, P 2018 ACM SIGS C, p67S82, DOI [10.1145/3243734.3243780, DOI 10.1145/3243734.3243780]
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Finkbeiner B, 2019, FORM METHOD SYST DES, V54, P336, DOI 10.1007/s10703-019-00334-z
   Flanagan C, 2003, ACM SIGPLAN NOTICES, V38, P338, DOI 10.1145/780822.781169
   Grishchenko Ilya, 2018, LECT NOTES COMPUT SC, P243, DOI DOI 10.1007/978-3-319-89722-6_10
   Grishchenko Ilya, 2018, LECT NOTES COMPUT SC, P51, DOI DOI 10.1007/978-3-319-96145-3_4
   Groce Alex, 2019, 2019 IEEEACM 2 INT, p8S15, DOI DOI 10.1109/WETSEB.2019.00008
   Grossman Shelly, 2018, PACMPL 2 POPL
   Hendren L., 2011, SOOT FRAMEWORK JAVA
   Hernandez Fernando, 2019, UNDERSTANDING CALLBA
   Jameson Hudson, 2019, SECURITY ALERT ETHER
   Kolluri Aashish, 2019, P 28 ACM SIGS INT S, DOI [10.1145/3293882.3330560, DOI 10.1145/3293882.3330560]
   Li Ao, 2020, SECURING SMART CONTR
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Luu Loi, 2016, CCS16 P 2016 ACM, DOI DOI 10.1145/2976749.2978309
   Mavridou Anastasia, 2018, LECT NOTES COMPUT SC, DOI DOI 10.1007/978-3-319-89722-6_11
   Nikolic Ivica, 2018, 34 ANN COMP SEC, DOI DOI 10.1145/3274694.3274743
   Palmer Daniel, 2018, SPANKCHAIN LOSES 40K
   Rodler M, 2019, 26TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2019), DOI 10.14722/ndss.2019.23413
   Schneidewind Clara, 2020, ETHOR PRACTICAL PROV
   Sergey Ilya, 2017, Financial Cryptography and Data Security. FC 2017 International Workshops WAHC, BITCOIN, VOTING, WTSC, and TA. Revised Selected Papers: LNCS 10323, P478, DOI 10.1007/978-3-319-70278-0_30
   Sousa M, 2016, ACM SIGPLAN NOTICES, V51, P57, DOI 10.1145/2908080.2908092
   Synthetix, 2020, SYNTHETIX DECENTRALI
   The Concourse Open Community, 2019, DEFI PULSE
   Tikhomirov S., 2018, 2018 IEEEACM 1 INT, p9S16, DOI DOI 10.1145/3194113.3194115
   Torres Christof Ferreira, 2019, P 2019 ACM SIGS C, DOI DOI 10.1145/3319535.3363263
   Tripp O, 2012, ACM SIGPLAN NOTICES, V47, P145, DOI 10.1145/2345156.2254083
   Wang C, 2008, LECT NOTES COMPUT SC, V4963, P382, DOI 10.1007/978-3-540-78800-3_29
   Wang Liqiang, 2005, P ACM SIGPLAN S PRIN, P61, DOI [10.1145/1065944.1065953, DOI 10.1145/1065944.1065953]
   Want Yuepeng, 2019, ARXIV181208829V2
NR 46
TC 13
Z9 14
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 209
DI 10.1145/3428277
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900086
OA gold
DA 2024-07-18
ER

PT J
AU Kumar, A
   Seshadri, V
   Sharma, R
AF Kumar, Aayan
   Seshadri, Vivek
   Sharma, Rahul
TI Shiftry: RNN Inference in 2KB of RAM
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Machine learning; IoT device; Memory management; Programming language;
   Compiler; Fixed-point; Embedded devices
AB Traditionally, IoT devices send collected sensor data to an intelligent cloud where machine learning (ML) inference happens. However, this course is rapidly changing and there is a recent trend to run ML on the edge IoT devices themselves. An intelligent edge is attractive because it saves network round trip (efficiency) and keeps user data at the source (privacy). However, the IoT devices are much more resource constrained than the cloud, which makes running ML on them challenging. Specifically, consider Arduino Uno, a commonly used board, that has 2KB of RAM and 32KB of read-only Flash memory. Although recent breakthroughs in ML have created novel recurrent neural network (RNN) models that provide good accuracy with KB-sized models, deploying them on tiny devices with such hard memory requirements has remained elusive.
   We provide, SHIFTRY, an automatic compiler from high-level floating-point ML models to fixed-point C-programs with 8-bit and 16-bit integers, which have significantly lower memory requirements. For this conversion, SHIFTRY uses a data-driven float-to-fixed procedure and a RAM management mechanism. These techniques enable us to provide first empirical evaluation of RNNs running on tiny edge devices. On simpler ML models that prior work could handle, SHIFTRY-generated code has lower latency and higher accuracy.
C1 [Kumar, Aayan; Seshadri, Vivek; Sharma, Rahul] Microsoft Res, Delhi, India.
RP Kumar, A (corresponding author), Microsoft Res, Delhi, India.
EM t-aak@microsoft.com; visesha@microsoft.com; rahsha@microsoft.com
CR Altun K, 2010, PATTERN RECOGN, V43, P3605, DOI 10.1016/j.patcog.2010.04.019
   [Anonymous], 1997, P INT C SIGN PROC AP
   [Anonymous], 2017, CoRR
   [Anonymous], 2016, ARXIV160207360
   [Anonymous], 2017, NIPS
   [Anonymous], 2006, COMPILERS PRINCIPLES
   Babb J., 1999, Seventh Annual IEEE Symposium on Field-Programmable Custom Computing Machines (Cat. No.PR00375), P70, DOI 10.1109/FPGA.1999.803669
   Baek W, 2010, ACM SIGPLAN NOTICES, V45, P198, DOI 10.1145/1809028.1806620
   Banerjee P., 2003, 11 ANN IEEE S FIELD, DOI [10.1109/FPGA.2003.1227262, DOI 10.1109/FPGA.2003.1227262]
   Banzi M., 2014, Getting Started With Arduino: The Open SourceElectronics Prototyping Platform
   Becvár M, 2005, ACTA POLYTECH, V45, P67
   Brooks D, 1999, FIFTH INTERNATIONAL SYMPOSIUM ON HIGH-PERFORMANCE COMPUTER ARCHITECTURE, PROCEEDINGS, P13, DOI 10.1109/HPCA.1999.744314
   Chakraborty T, 2018, SENSYS'18: PROCEEDINGS OF THE 16TH CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS, P95, DOI 10.1145/3274783.3274853
   Chen Shangyu, 2019, ADV NEURAL INFORM PR, V32
   Chen X, 2017, IEEE IJCNN, P2494, DOI 10.1109/IJCNN.2017.7966159
   Courbariaux M., 2016, BinaryNet: Training deep neural networks with weights and activa
   Darulova E, 2013, 2013 PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON EMBEDDED SOFTWARE (EMSOFT)
   Darulova E, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/3014426
   Darulova E, 2014, ACM SIGPLAN NOTICES, V49, P235, DOI 10.1145/2535838.2535874
   de Campos T. E., 2009, P INT C COMP VIS THE
   Fromm J., 2018, Advances in Neural Information Processing Systems, P4006
   Gong RH, 2019, IEEE I CONF COMP VIS, P4851, DOI 10.1109/ICCV.2019.00495
   Gopinath Sridhar, 2019, MICROSOFT EDGEML REP
   Gopinath Sridhar, P 40 ACM SIGPLAN C P, p79S95
   Gudovskiy D. A., 2017, ARXIV170602393
   Gupta C, 2017, PR MACH LEARN RES, V70
   He ZZ, 2019, PROC CVPR IEEE, P11430, DOI 10.1109/CVPR.2019.01170
   Hou L., 2019, ADV NEUR IN, P7346
   Hsu CW, 2002, IEEE T NEURAL NETWOR, V13, P415, DOI 10.1109/72.991427
   Hubara I, 2016, ADV NEUR IN, V29
   HULL JJ, 1994, IEEE T PATTERN ANAL, V16, P550, DOI 10.1109/34.291440
   Johnson Jeff, 2018, ABS181101721 CORR
   Krishnamoorthi Raghuraman, 2018, ARXIV180608342V1
   Krizhevsky A., 2009, LEARNING MULTIPLE LA
   Kumar A., 2017, International Conference on Machine Learning, V70, P1935
   Kusupati A., 2018, P 32 INT C NEUR INF, P9031
   Lecun Y, 1998, P IEEE, V86, P2278, DOI 10.1109/5.726791
   Li H, 2017, ADV NEUR IN, V30
   Lin Z., 2015, ARXIV151003009
   Louizos C., 2019, ICLR 2019
   Martinez Julieta., 2018, EUR C COMP VIS ECCV
   Meller Eldad, 2019, Same, same but different-recovering neural network quantization error through weight factorization
   Menard Daniel, 2002, P 2002 INT C COMPILE, P270, DOI [DOI 10.1145/581630.581674, 10.1145/581630.581674]
   Mitchell T. M., 1997, MACHINE LEARNING
   Miyashita D., 2016, ARXIV160301025
   Nagel Markus., 2019, 2019 IEEE CVF INT C
   Nayak A, 2001, DESIGN, AUTOMATION AND TEST IN EUROPE, CONFERENCE AND EXHIBITION 2001, PROCEEDINGS, P722, DOI 10.1109/DATE.2001.915108
   Patil Shishir, 2018, GESTUREPOD PROGRAMMA
   Rastegari M, 2016, LECT NOTES COMPUT SC, V9908, P525, DOI 10.1007/978-3-319-46493-0_32
   Reyes-Ortiz Jorge L, 2012, UCI Machine Learning Repository
   Rubio-González C, 2013, INT CONF HIGH PERFOR, DOI 10.1145/2503210.2503296
   Saha O., 2020, Adv. Neural Inf. Process. Syst, V33, P20473
   Sakr Charbel, 2019, 7 INT C LEARN REPR I
   Schkufza E, 2014, ACM SIGPLAN NOTICES, V49, P53, DOI [10.1145/2666356.2594302, 10.1145/2594291.2594302]
   Sidiroglou-Douskos Stelios, 2011, P ACM SIGSOFT S EUR, P124, DOI 10.1145/2025113.2025133
   STMicroelectronics, 2020, STM32 NUCL
   Varma M, 2005, INT J COMPUT VISION, V62, P61, DOI 10.1007/s11263-005-4635-4
   Wang YF, 2018, IEEE INTERNET THINGS, V5, P4558, DOI 10.1109/JIOT.2018.2837347
   Warden P, 2018, ArXiv e-prints: 1804.03209
   Yang JJ, 2009, IEEE I CONF COMP VIS, P436, DOI 10.1109/ICCV.2009.5459172
   Zhao Yiren, 2019, ADV NEUR IN, V32
   Zhou A., 2017, ARXIV170203044
   Zhou AJ, 2018, PROC CVPR IEEE, P9426, DOI 10.1109/CVPR.2018.00982
   Zhu ZYA, 2012, ACM SIGPLAN NOTICES, V47, P441, DOI 10.1145/2103621.2103710
NR 64
TC 6
Z9 7
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 182
DI 10.1145/3428250
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900059
OA gold
DA 2024-07-18
ER

PT J
AU Li, GS
   Li, Z
   Yu, NK
   Ding, YF
   Ying, MS
   Xie, Y
AF Li, Gushu
   Li Zhou
   Yu, Nengkun
   Ding, Yufei
   Ying, Mingsheng
   Xie, Yuan
TI Projection-Based Runtime Assertions for Testing and Debugging Quantum
   Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantum computing; quantum programming; assertion; program testing
AB In this paper, we propose Proq, a runtime assertion scheme for testing and debugging quantum programs on a quantum computer. The predicates in Proq are represented by projections (or equivalently, closed subspaces of the state space), following Birkhoff-von Neumann quantum logic. The satisfaction of a projection by a quantum state can be directly checked upon a small number of projective measurements rather than a large number of repeated executions. On the theory side, we rigorously prove that checking projection-based assertions can help locate bugs or statistically assure that the semantic function of the tested program is close to what we expect, for both exact and approximate quantum programs. On the practice side, we consider hardware constraints and introduce several techniques to transform the assertions, making them directly executable on the measurement-restricted quantum computers. We also propose to achieve simplified assertion implementation using local projection technique with soundness guaranteed. We compare Proq with existing quantum program assertions and demonstrate the effectiveness and efficiency of Proq by its applications to assert two sophisticated quantum algorithms, the Harrow-Hassidim-Lloyd algorithm and Shor's algorithm.
C1 [Li, Gushu; Ding, Yufei; Xie, Yuan] Univ Calif Santa Barbara, Santa Barbara, CA 93106 USA.
   [Li Zhou] Max Planck Inst Secur & Privacy, Berlin, Germany.
   [Yu, Nengkun; Ying, Mingsheng] Univ Technol, Sydney, NSW, Australia.
   [Ying, Mingsheng] Chinese Acad Sci, Inst Software, Beijing, Peoples R China.
C3 University of California System; University of California Santa Barbara;
   University of Technology Sydney; Chinese Academy of Sciences; Institute
   of Software, CAS
RP Li, GS (corresponding author), Univ Calif Santa Barbara, Santa Barbara, CA 93106 USA.
EM gushuli@ece.ucsb.edu; zhou31416@gmail.com; nengkunyu@gmail.com;
   yufeiding@cs.ucsb.edu; Mingsheng.Ying@uts.edu.au; yuanxie@ece.ucsb.edu
RI Ying, Mingsheng/A-8379-2008; yu, nengkun/HTP-0286-2023; Li,
   Gushu/AAE-1899-2020
OI Ying, Mingsheng/0000-0003-4847-702X; Zhou, Li/0000-0002-9868-8477; Ding,
   Yufei/0000-0002-8716-5793; Li, Gushu/0000-0002-6233-0334; Yu,
   Nengkun/0000-0003-1188-3032
FU National Science Foundation of US [1730309, 1925717]; Australian
   Research Council [DP160101652, DP180100691]; National Key R&D Program of
   China [2018YFA0306701]; National Natural Science Foundation of China
   [61832015]; Direct For Computer & Info Scie & Enginr [1925717] Funding
   Source: National Science Foundation; Office of Advanced
   Cyberinfrastructure (OAC) [1925717] Funding Source: National Science
   Foundation
FX We thank all anonymous reviewers for their valuable comments. This work
   was supported in part by National Science Foundation of US (Grant Nos.
   1730309 and 1925717). N. Yu was supported by Australian Research Council
   (Grant No. DE180100156). M. Ying was supported in part by the National
   Key R&D Program of China (Grant No. 2018YFA0306701), the Australian
   Research Council (Grant Nos. DP160101652 and DP180100691), the National
   Natural Science Foundation of China (Grant No. 61832015). We are
   grateful to the Max Planck Institute for Software Systems for hosting L.
   Zhou.
CR Abhari A.J., 2012, 93412 PRINC U
   Abraham H., 2019, Qiskit: An open-source framework for quantum computing, DOI 10.5281/zenodo.2562110
   Birkhoff G, 1936, ANN MATH, V37, P823, DOI 10.2307/1968621
   BRAGINSKY VB, 1980, SCIENCE, V209, P547, DOI 10.1126/science.209.4456.547
   Brunet O, 2004, INT J QUANTUM INF, V2, P45, DOI 10.1142/S0219749904000067
   Chen JX, 2012, PHYS REV A, V86, DOI 10.1103/PhysRevA.86.022339
   Chen Jinyin, 2018, GC LSTM GRAPH CONVOL
   Chong Frederic T, 2019, ARXIV PREPRINT ARXIV
   Google, 2018, ANN CIRQ OP SOURC FR
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Harrow AW, 2009, PHYS REV LETT, V103, DOI 10.1103/PhysRevLett.103.150502
   Hietala Kesha, 2019, ARXIV PREPRINT ARXIV
   Huang YP, 2019, PROCEEDINGS OF THE 2019 46TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA '19), P541, DOI 10.1145/3307650.3322213
   Huang Yipeng, 2019, OPENACCESS SERIES IN
   IBM, 2019, GATE OPER SPEC QUANT
   JavadiAbhari A, 2015, PARALLEL COMPUT, V45, P2, DOI 10.1016/j.parco.2014.12.001
   Kalmbach G., 1983, ORTHOMODULAR LATTICE, V18
   Li YJ, 2014, PHYS REV A, V89, DOI 10.1103/PhysRevA.89.042338
   Linden N, 2002, PHYS REV LETT, V89, DOI 10.1103/PhysRevLett.89.207901
   Liu J, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P1017, DOI 10.1145/3373376.3378488
   Lloyd S, 2014, NAT PHYS, V10, P631, DOI [10.1038/nphys3029, 10.1038/NPHYS3029]
   Mingsheng Ying., 2016, FDN QUANTUM PROGRAMM
   Nielsen Michael A., 2010, Quantum Computation and Quantum Information
   Paykin J, 2017, ACM SIGPLAN NOTICES, V52, P846, DOI 10.1145/3093333.3009894
   Peruzzo A, 2014, NAT COMMUN, V5, DOI 10.1038/ncomms5213
   Rand Robert., 2018, ARXIV180300699
   Rigetti, 2019, PYQUIL PYTH LIB QUAN
   Rigetti Forest team, 2019, FOR SDK
   Shor PW, 1999, SIAM REV, V41, P303, DOI 10.1137/S0036144598347011
   Svore K, 2018, RWDSL2018: PROCEEDINGS OF THE REAL WORLD DOMAIN SPECIFIC LANGUAGES WORKSHOP 2018, DOI 10.1145/3183895.3183901
   Unruh D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290346
   Vandersypen LMK, 2001, NATURE, V414, P883, DOI 10.1038/414883a
   Winter A, 1999, IEEE T INFORM THEORY, V45, P2481, DOI 10.1109/18.796385
   WOOTTERS WK, 1982, NATURE, V299, P802, DOI 10.1038/299802a0
   Xin T, 2017, PHYS REV LETT, V118, DOI 10.1103/PhysRevLett.118.020401
   Ying M., 2010, Semant. Tech. Quantum Comput, V8, P311
   Ying MS, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2049706.2049708
   Yu Nengkun., 2019, ARXIV190800158CSLO
   Zhou L, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1149, DOI 10.1145/3314221.3314584
NR 40
TC 38
Z9 40
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 150
DI 10.1145/3428218
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900027
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Poesia, G
   Pereira, FMQ
AF Poesia, Gabriel
   Quintao Pereira, Fernando Magno
TI Dynamic Dispatch of Context-Sensitive Optimizations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Compiler; Context-sensitive optimization; Dynamic dispatch
ID LANGUAGES
AB Academia has spent much effort into making context-sensitive analyses practical, with great profit. However, the implementation of context-sensitive optimizations, in contrast to analyses, is still not practical, due to code-size explosion. This growth happens because current technology requires the cloning of full paths in the Calling Context Tree. In this paper, we present a solution to this problem. We combine finite state machines and dynamic dispatching to allow fully context-sensitive specialization while cloning only functions that are effectively optimized. This technique makes it possible to apply very liberal optimizations, such as context-sensitive constant propagation, in large programs-something that could not have been easily done before. We demonstrate the viability of our idea by formalizing it in Prolog, and implementing it in LLVM. As a proof of concept, we have used our state machines to implement context-sensitive constant propagation in LLVM. The binaries produced by traditional full cloning are 2.63 times larger than the binaries that we generate with our state machines. When applied on Mozilla Firefox, our optimization increases binary size from 7.2MB to 9.2MB. Full cloning, in contrast, yields a binary of 34MB.
C1 [Poesia, Gabriel] Stanford Univ, Stanford, CA 94305 USA.
   [Quintao Pereira, Fernando Magno] Univ Fed Minas Gerais, Comp Sci, Belo Horizonte, MG, Brazil.
C3 Stanford University; Universidade Federal de Minas Gerais
RP Poesia, G (corresponding author), Stanford Univ, Stanford, CA 94305 USA.
EM me@gpoesia.com; fernando@dcc.ufmg.br
RI Pereira, Fernando/HNR-7786-2023
FU CNPq [406377/2018-9]; FAPEMIG [PPM-00193-16]; Google Research in Latin
   America
FX We thank Breno Guimaraes for helping with the implementation of
   inter-procedural constant propagation early on in this project, and the
   anonymous reviewers for their helpful feedback, which greatly improved
   our evaluation. Fernando Pereira is sponsored by CNPq (Grant
   406377/2018-9) and FAPEMIG (Grant PPM-00193-16). This project was
   developed while Gabriel Poesia was a master student in the Graduate
   Computer Science Program of UFMG. During that time, he was sponsored by
   a scholarship from Google Research in Latin America.
CR Alves P, 2015, ACM SIGPLAN NOTICES, V50, P589, DOI 10.1145/2814270.2814285
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Ausiello G, 2012, ACM SIGPLAN NOTICES, V47, P867, DOI 10.1145/2398857.2384679
   Ball T, 1996, PROCEEDINGS OF THE 29TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE - MICRO-29, P46, DOI 10.1109/MICRO.1996.566449
   Bond MD, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P97
   Bond MD, 2010, ACM SIGPLAN NOTICES, V45, P13, DOI 10.1145/1809028.1806599
   Brown Matt., 2017, Proc. ACM Program. Lang, V2, P14
   Bucek J, 2018, COMPANION OF THE 2018 ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING (ICPE '18), P41, DOI 10.1145/3185768.3185771
   COOPER KD, 1993, COMPUT LANG, V19, P105, DOI 10.1016/0096-0551(93)90005-L
   Das D, 2003, ACM SIGPLAN NOTICES, V38, P23, DOI 10.1145/885638.885645
   Dean J., 1995, SIGPLAN Notices, V30, P93, DOI 10.1145/223428.207119
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   Dragos Iulian., WORKSHOP IMPLEMENTAT, DOI DOI 10.1145/1565824.1565830
   EMAMI M, 1994, SIGPLAN NOTICES, V29, P242, DOI 10.1145/773473.178264
   Fähndrich M, 2000, ACM SIGPLAN NOTICES, V35, P253, DOI 10.1145/358438.349332
   Feng Y, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P576, DOI 10.1145/2635868.2635869
   Fluckiger Olivier, 2020, P ACM PROGR LANG 4 O
   Gal A, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P465, DOI 10.1145/1542476.1542528
   Ghiya R., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P1, DOI 10.1145/237721.237724
   Grcevski N., 2004, Proceedings of the conference on Virtual Machine Research And Technology Symposium, P12
   Grove D, 1997, ACM SIGPLAN NOTICES, V32, P108, DOI 10.1145/263700.264352
   Grune D., 2012, MODERN COMPILER DESI
   Hackett B, 2012, ACM SIGPLAN NOTICES, V47, P239, DOI 10.1145/2345156.2254094
   Hall Mary Wolcott, 1991, THESIS RICE U HOUSTO
   Hind M, 1999, ACM T PROGR LANG SYS, V21, P848, DOI 10.1145/325478.325519
   HOLZLE U, 1991, LECT NOTES COMPUT SC, V512, P21
   Inoue H, 2011, INT SYM CODE GENER, P246, DOI 10.1109/CGO.2011.5764692
   Jeong S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133924
   Jipeng Huang, 2013, ACM SIGPLAN Notices, V48, P53, DOI 10.1145/2509136.2509510
   Kennedy Ken., 2002, Optimizing compilers for modern architectures: a dependence-based approach
   Khedker U., 2009, Data Flow Analysis: Theory and Practice, V1st
   Korobeynikov Anton, 2007, SYRCOSE
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lattner C, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P278, DOI 10.1145/1250734.1250766
   Leopoldseder D, 2018, INT SYM CODE GENER, P126, DOI 10.1145/3168811
   Lhoták O, 2006, LECT NOTES COMPUT SC, V3923, P47
   Li L, 2013, PROCEEDINGS OF THE ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT (ISMM '13), P85
   Li Y, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3381915
   Lima C, 2020, SCI COMPUT PROGRAM, V185, DOI 10.1016/j.scico.2019.102318
   Metzger Robert, 1993, ACM LETT PROGRAM LAN, V2, P1
   Might M, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P305, DOI 10.1145/1806596.1806631
   Milanova A., 2004, Automated Software Engineering, V11, P7, DOI 10.1023/B:AUSE.0000008666.56394.a1
   Milanova A., 2014, Proc. 2014 Int. Conf. Principles and Practices of Program. Java Platform: Virtual Machines, Lang., P99
   Milanova A, 2007, PASTE'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN- SIGSOFT WORKSHOP ON PROGRAM ANALYSIS FOR SOFTWARE TOOLS & ENGINEERING, P25, DOI 10.1145/1251535.1251540
   Nielson F., 1999, Principles of Program Analysis
   Oh H, 2014, ACM SIGPLAN NOTICES, V49, P475, DOI [10.1145/2594291.2594318, 10.1145/2666356.2594318]
   Petrashko D, 2016, ACM SIGPLAN NOTICES, V51, P394, DOI 10.1145/3022671.2983991
   Poesia G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133874
   Poesia Gabriel, 2017, THESIS FEDERAL U MIN
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Reps T, 2000, ACM T PROGR LANG SYS, V22, P162, DOI 10.1145/345099.345137
   Rus Silvius, 2002, ICS
   Sallenave O, 2012, ACM SIGPLAN NOTICES, V47, P11, DOI [10.1145/2345141.1967680, 10.1145/2345141.2248421]
   Samadi M, 2012, ACM SIGPLAN NOTICES, V47, P13, DOI 10.1145/2345156.2254067
   Santos H.N., 2013, P 2013 IEEEACM INT S, P1, DOI [10.1109/CGO.2013.6495006, DOI 10.1109/CGO.2013.6495006]
   SHIVERS O, 1988, SIGPLAN NOTICES, V23, P164, DOI 10.1145/960116.54007
   Sol R, 2011, LECT NOTES COMPUT SC, V6601, P2, DOI 10.1007/978-3-642-19861-8_2
   Spath J., 2016, PROC EUR C OBJECT OR, p22:1, DOI [10.4230/DARTS.2.1.12, DOI 10.4230/LIPICS.ECOOP.2016.22]
   Späth J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290361
   Campos VHS, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P163, DOI 10.1145/2892208.2892225
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Stadler Lukas, 2017, ACM SIGPLAN Notices, V52, P84, DOI 10.1145/3093334.2989236
   Stucki Nicolas, 2013, SCALA, V10, P1
   SUMNER W.N., 2010, Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering, P525
   Sumner WN, 2012, IEEE T SOFTWARE ENG, V38, P1160, DOI 10.1109/TSE.2011.70
   Thakur M, 2020, PROCEEDINGS OF THE 29TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '20), P27, DOI 10.1145/3377555.3377902
   Thakur M, 2019, PROCEEDINGS OF THE 28TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '19), P135, DOI 10.1145/3302516.3307359
   Thiessen R, 2017, ACM SIGPLAN NOTICES, V52, P263, DOI [10.1145/3140587.3062359, 10.1145/3062341.3062359]
   Tian K, 2011, ACM SIGPLAN NOTICES, V46, P445, DOI 10.1145/2076021.2048103
   Vergu Vlad, 2018, MANLANG, P1, DOI [10.1145/3237009.3237018, DOI 10.1145/3237009.3237018]
   Wang Haichuan, 2014, CGO, V295
   Wei Shiyi, 2015, 29 EUR C OBJ OR PROG
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   WILSON RP, 1995, SIGPLAN NOTICES, V30, P1, DOI 10.1145/223428.207111
   Yu Hongtao, 2010, CGO, DOI [10.1145/1772954.1772985, DOI 10.1145/1772954.1772985]
   Zhu Jianwen, 2004, PLDI
NR 76
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 167
DI 10.1145/3428235
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900044
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Shahin, R
   Chechik, M
AF Shahin, Ramy
   Chechik, Marsha
TI Automatic and Efficient Variability-Aware Lifting of Functional Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Software Product Lines; PCF; Program Rewriting; Lifting;
   Variability-aware Programming
AB A software analysis is a computer program that takes some representation of a software product as input and produces some useful information about that product as output. A software product line encompasses many software product variants, and thus existing analyses can be applied to each of the product variations individually, but not to the entire product line as a whole. Enumerating all product variants and analyzing them one by one is usually intractable due to the combinatorial explosion of the number of product variants with respect to product line features. Several software analyses (e.g., type checkers, model checkers, data flow analyses) have been redesigned/re-implemented to support variability. This usually requires a lot of time and effort, and the variability-aware version of the analysis might have new errors/bugs that do not exist in the original one.
   Given an analysis program written in a functional language based on PCF, in this paper we present two approaches to transforming (lifting) it into a semantically equivalent variability-aware analysis. A light-weight approach (referred to as shallow lifting) wraps the analysis program into a variability-aware version, exploring all combinations of its input arguments. Deep lifting, on the other hand, is a program rewriting mechanism where the syntactic constructs of the input program are rewritten into their variability-aware counterparts. Compositionally this results in an efficient program semantically equivalent to the input program, modulo variability. We present the correctness criteria for functional program lifting, together with correctness proof sketches of shallow lifting. We evaluate our approach on a set of program analyses applied to the BusyBox C-language product line.
C1 [Shahin, Ramy; Chechik, Marsha] Univ Toronto, Comp Sci Dept, Toronto, ON, Canada.
C3 University of Toronto
RP Shahin, R (corresponding author), Univ Toronto, Comp Sci Dept, Toronto, ON, Canada.
EM rshahin@cs.toronto.edu; chechik@cs.toronto.edu
FU General Motors; NSERC
FX We thank anonymous reviewers for their feedback, comments, and
   suggestions. This work was supported by General Motors and NSERC.
CR Aguirre A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110265
   Apel Sven, 2013, P JO M FDN SOFTW ENG
   Arntzenius M, 2016, ACM SIGPLAN NOTICES, V51, P214, DOI 10.1145/3022670.2951948
   Bodden E, 2013, ACM SIGPLAN NOTICES, V48, P355, DOI 10.1145/2499370.2491976
   Chen Sheng, 2014, ICFP14 P 2014 ACM, P39, DOI DOI 10.1145/2628136.2628155
   Classen A, 2013, IEEE T SOFTWARE ENG, V39, P1069, DOI 10.1109/TSE.2012.86
   Czarnecki K, 2005, LECT NOTES COMPUT SC, V3676, P422
   Erwig M, 2011, ACM T SOFTW ENG METH, V21, DOI 10.1145/2063239.2063245
   Gazzillo P, 2012, ACM SIGPLAN NOTICES, V47, P323, DOI 10.1145/2345156.2254103
   Grolinger Armin, 2013, P 35 INT C SOFTW, P482
   Kästner C, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2211616.2211617
   Kastner Christian, 2011, OOPSL 11 P 2011 ACM
   Kastner Christian, 2008, P GPCE 08
   Kavvos GA, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371083
   Keidel S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360602
   Liebig Jorg, 2010, P 32 ACM IEEE INT C, DOI [10.1145/1806799.1806819, DOI 10.1145/1806799.1806819]
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   Midtgaard J, 2015, SCI COMPUT PROGRAM, V105, P145, DOI 10.1016/j.scico.2015.04.005
   Mitchell John C., 1996, Foundation of computing series
   Nadi S, 2014, J SOFTW-EVOL PROC, V26, P730, DOI 10.1002/smr.1595
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Reps Thomas, 1995, P 22 ACM SIGPLAN SIG, p49S61
   Rubin Julia, 2012, LECT NOTES COMPUT SC, V7212, P285
   Schopp Ulrich, 2017, P 19 INT S PRINC, P175, DOI [10.1145/3131851.3131868, DOI 10.1145/3131851.3131868]
   Shahin Ramy, 2020, LECT NOTES COMPUT SC, DOI DOI 10.1007/978-3-030-39197-3_14
   Shahin Ramy, 2019, ES P 2019 27 ACM, p39S49, DOI DOI 10.1145/3338906.3338928
   Somenzi F., 1998, CUDD CU DECISION DIA
   Thüm T, 2014, ACM COMPUT SURV, V47, DOI 10.1145/2580950
   Von Rhein A, 2018, ACM T SOFTW ENG METH, V27, DOI 10.1145/3280986
NR 32
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 157
DI 10.1145/3428225
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900034
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Kovács, A
AF Kovacs, Andras
TI Elaboration with First-Class Implicit Function Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE impredicative polymorphism; type theory; elaboration; type inference
AB Implicit functions are dependently typed functions, such that arguments are provided (by default) by inference machinery instead of programmers of the surface language. Implicit functions in Agda are an archetypal example. In the Haskell language as implemented by the Glasgow Haskell Compiler (GHC), polymorphic types are another example. Implicit function types are first-class if they are treated as any other type in the surface language. This holds in Agda and partially holds in GHC. Inference and elaboration in the presence of first-class implicit functions poses a challenge; in the context of Haskell and ML-like languages, this has been dubbed "impredicative instantiation" or "impredicative inference". We propose a new solution for elaborating first-class implicit functions, which is applicable to full dependent type theories and compares favorably to prior solutions in terms of power, generality and simplicity. We build atop Norell's bidirectional elaboration algorithm for Agda, and we note that the key issue is incomplete information about insertions of implicit abstractions and applications. We make it possible to track and refine information related to such insertions, by adding a function type to a core Martin-Lof type theory, which supports strict (definitional) currying. This allows us to represent undetermined domain arities of implicit function types, and we can decide at any point during elaboration whether implicit abstractions should be inserted.
C1 [Kovacs, Andras] Eotvos Lorand Univ, Dept Programming Languages & Compilers, Budapest, Hungary.
C3 Eotvos Lorand University
RP Kovács, A (corresponding author), Eotvos Lorand Univ, Dept Programming Languages & Compilers, Budapest, Hungary.
EM kovacsandras@inf.elte.hu
OI Kovacs, Andras/0000-0002-6375-9781
FU European Union - European Social Fund [EFOP-3.6.3-VEKOP-16-201700002]
FX The author was supported by the European Union, co-financed by the
   European Social Fund (EFOP-3.6.3-VEKOP-16-201700002).
CR Abel A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158111
   Abel A, 2011, LECT NOTES COMPUT SC, V6690, P10, DOI 10.1007/978-3-642-21691-6_5
   Abel Andreas, 2013, Habilitation Thesis
   Altenkirch T, 2016, ACM SIGPLAN NOTICES, V51, P18, DOI 10.1145/2914770.2837638
   Birkedal L, 2020, MATH STRUCT COMP SCI, V30, P118, DOI 10.1017/S0960129519000197
   Boulier S, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P182, DOI 10.1145/3018610.3018620
   Coquand T, 1996, SCI COMPUT PROGRAM, V26, P167, DOI 10.1016/0167-6423(95)00021-6
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   Dybjer Peter, 1995, Lecture Notes in Computer Science, V1158, DOI [10.1007/3-540-61780-9\_66, DOI 10.1007/3-540-61780-9, 10.1007/3-540-61780-9_66, DOI 10.1007/3-540-61780]
   Eisenberg Richard, 2016, Ph. D. Dissertation
   Eisenberg Richard A., 2016, P LECT NOTES COMPUTE, V9632, DOI [10.1007/978-3, DOI 10.1007/978-3]
   Gundry Adam, 2013, Ph. D. Dissertation
   Harper R, 2016, Practical Foundations for Programming Languages
   Johansson Marcus, 2015, THESIS CHALMERS U TE
   Kaposi Ambrus, 2019, LIPICS, V25, DOI [10.4230/LIPIcs, DOI 10.4230/LIPICS]
   Le Botlan D, 2003, ACM SIGPLAN NOTICES, V38, P27, DOI 10.1145/944746.944709
   Leijen D, 2009, ACM SIGPLAN NOTICES, V44, P66, DOI 10.1145/1594834.1480891
   Leijen D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283
   LOPS18 Daniel R., 2018, 3 INT C FORMAL STRUC, p22:1, DOI [10.4230/LIPIcs.FSCD.2018.22, DOI 10.4230/LIPICS.FSCD.2018.22]
   Miller D., 1991, Journal of Logic and Computation, V1, P497, DOI 10.1093/logcom/1.4.497
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   Schäfer S, 2015, LECT NOTES COMPUT SC, V9236, P359, DOI 10.1007/978-3-319-22102-1_24
   Serrano A, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P783, DOI 10.1145/3192366.3192389
   Serrano Alejandro, 2020, QUICK LOOK IMPREDICA
   Sterling Jonathan, 2019, ABS190208848 CORR
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   Vytiniotis D, 2006, ACM SIGPLAN NOTICES, V41, P251, DOI 10.1145/1160074.1159838
   Vytiniotis D, 2011, J FUNCT PROGRAM, V21, P333, DOI 10.1017/S0956796811000098
   Vytiniotis D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P295
   Wieczorek Pawel, 2018, P 7 ACM SIGPLAN INT, P266, DOI DOI 10.1145/3167091
NR 31
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 101
DI 10.1145/3408983
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700015
OA gold
DA 2024-07-18
ER

PT J
AU Polikarpova, N
   Stefan, D
   Yang, J
   Itzhaky, S
   Hance, T
   Solar-Lezama, A
AF Polikarpova, Nadia
   Stefan, Deian
   Yang, Jean
   Itzhaky, Shachar
   Hance, Travis
   Solar-Lezama, Armando
TI Liquid Information Flow Control
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE information flow control; liquid types; program synthesis
ID AUTHORIZATION; POLICIES
AB We present LIFTY, a domain-specific language for data-centric applications that manipulate sensitive data. A Urn programmer annotates the sources of sensitive data with declarative security policies, and the language statically and automatically verifies that the application handles the data according to the policies. Moreover, if verification fails, LIFTY suggests a provably correct repair, thereby easing the programmer burden of implementing policy enforcing code throughout the application.
   The main insight behind LIFTY is to encode information flow control using liquid types, an expressive yet decidable type system. Liquid types enable fully automatic checking of complex, data dependent policies, and power our repair mechanism via type-driven error localization and patch synthesis. Our experience using LIFTY to implement three case studies from the literature shows that (1) the LIFTY policy language is sufficiently expressive to specify many real-world policies, (2) the Urn type checker is able to verify secure programs and find leaks in insecure programs quickly, and (3) even if the programmer leaves out all policy enforcing code, the LIFTY repair engine is able to patch all leaks automatically within a reasonable time.
C1 [Polikarpova, Nadia; Stefan, Deian] Univ Calif San Diego, San Diego, CA 92103 USA.
   [Yang, Jean; Hance, Travis] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Itzhaky, Shachar] Technion, Haifa, Israel.
   [Solar-Lezama, Armando] MIT, Cambridge, MA 02139 USA.
C3 University of California System; University of California San Diego;
   Carnegie Mellon University; Technion Israel Institute of Technology;
   Massachusetts Institute of Technology (MIT)
RP Polikarpova, N (corresponding author), Univ Calif San Diego, San Diego, CA 92103 USA.
EM npolikarpova@eng.ucsd.edu; deian@cs.ucsd.edu; jyang2@cs.cmu.edu;
   shachari@cs.technion.ac.il; thance@cs.cmu.edu; asolar@csail.mit.edu
OI Solar Lezama, Armando/0000-0001-7604-8252
FU National Science Foundation [1911149, 1943623]; Cisco; Division of
   Computing and Communication Foundations; Direct For Computer & Info Scie
   & Enginr [1911149, 1943623] Funding Source: National Science Foundation
FX The authors would like to thank the anonymous reviewers and our
   shepherd, Nikhil Swamy, for their valuable feedback on earlier drafts of
   this paper. We are also grateful to Marco Vassena for suggesting how to
   simplify and strengthen the noninterference theorem. This work was
   supported by a gift from Cisco and by the National Science Foundation
   under Grants No. 1911149 and 1943623.
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Agrawal S, 2016, P IEEE CSFW, P239, DOI 10.1109/CSF.2016.24
   [Anonymous], 2013, NDSS
   Arden O., 2012, SHARING MOBILE CODE
   Austin T.H., 2013, PLAS
   Broberg N, 2017, J COMPUT SECUR, V25, P323, DOI 10.3233/JCS-15791
   Buiras P, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P289, DOI 10.1145/2784731.2784758
   Chen Juan, 2010, PLDI
   Chlipala A., 2010, OSDI
   Cimpanu Catalin., 2020, WALGR SAYS MOB APP L
   Cosman Benjamin, 2017, PACMPL 1 ICFP
   Crary K, 2005, J FUNCT PROGRAM, V15, P249, DOI 10.1017/S0956796804005441
   Devriese D., 2011, ACM SIGPLAN WORKSH T
   Dillig Isil, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P684, DOI 10.1007/978-3-642-39799-8_46
   Doctorow C., 2015, UNITED WEBSITE BREAC
   Fredrikson Matthew, 2012, CAV
   Ganapathy V, 2006, P IEEE S SECUR PRIV, P214, DOI 10.1109/SP.2006.34
   Giffin Daniel B, 2012, 10 USENIX S OPERATIN, P47
   Giffin DanielB., 2017, J COMPUT SECUR, V25
   Harris WR, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P284, DOI 10.1145/1866307.1866340
   Hojjat H, 2016, PROCEEDINGS OF THE 2016 16TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2016), P73, DOI 10.1109/FMCAD.2016.7886663
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Hunt Troy, 2020, HAVE BEEN PWNED CHEC
   Jia L., 2009, PLAS
   Jones S. Peyton, 2001, ENG THEORIES SOFTWAR, P47
   Kashmir Hill, 2017, FACEBOOK OUTS SEX WO
   Kneuss E, 2015, LECT NOTES COMPUT SC, V9207, P217, DOI 10.1007/978-3-319-21668-3_13
   Kneuss E, 2013, ACM SIGPLAN NOTICES, V48, P407, DOI [10.1145/2509136.2509555, 10.1145/2544173.2509555]
   Knowles K, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667051
   Kuncak V, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P316, DOI 10.1145/1806596.1806632
   Li P, 2005, ACM SIGPLAN NOTICES, V40, P158, DOI 10.1145/1047659.1040319
   Li P., 2006, IEEE WORKSHOP COMPUT, P16
   Liu J, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P321
   Loncaric Calvin, 2016, OOPSLA ACM
   LOURENCO L., 2014, Trustworthy Global Computing, P180, DOI DOI 10.1007/978-3-319-14128-2_11
   Lourenço L, 2015, ACM SIGPLAN NOTICES, V50, P317, DOI [10.1145/2775051.2676994, 10.1145/2676726.2676994]
   Manna Z., 1980, ACM Transactions on Programming Languages and Systems, V2, P90, DOI 10.1145/357084.357090
   Marlow Simon, 2010, Haskell 2010 language report
   Parker J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290388
   Polikarpova N, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408987
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Pottier F, 2002, ACM SIGPLAN NOTICES, V37, P319, DOI 10.1145/565816.503302
   Privacy Rights Clearinghouse, 2020, DAT BREACH
   Rajani V, 2020, J COMPUT SECUR, V28, P129, DOI 10.3233/JCS-191382
   Rondon PM, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1379022.1375602
   Russo A, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P13
   Russo A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P280, DOI 10.1145/2784731.2784756
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Seidel EL, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3138818
   Sirer EG, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P249
   Stefan D, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000241
   Stefan Deian, HASK S ACM SIGPLAN
   Stefan Deian, NORD C SEC IT SYST N
   Swamy N, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P266
   Swamy N, 2010, LECT NOTES COMPUT SC, V6012, P529, DOI 10.1007/978-3-642-11957-6_28
   Swamy Nikhil, 2009, ICFP
   Vassena M, 2018, J LOG ALGEBR METHODS, V95, P148, DOI 10.1016/j.jlamp.2017.12.003
   Vassena M, 2016, PROCEEDINGS OF THE 2016 ACM WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS'16), P15, DOI 10.1145/2993600.2993608
   Vazou N, 2013, LECT NOTES COMPUT SC, V7792, P209, DOI 10.1007/978-3-642-37036-6_13
   Vazou Niki, HASKELL S
   Vazou Niki, ICFP
   Voss Chelsea., 2016, COMMUNICATION
   Yang J, 2016, ACM SIGPLAN NOTICES, V51, P631, DOI [10.1145/2980983.2908098, 10.1145/2908080.2908098]
   Yang J, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P85
   Yang Jean., 2017, J COMEYS TWITTER SEC
   Yip A, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P291
   Zhang DF, 2015, ACM SIGPLAN NOTICES, V50, P12, DOI [10.1145/2813885.2738009, 10.1145/2737924.2738009]
   Zheng L, 2007, INT J INF SECUR, V6, P67, DOI 10.1007/s10207-007-0019-9
NR 68
TC 12
Z9 14
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 105
DI 10.1145/3408987
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700019
OA Green Published, gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Stroustrup, B
AF Stroustrup, Bjarne
TI Thriving in a Crowded and ChangingWorld: C++ 2006-2020
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE C++; programming language design and evolution; standardization; generic
   programming; resource management; concurrency and parallelism;
   simplification of language use
AB By 2006, C++ had been in widespread industrial use for 20 years. It contained parts that had survived unchanged since introduced into C in the early 1970s as well as features that were novel in the early 2000s. From 2006 to 2020, the C++ developer community grew from about 3 million to about 4.5 million. It was a period where new programming models emerged, hardware architectures evolved, new application domains gained massive importance, and quite a few well-financed and professionally marketed languages fought for dominance. How did C++ s an older language without serious commercial backing s manage to thrive in the face of all that?
   This paper focuses on the major changes to the ISO C++ standard for the 2011, 2014, 2017, and 2020 revisions. The standard library is about 3/4 of the C++20 standard, but this paper's primary focus is on language features and the programming techniques they support.
   The paper contains long lists of features documenting the growth of C++. Significant technical points are discussed and illustrated with short code fragments. In addition, it presents some failed proposals and the discussions that led to their failure. It offers a perspective on the bewildering flow of facts and features across the years. The emphasis is on the ideas, people, and processes that shaped the language.
   Themes include efforts to preserve the essence of C++ through evolutionary changes, to simplify its use, to improve support for generic programming, to better support compile-time programming, to extend support for concurrency and parallel programming, and to maintain stable support for decades' old code.
   The ISO C++ standard evolves through a consensus process. Inevitably, there is competition among proposals and clashes (usually polite ones) over direction, design philosophies, and principles. The committee is now larger and more active than ever, with as many as 250 people turning up to week-long meetings three times a year and many more taking part electronically. We try (not always successfully) to mitigate the effects of design by committee, bureaucratic paralysis, and excessive enthusiasm for a variety of language fashions.
   Specific language-technical topics include the memory model, concurrency and parallelism, compile-time computation, move-semantics, exceptions, lambda expressions, and modules. Designing a mechanism for specifying a template's requirements on its arguments that is sufficiently flexible and precise yet doesn't impose run-time costs turned out to be hard. The repeated attempts to design lconceptsz to do that have their roots back in the 1980s and touch upon many key design issues for C++ and for generic programming.
   The description is based on personal participation in the key events and design decisions, backed by the thousands of papers and hundreds of meeting minutes in the ISO C++ standards committee's archives.
C1 [Stroustrup, Bjarne] Morgan Stanley, New York, NY 10036 USA.
   [Stroustrup, Bjarne] Columbia Univ, New York, NY 10027 USA.
C3 Morgan Stanley; Columbia University
RP Stroustrup, B (corresponding author), Morgan Stanley, New York, NY 10036 USA.; Stroustrup, B (corresponding author), Columbia Univ, New York, NY 10027 USA.
EM Bjarne@Stroustrup.com
CR 1989s2020, C STAND COMM PAP WEB
   Abrahams David, 2010, JTC1SC2WG21 ISOIEC
   ADAS Wikipedia 2020, ADAS ADV DRIV ASS SY
   Adcock ames, 1990, REQUEST CONSIDERATIO
   Alexandrescu ndrei, 2004, JTC1SC2WG21 ISOIEC
   ames Reinders, 2007, INTEL THREADING BUIL
   [Anonymous], LNCS 7210
   [Anonymous], cpkg 2016s2020. vc pkg, a C++ package manager for Windows, Linux and MacOS (part of Microsoft's Visual Studio) (website)
   [Anonymous], Coverity 2002s2020
   [Anonymous], WANDBOX JAPANESE ONL
   [Anonymous], CMAKE 2000 2020 CMAK
   [Anonymous], 2019, JTS1SC2WG21 ISOIEC
   [Anonymous], 2007s2020. C++ Historical Sources Archive (website)
   [Anonymous], RC++ 2010s2020. RC++, a system for runtime -compiled C++: Alternatives (website)
   [Anonymous], 2017, LEARNING TEACHING MO
   [Anonymous], Build 2 2014s2020. Build2, an open source, cross -platform build toolchain for developing and packaging C and C++ code
   [Anonymous], 2019, JTC1SC2WG21 ISOIEC
   [Anonymous], Cevelop 2014s2020. Cevelop: An Eclipse -based IDE (website; initial release: 21 July 2014)
   [Anonymous], Macaulay2 2005s2020
   [Anonymous], 2018, JTC1SC2WG21 ISOIEC
   [Anonymous], 2016, JTC1SC2WG21 ISOIEC
   [Anonymous], CLANG TIDY 2007 2020
   [Anonymous], wxWidgets 1992s2020. wxWidgets, an open -source, cross -platform GUI library (website)
   [Anonymous], 2017, JTC1SC2WG21 ISOIEC
   [Anonymous], WebAssembly 20172020. WebAssembly (Wasm ), a portable binary code format primarily for executing in browsers (website)
   [Anonymous], QT PLATFORM GUI RELA
   [Anonymous], LLVM COLLECTION TOOL
   att Godbolt, 2016, COMP EXPL ONL INT EN
   Austern Matthew, 2001, JTC1SC2WG21 ISOIEC
   AUTOSAR, AUTomotive Open System ARchitecture
   Baker Lewis, 2019, JTC1SC2WG21 ISOIEC
   BARRON DW, 1963, COMPUT J, V6, P134, DOI 10.1093/comjnl/6.2.134
   Bastien F, 2018, JTC1SC2WG21 ISOIEC
   Batty M., 2010, JTC1SC2WG21 ISOIEC
   Batty M, 2013, ACM SIGPLAN NOTICES, V48, P235, DOI 10.1145/2480359.2429099
   Batty M, 2012, ACM SIGPLAN NOTICES, V47, P509, DOI 10.1145/2103621.2103717
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Becker ete, 2011, 148822011 ISOIEC
   Becker ete, 2004, JTC1SC2WG21 ISOIEC
   BECKER P, 2009, WORKING DRAFT STANDA
   Berne Joshua, 2018, JTC1SC2WG21 ISOIEC
   Berne Joshua, 2019, JTC1SC2WG21 ISOIEC
   Berne oshua, 2018, JTC1SC2WG21 ISOIEC
   Berne oshua, 2019, JTC1SC2WG21 ISOIEC
   Bessey A, 2010, COMMUN ACM, V53, P66, DOI 10.1145/1646353.1646374
   Bindels eter, 2018, JTC1SC2WG21 ISOIEC
   Boehm Hans, 2005, JTC1SC2WG21 ISOIEC
   Boehm Hans -J., 2008, JTC1SC2WG21 ISOIEC
   Botet icente, 2018, JTC1SC2WG21 ISOIEC
   Bourdev L, 2011, SCI COMPUT PROGRAM, V76, P243, DOI 10.1016/j.scico.2008.06.003
   Bourdev Lubomir, 2006, COMPUTER SCI ENG DEP
   Brown alter E., 2006, JTC1SC2WG21 ISOIEC
   Carter Casey, 2018, JTC1SC2WG21 ISOIEC
   Chochlik attis, 2017, JTC1SC2WG21 ISOIEC
   Chochlik Mattis, 2016, JTC1SC2WG21 ISOIEC
   Chochlik Mattis, 2014, JTC1SC2WG21 ISOIEC
   Chochlik Mattis, 2015, JTC1SC2WG21 ISOIEC
   Clang Team, 2014, CLANG 3 5 DOC MOD
   Clion Wikipedia 2020, JETBRAINS FORM SOFTW
   Clow Marshall, 2018, JTC1SC2WG21 ISOIEC
   Coe onathan, 2015, JTC1SC2WG21 ISOIEC
   CONWAY ME, 1963, COMMUN ACM, V6, P396, DOI 10.1145/366663.366704
   Crowl Lawrence, 2013, JTC1SC2WG21 ISOIEC
   Crowl Lawrence, 2006, JTC1SC2WG21 ISOIEC
   Crowl Lawrence, 2018, JTC1SC2WG21 ISOIEC
   Crowl Lawrence, 2009, JTC1SC2WG21 ISOIEC
   CUKIC I, 2018, FUNCTIONAL PROGRAMMI
   Czarnecki Krzysztof., 2000, GENERATIVE PROGRAMMI
   Dawes Beman, 2014, PROGRAMMING LANGUAGE
   Dawes Beman, 2006, JTC1SC2WG21 ISOIEC
   Dawes Beman, 2016, JTC1SC2WG21 ISOIEC
   Dawes Beman, 2018, JTC1SC2WG21 ISOIEC
   Dawes Beman G., 1998, PROPOSAL C LIB REPOS
   Dawes eman, 2015, 188222015 ISOIEC TS
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Dean J, 2008, COMMUN ACM, V51, P107, DOI 10.1145/1327452.1327492
   Dehnert C., 2000, LNCS, V1766, DOI [10.1007/3-540-39953-4_1, DOI 10.1007/3-540-39953-4_1]
   Dimov Peter, 2019, JTC1SC2WG21 ISOIEC
   Dimov Peter, 2003, JTC1SC2WG21 ISOIEC
   Dimov Peter, 2018, JTC1SC2WG21 ISOIEC
   Dionne Louis, 2016, JTC1SC2WG21 ISOIEC
   Dionne Louis, 2018, JTC1SC2WG21 ISOIEC
   Dionne Louis, 2017, JTC1SC2WG21 ISOIEC
   Dos Reis abriel, 2010, P 2010 ACM S APPL CO, DOI [10.1145/1774088.177453, DOI 10.1145/1774088.177453]
   Dos Reis abriel, 2009, P JOINT C 9 AS S COM
   Dos Reis abriel, 2007, JTC1SC2WG21 ISOIEC
   Dos Reis G, 2006, ACM SIGPLAN NOTICES, V41, P295, DOI 10.1145/1111320.1111064
   Dos Reis G, 2011, MATH COMPUT SCI, V5, P335, DOI 10.1007/s11786-011-0094-1
   Dos Reis Gabriel, 2005, JTC1SC2WG21 ISOIEC
   Dos Reis Gabriel, 2019, MODULES ARE READY
   Dos Reis Gabriel, 2014, JTC1SC2WG21 ISOIEC
   Dos Reis Gabriel, 2016, JTC1SC2WG21 ISOIEC
   Dos Reis Gabriel, 2009, JTC1SC2WG21 ISOIEC
   Dos Reis Gabriel, 2003, JTC1SC2WG21 ISOIEC
   Dos Reis Gabriel, 2009, IPR COMPILER NEUTRAL
   Dos Reis Gabriel, 2012, INTELLIGENT COMPUTER, DOI [10.1007/978-3-642-31374-5_20, DOI 10.1007/978-3-642-31374-5_20]
   Dos Reis Gabriel, 2018, WORKING DRAFT EXTENS
   Douglas Robert, 2019, JTC1SC2WG21 ISOIEC
   ECMA International, 2005, C CLI LANG SPEC
   EISENBUD D., 2001, COMPUTATIONS ALGEBRA, V8
   Ellis Margaret A., 1990, C ANNOTATED REFERENC
   erb Sutter, 2013, JTC1SC2WG21 ISOIEC
   erb Sutter, 2017, JTC1SC2WG21 ISOIEC
   etBrains, 2020, CLION CROSS PLATF ID
   Finkel Hal, 2016, JTC1SC2WG21 ISOIEC
   Fiselier Eric, 2019, JTC1SC2WG21 ISOIEC
   Gamma Erich, 1994, DESIGN PATTERNS ELEM, V1st
   Garcia J. Daniel, 2015, JTC1SC2WG21 ISOIEC
   Garcia J. Daniel, 2015, IMPROVING PERFORMANC
   Garcia J. Daniel, 2018, JTC1SC2WG21 ISOIEC
   Garcia R, 2007, J FUNCT PROGRAM, V17, P145, DOI 10.1017/S0956796806006198
   Gaunard Mathias, 2015, JTC1SC2WG21 ISOIEC
   Gibbs M, 2006, SOFTWARE PRACT EXPER, V36, P139, DOI 10.1002/spe.686
   Goodspeed, 2014, JTC1SC2WG21 ISOIEC
   Gottschling Peter, 2015, DISCOVERING MODERN C
   Gregor Doug, 2010, JTC1SC2WG21 ISOIEC
   Gregor Douglas, 2012, MODULES SLIDES
   Gregor Douglas, 2008, JTC1SC2WG21 ISOIEC
   Gregor Douglas, 2009, JTC1SC2WG21 ISOIEC
   Gregor Douglas, 2006, JTC1SC2WG21 ISOIEC
   Gregor Douglas, 2004, JTC1SC2WG21 ISOIEC
   Gregor ouglas, 2008, JTC1SC2WG21 ISOIEC
   Gregor ouglas, 2006, P 21 ANN ACM SIGPLAN
   Gregory Kate, 2015, STOP TEACHING C VIDE
   Gregory Kate, 2018, SIMPLICITY NOT JUST
   Gregory Kate, 2017, 10 CORE GUIDELINES Y
   Gurtovoy Aleksey, BOOST MPL LIB WEBSIT
   Gustafsson Niklas, 2012, JTC1SC2WG21 ISOIEC
   Hinnant Howard, 2020, JTC1SC2WG21 ISOIEC
   Hinnant Howard, 2019, JTC1SC2WG21 ISOIEC
   Hinnant Howard E., 2006, JTC1SC2WG21 ISOIEC
   Hinnant Howard E., 2008, JTC1SC2WG21 ISOIEC
   Hinnant Howard E., 2004, JTC1SC2WG21 IESOIEC
   Hinnant Howard E., 2018, JTC1SC2WG21 ISOIEC
   Hinnant Howard E., 2002, JTC1SC2WG21 ISOIEC
   Hoberock ared, 2018, JTC1SC2WG21 ISOIEC
   Hoberock ared, 2019, JTC1SC2WG21 ISOIEC
   Hoberock Jared, 2019, JTC1SC2WG21 ISOIEC
   Hollman David S., 2019, JTC1SC2WG21 ISOIEC
   homas Koppe. 2016a, 2016, JTC1SC2WG21 ISOIEC
   Honermann om, 2017, JTC1SC2WG21 ISOIEC
   Howes ee, 2018, JC1SC2WG21 ISOIEC
   jarne Stroustru, 2010, NEW VAL TERM
   jarne Stroustrup, 1985, AT T C TRANSL REL NO
   jarne Stroustrup, 2018, JTC1SC2WG21 ISOIEC
   jarne Stroustrup, 2013, C PROGRAMMING LANGUA, V4
   jarne Stroustrup, 2004, WHY CANT I DEF CONST
   jarne Stroustrup, 2015, JTC1SC2WG21 ISOIEC
   jarne Stroustrup. 2008b, 2008, JTC1SC2WG21 ISOIEC
   jarne Stroustrup. 2009c, 2009, JTC1SC2WG21 ISOIEC
   jarne Stroustrup. 2018c, 2018, JTC1SC2WG21 ISOIEC
   Jarvi aakko, 2002, BOOST
   Jarvi aakko, 2007, JTC1SC2WG21 ISOIEC
   Järvi J, 2003, SOFTWARE PRACT EXPER, V33, P259, DOI 10.1002/spe.504
   Jarvi Jaakko, 2002, JTC1SC2WG21 ISOIEC
   Jonathan C, 2018, PROC VLDB ENDOW, V11, P1702, DOI 10.14778/3236187.3236216
   Josuttis Nicolai, 2019, JTC1SC2WG21 ISOIEC
   Kaiser H, 2009, INT CONF PARA PROC, P394, DOI 10.1109/ICPPW.2009.14
   Kapur D., 1981, P 1981 C FUNCT PROGR, P59, DOI [10.1145/800223.806763, DOI 10.1145/800223.806763]
   Keane rich, 2017, JTC1SC2WG21 ISOIEC
   Khlebnikov Rostislav, 2019, JTC1SC2WG21 ISOIEC
   Klarer Robert, 2007, EXTENSION PROGRAMMIN
   Koenig Andrew, 1991, JTC1SC2WG21 ISOIEC
   Koenig Andrew R., 1998, 148821998 ISOIEC
   Koenig ndrew, 1989, P USENIX L C WORK C
   Koenig ndrew, 1991, JTC1SC2WG21 ISOIEC
   Kohlhoff Christopher, 2005, BOOST ASIO WEBSITE
   Kohlhoff Christopher, 2013, JTC1SC2WG21 ISOIEC
   Kohlhoff Christopher, 2006, JTC1SC2WG21 ISOIEC
   Kohlhoff Christopher M., 2018, ASIO C LIB WEBSITE
   Koppe Thomas, 2017, JTC1SC2WG21 ISOIEC
   Koppe Thomas, 2016, JTC1SC2WG21 ISOIEC
   Kowalke Oliver, 2015, JTC1SC2WG21 ISOIEC
   Kowalke Oliver, 2013, JTC1SC2WG21 ISOIEC
   Lakos ohn, 2013, JTC1SC2WG21 ISOIEC
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lawrence Crowl, 2015, JTC1SC2WG21 ISOIEC L
   Lelbach Bryce Adelstein, 2019, JTC1SC2WG21 ISOIEC
   lle Voutilainen, 2016, JTC1SC2WG21 ISOIEC
   Lopes Bruno Cardoso, 2019, JTC1SC2WG21 ISOIEC
   Maddock ohn, 2002, JTC1SC2WG21 ISOIEC
   Maurer, 2019, JTC1SC2WG21 ISOIEC
   Maurer, 2012, JTC1SC2WG21 ISOIEC
   Maurer, 2002, JTC1SC2WG21 ISOIEC
   Maurer Michael, 2007, JTC1SC2WG21 ISOIEC
   McIntosh Michael Wong, 2008, JTC1SC2WG21 ISOIEC
   McKenney E., 2010, JTC1SC2WG21 ISOIEC
   Meredith Alisdair, 2007, JTC1SC2WG21 ISOIEC
   Meredith Alisdair, 2012, JTC1SC2WG21 ISOIEC
   Meredith lisdair, 2017, JTC1SC2WG21 ISOIEC
   Meyer ertrand, 1994, OBJECT ORIENTED SOFT
   Meyers S., 2014, EFFECTIVE MODERN C 4
   Microsoft, 2020, VIS STUD BEST IN CLA
   Mihaylov Mihail, 2019, JCT1SC2WG21 ISOIEC
   Mihaylov Mihail, 2018, JTC1SC2WG21 ISOIEC
   Miller William M., 2010, JTC1SC2WG21 ISOIEC
   Minkovsky Lev, 2019, JTC1SC2WG21 ISOIEC
   Mobileye, 2020, ADAS ADV DRIV ASS SY
   Murzin Sergei, 2019, JTC1SC2WG21 ISOIEC
   Murzin Sergei, 2020, JTC1SC2WG21 ISOIEC
   MUSSER DR, 1987, P 1987 ANN ACM SIGAD, P216
   Naumann Axel, 2012, INTRO CLING C INTERP
   Naumann xel, 2010, CREATING CLING INTER
   Naur P., 1966, BIT Computer Science and Numerical Mathematics, V6, P310, DOI DOI 10.1007/BF01966091
   Nicholas D., 1978, LIT BIBLIOMETRICS
   Niebler Casey, 2017, JTC1SC2WG21 ISOIEC
   Niebler Eric, 2018, JTC1SC2WG21 ISOIEC
   Niebler Eric, 2014, JTC1SC2WG21 ISOIEC
   Nishanov. 2019b, 2019, JTC1SC2WG21 ISOIEC
   Nishanov Gor, 2018, JTC1SC2WG21 ISOIEC
   Nishanov Gor, 2017, 222772017 ISOIEC TS
   Nishanov Gor, 2019, JTC1SC2WG21 ISOIEC
   NVIDIA, 2020, ADV DRIV ASS SYST AD
   Obiltschnig Gunter, 2005, POCO C LIB WEBSITE
   Objective C++ Wikipedia 2020, OBJ C LANG VAR ACC G
   ockheed Martin Corporation, 2005, JOINT STRIK FIGHT AI
   ohn Lakos, 2018, JTC1SC2WG21 ISOIEC
   ohn Lakos, 2019, JTC1SC2WG21 ISOIEC
   Ottosen horsten, 2007, JTC1SC2WG21 ISOIEC
   Ottosen horsten, 2005, JTC1SC2WG21 ISOIEC
   penCV, 2020, OPENCV WEBSITE
   penCV Wikipedia, 2020, OPENCV OP SOURC COMP
   Pirkelbauer P, 2010, SCI COMPUT PROGRAM, V75, P638, DOI 10.1016/j.scico.2009.06.002
   Powell Gary, 2004, JTC1SC2WG21 ISOIEC
   Psaropoulos G, 2017, PROC VLDB ENDOW, V11, P230, DOI 10.14778/3149193.3149202
   Pugh William, 2004, 133 JSR
   Ramananandro T, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P67, DOI 10.1145/1926385.1926395
   Ramananandro Tahina, 2012, P 39 ANN ACM SIGPLAN, DOI [10.1145/2103656.2103718, DOI 10.1145/2103656.2103718]
   Renwick ames, 2019, P 28 INT C COMP CONS, DOI [10.1145/3302516.3307346, DOI 10.1145/3302516.3307346]
   Reverdy Vincent, 2012, JTC1SC2WG21 ISOIEC
   Revzin arry, 2018, JTC1SC2WG21 ISOIEC
   Revzin Barry, 2018, JTC1SC2WG21 ISOIEC
   Revzin Barry, 2017, JTC1SC2WG21 ISOIEC
   Revzin Barry, 2019, JTC1SC2WG21 ISOIEC
   Riedle akob, 2017, JTC1SC2WG21 ISOIEC
   Riegel Torvald, 2015, JTC1SC2WG21 ISOIEC
   Ritchie Dennis M., 1990, J C LANGUAGE TRANSLA, V2, p81S86
   Rivera, 2019, JTC1SC2WG21 ISOIEC
   Rivera Rene, 2019, JTC1SC2WG21 ISOIEC
   Romer eoff, 2019, JTC1SC2WG21 ISOIEC
   Romer Geoff, 2018, JTC1SC2WG21 ISOIEC
   Rosen Hyman, 2019, JTC1SC2WG21 ISOIEC
   Sankel avid, 2019, JTC1SC2WG21 ISOIEC
   Sankel David, 2018, WORK DRAFT C EXTENSI
   Shen im, 2016, JTC1SC2WG21 ISOIEC
   Sidwell athan, 2019, JTC1SC2WG21 ISOIEC
   Sidwell Nathan, 2019, JTC1SC2WG21 ISOIEC
   Sidwell Nathan, 2018, JTC1SC2WG21 ISOIEC
   Siek eremy, 2006, LNCS, DOI [10.1007/11785477_19, DOI 10.1007/11785477_19]
   Siek Jeremy., Boost Concept Check Library
   Silva Cleiton Santoia, 2014, JTC1SC2WG21 ISOIEC
   Smith ichard, 2019, JTC1SC2WG21 ISOIEC
   Smith ichard, 2018, JTC1SC2WG21 ISOIEC
   Smith Richard, 2017, 148822017 ISOIEC
   Smith Richard, 2015, JTC1SC2WG21 ISOIEC
   Smith Richard, 2018, JTC1SC2WG21 ISOIEC
   Smith Richard, 2017, JTC1SC2WG21 ISOIEC
   Smith Richard, 2013, JTC1SC2WG21 ISOIEC
   Smith Richard, 1834, WORKING DRAFT STANDA
   Smolsky Oleg, 2014, JTC1SC2WG21 ISOIEC
   Snyder eff, 2013, JTC1SC2WG21 ISOIEC
   Solodkyy uriy, 2014, PATTERN MATCHING C
   Solodkyy uriy, 2012, P ACM INT C OBJ OR P
   Solodkyy uriy, 2013, P 2013 COMP PUBL C S, DOI [10.1145/2 508075.250809, DOI 10.1145/2508075.250809]
   Spertus ike, 2015, JTC1SC2WG21 ISOIEC
   Spertus ike, 2018, JTC1SC2WG21 ISOIEC
   Spertus Mike, 2018, JTC1SC2WG21 ISOIEC
   Stepanov lex, 2009, ELEMENTS PROGRAMMING
   Stepanov lexander, 1986, SCHEME HIGHER ORDER
   Stephenson A.G., 1999, Mars climate orbiter mishap investigation board phase 1 report
   Stroustrup B., 2005, Proceedings of the First International Workshop on Library-Centric Software Design (LCSD 05), P44
   Stroustrup B., 1994, The Design and Evolution of C++
   Stroustrup B, 2012, COMPUTER, V45, P47, DOI 10.1109/MC.2011.353
   Stroustrup B, 2010, COMMUN ACM, V53, P40, DOI 10.1145/1629175.1629192
   Stroustrup Bjarne, TOUR C
   Stroustrup Bjarne, 1990, MY C STANDARDS COMMI
   Stroustrup Bjarne, 2017, JTC1SC2WG21 ISOIEC
   Stroustrup Bjarne, 2018, JTC1SC2WG21 ISOIEC
   Stroustrup Bjarne, 2014, PROGRAMMINGS PRINCIP
   Stroustrup Bjarne, 2009, OVERLOAD J, V92
   Stroustrup Bjarne, 2015, JTC1SC2WG21 ISOIEC
   Stroustrup Bjarne, 2005, JTC1SC2WG21 ISOIEC
   Stroustrup Bjarne, 2019, JTC1SC2WG21 ISOIEC
   Stroustrup Bjarne, 1982, SIGPLAN NOTICES, V17, DOI [10.1145/947886.947893, DOI 10.1145/947886.947893]
   Stroustrup Bjarne, 2014, JTC1SC2WG21 ISOIEC
   Stroustrup Bjarne, 2009, DR DOBBS J
   Stroustrup Bjarne, 2016, JTC1SC2WG21 ISOIEC
   Stroustrup Bjarne, TOUR C
   Stroustrup Bjarne, 2003, JTC1SC2WG21 ISOIEC
   Stroustrup Bjarne., 2012, A concept design for the STL
   Stroustrup Bjarne, 2015, BRIEF INTRO C S MODE
   Stroustrup jarne, 2003, JTC1SC2WG21 ISOIEC
   Stroustrup jarne, 2007, P 3 ACM SIGPLAN C HI, DOI [10.1145/1238844.123884, DOI 10.1145/1238844.123884]
   Stroustrup jarne, 1998, OVERLOAD J, V25, P20
   Stroustrup jarne, 2015, JTC1SC2WG21 ISOIEC
   Stroustrup jarne, 2014, JTC1SC2WG21 ISOIEC
   Stroustrup jarne, 1997, C PROGRAMMING LANGUA
   Stroustrup jarne, 1991, C PROGRAMMING LANGUA, V2
   Stroustrup jarne, C PROGRAMMING LANGUA
   Stroustrup jarne, 1992, SIGPLAN NOTICES, V27, DOI [10.1145/130981.130989, DOI 10.1145/130981.130989]
   Stroustrup jarne, 1993, 2 ACM SIGPLAN C HIST, DOI [10.1145 /154766.155375, DOI 10.1145/154766.155375]
   Stroustrup jarne, C TRANSLATOR RELEASE
   Studio Wikipedia 2020, MICR VIS STUD
   Sutter erb, 2019, JTC1SC2WG21 ISOIEC
   Sutter erb, 2002, JTC1SC2WG21 ISOIEC
   Sutter H, 2019, JTC1SC22WG21 PAPERS
   Sutter Herb, 2015, JTC1SC2WG21 ISOIEC
   Sutter Herb, 2012, JTC1SC2WG21 ISOIEC
   Sutter Herb, 2018, JTC1SC2WG21 ISOIEC
   Sutter Herb, 2014, JTC1SC2WG21 ISOIEC
   Sutter Herb, 2003, JTC1SC2WG21 ISOIEC
   Sutter Herb, 2013, AAA STYLE ALMOST ALW
   Sutton Andrew, 2018, JTC1SC2WG21 ISOIEC
   Sutton Andrew, 2014, JTC1SC2WG21 ISOIEC
   Sutton Andrew, 2017, JTC1SC2WG21 ISOIEC
   Sutton ndrew, 2011, SOFTWARE LANGUAGE EN, DOI [10.1007/978-3-642-28830-2_6, DOI 10.1007/978-3-642-28830-2_6]
   Sutton ndrew, 2018, JTC1SC2WG21 ISOIEC
   Sutton ndrew, 2019, JTC1SC2WG21 ISOIEC
   tefanus du Toit, 2014, 148822014 ISOIEC
   The Khronos Group, 2014 2020 C SIGN SOU
   The Stellar Group, HPX HIGH PERF PAR WE
   Tomazos Andrew, 2014, JTC1SC2WG21 ISOIEC
   Tomazos Andrew, 2015, JTC1SC2WG21 ISOIEC
   Tong Hubert, 2016, JTC1SC2WG21 ISOIEC
   Touton ames, 2016, JTC1SC2WG21 ISOIEC
   Touton ames, 2015, JTC1SC2WG21 ISOIEC
   Trychta Clay, 2016, JTC1SC2WG21 ISOIEC
   TSO Wikipedia 2020, MEM ORD
   utosar, 2020, AUTOSAR STAND SOFTW
   van Winkel Christiaan, 2017, JTC1SC2WG21 ISOIEC
   Vandevoorde aveed, 2012, JTC1SC2WG21 ISOIEC
   Vandevoorde aveed, 2009, JTC1SC2WG21 ISOIEC
   Vandevoorde Daveed, 2017, JTC1SC2WG21 ISOIEC
   Vandevoorde Daveed, 2007, JTC1SC2WG21 ISOIEC
   Vandevoorde David, 2002, C++ Templates: The Complete Guide, Portable Documents
   Vandevoorde David, 2018, C TEMPLATES COMPLETE
   VELDHUIZEN T.L., 2003, C TEMPLATES ARE TURI
   Voutilainen ille, 2019, JTC1SC2WG21 ISOIEC
   Voutilainen ille, 2016, WG21 M JACKS FLOR FE
   Voutilainen Ville, 2018, JTC1SC2WG21 ISOIEC
   Voutilainen Ville, 2016, JTC1SC2WG21 ISOIEC
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wakely onathan, 2018, JTC1SC2WG21 ISOIEC
   Wasserrab Daniel, 2006, P 21 ANN ACM SIGPLAN, DOI [10.1145/1167473, DOI 10.1145/1167473]
   WG14, 2007, JTC1SC2WG21 ISOIEC W
   Willcock eremiah, 2006, JTC1SC2WG21 ISOIEC
   Williams A., 2012, C CONCURRENCY ACTION
   Williams Anthony, 2018, C CONCURRENCY ACTION
   Yang Gogul Balakrishnan, 2012, COMPILER CONSTRUCTIO
   Yasskin effrey, 2014, JTC1SC2WG21 ISOIEC
   Zandifar Nathan, 2014, 27 INT WORKSH LANG C, DOI [10.1007/978-3-319, DOI 10.1007/978-3-319]
   Zverovich ictor, 2019, JTC1SC2WG21 ISOIEC
   Zverovich Victor, 2019, JTC1SC2WG21 ISOIEC
NR 354
TC 4
Z9 4
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 70
DI 10.1145/3386320
PG 168
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900003
OA gold
DA 2024-07-18
ER

PT J
AU Syme, D
AF Syme, Don
TI The Early History of F#
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Programming Languages; Functional Programming; Object-oriented
   Programming; Pattern Matching; Asynchronous Programming; Type Providers;
   Units of Measure; Dimensions; F#
ID OBJECTS
AB This paper describes the genesis and early history of the F# programming language. I start with the origins of strongly-typed functional programming (FP) in the 1970s, 80s and 90s. During the same period, Microsoft was founded and grew to dominate the software industry. In 1997, as a response to Java, Microsoft initiated internal projects which eventually became the.NET programming framework and the C# language. From 1997 the worlds of academic functional programming and industry combined at Microsoft Research, Cambridge. The researchers engaged with the company through Project 7, the initial effort to bring multiple languages to.NET, leading to the initiation of.NET Generics in 1998 and F# in 2002. F# was one of several responses by advocates of strongly-typed functional programming to the lobject-oriented tidal wavez of the mid-1990s. The development of the core features of F# 1.0 happened from 2004-2007, and I describe the decision-making process that led to the lproductizationz of F# by Microsoft in 2007-10 and the release of F# 2.0. The origins of F#'s characteristic features are covered: object programming, quotations, statically resolved type parameters, active patterns, computation expressions, async, units-of-measure and type providers. I describe key developments in F# since 2010, including F# 3.0-4.5, and its evolution as an open source, cross-platform language with multiple delivery channels. I conclude by examining some uses of F# and the influence F# has had on other languages so far.
C1 [Syme, Don] Microsoft, London, England.
C3 Microsoft
RP Syme, D (corresponding author), Microsoft, London, England.
EM donsyme@fastmail.com
CR Abadi Martin, 1996, THEORY OBJECTS, DOI [10.1007/978-1-4419-8598-9, DOI 10.1007/978-1-4419-8598-9]
   Abraham Isaac., 2020, SAFE STACK
   Allen Jonathan, 2010, MICROSOFTS EXPT SOFT
   Alsh David, 2019, UPDATE GO GENERICS 2
   Alves-Foss J., 1999, FORMAL SYNTAX SEMANT, DOI [10.1007/3-540-48737-9, DOI 10.1007/3-540-48737-9]
   [Anonymous], 2003, PATTERNS SKELETONS P
   Apple, 2014, SWIFT INTR
   Assange Julian, 2000, FORUM MESSAGE
   Benton N, 1999, ACM SIGPLAN NOTICES, V34, P126, DOI 10.1145/317765.317791
   Benton Nick., 2004, P 6 ACM SIGPLAN INT, P215
   Berry Dave, 2001, FORUM MESSAGE
   Bjornson Joel, 2011, Implementation and Application of Functional Languages. 22nd International Symposium, IFL 2010. Revised Selected Papers, P203, DOI 10.1007/978-3-642-24276-2_13
   Blasucci Rachel., 2016, HIST F
   Bloch J., 2001, EFFECTIVE JAVA PROGR
   Bollacker K., 2008, P 2008 ACM SIGMOD IN, P1247, DOI 10.1145/1376616.1376746
   Bolognese Luca., 2008, INTRO MICROSOFT F
   Borquez Arturo., 2001, FORUM MESSAGE
   Boulton Clint., 2003, IS F MAJOR MINOR CON
   Bracha G, 1998, ACM SIGPLAN NOTICES, V33, P183, DOI 10.1145/286942.286957
   Burmako Eugene, 2013, P 4 WORKSHOP SCALA M, DOI [10.1145/2489837.2489840, DOI 10.1145/2489837.2489840, 10.1145/ 2489837.2489840]
   Carter Phillip, 2017, WHY YOU SHOULD USE F
   Carter Phillip., 2020, WHAT IS F
   Cieslak Krzysztof, 2019, IONIDEDA VISUAL STUD
   Clarke Gavin., 2010, MICROSOFT CUTS LOOSE
   Cousins Simon., 2016, DOES LANGUAGE YOU US
   Cox Russ., 2019, GENERIC DILEMMA
   de Icaza Miguel, 2016, MONOHISTORY
   Desire Athow, 2014, PENT FDIV PROC BUG S
   Duffy J., 2008, Concurrent Programming on Windows, V1st
   Dyer Wes., 2009, BRIEF INTRO REACTIVE
   Dzik Jan, 2013, P 7 WORKSH PROGR LAN, DOI 10.1145/2525528.2525531
   Emir B, 2007, LECT NOTES COMPUT SC, V4609, P273
   Erwig M, 1997, LECT NOTES COMPUT SC, V1268, P21
   Fabrice le Fessant, 2001, FOR MESS
   Foley Mary Jo, 2014, MICROSOFT CLOSE MICR
   Foley Mary Jo, 2011, MICROSOFT DROPS DRYA
   Forkmann Steffen, 2019, F MAKE DSL BUILD TAS
   Forkmann Steffen, 2019, PAKET DEPENDENCY MAN
   FSSF Contributors, 2020, F TEST
   FSSF Contributors, 2019, F LANG SUGG
   FSSF Contributors, 2019, F LANGUAGE DESIGN RF
   Furuse Jun, 2002, GCAML OCAML EXTENSIO
   Garcia-Caro Alfonso, 2018, FABLE COMPILER EMITS
   Garrigue Jacques, 2001, APLAS, P329
   Gordon M, 2000, FOUNDAT COMPUT, P169
   Granicz Adam, 2011, INTELLIFACTORY YOUR
   Granicz Adam, 2019, FUNCTIONAL REACTIVE, P137, DOI [10.1007/978-3-030-28346-9_5, DOI 10.1007/978-3-030-28346-9_5]
   Granicz Adam, 2020, WEBSHARPER
   Haller P, 2009, THEOR COMPUT SCI, V410, P202, DOI 10.1016/j.tcs.2008.09.019
   Hansen Michael, 2013, FUNCTIONAL PROGRAMMI
   Harrop Jon., 2008, F SCIENTISTS
   Haskell Contributors, 2019, LIST COMPR
   Haskell Contributors, 2017, WHY ISNT GHC AV NET
   Haskell Contributors, 2020, HASK IDO NOT
   Hinze Ralf, 2019, IFIP WORKING GROUP 2
   Hoare Graydon, 2017, WHAT NEXT
   Hoban Luke, 2014, FACILITATING OPEN CO
   Hoban Luke, 2017, 1 TYPESCRIPT DEMO
   Hudak Paul., 2007, Proceedings of the third ACM SIGPLAN conference on History of programming languages, P12, DOI DOI 10.1145/1238844.1238856
   Isabelle archives, 1994, ADD INF ALS
   Jones S.P., 1997, HASK WORKSH, P1
   Jones SP, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P61
   Kennedy A, 2001, ACM SIGPLAN NOTICES, V36, P1, DOI 10.1145/381694.378797
   Kennedy A., 2009, Central European Functional Programming School, P268, DOI [DOI 10.1007/978-3-642-17685-2_8, DOI 10.1007/978-3-642-17685-2_8(SPRINGER]
   Kennedy Andrew, 1995, THESIS U CAMBRIDGE U
   LAUNCHBURY J, 1993, P ACM SIGPLAN WORKSH, P46
   Leavens Gary T, 1995, ACM SIGPLAN NOTICES, V30
   Leroy Xavier, 2014, HIST OCAML
   Leroy Xavier, 2001, FORUM MESSAGE
   MacQueen David, 2015, HIST STANDARD ML
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   McKinlay Ross, 2013, CHOOSE YOUR OWN ADVE
   Microsoft, 2019, LANGUAGE INTEGRATED
   Milner R., 1990, The Definition of Standard ML
   Motroc Gabriela, PROJECT VALHALLA ENT
   Paterson Ross, 2020, ARROWS GEN INTERFACE
   Peake Alex, 2009, P 2009 VID WORKSH CO, DOI [10.1145/1668113.1668119, DOI 10.1145/1668113.1668119]
   Petricek Tomas, 2014, Practical Aspects of Declarative Languages. 16th International Symposium, PADL 2014. Proceedings: LNCS 8324, P33, DOI 10.1007/978-3-319-04132-2_3
   Petricek T, 2016, ACM SIGPLAN NOTICES, V51, P477, DOI [10.1145/2980983.2908115, 10.1145/2908080.2908115]
   Petricek T, 2011, LECT NOTES COMPUT SC, V6539, P205, DOI 10.1007/978-3-642-18378-2_17
   Petricek Tomas., 2008, CLIENT SIDE SCRIPTIN
   Petricek Tomas, 2010, P 9 INT S MEM MAN IS, P53, DOI [10.1145/1806651.1806662, DOI 10.1145/1806651.1806662]
   Rehner S.A., 2001, PRIMERS ELONGATION F
   Restivo S, 2004, INFORM SOC, V20, P67, DOI 10.1080/01972240490274702
   Riley Ryan, 2019, F USER GROUPS MEETUP
   Riley Ryan, 2019, COMMUNITY F HEROES
   Sangiorgi Davide, 2001, -calculus: A Theory of Mobile Processes
   Seger CJH, 2005, IEEE T COMPUT AID D, V24, P1381, DOI 10.1109/TCAD.2005.850814
   Somasegar S., 2007, PRIVATE EMAIL, V23, P34
   Somasegar S., 2007, F DA FUNCTIONAL PROG
   Stroustrup Bjarne, 2013, The C++ programming language
   Syme D., 2001, Electronic Notes in Theoretical Computer Science, V59, DOI 10.1016/S1571-0661(05)80453-0
   Syme D., 1995, Higher Order Logic Theorem Proving and Its Applications. 8th International Workshop. Proceedings, P324
   Syme D., 1994, Higher Order Logic Theorem Proving and Its Applications. 6th International Workshop, HUG '93 Proceedings, P43
   Syme D, 1999, LECT NOTES COMPUT SC, V1690, P203
   Syme D, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P29
   Syme D, 2011, LECT NOTES COMPUT SC, V6539, P175, DOI 10.1007/978-3-642-18378-2_15
   Syme D, 2006, ELECTRON NOTES THEOR, V148, P3, DOI 10.1016/j.entcs.2005.11.038
   Syme Don, 2006, F 1 CLASS EVENTS SIM
   Syme Don., 2006, ML
   Syme Don, 2012, MORE C NET GENERICS
   Syme Don, 2006, F CHANNEL 9
   Syme Don., F SEPTEMBER 2008 CTP
   Syme Don, 2006, F MEETS LINQ GREAT T
   Syme Don, 1999, THESIS U CAMBRIDGE U, DOI [10.17863/CAM.16633, DOI 10.17863/CAM.16633]
   Syme Don, 2001, FORUM MESSAGE
   Syme Don, 2018, F CODE LOVE
   Syme Don., 2010, ANNOUNCING F COMPILE
   Syme Don, 2020, F LANGUAGE SPECIFICA
   Syme Don, 2005, WELCOME DONS F BLOG
   Syme Don, PROGRAMMING LANGUAGE
   Syme Don, 2011, ARCHEOLOGICAL SEMIOT
   Syme Don., 2007, INTRO ASYNCHRONOUS W
   Syme Don, 2007, F 19 ALMOST READY
   Syme Don, 2006, LIGHTWEIGHT SYNTAX O
   Syme Don, 2006, DRAFT CHAPTER 2 LEXP
   Syme Don, 2019, F COMPILER SERVICES
   Syme Don, 2002, F DCOMBINING SPEED S
   Syme Don, 2006, UPCOMING EXPT FEATUR
   Syme Don, F HELPS SHOW WERE NO
   Tony Hoare, 2011, NULL REFERENCES BILL
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wadler P., 1995, Advanced Functional Programming. First International Spring School on Advanced Functional Programming Techniques. Tutorial Text, P24
   Wadler P, 1998, ACM SIGPLAN NOTICES, V33, P23, DOI 10.1145/286385.286387
   Wadler P., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P307, DOI 10.1145/41625.41653
   Warren Matt, 2018, GENERICS WERE ADDED
   Wecker Dave, 2019, LIQUI LANGUAGE INTEG
   Wikipedia, 2020, HIST MICROSOFT
   Wikipedia, 2019, MORT ELVIS EINSTEIN
   Wikipedia, 2019, HARLEQUIN
   Wikipedia, 2000, VISUAL FOXPRO
   Wikipedia, 2019, TOOLBOOK
   Wikipedia, 2019, MLDONKEY
   Wikipedia, 2020, HINDLEY MILNER TYPE
   Wikipedia, 2019, HYPERCARD
   Wikipedia, 2014, AXUM PROGRAMMING LAN
   WinWorld, 2016, MICR FORTRAN 5 1
   Wlaschin S., 2018, Domain modeling made functional: tackle software complexity with domain- driven design and F
   Wlaschin Scott, 2019, F FUN PROFIT
   Wlaschin Scott, F DAY
NR 140
TC 3
Z9 3
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
DI 10.1145/3386325
PG 58
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900008
OA gold
DA 2024-07-18
ER

PT J
AU Jung, R
   Lepigre, R
   Parthasarathy, G
   Rapoport, M
   Timany, A
   Dreyer, D
   Jacobs, B
AF Jung, Ralf
   Lepigre, Rodolphe
   Parthasarathy, Gaurav
   Rapoport, Marianna
   Timany, Amin
   Dreyer, Derek
   Jacobs, Bart
TI The Future is Ours: Prophecy Variables in Separation Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Prophecy variables; separation logic; logical atomicity;
   linearizability; Iris
ID LINEARIZABILITY
AB Early in the development of Hoare logic, Owicki and Gries introduced auxiliary variables as a way of encoding information about the history of a program's execution that is useful for verifying its correctness. Over a decade later, Abadi and Lamport observed that it is sometimes also necessary to know in advance what a program will do in the future. To address this need, they proposed prophecy variables, originally as a proof technique for refinement mappings between state machines. However, despite the fact that prophecy variables are a clearly useful reasoning mechanism, there is (surprisingly) almost no work that attempts to integrate them into Hoare logic. In this paper, we present the first account of prophecy variables in a Hoare-style program logic that is flexible enough to verify logical atomicity (a relative of linearizability) for classic examples from the concurrency literature like RDCSS and the Herlihy-Wing queue. Our account is formalized in the Iris framework for separation logic in Coq. It makes essential use of ownership to encode the exclusive right to resolve a prophecy, which in turn lets us enforce soundness of prophecies with a very simple set of proof rules.
C1 [Jung, Ralf; Lepigre, Rodolphe; Parthasarathy, Gaurav; Rapoport, Marianna; Dreyer, Derek] MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
   [Parthasarathy, Gaurav] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
   [Rapoport, Marianna] Univ Waterloo, Waterloo, ON, Canada.
   [Timany, Amin; Jacobs, Bart] Katholieke Univ Leuven, Imec DistriNet, Leuven, Belgium.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; University of
   Waterloo; KU Leuven
RP Jung, R (corresponding author), MPI SWS, Saarland Informat Campus, Saarbrucken, Germany.
EM jung@mpi-sws.org; lepigre@mpi-sws.org; gaurav.parthasarathy@inf.ethz.ch;
   mrapoport@uwaterloo.ca; amin.timany@cs.kuleuven.be; dreyer@mpi-sws.org;
   bart.jacobs@cs.kuleuven.be
RI Jacobs, Bart/B-1271-2014
OI Jacobs, Bart/0000-0002-3605-249X; Timany, Amin/0000-0002-2237-851X;
   Jung, Ralf/0000-0001-7669-6348
FU European Research Council (ERC) under the European Union's Horizon 2020
   Framework Programme [683289]; European Union [731453]; H2020 Societal
   Challenges Programme [731453] Funding Source: H2020 Societal Challenges
   Programme
FX This research was supported in part by a European Research Council (ERC)
   Consolidator Grant for the project lRustBeltz, funded under the European
   Union's Horizon 2020 Framework Programme (grant agreement no. 683289),
   and in part by the European Union's Horizon 2020 research and innovation
   programme under grant agreement No 731453 (VESSEDIA). Amin Timany is a
   postdoctoral fellow of the Flemish research fund (FWO).
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Abadi M., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P165, DOI 10.1109/LICS.1988.5115
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Cook B, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P399, DOI 10.1145/1926385.1926431
   de Vilhena PE, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371101
   Delbianco German Andres, 2017, LIPICS, V74, DOI DOI 10.4230/LIPICS
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Fu M, 2010, LECT NOTES COMPUT SC, V6269, P388, DOI 10.1007/978-3-642-15375-4_27
   Garcia-Perez Alvaro, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P912, DOI 10.1007/978-3-319-89884-1_32
   Harris TL, 2002, LECT NOTES COMPUT SC, V2508, P265
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jacobs B, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P271, DOI 10.1145/1926385.1926417
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Jung Ralf, 2019, FUTURE IS OURS PROPH, DOI [10.5281/zenodo.3570660, DOI 10.5281/ZENODO.3570660]
   Krebbers R, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236772
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Lamport Leslie, 2017, CORR
   Ley-Wild R, 2013, ACM SIGPLAN NOTICES, V48, P561, DOI 10.1145/2480359.2429134
   Liang HJ, 2013, ACM SIGPLAN NOTICES, V48, P459, DOI 10.1145/2499370.2462189
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Penninckx W, 2019, PROCEEDINGS OF THE 21ST WORKSHOP ON FORMAL TECHNIQUES FOR JAVA-LIKE PROGRAMS (FTFJP 2019), DOI 10.1145/3340672.3341118
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sergey I, 2015, LECT NOTES COMPUT SC, V9032, P333, DOI 10.1007/978-3-662-46669-8_14
   Sezgin Ali, 2010, VSTTE
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P343, DOI 10.1145/2480359.2429111
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   Vafeiadis Viktor, 2008, THESIS U CAMBRIDGE C
   Zhang Zipeng, 2012, TAMC, DOI [10.1007/978-3-642-29952-0_12, DOI 10.1007/978-3-642-29952-0_12]
NR 35
TC 35
Z9 36
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 45
DI 10.1145/3371113
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400046
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Lazarek, L
   King, A
   Sundar, S
   Findler, RB
   Dimoulas, C
AF Lazarek, Lukas
   King, Alexis
   Sundar, Samanvitha
   Findler, Robert Bruce
   Dimoulas, Christos
TI Does Blame Shifting Work?
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE higher-order contracts; blame; programming languages design evaluation
ID CONTRACTS
AB Contract systems, especially of the higher-order flavor, go hand in hand with blame. The pragmatic purpose of blame is to narrow down the code that a programmer needs to examine to locate the bug when the contract system discovers a contract violation. Or so the literature on higher-order contracts claims.
   In reality, however, there is neither empirical nor theoretical evidence that connects blame with the location of bugs. The reputation of blame as a tool for weeding out bugs rests on anecdotes about how programmers use contracts to shift blame and their attention from one part of a program to another until they discover the source of the problem.
   This paper aims to fill the apparent gap and shed light to the relation between blame and bugs. To that end, we introduce an empirical methodology for investigating whether, for a given contract system, it is possible to translate blame information to the location of bugs in a systematic manner. Our methodology is inspired by how programmers attempt to increase the precision of the contracts of a blamed component in order to shift blame to another component, which becomes the next candidate for containing the bug. In particular, we construct a framework that enables us to ask for a contract system whether (i) the process of blame shifting causes blame to eventually settle to the component that contains the bug; and (ii) every shift moves blame "closer" to the faulty component.
   Our methodology offers a rigorous means for evaluating the pragmatics of contract systems, and we employ it to analyze Racket's contract system. Along the way, we uncover subtle points about the pragmatic meaning of contracts and blame in Racket: (i) the expressiveness of Racket's off-the-shelf contract language is not sufficient to narrow down the blamed portion of the code to the faulty component in all cases; and (ii) contracts that trigger state changes (even unexpectedly, perhaps in the runtime system's data structures or caches) interfere with program evaluation in subtle ways and thus blame shifting can lead programmers on a detour when searching for a bug. These points highlight how evaluations such as ours suggest fixes to language design.
C1 [Lazarek, Lukas; King, Alexis; Sundar, Samanvitha; Findler, Robert Bruce; Dimoulas, Christos] Northwestern Univ, Evanston, IL 60208 USA.
C3 Northwestern University
RP Lazarek, L (corresponding author), Northwestern Univ, Evanston, IL 60208 USA.
EM lukas.lazarek@eecs.northwestern.edu; lexi.lambda@gmail.com;
   samanvithasundar2020@u.northwestern.edu; robby@cs.northwestern.edu;
   chrdimo@northwestern.edu
RI Dimoulas, Christos/P-7100-2018
OI Dimoulas, Christos/0000-0002-9338-7034
FU NSF
FX We would like to thank the POPL reviewers for their insightful feedback.
   Many thanks to Matthias Felleisen, Ben Greenman, Shu-Hung You, and
   Spencer Florence for their comments on earlier drafts of this work.
   Thanks to Quest for providing the resources to run our experiment.
   Thanks to the AEC reviewers for their comments on our artifact. Thanks
   to the NSF for their support of this work.
CR Acar UA, 2013, J COMPUT SECUR, V21, P919, DOI 10.3233/JCS-130487
   Agrawal H, 1995, SIXTH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P143, DOI 10.1109/ISSRE.1995.497652
   Agrawal Hiralal, 1991, THESIS PURDUE U SERC
   Ahmed Amal, 2009, P 1 WORKSH SCRIPT PR, p1S13
   Bastiaan J Heeren, 2005, TOP QUALITY TYPE ERR
   Blume M, 2006, J FUNCT PROGRAM, V16, P375, DOI 10.1017/S0956796806005971
   Cheney J, 2011, 2011 IEEE 24TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P281, DOI 10.1109/CSF.2011.26
   Cheney James, 2007, INT S DAT PROGR LANG
   Chitil Olaf, 2003, S IMPL APPL FUNCT LA, p1S19
   Coles Henry, MUTATORS OVERVIEW
   Degen M, 2010, J LOGIC ALGEBR PROGR, V79, P515, DOI 10.1016/j.jlap.2010.07.006
   Degen Markus, 2008, NORD WORKSH PROGR TH
   Degen Markus, 2012, P ACM SIGPLAN WORKSH
   Degen Markus, 2009, 4 ARB PROGR LUB GERM
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   DeMillo Richard A., 1988, P 2 WORKSH SOFTW TES
   Dimoulas C, 2012, LECT NOTES COMPUT SC, V7211, P214, DOI 10.1007/978-3-642-28869-2_11
   Dimoulas C, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2039346.2039348
   Dimoulas C, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P215, DOI 10.1145/1926385.1926410
   Dimoulas Christos, 2016, ACM INT C FUNCT PROG
   Dimoulas Christos, 2013, ACM C OBJ OR PROGR S
   Disney Tim, 2011, ACM INT C FUNCT PROG
   Feltey D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276503
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Findler Robert Bruce, 2007, REP PAP 16 INT WORKS
   Findler Robert Bruce, 2004, TR200402 U CHIC COMP
   Findler Robert Bruce, 2006, INT S FUNCTIONAL LOG
   Garcia Ronald, 2013, ACM INT C FUNCT PROG
   Gopinath R, 2014, PROC INT SYMP SOFTW, P189, DOI 10.1109/ISSRE.2014.40
   Greenberg M, 2015, ACM SIGPLAN NOTICES, V50, P181, DOI [10.1145/2775051.2676967, 10.1145/2676726.2676967]
   Greenberg M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P353, DOI 10.1145/1706299.1706341
   Greenman B, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000217
   Heidegger Phillip, 2012, ACM S PRINC PROGR LA
   Hinze R, 2006, LECT NOTES COMPUT SC, V3945, P208
   Igarashi A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110282
   Jia Limin, 2016, ACM S PRINC PROGR LA
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   Jones JA, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P467, DOI 10.1109/ICSE.2002.1007991
   Just R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P654, DOI 10.1145/2635868.2635929
   Keil Matthias, 2015, ACM INT C FUNCT PROG
   Le Duc, 2014, P 2014 INT S SOFTW T
   Lipton R.J., 1971, FAULT DIAGNOSIS COMP
   Meyer B., 1988, Object-Oriented Software Construction
   Meyer B., 1992, Eiffel: The Language
   Meyer B., 1991, ADV OBJECT ORIENTED
   Moore S, 2016, ACM SIGPLAN NOTICES, V51, P214, DOI 10.1145/3022671.2984021
   Moore Scott, 2014, P 11 USENIX C OP SYS
   Perera Roly, 2012, ACM INT C FUNCT PROG
   Scholliers C, 2015, SCI COMPUT PROGRAM, V98, P360, DOI 10.1016/j.scico.2013.09.005
   Shapiro EY., 1983, Algorithmic Program Debugging
   Shinnar Avraham., 2011, Safe and effective contracts
   Siek J, 2015, ACM SIGPLAN NOTICES, V50, P425, DOI [10.1145/2737924.2737968, 10.1145/2813885.2737968]
   Siek Jeremy, 2009, EUR S PROGR SPRING N, p17S31
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Siek Jeremy G., EUR S PROGR LANG SYS
   Strickland T. Stephen, 2009, SIGPLAN Notices, V44, P27, DOI 10.1145/1837513.1640140
   Strickland T. Stephen, INT WORKSH IMPL FUNC, P158
   Strickland T.Stephen., 2012, Proc. Conf. Object-Oriented Programming Systems, Languages, P943
   Swords Cameron, 2015, ACM INT C FUNCT PROG
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Takikawa A, 2012, ACM SIGPLAN NOTICES, V47, P793, DOI 10.1145/2398857.2384674
   Thung Ferdian, 2012, P 9 IEEE WORK C MIN, p74S77
   Vitousek MM, 2017, ACM SIGPLAN NOTICES, V52, P762, DOI 10.1145/3093333.3009849
   Vitousek MM, 2015, ACM SIGPLAN NOTICES, V50, P45, DOI 10.1145/2661088.2661101
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Waye L, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110280
   Williams J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276504
NR 67
TC 1
Z9 1
U1 0
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 65
DI 10.1145/3371133
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400066
OA gold
DA 2024-07-18
ER

PT J
AU Lew, AK
   Cusumano-Towner, MF
   Sherman, B
   Carbin, M
   Mansinghka, VK
AF Lew, Alexander K.
   Cusumano-Towner, Marco F.
   Sherman, Benjamin
   Carbin, Michael
   Mansinghka, Vikash K.
TI Trace Types and Denotational Semantics for Sound Programmable Inference
   in Probabilistic Languages
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Probabilistic programming; type systems; programmable inference
AB Modern probabilistic programming languages aim to formalize and automate key aspects of probabilistic modeling arid inference. Many languages provide constructs for programmable inference that enable developers to improve inference speed and accuracy by tailoring an algorithm for use with a particular model or dataset. Unfortunately, it is easy to use these constructs to write unsound programs that appear to run correctly but produce incorrect results. To address this problem, we present a denotational semantics for programmable inference in higher-order probabilistic programming languages, along with a type system that ensures that well-typed inference programs are sound by construction. A central insight is that the type of a probabilistic expression can track the space of its possible execution traces, not just the type of value that it returns. as these traces are often the objects that inference algorithms manipulate. We use our semantics and type system to establish soundness properties of custom inference programs that use constructs for variational, sequential Monte Carlo, importance sampling, and Markov chain Monte Carlo inference.
C1 [Lew, Alexander K.; Cusumano-Towner, Marco F.; Sherman, Benjamin; Carbin, Michael] MIT, Comp Sci & Artificial Intelligence Lab, Cambridge, MA 02139 USA.
   [Mansinghka, Vikash K.] MIT, Dept Brain & Cognit Sci, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT); Massachusetts Institute of
   Technology (MIT)
RP Lew, AK (corresponding author), MIT, Comp Sci & Artificial Intelligence Lab, Cambridge, MA 02139 USA.
EM alexlew@mit.edu; marcoct@mit.edu; sherman@csail.mit.edu;
   mcarbin@mit.edu; vkm@mit.edu
FU Aphorism Foundation; Intel Probabilistic Computing Center
FX This material is based upon work supported by philanthropic gifts from
   the Siegel Family Foundation and from the Aphorism Foundation, and also
   by a research contract from the Intel Probabilistic Computing Center. We
   are grateful to the referees for their thoughtful and constructive
   input, and also to Hengchu Zhang, Jonathan Rees, Cameron Freer, Eric
   Atkinson, Feras Saad, and Ben Zinberg for useful discussions and
   suggestions.
CR Andrieu C, 2003, MACH LEARN, V50, P5, DOI 10.1023/A:1020281327116
   [Anonymous], 2016, ARXIV161005735
   [Anonymous], 2013, ARXIV13063277
   [Anonymous], 2016, ARXIV160301882
   [Anonymous], 2017, ADV NEURAL INFORM PR
   [Anonymous], 2018, ARXIV180501863
   Bhat S, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P545
   Bingham E, 2019, J MACH LEARN RES, V20
   Bonawitz Keith A., 2008, THESIS MIT
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   Castellan S, 2019, LECT NOTES COMPUT SC, V11423, P322, DOI 10.1007/978-3-030-17184-1_12
   Chang JT, 1997, STAT NEERL, V51, P287, DOI 10.1111/1467-9574.00056
   Chatterjee S, 2018, ANN APPL PROBAB, V28, P1099, DOI 10.1214/17-AAP1326
   Cortes C., 2010, ADV NEURAL INFORM PR
   Cusumano-Towner M, 2018, MAPL'18: PROCEEDINGS OF THE 2ND ACM SIGPLAN INTERNATIONAL WORKSHOP ON MACHINE LEARNING AND PROGRAMMING LANGUAGES, P52, DOI 10.1145/3211346.3211350
   Cusumano-Towner MF, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P221, DOI 10.1145/3314221.3314642
   Diaconis P, 2009, B AM MATH SOC, V46, P179
   Foster Adam, 2019, ARXIV190305480
   Freer Cameron E., 2010, WORKSH M CARL METH M
   Fujii S, 2016, LECT NOTES COMPUT SC, V9634, P513, DOI 10.1007/978-3-662-49630-5_30
   Ge H, 2018, PR MACH LEARN RES, V84
   Gelman A., 2013, BAYESIAN DATA ANAL, Vthird, DOI DOI 10.1201/B16018
   Goodman ND., 2008, UAI, P220
   Green PJ, 1995, BIOMETRIKA, V82, P711, DOI 10.1093/biomet/82.4.711
   Harik Georges, 2010, ARXIV10060991
   Heunen C, 2017, IEEE S LOG
   Heunen Chris, 2018, WORKSH PROB PROGR SE
   Huang D, 2017, ACM SIGPLAN NOTICES, V52, P111, DOI [10.1145/3140587.3062375, 10.1145/3062341.3062375]
   Katsumata S, 2014, ACM SIGPLAN NOTICES, V49, P633, DOI 10.1145/2535838.2535846
   Lee Wonyeol, 2019, ARXIV190708827
   Liu JS, 1998, J AM STAT ASSOC, V93, P1032, DOI 10.2307/2669847
   Mansinghka VK, 2018, ACM SIGPLAN NOTICES, V53, P603, DOI [10.1145/3192366.3192409, 10.1145/3296979.3192409]
   Mansinghka Vikash K., 2014, Venture: A Higher-Order Probabilistic Programming Platform with Programmable Inference
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Narayanan Praveen., 2019, Ph. D. Dissertation
   Roberts DA, 2019, PR MACH LEARN RES, V89, P634
   Russell S., 2016, Artificial intelligence a modern approach
   Saad FA, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290350
   Sato T, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290351
   Scibior A., 2017, P ACM PROGRAMMING LA, V2, P60
   Scibior A, 2015, ACM SIGPLAN NOTICES, V50, P165, DOI 10.1145/2804302.2804317
   Scibior Adam, 2018, PROC ACM PROGRAM LAN, DOI DOI 10.1145/3236778
   Scibior Adam, 2019, STRONGLY TYPED TRACI
   Staton S, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P525, DOI 10.1145/2933575.2935313
   Thrun S., 2005, PROBABILISTIC ROBOTI
   Tran Dustin, 2017, INT C LEARN REPR ICL
   Wingate D., 2011, P 14 INT C ART INT S, P770
   Wingate David, 2013, Automated variational inference in probabilistic programming
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
   Zhang C, 2019, IEEE T PATTERN ANAL, V41, P2008, DOI 10.1109/TPAMI.2018.2889774
   Zhou Y, 2019, PR MACH LEARN RES, V89, P148
NR 51
TC 11
Z9 13
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 19
DI 10.1145/3371087
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400020
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Bastian, T
   Kell, S
   Nardelli, FZ
AF Bastian, Theophile
   Kell, Stephen
   Nardelli, Francesco Zappa
TI Reliable and Fast DWARF-Based Stack Unwinding
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE debugging; stack unwinding; DWARF
AB Debug information, usually encoded in the DWARF format, is a hidden and obscure component of our computing infrastructure. Debug information is obviously used by debuggers, but it also plays a key role in program analysis tools, and, most surprisingly, it can be relied upon by the runtime of high-level programming languages. For instance the C++ runtime leverages DWARF stack unwind tables to implement exceptions! Alas, generating debug information adds significant burden to compiler implementations, and the debug information itself can be pervaded by subtle bugs, making the whole infrastructure unreliable. Additionally, interpreting the debug tables is a time-consuming task and, for some applications as sampling profilers, it turns out to be a performance bottleneck.
   In this paper we focus on the DWARF. eh_frame table, that enables stack unwinding in absence of frame-pointers. We will describe two techniques to perform validation and synthesis of the DWARF stack unwinding tables, and their implementation for the x86_64 architecture. The validation tool has proven effective for compiler and inline assembly testing, while the synthesis tool can generate DWARF unwind tables for arbitrary binaries lacking debug information. Additionally, we report on a technique to precompile unwind tables into native x86 64 code, which we have implemented and integrated into libunwind, resulting in 11x-25x DWARF-based unwind speedups.
C1 [Bastian, Theophile] ENS, Paris, France.
   [Kell, Stephen] Univ Kent, Canterbury, Kent, England.
   [Nardelli, Francesco Zappa] INRIA, Le Chesnay Rocquencourt, France.
C3 Universite PSL; Ecole Normale Superieure (ENS); University of Kent;
   Inria
RP Bastian, T (corresponding author), ENS, Paris, France.
FU ONR [503353]; Google, Faculty Research Award
FX The authors would like to thank the reviewers for their valuable
   feedback, John Regehr for suggestions at an early stage of the project,
   and Nhat Minh Le for debugging a nasty interaction between CReduce and
   gdb. This project has received funding from ONR, award 503353, and
   Google, Faculty Research Award, 2018.
CR Baker J, 2009, CONCURR COMP-PRACT E, V21, P1572, DOI 10.1002/cpe.1391
   Bendersky E., 2019, PYELFTOOLS
   Brumley David, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P463, DOI 10.1007/978-3-642-22110-1_37
   Cifuentes Cristina., 1994, Reverse Compilation Techniques
   Corbet Jonathan, 2017, ORCS ARE COMING ORCS ARE COMING
   DWARF, 2017, DWARF DEB INF FORM S
   He JX, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P1667, DOI 10.1145/3243734.3243866
   Henderson Fergus., 2002, P 3 INT S MEMORY MAN, P150, DOI [DOI 10.1145/512429.512449, 10.1145/773039.512449]
   Kell Stephen, 2015, P 2015 OOPSLA COMP O, P224
   Oakley J., 2011, WOOT, P91
   Regehr J, 2012, ACM SIGPLAN NOTICES, V47, P335, DOI 10.1145/2345156.2254104
   Siebert Fridtjof, 2001, P 10 INT C COMP CONS P 10 INT C COMP CONS
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zhang Yanmin, 2008, HACKBENCH
NR 14
TC 3
Z9 3
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 146
DI 10.1145/3360572
PG 24
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500031
OA Green Published, gold, Green Accepted
DA 2024-07-18
ER

PT J
AU Goel, A
   Vitek, J
AF Goel, Aviral
   Vitek, Jan
TI On the Design , Implementation, and Use of Laziness in R
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE R language; delayed or lazy evaluation
AB The R programming language has been lazy for over twenty-five years. This paper presents a review of the design and implementation of call-by-need in R, and a data-driven study of how generations of programmers have put laziness to use in their code. We analyze 16,707 packages and observe the creation of 270.9 B promises. Our data suggests that there is little supporting evidence to assert that programmers use laziness to avoid unnecessary computation or to operate over infinite data structures. For the most part R code appears to have been written without reliance on, and in many cases even knowledge of, delayed argument evaluation. The only significant exception is a small number of packages which leverage call-by-need for meta-programming.
C1 [Goel, Aviral; Vitek, Jan] Northeastern Univ, Boston, MA 02115 USA.
   [Vitek, Jan] Czech Tech Univ, Prague, Czech Republic.
C3 Northeastern University; Czech Technical University Prague
RP Goel, A (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
RI Vitek, Jan/J-9051-2014
OI Goel, Aviral/0000-0002-0814-5015
FU Office of Naval Research (ONR) [503353]; European Research Council under
   the European Union [695412]; NSF [1518844, 1544542, 1617892]; Czech
   Ministry of Education, Youth and Sports [CZ.02.1.010.00.015_0030000421];
   Division of Computing and Communication Foundations; Direct For Computer
   & Info Scie & Enginr [1617892] Funding Source: National Science
   Foundation; European Research Council (ERC) [695412] Funding Source:
   European Research Council (ERC)
FX We thank the reviewers for constructive comments that helped us improve
   the presentation. Early prototypes of our analysis were implemented by
   Konrad Siek and Jan Noha, we thank them for their contribution. We would
   also like to thank Ben Chung, Artem Pelenitsyn, Filip Krikava, Tomas
   Kalibera, Luke Tierney, Stepan Sindelar, Alex Bertram, and Hadley
   Wickham for their comments and encouragement. This work received funding
   from the Office of Naval Research (ONR) award 503353, the European
   Research Council under the European Union's Horizon 2020 research and
   innovation programme (grant agreement 695412), the NSF (awards 1518844,
   1544542, and 1617892), and the Czech Ministry of Education, Youth and
   Sports (grant agreement CZ.02.1.010.00.015_0030000421).
CR Augustsson L., 1993, Journal of Functional Programming, V3, P77, DOI 10.1017/S0956796800000617
   BACKUS JW, 1963, COMMUN ACM, V6, P1, DOI 10.1145/366193.366201
   Becker R. A, 1988, NEW S LANGUAGE
   Bodin M, 2018, DLS'18: PROCEEDINGS OF THE 14TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES, P13, DOI 10.1145/3276945.3276946
   Flückiger O, 2019, PROCEEDINGS OF THE 15TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES (DLS '19), P55, DOI 10.1145/3359619.3359744
   Gentleman RC, 2004, GENOME BIOL, V5, DOI 10.1186/gb-2004-5-10-r80
   Hadley W., 2017, Tidyverse: easily install and load the 'tidyverse'. R package version 1.2.1
   HUDAK P, 1989, COMPUT SURV, V21, P359, DOI 10.1145/72551.72554
   Hudak P., 2007, HOPL 3, DOI [10.1145/1238844.1238856, DOI 10.1145/1238844.1238856]
   HUGHES J, 1989, COMPUT J, V32, P98, DOI 10.1093/comjnl/32.2.98
   Ihaka R., 1996, J COMPUTATIONAL GRAP, V5, P299, DOI [DOI 10.1080/10618600.1996.10474713, 10.2307/1390807, DOI 10.2307/1390807]
   Kalibera Toms., C VIRTUAL EXECUTION, DOI DOI 10.1145/2576195.2576205
   Krikava F, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P232, DOI 10.1145/3213846.3213863
   Ligges Uwe, 2017, USER C
   Morandat F, 2012, LECT NOTES COMPUT SC, V7313, P104, DOI 10.1007/978-3-642-31057-7_6
   Mühleisen H, 2018, J STAT SOFTW, V87, P1, DOI 10.18637/jss.v087.i04
   O'Neil ST, 2015, R J, V7, P118
   Okasaki C., 1995, Journal of Functional Programming, V5, P583, DOI 10.1017/S0956796800001489
   Pitman Kent M., 1980, LISP C, DOI [10.1145/800087.802804, DOI 10.1145/800087.802804]
   Smith David, 2011, R US C 2011
   Tierney Luke., 2019, BYTE CODE COMPILER R
   TURNER DA, 1979, SOFTWARE PRACT EXPER, V9, P31, DOI 10.1002/spe.4380090105
   TURNER DA, 1985, LECT NOTES COMPUT SC, V201, P1
   Wand M., 1998, LISP and Symbolic Computation, V10, P189, DOI 10.1023/A:1007720632734
   Wickham H, 2020, dplyr: a grammar of data manipulation
   Wickham H., 2016, GGPLOT2 ELEGANT GRAP, DOI [10.1007/978-3-319-24277-4, DOI 10.1007/978-3-319-24277-4]
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 27
TC 4
Z9 5
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 153
DI 10.1145/3360579
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500038
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Zhang, Z
   You, W
   Tao, GH
   Wei, GN
   Kwon, Y
   Zhang, XY
AF Zhang, Zhuo
   You, Wei
   Tao, Guanhong
   Wei, Guannan
   Kwon, Yonghwi
   Zhang, Xiangyu
TI BDA: Practical Dependence Analysis for Binary Executables by Unbiased
   Whole-Program Path Sampling and Per-Path Abstract Interpretation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Path Sampling; Abstract Interpretation; Binary Analysis; Data Dependence
ID INFORMATION-FLOW; TRANSFORMATIONS
AB Binary program dependence analysis determines dependence between instructions and hence is important for many applications that have to deal with executables without any symbol information. A key challenge is to identify if multiple memory read/write instructions access the same memory location. The state-of-the-art solution is the value set analysis (VSA) that uses abstract interpretation to determine the set of addresses that are possibly accessed by memory instructions. However, VSA is conservative and hence leads to a large number of bogus dependences and then substantial false positives in downstream analyses such as malware behavior analysis. Furthermore, existing public VSA implementations have difficulty scaling to complex binaries. In this paper, we propose a new binary dependence analysis called BDA enabled by a randomized abstract interpretation technique. It features a novel whole program path sampling algorithm that is not biased by path length, and a per-path abstract interpretation avoiding precision loss caused by merging paths in traditional analyses. It also provides probabilistic guarantees. Our evaluation on SPECINT2000 programs shows that it can handle complex binaries such as gcc whereas VSA implementations from the-state-of-art platforms have difficulty producing results for many SPEC binaries. In addition, the dependences reported by BDA are 75 and 6 times smaller than Alto, a scalable binary dependence analysis tool, and VSA, respectively, with only 0.19% of true dependences observed during dynamic execution missed (by BDA). Applying BDA to call graph generation and malware analysis shows that BDA substantially supersedes the commercial tool IDA in recovering indirect call targets and outperforms a state-of-the-art malware analysis tool Cuckoo by disclosing 3 times more hidden payloads.
C1 [Zhang, Zhuo; Tao, Guanhong; Wei, Guannan; Zhang, Xiangyu] Purdue Univ, W Lafayette, IN 47907 USA.
   [You, Wei] Renmin Univ China, Beijing, Peoples R China.
   [Kwon, Yonghwi] Univ Virginia, Charlottesville, VA 22903 USA.
C3 Purdue University System; Purdue University; Renmin University of China;
   University of Virginia
RP You, W (corresponding author), Renmin Univ China, Beijing, Peoples R China.
EM zhan3299@purdue.edu; youwei@ruc.edu.cn; taog@purdue.edu;
   guannanwei@purdue.edu; yongkwon@virginia.edu; xyzhang@cs.purdue.edu
RI Zhang, Zhuo/IUQ-3370-2023; Zhang, Xiangyu/H-9255-2013
OI Zhang, Zhuo/0000-0002-6515-0021; Zhang, Xiangyu/0000-0003-0876-6783;
   Wei, Guannan/0000-0002-3150-2033
FU DARPA [FA8650-15-C-7562]; NSF [1748764, 1901242, 1910300, 1850392]; ONR
   [N000141410468, N000141712947]; Sandia National Lab [1701331]
FX The authors would like to thank the anonymous reviewers for their
   constructive comments. Also, the authors would like to express their
   thanks for Le Yu and Yapeng Ye for proofreading and Yu Shi for her help
   in illustration. Purdue authors were supported in part by DARPA
   FA8650-15-C-7562, NSF 1748764, 1901242 and 1910300, ONR N000141410468
   and N000141712947, and Sandia National Lab under award 1701331. UVA
   authors were supported in part by NSF 1850392. Any opinions, findings,
   and conclusions in this paper are those of the authors only and do not
   necessarily reflect the views of the sponsors.
CR Quach A, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P869
   [Anonymous], CodeSurfer
   [Anonymous], angr
   ATA, SPEC2000
   Balakrishnan Gogul, 2004, INT C COMP CONSTR, p5S23
   Ball T, 1996, PROCEEDINGS OF THE 29TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE - MICRO-29, P46, DOI 10.1109/MICRO.1996.566449
   Bell J, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P770, DOI 10.1145/2786805.2786823
   BERGERETTI JF, 1985, ACM T PROGR LANG SYS, V7, P37, DOI 10.1145/2363.2366
   Borges M, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P866, DOI 10.1145/2786805.2786832
   Brumley David, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P463, DOI 10.1007/978-3-642-22110-1_37
   Caballero J, 2007, CCS'07: PROCEEDINGS OF THE 14TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P317
   Cai Y, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P810, DOI 10.1145/2950290.2950310
   Chilimbi TM, 2004, ACM SIGPLAN NOTICES, V39, P156, DOI 10.1145/1037187.1024412
   Chua ZL, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P99
   Clause J., 2007, P 2007 INT S SOFTW T, DOI [10.1145/1273463.1273490, DOI 10.1145/1273463.1273490]
   Cozzi E, 2018, P IEEE S SECUR PRIV, P161, DOI 10.1109/SP.2018.00054
   Das M, 2002, ACM SIGPLAN NOTICES, V37, P57, DOI 10.1145/543552.512538
   De Sutter B, 2000, PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON PARALLEL AND DISTRIBUTED PROCESSING TECHNIQUES AND APPLICATIONS, VOLS I-V, P1013
   Debray S., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P12, DOI 10.1145/268946.268948
   DEUTSCH A, 1994, SIGPLAN NOTICES, V29, P230, DOI 10.1145/773473.178263
   Dillig I, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P270, DOI 10.1145/1375581.1375615
   Ding SHH, 2019, P IEEE S SECUR PRIV, P472, DOI 10.1109/SP.2019.00003
   Donaldson AF, 2009, INT CONF QUANT EVAL, P289, DOI 10.1109/QEST.2009.21
   EMAMI M, 1994, SIGPLAN NOTICES, V29, P242, DOI 10.1145/773473.178264
   Ferles Kostas, 2017, P 2017 11 JOINT M FD
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Filieri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P341, DOI 10.1145/1985793.1985840
   GALLAGHER KB, 1991, IEEE T SOFTWARE ENG, V17, P751, DOI 10.1109/32.83912
   Geldenhuys Jaco, 2012, P 2012 INT S SOFTWAR, P166, DOI DOI 10.1145/2338965.2336773
   Gulwani S, 2005, ACM SIGPLAN NOTICES, V40, P324, DOI 10.1145/1047659.1040332
   Gulwani S, 2004, ACM SIGPLAN NOTICES, V39, P342, DOI 10.1145/982962.964030
   Gulwani S, 2003, ACM SIGPLAN NOTICES, V38, P74, DOI 10.1145/640128.604138
   Guo WB, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1787
   Hex -Rays, IDA
   Hirzel M, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1216374.1216379
   Kahlon V, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P249, DOI 10.1145/1375581.1375613
   Kolbitsch C, 2010, P IEEE S SECUR PRIV, P29, DOI 10.1109/SP.2010.10
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Lee JongHyup, 2011, NDSS
   Lhoták O, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1926385.1926389
   Li YK, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P627, DOI 10.1145/3106237.3106295
   Liang DL, 1999, LECT NOTES COMPUT SC, V1687, P199, DOI 10.1145/318774.318943
   Lin Zhiqiang., 2008, Network and Distributed Systems Security Symposium (NDSS)
   Lin Zhiqiang., 2010, Proceedings of the 11th Annual Information Security Symposium, P1
   Loyall J. P., 1993, Proceedings. Conference on Software Maintenance 1993. CSM-93 (Cat. No.93CH3360-5), P282, DOI 10.1109/ICSM.1993.366934
   Lumbroso Jermie, 2013, ARXIV13041916
   Miller K, 2019, PROC INT CONF SOFTW, P1187, DOI 10.1109/ICSE.2019.00121
   Muth Robert, 1998, ALTO LINK TIME OPTIM
   Myers A. C., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P228, DOI 10.1145/292540.292561
   Newsome J., 2005, Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software
   Olmos K, 2005, LECT NOTES COMPUT SC, V3443, P204, DOI 10.1007/978-3-540-31985-6_14
   Palepu Vijay Krishna, 2013, 2013 28 IEEE ACM INT
   Payer Mathias, 2015, LNCS, P144, DOI DOI 10.1007/978-3-319-20550-28
   Peng F, 2014, PROCEEDINGS OF THE 23RD USENIX SECURITY SYMPOSIUM, P829
   Rawat S, 2017, 24TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2017), DOI 10.14722/ndss.2017.23404
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sæbjornsen A, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P117
   Shin ECR, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P611
   Slowinska Asia., 2011, NDSS
   Song D, 2008, LECT NOTES COMPUT SC, V5352, P1, DOI 10.1007/978-3-540-89862-7_1
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Theiling H, 2000, SEVENTH INTERNATIONAL CONFERENCE ON REAL-TIME COMPUTING SYSTEMS AND APPLICATIONS, PROCEEDINGS, P23, DOI 10.1109/RTCSA.2000.896367
   Thiessen R, 2017, ACM SIGPLAN NOTICES, V52, P263, DOI [10.1145/3140587.3062359, 10.1145/3062341.3062359]
   Toronto N, 2015, LECT NOTES COMPUT SC, V9032, P53, DOI 10.1007/978-3-662-46669-8_3
   VirusTotal, VIRUSTOTAL
   Wang S, 2017, FEAST'17: PROCEEDINGS OF THE 2017 WORKSHOP ON FORMING AN ECOSYSTEM AROUND SOFTWARE TRANSFORMATION, P43, DOI 10.1145/3141235.3141244
   Xu G., 2008, ISSTA'08, P225, DOI DOI 10.1145/1390630.1390658
   Xu XJ, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P363, DOI 10.1145/3133956.3134018
   Xu ZG, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P607, DOI 10.1145/2950290.2950343
   Yang J., 2002, ACM Trans. on Embedded Computing Systems, V1, P79
   Yin H, 2007, CCS'07: PROCEEDINGS OF THE 14TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P116
   You Wei, 2020, P 41 IEEE S SEC PRIV
   Zeng Junyuan., 2013, Proceedings of the 2013 ACM SIGSAC Conference on Computer Communications Security, CCS '13, P487
   Zhang Zhuo, BDA
   Zhang Zhuo, BDA SUPPLEMENTARY MA
   Zheng X, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P197, DOI 10.1145/1328438.1328464
   Zhong YT, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P91
   Zhu EZ, 2015, COMPUT SECUR, V52, P51, DOI 10.1016/j.cose.2015.03.008
NR 78
TC 12
Z9 15
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 137
DI 10.1145/3360563
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500022
OA gold
DA 2024-07-18
ER

PT J
AU Mellies, PA
AF Mellies, Paul-Andre
TI Categorical Combinatorics of Scheduling and Synchronization in Game
   Semantics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE game semantics; synchronization algebras; scheduling policies;
   sequential alternating games; concurrent non-alternating games; template
   games; bicategorical models of linear logic
AB Game semantics is the art of interpreting types as games and programs as strategies interacting in space and time with their environment. In order to reflect the interactive behavior of programs, strategies are required to follow specific scheduling policies. Typically, in the case of a purely sequential programming language, the program (Player) and its environment (Opponent) will play one after the other, in a strictly alternating way. On the other hand, in the case of a concurrent language, Player and Opponent will be allowed to play several moves in a row, in a non-alternating way. In both cases, the scheduling policy is designed very carefully in order to ensure that the strategies synchronize properly and compose well when plugged together. A longstanding conceptual problem has been to understand when and why a given scheduling policy works and is compositional in that sense. In this paper, we exhibit a number of simple and fundamental combinatorial structures which ensure that a given scheduling policy encoded as synchronization template defines a synunetric monoidal closed (and in fact*-autonomous) bicategory of games, strategies and simulations. To that purpose, we choose to work at a very general level, and illustrate our method by constructing two template game models of linear logic with different flavors (alternating and non-alternating) using the same categorical combinatorics, performed in the category of small categories. As a whole, the paper may be seen as a hymn in praise of synchronization, building on the notion of synchronization algebra in process calculi and adapting it smoothly to programming language semantics, using a combination of ideas at the converging point of game semantics and of categorical algebra.
C1 [Mellies, Paul-Andre] Univ Paris Diderot, CNRS, Inst Rech Informat IRIF, 8 Pl Aurelie Nemours, F-75013 Paris, France.
C3 Universite Paris Cite; Centre National de la Recherche Scientifique
   (CNRS)
RP Mellies, PA (corresponding author), Univ Paris Diderot, CNRS, Inst Rech Informat IRIF, 8 Pl Aurelie Nemours, F-75013 Paris, France.
EM mellies@irif.fr
OI Mellies, Paul-Andre/0000-0001-6180-2275
FU ERC Advanced Grant DuaLL [670624]; European Research Council (ERC)
   [670624] Funding Source: European Research Council (ERC)
FX The research underlying this article was partially supported by the ERC
   Advanced Grant DuaLL, number 670624. The author would like to thank
   Thomas Ehrhard, Tom Hirschowitz, Leo Stefanesco, Thomas Streicher and
   Noam Zeilberger for enlightening discussions on this work, as well as
   the POPL reviewers for their useful feedback on the final version of the
   paper.
CR Abramsky S, 2000, INFORM COMPUT, V163, P409, DOI [10.1006/inco.2000.2930, 10.1006/inco2000.2930]
   [Anonymous], LECT NOTES MATH
   BENABOU J, 1985, J SYMBOLIC LOGIC, V50, P10, DOI 10.2307/2273784
   Castellan Simon, 2019, IN PRESS
   Fiore M, 2008, J LOND MATH SOC, V77, P203, DOI 10.1112/jlms/jdm096
   Garner R., 2006, Ph.D. thesis
   Ghica Dan R., 2011, FDN SOFTWARE SCI COM
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Harmer R, 2007, IEEE S LOG, P379, DOI 10.1109/LICS.2007.14
   Harmer Russell, 1999, THESIS IMPERIAL COLL
   Hirschowitz Andre, 2007, P 27 IARCS ANN C FDN, V4855
   Hyland M, 2003, THEOR COMPUT SCI, V294, P183, DOI 10.1016/S0304-3975(01)00241-9
   Hyland Martin, 1999, ELECTRON NOTES THEOR, V29
   Hyland Martin, 2000, INFORM COMPUT, V163
   Melliès PA, 2006, THEOR COMPUT SCI, V358, P200, DOI 10.1016/j.tcs.2006.01.016
   Mellies Paul-Andre, 2007, 18 INT C CONC THEOR
   Mellies Paul-Andre, 2018, P LICS 2018
   Mellies Paul-Andre, 2008, ASYNCHRONOUS G UNPUB
   Rideau Sylvain, 2011, P 26 ANN S LOG COMP
   Selinger Peter, 1999, ELECT NOTES THEORETI, V20
NR 20
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 23
DI 10.1145/3290336
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300023
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Zhang, YZ
   Myers, AC
AF Zhang, Yizhou
   Myers, Andrew C.
TI Abstraction-Safe Effect Handlers via Tunneling
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Algebraic effects; parametricity; type systems; exceptions; dynamic
   scoping
AB Algebraic effect handlers offer a unified approach to expressing control-flow transfer idioms such as exceptions, iteration, and async/await. Unfortunately, previous attempts to make these handlers type-safe have failed to support the fundamental principle of modular reasoning for higher-order abstractions. We demonstrate that abstraction-safe algebraic effect handlers are possible by giving them a new semantics. The key insight is that code should only handle effects it is aware of. In our approach, the type system guarantees all effects are handled, but it is impossible for higher-order, effect-polymorphic code to accidentally handle effects raised by functions passed in; such effects tunnel through the higher-order, calling procedures polymorphic to them. By contrast, the possibility of accidental handling threatens previous designs for algebraic effect handlers. We prove that our design is not only type-safe, but also abstraction-safe. Using a logical-relations model that we prove sound with respect to contextual equivalence, we derive previously unattainable program equivalence results. Our mechanism offers a viable approach for future language designs aiming for effect handlers with strong abstraction guarantees.
C1 [Zhang, Yizhou; Myers, Andrew C.] Cornell Univ, Gates Hall, Ithaca, NY 14853 USA.
C3 Cornell University
RP Zhang, YZ (corresponding author), Cornell Univ, Gates Hall, Ithaca, NY 14853 USA.
EM yizhou@cs.cornell.edu; andru@cs.cornell.edu
OI Zhang, Yizhou/0000-0002-8206-4694
FU NSF [1513797]; NASA [NNX16AB09G]; NASA [907944, NNX16AB09G] Funding
   Source: Federal RePORTER; Division Of Computer and Network Systems;
   Direct For Computer & Info Scie & Enginr [1513797] Funding Source:
   National Science Foundation
FX We thank Josh Acay, Sam Lindley, Craig McLaughlin, and Drew Zagieboylo
   for their helpful feedback on this paper, along with our shepherd and
   the anonymous reviewers. We also thank Dariusz Biernacki, Maciej Pirog,
   Piotr Polesiuk, and Filip Sieczkowski for making their software
   available. This research was supported by NSF grant 1513797 and NASA
   grant NNX16AB09G but does not necessarily represent the opinions of
   these funding agencies.
CR Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   [Anonymous], 2017, 3 INT WORKSH COQ PRO
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Bauer A, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:9)2014
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Benton Nick, 2007, Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP'07), P1, DOI 10.1145/1273920.1273922
   Biernacki D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158096
   Bracevac Oliver, 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236762
   Brachthäuser JI, 2017, SCALA'17: PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P67, DOI 10.1145/3136000.3136007
   Crary K., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P262, DOI 10.1145/292540.292564
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Dreyer, 2018, 45 ACM S PRINC PROGR
   Dreyer D, 2012, J FUNCT PROGRAM, V22, P477, DOI 10.1017/S095679681200024X
   Dreyer D, 2009, IEEE S LOG, P71, DOI 10.1109/LICS.2009.34
   Dyvbig RK, 2007, J FUNCT PROGRAM, V17, P687, DOI 10.1017/S0956796807006259
   Felleisen, 1987, THESIS INDIANA U IND
   Felleisen Matthias, 1988, Principles of Programming Languages (POPL), DOI DOI 10.1145/73560.73576
   Gamma Erich., 1994, DESIGN PATTERNS
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Gunter C. A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P12, DOI 10.1145/224164.224173
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Johann P, 2010, IEEE S LOG, P209, DOI 10.1109/LICS.2010.29
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Knuth Donald Ervin, 1984, TEXBOOK
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Lewis J. R., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P108, DOI 10.1145/325694.325708
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Milner R., 1990, The Definition of Standard ML
   Morris James Hiram, 1968, Ph.D. thesis
   Myers, 2018, 1813S60202 CORN U CO
   Odersky Martin, 2017, P ACM PROGR LANG 2 P
   Oliveira BCDS, 2010, ACM SIGPLAN NOTICES, V45, P341, DOI 10.1145/1932682.1869489
   Ostermann Klaus, 2018, P ACM PROGR LANG 2 O
   Osvald L, 2016, ACM SIGPLAN NOTICES, V51, P234, DOI 10.1145/3022671.2984009
   Philip Wadler, 1989, 4 C FUNCT PROGR LANG, P347
   Pitts Andrew, 1998, Higher Order Operational Techniques in Semantics, P227
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Rytz L, 2012, LECT NOTES COMPUT SC, V7313, P258, DOI 10.1007/978-3-642-31057-7_13
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Zhang YZ, 2016, ACM SIGPLAN NOTICES, V51, P281, DOI [10.1145/2908080.2908086, 10.1145/2980983.2908086]
NR 47
TC 29
Z9 29
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 5
DI 10.1145/3290318
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300005
OA gold
DA 2024-07-18
ER

PT J
AU Ma, C
   Wu, DH
   Tan, G
   Kandemir, MT
   Zhang, DF
AF Ma, Cong
   Wu, Dinghao
   Tan, Gang
   Kandemir, Mahmut Taylan
   Zhang, Danfeng
TI Quantifying and Mitigating Cache Side Channel Leakage with Differential
   Set
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE differential set; side channels; information flow
ID ATTACKS
AB Cache side-channel attacks leverage secret-dependent footprints in CPU cache to steal confidential information, such as encryption keys. Due to the lack of a proper abstraction for reasoning about cache side channels, existing static program analysis tools that can quantify or mitigate cache side channels are built on very different kinds of abstractions. As a consequence, it is hard to bridge advances in quantification and mitigation research. Moreover, existing abstractions lead to imprecise results. In this paper, we present a novel abstraction, called differential set, for analyzing cache side channels at compile time. A distinguishing feature of differential sets is that it allows compositional and precise reasoning about cache side channels. Moreover, it is the first abstraction that carries sufficient information for both side channel quantification and mitigation. Based on this new abstraction, we develop a static analysis tool DSA that automatically quantifies and mitigates cache side channel leakage at the same time. Experimental evaluation on a set of commonly used benchmarks shows that DSA can produce more precise leakage bound as well as mitigated code with fewer memory footprints, when compared with state-of-the-art tools that only quantify or mitigate cache side channel leakage.
C1 [Ma, Cong] Univ Waterloo, Waterloo, ON, Canada.
   [Wu, Dinghao; Tan, Gang; Kandemir, Mahmut Taylan] Penn State Univ, University Pk, PA 16802 USA.
   [Zhang, Danfeng] Penn State Univ, Duke Univ, State Coll, PA USA.
C3 University of Waterloo; Pennsylvania Commonwealth System of Higher
   Education (PCSHE); Pennsylvania State University; Pennsylvania State
   University - University Park; Pennsylvania Commonwealth System of Higher
   Education (PCSHE); Pennsylvania State University
RP Ma, C (corresponding author), Univ Waterloo, Waterloo, ON, Canada.
EM cong.ma@uwaterloo.ca; dinghao@psu.edu; gtan@psu.edu; mtk2@psu.edu;
   dz132@duke.edu
RI Zhang, Danfeng/A-2515-2016
OI Ma, Cong/0009-0005-0842-4697; Kandemir, Mahmut/0000-0002-9940-9951; Wu,
   Dinghao/0000-0002-0741-5511; Zhang, Danfeng/0000-0003-1942-6872; Tan,
   Gang/0000-0001-6109-6091
CR Acticmez O, 2007, WORKSHOP ON FAULT DIAGNOSIS AND TOLERANCE IN CRYPTOGRAPHY, PROCEEDINGS, P80, DOI 10.1109/FDTC.2007.16
   Almeida JB, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P53
   [Anonymous], 2009, Proceedings of the ACM SIGPLAN Fourth Workshop on Programming Languages and Analysis for Security
   Antonopoulos T, 2017, ACM SIGPLAN NOTICES, V52, P362, DOI [10.1145/3140587.3062378, 10.1145/3062341.3062378]
   Bao QK, 2021, PROC IEEE ACM INT C, P238, DOI 10.1109/ICSE-Companion52605.2021.00110
   Bendersky Eli., 2022, pysparser
   Bonneau J, 2006, LECT NOTES COMPUT SC, V4249, P201
   Borrello P, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P715, DOI 10.1145/3460120.3484583
   Brasser Ferdinand, 2017, 11 USENIX WORKSH OFF, P11
   Brotzman R, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485506
   Brotzman R, 2019, P IEEE S SECUR PRIV, P505, DOI 10.1109/SP.2019.00022
   Cauligi S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P913, DOI 10.1145/3385412.3385970
   Cauligi S, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P174, DOI 10.1145/3314221.3314605
   Chen J, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P875, DOI 10.1145/3133956.3134058
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Coppens B, 2009, P IEEE S SECUR PRIV, P45, DOI 10.1109/SP.2009.19
   Daniel LA, 2020, P IEEE S SECUR PRIV, P1021, DOI 10.1109/SP40000.2020.00074
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Doychev G., 2013, USENIX SEC S, P431
   Doychev G, 2017, ACM SIGPLAN NOTICES, V52, P406, DOI [10.1145/3140587.3062388, 10.1145/3062341.3062388]
   Felten E.W., 2000, P 7 ACM C COMP COMM, P25, DOI [10.1145/352600.352606, DOI 10.1145/352600.352606]
   Gotzfried Johannes, 2017, P 10 EUR WORKSH SYST, P2
   Gullasch D, 2011, P IEEE S SECUR PRIV, P490, DOI 10.1109/SP.2011.22
   Jia YQ, 2015, IEEE INTERNET COMPUT, V19, P44, DOI 10.1109/MIC.2014.103
   Kotcher Robert., 2013, 2013 ACM SIGSAC Conference on Computer and Communications Security, CCS'13, Berlin, Germany, November 4-8, 2013, P1055, DOI DOI 10.1145/2508859.2516712
   Liu FF, 2015, P IEEE S SECUR PRIV, P605, DOI 10.1109/SP.2015.43
   Lowe G, 2002, P IEEE CSFW, P18, DOI 10.1109/CSFW.2002.1021804
   Ma Cong., 2023, Quantifying and Mitigating Cache Side Channel Leakage with Differential Set, DOI [10.5281/zenodo.8418984, DOI 10.5281/ZENODO.8418984]
   Molnar D, 2006, LECT NOTES COMPUT SC, V3935, P156
   Noller Y, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P257, DOI 10.1145/3460319.3464817
   Osvik DA, 2006, LECT NOTES COMPUT SC, V3860, P1
   Pasareanu CS, 2016, P IEEE CSFW, P387, DOI 10.1109/CSF.2016.34
   Percival Colin, 2005, CACHE MISSING FUN PR
   Phan QS, 2017, P IEEE CSFW, P328, DOI 10.1109/CSF.2017.8
   Rane A, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P431
   Ristenpart T, 2009, CCS'09: PROCEEDINGS OF THE 16TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P199
   Schmitt Isabell., 2012, WOOT, P34
   Schwarz Michael, 2017, Detection of Intrusions and Malware, and Vulnerability Assessment. 14th International Conference, DIMVA 2017. Proceedings: LNCS 10327, P3, DOI 10.1007/978-3-319-60876-1_1
   Smith G, 2009, LECT NOTES COMPUT SC, V5504, P288
   Soos M, 2020, LECT NOTES COMPUT SC, V12224, P463, DOI 10.1007/978-3-030-53288-8_22
   STAC, 2017, DARPA space/time analysis for cybersecurity (STAC) program
   Stefanov E, 2018, J ACM, V65, DOI 10.1145/3177872
   Stone Paul, 2013, Pixel Perfect Timing Attacks with HTML5
   Tromer E, 2010, J CRYPTOL, V23, P37, DOI 10.1007/s00145-009-9049-y
   Van Bulck Jo, 2017, 2 WORKSHOP SYSTEM SO, P1, DOI [10.1145/3152701.3152706, DOI 10.1145/3152701.3152706]
   Van Goethem T, 2015, CCS'15: PROCEEDINGS OF THE 22ND ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1382, DOI 10.1145/2810103.2813632
   Wang S, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P657
   Wang S, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P235
   Weiser S, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P603
   Wu Zhou, 2012, 2012 IEEE Global High Tech Congress on Electronics (GHTCE), P159, DOI 10.1109/GHTCE.2012.6490146
   Xiao Y, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P859, DOI 10.1145/3133956.3134016
   Xu YJ, 2011, PROCEEDINGS OF THE 3RD ACM WORKSHOP CLOUD COMPUTING SECURITY WORKSHOP (CCSW'11), P29
   Yarom Y, 2017, J CRYPTOGR ENG, V7, P99, DOI 10.1007/s13389-017-0152-y
   Yarom Y, 2014, PROCEEDINGS OF THE 23RD USENIX SECURITY SYMPOSIUM, P719
   Zhang Y., 2012, 2012 ACM SIGSAC C CO, P305, DOI DOI 10.1145/2382196.2382230
NR 55
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 274
DI 10.1145/3622850
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100054
OA gold
DA 2024-07-18
ER

PT J
AU Breitner, J
AF Breitner, Joachim
TI More Fixpoints! (Functional Pearl)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Haskell; recursion; fixpoint
AB Haskell's laziness allows the programmer to solve some problems naturally and declaratively via recursive equations. Unfortunately, if the input is "too recursive", these very elegant idioms can fall into the dreaded black hole, and the programmer has to resort to more pedestrian approaches.
   It does not have to be that way: We built variants of common pure data structures (Booleans, sets) where recursive definitions are productive. Internally, the infamous unsafePerformIO is at work, but the user only sees a beautiful and pure API, and their pretty recursive idioms - magically - work again.
EM mail@joachim-breitner.de
OI Breitner, Joachim/0000-0003-3753-6821
CR Adams Stephen, 1992, Research Report CSTR 92-10
   Arntzenius M, 2016, ACM SIGPLAN NOTICES, V51, P214, DOI 10.1145/3022670.2951948
   Breitner Joachim, 2023, Reproduction package for Functional Pearl "More Fixpoints!, DOI [10.1145/3580399, DOI 10.1145/3580399]
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Claessen K., 1999, Advances in Computing Science-ASIAN'99. 5th Asian Computing Science Conference. Proceedings (Lecture Notes in Computer Science Vol. 1742), P62
   Gill A, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P117
   Graf Sebastian, 2021, datafix: Fixing data-flow problems
   Hackett J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341718
   Hofmann M, 2010, LECT NOTES COMPUT SC, V6199, P199, DOI 10.1007/978-3-642-14162-1_17
   Jacobs K, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527326
   Jeannin JB, 2017, FUND INFORM, V150, P347, DOI 10.3233/FI-2017-1473
   Jones S. P., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P295, DOI 10.1145/237721.237794
   Jones SP, 2002, J FUNCT PROGRAM, V12, P393, DOI 10.1017/S0956796802004331
   Jones SP, 2000, LECT NOTES COMPUT SC, V1868, P37
   KAM JB, 1976, J ACM, V23, P158, DOI 10.1145/321921.321938
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   Kuper Lindsey, 2013, P 2 ACM SIGPLAN WORK, P71, DOI 10.1145/2502323.2502326
   Longley J, 1999, ACM SIGPLAN NOTICES, V34, P1, DOI 10.1145/317765.317775
   Nievergelt Jurg, 1972, STOC, P137, DOI DOI 10.1145/800152.804906
   Polakow J, 2015, ACM SIGPLAN NOTICES, V50, P177, DOI 10.1145/2804302.2804309
   Pottier Francois, 2009, Functional Pearl: Lazy least fixed points in ML
   Sabry A., 1998, Journal of Functional Programming, V8, P1, DOI 10.1017/S0956796897002943
   Sergey I, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796817000016
   Sussman Gerald Jay, 2009, Technical Report MIT/CSAIL Technical Report MITCSAIL-TR-2009-002
   Timany A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158152
   Walker M, 2015, ACM SIGPLAN NOTICES, V50, P141, DOI 10.1145/2804302.2804306
   Zhang Yihong, 2020, Hatafun
NR 27
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 211
DI 10.1145/3607853
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900024
OA gold
DA 2024-07-18
ER

PT J
AU Keidel, S
   Erdweg, S
   Hombücher, T
AF Keidel, Sven
   Erdweg, Sebastian
   Hombuecher, Tobias
TI Combinator-Based Fixpoint Algorithms for Big-Step Abstract Interpreters
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Big-Step Abstract Interpretation; Static Analysis; Fixpoint Algorithm
AB Big-step abstract interpreters are an approach to build static analyzers based on big-step interpretation. While big-step interpretation provides a number of benefits for the definition of an analysis, it also requires particularly complicated fixpoint algorithms because the analysis definition is a recursive function whose termination is uncertain. This is in contrast to other analysis approaches, such as small-step reduction, abstract machines, or graph reachability, where the analysis essentially forms a finite transition system between widened analysis states.
   We show how to systematically develop sophisticated fixpoint algorithms for big-step abstract interpreters and how to ensure their soundness. Our approach is based on small and reusable fixpoint combinators that can be composed to yield fixpoint algorithms. For example, these combinators describe the order in which the program is analyzed, how deep recursive functions are unfolded and loops unrolled, or they record auxiliary data such as a (context-sensitive) call graph. Importantly, each combinator can be developed separately, reused across analyses, and can be verified sound independently. Consequently, analysis developers can freely compose combinators to obtain sound fixpoint algorithms that work best for their use case. We provide a formal metatheory that guarantees a fixpoint algorithm is sound if its composed from sound combinators only. We experimentally validate our combinator-based approach by describing sophisticated fixpoint algorithms for analyses of Stratego, Scheme, and WebAssembly.
C1 [Keidel, Sven] Tech Univ Darmstadt, Darmstadt, Germany.
   [Erdweg, Sebastian; Hombuecher, Tobias] JGU Mainz, Mainz, Germany.
C3 Technical University of Darmstadt; Johannes Gutenberg University of
   Mainz
RP Keidel, S (corresponding author), Tech Univ Darmstadt, Darmstadt, Germany.
OI Keidel, Sven/0000-0002-4278-2181; Erdweg, Sebastian/0000-0002-1974-5956
FU national research center for applied cybersecurity ATHENE; German
   Research Foundation (DFG) [-451545561]
FX This work was funded in part by the national research center for applied
   cybersecurity ATHENE (research areas SeDiTraH and AVSV) and by the
   German Research Foundation (DFG)-451545561.
CR Abelson H., 1998, Higher-Order and Symbolic Computation, V11, P7, DOI 10.1023/A:1010051815785
   Amato G, 2016, SCI COMPUT PROGRAM, V120, P1, DOI 10.1016/j.scico.2015.12.005
   Bodin M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290357
   Bourdoncle F., 1993, Formal Methods in Programming and Their Applications International Conference Proceedings, P128, DOI 10.1007/BFb0039704
   Brandl Katharina, 2023, 37 EUROPEAN C OBJECT, P388, DOI [10.4230/LIPIcs.ECOOP.2023.19, DOI 10.4230/LIPICS.ECOOP.2023.19]
   COUSOT P, 1992, LECT NOTES COMPUT SC, V631, P269, DOI 10.1007/3-540-55844-6_142
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Darais D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110256
   Darais D, 2015, ACM SIGPLAN NOTICES, V50, P552, DOI [10.1145/2814270.2814308, 10.1145/2858965.2814308]
   Gabriel Richard P., 1985, Performance and evaluation of LISP systems
   Geser Alfons, 1994, Chaotic fixed point iterations
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   Hilbig A, 2021, PROCEEDINGS OF THE WORLD WIDE WEB CONFERENCE 2021 (WWW 2021), P2696, DOI 10.1145/3442381.3450138
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Jensen SH, 2009, LECT NOTES COMPUT SC, V5673, P238, DOI 10.1007/978-3-642-03237-0_17
   Keidel S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236767
   Keidel S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360602
   Keidel S, 2020, LECT NOTES COMPUT SC, V11990, P136, DOI 10.1007/978-3-030-39322-9_7
   Keidel Sven, 2023, Combinator-Based Fixpoint Algorithms for Big-Step Abstract Interpreters, DOI [10.5281/zenodo.7986916, DOI 10.5281/ZENODO.7986916]
   Kim SK, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371082
   Lam E., 2011, CETUS USERS COMPILER, V15, P15
   Lerch J, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P98, DOI 10.1145/2635868.2635878
   Liu H, 2009, ACM SIGPLAN NOTICES, V44, P35, DOI 10.1145/1631687.1596559
   Mauborgne L, 2005, LECT NOTES COMPUT SC, V3444, P5
   Might M, 2006, ACM SIGPLAN NOTICES, V41, P127, DOI 10.1145/1111320.1111049
   Might M, 2006, ACM SIGPLAN NOTICES, V41, P13, DOI 10.1145/1160074.1159807
   Paterson R, 2001, ACM SIGPLAN NOTICES, V36, P229, DOI 10.1145/507669.507664
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Pree Tomislav, 2020, Master's thesis
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Sagiv M, 1995, LECT NOTES COMPUT SC, V915, P651
   Schmidt D. A., 1998, LISP and Symbolic Computation, V10, P237, DOI 10.1023/A:1007734417713
   Schmidt David A., 1996, Selected Papers (Lecture Notes in Computer Science, V1192, P76, DOI [10.1007/3-540-62503-8_4, DOI 10.1007/3-540-62503-8_4]
   Schmidt Dieter, 1995, P1
   Sergey I, 2013, ACM SIGPLAN NOTICES, V48, P399, DOI 10.1145/2499370.2491979
   Shivers O. G., 1991, THESIS CARNEGIE MELL
   Spath J., 2016, PROC EUR C OBJECT OR, p22:1, DOI [10.4230/DARTS.2.1.12, DOI 10.4230/LIPICS.ECOOP.2016.22]
   Späth J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290361
   Streicher Thomas., 2006, Domain-theoretic foundations of functional programming
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Van Es Noah, 2019, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V134, DOI [10.4230/LIPIcs.ECOOP.2019.10, DOI 10.4230/LIPICS.ECOOP.2019.10]
   Van Horn D, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Visser E, 1999, ACM SIGPLAN NOTICES, V34, P13, DOI 10.1145/291251.289425
   Wei GN, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360552
NR 44
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 221
DI 10.1145/3607863
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900034
OA gold
DA 2024-07-18
ER

PT J
AU Shi, J
   Keles, A
   Goldstein, H
   Pierce, BC
   Lampropoulos, L
AF Shi, Jessica
   Keles, Alperen
   Goldstein, Harrison
   Pierce, Benjamin C.
   Lampropoulos, Leonidas
TI ETNA: An Evaluation Platform for Property-Based Testing (Experience
   Report)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE property-based testing; empirical evaluation; mutation testing
AB Property-based testing is a mainstay of functional programming, boasting a rich literature, an enthusiastic user community, and an abundance of tools - so many, indeed, that new users may have difficulty choosing. Moreover, any given framework may support a variety of strategies for generating test inputs; even experienced users may wonder which are better in a given situation. Sadly, the PBT literature, though long on creativity, is short on rigorous comparisons to help answer such questions.
   We present Etna, a platform for empirical evaluation and comparison of PBT techniques. Etna incorporates a number of popular PBT frameworks and testing workloads from the literature, and its extensible architecture makes adding new ones easy, while handling the technical drudgery of performance measurement. To illustrate its benefits, we use Etna to carry out several experiments with popular PBT approaches in both Coq and Haskell, allowing users to more clearly understand best practices and tradeoffs.
C1 [Shi, Jessica; Goldstein, Harrison; Pierce, Benjamin C.] Univ Penn, Philadelphia, PA 19104 USA.
   [Keles, Alperen; Lampropoulos, Leonidas] Univ Maryland, College Pk, MD 20742 USA.
C3 University of Pennsylvania; University System of Maryland; University of
   Maryland College Park
RP Shi, J (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM jwshi@seas.upenn.edu; akeles@umd.edu; hgo@seas.upenn.edu;
   bcpierce@cis.upenn.edu; leonidas@umd.edu
OI Shi, Jessica/0000-0002-1507-1122; Keles, Alperen/0009-0000-5734-3598;
   Pierce, Benjamin/0000-0001-7839-1636; Goldstein,
   Harrison/0000-0001-9631-1169; Lampropoulos, Leonidas/0000-0003-0269-9815
FU NSF [1955610, 2145649]
FX We thank John Hughes, Koen Claessen, Alejandro Russo, Augustin Mista,
   and Michael Hicks for their helpful comments. This work was supported by
   the NSF under award #1955610 Bringing Python Up to Speed and under
   #2145649 CAREER: Fuzzing Formal Specifications (any opinions, findings
   and conclusions or recommendations expressed in this material are those
   of the authors and do not necessarily reflect the views of the NSF).
CR Andoni Alexandr., 2002, Evaluating the "small scope hypothesis"
   Arts T, 2008, ERLANG '08: PROCEEDINGS OF THE 2008 SIGPLAN ERLANG WORKSHOP, P1
   Braquehais Rudy Matela, 2017, Ph. D. Dissertation
   Bulwahn Lukas, 2012, Certified Programs and Proofs. Second International Conference (CPP 2012). Proceedings, P92, DOI 10.1007/978-3-642-35308-6_10
   Bulwahn L, 2012, LECT NOTES COMPUT SC, V7180, P153, DOI 10.1007/978-3-642-28717-6_14
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Claessen K, 2014, LECT NOTES COMPUT SC, V8475, P18, DOI 10.1007/978-3-319-07151-0_2
   Cruanes Simon., 2017, QuickCheck Inspired Property-Based Testing for OCaml
   Dolan Stephen, 2017, Property Fuzzing for OCaml
   Dolan-Gavitt B, 2016, P IEEE S SECUR PRIV, P110, DOI 10.1109/SP.2016.15
   Duregård J, 2012, ACM SIGPLAN NOTICES, V47, P61, DOI 10.1145/2430532.2364515
   Fetscher B, 2015, LECT NOTES COMPUT SC, V9032, P383, DOI 10.1007/978-3-662-46669-8_16
   Goldstein H, 2021, LECT NOTES COMPUT SC, V12648, P264, DOI 10.1007/978-3-030-72019-3_10
   Gopinath R, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P72, DOI 10.1145/2568225.2568278
   Hazimeh A, 2020, P ACM MEAS ANAL COMP, V4, DOI [10.1145/3428334, 10.1145/3410220.3456276]
   Hoang Tram, 2022, Zenodo, DOI 10.5281/ZENODO.6778257
   Hritcu C, 2016, J FUNCT PROGRAM, V26, DOI 10.1017/S0956796816000058
   Hritcu C, 2013, ACM SIGPLAN NOTICES, V48, P455, DOI [10.1145/2500365.2500574, 10.1145/2544174.2500574]
   Hughes J, 2020, LECT NOTES COMPUT SC, V12053, P58, DOI 10.1007/978-3-030-47147-7_4
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   Klees G, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P2123, DOI 10.1145/3243734.3243804
   Klein Casey, 2009, WORKSHOP SCHEME FUNC
   Kuraj I., 2014, P 5 ANN SCALA WORKSH, P45
   Kuraj I, 2015, ACM SIGPLAN NOTICES, V50, P37, DOI [10.1145/2814270.2814323, 10.1145/2858965.2814323]
   Lampropoulos L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360607
   Lampropoulos L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158133
   Lampropoulos L, 2017, ACM SIGPLAN NOTICES, V52, P114, DOI 10.1145/3093333.3009868
   Lampropoulos Leonidas, 2018, QuickChick: Property-Based Testing in Coq
   Lampropoulos Leonidas, 2018, Ph. D. Dissertation
   Li-yao Xia, 2018, A quick tour of generic-random
   Lindblad F., 2007, TRENDS FUNCTIONAL PR, P105
   Löscher A, 2017, PROCEEDINGS OF THE 26TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA'17), P46, DOI 10.1145/3092703.3092711
   Löscher A, 2018, IEEE INT CONF SOFTW, P70, DOI 10.1109/ICST.2018.00017
   MacIver D.R, 2020, TEST CASE REDUCTION, V166
   MacIver David R., 2016, Hypothesis: Property-Based Testing for Python
   Midtgaard J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110259
   Mista A, 2019, PROCEEDINGS OF THE 31ST SYMPOSIUM ON IMPLEMENTATION AND APPLICATION OF FUNCTIONAL LANGUAGES, IFL 2019, DOI 10.1145/3412932.3412943
   Mista A, 2019, INT WORKSH AUTOMAT, P48, DOI 10.1109/AST.2019.00013
   Nilsson Rickard., 2019, ScalaCheck: Property-Based Testing for Scala
   Padhye R, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P329, DOI 10.1145/3293882.3330576
   Palka Michal H, 2011, P 6 INT WORKSH AUT S, P91, DOI DOI 10.1145/1982595.1982615
   pandas, 2023, pandas-Python Data Analysis Library
   Papadakis M, 2011, ERLANG 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN ERLANG WORKSHOP, P39
   Paraskevopoulou Z, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P966, DOI 10.1145/3519939.3523707
   Pierce Benjamin C., 2018, Electronic textbook
   Plotly, 2023, Plotly: Low-Code Data App Development
   Project Jupyter, 2023, Project Jupyter
   Runciman C, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P37
   Satyanarayan A, 2017, IEEE T VIS COMPUT GR, V23, P341, DOI 10.1109/TVCG.2016.2599030
   Stanley Jacob., 2019, Hedgehog: Release with Confidence
   Wongsuphasawat K, 2017, PROCEEDINGS OF THE 2017 ACM SIGCHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'17), P2648
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   Zhang ZN, 2022, PROCEEDINGS OF THE 31ST USENIX SECURITY SYMPOSIUM, P3699
NR 53
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2023
VL 7
IS ICFP
AR 218
DI 10.1145/3607860
PG 17
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA R3XL3
UT WOS:001063711900031
OA gold
DA 2024-07-18
ER

PT J
AU Day, JD
   Ganesh, V
   Grewal, N
   Manea, F
AF Day, Joel D.
   Ganesh, Vijay
   Grewal, Nathan
   Manea, Florin
TI On the Expressive Power of String Constraints
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE String constraints; String solving; Word equations
ID SMT SOLVER; LANGUAGES
AB We investigate properties of strings which are expressible by canonical types of string constraints. Specifically we consider a landscape of 20 logical theories, whose syntax is built around combinations of four common elements of string constraints: language membership (e.g. for regular languages), concatenation, equality between string terms, and equality between string-lengths. For a variable x and formula f from a given theory, we consider the set of values for which x may be substituted as part of a satisfying assignment, or in other words, the property f expresses through x. Since we consider string-based logics, this set is a formal language. We firstly consider the relative expressive power of different combinations of string constraints by comparing the classes of languages expressible in the corresponding theories, and are able to establish a mostly complete picture in this regard. Secondly, we consider the question of deciding whether the language or property expressed by a variable/formula in one theory can be expressed in another theory. We establish several negative results which are relevant to preprocessing and normalisation of string constraints in practice. Some of our results have strong connections to important open problems regarding word equations and the theory of string solving.
C1 [Day, Joel D.] Loughborough Univ, Loughborough, Leics, England.
   [Ganesh, Vijay; Grewal, Nathan] Univ Waterloo, Waterloo, ON, Canada.
   [Manea, Florin] Univ Gottingen, Gottingen, Germany.
C3 Loughborough University; University of Waterloo; University of Gottingen
RP Day, JD (corresponding author), Loughborough Univ, Loughborough, Leics, England.
EM J.Day@lboro.ac.uk; vijay.ganesh@uwaterloo.ca; negrewal@uwaterloo.ca;
   florin.manea@cs.informatik.uni-goettingen.de
OI Ganesh, Vijay/0000-0002-6029-2047; Manea, Florin/0000-0001-6094-3324
FU German Research Foundation (Deutsche Forschungsgemeinschaft, DFG)
   [466789228]
FX The work of Florin Manea was supported by the German Research Foundation
   (Deutsche Forschungsgemeinschaft, DFG), by the project with number
   466789228.
CR Abdulla PA, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P943, DOI 10.1145/3385412.3386034
   Abdulla PA, 2015, LECT NOTES COMPUT SC, V9206, P462, DOI 10.1007/978-3-319-21690-4_29
   Alur R, 2005, LECT NOTES COMPUT SC, V3580, P1102
   Alur R, 2009, J ACM, V56, DOI 10.1145/1516512.1516518
   Alur Rajeev, 2004, P 36 ANN ACM S THEOR, P202, DOI [10.1145/1007352.1007390, DOI 10.1145/1007352.1007390]
   Amadini R, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3484198
   [Anonymous], 1946, J. Symb. Log, DOI 10.2307/2268308
   Barceló P, 2017, ACM T COMPUT LOG, V18, DOI 10.1145/3070822
   Barceló P, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(4:1)2015
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Benedikt M, 2003, J ACM, V50, P694, DOI 10.1145/876638.876642
   Berzish M, 2021, LECT NOTES COMPUT SC, V12760, P289, DOI 10.1007/978-3-030-81688-9_14
   Berzish Murphy, 2021, LECT NOTES COMPUTER, V12847
   BUCHI JR, 1988, Z MATH LOGIK, V34, P337
   Chen T, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498707
   Chen TL, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290362
   Chen T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158091
   Day JD, 2018, LECT NOTES COMPUT SC, V11123, P15, DOI 10.1007/978-3-030-00250-3_2
   DURNEV VG, 1995, SIBERIAN MATH J+, V36, P917, DOI 10.1007/BF02112533
   Figueira D, 2022, PROCEEDINGS OF THE 41ST ACM SIGMOD-SIGACT-SIGAI SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS (PODS '22), P189, DOI 10.1145/3517804.3524159
   Freydenberger DD, 2019, THEOR COMPUT SYST, V63, P1679, DOI 10.1007/s00224-018-9874-1
   Freydenberger DD, 2018, THEOR COMPUT SYST, V62, P854, DOI 10.1007/s00224-017-9770-0
   Freydenberger Dominik D., 2021, SCHLOSS DAGSTUHL LEI, V130, P1, DOI [10.4230/LIPIcs.ICALP.2021.130, DOI 10.4230/LIPICS.ICALP.2021.130]
   Ganesh Vijay, 2012, REVISED SELECTED PAP, V7857
   Hague Matthew, 2019, ACM SIGLOG NEWS, V6, P4
   Halfon Sibel, 2019, Psychother Res, V29, P666, DOI 10.1080/10503307.2017.1393577
   Holík L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158092
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Jez A, 2022, J COMPUT SYST SCI, V123, P122, DOI 10.1016/j.jcss.2021.08.001
   Kan SL, 2022, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP '22), P210, DOI 10.1145/3497775.3503691
   Karhumäki J, 2000, J ACM, V47, P483, DOI 10.1145/337244.337255
   Kiezun A, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2377656.2377662
   Kiezun A, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P105
   Liang TY, 2015, LECT NOTES ARTIF INT, V9322, P135, DOI 10.1007/978-3-319-24246-0_9
   Lin AW, 2018, LECT NOTES COMPUT SC, V11138, P352, DOI 10.1007/978-3-030-01090-4_21
   Lin AW, 2016, ACM SIGPLAN NOTICES, V51, P123, DOI 10.1145/2914770.2837641
   Lothaire M., 2002, ALGEBRAIC COMBINATOR
   Lothaire M., 1997, Combinatorics on Words
   MAKANIN GS, 1977, MATH USSR SB+, V32, P129, DOI 10.1070/SM1977v032n02ABEH002376
   Trinh MT, 2016, LECT NOTES COMPUT SC, V9779, P218, DOI 10.1007/978-3-319-41528-4_12
   Mora Federico, 2023, LECT NOTES COMPUTER, V13047
   Plandowski W., 1999, 40th Annual Symposium on Foundations of Computer Science (Cat. No.99CB37039), P495, DOI 10.1109/SFFCS.1999.814622
   Le QL, 2018, LECT NOTES COMPUT SC, V11275, P350, DOI 10.1007/978-3-030-02768-1_19
   SCHULZ KU, 1992, LECT NOTES COMPUT SC, V572, P85
   Siepe BS, 2024, arXiv
   Wotschke D., 1973, LECT NOTES COMPUTER, V1, P113, DOI DOI 10.1007/3-540-06473-7_11
NR 46
TC 3
Z9 3
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571203
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500010
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Hunt, S
   Sands, D
   Stucki, S
AF Hunt, Sebastian
   Sands, David
   Stucki, Sandro
TI Reconciling Shannon and Scott with a Lattice of Computable Information
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Information Flow; Semantics
ID DECLASSIFICATION
AB This paper proposes a reconciliation of two different theories of information. The first, originally proposed in a lesser-known work by Claude Shannon (some five years after the publication of his celebrated quantitative theory of communication), describes how the information content of channels can be described qualitatively, but still abstractly, in terms of information elements, where information elements can be viewed as equivalence relations over the data source domain. Shannon showed that these elements have a partial ordering, expressing when one information element is more informative than another, and that these partially ordered information elements form a complete lattice. In the context of security and information flow this structure has been independently rediscovered several times, and used as a foundation for understanding and reasoning about information flow. The second theory of information is Dana Scott's domain theory, a mathematical framework for giving meaning to programs as continuous functions over a particular topology. Scott's partial ordering also represents when one element is more informative than another, but in the sense of computational progress - i.e. when one element is a more defined or evolved version of another. To give a satisfactory account of information flow in computer programs it is necessary to consider both theories together, in order to understand not only what information is conveyed by a program (viewed as a channel, a la Shannon) but also how the precision with which that information can be observed is determined by the definedness of its encoding (a la Scott). To this end we show how these theories can be fruitfully combined, by defining the Lattice of Computable Information (LoCI), a lattice of preorders rather than equivalence relations. LoCI retains the rich lattice structure of Shannon's theory, filters out elements that do not make computational sense, and refines the remaining information elements to reflect how Scott's ordering captures possible varieties in the way that information is presented. We show how the new theory facilitates the first general definition of termination-insensitive information flow properties, a weakened form of information flow property commonly targeted by static program analyses.
C1 [Hunt, Sebastian] City Univ London, London, England.
   [Sands, David] Chalmers Univ Technol, Gothenburg, Sweden.
   [Stucki, Sandro] Amazon Prime Video, Gothenburg, Sweden.
C3 City University London; Chalmers University of Technology
RP Hunt, S (corresponding author), City Univ London, London, England.
EM s.hunt@city.ac.uk; dave@chalmers.se; sastucki@amazon.com
OI Hunt, Sebastian/0000-0001-7255-4465; Sands, David/0000-0001-6221-0503;
   Stucki, Sandro/0000-0001-5608-8273
FU Swedish Foundation for Strategic Research (SSF); Swedish Research
   Council (VR)
FX Thanks to the anonymous referees for numerous constructive suggestions,
   in particular connections to category theory that formed the basis of
   3.7, and the suggestion to use an example based on powerdomains. Thanks
   to Andrei Sabelfeld and Aslan Askarov for helpful advice. This work was
   partially supported by the Swedish Foundation for Strategic Research
   (SSF), the Swedish Research Council (VR).
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Abadi M., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P355, DOI 10.1109/LICS.1990.113761
   ABRAMSKY S, 1991, ANN PURE APPL LOGIC, V51, P1, DOI 10.1016/0168-0072(91)90065-T
   Abramsky S., 1995, Domain Theory, P1
   Abramsky S., 1987, THESIS U LONDON
   Abramsky S, 2008, HBK PHILOS SCI, V8, P483, DOI 10.1016/B978-0-444-51726-5.50017-0
   Alvim M. S., 2020, The Science of Quantitative Information Flow, DOI 10.1007/978-3-319-96131-6
   [Anonymous], 2014, LECT NOTES COMPUTER
   [Anonymous], 1989, Topology via logic
   Askarov A, 2007, P IEEE S SECUR PRIV, P207, DOI 10.1109/SP.2007.22
   Askarov A, 2012, P IEEE CSFW, P308, DOI 10.1109/CSF.2012.31
   Askarov A, 2009, PROCEEDINGS OF THE 22ND IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM, P43, DOI 10.1109/CSF.2009.22
   Askarov A, 2008, LECT NOTES COMPUT SC, V5283, P333
   Bay J, 2020, P IEEE COMPUT SECUR, P95, DOI 10.1109/CSF49147.2020.00015
   Bowman WJ, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P101, DOI 10.1145/2784731.2784733
   Chong S, 2012, J COMPUT SECUR, V20, P637, DOI 10.3233/JCS-2012-0442
   Cohen E., 1977, Operating Systems Review, V11, P133, DOI 10.1145/1067625.806556
   Coppo M., 1986, Proceedings of the Symposium on Logic in Computer Science (Cat. No.86CH2321-8), P218
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   ERNE M, 1993, ANN NY ACAD SCI, V704, P103, DOI 10.1111/j.1749-6632.1993.tb52513.x
   Giacobazzi R., 2004, SIGPLAN Notices, V39, P186, DOI 10.1145/982962.964017
   Giacobazzi R, 2018, ACM T PRIV SECUR, V21, DOI 10.1145/3175660
   Gregersen SO, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434291
   Hunt S, 2005, LECT NOTES COMPUT SC, V3672, P171
   HUNT S, 1991, SIGPLAN NOTICES, V26, P154, DOI 10.1145/115866.115881
   Hunt S, 2021, P IEEE COMPUT SECUR, P94, DOI 10.1109/CSF51468.2021.00031
   Hunt Sebastian, 1991, THESIS IMPERIAL COLL
   Landauer J., 1993, 1993 Computer Security Foundations Workshop VI Proceedings (Cat. No.93TH0561-1), P65, DOI 10.1109/CSFW.1993.246638
   Li H, 2011, ENTROPY-SWITZ, V13, P683, DOI 10.3390/e13030683
   Li P, 2005, ACM SIGPLAN NOTICES, V40, P158, DOI 10.1145/1047659.1040319
   Malacaria P, 2015, MATH STRUCT COMP SCI, V25, P404, DOI 10.1017/S0960129513000649
   McLean J., 1994, Proceedings of 1994 IEEE Computer Society Symposium on Research in Security and Privacy (Cat. No.94CH3444-7), P79, DOI 10.1109/RISP.1994.296590
   Melliès PA, 2015, ACM SIGPLAN NOTICES, V50, P3, DOI 10.1145/2775051.2676970
   Ore O., 1942, Duke Math. J., V9, P573, DOI DOI 10.1215/S0012-7094-42-00942-6
   Plotkin G. D., 1976, SIAM Journal on Computing, V5, P452, DOI 10.1137/0205035
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Reynolds JC, 2003, MG COMP SCI, P309
   RICE HG, 1953, T AM MATH SOC, V74, P358, DOI 10.2307/1990888
   Rioul Olivier, 2022, 28E C GRETSI 22
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sabelfeld A., 2001, Higher-Order and Symbolic Computation, V14, P59, DOI 10.1023/A:1011553200337
   Sabelfeld A, 2009, J COMPUT SECUR, V17, P517, DOI 10.3233/JCS-2009-0352
   Shannon C., 1953, Trans. IRE Prof. Group Inf. Theory, V1, P105, DOI 10.1109/TIT.1953.1188572
   SHANNON CE, 1948, BELL SYST TECH J, V27, P379, DOI 10.1002/j.1538-7305.1948.tb01338.x
   SMYTH MB, 1983, LECT NOTES COMPUT SC, V154, P662
   Sterling J, 2021, J ACM, V68, DOI 10.1145/3474834
   Sterling Jonathan, 2022, FSCD
   Tse S, 2004, ACM SIGPLAN NOTICES, V39, P115, DOI 10.1145/1016848.1016868
   Volpano D., 1996, Journal of Computer Security, V4, P167
NR 50
TC 0
Z9 0
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571740
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500068
OA gold, Green Published, Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Li, JL
   Ven, LN
   Shi, PY
   Zhang, YZ
AF Li, Jianlin
   Ven, Leni
   Shi, Pengyuan
   Zhang, Yizhou
TI Type-Preserving, Dependence-Aware Guide Generation for Sound, Effective
   Amortized Probabilistic Inference
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Probabilistic programming; amortized inference; type systems; guide
   generation
AB In probabilistic programming languages (PPLs), a critical step in optimization-based inference methods is constructing, for a given model program, a trainable guide program. Soundness and effectiveness of inference rely on constructing good guides, but the expressive power of a universal PPL poses challenges. This paper introduces an approach to automatically generating guides for deep amortized inference in a universal PPL. Guides are generated using a type-directed translation per a novel behavioral type system. Guide generation extracts and exploits independence structures using a syntactic approach to conditional independence, with a semantic account left to further work. Despite the control-flow expressiveness allowed by the universal PPL, generated guides are guaranteed to satisfy a critical soundness condition and, moreover, consistently improve training and inference over state-of-the-art baselines for a suite of benchmarks.
C1 [Li, Jianlin; Ven, Leni; Shi, Pengyuan; Zhang, Yizhou] Univ Waterloo, David R Cheriton Sch Comp Sci, 200 Univ Ave West, Waterloo, ON N2L 3G1, Canada.
C3 University of Waterloo
RP Li, JL (corresponding author), Univ Waterloo, David R Cheriton Sch Comp Sci, 200 Univ Ave West, Waterloo, ON N2L 3G1, Canada.
EM jianlin.li@uwaterloo.ca; shwen@uwaterloo.ca; p23shi@uwaterloo.ca;
   yizhou@uwaterloo.ca
OI Zhang, Yizhou/0000-0002-8206-4694; Aniva, Leni/0000-0002-6033-9140; Li,
   Jianlin/0000-0001-7371-3034
FU Natural Sciences and Engineering Research Council of Canada
FX We thank the anonymous reviewers for their valuable feedback. We thank
   Nada Amin, Hongfei Fu, Edward Lee, Yingzao Li, Di Wang, and Rob Zinkov
   for discussions and help. This work was supported by the Natural
   Sciences and Engineering Research Council of Canada. The views and
   opinions expressed are those of the authors and do not necessarily
   reflect the position of any funding agency.
CR Le TA, 2019, Arxiv, DOI arXiv:1805.10469
   autoguide, 2022, AUT GUID GEN PYR DOC
   Baudart G, 2021, Arxiv, DOI arXiv:2110.11790
   Bingham E, 2019, J MACH LEARN RES, V20
   Borgström J, 2016, ACM SIGPLAN NOTICES, V51, P33, DOI [10.1145/2951913.2951942, 10.1145/3022670.2951942]
   ChristianWeilbach Boyan Beronov, 2020, INT C ARTI CIAL INTE
   Cusumano-Towner MF, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P221, DOI 10.1145/3314221.3314642
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Germain M, 2015, PR MACH LEARN RES, V37, P881
   Goodman Noah, 2012, arXiv
   Gorinova MI, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3490421
   Harvey W, 2019, Arxiv, DOI arXiv:1910.11961
   HINTON GE, 1995, SCIENCE, V268, P1158, DOI 10.1126/science.7761831
   Hochreiter S, 1997, NEURAL COMPUT, V9, P1735, DOI [10.1162/neco.1997.9.1.1, 10.1007/978-3-642-24797-2]
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Huang CW, 2018, PR MACH LEARN RES, V80
   Hur CK, 2014, ACM SIGPLAN NOTICES, V49, P133, DOI [10.1145/2666356.2594303, 10.1145/2594291.2594303]
   Rezende DJ, 2016, Arxiv, DOI [arXiv:1505.05770, 10.48550/arXiv.1505.05770, DOI 10.48550/ARXIV.1505.05770]
   Jordan MI, 1999, MACH LEARN, V37, P183, DOI 10.1023/A:1007665907178
   Mansinghka VK, 2013, Arxiv, DOI arXiv:1307.0060
   Kong A., 1992, Tech. Rep, 348, P348
   Le Tuan Anh, 2016, arXiv
   Lee W, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371084
   Lew Alexander K., 2019, PROC ACM PROC ACM PR, V7, DOI 10.1145
   Li Jianlin, 2022, CS202201 U WAT
   Mak C, 2021, Arxiv, DOI [arXiv:2004.03924, 10.1007/978-3-030-72019-3_16]
   Manning C.D., 1999, FDN STAT NATURAL LAN
   Mansinghka Vikash K., 2018, ACMSIGPLAN C PROGRAM, DOI [10.1145/3192366.3192409, DOI 10.1145/3192366.3192409]
   Meek C, 2013, Arxiv, DOI arXiv:1302.4973
   Kingma DP, 2014, Arxiv, DOI arXiv:1312.6114
   Paige B, 2018, Arxiv, DOI arXiv:1602.06701
   Pearl J., 1988, PROBABILISTIC REASON
   Ritchie D, 2016, Arxiv, DOI [arXiv:1610.05735, DOI 10.48550/ARXIV.1610.05735]
   Verma TS, 2013, Arxiv, DOI arXiv:1304.2379
   Saad FA, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290350
   Schäfer J, 2005, STAT APPL GENET MO B, V4, DOI 10.2202/1544-6115.1175
   Siddharth N, 2017, Arxiv, DOI arXiv:1706.00400
   Stuhlmuller Andreas, 2013, C NEURAL INFORM PROC
   Szymczak Marcin, 2019, INT SCH ENG TRUSTWOR, DOI [10.1007/978-3-030-55089-9_3, DOI 10.1007/978-3-030-55089-9_3]
   Tran D, 2018, Arxiv, DOI arXiv:1811.02091
   Turing AM, 1937, P LOND MATH SOC, V42, P230, DOI 10.1112/plms/s2-42.1.230
   van de Meent Jan-Willem, 2018, arXiv, DOI DOI 10.48550/ARXIV.1809.10756
   Wang D, 2021, Arxiv, DOI arXiv:2104.03598
   Webb S, 2018, Arxiv, DOI arXiv:1712.00287
   Webb Stefan, 2019, 6 ICML WORKSHOP AUTO
   Wood F, 2015, Arxiv, DOI arXiv:1507.00996
   Zhang C., 2016, ARXIV, DOI DOI 10.48550/ARXIV.1611.03530
   Zhang C, 2019, IEEE T PATTERN ANAL, V41, P2008, DOI 10.1109/TPAMI.2018.2889774
NR 48
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2023
VL 7
IS POPL
DI 10.1145/3571243
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 7S6FL
UT WOS:000910847500050
OA gold
DA 2024-07-18
ER

PT J
AU Atkinson, E
   Yuan, C
   Baudart, G
   Mandel, L
   Carbin, M
AF Atkinson, Eric
   Yuan, Charles
   Baudart, Guillaume
   Mandel, Louis
   Carbin, Michael
TI Semi-symbolic Inference for Efficient Streaming Probabilistic
   Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programming; streaming inference
AB A streaming probabilistic program receives a stream of observations and produces a stream of distributions that are conditioned on these observations. Efficient inference is often possible in a streaming context using Rao-Blackwellized particle filters (RBPFs), which exactly solve inference problems when possible and fall back on sampling approximations when necessary. While RBPFs can be implemented by hand to provide efficient inference, the goal of streaming probabilistic programming is to automatically generate such efficient inference implementations given input probabilistic programs.
   In this work, we propose semi-symbolic inference, a technique for executing probabilistic programs using a runtime inference system that automatically implements Rao-Blackwellized particle filtering. To perform exact and approximate inference together, the semi-symbolic inference system manipulates symbolic distributions to perform exact inference when possible and falls back on approximate sampling when necessary. This approach enables the system to implement the same RBPF a developer would write by hand. To ensure this, we identify closed families of distributions - such as linear-Gaussian and finite discrete models - on which the inference system guarantees exact inference. We have implemented the runtime inference system in the ProbZelus streaming probabilistic programming language. Despite an average 1.6x slowdown compared to the state of the art on existing benchmarks, our evaluation shows that speedups of 3xs87x are obtainable on a new set of challenging benchmarks we have designed to exploit closed families.
C1 [Atkinson, Eric; Yuan, Charles; Carbin, Michael] MIT, Cambridge, MA 02139 USA.
   [Baudart, Guillaume] PSL Univ, CNRS, ENS, Inria,DI ENS, Paris, France.
   [Mandel, Louis] IBM Res, MIT IBM Watson Lab, Cambridge, MA USA.
C3 Massachusetts Institute of Technology (MIT); Inria; Centre National de
   la Recherche Scientifique (CNRS); Universite PSL; Ecole Normale
   Superieure (ENS); International Business Machines (IBM)
RP Atkinson, E (corresponding author), MIT, Cambridge, MA 02139 USA.
RI Yuan, Charles/KLY-8817-2024
OI Yuan, Charles/0000-0002-4918-4467; Mandel, Louis/0000-0002-5291-6067
FU MIT-IBM Watson AI Lab; Office of Naval Research [ONR N00014-17-1-2699]
FX This work was supported in part by the MIT-IBM Watson AI Lab and the
   Office of Naval Research (ONR N00014-17-1-2699). Any opinions, findings,
   and conclusions or recommendations expressed in this material are those
   of the author and do not necessarily reflect the views of the Office of
   Naval Research.
CR Atkinson Eric, 2022, SEMISYMBOLIC INFEREN
   Baudart G, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P898, DOI 10.1145/3385412.3386009
   Bernardin K, 2008, EURASIP J IMAGE VIDE, DOI 10.1155/2008/246309
   Bingham E, 2019, J MACH LEARN RES, V20
   Fink D., 1997, COMPENDIUM CONJUGATE
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   GEMAN S, 1984, IEEE T PATTERN ANAL, V6, P721, DOI 10.1109/TPAMI.1984.4767596
   Goodman N. D., 2014, DESIGN IMPLEMENTATIO
   GORDON NJ, 1993, IEE PROC-F, V140, P107, DOI 10.1049/ip-f-2.1993.0015
   Hoffman M.D., 2018, NeurIPS
   Holtzen Steven, 2020, Proceedings of the ACM on Programming Languages, V4, DOI 10.1145/3428208
   Larsen T. D., 1999, Proceedings of the 1999 IEEE International Conference on Control Applications (Cat. No.99CH36328), P1021, DOI 10.1109/CCA.1999.801027
   Lunden Daniel, 2017, THESIS
   Mansinghka VK, 2018, ACM SIGPLAN NOTICES, V53, P603, DOI [10.1145/3192366.3192409, 10.1145/3296979.3192409]
   Minka T., 2018, Infer.NET 0.3
   Minka T., 2001, UNCERTAINTY ARTIFICI, P362
   Murphy K, 2001, STAT ENG IN, P499
   Murray LM, 2018, PR MACH LEARN RES, V84
   Murray LM, 2018, ANNU REV CONTROL, V46, P29, DOI 10.1016/j.arcontrol.2018.10.013
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Obermeyer Fritz, 2019, ICML
   Obermeyer Fritz, 2019, PROGR TRANSF ML WORK
   Pearl Judea., 1982, AAAI
   Saad FA, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P804, DOI 10.1145/3453483.3454078
   Solomon P. D., 2012, ISPRS, V3822, P303
   Sontag, 1998, MATH CONTROL THEORY, DOI DOI 10.1007/978-1-4612-0577-7
   Tolpin David, 2016, P 28 IMPL APPL FUNCT, DOI DOI 10.1145/3064899.3064910
   TRAN DA, 2017, ICLR, DOI DOI 10.1109/PIMRC.2017.8292622
   Winn J, 2005, J MACH LEARN RES, V6, P661
   Zhang N. L., 1994, P 10 CAN C ART INT, P171
NR 30
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 184
DI 10.1145/3563347
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200061
OA gold, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Garg, P
   Sengamedu, SH
AF Garg, Pranav
   Sengamedu, Srinivasan H.
TI Synthesizing Code Quality Rules from Examples
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis
ID GRAPH
AB Static Analysis tools have rules for several code quality issues and these rules are created by experts manually. In this paper, we address the problem of automatic synthesis of code quality rules from examples. We formulate the rule synthesis problem as synthesizing first order logic formulas over graph representations of code. We present a new synthesis algorithm RHOSYNTH that is based on Integer Linear Programming-based graph alignment for identifying code elements of interest to the rule. We bootstrap RHOSYNTH by leveraging code changes made by developers as the source of positive and negative examples. We also address rule refinement in which the rules are incrementally improved with additional user-provided examples. We validate RHOSYNTH by synthesizing more than 30 Java code quality rules. These rules have been deployed as part of Amazon CodeGuru Reviewer and their precision exceeds 75% based on developer feedback collected during live code-reviews within Amazon. Through comparisons with recent baselines, we show that current state-of-the-art program synthesis approaches are unable to synthesize most of these rules.
C1 [Garg, Pranav] Amazon Web Serv, 7 34th St, New York, NY 10001 USA.
   [Sengamedu, Srinivasan H.] Amazon, 2250 7th Ave, Seattle, WA 98121 USA.
C3 Amazon.com; Amazon.com
RP Garg, P (corresponding author), Amazon Web Serv, 7 34th St, New York, NY 10001 USA.
EM prangarg@amazon.com; sengamed@amazon.com
OI Sengamedu, Srinivasan/0000-0003-1847-8398
CR Ahmadi M, 2021, PROCEEDINGS OF THE 30TH USENIX SECURITY SYMPOSIUM, P2025
   AJTAI M, 1994, J COMPUT SYST SCI, V49, P562, DOI 10.1016/S0022-0000(05)80071-6
   Albarghouthi A, 2017, LECT NOTES COMPUT SC, V10416, P689, DOI 10.1007/978-3-319-66158-2_44
   Allamanis M., 2018, INT C LEARN REPR ICL
   Allamanis M, 2021, Arxiv, DOI arXiv:2105.12787
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Bader J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360585
   Barrett C.W., 2018, Handbook of Model Checking, P305, DOI DOI 10.1007/978-3-319-10575-8_11
   Bavishi R, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485511
   Bavishi R, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P613, DOI 10.1145/3338906.3338952
   Beck Kent L., 2003, Test Driven Development By Example
   Berabi B, 2021, PR MACH LEARN RES, V139
   Bian P, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P411, DOI 10.1145/3236024.3236032
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Devlin J, 2017, Arxiv, DOI arXiv:1703.07469
   Devlin J, 2017, Arxiv, DOI arXiv:1710.11054
   Dinella E., 2020, INT C LEARN REPR ICL
   Falleri Jean-Remy, 2014, P 29 ACM IEEE INT C, P313
   Ferdowsifard K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485530
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Gulwani S, 2017, LECT NOTES COMPUT SC, V10695, P3, DOI 10.1007/978-3-319-71237-6_1
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P317, DOI 10.1145/1925844.1926423
   Haussler D., 1989, Machine Learning, V4, P7, DOI 10.1023/A:1022601210986
   Ji RY, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1143, DOI 10.1145/3385412.3386025
   Kalyan Ashwin, 2018, ICLR
   Kreutzer P, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P61, DOI [10.1145/2901739.2901749, 10.1109/MSR.2016.016]
   Le V, 2017, Arxiv, DOI arXiv:1703.03539
   Lerouge J, 2017, PATTERN RECOGN, V72, P254, DOI 10.1016/j.patcog.2017.07.029
   Lezama Armando Solar, 2008, Ph.D. Dissertation
   Li T, 2004, PROCEEDINGS OF THE 2004 INTERNATIONAL CONFERENCE ON MANAGEMENT SCIENCE & ENGINEERING, VOLS 1 AND 2, P531
   Li Zhenmin, 2005, P ACM SIGSOFT SOFTW, P306, DOI DOI 10.1145/1081706.1081755
   Long F, 2016, ACM SIGPLAN NOTICES, V51, P298, DOI 10.1145/2914770.2837617
   Mendelson J, 2021, AAAI CONF ARTIF INTE, V35, P6444
   Meng N, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P502, DOI 10.1109/ICSE.2013.6606596
   Miltner A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360569
   Mitchell T. M., 1997, MACH LEARN
   Mukherjee Rajdeep, 2022, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V222, DOI [10.4230/LIPIcs.ECOOP.2022.14, DOI 10.4230/LIPICS.ECOOP.2022.14]
   Naik Aaditya, 2021, 34 ANN ACM S US INT, P84, DOI [10.1145/3472749.3474737, DOI 10.1145/3472749.3474737]
   Ni AS, 2021, PROC INT CONF SOFTW, P112, DOI 10.1109/ICSE43902.2021.00023
   Paletov R, 2018, ACM SIGPLAN NOTICES, V53, P450, DOI [10.1145/3192366.3192403, 10.1145/3296979.3192403]
   Pan R, 2021, PROC INT CONF SOFTW, P785, DOI 10.1109/ICSE43902.2021.00077
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Pradel M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276517
   Raghothaman M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371130
   Raychev Veselin., 2021, 2021 INT C COD QUAL, P1, DOI [10.1109/ICCQ51190.2021.9392977, DOI 10.1109/ICCQ51190.2021.9392977]
   Rodriguez-Prieto O, 2020, IEEE ACCESS, V8, P72239, DOI 10.1109/ACCESS.2020.2987631
   Rolim R, 2018, Arxiv, DOI arXiv:1803.03806
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Ryzhkov Evgeniy, 2011, Days from developers' life.
   Schrijver A., 1998, THEORY LINEAR INTEGE
   Si XJ, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P6117
   Si XJ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P515, DOI 10.1145/3236024.3236034
   Sivaraman A, 2019, PROC INT CONF SOFTW, P292, DOI 10.1109/ICSE.2019.00044
   Sobreira V, 2018, 2018 25TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2018), P130, DOI 10.1109/SANER.2018.8330203
   Sven Amann, 2019, MUDetect: An API-Misuse Detector.
   Thakkar A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1110, DOI 10.1145/3453483.3454098
   Tufano M, 2018, IEEE INT CONF AUTOM, P832, DOI 10.1145/3238147.3240732
   Vasic M., 2019, Neural program repair by jointly learning to localize and repair
   Verbruggen G, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485477
   Wang JB, 2021, PROC INT CONF SOFTW, P810, DOI 10.1109/ICSE43902.2021.00079
   Yan JC, 2013, IEEE I CONF COMP VIS, P1649, DOI 10.1109/ICCV.2013.207
   Yun IS, 2016, PROCEEDINGS OF THE 25TH USENIX SECURITY SYMPOSIUM, P363
   Ziyang Li, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P1400, DOI 10.1109/SP40001.2021.00090
NR 63
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2022
VL 6
IS OOPSLA
AR 187
DI 10.1145/3563350
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U3HT9
UT WOS:001083750200064
OA gold
DA 2024-07-18
ER

PT J
AU Yoon, I
   Zakowski, Y
   Zdancewic, S
AF Yoon, Irene
   Zakowski, Yannick
   Zdancewic, Steve
TI Formal Reasoning about Layered Monadic Interpreters
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Coq; monads; coinduction; compiler correctness
AB Monadic computations built by interpreting, or handling, operations of a free monad are a compelling formalism for modeling language semantics and defining the behaviors of effectful systems. The resulting layered semantics offer the promise of modular reasoning principles based on the equational theory of the underlying monads. However, there are a number of obstacles to using such layered interpreters in practice. With more layers comes more boilerplate and glue code needed to define the monads and interpreters involved. That overhead is compounded by the need to define and justify the relational reasoning principles that characterize the equivalences at each layer.
   This paper addresses these problems by significantly extending the capabilities of the Coq interaction trees (ITrees) library, which supports layered monadic interpreters. We characterize a rich class of interpretable monads-obtained by applying monad transformers to ITrees-and show how to generically lift interpreters through them. We also introduce a corresponding framework for relational reasoning about "equivalence of monads up to a relation R". This collection of typeclasses, instances, new reasoning principles, and tactics greatly generalizes the existing theory of the ITree library, eliminating large amounts of unwieldy boilerplate code and dramatically simplifying proofs.
C1 [Yoon, Irene; Zdancewic, Steve] Univ Penn, Philadelphia, PA 19104 USA.
   [Zakowski, Yannick] INRIA, Lyon, France.
   [Zakowski, Yannick] LIP UMR CNRS ENS Lyon UCB Lyon1 INRIA, Lyon, France.
C3 University of Pennsylvania; Inria
RP Yoon, I (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM euisuny@cis.upenn.edu; yannick.zakowski@inria.fr; stevez@cis.upenn.edu
RI Zdancewic, Steve/JXL-6845-2024
OI Yoon, Irene/0000-0003-3388-1257; Zdancewic, Steve/0000-0002-3516-1512;
   Zakowski, Yannick/0000-0003-4585-6470
FU National Science Foundation [1521539]; ONR [N00014-17-1-2930]
FX We thank Paul He for reading and providing comments on our paper, and we
   thank the anonymous reviewers for their feedback. This material is based
   upon work supported by the National Science Foundation under Grant No.
   1521539 and the ONR under Grant No. N00014-17-1-2930. Any opinions,
   findings, and conclusions or recommendations expressed in this material
   are those of the author and do not necessarily reflect the views of the
   National Science Foundation or the ONR.
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Ahman D, 2017, ACM SIGPLAN NOTICES, V52, P515, DOI 10.1145/3093333.3009878
   [Anonymous], 2004, Ph.D. Dissertation.
   Apfelmus Heinrich, 2010, MONAD READER
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Bauer Andrej, 2013, Algebra and Coalgebra in Computer Science. 5th International Conference, CALCO 2013. Proceedings: LNCS 8089, P1, DOI 10.1007/978-3-642-40206-7_1
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Benton N, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P301, DOI 10.1145/1599410.1599447
   Bloom S. L., 1993, Iteration Theories, P159, DOI [DOI 10.1007/978-3-642-78034-9, 10.1007/978-3-642-78034-9_7, DOI 10.1007/978-3-642-78034-9_7]
   Capretta V, 2005, LOG METH COMPUT SCI, V1, DOI 10.2168/LMCS-1(2:1)2005
   Dal Lago U, 2017, P 32 ANN ACM IEEE S, P1
   Dreyer D, 2009, IEEE S LOG, P71, DOI 10.1109/LICS.2009.34
   Goubault-Larrecq J, 2008, MATH STRUCT COMP SCI, V18, P1169, DOI 10.1017/S0960129508007172
   Hancock P., 2000, Computer Science Logic. 14th International Workshop, CSL 2000. Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.1862), P317
   Hermida Claudio, 2020, ABS200313542 CORR
   Hur CK, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P59
   Hyland M, 2006, THEOR COMPUT SCI, V357, P70, DOI 10.1016/j.tcs.2006.03.013
   Johann Patricia, 2009, Higher-Order and Symbolic Computation, V22, P155, DOI 10.1007/s10990-009-9047-7
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kiselyov O, 2015, ACM SIGPLAN NOTICES, V50, P94, DOI 10.1145/2804302.2804319
   Kiselyov O, 2013, ACM SIGPLAN NOTICES, V48, P59, DOI 10.1145/2503778.2503791
   Koutavas V, 2006, ACM SIGPLAN NOTICES, V41, P141, DOI 10.1145/1111320.1111050
   Letan T, 2018, LECT NOTES COMPUT SC, V10951, P338, DOI 10.1007/978-3-319-95582-7_20
   Li Y, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547632
   Liang Sheng, 2000, LECT NOTES COMPUTER, V1058, DOI [10.1007/3-540-61055-3_39, DOI 10.1007/3-540-61055-3_39]
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Maillard K, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371072
   Maillard K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341708
   McBride C, 2015, LECT NOTES COMPUT SC, V9129, P257, DOI 10.1007/978-3-319-19797-5_13
   Mitchell John C., 1996, Foundation of computing series
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Moggi Eugenio, 1990, ECSLFCS90113 U ED
   Nanevski A, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2491522.2491523
   Peyton Jones S. L., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P71, DOI 10.1145/158511.158524
   Piróg M, 2014, ELECTRON NOTES THEOR, V308, P273, DOI 10.1016/j.entcs.2014.10.015
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Sangiorgi D., 2012, INTRO BISIMULATION C
   Spitters B, 2011, MATH STRUCT COMP SCI, V21, P795, DOI 10.1017/S0960129511000119
   Steele G. L.  Jr., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P472, DOI 10.1145/174675.178068
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   Swierstra W, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341707
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Yoon Irene, 2022, FORMAL REASONING LAY, DOI [10.5281/zenodo.6913915, DOI 10.5281/ZENODO.6913915]
   Zakowski Y, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473572
   Zaliva Vadim, 2020, P 12 WORKING C VERIF, DOI [10.1007/978-3-030-63618-0_3, DOI 10.1007/978-3-030-63618-0_3]
   Zhao JZ, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P427
NR 52
TC 3
Z9 6
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2022
VL 6
IS ICFP
AR 99
DI 10.1145/3547630
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 4J9DL
UT WOS:000851562000010
OA gold
DA 2024-07-18
ER

PT J
AU Clément, B
   Cohen, A
AF Clement, Basile
   Cohen, Albert
TI End-to-End Translation Validation for the Halide Language
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Formal semantics; Domain-specific Languages; Tensor Compilers;
   Polyhedral Compilers; Validation
AB This paper considers the correctness of domain-specific compilers for tensor programming languages through the study of Halide, a popular representative. It describes a translation validation algorithm for affine Halide specifications, independently of the scheduling language. The algorithm relies on "prophetic" annotations added by the compiler to the generated array assignments. The annotations provide a refinement mapping from assignments in the generated code to the tensor definitions from the specification. Our implementation leverages an affine solver and a general SMT solver, and scales to complete Halide benchmarks.
C1 [Clement, Basile] INRIA, Paris, France.
   [Clement, Basile] Ecole Normale Super, Paris, France.
   [Cohen, Albert] Google, Paris, France.
C3 Inria; Universite PSL; Ecole Normale Superieure (ENS); Google
   Incorporated
RP Clément, B (corresponding author), INRIA, Paris, France.; Clément, B (corresponding author), Ecole Normale Super, Paris, France.
EM basile.clement@inria.fr; albert.cohen@google.com
OI Clement, Basile/0000-0002-9126-0937; Cohen, Albert/0000-0002-8866-5343
CR Abadi M., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P165, DOI 10.1109/LICS.1988.5115
   [Anonymous], 1929, Comptes-Rendus du Ler Congress Des Mathematiciens Des Pays Slavs
   Bagnères L, 2016, INT SYM CODE GENER, P128, DOI 10.1145/2854038.2854048
   Banerjee K, 2016, ACM SIGPLAN NOTICES, V51, P31, DOI [10.1145/2980930.2907954, 10.1145/2907950.2907954]
   Bao WL, 2016, ACM SIGPLAN NOTICES, V51, P539, DOI 10.1145/2914770.2837656
   Barrett C, 2005, LECT NOTES COMPUT SC, V3576, P291
   Barrett C., 2010, P 8 INT WORKSHOP SAT, V13, P14
   Barthou D, 2002, LECT NOTES COMPUT SC, V2400, P309
   Baumgartner G, 2005, P IEEE, V93, P276, DOI 10.1109/JPROC.2004.840311
   Bobot F., 2011, BOOGIE 2011 1 INT WO, P53
   Bondhugula U., 2008, INT C COMPILER CONST
   Bondhugula Uday, ACM SIGPLAN C PROGR
   Clement Basile, 2022, END TO END TRANSLATI, DOI [10.5281/zenodo.6390003, DOI 10.5281/ZENODO.6390003]
   Courant N, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434321
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Doerfert J, 2017, INT SYM CODE GENER, P292, DOI 10.1109/CGO.2017.7863748
   FEAUTRIER P, 1991, INT J PARALLEL PROG, V20, P23, DOI 10.1007/BF01407931
   FEAUTRIER P, 1988, RAIRO-RECH OPER, V22, P243
   Grosser T, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2743016
   Iooss G, 2014, LECT NOTES COMPUT SC, V8723, P168, DOI 10.1007/978-3-319-10936-7_11
   Journault M, 2018, FORM METHOD SYST DES, V53, P221, DOI 10.1007/s10703-017-0311-x
   Karfa C, 2013, IEEE T COMPUT AID D, V32, P1787, DOI 10.1109/TCAD.2013.2272536
   Karfa Chandan, P 5 IBM COLL AC RES, DOI [10.1145/2528228.2528231, DOI 10.1145/2528228.2528231]
   KARP RM, 1967, J ACM, V14, P563, DOI 10.1145/321406.321418
   Kundu S, 2009, ACM SIGPLAN NOTICES, V44, P327, DOI 10.1145/1543135.1542513
   Le Verge H., 1991, Journal of VLSI Signal Processing, V3, P173, DOI 10.1007/BF00925828
   Menendez D, 2016, LECT NOTES COMPUT SC, V9837, P317, DOI 10.1007/978-3-662-53413-7_16
   Moreau T, 2019, IEEE MICRO, V39, P8, DOI 10.1109/MM.2019.2928962
   Mullapudi RT, 2016, ACM T GRAPHIC, V35, DOI 10.1145/2897824.2925952
   Mullapudi RT, 2015, ACM SIGPLAN NOTICES, V50, P429, DOI [10.1145/2775054.2694364, 10.1145/2694344.2694364]
   Necula GC, 2000, ACM SIGPLAN NOTICES, V35, P83, DOI 10.1145/358438.349314
   Parrino Bruno Cuervo, 2012, IMPACT 2012 2 INT WO
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Ragan-Kelley J, 2018, COMMUN ACM, V61, P106, DOI 10.1145/3150211
   Ragan-Kelley J, 2012, ACM T GRAPHIC, V31, DOI 10.1145/2185520.2185528
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Rink NA, 2019, ARRAY '2019: PROCEEDINGS OF THE 6TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON LIBRARIES, LANGUAGES AND COMPILERS FOR ARRAY PROGRAMMING, P57, DOI 10.1145/3315454.3329959
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Samsom H., 1995, P 8 INT S SYST SYNTH, DOI [10.1145/224486.224533, DOI 10.1145/224486.224533]
   Shashidhar KC, 2005, LECT NOTES COMPUT SC, V3443, P221, DOI 10.1007/978-3-540-31985-6_15
   Suriana P, 2017, INT SYM CODE GENER, P281, DOI 10.1109/CGO.2017.7863747
   Tate R, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(1:10)2011
   The Coq Development Team, 2021, COQ PROOF ASSISTANT, DOI DOI 10.5281/ZENODO.4501022
   Tristan JB, 2011, ACM SIGPLAN NOTICES, V46, P295, DOI 10.1145/1993316.1993533
   Tristan JB, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P83, DOI 10.1145/1706299.1706311
   Vasilache N, 2019, ACM T ARCHIT CODE OP, V16, DOI 10.1145/3355606
   Vasilache Nicolas, 2018, ARXIV180204730 CSPL
   Verdoolaege S, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362390
   Verdoolaege S, 2010, LECT NOTES COMPUT SC, V6327, P299, DOI 10.1007/978-3-642-15582-6_49
   Verdoolaege S, 2010, J ELECTRON TEST, V26, P279, DOI 10.1007/s10836-009-5140-4
   Zinenko O, 2018, ACM T ARCHIT CODE OP, V15, DOI 10.1145/3177961
NR 51
TC 2
Z9 3
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2022
VL 6
IS OOPSLA
AR 84
DI 10.1145/3527328
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0Y3YX
UT WOS:000790329300020
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Jia, XD
   Kornell, A
   Lindenhovius, B
   Mislove, M
   Zamdzhiev, V
AF Jia, Xiaodong
   Kornell, Andre
   Lindenhovius, Bert
   Mislove, Michael
   Zamdzhiev, Vladimir
TI Semantics for Variational Quantum Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Variational Quantum Programming; Probabilistic Programming; Semantics
AB We consider a programming language that can manipulate both classical and quantum information. Our language is type-safe and designed for variational quantum programming, which is a hybrid classical-quantum computational paradigm. The classical subsystem of the language is the Probabilistic FixPoint Calculus (PFPC), which is a lambda calculus with mixed-variance recursive types, term recursion and probabilistic choice. The quantum subsystem is a first-order linear type system that can manipulate quantum information. The two subsystems are related by mixed classical/quantum terms that specify how classical probabilistic effects are induced by quantum measurements, and conversely, how classical (probabilistic) programs can influence the quantum dynamics. We also describe a sound and computationally adequate denotational semantics for the language. Classical probabilistic effects are interpreted using a recently-described commutative probabilistic monad on DCPO. Quantum effects and resources are interpreted in a category of von Neumann algebras that we show is enriched over (continuous) domains. This strong sense of enrichment allows us to develop novel semantic methods that we use to interpret the relationship between the quantum and classical probabilistic effects. By doing so we provide a very detailed denotational analysis that relates domain-theoretic models of classical probabilistic programming to models of quantum programming.
C1 [Jia, Xiaodong] Hunan Univ, Sch Math, Changsha 410082, Peoples R China.
   [Kornell, Andre; Mislove, Michael] Tulane Univ, Dept Comp Sci, New Orleans, LA 70118 USA.
   [Lindenhovius, Bert] Johannes Kepler Univ Linz, Inst Math Methods Med & Database Modelling, Linz, Austria.
   [Zamdzhiev, Vladimir] Univ Lorraine, INRIA, LORIA, F-54000 Nancy, France.
C3 Hunan University; Tulane University; Johannes Kepler University Linz;
   Universite de Lorraine; Inria
RP Jia, XD (corresponding author), Hunan Univ, Sch Math, Changsha 410082, Peoples R China.
RI Lindenhovius, Bert/ABG-1740-2020
OI Lindenhovius, Bert/0000-0001-5380-4705; Mislove,
   Michael/0000-0002-6650-1399; JIA, XIAODONG/0000-0001-9310-6143
FU NSFC [12001181]; AFOSR under the MURI [FA9550-16-1-0082]; STIC-AmSud
   project QAPLA: "Quantum aspects of programming languages"
FX We thank the anonymous POPL reviewers for their feedback. XJ
   acknowledges the support of NSFC (No. 12001181); AK and MM acknowledge
   financial support from the AFOSR under the MURI grant FA9550-16-1-0082
   entitled, "Semantics, Formal Reasoning, and Tool Support for Quantum
   Programming"; VZ acknowledges support by the STIC-AmSud project QAPLA:
   "Quantum aspects of programming languages."
CR Abadi M, 1996, IEEE S LOG, P242, DOI 10.1109/LICS.1996.561324
   [Anonymous], 1994, Handbook of logic in computer science
   [Anonymous], 2006, ENCYCL MATH SCI
   [Anonymous], 1998, CATEGORIES WORKING M
   Bennett C., 1993, Teleporting an unknown quantum state via dual classical and EPR channels
   Benton N, 1996, IEEE S LOG, P420, DOI 10.1109/LICS.1996.561458
   Benton PN, 1995, LECT NOTES COMPUT SC, V933, P121, DOI 10.1007/BFb0022251
   Cho K, 2016, NEW GENERAT COMPUT, V34, P25, DOI 10.1007/s00354-016-0204-3
   Clairambault P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371131
   Clairambault P, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290345
   Farhi E., 2014, ARXIV
   Fiore M. P., 1994, THESIS U EDINBURGH U
   Fiore Marcelo., 1994, LICS
   Furber R, 2019, CONTINUOUS DCPOS QUA
   Gierz G., 2003, CONTINUOUS LATTICES
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Harper R, 2016, Practical Foundations for Programming Languages
   Jacobs B, 2017, INTRO COALGEBRA, V59, DOI [10.1017/CBO9781316823187, DOI 10.1017/CBO9781316823187]
   Jia Xiaodong, ABS210713347 CORR
   Jones C., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P186, DOI 10.1109/LICS.1989.39173
   Jones C., 1990, PhD thesis
   Kadison R. V., 1997, Grad. Stud. Math., V16
   Keimel K, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(1:2)2017
   Kelley JL., 1975, GEN TOPOLOGY
   Kornell A, 2020, J MATH PHYS, V61, DOI 10.1063/1.5054128
   Landsman K, 2017, FUND THEOR PHYS, V118, P1, DOI 10.1007/978-3-319-51777-3
   Lindenhovius B, 2021, LOG METH COMPUT SCI, V17, DOI 10.23638/LMCS-17(2:9)2021
   Lindenhovius B, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341715
   Lindenhovius Bert, ARXIV210200510CSLO
   Mislove Michael W., 2021, ABS211110873 CORR
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Paetznick A, 2014, QUANTUM INF COMPUT, V14, P1277
   Pagani M, 2014, ACM SIGPLAN NOTICES, V49, P647, DOI 10.1145/2535838.2535879
   Paykin J, 2017, ACM SIGPLAN NOTICES, V52, P846, DOI 10.1145/3093333.3009894
   Péchoux R, 2020, LECT NOTES COMPUT SC, V12077, P562, DOI 10.1007/978-3-030-45231-5_29
   Pechoux Romain., QUANTUM PROGRAMMING
   Peruzzo A, 2014, NAT COMMUN, V5, DOI 10.1038/ncomms5213
   Power J., 1997, Mathematical Structures in Computer Science, V7, P453, DOI 10.1017/S0960129597002375
   Rennela M, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:30)2020
   Selinger P, 2004, MATH STRUCT COMP SCI, V14, P527, DOI 10.1017/S0960129504004256
   Selinger Peter, 2004, P 2 INT WORKSH QUANT
   SMYTH MB, 1982, SIAM J COMPUT, V11, P761, DOI 10.1137/0211062
   Takesaki M., 2000, THEORY OPERATOR ALGE
   Tsukada Takeshi, 2018, **DATA OBJECT**
   Westerbaan Abraham, 2016, ABS160302133 CORR
   Westerbaan Abraham, 2019, THESIS RADBOUD U NIJ
   WOOTTERS WK, 1982, NATURE, V299, P802, DOI 10.1038/299802a0
NR 47
TC 1
Z9 1
U1 2
U2 10
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 26
DI 10.1145/3498687
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900027
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Padon, O
   Wilcox, JR
   Koenig, JR
   McMillan, KL
   Aiken, A
AF Padon, Oded
   Wilcox, James R.
   Koenig, Jason R.
   McMillan, Kenneth L.
   Aiken, Alex
TI Induction Duality: Primal-Dual Search for Invariants
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE invariant inference; induction duality; Houdini; primal-dual Houdini;
   IC3; property directed reachability; counterexample-guided abstraction
   refinement
AB Many invariant inference techniques reason simultaneously about states and predicates, and it is well-known that these two kinds of reasoning are in some sense dual to each other. We present a new formal duality between states and predicates, and use it to derive a new primal-dual invariant inference algorithm. The new induction duality is based on a notion of provability by incremental induction that is formally dual to reachability, and the duality is surprisingly symmetric. The symmetry allows us to derive the dual of the well-known Houdini algorithm, and by combining Houdini with its dual image we obtain primal-dual Houdini, the first truly primal-dual invariant inference algorithm. An early prototype of primal-dual Houdini for the domain of distributed protocol verification can handle difficult benchmarks from the literature.
C1 [Padon, Oded] VMware Res, Palo Alto, CA 94304 USA.
   [Padon, Oded; Koenig, Jason R.; Aiken, Alex] Stanford Univ, Stanford, CA 94305 USA.
   [Wilcox, James R.] Certora, Seattle, WA USA.
   [McMillan, Kenneth L.] Univ Texas Austin, Austin, TX 78712 USA.
C3 VMware, Inc.; Stanford University; University of Texas System;
   University of Texas Austin
RP Padon, O (corresponding author), VMware Res, Palo Alto, CA 94304 USA.; Padon, O (corresponding author), Stanford Univ, Stanford, CA 94305 USA.
EM padon@cs.stanford.edu; james@certora.com; jrkoenig@stanford.edu;
   kenmcm@cs.utexas.edu; aiken@cs.stanford.edu
FU National Science Foundation [CCF-1160904, CCF-1409813]
FX We thank the anonymous reviewers, artifact evaluation reviewers, and
   shepherd for comments and suggestions which improved this paper. This
   work was supported by National Science Foundation grants CCF-1160904 and
   CCF-1409813 as well as a grant of cloud credits from AmazonWeb Services.
CR Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Ball T, 2001, ACM SIGPLAN NOTICES, V36, P203, DOI 10.1145/381694.378846
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Bradley AR, 2008, FORM ASP COMPUT, V20, P379, DOI 10.1007/s00165-008-0080-9
   Bradley AR, 2011, LECT NOTES COMPUT SC, V6538, P70, DOI 10.1007/978-3-642-18275-4_7
   Bradley Aaron R., 2012, Theory and Applications of Satisfiability Testing-SAT 2012-15th International Conference, Trento, Italy, June 17-20, P1, DOI 10.1007/978-3-642-31612-81
   Clarke E, 2003, TIME-ICTL 2003: 10TH INTERNATIONAL SYMPOSIUM ON TEMPORAL REPRESENTATION AND REASONING AND FOURTH INTERNATIONAL CONFERENCE ON TEMPORAL LOGIC, PROCEEDINGS, P7
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Feldman YMY, 2019, LECT NOTES COMPUT SC, V11562, P405, DOI 10.1007/978-3-030-25543-5_23
   Flanagan C., 2001, FME 2001: Formal Methods for Increasing Software Productivity. International Symposium on Formal Methods Europe. Proceedings (Lecture Notes in Computer Science Vol.2021), P500
   Flanagan C, 2001, INFORM PROCESS LETT, V77, P97, DOI 10.1016/S0020-0190(00)00196-4
   Garg P, 2014, LECT NOTES COMPUT SC, V8559, P69, DOI 10.1007/978-3-319-08867-9_5
   Godefroid P, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P43, DOI 10.1145/1706299.1706307
   Goel Aman, 2021, 2021 Formal Methods in Computer Aided Design (FMCAD), P112, DOI 10.34727/2021/isbn.978-3-85448-046-4_20
   Goel Aman, 2021, P LECT NOTES COMPUTE, V12673, P131, DOI [10.1007/978-3- 030-76384- 8_9, DOI 10.1007/978-3-030-76384-8_9]
   Hance T, 2021, PROCEEDINGS OF THE 18TH USENIX SYMPOSIUM ON NETWORKED SYSTEM DESIGN AND IMPLEMENTATION, P115
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Heizmann M, 2009, LECT NOTES COMPUT SC, V5673, P69, DOI 10.1007/978-3-642-03237-0_7
   Hu QP, 2019, LECT NOTES COMPUT SC, V11561, P335, DOI 10.1007/978-3-030-25540-4_18
   Jhala R, 2006, LECT NOTES COMPUT SC, V3920, P459
   Karbyshev A, 2017, J ACM, V64, DOI 10.1145/3022187
   Koenig JR, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P703, DOI 10.1145/3385412.3386018
   Lamport L., 2001, SIGACT News, V32, P51
   Lawvere F William, 1969, Dialectica, V23, P281
   Ma HJ, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P370, DOI 10.1145/3341301.3359651
   Malkhi Dahlia, 2008, Technical Report MSR-TR-2008-192
   Manna Z., 1995, Temporal verification of reactive systems: safety, DOI DOI 10.1007/978-1-4612-4222-2
   McMillan KL, 2014, LECT NOTES COMPUT SC, V8559, P243
   McMillan KL, 2006, LECT NOTES COMPUT SC, V4144, P123
   McMillan KL, 2003, LECT NOTES COMPUT SC, V2725, P1
   Miltner A, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1, DOI 10.1145/3385412.3385967
   Neider D, 2019, LECT NOTES COMPUT SC, V11822, P323, DOI 10.1007/978-3-030-32304-2_16
   Padon O, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3140568
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Padon Oded, 2021, 2021 ARTIFACT POPL 2, DOI [10.5281/zenodo.5703081, DOI 10.5281/ZENODO.5703081]
   Smith Peter., 2010, The Galois Connection Between Syntax and Semantics
   Somenzi F., 2011, 2011 Formal Methods in Computer-Aided Design (FMCAD), P3
   Taube M, 2018, ACM SIGPLAN NOTICES, V53, P662, DOI [10.1145/3296979.3192414, 10.1145/3192366.3192414]
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Yao JA, 2021, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '21), P405
NR 42
TC 4
Z9 4
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 50
DI 10.1145/3498712
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900051
OA gold
DA 2024-07-18
ER

PT J
AU Perera, R
   Nguyen, M
   Petricek, T
   Wang, M
AF Perera, Roly
   Minh Nguyen
   Petricek, Tomas
   Wang, Meng
TI Linked Visualisations via Galois Dependencies
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Galois connections; data provenance
AB We present new language-based dynamic analysis techniques for linking visualisations and other structured outputs to data in a fine-grained way, allowing users to explore how data attributes and visual or other output elements are related by selecting (focusing on) substructures of interest. Our approach builds on bidirectional program slicing techiques based on Galois connections, which provide desirable round-tripping properties. Unlike the prior work, our approach allows selections to be negated, equipping the bidirectional analysis with a De Morgan dual which can be used to link different outputs generated from the same input. This offers a principled language-based foundation for a popular view coordination feature called brushing and linking where selections in one chart automatically select corresponding elements in another related chart.
C1 [Perera, Roly; Petricek, Tomas] Alan Turing Inst, London, England.
   [Perera, Roly; Minh Nguyen; Wang, Meng] Univ Bristol, Bristol, Avon, England.
   [Petricek, Tomas] Univ Kent, Canterbury, Kent, England.
C3 University of Bristol; University of Kent
RP Perera, R (corresponding author), Alan Turing Inst, London, England.
EM rperera@turing.ac.uk; min.nguyen@bristol.ac.uk; tpetricek@kent.ac.uk;
   meng.wang@bristol.ac.uk
RI Petricek, Tomas/A-5195-2014
OI Petricek, Tomas/0000-0002-7242-2208; Wang, Meng/0000-0001-7780-630X;
   Nguyen, Minh/0000-0003-3845-9928
FU UKRI Strategic Priorities Fund under EPSRC [EP/T001569/1]; Alan Turing
   Institute under EPSRC [EP/N510129/1]; Expressive High-Level Languages
   for Bidirectional Transformations, EPSRC [EP/T008911/1]; EPSRC
   [EP/T008911/1] Funding Source: UKRI
FX Perera and Petricek were supported by The UKRI Strategic Priorities Fund
   under EPSRC Grant EP/T001569/1, particularly the Tools, Practices and
   Systems theme within that grant, and by The Alan Turing Institute under
   EPSRC grant EP/N510129/1. Wang was supported by Expressive High-Level
   Languages for Bidirectional Transformations, EPSRC Grant EP/T008911/1.
CR Acar Umut A., 2012, P 1 INT C PRINC SEC, P10, DOI [10.1007/978- 3- 642- 28641- 4_22, DOI 10.1007/978-3-642-28641-4_22]
   [Anonymous], 1989, LECT NOTES COMPUT SC
   Anselin L, 2006, GEOGR ANAL, V38, P5, DOI 10.1111/j.0016-7363.2005.00671.x
   BECKER RA, 1987, TECHNOMETRICS, V29, P127, DOI 10.2307/1269768
   Bird R., 1998, Mathematics of Program Construction. 4th International Conference, MPC'98. Proceedings, P52, DOI 10.1007/BFb0054285
   Bremer Nadieh, 2015, URBANIZATION E ASIA
   Buneman P, 2001, LECT NOTES COMPUT SC, V1973, P316
   CHEN TY, 1988, INFORM SOFTWARE TECH, V30, P497, DOI 10.1016/0950-5849(88)90146-2
   Christian H., 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Partial Evaluation and Semantics-based Program Manipulation, P58
   Connelly R. H., 1995, Mathematical Structures in Computer Science, V5, P381, DOI 10.1017/S0960129500000803
   DeLucia A, 1996, FOURTH WORKSHOP ON PROGRAM COMPREHENSION, PROCEEDINGS, P9, DOI 10.1109/WPC.1996.501116
   Field J, 1998, INFORM SOFTWARE TECH, V40, P609, DOI 10.1016/S0950-5849(98)00087-1
   Gibbons J, 2017, LECT NOTES COMPUT SC, V10201, P556, DOI 10.1007/978-3-662-54434-1_21
   Graf S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408989
   Hall R. J., 1995, Automated Software Engineering, V2, P33, DOI 10.1007/BF00873408
   Hinze R., 2000, Journal of Functional Programming, V10, P327, DOI 10.1017/S0956796800003713
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   McDonald J., 1982, THESIS
   Miller G, 2006, SCIENCE, V314, P1856, DOI 10.1126/science.314.5807.1856
   Newsome J., 2005, Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software
   Perera Roland, 2013, THESIS U BIRMINGHAM
   Perera R, 2012, ACM SIGPLAN NOTICES, V47, P365, DOI 10.1145/2398856.2364579
   Perera Roly, 2016, CONCURRENCY THEORY, DOI [10. 4230/LIPIcs.CONCUR.2016.18, DOI 10.4230/LIPICS.CONCUR.2016.18]
   Pombrio J, 2014, ACM SIGPLAN NOTICES, V49, P361, DOI [10.1145/2666356.2594319, 10.1145/2594291.2594319]
   Psallidas F, 2018, HILDA'18: PROCEEDINGS OF THE WORKSHOP ON HUMAN-IN-THE-LOOP DATA ANALYTICS, DOI 10.1145/3209900.3209904
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Ricciotti W, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110258
   Roberts JC, 2006, INFORMATION VISUALIZATION-BOOK, P151
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Simon L., 2003, J FUNCT PROGRAM, V13, P6
   VanderPlas J., 2018, Journal of Open Source Software, V3, DOI DOI 10.21105/JOSS.01057
   Walny J, 2020, IEEE T VIS COMPUT GR, V26, P12, DOI 10.1109/TVCG.2019.2934538
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
NR 33
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2022
VL 6
AR 7
DI 10.1145/3498668
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA 0G1OB
UT WOS:000777820900008
OA Green Published, Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Ferdowsifard, K
   Barke, S
   Peleg, H
   Lerner, S
   Polikarpova, N
AF Ferdowsifard, Kasra
   Barke, Shraddha
   Peleg, Hila
   Lerner, Sorin
   Polikarpova, Nadia
TI LooPy: Interactive Program Synthesis with Control Structures
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program synthesis; live programming
AB One vision for program synthesis, and specifically for programming by example (PBE), is an interactive programmer's assistant, integrated into the development environment. To make program synthesis practical for interactive use, prior work on Small-Step Live PBE has proposed to limit the scope of synthesis to small code snippets, and enable the users to provide local specifications for those snippets. This paradigm, however, does not work well in the presence of loops. We present LOOPY, a synthesizer integrated into a live programming environment, which extends Small-Step Live PBE to work inside loops and scales it up to synthesize larger code snippets, while remaining fast enough for interactive use. To allow users to effectively provide examples at various loop iterations, even when the loop body is incomplete, LOOPY makes use of live execution, a technique that leverages the programmer as an oracle to step over incomplete parts of the loop. To enable synthesis of loop bodies at interactive speeds, LOOPY introduces Intermediate State Graph, a new data structure, which compactly represents a large space of code snippets composed of multiple assignment statements and conditionals. We evaluate LOOPY empirically using benchmarks from competitive programming and previous synthesizers, and show that it can solve a wide variety of synthesis tasks at interactive speeds. We also perform a small qualitative user study which shows that LOOPY's block-level specifications are easy for programmers to provide.
C1 [Ferdowsifard, Kasra; Barke, Shraddha; Lerner, Sorin; Polikarpova, Nadia] Univ Calif San Diego, San Diego, CA 92093 USA.
   [Peleg, Hila] Technion, Haifa, Israel.
C3 University of California System; University of California San Diego;
   Technion Israel Institute of Technology
RP Ferdowsifard, K (corresponding author), Univ Calif San Diego, San Diego, CA 92093 USA.
EM kferdows@eng.ucsd.edu; sbarke@eng.ucsd.edu; hilap@cs.technion.ac.il;
   lerner@cs.ucsd.edu; npolikarpova@eng.ucsd.edu
OI Lerner, Sorin/0000-0003-3957-0628; , Shraddha/0000-0002-8663-5175;
   Ferdowsi, Kasra/0000-0003-3924-8137
FU National Science Foundation [1911149, 1943623, 1955457, 2107397];
   Division of Computing and Communication Foundations; Direct For Computer
   & Info Scie & Enginr [1943623, 1911149, 1955457, 2107397] Funding
   Source: National Science Foundation
FX We thank Michael B. James and Shravan Narayan for their invaluable
   feedback on earlier iterations of the LooPy UI design. This work was
   supported by the National Science Foundation under Grants No. 1911149,
   1943623, 1955457, and 2107397.
CR Albarghouthi Aws, 2013, INT C COMPUTER AIDED, P934
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, LECT NOTES COMPUT SC, V9207, P163, DOI 10.1007/978-3-319-21668-3_10
   Barke S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428295
   Barman Shaon., 2015, 2015 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software (Onward!), Onward! 2015, P121, DOI 10
   Bavishi R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360594
   Chasins SE, 2018, UIST 2018: PROCEEDINGS OF THE 31ST ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P963, DOI 10.1145/3242587.3242661
   Drosos I, 2020, PROCEEDINGS OF THE 2020 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'20)
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   Ferdowsifard Kasra, 2020, UIST '20: Proceedings of the 33rd Annual ACM Symposium on User Interface Software and Technology, P614, DOI 10.1145/3379337.3415869
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Galenson J, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P653, DOI 10.1145/2568225.2568250
   Gulwani S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P62
   Gvero T, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2499370.2462192
   James MB, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428273
   Kneuss E, 2013, ACM SIGPLAN NOTICES, V48, P407, DOI [10.1145/2509136.2509555, 10.1145/2544173.2509555]
   Leino KRM, 2012, ACM SIGPLAN NOTICES, V47, P411, DOI 10.1145/2398857.2384646
   Lerner Sorin, 2020, PROJECTION BOXES ON, DOI [10.1145/3313831.3376494, DOI 10.1145/3313831.3376494]
   Lubin J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408991
   Mandelin D, 2005, ACM SIGPLAN NOTICES, V40, P48, DOI 10.1145/1064978.1065018
   McDowell Gayle Laakmann, 2015, Cracking the Coding Interview: 189 Programming Questions and Solutions
   Omar C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290327
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Peleg H, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428227
   Peleg Hila., 2020, EUROPEAN C OBJECT OR, DOI DOI 10.4230/LIPICS.ECOOP.2020.2
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Shi KS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290386
   Shi Kensen, 2020, ARXIV PREPRINT ARXIV
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2980983.2908102, 10.1145/2908080.2908102]
   So S, 2017, LECT NOTES COMPUT SC, V10422, P364, DOI 10.1007/978-3-319-66706-5_18
   Udupa A, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2499370.2462174
   Wang CL, 2017, ACM SIGPLAN NOTICES, V52, P452, DOI [10.1145/3140587.3062365, 10.1145/3062341.3062365]
   Yang ZJ, 2018, IEEE INT CONF SOFTW, P161, DOI 10.1109/ICST.2018.00025
NR 34
TC 9
Z9 9
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 153
DI 10.1145/3485530
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200056
OA gold
DA 2024-07-18
ER

PT J
AU Su, T
   Yan, YC
   Wang, J
   Sun, JL
   Xiong, YH
   Pu, GG
   Wang, K
   Su, ZD
AF Su, Ting
   Yan, Yichen
   Wang, Jue
   Sun, Jingling
   Xiong, Yiheng
   Pu, Geguang
   Wang, Ke
   Su, Zhendong
TI Fully Automated Functional Fuzzing of Android Apps for Detecting
   Non-crashing Logic Bugs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE GUI testing; Android apps; Non-crashing functional bugs; Logic bugs
ID TREE EDIT DISTANCE
AB Android apps are GUI-based event-driven software and have become ubiquitous in recent years. Obviously, functional correctness is critical for an app's success. However, in addition to crash bugs, non-crashing functional bugs (in short as "non-crashing bugs" in this work) like inadvertent function failures, silent user data lost and incorrect display information are prevalent, even in popular, well-tested apps. These non-crashing functional bugs are usually caused by program logic errors and manifest themselves on the graphic user interfaces (GUIs). In practice, such bugs pose significant challenges in effectively detecting them because (1) current practices heavily rely on expensive, small-scale manual validation (the lack of automation); and (2) modern fully automated testing has been limited to crash bugs (the lack of test oracles).
   This paper fills this gap by introducing independent view fuzzing, a novel, fully automated approach for detecting non-crashing functional bugs in Android apps. Inspired by metamorphic testing, our key insight is to leverage the commonly-held independent view property of Android apps to manufacture property-preserving mutant tests from a set of seed tests that validate certain app properties. The mutated tests help exercise the tested apps under additional, adverse conditions. Any property violations indicate likely functional bugs for further manual confirmation. We have realized our approach as an automated, end-to-end functional fuzzing tool, Genie. Given an app, (1) Genie automatically detects non-crashing bugs without requiring human-provided tests and oracles (thus fully automated); and (2) the detected non-crashing bugs are diverse (thus general and not limited to specific functional properties), which set Genie apart from prior work.
   We have evaluated Genie on 12 real-world Android apps and successfully uncovered 34 previously unknown non-crashing bugs in their latest releases - all have been confirmed, and 22 have already been fixed. Most of the detected bugs are nontrivial and have escaped developer (and user) testing for at least one year and affected many app releases, thus clearly demonstrating Genie's effectiveness. According to our analysis, Genie achieves a reasonable true positive rate of 40.9%, while these 34 non-crashing bugs could not be detected by prior fully automated GUI testing tools (as our evaluation confirms). Thus, our work complements and enhances existing manual testing and fully automated testing for crash bugs.
C1 [Su, Ting; Yan, Yichen; Sun, Jingling; Xiong, Yiheng; Pu, Geguang] East China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai, Peoples R China.
   [Wang, Jue] Nanjing Univ, State Key Lab Novel Software Technol, Nanjing, Peoples R China.
   [Wang, Ke] Visa Res, Palo Alto, CA USA.
   [Su, Zhendong] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
C3 East China Normal University; Nanjing University; Swiss Federal
   Institutes of Technology Domain; ETH Zurich
RP Su, T (corresponding author), East China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai, Peoples R China.
RI Sun, Jingling/GYR-2603-2022
OI Wang, Jue/0000-0001-9866-2624
FU NSFC [62072178, 61690204]; Google Faculty Research Award; Swiss NSF
   Spark Award [CRSK-2_190302]; Swiss National Science Foundation (SNF)
   [CRSK-2_190302] Funding Source: Swiss National Science Foundation (SNF)
FX We thank the anonymous SPLASH/OOPSLA reviewers for their valuable
   feedback. This work is partially supported by NSFC Project No. 62072178.
   Zhendong Su and Ting Su were partially supported by a Google Faculty
   Research Award. Ting Su was also partially supported by a Swiss NSF
   Spark Award CRSK-2_190302. Jue Wang was partially supported by NSFC
   Project No. 61690204.
CR Accessibility, 2020, ACCESSIBILITY OVERVI
   ADB, 2020, ANDR ADB
   Amalfitano D, 2018, SOFTW TEST VERIF REL, V28, DOI 10.1002/stvr.1654
   Amalfitano D, 2015, IEEE SOFTWARE, V32, P53, DOI 10.1109/MS.2014.55
   AmazeFileManager Team, 2020, AMAZEFILEMANAGER
   Anandan S, 2012, MATER SCI FORUM, V712, P1, DOI 10.4028/www.scientific.net/MSF.712.1
   AnkiDroid Team, 2020, ANKIDROID
   [Anonymous], 2020, ACTIVITY DIARYS ISSU
   [Anonymous], 2015, P 2015 INT S SOFTWAR, P83
   [Anonymous], 2020, ESPRESSO
   [Anonymous], 2020, ACTIVITY DIARY
   [Anonymous], 2020, FINDBUGS
   [Anonymous], 2020, INFER
   [Anonymous], 2020, MONKEY
   [Anonymous], 2020, MAT DESIGN
   [Anonymous], 2020, F DROID
   AntennaPod Team, 2020, ANTENNAPOD
   Appium, 2020, APPIUM MOBILE APP AU
   Azim T, 2013, ACM SIGPLAN NOTICES, V48, P641, DOI [10.1145/2509136.2509549, 10.1145/2544173.2509549]
   Baek YM, 2016, IEEE INT CONF AUTOM, P238, DOI [10.1145/2970276.2970313, 10.1145/2970276.2970310]
   Barr ET, 2015, IEEE T SOFTWARE ENG, V41, P507, DOI 10.1109/TSE.2014.2372785
   Behrang F, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P54, DOI 10.1109/ASE.2019.00016
   Bille P, 2005, THEOR COMPUT SCI, V337, P217, DOI 10.1016/j.tcs.2004.12.030
   Chen T.Y., 1998, Metamorphic testing: a new approach for generating next test cases
   Chen TY, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3143561
   Choi W, 2013, ACM SIGPLAN NOTICES, V48, P623, DOI [10.1145/2544173.2509552, 10.1145/2509136.2509552]
   Choudhary SR, 2015, IEEE INT CONF AUTOM, P429, DOI 10.1109/ASE.2015.89
   Compuware, 2013, USERS HAVE LOW TOLER
   Dong Z, 2020, PROC INT CONF SOFTW, P481, DOI 10.1145/3377811.3380402
   Engler D., 2001, Operating Systems Review, V35, P57, DOI 10.1145/502059.502041
   Fan LL, 2018, IEEE INT CONF AUTOM, P486, DOI 10.1145/3238147.3238170
   Fan LL, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P408, DOI 10.1145/3180155.3180222
   Fard A. M., 2014, Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering, ASE'14, P67, DOI 10.1145/2642937.2642991
   Fazzini M, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P141, DOI 10.1145/3213846.3213869
   Fazzini M, 2017, IEEE INT CONF AUTOM, P308, DOI 10.1109/ASE.2017.8115644
   Google Play, 2020, GOOGLE PLAY STORE
   Gu TX, 2019, PROC INT CONF SOFTW, P269, DOI 10.1109/ICSE.2019.00042
   Hu G., 2014, P 9 EUR C COMP SYST
   Hu G, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P269, DOI 10.1145/3236024.3236055
   Jabbarvand R, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P927, DOI 10.1145/3368089.3409677
   Jacoco Team, 2020, JACOCO
   Jensen C S, 2013, P 2013 INT S SOFTW T, P67, DOI [10.1145/2483760.2483777, DOI 10.1145/2483760.2483777]
   K-9 Mail Team, 2020, K 9 MAIL
   Kochhar PS, 2015, IEEE ICST WORKSHOP
   Kong PF, 2019, IEEE T RELIAB, V68, P45, DOI 10.1109/TR.2018.2865733
   Koroglu Y, 2021, SOFTW TEST VERIF REL, V31, DOI 10.1002/stvr.1752
   Koroglu Y, 2018, LECT NOTES COMPUT SC, V10802, P264, DOI 10.1007/978-3-319-89363-1_15
   Kowalczyk E., 2018, P 1 INT WORKSHOP ADV, P1
   Lam ESL, 2017, PROCEEDINGS OF THE 2017 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD!'17), P58, DOI 10.1145/3133850.3133853
   Li YC, 2017, PROC IEEE ACM INT C, P23, DOI 10.1109/ICSE-C.2017.8
   Lin JW, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P42, DOI 10.1109/ASE.2019.00015
   Lin YD, 2014, IEEE T SOFTWARE ENG, V40, P957, DOI 10.1109/TSE.2014.2331982
   Linares-Vásquez M, 2017, PROC IEEE INT CONF S, P399, DOI 10.1109/ICSME.2017.27
   Linares-Vásquez M, 2017, PROC IEEE INT CONF S, P613, DOI 10.1109/ICSME.2017.47
   Lint, 2020, IMPR YOUR COD LINT C
   Localytics, 2019, 25% of Users Abandon Apps After One Use
   Lu Y, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P268, DOI 10.1145/3338906.3338980
   Machiry A., 2013, P 2013 9 JOINT M FDN, P224
   Mahmood R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P599, DOI 10.1145/2635868.2635896
   Majumdar R, 2007, PROC INT CONF SOFTW, P416
   Malik MI, 2021, EXPERT SYST, V38, DOI 10.1111/exsy.12608
   Mao K., 2016, P 25 INT S SOFTW TES, P94
   Mariani L, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P280, DOI 10.1145/3180155.3180162
   Memon A, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P164, DOI 10.1109/ASE.2003.1240304
   Memon A. M., 2000, Software Engineering Notes, V25, P30, DOI 10.1145/357474.355050
   Mirzaei N, 2016, PROC INT CONF SOFTW, P559, DOI 10.1145/2884781.2884853
   Mirzaei Nariman, 2012, ACM SIGSOFT Software Engineering Notes, V37, P1, DOI DOI 10.1145/2382756.2382798
   Motherboard, 2020, HER SHAD INC APP FAI
   NewPipe Team, 2020, NEWPIPE
   Pawlik M, 2016, INFORM SYST, V56, P157, DOI 10.1016/j.is.2015.08.004
   Pimentel Joao Felipe, 2020, PYTH APTED ALG ED DI
   Robotium, 2020, ROB US SCEN TEST AND
   Rosenfeld A, 2018, 2018 IEEE/ACM 5TH INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT), P122, DOI 10.1145/3197231.3197241
   Rubinov K, 2018, COMPUTER, V51, P60, DOI 10.1109/MC.2018.2141024
   Segura S, 2016, IEEE T SOFTWARE ENG, V42, P805, DOI 10.1109/TSE.2016.2532875
   Shan ZY, 2016, ACM SIGPLAN NOTICES, V51, P864, DOI 10.1145/3022671.2984011
   Sixth Tone, 2019, E COMM APP LOS 10S M
   Song W, 2017, IEEE INT CONF AUTOM, P27, DOI 10.1109/ASE.2017.8115615
   Su T, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P119, DOI 10.1145/3468264.3468620
   Su T, 2022, IEEE T SOFTWARE ENG, V48, P1115, DOI 10.1109/TSE.2020.3013438
   Su T, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P245, DOI 10.1145/3106237.3106298
   Sun CN, 2016, ACM SIGPLAN NOTICES, V51, P849, DOI 10.1145/3022671.2984038
   Sun JL, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P204, DOI 10.1145/3460319.3464806
   Tian YC, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P303, DOI 10.1145/3180155.3180220
   Tolksdorf S, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P273, DOI 10.1145/3293882.3330567
   Tramontana P, 2019, SOFTWARE QUAL J, V27, P149, DOI 10.1007/s11219-018-9418-6
   van der Merwe H, 2012, SIGSOFT SOFTW ENG NO, V37, P1, DOI DOI 10.1145/2382756.2382797
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P216, DOI [10.1145/2666356.2594334, 10.1145/2594291.2594334]
   Wang J, 2020, PROC INT CONF SOFTW, P469, DOI 10.1145/3377811.3380382
   Wang WY, 2018, IEEE INT CONF AUTOM, P738, DOI 10.1145/3238147.3240465
   Wang Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428205
   Xie Q, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1189748.1189752
   Xie XY, 2011, J SYST SOFTWARE, V84, P544, DOI 10.1016/j.jss.2010.11.920
   Yang W, 2013, LECT NOTES COMPUT SC, V7793, P250, DOI 10.1007/978-3-642-37057-1_19
   Yuan X, 2007, PROC INT CONF SOFTW, P396
   Zaeem RN, 2014, 2014 IEEE SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST), P183, DOI 10.1109/ICST.2014.31
   ZHANG KZ, 1989, SIAM J COMPUT, V18, P1245, DOI 10.1137/0218082
   Zheng HB, 2017, 2017 IEEE/ACM 39TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE TRACK (ICSE-SEIP 2017), P253, DOI 10.1109/ICSE-SEIP.2017.32
NR 98
TC 16
Z9 17
U1 0
U2 10
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2021
VL 5
AR 156
DI 10.1145/3485533
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA XQ5EX
UT WOS:000731569200059
OA gold, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Serrano, M
AF Serrano, Manuel
TI Of JavaScript AOT Compilation Performance
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE JavaScript; Scheme; AOT; JIT; Compiler; Dynamic Languages
AB The fastest JavaScript production implementations use just-in-time (JIT) compilation and the vast majority of academic publications about implementations of dynamic languages published during the last two decades focus on JIT compilation. This does not imply that static compilers (AoT) cannot be competitive; as comparatively little effort has been spent creating fast AoT JavaScript compilers, a scientific comparison is lacking. This paper presents the design and implementation of an AoT JavaScript compiler, focusing on a performance analysis. The paper reports on two experiments, one based on standard JavaScript benchmark suites and one based on 18 new benchmarks chosen for their diversity of styles, authors, sizes, provenance, and coverage of the language. The first experiment shows an advantage to JIT compilers, which is expected after the decades of effort that these compilers have paid to these very tests. The second shows more balanced results, as the AoT compiler generates programs that reach competitive speeds and that consume significantly less memory. The paper presents and evaluates techniques that we have either invented or adapted from other systems, to improve AoT JavaScript compilation.
C1 [Serrano, Manuel] Univ Cote dAzur, INRIA, Inria Sophia Mediterranee, 2004 Route Lucioles, F-06902 Sophia Antipolis, France.
C3 Universite Cote d'Azur; Inria
RP Serrano, M (corresponding author), Univ Cote dAzur, INRIA, Inria Sophia Mediterranee, 2004 Route Lucioles, F-06902 Sophia Antipolis, France.
EM Manuel.Serrano@inria.fr
OI Serrano, Manuel/0000-0002-5240-1610
CR Adobe Systems Incorporated, 2020, PUR JAV JPEG ENC DEC
   Ahn W, 2014, ACM SIGPLAN NOTICES, V49, P496, DOI [10.1145/2666356.2594332, 10.1145/2594291.2594332]
   Anderson C, 2005, LECT NOTES COMPUT SC, V3586, P428
   [Anonymous], 2016, ISAACS
   Apple, 2018, WEBK
   Arceri V, 2020, APPL SCI-BASEL, V10, DOI 10.3390/app10103525
   Artoul R., 2015, JAVASCRIPT HIDDEN CL
   Ball T, 2019, PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON MANAGED PROGRAMMING LANGUAGES AND RUNTIMES (MPLR '19), P105, DOI 10.1145/3357390.3361032
   Bauman S, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P22, DOI 10.1145/2784731.2784740
   BOEHM HJ, 1988, SOFTWARE PRACT EXPER, V18, P807, DOI 10.1002/spe.4380180902
   Brown F, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P135, DOI 10.1145/3385412.3385968
   CHAMBERS C, 1989, C P PROGR LANG DES I, DOI DOI 10.1145/73141.74831
   CHAMBERS C, 1989, C P OBJ OR PROGR SYS, DOI DOI 10.1145/74878.74884
   CHANDRA S, 2016, P 2016 ACM SIGPLAN I, DOI DOI 10.1145/3022671.2984017
   Chevalier-Boisvert M., 2014, 29 EUR C OBJ OR PROG
   Choi J, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P889, DOI 10.1145/3314221.3314587
   Choi W, 2015, LECT NOTES COMPUT SC, V9291, P181, DOI 10.1007/978-3-662-48288-9_11
   CLIFFORD D, 2015, P 2015 ACM SIGPLAN I, DOI DOI 10.1145/2887746.2754181
   Dot G, 2017, INT SYM CODE GENER, P257, DOI 10.1109/CGO.2017.7863745
   ECMA International, 2018, ECMA SCRIPT 2018 LAN
   ECMA International, 2015, STAND ECMA 262 ECMA
   Eder, 2020, SIMPLE BASIC INTERPR
   Feeley, 2016, 30 EUR C OBJ OR PROG, DOI [10.4230/LIPIcs. ECOOP.2016.7, DOI 10.4230/LIPICS.ECOOP.2016.7]
   Flanagan, 2002, JAVASCRIPT S DEFINIT
   Gal A, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P465, DOI 10.1145/1542476.1542528
   Google, 2018, V8 JAVASCRIPT ENGINE
   Google, 2019, JIT LESS V8
   GUHA A, 2010, P EUR C OBJ OR PROGR, DOI DOI 10.5555/1883978.1883988
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   HACKETT B, 2012, P C PROGR LANG DES, V47, P239, DOI DOI 10.1145/2345156.2254094
   Halliday, 2020, MINIMIST PARSE ARGUM
   Herczeg, 2015, PERFORMANCE COMP REG
   HOLZLE U, 1991, LECT NOTES COMPUT SC, V512, P21, DOI 10.1007/BFb0057013
   Jeffrey, 2020, MARKED
   Jensen S. H., 2009, LNCS, V5673, DOI 10.1007/978-3-642-03237-0_17
   Kashyap V, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P121, DOI 10.1145/2635868.2635904
   Kazuhiko Arase, 2009, QRCODE JS
   Ko Y, 2015, IEEE INT CONF AUTOM, P541, DOI 10.1109/ASE.2015.28
   LERNER BS, 2013, P 9 S DYNAMIC LANGUA, DOI DOI 10.1145/2578856.2508170
   Logozzo Francesco., 2010, INT C COMPILER CONST, DOI DOI 10.1007/978-3-642-11970-5_5
   Loitsch F., 2008, TRENDS FUNCTIONAL PR, V8, P141
   Loitsch Florian, 2005, P 6 WORKSH SCHEM FUN
   MDN, 2019, SPIDERMONKEY INT
   Meurer, 2016, TRUTH TRADITIONAL JA
   Moment.com, 2020, MOMENT JS
   Monat Raphael, 2020, SOAP 2020: Proceedings of the 9th ACM SIGPLAN International Workshop on the State Of the Art in Program Analysis, P8, DOI 10.1145/3394451.3397205
   Mozilla, 2020, SPIDERMONKEY MOZ JAV
   Mytkowicz T, 2009, ACM SIGPLAN NOTICES, V44, P265, DOI 10.1145/1508284.1508275
   Nielsen B.B., 2020, 34th European Conference on Object-Oriented Programming (ECOOP 2020), volume 166 of Leibniz International Proceedings in Informatics (LIPIcs), p16:1, DOI DOI 10.4230/LIPICS.ECOOP.2020.16
   Park Changhee, 2015, P 29 EUR C OBJ OR PR, V37, P735, DOI 10
   PROKOPEC A, 2019, P 2019 INT S COD GEN
   Qunaibit Mohaned., EUROPEAN C OBJECT OR, DOI [DOI 10.4230/LIPICS.ECOOP.2018.16, 10.4230/LIPIcs.ECOOP.2018.16]
   Ren BM, 2016, ACM SIGPLAN NOTICES, V51, P462, DOI [10.1145/2980983.2908127, 10.1145/2908080.2908127]
   Ress J., 1998, HIGHER ORDER SYMBOLI, V11
   Serrano M, 2020, PROCEEDINGS OF THE 29TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '20), P108, DOI 10.1145/3377555.3377888
   Serrano M, 2019, PROCEEDINGS OF THE 28TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '19), P99, DOI 10.1145/3302516.3307344
   Serrano M, 2018, DLS'18: PROCEEDINGS OF THE 14TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES, P50, DOI 10.1145/3276945.3276950
   Serrano Manuel, 1992, BIGLOO PRACTICAL SCH
   SHIVERS O, 1988, P SIGPLAN 88 ACM SIG, DOI DOI 10.1145/960116.54007
   St-Amour V., 2015, 29th European Conference on Object-Oriented Programming, ECOOP 2015, July 5-10, 2015, Prague, Czech Republic, P271, DOI DOI 10.4230/LIPICS.ECOOP.2015.271
   Strickland TS, 2012, ACM SIGPLAN NOTICES, V47, P943, DOI 10.1145/2398857.2384685
   Team, 2017, RET OCT
   UUID, 2020, CREAT RFC4122 UUIS
   Vouillon, 2020, JS OF OCAML
   Wade AW, 2017, ACM SIGPLAN NOTICES, V52, P1, DOI [10.1145/3078633.3081037, 10.1145/3140582.3081037]
   Wikipedia, 2021, WX
   Wimmer C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360610
   Würthinger T, 2017, ACM SIGPLAN NOTICES, V52, P662, DOI [10.1145/3062341.3062381, 10.1145/3140587.3062381]
NR 68
TC 3
Z9 3
U1 0
U2 6
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2021
VL 5
AR 70
DI 10.1145/3473575
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UD3TY
UT WOS:000687133800010
OA gold
DA 2024-07-18
ER

PT J
AU Aguirre, A
   Barthe, G
   Hsu, J
   Kaminski, BL
   Katoen, JP
   Matheja, C
AF Aguirre, Alejandro
   Barthe, Gilles
   Hsu, Justin
   Kaminski, Benjamin Lucien
   Katoen, Joost-Pieter
   Matheja, Christoph
TI A Pre-expectation Calculus for Probabilistic Sensitivity
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programming; verification
AB Sensitivity properties describe how changes to the input of a program affect the output, typically by upper bounding the distance between the outputs of two runs by a monotone function of the distance between the corresponding inputs. When programs are probabilistic, the distance between outputs is a distance between distributions. The Kantorovich lifting provides a general way of defining a distance between distributions by lifting the distance of the underlying sample space; by choosing an appropriate distance on the base space, one can recover other usual probabilistic distances, such as the Total Variation distance. We develop a relational pre-expectation calculus to upper bound the Kantorovich distance between two executions of a probabilistic program. We illustrate our methods by proving algorithmic stability of a machine learning algorithm, convergence of a reinforcement learning algorithm, and fast mixing for card shuffling algorithms. We also consider some extensions: using our calculus to show convergence of Markov chains to the uniform distribution over states and an asynchronous extension to reason about pairs of program executions with different control flow.
C1 [Aguirre, Alejandro; Barthe, Gilles] IMDEA Software Inst, Madrid, Spain.
   [Aguirre, Alejandro] Univ Politecn Madrid, Madrid, Spain.
   [Barthe, Gilles] MPI SP, Saarbrucken, Germany.
   [Hsu, Justin] Univ Wisconsin Madison, Madison, WI USA.
   [Kaminski, Benjamin Lucien] UCL, London, England.
   [Katoen, Joost-Pieter; Matheja, Christoph] Rhein Westfal TH Aachen, Aachen, Germany.
   [Matheja, Christoph] Swiss Fed Inst Technol, Zurich, Switzerland.
C3 IMDEA Software Institute; Universidad Politecnica de Madrid; University
   of Wisconsin System; University of Wisconsin Madison; University of
   London; University College London; RWTH Aachen University; Swiss Federal
   Institutes of Technology Domain; ETH Zurich
RP Aguirre, A (corresponding author), IMDEA Software Inst, Madrid, Spain.; Aguirre, A (corresponding author), Univ Politecn Madrid, Madrid, Spain.
RI Matheja, Christoph/HZK-7338-2023; Katoen, Joost-Pieter/O-3307-2018
OI Matheja, Christoph/0000-0001-9151-0441; Katoen,
   Joost-Pieter/0000-0002-6143-1926; Kaminski, Benjamin
   Lucien/0000-0001-5185-2324; Hsu, Justin/0000-0002-8953-7060; Aguirre,
   Alejandro/0000-0001-6746-2734
FU National Science Foundation CCF and SaTC [1943130, 2023222]; University
   of Wisconsin; Facebook; Direct For Computer & Info Scie & Enginr;
   Division of Computing and Communication Foundations [1943130] Funding
   Source: National Science Foundation; Division Of Computer and Network
   Systems; Direct For Computer & Info Scie & Enginr [2023222] Funding
   Source: National Science Foundation
FX We thank the anonymous reviewers for their close reading and helpful
   suggestions. This research was partially supported by the National
   Science Foundation CCF and SaTC (1943130 and 2023222), Facebook, and the
   University of Wisconsin. Part of this research was conducted during the
   first author's visit to RWTH Aachen University.
CR ALDOUS D, 1983, LECT NOTES MATH, V986, P243
   Ash R. B., 2000, Probability and Measure Theory, V2nd
   Bacci Giorgio, 2018, LICS18 P 33 ANN ACM, DOI [10.1145/3209108.3209177, DOI 10.1145/3209108.3209177]
   Barthe G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158145
   Batz K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290347
   Batz Kevin, 2021, P ACM PROGR LANG EXP
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Bousquet O, 2002, J MACH LEARN RES, V2, P499, DOI 10.1162/153244302760200704
   Chaudhuri S, 2012, COMMUN ACM, V55, P107, DOI [10.1145/2240236.2240262, 10.1145/2240230.2240282]
   Chaudhuri Swarat, 2010, POPL10 P 37 ANN ACM, p57S70, DOI 10.1145/1706299.1706308
   de Amorim AA, 2017, ACM SIGPLAN NOTICES, V52, P545, DOI [10.1145/3093333.3009890, 10.1145/3009837.3009890]
   de Amorim Arthur Azevedo, 2014, Symposium on Implementation and Application of Functional Programming Languages (IFL), Boston, Massachusetts, DOI DOI 10.1145/2746325.2746335
   Gaboardi Marco, 2013, P POPL 2013, P357, DOI DOI 10.1145/2480359.2429113
   Gebler D, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(4:12)2016
   Gebler D, 2018, J COMPUT SYST SCI, V92, P113, DOI 10.1016/j.jcss.2017.09.011
   Gretz F, 2014, PERFORM EVALUATION, V73, P110, DOI 10.1016/j.peva.2013.11.004
   Hardt Moritz, 2016, INT C MACH LEARN RES, V48
   Huang Zixin, 2018, LNCS, V11138, DOI [10.1007/978-3-030, DOI 10.1007/978-3-030]
   Kaminski BL, 2017, IEEE S LOG
   Kaminski Benjamin Lucien, 2016, LECT NOTES COMPUT SC, V9632, DOI [10.1007/978-3-662-49498-1_15, DOI 10.1007/978-3-662-49498-1_15]
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   McIver Annabelle, 2005, MG COMP SCI
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   Olmedo F, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3156018
   Olmedo Federico, 2016, P 31 ANN ACM S LOG, DOI [10.1145/2933575.2935317, DOI 10.1145/2933575.2935317]
   PARK D, 1969, MACH INTELL, V5
   Piccoli B, 2016, ARCH RATION MECH AN, V222, P1339, DOI 10.1007/s00205-016-1026-7
   Reed Jason, 2010, ACM SIGPLAN INT C FU, DOI [10.1145/1863543.1863568, DOI 10.1145/1863543.1863568]
   Sutton R. S., 1988, Machine Learning, V3, P9, DOI 10.1007/BF00115009
   Villani C, 2009, GRUNDLEHR MATH WISS, V338, P1, DOI 10.1007/978-3-540-71050-9
   Wang PX, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371093
   Winograd-Cort Daniel, 2017, ACM SIGPLAN INT C FU, DOI [10.1145/3110254, DOI 10.1145/3110254]
NR 32
TC 7
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 52
DI 10.1145/3434333
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100052
OA Green Submitted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Chen, CH
   Sabry, A
AF Chen, Chao-Hong
   Sabry, Amr
TI A Computational Interpretation of Compact Closed Categories: Reversible
   Programming with Negative and Fractional Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Abstract Machines; Duality of Computation; Higher-Order Reversible
   Programming; Termination Proofs; Type Isomorphisms
ID CALL-BY-VALUE; ALGEBRE HOMOLOGIQUE; ISOMORPHISMS
AB Compact closed categories include objects representing higher-order functions and are well-established as models of linear logic, concurrency, and quantum computing. We show that it is possible to construct such compact closed categories for conventional sum and product types by defining a dual to sum types, a negative type, and a dual to product types, a fractional type. Inspired by the categorical semantics, we define a sound operational semantics for negative and fractional types in which a negative type represents a computational effect that "reverses execution flow" and a fractional type represents a computational effect that "garbage collects" particular values or throws exceptions.
   Specifically, we extend a first-order reversible language of type isomorphisms with negative and fractional types, specify an operational semantics for each extension, and prove that each extension forms a compact closed category. We furthermore show that both operational semantics can be merged using the standard combination of backtracking and exceptions resulting in a smooth interoperability of negative and fractional types. We illustrate the expressiveness of this combination by writing a reversible SAT solver that uses backtracking search along freshly allocated and de-allocated locations. The operational semantics, most of its meta-theoretic properties, and all examples are formalized in a supplementary Agda package.
C1 [Chen, Chao-Hong; Sabry, Amr] Indiana Univ, Bloomington, IN 47405 USA.
C3 Indiana University System; Indiana University Bloomington
RP Chen, CH (corresponding author), Indiana Univ, Bloomington, IN 47405 USA.
EM chen464@indiana.edu; sabry@indiana.edu
OI Sabry, Amr/0000-0002-1025-7331; Chen, Chao-Hong/0000-0002-9314-8105
FU National Science Foundation [1936353]; MPS Multidisciplinary Activities;
   Direct For Mathematical & Physical Scien [1936353] Funding Source:
   National Science Foundation
FX We sincerely thank the anonymous for their careful reviews, comments,
   and feedback that improved the paper. We also acknowledge Jacques
   Carette and Vikraman Choudhury for many discussions and collaborations
   that shaped the current work. Finally, we gratefully acknowledge the
   insights of Roshan James who conceived of the idea of negative and
   fractional types as early as 2012 in his unpublished manuscript. This
   material is based upon work supported by the National Science Foundation
   under Grant No. 1936353. Any opinions, findings, and conclusions or
   recommendations expressed in this material are those of the author and
   do not necessarily reflect the views of the National Science Foundation.
CR Abramsky S, 2005, THEOR COMPUT SCI, V347, P441, DOI 10.1016/j.tcs.2005.07.002
   Abramsky S, 2004, IEEE S LOG, P415, DOI 10.1109/LICS.2004.1319636
   ABRAMSKY S, 1994, INFORM COMPUT, V111, P53, DOI 10.1006/inco.1994.1041
   Abramsky S., 2002, MATH STRUCT COMP SCI, V12, P5
   Abramsky S., 1996, P NATO ADV STUD I DE, P35
   Aman Bogdan, 2020, FDN REVERSIBLE COMPU, P1, DOI [10.1007/978-3-030-47361- 7_1, DOI 10.1007/978-3-030-47361-7_1]
   [Anonymous], 1974, Studia Logica
   [Anonymous], 1974, Fundamenta Mathematicae
   [Anonymous], 1971, COMBINATORIAL MATH I
   Ariola Zena M., 2009, Higher-Order and Symbolic Computation, V22, P233, DOI 10.1007/s10990-007-9006-0
   BENABOU J, 1964, CR HEBD ACAD SCI, V258, P771
   BENABOU J, 1963, CR HEBD ACAD SCI, V256, P1887
   BENNETT CH, 1989, SIAM J COMPUT, V18, P766, DOI 10.1137/0218053
   BENNETT CH, 1973, IBM J RES DEV, V17, P525, DOI 10.1147/rd.176.0525
   BLASS A, 1995, J PURE APPL ALGEBRA, V103, P1, DOI 10.1016/0022-4049(95)00098-H
   Bowman William J., 2011, RC 2011
   Carette J, 2016, LECT NOTES COMPUT SC, V9632, P123, DOI 10.1007/978-3-662-49498-1_6
   Chan S. M, 2013, THESIS U CALIFORNIA
   Chao-Hong Chen, 2020, Reversible Computation. 12th International Conference, RC 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12227), P169, DOI 10.1007/978-3-030-52482-1_10
   Clark S., 2008, P 2 QUANTUM INTERACT, P133
   Crolard T, 2004, J LOGIC COMPUT, V14, P529, DOI 10.1093/logcom/14.4.529
   Crolard T, 2001, THEOR COMPUT SCI, V254, P151, DOI 10.1016/S0304-3975(99)00124-3
   Curien PL, 2000, ACM SIGPLAN NOTICES, V35, P233, DOI 10.1145/357766.351262
   del Rio L, 2011, NATURE, V474, P61, DOI 10.1038/nature10123
   Filinski A., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P27, DOI 10.1145/143165.143174
   Filinski Andrzej, 1989, CATEGORY THEORY COMP
   Fiore M, 2006, ANN PURE APPL LOGIC, V141, P35, DOI 10.1016/j.apal.2005.09.001
   Fiore M, 2004, ACM SIGPLAN NOTICES, V39, P77, DOI 10.1145/982962.964008
   Fiore Marcelo, 2015, ARXIV150606402MATHCT ARXIV150606402MATHCT
   FREDKIN E, 1982, INT J THEOR PHYS, V21, P219, DOI 10.1007/BF01857727
   Girard Jean-Yves, 1989, SER STUDIES LOGIC FD, V127, P221
   Glück R, 2018, ELECTRON NOTES THEOR, V336, P155, DOI 10.1016/j.entcs.2018.03.021
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Heunen C., 2019, Categories for quantum theory
   Heunen C, 2018, ELECTRON NOTES THEOR, V341, P179, DOI 10.1016/j.entcs.2018.11.009
   Heunen C, 2015, ELECTRON NOTES THEOR, V319, P217, DOI 10.1016/j.entcs.2015.12.014
   Honsell F, 2004, ANN NY ACAD SCI, V3085, P242
   Hu Jason Z.S., 2020, PROOF RELEVANT CATEG
   James RP, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P73
   James Roshan P, 2013, FRACTIONAL TYPES
   James Roshan P., 2 DUALITIES COMPUTAT 2 DUALITIES COMPUTAT
   James Roshan P, 2014, C REV COMP C REV COMP
   Joyal A, 1996, MATH PROC CAMBRIDGE, V119, P447, DOI 10.1017/S0305004100074338
   Kaarsgaard R, 2019, LECT NOTES COMPUT SC, V11825, P366, DOI 10.1007/978-3-030-33636-3_13
   Kastl J., 1979, Stud. Algebra Anwendungen, V7, P51
   Kelly G.M., 1972, LN, V281, P66
   KELLY GM, 1980, J PURE APPL ALGEBRA, V19, P193, DOI 10.1016/0022-4049(80)90101-2
   Laplaza, 1972, Lecture Notes in Mathematics), V281, P29, DOI [10.1007/BFb0059555, DOI 10.1007/BFB0059555]
   LOEB D, 1992, ADV MATH, V91, P64, DOI 10.1016/0001-8708(92)90011-9
   Mackie I., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P198, DOI 10.1145/199448.199483
   Mackie Ian, 2011, WORKSH REV COMP WORKSH REV COMP
   MacLane Saunders., 1963, Rice Institute Pamphlet-Rice University Studies, V49, P4
   Oppenheim Jonathan, 2005, QUANTPH0511247 ARXIV QUANTPH0511247 ARXIV
   Panangaden P, 2011, LECT NOTES PHYS, V813, P983, DOI 10.1007/978-3-642-12821-9_15
   Propp James, 2002, ARXIVMATH0203289MATH ARXIVMATH0203289MATH
   Rauszer C., 1980, DISSERTATIONES MATH, VCLXVII
   Reddy Udday S., 1991, ACCEPTORS VALU UNPUB ACCEPTORS VALU UNPUB
   Sabry A, 2018, LECT NOTES COMPUT SC, V10803, P348, DOI 10.1007/978-3-319-89366-2_19
   SCHANUEL SH, 1991, LECT NOTES MATH, V1488, P379
   Selinger P, 2011, LECT NOTES PHYS, V813, P289, DOI 10.1007/978-3-642-12821-9_4
   Selinger P., 2001, Mathematical Structures in Computer Science, V11, P207, DOI 10.1017/S096012950000311X
   Sparks Zachary, 2014, 3 INT WORKSH LIN 3 INT WORKSH LIN
   Thomsen MK, 2015, LECT NOTES COMPUT SC, V9138, P200, DOI 10.1007/978-3-319-20860-2_13
   Toffoli T., 1980, Automata, Languages and Programming, Seventh Colloquium, P632
   Wadler P, 2005, LECT NOTES COMPUT SC, V3467, P185
   Wadler P, 2003, ACM SIGPLAN NOTICES, V38, P189, DOI 10.1145/944746.944723
   Yokoyama T., 2007, P 2007 ACM SIGPLAN W, P144, DOI DOI 10.1145/1244381.1244404
   Yokoyama T, 2016, THEOR COMPUT SCI, V611, P87, DOI 10.1016/j.tcs.2015.07.046
NR 68
TC 4
Z9 5
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 9
DI 10.1145/3434290
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100009
OA gold
DA 2024-07-18
ER

PT J
AU Choudhury, P
   Eades, H
   Eisenberg, RA
   Weirich, S
AF Choudhury, Pritam
   Eades, Harley, III
   Eisenberg, Richard A.
   Weirich, Stephanie
TI A Graded Dependent Type System with a Usage-Aware Semantics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Irrelevance; linearity; quantitative reasoning; heap semantics
ID LOGIC
AB Graded Type Theory provides a mechanism to track and reason about resource usage in type systems. In this paper, we develop GraD, a novel version of such a graded dependent type system that includes functions, tensor products, additive sums, and a unit type. Since standard operational semantics is resource-agnostic, we develop a heap-based operational semantics and prove a soundness theorem that shows correct accounting of resource usage. Several useful properties, including the standard type soundness theorem, non-interference of irrelevant resources in computation and single pointer property for linear resources, can be derived from this theorem. We hope that our work will provide a base for integrating linearity, irrelevance and dependent types in practical programming languages like Haskell.
C1 [Choudhury, Pritam; Weirich, Stephanie] Univ Penn, Comp & Informat Sci, 3330 Walnut St, Philadelphia, PA 19104 USA.
   [Eades, Harley, III] Augusta Univ, Sch Comp & Cyber Sci, 2500 Walton Way, Augusta, GA 30904 USA.
   [Eisenberg, Richard A.] Tweag IO, Paris, France.
   [Eisenberg, Richard A.] Bryn Mawr Coll, Comp Sci, 101 N Merion Ave, Bryn Mawr, PA 19010 USA.
C3 University of Pennsylvania; University System of Georgia; Augusta
   University; Bryn Mawr College
RP Choudhury, P (corresponding author), Univ Penn, Comp & Informat Sci, 3330 Walnut St, Philadelphia, PA 19104 USA.
EM pritam@seas.upenn.edu; harley.eades@gmail.com; rae@richarde.dev;
   sweirich@cis.upenn.edu
OI Eisenberg, Richard/0000-0002-7669-9781
FU National Science Foundation [1521539, 1704041]; Division of Computing
   and Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1704041, 1521539] Funding Source: National Science Foundation
FX This material is based upon work supported by the National Science
   Foundation under Grant No. 1521539, and Grant No. 1704041. Any opinions,
   findings, and conclusions or recommendations expressed in this material
   are those of the author and do not necessarily reflect the views of the
   National Science Foundation.
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Abel A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408972
   Abel A, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:29)2012
   Abel Andreas, 2018, 4 INT C TYP PROOFS P
   [Anonymous], 1990, IFIP TC 2 Working Conference on Programming Concepts and Methods, Sea of Galilee, Israel
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Atkey Robert, 2020, ARXIV200502247CSPL
   Barendregt H.P., 1993, LAMBDA CALCULI TYPES, P117, DOI DOI 10.5555/162552.162561
   Barras B, 2008, LECT NOTES COMPUT SC, V4962, P365, DOI 10.1007/978-3-540-78499-9_26
   Benton PN, 1995, LECT NOTES COMPUT SC, V933, P121, DOI 10.1007/BFb0022251
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Brady Edwin, 2020, IDRIS
   Brunel A, 2014, LECT NOTES COMPUT SC, V8410, P351
   Cervesato I, 2002, INFORM COMPUT, V179, P19, DOI 10.1006/inco.2001.2951
   Chirimar J., 1996, Journal of Functional Programming, V6, P195, DOI 10.1017/S0956796800001660
   Dal Lago U, 2011, IEEE S LOG, P133, DOI 10.1109/LICS.2011.22
   Dal Lago U, 2009, LECT NOTES COMPUT SC, V5608, P80, DOI 10.1007/978-3-642-02273-9_8
   Eisenberg Richard, 2016, Ph. D. Dissertation
   Eisenberg Richard A., 2018, QUANTIFIERS DEPENDEN
   Gaboardi Marco, 2016, ACM SIGPLAN Notices, V51, P476, DOI 10.1145/3022670.2951939
   Gaboardi M, 2013, ACM SIGPLAN NOTICES, V48, P357, DOI 10.1145/2480359.2429113
   Ghica DR, 2014, LECT NOTES COMPUT SC, V8410, P331
   GIRARD JY, 1992, THEOR COMPUT SCI, V97, P1, DOI 10.1016/0304-3975(92)90386-T
   Golan J. S., 1999, SEMIRINGS THEIR APPL, DOI 10.1007/978-94-015-9333-5
   Gundry Adam, 2013, Ph. D. Dissertation
   Krishnaswami NR, 2015, ACM SIGPLAN NOTICES, V50, P17, DOI [10.1145/2676726.2676969, 10.1145/2775051.2676969]
   Launchbury J., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P144, DOI 10.1145/158511.158618
   McBride Conor, 2016, LNCS, P207, DOI DOI 10.1007/978-3-319-30936-1
   Miquel A, 2001, LECT NOTES COMPUT SC, V2044, P344
   Mishra-Linger N, 2008, LECT NOTES COMPUT SC, V4962, P350, DOI 10.1007/978-3-540-78499-9_25
   Orchard D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341714
   Orchard Dominic, 2020, GRADED MODAL DEPENDE
   Petit Barbara, 2012, ACM PPDP 2012, P115
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Pfenning F, 2001, IEEE S LOG, P221, DOI 10.1109/LICS.2001.932499
   Reed J, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P157
   Streicher Thomas, 2001, A01R262
   The Agda-Team, 2020, RUN TIM IRR
   Turner DN, 1999, THEOR COMPUT SCI, V227, P231, DOI 10.1016/S0304-3975(99)00054-7
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Weirich S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341705
   Weirich S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110275
NR 42
TC 14
Z9 14
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 50
DI 10.1145/3434331
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100050
OA gold
DA 2024-07-18
ER

PT J
AU Hirsch, AK
   Cecchetti, E
AF Hirsch, Andrew K.
   Cecchetti, Ethan
TI Giving Semantics to Program-Counter Labels via Secure Effects
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE semantics of effects; information-flow control; noninterference
AB Type systems designed for information-flow control commonly use a program-counter label to track the sensitivity of the context and rule out data leakage arising from effectful computation in a sensitive context. Currently, type-system designers reason about this label informally except in security proofs, where they use ad-hoc techniques. We develop a framework based on monadic semantics for effects to give semantics to program-counter labels. This framework leads to three results about program-counter labels. First, we develop a new proof technique for noninterference, the core security theorem for information-flow control in effectful languages. Second, we unify notions of security for different types of effects, including state, exceptions, and nontermination. Finally, we formalize the folklore that program-counter labels are a lower bound on effects. We show that, while not universally true, this folklore has a good semantic foundation.
C1 [Hirsch, Andrew K.] Max Planck Inst Software Syst, Kaiserslautern, Germany.
   [Hirsch, Andrew K.] Max Planck Inst Software Syst, Saarbrucken, Germany.
   [Cecchetti, Ethan] Cornell Univ, Ithaca, NY 14853 USA.
C3 Max Planck Society; Max Planck Society; Cornell University
RP Hirsch, AK (corresponding author), Max Planck Inst Software Syst, Kaiserslautern, Germany.; Hirsch, AK (corresponding author), Max Planck Inst Software Syst, Saarbrucken, Germany.
EM akhirsch@mpi-sws.org; ethan@cs.cornell.edu
RI Hirsch, Andrew K./AAB-1055-2021
OI Hirsch, Andrew K./0000-0003-2518-614X; Cecchetti,
   Ethan/0000-0001-7900-8328
FU National Defense Science and Engineering Graduate (NDSEG) Fellowship
   Program - Air Force Research Laboratory (AFRL); Office of Naval Research
   (ONR); Army Research Office (ARO)
FX This project was supported in part by a fellowship awarded through the
   National Defense Science and Engineering Graduate (NDSEG) Fellowship
   Program, sponsored by the Air Force Research Laboratory (AFRL), the
   Office of Naval Research (ONR), and the Army Research Office (ARO). Any
   opinions, findings, conclusions, or recommendations expressed here are
   those of the authors and may not reflect those of these sponsors.
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Algehed M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341693
   Algehed M, 2017, PROCEEDINGS OF THE 2017 WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY (PLAS' 17), P77, DOI 10.1145/3139337.3139338
   Arden Owen, 2017, THESIS CORNELL U, DOI [10.7298/X4HX19P9, DOI 10.7298/X4HX19P9]
   Askarov Aslan, 2008, EUR S RES COMP SEC E, DOI DOI 10.1007/978-3-540-88313-5_22
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Bay J, 2020, P IEEE COMPUT SECUR, P95, DOI 10.1109/CSF49147.2020.00015
   Bowman WJ, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P101, DOI 10.1145/2784731.2784733
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Felleisen Matthias, 1990, EUR S PROGR ESOP, DOI DOI 10.1007/3-540-52592-0_60
   Fujii S, 2016, LECT NOTES COMPUT SC, V9634, P513, DOI 10.1007/978-3-662-49630-5_30
   Galatos Nikolaos, 2007, Residuated lattices: an algebraic glimpse at substructural logics, V151
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Heintze N., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P365, DOI 10.1145/268946.268976
   Hirsch Andrew K., 2020, GIVING SEMANTICS PRO
   Jeffrey Alan, 1997, PREMONOIDAL CATEGOIE
   Katsumata S, 2014, ACM SIGPLAN NOTICES, V49, P633, DOI 10.1145/2535838.2535846
   Kavvos GA, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290333
   Kocher P. C., 1996, Advances in Cryptology - CRYPTO'96. 16th Annual International Cryptology Conference. Proceedings, P104
   Leijen Daan, 2016, TYPE DIRECTED COMPIL
   Liu J, 2017, J COMPUT SECUR, V25, P367, DOI 10.3233/JCS-15805
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Magrino Tom, 2016, JIF 3 5 JAVA INFORM
   Marino D., 2009, P 2009 ACM SIGPLAN I, P39, DOI DOI 10.1145/1481861.1481868
   Milano M, 2018, ACM SIGPLAN NOTICES, V53, P226, DOI [10.1145/3192366.3192375, 10.1145/3296979.3192375]
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moggi E., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P14, DOI 10.1109/LICS.1989.39155
   Moore Scott, 2012, COMPUTER SECURITY FD, P881
   Myers A. C., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P228, DOI 10.1145/292540.292561
   Nielson F, 1996, ACM COMPUT SURV, V28, P344, DOI 10.1145/234528.234745
   Nielson Flemming, 1999, CORRECT SYSTEM DESIG, DOI [10.1007/3-540-48092-7_6, DOI 10.1007/3-540-48092-7_6]
   Orchard Dominic, 2014, SEMANTIC MARRIAGE EF
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Pottier F., 2002, SIGPLAN Notices, V37, P319, DOI 10.1145/565816.503302
   Pretnar Matija, 2010, Phdthesis
   Rafnsson Willard, 2014, COMPUTER SECURITY FD, DOI [DOI 10.1109/CSF.2013.8, 10.1109/CSF. 2013.8]
   Rajani V, 2018, P IEEE COMPUT SECUR, P233, DOI 10.1109/CSF.2018.00024
   Russo A, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P13
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sabelfeld A., 2001, Higher-Order and Symbolic Computation, V14, P59, DOI 10.1023/A:1011553200337
   Shikuma Naokata, 2008, LOG METH COMPUT SCI, V4, P10, DOI [10.2168/LMCS-4(3:10)2008, DOI 10.2168/LMCS-4(3:10)2008]
   Stefan Deian, 2011, HASK S HASKELL, DOI DOI 10.1145/2034675.2034688
   Tate Ross, 2013, 40 ANN ACM S PRINC P, DOI [DOI 10.1145/2480359.2429074, 10.1145/2429069.2429074, DOI 10.1145/2429069.2429074]
   Thiemann Peter, 1998, P 3 ACM SIGPLAN INT, DOI DOI 10.1145/289423.289429
   Tsai TC, 2007, 20TH IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSFS20), PROCEEDINGS, P187, DOI 10.1109/CSF.2007.6
   Tse S, 2004, ACM SIGPLAN NOTICES, V39, P115, DOI 10.1145/1016848.1016868
   Vassena M, 2018, J LOG ALGEBR METHODS, V95, P148, DOI 10.1016/j.jlamp.2017.12.003
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Volpano D, 1997, P IEEE CSFW, P156, DOI 10.1109/CSFW.1997.596807
   Waye L, 2015, LECT NOTES COMPUT SC, V9331, P203, DOI 10.1007/978-3-319-24858-5_13
   Zdancewic S., 2002, Higher-Order and Symbolic Computation, V15, P209, DOI 10.1023/A:1020843229247
NR 54
TC 2
Z9 4
U1 1
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2021
VL 5
AR 35
DI 10.1145/3434316
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA TS7DO
UT WOS:000679806100035
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Koparkar, C
   Rainey, M
   Vollmer, M
   Kulkarni, M
   Newton, RR
AF Koparkar, Chaitanya
   Rainey, Mike
   Vollmer, Michael
   Kulkarni, Milind
   Newton, Ryan R.
TI Efficient Tree-Traversals: Reconciling Parallelism and Dense Data
   Representations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Parallelism; Region Calculus; Compilers; Data Representation
AB Recent work showed that compiling functional programs to use dense, serialized memory representations for recursive algebraic datatypes can yield significant constant-factor speedups for sequential programs. But serializing data in a maximally dense format consequently serializes the processing of that data, yielding a tension between density and parallelism. This paper shows that a disciplined, practical compromise is possible. We present Parallel Gibbon, a compiler that obtains the benefits of dense data formats and parallelism. We formalize the semantics of the parallel location calculus underpinning this novel implementation strategy, and show that it is type-safe. Parallel Gibbon exceeds the parallel performance of existing compilers for purely functional programs that use recursive algebraic datatypes, including, notably, abstract-syntax-tree traversals as in compilers.
C1 [Koparkar, Chaitanya] Indiana Univ, Bloomington, IN 47405 USA.
   [Rainey, Mike] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Vollmer, Michael] Univ Kent, Sch Comp, Canterbury, Kent, England.
   [Kulkarni, Milind; Newton, Ryan R.] Purdue Univ, W Lafayette, IN 47907 USA.
C3 Indiana University System; Indiana University Bloomington; Carnegie
   Mellon University; University of Kent; Purdue University System; Purdue
   University
RP Koparkar, C (corresponding author), Indiana Univ, Bloomington, IN 47405 USA.
EM ckoparka@indiana.edu; me@mike-rainey.site; m.vollmer@kent.ac.uk;
   milind@purdue.edu; rrnewton@purdue.edu
FU National Science Foundation [CCF-1725672, CCF1725679, CCF-1919197];
   Engineering and Physical Sciences Research Council [EP/T013516/1]; EPSRC
   [EP/T013516/1] Funding Source: UKRI
FX This work was supported in part by National Science Foundation awards
   CCF-1725672, CCF1725679 and CCF-1919197, as well as by the Engineering
   and Physical Sciences Research Council award EP/T013516/1. We would like
   to thank our shepherd, Cyrus Omar, as well as the anonymous reviewers
   for their suggestions and comments.
CR Abadi Martin, 2016, TENSORFLOW LARGE SCA, V16, P265
   Acar UA, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P214, DOI 10.1145/3293883.3295725
   Acar Umut A, 2018, HEARTBEAT SCHEDULING
   Anderson Todd A., 2017, 31 EUR C OBJ OR PROG, V74
   [Anonymous], 1997, The Definition of Standard ML
   Bergstrom L, 2013, ACM SIGPLAN NOTICES, V48, P81, DOI 10.1145/2517327.2442525
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Blelloch G.E., 1992, NESL NESTED DATA PAR
   Blumofe R. D., 1995, SIGPLAN Notices, V30, P207, DOI 10.1145/209937.209958
   Bocchino Robert L., 2010, P HIGH PERF GRAPH, P77
   Chakravarty M. M., 2011, P 6 WORKSH DECL ASP, P3, DOI DOI 10.1145/1926354.1926358
   Chlipala A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P10, DOI 10.1145/2784731.2784741
   Dagum L, 1998, IEEE COMPUT SCI ENG, V5, P46, DOI 10.1109/99.660313
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Friedman J. H., 1977, ACM Transactions on Mathematical Software, V3, P209, DOI 10.1145/355744.355745
   Goldfarb M, 2013, INT CONF HIGH PERFOR, DOI 10.1145/2503210.2503223
   Guatto Adrien, 2018, ACM SIGPLAN Notices, V53, P81, DOI 10.1145/3200691.3178494
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Harris T, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P251
   Keller G, 1998, LECT NOTES COMPUT SC, V1470, P709, DOI 10.1007/BFb0057920
   Koparkar C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473596
   Kuper L, 2014, ACM SIGPLAN NOTICES, V49, P2, DOI 10.1145/2666356.2594312
   Lea Doug, 2000, JAVA, P36
   Leroy Xavier, 2020, OCAML SYSTEM RELEASE
   MAKINO J, 1990, J COMPUT PHYS, V87, P148, DOI 10.1016/0021-9991(90)90231-O
   Marlow S, 2011, ACM SIGPLAN NOTICES, V46, P71, DOI 10.1145/2096148.2034685
   Marlow S, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P11
   Meyerovich Leo A., 2011, HOTPAR
   NIKHIL A, 1989, ACM T PROGR LANG SYS, V11, P598, DOI 10.1145/69558.69562
   Paszke A, 2019, ADV NEUR IN, V32
   Raghunathan R, 2016, ACM SIGPLAN NOTICES, V51, P392, DOI 10.1145/3022670.2951935
   Rainey Mike, 2021, TASK PARALLEL ASSEMB
   Reppy J, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P257
   Sarkar D, 2004, ACM SIGPLAN NOTICES, V39, P201, DOI 10.1145/1016848.1016878
   Shun Julian, 2012, ACM Symposium on Parallelism in Algorithms and Architectures (SPAA), P68
   Siek Jeremy, 2020, ESSENTIALS COMPILATI
   Sivaramakrishnan KC, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408995
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tofte M., 2004, Higher-Order and Symbolic Computation, V17, P245, DOI 10.1023/B:LISP.0000029446.78563.a4
   Ueno K, 2016, ACM SIGPLAN NOTICES, V51, P421, DOI 10.1145/3022670.2951944
   Varda Kenton, 2015, Cap'n Proto
   Vollmer M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P48, DOI 10.1145/3314221.3314631
   Vollmer Michael, 2017, Compiling Tree Transforms to Operate on Packed Representations, V74, DOI DOI 10.4230/LIPICS.ECOOP.2017.26
   Westrick S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371115
   Yang EZ, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P362, DOI 10.1145/2784731.2784735
NR 45
TC 0
Z9 0
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PY 2021
VL 5
AR 91
DI 10.1145/3473596
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UQ9LK
UT WOS:000696379100031
OA Green Submitted, gold, Green Accepted
DA 2024-07-18
ER

PT J
AU Grosser, T
   Theodoridis, T
   Falkenstein, M
   Pitchanathan, A
   Kruse, M
   Rigger, M
   Su, ZD
   Hoefler, T
AF Grosser, Tobias
   Theodoridis, Theodoros
   Falkenstein, Maximilian
   Pitchanathan, Arjun
   Kruse, Michael
   Rigger, Manuel
   Su, Zhendong
   Hoefler, Torsten
TI Fast Linear Programming through Transprecision Computing on Small and
   Sparse Data
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Simplex; Linear Programming; Transprecision; Presburger Arithmetic
AB A plethora of program analysis and optimization techniques rely on linear programming at their heart. However, such techniques are often considered too slow for production use. While today's best solvers are optimized for complex problems with thousands of dimensions, linear programming, as used in compilers, is typically applied to small and seemingly trivial problems, but to many instances in a single compilation run. As a result, compilers do not benefit from decades of research on optimizing large-scale linear programming. We design a simplex solver targeted at compilers. A novel theory of transprecision computation applied from individual elements to full data-structures provides the computational foundation. By carefully combining it with optimized representations for small and sparse matrices and specialized small-coefficient algorithms, we (1) reduce memory traffic, (2) exploit wide vectors, and (3) use low-precision arithmetic units effectively. We evaluate our work by embedding our solver into a state-of-the-art integer set library and implement one essential operation, coalescing, on top of our transprecision solver. Our evaluation shows more than an order-of-magnitude speedup on the core simplex pivot operation and a mean speedup of 3.2x (vs. GMP) and 4.6x (vs. IMath) for the optimized coalescing operation. Our results demonstrate that our optimizations exploit the wide SIMD instructions of modern microarchitectures effectively. We expect our work to provide foundations for a future integer set library that uses transprecision arithmetic to accelerate compiler analyses.
C1 [Grosser, Tobias] Univ Edinburgh, Sch Informat, Edinburgh, Midlothian, Scotland.
   [Theodoridis, Theodoros; Falkenstein, Maximilian; Rigger, Manuel; Su, Zhendong; Hoefler, Torsten] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
   [Pitchanathan, Arjun] IIIT Hyderabad, Hyderabad, India.
   [Kruse, Michael] Argonne Natl Lab, 9700 S Cass Ave, Argonne, IL 60439 USA.
C3 University of Edinburgh; Swiss Federal Institutes of Technology Domain;
   ETH Zurich; International Institute of Information Technology Hyderabad;
   United States Department of Energy (DOE); Argonne National Laboratory
RP Grosser, T (corresponding author), Univ Edinburgh, Sch Informat, Edinburgh, Midlothian, Scotland.
EM tobias.grosser@ed.ac.uk; theodoros.theodoridis@inf.ethz.ch;
   falkensm@student.ethz.ch; arjun.p@research.iiit.ac.in;
   michael.kruse@anl.gov; rigger@inf.ethz.ch; zhendong.su@infethz.ch;
   torsten.hoefler@inf.ethz.ch
RI Hoefler, Torsten/AAB-7478-2022; Hoefler, Torsten/HKF-3023-2023
OI Hoefler, Torsten/0000-0002-1333-9797; Su, Zhendong/0000-0002-2970-1391;
   Kruse, Michael/0000-0001-7756-7126; Grosser, Tobias/0000-0003-3874-6003
FU Swiss National Science Foundation under the Ambizione programme
   [PZ00P2168016]; ARM Ltd.; Xilinx Inc.
FX This work is supported through the Swiss National Science Foundation
   under the Ambizione programme (grant PZ00P2168016) as well as ARM Ltd.
   and Xilinx Inc., in the context of Polly Labs.
CR [Anonymous], 1997, INTRO LINEAR OPTIMIZ
   [Anonymous], 2014, CGO 14
   Baghdadi R, 2015, INT CONFER PARA, P138, DOI 10.1109/PACT.2015.17
   Bagnara R, 2008, SCI COMPUT PROGRAM, V72, P3, DOI 10.1016/j.scico.2007.08.001
   BAO W., 2017, Proceedings of the ACM on Programming Languages 2, P32
   Carson E, 2018, SIAM J SCI COMPUT, V40, pA817, DOI 10.1137/17M1140819
   CHAMBERS C, 1989, SIGPLAN NOTICES, V24, P146, DOI 10.1145/74818.74831
   Chetlur S., 2014, ARXIV14100759
   Crandall Richard, 2006, PRIME NUMBERS COMPUT, V182, DOI [10.2307/3621190, DOI 10.2307/3621190]
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Dietz W, 2015, ACM T SOFTW ENG METH, V25, DOI 10.1145/2743019
   FEAUTRIER P, 1988, RAIRO-RECH OPER, V22, P243
   Fromberger M. J., 2019, IMATH
   GILL PE, 1984, SIAM J SCI STAT COMP, V5, P562, DOI 10.1137/0905041
   Granlund Torbjrn, 2015, GNU MP 6 0 MULTIPLE GNU MP 6 0 MULTIPLE
   Grosser T, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2743016
   Grosser T, 2012, PARALLEL PROCESS LET, V22, DOI 10.1142/S0129626412500107
   Gupta S, 2015, PR MACH LEARN RES, V37, P1737
   Gysi T, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P816, DOI 10.1145/3314221.3314606
   Haase Christoph, 2018, ACM SIGLOG News, V5, P67, DOI 10.1145/3242953.3242964
   Haidar A, 2018, PROCEEDINGS OF THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE, AND ANALYSIS (SC'18)
   Haidar A, 2018, LECT NOTES COMPUT SC, V10860, P586, DOI 10.1007/978-3-319-93698-7_45
   Hoberock Jared, 2019, C EXTENSIONS PARALLE
   HOLZLE U, 1994, SIGPLAN NOTICES, V29, P326
   HOLZLE U, 1992, SIGPLAN NOTICES, V27, P32, DOI 10.1145/143103.143114
   HOUSTIS EN, 1990, CONFERENCE PROCEEDINGS - 1990 INTERNATIONAL CONFERENCE ON SUPERCOMPUTING, P96, DOI 10.1145/77726.255144
   Kotzmann T, 2008, ACM T ARCHIT CODE OP, V5, DOI 10.1145/1369396.1370017
   Kreutzer M, 2014, SIAM J SCI COMPUT, V36, pC401, DOI 10.1137/130930352
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Loechner, 1999, POLYLIB LIB MANIPULA
   LOVASZ L, 1992, MATH OPER RES, V17, P751, DOI 10.1287/moor.17.3.751
   Markidis S, 2018, IEEE SYM PARA DISTR, P522, DOI 10.1109/IPDPSW.2018.00091
   Monakov A, 2010, LECT NOTES COMPUT SC, V5952, P111, DOI 10.1007/978-3-642-11515-8_10
   Nelson CharlesGregory., 1981, Techniques for Program Verification
   Pfaffe P, 2019, INTERNATIONAL CONFERENCE ON SUPERCOMPUTING (ICS 2019), P354, DOI 10.1145/3330345.3330377
   Pouchet LN, 2007, INT SYM CODE GENER, P144
   Pouchet LN, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P90, DOI 10.1145/1375581.1375594
   Pouchet Louis-Noel, 2012, Polybench: The polyhedral benchmark suite
   Presburger Mojzesz, 1929, WARSAW MATH C, P92
   Rigger M, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P74, DOI 10.1145/3338906.3338907
   Schriver A, 1986, THEORY INTEGER LINEA
   Upadrasta R, 2013, ACM SIGPLAN NOTICES, V48, P483, DOI 10.1145/2480359.2429127
   Vasilache Nicolas., 2018, Technical report
   Verdoolaege S, 2013, ACM T ARCHIT CODE OP, V9, DOI 10.1145/2400682.2400713
   Verdoolaege S, 2010, LECT NOTES COMPUT SC, V6327, P299, DOI 10.1007/978-3-642-15582-6_49
   Verdoolaege Sven, 2015, INT WORKSH POL COMPL INT WORKSH POL COMP
   Verdoolaege Sven, 2020, INTEGER SET LIB MANU
   Weidendorfer J, 2008, TOOLS FOR HIGH PERFORMANCE COMPUTING, P93, DOI 10.1007/978-3-540-68564-7_7
   Wrthinger T., 2013, P 2013 ACM INT S NEW, P187, DOI [10.1145/2509578.2509581, DOI 10.1145/2509578.2509581]
   Zlatev Zahari, 1991, SPARSE MATRIX TECHNI, P131, DOI [10.1007/978-94-017-1116-6_8, DOI 10.1007/978-94-017-1116-6_8]
NR 50
TC 2
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 195
DI 10.1145/3428263
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900072
OA Green Accepted, Green Published, gold
DA 2024-07-18
ER

PT J
AU Milanova, A
AF Milanova, Ana
TI FIowCFL: Generalized Type-Based Reachability Analysis Graph Reduction
   and Equivalence of CFL-Based and Type-Based Reachability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE CFL-reachability; reference immutability; type-based analysis
ID FLOW-ANALYSIS; INFERENCE
AB Reachability analysis is a fundamental program analysis with a wide variety of applications. We present FlowCFL, a type-based reachability analysis that accounts for mutable heap data. The underlying semantics of FIowCFL is Context-Free-Language (CFL)-reachability.
   We make three contributions. First, we define a dynamic semantics that captures the notion of flow commonly used in reachability analysis. Second, we establish correctness of CFL-reachability over graphs with inverse edges (inverse edges are necessary for the handling of mutable heap data). Our approach combines CFL-reachability with reference immutability to avoid the addition of certain inverse edges, which results in graph reduction and precision improvement. The key contribution of our work is the formal account of correctness, which extends to the case when inverse edges are removed. Third, we present a type-based reachability analysis and establish equivalence between a certain CFL-reachability analysis and the type-based analysis, thus proving correctness of the type-based analysis.
C1 [Milanova, Ana] Rensselaer Polytech Inst, 110 8th St, Troy, NY 12180 USA.
C3 Rensselaer Polytechnic Institute
RP Milanova, A (corresponding author), Rensselaer Polytech Inst, 110 8th St, Troy, NY 12180 USA.
EM milanova@cs.rpi.edu
FU NSF [1814898]; Direct For Computer & Info Scie & Enginr; Division Of
   Computer and Network Systems [1814898] Funding Source: National Science
   Foundation
FX We thank the OOPSLA 2020 and the ECOOP 2020 reviewers whose detailed
   comments and suggestions helped improve this paper significantly. The
   author is supported by NSF grant 1814898.
CR Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Carbin M, 2013, ACM SIGPLAN NOTICES, V48, P33, DOI [10.1145/2544173.2509546, 10.1145/2509136.2509546]
   Carbin Michael, VERIFYING QUANTITATI
   Chatterjee K, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158118
   Dietl W, 2011, LECT NOTES COMPUT SC, V6813, P333, DOI 10.1007/978-3-642-22655-7_16
   Dolby J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160913
   Dong Yao, 2016, C PRINCIPLES PRACTIC, DOI [10.1145/2972206.2972209, DOI 10.1145/2972206.2972209]
   Ernst D., 2005, OOPSLA, P211, DOI [DOI 10.1145/1103845.1094828, 10.1145/1094811.1094828, DOI 10.1145/1094811.1094828]
   Ernst MD, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1092, DOI 10.1145/2660267.2660343
   Fähndrich M, 2000, ACM SIGPLAN NOTICES, V35, P253, DOI 10.1145/358438.349332
   Fritz Christian, 2013, TUDCS20130113 EC
   Fuhrer R, 2005, LECT NOTES COMPUT SC, V3586, P71
   Huang W., 2015, P 2015 INT S SOFTWAR, P106, DOI 10.1145/2771783.2771803
   Huang W, 2014, LECT NOTES COMPUT SC, V8411, P140
   Huang W, 2012, LECT NOTES COMPUT SC, V7313, P181, DOI 10.1007/978-3-642-31057-7_9
   Huang W, 2012, ACM SIGPLAN NOTICES, V47, P879, DOI 10.1145/2398857.2384680
   Kiezun A, 2007, PROC INT CONF SOFTW, P437
   Li YB, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P780, DOI 10.1145/3385412.3386021
   Lu JB, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360574
   Milanova Ana, 2018, EUR C OBJ OR PROGR E, DOI [10.4230/LIPIcs.ECOOP.2018.25, DOI 10.4230/LIPICS.ECOOP.2018.25]
   Milanova Ana, 2020, FLOWCFL FRAMEWORK TY
   Milanova Ana, 2014, 2014 INT C PRINC PRA, P99, DOI [10.1145/2647508.2647522, DOI 10.1145/2647508.2647522]
   Milanova Ana, 2013, P 15 WORKSH FORM TEC, V5, DOI [10.1145/2489804.2489809, DOI 10.1145/2489804.2489809]
   Myers A. C., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P228, DOI 10.1145/292540.292561
   Myers A. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P132
   Palsberg J, 2001, ACM SIGPLAN NOTICES, P20
   Quinonez J, 2008, LECT NOTES COMPUT SC, V5142, P616, DOI 10.1007/978-3-540-70592-5_26
   Rehof J, 2001, ACM SIGPLAN NOTICES, V36, P54, DOI 10.1145/373243.360208
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T, 1998, INFORM SOFTWARE TECH, V40, P701, DOI 10.1016/S0950-5849(98)00093-7
   Reps T, 2000, ACM T PROGR LANG SYS, V22, P162, DOI 10.1145/345099.345137
   Sampson A, 2011, ACM SIGPLAN NOTICES, V46, P164, DOI 10.1145/1993316.1993518
   Shankar U, 2001, USENIX ASSOCIATION PROCEEDINGS OF THE 10TH USENIX SECURITY SYMPOSIUM, P201
   Späth J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290361
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Tip F, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1961204.1961205
   Vaziri M, 2010, LECT NOTES COMPUT SC, V6183, P304, DOI 10.1007/978-3-642-14107-2_15
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Xu GQ, 2009, LECT NOTES COMPUT SC, V5653, P98
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P344, DOI 10.1145/3093333.3009848
NR 41
TC 4
Z9 4
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 178
DI 10.1145/3428246
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900055
OA gold
DA 2024-07-18
ER

PT J
AU Turcotte, A
   Goel, A
   Krikava, F
   Vitek, J
AF Turcotte, Alexi
   Goel, Aviral
   Krikava, Filip
   Vitek, Jan
TI Designing Types for R, Empirically
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type declarations; dynamic languages; R
AB The R programming language is widely used in a variety of domains. It was designed to favor an interactive style of programming with minimal syntactic and conceptual overhead. This design is well suited to data analysis, but a bad fit for tools such as compilers or program analyzers. In particular, R has no type annotations, and all operations are dynamically checked at runtime:the starting point for our work are the two questions: what expressive power is needed to accurately type R code? and which type system is the R community willing to adopt? Both questions are difficult to answer without actually experimenting with a type system. The goal of this paper is to provide data that can feed into that design process. To this end, we perform a large corpus analysis to gain insights in the degree of polymorphism exhibited by idiomatic R code and explore potential benefits that the R community could accrue from a simple type system. As a starting point, we infer type signatures for 25,215 functions from 412 packages among the most widely used open source R libraries. We then conduct an evaluation on 8,694 clients of these packages, as well as on end-user code from the Kaggle data science competition website.
C1 [Turcotte, Alexi; Goel, Aviral; Vitek, Jan] Northeastern Univ, Boston, MA 02115 USA.
   [Krikava, Filip; Vitek, Jan] Czech Tech Univ, Prague, Czech Republic.
C3 Northeastern University; Czech Technical University Prague
RP Turcotte, A (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
RI Vitek, Jan/J-9051-2014
FU Office of Naval Research (ONR) [503353]; National Science Foundation
   [1759736, 1544542, 1925644, 1910850]; Czech Ministry of Education, Youth
   and Sports from the Czech Operational Programme Research, Development,
   and Education [CZ.02.1.01/0.0/0.0/15_003/0000421]; European Research
   Council (ERC) under the European Union's Horizon 2020 research and
   innovation programme [695412]; NSERC; Direct For Computer & Info Scie &
   Enginr; Division Of Computer and Network Systems [1925644] Funding
   Source: National Science Foundation; Direct For Computer & Info Scie &
   Enginr; Division of Computing and Communication Foundations [1910850,
   1544542] Funding Source: National Science Foundation; Div Of Biological
   Infrastructure; Direct For Biological Sciences [1759736] Funding Source:
   National Science Foundation
FX This work has received funding from the Office of Naval Research (ONR)
   award 503353, the National Science Foundation awards 1759736, 1544542,
   1925644, and 1910850, the Czech Ministry of Education, Youth and Sports
   from the Czech Operational Programme Research, Development, and
   Education, under grant agreement No. CZ.02.1.01/0.0/0.0/15_003/0000421,
   and the European Research Council (ERC) under the European Union's
   Horizon 2020 research and innovation programme, under grant agreement
   No. 695412. This work was partially funded by NSERC.
CR Allamanis M, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P91, DOI 10.1145/3385412.3385997
   An JH, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P459, DOI 10.1145/1926385.1926437
   Andreasen E., 2016, 30 EUROPEAN C OBJECT
   Becker R. A, 1988, NEW S LANGUAGE
   Bezanson J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276490
   Bierman G, 2014, LECT NOTES COMPUT SC, V8586, P257
   Bierman Gavin M., 2010, EUR C OBJ OR PROGR E, DOI [10.1007/978-3-642-14107-2_5, DOI 10.1007/978-3-642-14107-2_5]
   Furr Michael, 2009, OOPSLA, DOI [10.1145/1640089.1640110, DOI 10.1145/1640089.1640110]
   Goel A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360579
   Ihaka R., 1996, J COMPUTATIONAL GRAP, V5, P299, DOI [DOI 10.1080/10618600.1996.10474713, 10.2307/1390807, DOI 10.2307/1390807]
   Ligges Uwe, 20 YEARS CRAN
   Maidl AndreMurbach., 2014, Proc. Workshop on Dynamic Languages and Applications, P1
   Morandat F, 2012, LECT NOTES COMPUT SC, V7313, P104, DOI 10.1007/978-3-642-31057-7_6
   Python Team, 2020, TYP HINTS PYTH
   Tange O, 2011, TUSENIX Mag., V36, P42
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Verlaguet Julien, 2013, HACK HIPHOP
   Wrigstad T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P377, DOI 10.1145/1706299.1706343
NR 18
TC 1
Z9 2
U1 0
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD NOV
PY 2020
VL 4
AR 181
DI 10.1145/3428249
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LT
UT WOS:000685203900058
OA gold
DA 2024-07-18
ER

PT J
AU Graf, S
   Jones, SP
   Scott, RG
AF Graf, Sebastian
   Jones, Simon Peyton
   Scott, Ryan G.
TI Lower Your Guards A Compositional Pattern-Match Coverage Checker
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Haskell; pattern matching; guards; strictness
AB A compiler should warn if a function defined by pattern matching does not cover its inputs-that is, if there are missing or redundant patterns. Generating such warnings accurately is difficult for modern languages due to the myriad of language features that interact with pattern matching. This is especially true in Haskell, a language with a complicated pattern language that is made even more complex by extensions offered by the Glasgow Haskell Compiler (GHC). Although GHC has spent a significant amount of effort towards improving its pattern-match coverage warnings, there are still several cases where it reports inaccurate warnings.
   We introduce a coverage checking algorithm called Lower Your Guards, which boils down the complexities of pattern matching into guard trees. While the source language may have many exotic forms of patterns, guard trees only have three different constructs, which vastly simplifies the coverage checking process. Our algorithm is modular, allowing for new forms of source-language patterns to be handled with little changes to the overall structure of the algorithm. We have implemented the algorithm in GHC and demonstrate places where it performs better than GHC's current coverage checker, both in accuracy and performance.
C1 [Graf, Sebastian] Karlsruhe Inst Technol, Karlsruhe, Germany.
   [Jones, Simon Peyton] Microsoft Res, Redmond, WA USA.
   [Scott, Ryan G.] Indiana Univ, Bloomington, IN 47405 USA.
C3 Helmholtz Association; Karlsruhe Institute of Technology; Microsoft;
   Indiana University System; Indiana University Bloomington
RP Graf, S (corresponding author), Karlsruhe Inst Technol, Karlsruhe, Germany.
EM sebastian.graf@kit.edu; simonpj@microsoft.com; rgscott@indiana.edu
OI Graf, Sebastian/0000-0001-9074-9055
CR [Anonymous], 2012, P 8 ACM SIGPLAN WORK, DOI [10.1145/2103786.2103795, DOI 10.1145/2103786.2103795]
   AUGUSTSSON L, 1985, LECT NOTES COMPUT SC, V201, P368
   Cockx J, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236770
   Dunfield Joshua, 2007, THESIS C MELLON U
   Eisenberg RA, 2014, ACM SIGPLAN NOTICES, V49, P95, DOI [10.1145/2775050.2633361, 10.1145/2633357.2633361]
   Eisenberg RA, 2012, ACM SIGPLAN NOTICES, V47, P117, DOI 10.1145/2430532.2364522
   Garrigue Jacques., 2011, WORKSH ML
   GHC, 2018, WINC PATT GETS CONF
   GHC, 2016, IN RHS WARN CONF US
   GHC, 2015, NO NON PATT MATCH WA
   GHC, 2018, BOG WOV PATT WARN OV
   GHC, 2016, REC UPD CONSTR GHC S
   GHC, 2018, COMP FUNCT LOT ALT B
   GHC issue, 2016, PATT MATCH INC IN DI
   GHC issue, 2017, PATT MATCH CHECK MIS
   GHC issue, 2017, COMPLETE SETS DONT W
   GHC issue, 2018, NONVOID IS TOO CONS
   GHC issue, 2018, PATT MATCH HAS IN RI
   GHC issue, 2018, EMPTYCASE THINKS PAT
   GHC issue, 2019, PATT MATCH OV CHECK
   GHC issue, 2019, PATT MATCH CHECK OP
   GHC issue, 2019, CAS X VOID SHOULD BE
   GHC issue, 2019, PATT MATCH CHECK TRU
   GHC issue, 2017, WOV PATT WARNS WRONG
   GHC issue, 2018, ERR NON PATT MATCHZ
   GHC issue, 2020, PATT MATCH WARN EM T
   GHC issue, 2020, PATT MATCH CHECK STU
   GHC issue, 2018, INC PATT MATCH WARN
   GHC issue, 2019, ADD LUKE MAR SER IWA
   GHC issue, 2017, WILDC PATT COMPLETE
   GHC issue, 2017, PATT SYN EXH CHECKS
   GHC issue, 2019, GHC THINKS PATT MATC
   GHC issue, 2019, STRICTN PATT SYN MAT
   GHC issue, 2020, WINC REC UPD IGN CON
   GHC issue, 2019, PMCHECK TREATS NEWT
   GHC issue, 2020, PATT MATCH COV CHECK
   GHC issue, 2017, COMPLETE SETS NERF R
   GHC issue, 2016, REPR VAL SET ABSTR T
   GHC issue, 2017, INC PATT MATCH WARN
   GHC issue, 2018, INC W R T COV CHECK
   GHC issue, 2019, MIN MISS PATT SET DE
   GHC issue, 2016, PATT COV CHECK IGN D
   GHC issue, 2019, 67 PATT COMPLETE PRA
   GHC issue, 2019, INC NON PATT WARN PA
   GHC issue, 2019, PAN TYCONAPPARGS
   GHC issue, 2019, PATT MATCH WARN AR P
   GHC issue, 2018, COMPL VIEW PATT COMP
   GHC issue, 2015, NEW PATT MATCH CHECK
   GHC team, 2020, COMPLETE PRAGM
   Hongwei Xi, 1998, THESIS C MELLON U
   Kalvoda Pavel, 2019, ARXIV190904160CSPL
   Karachalias Georgios, 2015, GADTS MEET THEIR MAT
   Maranget L, 2007, J FUNCT PROGRAM, V17, P387, DOI 10.1017/S0956796807006223
   Norell Ulf, 2007, PRACTICAL PROGRAMMIN
   Oury N, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P47, DOI 10.1145/1292597.1292606
   Pickering M, 2016, ACM SIGPLAN NOTICES, V51, P80, DOI 10.1145/3241625.2976013
   Rushby J, 1998, IEEE T SOFTWARE ENG, V24, P709, DOI 10.1109/32.713327
   SEKAR RC, 1995, SIAM J COMPUT, V24, P1207, DOI 10.1137/S0097539793246252
   Sestoft P., 1996, Partial Evaluation. International Seminar. Selected Papers, P446
   Sozeau M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341690
   Sozeau M, 2010, LECT NOTES COMPUT SC, V6172, P419, DOI 10.1007/978-3-642-14052-5_29
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158141
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Vytiniotis D, 2011, J FUNCT PROGRAM, V21, P333, DOI 10.1017/S0956796811000098
   Xi HW, 2003, J UNIVERS COMPUT SCI, V9, P851
   Xi HW, 2003, ACM SIGPLAN NOTICES, V38, P224, DOI 10.1145/640128.604150
   Xi HW, 1998, ACM SIGPLAN NOTICES, V33, P249, DOI 10.1145/277652.277732
   Xi HW, 1999, LECT NOTES COMPUT SC, V1551, P228
NR 68
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2020
VL 4
AR 107
DI 10.1145/3408989
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LR
UT WOS:000685203700021
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Cox, BJ
   Naroff, S
   Hsu, H
AF Cox, Brad J.
   Naroff, Steve
   Hsu, Hansen
TI The Origins of Objective-C at PPI/Stepstone and Its Evolution at NeXT
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Objective-C; OOPC; PPI; Stepstone; ITT; NeXT; Apple; message passing;
   dynamic binding; Smalltalk; C++; software-ICs; software crisis;
   categories; protocols
AB The roots of Objective-C began at ITT in the early 1980s in a research group led by Tom Love investigating improving programmer productivity by an order of magnitude, a concern motivated by the perceived lsoftware crisisz articulated in the late 1960s. In 1981, Brad Cox, a member of this group, began to investigate Smalltalk and object-oriented programming for this purpose, but needed a language compatible with the Unix and C environments used by ITT. That year, Cox quickly wrote up the Object-Oriented Pre-Compiler (OOPC) that would translate a Smalltalk-like syntax into C.
   Love felt there was a market for object-oriented solutions that could coexist with legacy languages and platforms, and after a brief stint at Schlumberger-Doll, co-founded with Cox Productivity Products International (PPI), later renamed as Stepstone, to pursue this. At PPI, Cox developed OOPC into Objective-C. Cox saw Objective-C as a crucial link in his larger vision of creating a market for "re-fabricatedz software components (lsoftware-ICsz), which could be bought off the shelf and which, Cox believed, would unleash a "oftware industrial revolution."
   Steve Naroff joined Stepstone in 1986 as Steve Jobs' NeXT Computer became an important customer for Objective-C, as it was being used in its NeXTSTEP operating system. Naroff became the primary Stepstone developer addressing NeXT's issues with Objective-C, solving a key fragility problem preventing NeXT from deploying forwards-compatible object libraries. Impressed with NeXT, Naroff left Stepstone for NeXT in 1988, and once there, added Objective-C support to Richard Stallman's GNU GCC compiler, which NeXT was using as its C compiler, removing the need to use Stepstone's ObjC to C translator. Over the next several years, Naroff and others would add significant new features to Objective-C, such as lcategories,z lprotocols,z and the ability to mix in C++ code. When Stepstone folded in 1994, all rights to Objective-C were acquired by NeXT. This eventually transferred to Apple when NeXT was acquired by Apple in 1997. Objective-C became the basis for Apple's Mac OS X and then iOS platforms, and Naroff and others at Apple added additional features to the language in the late 2000s as the iPhone App Store greatly expanded Objective-C's user base.
C1 [Hsu, Hansen] Comp Hist Museum, Software Hist Ctr, 1401 N Shoreline Blvd, Mountain View, CA 94043 USA.
EM bradjcox@gmail.com; naroff@me.com; hhsu@computerhistory.org
CR Abbate Janet., 2012, Recoding Gender: Women's Changing Participation in Computing, P73
   [Anonymous], 1999, DEALERS LIGHTNING XE
   [Anonymous], 1991, OBJECT ORIENTED PROG
   [Anonymous], 1975, MYTHICAL MAN MONTH E
   [Anonymous], 2001, Mechanizing proof: computing, risk, and trust
   [Anonymous], 1990, CWI Quarterly
   Apple Inc, 2020, EXT
   Apple Inc, 2020, PROT
   Biancuzzi Federico, 2009, MASTERMINDS PROGRAMM, V1st, P241
   BOEHM BW, 1973, DATAMATION, V19, P48
   BROOKS FP, 1987, COMPUTER, V20, P10, DOI 10.1109/MC.1987.1663532
   Clang Team, 2020, OBJ C LIT
   COX B, 1986, BYTE, V11, P161
   Cox B. J., 1988, Digest of Papers: COMPCON Spring 88. Thirty-Third IEEE Computer Society International Conference (Cat. No.88CH2539-5), P166, DOI 10.1109/CMPCON.1988.4852
   Cox B.J., 1986, OBJECT ORIENTED PROG
   COX BJ, 1983, SIGPLAN NOTICES, V18, P15, DOI 10.1145/948093.948095
   COX BJ, 1990, IEEE SOFTWARE, V7, P25, DOI 10.1109/52.60587
   COX BJ, 1984, IEEE SOFTWARE, V1, P50, DOI 10.1109/MS.1984.233398
   COX BJ, 1990, BYTE, V15, P209
   COX BJ, 1987, SIGPLAN NOTICES, V22, P423, DOI 10.1145/38807.38846
   COX BJ, 1989, PROCEEDINGS : THE THIRTEENTH ANNUAL INTERNATIONAL COMPUTER SOFTWARE & APPLICATIONS CONFERENCE, P331, DOI 10.1109/CMPSAC.1989.65103
   Cox Brad J, 2016, ORAL HIST
   Cox Brad J., 1983, P SOFTF C SOFTW DEV, P51
   Cringely Robert X., 1996, TRIUMPH NERDS TRAN 3
   Dalrymple Mark, 2012, OBJECTIVE C LITERA 1
   DIJKSTRA EW, 1968, COMMUN ACM, V11, P147, DOI 10.1145/362929.362947
   Ensmenger N, 2002, HISTORY OF COMPUTING: SOFTWARE ISSUES, P139
   Ensmenger Nathan L, 2010, LCOMPUTER BOYSZ TAKE
   Garst Blaine, 2016, ORAL HIST 1
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Gosling James, 2019, ORAL HIST 2
   Haigh Thomas, 2010, DIJKSTRAS CRISIS END
   KAEHLER T, 1986, BYTE, V11, P145
   KRASNER G, 1984, SMALLTALK 80 BITS HI
   LEDBETTER L, 1985, BYTE, V10, P307
   Love T., 1988, Digest of Papers: COMPCON Spring 88. Thirty-Third IEEE Computer Society International Conference (Cat. No.88CH2539-5), P238, DOI 10.1109/CMPCON.1988.4866
   Love T., 1983, SOFTFAIR. A Conference on Software Development Tools, Techniques, and Alternatives. Proceedings, P61
   LOVE T, 1993, OBJECT LESSONS LESSO
   Love Tom, 2019, COMMUNICATION 0601
   Love Tom, 2019, COMMUNICATION 0417
   Mahoney MichaelS., 2002, From 0 to 1: An Authoritative History of Modern Computing, P91
   Mahoney MS, 2004, IEEE ANN HIST COMPUT, V26, P8, DOI 10.1109/MAHC.2004.1278847
   Microsoft, 2015, EXT METH C PROGR GUI
   Naroff Steve, 2018, ORAL HIST 1
   Naroff Steve, 1987, DESIGN ISSUES OBJECT, DOI [10.5281/zenodo.3708485, DOI 10.5281/ZENODO.3708485]
   Naughton Patrick, 1997, JAVA NEWTONOS RUMOR
   Ram Stefan L., 2003, A KAY MEANING OBJECT
   Robson D., 1981, BYTE, V6, P36
   SCHMUCKER KJ, 1986, BYTE, V11, P177
   SCHMUCKER KJ, 1986, BYTE, V11, P189
   Slayton R, 2013, ARGUMENTS COUNT PHYS
   STROUSTRUP B, 1993, SIGPLAN NOTICES, V28, P271, DOI 10.1145/155360.155375
   TESLER L, 1986, BYTE, V11, P195
   Tesler L., 1981, BYTE, V6, P90
   Tesler Larry, 2013, ORAL HIST
   Tesler Larry, 2016, ORAL HIST 2
   Tomayko JamesE., 2002, History of Computing: Software Issues, P139
   Verity John W., 1987, DATAMATION, V33, P72
   Verity John W., 1991, BUSINESSWEEK, P92
   White Eva, 1986, BYTE, V11, P137
NR 60
TC 0
Z9 0
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JUN
PY 2020
VL 4
AR 82
DI 10.1145/3386332
PG 74
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LK
UT WOS:000685202900015
OA gold
DA 2024-07-18
ER

PT J
AU Ahrens, B
   Hirschowitz, A
   Lafont, A
   Maggesi, M
AF Ahrens, Benedikt
   Hirschowitz, Andre
   Lafont, Ambroise
   Maggesi, Marco
TI Reduction Monads and Their Signatures
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Initial semantics; Higher-order languages; Reduction systems; Lambda
   calculus; Monads
ID STRUCTURAL OPERATIONAL SEMANTICS
AB In this work, we study reduction monads, which are essentially the same as monads relative to the free functor from sets into multigraphs. Reduction monads account for two aspects of the lambda calculus: on the one hand, in the monadic viewpoint, the lambda calculus is an object equipped with a well-behaved substitution; on the other hand, in the graphical viewpoint, it is an oriented multigraph whose vertices are terms and whose edges witness the reductions between two terms.
   We study presentations of reduction monads. To this end, we propose a notion of reduction signature. As usual, such a signature plays the role of a virtual presentation, and specifies arities for generating operations- possibly subject to equations-together with arities for generating reduction rules. For each such signature, we define a category of models; any model is, in particular, a reduction monad. If the initial object of this category of models exists, we call it the reduction monad presented (or specified) by the given reduction signature.
   Our main result identifies a class of reduction signatures which specify a reduction monad in the above sense. We show in the examples that our approach covers several standard variants of the lambda calculus.
C1 [Ahrens, Benedikt] Univ Birmingham, Sch Comp Sci, Birmingham, W Midlands, England.
   [Hirschowitz, Andre] Univ Cote dAzur, LJAD, CNRS, Nice, France.
   [Lafont, Ambroise] IMT Atlantique, INRIA, Gallinette, Nantes, France.
   [Maggesi, Marco] Univ Florence, DiMaI, Florence, Italy.
C3 University of Birmingham; Centre National de la Recherche Scientifique
   (CNRS); Universite Cote d'Azur; IMT - Institut Mines-Telecom; IMT
   Atlantique; Inria; University of Florence
RP Ahrens, B (corresponding author), Univ Birmingham, Sch Comp Sci, Birmingham, W Midlands, England.
EM B.Ahrens@cs.bham.ac.uk; ah@unice.fr; ambroise.lafont@inria.fr;
   marco.miggesi@unifi.it
RI Maggesi, Marco/AAC-9766-2019
OI Maggesi, Marco/0000-0003-4380-7691; Ahrens, Benedikt/0000-0002-6786-4538
FU Gruppo Nazionale per le Strutture Algebriche, Geometriche e le loro
   Applicazioni (GNSAGA-INdAM); Ministero dell'Istruzione, dell'Universita
   e della Ricerca (MIUR)
FX Maggesi has been supported by Gruppo Nazionale per le Strutture
   Algebriche, Geometriche e le loro Applicazioni (GNSAGA-INdAM) and
   Ministero dell'Istruzione, dell'Universita e della Ricerca (MIUR).
CR Adamek J., 1974, Comment. Math. Univ. Carol., V15, P589
   Ahrens B, 2016, MATH STRUCT COMP SCI, V26, P3, DOI 10.1017/S0960129514000103
   Ahrens Benedikt, GEUVERS, DOI [10.4230/LIPIcs.FSCD.2019.6, DOI 10.4230/LIPICS.FSCD.2019.6]
   Ahrens Benedikt, 2018, 27 EACSL ANN C COMP, V4, P1
   Altenkirch T, 1999, LECT NOTES COMPUT SC, V1683, P453
   Altenkirch T, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:3)2015
   [Anonymous], 2003, CAMBRIDGE TRACTS THE
   Borceux Francis, 1994, Handbook of Categorical Algebra: Volume 2, Categories and Structures, V2, DOI DOI 10.1017/CBO9780511525865
   Fiore M, 2001, IEEE S LOG, P93, DOI 10.1109/LICS.2001.932486
   Fiore M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P193, DOI 10.1109/LICS.1999.782615
   Fiore M, 2007, LECT NOTES COMPUT SC, V4596, P607
   Fiore M, 2006, IEEE S LOG, P49, DOI 10.1109/LICS.2006.7
   Fiore M, 2010, LECT NOTES COMPUT SC, V6281, P368, DOI 10.1007/978-3-642-15155-2_33
   Hamana M., 2003, P 5 ACM SIGPLAN INT, P148
   Hirschowitz A, 2010, INFORM COMPUT, V208, P545, DOI 10.1016/j.ic.2009.07.003
   Hirschowitz Andre., 2019, MOD MON OP SEM
   Hirschowitz T, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290334
   Hirschowitz T, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(3:10)2013
   Jacobs B., 1999, Categorical logic and type theory
   Kesner D, 2009, LOG METH COMPUT SCI, V5, DOI 10.2168/LMCS-5(3:1)2009
   Klin B, 2011, THEOR COMPUT SCI, V412, P5043, DOI 10.1016/j.tcs.2011.03.023
   Lafont Ambroise, 2019, THESIS ECOLE NATL SU
   Luth C., 1997, Category Theory and Computer Science. 7th International Conference, CTCS '97. Proceedings, P69, DOI 10.1007/BFb0026982
   Mac Lane S, 1998, GRAD TEXT M, V5
   Meyer A.R., 1988, POPL, P229
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Selinger Peter, 2008, CORRABS0804343
   Staton S, 2008, IEEE S LOG, P166, DOI 10.1109/LICS.2008.43
   Turi D, 1997, IEEE S LOG, P280, DOI 10.1109/LICS.1997.614955
NR 29
TC 4
Z9 4
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 31
DI 10.1145/3371099
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400032
OA gold, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Bourke, T
   Brun, L
   Pouzet, M
AF Bourke, Timothy
   Brun, Lelio
   Pouzet, Marc
TI Mechanized Semantics and Verified Compilation for a Dataflow Synchronous
   Language with Reset
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE stream languages; verified compilation; interactive theorem proving
ID OPERATIONAL SEMANTICS
AB Specifications based on block diagrams and state machines are used to design control software, especially in the certified development of safety-critical applications. Tools like SCADE Suite and Simulink/Stateflow are equipped with compilers that translate such specifications into executable code. They provide programming languages for composing functions over streams as typified by Dataflow Synchronous Languages like Lustre.
   Recent work builds on CompCert to specify and verify a compiler for the core of Lustre in the Coq Interactive Theorem Prover. It formally links the stream-based semantics of the source language to the sequential memory manipulations of generated assembly code. We extend this work to treat a primitive for resetting subsystems. Our contributions include new semantic rules that are suitable for mechanized reasoning, a novel intermediate language for generating optimized code, and proofs of correctness for the associated compilation passes.
C1 [Bourke, Timothy; Brun, Lelio; Pouzet, Marc] INRIA, Paris, France.
   [Bourke, Timothy; Brun, Lelio] PSL Univ, Ecole Normale Super, Paris, France.
   [Pouzet, Marc] PSL Univ, Sorbonne Univ, Ecole Normale Super, Paris, France.
   [Bourke, Timothy; Brun, Lelio] PSL Univ, Ecole Normale Super, INRIA, Paris, France.
   [Pouzet, Marc] PSL Univ, Sorbonne Univ, INRIA, Ecole Normale Super, Paris, France.
C3 Inria; Universite PSL; Ecole Normale Superieure (ENS); Universite PSL;
   Ecole Normale Superieure (ENS); Sorbonne Universite; Inria; Universite
   PSL; Ecole Normale Superieure (ENS); Sorbonne Universite; Universite
   PSL; Ecole Normale Superieure (ENS); Inria
RP Bourke, T (corresponding author), INRIA, Paris, France.; Bourke, T (corresponding author), PSL Univ, Ecole Normale Super, Paris, France.; Bourke, T (corresponding author), PSL Univ, Ecole Normale Super, INRIA, Paris, France.
EM Timothy.Bourke@inria.fr; Lelio.Brun@ens.fr; Marc.Pouzet@ens.fr
OI Brun, Lelio/0000-0002-0642-6008
FU Bpifrance Invest for the Future Program (lProgramme d'Investissements
   d'Avenirz) in the ES3CAP project
FX This work was partially supported by the Bpifrance Invest for the Future
   Program (lProgramme d'Investissements d'Avenirz) in the ES3CAP project.
CR Adams MM, 2005, LECT NOTES COMPUT SC, V3785, P465
   [Anonymous], 2005, EMSOFT 2005
   [Anonymous], 2008, P 8 ACM IEEE INT C E
   [Anonymous], 1974, PROC IFIP C 74
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Arthan R, 2000, ICFEM 2000: THIRD INTERNATIONAL CONFERENCE ON FORMAL ENGINEERING METHODS, PROCEEDINGS, P169, DOI 10.1109/ICFEM.2000.873817
   Auger Cedric., 2013, THESIS U PARIS SUD 1
   Auger Cedric, 2014, FORMALIZATION PROOF
   Berry G., 1993, Foundations of Software Technology and Theoretical Computer Science. 13th Conference Proceedings, P72
   Berry G., 1990, Real time programming: special purpose or general purpose languages
   Berry G., 2000, ESTEREL V5 LANGUAGE
   Berry Gerard., 2002, The Constructive Semantics of Pure Esterel (Draft Version 3)
   Biernacki D, 2008, LCTES'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN-SIGBED CONFERENCE ON LANGUAGES, COMPILERS, AND TOOLS FOR EMBEDDED SYSTEMS, P121
   Blazy S, 2009, J AUTOM REASONING, V43, P263, DOI 10.1007/s10817-009-9148-3
   Bouissou O, 2012, ACM SIGPLAN NOTICES, V47, P129, DOI 10.1145/2345141.2248437
   Bourke T, 2018, SCOPES '18: PROCEEDINGS OF THE 21ST INTERNATIONAL WORKSHOP ON SOFTWARE AND COMPILERS FOR EMBEDDED SYSTEMS, P14, DOI 10.1145/3207719.3207732
   Bourke T, 2017, ACM SIGPLAN NOTICES, V52, P586, DOI [10.1145/3140587.3062358, 10.1145/3062341.3062358]
   Bourke Timothy, 2019, 30 JOURN FRANC LANG, P109
   Caspi P., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P178, DOI 10.1145/41625.41641
   Caspi P., 1998, Electronic Notes in Theoretical Computer Science, V11
   CASPI P, 1992, THEOR COMPUT SCI, V94, P125, DOI 10.1016/0304-3975(92)90326-B
   CASPI P, 1994, ANN R AUT P, V18, P81, DOI 10.1016/0066-4138(94)90015-9
   Caspi Paul, 1997, 9707 VERIMAG
   Cavalcanti A, 2011, FORM ASP COMPUT, V23, P465, DOI 10.1007/s00165-010-0170-3
   Chapoutot A, 2009, IEEE I C EMBED SOFTW, P83, DOI 10.1109/ICESS.2009.80
   Chen CQ, 2009, FORM ASP COMPUT, V21, P451, DOI 10.1007/s00165-009-0108-9
   Chen Mingshuai., 2017, Provably Correct Systems, P39, DOI DOI 10.1007/978-3-319-48628-4_3
   Cohen A, 2012, EMSOFT '12: PROCEEDINGS OF THE TENTH AMC INTERNATIONAL CONFERENCE ON EMBEDDED SOFTWARE 2012, P197
   Colaco J.-L., 2004, International Journal on Software Tools for Technology Transfer, V6, P245, DOI 10.1007/s10009-004-0160-y
   Colaco J L, 2005, P 5 ACM INT C EMB SO, P173, DOI DOI 10.1145/1086228.1086261
   Colaço JL, 2017, PROCEEDINGS 11TH 2017 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE), P4
   Colaço JL, 2003, LECT NOTES COMPUT SC, V2855, P134
   Gérard L, 2012, ACM SIGPLAN NOTICES, V47, P51, DOI [10.1145/2345141.1967685, 10.1145/2345141.2248426]
   Halbwachs Nicolas., 2019, LUSTRE V6 REFERENCE
   Hamon G, 2004, LECT NOTES COMPUT SC, V2984, P229
   Harel D., 1996, ACM Transactions on Software Engineering and Methodology, V5, P293, DOI 10.1145/235321.235322
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Jourdan JH, 2012, LECT NOTES COMPUT SC, V7211, P397, DOI 10.1007/978-3-642-28869-2_20
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Maraninchi F, 2003, SCI COMPUT PROGRAM, V46, P219, DOI 10.1016/S0167-6423(02)00093-X
   Maraninchi Florence, 1996, LNCS, V1135, p72S89
   Paulin-Mohring Ch., 2009, From Semantics to Computer Science, P383
   Pfenning Frank, 2000, P 2 ACM SIGPLAN INT, P289, DOI 10.1145/351268.351300
   Potop-Butucaru D., 2007, COMPILING ESTEREL, DOI DOI 10.1007/978-0-387-70628-3
   Pouzet M., 2006, Lucid synchrone
   Ryabtsev M, 2009, LECT NOTES COMPUT SC, V5643, P696, DOI 10.1007/978-3-642-02658-4_57
   Shi G, 2019, SCI CHINA INFORM SCI, V62, DOI 10.1007/s11432-016-9270-0
   Shi G, 2017, PROC IEEE ACM INT C, P109, DOI 10.1109/ICSE-C.2017.83
   Tan YK, 2016, ACM SIGPLAN NOTICES, V51, P60, DOI 10.1145/3022670.2951924
   The Coq Development Team, 2019, COQ PROOF ASS REF MA
   Tripakis S., 2005, ACM T EMBED COMPUT S, V4, P779, DOI DOI 10.1145/1113830.1113834
   Ngo VC, 2015, LECT NOTES COMPUT SC, V9039, P66, DOI 10.1007/978-3-319-19195-9_5
   Wang S., 2013, 2013 P INT C EMB
   Zhou CY, 2012, DISCRETE EVENT DYN S, V22, P223, DOI 10.1007/s10626-010-0096-1
   Zou L, 2015, LECT NOTES COMPUT SC, V9364, P464, DOI 10.1007/978-3-319-24953-7_33
NR 56
TC 11
Z9 11
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 44
DI 10.1145/3371112
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400045
OA gold, Green Published
DA 2024-07-18
ER

PT J
AU Brunel, A
   Mazza, D
   Pagani, M
AF Brunel, Alois
   Mazza, Damiano
   Pagani, Michele
TI Backpropagation in the Simply Typed Lambda-Calculus with Linear Negation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Differentiable Programming; Lambda-Calculus; Linear Logic
AB Backpropagation is a classic automatic differentiation algorithm computing the gradient of functions specified by a certain class of simple, first-order programs, called computational graphs. It is a fundamental tool in several fields, most notably machine learning, where it is the key for efficiently training (deep) neural networks. Recent years have witnessed the quick growth of a research field called differentiable programming, the aim of which is to express computational graphs more synthetically and modularly by resorting to actual programming languages endowed with control flow operators and higher-order combinators, such as map and fold. In this paper, we extend the backpropagation algorithm to a paradigmatic example of such a programming language: we define a compositional program transformation from the simply-typed lambda-calculus to itself augmented with a notion of linear negation, and prove that this computes the gradient of the source program with the same efficiency as first-order backpropagation. The transformation is completely effect-free and thus provides a purely logical understanding of the dynamics of backpropagation.
C1 [Brunel, Alois] Deepomatic, Paris, France.
   [Mazza, Damiano] Univ Sorbonne Paris Nord, CNRS, UMR 7030, LIPN, St Denis, France.
   [Pagani, Michele] Univ Paris, CNRS, IRIF UMR 8243, Paris, France.
C3 Centre National de la Recherche Scientifique (CNRS); Centre National de
   la Recherche Scientifique (CNRS); Universite Paris Cite
RP Brunel, A (corresponding author), Deepomatic, Paris, France.
EM alois.brunel@gmail.com; Damiano.Mazza@lipn.univ-paris13.fr;
   pagani@irif.fr
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   Accattoli B, 2018, LECT NOTES COMPUT SC, V11187, P37, DOI 10.1007/978-3-030-02508-3_3
   Accattoli B, 2017, PROCEEDINGS OF THE 19TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2017), P4, DOI 10.1145/3131851.3131855
   Accattoli B, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P363, DOI 10.1145/2628136.2628154
   Accattoli Beniamino, 2012, LIPIcs, V15, P6, DOI [10.4230/LIPIcs.RTA.2012.6, DOI 10.4230/LIPICS.RTA.2012.6]
   [Anonymous], 2015, NATURE, DOI [DOI 10.1038/NATURE14539, 10.1038/nature14539]
   [Anonymous], 2011, P ICML
   [Anonymous], 2018, SOME PRINCIPLES DIFF
   Baydin AG, 2018, J MACH LEARN RES, V18
   Cybenko G., 1989, Mathematics of Control, Signals, and Systems, V2, P303, DOI 10.1007/BF02551274
   Danvy O, 2005, FUND INFORM, V66, P397
   Dos Santos C., 2014, Coling, P69
   Ehrhard T, 2003, THEOR COMPUT SCI, V309, P1, DOI 10.1016/S0304-3975(03)00392-X
   Ehrhard T, 2018, MATH STRUCT COMP SCI, V28, P995, DOI 10.1017/S0960129516000372
   Ehrhard T, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P174, DOI 10.1145/2967973.2968608
   Elliott Conal, 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236765
   FeiWang Daniel Zheng, 2019, PACMPL
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   HORNIK K, 1991, NEURAL NETWORKS, V4, P251, DOI 10.1016/0893-6080(91)90009-T
   Hyland JME, 2017, MATH STRUCT COMP SCI, V27, P762, DOI 10.1017/S0960129515000377
   Isokawa T, 2003, LECT NOTES ARTIF INT, V2774, P318
   LeCun Y, 1989, NEURAL COMPUT, V1, P541, DOI 10.1162/neco.1989.1.4.541
   Paszke A., 2017, AUTOMATIC DIFFERENTI
   PEARLMUTTER BA, 1995, IEEE T NEURAL NETWOR, V6, P1212, DOI 10.1109/72.410363
   Pearlmutter BA, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330018
   PEARSON JK, 1992, ARTIFICIAL NEURAL NETWORKS, 2, VOLS 1 AND 2, P413
   Radford A., 2019, LANGUAGE MODELS ARE
   Rumelhart D., 1987, Parallel Distributed Processing, V1
   Severyn A, 2015, SIGIR 2015: PROCEEDINGS OF THE 38TH INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL, P959, DOI 10.1145/2766462.2767830
   Van Iwaarden Ronald, 1993, INTERVAL COMPUTATION, V3, P41
NR 30
TC 24
Z9 24
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 64
DI 10.1145/3371132
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400065
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Hinrichsen, JK
   Bengtson, J
   Krebbers, R
AF Hinrichsen, Jonas Kastberg
   Bengtson, Jesper
   Krebbers, Robbert
TI Actris: Session-Type Based Reasoning in Separation Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Message passing; actor model; concurrency; session types; Iris
AB Message passing is a useful abstraction to implement concurrent programs. For real-world systems, however, it is often combined with other programming and concurrency paradigms, such as higher-order functions, mutable state, shared-memory concurrency, and locks. We present Actris: a logic for proving functional correctness of programs that use a combination of the aforementioned features. Actris combines the power of modern concurrent separation logics with a first-class protocol mechanism-based on session types-for reasoning about message passing in the presence of other concurrency paradigms. We show that Actris provides a suitable level of abstraction by proving functional correctness of a variety of examples, including a distributed merge sort, a distributed load-balancing mapper, and a variant of the map-reduce model, using relatively simple specifications. Soundness of Actris is proved using a model of its protocol mechanism in the Iris framework. We mechanised the theory of Actris, together with tactics for symbolic execution of programs, as well as all examples in the paper, in the Coq proof assistant.
C1 [Hinrichsen, Jonas Kastberg; Bengtson, Jesper] IT Univ Copenhagen, Copenhagen, Denmark.
   [Krebbers, Robbert] Delft Univ Technol, Delft, Netherlands.
C3 IT University Copenhagen; Delft University of Technology
RP Hinrichsen, JK (corresponding author), IT Univ Copenhagen, Copenhagen, Denmark.
EM jkas@itu.dk; jebe@itu.dk; mail@robbertkrdbers.nl
OI Hinrichsen, Jonas Kastberg/0000-0001-6143-9031
FU Netherlands Organisation for Scientific Research (NWO) [016]
FX We thank the anonymous reviewers for their helpful feedback. We are
   grateful to Fabrizio Montesi, Daniel Gratzer, Andreea Costea, and the
   participants of the Iris workshop 2019 for discussions. Robbert Krebbers
   was supported by the Netherlands Organisation for Scientific Research
   (NWO), project number 016.Veni.192.259.
CR AMERICA P, 1989, J COMPUT SYST SCI, V39, P343, DOI 10.1016/0022-0000(89)90027-5
   Appel Andrew W, 2014, PROGRAM LOGICS CERTI, DOI DOI 10.1017/CBO9781107256552
   Atkey Robert, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P32, DOI 10.1007/978-3-319-30936-1_2
   Balzer S., 2017, PACMPL 1 ICFP 2017, V37, P29
   Balzer S, 2019, LECT NOTES COMPUT SC, V11423, P611, DOI 10.1007/978-3-030-17184-1_22
   Birkedal L, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:1)2012
   Bizjak A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290378
   Bocchi L, 2010, LECT NOTES COMPUT SC, V6269, P162, DOI 10.1007/978-3-642-15375-4_12
   Costea A, 2018, LECT NOTES COMPUT SC, V11275, P284, DOI 10.1007/978-3-030-02768-1_16
   Craciun Florin, 2015, ICECCS
   Dardha Ornela, 2012, PROC PPDP 2012, P139, DOI DOI 10.1145/2370776.2370794
   Dean J, 2008, COMMUN ACM, V51, P107, DOI 10.1145/1327452.1327492
   Francalanza A, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(3:07)2011
   Hamin Jafar, 2019, ECOOP
   Hewitt C., 1973, PROC 3 INT JOINT C A, P235, DOI 10.1145/359545.359563
   Hinrichsen Jonas Kastberg, 2019, COQ MECHANIZATION AC
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Hu R, 2010, LECT NOTES COMPUT SC, V6183, P329, DOI 10.1007/978-3-642-14107-2_16
   Imai K, 2019, SCI COMPUT PROGRAM, V172, P135, DOI 10.1016/j.scico.2018.08.005
   Jacobs B, 2011, ACM SIGPLAN NOTICES, V46, P271, DOI 10.1145/1925844.1926417
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2676726.2676980, 10.1145/2775051.2676980]
   Kabayashi N., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P358, DOI 10.1145/237721.237804
   Kobayashi N, 2006, LECT NOTES COMPUT SC, V4137, P233
   Krebbers R, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236772
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krebbers Robbert, POPL
   Krogh-Jespersen Morten, 2019, ANERIS MECHANISED LO
   Lange J, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1137, DOI 10.1145/3180155.3180157
   Lozes É, 2012, ELECTRON P THEOR COM, P17, DOI 10.4204/EPTCS.104.3
   Mansky William, 2017, Proceedings of the ACM on Programming Languages, V1, DOI 10.1145/3133911
   Marché C, 2004, J LOGIC ALGEBR PROGR, V58, P89, DOI 10.1016/j.jlap.2003.07.006
   Mostrous D, 2014, LECT NOTES COMPUT SC, V8459, P115
   Nakano H, 2000, IEEE S LOG, P255, DOI 10.1109/LICS.2000.855774
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   Ono Kosuke, 2011, SEFM
   Oortwijn W, 2016, ELECTRON P THEOR COM, P65, DOI 10.4204/EPTCS.211.7
   Padovani L, 2017, J FUNCT PROGRAM, V27, P1, DOI 10.1017/S0956796816000289
   Padovani Luca., 2014, CSL, V72, p1S72
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Sergey Ilya, 2018, POPL 2018, V2
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Tasharofi S, 2013, LECT NOTES COMPUT SC, V7920, P302, DOI 10.1007/978-3-642-39038-8_13
   Tassarotti J, 2017, LECT NOTES COMPUT SC, V10201, P909, DOI 10.1007/978-3-662-54434-1_34
   The Coq Development Team, 2019, COQ PROOF ASS REF MA
   Tu TF, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P865, DOI 10.1145/3297858.3304069
   Villard Jules, 2009, APLAS
NR 50
TC 14
Z9 16
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 6
DI 10.1145/3371074
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400007
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Pédrot, PM
   Tabareau, N
AF Pedrot, Pierre-Marie
   Tabareau, Nicolas
TI The Fire Triangle How to Mix Substitution, Dependent Elimination, and
   Effects
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Type Theory; Effects
ID STORAGE
AB There is a critical tension between substitution, dependent elimination and effects in type theory. In this paper, we crystallize this tension in the form of a no-go theorem that constitutes the fire triangle of type theory. To release this tension, we propose partial derivative CBPV, an extension of call-by-push-value (CBPV) -a general calculus of effects-to dependent types. Then, by extending to partial derivative CBPV the well-known decompositions of call-by-name and call-by-value into CBPV, we show why, in presence of effects, dependent elimination must be restricted in call-by-name, and substitution must be restricted in call-by-value. To justify partial derivative CBPV and show that it is general enough to interpret many kinds of effects, we define various effectful syntactic translations from partial derivative CBPV to Martin-Lof type theory: the reader, weaning and forcing translations.
C1 [Pedrot, Pierre-Marie; Tabareau, Nicolas] INRIA, Gallinette Project Team, Nantes, France.
C3 Inria
RP Pédrot, PM (corresponding author), INRIA, Gallinette Project Team, Nantes, France.
FU CoqHoTT ERC Grant [637339]; European Research Council (ERC) [637339]
   Funding Source: European Research Council (ERC)
FX This research has been funded by the CoqHoTT ERC Grant 637339.
CR Abel Andreas, 2012, THESIS U MUNCHEN I I
   Ahman D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158095
   Ahman D, 2016, LECT NOTES COMPUT SC, V9634, P36, DOI 10.1007/978-3-662-49630-5_3
   Barthe G, 2002, ACM SIGPLAN NOTICES, V37, P131, DOI 10.1145/509799.503043
   Bizjak A, 2016, LECT NOTES COMPUT SC, V9634, P20, DOI 10.1007/978-3-662-49630-5_2
   Boulier S, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P182, DOI 10.1145/3018610.3018620
   Bowman WJ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158110
   Coquand T, 2019, THEOR COMPUT SCI, V777, P184, DOI 10.1016/j.tcs.2019.01.015
   Fuhrmann C., 1999, Electronic Notes in Theoretical Computer Science, V20, DOI 10.1016/S1571-0661(04)80078-1
   Gilbert G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290316
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Glivenko, 1929, ACAD ROY BELG, V15, P183
   GRIFFIN TG, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P47, DOI 10.1145/96709.96714
   Herbelin H, 2005, LECT NOTES COMPUT SC, V3461, P209
   Jaber G, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P367, DOI 10.1145/2933575.2935320
   Jaber Guilhem, 2012, LICS 2012 LOGIC COMP
   KRIVINE JL, 1994, ANN PURE APPL LOGIC, V68, P53, DOI 10.1016/0168-0072(94)90047-7
   Lepigre R, 2016, LECT NOTES COMPUT SC, V9632, P476, DOI 10.1007/978-3-662-49498-1_19
   Levy PB, 2017, ACM SIGPLAN NOTICES, V52, P400, DOI 10.1145/3093333.3009898
   Levy Paul Blain, 2001, Ph. D. Dissertation
   Levy PB, 2002, LECT NOTES COMPUT SC, V2471, P232
   Martin-Löf P, 2006, COMPUT J, V49, P345, DOI 10.1093/comjnl/bxh162
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Munch-Maccagnoni Guillaume, 2014, 17 INT C FDN SOFTW S, V8412
   Pedrot Pierre-Marie, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P245, DOI 10.1007/978-3-319-89884-1_9
   Pédrot PM, 2017, IEEE S LOG, DOI 10.1109/LICS.2017.8005113
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   Vakar Matthijs, 2015, ARXIVARXIV151208009
   Vakar Matthijs, 2017, THESIS U OXFORD
   Wright A. K., 1995, LISP and Symbolic Computation, V8, P343, DOI 10.1007/BF01018828
NR 30
TC 12
Z9 12
U1 1
U2 7
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2020
VL 4
AR 58
DI 10.1145/3371126
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA UA5LF
UT WOS:000685202400059
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Jangda, A
   Pinckney, D
   Brun, Y
   Guha, A
AF Jangda, Abhinav
   Pinckney, Donald
   Brun, Yuriy
   Guha, Arjun
TI Formal Foundations of Serverless Computing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE serverless computing; distributed computing; formal language semantics
AB Serverless computing (also known as functions as a service) is a new cloud computing abstraction that makes it easier to write robust, large-scale web services. In serverless computing, programmers write what are called serverless functions, which are programs that respond to external events. When demand for the serverless function spikes, the platform automatically allocates additional hardware and manages load-balancing; when demand falls, the platform silently deallocates idle resources; and when the platform detects a failure, it transparently retries affected requests. In 2014, Amazon Web Services introduced the first serverless platform, AWS Lambda, and similar abstractions are now available on all major cloud computing platforms.
   Unfortunately, the serverless computing abstraction exposes several low-level operational details that make it hard for programmers to write and reason about their code. This paper sheds light on this problem by presenting lambda(lambda), an operational semantics of the essence of serverless computing. Despite being a small (half a page) core calculus, lambda(lambda), models all the low-level details that serverless functions can observe. To show that lambda(lambda) is useful, we present three applications. First, to ease reasoning about code, we present a simplified naive semantics of serverless execution and precisely characterize when the naive semantics and coincide. Second, we augment lambda(lambda) with a key-value store to allow reasoning about stateful serverless functions. Third, since a handful of serverless platforms support serverless function composition, we show how to extend A with a composition language and show that our implementation can outperform prior work.
C1 [Jangda, Abhinav; Pinckney, Donald; Brun, Yuriy; Guha, Arjun] Univ Massachusetts, Amherst, MA 01003 USA.
C3 University of Massachusetts System; University of Massachusetts Amherst
RP Jangda, A (corresponding author), Univ Massachusetts, Amherst, MA 01003 USA.
OI Pinckney, Donald/0000-0001-8612-5178; Guha, Arjun/0000-0002-7493-3271
FU National Science Foundation [CNS-1413985, CCF-1453474, CNS-1513055]
FX This work was partially supported by the National Science Foundation
   under grants CNS-1413985, CCF-1453474, and CNS-1513055. We thank Samuel
   Baxter, Breanna Devore-McDonald, and Joseph Spitzer for their work on
   the spl implementation.
CR Akkus IE, 2018, PROCEEDINGS OF THE 2018 USENIX ANNUAL TECHNICAL CONFERENCE, P923
   Alpernas K, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276488
   Amazon, 2018, AWS LAMBD DEV GUID I
   Ao LX, 2018, PROCEEDINGS OF THE 2018 ACM SYMPOSIUM ON CLOUD COMPUTING (SOCC '18), P263, DOI 10.1145/3267809.3267815
   Aske A, 2018, INT CONF PARA PROC, DOI 10.1145/3229710.3229742
   Bakst A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133934
   Baldini Ioana, 2017, S NEW IDEAS NEW PARA
   Baudart Guillaume, 2018, ACM SIGPLAN INT S NE
   Bernstein P., 2014, Orleans: Distributed virtual actors for programmability and scalability, MSR-TR-2014-41
   Bjorkqvist Mathias, 2016, NETW OP MAN S NOMS
   Bracevac O, 2016, PROCEEDINGS OF THE 15TH INTERNATIONAL CONFERENCE ON MODULARITY (MODULARITY'16), P94, DOI 10.1145/2889443.2889452
   Chajed Tej, 2018, USENIX S OP SYST DES
   Conway Sarah, 2017, CLOUD NATIVE TECHNOL
   Dragoi Cezara, 2016, POPL
   Ellis Alex, 2018, OPENFAAS
   Felleisen Matthias, 1986, P IFIP TC 2WG 22 WOR
   Fischer Jeffery, 2012, ACM SIGPLAN C PROGR
   Fouladi S, 2017, PROCEEDINGS OF NSDI '17: 14TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P363
   Fouladi Sadjad, 2019, LAPTOP LAMBDA OUTSOU
   Gabbrielli Maurizio, 2019, COORDINATION MODELS
   Gan Yu, 2018, COMPUTER ARCHITECTUR
   Gomes VBF, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133933
   Google, 2018, GOOGLE CLOUD FUNCTIO
   Google, 2018, CLOUD FUNCTIONS EXEC
   Guha A, 2013, ACM SIGPLAN NOTICES, V48, P483, DOI 10.1145/2499370.2462178
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Hendrickson S., 2016, P 8 USENIX C HOT TOP
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Jangda Abhinav, 2019, FORMAL FDN SERVERLES
   Jonas E, 2017, PROCEEDINGS OF THE 2017 SYMPOSIUM ON CLOUD COMPUTING (SOCC '17), P445, DOI 10.1145/3127479.3128601
   Microsoft, 2018, CHOOS AZ SERV DEL ME
   Microsoft, 2018, MICR AZ FUNCT
   OpenWhisk, 2018, OPENWHISK ACT
   OpenWhisk, 2018, AP OPENWHISK
   Panda A, 2017, PROCEEDINGS OF THE 16TH WORKSHOP ON HOT TOPICS IN OPERATING SYSTEMS (HOTOS 2017), P30, DOI 10.1145/3102980.3102986
   Park D, 2015, ACM SIGPLAN NOTICES, V50, P346, DOI [10.1145/2813885.2737991, 10.1145/2737924.2737991]
   Paterson R, 2001, ACM SIGPLAN NOTICES, V36, P229, DOI 10.1145/507669.507664
   Pulumi, 2018, PUL CLOUD NAT INFR C
   Qadeer Shaz, 2018, ACM SIGPLAN C OBJ OR
   Rabbah Rodric, 2017, COMPOSING FUNCTIONS
   Ramalingam Ganesan, 2013, ACM SIGPLAN SIGACT S
   Santos Jose Fragoso, 2018, P ACM PROGR LANG 2, V2
   Sergey I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158116
   Shen ZM, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P121, DOI 10.1145/3297858.3304016
   Singhvi A, 2017, HOTNETS-XVI: PROCEEDINGS OF THE 16TH ACM WORKSHOP ON HOT TOPICS IN NETWORKS, P157, DOI 10.1145/3152434.3152450
   Walker David, 2006, P 11 ACM SIGPLAN INT
   Waye Lucas, 2017, ACM INT C FUNCT PROG
   Weerawarana S, 2018, LECT NOTES COMPUT SC, V11080, P12, DOI 10.1007/978-3-319-98648-7_2
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
NR 49
TC 41
Z9 44
U1 1
U2 12
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 149
DI 10.1145/3360575
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500034
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Sharif, H
   Srivastava, P
   Huzaifa, M
   Kotsifakou, M
   Joshi, K
   Sarita, Y
   Zhao, N
   Adve, VS
   Misailovic, S
   Adve, S
AF Sharif, Hashim
   Srivastava, Prakalp
   Huzaifa, Muhammad
   Kotsifakou, Maria
   Joshi, Keyur
   Sarita, Yasmin
   Zhao, Nathan
   Adve, Vikram S.
   Misailovic, Sasa
   Adve, Sarita
TI ApproxHPVM: A Portable Compiler IR for Accuracy-Aware Optimizations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Compiler; Virtual ISA; Approximate Computing; Heterogeneous Systems;
   Deep Neural Networks
ID PROGRAMS
AB We propose ApproxHPVM, a compiler IR and system designed to enable accuracy-aware performance and energy tuning on heterogeneous systems with multiple compute units and approximation methods. ApproxHPVM automatically translates end-to-end application-level quality metrics into accuracy requirements for individual operations. ApproxHPVM uses a hardware-agnostic accuracy-tuning phase to do this translation that provides greater portability across heterogeneous hardware platforms and enables future capabilities like accuracy-aware dynamic scheduling and design space exploration.
   ApproxHPVM incorporates three main components: (a) a compiler IR with hardware-agnostic approximation metrics, (b) a hardware-agnostic accuracy-tuning phase to identify error-tolerant computations, and (c) an accuracy-aware hardware scheduler that maps error-tolerant computations to approximate hardware components. As ApproxHPVM does not incorporate any hardware-specific knowledge as part of the IR, it can serve as a portable virtual ISA that can be shipped to all kinds of hardware platforms.
   We evaluate our framework on nine benchmarks from the deep learning domain and five image processing benchmarks. Our results show that our framework can offload chunks of approximable computations to special-purpose accelerators that provide significant gains in performance and energy, while staying within user-specified application-level quality metrics with high probability. Across the 14 benchmarks, we observe from 1-9x performance speedups and 1.1-11.3x energy reduction for very small reductions in accuracy.
C1 [Sharif, Hashim; Srivastava, Prakalp; Huzaifa, Muhammad; Kotsifakou, Maria; Joshi, Keyur; Zhao, Nathan; Adve, Vikram S.; Misailovic, Sasa; Adve, Sarita] Univ Illinois, Champaign, IL 61820 USA.
   [Sarita, Yasmin] Cornell Univ, Ithaca, NY 14853 USA.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   Cornell University
RP Sharif, H (corresponding author), Univ Illinois, Champaign, IL 61820 USA.
OI Joshi, Keyur/0000-0002-5794-6257
FU DARPA Domain-specific Systems on Chip (DSSOC) program, part of the
   Electronics Resurgence Initiative (ERI) [HR0011-18-C-0122]; National
   Science Foundation [CNS 15-64274]; Applications Driving Architectures
   (ADA) Research Center, a JUMP Center - SRC; Applications Driving
   Architectures (ADA) Research Center, a JUMP Center - DARPA; University
   of Illinois
FX This work was sponsored by the DARPA Domain-specific Systems on Chip
   (DSSOC) program, part of the Electronics Resurgence Initiative (ERI),
   under Contract#HR0011-18-C-0122. It was also supported in part by the
   National Science Foundation Grant CNS 15-64274, the Applications Driving
   Architectures (ADA) Research Center, a JUMP Center co-sponsored by SRC
   and DARPA, and the University of Illinois.
CR [Anonymous], 1989, P ADV NEURAL INFORM
   [Anonymous], 2012, ACM WORKSHOP RELAXIN
   Ansel J, 2014, INT CONFER PARA, P303, DOI 10.1145/2628071.2628092
   Ansel J, 2011, INT SYM CODE GENER, P85, DOI 10.1109/CGO.2011.5764677
   Ansel J, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P38, DOI 10.1145/1542476.1542481
   Baek W, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P198, DOI 10.1145/1806596.1806620
   Boston B, 2015, ACM SIGPLAN NOTICES, V50, P470, DOI [10.1145/2858965.2814301, 10.1145/2814270.2814301]
   Campanoni S, 2015, INT SYM CODE GENER, P235, DOI 10.1109/CGO.2015.7054203
   Carbin M, 2013, ACM SIGPLAN NOTICES, V48, P33, DOI [10.1145/2544173.2509546, 10.1145/2509136.2509546]
   Chen TQ, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P579
   Chen YH, 2016, CONF PROC INT SYMP C, P367, DOI 10.1109/ISCA.2016.40
   Chen YJ, 2014, INT SYMP MICROARCH, P609, DOI 10.1109/MICRO.2014.58
   Chetlur S., 2014, ARXIV14100759
   Ding YF, 2015, ACM SIGPLAN NOTICES, V50, P379, DOI [10.1145/2813885.2737969, 10.1145/2737924.2737969]
   Du ZD, 2015, 2015 ACM/IEEE 42ND ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA), P92, DOI 10.1145/2749469.2750389
   Esmaeilzadeh H, 2012, INT SYMP MICROARCH, P449, DOI 10.1109/MICRO.2012.48
   Franklin Dustin, 2018, NVIDIA Developer Blog
   Geifman Yonatan, 2019, Vgg16 models for cifar-10 and cifar- 100 using keras
   Goiri I, 2015, ACM SIGPLAN NOTICES, V50, P383, DOI [10.1145/2694344.2694351, 10.1145/2775054.2694351]
   Gonugondla SK, 2018, IEEE J SOLID-ST CIRC, V53, P3163, DOI 10.1109/JSSC.2018.2867275
   Gulli A., 2017, DEEP LEARNING KERAS
   He KM, 2016, PROC CVPR IEEE, P770, DOI 10.1109/CVPR.2016.90
   Hoffmann H, 2011, ACM SIGPLAN NOTICES, V46, P199, DOI 10.1145/1961296.1950390
   Howard A. G., 2017, PREPRINT
   Jamshidi DA, 2014, INT CONFER PARA, P431, DOI 10.1145/2628071.2628072
   Komuravelli R, 2015, 2015 ACM/IEEE 42ND ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE (ISCA), P707, DOI 10.1145/2749469.2750374
   Kotsifakou M, 2018, ACM SIGPLAN NOTICES, V53, P68, DOI 10.1145/3200691.3178493
   Krizhevsky A., 2009, LEARNING MULTIPLE LA, DOI DOI 10.1145/3065386
   Krizhevsky A, 2017, COMMUN ACM, V60, P84, DOI 10.1145/3065386
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   LeCun Y., 1998, MNIST DATABASE HANDW
   Levenstein, 2018, ARXIV PREPRINT ARXIV
   Li FF, 2007, COMPUT VIS IMAGE UND, V106, P59, DOI 10.1016/j.cviu.2005.09.012
   Li XJ, 2007, 2007 IEEE INTERNATIONAL CONFERENCE ON MULTIMEDIA AND EXPO, VOLS 1-5, P947
   Lin DD, 2016, PR MACH LEARN RES, V48
   Liu SL, 2016, CONF PROC INT SYMP C, P393, DOI 10.1109/ISCA.2016.42
   Meng J., 2009, INT PARALL DISTRIB P, P1
   Meng Jiayuan, 2010, IPDPS 10, P1
   Micikevicius P., 2018, INT C LEARN REPR, P1
   Misailovic S, 2014, ACM SIGPLAN NOTICES, V49, P309, DOI [10.1145/10.1145/2660193.2660231, 10.1145/2714064.2660231]
   Misailovic S, 2013, ACM T EMBED COMPUT S, V12, DOI 10.1145/2465787.2465790
   Misailovic S, 2011, LECT NOTES COMPUT SC, V6887, P316, DOI 10.1007/978-3-642-23702-7_24
   Misailovic Sasa, 2010, 32 INT C SOFTW ENG, p25S34, DOI [10.1145/1806799.1806808, DOI 10.1145/1806799.1806808]
   NVIDIA, 2018, NVIDIA JETSON TX2 DE
   NVIDIA, 2010, NVIDIA COMPUTE Programmer's Manual, V3
   NVIDIA Developer Forums, 2018, POW MON JETS TX2
   Rinard Martin, 2006, Proceedings of the 20th annual international conference on Supercomputing, P324, DOI 10.1145/1183401.1183447
   Rubio-González C, 2013, INT CONF HIGH PERFOR, DOI 10.1145/2503210.2503296
   Sakr C., 2017, INT C MACHINE LEARNI, P3007
   Samadi M, 2014, ACM SIGPLAN NOTICES, V49, P35, DOI 10.1145/2541940.2541948
   Sampson A, 2011, ACM SIGPLAN NOTICES, V46, P164, DOI 10.1145/1993316.1993518
   Sampson Adrian., 2015, ACCEPT PROGRAMMER GU
   Sander Ben, 2013, Hot Chips Symposium 2013, P1
   Schkufza E, 2014, ACM SIGPLAN NOTICES, V49, P53, DOI [10.1145/2666356.2594302, 10.1145/2594291.2594302]
   Sidiroglou-Douskos Stelios, 2011, P ACM SIGSOFT S EUR, P124, DOI 10.1145/2025113.2025133
   Simonyan K, 2015, Arxiv, DOI arXiv:1409.1556
   Srivastava P, 2018, CONF PROC INT SYMP C, P43, DOI 10.1109/ISCA.2018.00015
   St Amant R, 2014, CONF PROC INT SYMP C, P505, DOI 10.1109/ISCA.2014.6853213
   Stanley-Marbell Phillip, 2018, ABS180905859 CORR
   Thomos N, 2006, IEEE T IMAGE PROCESS, V15, P54, DOI 10.1109/TIP.2005.860338
   XLA Team, 2019, XLA DOM SPEC COMP LI
   Xu R, 2018, PROCEEDINGS OF THE 2018 USENIX ANNUAL TECHNICAL CONFERENCE, P43
   Yang Wei, 2019, CLASSIFICATION CIFAR
   Zhu ZA, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P441
NR 64
TC 6
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 186
DI 10.1145/3360612
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500071
OA gold
DA 2024-07-18
ER

PT J
AU Wang, SY
   Cao, QX
   Mohan, A
   Hobor, A
AF Wang, Shengyi
   Cao, Qinxiang
   Mohan, Anshuman
   Hobor, Aquinas
TI Certifying Graph-Manipulating C Programs via Localizations within Data
   Structures
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Separation logic; Graph-manipulating programs; Coq; CompCert; VST
AB We develop powerful and general techniques to mechanically verify realistic programs that manipulate heap-represented graphs. These graphs can exhibit well-known organization principles, such as being a directed acyclic graph or a disjoint-forest; alternatively, these graphs can be totally unstructured. The common thread for such structures is that they exhibit deep intrinsic sharing and can be expressed using the language of graph theory. We construct a modular and general setup for reasoning about abstract mathematical graphs and use separation logic to define how such abstract graphs are represented concretely in the heap. We develop a LOCALIZE rule that enables modular reasoning about such programs, and show how this rule can support existential quantifiers in postconditions and smoothly handle modified program variables. We demonstrate the generality and power of our techniques by integrating them into the Verified Software Toolchain and certifying the correctness of seven graph-manipulating programs written in CompCert C, including a 400-line generational garbage collector for the CertiCoq project. While doing so, we identify two places where the semantics of C is too weak to define generational garbage collectors of the sort used in the OCaml runtime. Our proofs are entirely machine-checked in Coq.
C1 [Wang, Shengyi; Mohan, Anshuman; Hobor, Aquinas] Natl Univ Singapore, Singapore, Singapore.
   [Cao, Qinxiang] Shanghai Jiao Tong Univ, Shanghai, Peoples R China.
C3 National University of Singapore; Shanghai Jiao Tong University
RP Wang, SY (corresponding author), Natl Univ Singapore, Singapore, Singapore.
OI Mohan, Anshuman/0000-0002-6803-9767
FU Yale-NUS College [R-607-265-322-121]; National Science Foundation
   [CCF-1521602]; Shanghai Pujiang Program [19PJ1406000]
FX We thank Asankhaya Sharma for his help with a previous version of this
   paper, Neel Krishnaswami for his helpful suggestions and encouragements,
   and Xavier Leroy and Robbert Krebbers for fruitful discussions. We also
   thank the CertiCoq team (esp. Andrew W. Appel, Olivier Savary Belanger,
   and Zoe Paraskevopoulou) for their overall support and for hosting
   Shengyi Wang for a summer. This work was funded in part by the Yale-NUS
   College grant R-607-265-322-121, the National Science Foundation grant
   CCF-1521602, and the Shanghai Pujiang Program grant 19PJ1406000. Any
   opinions, findings, and conclusions or recommendations expressed in this
   material are those of the authors and do not necessarily reflect the
   views of Yale-NUS College, the National Science Foundation, or the
   Shanghai Pujiang Program.
CR Anand Abhishek, 2017, INT WORKSH COQ PROGR
   [Anonymous], 2005, A computer-checked proof of the four colour theorem
   Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   Appel Andrew W, 2014, PROGRAM LOGICS CERTI, DOI DOI 10.1017/CBO9781107256552
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Bauer Gertrud, 2002, INT C THEOR PROV HIG, p67S82
   Beckert Bernhard, 2007, Verification of Object-oriented Software: The KeY Approach, DOI DOI 10.1007/978-3-540-69061-0
   Bengtson Jesper, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P315, DOI 10.1007/978-3-642-32347-8_21
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Bornat R, 2006, ELECTRON NOTES THEOR, V155, P247, DOI 10.1016/j.entcs.2005.11.059
   Bornat Richard., 2004, Space, V4
   Butler RickyW., 1998, A PVS Graph Theory Library
   Charguéraud A, 2019, J AUTOM REASONING, V62, P331, DOI 10.1007/s10817-017-9431-7
   Chargueraud A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P418
   Chargueraud Arthur, 2010, P 15 ACM SIGPLAN INT, DOI DOI 10.1145/1863543.1863590
   Chen Ran, 2018, ARXIV181011979
   CHENEY CJ, 1970, COMMUN ACM, V13, P677, DOI 10.1145/362790.362798
   Chin WN, 2012, SCI COMPUT PROGRAM, V77, P1006, DOI 10.1016/j.scico.2010.07.004
   Chlipala A, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P234
   Chou Ching-Tsun, 1994, HIGHER ORDER LOGIC T
   Cormen T.H., 2009, INTRO ALGORITHMS
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Distefano D, 2008, ACM SIGPLAN NOTICES, V43, P213, DOI 10.1145/1449955.1449782
   Dockins R, 2009, LECT NOTES COMPUT SC, V5904, P161, DOI 10.1007/978-3-642-10672-9_13
   Dubois Catherine, 2015, 26 JOURNEES FRANCOPH
   Duprat Jean, 2001, RAPPORT RECHERCHE, V15
   Ericsson AS, 2017, LECT NOTES COMPUT SC, V10499, P444, DOI 10.1007/978-3-319-66107-0_28
   Gammie P, 2015, ACM SIGPLAN NOTICES, V50, P99, DOI [10.1145/2737924.2738006, 10.1145/2813885.2738006]
   Gardner P, 2012, ACM SIGPLAN NOTICES, V47, P31, DOI 10.1145/2103621.2103663
   Guéneau A, 2017, LECT NOTES COMPUT SC, V10201, P584, DOI 10.1007/978-3-662-54434-1_22
   Gueneau Armael, 2019, INTERACTIVE THEOREM
   Hawblitzel C, 2010, LOG METH COMPUT SCI, V6
   Hickey Jason., 2014, REAL WORLD OCAML
   Hobor A, 2013, ACM SIGPLAN NOTICES, V48, P523, DOI 10.1145/2480359.2429131
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krishnaswami Neelakantan R., 2011, THESIS
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Lammich P, 2019, J AUTOM REASONING, V62, P261, DOI 10.1007/s10817-017-9442-4
   Lammich P, 2015, CPP'15: PROCEEDINGS OF THE 2015 ACM CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P137
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   McCreight A, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P468, DOI 10.1145/1250734.1250788
   McCreight A, 2010, ACM SIGPLAN NOTICES, V45, P273, DOI 10.1145/1932681.1863584
   Nipkow Tobias, 2016, 1 INT C FORM STRUCT
   Nordhoff Benedikt, 2012, ARCH FORMAL PROOFS
   Noschinski L, 2015, MATH COMPUT SCI, V9, P23, DOI 10.1007/s11786-014-0183-z
   Noschinski Lars, 2015, THESIS U MUNCHEN
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   OHearn PeterW., 2012, NATO Science for Peace and Security Series, V33, P286, DOI [10.3233/978-1-61499-028-4-286, DOI 10.3233/978-1-61499-028-4-286]
   Pizlo F, 2010, ACM SIGPLAN NOTICES, V45, P146, DOI 10.1145/1809028.1806615
   Raad A, 2015, LECT NOTES COMPUT SC, V9032, P710, DOI 10.1007/978-3-662-46669-8_29
   Reynolds J, 2003, SHORT COURSE SEPARAT
   Ridge T., 2005, GRAPHS TREES ISABELL
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sergey I, 2015, ACM SIGPLAN NOTICES, V50, P77, DOI [10.1145/2813885.2737964, 10.1145/2737924.2737964]
   Tamai Tetsuo, 2000, FORM ENG METH 2000 I, p67S74
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
   Wang Shengyi, 2019, EXTENDED AUTOQUACK
   Wong Wai., 1991, HOL Theorem Proving System and Its Applications, 1991., P395, DOI DOI 10.1109/HOL.1991.596304
   Yamamoto Mitsuharu, 1998, INT C THEOR PROV HIG
   Yamamoto Mitsuharu, 1995, INT C THEOR PROV HIG
   Yang H., 2001, THESIS U ILLINOIS
NR 63
TC 7
Z9 7
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2019
VL 3
AR 171
DI 10.1145/3360597
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VG
UT WOS:000685204500056
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Hackett, J
   Hutton, G
AF Hackett, Jennifer
   Hutton, Graham
TI Call-by-Need Is Clairvoyant Call-by-Value
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE lazy evaluation
AB Call-by-need evaluation, also known as lazy evaluation, provides two key benefits: compositional programming and infinite data. The standard semantics for laziness is Launchbury's natural semantics [1993], which uses a heap to memoise the results of delayed evaluations. However, the stateful nature of this heap greatly complicates reasoning about the operational behaviour of lazy programs. In this article, we propose an alternative semantics for laziness, clairvoyant evaluation, that replaces the state effect with nondeterminism, and prove this semantics equivalent in a strong sense to the standard semantics. We show how this new semantics greatly simplifies operational reasoning, admitting much simpler proofs of a number of results from the literature, and how it leads to the first denotational cost semantics for lazy evaluation.
C1 [Hackett, Jennifer; Hutton, Graham] Univ Nottingham, Sch Comp Sci, Nottingham, England.
C3 University of Nottingham
RP Hackett, J (corresponding author), Univ Nottingham, Sch Comp Sci, Nottingham, England.
EM jennifer.hackett@nottingham.ac.uk; graham.hutton@nottingham.ac.uk
OI Hutton, Graham/0000-0001-9584-5150
FU Engineering and Physical Sciences Research Council (EPSRC)
   [EP/P00587X/1]; Mind the Gap: Unified Reasoning About Program
   Correctness and Efficiency; EPSRC [EP/P00587X/1] Funding Source: UKRI
FX We would like to thank the referees for many useful comments and
   suggestions. This work was funded by the Engineering and Physical
   Sciences Research Council (EPSRC) grant EP/P00587X/1, Mind the Gap:
   Unified Reasoning About Program Correctness and Efficiency.
CR [Anonymous], 1999, PURELY FUNCTIONAL DA
   [Anonymous], 2002, LNCS, DOI DOI 10.1007/3-540-45699-6_8
   Ariola Z. M., 1997, Journal of Functional Programming, V7, P265, DOI 10.1017/S0956796897002724
   Ariola Z. M., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P233, DOI 10.1145/199448.199507
   BIRD RS, 1984, ACTA INFORM, V21, P239, DOI 10.1007/BF00264249
   Bjerner Bror, 1989, INT C FUNCT PROGR LA
   Brassel B, 2007, ACM SIGPLAN NOTICES, V42, P265, DOI 10.1145/1291220.1291193
   Danner N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P140, DOI 10.1145/2784731.2784749
   Ghica D. R., 2005, SIGPLAN Notices, V40, P85, DOI 10.1145/1047659.1040313
   Gustavsson J, 2001, ACM SIGPLAN NOTICES, V36, P265, DOI 10.1145/507669.507667
   Gustavsson  Jorgen, 1999, ELECT NOTES THEORETI, V26
   Hackett J, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P95, DOI 10.1145/2628136.2628142
   Hackett Jennifer, 2018, P ACM PROGR LANG, V2, DOI DOI 10.1145/3236763
   Henderson Peter, 1976, PRINCIPLES PROGRAMMI
   Hope Catherine., 2008, A Functional Semantics for Space and Time
   HUGHES J, 1989, COMPUT J, V32, P98, DOI 10.1093/comjnl/32.2.98
   Hyland JME, 2000, INFORM COMPUT, V163, P285, DOI [10.1006/inco.2000.2917, 10.1006/inco2000.2917]
   JOSEPHS MB, 1989, THEOR COMPUT SCI, V68, P105, DOI 10.1016/0304-3975(89)90122-9
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   Launchbury J., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P144, DOI 10.1145/158511.158618
   Maraist J., 1998, Journal of Functional Programming, V8, P275, DOI 10.1017/S0956796898003037
   Maraist J, 1999, THEOR COMPUT SCI, V228, P175, DOI 10.1016/S0304-3975(98)00358-2
   Moran A., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P43, DOI 10.1145/292540.292547
   Moran  Andrew, 1999, IMPROVEMENT LAZY CON
   Morris J, 1969, THESIS MIT
   Nakata Keiko, 2010, FIXED POINTS COMPUTE
   Rosendahl M., 1989, FPCA 89, P144, DOI DOI 10.1145/99370.99381
   Sabel  David, 2015, PRINCIPLES PRACTICE
   Sands D., 1991, GLASG WORKSH FUNCT P
   Sands David, 1997, HIGHER ORDER OPERATI
   Sansom PM, 1997, ACM T PROGR LANG SYS, V19, P334, DOI 10.1145/244795.244802
   Schmidt-Schau Manfred, IMPLEMENTATION APPL
   Schmidt-Schau Manfred, 2018, ARXIV PREPRINT ARXIV
   Seidel  Daniel, 2011, QUANTITATIVE ASPECTS
   Simoes  Hugo, 2012, INT C FUNCT PROGR
   Turner D. A., 1982, FUNCTIONAL PROGRAMMI
   Wadler Philip, 1987, FUNCTIONAL PROGRAMMI
NR 37
TC 8
Z9 10
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 114
DI 10.1145/3341718
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900037
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Hameer, A
   Pientka, B
AF Hameer, Aliya
   Pientka, Brigitte
TI Teaching the Art of Functional Programming using Automated Grading
   (Experience Report)
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE OCaml; functional programming; programming education; automated grading;
   online programming platforms; programming style; test-driven development
AB Online programming platforms have immense potential to improve students' educational experience. They make programming more accessible, as no installation is required; and automatic grading facilities provide students with immediate feedback on their code, allowing them to to fix bugs and address errors in their understanding right away. However, these graders tend to focus heavily on the functional correctness of a solution, neglecting other aspects of students' code and thereby causing students to miss out on a significant amount of valuable feedback.
   In this paper, we recount our experience in using the Learn-OCaml online programming platform to teach functional programming in a second-year university course on programming languages and paradigms. Moreover, we explore how to leverage Learn-OCaml's automated grading infrastructure to make it easy to write more expressive graders that give students feedback on properties of their code beyond simple input/output correctness, in order to effectively teach elements of functional programming style. In particular, we describe our extensions to the Learn-OCand platform that evaluate students on test quality and code style.
   By providing these tools and a suite of our own homework problems and associated graders, we aim to promote functional programming education, enhance students' educational experience, and make teaching and learning typed functional programming more accessible to instructors and students alike, in our community and beyond.
C1 [Hameer, Aliya; Pientka, Brigitte] McGill Univ, Sch Comp Sci, Montreal, PQ, Canada.
C3 McGill University
RP Hameer, A (corresponding author), McGill Univ, Sch Comp Sci, Montreal, PQ, Canada.
EM aliya.hameer@mail.mcgill.ca; bpientka@cs.mcgill.ca
FU Natural Science and Engineering Council (NSERC) [206263]; OCaml Software
   Foundation [249299]
FX This material is based upon work supported by the Natural Science and
   Engineering Council (NSERC) under Grant No. 206263 and by the OCaml
   Software Foundation under Grant No. 249299. Any opinions, findings, and
   conclusions or recommendations expressed in this material are those of
   the author and do not necessarily reflect the views of NSERC or the
   OCaml Software Foundation.
CR Ala-Mutka KM, 2005, COMPUT SCI EDUC, V15, P83, DOI 10.1080/08993400500150747
   Benford S. D., 1995, Proceedings of the 33rd Annual Southeast Conference, P176, DOI 10.1145/1122018.1122050
   Canou B, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110248
   Canou Benjamin, 2016, OCAML US DEV WORKSH
   Chen PM, 2004, IEEE T EDUC, V47, P232, DOI 10.1109/TE.2004.825220
   Cong Youyou, 2016, CONTRACT, V1, pR1
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Di Cosmo Roberto, 2015, INTRO FUNCTIONAL PRO
   Edwards SH, 2003, INTERNATIONAL CONFERENCE ON EDUCATION AND INFORMATION SYSTEMS: TECHNOLOGIES AND APPLICATIONS, PROCEEDINGS, P421
   Edwards SH, 2008, ITICSE '08: PROCEEDINGS OF THE 13TH ANNUAL CONFERENCE ON INNOVATION AND TECHNOLOGY IN COMPUTER SCIENCE EDUCATION, P328
   Gerdes A, 2017, INT J ARTIF INTELL E, V27, P65, DOI 10.1007/s40593-015-0080-x
   Gramoli V., 2016, P AUSTR COMP SCI WEE, DOI [10.1145/2843043.2843070, DOI 10.1145/2843043.2843070]
   Harper RobertW., 2013, PROGRAMMING STANDARD
   Hoffmann Jan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P781, DOI 10.1007/978-3-642-31424-7_64
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   HOLLINGSWORTH J, 1960, COMMUN ACM, V3, P528, DOI 10.1145/367415.367422
   Jackson D., 1997, SIGCSE Bulletin, V29, P335, DOI 10.1145/268085.268210
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   Joy Mike., 2005, J ED RESOURCES COMPU, V5, P2
   Michaelson G., 1996, Proceedings 1996 Australian Software Engineering Conference, P38, DOI 10.1109/ASWEC.1996.534121
   Omar C, 2017, ACM SIGPLAN NOTICES, V52, P86, DOI 10.1145/3093333.3009900
   Pettit Raymond, 2015, P 46 ACM TECHN S COM, P410, DOI [10.1145/2676723.2677279, DOI 10.1145/2676723.2677279]
   Sagonas K, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P13, DOI 10.1145/1599410.1599414
   Schleimer Saul, 2003, P 2003 ACM SIGMOD IN, DOI [10.1145/872757.872770, DOI 10.1145/872757.872770]
   Sherman M., 2013, J. Comput. Sci. Coll., V28, P69, DOI 10.5555/2460156.24601713,4,7
   Sims Z., 2011, Codecademy
   Wilcox C., 2015, Proc. 2015 SIGCSE, P90, DOI DOI 10.1145/2676723.2677226
NR 27
TC 5
Z9 6
U1 0
U2 5
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD AUG
PY 2019
VL 3
AR 115
DI 10.1145/3341719
PG 15
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3VF
UT WOS:000685201900038
OA gold
DA 2024-07-18
ER

PT J
AU Alon, U
   Zilberstein, M
   Levy, O
   Yahav, E
AF Alon, Uri
   Zilberstein, Meital
   Levy, Omer
   Yahav, Eran
TI code2vec: Learning Distributed Representations of Code
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Big Code; Machine Learning; Distributed Representations
AB We present a neural model for representing snippets of code as continuous distributed vectors ("code embeddings"). The main idea is to represent a code snippet as a single fixed-length code vector, which can be used to predict semantic properties of the snippet. To this end, code is first decomposed to a collection of paths in its abstract syntax tree. Then, the network learns the atomic representation of each path while simultaneously learning how to aggregate a set of them.
   We demonstrate the effectiveness of our approach by using it to predict a method's name from the vector representation of its body. We evaluate our approach by training a model on a dataset of 12M methods. We show that code vectors trained on this dataset can predict method names from files that were unobserved during training. Furthermore, we show that our model learns useful method name vectors that capture semantic similarities, combinations, and analogies.
   A comparison of our approach to previous techniques over the same dataset shows an improvement of more than 75%, making it the first to successfully predict method names based on a large, cross-project corpus. Our trained model. visualizations and vector similarities are available as an interactive online demo at http://code2vec.org. The code, data and trained models are available at https://github.com/tech-srl/code2vec.
C1 [Alon, Uri; Zilberstein, Meital; Yahav, Eran] Technion, Haifa, Israel.
   [Levy, Omer] Facebook AI Res, Seattle, WA USA.
C3 Technion Israel Institute of Technology; Facebook Inc
RP Alon, U (corresponding author), Technion, Haifa, Israel.
EM mbs@cs.technion.ac.il; omerlevy@gmail.com; yahave@cs.technion.ac.il
FU European Union [615688-ERC-COG-PRIME]; AWS Cloud Credits for Research
   award
FX The research leading to these results has received funding from the
   European Union's Seventh Framework Programme (FP7) under grant agreement
   no. 615688-ERC-COG-PRIME. Cloud computing resources were provided by an
   AWS Cloud Credits for Research award.
CR Allamanis M., 2017, ARXIV PREPRINT ARXIV
   ALLAMANIS M, 2013, P 10 WORK C MIN SOFT
   Allamanis M, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P38, DOI 10.1145/2786805.2786849
   Allamanis M, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P281, DOI 10.1145/2635868.2635883
   Allamanis M, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P472, DOI 10.1145/2635868.2635901
   Allamanis Miltiadis, P 32 INT C INT C MAC, P2123
   Alon U, 2018, ACM SIGPLAN NOTICES, V53, P404, DOI [10.1145/3192366.3192412, 10.1145/3296979.3192412]
   [Anonymous], 2013, P 9 JOINT M EUR SOFT
   [Anonymous], 2008, PROC INT C MACHINE L
   [Anonymous], 2015, P 2015 C EMP METH NA, DOI [10.18653/v1/D15-1166, DOI 10.48550/ARXIV.1508.04025]
   [Anonymous], PLDI 16
   [Anonymous], P 33 INT C MACH LEAR
   [Anonymous], 1957, STUDIES LINGUISTIC A
   [Anonymous], 2018, ICLR
   Artieres T., 2010, P 13 INT C ARTIFICIA, P177
   Bandanau D, 2016, INT CONF ACOUST SPEE, P4945, DOI 10.1109/ICASSP.2016.7472618
   Bengio Y, 2003, J MACH LEARN RES, V3, P1137, DOI 10.1162/153244303322533223
   Bengio Y., 2014, TECHNICAL REPORT
   Bielik P, 2016, PR MACH LEARN RES, V48
   Callison-Burch C, 2006, 11 C EUROPEAN CHAPTE
   Chaudhuri Swarat, 2017, ABS170305698 CORR
   Chen K., 2013, EFFICIENT ESTIMATION, P2
   Chorowski J, 2015, ADV NEUR IN, V28
   David Y, 2014, ACM SIGPLAN NOTICES, V49, P349, DOI [10.1145/2594291.2594343, 10.1145/2666356.2594343]
   David Yaniv, 2017, PLDI 17
   DEERWESTER S, 1990, J AM SOC INFORM SCI, V41, P391, DOI 10.1002/(SICI)1097-4571(199009)41:6<391::AID-ASI1>3.0.CO;2-9
   DeFreez D, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P423, DOI 10.1145/3236024.3236059
   Durrett G, 2015, PROCEEDINGS OF THE 53RD ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS AND THE 7TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING, VOL 1, P302
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Glorot X., 2010, INT C ARTIFICIAL INT, P249
   Glorot X., 2011, P 28 INT C INT C MAC, P513
   Gvero T, 2015, ACM SIGPLAN NOTICES, V50, P416, DOI [10.1145/2858965.2814295, 10.1145/2814270.2814295]
   Harris ZS, 1954, WORD, V10, P146, DOI 10.1080/00437956.1954.11659520
   Hermann KM, 2015, ADV NEUR IN, V28
   Hindle A, 2012, PROC INT CONF SOFTW, P837, DOI 10.1109/ICSE.2012.6227135
   Host EW, 2009, LECT NOTES COMPUT SC, V5653, P294, DOI 10.1007/978-3-642-03013-0_14
   Iyer S, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P2073
   Katz Omer, 2016, POPL 16
   Katz Omer, 2018, ASPLOS 18
   Kingma D. P., 2014, arXiv
   Le Quoc V., 2014, P INT C MACH LEARN I
   Levy O., 2017, P 21 C COMP NAT LANG, P333, DOI 10.18653/v1/K17-1034
   Levy O., 2014, P 18 C COMP NAT LANG, P171
   Levy O, 2014, ADV NEUR IN, V27
   Lopes CV, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133908
   Lu Yanxin, 2017, ABS170509042 CORR
   Maddison Chris J., 2014, P 31 INT C INT C MAC, pIIS649
   Mikolov T., 2013, ADV NEURAL INFORM PR, V26, P3111, DOI DOI 10.5555/2999792.2999959
   Mikolov Tomas, LINGUISTIC REGULARIT
   Mishne A, 2012, ACM SIGPLAN NOTICES, V47, P997, DOI 10.1145/2398857.2384689
   Mnih V., 2014, Neural Information Processing Systems, P2204
   Movshovitz-Attias Dana., 2013, Natural language models for predicting programming comments"
   Pennington J., 2014, P 2014 C EMP METH NA, P1532, DOI [DOI 10.3115/V1/D14-1162, 10.3115/v1/D14-1162]
   Raychev Veselin, 2016, ACM SIGPLAN Notices, V51, P731, DOI 10.1145/3022671.2984041
   Raychev V, 2016, ACM SIGPLAN NOTICES, V51, P761, DOI 10.1145/2914770.2837671
   Raychev V, 2015, ACM SIGPLAN NOTICES, V50, P111, DOI [10.1145/2775051.2677009, 10.1145/2676726.2677009]
   Raychev V, 2014, ACM SIGPLAN NOTICES, V49, P419, DOI [10.1145/2594291.2594321, 10.1145/2666356.2594321]
   Rubinstein R., 1999, Methodology and computing in applied probability, V1, P127
   Rubinstein RY, 2001, APPL OPTIMIZAT, V54, P303
   SALTON G, 1975, COMMUN ACM, V18, P613, DOI 10.1145/361219.361220
   Seo M., 2016, ARXIV PREPRINT ARXIV
   Socher Richard, 2011, ICML
   Srivastava N, 2014, J MACH LEARN RES, V15, P1929
   Tsoumakas G., 2006, INT J DATA WAREHOUS, V3
   Turian J, 2010, ACL 2010: 48TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, P384
   Turney PD, 2006, COMPUT LINGUIST, V32, P379, DOI 10.1162/coli.2006.32.3.379
   Vaswani A, 2017, ADV NEUR IN, V30
   Vechev M, 2016, FOUND TRENDS PROGRAM, V3, P231, DOI 10.1561/2500000028
   White M, 2015, 12TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2015), P334, DOI 10.1109/MSR.2015.38
   Xu K, 2015, PR MACH LEARN RES, V37, P2048
   Zilberstein M, 2016, ONWARD!'16: PROCEEDINGS OF THE 2016 ACM INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE, P197, DOI 10.1145/2986012.2986013
NR 71
TC 583
Z9 655
U1 0
U2 15
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 40
DI 10.1145/3290353
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300040
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Armstrong, A
   Bauereiss, T
   Campbell, B
   Reid, A
   Gray, KE
   Norton, RM
   Mundkur, P
   Wassell, M
   French, J
   Pulte, C
   Flur, S
   Stark, I
   Krishnaswami, N
   Sewell, P
AF Armstrong, Alasdair
   Bauereiss, Thomas
   Campbell, Brian
   Reid, Alastair
   Gray, Kathryn E.
   Norton, Robert M.
   Mundkur, Prashanth
   Wassell, Mark
   French, Jon
   Pulte, Christopher
   Flur, Shaked
   Stark, Ian
   Krishnaswami, Neel
   Sewell, Peter
TI ISA Semantics for ARMv8-A, RISC-V, and CHERI-MIPS
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Instruction Set Architectures; Semantics; Theorem Proving
AB Architecture specifications notionally define the fundamental interface between hardware and software: the envelope of allowed behaviour for processor implementations, and the basic assumptions for software development and verification. But in practice, they are typically prose and pseudocode documents, not rigorous or executable artifacts, leaving software and verification on shaky ground.
   In this paper, we present rigorous semantic models for the sequential behaviour of large parts of the mainstream ARMv8-A, RISC-V, and MIPS architectures, and the research CHERI-MIPS architecture, that are complete enough to boot operating systems, variously Linux, FreeBSD, or seL4. Our ARMv8-A models are automatically translated from authoritative ARM-internal definitions, and (in one variant) tested against the ARM Architecture Validation Suite.
   We do this using a custom language for ISA semantics, Sail, with a lightweight dependent type system, that supports automatic generation of emulator code in C and OCaml, and automatic generation of proof-assistant definitions for Isabelle, HOL4, and (currently only for MIPS) Coq. We use the former for validation, and to assess specification coverage. To demonstrate the usability of the latter, we prove (in Isabelle) correctness of a purely functional characterisation of ARMv8-A address translation. We moreover integrate the RISC-V model into the RMEM tool for (user-mode) relaxed-memory concurrency exploration. We prove (on paper) the soundness of the core Sail type system.
   We thereby take a big step towards making the architectural abstraction actually well-defined, establishing foundations for verification and reasoning.
C1 [Armstrong, Alasdair; Bauereiss, Thomas; Gray, Kathryn E.; Norton, Robert M.; Wassell, Mark; French, Jon; Pulte, Christopher; Flur, Shaked; Krishnaswami, Neel; Sewell, Peter] Univ Cambridge, Cambridge, England.
   [Campbell, Brian; Stark, Ian] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
   [Reid, Alastair] ARM Ltd, Cambridge, England.
   [Mundkur, Prashanth] SRI Int, 333 Ravenswood Ave, Menlo Pk, CA 94025 USA.
C3 University of Cambridge; University of Edinburgh; Arm Holdings; SRI
   International
RP Armstrong, A (corresponding author), Univ Cambridge, Cambridge, England.
OI Reid, Alastair/0000-0003-4695-6668; Campbell, Brian/0000-0001-6941-5034;
   Pulte, Christopher/0000-0002-7369-183X
FU EPSRC [EP/K008528/1]; ERC [789108]; ARM iCASE award; EPSRC IAA KTF fund;
   ARM donation fund; Defense Advanced Research Projects Agency (DARPA);
   Air Force Research Laboratory (AFRL) [FA8750-10-C-0237,
   HR0011-18-C-0016, FA8650-18-C-7809]; EPSRC [EP/K008528/1] Funding
   Source: UKRI; European Research Council (ERC) [789108] Funding Source:
   European Research Council (ERC)
FX The ARMv8-A modelling work would not have been possible without generous
   technical assistance from ARM. We thank Kyndylan Nienhuis for proving
   useful helper lemmas for the Isabelle proof presented in g8. This work
   was partially supported by EPSRC grant EP/K008528/1 (REMS), ERC Advanced
   Grant 789108 (ELVER), an ARM iCASE award, EPSRC IAA KTF funding, and ARM
   donation funding. This work is part of the CTSRD, ECATS, and CIFV
   projects sponsored by the Defense Advanced Research Projects Agency
   (DARPA) and the Air Force Research Laboratory (AFRL), under contracts
   FA8750-10-C-0237, HR0011-18-C-0016, and FA8650-18-C-7809. The views,
   opinions, and/or findings contained in this paper are those of the
   authors and should not be interpreted as representing the official views
   or policies, either expressed or implied, of the Department of Defense
   or the U.S. Government.
CR Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Alglave J, 2010, LECT NOTES COMPUT SC, V6174, P258, DOI 10.1007/978-3-642-14295-6_25
   Amadio RM, 2014, LECT NOTES COMPUT SC, V8552, P1, DOI 10.1007/978-3-319-12466-7_1
   [Anonymous], 2017
   [Anonymous], 2017, THE GEM5 SIMULATOR
   [Anonymous], 2017, RISC V INSTRUCTION S
   [Anonymous], 2017, Arm architecture reference manual
   Appel Andrew W., 2017, VERIFIED SOFTWARE TO
   Baumann C, 2016, 2016 EUROPEAN CONFERENCE ON NETWORKS AND COMMUNICATIONS (EUCNC), P210, DOI 10.1109/EuCNC.2016.7561034
   Bohannon A, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P407, DOI 10.1145/1328438.1328487
   Brumley David, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P463, DOI 10.1007/978-3-642-22110-1_37
   Chen H, 2016, ACM SIGPLAN NOTICES, V51, P431, DOI [10.1145/2908080.2908101, 10.1145/2980983.2908101]
   Chlipala A, 2013, ACM SIGPLAN NOTICES, V48, P391, DOI [10.1145/2544174.2500592, 10.1145/2500365.2500592]
   Choi J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110268
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Degenbaev Ulan, 2012, THESIS U SAARLANDES
   Dias J, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P403, DOI 10.1145/1706299.1706346
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Flur S, 2017, ACM SIGPLAN NOTICES, V52, P429, DOI 10.1145/3093333.3009839
   Flur S, 2016, ACM SIGPLAN NOTICES, V51, P608, DOI 10.1145/2914770.2837615
   Fox Anthony, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P338, DOI 10.1007/978-3-642-32347-8_23
   Fox A, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P125, DOI 10.1145/3018610.3018621
   Fox A, 2015, LECT NOTES COMPUT SC, V9236, P187, DOI 10.1007/978-3-319-22102-1_12
   Fox A, 2010, LECT NOTES COMPUT SC, V6172, P243, DOI 10.1007/978-3-642-14052-5_18
   Goel Shilpi, 2017, PROVABLY CORRECT SYS, P173, DOI [DOI 10.1007/978-3-319-48628-4_8, 10.1007/978-3-319-48628-4_8]
   Gray KE, 2015, PROCEEDINGS OF THE 48TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO-48), P635, DOI 10.1145/2830772.2830775
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Guanciale R, 2016, J COMPUT SECUR, V24, P793, DOI 10.3233/JCS-160558
   Intel Corporation, 2017, INT 64 IA 32 ARCH SO
   Jensen JB, 2013, ACM SIGPLAN NOTICES, V48, P301, DOI 10.1145/2480359.2429105
   Joloboff V, 2015, LECT NOTES COMPUT SC, V9409, P105, DOI 10.1007/978-3-319-25942-0_7
   Jourdan JH, 2015, ACM SIGPLAN NOTICES, V50, P247, DOI [10.1145/2775051.2676966, 10.1145/2676726.2676966]
   Kennedy Andrew., 2013, P 15 S PRINCIPLES PR, P13, DOI DOI 10.1145/2505879.2505897
   Klein G, 2014, ACM T COMPUT SYST, V32, DOI 10.1145/2560537
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leinenbach D, 2009, LECT NOTES COMPUT SC, V5850, P806, DOI 10.1007/978-3-642-05089-3_51
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Leroy Xavier, 2017, COMPCERT 3 1
   Lim J, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2450136.2450139
   Misra P., 2008, PROCESSOR DESCRIPTIO
   Morrisett G, 2012, ACM SIGPLAN NOTICES, V47, P395, DOI 10.1145/2345156.2254111
   Mulligan DP, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P175, DOI 10.1145/2628136.2628143
   Myreen Magnus Oskar, 2009, THESIS U CAMBRIDGE U
   Nethercote N, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P89, DOI 10.1145/1250734.1250746
   Pugh William., 1991, SUPERCOMPUTING 91, P4, DOI DOI 10.1145/125826.125848
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Reid A., 2017, ARM RELEASES MACHINE
   Reid A, 2016, PROCEEDINGS OF THE 2016 16TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2016), P161
   Reid A, 2016, LECT NOTES COMPUT SC, V9780, P42, DOI 10.1007/978-3-319-41540-6_3
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Sarkar Susmit, 2011, ACM C PROGR LANG DES, DOI [10.1145/1993498.1993520, DOI 10.1145/1993498.1993520]
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   Shoshitaishvili Y, 2016, P IEEE S SECUR PRIV, P138, DOI 10.1109/SP.2016.17
   Spector-Zabusky A., 2018, P 7 ACM SIGPLAN INT, P14, DOI [10.1145/3167092, DOI 10.1145/3167092]
   Syeda HT, 2018, LECT NOTES COMPUT SC, V10895, P542, DOI 10.1007/978-3-319-94821-8_32
   Tan YK, 2016, ACM SIGPLAN NOTICES, V51, P60, DOI 10.1145/3022670.2951924
   Watson RNM, 2015, P IEEE S SECUR PRIV, P20, DOI 10.1109/SP.2015.9
   Woodruff J, 2014, CONF PROC INT SYMP C, P457, DOI 10.1109/ISCA.2014.6853201
   Xi HW, 2007, J FUNCT PROGRAM, V17, P215, DOI 10.1017/S0956796806006216
   Xiaomu Shi, 2013, THESIS U GRENOBLE
NR 63
TC 44
Z9 48
U1 0
U2 8
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 71
DI 10.1145/3290384
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300071
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Blanchette, JC
   Gheri, L
   Popescu, A
   Traytel, D
AF Blanchette, Jasmin Christian
   Gheri, Lorenzo
   Popescu, Andrei
   Traytel, Dmitriy
TI Bindings as Bounded Natural Functors
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE syntax with bindings; inductive and coinductive datatypes; proof
   assistants
ID METATHEORY; RECURSION; SYNTAX
AB We present a general framework for specifying and reasoning about syntax with bindings. Abstract binder types are modeled using a universe of functors on sets, subject to a number of operations that can be used to construct complex binding patterns and binding-aware datatypes, including non-well-founded and infinitely branching types, in a modular fashion. Despite not committing to any syntactic format, the framework is "concrete" enough to provide definitions of the fundamental operators on terms (free variables, alpha-equivalence, and capture-avoiding substitution) and reasoning and definition principles. This work is compatible with classical higher-order logic and has been formalized in the proof assistant Isabelle/HOL.
C1 [Blanchette, Jasmin Christian] Vrije Univ Amsterdam, Dept Comp Sci, De Boelelaan 1081a, NL-1081 HV Amsterdam, Netherlands.
   [Blanchette, Jasmin Christian] Max Planck Inst Informat, Res Grp 1, Saarland Informat Campus E1 4, D-66123 Saarbrucken, Germany.
   [Gheri, Lorenzo; Popescu, Andrei] Middlesex Univ London, Sch Sci & Technol, London NW4 4BT, England.
   [Popescu, Andrei] Romanian Acad, Inst Math Simion Stoilow, Calea Grivitei 21, Bucharest 010702, Romania.
   [Traytel, Dmitriy] Swiss Fed Inst Technol, Dept Comp Sci, Inst Informat Secur, Univ Str 6, CH-8092 Zurich, Switzerland.
C3 Vrije Universiteit Amsterdam; Max Planck Society; Middlesex University;
   Institute of Mathematics of the Romanian Academy; Romanian Academy of
   Sciences; Swiss Federal Institutes of Technology Domain; ETH Zurich
RP Blanchette, JC (corresponding author), Vrije Univ Amsterdam, Dept Comp Sci, De Boelelaan 1081a, NL-1081 HV Amsterdam, Netherlands.; Blanchette, JC (corresponding author), Max Planck Inst Informat, Res Grp 1, Saarland Informat Campus E1 4, D-66123 Saarbrucken, Germany.
EM j.c.blanchette@vu.nl; lg571@live.indx.ac.uk; A.Popescu@mdx.ac.uk;
   traytel@inf.ethz.ch
RI Traytel, Dmitriy/AAC-6052-2021
OI Traytel, Dmitriy/0000-0001-7982-2768; Blanchette, Jasmin
   Christian/0000-0002-8367-0936
FU European Research Council (ERC) under the European Union's Horizon 2020
   research and innovation program [713999]; German Federal Ministry of
   Education and Research (BMBF); Hessen State Ministry for Higher
   Education, Research, and the Arts (HMWK) within CRISP; UK's Engineering
   and Physical Sciences Research Council (EPSRC) [EP/N019547/1]; EPSRC
   [EP/N019547/1] Funding Source: UKRI
FX The paper and its formalization have benefited from detailed comments by
   six reviewers and two artifact evaluators at POPL and four reviewers at
   ICFP, whose wit and dedication we highly appreciate. It also benefited
   from Mark Summerfield's many suggestions. Blanchette received funding
   from the European Research Council (ERC) under the European Union's
   Horizon 2020 research and innovation program (grant No. 713999,
   Matryoshka). Gheri was partially supported by the German Federal
   Ministry of Education and Research (BMBF) and by the Hessen State
   Ministry for Higher Education, Research, and the Arts (HMWK) within
   CRISP. Popescu received funding from UK's Engineering and Physical
   Sciences Research Council (EPSRC) via grant EP/N019547/1, Verification
   of Web-based Systems (VOWS). The authors are listed alphabetically.
CR Abbott M, 2005, THEOR COMPUT SCI, V342, P3, DOI 10.1016/j.tcs.2005.06.002
   Abbott M, 2004, LECT NOTES COMPUT SC, V3125, P2
   Abel Andreas, 2017, Logical Frameworks and MetaLanguages: Theory and Practice (LFMTP) 2017
   ACZEL P, 1989, LNCS, V389, P357, DOI DOI 10.1007/BFB0018361
   ALLAIS G, 2018, P ACM PROGRAMMING LA, DOI DOI 10.1145/3236785
   Altenkirch T, 1999, LECT NOTES COMPUT SC, V1683, P453
   Altenkirch T, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S095679681500009X
   [Anonymous], LECT NOTES MATH
   [Anonymous], 2009, LOGICAL FRAMEWORKS M, DOI [DOI 10.1145/1577824.1577827, 10.1145/1577824.1577827]
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 2012, WORKSH GEN PROGR 201, DOI DOI 10.1145/2364394.2364403
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   Aydemir B, 2007, ELECTRON NOTES THEOR, V174, P69, DOI 10.1016/j.entcs.2007.01.028
   Baelde D, 2014, J FORMALIZ REASON, V7, P1
   Barendregt Henk P., 1984, STUDIES LOGIC, V40
   Bergeron F., 1997, Combinatorial Species and Tree-like Structures
   Berghofer S, 2007, ELECTRON NOTES THEOR, V174, P53, DOI 10.1016/j.entcs.2007.01.018
   Bird R. S., 1999, Journal of Functional Programming, V9, P77, DOI 10.1017/S0956796899003366
   Blanchette Jasmin Christian, 2014, Interactive Theorem Proving. 5th International Conference, ITP 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8558, P93, DOI 10.1007/978-3-319-08970-6_7
   Blanchette JC, 2017, IEEE S LOG
   BRUIJN NGD, 1972, P K NED AKAD A MATH, V75, P381
   Charguéraud A, 2012, J AUTOM REASONING, V49, P363, DOI 10.1007/s10817-011-9225-2
   Chlipala A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   COPELLO E, 2018, LOGICAL FRAMEWORKS M, V274, DOI DOI 10.4204/EPTCS.274.2
   Despeyroux J., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P124, DOI 10.1007/BFb0014049
   FELTY A, 2015, LFMTP, P18, DOI DOI 10.4204/EPTCS.185.2
   Felty A, 2012, J AUTOM REASONING, V48, P43, DOI 10.1007/s10817-010-9194-x
   Felty A, 2010, LECT NOTES COMPUT SC, V6172, P227, DOI 10.1007/978-3-642-14052-5_17
   Felty AP, 2015, J AUTOM REASONING, V55, P307, DOI 10.1007/s10817-015-9327-3
   Ferreira F, 2017, LECT NOTES COMPUT SC, V10201, P504, DOI 10.1007/978-3-662-54434-1_19
   Fiore M, 2008, J LOND MATH SOC, V77, P203, DOI 10.1112/jlms/jdm096
   Fiore M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P193, DOI 10.1109/LICS.1999.782615
   Firsov Denis., 2018, Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs, CPP 2018, page, P215, DOI [10.1145/3167087, DOI 10.1145/3167087]
   Gabbay M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P214, DOI 10.1109/LICS.1999.782617
   Gabbay M. J., 2002, Formal Aspects of Computing, V13, P341, DOI 10.1007/s001650200016
   Gabbay MJ, 2007, INFORM COMPUT, V205, P982, DOI 10.1016/j.ic.2006.10.010
   Gambino N, 2004, ANN NY ACAD SCI, V3085, P210
   Ghani N., 2006, Higher-Order and Symbolic Computation, V19, P263, DOI 10.1007/s10990-006-8748-4
   Ghani N, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(3:6)2013
   Gheri L, 2017, LECT NOTES COMPUT SC, V10499, P241, DOI 10.1007/978-3-319-66107-0_16
   Ghica Dan R., 2018, LEIBNIZ INT P INFORM
   Gordon M.J.C., 1993, Introduction to HOL: A theorem proving environment for higher order logic
   HARPER R, 1987, LOGIC COMPUTER SCI L
   Hennessy M., 1980, Automata, Languages and Programming, Seventh Colloquium, P299
   Hensel U., 1997, Category Theory and Computer Science. 7th International Conference, CTCS '97. Proceedings, P220, DOI 10.1007/BFb0026991
   HIRSCHOWITZ A, 2012, FIXED POINTS COMPUTE, V77, DOI DOI 10.4204/EPTCS.77.5
   Hofmann M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P204, DOI 10.1109/LICS.1999.782616
   Hoogendijk P., 2000, Journal of Functional Programming, V10, P191, DOI 10.1017/S0956796899003640
   HUET G, 1978, ACTA INFORM, V11, P31, DOI 10.1007/BF00264598
   Joachimski Felix., 2001, THESIS LMU MUNCHEN
   JOHNSTONE PT, 1983, MATH PROC CAMBRIDGE, V93, P409, DOI 10.1017/S0305004100060734
   JOYAL A, 1981, ADV MATH, V42, P1, DOI 10.1016/0001-8708(81)90052-9
   KEISLER HJ, 1971, STUDIES LOGIC FDN MA, V62
   Kennaway JR, 1997, THEOR COMPUT SCI, V175, P93, DOI 10.1016/S0304-3975(96)00171-5
   Keuchel S, 2016, LECT NOTES COMPUT SC, V9632, P419, DOI 10.1007/978-3-662-49498-1_17
   Kock J, 2012, ELECTRON NOTES THEOR, V286, P351, DOI 10.1016/j.entcs.2013.01.001
   Kuncar O, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158112
   Kurz Alexander, 2012, Coalgebraic Methods in Computer Science. 11th International Workshop, CMCS 2012 Colocated with ETAPS 2012. Revised Selected Papers, P130, DOI 10.1007/978-3-642-32784-1_8
   Kurz A, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:20)2013
   Lee G, 2012, LECT NOTES COMPUT SC, V7211, P436, DOI 10.1007/978-3-642-28869-2_22
   Lescanne P., 1995, Rewriting Techniques and Applications. 6th International Conference, RTA-95. Proceedings, P294
   Licata DR, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123
   MAKKAI M, 1990, CONT MATH, V104
   Matthes R, 2004, THEOR COMPUT SCI, V327, P155, DOI 10.1016/j.tcs.2004.07.025
   McBride C, 2004, LECT NOTES COMPUT SC, V3622, P130
   Miller Dale, 2017, LIPICS, V21, DOI 10.4230/LIPIcs.FSCD.2017.21
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Milner R., 1989, Communication and concurrency
   Morris P, 2009, INT J FOUND COMPUT S, V20, P83, DOI 10.1142/S0129054109006462
   Nordstrom B., 1990, Programming in Martin-Lof's Type Theory
   Norrish M, 2004, LECT NOTES COMPUT SC, V3223, P241
   Paulson L. C., 1989, Journal of Automated Reasoning, V5, P363, DOI 10.1007/BF00248324
   Pfenning F., 1999, Automated Deduction - CADE-16. 16th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.1632), P202
   PFENNING F, 1988, SIGPLAN NOTICES, V23, P199, DOI 10.1145/960116.54010
   Pientka B, 2010, LECT NOTES COMPUT SC, V6009, P1, DOI 10.1007/978-3-642-12251-4_1
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pitts AM, 2003, INFORM COMPUT, V186, P165, DOI 10.1016/S0890-5401(03)00138-X
   Pitts AM, 2006, J ACM, V53, P459, DOI 10.1145/1147954.1147961
   Pitts Andrew M., 1993, GORDON MELHAM, P191
   POPESCU A, 2010, LOGIC COMPUTER SCI L, DOI DOI 10.1109/LICS.2010.48
   Poswolsky A, 2009, ELECTRON NOTES THEOR, V228, P113, DOI 10.1016/j.entcs.2008.12.120
   Pottier F, 2006, ELECTRON NOTES THEOR, V148, P27, DOI 10.1016/j.entcs.2005.11.039
   Rutten J., 1998, ELECT NOTES THEOR CO, V11, P252, DOI [DOI 10.1016/S1571-0661(04)00063-5, 10.1016/S1571-0661(04)00063-5]
   Schäfer S, 2015, LECT NOTES COMPUT SC, V9236, P359, DOI 10.1007/978-3-319-22102-1_24
   Schürmann C, 2001, THEOR COMPUT SCI, V266, P1, DOI 10.1016/S0304-3975(00)00418-7
   Sewell P, 2010, J FUNCT PROGRAM, V20, P71, DOI 10.1017/S0956796809990293
   Smith Jan M., 1999, LNCS, V1956, P21, DOI [10.1007/3-540-44557-9_2, DOI 10.1007/3-540-44557-9_2]
   Staton Sam, 2007, Technical Report UCAM-CL-TR-688
   TRAYTEL D, 2012, LOGIC COMPUTER SCI L
   Traytel Dmitriy, BINDINGS BOUNDED NAT
   Traytel Dmitriy, FORMALIZATION ASS TH
   Urban C, 2005, LECT NOTES ARTIF INT, V3632, P38
   Urban C, 2007, LECT NOTES ARTIF INT, V4603, P35
   Urban C, 2006, LECT NOTES ARTIF INT, V4130, P498
   Urban C, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(2:14)2012
   van Antwerpen H, 2016, PEPM'16: PROCEEDINGS OF THE 2016 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P49, DOI 10.1145/2847538.2847543
   Weirich S, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P333
   Yorgey B. A., 2014, Combinatorial Species and Labelled Structures
NR 100
TC 7
Z9 7
U1 0
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 22
DI 10.1145/3290335
PG 34
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300022
OA Green Published, gold, Green Accepted
DA 2024-07-18
ER

PT J
AU Cyphert, J
   Breck, J
   Kincaid, Z
   Reps, T
AF Cyphert, John
   Breck, Jason
   Kincaid, Zachary
   Reps, Thomas
TI Refinement of Path Expressions for Static Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Algebraic program analysis; control-flow refinement;
   abstract-interpretation precision
AB Algebraic program analyses compute information about a program's behavior by first (a) computing a valid path expression-i.e., a regular expression that recognizes all feasible execution paths (and usually more) and then (b) interpreting the path expression in a semantic algebra that defines the analysis. There are an infinite number of different regular expressions that qualify as valid path expressions, which raises the question " Which one should we choose?" While any choice yields a sound result, for many analyses the choice can have a drastic effect on the precision of the results obtained. This paper investigates the following two questions:
   (1) What does it mean for one valid path expression to be "better" than another?
   (2) Can we compute a valid path expression that is "better," and if so, how?
   We show that it is not satisfactory to compare two path expressions E-1 and E-2 solely by means of the languages that they generate. Counter to one's intuition, it is possible for L(E-2) subset of L(E-1), yet for E-2 to produce a less-precise analysis result than E-1-and thus we would not want to perform the transformation E-1 -> E2. However, the exclusion of paths so as to analyze a smaller language of paths is exactly the refinement criterion used by some prior methods.
   In this paper, we develop an algorithm that takes as input a valid path expression E, and returns a valid path expression E' that is guaranteed to yield analysis results that are at least as good as those obtained using E. While the algorithm sometimes returns E itself, it typically does not: (i) we prove a no-degradation result for the algorithm's base case-for transforming a leaf loop (i.e., a most-deeply-nested loop); (ii) at a non-leaf loop L, the algorithm treats each loop L' in the body of L as an indivisible atom, and applies the leaf-loop algorithm to L; the no-degradation result carries over to (ii), as well. Our experiments show that the technique has a substantial impact: the loop-refinement algorithm allows the implementation of Compositional Recurrence Analysis to prove over 25% more assertions for a collection of challenging loop micro-benchmarks.
C1 [Cyphert, John; Breck, Jason; Reps, Thomas] Univ Wisconsin, Madison, WI 53706 USA.
   [Kincaid, Zachary] Princeton Univ, Princeton, NJ 08544 USA.
   [Reps, Thomas] GrammaTech Inc, Ithaca, NY USA.
C3 University of Wisconsin System; University of Wisconsin Madison;
   Princeton University
RP Cyphert, J (corresponding author), Univ Wisconsin, Madison, WI 53706 USA.
EM jcyphert@wisc.edu; jbreck@wisc.edu; zkincaid@cs.princeton.edu;
   reps@cs.wisc.edu
OI Kincaid, Zachary/0000-0002-7294-9165; Cyphert, John/0009-0007-6310-413X
FU AFRL under DARPA MUSE [FA8750-14-2-0270]; DARPA STAC award
   [FA8750-15-C-0082]; ONR [N00014-17-1-2889]; UW-Madison Office of the
   Vice Chancellor for Research and Graduate Education; WARF
FX This work was supported in part by a gift from Rajiv and Ritu Batra; by
   AFRL under DARPA MUSE award FA8750-14-2-0270 and DARPA STAC award
   FA8750-15-C-0082; by ONR under grant N00014-17-1-2889; and by the
   UW-Madison Office of the Vice Chancellor for Research and Graduate
   Education with funding from WARF. Opinions, findings, conclusions, or
   recommendations expressed herein are those of the authors and do not
   necessarily reflect the views of the sponsoring agencies.
CR Ammons G., 1998, PLDI
   Ancourt C, 2010, ELECTRON NOTES THEOR, V267, P3, DOI 10.1016/j.entcs.2010.09.002
   [Anonymous], 2013, OOPSLA
   Balakrishnan G., 2009, EMSOFT
   Ball T., 2001, PASTE
   Bouajjani A, 2003, ACM SIGPLAN NOTICES, V38, P62, DOI 10.1145/640128.604137
   Bozga M., 2009, TACAS
   Carbonneaux Q., 2015, PLDI
   Cousot P, 2002, ACM SIGPLAN NOTICES, V37, P178, DOI 10.1145/565816.503290
   Cousot Patrick., 1978, POPL
   Das M, 2002, ACM SIGPLAN NOTICES, V37, P57, DOI 10.1145/543552.512538
   Dillig I, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P270, DOI 10.1145/1375581.1375615
   Elder M., 2014, TOPLAS, V36
   Farzan A, 2013, ALGEBRAIC FRAMEWORK ALGEBRAIC FRAMEWORK
   Farzan A., 2015, FMCAD
   FISHER JA, 1981, IEEE T COMPUT, V30, P478, DOI 10.1109/TC.1981.1675827
   Flores-Montoya A., 2014, APLAS
   Gulwani S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P375, DOI 10.1145/1542476.1542518
   Gurfinkel A., 2015, CAV
   Heizmann M., 2013, TACAS
   HOLLEY LH, 1981, IEEE T SOFTWARE ENG, V7, P60, DOI 10.1109/TSE.1981.234509
   Jeannet B., 2004, AMAST
   Johnson D. B., 1975, SIAM Journal on Computing, V4, P77, DOI 10.1137/0204007
   Kidd N., 2007, WALi: The Weighted Automaton Library
   Kincaid Z., 2017, PLDI
   Kincaid Z., 2018, SAS
   King A., 2010, VMCAI
   Kot L, 2005, ELECT NOTES THEOR CO, V141, P1
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   Kozen D, 2003, 20031915 CORN U DEPT 20031915 CORN U DEPT
   Li Y, 2014, ACM SIGPLAN NOTICES, V49, P607, DOI 10.1145/2535838.2535857
   Melski D.G, 2002, 1435 U WISC COMP SCI 1435 U WISC COMP SCI
   Müller-Olm M, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275504
   Muller-Olm M., 2004, POPL
   Reps T, 2005, SCI COMPUT PROGRAM, V58, P206, DOI 10.1016/j.scico.2005.02.009
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T, 2018, PACMPL PACMPL, P1
   Rival X, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275501
   Sagiv M, 1996, THEOR COMPUT SCI, V167, P131, DOI 10.1016/0304-3975(96)00072-2
   Schwoon S, MOPED SYSTEM
   Sebastiani Roberto, 2012, Automated Reasoning. Proceedings 6th International Joint Conference, IJCAR 2012, P484, DOI 10.1007/978-3-642-31365-3_38
   Sharir Micha, 1981, PROGRAM FLOW ANAL TH
   Sharma R., 2011, CAV
   SVCOMP16, 2016, 5 INT COMP SOFTW VER 5 INT COMP SOFTW VER
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   TARJAN RE, 1981, J ACM, V28, P577, DOI 10.1145/322261.322272
   TARJAN RE, 1981, J ACM, V28, P594, DOI 10.1145/322261.322273
   Xie Y., 2003, ESEC FSE ESEC FSE
NR 48
TC 11
Z9 11
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 45
DI 10.1145/3290358
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300045
OA gold
DA 2024-07-18
ER

PT J
AU Smith, C
   Hsu, J
   Albarghouthi, A
AF Smith, Calvin
   Hsu, Justin
   Albarghouthi, Aws
TI Trace Abstraction Modulo Probability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Trace abstraction; probabilistic program verification; union bound;
   Craig interpolation
AB We propose trace abstraction modulo probability, a proof technique for verifying high-probability accuracy guarantees of probabilistic programs. Our proofs overapproximate the set of program traces using failure automata, finite-state automata that upper hound the probability of failing to satisfy a target specification. We automate proof construction by reducing probabilistic reasoning to logical reasoning: we use program synthesis methods to select axioms for sampling instructions, and then apply Craig interpolation to prove that traces fail the target specification with only a small probability. Our method handles programs with unknown inputs, parameterized distributions, infinite state spaces, and parameterized specifications. We evaluate our technique on a range of randomized algorithms drawn from the differential privacy literature and beyond. To our knowledge, our approach is the first to automatically establish accuracy properties of these algorithms.
C1 [Smith, Calvin; Hsu, Justin; Albarghouthi, Aws] Univ Wisconsin Madison, Comp Sci Dept, 1210 West Dayton St, Madison, WI 53706 USA.
C3 University of Wisconsin System; University of Wisconsin Madison
RP Smith, C (corresponding author), Univ Wisconsin Madison, Comp Sci Dept, 1210 West Dayton St, Madison, WI 53706 USA.
EM cjsmith@cs.wisc.edu; email@justinh.su; aws@cs.wisc.edu
OI Hsu, Justin/0000-0002-8953-7060
FU National Science Foundation CCF [1566015, 1704117, 1652140, 1637532];
   Division of Computing and Communication Foundations; Direct For Computer
   & Info Scie & Enginr [1704117, 1637532] Funding Source: National Science
   Foundation; Division of Computing and Communication Foundations; Direct
   For Computer & Info Scie & Enginr [1566015, 1652140] Funding Source:
   National Science Foundation
FX We thank Thomas Reps, Zachary Kincaid, Andreas Podelski (our shepherd),
   and the anonymous referees for their insightful comments on earlier
   drafts of this work. This work is supported by the National Science
   Foundation CCF under Grant Nos. 1566015, 1704117, 1652140, and 1637532.
CR Abowd John M., 2017, 1737 CTR EC STUD
   Albarghouthi A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158146
   Albarghouthi A, 2017, LECT NOTES COMPUT SC, V10422, P1, DOI 10.1007/978-3-319-66706-5_1
   Albarghouthi A, 2012, LECT NOTES COMPUT SC, V7148, P39, DOI 10.1007/978-3-642-27940-9_4
   Albarghouthi Aws, 2018, INT C COMP AID VER C
   [Anonymous], 2017, P ACM PROGRAM LANG, DOI DOI 10.1145/3133904
   [Anonymous], 2013, Proceedings of the 25th International Conference on Computer Aided Verification, CAV'13, DOI 10.1007/978-3-642-39799-8
   [Anonymous], 2013, ESEC SIGSOFT FSE
   [Anonymous], 2018, FOSTER GROSSMAN
   Baier C, 2018, HDB MODEL CHECKING, P963, DOI [DOI 10.1007/978-3-319-10575-8, DOI 10.1007/978-3-319-10575-828, DOI 10.1007/978-3-319-10575-8_28]
   Ball T., 2001, Model Checking Software. 8th International SPIN Workshop. Proceedings (Lecture Notes in Computer Science Vol.2057), P103
   Barthe G, 2016, LECT NOTES COMPUT SC, V9779, P43, DOI 10.1007/978-3-319-41528-4_3
   Barthe Gilles, 2018, EUR S PROGR ESOP THE
   Belle V, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P2770
   Bousquet O, 2002, J MACH LEARN RES, V2, P499, DOI 10.1162/153244302760200704
   Carbin M, 2013, ACM SIGPLAN NOTICES, V48, P33, DOI [10.1145/2544173.2509546, 10.1145/2509136.2509546]
   Chadha R, 2007, THEOR COMPUT SCI, V379, P142, DOI 10.1016/j.tcs.2007.02.040
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chan THH, 2011, ACM T INFORM SYST SE, V14, DOI 10.1145/2043621.2043626
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Chatterjee K, 2016, ACM SIGPLAN NOTICES, V51, P327, DOI 10.1145/2914770.2837639
   Chistikov Dmitry, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P320, DOI 10.1007/978-3-662-46681-0_26
   Christ J, 2016, J AUTOM REASONING, V57, P67, DOI 10.1007/s10817-016-9365-5
   Cimatti A, 2013, LECT NOTES COMPUT SC, V7795, P93
   Cook B, 2005, LECT NOTES COMPUT SC, V3672, P87
   Cousot P, 2012, LECT NOTES COMPUT SC, V7211, P169, DOI 10.1007/978-3-642-28869-2_9
   Craig W., 1957, J SYMBOLIC LOGIC, V22, P269
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dehnert Christian, 2017, LECT NOTES COMPUTER
   den Hartog Jerry, 2002, THESIS VRIJE U AMSTE
   Dwork C., 2012, P 3 INNOVATIONS THEO, P214
   Dwork C, 2006, LECT NOTES COMPUT SC, V3876, P265, DOI 10.1007/11681878_14
   Dwork C, 2013, FOUND TRENDS THEOR C, V9, P211, DOI 10.1561/0400000042
   Dwork C, 2010, ACM S THEORY COMPUT, P715
   Erlingsson U, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1054, DOI 10.1145/2660267.2660348
   Farzan A, 2013, ACM SIGPLAN NOTICES, V48, P129, DOI 10.1145/2480359.2429086
   Gehr T, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P586, DOI [10.1145/3192366.3192400, 10.1145/3296979.3192400]
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Haney S, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1339, DOI 10.1145/3035918.3035940
   Heizmann Matthias, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P36, DOI 10.1007/978-3-642-39799-8_2
   Heizmann M, 2018, LECT NOTES COMPUT SC, V10806, P447, DOI 10.1007/978-3-319-89963-3_30
   Heizmann M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P471, DOI 10.1145/1706299.1706353
   Heizmann M, 2009, LECT NOTES COMPUT SC, V5673, P69, DOI 10.1007/978-3-642-03237-0_7
   Henzinger TA, 2004, ACM SIGPLAN NOTICES, V39, P232, DOI 10.1145/982962.964021
   Hermanns H, 2008, LECT NOTES COMPUT SC, V5123, P162
   Hoenicke J, 2018, LECT NOTES ARTIF INT, V10900, P549, DOI 10.1007/978-3-319-94205-6_36
   Johnson N, 2018, PROC VLDB ENDOW, V11, P526, DOI 10.1145/3177732.3177733
   Katoen JP, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P31, DOI 10.1145/2933575.2934574
   Kattenbelt M, 2010, FORM METHOD SYST DES, V36, P246, DOI 10.1007/s10703-010-0097-6
   Kattenbelt M, 2009, LECT NOTES COMPUT SC, V5403, P182, DOI 10.1007/978-3-540-93900-9_17
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Kwiatkowska M., 2010, 2010 48th Annual Allerton Conference on Communication, Control, and Computing (Allerton), P1691, DOI 10.1109/ALLERTON.2010.5707120
   Littman ML, 2001, J AUTOM REASONING, V27, P251, DOI 10.1023/A:1017584715408
   Mardziel P, 2011, 2011 IEEE 24TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P114, DOI 10.1109/CSF.2011.15
   McIver A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158121
   McMillan KL, 2006, LECT NOTES COMPUT SC, V4144, P123
   McMillan KL, 2003, LECT NOTES COMPUT SC, V2725, P1
   McSherry F, 2007, ANN IEEE SYMP FOUND, P94, DOI 10.1109/FOCS.2007.66
   Monniaux D, 2005, SCI COMPUT PROGRAM, V58, P179, DOI 10.1016/j.scico.2005.02.008
   Monniaux D, 2001, LECT NOTES COMPUT SC, V2028, P367
   Monniaux D, 2000, LECT NOTES COMPUT SC, V1824, P322
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Rand R., 2015, C MATH FDN PROGR SEM
   Rummer P., 2013, LECT NOTES COMPUTER, V8164, P1, DOI DOI 10.1007/978-3-642-54108-71
   Rümmer P, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P69
   Sangiorgi Davide, INT C AUT LANG PROGR, V55
   Smith C., 2018, ARXIVCSPL181012396
   Srikanth A, 2017, ACM SIGPLAN NOTICES, V52, P639, DOI 10.1145/3093333.3009864
   Teige T, 2011, LECT NOTES COMPUT SC, V6605, P158, DOI 10.1007/978-3-642-19835-9_14
   Wang D, 2018, ACM SIGPLAN NOTICES, V53, P513, DOI 10.1145/3192366.3192408
   WARNER SL, 1965, J AM STAT ASSOC, V60, P63, DOI 10.2307/2283137
NR 75
TC 7
Z9 8
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2019
VL 3
AR 39
DI 10.1145/3290352
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA VK3KJ
UT WOS:000678450300039
OA Green Submitted, gold
DA 2024-07-18
ER

PT J
AU Cai, Z
   Farokhnia, S
   Goharshady, AK
   Hitarth, S
AF Cai, Zhuo
   Farokhnia, Soroush
   Goharshady, Amir Kafshdar
   Hitarth, S.
TI Asparagus: Automated Synthesis of Parametric Gas Upper-Bounds for Smart
   Contracts
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Smart Contracts; Blockchain; Gas Bounds; Out-of-gas Vulnerabilities
ID POLYNOMIALS
AB Modern programmable blockchains have built-in support for smart contracts, i.e. programs that are stored on the blockchain and whose state is subject to consensus. After a smart contract is deployed on the blockchain, anyone on the network can interact with it and call its functions by creating transactions. The blockchain protocol is then used to reach a consensus about the order of the transactions and, as a direct corollary, the state of every smart contract. Reaching such consensus necessarily requires every node on the network to execute all function calls. Thus, an attacker can perform DoS by creating expensive transactions and function calls that use considerable or even possibly infinite time and space. To avoid this, following Ethereum, virtually all programmable blockchains have introduced the concept of "gas". A fixed hard-coded gas cost is assigned to every atomic operation and the user who calls a function has to pay for its total gas usage. This technique ensures that the protocol is not vulnerable to DoS attacks, but it has also had significant unintended consequences. Out-of-gas errors, i.e. when a user misunderestimates the gas usage of their function call and does not allocate enough gas, are a major source of security vulnerabilities in Ethereum.
   We focus on the well-studied problem of automatically finding upper-bounds on the gas usage of a smart contract. This is a classical problem in the blockchain community and has also been extensively studied by researchers in programming languages and verification. In this work, we provide a novel approach using theorems from polyhedral geometry and real algebraic geometry, namely Farkas' Lemma, Handelman's Theorem, and Putinar's Positivstellensatz, to automatically synthesize linear and polynomial parametric bounds for the gas usage of smart contracts. Our approach is the first to provide completeness guarantees for the synthesis of such parametric upper-bounds. Moreover, our theoretical results are independent of the underlying consensus protocol and can be applied to smart contracts written in any language and run on any blockchain.
   As a proof of concept, we also provide a tool, called "Asparagus" that implements our algorithms for Ethereum contracts written in Solidity. Finally, we provide extensive experimental results over 24,188 real-world smart contracts that are currently deployed on the Ethereum blockchain. We compare Asparagus against GASTAP, which is the only previous tool that could provide parametric bounds, and show that our method significantly outperforms it, both in terms of applicability and the tightness of the resulting bounds. More specifically, our approach can handle 80.56% of the functions (126,269 out of 156,735) in comparison with GASTAP's 58.62%. Additionally, even on the benchmarks where both approaches successfully synthesize a bound, our bound is tighter in 97.85% of the cases.
C1 [Cai, Zhuo; Farokhnia, Soroush; Goharshady, Amir Kafshdar; Hitarth, S.] Hong Kong Univ Sci & Technol, Dept Comp Sci, Clear Water Bay, Hong Kong, Peoples R China.
   [Cai, Zhuo; Farokhnia, Soroush; Goharshady, Amir Kafshdar; Hitarth, S.] Hong Kong Univ Sci & Technol, Dept Math, Clear Water Bay, Hong Kong, Peoples R China.
C3 Hong Kong University of Science & Technology; Hong Kong University of
   Science & Technology
RP Cai, Z (corresponding author), Hong Kong Univ Sci & Technol, Dept Comp Sci, Clear Water Bay, Hong Kong, Peoples R China.; Cai, Z (corresponding author), Hong Kong Univ Sci & Technol, Dept Math, Clear Water Bay, Hong Kong, Peoples R China.
EM zcaiam@connect.ust.hk; sfarokhnia@connect.ust.hk; goharshady@cse.ust.hk;
   hsinghab@connect.ust.hk
RI Cai, Zhuo/KIE-3230-2024
OI Cai, Zhuo/0000-0001-9673-6888; /0000-0001-7419-3560
FU Hong Kong Research Grants Council ECS Project [26208122]; Hong Kong PhD
   Fellowship Scheme (HKPFS)
FX The authors are grateful to the anonymous reviewers for detailed
   comments which significantly improved this work. The research was
   partially supported by Hong Kong Research Grants Council ECS Project
   26208122. Z. Cai was supported by the Hong Kong PhD Fellowship Scheme
   (HKPFS). Following the norms of theoretical computer science, authors
   are listed in alphabetical order.
CR Albert Elvira, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12079), P118, DOI 10.1007/978-3-030-45237-7_7
   Albert E, 2009, ELECTRON NOTES THEOR, V258, P109, DOI 10.1016/j.entcs.2009.12.008
   Albert E, 2018, LECT NOTES COMPUT SC, V11138, P513, DOI 10.1007/978-3-030-01090-4_30
   Albert E, 2021, J SYST SOFTWARE, V176, DOI 10.1016/j.jss.2021.110923
   Asadi A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P772, DOI 10.1145/3453483.3454076
   Atkey R, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:17)2011
   Atzei N, 2017, LECT NOTES COMPUT SC, V10204, P164, DOI 10.1007/978-3-662-54455-6_8
   Blekherman G, 2013, MOS-SIAM SER OPTIMIZ, V13, P1
   Bygde Stefan, 2010, Static WCET analysis based on abstract interpretation and counting of elements
   Chatterjee K, 2023, FORM ASP COMPUT, V35, DOI 10.1145/3585391
   Chatterjee K, 2022, LECT NOTES COMPUT SC, V13371, P55, DOI 10.1007/978-3-031-13185-1_4
   Chatterjee K, 2021, LECT NOTES COMPUT SC, V13047, P619, DOI 10.1007/978-3-030-90870-6_33
   Chatterjee K, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1033, DOI 10.1145/3453483.3454093
   Chatterjee K, 2018, PROCEEDINGS OF THE TWENTY-SEVENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P4700
   Chatterjee K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P672, DOI 10.1145/3385412.3385969
   Chatterjee K, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3339984
   Chatterjee K, 2017, LECT NOTES COMPUT SC, V10427, P41, DOI 10.1007/978-3-319-63390-9_3
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Chen T, 2021, IEEE T EMERG TOP COM, V9, P1433, DOI 10.1109/TETC.2020.2979019
   Çiçek E, 2020, LECT NOTES COMPUT SC, V12389, P3, DOI 10.1007/978-3-030-65474-0_1
   Çiçek E, 2017, ACM SIGPLAN NOTICES, V52, P316, DOI 10.1145/3093333.3009858
   Cimatti A, 2013, LECT NOTES COMPUT SC, V7795, P93
   Colón MA, 2003, LECT NOTES COMPUT SC, V2725, P420
   Dameron Micah, 2019, Beige paper: An Ethereum technical specification
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Ethereum Foundation, 2014, About us
   Farkas J, 1902, J REINE ANGEW MATH, V124, P1
   Feist J, 2019, 2019 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE ENGINEERING FOR BLOCKCHAIN (WETSEB 2019), P8, DOI 10.1109/WETSEB.2019.00008
   Goharshady Amir, 2020, Ph.D. Dissertation
   Goharshady AK, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586052
   Grech N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276486
   HANDELMAN D, 1988, PAC J MATH, V132, P35, DOI 10.2140/pjm.1988.132.35
   Hitarth S, 2023, Zenodo, DOI 10.5281/ZENODO.8202373
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Huang MZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360555
   Huang MZ, 2018, LECT NOTES COMPUT SC, V11275, P181, DOI 10.1007/978-3-030-02768-1_11
   Kalra S, 2018, 25TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2018), DOI 10.14722/ndss.2018.23082
   Liu Chao, 2019, BlockSys, V1156
   Liu HM, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563295
   Luu L, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P254, DOI 10.1145/2976749.2978309
   Ma Fuchen, 2022, ACM Trans. Internet Technol.
   Marescotti Matteo, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Industrial Practice. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11247), P450, DOI 10.1007/978-3-030-03427-6_33
   Nassirzadeh B, 2022, Arxiv, DOI arXiv:2112.14771
   Nguyen TD, 2020, PROC INT CONF SOFTW, P778, DOI 10.1145/3377811.3380334
   Nikolic I, 2018, 34TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2018), P653, DOI 10.1145/3274694.3274743
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   Prechtel D, 2019, INT CONF NEW TECHNOL, DOI 10.1109/NTMS.2019.8763848
   PUTINAR M, 1993, INDIANA U MATH J, V42, P969, DOI 10.1512/iumj.1993.42.42045
   Rodler M, 2019, 26TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2019), DOI 10.14722/ndss.2019.23413
   Sankaranarayanan S, 2004, LECT NOTES COMPUT SC, V3148, P53
   Sayeed S, 2020, IEEE ACCESS, V8, P24416, DOI 10.1109/ACCESS.2020.2970495
   Sergey I, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360611
   Siegel D., 2016, Understanding The DAO Attack
   Sun Yican, 2023, Computer Aided Verification: 35th International Conference, CAV 2023, Proceedings. Lecture Notes in Computer Science (13966), P16, DOI 10.1007/978-3-031-37709-9_2
   Wang JY, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1171, DOI 10.1145/3453483.3454102
   Wang PX, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P204, DOI 10.1145/3314221.3314581
   Wang Peng, 2019, Ph. D. Dissertation
   Watkins D.S., 2004, FUNDAMENTALS MATRIX, V64, DOI 10.1002/0471249718
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
   Wood G., 2014, Ethereum project yellow paper, V151, P1
NR 62
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 253
DI 10.1145/3622829
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100033
OA Green Published, gold
DA 2024-07-18
ER

PT J
AU Nazari, A
   Huang, YF
   Samanta, R
   Radhakrishna, A
   Raghothaman, M
AF Nazari, Amirmohammad
   Huang, Yifei
   Samanta, Roopsha
   Radhakrishna, Arjun
   Raghothaman, Mukund
TI Explainable Program Synthesis by Localizing Specifications
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program synthesis; program comprehension; explainability
AB The traditional formulation of the program synthesis problem is to find a program that meets a logical correctness specification. When synthesis is successful, there is a guarantee that the implementation satisfies the specification. Unfortunately, synthesis engines are typically monolithic algorithms, and obscure the correspondence between the specification, implementation and user intent. In contrast, humans often include comments in their code to guide future developers towards the purpose and design of different parts of the codebase. In this paper, we introduce subspecifications as a mechanism to augment the synthesized implementation with explanatory notes of this form. In this model, the user may ask for explanations of different parts of the implementation; the subspecification generated in response is a logical formula that describes the constraints induced on that subexpression by the global specification and surrounding implementation. We develop algorithms to construct and verify subspecifications and investigate their theoretical properties. We perform an experimental evaluation of the subspecification generation procedure, and measure its effectiveness and running time. Finally, we conduct a user study to determine whether subspecifications are useful: we find that subspecifications greatly aid in understanding the global specification, in identifying alternative implementations, and in debugging faulty implementations.
C1 [Nazari, Amirmohammad; Huang, Yifei; Raghothaman, Mukund] Univ Southern Calif, Los Angeles, CA 90007 USA.
   [Samanta, Roopsha] Purdue Univ, W Lafayette, IN USA.
   [Radhakrishna, Arjun] Microsoft, Redmond, WA USA.
C3 University of Southern California; Purdue University System; Purdue
   University; Microsoft
RP Nazari, A (corresponding author), Univ Southern Calif, Los Angeles, CA 90007 USA.
EM nazaria@usc.edu; yifeih@usc.edu; roopsha@purdue.edu;
   arradha@microsoft.com; raghotha@usc.edu
OI Nazari, Amirmohammad/0009-0000-5675-247X; Huang,
   Yifei/0009-0006-5675-4065; Raghothaman, Mukund/0000-0003-2879-0932;
   Radhakrishna, Arjun/0000-0002-5559-5932
FU NSF [2146518, 2124431, 2107261]
FX We thank all the participants in our user study and the anonymous
   reviewers for immeasurably improving this paper. The research described
   in this paper was supported by the NSF under grants CCF #2146518,
   #2124431, and #2107261.
CR AAMODT A, 1994, AI COMMUN, V7, P39
   Adadi A, 2018, IEEE ACCESS, V6, P52138, DOI 10.1109/ACCESS.2018.2870052
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   Alur Rajeev., 2013, Proceedings of the Twenty-Third international joint conference on Artificial Intelligence, P1976
   Andrew J Ko, 2004, P SIGCHI C HUMAN FAC, V6, P151, DOI [DOI 10.1145/985692.985712, 10.1145/985692.985712]
   Barocas S., 2019, Fairness and Machine Learning
   Caballero R, 2017, ACM COMPUT SURV, V50, DOI 10.1145/3106740
   Chaki S, 2003, PROC INT CONF SOFTW, P385, DOI 10.1109/ICSE.2003.1201217
   Chen Mark, 2021, arXiv, DOI DOI 10.48550/ARXIV.2107.03374
   Doshi-Velez F, 2017, Arxiv, DOI arXiv:1702.08608
   Ellis K, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P835, DOI 10.1145/3453483.3454080
   Feng Y, 2018, ACM SIGPLAN NOTICES, V53, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feniello A, 2014, IEEE INT C INT ROBOT, P4428, DOI 10.1109/IROS.2014.6943189
   Ferdowsifard Kasra, 2020, UIST '20: Proceedings of the 33rd Annual ACM Symposium on User Interface Software and Technology, P614, DOI 10.1145/3379337.3415869
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2737924.2737977, 10.1145/2813885.2737977]
   Finkbeiner B, 2021, LECT NOTES COMPUT SC, V12673, P113, DOI 10.1007/978-3-030-76384-8_8
   Gotel O. C. Z., 1994, Proceedings of the First International Conference on Requirements Engineering (Cat. No.94TH0613-0), P94, DOI 10.1109/ICRE.1994.292398
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Handa S, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P87, DOI 10.1145/3368089.3409732
   Jha Susmit, 2010, Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering-Volume 1. ICSE'10, V1, P215, DOI DOI 10.1145/1806799.1806833
   Konighofer Robert, 2009, Proceedings of the 2009 9th International Conference Formal Methods in Computer-Aided Design (FMCAD), P152, DOI 10.1109/FMCAD.2009.5351127
   Koukoutos M, 2016, ELECTRON P THEOR COM, P100, DOI 10.4204/EPTCS.229.9
   Kupferman O., 2003, International Journal on Software Tools for Technology Transfer, V4, P224, DOI 10.1007/s100090100062
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   Lei Shi, 2021, Tools and Algorithms for the Construction and Analysis of Systems. 27th International Conference, TACAS 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12651), P430, DOI 10.1007/978-3-030-72016-2_23
   Mayer M, 2015, UIST'15: PROCEEDINGS OF THE 28TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P291, DOI 10.1145/2807442.2807459
   Mott Alex, 2019, P 33 INT C NEUR INF
   Muchnick SS, 1998, Advanced Compiler Design and Implementation
   Nazari Amirmohammad, 2023, Explainable Program Synthesis by Localizing Specifications, DOI [10.5281/zenodo.8331495, DOI 10.5281/ZENODO.8331495]
   OpenAI, 2022, CHATGPT
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2737924.2738007, 10.1145/2813885.2738007]
   Peleg H, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1114, DOI 10.1145/3180155.3180189
   Polikarpova N, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290385
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Reynolds A, 2015, LECT NOTES COMPUT SC, V9207, P198, DOI 10.1007/978-3-319-21668-3_12
   Ribeiro MT, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1135, DOI 10.1145/2939672.2939778
   Singh R, 2016, PROC VLDB ENDOW, V9, P816, DOI 10.14778/2977797.2977807
   Singh R, 2013, ACM SIGPLAN NOTICES, V48, P15, DOI 10.1145/2499370.2462195
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Tiwari A, 2020, Arxiv, DOI arXiv:2006.12638
   Ribeiro MT, 2016, Arxiv, DOI [arXiv:1606.05386, 10.48550/arXiv.1606.05386]
   Wang CL, 2021, CHI '21: PROCEEDINGS OF THE 2021 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, DOI 10.1145/3411764.3445249
   Wang ZJ, 2021, IEEE T VIS COMPUT GR, V27, P1396, DOI 10.1109/TVCG.2020.3030418
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Zeller A, 1999, LECT NOTES COMPUT SC, V1687, P253, DOI 10.1145/318774.318946
   Zhang T., 2020, P 33 ANN ACM S US IN, P627
   Zhang Tianyi, 2021, P 2021 CHI C HUM FAC
   Zhou B, 2016, PROC CVPR IEEE, P2921, DOI 10.1109/CVPR.2016.319
NR 50
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 298
DI 10.1145/3622874
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100078
OA gold
DA 2024-07-18
ER

PT J
AU Park, K
   D'Antoni, L
   Reps, T
AF Park, Kanghee
   D'Antoni, Loris
   Reps, Thomas
TI Synthesizing Specifications
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Specifications; Program Synthesis
ID LIBRARY
AB Every program should be accompanied by a specification that describes important aspects of the code's behavior, but writing good specifications is often harder than writing the code itself. This paper addresses the problem of synthesizing specifications automatically, guided by user-supplied inputs of two kinds: (i) a query Phi posed about a set of function definitions, and (ii) a domain-specific language L in which each extracted property phi(i) is to be expressed (we call properties in the language L-properties). Each of the phi(i) is a best L-property for Phi: there is no other L-property for Phi that is strictly more precise than phi(i). Furthermore, the set {phi(i)} is exhaustive: no more L-properties can be added to it to make the conjunction Lambda(i)phi(i) more precise.
   We implemented our method in a tool, spyro. The ability to modify both Phi and L provides a spyro user with ways to customize the kind of specification to be synthesized. We use this ability to show that SPYRO can be used in a variety of applications, such as mining program specifications, performing abstract-domain operations, and synthesizing algebraic properties of program modules.
C1 [Park, Kanghee; D'Antoni, Loris; Reps, Thomas] Univ Wisconsin Madison, Madison, WI 53706 USA.
C3 University of Wisconsin System; University of Wisconsin Madison
RP Park, K (corresponding author), Univ Wisconsin Madison, Madison, WI 53706 USA.
EM khpark@cs.wisc.edu; loris@cs.wisc.edu; reps@cs.wisc.edu
OI D'Antoni, Loris/0000-0001-9625-4037
FU Microsoft Faculty Fellowship; NSF [CCF-1750965, CCF-1763871,
   CCF-1918211, CCF-2023222, CCF-2211968, CCF-2212558]; ONR
   [N00014-17-1-2889]
FX Supported, in part, by a Microsoft Faculty Fellowship; a gift from Rajiv
   and Ritu Batra; NSF under grants
   CCF-{1750965,1763871,1918211,2023222,2211968,2212558}; and ONR under
   grant N00014-17-1-2889. Any opinions, findings, and conclusions or
   recommendations expressed in this publication are those of the authors,
   and do not necessarily reflect the views of the sponsoring entities.
CR Alur R, 2019, Arxiv, DOI [arXiv:1904.07146, 10.48550/ARXIV.1904.07146, DOI 10.48550/ARXIV.1904.07146]
   Astorga A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485481
   Bagnara R, 2008, SCI COMPUT PROGRAM, V72, P3, DOI 10.1016/j.scico.2007.08.001
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Beckman NE, 2010, IEEE T SOFTWARE ENG, V36, P495, DOI 10.1109/TSE.2010.49
   Blazytko T, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P643
   Cousot P., 1978, Formal Descriptions of Programming Concepts
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   DAntoni Loris, 2013, P 1 ANN WORKSH FUNCT, P43, DOI [DOI 10.1145/2505351.2505353, 10.1145/2505351, DOI 10.1145/2505351]
   Dillig I, 2012, ACM SIGPLAN NOTICES, V47, P181, DOI [10.1145/2345156.2254087, 10.1145/2345156.1993565]
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Garg P, 2014, LECT NOTES COMPUT SC, V8559, P69, DOI 10.1007/978-3-319-08867-9_5
   Gopan D, 2007, LECT NOTES COMPUT SC, V4590, P68
   Hashimoto K, 2015, LECT NOTES COMPUT SC, V9291, P199, DOI 10.1007/978-3-662-48288-9_12
   Hu QHP, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1128, DOI 10.1145/3385412.3385979
   Itzhaky Shachar, 2014, Ph. D. Dissertation.
   Kalita PK, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563334
   Kaufmann D, 2022, DES AUT TEST EUROPE, P1431, DOI 10.23919/DATE54114.2022.9774587
   Kim J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434311
   Kim Jinwoo, 2022, Messy-Release
   Leino KRM, 2014, ELECTRON PROC THEOR, P3, DOI 10.4204/EPTCS.149.2
   Lo David, 2017, Mining Software Specifications: Methodologies and Applications
   Mariano B, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360558
   Miltner A, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1, DOI 10.1145/3385412.3385967
   Mitchell T. M., 1997, MACH LEARN
   Ozeri O, 2017, LECT NOTES COMPUT SC, V10145, P442, DOI 10.1007/978-3-319-52234-0_24
   Padhi S, 2016, ACM SIGPLAN NOTICES, V51, P42, DOI [10.1145/2908080.2908099, 10.1145/2980983.2908099]
   Padon O, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498712
   Padon Oded, 2018, Ph. D. Dissertation
   Park K, 2024, Arxiv, DOI arXiv:2301.11117
   Park Kanghee, 2023, Synthesizing Specifications, DOI [10.5281/zenodo.8327699, DOI 10.5281/ZENODO.8327699]
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Reps T, 2004, LECT NOTES COMPUT SC, V2937, P252
   Reps T, 2016, LECT NOTES COMPUT SC, V9583, P3, DOI 10.1007/978-3-662-49122-5_1
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Smallbone N, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796817000090
   Solar-Lezama Armando, 2013, International Journal on Software Tools for Technology Transfer, V15, P475, DOI 10.1007/s10009-012-0249-7
   Thakur Aditya, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P174, DOI 10.1007/978-3-642-31424-7_17
   Thakur A, 2012, LECT NOTES COMPUT SC, V7460, P111, DOI 10.1007/978-3-642-33125-1_10
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Wang YX, 2016, J MACH LEARN RES, V17
   Zhou Z, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485493
   Zhu H, 2018, ACM SIGPLAN NOTICES, V53, P707, DOI [10.1145/3192366.3192416, 10.1145/3296979.3192416]
NR 47
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 285
DI 10.1145/3622861
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100065
OA gold, Green Submitted
DA 2024-07-18
ER

PT J
AU Phipps-Costin, L
   Rossberg, A
   Guha, A
   Leijen, D
   Hillerström, D
   Sivaramakrishnan, KC
   Pretnar, M
   Lindley, S
AF Phipps-Costin, Luna
   Rossberg, Andreas
   Guha, Arjun
   Leijen, Daan
   Hillerstrom, Daniel
   Sivaramakrishnan, K. C.
   Pretnar, Matija
   Lindley, Sam
TI Continuing WebAssembly with Effect Handlers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE WebAssembly; effect handlers; stack switching
AB WebAssembly (Wasm) is a low-level portable code format offering near native performance. It is intended as a compilation target for a wide variety of source languages. However, Wasm provides no direct support for non-local control flow features such as async/await, generators/iterators, lightweight threads, first-class continuations, etc. This means that compilers for source languages with such features must ceremoniously transform whole source programs in order to target Wasm.
   We present WasmFX, an extension toWasm which provides a universal target for non-local control features via effect handlers, enabling compilers to translate such features directly into Wasm. Our extension is minimal and only adds three main instructions for creating, suspending, and resuming continuations. Moreover, our primitive instructions are type-safe providing typed continuations which are well-aligned with the design principles of Wasm whose stacks are typed. We present a formal specification of WasmFX and show that the extension is sound. We have implemented WasmFX as an extension to the Wasm reference interpreter and also built a prototype WasmFX extension for Wasmtime, a production-grade Wasm engine, piggybacking on Wasmtime's existing fibers API. The preliminary performance results for our prototype are encouraging, and we outline future plans to realise a native implementation.
C1 [Phipps-Costin, Luna; Guha, Arjun] Northeastern Univ, Boston, MA 02115 USA.
   [Guha, Arjun] Roblox, Washington, DC USA.
   [Leijen, Daan] Microsoft Res, Redmond, WA USA.
   [Hillerstrom, Daniel] Huawei Zurich Res Ctr, Zurich, Switzerland.
   [Sivaramakrishnan, K. C.] Tarides, Chennai, Tamil Nadu, India.
   [Sivaramakrishnan, K. C.] IIT Madras, Madras, Tamil Nadu, India.
   [Pretnar, Matija] Univ Ljubljana, Ljubljana, Slovenia.
   [Pretnar, Matija] Inst Math Phys & Mech, Ljubljana, Slovenia.
   [Lindley, Sam] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
C3 Northeastern University; Microsoft; Indian Institute of Technology
   System (IIT System); Indian Institute of Technology (IIT) - Madras;
   University of Ljubljana; University of Edinburgh
RP Phipps-Costin, L (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
EM phipps-costin.l@northeastern.edu; rossberg@mpi-sws.org;
   a.guha@northeastern.edu; daan@microsoft.com;
   daniel.hillerstrom@ed.ac.uk; kc@kcsrk.info;
   matija.pretnar@fmf.uni-lj.si; sam.lindley@ed.ac.uk
OI Guha, Arjun/0000-0002-7493-3271; Rossberg, Andreas/0000-0003-3137-3160;
   Lindley, Sam/0000-0002-1360-4714; Pretnar, Matija/0000-0001-7755-2303;
   Leijen, Daan/0000-0003-1027-5430; Hillerstrom,
   Daniel/0000-0003-4730-9315
FU UKRI Future Leaders Fellowship "Effect Handler Oriented Programming"
   [MR/T043830/1]; US NSF [CCF-2102288]; Air Force Office of Scientific
   Research [FA9550-17-1-0326, FA9550-21-1-0024]
FX This work was supported by UKRI Future Leaders Fellowship "Effect
   Handler Oriented Programming" (reference number MR/T043830/1) and US NSF
   grant CCF-2102288. This material is based upon work supported by the Air
   Force Office of Scientific Research under awards number FA9550-17-1-0326
   and FA9550-21-1-0024. We thank Alex Crichton and Nick Fitzgerald for
   helping us with the Wasmtime implementation.
CR Ahn Heejin., 2022, Exception Handling Proposal for WebAssembly
   Armstrong Joe, 1996, Concurrent Programming in Erlang
   Bateman Alan, 2021, JEP 428: Structured Concurrency (Incubator)
   Benton N, 2001, J FUNCT PROGRAM, V11, P395, DOI 10.1017/S0956796801004099
   Bierman G, 2012, LECT NOTES COMPUT SC, V7313, P233, DOI 10.1007/978-3-642-31057-7_12
   Bruggeman C, 1996, ACM SIGPLAN NOTICES, V31, P99, DOI 10.1145/249069.231395
   Crichton Alex, 2021, Wasmtime Fiber API
   Farvardin K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P75, DOI 10.1145/3385412.3385994
   Flatt M, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P45, DOI 10.1145/3385412.3385981
   Ghica D, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563445
   Gunter C. A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P12, DOI 10.1145/224164.224173
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   Hillerström D, 2018, LECT NOTES COMPUT SC, V11275, P415, DOI 10.1007/978-3-030-02768-1_22
   Hillerstrom Daniel, 2021, Ph. D. Dissertation
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Kiselyov Oleg, 2012, An argument against call/cc
   KJP, 2019, Benchmarking 1 million C# tasks vs Go goroutines: Is there any difference?.
   Leijen D, 2019, LECT NOTES COMPUT SC, V11893, P244, DOI 10.1007/978-3-030-34175-6_13
   Leijen Daan, 2021, libmprompt
   Nystrom Bob., 2015, What Color is Your Function?
   Phipps-Costin Luna, 2023, WasmFX OOPSLA23 Artifact, DOI [10.5281/zenodo.8332962, DOI 10.5281/ZENODO.8332962]
   Pinckney D, 2020, DLS '2020: PROCEEDINGS OF THE 16TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES, P16, DOI 10.1145/3426422.3426978
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pressler Ron, 2018, Project Loom: Fibers and Continuations for the Java Virtual Machine
   Rossberg Andreas, 2023, WebAssembly (Release 2.0).
   Rossberg Andreas., 2022, Function Reference Types Proposal for WebAssembly
   Rossberg Andreas, 2019, WebAssembly (Release 1.0).
   SITARAM D, 1993, SIGPLAN NOTICES, V28, P147, DOI 10.1145/173262.155104
   Sivaramakrishnan KC, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P206, DOI 10.1145/3453483.3454039
   Sperber M., 2009, J. Funct. Program, V19, P1
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   Watt C, 2021, LECT NOTES COMPUT SC, V13047, P61, DOI 10.1007/978-3-030-90870-6_4
   Xie NN, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563289
   Xie NN, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473576
   Yallop Jeremy., 2023, A collaborative bibliography of work related to the theory and practice of computational effects
   Zakai Alon, 2019, Pause and Resume WebAssembly with Binaryen's Asyncify
NR 37
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD OCT
PY 2023
VL 7
IS OOPSLA
AR 238
DI 10.1145/3622814
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA U8MD4
UT WOS:001087279100018
OA gold, Green Submitted
DA 2024-07-18
ER

EF