FN Clarivate Analytics Web of Science
VR 1.0
PT J
AU Ye, QC
   Delaware, B
AF Ye, Qianchuan
   Delaware, Benjamin
TI TAYPSI: Static Enforcement of Privacy Policies for Policy-Agnostic
   Oblivious Computation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Oblivious Computation; Dependent Types; Algebraic Data Types
AB Secure multiparty computation (MPC) techniques enable multiple parties to compute joint functions over their private data without sharing that data with other parties, typically by employing powerful cryptographic protocols to protect individual's data. One challenge when writing such functions is that most MPC languages force users to intermix programmatic and privacy concerns in a single application, making it difficult to change or audit a program's underlying privacy policy. Prior policy-agnostic MPC languages relied on dynamic enforcement to decouple privacy requirements from program logic. Unfortunately, the resulting overhead makes it difficult to scale MPC applications that manipulate structured data. This work proposes to eliminate this overhead by instead transforming programs into semantically equivalent versions that statically enforce user-provided privacy policies. We have implemented this approach in a new MPC language, called TAYPSI; our experimental evaluation demonstrates that the resulting system features considerable performance improvements on a variety of MPC applications involving structured data and complex privacy policies.
C1 [Ye, Qianchuan; Delaware, Benjamin] Purdue Univ, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Ye, QC (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM ye202@purdue.edu; bendy@purdue.edu
OI Ye, Qianchuan/0000-0002-5977-5236; Delaware,
   Benjamin/0000-0002-1016-6261
FU Cisco Systems [23013611]
FX We thank Raghav Malik, Prasita Mukherjee, Tarindu Jayatilaka, Patrick
   LaFontaine, and the anonymous reviewers for their detailed comments and
   suggestions. We also thank Milind Kulkarni and Ashish Kundu for many
   stimulating discussions about this work. The material in this paper is
   based on work partially supported by Cisco Systems under award
   #23013611.
CR Acar A, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3214303
   Acay C, 2024, Arxiv, DOI [arXiv:2401.04131, 10.48550/arXiv.2401.04131, DOI 10.48550/ARXIV.2401.04131]
   Acay C, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P740, DOI 10.1145/3453483.3454074
   Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Barthe G, 2019, J AUTOM REASONING, V63, P1, DOI 10.1007/s10817-017-9441-5
   Barthe G, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1267, DOI 10.1145/2660267.2660283
   Beimel Amos, 2011, Coding and Cryptology. Proceedings of the Third International Workshop, IWCC 2011, P11, DOI 10.1007/978-3-642-20901-7_2
   Büscher N, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P847, DOI 10.1145/3243734.3243786
   Cauligi S, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P174, DOI 10.1145/3314221.3314605
   Cowan M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P375, DOI 10.1145/3453483.3454050
   Darais David, 2020, Proceedings of the ACM on Programming Languages, V4, DOI 10.1145/3371118
   Dathathri R, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P546, DOI 10.1145/3385412.3386023
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Evans D., 2018, FDN TRENDS PRIVACY S, V2, P70, DOI DOI 10.1561/3300000019
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Gentry C, 2009, ACM S THEORY COMPUT, P169, DOI 10.1145/1536414.1536440
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Goldreich O., 1987, 19th Annual ACM Symposium on Theory of Computing, P218, DOI [10.1145/3335741.3335755, 10.1145/28395.28420, DOI 10.1145/28395.28420]
   Hastings M, 2019, P IEEE S SECUR PRIV, P1220, DOI 10.1109/SP.2019.00028
   Hazay C, 2010, INFORM SEC CRYPT TEX, P3, DOI 10.1007/978-3-642-14303-8
   Hoekstra Matthew E, 2015, Intel SGX for Dummies (Intel SGX Design Objectives)
   Laud Peeter, 2015, Cryptology and Information Security Series, V13
   Liu C, 2015, P IEEE S SECUR PRIV, P359, DOI 10.1109/SP.2015.29
   Liu C, 2013, P IEEE CSFW, P51, DOI 10.1109/CSF.2013.11
   Malik Raghav, 2023, ASPLOS 2023: Proceedings of the 28th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, P118, DOI 10.1145/3582016.3582057
   Malik R, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1049, DOI 10.1145/3453483.3454094
   Malkhi Dahlia, 2004, P 13 C USENIX SEC S, P20
   Maurer U, 2006, DISCRETE APPL MATH, V154, P370, DOI 10.1016/j.dam.2005.03.020
   Rastogi Aseem, 2019, Principles of Security and Trust. 8th International Conference, POST 2019. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2019. Proceedings: Lecture Notes in Computer Science (11426), P99, DOI 10.1007/978-3-030-17138-4_5
   Rastogi A, 2014, P IEEE S SECUR PRIV, P655, DOI 10.1109/SP.2014.48
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sweet Ian, 2023, The Art, Science, and Engineering of Programming, V7, DOI DOI 10.22152/PROGRAMMING-JOURNAL.ORG/2023/7/14
   Viand A, 2023, PROCEEDINGS OF THE 32ND USENIX SECURITY SYMPOSIUM, P4715
   Wang X., 2016, EMP-toolkit: Efficient Multi- Party computation toolkit
   Yang J, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P85
   Yao A. C., 1982, 23rd Annual Symposium on Foundations of Computer Science, P160, DOI 10.1109/SFCS.1982.38
   Ye Qianchuan, 2024, Zenodo, DOI 10.5281/ZENODO.10701642
   Ye QC, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591261
   Ye QC, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498713
   Yuyan Bao, 2021, GPCE 2021: Proceedings of the 20th ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences, P130, DOI 10.1145/3486609.3487205
   Zahur Samee, 2015, Technical Report 1153
   Zdancewic S. A., 2002, PROGRAMMING LANGUAGE
   Zhang Y, 2013, P 2013 ACM SIGSAC C, P813, DOI [10.1145/2508859.2516752, DOI 10.1145/2508859.2516752]
NR 43
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 144
DI 10.1145/3649861
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600051
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Balasubramanian, AR
   Majumdar, R
   Thinniyam, RS
   Zetzsche, G
AF Balasubramanian, A. R.
   Majumdar, Rupak
   Thinniyam, Ramanathan S.
   Zetzsche, Georg
TI Reachability in Continuous Pushdown VASS
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Vector addition systems; Pushdown automata; Reachability; Decidability;
   Complexity
ID COMPLEXITY
AB Pushdown Vector Addition Systems with States (PVASS) consist of finitely many control states, a pushdown stack, and a set of counters that can be incremented and decremented, but not tested for zero. Whether the reachability problem is decidable for PVASS is a long-standing open problem.
   We consider continuous PVASS, which are PVASS with a continuous semantics. This means, the counter values are rational numbers and whenever a vector is added to the current counter values, this vector is first scaled with an arbitrarily chosen rational factor between zero and one.
   We show that reachability in continuous PVASS is NEXPTIME-complete. Our result is unusually robust: Reachability can be decided in NEXPTIME even if all numbers are specified in binary. On the other hand, NEXPTIME-hardness already holds for coverability, in fixed dimension, for bounded stack, and even if all numbers are specified in unary.
C1 [Balasubramanian, A. R.; Majumdar, Rupak; Thinniyam, Ramanathan S.; Zetzsche, Georg] MPI SWS, Saarbrucken, Germany.
   [Thinniyam, Ramanathan S.] Uppsala Univ, Uppsala, Sweden.
   [Balasubramanian, A. R.] Tech Univ Munich TUM, Munich, Germany.
C3 Uppsala University; Technical University of Munich
RP Balasubramanian, AR (corresponding author), MPI SWS, Saarbrucken, Germany.
EM bayikudi@mpi-sws.org; rupak@mpi-sws.org;
   ramanathan.s.thinniyam@it.uu.se; georg@mpi-sws.org
RI Thinniyam Srinivasan, Ramanathan/KVB-6618-2024; Zetzsche,
   Georg/I-5335-2018
OI Thinniyam Srinivasan, Ramanathan/0000-0002-9926-0931; Zetzsche,
   Georg/0000-0002-6421-4388; , Balasubramanian/0000-0002-7258-5445
FU Deutsche Forschungsgemeinschaft [389792660 TRR 248-CPEC]; European
   Research Council (ERC) under the European Union [787367]; European Union
   (ERC) [101077902]
FX The authors are grateful to the anonymous reviewers for their helpful
   comments and for pointing out a small (and easily fixable) mistake in an
   earlier version. This research was sponsored in part by the Deutsche
   Forschungsgemeinschaft project 389792660 TRR 248-CPEC.; This project has
   received funding from the European Research Council (ERC) under the
   European Union's Horizon 2020 research and innovation programme under
   grant agreement number 787367 (PaVeS). Funded by the European Union
   (ERC, FINABIS, 101077902). Views and opinions expressed are however
   those of the authors only and do not necessarily reflect those of the
   European Union or the European Research Council Executive Agency.
   Neither the European Union nor the granting authority can be held
   responsible for them.
CR Aiswarya C., 2022, LICS 22, V6, P1, DOI DOI 10.1145/3531130.3533329
   Alur R, 2005, ACM T PROGR LANG SYS, V27, P786, DOI 10.1145/1075382.1075387
   Alur R, 2012, HSCC 12: PROCEEDINGS OF THE 15TH ACM INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL, P75
   [Anonymous], 1979, Transductions and context-free languages
   Atig MF, 2011, LEIBNIZ INT PR INFOR, V13, P152, DOI 10.4230/LIPIcs.FSTTCS.2011.152
   Atig MF, 2009, LECT NOTES COMPUT SC, V5505, P107, DOI 10.1007/978-3-642-00768-2_11
   Balasubramanian AR, 2023, Arxiv, DOI arXiv:2310.16798
   Baumann P, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571266
   Blondin M, 2017, IEEE S LOG
   Blondin M, 2016, LECT NOTES COMPUT SC, V9636, P480, DOI 10.1007/978-3-662-49674-9_28
   Chaudhuri S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P159, DOI 10.1145/1328438.1328460
   Colón MA, 2003, LECT NOTES COMPUT SC, V2725, P420
   Czerwinski W, 2022, ANN IEEE SYMP FOUND, P1229, DOI 10.1109/FOCS52979.2021.00120
   David Rene, 1987, P 8 EUR WORKSH APPL
   Englert M, 2021, INFORM PROCESS LETT, V167, DOI 10.1016/j.ipl.2020.106079
   Esparza J, 2011, INFORM PROCESS LETT, V111, P614, DOI 10.1016/j.ipl.2011.03.019
   Fraca E, 2015, FUND INFORM, V137, P1, DOI 10.3233/FI-2015-1168
   Ganardi Moses, 2022, LEIBNIZ INT P INFORM, V229, DOI [10.4230/ LIPIcs.ICALP.2022.124, DOI 10.4230/LIPICS.ICALP.2022.124]
   Henri Michel, 1976, Ph. D. Dissertation
   Karp R. M., 1969, J COMPUT SYST SCI, V3, P147, DOI DOI 10.1016/S0022-0000(69)80011-5
   Kjelstrom AH, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498673
   Leroux J, 2022, ANN IEEE SYMP FOUND, P1241, DOI 10.1109/FOCS52979.2021.00121
   Leroux J, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785796
   Leroux J, 2015, LECT NOTES COMPUT SC, V9135, P324, DOI 10.1007/978-3-662-47666-6_26
   Li YB, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434340
   Lohrey Markus, 2022, Schloss Dagstuhl-LeibnizZentrum fur Informatik, V71, P1, DOI 10.4230
   Papadimitriou Christos H., 2007, Computational complexity
   Rackoff C., 1978, Theoretical Computer Science, V6, P223, DOI 10.1016/0304-3975(78)90036-1
   Reinhardt K, 2008, ELECTRON NOTES THEOR, V223, P239, DOI 10.1016/j.entcs.2008.12.042
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T, 2016, ACM SIGPLAN NOTICES, V51, P663, DOI 10.1145/2914770.2837659
   ROSENBERG AL, 1967, INFORM CONTROL, V10, P175, DOI 10.1016/S0019-9958(67)80006-8
   ROSIER LE, 1986, J COMPUT SYST SCI, V32, P105, DOI 10.1016/0022-0000(86)90006-1
   Schmitz Sylvain, 2019, Reachability Problems. 13th International Conference, RP 2019. Proceedings: Lecture Notes in Computer Science (LNCS 11674), P193, DOI 10.1007/978-3-030-30806-3_15
   Sipser Michael, 2012, Cengage Learning, V3
   SONTAG ED, 1985, INFORM PROCESS LETT, V20, P115, DOI 10.1016/0020-0190(85)90076-6
   Srivastava S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P313, DOI 10.1145/1706299.1706337
   Verma KN, 2005, LECT NOTES ARTIF INT, V3632, P337
   YANNAKAKIS M, 1990, PROCEEDINGS OF THE NINTH ACM SIGACT-SIGMOD-SIGART SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P230, DOI 10.1145/298514.298576
NR 39
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 4
DI 10.1145/3633279
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400005
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Frumin, D
   Timany, A
   Birkedal, L
AF Frumin, Dan
   Timany, Amin
   Birkedal, Lars
TI Modular Denotational Semantics for Effects with Guarded Interaction
   Trees
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Coq; Iris; denotational semantics; logical relations
ID MODEL
AB We present guarded interaction trees - a structure and a fully formalized framework for representing higher-order computations with higher-order effects in Coq, inspired by domain theory and the recently proposed interaction trees. We also present an accompanying separation logic for reasoning about guarded interaction trees. To demonstrate that guarded interaction trees provide a convenient domain for interpreting higher-order languages with effects, we define an interpretation of a PCF-like language with effects and show that this interpretation is sound and computationally adequate; we prove the latter using a logical relation defined using the separation logic. Guarded interaction trees also allow us to combine different effects and reason about them modularly. To illustrate this point, we give a modular proof of type soundness of cross-language interactions for safe interoperability of different higher-order languages with different effects. All results in the paper are formalized in Coq using the Iris logic over guarded type theory.
C1 [Frumin, Dan] Univ Groningen, Groningen, Netherlands.
   [Timany, Amin; Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
C3 University of Groningen; Aarhus University
RP Frumin, D (corresponding author), Univ Groningen, Groningen, Netherlands.
EM d.frumin@rug.nl; timany@cs.au.dk; birkedal@cs.au.dk
RI Timany, Amin/KXS-1704-2024
OI Timany, Amin/0000-0002-2237-851X; Birkedal, Lars/0000-0003-1320-0098
FU Villum Investigator grant [25804]; Center for Basic Research in Program
   Verification (CPV); VILLUM Foundation
FX This work was supported in part by a Villum Investigator grant (no.
   25804), Center for Basic Research in Program Verification (CPV), from
   the VILLUM Foundation. The authors are grateful to the anonymous
   reviewers for their comments and suggestions.
CR Bach Poulsen Casper, 2023, Proceedings of the ACM on Programming Languages, DOI 10.1145/3571255
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Birkedal L, 2008, LECT NOTES COMPUT SC, V5126, P348, DOI 10.1007/978-3-540-70583-3_29
   Birkedal L, 2013, IEEE S LOG, P213, DOI 10.1109/LICS.2013.27
   Birkedal L, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:1)2012
   Birkedal L, 2010, THEOR COMPUT SCI, V411, P4102, DOI 10.1016/j.tcs.2010.07.010
   Birkedal L, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(2:6)2008
   Bizjak A, 2016, Arxiv, DOI arXiv:1601.01586
   de Vilhena PE, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434314
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   FREYD P, 1991, LECT NOTES MATH, V1488, P95
   Hoshino N, 2012, IEEE S LOG, P385, DOI 10.1109/LICS.2012.74
   Johann P, 2010, IEEE S LOG, P209, DOI 10.1109/LICS.2010.29
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2775051.2676980, 10.1145/2676726.2676980]
   Koh N, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P234, DOI 10.1145/3293880.3294106
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Lesani M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527324
   Matthews J, 2007, ACM SIGPLAN NOTICES, V42, P3, DOI 10.1145/1190215.1190220
   Mogelberg RE, 2019, MATH STRUCT COMP SCI, V29, P465, DOI 10.1017/S0960129518000087
   Mogelberg RE, 2021, ELECTRON P THEOR COM, P200, DOI 10.4204/EPTCS.351.13
   Patterson D, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P609, DOI 10.1145/3519939.3523703
   Paviotti M, 2015, ELECTRON NOTES THEOR, V319, P333, DOI 10.1016/j.entcs.2015.12.020
   Pitts AM, 1996, INFORM COMPUT, V127, P66, DOI 10.1006/inco.1996.0052
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Scott D., 1976, SIAM Journal on Computing, V5, P522, DOI 10.1137/0205037
   Silver Lucas, 2023, Semantics for Noninterference with Interaction Trees
   SMYTH MB, 1982, SIAM J COMPUT, V11, P761, DOI 10.1137/0211062
   van den Berg B, 2021, LECT NOTES COMPUT SC, V13008, P182, DOI 10.1007/978-3-030-89051-3_11
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Yang ZX, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473578
   Ye Kangfeng, 2022, Formal Methods and Software Engineering: 23rd International Conference on Formal Engineering Methods, ICFEM 2022, Proceedings. Lecture Notes in Computer Science (13478), P404, DOI 10.1007/978-3-031-17244-1_24
   Zakowski Y, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473572
   Zhang Hengchu., 2021, 12 INT C INTERACTIVE, V193, p32:1, DOI DOI 10.4230/LIPICS.ITP.2021.32
NR 38
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 12
DI 10.1145/3632854
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400013
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Guilloud, S
   Kuncak, V
AF Guilloud, Simon
   Kuncak, Viktor
TI Orthologic with Axioms
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Decision procedures; Logic and decidability; Verification; Orthologic
ID HORN FORMULAS; LOGIC
AB We study the proof theory and algorithms for orthologic, a logical system based on ortholattices, which have shown practical relevance in simplification and normalization of verification conditions. Ortholattices weaken Boolean algebras while having polynomial-time equivalence checking that is sound with respect to Boolean algebra semantics. We generalize ortholattice reasoning and obtain an algorithm for proving a larger class of classically valid formulas.
   As the key result, we analyze a proof system for orthologic augmented with axioms. An important feature of the system is that it limits the number of formulas in a sequent to at most two, which makes the extension with axioms non-trivial. We show a generalized form of cut elimination for this system, which implies a sub-formula property. From there we derive a cubic-time algorithm for provability from axioms, or equivalently, for validity in finitely presented ortholattices. We further show that propositional resolution of width 5 proves all formulas provable in orthologic with axioms. We show that orthologic system subsumes resolution of width 2 and arbitrarily wide unit resolution and is complete for reasoning about generalizations of propositional Horn clauses.
   Moving beyond ground axioms, we introduce effectively propositional orthologic (by analogy with EPR for classical logic), presenting its semantics as well as a sound and complete proof system. Our proof system implies the decidability of effectively propositional orthologic, as well as its fixed-parameter tractability for a bounded maximal number of variables in each axiom. As a special case, we obtain a generalization of Datalog with negation and disjunction.
C1 [Guilloud, Simon; Kuncak, Viktor] EPFL IC, CH-1015 Lausanne, Switzerland.
RP Guilloud, S (corresponding author), EPFL IC, CH-1015 Lausanne, Switzerland.
EM simon.guilloud@epfl.ch; viktor.kuncak@epfl.ch
OI Guilloud, Simon/0000-0001-8179-7549
FU Swiss National Science Foundation [200021_197288]; Swiss National
   Science Foundation (SNF) [200021_197288] Funding Source: Swiss National
   Science Foundation (SNF)
FX We acknowledge the financial support of the Swiss National Science
   Foundation project 200021_197288
CR Apt K. R., 1988, FDN DEDUCTIVE DATABA, P89, DOI DOI 10.1016/B978-0-934613-40-8.50006-3
   Bell J. L., 1983, Studies in Logic and the Foundations of Mathematics, V111, P13, DOI [10.1016/S0049-237X(08)70953-4, DOI 10.1016/S0049-237X(08)70953-4]
   Birkhoff G, 1936, ANN MATH, V37, P823, DOI 10.2307/1968621
   Blanvillain O, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498698
   BORGER E, 1997, CLASSICAL DECISION P
   BRUNS G, 1976, CAN J MATH, V28, P977, DOI 10.4153/CJM-1976-095-6
   Cepek O, 2005, DISCRETE APPL MATH, V149, P14, DOI 10.1016/j.dam.2003.12.011
   Clark K. L., 1978, Logic and data bases, P293
   Cook S. A., 1971, Proceedings of the 3rd annual ACM symposium on theory of computing, P151
   Dantsin E, 2001, ACM COMPUT SURV, V33, P374, DOI 10.1145/502807.502810
   Davey B.A., 2002, INTRO LATTICES ORDER, V2nd, P1, DOI [DOI 10.1017/CBO9780511809088, 10.1017/CBO9780511809088]
   Egly U., 2003, Studia Logica, V73, P131, DOI 10.1023/A:1022993408070
   Eric Olivier, 2022, Ph. D. Dissertation., DOI [10.5075/ep~-thesis-8260, DOI 10.5075/EP~-THESIS-8260]
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Gelfond M., 1991, New Generation Computing, V9, P365, DOI 10.1007/BF03037169
   Gentzen G, 1935, MATH Z, V39, P176, DOI 10.1007/BF01201353
   GOLDBLATT RI, 1974, J PHILOS LOGIC, V3, P19, DOI 10.1007/BF00652069
   Guilloud Simon, 2023, Computer Aided Verification: 35th International Conference, CAV 2023, Proceedings. Lecture Notes in Computer Science (13966), P398, DOI 10.1007/978-3-031-37709-9_19
   Guilloud Simon, 2023, 14 C INTERACTIVE THE, V17, P1
   Guilloud Simon, 2023, LISA Proof Assistant
   Hardegree G.M., 1981, Notre Dame Journal of Formal Logic, V22, P163, DOI [DOI 10.1305/NDJ~/1093883401, 10.1305/ndjfl/1093883401, DOI 10.1305/NDJFL/1093883401]
   Holliday W. H., 2023, Logics, V1, P36
   Holliday WH, 2024, Arxiv, DOI [arXiv:2203.02872, 10.48550/ARXIV.2203.02872]
   Hycko Marek, 2005, Demonstratio Mathematica, V38, pIII, DOI [10.1515/dema-2005-0402, DOI 10.1515/DEMA-2005-0402]
   Kalmbach G, 1983, ORTHOMODULAR LATTICE
   Kawano Tomoaki, 2018, Bulletin of the Section of Logic, V47, P217, DOI [10.18778/0138-0680.47.4.01, DOI 10.18778/0138-0680.47.4.01]
   KUNEN K, 1987, J LOGIC PROGRAM, V4, P289, DOI 10.1016/0743-1066(87)90007-0
   Laurent Olivier, 2016, LIPIcs, V25, DOI [10.4230/LIPIcs.FSCD.2016.25, DOI 10.4230/LIPICS.FSCD.2016.25]
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   McCune W, 1998, INFORM PROCESS LETT, V65, P285, DOI 10.1016/S0020-0190(98)00015-5
   Meinander A, 2010, MATH STRUCT COMP SCI, V20, P625, DOI 10.1017/S0960129510000125
   MINOUX M, 1988, INFORM PROCESS LETT, V29, P1, DOI 10.1016/0020-0190(88)90124-X
   MONTING JS, 1981, ALGEBRA UNIV, V12, P290
   Padon O, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3140568
   Parreaux L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563304
   Piskac R, 2010, J AUTOM REASONING, V44, P401, DOI 10.1007/s10817-009-9161-6
   Ramsey FP, 1930, P LOND MATH SOC, V30, P264, DOI 10.1112/plms/s2-30.1.264
   Rawling JP, 2000, J ACM, V47, P721, DOI 10.1145/347476.347481
   Robinson J. Alan, 2001, Handbook of automated reasoning
   ROBINSON JA, 1965, J ACM, V12, P23, DOI 10.1145/321250.321253
   Sherif MAEH, 1997, ALGEBRA UNIV, V37, P70, DOI 10.1007/PL00000328
   Statman R., 1979, Theoretical Computer Science, V9, P67, DOI 10.1016/0304-3975(79)90006-9
   Tseitin G.S., 1983, Studies in Mathematics and Mathematical Logic, P466, DOI DOI 10.1007/978-3-642-81955-128
   Ullman D., 1988, Principles of computer science series, V14
   Ullman D., 1989, Principles of Database and Knowledge-Base Systems, VII
   Urzyczyn P, 1997, LECT NOTES COMPUT SC, V1210, P373
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   Whitman PM, 1944, ANN MATH, V42, P325
NR 49
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 39
DI 10.1145/3632881
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400040
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Gutsfeld, JO
   Müller-Olm, M
   Ohrem, C
AF Gutsfeld, Jens Oliver
   Mueller-Olm, Markus
   Ohrem, Christoph
TI Deciding Asynchronous Hyperproperties for Recursive Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Temporal Logic; Hyperproperties; Automata Theory; Model Checking;
   Pushdown Systems; Asynchronicity
ID AUTOMATA
AB We introduce a novel logic for asynchronous hyperproperties with a new mechanism to identify relevant positions on traces. While the new logic is more expressive than a related logic presented recently by Bozzelli et al., we obtain the same complexity of the model checking problem for finite state models. Beyond this, we study the model checking problem of our logic for pushdown models. We argue that the combination of asynchronicity and a non-regular model class studied in this paper constitutes the first suitable approach for hyperproperty model checking against recursive programs.
C1 [Gutsfeld, Jens Oliver; Mueller-Olm, Markus; Ohrem, Christoph] Univ Munster, Munster, Germany.
C3 University of Munster
RP Gutsfeld, JO (corresponding author), Univ Munster, Munster, Germany.
EM jens.gutsfeld@uni-muenster.de; markus.mueller-olm@uni-muenster.de;
   christoph.ohrem@uni-muenster.de
FU DFG project Model-Checking of Navigation Logics [MU 1508/3]
FX We thank the anonymous reviewers for their helpful comments and
   suggestions. This work was partially funded by DFG project
   Model-Checking of Navigation Logics (MoNaLog) (MU 1508/3).
CR Alur R, 2004, LECT NOTES COMPUT SC, V2988, P467
   Alur R., 2004, P 36 ANN ACM S THEOR, P202, DOI [DOI 10.1145/1007352.1007390, 10.1145/1007352.1007390]
   Bajwa Ali, 2023, Lecture Notes in Computer Science, V3993, P308, DOI [10.1007/978- 3- 031-30823- 9_16, DOI 10.1007/978-3-031-30823-9_16]
   Baumeister J, 2021, LECT NOTES COMPUT SC, V12759, P694, DOI 10.1007/978-3-030-81685-8_33
   Beutner R, 2022, LECT NOTES COMPUT SC, V13371, P341, DOI 10.1007/978-3-031-13185-1_17
   Bonakdarpour Borzoo, 2018, Leveraging Applications of Formal Methods, Verification and Validation. Verification. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11245), P8, DOI 10.1007/978-3-030-03421-4_2
   Bonakdarpour B, 2020, LECT NOTES COMPUT SC, V12229, P311, DOI 10.1007/978-3-030-55754-6_18
   Bouajjani A, 1997, LECT NOTES COMPUT SC, V1243, P135
   Bozzelli L, 2007, LECT NOTES COMPUT SC, V4703, P476
   Bozzelli L, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470583
   Bozzelli Laura, 2022, PROC 33 CONCUR, V243, DOI [10.4230/LIPIcs.CONCUR.2022.27, DOI 10.4230/LIPICS.CONCUR.2022.27]
   Brookes S, 1996, INFORM COMPUT, V127, P145, DOI 10.1006/inco.1996.0056
   Clarkson M. R., 2014, POST2014, P265, DOI [DOI 10.1007/978-3-642-54792-8, 10.1007/978-3-642-54792]
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   Coenen N, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785713
   Dax C, 2008, LECT NOTES ARTIF INT, V5330, P214, DOI 10.1007/978-3-540-89439-1_16
   Demri S, 2016, CAM T THEOR, V58, P1, DOI 10.1017/CBO9781139236119
   Finkbeiner B, 2015, LECT NOTES COMPUT SC, V9206, P30, DOI 10.1007/978-3-319-21690-4_3
   Finkbeiner Bernd, 2017, Bulletin of the EATCS, V123
   Gutsfeld J.O., 2022, LICS 22, DOI DOI 10.1145/3531130.3533360
   Gutsfeld JO, 2023, Arxiv, DOI arXiv:2201.12859
   Gutsfeld JO, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434319
   Gutsfeld Jens Oliver, 2020, Schloss Dagstuhl-LeibnizZentrum fur Informatik, V50, P1, DOI 10
   Krebs Andreas, 2018, LIPIcs, V117
   Pommellet A, 2018, LECT NOTES COMPUT SC, V10869, P133, DOI 10.1007/978-3-319-94111-0_8
   Rabe M., 2016, A Temporal Logic Approach to Information-Flow Control
   Spelten A, 2011, ELECTRON PROC THEOR, P20, DOI 10.4204/EPTCS.73.5
   Vardi M. Y., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P250, DOI 10.1145/73560.73582
   Virtema Jonni, 2021, 41 IARCS ANN C FDN S, V213
   Wolper P., 1981, 22nd Annual Symposium on Foundations of Computer Science, P340, DOI 10.1109/SFCS.1981.44
   Zdancewic S, 2003, P IEEE CSFW, P29, DOI 10.1109/CSFW.2003.1212703
NR 31
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 2
DI 10.1145/3632844
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400003
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Sieczkowski, F
   Stepanenko, S
   Sterling, J
   Birkedal, L
AF Sieczkowski, Filip
   Stepanenko, Sergei
   Sterling, Jonathan
   Birkedal, Lars
TI The Essence of Generalized Algebraic Data Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Generalized Algebraic Data Types; Logical Relations
AB This paper considers direct encodings of generalized algebraic data types (GADTs) in a minimal suitable lambda-calculus. To this end, we develop an extension of System F-omega with recursive types and internalized type equalities with injective constant type constructors. We show how GADTs and associated pattern-matching constructs can be directly expressed in the calculus, thus showing that it may be treated as a highly idealized modern functional programming language. We prove that the internalized type equalities in conjunction with injectivity rules increase the expressive power of the calculus by establishing a non-macro-expressibility result in F-omega, and prove the system type-sound via a syntactic argument. Finally, we build two relational models of our calculus: a simple, unary model that illustrates a novel, two-stage interpretation technique, necessary to account for the equational constraints; and a more sophisticated, binary model that relaxes the construction to allow, for the first time, formal reasoning about data-abstraction in a calculus equipped with GADTs.
C1 [Sieczkowski, Filip] Heriot Watt Univ, Edinburgh, Midlothian, Scotland.
   [Stepanenko, Sergei; Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
   [Sterling, Jonathan] Univ Cambridge, Dept Comp Sci & Technol, 15 JJ Thomson Ave, Cambridge CB3 0FD, England.
C3 Heriot Watt University; Aarhus University; University of Cambridge
RP Sieczkowski, F (corresponding author), Heriot Watt Univ, Edinburgh, Midlothian, Scotland.
EM f.sieczkowski@hw.ac.uk; sergei.stepanenko@cs.au.dk; js2878@cl.cam.ac.uk;
   birkedal@cs.au.dk
OI Birkedal, Lars/0000-0003-1320-0098; Sterling,
   Jonathan/0000-0002-0585-5564
FU Villum Investigator grant [25804]; Center for Basic Research in Program
   Verification (CPV); VILLUM Foundation; European Union under the Marie
   Sklodowska-Curie Actions Postdoctoral Fellowship project TypeSynth:
   synthetic methods in program verification
FX This work was supported in part by a Villum Investigator grant (no.
   25804), Center for Basic Research in Program Verification (CPV), from
   the VILLUM Foundation. Jonathan Sterling is funded by the European Union
   under the Marie Sklodowska-Curie Actions Postdoctoral Fellowship project
   TypeSynth: synthetic methods in program verification. Views and opinions
   expressed are however those of the authors only and do not necessarily
   reflect those of the European Union or the European Commission. Neither
   the European Union nor the granting authority can be held responsible
   for them.
CR Allais G, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P195, DOI 10.1145/3018610.3018613
   Atkey Robert, 2012, COMPUTER SCI LOGIC C, V16, P46
   Barendregt H.P., 1993, LAMBDA CALCULI TYPES, P117, DOI DOI 10.5555/162552.162561
   Berger U., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P203, DOI 10.1109/LICS.1991.151645
   Bird R., 1998, Mathematics of Program Construction. 4th International Conference, MPC'98. Proceedings, P52, DOI 10.1007/BFb0054285
   Cheney J., 2003, Technical Report
   Danvy O., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P242, DOI 10.1145/237721.237784
   Dreyer D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:16)2011
   Dunfield J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290322
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   Fiore M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P193, DOI 10.1109/LICS.1999.782615
   Fiore Marcelo P., 2002, P 4 ACM SIGPLAN INT, P26, DOI [DOI 10.1145/571157, DOI 10.1145/571157.571161]
   Girard Jean-Yves, 1992, A Fixpoint Theorem in Linear Logic
   Hasegawa R., 1994, Mathematical Structures in Computer Science, V4, P71, DOI 10.1017/S0960129500000372
   Hongwei Xi, 2003, SIGPLAN Notices, V38, P224, DOI 10.1145/640128.604150
   Johann P, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P297, DOI 10.1145/1328438.1328475
   Johann P, 2022, ELECTRON P THEOR COM, P77, DOI 10.4204/EPTCS.357.6
   Johann P, 2022, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP '22), P324, DOI 10.1145/3497775.3503680
   Johann P, 2021, LOG METH COMPUT SCI, V17, DOI 10.46298/LMCS-17(4:23)2021
   Johann Patricia, 2022, arXiv, DOI [10.48550/arXiv.2203.14891, DOI 10.48550/ARXIV.2203.14891]
   Jones Simon L. Peyton, 2006, P 11 ACM SIGPLAN INT, P50, DOI [DOI 10.1145/1160074.1159811, 10.1145/1159803.1159811, DOI 10.1145/1159803.1159811]
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Mac Lane S., 1992, SHEAVES GEOMETRY LOG
   Paulin-Mohring C., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P328, DOI 10.1007/BFb0037116
   Pierce Benjamin C., 2002, Types and Programming Languages
   Polesiuk Piotr., 2017, 3 RD INT WORKSHOP CO
   Pottier F, 2006, ACM SIGPLAN NOTICES, V41, P232, DOI 10.1145/1111320.1111058
   ROBINSON EP, 1994, IEEE S LOG, P364, DOI 10.1109/LICS.1994.316053
   Schroeder-Heister P., 1994, Extensions of Logic Programming. 4th International Workshop, ELP '93 Proceedings, P333
   Sheard T, 2008, ELECTRON NOTES THEOR, V199, P49, DOI 10.1016/j.entcs.2007.11.012
   Sieczkowski Filip, 2023, Zenodo, DOI 10.5281/ZENODO.10040534
   Sterling J, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P879, DOI 10.1145/3209108.3209153
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Vytiniotis D, 2010, J FUNCT PROGRAM, V20, P175, DOI 10.1017/S0956796810000079
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Weirich S, 2013, ACM SIGPLAN NOTICES, V48, P275, DOI [10.1145/2544174.2500599, 10.1145/2500365.2500599]
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 38
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 24
DI 10.1145/3632866
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400025
OA gold
DA 2024-08-05
ER

PT J
AU He, Y
   Zhao, PH
   Wang, XY
   Wang, YP
AF He, Yang
   Zhao, Pinhan
   Wang, Xinyu
   Wang, Yuepeng
TI VeriEQL: Bounded Equivalence Verification for Complex SQL Queries with
   Integrity Constraints
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Verification; Equivalence Checking; Relational Databases
ID FORMAL SEMANTICS; VALIDATION
AB The task of SQL query equivalence checking is important in various real-world applications (including query rewriting and automated grading) that involve complex queries with integrity constraints; yet, state-of-the-art techniques are very limited in their capability of reasoning about complex features (e.g., those that involve sorting, case statement, rich integrity constraints, etc.) in real-life queries. To the best of our knowledge, we propose the first SMT-based approach and its implementation, VeriEQL, capable of proving and disproving bounded equivalence of complex SQL queries. VeriEQL is based on a new logical encoding that models query semantics over symbolic tuples using the theory of integers with uninterpreted functions. It is simple yet highly practical - our comprehensive evaluation on over 20,000 benchmarks shows that VeriEQL outperforms all state-of-the-art techniques by more than one order of magnitude in terms of the number of benchmarks that can be proved or disproved. VeriEQL can also generate counterexamples that facilitate many downstream tasks (such as finding serious bugs in systems like MySQL and Apache Calcite).
C1 [He, Yang; Wang, Yuepeng] Simon Fraser Univ, Burnaby, BC, Canada.
   [Zhao, Pinhan; Wang, Xinyu] Univ Michigan, Ann Arbor, MI USA.
C3 Simon Fraser University; University of Michigan System; University of
   Michigan
RP He, Y (corresponding author), Simon Fraser Univ, Burnaby, BC, Canada.
EM yha244@sfu.ca; pinhan@umich.edu; xwangsd@umich.edu; yuepeng@sfu.ca
OI Wang, Xinyu/0000-0002-1836-0202; HE, YANG/0009-0007-7755-3112; Wang,
   Yuepeng/0000-0003-3370-2431
FU Natural Sciences and Engineering Research Council of Canada (NSERC)
   Discovery Grant; National Science Foundation (NSF) [CCF-2210832]
FX We would like to thank the anonymous reviewers of OOPSLA for their
   detailed and helpful comments on an earlier version of this paper. This
   research is supported by the Natural Sciences and Engineering Research
   Council of Canada (NSERC) Discovery Grant and the National Science
   Foundation (NSF) Grant No. CCF-2210832.
CR AHO AV, 1979, SIAM J COMPUT, V8, P218, DOI 10.1137/0208017
   Barthe Gilles, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P200, DOI 10.1007/978-3-642-21437-0_17
   Benton N, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/982962.964003
   Benzaken V, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P249, DOI 10.1145/3293880.3294107
   Calcite, 2023, Calcite Optimization Rules Test Suite
   Castelein J, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1220, DOI 10.1145/3180155.3180202
   Chandra A.K., 1977, P 9 ANN ACM S THEORY, P77
   Chandra B, 2019, PROC INT CONF DATA, P1630, DOI 10.1109/ICDE.2019.00159
   Chandra B, 2015, VLDB J, V24, P731, DOI 10.1007/s00778-015-0395-0
   Chen JY, 2021, LECT NOTES COMPUT SC, V12682, P3, DOI [10.1145/3475726.3475730, 10.1007/978-3-030-73197-7_1]
   Cheung A, 2013, ACM SIGPLAN NOTICES, V48, P3, DOI 10.1145/2499370.2462180
   Chu SM, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1591, DOI 10.1145/3035918.3058728
   Chu SM, 2018, PROC VLDB ENDOW, V11, P1482, DOI 10.14778/3236187.3236200
   Chu S, 2017, ACM SIGPLAN NOTICES, V52, P510, DOI [10.1145/3062341.3062348, 10.1145/3140587.3062348]
   Chu Shumo, CIDR
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Coelho Fabien, 2013, DataFiller-generate random data from database schema
   Cordeiro L, 2018, LECT NOTES COMPUT SC, V10981, P183, DOI 10.1007/978-3-319-96145-3_10
   Cosette, 2018, Cosette website
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Delaware B, 2015, ACM SIGPLAN NOTICES, V50, P689, DOI [10.1145/2775051.2677006, 10.1145/2676726.2677006]
   Deutsch A., 2005, SIGMOD C, P539, DOI [10.1145/1066157.1066219, DOI 10.1145/1066157.1066219]
   Deutsch A, 2007, J COMPUT SYST SCI, V73, P442, DOI 10.1016/j.jcss.2006.10.006
   Feser J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428238
   Gligoric M, 2013, LECT NOTES COMPUT SC, V7795, P549, DOI 10.1007/978-3-642-36742-7_40
   Graefe G., 1995, IEEE Data Eng. Bull., V18, P19
   Green TJ, 2011, THEOR COMPUT SYST, V49, P429, DOI 10.1007/s00224-011-9327-6
   Guagliardo P, 2017, PROC VLDB ENDOW, V11, P27, DOI 10.14778/3151113.3151116
   He Y, 2024, Arxiv, DOI arXiv:2403.03193
   He Yang, 2024, Zenodo, DOI 10.5281/ZENODO.10795614
   Lal Akash, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P427, DOI 10.1007/978-3-642-31424-7_32
   LeetCode, 2023, LeetCode website
   Miao ZJ, 2019, INT CONF MANAGE DATA, P503, DOI 10.1145/3299869.3319866
   Necula GC, 2000, ACM SIGPLAN NOTICES, V35, P83, DOI 10.1145/358438.349314
   NEGRI M, 1991, ACM T DATABASE SYST, V16, P513, DOI 10.1145/111197.111212
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Ricciotti W, 2022, J AUTOM REASONING, V66, P989, DOI 10.1007/s10817-022-09632-4
   Ricciotti W, 2019, PROCEEDINGS OF THE 17TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DATABASE PROGRAMMING LANGUAGES (DBPL '19), P70, DOI 10.1145/3315507.3330202
   Seshadri P, 1996, PROC INT CONF DATA, P450, DOI 10.1109/ICDE.1996.492194
   Shah S, 2011, PROC INT CONF DATA, P1175, DOI 10.1109/ICDE.2011.5767876
   Sousa M, 2016, ACM SIGPLAN NOTICES, V51, P57, DOI 10.1145/2908080.2908092
   Stepp Michael, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P737, DOI 10.1007/978-3-642-22110-1_59
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Tuya J, 2010, SOFTW TEST VERIF REL, V20, P237, DOI 10.1002/stvr.424
   Veanes M, 2010, LECT NOTES ARTIF INT, V6355, P425, DOI 10.1007/978-3-642-17511-4_24
   Wang C, 2018, PROCEEDINGS OF THE 12TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT (ESEM 2018), DOI 10.1145/3239235.3268916
   Wang YP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158144
   Wang YP, 2020, PROC VLDB ENDOW, V13, P1006, DOI 10.14778/3384345.3384350
   Wang YP, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P286, DOI 10.1145/3314221.3314588
   Zaks A, 2008, LECT NOTES COMPUT SC, V5014, P35, DOI 10.1007/978-3-540-68237-0_5
   Zhou Q, 2022, PROC INT CONF DATA, P2735, DOI 10.1109/ICDE53745.2022.00250
   Zhou Q, 2019, PROC VLDB ENDOW, V12, P1276, DOI 10.14778/3342263.3342267
NR 52
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 132
DI 10.1145/3649849
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600039
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Borkowski, MH
   Vazou, N
   Jhala, R
AF Borkowski, Michael H.
   Vazou, Niki
   Jhala, Ranjit
TI Mechanizing Refinement Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE refinement types; LiquidHaskell
AB Practical checkers based on refinement types use the combination of implicit semantic subtyping and parametric polymorphism to simplify the specification and automate the verification of sophisticated properties of programs. However, a formal metatheoretic accounting of the soundness of refinement type systems using this combination has proved elusive. We present lambda(RF), a core refinement calculus that combines semantic subtyping and parametric polymorphism. We develop a metatheory for this calculus and prove soundness of the type system. Finally, we give two mechanizations of our metatheory. First, we introduce data propositions, a novel feature that enables encoding derivation trees for inductively defined judgments as refined data types, and use them to show that LIQIDHASKELL's refinement types can be used for mechanization. Second, we mechanize our results in COQ, which comes with stronger soundness guarantees than LIQIDHASKELL, thereby laying the foundations for mechanizing the metatheory of LIQIDHASKELL.
C1 [Borkowski, Michael H.; Jhala, Ranjit] Univ Calif San Diego, La Jolla, CA 92093 USA.
   [Vazou, Niki] IMDEA Software Inst, Madrid, Spain.
C3 University of California System; University of California San Diego;
   IMDEA Software Institute
RP Borkowski, MH (corresponding author), Univ Calif San Diego, La Jolla, CA 92093 USA.
EM mborkows@eng.ucsd.edu; niki.vazou@imdea.org; rjhala@ucsd.edu
OI Jhala, Ranjit/0000-0002-1802-9421
FU NSF [CNS-2120642, CNS-2155235, CCF-1918573, CCF-1911213, CCF-1955457];
   Horizon Europe ERC Starting Grant CRETE [101039196]; US Office of Naval
   Research HACKCRYPT [N00014-19-1-2292]
FX We thank James Parker for a helpful discussion about data propositions
   and the anonymous reviewers for the useful comments and suggestions.
   This work was supported by the NSF grants CNS-2120642, CNS-2155235,
   CCF-1918573, CCF-1911213, CCF-1955457, the Horizon Europe ERC Starting
   Grant CRETE (GA: 101039196), the US Office of Naval Research HACKCRYPT
   (Ref. N00014-19-1-2292), and generous gifts from Microsoft Research.
CR Astrauskas V, 2022, LECT NOTES COMPUT SC, V13260, P88, DOI 10.1007/978-3-031-06773-0_5
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   Belo JF, 2011, LECT NOTES COMPUT SC, V6602, P18, DOI 10.1007/978-3-642-19718-5_2
   Borkowski Michael H., 2023, Artifact Virtual Machine for "Mechanizing Refinement Types, DOI [10.5281/zenodo.8425176, DOI 10.5281/ZENODO.8425176]
   Borkowski Michael H., 2023, Artifact for " Mechanizing Refinement Types, DOI [10.5281/zenodo.8425960, DOI 10.5281/ZENODO.8425960]
   Castagna G, 2005, LECT NOTES COMPUT SC, V3580, P30
   Chen Zilin, 2022, TyDe 2022: Proceedings of the 7th ACM SIGPLAN International Workshop on Type-Driven Development, P1, DOI 10.1145/3546196.3550162
   COQUAND T, 1990, LECT NOTES COMPUT SC, V417, P50
   Cosman B, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110270
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Flanagan C, 2006, ACM SIGPLAN NOTICES, V41, P245, DOI 10.1145/1111320.1111059
   Flanagan C., 1993, P ACM SIGPLAN 93 C P, P237, DOI DOI 10.1145/155090.155113
   Fournet C, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P341
   Frisch A, 2002, IEEE S LOG, P137, DOI 10.1109/LICS.2002.1029823
   Ghalayini JE, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3607837
   Gordon AD, 2010, NATO SCI PEAC SECUR, V25, P73, DOI 10.3233/978-1-60750-100-8-73
   Greenberg Michael, 2013, Ph.D. Dissertation
   Hamza J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360592
   Jhala R, 2021, FOUND TRENDS PROGRAM, V6, P159, DOI 10.1561/2500000032
   Kent AM, 2016, ACM SIGPLAN NOTICES, V51, P296, DOI [10.1145/2908080.2908091, 10.1145/2980983.2908091]
   Knoth T, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408988
   Knowles K., 2009, Proceedings of the 3rd workshop on Programming languages meets program veri cation, PLPV '09, P27, DOI [10.1145/1481848.1481853, DOI 10.1145/1481848.1481853]
   Lehmann N, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591283
   Lehmann N, 2021, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '21), P441
   Lehmann Nico, 2016, 2 INTERNATIONALWORKS
   Martínez G, 2019, LECT NOTES COMPUT SC, V11423, P30, DOI 10.1007/978-3-030-17184-1_2
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Nipkow T., 2002, Isabelle/HOL - a proof assistant for higher-order logic, P2283, DOI [10.1007/3-540-45949-9, DOI 10.1007/3-540-45949-9]
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   Ou XM, 2004, INT FED INFO PROC, V155, P437
   Parker J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290388
   Pientka B, 2010, LECT NOTES COMPUT SC, V6009, P1, DOI 10.1007/978-3-642-12251-4_1
   Pierce Benjamin C., 2002, Types and Programming Languages
   Pierce Benjamin C., 2022, Programming Language Foundations, V2
   Pollack R., 1993, TYPES PROOFS PROGRAM, P313, DOI [DOI 10.1007/3-540-58085-9_82, 10.1007/3-540-58085-9\\_82, DOI 10.1007/3-540-58085-9]
   Redmond P., 2021, HOLE DRIVEN DEV LIQU
   Remy Didier, 2021, Type systems for programming languages
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sekiyama T, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/2994594
   Sozeau M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371076
   Sozeau M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341690
   Sulzmann M, 2007, PROCEEDINGS OF THE TLDI 2007: 2007 ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPES IN LANGUAGES DESIGN AND IMPLEMENTATION, P53, DOI 10.1145/1190315.1190324
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158141
   Vazou N, 2017, ACM SIGPLAN NOTICES, V52, P63, DOI 10.1145/3156695.3122963
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Vazou N, 2014, ACM SIGPLAN NOTICES, V49, P39, DOI [10.1145/2775050.2633366, 10.1145/2633357.2633366]
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
NR 51
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 70
DI 10.1145/3632912
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400071
OA gold
DA 2024-08-05
ER

PT J
AU Farzan, A
   Klumpp, D
   Podelski, A
AF Farzan, Azadeh
   Klumpp, Dominik
   Podelski, Andreas
TI Commutativity Simplifies Proofs of Parameterized Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE commutativity; parameterized programs; constrained Horn clauses
ID PARTIAL-ORDER REDUCTION
AB Commutativity has proven to be a powerful tool in reasoning about concurrent programs. Recent work has shown that a commutativity-based reduction of a program may admit simpler proofs than the program itself. The framework of lexicographical program reductions was introduced to formalize a broad class of reductions which accommodate sequential (thread-local) reasoning as well as synchronous programs. Approaches based on this framework, however, were fundamentally limited to program models with a fixed/bounded number of threads. In this paper, we show that it is possible to define an effective parametric family of program reductions that can be used to find simple proofs for parameterized programs, i.e., for programs with an unbounded number of threads. We show that reductions are indeed useful for the simplification of proofs for parameterized programs, in a sense that can be made precise: A reduction of a parameterized program may admit a proof which uses fewer or less sophisticated ghost variables. The reduction may therefore be within reach of an automated verification technique, even when the original parameterized program is not. As our first technical contribution, we introduce a notion of reductions for parameterized programs such that the reduction R of a parameterized program P is again a parameterized program (the thread template of R is obtained by source-to-source transformation of the thread template of P). Consequently, existing techniques for the verification of parameterized programs can be directly applied to R instead of P. Our second technical contribution is that we define an appropriate family of pairwise preference orders which can be effectively used as a parameter to produce different lexicographical reductions. To determine whether this theoretical foundation amounts to a usable solution in practice, we have implemented the approach, based on a recently proposed framework for parameterized program verification. The results of our preliminary experiments on a representative set of examples are encouraging.
C1 [Farzan, Azadeh] Univ Toronto, Toronto, ON, Canada.
   [Klumpp, Dominik; Podelski, Andreas] Univ Freiburg, Freiburg, Germany.
C3 University of Toronto; University of Freiburg
RP Farzan, A (corresponding author), Univ Toronto, Toronto, ON, Canada.
EM azadeh@cs.toronto.edu; klumpp@informatik.uni-freiburg.de;
   podelski@informatik.uni-freiburg.de
OI Klumpp, Dominik/0000-0003-4885-0728
CR Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Arons T, 2001, LECT NOTES COMPUT SC, V2102, P221
   Beyer D, 2019, INT J SOFTW TOOLS TE, V21, P1, DOI 10.1007/s10009-017-0469-y
   Clarke EM, 1998, LECT NOTES COMPUT SC, V1427, P147, DOI 10.1007/BFb0028741
   Duc-Hiep Chu, 2014, Hardware and Software: Verification and Testing. 10th International Haifa Verification Conference, HVC 2014. Proceedings: LNCS 8855, P171, DOI 10.1007/978-3-319-13338-6_14
   Elmas T, 2009, ACM SIGPLAN NOTICES, V44, P2, DOI 10.1145/1594834.1480885
   Emmi M, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P134, DOI 10.1145/1806596.1806613
   Farzan Azadeh, 2023, Zenodo, DOI 10.5281/ZENODO.10119773
   Farzan A, 2023, IEEE S LOG, DOI 10.1109/LICS56636.2023.10175734
   Farzan A, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P506, DOI 10.1145/3519939.3523727
   Farzan A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371081
   Farzan A, 2019, LECT NOTES COMPUT SC, V11561, P200, DOI 10.1007/978-3-030-25540-4_11
   Farzan A, 2015, ACM SIGPLAN NOTICES, V50, P407, DOI [10.1145/2676726.2677012, 10.1145/2775051.2677012]
   Farzan A, 2014, ACM SIGPLAN NOTICES, V49, P151, DOI 10.1145/2535838.2535885
   Farzan Azadeh, 2023, Technical Report
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Flanagan C, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428224
   Genest B, 2007, FUND INFORM, V80, P147
   Gleissenthall KV, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290372
   Godefroid P., 1996, Lecture Notes in Computer Science, V1032, DOI [DOI 10.1007/3-540-60761-7, 10.1007/3-540-60761-7_31]
   Grebenshchikov S, 2012, ACM SIGPLAN NOTICES, V47, P405, DOI 10.1145/2345156.2254112
   Gurfinkel A, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P338, DOI 10.1145/2950290.2950330
   Hoenicke J, 2017, ACM SIGPLAN NOTICES, V52, P473, DOI 10.1145/3093333.3009893
   Hojjat H, 2014, ELECTRON P THEOR COM, P39, DOI 10.4204/EPTCS.169.6
   Kahlon V, 2009, LECT NOTES COMPUT SC, V5643, P398, DOI 10.1007/978-3-642-02658-4_31
   Kaiser Alexander, 2014, CONCUR 2014 - Concurrency Theory. 25th International Conference, CONCUR 2014. Proceedings: LNCS 8704, P141, DOI 10.1007/978-3-662-44584-6_11
   Kragl B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P227, DOI 10.1145/3385412.3385980
   Kragl B, 2018, LECT NOTES COMPUT SC, V10981, P79, DOI 10.1007/978-3-319-96145-3_5
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Monniaux D, 2016, LECT NOTES COMPUT SC, V9837, P361, DOI 10.1007/978-3-662-53413-7_18
   Nieto Leonor Prensa, 2001, P 15 INT PAR DISTR P, P150, DOI [10.1109/IPDPS.2001.925138, DOI 10.1109/IPDPS.2001.925138]
   Pnueli Amir, 2001, INT C TOOLS ALG CONS, P82
   Popeea C, 2014, 2014 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P187, DOI 10.1109/FMCAD.2014.6987612
   Rustan M Leino K., 2008, Manuscript KRML, V178
   Wachter B, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P210
NR 35
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 83
DI 10.1145/3632925
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400084
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Farzan, A
   Mathur, U
AF Farzan, Azadeh
   Mathur, Umang
TI Coarser Equivalences for Causal Concurrency
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrency; equivalence; reads-from; reduction; predictive analysis
ID RACE DETECTION; PROGRAMS; LANGUAGE
AB Trace theory (formulated by Mazurkiewicz in 1987) is a principled framework for defining equivalence relations for concurrent program runs based on a commutativity relation over the set of atomic steps taken by individual program threads. Its simplicity, elegance, and algorithmic efficiency makes it useful in many different contexts including program verification and testing. It is well-understood that the larger the equivalence classes are, the more benefits they would bring to the algorithms and applications that use them. In this paper, we study relaxations of trace equivalence with the goal of maintaining its algorithmic advantages.
   We first prove that the largest appropriate relaxation of trace equivalence, an equivalence relation that preserves the order of steps taken by each thread and what write operation each read operation observes, does not yield efficient algorithms. Specifically, we prove a linear space lower bound for the problem of checking, in a streaming setting, if two arbitrary steps of a concurrent program run are causally concurrent (i.e. they can be reordered in an equivalent run) or causally ordered (i.e. they always appear in the same order in all equivalent runs). The same problem can be decided in constant space for trace equivalence. Next, we propose a new commutativity-based notion of equivalence called grain equivalence that is strictly more relaxed than trace equivalence, and yet yields a constant space algorithm for the same problem. This notion of equivalence uses commutativity of grains, which are sequences of atomic steps, in addition to the standard commutativity from trace theory. We study the two distinct cases when the grains are contiguous subwords of the input program run and when they are not, formulate the precise definition of causal concurrency in each case, and show that they can be decided in constant space, despite being strict relaxations of the notion of causal concurrency based on trace equivalence.
C1 [Farzan, Azadeh] Univ Toronto, Toronto, ON, Canada.
   [Mathur, Umang] Natl Univ Singapore, Singapore, Singapore.
C3 University of Toronto; National University of Singapore
RP Farzan, A (corresponding author), Univ Toronto, Toronto, ON, Canada.
EM azadeh@cs.toronto.edu; umathur@comp.nus.edu.sg
OI Mathur, Umang/0000-0002-7610-0660
FU National Science and Engineering Research Council of Canada (NSERC);
   Singapore Ministry of Education (MoE) Academic Research Fund (AcRF) Tier
   1 grant
FX The initial ideas of this work stemmed from discussions when the authors
   co-attended a research program titled Theoretical Foundations of
   Computer Systems (TFCS) organized by the Simons Institute for the Theory
   of Computing. Azadeh Farzan's research is supported by a Discovery Grant
   from the National Science and Engineering Research Council of Canada
   (NSERC). Umang Mathur was partially supported by a Singapore Ministry of
   Education (MoE) Academic Research Fund (AcRF) Tier 1 grant.
CR Abdulla PA, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360576
   Agarwal P, 2021, LECT NOTES COMPUT SC, V12759, P341, DOI 10.1007/978-3-030-81685-8_16
   Ang ZD, 2024, P ACM PROGRAM LANG, V8, DOI 10.1145/3632915
   Bauget S., 1995, Mathematical Foundations of Computer Science 1995. 20th International Symposium, MFCS '95. Proceedings, P434
   Chalupa M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158119
   Chatterjee K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360550
   Desai A, 2014, ACM SIGPLAN NOTICES, V49, P709, DOI [10.1145/2660193.2660211, 10.1145/2714064.2660211]
   Diekert Volker, 1995, The Book of Traces
   Dragoi C, 2016, ACM SIGPLAN NOTICES, V51, P400, DOI [10.1145/2837614.2837650, 10.1145/2914770.2837650]
   Elmas T, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P245, DOI 10.1145/1250734.1250762
   Farzan A, 2008, LECT NOTES COMPUT SC, V5123, P52
   Farzan A, 2023, IEEE S LOG, DOI 10.1109/LICS56636.2023.10175734
   Farzan A, 2023, Arxiv, DOI [arXiv:2208.12117, 10.48550/ARXIV.2208.12117, DOI 10.48550/ARXIV.2208.12117]
   Farzan A, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P506, DOI 10.1145/3519939.3523727
   Farzan A, 2006, LECT NOTES COMPUT SC, V4144, P315, DOI 10.1007/11817963_30
   Farzan A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371081
   Farzan A, 2019, LECT NOTES COMPUT SC, V11561, P200, DOI 10.1007/978-3-030-25540-4_11
   Farzan A, 2009, LECT NOTES COMPUT SC, V5643, P248, DOI 10.1007/978-3-642-02658-4_21
   Farzan Azadeh, 2012, P ACM SIGSOFT 20 INT, P47, DOI [10.1145/2393596.2393651, DOI 10.1145/2393596.2393651]
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Flanagan C, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P121, DOI 10.1145/1542476.1542490
   Flanagan C, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P293, DOI 10.1145/1375581.1375618
   Genest B, 2007, FUND INFORM, V80, P147
   Gibbons P. B., 1994, SPAA '94. 6th Annual ACM Symposium on Parallel Algorithms and Architectures, P177, DOI 10.1145/181014.181328
   Gibbons PB, 1997, SIAM J COMPUT, V26, P1208, DOI 10.1137/S0097539794279614
   Godefroid P., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P174, DOI 10.1145/263699.263717
   Godefroid P., 1993, Computer Aided Verification. 5th International Conference, CAV '93 Proceedings, P438
   Hack Michel, 1976, Petri net language
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Huang J, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P609, DOI 10.1145/3180155.3180225
   Huang J, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P847, DOI 10.1109/ICSE.2015.96
   Huang J, 2014, ACM SIGPLAN NOTICES, V49, P337, DOI [10.1145/2666356.2594315, 10.1145/2594291.2594315]
   Impagliazzo R, 2001, J COMPUT SYST SCI, V62, P367, DOI 10.1006/jcss.2000.1727
   Itzkovitz A, 1999, J PARALLEL DISTR COM, V59, P180, DOI 10.1006/jpdc.1999.1574
   Kalhauge CG, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276516
   KATZ S, 1992, THEOR COMPUT SCI, V101, P337, DOI 10.1016/0304-3975(92)90054-J
   Kini D, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P26, DOI 10.1145/3236024.3236025
   Kini D, 2017, ACM SIGPLAN NOTICES, V52, P157, DOI [10.1145/3140587.3062374, 10.1145/3062341.3062374]
   Kleijn H.C.M., 1998, Electronic Notes in Theoretical Computer Science, V16, P98, DOI DOI 10.1016/S1571-0661(04)00120-3EXPRESS'98
   Kokologiannakis M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498711
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   Kulkarni Rucha, 2021, 32 INT C CONC THEOR, V16, P1
   Maarand H, 2019, INNOV SYST SOFTW ENG, V15, P253, DOI 10.1007/s11334-019-00347-1
   Mathur U, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276515
   Mathur U, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434317
   Mathur U, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P183, DOI 10.1145/3373376.3378475
   MAZURKIEWICZ A, 1987, LECT NOTES COMPUT SC, V255, P279
   Milner R., 1980, A Calculus for Communicating Systems, volume 92, DOI DOI 10.1007/3-540-10235-3
   Pavlogiannis A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371085
   Roemer J, 2018, ACM SIGPLAN NOTICES, V53, P374, DOI [10.1145/3296979.3192385, 10.1145/3192366.3192385]
   Rosu G, 2003, LECT NOTES COMPUT SC, V2706, P499
   Said M, 2011, LECT NOTES COMPUT SC, V6617, P313, DOI 10.1007/978-3-642-20398-5_23
   Samak M, 2014, ACM SIGPLAN NOTICES, V49, P29, DOI [10.1145/2555243.2555262, 10.1145/2692916.2555262]
   Sassone Vladimiro, 1993, Mathematical Foundations of Computer Science 1993
   Sen K, 2005, LECT NOTES COMPUT SC, V3535, P211
   Smaragdakis Y, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P387
   Sorrentino Francesco, 2010, INT S FDN SOFTWARE E, p37s46, DOI [10.1145/1882291.1882300, DOI 10.1145/1882291.1882300]
   Sulzmann M, 2020, MPLR '20: PROCEEDINGS OF THE 17TH INTERNATIONAL CONFERENCE ON MANAGED PROGRAMMING LANGUAGES AND RUNTIMES, P30, DOI 10.1145/3426182.3426185
   Tunç HC, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591291
   Wang C, 2009, LECT NOTES COMPUT SC, V5850, P256, DOI 10.1007/978-3-642-05089-3_17
   Williams R, 2005, THEOR COMPUT SCI, V348, P357, DOI 10.1016/j.tcs.2005.09.023
   Winskel G., 1987, LECT NOTES COMPUT SC, V255, P325
NR 62
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 31
DI 10.1145/3632873
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400032
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU DeYoung, H
   Mordido, A
   Pfenning, F
   Das, A
AF DeYoung, Henry
   Mordido, Andreia
   Pfenning, Frank
   Das, Ankush
TI Parametric Subtyping for Structural Parametric Polymorphism
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE structural subtyping; parametric polymorphism; type constructors;
   saturation-based algorithms
ID SESSION TYPES; DECIDABILITY; EQUIVALENCE
AB We study the interaction of structural subtyping with parametric polymorphism and recursively defined type constructors. Although structural subtyping is undecidable in this setting, we describe a notion of parametricity for type constructors and then exploit it to define parametric subtyping, a conceptually simple, decidable, and expressive fragment of structural subtyping that strictly generalizes rigid subtyping. We present and prove correct an effective saturation-based decision procedure for parametric subtyping, demonstrating its applicability using a variety of examples. We also provide an implementation of this decision procedure as an artifact.
C1 [DeYoung, Henry; Pfenning, Frank] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Mordido, Andreia] Univ Lisbon, Fac Ciencias, LASIGE, Lisbon, Portugal.
   [Das, Ankush] Amazon, Santa Clara, CA USA.
C3 Carnegie Mellon University; Universidade de Lisboa; Amazon.com
RP DeYoung, H (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM hdeyoung@cs.cmu.edu; afmordido@ciencias.ulisboa.pt; fp@cs.cmu.edu;
   daankus@amazon.com
OI Pfenning, Frank/0000-0002-8279-5817
FU Fundacao para a Ciencia e a Tecnologia [PTDC/CCI-COM/6453/2020]; LASIGE
   Research Unit [UIDB/00408/2020, UIDP/00408/2020]
FX We wish to thank the anonymous reviewers for their very valuable
   feedback on our paper. Support for this research was provided by the
   Fundacao para a Ciencia e a Tecnologia through the project SafeSessions
   (PTDC/CCI-COM/6453/2020) and the LASIGE Research Unit (UIDB/00408/2020
   and UIDP/00408/2020).
CR Abadi M., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P396, DOI 10.1145/237721.237809
   Abel A, 2016, J FUNCT PROGRAM, V26, DOI 10.1017/S0956796816000022
   Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Ahmed Amal J., 2004, Ph. D. Dissertation
   Almeida Bernardo, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12079), P39, DOI 10.1007/978-3-030-45237-7_3
   Almeida B, 2022, INFORM COMPUT, V289, DOI 10.1016/j.ic.2022.104948
   AMADIO RM, 1993, ACM T PROGR LANG SYS, V15, P575, DOI 10.1145/155183.155231
   [Anonymous], 1972, Ph. D. Dissertation
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Baelde David, 2022, P 37 ANN ACMIEEE S L, DOI [10.1145/3531130.3533375, DOI 10.1145/3531130.3533375]
   BAETEN JCM, 1993, J ACM, V40, P653, DOI 10.1145/174130.174141
   BERGSTRA JA, 1984, INFORM CONTROL, V60, P109, DOI 10.1016/S0019-9958(84)80025-X
   Bird R., 1998, Mathematics of Program Construction. 4th International Conference, MPC'98. Proceedings, P52, DOI 10.1007/BFb0054285
   Brandt M., 1998, Fundamenta Informaticae, V33, P309
   Brotherston J, 2011, J LOGIC COMPUT, V21, P1177, DOI 10.1093/logcom/exq052
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   CARDELLI L, 1984, LECT NOTES COMPUT SC, V173, P51
   Cardelli L., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P70, DOI 10.1145/73560.73566
   CARDELLI L, 1986, LECT NOTES COMPUT SC, V242, P21
   CARDELLI L, 1985, COMPUT SURV, V17, P471, DOI 10.1145/6041.6042
   CARDELLI L, 1994, INFORM COMPUT, V109, P4, DOI 10.1006/inco.1994.1013
   Castagna G, 2005, LECT NOTES COMPUT SC, V3580, P30
   Castagna Giuseppe, 1994, P 21 ACM SIGPLAN SIG, P151, DOI [10.1145/174675.177844, DOI 10.1145/174675.177844]
   Connelly R. H., 1995, Mathematical Structures in Computer Science, V5, P381, DOI 10.1017/S0960129500000803
   Danielsson NA, 2010, LECT NOTES COMPUT SC, V6120, P100, DOI 10.1007/978-3-642-13321-3_8
   Das A, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3539656
   Das Ankush, 2021, arXiv
   DeYoung H, 2023, Arxiv, DOI arXiv:2307.13661
   DeYoung Henry, 2023, Standard ML Implementation of Parametric Subtyping Decision Procedure
   DeYoung Henry, 2023, Parametric Subtyping for Structural Parametric Polymorphism (Artifact)
   Dolan S, 2017, ACM SIGPLAN NOTICES, V52, P60, DOI 10.1145/3093333.3009882
   Dreyer D, 2009, IEEE S LOG, P71, DOI 10.1109/LICS.2009.34
   Dunfield J, 2004, ACM SIGPLAN NOTICES, V39, P281, DOI 10.1145/982962.964025
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Friedman E. P., 1976, Theoretical Computer Science, V1, P297, DOI 10.1016/0304-3975(76)90074-8
   Frisch A, 2002, IEEE S LOG, P137, DOI 10.1109/LICS.2002.1029823
   Gay S, 2005, ACTA INFORM, V42, P191, DOI 10.1007/s00236-005-0177-z
   Gay SJ, 2022, LECT NOTES COMPUT SC, V13242, P347, DOI 10.1007/978-3-030-99253-8_18
   Greenman B, 2014, ACM SIGPLAN NOTICES, V49, P89, DOI [10.1145/2666356.2594308, 10.1145/2594291.2594308]
   GREIBACH SA, 1965, J ACM, V12, P42, DOI 10.1145/321250.321254
   Grigore R, 2017, ACM SIGPLAN NOTICES, V52, P73, DOI 10.1145/3093333.3009871
   GROOTE JF, 1994, INFORM COMPUT, V115, P354, DOI 10.1006/inco.1994.1101
   Hinze R., 2000, Journal of Functional Programming, V10, P327, DOI 10.1017/S0956796800003713
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Hosoya Haruo, 1998, Datatypes and Subtyping
   Huet G., 1998, Mathematical Structures in Computer Science, V8, P671, DOI 10.1017/S0960129598002643
   Huet Gerard, 1976, l. Ph. D. Dissertation
   Jaffar J., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P111, DOI 10.1145/41625.41635
   Jancar P, 2021, J COMPUT SYST SCI, V115, P86, DOI 10.1016/j.jcss.2020.07.004
   Johann P, 2021, LOG METH COMPUT SCI, V17, DOI 10.46298/LMCS-17(4:23)2021
   Katiyar Dinesh, 1992, ACM SIGPLAN WORKSHOP
   Kennedy Andrew J., 2007, FOOLWOOD 2007
   Korenjak A. J., 1966, SWAT, P36, DOI DOI 10.1109/SWAT.1966.22
   Lakhani Z, 2022, LECT NOTES COMPUT SC, V13240, P431, DOI 10.1007/978-3-030-99336-8_16
   Lepigre R, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3285955
   Levy Paul Blain, 2001, Ph. D. Dissertation
   Ligatti J, 2017, ACM T PROGR LANG SYS, V39, DOI 10.1145/2994596
   Mackay J, 2020, LECT NOTES COMPUT SC, V12470, P125, DOI 10.1007/978-3-030-64437-6_7
   MARTELLI A, 1982, ACM T PROGR LANG SYS, V4, P258, DOI 10.1145/357162.357169
   Mordido A, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591277
   MYCROFT A, 1984, LECT NOTES COMPUT SC, V167, P217
   Odersky H., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P54, DOI 10.1145/237721.237729
   Padovani L, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3229062
   Pfenning Frank, 2005, THESIS CARNEGIE MELL
   PIERCE BC, 1994, INFORM COMPUT, V112, P131, DOI 10.1006/inco.1994.1055
   Pierce Benjamin C., 2002, Types and Programming Languages
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   REYNOLDS JC, 1985, LECT NOTES COMPUT SC, V185, P97
   ROBINSON JA, 1965, J ACM, V12, P23, DOI 10.1145/321250.321253
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Sénizergues G, 2001, THEOR COMPUT SCI, V251, P1, DOI 10.1016/S0304-3975(00)00285-1
   Silva Gil, 2023, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V279, DOI [10.4230/LIPIcs.CONCUR.2023.11, DOI 10.4230/LIPICS.CONCUR.2023.11]
   Skalka Christian, 1997, Master's thesis
   Solomon Marvin H., 1978, P 5 ACM SIGACTSIGPLA, P31, DOI DOI 10.1145/512760.512765
   Steffen Martin, 1999, Ph. D. Dissertation.
   Stirling C, 2001, THEOR COMPUT SCI, V255, P1, DOI 10.1016/S0304-3975(00)00389-3
   Stirling Colin, 2001, FST TCS 2001: Foundations of Software Technology and Theoretical Computer Science, V2245, P42, DOI [10.1007/3-540-45294-X_4, DOI 10.1007/3-540-45294-X_4]
   Thiemann P, 2016, ACM SIGPLAN NOTICES, V51, P462, DOI 10.1145/3022670.2951926
   Tiuryn J, 2002, INFORM COMPUT, V179, P1, DOI 10.1006/inco.2001.2950
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Wadsworth C. P, 1979, Bulletin of the EATCS, V8, P87
   Wells Joe B., 1995, Technical Report 95-019
   Zhou LT, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571241
NR 83
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 90
DI 10.1145/3632932
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400091
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Krishna, S
   Lal, A
   Pavlogiannis, A
   Tuppe, O
AF Krishna, Shankaranarayanan
   Lal, Aniket
   Pavlogiannis, Andreas
   Tuppe, Omkar
TI On-the-Fly Static Analysis via Dynamic Bidirected Dyck Reachability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE CFL reachability; static analysis; dynamic algorithms
ID POINTS-TO ANALYSIS; ALGEBRAIC PATH PROPERTIES; DATA-DEPENDENCE ANALYSIS;
   FLOW-ANALYSIS; ALGORITHMS
AB Dyck reachability is a principled, graph-based formulation of a plethora of static analyses. Bidirected graphs are used for capturing dataflow through mutable heap data, and are usual formalisms of demand-driven points-to and alias analyses. The best (offline) algorithm runs in O(m + n . alpha(n)) time, where n is the number of nodes and m is the number of edges in the flow graph, which becomes O(n(2)) in the worst case.
   In the everyday practice of program analysis, the analyzed code is subject to continuous change, with source code being added and removed. On-the-fly static analysis under such continuous updates gives rise to dynamic Dyck reachability, where reachability queries run on a dynamically changing graph, following program updates. Naturally, executing the offline algorithm in this online setting is inadequate, as the time required to process a single update is prohibitively large.
   In this work we develop a novel dynamic algorithm for bidirected Dyck reachability that has O(n . alpha(n)) worst-case performance per update, thus beating the O(n(2)) bound, and is also optimal in certain settings. We also implement our algorithm and evaluate its performance on on-the-fly data-dependence and alias analyses, and compare it with two best known alternatives, namely (i) the optimal offline algorithm, and (ii) a fully dynamic Datalog solver. Our experiments show that our dynamic algorithm is consistently, and by far, the top performing algorithm, exhibiting speedups in the order of 1000X. The running time of each update is almost always unnoticeable to the human eye, making it ideal for the on-the-fly analysis setting.
C1 [Krishna, Shankaranarayanan; Lal, Aniket; Tuppe, Omkar] Indian Inst Technol, Mumbai, Maharashtra, India.
   [Pavlogiannis, Andreas] Aarhus Univ, Aabogade 34, DK-8200 Aarhus, Denmark.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Bombay; Aarhus University
RP Krishna, S (corresponding author), Indian Inst Technol, Mumbai, Maharashtra, India.
EM krishnas@cse.iitb.ac.in; aniketlal@cse.iitb.ac.in;
   pavlogiannis@cs.au.dk; omkarvtuppe@cse.iitb.ac.in
RI ; Pavlogiannis, Andreas/X-6831-2018
OI Shankara Narayanan, Krishna/0000-0003-0925-398X; Pavlogiannis,
   Andreas/0000-0002-8943-0722
FU VILLUM FONDEN [VIL42117]; SERB MATRICS grant [MTR/2019/000095]
FX Andreas Pavlogiannis was partially supported by a research grant
   (VIL42117) from VILLUM FONDEN. S. Krishna was partially supported by the
   SERB MATRICS grant MTR/2019/000095.
CR [Anonymous], 2008, SPECjvm2008 Benchmark Suit
   [Anonymous], 2003, T. J. Watson Libraries for Analysis (WALA)
   Arzt S, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P288, DOI 10.1145/2568225.2568243
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bodden Eric, 2012, P ACM SIGPLAN INT WO, P3, DOI [10.1145/2259051.2259052, DOI 10.1145/2259051.2259052]
   Bohner S. A., 1996, SOFTWARE CHANGE IMPA, P1
   Bravenboer M, 2009, ACM SIGPLAN NOTICES, V44, P243, DOI 10.1145/1639949.1640108
   BURKE MG, 1990, IEEE T SOFTWARE ENG, V16, P723, DOI 10.1109/32.56098
   Chatterjee K, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158118
   Chatterjee K, 2020, LECT NOTES COMPUT SC, V12075, P112, DOI 10.1007/978-3-030-44914-8_5
   Chatterjee K, 2016, ACM SIGPLAN NOTICES, V51, P733, DOI 10.1145/2914770.2837624
   Chatterjee K, 2015, ACM SIGPLAN NOTICES, V50, P97, DOI [10.1145/2676726.2676979, 10.1145/2775051.2676979]
   Chaudhuri S, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1328897.1328460
   Chistikov D, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498702
   Eppstein D, 1997, J ACM, V44, P669, DOI 10.1145/265910.265914
   Ganardi Moses, 2022, P 37 ANN ACMIEEE S L, P1, DOI [10.1145/3531130.3533345, DOI 10.1145/3531130.3533345]
   Ganardi Moses, 49 INT C AUTOMATA LA, V229
   Goharshady AK, 2023, LECT NOTES COMPUT SC, V13881, P177, DOI 10.1007/978-3-031-24950-1_9
   Hansen JC, 2021, INFORM PROCESS LETT, V171, DOI 10.1016/j.ipl.2021.106135
   Heintze N, 1997, IEEE S LOG, P342, DOI 10.1109/LICS.1997.614960
   Heintze N., 2001, Proceedings of the ACM SIGPLAN 2001 Conference on Programming Language Design and Implementation, P24, DOI [10.1145/378795.378802, DOI 10.1145/381694.378802, DOI 10.1145/378795.378802]
   HENGLEIN F, 1991, LECT NOTES COMPUT SC, V523, P448
   Henglein F., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P205, DOI 10.1145/141471.141542
   Holm J, 2001, J ACM, V48, P723, DOI 10.1145/502090.502095
   Horwitz Susan, 1995, SIGSOFT Softw. Eng. Notes
   Huang Wei, 2015, P 2015 INT S SOFTW T, P106, DOI [10.1145/2771783.2771803, DOI 10.1145/2771783.2771803]
   KANELLAKIS PC, 1989, J SYMB COMPUT, V7, P427, DOI 10.1016/S0747-7171(89)80018-5
   Kjelstrom AH, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498673
   Koutris P, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571252
   Krishna S, 2023, Arxiv, DOI [arXiv:2311.04319, 10.48550/arXiv.2311.04319, DOI 10.48550/ARXIV.2311.04319]
   Lerch J, 2015, IEEE INT CONF AUTOM, P619, DOI 10.1109/ASE.2015.9
   Lhoták O, 2006, LECT NOTES COMPUT SC, V3923, P47
   Li YB, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498724
   Li YB, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P780, DOI 10.1145/3385412.3386021
   Liu BZ, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3293606
   Lu JB, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360574
   Madsen M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428193
   Mathiasen AA, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434315
   Milanova A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428246
   Moller Anders, 2018, Technical Report
   Naeem NA, 2010, LECT NOTES COMPUT SC, V6011, P124, DOI 10.1007/978-3-642-11970-5_8
   Pacak A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428195
   Pavlogiannis Andreas, 2022, ACM SIGLOG News, P5, DOI 10.1145/3583660.3583664
   Rehof J, 2001, ACM SIGPLAN NOTICES, V36, P54, DOI 10.1145/373243.360208
   Reps T., 1994, SIGSOFT Software Engineering Notes, V19, P11, DOI 10.1145/195274.195287
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T, 1997, LOGIC PROGRAMM, P5
   Reps T., 1995, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics- Based Program Manipulation. PEPM'95, P1, DOI 10.1145/215465.215466
   Reps T, 2000, ACM T PROGR LANG SYS, V22, P162, DOI 10.1145/345099.345137
   Reps T. W., 1995, Applications of Logic Databases, P163
   Ryzhyk Leonid, 2019, Datalog
   Shang Lei, 2012, P 10 INT S COD GEN O, P264, DOI [10.1145/2259016.2259050, DOI 10.1145/2259016.2259050]
   Späth J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290361
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Szabó T, 2016, IEEE INT CONF AUTOM, P320, DOI 10.1145/2970276.2970298
   Tang H, 2017, LECT NOTES COMPUT SC, V10201, P880, DOI 10.1007/978-3-662-54434-1_33
   Tang H, 2015, ACM SIGPLAN NOTICES, V50, P83, DOI [10.1145/2775051.2676997, 10.1145/2676726.2676997]
   Tseng Tom, 2020, Dynamic connectivity data structure by Holm, de Lichtenberg, and Thorup
   Vedurada J, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P936, DOI 10.1109/ASE.2019.00091
   Xu GQ, 2009, LECT NOTES COMPUT SC, V5653, P98
   Yan Dacong, 2011, P 2011 INT S SOFTW T, P155, DOI DOI 10.1145/2001420.2001440
   YANNAKAKIS M, 1990, PROCEEDINGS OF THE NINTH ACM SIGACT-SIGMOD-SIGART SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P230, DOI 10.1145/298514.298576
   Yuan H, 2009, LECT NOTES COMPUT SC, V5502, P175
   ZADECK FK, 1984, SIGPLAN NOTICES, V19, P132, DOI 10.1145/502949.502888
   Zhang QR, 2013, ACM SIGPLAN NOTICES, V48, P435, DOI 10.1145/2499370.2462159
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P344, DOI 10.1145/3093333.3009848
   Zheng X, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P197, DOI 10.1145/1328438.1328464
NR 69
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 42
DI 10.1145/3632884
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400043
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Rakotonirina, I
   Barthe, G
   Schneidewind, C
AF Rakotonirina, Itsaka
   Barthe, Gilles
   Schneidewind, Clara
TI Decision and Complexity of Dolev-Yao Hyperproperties
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE hyperproperties; security protocols; computational complexity
ID SECURITY
AB The formal analysis of cryptographic protocols traditionally focuses on trace and equivalence properties, for which decision procedures in the symbolic (or Dolev-Yao, or DY) model are known. However, many relevant security properties are expressed as DY hyperproperties that involve quantifications over both execution paths and attacker computations (which are constrained by the attacker's knowledge in the underlying model of computation). DY hyperproperties generalise hyperproperties, for which many decision procedures exist, to the setting of DY models. Unfortunately, the subtle interactions between both forms of quantifications have been an obstacle to lifting decision procedures from hyperproperties to DY hyperproperties.
   The central contribution of the paper is the first procedure for deciding DY hyperproperties, in the usual setting where the number of protocol sessions is bounded and where the equational theory modelling cryptography is subterm-convergent. We prove that our decision procedure can decide the validity of any hyperproperty in which quantifications over messages are guarded and quantifications over attacker computations are limited to expressing the attacker's knowledge. We also establish the complexity of the decision problem for several important fragments of the hyperlogic. Further, we illustrate the techniques and scope of our contributions through examples of related hyperproperties.
C1 [Rakotonirina, Itsaka; Barthe, Gilles; Schneidewind, Clara] MPI SP, Bochum, Germany.
   [Barthe, Gilles] IMDEA Software Inst, Madrid, Spain.
C3 IMDEA Software Institute
RP Rakotonirina, I (corresponding author), MPI SP, Bochum, Germany.
EM itsaka.rakotonirina@mpi-sp.org; gbarthe@mpi-sp.org;
   clara.schneidewind@mpi-sp.org
OI BARTHE, Gilles/0000-0002-3853-1777
CR Abadi M, 2006, THEOR COMPUT SCI, V367, P2, DOI 10.1016/j.tcs.2006.08.032
   Abadi M, 2018, J ACM, V65, DOI 10.1145/3127586
   Ahrendt Wolfgang, 2020, Leveraging Applications of Formal Methods, Verification and Validation. Applications. 9th International Symposium on Leveraging Applications of Formal Methods, ISoLA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12478), P9, DOI 10.1007/978-3-030-61467-6_2
   Albert E, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428277
   ALPERN B, 1985, INFORM PROCESS LETT, V21, P181, DOI 10.1016/0020-0190(85)90056-0
   Armando A, 2012, LECT NOTES COMPUT SC, V7214, P267, DOI 10.1007/978-3-642-28756-5_19
   Aumayr Lukas, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P901, DOI 10.1109/SP40001.2021.00097
   Aumayr Lukas, 2023, NETWORK DISTRIBUTED
   Backes M, 2017, 2017 IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P), P76, DOI 10.1109/EuroSP.2017.12
   Balliu Musard, 2011, INWORKSHOP PROGRAMMI
   Barthe G, 2014, ACM SIGPLAN NOTICES, V49, P193, DOI 10.1145/2535838.2535847
   Barthe Gilles, 2022, ACM C COMPUTER COMMU
   Basin David, 2019, Tamarin prover manual
   Baudet Mathieu, 2007, Ph. D. Dissertation
   Benevides Mario RF, 2021, Logical and Semantic Frameworks with Applications (LSFA)
   Beutner R, 2023, Arxiv, DOI arXiv:2305.17935
   Beutner R, 2023, Arxiv, DOI [arXiv:2203.07283, 10.48550/arXiv.2203.07283, DOI 10.48550/ARXIV.2203.07283]
   Bhargavan K, 2021, 2021 IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P 2021), P523, DOI 10.1109/EuroSP51992.2021.00042
   Blanchet B, 2012, LECT NOTES COMPUT SC, V7215, P3, DOI 10.1007/978-3-642-28641-4_2
   Blanchet Bruno, 2020, Automatic Cryptographic Protocol Verifier, User Manual and Tutorial
   Bonakdarpour Borzoo, 2023, arXiv, DOI [10.48550/arXiv.2301.07208, DOI 10.48550/ARXIV.2301.07208]
   Boneh D, 2000, LECT NOTES COMPUT SC, V1880, P236
   Chadha R, 2016, ACM T COMPUT LOG, V17, DOI 10.1145/2926715
   Cheval V, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P905, DOI 10.1145/3319535.3354260
   Cheval V, 2013, THEOR COMPUT SCI, V492, P1, DOI 10.1016/j.tcs.2013.04.016
   Cheval Vincent, 2020, Logic, Language, and Security. Essays Dedicated to Andre Scedrov on the Occasion of His 65th Birthday
   Cheval Vincent, 2020, DeepSec user manual
   Cheval Vincent, 2022, USENIX SECURITY S
   Cheval Vincent, 2018, IEEE S SECURITY PRIV
   Clarkson M. R., 2014, POST2014, P265, DOI [DOI 10.1007/978-3-642-54792-8, 10.1007/978-3-642-54792]
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   Coenen N, 2022, Arxiv, DOI arXiv:2208.07180
   Coenen N, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785713
   Comon-Lundh H, 2005, LECT NOTES COMPUT SC, V3467, P294
   DOLEV D, 1983, IEEE T INFORM THEORY, V29, P198, DOI 10.1109/TIT.1983.1056650
   Durgin N., 2004, Journal of Computer Security, V12, P247
   Dziembowski S, 2019, P IEEE S SECUR PRIV, P106, DOI 10.1109/SP.2019.00020
   Finkbeiner Bernd, 2023, NASA Formal Methods: 15th International Symposium, NFM 2023, Proceedings. Lecture Notes in Computer Science (13903), P361, DOI 10.1007/978-3-031-33170-1_22
   Finkbeiner B, 2015, LECT NOTES COMPUT SC, V9206, P30, DOI 10.1007/978-3-319-21690-4_3
   Grishchenko I, 2018, LECT NOTES COMPUT SC, V10804, P243, DOI 10.1007/978-3-319-89722-6_10
   Grossman Shelly, 2017, P ACM PROGRAMMING LA
   Holler Sebastian, 2023, 2023 2023 IEEE 36 CO, P347
   Kanovich M, 2014, COMPUT LANG SYST STR, V40, P137, DOI 10.1016/j.cl.2014.05.003
   Kremer S, 2016, J COMPUT SECUR, V24, P583, DOI 10.3233/JCS-160556
   Liu J, 2012, THEOR COMPUT SCI, V458, P76, DOI 10.1016/j.tcs.2012.07.034
   Marescotti Matteo, 2020, Leveraging Applications of Formal Methods, Verification and Validation. Applications. 9th International Symposium on Leveraging Applications of Formal Methods, ISoLA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12478), P178, DOI 10.1007/978-3-030-61467-6_12
   Mascle Corto, 2019, arXiv
   Permenev A, 2020, P IEEE S SECUR PRIV, P1661, DOI 10.1109/SP40000.2020.00024
   Poon J., 2016, The bitcoin lightning network: Scalable off-chain instant payments
   Rakotonirina Itsaka, 2021, Ph. D. Dissertation
   Rakotonirina Itsaka, 2024, ACM SIGPLAN S PRINCI
   Rusinowitch M, 2003, THEOR COMPUT SCI, V299, P451, DOI 10.1016/S0304-3975(02)00490-5
   Schneidewind C, 2020, CCS '20: PROCEEDINGS OF THE 2020 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P621, DOI 10.1145/3372297.3417250
   Stephens Jon, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P555, DOI 10.1109/SP40001.2021.00085
NR 54
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 64
DI 10.1145/3632906
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400065
OA gold
DA 2024-08-05
ER

PT J
AU Rinaldi, F
   Wunder, J
   de Amorim, AA
   Muller, SK
AF Rinaldi, Francis
   Wunder, June
   de Amorim, Arthur Azevedo
   Muller, Stefan K.
TI Pipelines and Beyond: Graph Types for ADTs with Futures
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE parallel programs; graph types; cost graphs; computation graphs;
   futures; pipelining; affine type system
AB Parallel programs are frequently modeled as dependency or cost graphs, which can be used to detect various bugs, or simply to visualize the parallel structure of the code. However, such graphs reflect just one particular execution and are typically constructed in a post-hoc manner. Graph types, which were introduced recently to mitigate this problem, can be assigned statically to a program by a type system and compactly represent the family of all graphs that could result from the program.
   Unfortunately, prior work is restricted in its treatment of futures, an increasingly common and especially dynamic form of parallelism. In short, each instance of a future must be statically paired with a vertex name. Previously, this led to the restriction that futures could not be placed in collections or be used to construct data structures. Doing so is not a niche exercise: such structures form the basis of numerous algorithms that use forms of pipelining to achieve performance not attainable without futures. All but the most limited of these examples are out of reach of prior graph type systems.
   In this paper, we propose a graph type system that allows for almost arbitrary combinations of futures and recursive data types. We do so by indexing datatypes with a type-level vertex structure, a codata structure that supplies unique vertex names to the futures in a data structure. We prove the soundness of the system in a parallel core calculus annotated with vertex structures and associated operations. Although the calculus is annotated, this is merely for convenience in defining the type system. We prove that it is possible to annotate arbitrary recursive types with vertex structures, and show using a prototype inference engine that these annotations can be inferred from OCaml-like source code for several complex parallel algorithms.
C1 [Rinaldi, Francis; de Amorim, Arthur Azevedo; Muller, Stefan K.] IIT, Chicago, IL 60616 USA.
   [Wunder, June] Boston Univ, Boston, MA USA.
C3 Illinois Institute of Technology; Boston University
RP Rinaldi, F (corresponding author), IIT, Chicago, IL 60616 USA.
EM frinaldi@hawk.iit.edu; jwunder@bu.edu; aaavcs@rit.edu; smuller2@iit.edu
OI Muller, Stefan K/0000-0002-3210-9727; Azevedo de Amorim,
   Arthur/0000-0001-9916-6614
FU National Science Foundation [CCF-2107289, CCF-2007784, CNS-2314323]
FX The authors would like to thank the anonymous reviewers for their
   helpful feedback. This paper was based on work partially supported by
   the National Science Foundation under awards CCF-2107289, CCF-2007784,
   and CNS-2314323.
NR 0
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 17
DI 10.1145/3632859
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400018
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Sun, P
   Song, F
   Chen, YQ
   Chen, TL
AF Sun, Pu
   Song, Fu
   Chen, Yuqi
   Chen, Taolue
TI EasyBC: A Cryptography-Specific Language for Security Analysis of Block
   Ciphers against Differential Cryptanalysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Cryptography-Specific Language; Block Ciphers; Differential
   Cryptanalysis
ID MILP MODELINGS; LIGHTWEIGHT; ENCRYPTION; SEARCH; SIMON
AB Differential cryptanalysis is a powerful algorithmic-level attack, playing a central role in evaluating the security of symmetric cryptographic primitives. In general, the resistance against differential cryptanalysis can be characterized by the maximum expected differential characteristic probability. In this paper, we present generic and extensible approaches based on mixed integer linear programming (MILP) to bound such probability. We design a high-level cryptography-specific language EASYBC tailored for block ciphers and provide various rigorous procedures as differential denotational semantics, to automate the generation of MILP from block ciphers written in EASYBC. We implement an open-sourced tool that provides support for fully automated resistance evaluation of block ciphers against differential cryptanalysis. The tool is extensively evaluated on 23 real-life cryptographic primitives including all the 10 finalists of the NIST lightweight cryptography standardization process. The experiments confirm the expressivity of EASYBC and show that the tool can effectively prove the resistance against differential cryptanalysis for all block ciphers under consideration. EASYBC makes resistance evaluation against differential cryptanalysis easily accessible to cryptographers.
C1 [Sun, Pu; Chen, Yuqi] ShanghaiTech Univ, Shanghai, Peoples R China.
   [Song, Fu] Chinese Acad Sci, Inst Software, Beijing, Peoples R China.
   [Song, Fu] Univ Chinese Acad Sci, Beijing, Peoples R China.
   [Chen, Taolue] Birkbeck Univ London, London, England.
C3 ShanghaiTech University; Chinese Academy of Sciences; Institute of
   Software, CAS; Chinese Academy of Sciences; University of Chinese
   Academy of Sciences, CAS; University of London; Birkbeck University
   London
RP Sun, P (corresponding author), ShanghaiTech Univ, Shanghai, Peoples R China.
EM sunpu@shanghaitech.edu.cn; songfu@ios.ac.cn; chenyq@shanghaitech.edu.cn;
   t.chen@bbk.ac.uk
OI Chen, Taolue/0000-0002-5993-1665; Song, Fu/0000-0002-0581-2679
FU National Natural Science Foundation of China (NSFC) [62072309,
   61872340]; CAS Project for Young Scientists in Basic Research
   [YSBR-040]; ISCAS New Cultivation Project [ISCAS-PYFX-202201]; State Key
   Laboratory of Novel Software Technology, Nanjing University
   [KFKT2023A04]; Birkbeck BEI School Project (EFFECT)
FX We thank the reviewers of POPL'24 for their constructive and insightful
   comments. This work is supported by the National Natural Science
   Foundation of China (NSFC) under Grants No. 62072309 and No. 61872340,
   CAS Project for Young Scientists in Basic Research (YSBR-040), ISCAS New
   Cultivation Project (ISCAS-PYFX-202201), overseas grants from the State
   Key Laboratory of Novel Software Technology, Nanjing University
   (KFKT2023A04), and Birkbeck BEI School Project (EFFECT).
CR Abdelkhalek A, 2017, IACR T SYMMETRIC CRY, V2017, P99, DOI 10.13154/tosc.v2017.i4.99-129
   AlDanial, 2021, Zenodo
   Almeida JB, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1807, DOI 10.1145/3133956.3134078
   [Anonymous], 2019, Schwaemm and ESCH: Lightweight Authenticated Encryption and Hashing Using the Sparkle Permutation Family: NIST Round
   Aoki Kazumaro, 1997, P INT WORKSH FAST SO, P41, DOI [10.1007/BFB0052333, DOI 10.1007/BFB0052333]
   Aumasson JP, 2015, LECT NOTES COMPUT SC, V8895, P306, DOI 10.1007/978-3-319-16295-9_17
   Azimi SA, 2022, DESIGN CODE CRYPTOGR, V90, P1797, DOI 10.1007/s10623-022-01074-8
   Banik S., 2020, IACR Cryptol. ePrint Arch, V2020, P738
   Banik S, 2017, LECT NOTES COMPUT SC, V10529, P321, DOI 10.1007/978-3-319-66787-4_16
   Bao ZZ, 2015, LECT NOTES COMPUT SC, V8957, P259, DOI 10.1007/978-3-319-16745-9_15
   Bao Zhenzhen., 2019, NIST Lightweight Compet. Round, V1, P115
   Beaulieu R, 2015, DES AUT CON, DOI 10.1145/2744769.2747946
   Beierle Christof, 2020, Advances in Cryptology - CRYPTO 2020. 40th Annual International Cryptology Conference, CRYPTO 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12172), P419, DOI 10.1007/978-3-030-56877-1_15
   Beierle C, 2016, LECT NOTES COMPUT SC, V9815, P123, DOI 10.1007/978-3-662-53008-5_5
   Beyne T, 2020, IACR T SYMMETRIC CRY, V2020, P5, DOI 10.13154/tosc.v2020.iS1.5-30
   BIHAM E, 1991, LECT NOTES COMPUT SC, V537, P2
   Biryukov A, 2010, LECT NOTES COMPUT SC, V6110, P322
   Biryukov Alex, 2011, Encyclopedia of cryptography and security, P722, DOI [10.1007/978-1-4419-5906-5_589, DOI 10.1007/978-1-4419-5906-5_589]
   Bjorner Nikolaj, 2015, Tools and Algorithms for the Construction and Analysis of Systems, P194, DOI [10.1007/978-3-662-46681-0_14, DOI 10.1007/978-3-662-46681-0_14]
   Bjorner Nikolaj., 2014, SCSS 2014 VOLUME 30, V30, P1
   Bogdanov A, 2007, LECT NOTES COMPUT SC, V4727, P450
   Bogdanov Andrey, 2010, Analysis and design of block cipher constructions
   Bond B, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P917
   Boura C, 2020, IACR T SYMMETRIC CRY, V2020, P327, DOI 10.13154/tosc.v2020.i3.327-361
   Carter Kyle, 2013, P 2013 ACM SIGADA AN, P15, DOI DOI 10.1145/2527269.2527277
   Cauligi S, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P174, DOI 10.1145/3314221.3314605
   Chen Yuqi, 2023, Technical Report.
   Chen Zhan, 2015, IACR Cryptol. ePrint Arch, V2015, P286
   Cui Tingting, 2016, IACR Cryptol. ePrint Arch, V2016, P689
   Daemen J., 1999, AES proposal: Rijndael
   Daemen J, 2020, IACR T SYMMETRIC CRY, V2020, P60, DOI 10.13154/tosc.v2020.iS1.60-87
   Dobraunig C, 2020, IACR T SYMMETRIC CRY, V2020, P390, DOI 10.13154/tosc.v2020.iS1.390-416
   Dobraunig Christoph, 2016, ASCON v1. 2. Submission to the CAESAR Competition.
   Fox Dirk, 2000, Datenschutz und Datensicherheit., V24, P12
   Fu K, 2016, LECT NOTES COMPUT SC, V9783, P268, DOI 10.1007/978-3-662-52993-5_14
   Gao PF, 2022, IEEE T SOFTWARE ENG, V48, P973, DOI 10.1109/TSE.2020.3008852
   Gao PF, 2021, ACM T SOFTW ENG METH, V30, DOI 10.1145/3428015
   Gong Z, 2012, LECT NOTES COMPUT SC, V7055, P1, DOI 10.1007/978-3-642-25286-0_1
   Gurobi Optimization LLC, 2023, GUROBI OPTIMIZER REF
   Hell M, 2021, LECT NOTES COMPUT SC, V13099, P24, DOI 10.1007/978-3-030-92548-2_2
   Heys HM, 1996, J CRYPTOL, V9, P1, DOI 10.1007/BF02254789
   Heys HM, 2002, CRYPTOLOGIA, V26, P189, DOI 10.1080/0161-110291890885
   Ilter MB, 2021, SECRYPT 2021: PROCEEDINGS OF THE 18TH INTERNATIONAL CONFERENCE ON SECURITY AND CRYPTOGRAPHY, P420, DOI 10.5220/0010519504200427
   Iwata T, 2020, IACR T SYMMETRIC CRY, V2020, P43, DOI 10.13154/tosc.v2020.i1.43-120
   Izadi M, 2009, LECT NOTES COMPUT SC, V5888, P334, DOI 10.1007/978-3-642-10433-6_22
   Ji FL, 2021, COMPUT J, V64, P610, DOI 10.1093/comjnl/bxaa090
   KAM JB, 1979, IEEE T COMPUT, V28, P747, DOI 10.1109/TC.1979.1675242
   Katz J., 2014, Introduction to Modern Cryptography
   Kim J, 2003, LECT NOTES COMPUT SC, V2904, P82
   Knudsen Lars R., 1997, P STAT ART APPL CRYP, V1528, P18, DOI [10.1007/3-540-49248-8_2, DOI 10.1007/3-540-49248-8_2]
   Kölbl S, 2015, LECT NOTES COMPUT SC, V9215, P161, DOI 10.1007/978-3-662-47989-6_8
   LAI XJ, 1991, LECT NOTES COMPUT SC, V547, P17
   Li Lingchen, 2019, IACR Cryptol. ePrint Arch., P49
   Li T, 2022, IACR T SYMMETRIC CRY, V2022, P341, DOI 10.46586/tosc.v2022.i3.341-367
   Ling Song, 2016, Information Security and Privacy. 21st Australasian Conference, ACISP 2016. Proceedings: LNCS 9723, P379, DOI 10.1007/978-3-319-40367-0_24
   Liu Mingyang, 2023, Lecture Notes in Computer Science., V13966, P255, DOI [10.1007/978-3-031-37709-9_13, DOI 10.1007/978-3-031-37709-9_13]
   Liu Y, 2021, SCI CHINA INFORM SCI, V64, DOI 10.1007/s11432-018-9772-0
   Liu ZB, 2017, IACR T SYMMETRIC CRY, V2017, P358, DOI 10.13154/tosc.v2017.i1.358-379
   Mahzoun M, 2022, IEEE SYMP COMP COMMU, DOI 10.1109/ISCC55528.2022.9912926
   Makarim RH, 2022, IACR T SYMMETRIC CRY, V2022, P303, DOI 10.46586/tosc.v2022.i3.303-340
   Matsui M., 1995, Advances in Cryptology - EUROCRYPT '94. Workshop on the Theory and Application of Cryptographic Techniques. Proceedings, P366, DOI 10.1007/BFb0053451
   Mercadier D, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P157, DOI 10.1145/3314221.3314636
   Mouha Nicky, 2012, Information Security and Cryptology. 7th International Conference, Inscrypt 2011. Revised Selected Papers, P57, DOI 10.1007/978-3-642-34704-7_5
   Mouha N., 2013, Paper 2013/328
   Nguyen Vu., 2007, Cocomo ii forum, P1
   NIST, 2023, Finalists of NIST lightweight cryptography standardization process.
   Nyberg K., 1996, Advances in Cryptology - ASIACRYPT'96 International Conference on the Theory and Applications of Cryptology and Information Security. Proceedings, P91, DOI 10.1007/BFb0034838
   Sasaki Y, 2017, LECT NOTES COMPUT SC, V10543, P150, DOI 10.1007/978-3-319-69284-5_11
   Sen Teh J, 2022, J INF SECUR APPL, V70, DOI 10.1016/j.jisa.2022.103316
   SHANNON CE, 1949, BELL SYST TECH J, V28, P656, DOI 10.1002/j.1538-7305.1949.tb00928.x
   Shibutani K, 2011, LECT NOTES COMPUT SC, V6917, P342, DOI 10.1007/978-3-642-23951-9_23
   Su L, 2021, IACR T SYMMETRIC CRY, V2021, P269, DOI 10.46586/tosc.v2021.i1.269-315
   Sun L, 2018, IACR T SYMMETRIC CRY, V2018, P93, DOI 10.13154/tosc.v2018.i3.93-123
   Sun SW, 2014, LECT NOTES COMPUT SC, V8873, P158, DOI 10.1007/978-3-662-45611-8_9
   Sun SW, 2014, LECT NOTES COMPUT SC, V8567, P39, DOI 10.1007/978-3-319-12087-4_3
   Sun Siwei., 2014, Cryptology ePrint Archive, Report 2014/747
   Sun Yao, 2021, IACR Cryptol. ePrint Arch, P1084
   Suzaki T., 2013, P INT C SEL ARE CRYP, V7707, P339, DOI 10. 1007/978- 3- 642-35999-6
   Udovenko Aleksei, 2021, Cryptology ePrint Archive
   Wang XZ, 2018, LECT NOTES COMPUT SC, V11060, P116, DOI 10.1007/978-3-319-99136-8_7
   Wu H., 2019, Submission to the NIST Lightweight Cryptography Competition
   Wu Shengbao, 2012, PROGR CRYPTOLOGY IND, P283
   Wu WL, 2011, LECT NOTES COMPUT SC, V6715, P327, DOI 10.1007/978-3-642-21554-4_19
   Yin Jun, 2017, P INT C INF SEC CRYP, P404, DOI [10.1007/978-3-319-75160-3_24, DOI 10.1007/978-3-319-75160-3_24]
   Zhang P, 2018, SECUR COMMUN NETW, DOI 10.1155/2018/3780407
   Zhang WT, 2015, SCI CHINA INFORM SCI, V58, DOI 10.1007/s11432-015-5459-7
   Zhang YJ, 2018, LECT NOTES COMPUT SC, V11060, P101, DOI 10.1007/978-3-319-99136-8_6
   Zhou CN, 2019, IACR T SYMMETRIC CRY, V2019, P438, DOI 10.13154/tosc.v2019.i4.438-469
NR 88
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 29
DI 10.1145/3632871
PG 34
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400030
OA gold
DA 2024-08-05
ER

PT J
AU Mukherjee, M
   Regehr, J
AF Mukherjee, Manasij
   Regehr, John
TI Hydra: Generalizing Peephole Optimizations with Program Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; generalization; superoptimization; llvm; alive2;
   souper; hydra; peephole optimization
AB Optimizing compilers rely on peephole optimizations to simplify combinations of instructions and remove redundant instructions. Typically, a new peephole optimization is added when a compiler developer notices an optimization opportunity-a collection of dependent instructions that can be improved-and manually derives a more general rewrite rule that optimizes not only the original code, but also other, similar collections of instructions. In this paper, we present Hydra, a tool that automates the process of generalizing peephole optimizations using a collection of techniques centered on program synthesis. One of the most important problems we have solved is finding a version of each optimization that is independent of the bitwidths of the optimization's inputs (when this version exists). We show that Hydra can generalize 75% of the ungeneralized missed peephole optimizations that LLVM developers have posted to the LLVM project's issue tracker. All of Hydra's generalized peephole optimizations have been formally verified, and furthermore we can automatically turn them into C++ code that is suitable for inclusion in an LLVM pass.
C1 [Mukherjee, Manasij; Regehr, John] Univ Utah, Salt Lake City, UT 84112 USA.
C3 Utah System of Higher Education; University of Utah
RP Mukherjee, M (corresponding author), Univ Utah, Salt Lake City, UT 84112 USA.
EM manasij@cs.utah.edu; regehr@cs.utah.edu
FU National Science Foundation [1955688]
FX This material is based upon work supported by the National Science
   Foundation under Grant No. 1955688. Any opinions, findings, and
   conclusions or recommendations expressed in this material are those of
   the authors and do not necessarily reflect the views of the National
   Science Foundation.
CR Abate A, 2018, LECT NOTES COMPUT SC, V10981, P270, DOI 10.1007/978-3-319-96145-3_15
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, LECT NOTES COMPUT SC, V9207, P163, DOI 10.1007/978-3-319-21668-3_10
   Alur R, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P1, DOI 10.3233/978-1-61499-495-4-1
   Bansal S, 2006, ACM SIGPLAN NOTICES, V41, P394, DOI 10.1145/1168918.1168906
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   Bornholt J, 2016, ACM SIGPLAN NOTICES, V51, P775, DOI 10.1145/2914770.2837666
   Buchwald S, 2015, LECT NOTES COMPUT SC, V9031, P171, DOI 10.1007/978-3-662-46663-6_9
   Cambronero J, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571226
   DAVIDSON JW, 1984, SIGPLAN NOTICES, V19, P111, DOI 10.1145/502949.502885
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dutertre Bruno, 2015, 13 INT WORKSH SAT MO
   Ekici B, 2023, LECT NOTES ARTIF INT, V14279, P41, DOI 10.1007/978-3-031-43369-6_3
   Gange G, 2013, LECT NOTES COMPUT SC, V7935, P6, DOI 10.1007/978-3-642-38856-9_3
   GRANGER P, 1989, INT J COMPUT MATH, V30, P165, DOI 10.1080/00207168908803778
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P317, DOI 10.1145/1925844.1926423
   Guo Z, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371080
   Jha S, 2017, ACTA INFORM, V54, P693, DOI 10.1007/s00236-017-0294-5
   Jiang JJ, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P255, DOI 10.1109/ASE.2019.00033
   Joshi R, 2002, ACM SIGPLAN NOTICES, V37, P304, DOI 10.1145/543552.512566
   Kalita PK, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563334
   King A, 2010, LECT NOTES COMPUT SC, V5944, P197, DOI 10.1007/978-3-642-11319-2_16
   Le Goues C, 2019, COMMUN ACM, V62, P56, DOI 10.1145/3318162
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   LLVM-LangRef, 2023, LLVM Language Reference Manual
   Long F, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P727, DOI 10.1145/3106237.3106253
   Lopes NP, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P65, DOI 10.1145/3453483.3454030
   Lopes NP, 2015, ACM SIGPLAN NOTICES, V50, P22, DOI [10.1145/2813885.2737965, 10.1145/2737924.2737965]
   Lopes NP, 2014, LECT NOTES COMPUT SC, V8318, P203, DOI 10.1007/978-3-642-54013-4_12
   Massalin H., 1987, Proceedings of the Second International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS II) (Cat. No.87CH2440-6), P122
   MCKEEMAN WM, 1965, COMMUN ACM, V8, P443, DOI 10.1145/364995.365000
   Menendez D, 2017, ACM SIGPLAN NOTICES, V52, P49, DOI [10.1145/3140587.3062372, 10.1145/3062341.3062372]
   Meng N, 2011, ACM SIGPLAN NOTICES, V46, P329, DOI 10.1145/1993316.1993537
   Mukherjee M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428245
   Negara S, 2013, LECT NOTES COMPUT SC, V7920, P552, DOI 10.1007/978-3-642-39038-8_23
   Niemetz A, 2019, LECT NOTES ARTIF INT, V11716, P366, DOI 10.1007/978-3-030-29436-6_22
   Padhi S, 2016, ACM SIGPLAN NOTICES, V51, P42, DOI [10.1145/2980983.2908099, 10.1145/2908080.2908099]
   Phothilimthana PM, 2016, ACM SIGPLAN NOTICES, V51, P297, DOI 10.1145/2954679.2872387
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Sands Duncan, 2011, Super-optimizing LLVM IR
   Sasnauskas R, 2018, Arxiv, DOI [arXiv:1711.04422, DOI 10.48550/ARXIV.1711.04422, 10.48550/arXiv.1711.04422]
   Schkufza E, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI 10.1145/2499368.2451150
   Shi KS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290386
   Solar-Lezama Armando, 2008, Ph. D. Dissertation
   Srinivasan V, 2016, ACM SIGPLAN NOTICES, V51, P165, DOI 10.1145/3022671.2984006
   Taneja J, 2020, INT SYM CODE GENER, P81, DOI 10.1145/3368826.3377927
   Tate R, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P389, DOI 10.1145/1706299.1706345
   Tate R, 2009, ACM SIGPLAN NOTICES, V44, P264, DOI 10.1145/1594834.1480915
   Tiwari A, 2015, LECT NOTES ARTIF INT, V9195, P482, DOI 10.1007/978-3-319-21401-6_33
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
NR 50
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 120
DI 10.1145/3649837
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600027
OA gold
DA 2024-08-05
ER

PT J
AU Rose, A
   Bansal, S
AF Rose, Abhishek
   Bansal, Sorav
TI Modeling Dynamic (De)Allocations of Local Memory for Translation
   Validation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Translation validation; Equivalence checking; Certified compilation
ID FORMAL VERIFICATION
AB End-to-End Translation Validation is the problem of verifying the executable code generated by a compiler against the corresponding input source code for a single compilation. This becomes particularly hard in the presence of dynamically-allocated local memory where addresses of local memory may be observed by the program. In the context of validating the translation of a C procedure to executable code, a validator needs to tackle constant-length local arrays, address-taken local variables, address-taken formal parameters, variable-length local arrays, procedure-call arguments (including variadic arguments), and the alloca() operator. We provide an execution model, a definition of refinement, and an algorithm to soundly convert a refinement check into first-order logic queries that an off-the-shelf SMT solver can handle efficiently. In our experiments, we perform blackbox translation validation of C procedures (with up to 100+ SLOC), involving these local memory allocation constructs, against their corresponding assembly implementations (with up to 200+ instructions) generated by an optimizing compiler with complex loop and vectorizing transformations.
C1 [Rose, Abhishek; Bansal, Sorav] Indian Inst Technol Delhi, New Delhi, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Delhi
RP Rose, A (corresponding author), Indian Inst Technol Delhi, New Delhi, India.
EM abhishek.rose@cse.iitd.ac.in; sbansal@iitd.ac.in
CR Andersen L. O., 1994, PROGRAM ANAL SPECIAL
   Churchill B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1027, DOI 10.1145/3314221.3314596
   github, 2024, Z3 bug report for an unsound model
   Gupta S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428289
   Henning JL, 2000, COMPUTER, V33, P28, DOI 10.1109/2.869367
   Kang J, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P631, DOI 10.1145/3192366.3192377
   Kasampalis T, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P1004, DOI 10.1145/3445814.3446751
   Kernighan B. W., 1988, The C Programming Language, V2nd
   Lee J, 2021, LECT NOTES COMPUT SC, V12760, P752, DOI 10.1007/978-3-030-81688-9_35
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Leroy X, 2008, J AUTOM REASONING, V41, P1, DOI 10.1007/s10817-008-9099-0
   Lopes NP, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P65, DOI 10.1145/3453483.3454030
   Maleki S., 2011, Proceedings 2011 International Conference on Parallel Architectures and Compilation Techniques (PACT), P372, DOI 10.1109/PACT.2011.68
   Menendez D, 2016, LECT NOTES COMPUT SC, V9837, P317, DOI 10.1007/978-3-662-53413-7_16
   Namjoshi KS, 2013, LECT NOTES COMPUT SC, V7935, P304, DOI 10.1007/978-3-642-38856-9_17
   Necula G. C., 2000, SIGPLAN Notices, V35, P83, DOI 10.1145/358438.349314
   Rose Abhishek, 2024, Zenodo, DOI 10.5281/ZENODO.10797459
   Rose A, 2024, Arxiv, DOI arXiv:2403.05302
   Sewell T, 2013, ACM SIGPLAN NOTICES, V48, P471, DOI 10.1145/2499370.2462183
   Sharma R, 2013, ACM SIGPLAN NOTICES, V48, P391, DOI [10.1145/2509136.2509509, 10.1145/2544173.2509509]
   Steensgaard B., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P32, DOI 10.1145/237721.237727
   Stepp Michael, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P737, DOI 10.1007/978-3-642-22110-1_59
   Tristan JB, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P295
   Zaks A, 2008, LECT NOTES COMPUT SC, V5014, P35, DOI 10.1007/978-3-540-68237-0_5
   Zhao JZ, 2013, ACM SIGPLAN NOTICES, V48, P175, DOI 10.1145/2499370.2462164
   Zhao JZ, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P427
NR 26
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 146
DI 10.1145/3649863
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600053
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Smith, S
   Zhang, R
AF Smith, Scott
   Zhang, Robert
TI A Pure Demand Operational Semantics with Applications to Program
   Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Demand-Driven Operational Semantics
AB This paper develops a novel minimal-state operational semantics for higher-order functional languages that uses only the call stack and a source program point or a lexical level as the complete state information: there is no environment, no substitution, no continuation, etc. We prove this form of operational semantics equivalent to standard presentations.
   We then show how this approach can open the door to potential new applications: we define a program analysis as a direct finitization of this operational semantics. The program analysis that naturally emerges has a number of novel and interesting properties compared to standard program analyses for higher-order programs: for example, it can infer recurrences and does not need value widening. We both give a formal definition of the analysis and describe our current implementation.
C1 [Smith, Scott; Zhang, Robert] Johns Hopkins Univ, Baltimore, MD 21218 USA.
C3 Johns Hopkins University
RP Smith, S (corresponding author), Johns Hopkins Univ, Baltimore, MD 21218 USA.
EM scott@cs.jhu.edu; jzhan239@jhu.edu
CR Barendregt Henk P., 1984, Lambda Calculus, Its Syntax and Semantics
   Bodin M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290357
   Cousot P., 1977, Conference Record of the Fourth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P238, DOI [10.1145/512950.512973, DOI 10.1145/512950.512973]
   Darais D, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110256
   Facchinetti L, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3310340
   Fachinetti L, 2020, LECT NOTES COMPUT SC, V12470, P3, DOI 10.1007/978-3-030-64437-6_1
   Felleisen Matthias, 1986, Formal Description of Programming Concepts III, P193
   Fischer Charles, 2005, CS536 Lecture Notes.
   Gilray T, 2016, ACM SIGPLAN NOTICES, V51, P691, DOI 10.1145/2914770.2837631
   Gonthier G., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P15, DOI 10.1145/143165.143172
   Gurfinkel A, 2022, LECT NOTES COMPUT SC, V13371, P19, DOI 10.1007/978-3-031-13185-1_2
   Jagannathan S., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P393, DOI 10.1145/199448.199536
   James Roshan., 2014, Core_bench: better micro-benchmarks through linear regression
   Kaki G, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P311, DOI 10.1145/2628136.2628159
   Koppel J, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236771
   LAMPING J, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P16, DOI 10.1145/96709.96711
   Might M, 2010, LECT NOTES COMPUT SC, V6337, P407, DOI 10.1007/978-3-642-15769-1_25
   Might M, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P305, DOI 10.1145/1806596.1806631
   Miné A, 2017, FOUND TRENDS PROGRAM, V4, pI, DOI 10.1561/2500000034
   MITCHELL JohnC., 2003, CONCEPTS PROGRAMMING
   Montagu B, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409001
   Palmer Z, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408984
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Schmidt D. A., 1998, LISP and Symbolic Computation, V10, P237, DOI 10.1023/A:1007734417713
   Shivers Olin Grigsby, 1991, Ph. D. Dissertation
   Van Horn D, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Van Horn D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P275
   Vardoulakis D, 2010, LECT NOTES COMPUT SC, V6012, P570, DOI 10.1007/978-3-642-11957-6_30
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   Zhang Robert, 2024, Zenodo, DOI 10.5281/ZENODO.10794350
   Zhang Robert, 2024, Software Artifact for A Pure Demand Operational Semantics With Applications to Program Analysis
   Zhang Robert, 2024, OpenSource Codebase for A Pure Demand Operational Semantics With Applications to Program Analysis
   Zhu H, 2016, ACM SIGPLAN NOTICES, V51, P491, DOI [10.1145/2908080.2908125, 10.1145/2980983.2908125]
NR 34
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 135
DI 10.1145/3649852
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600042
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Atkey, R
AF Atkey, Robert
TI Polynomial Time and Dependent Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type theory; implicit computational complexity; linear logic
ID LINEAR LOGIC; LANGUAGE; TERMS
AB We combine dependent types with linear type systems that soundly and completely capture polynomial time computation. We explore two systems for capturing polynomial time: one system that disallows construction of iterable data, and one, based on the LFPL system of Martin Hofmann, that controls construction via a payment method. Both of these are extended to full dependent types via Quantitative Type Theory, allowing for arbitrary computation in types alongside guaranteed polynomial time computation in terms. We prove the soundness of the systems using a realisability technique due to Dal Lago and Hofmann.
   Our long-term goal is to combine the extensional reasoning of type theory with intensional reasoning about the resources intrinsically consumed by programs. This paper is a step along this path, which we hope will lead both to practical systems for reasoning about programs' resource usage, and to theoretical use as a form of synthetic computational complexity theory.
C1 [Atkey, Robert] Univ Strathclyde, 26 Richmond St, Glasgow G1 1XH, Lanark, Scotland.
C3 University of Strathclyde
RP Atkey, R (corresponding author), Univ Strathclyde, 26 Richmond St, Glasgow G1 1XH, Lanark, Scotland.
EM robert.atkey@strath.ac.uk
RI Atkey, Robert/I-3074-2016
OI Atkey, Robert/0000-0002-4414-5047
FU Engineering and Physical Sciences Research Council [EP/T026960/1]
FX This work was funded by the Engineering and Physical Sciences Research
   Council: Grant number EP/T026960/1, AISEC: AI Secure and Explainable by
   Construction.
CR Abbott M, 2005, THEOR COMPUT SCI, V342, P3, DOI 10.1016/j.tcs.2005.06.002
   Abel A, 2023, P ACM PROGRAM LANG, V7, DOI [10.1145/36078620, 10.1145/3607862]
   Aehlig K., 2002, ACM Transactions on Computational Logic, V3, P383, DOI 10.1145/507382.507386
   [Anonymous], 1992, Computational Complexity, DOI DOI 10.1007/BF01201998
   Arora S, 2009, COMPUTATIONAL COMPLEXITY: A MODERN APPROACH, P1, DOI 10.1017/CBO9780511804090
   Atkey R, 2023, Arxiv, DOI [arXiv:2307.09145, 10.48550/arXiv.2307.09145, DOI 10.48550/ARXIV.2307.09145]
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Atkey Robert, 2023, Agda formalisation of Polynomial Time and Dependent Types, DOI [10.5281/zenodo.8425923, DOI 10.5281/ZENODO.8425923]
   Baillot P, 2004, LECT NOTES COMPUT SC, V2987, P27
   Baillot P, 2010, LECT NOTES COMPUT SC, V6012, P104, DOI 10.1007/978-3-642-11957-6_7
   Barber Andrew., 1996, Dual intuitionistic linear logic
   Bauer A, 2006, ELECTRON NOTES THEOR, V155, P5, DOI 10.1016/j.entcs.2005.11.049
   Benton PN, 1995, LECT NOTES COMPUT SC, V933, P121, DOI 10.1007/BFb0022251
   Brady Edwin C., 2021, 35 EUROPEAN C OBJEC, V9, DOI [10.4230/LIPIcs.ECOOP.2021.9, DOI 10.4230/LIPICS.ECOOP.2021.9]
   Brunel A, 2014, LECT NOTES COMPUT SC, V8410, P351
   Cervesato I, 2002, INFORM COMPUT, V179, P19, DOI 10.1006/inco.2001.2951
   Choudhury P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434331
   Coppola P, 2001, LECT NOTES COMPUT SC, V2044, P76
   Dal Lago Ugo, 2012, Lectures on Logic and Computation. ESSLLI 2010. ESSLLI 2011. Selected Lecture Notes, P89, DOI 10.1007/978-3-642-31485-8_3
   Dal Lago U, 2016, INFORM COMPUT, V248, P150, DOI 10.1016/j.ic.2015.04.006
   Dal Lago U, 2015, INFORM COMPUT, V241, P114, DOI 10.1016/j.ic.2014.10.009
   Dal Lago U, 2010, LOG METH COMPUT SCI, V6, DOI 10.2168/LMCS-6(4:7)2010
   Dal Lago U, 2011, THEOR COMPUT SCI, V412, P2029, DOI 10.1016/j.tcs.2010.12.025
   Dal Lago U, 2010, THEOR COMPUT SYST, V46, P673, DOI 10.1007/s00224-009-9210-x
   Dal Lago Ugo, 2021, LEIBNIZ INT P INFORM, V202
   Danielsson NA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1328438.1328457
   Fu P, 2022, LOG METH COMPUT SCI, V18, DOI 10.46298/LMCS-18(3:28)2022
   Ghica DR, 2014, LECT NOTES COMPUT SC, V8410, P331
   GIRARD JY, 1992, THEOR COMPUT SCI, V97, P1, DOI 10.1016/0304-3975(92)90386-T
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Girard JY, 1998, INFORM COMPUT, V143, P175, DOI 10.1006/inco.1998.2700
   Gueneau Armael, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P533, DOI 10.1007/978-3-319-89884-1_19
   Hainry E, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571221
   Hoffmann J, 2022, MATH STRUCT COMP SCI, V32, P729, DOI 10.1017/S0960129521000487
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Hofmann M, 2004, THEOR COMPUT SCI, V318, P121, DOI [10.1016/j.tcs.2003.10.019, 10.1016/j.tcs.203.10.019]
   Hofmann M, 2003, INFORM COMPUT, V183, P57, DOI 10.1016/S0890-5401(03)00009-9
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hofmann M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P464, DOI 10.1109/LICS.1999.782641
   Hofmann M., 1997, Publ. Newton Inst., V14, P79, DOI [DOI 10.1017/CBO9780511526619.004, 10.1017/CBO9780511526619.004]
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   Jones ND, 2001, J FUNCT PROGRAM, V11, P55, DOI 10.1017/S0956796800003889
   Krishnaswami NR, 2015, ACM SIGPLAN NOTICES, V50, P17, DOI [10.1145/2775051.2676969, 10.1145/2676726.2676969]
   Lafont Y, 2004, THEOR COMPUT SCI, V318, P163, DOI 10.1016/j.tcs.2003.10.018
   McBride Conor, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P207, DOI 10.1007/978-3-319-30936-1_12
   McCarthy Jay, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P144, DOI 10.1007/978-3-319-29604-3_10
   Moon B, 2021, LECT NOTES COMPUT SC, V12648, P462, DOI 10.1007/978-3-030-72019-3_17
   Niu Y, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498670
   Norell Ulf., 2008, Revised Lectures, P230
   Orchard D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341714
   Rajani V, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434308
   Vakar M, 2015, Arxiv, DOI arXiv:1405.0033
NR 52
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 76
DI 10.1145/3632918
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400077
OA Green Accepted, gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Kidney, DO
   Yang, ZX
   Wu, N
AF Kidney, Donnacha Oisin
   Yang, Zhixuan
   Wu, Nicolas
TI Algebraic Effects Meet Hoare Logic in Cubical Agda
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE algebraic effects; Cubical Agda; Hoare logic; program verification
ID UNIVERSAL ALGEBRA; COMPUTATION; NOTIONS
AB This paper presents a novel formalisation of algebraic effects with equations in Cubical Agda. Unlike previous work in the literature that employed setoids to deal with equations, the library presented here uses quotient types to faithfully encode the type of terms quotiented by laws. Apart from tools for equational reasoning, the library also provides an effect-generic Hoare logic for algebraic effects, which enables reasoning about effectful programs in terms of their pre- and post- conditions. A particularly novel aspect is that equational reasoning and Hoare-style reasoning are related by an elimination principle of Hoare logic.
C1 [Kidney, Donnacha Oisin; Yang, Zhixuan; Wu, Nicolas] Imperial Coll London, London, England.
C3 Imperial College London
RP Kidney, DO (corresponding author), Imperial Coll London, London, England.
EM o.kidney21@imperial.ac.uk; s.yang20@imperial.ac.uk; n.wu@imperial.ac.uk
OI Yang, Zhixuan/0000-0001-5573-3357; Wu, Nicolas/0000-0002-4161-985X
CR Abbott M, 2005, THEOR COMPUT SCI, V342, P3, DOI 10.1016/j.tcs.2005.06.002
   Abel Andreas, 2021, arXiv, DOI [10.48550/arXiv.2111.07936, DOI 10.48550/ARXIV.2111.07936]
   Aczel P, 2003, THEOR COMPUT SCI, V300, P1, DOI 10.1016/S0304-3975(02)00728-4
   Aguirre A, 2020, ELECTRON NOTES THEOR, V352, P5, DOI 10.1016/j.entcs.2020.09.002
   Ahman D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158095
   Angiuli C, 2021, MATH STRUCT COMP SCI, V31, P424, DOI 10.1017/S0960129521000347
   [Anonymous], 1981, Universal Algebra
   Awodey S, 2017, J ACM, V63, DOI 10.1145/3006383
   Bauer Andrej, 2013, Algebra and Coalgebra in Computer Science. 5th International Conference, CALCO 2013. Proceedings: LNCS 8089, P1, DOI 10.1007/978-3-642-40206-7_1
   Bauer A, 2019, Arxiv, DOI arXiv:1807.05923
   Bauer A, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:9)2014
   Biernacki Dariusz, 2017, Proceedings of the ACM on Programming Languages, V8, P1, DOI [10.1145/3158096, DOI 10.1145/3158096]
   Birkhoff G, 1935, P CAMB PHILOS SOC, V31, P433, DOI 10.1017/S0305004100013463
   Bishop Errett, 1985, Grundlehren Der Mathematischen Wissenschaften, V279, DOI [10.1007/978-3-642-61667-9, DOI 10.1007/978-3-642-61667-9]
   Bizjak A, 2016, LECT NOTES COMPUT SC, V9634, P20, DOI 10.1007/978-3-662-49630-5_2
   Brachthäuser JI, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276481
   Capretta V, 1999, LECT NOTES COMPUT SC, V1690, P131
   Cohen C., 2018, LEIBNIZ INT P INFORM, DOI [DOI 10.4230/LIPICS.TYPES.2015.5, 10.4230/LIPIcs]
   Coquand T, 2017, IEEE S LOG
   de Jong Tom, 2021, LEIBNIZ INT P INFORM, V28, P1
   DeMeo William, 2022, LEIBNIZ INT P INFORM, V239, DOI [10.4230/LIPIcs.TYPES.2021.4, DOI 10.4230/LIPICS.TYPES.2021.4]
   Fiore MP, 2022, LOG METH COMPUT SCI, V18, DOI 10.46298/LMCS-18(2:15)2022
   Frumin D, 2021, LOG METH COMPUT SCI, V17, DOI 10.46298/LMCS-17(3:9)2021
   Frumin Dan, 2018, P 7 ACM SIGPLAN INT, P201, DOI DOI 10.1145/3167085
   Gäher L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498689
   Ghica D, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563445
   Gibbons J, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P2
   Goncharov S, 2013, IEEE S LOG, P273, DOI 10.1109/LICS.2013.33
   Gratzer Daniel, 2022, arXiv, DOI DOI 10.48550/ARXIV.2210.05420
   Gunther E, 2018, ELECTRON NOTES THEOR, V338, P147, DOI 10.1016/j.entcs.2018.10.010
   Hasuo I, 2015, THEOR COMPUT SCI, V604, P2, DOI 10.1016/j.tcs.2015.03.047
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hutton G., 1998, Journal of Functional Programming, V8, P437, DOI 10.1017/S0956796898003050
   Hyland M, 2007, THEOR COMPUT SCI, V375, P20, DOI 10.1016/j.tcs.2006.12.026
   Hyland M, 2006, THEOR COMPUT SCI, V357, P70, DOI 10.1016/j.tcs.2006.03.013
   KELLY GM, 1993, J PURE APPL ALGEBRA, V89, P163, DOI 10.1016/0022-4049(93)90092-8
   Kidney Donnacha Oisin, 2023, Artefact for Algebraic Effects Meet Hoare Logic in Cubical Agda., DOI [10.5281/zenodo.8422532, DOI 10.5281/ZENODO.8422532]
   Kidney Donnacha Oisin, 2020, MRes Thesis
   Kristensen Magnus Baunsgaard, 2022, P 37 ANN ACM IEEE S, DOI [10.1145/3531130.3533359, DOI 10.1145/3531130.3533359]
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Li Y, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547632
   Liang HJ, 2016, ACM SIGPLAN NOTICES, V51, P385, DOI 10.1145/2914770.2837635
   Maillard K, 2019, Arxiv, DOI [arXiv:1903.01237, 10.1145/3341708, DOI 10.1145/3341708]
   MartinLf P., 1982, Logic, methodology and philosophy of science VI, 1979, P153, DOI [DOI 10.1016/S0049-237X(09)70189-2, 10.1016/S0049-237X(09)70189-2]
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Moggi Eugenio, 1989, Technical Report ECS-LFCS-90-113
   Piróg M, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P809, DOI 10.1145/3209108.3209166
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Plotkin G, 2008, IEEE S LOG, P118, DOI 10.1109/LICS.2008.45
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Plotkin Gordon, 2004, Electronic Notes in Theoretical Computer Science, V73, P149, DOI DOI 10.1016/J.ENTCS.2004.08.008
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rijke Egbert, 2021, The Agda-Unimath Library
   Saito A, 2022, LECT NOTES COMPUT SC, V13544, P151, DOI 10.1007/978-3-031-16912-0_6
   Schröder L, 2003, LECT NOTES COMPUT SC, V2621, P261
   Schroder L., 2002, Algebraic Methodology and Software Technology. 9th International Conference, AMAST 2002. Proceedings (Lecture Notes in Computer Science Vol.2422), P99
   Schuster P, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P566, DOI 10.1145/3519939.3523710
   Schuster P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408975
   Silver L, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434307
   Sivaramakrishnan KC, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P206, DOI 10.1145/3453483.3454039
   Song Y, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571232
   Staton S, 2015, ACM SIGPLAN NOTICES, V50, P395, DOI [10.1145/2775051.2676999, 10.1145/2676726.2676999]
   Staton S, 2013, IEEE S LOG, P519, DOI 10.1109/LICS.2013.58
   Sterling J, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P879, DOI 10.1145/3209108.3209153
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Swamy N, 2013, ACM SIGPLAN NOTICES, V48, P387, DOI 10.1145/2499370.2491978
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   van den Berg B, 2021, LECT NOTES COMPUT SC, V13008, P182, DOI 10.1007/978-3-030-89051-3_11
   Vezzosi A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341691
   Wu N, 2014, ACM SIGPLAN NOTICES, V49, P1, DOI 10.1145/2633357.2633358
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Yang ZX, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3607850
   Yang ZX, 2022, LECT NOTES COMPUT SC, V13240, P462, DOI 10.1007/978-3-030-99336-8_17
   Yoon I, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547630
   Yorgey Brent A., 2014, Ph. D. Dissertation
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
NR 79
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 56
DI 10.1145/3632898
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400057
OA gold
DA 2024-08-05
ER

PT J
AU Popescu, A
AF Popescu, Andrei
TI Nominal Recursors as Epi-Recursors
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE nominal recursion and corecursion; nominal logic; epi-(co)recuror;
   syntax with bindings; formal reasoning; theorem proving
ID BARENDREGTS VARIABLE CONVENTION; SYNTAX; SYSTEM; TREES; TERMS
AB We study nominal recursors from the literature on syntax with bindings and compare them with respect to expressiveness. The term "nominal" refers to the fact that these recursors operate on a syntax representation where the names of bound variables appear explicitly, as in nominal logic. We argue that nominal recursors can be viewed as epi-recursors, a concept that captures abstractly the distinction between the constructors on which one actually recurses, and other operators and properties that further underpin recursion. We develop an abstract framework for comparing epi-recursors and instantiate it to the existing nominal recursors, and also to several recursors obtained from them by cross-pollination. The resulted expressiveness hierarchies depend on how strictly we perform this comparison, and bring insight into the relative merits of different axiomatizations of syntax. We also apply our methodology to produce an expressiveness hierarchy of nominal corecursors, which are principles for defining functions targeting infinitary non-well-founded terms (which underlie lambda-calculus semantics concepts such as Bohm trees). Our results are validated with the Isabelle/HOL theorem prover.
C1 [Popescu, Andrei] Univ Sheffield, Sheffield, S Yorkshire, England.
C3 University of Sheffield
RP Popescu, A (corresponding author), Univ Sheffield, Sheffield, S Yorkshire, England.
EM a.popescu@sheffield.ac.uk
FU EPSRC [EP/X015114/1]
FX We thank the paper reviewers and the artifact reviewers for the careful
   reading of our paper, and for their insightful comments and suggestions,
   which have led to improvements both in the text and in the documentation
   of what has been mechanized. We gratefully acknowledge support from the
   EPSRC grant EP/X015114/1 "Safe and secure COncurrent programming for
   adVancEd aRchiTectures (COVERT)".
CR Abel Andreas, 2017, Logical Frameworks and MetaLanguages: Theory and Practice (LFMTP) 2017
   Aczel P, 2003, THEOR COMPUT SCI, V300, P1, DOI 10.1016/S0304-3975(02)00728-4
   Allais G, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P195, DOI 10.1145/3018610.3018613
   Altenkirch T, 1999, LECT NOTES COMPUT SC, V1683, P453
   Ambler S. J., 2003, 8 ACM SIGPLAN INT C, DOI DOI 10.1145/976571.976572
   Andrei Popescu, 2023, Zenodo, DOI 10.5281/ZENODO.10116628
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   Aydemir B, 2007, ELECTRON NOTES THEOR, V174, P69, DOI 10.1016/j.entcs.2007.01.028
   Baelde D, 2014, J FORMALIZ REASON, V7, P1
   Ballarin C, 2014, J AUTOM REASONING, V52, P123, DOI 10.1007/s10817-013-9284-7
   Barendregt H.P., 1985, STUDIES LOGIC FDN MA, V103
   Berghofer S, 2007, ELECTRON NOTES THEOR, V174, P53, DOI 10.1016/j.entcs.2007.01.018
   Bird R. S., 1999, Journal of Functional Programming, V9, P77, DOI 10.1017/S0956796899003366
   Blanchette JC, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290335
   BREAZUTANNEN V, 1991, LECT NOTES COMPUT SC, V510, P60
   BUNEMAN P, 1995, THEOR COMPUT SCI, V149, P3, DOI 10.1016/0304-3975(95)00024-Q
   Burris S., 1981, Graduate Texts in Mathematics, V78
   Charguéraud A, 2012, J AUTOM REASONING, V49, P363, DOI 10.1007/s10817-011-9225-2
   Chlipala A, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Copello E, 2018, ELECTRON P THEOR COM, P11, DOI 10.4204/EPTCS.274.2
   Despeyroux J., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P124, DOI 10.1007/BFb0014049
   Felty A, 2018, MATH STRUCT COMP SCI, V28, P1507, DOI 10.1017/S0960129517000093
   Felty A, 2012, J AUTOM REASONING, V48, P43, DOI 10.1007/s10817-010-9194-x
   Ferreira F, 2017, LECT NOTES COMPUT SC, V10201, P504, DOI 10.1007/978-3-662-54434-1_19
   Fiore M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P193, DOI 10.1109/LICS.1999.782615
   Gabbay M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P214, DOI 10.1109/LICS.1999.782617
   Gabbay MJ, 2008, LECT NOTES ARTIF INT, V5330, P158, DOI 10.1007/978-3-540-89439-1_11
   Ghani N., 2003, Mathematical Structures in Computer Science, V13, P349, DOI 10.1017/S0960129502003912
   Gheri L, 2020, J AUTOM REASONING, V64, P641, DOI 10.1007/s10817-019-09522-2
   Gordon A. D., 1996, Theorem Proving in Higher Order Logics. 9th International Conference, TPHOLs'96. Proceedings, P173
   GUTTAG JV, 1978, ACTA INFORM, V10, P27, DOI 10.1007/BF00260922
   Hofmann M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P204, DOI 10.1109/LICS.1999.782616
   Kaiser Jonas, 2018, P 7 ACM SIGPLAN INT, P293, DOI DOI 10.1145/3167098
   Kammüller F, 1999, LECT NOTES COMPUT SC, V1690, P149
   Kurz Alexander, 2012, Coalgebraic Methods in Computer Science. 11th International Workshop, CMCS 2012 Colocated with ETAPS 2012. Revised Selected Papers, P130, DOI 10.1007/978-3-642-32784-1_8
   Kurz A, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:20)2013
   MAKOWSKY JA, 1987, J COMPUT SYST SCI, V34, P266, DOI 10.1016/0022-0000(87)90027-4
   Matthes R, 2004, THEOR COMPUT SCI, V327, P155, DOI 10.1016/j.tcs.2004.07.025
   McKinna J, 1999, J AUTOM REASONING, V23, P373, DOI 10.1023/A:1006294005493
   Moss LS, 2001, THEOR COMPUT SCI, V260, P139, DOI 10.1016/S0304-3975(00)00126-2
   Nipkow T, 2002, LNCS, V2283, DOI [DOI 10.1007/3-540-45949-9, 10.1007/3-540-45949-9]
   Norrish M, 2004, LECT NOTES COMPUT SC, V3223, P241
   Norrish M, 2007, LECT NOTES COMPUT SC, V4732, P207
   Pfenning Frank, 1999, LNCS, V1632, P202, DOI [10.1007/3-540-48660-7_14, DOI 10.1007/3-540-48660-7_14]
   Pientka B, 2010, LECT NOTES COMPUT SC, V6009, P1, DOI 10.1007/978-3-642-12251-4_1
   Pitts AM, 2013, CAM T THEOR, V57, P1, DOI 10.1017/CBO9781139084673
   Pitts AM, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571210
   Pitts AM, 2006, J ACM, V53, P459, DOI 10.1145/1147954.1147961
   Pollack R, 2012, J AUTOM REASONING, V49, P185, DOI 10.1007/s10817-011-9229-y
   Popescu A, 2023, Arxiv, DOI arXiv:2301.00894
   Popescu A, 2023, J AUTOM REASONING, V67, DOI 10.1007/s10817-023-09672-4
   Popescu A, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P346
   Schürmann C, 2001, THEOR COMPUT SCI, V266, P1, DOI 10.1016/S0304-3975(00)00418-7
   Staton Sam, 2007, Technical Report UCAM-CL-TR-688
   Urban C, 2005, LECT NOTES ARTIF INT, V3632, P38
   Urban C, 2007, LECT NOTES ARTIF INT, V4603, P35
   Urban C, 2006, LECT NOTES ARTIF INT, V4130, P498
   Urban C, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(2:14)2012
NR 59
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 15
DI 10.1145/3632857
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400016
OA gold, Green Accepted
DA 2024-08-05
ER

PT J
AU Sundram, S
   Tariq, MU
   Kjolstad, F
AF Sundram, Shiv
   Tariq, Muhammad Usman
   Kjolstad, Fredrik
TI Compiling Recurrences over Dense and Sparse Arrays
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE recurrences; sparse tensor algebra; linear algebra; dynamic programming
ID FACTORIZATION METHODS; IJK FORMS; LANGUAGE
AB We present a framework for compiling recurrence equations into native code. In our framework, users specify a system of recurrences, the types of data structures that store inputs and outputs, and scheduling commands for optimization. Our compiler then lowers these specifications into native code that respects the dependencies in the recurrence equations. Our compiler can generate code over both sparse and dense data structures, and determines if the recurrence system is solvable with the provided scheduling primitives. We evaluate the performance and correctness of the generated code on several recurrences, from domains as diverse as dense and sparse matrix solvers, dynamic programming, graph problems, and sparse tensor algebra. We demonstrate that the generated code has competitive performance to hand-optimized implementations in libraries. However, these handwritten libraries target specific recurrences, specific data structures, and specific optimizations. Our system, on the other hand, automatically generates implementations from recurrences, data formats, and schedules, giving our system more generality than library approaches.
C1 [Sundram, Shiv; Tariq, Muhammad Usman; Kjolstad, Fredrik] Stanford Univ, POB 1212, Stanford, CA 94305 USA.
C3 Stanford University
RP Sundram, S (corresponding author), Stanford Univ, POB 1212, Stanford, CA 94305 USA.
EM shiv1@stanford.edu; kjostad@stanford.edu
OI Kjolstad, Fredrik Berg/0000-0002-2267-903X; Tariq, Muhammad
   Usman/0009-0004-1588-0271
FU DARPA; National Science Foundation [CCF-2216964]; NSF Graduate Research
   Fellowship
FX We would like to thank our anonymous reviewers for their valuable
   feedback, comments, and insights on improving this manuscript. We wish
   to thank Scott Kovach for valuable discussions on recursive computations
   and for extensive comments on an early draft of the paper. We also thank
   Olivia Hsu, Rohan Yadav, Nathan Zhang, Matthew Sotoudeh, Manya Bansal,
   AJ Root, Rubens Lacouture, Bobby Yan, James Dong, and Alexander Rucker
   for their comments on an early draft. This work was supported in part by
   PRISM, one of seven centers in JUMP 2.0, a Semiconductor Research
   Corporation (SRC) program sponsored by DARPA. This work was in part
   supported by the National Science Foundation under Grant CCF-2216964.
   Shiv Sundram was supported by an NSF Graduate Research Fellowship.
CR Bellman R., 2010, Dynamic programming. Princeton landmarks in mathematics
   Bik A, 2022, ACM T ARCHIT CODE OP, V19, DOI 10.1145/3544559
   Boost, 2002, The Boost Graph Library: User Guide and Reference Manual
   Chaurasia Gaurav, 2015, P 7 C HIGH PERF GRAP, P85
   Cheshmi K, 2017, SC'17: PROCEEDINGS OF THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, DOI 10.1145/3126908.3126936
   Chou S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276493
   Davis T. A., 2006, CXSparse: a Concise eXtended Sparse Matrix Package
   Davis TA, 2006, FUND ALGORITHMS, V2, P1, DOI 10.1137/1.9780898718881
   Eisner Jason, 2004, ANN M ASS COMP LING
   FEAUTRIER P, 1991, INT J PARALLEL PROG, V20, P23, DOI 10.1007/BF01407931
   Gautam, 2006, ACM SIGPLAN NOTICES, V41, P30, DOI 10.1145/1111320.1111041
   GILBERT JR, 1994, SIAM J MATRIX ANAL A, V15, P62, DOI 10.1137/S0895479887139455
   Gunnels JA, 2001, ACM T MATH SOFTWARE, V27, P422, DOI 10.1145/504210.504213
   Henry R, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485505
   Huang Liang, 2008, COL 2008 ADV DYN PRO, P1
   KARP RM, 1967, J ACM, V14, P563, DOI 10.1145/321406.321418
   Kepner J., 2016, IEEE HIGH PERFORMANC, P1
   Kjolstad F, 2019, INT SYM CODE GENER, P180, DOI [10.1109/CGO.2019.8661185, 10.1109/cgo.2019.8661185]
   Kjolstad F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133901
   Kjolstad Fredrik Berg, 2020, Sparse tensor algebra compilation
   Kowalski Robert, 2003, Encyclopedia of Computer Science, P1017
   LAMPORT L, 1974, COMMUN ACM, V17, P83, DOI 10.1145/360827.360844
   Lehman R Sherman, 1960, Technical Report
   LIU JWH, 1992, SIAM REV, V34, P82, DOI 10.1137/1034004
   LIU JWH, 1986, ACM T MATH SOFTWARE, V12, P127, DOI 10.1145/6497.6499
   Menon V, 2004, INT J PARALLEL PROG, V32, P501, DOI 10.1023/B:IJPP.0000042084.99636.a0
   NG E, 1993, SIAM J SCI COMPUT, V14, P761, DOI 10.1137/0914048
   ORTEGA JM, 1988, PARALLEL COMPUT, V7, P135, DOI 10.1016/0167-8191(88)90035-X
   ORTEGA JM, 1988, PARALLEL COMPUT, V7, P149, DOI 10.1016/0167-8191(88)90036-1
   Pouchet Louis-Noel, 2016, PolyBench
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Ricci G., 1901, Math. Ann., V54, P125
   Sauthoff G, 2013, BIOINFORMATICS, V29, P551, DOI 10.1093/bioinformatics/btt022
   Senanayake R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428226
   Strout MM, 2018, P IEEE, V106, P1921, DOI 10.1109/JPROC.2018.2857721
   Sundram Shiv, 2024, Zenodo, DOI 10.5281/ZENODO.10774458
   Tian RQ, 2021, PROCEEDINGS OF THE SEVENTH ANNUAL WORKSHOP ON THE LLVM COMPILER INFRASTRUCTURE IN HPC (LLVM-HPC2021), P27, DOI 10.1109/LLVMHPC54804.2021.00009
   VITERBI AJ, 1967, IEEE T INFORM THEORY, V13, P260, DOI 10.1109/TIT.1967.1054010
   Yang C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434301
   Ye Zihao, 2023, ASPLOS 2023: Proceedings of the 28th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, P660, DOI 10.1145/3582016.3582047
NR 40
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 103
DI 10.1145/3649820
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600010
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Ang, ZD
   Mathur, U
AF Ang, Zhendong
   Mathur, Umang
TI Predictive Monitoring against Pattern Regular Languages
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrency; dynamic analysis; predictive monitoring; complexity
ID TEMPORAL LOGIC; RACE DETECTION; COMPLEXITY; ATOMICITY; SOUND; TIME
AB While current bug detection techniques for concurrent software focus on unearthing low-level issues such as data races or deadlocks, they often fall short of discovering more intricate temporal behaviours that can arise even in the absence of such low-level issues. In this paper, we focus on the problem of dynamically analysing concurrent software against high-level temporal specifications such as LTL. Existing techniques for runtime monitoring against such specifications are primarily designed for sequential software and remain inadequate in the presence of concurrency - violations may be observed only in intricate thread interleavings, requiring many re-runs of the underlying software in conjunction with the analysis. Towards this, we study the problem of predictive runtime monitoring, inspired by the analogous problem of predictive data race detection studied extensively recently. The predictive runtime monitoring question asks, given an execution sigma, if it can be soundly reordered to expose violations of a specification. In general, this problem may become easily intractable when either the specifications or the notion of reorderings used is complex.
   In this paper, we focus on specifications that are given in regular languages. Our notion of reorderings is trace equivalence, where an execution is considered a reordering of another if it can be obtained from the latter by successively commuting adjacent independent actions. We first show that, even in this simplistic setting, the problem of predictive monitoring admits a super-linear lower bound of O(n(alpha)), where n is the number of events in the execution, and alpha is a parameter describing the degree of commutativity, and typically corresponds to the number of threads in the execution. As a result, predictive runtime monitoring even in this setting is unlikely to be efficiently solvable, unlike in the non-predictive setting where the problem can be checked using a deterministic finite automaton (and thus, a constant-space streaming linear-time algorithm).
   Towards this, we identify a sub-class of regular languages, called pattern languages (and their extension generalized pattern languages). Pattern languages can naturally express specific ordering of some number of (labelled) events, and have been inspired by popular empirical hypotheses underlying many concurrency bug detection approaches such as the "small bug depth" hypothesis. More importantly, we show that for pattern (and generalized pattern) languages, the predictive monitoring problem can be solved using a constant-space streaming linear-time algorithm. We implement and evaluate our algorithm PATTERNTRACK on benchmarks from the literature and show that it is effective in monitoring large-scale applications.
C1 [Ang, Zhendong; Mathur, Umang] Natl Univ Singapore, Singapore, Singapore.
C3 National University of Singapore
RP Ang, ZD (corresponding author), Natl Univ Singapore, Singapore, Singapore.
EM zhendong.ang@u.nus.edu; umathur@comp.nus.edu.sg
OI Ang, Zhendong/0009-0002-0214-3462; Mathur, Umang/0000-0002-7610-0660
FU Singapore Ministry of Education (MoE) Academic Research Fund (AcRF) Tier
   1 grant
FX We thank the anonymous reviewers for several comments that helped
   improve the paper. We thank Vladimir Gladshtein and Martin Mirchev for
   initial discussions, and Georg Zetzsche for pointing us to the
   connection with the work of Edward Ochmanski on star-connected
   languages. This work was partially supported by a Singapore Ministry of
   Education (MoE) Academic Research Fund (AcRF) Tier 1 grant.
CR Abdulla P, 2014, ACM SIGPLAN NOTICES, V49, P373, DOI 10.1145/2535838.2535845
   Abdulla PA, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1117, DOI 10.1145/3314221.3314649
   Agarwal U, 2021, 2021 36TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING ASE 2021, P679, DOI 10.1109/ASE51524.2021.9678838
   AGRAWAL R, 1995, PROC INT CONF DATA, P3, DOI 10.1109/ICDE.1995.380415
   Alur R, 2004, LECT NOTES COMPUT SC, V2988, P467
   Ang Z, 2024, Arxiv, DOI arXiv:2310.14611
   Ang Zhendong, 2023, Predictive Monitoring against Pattern Regular Languages, DOI DOI 10.5281/ZENODO.8424626
   [Anonymous], 2023, AntLRWorks
   [Anonymous], 2023, Logstash Logback Encoder
   [Anonymous], 2023, exp4j
   [Anonymous], 2013, Runtime Verification, DOI DOI 10.1007/978-3-642
   [Anonymous], 2023, ZeroMQ log4j appender
   [Anonymous], 2023, JFreeChart
   Artho C, 2003, SOFTW TEST VERIF REL, V13, P207, DOI 10.1002/stvr.281
   Bensalem S, 2006, LECT NOTES COMPUT SC, V3875, P208
   BERTONI A, 1989, INFORM COMPUT, V82, P135, DOI 10.1016/0890-5401(89)90051-5
   Biswas S, 2014, ACM SIGPLAN NOTICES, V49, P28, DOI [10.1145/2594291.2594323, 10.1145/2666356.2594323]
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Blackshear S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276514
   Bouajjani A, 2001, IEEE S LOG, P399, DOI 10.1109/LICS.2001.932515
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Burckhardt S, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P167
   Cai Y, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P255, DOI 10.1145/3468264.3468549
   Cai Y, 2020, PROC INT CONF SOFTW, P1298, DOI 10.1145/3377811.3380367
   Calabro C, 2009, LECT NOTES COMPUT SC, V5917, P75, DOI 10.1007/978-3-642-11269-0_6
   Chen F, 2007, LECT NOTES COMPUT SC, V4590, P240
   Chen F, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P221, DOI 10.1145/1368088.1368119
   Chistikov D, 2016, LECT NOTES COMPUT SC, V9780, P157, DOI 10.1007/978-3-319-41540-6_9
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Emmi M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P411, DOI 10.1145/1926385.1926432
   Engler D., 2003, Operating Systems Review, V37, P237, DOI 10.1145/1165389.945468
   Farzan A, 2008, LECT NOTES COMPUT SC, V5123, P52
   Farzan A, 2009, LECT NOTES COMPUT SC, V5505, P155, DOI 10.1007/978-3-642-00768-2_14
   Farzan Azadeh, 2012, P ACM SIGSOFT 20 INT, P47, DOI [10.1145/2393596.2393651, DOI 10.1145/2393596.2393651]
   FIDGE C, 1991, COMPUTER, V24, P28, DOI 10.1109/2.84874
   Flanagan C, 2005, ACM SIGPLAN NOTICES, V40, P110, DOI 10.1145/1047659.1040315
   Flanagan C, 2003, ACM SIGPLAN NOTICES, V38, P338, DOI 10.1145/780822.781169
   Flanagan C, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1377492.1377495
   Flanagan C, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P121, DOI 10.1145/1542476.1542490
   Flanagan C, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P293, DOI 10.1145/1375581.1375618
   Flann C., 2010, Addressing global change: a new agenda for botanic gardens. Fourth Global Botanic Gardens Congress, Dublin, Irish Republic, 13-18 June 2010, P1, DOI 10.1145/1806672.1806674
   Gao MY, 2023, PROCEEDINGS OF THE 28TH ACM INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, VOL 2, ASPLOS 2023, P603, DOI 10.1145/3575693.3575729
   Giacomo G.D., 2013, P 23 INT JOINT C ART, P854
   Gibbons PB, 1997, SIAM J COMPUT, V26, P1208, DOI 10.1137/S0097539794279614
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Huang J, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P609, DOI 10.1145/3180155.3180225
   Huang J, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P847, DOI 10.1109/ICSE.2015.96
   Huang J, 2014, ACM SIGPLAN NOTICES, V49, P337, DOI [10.1145/2666356.2594315, 10.1145/2594291.2594315]
   Itzkovitz A, 1999, J PARALLEL DISTR COM, V59, P180, DOI 10.1006/jpdc.1999.1574
   Jeong DR, 2019, P IEEE S SECUR PRIV, P754, DOI 10.1109/SP.2019.00017
   Jin D, 2012, PROC INT CONF SOFTW, P1427, DOI 10.1109/ICSE.2012.6227231
   Joshi P, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P110, DOI 10.1145/1542476.1542489
   Kalhauge CG, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276516
   Kasikci B, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P582, DOI 10.1145/3132747.3132767
   Kim M, 2004, FORM METHOD SYST DES, V24, P129, DOI 10.1023/B:FORM.0000017719.43755.7c
   Kini D, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P26, DOI 10.1145/3236024.3236025
   Kini D, 2017, ACM SIGPLAN NOTICES, V52, P157, DOI [10.1145/3140587.3062374, 10.1145/3062341.3062374]
   Kokologiannakis M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498711
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   KOYMANS R, 1990, REAL-TIME SYST, V2, P255, DOI 10.1007/BF01995674
   Kulkarni Rucha, 2021, 32 INT C CONC THEOR, V16, P1
   Legunsen O, 2016, IEEE INT CONF AUTOM, P602, DOI 10.1145/2970276.2970356
   Maler O, 2004, LECT NOTES COMPUT SC, V3253, P152, DOI 10.1007/978-3-540-30206-3_12
   Mathur U, 2022, ASPLOS '22: PROCEEDINGS OF THE 27TH ACM INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P710, DOI 10.1145/3503222.3507734
   Mathur U, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276515
   Mathur U, 2020, IEEE S LOG, P713, DOI 10.1145/3373718.3394783
   Mathur U, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434317
   Mathur U, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P183, DOI 10.1145/3373376.3378475
   Mattern F., 1989, Parallel and Distributed Algorithms. Proceedings of the International Workshop, P215
   MAZURKIEWICZ A, 1987, LECT NOTES COMPUT SC, V255, P279
   McNaughton Robert., 1971, Counter-Free Automata
   Meredith PO, 2010, AUTOMAT SOFTW ENG, V17, P149, DOI 10.1007/s10515-010-0063-y
   Murali V, 2021, 2021 IEEE/ACM 43RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2021), P288, DOI 10.1109/ICSE-SEIP52600.2021.00038
   Musuvathi M, 2007, LECT NOTES COMPUT SC, V4407, P15, DOI 10.1007/978-3-540-71410-1_2
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Oberhauser J, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P530, DOI 10.1145/3445814.3446748
   Ochmanski E., 1985, Bulletin of the European Association for Theoretical Computer Science, P56
   Ozkan BK, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360606
   Pavlogiannis A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371085
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Poznianski Eli, 2003, 17 INT PARALLEL DIST, P287, DOI DOI 10.1109/IPDPS.2003.1213513
   Roemer J, 2019, Arxiv, DOI arXiv:1907.08337
   Roemer J, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P747, DOI 10.1145/3385412.3385993
   Roemer J, 2018, ACM SIGPLAN NOTICES, V53, P374, DOI [10.1145/3296979.3192385, 10.1145/3192366.3192385]
   Rosu G., 2005, Automated Software Engineering, V12, P151, DOI 10.1007/s10515-005-6205-y
   Rosu G, 2003, LECT NOTES COMPUT SC, V2706, P499
   Sadowski C, 2018, COMMUN ACM, V61, P58, DOI 10.1145/3188720
   Said M, 2011, LECT NOTES COMPUT SC, V6617, P313, DOI 10.1007/978-3-642-20398-5_23
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   SCHUTZENBERGER MP, 1965, INFORM CONTROL, V8, P190, DOI 10.1016/S0019-9958(65)90108-7
   Sen K, 2005, LECT NOTES COMPUT SC, V3535, P211
   Sen Koushik, 2003, Electronic Notes in Theoretical Computer Science, V89, P226, DOI [DOI 10.1016/S1571-0661(04)81051-XRV'2003, 10.1016/S1571-0661(04)81051-X, DOI 10.1016/S1571-0661(04)81051-X]
   Serebryany Konstantin, 2009, Proceedings of the Workshop on Binary Instrumentation and Applications, P62, DOI [DOI 10.1145/1791194.1791203, 10.1145/1791194.1791203]
   Sinha Arnab, 2011, Revised Selected Papers (Lecture Notes in Computer Science, V7261, P95, DOI [10.1007/978-3-642-34188-5_11, DOI 10.1007/978-3-642-34188-5_11]
   Smaragdakis Y, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P387
   Smith L. A., 2001, P 2001 ACMIEEE C SUP, P8, DOI [10.1145/582034.582042, DOI 10.1145/582034.582042]
   Sorrentino Francesco, 2010, INT S FDN SOFTWARE E, p37s46, DOI [10.1145/1882291.1882300, DOI 10.1145/1882291.1882300]
   Tunç HC, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591291
   Umang Mathur, 2023, RAPID
   Vaziri M, 2006, ACM SIGPLAN NOTICES, V41, P334, DOI 10.1145/1111320.1111067
   Voung J., 2007, P 6 JOINT M EUR SOFT, P205, DOI DOI 10.1145/1287624.1287654
   Williams V.V., 2019, P ICM, P3447, DOI DOI 10.1142/9789813272880_0188
   Yuan XH, 2018, LECT NOTES COMPUT SC, V10982, P317, DOI 10.1007/978-3-319-96142-2_20
NR 103
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 73
DI 10.1145/3632915
PG 35
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400074
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Liu, YY
   Chan, J
   Shi, J
   Weirich, S
AF Liu, Yiyun
   Chan, Jonathan
   Shi, Jessica
   Weirich, Stephanie
TI Internalizing Indistinguishability with Dependent Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Modes; Dependent Types; Coq; Formalization
AB In type systems with dependency tracking, programmers can assign an ordered set of levels to computations and prevent information flow from high-level computations to the low-level ones. The key notion in such systems is indistinguishability: a definition of program equivalence that takes into account the parts of the program that an observer may depend on. In this paper, we investigate the use of dependency tracking in the context of dependently-typed languages. We present the Dependent Calculus of Indistinguishability (DCOI), a system that adopts indistinguishability as the definition of equality used by the type checker. DCOI also internalizes that relation as an observer-indexed propositional equality type, so that programmers may reason about indistinguishability within the language. Our design generalizes and extends prior systems that combine dependency tracking with dependent types and is the first to support conversion and propositional equality at arbitrary observer levels. We have proven type soundness and noninterference theorems for DCOI and have developed a prototype implementation of its type checker.
C1 [Liu, Yiyun; Chan, Jonathan; Shi, Jessica; Weirich, Stephanie] Univ Penn, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Liu, YY (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM liuyiyun@seas.upenn.edu; jcxz@seas.upenn.edu; jwshi@seas.upenn.edu;
   sweirich@seas.upenn.edu
FU National Science Foundation [2006535, 2327738]
FX The authors would like to thank the anonymous reviewers for their
   comments and suggestions. This work was supported by the National
   Science Foundation under Grant Nos. 2006535 and 2327738.
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Abel A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408972
   Abel A, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(1:29)2012
   Annenkov D, 2023, MATH STRUCT COMP SCI, V33, P688, DOI 10.1017/S0960129523000130
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Barendregt H., 1991, Journal of Functional Programming, V1, P125
   Barendregt Henk P., 1993, Lambda Calculi with Types, V117, P309
   Brady Edwin C., 2005, Practical implementation of a dependently typed functional programming language
   Brady Edwin C., 2021, 35 EUROPEAN C OBJEC, V9, DOI [10.4230/LIPIcs.ECOOP.2021.9, DOI 10.4230/LIPICS.ECOOP.2021.9]
   Choudhury P, 2022, LECT NOTES COMPUT SC, V13240, P403, DOI 10.1007/978-3-030-99336-8_15
   Choudhury P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434331
   COQUAND T, 1990, LECT NOTES COMPUT SC, V417, P50
   de Bruijn Nicolaas Govert, 1994, Studies in Logic and the Foundations of Mathematics, V133, P283
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   Eisenberg Richard A., 2021, PROC ACM PROGRA, V5, DOI [10.1145/3473569DistinguishedPaperAward, DOI 10.1145/3473569DISTINGUISHEDPAPERAWARD]
   Gilbert G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290316
   Girard Jean-Yves, 1972, Ph. D. Dissertation
   Hatcliff J., 1997, Mathematical Structures in Computer Science, V7, P507, DOI 10.1017/S0960129597002405
   Kovács A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547641
   Liu Yiyun, 2023, Artifact associated with Internalizing Indistinguishability with Dependent Types, DOI [10.1145/3580424, DOI 10.1145/3580424]
   Martin-Lof Per, 1975, Studies in Logic and the Foundations of Mathematics, V80, P73, DOI [10.1016/S0049-237X(08)71945-1, DOI 10.1016/S0049-237X(08)71945-1]
   McBride Conor, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P207, DOI 10.1007/978-3-319-30936-1_12
   Miquel A, 2001, LECT NOTES COMPUT SC, V2044, P344
   Mishra-Linger N, 2008, LECT NOTES COMPUT SC, V4962, P350, DOI 10.1007/978-3-540-78499-9_25
   Moon B, 2021, LECT NOTES COMPUT SC, V12648, P462, DOI 10.1007/978-3-030-72019-3_17
   PAULINMOHRING C, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P89, DOI 10.1145/75277.75285
   Pfenning F, 2001, IEEE S LOG, P221, DOI 10.1109/LICS.2001.932499
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sheard Tim, 2018, OHSUDC, V4.0, DOI 10.6083/W95050724
   Shikuma N, 2008, LOG METH COMPUT SCI, V4, DOI 10.2168/LMCS-4(3:10)2008
   Sterling J, 2021, J ACM, V68, DOI 10.1145/3474834
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   Tse S, 2004, ACM SIGPLAN NOTICES, V39, P115, DOI 10.1145/1016848.1016868
NR 33
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 44
DI 10.1145/3632886
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400045
OA gold
DA 2024-08-05
ER

PT J
AU Alshnakat, A
   Lundberg, D
   Guanciale, R
   Dam, M
AF Alshnakat, Anoud
   Lundberg, Didrik
   Guanciale, Roberto
   Dam, Mads
TI HOL4P4: Mechanized Small-Step Semantics for P4
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE P4; programming language semantics; interactive theorem proving; formal
   verification
AB We present the first semantics of the network data plane programming language P4 able to adequately capture all key features of P4(16), the most recent version of P4, including external functions (externs) and concurrency. These features are intimately related since, in P4, extern invocations are the only points at which one execution thread can affect another. Reflecting P4's lack of a general-purpose memory and the presence of multithreading the semantics is given in small-step style and eschews the use of a heap. In addition to the P4 language itself, we provide an architectural level semantics, which allows the composition of P4-programmed blocks, models end-to-end packet processing, and can take into account features such as arbitration and packet recirculation. A corresponding type system is provided with attendant progress, preservation, and type-soundness theorems. Semantics, type system, and meta-theory are formalized in the HOL4 theorem prover. From this formalization, we derive a HOL4 executable semantics that supports verified execution of programs with partially symbolic packets able to validate simple end-to-end program properties.
C1 [Alshnakat, Anoud; Lundberg, Didrik; Guanciale, Roberto; Dam, Mads] KTH Royal Inst Technol, Stockholm, Sweden.
   [Lundberg, Didrik] Saab AB, Jarfalla, Sweden.
C3 Royal Institute of Technology; Saab Group
RP Alshnakat, A (corresponding author), KTH Royal Inst Technol, Stockholm, Sweden.
EM anoud@kth.se; didrikl@kth.se; robertog@kth.se; mfd@kth.se
FU Swedish Foundation for Strategic Research; VINNOVA foundation;
   Wallenberg AI, Autonomous Systems and Software Program (WASP) - Knut and
   Alice Wallenberg Foundation
FX This work has been partially supported by the TrustFull project financed
   by the Swedish Foundation for Strategic Research, by the SEMLA project
   financed by the VINNOVA foundation, and by the Wallenberg AI, Autonomous
   Systems and Software Program (WASP) funded by the Knut and Alice
   Wallenberg Foundation.
CR Alshnakat Anoud, 2024, Zenodo, DOI 10.5281/ZENODO.10796440
   Alshnakat Anoud, 2024, HOL4P4
   Bosshart P, 2014, ACM SIGCOMM COMP COM, V44, P87, DOI 10.1145/2656877.2656890
   Courtieu Pierre., 2013, Proceedings of the 2013 ACM SIGAda annual conference on High integrity language technology, HILT 2013, Pittsburgh, Pennsylvania, USA, November 10-14, 2013, P21, DOI [10.1145/2658982.2527278, DOI 10.1145/2658982.2527278]
   Doenges R, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P950, DOI 10.1145/3519939.3523715
   Doenges R, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434322
   Dross C, 2020, LECT NOTES COMPUT SC, V12225, P178, DOI 10.1007/978-3-030-53291-8_11
   Eichholz M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498701
   Eichholz Matthias, 2019, 33 EUR C OBJ OR PROG, DOI [10.4230/LIPIcs.ECOOP.2019.12, DOI 10.4230/LIPICS.ECOOP.2019.12]
   Freire L, 2018, PROCEEDINGS OF THE SYMPOSIUM ON SDN RESEARCH (SOSR'18), DOI 10.1145/3185467.3185499
   Grewal K, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P46, DOI 10.1145/3519939.3523717
   Jaloyan Georges-Axel, 2020, Formal Methods and Software Engineering. 22nd International Conference on Formal Engineering Methods, ICFEM 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12531), P55, DOI 10.1007/978-3-030-63406-3_4
   Kheradm A, 2018, Arxiv, DOI [arXiv:1804.01468, 10.48550/arXiv.1804.01468, DOI 10.48550/ARXIV.1804.01468]
   Liu J, 2018, PROCEEDINGS OF THE 2018 CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '18), P490, DOI 10.1145/3230543.3230582
   Lopes Nuno., 2016, Automatically verifying reachability and well-formedness in p4 networks
   Maalej M, 2018, LECT NOTES COMPUT SC, V10873, P37, DOI 10.1007/978-3-319-92432-8_3
   Marsh William, 1994, Formal semantics of SPARK
   Nötzli A, 2018, PROCEEDINGS OF THE SYMPOSIUM ON SDN RESEARCH (SOSR'18), DOI 10.1145/3185467.3185497
   p4c contributors, 2021, P4-16 declaration of the P4 v1.0 switch model
   Peterson R, 2023, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP 2023, P303, DOI 10.1145/3573105.3575670
   Ruffy Fabian, 2023, ACM SIGCOMM '23: Proceedings of the ACM SIGCOMM 2023 Conference, P136, DOI 10.1145/3603269.3604834
   Sewell P, 2010, J FUNCT PROGRAM, V20, P71, DOI 10.1017/S0956796809990293
   Shukla A, 2020, IEEE J SEL AREA COMM, V38, P1293, DOI 10.1109/JSAC.2020.2999653
   Stoenescu R, 2016, PROCEEDINGS OF THE 2016 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '16), P314, DOI 10.1145/2934872.2934881
   The P4 Language Consortium, 2023, P416 Language Specification
   The P4.org Architecture Working Group, 2018, P416 Portable Switch Architecture (PSA)
   Tian BC, 2021, SIGCOMM '21: PROCEEDINGS OF THE 2021 ACM SIGCOMM 2021 CONFERENCE, P17, DOI 10.1145/3452296.3472937
   Wang Shengyi, 2023, 14 INT C INT THEOR P, V268, P1, DOI [10.4230/LIPIcs.ITP.2023.32, DOI 10.4230/LIPICS.ITP.2023.32]
   Yaseen N, 2022, Arxiv, DOI [arXiv:2207.13147, 10.48550/arXiv.2207.13147, DOI 10.48550/ARXIV.2207.13147]
   Zhi Zhang, 2017, Software Engineering and Formal Methods. 15th International Conference, SEFM 2017. Proceedings: Lecture Notes in Computer Society (LNCS 10469), P17, DOI 10.1007/978-3-319-66197-1_2
NR 30
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 102
DI 10.1145/3649819
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600009
OA gold
DA 2024-08-05
ER

PT J
AU Chen, Q
   Yu, C
   Liu, R
   Zhang, C
   Wang, Y
   Wang, K
   Su, T
   Wang, L
AF Chen, Qian
   Yu, Chenyang
   Liu, Ruyan
   Zhang, Chi
   Wang, Yu
   Wang, Ke
   Su, Ting
   Wang, Linzhang
TI Evaluating the Effectiveness of Deep Learning Models for Foundational
   Program Analysis Tasks
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Deep Learning; Alias Analysis; Equivalence Checking
ID TRANSLATION VALIDATION; CODE
AB While deep neural networks provide state-of-the-art solutions to a wide range of programming language tasks, their effectiveness in dealing with foundational program analysis tasks remains under explored. In this paper, we present an empirical study that evaluates four prominent models of code (i.e., CuBERT, CodeBERT, GGNN, and Graph Sandwiches) in two such foundational tasks: (1) alias prediction, in which models predict whether two pointers must alias, may alias or must not alias; and (2) equivalence prediction, in which models predict whether or not two programs are semantically equivalent. At the core of this study is CodeSem, a dataset built upon the source code of real-world flagship software (e.g., Linux Kernel, GCC, MySQL) and manually validated for the two prediction tasks. Results show that all models are accurate in both prediction tasks, especially CuBERT with an accuracy of 89% and 84% in alias prediction and equivalence prediction, respectively. We also conduct a comprehensive, in-depth analysis of the results of all models in both tasks, concluding that deep learning models are generally capable of performing foundational tasks in program analysis even though in specific cases their weaknesses are also evident.
   Our code and evaluation data are publicly available at https://github.com/CodeSemDataset/CodeSem.
C1 [Chen, Qian; Yu, Chenyang; Liu, Ruyan; Zhang, Chi; Wang, Yu; Wang, Linzhang] Nanjing Univ, Dept Comp Sci & Technol, State Key Lab Novel Software Technol, Nanjing, Peoples R China.
   [Wang, Ke] Visa Res, Palo Alto, CA 94306 USA.
   [Su, Ting] East China Normal Univ, Inst Software Engn, Shanghai Key Lab Trustworthy Comp, Shanghai, Peoples R China.
C3 Nanjing University; East China Normal University
RP Wang, Y (corresponding author), Nanjing Univ, Dept Comp Sci & Technol, State Key Lab Novel Software Technol, Nanjing, Peoples R China.; Wang, K (corresponding author), Visa Res, Palo Alto, CA 94306 USA.
EM qc@smail.nju.edu.cn; mf21330109@smail.nju.edu.cn;
   mf21330053@smail.nju.edu; zhangchi_seg@smail.nju.edu.cn;
   yuwang_cs@nju.edu.cn; kewang@visa.com; tsu@sei.ecnu.edu.cn;
   lzwang@nju.edu.cn
OI Wang, Linzhang/0000-0003-4794-1652
FU National Natural Science Foundation of China [62232001, 62032010,
   62202220, 62172200]; Collaborative Innovation Center of Novel Software
   Technology and Industrialization, Jiangsu Funding Program for Excellent
   Postdoctoral Talent; Fundamental Research Funds for the Central
   Universities [2023300180]; Leading-edge Technology Program of Jiangsu
   Natural Science Foundation [BK20202001]
FX The authors would like to thank the anonymous reviewers for their
   comments and suggestions. This work was partially supported by the
   National Natural Science Foundation of China under Grant No. 62232001,
   No. 62032010, No. 62202220, and No. 62172200, the Collaborative
   Innovation Center of Novel Software Technology and Industrialization,
   Jiangsu Funding Program for Excellent Postdoctoral Talent, the
   Fundamental Research Funds for the Central Universities (No.
   2023300180), and the Leading-edge Technology Program of Jiangsu Natural
   Science Foundation (No. BK20202001).
CR Allamanis Miltiadis, 2018, INT C LEARNING REPRE
   Alon U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290353
   Altucher R. Z., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P74, DOI 10.1145/199448.199466
   [Anonymous], 1986, Learning internal representations by error propagation
   Badihi S, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P13, DOI 10.1145/3368089.3409757
   Balatsouras George, 2017, P 6 ACM SIGPLAN INT, P7, DOI [10.1145/3088515.3088517, DOI 10.1145/3088515.3088517]
   Bengio J., 2009, Proceedings of the 26th Annual International Conference on Machine Learning, P41
   Cao JM, 2022, PROCEEDINGS OF THE 30TH ACM JOINT MEETING EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, ESEC/FSE 2022, P357, DOI 10.1145/3540250.3549123
   Chen Wenhu, 2020, arXiv, DOI [10.48550/arXiv.1909, DOI 10.48550/ARXIV.1909]
   Chen ZM, 2021, IEEE T SOFTWARE ENG, V47, P1943, DOI 10.1109/TSE.2019.2940179
   Cho K., 2014, P 2014 C EMP METH NA, DOI 10.3115/v1/D14-1179
   Churchill B, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P313
   Churchill B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1027, DOI 10.1145/3314221.3314596
   Clark K, 2020, INFORM SYST RES, DOI 10.48550/arXiv.2003.10555
   Dahiya M, 2017, LECT NOTES COMPUT SC, V10695, P127, DOI 10.1007/978-3-319-71237-6_7
   Devlin Jacob, 2019, P 2019 C N AM CHAPT, V1, P4171
   Dinella Elizabeth, 2019, INT C LEARN RERP ICL
   Felsing D, 2014, P 29 ACM IEEE INT C, P349, DOI [10.1145/2642937.2642987, DOI 10.1145/2642937.2642987]
   Feng ZY, 2020, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2020, P1536
   FERRANTE J, 1987, ACM T PROGR LANG SYS, V9, P319, DOI 10.1145/24039.24041
   Fink Stephen., 2006, INT S SOFTWARE TESTI, P133, DOI [DOI 10.1145/1146238.1146254, 10.1145/1146238.1146254]
   Golubev Y, 2021, 2021 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2021), P496, DOI 10.1109/SANER50967.2021.00053
   Guo WB, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1787
   Gupta S, 2018, LECT NOTES COMPUT SC, V10929, P365, DOI 10.1007/978-3-319-94144-8_22
   Hardekopf B, 2009, ACM SIGPLAN NOTICES, V44, P226, DOI 10.1145/1594834.1480911
   Hellendoorn V. J., 2020, INT C LEARN REPR
   Horwitz S, 1997, ACM T PROGR LANG SYS, V19, P1, DOI 10.1145/239912.239913
   HORWITZ S, 1990, SIGPLAN NOTICES, V25, P234, DOI 10.1145/93548.93574
   Hu W., 2020, ICLR
   Jiang LX, 2007, PROC INT CONF SOFTW, P96
   Jiang LX, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P81
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Kanade A, 2020, PR MACH LEARN RES, V119
   Kastrinis G, 2018, CC'18: PROCEEDINGS OF THE 27TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P48, DOI 10.1145/3178372.3179519
   Kitaev N., 2020, PROC INT C LEARN REP
   Kommrusch S, 2023, IEEE T SOFTWARE ENG, V49, P3771, DOI 10.1109/TSE.2023.3271065
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/cgo.2004.1281665
   Lattner Chris, 2008, BSD C, V5
   Liu JH, 2023, PROC INT CONF SOFTW, P345, DOI 10.1109/ICSE48619.2023.00040
   Lu S, 2021, Arxiv, DOI arXiv:2102.04664
   Martinez-Cantin R, 2014, Arxiv, DOI arXiv:1405.7430
   Mou LL, 2016, AAAI CONF ARTIF INTE, P1287
   Necula GC, 2000, ACM SIGPLAN NOTICES, V35, P83, DOI 10.1145/358438.349314
   Pantiuchina J, 2022, ACM T SOFTW ENG METH, V31, DOI 10.1145/3487062
   Phulia A, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P839, DOI 10.1145/3385412.3385962
   Prechelt L, 1998, LECT NOTES COMPUT SC, V1524, P55
   Puri R., 2021, arXiv
   Ramos David A., 2011, P 23 INT C COMP AID, P669, DOI [DOI 10.1007/978-3-642-22110-1_55, 10.1007/978-3-642]
   Ribeiro MT, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P1135, DOI 10.1145/2939672.2939778
   Roy CK, 2009, SCI COMPUT PROGRAM, V74, P470, DOI 10.1016/j.scico.2009.02.007
   Sajnani H, 2016, PROC INT CONF SOFTW, P1157, DOI 10.1145/2884781.2884877
   Schkufza E, 2013, ACM SIGPLAN NOTICES, V48, P305, DOI 10.1145/2499368.2451150
   Sennrich R, 2016, PROCEEDINGS OF THE 54TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, VOL 1, P1715
   Sewell T, 2013, ACM SIGPLAN NOTICES, V48, P471, DOI 10.1145/2499370.2462183
   Sharma R, 2013, ACM SIGPLAN NOTICES, V48, P391, DOI [10.1145/2509136.2509509, 10.1145/2544173.2509509]
   Shi QK, 2018, ACM SIGPLAN NOTICES, V53, P693, DOI 10.1145/3192366.3192418
   Si XJ, 2018, ADV NEUR IN, V31
   Sridharan Manu, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P196, DOI 10.1007/978-3-642-36946-9_8
   Sridharan M, 2006, ACM SIGPLAN NOTICES, V41, P387, DOI 10.1145/1133981.1134027
   Stoltz E., 1994, Proceedings of the Twenty-Seventh Hawaii International Conference on System Sciences. Vol.II: Software Technology (Cat. No.94TH0607-2), P43, DOI 10.1109/HICSS.1994.323280
   Sun ZS, 2022, PROC INT CONF SOFTW, P1609, DOI 10.1145/3510003.3510160
   Svajlenko J, 2014, PROC IEEE INT CONF S, P476, DOI 10.1109/ICSME.2014.77
   Tate R, 2009, ACM SIGPLAN NOTICES, V44, P264, DOI 10.1145/1594834.1480915
   Thiessen R, 2017, ACM SIGPLAN NOTICES, V52, P263, DOI [10.1145/3140587.3062359, 10.1145/3062341.3062359]
   Tripp O, 2013, LECT NOTES COMPUT SC, V7793, P210, DOI 10.1007/978-3-642-37057-1_15
   Trofin M, 2021, Arxiv, DOI arXiv:2101.04808
   Vaswani A, 2017, ADV NEUR IN, V30
   Wang K, 2019, Arxiv, DOI [arXiv:1905.11445, DOI 10.48550/ARXIV.1905.11445]
   Wang K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P121, DOI 10.1145/3385412.3385999
   Wang PC, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1066, DOI 10.1145/3180155.3180179
   Wang Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428205
   WILSON RP, 1995, SIGPLAN NOTICES, V30, P1, DOI 10.1145/223428.207111
   Yan Dacong, 2011, P 2011 INT S SOFTW T, P155, DOI DOI 10.1145/2001420.2001440
   Yong SH, 1999, ACM SIGPLAN NOTICES, V34, P91, DOI 10.1145/301631.301647
   Yuan Y, 2012, IEEE INT CONF AUTOM, P286, DOI 10.1145/2351676.2351725
   Zalewski M., 2016, AM FUZZY LOP WHITEPA
   Zhang QR, 2013, ACM SIGPLAN NOTICES, V48, P435, DOI 10.1145/2499370.2462159
   Zheng X, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P197, DOI 10.1145/1328438.1328464
NR 78
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 112
DI 10.1145/3649829
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600019
OA gold
DA 2024-08-05
ER

PT J
AU Abeysinghe, S
   Xhebraj, A
   Rompf, T
AF Abeysinghe, Supun
   Xhebraj, Anxhelo
   Rompf, Tiark
TI Flan: An Expressive and Efficient Datalog Compiler for Program Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Datalog; Logic Programming; Generative Programming; Program Analysis
ID QUERY PLANS
AB Datalog has gained prominence in program analysis due to its expressiveness and ease of use. Its generic fixpoint resolution algorithm over relational domains simplifies the expression of many complex analyses. The performance and scalability issues of early Datalog approaches have been addressed by tools such as Souffle through specialized code generation. Still, while pure Datalog is expressive enough to support a wide range of analyses, there is a growing need for extensions to accommodate increasingly complex analyses. This has led to the development of various extensions, such as Flix, Datafun, and Formulog, which enhance Datalog with features like arbitrary lattices and SMT constraints. Most of these extensions recognize the need for full interoperability between Datalog and a full-fledged programming language, a functionality that high-performance systems like Souffle lack. Speciflcally, in most cases, they construct languages from scratch with first-class Datalog support, allowing greater flexibility. However, this flexibility often comes at the cost of performance due to the conflicting requirements of prioritizing modularity and abstraction over efficiency. Consequently, achieving both flexibility and compilation to highly-performant specialized code poses a significant challenge. In this work, we reconcile the competing demands of expressiveness and performance with Flan, a Datalog compiler fully embedded in Scala that leverages multi-stage programming to generate specialized code for enhanced performance. Our approach combines the flexibility of Flix with Souffle's performance, offering seamless integration with the host language that enables the addition of powerful extensions while generating specialized code for the entire computation. Flan's simple operator interface allows the addition of an extensive set of features, including arbitrary aggregates, user-defined functions, and lattices, with multiple execution strategies such as binary and multi-way joins, supported by difierent indexing structures like specialized trees and hash tables, with minimal effort. We evaluate our system on a variety of benchmarks and compare it to established Datalog engines. Our results demonstrate competitive performance and speedups in the range of 1.4x to 12.5x compared to state-of-the-art systems for workloads of practical importance.
C1 [Abeysinghe, Supun; Xhebraj, Anxhelo; Rompf, Tiark] Purdue Univ, Dept Comp Sci, 610 Purdue Mall, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Abeysinghe, S (corresponding author), Purdue Univ, Dept Comp Sci, 610 Purdue Mall, W Lafayette, IN 47907 USA.
EM tabeysin@purdue.edu; axhebraj@purdue.edu; tiark@purdue.edu
OI Rompf, Tiark/0000-0002-2068-3238; Tennakoon Mudiyanselage, Supun Madusha
   Bandara Abeysinghe/0000-0001-6054-2432
FU NSF [1553471, 1564207, 1918483, 1910216]; DOE award [DE-SC0018050]; U.S.
   Department of Energy (DOE) [DE-SC0018050] Funding Source: U.S.
   Department of Energy (DOE)
FX We would like to thank our anonymous reviewers for their valuable
   feedback that helped improve the paper significantly. We thank Mikail
   Khan for his valuable contributions to the early iterations of the Flan
   implementation. We thank Guannan Wei, Oliver Bracevac, Patrick
   LaFontaine, and Pratyush Das for their comments on earlier drafts. This
   work was supported in part by NSF awards 1553471, 1564207, 1918483,
   1910216, DOE award DE-SC0018050, as well as gifts from Meta, Google,
   Microsoft, and VMware.
CR Aberger CR, 2017, ACM T DATABASE SYST, V42, DOI 10.1145/3129246
   Abeysinghe S, 2023, Arxiv, DOI arXiv:2311.02781
   Abiteboul S., 1995, Foundations of Databases, DOI DOI 10.5555/551350
   Allen N, 2015, LECT NOTES COMPUT SC, V9031, P131, DOI 10.1007/978-3-662-46663-6_7
   Amin N, 2019, LECT NOTES COMPUT SC, V11893, P225, DOI 10.1007/978-3-030-34175-6_12
   Andersen L. O., 1994, Ph.D. Dissertation
   [Anonymous], 2014, IEEE Database Eng. Bull.
   Antoniadis Tony, 2017, P 6 ACM SIGPLAN INT, P25, DOI DOI 10.1145/3088515.3088522
   Arch S, 2022, LECT NOTES COMPUT SC, V13474, P83, DOI 10.1007/978-3-031-16767-6_5
   Aref M, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1371, DOI 10.1145/2723372.2742796
   Arntzenius M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371090
   Arntzenius M, 2016, ACM SIGPLAN NOTICES, V51, P214, DOI 10.1145/3022670.2951948
   Atserias A, 2008, ANN IEEE SYMP FOUND, P739, DOI 10.1109/FOCS.2008.43
   Bembenek A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428209
   Benton William C., 2007, Proceedings of the 9th International ACM SIGPLAN Conference on Principles and Practice of Declarative Programming (PPDP'07), P13, DOI 10.1145/1273920.1273923
   Bezanson J, 2015, Arxiv, DOI [arXiv:1411.1607, DOI 10.48550/ARXIV.1411.1607]
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bracevac O, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3622813
   Brahmakshatriya A, 2022, INT SYM CODE GENER, P53, DOI 10.1109/CGO53902.2022.9741280
   Brahmakshatriya A, 2021, INT SYM CODE GENER, P39, DOI 10.1109/CGO51591.2021.9370333
   Bravenboer M, 2009, ACM SIGPLAN NOTICES, V44, P243, DOI 10.1145/1639949.1640108
   Chandra A. K., 1985, Journal of Logic Programming, V2, P1, DOI 10.1016/0743-1066(85)90002-0
   de Moura L, 2007, LECT NOTES ARTIF INT, V4603, P183
   Essertel Gregory M., 2021, GPCE 2021: Proceedings of the 20th ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences, P156, DOI 10.1145/3486609.3487207
   Essertel GM, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P799
   Fan ZW, 2019, PROC VLDB ENDOW, V12, P695, DOI 10.14778/3311880.3311886
   Flores-Montoya A, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P1075
   Freitag M, 2020, PROC VLDB ENDOW, V13, P1891, DOI 10.14778/3407790.3407797
   Futamura Y., 1971, Systems, Computers, Controls, V54-C, P721
   Grech N, 2019, PROC INT CONF SOFTW, P1176, DOI 10.1109/ICSE.2019.00120
   Hajiyev E, 2006, LECT NOTES COMPUT SC, V4067, P2
   Henry Julien, 2022, User de~ned aggregate
   Hoder Krystof, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P457, DOI 10.1007/978-3-642-22110-1_36
   Jones Neil, 1993, Partial evaluation and automatic program generation
   Jordan H, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P327, DOI 10.1145/3293883.3295719
   Jordan H, 2022, CONCURR COMP-PRACT E, V34, DOI 10.1002/cpe.5643
   Jordan H, 2019, PROCEEDINGS OF THE TENTH INTERNATIONAL WORKSHOP ON PROGRAMMING MODELS AND APPLICATIONS FOR MULTICORES AND MANYCORES (PMAM 2019), P31, DOI 10.1145/3303084.3309490
   Kohlbecker EugeneE., 1986, LFP 86, P151
   Krikellas K, 2010, PROC INT CONF DATA, P613, DOI 10.1109/ICDE.2010.5447892
   Lam M.S., 2005, Proceedings of the twenty-fourth ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems - PODS '05, P1
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/cgo.2004.1281665
   Lattner C, 2021, INT SYM CODE GENER, P2, DOI 10.1109/CGO51591.2021.9370308
   Lhoták O, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1926385.1926389
   Loo Boon Thau, 2006, SIGMOD C, P97, DOI [10.1145/1142473.1142485, DOI 10.1145/1142473.1142485]
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   Madsen Magnus, 2022, DATALOG CEUR WORKSHO, V3203, P202
   McSherry F., 2013, CIDR
   McSherry Frank, 2015, HotOS
   Moldovan Dan, 2019, MLSys.mlsys.org
   Neumann T, 2011, PROC VLDB ENDOW, V4, P539, DOI 10.14778/2002938.2002940
   Ngo HQ, 2018, J ACM, V65, DOI 10.1145/3180143
   Ngo HQ, 2013, SIGMOD REC, V42, P5, DOI 10.1145/2590989.2590991
   Pacak Andre, 2022, ECOOP (LIPIcs, V222
   Patel JM, 2018, PROC VLDB ENDOW, V11, P663, DOI 10.14778/3184470.3184471
   Rayon, 2022, Rayon: A data parallelism library for Rust
   Reps T., 1994, Compiler Construction. 5th International Conference, CC'94. Proceedings, P389
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Rompf T, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000054
   Rompf T, 2011, ACM SIGPLAN NOTICES, V46, P127, DOI 10.1145/1942788.1868314
   Rompf T, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P2, DOI 10.1145/2784731.2784760
   Rompf T, 2013, ACM SIGPLAN NOTICES, V48, P497, DOI 10.1145/2480359.2429128
   Rompf Tiark, 2012, High. Order Symb. Comput., V25, P165, DOI [10.1007/s10990-013-9096-9, 10.1007/s10990-013-9096-, DOI 10.1007/S10990-013-9096]
   Ryzhyk Leonid, 2019, Datalog
   Sagiv M, 1996, THEOR COMPUT SCI, V167, P131, DOI 10.1016/0304-3975(96)00072-2
   Sahebolamri A, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3622840
   Sahebolamri A, 2022, CC'22: PROCEEDINGS OF THE 31ST ACM SIGPLAN INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P77, DOI 10.1145/3497776.3517779
   Scholz B, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P196, DOI 10.1145/2892208.2892226
   Seo J, 2015, IEEE T KNOWL DATA EN, V27, P1824, DOI 10.1109/TKDE.2015.2405562
   Shaikhha A, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1907, DOI 10.1145/2882903.2915244
   Shkapsky A, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1135, DOI 10.1145/2882903.2915229
   Smaragdakis Yannis, 2010, Datalog Reloaded. First International Workshop, Datalog 2010. Revised Selected Papers, P245, DOI 10.1007/978-3-642-24206-9_14
   Smaragdakis Yannis, 2015, Lang., V2, P1
   Subotic P, 2018, PROC VLDB ENDOW, V12, P141, DOI 10.14778/3282495.3282500
   Szabó T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276509
   Szabó T, 2016, IEEE INT CONF AUTOM, P320, DOI 10.1145/2970276.2970298
   Szabo Tamas, 2017, P INT WORKSHOP INCRE
   Taha W, 1997, ACM SIGPLAN NOTICES, V32, P203, DOI 10.1145/258994.259019
   Tahboub RY, 2018, INT CONF MANAGE DATA, P307, DOI 10.1145/3183713.3196893
   Tielen Luc, 2023, Eclair-lang
   Ullman D., 1988, Principles of computer science series, V14
   Ullman D. Jerey, 1989, Principles of Database and Knowledge-Base Systems, VII, P984
   Veldhuizen T. L., 2014, ICDT, P96, DOI 10.5441/002/icdt.2014.13
   Vorobyov BSK, 2015, 2015 24TH AUSTRALASIAN SOFTWARE ENGINEERING CONFERENCE (ASWEC 2015), P28, DOI 10.1109/ASWEC.2015.15
   Vu Jodat, 2011, ACM SIGSOFT Softw. Eng. Notes, V36, P52
   Wang Yisu Remy, 2023, Proc. ACM Manag. Data, V1
   Wei GN, 2023, PROC INT CONF SOFTW, P1316, DOI 10.1109/ICSE48619.2023.00116
   Wei GN, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360552
   Wei GN, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428232
   Wejdenstal Joel, 2022, DashMap
   Whaley J, 2005, LECT NOTES COMPUT SC, V3780, P97
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Zhang Eric, 2020, ekzhang/crepe: Datalog compiler embedded in Rust as a procedural macro
   Zhang YH, 2023, Arxiv, DOI arXiv:2304.04332
   Zhang YH, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498696
   Zhao D, 2021, PROCEEDINGS OF THE 23RD INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, PPDP 2021, DOI 10.1145/3479394.3479415
   Zhao D, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3379446
   Zucker Philip, 2022, EGRAPHS 2022, P1
NR 98
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 86
DI 10.1145/3632928
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400087
OA gold
DA 2024-08-05
ER

PT J
AU Chakraborty, S
   Krishna, SN
   Mathur, U
   Pavlogiannis, A
AF Chakraborty, Soham
   Krishna, Shankara Narayanan
   Mathur, Umang
   Pavlogiannis, Andreas
TI How Hard Is Weak-Memory Testing?
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE concurrency; consistency checking; weak memory models; complexity
ID CONSISTENCY; MODEL
AB Weak-memory models are standard formal specifications of concurrency across hardware, programming languages, and distributed systems. A fundamental computational problem is consistency testing : is the observed execution of a concurrent program in alignment with the specification of the underlying system? The problem has been studied extensively across Sequential Consistency (SC) and weak memory, and proven to be NP-complete when some aspect of the input (e.g., number of threads/memory locations) is unbounded. This unboundedness has left a natural question open: are there efficient parameterized algorithms for testing?
   The main contribution of this paper is a deep hardness result for consistency testing under many popular weak-memory models: the problem remains NP-complete even in its bounded setting, where candidate executions contain a bounded number of threads, memory locations, and values. This hardness spreads across several Release-Acquire variants of C11, a popular variant of its Relaxed fragment, popular Causal Consistency models, and the POWER architecture. To our knowledge, this is the first result that fully exposes the hardness of weakmemory testing and proves that the problem admits no parameterization under standard input parameters. It also yields a computational separation of these models from SC, x86-TSO, PSO, and Relaxed, for which bounded consistency testing is either known (for SC), or shown here (for the rest), to be in polynomial time.
C1 [Chakraborty, Soham] Delft Univ Technol, Delft, Netherlands.
   [Krishna, Shankara Narayanan; Mathur, Umang] Indian Inst Technol, Mumbai, Maharashtra, India.
   [Mathur, Umang] Natl Univ Singapore, Singapore, Singapore.
   [Pavlogiannis, Andreas] Aarhus Univ, Aarhus, Denmark.
C3 Delft University of Technology; Indian Institute of Technology System
   (IIT System); Indian Institute of Technology (IIT) - Bombay; National
   University of Singapore; Aarhus University
RP Chakraborty, S (corresponding author), Delft Univ Technol, Delft, Netherlands.
EM s.s.chakraborty@tudelft.nl; krishnas@cse.iitb.ac.in;
   umathur@comp.nus.edu.sg; pavlogiannis@cs.au.dk
RI ; Pavlogiannis, Andreas/X-6831-2018
OI Chakraborty, Soham/0000-0002-4454-2050; Mathur,
   Umang/0000-0002-7610-0660; Shankara Narayanan,
   Krishna/0000-0003-0925-398X; Pavlogiannis, Andreas/0000-0002-8943-0722
FU VILLUM FONDEN [VIL42117]; SERB MATRICS [MTR/2019/000095]; Singapore
   Ministry of Education (MoE) Academic Research Fund (AcRF) Tier 1 grant
FX Andreas Pavlogiannis was partially supported by a research grant
   (VIL42117) from VILLUM FONDEN. S. Krishna was partially supported by the
   SERB MATRICS grant MTR/2019/000095. Umang Mathur was partially supported
   by a Singapore Ministry of Education (MoE) Academic Research Fund (AcRF)
   Tier 1 grant.
CR Abdulla Parosh, 2023, Tools and Algorithms for the Construction and Analysis of Systems: 29th International Conference, TACAS 2023, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2022, Proceedings. Lecture Notes in Computer Science (13993), P105, DOI 10.1007/978-3-031-30823-9_6
   Abdulla PA, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360576
   Abdulla PA, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276505
   ADVE SV, 1990, 17TH ANNUAL INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P2, DOI 10.1109/ISCA.1990.134502
   Agarwal P, 2021, LECT NOTES COMPUT SC, V12759, P341, DOI 10.1007/978-3-030-81685-8_16
   AHAMAD M, 1995, DISTRIB COMPUT, V9, P37, DOI 10.1007/BF01784241
   Alglave J, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3458926
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Alglave J, 2011, LECT NOTES COMPUT SC, V6605, P41, DOI 10.1007/978-3-642-19835-9_5
   [Anonymous], 1994, The SPARC architecture manual
   Batty M, 2013, ACM SIGPLAN NOTICES, V48, P235, DOI 10.1145/2480359.2429099
   Bouajjani A, 2017, ACM SIGPLAN NOTICES, V52, P626, DOI 10.1145/3093333.3009888
   Bui TL, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485541
   Burckhardt S, 2014, FOUND TRENDS PROGRAM, V1, P2
   Cantin JF, 2005, IEEE T PARALL DISTR, V16, P663, DOI 10.1109/TPDS.2005.86
   Chakraborty S, 2023, Arxiv, DOI arXiv:2311.04302
   Chalupa M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158119
   Chatterjee K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360550
   Chen YJ, 2009, INT S HIGH PERF COMP, P381, DOI 10.1109/HPCA.2009.4798276
   Fidge CJ, 1988, P 11 AUSTR COMP SCI, V10, P56
   Furbach F, 2015, ACM T EMBED COMPUT S, V14, DOI 10.1145/2753761
   Garey M. R., 1979, Computers and intractability. A guide to the theory of NP-completeness
   Gibbons P. B., 1994, SPAA '94. 6th Annual ACM Symposium on Parallel Algorithms and Architectures, P177, DOI 10.1145/181014.181328
   Gibbons PB, 1997, SIAM J COMPUT, V26, P1208, DOI 10.1137/S0097539794279614
   Gonthmakher Alex, 2003, Parallel Processing Letters, V13, P721, DOI [10.1142/S0129626403001628, DOI 10.1142/S0129626403001628]
   Huang J, 2014, ACM SIGPLAN NOTICES, V49, P337, DOI [10.1145/2666356.2594315, 10.1145/2594291.2594315]
   HUTTO PW, 1990, 10TH INTERNATIONAL CONFERENCE ON DISTRIBUTED COMPUTING SYSTEMS, P302
   Kalhauge CG, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276516
   Kini D, 2017, ACM SIGPLAN NOTICES, V52, P157, DOI [10.1145/3140587.3062374, 10.1145/3062341.3062374]
   Kokologiannakis M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571212
   Kokologiannakis M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498711
   Kokologiannakis M, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P96, DOI 10.1145/3314221.3314609
   Kokologiannakis M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158105
   Lahav O, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3505273
   Lahav O, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P126, DOI 10.1145/3314221.3314604
   Lahav O, 2016, ACM SIGPLAN NOTICES, V51, P649, DOI 10.1145/2914770.2837643
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Lee SH, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591297
   Manovit C, 2006, INT S HIGH PERF COMP, P168, DOI 10.1109/HPCA.2006.1598123
   Margalit R, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434285
   Mathur U, 2020, IEEE S LOG, P713, DOI 10.1145/3373718.3394783
   Mathur U, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434317
   Norris Brian, 2013, OOPSLA'13
   Owens S, 2010, LECT NOTES COMPUT SC, V6183, P478, DOI 10.1007/978-3-642-14107-2_23
   Pavlogiannis A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371085
   Perrin M, 2016, ACM SIGPLAN NOTICES, V51, P313, DOI [10.1145/2851141.2851170, 10.1145/3016078.2851170]
   Qadeer S, 2003, IEEE T PARALL DISTR, V14, P730, DOI 10.1109/TPDS.2003.1225053
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   Tunc Hunkar Can, 2023, Proceedings of the ACM on Programming Languages, DOI 10.1145/3591251
   Weiyu Luo, 2021, ASPLOS 2021: Proceedings of the 26th International Conference on Architectural Support for Programming Languages and Operating Systems, P630, DOI 10.1145/3445814.3446711
   Wickerson J, 2017, ACM SIGPLAN NOTICES, V52, P190, DOI 10.1145/3093333.3009838
   Windsor M, 2022, SOFTW TEST VERIF REL, V32, DOI 10.1002/stvr.1812
NR 52
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 66
DI 10.1145/3632908
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400067
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Cohen, L
   Jabarin, A
   Popescu, A
   Rowe, RNS
AF Cohen, Liron
   Jabarin, Adham
   Popescu, Andrei
   Rowe, Reuben N. S.
TI The Complex(ity) Landscape of Checking Infinite Descent
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE cyclic proof; infinite descent; size-change termination; complexity;
   algorithms; Buchi automata
ID BUCHI; UNIVERSALITY; INDUCTION; PROOFS
AB Cyclic proof systems, in which induction is managed implicitly, are a promising approach to automatic verification. The soundness of cyclic proof graphs is ensured by checking them against a trace-based Infinite Descent property. Although the problem of checking Infinite Descent is known to be PSPACE-complete, this leaves much room for variation in practice. Indeed, a number of different approaches are employed across the various cyclic proof systems described in the literature. In this paper, we study criteria for Infinite Descent in an abstract, logic-independent setting. We look at criteria based on Buchi automata encodings and relational abstractions, and determine their parameterized time complexities in terms of natural dimensions of cyclic proofs: the numbers of vertices of the proof-tree graphs, and the vertex width-an upper bound on the number of components (e.g., formulas) of a sequent that can be simultaneously tracked for descent. We identify novel algorithms that improve upon the parameterised complexity of the existing algorithms. We implement the studied criteria and compare their performance on various benchmarks.
C1 [Cohen, Liron; Jabarin, Adham] Ben Gurion Univ Negev, Beer Sheva, Israel.
   [Popescu, Andrei] Univ Sheffield, Sheffield, S Yorkshire, England.
   [Rowe, Reuben N. S.] Royal Holloway Univ London, London, England.
C3 Ben Gurion University; University of Sheffield; University of London;
   Royal Holloway University London
RP Cohen, L (corresponding author), Ben Gurion Univ Negev, Beer Sheva, Israel.
EM cliron@cs.bgu.ac.il; adhamj@post.bgu.ac.il; a.popescu@sheffield.ac.uk;
   reuben.rowe@rhul.ac.uk
OI Cohen, Liron/0000-0002-6608-3000
FU UK Royal Society travel grant "Cyclic Reasoning Mechanisms for
   Interactive Theorem Proving"
FX We thank the anonymous reviewers for insightful suggestions. Their
   observations have helped us improve the presentation, correct some
   errors, and use a more appropriate baseline algorithm for the
   relation-based criteria. We also thank the reviewers of a previous
   version of this paper for observations leading to a stronger focus on
   parameterized complexity, the development of the slope-language
   automaton criterion, and significant clarification of the order-reduced
   relationbased criterion. We gratefully acknowledge support from the UK
   Royal Society travel grant "Cyclic Reasoning Mechanisms for Interactive
   Theorem Proving".
CR Abdulla PA, 2010, LECT NOTES COMPUT SC, V6174, P132, DOI 10.1007/978-3-642-14295-6_14
   Afshari B, 2022, LECT NOTES COMPUT SC, V13468, P309, DOI 10.1007/978-3-031-15298-6_20
   Angluin D, 2020, Arxiv, DOI arXiv:2002.03191
   [Anonymous], 2001, Automata Theory and Its Applications
   Baelde D., 2016, LIPIcs, V62, P42
   Ben-Amram AM, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180480
   Berardi S, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(3:10)2019
   Berardi S, 2017, LECT NOTES COMPUT SC, V10203, P301, DOI 10.1007/978-3-662-54458-7_18
   Bousquet N, 2010, LECT NOTES COMPUT SC, V6031, P118, DOI 10.1007/978-3-642-13089-2_10
   Brotherston J., 2012, Programming Languages and Systems, V7705, P350, DOI [10.1007/978-3-642-35182-225, 10.1007/978-3-642-35182-2_25]
   Brotherston J, 2014, LECT NOTES COMPUT SC, V8723, P68, DOI 10.1007/978-3-319-10936-7_5
   Brotherston J, 2011, J LOGIC COMPUT, V21, P1177, DOI 10.1093/logcom/exq052
   Brotherston J, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P101, DOI 10.1145/1328438.1328453
   Cheng Khoo Siau, 2016, Songbird Prover
   Cohen Liron, 2023, Zenodo, DOI 10.5281/ZENODO.10073582
   Cohen L, 2020, ACM T COMPUT LOG, V21, DOI 10.1145/3404889
   Das A, 2022, LECT NOTES ARTIF INT, V13385, P509, DOI 10.1007/978-3-031-10769-6_30
   Das A, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:1)2020
   Daskalakis C, 2011, SIAM J COMPUT, V40, P597, DOI 10.1137/070697720
   Dax C, 2006, LECT NOTES COMPUT SC, V4337, P273
   Doumane A, 2017, IEEE S LOG
   Duret-Lutz A, 2016, LECT NOTES COMPUT SC, V9938, P122, DOI 10.1007/978-3-319-46520-3_8
   Fogarty S, 2010, LECT NOTES COMPUT SC, V6015, P205, DOI 10.1007/978-3-642-12002-2_17
   Fogarty S, 2009, LECT NOTES COMPUT SC, V5505, P16, DOI 10.1007/978-3-642-00768-2_2
   Gentzen G, 1935, MATH Z, V39, P176, DOI 10.1007/BF01201353
   Hazard E., 2022, Leibniz International Proceedings in Informatics (LIPIcs), V216
   Itzhaky S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P944, DOI 10.1145/3453483.3454087
   James Brotherston, 2006, Ph. D. Dissertation
   Jones E, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P395, DOI 10.1145/3519939.3523731
   Jungteerapanich Natthapong, 2010, Ph. D. Dissertation
   Lange M, 2011, LECT NOTES ARTIF INT, V6989, P28, DOI 10.1007/978-3-642-24364-6_3
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   Lehmann D. J., 1977, Theoretical Computer Science, V4, P59, DOI 10.1016/0304-3975(77)90056-1
   Lepigre R, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3285955
   Nollet R, 2019, LECT NOTES ARTIF INT, V11714, P317, DOI 10.1007/978-3-030-29026-9_18
   Paulson Lawrence C., 2010, EPiC Series in Computing, V9, P1, DOI [10.29007/36dt, DOI 10.29007/36DT, 10.29007/tnfd, DOI 10.29007/TNFD]
   Rowe RNS, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P53, DOI 10.1145/3018610.3018623
   Santocanale L, 2002, LECT NOTES COMPUT SC, V2303, P357
   Schewe S., 2009, LIPIcs, V3, P661
   Serban Cristina, 2018, Electron. Commun. Eur. Assoc. Softw. Sci. Technol., V76, DOI [10.14279/TUJ.ECEASST.76.1073, DOI 10.14279/TUJ.ECEASST.76.1073]
   Simpson A, 2017, LECT NOTES COMPUT SC, V10203, P283, DOI 10.1007/978-3-662-54458-7_17
   Sprenger C, 2003, LECT NOTES COMPUT SC, V2620, P425
   Sprenger Christoph, 2002, BRICS Notes Series, P22
   Stratulat S, 2021, ELECTRON P THEOR COM, P129, DOI 10.4204/EPTCS.342.11
   Stratulat S, 2018, ELECTRON P THEOR COM, P39, DOI 10.4204/EPTCS.281.4
   Stratulat S, 2017, LECT NOTES ARTIF INT, V10501, P311, DOI 10.1007/978-3-319-66902-1_19
   Ta QT, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158097
   Ta QT, 2016, LECT NOTES COMPUT SC, V9995, P659, DOI 10.1007/978-3-319-48989-6_40
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Tellez G, 2020, J AUTOM REASONING, V64, P555, DOI 10.1007/s10817-019-09532-0
   The Cyclist Project Developers, 2023, The Cyclist Framework and Provers
   Wehr Dominik, 2023, Licentiate Thesis
   YANNAKAKIS M, 1990, PROCEEDINGS OF THE NINTH ACM SIGACT-SIGMOD-SIGART SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P230, DOI 10.1145/298514.298576
NR 53
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 46
DI 10.1145/3632888
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400047
OA gold
DA 2024-08-05
ER

PT J
AU Müllner, J
   Moosbrugger, M
   Kovács, L
AF Muellner, Julian
   Moosbrugger, Marcel
   Kovacs, Laura
TI Strong Invariants Are Hard On the Hardness of Strongest Polynomial
   Invariants for (Probabilistic) Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Strongest algebraic invariant; Point-To-Point reachability; Skolem
   problem; Probabilistic programs
AB We show that computing the strongest polynomial invariant for single-path loops with polynomial assignments is at least as hard as the SKOLEM problem, a famous problem whose decidability has been open for almost a century. While the strongest polynomial invariants are computable for affine loops, for polynomial loops the problem remained wide open. As an intermediate result of independent interest, we prove that reachability for discrete polynomial dynamical systems is SKOLEM-hard as well. Furthermore, we generalize the notion of invariant ideals and introduce moment invariant ideals for probabilistic programs. With this tool, we further show that the strongest polynomial moment invariant is (i) uncomputable, for probabilistic loops with branching statements, and (ii) SKOLEM-hard to compute for polynomial probabilistic loops without branching statements. Finally, we identify a class of probabilistic loops for which the strongest polynomial moment invariant is computable and provide an algorithm for it.
C1 [Muellner, Julian; Moosbrugger, Marcel; Kovacs, Laura] TU Wien, Vienna, Austria.
C3 Technische Universitat Wien
RP Müllner, J (corresponding author), TU Wien, Vienna, Austria.
EM julian.muellner@tuwien.ac.at; marcel.moosbrugger@tuwien.ac.at;
   laura.kovacs@tuwien.ac.at
OI Moosbrugger, Marcel/0000-0002-2006-3741; Kovacs,
   Laura/0000-0002-8299-2714
FU European Research Council Consolidator Grant ARTIST [101002685]; Vienna
   Science and Technology Fund [WWTF 10.47379/ICT19018]; SecInt Doctoral
   College - TU Wien
FX This research was supported by the European Research Council
   Consolidator Grant ARTIST 101002685, the Vienna Science and Technology
   Fund WWTF 10.47379/ICT19018 grant ProbInG, and the SecInt Doctoral
   College funded by TU Wien. We thank Manuel Kauers for providing details
   on sequences and algebraic relations and Toghrul Karimov for inspiring
   us to consider the orbit problem. We thank the McGill Bellairs Research
   Institute for hosting the Bellairs 2023 workshop, whose fruitful
   discussions in~uenced parts of this work.
CR Andrey K, 2022, LECT NOTES COMPUT SC, V13479, P3, DOI 10.1007/978-3-031-16336-4_1
   Baier Christel, 2021, PROC CONCUR, DOI DOI 10.4230/LIPICS.CONCUR.2021.28
   Barthe G, 2016, LECT NOTES COMPUT SC, V9779, P43, DOI 10.1007/978-3-319-41528-4_3
   Barthe Gilles, 2012, PROC MPC, DOI DOI 10.1007/978-3-642-31113-0
   Barthe Gilles, 2020, Foundations of Probabilistic Programming, DOI DOI 10.1017/9781108770750
   Bartocci E, 2019, LECT NOTES COMPUT SC, V11781, P255, DOI 10.1007/978-3-030-31784-3_15
   Batz K, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571260
   Batz K, 2021, LECT NOTES COMPUT SC, V12760, P524, DOI 10.1007/978-3-030-81688-9_25
   Batz Kevin, 2023, TACAS, DOI DOI 10.1007/978-3-031-30820-8_25
   Beguelin Santiago Zanella, 2012, P POPL, DOI DOI 10.1145/2103656.2103670
   Bilu Yuri, 2022, PROC MFCS, DOI DOI 10.4230/LIPICS.MFCS.2022.20
   Buchberger B, 2006, J SYMB COMPUT, V41, P475, DOI 10.1016/j.jsc.2005.09.007
   Cadilhac Michael, 2020, PROC ICALP, DOI DOI 10.4230/LIPICS.ICALP.2020.117
   Chakarov A, 2014, LECT NOTES COMPUT SC, V8723, P85, DOI 10.1007/978-3-319-10936-7_6
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chonev V, 2013, STOC'13: PROCEEDINGS OF THE 2013 ACM SYMPOSIUM ON THEORY OF COMPUTING, P941
   Chonev Ventsislav, 2015, PROC SODA, DOI DOI 10.1137/1.9781611973730.64
   Cox David A, 1997, Ideals, varieties, and algorithms-an introduction to computational algebraic geometry and commutative algebra, DOI DOI 10.1137/1035171
   Dang Thao, 2012, Reliab. Comput
   Dreossi T, 2017, FORM METHOD SYST DES, V50, P1, DOI 10.1007/s10703-016-0266-3
   Dufourd C, 1998, LECT NOTES COMPUT SC, V1443, P103, DOI 10.1007/BFb0055044
   Everest G., 2003, Mathematical Surveys and Monographs
   Farzan A, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P57, DOI 10.1109/FMCAD.2015.7542253
   Finkel A, 2013, LECT NOTES COMPUT SC, V8087, P409, DOI 10.1007/978-3-642-40313-2_37
   Ghahramani Z, 2015, NATURE, V521, P452, DOI 10.1038/nature14541
   Gretz Friedrich, 2013, Quantitative Evaluation of Systems. 10th International Conference, QEST 2013. Proceedings: LNCS 8054, P193, DOI 10.1007/978-3-642-40196-1_17
   Hopcroft J., 1969, Formal Languages and Their Relation to Automata
   Hrushovski E, 2023, J ACM, V70, DOI 10.1145/3614319
   Hrushovski E, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P530, DOI 10.1145/3209108.3209142
   Kaminski BL, 2019, ACTA INFORM, V56, P255, DOI 10.1007/s00236-018-0321-1
   Kaminski BL, 2018, J ACM, V65, DOI 10.1145/3208102
   Kannan Ravindran, 1980, PROC STOC, DOI DOI 10.1145/800141.804673
   Karimov T, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498727
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   Kauers M, 2008, J SYMB COMPUT, V43, P787, DOI 10.1016/j.jsc.2008.03.002
   Kauers M, 2011, TEXT MG SYMB COMPUT, P1, DOI 10.1007/978-3-7091-0445-3
   Kauers Manuel, 2005, Algorithms for Nonlinear Higher Order Di~erence Equations
   Kincaid Z, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571237
   Kincaid Z, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290368
   Kincaid Z, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158142
   Ko SK, 2018, LECT NOTES COMPUT SC, V11088, P465, DOI 10.1007/978-3-319-98654-8_38
   Kovács L, 2008, LECT NOTES COMPUT SC, V4963, P249, DOI 10.1007/978-3-540-78800-3_18
   Kovács L, 2023, LECT NOTES COMPUT SC, V13896, P176, DOI 10.1007/978-3-031-28083-2_11
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Kozen Dexter, 1983, P ACM S THEORY COMPU, P291, DOI [10.1145/800061.808758, DOI 10.1145/800061.808758]
   Lipton Richard, 2022, PROC LICS, DOI DOI 10.1145/3531130.3533328
   McIver Annabelle, 2005, Abstraction, Refinement and Proof for Probabilistic Systems, DOI DOI 10.1007/B138392
   Moosbrugger M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563341
   Müller-Olm M, 2004, LECT NOTES COMPUT SC, V3142, P1016
   Müller-Olm M, 2004, INFORM PROCESS LETT, V91, P233, DOI 10.1016/j.ipl.2004.05.004
   Mullner Julian, 2023, Master's thesis
   POST EL, 1946, B AM MATH SOC, V52, P264, DOI 10.1090/S0002-9904-1946-08555-9
   Tao T, 2008, Structure and Randomness. Pages from year one of a mathematical blog
NR 53
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 30
DI 10.1145/3632872
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400031
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Deng, HW
   Tao, RZ
   Peng, YX
   Wu, XD
AF Deng, Haowei
   Tao, Runzhou
   Peng, Yuxiang
   Wu, Xiaodi
TI A Case for Synthesis of Recursive Quantum Unitary Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Quantum Programs; Program Synthesis; SMT solvers
ID OPTIMIZATION; ALGORITHMS; CIRCUITS
AB Quantum programs are notoriously difficult to code and verify due to unintuitive quantum knowledge associated with quantum programming. Automated tools relieving the tedium and errors associated with low-level quantum details would hence be highly desirable. In this paper, we initiate the study of program synthesis for quantum unitary programs that recursively define a family of unitary circuits for different input sizes, which are widely used in existing quantum programming languages. Specifically, we present QSynth, the first quantum program synthesis framework, including a new inductive quantum programming language, its specification, a sound logic for reasoning, and an encoding of the reasoning procedure into SMT instances. By leveraging existing SMT solvers, QSynth successfully synthesizes 10 quantum unitary programs including quantum arithmetic programs, quantum eigenvalue inversion, quantum teleportation and Quantum Fourier Transformation, which can be readily transpiled to executable programs on major quantum platforms, e.g., Q#, IBM Qiskit, and AWS Braket.
C1 [Deng, Haowei; Peng, Yuxiang; Wu, Xiaodi] Univ Maryland, College Pk, MD 20742 USA.
   [Tao, Runzhou] Columbia Univ, New York, NY 10027 USA.
C3 University System of Maryland; University of Maryland College Park;
   Columbia University
RP Deng, HW (corresponding author), Univ Maryland, College Pk, MD 20742 USA.
EM hwdeng@umd.edu; runzhou.tao@columbia.edu; ypeng15@umd.edu;
   xwu@cs.umd.edu
RI Peng, YuXiang/ADP-1617-2022
FU U.S. Department of Energy, Office of Science, Office of Advanced
   Scientific Computing Research, Quantum Testbed Pathfinder Program
   [DE-SC0019040]; Air Force Office of Scientific Research
   [FA9550-21-1-0209]; U.S. National Science Foundation [CCF-1942837];
   Sloan research fellowship
FX We thank anonymous reviewers for constructive suggestions that improve
   the presentation of the paper. H.D., Y.P., and X.W. was partially funded
   by the U.S. Department of Energy, Office of Science, Office of Advanced
   Scientific Computing Research, Quantum Testbed Pathfinder Program under
   Award Number DE-SC0019040, Air Force Office of Scientific Research under
   award number FA9550-21-1-0209, the U.S. National Science Foundation
   grant CCF-1942837 (CAREER) and a Sloan research fellowship.
CR Cuccaro SA, 2004, Arxiv, DOI arXiv:quant-ph/0410184
   Alur R., 2013, Syntax-guided synthesis, DOI DOI 10.1109/FMCAD.2013.6679385
   Alur R, 2018, COMMUN ACM, V61, P84, DOI 10.1145/3208071
   Amy M, 2019, IEEE T INFORM THEORY, V65, P4771, DOI 10.1109/TIT.2019.2906374
   Amy M, 2019, QUANTUM SCI TECHNOL, V4, DOI 10.1088/2058-9565/aad8ca
   Amy M, 2014, IEEE T COMPUT AID D, V33, P1476, DOI 10.1109/TCAD.2014.2341953
   Amy M, 2013, IEEE T COMPUT AID D, V32, P818, DOI 10.1109/TCAD.2013.2244643
   [Anonymous], 2013, ICML
   Bacon Dave, 2008, Analyzing algebraic quantum circuits using exponential sums
   Bauer-Marquart F, 2023, LECT NOTES COMPUT SC, V14000, P181, DOI 10.1007/978-3-031-27481-7_12
   BENNETT CH, 1993, PHYS REV LETT, V70, P1895, DOI 10.1103/PhysRevLett.70.1895
   Bernstein E, 1997, SIAM J COMPUT, V26, P1411, DOI 10.1137/S0097539796300921
   Bravyi S, 2016, PHYS REV LETT, V116, DOI 10.1103/PhysRevLett.116.250501
   Chareton C, 2020, Arxiv, DOI [arXiv:2003.05841, 10.1007/978-3-030-72019-3_6, DOI 10.1007/978-3-030-72019-3_6]
   Chen YF, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591270
   Coppersmith D., 2002, arXiv, DOI 10.48550/arXiv.quant-ph/0201067
   D'Antoni L, 2021, LECT NOTES COMPUT SC, V12759, P84, DOI 10.1007/978-3-030-81685-8_4
   de Brugiere Timothee Goubault, 2020, Ph. D. Dissertation
   Deng HW, 2023, ACM T QUANTUM COMPUT, V4, DOI 10.1145/3579369
   Deng Haowei, 2023, QSynth Zenodo, DOI [10.5281/zenodo.10054966, DOI 10.5281/ZENODO.10054966]
   DEUTSCH D, 1992, P ROY SOC LOND A MAT, V439, P553, DOI 10.1098/rspa.1992.0167
   Dou MH, 2022, Arxiv, DOI arXiv:2212.14201
   Ettinger M, 1999, Arxiv, DOI [arXiv:quant-ph/9901029, 10.48550/arXiv.quant-ph/9901029]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P599, DOI 10.1145/3093333.3009851
   FEYNMAN RP, 1986, FOUND PHYS, V16, P507, DOI 10.1007/BF01886518
   Gambetta Jay, 2022, IBM Quantum Roadmap to build quantum-centric supercomputers
   GREENBERGER DM, 1989, FUND THEOR, V37, P69
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gulwani S, 2012, COMMUN ACM, V55, P97, DOI 10.1145/2240236.2240260
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P50, DOI 10.1145/1993316.1993505
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Hietala K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434318
   Hillery M, 1999, PHYS REV A, V59, P1829, DOI 10.1103/PhysRevA.59.1829
   Hu QHP, 2021, LECT NOTES COMPUT SC, V12759, P783, DOI 10.1007/978-3-030-81685-8_37
   Hu QP, 2018, LECT NOTES COMPUT SC, V10981, P386, DOI 10.1007/978-3-319-96145-3_21
   Jha Susmit, 2010, Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering-Volume 1. ICSE'10, P215, DOI DOI 10.1145/1806799.1806833
   Kang CG, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586039
   Kim J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434311
   Kitaev AY, 1997, RUSS MATH SURV+, V52, P1191, DOI 10.1070/RM1997v052n06ABEH002155
   Kitzelmann E, 2010, LECT NOTES COMPUT SC, V5812, P50
   Knoth T, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P253, DOI 10.1145/3314221.3314602
   Koh Dax Enshan, 2017, Quantum Information & Computation, DOI [10.26421/QIC17.13-14-1, DOI 10.26421/QIC17.13-14-1]
   Liang P., 2010, P 27 INT C MACH LEAR, P639
   Liao CH, 2014, QUANTUM INF PROCESS, V13, P1907, DOI 10.1007/s11128-014-0779-x
   Lin CC, 2014, ACM J EMERG TECH COM, V11, DOI 10.1145/2629430
   Lloyd Seth, 2010, Phys. Rev. Lett., V2010, pD4, DOI [10.1103/PhysRevLett.103.150502., DOI 10.1103/PHYSREVLETT.103.150502]
   Dawson CM, 2005, Arxiv, DOI arXiv:quant-ph/0505030
   Man ZX, 2006, CHINESE PHYS LETT, V23, P1680, DOI 10.1088/0256-307X/23/7/007
   Matthew Amy, 2018, arXiv, DOI [10.4204/eptcs.287.1, DOI 10.4204/EPTCS.287.1]
   Montanaro A, 2017, J PHYS A-MATH THEOR, V50, DOI 10.1088/1751-8121/aa565f
   Nielsen M.A., 2010, Quantum Computation and Quantum Information: 10th Anniversary Edition, DOI DOI 10.1017/CBO9780511976667
   Paykin J, 2017, ACM SIGPLAN NOTICES, V52, P846, DOI 10.1145/3093333.3009894
   Phothilimthana PM, 2016, ACM SIGPLAN NOTICES, V51, P297, DOI 10.1145/2954679.2872387
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Saeedi M, 2011, QUANTUM INF PROCESS, V10, P355, DOI 10.1007/s11128-010-0201-2
   Shende VV, 2006, IEEE T COMPUT AID D, V25, P1000, DOI 10.1109/TCAD.2005.855930
   SHOR PW, 1994, AN S FDN CO, P124
   Solar-Lezama Armando, 2008, Program synthesis by sketching
   Tao RZ, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P641, DOI 10.1145/3519939.3523431
   Thapliyal H, 2021, IEEE T EMERG TOP COM, V9, P1045, DOI 10.1109/TETC.2019.2910870
   Torlak Emina, 2013, P 2013 ACM INT S NEW, P135, DOI DOI 10.1145/2509578.2509586
   Xia Yan, 2006, arXiv, DOI [10.48550/arXiv.quantph/0601127, DOI 10.48550/ARXIV.QUANTPH/0601127]
   Xu A, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591254
   Xu MK, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P625, DOI 10.1145/3519939.3523433
   Ying MS, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2049706.2049708
   Younis E, 2021, 2021 IEEE INTERNATIONAL CONFERENCE ON QUANTUM COMPUTING AND ENGINEERING (QCE 2021) / QUANTUM WEEK 2021, P232, DOI 10.1109/QCE52317.2021.00041
   Yu NK, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P542, DOI 10.1145/3453483.3454061
   1995, Arxiv, DOI arXiv:quant-ph/9511026
NR 68
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 59
DI 10.1145/3632901
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400060
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Mell, S
   Zdancewic, S
   Bastani, O
AF Mell, Stephen
   Zdancewic, Steve
   Bastani, Osbert
TI Optimal Program Synthesis via Abstract Interpretation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program synthesis; optimal synthesis; abstract interpretation
ID FF PLANNING SYSTEM
AB We consider the problem of synthesizing programs with numerical constants that optimize a quantitative objective, such as accuracy, over a set of input-output examples. We propose a general framework for optimal synthesis of such programs in a given domain specific language (DSL), with provable optimality guarantees. Our framework enumerates programs in a general search graph, where nodes represent subsets of concrete programs. To improve scalability, it uses A* search in conjunction with a search heuristic based on abstract interpretation; intuitively, this heuristic establishes upper bounds on the value of subtrees in the search graph, enabling the synthesizer to identify and prune subtrees that are provably suboptimal. In addition, we propose a natural strategy for constructing abstract transformers for monotonic semantics, which is a common property for components in DSLs for data classification. Finally, we implement our approach in the context of two such existing DSLs, demonstrating that our algorithm is more scalable than existing optimal synthesizers.
C1 [Mell, Stephen; Zdancewic, Steve; Bastani, Osbert] Univ Penn, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Mell, S (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM sm1@cis.upenn.edu; stevez@cis.upenn.edu; obastani@seas.upenn.edu
OI Zdancewic, Steve/0000-0002-3516-1512
FU NSF [CCF-1910769, CCF-1917852]; ARO Award [W911NF-20-1-0080];
   Amazon/ASSET Gift for Research in Trustworthy AI
FX We thank the anonymous reviewers for their helpful feedback. This work
   was supported in part by NSF Award CCF-1910769, NSF Award CCF-1917852,
   ARO Award W911NF-20-1-0080, and Amazon/ASSET Gift for Research in
   Trustworthy AI.
CR Anderson G., 2020, ADV NEURAL INFORM PR, V33, P6172
   Bansal Sorav, 2008, P 8 USENIX C OP SYST, V8, P177
   Bastani Favyen, 2021, Onward! 2021: Proceedings of the 2021 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software, P56, DOI 10.1145/3486607.3486750
   Bastani F, 2020, SIGMOD'20: PROCEEDINGS OF THE 2020 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1907, DOI 10.1145/3318464.3389692
   Bornholt J, 2016, ACM SIGPLAN NOTICES, V51, P775, DOI 10.1145/2914770.2837666
   Burgos-Artizzu XP, 2012, PROC CVPR IEEE, P1322, DOI 10.1109/CVPR.2012.6247817
   Cardelli L, 2017, LECT NOTES COMPUT SC, V10427, P375, DOI 10.1007/978-3-319-63390-9_20
   Chaudhuri S, 2021, FOUND TRENDS PROGRAM, V7, P158, DOI 10.1561/2500000049
   Chen QC, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3622863
   Chen QC, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P328, DOI 10.1145/3453483.3454047
   Cousot P., 1977, Conference Record of the Fourth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P238, DOI [10.1145/512950.512973, DOI 10.1145/512950.512973]
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dillig T, 2014, LECT NOTES COMPUT SC, V8559, P491, DOI 10.1007/978-3-319-08867-9_32
   Gregory Peter, 2012, Proceedings of the International Conference on Automated Planning and Scheduling, V22, P65, DOI DOI 10.1609/ICAPS.V22I1.13505
   Gulwani S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P62
   Guria SN, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591285
   Hoffmann J, 2001, J ARTIF INTELL RES, V14, P253, DOI 10.1613/jair.855
   Hoffmann J, 2003, J ARTIF INTELL RES, V20, P291, DOI 10.1613/jair.1144
   Inala J. P., 2020, Advances in Neural Information Processing Systems, V33, P13597
   Kearns M. J., 1994, An introduction to computational learning theory
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Gaunt AL, 2016, Arxiv, DOI arXiv:1608.04428
   Marthi B., 2008, ICAPS, P222
   Massalin H., 1987, Proceedings of the Second International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS II) (Cat. No.87CH2440-6), P122
   Mell Stephen, 2023, Zenodo, DOI 10.5281/ZENODO.10146270
   Mell Stephen, 2023, Computer Aided Verification, P459, DOI [10.1007/978-3-031-37706-8_23, DOI 10.1007/978-3-031-37706-8_23]
   Mukherjee M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428245
   Phothilimthana PM, 2016, ACM SIGPLAN NOTICES, V51, P297, DOI 10.1145/2954679.2872387
   Sasnauskas R, 2018, Arxiv, DOI [arXiv:1711.04422, DOI 10.48550/ARXIV.1711.04422, 10.48550/arXiv.1711.04422]
   Shah Ameesh, 2020, ADV NEURAL INFORM PR, V33, P4940
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2908080.2908102, 10.1145/2980983.2908102]
   So S, 2017, LECT NOTES COMPUT SC, V10422, P364, DOI 10.1007/978-3-319-66706-5_18
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Sun JJ, 2021, Arxiv, DOI [arXiv:2104.02710, DOI 10.48550/ARXIV.2104.02710, 10.48550/arXiv.2104.02710]
   Sun Jennifer J, 2022, CaltechDATA, DOI 10.22002/D1.20186
   Tan BC, 2020, ICCAD-IEEE ACM INT, DOI 10.1145/3400302.3415620
   Valkov L, 2018, ADV NEUR IN, V31
   Vega-Brown W, 2018, PROCEEDINGS OF THE TWENTY-SEVENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P4852
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
   Ye X, 2021, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2021, P1691
   Zhi-Xuan T, 2022, Arxiv, DOI [arXiv:2208.02938, 10.48550/arXiv.2208.02938, DOI 10.48550/ARXIV.2208.02938]
NR 41
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 16
DI 10.1145/3632858
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400017
OA gold
DA 2024-08-05
ER

PT J
AU Pottier, F
   Guéneau, A
   Jourdan, JH
   Mével, G
AF Pottier, Francois
   Gueneau, Armael
   Jourdan, Jacques-Henri
   Mevel, Glen
TI Thunks and Debits in Separation Logic with Time Credits
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program verification; separation logic; time complexity
AB A thunk is a mutable data structure that offers a simple memoization service: it stores either a suspended computation or the result of this computation. Okasaki [1999] presents many data structures that exploit thunks to achieve good amortized time complexity. He analyzes their complexity by associating a debit with every thunk. A debit can be paid off in several increments; a thunk whose debit has been fully paid off can be forced. Quite strikingly, a debit is associated also with future thunks, which do not yet exist in memory. Some of the debit of a faraway future thunk can be transferred to a nearer future thunk. We present a complete machine-checked reconstruction of Okasaki's reasoning rules in Iris($), a rich separation logic with time credits. We demonstrate the applicability of the rules by verifying a few operations on streams as well as several of Okasaki's data structures, namely the physicist's queue, implicit queues, and the banker's queue.
C1 [Pottier, Francois] INRIA, Paris, France.
   [Gueneau, Armael; Mevel, Glen] Univ Paris Saclay, CNRS, ENS Paris Saclay, INRIA,LMF, F-91190 Gif Sur Yvette, France.
   [Jourdan, Jacques-Henri] Univ Paris Saclay, CNRS, ENS Paris Saclay, LMF, F-91190 Gif Sur Yvette, France.
C3 Inria; Universite Paris Saclay; Universite Paris Cite; Inria; Centre
   National de la Recherche Scientifique (CNRS); Universite Paris Saclay;
   Centre National de la Recherche Scientifique (CNRS); Universite Paris
   Cite
RP Pottier, F (corresponding author), INRIA, Paris, France.
EM francois.pottier@inria.fr; armael.gueneau@inria.fr;
   jacques-henri.jourdan@cnrs.fr; glen.mevel@crans.org
OI Pottier, Francois/0000-0002-4069-1235; Gueneau,
   Armael/0000-0003-3072-4045; Jourdan, Jacques-Henri/0000-0002-9781-7097
CR Atkey R, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:17)2011
   Chargueraud Arthur, 2017, Journal of Automated Reasoning
   Danielsson NA, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P133, DOI 10.1145/1328438.1328457
   DRISCOLL JR, 1989, J COMPUT SYST SCI, V38, P86, DOI 10.1016/0022-0000(89)90034-2
   Hackett J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341718
   Handley Martin A. T., 2020, Proceedings of the ACM on Programming Languages, V4, DOI 10.1145/3371092
   Haslbeck MPL, 2021, LECT NOTES COMPUT SC, V12648, P292, DOI 10.1007/978-3-030-72019-3_11
   Haslbeck MPL, 2018, LECT NOTES COMPUT SC, V10805, P155, DOI 10.1007/978-3-319-89960-2_9
   Hoffmann Jan, 2013, Proceedings of the 2013 28th Annual ACM/IEEE Symposium on Logic in Computer Science, P124, DOI 10.1109/LICS.2013.18
   HUGHES J, 1989, COMPUT J, V32, P98, DOI 10.1093/comjnl/32.2.98
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Madhavan R, 2017, ACM SIGPLAN NOTICES, V52, P330, DOI 10.1145/3093333.3009874
   Marlow S, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P65
   McCarthy Jay, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P144, DOI 10.1007/978-3-319-29604-3_10
   Mével G, 2019, LECT NOTES COMPUT SC, V11423, P3, DOI 10.1007/978-3-030-17184-1_1
   Nipkow T, 2019, J AUTOM REASONING, V62, P367, DOI 10.1007/s10817-018-9459-3
   Okasaki Chris, 1999, PURELY FUNCTIONAL DA, DOI DOI 10.1017/CBO9780511530104
   Pilkiewicz Alexandre, 2011, Types in Language Design and Implementation ( TLDI)
   Pottier Francois, 2023, Thunks and Debits in Separation Logic with Time Credits: Coq Formalization
   TARJAN RE, 1985, SIAM J ALGEBRA DISCR, V6, P306, DOI 10.1137/0606031
   Yao Li, 2021, Proceedings of the ACM on Programming Languages, V5, DOI 10.1145/3473585
   Zhan Bohua, 2018, INT JOINT C AUT REAS
NR 22
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 50
DI 10.1145/3632892
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400051
OA Green Published, gold
DA 2024-08-05
ER

PT J
AU Cutler, JW
   Disselkoen, C
   Eline, A
   He, SB
   Headley, K
   Hicks, M
   Hietala, K
   Ioannidis, E
   Kastner, J
   Mamat, A
   Mcadams, D
   McCutchen, M
   Rungta, N
   Torlak, E
   Wells, AM
AF Cutler, Joseph W.
   Disselkoen, Craig
   Eline, Aaron
   He, Shaobo
   Headley, Kyle
   Hicks, Michael
   Hietala, Kesha
   Ioannidis, Eleftherios
   Kastner, John
   Mamat, Anwar
   Mcadams, Darin
   McCutchen, Matt
   Rungta, Neha
   Torlak, Emina
   Wells, Andrew M.
TI Cedar: A New Language for Expressive, Fast, Safe, and Analyzable
   Authorization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Authorization; Formal models; Policies as code
AB Cedar is a new authorization policy language designed to be ergonomic, fast, safe, and analyzable. Rather than embed authorization logic in an application's code, developers can write that logic as Cedar policies and delegate access decisions to Cedar's evaluation engine. Cedar's simple and intuitive syntax supports common authorization use-cases with readable policies, naturally leveraging concepts from role-based, attribute-based, and relation-based access control models. Cedar's policy structure enables access requests to be decided quickly. Cedar's policy validator leverages optional typing to help policy writers avoid mistakes, but not get in their way. Cedar's design has been finely balanced to allow for a sound and complete logical encoding, which enables precise policy analysis, e.g., to ensure that when refactoring a set of policies, the authorized permissions do not change. We have modeled Cedar in the Lean programming language, and used Lean's proof assistant to prove important properties of Cedar's design. We have implemented Cedar in Rust, and released it open-source. Comparing Cedar to two open-source languages, OpenFGA and Rego, we find (subjectively) that Cedar has equally or more readable policies, but (objectively) performs far better.
C1 [Cutler, Joseph W.; Ioannidis, Eleftherios] Univ Penn, Philadelphia, PA 19104 USA.
   [Disselkoen, Craig; Eline, Aaron; He, Shaobo; Hicks, Michael; Hietala, Kesha; Kastner, John; Mcadams, Darin; Rungta, Neha; Torlak, Emina; Wells, Andrew M.] Amazon Web Serv, Seattle, WA 98109 USA.
   [Headley, Kyle; McCutchen, Matt] Unaffiliated, USA, Springfield, MA USA.
   [Mamat, Anwar] Univ Maryland, Baltimore, MD USA.
C3 University of Pennsylvania; Amazon.com; University System of Maryland;
   University of Maryland Baltimore
RP Cutler, JW (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM jwc@seas.upenn.edu; cdiss@amazon.com; aeline@amazon.com;
   shaobohe@amazon.com; kylenheadley@gmail.com; mwhicks@amazon.com;
   khieta@amazon.com; elefthei@seas.upenn.edu; jkastner@amazon.com;
   anwar@umd.edu; darinm@amazon.com; matt@mattmccutchen.net;
   rungta@amazon.com; torlaket@amazon.com; anmwells@amazon.com
OI Cutler, Joseph/0000-0001-9399-9308; Kastner, John/0000-0002-1273-5990; ,
   Anwar Mamat/0009-0007-1184-7206; Hicks, Michael/0000-0002-2759-9223;
   Disselkoen, Craig/0000-0003-4358-2963; Hietala,
   Kesha/0000-0002-2724-0974
CR [Anonymous], 1992, 15 NAT COMP SEC C
   Aspinall D, 1995, LECT NOTES COMPUT SC, V933, P1, DOI 10.1007/BFb0022243
   authzed-spicedb, 2024, spicedb
   aws-iam, 2024, Access Management-AWS Identity and Access Management (IAM)
   azure-policy, 2024, Azure policy documentation
   Backes J., 2018, 2018 FORMAL METHODS, P1, DOI DOI 10.23919/FMCAD.2018.8602994
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Basin D., 2011, P 16 ACM S ACCESS CO, P1, DOI [10.1145/1998441.1998443, DOI 10.1145/1998441.1998443]
   Blaze M., 1998, Financial Cryptography. Second International Conference, FC'98 Proceedings, P254, DOI 10.1007/BFb0055488
   cargo-fuzz, 2023, Rust Fuzz Book
   Caserio C, 2022, SENSORS-BASEL, V22, DOI 10.3390/s22082984
   Clavel Manuel., 2010, Electronic Communications of the EASST, V24
   Crary K., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P262, DOI 10.1145/292540.292564
   Cutler JW, 2024, Arxiv, DOI arXiv:2403.04651
   Damianou N, 2001, LECT NOTES COMPUT SC, V1995, P18
   Dania C, 2016, 19TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS'16), P65, DOI 10.1145/2976767.2976774
   Dantsin E, 2001, ACM COMPUT SURV, V33, P374, DOI 10.1145/502807.502810
   de Moura L, 2021, LECT NOTES ARTIF INT, V12699, P625, DOI 10.1007/978-3-030-79876-5_37
   Dulay N., 2001, 2001 IEEE/IFIP International Symposium on Integrated Network Management Proceedings. Integrated Network Management VII. Integrated Management Strategies for the New Millennium (Cat. No.01EX470), P529, DOI 10.1109/INM.2001.918064
   Eiers W, 2023, PROCEEDINGS OF THE 32ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, ISSTA 2023, P564, DOI 10.1145/3597926.3598078
   Eiers W, 2022, IEEE INT CONF AUTOM, DOI 10.1145/3551349.3559530
   Eiers W, 2022, PROC INT CONF SOFTW, P1805, DOI 10.1145/3510003.3510233
   Fisler K, 2005, PROC INT CONF SOFTW, P196
   gcp-iam, 2024, Identity and Access Management | IAM | Google Cloud
   Gunter CA, 2000, SOFTWARE PRACT EXPER, V30, P1609, DOI 10.1002/1097-024X(200012)30:15<1609::AID-SPE334>3.0.CO;2-5
   Hoare C.A.R, 2009, QCON C
   Hu VC, 2015, COMPUTER, V48, P85, DOI 10.1109/MC.2015.33
   Hughes Graham, 2008, International Journal on Software Tools for Technology Transfer, V10, P503, DOI 10.1007/s10009-008-0087-9
   Jim T, 2001, P IEEE S SECUR PRIV, P106, DOI 10.1109/SECPRI.2001.924291
   Li NH, 2005, J ACM, V52, P474, DOI 10.1145/1066100.1066103
   Lodderstedt Torsten., 2002, UML 02 P 5 INT C UNI, P426, DOI [DOI 10.1007/3-540-45800-X_33, DOI 10.1007/3-540-45800-X33]
   Madden Neil., 2022, Is Datalog a good language for authorization?
   McKeeman William M., 1998, Digit. Tech. J., V10, P100
   Meng BL, 2017, LECT NOTES ARTIF INT, V10395, P148, DOI 10.1007/978-3-319-63046-5_10
   MITRE, 2023, CWE Top 25 Most Dangerous Software Weaknesses
   OASIS, 2013, Extensible Access Control Markup Language (XACML) version 3.0
   OASIS Standard, 2024, ALFA-the Abbreviated Language for Authorization
   OMG Standard, 2014, Object Constraint Language (OCL)
   OPA, 2023, Policy-based control for cloud native environments
   OPA-linear, 2023, Open Policy Agent documentation: Linear fragment
   OpenFGA, 2023, OpenFGA: Relationship-based access control made fast, scalable, and easy to use
   OpenFGA, 2023, OpenFGA GitHub sample store
   OpenFGA, 2023, OpenFGA Google Drive sample store
   Or Weis, 2022, What is Policy as Code?
   ory-keto, 2024, Open Source (Go) implementation of "Zanzibar: Google's Consistent, Global Authorization System".
   Palka M.H., 2011, Proceeding of the 6th international workshop on Automation of software test, AST '11, P91
   Pang RM, 2019, PROCEEDINGS OF THE 2019 USENIX ANNUAL TECHNICAL CONFERENCE, P33
   Porncharoenwase S, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498709
   Quacky, 2022, Quacky
   Rego Policy Language: Schema, 2023, Policy Language: Schema
   Sandall Torin., 2017, Optimizing OPA: Rule indexing
   Sandall Torin., 2020, [OPA issue] Implement loop-invariant code motion optimization
   SHMUELI O, 1993, J LOGIC PROGRAM, V15, P231, DOI 10.1016/0743-1066(93)90040-N
   Tuncay Tekle K., 2010, P 12 INT ACM SIGPLAN, P35, DOI DOI 10.1145/1836089.1836094
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
NR 55
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 118
DI 10.1145/3649835
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600025
OA gold
DA 2024-08-05
ER

PT J
AU Naik, A
   Stein, A
   Wu, YJ
   Naik, M
   Wong, E
AF Naik, Aaditya
   Stein, Adam
   Wu, Yinjun
   Naik, Mayur
   Wong, Eric
TI TorchQL: A Programming Framework for Integrity Constraints in Machine
   Learning
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Machine Learning; Integrity Constraints; Query Languages
AB Finding errors in machine learning applications requires a thorough exploration of their behavior over data. Existing approaches used by practitioners are often ad-hoc and lack the abstractions needed to scale this process. We present TorchQL, a programming framework to evaluate and improve the correctness of machine learning applications. TorchQL allows users to write queries to specify and check integrity constraints over machine learning models and datasets. It seamlessly integrates relational algebra with functional programming to allow for highly expressive queries using only eight intuitive operators. We evaluate TorchQL on diverse use-cases including finding critical temporal inconsistencies in objects detected across video frames in autonomous driving, finding data imputation errors in time-series medical records, finding data labeling errors in real-world images, and evaluating biases and constraining outputs of language models. Our experiments show that TorchQL enables up to 13x faster query executions than baselines like Pandas and MongoDB, and up to 40% shorter queries than native Python. We also conduct a user study and find that TorchQL is natural enough for developers familiar with Python to specify complex integrity constraints.
C1 [Naik, Aaditya; Stein, Adam; Wu, Yinjun; Naik, Mayur; Wong, Eric] Univ Penn, Philadelphia, PA 19104 USA.
C3 University of Pennsylvania
RP Naik, A (corresponding author), Univ Penn, Philadelphia, PA 19104 USA.
EM asnaik@seas.upenn.edu; steinad@seas.upenn.edu; wuyinjun@seas.upenn.edu;
   mhnaik@seas.upenn.edu; exwong@cis.upenn.edu
OI NAIK, AADITYA/0000-0002-3100-0455; NAIK, MAYUR/0000-0003-1348-8618;
   Wong, Eric/0000-0002-8568-6659
FU NSF [2313010]; NSF Graduate Research Fellowship; Google PhD Fellowship
FX We are thankful to the anonymous reviewers for their insightful feedback
   that helped to improve the paper, as well as the participants of the
   user study. This research was supported by NSF award #2313010, an NSF
   Graduate Research Fellowship, and a Google PhD Fellowship.
CR Abadi DJ, 2009, PROC VLDB ENDOW, V2, P1664, DOI 10.14778/1687553.1687625
   Abid A, 2021, AIES '21: PROCEEDINGS OF THE 2021 AAAI/ACM CONFERENCE ON AI, ETHICS, AND SOCIETY, P298, DOI 10.1145/3461702.3462624
   Anders CJ, 2022, INFORM FUSION, V77, P261, DOI 10.1016/j.inffus.2021.07.015
   [Anonymous], 2022, Stream Analytics Query Language Reference
   ArangoDB, 2023, ArangoDB Query Language (AQL) Introduction: ArangoDB Documentation
   Augenstein S, 2020, Arxiv, DOI arXiv:1911.06679
   Banker K., 2016, MongoDB in action: covers MongoDB version 3.0
   Beery S, 2020, Arxiv, DOI arXiv:2004.10340
   Beurer-Kellner L, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591300
   Bhadra S, 2015, NEUROCOMPUTING, V160, P34, DOI 10.1016/j.neucom.2014.10.083
   Bolya Daniel, 2020, Computer Vision - ECCV 2020. 16th European Conference. Proceedings. Lecture Notes in Computer Science (LNCS 12348), P558, DOI 10.1007/978-3-030-58580-8_33
   Cadamuro Gabriel, 2016, ICML WORKSH REL MACH, V103
   Changliu Liu, 2021, Foundations and Trends in Optimization, V4, P244, DOI 10.1561/2400000035
   Chase H., 2022, LangChain
   Cheung A, 2013, ACM SIGPLAN NOTICES, V48, P3, DOI 10.1145/2499370.2462180
   Chirkova R, 2011, FOUND TRENDS DATABAS, V4, P295, DOI 10.1561/1900000020
   Cobbe K, 2021, Arxiv, DOI arXiv:2110.14168
   CODD EF, 1970, COMMUN ACM, V13, P377, DOI 10.1145/357980.358007
   Cordts M, 2016, PROC CVPR IEEE, P3213, DOI 10.1109/CVPR.2016.350
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Du WJ, 2023, EXPERT SYST APPL, V219, DOI 10.1016/j.eswa.2023.119619
   Fremont DJ, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P63, DOI 10.1145/3314221.3314633
   Garcia- Molina Hector, 2008, DATABASE SYSTEMS COM
   Godfrey P, 1998, SPRING INT SER ENG C, P265
   Goyal P, 2018, Arxiv, DOI arXiv:1706.02677
   Havaldar Shreya, 2023, P 13 WORKSHOP COMPUT, P202
   He KM, 2016, PROC CVPR IEEE, P770, DOI 10.1109/CVPR.2016.90
   Honnibal M., 2017, SPACY 2 NATURAL LANG
   I Herman, 2013, Eleven sparql 1.1 specifications are w3c recommendation
   Ilyas A., 2022, arXiv
   Jain Jitesh, 2022, arXiv
   Jia Z., 2019, Proceedings of Machine Learning and Systems, V1, P27
   Jiang AQ, 2023, Arxiv, DOI arXiv:2310.06825
   Jiang JW, 2017, SIGMOD'17: PROCEEDINGS OF THE 2017 ACM INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P463, DOI 10.1145/3035918.3035933
   Kang Daniel, 2018, NEURIPS MLSYS WORKSH, V3
   Kilpeläinen P, 2012, SOFTWARE PRACT EXPER, V42, P1433, DOI 10.1002/spe.1140
   Kim E., 2020, P IEEE CVF C COMP VI, P11128
   Koh PW, 2017, PR MACH LEARN RES, V70
   Kulesza T., 2015, Proceedings of the 20th International Conference on Intelligent User Interfaces. IUI'15, P126, DOI [10.1145/2678025.2701399, DOI 10.1145/2678025.2701399]
   Kurita K, 2019, GENDER BIAS IN NATURAL LANGUAGE PROCESSING (GEBNLP 2019), P166
   Lee Chonho, 2017, Handbook of Large-Scale Distributed Computing in Smart Healthcare, P11, DOI 10.1007/978-3-319-58280-1_2
   Lemire D, 2010, DATA KNOWL ENG, V69, P3, DOI 10.1016/j.datak.2009.08.006
   Li Tao, 2020, Findings of the Association for Computational Linguistics: EMNLP, P3475, DOI [DOI 10.18653/V1/2020.FINDINGS-EMNLP.311, 10.18653/v1/2020.findings-emnlp.311]
   Liang PP, 2021, PR MACH LEARN RES, V139
   Lyu Q, 2023, Arxiv, DOI arXiv:2301.13379
   Mariano Benjamin, 2022, Proceedings of the ACM on Programming Languages, V6, P1
   Mirhoseini A, 2017, PR MACH LEARN RES, V70
   Naik Aaditya, 2024, Zenodo, DOI 10.5281/ZENODO.10723160
   Naik A, 2023, Arxiv, DOI arXiv:2303.01433
   Nangia N, 2020, PROCEEDINGS OF THE 2020 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP), P1953
   Pirahesh Hamid, 1992, P ACM SIGMOD INT C M, P39
   Pleiss G, 2017, Arxiv, DOI arXiv:1707.06990
   Raffel C, 2020, J MACH LEARN RES, V21
   Salloum S., 2016, International Journal of Data Science and Analytics, V1, P145, DOI [10.1007/s41060-016-0027-9, DOI 10.1007/S41060-016-0027-9]
   Salman H., 2022, When does Bias Transfer in Transfer Learning?" In: arXiv preprint arXiv:2207.02842 (2022)
   Schelter S, 2019, INT CONF MANAGE DATA, P1993, DOI 10.1145/3299869.3320210
   Silva I, 2012, COMPUT CARDIOL CONF, V39, P245
   Singla S, 2021, PROC CVPR IEEE, P12848, DOI 10.1109/CVPR46437.2021.01266
   Singla Sahil, 2021, arXiv
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2908080.2908102, 10.1145/2980983.2908102]
   Smith Eric Michael, 2022, P 2022 C EMPIRICAL M, P9180, DOI DOI 10.18653/V1/2022.EMNLP-MAIN.625
   Srivastava A., 2023, Transactions on machine learning research
   Taori R., 2023, Stanford alpaca: An instruction-following llama model
   The NumPy Team, 2024, NumPy
   The pandas development team, 2023, Zenodo
   Tian YC, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P303, DOI 10.1145/3180155.3180220
   Tukey J. W., 1977, EXPLORATORY DATA ANA, V2
   Wakabayashi Daisuke, 2018, Self-driving uber car kills pedestrian in arizona, where robots roam
   Wang LN, 2018, ACM SIGPLAN NOTICES, V53, P41, DOI 10.1145/3200691.3178491
   Wei JS, 2022, ADV NEUR IN
   Wilson B, 2019, Arxiv, DOI arXiv:1902.11097
   Wong E, 2021, PR MACH LEARN RES, V139
   Yao S, 2023, 11 INT C LEARN REPR
   You C, 2018, PLOS ONE, V13, DOI 10.1371/journal.pone.0195360
   Zaharia M., 2010, HOTCLOUD, V10, P95
   Zech JR, 2018, PLOS MED, V15, DOI 10.1371/journal.pmed.1002683
   Zhao J., 2017, Proceedings of the 2017 Conference on Empirical Methods in Natural Language Processing, P2979, DOI DOI 10.18653/V1/D17-1323
NR 77
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 124
DI 10.1145/3649841
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600031
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Yuan, C
   Villanyi, A
   Carbin, M
AF Yuan, Charles
   Villanyi, Agnes
   Carbin, Michael
TI Quantum Control Machine The Limits of Control Flow in Quantum
   Programming
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantum programming languages; quantum instruction set architectures
ID UNIVERSAL QUANTUM; ALGORITHM
AB Quantum algorithms for tasks such as factorization, search, and simulation rely on control flow such as branching and iteration that depends on the value of data in superposition. High-level programming abstractions for control flow, such as switches, loops, higher-order functions, and continuations, are ubiquitous in classical languages. By contrast, many quantum languages do not provide high-level abstractions for control flow in superposition, and instead require the use of hardware-level logic gates to implement such control flow.
   The reason for this gap is that whereas a classical computer supports control flow abstractions using a program counter that can depend on data, the typical architecture of a quantum computer does not analogously provide a program counter that can depend on data in superposition. As a result, the complete set of control flow abstractions that can be correctly realized on a quantum computer has not yet been established.
   In this work, we provide a complete characterization of the properties of control flow abstractions that are correctly realizable on a quantum computer. First, we prove that even on a quantum computer whose program counter exists in superposition, one cannot correctly realize control flow in quantum algorithms by lifting the classical conditional jump instruction to work in superposition. This theorem denies the ability to directly lift general abstractions for control flow such as the lambda-calculus from classical to quantum programming.
   In response, we present the necessary and sufficient conditions for control flow to be correctly realizable on a quantum computer. We introduce the quantum control machine, an instruction set architecture featuring a conditional jump that is restricted to satisfy these conditions. We show how this design enables a developer to correctly express control flow in quantum algorithms using a program counter in place of logic gates.
C1 [Yuan, Charles; Villanyi, Agnes; Carbin, Michael] MIT, CSAIL, 32 Vassar St, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Yuan, C (corresponding author), MIT, CSAIL, 32 Vassar St, Cambridge, MA 02139 USA.
EM chenhuiy@csail.mit.edu; agivilla@mit.edu; mcarbin@csail.mit.edu
RI Yuan, Charles/KLY-8817-2024
OI Yuan, Charles/0000-0002-4918-4467
FU National Science Foundation [CCF-1751011]; Sloan Foundation
FX We thank Ellie Cheng, Tian Jin, Jesse Michel, Patrick Rall, and Logan
   Weber for helpful feedback on this work, and also Scott Aaronson,
   Soonwon Choi, Isaac Chuang, Aram Harrow, Stacey Jeffrey, Bobak Toussi
   Kiani, and Yuval Sanders for providing references to related work. This
   work was supported in part by the National Science Foundation
   (CCF-1751011) and the Sloan Foundation.
CR Abrams DS, 1997, PHYS REV LETT, V79, P2586, DOI 10.1103/PhysRevLett.79.2586
   Abrams DS, 1999, PHYS REV LETT, V83, P5162, DOI 10.1103/PhysRevLett.83.5162
   Aharonov D., 2001, P 33 ANN ACM S THEOR, P50, DOI [10.1145/380752.380758, DOI 10.1145/380752.380758]
   Altenkirch T, 2005, IEEE S LOG, P249
   Ambainis A, 2004, ANN IEEE SYMP FOUND, P22, DOI 10.1109/FOCS.2004.54
   Ambainis A, 2010, SIAM J COMPUT, V39, P2513, DOI 10.1137/080712167
   Ambainis A., 2001, P 33 ANN ACM S THEOR, P37, DOI [10.1145/380752.380757., DOI 10.1145/380752.380757, 10.1145/380752.380757]
   Andrés-Martínez P, 2022, QUANTUM SCI TECHNOL, V7, DOI 10.1088/2058-9565/ac47f1
   Araújo M, 2014, NEW J PHYS, V16, DOI 10.1088/1367-2630/16/9/093026
   Arrighi P, 2017, INFORM COMPUT, V254, P105, DOI 10.1016/j.ic.2017.04.001
   Arunachalam S, 2015, NEW J PHYS, V17, DOI 10.1088/1367-2630/17/12/123010
   Axelsen HB, 2007, LECT NOTES COMPUT SC, V4649, P56
   Axelsen HB, 2011, LECT NOTES COMPUT SC, V6601, P144, DOI 10.1007/978-3-642-19861-8_9
   Babbush R, 2018, PHYS REV X, V8, DOI 10.1103/PhysRevX.8.041015
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371075
   Bell J S., 1964, Physics, V1, P195, DOI [10.1103/PhysicsPhysiqueFizika.1.195, DOI 10.1103/PHYSICSPHYSIQUEFIZIKA.1.195, 10.1103/Physics-PhysiqueFizika.1.195]
   BENNETT CH, 1973, IBM J RES DEV, V17, P525, DOI 10.1147/rd.176.0525
   Bernstein E, 1997, SIAM J COMPUT, V26, P1411, DOI 10.1137/S0097539796300921
   Berry DW, 2019, QUANTUM-AUSTRIA, V3, DOI 10.22331/q-2019-12-02-208
   Bichsel B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P286, DOI 10.1145/3385412.3386007
   Cheng KW, 2002, ELECTRON LETT, V38, P1343, DOI 10.1049/el:20020949
   Childs AM, 2018, P NATL ACAD SCI USA, V115, P9456, DOI 10.1073/pnas.1801723115
   Childs AM, 2012, QUANTUM INF COMPUT, V12, P901
   Childs Andrew M., 2007, arXiv, DOI [10.48550/ARXIV.QUANTPH/0703015, DOI 10.48550/ARXIV.QUANTPH/0703015]
   Chiribella G, 2013, PHYS REV A, V88, DOI 10.1103/PhysRevA.88.022318
   Cho SM, 2020, IEEE ACCESS, V8, P213244, DOI 10.1109/ACCESS.2020.3039167
   Church Alonzo., 1941, The Calculi of Lambda Conversion, DOI [10.1515/9781400881932, DOI 10.1515/9781400881932]
   Clairambault P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371131
   Clairambault P, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290345
   Kieu TD, 1998, Arxiv, DOI [arXiv:quant-ph/9811001, 10.48550/ARXIV.QUANT-PH/9811001, DOI 10.48550/ARXIV.QUANT-PH/9811001]
   DEUTSCH D, 1985, P ROY SOC LOND A MAT, V400, P97, DOI 10.1098/rspa.1985.0070
   Di Matteo Olivia, 2020, IEEE Transactions on Quantum Engineering, V1, DOI 10.1109/TQE.2020.2965803
   Di Pierro A, 2006, ELECTRON NOTES THEOR, V135, P25, DOI 10.1016/j.entcs.2005.09.018
   Díaz-Caro A, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785834
   Draper T.G., 2000, ARXIV
   Frank Michael, 1999, Ph. D. Dissertation., DOI 1721.1/9464
   Giovannetti V, 2008, PHYS REV LETT, V100, DOI 10.1103/PhysRevLett.100.160501
   Goldreich O, 1996, J ACM, V43, P431, DOI 10.1145/233551.233553
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Harrow AW, 2009, PHYS REV LETT, V103, DOI 10.1103/PhysRevLett.103.150502
   Hasuo I, 2017, ANN PURE APPL LOGIC, V168, P404, DOI 10.1016/j.apal.2016.10.010
   Hietala K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434318
   Hines P, 2011, LECT NOTES PHYS, V813, P941, DOI 10.1007/978-3-642-12821-9_14
   Hines P, 2008, THEOR COMPUT SCI, V409, P1, DOI 10.1016/j.tcs.2008.07.015
   Islam M. S., 2009, Information Technology Journal, V8, P208, DOI 10.3923/itj.2009.208.213
   Kitaev A. Yu., 1995, arXiv, DOI DOI 10.48550/ARXIV.QUANTPH/9511026
   Kitaev AY, 1997, RUSS MATH SURV+, V52, P1191, DOI 10.1070/RM1997v052n06ABEH002155
   Kjaergaard M., 2020, arXiv
   Kornell A, 2021, ELECTRON P THEOR COM, P174, DOI 10.4204/EPTCS.340.9
   Lagana AA, 2009, PHYS REV A, V79, DOI 10.1103/PhysRevA.79.052322
   LANDAUER R, 1961, IBM J RES DEV, V5, P183, DOI 10.1147/rd.53.0183
   Li GS, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428218
   Linden N, 1998, Arxiv, DOI [arXiv:quant-ph/9806054, 10.48550/ARXIV.QUANT-PH/9806054, DOI 10.48550/ARXIV.QUANT-PH/9806054]
   Lloyd S, 2016, NAT COMMUN, V7, DOI 10.1038/ncomms10138
   Low GH, 2024, Arxiv, DOI arXiv:1812.00954
   Low GH, 2019, QUANTUM-AUSTRIA, V3, DOI 10.22331/q-2019-07-12-163
   Malherbe Octavio, 2013, Computation, Logic, Games, and Quantum Foundations. The Many Facets of Samson Abramsky. Essays Dedicated to Samson Abramsky on the Occasion of His 60th Birthday: LNCS 7860, P178, DOI 10.1007/978-3-642-38164-5_13
   Meier F, 2024, Arxiv, DOI [arXiv:2402.00111, 10.48550/arXiv.2402.00111, DOI 10.48550/ARXIV.2402.00111]
   Myers JM, 1997, PHYS REV LETT, V78, P1823, DOI 10.1103/PhysRevLett.78.1823
   Naor Moni, 2001, ACM S THEOR COMP, DOI DOI 10.1145/380752.380844
   Nielsen M.A., 2010, Quantum Computation and Quantum Information: 10th Anniversary Edition, DOI DOI 10.1017/CBO9780511976667
   Nielsen MA, 1997, PHYS REV LETT, V79, P321, DOI 10.1103/PhysRevLett.79.321
   Pagani M, 2014, ACM SIGPLAN NOTICES, V49, P647, DOI 10.1145/2535838.2535879
   Pal Abhinandan, 2022, COMP P ACM SIGPLAN I, DOI [10.1145/3563768.3563959, DOI 10.1145/3563768.3563959]
   Paler A, 2020, PHYS REV A, V102, DOI 10.1103/PhysRevA.102.032608
   Pati AK, 2000, NATURE, V404, P164, DOI 10.1038/35004532
   Paykin J, 2017, ACM SIGPLAN NOTICES, V52, P846, DOI 10.1145/3093333.3009894
   PIPPENGER N, 1979, J ACM, V26, P361, DOI 10.1145/322123.322138
   Proos J, 2003, QUANTUM INF COMPUT, V3, P317
   Rennela M, 2018, ELECTRON NOTES THEOR, V336, P257, DOI 10.1016/j.entcs.2018.03.027
   Rennela M, 2017, ELECTRON P THEOR COM, P161, DOI 10.4204/EPTCS.236.11
   Rines R, 2018, Arxiv, DOI [arXiv:1801.01081, DOI 10.48550/ARXIV.1801.01081]
   Sabry A, 2018, LECT NOTES COMPUT SC, V10803, P348, DOI 10.1007/978-3-319-89366-2_19
   Selinger P, 2004, MATH STRUCT COMP SCI, V14, P527, DOI 10.1017/S0960129504004256
   Seshia SA, 2011, LECT NOTES COMPUT SC, V6605, P388, DOI 10.1007/978-3-642-19835-9_34
   Shenvi N, 2003, PHYS REV A, V67, DOI 10.1103/PhysRevA.67.052307
   Shi YY, 2003, QUANTUM INF COMPUT, V3, P84
   Shor PW, 1997, SIAM J COMPUT, V26, P1484, DOI 10.1137/S0036144598347011
   Sousa M, 2016, ACM SIGPLAN NOTICES, V51, P57, DOI 10.1145/2908080.2908092
   Svore K, 2018, RWDSL2018: PROCEEDINGS OF THE REAL WORLD DOMAIN SPECIFIC LANGUAGES WORKSHOP 2018, DOI 10.1145/3183895.3183901
   Thomsen Michael Kirkedal, 2012, Reversible Computation. Third International Workshop, RC 2011. Revised Papers, P30, DOI 10.1007/978-3-642-29517-1_3
   Treinish Matthew, 2023, Zenodo
   Unruh D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290346
   van Tonder A, 2004, SIAM J COMPUT, V33, P1109, DOI 10.1137/S0097539703432165
   Vieri Carlin, 1998, POW DRIV MICR WORKSH
   Voichick F, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571225
   Wang DS, 2022, COMMUN THEOR PHYS, V74, DOI 10.1088/1572-9494/ac68d8
   Wiebe N, 2012, PHYS REV LETT, V109, DOI 10.1103/PhysRevLett.109.050505
   WOOTTERS WK, 1982, NATURE, V299, P802, DOI 10.1038/299802a0
   Ying MS, 2012, Arxiv, DOI [arXiv:1209.4379, DOI 10.48550/ARXIV.1209.4379]
   Ying MS, 2010, ACTA INFORM, V47, P221, DOI 10.1007/s00236-010-0117-4
   Ying Mingsheng., 2014, Quantum recursion and second quantisation, DOI [10.48550/ARXIV.1405.4443, DOI 10.48550/ARXIV.1405.4443]
   Yokoyama Tetsuo, 2008, Automata, Languages and Programming, DOI [10.1007/978-3-540-70583-3_22, DOI 10.1007/978-3-540-70583-3_22]
   Yu NK, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P542, DOI 10.1145/3453483.3454061
   Yuan Charles, 2024, Zenodo, DOI 10.5281/ZENODO.10452601
   Yuan C, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563297
   Yuan C, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498691
NR 98
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 94
DI 10.1145/3649811
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600001
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Zilberstein, N
   Saliling, A
   Silva, A
AF Zilberstein, Noam
   Saliling, Angelina
   Silva, Alexandra
TI Outcome Separation Logic: Local Reasoning for Correctness and
   Incorrectness with Computational Effects
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Outcome Logic; Separation Logic; Incorrectness
AB Separation logic's compositionality and local reasoning properties have led to significant advances in scalable static analysis. But program analysis has new challenges-many programs display computational effects and, orthogonally, static analyzers must handle incorrectness too. We present Outcome Separation Logic (OSL), a program logic that is sound for both correctness and incorrectness reasoning in programs with varying effects. OSL has a frame rule-just like separation logic-but uses different underlying assumptions that open up local reasoning to a larger class of properties than can be handled by any single existing logic.
   Building on this foundational theory, we also define symbolic execution algorithms that use bi-abduction to derive specifications for programs with effects. This involves a new tri-abduction procedure to analyze programs whose execution branches due to effects such as nondeterministic or probabilistic choice. This work furthers the compositionality promised by separation logic by opening up the possibility for greater reuse of analysis tools across two dimensions: bug-finding vs verification in programs with varying effects.
C1 [Zilberstein, Noam; Saliling, Angelina; Silva, Alexandra] Cornell Univ, Ithaca, NY 14853 USA.
C3 Cornell University
RP Zilberstein, N (corresponding author), Cornell Univ, Ithaca, NY 14853 USA.
EM noamz@cs.cornell.edu; ajs649@cornell.edu; alexandra.silva@cornell.edu
OI Zilberstein, Noam/0000-0001-6388-063X
FU Amazon Research Award; Royal Society Wolfson award; ERC [101002697]
FX This work was supported in part by an Amazon Research Award, a Royal
   Society Wolfson award, and ERC grant Autoprobe (grant agreement
   101002697).
CR Ascari F, 2024, Arxiv, DOI [arXiv:2310.18156, 10.48550/arXiv.2310.18156]
   Baktiev Murat, 2006, Master's thesis
   Bao JL, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470712
   Bao JL, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498719
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371123
   Barthe G, 2015, LECT NOTES COMPUT SC, V9450, P387, DOI 10.1007/978-3-662-48899-7_27
   Batz K, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527310
   Batz K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290347
   Berdine J, 2005, LECT NOTES COMPUT SC, V3780, P52
   Berdine J, 2004, LECT NOTES COMPUT SC, V3328, P97
   Berdine J, 2007, LECT NOTES COMPUT SC, V4590, P178
   Birkedal L, 2008, LECT NOTES COMPUT SC, V5126, P348, DOI 10.1007/978-3-540-70583-3_29
   Birkedal L, 2007, LECT NOTES COMPUT SC, V4423, P93
   Bruni R, 2023, J ACM, V70, DOI 10.1145/3582267
   Bruni R, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470608
   Calcagno C, 2007, IEEE S LOG, P366, DOI 10.1109/LICS.2007.30
   Calcagno C, 2015, LECT NOTES COMPUT SC, V9058, P3, DOI 10.1007/978-3-319-17524-9_1
   Calcagno C, 2011, J ACM, V58, DOI 10.1145/2049697.2049700
   Calcagno C, 2009, ACM SIGPLAN NOTICES, V44, P289, DOI 10.1145/1594834.1480917
   Cîrstea C, 2013, ELECTRON P THEOR COM, P11, DOI 10.4204/EPTCS.126.2
   Cîrstea C, 2014, LECT NOTES COMPUT SC, V8412, P426
   Cousot P., 1977, Conference Record of the Fourth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P238, DOI [10.1145/512950.512973, DOI 10.1145/512950.512973]
   Dardinier T, 2024, Arxiv, DOI [arXiv:2301.10037, 10.48550/ARXIV.2301.10037, DOI 10.48550/ARXIV.2301.10037]
   Delaware B, 2013, ACM SIGPLAN NOTICES, V48, P319, DOI [10.1145/2544174.2500587, 10.1145/2500365.2500587]
   Delaware B, 2013, ACM SIGPLAN NOTICES, V48, P207, DOI 10.1145/2480359.2429094
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Distefano D, 2019, COMMUN ACM, V62, P62, DOI 10.1145/3338112
   Fesefeldt Ira, 2022, LEIBNIZ INT P INFORM, V25, P1, DOI [10.4230/LIPIcs.CONCUR.2022.25, DOI 10.4230/LIPICS.CONCUR.2022.25]
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2775051.2676980, 10.1145/2676726.2676980]
   Kurz A, 2016, J LOG ALGEBR METHODS, V85, P475, DOI 10.1016/j.jlamp.2015.08.002
   Li JM, 2023, Arxiv, DOI arXiv:2304.01339
   Maksimovic Petar, 2023, LEIBNIZ INT P INFORM, V263
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371078
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   Le QL, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527325
   Raad A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498695
   Raad A, 2020, LECT NOTES COMPUT SC, V12225, P225, DOI 10.1007/978-3-030-53291-8_14
   Raad Azalea, 2023, Compositional Non-Termination Proving
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rinetzky N., 2001, Compiler Construction. 10th International Conference, CC 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2027), P133
   Santos JF, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P927, DOI 10.1145/3385412.3386014
   Sextl F, 2023, Arxiv, DOI arXiv:2307.06346
   Sheng Liang, 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P333, DOI 10.1145/199448.199528
   Tassarotti J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290377
   Tatsuta M, 2009, SEFM 2009: SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P179, DOI 10.1109/SEFM.2009.33
   Yang HS, 2002, LECT NOTES COMPUT SC, V2303, P402
   Zilberstein N, 2024, Arxiv, DOI arXiv:2401.04594
   Zilberstein N, 2023, Arxiv, DOI arXiv:2305.04842
   Zilberstein N, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586045
NR 54
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 104
DI 10.1145/3649821
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600011
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Zimmerman, C
   Divincenzo, J
   Aldrich, J
AF Zimmerman, Conrad
   Divincenzo, Jenna
   Aldrich, Jonathan
TI Sound Gradual Verification with Symbolic Execution
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE gradual verification; symbolic execution; static verification; implicit
   dynamic frames; soundness proof
ID PRACTICAL VERIFICATION
AB Gradual verification, which supports explicitly partial specifications and verifies them with a combination of static and dynamic checks, makes verification more incremental and provides earlier feedback to developers. While an abstract, weakest precondition-based approach to gradual verification was previously proven sound, the approach did not provide sufficient guidance for implementation and optimization of the required run-time checks. More recently, gradual verification was implemented using symbolic execution techniques, but the soundness of the approach (as with related static checkers based on implicit dynamic frames) was an open question. This paper puts practical gradual verification on a sound footing with a formalization of symbolic execution, optimized run-time check generation, and run time execution. We prove our approach is sound; our proof also covers a core subset of the Viper tool, for which we are aware of no previous soundness result. Our formalization enabled us to find a soundness bug in an implemented gradual verification tool and describe the fix necessary to make it sound.
C1 [Zimmerman, Conrad] Brown Univ, Providence, RI 02912 USA.
   [Divincenzo, Jenna] Purdue Univ, W Lafayette, IN USA.
   [Aldrich, Jonathan] Carnegie Mellon Univ, Pittsburgh, PA USA.
C3 Brown University; Purdue University System; Purdue University; Carnegie
   Mellon University
RP Zimmerman, C (corresponding author), Brown Univ, Providence, RI 02912 USA.
EM conrad_zimmerman@brown.edu; jennad@purdue.edu;
   jonathan.aldrich@cs.cmu.edu
OI Aldrich, Jonathan/0000-0003-0631-5591
FU National Science Foundation [CCF-1901033]; Google PhD Fellowship
FX This work was supported by the National Science Foundation under Grant
   No. CCF-1901033
   (https://www.nsf.gov/awardsearch/showAward?AWD_ID=1901033) and a Google
   PhD Fellowship.
CR Arnold Rob, 2010, Master's thesis
   Astrauskas V, 2022, LECT NOTES COMPUT SC, V13260, P88, DOI 10.1007/978-3-031-06773-0_5
   Bader J, 2018, LECT NOTES COMPUT SC, V10747, P25, DOI 10.1007/978-3-319-73721-8_2
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Blom Stefan, 2017, Integrated Formal Methods. 13th International Conference, IFM 2017. Proceedings: LNCS 10510, P102, DOI 10.1007/978-3-319-66845-1_7
   Castagna Giuseppe, 2013, Proceedings (Lecture Notes in Computer Science, V7920, P129, DOI [10.1007/978-3-642-39038-8_6, DOI 10.1007/978-3-642-39038-8_6]
   Distefano D, 2008, ACM SIGPLAN NOTICES, V43, P213, DOI 10.1145/1449955.1449782
   Divincenzo J, 2024, Arxiv, DOI arXiv:2210.02428
   Eilers M, 2018, LECT NOTES COMPUT SC, V10981, P596, DOI 10.1007/978-3-319-96145-3_33
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Herms P, 2012, LECT NOTES COMPUT SC, V7152, P2, DOI 10.1007/978-3-642-27705-4_2
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Keuchel S, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547628
   Leino KRM, 2009, LECT NOTES COMPUT SC, V5705, P195, DOI 10.1007/978-3-642-03829-7_7
   Malte Schwerho, 2016, Ph. D. Dissertation, DOI [10.3929/ETHZ-A-010835519, DOI 10.3929/ETHZ-A-010835519]
   Müller P, 2016, LECT NOTES COMPUT SC, V9583, P41, DOI 10.1007/978-3-662-49122-5_2
   Mulder I, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P809, DOI 10.1145/3519939.3523432
   Parkinson M, 2005, ACM SIGPLAN NOTICES, V40, P247, DOI 10.1145/1047659.1040326
   Parthasarathy G, 2021, LECT NOTES COMPUT SC, V12760, P704, DOI 10.1007/978-3-030-81688-9_33
   Phang KY, 2010, ACM SIGPLAN C PROGRA, P436
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   Smans J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2160910.2160911
   Summers AJ, 2013, LECT NOTES COMPUT SC, V7920, P129, DOI 10.1007/978-3-642-39038-8_6
   Vogels F, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(3:19)2015
   Vogels F, 2009, LECT NOTES COMPUT SC, V5404, P570
   Vogels Frederic, 2010, P 2010 ACM S APPL CO, P2517, DOI [10.1145/1774088.1774610, DOI 10.1145/1774088.1774610]
   Wise J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428296
   Zimmerman Conrad, 2024, arXiv
NR 31
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 85
DI 10.1145/3632927
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400086
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Attouche, L
   Baazizi, MA
   Colazzo, D
   Ghelli, G
   Sartiani, C
   Scherzinger, S
AF Attouche, Lyes
   Baazizi, Mohamed-Amine
   Colazzo, Dario
   Ghelli, Giorgio
   Sartiani, Carlo
   Scherzinger, Stefanie
TI Validation of Modern JSON Schema: Formalization and Complexity
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE JSON Schema; complexity of validation
AB JSON Schema is the de-facto standard schema language for JSON data. The language went through many minor revisions, but the most recent versions of the language, starting from Draft 2019-09, added two novel features, dynamic references and annotation-dependent validation, that change the evaluation model. Modern JSON Schema is the name used to indicate all versions from Draft 2019-09, which are characterized by these new features, while Classical JSON Schema is used to indicate the previous versions.
   These new "modern" features make the schema language quite difficult to understand and have generated many discussions about the correct interpretation of their official specifications; for this reason, we undertook the task of their formalization. During this process, we also analyzed the complexity of data validation in Modern JSON Schema, with the idea of confirming the polynomial complexity of Classical JSON Schema validation, and we were surprised to discover a completely different truth: data validation, which is expected to be an extremely efficient process, acquires, with Modern JSON Schema features, a PSPACE complexity.
   In this paper, we give the first formal description of Modern JSON Schema, which we have discussed with the community of JSON Schema tool developers, and which we consider a central contribution of this work. We then prove that its data validation problem is PSPACE-complete. We prove that the origin of the problem lies in the Draft 2020-12 version of dynamic references, and not in annotation-dependent validation. We study the schema and data complexities, showing that the problem is PSPACE-complete with respect to the schema size even with a fixed instance but is in P when the schema is fixed and only the instance size is allowed to vary. Finally, we run experiments that show that there are families of schemas where the difference in asymptotic complexity between dynamic and static references is extremely visible, even with small schemas.
C1 [Attouche, Lyes; Colazzo, Dario] Univ Paris Dauphine PSL, Paris, France.
   [Baazizi, Mohamed-Amine] Sorbonne Univ, Paris, France.
   [Ghelli, Giorgio] Univ Pisa, Pisa, Italy.
   [Sartiani, Carlo] Univ Basilicata, Potenza, Italy.
   [Scherzinger, Stefanie] Univ Passau, Passau, Germany.
C3 Universite PSL; Universite Paris-Dauphine; Sorbonne Universite;
   University of Pisa; University of Basilicata; University of Passau
RP Attouche, L (corresponding author), Univ Paris Dauphine PSL, Paris, France.
EM lyes.attouche@dauphine.fr; baazizi@ia.lip6.fr;
   dario.colazzo@dauphine.fr; ghelli@di.unipi.it; carlo.sartiani@unibas.it;
   stefanie.scherzinger@uni-passau.de
OI Attouche, Lyes/0009-0008-8454-6364; Sartiani, Carlo/0000-0002-6514-3569;
   Baazizi, Mohamed-Amine/0000-0003-2728-5838
FU Deutsche Forschungsgemeinschaft (DFG, German Research Foundation)
   [385808805]; European Union [101079043]; Ministero dell'Universita e
   della Ricerca (MUR, Ministry of University and Research) under the PRIN
   Project "BioConceptum" [2022AEEKXS]
FX This work is partly funded by Deutsche Forschungsgemeinschaft (DFG,
   German Research Foundation) grant #385808805.; This work is partly
   supported by the European Union under the scheme
   HORIZON-INFRA-2021DEV-02-01 -Preparatory phase of new ESFRI research
   infrastructure projects, Grant Agreement n.101079043, "SoBigData RI PPP:
   SoBigData RI Preparatory Phase Project".; This work is partly supported
   by Ministero dell'Universita e della Ricerca (MUR, Ministry of
   University and Research) under the PRIN Project "BioConceptum" (grant
   #2022AEEKXS).; The authors thank Stefan Klessinger and Sajal Jain for
   integrating academic validators with the Bowtie framework, and Thomas
   Kirz for assisting with the gnuplot visualizations. The authors thank
   Julian Bergman, author of the Bowtie framework, for making timeouts
   configurable for our experiments.
CR Andrews Henry., 2023, Modern JSON Schema
   [Anonymous], 2023, JSON Schema validators
   [Anonymous], 2023, Hyperjump JSON Schema Validator
   [Anonymous], 2023, Ajv JSON Schema validator
   Attouche L, 2024, Arxiv, DOI arXiv:2307.10034
   Attouche Lyes, 2023, Zenodo, DOI 10.5281/ZENODO.10019663
   Attouche L, 2022, PROC VLDB ENDOW, V15, P4002, DOI 10.14778/3565838.3565852
   Attouche Lyes, 2023, ModernJSONSchemaValidator
   Baazizi Mohamed Amine, 2019, P EDBT, P437
   Baazizi MA, 2019, INT CONF MANAGE DATA, P2060, DOI 10.1145/3299869.3314032
   Bergman Julian, 2023, Bowtie JSON Schema Meta Validator
   Bergman Julian, 2023, JSON-Schema-Test-Suite (draft2020-12)
   Berners-Lee T., 2005, Uniform resource identifiers (URI): Generic syntax
   Bourhis P, 2020, INFORM SYST, V89, DOI 10.1016/j.is.2019.101478
   Bourhis P, 2017, PODS'17: PROCEEDINGS OF THE 36TH ACM SIGMOD-SIGACT-SIGAI SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P123, DOI 10.1145/3034786.3056120
   Galiegue Francis, 2013, Technical Report
   Henglein F., 1994, Journal of Functional Programming, V4, P435, DOI 10.1017/S0956796800001143
   Jacobson Mark, 2021, The meaning of "additionalProperties"has changed
   JSON Schema Org, 2022, JSON Schema
   Martens W, 2006, ACM T DATABASE SYST, V31, P770, DOI 10.1145/1166074.1166076
   Martens W, 2009, SIAM J COMPUT, V39, P1486, DOI 10.1137/080743457
   Neal Oliver, 2022, Ambiguous behaviour of "additionalProperties"when invalid
   Pezoa F, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON WORLD WIDE WEB (WWW'16), P263, DOI 10.1145/2872427.2883029
   Sipser M., 2012, Introduction to the Theory of Computation
   Stockmeyer L. J., 1973, P ACM S THEOR COMP, P1, DOI [10.1145/800125.804029, DOI 10.1145/800125.804029]
   Vardi M.Y., 1982, P 14 ANN ACM S THEOR, P137, DOI [10.1145/800070.802186, DOI 10.1145/800070.802186]
   Wright A., 2017, Technical Report
   Wright A., 2022, Technical Report
   Wright A., 2019, Technical Report
NR 29
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 49
DI 10.1145/3632891
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400050
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Hague, M
   Jez, A
   Lin, AW
AF Hague, Matthew
   Jez, Artur
   Lin, Anthony W.
TI Parikh's Theorem Made Symbolic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Symbolic Automata; Infinite Alphabets; Decision Procedures; Sequence
   Theory; String Constraints; Abstraction; Satisfiability Modulo Theories
ID AUTOMATA
AB Parikh's Theorem is a fundamental result in automata theory with numerous applications in computer science. These include software verification (e.g. infinite-state verification, string constraints, and theory of arrays), verification of cryptographic protocols (e.g. using Horn clauses modulo equational theories) and database querying (e.g. evaluating path-queries in graph databases), among others. Parikh's Theorem states that the letter-counting abstraction of a language recognized by finite automata or context-free grammars is definable in Linear Integer Arithmetic (a.k.a. Presburger Arithmetic). In fact, there is a linear-time algorithm computing existential Presburger formulas capturing such abstractions, which enables an efficient analysis via SMT-solvers. Unfortunately, real-world applications typically require large alphabets (e.g. Unicode, containing a million of characters) - which are well-known to be not amenable to explicit treatment of the alphabets - or even worse infinite alphabets.
   Symbolic automata have proven in the last decade to be an effective algorithmic framework for handling large finite or even infinite alphabets. A symbolic automaton employs an effective boolean algebra, which offers a symbolic representation of character sets (i.e. in terms of predicates) and often lends itself to an exponentially more succinct representation of a language. Instead of letter-counting, Parikh's Theorem for symbolic automata amounts to counting the number of times different predicates are satisfied by an input sequence. Unfortunately, naively applying Parikh's Theorem from classical automata theory to symbolic automata yields existential Presburger formulas of exponential size. In this paper, we provide a new construction for Parikh's Theorem for symbolic automata and grammars, which avoids this exponential blowup: our algorithm computes an existential formula in polynomial-time over (quantifier-free) Presburger and the base theory. In fact, our algorithm extends to the model of parametric symbolic grammars, which are one of the most expressive models of languages over infinite alphabets. We have implemented our algorithm and show it can be used to solve string constraints that are difficult to solve by existing solvers.
C1 [Hague, Matthew] Royal Holloway Univ London, Dept Comp Sci, Egham Hill, Egham TW20 0EX, Surrey, England.
   [Jez, Artur] Univ Wroclaw, Inst Comp Sci, Joliot Curie 15, PL-50383 Wroclaw, Poland.
   [Lin, Anthony W.] Univ Kaiserslautern Landau, Kaiserslautern, Germany.
   [Lin, Anthony W.] MPI SWS, Paul Ehrlich Str,Bldg G 26, DE-67663 Kaiserslautern, Germany.
C3 University of London; Royal Holloway University London; University of
   Wroclaw
RP Hague, M (corresponding author), Royal Holloway Univ London, Dept Comp Sci, Egham Hill, Egham TW20 0EX, Surrey, England.
EM matthew.hague@rhul.ac.uk; aje@cs.uni.wroc.pl; awlin@mpi-sws.org
OI Jez, Artur/0000-0003-4321-3105
FU National Science Centre, Poland [2017/26/E/ST6/00191]; European Research
   Council under European Union [101089343]
FX We thank anonymous reviewers, Nikolaj Bjorner, Oliver Markgraf, and
   Margus Veanes for helpful comments. Artur Jez was supported under
   National Science Centre, Poland project number 2017/26/E/ST6/00191.
   Anthony Lin was supported by European Research Council under European
   Union's Horizon research and innovation programme (grant agreement no
   101089343).
CR Abdulla PA, 2019, LECT NOTES COMPUT SC, V11781, P277, DOI 10.1007/978-3-030-31784-3_16
   Abdulla PA, 2017, ACM SIGPLAN NOTICES, V52, P602, DOI [10.1145/3140587.3062384, 10.1145/3062341.3062384]
   Abdulla PA, 2014, LECT NOTES COMPUT SC, V8559, P150, DOI 10.1007/978-3-319-08867-9_10
   Amadini R, 2019, LECT NOTES COMPUT SC, V11494, P1, DOI 10.1007/978-3-030-19212-9_1
   [Anonymous], 2005, International Conference on World Wide Web, DOI DOI 10.1145/1060745.1060809
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Barceló P, 2012, ACM T DATABASE SYST, V37, DOI 10.1145/2389241.2389250
   Barner S., 2006, Diploma Thesis
   BARRETT C., 2017, Technical report
   Benedikt M, 2013, LECT NOTES COMPUT SC, V7795, P32, DOI 10.1007/978-3-642-36742-7_3
   Blahoudek F, 2023, LECT NOTES COMPUT SC, V14000, P403, DOI 10.1007/978-3-031-27481-7_23
   Bouajjani A, 2003, ACM SIGPLAN NOTICES, V38, P62, DOI 10.1145/640128.604137
   Brunet Paul, 2019, LIPIcs, V107, P1, DOI [10.4230/LIPIcs.ICALP.2019.107, DOI 10.4230/LIPICS.ICALP.2019.107]
   Chen T, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498707
   Chen TL, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290362
   Chen TL, 2020, LECT NOTES COMPUT SC, V12302, P325, DOI 10.1007/978-3-030-59152-6_18
   Christensen AS, 2003, LECT NOTES COMPUT SC, V2694, P1
   D'Antoni L, 2021, COMMUN ACM, V64, P86, DOI 10.1145/3419404
   D'Antoni L, 2019, LECT NOTES COMPUT SC, V11561, P3, DOI 10.1007/978-3-030-25540-4_1
   D'Antoni L, 2017, LECT NOTES COMPUT SC, V10426, P47, DOI 10.1007/978-3-319-63387-9_3
   D'Antoni L, 2014, LECT NOTES COMPUT SC, V8559, P209, DOI 10.1007/978-3-319-08867-9_14
   Daca P, 2016, LECT NOTES COMPUT SC, V9780, P230, DOI 10.1007/978-3-319-41540-6_13
   David C, 2012, ACM T DATABASE SYST, V37, DOI 10.1145/2338626.2338632
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Diep B.P., 2018, 2018 FORM METH COMP, P1, DOI [DOI 10.23919/FMCAD.2018.8602997, 10.23919/FMCAD, DOI 10.23919/FMCAD]
   Eisenbrand F, 2006, OPER RES LETT, V34, P564, DOI 10.1016/j.orl.2005.09.008
   Esparza J., 1997, Fundamenta Informaticae, V31, P13
   Esparza J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P499, DOI 10.1145/1926385.1926443
   Faran R, 2020, LECT NOTES COMPUT SC, V12011, P161, DOI 10.1007/978-3-030-38919-2_14
   Figueira D, 2022, PROCEEDINGS OF THE 41ST ACM SIGMOD-SIGACT-SIGAI SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS (PODS '22), P189, DOI 10.1145/3517804.3524159
   Figueira Diego, 2022, LICS 22 37 ANN ACM I, V37, P1, DOI DOI 10.1145/3531130.3533354
   Gange G, 2016, THEOR COMPUT SCI, V625, P1, DOI 10.1016/j.tcs.2016.01.026
   Gange G, 2015, LECT NOTES COMPUT SC, V9058, P422, DOI 10.1007/978-3-319-17524-9_31
   Grumberg O, 2010, LECT NOTES COMPUT SC, V6031, P561, DOI 10.1007/978-3-642-13089-2_47
   Hague Matthew, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P260, DOI 10.1007/978-3-642-31424-7_22
   Hague Matthew, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P743, DOI 10.1007/978-3-642-22110-1_60
   Hague Matthew, 2023, Zenodo, DOI 10.5281/ZENODO.10125861
   Hofman P, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470626
   Janku Petr, 2019, Lecture Notes in Computer Science, V12013, P491, DOI [10.1007/978-3-030- 45093-9_59, DOI 10.1007/978-3-030-45093-9_59]
   Jez Artur, 2023, Computer Aided Verification: 35th International Conference, CAV 2023, Proceedings. Lecture Notes in Computer Science (13965), P18, DOI 10.1007/978-3-031-37703-7_2
   Kopczynski E, 2010, IEEE S LOG, P80, DOI 10.1109/LICS.2010.21
   Kozen DC., 1997, Automata and Computability. Undergraduate Texts in Computer Science
   Kroening D, 2008, TEXTS THEOR COMPUT S, P1
   Laroussinie Francois, 2010, Proceedings of the 2010 17th International Symposium on Temporal Representation and Reasoning (TIME 2010), P51, DOI 10.1109/TIME.2010.20
   Laroussinie F, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(1:03)2013
   Lin AW, 2016, ACM SIGPLAN NOTICES, V51, P123, DOI 10.1145/2914770.2837641
   Long Z, 2012, LECT NOTES COMPUT SC, V7212, P362, DOI 10.1007/978-3-642-28872-2_25
   Loring B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P425, DOI 10.1145/3314221.3314645
   Moerman J, 2017, ACM SIGPLAN NOTICES, V52, P613, DOI 10.1145/3093333.3009879
   Moseley D, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591262
   Nelson G., 1979, ACM Transactions on Programming Languages and Systems, V1, P245, DOI 10.1145/357073.357079
   PARIKH RJ, 1966, J ACM, V13, P570, DOI 10.1145/321356.321364
   Pham LH, 2018, PROC IEEE ACM INT C, P268, DOI 10.1145/3183440.3194964
   Raya Rodrigo, 2023, The Complexity of Checking Non-Emptiness in Symbolic Tree Automata
   Saxena P, 2010, P IEEE S SECUR PRIV, P513, DOI 10.1109/SP.2010.38
   Sipser M., 2012, Introduction to the Theory of Computation
   SMTCOMP2022, 2022, The International Satisfiability Modulo Theories (SMT) Competition 2022
   Stanford C, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P620, DOI 10.1145/3453483.3454066
   SymParikh Repository, 2023, Parikh's Theorem Made Symbolic
   To AW, 2009, LECT NOTES COMPUT SC, V5771, P485, DOI 10.1007/978-3-642-04027-6_35
   UUVerifiers, 2023, OSTRICH
   Veanes M, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P137
   Verma KN, 2005, LECT NOTES ARTIF INT, V3632, P337
NR 63
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 65
DI 10.1145/3632907
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400066
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Van Muylder, A
   Nuyts, A
   Devriese, D
AF Van Muylder, Antoine
   Nuyts, Andreas
   Devriese, Dominique
TI Internal and Observational Parametricity for Cubical Agda
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE cubical type theory; parametricity; structure relatedness principle;
   Agda
ID MODEL
AB Two approaches exist to incorporate parametricity into proof assistants based on dependent type theory. On the one hand, parametricity translations conveniently compute parametricity statements and their proofs solely based on individual well-typed polymorphic programs. But they do not offer internal parametricity: formal proofs that any polymorphic program of a certain type satisfies its parametricity statement. On the other hand, internally parametric type theories augment plain type theory with additional primitives out of which internal parametricity can be derived. But those type theories lack mature proof assistant implementations and deriving parametricity in them involves low-level intractable proofs. In this paper, we contribute Agda -bridges: the first practical internally parametric proof assistant. We provide the first mechanized proofs of crucial theorems for internal parametricity, like the relativity theorem. We identify a high-level sufficient condition for proving internal parametricity which we call the structure relatedness principle (SRP) by analogy with the structure identity principle (SIP) of HoTT/UF. We state and prove a general parametricity theorem for types that satisfy the SRP. Our parametricity theorem lets us obtain one-liner proofs of standard internal free theorems. We observe that the SRP is harder to prove than the SIP and provide in Agda -bridges a shallowly embedded type theory to compose types that satisfy the SRP. This type theory is an observational type theory of logical relations and our parametricity theorem ought to be one of its inference rules.
C1 [Van Muylder, Antoine; Nuyts, Andreas; Devriese, Dominique] Katholieke Univ Leuven, DistriNet, Leuven, Belgium.
C3 KU Leuven
RP Van Muylder, A (corresponding author), Katholieke Univ Leuven, DistriNet, Leuven, Belgium.
EM antoine.vanmuylder@kuleuven.be; andreas.nuyts@kuleuven.be;
   dominique.devriese@kuleuven.be
RI Devriese, Dominique/C-5493-2014
OI Devriese, Dominique/0000-0002-3862-6856; Nuyts,
   Andreas/0000-0002-1571-5063
FU Research Foundation -Flanders (FWO) [11H9921N]; Research Foundation -
   Flanders (FWO) - Research Fund KU Leuven [1247922N]; Research Fund KU
   Leuven and by the Research Foundation - Flanders (FWO) [G030320N]
FX We thank Andrea Vezzosi for continuously sharing with us his expertise
   and sound suggestions regarding Agda --cubical and Agda --bridges. We
   thank Rasmus Mogelberg and Andrea Vezzosi for welcoming the first author
   at the IT University of Copenhagen. We thank the reviewers for their
   remarks and suggestions. Antoine Van Muylder holds a PhD fellowship
   (11H9921N) of the Research Foundation -Flanders (FWO). Andreas Nuyts
   holds a Postdoctoral fellowship (1247922N) of the Research Foundation -
   Flanders (FWO). This research is partially funded by the Research Fund
   KU Leuven and by the Research Foundation - Flanders (FWO; G030320N).
CR ABADI M, 1993, THEOR COMPUT SCI, V121, P9, DOI 10.1016/0304-3975(93)90082-5
   Abbott M, 2005, THEOR COMPUT SCI, V342, P3, DOI 10.1016/j.tcs.2005.06.002
   Agda Development Team, 2023, Agda 2.6.3 documentation
   Ahrens B, 2020, IEEE S LOG, P53, DOI 10.1145/3373718.3394755
   Ahrens B, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(1:20)2019
   Altenkirch T, 2007, PLPV'07: PROCEEDINGS OF THE 2007 WORKSHOP ON PROGRAMMING LANGUAGES MEETS PROGRAM VERIFICATION, P57, DOI 10.1145/1292597.1292608
   Altenkirch Thorsten, 2024, P 51 ANN ACM SIGPLAN
   Altenkirch Thorsten, 2022, 28 INT C TYP PROOFS
   Altenkirch Thorsten, 2015, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V69, DOI [10.4230/LIPICS.TYPES.2015.3, DOI 10.4230/LIPICS.TYPES.2015.3]
   An ABS, 2017, Arxiv, DOI arXiv:1705.01163
   Angiuli C, 2021, MATH STRUCT COMP SCI, V31, P424, DOI 10.1017/S0960129521000347
   Angiuli C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434293
   Angiuli Carlo, 2018, LIPIcs, V6
   [Anonymous], 1972, Ph. D. Dissertation
   Atkey R, 2014, ACM SIGPLAN NOTICES, V49, P503, DOI 10.1145/2535838.2535852
   Atkey Robert, 2012, COMPUTER SCI LOGIC C, V16, P46
   Awodey S, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P76, DOI 10.1145/3209108.3209130
   Bellucci R., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P32, DOI 10.1007/BFb0014043
   Bernardy JP, 2015, ELECTRON NOTES THEOR, V319, P67, DOI 10.1016/j.entcs.2015.12.006
   Bernardy JP, 2012, IEEE S LOG, P135, DOI 10.1109/LICS.2012.25
   Bernardy JP, 2012, J FUNCT PROGRAM, V22, P107, DOI 10.1017/S0956796812000056
   Booij Auke Bart, 2016, LIPIcs, V97
   Boulier S, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P182, DOI 10.1145/3018610.3018620
   Cavallo E, 2019, Arxiv, DOI arXiv:1901.00489
   Cavallo E, 2021, LOG METH COMPUT SCI, V17, DOI 10.46298/LMCS-17(4:5)2021
   Cavallo Evan, 2020, Ptt, an experimental implementation of MartinLof type theory with nary internal parametricity
   Cohen C, 2017, J APPL LOG-IFCOLOG, V4, P3127
   GIRARD JY, 1986, THEOR COMPUT SCI, V45, P159, DOI 10.1016/0304-3975(86)90044-7
   Hermida C, 2014, ELECTRON NOTES THEOR, V303, P149, DOI 10.1016/j.entcs.2014.02.008
   Keller C., 2012, CSL, P381
   Krishnaswami Neelakantan R., 2013, LIPIcs, V23, P432, DOI [10.4230/LIPICS, DOI 10.4230/LIPICS, 10.4230/LIPIcs.CSL.2013.432, DOI 10.4230/LIPICS.CSL.2013.432]
   LEIVANT D, 1991, INFORM COMPUT, V93, P93, DOI 10.1016/0890-5401(91)90053-5
   Makkai Michael, 1995, First order logic with dependent sorts, with applications to category theory
   Mannaa Bassel, 2018, Schloss Dagstuhl-LeibnizZentrum fur Informatik, V23, DOI [10.4230/LIPICS.FSCD.2018.23, DOI 10.4230/LIPICS.FSCD.2018.23]
   Moulin Guilhem, 2016, Internalizing Parametricity
   Nuyts A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110276
   Nuyts A, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P779, DOI 10.1145/3209108.3209119
   Nuyts Andreas, 2021, arXiv
   Plotkin G., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P361, DOI 10.1007/BFb0037118
   Pujet L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498693
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Reynolds J. C., 1974, Programming Symposium, P408
   REYNOLDS JC, 1984, LECT NOTES COMPUT SC, V173, P145
   Rijke E., arXiv
   Rose Robert, 2022, 28 INT C TYP PROOFS
   Tabareau N, 2021, J ACM, V68, DOI 10.1145/3429979
   Takeuti Izumi, 2001, Technical report 1217
   The Agda Community, A standard library for Cubical Agda
   The Coq development team, 2022, The Coq proof assistant
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   Van Muylder Antoine, 2023, Agda --bridges VM, DOI [10.5281/zenodo.10009365, DOI 10.5281/ZENODO.10009365]
   Veltri N, 2023, J LOG ALGEBR METHODS, V131, DOI 10.1016/j.jlamp.2022.100846
   Veltri N, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P270, DOI 10.1145/3372885.3373814
   Vezzosi ANDREA, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000034
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Wadler P, 2007, THEOR COMPUT SCI, V375, P201, DOI 10.1016/j.tcs.2006.12.042
NR 56
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 8
DI 10.1145/3632850
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400009
OA gold
DA 2024-08-05
ER

PT J
AU Honoré, W
   Qiu, LF
   Kim, Y
   Shin, JY
   Kim, J
   Shao, Z
AF Honore, Wolf
   Qiu, Longfei
   Kim, Yoonseung
   Shin, Ji-Yong
   Kim, Jieung
   Shao, Zhong
TI AdoB: Bridging Benign and Byzantine Consensus with Atomic Distributed
   Objects
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE distributed systems; consensus protocols; byzantine; liveness; formal
   verification; refinement; proof assistants
ID VERIFICATION
AB Achieving consensus is a challenging and ubiquitous problem in distributed systems that is only made harder by the introduction of malicious byzantine servers. While significant effort has been devoted to the benign and byzantine failure models individually, no prior work has considered the mechanized verification of both in a generic way. We claim this is due to the lack of an appropriate abstraction that is capable of representing both benign and byzantine consensus without either losing too much detail or becoming impractically complex. We build on recent work on the atomic distributed object model to fill this void with a novel abstraction called AdoB. In addition to revealing important insights into the essence of consensus, this abstraction has practical benefits for easing distributed system verification. As a case study, we proved safety and liveness properties for AdoB in Coq, which are the first such mechanized proofs to handle benign and byzantine consensus in a unified manner. We also demonstrate that AdoB faithfully models real consensus protocols by proving it is refined by standard network-level specifications of Fast Paxos and a variant of Jolteon.
C1 [Honore, Wolf; Qiu, Longfei; Kim, Yoonseung; Shao, Zhong] Yale Univ, New Haven, CT 06520 USA.
   [Shin, Ji-Yong] Northeastern Univ, Boston, MA USA.
   [Kim, Jieung] Inha Univ, Incheon, South Korea.
C3 Yale University; Northeastern University; Inha University
RP Honoré, W (corresponding author), Yale Univ, New Haven, CT 06520 USA.
EM wolf.honore@yale.edu; longfei.qiu@yale.edu; yoonseung.kim@yale.edu;
   j.shin@northeastern.edu; jieungkim@inha.ac.kr; zhong.shao@yale.edu
OI Honore, Wolf/0000-0001-8524-1978; Kim, Yoonseung/0000-0001-5294-1046;
   Kim, Jieung/0000-0001-7581-041X; Shin, Ji Yong/0000-0002-1595-4849;
   Shao, Zhong/0000-0001-8184-7649; Qiu, Longfei/0009-0008-7811-4231
FU NSF [2019285, 1763399, 2313433, 2118851]; Defense Advanced Research
   Projects Agency (DARPA); Naval Information Warfare Center Pacific (NIWC
   Pacific) [N66001-21-C-4018]
FX We would like to thank our anonymous reviewers for their helpful
   feedback. This material is based upon work supported in part by NSF
   grants 2019285, 1763399, 2313433, and 2118851, and by the Defense
   Advanced Research Projects Agency (DARPA) and Naval Information Warfare
   Center Pacific (NIWC Pacific) under Contract No. N66001-21-C-4018. Any
   opinions, findings, and conclusions or recommendations expressed in this
   material are those of the authors and do not necessarily reflect the
   views of the funding agencies.
CR Abraham Ittai, 2021, Benign HotStuff
   Agda Development Team, 2005, What is Agda?
   [Anonymous], 1999, The Coq Proof Assistant
   [Anonymous], 2013, etcd
   Berkovits I, 2019, LECT NOTES COMPUT SC, V11562, P245, DOI 10.1007/978-3-030-25543-5_15
   Bertrand Nathalie, 2022, LEIBNIZ INT P INFORM, DOI [10.4230/LIPIcs.DISC.2022.10, DOI 10.4230/LIPICS.DISC.2022.10]
   Bessani A, 2014, I C DEPEND SYS NETWO, P355, DOI 10.1109/DSN.2014.43
   Bravo Manuel., P INT C DISTRIBUTED, DOI DOI 10.4230/LIPICS.DISC.2020.23
   Buchman E., 2016, Ph.D. thesis
   Buchman E, 2019, Arxiv, DOI arXiv:1807.04938
   Burrows M, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P335
   Carr H, 2022, LECT NOTES COMPUT SC, V13260, P616, DOI 10.1007/978-3-031-06773-0_33
   Castro M, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE THIRD SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '99), P173, DOI 10.1145/571637.571640
   Chang F, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P205
   Chaudhuri K., 2008, Proceedings of the LPAR Workshops, Knowledge Exchange: Automated Provers and Proof Assistants (KEAPPA) Workshop, V418, P17
   Cirisci Berk, 2023, Programming Languages and Systems: 32nd European Symposium on Programming, ESOP 2023, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2023, Proceedings. Lecture Notes in Computer Science (13990), P337, DOI 10.1007/978-3-031-30044-8_13
   Dean Jeff, 2009, Designs, Lessons and Advice from Building Large Distributed Systems
   DWORK C, 1988, J ACM, V35, P288, DOI 10.1145/42282.42283
   FISCHER MJ, 1985, J ACM, V32, P374, DOI 10.1145/3149.214121
   Gelashvili Rati, 2022, P 26 INT C FIN CRYPT
   Ghemawat S., 2003, Operating Systems Review, V37, P29, DOI 10.1145/1165389.945450
   Gilad Y, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P51, DOI 10.1145/3132747.3132757
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Honore Wolf, 2024, Zenodo, DOI 10.5281/ZENODO.10727570
   Honoré W, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P379, DOI 10.1145/3519939.3523444
   Honoré W, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485474
   Honore Wolf, 2024, Technical Report YALEU/DCS/TR-TR1568
   Hunt Patrick, 2010, P 2010 USENIX C USEN, V8, DOI DOI 10.5555/1855840.1855851
   Isabelle Development Team, 2022, What is Isabelle?
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   LAMPORT L, 1982, ACM T PROGR LANG SYS, V4, P382, DOI 10.1145/357172.357176
   Lamport L, 1998, ACM T COMPUT SYST, V16, P133, DOI 10.1145/279227.279229
   Lamport L, 2006, DISTRIB COMPUT, V19, P79, DOI 10.1007/s00446-006-0005-x
   Lamport L, 2011, LECT NOTES COMPUT SC, V6950, P211, DOI 10.1007/978-3-642-24100-0_22
   Li C., 2012, Proceedings of the 10th USENIX Conference on Operating Systems Design and Implementation, P265
   Losa Giuliano., 2020, P WORKSHOP FORMAL ME, DOI [DOI 10.4230/OASICS.FMBC.2020.9, 10.4230/OASIcs.FMBC.2020., DOI 10.4230/OASICS.FMBC.2020]
   Mazieres D., 2015, ''Stellar Develop. Found., V32, P1
   Nakamoto S., 2008, BITCOIN PEER TO PEER, P21260
   Ongaro D., 2014, Proceedings of the 2014 USENIX Conference on USENIX Annual Technical Conference, P305, DOI DOI 10.1007/0-387-34805-0_21
   Padon O, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158114
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Rahli Vincent, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P619, DOI 10.1007/978-3-319-89884-1_22
   Rütti O, 2010, I C DEPEND SYS NETWO, P343, DOI 10.1109/DSN.2010.5544299
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Saleh F, 2021, REV FINANC STUD, V34, P1156, DOI 10.1093/rfs/hhaa075
   SCHNEIDER FB, 1990, COMPUT SURV, V22, P299, DOI 10.1145/98163.98167
   Shoup V, 2000, LECT NOTES COMPUT SC, V1807, P207
   Taube M, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P662, DOI 10.1145/3192366.3192414
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Woos D, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P154, DOI 10.1145/2854065.2854081
   Yin MF, 2019, PROCEEDINGS OF THE 2019 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC '19), P347, DOI 10.1145/3293611.3331591
NR 51
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 109
DI 10.1145/3649826
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600016
OA gold
DA 2024-08-05
ER

PT J
AU Zhang, C
   Wang, LZ
   Rigger, M
AF Zhang, Chi
   Wang, Linzhang
   Rigger, Manuel
TI Finding Cross-Rule Optimization Bugs in Datalog Engines
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Datalog engine testing; cross-rule optimization bugs; test oracle
ID DISJUNCTIVE DATALOG; LANGUAGE
AB Datalog is a popular and widely-used declarative logic programming language. Datalog engines apply many cross-rule optimizations; bugs in them can cause incorrect results. To detect such optimization bugs, we propose an automated testing approach called Incremental Rule Evaluation (IRE), which synergistically tackles the test oracle and test case generation problem. The core idea behind the test oracle is to compare the results of an optimized program and a program without cross-rule optimization; any difference indicates a bug in the Datalog engine. Our core insight is that, for an optimized, incrementally-generated Datalog program, we can evaluate all rules individually by constructing a reference program to disable the optimizations that are performed among multiple rules. Incrementally generating test cases not only allows us to apply the test oracle for every new rule generated-we also can ensure that every newly added rule generates a non-empty result with a given probability and eschew recomputing already-known facts. We implemented IRE as a tool named DEOPT, and evaluated DEOPT on four mature Datalog engines, namely Souffle, CozoDB, mu Z, and DDlog, and discovered a total of 30 bugs. Of these, 13 were logic bugs, while the remaining were crash and error bugs. DEOPT can detect all bugs found by queryFuzz, a state-of-the-art approach. Out of the bugs identified by DEOPT, queryFuzz might be unable to detect 5. Our incremental test case generation approach is efficient; for example, for test cases containing 60 rules, our incremental approach can produce 1.17x (for DDlog) to 31.02x (for Souffle) as many valid test cases with non-empty results as the naive random method. We believe that the simplicity and the generality of the approach will lead to its wide adoption in practice.
C1 [Zhang, Chi; Wang, Linzhang] Nanjing Univ, Nanjing, Peoples R China.
   [Rigger, Manuel] Natl Univ Singapore, Singapore, Singapore.
   [Wang, Linzhang] Nanjing Univ, Dept Comp Sci & Technol, State Key Lab Novel Software Technol, Nanjing, Peoples R China.
C3 Nanjing University; National University of Singapore; Nanjing University
RP Zhang, C (corresponding author), Nanjing Univ, Dept Comp Sci & Technol, State Key Lab Novel Software Technol, Nanjing, Peoples R China.
EM zhangchi_seg@smail.nju.edu.cn; lzwang@nju.edu.cn; rigger@nus.edu.sg
OI Wang, Linzhang/0000-0003-4794-1652
FU National Natural Science Foundation of China [62032010, 62232001,
   62202220, 62172200]; Collaborative Innovation Center of Novel Software
   Technology and Industrialization, Jiangsu, China; program of China
   Scholarships Council [202106190065]; Fundamental Research Funds for the
   Central Universities [2023300180]; Leading-edge Technology Program of
   Jiangsu Natural Science Foundation [BK20202001]
FX This work was partially supported by the National Natural Science
   Foundation of China under Grant No.62032010, No.62232001, No.62202220,
   and No.62172200. We would like to thank the support from the
   Collaborative Innovation Center of Novel Software Technology and
   Industrialization, Jiangsu, China. We also thank for the financial
   support from the program of China Scholarships Council
   (No.202106190065), the Fundamental Research Funds for the Central
   Universities (No.2023300180), and the Leading-edge Technology Program of
   Jiangsu Natural Science Foundation (No. BK20202001).
CR Abiteboul S., 1988, SIGMOD Record, V17, P143, DOI 10.1145/971701.50218
   Abiteboul Serge, 1995, FDN DATABASES, V8
   Alviano M, 2012, ARTIF INTELL, V187, P156, DOI 10.1016/j.artint.2012.04.008
   [Anonymous], 1970, Notes on structured programming
   Antoniadis Tony, 2017, P 6 ACM SIGPLAN INT, P25, DOI DOI 10.1145/3088515.3088522
   Arch S, 2022, LECT NOTES COMPUT SC, V13474, P83, DOI 10.1007/978-3-031-16767-6_5
   Aref M, 2015, SIGMOD'15: PROCEEDINGS OF THE 2015 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1371, DOI 10.1145/2723372.2742796
   Backes J, 2019, LECT NOTES COMPUT SC, V11562, P231, DOI 10.1007/978-3-030-25543-5_14
   BALBIN I, 1987, J LOGIC PROGRAM, V4, P259, DOI 10.1016/0743-1066(87)90004-5
   Bancilhon F., 1986, SIGMOD Record, V15, P16, DOI 10.1145/16856.16859
   Bancilhon Francois, 1985, PODS, DOI DOI 10.1145/6012.15399
   Bembenek A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428209
   Borraz-Sanchez Conrado, 2018, ACM Books, V20, P331, DOI [10.1145/3191315.3191322, DOI 10.1145/3191315.3191322]
   Bravenboer M, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P243
   Brent L, 2018, Arxiv, DOI arXiv:1809.03981
   Buccafurri F, 2000, IEEE T KNOWL DATA EN, V12, P845, DOI 10.1109/69.877512
   Buccafurri F, 1997, LECT NOTES ARTIF INT, V1265, P2
   Caballero R, 2008, LECT NOTES COMPUT SC, V4925, P143, DOI 10.1007/978-3-540-88594-8_8
   Caballero R, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P55, DOI 10.1145/2790449.2790522
   Ceri S., 1989, IEEE Transactions on Knowledge and Data Engineering, V1, P146, DOI 10.1109/69.43410
   Chen TY, 2020, Arxiv, DOI arXiv:2002.12543
   Chen TY, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3143561
   CONSENS MP, 1990, LECT NOTES COMPUT SC, V470, P379
   Conway Neil., 2012, P 3 ACM S CLOUD COMP, p1:1
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Grech N, 2019, PROC INT CONF SOFTW, P1176, DOI 10.1109/ICSE.2019.00120
   Greco S, 1999, IEEE T KNOWL DATA EN, V11, P265, DOI 10.1109/69.761663
   Green TJ, 2012, FOUND TRENDS DATABAS, V5, P105, DOI 10.1561/1900000017
   Hajiyev E, 2006, LECT NOTES COMPUT SC, V4067, P2
   Hoder Krystof, 2011, INT C COMP AID VER, P457
   Hu XW, 2021, LECT NOTES COMPUT SC, V13008, P163, DOI 10.1007/978-3-030-89051-3_10
   Hu Ziyang, 2023, CozoDB: Hippocampus for AI, with Embedded Datalog
   Jiang Zu-Ming, 2023, P 32 USENIX SEC S SE
   Jordan H, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P327, DOI 10.1145/3293883.3295719
   Jordan H, 2022, CONCURR COMP-PRACT E, V34, DOI 10.1002/cpe.5643
   Jordan H, 2019, PROCEEDINGS OF THE TENTH INTERNATIONAL WORKSHOP ON PROGRAMMING MODELS AND APPLICATIONS FOR MULTICORES AND MANYCORES (PMAM 2019), P31, DOI 10.1145/3303084.3309490
   Jordan H, 2016, LECT NOTES COMPUT SC, V9780, P422, DOI 10.1007/978-3-319-41540-6_23
   Ketsman B, 2022, FOUND TRENDS DATABAS, V12, P1, DOI 10.1561/1900000073
   Kiessling W., 1994, Management and Processing of Complex Data Structures. Third Workshop on Information Systems and Artificial Intelligence. Proceedings, P118
   Kohler Sven, 2012, Datalog in Academia and Industry. Proceedings of the Second International Workshop, Datalog 2.0, P111, DOI 10.1007/978-3-642-32925-8_12
   Lam Monica S, 2005, P 24 ACM SIGMOD SIGA, P1
   Liang Y, 2022, PROCEEDINGS OF THE 31ST USENIX SECURITY SYMPOSIUM, P4309
   Loo BT, 2009, COMMUN ACM, V52, P87, DOI 10.1145/1592761.1592785
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   Mansur MN, 2023, PROCEEDINGS OF THE 32ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, ISSTA 2023, P236, DOI 10.1145/3597926.3598052
   Mansur MN, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P639, DOI 10.1145/3468264.3468573
   McKeeman William M., 1998, Digit. Tech. J., V10, P100
   Mooney RJ, 1997, LECT NOTES ARTIF INT, V1314, P3
   Nappa P, 2019, INT CONFER PARA, P82, DOI 10.1109/PACT.2019.00015
   RAMAKRISHNAN R, 1995, J LOGIC PROGRAM, V23, P125, DOI 10.1016/0743-1066(94)00039-9
   Regehr J, 2012, ACM SIGPLAN NOTICES, V47, P335, DOI 10.1145/2345156.2254104
   Rigger M, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P1140, DOI 10.1145/3368089.3409710
   Rigger M, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P667
   Rigger M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428279
   ROSS KA, 1990, PROCEEDINGS OF THE NINTH ACM SIGACT-SIGMOD-SIGART SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P161, DOI 10.1145/298514.298558
   Ryzhyk Leonid, 2019, Datalog, V2, P4
   Sagonas K., 1994, SIGMOD Record, V23, P442, DOI 10.1145/191843.191927
   Scholz B, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P196, DOI 10.1145/2892208.2892226
   Scholz Bernhard, 2022, SAS 2022
   Segura S, 2016, IEEE T SOFTWARE ENG, V42, P805, DOI 10.1109/TSE.2016.2532875
   Seltenreich Andreas, 2023, SQLsmith
   Sereni Damien., 2008, ACM SIGMOD C MANAGEM, P553, DOI [10.1145/1376616.1376673, DOI 10.1145/1376616.1376673]
   Shkapsky A, 2016, SIGMOD'16: PROCEEDINGS OF THE 2016 INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1135, DOI 10.1145/2882903.2915229
   Slutz D., 1998, Proceedings of the Twenty-Fourth International Conference on Very-Large Databases, P618
   Subotic P, 2018, PROC VLDB ENDOW, V12, P141, DOI 10.14778/3282495.3282500
   Tsankov P, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P67, DOI 10.1145/3243734.3243780
   Ullman J. D., 1989, Proceedings of the Eighth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P140, DOI 10.1145/73721.73736
   Van Gelder A., 1989, Proceedings of the Eighth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, P1, DOI 10.1145/73721.73722
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   Zhang Chi, 2024, Zenodo, DOI 10.5281/ZENODO.10609061
   Zhao D, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3379446
   Zhong R, 2020, CCS '20: PROCEEDINGS OF THE 2020 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P955, DOI 10.1145/3372297.3417260
NR 72
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 98
DI 10.1145/3649815
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600005
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Kawamata, F
   Unno, H
   Sekiyama, T
   Terauchi, T
AF Kawamata, Fuga
   Unno, Hiroshi
   Sekiyama, Taro
   Terauchi, Tachio
TI Answer Refinement Modification: Refinement Type System for Algebraic
   Effects and Handlers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE algebraic effects and handlers; type-and-effect system; refinement type
   system; answer type modification; answer refinement modification; CPS
   transformation
ID INFERENCE
AB Algebraic effects and handlers are a mechanism to structure programs with computational effects in a modular way. They are recently gaining popularity and being adopted in practical languages, such as OCaml. Meanwhile, there has been substantial progress in program verification via refinement type systems. While a variety of refinement type systems have been proposed, thus far there has not been a satisfactory refinement type system for algebraic effects and handlers. In this paper, we fill the void by proposing a novel refinement type system for languages with algebraic effects and handlers. The expressivity and usefulness of algebraic effects and handlers come from their ability to manipulate delimited continuations, but delimited continuations also complicate programs' control flow and make their verification harder. To address the complexity, we introduce a novel concept that we call answer refinement modification (ARM for short), which allows the refinement type system to precisely track what effects occur and in what order when a program is executed, and reflect such information as modifications to the refinements in the types of delimited continuations. We formalize our type system that supports ARM (as well as answer type modification, or ATM) and prove its soundness. Additionally, as a proof of concept, we have extended the refinement type system to a subset of OCaml 5 which comes with a built-in support for effect handlers, implemented a type checking and inference algorithm for the extension, and evaluated it on a number of benchmark programs that use algebraic effects and handlers. The evaluation demonstrates that ARM is conceptually simple and practically useful.
   Finally, a natural alternative to directly reasoning about a program with delimited continuations is to apply a continuation passing style (CPS) transformation that transforms the program to a pure program without delimited continuations. We investigate this alternative in the paper, and show that the approach is indeed possible by proposing a novel CPS transformation for algebraic effects and handlers that enjoys bidirectional (refinement-)type-preservation. We show that there are pros and cons with this approach, namely, while one can use an existing refinement type checking and inference algorithm that can only (directly) handle pure programs, there are issues such as needing type annotations in source programs and making the inferred types less informative to a user.
C1 [Kawamata, Fuga; Terauchi, Tachio] Waseda Univ, Tokyo, Japan.
   [Unno, Hiroshi] Univ Tsukuba, Tsukuba, Ibaraki, Japan.
   [Sekiyama, Taro] Natl Inst Informat, Tokyo, Japan.
C3 Waseda University; University of Tsukuba; Research Organization of
   Information & Systems (ROIS); National Institute of Informatics (NII) -
   Japan
RP Kawamata, F (corresponding author), Waseda Univ, Tokyo, Japan.
EM maple-river@fuji.waseda.jp; uhiro@cs.tsukuba.ac.jp; ryukilon@gmail.com;
   terauchi@waseda.jp
OI Sekiyama, Taro/0000-0001-9286-230X; Unno, Hiroshi/0000-0002-4225-8195;
   Terauchi, Tachio/0000-0001-5305-4916
FU JSPS KAKENHI [JP19K20247, JP22K17875, JP20H00582, JP20H04162,
   JP22H03564, JP20H05703, JP20K20625, JP22H03570]; JST CREST [JPMJCR21M3]
FX We are grateful to anonymous reviewers for their helpful and useful
   comments on the paper, especially regarding its presentation. We also
   thank Yiyang Guo and Kanaru Isoda for their contribution to our
   implementation. This work was supported by JSPS KAKENHI Grant Numbers
   JP19K20247, JP22K17875, JP20H00582, JP20H04162, JP22H03564, JP20H05703,
   JP20K20625, and JP22H03570 as well as JST CREST Grant Number JPMJCR21M3.
CR Ahman D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158095
   Ahman Danel, 2015, 21 M TYP PROOFS PROG, P10
   Appel Andrew W., 1991, COMPILING CONTINUATI, DOI [10.1017/CBO9780511609619, DOI 10.1017/CBO9780511609619]
   Asai Kenichi, 2009, Higher-Order and Symbolic Computation, V22, P275, DOI 10.1007/s10990-009-9049-5
   Bauer Andrej, 2013, Algebra and Coalgebra in Computer Science. 5th International Conference, CALCO 2013. Proceedings: LNCS 8089, P1, DOI 10.1007/978-3-642-40206-7_1
   Bauer A, 2019, Arxiv, DOI arXiv:1807.05923
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Bengtson J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890031
   Biernacki D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371116
   Bjorner N, 2015, LECT NOTES COMPUT SC, V9300, P24, DOI 10.1007/978-3-319-23534-9_2
   Bradley AR, 2011, LECT NOTES COMPUT SC, V6538, P70, DOI 10.1007/978-3-642-18275-4_7
   Brady E, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI [10.1145/2544174.2500581, 10.1145/2500365.2500581]
   Cong YY, 2022, LECT NOTES COMPUT SC, V13401, P59, DOI 10.1007/978-3-031-21314-4_4
   Cong Y, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236764
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Een N., 2011, 2011 Formal Methods in Computer-Aided Design (FMCAD), P125
   Forster Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110257
   Foster J. S., 2002, SIGPLAN Notices, V37, P1, DOI 10.1145/543552.512531
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Hillerstrom D., 2017, 2nd International Conference on Formal Structures for Computation and Deduction, FSCD 2017, September 3-9, 2017, V84, p18:1, DOI DOI 10.4230/LIPICS.FSCD.2017.18
   Hillerström D, 2018, LECT NOTES COMPUT SC, V11275, P415, DOI 10.1007/978-3-030-02768-1_22
   Hongwei Xu, 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P214
   Ishio Chiaki, 2022, GPCE 2022: Proceedings of the 21st ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences, P45, DOI 10.1145/3564719.3568691
   Kammar O, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000320
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Komuravelli Anvesh, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P846, DOI 10.1007/978-3-642-39799-8_59
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Levy PB, 2003, INFORM COMPUT, V185, P182, DOI 10.1016/S0890-5401(03)00088-9
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Materzok M, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P81
   Matija Pretnar, 2022, Eff
   MITCHELL JC, 1988, INFORM COMPUT, V76, P211, DOI 10.1016/0890-5401(88)90009-0
   Multicore OCaml, 2022, OCaml effects examples
   Nanjo Y, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P759, DOI 10.1145/3209108.3209204
   Pirog Maciej, 2019, FSCD SCHLOSS DAGSTUH, V30, P1, DOI 10.4230/LIPICS.FSCD.2019.30
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Plotkin Gordon D., 2001, Lecture Notes in Computer Science, V2030, P1, DOI [10.1007/3-540-45315-6_1, DOI 10.1007/3-540-45315-6_1]
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Sekiyama T, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571264
   Sivaramakrishnan KC, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P206, DOI 10.1145/3453483.3454039
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Terauchi T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1706299.1706315
   Thielecke H, 2003, ACM SIGPLAN NOTICES, V38, P139, DOI 10.1145/640128.604144
   Unno H, 2021, LECT NOTES COMPUT SC, V12759, P742, DOI 10.1007/978-3-030-81685-8_35
   Unno H, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158100
   Unno H, 2013, ACM SIGPLAN NOTICES, V48, P75, DOI 10.1145/2480359.2429081
   Unno H, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P277, DOI 10.1145/1599410.1599445
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Vekris P, 2016, ACM SIGPLAN NOTICES, V51, P310, DOI [10.1145/2908080.2908110, 10.1145/2980983.2908110]
   Zhu H, 2013, LECT NOTES COMPUT SC, V7737, P295
NR 57
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 9
DI 10.1145/3633280
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400006
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Sellami, Y
   Girol, G
   Recoules, F
   Couroussé, D
   Bardin, S
AF Sellami, Yanis
   Girol, Guillaume
   Recoules, Frederic
   Courousse, Damien
   Bardin, Sebastien
TI Inference of Robust Reachability Constraints
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program analysis; abduction; precondition inference; symbolic execution
ID GENERATION
AB Characterization of bugs and attack vectors is in many practical scenarios as important as their finding. Recently, Girol et. al. have introduced the concept of robust reachability, which ensures a perfect reproducibility of the reported violations by distinguishing inputs that are under the control of the attacker (controlled inputs) from those that are not (uncontrolled inputs), and proposed first automated analysis for it. While it is a step toward distinguishing severe bugs from benign ones, it fails for example to describe violations that are mostly reproducible, i.e., when triggering conditions are likely to happen, meaning that they happen for all uncontrolled inputs but a few corner cases. To address this issue, we propose to leverage theory-agnostic abduction techniques to generate constraints on the uncontrolled program inputs that ensure that a target property is robustly satisfied. Our proposal comes with an extension of robust reachability that is generic on the type of trace property and on the technology used to verify the properties. We show that our approach is complete w.r.t its inference language, and we additionally discuss strategies for the efficient exploration of the inference space. We demonstrate the feasibility of the method and its practical ability to refine the notion of robust reachability with an implementation that uses robust reachability oracles to generate constraints on standard benchmarks from software verification and security analysis. We illustrate the use of our implementation to a vulnerability characterization problem in the context of fault injection attacks. Our method overcomes a major limitation of the initial proposal of robust reachability, without complicating its definition. From a practical view, this is a step toward new verification tools that are able to characterize program violations through high-level feedback.
C1 [Sellami, Yanis; Girol, Guillaume; Recoules, Frederic; Courousse, Damien; Bardin, Sebastien] Univ Grenoble Alpes, CEA, List, F-38000 Grenoble, France.
C3 Communaute Universite Grenoble Alpes; Universite Grenoble Alpes (UGA);
   CEA
RP Sellami, Y (corresponding author), Univ Grenoble Alpes, CEA, List, F-38000 Grenoble, France.
EM yanis.sellami@cea.fr; girol.2014@polytechnique.org;
   frederic.recoules@cea.fr; damien.courousse@cea.fr;
   sebastien.bardin@cea.fr
OI Bardin, Sebastien/0000-0002-6509-3506; Sellami,
   Yanis/0009-0006-8833-3863
FU French National Research Agency (ANR) [ANR-10-AIRT-05]; Carnot
   Flexsecurity; AAPG TAVA; PEPR Cyber Secureval [ANR-22-PECY-0005]; PEPR
   Cyber REV [ANR-22-PECY-0009]
FX This work is supported by the French National Research Agency (ANR) in
   the framework of the Investissements d'Avenir program (ANR-10-AIRT-05,
   IRTNanoElec), Carnot Flexsecurity, AAPG TAVA, PEPR Cyber Secureval
   ANR-22-PECY-0005 and PEPR Cyber REV ANR-22-PECY-0009.
CR Albarghouthi A, 2016, ACM SIGPLAN NOTICES, V51, P789, DOI 10.1145/2914770.2837628
   Astorga A, 2018, I C DEPEND SYS NETWO, P678, DOI 10.1109/DSN.2018.00074
   Aziz Rehan Abdul, 2015, Theory and Applications of Satisfiability Testing-SAT., DOI [10.1007/978-3-319-24318-4_10, DOI 10.1007/978-3-319-24318-4_10]
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Bardin Sebastien, 2022, arXiv, DOI [10.48550/ARXIV.2212.05244, DOI 10.48550/ARXIV.2212.05244]
   Barrett C, 2009, FRONT ARTIF INTEL AP, V185, P825, DOI 10.3233/978-1-58603-929-5-825
   Beyer D, 2012, LECT NOTES COMPUT SC, V7214, P504, DOI 10.1007/978-3-642-28756-5_38
   Bienvenu Meghyn, 2007, AAAI
   Cadar C, 2013, COMMUN ACM, V56, P82, DOI 10.1145/2408776.2408795
   Caferra Ricardo, 2013, Logic for computer science and artificial intelligence., DOI [10.1002/9781118604182, DOI 10.1002/9781118604182]
   Calcagno C, 2011, J ACM, V58, DOI 10.1145/2049697.2049700
   Clarke E, 2004, LECT NOTES COMPUT SC, V2988, P168, DOI 10.1007/978-3-540-24730-2_15
   Cousot P, 2013, LECT NOTES COMPUT SC, V7737, P128
   Daniel LA, 2020, P IEEE S SECUR PRIV, P1021, DOI 10.1109/SP40000.2020.00074
   Darwiche A., 2001, Journal of Applied Non-Classical Logics, V11, P11, DOI DOI 10.3166/JANCL.11.11-34
   David Robin, 2016, ISSTA, DOI [10.1145/2931037.2931048, DOI 10.1145/2931037.2931048]
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DEKLEER J, 1992, AAAI-92 PROCEEDINGS : TENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE, P780
   Dillig Isil, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P684, DOI 10.1007/978-3-642-39799-8_46
   Dillig I, 2013, ACM SIGPLAN NOTICES, V48, P443, DOI [10.1145/2544173.2509511, 10.1145/2509136.2509511]
   Djoudi Adel, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P212, DOI 10.1007/978-3-662-46681-0_17
   Dureuil Louis, 2016, Computer Safety, Reliability and Security. 35th International Conference, SAFECOMP 2016. Proceedings: LNCS 9922, P3, DOI 10.1007/978-3-319-45477-1_1
   Echenim M, 2019, LECT NOTES ARTIF INT, V11715, P77, DOI 10.1007/978-3-030-29007-8_5
   Echenim M, 2018, LECT NOTES ARTIF INT, V10900, P279, DOI 10.1007/978-3-319-94205-6_19
   Echenim M, 2017, J ARTIF INTELL RES, V60, P827, DOI 10.1613/jair.5481
   Fremont DJ, 2017, AAAI CONF ARTIF INTE, P3885
   Gehr T, 2015, LECT NOTES COMPUT SC, V9206, P307, DOI 10.1007/978-3-319-21690-4_18
   Girol G, 2022, FORM METHOD SYST DES, DOI 10.1007/s10703-022-00402-x
   Girol G, 2021, LECT NOTES COMPUT SC, V12759, P669, DOI 10.1007/978-3-030-81685-8_32
   Gomes CP, 2009, FRONT ARTIF INTEL AP, V185, P633, DOI 10.3233/978-1-58603-929-5-633
   Gulwani S, 2008, ACM SIGPLAN NOTICES, V43, P281, DOI 10.1145/1379022.1375616
   Hoffmann M, 2021, IEEE T INF FOREN SEC, V16, P1058, DOI 10.1109/TIFS.2020.3027143
   Josephson SG., 1994, ABDUCTIVE INFERENCE, DOI [10.1017/CBO9780511530128, DOI 10.1017/CBO9780511530128]
   Kim S, 2018, LECT NOTES COMPUT SC, V10805, P133, DOI 10.1007/978-3-319-89960-2_8
   Koopmann P, 2020, KR2020: PROCEEDINGS OF THE 17TH INTERNATIONAL CONFERENCE ON PRINCIPLES OF KNOWLEDGE REPRESENTATION AND REASONING, P592
   Lagniez JM, 2019, AAAI CONF ARTIF INTE, P1536
   Marquis Pierre, 1991, Fundamentals of Artificial Intelligence Research, DOI [10.1007/3-540-54507-7_12, DOI 10.1007/3-540-54507-7_12]
   Matusiewicz A, 2011, LECT NOTES COMPUT SC, V6804, P203, DOI 10.1007/978-3-642-21916-0_23
   Menguy Gregoire, 2022, IJCAI, DOI [10.24963/ijcai.2022/260, DOI 10.24963/IJCAI.2022/260]
   Padhi S, 2016, ACM SIGPLAN NOTICES, V51, P42, DOI [10.1145/2980983.2908099, 10.1145/2908080.2908099]
   Previti A, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P1980
   Reynolds A, 2020, LECT NOTES COMPUT SC, V12166, P141, DOI 10.1007/978-3-030-51074-9_9
   Urban C, 2015, LECT NOTES COMPUT SC, V8931, P190
   Yuce B., 2018, J. Hardw. Syst. Secur., V2, P111
   Zhou Z, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485493
NR 45
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 91
DI 10.1145/3632933
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400092
OA gold
DA 2024-08-05
ER

PT J
AU Bojanczyk, M
   Klin, B
AF Bojanczyk, Mikolaj
   Klin, Bartek
TI Polyregular Functions on Unordered Trees of Bounded Height
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE polyregular functions; first-order interpretation; unordered trees;
   bounded height
AB We consider injective first-order interpretations that input and output trees of bounded height. The corresponding functions have polynomial output size, since a first-order interpretation can use a k-tuple of input nodes to represent a single output node. We prove that the equivalence problem for such functions is decidable, i.e. given two such interpretations, one can decide whether, for every input tree, the two output trees are isomorphic.
   We also give a calculus of typed functions and combinators which derives exactly injective first-order interpretations for unordered trees of bounded height. The calculus is based on a type system, where the type constructors are products, coproducts and a monad of multisets. Thanks to our results about tree-to-tree interpretations, the equivalence problem is decidable for this calculus.
   As an application, we show that the equivalence problem is decidable for first-order interpretations between classes of graphs that have bounded tree-depth. In all cases studied in this paper, first-order logic and MSO have the same expressive power, and hence all results apply also to MSO interpretations.
C1 [Bojanczyk, Mikolaj] Univ Warsaw, Warsaw, Poland.
   [Klin, Bartek] Univ Oxford, Oxford, England.
C3 University of Warsaw; University of Oxford
RP Bojanczyk, M (corresponding author), Univ Warsaw, Warsaw, Poland.
FU Polish National Science Centre (NCN) grant "Polynomial finite state
   computation" [2022/46/A/ST6/00072]
FX The idea to consider regular functions on multisets was suggested to us
   by Marcelo Fiore. We are very grateful to the anonymous reviewers for
   their numerous insightful comments and corrections. Mikolaj Bojanczyk
   was supported by the Polish National Science Centre (NCN) grant
   "Polynomial finite state computation" (2022/46/A/ST6/00072).
CR Boiret Adrien, 2018, LIPIcs, V48, P1
   Bojanczyk M, 2018, Arxiv, DOI arXiv:1810.08760
   Bojanczyk M, 2023, Arxiv, DOI [arXiv:2311.04180, 10.48550/arXiv.2311.04180, DOI 10.48550/ARXIV.2311.04180]
   Bojanczyk Mikolaj, 2022, LOGIC COMPUTER SCI L
   Bojanczyk Mikolaj, 2023, LOGIC COMPUTER SCI L
   Bojanczyk Mikolaj, 2020, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V170
   Bojanczyk Mikolaj, 2019, 46 INT C AUT LANG PR, V106, P1
   Borger Egon, 2001, The Classical Decision Problem
   BUNEMAN P, 1995, THEOR COMPUT SCI, V149, P3, DOI 10.1016/0304-3975(95)00024-Q
   Cheney J, 2014, SIGMOD'14: PROCEEDINGS OF THE 2014 ACM SIGMOD INTERNATIONAL CONFERENCE ON MANAGEMENT OF DATA, P1027, DOI 10.1145/2588555.2612186
   Courcelle B, 2012, ENCYCLOP MATH APPL, V138, P1, DOI 10.1017/CBO9780511977619
   Courcelle B, 2007, J COMB THEORY B, V97, P91, DOI 10.1016/j.jctb.2006.04.003
   Doueneau-Tabot Gaetan, 2021, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V202
   Elberfeld Michael, 2016, ACM Transactions on Computational Logic (TOCL), V17, P1
   Hodges W., 1993, MODEL THEORY, V42
   Milo T, 2003, J COMPUT SYST SCI, V66, P66, DOI 10.1016/S0022-0000(02)00030-2
   Nesetril Jaroslav, 2012, Algorithms and Combinatorics, V28
   Ricciotti W, 2019, PROCEEDINGS OF THE 17TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DATABASE PROGRAMMING LANGUAGES (DBPL '19), P70, DOI 10.1145/3315507.3330202
   SEESE D, 1991, ANN PURE APPL LOGIC, V53, P169, DOI 10.1016/0168-0072(91)90054-P
   Seidl H, 2018, J ACM, V65, DOI 10.1145/3182653
NR 20
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 45
DI 10.1145/3632887
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400046
OA gold, Green Submitted, Green Published
DA 2024-08-05
ER

PT J
AU Ramsay, S
   Walpole, C
AF Ramsay, Steven
   Walpole, Charlie
TI Ill-Typed Programs Don't Evaluate
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type systems; higher-order program verification; incorrectness
ID INFERENCE
AB We introduce two-sided type systems, which are sequent calculi for typing formulas. Two-sided type systems allow for hypothetical reasoning over the typing of compound program expressions, and the refutation of typing formulas. By incorporating a type of all values, these type systems support more refined notions of well-typing and ill-typing, guaranteeing both that well-typed programs don't go wrong and that ill-typed programs don't evaluate - that is, reach a value. This makes two-sided type systems suitable for incorrectness reasoning in higher-order program verification, which we illustrate through an application to precise data-flow typing in a language with constructors and pattern matching. Finally, we investigate the internalisation of the meta-level negation in the system as a complement operator on types. This motivates an alternative semantics for the typing judgement, which guarantees that ill-typed programs don't evaluate, but in which well-typed programs may yet go wrong.
C1 [Ramsay, Steven; Walpole, Charlie] Univ Bristol, Bristol, Avon, England.
C3 University of Bristol
RP Ramsay, S (corresponding author), Univ Bristol, Bristol, Avon, England.
EM steven.ramsay@bristol.ac.uk; op18921@bristol.ac.uk
CR Aiken A., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P163, DOI 10.1145/174675.177847
   Bradfield Julian, 2018, Handbook of Model Checking, P871, DOI [DOI 10.1007/978-3-319-10575-8_26, 10.1007/978-3-319-10575-8, DOI 10.1007/978-3-319-10575-8]
   Consot P, 2011, LECT NOTES COMPUT SC, V6538, P150, DOI 10.1007/978-3-642-18275-4_12
   Cousot P, 2013, LECT NOTES COMPUT SC, V7737, P128
   Curien PL, 2000, ACM SIGPLAN NOTICES, V35, P233, DOI 10.1145/357766.351262
   Dolan S, 2017, ACM SIGPLAN NOTICES, V52, P60, DOI 10.1145/3093333.3009882
   Ebbinghaus H. -D., 1994, UNDERGRADUATE TEXTS, DOI [10.1007/978-1-4757-2355-7, DOI 10.1007/978-1-4757-2355-7]
   EIFRIG J, 1995, SIGPLAN NOTICES, V30, P169, DOI 10.1145/217839.217858
   Jakob R, 2015, LECT NOTES COMPUT SC, V9058, P234, DOI 10.1007/978-3-319-17524-9_17
   Jones E, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434336
   Lindahl T., 2006, PPDP 2006. Proceedings of the Eighth ACM SIGPLAN Symposium on Principles and Practice of Declarative Programming, P167, DOI 10.1145/1140335.1140356
   Lopez-Fraguas Francisco J., 2018, EPiC Series in Computing, V57, P515, DOI [10.29007/w2m2, DOI 10.29007/W2M2]
   Mackay J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563317
   Marlow S, 1997, ACM SIGPLAN NOTICES, V32, P136, DOI 10.1145/258949.258962
   Mitchell JohnC., 1984, Proceedings of the 11th ACM SIGACTSIGPLAN symposium on Principles of programming languages, P175, DOI [10.1145/800017.800529, DOI 10.1145/800017.800529]
   O'Hearn PW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371078
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Parreaux L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563304
   Le QL, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527325
   Raad A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498695
   Ramsay S, 2023, Arxiv, DOI [arXiv:2307.06928, 10.48550/arXiv.2307.06928, DOI 10.48550/ARXIV.2307.06928]
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Sagonas K, 2010, LECT NOTES COMPUT SC, V6009, P13, DOI 10.1007/978-3-642-12251-4_2
   Terauchi T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1706299.1706315
   Unno H, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158100
   Unno H, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P277, DOI 10.1145/1599410.1599445
   Vazou N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P48, DOI 10.1145/2784731.2784745
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Vazou N, 2013, LECT NOTES COMPUT SC, V7792, P209, DOI 10.1007/978-3-642-37036-6_13
   Winskel Glynn., 1993, The Formal Semantics of Programming Languages: An Introduction, DOI DOI 10.7551/MITPRESS/3054.001.0001
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Zilberstein N, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586045
NR 32
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 67
DI 10.1145/3632909
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400068
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Yao, JN
   Tao, RZ
   Gu, RH
   Nieh, J
AF Yao, Jianan
   Tao, Runzhou
   Gu, Ronghui
   Nieh, Jason
TI Mostly Automated Verification of Liveness Properties for Distributed
   Protocols with Ranking Functions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE distributed protocols; liveness reasoning; ranking function synthesis
AB Distributed protocols have long been formulated in terms of their safety and liveness properties. Much recent work has focused on automatically verifying the safety properties of distributed protocols, but doing so for liveness properties has remained a challenging, unsolved problem. We present LVR, the first framework that can mostly automatically verify liveness properties for distributed protocols. Our key insight is that most liveness properties for distributed protocols can be reduced to a set of safety properties with the help of ranking functions. Such ranking functions for practical distributed protocols have certain properties that make them straightforward to synthesize, contrary to conventional wisdom. We prove that verifying a liveness property can then be reduced to a simpler problem of verifying a set of safety properties, namely that the ranking function is strictly decreasing and nonnegative for any protocol state transition, and there is no deadlock. LVR automatically synthesizes ranking functions by formulating a parameterized function of integer protocol variables, statically analyzing the lower and upper bounds of the variables as well as how much they can change on each state transition, then feeding the constraints to an SMT solver to determine the coefficients of the ranking function. It then uses an off-the-shelf verification tool to find inductive invariants to verify safety properties for both ranking functions and deadlock freedom. We show that LVR can mostly automatically verify the liveness properties of several distributed protocols, including various versions of Paxos, with limited user guidance.
C1 [Yao, Jianan; Tao, Runzhou; Gu, Ronghui; Nieh, Jason] Columbia Univ, New York, NY 10027 USA.
C3 Columbia University
RP Yao, JN (corresponding author), Columbia Univ, New York, NY 10027 USA.
EM jianan@cs.columbia.edu; runzhou.tao@columbia.edu;
   ronghui.gu@columbia.edu; nieh@cs.columbia.edu
OI Nieh, Jason/0009-0005-8301-4479
FU Amazon Research Award; VMware Systems Research Award; DARPA
   [N66001-21-C-4018]; NSF [CCF-2124080, CCF-2239484, CNS-2052947,
   CNS-2247370]; NSF CAREER Award
FX Carla Ferreira provided helpful comments on earlier drafts. This work
   was supported in part by an Amazon Research Award, a VMware Systems
   Research Award, an NSF CAREER Award, DARPA contract N66001-21-C-4018,
   and NSF grants CCF-2124080, CCF-2239484, CNS-2052947, and CNS-2247370.
   Ronghui Gu is a co-founder of and has an equity interest in CertiK.
CR Atig Mohamed Faouzi, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P210, DOI 10.1007/978-3-642-31424-7_19
   Baumann P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434325
   Ben-Amram AM, 2017, LECT NOTES COMPUT SC, V10427, P601, DOI 10.1007/978-3-319-63390-9_32
   Biere A., 2002, ELECT NOTES THEOR CO, V66, P160, DOI [DOI 10.1016/S1571-0661(04)80410-9, 10.1016/S1571-0661(04)80410-9]
   Chan Benjamin Y., 2020, P 2 ACM C ADV FIN TE, P1, DOI [10.1145/3419614.3423256, DOI 10.1145/3419614.3423256]
   Colon M. A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P442
   Cook Byron, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P265, DOI 10.1145/1190216.1190257
   Cook B, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P320, DOI 10.1145/1250734.1250771
   Cook B, 2013, LECT NOTES COMPUT SC, V7795, P47, DOI 10.1007/978-3-642-36742-7_4
   Farzan A, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P185, DOI 10.1145/2933575.2935310
   Fortin M, 2017, LECT NOTES COMPUT SC, V10427, P155, DOI 10.1007/978-3-319-63390-9_9
   Goel Aman, 2021, 2021 Formal Methods in Computer Aided Design (FMCAD), P112, DOI 10.34727/2021/isbn.978-3-85448-046-4_20
   Goel A, 2021, LECT NOTES COMPUT SC, V12673, P131, DOI 10.1007/978-3-030-76384-8_9
   Gonnord L, 2015, ACM SIGPLAN NOTICES, V50, P608, DOI [10.1145/2813885.2737976, 10.1145/2737924.2737976]
   Hance T, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P99
   Hance T, 2021, PROCEEDINGS OF THE 18TH USENIX SYMPOSIUM ON NETWORKED SYSTEM DESIGN AND IMPLEMENTATION, P115
   Hawblitzel C, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P1, DOI 10.1145/2815400.2815428
   Hawblitzel Chris, 2015, The IronFleet repository
   Hoenicke J, 2017, ACM SIGPLAN NOTICES, V52, P473, DOI 10.1145/3093333.3009893
   Karbyshev A, 2017, J ACM, V64, DOI 10.1145/3022187
   Koenig JR, 2022, LECT NOTES COMPUT SC, V13243, P338, DOI 10.1007/978-3-030-99524-9_18
   Koenig JR, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P703, DOI 10.1145/3385412.3386018
   Kragl B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P227, DOI 10.1145/3385412.3385980
   Lamport L., 2001, SIGACT News, V32, P51
   Lamport L, 1998, ACM T COMPUT SYST, V16, P133, DOI 10.1145/279227.279229
   Leike J, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:16)2015
   Ma HJ, 2022, PROCEEDINGS OF THE 2022 USENIX ANNUAL TECHNICAL CONFERENCE, P151
   Ma HJ, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P370, DOI 10.1145/3341301.3359651
   Malkhi Dahlia, 2008, Technical Report MSR-TR-2008-192
   Moore J Strother, 2000, Computer-Aided Reasoning: ACL2 Case Studies, DOI DOI 10.1007/978-1-4757-3188-0
   Neumann Eike, 2020, P 31 INT C CONC THEO
   Oded Padon, 2021, Source file of the ticket lock protocol in Ivy
   Padon O, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498712
   Padon O, 2021, FORM METHOD SYST DES, V57, P246, DOI 10.1007/s10703-021-00377-1
   Padon O, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158114
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   RAYMOND K, 1989, ACM T COMPUT SYST, V7, P61, DOI 10.1145/58564.59295
   Tel Gerard., 2000, Introduction to Distributed Algorithms, V2nd, DOI DOI 10.1017/CBO9781139168724
   Wilcox James, 2018, The mypyvy language
   Wilcox JR, 2015, ACM SIGPLAN NOTICES, V50, P357, DOI [10.1145/2737924.2737958, 10.1145/2813885.2737958]
   Woos D, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P154, DOI 10.1145/2854065.2854081
   Yao Jianan, 2023, Zenodo, DOI 10.5281/ZENODO.10039066
   Yao JA, 2022, PROCEEDINGS OF THE 16TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, OSDI 2022, P485
   Yao JA, 2021, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '21), P405
NR 45
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 35
DI 10.1145/3632877
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400036
OA gold
DA 2024-08-05
ER

PT J
AU Ryan, G
   Cetin, B
   Lim, Y
   Jana, S
AF Ryan, Gabriel
   Cetin, Burcu
   Lim, Yongwhan
   Jana, Suman
TI Accurate Data Race Prediction in the Linux Kernel through Sparse Fourier
   Learning
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Linux Kernel Testing; Data Race Prediction; Sparse Fourier Learning
AB Testing for data races in the Linux OS kernel is challenging because there is an exponentially large space of system calls and thread interleavings that can potentially lead to concurrent executions with races. In this work, we introduce a new approach for modeling execution trace feasibility and apply it to Linux OS Kernel race prediction. To address the fundamental scalability challenge posed by the exponentially large domain of possible execution traces, we decompose the task of predicting trace feasibility into independent prediction subtasks encoded as learning Boolean indicator functions for specific memory accesses, and apply a sparse fourier learning approach to learning each feasibility subtask.
   Boolean functions that are sparse in their fourier domain can be efficiently learned by estimating the coefficients of their fourier expansion. Since the feasibility of each memory access depends on only a few other relevant memory accesses or system calls (e.g., relevant inter-thread communications), we observe that trace feasibility functions often have this sparsity property and can be learned efficiently. We use learned trace feasibility functions in conjunction with conservative alias analysis to implement a kernel race-testing system, HBFourier, that uses sparse fourier learning to efficiently model feasibility when making predictions. We evaluate our approach on a recent Linux development kernel and show it finds 44 more races with 15.7% more accurate race predictions than the next best performing system in our evaluation, in addition to identifying 5 new race bugs confirmed by kernel developers.
C1 [Ryan, Gabriel; Cetin, Burcu; Lim, Yongwhan; Jana, Suman] Columbia Univ, New York, NY 10027 USA.
C3 Columbia University
RP Ryan, G (corresponding author), Columbia Univ, New York, NY 10027 USA.
EM gabe@cs.columbia.edu; bc2714@columbia.edu; yl5012@columbia.edu;
   suman@cs.columbia.edu
OI Ryan, Gabriel/0009-0003-9464-587X
FU NSF [CNS-2154874]; NSF CAREER award; Google Faculty Gift
FX We thank the anonymous reviewers for their constructive and valuable
   feedback. This work is supported partially by NSF grant CNS-2154874; an
   NSF CAREER award; and Google Faculty Gift. Any opinions, findings,
   conclusions, or recommendations expressed herein are those of the
   authors, and do not necessarily reflect those of NSF or Google.
CR Al Thokair M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571238
   [Anonymous], 2022, CVE-2022-1652
   [Anonymous], 2022, An Introduction to Lockless Algorithms
   [Anonymous], 2022, CVE-2022-3028
   [Anonymous], 2013, Runtime Verification, DOI DOI 10.1007/978-3-642
   [Anonymous], 2023, HBFourier Replication Artifact, DOI [10.6084/m9.figshare.25365340.v1, DOI 10.6084/M9.FIGSHARE.25365340.V1]
   [Anonymous], 2015, Kernel panic due to race condition
   [Anonymous], 2016, Dirty COW (CVE-2016-5195)
   [Anonymous], 2022, Syzkaller
   [Anonymous], 2023, fix for blk-mq racy attribute
   [Anonymous], 2022, CVE-2022-31758
   [Anonymous], 2023, Fix potential data race at PCM memory allocation helpers
   Burckhardt S, 2010, ASPLOS XV: FIFTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P167
   Crama Y., 2011, Boolean functions: Theory, algorithms, and applications
   Flanagan C, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P121, DOI 10.1145/1542476.1542490
   Gong SS, 2021, PROCEEDINGS OF THE 28TH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, SOSP 2021, P66, DOI 10.1145/3477132.3483549
   Huang J, 2014, ACM SIGPLAN NOTICES, V49, P337, DOI [10.1145/2666356.2594315, 10.1145/2594291.2594315]
   Jeong DR, 2019, P IEEE S SECUR PRIV, P754, DOI 10.1109/SP.2019.00017
   Jiang Zu-Ming, 2022, Context-Sensitive and Directional Concurrency Fuzzing for Data-Race Detection
   Kini D, 2017, ACM SIGPLAN NOTICES, V52, P157, DOI [10.1145/3140587.3062374, 10.1145/3062341.3062374]
   Kushilevitz Eyal, 1991, P 23 ANN ACM S THEOR, P455
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Mansour Y., 1994, Theoretical advances in neural computation and learning, P391
   Mathur U, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276515
   Mathur U, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434317
   Mattern Friedemann, 1989, P WORKSH PAR DISTR D
   Musuvathi Madan, 2007, Technical Report MSR-TR-2007-149
   Netzer R., 1989, Detecting data races in parallel program executions
   Netzer R. H. B., 1992, ACM Letters on Programming Languages and Systems, V1, P74, DOI 10.1145/130616.130623
   ODonnell R., 2014, ANAL BOOLEAN FUNCTIO, DOI [DOI 10.1017/CBO9781139814782, 10.1017/CBO9781139814782]
   Pavlogiannis A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371085
   Roemer J, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P747, DOI 10.1145/3385412.3385993
   Ryan Gabriel, 2023, 2023 IEEE S SEC PRIV
   Said M, 2011, LECT NOTES COMPUT SC, V6617, P313, DOI 10.1007/978-3-642-20398-5_23
   Smaragdakis Y, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P387
   Stobbe P, 2012, P MACHINE LEARNING R, V22, P1125
   Wentzlaff David, 2009, Operating Systems Review, V43, P76, DOI 10.1145/1531793.1531805
   Xu M, 2020, P IEEE S SECUR PRIV, P1643, DOI 10.1109/SP40000.2020.00078
   Zhang Y, 2015, IEEE INT CONF AUTOM, P365, DOI 10.1109/ASE.2015.15
NR 39
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 123
DI 10.1145/3649840
PG 23
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600030
OA gold
DA 2024-08-05
ER

PT J
AU Santos, JCS
   Mirakhorli, M
   Shokri, A
AF Santos, Joanna C. S.
   Mirakhorli, Mehdi
   Shokri, Ali
TI SENECA: Taint-Based Call Graph Construction for Java Object
   Deserialization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE object serialization; untrusted object deserialization; taint analysis;
   call graphs
ID POINTS-TO ANALYSIS; STATIC ANALYSIS
AB Object serialization and deserialization are widely used for storing and preserving objects in files, memory, or database as well as for transporting them across machines, enabling remote interaction among processes and many more. This mechanism relies on reflection, a dynamic language that introduces serious challenges for static analyses. Current state-of-the-art call graph construction algorithms do not fully support object serialization/deserialization, i.e., they are unable to uncover the callback methods that are invoked when objects are serialized and deserialized. Since call graphs are a core data structure for multiple types of analysis (e.g., vulnerability detection), an appropriate analysis cannot be performed since the call graph does not capture hidden (vulnerable) paths that occur via callback methods. In this paper, we present SENECA, an approach for handling serialization with improved soundness in the context of call graph construction. Our approach relies on taint analysis and API modeling to construct sound call graphs. We evaluated our approach with respect to soundness, precision, performance, and usefulness in detecting untrusted object deserialization vulnerabilities. Our results show that SENECA can create sound call graphs with respect to serialization features. The resulting call graphs do not incur significant runtime overhead and were shown to be useful for performing identification of vulnerable paths caused by untrusted object deserialization.
C1 [Santos, Joanna C. S.] Univ Notre Dame, Dept Comp Sci & Engn, Notre Dame, IN 46556 USA.
   [Mirakhorli, Mehdi] Univ Hawaii Manoa, Dept Informat & Comp Sci, Honolulu, HI 96822 USA.
   [Shokri, Ali] Virginia Tech, Dept Elect & Comp Engn, Blacksburg, VA 24061 USA.
C3 University of Notre Dame; University of Hawaii System; University of
   Hawaii Manoa; Virginia Polytechnic Institute & State University
RP Santos, JCS (corresponding author), Univ Notre Dame, Dept Comp Sci & Engn, Notre Dame, IN 46556 USA.
EM joannacss@nd.edu; mehdi23@hawaii.edu; ashokri@vt.edu
RI da Silva Santos, Joanna Cecilia/AAF-7544-2021
OI da Silva Santos, Joanna Cecilia/0000-0001-8743-2516; Mirakhorli,
   Mehdi/0009-0000-7963-3756
FU National Science Foundation [CCF-1943300]
FX This material is based upon work supported by the National Science
   Foundation under Grant No. CCF-1943300.
CR Ali K, 2021, IEEE T SOFTWARE ENG, V47, P2644, DOI 10.1109/TSE.2019.2956925
   Ali K, 2012, LECT NOTES COMPUT SC, V7313, P688, DOI 10.1007/978-3-642-31057-7_30
   [Anonymous], 2001, P 2001 ACM SIGPLAN S, DOI DOI 10.1145/379605.379665
   [Anonymous], 2023, Tensorflow
   Antoniadis A, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P794, DOI 10.1145/3385412.3386026
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Bacon DF, 1996, ACM SIGPLAN NOTICES, V31, P324, DOI 10.1145/236338.236371
   Bastani Osbert, 2019, 33 EUR C OBJ OR PROG, DOI [10.4230/LIPIcs.ECOOP.2019.11, DOI 10.4230/LIPICS.ECOOP.2019.11]
   Bodden E, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P241, DOI 10.1145/1985793.1985827
   Bravenboer Martin, 2009, P 24 ACM SIGPLAN C O, P243, DOI [DOI 10.1145/1640089.1640108, 10.1145/1640089.1640108]
   Cao SC, 2023, Arxiv, DOI arXiv:2304.04233
   Cifuentes Cristina., 2015, P 4 ACM SIGPLAN INT, P7, DOI DOI 10.1145/2771284.2771286
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Dean J, 1995, LECT NOTES COMPUT SC, V952, P77, DOI 10.1007/3-540-49538-x_5
   Dietrich J, 2017, J OBJECT TECHNOL, V16, DOI 10.5381/jot.2017.16.4.a1.
   Dietrich Jens, 2017, 31 EUR C OBJ OR PROG, P1, DOI [10.4230/LIPIcs.ECOOP.2017.10, DOI 10.4230/LIPICS.ECOOP.2017.10]
   Dolby Julian, 2007, P 6 JOINT M EUR SOFT, P195
   Eichberg Michael, 2020, JCG-SerializableClasses
   Eichberg Michael, 2014, P 3 ACM SIGPLAN INT, P1, DOI DOI 10.1145/2614628.2614630
   Enck W, 2014, ACM T COMPUT SYST, V32, DOI 10.1145/2619091
   Feldthaus A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P752, DOI 10.1109/ICSE.2013.6606621
   Feng Y, 2015, LECT NOTES COMPUT SC, V9458, P465, DOI 10.1007/978-3-319-26529-2_25
   Fourtounis G, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P209, DOI 10.1145/3213846.3213864
   Froho Chris, 2018, froho~/ysoserial: A proof-of-concept tool for generating payloads that exploit unsafe Java object deserialization
   Grove D, 2001, ACM T PROGR LANG SYS, V23, P685, DOI 10.1145/506315.506316
   Grove D, 1997, ACM SIGPLAN NOTICES, V32, P108, DOI 10.1145/263700.264352
   Haken Ian, 2018, Automated Discovery of Deserialization Gadget Chains
   Heintze N, 2001, ACM SIGPLAN NOTICES, V36, P24, DOI 10.1145/381694.378802
   Hines Stephen, 2005, USING DEOPTIMIZATION, P114, DOI [10.1145/1086228, DOI 10.1145/1086228]
   Jovanovic N, 2006, P IEEE S SECUR PRIV, P258, DOI 10.1109/SP.2006.29
   Kastrinis G, 2013, ACM SIGPLAN NOTICES, V48, P423, DOI 10.1145/2499370.2462191
   Khatchadourian R, 2019, PROC INT CONF SOFTW, P619, DOI 10.1109/ICSE.2019.00072
   Koutroumpouchos N, 2019, PROCEEDINGS OF THE 23RD PAN-HELLENIC CONFERENCE OF INFORMATICS (PCI 2019), P67, DOI 10.1145/3368640.3368680
   Kummita S, 2021, 2021 INT C COD QUAL, P1, DOI [10.1109/ICCQ51190.2021.9392986, DOI 10.1109/ICCQ51190.2021.9392986]
   Landman D, 2017, PROC INT CONF SOFTW, P507, DOI 10.1109/ICSE.2017.53
   Lhoták O, 2006, LECT NOTES COMPUT SC, V3923, P47
   Li Y, 2019, ACM T SOFTW ENG METH, V28, DOI 10.1145/3295739
   Li Y, 2014, LECT NOTES COMPUT SC, V8586, P27
   Liu Ping, 2011, Proceedings of the 2011 International Conference on Computer Science and Network Technology (ICCSNT), P1873, DOI 10.1109/ICCSNT.2011.6182335
   Munoz Alvaro, 2018, Serial killer: Silently pwning your Java endpoints
   Murphy G. C., 1998, ACM Transactions on Software Engineering and Methodology, V7, P158, DOI 10.1145/279310.279314
   NSA Center for Assured Software, 2017, Juliet Java 1.3
   Oracle, 2010, Java Object Serialization Speci~cation-version 6.0
   Peles Or, 2015, 9 USENIX WORKSH OFF, P12
   Rasheed S, 2020, IEEE INT CONF AUTOM, P1209, DOI 10.1145/3324884.3418931
   Reif M, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P251, DOI 10.1145/3293882.3330555
   Reif M, 2018, COMPANION PROCEEDINGS FOR THE ISSTA/ECOOP 2018 WORKSHOPS, P107, DOI 10.1145/3236454.3236503
   Reif Michael, 2023, mreif/jcg-Docker Image | Docker Hub
   RICE HG, 1953, T AM MATH SOC, V74, P358, DOI 10.2307/1990888
   Rosen B. K., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P12, DOI 10.1145/73560.73562
   Rountev A, 2001, ACM SIGPLAN NOTICES, V36, P43, DOI 10.1145/504311.504286
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Santos Joanna C. S., 2020, FTfJP 2020: Proceedings of the 22nd ACM SIGPLAN International Workshop on Formal Techniques for Java-Like Programs, P18, DOI 10.1145/3427761.3428343
   Santos Joanna C. S., 2021, P 10 ACM SIGPLAN INT
   Sayar I, 2023, ACM T SOFTW ENG METH, V32, DOI 10.1145/3554732
   Schneider Christian, 2016, Java Deserialization Attacks
   Schwartz EJ, 2010, P IEEE S SECUR PRIV, P317, DOI 10.1109/SP.2010.26
   Shahriar Hossain., 2016, P 31 ANN ACM S APPL, P801
   Sharp M, 2006, IEEE T SOFTWARE ENG, V32, P664, DOI 10.1109/TSE.2006.93
   Shcherbakov M, 2021, 28TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2021), DOI 10.14722/ndss.2021.24550
   Smaragdakis Y, 2015, LECT NOTES COMPUT SC, V9458, P485, DOI 10.1007/978-3-319-26529-2_26
   Smaragdakis Yannis., 2018, 32nd European Conference on Object-Oriented Programming, V109, p23:1, DOI DOI 10.4230/LIPICS.ECOOP.2018.23
   Sridharan Manu, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P196, DOI 10.1007/978-3-642-36946-9_8
   Sridharan M, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P1053
   Sui L, 2020, PROC INT CONF SOFTW, P1049, DOI 10.1145/3377811.3380441
   Sui L, 2018, LECT NOTES COMPUT SC, V11275, P68, DOI 10.1007/978-3-030-02768-1_4
   Thaller H, 2020, VST '20: PROCEEDINGS OF THE 2020 IEEE 3RD INTERNATIONAL WORKSHOP ON VALIDATION, ANALYSIS, AND EVOLUTION OF SOFTWARE TESTS, P24, DOI [10.1109/VST50071.2020.9051635, 10.1109/vst50071.2020.9051635]
   Thomé J, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P1004, DOI 10.1145/3106237.3122822
   Tip F, 2000, ACM SIGPLAN NOTICES, V35, P281, DOI 10.1145/354222.353190
   Vallee-Rai R., 1999, P 1999 C CTR ADV STU, P13
   VITEK J, 1992, LECT NOTES COMPUT SC, V641, P236
   WALA, 2024, wala/WALA: T.J. Watson Libraries for Analysis, with frontends for Java, Android, and JavaScript, and many common static program analyses
   Wyrich M, 2019, 2019 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON BOTS IN SOFTWARE ENGINEERING (BOTSE 2019), P24, DOI 10.1109/BotSE.2019.00015
NR 73
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 134
DI 10.1145/3649851
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600041
OA gold
DA 2024-08-05
ER

PT J
AU Zheng, MW
   Shi, QK
   Liu, XW
   Xu, XZ
   Yu, L
   Liu, CY
   Wei, GN
   Zhang, XY
AF Zheng, Mingwei
   Shi, Qingkai
   Liu, Xuwei
   Xu, Xiangzhe
   Yu, Le
   Liu, Congyu
   Wei, Guannan
   Zhang, Xiangyu
TI ParDiff: Practical Static Differential Analysis of Network Protocol
   Parsers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Network protocol; protocol format specification; static program
   analysis; differential analysis
ID MODEL CHECKING
AB Countless devices all over the world are connected by networks and communicated via network protocols. Just like common software, protocol implementations suffer from bugs, many of which only cause silent data corruption instead of crashes. Hence, existing automated bug-finding techniques focused on memory safety, such as fuzzing, can hardly detect them. In this work, we propose a static differential analysis called PARDIFF to find protocol implementation bugs, especially silent ones hidden in message parsers. Our key observation is that a network protocol often has multiple implementations and any semantic discrepancy between them may indicate bugs. However, different implementations are often written in disparate styles, e.g., using different data structures or written with different control structures, making it challenging to directly compare two implementations of even the same protocol. To exploit this observation and effectively compare multiple protocol implementations, PARDIFF (1) automatically extracts finite state machines from programs to represent protocol format specifications, and (2) then leverages bisimulation and SMT solvers to find fine-grained and semantic inconsistencies between them. We have extensively evaluated PARDIFF using 14 network protocols. The results show that PARDIFF outperforms both differential symbolic execution and differential fuzzing tools. To date, we have detected 41 bugs with 25 confirmed by developers.
C1 [Zheng, Mingwei; Shi, Qingkai; Liu, Xuwei; Xu, Xiangzhe; Yu, Le; Liu, Congyu; Wei, Guannan; Zhang, Xiangyu] Purdue Univ, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Zheng, MW (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM zheng618@purdue.edu; shi553@purdue.edu; liu2598@purdue.edu;
   xu1415@purdue.edu; yu759@purdue.edu; liu3101@purdue.edu;
   guannanwei@purdue.edu; xyzhang@cs.purdue.edu
RI Liu, Xuwei/JZD-4569-2024; Zheng, Mingwei/JMR-2670-2023
OI Liu, Xuwei/0009-0000-5319-1160; Zheng, Mingwei/0009-0003-6032-6045; Xu,
   Xiangzhe/0000-0001-6619-781X; Wei, Guannan/0000-0002-3150-2033
FU DARPA VSPELLS [HR001120S0058, NSF1901242, 1910300, ONR N000141712045,
   N000141410468, N000141712947]
FX We thank Benjamin Delaware and Zhuo Zhang for insightful discussions. We
   also thank the anonymous reviewers for their comments and suggestions.
   'is work was supported in part by DARPA VSPELLS HR001120S0058,
   NSF1901242 and 1910300, ONR N000141712045, N000141410468 and
   N000141712947. Any opinions, _ndings, and conclusions in this paper are
   those of the authors only and do not necessarily reect the views of our
   sponsors.
CR Arnaboldi Fernando, 2023, XDiFF
   Babic D, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P211, DOI 10.1145/1368088.1368118
   Ball T, 2011, COMMUN ACM, V54, P68, DOI 10.1145/1965724.1965743
   Bao WL, 2016, ACM SIGPLAN NOTICES, V51, P539, DOI 10.1145/2914770.2837656
   Bastani O, 2017, ACM SIGPLAN NOTICES, V52, P95, DOI [10.1145/3062341.3062349, 10.1145/3140587.3062349]
   Bendrissou B, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P260, DOI 10.1145/3519939.3523716
   Biere A, 2009, FRONT ARTIF INTEL AP, V185, P457, DOI 10.3233/978-1-58603-929-5-457
   Caballero J, 2009, CCS'09: PROCEEDINGS OF THE 16TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P621
   Cadar C., 2008, KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs
   Cadar C, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P432, DOI 10.1145/2591062.2591104
   Cho CY, 2013, IEEE INT CONF AUTOM, P136, DOI 10.1109/ASE.2013.6693074
   Chroboczek Juliusz, 2023, RFC 8966
   Churchill B, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1027, DOI 10.1145/3314221.3314596
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Ferreira T, 2021, SIGCOMM '21: PROCEEDINGS OF THE 2021 ACM SIGCOMM 2021 CONFERENCE, P762, DOI 10.1145/3452296.3472938
   Filip Ondrej, 2023, BIRD internet routing daemon
   Fiterau-Brostean P, 2016, LECT NOTES COMPUT SC, V9780, P454, DOI 10.1007/978-3-319-41540-6_25
   FRR community, 2023, The FRRouting protocol suite
   FRR Developers, 2023, FRRouting
   Gentilini R, 2003, J AUTOM REASONING, V31, P73, DOI 10.1023/A:1027328830731
   Godefroid P, 2012, COMMUN ACM, V55, P40, DOI 10.1145/2093548.2093564
   Gopinath R, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P172, DOI 10.1145/3368089.3409679
   Haller Istvan., 2013, USENIX Security Symposium, P49
   Heartbleed, 2020, The Heartbleed Bug
   Huang HQ, 2020, P IEEE S SECUR PRIV, P1613, DOI 10.1109/SP40000.2020.00063
   Johnson NM, 2011, P IEEE S SECUR PRIV, P347, DOI 10.1109/SP.2011.41
   Juliusz Chroboczek, 2023, parse update subtlv in Jech
   Khoussainov Bakhadyr, 2012, Automata theory and its applications, V21, DOI [10.1007/978-1-4612-0171-7, DOI 10.1007/978-1-4612-0171-7]
   Lahiri Shuvendu K., 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P712, DOI 10.1007/978-3-642-31424-7_54
   Lahiri ShuvenduK., 2013, ACM SIGSOFT S FDN SO, P345, DOI DOI 10.1145/2491411.2491452
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/cgo.2004.1281665
   Lin ZQ, 2010, IEEE T SOFTWARE ENG, V36, P688, DOI 10.1109/TSE.2009.54
   Livshits B, 2015, COMMUN ACM, V58, P44, DOI 10.1145/2644805
   Ma SQ, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P175, DOI 10.1145/3236024.3236082
   Malík V, 2021, IEEE INT CONF SOFTW, P329, DOI 10.1109/ICST49551.2021.00045
   Mora F, 2018, IEEE INT CONF AUTOM, P441, DOI [10.1145/3238117.3238178, 10.1145/3238147.3238178]
   Musuvathi M, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE FIRST SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI'04), P155
   Noller Y, 2020, PROC INT CONF SOFTW, P1273, DOI 10.1145/3377811.3380363
   Palikareva H, 2016, PROC INT CONF SOFTW, P1181, DOI 10.1145/2884781.2884845
   Pereyda Joshua, 2023, BooFuzz
   Person S., 2008, P 16 ACM SIGSOFT INT, P226, DOI [10.1145/1453101.1453131, DOI 10.1145/1453101.1453131]
   Person S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P504
   Petsios T, 2017, P IEEE S SECUR PRIV, P615, DOI 10.1109/SP.2017.27
   Ramos DA, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P49
   Ramos David A., 2011, P 23 INT C COMP AID, P669, DOI [DOI 10.1007/978-3-642-22110-1_55, 10.1007/978-3-642]
   Reen GS, 2020, ANN COMPUT SECURITY, P332, DOI 10.1145/3427228.3427662
   Rutledge R, 2022, IEEE INT CONF SOFTW, P256, DOI 10.1109/ICST53961.2022.00035
   Sangiorgi D., 1998, Mathematical Structures in Computer Science, V8, P447, DOI 10.1017/S0960129598002527
   Shi QK, 2023, PROCEEDINGS OF THE 2023 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, CCS 2023, P1287, DOI 10.1145/3576915.3616614
   Shi QK, 2018, ACM SIGPLAN NOTICES, V53, P693, DOI 10.1145/3192366.3192418
   Sui Yulei, 2011, P 9 AS S PROGR LANG, P155, DOI DOI 10.1007/978-3-642-25318-8
   Verdoolaege S, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362390
   Wei GN, 2023, PROC INT CONF SOFTW, P1316, DOI 10.1109/ICSE48619.2023.00116
   Wikipedia contributors, 2022, List of open-source routing platforms
   Xie YC, 2005, ACM SIGPLAN NOTICES, V40, P351, DOI 10.1145/1047659.1040334
   Yang Y, 2021, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '21), P349
   Zou Yong-Hao, 2021, 2021 USENIX ANN TECH, P489
NR 57
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 137
DI 10.1145/3649854
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600044
OA gold
DA 2024-08-05
ER

PT J
AU Ding, YT
   Qiu, XK
AF Ding, Yuantian
   Qiu, Xiaokang
TI Enhanced Enumeration Techniques for Syntax-Guided Synthesis of
   Bit-Vector Manipulations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Syntax-guided synthesis; Bit vector; Term graph; Enumeration; Large
   language model
AB Syntax-guided synthesis has been a prevalent theme in various computer-aided programming systems. However, the domain of bit-vector synthesis poses several unique challenges that have not yet been sufficiently addressed and resolved. In this paper, we propose a novel synthesis approach that incorporates a distinct enumeration strategy based on various factors. Technically, this approach weighs in subexpression recurrence by term-graph-based enumeration, avoids useless candidates by example-guided filtration, prioritizes valuable components identified by large language models. This approach also incorporates a bottom-up deduction step to enhance the enumeration algorithm by considering subproblems that contribute to the deductive resolution. We implement all the enhanced enumeration techniques in our SyGuS solver DRYADSYNTH, which outperforms state-of-the-art solvers in terms of the number of solved problems, execution time, and solution size. Notably, DRYADSYNTH successfully solved 31 synthesis problems for the first time, including 5 renowned Hacker's Delight problems.
C1 [Ding, Yuantian; Qiu, Xiaokang] Purdue Univ, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Ding, YT (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM ding360@purdue.edu; xkqiu@purdue.edu
OI Qiu, Xiaokang/0000-0001-9476-7349
FU National Science Foundation [CCF-1837023, CCF-2046071, CCF-2319425]
FX This publication is based upon work supported by the National Science
   Foundation under Award Nos. CCF-1837023, CCF-2046071 and CCF-2319425.
   Any opinions, findings and conclusions or recommendations expressed in
   this publication are those of the authors and do not necessarily reflect
   the views of the National Science Foundation.
CR Albarghouthi Aws, 2013, LNCS, P934
   Alur R, 2018, COMMUN ACM, V61, P84, DOI 10.1145/3208071
   Alur R, 2017, LECT NOTES COMPUT SC, V10205, P319, DOI 10.1007/978-3-662-54577-5_18
   Alur R, 2015, LECT NOTES COMPUT SC, V9207, P163, DOI 10.1007/978-3-319-21668-3_10
   Balog Matej, 2017, INT C LEARNING REPRE
   Barke S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428295
   Barrett Clark, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P171, DOI 10.1007/978-3-642-22110-1_14
   BARRETT C., 2017, Technical report
   Cambronero J, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571226
   Chen YJ, 2020, LECT NOTES COMPUT SC, V12225, P587, DOI 10.1007/978-3-030-53291-8_30
   Ding Yuantian, 2023, Zenodo, DOI 10.5281/ZENODO.10129930
   Feng Y, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3140587.3062351, 10.1145/3062341.3062351]
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2813885.2737977, 10.1145/2737924.2737977]
   Fowler G., 1991, FOWLER NOLL VO FNV H
   Garner R, 2012, J LOGIC COMPUT, V22, P1427, DOI 10.1093/logcom/exr021
   Gulwani S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P62
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Huang KJ, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1159, DOI 10.1145/3385412.3386027
   Itzhaky S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P944, DOI 10.1145/3453483.3454087
   Jeon J, 2017, FORM METHOD SYST DES, V50, P75, DOI 10.1007/s10703-017-0269-8
   Jeon J, 2015, LECT NOTES COMPUT SC, V9207, P377, DOI 10.1007/978-3-319-21668-3_22
   Ji RY, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485544
   Lee W, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434335
   Lee W, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P436, DOI [10.1145/3192366.3192410, 10.1145/3296979.3192410]
   Murali Vijayaraghavan, 2018, INT C LEARNING REPRE
   Nandi C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485496
   Niemetz Aina, 2020, 2020 Formal Methods in Computer Aided Design (FMCAD), P214, DOI 10.34727/2020/isbn.978-3-85448-042-6_29
   Nötzli A, 2019, LECT NOTES COMPUT SC, V11628, P279, DOI 10.1007/978-3-030-24258-9_20
   OpenAI, 2022, ChatGPT: Large-scale language models
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2813885.2738007, 10.1145/2737924.2738007]
   Polikarpova N, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290385
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Quinlan J. R., 1986, Machine Learning, V1, P81, DOI 10.1023/A:1022643204877
   Reynolds A, 2019, LECT NOTES COMPUT SC, V11562, P74, DOI 10.1007/978-3-030-25543-5_5
   Reynolds A, 2015, LECT NOTES COMPUT SC, V9207, P198, DOI 10.1007/978-3-319-21668-3_12
   Si Xujie, 2019, INT C LEARNING REPRE
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Srivastava S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P313, DOI 10.1145/1706299.1706337
   Udupa A, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2499370.2462174
   Warren H., 2012, Hacker's delight, V2nd
NR 41
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 71
DI 10.1145/3632913
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400072
OA gold
DA 2024-08-05
ER

PT J
AU Grodin, H
   Niu, Y
   Sterling, J
   Harper, R
AF Grodin, Harrison
   Niu, Yue
   Sterling, Jonathan
   Harper, Robert
TI Decalf: A Directed, Effectful Cost-Aware Logical Framework
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE algorithm analysis; cost models; phase distinction; noninterference;
   intensional property; behavioral verification; equational reasoning;
   modal type theory; mechanized proof; proof assistants; recurrence
   relations; amortized analysis; parallel algorithms
AB We present decalf, a directed, effectful cost-aware logical framework for studying quantitative aspects of functional programs with effects. Like calf, the language is based on a formal phase distinction between the extension and the intension of a program, its pure behavior as distinct from its cost measured by an effectful step-counting primitive. The type theory ensures that the behavior is unaffected by the cost accounting. Unlike calf, the present language takes account of effects, such as probabilistic choice and mutable state. This extension requires a reformulation of calf's approach to cost accounting: rather than rely on a "separable" notion of cost, here a cost bound is simply another program. To make this formal, we equip every type with an intrinsic preorder, relaxing the precise cost accounting intrinsic to a program to a looser but nevertheless informative estimate. For example, the cost bound of a probabilistic program is itself a probabilistic program that specifies the distribution of costs. This approach serves as a streamlined alternative to the standard method of isolating a cost recurrence and readily extends to higher-order, effectful programs.
   The development proceeds by first introducing the decalf type system, which is based on an intrinsic ordering among terms that restricts in the extensional phase to extensional equality, but in the intensional phase reflects an approximation of the cost of a program of interest. This formulation is then applied to a number of illustrative examples, including pure and effectful sorting algorithms, simple probabilistic programs, and higher-order functions. Finally, we justify decalf via a model in the topos of augmented simplicial sets.
C1 [Grodin, Harrison; Niu, Yue; Harper, Robert] Carnegie Mellon Univ, Dept Comp Sci, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
   [Sterling, Jonathan] Univ Cambridge, Dept Comp Sci & Technol, 15 JJ Thomson Ave, Cambridge CB3 0FD, England.
C3 Carnegie Mellon University; University of Cambridge
RP Grodin, H (corresponding author), Carnegie Mellon Univ, Dept Comp Sci, 5000 Forbes Ave, Pittsburgh, PA 15213 USA.
EM hgrodin@cs.cmu.edu; yuen@andrew.cmu.edu; js2878@cl.cam.ac.uk;
   rwh@cs.cmu.edu
RI Harper, Robert/HLH-3752-2023
OI Harper, Robert/0000-0002-9400-2941; Sterling,
   Jonathan/0000-0002-0585-5564; Grodin, Harrison/0000-0002-0947-3520
FU AFOSR [MURI FA9550-15-1-0053, FA9550-19-1-0216, FA9550-21-0009,
   FA9550-23-1-0728]; National Science Foundation [CCF-1901381]; AFRL
   through the NDSEG fellowship - European Union under the Marie
   Sklodowska-Curie Actions Postdoctoral Fellowship [101065303]; NSF
FX This work was supported in part by AFOSR (Tristan Nguyen, program
   manager) under grants MURI FA9550-15-1-0053, FA9550-19-1-0216,
   FA9550-21-0009, and FA9550-23-1-0728 and in part by the National Science
   Foundation under award number CCF-1901381, and by AFRL through the NDSEG
   fellowship. This work was co-funded by the European Union under the
   Marie Sklodowska-Curie Actions Postdoctoral Fellowship grant agreement
   101065303 (https://cordis.europa.eu/project/id/101065303).Any opinions,
   findings and conclusions or recommendations expressed in this material
   are those of the authors and do not necessarily reflect the views of the
   AFOSR, NSF, AFRL, the European Union, or the European Commission.
   Neither the European Union nor the granting authority can be held
   responsible for them.
CR Ahman D, 2016, LECT NOTES COMPUT SC, V9634, P36, DOI 10.1007/978-3-662-49630-5_3
   Artin M., 1972, Lecture Notes in Math., V269
   Awodey S, 2024, Arxiv, DOI arXiv:2110.14576
   Birkedal Lars, 2022, Lecture Notes on Iris: Higher -Order Concurrent Separation Logic
   Christensen J. D., 2020, High. Struct, V4, P1, DOI [10.21136/HS.2020.01, DOI 10.21136/HS.2020.01]
   Dubuc Eduardo J., 1979, Cah. Topologie Geom. Differ. Categoriques, V20, P231
   Fiore M. P., 1997, Mathematical Structures in Computer Science, V7, P591, DOI 10.1017/S0960129597002429
   Fiore MP, 2022, Arxiv, DOI arXiv:2101.02994
   Fiore Marcelo P., 1997, Electronic Notes in Theoretical Computer Science, V6, P133, DOI [DOI 10.1016/S1571-0661(05)80165-3, 10.1016/S1571-0661(05, DOI 10.1016/S1571-0661(05]
   Fiore MP, 2001, THEOR COMPUT SCI, V264, P171, DOI 10.1016/S0304-3975(00)00221-8
   Gratzer D, 2021, Arxiv, DOI arXiv:2012.10783
   Grodin H, 2024, Arxiv, DOI [arXiv:2307.05938, 10.48550/arXiv.2307.05938, DOI 10.48550/ARXIV.2307.05938]
   Grodin Harrison, 2024, agda-calf v2.0.0, DOI [10.1145/3580425, DOI 10.1145/3580425]
   Grodin Harrison, 2023, 10 C ALG COALG COMP, V23, P1, DOI 10.4230
   HARPER R, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P341, DOI 10.1145/96709.96744
   HOARE CAR, 1962, COMPUT J, V5, P10, DOI 10.1093/comjnl/5.1.10
   Hoare Charles AR, 1961, COMMUN ACM, V4, P321, DOI DOI 10.1145/366622.366644
   Hofmann Martin, 1995, Ph. D. Dissertation
   Hyland J. M. E., 1991, LECT NOTES MATH, P131
   Kaposi A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290315
   Kavvos G. A., 2020, Proceedings of the ACM on Programming Languages, V4, DOI 10.1145/3371083
   Levy Paul Blain, 2003, SEMANT STRUCT COMPUT, P2
   Licata DR, 2011, ELECTRON NOTES THEOR, V276, P263, DOI 10.1016/j.entcs.2011.09.026
   Maietti ME, 2005, MATH STRUCT COMP SCI, V15, P1089, DOI 10.1017/S0960129505004962
   Martin-Lof P., 1984, series of lectures given in Padua
   Niu Y, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498670
   Niu Yue, 2022, agda-calf, DOI [10.1145/3462303, DOI 10.1145/3462303]
   Norell U, 2009, LECT NOTES COMPUT SC, V5832, P230, DOI 10.1007/978-3-642-04652-0_5
   Pédrot PM, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371126
   Phoa Wesley, 1991, Domain Theory in Realizability Toposes
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Radicek I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158124
   Rajani V, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434308
   Riehl Emily, 2017, Higher Structures, V1, P147, DOI [10.1007/s42001-017-0005-6, DOI 10.1007/S42001-017-0005-6]
   Rijke E, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:2)2020
   Rijke Egbert, 2019, Ph. D. Dissertation
   Sterling J, 2022, LOG METH COMPUT SCI, V18, DOI 10.46298/LMCS-18(1:43)2022
   Sterling J, 2021, J ACM, V68, DOI 10.1145/3474834
   Sterling Jonathan, 2021, Ph. D. Dissertation., DOI [10.5281/zenodo.6990769, DOI 10.5281/ZENODO.6990769]
   Sterling Jonathan, 2019, Leibniz International Proceedings in Informatics (LIPIcs), V131, DOI [10.4230/LIPIcs.FSCD.2019.31, DOI 10.4230/LIPICS.FSCD.2019.31]
   Uemura T, 2023, MATH STRUCT COMP SCI, V33, P134, DOI 10.1017/S0960129523000208
   Uemura Taichi, 2021, Abstract and Concrete Type Theories
   Vakar M, 2017, Arxiv, DOI [arXiv:1706.07997, 10.48550/arXiv.1706.07997]
NR 43
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 10
DI 10.1145/3632852
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400011
OA Green Published, gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Timany, A
   Guéneau, A
   Birkedal, L
AF Timany, Amin
   Gueneau, Armael
   Birkedal, Lars
TI The Logical Essence of Well-Bracketed Control Flow
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE well-bracketedness; stack discipline; program logics; program
   verification; logical relations; semantic typing
ID FULL ABSTRACTION; LOCAL STATE; BISIMULATION; SEMANTICS
AB A program is said to be well-bracketed if every called function must return before its caller can resume execution. This is often the case. Well-bracketedness has been captured semantically as a condition on strategies in fully abstract games models and multiple prior works have studied well-bracketedness by showing correctness/security properties of programs where such properties depend on the well-bracketed nature of control flow. The latter category of prior works have all used involved relational models with explicit state-transition systems capturing the relevant parts of the control flow of the program. In this paper we present the first Hoare-style program logic based on separation logic for reasoning about well-bracketedness and use it to show correctness of well-bracketed programs both directly and also through defining unary and binary logical relations models based on this program logic. All results presented in this paper are formalized on top of the Iris framework and mechanized in the Coq proof assistant.
C1 [Timany, Amin] Aarhus Univ, Aarhus, Denmark.
   [Gueneau, Armael] Univ Paris Saclay, CNRS, ENS Paris Saclay, Inria,LMF, Paris, France.
   [Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
C3 Aarhus University; Universite Paris Saclay; Inria; Centre National de la
   Recherche Scientifique (CNRS); Universite Paris Cite; Aarhus University
RP Timany, A (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM timany@cs.au.dk; armael.gueneau@inria.fr; Birkedal@cs.au.dk
RI Timany, Amin/KXS-1704-2024
OI Timany, Amin/0000-0002-2237-851X; Birkedal, Lars/0000-0003-1320-0098;
   Gueneau, Armael/0000-0003-3072-4045
FU Villum Investigator grant [25804]; Center for Basic Research in Program
   Verification (CPV); VILLUM Foundation
FX This work was supported in part by a Villum Investigator grant (no.
   25804), Center for Basic Research in Program Verification (CPV), from
   the VILLUM Foundation.
CR Abramsky S, 1998, THIRTEENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, PROCEEDINGS, P334, DOI 10.1109/LICS.1998.705669
   Ahmed Amal, 2009, Proceedings of the 36th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2009, Savannah, GA, USA, January 21-23, 2009, P340, DOI [10.1145/1480881.1480925, DOI 10.1145/1594834.1480925]
   Biernacki D, 2019, LECT NOTES COMPUT SC, V11425, P98, DOI 10.1007/978-3-030-17127-8_6
   Birkedal Lars, 2021, Proceedings of the ACM on Programming Languages, V5, DOI 10.1145/3473586
   Birkedal Lars, 2017, Lecture Notes on Iris: Higher-Order Concurrent Separation Log
   de Vilhena PE, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434314
   Dreyer D, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P143
   Georges AL, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434287
   Hur CK, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P59
   Hyland JME, 2000, INFORM COMPUT, V163, P285, DOI [10.1006/inco.2000.2917, 10.1006/inco2000.2917]
   Jaber G, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470524
   Jagadeesan R, 2009, LECT NOTES COMPUT SC, V5490, P72, DOI 10.1007/978-3-642-02059-9_3
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Laird J, 2007, LECT NOTES COMPUT SC, V4596, P667
   Laird J, 1997, IEEE S LOG, P58, DOI 10.1109/LICS.1997.614931
   Lassen SB, 2008, IEEE S LOG, P341, DOI 10.1109/LICS.2008.26
   Lassen SB, 2007, LECT NOTES COMPUT SC, V4646, P283
   Murawski AS, 2011, IEEE S LOG, P75, DOI 10.1109/LICS.2011.31
   Murawski AS, 2005, THEOR COMPUT SCI, V338, P315, DOI 10.1016/j.tcs.2004.12.036
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   Pitts A. M., 1999, Operational Reasoning for Functions with Local State, P227
   Pottier F, 2008, IEEE S LOG, P331, DOI 10.1109/LICS.2008.16
   Pottier Francois, 2009, Generalizing the higher-order frame and anti-frame rules
   Skorstengaard L, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290332
   Stovring Kristian, 2009, A Complete, Coinductive Syntactic Theory of Sequential Control and State, P329, DOI [10.1007/978-3-642-04164-8_17, DOI 10.1007/978-3-642-04164-8_17]
   Sumii E, 2004, ACM SIGPLAN NOTICES, V39, P161, DOI 10.1145/982962.964015
   Sumii E, 2009, LECT NOTES COMPUT SC, V5771, P455, DOI 10.1007/978-3-642-04027-6_33
   Timany A, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P91, DOI 10.1145/3437992.3439931
   Timany A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341709
   Timany Amin, 2022, A Logical Approach to Type Soundness
NR 31
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 20
DI 10.1145/3632862
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400021
OA gold
DA 2024-08-05
ER

PT J
AU Li, HN
   Hao, Y
   Zhai, YZ
   Qian, ZY
AF Li, Haonan
   Hao, Yu
   Zhai, Yizhuo
   Qian, Zhiyun
TI Enhancing Static Analysis for Practical Bug Detection: An LLM-Integrated
   Approach
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Static analysis; bug detection; large language model
AB While static analysis is instrumental in uncovering software bugs, its precision in analyzing large and intricate codebases remains challenging. The emerging prowess of Large Language Models (LLMs) offers a promising avenue to address these complexities. In this paper, we present LLift, a pioneering framework that synergizes static analysis and LLMs, with a spotlight on identifying Use Before Initialization (UBI) bugs within the Linux kernel. Drawing from our insights into variable usage conventions in Linux, we enhance path analysis using post-constraint guidance. This approach, combined with our methodically crafted procedures, empowers LLift to adeptly handle the challenges of bug-specific modeling, extensive codebases, and the unpredictable nature of LLMs. Our real-world evaluations identified four previously undiscovered UBI bugs in the mainstream Linux kernel, which the Linux community has acknowledged. This study reaffirms the potential of marrying static program analysis with LLMs, setting a compelling direction for future research in this area.
C1 [Li, Haonan; Hao, Yu; Zhai, Yizhuo; Qian, Zhiyun] Univ Calif Riverside, Riverside, CA 92521 USA.
C3 University of California System; University of California Riverside
RP Li, HN (corresponding author), Univ Calif Riverside, Riverside, CA 92521 USA.
EM hli333@ucr.edu; yhao016@ucr.edu; yzhai003@ucr.edu; zhiyunq@cs.ucr.edu
RI Hao, Yu/JDD-2851-2023
OI Hao, Yu/0000-0002-3944-3162; Li, Haonan/0000-0003-0357-0888
FU National Science Foundation [1953933, 1652954]
FX We thank the anonymous reviewers for their valuable feedback. This work
   was supported in part by the National Science Foundation under Grant No.
   1953933 and 1652954. Any opinions, findings, conclusions, or
   recommendations expressed in this material are those of the authors and
   do not necessarily reflect the views of the National Science Foundation.
CR Achiam OJ, 2023, Arxiv, DOI arXiv:2303.08774
   Ahmed Toufique, 2024, 2024 IEEE ACM 45 INT
   Anthropic, 2023, 2023. Claude 2
   Chen JH, 2023, Arxiv, DOI arXiv:2304.03262
   Chen M., 2021, arXiv, DOI DOI 10.48550/ARXIV.2107.03374
   Chen XY, 2023, Arxiv, DOI arXiv:2304.05128
   Chiang Ted, 2023, The New YorkerFeb.
   Copilot, 2023, GitHub Copilot documentation
   Feng SD, 2024, Arxiv, DOI arXiv:2306.01987
   Gosain A., 2015, Intelligent Computing and Applications
   Huang J, 2007, Path-Oriented Program Analysis, DOI [10.1017/CBO9780511546990, DOI 10.1017/CBO9780511546990]
   Huang J, 2022, arXiv
   Ji ZW, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3571730
   Karpas Ehud, 2022, arXiv
   Khare A, 2024, Arxiv, DOI arXiv:2311.16169
   Krawczyk Jack, 2023, Bard's latest update: more features, languages and countries
   LangChain, 2023, Announcing LangSmith, a unified platform for debugging, testing, evaluating, and monitoring your LLM applications
   Lemieux C, 2023, PROC INT CONF SOFTW, P919, DOI 10.1109/ICSE48619.2023.00085
   Li Haonan, 2024, Zenodo, DOI 10.5281/ZENODO.10780591
   Liu H, 2023, Arxiv, DOI arXiv:2302.02676
   Liu Yi, 2023, arXiv, DOI DOI 10.48550/ARXIV.2305.12865
   Lu KJ, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P1867, DOI 10.1145/3319535.3354244
   Ma W, 2024, Arxiv, DOI arXiv:2305.12138
   Nginx, 2020, About us
   OpenAI, 2022, Introducing chatgpt
   OpenAI, 2023, Function calling and other API updates
   Ouyang L., 2022, arXiv
   Pallagani V, 2023, Arxiv, DOI arXiv:2305.16151
   Parisi A, 2022, Arxiv, DOI arXiv:2205.12255
   Park J, 2021, ACM COMPUT SURV, V54, DOI 10.1145/3464457
   Pearce H, 2023, P IEEE S SECUR PRIV, P2339, DOI 10.1109/SP46215.2023.10179420
   Pei K, 2024, Arxiv, DOI arXiv:2308.03312
   Pei Kexin, 2023, P 40 INT C MACH LEAR
   Salamone Luke, 2021, What is Temperature in NLP?
   Schick T., 2023, arXiv
   Shieh J., 2023, Best practices for prompt engineering with OpenAI API
   Shinn N, 2023, Arxiv, DOI arXiv:2303.11366
   Song YS, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3582688
   Sui YL, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P265, DOI 10.1145/2892208.2892235
   Sun Yuqiang, 2024, 2024 IEEE ACM 45 INT
   Tian HY, 2023, Arxiv, DOI [arXiv:2304.11938, DOI 10.48550/ARXIV.2304.11938]
   TianoCore, 2022, tianocore/edk2
   Touvron H, 2023, Arxiv, DOI [arXiv:2307.09288, DOI 10.48550/ARXIV.2307.09288]
   Vaswani A, 2017, ADV NEUR IN, V30
   Wang GZ, 2023, Arxiv, DOI arXiv:2305.16291
   Wei JS, 2022, Arxiv, DOI arXiv:2201.11903
   Weng Lilian, 2023, LLM-powered Autonomous Agents
   Xia CS, 2023, Arxiv, DOI arXiv:2304.00385
   Xu Frank F., 2022, MAPS 2022: Proceedings of the 6th ACM SIGPLAN International Symposium on Machine Programming, P1, DOI 10.1145/3520312.3534862
   Yao SY, 2023, Arxiv, DOI [arXiv:2305.10601, DOI 10.48550/ARXIV.2305.10601]
   Yao Shunyu, 2023, INT C LEARN REPR ICL
   Zhai YZ, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P221, DOI 10.1145/3368089.3409686
   Zhao WX, 2023, Arxiv, DOI arXiv:2303.18223
   Zheng S, 2023, Arxiv, DOI [arXiv:2304.10513, 10.48550/arXiv.2304.10513, DOI 10.48550/ARXIV.2304.10513]
NR 54
TC 0
Z9 0
U1 3
U2 3
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 111
DI 10.1145/3649828
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600018
OA gold
DA 2024-08-05
ER

PT J
AU Lu, KC
   Krishnamurthi, S
AF Lu, Kuang-Chen
   Krishnamurthi, Shriram
TI Identifying and Correcting Programming Language Behavior Misconceptions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program behavior/semantics; misconceptions; automated interactive tutors
ID TESTED SEMANTICS
AB Misconceptions about core linguistic concepts like mutable variables, mutable compound data, and their interaction with scope and higher-order functions seem to be widespread. But how do we detect them, given that experts have blind spots and may not realize the myriad ways in which students can misunderstand programs? Furthermore, once identified, what can we do to correct them?
   In this paper, we present a curated list of misconceptions, and an instrument to detect them. These are distilled from student work over several years and match and extend prior research. We also present an automated, self-guided tutoring system. The tutor builds on strategies in the education literature and is explicitly designed around identifying and correcting misconceptions.
   We have tested the tutor in multiple settings. Our data consistently show that (a) the misconceptions we tackle are widespread, and (b) the tutor appears to improve understanding.
C1 [Lu, Kuang-Chen; Krishnamurthi, Shriram] Brown Univ, Dept Comp Sci, 115Waterman St, Providence, RI 02912 USA.
C3 Brown University
RP Lu, KC (corresponding author), Brown Univ, Dept Comp Sci, 115Waterman St, Providence, RI 02912 USA.
EM kuang-chen_lu@brown.edu; shriram@brown.edu
OI Krishnamurthi, Shriram/0000-0001-5184-1975
FU US NSF [2227863]
FX This work is partially supported by the US NSF under grant number
   2227863.
CR Alfieri L, 2013, EDUC PSYCHOL-US, V48, P87, DOI 10.1080/00461520.2013.775712
   ANDERSON JR, 1985, BIOL BEHAV, V10, P159
   [Anonymous], 2010, ACM Transactions on Computing Education (TOCE), DOI 10.1145/1789934.1789935
   Bernhardt Gary, 2012, Wat.
   Chase David, 2023, Fixing For Loops in Go 1.22-The Go Programming Language.
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Clements John, 2022, Towards a Notional Machine for Runtime Stacks and Scope: When Stacks Don't Stack Up, DOI [10.1145/3501385.3543961, DOI 10.1145/3501385.3543961]
   Cox Russ, 2023, Spec: Less Error-Prone Loop Variable Scoping Issue #60078 Golang/Go
   Crichton W, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3622841
   Diwan Amer, 2004, Journal on Educational Resources in Computing, V4, P1, DOI [10.1145/1086339.1086340, DOI 10.1145/1086339.1086340]
   du Boulay B, 1999, INT J HUM-COMPUT ST, V51, P265, DOI 10.1006/ijhc.1981.0309
   Duran R, 2021, ACM T COMPUT EDUC, V21, DOI 10.1145/3469128
   Felleisen M, 2018, COMMUN ACM, V61, P62, DOI 10.1145/3127323
   Fisler K, 2017, PROCEEDINGS OF THE 2017 ACM SIGCSE TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION (SIGCSE'17), P213, DOI 10.1145/3017680.3017777
   Fleury A. E., 1991, SIGCSE Bulletin, V23, P283, DOI 10.1145/107005.107066
   Friedman D.P., 2001, ESSENTIALS PROGRAMMI, V2nd
   froadie, 2022, What's the Scope of a Variable Initialized in an If Statement?
   Goldman K, 2008, SIGCSE'08: PROCEEDINGS OF THE 39TH ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P256, DOI 10.1145/1352322.1352226
   Grover S, 2017, PROCEEDINGS OF THE 2017 ACM SIGCSE TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION (SIGCSE'17), P267, DOI 10.1145/3017680.3017723
   Guha A, 2010, LECT NOTES COMPUT SC, V6183, P126, DOI 10.1007/978-3-642-14107-2_7
   Hermans F, 2018, WIPSCE'18: PROCEEDINGS OF THE 13TH WORKSHOP IN PRIMARY AND SECONDARY COMPUTING EDUCATION, P45, DOI 10.1145/3265757.3265765
   Hestenes D., 1992, PHYS TEACH, V30, P141, DOI [10.1119/1.2343497, DOI 10.1119/1.2343497]
   KATEHAKIS MN, 1987, MATH OPER RES, V12, P262, DOI 10.1287/moor.12.2.262
   Krishnamurthi S, 2019, CAMB HANDB PSYCHOL, P377
   Krishnamurthi Shriram, 2022, Programming Languages: Application and Interpretation, Vthird
   Krishnamurthi Shriram., 2007, Programming languages: Application and interpretation
   Lippert Eric, 2009, Closing over the Loop Variable Considered Harmful
   Lu Kuang-Chen, 2024, Replication Package for Article: 'Identifying and Correcting Programming Language Behavior Misconceptions', DOI [10.1145/3580432, DOI 10.1145/3580432]
   Nathan M. J., 2001, P 3 INT C COGN SCI B, P644, DOI DOI 10.1111/J.1756-8765.2009.01053.X
   National Research Council, 1997, Science teaching reconsidered: A handbook, DOI [DOI 10.17226/5287, https://doi.org/10.17226/5287]
   Pane JF, 2002, IEEE 2002 SYMPOSIA ON HUMAN CENTRIC COMPUTING LANGUAGES AND ENVIRONMENTS, PROCEEDINGS, P198, DOI 10.1109/HCC.2002.1046372
   Politz JG, 2013, ACM SIGPLAN NOTICES, V48, P217, DOI [10.1145/2509136.2509536, 10.1145/2544173.2509536]
   Politz JG, 2013, ACM SIGPLAN NOTICES, V48, P1, DOI 10.1145/2480360.2384579
   Pombrio Justin, 2017, 2 SUMM ADV PROGR LAN
   Posner G.J., 1982, Science Education, V66, P211, DOI [10.1002/sce.3730660207, DOI 10.1002/SCE.3730660207]
   Putnam R. T., 1986, Journal of Educational Computing Research, V2, P459, DOI 10.2190/FGN9-DJ2F-86V8-3FAU
   Reitz Kenneth, 2016, The Hitchhiker's Guide to Python: Best Practices for Development
   Saarinen S, 2019, SIGCSE '19: PROCEEDINGS OF THE 50TH ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P606, DOI 10.1145/3287324.3287504
   Schroeder NL, 2022, EDUC PSYCHOL REV, V34, P957, DOI 10.1007/s10648-021-09656-z
   sharvey, 2022, Creating Functions (or Lambdas) in a Loop (or Comprehension)
   Sorva J, 2013, ACM T COMPUT EDUC, V13, DOI 10.1145/2483710.2483713
   Sorva Juha, Ph. D. Dissertation
   Sorva Juha, 2012, Visual Program Simulation in Introductory Programming Education
   Stefik A, 2013, ACM T COMPUT EDUC, V13, DOI 10.1145/2534973
   Stromback Filip, 2023, P 25 AUSTR COMP ED C, P39, DOI [10.1145/3576123.3576128, DOI 10.1145/3576123.3576128]
   Taylor C, 2014, COMPUT SCI EDUC, V24, P253, DOI 10.1080/08993408.2014.970779
   Tew AE, 2011, SIGCSE 11: PROCEEDINGS OF THE 42ND ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P111
   VanLehn K., 2006, INT J ARTIF INTELL E, V16, P227, DOI DOI 10.5555/1435351.1435353
   Wilson PT, 2018, DLS'18: PROCEEDINGS OF THE 14TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES, P1, DOI 10.1145/3276945.3276947
   Wilson Preston Tunnell, 2017, Can We Crowdsource Language Design?
NR 50
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 106
DI 10.1145/3649823
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600013
OA gold
DA 2024-08-05
ER

PT J
AU Lu, YF
   Hou, WD
   Pan, MX
   Li, XD
   Su, ZD
AF Lu, Yifei
   Hou, Weidong
   Pan, Minxue
   Li, Xuandong
   Su, Zhendong
TI Understanding and Finding Java Decompiler Bugs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Reverse Engineering; Decompiler; Differential Testing
ID FLOW
AB Java decompilers are programs that perform the reverse process of Java compilers, i.e., they translate Java bytecode to Java source code. They are essential for reverse engineering purposes and have become more sophisticated and reliable over the years. However, it remains challenging for modern Java decompilers to reliably perform correct decompilation on real-world programs. To shed light on the key challenges of Java decompilation, this paper provides the first systematic study on the characteristics and causes of bugs in mature, widely-used Java decompilers. We conduct the study by investigating 333 unique bugs from three popular Java decompilers. Our key findings and observations include: (1) Although most of the reported bugs were found when decompiling large, real-world code, 40.2% of them have small test cases for bug reproduction; (2) Over 80% of the bugs manifest as exceptions, syntactic errors, or semantic errors, and bugs with source code artifacts are very likely semantic errors; (3) 57.7%, 39.0%, and 41.1% of the bugs respectively are attributed to three stages of decompilers-loading structure entities from bytecode, optimizing these entities, and generating source code from these entities; (4) Bugs in decompilers' type inference are the most complex to fix; and (5) Region restoration for structures like loop, sugaring for special structures like switch, and type inference of variables of generic types or indistinguishable types are the three most significant challenges in Java decompilation, which to some extent explains our findings in (3) and (4).
   Based on these findings, we present JD-Tester, a differential testing framework for Java decompilers, and our experience of using it in testing the three popular Java decompilers. JD-Tester utilizes different Java program generators to construct executable Java tests and finds exceptions, syntactic, and semantic inconsistencies (i.e. bugs) between a generated test and its compiled-decompiled version (through compilation and execution). In total, we have found 62 bugs in the three decompilers, demonstrating both the effectiveness of JD-Tester, and the importance of testing and validating Java decompilers.
C1 [Lu, Yifei; Hou, Weidong; Pan, Minxue; Li, Xuandong; Su, Zhendong] Nanjing Univ, Software Inst, State Key Lab Novel Software Technol, Nanjing, Peoples R China.
C3 Nanjing University
RP Pan, MX (corresponding author), Nanjing Univ, Software Inst, State Key Lab Novel Software Technol, Nanjing, Peoples R China.
EM lyf@nju.edu.cn; vincent.xiayi@gmail.com; mxp@nju.edu.cn; lxd@nju.edu.cn;
   zhendong.su@inf.ethz.ch
RI Hou, Weidong/KGK-6735-2024
OI Hou, Weidong/0009-0007-9842-0458; Lu, Yifei/0000-0003-4758-3285; Su,
   Zhendong/0000-0002-2970-1391
FU National Natural Science Foundation of China [62372227, 62232001];
   Fundamental Research Funds for the Central Universities [2023300180]
FX We sincerely thank all anonymous reviewers for their constructive
   feedback. This research is supported by the National Natural Science
   Foundation of China (Nos. 62372227 and 62232001) and the Fundamental
   Research Funds for the Central Universities (No. 2023300180).
CR Agrawal P., 2020, International Journal of Computer Applications, V975, P8887
   Alzahrani A, 2019, 2019 FIRST IEEE INTERNATIONAL CONFERENCE ON TRUST, PRIVACY AND SECURITY IN INTELLIGENT SYSTEMS AND APPLICATIONS (TPS-ISA 2019), P28, DOI 10.1109/TPS-ISA48467.2019.00013
   [Anonymous], 2011, USENIX SEC S
   Balachandran V, 2016, COMPUT SECUR, V61, P72, DOI 10.1016/j.cose.2016.05.003
   Bonnaventure W, 2021, IEEE INT C S Q R S, P586, DOI 10.1109/QRS54544.2021.00069
   Brumley D., 2013, P USENIX SEC, P353
   Chaliasos S, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P183, DOI 10.1145/3519939.3523427
   Chen S, 2019, PROC INT CONF SOFTW, P596, DOI 10.1109/ICSE.2019.00070
   Chen S, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P797, DOI 10.1145/3236024.3275523
   Chen YT, 2019, PROC INT CONF SOFTW, P1257, DOI 10.1109/ICSE.2019.00127
   Chen YT, 2016, ACM SIGPLAN NOTICES, V51, P85, DOI [10.1145/2908080.2908095, 10.1145/2980983.2908095]
   Dasgupta S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P655, DOI 10.1145/3385412.3385964
   Dong SK, 2018, L N INST COMP SCI SO, V254, P172, DOI 10.1007/978-3-030-01701-9_10
   Halstead M.H., 1977, Elements of Software Science (Operating and Programming Systems Series
   Hamilton J, 2009, IEEE INT WORK C SO, P129, DOI 10.1109/SCAM.2009.24
   Harrand N, 2020, J SYST SOFTWARE, V168, DOI 10.1016/j.jss.2020.110645
   Harrand N, 2019, IEEE INT WORK C SO, P92, DOI 10.1109/SCAM.2019.00019
   JetBrains, 2023, IntelliJ IDEA: The Capable & Ergonomic Java IDE by JetBrains
   Kim S, 2017, IEEE INT CONF AUTOM, P353, DOI 10.1109/ASE.2017.8115648
   Kostelansky Jozef, 2017, Communication and Information Technologies (KIT), P1, DOI [10.23919/KIT.2017.8109451, DOI 10.23919/KIT.2017.8109451]
   Li MH, 2017, PROC INT CONF SOFTW, P335, DOI 10.1109/ICSE.2017.38
   Liu Zhibo, 2020, PROC 29 ACM SIGSOFT, P475, DOI DOI 10.1145/3395363.3397370
   Lu Y, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P268, DOI 10.1145/3338906.3338980
   Luo LH, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-021-10013-5
   Marcono1234, 2019, Removal of default constructors when decompiling jar breaks method references
   Martín A, 2017, SOFT COMPUT, V21, P7405, DOI 10.1007/s00500-016-2283-y
   Mathis B, 2017, IEEE INT CONF AUTOM, P263, DOI 10.1109/ASE.2017.8115639
   Mauthe N, 2021, 2021 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER 2021), P400, DOI 10.1109/SANER50967.2021.00044
   Moiz A, 2020, IEEE INT WORK C SO, P110, DOI 10.1109/SCAM51674.2020.00017
   Naeem NA, 2007, INT C PROGRAM COMPRE, P253
   Paleari Roberto, 2010, P 19 INT S SOFTW TES, P265, DOI [10.1145/1831708.1831741, DOI 10.1145/1831708.1831741]
   Sun CN, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P361, DOI 10.1145/3180155.3180236
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Yakdan K., 2015, NDSS
   Yakovlev Andrey, 2022, 2022 State of the Java Ecosystem Report | New relic
   Yakovlev Andrey, 2023, CodeIntelligenceTesting/jazzer: Coverage-guided, in-process fuzzing for the JVM
   Yakovlev Andrey, 2018, AzulSystems/JavaFuzzer: Java* Fuzzer for Android
   Yakovlev Andrey, 2016, Android-art-intel: Java* Fuzzer for Android
   Yoshikawa T, 2003, THIRD INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P20, DOI 10.1109/QSIC.2003.1319081
   Zang ZQ, 2022, IEEE INT CONF AUTOM, DOI 10.1145/3551349.3556958
   Zhang YH, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P129, DOI 10.1145/3213846.3213866
NR 41
TC 0
Z9 0
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 143
DI 10.1145/3649860
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600050
OA gold
DA 2024-08-05
ER

PT J
AU Marshall, D
   Orchard, D
AF Marshall, Daniel
   Orchard, Dominic
TI Functional Ownership through Fractional Uniqueness
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE graded modal types; ownership; borrowing; fractional permissions
ID LOGIC
AB Ownership and borrowing systems, designed to enforce safe memory management without the need for garbage collection, have been brought to the fore by the Rust programming language. Rust also aims to bring some guarantees offered by functional programming into the realm of performant systems code, but the type system is largely separate from the ownership model, with type and borrow checking happening in separate compilation phases. Recent models such as RustBelt and Oxide aim to formalise Rust in depth, but there is less focus on integrating the basic ideas into more traditional type systems. An approach designed to expose an essential core for ownership and borrowing would open the door for functional languages to borrow concepts found in Rust and other ownership frameworks, so that more programmers can enjoy their benefits.
   One strategy for managing memory in a functional setting is through uniqueness types, but these offer a coarse-grained view: either a value has exactly one reference, and can be mutated safely, or it cannot, since other references may exist. Recent work demonstrates that linear and uniqueness types can be combined in a single system to offer restrictions on program behaviour and guarantees about memory usage. We develop this connection further, showing that just as graded type systems like those of Granule and Idris generalise linearity, a Rust-like ownership model arises as a graded generalisation of uniqueness. We combine fractional permissions with grading to give the first account of ownership and borrowing that smoothly integrates into a standard type system alongside linearity and graded types, and extend Granule accordingly with these ideas.
C1 [Marshall, Daniel; Orchard, Dominic] Univ Kent, Canterbury, Kent, England.
   [Orchard, Dominic] Univ Cambridge, Cambridge, England.
C3 University of Kent; University of Cambridge
RP Marshall, D (corresponding author), Univ Kent, Canterbury, Kent, England.
EM dm635@kent.ac.uk; D.A.Orchard@kent.ac.uk
OI Orchard, Dominic/0000-0002-7058-7842; Marshall,
   Danielle/0000-0002-4284-3757
FU EPSRC Doctoral Training Award (Marshall); EPSRC [EP/T013516/1]
FX Thanks to comments and feedback from the anonymous reviewers as well as
   input from Michael Vollmer. This work was supported in part by an EPSRC
   Doctoral Training Award (Marshall) and EPSRC grant EP/T013516/1
   (Orchard). Orchard is also supported in part by the generosity of Eric
   and Wendy Schmidt by recommendation of the Schmidt Sciences program.
CR Abel A, 2023, P ACM PROGRAM LANG, V7, DOI [10.1145/36078620, 10.1145/3607862]
   Abel A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408972
   Almeida PS, 1997, LECT NOTES COMPUT SC, V1241, P32, DOI 10.1007/BFb0053373
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Balabonski T, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2837022
   Bao YY, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485516
   Barendsen E., 1996, Mathematical Structures in Computer Science, V6, P579
   Benton PN, 1995, LECT NOTES COMPUT SC, V933, P121, DOI 10.1007/BFb0022251
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Bianchini R, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3622843
   Bianchini R, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563319
   Bianchini Riccardo, 2023, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V3, P1
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Brady Edwin C., 2021, Idris 2: Quantitative Type Theory in Practice, V9, P1, DOI [10.4230/LIPIcs.ECOOP.2021.9, DOI 10.4230/LIPICS.ECOOP.2021.9]
   Brunel A, 2014, LECT NOTES COMPUT SC, V8410, P351
   Choudhury P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434331
   Clarke D, 2003, LECT NOTES COMPUT SC, V2743, P176
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   de Vries Edsko, 2013, The Beauty of Functional Code. Essays Dedicated to Rinus Plasmeijer on the Occasion of His 61st Birthday. LNCS 8106, P181, DOI 10.1007/978-3-642-40355-2_13
   de Vries E, 2008, LECT NOTES COMPUT SC, V5083, P201, DOI 10.1007/978-3-540-85373-2_12
   de Vries Edsko, 2009, EPTCS, V22, P26, DOI [10.4204/EPTCS.22.3, DOI 10.4204/EPTCS.22.3]
   Iii HE, 2020, Arxiv, DOI arXiv:2006.08854
   Fluet M, 2006, LECT NOTES COMPUT SC, V3924, P7
   Gaboardi M, 2016, ACM SIGPLAN NOTICES, V51, P476, DOI 10.1145/3022670.2951939
   Ghica DR, 2014, LECT NOTES COMPUT SC, V8410, P331
   GIRARD JY, 1992, THEOR COMPUT SCI, V97, P1, DOI 10.1016/0304-3975(92)90386-T
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   Hanukaev P, 2023, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON TYPE-DRIVEN DEVELOPMENT, TYDE 2023, P58, DOI 10.1145/3609027.3609408
   Harrington D, 2006, THEOR COMPUT SCI, V354, P24, DOI 10.1016/j.tcs.2005.11.006
   Hicks Michael, 2004, P 4 INT S MEM MAN VA, P73, DOI DOI 10.1145/1029873.1029883
   HOGG J, 1991, OOPSLA 91 CONFERENCE PROCEEDINGS : OBJECT-ORIENTED PROGRAMMING SYSTEMS, LANGUAGES, AND APPLICATIONS, P271, DOI 10.1145/118014.117975
   Hughes J, 2021, ELECTRON P THEOR COM, P109, DOI 10.4204/EPTCS.353.6
   Hughes Jack, 2021, 5 INT WORKSH TRENDS
   Jouvelot Pierre., 1991, ACM SIGACTSIGPLAN S, P303, DOI DOI 10.1145/99583.99623
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371109
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Lorenzen Anton, 2023, ICFP'23, DOI [10.1145/3607840preprint, DOI 10.1145/3607840PREPRINT]
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Makwana Dhruv C, 2019, NumLin: Linear Types for Linear Algebra, DOI [10.4230/LIPICS.ECOOP.2019.14, DOI 10.4230/LIPICS.ECOOP.2019.14]
   Marshall D, 2023, Arxiv, DOI arXiv:2309.04324
   Marshall Daniel, 2024, Zenodo, DOI 10.5281/ZENODO.10797791
   Marshall D, 2022, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.356.1
   Marshall D, 2022, LECT NOTES COMPUT SC, V13240, P346, DOI 10.1007/978-3-030-99336-8_13
   Marshall Daniel, 2022, Leibniz International Proceedings in Informatics (LIPIcs), V222, P1, DOI [10.4230/LIPIcs.ECOOP.2022.5, DOI 10.4230/LIPICS.ECOOP.2022.5]
   Marshall Daniel, 2024, Functional Ownership through Fractional Uniqueness (Appendix), DOI [10.5281/zenodo.10799026, DOI 10.5281/ZENODO.10799026]
   McBride Conor, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P207, DOI 10.1007/978-3-319-30936-1_12
   McBride Conor, 2001, The Derivative of a Regular Type is its Type of One-Hole Contexts, P74
   Moon B, 2021, LECT NOTES COMPUT SC, V12648, P462, DOI 10.1007/978-3-030-72019-3_17
   Mycroft Alan, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P59, DOI 10.1007/978-3-642-36946-9_4
   O'connor L, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S095679682100023X
   Orchard D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341714
   Pearce DJ, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3443420
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Radanne G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408985
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   Smetsers S., 1994, Graph Transformations in Computer Science. International Workshop Proceedings, P358
   Somogyi Z, 1996, J LOGIC PROGRAM, V29, P17, DOI 10.1016/S0743-1066(96)00068-4
   Spiwack A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547626
   Tofte M., 2004, Higher-Order and Symbolic Computation, V17, P245, DOI 10.1023/B:LISP.0000029446.78563.a4
   Tov JA, 2011, ACM SIGPLAN NOTICES, V46, P447, DOI 10.1145/1925844.1926436
   Vollmer V, 2024, Arxiv, DOI arXiv:2401.17199
   Wadler Philip, 1993, MATH FDN PROGRAMMING, P513, DOI [10.1007/3-540-58027-1_24, DOI 10.1007/3-540-58027-1_24]
   Wadler Philip, 1990, Programming Concepts and Methods, V3, P5
   Walker D, 2000, ACM T PROGR LANG SYS, V22, P701, DOI 10.1145/363911.363923
   Wei GN, 2024, P ACM PROGRAM LANG, V8, DOI 10.1145/3632856
   Weiss A, 2021, Arxiv, DOI arXiv:1903.00982
   Wood J, 2022, LECT NOTES COMPUT SC, V13240, P376, DOI 10.1007/978-3-030-99336-8_14
   Zhu DP, 2005, LECT NOTES COMPUT SC, V3350, P83
NR 69
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 131
DI 10.1145/3649848
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600038
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Xu, YC
   Boruch-Gruszecki, A
   Odersky, M
AF Xu, Yichen
   Boruch-Gruszecki, Aleksander
   Odersky, Martin
TI Degrees of Separation: A Flexible Type System for Safe Concurrency
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Scala; capture checking; type systems; safe concurrency; data race
   freedom
ID UNIQUENESS
AB Data races have long been a notorious problem in concurrent programming. They are hard to detect, and lead to non-deterministic behaviours. There has been a lot of interest in type systems that statically guarantee data race freedom. Significant progress has been made in this area, and these type systems are increasingly usable and practical. However, their adoption in mainstream programming languages is still limited, which is largely attributed to their strict alias prevention principles that obstruct the usage of existing programming patterns. This is a deterrent to the migration of existing code bases. To tackle this problem, we propose Capture Separation Calculus (System CSC), a calculus that models fork-join parallelism and statically prevents data races while being compatible with established programming patterns. It follows a control-as-you-need philosophy: by default, aliases are allowed, but they are tracked in the type system. When data races are a concern, the tracked aliases are controlled to prevent data-race-prone patterns. We study the formal properties of System CSC. Type soundness is proven via the standard progress and preservation theorems. Additionally, we formally verify the data race freedom property of System CSC by proving that the reduction of a well-typed program is confluent.
C1 [Xu, Yichen; Boruch-Gruszecki, Aleksander; Odersky, Martin] Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; Ecole Polytechnique
   Federale de Lausanne
RP Xu, YC (corresponding author), Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
EM yichen.xu@epfl.ch; aleksander.boruch-gruszecki@epfl.ch;
   martin.odersky@epfl.ch
RI xu, yichen/KYR-0603-2024
OI Xu, Yichen/0000-0003-2089-6767; Odersky, Martin/0009-0005-3923-8993
FU Swiss National Science Foundation [TMAG-2_209506/1]; Swiss National
   Science Foundation (SNF) [TMAG-2_209506] Funding Source: Swiss National
   Science Foundation (SNF)
FX This research was partially funded by Swiss National Science Foundation
   grant TMAG-2_209506/1. We thank Ondrej Lhotak, Jonathan Brachthauser and
   Edward Lee for their valuable feedbacks during the discussions of this
   work. We thank the anonymous reviewers for their insightful comments and
   suggestions.
CR Amin Nada, 2016, A List of Successes That Can Change the World
   Bao YY, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485516
   Barendsen E., 1996, Mathematical Structures in Computer Science, V6, P579
   Boyapati C, 2001, ACM SIGPLAN NOTICES, V36, P56, DOI 10.1145/504311.504287
   Boyland J, 2001, SOFTWARE PRACT EXPER, V31, P533, DOI 10.1002/spe.370
   Boyland JT, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1749608.1749611
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Castegren Elias, 2016, EUR C OBJ OR PROGR
   Church A, 1936, T AM MATH SOC, V39, P472, DOI 10.2307/1989762
   Clarke D, 2003, LECT NOTES COMPUT SC, V2743, P176
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Clebsch Sylvan, 2015, Proceedings of the 5th International Workshop on Programming Based on Actors, Agents, and Decentralized Control, AGERE!'15, P1, DOI 10.1145
   Fähndrich M, 2002, ACM SIGPLAN NOTICES, V37, P13, DOI 10.1145/543552.512532
   Ferdowsi K, 2023, Arxiv, DOI arXiv:2301.02308
   Goodfellow I, 2016, ADAPT COMPUT MACH LE, P1
   Gordon CS, 2012, ACM SIGPLAN NOTICES, V47, P21, DOI 10.1145/2398857.2384619
   HOGG J, 1991, SIGPLAN NOTICES, V26, P271
   Karl Crary DavidWalker, 1999, ACM SIGACT S PRINC P
   Klabnik Steve, 2018, The Rust Programming Language
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Levy Amit, 2015, P 8 WORKSH PROGR LAN, P21, DOI [10.1145/2818302.2818306, DOI 10.1145/2818302.2818306]
   Marshall D, 2022, LECT NOTES COMPUT SC, V13240, P346, DOI 10.1007/978-3-030-99336-8_13
   Milano Mae, 2022, P 43 ACM SIGPLAN INT
   Miller Mark Samuel, 2006, Ph. D. Dissertation
   Noble J, 2022, Arxiv, DOI arXiv:2205.00795
   ODERSKY M, 1992, LECT NOTES COMPUT SC, V582, P390
   Odersky Martin, 2022, arXiv
   OHearn Peter W., 1999, Mathematical Foundations of Programming Semantics
   Racordon Dimitri, 2022, J. Object Technol., V21, P1
   Rapoport M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360571
   Reynolds John C., 1978, P 5 ACM SIGACT SIGPL
   Scala, 2022, The Scala 3 compiler, also known as Dotty
   Servetto Marco, 2013, Balloon Types for Safe Parallelisation over Arbitrary Object Graphs
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
   Wei GN, 2023, Arxiv, DOI arXiv:2307.13844
   Weiss A, 2021, Arxiv, DOI arXiv:1903.00982
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 37
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 136
DI 10.1145/3649853
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600043
OA gold
DA 2024-08-05
ER

PT J
AU Chataing, N
   Dolan, S
   Scherer, G
   Yallop, J
AF Chataing, Nicolas
   Dolan, Stephen
   Scherer, Gabriel
   Yallop, Jeremy
TI Unboxed Data Constructors: Or, How cpp Decides a Halting Problem
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE data representation; sum types; tagging; boxing; recursive definitions;
   termination
AB We propose a new language feature for ML-family languages, the ability to selectively unbox certain data constructors, so that their runtime representation gets compiled away to just the identity on their argument. Unboxing must be statically rejected when it could introduce confusion, that is, distinct values with the same representation.
   We discuss the use-case of big numbers, where unboxing allows to write code that is both efficient and safe, replacing either a safe but slow version or a fast but unsafe version. We explain the static analysis necessary to reject incorrect unboxing requests. We present our prototype implementation of this feature for the OCaml programming language, discuss several design choices and the interaction with advanced features such as Guarded Algebraic Datatypes.
   Our static analysis requires expanding type definitions in type expressions, which is not necessarily normalizing in presence of recursive type definitions. In other words, we must decide normalization of terms in the first-order lambda-calculus with recursion. We provide an algorithm to detect non-termination on-the-fly during reduction, with proofs of correctness and completeness. Our algorithm turns out to be closely related to the normalization strategy for macro expansion in the cpp preprocessor.
C1 [Chataing, Nicolas] ENS Paris, Paris, France.
   [Dolan, Stephen] Jane St, London, England.
   [Scherer, Gabriel] INRIA, Paris, France.
   [Yallop, Jeremy] Univ Cambridge, Cambridge, England.
C3 Universite PSL; Ecole Normale Superieure (ENS); Inria; University of
   Cambridge
RP Chataing, N (corresponding author), ENS Paris, Paris, France.
EM nicolas.chataing@gmail.com; stedolan@stedolan.net;
   gabriel.scherer@gmail.com; jeremy.yallop@cl.cam.ac.uk
OI Dolan, Stephen/0000-0002-4609-9101; Scherer, Gabriel/0000-0003-1758-3938
CR Agacan Omer Sinan, 2016, GHC unboxed sums
   Bartell-Mangel Noah Lev, 2022, Filling a Niche: Using Spare Bits to Optimize Data Representations
   Baudon T, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3607858
   Beingessner Aria, 2015, Rust RFC 1230: More Exotic Enum Layout Optimizations
   Ben Michael, 2022, rustc PR 94075: Use niche-~lling optimization even when multiple variants have data
   Burtescu Eduard-Mihai, 2017, rustc PR 45225: Refactor type memory layouts and ABIs, to be more general and easier to optimize
   Chan Lloyd., 2017, Scala Pre-SIP: Unboxed wrapper types
   Chen ZL, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571240
   Colin Simon., 2019, JFLA 2019
   Compall Stephen., 2017, Blog post: the high cost of AnyVal classes
   Diatchki IS, 2005, ACM SIGPLAN NOTICES, V40, P168, DOI 10.1145/1090189.1086387
   Diomidis Spinellis, 2008, A corrected and annotated version of the X4J11/86-196 document
   Granlund Torbjorn, 1991, GMP
   Gregoire Benjamin, 2011, CPP
   Hughes R J. M., 1982, P 1982 ACM S LISP FU, P1, DOI DOI 10.1145/800068.802129
   Khasidashvil Zurab, 2020, Shalva Pkhakadze's Festschrift, V25
   Marlow Simon., 2003, GHC's UNPACK pragma
   Mine Antoine., 2012, Zarith
   Odersky Martin, 2018, dotty PR 5300: Opaque types
   Osheim Erik., 2017, Scala SIP 35: Opaque types
   Peyton-Jones Simon, 2007, GHC view patterns
   Plotkin G, 2022, Arxiv, DOI arXiv:2206.08413
   Prosser Dave, 1986, X3J11/86-196: Complete macro expansion algorithm
   Salvati S, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(2:7)2015
   Syme D, 2007, ACM SIGPLAN NOTICES, V42, P29, DOI 10.1145/1291220.1291159
   Syme Don, 2016, Fsharp PR 1395: struct discriminated unions
   The C++ standard committee working group SG12, An update to the preprocessor speci~cation
   The C standard committee working group WG14, 1992, Defect report 017
   TURNER DA, 1979, SOFTWARE PRACT EXPER, V9, P31, DOI 10.1002/spe.4380090105
   Weeks Stephen, 2006, ML WORKSH 2006
   Yallop Jeremy, 2020, OCaml RFC: constructor unboxing
NR 31
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 51
DI 10.1145/3632893
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400052
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Moy, C
   Dimoulas, C
   Felleisen, M
AF Moy, Cameron
   Dimoulas, Christos
   Felleisen, Matthias
TI Effectful Software Contracts
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE effect handlers; software contracts
AB Software contracts empower programmers to describe functional properties of components. When it comes to constraining effects, though, the literature offers only one-off solutions for various effects. It lacks a universal principle. This paper presents the design of an effectful contract system in the context of effect handlers. A key metatheorem shows that contracts cannot unduly interfere with a program's execution. An implementation of this design, along with an evaluation of its generality, demonstrates that the theory can guide practice.
C1 [Moy, Cameron; Dimoulas, Christos; Felleisen, Matthias] Northeastern Univ, PLT, Boston, MA 02115 USA.
C3 Northeastern University
RP Moy, C (corresponding author), Northeastern Univ, PLT, Boston, MA 02115 USA.
EM camoy@ccs.neu.edu; chrdimo@northwestern.edu; matthias@ccs.neu.edu
OI Dimoulas, Christos/0000-0002-9338-7034
FU NSF [SHF 2116372]
FX This work was supported by NSF grant SHF 2116372. The authors would like
   to thank: Robby Findler, for help with Racket's contract system;
   participants of the NII Shonan Meeting 203 on effect handlers, for their
   insightful questions and discussions; and the anonymous POPL reviewers,
   for their comments and suggestions.
CR Ahman D, 2020, LECT NOTES COMPUT SC, V12075, P29, DOI 10.1007/978-3-030-44914-8_2
   Andersen L, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3275519
   Schwerter FB, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283, DOI 10.1145/2628136.2628149
   Barendregt HenkP., 1981, THE LAMBDA CALCULUS
   Bassham Lawrence E., 2010, Technical Report
   Biernacki D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158096
   Blume M, 2006, J FUNCT PROGRAM, V16, P375, DOI 10.1017/S0956796806005971
   Brachthäuser JI, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527320
   Cartwright R., 1994, Theoretical Aspects of Computer Software. International Symposium TACS '94 Proceedings, P244
   Chalin P, 2006, LECT NOTES COMPUT SC, V4111, P342
   Chandrasekaran Sivaramakrishnan Krishnamoorthy, 2018, Dagstuhl Reports, DOI [10.4230/DagRep.8.4.104, DOI 10.4230/DAGREP.8.4.104]
   Clements J, 2004, ACM T PROGR LANG SYS, V26, P1029, DOI 10.1145/1034774.1034778
   Clements J, 2001, LECT NOTES COMPUT SC, V2028, P320
   Curry H.B., 1958, Combinatory logic, V1
   Dean J, 2008, COMMUN ACM, V51, P107, DOI 10.1145/1327452.1327492
   DENNIS JB, 1966, COMMUN ACM, V9, P143, DOI 10.1145/365230.365252
   Dimoulas C, 2012, LECT NOTES COMPUT SC, V7211, P214, DOI 10.1007/978-3-642-28869-2_11
   Dimoulas C, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2039346.2039348
   Dimoulas C, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P215, DOI 10.1145/1926385.1926410
   Dimoulas Christos, 2016, P 21 ACM SIGPLAN INT, DOI [10.1145/2951913.2951930, DOI 10.1145/2951913.2951930]
   Disney T, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P176
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Felleisen M, 2018, COMMUN ACM, V61, P62, DOI 10.1145/3127323
   Felleisen Matthias, 1988, Principles of Programming Languages (POPL), DOI DOI 10.1145/73560.73576
   Felleisen Matthias, 2009, Semantics Engineering with PLT Redex
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Findler RB, 2001, ACM SIGPLAN NOTICES, V36, P1, DOI 10.1145/504311.504283
   Findler Robert Bruce, 2006, Functional and Logic Programming (FLP), DOI [10.1007/11737414_16, DOI 10.1007/11737414_16]
   Flatt M, 2007, ACM SIGPLAN NOTICES, V42, P165, DOI 10.1145/1291220.1291178
   Flatt M, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P45, DOI 10.1145/3385412.3385981
   Flatt Matthew., 2010, Technical Report PLT-TR- 2010-1
   Freund Teodoro, 2021, DLS 2021: Proceedings of the 17th ACM SIGPLAN International Symposium on Dynamic Languages, P1, DOI 10.1145/3486602.3486767
   Greenberg M, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P353, DOI 10.1145/1706299.1706341
   Hillerström D, 2018, LECT NOTES COMPUT SC, V11275, P415, DOI 10.1007/978-3-030-02768-1_22
   Keil M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P375, DOI 10.1145/2784731.2784737
   Keil Matthias., 2015, 29th European Conference on Object-Oriented Programming, ECOOP 2015, July 5-10, 2015, Prague, Czech Republic, P28, DOI DOI 10.4230/LIPICS.ECOOP.2015.28
   Lazarek L, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371133
   Leijen Daan., 2013, Technical Report MSR-TR-2013-79
   Matthews J, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1498926.1498930
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Meyer B., 1988, OBJECT ORIENTED SOFT
   Moore S, 2016, ACM SIGPLAN NOTICES, V51, P214, DOI 10.1145/3022671.2984021
   Moy Cameron, 2023, Zenodo, DOI 10.5281/ZENODO.10151333
   Moy C, 2023, J FUNCT PROGRAM, V33, DOI 10.1017/S0956796823000096
   Nguy Phuc C., 2019, Programming Language Design and Implementation (PLDI), DOI [10.1145/3325984, DOI 10.1145/3325984]
   Nguyen PC, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158139
   Oliveira BCDS, 2012, J FUNCT PROGRAM, V22, P797, DOI 10.1017/S0956796812000354
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   RIVEST RL, 1978, COMMUN ACM, V21, P120, DOI 10.1145/357980.358017
   Scholliers C, 2015, SCI COMPUT PROGRAM, V98, P360, DOI 10.1016/j.scico.2013.09.005
   Schwerter FB, 2016, PROCEEDINGS OF THE 2016 ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING (SLE'16), P195, DOI 10.1145/2997364.2997381
   Shinnar Avraham Ever, 2011, Safe and Effective Contracts
   Sitaram D., 1990, LISP and Symbolic Computation, V3, P67, DOI 10.1007/BF01806126
   Strickland T. Stephen, 2012, ObjectOriented Programming, Systems, Languages and Applications (OOPSLA), DOI [10.1145/2384616.2384685, DOI 10.1145/2384616.2384685]
   Tobin-Hochstadt S, 2011, ACM SIGPLAN NOTICES, V46, P132, DOI 10.1145/1993316.1993514
   Tov JA, 2010, LECT NOTES COMPUT SC, V6012, P550, DOI 10.1007/978-3-642-11957-6_29
   Williams J, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276504
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Xie NN, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408981
   Xu DN, 2009, ACM SIGPLAN NOTICES, V44, P41, DOI 10.1145/1594834.1480889
   Xu Dana N., 2012, Partial Evaluation and Program Manipulation (PEPM), DOI DOI 10.1145/2103746.2103767
   Xu Dana N, 2014, Dynamic Contract Checking for OCaml
   Zhang YZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290318
NR 66
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 88
DI 10.1145/3632930
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400089
OA gold
DA 2024-08-05
ER

PT J
AU Avanzini, M
   Barthe, G
   Grégoire, B
   Moser, G
   Vanoni, G
AF Avanzini, Martin
   Barthe, Gilles
   Gregoire, Benjamin
   Moser, Georg
   Vanoni, Gabriele
TI Hopping Proofs of Expectation-Based Properties: Applications to
   Skiplists and Security Proofs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programs; Hoare logic; formal verification
ID INVARIANTS
AB We propose, implement, and evaluate a hopping proof approach for proving expectation-based properties of probabilistic programs. Our approach combines eHL, a syntax-directed proof system for reducing proof goals of a program to proof goals of simpler programs, with a "hopping" proof rule for reducing proof goals of an original program to proof goal of a different program which is suitably related (by means of pRHL, a relational program logic for probabilistic program) to the original program. We prove that eHL is sound for a core language with procedure calls and adversarial computations, and complete for the adversary-free fragment of the language. We also provide an implementation of eHL into EasyCrypt, a proof assistant tailored for reasoning about relational properties of probabilistic programs. We provide a tight integration of eHL with other program logics supported by EasyCrypt, and in particular probabilistic Relational Hoare Logic (pRHL). Using this tight integration, we give mechanized proofs of expected complexity of in-place implementations of randomized quickselect and skip lists. We also sketch applications of our approach to cryptographic proofs and discuss the broader impact of eHL in the EasyCrypt proof assistant.
C1 [Avanzini, Martin; Gregoire, Benjamin; Vanoni, Gabriele] Univ Cote Dazur, Ctr Inria, Route Lucioles BP 93, F-06902 Sophia Antipolis, France.
   [Barthe, Gilles] MPI SP, D-44799 Bochum, Germany.
   [Barthe, Gilles] IMDEA Software Inst, Madrid 28223, Spain.
   [Moser, Georg] Univ Innsbruck, Dept Comp Sci, Technikerstr 21a, A-6020 Innsbruck, Austria.
C3 Universite Cote d'Azur; IMDEA Software Institute; University of
   Innsbruck
RP Avanzini, M (corresponding author), Univ Cote Dazur, Ctr Inria, Route Lucioles BP 93, F-06902 Sophia Antipolis, France.
EM martin.avanzini@inria.fr; gilles.barthe@mpi-sp.org;
   benjamin.gregoire@inria.fr; georg.moser@uibk.ac.at;
   gabriele.vanoni@irif.fr
OI BARTHE, Gilles/0000-0002-3853-1777; Moser, Georg/0000-0001-9240-6128
FU ANR Project PPS: "Probabilistic Program Semantics"; Agence Nationale de
   la Recherche (ANR, French National Research Agency) [NR-22-PECY-0006];
   FWF Project AUTOSARD: "Automated Sublinear Amortised Resource Analysis
   of Data Structures"
FX We would like the thank the annoymous reviewers for their work and
   invaluable suggestions, which greatly improved our presentation. This
   work is partly supported by the ANR Project PPS: "Probabilistic Program
   Semantics" and the Agence Nationale de la Recherche (ANR, French
   National Research Agency) as part of the France 2030 programme
   -ANR-22-PECY-0006. Further it is partly supported by the FWF Project
   AUTOSARD: "Automated Sublinear Amortised Resource Analysis of Data
   Structures".
CR Agrawal S., 2018, PACMPL, V2, P34, DOI DOI 10.1145/3385412.3386002
   Avanzini M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591263
   Avanzini M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473592
   Avanzini M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428240
   Avanzini M, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785725
   Avanzini M, 2020, SCI COMPUT PROGRAM, V185, DOI 10.1016/j.scico.2019.102338
   Barbosa M., 2023, Advances in cryptology-CRYPTO 2023, P358, DOI [10.1007/978-3-031-38554-412, DOI 10.1007/978-3-031-38554-412]
   Barbosa M, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2541, DOI 10.1145/3460120.3484548
   Barthe Gilles, 2014, Foundations of Security Analysis and Design VII. FOSAD 2012/2013 Tutorial Lectures: LNCS 8604, P146, DOI 10.1007/978-3-319-10082-1_6
   Barthe Gilles, 2012, Mathematics of Program Construction. Proceedings 11th International Conference, MPC 2012, P1, DOI 10.1007/978-3-642-31113-0_1
   Barthe G, 2017, ACM SIGPLAN NOTICES, V52, P161, DOI 10.1145/3093333.3009896
   Barthe G, 2016, LECT NOTES COMPUT SC, V9779, P43, DOI 10.1007/978-3-319-41528-4_3
   Barthe G, 2015, LECT NOTES COMPUT SC, V9450, P387, DOI 10.1007/978-3-662-48899-7_27
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Batz K, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571260
   Bertot Y, 2008, LECT NOTES COMPUT SC, V5170, P86, DOI 10.1007/978-3-540-71067-7_11
   Bournez O, 2005, LECT NOTES COMPUT SC, V3467, P323
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chatterjee K, 2017, LECT NOTES COMPUT SC, V10426, P118, DOI 10.1007/978-3-319-63387-9_6
   Cormen T. H., 2009, Introduction to Algorithms, V3rd
   Ducas Lao, 2017, Round-1 submission to the NIST Post-Quantum Cryptography Standardization Project
   Eberl M, 2020, J AUTOM REASONING, V64, P879, DOI 10.1007/s10817-020-09545-0
   Haslbeck Max W., 2020, Arch. Formal Proofs 2020
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hoare Charles AR, 1961, COMMUN ACM, V4, P321, DOI DOI 10.1145/366622.366644
   Hurd J, 2005, ELECTRON NOTES THEOR, V112, P95, DOI 10.1016/j.entcs.2004.01.021
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2775051.2676980, 10.1145/2676726.2676980]
   Kaminski BL, 2018, J ACM, V65, DOI 10.1145/3208102
   Kleymann T., 1999, Formal Aspects of Computing, V11, P541, DOI 10.1007/s001650050057
   Kleymann Thomas, 1998, Hoare logic and VDM: machine-checked soundness and completeness proofs
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Lammich Peter, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P166, DOI 10.1007/978-3-642-32347-8_12
   Leutgeb L, 2022, LECT NOTES COMPUT SC, V13372, P70, DOI 10.1007/978-3-031-13188-2_4
   McIver Annabelle, 2005, MG COMP SCI
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
   Nipkow T, 2002, LECT NOTES COMPUT SC, V2471, P103
   Nipkow T, 2020, LECT NOTES COMPUT SC, V12302, P25, DOI 10.1007/978-3-030-59152-6_2
   Nipkow Tobias, 2002, Hoare Logics in Isabelle/HOL, P341, DOI [10.1007/978-94-010-0413-8_11, DOI 10.1007/978-94-010-0413-8_11]
   Olmedo F, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3156018
   Olmedo F, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P672, DOI 10.1145/2933575.2935317
   Paul Maximilian, 2021, Ph. D. Dissertation
   PUGH W, 1990, COMMUN ACM, V33, P668, DOI 10.1145/78973.78977
   Pugh William, 1990, Technical Report
   Takisaka T, 2018, LECT NOTES COMPUT SC, V11138, P476, DOI 10.1007/978-3-030-01090-4_28
   Tassarotti J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290377
   Tassarotti J, 2018, LECT NOTES COMPUT SC, V10895, P560, DOI 10.1007/978-3-319-94821-8_33
   Ngo VC, 2018, ACM SIGPLAN NOTICES, V53, P496, DOI [10.1145/3192366.3192394, 10.1145/3296979.3192394]
   van der Weegen E, 2009, LECT NOTES COMPUT SC, V5497, P256, DOI 10.1007/978-3-642-02444-3_16
   Wang D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408992
   Wang PX, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P204, DOI 10.1145/3314221.3314581
NR 50
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 122
DI 10.1145/3649839
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600029
OA gold
DA 2024-08-05
ER

PT J
AU Castello, J
   Redmond, P
   Kuper, L
AF Castello, Jonathan
   Redmond, Patrick
   Kuper, Lindsey
TI Inductive Diagrams for Causal Reasoning
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE causality; mechanized reasoning; concurrent systems
ID DISTRIBUTED SNAPSHOTS; IMPLEMENTATION; TIME
AB The Lamport diagram is a pervasive and intuitive tool for informal reasoning about "happens-before" relationships in a concurrent system. However, traditional axiomatic formalizations of Lamport diagrams can be painful to work with in a mechanized setting like Agda. We propose an alternative, inductive formalization - the causal separation diagram (CSD) - that takes inspiration from string diagrams and concurrent separation logic, but enjoys a graphical syntax similar to Lamport diagrams. Critically, CSDs are based on the idea that causal relationships between events are witnessed by the paths that information follows between them. To that end, we model "happens-before" as a dependent type of paths between events.
   The inductive formulation of CSDs enables their interpretation into a variety of semantic domains. We demonstrate the interpretability of CSDs with a case study on properties of logical clocks, widely-used mechanisms for reifying causal relationships as data. We carry out this study by implementing a series of interpreters for CSDs, culminating in a generic proof of Lamport's clock condition that is parametric in a choice of clock. We instantiate this proof on Lamport's scalar clock, on Mattern's vector clock, and on the matrix clocks of Raynal et al. and of Wuu and Bernstein, yielding verified implementations of each. The CSD formalism and our case study are mechanized in the Agda proof assistant.
C1 [Castello, Jonathan; Redmond, Patrick; Kuper, Lindsey] Univ Calif Santa Cruz, Santa Cruz, CA 95064 USA.
C3 University of California System; University of California Santa Cruz
RP Castello, J (corresponding author), Univ Calif Santa Cruz, Santa Cruz, CA 95064 USA.
EM jcaste14@ucsc.edu; plredmond@ucsc.edu; lkuper@ucsc.edu
FU National Science Foundation [CCF-2145367]
FX This material is based upon work supported by the National Science
   Foundation under Grant No. CCF-2145367. Any opinions, findings, and
   conclusions or recommendations expressed in this material are those of
   the author(s) and do not necessarily reflect the views of the National
   Science Foundation.
CR ACHARYA A, 1992, INFORM PROCESS LETT, V44, P317, DOI 10.1016/0020-0190(92)90107-7
   AHAMAD M, 1995, DISTRIB COMPUT, V9, P37, DOI 10.1007/BF01784241
   ALAGAR S, 1994, INFORM PROCESS LETT, V50, P311, DOI 10.1016/0020-0190(94)00055-7
   Altenkirch T, 2009, IEEE S LOG, P277, DOI 10.1109/LICS.2009.33
   Alur R., 1996, Tools and Algorithms for the Construction and Analysis of Systems. Second International Workshop, TACAS '96. Proceedings, P35
   Alur R., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P304, DOI 10.1109/ICSE.2000.870421
   Bickford M, 2009, LECT NOTES COMPUT SC, V5582, P140, DOI 10.1007/978-3-642-02414-6_9
   BIRMAN K, 1991, ACM T COMPUT SYST, V9, P272, DOI 10.1145/128738.128742
   Birman K. P., 1987, Operating Systems Review, V21, P123, DOI 10.1145/37499.37515
   BIRMAN KP, 1987, ACM T COMPUT SYST, V5, P47, DOI 10.1145/7351.7478
   Bollig Benedikt, 2021, Leibniz International Proceedings in Informatics LIPIcs, V203, DOI [10.4230/LIPIcs.CONCUR. 2021.14, DOI 10.4230/LIPICS.CONCUR.2021.14]
   Bonchi F, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571257
   Broy M, 2005, SCI COMPUT PROGRAM, V54, P213, DOI 10.1016/j.scico.2004.04.003
   Castro M, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE THIRD SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '99), P173, DOI 10.1145/571637.571640
   Chad Nester, 2021, Coordination Models and Languages. 23rd IFIP WG 6.1 International Conference, COORDINATION 2021 Held as Part of the 16th International Federated Conference on Distributed Computing Techniques, DisCoTec 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12717), P209, DOI 10.1007/978-3-030-78142-2_13
   CHANDY KM, 1985, ACM T COMPUT SYST, V3, P63, DOI 10.1145/214451.214456
   Coecke B, 2008, LECT NOTES COMPUT SC, V5126, P298, DOI 10.1007/978-3-540-70583-3_25
   Di Giusto C, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571248
   ELLIS CA, 1989, SIGMOD REC, V18, P399, DOI 10.1145/66926.66963
   Fidge CJ, 1988, P 11 AUSTR COMP SCI, V10, P56
   Flanagan C, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P121, DOI 10.1145/1542476.1542490
   Gehrke Thomas, 1998, An Algebraic Semantics for Message Sequence Chart Documents, P3, DOI [10.1007/978-0-387-35394-4_1, DOI 10.1007/978-0-387-35394-4_1]
   Gondelman L, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434323
   ITU-T, 2011, ITU Recommendation Z.120
   JOYAL A, 1991, ADV MATH, V88, P55, DOI 10.1016/0001-8708(91)90003-P
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Krogh-Jespersen M, 2020, LECT NOTES COMPUT SC, V12075, P336, DOI 10.1007/978-3-030-44914-8_13
   Kshemkalyani AD, 2004, DISTRIB COMPUT, V17, P131, DOI 10.1007/s00446-003-0105-9
   Ladkin PeterB., 1993, FORTE, P301
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Le Lann Gerard, 1977, P IFIP C 1977 TOR CA, P155
   Lehmann A, 2024, Arxiv, DOI [arXiv:2311.11571, 10.48550/arXiv.2311.11571, DOI 10.48550/ARXIV.2311.11571]
   Lehmann Adrian, 2022, arXiv, DOI [10.48550/ARXIV.2205.05781, DOI 10.48550/ARXIV.2205.05781]
   Lesani M, 2016, ACM SIGPLAN NOTICES, V51, P357, DOI 10.1145/2914770.2837622
   Lloyd W, 2011, SOSP 11: PROCEEDINGS OF THE TWENTY-THIRD ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P401
   Lohrey M, 2004, INFORM COMPUT, V189, P160, DOI 10.1016/j.ic.2003.10.002
   Mansky W, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P151, DOI 10.1145/3018610.3018611
   Mathur U, 2022, ASPLOS '22: PROCEEDINGS OF THE 27TH ACM INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P710, DOI 10.1145/3503222.3507734
   Mattern F., 1989, Parallel and Distributed Algorithms. Proceedings of the International Workshop, P215
   MAUW S, 1994, COMPUT J, V37, P269, DOI 10.1093/comjnl/37.4.269
   Mora F, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3622876
   Nieto A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563351
   O'Hearn P, 2019, COMMUN ACM, V62, P86, DOI 10.1145/3211968
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   OHearn Peter W., 2016, ACM SIGLOG NEWS, V3, P47, DOI DOI 10.1145/2984450.2984457
   Piedeleu R, 2023, Arxiv, DOI arXiv:2305.08768
   Pozniansky E, 2003, ACM SIGPLAN NOTICES, V38, P178, DOI 10.1145/966049.781529
   Rahli V, 2017, SCI COMPUT PROGRAM, V148, P26, DOI 10.1016/j.scico.2017.05.009
   RAYNAL M, 1991, INFORM PROCESS LETT, V39, P343, DOI 10.1016/0020-0190(91)90008-6
   Raynal M, 1996, COMPUTER, V29, P49, DOI 10.1109/2.485846
   Redmond P, 2022, PROCEEDINGS OF THE 2022 34TH SYMPOSIUM ON IMPLEMENTATION AND APPLICATION OF FUNCTIONAL LANGUAGES, IFL 2022, DOI 10.1145/3587216.3587222
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Schatz B., 1996, FME '96: Industrial Benefit and Advances in Formal Methods. Third International Symposium of Formal Methods Europe. Proceedings, P248
   SCHIPER A, 1989, LECT NOTES COMPUT SC, V392, P219
   Schmuck Frank B, 1988, Ph. D. Dissertation
   Shapiro M, 2011, LECT NOTES COMPUT SC, V6976, P386, DOI 10.1007/978-3-642-24550-3_29
   Talupur M, 2008, 2008 FORMAL METHODS IN COMPUTER-AIDED DESIGN, P69
   Weil SA, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P307
   Wickerson J, 2013, LECT NOTES COMPUT SC, V7792, P189, DOI 10.1007/978-3-642-37036-6_12
   Wuu G.T. J., 1984, PODC, P233, DOI DOI 10.1145/800222.806750
NR 60
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 113
DI 10.1145/3649830
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600020
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Yadavally, A
   Li, Y
   Wang, SH
   Nguyen, TN
AF Yadavally, Aashish
   Li, Yi
   Wang, Shaohua
   Nguyen, Tien N.
TI A Learning-Based Approach to Static Program Slicing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE AI4SE; Neural Networks; Static Slicing; Pre-Trained Language Models;
   Vulnerability Detection; Debugging
AB Traditional program slicing techniques are crucial for early bug detection and manual/automated debugging of online code snippets. Nevertheless, their inability to handle incomplete code hinders their real-world applicability in such scenarios. To overcome these challenges, we present NS-SLICER, a novel learning-based approach that predicts static program slices for both complete and partial code. Our tool leverages a pre-trained language model to exploit its understanding of fine-grained variable-statement dependencies within source code. With this knowledge, given a variable at a specific location and a statement in a code snippet, NS-SLICER determines whether the statement belongs to the backward slice or forward slice, respectively. We conducted a series of experiments to evaluate NS-SLICER's performance. On complete code, it predicts the backward and forward slices with an F1-score of 97.41% and 95.82%, respectively, while achieving an overall F1-score of 96.77%. Notably, in 85.20% of the cases, the static program slices predicted by NS-SLICER exactly match entire slices from the oracle. For partial programs, it achieved an F1-score of 96.77%-97.49% for backward slicing, 92.14%-95.40% for forward slicing, and an overall F1-score of 94.66%-96.62%. Furthermore, we demonstrate NS-SLICER's utility in vulnerability detection (VD), integrating its predicted slices into an automated VD tool. In this setup, the tool detected vulnerabilities in Java code with a high F1-score of 73.38%. We also include the analyses studying NS-SLICER's promising performance and limitations, providing insights into its understanding of intrinsic code properties such as variable aliasing, leading to better slicing.
C1 [Yadavally, Aashish; Wang, Shaohua; Nguyen, Tien N.] Univ Texas Dallas, Richardson, TX 75083 USA.
   [Wang, Shaohua] Cent Univ Finance & Econ, Beijing, Peoples R China.
C3 University of Texas System; University of Texas Dallas; Central
   University of Finance & Economics
RP Yadavally, A (corresponding author), Univ Texas Dallas, Richardson, TX 75083 USA.
EM aashish.yadavally@utdallas.edu; yi.li@utdallas.edu;
   davidshwang@ieee.org; tien.n.nguyen@utdallas.edu
OI Yadavally, Aashish/0000-0001-8785-6319
FU US National Science Foundation (NSF) [CNS-2120386]; US National Security
   Agency (NSA) [NCAE-C-002-2021]
FX This work was supported in part by the US National Science Foundation
   (NSF) grant CNS-2120386 and the US National Security Agency (NSA) grant
   NCAE-C-002-2021 on Cybersecurity Research Innovation.
CR [Anonymous], 2023, CWE-290
   [Anonymous], 2023, CWE-89
   [Anonymous], 2023, CWE-120
   [Anonymous], 2023, CWE-79
   Ayewah N, 2008, IEEE SOFTWARE, V25, P22, DOI 10.1109/MS.2008.130
   Binkley D, 2004, ADV COMPUT, V62, P105, DOI 10.1016/S0065-2458(03)62003-6
   Binkley D., 1996, ADV COMPUT, V43, P1
   Binkley D, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P109, DOI 10.1145/2635868.2635893
   Canfora G, 1998, INFORM SOFTWARE TECH, V40, P595, DOI 10.1016/S0950-5849(98)00086-X
   Checkmarx, 2023, Checkmarx
   Clark K, 2019, BLACKBOXNLP WORKSHOP ON ANALYZING AND INTERPRETING NEURAL NETWORKS FOR NLP AT ACL 2019, P276, DOI 10.18653/v1/w19-4828
   De Lucia A, 2001, FIRST IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P142, DOI 10.1109/SCAM.2001.972675
   DeLucia A, 1996, FOURTH WORKSHOP ON PROGRAM COMPREHENSION, PROCEEDINGS, P9, DOI 10.1109/WPC.1996.501116
   Devlin J, 2019, 2019 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES (NAACL HLT 2019), VOL. 1, P4171
   Ding Yangruibo, 2024, P 46 IEEE ACM INT C, DOI [10.1145/3597503.3608140, DOI 10.1145/3597503.3608140]
   Fan JH, 2020, IEEE WORK CONF MIN S, P508, DOI 10.1145/3379597.3387501
   Feng ZY, 2020, FINDINGS OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, EMNLP 2020, P1536
   Field J., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P379, DOI 10.1145/199448.199534
   Fischer F, 2017, P IEEE S SECUR PRIV, P121, DOI 10.1109/SP.2017.31
   Francel MA, 2001, SCI COMPUT PROGRAM, V40, P151, DOI 10.1016/S0167-6423(01)00013-2
   Galindo C, 2022, LECT NOTES COMPUT SC, V13550, P146, DOI 10.1007/978-3-031-17108-6_9
   Gallagher K, 2006, SIXTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P11
   Guo D., 2021, 9 INT C LEARNING REP
   Guo Daya, 2023, P 40 INT C MACH LEAR, V202, P12098
   Harman M, 2001, PROC IEEE INT CONF S, P138, DOI 10.1109/ICSM.2001.972724
   Harman M, 1997, PROG COMPREHEN, P70, DOI 10.1109/WPC.1997.601266
   Harman M, 1998, INFORM SOFTWARE TECH, V40, P577, DOI 10.1016/S0950-5849(98)00084-6
   Harman M., 2001, SOFTW FOCUS, V2, P85, DOI 10.1002/swf.41
   Harman Mark, 1996, P 2 UK WORKSH PROGR
   Hatcliff J., 2000, Higher-Order and Symbolic Computation, V13, P315, DOI 10.1023/A:1026599015809
   López JAH, 2022, IEEE INT CONF AUTOM, DOI 10.1145/3551349.3556900
   Hong H, 2021, 37TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE, ACSAC 2021, P194, DOI 10.1145/3485832.3488026
   Jhala R, 2005, ACM SIGPLAN NOTICES, V40, P38, DOI 10.1145/1064978.1065016
   Joern, 2023, Open-source code analysis platform for C/C++ based on code property graphs
   KOREL B, 1988, INFORM PROCESS LETT, V29, P155, DOI 10.1016/0020-0190(88)90054-3
   Li Z, 2018, 25TH ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2018), DOI 10.14722/ndss.2018.23158
   Liu YH, 2019, Arxiv, DOI [arXiv:1907.11692, DOI 10.48550/ARXIV.1907.11692]
   Maras Josip, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P504, DOI 10.1109/ASE.2011.6100110
   Nikitopoulos G, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P1565, DOI 10.1145/3468264.3473122
   Nishimatsu A., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P422, DOI 10.1109/ICSE.1999.841032
   Orso A, 2001, PROC IEEE INT CONF S, P158, DOI 10.1109/ICSM.2001.972726
   Puri R., 2021, arXiv
   Ragkhitwetsagul C, 2021, IEEE T SOFTWARE ENG, V47, P560, DOI 10.1109/TSE.2019.2900307
   Silva J, 2012, ACM COMPUT SURV, V44, DOI 10.1145/2187671.2187674
   Souza B, 2023, PROCEEDINGS OF THE 31ST ACM JOINT MEETING EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, ESEC/FSE 2023, P1522, DOI 10.1145/3611643.3616254
   TIP F, 1995, J PROGRAM LANG, V3, P121
   Vaswani A, 2017, ADV NEUR IN, V30
   Verdi M, 2022, IEEE T SOFTWARE ENG, V48, P1497, DOI 10.1109/TSE.2020.3023664
   Wu YM, 2022, PROC INT CONF SOFTW, P2365, DOI 10.1145/3510003.3510229
   Xu B., 2005, ACM SIGSOFT Software Engineering Notes, V30, P1, DOI DOI 10.1145/1050849.1050865
   Yadavally A, 2023, PROC INT CONF SOFTW, P2501, DOI 10.1109/ICSE48619.2023.00209
   Zhou YQ, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P914, DOI 10.1145/3106237.3117771
NR 52
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 97
DI 10.1145/3649814
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600004
OA gold
DA 2024-08-05
ER

PT J
AU Zhang, JL
   Cambronero, JP
   Gulwani, S
   Le, V
   Piskac, R
   Soares, G
   Verbruggen, G
AF Zhang, Jialu
   Cambronero, Jose Pablo
   Gulwani, Sumit
   Le, Vu
   Piskac, Ruzica
   Soares, Gustavo
   Verbruggen, Gust
TI PyDex: Repairing Bugs in Introductory Python Assignments using LLMs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE AI for programming education; large language models; automated program
   repair
AB Students often make mistakes in their introductory programming assignments as part of their learning process. Unfortunately, providing custom repairs for these mistakes can require a substantial amount of time and effort from class instructors. Automated program repair (APR) techniques can be used to synthesize such fixes. Prior work has explored the use of symbolic and neural techniques for APR in the education domain. Both types of approaches require either substantial engineering efforts or large amounts of data and training. We propose to use a large language model trained on code, such as Codex (a version of GPT), to build an APR system - PyDex - for introductory Python programming assignments. Our system can fix both syntactic and semantic mistakes by combining multi-modal prompts, iterative querying, test-case-based selection of few-shots, and program chunking. We evaluate PyDex on 286 real student programs and compare to three baselines, including one that combines a state-of-the-art Python syntax repair engine, BIFI, and a state-of-the-art Python semantic repair engine for student assignments, Refactory. We find that PyDex can fix more programs and produce smaller patches on average.
C1 [Zhang, Jialu] Univ Waterloo, Waterloo, ON, Canada.
   [Cambronero, Jose Pablo; Gulwani, Sumit; Le, Vu; Soares, Gustavo] Microsoft, Redmond, WA USA.
   [Piskac, Ruzica] Yale Univ, New Haven, CT USA.
   [Verbruggen, Gust] Microsoft, Keerbergen, Belgium.
C3 University of Waterloo; Microsoft; Yale University
RP Zhang, JL (corresponding author), Univ Waterloo, Waterloo, ON, Canada.
EM jialu.zhang@uwaterloo.ca; jcambronero@microsoft.com;
   sumitg@microsoft.com; levu@microsoft.com; ruzica.piskac@yale.edu;
   gsoares@microsoft.com; gverbruggen@microsoft.com
OI Gulwani, Sumit/0000-0002-9226-9634; Zhang, Jialu/0009-0003-8193-0719;
   Piskac, Ruzica/0000-0002-3267-0776
FU NSF [CCF-2106845, CCF-2131476]
FX We thank OOPSLA reviewers for their insightful comments. Jialu Zhang and
   Ruzica Piskac were supported in part by NSF grants CCF-2106845 and
   CCF-2131476.
CR Ahmed T, 2022, Arxiv, DOI arXiv:2104.14671
   Ahmed UZ, 2022, ACM T SOFTW ENG METH, V31, DOI 10.1145/3510418
   Ahmed UZ, 2018, PROC INT CONF SOFTW, P78, DOI 10.1145/3183377.3183383
   [Anonymous], 2024, Microsoft Copilot.
   Berger Emery, 2022, Coping with Copilot
   Bhatia S, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P60, DOI 10.1145/3180155.3180219
   Brown T., 2020, ADV NEURAL INFORM PR, V33, P1877, DOI DOI 10.48550/ARXIV.2005.14165
   Chen M., 2021, arXiv, DOI DOI 10.48550/ARXIV.2107.03374
   Chen Xinyun, 2024, 12 INT C LEARN REPR
   Chhatbar D, 2020, LECT NOTES ARTIF INT, V12163, P106, DOI 10.1007/978-3-030-52237-7_9
   Dinella E., 2020, INT C LEARN REPR
   Dinella E, 2022, PROC INT CONF SOFTW, P2130, DOI 10.1145/3510003.3510141
   Fan ZY, 2023, PROC INT CONF SOFTW, P1469, DOI 10.1109/ICSE48619.2023.00128
   Finnie-Ansley J, 2022, PROCEEDINGS OF THE 24TH AUSTRALASIAN COMPUTING EDUCATION CONFERENCE, ACE 2022, P10, DOI 10.1145/3511861.3511863
   Gulwani S, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P465, DOI [10.1145/3192366.3192387, 10.1145/3296979.3192387]
   HAMMING RW, 1950, BELL SYST TECH J, V29, P147, DOI 10.1002/j.1538-7305.1950.tb00463.x
   Hu Y, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P388, DOI 10.1109/ASE.2019.00044
   Jingmei Hu, 2021, UIST '21: The 34th Annual ACM Symposium on User Interface Software and Technology, P134, DOI 10.1145/3472749.3474740
   Joshi H, 2023, AAAI CONF ARTIF INTE, P5131
   Ke YL, 2015, IEEE INT CONF AUTOM, P295, DOI 10.1109/ASE.2015.60
   Keuning H., 2016, Proceedings of the 2016 ACM Conference on Innovation and Technology in Computer Science Education, P41
   Kim D, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P802, DOI 10.1109/ICSE.2013.6606626
   Laurencon Hugo, The BigScience Corpus A 1.6 TB Composite Multilingual Dataset
   Le Goues C, 2019, COMMUN ACM, V62, P56, DOI 10.1145/3318162
   Le Goues C, 2012, IEEE T SOFTWARE ENG, V38, P54, DOI 10.1109/TSE.2011.104
   Li LP, 2023, IEEE T SOFTWARE ENG, V49, P450, DOI 10.1109/TSE.2022.3153522
   Li YJ, 2022, SCIENCE, V378, P1092, DOI 10.1126/science.abq1158
   Lian XY, 2024, Arxiv, DOI arXiv:2310.09690
   Liu PF, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3560815
   Long F, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P727, DOI 10.1145/3106237.3106253
   Long F, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P166, DOI 10.1145/2786805.2786811
   Long F, 2016, ACM SIGPLAN NOTICES, V51, P298, DOI 10.1145/2914770.2837617
   Lu Y., 2021, arXiv, DOI 10.48550/arXiv.2107.06550
   Mao YT, 2023, PROCEEDINGS OF THE 31ST ACM JOINT MEETING EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, ESEC/FSE 2023, P363, DOI 10.1145/3611643.3616306
   Mechtaev S, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P129, DOI 10.1145/3180155.3180247
   Mechtaev S, 2016, PROC INT CONF SOFTW, P691, DOI 10.1145/2884781.2884807
   Nijkamp E., 2023, 11 INT C LEARN REPR
   Open AI, 2022, New GPT-3 Capabilities: Edit & Insert
   Padmanabha Sharath H., 2023, P 16 INN SOFTW ENG C, DOI [10.1145/3578527.3578535, DOI 10.1145/3578527.3578535]
   Perry DM, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P860, DOI 10.1145/3314221.3314629
   Phung Tung, 2023, P 16 INT C ED DAT MI, DOI [10.5281/zenodo.8115652, DOI 10.5281/ZENODO.8115652]
   Poesia Gabriel, 2022, 10 INT C LEARN REPR
   Pu YW, 2016, COMPANION PROCEEDINGS OF THE 2016 ACM SIGPLAN INTERNATIONAL CONFERENCE ON SYSTEMS, PROGRAMMING, LANGUAGES AND APPLICATIONS: SOFTWARE FOR HUMANITY (SPLASH COMPANION'16), P39, DOI 10.1145/2984043.2989222
   Qi YH, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P254, DOI 10.1145/2568225.2568254
   Rahmani K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485535
   Rolim R, 2017, PROC INT CONF SOFTW, P404, DOI 10.1109/ICSE.2017.44
   Santolucito M, 2022, EUR CON SFTWR MTNCE, P1006, DOI 10.1109/SANER53432.2022.00118
   Shariffdeen R, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P390, DOI 10.1145/3453483.3454051
   Singer Natash, 2019, The New York TimesJan.
   Singh R, 2013, ACM SIGPLAN NOTICES, V48, P15, DOI 10.1145/2499370.2462195
   Song D, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P328, DOI 10.1145/3468264.3468598
   Su YM, 2023, PROCEEDINGS OF THE 19TH WORKSHOP ON HOT TOPICS IN OPERATING SYSTEMS, HOTOS 2023, P87, DOI 10.1145/3593856.3595910
   Verbruggen G, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485477
   Wang K., 2018, INT C LEARNING REPRE
   Wang K, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P481, DOI 10.1145/3192366.3192384
   Wong CP, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P354, DOI 10.1145/3468264.3468600
   Xia CS, 2022, PROCEEDINGS OF THE 30TH ACM JOINT MEETING EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, ESEC/FSE 2022, P959, DOI 10.1145/3540250.3549101
   Xia CS, 2023, Arxiv, DOI arXiv:2304.00385
   Xia Chunqiu Steven, 2023, arXiv
   Xiang Q, 2023, PROCEEDINGS OF THE 22ND ACM WORKSHOP ON HOT TOPICS IN NETWORKS, HOTNETS 2023, P56, DOI 10.1145/3626111.3628189
   Xin Q, 2017, IEEE INT CONF AUTOM, P660, DOI 10.1109/ASE.2017.8115676
   Xuan JF, 2017, IEEE T SOFTWARE ENG, V43, P34, DOI 10.1109/TSE.2016.2560811
   Yasunaga M, 2021, PR MACH LEARN RES, V139
   Yi JY, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P740, DOI 10.1145/3106237.3106262
   Zeller Andreas, 2023, The Debugging Book
   Zhang JL, 2022, IEEE INT CONF AUTOM, DOI 10.1145/3551349.3560425
   Zhang JL, 2022, PROCEEDINGS OF THE 31ST ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, ISSTA 2022, P77, DOI 10.1145/3533767.3534396
   Zhang JL, 2020, Arxiv, DOI arXiv:2010.06631
   Zhang JL, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485517
NR 69
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 133
DI 10.1145/3649850
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600040
OA gold
DA 2024-08-05
ER

PT J
AU Jayanti, P
   Jayanti, S
   Yavuz, UY
   Hernandez, L
AF Jayanti, Prasad
   Jayanti, Siddhartha
   Yavuz, Ugur Y.
   Hernandez, Lizzie
TI A Universal, Sound, and Complete Forward Reasoning Technique for
   Machine-Verified Proofs of Linearizability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Linearizability; Verification; Universal; Complete; Forward Reasoning
ID FORMAL VERIFICATION; CONCURRENT; SPECIFICATIONS; ABSTRACTION
AB We introduce simple, universal, sound, and complete proof methods for producing machine-verifiable proofs of linearizability and strong linearizability. Universality means that our method works for any object type; soundness means that an algorithm can be proved correct by our method only if it is linearizable (resp. strong linearizable); and completeness means that any linearizable (resp. strong linearizable) implementation can be proved so using our method. We demonstrate the simplicity and power of our method by producing proofs of linearizability for the Herlihy-Wing queue and Jayanti's single-scanner snapshot, as well as a proof of strong linearizability of the Jayanti-Tarjan union-find object. All three of these proofs are machine-verified by TLAPS (the TLA+ Proof System).
C1 [Jayanti, Prasad] Dartmouth Coll, Hanover, NH 03755 USA.
   [Jayanti, Siddhartha] Google Res, Atlanta, GA USA.
   [Yavuz, Ugur Y.] Boston Univ, Boston, MA USA.
   [Hernandez, Lizzie] Microsoft, Redmond, WA USA.
C3 Dartmouth College; Google Incorporated; Boston University; Microsoft
RP Jayanti, P (corresponding author), Dartmouth Coll, Hanover, NH 03755 USA.
EM prasad.jayanti@dartmouth.edu; sjayanti@google.com; uyyavuz@bu.edu;
   lizziehv11@gmail.com
OI Yavuz, Ugur Yagmur/0000-0002-6218-2466; Jayanti,
   Siddhartha/0000-0002-2681-1632; Jayanti, Prasad/0000-0002-8930-3467
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Abdulla P, 2017, INT J SOFTW TOOLS TE, V19, P549, DOI 10.1007/s10009-016-0415-4
   Aguilera M. K., 2003, Technical Report HPL-2003-241
   Amit D, 2007, LECT NOTES COMPUT SC, V4590, P477
   Attiya H., 2019, LIPIcs, V146
   Attiya H., 2021, LIPIcs, V209
   Berryhill R., 2015, LIPIcs, V46
   Bloemen V., 2016, P 21 ACM SIGPLAN S P, P1
   Bouajjani A, 2017, LECT NOTES COMPUT SC, V10427, P542, DOI 10.1007/978-3-319-63390-9_28
   Chakraborty S, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:20)2015
   Chaudhuri K, 2010, LECT NOTES ARTIF INT, V6173, P142
   Colvin R, 2005, IEEE INT C ENG COMP, P507
   Colvin R, 2006, LECT NOTES COMPUT SC, V4144, P475, DOI 10.1007/11817963_44
   Dhulipala L, 2020, PROC VLDB ENDOW, V14, P653, DOI 10.14778/3436905.3436923
   Dodds M, 2015, ACM SIGPLAN NOTICES, V50, P233, DOI [10.1145/2775051.2676963, 10.1145/2676726.2676963]
   Doherty Simon., 2003, Modelling and verifying non-blocking algorithms that use dynamically allocated memory." In
   Dongol B, 2015, Arxiv, DOI arXiv:1410.6268
   Golab W, 2011, ACM S THEORY COMPUT, P373
   Google-Graph-Mining-Team, 2023, Google graph-mining
   Harris TL, 2002, LECT NOTES COMPUT SC, V2508, P265
   Heller S, 2006, LECT NOTES COMPUT SC, V3974, P3
   Helmi M., 2012, P 2012 ACM S PRINCIP, P385
   Henzinger Thomas A., 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P242, DOI 10.1007/978-3-642-40184-8_18
   HERLIHY M, 1991, ACM T PROGR LANG SYS, V13, P124, DOI 10.1145/114005.102808
   Herlihy M. P., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P13, DOI 10.1145/41625.41627
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Hong CW, 2020, INT CONFER PARA, P55, DOI 10.1145/3410463.3414657
   Izraelevitz Joseph, 2016, Distributed Computing. 30th International Symposium, DISC 2016. Proceedings: LNCS 9888, P313, DOI 10.1007/978-3-662-53426-7_23
   Jayanti P., 2023, POPL 2024
   Jayanti P., 2005, P 37 ANN ACM S THEOR, P723, DOI 10.1145/1060590.1060697
   Jayanti P., 2023, LEIBNIZ INT P INFORM, V281
   Jayanti S, 2019, PROCEEDINGS OF THE 2019 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC '19), P187, DOI 10.1145/3293611.3331593
   Jayanti SV, 2021, DISTRIB COMPUT, V34, P413, DOI 10.1007/s00446-020-00388-x
   Jayanti SV, 2016, PROCEEDINGS OF THE 2016 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING (PODC'16), P75, DOI 10.1145/2933057.2933108
   Jones M., 2013, What really happened to the software on the Mars Pathfinder spacecraft?
   JONSSON B, 1990, LECT NOTES COMPUT SC, V430, P361
   JONSSON B, 1991, LECT NOTES COMPUT SC, V527, P346
   Jung R., 2019, PROC ACM PROGRAM LAN, V4
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Khyzha A, 2017, LECT NOTES COMPUT SC, V10201, P639, DOI 10.1007/978-3-662-54434-1_24
   LAMPORT L, 1983, ACM T PROGR LANG SYS, V5, P190, DOI 10.1145/69624.357207
   Lamport L, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3492545
   LEVESON NG, 1993, COMPUTER, V26, P18, DOI 10.1109/MC.1993.274940
   Lim Joanne., 1998, ENG DISASTER THERAC
   LYNCH N, 1995, INFORM COMPUT, V121, P214, DOI 10.1006/inco.1995.1134
   Lynch N.A., 1996, Distributed Algorithms
   Öhman J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498694
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Poulsen Kevin., 2004, Software bug contributed to blackout
   Reif W, 1998, APPL LOG SER, V9, P13
   Schellhorn G., 2011, 18 INT S TEMPORAL RE, P99
   Schellhorn G, 2014, ACM T COMPUT LOG, V15, DOI 10.1145/2629496
   Vafeiadis V., 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P129, DOI 10.1145/1122971.1122992
   Vafeiadis V., 2008, Technical Report UCAM-CL-TR-726
   Vafeiadis V, 2009, LECT NOTES COMPUT SC, V5403, P335, DOI 10.1007/978-3-540-93900-9_27
   Vale AO, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571231
   Chan DYC, 2021, Arxiv, DOI arXiv:2108.01651
NR 57
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 82
DI 10.1145/3632924
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400083
OA gold
DA 2024-08-05
ER

PT J
AU Qin, XY
   O'Connor, L
   van Glabbeek, R
   Höfner, P
   Kammar, O
   Steuwer, M
AF Qin, Xueying
   O'Connor, Liam
   van Glabbeek, Rob
   Hofner, Peter
   Kammar, Ohad
   Steuwer, Michel
TI Shoggoth: A Formal Foundation for Strategic Rewriting
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE strategic rewriting; program transformation; weakest preconditions;
   semantics; mechanised formalisation
ID KLEENE ALGEBRA; TRAVERSAL; LANGUAGE
AB Rewriting is a versatile and powerful technique used in many domains. Strategic rewriting allows programmers to control the application of rewrite rules by composing individual rewrite rules into complex rewrite strategies. These strategies are semantically complex, as they may be nondeterministic, they may raise errors that trigger backtracking, and they may not terminate.
   Given such semantic complexity, it is necessary to establish a formal understanding of rewrite strategies and to enable reasoning about them in order to answer questions like: How do we know that a rewrite strategy terminates? How do we know that a rewrite strategy does not fail because we compose two incompatible rewrites? How do we know that a desired property holds after applying a rewrite strategy?
   In this paper, we introduce Shoggoth: a formal foundation for understanding, analysing and reasoning about strategic rewriting that is capable of answering these questions. We provide a denotational semantics of System S, a core language for strategic rewriting, and prove its equivalence to our big-step operational semantics, which extends existing work by explicitly accounting for divergence. We further define a location-based weakest precondition calculus to enable formal reasoning about rewriting strategies, and we prove this calculus sound with respect to the denotational semantics. We show how this calculus can be used in practice to reason about properties of rewriting strategies, including termination, that they are well-composed, and that desired postconditions hold. The semantics and calculus are formalised in Isabelle/HOL and all proofs are mechanised.
C1 [Qin, Xueying; O'Connor, Liam; van Glabbeek, Rob; Kammar, Ohad; Steuwer, Michel] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
   [van Glabbeek, Rob] UNSW, Sydney, NSW, Australia.
   [Hofner, Peter] Australian Natl Univ, Canberra, ACT, Australia.
   [Steuwer, Michel] Tech Univ Berlin, Berlin, Germany.
C3 University of Edinburgh; University of New South Wales Sydney;
   Australian National University; Technical University of Berlin
RP Qin, XY (corresponding author), Univ Edinburgh, Edinburgh, Midlothian, Scotland.
EM xueying.qin@ed.ac.uk; l.oconnor@ed.ac.uk; rvg@cs.stanford.edu;
   peter.hoefner@anu.edu.au; ohad.kammar@ed.ac.uk;
   michel.steuwer@tu-berlin.de
OI O'Connor, Liam/0000-0003-2765-4269; Steuwer, Michel/0000-0001-5048-0741;
   Qin, Xueying/0000-0003-4825-2023; Kammar, Ohad/0000-0002-2071-0929
FU Royal Society Wolfson Fellowship [RSWF\R1\221008]; Royal Society
   University Research Fellowship
FX Xueying Qin would like to express her special thanks to Professor Glynn
   Winskel and Professor Dan Ghica for their helpful feedback on the design
   and equivalence proofs for denotational and operational semantics. Rob
   van Glabbeek is supported by Royal Society Wolfson Fellowship
   RSWF\R1\221008. Ohad Kammar is supported by a Royal Society University
   Research Fellowship. We thank the anonymous reviewers for their
   insightful suggestions.
CR Aguirre A, 2022, MATH STRUCT COMP SCI, V32, P472, DOI 10.1017/S0960129522000330
   Anderson CJ, 2014, ACM SIGPLAN NOTICES, V49, P113, DOI 10.1145/2535838.2535862
   [Anonymous], 1985, Denotational Semantics: The Scott-Strachey Approach to Programming Language Theory
   Bonsangue Marcello M., 1992, LNCS, V666, P91, DOI [10.1007/3- 540-56596- 5_30, DOI 10.1007/3-540-56596-5_30]
   Borovansky Peter, 1996, Electronic Notes in Theoretical Computer Science, V4, P35, DOI [DOI 10.1016/S1571-0661(04)00032-5.FIRSTINTERNATIONALWORKSHOPONREWRITINGLOGICANDITSAPPLICATIONS(RWLW96, 10.1016/S1571-0661(04)00032-5]
   Bravenboer M, 2008, SCI COMPUT PROGRAM, V72, P52, DOI 10.1016/j.scico.2007.11.003
   Campos MD, 2018, LECT NOTES COMPUT SC, V10803, P71, DOI 10.1007/978-3-319-89366-2_4
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   COOK SA, 1978, SIAM J COMPUT, V7, P70, DOI 10.1137/0207005
   Cunha Alcino., 2007, P 2007 ACM SIGPLAN W, P11, DOI [10.1145/1244381.1244385, DOI 10.1145/1244381.1244385]
   DERSHOWITZ N, 1985, INFORM CONTROL, V65, P122, DOI 10.1016/S0019-9958(85)80003-6
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Floyd Robert W., 1967, Mathematical Aspects of Computer Science, V19, P19
   Fu RX, 2023, Arxiv, DOI arXiv:2304.14154
   Goncharov S, 2013, IEEE S LOG, P273, DOI 10.1109/LICS.2013.33
   Hagedorn B, 2022, COMMUN ACM, V66, P89, DOI 10.1145/3580371
   Hagedorn B, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408974
   Hennessy Matthew, 1979, P 8 S MATH FDN COMP, V74, P108, DOI 10.1007/3-540-09526-8_8
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hoare T, 2011, J LOGIC ALGEBR PROGR, V80, P266, DOI 10.1016/j.jlap.2011.04.005
   Johann P, 2010, IEEE S LOG, P209, DOI 10.1109/LICS.2010.29
   Kaiser M, 2009, PPDP'09: PROCEEDINGS OF THE 11TH INTERNATIONAL ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P93, DOI 10.1145/1599410.1599423
   Kieburtz Richard B., 2001, Electronic Notes in Theoretical Computer Science., V58, P138
   Koppel James, 2023, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V109, DOI [10.4230/OASIcs.EVCS.2023.16, DOI 10.4230/OASICS.EVCS.2023.16]
   Kozen D., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P214, DOI 10.1109/LICS.1991.151646
   Kozen D., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P167, DOI 10.1109/LICS.1999.782610
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Lämmel R, 2013, SCI COMPUT PROGRAM, V78, P1770, DOI 10.1016/j.scico.2011.11.006
   Lämmel R, 2003, J LOGIC ALGEBR PROGR, V54, P1, DOI 10.1016/S1567-8326(02)00028-0
   Lämmel R, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P137
   Lammel Ralf., 2002, Proceedings of the 2002 ACM SIGPLAN Workshop on Rule-Based Programming, P1, DOI DOI 10.1145/570186.570187
   Leroy X, 2009, INFORM COMPUT, V207, P284, DOI 10.1016/j.ic.2007.12.004
   Morgan C.C., 1994, PROGRAMMING SPECIFIC
   Nipkow T, 2002, LNCS, V2283, DOI [DOI 10.1007/3-540-45949-9, 10.1007/3-540-45949-9]
   Plotkin G. D., 1976, SIAM Journal on Computing, V5, P452, DOI 10.1137/0205035
   Plotkin Gordon D., 2001, Lecture Notes in Computer Science, V2030, P1, DOI [10.1007/3-540-45315-6_1, DOI 10.1007/3-540-45315-6_1]
   Qin Xueying, 2023, Zenodo, DOI 10.5281/ZENODO.10125602
   Rustan K, 2005, INFORM PROCESS LETT, V93, P281, DOI 10.1016/j.ipl.2004.10.015
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Simpson A, 2004, ANN PURE APPL LOGIC, V130, P207, DOI 10.1016/j.apal.2003.12.005
   Smits J, 2020, PROCEEDINGS OF THE 13TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON SOFTWARE LANGUAGE ENGINEERING, SLE 2020, P1, DOI 10.1145/3426425.3426928
   Sozeau Matthieu, 2014, COQ WORKSH
   Swierstra W, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341707
   Visser E., 2001, Rewriting Techniques and Applications. 12th International Conference, RTA 2001. Proceedings (Lecture Notes in Computer Science Vol.2051), P357
   Visser E., 1998, Electronic Notes in Theoretical Computer Science, V15, DOI 10.1016/S1571-0661(05)80027-1
   Visser E, 1999, ACM SIGPLAN NOTICES, V34, P13, DOI 10.1145/291251.289425
   Wachsmuth GH, 2014, IEEE SOFTWARE, V31, P35, DOI 10.1109/MS.2014.100
   Wagemaker J, 2022, LECT NOTES COMPUT SC, V13240, P575, DOI 10.1007/978-3-030-99336-8_21
   Winter VL, 2004, SCI COMPUT PROGRAM, V52, P165, DOI 10.1016/j.scico.2004.03.006
NR 50
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 3
DI 10.1145/3633211
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400004
OA Green Published, gold
DA 2024-08-05
ER

PT J
AU Crichton, W
   Krishnamurthi, S
AF Crichton, Will
   Krishnamurthi, Shriram
TI Profiling Programming Language Learning
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE rust education; digital textbooks; item response theory
ID QUESTIONS
AB This paper documents a year-long experiment to "profile" the process of learning a programming language: gathering data to understand what makes a language hard to learn, and using that data to improve the learning process. We added interactive quizzes to The Rust Programming Language, the official textbook for learning Rust. Over 13 months, 62,526 readers answered questions 1,140,202 times. First, we analyze the trajectories of readers. We find that many readers drop-out of the book early when faced with difficult language concepts like Rust's ownership types. Second, we use classical test theory and item response theory to analyze the characteristics of quiz questions. We find that better questions are more conceptual in nature, such as asking why a program does not compile vs. whether a program compiles. Third, we performed 12 interventions into the book to help readers with difficult questions. We find that on average, interventions improved quiz scores on the targeted questions by +20%. Fourth, we show that our technique can likely generalize to languages with smaller user bases by simulating our statistical inferences on small N. These results demonstrate that quizzes are a simple and useful technique for understanding language learning at all scales.
C1 [Crichton, Will; Krishnamurthi, Shriram] Brown Univ, Dept Comp Sci, Providence, RI 02912 USA.
C3 Brown University
RP Crichton, W (corresponding author), Brown Univ, Dept Comp Sci, Providence, RI 02912 USA.
EM wcrichto@brown.edu
OI Crichton, Will/0000-0001-8639-6541; Krishnamurthi,
   Shriram/0000-0001-5184-1975
FU US NSF [2319014]
FX This work was partially supported by a gift from Amazon and by the US
   NSF under Grant No. 2319014. We are deeply grateful to the many
   contributors to The Rust Programming Language, especially Carol Nichols,
   who allowed us to advertise in the main digital edition. We are also
   grateful to the 62,526 anonymous Rust learners who participated in the
   experiment - this work is ultimately for them.
CR ANDRE T, 1979, REV EDUC RES, V49, P280, DOI 10.2307/1169962
   Avigad Jeremy, 2023, Theorem Proving in Lean, P4
   Baker Frank., 2001, The basics of item response theory
   BENJAMINI Y, 1995, J R STAT SOC B, V57, P289, DOI 10.1111/j.2517-6161.1995.tb02031.x
   Bingham E, 2019, J MACH LEARN RES, V20
   Braun V, 2012, Thematic analysis, V2, P57, DOI [10.1037/13620-004, DOI 10.1037/13620-004]
   Crichton Will, 2024, Zenodo, DOI 10.5281/ZENODO.10798571
   Crichton W, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3622841
   Ericson BJ, 2022, PROCEEDINGS OF THE 53RD ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION (SIGCSE 2022), VOL 1, P418, DOI 10.1145/3478431.3499354
   Ericson BJ, 2020, SIGCSE 2020: PROCEEDINGS OF THE 51ST ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P1012, DOI 10.1145/3328778.3366950
   Fulton KR, 2021, PROCEEDINGS OF THE SEVENTEENTH SYMPOSIUM ON USABLE PRIVACY AND SECURITY (SOUPS 2021), P597
   Google, 2023, Comprehensive Rust
   JetBrains, 2022, The State of Developer Ecosystem 2022
   Jordan K, 2014, INT REV RES OPEN DIS, V15, DOI 10.19173/irrodl.v15i1.1651
   Klabnik Steve, 2022, The Rust Programming Language, V2nd
   Kong SC, 2022, COMPUT EDUC, V187, DOI 10.1016/j.compedu.2022.104562
   Lalor JP, 2019, 2019 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING AND THE 9TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING (EMNLP-IJCNLP 2019), P4249, DOI 10.18653/v1/D19-1434
   MASTERS GN, 1988, J EDUC MEAS, V25, P15, DOI 10.1111/j.1745-3984.1988.tb00288.x
   Matsakis Niko, 2017, Non-lexical lifetimes
   Merrick Alice, 2023, Go Developer Survey 2023 Q1 Results
   Meyerovich LA, 2013, ACM SIGPLAN NOTICES, V48, P1, DOI 10.1145/2509136.2509515
   OCaml Software Foundation, 2022, OCaml Users Survey 2022
   Perkins David N., 1994, International Encyclopedia of Education, V2
   Porter L, 2019, ICER '19 - PROCEEDINGS OF THE 2019 ACM CONFERENCE ON INTERNATIONAL COMPUTING EDUCATION RESEARCH, P111, DOI 10.1145/3291279.3339404
   Randolph Robert, 2022, State of Clojure 2022 Results
   Raykov T., 2011, INTRO PSYCHOMETRIC T, DOI DOI 10.4324/9780203841624
   ROTHKOPF EZ, 1967, J EDUC PSYCHOL, V58, P56, DOI 10.1037/h0024117
   Scala Center Team, 2022, Scala Developer Survey 2022 Results
   Stack Over.ow, 2023, Stack Over.ow Developer Survey 2023
   Taylor Fausak, 2022, 2022 State of Haskell Survey Results
   The Rust Survey Team, 2020, Rust Survey 2020 Results
   VanLehn K, 2003, COGNITION INSTRUCT, V21, P209, DOI 10.1207/S1532690XCI2103_01
   Wilson PT, 2017, PROCEEDINGS OF THE 2017 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD!'17), P1, DOI 10.1145/3133850.3133863
   Xie B, 2019, SIGCSE '19: PROCEEDINGS OF THE 50TH ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P699, DOI 10.1145/3287324.3287370
   Zeng Anna, 2019, OpenAccess Series in Informatics (OASIcs), V5, DOI [10.4230/OASIcs.PLATEAU.2018.5, DOI 10.4230/OASICS.PLATEAU.2018.5]
   Zhu SF, 2022, PROC INT CONF SOFTW, P1269, DOI 10.1145/3510003.3510164
NR 36
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 95
DI 10.1145/3649812
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600002
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Li, YJ
   Zhan, BH
   Pang, J
AF Li, Yongjian
   Zhan, Bohua
   Pang, Jun
TI Mechanizing the CMP Abstraction for Parameterized Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Parameterized verification; model checking; theorem proving;
   Isabelle/HOL; invariants; cache coherence protocols
AB Parameterized verification is a challenging problem that is known to be undecidable in the general case. CMP is a widely-used method for parameterized verification, originally proposed by Chou, Mannava and Park in 2004. It involves abstracting the protocol to a small fixed number of nodes, and strengthening by auxiliary invariants to refine the abstraction. In most of the existing applications of CMP, the abstraction and strengthening procedures are carried out manually, which can be tedious and error-prone. Existing theoretical justification of the CMP method is also done at a high level, without detailed descriptions of abstraction and strengthening rules. In this paper, we present a formally verified theory of CMP in Isabelle/HOL, with detailed, syntax-directed procedure for abstraction and strengthening that is proven correct. The formalization also includes correctness of symmetry reduction and assume-guarantee reasoning. We also describe a tool AutoCMP for automatically carrying out abstraction and strengthening in CMP, as well as generating Isabelle proof scripts showing their correctness. We applied the tool to a number of parameterized protocols, and discovered some inaccuracies in previous manual applications of CMP to the FLASH cache coherence protocol.
C1 [Li, Yongjian; Zhan, Bohua] Chinese Acad Sci, Key Lab Syst Software, Beijing, Peoples R China.
   [Li, Yongjian; Zhan, Bohua] Chinese Acad Sci, State Key Lab Comp Sci, Inst Software, Beijing, Peoples R China.
   [Zhan, Bohua] Chinese Acad Sci, Key Lab Syst Software, Beijing, Peoples R China.
   [Pang, Jun] Univ Luxembourg, Dept Comp Sci, Esch Sur Alzette, Luxembourg.
C3 Chinese Academy of Sciences; Chinese Academy of Sciences; Institute of
   Software, CAS; Chinese Academy of Sciences; University of Luxembourg
RP Li, YJ (corresponding author), Chinese Acad Sci, Key Lab Syst Software, Beijing, Peoples R China.; Li, YJ (corresponding author), Chinese Acad Sci, State Key Lab Comp Sci, Inst Software, Beijing, Peoples R China.
OI Li, Yongjian/0000-0002-2817-063X
FU Strategic Priority Research Program of the Chinese Academy of Sciences
   [XDA0320000, XDA0320300]
FX This research was supported by the Strategic Priority Research Program
   of the Chinese Academy of Sciences, Grant No. XDA0320000 and XDA0320300.
   The authors would like to express their gratitude to the anonymous
   reviewers for their valuable and insightful feedback, which greatly
   contributed to improving the quality of the paper.
CR Abdulla Parosh Aziz, 2018, Handbook of Model Checking, P685, DOI [10.1007/978-3-319-10575-8\_21, DOI 10.1007/978-3-319-10575-8]
   APT KR, 1986, INFORM PROCESS LETT, V22, P307, DOI 10.1016/0020-0190(86)90071-2
   Arons T, 2001, LECT NOTES COMPUT SC, V2102, P221
   Cao JL, 2018, IEEE INT CONF AUTOM, P892, DOI 10.1145/3238147.3240487
   Chen XF, 2006, PROCEEDINGS OF FORMAL METHODS IN COMPUTER AIDED DESIGN, P81
   Chen Xiaofang, 2006, Technical Report
   Chou CT, 2004, LECT NOTES COMPUT SC, V3312, P382
   Clarke E, 2003, J ACM, V50, P752, DOI 10.1145/876638.876643
   Clarke E.M., 2018, Handbook of Model Checking, V10, DOI DOI 10.1007/978-3-319-10575-8
   Cohen A, 2009, FORM METHOD SYST DES, V34, P104, DOI 10.1007/s10703-008-0063-8
   Conchon Sylvain, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P718, DOI 10.1007/978-3-642-31424-7_55
   Conchon S, 2018, LECT NOTES ARTIF INT, V10900, P152, DOI 10.1007/978-3-319-94205-6_11
   Conchon S, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P61
   Dill D. L., 1996, Computer Aided Verification. 8th International Conference, CAV '96. Proceedings, P390
   Emmi M, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P134, DOI 10.1145/1806596.1806613
   Esparza Javier, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P463, DOI 10.1007/978-3-642-39799-8_31
   Hoenicke J, 2017, ACM SIGPLAN NOTICES, V52, P473, DOI 10.1145/3093333.3009893
   HUBER P, 1985, LECT NOTES COMPUT SC, V188, P215
   Ip C. N., 1993, Proceedings 1993 IEEE International Conference on Computer Design: VLSI in Computers and Processors (Cat. No.93CH3335-7), P230, DOI 10.1109/ICCD.1993.393375
   Ip CN, 1996, FORM METHOD SYST DES, V9, P41, DOI 10.1007/BF00625968
   Krstic Sava, 2005, P 4 WORKSH AUT VER I
   Lahiri SK, 2004, LECT NOTES COMPUT SC, V2937, P267
   Li YJ, 2019, PR IEEE COMP DESIGN, P450, DOI 10.1109/ICCD46524.2019.00070
   Li YJ, 2016, PR IEEE COMP DESIGN, P560, DOI 10.1109/ICCD.2016.7753341
   Li Yongjian, 2023, autoCMP
   Li Yongjian, 2022, ILCMP source code
   McMillan KL, 2008, LECT NOTES COMPUT SC, V4963, P413, DOI 10.1007/978-3-540-78800-3_31
   McMillan K. L., 2001, Correct Hardware Design and Verification Methods. 11th IFIP WG 10.5 Advanced Research Working Conference, CHARME 2001. Proceedings (Lecture Notes in Computer Science Vol.2144), P179
   McMillan K, 2016, PROCEEDINGS OF THE 2016 16TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2016), P109, DOI 10.1109/FMCAD.2016.7886668
   McMillan KL, 2018, LECT NOTES COMPUT SC, V10981, P191, DOI 10.1007/978-3-319-96145-3_11
   McMillan KL, 1999, LECT NOTES COMPUT SC, V1703, P219
   Nipkow T, 2002, LNCS, V2283, DOI [DOI 10.1007/3-540-45949-9, 10.1007/3-540-45949-9]
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Pandav S, 2005, LECT NOTES COMPUT SC, V3725, P317
   Pnueli A., 1996, Computer Aided Verification. 8th International Conference, CAV '96. Proceedings, P184
   Pnueli Amir, 2001, INT C TOOLS ALG CONS, P82
   Seungjoon Park, 1996, SPAA '96. 8th Annual ACM Symposium on Parallel Algorithms and Architectures, P288, DOI 10.1145/237502.237573
   STARKE PH, 1991, SYST ANAL MODEL SIM, V8, P293
   Talupur M, 2008, 2008 FORMAL METHODS IN COMPUTER-AIDED DESIGN, P69
   Taube M, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P662, DOI 10.1145/3192366.3192414
   Tiwari A., 2001, Tools and Algorithms for the Construction and Analysis of Systems. 7th International Conference, TACAS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2031), P113
   WOLPER P, 1990, LECT NOTES COMPUT SC, V407, P68
   Wolper Pierre., 1986, POPL, V86, P184
NR 43
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 141
DI 10.1145/3649858
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600048
OA gold
DA 2024-08-05
ER

PT J
AU Geller, AT
   Frank, J
   Bowman, WJ
AF Geller, Adam T.
   Frank, Justin
   Bowman, William J.
TI Indexed Types for a Statically Safe WebAssembly
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE WebAssembly; Indexed Types; Program Logics; Optimization and Compiler
   Design; Type Systems
AB We present Wasm-precheck, a superset of WebAssembly (Wasm) that uses indexed types to express and check simple constraints over program values. This additional static reasoning enables safely removing dynamic safety checks from Wasm, such as memory bounds checks. We implement Wasm-precheck as an extension of the Wasmtime compiler and runtime, evaluate the run-time and compile-time performance of Wasm-precheck vs Wasm configurations with explicit dynamic checks, and find an average run-time performance gain of 1.71x faster in the widely used PolyBenchC benchmark suite, for a small overhead in binary size (7.18% larger) and type-checking time (1.4% slower). We also prove type and memory safety of Wasm-precheck, prove Wasm safely embeds into Wasm-precheck ensuring backwards compatibility, prove Wasm-precheck type-erases to Wasm, and discuss design and implementation trade-offs.
C1 [Geller, Adam T.; Frank, Justin; Bowman, William J.] Univ British Columbia, Vancouver, BC, Canada.
   [Frank, Justin] Univ Maryland, College Pk, MD USA.
C3 University of British Columbia; University System of Maryland;
   University of Maryland College Park
RP Geller, AT (corresponding author), Univ British Columbia, Vancouver, BC, Canada.
EM atgeller@cs.ubc.ca; justinpfrank@protonmail.com; wjb@williamjbowman.com
OI Bowman, William/0000-0002-6402-4840
FU Natural Sciences and Engineering Research Council of Canada (NSERC)
   [RGPIN-2019-04207]; Huawei Technologies Canada Co., Ltd.
FX We acknowledge the support of the Natural Sciences and Engineering
   Research Council of Canada (NSERC), funding reference number
   RGPIN-2019-04207. Cette recherche a ete financee par le Conseil de
   recherches en sciences naturelles et en genie du Canada (CRSNG), numero
   de reference RGPIN-2019-04207. This work was also supported by Huawei
   Technologies Canada Co., Ltd.
CR Bytecode Alliance, 2019, Wasmtime: A fast and secure runtime for WebAssembly
   Chugh R, 2012, ACM SIGPLAN NOTICES, V47, P587, DOI 10.1145/2398857.2384659
   Curtsinger C, 2013, ACM SIGPLAN NOTICES, V48, P219, DOI 10.1145/2499368.2451141
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Emscripten Contributors, 2015, emscripten
   Felleisen Matthias, 2009, Semantics Engineering with PLT Redex
   Geller Adam T., 2023, Indexed Types for a Statically Safe WebAssembly Artifact, DOI [10.1145/3580426, DOI 10.1145/3580426]
   Ginzburg Samuel, 2023, USENIX ANN TECHN C U
   Haas A, 2017, ACM SIGPLAN NOTICES, V52, P185, DOI [10.1145/3062341.3062363, 10.1145/3140587.3062363]
   Jangda Abhinav, 2019, USENIX ANN TECHN C U, DOI [10.5555/3358807.3358817, DOI 10.5555/3358807.3358817]
   Jhala R, 2020, Arxiv, DOI arXiv:2010.07763
   Kawaguchi M, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P304, DOI 10.1145/1542476.1542510
   Kazerounian M, 2018, LECT NOTES COMPUT SC, V10747, P269, DOI 10.1007/978-3-319-73721-8_13
   Leino M., 2001, INT S FORM METH EUR, DOI [10.5555/647540.730008, DOI 10.5555/647540.730008]
   Miné A, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P310, DOI 10.1109/WCRE.2001.957836
   Morrisett G, 1999, ACM T PROGR LANG SYS, V21, P527, DOI 10.1145/319301.319345
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Peter David, 2023, hyperfine
   Popescu N, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485480
   Pouchet Louis-Noel, 2016, PolyBench/C: The Polyhedral benchmark suite, v4.2.1
   Rondon Patrick, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P744, DOI 10.1007/978-3-642-31424-7_59
   Rondon P, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P131, DOI 10.1145/1706299.1706316
   Rossberg Andreas, 2022, WebAssembly Core Specification
   Tarditi D, 1996, ACM SIGPLAN NOTICES, V31, P181, DOI 10.1145/249069.231414
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Vazou N, 2014, ACM SIGPLAN NOTICES, V49, P39, DOI [10.1145/2775050.2633366, 10.1145/2633357.2633366]
   Vekris P, 2016, ACM SIGPLAN NOTICES, V51, P310, DOI [10.1145/2908080.2908110, 10.1145/2980983.2908110]
   Xi HW, 2001, ACM SIGPLAN NOTICES, V36, P169, DOI 10.1145/507669.507657
   Zagieboylo Drew., 2020, The cost of software-based memory management without virtual memory
   Zenger C, 1997, THEOR COMPUT SCI, V187, P147, DOI 10.1016/S0304-3975(97)00062-5
NR 30
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 80
DI 10.1145/3632922
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400081
OA gold
DA 2024-08-05
ER

PT J
AU Pailoor, S
   Wang, YP
   Dillig, I
AF Pailoor, Shankara
   Wang, Yuepeng
   Dillig, Isil
TI Semantic Code Refactoring for Abstract Data Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Abstract Data Types; Refactoring
ID MIGRATION; CHECKING
AB Modifications to the data representation of an abstract data type (ADT) can require significant semantic refactoring of the code. Motivated by this observation, this paper presents a new method to automate semantic code refactoring tasks. Our method takes as input the original ADT implementation, a new data representation, and a so-called relational representation invariant (relating the old and new data representations), and automatically generates a new ADT implementation that is semantically equivalent to the original version. Our method is based on counterexample-guided inductive synthesis (CEGIS) but leverages three key ideas that allow it to handle real-world refactoring tasks. First, our approach reduces the underlying relational synthesis problem to a set of (simpler) programming-by-example problems, one for each method in the ADT. Second, it leverages symbolic reasoning techniques, based on logical abduction, to deduce code snippets that should occur in the refactored version. Finally, it utilizes a notion of partial equivalence to make inductive synthesis much more effective in this setting. We have implemented the proposed approach in a new tool called Revamp for automatically refactoring Java classes and evaluated it on 30 Java class mined from Github. Our evaluation shows that Revamp can correctly refactor the entire ADT in 97% of the cases and that it can successfully re-implement 144 out of the 146 methods that require modifications.
C1 [Pailoor, Shankara; Dillig, Isil] Univ Texas Austin, Austin, TX 78712 USA.
   [Wang, Yuepeng] Simon Fraser Univ, Vancouver, BC, Canada.
C3 University of Texas System; University of Texas Austin; Simon Fraser
   University
RP Pailoor, S (corresponding author), Univ Texas Austin, Austin, TX 78712 USA.
EM spailoor@cs.utexas.edu; yuepeng@sfu.ca; isil@cs.utexas.edu
OI Dillig, Isil/0000-0001-8006-1230; Wang, Yuepeng/0000-0003-3370-2431
FU National Science Foundation [CCF-1762299, CCF-1918889]
FX We thank the anonymous reviewers and our shepherd Xiaokang Qiu for their
   thoughtful and constructive feedback. This material is based upon work
   partially supported by National Science Foundation under Grant Nos.
   CCF-1762299 and CCF-1918889. Any opinions, findings, and conclusions or
   recommendations expressed in this material are those of the author and
   do not necessarily reflect the views of the funding sources.
CR Albarghouthi A, 2017, LECT NOTES COMPUT SC, V10416, P689, DOI 10.1007/978-3-319-66158-2_44
   Albarghouthi A, 2016, ACM SIGPLAN NOTICES, V51, P789, DOI 10.1145/2914770.2837628
   Altidor J, 2014, ACM SIGPLAN NOTICES, V49, P271, DOI [10.1145/10.1145/2660193.2660203, 10.1145/2714064.2660203]
   Alur R, 2015, Arxiv, DOI arXiv:1505.05868
   [Anonymous], 2003, bind8 negative cache poison attack
   [Anonymous], 2023, Glide
   [Anonymous], 2022, How refactoring code in Safari's WebKit resurrected 'zombie' security bug
   [Anonymous], 2022, Elessandra
   [Anonymous], 2005, CVE-2005-0034
   [Anonymous], 2009, Linux devs exterminate security bugs from kernel
   [Anonymous], 2022, Cassandra
   [Anonymous], 2013, Google Cloud Platform (GCP)
   [Anonymous], 2023, Wicket
   [Anonymous], 2022, Netty
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Chen Yanju, 2022, Proc. ACM Program. Lang. 6, OOPSLA2 (2022)
   Cheung A, 2013, ACM SIGPLAN NOTICES, V48, P3, DOI 10.1145/2499370.2462180
   Cordeiro L, 2018, LECT NOTES COMPUT SC, V10981, P183, DOI 10.1007/978-3-319-96145-3_10
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Delaware B, 2015, ACM SIGPLAN NOTICES, V50, P689, DOI [10.1145/2775051.2677006, 10.1145/2676726.2677006]
   Demsky B, 2005, PROC INT CONF SOFTW, P176
   Demsky B, 2003, ISSRE 2003: 14TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P71, DOI 10.1109/ISSRE.2003.1251032
   Demsky B, 2003, ACM SIGPLAN NOTICES, V38, P78, DOI 10.1145/949343.949314
   DiffChecker, 2021, about us
   Dijkstra Edsger W., 1978, Lecture Notes in Computer Science, V69, P54, DOI [10.1007/BFb0014657, DOI 10.1007/BFB0014657]
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Dillig Isil, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P684, DOI 10.1007/978-3-642-39799-8_46
   Dillig I, 2013, ACM SIGPLAN NOTICES, V48, P443, DOI [10.1145/2544173.2509511, 10.1145/2509136.2509511]
   Dillig I, 2012, ACM SIGPLAN NOTICES, V47, P181, DOI [10.1145/2345156.2254087, 10.1145/2345156.1993565]
   Fedyukovich G, 2019, LECT NOTES COMPUT SC, V11388, P92, DOI 10.1007/978-3-030-11245-5_5
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2813885.2737977, 10.1145/2737924.2737977]
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Ge X, 2012, PROC INT CONF SOFTW, P211, DOI 10.1109/ICSE.2012.6227192
   Gulwani S, 2008, LECT NOTES COMPUT SC, V4960, P193
   Gulwani Sumit, 2017, Enumerative Search, P57
   Gulwani Sumit, 2009, Technical Report MSR-TR-2010-12
   GUTTAG JV, 1978, COMMUN ACM, V21, P1048, DOI 10.1145/359657.359666
   Hawkins P, 2012, COMMUN ACM, V55, P91, DOI 10.1145/2380656.2380677
   Hawkins P, 2012, ACM SIGPLAN NOTICES, V47, P417, DOI [10.1145/2345156.2254114, 10.1145/2345156.1993504]
   Hawkins P, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P38
   Hu QH, 2019, LECT NOTES COMPUT SC, V11822, P347, DOI 10.1007/978-3-030-32304-2_17
   Hu QHP, 2017, ACM SIGPLAN NOTICES, V52, P376, DOI [10.1145/3140587.3062345, 10.1145/3062341.3062345]
   Huang KJ, 2022, LECT NOTES COMPUT SC, V13790, P272, DOI 10.1007/978-3-031-22308-2_13
   Itzhaky S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P944, DOI 10.1145/3453483.3454087
   Jeon JS, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P934, DOI 10.1145/2786805.2803189
   Jha Susmit, 2010, Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering-Volume 1. ICSE'10, P215, DOI DOI 10.1145/1806799.1806833
   Kataoka Y, 2001, PROC IEEE INT CONF S, P736, DOI 10.1109/ICSM.2001.972794
   Kuncak V, 2012, COMMUN ACM, V55, P103, DOI 10.1145/2076450.2076472
   Kuncak V, 2010, LECT NOTES COMPUT SC, V6174, P430, DOI 10.1007/978-3-642-14295-6_38
   Kuncak V, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P316, DOI 10.1145/1806596.1806632
   Lam P, 2005, LECT NOTES COMPUT SC, V3443, P237, DOI 10.1007/978-3-540-31985-6_16
   Lam P, 2005, LECT NOTES COMPUT SC, V3385, P430
   Lam Patrick, 2011, The Soot framework for Java program analysis: a retrospective
   Lee W, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434335
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Loncaric C, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P958, DOI 10.1145/3180155.3180211
   Loncaric C, 2016, ACM SIGPLAN NOTICES, V51, P355, DOI [10.1145/2908080.2908122, 10.1145/2980983.2908122]
   Miltner A, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1, DOI 10.1145/3385412.3385967
   Miltner A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158089
   OpenAI, 2021, ChatGPT
   Pailoor S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P574, DOI 10.1145/3453483.3454063
   Qiu XK, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133889
   Samak M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371120
   Shi KS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290386
   Solar-Lezama A, 2005, ACM SIGPLAN NOTICES, V40, P281, DOI 10.1145/1064978.1065045
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Solar-Lezama A, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P136, DOI 10.1145/1375581.1375599
   Srivastava S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P492
   Tip F, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1961204.1961205
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Wang YP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276525
   Wang YP, 2020, PROC VLDB ENDOW, V13, P1006, DOI 10.14778/3384345.3384350
   Wang YP, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P286, DOI 10.1145/3314221.3314588
   Yaghmazadeh N, 2018, PROC VLDB ENDOW, V11, P580, DOI 10.1145/3177732.3177735
NR 74
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 28
DI 10.1145/3632870
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400029
OA gold
DA 2024-08-05
ER

PT J
AU Tang, WH
   Hillerström, D
   Lindley, S
   Morris, JG
AF Tang, Wenhao
   Hillerstrom, Daniel
   Lindley, Sam
   Morris, J. Garrett
TI Soundly Handling Linearity
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE control-flow linearity; multi-shot continuations; linear resources
AB We propose a novel approach to soundly combining linear types with multi-shot effect handlers. Linear type systems statically ensure that resources such as file handles and communication channels are used exactly once. Effect handlers provide a rich modular programming abstraction for implementing features ranging from exceptions to concurrency to backtracking. Whereas conventional linear type systems bake in the assumption that continuations are invoked exactly once, effect handlers allow continuations to be discarded (e.g. for exceptions) or invoked more than once (e.g. for backtracking). This mismatch leads to soundness bugs in existing systems such as the programming language Links, which combines linearity (for session types) with effect handlers. We introduce control-flow linearity as a means to ensure that continuations are used in accordance with the linearity of any resources they capture, ruling out such soundness bugs.
   We formalise the notion of control-flow linearity in a System F-style core calculus F-eff degrees equipped with linear types, an effect type system, and effect handlers. We define a linearity-aware semantics in order to formally prove that F-eff degrees preserves the integrity of linear values in the sense that no linear value is discarded or duplicated. In order to show that control-flow linearity can be made practical, we adapt Links based on the design of F-eff degrees, in doing so fixing a long-standing soundness bug.
   Finally, to better expose the potential of control-flow linearity, we define an ML-style core calculus Q(eff)degrees, based on qualified types, which requires no programmer provided annotations, and instead relies entirely on type inference to infer control-flow linearity. Both linearity and effects are captured by qualified types. Q(eff)degrees overcomes a number of practical limitations of F-eff degrees, supporting abstraction over linearity, linearity dependencies between type variables, and a much more fine-grained notion of control-flow linearity.
C1 [Tang, Wenhao; Lindley, Sam] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
   [Hillerstrom, Daniel] Huawei Zurich Res Ctr, Zurich, Switzerland.
   [Morris, J. Garrett] Univ Iowa, Iowa City, IA 52242 USA.
C3 University of Edinburgh; University of Iowa
RP Tang, WH (corresponding author), Univ Edinburgh, Edinburgh, Midlothian, Scotland.
EM wenhao.tang@ed.ac.uk; daniel.hillerstrom@ed.ac.uk; sam.lindley@ed.ac.uk;
   garrett-morris@uiowa.edu
OI Lindley, Sam/0000-0002-1360-4714; Hillerstrom,
   Daniel/0000-0003-4730-9315; Morris, J. Garrett/0000-0002-3992-1080
FU UKRI Future Leaders Fellowship "Effect Handler Oriented Programming"
   [MR/T043830/1]
FX This work was supported by the UKRI Future Leaders Fellowship "Effect
   Handler Oriented Programming" (reference number MR/T043830/1).
CR Ahmed A, 2005, ACM SIGPLAN NOTICES, V40, P78, DOI 10.1145/1090189.1086376
   Atkey R, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P56, DOI 10.1145/3209108.3209189
   Barber Andrew., 1996, Dual intuitionistic linear logic
   Bauer A, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(4:9)2014
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Biernacki D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290319
   Biernacki D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371116
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Brachthauser Jonathan Immanuel, 2023, Technical Report MSR-TR-2023-42
   Bruggeman C, 1996, ACM SIGPLAN NOTICES, V31, P99, DOI 10.1145/249069.231395
   Combette Guillaume, 2018, LOLA 2018 WORKSH SYN, P1
   Cooper E, 2007, LECT NOTES COMPUT SC, V4709, P266
   Damas Luis, 1982, P 9 ACM SIGPLAN SIGA, P207, DOI [10.1145/582153.582176, DOI 10.1145/582153.582176]
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   Dolan S, 2017, ACM SIGPLAN NOTICES, V52, P60, DOI 10.1145/3093333.3009882
   Dolan Stephen, 2016, Ph. D. Dissertation
   Donovan AAA, 2015, GO PROGRAMMING LANGU
   FELLEISEN M, 1987, THEOR COMPUT SCI, V52, P205, DOI 10.1016/0304-3975(87)90109-5
   Filinski A., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P27, DOI 10.1145/143165.143174
   Forster Y, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796819000121
   Friedman Daniel P., 1984, Program Transformation and Programming Environments, P263, DOI DOI 10.1007/978-3-642-46490-4_23
   Friedman Daniel P., 1985, POPL, P245, DOI [10.1145/318593.318654, DOI 10.1145/318593.318654]
   Gan E, 2015, ELECTRON P THEOR COM, P34, DOI 10.4204/EPTCS.176.4
   Ghica D, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563445
   Ghica DR, 2014, LECT NOTES COMPUT SC, V8410, P331
   Gosling James, 2023, The Java Language Specification
   Hillerström D, 2018, LECT NOTES COMPUT SC, V11275, P415, DOI 10.1007/978-3-030-02768-1_22
   Hillerström D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408982
   Hillerström D, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000040
   Hillerstrom Daniel, 2022, WebAssembly Typed Continuations Proposal
   Hillerstrom Daniel, 2023, Asymptotic Speedup with Effect Handlers
   Hillerstrom Daniel, 2016, ML WORKSHOP
   Hillerstrom Daniel, 2022, Ph. D. Dissertation
   Hillerstrom Daniel, 2016, TYDE ICFP, P15, DOI DOI 10.1145/2976022.2976033
   Hillerstrom Daniel, 2016, Master by Research thesis
   JONES MP, 1994, SCI COMPUT PROGRAM, V22, P231, DOI 10.1016/0167-6423(94)00005-0
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   Karachalias G, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000131
   Kiselyov O, 2009, LECT NOTES COMPUT SC, V5658, P360, DOI 10.1007/978-3-642-03034-5_17
   Leijen D, 2017, ACM SIGPLAN NOTICES, V52, P486, DOI 10.1145/3093333.3009872
   Leijen D, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P283
   Leijen Daan, 2005, Trends in Functional Programming, V6, P179
   Lindley S, 2017, RIV PUBL SER AUTOMAT, P265
   Lindley S, 2017, ACM SIGPLAN NOTICES, V52, P500, DOI 10.1145/3093333.3009897
   Lindley Sam, 2012, TLDI, P91, DOI DOI 10.1145/2103786.2103798
   MARTELLI A, 1982, ACM T PROGR LANG SYS, V4, P258, DOI 10.1145/357162.357169
   Mazurak K, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P77
   McBride Conor, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P207, DOI 10.1007/978-3-319-30936-1_12
   Morris JG, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290325
   Morris JG, 2016, ACM SIGPLAN NOTICES, V51, P448, DOI 10.1145/3022670.2951925
   Phipps-Costin L, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3622814
   Pirog Maciej, 2019, FSCD SCHLOSS DAGSTUH, V30, P1, DOI 10.4230/LIPICS.FSCD.2019.30
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Pottier F, 2001, INFORM COMPUT, V170, P153, DOI 10.1006/inco.2000.2963
   Pottier Francois, 1998, Ph. D. Dissertation
   Pressler Ron, 2018, Project Loom: Fibers and Continuations for the Java Virtual Machine
   Pretnar M, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(3:21)2014
   Remy Didier., 1994, THEORETICAL ASPECTS, P67
   Sivaramakrishnan KC, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P206, DOI 10.1145/3453483.3454039
   Tang Wenhao, 2023, Zenodo, DOI 10.5281/ZENODO.10120126
   Tov JA, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P625
   Tov JA, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P447, DOI 10.1145/1926385.1926436
   Walker David, 2005, Advanced Topics in Types and Programming Languages, chapter Substructural Type Systems, P3
   Xie NN, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563289
NR 65
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 54
DI 10.1145/3632896
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400055
OA gold, Green Published, Green Submitted
DA 2024-08-05
ER

PT J
AU Castagna, G
   Laurent, M
   Nguyên, K
AF Castagna, Giuseppe
   Laurent, Mickael
   Nguyen, Kim
TI Polymorphic Type Inference for Dynamic Languages
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE polymorphism; union types; intersection types; type reconstruction
ID INTERSECTION; CALCULUS
AB We present a type system that combines, in a controlled way, first-order polymorphism with intersection types, union types, and subtyping, and prove its safety. We then define a type reconstruction algorithm that is sound and terminating. This yields a system in which unannotated functions are given polymorphic types (thanks to Hindley-Milner) that can express the overloaded behavior of the functions they type (thanks to the intersection introduction rule) and that are deduced by applying advanced techniques of type narrowing (thanks to the union elimination rule). This makes the system a prime candidate to type dynamic languages.
C1 [Castagna, Giuseppe; Laurent, Mickael] Univ Paris Cite, CNRS, IRIF, 8 Pl Aurelie Nemours, F-75013 Paris, France.
   [Nguyen, Kim] Univ Paris Saclay, CNRS, ENS Paris Saclay, Lab Methodes Formelles, F-91190 Gif Sur Yvette, France.
C3 Universite Paris Cite; Centre National de la Recherche Scientifique
   (CNRS); Universite Paris Cite; Universite Paris Saclay; Centre National
   de la Recherche Scientifique (CNRS)
RP Castagna, G (corresponding author), Univ Paris Cite, CNRS, IRIF, 8 Pl Aurelie Nemours, F-75013 Paris, France.
OI Laurent, Mickael/0000-0003-1590-2392; Castagna,
   Giuseppe/0000-0003-0951-7535; Nguyen, Kim/0000-0002-1729-870X
FU Chaire Langages Dynamiques pour les Donnees of the Fondation Universite
   Paris-Saclay; CIFRE PhD . grant with Remote Technology; SECUREVAL ANR
   project [ANR-22-PECY-0005]
FX We warmly thank the POPL reviewers: their careful reading and
   suggestions allowed us to improve the presentation significantly. A
   special thank the reviewers of the POPL artifact evaluation for their
   detailed and insightful reviews.; This work was partially supported by
   the Chaire Langages Dynamiques pour les Donnees of the Fondation
   Universite Paris-Saclay, by the SECUREVAL ANR project n.
   ANR-22-PECY-0005 and by a CIFRE PhD. grant with Remote Technology.
CR Angelo Pedro, 2022, THEORETICAL ASPECTS, P462, DOI [10.1007/978-3-031-17715-6_29, DOI 10.1007/978-3-031-17715-6_29]
   BARBANERA F, 1995, INFORM COMPUT, V119, P202, DOI 10.1006/inco.1995.1086
   Bono V, 2008, THEOR COMPUT SCI, V398, P95, DOI 10.1016/j.tcs.2008.01.046
   Castagna Giuseppe, 2015, ACM SIGPLAN Notices, V50, P289, DOI 10.1145/2676726.2676991
   Castagna G, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3607838
   Castagna G, 2024, Arxiv, DOI arXiv:2111.03354
   Castagna G, 2022, SCI COMPUT PROGRAM, V217, DOI 10.1016/j.scico.2022.102781
   Castagna G, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498674
   Castagna G, 2016, ACM SIGPLAN NOTICES, V51, P378, DOI 10.1145/3022670.2951928
   Castagna G, 2011, ACM SIGPLAN NOTICES, V46, P94, DOI 10.1145/2034574.2034788
   Castagna Giuseppe, 2023, Programming, V8, P2, DOI [10.22152/programmingjournal.org/2024/8/4, DOI 10.22152/PROGRAMMING-JOURNAL.ORG/2024/8/4]
   Castagna Giuseppe, 2024, Polymorphic Type Inference for Dynamic Languages, DOI [10.1145/3632882, DOI 10.1145/3632882]
   Castagna Giuseppe, Prototype: Polymorphic Type Inference for Dynamic Languages, DOI [10.5281/zenodo.10155221, DOI 10.5281/ZENODO.10155221]
   CDuce, The CDuce Compiler
   COPPO M, 1981, Z MATH LOGIK, V27, P45, DOI 10.1002/malq.19810270205
   Damas Luis, 1982, P 9 ACM SIGPLAN SIGA, P207, DOI [10.1145/582153.582176, DOI 10.1145/582153.582176]
   Della Rocca Simona Ronchi, 2002, ELECT NOTES THEOR CO, V70, P163, DOI [10.1016/S1571-0661(04)80496-1, DOI 10.1016/S1571-0661(04)80496-1]
   Dezani Mariangiola, 2020, Personal communication
   Dolan S, 2017, ACM SIGPLAN NOTICES, V52, P60, DOI 10.1145/3093333.3009882
   Ecma, 2021, 2021 Language Specification
   Facebook, Flow. Facebook
   Frisch A, 2002, IEEE S LOG, P137, DOI 10.1109/LICS.2002.1029823
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Gesbert N, 2015, ACM T PROGR LANG SYS, V38, DOI 10.1145/2812805
   Greenberg Michael., 2019, 3rd Summit on Advances in Programming Languages (SNAPL 2019) (Leibniz International Proceedings in Informatics (LIPIcs)), V136, p6:1, DOI DOI 10.4230/LIPICS.SNAPL.2019.6
   HENGLEIN F, 1993, ACM T PROGR LANG SYS, V15, P253, DOI 10.1145/169701.169692
   HINDLEY R, 1969, T AM MATH SOC, V146, P29, DOI 10.2307/1995158
   Jeffrey Alan, 2022, Semantic Subtyping in Luau. Blog post
   Jim Trevor, 2000, ICALP WORKSH 2000 P, P323
   KFOURY AJ, 1993, ACM T PROGR LANG SYS, V15, P290, DOI 10.1145/169701.169687
   Leivant D., 1983, C REC 10 ANN ACM S P, P88, DOI [10.1145/567067.567077, DOI 10.1145/567067.567077]
   Liquori L, 2007, INFORM COMPUT, V205, P1371, DOI 10.1016/j.ic.2007.03.005
   Luau, Luau
   MACQUEEN D, 1986, INFORM CONTROL, V71, P95, DOI 10.1016/S0019-9958(86)80019-5
   MARTINLOF P, 1994, U W ONT PHI, V54, P87
   Microsoft, TypeScript
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   OCaml, 2023, Standard Library: Map module
   Ocsigen. JS of OCaml, Ocsigen
   Oliveira BCDS, 2016, ACM SIGPLAN NOTICES, V51, P364, DOI 10.1145/3022670.2951945
   Parreaux L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563304
   Petrucciani Tommaso, 2019, Ph. D. Dissertation
   Petrucciani Tommaso, 2018, TYPES18 24 INT C TYP, V4, P1, DOI [10.4230/LIPIcs.TYPES.2018.4, DOI 10.4230/LIPICS.TYPES.2018.4]
   Rioux N, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571211
   ROBINSON JA, 1965, J ACM, V12, P23, DOI 10.1145/321250.321253
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   Schimpf A, 2022, PROCEEDINGS OF THE 2022 34TH SYMPOSIUM ON IMPLEMENTATION AND APPLICATION OF FUNCTIONAL LANGUAGES, IFL 2022, DOI 10.1145/3587216.3587220
   Strachey Christopher, 1967, Lecture notes for International Summer School in Computer Programming
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tobin-Hochstadt S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P117
   Types, 2019, What exactly should we call syntax-directed inference rules? Discussion on the Types mailing list
   Wells JB, 2002, LECT NOTES COMPUT SC, V2305, P115
   Wells JB, 2002, J FUNCT PROGRAM, V12, P183, DOI 10.1017/S0956796801004245
   Zhang WX, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3460228
NR 54
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 40
DI 10.1145/3632882
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400041
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Dal Lago, U
   Ghyselen, A
AF Dal Lago, Ugo
   Ghyselen, Alexis
TI On Model-Checking Higher-Order Effectful Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE higher-order recursion schemes; algebraic effects; model checking;
   effect handlers
ID COLLAPSIBLE PUSHDOWN-AUTOMATA; SYMBOLIC EXECUTION; RECURSION SCHEMES;
   VERIFICATION; HANDLERS; MACHINES; TREES
AB Model-checking is one of the most powerful techniques for verifying systems and programs, which since the pioneering results by Knapik et al., Ong, and Kobayashi, is known to be applicable to functional programs with higher-order types against properties expressed by formulas of monadic second-order logic. What happens when the program in question, in addition to higher-order functions, also exhibits algebraic effects such as probabilistic choice or global store? The results in the literature range from those, mostly positive, about nondeterministic effects, to those about probabilistic effects, in the presence of which even mere reachability becomes undecidable. This work takes a fresh and general look at the problem, first of all showing that there is an elegant and natural way of viewing higher-order programs producing algebraic effects as ordinary higher-order recursion schemes. We then move on to consider effect handlers, showing that in their presence the model checking problem is bound to be undecidable in the general case, while it stays decidable when handlers have a simple syntactic form, still sufficient to capture so-called generic effects. Along the way, we hint at how a general specification language could look like, this way justifying some of the results in the literature, and deriving new ones.
C1 [Dal Lago, Ugo; Ghyselen, Alexis] Univ Bologna, Via Zamboni 33, I-40126 Bologna, BO, Italy.
C3 University of Bologna
RP Dal Lago, U (corresponding author), Univ Bologna, Via Zamboni 33, I-40126 Bologna, BO, Italy.
EM ugo.dallago@unibo.it; alexis.ghyselen@unibo.it
RI ; Dal Lago, Ugo/K-9621-2015
OI Ghyselen, Alexis/0000-0001-9767-2011; Dal Lago, Ugo/0000-0001-9200-070X
FU ERC CoG "Differential Program Semantics" [GA 818616]
FX The authors are supported by the ERC CoG "Differential Program
   Semantics", GA 818616.
CR Bauer A, 2019, Arxiv, DOI arXiv:1807.05923
   Biernacki D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290319
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Broadbent CH, 2010, IEEE S LOG, P120, DOI 10.1109/LICS.2010.40
   Broadbent Christopher H., 2013, LIPICS, V23, P129, DOI DOI 10.4230/LIPICS.CSL.2013.129
   Carayol A, 2012, IEEE S LOG, P165, DOI 10.1109/LICS.2012.73
   Clairambault Pierre, 2013, LIPICS, V24, P91
   Clarke E. M., 1997, Foundations of Software Technology and Theoretical Computer Science. 17th Conference. Proceedings, P54, DOI 10.1007/BFb0058022
   Clarke E.M., 2018, Handbook of Model Checking, V10, DOI DOI 10.1007/978-3-319-10575-8
   COURCELLE B, 1995, THEOR COMPUT SCI, V151, P125, DOI 10.1016/0304-3975(95)00049-3
   Dal Lago U, 2023, Arxiv, DOI arXiv:2308.16542
   Dal Lago U, 2017, IEEE S LOG
   Davies R, 2000, ACM SIGPLAN NOTICES, V35, P198, DOI 10.1145/357766.351259
   de Groote Philippe, 1994, P CAAP 1994, P85
   EMERSON EA, 1991, PROCEEDINGS - 32ND ANNUAL SYMPOSIUM ON FOUNDATIONS OF COMPUTER SCIENCE, P368, DOI 10.1109/SFCS.1991.185392
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Gordon Colin S., 2020, LIPICS, V166, P1, DOI DOI 10.4230/LIPICS.ECOOP.2020.23
   Gradel Erich, 2003, LNCS, V2500
   Hague M, 2008, IEEE S LOG, P452, DOI 10.1109/LICS.2008.34
   Hillerström D, 2018, LECT NOTES COMPUT SC, V11275, P415, DOI 10.1007/978-3-030-02768-1_22
   Hillerstrom Daniel, 2017, LIPICS, V84, P1
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Johann P, 2010, IEEE S LOG, P209, DOI 10.1109/LICS.2010.29
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Kammar O, 2013, ACM SIGPLAN NOTICES, V48, P145, DOI [10.1145/2500365.2500590, 10.1145/2544174.2500590]
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Knapik T, 2002, LECT NOTES COMPUT SC, V2303, P205
   Knapik T, 2001, LECT NOTES COMPUT SC, V2044, P253
   Kobayashi N, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(4:2)2020
   Kobayashi N, 2013, LECT NOTES COMPUT SC, V7792, P431, DOI 10.1007/978-3-642-37036-6_24
   Kobayashi N, 2011, LECT NOTES COMPUT SC, V6604, P260, DOI 10.1007/978-3-642-19805-2_18
   Kobayashi N, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P495, DOI 10.1145/1706299.1706355
   Kobayashi N, 2009, IEEE S LOG, P179, DOI 10.1109/LICS.2009.29
   Kobayashi N, 2009, ACM SIGPLAN NOTICES, V44, P416, DOI 10.1145/1594834.1480933
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Matache Cristina, 2018, Master's thesis
   Matache Cristina, 2019, P FOSSACS 2019, P382
   Moggi Eugenio, 1988, Computational lambda-calculus and monads
   Nakamura Yoshiki, 2020, LIPICS, V21, P1
   Neatherway RP, 2012, ACM SIGPLAN NOTICES, V47, P353, DOI 10.1145/2398856.2364578
   Ong CHL, 2006, IEEE S LOG, P81, DOI 10.1109/LICS.2006.38
   Ong L, 2015, IEEE S LOG, P1, DOI 10.1109/LICS.2015.9
   Plotkin G, 2003, APPL CATEGOR STRUCT, V11, P69, DOI 10.1023/A:1023064908962
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Plotkin G, 2008, IEEE S LOG, P118, DOI 10.1109/LICS.2008.45
   Plotkin G, 2009, LECT NOTES COMPUT SC, V5502, P80, DOI 10.1007/978-3-642-00590-9_7
   Pretnar M, 2015, ELECTRON NOTES THEOR, V319, P19, DOI 10.1016/j.entcs.2015.12.003
   Ramsay SJ, 2014, ACM SIGPLAN NOTICES, V49, P61, DOI 10.1145/2535838.2535873
   Salvati S, 2014, INFORM COMPUT, V239, P340, DOI 10.1016/j.ic.2014.07.012
   Salvati Sylvain, 2012, P RP 2012, P6
   Sato Ryosuke, 2013, P PEPM 2013, P53
   Sekiyama T, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571264
   Sekiyama T, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408999
   Simpson A, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3363518
   Song YH, 2022, LECT NOTES COMPUT SC, V13658, P88, DOI 10.1007/978-3-031-21037-2_5
   Tobin-Hochstadt S, 2012, ACM SIGPLAN NOTICES, V47, P537, DOI 10.1145/2398857.2384655
   Tsukada Takeshi, 2014, P FOSSACS 2014, P180
   Walukiewicz I., 1993, Proceedings of Eighth Annual IEEE Symposium on Logic in Computer Science (Cat. No.93CH3328-2), P136, DOI 10.1109/LICS.1993.287593
   Walukiewicz Igor, 2016, ACM SIGLOG News, V3, P13
NR 59
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 87
DI 10.1145/3632929
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400088
OA gold
DA 2024-08-05
ER

PT J
AU Gregersen, SO
   Aguirre, A
   Haselwarter, PG
   Tassarotti, J
   Birkedal, L
AF Gregersen, Simon Oddershede
   Aguirre, Alejandro
   Haselwarter, Philipp G.
   Tassarotti, Joseph
   Birkedal, Lars
TI Asynchronous Probabilistic Couplings in Higher-Order Separation Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Probabilistic Couplings; Separation Logic; Logical Relations
ID REFINEMENT
AB Probabilistic couplings are the foundation for many probabilistic relational program logics and arise when relating random sampling statements across two programs. In relational program logics, this manifests as dedicated coupling rules that, e.g., say we may reason as if two sampling statements return the same value. However, this approach fundamentally requires aligning or "synchronizing" the sampling statements of the two programs which is not always possible.
   In this paper, we develop Clutch, a higher-order probabilistic relational separation logic that addresses this issue by supporting asynchronous probabilistic couplings. We use Clutch to develop a logical step-indexed logical relation to reason about contextual refinement and equivalence of higher-order programs written in a rich language with a probabilistic choice operator, higher-order local state, and impredicative polymorphism. Finally, we demonstrate our approach on a number of case studies.
   All the results that appear in the paper have been formalized in the Coq proof assistant using the Coquelicot library and the Iris separation logic framework.
C1 [Gregersen, Simon Oddershede; Aguirre, Alejandro; Haselwarter, Philipp G.; Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
   [Tassarotti, Joseph] NYU, New York, NY 10003 USA.
C3 Aarhus University; New York University
RP Gregersen, SO (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM gregersen@cs.au.dk; alejandro@cs.au.dk; pgh@cs.au.dk; jt4767@cs.nyu.edu;
   birke@cs.au.dk
OI Gregesen, Simon/0000-0001-6045-5232; Birkedal, Lars/0000-0003-1320-0098
FU Villum Investigator grant [25804]; Center for Basic Research in Program
   Verification (CPV); VILLUM Foundation; European Union (ERC, CHORDS)
   [101096090]; National Science Foundation [2318724]
FX This work was supported in part by a Villum Investigator grant (no.
   25804), Center for Basic Research in Program Verification (CPV), from
   the VILLUM Foundation. This work was co-funded by the European Union
   (ERC, CHORDS, 101096090). Views and opinions expressed are however those
   of the author(s) only and do not necessarily reflect those of the
   European Union or the European Research Council. Neither the European
   Union nor the granting authority can be held responsible for them. This
   material is based upon work supported in part by the National Science
   Foundation under Grant No. 2318724.
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Abadi M., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P165, DOI 10.1109/LICS.1988.5115
   Abate C, 2021, P IEEE COMPUT SECUR, P576, DOI 10.1109/CSF51468.2021.00048
   Aguirre Alejandro, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P214, DOI 10.1007/978-3-319-89884-1_8
   Aguirre A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473598
   ALDOUS D, 1983, LECT NOTES MATH, V986, P243
   Almeida JB, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P1607, DOI 10.1145/3319535.3363211
   [Anonymous], 2002, Lectures on the Coupling Method
   Appel AW, 2001, IEEE S LOG, P247, DOI 10.1109/LICS.2001.932501
   Bao JL, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470712
   Bao JL, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498719
   Barbosa M, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2541, DOI 10.1145/3460120.3484548
   Barker E. B., 2015, Recommendation for Random Number Generation Using Deterministic Random Bit Generators, DOI DOI 10.6028/NIST.SP.800-90AR1
   Barthe Gilles, 2014, Foundations of Security Analysis and Design VII. FOSAD 2012/2013 Tutorial Lectures: LNCS 8604, P146, DOI 10.1007/978-3-319-10082-1_6
   Barthe G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371123
   Barthe G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158145
   Barthe G, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P55, DOI 10.1145/2976749.2978391
   Barthe G, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P749, DOI 10.1145/2933575.2934554
   Barthe G, 2015, LECT NOTES COMPUT SC, V9450, P387, DOI 10.1007/978-3-662-48899-7_27
   Barthe G, 2012, ACM SIGPLAN NOTICES, V47, P97, DOI 10.1145/2103621.2103670
   Barthe G, 2010, LECT NOTES COMPUT SC, V6172, P115, DOI 10.1007/978-3-642-14052-5_10
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Batz K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290347
   Bellare M., 1993, ACM CCS 93 1 C COMP, P62
   Bellare M, 2006, LECT NOTES COMPUT SC, V4004, P409
   Bellare Mihir, 2004, Paper 2004/331
   Bizjak A, 2015, LECT NOTES COMPUT SC, V9034, P279, DOI 10.1007/978-3-662-46678-0_18
   Bizjak Ales, 2016, Ph. D. Dissertation
   Boldo S, 2015, MATH COMPUT SCI, V9, P41, DOI 10.1007/s11786-014-0181-1
   Bousquet O, 2002, J MACH LEARN RES, V2, P499, DOI 10.1162/153244302760200704
   Chajed T, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P243, DOI 10.1145/3341301.3359632
   Dal Lago U, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498680
   Dal Lago U, 2021, THEOR COMPUT SCI, V895, P34, DOI 10.1016/j.tcs.2021.09.027
   Dreyer D, 2012, J FUNCT PROGRAM, V22, P477, DOI 10.1017/S095679681200024X
   Dreyer D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:16)2011
   Dwork C, 2013, FOUND TRENDS THEOR C, V9, P211, DOI 10.1561/0400000042
   ELGAMAL T, 1985, IEEE T INFORM THEORY, V31, P469, DOI 10.1109/TIT.1985.1057074
   Frumin Dan, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P1416, DOI 10.1109/SP40001.2021.00003
   Frumin D, 2021, LOG METH COMPUT SCI, V17, DOI 10.46298/LMCS-17(3:9)2021
   Gäher L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498689
   Gancher J, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571223
   Georges AL, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527318
   GOLDWASSER S, 1984, J COMPUT SYST SCI, V28, P270, DOI 10.1016/0022-0000(84)90070-9
   Gregersen SO, 2023, Arxiv, DOI [arXiv:2301.10061, 10.48550/ARXIV.2301.10061]
   Gregersen SO, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434291
   Gregersen Simon Oddershede, 2023, Asynchronous Probabilistic Couplings in HigherOrder Separation Logic-Coq Artifact, DOI [10.5281/zenodo, DOI 10.5281/ZENODO]
   Haselwarter Philipp G., 2021, Paper 2021/397
   Johann P, 2010, IEEE S LOG, P209, DOI 10.1109/LICS.2010.29
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2775051.2676980, 10.1145/2676726.2676980]
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Mittelbach A., 2021, THEORY HASH FUNCTION, DOI [10.1007/978-3-030-63287-8, DOI 10.1007/978-3-030-63287-8]
   Petcher Adam, 2015, Principles of Security and Trust. 4th International Conference, POST 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9036, P53, DOI 10.1007/978-3-662-46666-7_4
   Pitts Andrew, 1998, Higher Order Operational Techniques in Semantics, P227
   Rosulek Mike, 2020, The Joy of Cryptography
   Sangiorgi D, 2016, ACM SIGPLAN NOTICES, V51, P595, DOI 10.1145/2914770.2837651
   Seidel R, 1996, ALGORITHMICA, V16, P464, DOI 10.1007/BF01940876
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Tassarotti J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290377
   The Coq Development Team, 2022, Zenodo
   The Iris Development Team, 2022, The Iris 4.0 Reference
   Thorisson H., 2000, PROB APPL S
   Timany A, 2021, Arxiv, DOI arXiv:2109.07863
   Timany A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341709
   Timany A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158152
   Timany Amin, 2022, A Logical Approach to Type Soundness
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P343, DOI 10.1145/2480359.2429111
   Villani C, 2009, GRUNDLEHR MATH WISS, V338, P5
   Wand M, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236782
   Zhang YZ, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498677
NR 74
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 26
DI 10.1145/3632868
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400027
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Hewer, B
   Hutton, G
AF Hewer, Brandon
   Hutton, Graham
TI Quotient Haskell: Lightweight Quotient Types for All
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quotient types; refinement types; static verification
AB Subtypes and quotient types are dual type abstractions. However, while subtypes are widely used both explicitly and implicitly, quotient types have not seen much practical use outside of proof assistants. A key difficulty to wider adoption of quotient types lies in the significant burden of proof-obligations that arises from their use. In this article, we address this issue by introducing a class of quotient types for which the proof-obligations are decidable by an SMT solver. We demonstrate this idea in practice by presenting Quotient Haskell, an extension of Liquid Haskell with support for quotient types.
C1 [Hewer, Brandon; Hutton, Graham] Univ Nottingham, Nottingham, England.
C3 University of Nottingham
RP Hewer, B (corresponding author), Univ Nottingham, Nottingham, England.
EM Brandon.Hewer@nottingham.ac.uk; Graham.Hutton@nottingham.ac.uk
OI Hewer, Brandon/0009-0003-8731-6963
CR Abbott M, 2004, LECT NOTES COMPUT SC, V3125, P2
   Altenkirch Thorsten, 2018, P C FDN SOFTWARE SCI
   Bengtson J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890031
   Chapman J, 2019, MATH STRUCT COMP SCI, V29, P67, DOI 10.1017/S0960129517000184
   Cohen C, 2013, LECT NOTES COMPUT SC, V7998, P213, DOI 10.1007/978-3-642-39634-2_17
   Constable R. L., 1986, IMPLEMENTING MATH NU
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Grannan Zachary, 2022, arXiv
   Hewer Brandon, 2023, Quotient Haskell
   Hofmann Martin, 1995, P INT C TYPED LAMBDA
   Huffman B, 2013, LECT NOTES COMPUT SC, V8307, P131, DOI 10.1007/978-3-319-03545-1_9
   Kaliszyk Cezary, 2011, P S APPL COMPUTING
   Kaposi A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290315
   Kawaguchi Ming, 2010, P INT C COMPUTER AID
   Klop JW, 2008, THEOR COMPUT SCI, V398, P16, DOI 10.1016/j.tcs.2008.01.019
   Lawrence C, 2006, ACM Transactions on Computational Logic, V7, P4
   Meertens Lambert, 1983, P CWI S MATH COMPUTE
   Nogin A., 2002, Theorem Proving in Higher Order Logics. 15th International Conference, TPHOLs 2002. Proceedings (Lecture Notes in Computer Science Vol.2410), P263
   Nuo Li, 2015, Ph.D. Dissertation
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Rushby J, 1998, IEEE T SOFTWARE ENG, V24, P709, DOI 10.1109/32.713327
   Slotosch Oscar, 1997, P INT C THEOREM PROV
   The Univalent Foundations Program, 2013, Homotopy Type Theory: Univalent Foundations of Mathematics
   Thompson Simon, 1986, P ACM C LISP FUNCTIO
   van Doorn F, 2017, LECT NOTES COMPUT SC, V10499, P479, DOI 10.1007/978-3-319-66107-0_30
   Vazou N., 2016, Liquid Haskell: Haskell as a Theorem Prover
   Vazou N, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P48, DOI 10.1145/2784731.2784745
   Vazou Niki, 2017, P ACM PROGRAMMING LA, V2
   Vazou Niki, 2014, P INT C FUNCTIONAL P
   Vazou Niki, 2022, P 15 ACM SIGPLAN INT, P13, DOI DOI 10.1145/3546189.3549919
   Vazou Niki, 2013, P EUROPEAN S PROGRAM
   Vezzosi A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341691
NR 33
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 27
DI 10.1145/3632869
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400028
OA Green Published, gold
DA 2024-08-05
ER

PT J
AU Koehler, T
   Goens, A
   Bhat, S
   Grosser, T
   Trinder, P
   Steuwer, M
AF Koehler, Thomas
   Goens, Andres
   Bhat, Siddharth
   Grosser, Tobias
   Trinder, Phil
   Steuwer, Michel
TI Guided Equality Saturation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE e-graphs; equality saturation; theorem provers; optimizing compilers
ID THEOREM; SLEDGEHAMMER; OPTIMIZATION
AB Rewriting is a principled term transformation technique with uses across theorem proving and compilation. In theorem proving, each rewrite is a proof step; in compilation, rewrites optimize a program term. While developing rewrite sequences manually is possible, this process does not scale to larger rewrite sequences. Automated rewriting techniques, like greedy simplification or equality saturation, work well without requiring human input. Yet, they do not scale to large search spaces, limiting the complexity of tasks where automated rewriting is effective, and meaning that just a small increase in term size or rewrite length may result in failure.
   This paper proposes a semi-automatic rewriting technique as a means to scale rewriting by allowing human insight at key decision points. Specifically, we propose guided equality saturation that embraces human guidance when fully automated equality saturation does not scale. The rewriting is split into two simpler automatic equality saturation steps: from the original term to a human-provided intermediate guide, and from the guide to the target. Complex rewriting tasks may require multiple guides, resulting in a sequence of equality saturation steps. A guide can be a complete term, or a sketch containing undefined elements that are instantiated by the equality saturation search. Such sketches may be far more concise than complete terms.
   We demonstrate the generality and effectiveness of guided equality saturation using two case studies. First, we integrate guided equality saturation in the Lean 4 proof assistant. Proofs are written in the style of textbook proof sketches, as a series of calculations omitting details and skipping steps. These proofs conclude in less than a second instead of minutes when compared to unguided equality saturation, and can find complex proofs that previously had to be done manually. Second, in the compiler of the RISE array language, where unguided equality saturation fails to perform optimizations within an hour and using 60 GB of memory, guided equality saturation performs the same optimizations with at most 3 guides, within seconds using less than 1 GB memory.
C1 [Koehler, Thomas] INRIA, Strasbourg, France.
   [Koehler, Thomas] Univ Strasbourg, CNRS, ICube Lab, Strasbourg, France.
   [Goens, Andres] Univ Amsterdam, Amsterdam, Netherlands.
   [Goens, Andres; Bhat, Siddharth; Grosser, Tobias; Steuwer, Michel] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
   [Grosser, Tobias] Univ Cambridge, Cambridge, England.
   [Trinder, Phil] Univ Glasgow, Glasgow, Lanark, Scotland.
   [Steuwer, Michel] Tech Univ Berlin, Berlin, Germany.
C3 Inria; Universites de Strasbourg Etablissements Associes; Universite de
   Strasbourg; Centre National de la Recherche Scientifique (CNRS);
   University of Amsterdam; University of Edinburgh; University of
   Cambridge; University of Glasgow; Technical University of Berlin
RP Koehler, T (corresponding author), INRIA, Strasbourg, France.; Koehler, T (corresponding author), Univ Strasbourg, CNRS, ICube Lab, Strasbourg, France.
EM thomas.koehler@inria.fr; a.goens@uva.nl; siddharth.bhat@ed.ac.uk;
   tobias.grosser@cst.cam.ac.uk; phil.trinder@glasgow.ac.uk;
   michel.steuwer@tu-berlin.de
OI Grosser, Tobias/0000-0003-3874-6003; Steuwer,
   Michel/0000-0001-5048-0741; Koehler, Thomas/0000-0001-8461-8075
FU Engineering and Physical Sciences Research Council [EP/V038699/1]
FX Thanks to our paper reviewers for their feedback. Thanks to the
   maintainers of the open-source projects egg, Lean 4, TVM, RISE and
   Elevate. This work was funded in part by the Engineering and Physical
   Sciences Research Council, through grant reference EP/V038699/1.
CR A Solar Lezama, 2008, PhD thesis
   Adams A, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3306346.3322967
   Anderson L, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485486
   [Anonymous], 2005, P 19 ANN INT C SUP I, DOI DOI 10.1145/1088149.1088169
   Augustsson L., 1994, Journal of Functional Programming, V4, P117, DOI 10.1017/S0956796800000988
   Baader F., 1998, Term rewriting and all that
   Bachmair L., 1994, Journal of Logic and Computation, V4, P217, DOI 10.1093/logcom/4.3.217
   Bentkamp A, 2023, COMMUN ACM, V66, P80, DOI 10.1145/3557998
   Blanchette JC, 2013, J AUTOM REASONING, V51, P109, DOI 10.1007/s10817-013-9278-5
   Blanchette JC, 2011, LECT NOTES ARTIF INT, V6989, P12, DOI 10.1007/978-3-642-24364-6_2
   Böhme S, 2010, LECT NOTES ARTIF INT, V6173, P107, DOI 10.1007/978-3-642-14203-1_9
   Bonelli E, 2000, LECT NOTES COMPUT SC, V1833, P62
   BRUIJN NGD, 1972, P K NED AKAD A MATH, V75, P381
   Buzzard K, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P299, DOI 10.1145/3372885.3373830
   Charguéraud A, 2012, J AUTOM REASONING, V49, P363, DOI 10.1007/s10817-011-9225-2
   Chen C., 2008, Chill: A framework for composing high-level loop transformations
   Chen TQ, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P579
   Corbineau P, 2007, LECT NOTES COMPUT SC, V4502, P78
   Cummins C, 2017, INT CONFER PARA, P219, DOI 10.1109/PACT.2017.24
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Moura L, 2007, LECT NOTES ARTIF INT, V4603, P183
   de Moura L, 2021, LECT NOTES ARTIF INT, V12699, P625, DOI 10.1007/978-3-030-79876-5_37
   Dershowitz N., 1993, Functional programming, concurrency, simulation and automated reasoning. International lecture series 1991-1992, P199
   Dowek Gilles, 2001, Handbook of Automated Reasoning, P1009, DOI [10.1016/B978-044450813-3/50018-7, DOI 10.1016/B978-044450813-3/50018-7]
   Ekici B, 2017, LECT NOTES COMPUT SC, V10427, P126, DOI 10.1007/978-3-319-63390-9_7
   EVANS T, 1978, B AM MATH SOC, V84, P789, DOI 10.1090/S0002-9904-1978-14516-9
   Flatt O, 2022, Form Comp Aid Design, V3, P75, DOI 10.34727/2022/isbn.978-3-85448-053-2_13
   Gjorup Emil Holm, 2020, WORKSH HOM TYP THEOR
   Gonthier G., 2008, Notices AMS, V55, P1382
   Gordon Michael J, 1979, Edinburgh LCF: a mechanised logic of computation
   Hagedorn B, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408974
   Hagedorn B, 2018, INT SYM CODE GENER, P100, DOI 10.1145/3168824
   Hales T, 2017, FORUM MATH PI, V5, DOI 10.1017/fmp.2017.1
   HSIANG J, 1992, J LOGIC PROGRAM, V14, P71, DOI 10.1016/0743-1066(92)90047-7
   Hurd J., 2003, NASA TECHNICAL REPOR, P56
   Ikarashi Y, 2021, S VIS LANG HUM CEN C, DOI 10.1109/VL/HCC51201.2021.9576341
   Jiang A. Q., 2023, 11 INT C LEARN REPR
   Jones Simon Peyton, 2001, HASK WORKSH, V1, P203
   Knuth D.E., 1983, Simple Word Problems in Universal Algebras, P342, DOI DOI 10.1007/978-3-642-81955-1_23
   KNUTH DE, 1977, INFORM PROCESS LETT, V6, P1, DOI 10.1016/0020-0190(77)90002-3
   Koehler T, 2021, INT SYM CODE GENER, P27, DOI 10.1109/CGO51591.2021.9370337
   Koehler Thomas, 2022, Ph. D. Dissertation, DOI [10.5525/GLA.THESIS.83323, DOI 10.5525/GLA.THESIS.83323]
   Kokke W, 2020, SCI COMPUT PROGRAM, V194, DOI 10.1016/j.scico.2020.102440
   Kourta S, 2022, CC'22: PROCEEDINGS OF THE 31ST ACM SIGPLAN INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P54, DOI 10.1145/3497776.3517781
   Lachowski L, 2018, REP MATH LOGIC, V53, P19, DOI 10.4467/20842589RM.18.002.8835
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/cgo.2004.1281665
   Lemaitre F, 2017, J SYST ARCHITECT, V79, P1, DOI 10.1016/j.sysarc.2017.06.005
   Limperg J, 2023, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP 2023, P253, DOI 10.1145/3573105.3575671
   Maleki S., 2011, Proceedings 2011 International Conference on Parallel Architectures and Compilation Techniques (PACT), P372, DOI 10.1109/PACT.2011.68
   Mogers N, 2020, GPGPU'20: PROCEEDINGS OF THE 13TH ANNUAL WORKSHOP ON GENERAL PURPOSE PROCESSING USING GRAPHICS PROCESSING UNIT (GPU), P41, DOI 10.1145/3366428.3380771
   Mullapudi RT, 2015, ACM SIGPLAN NOTICES, V50, P429, DOI [10.1145/2775054.2694364, 10.1145/2694344.2694364]
   Nandi C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485496
   Nandi C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P31, DOI 10.1145/3385412.3386012
   Nelson Charles Gregory, 1980, Techniques for Program Verification
   NELSON G, 1980, J ACM, V27, P356, DOI 10.1145/322186.322198
   Nieuwenhuis R, 2005, LECT NOTES COMPUT SC, V3467, P453
   Nieuwenhuis R, 2007, INFORM COMPUT, V205, P557, DOI 10.1016/j.ic.2006.08.009
   Niittylahti J, 2002, MICROPROCESS MICROSY, V26, P173, DOI 10.1016/S0141-9331(02)00011-X
   Nipkow Tobias, 2002, Selected Papers (Lecture Notes in Computer Science, V2646, P259, DOI DOI 10.1007/3-540-39185-1_15
   Parello David, 2004, P ACM IEEE SC2004 C, P15, DOI [DOI 10.1109/SC.2004.61, 10.1109/SC.2004.61]
   Paulson LC, 2007, LECT NOTES COMPUT SC, V4732, P232
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Premtoon V, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1066, DOI 10.1145/3385412.3386001
   Ragan-Kelley J, 2012, ACM T GRAPHIC, V31, DOI 10.1145/2185520.2185528
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Riazanov A., 1999, Automated Deduction - CADE-16. 16th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.1632), P292
   Rotman Joseph J, 2006, A first course in abstract algebra with applications
   Scholze P, 2022, EXP MATH, V31, P349, DOI 10.1080/10586458.2021.1926016
   Selsam D, 2016, LECT NOTES ARTIF INT, V9706, P99, DOI 10.1007/978-3-319-40229-1_8
   Sioutas S, 2020, ACM T ARCHIT CODE OP, V17, DOI 10.1145/3406117
   Smith Gus Henry, 2021, P 5 ACM SIGPLAN INT, P21, DOI 10.1145/3460945.3464953
   Stephenson M, 2003, ACM SIGPLAN NOTICES, V38, P77, DOI 10.1145/780822.781141
   Steuwer M, 2022, Arxiv, DOI [arXiv:2201.03611, DOI arXiv:2201.03611.v1]
   Steuwer M, 2017, INT SYM CODE GENER, P74, DOI 10.1109/CGO.2017.7863730
   Steuwer M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P205, DOI 10.1145/2784731.2784754
   Tate R, 2009, ACM SIGPLAN NOTICES, V44, P264, DOI 10.1145/1594834.1480915
   Touati Sid Ahmed Ali, 2006, P 3 C COMP FRONT 200, P147, DOI DOI 10.1145/1128022.1128042
   VanHattum A, 2021, ASPLOS XXVI: TWENTY-SIXTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P874, DOI 10.1145/3445814.3446707
   Visser E, 1999, ACM SIGPLAN NOTICES, V34, P13, DOI 10.1145/291251.289425
   Wang YR, 2020, PROC VLDB ENDOW, V13, P1919, DOI 10.14778/3407790.3407799
   Weidenbach C, 2009, LECT NOTES ARTIF INT, V5663, P140, DOI 10.1007/978-3-642-02959-2_10
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Wu CM, 2019, ACM T GRAPHIC, V38, DOI 10.1145/3355089.3356518
   Yang Yichen, 2021, Equality Saturation for Tensor Graph Superoptimization
   Zheng LM, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P863
   Zinenko Oleksandr, 2016, Ph. D. Dissertation
NR 86
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 58
DI 10.1145/3632900
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400059
OA gold
DA 2024-08-05
ER

PT J
AU Westrick, S
   Fluet, M
   Rainey, M
   Acar, UA
AF Westrick, Sam
   Fluet, Matthew
   Rainey, Mike
   Acar, Umut A.
TI Automatic Parallelism Management
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE parallel programming languages; granularity control; compilers
ID GRANULARITY; CREATION
AB On any modern computer architecture today, parallelism comes with a modest cost, born from the creation and management of threads or tasks. Today, programmers battle this cost by manually optimizing/tuning their codes to minimize the cost of parallelism without harming its benefit, performance. This is a difficult battle: programmers must reason about architectural constant factors hidden behind layers of software abstractions, including thread schedulers and memory managers, and their impact on performance, also at scale. In languages that support higher-order functions, the battle hardens: higher order functions can make it difficult, if not impossible, to reason about the cost and benefits of parallelism.
   Motivated by these challenges and the numerous advantages of high-level languages, we believe that it has become essential to manage parallelism automatically so as to minimize its cost and maximize its benefit. This is a challenging problem, even when considered on a case-by-case, application-specific basis. But if a solution were possible, then it could combine the many correctness benefits of high-level languages with performance by managing parallelism without the programmer effort needed to ensure performance. This paper proposes techniques for such automatic management of parallelism by combining static (compilation) and run-time techniques. Specifically, we consider the Parallel ML language with task parallelism, and describe a compiler pipeline that embeds "potential parallelism" directly into the call-stack and avoids the cost of task creation by default. We then pair this compilation pipeline with a run-time system that dynamically converts potential parallelism into actual parallel tasks. Together, the compiler and run-time system guarantee that the cost of parallelism remains low without losing its benefit. We prove that our techniques have no asymptotic impact on the work and span of parallel programs and thus preserve their asymptotic properties. We implement the proposed techniques by extending the MPL compiler for Parallel ML and show that it can eliminate the burden of manual optimization while delivering good practical performance.
C1 [Westrick, Sam; Rainey, Mike; Acar, Umut A.] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Fluet, Matthew] Rochester Inst Technol, Rochester, NY USA.
C3 Carnegie Mellon University; Rochester Institute of Technology
RP Westrick, S (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM swestric@cs.cmu.edu; mtf@cs.rit.edu; me@mike-rainey.site;
   umut@cs.cmu.edu
OI RAINEY, MICHAEL/0009-0002-9659-1636; Westrick, Sam/0000-0003-2848-9808
FU NSF [CCF-1901381, CCF-2115104, CCF-2119352, CCF-2107241]
FX This research was supported by the following NSF grants (CCF-1901381,
   CCF-2115104, CCF-2119352, CCF-2107241) and by a gift from Intel.
CR Acar UA, 2002, THEOR COMPUT SYST, V35, P321, DOI 10.1007/s00224-002-1057-3
   Acar UA, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P214, DOI 10.1145/3293883.3295725
   Acar UA, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P769, DOI [10.1145/3192366.3192391, 10.1145/3296979.3192391]
   Acar UA, 2016, ACM SIGPLAN NOTICES, V51, P18, DOI 10.1145/3022670.2951946
   Acar UA, 2011, OOPSLA 11: PROCEEDINGS OF THE 2011 ACM INTERNATIONAL CONFERENCE ON OBJECT ORIENTED PROGRAMMING SYSTEMS LANGUAGES AND APPLICATIONS, P499
   Acar Umut A, 2020, MPL: A HighPerformance Compiler for Parallel ML
   Acar Umut A., 2015, SUMMIT ADV PROGRAMMI
   [Anonymous], 2011, Intel threading building blocks tutorial
   Arora J, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591284
   Arora J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434299
   Arora NS, 2001, THEOR COMPUT SYST, V34, P115, DOI 10.1007/s00224-001-0004-z
   Basu N, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1249, DOI 10.1145/3453483.3454107
   Bender MichaelA., 2004, P 16 ANN S PARALLELI, P133
   Bergstrom L, 2012, J FUNCT PROGRAM, V22, P382, DOI 10.1017/S0956796812000172
   Blelloch GE, 1996, COMMUN ACM, V39, P85, DOI 10.1145/227234.227246
   Blelloch GE, 2011, SPAA 11: PROCEEDINGS OF THE TWENTY-THIRD ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P355
   Blelloch GuyE., 2004, SPAA
   Blumofe RD, 1999, J ACM, V46, P720, DOI 10.1145/324133.324234
   Bocchino RL, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P97
   BRENT RP, 1974, J ACM, V21, P201, DOI 10.1145/321812.321815
   Cejtin H, 2000, LECT NOTES COMPUT SC, V1782, P56
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   Cheng Guang-Ien, 1998, P 10 ACM S PAR ALG A
   Chowdhury RA, 2008, SPAA'08: PROCEEDINGS OF THE TWENTIETH ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P207
   Duran A, 2008, INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS, P339
   EAGER DL, 1989, IEEE T COMPUT, V38, P408, DOI 10.1109/12.21127
   Elsman M, 1999, ACM SIGPLAN NOTICES, V34, P208, DOI 10.1145/317765.317800
   Feeley M., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P179, DOI 10.1145/165180.165205
   Fineman Jeremy T., 2005, Master's thesis
   Flanagan C, 2009, ACM SIGPLAN NOTICES, V44, P121, DOI 10.1145/1543135.1542490
   FLUET M., 2011, J FUNCT PROGRAM, V20, P1
   Fluet Matthew., 2007, Proceedings of the 2007 Workshop on Declarative Aspects of Multicore Programming, DAMP '07, P37
   Frigo M, 1998, ACM SIGPLAN NOTICES, V33, P212, DOI 10.1145/277652.277725
   Ghosh S, 2020, PROCEEDINGS OF SC20: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS (SC20), DOI 10.1109/SC41405.2020.00057
   Guatto A, 2018, ACM SIGPLAN NOTICES, V53, P81, DOI 10.1145/3200691.3178494
   Hale KC, 2018, I S MOD ANAL SIM COM, P355, DOI 10.1109/MASCOTS.2018.00041
   Halstead R.H., 1984, P 1984 ACM S LISP FU, P9
   Hiraishi T, 2009, ACM SIGPLAN NOTICES, V44, P55, DOI 10.1145/1594835.1504187
   Huelsbergen L., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P79, DOI 10.1145/182409.182442
   Imam Shams., 2014, P 2014 INT C PRINCIP, P75
   Iwasaki S, 2016, 2016 INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURE AND COMPILATION TECHNIQUES (PACT), P139, DOI 10.1145/2967938.2967968
   Jones SP, 2008, LECT NOTES COMPUT SC, V5356, P138
   Kini D, 2017, ACM SIGPLAN NOTICES, V52, P157, DOI [10.1145/3140587.3062374, 10.1145/3062341.3062374]
   Lea Doug, 2000, JAVA, P36, DOI 10.1145/337449.337465
   Lee I-Ting Angelina., 2015, ACM Transactions on Parallel Computing (TOPC), V2, P1
   Li P, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P107
   Loidl Hans-Wolfgang, 1995, P 1995 GLASG WORKSH, P1
   Lopez P, 1996, J SYMB COMPUT, V21, P715, DOI 10.1006/jsco.1996.0038
   Marlow S, 2011, ACM SIGPLAN NOTICES, V46, P71, DOI 10.1145/2096148.2034685
   MELLORCRUMMEY J, 1991, SUPERCOMPUTING 91, P24
   Mingdong Feng, 1997, SPAA '97. 9th Annual ACM Symposium on Parallel Algorithms and Architectures, P1, DOI 10.1145/258492.258493
   MLton, MLton web site
   MOHR E, 1991, IEEE T PARALL DISTR, V2, P264, DOI 10.1109/71.86103
   Muller S.K., 2016, P 28 ACM S PARALLELI, P71, DOI DOI 10.1145/2935764.2935793
   Muller SK, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591249
   Muller SK, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341685
   Muller SK, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P577, DOI 10.1145/3385412.3386013
   Muller SK, 2017, ACM SIGPLAN NOTICES, V52, P677, DOI [10.1145/3062341.3062370, 10.1145/3140587.3062370]
   Muller Stefan K., 2018, P 14 ACM SIGPLAN INT
   NIKHIL A, 1989, ACM T PROGR LANG SYS, V11, P598, DOI 10.1145/69558.69562
   O'Callahan R., 2003, SIGPLAN Notices, V38, P166, DOI 10.1145/966049.781528
   PEHOUSHEK JD, 1990, LECT NOTES COMPUT SC, V441, P182
   Raghunathan R, 2016, ACM SIGPLAN NOTICES, V51, P392, DOI 10.1145/3022670.2951935
   Rainey M, 2023, Arxiv, DOI arXiv:2307.10556
   Rainey M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1064, DOI 10.1145/3453483.3460969
   Raman R, 2012, ACM SIGPLAN NOTICES, V47, P531, DOI [10.1145/2345156.1993502, 10.1145/2345156.2254127]
   Raman R, 2010, LECT NOTES COMPUT SC, V6418, P368, DOI 10.1007/978-3-642-16612-9_28
   Reynolds John C., 1972, ACM 72, V2, P717
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   Schardl TB, 2017, ACM SIGPLAN NOTICES, V52, P249, DOI [10.1145/3018743.3018758, 10.1145/3155284.3018758]
   Shen Kish, 1999, Journal of Functional and Logic Programming, V1999, P1
   Sivaramakrishnan KC, 2014, J FUNCT PROGRAM, V24, P613, DOI 10.1017/S0956796814000161
   Smaragdakis Y, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P387
   Spoonhower D, 2009, SPAA'09: PROCEEDINGS OF THE TWENTY-FIRST ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P91
   Spoonhower Daniel, 2009, Ph. D. Dissertation
   Tolmach A., 1998, Journal of Functional Programming, V8, P367, DOI 10.1017/S0956796898003086
   Tzannes A, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629643
   Tzannes A, 2010, PPOPP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P179, DOI 10.1145/1693453.1693479
   Tzannes Alexandros, 2012, Ph.D. Dissertation
   Utterback R., 2016, P 28 ACM S PARALLELI, P83
   Weeks Stephen, 2006, ML 06 P 2006 WORKSHO, P1
   Weening Joseph S., 1989, Ph.D. Dissertation
   Westrick S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371115
   Westrick Sam, 2022, P 24 ACM SIGPLAN INT
   Westrick Sam, 2022, Ph. D. Dissertation
   Xu YF, 2020, PROCEEDINGS OF THE 25TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '20), P217, DOI 10.1145/3332466.3374536
   Yu Yuan, 2005, P 20 ACM S OP SYST P, P221
NR 87
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 38
DI 10.1145/3632880
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400039
OA gold
DA 2024-08-05
ER

PT J
AU Zhao, E
   Maroof, R
   Dukkipati, A
   Blinn, A
   Pan, ZY
   Omar, C
AF Zhao, Eric
   Maroof, Raef
   Dukkipati, Anand
   Blinn, Andrew
   Pan, Zhiyi
   Omar, Cyrus
TI Total Type Error Localization and Recovery with Holes
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type errors; bidirectional typing; gradual typing; type inference
ID INFERENCE
AB Type systems typically only define the conditions under which an expression is well-typed, leaving ill-typed expressions formally meaningless. This approach is insufficient as the basis for language servers driving modern programming environments, which are expected to recover from simultaneously localized errors and continue to provide a variety of downstream semantic services. This paper addresses this problem, contributing the first comprehensive formal account of total type error localization and recovery: the marked lambda calculus. In particular, we define a gradual type system for expressions with marked errors, which operate as non-empty holes, together with a total procedure for marking arbitrary unmarked expressions. We mechanize the metatheory of the marked lambda calculus in Agda and implement it, scaled up, as the new basis for Hazel, a full-scale live functional programming environment with, uniquely, no meaningless editor states.
   The marked lambda calculus is bidirectionally typed, so localization decisions are systematically predictable based on a local flow of typing information. Constraint-based type inference can bring more distant information to bear in discovering inconsistencies but this notoriously complicates error localization. We approach this problem by deploying constraint solving as a type-hole-filling layer atop this gradual bidirectionally typed core. Errors arising from inconsistent unification constraints are localized exclusively to type and expression holes, i.e., the system identifies unfillable holes using a system of traced provenances, rather than localized in an ad hoc manner to particular expressions. The user can then interactively shift these errors to particular downstream expressions by selecting from suggested partially consistent type hole fillings, which returns control back to the bidirectional system. We implement this type hole inference system in Hazel.
C1 [Zhao, Eric; Maroof, Raef; Dukkipati, Anand; Blinn, Andrew; Pan, Zhiyi; Omar, Cyrus] Univ Michigan, Ann Arbor, MI 48109 USA.
C3 University of Michigan System; University of Michigan
RP Zhao, E (corresponding author), Univ Michigan, Ann Arbor, MI 48109 USA.
EM zzhaoe@umich.edu; maroofr@umich.edu; anandrav@umich.edu;
   blinnand@umich.edu; zhiyipan@umich.edu
OI Zhao, Eric/0009-0000-4969-2376; Dukkipati, Anand/0009-0000-3141-9144;
   blinn, andrew/0000-0001-6938-7379; Omar, Cyrus/0000-0003-4502-7971
FU NSF [CCF-2238744]
FX The authors would like to thank the anonymous referees at POPL 2024 and
   ICFP 2023 for helpful feedback on earlier drafts of this paper. This
   work was partially funded through the NSF grant #CCF-2238744.
CR Barros D, 2022, PROCEEDINGS OF THE 25TH INTERNATIONAL ACM/IEEE CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS, MODELS 2022, P232, DOI 10.1145/3550355.3552452
   Bhanuka I, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3622812
   Blinn Andrew, 2022, 2022 IEEE S VISUAL L, P1, DOI [10.1109/VL/HCC53370.2022.9833110, DOI 10.1109/VL/HCC53370.2022.9833110]
   Bour Frederic, 2018, P ACM PROGR LANG, p103: 1, DOI [10.1145/3236798, DOI 10.1145/3236798]
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Chuchem Yair, 2019, Steady Typing
   Cimini M, 2016, ACM SIGPLAN NOTICES, V51, P443, DOI 10.1145/2914770.2837632
   Czaplicki E, 2013, ACM SIGPLAN NOTICES, V48, P411, DOI 10.1145/2499370.2462161
   de Medeiros SQ, 2020, SCI COMPUT PROGRAM, V187, DOI 10.1016/j.scico.2019.102373
   Dunfield J, 2020, Arxiv, DOI arXiv:1908.05839
   Dunfield J, 2013, ACM SIGPLAN NOTICES, V48, P429, DOI 10.1145/2544174.2500582
   Garcia R, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2775051.2676992, 10.1145/2676726.2676992]
   Haack C, 2003, LECT NOTES COMPUT SC, V2618, P284
   HaskellWiki, 2014, GHC/Typed holes-HaskellWiki
   Hazel Development Team, 2023, Hazel
   Heeren B., 2003, Workshop on Haskell, P62, DOI [10.1145/871895.871902, DOI 10.1145/871895.871902]
   Huet Gerard P., 1976, Resolution d'Equations dans les langages d'ordre 1, 2, ... , omega ...
   Joosten S., 1993, Journal of Functional Programming, V3, P49, DOI 10.1017/S0956796800000599
   Lee OS, 1998, ACM T PROGR LANG SYS, V20, P707, DOI 10.1145/291891.291892
   Lennon -Bertrand Meven, 2022, Ph. D. Dissertation
   McAdam BJ, 1999, LECT NOTES COMPUT SC, V1595, P137
   Moon David, 2022, TyDe 2022: Proceedings of the 7th ACM SIGPLAN International Workshop on Type-Driven Development, P28, DOI 10.1145/3546196.3550164
   Moon D, 2023, S VIS LANG HUM CEN C, P71, DOI 10.1109/VL-HCC57772.2023.00016
   Norell Ulf, 2007, Towards a practical programming language based on dependent type theory
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Omar C, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290327
   Omar C, 2017, ACM SIGPLAN NOTICES, V52, P86, DOI 10.1145/3093333.3009900
   Omar Cyrus, 2017, LIPIcs, V71, DOI DOI 10.4230/LIPICS.SNAPL.2017.11
   Pavlinovic Z, 2014, ACM SIGPLAN NOTICES, V49, P525, DOI [10.1145/2714064.2660230, 10.1145/2660193.2660230]
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pierce Benjamin C., 2002, Types and Programming Languages
   Potter Hannah, 2022, P 2022 ACM SIGPLAN I, P1, DOI [10.1145/3563835.3567654, DOI 10.1145/3563835.3567654]
   Potter Hannah, 2020, Hazel Tutor: Guiding Novices Through Type-Driven Development Strategies
   Pottier F, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P203, DOI 10.1145/2628136.2628145
   Schilling Thomas, 2012, Trends in Functional Programming. 12th International Symposium, TFP 2011. Revised Selected Papers, P1, DOI 10.1007/978-3-642-32037-8_1
   Seidel EL, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3138818
   Seidel EL, 2016, ACM SIGPLAN NOTICES, V51, P228, DOI 10.1145/3022670.2951915
   Siek J.G., 2008, Proceedings of the 2008 symposium on Dynamic languages, P7, DOI DOI 10.1145/1408681.1408688
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Solar-Lezama Armando, 2013, International Journal on Software Tools for Technology Transfer, V15, P475, DOI 10.1007/s10009-012-0249-7
   Sorkin Arthur, 2011, ACM SIGSOFT Softw. Eng. Notes, V36, P1, DOI [10.1145/1943371.1943391, DOI 10.1145/1943371.1943391]
   Taha Walid, 2006, Scheme and Functional Programming Workshop, V6, P81
   TEITELBAUM T, 1981, COMMUN ACM, V24, P563, DOI 10.1145/358746.358755
   Tip F, 2001, ACM T SOFTW ENG METH, V10, P5, DOI 10.1145/366378.366379
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276502
   Vouillon J, 2014, SOFTWARE PRACT EXPER, V44, P951, DOI 10.1002/spe.2187
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   Wand Mitchell, 1986, POPL, P38, DOI DOI 10.1145/512644.512648
   Yuan YW, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586048
   Zhang DF, 2014, ACM SIGPLAN NOTICES, V49, P569, DOI 10.1145/2535838.2535870
   Zhao Eric, 2023, Zenodo, DOI 10.5281/ZENODO.10129703
NR 51
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 68
DI 10.1145/3632910
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400069
OA gold
DA 2024-08-05
ER

PT J
AU Gierczak, O
   Menon, L
   Dimoulas, C
   Ahmed, A
AF Gierczak, Olek
   Menon, Lucy
   Dimoulas, Christos
   Ahmed, Amal
TI Gradually Typed Languages Should Be Vigilant!
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE gradual typing; semantics; logical relations; natural; transient
AB In gradual typing, different languages perform different dynamic type checks for the same program even though the languages have the same static type system. This raises the question of whether, given a gradually typed language, the combination of the translation that injects checks in well-typed terms and the dynamic semantics that determines their behavior sufficiently enforce the static type system of the language. Neither type soundness, nor complete monitoring, nor any other meta-theoretic property of gradually typed languages to date provides a satisfying answer.
   In response, we present vigilance, a semantic analytical instrument that defines when the check-injecting translation and dynamic semantics of a gradually typed language are adequate for its static type system. Technically, vigilance asks if a given translation-and-semantics combination enforces the complete run-time typing history of a value, which consists of all of the types associated with the value. We show that the standard combination for so-called Natural gradual typing is vigilant for the standard simple type system, but the standard combination for Transient gradual typing is not. At the same time, the standard combination for Transient is vigilant for a tag type system but the standard combination for Natural is not. Hence, we clarify the comparative type-level reasoning power between the two most studied approaches to sound gradual typing. Furthermore, as an exercise that demonstrates how vigilance can guide design, we introduce and examine a new theoretical static gradual type system, dubbed truer, that is stronger than tag typing and more faithfully reflects the type-level reasoning power that the dynamic semantics of Transient gradual typing can guarantee.
C1 [Gierczak, Olek; Menon, Lucy; Ahmed, Amal] Northeastern Univ, Boston, MA 02115 USA.
   [Dimoulas, Christos] Northwestern Univ, Evanston, IL USA.
C3 Northeastern University; Northwestern University
RP Gierczak, O (corresponding author), Northeastern Univ, Boston, MA 02115 USA.
EM gierczak.o@northeastern.edu; semiotics@ccs.neu.edu;
   chrdimo@northwestern.edu; amal@ccs.neu.edu
OI Ahmed, Amal/0000-0001-7424-572X; Dimoulas, Christos/0000-0002-9338-7034
FU National Science Foundation (NSF) [CCF-1910522, CCF-2237984]; Defense
   Advanced Research Projects Agency (DARPA) [N66001-21-C-4023]
FX This material is based upon work supported by the National Science
   Foundation (NSF awards CCF-1910522 and CCF-2237984) and the Defense
   Advanced Research Projects Agency (DARPA) under Contract No.
   N66001-21-C-4023. Any opinions, findings and conclusions or
   recommendations expressed in this material are those of the author(s)
   and do not necessarily reflect the views of the funding agencies.
CR Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Ahmed A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110283
   Ahmed A, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P201, DOI 10.1145/1926385.1926409
   Ahmed Amal Jamil, 2004, Ph. D. Dissertation, DOI [10.5555/1037736, DOI 10.5555/1037736]
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Chaudhuri A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133872
   Dimoulas C, 2012, LECT NOTES COMPUT SC, V7211, P214, DOI 10.1007/978-3-642-28869-2_11
   Feltey D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276503
   Garcia R, 2016, ACM SIGPLAN NOTICES, V51, P429, DOI 10.1145/2914770.2837670
   Greenberg M, 2015, ACM SIGPLAN NOTICES, V50, P181, DOI [10.1145/2775051.2676967, 10.1145/2676726.2676967]
   Greenman B, 2023, ACM T PROGR LANG SYS, V45, DOI 10.1145/3579833
   Greenman B, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P580, DOI 10.1145/3519939.3523430
   Greenman B, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236766
   Greenman B, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360548
   Greenman B, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000217
   Greenman Ben, 2022, Art Sci. Eng. Program., V6, P9, DOI [10.22152/programmingjournal.org/2022/6/9, DOI 10.22152/PROGRAMMINGJOURNAL.ORG/2022/6/9]
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Igarashi Y, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110284
   Jacobs K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434288
   Kuhlenschmidt A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P517, DOI 10.1145/3314221.3314627
   Lazarek L, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473573
   Lazarek Lukas, 2023, How to Evaluate Blame for Gradual Types, Part 2. 7, ICFP, P159, DOI [10.1145/3607836, DOI 10.1145/3607836]
   Matthews J, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1498926.1498930
   Muehlboeck F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133880
   New MS, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000125
   New MS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290328
   OWICKI S, 1976, COMMUN ACM, V19, P279, DOI 10.1145/360051.360224
   Pitts Andrew, 1998, Higher Order Operational Techniques in Semantics, P227
   Reddy US, 2003, LECT NOTES COMPUT SC, V2618, P223
   Schwerter FB, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434342
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Siek Jeremy G., 2015, LEIBNIZ INT P INFORM, V32
   Taha Walid, 2006, Scheme and Functional Programming Workshop, V6, P81
   Tobin-Hochstadt Sam., 2006, Proc. DLS, P964, DOI DOI 10.1145/1176617.1176755
   Toro M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290330
   Vitousek MM, 2019, PROCEEDINGS OF THE 15TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES (DLS '19), P28, DOI 10.1145/3359619.3359742
   Vitousek MM, 2017, ACM SIGPLAN NOTICES, V52, P762, DOI 10.1145/3093333.3009849
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
NR 39
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 125
DI 10.1145/3649842
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600032
OA gold
DA 2024-08-05
ER

PT J
AU Cohen, JM
   Johnson-Freyd, P
AF Cohen, Joshua M.
   Johnson-Freyd, Philip
TI A Formalization of Core Why3 in Coq
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Formal Semantics; Why3; Coq; First-Order Logic
ID VERIFICATION; VERIFIER
AB Intermediate verification languages like Why3 and Boogie have made it much easier to build program verifiers, transforming the process into a logic compilation problem rather than a proof automation one. Why3 in particular implements a rich logic for program specification with polymorphism, algebraic data types, recursive functions and predicates, and inductive predicates; it translates this logic to over a dozen solvers and proof assistants. Accordingly, it serves as a backend for many tools, including Frama-C, EasyCrypt, and GNATProve for Ada SPARK. But how can we be sure that these tools are correct? The alternate foundational approach, taken by tools like VST and CakeML, provides strong guarantees by implementing the entire toolchain in a proof assistant, but these tools are harder to build and cannot directly take advantage of SMT solver automation. As a first step toward enabling automated tools with similar foundational guarantees, we give a formal semantics in Coq for the logic fragment of Why3. We show that our semantics are useful by giving a correct-by-construction natural deduction proof system for this logic, using this proof system to verify parts of Why3's standard library, and proving sound two of Why3's transformations used to convert terms and formulas into the simpler logics supported by the backend solvers.
C1 [Cohen, Joshua M.] Princeton Univ, Princeton, NJ 08544 USA.
   [Johnson-Freyd, Philip] Sandia Natl Labs, Livermore, CA USA.
C3 Princeton University; United States Department of Energy (DOE); Sandia
   National Laboratories
RP Cohen, JM (corresponding author), Princeton Univ, Princeton, NJ 08544 USA.
EM jmc16@princeton.edu; pajohn@sandia.gov
OI Cohen, Joshua/0000-0002-9555-8781
FU National Science Foundation [CCF-2219757]; U.S. Department of Energy's
   National Nuclear Security Administration [DE-NA0003525]
FX We thank the anonymous reviewers for their helpful comments and
   feedback. This research was supported in part by National Science
   Foundation grant CCF-2219757.; Sandia National Laboratories is a
   multimission laboratory managed and operated by National Technology &
   Engineering Solutions of Sandia, LLC, a wholly owned subsidiary of
   Honeywell International Inc., for the U.S. Department of Energy's
   National Nuclear Security Administration under contract DE-NA0003525.
   This paper describes objective technical results and analysis. Any
   subjective views or opinions that might be expressed in the paper do not
   necessarily represent the views of the U.S. Department of Energy or the
   United States Government.
CR Abrahamsson Oskar, 2022, DROPS-IDN/v2/Document/10.4230/LIPIcs.ITP.2022.3, V3, P1, DOI DOI 10.4230/LIPICS.ITP.2022.3
   AdaCore and Altran UK Ltd, 2018, SPARK 2014 User's Guide: Release 19.0w
   Anand Abhishek, 2014, Interactive Theorem Proving. 5th International Conference, ITP 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8558, P27, DOI 10.1007/978-3-319-08970-6_3
   Appel A.W., 2014, Program Logics for Certified Compilers
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Barras B, 2010, J FORMALIZ REASON, V3, P29
   Barthe G, 2011, LECT NOTES COMPUT SC, V6841, P71, DOI 10.1007/978-3-642-22792-9_5
   Bobot F., 2011, BOOGIE 2011 1 INT WO, P53
   BOHM C, 1985, THEOR COMPUT SCI, V39, P135, DOI 10.1016/0304-3975(85)90135-5
   Chareton C, 2021, LECT NOTES COMPUT SC, V12648, P148, DOI 10.1007/978-3-030-72019-3_6
   Chlipala A., 2013, Certified Programming with Dependent Types-A Pragmatic Introduction to the Coq Proof Assistant
   Cohen Joshua M., 2023, POPL Artifact for "A Formalization of Core Why3 in Coq, DOI [10.5281/zenodo.8417774, DOI 10.5281/ZENODO.8417774]
   Cuoq Pascal, 2012, Software Engineering and Formal Methods. Proceedings of the 10th International Conference, SEFM 2012, P233, DOI 10.1007/978-3-642-33826-7_16
   Denis Xavier, 2022, Formal Methods and Software Engineering: 23rd International Conference on Formal Engineering Methods, ICFEM 2022, Proceedings. Lecture Notes in Computer Science (13478), P90, DOI 10.1007/978-3-031-17244-1_6
   Ekici B, 2017, LECT NOTES COMPUT SC, V10427, P126, DOI 10.1007/978-3-319-63390-9_7
   Erbsen A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P604, DOI 10.1145/3453483.3454065
   Filliatre Jean-Christophe, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P1, DOI 10.1007/978-3-642-38574-2_1
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Forster Y, 2020, LECT NOTES COMPUT SC, V11972, P47, DOI 10.1007/978-3-030-36755-8_4
   Frade MJ, 2023, J LOG ALGEBR METHODS, V133, DOI 10.1016/j.jlamp.2023.100871
   Garchery Q, 2021, ELECTRON P THEOR COM, P5, DOI 10.4204/EPTCS.336.2
   Gonthier G, 2010, J FORMALIZ REASON, V3, P95
   Herms P, 2012, LECT NOTES COMPUT SC, V7152, P2, DOI 10.1007/978-3-642-27705-4_2
   HOMEIER PV, 1995, COMPUT J, V38, P131, DOI 10.1093/comjnl/38.2.131
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Lourenço CB, 2022, LECT NOTES COMPUT SC, V13240, P114, DOI 10.1007/978-3-030-99336-8_5
   MartinLf P., 1982, Logic, methodology and philosophy of science VI, 1979, P153, DOI [DOI 10.1016/S0049-237X(09)70189-2, 10.1016/S0049-237X(09)70189-2]
   Monniaux D, 2022, LECT NOTES COMPUT SC, V13240, P204, DOI 10.1007/978-3-030-99336-8_8
   Nipkow T, 2021, LECT NOTES ARTIF INT, V12699, P93, DOI 10.1007/978-3-030-79876-5_6
   O'Connor R, 2005, LECT NOTES COMPUT SC, V3603, P245
   Okasaki Chris, 1996, Ph. D. Dissertation
   Parthasarathy G, 2021, LECT NOTES COMPUT SC, V12760, P704, DOI 10.1007/978-3-030-81688-9_33
   Pereira M, 2021, LECT NOTES COMPUT SC, V12760, P677, DOI 10.1007/978-3-030-81688-9_31
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   Sozeau M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341690
   Sozeau M, 2020, J AUTOM REASONING, V64, P947, DOI 10.1007/s10817-019-09540-0
   Vogels F, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(3:19)2015
   Vogels Frederic, 2010, P 2010 ACM S APPL CO, P2517, DOI [10.1145/1774088.1774610, DOI 10.1145/1774088.1774610]
   Zhou Litao, 2024, P ACM PROGRAMMING LA, V8
NR 43
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 60
DI 10.1145/3632902
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400061
OA gold
DA 2024-08-05
ER

PT J
AU Zhang, L
   Wang, YY
   Wu, JH
   Koenig, J
   Shao, Z
AF Zhang, Ling
   Wang, Yuting
   Wu, Jinhua
   Koenig, Jeremie
   Shao, Zhong
TI Fully Composable and Adequate Verified Compilation with Direct
   Refinements between Open Modules
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Verified Compositional Compilation; Direct Refinements; Kripke Relations
AB Verified compilation of open modules (i.e., modules whose functionality depends on other modules) provides a foundation for end-to-end verification of modular programs ubiquitous in contemporary software. However, despite intensive investigation in this topic for decades, the proposed approaches are still difficult to use in practice as they rely on assumptions about the internal working of compilers which make it difficult for external users to apply the verification results. We propose an approach to verified compositional compilation without such assumptions in the setting of verifying compilation of heterogeneous modules written in first-order languages supporting global memory and pointers. Our approach is based on the memory model of CompCert and a new discovery that a Kripke relation with a notion of memory protection can serve as a uniform and composable semantic interface for the compiler passes. By absorbing the rely-guarantee conditions on memory evolution for all compiler passes into this Kripke Memory Relation and by piggybacking requirements on compiler optimizations onto it, we get compositional correctness theorems for realistic optimizing compilers as refinements that directly relate native semantics of open modules and that are ignorant of intermediate compilation processes. Such direct refinements support all the compositionality and adequacy properties essential for verified compilation of open modules. We have applied this approach to the full compilation chain of CompCert with its Clight source language and demonstrated that our compiler correctness theorem is open to composition and intuitive to use with reduced verification complexity through end-to-end verification of non-trivial heterogeneous modules that may freely invoke each other (e.g., mutually recursively).
C1 [Zhang, Ling; Wang, Yuting; Wu, Jinhua] Shanghai Jiao Tong Univ, Sch Elect Informat & Elect Engn, John Hopcroft Ctr Comp Sci, Shanghai, Peoples R China.
   [Koenig, Jeremie; Shao, Zhong] Yale Univ, New Haven, CT 06520 USA.
C3 Shanghai Jiao Tong University; Yale University
RP Wang, YY (corresponding author), Shanghai Jiao Tong Univ, Sch Elect Informat & Elect Engn, John Hopcroft Ctr Comp Sci, Shanghai, Peoples R China.
EM ling.zhang@sjtu.edu.cn; yuting.wang@sjtu.edu.cn; jinhua.wu@sjtu.edu.cn;
   jeremie.koenig@yale.edu; zhong.shao@yale.edu
OI Wang, Yuting/0000-0003-3990-2418; Shao, Zhong/0000-0001-8184-7649
FU National Natural Science Foundation of China (NSFC) [62002217,
   62372290]; Natural Science Foundation of the United States (NSF)
   [1763399, 2019285, 2313433]
FX We would like to thank our shepherd Yannick Zakowski and the anonymous
   referees for their helpful feedback which improved this paper
   significantly. This work is supported in part by the National Natural
   Science Foundation of China (NSFC) under Grant No. 62002217 and
   62372290, and by the Natural Science Foundation of the United States
   (NSF) under Grant No. 1763399, 2019285, and 2313433. Any opinions,
   findings, and conclusions or recommendations expressed in this material
   are those of the authors and do not necessarily reflect the views of the
   funding agencies.
CR Ahmed A, 2006, LECT NOTES COMPUT SC, V3924, P69
   Besson F, 2015, LECT NOTES COMPUT SC, V9236, P67, DOI 10.1007/978-3-319-22102-1_5
   Chappe N, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571254
   Ghazvininejad Marjan, 2023, PREPRINT, DOI [DOI 10.48550/ARXIV.2302, 10.48550/ARXIV.2302]
   Gu RH, 2018, ACM SIGPLAN NOTICES, V53, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   He P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485512
   Hur CK, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P59
   Hur Chung-Kil, 2012, Technical Report, MPI-SWS-2012-002
   Jiang HR, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P111, DOI 10.1145/3314221.3314595
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Kang J, 2015, ACM SIGPLAN NOTICES, V50, P326, DOI [10.1145/2737924.2738005, 10.1145/2813885.2738005]
   Koenig J, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1095, DOI 10.1145/3453483.3454097
   Krebbers R, 2016, J AUTOM REASONING, V57, P319, DOI 10.1007/s10817-016-9369-1
   Lee SH, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P362, DOI 10.1145/3385412.3386010
   Leroy Xavier, 2023, The CompCert Verified Compiler
   Leroy Xavier, 2012, Research Report RR-7987
   Neis G, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P166, DOI 10.1145/2784731.2784764
   Patterson D, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341689
   Patterson D, 2017, ACM SIGPLAN NOTICES, V52, P495, DOI [10.1145/3062341.3062347, 10.1145/3140587.3062347]
   Perconti JT, 2014, LECT NOTES COMPUT SC, V8410, P128
   Sammler M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571220
   Scherer G, 2018, LECT NOTES COMPUT SC, V10803, P146, DOI 10.1007/978-3-319-89366-2_8
   Song Y, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571232
   Song Y, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371091
   Stewart G, 2015, ACM SIGPLAN NOTICES, V50, P275, DOI [10.1145/2775051.2676985, 10.1145/2676726.2676985]
   Wang YT, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498686
   Wang YT, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290375
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Zha JP, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P903, DOI 10.1145/3519939.3523734
   Zhang Ling, 2023, Zenodo, DOI 10.5281/ZENODO.10036618
NR 31
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 72
DI 10.1145/3632914
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400073
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Chatterjee, K
   Goharshady, AK
   Meggendorfer, T
   Zikelic, D
AF Chatterjee, Krishnendu
   Goharshady, Amir Kafshdar
   Meggendorfer, Tobias
   Zikelic, Dorde
TI Quantitative Bounds on Resource Usage of Probabilistic Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Probabilistic Programming; Static Analysis; Quantitative Bounds; Cost
   Analysis; Martingales
ID TERMINATION; COMPLEXITY; POLYNOMIALS
AB Cost analysis, also known as resource usage analysis, is the task of finding bounds on the total cost of a program and is a well-studied problem in static analysis. In this work, we consider two classical quantitative problems in cost analysis for probabilistic programs. The first problem is to find a bound on the expected total cost of the program. This is a natural measure for the resource usage of the program and can also be directly applied to average-case runtime analysis. The second problem asks for a tail bound, i.e. given a threshold C the goal is to find a probability bound p such that P[total cost >= t] <= p. Intuitively, given a threshold C on the resource, the problem is to find the likelihood that the total cost exceeds this threshold.
   First, for expectation bounds, a major obstacle in previous works on cost analysis is that they can handle only non-negative costs or bounded variable updates. In contrast, we provide a new variant of the standard notion of cost martingales, that allows us to find expectation bounds for a class of programs with general positive or negative costs and no restriction on the variable updates. More specifically, our approach is applicable as long as there is a lower bound on the total cost incurred along every path.
   Second, for tail bounds, all previous methods are limited to programs in which the expected total cost is finite. In contrast, we present a novel approach, based on a combination of our martingale-based method for expectation bounds with a quantitative safety analysis, to obtain a solution to the tail bound problem that is applicable even to programs with infinite expected cost. Specifically, this allows us to obtain runtime tail bounds for programs that do not terminate almost-surely.
   In summary, we provide a novel combination of martingale-based cost analysis and quantitative safety analysis that is able to find expectation and tail cost bounds for probabilistic programs, without the restrictions of non-negative costs, bounded updates, or finiteness of the expected total cost. Finally, we provide experimental results showcasing that our approach can solve instances that were beyond the reach of previous methods.
C1 [Chatterjee, Krishnendu] Inst Sci & Technol Austria ISTA, Klosterneuburg, Austria.
   [Goharshady, Amir Kafshdar] Hong Kong Univ Sci & Technol, Hong Kong, Peoples R China.
   [Meggendorfer, Tobias] Univ Lancaster, Leipzig, Germany.
   [Zikelic, Dorde] Singapore Management Univ, Singapore, Singapore.
C3 Institute of Science & Technology - Austria; Hong Kong University of
   Science & Technology; Singapore Management University
RP Chatterjee, K (corresponding author), Inst Sci & Technol Austria ISTA, Klosterneuburg, Austria.
EM krishnendu.chatterjee@ist.ac.at; goharshady@cse.ust.hk;
   tobias@meggendorfer.de; dzikelic@smu.edu.sg
OI Meggendorfer, Tobias/0000-0002-1712-2165; Chatterjee,
   Krishnendu/0000-0002-4561-241X; Zikelic, Dorde/0000-0002-4681-1699
FU European Research Council (ERC) [863818]; Hong Kong Research Grants
   Council under ECS Project [26208122]
FX This work was supported in part by the European Research Council (ERC)
   under Grant No. 863818 (ForM-SMArt) and the Hong Kong Research Grants
   Council under ECS Project No. 26208122.
CR Abate A, 2021, LECT NOTES COMPUT SC, V12760, P3, DOI 10.1007/978-3-030-81688-9_1
   Agrawal S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158122
   Aguirre A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434333
   Alias C, 2010, LECT NOTES COMPUT SC, V6337, P117, DOI 10.1007/978-3-642-15769-1_8
   [Anonymous], 2024, Proc. ACM Program. Lang, V8
   Asadi A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P772, DOI 10.1145/3453483.3454076
   Avis D, 2004, AM MATH MON, V111, P152, DOI 10.2307/4145216
   Bag Samiran, 2017, IEEE Transactions on Information Forensics and Security, V12, P1967, DOI 10.1109/TIFS.2016.2623588
   Barthe Gilles, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P117, DOI 10.1007/978-3-319-89884-1_5
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Bartocci E, 2019, LECT NOTES COMPUT SC, V11781, P255, DOI 10.1007/978-3-030-31784-3_15
   Batz Kevin, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P186, DOI 10.1007/978-3-319-89884-1_7
   Batz K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434320
   Beutner R, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P536, DOI 10.1145/3519939.3523721
   Beutner R, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1312, DOI 10.1145/3453483.3454111
   Bingham E, 2019, J MACH LEARN RES, V20
   Carbonneaux Q, 2015, ACM SIGPLAN NOTICES, V50, P467, DOI [10.1145/2813885.2737955, 10.1145/2737924.2737955]
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chatterjee K, 2023, FORM ASP COMPUT, V35, DOI 10.1145/3585391
   Chatterjee K, 2022, LECT NOTES COMPUT SC, V13371, P55, DOI 10.1007/978-3-031-13185-1_4
   Chatterjee K, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1033, DOI 10.1145/3453483.3454093
   Chatterjee K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P672, DOI 10.1145/3385412.3385969
   Chatterjee K, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3174800
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Chatterjee Krishnendu, 2024, Quantitative Bounds on Resource Usage of Probabilistic Programs
   Chen JH, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P869, DOI 10.1145/3385412.3386002
   Çiçek E, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P533, DOI 10.1145/3314221.3314603
   Çiçek E, 2017, ACM SIGPLAN NOTICES, V52, P316, DOI 10.1145/3093333.3009858
   Cimatti A, 2013, LECT NOTES COMPUT SC, V7795, P93
   Collins G. E., 1982, Computing (Supplementum), P79
   Dameron M., 2018, Ethereum Project Beige Paper
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Farkas J., 1902, Journal fr die reine und angewandte Mathematik (Crelles Journal), V1902, P1, DOI [DOI 10.1515/CRLL.1902.124.1, 10.1515/crll.1902.124.1]
   Feautrier P, 2010, ELECTRON NOTES THEOR, V267, P3, DOI 10.1016/j.entcs.2010.09.014
   FELDMAN YA, 1984, INFORM CONTROL, V63, P11, DOI 10.1016/S0019-9958(84)80039-X
   Fioriti LMF, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI 10.1145/2676726.2677001
   Fu HF, 2019, LECT NOTES COMPUT SC, V11388, P468, DOI 10.1007/978-3-030-11245-5_22
   Gario M., 2015, SMT WORKSH
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   Ghahramani Z, 2015, NATURE, V521, P452, DOI 10.1038/nature14541
   Gilad Y, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P51, DOI 10.1145/3132747.3132757
   Goodman N., 2008, UAI, V8, P220
   Gordon Andrew D., 2014, P FUT SOFTW ENG, P167, DOI [DOI 10.1145/2593882.2593900, 10.1145/2593882.2593900]
   Gulwani S, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P292, DOI 10.1145/1806596.1806630
   Gulwani S, 2009, ACM SIGPLAN NOTICES, V44, P127, DOI 10.1145/1594834.1480898
   Haghighat AT, 2019, FUTURE GENER COMP SY, V97, P482, DOI 10.1016/j.future.2019.03.002
   HANDELMAN D, 1988, PAC J MATH, V132, P35, DOI 10.2140/pjm.1988.132.35
   Hoffmann Jan, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P781, DOI 10.1007/978-3-642-31424-7_64
   Hoffmann J, 2017, ACM SIGPLAN NOTICES, V52, P359, DOI 10.1145/3093333.3009842
   Hoffmann J, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2362389.2362393
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6012, P287, DOI 10.1007/978-3-642-11957-6_16
   Huang MZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360555
   Kaminski BL, 2018, J ACM, V65, DOI 10.1145/3208102
   Kenyon-Roberts A, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470550
   Kiayias A, 2017, LECT NOTES COMPUT SC, V10401, P357, DOI 10.1007/978-3-319-63688-7_12
   Kincaid Z, 2017, ACM SIGPLAN NOTICES, V52, P248, DOI [10.1145/3062341.3062373, 10.1145/3140587.3062373]
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Kretínsky J, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(4:3)2020
   Kura S, 2019, LECT NOTES COMPUT SC, V11428, P135, DOI 10.1007/978-3-030-17465-1_8
   Lewenberg Y, 2015, PROCEEDINGS OF THE 2015 INTERNATIONAL CONFERENCE ON AUTONOMOUS AGENTS & MULTIAGENT SYSTEMS (AAMAS'15), P919
   McIver A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158121
   McIver Annabelle, 2004, Lecture Notes in Computer Science, V3167, P123, DOI [10.1007/11889229_4, DOI 10.1007/11889229_4]
   McIver Annabelle, 2005, MG COMP SCI
   Meggendorfer Tobias, 2024, Zenodo, DOI 10.5281/ZENODO.10457566
   Meurer A, 2017, PEERJ COMPUT SCI, DOI 10.7717/peerj-cs.103
   Monniaux D, 2001, LECT NOTES COMPUT SC, V2126, P111
   Moosbrugger M, 2021, LECT NOTES COMPUT SC, V12648, P491, DOI 10.1007/978-3-030-72019-3_18
   Neuhäusser MR, 2007, LECT NOTES COMPUT SC, V4703, P412
   Neuhäusser MR, 2009, LECT NOTES COMPUT SC, V5504, P364
   Ngo VC, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P496, DOI 10.1145/3192366.3192394
   Olmedo F, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3156018
   Olmedo F, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P672, DOI 10.1145/2933575.2935317
   PUTINAR M, 1993, INDIANA U MATH J, V42, P969, DOI 10.1512/iumj.1993.42.42045
   Qu WH, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341696
   Radicek I, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158124
   RENEGAR J, 1992, J SYMB COMPUT, V13, P301, DOI 10.1016/S0747-7171(10)80005-7
   Roy DM, 2008, ICML, V22, P26
   Sankaranarayanan S, 2004, LECT NOTES COMPUT SC, V3148, P53
   Shinan Erez, 2023, Lark-a parsing toolkit for Python
   Sinn M, 2017, J AUTOM REASONING, V59, P3, DOI 10.1007/s10817-016-9402-4
   Sinn M, 2014, LECT NOTES COMPUT SC, V8559, P745, DOI 10.1007/978-3-319-08867-9_50
   Takisaka T, 2021, ACM T PROGR LANG SYS, V43, DOI [10.1145/3450967, 10.1145/345096]
   Thrun S, 2000, AI MAG, V21, P93
   Tolpin David, 2016, P 28 S IMPL APPL FUN, P1, DOI DOI 10.1145/3064899.3064910
   van de Meent Jan-Willem, 2018, arXiv, DOI DOI 10.48550/ARXIV.1809.10756
   Wang D, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P559, DOI 10.1145/3453483.3454062
   Wang D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408992
   Wang PX, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P204, DOI 10.1145/3314221.3314581
   Wang PX, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371093
   Williams D, 1991, PROBABILITY MARTINGA
   Zikelic D, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P442, DOI 10.1145/3519939.3523435
   Zuleger F, 2011, LECT NOTES COMPUT SC, V6887, P280, DOI 10.1007/978-3-642-23702-7_22
NR 93
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 107
DI 10.1145/3649824
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600014
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Li, ZK
   Peng, JJ
   Mei, YX
   Lin, SN
   Wu, Y
   Padon, O
   Jia, ZH
AF Li, Zikun
   Peng, Jinjun
   Mei, Yixuan
   Lin, Sina
   Wu, Yi
   Padon, Oded
   Jia, Zhihao
TI Quarl: A Learning-Based Quantum Circuit Optimizer
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Quantum compilers
AB Optimizing quantum circuits is challenging due to the very large search space of functionally equivalent circuits and the necessity of applying transformations that temporarily decrease performance to achieve a final performance improvement. This paper presents Quarl, a learning-based quantum circuit optimizer. Applying reinforcement learning (RL) to quantum circuit optimization raises two main challenges: the large and varying action space and the non-uniform state representation. Quarl addresses these issues with a novel neural architecture and RL-training procedure. Our neural architecture decomposes the action space into two parts and leverages graph neural networks in its state representation, both of which are guided by the intuition that optimization decisions can be mostly guided by local reasoning while allowing global circuit-wide reasoning. Our evaluation shows that Quarl significantly outperforms existing circuit optimizers on almost all benchmark circuits. Surprisingly, Quarl can learn to perform rotation merging-a complex, non-local circuit optimization implemented as a separate pass in existing optimizers.
C1 [Li, Zikun; Mei, Yixuan; Jia, Zhihao] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Peng, Jinjun] Columbia Univ, New York, NY USA.
   [Lin, Sina] Microsoft, Mountain View, CA USA.
   [Wu, Yi] Tsinghua Univ, Beijing, Peoples R China.
   [Padon, Oded] VMware Res, Palo Alto, CA USA.
C3 Carnegie Mellon University; Columbia University; Microsoft; Tsinghua
   University; VMware, Inc.
RP Li, ZK (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM zikunl@andrew.cmu.edu; mail@co1in.me; meiyixuan2000@gmail.com;
   silin@microsoft.com; jxwuyi@gmail.com; oded.padon@gmail.com;
   zhihao@cmu.edu
FU NSF [CNS-2147909, CNS-2211882, CNS-2239351]; Amazon; Google; Samsung;
   U.S. Department of Energy Office of Science User Facility located at
   Lawrence Berkeley National Laboratory [DDR-ERCAP0023403]; Meta; Oracle;
   Qualcomm
FX We thank Shinjae Yoo and Mingkuan Xu for their helpful feedback. This
   work is supported by NSF awards CNS-2147909, CNS-2211882, and
   CNS-2239351, and research awards from Amazon, Cisco, Google, Meta,
   Oracle, Qualcomm, and Samsung. This research used resources of the
   National Energy Research Scientific Computing Center (NERSC), a U.S.
   Department of Energy Office of Science User Facility located at Lawrence
   Berkeley National Laboratory, operated under Contract No.
   DE-AC02-05CH11231 using NERSC award DDR-ERCAP0023403.
CR Agarap A.F., 2018, arXiv, DOI 10.48550/arXiv.1803.08375
   Aleksandrowicz Gadi, 2019, Zenodo, DOI 10.5281/ZENODO.2562110
   Amy M, 2014, IEEE T COMPUT AID D, V33, P1476, DOI 10.1109/TCAD.2014.2341953
   [Anonymous], 2023, The Perlmutter Supercomputer
   AWS, 2023, Amazon EC2 M6i Instances
   Biamonte J, 2017, NATURE, V549, P195, DOI 10.1038/nature23474
   Burgholzer L, 2021, IEEE T COMPUT AID D, V40, P1810, DOI 10.1109/TCAD.2020.3032630
   Cao YD, 2019, CHEM REV, V119, P10856, DOI 10.1021/acs.chemrev.8b00803
   Farhi E, 2014, Arxiv, DOI arXiv:1411.4028
   Fosel Thomas, 2021, arXiv
   Gardner MW, 1998, ATMOS ENVIRON, V32, P2627, DOI 10.1016/S1352-2310(97)00447-0
   Hadzihasanovic A, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P502, DOI 10.1145/3209108.3209128
   Hamilton WL, 2017, ADV NEUR IN, V30
   He YL, 2018, APPL SOFT COMPUT, V70, P80, DOI 10.1016/j.asoc.2018.05.012
   Hietala K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434318
   HINTON GE, 1987, LECT NOTES COMPUT SC, V258, P1
   IBM, 2023, The IBM Washington quantum device.
   Jeandel E, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P559, DOI 10.1145/3209108.3209131
   Kissinger A., 2020, ELECTRON P THEOR COM, V318, P229, DOI [DOI 10.4204/EPTCS.318.14, 10.4204/eptcs.318.14, 10.4204/ eptcs.318.14]
   Koenig JR, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P696, DOI 10.1145/3453483.3454071
   Lambda, 2023, On-demand GPU cloud pricing
   Li GS, 2019, Arxiv, DOI [arXiv:1809.02573, 10.48550/arXiv.1809.02573]
   Li Zikun, 2024, Zenodo, DOI 10.5281/ZENODO.10463907
   Mnih V, 2016, PR MACH LEARN RES, V48
   Monz T, 2016, SCIENCE, V351, P1068, DOI 10.1126/science.aad9480
   Nam Y, 2018, NPJ QUANTUM INFORM, V4, DOI 10.1038/s41534-018-0072-4
   Ostaszewski M, 2021, ADV NEUR IN, V34
   Paszke A, 2019, ADV NEUR IN, V32
   Peruzzo A, 2014, NAT COMMUN, V5, DOI 10.1038/ncomms5213
   Pointing J., 2021, arXiv, DOI 10.48550/arXiv.2111.11387
   Pozzi MG, 2020, Arxiv, DOI arXiv:2007.15957
   Quetschlich N, 2022, arXiv
   Schulman J, 2017, Arxiv, DOI [arXiv:1707.06347, DOI 10.48550/ARXIV.1707.06347]
   Sinha A, 2022, AAAI CONF ARTIF INTE, P9935
   Sivarajah S, 2021, QUANTUM SCI TECHNOL, V6, DOI 10.1088/2058-9565/ab8e92
   Skilbeck Mark, 2020, rigetti/ quilc: v1.21.0, DOI [10.5281/zenodo.3967926, DOI 10.5281/ZENODO.3967926]
   Sutton RS, 2000, ADV NEUR IN, V12, P1057
   Wang MJ, 2020, Arxiv, DOI arXiv:1909.01315
   Xu AMD, 2023, Arxiv, DOI arXiv:2211.09691
   Xu MK, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P625, DOI 10.1145/3519939.3523433
   Xu MK, 2022, Arxiv, DOI arXiv:2204.09033
NR 41
TC 0
Z9 0
U1 2
U2 2
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 114
DI 10.1145/3649831
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600021
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Sato, S
   Nakamaru, T
AF Sato, Shigeyuki
   Nakamaru, Tomoki
TI Multiverse Notebook Shifting Data Scientists to Time Travelers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Exploratory programming; Computational notebook; Memorymanagement
ID EFFICIENT
AB Computational notebook environments are popular and de facto standard tools for programming in data science, whereas computational notebooks are notorious in software engineering. The criticism there stems from the characteristic of facilitating unrestricted dynamic patching of running programs, which makes exploratory coding quick but the resultant code messy and inconsistent. In this work, we first reveal that dynamic patching is a natural demand rather than a mere bad practice in data science programming on Kaggle. We then develop Multiverse Notebook, a computational notebook engine for time-traveling exploration. It enables users to time-travel to any past state and restart with new code from there under state isolation. We present an approach to efficiently implementing time-traveling exploration. We empirically evaluate Multiverse Notebook on ten real-world tasks from Kaggle. Our experiments show that time-traveling exploration on Multiverse Notebook is reasonably efficient.
C1 [Sato, Shigeyuki] Univ Electrocommun, Tokyo, Japan.
   [Nakamaru, Tomoki] Univ Tokyo, Tokyo, Japan.
C3 University of Electro-Communications - Japan; University of Tokyo
RP Sato, S (corresponding author), Univ Electrocommun, Tokyo, Japan.
EM sato.shigeyuki@uec.ac.jp
FU JST, Japan [JPMJAX210F]
FX The authors thank the anonymous reviewers for their instructive comments
   to improve the presentation. This work was supported by JST, ACT-X Grant
   Number JPMJAX210F, Japan.
CR Barr ET, 2014, ACM SIGPLAN NOTICES, V49, P67, DOI [10.1145/2714064.2660209, 10.1145/2660193.2660209]
   Baumann A, 2019, PROCEEDINGS OF THE WORKSHOP ON HOT TOPICS IN OPERATING SYSTEMS (HOTOS '19), P14, DOI 10.1145/3317550.3321435
   Blackburn SM, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180477
   Boothe B, 2000, ACM SIGPLAN NOTICES, V35, P299, DOI 10.1145/358438.349339
   Bruno R, 2017, ACM SIGPLAN NOTICES, V52, P2, DOI 10.1145/3156685.3092272
   Chattopadhyay S, 2020, PROCEEDINGS OF THE 2020 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'20), DOI 10.1145/3313831.3376729
   Cheng P, 1998, ACM SIGPLAN NOTICES, V33, P162, DOI 10.1145/277652.277718
   Cordeiro Maurici, 2021, Why Data Scientists Should use Jupyter Notebooks with Moderation
   de Santana Taijara Loiola, 2024, ACM Trans. Softw. Eng. Methodol., DOI [10.1145/3641539JustAccepted, DOI 10.1145/3641539JUSTACCEPTED]
   Edge Jake, 2013, The failure of pysandbox
   Elizondo Eddie, 2023, PEP683: Immortal Objects: Updates
   FELDMAN SI, 1989, SIGPLAN NOTICES, V24, P112, DOI 10.1145/69215.69226
   Fink Laura, 2021, Signal, where are you?
   Fisher Danyel, 2014, Technical Report MSR-TR-2014-148
   Grus Joel, 2018, JupyterCon
   Guzharina Alena, 2021, Revamped Reactive Mode and How It Makes Your Notebooks Reproducible
   Hayden CM, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629460
   Hayden CM, 2012, ACM SIGPLAN NOTICES, V47, P249, DOI 10.1145/2398857.2384635
   Head A, 2019, CHI 2019: PROCEEDINGS OF THE 2019 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, DOI 10.1145/3290605.3300500
   Hicks M, 2005, ACM T PROGR LANG SYS, V27, P1049, DOI [10.1145/1108970.1108971, 10.1145/381694.378798]
   Hicks Michael, 2001, Ph. D. Dissertation
   HN, 2020, Augmentations, Data Cleaning and Bounding Boxes
   Islam C, 2023, J SYST SOFTWARE, V200, DOI 10.1016/j.jss.2023.111652
   Jaswani Naman., 2020, Pytorch | MoA
   Kallen Malin, 2021, The Art, Science, and Engineering of Programming, V5, p15:1, DOI DOI 10.22152/PROGRAMMING-JOURNAL.ORG/2021/5/15
   Karakulak Umut., 2017, Using stage 1 test results for stage 2 training
   Kemper A, 2011, PROC INT CONF DATA, P195, DOI 10.1109/ICDE.2011.5767867
   Kery MB, 2019, CHI 2019: PROCEEDINGS OF THE 2019 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, DOI 10.1145/3290605.3300322
   Kery MB, 2018, PROCEEDINGS OF THE 2018 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI 2018), DOI 10.1145/3173574.3173748
   Kery MB, 2018, 2018 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING (VL/HCC), P147, DOI 10.1109/VLHCC.2018.8506576
   Kery MB, 2017, S VIS LANG HUM CEN C, P25, DOI 10.1109/VLHCC.2017.8103446
   Koenzen AP, 2020, S VIS LANG HUM CEN C, DOI 10.1109/vl/hcc50065.2020.9127202
   Lau S, 2020, S VIS LANG HUM CEN C, DOI 10.1109/vl/hcc50065.2020.9127201
   Li L, 2021, IEEE T KNOWL DATA EN, V33, P316, DOI 10.1109/TKDE.2019.2930987
   Li Zekun., 2017, Copy-on-write friendly Python garbage collection
   Lukyanenko Andrew, 2020, Which bird is it?
   Miltner A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360569
   Mokin Vitalii, 2020, Ion Switching-AdvFE, LGB, Wavenet, ConfMatrix
   Mulla Rob, 2020, OpenVaccine: COVID-19 mRNA Starter EDA
   Mulla Rob, 2019, IEEE Fraud Detection-First Look and EDA
   Parente Peter, 2024, Estimate of Public Jupyter Notebooks on GitHub
   Peng Mark, 2020, DeepInsight: Transforming Non-image data to Images
   Perkel JM, 2018, NATURE, V563, P145, DOI 10.1038/d41586-018-07196-1
   Pimentel Joao Felipe, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P507, DOI 10.1109/MSR.2019.00077
   Pimentel JF, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-021-09961-9
   Pina L, 2019, TWENTY-FOURTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXIV), P573, DOI 10.1145/3297858.3304063
   Pina L, 2014, ACM SIGPLAN NOTICES, V49, P103, DOI [10.1145/2660193.2660220, 10.1145/2714064.2660220]
   Quaranta L, 2021, IEEE WORK CONF MIN S, P550, DOI 10.1109/MSR52588.2021.00072
   Raghunandan D, 2023, PROCEEDINGS OF THE 2023 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, CHI 2023, DOI 10.1145/3544548.3580997
   Raghunandan Deepthi, 2023, Interactions, V30, P17, DOI [10.1145/3572863, DOI 10.1145/3572863]
   Rule A, 2018, PROCEEDINGS OF THE 2018 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI 2018), DOI 10.1145/3173574.3173606
   Sarma A, 2023, PROCEEDINGS OF THE 2023 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, CHI 2023, DOI 10.1145/3544548.3580726
   Sato Shigeyuki, 2024, Zenodo, DOI 10.5281/ZENODO.7656049
   Snow Eric, 2022, PEP 683 -Immortal Objects, Using a Fixed Refcount
   Titov S, 2022, EUR CON SFTWR MTNCE, P492, DOI 10.1109/SANER53432.2022.00066
   Wang ZJ, 2022, EXTENDED ABSTRACTS OF THE 2022 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, CHI 2022, DOI 10.1145/3491101.3519653
   Warth A, 2011, LECT NOTES COMPUT SC, V6813, P179, DOI 10.1007/978-3-642-22655-7_9
   Weinman Nathaniel, 2021, P 2021 CHI C HUM FAC, DOI [10.1145/3411764.3445527, DOI 10.1145/3411764.3445527]
   xhlulu, 2019, IEEE Fraud: XGBoost with GPU (Fit in 40s)
NR 59
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 121
DI 10.1145/3649838
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600028
OA gold
DA 2024-08-05
ER

PT J
AU Bergsträsser, P
   Ganardi, M
   Lin, AW
   Zetzsche, G
AF Bergstraesser, Pascal
   Ganardi, Moses
   Lin, Anthony W.
   Zetzsche, Georg
TI Ramsey Quantifiers in Linear Arithmetics
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Ramsey Quantifiers; Satisfiability Modulo Theories; Linear Integer
   Arithmetic; Linear Real Arithmetic; Monadic Decomposability; Liveness;
   Termination; Infinite Chains; Infinite Cliques
ID PUSHDOWN TIMED AUTOMATA; REACHABILITY ANALYSIS; MODEL CHECKING
AB We study Satisfiability Modulo Theories (SMT) enriched with the so-called Ramsey quantifiers, which assert the existence of cliques (complete graphs) in the graph induced by some formulas. The extended framework is known to have applications in proving program termination (in particular, whether a transitive binary predicate is well-founded), and monadic decomposability of SMT formulas. Our main result is a new algorithm for eliminating Ramsey quantifiers from three common SMT theories: Linear Integer Arithmetic (LIA), Linear Real Arithmetic (LRA), and Linear Integer Real Arithmetic (LIRA). In particular, if we work only with existentially quantified formulas, then our algorithm runs in polynomial time and produces a formula of linear size. One immediate consequence is that checking well-foundedness of a given formula in the aforementioned theory defining a transitive predicate can be straightforwardly handled by highly optimized SMT-solvers. We show also how this provides a uniform semi-algorithm for verifying termination and liveness with completeness guarantee (in fact, with an optimal computational complexity) for several well-known classes of infinite-state systems, which include succinct timed systems, one-counter systems, and monotonic counter systems. Another immediate consequence is a solution to an open problem on checking monadic decomposability of a given relation in quantifier-free fragments of LRA and LIRA, which is an important problem in automated reasoning and constraint databases. Our result immediately implies decidability of this problem with an optimal complexity (coNP-complete) and enables exploitation of SMT-solvers. It also provides a termination guarantee for the generic monadic decomposition algorithm of Veanes et al. for LIA, LRA, and LIRA. We report encouraging experimental results on a prototype implementation of our algorithms on micro-benchmarks.
C1 [Bergstraesser, Pascal; Lin, Anthony W.] Univ Kaiserslautern Landau, Kaiserslautern, Germany.
   [Ganardi, Moses; Lin, Anthony W.; Zetzsche, Georg] MPI SWS, Kaiserslautern, Germany.
RP Bergsträsser, P (corresponding author), Univ Kaiserslautern Landau, Kaiserslautern, Germany.
EM bergstraesser@cs.uni-kl.de; ganardi@mpi-sws.org; awlin@mpi-sws.org;
   georg@mpi-sws.org
RI Zetzsche, Georg/I-5335-2018
OI Zetzsche, Georg/0000-0002-6421-4388
FU European Union (ERC) [101089343, 101077902]
FX Funded by the European Union (ERC, LASD, 101089343
   (https://doi.org/10.3030/101089343), and FINABIS, 101077902
   (https://doi.org/10.3030/101077902)).Views and opinions expressed are
   however those of the authors only and do not necessarily reflect those
   of the European Union or the European Research Council Executive Agency.
   Neither the European Union nor the granting authority can be held
   responsible for them.
CR Abdulla PA, 1996, IEEE S LOG, P313, DOI 10.1109/LICS.1996.561359
   Abdulla PA, 2012, IEEE S LOG, P35, DOI 10.1109/LICS.2012.15
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   [Anonymous], 2013, Proceedings (Lecture Notes in Computer Science, DOI DOI 10.1007/978-3-642-39799
   [Anonymous], 1929, COMPT REND 1 C MATH
   Barcelo Pablo, 2019, LIPIcs, V132
   Bardin S, 2005, LECT NOTES COMPUT SC, V3707, P474
   Bardin Sebastien, 2008, International Journal on Software Tools for Technology Transfer, V10, P401, DOI 10.1007/s10009-008-0064-3
   Barwise J., 1985, Perspectives in Logic, V8
   Benedikt M, 2003, J ACM, V50, P694, DOI 10.1145/876638.876642
   Bergsträsser P, 2023, Arxiv, DOI [arXiv:2311.04031, 10.48550/arXiv.2311.04031]
   Bergsträsser P, 2023, IEEE S LOG, DOI 10.1109/LICS56636.2023.10175722
   Bergsträsser P, 2023, Arxiv, DOI [arXiv:2304.11034, 10.48550/arXiv.2304.11034, DOI 10.48550/ARXIV.2304.11034]
   Bergstrasser Pascal, 2022, LICS 22, DOI [10.1145/3531130.3533346, DOI 10.1145/3531130.3533346]
   Bergstrasser Pascal, 2023, Ramsey Quantifiers in Linear Arithmetics-Artifact, DOI [10.5281/zenodo.8422415, DOI 10.5281/ZENODO.8422415]
   Bjorner N., 2012, P SMT IJCAR, P3
   Bjorner N, 2015, LECT NOTES COMPUT SC, V9300, P24, DOI 10.1007/978-3-319-23534-9_2
   Blondin M, 2017, IEEE S LOG
   Blondin M, 2016, LECT NOTES COMPUT SC, V9636, P480, DOI 10.1007/978-3-662-49674-9_28
   Blumensath A, 2000, IEEE S LOG, P51, DOI 10.1109/LICS.2000.855755
   Boigelot B, 2003, LECT NOTES COMPUT SC, V2725, P223
   Boigelot B, 2006, LECT NOTES COMPUT SC, V4144, P438, DOI 10.1007/11817963_40
   BOROSH I, 1976, P AM MATH SOC, V55, P299, DOI 10.2307/2041711
   Bouajjani A, 1995, LECT NOTES COMPUT SC, V999, P64
   Bouajjani A, 2011, FORM METHOD SYST DES, V38, P158, DOI 10.1007/s10703-011-0111-7
   Chang C. C., 1990, STUDIES LOGIC FDN MA, V73
   Clemente Lorenzo, 2018, LIPIcs, V107, DOI [10.4230/LIPIcs. ICALP.2018.118, DOI 10.4230/LIPICS.ICALP.2018.118]
   Comon H, 1999, LECT NOTES COMPUT SC, V1664, P242
   Cook B, 2011, COMMUN ACM, V54, P88, DOI 10.1145/1941487.1941509
   Czerwinski W, 2022, ANN IEEE SYMP FOUND, P1229, DOI 10.1109/FOCS52979.2021.00120
   Dang Z, 2001, LECT NOTES COMPUT SC, V2102, P506
   Dang Zhe, 2002, Int. J. Found. Comput. Sci., V13, P911, DOI [10.1142/S0129054102001539, DOI 10.1142/S0129054102001539]
   Dang Zhe., 2000, Computer Aided Verification, volume 1855 of Lecture Notes in Computer Science, V1855, P69
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Finkel A, 2001, THEOR COMPUT SCI, V256, P63, DOI 10.1016/S0304-3975(00)00102-X
   Finkel A, 2019, Arxiv, DOI arXiv:1910.02736
   Finkel Alain, 2019, Schloss Dagstuhl-LeibnizZentrum fur Informatik, V41, P1
   Fourier Jean Baptiste Joseph, 1826, Nouveau Bulletin des Sciences par la Societe philomatique de Paris, V99
   GINSBURG S, 1966, P AM MATH SOC, V17, P1043
   Grobler Mario, 2023, arXiv, DOI DOI 10.48550/ARXIV.2301.08969
   Grumbach S, 2001, GEOINFORMATICA, V5, P95, DOI 10.1023/A:1011464022461
   Guha Shibashis, 2022, LIPIcs, V250
   Haase C, 2009, LECT NOTES COMPUT SC, V5710, P369, DOI 10.1007/978-3-642-04081-8_25
   Hague Matthew, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P260, DOI 10.1007/978-3-642-31424-7_22
   Hague Matthew, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P743, DOI 10.1007/978-3-642-22110-1_60
   Hague M, 2020, LECT NOTES COMPUT SC, V12166, P122, DOI 10.1007/978-3-030-51074-9_8
   IBARRA OH, 1978, J ACM, V25, P116, DOI 10.1145/322047.322058
   Ibarra Oscar H., 2000, Lecture Notes in Computer Science, V1893, P426, DOI [10.1007/3- 540-44612- 5_38, DOI 10.1007/3-540-44612-5_38]
   Jhala R, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592438
   Klaedtke F, 2003, LECT NOTES COMPUT SC, V2719, P681
   Kuper Gabriel M., 2000, Constraint Databases
   Kuske D, 2010, LEIBNIZ INT PR INFOR, V5, P537, DOI 10.4230/LIPIcs.STACS.2010.2483
   Legay A, 2008, LECT NOTES COMPUT SC, V5123, P548
   Leroux J, 2022, ANN IEEE SYMP FOUND, P1241, DOI 10.1109/FOCS52979.2021.00121
   Leroux J, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785796
   Libkin L., 2003, ACM Transactions on Computational Logic, V4, P431, DOI 10.1145/937555.937557
   Lipton R., 1976, 62 YAL U DEP COMP SC
   MANNA Z, 1970, J ACM, V17, P555, DOI 10.1145/321592.321606
   Markgraf O, 2021, LECT NOTES COMPUT SC, V12760, P243, DOI 10.1007/978-3-030-81688-9_12
   NELSON G, 1980, J ACM, V27, P356, DOI 10.1145/322186.322198
   Podelski A, 2004, IEEE S LOG, P32, DOI 10.1109/LICS.2004.1319598
   Qadeer S, 2005, LECT NOTES COMPUT SC, V3440, P93
   Quaas K, 2017, IEEE S LOG
   Rackoff C., 1978, Theoretical Computer Science, V6, P223, DOI 10.1016/0304-3975(78)90036-1
   Ramsey FP, 1930, P LOND MATH SOC, V30, P264, DOI 10.1112/plms/s2-30.1.264
   Rustan K, 2023, Program Proofs
   SCHMERL JH, 1982, J SYMBOLIC LOGIC, V47, P423, DOI 10.2307/2273152
   SHOSTAK RE, 1984, J ACM, V31, P1, DOI 10.1145/2422.322411
   SONTAG ED, 1985, INFORM PROCESS LETT, V20, P115, DOI 10.1016/0020-0190(85)90076-6
   To AW, 2009, LECT NOTES COMPUT SC, V5771, P485, DOI 10.1007/978-3-642-04027-6_35
   To AW, 2008, LECT NOTES ARTIF INT, V5330, P198, DOI 10.1007/978-3-540-89439-1_15
   Veanes M, 2017, J ACM, V64, DOI 10.1145/3040488
   Weispfenning V, 1999, ISSAC 99: PROCEEDINGS OF THE 1999 INTERNATIONAL SYMPOSIUM ON SYMBOLIC AND ALGEBRAIC COMPUTATION, P129, DOI 10.1145/309831.309888
   Weispfenning V., 1997, ISSAC 97. Proceedings of the 1997 International Sympsoium on Symbolic and Algebraic Computation, P48, DOI 10.1145/258726.258746
   WILLIAMS HP, 1986, AM MATH MON, V93, P681, DOI 10.2307/2322281
   Xie Li, 2020, Dependable Software Engineering. Theories, Tools, and Applications. 6th International Symposium, SETTA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12153), P89, DOI 10.1007/978-3-030-62822-2_6
   Zhe D, 2003, THEOR COMPUT SCI, V302, P93, DOI 10.1016/S0304-3975(02)00743-0
   Zhe Dang, 2001, STACS 2001. 18th Annual Symposium on Theoretical Aspects of Computer Science. Proceedings (Lecture Notes in Computer Science Vol.2010), P132
NR 78
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 1
DI 10.1145/3632843
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400002
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Xu, P
   Lei, YX
   Sui, YL
   Xue, JL
AF Xu, Pei
   Lei, Yuxiang
   Sui, Yulei
   Xue, Jingling
TI Iterative-Epoch Online Cycle Elimination for Context-Free Language
   Reachability
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE CFL-reachability; online graph simpli~cation; performance
ID POINTER
AB Context-free language reachability (CFL-reachability) is a fundamental framework for implementing various static analyses. CFL-reachability utilizes context-free grammar (CFG) to extend the expressiveness of ordinary graph reachability from an unlabeled graph to an edge-labeled graph. Solving CFL-reachability requires a (sub)cubic time complexity with respect to the graph size, which limits its scalability in practice. Thus, an approach that can effectively reduce the graph size while maintaining the reachability result is highly desirable. Most of the existing graph simplification techniques for CFL-reachability work during the preprocessing stage, i.e., before the dynamic CFL-reachability solving process. However, in real-world CFL-reachability analyses, there is a large number of reducible nodes and edges that can only be discovered during dynamic solving, leaving significant room for on-the-fly improvements. This paper aims to reduce the graph size of CFL-reachability dynamically via online cycle elimination. We propose a simple yet effective approach to detect collapsible cycles in the graph based on the input context-free grammar. Our key insight is that symbols with particular forms of production rules in the grammar are the essence of transitivity of reachability relations in the graph. Specifically, in the graph, a reachability relation to a node v(i) can be "transited" to another node v(j) if there is a transitive relation from v(i) to v(j), and cycles formed by transitive relations are collapsible. In this paper, we present an approach to identify the transitive symbols in a context-free grammar and propose an iterative-epoch framework for online cycle elimination. From the perspective of non-parallelized CFL-reachability solving, our iterative-epoch framework is well compatible with both the standard (unordered) solver and the recent ordered solver, and can significantly improve their performance. Our experiment on context-sensitive value-flow analysis for C/C++ and field-sensitive alias analysis for Java demonstrates promising performance improvement by our iterative-epoch cycle elimination technique. By collapsing cycles online, our technique accelerates CFL-reachability solving by 17.17x and 13.94x for value-flow analysis and alias analysis, respectively, with memory reductions of 48.8% and 45.0%.
C1 [Xu, Pei] Univ Technol, Sydney, NSW, Australia.
   [Xu, Pei; Lei, Yuxiang; Sui, Yulei; Xue, Jingling] Univ New South Wales, Sydney, NSW, Australia.
C3 University of Technology Sydney; University of New South Wales Sydney
RP Xu, P (corresponding author), Univ Technol, Sydney, NSW, Australia.; Xu, P (corresponding author), Univ New South Wales, Sydney, NSW, Australia.
EM pei.xu@student.uts.edu.au; yuxiang.lei@unsw.edu.au; y.sui@unsw.edu.au;
   j.xue@unsw.edu.au
OI Lei, Yuxiang/0000-0002-4484-8172; Xu, Pei/0009-0002-8766-3714
FU Australian Research Grants [DP210102409, DP240103194, FT220100391];
   Google; Australian Research Council [FT220100391] Funding Source:
   Australian Research Council
FX We thank the anonymous reviewers for their reviews and suggestions. This
   research is supported by Australian Research Grants DP210102409,
   DP240103194 and FT220100391, and by a generous Aspire Gift Grant from
   Google.
CR Alur R, 2005, ACM T PROGR LANG SYS, V27, P786, DOI 10.1145/1075382.1075387
   Andersen L. O., 1994, Ph.D. Dissertation
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Chatterjee K, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158118
   Chaudhuri S, 2008, ACM SIGPLAN NOTICES, V43, P159, DOI 10.1145/1328897.1328460
   Fahndrich M, 1998, ACM SIGPLAN NOTICES, V33, P85, DOI 10.1145/277652.277667
   Gauwin O, 2020, Arxiv, DOI [arXiv:1907.09563, 10.48550/arXiv.1907.09563, DOI 10.48550/ARXIV.1907.09563]
   Hardekopf B, 2007, LECT NOTES COMPUT SC, V4634, P265
   Hardekopf B, 2007, ACM SIGPLAN NOTICES, V42, P290, DOI 10.1145/1273442.1250767
   Heizmann M, 2017, LECT NOTES COMPUT SC, V10205, P461, DOI 10.1007/978-3-662-54577-5_27
   Huang Wei, 2015, P 2015 INT S SOFTW T, P106, DOI [10.1145/2771783.2771803, DOI 10.1145/2771783.2771803]
   Lei YX, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591233
   Lei YX, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563343
   Li YB, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P780, DOI 10.1145/3385412.3386021
   Melski D, 2000, THEOR COMPUT SCI, V248, P29, DOI 10.1016/S0304-3975(00)00049-9
   NUUTILA E, 1994, INFORM PROCESS LETT, V49, P9, DOI 10.1016/0020-0190(94)90047-7
   Pearce DJ, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1290520.1290524
   Pearce DJ, 2003, THIRD IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION - PROCEEDINGS, P3, DOI 10.1109/SCAM.2003.1238026
   Pereira FMQ, 2009, INT SYM CODE GENER, P126, DOI 10.1109/CGO.2009.9
   Rehof J, 2001, ACM SIGPLAN NOTICES, V36, P54, DOI 10.1145/373243.360208
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   Reps T., 1995, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics- Based Program Manipulation. PEPM'95, P1, DOI 10.1145/215465.215466
   Rountev A, 2000, ACM SIGPLAN NOTICES, V35, P47, DOI 10.1145/358438.349310
   Sridharan M, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1103845.1094817
   Su Z., 2000, Proceedings of the 27th ACM SIGPLAN-SIGACT symposium on Principles of programming languages (POPL), P81, DOI [10.1145/325694.325706, DOI 10.1145/325694.325706]
   Sui YL, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P265, DOI 10.1145/2892208.2892235
   Sui YL, 2014, IEEE T SOFTWARE ENG, V40, P107, DOI 10.1109/TSE.2014.2302311
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Vallee-Rai R., 1999, P 1999 C CTR ADV STU, P13
   Wang K, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P389, DOI 10.1145/3037697.3037744
   YANNAKAKIS M, 1990, PROCEEDINGS OF THE NINTH ACM SIGACT-SIGMOD-SIGART SYMPOSIUM ON PRINCIPLES OF DATABASE SYSTEMS, P230, DOI 10.1145/298514.298576
   Yuan H, 2009, LECT NOTES COMPUT SC, V5502, P175
   Zhang QR, 2013, ACM SIGPLAN NOTICES, V48, P435, DOI 10.1145/2499370.2462159
   Zheng X, 2008, ACM SIGPLAN NOTICES, V43, P197, DOI 10.1145/1328897.1328464
NR 34
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 145
DI 10.1145/3649862
PG 26
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600052
OA gold
DA 2024-08-05
ER

PT J
AU Batz, K
   Biskup, TJ
   Katoen, JP
   Winkler, T
AF Batz, Kevin
   Biskup, Tom Jannik
   Katoen, Joost-Pieter
   Winkler, Tobias
TI Programmatic Strategy Synthesis: Resolving Nondeterminism in
   Probabilistic Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programs; Markov decision processes; strategy synthesis;
   weakest preexpectations; program verification; quantitative loop
   invariants
ID REFINEMENT
AB We consider imperative programs that involve both randomization and pure nondeterminism. The central question is how to find a strategy resolving the pure nondeterminism such that the so-obtained determinized program satisfies a given quantitative specification, i.e., bounds on expected outcomes such as the expected final value of a program variable or the probability to terminate in a given set of states. We show how memoryless and deterministic (MD) strategies can be obtained in a semi-automatic fashion using deductive verification techniques. For loop-free programs, the MD strategies resulting from our weakest precondition-style framework are correct by construction. This extends to loopy programs, provided the loops are equipped with suitable loop invariants - just like in program verification. We show how our technique relates to the well-studied problem of obtaining strategies in countably infinite Markov decision processes with reachability-reward objectives. Finally, we apply our technique to several case studies.
C1 [Batz, Kevin; Biskup, Tom Jannik; Katoen, Joost-Pieter; Winkler, Tobias] Rhein Westfal TH Aachen, Aachen, Germany.
C3 RWTH Aachen University
RP Batz, K (corresponding author), Rhein Westfal TH Aachen, Aachen, Germany.
EM kevin.batz@cs.rwth-aachen.de; tom.biskup@rwth-aachen.de;
   katoen@cs.rwth-aachen.de; tobias.winkler@cs.rwth-aachen.de
RI Katoen, Joost-Pieter/O-3307-2018
OI Katoen, Joost-Pieter/0000-0002-6143-1926; Winkler,
   Tobias/0000-0003-1084-6408; Batz, Kevin/0000-0001-8705-2564
FU ERC [AdG 787914 FRAPPANT]; DFG RTG [2236 UnRAVeL]
FX Batz and Katoen are supported by the ERC AdG 787914 FRAPPANT. Winkler is
   supported by the DFG RTG 2236 UnRAVeL.
CR Abrial J.-R, 2010, Modeling in Event-B: System and Software Engineering, DOI DOI 10.1017/CBO9781139195881
   [Anonymous], 1969, Machine intelligence
   [Anonymous], 2001, P IJCAI
   Aouadhi MA, 2019, SOFTW SYST MODEL, V18, P1953, DOI 10.1007/s10270-017-0626-5
   Ashok P, 2020, PROCEEDINGS OF THE 23RD INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL (HSCC2020) (PART OF CPS-IOT WEEK), DOI 10.1145/3365365.3382220
   Back Ralph-Johan, 1998, Re~nement Calculus-A Systematic Introduction, DOI [10.1007/978-1-4612-1674-2, DOI 10.1007/978-1-4612-1674-2]
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Bao JL, 2022, LECT NOTES COMPUT SC, V13371, P33, DOI 10.1007/978-3-031-13185-1_3
   Batz K, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571260
   Batz K, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527310
   Batz K, 2021, LECT NOTES COMPUT SC, V12760, P524, DOI 10.1007/978-3-030-81688-9_25
   Batz K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434320
   Batz K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290347
   Batz Kevin, 2023, TACAS, DOI DOI 10.1007/978-3-031-30820-8_25
   Batz Kevin, 2023, arXiv, DOI [10.48550/ARXIV.2311.06889, DOI 10.48550/ARXIV.2311.06889]
   Berger Noam, 2008, FSTTCS LIPICS, V2, P61, DOI [10.4230/LIPICS.FSTTCS.2008.1741, DOI 10.4230/LIPICS.FSTTCS.2008.1741]
   Blackwell D., 1967, P 5 BERKELEY S MATH, V1, P415
   Brázdil T, 2010, PROC APPL MATH, V135, P863
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Dräger K, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(2:16)2015
   Etessami K, 2015, J ACM, V62, DOI 10.1145/2699431
   Feng L., 2015, P ACMIEEE 6 INT C CY, P70
   Feng YJ, 2017, LECT NOTES COMPUT SC, V10482, P400, DOI 10.1007/978-3-319-68167-2_26
   Gretz F., 2012, 2012 Ninth International Conference on Quantitative Evaluation of Systems (QEST 2012), P168, DOI 10.1109/QEST.2012.21
   Haesaert S, 2017, PERFORM EVALUATION, V117, P75, DOI 10.1016/j.peva.2017.09.005
   Hark M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371105
   Hensel C, 2022, INT J SOFTW TOOLS TE, V24, P589, DOI 10.1007/s10009-021-00633-z
   Hoang TS, 2005, LECT NOTES COMPUT SC, V3455, P355
   Iverson K. E., 1962, A Programming Language
   Junges S, 2021, J COMPUT SYST SCI, V119, P183, DOI 10.1016/j.jcss.2021.02.006
   Kaminski BL, 2019, ACTA INFORM, V56, P255, DOI 10.1007/s00236-018-0321-1
   Kaminski Benjamin Lucien, 2019, Advanced weakest precondition calculi for probabilistic programs
   Katoen JP, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P31, DOI 10.1145/2933575.2934574
   Katoen JP, 2010, LECT NOTES COMPUT SC, V6337, P390, DOI 10.1007/978-3-642-15769-1_24
   Kattenbelt M, 2010, FORM METHOD SYST DES, V36, P246, DOI 10.1007/s10703-010-0097-6
   Kattenbelt M, 2009, LECT NOTES COMPUT SC, V5403, P182, DOI 10.1007/978-3-540-93900-9_17
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Kozen Dexter, 1983, P ACM S THEORY COMPU, P291, DOI [10.1145/800061.808758, DOI 10.1145/800061.808758]
   Kozine I. O., 2002, Reliable Computing, V8, P97, DOI 10.1023/A:1014745904458
   Kwiatkowska M, 2002, LECT NOTES COMPUT SC, V2324, P200
   Lamport Leslie, 2002, Specifying Systems: the TLA+ Language and Tools for Hardware and Software Engineers
   Mamouras K, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(3:6)2016
   McIver Annabelle, 2005, Abstraction, Refinement and Proof for Probabilistic Systems, DOI DOI 10.1007/B138392
   Müller P, 2017, NATO SCI PEAC SECUR, V50, P104, DOI 10.3233/978-1-61499-810-5-104
   Navarro M, 2022, SCI COMPUT PROGRAM, V220, DOI 10.1016/j.scico.2022.102822
   ORNSTEIN D, 1969, P AM MATH SOC, V20, P563, DOI 10.2307/2035700
   Puterman M.L., 1994, Markov decision processes: discrete stochastic dynamic programming, DOI DOI 10.1002/9780470316887
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sanner S., 2011, UAI, P643
   Schroer Philipp, 2023, A Deductive Verifcation Infrastructure for Probabilistic Programs, V7, DOI [10.1145/3622870, DOI 10.1145/3622870]
   van Otterlo M, 2012, ADAPT LEARN OPTIM, V12, P3
   Wikipedia, 2023, Nim-Wikipedia, The Free Encyclopedia
NR 52
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 93
DI 10.1145/3632935
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400094
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Campora, JP
   Khan, MW
   Chen, S
AF Campora, John Peter
   Khan, Mohammad Wahiduzzaman
   Chen, Sheng
TI Type-Based Gradual Typing Performance Optimization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE gradual typing; variational types; performance optimization; type-based
   specialization
ID SPECIALIZATION; SYSTEM
AB Gradual typing has emerged as a popular design point in programming languages, attracting significant interests from both academia and industry. Programmers in gradually typed languages are free to utilize static and dynamic typing as needed. To make such languages sound, runtime checks mediate the boundary of typed and untyped code. Unfortunately, such checks can incur significant runtime overhead on programs that heavily mix static and dynamic typing. To combat this overhead without necessitating changes to the underlying implementations of languages, we present discriminative typing. Discriminative typing works by optimistically inferring types for functions and implementing an optimized version of the function based on this type. To preserve safety it also implements an un-optimized version of the function based purely on the provided annotations. With two versions of each function in hand, discriminative typing translates programs so that the optimized functions are called as frequently as possible while also preserving program behaviors.
   We have implemented discriminative typing in Reticulated Python and have evaluated its performance compared to guarded Reticulated Python. Our results show that discriminative typing improves the performance across 95% of tested programs, when compared to Reticulated, and achieves more than 4x speedup in more than 56% of these programs. We also compare its performance against a previous optimization approach and find that discriminative typing improved performance across 93% of tested programs, with 30% of these programs receiving speedups between 4 to 25 times. Finally, our evaluation shows that discriminative typing remarkably reduces the overhead of gradual typing on many mixed type configurations of programs.
   In addition, we have implemented discriminative typing in Grift and evaluated its performance. Our evaluation demonstrations that DT significantly improves performance of Grift
C1 [Campora, John Peter] Quantinuum, Broomfield, CO 80021 USA.
   [Khan, Mohammad Wahiduzzaman; Chen, Sheng] Univ Louisiana, Lafayette, LA USA.
C3 University of Louisiana Lafayette
RP Campora, JP (corresponding author), Quantinuum, Broomfield, CO 80021 USA.
EM john.campora@quantinuum.com; wahid.zaman.mmu@gmail.com;
   sheng.chen@louisiana.edu
FU National Science Foundation [CCF-1750886]
FX We thank the anonymous reviewers from OOPSLA and POPL. Their reviews
   have significantly improved both the content and the presentation of
   this paper. This work is partially support by the National Science
   Foundation under the grant number CCF-1750886.
CR Agesen O, 1995, LECT NOTES COMPUT SC, V952, P2
   Allende E, 2014, ACM SIGPLAN NOTICES, V49, P251, DOI [10.1145/2660193.2660222, 10.1145/2714064.2660222]
   Allende E, 2014, ACM SIGPLAN NOTICES, V49, P27, DOI 10.1145/2508168.2508171
   [Anonymous], 2016, Feature-Oriented Software Product Lines
   Bauman S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133878
   Bierman G, 2010, LECT NOTES COMPUT SC, V6183, P76, DOI 10.1007/978-3-642-14107-2_5
   Bolz C. F., 2009, ICOOOLPS, P18, DOI DOI 10.1145/1565824.1565827
   Bolz Carl Friedrich, 2011, P 6 WORKSH IMPL COMP, P1, DOI [10.1145/2069172.2069181, DOI 10.1145/2069172.2069181]
   Campora JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236793
   Campora JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158103
   Campora John Peter, 2023, Type-based Gradual Typing Performance Optimization
   CARTWRIGHT R, 1991, SIGPLAN NOTICES, V26, P278, DOI 10.1145/113446.113469
   Carvalho Tiago, 2015, P 18 INT WORKSH SOFT, P3, DOI [10.1145/2764967.2764973, DOI 10.1145/2764967.2764973]
   Chambers Craig David, 1992, Ph. D. Dissertation.
   Chen S, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2518190
   Chen S, 2012, ACM SIGPLAN NOTICES, V47, P29, DOI 10.1145/2398856.2364535
   Consel C., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P145, DOI 10.1145/237721.237767
   COOPER KD, 1992, PROCEEDINGS OF THE 1992 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P96, DOI 10.1109/ICCL.1992.185472
   DEAN J, 1995, SIGPLAN NOTICES, V30, P93
   Erwig M, 2011, ACM T SOFTW ENG METH, V21, DOI 10.1145/2063239.2063245
   Feltey D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276503
   Gal A, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P465, DOI 10.1145/1542476.1542528
   Garcia R, 2015, ACM SIGPLAN NOTICES, V50, P303, DOI [10.1145/2775051.2676992, 10.1145/2676726.2676992]
   Garcia R, 2013, ACM SIGPLAN NOTICES, V48, P417, DOI [10.1145/2544174.2500603, 10.1145/2500365.2500603]
   Greenman B, 2019, J FUNCT PROGRAM, V29, DOI 10.1017/S0956796818000217
   Greenman B, 2018, PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'18), P30, DOI 10.1145/3162066
   Greenman Ben, 2018, P ACM PROGR LANG, DOI DOI 10.1145/3236766
   HENGLEIN F, 1994, SCI COMPUT PROGRAM, V22, P197, DOI 10.1016/0167-6423(94)00004-2
   Herman David, 2010, Higher-Order and Symbolic Computation, V23, P59, DOI 10.1007/s10990-011-9066-z
   Huang J, 2017, TWENTY-SECOND INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXII), P709, DOI 10.1145/3037697.3037743
   Kedlaya MN, 2014, ACM SIGPLAN NOTICES, V49, P37, DOI 10.1145/2508168.2508177
   Kelsey K, 2009, INT SYM CODE GENER, P157, DOI 10.1109/CGO.2009.18
   Khan MA, 2008, LECT NOTES COMPUT SC, V5234, P308, DOI 10.1007/978-3-540-85261-2_21
   Kogan A, 2012, ACM SIGPLAN NOTICES, V47, P141, DOI 10.1145/2370036.2145835
   Kuhlenschmidt A, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P517, DOI 10.1145/3314221.3314627
   McNamee D, 2001, ACM T COMPUT SYST, V19, P217, DOI 10.1145/377769.377778
   Meunier P, 2006, ACM SIGPLAN NOTICES, V41, P218, DOI 10.1145/1111320.1111057
   Miyazaki Y, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290331
   Moock C., 2004, Essential ActionScript 2.0
   Moy C, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434334
   Muehlboeck F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133880
   Nguyen PC, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158139
   Nguyen PC, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P139, DOI 10.1145/2628136.2628156
   Ortin F, 2019, KNOWL-BASED SYST, V179, P145, DOI 10.1016/j.knosys.2019.05.013
   Poletto M, 1999, ACM T PROGR LANG SYS, V21, P324, DOI 10.1145/316686.316697
   Rastogi A, 2015, ACM SIGPLAN NOTICES, V50, P167, DOI [10.1145/2775051.2676971, 10.1145/2676726.2676971]
   Rastogi A, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P481
   Richards G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133879
   Richards Gregor., 2015, Proc. European Conference on Object-Oriented Programming, P76, DOI DOI 10.4230/LIPICS.ECOOP.2015.76
   Siek J, 2015, ACM SIGPLAN NOTICES, V50, P425, DOI [10.1145/2813885.2737968, 10.1145/2737924.2737968]
   Siek JG, 2015, LECT NOTES COMPUT SC, V9032, P432, DOI 10.1007/978-3-662-46669-8_18
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   Taha Walid, 2006, Scheme and Functional Programming Workshop, V6, P81
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Vitousek MM, 2019, PROCEEDINGS OF THE 15TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES (DLS '19), P28, DOI 10.1145/3359619.3359742
   Vitousek MM, 2017, ACM SIGPLAN NOTICES, V52, P762, DOI 10.1145/3093333.3009849
   Vitousek MM, 2015, ACM SIGPLAN NOTICES, V50, P45, DOI 10.1145/2661088.2661101
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Xu W, 2004, 13TH INTERNATIONAL CONFERENCE ON PARALLEL ARCHITECTURE AND COMPILATION TECHNIQUES, PROCEEDINGS, P189
NR 61
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 89
DI 10.1145/3632931
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400090
OA gold
DA 2024-08-05
ER

PT J
AU Cousot, P
AF Cousot, Patrick
TI Calculational Design of [In]Correctness Transformational Program Logics
   by Abstract Interpretation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program logic; transformer; semantics; correctness; incorrectness;
   termination; nontermination; abstract interpretation
ID HOARE LOGIC; PROOF; COMPLETENESS; FRAMEWORK; SYSTEM; RULE
AB We study transformational program logics for correctness and incorrectness that we extend to explicitly handle both termination and nontermination. We show that the logics are abstract interpretations of the right image transformer for a natural relational semantics covering both finite and infinite executions. This understanding of logics as abstractions of a semantics facilitates their comparisons through their respective abstractions of the semantics (rather that the much more difficult comparison through their formal proof systems). More importantly, the formalization provides a calculational method for constructively designing the sound and complete formal proof system by abstraction of the semantics. As an example, we extend Hoare logic to cover all possible behaviors of nondeterministic programs and design a new precondition (in)correctness logic.
C1 [Cousot, Patrick] NYU, New York, NY 10003 USA.
C3 New York University
RP Cousot, P (corresponding author), NYU, New York, NY 10003 USA.
EM pcousot@cims.nyu.edu
CR [Anonymous], 1969, Machine intelligence
   [Anonymous], 1977, Studies in Logic and the Foundations of Mathematics, DOI [DOI 10.1016/S0049-237X, DOI 10.1016/S0049-237X(08)71120-0, 10.1016/S0049-237X(08)71120-0]
   [Anonymous], 1923, Acta Scientiarum Mathematicarum (Szeged)
   APT KR, 1984, THEOR COMPUT SCI, V28, P83, DOI 10.1016/0304-3975(83)90066-X
   APT KR, 1981, ACM T PROGR LANG SYS, V3, P431, DOI 10.1145/357146.357150
   APT KR, 1986, J ACM, V33, P724, DOI 10.1145/6490.6494
   Apt KR, 2019, FORM ASP COMPUT, V31, P751, DOI 10.1007/s00165-019-00501-3
   Apt Krzysztof R., 2021, Theories of Programming, P41, DOI [10.1145/3477355.3477359, DOI 10.1145/3477355.3477359]
   Asadi A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P772, DOI 10.1145/3453483.3454076
   Ascari F, 2024, Arxiv, DOI [arXiv:2310.18156, 10.48550/arXiv.2310.18156]
   Ascari F, 2022, LECT NOTES COMPUT SC, V13242, P21, DOI 10.1007/978-3-030-99253-8_2
   Avron A., 1992, Journal of Automated Reasoning, V9, P309, DOI 10.1007/BF00245294
   Ball T, 2005, LECT NOTES COMPUT SC, V3576, P67
   BERGMANN M, 1977, REV METAPHYS, V31, P61
   Blass A., 2000, Bulletin of the European Association for Theoretical Computer Science, P82
   Bruni R, 2023, J ACM, V70, DOI 10.1145/3582267
   Bubel Richard., 2023, EPiC Series in Computing,, V94, P73, DOI [10.29007/VDFD, DOI 10.29007/VDFD]
   Burstall Rod M., 1969, Machine Intelligence, V5, P79, DOI [10.2307/3612456, DOI 10.2307/3612456]
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   Consot P, 2011, LECT NOTES COMPUT SC, V6538, P150, DOI 10.1007/978-3-642-18275-4_12
   COOK SA, 1981, SIAM J COMPUT, V10, P612, DOI 10.1137/0210045
   COOK SA, 1978, SIAM J COMPUT, V7, P70, DOI 10.1137/0207005
   Cousot P, 1995, LECT NOTES COMPUT SC, V939, P293
   COUSOT P, 1979, PAC J MATH, V82, P43, DOI 10.2140/pjm.1979.82.43
   Cousot P., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P83, DOI 10.1145/143165.143184
   Cousot P, 2002, THEOR COMPUT SCI, V277, P47, DOI 10.1016/S0304-3975(00)00313-3
   Cousot P., 1981, Program flow analysis. Theory and applications, P303
   Cousot P., 1979, 6 ACM S PRINC PROGR, P269, DOI [DOI 10.1145/567752.567778, 10.1145/567752.567778]
   Cousot P., 1978, Proceedings of the 5th ACM SIGACT-SIGPLAN symposium on Principles of programming languages, P84, DOI [DOI 10.1145/512760.512770, 10.1145/512760.512770]
   Cousot P., 2021, PRINCIPLES ABSTRACT
   Cousot P., 1977, Conference Record of the Fourth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P238, DOI [10.1145/512950.512973, DOI 10.1145/512950.512973]
   Cousot P, 2024, P ACM PROGRAM LANG, V8, DOI 10.1145/3632849
   Cousot P, 2019, LECT NOTES COMPUT SC, V11822, P389, DOI 10.1007/978-3-030-32304-2_19
   Cousot P, 2014, ACM SIGPLAN NOTICES, V49, P3, DOI 10.1145/2535838.2537850
   Cousot P, 2013, LECT NOTES COMPUT SC, V7737, P128
   Cousot P, 2012, ACM SIGPLAN NOTICES, V47, P213, DOI 10.1145/2398857.2384633
   Cousot P, 2009, INFORM COMPUT, V207, P258, DOI 10.1016/j.ic.2008.03.025
   Cousot Patrick, 2019, Lecture Notes in Computer Science, DOI [10.1007/978-3-030-45260-5_1, DOI 10.1007/978-3-030-45260-5_1]
   Cousot Patrick, 1982, Tools & Notions for Program Construction: an Advanced Course, P75
   D'Silva V, 2015, LECT NOTES COMPUT SC, V9207, P271, DOI 10.1007/978-3-319-21668-3_16
   Dardinier Thibault., 2023, Arch. Formal Proofs, V2023
   de Vries E, 2011, LECT NOTES COMPUT SC, V7041, P155, DOI 10.1007/978-3-642-24690-6_12
   Denecke Klaus, 2003, Galois Connections and Applications, DOI [10.1007/978-1-4020-1898-5, DOI 10.1007/978-1-4020-1898-5]
   Dijkstra Edsger W., 1990, Predicate Calculus and Program Semantics, DOI DOI 10.1007/978-1-4612-3228-5
   Dijkstra Edsger W, 1982, Selected Writings on Computing: A Personal Perspective, P223
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Dijkstra W., 1976, A Discipline of Programming
   Donahue James E, 1976, Lecture Notes in Computer Science, V42, DOI [10.1007/BFB0025364, DOI 10.1007/BFB0025364]
   Feng Y, 2023, INFORM COMPUT, V294, DOI 10.1016/j.ic.2023.105077
   Ferrand G., 1993, Automated and Algorithmic Debugging. First International Workshop, AADEBUG '93 Proceedings, P40, DOI 10.1007/BFb0019399
   Floyd Robert W., 1967, Mathematical Aspects of Computer Science, V19, P19
   Gotsman A, 2011, ELECTRON NOTES THEOR, V276, P171, DOI 10.1016/j.entcs.2011.09.021
   Gratzer G., 1998, General Lattice Theory
   Harel David, 1979, Lecture Notes in Computer Science, V68, DOI DOI 10.1007/3-540-09237-4
   HARPER R, 1993, J ACM, V40, P143, DOI 10.1145/138027.138060
   Hilbert David., 1938, Grundzuge der theoretischen Logik, DOI [10.1007/978-3-662-41928-1, DOI 10.1007/978-3-662-41928-1]
   Hilbert David, 1958, Principles of Mathematical Logic, V6
   HOARE CAR, 1978, J ACM, V25, P461, DOI 10.1145/322077.322088
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   Kim J, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571216
   Knuth D.E., 1997, Fundamental algorithms addison-wesley, V1
   Le Berre Francois, 1996, APPIA GULPPRODE, P379
   Leroy X, 2006, LECT NOTES COMPUT SC, V3924, P54
   Lloyd John W, 1995, Machine Intelligence, V15, P341, DOI [10.1093/oso/9780198538677.003.0019, DOI 10.1093/OSO/9780198538677.003.0019]
   LUCKHAM DC, 1977, ACTA INFORM, V8, P21
   Maksimovic Petar, 2023, 37 EUROPEAN C OBJECT, V19, P1, DOI [10.4230/LIPIcs.ECOOP.2023.19, DOI 10.4230/LIPICS.ECOOP.2023.19]
   Manna Z., 1974, Acta Informatica, V3, P243, DOI 10.1007/BF00288637
   Manna Z., 1971, Journal of Computer and System Sciences, P239, DOI 10.1016/S0022-0000(71)80035-1
   Milanese M, 2022, LECT NOTES COMPUT SC, V13790, P350, DOI 10.1007/978-3-031-22308-2_16
   MILNER R, 1991, THEOR COMPUT SCI, V87, P209, DOI 10.1016/0304-3975(91)90033-X
   Miné A, 2014, SCI COMPUT PROGRAM, V93, P154, DOI 10.1016/j.scico.2013.09.014
   Möller B, 2021, LECT NOTES COMPUT SC, V13027, P325, DOI 10.1007/978-3-030-88701-8_20
   Monk James Donald, 1969, Introduction to set theory
   MORRIS FL, 1984, ANN HIST COMPUT, V6, P139
   MORRIS JH, 1977, COMMUN ACM, V20, P209, DOI 10.1145/359461.359466
   Murray Toby., 2020, Arch. Formal Proofs 2020, V2020
   Naur P., 1966, BIT Computer Science and Numerical Mathematics, V6, P310, DOI DOI 10.1007/BF01966091
   Naus Nico, 2023, Tests and Proofs: 17th International Conference, TAP 2023, Proceedings. Lecture Notes in Computer Science (14066), P21, DOI 10.1007/978-3-031-38828-6_2
   O'Hearn PW, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371078
   Park David Michael Ritchie, 1979, ABSTRACT SOFTWARE SP, V86, P504, DOI DOI 10.1007/3-540-10007-5_47
   Piecha T, 2019, STUD LOGICA, V107, P1, DOI 10.1007/s11225-018-9818-4
   Plotkin G. D., 1976, SIAM Journal on Computing, V5, P452, DOI 10.1137/0205035
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P3, DOI 10.1016/j.jlap.2004.03.009
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Plotkin Gordon D, 1979, Lecture Notes in Computer Science, V86, P527, DOI [10.1007/3-540-10007-5_48, DOI 10.1007/3-540-10007-5_48]
   Pnueli A., 1979, Semantics of Concurrent Computations, P1, DOI 10.1007/BFb0022460
   Poskitt CM, 2023, J LOG ALGEBR METHODS, V130, DOI 10.1016/j.jlamp.2022.100825
   Pratt V.R., 1976, FOCS 76, P109
   Le QL, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527325
   Raad A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498695
   Raad A, 2020, LECT NOTES COMPUT SC, V12225, P225, DOI 10.1007/978-3-030-53291-8_14
   Raad Azalea, 2023, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V25, P1, DOI [10.4230/LIPICS.CONCUR.2023.25, DOI 10.4230/LIPICS.CONCUR.2023.25]
   Schmidt DA, 2007, ELECTRON NOTES THEOR, V173, P339, DOI 10.1016/j.entcs.2007.02.042
   Scott D.S., 1971, Technical Monograph PRG-6
   Shapiro E.Y., 1982, P 9 ACM SIGPLAN SIGA, P299
   SMYTH MB, 1978, J COMPUT SYST SCI, V16, P23, DOI 10.1016/0022-0000(78)90048-X
   SOKOLOWSKI S, 1977, ACTA INFORM, V9, P61, DOI 10.1007/BF00263765
   Svoboda V, 2016, ARGUMENTATION, V30, P263, DOI 10.1007/s10503-015-9375-1
   Tarski A., 1944, PHILOS PHENOMENOLOGI, V4, P341, DOI DOI 10.2307/2102968
   Tarski Alfred., 1955, PAC J MATH, V5, P285, DOI [10.2140/pjm.1955.5.285, DOI 10.2140/PJM.1955.5.285]
   Turing Alan, 1950, REPORT C HIGH SPEED, P67
   Urban Caterina, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P464, DOI 10.1007/978-3-662-46681-0_46
   Urban C, 2016, LECT NOTES COMPUT SC, V9636, P54, DOI 10.1007/978-3-662-49674-9_4
   Urban C, 2015, LECT NOTES COMPUT SC, V8931, P190
   Urban C, 2014, LECT NOTES COMPUT SC, V8410, P412
   Urban C, 2014, LECT NOTES COMPUT SC, V8723, P302, DOI 10.1007/978-3-319-10936-7_19
   Urban C, 2013, LECT NOTES COMPUT SC, V7935, P43, DOI 10.1007/978-3-642-38856-9_5
   Vanegue J, 2022, LECT NOTES COMPUT SC, V13790, P422, DOI 10.1007/978-3-031-22308-2_19
   Winskel G., 1993, The Formal Semantics of Programming Languages: An Introduction (Foundations of Computing)
   Yan P, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527316
   Zhang C, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498690
   Zhang LP, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527331
   Zilberstein N, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586045
NR 114
TC 1
Z9 1
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 7
DI 10.1145/3632849
PG 34
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400008
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Binder, D
   Skupin, I
   Süberkrüb, T
   Ostermann, K
AF Binder, David
   Skupin, Ingo
   Sueberkrueb, Tim
   Ostermann, Klaus
TI Deriving Dependently-Typed OOP from First Principles
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Dependent Types; Expression Problem; Defunctionalization; Codata Types
AB The expression problem describes how most types can easily be extended with new ways to produce the type or new ways to consume the type, but not both. When abstract syntax trees are defined as an algebraic data type, for example, they can easily be extended with new consumers, such as print or eval, but adding a new constructor requires the modification of all existing pattern matches. The expression problem is one way to elucidate the difference between functional or data-oriented programs (easily extendable by new consumers) and object-oriented programs (easily extendable by new producers). This difference between programs which are extensible by new producers or new consumers also exists for dependently typed programming, but with one core difference: Dependently-typed programming almost exclusively follows the functional programming model and not the object-oriented model, which leaves an interesting space in the programming language landscape unexplored. In this paper, we explore the field of dependently-typed object-oriented programming by deriving it from first principles using the principle of duality. That is, we do not extend an existing object-oriented formalism with dependent types in an ad-hoc fashion, but instead start from a familiar data-oriented language and derive its dual fragment by the systematic use of defunctionalization and refunctionalization. Our central contribution is a dependently typed calculus which contains two dual language fragments. We provide type- and semantics-preserving transformations between these two language fragments: defunctionalization and refunctionalization. We have implemented this language and these transformations and use this implementation to explain the various ways in which constructions in dependently typed programming can be explained as special instances of the general phenomenon of duality.
C1 [Binder, David; Skupin, Ingo; Ostermann, Klaus] Univ Tubingen, Dept Comp Sci, Sand 14, D-72076 Tubingen, Germany.
   [Sueberkrueb, Tim] IPAI, Aleph Alpha Res, Gren zhofer Weg 36, D-69123 Heidelberg, Germany.
C3 Eberhard Karls University of Tubingen
RP Binder, D (corresponding author), Univ Tubingen, Dept Comp Sci, Sand 14, D-72076 Tubingen, Germany.
EM david.binder@uni-tuebingen.de; skupin@informatik.uni-tuebingen.de;
   tim.sueberkrueb@aleph-alpha-ip.ai; klaus.ostermann@uni-tuebingen.de
OI Ostermann, Klaus/0000-0001-5294-5506; Binder, David/0000-0003-1272-0972
CR Abel A, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2480359.2429075
   Altenkirch Thorsten, 2006, Towards Observational Type Theory
   [Anonymous], 1980, Essays on Combinatory Logic, Lambda Calculus and Formalism
   Basold H, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P327, DOI 10.1145/2933575.2934514
   Basold Henning, 2018, Ph. D. Dissertation
   Berger U, 2018, LECT NOTES COMPUT SC, V11202, P34, DOI 10.1007/978-3-030-00389-0_4
   Binder David, 2024, Zenodo, DOI 10.5281/ZENODO.10779424
   Binder D, 2024, Arxiv, DOI [arXiv:2403.06707, 10.48550/arXiv.2403.06707, DOI 10.48550/ARXIV.2403.06707]
   Binder D, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371098
   Clouston R, 2016, LOG METH COMPUT SCI, V12, DOI 10.2168/LMCS-12(3:7)2016
   Cockx J, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P257, DOI 10.1145/2628136.2628139
   Cockx Jesper, 2017, Ph. D. Dissertation
   Cook WR, 2009, ACM SIGPLAN NOTICES, V44, P557, DOI 10.1145/1639949.1640133
   COOK WR, 1991, LECT NOTES COMPUT SC, V489, P151, DOI 10.1007/BFb0019443
   Coquand Thierry., 1992, P WORKSHOP TYPES PRO, P71
   Danvy O, 2009, SCI COMPUT PROGRAM, V74, P534, DOI 10.1016/j.scico.2007.10.007
   Danvy Olivier, 2001, Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming. PPDP'01, P162, DOI DOI 10.1145/773184.773202
   David Cristina, 2022, arXiv, DOI [10.48550/ARXIV.2204.10411, DOI 10.48550/ARXIV.2204.10411]
   Delaware B, 2013, ACM SIGPLAN NOTICES, V48, P319, DOI [10.1145/2544174.2500587, 10.1145/2500365.2500587]
   Delaware B, 2013, ACM SIGPLAN NOTICES, V48, P207, DOI 10.1145/2480359.2429094
   Delaware Benjamin James, 2013, Ph. D. Dissertation.
   Downen P, 2019, LECT NOTES COMPUT SC, V11423, P119, DOI 10.1007/978-3-030-17184-1_5
   Eisenberg Richard, 2016, Ph. D. Dissertation
   Eisenberg RA, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473569
   Eisenberg RA, 2012, ACM SIGPLAN NOTICES, V47, P117, DOI 10.1145/2430532.2364522
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Forster Y, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P186, DOI 10.1145/3372885.3373817
   Gamma E., 1995, DESIGN PATTERNS ELEM
   Garner R, 2009, ANN PURE APPL LOGIC, V160, P1, DOI 10.1016/j.apal.2008.12.003
   Geuvers H, 2001, LECT NOTES COMPUT SC, V2044, P166
   Geuvers Herman., 2014, TYPES 2014 M
   Gimenez Eduardo, 1996, Ph. D. Dissertation
   Girard Jean-Yves, 1972, Ph. D. Dissertation
   Goetz Brian., 2014, JSR 335: Lambda Expressions for the Java Programming Language
   Gundry Adam, 2013, Ph. D. Dissertation
   HAGINO T, 1989, J SYMB COMPUT, V8, P629, DOI 10.1016/S0747-7171(89)80065-3
   Hagino T, 2020, Arxiv, DOI [arXiv:2010.05167, 10.48550/arXiv.2010.05167, DOI 10.48550/ARXIV.2010.05167]
   HOFMANN M, 1994, IEEE S LOG, P208, DOI 10.1109/LICS.1994.316071
   Hofmann Martin, 1997, Extensional Constructs in Intensional Type Theory, P13, DOI DOI 10.1007/978-1-4471-0963-1_2
   Huang YL, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591241
   Hurkens A. J. C., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P266, DOI 10.1007/BFb0014058
   Jacobs B., 1996, Object orientation with parallelism and persistence, P83
   Keuchel Steven, 2013, WORKSH GEN PROGR BOS, P13, DOI [10.1145/2502488.2502491, DOI 10.1145/2502488.2502491]
   Koopman Pieter, 2014, P 26 2014 INT S IMPL, DOI [10.1145/2746325.2746330, DOI 10.1145/2746325.2746330]
   Lindley S, 2013, ACM SIGPLAN NOTICES, V48, P81, DOI 10.1145/2503778.2503786
   Molitor Richard, 2015, Master's thesis
   Nakano H, 2000, IEEE S LOG, P255, DOI 10.1109/LICS.2000.855774
   Ostermann Klaus, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P60, DOI 10.1007/978-3-319-89884-1_3
   Oury Nicolas., 2008, Message on the coqclub mailing list
   Peng Fu, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P224, DOI 10.1007/978-3-319-08918-8_16
   Pottier F., 2006, Higher-Order and Symbolic Computation, V19, P125, DOI 10.1007/s10990-006-8611-7
   Rendel T, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P269, DOI 10.1145/2784731.2784763
   Reynolds John C., 1972, ACM 72, V2, P717
   Schwaab Christopher, 2013, P 7 WORKSH PROGR LAN, P3, DOI [10.1145/2428116.2428120, DOI 10.1145/2428116.2428120]
   Setzer A, 2002, LECT NOTES COMPUT SC, V2646, P279
   Setzer A, 2007, TR FUNCT PROGRAM, V7, P91
   Setzer Anton, 2012, Logic, Epistemology, and the Unity of Science, V27, P351, DOI [10.1007/978-94-007-4435-6_16, DOI 10.1007/978-94-007-4435-6_16]
   Streicher Thomas, 1993, Investigations into Intensional Type Theory. Habilitationsschrift
   Swierstra W, 2008, J FUNCT PROGRAM, V18, P423, DOI 10.1017/S0956796808006758
   TENNANT N, 1982, DIALECTICA, V36, P265, DOI 10.1111/j.1746-8361.1982.tb00820.x
   Thibodeau D, 2016, ACM SIGPLAN NOTICES, V51, P351, DOI 10.1145/3022670.2951929
   Wadler Philip, 1998, The Expression Problem
   Weirich S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341705
   Weirich S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110275
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 65
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 129
DI 10.1145/3649846
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600036
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Frank, J
   Quiring, B
   Lampropoulos, L
AF Frank, Justin
   Quiring, Benjamin
   Lampropoulos, Leonidas
TI Generating Well-Typed Terms That Are Not "Useless"
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE test generation; property-based testing; well-typed lambda terms
ID BOLTZMANN SAMPLERS; CALCULUS
AB Random generation of well-typed terms lies at the core of effective random testing of compilers for functional languages. Existing techniques have had success following a top-down type-oriented approach to generation that makes choices locally, which suffers from an inherent limitation: the type of an expression is often generated independently from the expression itself. Such generation frequently yields functions with argument types that cannot be used to produce a result in a meaningful way, leaving those arguments unused. Such "use-less" functions can hinder both performance, as the argument generation code is dead but still needs to be compiled, and effectiveness, as a lot of interesting optimizations are tested less frequently.
   In this paper, we introduce a novel algorithm that is significantly more effective at generating functions that use their arguments. We formalize both the "local" and the "nonlocal" algorithms as step-relations in an extension of the simply-typed lambda calculus with type and arguments holes, showing how delaying the generation of types for subexpressions by allowing nonlocal generation steps leads to "useful" functions. We implement our algorithm demonstrating that it's much closer to real programs in terms of argument usage rate, and we replicate a case study from the literature that finds bugs in the strictness analyzer of GHC, with our approach finding bugs four times faster than the current state-of-the-art local approach.
C1 [Frank, Justin; Quiring, Benjamin; Lampropoulos, Leonidas] Univ Maryland, College Pk, MD 20742 USA.
C3 University System of Maryland; University of Maryland College Park
RP Frank, J (corresponding author), Univ Maryland, College Pk, MD 20742 USA.
EM jpfrank@umd.edu; bquiring@umd.edu; leonidas@umd.edu
OI Lampropoulos, Leonidas/0000-0003-0269-9815
FU NSF [2145649, 2107206]
FX We thank Jacob Prinz, Antal Spector-Zabusky, Chris Casinghino, and the
   anonymous reviewers (of both the paper and the artifact) for their
   helpful comments. This work was supported by NSF award #2107206,
   Efficient and Trustworthy Proof Engineering, and NSF award #2145649,
   CAREER: Fuzzing Formal Specifications (any opinions, findings and
   conclusions or recommendations expressed in this material are those of
   the authors and do not necessarily reflect the views of the NSF).
CR Barany G, 2018, LECT NOTES COMPUT SC, V10855, P112, DOI 10.1007/978-3-319-94460-9_7
   Bendkowski M, 2017, LECT NOTES COMPUT SC, V10137, P120, DOI 10.1007/978-3-319-51676-9_8
   Claessen K, 2015, J FUNCT PROGRAM, V25, DOI 10.1017/S0956796815000143
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   Duchon P, 2004, COMB PROBAB COMPUT, V13, P577, DOI 10.1017/S0963548304006315
   Duregård J, 2012, ACM SIGPLAN NOTICES, V47, P61, DOI 10.1145/2430532.2364515
   Feitosa SD, 2019, ELECTRON NOTES THEOR, V342, P3, DOI 10.1016/j.entcs.2019.04.002
   Feldt R, 2013, PROC INT SYMP SOFTW, P350, DOI 10.1109/ISSRE.2013.6698888
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2813885.2737977, 10.1145/2737924.2737977]
   Fetscher B, 2015, LECT NOTES COMPUT SC, V9032, P383, DOI 10.1007/978-3-662-46669-8_16
   FLAJOLET P, 1994, THEOR COMPUT SCI, V132, P1, DOI 10.1016/0304-3975(94)90226-7
   Frank Justin, 2023, Reproduction Package for Article 'Generating WellTyped Terms That Are Not "Useless, DOI [10.5281/zenodo.8423782, DOI 10.5281/ZENODO.8423782]
   Goldstein Harrison, 2021, Do Judge a Test by its Cover: Combining Combinatorial and Property-Based Testing
   Grygiel K, 2013, Arxiv, DOI arXiv:1210.2610
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Hartel P. H., 1996, Journal of Functional Programming, V6, P621, DOI 10.1017/S0956796800001891
   Hoang Tram, 2022, P ACM SIGPLAN INT C
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Kennedy AJ, 2012, J FUNCT PROGRAM, V22, P529, DOI 10.1017/S0956796812000263
   Lampropoulos L, 2017, ACM SIGPLAN NOTICES, V52, P26, DOI 10.1145/3156695.3122959
   Lampropoulos L, 2017, ACM SIGPLAN NOTICES, V52, P114, DOI 10.1145/3093333.3009868
   Lescanne P, 2014, Arxiv, DOI arXiv:1404.3875
   Li Liyi, 2022, P COMP SEC FDN S CSF
   MANN HB, 1947, ANN MATH STAT, V18, P50, DOI 10.1214/aoms/1177730491
   Midtgaard J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110259
   Osera PM, 2015, ACM SIGPLAN NOTICES, V50, P619, DOI [10.1145/2813885.2738007, 10.1145/2737924.2738007]
   Palka M.H., 2011, Proceeding of the 6th international workshop on Automation of software test, AST '11, P91
   Palka Michal H., 2014, Random Structured Test Data Generation for Black-Box Testing
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Quiring B, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547645
   Reich Jason S., 2012, 24 S IMPL APPL FUNCT
   Rocha Murilo Giacometti, 2019, Master's thesis
   Ruef Andrew, 2019, P S PRINC SEC TRUST
   Runciman C, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P37
   Shao Z, 2000, ACM T PROGR LANG SYS, V22, P129, DOI 10.1145/345099.345125
   Shirley Peter, 2020, Ray Tracing in One Weekend
   Tarau Paul, 2015, P TECHN COMM 31 INT
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
NR 38
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 77
DI 10.1145/3632919
PG 22
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400078
OA gold
DA 2024-08-05
ER

PT J
AU Patton, N
   Rahmani, K
   Missula, M
   Biswas, J
   Dillig, I
AF Patton, Noah
   Rahmani, Kia
   Missula, Meghana
   Biswas, Joydeep
   Dillig, Isil
TI Programming-by-Demonstration for Long-Horizon Robot Tasks
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Abstract Interpretation; Program Synthesis; Learning from Demonstrations
AB The goal of programmatic Learning from Demonstration (LfD) is to learn a policy in a programming language that can be used to control a robot's behavior from a set of user demonstrations. This paper presents a new programmatic LfD algorithm that targets long-horizon robot tasks which require synthesizing programs with complex control flow structures, including nested loops with multiple conditionals. Our proposed method first learns a program sketch that captures the target program's control flow and then completes this sketch using an LLM-guided search procedure that incorporates a novel technique for proving unrealizability of programming-by-demonstration problems. We have implemented our approach in a new tool called PROLEX and present the results of a comprehensive experimental evaluation on 120 benchmarks involving complex tasks and environments. We show that, given a 120 second time limit, prolex can find a program consistent with the demonstrations in 80% of the cases. Furthermore, for 81% of the tasks for which a solution is returned, prolex is able to find the ground truth program with just one demonstration. In comparison, CVC5, a syntax-guided synthesis tool, is only able to solve 25% of the cases even when given the ground truth program sketch, and an LLM-based approach, GPT-Synth, is unable to solve any of the tasks due to the environment complexity.
C1 [Patton, Noah; Rahmani, Kia; Missula, Meghana; Biswas, Joydeep; Dillig, Isil] Univ Texas Austin, Dept Comp Sci, Austin, TX 78712 USA.
C3 University of Texas System; University of Texas Austin
RP Patton, N (corresponding author), Univ Texas Austin, Dept Comp Sci, Austin, TX 78712 USA.
EM npatt@cs.utexas.edu; kiar@utexas.edu; meghanam@utexas.edu;
   joydeepb@utexas.edu; isil@cs.utexas.edu
OI Dillig, Isil/0000-0001-8006-1230; Biswas, Joydeep/0000-0002-1211-1731
FU NSF [1762299, 1918889, 1901376, 2046955, 2319471]; Google; Facebook;
   Amazon; Intel; RelationalAI fellowships
FX We would like to thank our anonymous reviewers for their helpful and
   insightful feedback. This work was supported in part by NSF Awards
   #1762299, #1918889, #1901376, #2046955, and #2319471, as well as Google,
   Facebook, Amazon, Intel, and RelationalAI fellowships.
CR Alur R, 2015, LECT NOTES COMPUT SC, V9207, P163, DOI 10.1007/978-3-319-21668-3_10
   Alur R, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P1, DOI 10.3233/978-1-61499-495-4-1
   Argall BD, 2008, 2008 IEEE/RSJ INTERNATIONAL CONFERENCE ON ROBOTS AND INTELLIGENT SYSTEMS, VOLS 1-3, CONFERENCE PROCEEDINGS, P399, DOI 10.1109/IROS.2008.4651020
   Argall BD, 2009, ROBOT AUTON SYST, V57, P469, DOI 10.1016/j.robot.2008.10.024
   Ashutosh K, 2023, PROC CVPR IEEE, P23066, DOI 10.1109/CVPR52729.2023.02209
   Bar-David Y., 2003, PODC 03, P305, DOI [10.1145/872035.872080, DOI 10.1145/872035.872080]
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Barthe G, 2013, ACM SIGPLAN NOTICES, V48, P123, DOI 10.1145/2517327.2442529
   Baumeister T, 2020, LECT NOTES COMPUT SC, V12302, P413, DOI 10.1007/978-3-030-59152-6_23
   BIERMANN AW, 1975, IEEE T COMPUT, VC 24, P122, DOI 10.1109/T-C.1975.224180
   Bloem R, 2012, J COMPUT SYST SCI, V78, P911, DOI 10.1016/j.jcss.2011.08.007
   Bornholt J, 2016, ACM SIGPLAN NOTICES, V51, P775, DOI 10.1145/2914770.2837666
   Bowers M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571234
   Cambronero J, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571226
   Chasins SE, 2018, UIST 2018: PROCEEDINGS OF THE 31ST ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P963, DOI 10.1145/3242587.3242661
   Chaudhuri S, 2021, FOUND TRENDS PROGRAM, V7, P158, DOI 10.1561/2500000049
   Chen M., 2021, arXiv, DOI DOI 10.48550/ARXIV.2107.03374
   Chen QC, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P328, DOI 10.1145/3453483.3454047
   Chen QC, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P487, DOI 10.1145/3385412.3385988
   Choi Wonhyuk, 2021, SPLASH Companion 2021: Companion Proceedings of the 2021 ACM SIGPLAN International Conference on Systems, Programming, Languages, and Applications: Software for Humanity, P3, DOI 10.1145/3484271.3484972
   Chung MJY, 2022, ACMIEEE INT CONF HUM, P727, DOI 10.1109/HRI53351.2022.9889630
   Cousot Patrick, 1977, P 4 ACM S PRINC PROG, P238, DOI [DOI 10.1145/512950.512973, 10.1145/512950.512973]
   Sosa-Ceron AD, 2022, ROBOTICS, V11, DOI 10.3390/robotics11060126
   Das R, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571249
   Devlin J, 2019, 2019 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES (NAACL HLT 2019), VOL. 1, P4171
   Dong R, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P152, DOI 10.1145/3519939.3523711
   Farzan A, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P244, DOI 10.1145/3519939.3523726
   Feng Y, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P420, DOI [10.1145/3192366.3192382, 10.1145/3296979.3192382]
   Feng Y, 2017, ACM SIGPLAN NOTICES, V52, P422, DOI [10.1145/3140587.3062351, 10.1145/3062341.3062351]
   Ferdowsifard K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485530
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2813885.2737977, 10.1145/2737924.2737977]
   Finkbeiner Bernd, 2013, International Journal on Software Tools for Technology Transfer, V15, P519, DOI 10.1007/s10009-012-0228-z
   Finkbeiner B, 2018, Arxiv, DOI arXiv:1803.10104
   Finkbeiner B, 2019, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON HASKELL (HASKELL '19), P162, DOI 10.1145/3331545.3342601
   Fox M, 2003, J ARTIF INTELL RES, V20, P61, DOI 10.1613/jair.1129
   French K, 2019, IEEE INT CONF ROBOT, P7784, DOI [10.1109/ICRA.2019.8794104, 10.1109/icra.2019.8794104]
   Ge Tianao, 2022, LCTES 2022: Proceedings of the 23rd ACM SIGPLAN/SIGBED International Conference on Languages, Compilers, and Tools for Embedded Systems, P99, DOI 10.1145/3519941.3535072
   Glanois C, 2022, Arxiv, DOI [arXiv:2112.13112, DOI 10.48550/ARXIV.2112.13112]
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P317, DOI 10.1145/1925844.1926423
   He KL, 2017, IEEE INT C INT ROBOT, P5326, DOI 10.1109/IROS.2017.8206426
   Heule S, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P710, DOI 10.1145/2786805.2786875
   Ho J, 2016, ADV NEUR IN, V29
   Holtz J., 2020, PROC C ROBOTLEARN, P1471
   Holtz J, 2021, IEEE INT C INT ROBOT, P6256, DOI 10.1109/IROS51168.2021.9636540
   Holtz J, 2018, PROCEEDINGS OF THE TWENTY-SEVENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P4905
   Holtz Jarrett, 2020, C ROBOT LEARNING
   Hu QP, 2019, LECT NOTES COMPUT SC, V11561, P335, DOI 10.1007/978-3-030-25540-4_18
   Huang Jiani, 2020, P 37 INT C MACHINE L, P4495
   Inala Jeevana Priya, 2020, P 34 INT C NEURAL IN
   iRobot, 2023, iRobot Home App.
   Jain N, 2022, PROC INT CONF SOFTW, P1219, DOI 10.1145/3510003.3510203
   Jha Susmit, 2010, Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering-Volume 1. ICSE'10, P215, DOI DOI 10.1145/1806799.1806833
   Ji RY, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586055
   Kalyan A, 2018, Arxiv, DOI [arXiv:1804.01186, 10.48550/ARXIV.1804.01186]
   Kim J, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571216
   Kim J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434311
   Kober J, 2013, INT J ROBOT RES, V32, P1238, DOI 10.1177/0278364913495721
   Krajna A., 2022, arXiv, DOI 10.48550/arXiv.2203.11547
   Krogmeier P, 2020, LECT NOTES COMPUT SC, V12225, P634, DOI 10.1007/978-3-030-53291-8_32
   Lau T, 2003, MACH LEARN, V53, P111, DOI 10.1023/A:1025671410623
   Lee Jin Joo, 2023, AAAI 2023 Spring Symposium Series
   Lee Michael, 2000, Programming language pragmatics.
   Lee M, 2017, ACM SIGPLAN NOTICES, V52, P70, DOI [10.1145/3093335.2993244, 10.1145/2993236.2993244]
   Li C, 2023, C ROBOT LEARNING, P80
   Li X, 2019, SCI ROBOT, V4, DOI 10.1126/scirobotics.aay6276
   Liang JCY, 2022, Arxiv, DOI arXiv:2209.07753
   Lingelbach M., 2022, C ROBOT LEARNING, P477
   Lipton Z. C, 2018, Queue, V16, P31, DOI DOI 10.1145/3236386.3241340
   Liu PF, 2023, ACM COMPUT SURV, V55, DOI 10.1145/3560815
   Ly AO, 2021, IEEE T INTELL VEHICL, V6, P195, DOI 10.1109/TIV.2020.3002505
   Madhusudan P., 2018, 27 EACSL ANN C COMPU, V119, DOI [10.4230/LIPIcs.CSL.2018.31, DOI 10.4230/LIPICS.CSL.2018.31]
   Mahowald K, 2023, Arxiv, DOI [arXiv:2301.06627, DOI 10.48550/ARXIV.2301.06627]
   Mao J., 2019, INT C LEARNING REPRE
   Mariano B, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527315
   Mechtaev S, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P389, DOI 10.1145/3236024.3236049
   Miltner A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498682
   Murali V, 2018, Arxiv, DOI arXiv:1703.05698
   Nandi C, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P31, DOI 10.1145/3385412.3386012
   Nazarczuk Michal, 2020, P ASIAN C COMPUTER V
   Neider Daniel, 2014, Applications of automata learning in verification and synthesis
   Newcomb JulieL., 2019, Using human-in-the-loop synthesis to author functional reactive programs
   Niekum S, 2015, INT J ROBOT RES, V34, P131, DOI 10.1177/0278364914554471
   Nordmann Kore, 2014, XML-Schema-learner.
   Nye M, 2019, Arxiv, DOI [arXiv:1902.06349, 10.48550/ARXIV.1902.06349]
   Pailoor S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P574, DOI 10.1145/3453483.3454063
   Pan SJ, 2010, IEEE T KNOWL DATA EN, V22, P1345, DOI 10.1109/TKDE.2009.191
   Patton N, 2023, Arxiv, DOI arXiv:2305.03129
   Patton Noah, 2023, Programming by Demonstration for Long-Horizon Robot Tasks, DOI [10.5281/zenodo.8423505, DOI 10.5281/ZENODO.8423505]
   PNUELI A, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P179, DOI 10.1145/75277.75293
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Porfirio D, 2019, PROCEEDINGS OF THE 32ND ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY (UIST 2019), P479, DOI 10.1145/3332165.3347957
   Porfirio David, 2023, P 2023 ACM IEEE INT, P584, DOI [10.1145/3568162.3576991.URL, DOI 10.1145/3568162.3576991, 10.1145/3568162.3576991]
   Pu K, 2022, PROCEEDINGS OF THE 35TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, UIST 2022, DOI 10.1145/3526113.3545691
   Rahmani K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485535
   Rocha RCO, 2022, INT SYM CODE GENER, P217, DOI 10.1109/CGO53902.2022.9741256
   Rosinol A, 2021, INT J ROBOT RES, V40, P1510, DOI 10.1177/02783649211056674
   Rusu A. A., 2017, C ROBOT LEARNING, P262
   Shi KS, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290386
   Sikand KS, 2021, IEEE INT C INT ROBOT, P406, DOI 10.1109/IROS51168.2021.9635830
   Sisco ZD, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591237
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Solar-Lezama A, 2009, LECT NOTES COMPUT SC, V5904, P4, DOI 10.1007/978-3-642-10672-9_3
   Solar-Lezama Armando, 2008, THESIS
   Sünderhauf N, 2018, INT J ROBOT RES, V37, P405, DOI 10.1177/0278364918770733
   Sun JJ, 2022, Arxiv, DOI arXiv:2210.05050
   Taylor ME, 2009, J MACH LEARN RES, V10, P1633
   Tiwari A, 2015, LECT NOTES ARTIF INT, V9195, P482, DOI 10.1007/978-3-319-21401-6_33
   Topin N, 2019, AAAI CONF ARTIF INTE, P2514
   Vechev M, 2010, ACM SIGPLAN NOTICES, V45, P327, DOI 10.1145/1707801.1706338
   Verbruggen G, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485477
   Verma A, 2019, Arxiv, DOI [arXiv:1804.02477, 10.48550/arXiv.1804.02477]
   Verma Abhinav, 2019, Imitation-Projected Programmatic Reinforcement Learning.
   Wang YP, 2020, PROC VLDB ENDOW, V13, P1006, DOI 10.14778/3384345.3384350
   Wang YP, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P286, DOI 10.1145/3314221.3314588
   White J, 2023, Arxiv, DOI [arXiv:2302.11382, DOI 10.48550/ARXIV.2302.11382, 10.48550/arXiv.2302.11382]
   Wilkins David, 1998, Technical Report
   Witt Jonas, 2023, arXiv, DOI [10.48550/ARXIV.2301.03094, DOI 10.48550/ARXIV.2301.03094]
   Wolf T, 2020, PROCEEDINGS OF THE 2020 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING: SYSTEM DEMONSTRATIONS, P38
   Xiao Xuesu, 2021, arXiv, DOI [10.48550/ARXIV.2102.12667, DOI 10.48550/ARXIV.2102.12667]
   Xin J, 2024, Arxiv, DOI [arXiv:2303.01440, 10.48550/ARXIV.2303.01440, DOI 10.48550/ARXIV.2303.01440]
   XinyuWang Isil Dillig, 2018, POPL
   Yaghmazadeh N, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133887
   Ye Xi, 2020, arXiv
   YuepengWang XinyuWang, 2018, PACMPL, V2
   Zhan E, 2022, Arxiv, DOI arXiv:2107.13132
   Ziebart B. D., 2008, AAAI, V8, P1433, DOI DOI 10.1007/978-3-662-49390-8_64
NR 127
TC 1
Z9 1
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 18
DI 10.1145/3632860
PG 34
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400019
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Wei, GN
   Bracevac, O
   Jia, SL
   Bao, YY
   Rompf, T
AF Wei, Guannan
   Bracevac, Oliver
   Jia, Songlin
   Bao, Yuyan
   Rompf, Tiark
TI Polymorphic Reachability Types: Tracking Freshness, Aliasing, and
   Separation in Higher-Order Generic Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type systems; reachability types; polymorphism; aliasing; effects
ID OWNERSHIP TYPES; INTERFERENCE; SYSTEM
AB Fueled by the success of Rust, many programming languages are adding substructural features to their type systems. The promise of tracking properties such as lifetimes and sharing is tremendous, not just for low-level memory management, but also for controlling higher-level resources and capabilities. But so are the difficulties in adapting successful techniques from Rust to higher-level languages, where they need to interact with other advanced features, especially various flavors of functional and type-level abstraction. What would it take to bring full-fidelity reasoning about lifetimes and sharing to mainstream languages? Reachability types are a recent proposal that has shown promise in scaling to higher-order but monomorphic settings, tracking aliasing and separation on top of a substrate inspired by separation logic. However, naive extensions on top of the prior reachability type system lambda* with type polymorphism and/or precise reachability polymorphism are unsound, making lambda* unsuitable for adoption in real languages. Combining reachability and type polymorphism that is precise, sound, and parametric remains an open challenge.
   This paper presents a rethinking of the design of reachability tracking and proposes new polymorphic reachability type systems. We introduce a new freshness qualifier to indicate variables whose reachability sets may grow during evaluation steps. The new system tracks variables reachable in a single step and computes transitive closures only when necessary, thus preserving chains of reachability over known variables that can be refined using substitution. These ideas yield the simply-typed lambda(lozenge)-calculus with precise lightweight, i.e., quantifier-free, reachability polymorphism, and the F-<:(lozenge)-calculus with bounded parametric polymorphism over types and reachability qualifiers, paving the way for making true tracking of lifetimes and sharing practical for mainstream languages. We prove type soundness and the preservation of separation property in Coq. We discuss various applications (e.g., safe capability programming), possible effect system extensions, and compare our system with Scala's capture types.
C1 [Wei, Guannan; Bracevac, Oliver; Jia, Songlin; Rompf, Tiark] Purdue Univ, W Lafayette, IN 47907 USA.
   [Bracevac, Oliver] Galois Inc, Portland, OR USA.
   [Bao, Yuyan] Augusta Univ, Augusta, GA USA.
C3 Purdue University System; Purdue University; Galois, Inc.; University
   System of Georgia; Augusta University
RP Wei, GN (corresponding author), Purdue Univ, W Lafayette, IN 47907 USA.
EM guannanwei@purdue.edu; oliver@galois.com; jia137@purdue.edu;
   yubao@augusta.edu; tiark@purdue.edu
OI Rompf, Tiark/0000-0002-2068-3238; Wei, Guannan/0000-0002-3150-2033; Bao,
   Yuyan/0000-0002-3832-3134
FU NSF [1553471, 1564207, 1918483, 1910216]; DOE [DE-SC0018050]
FX We thank Siyuan He and Haotian Deng for related contributions to
   reachability types, and the anonymous reviewers for their insightful
   comments and suggestions. This work was supported in part by NSF awards
   1553471, 1564207, 1918483, 1910216, DOE award DE-SC0018050, as well as
   gifts from Meta, Google, Microsoft, and VMware.
CR Ahmed A, 2007, FUND INFORM, V77, P397
   Aldrich J., 2009, OOPSLA COMPANION, P1015, DOI [DOI 10.1145/1639950.1640073, DOI 10.1145/1639950]
   AMADIO RM, 1993, ACM T PROGR LANG SYS, V15, P575, DOI 10.1145/155183.155231
   Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   Balabonski T, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2837022
   Bao YY, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485516
   Barendsen E., 1996, Mathematical Structures in Computer Science, V6, P579
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Boruch-Gruszecki A, 2023, ACM T PROGR LANG SYS, V45, DOI 10.1145/3618003
   Boruch-Gruszecki Aleksander, 2021, arXiv
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Bracevac O, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3622813
   Brachthäuser JI, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527320
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Cameron N, 2009, LECT NOTES COMPUT SC, V5502, P128, DOI 10.1007/978-3-642-00590-9_10
   Cameron Nicholas Robert, 2009, Ph. D. Dissertation
   CARDELLI L, 1994, INFORM COMPUT, V109, P4, DOI 10.1006/inco.1994.1013
   Clarke Dave, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P15, DOI 10.1007/978-3-642-36946-9_3
   Clarke D. G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P53
   Clarke David, 2003, Ph. D. Dissertation
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Clebsch Sylvan, 2015, ICOOOLPS 2015
   Collinson M, 2008, MATH STRUCT COMP SCI, V18, P1091, DOI 10.1017/S0960129508007159
   Curien Pierre-Louis, 1992, MATH STRUCT COMP SCI, V2, p55S91, DOI DOI 10.1017/S0960129500001134
   de Vries E, 2008, LECT NOTES COMPUT SC, V5083, P201, DOI 10.1007/978-3-540-85373-2_12
   de Vries Edsko, 2006, Lecture Notes in Computer Science, V4449, P181, DOI [10.1007/978-3-540-74130-5\\_11, DOI 10.1007/978-3-540-74130-5]
   Dietl W, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2049706.2049709
   Dunfield J, 2021, ACM COMPUT SURV, V54, DOI 10.1145/3450952
   Garcia R, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2629609
   Gordon CS, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3450272
   Gordon Colin S., 2020, LIPICS, V166, P101
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   HOGG J, 1991, OOPSLA 91 CONFERENCE PROCEEDINGS : OBJECT-ORIENTED PROGRAMMING SYSTEMS, LANGUAGES, AND APPLICATIONS, P271, DOI 10.1145/118014.117975
   Jang J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498700
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Kiselyov O, 2016, LECT NOTES COMPUT SC, V10017, P271, DOI 10.1007/978-3-319-47958-3_15
   Marshall D, 2022, LECT NOTES COMPUT SC, V13240, P346, DOI 10.1007/978-3-030-99336-8_13
   Matsakis ND., 2014, Ada Lett, V34, P103, DOI [10.1145/2663171.2663188, DOI 10.1145/2663171.2663188, 10.1145/2692956.2663188]
   Muller Peter, 2000, ECOOP WORKSH FORM TE
   Naden K, 2012, ACM SIGPLAN NOTICES, V47, P557, DOI 10.1145/2103621.2103722
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn P, 2003, J FUNCT PROGRAM, V13, P747, DOI 10.1017/S0956796802004495
   O'Hearn PW, 1999, THEOR COMPUT SCI, V228, P211, DOI 10.1016/S0304-3975(98)00359-4
   Odersky M, 2001, ACM SIGPLAN NOTICES, V36, P41, DOI 10.1145/373243.360207
   Odersky Martin, 2022, arXiv
   Odersky Martin, 2023, Scala 3 Reference-Capture Checking
   Odersky Martin, 2021, SCALA SPLASH, P1
   Osvald L, 2016, ACM SIGPLAN NOTICES, V51, P234, DOI 10.1145/3022671.2984009
   Parreaux L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158101
   Pierce B. C., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P305, DOI 10.1145/143165.143228
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pierce Benjamin C., 2002, Types and Programming Languages
   Potanin A, 2006, ACM SIGPLAN NOTICES, V41, P311, DOI 10.1145/1167515.1167500
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Reynolds John C., 1978, POPL, P39, DOI DOI 10.1145/512760.512766
   Reynolds John C., 1988, Tech Report, CMU-CS-88-159
   Reynolds John C., 1989, Lecture Notes in Computer Science, V372, P704, DOI DOI 10.1007/BFB0035793
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Scherer Gabriel, 2013, Logic for Programming, Artificial Intelligence and Reasoning. 19th International Conference, LPAR-19, Proceedings: LNCS 8312, P710, DOI 10.1007/978-3-642-45221-5_47
   Siek Jeremy G., 2012, arXiv
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   WADLER P, 1990, PROGRAMMING CONCEPTS AND METHODS, P561
   Wei Guannan, 2023, arXiv
   Xhebraj Anxhelo, 2022, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V15, P151
   Zhao T, 2008, SCI COMPUT PROGRAM, V71, P213, DOI 10.1016/j.scico.2008.04.001
   Zhou LT, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571241
   Zhou YD, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3549537
NR 71
TC 2
Z9 2
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 14
DI 10.1145/3632856
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400015
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Clement, B
   Rémy, D
   Radanne, G
AF Clement, Blaudeau
   Remy, Didier
   Radanne, Gabriel
TI Fulfilling OCaml Modules with Transparency
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE existential types; signature avoidance; applicative functors; F-omega;
   ML
AB ML modules come as an additional layer on top of a core language to offer large-scale notions of composition and abstraction. They largely contributed to the success of OCAML and SML. While modules are easy to write for common cases, their advanced use may become tricky. Additionally, despite a long line of works, their meta-theory remains difficult to comprehend, with involved soundness proofs. In fact, the module layer of OCAML does not currently have a formal specification and its implementation has some surprising behaviors. Building on previous translations from ML modules to F-omega, we propose a type system, called M-omega, that covers a large subset of OCAML modules, including both applicative and generative functors, and extended with transparent ascription. This system produces signatures in an OCAML-like syntax extended with F-omega quantifiers. We provide a reverse translation from M-omega signatures to path-based source signatures along with a characterization of signature avoidance cases, making M-omega signatures well suited to serve as a new internal representation for a typechecker. The soundness of the type system is shown by elaboration in F-omega. We improve over previous encodings of sealing within applicative functors, by the introduction of transparent existential types, a weaker form of existential types that can be lifted out of universal and arrow types. This shines a new light on the form of abstraction provided by applicative functors and brings their treatment much closer to those of generative functors.
C1 [Clement, Blaudeau; Remy, Didier] Inria, Paris, France.
   [Clement, Blaudeau] Univ Paris Cite, Paris, France.
   [Radanne, Gabriel] Inria, Lyon, France.
C3 Inria; Universite Paris Cite; Inria
RP Clement, B (corresponding author), Inria, Paris, France.; Clement, B (corresponding author), Univ Paris Cite, Paris, France.
EM clement.blaudeau@inria.fr; didier.remy@inria.fr;
   gabriel.radanne@inria.fr
CR Biswas S. K., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P154, DOI 10.1145/199448.199478
   Blaudeau Clement, 2024, Ful~lling OCaml modules with transparency (supplementary material), DOI [10.1145/3649818, DOI 10.1145/3649818]
   Crary K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290323
   Crary K, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000222
   Crary K, 2017, ACM SIGPLAN NOTICES, V52, P100, DOI 10.1145/3093333.3009892
   Crary Karl, 2005, Ph. D. Dissertation, Patent No. AAI3166274
   Dreyer D, 2003, ACM SIGPLAN NOTICES, V38, P236, DOI 10.1145/640128.604151
   Dreyer D, 2007, J FUNCT PROGRAM, V17, P433, DOI 10.1017/S0956796807006429
   Guarrigue Jacques, 2014, ML FAMILY OCAML USER
   HARPER R, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P341, DOI 10.1145/96709.96744
   Harper R., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P123, DOI 10.1145/174675.176927
   Leroy X., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P109, DOI 10.1145/174675.176926
   Leroy X., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P142, DOI 10.1145/199448.199476
   Leroy X., 2000, Journal of Functional Programming, V10, P269, DOI 10.1017/S0956796800003683
   MacQueen DavidB., 1986, P 13 ACM SIGPLAN S P, P277, DOI DOI 10.1145/512644.512670
   Madhavapeddy A, 2013, ACM SIGPLAN NOTICES, V48, P461, DOI 10.1145/2499368.2451167
   Mitchell John C., 1985, POPL '85, P37, DOI DOI 10.1145/318593.318606
   Montagu B, 2009, ACM SIGPLAN NOTICES, V44, P354, DOI 10.1145/1594834.1480926
   Montagu Benoit, 2010, PhD Thesis
   Radanne G, 2019, Arxiv, DOI arXiv:1905.02529
   Rossberg A, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000205
   Rossberg A, 2014, J FUNCT PROGRAM, V24, P529, DOI 10.1017/S0956796814000264
   Rossberg A, 2013, ACM T PROGR LANG SYS, V35, DOI 10.1145/2450136.2450137
   Russo C. V., 2000, Nordic Journal of Computing, V7, P348
   Russo Claudio V., 2004, Electronic Notes in Theoretical Computer Science, V60, P3, DOI [10.1016/S1571-0661(05)82621-0, DOI 10.1016/S1571-0661(05)82621-0]
   Shan Chung-Chieh, 2004, Higher-order modules in System ~ l and Haskell
   Sieczkowski F, 2024, P ACM PROGRAM LANG, V8, DOI 10.1145/3632866
   White L, 2015, ELECTRON P THEOR COM, P22, DOI 10.4204/EPTCS.198.2
   Zhong S, 1999, ACM SIGPLAN NOTICES, V34, P220, DOI 10.1145/317765.317801
NR 29
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 101
DI 10.1145/3649818
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600008
OA gold
DA 2024-08-05
ER

PT J
AU Majumdar, R
   Sathiyanarayana, VR
AF Majumdar, Rupak
   Sathiyanarayana, V. R.
TI Positive Almost-Sure Termination: Complexity and Proof Rules
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programs; demonic non-determinism; positive almost-sure
   termination; computational complexity; program reasoning
AB We study the recursion-theoretic complexity of Positive Almost-Sure Termination (PAST) in an imperative programming language with rational variables, bounded nondeterministic choice, and discrete probabilistic choice. A program terminates positive almost-surely if, for every scheduler, the program terminates almost-surely and the expected runtime to termination is finite. We show that PAST for our language is complete for the (lightface) co-analytic sets (Pi(1)(1)-complete). This is in contrast to the related notions of Almost-Sure Termination (AST) and Bounded Termination (BAST), both of which are arithmetical (Pi(0)(2) - and Sigma(0)(2)-complete respectively).
   Our upper bound implies an effective procedure to reduce reasoning about probabilistic termination to non-probabilistic fair termination in a model with bounded nondeterminism, and to simple program termination in models with unbounded nondeterminism. Our lower bound shows the opposite: for every program with unbounded nondeterministic choice, there is an effectively computable probabilistic program with bounded choice such that the original program is terminating if, and only if, the transformed program is PAST.
   We show that every program has an effectively computable normal form, in which each probabilistic choice either continues or terminates execution immediately, each with probability 1/2. For normal form programs, we provide a sound and complete proof rule for PAST. Our proof rule uses transfinite ordinals. We show that reasoning about PAST requires transfinite ordinals up to omega(CK)(1); thus, existing techniques for probabilistic termination based on ranking supermartingales that map program states to reals do not suffice to reason about PAST.
C1 [Majumdar, Rupak; Sathiyanarayana, V. R.] Max Planck Inst Software Syst MPI SWS, Paul Ehrlich Str,Bldg G26, D-67663 Kaiserslautern, Germany.
C3 Max Planck Society
RP Majumdar, R (corresponding author), Max Planck Inst Software Syst MPI SWS, Paul Ehrlich Str,Bldg G26, D-67663 Kaiserslautern, Germany.
EM rupak@mpi-sws.org; sramesh@mpi-sws.org
OI Venkatesan Ramesh, Sathiyanarayana/0009-0006-5187-5415
FU Deutsche Forschungsgemeinschaft [389792660 TRR 248-CPEC]
FX We thank the reviewers for their helpful comments. This research was
   sponsored in part by the Deutsche Forschungsgemeinschaft project
   389792660 TRR 248-CPEC (see https://perspicuouscomputing.science).
CR Alur R, 1998, ACM T PROGR LANG SYS, V20, P1171, DOI 10.1145/295656.295659
   [Anonymous], 1974, Mathematical Theory of Computation
   [Anonymous], 1987, Theory of recursive functions and effective computability
   APT KR, 1986, J ACM, V33, P724, DOI 10.1145/6490.6494
   Avanzini M, 2020, SCI COMPUT PROGRAM, V185, DOI 10.1016/j.scico.2019.102338
   Batz K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434320
   Bertsekas D.P, 1978, Neuro-dynamic programming, V139
   Beutner R, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1312, DOI 10.1145/3453483.3454111
   Bournez O, 2005, LECT NOTES COMPUT SC, V3467, P323
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chandra A. K., 1978, 19th Annual Symposium on Foundations of Computer Science, P127, DOI 10.1109/SFCS.1978.10
   Chatterjee K, 2022, LECT NOTES COMPUT SC, V13371, P55, DOI 10.1007/978-3-031-13185-1_4
   Chatterjee K, 2021, LECT NOTES COMPUT SC, V13047, P619, DOI 10.1007/978-3-030-90870-6_33
   Chatterjee K, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3174800
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Chatterjee Krishnendu, 2017, arXiv, DOI DOI 10.48550/ARXIV.1701.02944
   Colón MA, 2003, LECT NOTES COMPUT SC, V2725, P420
   Cook B, 2013, LECT NOTES COMPUT SC, V7795, P47, DOI 10.1007/978-3-642-36742-7_4
   Dijkstra W., 1976, A Discipline of Programming
   Fioriti LMF, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI 10.1145/2676726.2677001
   Francez Nissim, 1986, Fairness, DOI DOI 10.1007/978-1-4612-4886-6
   Fu HF, 2019, LECT NOTES COMPUT SC, V11388, P468, DOI 10.1007/978-3-030-11245-5_22
   HAREL D, 1984, INFORM CONTROL, V63, P118, DOI 10.1016/S0019-9958(84)80045-5
   HAREL D, 1986, J ACM, V33, P224, DOI 10.1145/4904.4993
   Huang MZ, 2018, LECT NOTES COMPUT SC, V11275, P181, DOI 10.1007/978-3-030-02768-1_11
   Kaminski BL, 2019, ACTA INFORM, V56, P255, DOI 10.1007/s00236-018-0321-1
   Kaminski BL, 2018, J ACM, V65, DOI 10.1145/3208102
   Katoen JP, 2015, LECT NOTES COMPUT SC, V9360, P15, DOI 10.1007/978-3-319-23506-6_4
   KIRBY L, 1982, B LOND MATH SOC, V14, P285, DOI 10.1112/blms/14.4.285
   Kozen Dexter, 2006, Theory of Computation, DOI DOI 10.1007/1-84628-477-5
   Kura S, 2019, LECT NOTES COMPUT SC, V11428, P135, DOI 10.1007/978-3-030-17465-1_8
   Lengál O, 2017, LECT NOTES COMPUT SC, V10205, P499, DOI 10.1007/978-3-662-54577-5_29
   Majumdar R, 2023, Arxiv, DOI arXiv:2310.16145
   McIver A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158121
   McIver Annabelle, 2005, MG COMP SCI
   Moosbrugger M, 2021, LECT NOTES COMPUT SC, V12648, P491, DOI 10.1007/978-3-030-72019-3_18
   Olmedo F, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P672, DOI 10.1145/2933575.2935317
   Pnueli Amir, 1983, P 15 ANN ACM S THEOR, P278, DOI [10.1145/800061.808757, DOI 10.1145/800061.808757]
   Polya G., 1921, Math. Ann., V84, P149
   Takisaka T, 2021, ACM T PROGR LANG SYS, V43, DOI [10.1145/3450967, 10.1145/345096]
   Turing AM, 1937, P LOND MATH SOC, V42, P230, DOI 10.1112/plms/s2-42.1.230
NR 42
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 37
DI 10.1145/3632879
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400038
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Smeding, TJ
   Vákár, MIL
AF Smeding, Tom J.
   Vakar, Matthijs I. L.
TI Efficient CHAD
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE automatic differentiation; source transformation; functional programming
AB We show how the basic Combinatory Homomorphic Automatic Differentiation (CHAD) algorithm can be optimised, using well-known methods, to yield a simple, composable, and generally applicable reverse-mode automatic differentiation (AD) technique that has the correct computational complexity that we would expect of reverse-mode AD. Specifically, we show that the standard optimisations of sparse vectors and state-passing style code (as well as defunctionalisation/closure conversion, for higher-order languages) give us a purely functional algorithm that is most of the way to the correct complexity, with (functional) mutable updates taking care of the final log-factors. We provide an Agda formalisation of our complexity proof. Finally, we discuss how the techniques apply to differentiating parallel functional array programs: the key observations are 1) that all required mutability is (commutative, associative) accumulation, which lets us preserve task-parallelism and 2) that we can write down data-parallel derivatives for most data-parallel array primitives.
C1 [Smeding, Tom J.; Vakar, Matthijs I. L.] Univ Utrecht, Utrecht, Netherlands.
C3 Utrecht University
RP Smeding, TJ (corresponding author), Univ Utrecht, Utrecht, Netherlands.
EM t.j.smeding@uu.nl; m.i.l.vakar@uu.nl
OI Smeding, Tom/0000-0002-4986-6820; Vakar, Matthijs/0000-0003-4603-0523
FU NWO Veni grant [VI.Veni.202.124]
FX We would like to thank Gershom Bazerman for suggesting Okasaki's
   banker's method, which inspired the amortisation argument in this
   paper.; This project has received funding via NWO Veni grant number
   VI.Veni.202.124.
CR Abadi M, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P265
   Accelerate contributors, 2020, Data.Array.Accelerate (accelerate-1.3.0.0)
   Alvarez-Picallo Mario, 2021, arXiv
   Barthe G, 2020, LECT NOTES COMPUT SC, V12075, P56, DOI 10.1007/978-3-030-44914-8_3
   Baydin AG, 2018, J MACH LEARN RES, V18
   Bernardy JP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158093
   Bradbury J., 2018, JAX: composable transformations of Python+ NumPy programs
   BROWN MR, 1979, J ACM, V26, P211, DOI 10.1145/322123.322127
   Chakravarty Manuel MT, 2011, DAMP, P3, DOI 10.1145/1926354.1926358
   Curtis Chin, 2020, Master's Thesis
   De Vilhena PE, 2023, Arxiv, DOI arXiv:2112.07292
   Elliott C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236765
   Elsman M, 2022, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.360.1
   Griewank A, 2008, OTHER TITL APPL MATH, V105, P1, DOI 10.1137/1.9780898717761
   Henriksen T, 2017, ACM SIGPLAN NOTICES, V52, P556, DOI [10.1145/3062341.3062354, 10.1145/3140587.3062354]
   Henriksen Troels, 2017, Ph. D. Dissertation
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Huot M, 2024, Arxiv, DOI arXiv:2101.06757
   Huot M, 2020, LECT NOTES COMPUT SC, V12077, P319, DOI 10.1007/978-3-030-45231-5_17
   Kerjean Marie, 2022, working paper
   Krawiec F, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498710
   Krishnaswami NR, 2015, ACM SIGPLAN NOTICES, V50, P17, DOI [10.1145/2775051.2676969, 10.1145/2676726.2676969]
   LAUNCHBURY J, 1994, SIGPLAN NOTICES, V29, P24, DOI 10.1145/773473.178246
   Leary C., 2017, TensorFlow Dev Summit
   Linnainmaa S., 1976, BIT (Nordisk Tidskrift for Informationsbehandling), V16, P146, DOI 10.1007/BF01931367
   Margossian CC, 2019, WIRES DATA MIN KNOWL, V9, DOI 10.1002/widm.1305
   McDonell TL, 2013, ACM SIGPLAN NOTICES, V48, P49, DOI [10.1145/2544174.2500595, 10.1145/2500365.2500595]
   Merrill Duane., 2016, NVIDIA
   Minamide Y., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P271, DOI 10.1145/237721.237791
   Norell Ulf., 2007, PRACTICAL PROGRAMMIN, V32
   Nunes FL, 2023, MATH STRUCT COMP SCI, V33, P311, DOI 10.1017/S096012952300018X
   Nunes FL, 2024, Arxiv, DOI arXiv:2210.07724
   Paszke A., 2017, Proceedings of the 31st Conference on Neural Information Processing Systems
   Paszke A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473593
   Paszke A, 2021, PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL WORKSHOP ON FUNCTIONAL HIGH-PERFORMANCE AND NUMERICAL COMPUTING (FHPNC '21), P13, DOI 10.1145/3471873.3472975
   Pearlmutter BA, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330018
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Plotkin GD, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(4:23)2013
   Radul A, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571236
   Reynolds J. C., 1998, Higher-Order and Symbolic Computation, V11, P363, DOI 10.1023/A:1010027404223
   Schenck R, 2022, Arxiv, DOI arXiv:2202.10297
   Shaikhha A, 2023, Arxiv, DOI arXiv:2303.07030
   Shaikhha A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341701
   Siskind Jeffrey Mark, 2016, arXiv
   Smeding Tom, 2023, Artifact for Efficient CHAD, DOI [10.5281/zenodo.10015321, DOI 10.5281/ZENODO.10015321]
   Smeding TJ, 2023, Arxiv, DOI [arXiv:2307.05738, 10.48550/arXiv.2307.05738, DOI 10.48550/ARXIV.2307.05738]
   Smeding TJ, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571247
   Staton S, 2010, LECT NOTES COMPUT SC, V6014, P48, DOI 10.1007/978-3-642-12032-9_5
   Vákár M, 2024, Arxiv, DOI arXiv:2007.05282
   Vákár M, 2022, ACM T PROGR LANG SYS, V44, DOI 10.1145/3527634
   Vákár M, 2021, LECT NOTES COMPUT SC, V12648, P607, DOI 10.1007/978-3-030-72019-3_22
   Vákár M, 2015, LECT NOTES COMPUT SC, V9034, P102, DOI 10.1007/978-3-662-46678-0_7
   van den Berg B, 2024, SCI COMPUT PROGRAM, V231, DOI 10.1016/j.scico.2023.103010
   Vytiniotis Dimitrios, 2019, NEURIPS WORKSHOP PRO
   Wang F, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341700
   Wang Fei, 2018, 6 INT C LEARNING REP
   Wang Fei, 2018, ADV NEURAL INFORM PR, P10201
NR 57
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 36
DI 10.1145/3632878
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400037
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Tsukada, T
   Asada, K
AF Tsukada, Takeshi
   Asada, Kazuyuki
TI Enriched Presheaf Model of Quantum FPC
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Sigma-monoid; enriched presheaf; superoperator; domain theory; quantum
   programming language
AB Selinger gave a superoperator model of a first-order quantum programming language and proved that it is fully definable and hence fully abstract. This paper proposes an extension of the superoperator model to higher-order programs based on modules over superoperators or, equivalently, enriched presheaves over the category of superoperators. The enriched presheaf category can be easily proved to be a model of intuitionistic linear logic with cofree exponential, from which one can cave out a model of classical linear logic by a kind of bi-orthogonality construction. Although the structures of an enriched presheaf category are usually rather complex, a morphism in the classical model can be expressed simply as a matrix of completely positive maps.
   The model inherits many desirable properties from the superoperator model. A conceptually interesting property is that our model has only a state whose "total probability" is bounded by 1, i.e. does not have a state where true and false each occur with probability 2/3. Another convenient property inherited from the superoperator model is a omega CPO-enrichment. Remarkably, our model has a sufficient structure to interpret arbitrary recursive types by the standard domain theoretic technique. We introduce Quantum FPC, a quantum lambda-calculus with recursive types, and prove that our model is a fully abstract model of Quantum FPC.
C1 [Tsukada, Takeshi] Chiba Univ, Chiba, Japan.
   [Asada, Kazuyuki] Tohoku Univ, Sendai, Miyagi, Japan.
C3 Chiba University; Tohoku University
RP Tsukada, T (corresponding author), Chiba Univ, Chiba, Japan.
EM tsukada@math.s.chiba-u.ac.jp; asada@riec.tohoku.ac.jp
OI Tsukada, Takeshi/0000-0002-2824-8708
FU JSPS KAKENHI [JP20H05703]; ROIS NII Open Collaborative Research
   [2023-23FA05]
FX The authors would also like to thank the anonymous reviewers for their
   helpful and constructive comments. We are grateful for discussions with
   Masahito Hasegawa, Kengo Hirata, Hisashi Aratake, and Yuto Kawase. This
   work was supported by JSPS KAKENHI Grant Numbers JP20H05703 and ROIS NII
   Open Collaborative Research 2023-23FA05.
NR 0
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 13
DI 10.1145/3632855
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400014
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Kavanagh, R
   Pientka, B
AF Kavanagh, Ryan
   Pientka, Brigitte
TI Message-Observing Sessions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE session types; program specification; trace semantics; dependent types
ID PROPOSITIONS; SEMANTICS
AB We present MOST, a process language with message-observing session types. Message-observing session types extend binary session types with type-level computation to specify communication protocols that vary based on messages observed on other channels. Hence, MOST allows us to express global invariants about processes, rather than just local invariants, in a bottom-up, compositional way. We give MOST a semantic foundation using traces with binding, a semantic approach for compositionally reasoning about traces in the presence of name generation. We use this semantics to prove type soundness and compositionality for MOST processes. We see this as a significant step towards capturing message-dependencies and providing more precise guarantees about processes.
C1 [Kavanagh, Ryan] Univ Quebec Montreal, Dept Informat, 201 President Kennedy Ave, Montreal H2X 3Y7, PQ, Canada.
   [Pientka, Brigitte] McGill Univ, Sch Comp Sci, 3480 Univ St, Montreal, PQ H3A 0E9, Canada.
C3 University of Quebec; University of Quebec Montreal; McGill University
RP Kavanagh, R (corresponding author), Univ Quebec Montreal, Dept Informat, 201 President Kennedy Ave, Montreal H2X 3Y7, PQ, Canada.
EM kavanagh.ryan@uqam.ca; bpientka@cs.mcgill.ca
OI Pientka, Brigitte/0000-0002-2549-4276; Kavanagh,
   Ryan/0000-0001-9497-4276
FU Natural Sciences and Engineering Research Council of Canada Postdoctoral
   Fellowship [206263]
FX This work was funded in part by a Natural Sciences and Engineering
   Research Council of Canada Postdoctoral Fellowship (awarded to the ~rst
   author) and Discovery Grant (grant number 206263).
CR Atkey R, 2017, LECT NOTES COMPUT SC, V10201, P56, DOI 10.1007/978-3-662-54434-1_3
   Balzer S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110281
   Caires L, 2016, MATH STRUCT COMP SCI, V26, P367, DOI 10.1017/S0960129514000218
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Cervesato I, 2009, INFORM COMPUT, V207, P1044, DOI 10.1016/j.ic.2008.11.006
   Crafa S, 2007, LECT NOTES COMPUT SC, V4703, P317
   Das Ankush, 2020, 31 INT C CONC THEOR
   Deniélou PM, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P435, DOI 10.1145/1926385.1926435
   Derakhshan F, 2022, LOG METH COMPUT SCI, V18, DOI 10.46298/LMCS-18(2:8)2022
   Ehrhard T, 2018, MATH STRUCT COMP SCI, V28, P995, DOI 10.1017/S0960129516000372
   Fortier Jerome, 2013, LEIBNIZ INT P INFORM
   Gabbay M, 2012, ELECTRON NOTES THEOR, V286, P173, DOI 10.1016/j.entcs.2012.08.012
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Kavanagh R, 2024, Arxiv, DOI arXiv:2403.04633
   Kavanagh R, 2022, INFORM COMPUT, V285, DOI 10.1016/j.ic.2022.104892
   Pierce Benjamin C., 2002, Types and Programming Languages
   Rocha Pedro, 2023, Programming Languages and Systems: 32nd European Symposium on Programming, ESOP 2023, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2023, Proceedings. Lecture Notes in Computer Science (13990), P421, DOI 10.1007/978-3-031-30044-8_16
   Rocha P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473584
   Somayyajula Siva, 2022, LEIBNIZ INT P INFORM, DOI [10.4230/LIPIcs.FSCD.2022.12, DOI 10.4230/LIPICS.FSCD.2022.12]
   Stolze C, 2023, SOFTW SYST MODEL, V22, P473, DOI 10.1007/s10270-022-01040-x
   Takeuchi Kaku, 1994, Lecture Notes in Computer Science, V817, P398, DOI DOI 10.1007/3-540-58184-7_118
   The Go Project, 2024, Language version go1.22
   Thiemann P, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371135
   Toninho B, 2018, LECT NOTES COMPUT SC, V10803, P128, DOI 10.1007/978-3-319-89366-2_7
   Toninho B, 2011, PPDP 11 - PROCEEDINGS OF THE 2011 SYMPOSIUM ON PRINCIPLES AND PRACTICES OF DECLARATIVE PROGRAMMING, P161
   Varacca D, 2010, THEOR COMPUT SCI, V411, P1949, DOI 10.1016/j.tcs.2010.01.024
   Wadler P, 2014, J FUNCT PROGRAM, V24, P384, DOI 10.1017/S095679681400001X
NR 29
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 142
DI 10.1145/3649859
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600049
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Arora, J
   Muller, SK
   Acar, UA
AF Arora, Jatin
   Muller, Stefan K.
   Acar, Umut A.
TI Disentanglement with Futures, State, and Interaction
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Disentanglement
ID HIERARCHICAL MEMORY MANAGEMENT; DATA RACES; EFFICIENT
AB Recent work has proposed a memory property for parallel programs, called disentanglement, and showed that it is pervasive in a variety of programs, written in different languages, ranging from C/C++ to Parallel ML, and showed that it can be exploited to improve the performance of parallel functional programs. All existing work on disentanglement, however, considers the "fork/join" model for parallelism and does not apply to "futures", the more powerful approach to parallelism. This is not surprising: fork/join parallel programs exhibit a reasonably strict dependency structure (e.g., series-parallel DAGs), which disentanglement exploits. In contrast, with futures, parallel computations become first-class values of the language, and thus can be created, and passed between functions calls or stored in memory, just like other ordinary values, resulting in complex dependency structures, especially in the presence of mutable state. For example, parallel programs with futures can have deadlocks, which is impossible with fork-join parallelism.
   In this paper, we are interested in the theoretical question of whether disentanglement may be extended beyond fork/join parallelism, and specifically to futures. We consider a functional language with futures, Input/Output (I/O), and mutable state (references) and show that a broad range of programs written in this language are disentangled. We start by formalizing disentanglement for futures and proving that purely functional programs written in this language are disentangled. We then generalize this result in three directions. First, we consider state (effects) and prove that stateful programs are disentangled if they are race free. Second, we showthat race freedom is sufficient but not a necessary condition and non-deterministic programs, e.g. those that use atomic read-modify-operations and some non-deterministic combinators, may also be disentangled. Third, we prove that disentangled task-parallel programs written with futures are free of deadlocks, which arise due to interactions between state and the rich dependencies that can be expressed with futures. Taken together, these results show that disentanglement generalizes to parallel programs with futures and, thus, the benefits of disentanglement may go well beyond fork-join parallelism.
C1 [Arora, Jatin; Acar, Umut A.] Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
   [Muller, Stefan K.] IIT, Chicago, IL USA.
C3 Carnegie Mellon University; Illinois Institute of Technology
RP Arora, J (corresponding author), Carnegie Mellon Univ, Pittsburgh, PA 15213 USA.
EM jatina@andrew.cmu.edu; smuller2@iit.edu; umut@cmu.edu
OI Muller, Stefan K/0000-0002-3210-9727
FU NSF [CCF-1901381, CCF-2115104, CCF-2119352, CCF-2107241]
FX This research was supported by the following grants NSF (CCF-1901381,
   CCF-2115104,CCF-2119352, CCF-2107241) and by a gift from Intel.
CR Acar UA, 2002, THEOR COMPUT SYST, V35, P321, DOI 10.1007/s00224-002-1057-3
   Acar UA, 2016, ACM SIGPLAN NOTICES, V51, P18, DOI 10.1145/3022670.2951946
   Acar Umut A., 2020, MPL: A HighPerformance Compiler for Parallel ML
   Adve S, 2010, COMMUN ACM, V53, P84, DOI 10.1145/1839676.1839697
   Allen T. R., 1987, Proceedings of the 1987 International Conference on Parallel Processing, P721
   Arora J, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591284
   Arora J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434299
   Avidan S., 2007, ACM T GRAPHIC, V26, P10, DOI [10.1145/1275808.1276390, DOI 10.1145/1275808.1276390]
   Baker Henry G., 1977, AI memo 454
   Bender MichaelA., 2004, P 16 ANN S PARALLELI, P133
   Blelloch GE, 1999, THEOR COMPUT SYST, V32, P213, DOI 10.1007/s002240000117
   Blumofe RD, 1996, J PARALLEL DISTR COM, V37, P55, DOI 10.1006/jpdc.1996.0107
   Bocchino RL, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P535, DOI 10.1145/1926385.1926447
   Bocchino RL, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P97
   Boehm H., 2011, 3rd USENIX Workshop on Hot Topics in Parallelism, HotPar'11, Berkeley, CA, USA, May 26-27, 2011
   Cheng Guang-Ien, 1998, P 10 ACM S PARALLEL
   Cogumbreiro T, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3143359
   COLE R, 1988, SIAM J COMPUT, V17, P770, DOI 10.1137/0217049
   Dolan S, 2018, ACM SIGPLAN NOTICES, V53, P242, DOI [10.1145/3296979.3192421, 10.1145/3192366.3192421]
   Dolan S, 2018, LECT NOTES COMPUT SC, V10788, P98, DOI 10.1007/978-3-319-89719-6_6
   EMRATH PA, 1989, PROCEEDINGS : SUPERCOMPUTING 89, P580, DOI 10.1145/76263.76329
   Fineman Jeremy T., 2005, Master's thesis
   Flanagan C, 2009, ACM SIGPLAN NOTICES, V44, P121, DOI 10.1145/1543135.1542490
   Fluet M, 2010, J FUNCT PROGRAM, V20, P537, DOI 10.1017/S0956796810000201
   Fluet M, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P241
   Frigo M, 1998, ACM SIGPLAN NOTICES, V33, P212, DOI 10.1145/277652.277725
   Guatto A, 2018, ACM SIGPLAN NOTICES, V53, P81, DOI 10.1145/3200691.3178494
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Hammond K, 2011, LECT NOTES COMPUT SC, V6652, P201, DOI 10.1007/978-3-642-21338-0_17
   Herlihy M, 2014, ACM SIGPLAN NOTICES, V49, P155, DOI [10.1145/2555243.2555257, 10.1145/2692916.2555257]
   Imam Shams., 2014, P 2014 INT C PRINCIP, P75
   Jones SP, 2008, LECT NOTES COMPUT SC, V5356, P138
   Kini D, 2017, ACM SIGPLAN NOTICES, V52, P157, DOI [10.1145/3140587.3062374, 10.1145/3062341.3062374]
   Kumar A, 2017, ACM SIGPLAN NOTICES, V52, P706, DOI 10.1145/3093333.3009869
   Lea Doug, 2000, JAVA, P36, DOI 10.1145/337449.337465
   Leijen D, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P227
   Li P, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P107
   LWT, 2022, LWT OCaml
   Marlow S, 2011, ACM SIGPLAN NOTICES, V46, P71, DOI 10.1145/2096148.2034685
   Marlow Simon, 2011, Lecture Notes in Computer Science, V7241, P339
   MELLORCRUMMEY J, 1991, SUPERCOMPUTING 91, P24
   Mingdong Feng, 1997, SPAA '97. 9th Annual ACM Symposium on Parallel Algorithms and Architectures, P1, DOI 10.1145/258492.258493
   Muller S.K., 2016, P 28 ACM S PARALLELI, P71, DOI DOI 10.1145/2935764.2935793
   Muller SK, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341685
   Muller SK, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P577, DOI 10.1145/3385412.3386013
   Muller SK, 2017, ACM SIGPLAN NOTICES, V52, P677, DOI [10.1145/3062341.3062370, 10.1145/3140587.3062370]
   Muller Stefan K., 2018, P 14 ACM SIGPLAN INT
   Muller Stefan K., 2023, PROC ACM PROGRAM LAN, V7, P712
   Netzer Robert H. B., 1992, ACM Letters on Programming Languages and Systems, V1, P74
   O'Callahan R., 2003, SIGPLAN Notices, V38, P166, DOI 10.1145/966049.781528
   Ohori Atsushi, 2018, Making SML# a General-purpose High-performance Language
   PAUL W, 1983, LECT NOTES COMPUT SC, V154, P597
   Raghunathan R, 2016, ACM SIGPLAN NOTICES, V51, P392, DOI 10.1145/3022670.2951935
   Raman R, 2012, ACM SIGPLAN NOTICES, V47, P531, DOI [10.1145/2345156.1993502, 10.1145/2345156.2254127]
   Raman R, 2010, LECT NOTES COMPUT SC, V6418, P368, DOI 10.1007/978-3-642-16612-9_28
   Rust Team, 2019, Rust Language
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   Singer K., 2020, Proceedings of the Symposium on Algorithmic Principles of Computer Systems, P147, DOI [10.1137/1.9781611976021.11, DOI 10.1137/1.9781611976021.11]
   Singer K, 2020, PROCEEDINGS OF THE 32ND ACM SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES (SPAA '20), P465, DOI 10.1145/3350755.3400236
   Singer K, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P257, DOI 10.1145/3293883.3295735
   Sivaramakrishnan KC, 2014, J FUNCT PROGRAM, V24, P613, DOI 10.1017/S0956796814000161
   Smaragdakis Y, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P387
   Spoonhower D, 2009, SPAA'09: PROCEEDINGS OF THE TWENTY-FIRST ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P91
   Spoonhower Daniel, 2009, Ph. D. Dissertation
   STEELE GL, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P218, DOI 10.1145/96709.96731
   Utterback R., 2016, P 28 ACM S PARALLELI, P83
   Voss C, 2019, PROCEEDINGS OF THE 24TH SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '19), P378, DOI 10.1145/3293883.3295724
   Westrick S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371115
   Westrick Sam, 2022, P 24 ACM SIGPLAN INT
   Wilkins M, 2023, INT SYM CODE GENER, P122, DOI 10.1145/3579990.3580013
   Xu YF, 2020, PROCEEDINGS OF THE 25TH ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING (PPOPP '20), P217, DOI 10.1145/3332466.3374536
   Yu Yuan, 2005, P 20 ACM S OP SYST P, P221
NR 72
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 53
DI 10.1145/3632895
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400054
OA gold
DA 2024-08-05
ER

PT J
AU Campion, M
   Preda, MD
   Giacobazzi, R
   Urban, C
AF Campion, Marco
   Preda, Mila Dalla
   Giacobazzi, Roberto
   Urban, Caterina
TI Monotonicity and the Precision of Program Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Abstract Interpretation; Program Analysis; Complete-Analyzability;
   Completeness; Program Monotonicity
ID STATIC ANALYSIS
AB It is widely known that the precision of a program analyzer is closely related to intensional program properties, namely, properties concerning how the program is written. This explains, for instance, the interest in code obfuscation techniques, namely, tools explicitly designed to degrade the results of program analysis by operating syntactic program transformations. Less is known about a possible relation between what the program extensionally computes, namely, its input-output relation, and the precision of a program analyzer. In this paper we explore this potential connection in an effort to isolate program fragments that can be precisely analyzed by abstract interpretation, namely, programs for which there exists a complete abstract interpretation. In the field of static inference of numeric invariants, this happens for programs, or parts of programs, that manifest a monotone (either non-decreasing or non-increasing) behavior. We first formalize the notion of program monotonicity with respect to a given input and a set of numerical variables of interest. A sound proof system is then introduced with judgments specifying whether a program is monotone relatively to a set of variables and a set of inputs. The interest in monotonicity is justified because we prove that the family of monotone programs admits a complete abstract interpretation over a specific class of non-trivial numerical abstractions and inputs. This class includes all non-relational abstract domains that refine interval analysis (i.e., at least as precise as the intervals abstraction) and that satisfy a topological convexity hypothesis.
C1 [Campion, Marco; Urban, Caterina] Univ PSL, ENS, INRIA, Paris, France.
   [Preda, Mila Dalla] Univ Verona, Verona, Italy.
   [Giacobazzi, Roberto] Univ Arizona, Tucson, AZ USA.
C3 Universite PSL; Ecole Normale Superieure (ENS); Inria; University of
   Verona; University of Arizona
RP Campion, M (corresponding author), Univ PSL, ENS, INRIA, Paris, France.
EM marco.campion@inria.fr; mila.dallapreda@univr.it;
   giacobazzi@arizona.edu; caterina.urban@inria.fr
OI Campion, Marco/0000-0002-1099-3494; Dalla Preda,
   Mila/0000-0003-2761-4347; GIACOBAZZI, Roberto/0000-0002-9582-3960
FU Air Force Office of Scientific Research [FA9550-23-1-0544,
   ANR-23-PEIA-0006]
FX We express our gratitude to the anonymous reviewers of POPL2024 for
   their valuable insights and the suggested directions for future work.
   This material is based upon work supported by the Air Force Office of
   Scientific Research under award number FA9550-23-1-0544 and the French
   PEPR Intelligence Artificielle SAIF project (ANR-23-PEIA-0006).
CR Abadi M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371106
   Ahman D, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158153
   Albarghouthi Aws, 2021, Trends Program. Lang., V7, P1
   Almagor S, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434329
   Alvaro P, 2011, P ASILOMAR CA 5 BIEN, P249
   Amodei D, 2016, Arxiv, DOI arXiv:1606.06565
   [Anonymous], 2013, Faculty Authored and Edited Books & CDs
   [Anonymous], 2015, Principles of program analysis
   Arntzenius M, 2016, ACM SIGPLAN NOTICES, V51, P214, DOI 10.1145/3022670.2951948
   Ascari Flavio, 2023, Lecture Notes in Computer Science, V13990, P1, DOI [10.1007/978-3-031-30044-8_1, DOI 10.1007/978-3-031-30044-8_1]
   Baader Maximilian, 2020, 8 INT C LEARNING REP
   BECK T, 1994, J COMPUT APPL MATH, V50, P119, DOI 10.1016/0377-0427(94)90294-1
   Ben-Amram AM, 2019, LECT NOTES COMPUT SC, V11822, P459, DOI 10.1007/978-3-030-32304-2_22
   Ben-Amram AM, 2014, J ACM, V61, DOI 10.1145/2629488
   Bertrane Julien, 2015, Trends Program. Lang., V2, P71, DOI [10.1561/2500000002, DOI 10.1561/2500000002]
   Bruni R, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P426, DOI 10.1145/3519939.3523453
   Bruni R, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470608
   Bruni R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371096
   Campion M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498721
   Campion M, 2021, J COMPUT VIROL HACKI, V17, P167, DOI 10.1007/s11416-021-00377-z
   Campion Marco, 2023, Proceedings (Lecture Notes in Computer Science, V4284, P114, DOI [10.1007/978-3-031-44245-2_7, DOI 10.1007/978-3-031-44245-2_7]
   Campion Marco, 2022, P 23 ITALIAN C THEOR, V3284, P79
   Chaudhuri S., 2011, P 19 ACM SIGSOFT S 1, P102, DOI DOI 10.1145/2025113.2025131
   Chaudhuri S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P57, DOI 10.1145/1706299.1706308
   Conway Neil, 2012, SOCC, DOI 10.1145/2391229.2391230
   Cousot P, 2005, LECT NOTES COMPUT SC, V3444, P21
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Cousot P., 1979, 6 ACM S PRINC PROGR, P269, DOI [DOI 10.1145/567752.567778, 10.1145/567752.567778]
   Cousot P., 2021, PRINCIPLES ABSTRACT
   Cousot P., 1977, Conference Record of the Fourth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P238, DOI [10.1145/512950.512973, DOI 10.1145/512950.512973]
   Cousot P, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290355
   Cousot P, 2014, IEEE S LOG, DOI 10.1145/2603088.2603165
   Cousot Patrick, 1976, P 2 INT S PROGR DUN, DOI DOI 10.1145/390019.808314
   Dalla Preda M, 2015, THEOR COMPUT SCI, V577, P74, DOI 10.1016/j.tcs.2015.02.024
   Distefano D, 2019, COMMUN ACM, V62, P62, DOI 10.1145/3338112
   Ehrhard T, 2003, THEOR COMPUT SCI, V309, P1, DOI 10.1016/S0304-3975(03)00392-X
   Elfwing S, 2018, NEURAL NETWORKS, V107, P3, DOI 10.1016/j.neunet.2017.12.012
   Elliott C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236765
   Gehr T, 2018, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2018.00058
   Giacobazzi R, 2000, J ACM, V47, P361, DOI 10.1145/333979.333989
   Giacobazzi R, 2017, FORM ASP COMPUT, V29, P3, DOI 10.1007/s00165-016-0374-2
   Giacobazzi R, 2015, ACM SIGPLAN NOTICES, V50, P261, DOI [10.1145/2676726.2676987, 10.1145/2775051.2676987]
   Giacobazzi R, 2012, LECT NOTES COMPUT SC, V7460, P129, DOI 10.1007/978-3-642-33125-1_11
   Giacobazzi R, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P7, DOI 10.1109/SEFM.2008.41
   Gowal S, 2019, IEEE I CONF COMP VIS, P4841, DOI 10.1109/ICCV.2019.00494
   GRANGER P, 1989, INT J COMPUT MATH, V30, P165, DOI 10.1080/00207168908803778
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Huang PS, 2019, 2019 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING AND THE 9TH INTERNATIONAL JOINT CONFERENCE ON NATURAL LANGUAGE PROCESSING (EMNLP-IJCNLP 2019), P4083
   Julien Bertrane J., 2011, SIGSOFT Softw. Eng. Notes, V36, P1, DOI [10.1145/1921532.1921553, DOI 10.1145/1921532.1921553]
   Kinder J., 2012, 2012 19th Working Conference on Reverse Engineering (WCRE), P61, DOI 10.1109/WCRE.2012.16
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   Milanese M, 2022, LECT NOTES COMPUT SC, V13790, P350, DOI 10.1007/978-3-031-22308-2_16
   Miné A, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P310, DOI 10.1109/WCRE.2001.957836
   Miné A, 2001, LECT NOTES COMPUT SC, V2053, P155
   Miné A, 2017, FOUND TRENDS PROGRAM, V4, pI, DOI 10.1561/2500000034
   Moser A, 2007, TWENTY-THIRD ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE, PROCEEDINGS, P421, DOI 10.1109/ACSAC.2007.21
   Nagra Jasvir, 2009, Surreptitious Software: Obfuscation, Watermarking, and Tamperproofing for Software Protection
   Nair V., 2010, Proceedings of the 27th International Conference on Machine Learning (ICML-10), P807
   O'Hearn P, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P13, DOI 10.1145/3209108.3209109
   Pilkiewicz Alexandre., 2011, Proceedings of the 7th ACM SIGPLAN Workshop on Types in Language Design and Implementation, TLDI '11, P73, DOI [DOI 10.1145/1929553.1929565, 10.1145/1929553.1929565]
   Preda MD, 2005, SEFM 2005: THIRD IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P301, DOI 10.1109/SEFM.2005.13
   Preda MD, 2006, LECT NOTES COMPUT SC, V4019, P81
   Ramachandran Prajit., 2018, 6 INT C LEARNING REP
   RICE HG, 1953, T AM MATH SOC, V74, P358, DOI 10.2307/1990888
   Rival Xavier, 2020, Introduction to static analysis: an abstract interpretation perspective
   Sadowski C, 2018, COMMUN ACM, V61, P58, DOI 10.1145/3188720
   Scott Dana S, 1971, MATH SEMANTICS COMPU, V1
   Singh G, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158143
   Tarski Alfred., 1955, PAC J MATH, V5, P285, DOI [10.2140/pjm.1955.5.285, DOI 10.2140/PJM.1955.5.285]
   Timany A, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P91, DOI 10.1145/3437992.3439931
   Urban C, 2014, LECT NOTES COMPUT SC, V8410, P412
   Urban C, 2014, LECT NOTES COMPUT SC, V8723, P302, DOI 10.1007/978-3-319-10936-7_19
   Vogels W, 2009, COMMUN ACM, V52, P40, DOI 10.1145/1435417.1435432
   Wagner R, 2019, SPRO'19: PROCEEDINGS OF THE 3RD ACM WORKSHOP ON SOFTWARE PROTECTION, P1, DOI 10.1145/3338503.3357718
   Wang SQ, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P1599
   Wang Z, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498675
   Winskel G., 1993, The Formal Semantics of Programming Languages: An Introduction (Foundations of Computing)
   Yang ZF, 2009, J FIX POINT THEORY A, V6, P351, DOI 10.1007/s11784-009-0130-9
   You I., 2010, 2010 INT C BROADB WI, P297, DOI DOI 10.1109/BWCCA.2010.85
NR 79
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 55
DI 10.1145/3632897
PG 34
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400056
OA gold
DA 2024-08-05
ER

PT J
AU Li, X
   Zhou, XY
   Dong, R
   Zhang, YH
   Wang, XY
AF Li, Xiang
   Zhou, Xiangyu
   Dong, Rui
   Zhang, Yihong
   Wang, Xinyu
TI Efficient Bottom-Up Synthesis for Programs with Local Variables
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Program Synthesis; Observational Equivalence; Web Automation
AB We propose a new synthesis algorithm that can efficiently search programs with local variables (e.g., those introduced by lambdas). Prior bottom-up synthesis algorithms are not able to evaluate programs with free local variables, and therefore cannot effectively reduce the search space of such programs (e.g., using standard observational equivalence reduction techniques), making synthesis slow. Our algorithm can reduce the space of programs with local variables. The key idea, dubbed lifted interpretation, is to lift up the program interpretation process, from evaluating one program at a time to simultaneously evaluating all programs from a grammar. Lifted interpretation provides a mechanism to systematically enumerate all binding contexts for local variables, thereby enabling us to evaluate and reduce the space of programs with local variables. Our ideas are instantiated in the domain of web automation. The resulting tool, Arborist, can automate a significantly broader range of challenging tasks more efficiently than state-of-the-art techniques including WebRobot and Helena.
C1 [Li, Xiang; Zhou, Xiangyu; Dong, Rui; Wang, Xinyu] Univ Michigan, Ann Arbor, MI 48109 USA.
   [Zhang, Yihong] Univ Washington, Seattle, WA 98195 USA.
C3 University of Michigan System; University of Michigan; University of
   Washington; University of Washington Seattle
RP Li, X (corresponding author), Univ Michigan, Ann Arbor, MI 48109 USA.
EM xkevli@umich.edu; xiangyz@umich.edu; ruidong@umich.edu;
   yz489@cs.washington.edu; xwangsd@umich.edu
OI Wang, Xinyu/0000-0002-1836-0202; Li, Xiang/0009-0005-6860-039X
FU National Science Foundation [CCF-2123654, CCF-2236233]
FX We thank our shepherds, Hila Peleg and Nadia Polikarpova, for their
   extremely valuable feedback. We thank the POPL anonymous reviewers for
   their constructive comments. We also thank Anders Miltner, Chenglong
   Wang, Kasra Ferdowsi, Ningning Xie, Shankara Pailoor, Yuepeng Wang for
   their feedback on earlier drafts of this work. This work was supported
   by the National Science Foundation under Grant Numbers CCF-2123654 and
   CCF-2236233.
CR Albarghouthi Aws, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P934, DOI 10.1007/978-3-642-39799-8_67
   Barman S, 2016, ACM SIGPLAN NOTICES, V51, P748, DOI 10.1145/3022671.2984020
   Chasins S, 2015, WWW'15 COMPANION: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON WORLD WIDE WEB, P179, DOI 10.1145/2740908.2742849
   Chasins SE, 2018, UIST 2018: PROCEEDINGS OF THE 31ST ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P963, DOI 10.1145/3242587.3242661
   Chasins Sarah Elizabeth, 2019, Ph. D. Dissertation
   Chen QC, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P328, DOI 10.1145/3453483.3454047
   Chen QC, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P487, DOI 10.1145/3385412.3385988
   Chen Weihao, 2023, P 36 ANN ACM S US IN, DOI [10.1145/3586183.3606720, DOI 10.1145/3586183.3606720]
   Comon Hubert, 2008, Tree automata techniques and applications
   Dong R, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P152, DOI 10.1145/3519939.3523711
   Feser JK, 2015, ACM SIGPLAN NOTICES, V50, P229, DOI [10.1145/2813885.2737977, 10.1145/2737924.2737977]
   Fischer MH, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P312, DOI 10.1145/3453483.3454046
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P50, DOI 10.1145/1993316.1993505
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Handa S, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P87, DOI 10.1145/3368089.3409732
   Hennessy M., 1980, LNCS, V85, P299
   Katongo K, 2021, COMPANION PROCEEDINGS OF THE 5TH INTERNATIONAL CONFERENCE ON THE ART, SCIENCE, AND ENGINEERING OF PROGRAMMING (PROGRAMMING 2021 COMPANION), P49, DOI 10.1145/3464432.3464437
   Koppel J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547622
   Krosnick R, 2021, S VIS LANG HUM CEN C, DOI 10.1109/VL/HCC51201.2021.9576476
   Lau T, 2003, MACH LEARN, V53, P111, DOI 10.1023/A:1025671410623
   Lee W, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434335
   Leshed G, 2008, CHI 2008: 26TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS VOLS 1 AND 2, CONFERENCE PROCEEDINGS, P1719
   Li Xiang, 2023, Zenodo, DOI 10.5281/ZENODO.10023528
   Li X, 2023, Arxiv, DOI arXiv:2311.03705
   Lieberman H., 1993, Watch What I Do: Programming by Demonstration, P49, DOI [10.5555/168080.168086, DOI 10.5555/168080.168086]
   Lin James., 2009, Proceedings of the 14th international conference on Intelligent user interfaces. IUI'09, P97, DOI 10.1145/1502650.1502667
   Little G, 2007, CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1 AND 2, P943
   Miltner A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498682
   Mo Dan Hua, 1990, Learning Text Editing Procedures from Examples
   OpenAI, 2022, INTRO CHATGPT
   Peleg H, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428227
   Phothilimthana PM, 2016, ACM SIGPLAN NOTICES, V51, P297, DOI 10.1145/2954679.2872387
   Pu K, 2022, PROCEEDINGS OF THE 35TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, UIST 2022, DOI 10.1145/3526113.3545691
   Pu Kevin, 2023, P 36 ANN ACM S US IN, DOI [10.1145/3586183.3606822, DOI 10.1145/3586183.3606822]
   Si CL, 2023, Arxiv, DOI [arXiv:2210.09150, DOI 10.48550/ARXIV.2210.09150, 10.48550/arXiv.2210.09150]
   Smith C, 2016, ACM SIGPLAN NOTICES, V51, P326, DOI [10.1145/2908080.2908102, 10.1145/2980983.2908102]
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Udupa A, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2499370.2462174
   UiPath, 2022, UiPath Webinar Slides
   Wang XY, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158151
   Wang XY, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133886
   Wang XY, 2018, LECT NOTES COMPUT SC, V10981, P407, DOI 10.1007/978-3-319-96145-3_22
   Wang YP, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276525
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Yaghmazadeh N, 2018, PROC VLDB ENDOW, V11, P580, DOI 10.1145/3177732.3177735
NR 45
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 52
DI 10.1145/3632894
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400053
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Wang, D
   Reps, T
AF Wang, Di
   Reps, Thomas
TI Newtonian Program Analysis of Probabilistic Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Probabilistic Programs; Algebraic Program Analysis; Newton's Method;
   Interprocedural Program Analysis
ID SYSTEMS
AB Due to their quantitative nature, probabilistic programs pose non-trivial challenges for designing compositional and efficient program analyses. Many analyses for probabilistic programs rely on iterative approximation. This article presents an interprocedural dataflow-analysis framework, called NPA-PMA, for designing and implementing (partially) non-iterative program analyses of probabilistic programs with unstructured control-flow, nondeterminism, and general recursion. NPA-PMA is based on Newtonian Program Analysis (NPA), a generalization of Newton's method to solve equation systems over semirings. The key challenge for developing NPA-PMA is to handle multiple kinds of confluences in both the algebraic structures that specify analyses and the equation systems that encode control flow: semirings support a single confluence operation, whereas NPA-PMA involves three confluence operations (conditional, probabilistic, and nondeterministic).
   Our work introduces omega-continuous pre-Markov algebras (l PMAs) to factor out common parts of different analyses; adopts regular infinite-tree expressions to encode probabilistic programs with unstructured control-flow; and presents a linearization method that makes Newton's method applicable to the setting of regular-infinite-tree equations over l PMAs. NPA-PMA allows analyses to supply a non-iterative strategy to solve linearized equations. Our experimental evaluation demonstrates that (i) NPA-PMA holds considerable promise for outperforming Kleene iteration, and (ii) provides great generality for designing program analyses.
C1 [Wang, Di] Peking Univ, Key Lab High Confidence Software Technol, Minist Educ,Dept Comp Sci & Technol, Sch Comp Sci, Beijing, Peoples R China.
   [Reps, Thomas] Univ Wisconsin, Dept Comp Sci, Madison, WI USA.
C3 Peking University; University of Wisconsin System; University of
   Wisconsin Madison
RP Wang, D (corresponding author), Peking Univ, Key Lab High Confidence Software Technol, Minist Educ,Dept Comp Sci & Technol, Sch Comp Sci, Beijing, Peoples R China.
OI Wang, Di/0000-0002-2418-7987
FU ONR [N00014-17-1-2889]; NSF [CCF-{2211968,2212558}]
FX We thank the referees for suggestions of how to clarify several items in
   the presentation. The work was supported, in part, by a gift from Rajiv
   and Ritu Batra; by ONR under grant N00014-17-1-2889; and by NSF under
   grants CCF-{2211968,2212558}. Any opinions, findings, and conclusions or
   recommendations expressed in this publication are those of the authors,
   and do not necessarily reflect the views of the sponsoring entities.
CR Avanzini M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428240
   Bahar RI, 1997, FORM METHOD SYST DES, V10, P171, DOI 10.1023/A:1008699807402
   Barthe G, 2016, LECT NOTES COMPUT SC, V9779, P43, DOI 10.1007/978-3-319-41528-4_3
   Bartocci E, 2019, LECT NOTES COMPUT SC, V11781, P255, DOI 10.1007/978-3-030-31784-3_15
   Bekic H., 1984, Programming Languages and Their Definition - Hans Bekic (1936-1982), P30, DOI [10.1007/BFb0048939, DOI 10.1007/BFB0048939]
   Bouajjani A, 2003, ACM SIGPLAN NOTICES, V38, P62, DOI 10.1145/640128.604137
   Bouissou O, 2016, LECT NOTES COMPUT SC, V9636, P225, DOI 10.1007/978-3-662-49674-9_13
   Brazdil Tomas, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P208, DOI 10.1007/978-3-642-22110-1_18
   Breck J, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P688, DOI 10.1145/3385412.3386035
   Carbonneaux Q, 2017, LECT NOTES COMPUT SC, V10427, P64, DOI 10.1007/978-3-319-63390-9_4
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chakarov A, 2014, LECT NOTES COMPUT SC, V8723, P85, DOI 10.1007/978-3-319-10936-7_6
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chiang D, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586050
   Claret Guillaume., 2013, Foundations of Software Engineering, P92, DOI DOI 10.1145/2491411.2491423
   Cleaveland R, 2005, THEOR COMPUT SCI, V342, P316, DOI 10.1016/j.tcs.2005.03.048
   Clp team, 2022, COIN-OR Linear Programming Solver
   COURCELLE B, 1983, THEOR COMPUT SCI, V25, P95, DOI 10.1016/0304-3975(83)90059-2
   Courcelle Bruno., 1990, Formal Models and Semantics, P461, DOI [10.1016/B978-0-444-88074-1.50014-7, DOI 10.1016/B978-0-444-88074-1.50014-7]
   Cousot P., 1977, Conference Record of the Fourth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P238, DOI [10.1145/512950.512973, DOI 10.1145/512950.512973]
   Cousot P, 2012, LECT NOTES COMPUT SC, V7211, P169, DOI 10.1007/978-3-642-28869-2_9
   De Raedt L, 2007, 20TH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P2468
   Dehnert C, 2017, LECT NOTES COMPUT SC, V10427, P592, DOI 10.1007/978-3-319-63390-9_31
   Dubhashi DP, 2009, CONCENTRATION OF MEASURE FOR THE ANALYSIS OF RANDOMIZED ALGORITHMS, P1, DOI 10.1017/CBO9780511581274
   Esparza J, 2004, IEEE S LOG, P12, DOI 10.1109/LICS.2004.1319596
   Esparza J, 2008, LECT NOTES COMPUT SC, V5125, P698, DOI 10.1007/978-3-540-70575-8_57
   Esparza J, 2010, J ACM, V57, DOI 10.1145/1857914.1857917
   Esparza Javier, 2008, INT C AUT LANGS PROG, DOI [10.1007/978-3-540-70583-3_2, DOI 10.1007/978-3-540-70583-3_2]
   Etessami K, 2005, LECT NOTES COMPUT SC, V3580, P891
   Etessami K, 2015, LECT NOTES COMPUT SC, V9135, P184, DOI 10.1007/978-3-662-47666-6_15
   Etessami K, 2015, J ACM, V62, DOI 10.1145/2699431
   Etessami K, 2012, LECT NOTES COMPUT SC, V7391, P314, DOI 10.1007/978-3-642-31594-7_27
   Etessami Kousha, 2005, S THEOR ASP COMP SCI, DOI [10.1007/978-3-540-31856-9_28, DOI 10.1007/978-3-540-31856-9_28]
   Farzan A, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P57, DOI 10.1109/FMCAD.2015.7542253
   Farzan Azadeh, 2013, arXiv
   Fierens D, 2015, THEOR PRACT LOG PROG, V15, P358, DOI 10.1017/S1471068414000076
   Fioriti Luis Maria Ferrer, 2012, Automated Technology for Verification and Analysis. Proceedings of the 10th International Symposium, ATVA 2012, P300, DOI 10.1007/978-3-642-33386-6_24
   Forejt V, 2011, LECT NOTES COMPUT SC, V6659, P53, DOI 10.1007/978-3-642-21455-4_3
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Hahn EM, 2010, LECT NOTES COMPUT SC, V6015, P353
   Hermanns H, 2008, LECT NOTES COMPUT SC, V5123, P162
   Holtzen S., 2018, INT C MACH LEARN ICM, P1999
   Holtzen S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428208
   Katoen JP, 2010, LECT NOTES COMPUT SC, V6337, P390, DOI 10.1007/978-3-642-15769-1_24
   Kattenbelt M, 2009, LECT NOTES COMPUT SC, V5403, P182, DOI 10.1007/978-3-540-93900-9_17
   Kincaid Z, 2021, LECT NOTES COMPUT SC, V12759, P46, DOI 10.1007/978-3-030-81685-8_3
   Kincaid Z, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290368
   Kincaid Z, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158142
   Kincaid Z, 2017, ACM SIGPLAN NOTICES, V52, P248, DOI [10.1145/3062341.3062373, 10.1145/3140587.3062373]
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   McIver Annabelle, 2005, Abstraction, Refinement and Proof for Probabilistic Systems, DOI DOI 10.1007/B138392
   Moosbrugger M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563341
   Pin Jean-Eric., 2004, Pure and Applied Mathematics
   Puterman Martin L, 1994, Markov Decision Processes: Discrete Stochastic Dynamic Programming, DOI DOI 10.5555/528623
   Reps T, 2005, SCI COMPUT PROGRAM, V58, P206, DOI 10.1016/j.scico.2005.02.009
   Reps T, 2016, ACM SIGPLAN NOTICES, V51, P663, DOI 10.1145/2914770.2837659
   Reps Thomas, 2007, FDN SOFT TECH THEOR, DOI [10.1007/978-3-540-77050-3_4, DOI 10.1007/978-3-540-77050-3_4]
   Riguzzi F, 2011, THEOR PRACT LOG PROG, V11, P433, DOI 10.1017/S147106841100010X
   Schreuder A, 2019, Arxiv, DOI arXiv:1910.12634
   TARJAN RE, 1981, J ACM, V28, P577, DOI 10.1145/322261.322272
   TARJAN RE, 1981, J ACM, V28, P594, DOI 10.1145/322261.322273
   Tix R, 2009, ELECTRON NOTES THEOR, V222, P3, DOI 10.1016/j.entcs.2009.01.002
   Ngo VC, 2018, ACM SIGPLAN NOTICES, V53, P496, DOI [10.1145/3192366.3192394, 10.1145/3296979.3192394]
   Wang Di, 2024, Zenodo, DOI 10.5281/ZENODO.10791709
   Wang D, 2019, ELECTRON NOTES THEOR, V347, P303, DOI 10.1016/j.entcs.2019.09.016
   Wang D, 2018, ACM SIGPLAN NOTICES, V53, P513, DOI 10.1145/3192366.3192408
   Wang Di, 2023, arXiv, DOI [10.48550/arXiv.2307.09064, DOI 10.48550/ARXIV.2307.09064]
   Wojtczak D, 2007, LECT NOTES COMPUT SC, V4424, P66
   Zhu SW, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1296, DOI 10.1145/3453483.3454110
NR 70
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 105
DI 10.1145/3649822
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600012
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Zhang, YF
   Shi, YF
   Zhang, X
AF Zhang, Yifan
   Shi, Yuanfeng
   Zhang, Xin
TI Learning Abstraction Selection for Bayesian Program Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Static analysis; Bayesian network; alarm ranking; machine learning for
   program analysis; abstract interpretation
ID SENSITIVITY; STRATEGY
AB We propose a learning-based approach to select abstractions for Bayesian program analysis. Bayesian program analysis converts a program analysis into a Bayesian model by attaching probabilities to analysis rules. It computes probabilities of analysis results and can update them by learning from user feedback, test runs, and other information. Its abstraction heavily affects how well it learns from such information. There exists a long line of works in selecting abstractions for conventional program analysis but they are not effective for Bayesian program analysis. This is because they do not optimize for generalization ability. We propose a data-driven framework to solve this problem by learning from labeled programs. Starting from an abstraction, it decides how to change the abstraction based on analysis derivations. To be general, it considers graph properties of analysis derivations; to be effective, it considers the derivations before and after changing the abstraction. We demonstrate the effectiveness of our approach using a datarace analysis and a thread-escape analysis.
C1 [Zhang, Yifan; Shi, Yuanfeng; Zhang, Xin] Peking Univ, Minist Educ, Key Lab High Confidence Software Technol, Sch Comp Sci, Beijing, Peoples R China.
C3 Peking University
RP Zhang, YF (corresponding author), Peking Univ, Minist Educ, Key Lab High Confidence Software Technol, Sch Comp Sci, Beijing, Peoples R China.
EM yfzhang23@stu.pku.edu.cn; friedrich22@stu.pku.edu.cn; xin@pku.edu.cn
OI Zhang, Xin/0000-0002-1515-7145
FU National Natural Science Foundation of China [62172017]; Cooperation
   Fund of Huawei [TC20220707032]
FX We sincerely thank the anonymous reviewers for their valuable feedback
   on our paper and the anonymous artifact reviewers for their suggestions
   for our artifact. The work is supported by the National Natural Science
   Foundation of China under Grant No. 62172017, and the Cooperation Fund
   of Huawei under Grant No. TC20220707032.
CR Bielik P, 2017, LECT NOTES COMPUT SC, V10426, P233, DOI 10.1007/978-3-319-63387-9_12
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Chen TY, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P1154, DOI 10.1145/3468264.3468626
   Cousot P, 1996, ACM COMPUT SURV, V28, P324, DOI 10.1145/234528.234740
   Fawcett T, 2006, PATTERN RECOGN LETT, V27, P861, DOI 10.1016/j.patrec.2005.10.010
   Grigore R, 2016, ACM SIGPLAN NOTICES, V51, P485, DOI 10.1145/2914770.2837663
   Hassanshahi B., 2017, P 6 ACM SIGPLAN INT, P13, DOI DOI 10.1145/3088515.3088519
   He JX, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P1112, DOI 10.1145/3385412.3386016
   Heo K, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P561, DOI 10.1145/3314221.3314616
   Heo K, 2019, PROC INT CONF SOFTW, P94, DOI 10.1109/ICSE.2019.00027
   Heo K, 2017, PROC INT CONF SOFTW, P519, DOI 10.1109/ICSE.2017.54
   Heo K, 2016, LECT NOTES COMPUT SC, V9837, P237, DOI 10.1007/978-3-662-53413-7_12
   Jeon M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498720
   Jeon M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276510
   Jeon M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428247
   Jeon M, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3293607
   Jeong S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133924
   Kastrinis George., 2013, ACM SIGPLAN NOTICES, V48, P423, DOI [DOI 10.1145/2491956.2462191, DOI 10.1145/2499370.2462191]
   Kim H, 2022, PROC INT CONF SOFTW, P1282, DOI 10.1145/3510003.3510098
   KIRKPATRICK S, 1983, SCIENCE, V220, P671, DOI 10.1126/science.220.4598.671
   Koller D., 2009, PROBABILISTIC GRAPHI
   Li HF, 2022, PROCEEDINGS OF THE 30TH ACM JOINT MEETING EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, ESEC/FSE 2022, P1110, DOI 10.1145/3540250.3549122
   Li Y, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276511
   Li Y, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3381915
   Li Y, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P129, DOI 10.1145/3236024.3236041
   Liang P, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P590
   Liang P, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P31, DOI 10.1145/1926385.1926391
   Lu JB, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360574
   Mangal R, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P462, DOI 10.1145/2786805.2786851
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Murphy KP, 1999, UNCERTAINTY IN ARTIFICIAL INTELLIGENCE, PROCEEDINGS, P467
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Naik M, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P373
   Oh H, 2015, ACM SIGPLAN NOTICES, V50, P572, DOI [10.1145/2814270.2814309, 10.1145/2858965.2814309]
   Oh H, 2014, ACM SIGPLAN NOTICES, V49, P475, DOI [10.1145/2594291.2594318, 10.1145/2666356.2594318]
   Peleg H, 2016, LECT NOTES COMPUT SC, V9583, P185, DOI 10.1007/978-3-662-49122-5_9
   Raghothaman M, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P722, DOI [10.1145/3296979.3192417, 10.1145/3192366.3192417]
   Shiyi WeiB.G. R., 2015, 29 EUROPEAN C OBJECT, P712, DOI DOI 10.4230/LIPICS.ECOOP.2015.712
   Singh G, 2018, LECT NOTES COMPUT SC, V10981, P211, DOI 10.1007/978-3-319-96145-3_12
   Smaragdakis Y, 2014, ACM SIGPLAN NOTICES, V49, P485, DOI [10.1145/2666356.2594320, 10.1145/2594291.2594320]
   Tan T, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485524
   Tan T, 2017, ACM SIGPLAN NOTICES, V52, P278, DOI [10.1145/3140587.3062360, 10.1145/3062341.3062360]
   Tan T, 2016, LECT NOTES COMPUT SC, V9837, P489, DOI 10.1007/978-3-662-53413-7_24
   Zhang X, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133881
   Zhang X, 2014, ACM SIGPLAN NOTICES, V49, P239, DOI [10.1145/2594291.2594327, 10.1145/2666356.2594327]
   Zhang X, 2013, ACM SIGPLAN NOTICES, V48, P365, DOI 10.1145/2499370.2462185
   Zhang Yifan, 2024, Zenodo, DOI 10.5281/ZENODO.10897277
NR 47
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 128
DI 10.1145/3649845
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600035
OA gold
DA 2024-08-05
ER

PT J
AU Hong, CD
   Lin, AW
AF Hong, Chih-Duo
   Lin, Anthony W.
TI Regular Abstractions for Array Systems
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Array theory; Regular model checking; Infinite-state model checking;
   Abstract interpretation; Predicate abstraction; Distributed protocol
   verification
ID PARAMETERIZED VERIFICATION; CHECKING; SAFETY
AB Verifying safety and liveness over array systems is a highly challenging problem. Array systems naturally capture parameterized systems such as distributed protocols with an unbounded number of processes. Such distributed protocols often exploit process IDs during their computation, resulting in array systems whose element values range over an infinite domain. In this paper, we develop a novel framework for proving safety and liveness over array systems. The crux of the framework is to overapproximate an array system as a string rewriting system (i.e. over a finite alphabet) by means of a new predicate abstraction that exploits the so-called indexed predicates. This allows us to tap into powerful verification methods for string rewriting systems that have been heavily developed in the last two decades or so (e.g. regular model checking). We demonstrate how our method yields simple, automatically verifiable proofs of safety and liveness properties for challenging examples, including Dijkstra's self-stabilizing protocol and the Chang-Roberts leader election protocol.
C1 [Hong, Chih-Duo] Natl Chengchi Univ, Taipei, Taiwan.
   [Lin, Anthony W.] Univ Kaiserslautern Landau, Kaiserslautern, Germany.
   [Lin, Anthony W.] MPI SWS, Kaiserslautern, Germany.
C3 National Chengchi University
RP Hong, CD (corresponding author), Natl Chengchi Univ, Taipei, Taiwan.
EM chihduo@nccu.edu.tw; awlin@mpi-sws.org
OI Hong, Chih-Duo/0000-0002-4064-8413
FU National Science and Technology Council, Taiwan [112-2222-E004-001-MY3];
   European Research Council under European Union [101089343]
FX We thank the anonymous reviewers for their insightful comments and
   corrections. Chih-Duo Hong is partly supported by the National Science
   and Technology Council, Taiwan, under grant number
   112-2222-E004-001-MY3. Anthony Lin is supported by European Research
   Council under European Union's Horizon 2020 research and innovation
   programme (grant agreement no 101089343).
CR ABADI M, 1989, THEOR COMPUT SCI, V65, P35, DOI 10.1016/0304-3975(89)90138-2
   Abdulla Parosh Aziz, 2012, International Journal on Software Tools for Technology Transfer, V14, P109, DOI 10.1007/s10009-011-0216-8
   Abdulla Parosh Aziz, 2012, International Journal on Software Tools for Technology Transfer, V14, P223, DOI 10.1007/s10009-011-0212-z
   Abdulla P, 2016, INT J SOFTW TOOLS TE, V18, P495, DOI 10.1007/s10009-015-0406-x
   Abdulla PA, 2010, LECT NOTES COMPUT SC, V6269, P86, DOI 10.1007/978-3-642-15375-4_7
   Abdulla PA, 2009, FORM METHOD SYST DES, V34, P126, DOI 10.1007/s10703-008-0062-9
   Alberti F, 2017, FUND INFORM, V150, P1, DOI 10.3233/FI-2017-1458
   Alberti F, 2012, LECT NOTES COMPUT SC, V7180, P46, DOI 10.1007/978-3-642-28717-6_7
   Alberti Francesco, INT C COMP AID VER C, P679
   [Anonymous], 2000, Lecture Notes in Computer Science
   Argyros G, 2018, LECT NOTES COMPUT SC, V10981, P427, DOI 10.1007/978-3-319-96145-3_23
   Basler G, 2009, LECT NOTES COMPUT SC, V5643, P64, DOI 10.1007/978-3-642-02658-4_9
   Bendik Jaroslav, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12078), P135, DOI 10.1007/978-3-030-45190-5_8
   Bendík J, 2018, LECT NOTES COMPUT SC, V11138, P143, DOI 10.1007/978-3-030-01090-4_9
   Benedikt M, 2003, J ACM, V50, P694, DOI 10.1145/876638.876642
   Bloem R., 2015, Decidability of Parameterized Verification (Synthesis Lectures on Distributed Computing Theory)
   Blumensath A, 2004, THEOR COMPUT SYST, V37, P641, DOI 10.1007/s00224-004-1133-y
   Blumensath A, 2000, IEEE S LOG, P51, DOI 10.1109/LICS.2000.855755
   Bouajjani A, 2004, LECT NOTES COMPUT SC, V3114, P372
   Bradley Aaron R., 1998, The Calculus of Computation: Decision Procedures with Applications to Veri~cation
   Bradley AR, 2006, LECT NOTES COMPUT SC, V3855, P427
   CHANG E, 1979, COMMUN ACM, V22, P281, DOI 10.1145/359104.359108
   Chen YF, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P76, DOI 10.23919/FMCAD.2017.8102244
   Chih-Duo Hong, 2022, Ph. D. Dissertation
   Cimatti Alessandro, 2022, Automated Technology for Verification and Analysis: 20th International Symposium, ATVA 2022, Proceedings. Lecture Notes in Computer Science (13505), P154, DOI 10.1007/978-3-031-19992-9_10
   Cimatti A., 2014, P 20 INT C TOOLS ALG, P46
   Cimatti A, 2021, LECT NOTES ARTIF INT, V12699, P131, DOI 10.1007/978-3-030-79876-5_8
   Cimatti A, 2016, FORM METHOD SYST DES, V49, P190, DOI 10.1007/s10703-016-0257-4
   Clarke E, 2006, LECT NOTES COMPUT SC, V3855, P126
   Clarke E.M., 2018, MODEL CHECKING
   Clarke E, 2008, LECT NOTES COMPUT SC, V4963, P33, DOI 10.1007/978-3-540-78800-3_4
   Clarke Edmund M., 1986, S PRINC DISTR COMP P, P240
   Colcombet T, 2007, LOG METH COMPUT SCI, V3
   Cook B, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P320, DOI 10.1145/1250734.1250771
   Cousot Patrick, 1977, P 4 ACM S PRINC PROG, P238, DOI [DOI 10.1145/512950.512973, 10.1145/512950.512973]
   Daniel J, 2016, LECT NOTES COMPUT SC, V9779, P271, DOI 10.1007/978-3-319-41528-4_15
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Demri S, 2016, CAM T THEOR, V58, P1, DOI 10.1017/CBO9781139236119
   Dijkstra E. W., 1982, Selected Writings on Computing: A Personal Perspective, P41
   Donaldson Alastair, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P356, DOI 10.1007/978-3-642-22110-1_28
   Donaldson AF, 2012, FORM METHOD SYST DES, V41, P25, DOI 10.1007/s10703-012-0155-3
   Drews S, 2017, LECT NOTES COMPUT SC, V10205, P173, DOI 10.1007/978-3-662-54577-5_10
   Emerson E. A., 2003, Int. J. Found. Comput. Sci, V14, P527
   Esparza Javier, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P123, DOI 10.1007/978-3-642-31424-7_14
   Farzan A, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P185, DOI 10.1145/2933575.2935310
   Fedyukovich G, 2019, LECT NOTES COMPUT SC, V11561, P259, DOI 10.1007/978-3-030-25540-4_14
   Felli P, 2021, AAAI CONF ARTIF INTE, V35, P6321
   Fiedor T, 2017, LECT NOTES COMPUT SC, V10205, P407, DOI 10.1007/978-3-662-54577-5_24
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P191, DOI 10.1145/565816.503291
   Ganjei Z, 2016, INT J SOFTW TOOLS TE, V18, P517, DOI 10.1007/s10009-015-0411-0
   Ge YT, 2009, LECT NOTES COMPUT SC, V5643, P306
   GERMAN SM, 1992, J ACM, V39, P675, DOI 10.1145/146637.146681
   Ghilardi S, 2021, LECT NOTES COMPUT SC, V12650, P268, DOI 10.1007/978-3-030-71995-1_14
   Ghilardi S, 2010, LOG METH COMPUT SCI, V6, DOI 10.2168/LMCS-6(4:10)2010
   Gur~nkel Arie, 2018, Automated Technology for Veri ~ cation and Analysis (ATVA), P248
   Gurfinkel A, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P338, DOI 10.1145/2950290.2950330
   Habermehl P, 2008, LECT NOTES ARTIF INT, V5330, P558, DOI 10.1007/978-3-540-89439-1_39
   Hodkinson I, 2000, ANN PURE APPL LOGIC, V106, P85, DOI 10.1016/S0168-0072(00)00018-X
   Hoenicke J, 2018, LECT NOTES ARTIF INT, V10900, P549, DOI 10.1007/978-3-319-94205-6_36
   Jhala R., 2018, HDB MODEL CHECKING, P447, DOI DOI 10.1007/978-3-319-10575-8_15
   Jhala R, 2007, LECT NOTES COMPUT SC, V4590, P193
   Kaiser A, 2017, INFORM COMPUT, V252, P30, DOI 10.1016/j.ic.2016.03.003
   Ketema J, 2017, SCI COMPUT PROGRAM, V148, P107, DOI 10.1016/j.scico.2017.04.009
   Klarlund N., 2002, International Journal of Foundations of Computer Science, V13, P571, DOI 10.1142/S012905410200128X
   Klarlund Nils, 2001, Mona Version 1.4: User Manual
   Komuravelli A, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P89, DOI 10.1109/FMCAD.2015.7542257
   Kroening Daniel, 2016, Decision Procedures: An AlgorithmicPoint of View, V2
   Lahiri SK, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1297658.1297662
   Lahiri Shuvendu K., 2004, INT C VER MOD CHECK, P267
   Lahiri SK, 2004, LECT NOTES COMPUT SC, V3114, P135
   Liffiton MH, 2016, CONSTRAINTS, V21, P223, DOI 10.1007/s10601-015-9183-0
   Lin AW, 2016, LECT NOTES COMPUT SC, V9780, P112, DOI 10.1007/978-3-319-41540-6_7
   Lin Anthony W., 2022, Model Checking, Synthesis, and Learning: Essays Dedicated to Bengt Jonsson on The Occasion of His 60th Birthday, P97
   Ma HJ, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P370, DOI 10.1145/3341301.3359651
   Malkis A, 2007, LECT NOTES COMPUT SC, V4634, P218
   Mann Makai, 2022, Logical Methods in Computer Science (LMCS), V18, P131
   Manna Z., 2012, The temporal logic of reactive and concurrent systems: Specification
   McCarthy John, 1993, Program Verification: Fundamental Issues in Computer Science, P35
   McMillan KL, 2008, LECT NOTES COMPUT SC, V4963, P413, DOI 10.1007/978-3-540-78800-3_31
   McMillan KL, 2020, LECT NOTES COMPUT SC, V12225, P190, DOI 10.1007/978-3-030-53291-8_12
   McMillan KL, 2018, LECT NOTES COMPUT SC, V11002, P43, DOI 10.1007/978-3-319-99725-4_4
   McMillan KL, 2018, LECT NOTES COMPUT SC, V10981, P191, DOI 10.1007/978-3-319-96145-3_11
   Padon O, 2021, FORM METHOD SYST DES, V57, P246, DOI 10.1007/s10703-021-00377-1
   Padon O, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158114
   Pani T, 2021, FORM METHOD SYST DES, V57, P270, DOI 10.1007/s10703-021-00370-8
   Pani Thomas, 2023, Formal Methods in System Design (FMSD), V60, P1
   Peled MI, 2023, LECT NOTES COMPUT SC, V14000, P74, DOI 10.1007/978-3-031-27481-7_6
   Popeea C, 2012, LECT NOTES COMPUT SC, V7214, P237, DOI 10.1007/978-3-642-28756-5_17
   Schuppan V, 2006, ELECTRON NOTES THEOR, V149, P79, DOI 10.1016/j.entcs.2005.11.018
   Seghir MN, 2009, LECT NOTES COMPUT SC, V5673, P3, DOI 10.1007/978-3-642-03237-0_3
   Shi XM, 2021, LECT NOTES COMPUT SC, V12760, P149, DOI 10.1007/978-3-030-81688-9_7
   Taube M, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P662, DOI 10.1145/3192366.3192414
   van Dalen Dirk, 1994, Logic and structure, V3
   Vardi M. Y., 1986, Proceedings of the Symposium on Logic in Computer Science (Cat. No.86CH2321-8), P332
   Yao Peisen, 2020, INT S SOFTW TEST AN, P38
NR 95
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 22
DI 10.1145/3632864
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400023
OA gold
DA 2024-08-05
ER

PT J
AU Ding, Y
   Min, MJ
   Kaiser, G
   Ray, B
AF Ding, Yangruibo
   Min, Marcus J.
   Kaiser, Gail
   Ray, Baishakhi
TI CYCLE: Learning to Self-Refine the Code Generation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Code Language Models; Source Code Modeling; Code Generation; Iterative
   Programming
AB Pre-trained code language models have achieved promising performance in code generation and improved the programming efficiency of human developers. However, their self-refinement capability is typically overlooked by the existing evaluations of code LMs, which focus only on the accuracy of the one-time prediction. For the cases when code LMs fail to implement the correct program, developers actually find it hard to debug and fix the faulty prediction since it is not written by the developers themselves. Unfortunately, our study reveals that code LMs cannot efficiently self-refine their faulty generations as well.
   In this paper, we propose Cycle framework, learning to self-refine the faulty generation according to the available feedback, such as the execution results reported by the test suites. We evaluate Cycle on three popular code generation benchmarks, HumanEval, MBPP, and APPS. The results reveal that Cycle successfully maintains, sometimes improves, the quality of one-time code generation, while significantly improving the self-refinement capability of code LMs. We implement four variants of Cycle with varied numbers of parameters across 350M, 1B, 2B, and 3B, and the experiments show that Cycle consistently boosts the code generation performance, by up to 63.5%, across benchmarks and varied model sizes. We also notice that Cycle outperforms code LMs that have 3x more parameters in self-refinement.
C1 [Ding, Yangruibo; Min, Marcus J.; Kaiser, Gail; Ray, Baishakhi] Columbia Univ, New York, NY 10027 USA.
C3 Columbia University
RP Ding, Y (corresponding author), Columbia Univ, New York, NY 10027 USA.
EM yrbding@cs.columbia.edu; jm5025@columbia.edu; kaiser@cs.columbia.edu;
   rayb@cs.columbia.edu
OI Ding, Yangruibo/0000-0003-3224-6876; Kaiser, Gail/0000-0002-8791-1178;
   Min, Marcus J./0009-0003-3311-1065
FU IBM Ph.D. Fellowship; DARPA/NIWC-Pacific [N66001-21-C4018]; NSF
   [CNS-2247370, CCF-2221943, CCF-2313055, CCF-1845893, CCF-2107405]
FX We would like to thank the anonymous reviewers for their valuable
   feedback and comments. This work was supported in part by an IBM Ph.D.
   Fellowship, DARPA/NIWC-Pacific N66001-21-C4018, NSF CNS-2247370,
   CCF-2221943, CCF-2313055, CCF-1845893, and CCF-2107405. Any opinions,
   findings, conclusions, or recommendations expressed herein are those of
   the authors and do not necessarily reflect those of IBM, DARPA, or NSF.
CR Achiam OJ, 2023, Arxiv, DOI arXiv:2303.08774
   Allal LB, 2023, Arxiv, DOI [arXiv:2301.03988, 10.48550/arXiv.2301.03988]
   Amazon, 2023, Amazon codewhisperer: Build applications faster and more securely with your ai coding companion
   Anthropic, 2023, Introducing claude
   Austin J., 2021, arXiv, DOI DOI 10.48550/ARXIV.2108.07732
   Brown TB, 2020, Arxiv, DOI [arXiv:2005.14165, 10.48550/arXiv.2005.14165, DOI 10.48550/ARXIV.2005.14165]
   Barke S, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586030
   Bavarian M, 2022, Arxiv, DOI [arXiv:2207.14255, DOI 10.48550/ARXIV.2207.14255]
   Chen M., 2021, arXiv, DOI DOI 10.48550/ARXIV.2107.03374
   Chen XY, 2023, Arxiv, DOI arXiv:2304.05128
   Christiano P, 2017, Arxiv, DOI [arXiv:1706.03741, DOI 10.48550/ARXIV.1706.03741]
   Ding YRB, 2020, IEEE INT CONF AUTOM, P275, DOI 10.1145/3324884.3416587
   Fried D, 2023, Arxiv, DOI [arXiv:2204.05999, 10.48550/ARXIV.2204.05999]
   Gao L, 2020, Arxiv, DOI arXiv:2101.00027
   GitHub, 2021, Github copilot: Your ai pair programmer
   Guo Q, 2023, Arxiv, DOI arXiv:2309.08221
   He JX, 2023, PROCEEDINGS OF THE 2023 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, CCS 2023, P1865, DOI 10.1145/3576915.3623175
   Hendrycks Dan, 2021, P NEUR INF PROC SYST, V1
   Holtzman A., 2020, INT C LEARNING REPRE
   Huang J, 2024, Arxiv, DOI arXiv:2310.01798
   HuggingFace, 2023, Hugging Face Model Hub
   Kaplan J, 2020, Arxiv, DOI [arXiv:2001.08361, DOI 10.48550/ARXIV.2001.08361]
   Kocetkov Denis, 2022, arXiv
   Kudo T, 2018, CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2018): PROCEEDINGS OF SYSTEM DEMONSTRATIONS, P66
   Li RY, 2023, Arxiv, DOI arXiv:2305.06161
   Li YJ, 2022, SCIENCE, V378, P1092, DOI 10.1126/science.abq1158
   Liu Hao, 2023, Forgetful causal masking makes causal language models better zero-shot learners
   Ziegler DM, 2020, Arxiv, DOI [arXiv:1909.08593, DOI 10.48550/ARXIV.1909.08593]
   Madaan A, 2023, Arxiv, DOI [arXiv:2303.17651, DOI 10.48550/ARXIV.2303.17651]
   Mirzayanov Mike, 2020, Codeforces: Results of 2020
   Mishra S, 2022, PROCEEDINGS OF THE 60TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (ACL 2022), VOL 1: (LONG PAPERS), P3470
   Nair V, 2023, Arxiv, DOI arXiv:2303.17071
   Nijkamp E., 2023, 11 INT C LEARN REPR
   Nijkamp E, 2023, Arxiv, DOI arXiv:2305.02309
   OpenAI, 2022, Introducing chatgpt
   Ouyang L., 2022, arXiv
   Paszke A, 2019, ADV NEUR IN, V32
   Puri R., 2021, arXiv
   Radford A., 2018, Improving language understanding by generative pre-training, P850
   Radford A., 2019, OpenAI blog, V1, P9
   Roziere B, 2024, Arxiv, DOI arXiv:2308.12950
   Sanh Victor, 2021, arXiv
   Shinn N, 2023, Arxiv, DOI arXiv:2303.11366
   Srivastava N, 2014, J MACH LEARN RES, V15, P1929
   Stiennon N, 2022, Arxiv, DOI arXiv:2009.01325
   Tillmann C, 2003, COMPUT LINGUIST, V29, P97, DOI 10.1162/089120103321337458
   Wang Ximei, 2021, INT C MACH LEARN ICM
   Wang XZ, 2015, UNCERTAINTY IN ARTIFICIAL INTELLIGENCE, P922
   Wei J., 2021, arXiv
   Wei JS, 2022, Arxiv, DOI arXiv:2206.07682
   West P, 2022, NAACL 2022: THE 2022 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES, P4602
   Wolf T, 2020, PROCEEDINGS OF THE 2020 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING: SYSTEM DEMONSTRATIONS, P38
   Xu Frank F., 2022, MAPS 2022: Proceedings of the 6th ACM SIGPLAN International Symposium on Machine Programming, P1, DOI 10.1145/3520312.3534862
   Zan DG, 2023, PROCEEDINGS OF THE 61ST ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, ACL 2023, VOL 1, P7443
   Zhang KC, 2023, Arxiv, DOI arXiv:2305.04087
NR 55
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 108
DI 10.1145/3649825
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600015
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Lamba, A
   Taylor, M
   Beardsley, V
   Bambeck, J
   Bond, MD
AF Lamba, Ada
   Taylor, Max
   Beardsley, Vincent
   Bambeck, Jacob
   Bond, Michael D.
TI Cocoon: Static Information Flow Control in Rust
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE information flow control; type and effect systems; Rust
AB Information flow control (IFC) provides confidentiality by enforcing noninterference, which ensures that high-secrecy values cannot affect low-secrecy values. Prior work introduces fine-grained IFC approaches that modify the programming language and use nonstandard compilation tools, impose run-time overhead, or report false secrecy leaks-all of which hinder adoption.
   This paper presents Cocoon, a Rust library for static type-based IFC that uses the unmodified Rust language and compiler. The key insight of Cocoon lies in leveraging Rust's type system and procedural macros to establish an effect system that enforces noninterference. A performance evaluation shows that using Cocoon increases compile time but has no impact on application performance. To demonstrate Cocoon's utility, we retrofitted two popular Rust programs, the Spotify TUI client and Mozilla's Servo browser engine, to use Cocoon to enforce limited confidentiality policies.
C1 [Lamba, Ada; Taylor, Max; Beardsley, Vincent; Bambeck, Jacob; Bond, Michael D.] Ohio State Univ, Columbus, OH 43210 USA.
C3 University System of Ohio; Ohio State University
RP Lamba, A (corresponding author), Ohio State Univ, Columbus, OH 43210 USA.
EM lamba.39@osu.edu; taylor.2751@osu.edu; beardsley.49@osu.edu;
   bambeck.14@osu.edu; mikebond@cse.ohio-state.edu
OI Taylor, Max/0009-0005-7873-9694; Bond, Michael/0000-0002-8971-4944
FU NSF [CSR-2106117, XPS-1629126, CNS-2207202]
FX We thank the anonymous reviewers for valuable feedback, Ethar Qawasmeh
   for help in the early stages of the project, Chris Xiong for help with
   code and ideas, and Chujun Geng for helpful feedback and discussions.
   This work is supported by NSF grants CSR-2106117, XPS-1629126, and
   CNS-2207202.
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Acay C, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P740, DOI 10.1145/3453483.3454074
   [Anonymous], 1999, P 26 ACM SIGPLAN SIG
   [Anonymous], 2010, The Rust Language
   Askarov A, 2008, LECT NOTES COMPUT SC, V5283, P333
   Austin Thomas H., 2009, P ACM SIGPLAN 4 WORK, P113, DOI DOI 10.1145/1554339.1554353
   Balasubramanian A, 2017, OPER SYST REV, V51, P94, DOI 10.1145/3139645.3139660
   Brady Edwin, 2007, Idris
   Chapman R., 2004, Ada Letters, V24, P39
   Chong Stephen Nathaniel, 2008, Expressive and Enforceable Information Security Policies
   Crichton W, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P1, DOI 10.1145/3519939.3523445
   Debian benchmarksgame-team, 2022, The Computer Language 22.05 Benchmarks Game
   DENNING DE, 1976, COMMUN ACM, V19, P236, DOI 10.1145/360051.360056
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   Gregersen Simon, 2019, Principles of Security and Trust, P51, DOI [10.1007/978-3-030-17138-4_3, DOI 10.1007/978-3-030-17138-4_3]
   Hammer Christian, 2006, P IEEE INT S SEC SOF
   Jian Xiang, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P18, DOI 10.1109/SP40001.2021.00002
   Kozyri Elisavet, 2016, Technical Report 1813-41194
   Krohn Maxwell, 2007, Operating Systems Review, V41, P321, DOI 10.1145/1323293.1294293
   Lamba Ada, 2024, Zenodo, DOI 10.5281/ZENODO.10798978
   LAMPSON BW, 1973, COMMUN ACM, V16, P613, DOI 10.1145/362375.362389
   Linux Foundation, 2022, Servo
   Mozilla Research, 2020, The Rust Language
   Myers AC, 2004, P IEEE CSFW, P172, DOI 10.1109/CSFW.2004.1310740
   Myers Andrew C., 2006, Jif 3.0: Java information flow
   Narayan S, 2020, PROCEEDINGS OF THE 29TH USENIX SECURITY SYMPOSIUM, P699
   Nielson F, 1999, LECT NOTES COMPUT SC, V1710, P114
   Nipkow T., 2012, NATO Science for Peace and Security Series-D: Information and Communication Security, V33, P319, DOI [10.3233/978-1-61499-028-4-319, DOI 10.3233/978-1-61499-028-4-319]
   Rotenberg Leo J., 1973, Ph. D. Dissertation
   Roy I, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P63, DOI 10.1145/1542476.1542484
   Russo A, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P280, DOI 10.1145/2784731.2784756
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Simonet Vincent, 2003, Technical Report 0282
   Smith G., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P355, DOI 10.1145/268946.268975
   Stack Overflow, 2022, Annual Developer Survey
   Surbatovich M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591250
   The Rust Foundation, 2022, Prodution Users-Rust Programming Language
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Zanioli Matteo, 2012, P 27 ANN ACM S APPL, P1308, DOI [10.1145/2245276.2231983, DOI 10.1145/2245276.2231983]
   Zdancewic Steve, 2000, technical report
   Zeldovich Nickolai., 2008, P 5 USENIX S NETWORK, P293
   Zheng L, 2005, INT FED INFO PROC, V173, P27
NR 42
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 100
DI 10.1145/3649817
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600007
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Liu, J
   Zhao, ZY
   Ding, ZJ
   Brock, B
   Rong, HB
   Zhang, ZR
AF Liu, Jie
   Zhao, Zhongyuan
   Ding, Zijian
   Brock, Benjamin
   Rong, Hongbo
   Zhang, Zhiru
TI UniSparse: An Intermediate Language for General Sparse Format
   Customization
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE sparse data formats; compilers; programming languages; heterogeneous
   systems
AB The ongoing trend of hardware specialization has led to a growing use of custom data formats when processing sparse workloads, which are typically memory-bound. These formats facilitate optimized software/hardware implementations by utilizing sparsity pattern- or target-aware data structures and layouts to enhance memory access latency and bandwidth utilization. However, existing sparse tensor programming models and compilers offer little or no support for productively customizing the sparse formats. Additionally, because these frameworks represent formats using a limited set of per-dimension attributes, they lack the flexibility to accommodate numerous new variations of custom sparse data structures and layouts. To overcome this deficiency, we propose UniSparse, an intermediate language that provides a unified abstraction for representing and customizing sparse formats. Unlike the existing attribute-based frameworks, UniSparse decouples the logical representation of the sparse tensor (i.e., the data structure) from its low-level memory layout, enabling the customization of both. As a result, a rich set of format customizations can be succinctly expressed in a small set of well-defined query, mutation, and layout primitives. We also develop a compiler leveraging the MLIR infrastructure, which supports adaptive customization of formats, and automatic code generation of format conversion and compute operations for heterogeneous architectures. We demonstrate the efficacy of our approach through experiments running commonly-used sparse linear algebra operations with specialized formats on multiple different hardware targets, including an Intel CPU, an NVIDIA GPU, an AMD Xilinx FPGA, and a simulated processing-in-memory (PIM) device.
C1 [Liu, Jie; Zhao, Zhongyuan; Zhang, Zhiru] Cornell Univ, Ithaca, NY 14850 USA.
   [Ding, Zijian] Univ Calif Los Angeles, Los Angeles, CA USA.
   [Brock, Benjamin; Rong, Hongbo] Intel, San Jose, CA USA.
C3 Cornell University; University of California System; University of
   California Los Angeles; Intel Corporation
RP Liu, J (corresponding author), Cornell Univ, Ithaca, NY 14850 USA.
EM jl3952@cornell.edu; zhozh@qti.qualcomm.com; bradyd@cs.ucla.edu;
   benjamin.brock@intel.com; hongbo.rong@intel.com; zhiruz@cornell.edu
RI Liu, Jie/JLL-6103-2023
OI Liu, Jie/0000-0003-1534-3500; Rong, Hongbo/0000-0002-3275-7791; Brock,
   Benjamin/0000-0003-1488-1622; Zhang, Zhiru/0000-0002-0778-0308
FU DARPA, NSF [1909661, 2019306, 2118709, 2212371]; AFRL; DARPA
   [FA8650-18-2-7863]
FX This work was supported in part by ACE, one of the seven centers in JUMP
   2.0, a Semiconductor Research Corporation (SRC) program sponsored by
   DARPA, NSF Awards #1909661, #2019306, #2118709 and #2212371, and by AFRL
   and DARPA under agreement FA8650-18-2-7863.
CR Arnold G, 2010, ACM SIGPLAN NOTICES, V45, P249, DOI 10.1145/1932681.1863581
   Bader BW, 2007, SIAM J SCI COMPUT, V30, P205, DOI 10.1137/060676489
   Bell N, 2009, PROCEEDINGS OF THE CONFERENCE ON HIGH PERFORMANCE COMPUTING NETWORKING, STORAGE AND ANALYSIS
   Bik A, 2022, ACM T ARCHIT CODE OP, V19, DOI 10.1145/3544559
   Bik J. C., 1993, Proceedings of the 7th international conference on Supercomputing, DOI 10/dvjjwk00000
   Boisvert R. F., 1996, The matrix market exchange formats: Initial design, V5935
   Buluç A, 2008, 2008 IEEE INTERNATIONAL SYMPOSIUM ON PARALLEL & DISTRIBUTED PROCESSING, VOLS 1-8, P1876
   Buluç A, 2009, SPAA'09: PROCEEDINGS OF THE TWENTY-FIRST ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P233
   Choi JW, 2010, ACM SIGPLAN NOTICES, V45, P115, DOI 10.1145/1837853.1693471
   Chou S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P823, DOI 10.1145/3385412.3385963
   Chou S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276493
   Davis TA, 2011, ACM T MATH SOFTWARE, V38, DOI 10.1145/2049662.2049663
   Devic A, 2022, CONF PROC INT SYMP C, P231, DOI 10.1145/3470496.3527431
   Fowers J, 2014, ANN IEEE SYM FIELD P, P36, DOI 10.1109/FCCM.2014.23
   Fukaya T, 2021, Arxiv, DOI arXiv:2105.04937
   Gale T, 2019, Arxiv, DOI [arXiv:1902.09574, DOI 10.48550/ARXIV.1902.09574]
   Guo DH, 2016, INT J HIGH PERFORM C, V30, P103, DOI 10.1177/1094342015593156
   Higham N.J., 2008, arXiv, DOI [DOI 10.1137/1.9780898718027, 10.1137/1.9780898717938, DOI 10.1137/1.9780898717938]
   Hu Weihua, 2020, Advances in Neural Information Processing Systems., DOI [10.5555/3495724.3497579, DOI 10.5555/3495724.3497579]
   Hu YW, 2021, ICCAD-IEEE ACM INT, DOI 10.1109/ICCAD51958.2021.9643582
   Im Eun-Jin, 1998, WORKSH PROF FEEDB DI, V139
   Iscen A, 2019, PROC CVPR IEEE, P5065, DOI 10.1109/CVPR.2019.00521
   Johansson Robert, 2015, Numerical Python: A Practical Techniques Approach for Industry, P235, DOI [10.1007/978-1-4842-0553-2_10, DOI 10.1007/978-1-4842-0553-2_10]
   Kincaid D.R., 1989, ITPACKV 2D USERS GUI
   Kjolstad F, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133901
   Kjolstad Fredrik, 2019, The Tensor Algebra Compiler.
   Kotlyar V., 1997, Compiling parallel sparse code for user-defined data structures
   Lattner C, 2020, Arxiv, DOI [arXiv:2002.11054, DOI 10.48550/ARXIV.2002.11054]
   Leskovec Jure, 2014, SNAP Datasets: Stanford Large Network Dataset Collection, DOI [10.1145/2898361, DOI 10.1145/2898361]
   Linghao Song, 2022, FPGA '22: Proceedings of the 2022 ACM/SIGDA International Symposium on Field-Programmable Gate Arrays, P65, DOI 10.1145/3490422.3502357
   Liu Jie, 2024, Zenodo, DOI 10.5281/ZENODO.10464500
   Liu Jie, 2024, UniSparse: An Intermediate Language for General Sparse Format Customization
   Pugh W, 1999, LECT NOTES COMPUT SC, V1656, P213, DOI 10.1007/3-540-48319-5_14
   Smith, 2017, FROSTT FORMIDABLE RE
   Song LH, 2022, PROCEEDINGS OF THE 59TH ACM/IEEE DESIGN AUTOMATION CONFERENCE, DAC 2022, P211, DOI 10.1145/3489517.3530420
   Srivastava N, 2020, 2020 53RD ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO 2020), P766, DOI 10.1109/MICRO50266.2020.00068
   Tian RQ, 2021, PROCEEDINGS OF THE SEVENTH ANNUAL WORKSHOP ON THE LLVM COMPILER INFRASTRUCTURE IN HPC (LLVM-HPC2021), P27, DOI 10.1109/LLVMHPC54804.2021.00009
   Ye Zihao, 2023, ASPLOS 2023: Proceedings of the 28th ACM International Conference on Architectural Support for Programming Languages and Operating Systems, P660, DOI 10.1145/3582016.3582047
NR 38
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 99
DI 10.1145/3649816
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600006
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Buna-Marginean, A
   Cheval, V
   Shirmohammadi, M
   Worrell, J
AF Buna-Marginean, Alex
   Cheval, Vincent
   Shirmohammadi, Mahsa
   Worrell, James
TI On Learning Polynomial Recursive Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Weighted automata; Exact learning; Holonomic sequences; P-finite
   sequences; Automata learning
ID QUERIES
AB We introduce the class of P-finite automata. These are a generalisation of weighted automata, in which the weights of transitions can depend polynomially on the length of the input word. P-finite automata can also be viewed as simple tail-recursive programs in which the arguments of recursive calls can non-linearly refer to a variable that counts the number of recursive calls. The nomenclature is motivated by the fact that over a unary alphabet P-finite automata compute so-called P-finite sequences, that is, sequences that satisfy a linear recurrence with polynomial coefficients. Our main result shows that P-finite automata can be learned in polynomial time in Angluin's MAT exact learning model. This generalises the classical results that deterministic finite automata and weighted automata over a field are respectively polynomial-time learnable in the MAT model.
C1 [Buna-Marginean, Alex; Cheval, Vincent; Worrell, James] Univ Oxford, Oxford, England.
   [Shirmohammadi, Mahsa] Univ Paris Cite, CNRS, IRIF, Paris, France.
C3 University of Oxford; Centre National de la Recherche Scientifique
   (CNRS); Universite Paris Cite
RP Buna-Marginean, A (corresponding author), Univ Oxford, Oxford, England.
EM alex.bunamarginean@spc.ox.ac.uk; vincent.cheval@cs.ox.ac.uk;
   mahsa@irif.fr; jbw@cs.ox.ac.uk
OI Cheval, Vincent/0000-0002-3622-2129
FU EPSRC Centre for Doctoral Training in Modern Statistics and Statistical
   Machine Learning [EP/S023151/1]; International Emerging Actions grant
   [IEA'22]; ANR [ANR-22-CE48-0005]; grant CyphAI (ANR-CREST-JST); UKRI
   Frontier Research Grant [EP/X033813/]
FX Alex Buna-Marginean is supported by the EPSRC Centre for Doctoral
   Training in Modern Statistics and Statistical Machine Learning
   (EP/S023151/1). Mahsa Shirmohammadi is supported by International
   Emerging Actions grant (IEA'22), by ANR grant VeSyAM (ANR-22-CE48-0005)
   and by the grant CyphAI (ANR-CREST-JST). James Worrell was supported by
   UKRI Frontier Research Grant EP/X033813/
CR ANGLUIN D, 1995, J COMPUT SYST SCI, V50, P336, DOI 10.1006/jcss.1995.1026
   ANGLUIN D, 1987, INFORM COMPUT, V75, P87, DOI 10.1016/0890-5401(87)90052-6
   Beimel A, 2000, J ACM, V47, P506, DOI 10.1145/337244.337257
   Benedikt M, 2017, IEEE S LOG
   Berstel J, 1988, Rational series and their languages, V12
   Berstel Jean, 2010, Encyclopedia of Mathematics and its Applications, V137
   Bollig B, 2009, 21ST INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI-09), PROCEEDINGS, P1004
   Bollig B, 2010, LECT NOTES COMPUT SC, V6174, P360, DOI 10.1007/978-3-642-14295-6_32
   Buna-Marginean A, 2023, Arxiv, DOI arXiv:2310.14725
   FLIESS M, 1974, J MATH PURE APPL, V53, P197
   Howar Falk, 2019, Computing and Software Science: State of the Art and Perspectives. Lecture Notes in Computer Science (LNCS 10000), P563, DOI 10.1007/978-3-319-91908-9_26
   Humenberger A, 2017, PROCEEDINGS OF THE 2017 ACM INTERNATIONAL SYMPOSIUM ON SYMBOLIC AND ALGEBRAIC COMPUTATION (ISSAC'17), P221, DOI 10.1145/3087604.3087623
   Humenberger A, 2018, LECT NOTES COMPUT SC, V10747, P226, DOI 10.1007/978-3-319-73721-8_11
   Isberner M, 2015, LECT NOTES COMPUT SC, V9206, P487, DOI 10.1007/978-3-319-21690-4_32
   KANNAN R, 1985, THEOR COMPUT SCI, V39, P69, DOI 10.1016/0304-3975(85)90131-8
   Kauers M, 2011, TEXT MG SYMB COMPUT, P1, DOI 10.1007/978-3-7091-0445-3
   Kiefer S, 2020, Arxiv, DOI arXiv:2009.01217
   Kovács L, 2008, LECT NOTES COMPUT SC, V4963, P249, DOI 10.1007/978-3-540-78800-3_18
   Michaliszyn Jakub, 2022, 47 INT S MATH FDN CO, V74, P1
   Moerman J, 2017, ACM SIGPLAN NOTICES, V52, P613, DOI 10.1145/3093333.3009879
   Newman M, 1997, LINEAR ALGEBRA APPL, V254, P367, DOI 10.1016/S0024-3795(96)00163-2
   Reutenauer C, 2012, ELECTRON J COMB, V19
   SCHUTZENBERGER MP, 1961, INFORM CONTROL, V4, P245, DOI 10.1016/S0019-9958(61)80020-X
   Smith Henry John Stephen, 1861, Philosophical Transactions of the Royal Society of London, V151, P293, DOI DOI 10.1098/RSTL.1861.0016
   TZENG WG, 1992, SIAM J COMPUT, V21, P216, DOI 10.1137/0221017
   van Heerdt G, 2020, LECT NOTES COMPUT SC, V12077, P602, DOI 10.1007/978-3-030-45231-5_31
NR 26
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 34
DI 10.1145/3632876
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400035
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Cyphert, J
   Kincaid, Z
AF Cyphert, John
   Kincaid, Zachary
TI Solvable Polynomial Ideals: The Ideal Reflection for Program Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Algebraic program analysis; polynomial invariants; monotone program
   analysis
ID INVARIANT GENERATION
AB This paper presents a program analysis method that generates program summaries involving polynomial arithmetic. Our approach builds on prior techniques that use solvable polynomial maps for summarizing loops. These techniques are able to generate all polynomial invariants for a restricted class of programs, but cannot be applied to programs outside of this class-for instance, programs with nested loops, conditional branching, unstructured control flow, etc. There currently lacks approaches to apply these prior methods to the case of general programs. This paper bridges that gap. Instead of restricting the kinds of programs we can handle, our method abstracts every loop into a model that can be solved with prior techniques, bringing to bear prior work on solvable polynomial maps to general programs. While no method can generate all polynomial invariants for arbitrary programs, our method establishes its merit through a monotonicty result. We have implemented our techniques, and tested them on a suite of benchmarks from the literature. Our experiments indicate our techniques show promise on challenging verification tasks requiring non-linear reasoning.
C1 [Cyphert, John] Univ Wisconsin, Madison, WI 53706 USA.
   [Kincaid, Zachary] Princeton Univ, Princeton, NJ USA.
C3 University of Wisconsin System; University of Wisconsin Madison;
   Princeton University
RP Cyphert, J (corresponding author), Univ Wisconsin, Madison, WI 53706 USA.
EM jcyphert@wisc.edu; zkincaid@cs.princeton.edu
OI Kincaid, Zachary/0000-0002-7294-9165
FU Google PhD fellowship; NSF [1942537]
FX We would like to thank Tom Reps for his contributions to the discussions
   that lead to this paper. This work was supported, in part, by a gift
   from Rajiv and Ritu Batra, a Google PhD fellowship, and by the NSF under
   grant number 1942537. Any opinions, findings, and conclusions or
   recommendations expressed in this publication are those of the authors,
   and do not necessarily reflect the views of the sponsoring entities.
CR Afzai M, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P1138, DOI 10.1109/ASE.2019.00121
   Amrollahi D, 2022, LECT NOTES COMPUT SC, V13790, P19, DOI 10.1007/978-3-031-22308-2_3
   Beyer Dirk, 2023, Tools and Algorithms for the Construction and Analysis of Systems: 29th International Conference, TACAS 2023, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2022, Proceedings. Lecture Notes in Computer Science (13994), P495, DOI 10.1007/978-3-031-30820-8_29
   Buchberger B., 1976, SIGSAM Bull., V10, P19, DOI [DOI 10.1145/1088216.1088219.487, 10.1145/ 1088216.1088219, DOI 10.1145/1088216.1088219]
   Cachera D, 2012, LECT NOTES COMPUT SC, V7460, P58, DOI 10.1007/978-3-642-33125-1_7
   Chatterjee K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P672, DOI 10.1145/3385412.3385969
   COx DAVID A., 2013, Ideals, Varieties, and Algorithms: An Introduction to Computational Algebraic Geometry and Commutative Algebra, DOI DOI 10.1007/978-0-387-35651-8
   Cyphert John, 2023, Zenodo, DOI 10.5281/ZENODO.10069757
   Cyphert J, 2023, Arxiv, DOI arXiv:2311.04092
   Cyphert J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290358
   de Oliveira S, 2016, LECT NOTES COMPUT SC, V9938, P479, DOI 10.1007/978-3-319-46520-3_30
   Everest G., 2003, Mathematical Surveys and Monographs
   Farzan A, 2015, PROCEEDINGS OF THE 15TH CONFERENCE ON FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD 2015), P57, DOI 10.1109/FMCAD.2015.7542253
   Faugére JC, 1999, J PURE APPL ALGEBRA, V139, P61, DOI 10.1016/S0022-4049(99)00005-5
   Faugère JC, 2010, LECT NOTES COMPUT SC, V6327, P84, DOI 10.1007/978-3-642-15582-6_17
   Frohn F, 2020, LECT NOTES COMPUT SC, V12389, P89, DOI 10.1007/978-3-030-65474-0_5
   Goharshady AK, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586052
   Guoqiang Ge, 1993, Ph. D. Dissertation
   Heizmann M, 2009, LECT NOTES COMPUT SC, V5673, P69, DOI 10.1007/978-3-642-03237-0_7
   Hrushovski E, 2023, J ACM, V70, DOI 10.1145/3614319
   Hrushovski E, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P530, DOI 10.1145/3209108.3209142
   Humenberger A, 2018, LECT NOTES COMPUT SC, V10747, P226, DOI 10.1007/978-3-319-73721-8_11
   Johansson F, 2017, IEEE T COMPUT, V66, P1281, DOI 10.1109/TC.2017.2690633
   Kauers M, 2008, J SYMB COMPUT, V43, P787, DOI 10.1016/j.jsc.2008.03.002
   Kincaid Z, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571237
   Kincaid Z, 2021, LECT NOTES COMPUT SC, V12759, P46, DOI 10.1007/978-3-030-81685-8_3
   Kincaid Z, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158142
   Kojima K, 2018, THEOR COMPUT SCI, V747, P33, DOI 10.1016/j.tcs.2018.06.005
   Kovács L, 2008, LECT NOTES COMPUT SC, V4963, P249, DOI 10.1007/978-3-540-78800-3_18
   Müller-Olm M, 2004, LECT NOTES COMPUT SC, V3142, P1016
   Müller-Olm M, 2004, INFORM PROCESS LETT, V91, P233, DOI 10.1016/j.ipl.2004.05.004
   Rodríguez-Carbonell E, 2007, J SYMB COMPUT, V42, P443, DOI 10.1016/j.jsc.2007.01.002
   Rodriguez-Carbonell E, 2004, P ISSAC, P266, DOI DOI 10.1145/1005285.1005324
   Sankaranarayanan S, 2004, ACM SIGPLAN NOTICES, V39, P318, DOI 10.1145/982962.964028
   Silverman J, 2019, LECT NOTES COMPUT SC, V11562, P97, DOI 10.1007/978-3-030-25543-5_7
   The FLINT team, 2023, FLINT: Fast Library for Number Theory
   ULAM SM, 1947, B AM MATH SOC, V53, P1120
   Wendler Philipp, 2023, Bench Exec 3.16
   Zhu SW, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1296, DOI 10.1145/3453483.3454110
   Zhu SW, 2021, LECT NOTES COMPUT SC, V12760, P51, DOI 10.1007/978-3-030-81688-9_3
NR 40
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 25
DI 10.1145/3632867
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400026
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Elad, N
   Padon, O
   Shoham, S
AF Elad, Neta
   Padon, Oded
   Shoham, Sharon
TI An Infinite Needle in a Finite Haystack: Finding Infinite Counter-Models
   in Deductive Verification
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE deductive verification; counter-models; infinite models; Paxos
ID THEOREM PROVER; DECIDABILITY; AUTOMATA; SATISFIABILITY; INDUCTION
AB First-order logic, and quantifiers in particular, are widely used in deductive verification of programs and systems. Quantifiers are essential for describing systems with unbounded domains, but prove difficult for automated solvers. Significant effort has been dedicated to finding quantifier instantiations that establish unsatisfiability of quantified formulas, thus ensuring validity of a system's verification conditions. However, in many cases the formulas are satisfiable-this is often the case in intermediate steps of the verification process, e.g., when an invariant is not yet inductive. For such cases, existing tools are limited to finding finite models as counterexamples. Yet, some quantified formulas are satisfiable but only have infinite models, which current solvers are unable to find. Such infinite counter-models are especially typical when first-order logic is used to approximate the natural numbers, the integers, or other inductive definitions such as linked lists, which is common in deductive verification. The inability of solvers to find infinite models makes them diverge in these cases, providing little feedback to the user as they try to make progress in their verification attempts.
   In this paper, we tackle the problem of finding such infinite models, specifically, finite representations thereof that can be presented to the user of a deductive verification tool. These models give insight into the verification failure, and allow the user to identify and fix bugs in the modeling of the system and its properties. Our approach consists of three parts. First, we introduce symbolic structures as a way to represent certain infinite models, and show they admit an efficient model checking procedure. Second, we describe an effective model finding procedure that symbolically explores a given (possibly infinite) family of symbolic structures in search of an infinite model for a given formula. Finally, we identify a new decidable fragment of first-order logic that extends and subsumes the many-sorted variant of EPR, where satisfiable formulas always have a model representable by a symbolic structure within a known family, making our model finding procedure a decision procedure for that fragment.
   We evaluate our approach on examples from the domains of distributed consensus protocols and of heap-manipulating programs (specifically, linked lists). Our implementation quickly finds infinite counter-models that demonstrate the source of verification failures in a simple way, while state-of-the-art SMT solvers and theorem provers such as Z3, cvc5, and Vampire diverge or return "unknown".
C1 [Elad, Neta; Shoham, Sharon] Tel Aviv Univ, Tel Aviv, Israel.
   [Padon, Oded] VMware Res, Palo Alto, CA USA.
C3 Tel Aviv University; VMware, Inc.
RP Elad, N (corresponding author), Tel Aviv Univ, Tel Aviv, Israel.
EM netaelad@mail.tau.ac.il; oded.padon@gmail.com;
   sharon.shoham@cs.tau.ac.il
OI Shoham Buchbinder, Sharon/0000-0002-7226-3526
FU European Research Council under the European Union [759102-SVIS];
   Israeli Science Foundation (ISF) [2117/23]
FX We thank the anonymous reviewers and the artifact evaluation committee
   for comments which improved the paper. We thank Raz Lotan and Yotam
   Feldman for insightful discussions and comments. The research leading to
   these results has received funding from the European Research Council
   under the European Union's Horizon 2020 research and innovation
   programme (grant agreement No [759102-SVIS]). This research was
   partially supported by the Israeli Science Foundation (ISF) grant No.
   2117/23.
CR Ackermann W, 1928, MATH ANN, V100, P638, DOI 10.1007/BF01448869
   Alur R, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 1932, Ergebnisse eines mathematischen Kolloquiums
   Bachmair L., Handbook of Automated Reasoning, V31, P19, DOI [10.1016/b978-044450813-3/50004-7, DOI 10.1016/B978-044450813-3/50004-7]
   Ball T, 2014, ACM SIGPLAN NOTICES, V49, P282, DOI [10.1145/2666356.2594317, 10.1145/2594291.2594317]
   Bansal K, 2015, LECT NOTES COMPUT SC, V9207, P87, DOI 10.1007/978-3-319-21668-3_6
   Barany Vince., 2011, Finite and Algorithmic Model Theory, P1, DOI [10.1017/CBO9780511974960.002, DOI 10.1017/CBO9780511974960.002]
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   BARRETT C., 2017, Technical report
   Baumgartner P, 2006, INT J ARTIF INTELL T, V15, P21, DOI 10.1142/S0218213006002552
   Baumgartner P, 2003, LECT NOTES ARTIF INT, V2741, P350
   Blanchette JC, 2010, LECT NOTES COMPUT SC, V6397, P127, DOI 10.1007/978-3-642-16242-8_10
   Blumensath A, 2004, THEOR COMPUT SYST, V37, P641, DOI 10.1007/s00224-004-1133-y
   Borger Egon, 2001, The Classical Decision Problem
   Bradley AR, 2006, LECT NOTES COMPUT SC, V3855, P427
   Buchi J. Richard, 1962, P INT C LOG METH PHI, P1, DOI DOI 10.1007/978-1-4613-8928-6_23
   BUCHI JR, 1969, J SYMBOLIC LOGIC, V34, P166, DOI 10.2307/2271090
   CHANG E, 1979, COMMUN ACM, V22, P281, DOI 10.1145/359104.359108
   Cooper D. C., 1972, Machine intelligence 7, P91
   D'Antoni L, 2021, COMMUN ACM, V64, P86, DOI 10.1145/3419404
   Danielski Daniel, 2019, MFCS (LIPIcs, V17, P1, DOI [10.4230/LIPIcs.MFCS.2019.17, DOI 10.4230/LIPICS.MFCS.2019.17]
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Moura L, 2007, LECT NOTES ARTIF INT, V4603, P183
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Dross C, 2016, J AUTOM REASONING, V56, P387, DOI 10.1007/s10817-015-9352-2
   Dutertre Bruno, 2006, The Yices SMT solver, P1
   Elad N, 2024, Arxiv, DOI [arXiv:2310.16762, 10.48550/arXiv.2310.16762, DOI 10.48550/ARXIV.2310.16762]
   Elad Neta, 2023, An Infinite Needle in a Finite Haystack: Finding Infinite Counter-Models in Deductive Verification (Artifact), DOI [10.5281/zenodo.10125136, DOI 10.5281/ZENODO.10125136]
   Elad Neta, An Infinite Needle in a Finite Haystack: Finding Infinite Counter-Models in Deductive Verification (Artifact), DOI [10.5281/zenodo.8404103, DOI 10.5281/ZENODO.8404103]
   Ge YT, 2009, LECT NOTES COMPUT SC, V5643, P306
   Gerth R., 1995, PROTOCOL SPECIFICATI, P3, DOI DOI 10.1007/978-3-642-59615-5
   Goel Aman, 2021, 2021 Formal Methods in Computer Aided Design (FMCAD), P112, DOI 10.34727/2021/isbn.978-3-85448-046-4_20
   Goel A, 2021, LECT NOTES COMPUT SC, V12673, P131, DOI 10.1007/978-3-030-76384-8_9
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   GUREVICH Y, 1976, J SYMBOLIC LOGIC, V41, P460, DOI 10.2307/2272244
   Hajdu Marton, 2021, 2021 Formal Methods in Computer Aided Design (FMCAD), P1, DOI 10.34727/2021/isbn.978-3-85448-046-4_34
   Hance T, 2021, PROCEEDINGS OF THE 18TH USENIX SYMPOSIUM ON NETWORKED SYSTEM DESIGN AND IMPLEMENTATION, P115
   Horbach M, 2013, LECT NOTES COMPUT SC, V8152, P198, DOI 10.1007/978-3-642-40885-4_14
   Howard Heidi, 2016, Schloss Dagstuhl-LeibnizZentrum fur Informatik, V70, DOI [10.4230/LIPIcs.OPODIS.2016.25, DOI 10.4230/LIPICS.OPODIS.2016.25]
   Hozzová P, 2021, LECT NOTES ARTIF INT, V12699, P361, DOI 10.1007/978-3-030-79876-5_21
   Itzhaky S, 2014, ACM SIGPLAN NOTICES, V49, P385, DOI 10.1145/2535838.2535854
   Itzhaky Shachar., 2013, CAV, P756, DOI 10.1007/978-3-642-39799-8_53
   Jacobs S, 2009, LECT NOTES COMPUT SC, V5643, P368, DOI 10.1007/978-3-642-02658-4_29
   Karbyshev A, 2017, J ACM, V64, DOI 10.1145/3022187
   Kaufmann M, 1997, IEEE T SOFTWARE ENG, V23, P203, DOI 10.1109/32.588534
   Khoussainov B., 1995, Logic and Computational Complexity. International Workshop LCC '94. Selected Papers, P367
   Klin B, 2016, ELECTRON P THEOR COM, P57, DOI 10.4204/EPTCS.207.3
   Koenig JR, 2022, LECT NOTES COMPUT SC, V13243, P338, DOI 10.1007/978-3-030-99524-9_18
   Lamport L, 1998, ACM T COMPUT SYST, V16, P133, DOI 10.1145/279227.279229
   Lamport Leslie, 2019, The Paxos Algorithm-or How to Win a Turing Award
   Leino KRM, 2012, LECT NOTES COMPUT SC, V7148, P315, DOI 10.1007/978-3-642-27940-9_21
   Lev-Ami T, 2000, LECT NOTES COMPUT SC, V1824, P280
   LEWIS HR, 1980, J COMPUT SYST SCI, V21, P317, DOI 10.1016/0022-0000(80)90027-6
   LOB MH, 1967, J SYMBOLIC LOGIC, V32, P563
   Löding C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158098
   Lynch Christopher, 2013, Programming Logics. Essays in Memory of Harald Ganzinger: LNCS 7797, P285, DOI 10.1007/978-3-642-37651-1_12
   Lynch Christopher, 2023, CEUR Workshop Proceedings, V3429, P18
   Ma HJ, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P370, DOI 10.1145/3341301.3359651
   Mathur Umang, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12079), P158, DOI 10.1007/978-3-030-45237-7_10
   Mathur U, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290359
   McMillan KL, 2020, LECT NOTES COMPUT SC, V12225, P190, DOI 10.1007/978-3-030-53291-8_12
   McMillan KL, 2018, LECT NOTES COMPUT SC, V11002, P43, DOI 10.1007/978-3-319-99725-4_4
   Moore J Strother, 2000, Computer-Aided Reasoning: ACL2 Case Studies, DOI DOI 10.1007/978-1-4757-3188-0
   MORTIMER M, 1975, Z MATH LOGIK, V21, P135, DOI 10.1002/malq.19750210118
   Murali A, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563354
   Neider D, 2018, LECT NOTES COMPUT SC, V10805, P232, DOI 10.1007/978-3-319-89960-2_13
   Padon O, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498712
   Padon O, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3140568
   Padon O, 2016, ACM SIGPLAN NOTICES, V51, P614, DOI [10.1145/2908080.2908118, 10.1145/2980983.2908118]
   Parsert Julian, 2023, EPiC Series in Computing, V94, P317, DOI 10
   Peltier N, 2003, LOG J IGPL, V11, P97, DOI 10.1093/jigpal/11.1.97
   Preiner M, 2017, LECT NOTES COMPUT SC, V10205, P264, DOI 10.1007/978-3-662-54577-5_15
   RABIN MO, 1969, T AM MATH SOC, V141, P1, DOI 10.2307/1995086
   Ramsey FP, 1930, P LOND MATH SOC, V30, P264, DOI 10.1112/plms/s2-30.1.264
   Reger G, 2016, LECT NOTES COMPUT SC, V9710, P323, DOI 10.1007/978-3-319-40970-2_20
   Reynolds Andrew, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P640, DOI 10.1007/978-3-642-39799-8_42
   Reynolds Andrew, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P377, DOI 10.1007/978-3-642-38574-2_26
   Reynolds A, 2017, J AUTOM REASONING, V58, P341, DOI 10.1007/s10817-016-9372-6
   Reynolds A, 2015, LECT NOTES COMPUT SC, V8931, P80
   Riazanov A., 1999, Automated Deduction - CADE-16. 16th International Conference on Automated Deduction. Proceedings (Lecture Notes in Artificial Intelligence Vol.1632), P292
   Rozier KY, 2007, LECT NOTES COMPUT SC, V4595, P149
   Sagiv M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P105, DOI 10.1145/292540.292552
   Schoisswohl Johannes, 2021, ELECTRON P THEOR COM, V337, P39, DOI [10.4204/EPTCS.337.4, DOI 10.4204/EPTCS.337.4]
   SHELAH S, 1977, ISRAEL J MATH, V28, P32, DOI 10.1007/BF02759780
   Taube M, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P662, DOI 10.1145/3192366.3192414
   Vardi MY., 1996, LECT NOTES COMPUTER, P238, DOI [DOI 10.1007/3-540-60915-6_6, DOI 10.1007/3-540-60915-6]
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158141
   Voigt Marco, 2019, Ph. D. Dissertation
   Weidenbach C, 2009, LECT NOTES ARTIF INT, V5663, P140, DOI 10.1007/978-3-642-02959-2_10
   Yao JA, 2022, PROCEEDINGS OF THE 16TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, OSDI 2022, P485
   Yao JA, 2021, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '21), P405
NR 91
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 33
DI 10.1145/3632875
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400034
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Heim, P
   Dimitrova, R
AF Heim, Philippe
   Dimitrova, Rayna
TI Solving Infinite-State Games via Acceleration
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE infinite-duration games; infinite-state games; reactive synthesis
AB Two-player graph games have found numerous applications, most notably in the synthesis of reactive systems from temporal specifications, but also in verification. The relevance of infinite-state systems in these areas has lead to significant attention towards developing techniques for solving infinite-state games.
   We propose novel symbolic semi-algorithms for solving infinite-state games with temporal winning conditions. The novelty of our approach lies in the introduction of an acceleration technique that enhances fixpoint-based game-solving methods and helps to avoid divergence. Classical fixpoint-based algorithms, when applied to infinite-state games, are bound to diverge in many cases, since they iteratively compute the set of states from which one player has a winning strategy. Our proposed approach can lead to convergence in cases where existing algorithms require an infinite number of iterations. This is achieved by acceleration: computing an infinite set of states from which a simpler sub-strategy can be iterated an unbounded number of times in order to win the game. Ours is the first method for solving infinite-state games to employ acceleration. Thanks to this, it is able to outperform state-of-the-art techniques on a range of benchmarks, as evidenced by our evaluation of a prototype implementation.
C1 [Heim, Philippe; Dimitrova, Rayna] CISPA Helmholtz Ctr Informat Secur, Saarbrucken, Germany.
RP Heim, P (corresponding author), CISPA Helmholtz Ctr Informat Secur, Saarbrucken, Germany.
EM philippe.heim@cispa.de; dimitrova@cispa.de
OI Heim, Philippe/0000-0002-5433-8133; Dimitrova, Rayna/0009-0006-2494-8690
CR Abdulla PA, 2008, J LOGIC COMPUT, V18, P153, DOI 10.1093/logcom/exm062
   Alur R, 2013, 2013 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 1962, Proc. Internat. Congr. Mathematicians (Stockholm)
   Ball T, 2006, IEEE S LOG, P379, DOI 10.1109/LICS.2006.10
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Bardin S, 2005, LECT NOTES COMPUT SC, V3707, P474
   Bardin S, 2003, LECT NOTES COMPUT SC, V2725, P118
   Beutner R, 2022, LECT NOTES COMPUT SC, V13371, P341, DOI 10.1007/978-3-031-13185-1_17
   Beyene TA, 2014, ACM SIGPLAN NOTICES, V49, P221, DOI 10.1145/2535838.2535860
   Bloem R, 2012, J COMPUT SYST SCI, V78, P911, DOI 10.1016/j.jcss.2011.08.007
   Bodlaender Marijke Hans L., 2012, Theoretical Computer Science. Proceedings of the 7th IFIP TC 1/WG 2.2 International Conference, TCS 2012, P57, DOI 10.1007/978-3-642-33475-7_5
   Choi W, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P229, DOI 10.1145/3519939.3523429
   Clarke E.M., 2018, Handbook of Model Checking, V10, DOI DOI 10.1007/978-3-319-10575-8
   de Alfaro L., 2001, CONCUR 2001 - Concurrency Theory. 12th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2154), P536
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Faella Marco, 2023, 37 AAAI C ART INT
   Farwer B, 2002, LECT NOTES COMPUT SC, V2500, P3
   Farzan A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158149
   Fedyukovich G, 2019, LECT NOTES COMPUT SC, V11388, P92, DOI 10.1007/978-3-030-11245-5_5
   Finkbeiner Bernd, 2013, International Journal on Software Tools for Technology Transfer, V15, P519, DOI 10.1007/s10009-012-0228-z
   Finkbeiner B, 2022, LECT NOTES COMPUT SC, V13242, P325, DOI 10.1007/978-3-030-99253-8_17
   Finkbeiner B, 2019, LECT NOTES COMPUT SC, V11561, P609, DOI 10.1007/978-3-030-25540-4_35
   Finkel A, 2002, LECT NOTES COMPUT SC, V2556, P145
   Griesmayer A, 2006, LECT NOTES COMPUT SC, V4144, P358, DOI 10.1007/11817963_33
   Grumberg O, 2005, LECT NOTES COMPUT SC, V3385, P233
   Grumberg O, 2007, INFORM COMPUT, V205, P1130, DOI 10.1016/j.ic.2006.10.009
   Heim Philippe, 2023, Zenodo, DOI 10.5281/ZENODO.8424953
   Heim P, 2023, Arxiv, DOI [arXiv:2305.16118, 10.48550/ARXIV.2305.16118, DOI 10.48550/ARXIV.2305.16118]
   Henzinger TA, 2003, LECT NOTES COMPUT SC, V2719, P886
   Katis A, 2018, LECT NOTES COMPUT SC, V10806, P176, DOI 10.1007/978-3-319-89963-3_10
   Kress-Gazit H, 2009, IEEE T ROBOT, V25, P1370, DOI 10.1109/TRO.2009.2030225
   Kroening D, 2013, FORM METHOD SYST DES, V42, P221, DOI 10.1007/s10703-012-0176-y
   Leroux Jerome, 2006, DAGSTUHL SEMINAR P, V06081
   Maderbacher B, 2021, Arxiv, DOI arXiv:2108.00090
   Markgraf O, 2020, LECT NOTES COMPUT SC, V12470, P273, DOI 10.1007/978-3-030-64437-6_14
   Meyer PJ, 2018, LECT NOTES COMPUT SC, V10981, P578, DOI 10.1007/978-3-319-96145-3_31
   Neider D, 2016, LECT NOTES COMPUT SC, V9636, P204, DOI 10.1007/978-3-662-49674-9_12
   Niemetz A., 2021, Tools and Algorithms for the Construction and Analysis of Systems, TACAS, DOI [10.1007/978-3-030-72013-1_8, DOI 10.1007/978-3-030-72013-1_8]
   Samuel S, 2023, Arxiv, DOI arXiv:2306.02427
   Samuel S, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P1585, DOI 10.1145/3468264.3473126
   Tabuada P., 2009, Verification and Control of Hybrid Systems
   Unno H, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571265
   Unno H, 2020, Arxiv, DOI arXiv:2007.03656
   Walker A, 2014, 2014 FORMAL METHODS IN COMPUTER-AIDED DESIGN (FMCAD), P219, DOI 10.1109/FMCAD.2014.6987617
   Walukiewicz I, 2001, INFORM COMPUT, V164, P234, DOI 10.1006/inco.2000.2894
   Woeginger, 2009, Combinatorics problem C5, P33
NR 46
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 57
DI 10.1145/3632899
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400058
OA Green Published, gold
DA 2024-08-05
ER

PT J
AU Jacobs, J
   Hinrichsen, JK
   Krebbers, R
AF Jacobs, Jules
   Hinrichsen, Jonas Kastberg
   Krebbers, Robbert
TI Deadlock-Free Separation Logic: Linearity Yields Progress for Dependent
   Higher-Order Message Passing
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Message passing; deadlocks; session types; separation logic; Iris; Coq
ID SESSION TYPES
AB We introduce a linear concurrent separation logic, called LinearActris, designed to guarantee deadlock and leak freedom for message-passing concurrency. LinearActris combines the strengths of session types and concurrent separation logic, allowing for the verification of challenging higher-order programs with mutable state through dependent protocols. The key challenge is to prove the adequacy theorem of LinearActris, which says that the logic indeed gives deadlock and leak freedom "for free" from linearity. We prove this theorem by defining a step-indexed model of separation logic, based on connectivity graphs. To demonstrate the expressive power of LinearActris, we prove soundness of a higher-order (GV-style) session type system using the technique of logical relations. All our results and examples have been mechanized in Coq.
C1 [Jacobs, Jules; Krebbers, Robbert] Radboud Univ Nijmegen, Nijmegen, Netherlands.
   [Hinrichsen, Jonas Kastberg] Aarhus Univ, Aarhus, Denmark.
C3 Radboud University Nijmegen; Aarhus University
RP Jacobs, J (corresponding author), Radboud Univ Nijmegen, Nijmegen, Netherlands.
EM julesjacobs@gmail.com; hinrichsen@cs.au.dk; mail@robbertkrebbers.nl
OI Jacobs, Jules/0000-0003-1976-3182; Hinrichsen, Jonas
   Kastberg/0000-0001-6143-9031
FU Villum Investigator grant [25804]; Center for Basic Research in Program
   Verification (CPV)
FX We thank the anonymous reviewers for their helpful comments. This work
   was supported in part by a Villum Investigator grant (no. 25804), Center
   for Basic Research in Program Verification (CPV).
CR Ahmed A, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709094
   Ahmed Amal J., 2004, Ph. D. Dissertation
   AMERICA P, 1989, J COMPUT SYST SCI, V39, P343, DOI 10.1016/0022-0000(89)90027-5
   Appel A.W., 2014, Program Logics for Certified Compilers
   Appel AW, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P109
   Appel AW, 2001, ACM T PROGR LANG SYS, V23, P657, DOI 10.1145/504709.504712
   Balzer S, 2019, LECT NOTES COMPUT SC, V11423, P611, DOI 10.1007/978-3-030-17184-1_22
   Balzer Stephanie, 2018, CONCUR, DOI DOI 10.4230/LIPICS.CONCUR.2018.30
   Benton PN, 1995, LECT NOTES COMPUT SC, V933, P121, DOI 10.1007/BFb0022251
   Birkedal L, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P119, DOI 10.1145/1926385.1926401
   Birkedal L, 2010, THEOR COMPUT SCI, V411, P4102, DOI 10.1016/j.tcs.2010.07.010
   Bizjak A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290378
   Bocchi L, 2010, LECT NOTES COMPUT SC, V6269, P162, DOI 10.1007/978-3-642-15375-4_12
   Brookes Stephen D., 2004, CONCUR, DOI [10.1007/978-3-540-28644-8_2, DOI 10.1007/978-3-540-28644-8_2]
   Caires L, 2013, LECT NOTES COMPUT SC, V7792, P330, DOI 10.1007/978-3-642-37036-6_19
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Cao QX, 2018, J AUTOM REASONING, V61, P367, DOI 10.1007/s10817-018-9457-5
   Cao QX, 2017, LECT NOTES COMPUT SC, V10695, P190, DOI 10.1007/978-3-319-71237-6_10
   Carbone M, 2017, ACTA INFORM, V54, P243, DOI 10.1007/s00236-016-0285-y
   Carbone M, 2010, ELECTRON P THEOR COM, P13, DOI 10.4204/EPTCS.38.4
   Carbone Marco, 2016, LIPIcs, V59
   Castro-Perez D, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P237, DOI 10.1145/3453483.3454041
   Castro-Perez David, 2020, TACAS, DOI [DOI 10.1007/978-3-030-45237-7, 10.1007/978-3-030-45237-7_17, DOI 10.1007/978-3-030-45237-7_17]
   Charguéraud A, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408998
   Chaudhuri K, 2019, THEOR COMPUT SCI, V781, P24, DOI 10.1016/j.tcs.2019.02.023
   Chlipala A, 2013, ACM SIGPLAN NOTICES, V48, P391, DOI [10.1145/2500365.2500592, 10.1145/2544174.2500592]
   Ciccone Luca, 2020, PPDP 20 22 INT S PRI, DOI [10.1145/3414080.3414109, DOI 10.1145/3414080.3414109]
   Craciun F, 2015, IEEE INT C ENG COMP, P140, DOI 10.1109/ICECCS.2015.33
   Cruz-Filipe L, 2021, LECT NOTES COMPUT SC, V12819, P115, DOI 10.1007/978-3-030-85315-0_8
   Cruz-Filipe Luis, 2021, P 12 INT C INTERACTI, DOI [DOI 10.4230/LIPICS.ITP.2021.15, 10.4230/LIPIcs., DOI 10.4230/LIPICS]
   D'Osualdo E, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3477082
   Dardha O, 2018, LECT NOTES COMPUT SC, V10803, P91, DOI 10.1007/978-3-319-89366-2_5
   Dardha O, 2017, INFORM COMPUT, V256, P253, DOI 10.1016/j.ic.2017.06.002
   Das A, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P305, DOI 10.1145/3209108.3209146
   Dijkstra E. W., 1971, Acta Informatica, V1, P115, DOI 10.1007/BF00289519
   Dreyer D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(2:16)2011
   Duy-Khanh Le, 2013, Automated Technology for Verification and Analysis. 11th International Symposium, ATVA 2013. Proceedings: LNCS 8172, P287, DOI 10.1007/978-3-319-02444-8_21
   Fowler S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290341
   Fowler Simon, 2021, CONCUR, DOI [10.4230/LIPIcs.CONCUR.2021.36, DOI 10.4230/LIPICS.CONCUR.2021.36]
   Francalanza A, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(3:07)2011
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Gondelman L, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3607859
   Goto M, 2016, MATH STRUCT COMP SCI, V26, P465, DOI 10.1017/S0960129514000231
   Hamin Jafar, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P415, DOI 10.1007/978-3-319-89884-1_15
   Harper R., 2016, Practical Foundations for Programming Languages
   Hinrichsen JK, 2022, LOG METH COMPUT SCI, V18, DOI 10.46298/LMCS-18(2:16)2022
   Hinrichsen JK, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371074
   Hinrichsen JK, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P178, DOI 10.1145/3437992.3439914
   Hobor A, 2008, LECT NOTES COMPUT SC, V4960, P353
   Honda K, 1998, LECT NOTES COMPUT SC, V1381, P122, DOI 10.1007/BFb0053567
   Honda K., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P509
   Honda K, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P273, DOI 10.1145/2827695
   Honda K, 2016, J ACM, V63, DOI 10.1145/2827695
   Igarashi A, 2004, THEOR COMPUT SCI, V311, P121, DOI 10.1016/S0304-3975(03)00325-6
   Igarashi A., 1997, Static Analysis. 4th International Symposium, SAS '97 Proceedings, P187, DOI 10.1007/BFb0032742
   Igarashi Atsushi, 2001, POPL, DOI DOI 10.1145/360204.360215
   Jacobs J, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3607856
   Jacobs J, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571229
   Jacobs J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547638
   Jacobs J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498662
   Jacobs Jules, 2023, Deadlock-Free Separation Logic: Linearity Yields Progress for Dependent Higher-Order Message Passing, DOI [10.5281/zenodo.8422755, DOI 10.5281/ZENODO.8422755]
   Jacobs Jules, 2022, ECOOP, DOI [10.4230/LIPIcs.ECOOP.2022.23, DOI 10.4230/LIPICS.ECOOP.2022.23]
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/3022670.2951943
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2775051.2676980, 10.1145/2676726.2676980]
   Jung Ralf, 2020, Ph. D. Dissertation
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Kobayashi N, 2002, INFORM COMPUT, V177, P122, DOI 10.1006/inco.2002.3171
   Kobayashi N, 1997, IEEE S LOG, P128, DOI 10.1109/LICS.1997.614941
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krebbers Robbert, 2018, P ACM PROGR LANG, DOI [10.1145/3236772, DOI 10.1145/3236772]
   Leino KRM, 2010, LECT NOTES COMPUT SC, V6012, P407, DOI 10.1007/978-3-642-11957-6_22
   Liang HJ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158108
   Liang HJ, 2016, ACM SIGPLAN NOTICES, V51, P385, DOI 10.1145/2914770.2837635
   Lindley S, 2017, RIV PUBL SER AUTOMAT, P265
   Lindley S, 2016, ACM SIGPLAN NOTICES, V51, P434, DOI 10.1145/3022670.2951921
   Lindley S, 2015, LECT NOTES COMPUT SC, V9032, P560, DOI 10.1007/978-3-662-46669-8_23
   Lozes Etienne, 2012, Web Services and Formal Methods. 8th International Workshop (WS-FM 2011). Revised Selected Papers, P2, DOI 10.1007/978-3-642-29834-9_2
   Lozes É, 2012, ELECTRON P THEOR COM, P17, DOI 10.4204/EPTCS.104.3
   Mansky W, 2022, Arxiv, DOI [arXiv:2207.06574, 10.48550/arXiv.2207.06574, DOI 10.48550/ARXIV.2207.06574]
   Mansky W, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133911
   Montesi Fabrizio, 2021, Introduction to Choreographies
   Nakano H, 2000, IEEE S LOG, P255, DOI 10.1109/LICS.2000.855774
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   Oortwijn W, 2016, ELECTRON P THEOR COM, P65, DOI 10.4204/EPTCS.211.7
   Padovani L, 2014, IEEE S LOG, DOI 10.1145/2603088.2603116
   Pérez JA, 2014, INFORM COMPUT, V239, P254, DOI 10.1016/j.ic.2014.08.001
   Pfenning F, 2015, LECT NOTES COMPUT SC, V9034, P3, DOI 10.1007/978-3-662-46678-0_1
   Pierce Benjamin C., 2002, Types and Programming Languages
   Qian ZS, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473567
   Reed Jason, 2009, A Judgmental Deconstruction of Modal Logic
   Reed Jason, 2009, Ph. D. Dissertation
   Rocha Pedro, 2023, Programming Languages and Systems: 32nd European Symposium on Programming, ESOP 2023, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2023, Proceedings. Lecture Notes in Computer Science (13990), P421, DOI 10.1007/978-3-031-30044-8_16
   Rocha P, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473584
   Rouvoet A, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P284, DOI 10.1145/3372885.3373818
   Scalas A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290343
   Spies S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P80, DOI 10.1145/3453483.3454031
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Tassarotti J, 2017, LECT NOTES COMPUT SC, V10201, P909, DOI 10.1007/978-3-662-54434-1_34
   Thiemann P, 2019, PROCEEDINGS OF THE 21ST INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2019), DOI 10.1145/3354166.3354184
   Timany Amin, 2022, A Logical Approach to Type Soundness
   Toninho Bernardo, 2014, Trustworthy Global Computing 9th International Symposium, TGC 2014. Revised Selected Papers: LNCS 8902, P159, DOI 10.1007/978-3-662-45917-1_11
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   Toninho Bernardo, 2015, Ph. D. Dissertation
   Villard J, 2009, LECT NOTES COMPUT SC, V5904, P194, DOI 10.1007/978-3-642-10672-9_15
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   Zhang Dan, 2016, MODELSWARD 2016, DOI [10.1007/978-3-319-66302-9_13, DOI 10.1007/978-3-319-66302-9_13]
NR 111
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 47
DI 10.1145/3632889
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400048
OA gold
DA 2024-08-05
ER

PT J
AU Ma, ZK
   Li, JY
   Bai, GD
AF Ma, Zhongkui
   Li, Jiaying
   Bai, Guangdong
TI ReLU Hull Approximation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Robustness; Neural Networks; Convexity; Polytope
ID ALGORITHM; ENUMERATION
AB Convex hulls are commonly used to tackle the non-linearity of activation functions in the verification of neural networks. Computing the exact convex hull is a costly task though. In this work, we propose a fast and precise approach to over-approximating the convex hull of the ReLU function (referred to as the ReLU hull), one of the most used activation functions. Our key insight is to formulate a convex polytope that "wraps" the ReLU hull, by reusing the linear pieces of the ReLU function as the lower faces and constructing upper faces that are adjacent to the lower faces. The upper faces can be efficiently constructed based on the edges and vertices of the lower faces, given that an n-dimensional (or simply nd hereafter) hyperplane can be determined by an (n - 1)d hyperplane and a point outside of it. We implement our approach as WRALU, and evaluate its performance in terms of precision, efficiency, constraint complexity, and scalability. WRALU outperforms existing advanced methods by generating fewer constraints to achieve tighter approximation in less time. It exhibits versatility by effectively addressing arbitrary input polytopes and higher-dimensional cases, which are beyond the capabilities of existing methods. We integrate WRALU into PRIMA, a state-of-the-art neural network verifier, and apply it to verify large-scale ReLU-based neural networks. Our experimental results demonstrate that WRALU achieves a high efficiency without compromising precision. It reduces the number of constraints that need to be solved by the linear programming solver by up to half, while delivering comparable or even superior results compared to the state-of-the-art verifiers.
C1 [Ma, Zhongkui; Bai, Guangdong] Univ Queensland, Brisbane, Qld, Australia.
   [Li, Jiaying] Microsoft, Beijing, Peoples R China.
C3 University of Queensland
RP Ma, ZK (corresponding author), Univ Queensland, Brisbane, Qld, Australia.
EM zhongkui.ma@uq.edu.au; lijiaying1989@gmail.com; g.bai@uq.edu.au
RI Bai, Guangdong/GLS-2331-2022
OI Bai, Guangdong/0000-0002-6390-9890; Ma, Zhongkui/0000-0002-2392-3751
FU University of Queensland [NSRSG 4018264-617225]; Australian Research
   Council Discovery Projects [DP230101196, DP240103068]
FX We thank our anonymous reviewers for their constructive comments. This
   work is partially supported by The University of Queensland (NSRSG
   4018264-617225) and Australian Research Council Discovery Projects
   (DP230101196, DP240103068).
CR Anderson R, 2019, LECT NOTES COMPUT SC, V11480, P27, DOI 10.1007/978-3-030-17953-3_3
   [Anonymous], 2003, Linear Programming 2: Theory and Exten- sions
   [Anonymous], 1953, Contributions to the Theory of Games II
   AVIS D, 1992, DISCRETE COMPUT GEOM, V8, P295, DOI 10.1007/BF02293050
   AVIS D, 1991, APPL MATH LETT, V4, P39, DOI 10.1016/0893-9659(91)90141-H
   Barber CB, 1996, ACM T MATH SOFTWARE, V22, P469, DOI 10.1145/235815.235821
   Botoeva E, 2020, AAAI CONF ARTIF INTE, V34, P3291
   Bunel R, 2020, Arxiv, DOI arXiv:1909.06588
   Bunel R, 2018, ADV NEUR IN, V31
   CHAND DR, 1970, J ACM, V17, P78, DOI 10.1145/321556.321564
   Chen YP, 2022, INT J MACH LEARN CYB, V13, P431, DOI 10.1007/s13042-021-01416-3
   Clevert DA, 2016, Arxiv, DOI [arXiv:1511.07289, DOI 10.48550/ARXIV.1511.07289]
   Cohen G, 2017, IEEE IJCNN, P2921, DOI 10.1109/IJCNN.2017.7966217
   Dathathri S, 2020, Arxiv, DOI arXiv:2010.11645
   De Palma Alessandro, 2021, P ICLR 2021 C OP REV
   Deng L., 2012, IEEE Signal Process. Mag., V29, P141
   Dvijotham K, 2018, Arxiv, DOI arXiv:1805.10265
   Dvijotham K, 2018, UNCERTAINTY IN ARTIFICIAL INTELLIGENCE, P550
   Edelsbrunner Herbert, 1987, EATCS monographs on theoretical computer science, V10, P1, DOI DOI 10.1007/978-3-642-61568-9
   Ehlers R, 2017, LECT NOTES COMPUT SC, V10482, P269, DOI 10.1007/978-3-319-68167-2_19
   ERAN, 2022, ETH Robustness Analyzer for Neural Networks
   Ferrari C., 2022, arXiv
   Fukuda K., 1996, Combinatorics and Computer Science. 8th Franco-Japanese and 4th Franco-Chinese Conference. Selected Papers, P91
   Fukuda Komei., 2003, Cddlib reference manual
   Gehr T, 2018, P IEEE S SECUR PRIV, P3, DOI 10.1109/SP.2018.00058
   Goodfellow I, 2016, ADAPT COMPUT MACH LE, P1
   Gowal S, 2019, IEEE I CONF COMP VIS, P4841, DOI 10.1109/ICCV.2019.00494
   Gurobi Optimization LLC, 2023, GUROBI OPTIMIZER REF
   Huang XW, 2017, LECT NOTES COMPUT SC, V10426, P3, DOI 10.1007/978-3-319-63387-9_1
   Jarvis R. A., 1973, Information Processing Letters, V2, P18, DOI 10.1016/0020-0190(73)90020-3
   Joswig M, 2003, ALGEBRA, GEOMETRY, AND SOFTWARE SYSTEMS, P1
   Katz G, 2019, LECT NOTES COMPUT SC, V11561, P443, DOI 10.1007/978-3-030-25540-4_26
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Krizhevsky A., 2009, Learning multiple layers of features from tiny images
   Lecun Y, 1998, P IEEE, V86, P2278, DOI 10.1109/5.726791
   Maas A.L., 2013, P ICML CIT, V30, P3
   MCMULLEN P, 1970, MATHEMATIKA, V17, P179, DOI 10.1112/S0025579300002850
   Meng MH, 2022, IEEE Trans Depend Secure Comput
   Mirman Matthew, 2018, INT C MACH LEARN, V80, P3575
   Müller MN, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498704
   pypi, 2023, pycddlib
   Raghunathan A, 2018, ADV NEUR IN, V31
   Ruan WJ, 2018, PROCEEDINGS OF THE TWENTY-SEVENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P2651
   Singh G, 2019, 33 C NEURAL INFORM P, V32
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Singh G, 2018, ADV NEUR IN, V31
   Szegedy C, 2014, Arxiv, DOI arXiv:1312.6199
   Tjandraatmadja Christian, 2020, Advances in Neural Information Processing Systems, V33, P21675
   Tjeng V., 2019, P ICLR
   Wang S., 2021, ADV NEURAL INF PROCE, V34, P29909
   Weng TW, 2018, PR MACH LEARN RES, V80
   Wong E, 2018, ADV NEUR IN, V31
   Wong E, 2018, PR MACH LEARN RES, V80
   Xiao H, 2017, Arxiv, DOI [arXiv:1708.07747, DOI 10.48550/ARXIV.1708.07747]
   Zhang H, 2022, Arxiv, DOI [arXiv:2208.05740, 10.48550/arXiv.2208.05740]
   Zhang H, 2018, ADV NEUR IN, V31
NR 56
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 75
DI 10.1145/3632917
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400076
OA gold, Green Published
DA 2024-08-05
ER

PT J
AU Mamouras, K
   Chattopadhyay, A
AF Mamouras, Konstantinos
   Chattopadhyay, Agnishom
TI Efficient Matching of Regular Expressions with Lookaround Assertions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE regex; automata; lookahead; lookbehind; lookaround; Kleene algebra;
   regex matching; regex engine
ID DERIVATIVES; AUTOMATA; ALGEBRA
AB Regular expressions have been extended with lookaround assertions, which are subdivided into lookahead and lookbehind assertions. These constructs are used to refine when a match for a pattern occurs in the input text based on the surrounding context. Current implementation techniques for lookaround involve backtracking search, which can give rise to running time that is super-linear in the length of input text. In this paper, we first consider a formal mathematical semantics for lookaround, which complements the commonly used operational understanding of lookaround in terms of a backtracking implementation. Our formal semantics allows us to establish several equational properties for simplifying lookaround assertions. Additionally, we propose a new algorithm for matching regular expressions with lookaround that has time complexity O(m center dot n), where m is the size of the regular expression and n is the length of the input text. The algorithm works by evaluating lookaround assertions in a bottom-up manner. Our algorithm makes use of a new notion of nondeterministic finite automata (NFAs), which we call oracle-NFAs. These automata are augmented with epsilon-transitions that are guarded by oracle queries that provide the truth values of lookaround assertions at every position in the text. We provide an implementation of our algorithm that incorporates three performance optimizations for reducing the work performed and memory used. We present an experimental comparison against PCRE and Javas regex library, which are state-of-the-art regex engines that support lookaround assertions. Our experimental results show that, in contrast to PCRE and Java, our implementation does not suffer from super-linear running time and is several times faster.
C1 [Mamouras, Konstantinos; Chattopadhyay, Agnishom] Rice Univ, Houston, TX 77251 USA.
C3 Rice University
RP Mamouras, K (corresponding author), Rice Univ, Houston, TX 77251 USA.
EM mamouras@rice.edu; agnishom@rice.edu
OI Chattopadhyay, Agnishom/0009-0007-0462-8080; Mamouras,
   Konstantinos/0000-0003-1209-7738
FU US National Science Foundation [CCF 2008096]
FX We would like to thank the anonymous reviewers for their constructive
   comments. This research was supported in part by the US National Science
   Foundation award CCF 2008096.
CR AHO AV, 1975, COMMUN ACM, V18, P333, DOI 10.1145/360825.360855
   Antimirov V, 1996, THEOR COMPUT SCI, V155, P291, DOI 10.1016/0304-3975(95)00182-4
   Bando M, 2012, IEEE ACM T NETWORK, V20, P699, DOI 10.1109/TNET.2011.2181411
   Bartocci Ezio, 2018, Lectures on Runtime. Verification Introductory and Advanced Topics. LNCS 10457, P135, DOI 10.1007/978-3-319-75632-5_5
   Benzaken V, 2003, ACM SIGPLAN NOTICES, V38, P51, DOI 10.1145/944746.944711
   Berglund M, 2021, J UNIVERS COMPUT SCI, V27, P324, DOI 10.3897/jucs.66330
   Berglund M, 2014, ELECTRON PROC THEOR, P109, DOI 10.4204/EPTCS.151.7
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Brzozowski Janusz A., 1971, The Journal of Symbolic Logic, V36, P694, DOI [10.2307/2272532, DOI 10.2307/2272532]
   Champarnaud JM, 2001, FUNDAM INFORM, V45, P195
   Chattopadhyay A, 2020, LECT NOTES COMPUT SC, V12399, P383, DOI 10.1007/978-3-030-60508-7_21
   Chida Nariyoshi, 2022, (Leibniz International Proceedings in Informatics (LIPIcs),, V228, DOI DOI 10.4230/LIPICS.FSCD.2022.15
   Coquand Thierry, 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P119
   Cox R., 2010, Regular expression matching in the wild
   Doczkal C, 2013, LECT NOTES COMPUT SC, V8307, P82, DOI 10.1007/978-3-319-03545-1_6
   Dokhanchi A, 2014, LECT NOTES COMPUT SC, V8734, P231, DOI 10.1007/978-3-319-11164-3_19
   Egolf D, 2022, PROCEEDINGS OF THE 11TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP '22), P27, DOI 10.1145/3497775.3503694
   Fang Yu, 2006, ACM/IEEE Symposium on Architectures for Networking and Communications Systems (ANCS 2006), P93, DOI 10.1109/ANCS.2006.4579527
   Firsov D, 2013, LECT NOTES COMPUT SC, V8307, P98, DOI 10.1007/978-3-319-03545-1_7
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Frisch A, 2004, LECT NOTES COMPUT SC, V3142, P618
   Grathwohl BB, 2016, ACM SIGPLAN NOTICES, V51, P284, DOI 10.1145/2914770.2837647
   Grathwohl Niels Bjorn Bugge, 2013, Implementation and Application of Automata. 18th International Conference, CIAA 2013. Proceedings: LNCS 7982, P60, DOI 10.1007/978-3-642-39274-0_7
   Grathwohl NBB, 2014, LECT NOTES COMPUT SC, V8687, P224
   grep, 2023, GREP-Global Regular Expression Print
   Hyperscan, 2023, Intel's Hyperscan: A high-performance multiple regex matching library
   JOHNSON WL, 1968, COMMUN ACM, V11, P805, DOI 10.1145/364175.364185
   Kleene S., 1956, AUTOMATA STUDIES, P3
   Komendantsky Vladimir, 2012, P 6 WORKSH PROGR LAN, P61, DOI [10.1145/2103776.2103784, DOI 10.1145/2103776.2103784]
   Kong LK, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P733, DOI 10.1145/3519939.3523456
   Konstantinos Mamouras, 2015, Ph. D. Dissertation
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Kozen D, 2014, LECT NOTES COMPUT SC, V8573, P280
   Le Glaunec A, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586044
   Maler O, 2008, LECT NOTES COMPUT SC, V4800, P475, DOI 10.1007/978-3-540-78127-1_26
   Mamouras Konstantinos, 2021, Tools and Algorithms for the Construction and Analysis of Systems. 27th International Conference, TACAS 2021. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12651), P330, DOI 10.1007/978-3-030-72016-2_18
   Mamouras K, 2023, INT J SOFTW TOOLS TE, V25, P557, DOI 10.1007/s10009-023-00719-w
   Mamouras K, 2021, LECT NOTES COMPUT SC, V12974, P142, DOI 10.1007/978-3-030-88494-9_8
   Mamouras K, 2020, IEEE T COMPUT AID D, V39, P3868, DOI 10.1109/TCAD.2020.3013053
   Mamouras K, 2017, LECT NOTES COMPUT SC, V10203, P88, DOI 10.1007/978-3-662-54458-7_6
   MIRKIN BG, 1966, ENG CYBERN, P110
   Miyazaki Takayuki, 2021, Language and Automata Theory and Applications. 15th International Conference, LATA 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12638), P213, DOI 10.1007/978-3-030-68195-1_16
   Miyazaki Takayuki, 2019, J. Inf. Process., V27, P422, DOI [DOI 10.2197/IPSJJIP.27.422, 10.2197/IPSJJIP.27.422]
   Moreira Nelma, 2012, Relational and Algebraic Methods in Computer Science. Proceedings 13th International Conference, RAMiCS 2012, P98, DOI 10.1007/978-3-642-33314-9_7
   Morihata Akimasa, 2012, Computer Software, V29, P147
   Moseley D, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591262
   Niels Bjorn Bugge Grathwohl, 2014, CSL-LICS, DOI DOI 10.1145/2603088.2603095
   Nielsen L, 2011, LECT NOTES COMPUT SC, V6638, P402, DOI 10.1007/978-3-642-21254-3_32
   RABIN MO, 1959, IBM J RES DEV, V3, P114, DOI 10.1147/rd.32.0114
   RE2, 2023, RE2: Google's regular expression library
   Roy I, 2016, IEEE ACM T COMPUT BI, V13, P99, DOI 10.1109/TCBB.2015.2430313
   Sakuma Y, 2012, J APPL LOGIC, V10, P32, DOI 10.1016/j.jal.2011.11.003
   Snort, 2023, Snort Intrusion Detection System
   Suricata, 2023, Suricata Threat Detection Engine
   Thati P, 2005, ELECTRON NOTES THEOR, V113, P145, DOI 10.1016/j.entcs.2004.01.029
   The PCRE2 Developers, 2023, Perl-compatible Regular Expressions (revised API: PCRE2)
   THOMPSON K, 1968, COMMUN ACM, V11, P419, DOI 10.1145/363347.363387
   Trofimovich U, 2020, SOFTW IMPACTS, V6, DOI 10.1016/j.simpa.2020.100027
   Veanes M, 2015, LECT NOTES COMPUT SC, V8974, P335, DOI [10.1007/978-3-662-46823-4_29, 10.1007/978-3-662-46823-4_27]
NR 60
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 92
DI 10.1145/3632934
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400093
OA gold
DA 2024-08-05
ER

PT J
AU Parreaux, L
   Boruch-Gruszecki, A
   Fan, A
   Chau, CY
AF Parreaux, Lionel
   Boruch-Gruszecki, Aleksander
   Fan, Andong
   Chau, Chun Yin
TI When Subtyping Constraints Liberate A Novel Type Inference Approach for
   First-Class Polymorphism
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE type inference; first-class polymorphism; subtyping; constraint solving
AB Type inference in the presence of first-class or "impredicative" second-order polymorphism a la System F has been an active research area for several decades, with original works dating back to the end of the 80s. Yet, until now many basic problems remain open, such as how to type check expressions like (lambda x. (x 123, x True)) id reliably. We show that a type inference approach based on multi-bounded polymorphism, a form of implicit polymorphic subtyping with multiple lower and upper bounds, can help us resolve most of these problems in a uniquely simple and regular way. We define F-{<=}, a declarative type system derived from the existing theory of implicit coercions by Cretin and Remy (LICS 2014), and we introduce SuperF, a novel algorithm to infer polymorphic multi-bounded F-{<=} types while checking user type annotations written in the syntax of System F. We use a recursion-avoiding heuristic to guarantee termination of type inference at the cost of rejecting some valid programs, which thankfully rarely triggers in practice. We show that SuperF is vastly more powerful than all first-class-polymorphic type inference systems proposed so far, significantly advancing the state of the art in type inference for general-purpose programming languages.
C1 [Parreaux, Lionel; Fan, Andong; Chau, Chun Yin] HKUST, Hong Kong, Peoples R China.
   [Boruch-Gruszecki, Aleksander] Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
C3 Hong Kong University of Science & Technology; Swiss Federal Institutes
   of Technology Domain; Ecole Polytechnique Federale de Lausanne
RP Parreaux, L (corresponding author), HKUST, Hong Kong, Peoples R China.
EM parreaux@ust.hk; aleksander.boruch-gruszecki@epfl.ch; afanab@cse.ust.hk;
   cychauab@connect.ust.hk
OI Boruch-Gruszecki, Aleksander/0000-0001-5769-6684; Chau, Chun
   Yin/0000-0003-0323-6644; Parreaux, Lionel/0000-0002-8805-0728
FU Hong Kong Research Grant Council [26208821]
FX We would like to thank Didier Remy, Didier Le Botlan, Bruno Oliveira,
   Stephen Dolan, and the anonymous reviewers for their helpful feedback.
   This research was partially funded by Hong Kong Research Grant Council
   project number 26208821.
NR 0
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 48
DI 10.1145/3632890
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400049
OA gold
DA 2024-08-05
ER

PT J
AU Randone, F
   Bortolussi, L
   Incerto, E
   Tribastone, M
AF Randone, Francesca
   Bortolussi, Luca
   Incerto, Emilio
   Tribastone, Mirco
TI Inference of Probabilistic Programs with Moment-Matching Gaussian
   Mixtures
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programming; inference; Gaussian mixtures
AB Computing the posterior distribution of a probabilistic program is a hard task for which no one-fit-for-all solution exists. We propose Gaussian Semantics, which approximates the exact probabilistic semantics of a bounded program by means of Gaussian mixtures. It is parametrized by a map that associates each program location with the moment order to be matched in the approximation. We provide two main contributions. The first is a universal approximation theorem stating that, under mild conditions, Gaussian Semantics can approximate the exact semantics arbitrarily closely. The second is an approximation that matches up to second-order moments analytically in face of the generally difficult problem of matching moments of Gaussian mixtures with arbitrary moment order. We test our second-order Gaussian approximation (SOGA) on a number of case studies from the literature. We show that it can provide accurate estimates in models not supported by other approximation methods or when exact symbolic techniques fail because of complex expressions or non-simplified integrals. On two notable classes of problems, namely collaborative filtering and programs involving mixtures of continuous and discrete distributions, we show that SOGA significantly outperforms alternative techniques in terms of accuracy and computational time.
C1 [Randone, Francesca; Incerto, Emilio; Tribastone, Mirco] IMT Sch Adv Studies Lucca, Lucca, LU, Italy.
   [Bortolussi, Luca] Univ Trieste, Trieste, Italy.
C3 IMT School for Advanced Studies Lucca; University of Trieste
RP Randone, F (corresponding author), IMT Sch Adv Studies Lucca, Lucca, LU, Italy.
EM francesca.randone@imtlucca.it; lbortolussi@units.it;
   emilio.incerto@imtlucca.it; mirco.tribastone@imtlucca.it
OI Tribastone, Mirco/0000-0002-6018-5989; Incerto,
   Emilio/0000-0001-6895-6517; Randone, Francesca/0009-0002-3489-9600
FU European Union -NextGenerationEU [PE00000014, B83C22003920001,
   ECS_00000043]
FX This work was partially supported by the projects SERICS (PE00000014)
   and by Investment 1.5 Ecosystems of Innovation, Project Tuscany Health
   Ecosystem (THE, B83C22003920001) and Interconnected North-East
   Innovation Ecosystem (iNEST, ECS_00000043) under the MUR National
   Recovery and Resilience Plan funded by the European Union
   -NextGenerationEU. We would like to thank Joost-Pieter Katoen for his
   feedback on a preliminary version of this paper and the anonymous
   reviewers for their valuable comments.
CR Albarghouthi A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133904
   Barthe G, 2016, LECT NOTES COMPUT SC, V9779, P43, DOI 10.1007/978-3-319-41528-4_3
   Bartocci Ezio, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12078), P492, DOI 10.1007/978-3-030-45190-5_28
   Billingsley P., 2013, Convergence of Probability Measures
   Billingsley P., 2008, Probability and measure
   Bingham E, 2019, J MACH LEARN RES, V20
   Bishop CM., 2006, PATTERN RECOGN
   Boyen X., 1998, Uncertainty in Artificial Intelligence. Proceedings of the Fourteenth Conference (1998), P33
   Carpenter B, 2017, J STAT SOFTW, V76, P1, DOI 10.18637/jss.v076.i01
   CHAGANTY A, 2013, ARTIF INTELL, P153
   Chakarov A, 2014, LECT NOTES COMPUT SC, V8723, P85, DOI 10.1007/978-3-319-10936-7_6
   Chaudhuri Swarat, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P277, DOI 10.1007/978-3-642-22110-1_22
   Chaudhuri S, 2010, ACM SIGPLAN NOTICES, V45, P279, DOI 10.1145/1809028.1806629
   Chen MS, 2022, LECT NOTES COMPUT SC, V13371, P79, DOI 10.1007/978-3-031-13185-1_5
   Cousot Patrick, 1977, P 4 ACM S PRINC PROG, P238, DOI [DOI 10.1145/512950.512973, 10.1145/512950.512973]
   Cover T.M., 1999, ELEMENTS INFORM THEO
   Ethier S. N., 1986, MARKOV PROCESSES CHA, DOI 10.1002/9780470316658
   Filieri A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P622, DOI 10.1109/ICSE.2013.6606608
   Gao W., 2017, Advances in Neural Information Processing Systems, V30
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   Gelman A, 2013, BAYESIAN DATA ANAL, V3rd, DOI [10.1201/b16018, DOI 10.1201/B16018]
   Goodman N., 2008, UAI, V8, P220
   Gordon Andrew D., 2014, P FUT SOFTW ENG, P167, DOI [DOI 10.1145/2593882.2593900, 10.1145/2593882.2593900]
   GU M, 1995, SIAM J MATRIX ANAL A, V16, P172, DOI 10.1137/S0895479892241287
   Hansen LP, 2009, MACROECONOMETRICS AND TIME SERIES ANALYSIS, P105
   HASTINGS WK, 1970, BIOMETRIKA, V57, P97, DOI 10.1093/biomet/57.1.97
   Hoffman MD, 2013, J MACH LEARN RES, V14, P1303
   Hofmann T, 1999, IJCAI-99: PROCEEDINGS OF THE SIXTEENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, VOLS 1 & 2, P688
   Holtzen Steven, 2020, Proceedings of the ACM on Programming Languages, V4, DOI 10.1145/3428208
   HORNIK K, 1989, NEURAL NETWORKS, V2, P359, DOI 10.1016/0893-6080(89)90020-8
   Huang ZX, 2021, LECT NOTES COMPUT SC, V12971, P229, DOI 10.1007/978-3-030-88885-5_16
   Jordan MI, 1999, MACH LEARN, V37, P183, DOI 10.1023/A:1007665907178
   Kan R, 2017, J COMPUT GRAPH STAT, V26, P930, DOI 10.1080/10618600.2017.1322092
   Katoen JP, 2010, LECT NOTES COMPUT SC, V6337, P390, DOI 10.1007/978-3-642-15769-1_24
   Kharchenko PV, 2014, NAT METHODS, V11, P740, DOI [10.1038/NMETH.2967, 10.1038/nmeth.2967]
   Koren Y, 2011, RECOMMENDER SYSTEMS HANDBOOK, P145, DOI 10.1007/978-0-387-85820-3_5
   Kozen D., 1979, 20th Annual Symposium of Foundations of Computer Science, P101, DOI 10.1109/SFCS.1979.38
   Kozen Dexter, 1983, P ACM S THEORY COMPU, P291, DOI [10.1145/800061.808758, DOI 10.1145/800061.808758]
   Kucukelbir A, 2015, ADV NEUR IN, V28
   KULLBACK S, 1951, ANN MATH STAT, V22, P79, DOI 10.1214/aoms/1177729694
   Lasserre J. B., 2009, Moments, positive polynomials and their applications, V1
   Laurel J, 2020, LECT NOTES COMPUT SC, V12075, P366, DOI 10.1007/978-3-030-44914-8_14
   LO JTH, 1972, IEEE T INFORM THEORY, V18, P583, DOI 10.1109/TIT.1972.1054885
   Mansinghka V, 2014, Arxiv, DOI arXiv:1404.0099
   Milch Brian., 2004, ICML 2004 Workshop on Statistical Relational Learning and Its Connections, P67
   Moosbrugger M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563341
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Neal Radford M, 1999, Marginal likelihood from the Gibbs output
   Nishihara R, 2013, Arxiv, DOI [arXiv:1312.5386, DOI 10.48550/ARXIV.1312.5386]
   Nitti D, 2016, MACH LEARN, V103, P407, DOI 10.1007/s10994-016-5558-8
   Nori AV, 2014, AAAI CONF ARTIF INTE, P2476
   Obermeyer Fritz, 2019, INT C MACH LEARN, P4871
   Perez D, 2008, Arxiv, DOI arXiv:math/0611038
   Pfeffer A., 2001, IJCAI
   Pierson E, 2015, GENOME BIOL, V16, DOI 10.1186/s13059-015-0805-z
   Saad FA, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P804, DOI 10.1145/3453483.3454078
   Schmdgen K., 2017, The Moment Problem, DOI [10.1007/978-3-319-64546-9, DOI 10.1007/978-3-319-64546-9]
   Skiena S.S, 2008, The Algorithm Design Manual
   TIERNEY L, 1986, J AM STAT ASSOC, V81, P82, DOI 10.2307/2287970
   Tolpin David, 2016, P 28 S IMPL APPL FUN, P1, DOI DOI 10.1145/3064899.3064910
   TSIATIS A, 1975, P NATL ACAD SCI USA, V72, P20, DOI 10.1073/pnas.72.1.20
   Virtanen P, 2020, NAT METHODS, V17, P261, DOI 10.1038/s41592-019-0686-2
   WICK GC, 1950, PHYS REV, V80, P268, DOI 10.1103/PhysRev.80.268
   Wolfram Research Inc., Mathematica
   Wu Y, 2018, PR MACH LEARN RES, V80
   Zhao XX, 2013, PROCEEDINGS OF THE 22ND ACM INTERNATIONAL CONFERENCE ON INFORMATION & KNOWLEDGE MANAGEMENT (CIKM'13), P1411, DOI 10.1145/2505515.2505690
   Zhou DX, 2020, APPL COMPUT HARMON A, V48, P787, DOI 10.1016/j.acha.2019.06.004
   Zhou Y., 2020, P MACHINE LEARNING R, V119, P11534
NR 68
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 63
DI 10.1145/3632905
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400064
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Zhou, LT
   Qin, JX
   Wang, QS
   Appel, AW
   Cao, QX
AF Zhou, Litao
   Qin, Jianxing
   Wang, Qinshi
   Appel, Andrew W.
   Cao, Qinxiang
TI VST-A: A Foundationally Sound Annotation Verifier
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Annotated Programs; Foundational Verification; Coq
ID SOFTWARE-VERIFICATION; SEPARATION LOGIC
AB Program verifiers for imperative languages such as C may be annotation-based, in which assertions and invariants are put into source files and then checked, or tactic-based, where proof scripts separate from programs are interactively developed in a proof assistant such as Coq. Annotation verifiers have been more automated and convenient, but some interactive verifiers have richer assertion languages and formal proofs of soundness. We present VST-A, an annotation verifier that uses the rich assertion language of VST, leverages the formal soundness proof of VST, but allows users to describe functional correctness proofs intuitively by inserting assertions.
   VST-A analyzes control flow graphs, decomposes every C function into control flow paths between assertions, and reduces program verification problems into corresponding straightline Hoare triples. Compared to existing foundational program verification tools like VST and Iris, in VST-A such decompositions and reductions can nonstructural, which makes VST-A more flexible to use.
   VST-A's decomposition and reduction is defined in Coq, proved sound in Coq, and computed call-by-value in Coq. The soundness proof for reduction is totally logical, independent of the complicated semantic model (and soundness proof) of VST's Hoare triple. Because of the rich assertion language, not all reduced proof goals can be automatically checked, but the system allows users to prove residual proof goals using the full power of the Coq proof assistant.
C1 [Zhou, Litao; Qin, Jianxing; Cao, Qinxiang] Shanghai Jiao Tong Univ, Shanghai, Peoples R China.
   [Zhou, Litao] Univ Hong Kong, Hong Kong, Peoples R China.
   [Wang, Qinshi; Appel, Andrew W.] Princeton Univ, Princeton, NJ 08544 USA.
C3 Shanghai Jiao Tong University; University of Hong Kong; Princeton
   University
RP Zhou, LT (corresponding author), Shanghai Jiao Tong Univ, Shanghai, Peoples R China.; Zhou, LT (corresponding author), Univ Hong Kong, Hong Kong, Peoples R China.
EM tonyzhou0608@gmail.com; qdelta@sjtu.edu.cn; wangqinshi1995@gmail.com;
   appel@princeton.edu; caoqinxiang@gmail.com
OI Zhou, Litao/0000-0003-3046-7085; Appel, Andrew/0000-0001-6009-0325
FU NSF China [61902240]; Defense Advanced Research Projects Agency (DARPA)
   [HR001120C0160]
FX This material is based upon work supported (in part) by NSF China
   61902240, and the Defense Advanced Research Projects Agency (DARPA)
   under Contract No. HR001120C0160.
CR Abadi M., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P165, DOI 10.1109/LICS.1988.5115
   Appel A.W., 2014, Program Logics for Certified Compilers
   Appel AW, 2011, LECT NOTES COMPUT SC, V6602, P1, DOI 10.1007/978-3-642-19718-5_1
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Baudin P, 2021, COMMUN ACM, V64, P56, DOI 10.1145/3470569
   Beringer L, 2021, LECT NOTES COMPUT SC, V12648, P118, DOI 10.1007/978-3-030-72019-3_5
   Böhme S, 2010, LECT NOTES ARTIF INT, V6173, P107, DOI 10.1007/978-3-642-14203-1_9
   Boldo S, 2014, COMPUT MATH APPL, V68, P325, DOI 10.1016/j.camwa.2014.06.004
   Boutillier Pierre, 2014, Coq 8.4 Reference Manual
   Bulwahn L, 2008, LECT NOTES COMPUT SC, V5170, P134, DOI 10.1007/978-3-540-71067-7_14
   Calcagno C, 2011, LECT NOTES COMPUT SC, V6617, P459, DOI 10.1007/978-3-642-20398-5_33
   Cao QX, 2018, J AUTOM REASONING, V61, P367, DOI 10.1007/s10817-018-9457-5
   Chen CY, 2005, ACM SIGPLAN NOTICES, V40, P66, DOI 10.1145/1090189.1086375
   Chin WN, 2012, SCI COMPUT PROGRAM, V77, P1006, DOI 10.1016/j.scico.2010.07.004
   Cohen Joshua M, 2024, P ACM PROGR LANG, V8
   Cormen TH, 2022, Introduction to algorithms, V4th
   de Vilhena PE, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371101
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Floyd RobertW., 1993, Assigning Meanings to Programs, P65, DOI [10.1007/978-94-011-1793-7_4, DOI 10.1007/978-94-011-1793-7_4]
   Gotsman A, 2011, ELECTRON NOTES THEOR, V276, P171, DOI 10.1016/j.entcs.2011.09.021
   Ivancic F, 2005, LECT NOTES COMPUT SC, V3576, P301
   Ivancic F, 2015, AUTOMAT SOFTW ENG, V22, P517, DOI 10.1007/s10515-014-0164-0
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Krebbers R, 2017, LECT NOTES COMPUT SC, V10201, P696, DOI 10.1007/978-3-662-54434-1_26
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Kroening Daniel, 2014, TOOLS ALGORITHMS CON, V8413, P389, DOI [10.1007/978-3-642-54862-8_26, DOI 10.1007/978-3-642-54862-8_26]
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Malecha G, 2022, IEEE SECUR PRIV, V20, P33, DOI 10.1109/MSEC.2022.3158196
   Martínez G, 2019, LECT NOTES COMPUT SC, V11423, P30, DOI 10.1007/978-3-030-17184-1_2
   Müller P, 2017, NATO SCI PEAC SECUR, V50, P104, DOI 10.3233/978-1-61499-810-5-104
   Mulder I, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P809, DOI 10.1145/3519939.3523432
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V2986, P1
   Pulte C, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571194
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P343, DOI 10.1145/2480359.2429111
   Vafeiadis V, 2011, ELECTRON NOTES THEOR, V276, P335, DOI 10.1016/j.entcs.2011.09.029
   Vazou N, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158141
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Wang ZY, 2023, Arxiv, DOI [arXiv:2310.17616, 10.48550/arXiv.2310.17616, DOI 10.48550/ARXIV.2310.17616]
   Zhan BH, 2018, LECT NOTES COMPUT SC, V10805, P23, DOI 10.1007/978-3-319-89960-2_2
   Zhan BH, 2016, LECT NOTES COMPUT SC, V9807, P441, DOI 10.1007/978-3-319-43144-4_27
   Zhou LT, 2023, Arxiv, DOI [arXiv:1909.00097, 10.48550/arXiv.1909.00097, DOI 10.48550/ARXIV.1909.00097]
   Zhou Litao, 2023, VST-A: A Foundationally Sound Annotation Verifier, DOI [10.5281/zenodo.10207523, DOI 10.5281/ZENODO.10207523]
NR 47
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 69
DI 10.1145/3632911
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400070
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Stjerna, A
   Rümmer, P
AF Stjerna, Amanda
   Ruemmer, Philipp
TI A Constraint Solving Approach to Parikh Images of Regular Languages
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Parikh images; string solvers; model checking
AB A common problem in string constraint solvers is computing the Parikh image, a linear arithmetic formula that describes all possible combinations of character counts in strings of a given language. Automata-based string solvers frequently need to compute the Parikh image of products (or intersections) of finite-state automata, in particular when solving string constraints that also include the integer data-type due to operations like string length and indexing. In this context, the computation of Parikh images often turns out to be both prohibitively slow and memory-intensive. This paper contributes a new understanding of how the reasoning about Parikh images can be cast as a constraint solving problem, and questions about Parikh images be answered without explicitly computing the product automaton or the exact Parikh image. The paper shows how this formulation can be efficiently implemented as a calculus, PC*, embedded in an automated theorem prover supporting Presburger logic. The resulting standalone tool Catra is evaluate on constraints produced by the OSTRICH+ string solver when solving standard string constraint benchmarks involving integer operations. The experiments show that PC* strictly outperforms the standard approach by Verma et al. to extract Parikh images from finite-state automata, as well as the over-approximating method recently described by Janku and Turonova by a wide margin, and for realistic timeouts (under 60 s) also the nuXmv model checker. When added as the Parikh image backend of OSTRICH+ to the OSTRICH string constraint solver's portfolio, it boosts its results on the quantifier-free strings with linear integer algebra track of SMT-COMP 2023 (QF_SLIA) enough to solve the most UNSAT instances in that track of all competitors.
C1 [Stjerna, Amanda; Ruemmer, Philipp] Uppsala Univ, Dept Informat Technol, Lagerhyddsvagen 1,Hus 10, Uppsala, Sweden.
   [Ruemmer, Philipp] Univ Regensburg, Fac Informat & Data Sci, Bajuwarenstr 4, D-93053 Regensburg, Germany.
C3 Uppsala University; University of Regensburg
RP Stjerna, A (corresponding author), Uppsala Univ, Dept Informat Technol, Lagerhyddsvagen 1,Hus 10, Uppsala, Sweden.
EM amanda.stjerna@it.uu.se; philipp.ruemmer@ur.de
OI , Amanda/0000-0003-4180-6118
FU Swedish Research Council (VR) [2018-04727, 2021-06327]; Swedish
   Foundation for Strategic Research (SSF) [RIT17-0011]; Wallenberg project
   UPDATE
FX We thank the reviewers for insightful comments. This work was supported
   by the Swedish Research Council (VR) under grants 2018-04727 and
   2021-06327, the Swedish Foundation for Strategic Research (SSF) under
   the project WebSec (Ref. RIT17-0011), and the Wallenberg project UPDATE.
CR Abdulla PA, 2017, ACM SIGPLAN NOTICES, V52, P602, DOI [10.1145/3140587.3062384, 10.1145/3062341.3062384]
   Barbosa H, 2022, LECT NOTES COMPUT SC, V13243, P415, DOI 10.1007/978-3-030-99524-9_24
   Berzish M, 2021, LECT NOTES COMPUT SC, V12760, P289, DOI 10.1007/978-3-030-81688-9_14
   Berzish M, 2017, PROCEEDINGS OF THE 17TH CONFERENCE ON FORMAL METHODS IN COMPUTER AIDED DESIGN (FMCAD 2017), P55, DOI 10.23919/FMCAD.2017.8102241
   Bultan T., 2017, String Analysis for Software Verification and Security, V10, DOI DOI 10.1007/978-3-319-68670-7
   Cadilhac M, 2011, Arxiv, DOI arXiv:1101.1547
   Cavada R, 2014, LECT NOTES COMPUT SC, V8559, P334, DOI 10.1007/978-3-319-08867-9_22
   Chen TL, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290362
   Chen TL, 2020, LECT NOTES COMPUT SC, V12302, P325, DOI 10.1007/978-3-030-59152-6_18
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Esparza J, 2011, INFORM PROCESS LETT, V111, P614, DOI 10.1016/j.ipl.2011.03.019
   Figueira D, 2015, IEEE S LOG, P329, DOI 10.1109/LICS.2015.39
   Fitting Melvin, 1996, First-Order Logic and Automated Theorem Proving, Vsecond, DOI 10.1007/978-1-4612-2360-3
   Harrison J., 2009, Handbook of Practical Logic and Automated Reasoning
   Holík L, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158092
   Janku Petr, 2020, Computer Aided Systems Theory - EUROCAST 2019. 17th International Conference. Revised Selected Papers. Lecture Notes in Computer Science (LNCS 12013), P491, DOI 10.1007/978-3-030-45093-9_59
   KARHUMAKI J, 1980, INFORM CONTROL, V47, P155, DOI 10.1016/S0019-9958(80)90493-3
   Klaedtke Felix, 2002, Technical Report 177
   Kozen DC., 1997, Automata and Computability. Undergraduate Texts in Computer Science
   Lavado GJ, 2013, INFORM COMPUT, V228, P1, DOI 10.1016/j.ic.2013.06.003
   LUBY M, 1993, INFORM PROCESS LETT, V47, P173, DOI 10.1016/0020-0190(93)90029-9
   Marriott Kimbal, 1998, Programming with Constraints: An Introduction, DOI [10.7551/mitpress/5625.001.0001, DOI 10.7551/MITPRESS/5625.001.0001]
   Mora F, 2021, LECT NOTES COMPUT SC, V13047, P389, DOI 10.1007/978-3-030-90870-6_21
   PARIKH RJ, 1966, J ACM, V13, P570, DOI 10.1145/321356.321364
   Raya Rodrigo, 2023, Ph. D. Dissertation, DOI [10.5075/epflthesis-10546, DOI 10.5075/EPFLTHESIS-10546]
   Reynolds A, 2017, LECT NOTES COMPUT SC, V10427, P453, DOI 10.1007/978-3-319-63390-9_24
   Rummer P, 2008, LECT NOTES ARTIF INT, V5330, P274, DOI 10.1007/978-3-540-89439-1_20
   Saxena P, 2010, P IEEE S SECUR PRIV, P513, DOI 10.1109/SP.2010.38
   Seidl H, 2004, LECT NOTES COMPUT SC, V3142, P1136
   SIROMONEY R, 1985, LECT NOTES COMPUT SC, V206, P290
   SMT-COMP, 2023, SMT-COMP 2023 Results
   Stan Daniel, 2021, P 20 INT C AUT AG MU, P1254, DOI [10.5555/3463952.3464097, DOI 10.5555/3463952.3464097]
   Stanford C, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P620, DOI 10.1145/3453483.3454066
   Stjerna Amanda, 2024, Zenodo, DOI 10.5281/ZENODO.10796555
   Verma KN, 2005, LECT NOTES ARTIF INT, V3632, P337
   Zheng Yunhui, 2013, P 9 JOINT M FDN SOFT, P114, DOI [10.1145/2491411.2491456, DOI 10.1145/2491411.2491456]
NR 36
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 138
DI 10.1145/3649855
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600045
OA gold
DA 2024-08-05
ER

PT J
AU Wang, ZY
   Ma, PC
   Wang, HJ
   Wang, S
AF Wang, Zhaoyu
   Ma, Pingchuan
   Wang, Huaijin
   Wang, Shuai
TI PP-CSA: Practical Privacy-Preserving Software Call Stack Analysis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE differential privacy; call stack analysis
AB Software call stack is a sequence of function calls that are executed during the runtime of a software program. Software call stack analysis (CSA) is widely used in software engineering to analyze the runtime behavior of software, which can be used to optimize the software performance, identify bugs, and profile the software. Despite the benefits of CSA, it has recently come under scrutiny due to concerns about privacy. To date, software is often deployed at user-side devices like mobile phones and smart watches. The collected call stacks may thus contain privacy-sensitive information, such as healthy information or locations, depending on the software functionality. Leaking such information to third parties may cause serious privacy concerns such as discrimination and targeted advertisement.
   This paper presents PP-CSA, a practical and privacy-preserving CSA framework that can be deployed in real-world scenarios. Our framework leverages local differential privacy (LDP) as a principled privacy guarantee, to mutate the collected call stacks and protect the privacy of individual users. Furthermore, we propose several key design principles and optimizations in the technical pipeline of PP-CSA, including an encoder-decoder scheme to properly enforce LDP over software call stacks, and several client/server-side optimizations to largely improve the efficiency of PP-CSA. Our evaluation over real-world Java and Android programs shows that our privacy-preserving CSA pipeline can achieve high utility and privacy guarantees while maintaining high efficiency. We have released our implementation of PP-CSA as an open-source project at https://github.com/wangzhaoyu07/PP-CSA for results reproducibility. We will provide more detailed documents to support and the usage and extension of the community.
C1 [Wang, Zhaoyu; Ma, Pingchuan; Wang, Huaijin; Wang, Shuai] Hong Kong Univ Sci & Technol, Hong Kong, Peoples R China.
C3 Hong Kong University of Science & Technology
RP Wang, ZY (corresponding author), Hong Kong Univ Sci & Technol, Hong Kong, Peoples R China.
EM zwangjz@cse.ust.hk; pmaab@cse.ust.hk; hwangdz@cse.ust.hk;
   shuaiw@cse.ust.hk
RI Ma, Pingchuan/AFR-0634-2022
OI Ma, Pingchuan/0000-0003-3752-0803; Wang, Huaijin/0000-0002-1066-0331;
   Wang, Shuai/0000-0002-0866-0308; Wang, Zhaoyu/0009-0009-6892-1264
FU RGC CRF [C6015-23GF]
FX This research was supported in part by a RGC CRF grant under the
   contract C6015-23GF. We are grateful to the anonymous reviewers for
   their valuable comments.
CR [Anonymous], 2023, Android developer manual
   [Anonymous], 2023, PP-CSA
   Anstralian National University, 2021, DaCapo Bench
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Balle B, 2019, LECT NOTES COMPUT SC, V11693, P638, DOI 10.1007/978-3-030-26951-7_22
   Bichsel Benjamin, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P391, DOI 10.1109/SP40001.2021.00081
   Bichsel B, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P508, DOI 10.1145/3243734.3243863
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bond Michael D, 2005, 38 ANN IEEE ACM INT, DOI [10.1109/MICRO.2005.16, DOI 10.1109/MICRO.2005.16]
   Cabrera OD, 2019, J COMPUT APPL MATH, V355, P182, DOI 10.1016/j.cam.2019.01.015
   Cormode G, 2018, INT CONF MANAGE DATA, P1655, DOI 10.1145/3183713.3197390
   Cuéllar S, 2023, PROCEEDINGS OF THE 32ND USENIX SECURITY SYMPOSIUM, P6525
   Darais David, 2020, Proceedings of the ACM on Programming Languages, V4, DOI 10.1145/3371118
   Decker N, 2018, DES AUT TEST EUROPE, P851
   Devlin J, 2019, 2019 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES (NAACL HLT 2019), VOL. 1, P4171
   Ding ZY, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P475, DOI 10.1145/3243734.3243818
   Dingledine R, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE 13TH USENIX SECURITY SYMPOSIUM, P303
   Dwork C, 2006, LECT NOTES COMPUT SC, V4052, P1
   Dwork C, 2013, FOUND TRENDS THEOR C, V9, P211, DOI 10.1561/0400000042
   Erlingsson U, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1054, DOI 10.1145/2660267.2660348
   Fang ZY, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2951, DOI 10.1145/3460120.3484795
   Gentry C, 2009, ACM S THEORY COMPUT, P169, DOI 10.1145/1536414.1536440
   Gill W, 2023, PROC INT CONF SOFTW, P512, DOI 10.1109/ICSE48619.2023.00053
   Glerum K, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P103
   Goldman E., 2020, Santa Clara Univ. Legal Studies Research Paper
   Google, 2020, Monkey: UI/Application exerciser for Android
   Graves A, 2012, STUD COMPUT INTELL, V385, P1, DOI [10.1162/neco.1997.9.8.1735, 10.1007/978-3-642-24797-2, 10.1162/neco.1997.9.1.1]
   Habernal I, 2021, 2021 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2021), P1522
   Han S, 2012, PROC INT CONF SOFTW, P145, DOI 10.1109/ICSE.2012.6227198
   Hao Yu, 2021, Leibniz international proceedings in informatics, V194, DOI [10.4230/LIPICS.ECOOP.2021.8, DOI 10.4230/LIPICS.ECOOP.2021.8]
   Hua YQ, 2022, PROCEEDINGS OF THE 31ST USENIX SECURITY SYMPOSIUM, P1777
   Igamberdiev Timour, 2023, FINDINGS ASS COMPUTA, P13914
   Ishaq M, 2019, PROCEEDINGS OF THE 2019 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'19), P1539, DOI 10.1145/3319535.3339818
   Jin W, 2012, PROC INT CONF SOFTW, P474, DOI 10.1109/ICSE.2012.6227168
   Ko AJ, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P301, DOI 10.1145/1368088.1368130
   Krishna S, 2021, 16TH CONFERENCE OF THE EUROPEAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS (EACL 2021), P2435
   Kwon A, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P287
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/cgo.2004.1281665
   Levy B, 2023, PROCEEDINGS OF THE 2023 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, CCS 2023, P2531, DOI 10.1145/3576915.3623181
   Lewis M, 2019, P 58 ANN M ASS COMP, DOI [10.18653/v1/2020.acl-main.703, DOI 10.18653/V1/2020.ACL-MAIN.703]
   Liu C, 2015, ACM SIGPLAN NOTICES, V50, P87, DOI 10.1145/2694344.2694385
   Liu Junrui, 2023, arXiv
   Lu YJ, 2021, INT C COMP SUPP COOP, P434, DOI 10.1109/CSCWD49262.2021.9437683
   Ma PC, 2022, IEEE T INF FOREN SEC, V17, P982, DOI 10.1109/TIFS.2022.3155274
   Mirgorodskiy A.V., 2006, SC '06: Proceedings of the 2006 ACM/IEEE conference on Supercomputing, P88, DOI [10.1145/1188455.1188548, DOI 10.1145/1188455.1188548]
   Near Joe, 2018, ENIGMA 2018
   Pailoor S, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591282
   Pang Qi, 2024, NDSS
   Ponomareva N, 2023, J ARTIF INTELL RES, V77, P1113
   Roy Subhajit, 2021, 2021 IEEE Symposium on Security and Privacy (SP), P852, DOI 10.1109/SP40001.2021.00060
   Santos JCS, 2022, PROCEEDINGS OF THE 30TH ACM JOINT MEETING EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, ESEC/FSE 2022, P1819, DOI 10.1145/3540250.3569449
   Soot OSS, 2023, Soot-A Java Optimization Framework
   Tallent NR, 2009, PROCEEDINGS OF THE CONFERENCE ON HIGH PERFORMANCE COMPUTING NETWORKING, STORAGE AND ANALYSIS
   Thiessen R, 2017, ACM SIGPLAN NOTICES, V52, P263, DOI [10.1145/3140587.3062359, 10.1145/3062341.3062359]
   Tramèr F, 2017, 2017 IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P), P19, DOI 10.1109/EuroSP.2017.28
   Voigt P., 2017, A Practical Guide, V10, P10, DOI DOI 10.1007/978-3-319-57959-7
   Wang TH, 2021, IEEE T DEPEND SECURE, V18, P982, DOI 10.1109/TDSC.2019.2927695
   Wang YX, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P393, DOI 10.1145/3460120.3484781
   WARNER SL, 1965, J AM STAT ASSOC, V60, P63, DOI 10.2307/2283137
   Wu Rongxin, 2014, P 2014 INT S SOFTW T, P204, DOI DOI 10.1145/2610384.2610386
   Wu XW, 2020, PHYS REV MATER, V4, DOI 10.1103/PhysRevMaterials.4.086001
   Wunderlich Sarah, 2020, International Joint Conference: 12th International Conference on Computational Intelligence in Security for Information Systems (CISIS 2019) and 10th International Conference on EUropean Transnational Education (ICEUTE 2019). Proceedings. Advances in Intelligent Systems and Computing (AISC 951), P14, DOI 10.1007/978-3-030-20005-3_2
   Yang Y., 2012, P 2012 ACM SIGMOD IN, P601
   Yao A. C., 1982, 23rd Annual Symposium on Foundations of Computer Science, P160, DOI 10.1109/SFCS.1982.38
   Zhang H., 2020, USENIX SEC S USENIX
NR 65
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 139
DI 10.1145/3649856
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600046
OA gold
DA 2024-08-05
ER

PT J
AU Xu, ZY
   Chon, YB
   Su, Y
   Tan, ZJ
   Apostolakis, S
   Campanoni, S
   August, DI
AF Xu, Ziyang
   Chon, Yebin
   Su, Yian
   Tan, Zujun
   Apostolakis, Sotiris
   Campanoni, Simone
   August, David I.
TI PROMPT: A Fast and Extensible Memory Profiling Framework
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE memory profiling; compiler optimizations; profiler framework
AB Memory profiling captures programs' dynamic memory behavior, assisting programmers in debugging, tuning, and enabling advanced compiler optimizations like speculation-based automatic parallelization. As each use case demands its unique program trace summary, various memory profiler types have been developed. Yet, designing practical memory profilers often requires extensive compiler expertise, adeptness in program optimization, and significant implementation effort. This often results in a void where aspirations for fast and robust profilers remain unfulfilled. To bridge this gap, this paper presents PROMPT, a framework for streamlined development of fast memory profilers. With PROMPT, developers need only specify profiling events and define the core profiling logic, bypassing the complexities of custom instrumentation and intricate memory profiling components and optimizations. Two state-of-the-art memory profilers were ported with PROMPT where all features preserved. By focusing on the core profiling logic, the code was reduced by more than 65% and the profiling overhead was improved by 5.3x and 7.1x respectively. To further underscore PROMPT's impact, a tailored memory profiling workflow was constructed for a sophisticated compiler optimization client. In 570 lines of code, this redesigned workflow satisfies the client's memory profiling needs while achieving more than 90% reduction in profiling overhead and improved robustness compared to the original profilers.
C1 [Xu, Ziyang; Chon, Yebin; Tan, Zujun; August, David I.] Princeton Univ, Princeton, NJ 08544 USA.
   [Su, Yian; Campanoni, Simone] Northwestern Univ, Evanston, IL USA.
   [Apostolakis, Sotiris] Google, New York, NY USA.
C3 Princeton University; Northwestern University; Google Incorporated
RP Xu, ZY (corresponding author), Princeton Univ, Princeton, NJ 08544 USA.
EM ziyangx@princeton.edu; yebin.chon@princeton.edu;
   yiansu2018@u.northwestern.edu; zujunt@princeton.edu;
   apostolakis@google.com; simone.campanoni@northwestern.edu;
   august@princeton.edu
OI Xu, Ziyang/0000-0002-8297-7573; Su, Yian/0000-0001-8242-0743
FU U.S. Department of Energy, Office of Science, Office of Advanced
   Scientific Computing Research [DE-AC02-06CH11357, DE-SC0022138,
   DE-SC0022268]; U.S. Department of Energy Office of Science
   [17-SC-20-SC]; National Nuclear Security Administration [17-SC-20-SC];
   National Science Foundation [CCF-2107257, CCF-2118708, CCF-2107042,
   CCF-2119069, CCF-1908488]; U.S. Department of Energy (DOE)
   [DE-SC0022138, DE-SC0022268] Funding Source: U.S. Department of Energy
   (DOE)
FX We thank members of the Liberty Research Group and the Arcana Lab for
   their support and feedback on this work. We also thank the reviewers for
   the comments and suggestions that made this work stronger. This material
   is based upon work supported by the U.S. Department of Energy, Office of
   Science, Office of Advanced Scientific Computing Research, under
   contract numbers DE-AC02-06CH11357, DE-SC0022138, and DE-SC0022268. This
   research was supported by the Exascale Computing Project (17-SC-20-SC),
   a collaborative effort of the U.S. Department of Energy Office of
   Science and the National Nuclear Security Administration. This material
   is based upon work supported by the National Science Foundation under
   Grants CCF-2107257, CCF-2118708, CCF-2107042, CCF-2119069, and
   CCF-1908488.
CR Abseil Team, 2023, Abseil/Abseil-CPP: Abseil Common Libraries (C++)
   Albert Danial, 2021, cloc: v1.92
   Apostolakis S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P638, DOI 10.1145/3385412.3386028
   Apostolakis S, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P351, DOI 10.1145/3373376.3378458
   Bruening D, 2012, ACM SIGPLAN NOTICES, V47, P133, DOI 10.1145/2365864.2151043
   Bucek J, 2018, COMPANION OF THE 2018 ACM/SPEC INTERNATIONAL CONFERENCE ON PERFORMANCE ENGINEERING (ICPE '18), P41, DOI 10.1145/3185768.3185771
   Chen DH, 2016, INT SYM CODE GENER, P12, DOI 10.1145/2854038.2854044
   Chen T, 2004, LECT NOTES COMPUT SC, V2985, P57
   Connors D.A., 1997, Memory profiling for directing data speculative optimizations and scheduling
   Deiana EA, 2023, INT SYM CODE GENER, P199, DOI 10.1145/3579990.3580011
   DynamoRio Team, 2023, drcachesim
   Gabbay F, 1997, INT SYMP MICROARCH, P270, DOI 10.1109/MICRO.1997.645817
   GCC Team, 2023, GCC, the GNU compiler collection
   Jablin Thomas B, 2010, P 8 WORKSH EXPL PAR
   Johnson NP, 2012, ACM SIGPLAN NOTICES, V47, P359, DOI 10.1145/2345156.2254107
   Ketterlin A, 2012, INT SYMP MICROARCH, P437, DOI 10.1109/MICRO.2012.47
   Kim C, 2017, INT C HIGH PERFORM, P328, DOI 10.1109/HiPC.2017.00045
   Kim Minjang., 2010, INT S MICROARCHITECT, P535, DOI [10.1109/MICRO.2010.49, DOI 10.1109/MICRO.2010.49]
   Krishnaiyer Rakesh, 2013, 2013 IEEE International Symposium on Parallel and Distributed Processing, Workshops and PhD Forum (IPDPSW), P1575, DOI 10.1109/IPDPSW.2013.231
   LARUS JR, 1993, IEEE T PARALL DISTR, V4, P812, DOI 10.1109/71.238302
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/cgo.2004.1281665
   Liberty Research Group, 2022, Collaborative Parallelization Framework Compiler
   Luk CK, 2005, ACM SIGPLAN NOTICES, V40, P190, DOI 10.1145/1064978.1065034
   Mason Thomas, 2009, Lampview: A loop-aware toolset for facilitating parallelization
   Mattos JCB, 2007, P IEEE RAP SYST PROT, P69
   Morew N, 2020, LECT NOTES COMPUT SC, V12247, P3, DOI 10.1007/978-3-030-57675-2_1
   Moseley T, 2007, INT SYM CODE GENER, P198
   mTrace Team, 2013, MTRACE
   Nethercote N, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P89, DOI 10.1145/1250734.1250746
   Nethercote N, 2007, VEE'07: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON VIRTUAL EXECUTION ENVIRONMENTS, P65
   Panchenko M, 2019, INT SYM CODE GENER, P2, DOI [10.1109/CGO.2019.8661201, 10.5281/zenodo.2542117]
   Popovitch Gregory, 2023, GREG7MDP/parallel-hashmap: A family of header-only, very fast and memory-friendly hashmap and BTREE containers
   PROMPT Team, 2024, PROMPT memory profiling system
   Rangan Ram, 2006, P WORKSH PROGR MOD U, P1
   Rauchwerger L, 1999, IEEE T PARALL DISTR, V10, P160, DOI 10.1109/71.752782
   Reps T., 1996, Partial Evaluation. International Seminar. Selected Papers, P409
   Sato Y., 2012, 2012 IEEE International Symposium on Workload Characterization (IISWC 2012), P69, DOI 10.1109/IISWC.2012.6402902
   Schultz UP, 2003, ACM T PROGR LANG SYS, V25, P452, DOI 10.1145/778559.778561
   Serebryany Konstantin, 2012, P USENIX ANN TECHNIC
   Steffan JG, 2000, PROCEEDING OF THE 27TH INTERNATIONAL SYMPOSIUM ON COMPUTER ARCHITECTURE, P1, DOI [10.1109/ISCA.2000.854372, 10.1145/342001.339650]
   Stepanov E, 2015, INT SYM CODE GENER, P46, DOI 10.1109/CGO.2015.7054186
   Swaminathan K, 2012, 2012 INTERNATIONAL SYMPOSIUM ON ELECTRONIC SYSTEM DESIGN (ISED 2012), P72, DOI 10.1109/ISED.2012.11
   Szuppe Jakub, 2016, P 4 INT WORKSH OPENC, P1, DOI [10.1145/2909437.2909454, DOI 10.1145/2909437.2909454]
   Tallam S, 2007, ACM T ARCHIT CODE OP, V4, DOI 10.1145/1275937.1275943
   Thies W, 2007, INT SYMP MICROARCH, P356, DOI 10.1109/MICRO.2007.38
   Vanka Rajeshwar., 2012, CODE GENERATION OPTI, P186, DOI DOI 10.1145/2259016.2259041
   Wallace S, 2007, INT SYM CODE GENER, P209
   Wang MZ, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P1010, DOI 10.1145/3519939.3523428
   Wei Liu, 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P158, DOI 10.1145/1122971.1122997
   Wu P, 2008, LECT NOTES COMPUT SC, V5335, P232, DOI 10.1007/978-3-540-89740-8_16
   Wu Q, 2004, INT SYM CODE GENER, P315
   Xu Ziyang, 2024, Zenodo, DOI 10.5281/ZENODO.10783906
   Yu Hongtao, 2012, P 2012 INT S SOFTW T, P23, DOI [10.1145/2338965.2336756, DOI 10.1145/2338965.2336756]
   Yu Hongtao., 2012, P 26 ACM INT C SUPER, P37, DOI [10.1145/2304576.2304584, DOI 10.1145/2304576.2304584]
   Zhang XY, 2009, INT SYM CODE GENER, P47, DOI 10.1109/CGO.2009.15
   Zhao Q., 2006, 15 INT C PARALLEL AR, P154, DOI DOI 10.1145/1152154.1152180
   Zhao Q, 2010, ACM SIGPLAN NOTICES, V45, P93
NR 57
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 110
DI 10.1145/3649827
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600017
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Ceragioli, L
   Gadducci, F
   Lomurno, G
   Tedeschi, G
AF Ceragioli, Lorenzo
   Gadducci, Fabio
   Lomurno, Giuseppe
   Tedeschi, Gabriele
TI Quantum Bisimilarity via Barbs and Contexts: Curbing the Power of
   Non-deterministic Observers
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Quantum Communication; Linear Process Calculi; Behavioural Equivalence;
   Probabilistic Bisimulation
ID PROBABILISTIC BISIMULATIONS; KEY DISTRIBUTION
AB Past years have seen the development of a few proposals for quantum extensions of process calculi. The rationale is clear: with the development of quantum communication protocols, there is a need to abstract and focus on the basic features of quantum concurrent systems, like CCS and CSP have done for their classical counterparts. So far, though, no accepted standard has emerged, neither for the syntax nor for the behavioural semantics. Indeed, the various proposals do not agree on what should be the observational properties of quantum values, and as a matter of fact, the soundness of such properties has never been validated against the prescriptions of quantum theory.
   To this aim, we introduce a new calculus, Linear Quantum CCS (lqCCS), and investigate the features of behavioural equivalences based on barbs and contexts. Our calculus can be thought of as an asynchronous, linear version of qCCS, which is in turn based on value-passing CCS. The combination of linearity and asynchronous communication fits well with the properties of quantum systems (e.g. the no-cloning theorem), since it ensures that each qubit is sent exactly once, precisely specifying which qubits of a process interact with the context.
   We exploit contexts to examine how bisimilarities relate to quantum theory. We show that the observational power of general contexts is incompatible with quantum theory: roughly, they can perform non-deterministic moves depending on quantum values without measuring (hence perturbing) them.
   Therefore, we refine the operational semantics in order to prevent contexts from performing unfeasible non-deterministic choices. This induces a coarser bisimilarity that better fits the quantum setting: (i) it lifts the indistinguishability of quantum states to the distributions of processes and, despite the additional constraints, (ii) it preserves the expressiveness of non-deterministic choices based on classical information. To the best of our knowledge, our semantics is the first one that satisfies the two properties above.
C1 [Ceragioli, Lorenzo] IMT Sch Adv Studies Lucca, Lucca, LU, Italy.
   [Gadducci, Fabio; Lomurno, Giuseppe; Tedeschi, Gabriele] Univ Pisa, Pisa, Italy.
C3 IMT School for Advanced Studies Lucca; University of Pisa
RP Ceragioli, L (corresponding author), IMT Sch Adv Studies Lucca, Lucca, LU, Italy.
EM lorenzo.ceragioli@imtlucca.it; fabio.gadducci@unipi.it;
   giuseppe.lomurno@phd.unipi.it; gabriele.tedeschi@phd.unipi.it
OI Tedeschi, Gabriele/0009-0002-5345-9141
FU European Union NextGenerationEU -National Recovery and Resilience Plan
   (NRRP) -MISSION 4 COMPONENT 2, INVESTMENT N. 1.4 -CUP [I53C22000690001]
FX This study was carried out within the National Centre on HPC, Big Data
   and Quantum Computing -SPOKE 10 (Quantum Computing) and received funding
   from the European Union NextGenerationEU -National Recovery and
   Resilience Plan (NRRP) -MISSION 4 COMPONENT 2, INVESTMENT N. 1.4 -CUP N.
   I53C22000690001.
CR [Anonymous], 1992, Mathematical Structures in Computer Science, DOI DOI 10.1017/S0960129500001407
   BENNETT CH, 1992, PHYS REV LETT, V69, P2881, DOI 10.1103/PhysRevLett.69.2881
   BENNETT CH, 1993, PHYS REV LETT, V70, P1895, DOI 10.1103/PhysRevLett.70.1895
   Bennett CH, 2014, THEOR COMPUT SCI, V560, P7, DOI 10.1016/j.tcs.2014.05.025
   Bonchi F, 2014, ACM T COMPUT LOG, V15, DOI 10.1145/2631916
   Bonchi Filippo, 2017, 28 INT C CONCURRENCY, V23, DOI 10.4230/LIPIcs.CONCUR.2017.23
   Ceragioli Lorenzo, 2023, arXiv, DOI [10.48550/arXiv.2311.06116, DOI 10.48550/ARXIV.2311.06116]
   Davidson Timothy A. S., 2012, Ph. D. Dissertation
   Degano P, 2001, ACM COMPUT SURV, V33, P135, DOI 10.1145/384192.384194
   Deng Yuxin, 2018, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V2, P1, DOI [10.4230/LIPIcs.CONCUR.2018.2, DOI 10.4230/LIPICS.CONCUR.2018.2]
   Feng Y, 2007, INFORM COMPUT, V205, P1608, DOI 10.1016/j.ic.2007.08.001
   Feng Y, 2014, ACM T COMPUT LOG, V15, DOI 10.1145/2579818
   Feng Y, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2400676.2400680
   Feng Yuan, 2015, LIPIcs, V42, P441, DOI [10.4230/LIPIcs.CONCUR.2015.441, DOI 10.4230/LIPICS.CONCUR.2015.441]
   Gay SJ, 2006, MATH STRUCT COMP SCI, V16, P375, DOI 10.1017/S0960129506005263
   Gay SJ, 2005, ACM SIGPLAN NOTICES, V40, P145, DOI 10.1145/1047659.1040318
   Harrow AW, 2009, PHYS REV LETT, V103, DOI 10.1103/PhysRevLett.103.150502
   Hennessy M., 1991, Formal Aspects of Computing, V3, P346, DOI 10.1007/BF01642508
   Hennessy M, 2012, FORM ASP COMPUT, V24, P749, DOI 10.1007/s00165-012-0242-7
   Kimble HJ, 2008, NATURE, V453, P1023, DOI 10.1038/nature07127
   Kubota Takahiro, 2012, FCS 12, P141
   Lalire M, 2006, MATH STRUCT COMP SCI, V16, P407, DOI 10.1017/S096012950600524X
   Lalire Marie, 2004, CoRR, DOI [10.48550/arXiv.quantph/0407005, DOI 10.48550/ARXIV.QUANTPH/0407005]
   Nielsen M.A., 2010, Quantum Computation and Quantum Information: 10th Anniversary Edition, DOI DOI 10.1017/CBO9780511976667
   Poppe A, 2004, OPT EXPRESS, V12, P3865, DOI 10.1364/OPEX.12.003865
   Pous Damien, 2011, Advanced Topics in Bisimulation and Coinduction, P233, DOI DOI 10.1017/CBO9780511792588.007
   Segala Roberto, 1995, Ph. D. Dissertation
   SHOR PW, 1994, AN S FDN CO, P124
   Sokolova A, 2011, THEOR COMPUT SCI, V412, P5095, DOI 10.1016/j.tcs.2011.05.008
   Tani S, 2012, ACM T COMPUT THEORY, V4, DOI 10.1145/2141938.2141939
   Ying MS, 2009, ACM T COMPUT LOG, V10, DOI 10.1145/1507244.1507249
   Yuxin Deng, 2012, Theoretical Computer Science. Proceedings of the 7th IFIP TC 1/WG 2.2 International Conference, TCS 2012, P119, DOI 10.1007/978-3-642-33475-7_9
NR 32
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 43
DI 10.1145/3632885
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400044
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Crichton, W
   Krishnamurthi, S
AF Crichton, Will
   Krishnamurthi, Shriram
TI A Core Calculus for Documents
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE document languages; markup; templates
AB Passive documents and active programs now widely comingle. Document languages include Turing-complete programming elements, and programming languages include sophisticated document notations. However, there are no formal foundations that model these languages. This matters because the interaction between document and program can be subtle and error-prone. In this paper we describe several such problems, then taxonomize and formalize document languages as levels of a document calculus. We employ the calculus as a foundation for implementing complex features such as reactivity, as well as for proving theorems about the boundary of content and computation. We intend for the document calculus to provide a theoretical basis for new document languages, and to assist designers in cleaning up the unsavory corners of existing languages.
C1 [Crichton, Will; Krishnamurthi, Shriram] Brown Univ, Dept Comp Sci, Providence, RI 02912 USA.
C3 Brown University
RP Crichton, W (corresponding author), Brown Univ, Dept Comp Sci, Providence, RI 02912 USA.
EM wcrichto@brown.edu
OI Crichton, Will/0000-0001-8639-6541; Krishnamurthi,
   Shriram/0000-0001-5184-1975
FU US NSF [2319014]
FX This work was partially supported by a gift from Amazon and by the US
   NSF under Grant No. 2319014. We are grateful to the numerous individuals
   who have worked on the document languages that in.uenced our work.
CR Arnoldus Jeroen, 2007, P 6 INT C GENERATIVE, P25, DOI DOI 10.1145/1289971.1289977
   Benzaken V, 2003, ACM SIGPLAN NOTICES, V38, P51, DOI 10.1145/944746.944711
   Bock AA, 2020, J COMPUT LANG, V57, DOI 10.1016/j.cola.2020.100960
   Burmako Eugene, 2013, P 4 WORKSHOP SCALA M, DOI [10.1145/2489837.2489840, DOI 10.1145/2489837.2489840, 10.1145/ 2489837.2489840]
   Cave A, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P413
   Christensen AS, 2003, ACM T PROGR LANG SYS, V25, P814, DOI 10.1145/945885.945890
   Conlen M, 2018, UIST 2018: PROCEEDINGS OF THE 31ST ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P977, DOI 10.1145/3242587.3242600
   COOMBS JH, 1987, COMMUN ACM, V30, P933, DOI 10.1145/32206.32209
   Crichton Will, 2023, Artifact for "A Core Calculus for Documents, DOI [10.5281/zenodo.8409115, DOI 10.5281/ZENODO.8409115]
   Czaplicki E, 2013, ACM SIGPLAN NOTICES, V48, P411, DOI 10.1145/2499370.2462161
   DeRose S. J., 1997, Journal of Computer Documentation, V21, P1, DOI 10.1145/264842.264843
   FELLEISEN M, 1991, SCI COMPUT PROGRAM, V17, P35, DOI 10.1016/0167-6423(91)90036-W
   Filaretti D, 2014, LECT NOTES COMPUT SC, V8586, P567
   Flatt M, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P109
   Gallesio E, 2005, J FUNCT PROGRAM, V15, P751, DOI 10.1017/S0956796805005575
   Goldfarb Charles F., 1990, The SGML handbook, V10
   Guo Shu-yu, 2023, ECMAScript 2024 Language Speci.cation
   Heidenreich Florian, 2009, P 8 INT C GENERATIVE, P99, DOI DOI 10.1145/1621607.1621624
   Hosoya Haruo, 2003, ACM T INTERNET TECHN, V3, DOI DOI 10.1145/767193.767195
   Kernighan Brian W., 1977, The M4 Macro Processor
   Knuth Donald E, 1996, COMMEMORATIVE LECT K
   Knuth Donald Ervin, 1986, The TeXbook
   Licata DR, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123
   Loh A., 2006, PPDP 2006. Proceedings of the Eighth ACM SIGPLAN Symposium on Principles and Practice of Declarative Programming, P133, DOI 10.1145/1140335.1140352
   MacFarlane John., 2018, Beyond Markdown
   MacFarlane John, 2021, CommonMark Spec Version 0.30
   Madje Laurenz, 2022, Typst: A Programmable Markup Language for Typesetting
   McCarthy Jay, 2022, Web Applications in Racket
   NEWCOMB SR, 1991, COMMUN ACM, V34, P67, DOI 10.1145/125490.125495
   Parr T.J., 2004, P 13 INT C WORLD WID, P224, DOI [DOI 10.1145/988672.988703, 10.1145/988672.988703]
   Pombrio J, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P812, DOI 10.1145/3192366.3192398
   Reid Brian K., 1980, P 7 ACM SIGPLANSIGAC, P24, DOI DOI 10.1145/567446.567449
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Simeon Jerome., 2003, Proceedings of the 30th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, P1, DOI [10.1145/604131.604132, DOI 10.1145/604131.604132]
   Taha W., 1997, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, PEPM '97, P203, DOI 10.1145/258994.259019
NR 35
TC 1
Z9 1
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 23
DI 10.1145/3632865
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400024
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Chen, Z
   Zhu, YL
   Wang, ZM
AF Chen, Zhe
   Zhu, Yunlong
   Wang, Zhemin
TI Design and Implementation of an Aspect-Oriented C Programming Language
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE aspect-oriented programming; C language; semantics; instrumentation;
   compiler; transformation
ID INSTRUMENTATION
AB Aspect-Oriented Programming (AOP) is a programming paradigm that implements crosscutting concerns in a modular way. People have witnessed the prosperity of AOP languages for Java and C++, such as AspectJ and AspectC++, which has propelled AOP to become an important programming paradigm with many interesting application scenarios, e.g., runtime verification. In contrast, the AOP languages for C are still poor and lack compiler support. In this paper, we design a new general-purpose and expressive aspect-oriented C programming language, namely Aclang, and implement a compiler for it, which brings fully-fledged AOP support into the C domain. We have evaluated the effectiveness and performance of our compiler against two state-of-the-art tools, ACC and AspectC++. In terms of effectiveness, Aclang outperforms ACC and AspectC++. In terms of performance, Aclang outperforms ACC in execution time and outperforms AspectC++ in both execution time and memory consumption.
C1 [Chen, Zhe; Zhu, Yunlong; Wang, Zhemin] Nanjing Univ Aeronaut & Astronaut, Nanjing, Peoples R China.
C3 Nanjing University of Aeronautics & Astronautics
RP Chen, Z (corresponding author), Nanjing Univ Aeronaut & Astronaut, Nanjing, Peoples R China.
EM zhechen@nuaa.edu.cn; yunlongzhu89@126.com; zheminwang90@126.com
FU National Natural Science Foundation of China [62172217]; Joint Research
   Funds of the National Natural Science Foundation of China; Civil
   Aviation Administration of China [U1533130]
FX The authors would like to thank the anonymous reviewers for their
   constructive comments. This work was supported in part by the National
   Natural Science Foundation of China under Grant 62172217, and in part by
   the Joint Research Funds of the National Natural Science Foundation of
   China and the Civil Aviation Administration of China under Grant
   U1533130.
CR Avgustinov P, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P11
   Chebout MS, 2019, MULTIAGENT GRID SYST, V15, P155, DOI 10.3233/MGS-190307
   Chen F, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P569
   Chen Zhe, 2024, Zenodo, DOI 10.5281/ZENODO.10775922
   Chen Z, 2023, IEEE T SOFTWARE ENG, V49, P2107, DOI 10.1109/TSE.2022.3210580
   Chen Z, 2022, PROC IEEE ACM INT C, P6, DOI [10.1145/3510454.3516872, 10.1109/ICSE-Companion55297.2022.9793834]
   Chen Z, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P296, DOI 10.1145/3460319.3464807
   Chen Z, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P341, DOI 10.1145/3293882.3330581
   Chen Zhe, 2024, Movec: A Tool for the Monitoring and Verification of C Programs
   Chen Zhe, 2024, Movec Homepage
   Chen Zhe, 2024, ACM Transactions on Software Engineering and Methodology
   Coady Y., 2001, Software Engineering Notes, V26, P88, DOI 10.1145/503271.503223
   Coady Y, 2001, COMMUN ACM, V44, P79, DOI 10.1145/383845.383863
   Douence R, 2006, LECT NOTES COMPUT SC, V3880, P174
   Douence Remi, 2005, P 4 INT C ASP OR SOF, P27
   Freire AFAA, 2021, SOFTWARE PRACT EXPER, V51, P1280, DOI 10.1002/spe.2956
   Gong Weigang, 2010, Working Technical Draft
   Guthaus MR, 2001, WWC-4: IEEE INTERNATIONAL WORKSHOP ON WORKLOAD CHARACTERIZATION, P3, DOI 10.1109/WWC.2001.990739
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   Leucker M, 2009, J LOGIC ALGEBR PROGR, V78, P293, DOI 10.1016/j.jlap.2008.08.004
   Mahrenholz D, 2002, ISORC 2002: FIFTH IEEE INTERNATIONAL SYMPOSIUM ON OBJECT-ORIENTED REAL-TIME DISTRIBUTED COMPUTING, PROCEEDINGS, P249
   Meredith Patrick, 2012, International Journal on Software Tools for Technology Transfer, V14, P249, DOI 10.1007/s10009-011-0198-6
   Pérez B, 2021, 2021 IEEE/ACM 43RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: JOINT TRACK ON SOFTWARE ENGINEERING EDUCATION AND TRAINING (ICSE-JSEET 2021), P221, DOI 10.1109/ICSE-SEET52601.2021.00032
   Runtime Verification, 2023, The Runtime Verification Conference Series
   Ségura-Devillechaise M, 2006, IEEE SOFTWARE, V23, P34, DOI 10.1109/MS.2006.9
   Seyster J, 2012, FORM METHOD SYST DES, V41, P295, DOI 10.1007/s10703-012-0171-3
   Seyster J, 2010, LECT NOTES COMPUT SC, V6418, P405, DOI 10.1007/978-3-642-16612-9_31
   Spinczyk O., 2002, CR PIT 02 P 40 INT C, P53
   Spinczyk O, 2007, KNOWL-BASED SYST, V20, P636, DOI 10.1016/j.knosys.2007.05.004
   Spinczyk Olaf, 2021, AspectC++ Language Reference. Version 2.3
   Spinczyk Olaf, 2021, AspectC++ Compiler Manual
   Walker D, 2003, ACM SIGPLAN NOTICES, V38, P127, DOI 10.1145/944746.944718
   Wand M, 2004, ACM T PROGR LANG SYS, V26, P890, DOI 10.1145/1018203.1018208
NR 34
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 117
DI 10.1145/3649834
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600024
OA gold
DA 2024-08-05
ER

PT J
AU Kabaha, A
   Cohen, DD
AF Kabaha, Anan
   Cohen, Dana Drachsler
TI Verification of Neural Networks' Global Robustness
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Neural Network Verification; Global Robustness; Constrained Optimization
AB Neural networks are successful in various applications but are also susceptible to adversarial attacks. To show the safety of network classifiers, many verifiers have been introduced to reason about the local robustness of a given input to a given perturbation. While successful, local robustness cannot generalize to unseen inputs. Several works analyze global robustness properties, however, neither can provide a precise guarantee about the cases where a network classifier does not change its classification. In this work, we propose a new global robustness property for classifiers aiming at finding the minimal globally robust bound, which naturally extends the popular local robustness property for classifiers. We introduce VHAGaR, an anytime verifier for computing this bound. VHAGaR relies on three main ideas: encoding the problem as a mixed-integer programming and pruning the search space by identifying dependencies stemming from the perturbation or the network's computation and generalizing adversarial attacks to unknown inputs. We evaluate VHAGaR on several datasets and classifiers and show that, given a three hour timeout, the average gap between the lower and upper bound on the minimal globally robust bound computed by VHAGaR is 1.9, while the gap of an existing global robustness verifier is 154.7. Moreover, VHAGaR is 130.6x faster than this verifier. Our results further indicate that leveraging dependencies and adversarial attacks makes VHAGaR 78.6x faster.
C1 [Kabaha, Anan; Cohen, Dana Drachsler] Technion, Haifa, Israel.
C3 Technion Israel Institute of Technology
RP Kabaha, A (corresponding author), Technion, Haifa, Israel.
EM anan.kabaha@campus.technion.ac.il; ddana@ee.technion.ac.il
FU Israel Science Foundation [2605/20]
FX We thank the anonymous reviewers for their feedback. This research was
   supported by the Israel Science Foundation (grant No. 2605/20).
CR Alfarra Motasem, 2020, On the Decision Boundaries of Neural Networks: A Tropical Geometry Perspective, DOI [10.1109/TPAMI.2022.3201490, DOI 10.1109/TPAMI.2022.3201490]
   Anderson G, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P731, DOI 10.1145/3314221.3314614
   [Anonymous], 2017, A Rotation and a Translation Suffice: Fooling CNNs with Simple Transformations
   Balunovic M., 2019, Advances in Neural Information Processing Systems
   Balunovic Mislav, 2020, INT C LEARN REPR
   Bastani O, 2016, ADV NEUR IN, V29
   Bhattad A., 2020, ICLR, P1
   Carlini N, 2017, P IEEE S SECUR PRIV, P39, DOI 10.1109/SP.2017.49
   Chen PY, 2018, AAAI CONF ARTIF INTE, P10
   Chen Pin-Yu, 2017, P 10 ACM WORKSH ART, P15, DOI [DOI 10.1145/3128572.3140448, 10.1145/3128572.3140448]
   Chen YZ, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P477, DOI 10.1145/3460120.3484776
   Dimitrov Dimitar Iliev, 2022, ICLR(2022
   Ehlers R, 2017, LECT NOTES COMPUT SC, V10482, P269, DOI 10.1007/978-3-319-68167-2_19
   Engstrom L, 2019, PR MACH LEARN RES, V97
   Erdemir Ecenaz, 2022, NeurIPS(2022
   Goodfellow IJ, 2015, P 3 INT C LEARNING R
   Gopinath D, 2018, LECT NOTES COMPUT SC, V11138, P3, DOI 10.1007/978-3-030-01090-4_1
   Goswami Gaurav, 2018, AAAI (2018)., DOI [10.48550/arXiv.1803.00401, DOI 10.48550/ARXIV.1803.00401]
   He KM, 2016, PROC CVPR IEEE, P770, DOI 10.1109/CVPR.2016.90
   HOEFFDING W, 1963, J AM STAT ASSOC, V58, P13, DOI 10.2307/2282952
   Huang CC, 2020, NEURAL COMPUT, V32, P2249, DOI 10.1162/neco_a_01316
   Kabaha A, 2023, LECT NOTES COMPUT SC, V13881, P203, DOI 10.1007/978-3-031-24950-1_10
   Kabaha A, 2022, LECT NOTES COMPUT SC, V13790, P299, DOI 10.1007/978-3-031-22308-2_14
   Kabaha Anan, 2024, arXiv, DOI [10.48550/arXiv.2402.19322, DOI 10.48550/ARXIV.2402.19322]
   Katz G, 2019, LECT NOTES COMPUT SC, V11561, P443, DOI 10.1007/978-3-030-25540-4_26
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Krizhevsky A, 2009, CIFAR-10 dataset
   Lecun Y, 1998, P IEEE, V86, P2278, DOI 10.1109/5.726791
   Leino K, 2021, PR MACH LEARN RES, V139
   Levy N, 2023, Arxiv, DOI [arXiv:2301.02288, 10.48550/arXiv.2301.02288, DOI 10.48550/ARXIV.2301.02288]
   Li Changjiang, 2021, TDSC (2021), DOI [10.1109/TDSC.2021.3116105, DOI 10.1109/TDSC.2021.3116105]
   Liu C., 2019, ARXIV190200282
   Liu Xin, 2019, AAAI (2019, DOI [10.48550/arXiv.1806.02299, DOI 10.48550/ARXIV.1806.02299]
   Madry A, 2018, INT C LEARN REPR, DOI 10.48550/arXiv.1706.06083
   Mangal R, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: NEW IDEAS AND EMERGING RESULTS (ICSE-NIER 2019), P93, DOI 10.1109/ICSE-NIER.2019.00032
   Mohammadinejad S, 2021, LECT NOTES COMPUT SC, V12860, P117, DOI 10.1007/978-3-030-85037-1_8
   Mohapatra Jeet, 2020, CVPR (2020, DOI [10.48550/arXiv.1912.09533, DOI 10.48550/ARXIV.1912.09533]
   Qin Chongli, 2019, ICLR (2019
   Ruan WJ, 2019, PROCEEDINGS OF THE TWENTY-EIGHTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P5944
   ShiqiWang Huan Zhang, 2021, NeurIPS, P29909
   Singh G., 2019, INT C LEARN REPR
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Singh R, 2019, INT J INTELL UNMANNE, V7, P2, DOI 10.1108/IJIUS-05-2018-0013
   Sun WD, 2022, J SYST ARCHITECT, V128, DOI 10.1016/j.sysarc.2022.102582
   Szegedy Christian, 2014, ICLR (2014, DOI [10.48550/arXiv.1312.6199, DOI 10.48550/ARXIV.1312.6199]
   Tjeng V., 2019, P ICLR
   Tu C.-C., 2019, AAAI"
   Wang Shiqi, 2018, NeurIPS (2018
   Wang ZL, 2022, Arxiv, DOI [arXiv:2208.07289, DOI 10.48550/ARXIV.2208.07289, 10.48550/ARXIV.2208.07289]
   Wang Zhilu, 2022, DATE 2022, DOI [10.24963/IJCAI.2023/727, DOI 10.24963/IJCAI.2023/727]
   Wu Tong, 2019, ICLR (2019
   Xiao H, 2017, Arxiv, DOI [arXiv:1708.07747, DOI 10.48550/ARXIV.1708.07747]
   Yang Zonghan, 2022, ICLR
   Zhang Bowen, 2022, NEURIPS
   Zhang Chaoning, 2020, CVPR (2020), DOI [10.48550/arXiv.2007.06189, DOI 10.48550/ARXIV.2007.06189]
   Zhang Huan, 2022, ICML (2022).
NR 56
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 130
DI 10.1145/3649847
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600037
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Kravchuk-Kirilyuk, A
   Feng, G
   Iskander, J
   Zhang, YZ
   Amin, N
AF Kravchuk-Kirilyuk, Anastasiya
   Feng, Gary
   Iskander, Jonas
   Zhang, Yizhou
   Amin, Nada
TI PERSIMMON: Nested Family Polymorphism with Extensible Variant Types
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Persimmon; nested inheritance; family polymorphism; extensibility;
   composable extensions
ID DATATYPES
AB Many obstacles stand in the way of modular, extensible code. Some language constructs, such as pattern matching, are not easily extensible. Inherited code may not be type safe in the presence of extended types. The burden of setting up design patterns can discourage users, and parameter clutter can make the code less readable. Given these challenges, it is no wonder that extensibility often gives way to code duplication. We present our solution: Persimmon, a functional system with nested family polymorphism, extensible variant types, and extensible pattern matching. Most constructs in our language are built-in "extensibility hooks," cutting down on the parameter clutter and user burden associated with extensible code. Persimmon preserves the relationships between nested families upon inheritance, enabling extensibility at a large scale. Since nested family polymorphism can express composable extensions, Persimmon supports mixins via an encoding. We show how Persimmon can be compiled into a functional language without extensible variants with our translation to Scala. Finally, we show that our system is sound by proving the properties of progress and preservation.
C1 [Kravchuk-Kirilyuk, Anastasiya; Iskander, Jonas; Amin, Nada] Harvard Univ, Cambridge, MA USA.
   [Feng, Gary; Zhang, Yizhou] Univ Waterloo, Waterloo, ON, Canada.
C3 Harvard University; University of Waterloo
RP Kravchuk-Kirilyuk, A (corresponding author), Harvard Univ, Cambridge, MA USA.
EM akravchukkirilyuk@g.harvard.edu; gary.feng@uwaterloo.ca;
   jonasiskander@college.harvard.edu; yizhou@uwaterloo.ca;
   namin@seas.harvard.edu
OI Amin, Nada/0000-0002-0830-7248; Kravchuk-Kirilyuk,
   Anastasiya/0009-0001-0357-9690; Feng, Gary/0009-0006-0891-3041; Zhang,
   Yizhou/0000-0002-8206-4694
FU National Science Foundation [2303983]; Amazon Research Awards program
FX This material is based upon work supported by the National Science
   Foundation under Award No. 2303983, and by the Amazon Research Awards
   program. Any opinions, findings and conclusions or recommendations
   expressed in this material are those of the authors and do not
   necessarily reflect the views of the National Science Foundation.
CR Balestrieri Florent, 2018, arXiv
   Blume M, 2006, ACM SIGPLAN NOTICES, V41, P239, DOI 10.1145/1160074.1159836
   Cardelli L., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P266, DOI 10.1145/263699.263735
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P1, DOI 10.1145/1047659.1040306
   Clarke Dave, 2007, P 6 INT C ASP OR SOF, P121
   Emir B, 2007, LECT NOTES COMPUT SC, V4609, P273
   Ernst E, 2006, ACM SIGPLAN NOTICES, V41, P270, DOI 10.1145/1111320.1111062
   Ernst E., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P303
   Ernst E, 2003, LECT NOTES COMPUT SC, V2743, P303
   Fan Andong, 2023, 37 EUR C OBJ OR PROG
   Gamma E., 1995, DESIGN PATTERNS ELEM
   Garrigue Jacques, 2000, Code reuse through polymorphic variants
   Garrigue Jacques, 1998, ML WORKSH BALT, V13
   Gaster Benedict R, 1996, Technical Report
   Igarashi A, 2005, LECT NOTES COMPUT SC, V3780, P161
   Igarashi A, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P113
   Isradisaikul C, 2013, ACM SIGPLAN NOTICES, V48, P343, DOI 10.1145/2499370.2462194
   Jin E, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591286
   Jones Simon Peyton, 2009, EUR C OBJ OR PROGR
   Kiselyov Oleg, 2012, Generic and Indexed Programming, P130, DOI DOI 10.1007/978-3-642-32202-0_3
   Kravchuk-Kirilyuk Anastasiya, 2024, Zenodo, DOI 10.5281/ZENODO.10798266
   Loh A., 2006, PPDP 2006. Proceedings of the Eighth ACM SIGPLAN Symposium on Principles and Practice of Declarative Programming, P133, DOI 10.1145/1140335.1140352
   Madsen O. Lehrmann, 1993, Object Oriented Programming in the BETA Programming Language
   Millstein T, 2004, ACM T PROGR LANG SYS, V26, P836, DOI 10.1145/1018203.1018207
   Nystrom N, 2004, ACM SIGPLAN NOTICES, V39, P99, DOI 10.1145/1035292.1028986
   Nystrom N, 2006, ACM SIGPLAN NOTICES, V41, P21, DOI 10.1145/1167515.1167476
   Odersky M, 2005, ACM SIGPLAN NOTICES, V40, P41, DOI 10.1145/1103845.1094815
   Odersky Martin, 2005, Independently Extensible Solutions to the Expression Problem
   Oliveira BCDS, 2012, LECT NOTES COMPUT SC, V7313, P2, DOI 10.1007/978-3-642-31057-7_2
   Syme D, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P29
   Thorup KK, 1997, LECT NOTES COMPUT SC, V1241, P444
   Tobin-Hochstadt S, 2011, Arxiv, DOI arXiv:1106.2578
   Wadler Philip, 1998, The expression problem. Discussion on Java Genericity mailing list
   Zenger M, 2001, ACM SIGPLAN NOTICES, V36, P241, DOI 10.1145/507669.507665
   Zhang WX, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3460228
   Zhang WX, 2020, SCI COMPUT PROGRAM, V193, DOI 10.1016/j.scico.2020.102449
   Zhang YZ, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133894
NR 38
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 119
DI 10.1145/3649836
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600026
OA gold
DA 2024-08-05
ER

PT J
AU Michel, J
   Mu, K
   Yang, XD
   Bangaru, SP
   Collins, ER
   Bernstein, G
   Ragan-Kelley, J
   Carbin, M
   Li, TM
AF Michel, Jesse
   Mu, Kevin
   Yang, Xuanda
   Bangaru, Sai Praveen
   Collins, Elias Rojas
   Bernstein, Gilbert
   Ragan-Kelley, Jonathan
   Carbin, Michael
   Li, Tzu-Mao
TI Distributions for Compositionally Differentiating Parametric
   Discontinuities
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Differentiable Programming; Denotational Semantics; Differentiable
   Rendering; Distribution Theory; Probabilistic Programming
AB Computations in physical simulation, computer graphics, and probabilistic inference often require the differentiation of discontinuous processes due to contact, occlusion, and changes at a point in time. Popular differentiable programming languages, such as PyTorch and JAX, ignore discontinuities during differentiation. This is incorrect for parametric discontinuities-conditionals containing at least one real-valued parameter and at least one variable of integration. We introduce Potto, the first differentiable first-order programming language to soundly differentiate parametric discontinuities. We present a denotational semantics for programs and program derivatives and show the two accord. We describe the implementation of Potto, which enables separate compilation of programs. Our prototype implementation overcomes previous compile-time bottlenecks achieving an 88.1x and 441.2x speed up in compile time and a 2.5x and 7.9x speed up in runtime, respectively, on two increasingly large image stylization benchmarks. We showcase Potto by implementing a prototype differentiable renderer with separately compiled shaders.
C1 [Michel, Jesse; Bangaru, Sai Praveen; Collins, Elias Rojas; Ragan-Kelley, Jonathan; Carbin, Michael] MIT, Cambridge, MA 02139 USA.
   [Mu, Kevin] Univ Washington, Seattle, WA USA.
   [Yang, Xuanda; Li, Tzu-Mao] Univ Calif San Diego, San Diego, CA USA.
   [Bernstein, Gilbert] Univ Washington, Cambridge, MA USA.
C3 Massachusetts Institute of Technology (MIT); University of Washington;
   University of Washington Seattle; University of California System;
   University of California San Diego
RP Michel, J (corresponding author), MIT, Cambridge, MA 02139 USA.
EM jmmichel@csail.mit.edu; kmu0@cs.washington.edu; xuanday@ucsd.edu;
   sbangaru@mit.edu; erojasc@mit.edu; gilbo@cs.washington.edu;
   jrk@csail.mit.edu; mcarbin@csail.mit.edu; tzli@ucsd.edu
OI Bangaru, Sai Praveen/0000-0001-6302-9327; Ragan-Kelley,
   Jonathan/0000-0001-6243-9543
FU National Science Foundation [CCF-1751011, 2238839]; Sloan Foundation;
   SRC JUMP 2.0 (CoCoSys)
FX This work was supported in-part by the National Science Foundation
   (CCF-1751011, 2238839), the Sloan Foundation, and SRC JUMP 2.0
   (CoCoSys).
CR Abadi Martin, 2019, Principles of Programming Languages
   Anderson Luke, 2017, Aether: An Embedded Domain Speci~c Sampling Language for Monte Carlo Rendering
   [Anonymous], 2015, STAN MODELING LANGUA
   [Anonymous], 2012, Introduction to Smooth Manifolds, DOI 10.1007/978-1-4419-9982-5
   Bangaru SP, 2021, ACM T GRAPHIC, V40, DOI 10.1145/3450626.3459775
   Bangaru Sai Praveen, 2020, Unbiased warped-area sampling for di~erentiable rendering
   Bingham E, 2019, J MACH LEARN RES, V20
   Bradbury J., 2018, JAX: composable transformations of Python+ NumPy programs
   Cardelli Luca, 1997, Principles of Programming Languages
   Chaudhuri S, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P279, DOI 10.1145/1806596.1806629
   Conrad Brian, 2006, Math 396. Stokes' theorem with corners
   Cusumano-Towner MF, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P221, DOI 10.1145/3314221.3314642
   Dalstein B, 2014, ACM T GRAPHIC, V33, DOI 10.1145/2601097.2601169
   de Amorim Pedro H. Azevedo, 2022, arXiv
   de La Gorce M, 2011, IEEE T PATTERN ANAL, V33, P1793, DOI 10.1109/TPAMI.2011.33
   del Toro Streb Erik, 2009, Di~eomorphism of a square-Wikipedia
   Duistermaat J. J., 2004, Multidimensional Real Analysis II, V86
   Elliott C, 2018, PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES, DOI 10.1145/3236765
   Gehr Timon, 2020, Programming Language Design and Implementation
   Hu Y., 2020, INT C LEARN REPR ICL
   Inala Jeevana Priya, 2018, arXiv
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Laine Samuli, 2020, Modular primitives for high-performance di~erentiable rendering
   Lake Adam, 2000, INT S NONPH AN REND
   Lee Wonyeol, 2018, Neural Information Processing Systems
   Lee Wonyeol, 2020, Neural Information Processing Systems
   Lew Alexander K., 2023, ADEV: Sound Automatic Di~erentiation of Expected Values of Probabilistic Programs
   Lew Alexander K, 2019, Trace types and denotational semantics for sound programmable inference in probabilistic languages
   Li Tzu-Mao, 2018, Di~erentiable Monte Carlo Ray Tracing through Edge Sampling
   Li Tzu-Mao, 2020, Di~erentiable Vector Graphics Rasterization for Editing and Learning
   Liu SC, 2019, IEEE I CONF COMP VIS, P7707, DOI 10.1109/ICCV.2019.00780
   Loper MM, 2014, LECT NOTES COMPUT SC, V8695, P154, DOI 10.1007/978-3-319-10584-0_11
   Lutz C, 1986, Janus: a time-reversible language
   Matsuda K, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3409000
   Mazza Damiano, 2021, Principles of Programming Languages
   Paszke A, 2019, ADV NEUR IN, V32
   Pearlmutter BA, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330018
   Perlin K., 1985, Computer Graphics, V19, P287, DOI 10.1145/325165.325247
   Rudin W., 1953, Principles of Mathematical Analysis
   Saheb-Djahromi N., 1978, Mathematical Foundations of Computer Science 1978
   SCHWARTZ L, 1954, CR HEBD ACAD SCI, V239, P847
   Schwartz L., 1966, Theorie des Distributions
   Shan Chung-chieh, 2017, Priniciples of Programming Languages
   Sherman Benjamin, 2021, Computable Semantics for Di~erentiable Programming with Higher-Order Functions and Datatypes
   Shirley Peter, 2020, Ray Tracing in One Weekend
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   Teodorescu Petre, 2013, Distribution Theory: With Applications in Engineering and Physics, DOI [10.1002/9783527653614, DOI 10.1002/9783527653614]
   Vapnik, 1998, STAT LEARNING THEORY
   WENGERT RE, 1964, COMMUN ACM, V7, P463, DOI 10.1145/355586.364791
   Woop Sven, 2013, Journal of Computer Graphics Techniques (JCGT)
   Yang Yuting, 2022, AX: Autodi~ for Discontinuous Programs-Applied to Shaders
   Yu D., 2014, INTRO COMPUTATIONAL
   Zhao Shuang, 2020, SIGGRAPH Courses
   Zheng X, 2016, TENSORFLOW LARGE SCA
   Zhou Yuan, 2019, INT C ART INT STAT
NR 55
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 126
DI 10.1145/3649843
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600033
OA gold
DA 2024-08-05
ER

PT J
AU Ackerman, N
   Freer, CE
   Kaddar, Y
   Karwowski, J
   Moss, S
   Roy, D
   Staton, S
   Yang, H
AF Ackerman, Nate
   Freer, Cameron E.
   Kaddar, Younesse
   Karwowski, Jacek
   Moss, Sean
   Roy, Daniel
   Staton, Sam
   Yang, Hongseok
TI Probabilistic Programming Interfaces for Random Graphs: Markov
   Categories, Graphons, and Nominal Sets
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probability monads; exchangeable processes; graphons; nominal sets;
   Markov categories; probabilistic programming
ID MONADS; LIMITS; SEMANTICS; MODELS
AB We study semantic models of probabilistic programming languages over graphs, and establish a connection to graphons from graph theory and combinatorics. We show that every well-behaved equational theory for our graph probabilistic programming language corresponds to a graphon, and conversely, every graphon arises in this way.
   We provide three constructions for showing that every graphon arises from an equational theory. The first is an abstract construction, using Markov categories and monoidal indeterminates. The second and third are more concrete. The second is in terms of traditional measure theoretic probability, which covers 'black-and-white' graphons. The third is in terms of probability monads on the nominal sets of Gabbay and Pitts. Specifically, we use a variation of nominal sets induced by the theory of graphs, which covers Erdos-Renyi graphons. In this way, we build new models of graph probabilistic programming from graphons.
C1 [Ackerman, Nate] Harvard Univ, Cambridge, MA 02138 USA.
   [Freer, Cameron E.] MIT, Cambridge, MA 02139 USA.
   [Kaddar, Younesse; Karwowski, Jacek; Staton, Sam] Univ Oxford, Oxford, England.
   [Moss, Sean] Univ Birmingham, Birmingham, W Midlands, England.
   [Roy, Daniel] Univ Toronto, Toronto, ON, Canada.
   [Yang, Hongseok] Korea Adv Inst Sci & Technol, Sch Comp, Daejeon, South Korea.
C3 Harvard University; Massachusetts Institute of Technology (MIT);
   University of Oxford; University of Birmingham; University of Toronto;
   Korea Advanced Institute of Science & Technology (KAIST)
RP Ackerman, N (corresponding author), Harvard Univ, Cambridge, MA 02138 USA.
EM nate@aleph0.net; freer@mit.edu; younesse.kaddar@chch.ox.ac.uk;
   jacek.karwowski@cs.ox.ac.uk; s.k.moss@bham.ac.uk;
   daniel.roy@utoronto.ca; sam.staton@cs.ox.ac.uk; hongseok00@gmail.com
RI Karwowski, Jacek/P-2738-2018
OI Karwowski, Jacek/0000-0003-2754-5003; Kaddar,
   Younesse/0000-0001-7366-9889; Karwowski, Jacek/0000-0002-8361-2912
FU Royal Society University Research Fellowship; ERC Project BLAST; AFOSR
   [FA9550-21-1-003]; CoCoSys, one of seven centers in JUMP 2.0, a
   Semiconductor Research Corporation (SRC) program - DARPA; National
   Research Foundation of Korea (NRF) grant - Korea government (MSIT)
   [RS-2023-00279680]; Engineering Research Center Program through the
   National Research Foundation of Korea (NRF) - Korean government (MSIT)
   [NRF-2018R1A5A1059921]
FX This material is based on work supported by a Royal Society University
   Research Fellowship, ERC Project BLAST and AFOSR Award No.
   FA9550-21-1-003. This work was supported in part by CoCoSys, one of
   seven centers in JUMP 2.0, a Semiconductor Research Corporation (SRC)
   program sponsored by DARPA. HY was supported by the National Research
   Foundation of Korea (NRF) grant funded by the Korea government (MSIT)
   (No. RS-2023-00279680), and also by the Engineering Research Center
   Program through the National Research Foundation of Korea (NRF) grant
   funded by the Korean government (MSIT) (No. NRF-2018R1A5A1059921).; It
   has been helpful to discuss developments in this work with many people
   over the years, and we are also grateful to our anonymous reviewers for
   helpful suggestions.
CR Ackerman N, 2017, Arxiv, DOI arXiv:1710.09336
   Ackerman N, 2016, FORUM MATH SIGMA, V4, DOI 10.1017/fms.2016.15
   Ackerman Nathanael, 2015, arXiv
   Ackerman Nathanael L., 2017, WORKSHOP PROBABILIST
   Ackerman Nathanael L., 2016, WORKSHOP PROBABILIST
   Ackerman Nathanael L., 2019, PROC 34 ACMIEEE S LO, P1
   Ackermann W, 1937, MATH ANN, V114, P305, DOI 10.1007/BF01594179
   Adamek J., 1994, London Math. Society Lecture Note Series189
   Andres-Martinez Pablo, 2022, PROC QPL 2022
   Angel O, 2014, J EUR MATH SOC, V16, P2059, DOI 10.4171/JEMS/483
   Benton Nick, 1992, Proc. CSL 1992
   Bojanczyk M, 2012, PROC ICALP 2012
   Bojanczyk M, 2014, LOG METH COMPUT SCI, V10, DOI 10.2168/LMCS-10(3:4)2014
   Bornholdt S., 2002, Handbook of Graphs and Networks
   Bubeck S, 2016, RANDOM STRUCT ALGOR, V49, P503, DOI 10.1002/rsa.20633
   Campbell T, 2023, BERNOULLI, V29, P2084, DOI 10.3150/22-BEJ1533
   Caramello O, 2014, LOG UNIVERSALIS, V8, P261, DOI 10.1007/s11787-014-0104-6
   Caramello Olivia, 2013, Advances in Mathematics, V291
   CARBONI A, 1993, J PURE APPL ALGEBRA, V84, P145, DOI 10.1016/0022-4049(93)90035-R
   Caron F, 2017, J ROY STAT SOC B, V79, P1295, DOI 10.1111/rssb.12233
   Cockett J. R. B., 1993, Mathematical Structures in Computer Science, V3, P277, DOI 10.1017/S0960129500000232
   Crane H, 2018, J SYMBOLIC LOGIC, V83, P416, DOI 10.1017/jsl.2017.61
   Cruttwell GSH, 2022, LECT NOTES COMPUT SC, V13240, P1, DOI 10.1007/978-3-030-99336-8_1
   Dahlqvist Fredrik, 2018, PROC ICTAC 2018
   Dash S., 2023, PROC POPL 2023
   de Amorim Pedro Henrique Azevedo, 2023, PROC FOSSACS 2023
   Ehrhard T, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(1:3)2019
   Ehrhard T, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158147
   Erdos P., 1959, Publicationes Mathematicae, V6, p290. 25, DOI DOI 10.5486/PMD.1959.6.3-4.12
   Fiore M P, 2005, PROC FOSSACS 2005
   Fong BD, 2019, IEEE S LOG, DOI 10.1109/lics.2019.8785665
   Freer Cameron, 2010, Journal of Machine Learning Research-Proceedings Track, P233
   Freer CE, 2012, ANN PURE APPL LOGIC, V163, P530, DOI 10.1016/j.apal.2011.06.011
   Fritz T, 2023, Arxiv, DOI arXiv:2303.14049
   Fritz T, 2020, ADV MATH, V370, DOI 10.1016/j.aim.2020.107239
   Gabbay M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P214, DOI 10.1109/LICS.1999.782617
   GAIFMAN H, 1964, ISRAEL J MATH, V2, P1, DOI 10.1007/BF02759729
   Giry Michele, 1980, Lecture Notes in Math., V915, P68
   Goodman N., 2008, UAI, V8, P220
   Goodman N. D., 2023, Probabilistic Models of Cognition
   Goubault-Larrecq J, 2021, Arxiv, DOI arXiv:2106.16190
   Hermida C, 2012, THEOR COMPUT SCI, V430, P3, DOI 10.1016/j.tcs.2012.01.001
   Heunen C, 2017, IEEE S LOG
   Hu HD, 1995, J PURE APPL ALGEBRA, V105, P277, DOI 10.1016/0022-4049(94)00153-7
   Huot M, 2019, ELECTRON P THEOR COM, P213, DOI 10.4204/EPTCS.287.12
   JACOBS B, 1994, ANN PURE APPL LOGIC, V69, P73, DOI 10.1016/0168-0072(94)90020-5
   Jacobs B, 2018, J LOG ALGEBR METHODS, V94, P200, DOI 10.1016/j.jlamp.2016.11.006
   Jacobs B, 2012, ELECTRON P THEOR COM, P143, DOI 10.4204/EPTCS.95.12
   Jacobs Bart, 2016, Introduction to Coalgebra. Towards Mathematics of States and Observations
   Janson Svante., 2013, New York J. Math. Monogr., V4
   JAY CB, 1993, THEOR COMPUT SCI, V115, P151, DOI 10.1016/0304-3975(93)90059-3
   Jia XD, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470611
   Johnstone Peter T., 2002, Sketches of an Elephant-A Topos Theory Compendium
   Jung P., 2021, Annales Henri Lebesgue, V4
   Kaddar Younesse, 2023, PROC MFPS 2023
   Kallenberg Olav, 2010, Foundations of Modern Probability. Probability and its Applications, V2
   Kammar O, 2014, Ph. D. Dissertation
   Kammar O, 2018, ELECTRON NOTES THEOR, V341, P239, DOI 10.1016/j.entcs.2018.11.012
   Kechris AS, 2005, GEOM FUNCT ANAL, V15, P106, DOI 10.1007/s00039-005-0503-1
   Kiselyov Oleg, 2010, PROC 2010 ACM SIGPLA
   Klin Bartek, 2016, PROC FSTTCS 2016
   KOCK A, 1970, ARCH MATH, V21, P1, DOI 10.1007/BF01220868
   Kock A, 2012, THEOR APPL CATEG, V26, P97
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Lindner H, 1979, Arch. Math., V1979
   LOVASZ L., 2012, Large Networks and Graph Limits, V60, DOI 10.1090/coll/060
   Lovász L, 2006, J COMB THEORY B, V96, P933, DOI 10.1016/j.jctb.2006.05.002
   Mac Lane Saunders, 1998, GRAD TEXT M, V5, P314, DOI 10.1007/978-1-4757-4721-8
   Mansinghka V, 2014, Arxiv, DOI arXiv:1404.0099
   Marker D., 2002, Model Theory: an Introduction, V217
   Matache Cristina, 2022, LICS 22 37 ANN ACMIE, V57, P1
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Orbanz P, 2015, IEEE T PATTERN ANAL, V37, P437, DOI 10.1109/TPAMI.2014.2334607
   Pavlovic D., 1997, Mathematical Structures in Computer Science, V7, P619, DOI 10.1017/S0960129597002296
   Penrose M., 2003, Random Geometric Graphs, V5
   Pitts AM, 2013, CAM T THEOR, V57, P1, DOI 10.1017/CBO9781139084673
   Pitts Andrew M, 2001, Handbook of Logic in Computer Science, V5
   Plotkin G, 2002, LECT NOTES COMPUT SC, V2303, P342
   Power A J, 2006, PROC MFPS 2006
   Power J, 2006, THEOR COMPUT SCI, V364, P254, DOI 10.1016/j.tcs.2006.08.006
   Rado R., 1964, Acta Arith., V9, P331
   Roy Daniel, 2008, WORKSHOP NONPARAMETR
   Shiebler Dan, 2021, Compositionality, V3
   Staton S, 2017, LECT NOTES COMPUT SC, V10201, P855, DOI 10.1007/978-3-662-54434-1_32
   Staton Sam, 2017, WORKSHOP PROBABILIST
   Staton Sam, 2018, PROC ICALP 2018
   Stein Dario, 2021, Structural Foundations for Probabilistic Programming Languages
   STREET R, 1978, J ALGEBRA, V50, P350, DOI 10.1016/0021-8693(78)90160-6
   Tao Terence, 2013, Ultraproducts as a bridge between discrete and continuous analysis
   Vákár M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290349
   van de Meent Jan-Willem, 2018, arXiv, DOI DOI 10.48550/ARXIV.1809.10756
   Veitch V, 2019, ANN STAT, V47, P3274, DOI 10.1214/18-AOS1778
   WALTERS RFC, 1989, B AUST MATH SOC, V40, P79, DOI 10.1017/S0004972700003506
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
   Wu J, 2013, Master's thesis
NR 95
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 61
DI 10.1145/3632903
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400062
OA Green Published, Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Moine, A
   Westrick, S
   Balzer, S
AF Moine, Alexandre
   Westrick, Sam
   Balzer, Stephanie
TI DisLog: A Separation Logic for Disentanglement
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE disentanglement; parallelism; separation logic
ID GENERIC TYPE SYSTEM; CONCURRENCY; RACES
AB Disentanglement is a run-time property of parallel programs that facilitates task-local reasoning about the memory footprint of parallel tasks. In particular, it ensures that a task does not access any memory locations allocated by another concurrently executing task. Disentanglement can be exploited, for example, to implement a high-performance parallel memory manager, such as in the MPL (MaPLe) compiler for Parallel ML. Prior research on disentanglement has focused on the design of optimizations, either trusting the programmer to provide a disentangled program or relying on runtime instrumentation for detecting and managing entanglement. This paper provides the first static approach to verify that a program is disentangled: it contributes DisLog, a concurrent separation logic for disentanglement. DisLog enriches concurrent separation logic with the notions necessary for reasoning about the fork-join structure of parallel programs, allowing the verification that memory accesses are effectively disentangled. A large class of programs, including race-free programs, exhibit memory access patterns that are disentangled "by construction". To reason about these patterns, the paper distills from DisLog an almost standard concurrent separation logic, called DisLog+. In this high-level logic, no specific reasoning about memory accesses is needed: functional correctness proofs entail disentanglement. The paper illustrates the use of DisLog and DisLog+ on a range of case studies, including two different implementations of parallel deduplication via concurrent hashing. All our results are mechanized in the Coq proof assistant using Iris.
C1 [Moine, Alexandre] INRIA, Paris, France.
   [Westrick, Sam; Balzer, Stephanie] Carnegie Mellon Univ, Pittsburgh, PA USA.
C3 Inria; Carnegie Mellon University
RP Moine, A (corresponding author), INRIA, Paris, France.
EM alexandre.moine@inria.fr; swestric@cs.cmu.edu; balzers@cs.cmu.edu
OI Westrick, Sam/0000-0003-2848-9808; Moine, Alexandre/0000-0002-2169-1977
FU NSF [CCF-1901381, CCF-2115104, CCF-2119352, CCF-2107241]
FX We would like to thank Clement Allain and Arthur Chargueraud for
   insightful discussions, Ike Mulder for his help with Diaframe, and the
   anonymous reviewers for their helpful feedback. This research was
   supported by NSF grants CCF-1901381, CCF-2115104, CCF-2119352, and
   CCF-2107241, and also by a gift from Intel.
CR Acar UA, 2016, ACM SIGPLAN NOTICES, V51, P18, DOI 10.1145/3022670.2951946
   Adve S, 2010, COMMUN ACM, V53, P84, DOI 10.1145/1839676.1839697
   [Anonymous], 1992, Compiling with Continuations
   Arora J, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591284
   Arora J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434299
   Balzer S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110281
   Boehm Hans-J, 2011, 3 USENIX WORKSH HOT
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Brookes S, 2007, THEOR COMPUT SCI, V375, P227, DOI 10.1016/j.tcs.2006.12.034
   Caires L, 2016, MATH STRUCT COMP SCI, V26, P367, DOI 10.1017/S0960129514000218
   Caires L, 2010, LECT NOTES COMPUT SC, V6269, P222, DOI 10.1007/978-3-642-15375-4_16
   Dang HH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371102
   Dolan S, 2018, PROCEEDINGS OF THE 39TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, PLDI 2018, P242, DOI 10.1145/3192366.3192421
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Feng M, 1999, THEOR COMPUT SYST, V32, P301, DOI 10.1007/s002240000120
   Fu M, 2010, LECT NOTES COMPUT SC, V6269, P388, DOI 10.1007/978-3-642-15375-4_27
   Gotsman A, 2007, LECT NOTES COMPUT SC, V4807, P19
   Guatto A, 2018, ACM SIGPLAN NOTICES, V53, P81, DOI 10.1145/3200691.3178494
   Herlihy Maurice, 2012, ART MULTIPROCESSOR P
   Igarashi A, 2004, THEOR COMPUT SCI, V311, P121, DOI 10.1016/S0304-3975(03)00325-6
   Igarashi A, 2001, ACM SIGPLAN NOTICES, V36, P128, DOI 10.1145/373243.360215
   Iris Development Team, 2023, iris. base_ logic. lib. gen_heap
   Jacobs J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498662
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Kaiser Jan-Oliver, 2017, EUR C OBJ OR PROGR E, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.17, 10.4230/LIPIcs.ECOOP.2017]
   Knuth D., 1998, The Art of Computer Programming, Vol. III., V2
   Krebbers R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236772
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Lindley S, 2015, LECT NOTES COMPUT SC, V9032, P560, DOI 10.1007/978-3-662-46669-8_23
   Mével G, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408978
   Moine A, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571218
   Moine Alexandre, 2023, DisLog: A Searation Logic for Disentanglement-Artifact, DOI [10.5281/zenodo.8414566, DOI 10.5281/ZENODO.8414566]
   MPL Development Team, 2022, The MaPLe (MPL) compiler v0.3.
   Mulder I, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P809, DOI 10.1145/3519939.3523432
   Nanevski A, 2014, LECT NOTES COMPUT SC, V8410, P290
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   Raghunathan R, 2016, ACM SIGPLAN NOTICES, V51, P392, DOI 10.1145/3022670.2951935
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Toninho B, 2013, LECT NOTES COMPUT SC, V7792, P350, DOI 10.1007/978-3-642-37036-6_20
   VerifyThis, 2022, Challenge 3-The World's Simplest Lock-Free Hash Set.
   Vindum SF, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P76, DOI 10.1145/3437992.3439930
   Wadler P, 2012, ACM SIGPLAN NOTICES, V47, P273, DOI 10.1145/2398856.2364568
   Westrick S, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547646
   Westrick S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371115
   Westrick Sam, 2022, Ph. D. Dissertation
NR 46
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 11
DI 10.1145/3632853
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400012
OA gold
DA 2024-08-05
ER

PT J
AU Peng, YX
   Young, J
   Liu, PY
   Wu, XD
AF Peng, Yuxiang
   Young, Jacob
   Liu, Pengyu
   Wu, Xiaodi
TI SimuQ: A Framework for Programming Quantum Hamiltonian Simulation with
   Analog Compilation
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantum simulation; analog quantum computing; pulse-level programming
ID DYNAMICS
AB Quantum Hamiltonian simulation, which simulates the evolution of quantum systems and probes quantum phenomena, is one of the most promising applications of quantum computing. Recent experimental results suggest that Hamiltonian-oriented analog quantum simulation would be advantageous over circuit-oriented digital quantum simulation in the Noisy Intermediate-Scale Quantum (NISQ) machine era. However, programming analog quantum simulators is much more challenging due to the lack of a unified interface between hardware and software. In this paper, we design and implement SimuQ, the first framework for quantum Hamiltonian simulation that supports Hamiltonian programming and pulse-level compilation to heterogeneous analog quantum simulators. Specifically, in SimuQ, front-end users specify the target quantum system with Hamiltonian Modeling Language, and the Hamiltonian-level programmability of analog quantum simulators is specified through a new abstraction called the abstract analog instruction set (AAIS) and programmed in AAIS Specification Language by hardware providers. Through a solver-based compilation, SimuQ generates executable pulse schedules for real devices to simulate the evolution of desired quantum systems, which is demonstrated on superconducting (IBM), neutral-atom (QuEra), and trapped-ion (IonQ) quantum devices. Moreover, we demonstrate the advantages of exposing the Hamiltonian-level programmability of devices with native operations or interaction-based gates and establish a small benchmark of quantum simulation to evaluate SimuQ's compiler with the above analog quantum simulators.
C1 [Peng, Yuxiang; Young, Jacob; Wu, Xiaodi] Univ Maryland, College Pk, MD 20742 USA.
   [Liu, Pengyu] Carnegie Mellon Univ, Pittsburgh, PA USA.
C3 University System of Maryland; University of Maryland College Park;
   Carnegie Mellon University
RP Peng, YX (corresponding author), Univ Maryland, College Pk, MD 20742 USA.
EM ypeng15@umd.edu; jyoung25@umd.edu; pengyul@andrew.cmu.edu;
   xwu@cs.umd.edu
RI Peng, YuXiang/ADP-1617-2022
OI Liu, Pengyu/0000-0003-1302-2391
FU U.S. Department of Energy, Office of Science, Office of Advanced
   Scientific Computing Research, Quantum Testbed Pathfinder Program
   [DE-SC0019040]; Air Force Office of Scientific Research
   [FA9550-21-1-0209]; U.S. National Science Foundation [CCF-1942837];
   Sloan research fellowship; DOE Office of Science User Facility
   [DE-AC05-00OR22725]
FX We thank the anonymous reviewers for their constructive feedback and
   thank Robert Rand, Kesha Hietala, Jens Palsberg, Frederic Chong, Cedric
   Lin, Peter Komar, Cody Wang, Jean-Christophe Jaskula, Murphy Niu, Lei
   Fan, and Yufei Ding for their helpful discussions. Y.P., J.Y., and X.W.
   were partially funded by the U.S. Department of Energy, Office of
   Science, Office of Advanced Scientific Computing Research, Quantum
   Testbed Pathfinder Program under Award Number DE-SC0019040, Air Force
   Office of Scientific Research under award number FA9550-21-1-0209, the
   U.S. National Science Foundation grant CCF-1942837 (CAREER), and a Sloan
   research fellowship. This research used resources of the Oak Ridge
   Leadership Computing Facility, which is a DOE Office of Science User
   Facility supported under Contract DE-AC05-00OR22725.
CR Abhari Ali, 2012, Scaffold: Quantum programming language
   Achour S, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P149, DOI 10.1145/3373376.3378449
   Achour S, 2016, ACM SIGPLAN NOTICES, V51, P177, DOI [10.1145/2980983.2908116, 10.1145/2908080.2908116]
   Aleksandrowicz Gadi, 2019, Zenodo, DOI 10.5281/ZENODO.2562110
   Alexander T, 2020, QUANTUM SCI TECHNOL, V5, DOI 10.1088/2058-9565/aba404
   Auerbach A., 1994, Interacting Electrons and Quantum Magnetism
   Backus J., 1978, HIST PROGRAMMING LAN, P25, DOI DOI 10.1145/800025.1198345
   Bassman L, 2022, ACM T QUANTUM COMPUT, V3, DOI 10.1145/3511715
   Bernien H, 2017, NATURE, V551, P579, DOI 10.1038/nature24622
   Bruzewicz CD, 2019, APPL PHYS REV, V6, DOI 10.1063/1.5088164
   Cao YD, 2019, CHEM REV, V119, P10856, DOI 10.1021/acs.chemrev.8b00803
   Chakrabarti Bikas S., 1996, Quantum Ising Phases and Transitions in Transverse Ising Models
   Childs AM, 2021, PHYS REV X, V11, DOI 10.1103/PhysRevX.11.011020
   Childs AM, 2018, P NATL ACAD SCI USA, V115, P9456, DOI 10.1073/pnas.1801723115
   Childs Andrew M., 2017, Lecture notes at University of Maryland
   Clinton L, 2021, NAT COMMUN, V12, DOI 10.1038/s41467-021-25196-0
   Cross A., 2018, APS MARCH M, V2018, pL58
   Cross A, 2022, ACM T QUANTUM COMPUT, V3, DOI 10.1145/3505636
   Debnath S, 2016, NATURE, V536, P63, DOI 10.1038/nature18648
   Earnest N, 2021, PHYS REV RES, V3, DOI 10.1103/PhysRevResearch.3.043088
   Ebadi S, 2021, NATURE, V595, P227, DOI 10.1038/s41586-021-03582-4
   Farhi E, 2014, Arxiv, DOI arXiv:1411.4028
   FEYNMAN RP, 1982, INT J THEOR PHYS, V21, P467, DOI 10.1007/BF02650179
   Foulkes WMC, 2001, REV MOD PHYS, V73, P33, DOI 10.1103/RevModPhys.73.33
   Gorshkov AV, 2010, NAT PHYS, V6, P289, DOI 10.1038/NPHYS1535
   Gottesman D, 2010, PROC SYM AP, V68, P13
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Greenaway S, 2024, Arxiv, DOI [arXiv:2211.16439, 10.48550/arXiv.2211.16439, DOI 10.48550/ARXIV.2211.16439]
   Hagberg A. A., 2008, EXPLORING NETWORK ST, P11, DOI DOI 10.1016/J.JELECTROCARD.2010.09.003
   Hietala K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434318
   Hofstetter W, 2018, J PHYS B-AT MOL OPT, V51, DOI 10.1088/1361-6455/aaa31b
   Johansson JR, 2012, COMPUT PHYS COMMUN, V183, P1760, DOI 10.1016/j.cpc.2012.02.021
   Kitaev AY, 1997, RUSS MATH SURV+, V52, P1191, DOI 10.1070/RM1997v052n06ABEH002155
   Kloeffel C, 2013, ANNU REV CONDEN MA P, V4, P51, DOI 10.1146/annurev-conmatphys-030212-184248
   Labuhn H, 2016, NATURE, V534, P667, DOI 10.1038/nature18274
   Lauvergnat D, 2007, J CHEM PHYS, V126, DOI 10.1063/1.2735315
   Leng JQ, 2023, Arxiv, DOI [arXiv:2303.01471, 10.48550/arXiv.2303.01471]
   Li GS, 2022, ASPLOS '22: PROCEEDINGS OF THE 27TH ACM INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P554, DOI 10.1145/3503222.3507715
   Lloyd S, 1996, SCIENCE, V273, P1073, DOI 10.1126/science.273.5278.1073
   Low GH, 2017, PHYS REV LETT, V118, DOI 10.1103/PhysRevLett.118.010501
   Childs AM, 2012, Arxiv, DOI [arXiv:1202.5822, DOI 10.48550/ARXIV.1202.5822]
   Malekakhlagh M, 2020, PHYS REV A, V102, DOI 10.1103/PhysRevA.102.042605
   McClean JR, 2020, QUANTUM SCI TECHNOL, V5, DOI 10.1088/2058-9565/ab8ebc
   Mckay DC, 2017, PHYS REV A, V96, DOI 10.1103/PhysRevA.96.022330
   Motzoi F, 2009, PHYS REV LETT, V103, DOI 10.1103/PhysRevLett.103.110501
   Murali P, 2020, TWENTY-FIFTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS (ASPLOS XXV), P1001, DOI 10.1145/3373376.3378477
   Nachman B, 2021, PHYS REV LETT, V126, DOI 10.1103/PhysRevLett.126.062001
   Nielsen M.A., 2010, Quantum Computation and Quantum Information: 10th Anniversary Edition, DOI DOI 10.1017/CBO9780511976667
   Nygaard Kristen, 1978, The Development of the SIMULA Languages, P439, DOI [10.1145/800025.1198392, DOI 10.1145/800025.1198392]
   O'Brien JL, 2009, NAT PHOTONICS, V3, P687, DOI 10.1038/nphoton.2009.229
   Paykin J, 2017, ACM SIGPLAN NOTICES, V52, P846, DOI 10.1145/3093333.3009894
   Peng YX, 2023, Arxiv, DOI arXiv:2303.02775
   Peng Yuxiang, 2023, Artifact for SimuQ: a Framework for Programming Quantum Hamiltonian Simulation with Analog Compilation, DOI [10.5281/zenodo.8423710, DOI 10.5281/ZENODO.8423710]
   Powers C, 2021, SOFTWAREX, V14, DOI 10.1016/j.softx.2021.100696
   Preskill J, 2018, QUANTUM-AUSTRIA, V2, DOI 10.22331/q-2018-08-06-79
   QuEra, 2022, Bloqade: a Julia package for quantum computation and quantum dynamics based on neutral-atom architectures
   Saffman M, 2016, J PHYS B-AT MOL OPT, V49, DOI 10.1088/0953-4075/49/20/202001
   Schmitz AT, 2023, Arxiv, DOI [arXiv:2103.08602, 10.48550/arXiv.2103.08602, DOI 10.48550/ARXIV.2103.08602]
   Schollwöck U, 2005, REV MOD PHYS, V77, P259, DOI 10.1103/RevModPhys.77.259
   Schollwöck U, 2011, ANN PHYS-NEW YORK, V326, P96, DOI 10.1016/j.aop.2010.09.012
   Semeghini G, 2021, SCIENCE, V374, P1242, DOI 10.1126/science.abi8794
   Shi YN, 2020, P IEEE, V108, P1353, DOI 10.1109/JPROC.2020.2994765
   Sicun Gao, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P208, DOI 10.1007/978-3-642-38574-2_14
   Silvério H, 2022, QUANTUM-AUSTRIA, V6, P1, DOI 10.22331/q-2022-01-24-629
   Sorensen A, 2000, PHYS REV A, V62, DOI 10.1103/PhysRevA.62.022311
   Stenger JPT, 2021, PHYS REV RES, V3, DOI 10.1103/PhysRevResearch.3.033171
   Tan BC, 2020, ICCAD-IEEE ACM INT, DOI 10.1145/3400302.3415620
   Tannu SS, 2019, MICRO'52: THE 52ND ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE, P279, DOI 10.1145/3352460.3358265
   van den Berg E, 2020, QUANTUM-AUSTRIA, V4, DOI 10.22331/q-2020-09-12-322
   Virtanen P, 2020, NAT METHODS, V17, P261, DOI 10.1038/s41592-019-0686-2
   Wendin G, 2017, REP PROG PHYS, V80, DOI 10.1088/1361-6633/aa7e1a
   Yang B, 2020, NATURE, V587, P392, DOI 10.1038/s41586-020-2910-8
   Zohar E, 2016, REP PROG PHYS, V79, DOI 10.1088/0034-4885/79/1/014401
NR 73
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 81
DI 10.1145/3632923
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400082
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Klinkenberg, L
   Blumenthal, C
   Chen, MS
   Haase, D
   Katoen, JP
AF Klinkenberg, Lutz
   Blumenthal, Christian
   Chen, Mingshuai
   Haase, Darion
   Katoen, Joost-Pieter
TI Exact Bayesian Inference for Loopy Probabilistic Programs using
   Generating Functions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE probabilistic programs; quantitative verification; conditioning;
   Bayesian inference; denotational semantics; generating functions;
   non-termination
ID COMPUTATIONAL-COMPLEXITY; SYMBOLIC COMPUTATION; INVARIANT GENERATION;
   GINAC
AB We present an exact Bayesian inference method for inferring posterior distributions encoded by probabilistic programs featuring possibly unbounded loops. Our method is built on a denotational semantics represented by probability generating functions, which resolves semantic intricacies induced by intertwining discrete probabilistic loops with conditioning (for encoding posterior observations). We implement our method in a tool called Prodigy; it augments existing computer algebra systems with the theory of generating functions for the (semi-)automatic inference and quantitative verification of conditioned probabilistic programs. Experimental results show that Prodigy can handle various infinite-state loopy programs and exhibits comparable performance to state-of-the-art exact inference tools over loop-free benchmarks.
C1 [Klinkenberg, Lutz; Blumenthal, Christian; Haase, Darion; Katoen, Joost-Pieter] Rhein Westfal TH Aachen, Aachen, Germany.
   [Chen, Mingshuai] Zhejiang Univ, Hangzhou, Peoples R China.
C3 RWTH Aachen University; Zhejiang University
RP Klinkenberg, L (corresponding author), Rhein Westfal TH Aachen, Aachen, Germany.
EM lutz.klinkenberg@cs.rwth-aachen.de; christian.blumenthal@rwth-aachen.de;
   m.chen@zju.edu.cn; darion.haase@cs.rwth-aachen.de;
   katoen@cs.rwth-aachen.de
RI Haase, Darion/KRQ-4638-2024; Katoen, Joost-Pieter/O-3307-2018
OI Haase, Darion/0000-0001-5664-6773; Chen, Mingshuai/0000-0001-9663-7441;
   Katoen, Joost-Pieter/0000-0002-6143-1926; Klinkenberg,
   Lutz/0000-0002-3812-0572
FU ERC AdG Grant [787914]; DFG [RTG 2236 UnRAVeL]; ZJNSF Major Program
   [LD24F020013]; ZJU Education Foundation's Qizhen Talent program
FX Lutz Klinkenberg and Joost-Pieter Katoen are supported by ERC AdG Grant
   787914; Darion Haase is supported by the DFG RTG 2236 UnRAVeL; Mingshuai
   Chen is supported by the ZJNSF Major Program under grant No. LD24F020013
   and by the ZJU Education Foundation's Qizhen Talent program. The authors
   would like to thank the anonymous reviewers for their constructive
   feedback on this article and Leo Mommers for his assistance in producing
   the benchmark results and his work on part of the implementation.
CR Ackerman NL, 2019, J ACM, V66, DOI 10.1145/3321699
   Andrei S, 1998, ACTA INFORM, V35, P167, DOI 10.1007/s002360050117
   [Anonymous], 1969, Machine intelligence
   [Anonymous], 1995, BUGS: Bayesian Inference Using Gibbs Sampling
   Baier C, 2017, LECT NOTES COMPUT SC, V10426, P160, DOI 10.1007/978-3-319-63387-9_8
   Bao JL, 2022, LECT NOTES COMPUT SC, V13371, P33, DOI 10.1007/978-3-031-13185-1_3
   Barthe G, 2016, LECT NOTES COMPUT SC, V9779, P43, DOI 10.1007/978-3-319-41528-4_3
   Barthe Gilles, 2020, Foundations of Probabilistic Programming, DOI DOI 10.1017/9781108770750
   Bartocci Ezio, 2020, Tools and Algorithms for the Construction and Analysis of Systems. 26th International Conference, TACAS 2020. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12078), P492, DOI 10.1007/978-3-030-45190-5_28
   Bartocci E, 2020, LECT NOTES COMPUT SC, V12545, P221, DOI 10.1007/978-3-030-64276-1_12
   Bartocci E, 2019, LECT NOTES COMPUT SC, V11781, P255, DOI 10.1007/978-3-030-31784-3_15
   Batz K, 2021, LECT NOTES COMPUT SC, V12760, P524, DOI 10.1007/978-3-030-81688-9_25
   Batz K, 2020, LECT NOTES COMPUT SC, V12225, P512, DOI 10.1007/978-3-030-53291-8_27
   Batz Kevin, 2023, TACAS, DOI DOI 10.1007/978-3-031-30820-8_25
   Bauer C, 2002, J SYMB COMPUT, V33, P1, DOI 10.1006/jsco.2001.0494
   Bhat S, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(2:16)2017
   Bhat S, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P545
   Bichsel Benjamin, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P145, DOI 10.1007/978-3-319-89884-1_6
   Bournez O, 2005, LECT NOTES COMPUT SC, V3467, P323
   Carbin M, 2016, COMMUN ACM, V59, P83, DOI 10.1145/2958738
   Ceska Milan, 2019, From Reactive Systems to Cyber-Physical Systems. Essays Dedicated to Scott A. Smolka on the Occasion of His 65th Birthday. Lecture Notes in Computer Science (LNCS 11500), P107, DOI 10.1007/978-3-030-31514-6_7
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chakarov A, 2014, LECT NOTES COMPUT SC, V8723, P85, DOI 10.1007/978-3-319-10936-7_6
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chatterjee K, 2016, LECT NOTES COMPUT SC, V9779, P3, DOI 10.1007/978-3-319-41528-4_1
   Chatterjee Krishnendu, 2020, TERMINATION ANAL PRO, P221, DOI [10.1017/9781108770750.008, DOI 10.1017/9781108770750.008]
   Chen MS, 2022, Arxiv, DOI [arXiv:2205.01449, 10.48550/ARXIV.2205.01449, DOI 10.48550/ARXIV.2205.01449]
   Chen MS, 2022, LECT NOTES COMPUT SC, V13371, P79, DOI 10.1007/978-3-031-13185-1_5
   Chen YF, 2015, LECT NOTES COMPUT SC, V9206, P658, DOI 10.1007/978-3-319-21690-4_44
   Chiang D, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586050
   COOPER GF, 1990, ARTIF INTELL, V42, P393, DOI 10.1016/0004-3702(90)90060-D
   Dahlqvist Fredrik, 2020, Foundations of Probabilistic Programming, P1, DOI [10.1017/9781108770750.002, DOI 10.1017/9781108770750.002]
   DArgenio PR, 2001, LNCS, V2165, P39, DOI DOI 10.1007/3-540-44804-7
   Dubhashi DP, 2009, CONCENTRATION OF MEASURE FOR THE ANALYSIS OF RANDOMIZED ALGORITHMS, P1, DOI 10.1017/CBO9780511581274
   Feng SH, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586051
   Feng YJ, 2017, LECT NOTES COMPUT SC, V10482, P400, DOI 10.1007/978-3-319-68167-2_26
   Flajolet P, 2009, ANALYTIC COMBINATORICS, P1, DOI 10.1017/CBO9780511801655
   Flajolet P, 2011, PROCEEDINGS OF THE TWENTY-SECOND ANNUAL ACM-SIAM SYMPOSIUM ON DISCRETE ALGORITHMS, P172
   Fremont DJ, 2023, MACH LEARN, V112, P3805, DOI 10.1007/s10994-021-06120-5
   Gehr T, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P883, DOI 10.1145/3385412.3386006
   Gehr T, 2016, LECT NOTES COMPUT SC, V9779, P62, DOI 10.1007/978-3-319-41528-4_4
   Gordon Andrew D., 2014, P FUT SOFTW ENG, P167, DOI [DOI 10.1145/2593882.2593900, 10.1145/2593882.2593900]
   Gram-Hansen Bradley, 2021, Extending probabilistic programming systems and applying them to real-world simulators
   Gretz Friedrich, 2013, Quantitative Evaluation of Systems. 10th International Conference, QEST 2013. Proceedings: LNCS 8054, P193, DOI 10.1007/978-3-642-40196-1_17
   Hark M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371105
   Hartmanns A, 2020, LECT NOTES COMPUT SC, V12225, P488, DOI 10.1007/978-3-030-53291-8_26
   Henri Johan, 2009, Ph. D. Dissertation
   Holtzen S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428208
   Huang ZX, 2021, LECT NOTES COMPUT SC, V12971, P229, DOI 10.1007/978-3-030-88885-5_16
   Jacobs J, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434339
   Jansen N, 2016, LECT NOTES COMPUT SC, V9938, P68, DOI 10.1007/978-3-319-46520-3_5
   Johnson NL, 2005, WILEY SER PROBAB ST, P1, DOI 10.1002/0471715816
   Kaminski BL, 2019, ACTA INFORM, V56, P255, DOI 10.1007/s00236-018-0321-1
   Kaminski BL, 2018, J ACM, V65, DOI 10.1145/3208102
   Kaminski Benjamin Lucien, 2019, Ph. D. Dissertation, DOI [10.18154/RWTH-2019-01829, DOI 10.18154/RWTH-2019-01829]
   Katoen JP, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P31, DOI 10.1145/2933575.2934574
   Katoen JP, 2010, LECT NOTES COMPUT SC, V6337, P390, DOI 10.1007/978-3-642-15769-1_24
   Klinkenberg L., 2020, LOPSTR, V12561, P231, DOI DOI 10.1007/978-3-030-68446-4_12
   Klinkenberg Lutz, 2024, Zenodo, DOI 10.5281/ZENODO.10782412
   Klinkenberg L, 2023, Arxiv, DOI [arXiv:2307.07314, 10.48550/ARXIV.2307.07314, DOI 10.48550/ARXIV.2307.07314]
   Klinkenberg L, 2023, Arxiv, DOI [arXiv:2302.00513, 10.48550/ARXIV.2302.00513, DOI 10.48550/ARXIV.2302.00513]
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Littman ML, 1998, J ARTIF INTELL RES, V9, P1
   McIver Annabelle, 2005, MG COMP SCI
   METROPOLIS N, 1949, J AM STAT ASSOC, V44, P335, DOI 10.2307/2280232
   Meurer A, 2017, PEERJ COMPUT SCI, DOI 10.7717/peerj-cs.103
   Milch B, 2005, 19TH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI-05), P1352
   Minka T., 2018, INFERNET 03
   Mitzenmacher M., 2005, Probability and computing: randomized algorithm and probabilistic analysis, DOI DOI 10.1017/CBO9780511813603
   Moosbrugger M, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3563341
   Narayanan Praveen, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P62, DOI 10.1007/978-3-319-29604-3_5
   Nori AV, 2014, AAAI CONF ARTIF INTE, P2476
   Olmedo F, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3156018
   Ouaknine J, 2014, LECT NOTES COMPUT SC, V8573, P318
   Petkovsek Marko, 1996, A = B. AK Peters
   Quatmann T, 2018, LECT NOTES COMPUT SC, V10981, P643, DOI 10.1007/978-3-319-96145-3_37
   Roth D, 1996, ARTIF INTELL, V82, P273, DOI 10.1016/0004-3702(94)00092-1
   Saheb-Djahromi N., 1978, Mathematical Foundations of Computer Science 1978, P442
   Sheldon Daniel, 2018, ICML PMLR, V80, P4622
   Stan Development Team, 2022, Stan Modeling Language Users Guide and Reference Manual, Version 2.30
   Stein D, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470552
   Stuhlmuller A, 2012, Arxiv, DOI [arXiv:1206.3555, 10.48550/arXiv.1206.3555, DOI 10.48550/ARXIV.1206.3555]
   Takisaka T, 2021, ACM T PROGR LANG SYS, V43, DOI [10.1145/3450967, 10.1145/345096]
   van de Meent Jan-Willem, 2018, arXiv, DOI DOI 10.48550/ARXIV.1809.10756
   Vollinga J, 2006, NUCL INSTRUM METH A, V559, P282, DOI 10.1016/j.nima.2005.11.155
   Wang D, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P559, DOI 10.1145/3453483.3454062
   Wang JY, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1171, DOI 10.1145/3453483.3454102
   Wilf H.S., 2005, generatingfunctionology, V3rd ed., DOI DOI 10.1201/B10576
   Winner K, 2017, PR MACH LEARN RES, V70
   Winner K, 2016, ADV NEUR IN, V29
   Wolfram Research Inc., 2023, Mathematica, Version 13.3
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
   Zaiser Fabian, 2023, NeurIPS
   Zaiser Fabian, 2023, Exact Inference for Discrete Probabilistic Programs via Generating Functions
NR 94
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 127
DI 10.1145/3649844
PG 31
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600034
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Nelson, T
   Greenman, B
   Prasad, S
   Dyer, T
   Bove, E
   Chen, QF
   Cutting, C
   Del Vecchio, T
   Levine, S
   Rudner, J
   Ryjikov, B
   Varga, A
   Wagner, A
   West, L
   Krishnamurthi, S
AF Nelson, Tim
   Greenman, Ben
   Prasad, Siddhartha
   Dyer, Tristan
   Bove, Ethan
   Chen, Qianfan
   Cutting, Charles
   Del Vecchio, Thomas
   Levine, Sidney
   Rudner, Julianne
   Ryjikov, Ben
   Varga, Alexander
   Wagner, Andrew
   West, Luke
   Krishnamurthi, Shriram
TI Forge: A Tool and Language for Teaching Formal Methods
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE lightweight formal-methods; formal-methods education; language levels
ID SECURITY; ALLOY
AB This paper presents the design of Forge, a tool for teaching formal methods gradually. Forge is based on the widely-used Alloy language and analysis tool, but contains numerous improvements based on more than a decade of experience teaching Alloy to students. Although our focus has been on the classroom, many of the ideas in Forge likely also apply to training in industry.
   Forge offers a progression of languages that improve the learning experience by only gradually increasing in expressive power. Forge supports custom visualization of its outputs, enabling the use of widely-understood domain-specific representations. Finally, Forge provides a variety of testing features to ease the transition from programming to formal modeling. We present the motivation for and design of these aspects of Forge, and then provide a substantial evaluation based on multiple years of classroom use.
C1 [Nelson, Tim; Prasad, Siddhartha; Bove, Ethan; Chen, Qianfan; Cutting, Charles; Del Vecchio, Thomas; Levine, Sidney; Rudner, Julianne; Ryjikov, Ben; Varga, Alexander; West, Luke; Krishnamurthi, Shriram] Brown Univ, Providence, RI 02912 USA.
   [Greenman, Ben] Univ Utah, Salt Lake City, UT 84112 USA.
   [Dyer, Tristan] Stashpad, Raleigh, NC USA.
   [Wagner, Andrew] Northeastern Univ, Boston, MA 02115 USA.
C3 Brown University; Utah System of Higher Education; University of Utah;
   Northeastern University
RP Nelson, T (corresponding author), Brown Univ, Providence, RI 02912 USA.
EM timothy_nelson@brown.edu; blg@cs.utah.edu; siddhartha_prasad@brown.edu;
   a.tristan.dyer@gmail.com; ethan_bove@brown.edu;
   qianfan_chen@alumni.brown.edu; charles_cutting@alumni.brown.edu;
   thomas_del_vecchio@alumni.brown.edu; sidney_levine@brown.edu;
   julianne_rudner@alumni.brown.edu; benjamin_ryjikov@alumni.brown.edu;
   alexander_varga@alumni.brown.edu; ahwagner@ccs.neu.edu;
   luke_west@alumni.brown.edu; shriram@gmail.com
OI Greenman, Ben/0000-0001-7078-9287; Prasad, Siddhartha
   Arjun/0000-0001-7936-8147
FU US NSF [SHF-2227863, SaTC-2208731, CCF-2030859]
FX We are grateful for support from the US NSF through grants SHF-2227863,
   SaTC-2208731, and CCF-2030859. Ben Greenman thanks the CRA for support
   through the CIFellows project.
CR alloytools.org, 2023, Courses using Alloy
   alloytools.org, 2023, Alloy Analyzer Downloads
   alloytools.org, 2023, Case study applications of Alloy
   alloytools.org, 2023, Translation into Alloy
   Andersen L, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428290
   [Anonymous], 1992, The Z Notation
   Beierle C, 2005, LECT NOTES COMPUT SC, V3392, P294, DOI 10.1007/11415763_20
   Beierle Christoph, 2003, DeLFI. GI, P144
   Beierle Christoph, 2004, TeachLP
   Bendersky P, 2013, ELECTRON PROC THEOR, P59, DOI 10.4204/EPTCS.139.6
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Blanchet B., 2016, Foundations and Trends in Privacy and Security, V1, P1, DOI 10.1561/3300000004
   Brady E, 2013, J FUNCT PROGRAM, V23, P552, DOI 10.1017/S095679681300018X
   Brunel Julien, 2023, Rigorous State-Based Methods: 9th International Conference, ABZ 2023, Proceedings. Lecture Notes in Computer Science (14010), P212, DOI 10.1007/978-3-031-33163-3_16
   Caleiro C, 2006, THEOR COMPUT SCI, V367, P88, DOI 10.1016/j.tcs.2006.08.041
   Chugh R, 2016, ACM SIGPLAN NOTICES, V51, P341, DOI [10.1145/2908080.2908103, 10.1145/2980983.2908103]
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   Couto R, 2018, ELECTRON P THEOR COM, P37, DOI 10.4204/EPTCS.284.4
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dennis Greg, 2006, ISSTA, P109, DOI [10.1145/1146238.1146251, DOI 10.1145/1146238.1146251]
   Denny P, 2019, 19TH KOLI CALLING CONFERENCE ON COMPUTING EDUCATION RESEARCH (KOLI CALLING 2019), DOI 10.1145/3364510.3366170
   Doghmi SF, 2007, LECT NOTES COMPUT SC, V4424, P523
   DOLEV D, 1983, IEEE T INFORM THEORY, V29, P198, DOI 10.1109/TIT.1983.1056650
   du Boulay B, 1999, INT J HUM-COMPUT ST, V51, P265, DOI 10.1006/ijhc.1981.0309
   Dyer Andrew Tristan, 2020, Ph. D. Dissertation
   Dyer Tristan, 2021, Rigorous State-Based Methods. 8th International Conference, ABZ 2021. Proceedings. Lecture Notes in Computer Science (LNCS 12709), P99, DOI 10.1007/978-3-030-77543-8_7
   Edwards J., 2004, Software Engineering Notes, V29, P189, DOI 10.1145/1041685.1029921
   Emerson AG, 2023, PROC INT SYMP SOFTW, P218, DOI 10.1109/ISSRE59848.2023.00065
   Felleisen M, 2018, COMMUN ACM, V61, P62, DOI 10.1145/3127323
   Felleisen Matthias, 2001, How to Design Programs
   Felleisen Matthias., 2015, 1st Summit on Advances in Programming Languages (SNAPL 2015), volume 32 of Leibniz International Proceedings in Informatics (LIPIcs), V32, P113, DOI DOI 10.4230/LIPICS.SNAPL.2015.113
   Findler RB, 2002, J FUNCT PROGRAM, V12, P159, DOI 10.1017/S0956796801004208
   Gilsing M, 2022, J COMPUT LANG, V73, DOI 10.1016/j.cola.2022.101158
   Greenman Ben, 2024, Zenodo, DOI 10.5281/ZENODO.10463960
   Greenman Ben, 2023, Programming, V7, DOI [10.22152/programming-journal.org/2023/7/7, DOI 10.22152/PROGRAMMING-JOURNAL.ORG/2023/7/7]
   Hempel B, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P654, DOI 10.1145/3180155.3180165
   Holt Richard C., 1974, SIGCSE, P129, DOI DOI 10.1145/800183.810456
   Holzmann Gerard J., 2003, The Spin Model Checker: Primer and Reference Manual, DOI [10.5555/2029108, DOI 10.5555/2029108]
   Homer M, 2014, LECT NOTES COMPUT SC, V8586, P131
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Jackson D, 2019, COMMUN ACM, V62, P66, DOI 10.1145/3338843
   Jackson Daniel, 1996, Lightweight Formal Methods
   Jernigan W, 2017, J VISUAL LANG COMPUT, V39, P51, DOI 10.1016/j.jvlc.2017.04.005
   Macedo N, 2022, J AUTOM REASONING, V66, P861, DOI 10.1007/s10817-022-09642-2
   Macedo N, 2021, SCI COMPUT PROGRAM, V211, DOI 10.1016/j.scico.2021.102690
   Macedo N, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P373, DOI 10.1145/2950290.2950318
   McCarthy J, 2008, LECT NOTES COMPUT SC, V5283, P533
   Montaghami Vajih, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P122, DOI 10.1007/978-3-642-30885-7_9
   Neumerkel Ulrich, 1997, LPE, P43
   Neumerkel Ulrich, 2002, WLPE, P77
   Nipkow T., 2002, Isabelle/HOL - a proof assistant for higher-order logic, P2283, DOI [10.1007/3-540-45949-9, DOI 10.1007/3-540-45949-9]
   Observable, 2023, D3: Data-Driven Documents
   Rayside Derek, 2007, Electronic Communications of the EASST, V7, DOI [10.14279/tuj.eceasst.7.94, DOI 10.14279/TUJ.ECEASST.7.94]
   Regis G, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P969, DOI 10.1145/3106237.3122826
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Saarinen Sam, 2021, Ph. D. Dissertation
   Siegel Abigail, 2021, Protocols, Strands, and Logic: Essays Dedicated to Joshua Guttman on the Occasion of his 66.66th Birthday. Lecture Notes in Computer Science. Security and Cryptology (13066), DOI 10.1007/978-3-030-91631-2_22
   Sullivan A, 2018, IEEE INT CONF SOFTW, P398, DOI 10.1109/ICST.2018.00047
   Torlak E, 2014, ACM SIGPLAN NOTICES, V49, P530, DOI [10.1145/2594291.2594340, 10.1145/2666356.2594340]
   Wang KY, 2020, PROC INT SYMP SOFTW, P391, DOI 10.1109/ISSRE5003.2020.00044
   Wang KY, 2018, IEEE INT CONF AUTOM, P577, DOI 10.1145/3238147.3238162
   Wilson A., 2003, P SIGCHI C HUM FACT, P305, DOI [DOI 10.1145/642611.642665, https://doi.org/10.1145/642611.642665]
   Wilson PT, 2018, DLS'18: PROCEEDINGS OF THE 14TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON DYNAMIC LANGUAGES, P1, DOI 10.1145/3276945.3276947
   Wrenn J, 2018, ICER'18: PROCEEDINGS OF THE 2018 ACM CONFERENCE ON INTERNATIONAL COMPUTING EDUCATION RESEARCH, P51, DOI 10.1145/3230977.3230999
   Wrenn John, 2021, Programming, V5, P9, DOI [DOI 10.22152/PROGRAMMING-JOURNAL.ORG/2021/5/9, 10.22152/programmingjournal.org/2021/5/9, DOI 10.22152/PROGRAMMINGJOURNAL.ORG/2021/5/9]
   Wrenn John Sinclair, 2022, Executable Examples: Empowering Students to Hone Their Problem Comprehension
   Zave Pamela, 2020, Discourse Forum Reply
NR 68
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 116
DI 10.1145/3649833
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600023
OA gold
DA 2024-08-05
ER

PT J
AU Altenkirch, T
   Chamoun, Y
   Kaposi, A
   Shulman, M
AF Altenkirch, Thorsten
   Chamoun, Yorgo
   Kaposi, Ambrus
   Shulman, Michael
TI Internal Parametricity, without an Interval
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE homotopy type theory; parametricity; logical relations; gluing
AB Parametricity is a property of the syntax of type theory implying, e.g., that there is only one function having the type of the polymorphic identity function. Parametricity is usually proven externally, and does not hold internally. Internalising it is difficult because once there is a term witnessing parametricity, it also has to be parametric itself and this results in the appearance of higher dimensional cubes. In previous theories with internal parametricity, either an explicit syntax for higher cubes is present or the theory is extended with a new sort for the interval. In this paper we present a type theory with internal parametricity which is a simple extension of Martin-Lof type theory: there are a few new type formers, term formers and equations. Geometry is not explicit in this syntax, but emergent: the new operations and equations only refer to objects up to dimension 3. We show that this theory is modelled by presheaves over the BCH cube category. Fibrancy conditions are not needed because we use span-based rather than relational parametricity. We define a gluing model for this theory implying that external parametricity and canonicity hold. The theory can be seen as a special case of a new kind of modal type theory, and it is the simplest setting in which the computational properties of higher observational type theory can be demonstrated.
C1 [Altenkirch, Thorsten] Univ Nottingham, Nottingham, England.
   [Chamoun, Yorgo] Ecole Polytech, Palaiseau, France.
   [Kaposi, Ambrus] Eotvos Lorand Univ, Budapest, Hungary.
   [Shulman, Michael] Univ San Diego, San Diego, CA 92110 USA.
C3 University of Nottingham; Institut Polytechnique de Paris; Ecole
   Polytechnique; Eotvos Lorand University; University of San Diego
RP Altenkirch, T (corresponding author), Univ Nottingham, Nottingham, England.
EM thorsten.altenkirch@nottingham.ac.uk; yorgo.chamoun@polytechnique.edu;
   akaposi@inf.elte.hu; shulman@sandiego.edu
OI Shulman, Michael/0000-0002-9948-6682; Thorsten,
   Altenkirch/0000-0002-6582-5025
FU Ministry of Culture and Innovation of Hungary from the National
   Research, Development and Innovation Fund [TKP2021-NVA-29]; Air Force
   Office of Scientific Research [TKP2021-NVA];  [FA9550-21-1-0009]
FX The first and third authors were supported by project no. TKP2021-NVA-29
   which has bee n implemented with the support provided by the Ministry of
   Culture and Innovation of Hungary from the National Research,
   Development and Innovation Fund, financed under the TKP2021-NVA funding
   scheme. This material is based upon work supported by the Air Force
   Office of Scientific Research under award number FA9550-21-1-0009.
CR Altenkirch T, 2016, ACM SIGPLAN NOTICES, V51, P18, DOI 10.1145/2914770.2837638
   Altenkirch Thorsten, 2016, Schloss Dagstuhl-LeibnizZentrum fur Informatik, V62, DOI [10.4230/LIPIcs.CSL.2016.21, DOI 10.4230/LIPICS.CSL.2016.21]
   Altenkirch Thorsten, 2015, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V69, DOI [10.4230/LIPICS.TYPES.2015.3, DOI 10.4230/LIPICS.TYPES.2015.3]
   Angiuli C, 2021, MATH STRUCT COMP SCI, V31, P424, DOI 10.1017/S0960129521000347
   Annenkov Danil, 2017, arXiv
   Bernardy JP, 2015, ELECTRON NOTES THEOR, V319, P67, DOI 10.1016/j.entcs.2015.12.006
   Bernardy JP, 2013, ACM SIGPLAN NOTICES, V48, P61, DOI 10.1145/2544174.2500577
   Bernardy JP, 2012, IEEE S LOG, P135, DOI 10.1109/LICS.2012.25
   Bernardy JP, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P345
   Bezem Marc, 2014, 19 INT C TYPES PROOF, V26, P107, DOI [10.4230/LIPIcs.TYPES.2013.107, DOI 10.4230/LIPICS.TYPES.2013.107]
   Bocquet Rafael, 2023, Schloss Dagstuhl-LeibnizZentrum fur Informatik, V18, DOI [10.4230/LIPIcs.FSCD.2023.18, DOI 10.4230/LIPICS.FSCD.2023.18]
   Booij Auke Bart, 2016, LIPIcs, V97, DOI [10.4230/LIPICS.TYPES.2016.7, DOI 10.4230/LIPICS.TYPES.2016.7]
   Boulier S, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P182, DOI 10.1145/3018610.3018620
   Buchholtz U, 2017, LECT NOTES COMPUT SC, V10226, P77, DOI 10.1007/978-3-319-57418-9_5
   Castellan S, 2020, Arxiv, DOI arXiv:1904.00827
   Cavallo E, 2021, LOG METH COMPUT SCI, V17, DOI 10.46298/LMCS-17(4:5)2021
   Cavallo Evan, 2021, Ph. D. Dissertation, DOI [10.1184/r1/14555691, DOI 10.1184/R1/14555691]
   Cohen Cyril, 2015, Schloss Dagstuhl-LeibnizZentrum fur Informatik, V69
   Gratzer D, 2023, Arxiv, DOI arXiv:2301.11842
   Gratzer D, 2021, LOG METH COMPUT SCI, V17, DOI 10.46298/LMCS-17(3:11)2021
   Hofmann M., 1997, Publ. Newton Inst., V14, P79, DOI [DOI 10.1017/CBO9780511526619.004, 10.1017/CBO9780511526619.004]
   Kaposi A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290315
   Kaposi Ambrus, 2019, Schloss Dagstuhl-Leibniz-Zentrum fur Informatik, V131, DOI [10.4230/LIPIcs.FSCD.2019.25, DOI 10.4230/LIPICS.FSCD.2019.25]
   Kovács A, 2020, IEEE S LOG, P648, DOI 10.1145/3373718.3394770
   Kraus Nicolai, 2017, arXiv
   Nuyts A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110276
   Nuyts A, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P779, DOI 10.1145/3209108.3209119
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Sterling Jonathan, 2022, Ph. D. Dissertation, DOI [10.1184/r1/19632681.v1, DOI 10.1184/R1/19632681.V1]
   Uemura Taichi, 2019, arXiv
   Van Muylder Antoine, 2024, P 51 ANN ACM SIGPLAN
   Vezzosi ANDREA, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000034
   Wadler Philip, 1990, Recursive types for free!
NR 33
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 78
DI 10.1145/3632920
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400079
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Briggs, I
   Lad, Y
   Panchekha, P
AF Briggs, Ian
   Lad, Yash
   Panchekha, Pavel
TI Implementation and Synthesis of Math Library Functions
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Function approximation; libm; DSL; type-directed synthesis; e-graphs
ID ACCURACY
AB Achieving speed and accuracy for math library functions like exp, sin, and log is difficult. This is because low-level implementation languages like C do not help math library developers catch mathematical errors, build implementations incrementally, or separate high-level and low-level decision making. This ultimately puts development of such functions out of reach for all but the most experienced experts. To address this, we introduce MegaLibm, a domain-specific language for implementing, testing, and tuning math library implementations. MegaLibm is safe, modular, and tunable. Implementations in MegaLibm can automatically detect mathematical mistakes like sign flips via semantic wellformedness checks, and components like range reductions can be implemented in a modular, composable way, simplifying implementations. Once the high-level algorithm is done, tuning parameters like working precisions and evaluation schemes can be adjusted through orthogonal tuning parameters to achieve the desired speed and accuracy. MegaLibm also enables math library developers to work interactively, compiling, testing, and tuning their implementations and invoking tools like Sollya and type-directed synthesis to complete components and synthesize entire implementations. MegaLibm can express 8 state-of-the-art math library implementations with comparable speed and accuracy to the original C code, and can synthesize 5 variations and 3 from-scratch implementations with minimal guidance.
C1 [Briggs, Ian; Lad, Yash; Panchekha, Pavel] Univ Utah, Salt Lake City, UT 84112 USA.
C3 Utah System of Higher Education; University of Utah
RP Briggs, I (corresponding author), Univ Utah, Salt Lake City, UT 84112 USA.
EM ibriggs@cs.utah.edu; yash.lad@utah.edu; pavpan@cs.utah.edu
OI Panchekha, Pavel/0000-0003-2621-3592
FU NSF [2119939]; U.S. Department of Energy, Office of Science, Office of
   Advanced Scientific Computing Research [10061193]
FX We also thank our anonymous reviewers for their guidance and valuable
   suggestions while preparing the final version of this paper. This work
   was supported by NSF award 2119939. This material is based upon work
   supported by the U.S. Department of Energy, Office of Science, Office of
   Advanced Scientific Computing Research, ComPort: Rigorous Testing
   Methods to Safeguard Software Porting, under Award Number 10061193.
CR Aanjaneya M, 2023, INT SYM CODE GENER, P95, DOI 10.1145/3579990.3580022
   Aanjaneya M, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P552, DOI 10.1145/3519939.3523447
   AMD, 2021, AMD MATH LIB LIBM
   [Anonymous], 1974, Floating-Point Computation
   Bard Joachim, 2019, Formal Methods - The Next 30 Years. Third World Congress, FM 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11800), P38, DOI 10.1007/978-3-030-30942-8_4
   Beebe Nelson H. F., 2017, Cambridge International Law Journal.
   Behnam Payman, 2020, Posit: A Potential Replacement for IEEE 754
   Ben Khalifa D, 2022, INT C CONTROL DECISI, P230, DOI [10.1109/CoDIT55151.2022.9804011, 10.1109/CODIT55151.2022.9804011]
   Benz F, 2012, ACM SIGPLAN NOTICES, V47, P453, DOI 10.1145/2345156.2254118
   Boehm HJ, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P562, DOI 10.1145/3385412.3386037
   Bosma W, 1997, J SYMB COMPUT, V24, P235, DOI 10.1006/jsco.1996.0125
   Briggs I, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P522, DOI 10.1145/3519939.3523452
   Chevillard S, 2010, LECT NOTES COMPUT SC, V6327, P28, DOI 10.1007/978-3-642-15582-6_5
   Chiang WF, 2017, ACM SIGPLAN NOTICES, V52, P300, DOI 10.1145/3093333.3009846
   Chiang WF, 2014, ACM SIGPLAN NOTICES, V49, P43, DOI [10.1145/2555243.2555265, 10.1145/2692916.2555265]
   Chowdhary S, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P731, DOI 10.1145/3385412.3386004
   Cody William James, 1980, Prentice-Hall series in computational mathematics
   Damouche Nasrine, 2017, Kalpa Publications in Computing, V5, P63, DOI DOI 10.29007/J2FD
   Daramy C, 2003, P SOC PHOTO-OPT INS, V5205, P458, DOI 10.1117/12.505591
   Darulova E, 2019, LECT NOTES COMPUT SC, V11562, P174, DOI 10.1007/978-3-030-25543-5_11
   Darulova E, 2018, LECT NOTES COMPUT SC, V10805, P270, DOI 10.1007/978-3-319-89960-2_15
   Das A, 2020, PROCEEDINGS OF SC20: THE INTERNATIONAL CONFERENCE FOR HIGH PERFORMANCE COMPUTING, NETWORKING, STORAGE AND ANALYSIS (SC20), DOI 10.1109/SC41405.2020.00055
   de Dinechin Florent., 2019, 26 IEEE S COMP AR AR
   DEKKER TJ, 1971, NUMER MATH, V18, P224, DOI 10.1007/BF01397083
   Driscoll T.A., 2014, Chebfun Guide
   Fousse L, 2007, ACM T MATH SOFTWARE, V33, DOI 10.1145/1236463.1236468
   Free Software Foundation, 2020, Errors in Math Functions (The GNU C Library)
   FSF, 2020, The GNU C Library
   GAVRILYU.VT, 1968, DOKL AKAD NAUK SSSR+, V183, P750
   Gulwani Sumit, 2005, FSTTCS 2004 FDN SOFT, P311
   Guo H, 2020, PROC INT CONF SOFTW, P1261, DOI 10.1145/3377811.3380359
   Guo H, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P333, DOI 10.1145/3213846.3213862
   Gustafson John L., 2017, [Supercomputing Frontiers and Innovations, Supercomputing Frontiers and Innovations], V4, P71
   Hastings Cecil, 1955, Science, V122, P602, DOI DOI 10.1126/SCIENCE.122.3170.602.AARXIV:HTTPS://WWW.SCIENCE.ORG/DOI/PDF/10.1126/SCIENCE.122.3170.602.A
   Hida Yozo, 2007, Library for double-double and quad-double arithmetic
   Higham Nicholas J., 2002, SIAM, Vsecond, DOI 10.1137/1.9780898718027
   Intel, 2020, Intel-Optimized Math Library for Numerical Computing
   Johansson F, 2017, IEEE T COMPUT, V66, P1281, DOI 10.1109/TC.2017.2690633
   Julia Math Project, 2021, JuliaMath/OpenLibm
   Kahan William, 2004, A Logarithm Too Clever by Half
   Kahan William, 1967, PROCEEDINGS, P175
   Kozen Dexter, 1977, P 9 ANN ACM S THEOR, P164, DOI DOI 10.1145/800105.803406
   Kupriianova Olga, 2014, Mathematical Software - ICMS 2014. 4th International Congress. Proceedings. LNCS: 8592, P713, DOI 10.1007/978-3-662-44199-2_106
   Lee W, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158135
   Lim JP, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498664
   Lim JP, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434310
   LLVM Developer Group, 2023, Math Functions
   Maplesoft a division of Waterloo Maple Inc, 2019, Maple
   MathWorks Inc, 2022, MATLAB VERS 9 13 0 R
   Micikevicius P, 2022, Arxiv, DOI arXiv:2209.05433
   Moshier Stephen L, 1992, Cephes mathematical library
   Muller Jean-Michel, 2016, Elementary Functions: Algorithms and Implementation, V3, DOI DOI 10.1007/978-1-4899-7983-4
   Panchekha P, 2015, ACM SIGPLAN NOTICES, V50, P1, DOI 10.1145/2737924.2737959
   Piparo D, 2014, J PHYS CONF SER, V513, DOI 10.1088/1742-6596/513/5/052027
   Rubio-González C, 2013, INT CONF HIGH PERFOR, DOI 10.1145/2503210.2503296
   Saiki B, 2021, P S COMP ARITHM, P1, DOI 10.1109/ARITH51176.2021.00013
   Sanchez-Stern A, 2018, ACM SIGPLAN NOTICES, V53, P256, DOI [10.1145/3192366.3192411, 10.1145/3296979.3192411]
   Sibidanov A, 2022, P S COMP ARITHM, P26, DOI 10.1109/ARITH54963.2022.00014
   Solovyev A, 2019, ACM T PROGR LANG SYS, V41, DOI 10.1145/3230733
   Sun Microsystems, 1993, A Freely Distributable Libm
   Taylor Brook, 1717, Methodus incrementorum directa & inversa
   Tchebychev P., 1858, QUESTIONS MINIMA QUI
   The Sage Developers, 2023, Sagemath, the Sage Mathematics Software System
   Wang S., 2019, Google Cloud Blog
   Willsey M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434304
   Wolfram Research Inc., 2023, Mathematica, Version 13.3
   Zimmermann Paul, 2021, Accuracy of Mathematical Functions in Single, Double, Extended Double and Quadruple Precision
NR 67
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 32
DI 10.1145/3632874
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400033
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Timany, A
   Gregersen, SO
   Stefanesco, L
   Hinrichsen, JK
   Gondelman, L
   Nieto, A
   Birkedal, L
AF Timany, Amin
   Gregersen, Simon Oddershede
   Stefanesco, Leo
   Hinrichsen, Jonas Kastberg
   Gondelman, Leon
   Nieto, Abel
   Birkedal, Lars
TI Trillium: Higher-Order Concurrent and Distributed Separation Logic for
   Intensional Refinement
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Distributed systems; separation logic; refinement; higher-order logic;
   concurrency; formal verification
AB Expressive state-of-the-art separation logics rely on step-indexing to model semantically complex features and to support modular reasoning about imperative higher-order concurrent and distributed programs. Step-indexing comes, however, with an inherent cost: it restricts the adequacy theorem of program logics to a fairly simple class of safety properties.
   In this paper, we explore if and how intensional refinement is a viable methodology for strengthening higher-order concurrent (and distributed) separation logic to prove non-trivial safety and liveness properties. Specifically, we introduce Trillium, a language-agnostic separation logic framework for showing intensional refinement relations between traces of a program and a model. We instantiate Trillium with a concurrent language and develop Fairis, a concurrent separation logic, that we use to show liveness properties of concurrent programs under fair scheduling assumptions through a fair liveness-preserving refinement of a model. We also instantiate Trillium with a distributed language and obtain an extension of Aneris, a distributed separation logic, which we use to show refinement relations between distributed systems and TLA(+) models.
C1 [Timany, Amin; Gregersen, Simon Oddershede; Hinrichsen, Jonas Kastberg; Gondelman, Leon; Nieto, Abel; Birkedal, Lars] Aarhus Univ, Aarhus, Denmark.
   [Stefanesco, Leo] MPI SWS, Saarbrucken, Germany.
C3 Aarhus University
RP Timany, A (corresponding author), Aarhus Univ, Aarhus, Denmark.
EM timany@cs.au.dk; gregersen@cs.au.dk; lstefane@mpi-sws.org;
   hinrichsen@cs.au.dk; gondelman@cs.au.dk; abeln@cs.au.dk;
   birkedal@cs.au.dk
RI Timany, Amin/KXS-1704-2024
OI Timany, Amin/0000-0002-2237-851X; Gregesen, Simon/0000-0001-6045-5232;
   Hinrichsen, Jonas Kastberg/0000-0001-6143-9031; Birkedal,
   Lars/0000-0003-1320-0098; Gondelman, Leon/0000-0001-8262-6397
FU Villum Investigator grant [25804]; Center for Basic Research in Program
   Verification (CPV); VILLUM Foundation; European Research Council (ERC)
   under the European Union [101003349]
FX This work was supported in part by a Villum Investigator grant (no.
   25804), Center for Basic Research in Program Verification (CPV), from
   the VILLUM Foundation. This work has received funding from the European
   Research Council (ERC) under the European Union's Horizon 2020 research
   and innovation program (grant agreement No. 101003349).
CR Birkedal Lars, 2021, Proceedings of the ACM on Programming Languages, V5, DOI 10.1145/3473586
   Chajed T, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P243, DOI 10.1145/3341301.3359632
   Chand S, 2016, LECT NOTES COMPUT SC, V9995, P119, DOI 10.1007/978-3-319-48989-6_8
   Cleavelandy R., 2001, Equivalence and preorder checking for finite-state systems, P391
   Fatourou P, 2011, BULL EUR ASSOC THEOR, P67
   Frumin D, 2021, LOG METH COMPUT SCI, V17, DOI 10.46298/LMCS-17(3:9)2021
   Frumin D, 2018, LICS'18: PROCEEDINGS OF THE 33RD ANNUAL ACM/IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P442, DOI 10.1145/3209108.3209174
   Gäher L, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498689
   Garcia-Perez Alvaro, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P912, DOI 10.1007/978-3-319-89884-1_32
   Georges AL, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527318
   Gray J. N., 1978, Operating Systems. An Advanced Course, P393
   Gregersen SO, 2023, Arxiv, DOI [arXiv:2301.10061, 10.48550/ARXIV.2301.10061]
   Gu RH, 2018, ACM SIGPLAN NOTICES, V53, P646, DOI 10.1145/3192366.3192381
   Gu RH, 2015, ACM SIGPLAN NOTICES, V50, P595, DOI [10.1145/2676726.2676975, 10.1145/2775051.2676975]
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Hawblitzel C, 2017, COMMUN ACM, V60, P83, DOI 10.1145/3068608
   Jacobs K, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527326
   Jacobs K, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434288
   Jaskelioff Mauro., 2005, Arch. Formal Proofs 2005
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2775051.2676980, 10.1145/2676726.2676980]
   Kellomaki Pertti, 2004, Technical Report
   Kragl B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P227, DOI 10.1145/3385412.3385980
   Krebbers R, 2017, ACM SIGPLAN NOTICES, V52, P205, DOI 10.1145/3093333.3009855
   Krogh-Jespersen M, 2020, LECT NOTES COMPUT SC, V12075, P336, DOI 10.1007/978-3-030-44914-8_13
   Krogh-Jespersen M, 2017, ACM SIGPLAN NOTICES, V52, P218, DOI 10.1145/3093333.3009877
   Lamport L., 2001, SIGACT News, V32, P51
   Lamport L, 1998, ACM T COMPUT SYST, V16, P133, DOI 10.1145/279227.279229
   Lamport Leslie, 1992, Lecture Notes in Computer Science, V736, P77, DOI [DOI 10.1007/3-540-57318-625, 10.1007/3-540-57318-6_25]
   Liang HJ, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158108
   Liang HJ, 2016, ACM SIGPLAN NOTICES, V51, P385, DOI 10.1145/2914770.2837635
   Maric O, 2017, LECT NOTES COMPUT SC, V10427, P217, DOI 10.1007/978-3-319-63390-9_12
   Padon O, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3140568
   Penninckx W, 2015, LECT NOTES COMPUT SC, V9032, P158, DOI 10.1007/978-3-662-46669-8_7
   Spies S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P80, DOI 10.1145/3453483.3454031
   Sprenger C, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428220
   Tassarotti J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290377
   Tassarotti J, 2017, LECT NOTES COMPUT SC, V10201, P909, DOI 10.1007/978-3-662-54434-1_34
   Timany Amin, 2023, Zenodo, DOI 10.5281/ZENODO.10100892
   Timany A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341709
   Timany A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158152
   Vogels W, 2009, COMMUN ACM, V52, P40, DOI 10.1145/1435417.1435432
NR 42
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
DI 10.1145/3632851
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400010
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Lee, E
   Zhao, YY
   Lhoták, O
   You, J
   Satheeskumar, K
   Brachthäuser, JI
AF Lee, Edward
   Zhao, Yaoyu
   Lhotak, Ondrej
   You, James
   Satheeskumar, Kavin
   Brachthauser, Jonathan Immanuel
TI Qualifying System F<sub><</sub>: Some Terms and Conditions May Apply
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE System F-<:; Type Qualifiers; Type Systems
ID REFERENCE IMMUTABILITY; INFERENCE
AB Type qualifiers offer a lightweight mechanism for enriching existing type systems to enforce additional, desirable, program invariants. They do so by offering a restricted but effective form of subtyping. While the theory of type qualifiers is well understood and present in many programming languages today, polymorphism over type qualifiers remains an area less well examined. We explore how such a polymorphic system could arise by constructing a calculus, System F-<:Q, which combines the higher-rank bounded polymorphism of System F-<: with the theory of type qualifiers. We explore how the ideas used to construct System F-<: Q can be reused in situations where type qualifiers naturally arise-in reference immutability, function colouring, and capture checking. Finally, we re-examine other qualifier systems in the literature in light of the observations presented while developing System F-<:Q.
C1 [Lee, Edward; Lhotak, Ondrej; You, James; Satheeskumar, Kavin] Univ Waterloo, Waterloo, ON, Canada.
   [Zhao, Yaoyu] Ecole Polytech Fed Lausanne, Lausanne, Switzerland.
   [Brachthauser, Jonathan Immanuel] Eberhard Karls Univ Tubingen, Tubingen, BaWu, Germany.
C3 University of Waterloo; Swiss Federal Institutes of Technology Domain;
   Ecole Polytechnique Federale de Lausanne; Eberhard Karls University of
   Tubingen
RP Lee, E (corresponding author), Univ Waterloo, Waterloo, ON, Canada.
EM e45lee@uwaterloo.ca; yaoyu.zhao@uwaterloo.ca; olhotak@uwaterloo.ca;
   j35you@uwaterloo.ca; ksatheeskumar@uwaterloo.ca;
   jonathan.brachthaeuser@uni-tuebingen.de
OI Brachthauser, Jonathan Immanuel/0000-0001-9128-0391
FU Natural Sciences and Engineering Research Council of Canada; Ontario
   Graduate Scholarship
FX We thank Brad Lushman, John Boyland, Guannan Wei, Brian Zimmerman, James
   Noble, and the anonymous OOPSLA reviewers for their helpful feedback. We
   also thank Ross Willard for his useful insights into free lattices. This
   work was partially supported by the Natural Sciences and Engineering
   Research Council of Canada and by an Ontario Graduate Scholarship.
CR Aaronson Scott, 2002, Polynomial Hierarchy Collapses: Thousands Feared Tractable
   Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   [Anonymous], 2014, The Java Language Specification, Java SE
   Aydemir B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P3, DOI 10.1145/1328438.1328443
   Bao YY, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485516
   Barendsen E., 1996, Mathematical Structures in Computer Science, V6, P579
   Boruch-Gruszecki A, 2023, ACM T PROGR LANG SYS, V45, DOI 10.1145/3618003
   Boyland J, 2006, J OBJECT TECHNOL, V5, P5, DOI 10.5381/jot.2006.5.5.a1
   Bright W, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3386323
   CARDELLI L, 1991, LECT NOTES COMPUT SC, V526, P750
   Clebsch Sylvan, 2015, Proceedings of the 5th International Workshop on Programming Based on Actors, Agents, and Decentralized Control, AGERE!'15, P1, DOI 10.1145
   DENNIS JB, 1966, COMMUN ACM, V9, P143, DOI 10.1145/365230.365252
   Dietl W, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P681, DOI 10.1145/1985793.1985889
   Dolan Stephen, 2016, Ph. D. Dissertation.
   Dort Vlastimil, 34th European Conference on Object-Oriented Programming (ECOOP 2020) (Leibniz International Proceedings in Informatics (LIPIcs),, V166, DOI [10.4230/LIPIcs.ECOOP.2020.18, DOI 10.4230/LIPICS.ECOOP.2020.18]
   Felleisen Mattias, 1987, P 14 ACM SIGACT SIGP, P314, DOI DOI 10.1145/41625.41654
   Foster J. S., 1999, SIGPLAN Notices, V34, P192, DOI 10.1145/301631.301665
   Foster J. S., 2002, SIGPLAN Notices, V37, P1, DOI 10.1145/543552.512531
   Galatos Nikolaos., 2023, Decidability of Lattice Equations, DOI [10.1007/s11225-023-10063-4, DOI 10.1007/S11225-023-10063-4]
   Gariano IO, 2019, PROCEEDINGS OF THE 2019 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON NEW IDEAS, NEW PARADIGMS, AND REFLECTIONS ON PROGRAMMING AND SOFTWARE (ONWARD!' 19), P32, DOI 10.1145/3359591.3359731
   Gordon CS, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3450272
   Gordon CS, 2013, LECT NOTES COMPUT SC, V7920, P179, DOI 10.1007/978-3-642-39038-8_8
   Gordon CS, 2012, ACM SIGPLAN NOTICES, V47, P21, DOI 10.1145/2398857.2384619
   Huang W, 2012, ACM SIGPLAN NOTICES, V47, P879, DOI 10.1145/2398857.2384680
   Jipsen Peter, 2001, Preprint
   Karger P. A., 1984, Proceedings of the 1984 Symposium on Security and Privacy, P2
   Kernighan B. W., 1988, The C Programming Language, V2nd
   Lee E, 2023, PROCEEDINGS OF THE 25TH ACM INTERNATIONAL WORKSHOP ON FORMAL TECHNIQUES FOR JAVA-LIKE PROGRAMS, FTFJP 2023, P39, DOI 10.1145/3605156.3606454
   Lee E, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3622828
   Lee Edward, 2024, Artifact for the OOPSLA 2024 paper 'Qualifying System Fsub', DOI [10.1145/3580431, DOI 10.1145/3580431]
   Lee Edward, 2024, Artifact for the OOPSLA 2024 paper ' Qualifying System F-sub'.
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Leijen Daan, 2010, Technical Report MSRTR-2010-80
   Leivant D., 1983, C REC 10 ANN ACM S P, P88, DOI [10.1145/567067.567077, DOI 10.1145/567067.567077]
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Lutze M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3607846
   Madsen M, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485487
   Markstrum S, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1667048.1667049
   Maurer Jens, 2015, P0012R1: Make exception specifications be part of the type system
   Negri S, 2002, ALGEBRA UNIV, V48, P473, DOI 10.1007/s000120200012
   Nystrom Bob., 2015, What Color is Your Function?
   Odersky Martin, 2021, SCALA 2021: Proceedings of the 12th ACM SIGPLAN International Symposium on Scala, DOI 10.1145/3486610.3486893
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Osvald L, 2016, ACM SIGPLAN NOTICES, V51, P234, DOI 10.1145/3022671.2984009
   Papi Matthew M., 2008, P 2008 INT S SOFTW T, P201, DOI DOI 10.1145/1390630.1390656
   Petricek T, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P123, DOI 10.1145/2628136.2628160
   Potanin Alex, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P233, DOI 10.1007/978-3-642-36946-9_9
   Rytz L, 2012, LECT NOTES COMPUT SC, V7313, P258, DOI 10.1007/978-3-642-31057-7_13
   Skolem Thoralf, 1920, Selected Works in Logic
   Slater Max, 2023, Oxidizing OCaml: Rust-Style Ownership
   Stroustrup B., 2007, The C++ Programming Language
   Tschantz MS, 2005, ACM SIGPLAN NOTICES, V40, P211, DOI 10.1145/1103845.1094828
   Wei GN, 2024, P ACM PROGRAM LANG, V8, DOI 10.1145/3632856
   Whitman PM, 1944, ANN MATH, V42, P325
   Wuyts Yoshua, 2022, Announcing the keyword generics initiative: Inside rust blog
   Xhebraj A., 2022, 36th European Conference on Object-Oriented Programming, ECOOP 2022, June 6-10, 2022, Berlin, Germany, V222, p15:1, DOI DOI 10.4230/LIPICS.ECOOP.2022.15
   Zhao Yaoyu, 2023, Master's thesis.
   Zibin Y, 2010, ACM SIGPLAN NOTICES, V45, P598, DOI 10.1145/1932682.1869509
   Zibin Yoav., 2007, Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Soft- ware Engineering, ESEC-FSE '07, P75, DOI DOI 10.1145/1287624
NR 59
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 115
DI 10.1145/3649832
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600022
OA gold, Green Submitted
DA 2024-08-05
ER

PT J
AU Paradis, A
   Dekoninck, J
   Bichsel, B
   Vechev, M
AF Paradis, Anouk
   Dekoninck, Jasper
   Bichsel, Benjamin
   Vechev, Martin
TI Synthetiq: Fast and Versatile Quantum Circuit Synthesis
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Quantum Circuits; Synthesis; Clifford+T
AB To implement quantum algorithms on quantum computers it is crucial to decompose their operators into the limited gate set supported by those computers. Unfortunately, existing works automating this essential task are generally slow and only applicable to narrow use cases. We present Synthetiq, a method to synthesize quantum circuits implementing a given specification over arbitrary finite gate sets, which is faster and more versatile than existing works. Synthetiq utilizes Simulated Annealing instantiated with a novel, domain-specific energy function that allows developers to leverage partial specifications for better efficiency. Synthetiq further couples this synthesis method with a custom simplification pass, to ensure efficiency of the found circuits. We experimentally demonstrate that Synthetiq can generate better implementations than were previously known for multiple relevant quantum operators including RCCCX, CCT, CCiSWAP, C root SWAP, and C root iSWAP. Our extensive evaluation also demonstrates Synthetiq frequently outperforms a wide variety of more specialized tools in their own domains, including (i) the well-studied task of synthesizing fully specified operators in the Clifford+T gate set, (ii) epsilon-approximate synthesis of multi-qubit operators in the same gate set, and (iii) synthesis tasks with custom gate sets. On all those tasks, Synthetiq is typically one to two orders of magnitude faster than previous state-of-the-art and can tackle problems that were previously out of the reach of any synthesis tool.
C1 [Paradis, Anouk; Dekoninck, Jasper; Bichsel, Benjamin; Vechev, Martin] Swiss Fed Inst Technol, Zurich, Switzerland.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich
RP Paradis, A (corresponding author), Swiss Fed Inst Technol, Zurich, Switzerland.
EM anouk.paradis@inf.ethz.ch; jasper.dekoninck@inf.ethz.ch;
   benjamin.bichsel@inf.ethz.ch; martin.vechev@inf.ethz.ch
CR Aleksandrowicz Gadi, 2019, Zenodo, DOI 10.5281/ZENODO.2562110
   Alvarez-Rodriguez U, 2018, SCI REP-UK, V8, DOI 10.1038/s41598-018-33125-3
   Amy M, 2017, LECT NOTES COMPUT SC, V10427, P3, DOI 10.1007/978-3-319-63390-9_1
   Amy M, 2013, IEEE T COMPUT AID D, V32, P818, DOI 10.1109/TCAD.2013.2244643
   [Anonymous], 2020, Quantum Computing StackExchange. 2020. Decomposition of |110- |000Exchange Gate
   Araujo IF, 2021, SCI REP-UK, V11, DOI 10.1038/s41598-021-85474-1
   Arute F, 2019, NATURE, V574, P505, DOI 10.1038/s41586-019-1666-5
   Bhattacharjee D, 2019, INT SYM MVL, P102, DOI 10.1109/ISMVL.2019.00026
   Biswal L, 2018, MICROELECTRON J, V81, P58, DOI 10.1016/j.mejo.2018.08.011
   Bravyi S, 2022, J APPL PHYS, V132, DOI 10.1063/5.0082975
   Cao YD, 2019, CHEM REV, V119, P10856, DOI 10.1021/acs.chemrev.8b00803
   Chou YH, 2022, PROCEEDINGS OF THE 2022 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE COMPANION, GECCO 2022, P2182, DOI 10.1145/3520304.3533956
   Cirq, 2023, Examples: Basic Arithmetic
   Crooks Gavin E., 2023, Technical report
   Davis MG, 2020, IEEE INTERNATIONAL CONFERENCE ON QUANTUM COMPUTING AND ENGINEERING (QCE20), P223, DOI 10.1109/QCE49297.2020.00036
   de Wolf R, 2017, ETHICS INF TECHNOL, V19, P271, DOI 10.1007/s10676-017-9439-z
   Di Matteo O, 2016, QUANTUM SCI TECHNOL, V1, DOI 10.1088/2058-9565/1/1/015003
   Gheorghiu V, 2022, NPJ QUANTUM INFORM, V8, DOI 10.1038/s41534-022-00651-y
   Gheorghiu V, 2022, NPJ QUANTUM INFORM, V8, DOI 10.1038/s41534-022-00624-1
   Giles B, 2013, PHYS REV A, V87, DOI 10.1103/PhysRevA.87.032332
   Gill SS, 2022, SOFTWARE PRACT EXPER, V52, P66, DOI 10.1002/spe.3039
   Gosset D, 2013, Arxiv, DOI [arXiv:1308.4134, 10.48550/arXiv.1308.4134, DOI 10.48550/ARXIV.1308.4134]
   Davis MG, 2019, Arxiv, DOI arXiv:1912.02727
   Green AS, 2013, ACM SIGPLAN NOTICES, V48, P333, DOI 10.1145/2499370.2462177
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Guennebaud G, 2010, Eigen
   Harrow AW, 2009, PHYS REV LETT, V103, DOI 10.1103/PhysRevLett.103.150502
   Heule S, 2016, ACM SIGPLAN NOTICES, V51, P237, DOI [10.1145/2980983.2908121, 10.1145/2908080.2908121]
   Iten R, 2016, PHYS REV A, V93, DOI 10.1103/PhysRevA.93.032318
   Ross NJ, 2016, Arxiv, DOI [arXiv:1403.2975, 10.48550/arXiv.1403.2975, DOI 10.48550/ARXIV.1403.2975]
   Kang CG, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586039
   Khatri S, 2019, QUANTUM-AUSTRIA, V3, DOI 10.22331/q-2019-05-13-140
   Kliuchnikov V, 2016, IEEE T COMPUT, V65, P161, DOI 10.1109/TC.2015.2409842
   Low GH, 2024, Arxiv, DOI arXiv:1812.00954
   Maslov D, 2016, PHYS REV A, V93, DOI 10.1103/PhysRevA.93.022311
   Meister R, 2023, NEW J PHYS, V25, DOI 10.1088/1367-2630/ace077
   Mosca M, 2022, QUANTUM SCI TECHNOL, V7, DOI 10.1088/2058-9565/ac2d3a
   Nielsen M.A., 2010, Quantum computation and quantum information, DOI 10.1017/cbo9780511976667
   Niemann P, 2020, QUANTUM INF PROCESS, V19, DOI 10.1007/s11128-020-02816-0
   OpenMP Architecture Review Board, 2021, OpenMP Application Program Interface Version 5.2
   Paradis Anouk, 2024, Zenodo, DOI 10.5281/ZENODO.10777503
   Paradis A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P222, DOI 10.1145/3453483.3454040
   Parent A, 2015, Arxiv, DOI [arXiv:1510.00377, 10.48550/arXiv.1510.00377, DOI 10.48550/ARXIV.1510.00377]
   Parent A, 2017, LECT NOTES COMPUT SC, V10301, P90, DOI 10.1007/978-3-319-59936-6_7
   Plesch M, 2011, PHYS REV A, V83, DOI 10.1103/PhysRevA.83.032302
   Qiskit, 2023, Implement the multi-controlled X gate using a V-chain of CX gates
   Quantum Computing StackExchange, 2021, How to create CX from an entangling gate and arbitrary single-qubit gates?
   Quantum Computing StackExchange, 2022, Qiskit: How to implement a classical function?
   Quantum Computing StackExchange, 2023, How to decompose root iswap into root cz and single-qubit gates
   Quantum Computing StackExchange, 2018, How to implement the "Square root of Swap gate"on the IBM Q (composer)?
   Rand R, 2019, ELECTRON P THEOR COM, P299, DOI 10.4204/EPTCS.287.17
   Selinger P, 2014, Arxiv, DOI [arXiv:1212.6253, DOI 10.48550/ARXIV.1212.6253]
   Shor PW, 1997, SIAM J COMPUT, V26, P1484, DOI 10.1137/S0036144598347011
   Smith E, 2023, ACM T QUANTUM COMPUT, V4, DOI 10.1145/3548693
   Steffen M, 2011, IBM J RES DEV, V55, DOI 10.1147/JRD.2011.2165678
   Terhal BM, 2015, REV MOD PHYS, V87, P307, DOI 10.1103/RevModPhys.87.307
   Cross AW, 2017, Arxiv, DOI arXiv:1707.03429
   Younis E, 2021, Arxiv, DOI arXiv:2103.07093
NR 58
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 96
DI 10.1145/3649813
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600003
OA gold
DA 2024-08-05
ER

PT J
AU Hammond, A
   Liu, ZY
   Pérami, T
   Sewell, P
   Birkedal, L
   Pichon-Pharabod, J
AF Hammond, Angus
   Liu, Zongyuan
   Perami, Thibaut
   Sewell, Peter
   Birkedal, Lars
   Pichon-Pharabod, Jean
TI An Axiomatic Basis for Computer Programming on the Relaxed Arm-A
   Architecture: The AxSL Logic
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE relaxed memory models; program logic; separation logic; Arm; Iris
ID WEAK MEMORY; PROOF; CONSISTENCY; CONCURRENCY; SEMANTICS
AB Very relaxed concurrency memory models, like those of the Arm-A, RISC-V, and IBM Power hardware architectures, underpin much of computing but break a fundamental intuition about programs, namely that syntactic program order and the reads-from relation always both induce order in the execution. Instead, out-of-order execution is allowed except where prevented by certain pairwise dependencies, barriers, or other synchronisation. This means that there is no notion of the 'current' state of the program, making it challenging to design (and prove sound) syntax-directed, modular reasoning methods like Hoare logics, as usable resources cannot implicitly flow from one program point to the next.
   We present AxSL, a separation logic for the relaxed memory model of Arm-A, that captures the fine-grained reasoning underpinning the low-overhead synchronisation mechanisms used by high-performance systems code. In particular, AxSL allows transferring arbitrary resources using relaxed reads and writes when they induce inter-thread ordering. We mechanise AxSL in the Iris separation logic framework, illustrate it on key examples, and prove it sound with respect to the axiomatic memory model of Arm-A. Our approach is largely generic in the axiomatic model and in the instruction-set semantics, offering a potential way forward for compositional reasoning for other similar models, and for the combination of production concurrency models and full-scale ISAs.
C1 [Hammond, Angus; Perami, Thibaut; Sewell, Peter] Univ Cambridge, Comp Lab, JJ Thomson Ave, Cambridge CB3 0FD, England.
   [Liu, Zongyuan; Birkedal, Lars; Pichon-Pharabod, Jean] Aarhus Univ, Abogade 34, DK-8200 Aarhus, Denmark.
C3 University of Cambridge; Aarhus University
RP Hammond, A (corresponding author), Univ Cambridge, Comp Lab, JJ Thomson Ave, Cambridge CB3 0FD, England.
EM Angus.Hammond@cl.cam.ac.uk; zy.liu@cs.au.dk;
   Thibaut.Perami@cl.cam.ac.uk; Peter.Sewell@cl.cam.ac.uk;
   birkedal@cs.au.dk; jean.pichon@cs.au.dk
OI Liu, Zongyuan/0000-0001-9652-4869; Perami, Thibaut/0009-0005-0005-7618;
   Birkedal, Lars/0000-0003-1320-0098
FU Google, through ASPIRE faculty awards; Arm (Sewell); European Research
   Council (ERC) under the European Union's Horizon 2020 research and
   innovation programme [789108]; Villum Investigator grant [25804]; Center
   for Basic Research in Program Verification (CPV); VILLUM Foundation;
   AUFF starter grant; Innovate UK project Digital Security by Design
   (DSbD) Technology Platform Prototype [105694]
FX This work was supported in part by Google, through ASPIRE faculty awards
   and other funding to Birkedal, Pichon-Pharabod, and Sewell; in part by
   Arm (Sewell); by the European Research Council (ERC) under the European
   Union's Horizon 2020 research and innovation programme (grant agreement
   No. 789108, AdG ELVER, Sewell); by a Villum Investigator grant (no.
   25804), Center for Basic Research in Program Verification (CPV), from
   the VILLUM Foundation (Birkedal); by an AUFF starter grant
   (Pichon-Pharabod); and by the Innovate UK project Digital Security by
   Design (DSbD) Technology Platform Prototype, 105694.
CR Manerkar YA, 2016, Arxiv, DOI arXiv:1611.01507
   Alglave J, 2021, ACM T PROGR LANG SYS, V43, DOI 10.1145/3458926
   Alglave J, 2018, ACM SIGPLAN NOTICES, V53, P405, DOI [10.1145/3173162.3177156, 10.1145/3296957.3177156]
   Alglave J, 2017, ACM SIGPLAN NOTICES, V52, P3, DOI 10.1145/3093333.3009883
   Alglave J, 2014, ACM T PROGR LANG SYS, V36, DOI 10.1145/2627752
   Alglave J, 2010, LECT NOTES COMPUT SC, V6174, P258, DOI 10.1007/978-3-642-14295-6_25
   Arm Ltd, 2023, ARM DDI 0487J.a (ID042523)
   Armstrong A, 2021, LECT NOTES COMPUT SC, V12759, P303, DOI 10.1007/978-3-030-81685-8_14
   Batty M, 2015, LECT NOTES COMPUT SC, V9032, P283, DOI 10.1007/978-3-662-46669-8_12
   Batty M, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P509
   Batty M, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P55, DOI 10.1145/1926385.1926394
   Becker P., 2011, 148822011 ISOIEC
   Ben Simner, 2020, LECT NOTES COMPUT SC, V12075, P626, DOI 10.1007/978-3-030-44914-8_23
   Boehm HJ, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P68, DOI 10.1145/1375581.1375591
   Bornat R, 2016, Arxiv, DOI arXiv:1512.01416
   Chakraborty S, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290383
   Cho M, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P213, DOI 10.1145/3519939.3523718
   Crary K, 2015, ACM SIGPLAN NOTICES, V50, P623, DOI [10.1145/2775051.2676984, 10.1145/2676726.2676984]
   Dang HH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371102
   Deacon Will, 2016, The ARMv8 Application Level Memory Model.
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Dinsdale-Young T, 2010, LECT NOTES COMPUT SC, V6183, P504, DOI 10.1007/978-3-642-14107-2_24
   Doko M, 2017, LECT NOTES COMPUT SC, V10201, P448, DOI 10.1007/978-3-662-54434-1_17
   Doko M, 2016, LECT NOTES COMPUT SC, V9583, P413, DOI 10.1007/978-3-662-49122-5_20
   Doko Marko, 2021, Ph. D. Dissertation
   Erbsen A, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P604, DOI 10.1145/3453483.3454065
   Floyd Robert W., 1967, Mathematical Aspects of Computer Science, V19, P19
   Flur S, 2017, ACM SIGPLAN NOTICES, V52, P429, DOI 10.1145/3093333.3009839
   Gharachorloo Kourosh, 1995, Ph. D. Dissertation
   Gray KE, 2015, PROCEEDINGS OF THE 48TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE (MICRO-48), P635, DOI 10.1145/2830772.2830775
   Hammond Angus, 2023, Research data for An Axiomatic Basis for Computer Programming on the Relaxed Arm -A Architecture: The AxSL Logic, DOI [10.17863/CAM.104080, DOI 10.17863/CAM.104080]
   Higham L, 2007, ACM T COMPUT SYST, V25, DOI 10.1145/1189736.1189737
   Dang HH, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P792, DOI 10.1145/3519939.3523451
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jeffrey A, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P759, DOI 10.1145/2933575.2934536
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2775051.2676980, 10.1145/2676726.2676980]
   Kaiser Jan-Oliver, 2017, EUR C OBJ OR PROGR E, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.17, 10.4230/LIPIcs.ECOOP.2017]
   Kang J, 2017, ACM SIGPLAN NOTICES, V52, P175, DOI 10.1145/3093333.3009850
   Kohli Prince, 1993, P 1993 INT C PAR PRO, V1, P332, DOI [10.1109/ICPP.1993.15, DOI 10.1109/ICPP.1993.15]
   Lahav O, 2017, ACM SIGPLAN NOTICES, V52, P618, DOI [10.1145/3140587.3062352, 10.1145/3062341.3062352]
   Lahav O, 2015, LECT NOTES COMPUT SC, V9135, P311, DOI 10.1007/978-3-662-47666-6_25
   LAMPORT L, 1977, IEEE T SOFTWARE ENG, V3, P125, DOI 10.1109/TSE.1977.229904
   Lee SH, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P362, DOI 10.1145/3385412.3386010
   Liu ZY, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591279
   McKenney Paul E., 2020, ISO/IEC JTC1 SC22 WG21 P0124R7
   MORRIS FL, 1984, ANN HIST COMPUT, V6, P139
   Myreen MO, 2007, LECT NOTES COMPUT SC, V4767, P272
   Myreen MO, 2007, LECT NOTES COMPUT SC, V4424, P568
   Myreen MO, 2008, 2008 FORMAL METHODS IN COMPUTER-AIDED DESIGN, P153
   Myreen Magnus O., 2009, Ph. D. Dissertation
   Naur P., 1966, BIT Computer Science and Numerical Mathematics, V6, P310, DOI DOI 10.1007/BF01966091
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   OHearn Peter W., 2016, ACM SIGLOG NEWS, V3, P47, DOI DOI 10.1145/2984450.2984457
   Owens S, 2009, LECT NOTES COMPUT SC, V5674, P391, DOI 10.1007/978-3-642-03359-9_27
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Paviotti M, 2020, LECT NOTES COMPUT SC, V12075, P599, DOI 10.1007/978-3-030-44914-8_22
   Pichon-Pharabod J, 2016, ACM SIGPLAN NOTICES, V51, P622, DOI 10.1145/2914770.2837616
   Pulte C, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P1, DOI 10.1145/3314221.3314624
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Pulte Christopher, 2018, Ph. D. Dissertation, DOI [10.17863/CAM.39379, DOI 10.17863/CAM.39379]
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sammler M, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P825, DOI 10.1145/3519939.3523434
   Sarkar S, 2012, ACM SIGPLAN NOTICES, V47, P311, DOI 10.1145/2345156.2254102
   Sarkar S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P175
   Sarkar S, 2009, ACM SIGPLAN NOTICES, V44, P379, DOI 10.1145/1594834.1480929
   Simner B, 2022, LECT NOTES COMPUT SC, V13240, P143, DOI 10.1007/978-3-030-99336-8_6
   Svendsen Kasper, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P357, DOI 10.1007/978-3-319-89884-1_13
   Svendsen K, 2014, LECT NOTES COMPUT SC, V8410, P149
   Tao RZ, 2021, PROCEEDINGS OF THE 28TH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, SOSP 2021, P866, DOI 10.1145/3477132.3483560
   Turing A., 1949, C HIGH SPEED AUT CAL, P67
   Turon A, 2014, ACM SIGPLAN NOTICES, V49, P691, DOI [10.1145/2660193.2660243, 10.1145/2714064.2660243]
   Vafeiadis V, 2013, ACM SIGPLAN NOTICES, V48, P867, DOI [10.1145/2544173.2509532, 10.1145/2509136.2509532]
   Waterman A., 2019, Tech. Rep. 20191213
   Wickerson J, 2013, LECT NOTES COMPUT SC, V7792, P189, DOI 10.1007/978-3-642-37036-6_12
NR 75
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 21
DI 10.1145/3632863
PG 34
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400022
OA gold
DA 2024-08-05
ER

PT J
AU Enea, C
   Koskinen, E
AF Enea, Constantin
   Koskinen, Eric
TI Scenario-Based Proofs for Concurrent Objects
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE verification; linearizability; commutativity quotient; concurrent
   objects
ID RESOURCES; SEMANTICS; LOGIC
AB Concurrent objects form the foundation of many applications that exploit multicore architectures and their importance has lead to informal correctness arguments, as well as formal proof systems. Correctness arguments (as found in the distributed computing literature) give intuitive descriptions of a few canonical executions or "scenarios" often each with only a few threads, yet it remains unknown as to whether these intuitive arguments have a formal grounding and extend to arbitrary interleavings over unboundedly many threads.
   We present a novel proof technique for concurrent objects, based around identifying a small set of scenarios (representative, canonical interleavings), formalized as the commutativity quotient of a concurrent object. We next give an expression language for defining abstractions of the quotient in the form of regular or context-free languages that enable simple proofs of linearizability. These quotient expressions organize unbounded interleavings into a form more amenable to reasoning and make explicit the relationship between implementation-level contention/interference and ADT-level transitions.
   We evaluate our work on numerous non-trivial concurrent objects from the literature (including the Michael-Scott queue, Elimination stack, SLS reservation queue, RDCSS and Herlihy-Wing queue). We show that quotients capture the diverse features/complexities of these algorithms, can be used even when linearization points are not straight-forward, correspond to original authors' correctness arguments, and provide some new scenario-based arguments. Finally, we show that discovery of some object's quotients reduces to two-thread reasoning and give an implementation that can derive candidate quotients expressions from source code.
C1 [Enea, Constantin] LIX CNRS Ecole Polytech, Paris, France.
   [Koskinen, Eric] Stevens Inst Technol, Hoboken, NJ USA.
C3 Stevens Institute of Technology
RP Enea, C (corresponding author), LIX CNRS Ecole Polytech, Paris, France.
EM cenea@lix.polytechnique.fr; eric.koskinen@stevens.edu
FU NSF [CCF-2315363]; ANR award SCEPROOF
FX We thank Matthew Parkinson and the anonymous reviewers for their
   feedback on this draft. Koskinen was partially supported by NSF award
   CCF-2008633 and NSF award CCF-2315363. Enea was partially supported by
   ANR award SCEPROOF.
CR Abdulla PA, 2016, LECT NOTES COMPUT SC, V9837, P61, DOI 10.1007/978-3-662-53413-7_4
   Berdine J, 2008, LECT NOTES COMPUT SC, V5123, P399
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Bouajjani A, 2013, LECT NOTES COMPUT SC, V7792, P290, DOI 10.1007/978-3-642-37036-6_17
   Brookes S, 2004, LECT NOTES COMPUT SC, V3170, P16
   Brookes S, 2007, THEOR COMPUT SCI, V375, P227, DOI 10.1016/j.tcs.2006.12.034
   Chajed T, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P307
   Chakraborty S, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(1:20)2015
   Clarke EM, 1998, LECT NOTES COMPUT SC, V1427, P147, DOI 10.1007/BFb0028741
   Detlefs DL, 2000, LECT NOTES COMPUT SC, V1914, P59
   Dinsdale-Young T, 2013, ACM SIGPLAN NOTICES, V48, P287, DOI 10.1145/2480359.2429104
   Dodds M, 2009, LECT NOTES COMPUT SC, V5502, P363, DOI 10.1007/978-3-642-00590-9_26
   Doherty Simon, 2004, SPAA 2004, P216, DOI [10.1145/1007912.1007945, DOI 10.1145/1007912.1007945]
   Dragoi Cezara, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P174, DOI 10.1007/978-3-642-39799-8_11
   Elmas T, 2009, ACM SIGPLAN NOTICES, V44, P2, DOI 10.1145/1594834.1480885
   Enea Constantin, 2024, CION: Concurrent Trace Reductions
   Enea Constantin, 2023, arXiv
   Godefroid P., 1996, Lecture Notes in Computer Science, V1032, DOI [DOI 10.1007/3-540-60761-7, 10.1007/3-540-60761-7_31]
   Harris TL, 2002, LECT NOTES COMPUT SC, V2508, P265
   Hawblitzel C, 2015, LECT NOTES COMPUT SC, V9207, P449, DOI 10.1007/978-3-319-21668-3_26
   Heizmann M, 2018, LECT NOTES COMPUT SC, V10806, P447, DOI 10.1007/978-3-319-89963-3_30
   Hendler Danny, 2004, SPAA 2004, P206, DOI [10.1145/1007912.1007944, DOI 10.1145/1007912.1007944]
   Herlihy M., 2008, ART MULTIPROCESSOR P
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Jones C. B., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P321
   Jung R, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371113
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2775051.2676980, 10.1145/2676726.2676980]
   Koskinen Eric, 2024, Zenodo, DOI 10.5281/ZENODO.10814650
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   Kragl B, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P227, DOI 10.1145/3385412.3385980
   Kragl B, 2018, LECT NOTES COMPUT SC, V10981, P79, DOI 10.1007/978-3-319-96145-3_5
   Kragl Bernhard, 2018, CONCUR, DOI [10.4230/LIPIcs.CONCUR.2018.21, DOI 10.4230/LIPICS.CONCUR.2018.21]
   Krishna S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158125
   Ley-Wild R, 2013, ACM SIGPLAN NOTICES, V48, P561, DOI 10.1145/2480359.2429134
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   MAZURKIEWICZ A, 1987, LECT NOTES COMPUT SC, V255, P279
   Michael M. M., 1996, Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing, P267, DOI 10.1145/248052.248106
   Nanevski A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360587
   O'Hearn PW, 2007, THEOR COMPUT SCI, V375, P271, DOI 10.1016/j.tcs.2006.12.035
   O'Hearn PW, 2010, PODC 2010: PROCEEDINGS OF THE 2010 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P85, DOI 10.1145/1835698.1835722
   O'Hearn PW, 2004, LECT NOTES COMPUT SC, V3170, P49
   OWICKI S, 1976, COMMUN ACM, V19, P279, DOI 10.1145/360051.360224
   Parkinson Matthew, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P297, DOI 10.1145/1190216.1190261
   Pinto PD, 2014, LECT NOTES COMPUT SC, V8586, P207
   Raad A, 2015, LECT NOTES COMPUT SC, V9032, P710, DOI 10.1007/978-3-662-46669-8_29
   Schellhorn Gerhard, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P243, DOI 10.1007/978-3-642-31424-7_21
   Scherer W. N.  III, 2006, Proceedings of the 2006 ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming PPoPP'06, P147, DOI 10.1145/1122971.1122994
   Treiber RK., 1986, Systems programming: coping with parallelism
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Vafeiadis V., 2008, Ph. D. Dissertation
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   Vafeiadis V, 2010, LECT NOTES COMPUT SC, V6174, P450, DOI 10.1007/978-3-642-14295-6_40
   Vafeiadis V, 2009, LECT NOTES COMPUT SC, V5403, P335, DOI 10.1007/978-3-540-93900-9_27
   Zhu H, 2015, LECT NOTES COMPUT SC, V9207, P3, DOI 10.1007/978-3-319-21668-3_1
NR 55
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD APR
PY 2024
VL 8
IS OOPSLA
AR 140
DI 10.1145/3649857
PG 30
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA OV0C4
UT WOS:001209927600047
OA gold
DA 2024-08-05
ER

PT J
AU Andrici, CC
   Ciobaca, S
   Hritcu, C
   Martínez, G
   Rivas, E
   Tanter, É
   Winterhalter, T
AF Andrici, Cezar-Constantin
   Ciobaca, Stefan
   Hritcu, Catalin
   Martinez, Guido
   Rivas, Exequiel
   Tanter, Eric
   Winterhalter, Theo
TI Securing Verified IO Programs Against Unverified Code in F<SUP>☆</SUP>
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE secure compilation; formal verification; proof assistants; input-output
ID FORMAL VERIFICATION; CONTRACTS
AB We introduce SCIO star, a formally secure compilation framework for statically verified programs performing input-output (IO). The source language is an F-star subset in which a verified program interacts with its IO-performing context via a higher-order interface that includes refinement types as well as pre- and post-conditions about past IO events. The target language is a smaller F-star subset in which the compiled program is linked with an adversarial context that has an interface without refinement types, pre-conditions, or concrete post-conditions. To bridge this interface gap and make compilation and linking secure we propose a formally verified combination of higher-order contracts and reference monitoring for recording and controlling IO operations. Compilation uses contracts to convert the logical assumptions the program makes about the context into dynamic checks on each context-program boundary crossing. These boundary checks can depend on information about past IO events stored in the state of the monitor. But these checks cannot stop the adversarial target context before it performs dangerous IO operations. Therefore linking in SCIO star additionally forces the context to perform all IO actions via a secure IO library, which uses reference monitoring to dynamically enforce an access control policy before each IO operation. We prove in F-star that SCIO star soundly enforces a global trace property for the compiled verified program linked with the untrusted context. Moreover, we prove in F-star that SCIO star satisfies by construction Robust Relational Hyperproperty Preservation, a very strong secure compilation criterion. Finally, we illustrate SCIO star at work on a simple web server example.
C1 [Andrici, Cezar-Constantin; Hritcu, Catalin] MPI SP, Bochum, Germany.
   [Ciobaca, Stefan] Alexandru Ioan Cuza Univ, Iasi, Romania.
   [Martinez, Guido] Microsoft Res, Redmond, WA USA.
   [Rivas, Exequiel] Tallinn Univ Technol, Tallinn, Estonia.
   [Tanter, Eric] Univ Chile, Dept Comp Sci, Santiago, Chile.
   [Winterhalter, Theo] Inria Saclay, Saclay, France.
C3 Alexandru Ioan Cuza University; Microsoft; Tallinn University of
   Technology; Universidad de Chile
RP Andrici, CC (corresponding author), MPI SP, Bochum, Germany.
EM cezar.andrici@mpi-sp.org; stefan.ciobaca@gmail.com;
   catalin.hritcu@mpi-sp.org; guimartinez@microsoft.com;
   exequiel.rivas@ttu.ee; etanter@dcc.uchile.cl; theo.winterhalter@inria.fr
RI ; Tanter, Eric/A-7955-2008
OI Winterhalter, Theo/0000-0002-9881-3696; Rivas,
   Exequiel/0000-0002-2114-624X; Tanter, Eric/0000-0002-7359-890X
FU European Research Council [715753]; German Federal Ministry of Education
   and Research BMBF [16KISK038]; Deutsche Forschungsgemeinschaft (DFG)
   [EXC 2092 CASA - 390781972]; Estonian Research Council [PSG749]
FX We thank the POPL 2024, ICFP 2023, PriSC 2023, and ICFP SRC 2020
   referees for their helpful reviews. This work was in part supported by
   the European Research Council under Starting Grant SECOMP (715753), by
   the German Federal Ministry of Education and Research BMBF (grant
   16KISK038, project 6GEM), and by the Deutsche Forschungsgemeinschaft
   (DFG) as part of the Excellence Strategy of the German Federal and State
   Governments -EXC 2092 CASA - 390781972. E.R. was supported by the
   Estonian Research Council starting grant PSG749.
CR Abate C, 2019, P IEEE COMPUT SECUR, P256, DOI 10.1109/CSF.2019.00025
   Abate C, 2018, PROCEEDINGS OF THE 2018 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'18), P1351, DOI 10.1145/3243734.3243745
   Agten P, 2015, ACM SIGPLAN NOTICES, V50, P581, DOI [10.1145/2676726.2676972, 10.1145/2775051.2676972]
   Agten P, 2012, P IEEE CSFW, P171, DOI 10.1109/CSF.2012.12
   Ahman D, 2017, ACM SIGPLAN NOTICES, V52, P515, DOI 10.1145/3093333.3009878
   Anand Abhishek, 2017, 3 WORKSH COQ PROGR L
   Anderson James, 1973, ESD-TR-73-51
   Andrici Cezar-Constantin, 2023, Zenodo, DOI 10.5281/ZENODO.10125015
   Andrici Cezar-Constantin, 2023, Artifact for the POPL 2024 paper 'Securing Verified IO Programs Against Unverified Code in F*'
   [Anonymous], 2008, Lecture Notes in Computer Science
   Appel AW, 2016, P IEEE CSFW, P1, DOI 10.1109/CSF.2016.8
   Arasu A, 2023, PROCEEDINGS OF THE 12TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP 2023, P30, DOI 10.1145/3573105.3575687
   Avgustinov P, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P589
   Bader J, 2018, LECT NOTES COMPUT SC, V10747, P25, DOI 10.1007/978-3-319-73721-8_2
   Bhargavan K, 2021, CCS '21: PROCEEDINGS OF THE 2021 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2601, DOI 10.1145/3460120.3484588
   Bhargavan K, 2021, 2021 IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P 2021), P523, DOI 10.1109/EuroSP51992.2021.00042
   Bodden E, 2007, LECT NOTES COMPUT SC, V4609, P525
   Bond B, 2017, PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY '17), P917
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Chen F, 2005, LECT NOTES COMPUT SC, V3440, P546
   Chen F, 2004, LECT NOTES COMPUT SC, V3308, P357
   Clarkson MR, 2010, J COMPUT SECUR, V18, P1157, DOI 10.3233/JCS-2009-0393
   Cok David R., 2022, The Logic of Software. A Tasting Menu of Formal Methods: Essays Dedicated to Reiner Hahnle on the Occasion of His 60th Birthday. Lecture Notes in Computer Science (13360), P105, DOI 10.1007/978-3-031-08166-8_6
   dafny, 2023, Dafny Reference Manual
   Dagand PÉ, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000011
   Delignat-Lavaud A, 2017, P IEEE S SECUR PRIV, P463, DOI 10.1109/SP.2017.58
   Devriese D, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(4:2)2017
   Disney T, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P176
   Douence Remi, 2005, Aspect-Oriented Software Development, P201
   El-Korashy A, 2021, P IEEE COMPUT SECUR, P265, DOI 10.1109/CSF51468.2021.00036
   Férée H, 2018, LECT NOTES COMPUT SC, V11294, P88, DOI 10.1007/978-3-030-03592-1_6
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   Flatt Matthew., The Racket Reference
   Fromherz A, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473590
   Fromherz Aymeric, 2019, PACMPL 3
   Grimm Niklas, 2018, 7 ACM SIGPLAN INT C
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Guéneau A, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3622823
   Guéneau A, 2017, LECT NOTES COMPUT SC, V10201, P584, DOI 10.1007/978-3-662-54434-1_22
   Hance T, 2020, PROCEEDINGS OF THE 14TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '20), P99
   Ho S, 2022, P IEEE S SECUR PRIV, P107, DOI 10.1109/SP46214.2022.9833621
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jacobs K, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527326
   Jensen Kurt, 1978, DAIMI Report Series
   Jin D, 2012, PROC INT CONF SOFTW, P1427, DOI 10.1109/ICSE.2012.6227231
   Klein G, 2010, COMMUN ACM, V53, P107, DOI 10.1145/1743546.1743574
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Letan T, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P32, DOI 10.1145/3372885.3373812
   Letan T, 2021, FORM ASP COMPUT, V33, P127, DOI 10.1007/s00165-020-00523-2
   Li Jialin, 2022, P ACM C OBJ OR PROGR
   Maillard K, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371072
   Maillard K, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341708
   Malecha G, 2011, J SYMB COMPUT, V46, P95, DOI 10.1016/j.jsc.2010.08.004
   Martínez G, 2019, LECT NOTES COMPUT SC, V11423, P30, DOI 10.1007/978-3-030-17184-1_2
   Masuhara H, 2003, LECT NOTES COMPUT SC, V2622, P46
   Moore S, 2016, ACM SIGPLAN NOTICES, V51, P214, DOI 10.1145/3022671.2984021
   Murray T, 2013, P IEEE S SECUR PRIV, P415, DOI 10.1109/SP.2013.35
   New MS, 2016, ACM SIGPLAN NOTICES, V51, P103, DOI 10.1145/3022670.2951941
   Nguyen PC, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P139, DOI 10.1145/2628136.2628156
   Osera Peter-Michael., PLPV 12 P 6 WORKSHOP, DOI [DOI 10.1145/2103776.2103779, 10.1145/2103776.2103779.]
   Paraskevopoulou Z, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473591
   Patrignani M, 2019, ACM COMPUT SURV, V51, DOI 10.1145/3280984
   Patrignani M, 2015, ACM T PROGR LANG SYS, V37, DOI 10.1145/2699503
   Patterson D, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P609, DOI 10.1145/3519939.3523703
   Penninckx W, 2019, Arxiv, DOI arXiv:1901.10541
   Penninckx W, 2015, LECT NOTES COMPUT SC, V9032, P158, DOI 10.1007/978-3-662-46669-8_7
   Pohjola Johannes Aman, 2019, LIPIcs, V141, DOI [10.4230/LIPIcs.ITP.2019.32, DOI 10.4230/LIPICS.ITP.2019.32]
   Protzenko J, 2020, P IEEE S SECUR PRIV, P983, DOI 10.1109/SP40000.2020.00114
   Protzenko J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110261
   Ramananandro T, 2019, PROCEEDINGS OF THE 28TH USENIX SECURITY SYMPOSIUM, P1465
   Rao XJ, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591265
   Rastogi Aseem, 2021, Programming and Proving with Indexed Effects
   Sammler M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571220
   Scholliers C, 2015, SCI COMPUT PROGRAM, V98, P360, DOI 10.1016/j.scico.2013.09.005
   Silver L, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434307
   Skorstengaard L, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S095679682100006X
   Sozeau M, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371076
   Sozeau Matthieu, 2023, Coq
   Swamy N, 2016, ACM SIGPLAN NOTICES, V51, P256, DOI 10.1145/2914770.2837655
   Swierstra W, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P25, DOI 10.1145/1291201.1291206
   Swierstra W, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3341707
   Tanter É, 2016, ACM SIGPLAN NOTICES, V51, P26, DOI [10.1145/2816707.2816710, 10.1145/2936313.2816710]
   Tanter Eric, 2008, 7 INT C ASP OR SOFTW, P168, DOI [10.1145/1353482.1353503, DOI 10.1145/1353482.1353503]
   Tov JA, 2010, LECT NOTES COMPUT SC, V6012, P550, DOI 10.1007/978-3-642-11957-6_29
   Van Strydonck T, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000022
   Winterhalter Theo, 2022, Partial Dijkstra Monads for All
   Wise J, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428296
   Xia LY, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371119
   Zakowski Y, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3473572
   Zhang Hengchu., 2021, 12 INT C INTERACTIVE, V193, p32:1, DOI DOI 10.4230/LIPICS.ITP.2021.32
   Zinzindohoué JK, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1789, DOI 10.1145/3133956.3134043
NR 91
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 74
DI 10.1145/3632916
PG 34
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400075
OA Green Submitted, gold
DA 2024-08-05
ER

PT J
AU Carette, J
   Heunen, C
   Kaarsgaard, R
   Sabry, A
AF Carette, Jacques
   Heunen, Chris
   Kaarsgaard, Robin
   Sabry, Amr
TI With a Few Square Roots, Quantum Computing Is as Easy as Pi
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE quantum programming language; unitary quantum computing; reversible
   computing; equational theory; rig category
AB Rig groupoids provide a semantic model of., a universal classical reversible programming language over finite types. We prove that extending rig groupoids with just two maps and three equations about them results in a model of quantum computing that is computationally universal and equationally sound and complete for a variety of gate sets. The first map corresponds to an 8th root of the identity morphism on the unit 1. The second map corresponds to a square root of the symmetry on 1 + 1. As square roots are generally not unique and can sometimes even be trivial, the maps are constrained to satisfy a nondegeneracy axiom, which we relate to the Euler decomposition of the Hadamard gate. The semantic construction is turned into an extension of Pi, called root Pi, that is a computationally universal quantum programming language equipped with an equational theory that is sound and complete with respect to the Clifford gate set, the standard gate set of Clifford+T restricted to <= 2 qubits, and the computationally universal Gaussian Clifford+T gate set.
C1 [Carette, Jacques] McMaster Univ, Hamilton, ON, Canada.
   [Heunen, Chris] Univ Edinburgh, Edinburgh, Midlothian, Scotland.
   [Kaarsgaard, Robin] Univ Southern Denmark, Ctr Quantum Math, Odense, Denmark.
   [Sabry, Amr] Indiana Univ, Bloomington, IN USA.
C3 McMaster University; University of Edinburgh; University of Southern
   Denmark; Indiana University System; Indiana University Bloomington
RP Carette, J (corresponding author), McMaster Univ, Hamilton, ON, Canada.
EM carette@mcmaster.ca; Chris.Heunen@ed.ac.uk; kaarsgaard@imada.sdu.dk;
   sabry@indiana.edu
RI ; Kaarsgaard, Robin/M-2569-2016
OI Sabry, Amr/0000-0002-1025-7331; Kaarsgaard, Robin/0000-0002-7672-799X;
   Heunen, Chris/0000-0001-7393-2640
FU NSERC grant [RGPIN-2018-05812]; US National Science Foundation
   [OMA-1936353]
FX We are indebted to the reviewers for their thoughtful and detailed
   comments. Jacques Carette is supported by NSERC grant RGPIN-2018-05812.
   Amr Sabry was supported by US National Science Foundation grant
   OMA-1936353.
CR Aharonov D., 2003, arXiv, DOI [10.48550/arXiv.quantph/0301040, DOI 10.48550/ARXIV.QUANTPH/0301040]
   Amy M, 2020, QUANTUM-AUSTRIA, V4, DOI 10.22331/q-2020-04-06-252
   Arute F, 2019, Arxiv, DOI [arXiv:1910.11333, 10.48550/arXiv.1910.11333, DOI 10.48550/ARXIV.1910.11333]
   Awodey S., 2010, Category Theory Oxford Logic Guides, V62
   Backens M, 2019, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.287.2
   Bian XN, 2021, ELECTRON P THEOR COM, P145, DOI 10.4204/EPTCS.343.8
   Bian XN, 2023, Arxiv, DOI [arXiv:2204.02217, 10.48550/arXiv.2204.02217, DOI 10.48550/ARXIV.2204.02217]
   Carette J, 2023, Arxiv, DOI [arXiv:2310.14056, 10.48550/arXiv.2310.14056, DOI 10.48550/ARXIV.2310.14056]
   Carette J, 2022, ADV COMPUT, V126, P15, DOI 10.1016/bs.adcom.2021.11.009
   Carette J, 2016, LECT NOTES COMPUT SC, V9632, P123, DOI 10.1007/978-3-662-49498-1_6
   Choudhury V, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498667
   Clément A, 2023, Arxiv, DOI [arXiv:2206.10577, 10.48550/arXiv.2206.10577, DOI 10.48550/ARXIV.2206.10577]
   Coecke B, 2011, NEW J PHYS, V13, DOI 10.1088/1367-2630/13/4/043016
   de Beaudrap N., 2022, ICALP, DOI [10.4230/LIPIcs.ICALP.2022.119, DOI 10.4230/LIPICS.ICALP.2022.119]
   Duncan R, 2009, LECT NOTES COMPUT SC, V5635, P167, DOI 10.1007/978-3-642-03073-4_18
   Giles B, 2013, PHYS REV A, V87, DOI 10.1103/PhysRevA.87.032332
   Gluck Robert, 2020, Formal Methods. FM 2019 International Workshops. Revised Selected Papers. Lecture Notes in Computer Science (LNCS 12233), P413, DOI 10.1007/978-3-030-54997-8_26
   Gottesman D, 1998, GROUP 22: PROCEEDINGS OF THE XII INTERNATIONAL COLLOQUIUM ON GROUP THEORETICAL METHODS IN PHYSICS, P32
   HAYES B, 1995, AM SCI, V83, P304
   Heunen C., 2019, Categories for Quantum Theory: An Introduction (Oxford Graduate Texts in Mathematics)
   Heunen C, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3498663
   Heunen C, 2018, ELECTRON NOTES THEOR, V341, P179, DOI 10.1016/j.entcs.2018.11.009
   Hu JZS, 2021, CPP '21: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P327, DOI 10.1145/3437992.3439922
   James RP, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P73
   Johnson N, 2021, Arxiv, DOI [arXiv:2107.10526, 10.48550/arXiv.2107.10526, DOI 10.48550/ARXIV.2107.10526]
   Laplaza, 1972, Lecture Notes in Mathematics), V281, P29, DOI [10.1007/BFb0059555, DOI 10.1007/BFB0059555]
   May J. P., 1977, E Ring Spaces and E Ring Spectra
   Nielsen M.A., 2010, Quantum computation and quantum information, DOI 10.1017/cbo9780511976667
   Satoh Takahiko, 2022, IEEE Transactions on Quantum Engineering, V3, DOI 10.1109/TQE.2022.3170008
   Selinger P, 2015, LOG METH COMPUT SCI, V11, DOI 10.2168/LMCS-11(2:10)2015
   SLEATOR T, 1995, PHYS REV LETT, V74, P4087, DOI 10.1103/PhysRevLett.74.4087
   Staton S, 2015, ACM SIGPLAN NOTICES, V50, P395, DOI [10.1145/2775051.2676999, 10.1145/2676726.2676999]
   Thomsen MK, 2015, LECT NOTES COMPUT SC, V9138, P200, DOI 10.1007/978-3-319-20860-2_13
   Toffoli T., 1980, Automata, Languages and Programming, Seventh Colloquium, P632
   Yanofsky NS., 2008, QUANTUM COMPUTING CO, DOI 10.1017/CBO9780511813887
   Yeh L, 2022, LECT NOTES COMPUT SC, P28, DOI 10.1007/978-3-031-09005-9_3
NR 36
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 19
DI 10.1145/3632861
PG 29
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400020
OA Green Submitted, Green Accepted, Green Published, gold
DA 2024-08-05
ER

PT J
AU Elsman, M
AF Elsman, Martin
TI Explicit Effects and Effect Constraints in ReML
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Region-inference; Effect Systems; Parallelism; Memory Management
ID MEMORY MANAGEMENT; REGION INFERENCE
AB An important aspect of building robust systems that execute on dedicated hardware and perhaps in constrained environments is to control and manage the effects performed by program code.
   We present ReML, a higher-order statically-typed functional language, which allows programmers to be explicit about the effects performed by program code and in particular effects related to memory management. Allowing programmers to be explicit about effects, the regions in which values reside, and the constraints under which code execute, makes programs robust to changes in the program source code and to compiler updates, including compiler optimisations.
   ReML is integrated with a polymorphic inference system that builds on top of region-inference, as it is implemented in the MLKit, a Standard ML compiler that uses region-based memory management as its primary memory management scheme.
C1 [Elsman, Martin] Univ Copenhagen, Dept Comp Sci, Univ Pk 5, DK-2100 Copenhagen, Denmark.
C3 University of Copenhagen
RP Elsman, M (corresponding author), Univ Copenhagen, Dept Comp Sci, Univ Pk 5, DK-2100 Copenhagen, Denmark.
EM mael@di.ku.dk
RI Elsman, Martin/L-8791-2016
OI Elsman, Martin/0000-0002-6061-5993
CR [Anonymous], 1995, Ph. D. Dissertation
   Bauer A, 2015, J LOG ALGEBR METHODS, V84, P108, DOI 10.1016/j.jlamp.2014.02.001
   Birkedal L, 2001, THEOR COMPUT SCI, V258, P299, DOI 10.1016/S0304-3975(00)00025-6
   Birkedal L., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P171, DOI 10.1145/237721.237771
   Brachthäuser JI, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3527320
   Brachthäuser JI, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428194
   Brachthäuser JI, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S0956796820000027
   Calcagno C, 2002, INFORM COMPUT, V173, P199, DOI 10.1006/inco.2001.3112
   Calcagno Cristiano, 2001, ACM S PRINC PROGR LA
   Chen CY, 2005, ACM SIGPLAN NOTICES, V40, P66, DOI 10.1145/1090189.1086375
   Cooper E., 1990, Technical Report CMU-CS-90-186
   Elsman M., 1998, Types im Compilation. Second International Workshop, TIC '98 Proceedings, P136, DOI 10.1007/BFb0055516
   Elsman M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591229
   Elsman M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591256
   Elsman M, 2021, J FUNCT PROGRAM, V31, DOI 10.1017/S0956796821000010
   Elsman Martin, 2011, P 1 ACM SIGPLAN INT, P39, DOI [10.1145/2093328.2093336, DOI 10.1145/2093328.2093336]
   Elsman Martin, 2024, Artifact for the POPL 2024 paper: Explicit Effects and Effect Constraints in ReML., DOI [10.5281/zenodo.8425443, DOI 10.5281/ZENODO.8425443]
   Elsman Martin, 1995, Student Project 95-7-8.
   Fahndrich Manuel, 1998, Technical Report UCB/CSD-98-996.
   Farvardin K, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P75, DOI 10.1145/3385412.3385994
   Fluet M, 2004, ACM SIGPLAN NOTICES, V39, P103, DOI 10.1145/1016848.1016867
   Fluet M, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P119
   Foster J. S., 2002, SIGPLAN Notices, V37, P1, DOI 10.1145/543552.512531
   FREEMAN T, 1991, SIGPLAN NOTICES, V26, P268, DOI 10.1145/113446.113468
   Gay D, 1998, ACM SIGPLAN NOTICES, V33, P313, DOI 10.1145/277652.277748
   Gerakios P, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P15
   Grossman D, 2002, ACM SIGPLAN NOTICES, V37, P282, DOI 10.1145/543552.512563
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   Hallenberg N, 2002, ACM SIGPLAN NOTICES, V37, P141, DOI 10.1145/543552.512547
   Hallenberg Niels, 1996, Student Project 96-5-7.
   Helsen Simon, 2001, Electronic Notes in Theoretical Computer Science, V41, P1, DOI [10.1016/S1571-0661(04)80870-3HOOTS2000, DOI 10.1016/S1571-0661(04)80870-3HOOTS2000]
   Henglein Fritz., 2001, Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming, P175, DOI [10.1145/773184.773203, DOI 10.1145/773184.773203]
   Hicks Michael, 2004, P 4 INT S MEM MAN VA, P73, DOI DOI 10.1145/1029873.1029883
   JONES MP, 1994, SCI COMPUT PROGRAM, V22, P231, DOI 10.1016/0167-6423(94)00005-0
   Jouvelot Pierre., 1991, ACM SIGACTSIGPLAN S, P303, DOI DOI 10.1145/99583.99623
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Kiselyov O, 2016, LECT NOTES COMPUT SC, V10017, P271, DOI 10.1007/978-3-319-47958-3_15
   Kiselyov O, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P1
   Klabnik Steve, 2018, The Rust Programming Language
   Leijen D, 2014, ELECTRON PROC THEOR, P100, DOI 10.4204/EPTCS.153.8
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Lutze M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3607846
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Pareto Lars, 2000, Ph. D. Dissertation
   Pessaux F., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P276, DOI 10.1145/292540.292565
   PETERSON J, 1993, SIGPLAN NOTICES, V28, P227, DOI 10.1145/173262.155112
   Raghunathan R, 2016, ACM SIGPLAN NOTICES, V51, P392, DOI 10.1145/3022670.2951935
   Sivaramakrishnan KC, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3408995
   Sulzmann Martin Franz, 2000, Ph. D. Dissertation, Patent No. AAI9973781
   Swamy N, 2006, SCI COMPUT PROGRAM, V62, P122, DOI 10.1016/j.scico.2006.02.003
   TALPIN JP, 1994, INFORM COMPUT, V111, P245, DOI 10.1006/inco.1994.1046
   Tofte M, 1998, ACM T PROGR LANG SYS, V20, P724, DOI 10.1145/291891.291894
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   Tofte M., 2004, Higher-Order and Symbolic Computation, V17, P245, DOI 10.1023/B:LISP.0000029446.78563.a4
   Tofte Mads, 2022, Technical Report.
   Tofte Mads, 2000, Essays in Honour of Robin Milner
   Vazou N, 2014, ICFP'14: PROCEEDINGS OF THE 2014 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P269, DOI 10.1145/2628136.2628161
   Walker D, 2000, ACM T PROGR LANG SYS, V22, P701, DOI 10.1145/363911.363923
   Westrick S, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547646
   Westrick S, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371115
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 61
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 79
DI 10.1145/3632921
PG 25
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400080
OA gold
DA 2024-08-05
ER

PT J
AU Faggian, C
   Pautasso, D
   Vanoni, G
AF Faggian, Claudia
   Pautasso, Daniele
   Vanoni, Gabriele
TI Higher Order Bayesian Networks, Exactly
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE lambda calculus; intersection types; Bayesian networks; probabilistic
   programming; denotational semantics
ID PROBABILISTIC COHERENCE SPACES; LAMBDA-CALCULUS; SEMANTICS; MONADS
AB Bayesian networks are graphical first-order probabilistic models that allow for a compact representation of large probability distributions, and for efficient inference, both exact and approximate. We introduce a higher-order programming language-in the idealized form of a lambda-calculus-which we prove sound and complete w.r.t. Bayesian networks: each Bayesian network can be encoded as a term, and conversely each (possibly higher-order and recursive) program of ground type compiles into a Bayesian network.
   The language allows for the specification of recursive probability models and hierarchical structures. Moreover, we provide a compositional and cost-aware semantics which is based on factors, the standard mathematical tool used in Bayesian inference. Our results rely on advanced techniques rooted into linear logic, intersection types, rewriting theory, and Girard's geometry of interaction, which are here combined in a novel way.
C1 [Faggian, Claudia; Vanoni, Gabriele] Univ Paris Cite, CNRS, IRIF, Paris, France.
   [Pautasso, Daniele] Univ Turin, Turin, Italy.
C3 Centre National de la Recherche Scientifique (CNRS); Universite Paris
   Cite; University of Turin
RP Faggian, C (corresponding author), Univ Paris Cite, CNRS, IRIF, Paris, France.
EM faggian@irif.fr; daniele.pautasso@unito.it; gabriele.vanoni@irif.fr
OI Vanoni, Gabriele/0000-0001-8762-8674
FU ANR project [PPS: ANR-19-CE48-0014]; European Union [101034255]
FX The authors are in debt with Thomas Ehrhard and Michele Pagani for many
   insightful discussions. We thank Ugo Dal Lago, Beniamino Accattoli,
   Delia Kesner for their useful remarks. We are also grateful to the
   anonymous referees, whose valuable comments have improved the
   presentation of this work. This research was supported by the ANR
   project PPS: ANR-19-CE48-0014. The third author is also supported by the
   European Union's Horizon 2020 research and innovation programme under
   the Marie Sklodowska-Curie grant agreement No 101034255.
CR Accattoli Beniamino, 2020, PPDP '20: Proceedings of the 22nd International Symposium on Principles and Practice of Declarative Programming, DOI 10.1145/3414080.3414108
   Accattoli B, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470726
   Accattoli B, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547650
   Accattoli B, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434332
   Accattoli B, 2020, J FUNCT PROGRAM, V30, DOI 10.1017/S095679682000012X
   Accattoli B, 2010, LECT NOTES COMPUT SC, V6247, P381, DOI 10.1007/978-3-642-15205-4_30
   Arrial V, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571244
   Benton N., 1993, Typed Lambda Calculi and Applications. International Conference. TLCA '93, P75, DOI 10.1007/BFb0037099
   Benton N, 1996, IEEE S LOG, P420, DOI 10.1109/LICS.1996.561458
   Blain Levy P., 1999, Typed Lambda Calculi and Applications. 4th International Conference, TLCA'99. Proceedings, P228
   Borgstrom Johannes, 2015, arXiv
   Bucciarelli Antonio, 2020, Lecture Notes in Computer Science, V12073, P13, DOI [DOI 10.1007/978-3-030-59025, 10.1007/978-3-030-59025-3_2]
   Buntine WL, 1994, J ARTIF INTELL RES, V2, P159, DOI 10.1613/jair.62
   Castellan S, 2019, LECT NOTES COMPUT SC, V11423, P322, DOI 10.1007/978-3-030-17184-1_12
   Chiang D, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586050
   COPPO M, 1981, Z MATH LOGIK, V27, P45, DOI 10.1002/malq.19810270205
   Coppo M., 1978, Archiv fur Mathematische Logik und Grundlagenforschung, V19, P139, DOI 10.1007/BF02011875
   Dahlqvist F, 2018, ELECTRON NOTES THEOR, V341, P91, DOI 10.1016/j.entcs.2018.11.006
   Dal Lago U, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3434313
   Dal Lago U, 2017, ACM SIGPLAN NOTICES, V52, P833, DOI 10.1145/3093333.3009859
   Dal Lago U, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:11)2012
   Danos V., 2002, ACM Transactions on Computational Logic, V3, P359, DOI 10.1145/507382.507385
   Danos V, 2011, INFORM COMPUT, V209, P966, DOI 10.1016/j.ic.2011.02.001
   Darwiche A, 2009, MODELING AND REASONING WITH BAYESIAN NETWORKS, P1, DOI 10.1017/CBO9780511811357
   Darwiche A, 2008, FOUND ARTIF INTELL, P467, DOI 10.1016/S1574-6526(07)03011-8
   De Carvalho D, 2018, MATH STRUCT COMP SCI, V28, P1169, DOI 10.1017/S0960129516000396
   Dean T., 1989, Computational Intelligence, V5, P142, DOI 10.1111/j.1467-8640.1989.tb00324.x
   Egger J, 2014, J LOGIC COMPUT, V24, P615, DOI 10.1093/logcom/exs025
   Ehrhard T, 2019, LOG METH COMPUT SCI, V15, DOI 10.23638/LMCS-15(1:3)2019
   Ehrhard T, 2016, LECT NOTES COMPUT SC, V9632, P202, DOI 10.1007/978-3-662-49498-1_9
   Ehrhard T, 2014, ACM SIGPLAN NOTICES, V49, P309, DOI 10.1145/2535838.2535865
   Ehrhard Thomas, 2023, LAFI 2023
   Ehrhard Thomas, 2023, LIPIcs, V260
   Faggian C, 2023, Arxiv, DOI arXiv:2311.04651
   Friedman N, 1998, FIFTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE (AAAI-98) AND TENTH CONFERENCE ON INNOVATIVE APPLICATIONS OF ARTIFICAL INTELLIGENCE (IAAI-98) - PROCEEDINGS, P157
   GILKS WR, 1994, STATISTICIAN, V43, P169, DOI 10.2307/2348941
   Girard Jean-Yves, 1989, Studies in Logic and the Foundations of Mathematics, V127, P221, DOI DOI 10.1016/S0049-237X(08)70271-4
   Goodman N., 2008, UAI, V8, P220
   Gordon Andrew D., 2014, P FUT SOFTW ENG, P167, DOI [DOI 10.1145/2593882.2593900, 10.1145/2593882.2593900]
   Heunen C, 2017, IEEE S LOG
   Jacobs B, 2019, LECT NOTES COMPUT SC, V11425, P313, DOI 10.1007/978-3-030-17127-8_18
   Jacobs B, 2016, ELECTRON NOTES THEOR, V325, P185, DOI 10.1016/j.entcs.2016.09.038
   Jacobs Bart, 2023, Structured probabilitistic reasoning
   Jacobs Bart, 2020, Foundations of Probabilistic Programming, P295, DOI DOI 10.1017/9781108770750.010
   Koller D., 1997, Proceedings of the Thirteenth Annual Conference on Uncertainty in Artificial Intelligence (UAI), P302
   Koller D., 2009, PROBABILISTIC GRAPHI
   Koller Daphne, 1997, P 14 NAT C ART INT 1, P740
   Laird J, 2013, IEEE S LOG, P301, DOI 10.1109/LICS.2013.36
   Mansinghka V, 2014, Arxiv, DOI arXiv:1404.0099
   Melliès PA, 2010, ANN PURE APPL LOGIC, V161, P632, DOI 10.1016/j.apal.2009.07.018
   Milner R, 2007, ELECTRON NOTES THEOR, V175, P65, DOI 10.1016/j.entcs.2006.07.035
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Neapolitan R., 2003, Learning Bayesian networks
   Paquet H, 2021, LECT NOTES COMPUT SC, V12648, P519, DOI 10.1007/978-3-030-72019-3_19
   Park S, 2005, ACM SIGPLAN NOTICES, V40, P171, DOI 10.1145/1047659.1040320
   Park S, 2003, ACM SIGPLAN NOTICES, V38, P38, DOI 10.1145/640136.604180
   PEARL J, 1986, ARTIF INTELL, V29, P241, DOI 10.1016/0004-3702(86)90072-X
   Pearl J., 1988, PROBABILISTIC REASON
   Pfeffer A, 2000, SEVENTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE (AAAI-2001) / TWELFTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE (IAAI-2000), P538
   Pless D., 2001, UAI 01, P429
   Ramsey N, 2002, ACM SIGPLAN NOTICES, V37, P154, DOI 10.1145/565816.503288
   Saheb-Djahromi N., 1978, Mathematical Foundations of Computer Science 1978, P442
   Scibior A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158148
   Simpson A, 2005, LECT NOTES COMPUT SC, V3467, P219
   Stein D, 2021, IEEE S LOG, DOI 10.1109/LICS52264.2021.9470552
   Vákár M, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290349
   van de Meent Jan-Willem, 2018, arXiv, DOI DOI 10.48550/ARXIV.1809.10756
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
NR 68
TC 0
Z9 0
U1 1
U2 1
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 84
DI 10.1145/3632926
PG 33
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400085
OA gold, Green Submitted, Green Published
DA 2024-08-05
ER

PT J
AU Mansky, W
   Du, K
AF Mansky, William
   Du, Ke
TI An Iris Instance for Verifying CompCert C Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE program verification; concurrent separation logic; interactive theorem
   proving; Verified Software Toolchain; Iris
ID SEPARATION LOGIC
AB Iris is a generic separation logic framework that has been instantiated to reason about a wide range of programming languages and language features. Most Iris instances are defined on simple core calculi, but by connecting Iris to new or existing formal semantics for practical languages, we can also use it to reason about real programs. In this paper we develop an Iris instance based on CompCert, the verified C compiler, allowing us to prove correctness of C programs under the same semantics we use to compile and run them. We take inspiration from the Verified Software Toolchain (VST), a prior separation logic for CompCert C, and reimplement the program logic of VST in Iris. Unlike most Iris instances, this involves both a new model of resources for CompCert memories, and a new definition of weakest preconditions/Hoare triples, as the Iris defaults for both of these cannot be applied to CompCert as is. Ultimately, we obtain a complete program logic for CompCert C within Iris, and we reconstruct enough of VST's top-level automation to prove correctness of simple C programs.
C1 [Mansky, William; Du, Ke] Univ Illinois, Chicago, IL 60680 USA.
C3 University of Illinois System; University of Illinois Chicago;
   University of Illinois Chicago Hospital
RP Mansky, W (corresponding author), Univ Illinois, Chicago, IL 60680 USA.
EM mansky1@uic.edu; kdu9@uic.edu
OI Du, Ke/0009-0008-2465-1082; Mansky, William/0000-0002-5351-895X
CR [Anonymous], 2023, VST on Iris, DOI [10.5281/zenodo.8423866, DOI 10.5281/ZENODO.8423866]
   Appel A.W., 2014, Program Logics for Certified Compilers
   Beringer L, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P207
   Bizjak A, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290378
   Blom S, 2014, LECT NOTES COMPUT SC, V8442, P127, DOI 10.1007/978-3-319-06410-9_9
   Cao QX, 2018, J AUTOM REASONING, V61, P367, DOI 10.1007/s10817-018-9457-5
   Chajed T, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P243, DOI 10.1145/3341301.3359632
   Cuellar Santiago., 2020, Compiler correctness for concurrency: from comncurrent separation logic to shared memory assembly language
   Dang HH, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371102
   Dockins R, 2009, LECT NOTES COMPUT SC, V5904, P161, DOI 10.1007/978-3-642-10672-9_13
   Frumin D, 2021, LOG METH COMPUT SCI, V17, DOI 10.46298/LMCS-17(3:9)2021
   Gotsman A, 2007, LECT NOTES COMPUT SC, V4807, P19
   Gueneau Armael, 2023, Melocoton: A Program Logic for Verified Interoperability Between OCaml and C
   Hobor A, 2008, LECT NOTES COMPUT SC, V4960, P353
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jiang HR, 2019, PROCEEDINGS OF THE 40TH ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '19), P111, DOI 10.1145/3314221.3314595
   Jung R, 2018, J FUNCT PROGRAM, V28, DOI 10.1017/S0956796818000151
   Jung R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158154
   Jung R, 2015, ACM SIGPLAN NOTICES, V50, P637, DOI [10.1145/2775051.2676980, 10.1145/2676726.2676980]
   Kaiser Jan-Oliver, 2017, EUR C OBJ OR PROGR E, V74, DOI [DOI 10.4230/LIPICS.ECOOP.2017.17, 10.4230/LIPIcs.ECOOP.2017]
   Koh N, 2019, PROCEEDINGS OF THE 8TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP' 19), P234, DOI 10.1145/3293880.3294106
   Krebbers R, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3236772
   Krogh-Jespersen M, 2020, LECT NOTES COMPUT SC, V12075, P336, DOI 10.1007/978-3-030-44914-8_13
   Lau S, 2019, LECT NOTES COMPUT SC, V11561, P387, DOI 10.1007/978-3-030-25540-4_22
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Leroy Xavier, 2012, Research Report RR-7987
   Mansky W, 2022, Arxiv, DOI [arXiv:2207.06574, 10.48550/arXiv.2207.06574, DOI 10.48550/ARXIV.2207.06574]
   Mansky W, 2020, LECT NOTES COMPUT SC, V12075, P428, DOI 10.1007/978-3-030-44914-8_16
   Mansky W, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133911
   Mulder I, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P809, DOI 10.1145/3519939.3523432
   Rao XJ, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591265
   Sammler M, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3571220
   Sammler M, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P158, DOI 10.1145/3453483.3454036
   Sevcik J, 2013, J ACM, V60, DOI 10.1145/2487241.2487248
   Spies S, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547631
   Spies S, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P80, DOI 10.1145/3453483.3454031
   The Coq Development Team, 2023, Zenodo
   Watt C, 2021, LECT NOTES COMPUT SC, V13047, P61, DOI 10.1007/978-3-030-90870-6_4
   Zhang Hengchu., 2021, 12 INT C INTERACTIVE, V193, p32:1, DOI DOI 10.4230/LIPICS.ITP.2021.32
NR 39
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 6
DI 10.1145/3632848
PG 27
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400007
OA gold
DA 2024-08-05
ER

PT J
AU Sotiropoulos, T
   Chaliasos, S
   Su, ZD
AF Sotiropoulos, Thodoris
   Chaliasos, Stefanos
   Su, Zhendong
TI API-Driven Program Synthesis for Testing Static Typing Implementations
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE compiler bug; compiler testing; type system; API; library; enumeration
AB We introduce a novel approach for testing static typing implementations based on the concept of API-driven program synthesis. The idea is to synthesize type-intensive but small and well-typed programs by leveraging and combining application programming interfaces (APIs) derived from existing software libraries. Our primary insight is backed up by real-world evidence: a significant number of compiler typing bugs are caused by small test cases that employ APIs from the standard library of the language under test. This is attributed to the inherent complexity of the majority of these APIs, which often exercise a wide range of sophisticated type-related features. The main contribution of our approach is the ability to produce small client programs with increased feature coverage, without bearing the burden of generating the corresponding well-formed API definitions from scratch. To validate diverse aspects of static typing procedures (i.e., soundness, precision of type inference), we also enrich our API-driven approach with fault-injection and semantics-preserving modes, along with their corresponding test oracles.
   We evaluate our implemented tool, thalia, on testing the static typing implementations of the compilers for three popular languages, namely, Scala, Kotlin, and Groovy. thalia has uncovered 84 typing bugs (77 confirmed and 22 fixed), most of which are triggered by test cases featuring APIs that rely on parametric polymorphism, overloading, and higher-order functions. Our comparison with state-of-the-art shows that thalia yields test programs with distinct characteristics, offering additional and complementary benefits.
C1 [Sotiropoulos, Thodoris; Su, Zhendong] Swiss Fed Inst Technol, Zurich, Switzerland.
   [Chaliasos, Stefanos] Imperial Coll London, London, England.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; Imperial
   College London
RP Sotiropoulos, T (corresponding author), Swiss Fed Inst Technol, Zurich, Switzerland.
EM theodoros.sotiropoulos@inf.ethz.ch; s.chaliasos21@imperial.ac.uk;
   zhendong.su@inf.ethz.ch
OI Sotiropoulos, Thodoris/0000-0002-9906-3073; Chaliasos,
   Stefanos/0000-0001-5414-4120; Su, Zhendong/0000-0002-2970-1391
CR Amalfitano D, 2015, 2ND ACM INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS MOBILESOFT 2015, P33, DOI 10.1109/MobileSoft.2015.11
   Amin N, 2016, ACM SIGPLAN NOTICES, V51, P838, DOI 10.1145/3022671.2984004
   Chaliasos S, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P183, DOI 10.1145/3519939.3523427
   Chaliasos S, 2021, P ACM PROGRAM LANG, V5, DOI 10.1145/3485500
   Cortier V, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P409, DOI 10.1145/3133956.3133998
   Dewey K, 2015, IEEE INT CONF AUTOM, P482, DOI 10.1109/ASE.2015.65
   Donaldson AF, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P1017, DOI 10.1145/3453483.3454092
   Donaldson AF, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133917
   EclEmma, 2023, EclEmma Jacoco
   Even-Mendoza Karine, 2020, 2020 35th IEEE/ACM International Conference on Automated Software Engineering (ASE), P1219, DOI 10.1145/3324884.3418933
   Even-Mendoza K, 2022, EMPIR SOFTW ENG, V27, DOI 10.1007/s10664-022-10146-1
   Feng Yu., 2017, Component-based synthesis for complex apis. pages, P599, DOI [10.1145/3009837.3009851, DOI 10.1145/3009837.3009851]
   Guo Z, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P122, DOI 10.1145/3519939.3523450
   Guo Z, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3371080
   Gvero T, 2013, ACM SIGPLAN NOTICES, V48, P27, DOI 10.1145/2499370.2462192
   Koppel J, 2022, P ACM PROGRAM LANG, V6, DOI 10.1145/3547622
   Le V, 2015, ACM SIGPLAN NOTICES, V50, P386, DOI [10.1145/2814270.2814319, 10.1145/2858965.2814319]
   Le Vu, 2015, P 2015 INT S SOFTW T, P327, DOI DOI 10.1145/2771783.2771785
   Lidbury C, 2015, ACM SIGPLAN NOTICES, V50, P65, DOI [10.1145/2737924.2737986, 10.1145/2813885.2737986]
   Livinskii V, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3591295
   Livinskii V, 2020, P ACM PROGRAM LANG, V4, DOI 10.1145/3428264
   Mandelin D, 2005, ACM SIGPLAN NOTICES, V40, P48, DOI 10.1145/1064978.1065018
   Milano M, 2022, PROCEEDINGS OF THE 43RD ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '22), P458, DOI 10.1145/3519939.3523443
   Perelman D, 2012, ACM SIGPLAN NOTICES, V47, P275, DOI 10.1145/2345156.2254098
   Pierce BC, 2000, ACM T PROGR LANG SYS, V22, P1, DOI 10.1145/345099.345100
   Pierce Benjamin C., 2002, Types and Programming Languages
   Regehr J, 2012, ACM SIGPLAN NOTICES, V47, P335, DOI 10.1145/2345156.2254104
   Scaladex, 2023, The Scala library index
   Sotiropoulos T, 2023, Arxiv, DOI [arXiv:2311.04527, 10.48550/arXiv.2311.04527, DOI 10.48550/ARXIV.2311.04527]
   Sotiropoulos Thodoris, 2023, API-driven Program Synthesis for Testing Static Typing Implementations, DOI [10.5281/zenodo.10077754, DOI 10.5281/ZENODO.10077754]
   Stepanov D, 2021, IEEE INT CONF SOFTW, P318, DOI 10.1109/ICST49551.2021.00044
   Sun CN, 2016, ACM SIGPLAN NOTICES, V51, P849, DOI 10.1145/3022671.2984038
   Takashima Y, 2021, PROCEEDINGS OF THE 42ND ACM SIGPLAN INTERNATIONAL CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '21), P899, DOI 10.1145/3453483.3454084
   Tate R, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P614
   Urzyczyn P, 1997, LECT NOTES COMPUT SC, V1210, P373
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P216, DOI [10.1145/2666356.2594334, 10.1145/2594291.2594334]
   Yang XJ, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P283
   YEN JY, 1971, MANAGE SCI, V17, P712, DOI 10.1287/mnsc.17.11.712
   Zhang QR, 2017, ACM SIGPLAN NOTICES, V52, P347, DOI [10.1145/3062341.3062379, 10.1145/3140587.3062379]
NR 39
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 62
DI 10.1145/3632904
PG 32
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400063
OA gold, Green Published
DA 2024-08-05
ER

PT J
AU Zhang, X
   Xie, RF
   Guo, GC
   He, X
   Zan, T
   Hu, ZJ
AF Zhang, Xing
   Xie, Ruifeng
   Guo, Guanchen
   He, Xiao
   Zan, Tao
   Hu, Zhenjiang
TI Fusing Direct Manipulations into Functional Programs
SO PROCEEDINGS OF THE ACM ON PROGRAMMING LANGUAGES-PACMPL
LA English
DT Article
DE Bidirectional Programming; Direct Manipulation; FuseDM
ID TRANSFORMATIONS
AB Bidirectional live programming systems (BLP) enable developers to modify a program by directly manipulating the program output, so that the updated program can produce the manipulated output. One state-of-the-art approach to BLP systems is operation-based, which captures the developer's intention of program modifications by taking how the developer manipulates the output into account. The program modifications are usually hard coded for each direct manipulation in these BLP systems, which are difficult to extend. Moreover, to reflect the manipulations to the source program, these BLP systems trace the modified output to appropriate code fragments and perform corresponding code transformations. Accordingly, they require direct manipulation users be aware of the source code and how it is changed, making "direct" manipulation (on output) be "indirect".
   In this paper, we resolve this problem by presenting a novel operation-based framework for bidirectional live programming, which can automatically fuse direct manipulations into the source code, thus supporting code-insensitive direct manipulations. Firstly, we design a simple but expressive delta language DM capable of expressing common direct manipulations for output values. Secondly, we present a fusion algorithm that propagates direct manipulations into the source functional programs and applies them to the constants whenever possible; otherwise, the algorithm embeds manipulations into the "proper positions" of programs. We prove the correctness of the fusion algorithm that the updated program executes to get the manipulated output. To demonstrate the expressiveness of DM and the effectiveness of our fusion algorithm, we have implemented FuseDM, a prototype SVG editor that supports GUI-based operations for direct manipulation, and successfully designed 14 benchmark examples starting from blank code using FuseDM.
C1 [Zhang, Xing; Xie, Ruifeng; Guo, Guanchen; Hu, Zhenjiang] Peking Univ, Beijing, Peoples R China.
   [He, Xiao] Univ Sci & Technol Beijing, Beijing, Peoples R China.
   [Zan, Tao] Longyan Univ, Longyan, Fujian, Peoples R China.
C3 Peking University; University of Science & Technology Beijing; Longyan
   University
RP He, X (corresponding author), Univ Sci & Technol Beijing, Beijing, Peoples R China.
EM zhangstar@stu.pku.edu.cn; xieruifeng@pku.edu.cn;
   guanchenguo@stu.pku.edu.cn; hexiao@ustb.edu.cn; zan@lyun.edu.cn;
   huzj@pku.edu.cn
OI Zan, Tao/0009-0006-3581-5324; Hu, Zhenjiang/0000-0002-9034-205X; he,
   xiao/0000-0002-3000-0795
FU National Key Research and Development Program of China [2021ZD0110202];
   Natural Science Foundation of Fujian Province for Youths [2021J05230]
FX The authors would like to thank anonymous reviewers for many helpful
   suggestions. This work was partly supported by the National Key Research
   and Development Program of China (No. 2021ZD0110202) and the Natural
   Science Foundation of Fujian Province for Youths (No. 2021J05230).
CR BANCILHON F, 1981, ACM T DATABASE SYST, V6, P557, DOI 10.1145/319628.319634
   Chugh R, 2016, ACM SIGPLAN NOTICES, V51, P341, DOI [10.1145/2908080.2908103, 10.1145/2980983.2908103]
   Czaplicki Evan, 2012, Elm: A delightful language for reliable webapps
   Czarnecki K, 2009, LECT NOTES COMPUT SC, V5563, P260, DOI 10.1007/978-3-642-02408-5_19
   Diskin Z, 2011, LECT NOTES COMPUT SC, V6981, P304, DOI 10.1007/978-3-642-24485-8_22
   Diskin Z, 2010, LECT NOTES COMPUT SC, V6142, P61, DOI 10.1007/978-3-642-13688-7_5
   Foster JN, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1047659.1040325
   Fukahori Koumei, 2014, C HUMAN FACTORS COMP, DOI [10.1145/2559206.2581138, DOI 10.1145/2559206.2581138]
   Hempel B, 2019, PROCEEDINGS OF THE 32ND ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY (UIST 2019), P281, DOI 10.1145/3332165.3347925
   Hempel B, 2016, UIST 2016: PROCEEDINGS OF THE 29TH ANNUAL SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P379, DOI 10.1145/2984511.2984575
   Hofmann M, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P495
   Mayer M, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276497
   Melnik S, 2008, ACM T DATABASE SYST, V33, DOI 10.1145/1412331.1412334
   Ohori Atsushi, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P143, DOI 10.1145/1190216.1190241
   Solar-Lezama Armando, 2008, Program synthesis by sketching
   Takano A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P306, DOI 10.1145/224164.224221
   Ureche V, 2015, ACM SIGPLAN NOTICES, V50, P801, DOI [10.1145/2814270.2814271, 10.1145/2858965.2814271]
   von Koch H., 1904, Sur une courbe continue sans tangente obtenue par une construction geometrique elementaire
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Wei-Ngan Chin, 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P11
   Zhang X, 2023, P ACM PROGRAM LANG, V7, DOI 10.1145/3586035
   Zhang X, 2022, PROC INT CONF SOFTW, P2154, DOI 10.1145/3510003.3510195
   Zhang Xing, 2023, FuseDM, DOI [10.5281/zenodo.8419913, DOI 10.5281/ZENODO.8419913]
NR 23
TC 0
Z9 0
U1 0
U2 0
PU ASSOC COMPUTING MACHINERY
PI NEW YORK
PA 1601 Broadway, 10th Floor, NEW YORK, NY USA
EI 2475-1421
J9 P ACM PROGRAM LANG
JI P. ACM Program. Lang.
PD JAN
PY 2024
VL 8
IS POPL
AR 41
DI 10.1145/3632883
PG 28
WC Computer Science, Software Engineering
WE Emerging Sources Citation Index (ESCI)
SC Computer Science
GA JB6I6
UT WOS:001170729400042
OA gold
DA 2024-08-05
ER

EF